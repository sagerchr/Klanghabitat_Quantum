
updating_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015c5c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013a90  08015e5c  08015e5c  00025e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080298ec  080298ec  00040080  2**0
                  CONTENTS
  4 .ARM          00000008  080298ec  080298ec  000398ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080298f4  080298f4  00040080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080298f4  080298f4  000398f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080298f8  080298f8  000398f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080298fc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b3e0  20000080  0802997c  00040080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b460  0802997c  0004b460  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00044f43  00000000  00000000  000400ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008130  00000000  00000000  00084ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002518  00000000  00000000  0008d128  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002310  00000000  00000000  0008f640  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000135c5  00000000  00000000  00091950  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002eaf4  00000000  00000000  000a4f15  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00122bda  00000000  00000000  000d3a09  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f65e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e94  00000000  00000000  001f6660  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08015e44 	.word	0x08015e44

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08015e44 	.word	0x08015e44

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4a07      	ldr	r2, [pc, #28]	; (800063c <vApplicationGetIdleTaskMemory+0x2c>)
 8000620:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <vApplicationGetIdleTaskMemory+0x30>)
 8000626:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	2000009c 	.word	0x2000009c
 8000640:	200000f0 	.word	0x200000f0

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b5b0      	push	{r4, r5, r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f000 fe52 	bl	80012f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f823 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 f997 	bl	8000984 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000656:	f000 f937 	bl	80008c8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800065a:	f000 f965 	bl	8000928 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 800065e:	f000 f8b3 	bl	80007c8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000662:	f000 f901 	bl	8000868 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8000666:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <main+0x4c>)
 8000668:	1d3c      	adds	r4, r7, #4
 800066a:	461d      	mov	r5, r3
 800066c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800066e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000670:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000674:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f005 ffe2 	bl	8006646 <osThreadCreate>
 8000682:	4602      	mov	r2, r0
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <main+0x50>)
 8000686:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000688:	f005 ffc6 	bl	8006618 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800068c:	e7fe      	b.n	800068c <main+0x48>
 800068e:	bf00      	nop
 8000690:	08015e68 	.word	0x08015e68
 8000694:	20004628 	.word	0x20004628

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b0b8      	sub	sp, #224	; 0xe0
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006a2:	2234      	movs	r2, #52	; 0x34
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f014 fc84 	bl	8014fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2290      	movs	r2, #144	; 0x90
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f014 fc75 	bl	8014fb4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006ca:	f002 fbff 	bl	8002ecc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4b3b      	ldr	r3, [pc, #236]	; (80007bc <SystemClock_Config+0x124>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	4a3a      	ldr	r2, [pc, #232]	; (80007bc <SystemClock_Config+0x124>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d8:	6413      	str	r3, [r2, #64]	; 0x40
 80006da:	4b38      	ldr	r3, [pc, #224]	; (80007bc <SystemClock_Config+0x124>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e6:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <SystemClock_Config+0x128>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a35      	ldr	r2, [pc, #212]	; (80007c0 <SystemClock_Config+0x128>)
 80006ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006f0:	6013      	str	r3, [r2, #0]
 80006f2:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <SystemClock_Config+0x128>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fe:	2301      	movs	r3, #1
 8000700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000704:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000708:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000712:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000716:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800071a:	2304      	movs	r3, #4
 800071c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000720:	23d8      	movs	r3, #216	; 0xd8
 8000722:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000726:	2302      	movs	r3, #2
 8000728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800072c:	2309      	movs	r3, #9
 800072e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000732:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fc28 	bl	8002f8c <HAL_RCC_OscConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000742:	f000 fa05 	bl	8000b50 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000746:	f002 fbd1 	bl	8002eec <HAL_PWREx_EnableOverDrive>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000750:	f000 f9fe 	bl	8000b50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000754:	230f      	movs	r3, #15
 8000756:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000766:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800076a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000776:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800077a:	2107      	movs	r1, #7
 800077c:	4618      	mov	r0, r3
 800077e:	f002 feb3 	bl	80034e8 <HAL_RCC_ClockConfig>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000788:	f000 f9e2 	bl	8000b50 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <SystemClock_Config+0x12c>)
 800078e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000790:	2300      	movs	r3, #0
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000794:	2300      	movs	r3, #0
 8000796:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000798:	2300      	movs	r3, #0
 800079a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800079e:	f107 0308 	add.w	r3, r7, #8
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 f8ca 	bl	800393c <HAL_RCCEx_PeriphCLKConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0x11a>
  {
    Error_Handler();
 80007ae:	f000 f9cf 	bl	8000b50 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	37e0      	adds	r7, #224	; 0xe0
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40007000 	.word	0x40007000
 80007c4:	00200140 	.word	0x00200140

080007c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007e6:	4b1d      	ldr	r3, [pc, #116]	; (800085c <MX_TIM3_Init+0x94>)
 80007e8:	4a1d      	ldr	r2, [pc, #116]	; (8000860 <MX_TIM3_Init+0x98>)
 80007ea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 216;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <MX_TIM3_Init+0x94>)
 80007ee:	22d8      	movs	r2, #216	; 0xd8
 80007f0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_TIM3_Init+0x94>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100000;
 80007f8:	4b18      	ldr	r3, [pc, #96]	; (800085c <MX_TIM3_Init+0x94>)
 80007fa:	4a1a      	ldr	r2, [pc, #104]	; (8000864 <MX_TIM3_Init+0x9c>)
 80007fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_TIM3_Init+0x94>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_TIM3_Init+0x94>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800080a:	4814      	ldr	r0, [pc, #80]	; (800085c <MX_TIM3_Init+0x94>)
 800080c:	f003 fcbc 	bl	8004188 <HAL_TIM_Base_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000816:	f000 f99b 	bl	8000b50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000820:	f107 0310 	add.w	r3, r7, #16
 8000824:	4619      	mov	r1, r3
 8000826:	480d      	ldr	r0, [pc, #52]	; (800085c <MX_TIM3_Init+0x94>)
 8000828:	f003 fe24 	bl	8004474 <HAL_TIM_ConfigClockSource>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000832:	f000 f98d 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4806      	ldr	r0, [pc, #24]	; (800085c <MX_TIM3_Init+0x94>)
 8000844:	f004 f832 	bl	80048ac <HAL_TIMEx_MasterConfigSynchronization>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800084e:	f000 f97f 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	3720      	adds	r7, #32
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20004ab0 	.word	0x20004ab0
 8000860:	40000400 	.word	0x40000400
 8000864:	000186a0 	.word	0x000186a0

08000868 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800086c:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 800086e:	4a15      	ldr	r2, [pc, #84]	; (80008c4 <MX_USART1_UART_Init+0x5c>)
 8000870:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 8000874:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000878:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000880:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000886:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 800088e:	220c      	movs	r2, #12
 8000890:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000898:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089e:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_USART1_UART_Init+0x58>)
 80008ac:	f004 f8aa 	bl	8004a04 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008b6:	f000 f94b 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20004b24 	.word	0x20004b24
 80008c4:	40011000 	.word	0x40011000

080008c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008cc:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008ce:	4a15      	ldr	r2, [pc, #84]	; (8000924 <MX_USART3_UART_Init+0x5c>)
 80008d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008ee:	220c      	movs	r2, #12
 80008f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART3_UART_Init+0x58>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART3_UART_Init+0x58>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART3_UART_Init+0x58>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART3_UART_Init+0x58>)
 800090c:	f004 f87a 	bl	8004a04 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000916:	f000 f91b 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	2000462c 	.word	0x2000462c
 8000924:	40004800 	.word	0x40004800

08000928 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000932:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000934:	4b12      	ldr	r3, [pc, #72]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000936:	2206      	movs	r2, #6
 8000938:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800093c:	2202      	movs	r2, #2
 800093e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000948:	2202      	movs	r2, #2
 800094a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800094c:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800094e:	2201      	movs	r2, #1
 8000950:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000958:	4b09      	ldr	r3, [pc, #36]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000960:	2201      	movs	r2, #1
 8000962:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000966:	2200      	movs	r2, #0
 8000968:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800096c:	f002 f965 	bl	8002c3a <HAL_PCD_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000976:	f000 f8eb 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200046ac 	.word	0x200046ac

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08c      	sub	sp, #48	; 0x30
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	4b46      	ldr	r3, [pc, #280]	; (8000ab4 <MX_GPIO_Init+0x130>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a45      	ldr	r2, [pc, #276]	; (8000ab4 <MX_GPIO_Init+0x130>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b43      	ldr	r3, [pc, #268]	; (8000ab4 <MX_GPIO_Init+0x130>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	61bb      	str	r3, [r7, #24]
 80009b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	4b40      	ldr	r3, [pc, #256]	; (8000ab4 <MX_GPIO_Init+0x130>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a3f      	ldr	r2, [pc, #252]	; (8000ab4 <MX_GPIO_Init+0x130>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b3d      	ldr	r3, [pc, #244]	; (8000ab4 <MX_GPIO_Init+0x130>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <MX_GPIO_Init+0x130>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a39      	ldr	r2, [pc, #228]	; (8000ab4 <MX_GPIO_Init+0x130>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b37      	ldr	r3, [pc, #220]	; (8000ab4 <MX_GPIO_Init+0x130>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b34      	ldr	r3, [pc, #208]	; (8000ab4 <MX_GPIO_Init+0x130>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a33      	ldr	r2, [pc, #204]	; (8000ab4 <MX_GPIO_Init+0x130>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b31      	ldr	r3, [pc, #196]	; (8000ab4 <MX_GPIO_Init+0x130>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <MX_GPIO_Init+0x130>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a2d      	ldr	r2, [pc, #180]	; (8000ab4 <MX_GPIO_Init+0x130>)
 8000a00:	f043 0308 	orr.w	r3, r3, #8
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <MX_GPIO_Init+0x130>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	60bb      	str	r3, [r7, #8]
 8000a10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <MX_GPIO_Init+0x130>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a27      	ldr	r2, [pc, #156]	; (8000ab4 <MX_GPIO_Init+0x130>)
 8000a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <MX_GPIO_Init+0x130>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a30:	4821      	ldr	r0, [pc, #132]	; (8000ab8 <MX_GPIO_Init+0x134>)
 8000a32:	f002 f8cf 	bl	8002bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2140      	movs	r1, #64	; 0x40
 8000a3a:	4820      	ldr	r0, [pc, #128]	; (8000abc <MX_GPIO_Init+0x138>)
 8000a3c:	f002 f8ca 	bl	8002bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a46:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <MX_GPIO_Init+0x13c>)
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	481b      	ldr	r0, [pc, #108]	; (8000ac4 <MX_GPIO_Init+0x140>)
 8000a56:	f001 ff13 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a5a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4811      	ldr	r0, [pc, #68]	; (8000ab8 <MX_GPIO_Init+0x134>)
 8000a74:	f001 ff04 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a78:	2340      	movs	r3, #64	; 0x40
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	480b      	ldr	r0, [pc, #44]	; (8000abc <MX_GPIO_Init+0x138>)
 8000a90:	f001 fef6 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_GPIO_Init+0x138>)
 8000aa8:	f001 feea 	bl	8002880 <HAL_GPIO_Init>

}
 8000aac:	bf00      	nop
 8000aae:	3730      	adds	r7, #48	; 0x30
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020400 	.word	0x40020400
 8000abc:	40021800 	.word	0x40021800
 8000ac0:	10110000 	.word	0x10110000
 8000ac4:	40020800 	.word	0x40020800

08000ac8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000ad0:	f005 f800 	bl	8005ad4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  httpd_init();
 8000ad4:	f009 fc32 	bl	800a33c <httpd_init>
  HAL_TIM_Base_Start_IT(&htim3);
 8000ad8:	4812      	ldr	r0, [pc, #72]	; (8000b24 <StartDefaultTask+0x5c>)
 8000ada:	f003 fb81 	bl	80041e0 <HAL_TIM_Base_Start_IT>
  //MY_FLASH_SetSectorAddrs(5, 0x08040000);
  echo_init();
 8000ade:	f000 fadb 	bl	8001098 <echo_init>


  /* Infinite loop */
  for(;;)
  {
	  for(int i= 0; i <30; i++){
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	e009      	b.n	8000afc <StartDefaultTask+0x34>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000ae8:	2101      	movs	r1, #1
 8000aea:	480f      	ldr	r0, [pc, #60]	; (8000b28 <StartDefaultTask+0x60>)
 8000aec:	f002 f88b 	bl	8002c06 <HAL_GPIO_TogglePin>
		  HAL_Delay(250);
 8000af0:	20fa      	movs	r0, #250	; 0xfa
 8000af2:	f000 fc2b 	bl	800134c <HAL_Delay>
	  for(int i= 0; i <30; i++){
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	3301      	adds	r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b1d      	cmp	r3, #29
 8000b00:	ddf2      	ble.n	8000ae8 <StartDefaultTask+0x20>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i= 0; i <10 ; i++){
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	e009      	b.n	8000b1c <StartDefaultTask+0x54>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000b08:	2101      	movs	r1, #1
 8000b0a:	4807      	ldr	r0, [pc, #28]	; (8000b28 <StartDefaultTask+0x60>)
 8000b0c:	f002 f87b 	bl	8002c06 <HAL_GPIO_TogglePin>

		  HAL_Delay(50);
 8000b10:	2032      	movs	r0, #50	; 0x32
 8000b12:	f000 fc1b 	bl	800134c <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	2b09      	cmp	r3, #9
 8000b20:	ddf2      	ble.n	8000b08 <StartDefaultTask+0x40>
	  for(int i= 0; i <30; i++){
 8000b22:	e7de      	b.n	8000ae2 <StartDefaultTask+0x1a>
 8000b24:	20004ab0 	.word	0x20004ab0
 8000b28:	40020400 	.word	0x40020400

08000b2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d101      	bne.n	8000b42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b3e:	f000 fbe5 	bl	800130c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40010000 	.word	0x40010000

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <HAL_MspInit+0x7c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a1c      	ldr	r2, [pc, #112]	; (8000bdc <HAL_MspInit+0x7c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b1a      	ldr	r3, [pc, #104]	; (8000bdc <HAL_MspInit+0x7c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b17      	ldr	r3, [pc, #92]	; (8000bdc <HAL_MspInit+0x7c>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	4a16      	ldr	r2, [pc, #88]	; (8000bdc <HAL_MspInit+0x7c>)
 8000b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b88:	6453      	str	r3, [r2, #68]	; 0x44
 8000b8a:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <HAL_MspInit+0x7c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 10, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	210a      	movs	r1, #10
 8000b9a:	f06f 000b 	mvn.w	r0, #11
 8000b9e:	f000 fcaf 	bl	8001500 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 10, 0);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	210a      	movs	r1, #10
 8000ba6:	f06f 000a 	mvn.w	r0, #10
 8000baa:	f000 fca9 	bl	8001500 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 10, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	210a      	movs	r1, #10
 8000bb2:	f06f 0009 	mvn.w	r0, #9
 8000bb6:	f000 fca3 	bl	8001500 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 10, 0);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	210a      	movs	r1, #10
 8000bbe:	f06f 0003 	mvn.w	r0, #3
 8000bc2:	f000 fc9d 	bl	8001500 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	210f      	movs	r1, #15
 8000bca:	f06f 0001 	mvn.w	r0, #1
 8000bce:	f000 fc97 	bl	8001500 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800

08000be0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <HAL_TIM_Base_MspInit+0x44>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d113      	bne.n	8000c1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bf2:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_TIM_Base_MspInit+0x48>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	4a0c      	ldr	r2, [pc, #48]	; (8000c28 <HAL_TIM_Base_MspInit+0x48>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <HAL_TIM_Base_MspInit+0x48>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2103      	movs	r1, #3
 8000c0e:	201d      	movs	r0, #29
 8000c10:	f000 fc76 	bl	8001500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c14:	201d      	movs	r0, #29
 8000c16:	f000 fc8f 	bl	8001538 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40000400 	.word	0x40000400
 8000c28:	40023800 	.word	0x40023800

08000c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08c      	sub	sp, #48	; 0x30
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a37      	ldr	r2, [pc, #220]	; (8000d28 <HAL_UART_MspInit+0xfc>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d139      	bne.n	8000cc2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c4e:	4b37      	ldr	r3, [pc, #220]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a36      	ldr	r2, [pc, #216]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000c54:	f043 0310 	orr.w	r3, r3, #16
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b34      	ldr	r3, [pc, #208]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	61bb      	str	r3, [r7, #24]
 8000c64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	4b31      	ldr	r3, [pc, #196]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a30      	ldr	r2, [pc, #192]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b2e      	ldr	r3, [pc, #184]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	617b      	str	r3, [r7, #20]
 8000c7c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000c90:	2304      	movs	r3, #4
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4825      	ldr	r0, [pc, #148]	; (8000d30 <HAL_UART_MspInit+0x104>)
 8000c9c:	f001 fdf0 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ca0:	2340      	movs	r3, #64	; 0x40
 8000ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	481d      	ldr	r0, [pc, #116]	; (8000d30 <HAL_UART_MspInit+0x104>)
 8000cbc:	f001 fde0 	bl	8002880 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cc0:	e02d      	b.n	8000d1e <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART3)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <HAL_UART_MspInit+0x108>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d128      	bne.n	8000d1e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	4a16      	ldr	r2, [pc, #88]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000cd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce8:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000cea:	f043 0308 	orr.w	r3, r3, #8
 8000cee:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_UART_MspInit+0x100>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	f003 0308 	and.w	r3, r3, #8
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cfc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d0e:	2307      	movs	r3, #7
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	4807      	ldr	r0, [pc, #28]	; (8000d38 <HAL_UART_MspInit+0x10c>)
 8000d1a:	f001 fdb1 	bl	8002880 <HAL_GPIO_Init>
}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	; 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40011000 	.word	0x40011000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020400 	.word	0x40020400
 8000d34:	40004800 	.word	0x40004800
 8000d38:	40020c00 	.word	0x40020c00

08000d3c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08a      	sub	sp, #40	; 0x28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d5c:	d141      	bne.n	8000de2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	4b23      	ldr	r3, [pc, #140]	; (8000dec <HAL_PCD_MspInit+0xb0>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a22      	ldr	r2, [pc, #136]	; (8000dec <HAL_PCD_MspInit+0xb0>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b20      	ldr	r3, [pc, #128]	; (8000dec <HAL_PCD_MspInit+0xb0>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d76:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d88:	230a      	movs	r3, #10
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 0314 	add.w	r3, r7, #20
 8000d90:	4619      	mov	r1, r3
 8000d92:	4817      	ldr	r0, [pc, #92]	; (8000df0 <HAL_PCD_MspInit+0xb4>)
 8000d94:	f001 fd74 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	4810      	ldr	r0, [pc, #64]	; (8000df0 <HAL_PCD_MspInit+0xb4>)
 8000dae:	f001 fd67 	bl	8002880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_PCD_MspInit+0xb0>)
 8000db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db6:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <HAL_PCD_MspInit+0xb0>)
 8000db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dbc:	6353      	str	r3, [r2, #52]	; 0x34
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <HAL_PCD_MspInit+0xb0>)
 8000dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <HAL_PCD_MspInit+0xb0>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a07      	ldr	r2, [pc, #28]	; (8000dec <HAL_PCD_MspInit+0xb0>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_PCD_MspInit+0xb0>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	; 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000

08000df4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	; 0x30
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000e04:	2200      	movs	r2, #0
 8000e06:	6879      	ldr	r1, [r7, #4]
 8000e08:	2019      	movs	r0, #25
 8000e0a:	f000 fb79 	bl	8001500 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e0e:	2019      	movs	r0, #25
 8000e10:	f000 fb92 	bl	8001538 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <HAL_InitTick+0xa0>)
 8000e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e18:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <HAL_InitTick+0xa0>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6453      	str	r3, [r2, #68]	; 0x44
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_InitTick+0xa0>)
 8000e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e2c:	f107 0210 	add.w	r2, r7, #16
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fd4e 	bl	80038d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000e3c:	f002 fd38 	bl	80038b0 <HAL_RCC_GetPCLK2Freq>
 8000e40:	4603      	mov	r3, r0
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e48:	4a13      	ldr	r2, [pc, #76]	; (8000e98 <HAL_InitTick+0xa4>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	0c9b      	lsrs	r3, r3, #18
 8000e50:	3b01      	subs	r3, #1
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <HAL_InitTick+0xa8>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <HAL_InitTick+0xac>)
 8000e58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <HAL_InitTick+0xa8>)
 8000e5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e60:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <HAL_InitTick+0xa8>)
 8000e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e66:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <HAL_InitTick+0xa8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b0b      	ldr	r3, [pc, #44]	; (8000e9c <HAL_InitTick+0xa8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e74:	4809      	ldr	r0, [pc, #36]	; (8000e9c <HAL_InitTick+0xa8>)
 8000e76:	f003 f987 	bl	8004188 <HAL_TIM_Base_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d104      	bne.n	8000e8a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e80:	4806      	ldr	r0, [pc, #24]	; (8000e9c <HAL_InitTick+0xa8>)
 8000e82:	f003 f9ad 	bl	80041e0 <HAL_TIM_Base_Start_IT>
 8000e86:	4603      	mov	r3, r0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3730      	adds	r7, #48	; 0x30
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40023800 	.word	0x40023800
 8000e98:	431bde83 	.word	0x431bde83
 8000e9c:	20004ba4 	.word	0x20004ba4
 8000ea0:	40010000 	.word	0x40010000

08000ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler+0x4>

08000ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000eca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000edc:	4802      	ldr	r0, [pc, #8]	; (8000ee8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000ede:	f003 f9a9 	bl	8004234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20004ba4 	.word	0x20004ba4

08000eec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ef0:	4804      	ldr	r0, [pc, #16]	; (8000f04 <TIM3_IRQHandler+0x18>)
 8000ef2:	f003 f99f 	bl	8004234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000ef6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000efa:	4803      	ldr	r0, [pc, #12]	; (8000f08 <TIM3_IRQHandler+0x1c>)
 8000efc:	f001 fe83 	bl	8002c06 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20004ab0 	.word	0x20004ab0
 8000f08:	40020400 	.word	0x40020400

08000f0c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f10:	4802      	ldr	r0, [pc, #8]	; (8000f1c <ETH_IRQHandler+0x10>)
 8000f12:	f000 ff03 	bl	8001d1c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000650c 	.word	0x2000650c

08000f20 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	e00a      	b.n	8000f48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f32:	f3af 8000 	nop.w
 8000f36:	4601      	mov	r1, r0
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	60ba      	str	r2, [r7, #8]
 8000f3e:	b2ca      	uxtb	r2, r1
 8000f40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	dbf0      	blt.n	8000f32 <_read+0x12>
	}

return len;
 8000f50:	687b      	ldr	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	e009      	b.n	8000f80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	60ba      	str	r2, [r7, #8]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dbf1      	blt.n	8000f6c <_write+0x12>
	}
	return len;
 8000f88:	687b      	ldr	r3, [r7, #4]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <_close>:

int _close(int file)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
	return -1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fba:	605a      	str	r2, [r3, #4]
	return 0;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <_isatty>:

int _isatty(int file)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
	return 1;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
	return 0;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001004:	4a14      	ldr	r2, [pc, #80]	; (8001058 <_sbrk+0x5c>)
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <_sbrk+0x60>)
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d102      	bne.n	800101e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <_sbrk+0x64>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <_sbrk+0x68>)
 800101c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	429a      	cmp	r2, r3
 800102a:	d205      	bcs.n	8001038 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <_sbrk+0x6c>)
 800102e:	220c      	movs	r2, #12
 8001030:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001036:	e009      	b.n	800104c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <_sbrk+0x64>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	4a06      	ldr	r2, [pc, #24]	; (8001060 <_sbrk+0x64>)
 8001048:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104a:	68fb      	ldr	r3, [r7, #12]
}
 800104c:	4618      	mov	r0, r3
 800104e:	371c      	adds	r7, #28
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	20080000 	.word	0x20080000
 800105c:	00000400 	.word	0x00000400
 8001060:	200002f0 	.word	0x200002f0
 8001064:	2000b460 	.word	0x2000b460
 8001068:	2000b458 	.word	0x2000b458

0800106c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <SystemInit+0x28>)
 8001072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <SystemInit+0x28>)
 8001078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800107c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SystemInit+0x28>)
 8001082:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001086:	609a      	str	r2, [r3, #8]
#endif
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <echo_init>:

extern UART_HandleTypeDef huart1;

void
echo_init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
  echo_pcb = tcp_new();
 800109e:	f00c fb83 	bl	800d7a8 <tcp_new>
 80010a2:	4602      	mov	r2, r0
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <echo_init+0x58>)
 80010a6:	601a      	str	r2, [r3, #0]
  if (echo_pcb != NULL)
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <echo_init+0x58>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d01b      	beq.n	80010e8 <echo_init+0x50>
  {
    err_t err;

    err = tcp_bind(echo_pcb, IP_ADDR_ANY, 7);
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <echo_init+0x58>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2207      	movs	r2, #7
 80010b6:	490f      	ldr	r1, [pc, #60]	; (80010f4 <echo_init+0x5c>)
 80010b8:	4618      	mov	r0, r3
 80010ba:	f00b fad5 	bl	800c668 <tcp_bind>
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
    if (err == ERR_OK)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10e      	bne.n	80010e8 <echo_init+0x50>
    {
      echo_pcb = tcp_listen(echo_pcb);
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <echo_init+0x58>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	21ff      	movs	r1, #255	; 0xff
 80010d0:	4618      	mov	r0, r3
 80010d2:	f00b fb81 	bl	800c7d8 <tcp_listen_with_backlog>
 80010d6:	4602      	mov	r2, r0
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <echo_init+0x58>)
 80010da:	601a      	str	r2, [r3, #0]
      tcp_accept(echo_pcb, echo_accept);
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <echo_init+0x58>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4905      	ldr	r1, [pc, #20]	; (80010f8 <echo_init+0x60>)
 80010e2:	4618      	mov	r0, r3
 80010e4:	f00c fbee 	bl	800d8c4 <tcp_accept>
  }
  else
  {
    /* abort? output diagnostic? */
  }
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	200002f4 	.word	0x200002f4
 80010f4:	08029838 	.word	0x08029838
 80010f8:	080010fd 	.word	0x080010fd

080010fc <echo_accept>:
uint32_t count = 0;

err_t
echo_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	4613      	mov	r3, r2
 8001108:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* commonly observed practive to call tcp_setprio(), why? */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 800110a:	2101      	movs	r1, #1
 800110c:	68b8      	ldr	r0, [r7, #8]
 800110e:	f00c f959 	bl	800d3c4 <tcp_setprio>

  es = (struct echo_state *)mem_malloc(sizeof(struct echo_state));
 8001112:	200c      	movs	r0, #12
 8001114:	f009 fc9c 	bl	800aa50 <mem_malloc>
 8001118:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d019      	beq.n	8001154 <echo_accept+0x58>
  {
    es->state = ES_ACCEPTED;
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	2201      	movs	r2, #1
 8001124:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	2200      	movs	r2, #0
 8001130:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
    /* pass newly allocated es to our callbacks */
    tcp_arg(newpcb, es);
 8001138:	6939      	ldr	r1, [r7, #16]
 800113a:	68b8      	ldr	r0, [r7, #8]
 800113c:	f00c fb4a 	bl	800d7d4 <tcp_arg>
    tcp_recv(newpcb, echo_recv);
 8001140:	4908      	ldr	r1, [pc, #32]	; (8001164 <echo_accept+0x68>)
 8001142:	68b8      	ldr	r0, [r7, #8]
 8001144:	f00c fb58 	bl	800d7f8 <tcp_recv>
    count = 0;
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <echo_accept+0x6c>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
    ret_err = ERR_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	75fb      	strb	r3, [r7, #23]
 8001152:	e001      	b.n	8001158 <echo_accept+0x5c>

  }
  else
  {
    ret_err = ERR_MEM;
 8001154:	23ff      	movs	r3, #255	; 0xff
 8001156:	75fb      	strb	r3, [r7, #23]
  }
  //MY_FLASH_SetSectorAddrs(5, 0x08040000);
  return ret_err;
 8001158:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	0800116d 	.word	0x0800116d
 8001168:	200002f8 	.word	0x200002f8

0800116c <echo_recv>:

err_t
echo_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 800116c:	b5b0      	push	{r4, r5, r7, lr}
 800116e:	b08e      	sub	sp, #56	; 0x38
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
 8001178:	70fb      	strb	r3, [r7, #3]
 800117a:	466b      	mov	r3, sp
 800117c:	461d      	mov	r5, r3


	if (!p) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d10a      	bne.n	800119a <echo_recv+0x2e>
        tcp_close(tpcb);
 8001184:	68b8      	ldr	r0, [r7, #8]
 8001186:	f00b f979 	bl	800c47c <tcp_close>
        tcp_recv(tpcb, NULL);
 800118a:	2100      	movs	r1, #0
 800118c:	68b8      	ldr	r0, [r7, #8]
 800118e:	f00c fb33 	bl	800d7f8 <tcp_recv>
        HAL_FLASH_Lock();
 8001192:	f001 fb65 	bl	8002860 <HAL_FLASH_Lock>
        return ERR_OK;
 8001196:	2300      	movs	r3, #0
 8001198:	e078      	b.n	800128c <echo_recv+0x120>
    }


	char buffer[p->len];
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	8958      	ldrh	r0, [r3, #10]
 800119e:	4603      	mov	r3, r0
 80011a0:	3b01      	subs	r3, #1
 80011a2:	637b      	str	r3, [r7, #52]	; 0x34
 80011a4:	b281      	uxth	r1, r0
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	f04f 0300 	mov.w	r3, #0
 80011ae:	f04f 0400 	mov.w	r4, #0
 80011b2:	00d4      	lsls	r4, r2, #3
 80011b4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80011b8:	00cb      	lsls	r3, r1, #3
 80011ba:	b281      	uxth	r1, r0
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	f04f 0300 	mov.w	r3, #0
 80011c4:	f04f 0400 	mov.w	r4, #0
 80011c8:	00d4      	lsls	r4, r2, #3
 80011ca:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80011ce:	00cb      	lsls	r3, r1, #3
 80011d0:	4603      	mov	r3, r0
 80011d2:	3307      	adds	r3, #7
 80011d4:	08db      	lsrs	r3, r3, #3
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	ebad 0d03 	sub.w	sp, sp, r3
 80011dc:	466b      	mov	r3, sp
 80011de:	3300      	adds	r3, #0
 80011e0:	633b      	str	r3, [r7, #48]	; 0x30
	char buffer2[p->len];
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	8958      	ldrh	r0, [r3, #10]
 80011e6:	4603      	mov	r3, r0
 80011e8:	3b01      	subs	r3, #1
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ec:	b281      	uxth	r1, r0
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	f04f 0300 	mov.w	r3, #0
 80011f6:	f04f 0400 	mov.w	r4, #0
 80011fa:	00d4      	lsls	r4, r2, #3
 80011fc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001200:	00cb      	lsls	r3, r1, #3
 8001202:	b281      	uxth	r1, r0
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	f04f 0400 	mov.w	r4, #0
 8001210:	00d4      	lsls	r4, r2, #3
 8001212:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001216:	00cb      	lsls	r3, r1, #3
 8001218:	4603      	mov	r3, r0
 800121a:	3307      	adds	r3, #7
 800121c:	08db      	lsrs	r3, r3, #3
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	ebad 0d03 	sub.w	sp, sp, r3
 8001224:	466b      	mov	r3, sp
 8001226:	3300      	adds	r3, #0
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
    /* indicate that the packet has been received */
    tcp_recved(tpcb, p->len);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	895b      	ldrh	r3, [r3, #10]
 800122e:	4619      	mov	r1, r3
 8001230:	68b8      	ldr	r0, [r7, #8]
 8001232:	f00b fbe7 	bl	800ca04 <tcp_recved>
    /* in this case, we assume that the payload is < TCP_SND_BUF */

    //err = tcp_write(tpcb, p->payload, p->len, 1);
    /* free the received pbuf */

    pbuf_free(p);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f00a fc7e 	bl	800bb38 <pbuf_free>
    //MY_FLASH_WriteN(count, p->payload, p->len, DATA_TYPE_8);
    count = count + p->len;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	895b      	ldrh	r3, [r3, #10]
 8001240:	461a      	mov	r2, r3
 8001242:	4b15      	ldr	r3, [pc, #84]	; (8001298 <echo_recv+0x12c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a13      	ldr	r2, [pc, #76]	; (8001298 <echo_recv+0x12c>)
 800124a:	6013      	str	r3, [r2, #0]
    uint8_t byteCount=5;
 800124c:	2305      	movs	r3, #5
 800124e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    char reciveData1[]= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 8001252:	f107 031c 	add.w	r3, r7, #28
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	811a      	strh	r2, [r3, #8]
    char reciveData2[]= {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	605a      	str	r2, [r3, #4]
 8001268:	811a      	strh	r2, [r3, #8]
    HAL_UART_Transmit(&huart1, p->payload, p->len, 10);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6859      	ldr	r1, [r3, #4]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	895a      	ldrh	r2, [r3, #10]
 8001272:	230a      	movs	r3, #10
 8001274:	4809      	ldr	r0, [pc, #36]	; (800129c <echo_recv+0x130>)
 8001276:	f003 fc13 	bl	8004aa0 <HAL_UART_Transmit>


    //HAL_UART_Receive(&huart1, byteCount, 5, 10000);

    HAL_UART_Receive(&huart1,reciveData1 , 9, 10000);
 800127a:	f107 011c 	add.w	r1, r7, #28
 800127e:	f242 7310 	movw	r3, #10000	; 0x2710
 8001282:	2209      	movs	r2, #9
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <echo_recv+0x130>)
 8001286:	f003 fc9c 	bl	8004bc2 <HAL_UART_Receive>
       		char str[7];
       		sprintf(str, "%d;", count);
       		tcp_write(tpcb, str, 7, 1);
    	}
*/
    return ERR_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	46ad      	mov	sp, r5
}
 800128e:	4618      	mov	r0, r3
 8001290:	3738      	adds	r7, #56	; 0x38
 8001292:	46bd      	mov	sp, r7
 8001294:	bdb0      	pop	{r4, r5, r7, pc}
 8001296:	bf00      	nop
 8001298:	200002f8 	.word	0x200002f8
 800129c:	20004b24 	.word	0x20004b24

080012a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012a6:	e003      	b.n	80012b0 <LoopCopyDataInit>

080012a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012ae:	3104      	adds	r1, #4

080012b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012b0:	480b      	ldr	r0, [pc, #44]	; (80012e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012b8:	d3f6      	bcc.n	80012a8 <CopyDataInit>
  ldr  r2, =_sbss
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012bc:	e002      	b.n	80012c4 <LoopFillZerobss>

080012be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012c0:	f842 3b04 	str.w	r3, [r2], #4

080012c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012c8:	d3f9      	bcc.n	80012be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ca:	f7ff fecf 	bl	800106c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ce:	f013 fe33 	bl	8014f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d2:	f7ff f9b7 	bl	8000644 <main>
  bx  lr    
 80012d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80012dc:	080298fc 	.word	0x080298fc
  ldr  r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012e4:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80012e8:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80012ec:	2000b460 	.word	0x2000b460

080012f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC_IRQHandler>

080012f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f6:	2003      	movs	r0, #3
 80012f8:	f000 f8f7 	bl	80014ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fc:	2000      	movs	r0, #0
 80012fe:	f7ff fd79 	bl	8000df4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001302:	f7ff fc2d 	bl	8000b60 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	bd80      	pop	{r7, pc}

0800130c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <HAL_IncTick+0x20>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x24>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_IncTick+0x24>)
 800131e:	6013      	str	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000008 	.word	0x20000008
 8001330:	20004be4 	.word	0x20004be4

08001334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  return uwTick;
 8001338:	4b03      	ldr	r3, [pc, #12]	; (8001348 <HAL_GetTick+0x14>)
 800133a:	681b      	ldr	r3, [r3, #0]
}
 800133c:	4618      	mov	r0, r3
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20004be4 	.word	0x20004be4

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff ffee 	bl	8001334 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001364:	d005      	beq.n	8001372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_Delay+0x40>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001372:	bf00      	nop
 8001374:	f7ff ffde 	bl	8001334 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	429a      	cmp	r2, r3
 8001382:	d8f7      	bhi.n	8001374 <HAL_Delay+0x28>
  {
  }
}
 8001384:	bf00      	nop
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000008 	.word	0x20000008

08001390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <__NVIC_SetPriorityGrouping+0x40>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013ac:	4013      	ands	r3, r2
 80013ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <__NVIC_SetPriorityGrouping+0x40>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00
 80013d4:	05fa0000 	.word	0x05fa0000

080013d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <__NVIC_GetPriorityGrouping+0x18>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	0a1b      	lsrs	r3, r3, #8
 80013e2:	f003 0307 	and.w	r3, r3, #7
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0b      	blt.n	800141e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	f003 021f 	and.w	r2, r3, #31
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <__NVIC_EnableIRQ+0x38>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	095b      	lsrs	r3, r3, #5
 8001414:	2001      	movs	r0, #1
 8001416:	fa00 f202 	lsl.w	r2, r0, r2
 800141a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db0a      	blt.n	800145a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	b2da      	uxtb	r2, r3
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <__NVIC_SetPriority+0x4c>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	0112      	lsls	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	440b      	add	r3, r1
 8001454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001458:	e00a      	b.n	8001470 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	b2da      	uxtb	r2, r3
 800145e:	4908      	ldr	r1, [pc, #32]	; (8001480 <__NVIC_SetPriority+0x50>)
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	3b04      	subs	r3, #4
 8001468:	0112      	lsls	r2, r2, #4
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	440b      	add	r3, r1
 800146e:	761a      	strb	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000e100 	.word	0xe000e100
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001484:	b480      	push	{r7}
 8001486:	b089      	sub	sp, #36	; 0x24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	f1c3 0307 	rsb	r3, r3, #7
 800149e:	2b04      	cmp	r3, #4
 80014a0:	bf28      	it	cs
 80014a2:	2304      	movcs	r3, #4
 80014a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3304      	adds	r3, #4
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d902      	bls.n	80014b4 <NVIC_EncodePriority+0x30>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3b03      	subs	r3, #3
 80014b2:	e000      	b.n	80014b6 <NVIC_EncodePriority+0x32>
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43da      	mvns	r2, r3
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	401a      	ands	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	43d9      	mvns	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014dc:	4313      	orrs	r3, r2
         );
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ff4c 	bl	8001390 <__NVIC_SetPriorityGrouping>
}
 80014f8:	bf00      	nop
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001512:	f7ff ff61 	bl	80013d8 <__NVIC_GetPriorityGrouping>
 8001516:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	68b9      	ldr	r1, [r7, #8]
 800151c:	6978      	ldr	r0, [r7, #20]
 800151e:	f7ff ffb1 	bl	8001484 <NVIC_EncodePriority>
 8001522:	4602      	mov	r2, r0
 8001524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001528:	4611      	mov	r1, r2
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff ff80 	bl	8001430 <__NVIC_SetPriority>
}
 8001530:	bf00      	nop
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff54 	bl	80013f4 <__NVIC_EnableIRQ>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001564:	4ba9      	ldr	r3, [pc, #676]	; (800180c <HAL_ETH_Init+0x2b8>)
 8001566:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800156c:	2300      	movs	r3, #0
 800156e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e183      	b.n	8001882 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d106      	bne.n	8001594 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f004 fbfe 	bl	8005d90 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001594:	4b9e      	ldr	r3, [pc, #632]	; (8001810 <HAL_ETH_Init+0x2bc>)
 8001596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001598:	4a9d      	ldr	r2, [pc, #628]	; (8001810 <HAL_ETH_Init+0x2bc>)
 800159a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159e:	6453      	str	r3, [r2, #68]	; 0x44
 80015a0:	4b9b      	ldr	r3, [pc, #620]	; (8001810 <HAL_ETH_Init+0x2bc>)
 80015a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80015ac:	4b99      	ldr	r3, [pc, #612]	; (8001814 <HAL_ETH_Init+0x2c0>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	4a98      	ldr	r2, [pc, #608]	; (8001814 <HAL_ETH_Init+0x2c0>)
 80015b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80015b6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80015b8:	4b96      	ldr	r3, [pc, #600]	; (8001814 <HAL_ETH_Init+0x2c0>)
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4994      	ldr	r1, [pc, #592]	; (8001814 <HAL_ETH_Init+0x2c0>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 0201 	orr.w	r2, r2, #1
 80015d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015dc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80015de:	f7ff fea9 	bl	8001334 <HAL_GetTick>
 80015e2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80015e4:	e011      	b.n	800160a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80015e6:	f7ff fea5 	bl	8001334 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80015f4:	d909      	bls.n	800160a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2203      	movs	r2, #3
 80015fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e13b      	b.n	8001882 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e4      	bne.n	80015e6 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f023 031c 	bic.w	r3, r3, #28
 800162a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800162c:	f002 f920 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 8001630:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	4a78      	ldr	r2, [pc, #480]	; (8001818 <HAL_ETH_Init+0x2c4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d908      	bls.n	800164c <HAL_ETH_Init+0xf8>
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	4a77      	ldr	r2, [pc, #476]	; (800181c <HAL_ETH_Init+0x2c8>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d804      	bhi.n	800164c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f043 0308 	orr.w	r3, r3, #8
 8001648:	61fb      	str	r3, [r7, #28]
 800164a:	e027      	b.n	800169c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	4a73      	ldr	r2, [pc, #460]	; (800181c <HAL_ETH_Init+0x2c8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d908      	bls.n	8001666 <HAL_ETH_Init+0x112>
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	4a72      	ldr	r2, [pc, #456]	; (8001820 <HAL_ETH_Init+0x2cc>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d804      	bhi.n	8001666 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f043 030c 	orr.w	r3, r3, #12
 8001662:	61fb      	str	r3, [r7, #28]
 8001664:	e01a      	b.n	800169c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	4a6d      	ldr	r2, [pc, #436]	; (8001820 <HAL_ETH_Init+0x2cc>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d903      	bls.n	8001676 <HAL_ETH_Init+0x122>
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	4a6c      	ldr	r2, [pc, #432]	; (8001824 <HAL_ETH_Init+0x2d0>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d911      	bls.n	800169a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	4a6a      	ldr	r2, [pc, #424]	; (8001824 <HAL_ETH_Init+0x2d0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d908      	bls.n	8001690 <HAL_ETH_Init+0x13c>
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	4a69      	ldr	r2, [pc, #420]	; (8001828 <HAL_ETH_Init+0x2d4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d804      	bhi.n	8001690 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f043 0304 	orr.w	r3, r3, #4
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	e005      	b.n	800169c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f043 0310 	orr.w	r3, r3, #16
 8001696:	61fb      	str	r3, [r7, #28]
 8001698:	e000      	b.n	800169c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800169a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	69fa      	ldr	r2, [r7, #28]
 80016a2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80016a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016a8:	2100      	movs	r1, #0
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f000 fc19 	bl	8001ee2 <HAL_ETH_WritePHYRegister>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d00b      	beq.n	80016ce <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80016ba:	6939      	ldr	r1, [r7, #16]
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 fdcf 	bl	8002260 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0d9      	b.n	8001882 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80016ce:	20ff      	movs	r0, #255	; 0xff
 80016d0:	f7ff fe3c 	bl	800134c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80a7 	beq.w	800182c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80016de:	f7ff fe29 	bl	8001334 <HAL_GetTick>
 80016e2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	461a      	mov	r2, r3
 80016ea:	2101      	movs	r1, #1
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 fb90 	bl	8001e12 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80016f2:	f7ff fe1f 	bl	8001334 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001700:	4293      	cmp	r3, r2
 8001702:	d90f      	bls.n	8001724 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001708:	6939      	ldr	r1, [r7, #16]
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 fda8 	bl	8002260 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e0ae      	b.n	8001882 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0da      	beq.n	80016e4 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800172e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001732:	2100      	movs	r1, #0
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 fbd4 	bl	8001ee2 <HAL_ETH_WritePHYRegister>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00b      	beq.n	8001758 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001744:	6939      	ldr	r1, [r7, #16]
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fd8a 	bl	8002260 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2201      	movs	r2, #1
 8001750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001754:	2301      	movs	r3, #1
 8001756:	e094      	b.n	8001882 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001758:	f7ff fdec 	bl	8001334 <HAL_GetTick>
 800175c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	461a      	mov	r2, r3
 8001764:	2101      	movs	r1, #1
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 fb53 	bl	8001e12 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800176c:	f7ff fde2 	bl	8001334 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d90f      	bls.n	800179e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001782:	6939      	ldr	r1, [r7, #16]
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 fd6b 	bl	8002260 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2201      	movs	r2, #1
 800178e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e071      	b.n	8001882 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f003 0320 	and.w	r3, r3, #32
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0da      	beq.n	800175e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	461a      	mov	r2, r3
 80017ae:	211f      	movs	r1, #31
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 fb2e 	bl	8001e12 <HAL_ETH_ReadPHYRegister>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00b      	beq.n	80017d4 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80017c0:	6939      	ldr	r1, [r7, #16]
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fd4c 	bl	8002260 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80017d0:	2301      	movs	r3, #1
 80017d2:	e056      	b.n	8001882 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d004      	beq.n	80017e8 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	e002      	b.n	80017ee <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	e037      	b.n	8001870 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	e032      	b.n	8001870 <HAL_ETH_Init+0x31c>
 800180a:	bf00      	nop
 800180c:	03938700 	.word	0x03938700
 8001810:	40023800 	.word	0x40023800
 8001814:	40013800 	.word	0x40013800
 8001818:	01312cff 	.word	0x01312cff
 800181c:	02160ebf 	.word	0x02160ebf
 8001820:	039386ff 	.word	0x039386ff
 8001824:	05f5e0ff 	.word	0x05f5e0ff
 8001828:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	08db      	lsrs	r3, r3, #3
 8001832:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	085b      	lsrs	r3, r3, #1
 800183a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800183c:	4313      	orrs	r3, r2
 800183e:	b29b      	uxth	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	2100      	movs	r1, #0
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 fb4c 	bl	8001ee2 <HAL_ETH_WritePHYRegister>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d00b      	beq.n	8001868 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001854:	6939      	ldr	r1, [r7, #16]
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 fd02 	bl	8002260 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e00c      	b.n	8001882 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001868:	f640 70ff 	movw	r0, #4095	; 0xfff
 800186c:	f7ff fd6e 	bl	800134c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001870:	6939      	ldr	r1, [r7, #16]
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 fcf4 	bl	8002260 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3720      	adds	r7, #32
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop

0800188c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_ETH_DMATxDescListInit+0x20>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e052      	b.n	8001952 <HAL_ETH_DMATxDescListInit+0xc6>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2202      	movs	r2, #2
 80018b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	e030      	b.n	800192a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	015b      	lsls	r3, r3, #5
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	4413      	add	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80018d8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018e0:	fb02 f303 	mul.w	r3, r2, r3
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d105      	bne.n	8001902 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	3b01      	subs	r3, #1
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	429a      	cmp	r2, r3
 800190a:	d208      	bcs.n	800191e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	3301      	adds	r3, #1
 8001910:	015b      	lsls	r3, r3, #5
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	4413      	add	r3, r2
 8001916:	461a      	mov	r2, r3
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	e002      	b.n	8001924 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	3301      	adds	r3, #1
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d3ca      	bcc.n	80018c8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6819      	ldr	r1, [r3, #0]
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	f241 0310 	movw	r3, #4112	; 0x1010
 800193c:	440b      	add	r3, r1
 800193e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	371c      	adds	r7, #28
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800195e:	b480      	push	{r7}
 8001960:	b087      	sub	sp, #28
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001976:	2b01      	cmp	r3, #1
 8001978:	d101      	bne.n	800197e <HAL_ETH_DMARxDescListInit+0x20>
 800197a:	2302      	movs	r3, #2
 800197c:	e056      	b.n	8001a2c <HAL_ETH_DMARxDescListInit+0xce>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2202      	movs	r2, #2
 800198a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001994:	2300      	movs	r3, #0
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	e034      	b.n	8001a04 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	015b      	lsls	r3, r3, #5
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	4413      	add	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80019aa:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80019b2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019ba:	fb02 f303 	mul.w	r3, r2, r3
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	461a      	mov	r2, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d105      	bne.n	80019dc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	3b01      	subs	r3, #1
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d208      	bcs.n	80019f8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	3301      	adds	r3, #1
 80019ea:	015b      	lsls	r3, r3, #5
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	4413      	add	r3, r2
 80019f0:	461a      	mov	r2, r3
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	e002      	b.n	80019fe <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80019f8:	68ba      	ldr	r2, [r7, #8]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	3301      	adds	r3, #1
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d3c6      	bcc.n	800199a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	6819      	ldr	r1, [r3, #0]
 8001a10:	68ba      	ldr	r2, [r7, #8]
 8001a12:	f241 030c 	movw	r3, #4108	; 0x100c
 8001a16:	440b      	add	r3, r1
 8001a18:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b087      	sub	sp, #28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d101      	bne.n	8001a5c <HAL_ETH_TransmitFrame+0x24>
 8001a58:	2302      	movs	r3, #2
 8001a5a:	e0cd      	b.n	8001bf8 <HAL_ETH_TransmitFrame+0x1c0>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0b8      	b.n	8001bf8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	da09      	bge.n	8001aa4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2212      	movs	r2, #18
 8001a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0a9      	b.n	8001bf8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d915      	bls.n	8001ada <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	4a54      	ldr	r2, [pc, #336]	; (8001c04 <HAL_ETH_TransmitFrame+0x1cc>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	0a9b      	lsrs	r3, r3, #10
 8001ab8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	4b51      	ldr	r3, [pc, #324]	; (8001c04 <HAL_ETH_TransmitFrame+0x1cc>)
 8001abe:	fba3 1302 	umull	r1, r3, r3, r2
 8001ac2:	0a9b      	lsrs	r3, r3, #10
 8001ac4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001ac8:	fb01 f303 	mul.w	r3, r1, r3
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d005      	beq.n	8001ade <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	e001      	b.n	8001ade <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d11c      	bne.n	8001b1e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aee:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001af2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001afe:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b0e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	68db      	ldr	r3, [r3, #12]
 8001b16:	461a      	mov	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b1c:	e04b      	b.n	8001bb6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	e044      	b.n	8001bae <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b32:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d107      	bne.n	8001b4a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b48:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b52:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d116      	bne.n	8001b8c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b68:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001b6c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	4a25      	ldr	r2, [pc, #148]	; (8001c08 <HAL_ETH_TransmitFrame+0x1d0>)
 8001b72:	fb02 f203 	mul.w	r2, r2, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	4413      	add	r3, r2
 8001b7a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001b7e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001b8a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b9a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	3301      	adds	r3, #1
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d3b6      	bcc.n	8001b24 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bbe:	4413      	add	r3, r2
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00d      	beq.n	8001be6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	f241 0314 	movw	r3, #4116	; 0x1014
 8001bd2:	4413      	add	r3, r2
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	f241 0304 	movw	r3, #4100	; 0x1004
 8001be0:	4413      	add	r3, r2
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	371c      	adds	r7, #28
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	ac02b00b 	.word	0xac02b00b
 8001c08:	fffffa0c 	.word	0xfffffa0c

08001c0c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d101      	bne.n	8001c26 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e074      	b.n	8001d10 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2202      	movs	r2, #2
 8001c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001c36:	e05a      	b.n	8001cee <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c4c:	d10d      	bne.n	8001c6a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	461a      	mov	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28
 8001c68:	e041      	b.n	8001cee <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d10b      	bne.n	8001c90 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	629a      	str	r2, [r3, #40]	; 0x28
 8001c8e:	e02e      	b.n	8001cee <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d103      	bne.n	8001cb2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001cbe:	1f1a      	subs	r2, r3, #4
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e010      	b.n	8001d10 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db02      	blt.n	8001cfe <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d99c      	bls.n	8001c38 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3714      	adds	r7, #20
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	f241 0314 	movw	r3, #4116	; 0x1014
 8001d2c:	4413      	add	r3, r2
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d34:	2b40      	cmp	r3, #64	; 0x40
 8001d36:	d112      	bne.n	8001d5e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f004 f8e9 	bl	8005f10 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	f241 0314 	movw	r3, #4116	; 0x1014
 8001d46:	4413      	add	r3, r2
 8001d48:	2240      	movs	r2, #64	; 0x40
 8001d4a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d5c:	e01b      	b.n	8001d96 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	f241 0314 	movw	r3, #4116	; 0x1014
 8001d66:	4413      	add	r3, r2
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d111      	bne.n	8001d96 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f839 	bl	8001dea <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	f241 0314 	movw	r3, #4116	; 0x1014
 8001d80:	4413      	add	r3, r2
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	f241 0314 	movw	r3, #4116	; 0x1014
 8001d9e:	4413      	add	r3, r2
 8001da0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001da4:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	f241 0314 	movw	r3, #4116	; 0x1014
 8001dae:	4413      	add	r3, r2
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dba:	d112      	bne.n	8001de2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f81e 	bl	8001dfe <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	f241 0314 	movw	r3, #4116	; 0x1014
 8001dca:	4413      	add	r3, r2
 8001dcc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dd0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b086      	sub	sp, #24
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	607a      	str	r2, [r7, #4]
 8001e1e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b82      	cmp	r3, #130	; 0x82
 8001e32:	d101      	bne.n	8001e38 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001e34:	2302      	movs	r3, #2
 8001e36:	e050      	b.n	8001eda <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2282      	movs	r2, #130	; 0x82
 8001e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 031c 	and.w	r3, r3, #28
 8001e4e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8a1b      	ldrh	r3, [r3, #16]
 8001e54:	02db      	lsls	r3, r3, #11
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001e5e:	897b      	ldrh	r3, [r7, #10]
 8001e60:	019b      	lsls	r3, r3, #6
 8001e62:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f023 0302 	bic.w	r3, r3, #2
 8001e72:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f043 0301 	orr.w	r3, r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e84:	f7ff fa56 	bl	8001334 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e8a:	e015      	b.n	8001eb8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001e8c:	f7ff fa52 	bl	8001334 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e9a:	d309      	bcc.n	8001eb0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e014      	b.n	8001eda <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1e4      	bne.n	8001e8c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695b      	ldr	r3, [r3, #20]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	460b      	mov	r3, r1
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b42      	cmp	r3, #66	; 0x42
 8001f02:	d101      	bne.n	8001f08 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001f04:	2302      	movs	r3, #2
 8001f06:	e04e      	b.n	8001fa6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2242      	movs	r2, #66	; 0x42
 8001f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f003 031c 	and.w	r3, r3, #28
 8001f1e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8a1b      	ldrh	r3, [r3, #16]
 8001f24:	02db      	lsls	r3, r3, #11
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001f2e:	897b      	ldrh	r3, [r7, #10]
 8001f30:	019b      	lsls	r3, r3, #6
 8001f32:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f043 0302 	orr.w	r3, r3, #2
 8001f42:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f5e:	f7ff f9e9 	bl	8001334 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f64:	e015      	b.n	8001f92 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001f66:	f7ff f9e5 	bl	8001334 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f74:	d309      	bcc.n	8001f8a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e00d      	b.n	8001fa6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1e4      	bne.n	8001f66 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ETH_Start+0x16>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e01f      	b.n	8002004 <HAL_ETH_Start+0x56>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 fb45 	bl	8002664 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fb7c 	bl	80026d8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fc13 	bl	800280c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fbb0 	bl	800274c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 fbdd 	bl	80027ac <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800201a:	2b01      	cmp	r3, #1
 800201c:	d101      	bne.n	8002022 <HAL_ETH_Stop+0x16>
 800201e:	2302      	movs	r3, #2
 8002020:	e01f      	b.n	8002062 <HAL_ETH_Stop+0x56>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2201      	movs	r2, #1
 8002026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2202      	movs	r2, #2
 800202e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 fba2 	bl	800277c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fbcf 	bl	80027dc <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 fb67 	bl	8002712 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 fbe1 	bl	800280c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 fb27 	bl	800269e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002080:	2b01      	cmp	r3, #1
 8002082:	d101      	bne.n	8002088 <HAL_ETH_ConfigMAC+0x1c>
 8002084:	2302      	movs	r3, #2
 8002086:	e0e4      	b.n	8002252 <HAL_ETH_ConfigMAC+0x1e6>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 80b1 	beq.w	8002202 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4b6c      	ldr	r3, [pc, #432]	; (800225c <HAL_ETH_ConfigMAC+0x1f0>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80020b8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80020be:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80020c4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80020ca:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80020d0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80020d6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80020dc:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80020e2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80020e8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80020ee:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80020f4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80020fa:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002112:	2001      	movs	r0, #1
 8002114:	f7ff f91a 	bl	800134c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002128:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800212e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002134:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800213a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002140:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002146:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002152:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002154:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800215e:	2001      	movs	r0, #1
 8002160:	f7ff f8f4 	bl	800134c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002174:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	683a      	ldr	r2, [r7, #0]
 800217c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800217e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800218e:	4013      	ands	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002196:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800219c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80021a2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80021a8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80021ae:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80021b4:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80021cc:	2001      	movs	r0, #1
 80021ce:	f7ff f8bd 	bl	800134c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80021f2:	2001      	movs	r0, #1
 80021f4:	f7ff f8aa 	bl	800134c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	61da      	str	r2, [r3, #28]
 8002200:	e01e      	b.n	8002240 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002210:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002232:	2001      	movs	r0, #1
 8002234:	f7ff f88a 	bl	800134c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	ff20810f 	.word	0xff20810f

08002260 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b0b0      	sub	sp, #192	; 0xc0
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d007      	beq.n	8002286 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800227c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002284:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800228e:	2300      	movs	r3, #0
 8002290:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002292:	2300      	movs	r3, #0
 8002294:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d103      	bne.n	80022ae <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80022a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022aa:	663b      	str	r3, [r7, #96]	; 0x60
 80022ac:	e001      	b.n	80022b2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80022b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80022b8:	2300      	movs	r3, #0
 80022ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80022bc:	2300      	movs	r3, #0
 80022be:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80022c4:	2300      	movs	r3, #0
 80022c6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80022c8:	2300      	movs	r3, #0
 80022ca:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80022cc:	2340      	movs	r3, #64	; 0x40
 80022ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002306:	2300      	movs	r3, #0
 8002308:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800230c:	2300      	movs	r3, #0
 800230e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800231e:	2300      	movs	r3, #0
 8002320:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002324:	2300      	movs	r3, #0
 8002326:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002334:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002338:	4bab      	ldr	r3, [pc, #684]	; (80025e8 <ETH_MACDMAConfig+0x388>)
 800233a:	4013      	ands	r3, r2
 800233c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002340:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002344:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002348:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800234a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800234c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002352:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002354:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002356:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002358:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800235a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002360:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002362:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002364:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002366:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002368:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800236a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800236c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800236e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002370:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002372:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002374:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002376:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002388:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002394:	2001      	movs	r0, #1
 8002396:	f7fe ffd9 	bl	800134c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023a2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80023a4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80023a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80023a8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80023aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80023ac:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80023ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80023b2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80023b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80023b8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80023ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80023be:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80023c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80023c4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80023c8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80023d0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80023d2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80023de:	2001      	movs	r0, #1
 80023e0:	f7fe ffb4 	bl	800134c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023ec:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80023f6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002400:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800240c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002410:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002414:	4013      	ands	r3, r2
 8002416:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800241a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800241e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002420:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002424:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002426:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800242a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800242c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002430:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002436:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002438:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800243c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800243e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002450:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800245c:	2001      	movs	r0, #1
 800245e:	f7fe ff75 	bl	800134c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800246a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800246c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002470:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002486:	2001      	movs	r0, #1
 8002488:	f7fe ff60 	bl	800134c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002494:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800249a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800249e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80024a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024a8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80024b6:	2300      	movs	r3, #0
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80024ba:	2304      	movs	r3, #4
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80024be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80024c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80024ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80024ce:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024d4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80024da:	2300      	movs	r3, #0
 80024dc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80024de:	2300      	movs	r3, #0
 80024e0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	f241 0318 	movw	r3, #4120	; 0x1018
 80024ea:	4413      	add	r3, r2
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80024f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024f6:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <ETH_MACDMAConfig+0x38c>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80024fe:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002500:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002502:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002504:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002506:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002508:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800250a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800250c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800250e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002510:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002512:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002514:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002516:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800251a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800251c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800251e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002520:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002532:	4413      	add	r3, r2
 8002534:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002538:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002542:	4413      	add	r3, r2
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800254a:	2001      	movs	r0, #1
 800254c:	f7fe fefe 	bl	800134c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	f241 0318 	movw	r3, #4120	; 0x1018
 8002558:	4413      	add	r3, r2
 800255a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800255e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002564:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002568:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800256c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800256e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002570:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8002572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002574:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002576:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800257a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002588:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002598:	2001      	movs	r0, #1
 800259a:	f7fe fed7 	bl	800134c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025aa:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d10d      	bne.n	80025d0 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	f241 031c 	movw	r3, #4124	; 0x101c
 80025bc:	4413      	add	r3, r2
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6811      	ldr	r1, [r2, #0]
 80025c4:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <ETH_MACDMAConfig+0x390>)
 80025c6:	431a      	orrs	r2, r3
 80025c8:	f241 031c 	movw	r3, #4124	; 0x101c
 80025cc:	440b      	add	r3, r1
 80025ce:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	461a      	mov	r2, r3
 80025d6:	2100      	movs	r1, #0
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f80b 	bl	80025f4 <ETH_MACAddressConfig>
}
 80025de:	bf00      	nop
 80025e0:	37c0      	adds	r7, #192	; 0xc0
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	ff20810f 	.word	0xff20810f
 80025ec:	f8de3f23 	.word	0xf8de3f23
 80025f0:	00010040 	.word	0x00010040

080025f4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3305      	adds	r3, #5
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	021b      	lsls	r3, r3, #8
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	3204      	adds	r2, #4
 800260c:	7812      	ldrb	r2, [r2, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <ETH_MACAddressConfig+0x68>)
 8002616:	4413      	add	r3, r2
 8002618:	461a      	mov	r2, r3
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3303      	adds	r3, #3
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	061a      	lsls	r2, r3, #24
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3302      	adds	r3, #2
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	041b      	lsls	r3, r3, #16
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3301      	adds	r3, #1
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	4313      	orrs	r3, r2
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	7812      	ldrb	r2, [r2, #0]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <ETH_MACAddressConfig+0x6c>)
 8002646:	4413      	add	r3, r2
 8002648:	461a      	mov	r2, r3
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	6013      	str	r3, [r2, #0]
}
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40028040 	.word	0x40028040
 8002660:	40028044 	.word	0x40028044

08002664 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0208 	orr.w	r2, r2, #8
 800267e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002688:	2001      	movs	r0, #1
 800268a:	f7fe fe5f 	bl	800134c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	601a      	str	r2, [r3, #0]
}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800269e:	b580      	push	{r7, lr}
 80026a0:	b084      	sub	sp, #16
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0208 	bic.w	r2, r2, #8
 80026b8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c2:	2001      	movs	r0, #1
 80026c4:	f7fe fe42 	bl	800134c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	601a      	str	r2, [r3, #0]
}
 80026d0:	bf00      	nop
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0204 	orr.w	r2, r2, #4
 80026f2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026fc:	2001      	movs	r0, #1
 80026fe:	f7fe fe25 	bl	800134c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	601a      	str	r2, [r3, #0]
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0204 	bic.w	r2, r2, #4
 800272c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002736:	2001      	movs	r0, #1
 8002738:	f7fe fe08 	bl	800134c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	601a      	str	r2, [r3, #0]
}
 8002744:	bf00      	nop
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	f241 0318 	movw	r3, #4120	; 0x1018
 800275c:	4413      	add	r3, r2
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6811      	ldr	r1, [r2, #0]
 8002764:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002768:	f241 0318 	movw	r3, #4120	; 0x1018
 800276c:	440b      	add	r3, r1
 800276e:	601a      	str	r2, [r3, #0]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	f241 0318 	movw	r3, #4120	; 0x1018
 800278c:	4413      	add	r3, r2
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6811      	ldr	r1, [r2, #0]
 8002794:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002798:	f241 0318 	movw	r3, #4120	; 0x1018
 800279c:	440b      	add	r3, r1
 800279e:	601a      	str	r2, [r3, #0]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	f241 0318 	movw	r3, #4120	; 0x1018
 80027bc:	4413      	add	r3, r2
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6811      	ldr	r1, [r2, #0]
 80027c4:	f043 0202 	orr.w	r2, r3, #2
 80027c8:	f241 0318 	movw	r3, #4120	; 0x1018
 80027cc:	440b      	add	r3, r1
 80027ce:	601a      	str	r2, [r3, #0]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	f241 0318 	movw	r3, #4120	; 0x1018
 80027ec:	4413      	add	r3, r2
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6811      	ldr	r1, [r2, #0]
 80027f4:	f023 0202 	bic.w	r2, r3, #2
 80027f8:	f241 0318 	movw	r3, #4120	; 0x1018
 80027fc:	440b      	add	r3, r1
 80027fe:	601a      	str	r2, [r3, #0]
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002820:	4413      	add	r3, r2
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6811      	ldr	r1, [r2, #0]
 8002828:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800282c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002830:	440b      	add	r3, r1
 8002832:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	f241 0318 	movw	r3, #4120	; 0x1018
 800283c:	4413      	add	r3, r2
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002842:	2001      	movs	r0, #1
 8002844:	f7fe fd82 	bl	800134c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6819      	ldr	r1, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002852:	440b      	add	r3, r1
 8002854:	601a      	str	r2, [r3, #0]
}
 8002856:	bf00      	nop
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_FLASH_Lock+0x1c>)
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	4a04      	ldr	r2, [pc, #16]	; (800287c <HAL_FLASH_Lock+0x1c>)
 800286a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800286e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	40023c00 	.word	0x40023c00

08002880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	; 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002892:	2300      	movs	r3, #0
 8002894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002896:	2300      	movs	r3, #0
 8002898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
 800289e:	e175      	b.n	8002b8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80028a0:	2201      	movs	r2, #1
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	f040 8164 	bne.w	8002b86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d00b      	beq.n	80028de <HAL_GPIO_Init+0x5e>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d007      	beq.n	80028de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028d2:	2b11      	cmp	r3, #17
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b12      	cmp	r3, #18
 80028dc:	d130      	bne.n	8002940 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	2203      	movs	r2, #3
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002914:	2201      	movs	r2, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 0201 	and.w	r2, r3, #1
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	2203      	movs	r2, #3
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x100>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b12      	cmp	r3, #18
 800297e:	d123      	bne.n	80029c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	08da      	lsrs	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3208      	adds	r2, #8
 8002988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800298c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	220f      	movs	r2, #15
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	08da      	lsrs	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3208      	adds	r2, #8
 80029c2:	69b9      	ldr	r1, [r7, #24]
 80029c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	2203      	movs	r2, #3
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4013      	ands	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0203 	and.w	r2, r3, #3
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80be 	beq.w	8002b86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a0a:	4b65      	ldr	r3, [pc, #404]	; (8002ba0 <HAL_GPIO_Init+0x320>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0e:	4a64      	ldr	r2, [pc, #400]	; (8002ba0 <HAL_GPIO_Init+0x320>)
 8002a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a14:	6453      	str	r3, [r2, #68]	; 0x44
 8002a16:	4b62      	ldr	r3, [pc, #392]	; (8002ba0 <HAL_GPIO_Init+0x320>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a22:	4a60      	ldr	r2, [pc, #384]	; (8002ba4 <HAL_GPIO_Init+0x324>)
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	089b      	lsrs	r3, r3, #2
 8002a28:	3302      	adds	r3, #2
 8002a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	220f      	movs	r2, #15
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a57      	ldr	r2, [pc, #348]	; (8002ba8 <HAL_GPIO_Init+0x328>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d037      	beq.n	8002abe <HAL_GPIO_Init+0x23e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a56      	ldr	r2, [pc, #344]	; (8002bac <HAL_GPIO_Init+0x32c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d031      	beq.n	8002aba <HAL_GPIO_Init+0x23a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a55      	ldr	r2, [pc, #340]	; (8002bb0 <HAL_GPIO_Init+0x330>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d02b      	beq.n	8002ab6 <HAL_GPIO_Init+0x236>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a54      	ldr	r2, [pc, #336]	; (8002bb4 <HAL_GPIO_Init+0x334>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d025      	beq.n	8002ab2 <HAL_GPIO_Init+0x232>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a53      	ldr	r2, [pc, #332]	; (8002bb8 <HAL_GPIO_Init+0x338>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d01f      	beq.n	8002aae <HAL_GPIO_Init+0x22e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a52      	ldr	r2, [pc, #328]	; (8002bbc <HAL_GPIO_Init+0x33c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d019      	beq.n	8002aaa <HAL_GPIO_Init+0x22a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a51      	ldr	r2, [pc, #324]	; (8002bc0 <HAL_GPIO_Init+0x340>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_GPIO_Init+0x226>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a50      	ldr	r2, [pc, #320]	; (8002bc4 <HAL_GPIO_Init+0x344>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00d      	beq.n	8002aa2 <HAL_GPIO_Init+0x222>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a4f      	ldr	r2, [pc, #316]	; (8002bc8 <HAL_GPIO_Init+0x348>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <HAL_GPIO_Init+0x21e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a4e      	ldr	r2, [pc, #312]	; (8002bcc <HAL_GPIO_Init+0x34c>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_GPIO_Init+0x21a>
 8002a96:	2309      	movs	r3, #9
 8002a98:	e012      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002a9a:	230a      	movs	r3, #10
 8002a9c:	e010      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002a9e:	2308      	movs	r3, #8
 8002aa0:	e00e      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aa2:	2307      	movs	r3, #7
 8002aa4:	e00c      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aa6:	2306      	movs	r3, #6
 8002aa8:	e00a      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aaa:	2305      	movs	r3, #5
 8002aac:	e008      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aae:	2304      	movs	r3, #4
 8002ab0:	e006      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e004      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	e002      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <HAL_GPIO_Init+0x240>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	69fa      	ldr	r2, [r7, #28]
 8002ac2:	f002 0203 	and.w	r2, r2, #3
 8002ac6:	0092      	lsls	r2, r2, #2
 8002ac8:	4093      	lsls	r3, r2
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ad0:	4934      	ldr	r1, [pc, #208]	; (8002ba4 <HAL_GPIO_Init+0x324>)
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ade:	4b3c      	ldr	r3, [pc, #240]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b02:	4a33      	ldr	r2, [pc, #204]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b08:	4b31      	ldr	r3, [pc, #196]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	4013      	ands	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b2c:	4a28      	ldr	r2, [pc, #160]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b32:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b56:	4a1e      	ldr	r2, [pc, #120]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b5c:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b80:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b0f      	cmp	r3, #15
 8002b90:	f67f ae86 	bls.w	80028a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b94:	bf00      	nop
 8002b96:	3724      	adds	r7, #36	; 0x24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40013800 	.word	0x40013800
 8002ba8:	40020000 	.word	0x40020000
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	40020800 	.word	0x40020800
 8002bb4:	40020c00 	.word	0x40020c00
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	40021400 	.word	0x40021400
 8002bc0:	40021800 	.word	0x40021800
 8002bc4:	40021c00 	.word	0x40021c00
 8002bc8:	40022000 	.word	0x40022000
 8002bcc:	40022400 	.word	0x40022400
 8002bd0:	40013c00 	.word	0x40013c00

08002bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]
 8002be0:	4613      	mov	r3, r2
 8002be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be4:	787b      	ldrb	r3, [r7, #1]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bea:	887a      	ldrh	r2, [r7, #2]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002bf0:	e003      	b.n	8002bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002bf2:	887b      	ldrh	r3, [r7, #2]
 8002bf4:	041a      	lsls	r2, r3, #16
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	619a      	str	r2, [r3, #24]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695a      	ldr	r2, [r3, #20]
 8002c16:	887b      	ldrh	r3, [r7, #2]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d004      	beq.n	8002c28 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c1e:	887b      	ldrh	r3, [r7, #2]
 8002c20:	041a      	lsls	r2, r3, #16
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002c26:	e002      	b.n	8002c2e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c28:	887a      	ldrh	r2, [r7, #2]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	619a      	str	r2, [r3, #24]
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c3c:	b08f      	sub	sp, #60	; 0x3c
 8002c3e:	af0a      	add	r7, sp, #40	; 0x28
 8002c40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e116      	b.n	8002e7a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d106      	bne.n	8002c6c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7fe f868 	bl	8000d3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d102      	bne.n	8002c86 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f002 fcca 	bl	8005624 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	603b      	str	r3, [r7, #0]
 8002c96:	687e      	ldr	r6, [r7, #4]
 8002c98:	466d      	mov	r5, sp
 8002c9a:	f106 0410 	add.w	r4, r6, #16
 8002c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ca6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002caa:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cae:	1d33      	adds	r3, r6, #4
 8002cb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cb2:	6838      	ldr	r0, [r7, #0]
 8002cb4:	f002 fc5e 	bl	8005574 <USB_CoreInit>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d005      	beq.n	8002cca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0d7      	b.n	8002e7a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f002 fcb8 	bl	8005646 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
 8002cda:	e04a      	b.n	8002d72 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cdc:	7bfa      	ldrb	r2, [r7, #15]
 8002cde:	6879      	ldr	r1, [r7, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	1a9b      	subs	r3, r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	440b      	add	r3, r1
 8002cea:	333d      	adds	r3, #61	; 0x3d
 8002cec:	2201      	movs	r2, #1
 8002cee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	333c      	adds	r3, #60	; 0x3c
 8002d00:	7bfa      	ldrb	r2, [r7, #15]
 8002d02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d04:	7bfa      	ldrb	r2, [r7, #15]
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	b298      	uxth	r0, r3
 8002d0a:	6879      	ldr	r1, [r7, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	1a9b      	subs	r3, r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	3342      	adds	r3, #66	; 0x42
 8002d18:	4602      	mov	r2, r0
 8002d1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	333f      	adds	r3, #63	; 0x3f
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d30:	7bfa      	ldrb	r2, [r7, #15]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	3344      	adds	r3, #68	; 0x44
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d44:	7bfa      	ldrb	r2, [r7, #15]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	3348      	adds	r3, #72	; 0x48
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d58:	7bfa      	ldrb	r2, [r7, #15]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	3350      	adds	r3, #80	; 0x50
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	7bfa      	ldrb	r2, [r7, #15]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d3af      	bcc.n	8002cdc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	73fb      	strb	r3, [r7, #15]
 8002d80:	e044      	b.n	8002e0c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d82:	7bfa      	ldrb	r2, [r7, #15]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d98:	7bfa      	ldrb	r2, [r7, #15]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002daa:	7bfa      	ldrb	r2, [r7, #15]
 8002dac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002dae:	7bfa      	ldrb	r2, [r7, #15]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dc4:	7bfa      	ldrb	r2, [r7, #15]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dda:	7bfa      	ldrb	r2, [r7, #15]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002df0:	7bfa      	ldrb	r2, [r7, #15]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	73fb      	strb	r3, [r7, #15]
 8002e0c:	7bfa      	ldrb	r2, [r7, #15]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d3b5      	bcc.n	8002d82 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	687e      	ldr	r6, [r7, #4]
 8002e1e:	466d      	mov	r5, sp
 8002e20:	f106 0410 	add.w	r4, r6, #16
 8002e24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e30:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e34:	1d33      	adds	r3, r6, #4
 8002e36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e38:	6838      	ldr	r0, [r7, #0]
 8002e3a:	f002 fc2f 	bl	800569c <USB_DevInit>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e014      	b.n	8002e7a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d102      	bne.n	8002e6e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f80b 	bl	8002e84 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f002 fde1 	bl	8005a3a <USB_DevDisconnect>

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002e84 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002eb2:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	10000003 	.word	0x10000003

08002ecc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a04      	ldr	r2, [pc, #16]	; (8002ee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eda:	6013      	str	r3, [r2, #0]
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40007000 	.word	0x40007000

08002eec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	4b23      	ldr	r3, [pc, #140]	; (8002f84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	4a22      	ldr	r2, [pc, #136]	; (8002f84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f00:	6413      	str	r3, [r2, #64]	; 0x40
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1d      	ldr	r2, [pc, #116]	; (8002f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f1a:	f7fe fa0b 	bl	8001334 <HAL_GetTick>
 8002f1e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f20:	e009      	b.n	8002f36 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f22:	f7fe fa07 	bl	8001334 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f30:	d901      	bls.n	8002f36 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e022      	b.n	8002f7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f36:	4b14      	ldr	r3, [pc, #80]	; (8002f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f42:	d1ee      	bne.n	8002f22 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f44:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a0f      	ldr	r2, [pc, #60]	; (8002f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f50:	f7fe f9f0 	bl	8001334 <HAL_GetTick>
 8002f54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f56:	e009      	b.n	8002f6c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f58:	f7fe f9ec 	bl	8001334 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f66:	d901      	bls.n	8002f6c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e007      	b.n	8002f7c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f78:	d1ee      	bne.n	8002f58 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40023800 	.word	0x40023800
 8002f88:	40007000 	.word	0x40007000

08002f8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f94:	2300      	movs	r3, #0
 8002f96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e29b      	b.n	80034da <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8087 	beq.w	80030be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fb0:	4b96      	ldr	r3, [pc, #600]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 030c 	and.w	r3, r3, #12
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d00c      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fbc:	4b93      	ldr	r3, [pc, #588]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d112      	bne.n	8002fee <HAL_RCC_OscConfig+0x62>
 8002fc8:	4b90      	ldr	r3, [pc, #576]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd4:	d10b      	bne.n	8002fee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd6:	4b8d      	ldr	r3, [pc, #564]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d06c      	beq.n	80030bc <HAL_RCC_OscConfig+0x130>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d168      	bne.n	80030bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e275      	b.n	80034da <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff6:	d106      	bne.n	8003006 <HAL_RCC_OscConfig+0x7a>
 8002ff8:	4b84      	ldr	r3, [pc, #528]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a83      	ldr	r2, [pc, #524]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8002ffe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	e02e      	b.n	8003064 <HAL_RCC_OscConfig+0xd8>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10c      	bne.n	8003028 <HAL_RCC_OscConfig+0x9c>
 800300e:	4b7f      	ldr	r3, [pc, #508]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a7e      	ldr	r2, [pc, #504]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8003014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	4b7c      	ldr	r3, [pc, #496]	; (800320c <HAL_RCC_OscConfig+0x280>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a7b      	ldr	r2, [pc, #492]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8003020:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	e01d      	b.n	8003064 <HAL_RCC_OscConfig+0xd8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003030:	d10c      	bne.n	800304c <HAL_RCC_OscConfig+0xc0>
 8003032:	4b76      	ldr	r3, [pc, #472]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a75      	ldr	r2, [pc, #468]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8003038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4b73      	ldr	r3, [pc, #460]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a72      	ldr	r2, [pc, #456]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8003044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e00b      	b.n	8003064 <HAL_RCC_OscConfig+0xd8>
 800304c:	4b6f      	ldr	r3, [pc, #444]	; (800320c <HAL_RCC_OscConfig+0x280>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a6e      	ldr	r2, [pc, #440]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8003052:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	4b6c      	ldr	r3, [pc, #432]	; (800320c <HAL_RCC_OscConfig+0x280>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a6b      	ldr	r2, [pc, #428]	; (800320c <HAL_RCC_OscConfig+0x280>)
 800305e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d013      	beq.n	8003094 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe f962 	bl	8001334 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003074:	f7fe f95e 	bl	8001334 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e229      	b.n	80034da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	4b61      	ldr	r3, [pc, #388]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0f0      	beq.n	8003074 <HAL_RCC_OscConfig+0xe8>
 8003092:	e014      	b.n	80030be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe f94e 	bl	8001334 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800309c:	f7fe f94a 	bl	8001334 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b64      	cmp	r3, #100	; 0x64
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e215      	b.n	80034da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ae:	4b57      	ldr	r3, [pc, #348]	; (800320c <HAL_RCC_OscConfig+0x280>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x110>
 80030ba:	e000      	b.n	80030be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d069      	beq.n	800319e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030ca:	4b50      	ldr	r3, [pc, #320]	; (800320c <HAL_RCC_OscConfig+0x280>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d6:	4b4d      	ldr	r3, [pc, #308]	; (800320c <HAL_RCC_OscConfig+0x280>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b08      	cmp	r3, #8
 80030e0:	d11c      	bne.n	800311c <HAL_RCC_OscConfig+0x190>
 80030e2:	4b4a      	ldr	r3, [pc, #296]	; (800320c <HAL_RCC_OscConfig+0x280>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d116      	bne.n	800311c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ee:	4b47      	ldr	r3, [pc, #284]	; (800320c <HAL_RCC_OscConfig+0x280>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <HAL_RCC_OscConfig+0x17a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d001      	beq.n	8003106 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e1e9      	b.n	80034da <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003106:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	493d      	ldr	r1, [pc, #244]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311a:	e040      	b.n	800319e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d023      	beq.n	800316c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003124:	4b39      	ldr	r3, [pc, #228]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a38      	ldr	r2, [pc, #224]	; (800320c <HAL_RCC_OscConfig+0x280>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fe f900 	bl	8001334 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003138:	f7fe f8fc 	bl	8001334 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1c7      	b.n	80034da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800314a:	4b30      	ldr	r3, [pc, #192]	; (800320c <HAL_RCC_OscConfig+0x280>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003156:	4b2d      	ldr	r3, [pc, #180]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4929      	ldr	r1, [pc, #164]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8003166:	4313      	orrs	r3, r2
 8003168:	600b      	str	r3, [r1, #0]
 800316a:	e018      	b.n	800319e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316c:	4b27      	ldr	r3, [pc, #156]	; (800320c <HAL_RCC_OscConfig+0x280>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a26      	ldr	r2, [pc, #152]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8003172:	f023 0301 	bic.w	r3, r3, #1
 8003176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003178:	f7fe f8dc 	bl	8001334 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003180:	f7fe f8d8 	bl	8001334 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b02      	cmp	r3, #2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1a3      	b.n	80034da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003192:	4b1e      	ldr	r3, [pc, #120]	; (800320c <HAL_RCC_OscConfig+0x280>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d038      	beq.n	800321c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d019      	beq.n	80031e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031b2:	4b16      	ldr	r3, [pc, #88]	; (800320c <HAL_RCC_OscConfig+0x280>)
 80031b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b6:	4a15      	ldr	r2, [pc, #84]	; (800320c <HAL_RCC_OscConfig+0x280>)
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031be:	f7fe f8b9 	bl	8001334 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031c6:	f7fe f8b5 	bl	8001334 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e180      	b.n	80034da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d8:	4b0c      	ldr	r3, [pc, #48]	; (800320c <HAL_RCC_OscConfig+0x280>)
 80031da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x23a>
 80031e4:	e01a      	b.n	800321c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_RCC_OscConfig+0x280>)
 80031e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ea:	4a08      	ldr	r2, [pc, #32]	; (800320c <HAL_RCC_OscConfig+0x280>)
 80031ec:	f023 0301 	bic.w	r3, r3, #1
 80031f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f2:	f7fe f89f 	bl	8001334 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f8:	e00a      	b.n	8003210 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fa:	f7fe f89b 	bl	8001334 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d903      	bls.n	8003210 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e166      	b.n	80034da <HAL_RCC_OscConfig+0x54e>
 800320c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003210:	4b92      	ldr	r3, [pc, #584]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 8003212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1ee      	bne.n	80031fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80a4 	beq.w	8003372 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322a:	4b8c      	ldr	r3, [pc, #560]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10d      	bne.n	8003252 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003236:	4b89      	ldr	r3, [pc, #548]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	4a88      	ldr	r2, [pc, #544]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 800323c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003240:	6413      	str	r3, [r2, #64]	; 0x40
 8003242:	4b86      	ldr	r3, [pc, #536]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800324e:	2301      	movs	r3, #1
 8003250:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003252:	4b83      	ldr	r3, [pc, #524]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d118      	bne.n	8003290 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800325e:	4b80      	ldr	r3, [pc, #512]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a7f      	ldr	r2, [pc, #508]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 8003264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326a:	f7fe f863 	bl	8001334 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003272:	f7fe f85f 	bl	8001334 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b64      	cmp	r3, #100	; 0x64
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e12a      	b.n	80034da <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003284:	4b76      	ldr	r3, [pc, #472]	; (8003460 <HAL_RCC_OscConfig+0x4d4>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d106      	bne.n	80032a6 <HAL_RCC_OscConfig+0x31a>
 8003298:	4b70      	ldr	r3, [pc, #448]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 800329a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329c:	4a6f      	ldr	r2, [pc, #444]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	6713      	str	r3, [r2, #112]	; 0x70
 80032a4:	e02d      	b.n	8003302 <HAL_RCC_OscConfig+0x376>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x33c>
 80032ae:	4b6b      	ldr	r3, [pc, #428]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 80032b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b2:	4a6a      	ldr	r2, [pc, #424]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	6713      	str	r3, [r2, #112]	; 0x70
 80032ba:	4b68      	ldr	r3, [pc, #416]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	4a67      	ldr	r2, [pc, #412]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 80032c0:	f023 0304 	bic.w	r3, r3, #4
 80032c4:	6713      	str	r3, [r2, #112]	; 0x70
 80032c6:	e01c      	b.n	8003302 <HAL_RCC_OscConfig+0x376>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b05      	cmp	r3, #5
 80032ce:	d10c      	bne.n	80032ea <HAL_RCC_OscConfig+0x35e>
 80032d0:	4b62      	ldr	r3, [pc, #392]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 80032d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d4:	4a61      	ldr	r2, [pc, #388]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 80032d6:	f043 0304 	orr.w	r3, r3, #4
 80032da:	6713      	str	r3, [r2, #112]	; 0x70
 80032dc:	4b5f      	ldr	r3, [pc, #380]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	4a5e      	ldr	r2, [pc, #376]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	6713      	str	r3, [r2, #112]	; 0x70
 80032e8:	e00b      	b.n	8003302 <HAL_RCC_OscConfig+0x376>
 80032ea:	4b5c      	ldr	r3, [pc, #368]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 80032ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ee:	4a5b      	ldr	r2, [pc, #364]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 80032f0:	f023 0301 	bic.w	r3, r3, #1
 80032f4:	6713      	str	r3, [r2, #112]	; 0x70
 80032f6:	4b59      	ldr	r3, [pc, #356]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 80032f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fa:	4a58      	ldr	r2, [pc, #352]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 80032fc:	f023 0304 	bic.w	r3, r3, #4
 8003300:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d015      	beq.n	8003336 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330a:	f7fe f813 	bl	8001334 <HAL_GetTick>
 800330e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003310:	e00a      	b.n	8003328 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003312:	f7fe f80f 	bl	8001334 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003320:	4293      	cmp	r3, r2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e0d8      	b.n	80034da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003328:	4b4c      	ldr	r3, [pc, #304]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 800332a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0ee      	beq.n	8003312 <HAL_RCC_OscConfig+0x386>
 8003334:	e014      	b.n	8003360 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003336:	f7fd fffd 	bl	8001334 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333c:	e00a      	b.n	8003354 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333e:	f7fd fff9 	bl	8001334 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f241 3288 	movw	r2, #5000	; 0x1388
 800334c:	4293      	cmp	r3, r2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e0c2      	b.n	80034da <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003354:	4b41      	ldr	r3, [pc, #260]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 8003356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1ee      	bne.n	800333e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003360:	7dfb      	ldrb	r3, [r7, #23]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d105      	bne.n	8003372 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003366:	4b3d      	ldr	r3, [pc, #244]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a3c      	ldr	r2, [pc, #240]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 800336c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f000 80ae 	beq.w	80034d8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800337c:	4b37      	ldr	r3, [pc, #220]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 030c 	and.w	r3, r3, #12
 8003384:	2b08      	cmp	r3, #8
 8003386:	d06d      	beq.n	8003464 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d14b      	bne.n	8003428 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003390:	4b32      	ldr	r3, [pc, #200]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a31      	ldr	r2, [pc, #196]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 8003396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800339a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fd ffca 	bl	8001334 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a4:	f7fd ffc6 	bl	8001334 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e091      	b.n	80034da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b6:	4b29      	ldr	r3, [pc, #164]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69da      	ldr	r2, [r3, #28]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	019b      	lsls	r3, r3, #6
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	085b      	lsrs	r3, r3, #1
 80033da:	3b01      	subs	r3, #1
 80033dc:	041b      	lsls	r3, r3, #16
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	061b      	lsls	r3, r3, #24
 80033e6:	431a      	orrs	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	071b      	lsls	r3, r3, #28
 80033ee:	491b      	ldr	r1, [pc, #108]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f4:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a18      	ldr	r2, [pc, #96]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 80033fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fd ff98 	bl	8001334 <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003408:	f7fd ff94 	bl	8001334 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e05f      	b.n	80034da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800341a:	4b10      	ldr	r3, [pc, #64]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x47c>
 8003426:	e057      	b.n	80034d8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a0b      	ldr	r2, [pc, #44]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 800342e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fd ff7e 	bl	8001334 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800343c:	f7fd ff7a 	bl	8001334 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e045      	b.n	80034da <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	4b03      	ldr	r3, [pc, #12]	; (800345c <HAL_RCC_OscConfig+0x4d0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x4b0>
 800345a:	e03d      	b.n	80034d8 <HAL_RCC_OscConfig+0x54c>
 800345c:	40023800 	.word	0x40023800
 8003460:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003464:	4b1f      	ldr	r3, [pc, #124]	; (80034e4 <HAL_RCC_OscConfig+0x558>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	699b      	ldr	r3, [r3, #24]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d030      	beq.n	80034d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800347c:	429a      	cmp	r2, r3
 800347e:	d129      	bne.n	80034d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800348a:	429a      	cmp	r2, r3
 800348c:	d122      	bne.n	80034d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800348e:	68fa      	ldr	r2, [r7, #12]
 8003490:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003494:	4013      	ands	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800349a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800349c:	4293      	cmp	r3, r2
 800349e:	d119      	bne.n	80034d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	085b      	lsrs	r3, r3, #1
 80034ac:	3b01      	subs	r3, #1
 80034ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d10f      	bne.n	80034d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ce:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800

080034e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034f2:	2300      	movs	r3, #0
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0d0      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003500:	4b6a      	ldr	r3, [pc, #424]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d910      	bls.n	8003530 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350e:	4b67      	ldr	r3, [pc, #412]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 020f 	bic.w	r2, r3, #15
 8003516:	4965      	ldr	r1, [pc, #404]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	4313      	orrs	r3, r2
 800351c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800351e:	4b63      	ldr	r3, [pc, #396]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e0b8      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d020      	beq.n	800357e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d005      	beq.n	8003554 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003548:	4b59      	ldr	r3, [pc, #356]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	4a58      	ldr	r2, [pc, #352]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 800354e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003552:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003560:	4b53      	ldr	r3, [pc, #332]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4a52      	ldr	r2, [pc, #328]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003566:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800356a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800356c:	4b50      	ldr	r3, [pc, #320]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	494d      	ldr	r1, [pc, #308]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 800357a:	4313      	orrs	r3, r2
 800357c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d040      	beq.n	800360c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d107      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	4b47      	ldr	r3, [pc, #284]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d115      	bne.n	80035ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e07f      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035aa:	4b41      	ldr	r3, [pc, #260]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d109      	bne.n	80035ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e073      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ba:	4b3d      	ldr	r3, [pc, #244]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06b      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ca:	4b39      	ldr	r3, [pc, #228]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f023 0203 	bic.w	r2, r3, #3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4936      	ldr	r1, [pc, #216]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035dc:	f7fd feaa 	bl	8001334 <HAL_GetTick>
 80035e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e4:	f7fd fea6 	bl	8001334 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e053      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fa:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 020c 	and.w	r2, r3, #12
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	429a      	cmp	r2, r3
 800360a:	d1eb      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800360c:	4b27      	ldr	r3, [pc, #156]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 030f 	and.w	r3, r3, #15
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	429a      	cmp	r2, r3
 8003618:	d210      	bcs.n	800363c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361a:	4b24      	ldr	r3, [pc, #144]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 020f 	bic.w	r2, r3, #15
 8003622:	4922      	ldr	r1, [pc, #136]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800362a:	4b20      	ldr	r3, [pc, #128]	; (80036ac <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	683a      	ldr	r2, [r7, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d001      	beq.n	800363c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e032      	b.n	80036a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003648:	4b19      	ldr	r3, [pc, #100]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4916      	ldr	r1, [pc, #88]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0308 	and.w	r3, r3, #8
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	00db      	lsls	r3, r3, #3
 8003674:	490e      	ldr	r1, [pc, #56]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003676:	4313      	orrs	r3, r2
 8003678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800367a:	f000 f821 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 800367e:	4601      	mov	r1, r0
 8003680:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_ClockConfig+0x1c8>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	091b      	lsrs	r3, r3, #4
 8003686:	f003 030f 	and.w	r3, r3, #15
 800368a:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <HAL_RCC_ClockConfig+0x1cc>)
 800368c:	5cd3      	ldrb	r3, [r2, r3]
 800368e:	fa21 f303 	lsr.w	r3, r1, r3
 8003692:	4a09      	ldr	r2, [pc, #36]	; (80036b8 <HAL_RCC_ClockConfig+0x1d0>)
 8003694:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003696:	4b09      	ldr	r3, [pc, #36]	; (80036bc <HAL_RCC_ClockConfig+0x1d4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd fbaa 	bl	8000df4 <HAL_InitTick>

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40023c00 	.word	0x40023c00
 80036b0:	40023800 	.word	0x40023800
 80036b4:	08018bd0 	.word	0x08018bd0
 80036b8:	20000000 	.word	0x20000000
 80036bc:	20000004 	.word	0x20000004

080036c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	607b      	str	r3, [r7, #4]
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	2300      	movs	r3, #0
 80036d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036d6:	4b63      	ldr	r3, [pc, #396]	; (8003864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 030c 	and.w	r3, r3, #12
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d007      	beq.n	80036f2 <HAL_RCC_GetSysClockFreq+0x32>
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d008      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0x38>
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f040 80b4 	bne.w	8003854 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036ec:	4b5e      	ldr	r3, [pc, #376]	; (8003868 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80036ee:	60bb      	str	r3, [r7, #8]
      break;
 80036f0:	e0b3      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036f2:	4b5e      	ldr	r3, [pc, #376]	; (800386c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80036f4:	60bb      	str	r3, [r7, #8]
      break;
 80036f6:	e0b0      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036f8:	4b5a      	ldr	r3, [pc, #360]	; (8003864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003700:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003702:	4b58      	ldr	r3, [pc, #352]	; (8003864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d04a      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800370e:	4b55      	ldr	r3, [pc, #340]	; (8003864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	099b      	lsrs	r3, r3, #6
 8003714:	f04f 0400 	mov.w	r4, #0
 8003718:	f240 11ff 	movw	r1, #511	; 0x1ff
 800371c:	f04f 0200 	mov.w	r2, #0
 8003720:	ea03 0501 	and.w	r5, r3, r1
 8003724:	ea04 0602 	and.w	r6, r4, r2
 8003728:	4629      	mov	r1, r5
 800372a:	4632      	mov	r2, r6
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	f04f 0400 	mov.w	r4, #0
 8003734:	0154      	lsls	r4, r2, #5
 8003736:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800373a:	014b      	lsls	r3, r1, #5
 800373c:	4619      	mov	r1, r3
 800373e:	4622      	mov	r2, r4
 8003740:	1b49      	subs	r1, r1, r5
 8003742:	eb62 0206 	sbc.w	r2, r2, r6
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	f04f 0400 	mov.w	r4, #0
 800374e:	0194      	lsls	r4, r2, #6
 8003750:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003754:	018b      	lsls	r3, r1, #6
 8003756:	1a5b      	subs	r3, r3, r1
 8003758:	eb64 0402 	sbc.w	r4, r4, r2
 800375c:	f04f 0100 	mov.w	r1, #0
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	00e2      	lsls	r2, r4, #3
 8003766:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800376a:	00d9      	lsls	r1, r3, #3
 800376c:	460b      	mov	r3, r1
 800376e:	4614      	mov	r4, r2
 8003770:	195b      	adds	r3, r3, r5
 8003772:	eb44 0406 	adc.w	r4, r4, r6
 8003776:	f04f 0100 	mov.w	r1, #0
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	0262      	lsls	r2, r4, #9
 8003780:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003784:	0259      	lsls	r1, r3, #9
 8003786:	460b      	mov	r3, r1
 8003788:	4614      	mov	r4, r2
 800378a:	4618      	mov	r0, r3
 800378c:	4621      	mov	r1, r4
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f04f 0400 	mov.w	r4, #0
 8003794:	461a      	mov	r2, r3
 8003796:	4623      	mov	r3, r4
 8003798:	f7fc fdba 	bl	8000310 <__aeabi_uldivmod>
 800379c:	4603      	mov	r3, r0
 800379e:	460c      	mov	r4, r1
 80037a0:	60fb      	str	r3, [r7, #12]
 80037a2:	e049      	b.n	8003838 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a4:	4b2f      	ldr	r3, [pc, #188]	; (8003864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	099b      	lsrs	r3, r3, #6
 80037aa:	f04f 0400 	mov.w	r4, #0
 80037ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	ea03 0501 	and.w	r5, r3, r1
 80037ba:	ea04 0602 	and.w	r6, r4, r2
 80037be:	4629      	mov	r1, r5
 80037c0:	4632      	mov	r2, r6
 80037c2:	f04f 0300 	mov.w	r3, #0
 80037c6:	f04f 0400 	mov.w	r4, #0
 80037ca:	0154      	lsls	r4, r2, #5
 80037cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037d0:	014b      	lsls	r3, r1, #5
 80037d2:	4619      	mov	r1, r3
 80037d4:	4622      	mov	r2, r4
 80037d6:	1b49      	subs	r1, r1, r5
 80037d8:	eb62 0206 	sbc.w	r2, r2, r6
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	f04f 0400 	mov.w	r4, #0
 80037e4:	0194      	lsls	r4, r2, #6
 80037e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80037ea:	018b      	lsls	r3, r1, #6
 80037ec:	1a5b      	subs	r3, r3, r1
 80037ee:	eb64 0402 	sbc.w	r4, r4, r2
 80037f2:	f04f 0100 	mov.w	r1, #0
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	00e2      	lsls	r2, r4, #3
 80037fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003800:	00d9      	lsls	r1, r3, #3
 8003802:	460b      	mov	r3, r1
 8003804:	4614      	mov	r4, r2
 8003806:	195b      	adds	r3, r3, r5
 8003808:	eb44 0406 	adc.w	r4, r4, r6
 800380c:	f04f 0100 	mov.w	r1, #0
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	02a2      	lsls	r2, r4, #10
 8003816:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800381a:	0299      	lsls	r1, r3, #10
 800381c:	460b      	mov	r3, r1
 800381e:	4614      	mov	r4, r2
 8003820:	4618      	mov	r0, r3
 8003822:	4621      	mov	r1, r4
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f04f 0400 	mov.w	r4, #0
 800382a:	461a      	mov	r2, r3
 800382c:	4623      	mov	r3, r4
 800382e:	f7fc fd6f 	bl	8000310 <__aeabi_uldivmod>
 8003832:	4603      	mov	r3, r0
 8003834:	460c      	mov	r4, r1
 8003836:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003838:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	3301      	adds	r3, #1
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	60bb      	str	r3, [r7, #8]
      break;
 8003852:	e002      	b.n	800385a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003854:	4b04      	ldr	r3, [pc, #16]	; (8003868 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003856:	60bb      	str	r3, [r7, #8]
      break;
 8003858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800385a:	68bb      	ldr	r3, [r7, #8]
}
 800385c:	4618      	mov	r0, r3
 800385e:	3714      	adds	r7, #20
 8003860:	46bd      	mov	sp, r7
 8003862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	00f42400 	.word	0x00f42400
 800386c:	007a1200 	.word	0x007a1200

08003870 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_RCC_GetHCLKFreq+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000000 	.word	0x20000000

08003888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800388c:	f7ff fff0 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 8003890:	4601      	mov	r1, r0
 8003892:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	0a9b      	lsrs	r3, r3, #10
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	4a03      	ldr	r2, [pc, #12]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800389e:	5cd3      	ldrb	r3, [r2, r3]
 80038a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40023800 	.word	0x40023800
 80038ac:	08018be0 	.word	0x08018be0

080038b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038b4:	f7ff ffdc 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 80038b8:	4601      	mov	r1, r0
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	0b5b      	lsrs	r3, r3, #13
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	4a03      	ldr	r2, [pc, #12]	; (80038d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038c6:	5cd3      	ldrb	r3, [r2, r3]
 80038c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40023800 	.word	0x40023800
 80038d4:	08018be0 	.word	0x08018be0

080038d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	220f      	movs	r2, #15
 80038e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038e8:	4b12      	ldr	r3, [pc, #72]	; (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0203 	and.w	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038f4:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <HAL_RCC_GetClockConfig+0x5c>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	08db      	lsrs	r3, r3, #3
 8003912:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800391a:	4b07      	ldr	r3, [pc, #28]	; (8003938 <HAL_RCC_GetClockConfig+0x60>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 020f 	and.w	r2, r3, #15
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	601a      	str	r2, [r3, #0]
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40023800 	.word	0x40023800
 8003938:	40023c00 	.word	0x40023c00

0800393c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800394c:	2300      	movs	r3, #0
 800394e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0301 	and.w	r3, r3, #1
 8003960:	2b00      	cmp	r3, #0
 8003962:	d012      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003964:	4b69      	ldr	r3, [pc, #420]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a68      	ldr	r2, [pc, #416]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800396a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800396e:	6093      	str	r3, [r2, #8]
 8003970:	4b66      	ldr	r3, [pc, #408]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003978:	4964      	ldr	r1, [pc, #400]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003986:	2301      	movs	r3, #1
 8003988:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d017      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003996:	4b5d      	ldr	r3, [pc, #372]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800399c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a4:	4959      	ldr	r1, [pc, #356]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039b4:	d101      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80039b6:	2301      	movs	r3, #1
 80039b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80039c2:	2301      	movs	r3, #1
 80039c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d017      	beq.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039d2:	4b4e      	ldr	r3, [pc, #312]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	494a      	ldr	r1, [pc, #296]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f0:	d101      	bne.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039f2:	2301      	movs	r3, #1
 80039f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80039fe:	2301      	movs	r3, #1
 8003a00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	f000 808b 	beq.w	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a20:	4b3a      	ldr	r3, [pc, #232]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	4a39      	ldr	r2, [pc, #228]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003a2c:	4b37      	ldr	r3, [pc, #220]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a38:	4b35      	ldr	r3, [pc, #212]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a34      	ldr	r2, [pc, #208]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a44:	f7fd fc76 	bl	8001334 <HAL_GetTick>
 8003a48:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4c:	f7fd fc72 	bl	8001334 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b64      	cmp	r3, #100	; 0x64
 8003a58:	d901      	bls.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e38d      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a5e:	4b2c      	ldr	r3, [pc, #176]	; (8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0f0      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a6a:	4b28      	ldr	r3, [pc, #160]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a72:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d035      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d02e      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a88:	4b20      	ldr	r3, [pc, #128]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a90:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a92:	4b1e      	ldr	r3, [pc, #120]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a96:	4a1d      	ldr	r2, [pc, #116]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a9e:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	4a1a      	ldr	r2, [pc, #104]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003aaa:	4a18      	ldr	r2, [pc, #96]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ab0:	4b16      	ldr	r3, [pc, #88]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d114      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fd fc3a 	bl	8001334 <HAL_GetTick>
 8003ac0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ac2:	e00a      	b.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac4:	f7fd fc36 	bl	8001334 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e34f      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ada:	4b0c      	ldr	r3, [pc, #48]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0ee      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af2:	d111      	bne.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003af4:	4b05      	ldr	r3, [pc, #20]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b00:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b02:	400b      	ands	r3, r1
 8003b04:	4901      	ldr	r1, [pc, #4]	; (8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]
 8003b0a:	e00b      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40007000 	.word	0x40007000
 8003b14:	0ffffcff 	.word	0x0ffffcff
 8003b18:	4bb3      	ldr	r3, [pc, #716]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4ab2      	ldr	r2, [pc, #712]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b1e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b22:	6093      	str	r3, [r2, #8]
 8003b24:	4bb0      	ldr	r3, [pc, #704]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b26:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b30:	49ad      	ldr	r1, [pc, #692]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0310 	and.w	r3, r3, #16
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d010      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b42:	4ba9      	ldr	r3, [pc, #676]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b48:	4aa7      	ldr	r2, [pc, #668]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b4e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b52:	4ba5      	ldr	r3, [pc, #660]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b54:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	49a2      	ldr	r1, [pc, #648]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b70:	4b9d      	ldr	r3, [pc, #628]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b7e:	499a      	ldr	r1, [pc, #616]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b92:	4b95      	ldr	r3, [pc, #596]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ba0:	4991      	ldr	r1, [pc, #580]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bb4:	4b8c      	ldr	r3, [pc, #560]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bc2:	4989      	ldr	r1, [pc, #548]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bd6:	4b84      	ldr	r3, [pc, #528]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bdc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be4:	4980      	ldr	r1, [pc, #512]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bf8:	4b7b      	ldr	r3, [pc, #492]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfe:	f023 0203 	bic.w	r2, r3, #3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c06:	4978      	ldr	r1, [pc, #480]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c1a:	4b73      	ldr	r3, [pc, #460]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c20:	f023 020c 	bic.w	r2, r3, #12
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c28:	496f      	ldr	r1, [pc, #444]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c3c:	4b6a      	ldr	r3, [pc, #424]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c4a:	4967      	ldr	r1, [pc, #412]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c5e:	4b62      	ldr	r3, [pc, #392]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c64:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6c:	495e      	ldr	r1, [pc, #376]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c80:	4b59      	ldr	r3, [pc, #356]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8e:	4956      	ldr	r1, [pc, #344]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c90:	4313      	orrs	r3, r2
 8003c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ca2:	4b51      	ldr	r3, [pc, #324]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb0:	494d      	ldr	r1, [pc, #308]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003cc4:	4b48      	ldr	r3, [pc, #288]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd2:	4945      	ldr	r1, [pc, #276]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00a      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003ce6:	4b40      	ldr	r3, [pc, #256]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf4:	493c      	ldr	r1, [pc, #240]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00a      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d08:	4b37      	ldr	r3, [pc, #220]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d16:	4934      	ldr	r1, [pc, #208]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d011      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d2a:	4b2f      	ldr	r3, [pc, #188]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d38:	492b      	ldr	r1, [pc, #172]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d48:	d101      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d00a      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d6a:	4b1f      	ldr	r3, [pc, #124]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d78:	491b      	ldr	r1, [pc, #108]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d00b      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d8c:	4b16      	ldr	r3, [pc, #88]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9c:	4912      	ldr	r1, [pc, #72]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00b      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003db0:	4b0d      	ldr	r3, [pc, #52]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dc0:	4909      	ldr	r1, [pc, #36]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00f      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dd4:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de4:	e002      	b.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800
 8003dec:	4985      	ldr	r1, [pc, #532]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00b      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e00:	4b80      	ldr	r3, [pc, #512]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e10:	497c      	ldr	r1, [pc, #496]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d005      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e26:	f040 80d6 	bne.w	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e2a:	4b76      	ldr	r3, [pc, #472]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a75      	ldr	r2, [pc, #468]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e36:	f7fd fa7d 	bl	8001334 <HAL_GetTick>
 8003e3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e3e:	f7fd fa79 	bl	8001334 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b64      	cmp	r3, #100	; 0x64
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e194      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e50:	4b6c      	ldr	r3, [pc, #432]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1f0      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d021      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d11d      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e70:	4b64      	ldr	r3, [pc, #400]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e76:	0c1b      	lsrs	r3, r3, #16
 8003e78:	f003 0303 	and.w	r3, r3, #3
 8003e7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003e7e:	4b61      	ldr	r3, [pc, #388]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e84:	0e1b      	lsrs	r3, r3, #24
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	019a      	lsls	r2, r3, #6
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	041b      	lsls	r3, r3, #16
 8003e96:	431a      	orrs	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	061b      	lsls	r3, r3, #24
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	071b      	lsls	r3, r3, #28
 8003ea4:	4957      	ldr	r1, [pc, #348]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d004      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ebc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d02e      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed6:	d129      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ed8:	4b4a      	ldr	r3, [pc, #296]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ede:	0c1b      	lsrs	r3, r3, #16
 8003ee0:	f003 0303 	and.w	r3, r3, #3
 8003ee4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ee6:	4b47      	ldr	r3, [pc, #284]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ee8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eec:	0f1b      	lsrs	r3, r3, #28
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	019a      	lsls	r2, r3, #6
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	041b      	lsls	r3, r3, #16
 8003efe:	431a      	orrs	r2, r3
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	061b      	lsls	r3, r3, #24
 8003f06:	431a      	orrs	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	071b      	lsls	r3, r3, #28
 8003f0c:	493d      	ldr	r1, [pc, #244]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f14:	4b3b      	ldr	r3, [pc, #236]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f1a:	f023 021f 	bic.w	r2, r3, #31
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	3b01      	subs	r3, #1
 8003f24:	4937      	ldr	r1, [pc, #220]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d01d      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f38:	4b32      	ldr	r3, [pc, #200]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f3e:	0e1b      	lsrs	r3, r3, #24
 8003f40:	f003 030f 	and.w	r3, r3, #15
 8003f44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f46:	4b2f      	ldr	r3, [pc, #188]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4c:	0f1b      	lsrs	r3, r3, #28
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	019a      	lsls	r2, r3, #6
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	041b      	lsls	r3, r3, #16
 8003f60:	431a      	orrs	r2, r3
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	061b      	lsls	r3, r3, #24
 8003f66:	431a      	orrs	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	071b      	lsls	r3, r3, #28
 8003f6c:	4925      	ldr	r1, [pc, #148]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d011      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	019a      	lsls	r2, r3, #6
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	041b      	lsls	r3, r3, #16
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	061b      	lsls	r3, r3, #24
 8003f94:	431a      	orrs	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	071b      	lsls	r3, r3, #28
 8003f9c:	4919      	ldr	r1, [pc, #100]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fa4:	4b17      	ldr	r3, [pc, #92]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a16      	ldr	r2, [pc, #88]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003faa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb0:	f7fd f9c0 	bl	8001334 <HAL_GetTick>
 8003fb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fb8:	f7fd f9bc 	bl	8001334 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b64      	cmp	r3, #100	; 0x64
 8003fc4:	d901      	bls.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e0d7      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fca:	4b0e      	ldr	r3, [pc, #56]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0f0      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	f040 80cd 	bne.w	8004178 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003fde:	4b09      	ldr	r3, [pc, #36]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a08      	ldr	r2, [pc, #32]	; (8004004 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fea:	f7fd f9a3 	bl	8001334 <HAL_GetTick>
 8003fee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ff0:	e00a      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ff2:	f7fd f99f 	bl	8001334 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b64      	cmp	r3, #100	; 0x64
 8003ffe:	d903      	bls.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e0ba      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004004:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004008:	4b5e      	ldr	r3, [pc, #376]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004014:	d0ed      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004032:	2b00      	cmp	r3, #0
 8004034:	d02e      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d12a      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800403e:	4b51      	ldr	r3, [pc, #324]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	0c1b      	lsrs	r3, r3, #16
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800404c:	4b4d      	ldr	r3, [pc, #308]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004052:	0f1b      	lsrs	r3, r3, #28
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	019a      	lsls	r2, r3, #6
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	041b      	lsls	r3, r3, #16
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	061b      	lsls	r3, r3, #24
 800406c:	431a      	orrs	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	071b      	lsls	r3, r3, #28
 8004072:	4944      	ldr	r1, [pc, #272]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004074:	4313      	orrs	r3, r2
 8004076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800407a:	4b42      	ldr	r3, [pc, #264]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800407c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004080:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	3b01      	subs	r3, #1
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	493d      	ldr	r1, [pc, #244]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800408e:	4313      	orrs	r3, r2
 8004090:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d022      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040a8:	d11d      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040aa:	4b36      	ldr	r3, [pc, #216]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b0:	0e1b      	lsrs	r3, r3, #24
 80040b2:	f003 030f 	and.w	r3, r3, #15
 80040b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80040b8:	4b32      	ldr	r3, [pc, #200]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	0f1b      	lsrs	r3, r3, #28
 80040c0:	f003 0307 	and.w	r3, r3, #7
 80040c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	019a      	lsls	r2, r3, #6
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	041b      	lsls	r3, r3, #16
 80040d2:	431a      	orrs	r2, r3
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	061b      	lsls	r3, r3, #24
 80040d8:	431a      	orrs	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	071b      	lsls	r3, r3, #28
 80040de:	4929      	ldr	r1, [pc, #164]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d028      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040f2:	4b24      	ldr	r3, [pc, #144]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	0e1b      	lsrs	r3, r3, #24
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004100:	4b20      	ldr	r3, [pc, #128]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004106:	0c1b      	lsrs	r3, r3, #16
 8004108:	f003 0303 	and.w	r3, r3, #3
 800410c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	019a      	lsls	r2, r3, #6
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	041b      	lsls	r3, r3, #16
 8004118:	431a      	orrs	r2, r3
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	061b      	lsls	r3, r3, #24
 800411e:	431a      	orrs	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	071b      	lsls	r3, r3, #28
 8004126:	4917      	ldr	r1, [pc, #92]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004128:	4313      	orrs	r3, r2
 800412a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800412e:	4b15      	ldr	r3, [pc, #84]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004134:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413c:	4911      	ldr	r1, [pc, #68]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004144:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a0e      	ldr	r2, [pc, #56]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800414a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800414e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004150:	f7fd f8f0 	bl	8001334 <HAL_GetTick>
 8004154:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004158:	f7fd f8ec 	bl	8001334 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	; 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e007      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004176:	d1ef      	bne.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3720      	adds	r7, #32
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40023800 	.word	0x40023800

08004188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e01d      	b.n	80041d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d106      	bne.n	80041b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f7fc fd16 	bl	8000be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3304      	adds	r3, #4
 80041c4:	4619      	mov	r1, r3
 80041c6:	4610      	mov	r0, r2
 80041c8:	f000 fa36 	bl	8004638 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <HAL_TIM_Base_Start_IT+0x50>)
 8004200:	4013      	ands	r3, r2
 8004202:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b06      	cmp	r3, #6
 8004208:	d00b      	beq.n	8004222 <HAL_TIM_Base_Start_IT+0x42>
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004210:	d007      	beq.n	8004222 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f042 0201 	orr.w	r2, r2, #1
 8004220:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	00010007 	.word	0x00010007

08004234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f003 0302 	and.w	r3, r3, #2
 8004246:	2b02      	cmp	r3, #2
 8004248:	d122      	bne.n	8004290 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b02      	cmp	r3, #2
 8004256:	d11b      	bne.n	8004290 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f06f 0202 	mvn.w	r2, #2
 8004260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f9c0 	bl	80045fc <HAL_TIM_IC_CaptureCallback>
 800427c:	e005      	b.n	800428a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f9b2 	bl	80045e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f9c3 	bl	8004610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b04      	cmp	r3, #4
 800429c:	d122      	bne.n	80042e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0304 	and.w	r3, r3, #4
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d11b      	bne.n	80042e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f06f 0204 	mvn.w	r2, #4
 80042b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2202      	movs	r2, #2
 80042ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f996 	bl	80045fc <HAL_TIM_IC_CaptureCallback>
 80042d0:	e005      	b.n	80042de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f988 	bl	80045e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f999 	bl	8004610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d122      	bne.n	8004338 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f003 0308 	and.w	r3, r3, #8
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d11b      	bne.n	8004338 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f06f 0208 	mvn.w	r2, #8
 8004308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2204      	movs	r2, #4
 800430e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f96c 	bl	80045fc <HAL_TIM_IC_CaptureCallback>
 8004324:	e005      	b.n	8004332 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 f95e 	bl	80045e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f96f 	bl	8004610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f003 0310 	and.w	r3, r3, #16
 8004342:	2b10      	cmp	r3, #16
 8004344:	d122      	bne.n	800438c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f003 0310 	and.w	r3, r3, #16
 8004350:	2b10      	cmp	r3, #16
 8004352:	d11b      	bne.n	800438c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f06f 0210 	mvn.w	r2, #16
 800435c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2208      	movs	r2, #8
 8004362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f942 	bl	80045fc <HAL_TIM_IC_CaptureCallback>
 8004378:	e005      	b.n	8004386 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f934 	bl	80045e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f945 	bl	8004610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b01      	cmp	r3, #1
 8004398:	d10e      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d107      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f06f 0201 	mvn.w	r2, #1
 80043b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7fc fbba 	bl	8000b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c2:	2b80      	cmp	r3, #128	; 0x80
 80043c4:	d10e      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d0:	2b80      	cmp	r3, #128	; 0x80
 80043d2:	d107      	bne.n	80043e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fafc 	bl	80049dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043f2:	d10e      	bne.n	8004412 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fe:	2b80      	cmp	r3, #128	; 0x80
 8004400:	d107      	bne.n	8004412 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800440a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 faef 	bl	80049f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800441c:	2b40      	cmp	r3, #64	; 0x40
 800441e:	d10e      	bne.n	800443e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b40      	cmp	r3, #64	; 0x40
 800442c:	d107      	bne.n	800443e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f8f3 	bl	8004624 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f003 0320 	and.w	r3, r3, #32
 8004448:	2b20      	cmp	r3, #32
 800444a:	d10e      	bne.n	800446a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f003 0320 	and.w	r3, r3, #32
 8004456:	2b20      	cmp	r3, #32
 8004458:	d107      	bne.n	800446a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f06f 0220 	mvn.w	r2, #32
 8004462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 faaf 	bl	80049c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_TIM_ConfigClockSource+0x18>
 8004488:	2302      	movs	r3, #2
 800448a:	e0a6      	b.n	80045da <HAL_TIM_ConfigClockSource+0x166>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4b4f      	ldr	r3, [pc, #316]	; (80045e4 <HAL_TIM_ConfigClockSource+0x170>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044b2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b40      	cmp	r3, #64	; 0x40
 80044c2:	d067      	beq.n	8004594 <HAL_TIM_ConfigClockSource+0x120>
 80044c4:	2b40      	cmp	r3, #64	; 0x40
 80044c6:	d80b      	bhi.n	80044e0 <HAL_TIM_ConfigClockSource+0x6c>
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d073      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0x140>
 80044cc:	2b10      	cmp	r3, #16
 80044ce:	d802      	bhi.n	80044d6 <HAL_TIM_ConfigClockSource+0x62>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d06f      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80044d4:	e078      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044d6:	2b20      	cmp	r3, #32
 80044d8:	d06c      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0x140>
 80044da:	2b30      	cmp	r3, #48	; 0x30
 80044dc:	d06a      	beq.n	80045b4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80044de:	e073      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044e0:	2b70      	cmp	r3, #112	; 0x70
 80044e2:	d00d      	beq.n	8004500 <HAL_TIM_ConfigClockSource+0x8c>
 80044e4:	2b70      	cmp	r3, #112	; 0x70
 80044e6:	d804      	bhi.n	80044f2 <HAL_TIM_ConfigClockSource+0x7e>
 80044e8:	2b50      	cmp	r3, #80	; 0x50
 80044ea:	d033      	beq.n	8004554 <HAL_TIM_ConfigClockSource+0xe0>
 80044ec:	2b60      	cmp	r3, #96	; 0x60
 80044ee:	d041      	beq.n	8004574 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80044f0:	e06a      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80044f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f6:	d066      	beq.n	80045c6 <HAL_TIM_ConfigClockSource+0x152>
 80044f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044fc:	d017      	beq.n	800452e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80044fe:	e063      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	6899      	ldr	r1, [r3, #8]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f000 f9ac 	bl	800486c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004522:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	609a      	str	r2, [r3, #8]
      break;
 800452c:	e04c      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6818      	ldr	r0, [r3, #0]
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	6899      	ldr	r1, [r3, #8]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685a      	ldr	r2, [r3, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	f000 f995 	bl	800486c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004550:	609a      	str	r2, [r3, #8]
      break;
 8004552:	e039      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	6859      	ldr	r1, [r3, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	461a      	mov	r2, r3
 8004562:	f000 f909 	bl	8004778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2150      	movs	r1, #80	; 0x50
 800456c:	4618      	mov	r0, r3
 800456e:	f000 f962 	bl	8004836 <TIM_ITRx_SetConfig>
      break;
 8004572:	e029      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6818      	ldr	r0, [r3, #0]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	6859      	ldr	r1, [r3, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	461a      	mov	r2, r3
 8004582:	f000 f928 	bl	80047d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2160      	movs	r1, #96	; 0x60
 800458c:	4618      	mov	r0, r3
 800458e:	f000 f952 	bl	8004836 <TIM_ITRx_SetConfig>
      break;
 8004592:	e019      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6859      	ldr	r1, [r3, #4]
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	461a      	mov	r2, r3
 80045a2:	f000 f8e9 	bl	8004778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2140      	movs	r1, #64	; 0x40
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 f942 	bl	8004836 <TIM_ITRx_SetConfig>
      break;
 80045b2:	e009      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4619      	mov	r1, r3
 80045be:	4610      	mov	r0, r2
 80045c0:	f000 f939 	bl	8004836 <TIM_ITRx_SetConfig>
      break;
 80045c4:	e000      	b.n	80045c8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80045c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	fffeff88 	.word	0xfffeff88

080045e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a40      	ldr	r2, [pc, #256]	; (800474c <TIM_Base_SetConfig+0x114>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d013      	beq.n	8004678 <TIM_Base_SetConfig+0x40>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004656:	d00f      	beq.n	8004678 <TIM_Base_SetConfig+0x40>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a3d      	ldr	r2, [pc, #244]	; (8004750 <TIM_Base_SetConfig+0x118>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d00b      	beq.n	8004678 <TIM_Base_SetConfig+0x40>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a3c      	ldr	r2, [pc, #240]	; (8004754 <TIM_Base_SetConfig+0x11c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d007      	beq.n	8004678 <TIM_Base_SetConfig+0x40>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a3b      	ldr	r2, [pc, #236]	; (8004758 <TIM_Base_SetConfig+0x120>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d003      	beq.n	8004678 <TIM_Base_SetConfig+0x40>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a3a      	ldr	r2, [pc, #232]	; (800475c <TIM_Base_SetConfig+0x124>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d108      	bne.n	800468a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a2f      	ldr	r2, [pc, #188]	; (800474c <TIM_Base_SetConfig+0x114>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d02b      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004698:	d027      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	4a2c      	ldr	r2, [pc, #176]	; (8004750 <TIM_Base_SetConfig+0x118>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d023      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a2b      	ldr	r2, [pc, #172]	; (8004754 <TIM_Base_SetConfig+0x11c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d01f      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a2a      	ldr	r2, [pc, #168]	; (8004758 <TIM_Base_SetConfig+0x120>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d01b      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a29      	ldr	r2, [pc, #164]	; (800475c <TIM_Base_SetConfig+0x124>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d017      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a28      	ldr	r2, [pc, #160]	; (8004760 <TIM_Base_SetConfig+0x128>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a27      	ldr	r2, [pc, #156]	; (8004764 <TIM_Base_SetConfig+0x12c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d00f      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a26      	ldr	r2, [pc, #152]	; (8004768 <TIM_Base_SetConfig+0x130>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00b      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a25      	ldr	r2, [pc, #148]	; (800476c <TIM_Base_SetConfig+0x134>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d007      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a24      	ldr	r2, [pc, #144]	; (8004770 <TIM_Base_SetConfig+0x138>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d003      	beq.n	80046ea <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a23      	ldr	r2, [pc, #140]	; (8004774 <TIM_Base_SetConfig+0x13c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d108      	bne.n	80046fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a0a      	ldr	r2, [pc, #40]	; (800474c <TIM_Base_SetConfig+0x114>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d003      	beq.n	8004730 <TIM_Base_SetConfig+0xf8>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a0c      	ldr	r2, [pc, #48]	; (800475c <TIM_Base_SetConfig+0x124>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d103      	bne.n	8004738 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	615a      	str	r2, [r3, #20]
}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40010000 	.word	0x40010000
 8004750:	40000400 	.word	0x40000400
 8004754:	40000800 	.word	0x40000800
 8004758:	40000c00 	.word	0x40000c00
 800475c:	40010400 	.word	0x40010400
 8004760:	40014000 	.word	0x40014000
 8004764:	40014400 	.word	0x40014400
 8004768:	40014800 	.word	0x40014800
 800476c:	40001800 	.word	0x40001800
 8004770:	40001c00 	.word	0x40001c00
 8004774:	40002000 	.word	0x40002000

08004778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004778:	b480      	push	{r7}
 800477a:	b087      	sub	sp, #28
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6a1b      	ldr	r3, [r3, #32]
 8004788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	f023 0201 	bic.w	r2, r3, #1
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f023 030a 	bic.w	r3, r3, #10
 80047b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	621a      	str	r2, [r3, #32]
}
 80047ca:	bf00      	nop
 80047cc:	371c      	adds	r7, #28
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b087      	sub	sp, #28
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	f023 0210 	bic.w	r2, r3, #16
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004800:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	031b      	lsls	r3, r3, #12
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004812:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	621a      	str	r2, [r3, #32]
}
 800482a:	bf00      	nop
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004836:	b480      	push	{r7}
 8004838:	b085      	sub	sp, #20
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4313      	orrs	r3, r2
 8004854:	f043 0307 	orr.w	r3, r3, #7
 8004858:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	609a      	str	r2, [r3, #8]
}
 8004860:	bf00      	nop
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800486c:	b480      	push	{r7}
 800486e:	b087      	sub	sp, #28
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004886:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	021a      	lsls	r2, r3, #8
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	431a      	orrs	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	4313      	orrs	r3, r2
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	4313      	orrs	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	609a      	str	r2, [r3, #8]
}
 80048a0:	bf00      	nop
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e06d      	b.n	80049a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a30      	ldr	r2, [pc, #192]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a2f      	ldr	r2, [pc, #188]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d108      	bne.n	800490a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004910:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a20      	ldr	r2, [pc, #128]	; (80049ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d022      	beq.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004936:	d01d      	beq.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d018      	beq.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1c      	ldr	r2, [pc, #112]	; (80049b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d013      	beq.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1a      	ldr	r2, [pc, #104]	; (80049bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d00e      	beq.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d009      	beq.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a16      	ldr	r2, [pc, #88]	; (80049c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d004      	beq.n	8004974 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a15      	ldr	r2, [pc, #84]	; (80049c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d10c      	bne.n	800498e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800497a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	4313      	orrs	r3, r2
 8004984:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3714      	adds	r7, #20
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40010400 	.word	0x40010400
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40000c00 	.word	0x40000c00
 80049c0:	40014000 	.word	0x40014000
 80049c4:	40001800 	.word	0x40001800

080049c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049d0:	bf00      	nop
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e040      	b.n	8004a98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d106      	bne.n	8004a2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f7fc f900 	bl	8000c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2224      	movs	r2, #36	; 0x24
 8004a30:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f022 0201 	bic.w	r2, r2, #1
 8004a40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f98a 	bl	8004d5c <UART_SetConfig>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d101      	bne.n	8004a52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e022      	b.n	8004a98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fc28 	bl	80052b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689a      	ldr	r2, [r3, #8]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f042 0201 	orr.w	r2, r2, #1
 8004a8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 fcaf 	bl	80053f4 <UART_CheckIdleState>
 8004a96:	4603      	mov	r3, r0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3708      	adds	r7, #8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08a      	sub	sp, #40	; 0x28
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	603b      	str	r3, [r7, #0]
 8004aac:	4613      	mov	r3, r2
 8004aae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d17f      	bne.n	8004bb8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <HAL_UART_Transmit+0x24>
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e078      	b.n	8004bba <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d101      	bne.n	8004ad6 <HAL_UART_Transmit+0x36>
 8004ad2:	2302      	movs	r3, #2
 8004ad4:	e071      	b.n	8004bba <HAL_UART_Transmit+0x11a>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2221      	movs	r2, #33	; 0x21
 8004ae8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004aea:	f7fc fc23 	bl	8001334 <HAL_GetTick>
 8004aee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	88fa      	ldrh	r2, [r7, #6]
 8004af4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	88fa      	ldrh	r2, [r7, #6]
 8004afc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b08:	d108      	bne.n	8004b1c <HAL_UART_Transmit+0x7c>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d104      	bne.n	8004b1c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	e003      	b.n	8004b24 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b20:	2300      	movs	r3, #0
 8004b22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8004b2c:	e02c      	b.n	8004b88 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	2200      	movs	r2, #0
 8004b36:	2180      	movs	r1, #128	; 0x80
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 fca0 	bl	800547e <UART_WaitOnFlagUntilTimeout>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e038      	b.n	8004bba <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10b      	bne.n	8004b66 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b5c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	3302      	adds	r3, #2
 8004b62:	61bb      	str	r3, [r7, #24]
 8004b64:	e007      	b.n	8004b76 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	781a      	ldrb	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	3301      	adds	r3, #1
 8004b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1cc      	bne.n	8004b2e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	9300      	str	r3, [sp, #0]
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2140      	movs	r1, #64	; 0x40
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 fc6d 	bl	800547e <UART_WaitOnFlagUntilTimeout>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e005      	b.n	8004bba <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	e000      	b.n	8004bba <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004bb8:	2302      	movs	r3, #2
  }
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3720      	adds	r7, #32
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b08a      	sub	sp, #40	; 0x28
 8004bc6:	af02      	add	r7, sp, #8
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	603b      	str	r3, [r7, #0]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bd6:	2b20      	cmp	r3, #32
 8004bd8:	f040 80ba 	bne.w	8004d50 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <HAL_UART_Receive+0x26>
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0b2      	b.n	8004d52 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_UART_Receive+0x38>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e0ab      	b.n	8004d52 <HAL_UART_Receive+0x190>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2222      	movs	r2, #34	; 0x22
 8004c0c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8004c0e:	f7fc fb91 	bl	8001334 <HAL_GetTick>
 8004c12:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	88fa      	ldrh	r2, [r7, #6]
 8004c18:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	88fa      	ldrh	r2, [r7, #6]
 8004c20:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2c:	d10e      	bne.n	8004c4c <HAL_UART_Receive+0x8a>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d105      	bne.n	8004c42 <HAL_UART_Receive+0x80>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c40:	e02d      	b.n	8004c9e <HAL_UART_Receive+0xdc>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	22ff      	movs	r2, #255	; 0xff
 8004c46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c4a:	e028      	b.n	8004c9e <HAL_UART_Receive+0xdc>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10d      	bne.n	8004c70 <HAL_UART_Receive+0xae>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <HAL_UART_Receive+0xa4>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	22ff      	movs	r2, #255	; 0xff
 8004c60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c64:	e01b      	b.n	8004c9e <HAL_UART_Receive+0xdc>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	227f      	movs	r2, #127	; 0x7f
 8004c6a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c6e:	e016      	b.n	8004c9e <HAL_UART_Receive+0xdc>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c78:	d10d      	bne.n	8004c96 <HAL_UART_Receive+0xd4>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d104      	bne.n	8004c8c <HAL_UART_Receive+0xca>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	227f      	movs	r2, #127	; 0x7f
 8004c86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c8a:	e008      	b.n	8004c9e <HAL_UART_Receive+0xdc>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	223f      	movs	r2, #63	; 0x3f
 8004c90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c94:	e003      	b.n	8004c9e <HAL_UART_Receive+0xdc>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ca4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cae:	d108      	bne.n	8004cc2 <HAL_UART_Receive+0x100>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d104      	bne.n	8004cc2 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	61bb      	str	r3, [r7, #24]
 8004cc0:	e003      	b.n	8004cca <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004cd2:	e032      	b.n	8004d3a <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2120      	movs	r1, #32
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 fbcd 	bl	800547e <UART_WaitOnFlagUntilTimeout>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e031      	b.n	8004d52 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10c      	bne.n	8004d0e <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	8a7b      	ldrh	r3, [r7, #18]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	3302      	adds	r3, #2
 8004d0a:	61bb      	str	r3, [r7, #24]
 8004d0c:	e00c      	b.n	8004d28 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	8a7b      	ldrh	r3, [r7, #18]
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	3301      	adds	r3, #1
 8004d26:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	3b01      	subs	r3, #1
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1c6      	bne.n	8004cd4 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	e000      	b.n	8004d52 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8004d50:	2302      	movs	r3, #2
  }
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3720      	adds	r7, #32
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	431a      	orrs	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	69db      	ldr	r3, [r3, #28]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	4bb1      	ldr	r3, [pc, #708]	; (8005050 <UART_SetConfig+0x2f4>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	6939      	ldr	r1, [r7, #16]
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	693a      	ldr	r2, [r7, #16]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	693a      	ldr	r2, [r7, #16]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a9f      	ldr	r2, [pc, #636]	; (8005054 <UART_SetConfig+0x2f8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d121      	bne.n	8004e20 <UART_SetConfig+0xc4>
 8004ddc:	4b9e      	ldr	r3, [pc, #632]	; (8005058 <UART_SetConfig+0x2fc>)
 8004dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d816      	bhi.n	8004e18 <UART_SetConfig+0xbc>
 8004dea:	a201      	add	r2, pc, #4	; (adr r2, 8004df0 <UART_SetConfig+0x94>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e01 	.word	0x08004e01
 8004df4:	08004e0d 	.word	0x08004e0d
 8004df8:	08004e07 	.word	0x08004e07
 8004dfc:	08004e13 	.word	0x08004e13
 8004e00:	2301      	movs	r3, #1
 8004e02:	77fb      	strb	r3, [r7, #31]
 8004e04:	e151      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e06:	2302      	movs	r3, #2
 8004e08:	77fb      	strb	r3, [r7, #31]
 8004e0a:	e14e      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	77fb      	strb	r3, [r7, #31]
 8004e10:	e14b      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e12:	2308      	movs	r3, #8
 8004e14:	77fb      	strb	r3, [r7, #31]
 8004e16:	e148      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e18:	2310      	movs	r3, #16
 8004e1a:	77fb      	strb	r3, [r7, #31]
 8004e1c:	bf00      	nop
 8004e1e:	e144      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a8d      	ldr	r2, [pc, #564]	; (800505c <UART_SetConfig+0x300>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d134      	bne.n	8004e94 <UART_SetConfig+0x138>
 8004e2a:	4b8b      	ldr	r3, [pc, #556]	; (8005058 <UART_SetConfig+0x2fc>)
 8004e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e30:	f003 030c 	and.w	r3, r3, #12
 8004e34:	2b0c      	cmp	r3, #12
 8004e36:	d829      	bhi.n	8004e8c <UART_SetConfig+0x130>
 8004e38:	a201      	add	r2, pc, #4	; (adr r2, 8004e40 <UART_SetConfig+0xe4>)
 8004e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3e:	bf00      	nop
 8004e40:	08004e75 	.word	0x08004e75
 8004e44:	08004e8d 	.word	0x08004e8d
 8004e48:	08004e8d 	.word	0x08004e8d
 8004e4c:	08004e8d 	.word	0x08004e8d
 8004e50:	08004e81 	.word	0x08004e81
 8004e54:	08004e8d 	.word	0x08004e8d
 8004e58:	08004e8d 	.word	0x08004e8d
 8004e5c:	08004e8d 	.word	0x08004e8d
 8004e60:	08004e7b 	.word	0x08004e7b
 8004e64:	08004e8d 	.word	0x08004e8d
 8004e68:	08004e8d 	.word	0x08004e8d
 8004e6c:	08004e8d 	.word	0x08004e8d
 8004e70:	08004e87 	.word	0x08004e87
 8004e74:	2300      	movs	r3, #0
 8004e76:	77fb      	strb	r3, [r7, #31]
 8004e78:	e117      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	77fb      	strb	r3, [r7, #31]
 8004e7e:	e114      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e80:	2304      	movs	r3, #4
 8004e82:	77fb      	strb	r3, [r7, #31]
 8004e84:	e111      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e86:	2308      	movs	r3, #8
 8004e88:	77fb      	strb	r3, [r7, #31]
 8004e8a:	e10e      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e8c:	2310      	movs	r3, #16
 8004e8e:	77fb      	strb	r3, [r7, #31]
 8004e90:	bf00      	nop
 8004e92:	e10a      	b.n	80050aa <UART_SetConfig+0x34e>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a71      	ldr	r2, [pc, #452]	; (8005060 <UART_SetConfig+0x304>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d120      	bne.n	8004ee0 <UART_SetConfig+0x184>
 8004e9e:	4b6e      	ldr	r3, [pc, #440]	; (8005058 <UART_SetConfig+0x2fc>)
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d00f      	beq.n	8004ecc <UART_SetConfig+0x170>
 8004eac:	2b10      	cmp	r3, #16
 8004eae:	d802      	bhi.n	8004eb6 <UART_SetConfig+0x15a>
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d005      	beq.n	8004ec0 <UART_SetConfig+0x164>
 8004eb4:	e010      	b.n	8004ed8 <UART_SetConfig+0x17c>
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	d005      	beq.n	8004ec6 <UART_SetConfig+0x16a>
 8004eba:	2b30      	cmp	r3, #48	; 0x30
 8004ebc:	d009      	beq.n	8004ed2 <UART_SetConfig+0x176>
 8004ebe:	e00b      	b.n	8004ed8 <UART_SetConfig+0x17c>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	77fb      	strb	r3, [r7, #31]
 8004ec4:	e0f1      	b.n	80050aa <UART_SetConfig+0x34e>
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	77fb      	strb	r3, [r7, #31]
 8004eca:	e0ee      	b.n	80050aa <UART_SetConfig+0x34e>
 8004ecc:	2304      	movs	r3, #4
 8004ece:	77fb      	strb	r3, [r7, #31]
 8004ed0:	e0eb      	b.n	80050aa <UART_SetConfig+0x34e>
 8004ed2:	2308      	movs	r3, #8
 8004ed4:	77fb      	strb	r3, [r7, #31]
 8004ed6:	e0e8      	b.n	80050aa <UART_SetConfig+0x34e>
 8004ed8:	2310      	movs	r3, #16
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	bf00      	nop
 8004ede:	e0e4      	b.n	80050aa <UART_SetConfig+0x34e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a5f      	ldr	r2, [pc, #380]	; (8005064 <UART_SetConfig+0x308>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d120      	bne.n	8004f2c <UART_SetConfig+0x1d0>
 8004eea:	4b5b      	ldr	r3, [pc, #364]	; (8005058 <UART_SetConfig+0x2fc>)
 8004eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ef4:	2b40      	cmp	r3, #64	; 0x40
 8004ef6:	d00f      	beq.n	8004f18 <UART_SetConfig+0x1bc>
 8004ef8:	2b40      	cmp	r3, #64	; 0x40
 8004efa:	d802      	bhi.n	8004f02 <UART_SetConfig+0x1a6>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d005      	beq.n	8004f0c <UART_SetConfig+0x1b0>
 8004f00:	e010      	b.n	8004f24 <UART_SetConfig+0x1c8>
 8004f02:	2b80      	cmp	r3, #128	; 0x80
 8004f04:	d005      	beq.n	8004f12 <UART_SetConfig+0x1b6>
 8004f06:	2bc0      	cmp	r3, #192	; 0xc0
 8004f08:	d009      	beq.n	8004f1e <UART_SetConfig+0x1c2>
 8004f0a:	e00b      	b.n	8004f24 <UART_SetConfig+0x1c8>
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e0cb      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f12:	2302      	movs	r3, #2
 8004f14:	77fb      	strb	r3, [r7, #31]
 8004f16:	e0c8      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f18:	2304      	movs	r3, #4
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	e0c5      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f1e:	2308      	movs	r3, #8
 8004f20:	77fb      	strb	r3, [r7, #31]
 8004f22:	e0c2      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f24:	2310      	movs	r3, #16
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	bf00      	nop
 8004f2a:	e0be      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a4d      	ldr	r2, [pc, #308]	; (8005068 <UART_SetConfig+0x30c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d124      	bne.n	8004f80 <UART_SetConfig+0x224>
 8004f36:	4b48      	ldr	r3, [pc, #288]	; (8005058 <UART_SetConfig+0x2fc>)
 8004f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f44:	d012      	beq.n	8004f6c <UART_SetConfig+0x210>
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f4a:	d802      	bhi.n	8004f52 <UART_SetConfig+0x1f6>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d007      	beq.n	8004f60 <UART_SetConfig+0x204>
 8004f50:	e012      	b.n	8004f78 <UART_SetConfig+0x21c>
 8004f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f56:	d006      	beq.n	8004f66 <UART_SetConfig+0x20a>
 8004f58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f5c:	d009      	beq.n	8004f72 <UART_SetConfig+0x216>
 8004f5e:	e00b      	b.n	8004f78 <UART_SetConfig+0x21c>
 8004f60:	2300      	movs	r3, #0
 8004f62:	77fb      	strb	r3, [r7, #31]
 8004f64:	e0a1      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f66:	2302      	movs	r3, #2
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e09e      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f6c:	2304      	movs	r3, #4
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e09b      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f72:	2308      	movs	r3, #8
 8004f74:	77fb      	strb	r3, [r7, #31]
 8004f76:	e098      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	77fb      	strb	r3, [r7, #31]
 8004f7c:	bf00      	nop
 8004f7e:	e094      	b.n	80050aa <UART_SetConfig+0x34e>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a39      	ldr	r2, [pc, #228]	; (800506c <UART_SetConfig+0x310>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d124      	bne.n	8004fd4 <UART_SetConfig+0x278>
 8004f8a:	4b33      	ldr	r3, [pc, #204]	; (8005058 <UART_SetConfig+0x2fc>)
 8004f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f98:	d012      	beq.n	8004fc0 <UART_SetConfig+0x264>
 8004f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f9e:	d802      	bhi.n	8004fa6 <UART_SetConfig+0x24a>
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d007      	beq.n	8004fb4 <UART_SetConfig+0x258>
 8004fa4:	e012      	b.n	8004fcc <UART_SetConfig+0x270>
 8004fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004faa:	d006      	beq.n	8004fba <UART_SetConfig+0x25e>
 8004fac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fb0:	d009      	beq.n	8004fc6 <UART_SetConfig+0x26a>
 8004fb2:	e00b      	b.n	8004fcc <UART_SetConfig+0x270>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	77fb      	strb	r3, [r7, #31]
 8004fb8:	e077      	b.n	80050aa <UART_SetConfig+0x34e>
 8004fba:	2302      	movs	r3, #2
 8004fbc:	77fb      	strb	r3, [r7, #31]
 8004fbe:	e074      	b.n	80050aa <UART_SetConfig+0x34e>
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	77fb      	strb	r3, [r7, #31]
 8004fc4:	e071      	b.n	80050aa <UART_SetConfig+0x34e>
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	77fb      	strb	r3, [r7, #31]
 8004fca:	e06e      	b.n	80050aa <UART_SetConfig+0x34e>
 8004fcc:	2310      	movs	r3, #16
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	bf00      	nop
 8004fd2:	e06a      	b.n	80050aa <UART_SetConfig+0x34e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a25      	ldr	r2, [pc, #148]	; (8005070 <UART_SetConfig+0x314>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d124      	bne.n	8005028 <UART_SetConfig+0x2cc>
 8004fde:	4b1e      	ldr	r3, [pc, #120]	; (8005058 <UART_SetConfig+0x2fc>)
 8004fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fec:	d012      	beq.n	8005014 <UART_SetConfig+0x2b8>
 8004fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff2:	d802      	bhi.n	8004ffa <UART_SetConfig+0x29e>
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d007      	beq.n	8005008 <UART_SetConfig+0x2ac>
 8004ff8:	e012      	b.n	8005020 <UART_SetConfig+0x2c4>
 8004ffa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ffe:	d006      	beq.n	800500e <UART_SetConfig+0x2b2>
 8005000:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005004:	d009      	beq.n	800501a <UART_SetConfig+0x2be>
 8005006:	e00b      	b.n	8005020 <UART_SetConfig+0x2c4>
 8005008:	2300      	movs	r3, #0
 800500a:	77fb      	strb	r3, [r7, #31]
 800500c:	e04d      	b.n	80050aa <UART_SetConfig+0x34e>
 800500e:	2302      	movs	r3, #2
 8005010:	77fb      	strb	r3, [r7, #31]
 8005012:	e04a      	b.n	80050aa <UART_SetConfig+0x34e>
 8005014:	2304      	movs	r3, #4
 8005016:	77fb      	strb	r3, [r7, #31]
 8005018:	e047      	b.n	80050aa <UART_SetConfig+0x34e>
 800501a:	2308      	movs	r3, #8
 800501c:	77fb      	strb	r3, [r7, #31]
 800501e:	e044      	b.n	80050aa <UART_SetConfig+0x34e>
 8005020:	2310      	movs	r3, #16
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	bf00      	nop
 8005026:	e040      	b.n	80050aa <UART_SetConfig+0x34e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a11      	ldr	r2, [pc, #68]	; (8005074 <UART_SetConfig+0x318>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d139      	bne.n	80050a6 <UART_SetConfig+0x34a>
 8005032:	4b09      	ldr	r3, [pc, #36]	; (8005058 <UART_SetConfig+0x2fc>)
 8005034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005038:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800503c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005040:	d027      	beq.n	8005092 <UART_SetConfig+0x336>
 8005042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005046:	d817      	bhi.n	8005078 <UART_SetConfig+0x31c>
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01c      	beq.n	8005086 <UART_SetConfig+0x32a>
 800504c:	e027      	b.n	800509e <UART_SetConfig+0x342>
 800504e:	bf00      	nop
 8005050:	efff69f3 	.word	0xefff69f3
 8005054:	40011000 	.word	0x40011000
 8005058:	40023800 	.word	0x40023800
 800505c:	40004400 	.word	0x40004400
 8005060:	40004800 	.word	0x40004800
 8005064:	40004c00 	.word	0x40004c00
 8005068:	40005000 	.word	0x40005000
 800506c:	40011400 	.word	0x40011400
 8005070:	40007800 	.word	0x40007800
 8005074:	40007c00 	.word	0x40007c00
 8005078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800507c:	d006      	beq.n	800508c <UART_SetConfig+0x330>
 800507e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005082:	d009      	beq.n	8005098 <UART_SetConfig+0x33c>
 8005084:	e00b      	b.n	800509e <UART_SetConfig+0x342>
 8005086:	2300      	movs	r3, #0
 8005088:	77fb      	strb	r3, [r7, #31]
 800508a:	e00e      	b.n	80050aa <UART_SetConfig+0x34e>
 800508c:	2302      	movs	r3, #2
 800508e:	77fb      	strb	r3, [r7, #31]
 8005090:	e00b      	b.n	80050aa <UART_SetConfig+0x34e>
 8005092:	2304      	movs	r3, #4
 8005094:	77fb      	strb	r3, [r7, #31]
 8005096:	e008      	b.n	80050aa <UART_SetConfig+0x34e>
 8005098:	2308      	movs	r3, #8
 800509a:	77fb      	strb	r3, [r7, #31]
 800509c:	e005      	b.n	80050aa <UART_SetConfig+0x34e>
 800509e:	2310      	movs	r3, #16
 80050a0:	77fb      	strb	r3, [r7, #31]
 80050a2:	bf00      	nop
 80050a4:	e001      	b.n	80050aa <UART_SetConfig+0x34e>
 80050a6:	2310      	movs	r3, #16
 80050a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050b2:	d17f      	bne.n	80051b4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80050b4:	7ffb      	ldrb	r3, [r7, #31]
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d85c      	bhi.n	8005174 <UART_SetConfig+0x418>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <UART_SetConfig+0x364>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050e5 	.word	0x080050e5
 80050c4:	08005105 	.word	0x08005105
 80050c8:	08005125 	.word	0x08005125
 80050cc:	08005175 	.word	0x08005175
 80050d0:	0800513d 	.word	0x0800513d
 80050d4:	08005175 	.word	0x08005175
 80050d8:	08005175 	.word	0x08005175
 80050dc:	08005175 	.word	0x08005175
 80050e0:	0800515d 	.word	0x0800515d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e4:	f7fe fbd0 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 80050e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	005a      	lsls	r2, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	085b      	lsrs	r3, r3, #1
 80050f4:	441a      	add	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fe:	b29b      	uxth	r3, r3
 8005100:	61bb      	str	r3, [r7, #24]
        break;
 8005102:	e03a      	b.n	800517a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005104:	f7fe fbd4 	bl	80038b0 <HAL_RCC_GetPCLK2Freq>
 8005108:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	005a      	lsls	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	085b      	lsrs	r3, r3, #1
 8005114:	441a      	add	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	fbb2 f3f3 	udiv	r3, r2, r3
 800511e:	b29b      	uxth	r3, r3
 8005120:	61bb      	str	r3, [r7, #24]
        break;
 8005122:	e02a      	b.n	800517a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	085a      	lsrs	r2, r3, #1
 800512a:	4b5f      	ldr	r3, [pc, #380]	; (80052a8 <UART_SetConfig+0x54c>)
 800512c:	4413      	add	r3, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6852      	ldr	r2, [r2, #4]
 8005132:	fbb3 f3f2 	udiv	r3, r3, r2
 8005136:	b29b      	uxth	r3, r3
 8005138:	61bb      	str	r3, [r7, #24]
        break;
 800513a:	e01e      	b.n	800517a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800513c:	f7fe fac0 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 8005140:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	005a      	lsls	r2, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	085b      	lsrs	r3, r3, #1
 800514c:	441a      	add	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	fbb2 f3f3 	udiv	r3, r2, r3
 8005156:	b29b      	uxth	r3, r3
 8005158:	61bb      	str	r3, [r7, #24]
        break;
 800515a:	e00e      	b.n	800517a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	085b      	lsrs	r3, r3, #1
 8005162:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	fbb2 f3f3 	udiv	r3, r2, r3
 800516e:	b29b      	uxth	r3, r3
 8005170:	61bb      	str	r3, [r7, #24]
        break;
 8005172:	e002      	b.n	800517a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	75fb      	strb	r3, [r7, #23]
        break;
 8005178:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	2b0f      	cmp	r3, #15
 800517e:	d916      	bls.n	80051ae <UART_SetConfig+0x452>
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005186:	d212      	bcs.n	80051ae <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	b29b      	uxth	r3, r3
 800518c:	f023 030f 	bic.w	r3, r3, #15
 8005190:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	085b      	lsrs	r3, r3, #1
 8005196:	b29b      	uxth	r3, r3
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	b29a      	uxth	r2, r3
 800519e:	897b      	ldrh	r3, [r7, #10]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	897a      	ldrh	r2, [r7, #10]
 80051aa:	60da      	str	r2, [r3, #12]
 80051ac:	e070      	b.n	8005290 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	75fb      	strb	r3, [r7, #23]
 80051b2:	e06d      	b.n	8005290 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80051b4:	7ffb      	ldrb	r3, [r7, #31]
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d859      	bhi.n	800526e <UART_SetConfig+0x512>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <UART_SetConfig+0x464>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	080051e5 	.word	0x080051e5
 80051c4:	08005203 	.word	0x08005203
 80051c8:	08005221 	.word	0x08005221
 80051cc:	0800526f 	.word	0x0800526f
 80051d0:	08005239 	.word	0x08005239
 80051d4:	0800526f 	.word	0x0800526f
 80051d8:	0800526f 	.word	0x0800526f
 80051dc:	0800526f 	.word	0x0800526f
 80051e0:	08005257 	.word	0x08005257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e4:	f7fe fb50 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 80051e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	085a      	lsrs	r2, r3, #1
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	441a      	add	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	61bb      	str	r3, [r7, #24]
        break;
 8005200:	e038      	b.n	8005274 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005202:	f7fe fb55 	bl	80038b0 <HAL_RCC_GetPCLK2Freq>
 8005206:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	085a      	lsrs	r2, r3, #1
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	441a      	add	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	fbb2 f3f3 	udiv	r3, r2, r3
 800521a:	b29b      	uxth	r3, r3
 800521c:	61bb      	str	r3, [r7, #24]
        break;
 800521e:	e029      	b.n	8005274 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	085a      	lsrs	r2, r3, #1
 8005226:	4b21      	ldr	r3, [pc, #132]	; (80052ac <UART_SetConfig+0x550>)
 8005228:	4413      	add	r3, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6852      	ldr	r2, [r2, #4]
 800522e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005232:	b29b      	uxth	r3, r3
 8005234:	61bb      	str	r3, [r7, #24]
        break;
 8005236:	e01d      	b.n	8005274 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005238:	f7fe fa42 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 800523c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	085a      	lsrs	r2, r3, #1
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	441a      	add	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005250:	b29b      	uxth	r3, r3
 8005252:	61bb      	str	r3, [r7, #24]
        break;
 8005254:	e00e      	b.n	8005274 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	fbb2 f3f3 	udiv	r3, r2, r3
 8005268:	b29b      	uxth	r3, r3
 800526a:	61bb      	str	r3, [r7, #24]
        break;
 800526c:	e002      	b.n	8005274 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	75fb      	strb	r3, [r7, #23]
        break;
 8005272:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b0f      	cmp	r3, #15
 8005278:	d908      	bls.n	800528c <UART_SetConfig+0x530>
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005280:	d204      	bcs.n	800528c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69ba      	ldr	r2, [r7, #24]
 8005288:	60da      	str	r2, [r3, #12]
 800528a:	e001      	b.n	8005290 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800529c:	7dfb      	ldrb	r3, [r7, #23]
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3720      	adds	r7, #32
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}
 80052a6:	bf00      	nop
 80052a8:	01e84800 	.word	0x01e84800
 80052ac:	00f42400 	.word	0x00f42400

080052b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00a      	beq.n	80052da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00a      	beq.n	80052fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	430a      	orrs	r2, r1
 80052fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	430a      	orrs	r2, r1
 800533e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	f003 0310 	and.w	r3, r3, #16
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00a      	beq.n	8005384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	430a      	orrs	r2, r1
 8005382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01a      	beq.n	80053c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ae:	d10a      	bne.n	80053c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	605a      	str	r2, [r3, #4]
  }
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005402:	f7fb ff97 	bl	8001334 <HAL_GetTick>
 8005406:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b08      	cmp	r3, #8
 8005414:	d10e      	bne.n	8005434 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005416:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f82a 	bl	800547e <UART_WaitOnFlagUntilTimeout>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e020      	b.n	8005476 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b04      	cmp	r3, #4
 8005440:	d10e      	bne.n	8005460 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005442:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 f814 	bl	800547e <UART_WaitOnFlagUntilTimeout>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d001      	beq.n	8005460 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e00a      	b.n	8005476 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2220      	movs	r2, #32
 800546a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b084      	sub	sp, #16
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	4613      	mov	r3, r2
 800548c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800548e:	e05d      	b.n	800554c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005496:	d059      	beq.n	800554c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005498:	f7fb ff4c 	bl	8001334 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d302      	bcc.n	80054ae <UART_WaitOnFlagUntilTimeout+0x30>
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d11b      	bne.n	80054e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f022 0201 	bic.w	r2, r2, #1
 80054cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2220      	movs	r2, #32
 80054d2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e042      	b.n	800556c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d02b      	beq.n	800554c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005502:	d123      	bne.n	800554c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800550c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800551c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0201 	bic.w	r2, r2, #1
 800552c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2220      	movs	r2, #32
 8005532:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2220      	movs	r2, #32
 8005538:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2220      	movs	r2, #32
 800553e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e00f      	b.n	800556c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	69da      	ldr	r2, [r3, #28]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	4013      	ands	r3, r2
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	429a      	cmp	r2, r3
 800555a:	bf0c      	ite	eq
 800555c:	2301      	moveq	r3, #1
 800555e:	2300      	movne	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	461a      	mov	r2, r3
 8005564:	79fb      	ldrb	r3, [r7, #7]
 8005566:	429a      	cmp	r2, r3
 8005568:	d092      	beq.n	8005490 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005574:	b084      	sub	sp, #16
 8005576:	b580      	push	{r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	f107 001c 	add.w	r0, r7, #28
 8005582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	2b01      	cmp	r3, #1
 800558a:	d120      	bne.n	80055ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005590:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	4b20      	ldr	r3, [pc, #128]	; (8005620 <USB_CoreInit+0xac>)
 800559e:	4013      	ands	r3, r2
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d105      	bne.n	80055c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa52 	bl	8005a6c <USB_CoreReset>
 80055c8:	4603      	mov	r3, r0
 80055ca:	73fb      	strb	r3, [r7, #15]
 80055cc:	e010      	b.n	80055f0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 fa46 	bl	8005a6c <USB_CoreReset>
 80055e0:	4603      	mov	r3, r0
 80055e2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d10b      	bne.n	800560e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f043 0206 	orr.w	r2, r3, #6
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f043 0220 	orr.w	r2, r3, #32
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800561a:	b004      	add	sp, #16
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	ffbdffbf 	.word	0xffbdffbf

08005624 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f023 0201 	bic.w	r2, r3, #1
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b082      	sub	sp, #8
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	460b      	mov	r3, r1
 8005650:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800565e:	78fb      	ldrb	r3, [r7, #3]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d106      	bne.n	8005672 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	60da      	str	r2, [r3, #12]
 8005670:	e00b      	b.n	800568a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d106      	bne.n	8005686 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	60da      	str	r2, [r3, #12]
 8005684:	e001      	b.n	800568a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e003      	b.n	8005692 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800568a:	2032      	movs	r0, #50	; 0x32
 800568c:	f7fb fe5e 	bl	800134c <HAL_Delay>

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800569c:	b084      	sub	sp, #16
 800569e:	b580      	push	{r7, lr}
 80056a0:	b086      	sub	sp, #24
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80056aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80056b6:	2300      	movs	r3, #0
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	e009      	b.n	80056d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	3340      	adds	r3, #64	; 0x40
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	2200      	movs	r2, #0
 80056c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	3301      	adds	r3, #1
 80056ce:	613b      	str	r3, [r7, #16]
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	2b0e      	cmp	r3, #14
 80056d4:	d9f2      	bls.n	80056bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80056d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d11c      	bne.n	8005716 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056ea:	f043 0302 	orr.w	r3, r3, #2
 80056ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	e005      	b.n	8005722 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005728:	461a      	mov	r2, r3
 800572a:	2300      	movs	r3, #0
 800572c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005734:	4619      	mov	r1, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800573c:	461a      	mov	r2, r3
 800573e:	680b      	ldr	r3, [r1, #0]
 8005740:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	2b01      	cmp	r3, #1
 8005746:	d10c      	bne.n	8005762 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d104      	bne.n	8005758 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800574e:	2100      	movs	r1, #0
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f000 f959 	bl	8005a08 <USB_SetDevSpeed>
 8005756:	e018      	b.n	800578a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005758:	2101      	movs	r1, #1
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f954 	bl	8005a08 <USB_SetDevSpeed>
 8005760:	e013      	b.n	800578a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005764:	2b03      	cmp	r3, #3
 8005766:	d10c      	bne.n	8005782 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d104      	bne.n	8005778 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800576e:	2100      	movs	r1, #0
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 f949 	bl	8005a08 <USB_SetDevSpeed>
 8005776:	e008      	b.n	800578a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005778:	2101      	movs	r1, #1
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f944 	bl	8005a08 <USB_SetDevSpeed>
 8005780:	e003      	b.n	800578a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005782:	2103      	movs	r1, #3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f93f 	bl	8005a08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800578a:	2110      	movs	r1, #16
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f8f3 	bl	8005978 <USB_FlushTxFifo>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f911 	bl	80059c4 <USB_FlushRxFifo>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b2:	461a      	mov	r2, r3
 80057b4:	2300      	movs	r3, #0
 80057b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057be:	461a      	mov	r2, r3
 80057c0:	2300      	movs	r3, #0
 80057c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ca:	461a      	mov	r2, r3
 80057cc:	2300      	movs	r3, #0
 80057ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057d0:	2300      	movs	r3, #0
 80057d2:	613b      	str	r3, [r7, #16]
 80057d4:	e043      	b.n	800585e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ec:	d118      	bne.n	8005820 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10a      	bne.n	800580a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	015a      	lsls	r2, r3, #5
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005800:	461a      	mov	r2, r3
 8005802:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	e013      	b.n	8005832 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005816:	461a      	mov	r2, r3
 8005818:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800581c:	6013      	str	r3, [r2, #0]
 800581e:	e008      	b.n	8005832 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4413      	add	r3, r2
 8005828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582c:	461a      	mov	r2, r3
 800582e:	2300      	movs	r3, #0
 8005830:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583e:	461a      	mov	r2, r3
 8005840:	2300      	movs	r3, #0
 8005842:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	015a      	lsls	r2, r3, #5
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005850:	461a      	mov	r2, r3
 8005852:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005856:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	3301      	adds	r3, #1
 800585c:	613b      	str	r3, [r7, #16]
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	429a      	cmp	r2, r3
 8005864:	d3b7      	bcc.n	80057d6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005866:	2300      	movs	r3, #0
 8005868:	613b      	str	r3, [r7, #16]
 800586a:	e043      	b.n	80058f4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800587e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005882:	d118      	bne.n	80058b6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10a      	bne.n	80058a0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005896:	461a      	mov	r2, r3
 8005898:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800589c:	6013      	str	r3, [r2, #0]
 800589e:	e013      	b.n	80058c8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ac:	461a      	mov	r2, r3
 80058ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058b2:	6013      	str	r3, [r2, #0]
 80058b4:	e008      	b.n	80058c8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c2:	461a      	mov	r2, r3
 80058c4:	2300      	movs	r3, #0
 80058c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d4:	461a      	mov	r2, r3
 80058d6:	2300      	movs	r3, #0
 80058d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e6:	461a      	mov	r2, r3
 80058e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	3301      	adds	r3, #1
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d3b7      	bcc.n	800586c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800590a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800590e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800591c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	2b00      	cmp	r3, #0
 8005922:	d105      	bne.n	8005930 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	f043 0210 	orr.w	r2, r3, #16
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699a      	ldr	r2, [r3, #24]
 8005934:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <USB_DevInit+0x2d4>)
 8005936:	4313      	orrs	r3, r2
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800593c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	f043 0208 	orr.w	r2, r3, #8
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800594e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005950:	2b01      	cmp	r3, #1
 8005952:	d105      	bne.n	8005960 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699a      	ldr	r2, [r3, #24]
 8005958:	4b06      	ldr	r3, [pc, #24]	; (8005974 <USB_DevInit+0x2d8>)
 800595a:	4313      	orrs	r3, r2
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005960:	7dfb      	ldrb	r3, [r7, #23]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800596c:	b004      	add	sp, #16
 800596e:	4770      	bx	lr
 8005970:	803c3800 	.word	0x803c3800
 8005974:	40000004 	.word	0x40000004

08005978 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	019b      	lsls	r3, r3, #6
 800598a:	f043 0220 	orr.w	r2, r3, #32
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	3301      	adds	r3, #1
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4a09      	ldr	r2, [pc, #36]	; (80059c0 <USB_FlushTxFifo+0x48>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d901      	bls.n	80059a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e006      	b.n	80059b2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f003 0320 	and.w	r3, r3, #32
 80059ac:	2b20      	cmp	r3, #32
 80059ae:	d0f0      	beq.n	8005992 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	00030d40 	.word	0x00030d40

080059c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2210      	movs	r2, #16
 80059d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3301      	adds	r3, #1
 80059da:	60fb      	str	r3, [r7, #12]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4a09      	ldr	r2, [pc, #36]	; (8005a04 <USB_FlushRxFifo+0x40>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d901      	bls.n	80059e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e006      	b.n	80059f6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b10      	cmp	r3, #16
 80059f2:	d0f0      	beq.n	80059d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	00030d40 	.word	0x00030d40

08005a08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	78fb      	ldrb	r3, [r7, #3]
 8005a22:	68f9      	ldr	r1, [r7, #12]
 8005a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3714      	adds	r7, #20
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr

08005a3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a54:	f043 0302 	orr.w	r3, r3, #2
 8005a58:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005a5a:	2003      	movs	r0, #3
 8005a5c:	f7fb fc76 	bl	800134c <HAL_Delay>

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
	...

08005a6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	4a13      	ldr	r2, [pc, #76]	; (8005ad0 <USB_CoreReset+0x64>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d901      	bls.n	8005a8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e01b      	b.n	8005ac2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	daf2      	bge.n	8005a78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f043 0201 	orr.w	r2, r3, #1
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	60fb      	str	r3, [r7, #12]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <USB_CoreReset+0x64>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d901      	bls.n	8005ab4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e006      	b.n	8005ac2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d0f0      	beq.n	8005aa2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	00030d40 	.word	0x00030d40

08005ad4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005ad4:	b5b0      	push	{r4, r5, r7, lr}
 8005ad6:	b08e      	sub	sp, #56	; 0x38
 8005ad8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005ada:	4ba0      	ldr	r3, [pc, #640]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005adc:	22c0      	movs	r2, #192	; 0xc0
 8005ade:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005ae0:	4b9e      	ldr	r3, [pc, #632]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005ae2:	22a8      	movs	r2, #168	; 0xa8
 8005ae4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8005ae6:	4b9d      	ldr	r3, [pc, #628]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005ae8:	2201      	movs	r2, #1
 8005aea:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 70;
 8005aec:	4b9b      	ldr	r3, [pc, #620]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005aee:	2246      	movs	r2, #70	; 0x46
 8005af0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005af2:	4b9b      	ldr	r3, [pc, #620]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005af4:	22ff      	movs	r2, #255	; 0xff
 8005af6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005af8:	4b99      	ldr	r3, [pc, #612]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005afa:	22ff      	movs	r2, #255	; 0xff
 8005afc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005afe:	4b98      	ldr	r3, [pc, #608]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005b00:	22ff      	movs	r2, #255	; 0xff
 8005b02:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005b04:	4b96      	ldr	r3, [pc, #600]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8005b0a:	4b96      	ldr	r3, [pc, #600]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005b10:	4b94      	ldr	r3, [pc, #592]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005b12:	2200      	movs	r2, #0
 8005b14:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005b16:	4b93      	ldr	r3, [pc, #588]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8005b1c:	4b91      	ldr	r3, [pc, #580]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005b1e:	2200      	movs	r2, #0
 8005b20:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005b22:	2100      	movs	r1, #0
 8005b24:	2000      	movs	r0, #0
 8005b26:	f003 fdc5 	bl	80096b4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005b2a:	4b8c      	ldr	r3, [pc, #560]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	061a      	lsls	r2, r3, #24
 8005b30:	4b8a      	ldr	r3, [pc, #552]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005b32:	785b      	ldrb	r3, [r3, #1]
 8005b34:	041b      	lsls	r3, r3, #16
 8005b36:	431a      	orrs	r2, r3
 8005b38:	4b88      	ldr	r3, [pc, #544]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005b3a:	789b      	ldrb	r3, [r3, #2]
 8005b3c:	021b      	lsls	r3, r3, #8
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	4a86      	ldr	r2, [pc, #536]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005b42:	78d2      	ldrb	r2, [r2, #3]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	061a      	lsls	r2, r3, #24
 8005b48:	4b84      	ldr	r3, [pc, #528]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	0619      	lsls	r1, r3, #24
 8005b4e:	4b83      	ldr	r3, [pc, #524]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005b50:	785b      	ldrb	r3, [r3, #1]
 8005b52:	041b      	lsls	r3, r3, #16
 8005b54:	4319      	orrs	r1, r3
 8005b56:	4b81      	ldr	r3, [pc, #516]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005b58:	789b      	ldrb	r3, [r3, #2]
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	430b      	orrs	r3, r1
 8005b5e:	497f      	ldr	r1, [pc, #508]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005b60:	78c9      	ldrb	r1, [r1, #3]
 8005b62:	430b      	orrs	r3, r1
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	4b7b      	ldr	r3, [pc, #492]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	0619      	lsls	r1, r3, #24
 8005b72:	4b7a      	ldr	r3, [pc, #488]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005b74:	785b      	ldrb	r3, [r3, #1]
 8005b76:	041b      	lsls	r3, r3, #16
 8005b78:	4319      	orrs	r1, r3
 8005b7a:	4b78      	ldr	r3, [pc, #480]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005b7c:	789b      	ldrb	r3, [r3, #2]
 8005b7e:	021b      	lsls	r3, r3, #8
 8005b80:	430b      	orrs	r3, r1
 8005b82:	4976      	ldr	r1, [pc, #472]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005b84:	78c9      	ldrb	r1, [r1, #3]
 8005b86:	430b      	orrs	r3, r1
 8005b88:	0a1b      	lsrs	r3, r3, #8
 8005b8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	4b72      	ldr	r3, [pc, #456]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	0619      	lsls	r1, r3, #24
 8005b96:	4b71      	ldr	r3, [pc, #452]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005b98:	785b      	ldrb	r3, [r3, #1]
 8005b9a:	041b      	lsls	r3, r3, #16
 8005b9c:	4319      	orrs	r1, r3
 8005b9e:	4b6f      	ldr	r3, [pc, #444]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005ba0:	789b      	ldrb	r3, [r3, #2]
 8005ba2:	021b      	lsls	r3, r3, #8
 8005ba4:	430b      	orrs	r3, r1
 8005ba6:	496d      	ldr	r1, [pc, #436]	; (8005d5c <MX_LWIP_Init+0x288>)
 8005ba8:	78c9      	ldrb	r1, [r1, #3]
 8005baa:	430b      	orrs	r3, r1
 8005bac:	0e1b      	lsrs	r3, r3, #24
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	4a6d      	ldr	r2, [pc, #436]	; (8005d68 <MX_LWIP_Init+0x294>)
 8005bb2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005bb4:	4b6a      	ldr	r3, [pc, #424]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	061a      	lsls	r2, r3, #24
 8005bba:	4b69      	ldr	r3, [pc, #420]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005bbc:	785b      	ldrb	r3, [r3, #1]
 8005bbe:	041b      	lsls	r3, r3, #16
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	4b67      	ldr	r3, [pc, #412]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005bc4:	789b      	ldrb	r3, [r3, #2]
 8005bc6:	021b      	lsls	r3, r3, #8
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	4a65      	ldr	r2, [pc, #404]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005bcc:	78d2      	ldrb	r2, [r2, #3]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	061a      	lsls	r2, r3, #24
 8005bd2:	4b63      	ldr	r3, [pc, #396]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	0619      	lsls	r1, r3, #24
 8005bd8:	4b61      	ldr	r3, [pc, #388]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005bda:	785b      	ldrb	r3, [r3, #1]
 8005bdc:	041b      	lsls	r3, r3, #16
 8005bde:	4319      	orrs	r1, r3
 8005be0:	4b5f      	ldr	r3, [pc, #380]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005be2:	789b      	ldrb	r3, [r3, #2]
 8005be4:	021b      	lsls	r3, r3, #8
 8005be6:	430b      	orrs	r3, r1
 8005be8:	495d      	ldr	r1, [pc, #372]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005bea:	78c9      	ldrb	r1, [r1, #3]
 8005bec:	430b      	orrs	r3, r1
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	4b5a      	ldr	r3, [pc, #360]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	0619      	lsls	r1, r3, #24
 8005bfc:	4b58      	ldr	r3, [pc, #352]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005bfe:	785b      	ldrb	r3, [r3, #1]
 8005c00:	041b      	lsls	r3, r3, #16
 8005c02:	4319      	orrs	r1, r3
 8005c04:	4b56      	ldr	r3, [pc, #344]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005c06:	789b      	ldrb	r3, [r3, #2]
 8005c08:	021b      	lsls	r3, r3, #8
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	4954      	ldr	r1, [pc, #336]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005c0e:	78c9      	ldrb	r1, [r1, #3]
 8005c10:	430b      	orrs	r3, r1
 8005c12:	0a1b      	lsrs	r3, r3, #8
 8005c14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	4b51      	ldr	r3, [pc, #324]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	0619      	lsls	r1, r3, #24
 8005c20:	4b4f      	ldr	r3, [pc, #316]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005c22:	785b      	ldrb	r3, [r3, #1]
 8005c24:	041b      	lsls	r3, r3, #16
 8005c26:	4319      	orrs	r1, r3
 8005c28:	4b4d      	ldr	r3, [pc, #308]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005c2a:	789b      	ldrb	r3, [r3, #2]
 8005c2c:	021b      	lsls	r3, r3, #8
 8005c2e:	430b      	orrs	r3, r1
 8005c30:	494b      	ldr	r1, [pc, #300]	; (8005d60 <MX_LWIP_Init+0x28c>)
 8005c32:	78c9      	ldrb	r1, [r1, #3]
 8005c34:	430b      	orrs	r3, r1
 8005c36:	0e1b      	lsrs	r3, r3, #24
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	4a4c      	ldr	r2, [pc, #304]	; (8005d6c <MX_LWIP_Init+0x298>)
 8005c3c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005c3e:	4b49      	ldr	r3, [pc, #292]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	061a      	lsls	r2, r3, #24
 8005c44:	4b47      	ldr	r3, [pc, #284]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005c46:	785b      	ldrb	r3, [r3, #1]
 8005c48:	041b      	lsls	r3, r3, #16
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	4b45      	ldr	r3, [pc, #276]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005c4e:	789b      	ldrb	r3, [r3, #2]
 8005c50:	021b      	lsls	r3, r3, #8
 8005c52:	4313      	orrs	r3, r2
 8005c54:	4a43      	ldr	r2, [pc, #268]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005c56:	78d2      	ldrb	r2, [r2, #3]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	061a      	lsls	r2, r3, #24
 8005c5c:	4b41      	ldr	r3, [pc, #260]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	0619      	lsls	r1, r3, #24
 8005c62:	4b40      	ldr	r3, [pc, #256]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005c64:	785b      	ldrb	r3, [r3, #1]
 8005c66:	041b      	lsls	r3, r3, #16
 8005c68:	4319      	orrs	r1, r3
 8005c6a:	4b3e      	ldr	r3, [pc, #248]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005c6c:	789b      	ldrb	r3, [r3, #2]
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	430b      	orrs	r3, r1
 8005c72:	493c      	ldr	r1, [pc, #240]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005c74:	78c9      	ldrb	r1, [r1, #3]
 8005c76:	430b      	orrs	r3, r1
 8005c78:	021b      	lsls	r3, r3, #8
 8005c7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	4b38      	ldr	r3, [pc, #224]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	0619      	lsls	r1, r3, #24
 8005c86:	4b37      	ldr	r3, [pc, #220]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005c88:	785b      	ldrb	r3, [r3, #1]
 8005c8a:	041b      	lsls	r3, r3, #16
 8005c8c:	4319      	orrs	r1, r3
 8005c8e:	4b35      	ldr	r3, [pc, #212]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005c90:	789b      	ldrb	r3, [r3, #2]
 8005c92:	021b      	lsls	r3, r3, #8
 8005c94:	430b      	orrs	r3, r1
 8005c96:	4933      	ldr	r1, [pc, #204]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005c98:	78c9      	ldrb	r1, [r1, #3]
 8005c9a:	430b      	orrs	r3, r1
 8005c9c:	0a1b      	lsrs	r3, r3, #8
 8005c9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	4b2f      	ldr	r3, [pc, #188]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	0619      	lsls	r1, r3, #24
 8005caa:	4b2e      	ldr	r3, [pc, #184]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005cac:	785b      	ldrb	r3, [r3, #1]
 8005cae:	041b      	lsls	r3, r3, #16
 8005cb0:	4319      	orrs	r1, r3
 8005cb2:	4b2c      	ldr	r3, [pc, #176]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005cb4:	789b      	ldrb	r3, [r3, #2]
 8005cb6:	021b      	lsls	r3, r3, #8
 8005cb8:	430b      	orrs	r3, r1
 8005cba:	492a      	ldr	r1, [pc, #168]	; (8005d64 <MX_LWIP_Init+0x290>)
 8005cbc:	78c9      	ldrb	r1, [r1, #3]
 8005cbe:	430b      	orrs	r3, r1
 8005cc0:	0e1b      	lsrs	r3, r3, #24
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	4a2a      	ldr	r2, [pc, #168]	; (8005d70 <MX_LWIP_Init+0x29c>)
 8005cc6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005cc8:	4b2a      	ldr	r3, [pc, #168]	; (8005d74 <MX_LWIP_Init+0x2a0>)
 8005cca:	9302      	str	r3, [sp, #8]
 8005ccc:	4b2a      	ldr	r3, [pc, #168]	; (8005d78 <MX_LWIP_Init+0x2a4>)
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	4b26      	ldr	r3, [pc, #152]	; (8005d70 <MX_LWIP_Init+0x29c>)
 8005cd6:	4a25      	ldr	r2, [pc, #148]	; (8005d6c <MX_LWIP_Init+0x298>)
 8005cd8:	4923      	ldr	r1, [pc, #140]	; (8005d68 <MX_LWIP_Init+0x294>)
 8005cda:	4828      	ldr	r0, [pc, #160]	; (8005d7c <MX_LWIP_Init+0x2a8>)
 8005cdc:	f005 f8be 	bl	800ae5c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005ce0:	4826      	ldr	r0, [pc, #152]	; (8005d7c <MX_LWIP_Init+0x2a8>)
 8005ce2:	f005 fa6d 	bl	800b1c0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005ce6:	4b25      	ldr	r3, [pc, #148]	; (8005d7c <MX_LWIP_Init+0x2a8>)
 8005ce8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005cec:	089b      	lsrs	r3, r3, #2
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005cf8:	4820      	ldr	r0, [pc, #128]	; (8005d7c <MX_LWIP_Init+0x2a8>)
 8005cfa:	f005 fa71 	bl	800b1e0 <netif_set_up>
 8005cfe:	e002      	b.n	8005d06 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005d00:	481e      	ldr	r0, [pc, #120]	; (8005d7c <MX_LWIP_Init+0x2a8>)
 8005d02:	f005 fad9 	bl	800b2b8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005d06:	491e      	ldr	r1, [pc, #120]	; (8005d80 <MX_LWIP_Init+0x2ac>)
 8005d08:	481c      	ldr	r0, [pc, #112]	; (8005d7c <MX_LWIP_Init+0x2a8>)
 8005d0a:	f005 fb6b 	bl	800b3e4 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	623b      	str	r3, [r7, #32]
 8005d12:	2300      	movs	r3, #0
 8005d14:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8005d16:	f107 0320 	add.w	r3, r7, #32
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 fd8f 	bl	8006840 <osSemaphoreCreate>
 8005d22:	4602      	mov	r2, r0
 8005d24:	4b17      	ldr	r3, [pc, #92]	; (8005d84 <MX_LWIP_Init+0x2b0>)
 8005d26:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 8005d28:	4b17      	ldr	r3, [pc, #92]	; (8005d88 <MX_LWIP_Init+0x2b4>)
 8005d2a:	4a14      	ldr	r2, [pc, #80]	; (8005d7c <MX_LWIP_Init+0x2a8>)
 8005d2c:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8005d2e:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <MX_LWIP_Init+0x2b0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a15      	ldr	r2, [pc, #84]	; (8005d88 <MX_LWIP_Init+0x2b4>)
 8005d34:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8005d36:	4b15      	ldr	r3, [pc, #84]	; (8005d8c <MX_LWIP_Init+0x2b8>)
 8005d38:	1d3c      	adds	r4, r7, #4
 8005d3a:	461d      	mov	r5, r3
 8005d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005d44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8005d48:	1d3b      	adds	r3, r7, #4
 8005d4a:	490f      	ldr	r1, [pc, #60]	; (8005d88 <MX_LWIP_Init+0x2b4>)
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 fc7a 	bl	8006646 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005d52:	bf00      	nop
 8005d54:	3728      	adds	r7, #40	; 0x28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bdb0      	pop	{r4, r5, r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20004c30 	.word	0x20004c30
 8005d60:	20004c2c 	.word	0x20004c2c
 8005d64:	20004bf0 	.word	0x20004bf0
 8005d68:	20004c28 	.word	0x20004c28
 8005d6c:	20004c34 	.word	0x20004c34
 8005d70:	20004c38 	.word	0x20004c38
 8005d74:	080095f1 	.word	0x080095f1
 8005d78:	080063d5 	.word	0x080063d5
 8005d7c:	20004bf4 	.word	0x20004bf4
 8005d80:	080064b9 	.word	0x080064b9
 8005d84:	200002fc 	.word	0x200002fc
 8005d88:	20004be8 	.word	0x20004be8
 8005d8c:	08015e8c 	.word	0x08015e8c

08005d90 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b08e      	sub	sp, #56	; 0x38
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	605a      	str	r2, [r3, #4]
 8005da2:	609a      	str	r2, [r3, #8]
 8005da4:	60da      	str	r2, [r3, #12]
 8005da6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a52      	ldr	r2, [pc, #328]	; (8005ef8 <HAL_ETH_MspInit+0x168>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	f040 809e 	bne.w	8005ef0 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005db4:	4b51      	ldr	r3, [pc, #324]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	4a50      	ldr	r2, [pc, #320]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005dba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8005dc0:	4b4e      	ldr	r3, [pc, #312]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dc8:	623b      	str	r3, [r7, #32]
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	4b4b      	ldr	r3, [pc, #300]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	4a4a      	ldr	r2, [pc, #296]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005dd2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8005dd8:	4b48      	ldr	r3, [pc, #288]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ddc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005de0:	61fb      	str	r3, [r7, #28]
 8005de2:	69fb      	ldr	r3, [r7, #28]
 8005de4:	4b45      	ldr	r3, [pc, #276]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	4a44      	ldr	r2, [pc, #272]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005dea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005dee:	6313      	str	r3, [r2, #48]	; 0x30
 8005df0:	4b42      	ldr	r3, [pc, #264]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005df8:	61bb      	str	r3, [r7, #24]
 8005dfa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005dfc:	4b3f      	ldr	r3, [pc, #252]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e00:	4a3e      	ldr	r2, [pc, #248]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005e02:	f043 0304 	orr.w	r3, r3, #4
 8005e06:	6313      	str	r3, [r2, #48]	; 0x30
 8005e08:	4b3c      	ldr	r3, [pc, #240]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e14:	4b39      	ldr	r3, [pc, #228]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	4a38      	ldr	r2, [pc, #224]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005e1a:	f043 0301 	orr.w	r3, r3, #1
 8005e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8005e20:	4b36      	ldr	r3, [pc, #216]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e24:	f003 0301 	and.w	r3, r3, #1
 8005e28:	613b      	str	r3, [r7, #16]
 8005e2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e2c:	4b33      	ldr	r3, [pc, #204]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e30:	4a32      	ldr	r2, [pc, #200]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005e32:	f043 0302 	orr.w	r3, r3, #2
 8005e36:	6313      	str	r3, [r2, #48]	; 0x30
 8005e38:	4b30      	ldr	r3, [pc, #192]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	f003 0302 	and.w	r3, r3, #2
 8005e40:	60fb      	str	r3, [r7, #12]
 8005e42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005e44:	4b2d      	ldr	r3, [pc, #180]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e48:	4a2c      	ldr	r2, [pc, #176]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8005e50:	4b2a      	ldr	r3, [pc, #168]	; (8005efc <HAL_ETH_MspInit+0x16c>)
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e58:	60bb      	str	r3, [r7, #8]
 8005e5a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005e5c:	2332      	movs	r3, #50	; 0x32
 8005e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e60:	2302      	movs	r3, #2
 8005e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e64:	2300      	movs	r3, #0
 8005e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e68:	2303      	movs	r3, #3
 8005e6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e6c:	230b      	movs	r3, #11
 8005e6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e74:	4619      	mov	r1, r3
 8005e76:	4822      	ldr	r0, [pc, #136]	; (8005f00 <HAL_ETH_MspInit+0x170>)
 8005e78:	f7fc fd02 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005e7c:	2386      	movs	r3, #134	; 0x86
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e80:	2302      	movs	r3, #2
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e8c:	230b      	movs	r3, #11
 8005e8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e94:	4619      	mov	r1, r3
 8005e96:	481b      	ldr	r0, [pc, #108]	; (8005f04 <HAL_ETH_MspInit+0x174>)
 8005e98:	f7fc fcf2 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005e9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005eae:	230b      	movs	r3, #11
 8005eb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8005eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4813      	ldr	r0, [pc, #76]	; (8005f08 <HAL_ETH_MspInit+0x178>)
 8005eba:	f7fc fce1 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8005ebe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005ed0:	230b      	movs	r3, #11
 8005ed2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ed8:	4619      	mov	r1, r3
 8005eda:	480c      	ldr	r0, [pc, #48]	; (8005f0c <HAL_ETH_MspInit+0x17c>)
 8005edc:	f7fc fcd0 	bl	8002880 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	2105      	movs	r1, #5
 8005ee4:	203d      	movs	r0, #61	; 0x3d
 8005ee6:	f7fb fb0b 	bl	8001500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005eea:	203d      	movs	r0, #61	; 0x3d
 8005eec:	f7fb fb24 	bl	8001538 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005ef0:	bf00      	nop
 8005ef2:	3738      	adds	r7, #56	; 0x38
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	40028000 	.word	0x40028000
 8005efc:	40023800 	.word	0x40023800
 8005f00:	40020800 	.word	0x40020800
 8005f04:	40020000 	.word	0x40020000
 8005f08:	40020400 	.word	0x40020400
 8005f0c:	40021800 	.word	0x40021800

08005f10 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8005f18:	4b04      	ldr	r3, [pc, #16]	; (8005f2c <HAL_ETH_RxCpltCallback+0x1c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fd11 	bl	8006944 <osSemaphoreRelease>
}
 8005f22:	bf00      	nop
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000300 	.word	0x20000300

08005f30 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005f30:	b5b0      	push	{r4, r5, r7, lr}
 8005f32:	b090      	sub	sp, #64	; 0x40
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005f3c:	4b5c      	ldr	r3, [pc, #368]	; (80060b0 <low_level_init+0x180>)
 8005f3e:	4a5d      	ldr	r2, [pc, #372]	; (80060b4 <low_level_init+0x184>)
 8005f40:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8005f42:	4b5b      	ldr	r3, [pc, #364]	; (80060b0 <low_level_init+0x180>)
 8005f44:	2201      	movs	r2, #1
 8005f46:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8005f48:	4b59      	ldr	r3, [pc, #356]	; (80060b0 <low_level_init+0x180>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8005f54:	2380      	movs	r3, #128	; 0x80
 8005f56:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8005f5a:	23e1      	movs	r3, #225	; 0xe1
 8005f5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8005f60:	2300      	movs	r3, #0
 8005f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8005f66:	2300      	movs	r3, #0
 8005f68:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8005f72:	4a4f      	ldr	r2, [pc, #316]	; (80060b0 <low_level_init+0x180>)
 8005f74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005f78:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8005f7a:	4b4d      	ldr	r3, [pc, #308]	; (80060b0 <low_level_init+0x180>)
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005f80:	4b4b      	ldr	r3, [pc, #300]	; (80060b0 <low_level_init+0x180>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8005f86:	4b4a      	ldr	r3, [pc, #296]	; (80060b0 <low_level_init+0x180>)
 8005f88:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005f8c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005f8e:	4848      	ldr	r0, [pc, #288]	; (80060b0 <low_level_init+0x180>)
 8005f90:	f7fb fae0 	bl	8001554 <HAL_ETH_Init>
 8005f94:	4603      	mov	r3, r0
 8005f96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8005f9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d108      	bne.n	8005fb4 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005fa8:	f043 0304 	orr.w	r3, r3, #4
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8005fb4:	2304      	movs	r3, #4
 8005fb6:	4a40      	ldr	r2, [pc, #256]	; (80060b8 <low_level_init+0x188>)
 8005fb8:	4940      	ldr	r1, [pc, #256]	; (80060bc <low_level_init+0x18c>)
 8005fba:	483d      	ldr	r0, [pc, #244]	; (80060b0 <low_level_init+0x180>)
 8005fbc:	f7fb fc66 	bl	800188c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8005fc0:	2304      	movs	r3, #4
 8005fc2:	4a3f      	ldr	r2, [pc, #252]	; (80060c0 <low_level_init+0x190>)
 8005fc4:	493f      	ldr	r1, [pc, #252]	; (80060c4 <low_level_init+0x194>)
 8005fc6:	483a      	ldr	r0, [pc, #232]	; (80060b0 <low_level_init+0x180>)
 8005fc8:	f7fb fcc9 	bl	800195e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2206      	movs	r2, #6
 8005fd0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005fd4:	4b36      	ldr	r3, [pc, #216]	; (80060b0 <low_level_init+0x180>)
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	781a      	ldrb	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005fe0:	4b33      	ldr	r3, [pc, #204]	; (80060b0 <low_level_init+0x180>)
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	785a      	ldrb	r2, [r3, #1]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005fec:	4b30      	ldr	r3, [pc, #192]	; (80060b0 <low_level_init+0x180>)
 8005fee:	695b      	ldr	r3, [r3, #20]
 8005ff0:	789a      	ldrb	r2, [r3, #2]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005ff8:	4b2d      	ldr	r3, [pc, #180]	; (80060b0 <low_level_init+0x180>)
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	78da      	ldrb	r2, [r3, #3]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006004:	4b2a      	ldr	r3, [pc, #168]	; (80060b0 <low_level_init+0x180>)
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	791a      	ldrb	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006010:	4b27      	ldr	r3, [pc, #156]	; (80060b0 <low_level_init+0x180>)
 8006012:	695b      	ldr	r3, [r3, #20]
 8006014:	795a      	ldrb	r2, [r3, #5]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006022:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800602a:	f043 030a 	orr.w	r3, r3, #10
 800602e:	b2da      	uxtb	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8006036:	2300      	movs	r3, #0
 8006038:	62bb      	str	r3, [r7, #40]	; 0x28
 800603a:	2300      	movs	r3, #0
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800603e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006042:	2101      	movs	r1, #1
 8006044:	4618      	mov	r0, r3
 8006046:	f000 fbfb 	bl	8006840 <osSemaphoreCreate>
 800604a:	4602      	mov	r2, r0
 800604c:	4b1e      	ldr	r3, [pc, #120]	; (80060c8 <low_level_init+0x198>)
 800604e:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006050:	4b1e      	ldr	r3, [pc, #120]	; (80060cc <low_level_init+0x19c>)
 8006052:	f107 040c 	add.w	r4, r7, #12
 8006056:	461d      	mov	r5, r3
 8006058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800605a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800605c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006060:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006064:	f107 030c 	add.w	r3, r7, #12
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	4618      	mov	r0, r3
 800606c:	f000 faeb 	bl	8006646 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006070:	480f      	ldr	r0, [pc, #60]	; (80060b0 <low_level_init+0x180>)
 8006072:	f7fb ff9c 	bl	8001fae <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006076:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800607a:	461a      	mov	r2, r3
 800607c:	211d      	movs	r1, #29
 800607e:	480c      	ldr	r0, [pc, #48]	; (80060b0 <low_level_init+0x180>)
 8006080:	f7fb fec7 	bl	8001e12 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006086:	f043 030b 	orr.w	r3, r3, #11
 800608a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800608c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608e:	461a      	mov	r2, r3
 8006090:	211d      	movs	r1, #29
 8006092:	4807      	ldr	r0, [pc, #28]	; (80060b0 <low_level_init+0x180>)
 8006094:	f7fb ff25 	bl	8001ee2 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006098:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800609c:	461a      	mov	r2, r3
 800609e:	211d      	movs	r1, #29
 80060a0:	4803      	ldr	r0, [pc, #12]	; (80060b0 <low_level_init+0x180>)
 80060a2:	f7fb feb6 	bl	8001e12 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80060a6:	bf00      	nop
 80060a8:	3740      	adds	r7, #64	; 0x40
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bdb0      	pop	{r4, r5, r7, pc}
 80060ae:	bf00      	nop
 80060b0:	2000650c 	.word	0x2000650c
 80060b4:	40028000 	.word	0x40028000
 80060b8:	20006554 	.word	0x20006554
 80060bc:	20004c3c 	.word	0x20004c3c
 80060c0:	20004cbc 	.word	0x20004cbc
 80060c4:	2000648c 	.word	0x2000648c
 80060c8:	20000300 	.word	0x20000300
 80060cc:	08015eb0 	.word	0x08015eb0

080060d0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08a      	sub	sp, #40	; 0x28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80060da:	4b4b      	ldr	r3, [pc, #300]	; (8006208 <low_level_output+0x138>)
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80060f2:	4b45      	ldr	r3, [pc, #276]	; (8006208 <low_level_output+0x138>)
 80060f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80060f8:	2300      	movs	r3, #0
 80060fa:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	623b      	str	r3, [r7, #32]
 8006100:	e05a      	b.n	80061b8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	da03      	bge.n	8006112 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800610a:	23f8      	movs	r3, #248	; 0xf8
 800610c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006110:	e05c      	b.n	80061cc <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	895b      	ldrh	r3, [r3, #10]
 8006116:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006118:	2300      	movs	r3, #0
 800611a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800611c:	e02f      	b.n	800617e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800611e:	69fa      	ldr	r2, [r7, #28]
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	18d0      	adds	r0, r2, r3
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	18d1      	adds	r1, r2, r3
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006132:	1a9b      	subs	r3, r3, r2
 8006134:	461a      	mov	r2, r3
 8006136:	f00e ff32 	bl	8014f9e <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	da03      	bge.n	8006150 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006148:	23f8      	movs	r3, #248	; 0xf8
 800614a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800614e:	e03d      	b.n	80061cc <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	4413      	add	r3, r2
 800615c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006160:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006162:	68ba      	ldr	r2, [r7, #8]
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800616c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	1ad3      	subs	r3, r2, r3
 8006174:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006178:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	4413      	add	r3, r2
 8006184:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006188:	4293      	cmp	r3, r2
 800618a:	d8c8      	bhi.n	800611e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800618c:	69fa      	ldr	r2, [r7, #28]
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	18d0      	adds	r0, r2, r3
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	4413      	add	r3, r2
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4619      	mov	r1, r3
 800619e:	f00e fefe 	bl	8014f9e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4413      	add	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	4413      	add	r3, r2
 80061b0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80061b2:	6a3b      	ldr	r3, [r7, #32]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	623b      	str	r3, [r7, #32]
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1a1      	bne.n	8006102 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80061be:	6979      	ldr	r1, [r7, #20]
 80061c0:	4811      	ldr	r0, [pc, #68]	; (8006208 <low_level_output+0x138>)
 80061c2:	f7fb fc39 	bl	8001a38 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80061cc:	4b0e      	ldr	r3, [pc, #56]	; (8006208 <low_level_output+0x138>)
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	f241 0314 	movw	r3, #4116	; 0x1014
 80061d4:	4413      	add	r3, r2
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00d      	beq.n	80061fc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80061e0:	4b09      	ldr	r3, [pc, #36]	; (8006208 <low_level_output+0x138>)
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	f241 0314 	movw	r3, #4116	; 0x1014
 80061e8:	4413      	add	r3, r2
 80061ea:	2220      	movs	r2, #32
 80061ec:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80061ee:	4b06      	ldr	r3, [pc, #24]	; (8006208 <low_level_output+0x138>)
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	f241 0304 	movw	r3, #4100	; 0x1004
 80061f6:	4413      	add	r3, r2
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80061fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006200:	4618      	mov	r0, r3
 8006202:	3728      	adds	r7, #40	; 0x28
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	2000650c 	.word	0x2000650c

0800620c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08c      	sub	sp, #48	; 0x30
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006214:	2300      	movs	r3, #0
 8006216:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8006218:	2300      	movs	r3, #0
 800621a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800621c:	2300      	movs	r3, #0
 800621e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006220:	2300      	movs	r3, #0
 8006222:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006224:	2300      	movs	r3, #0
 8006226:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006228:	2300      	movs	r3, #0
 800622a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800622c:	2300      	movs	r3, #0
 800622e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8006230:	484f      	ldr	r0, [pc, #316]	; (8006370 <low_level_input+0x164>)
 8006232:	f7fb fceb 	bl	8001c0c <HAL_ETH_GetReceivedFrame_IT>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d001      	beq.n	8006240 <low_level_input+0x34>

    return NULL;
 800623c:	2300      	movs	r3, #0
 800623e:	e092      	b.n	8006366 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006240:	4b4b      	ldr	r3, [pc, #300]	; (8006370 <low_level_input+0x164>)
 8006242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006244:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006246:	4b4a      	ldr	r3, [pc, #296]	; (8006370 <low_level_input+0x164>)
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800624c:	89fb      	ldrh	r3, [r7, #14]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006252:	89fb      	ldrh	r3, [r7, #14]
 8006254:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8006258:	4619      	mov	r1, r3
 800625a:	2000      	movs	r0, #0
 800625c:	f005 f98c 	bl	800b578 <pbuf_alloc>
 8006260:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8006262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006264:	2b00      	cmp	r3, #0
 8006266:	d04b      	beq.n	8006300 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006268:	4b41      	ldr	r3, [pc, #260]	; (8006370 <low_level_input+0x164>)
 800626a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800626e:	2300      	movs	r3, #0
 8006270:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006274:	62bb      	str	r3, [r7, #40]	; 0x28
 8006276:	e040      	b.n	80062fa <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	895b      	ldrh	r3, [r3, #10]
 800627c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006282:	e021      	b.n	80062c8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	685a      	ldr	r2, [r3, #4]
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	18d0      	adds	r0, r2, r3
 800628c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	18d1      	adds	r1, r2, r3
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006298:	1a9b      	subs	r3, r3, r2
 800629a:	461a      	mov	r2, r3
 800629c:	f00e fe7f 	bl	8014f9e <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80062ac:	69fa      	ldr	r2, [r7, #28]
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	4413      	add	r3, r2
 80062b2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80062b6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80062b8:	69ba      	ldr	r2, [r7, #24]
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80062c2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80062c4:	2300      	movs	r3, #0
 80062c6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	4413      	add	r3, r2
 80062ce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d8d6      	bhi.n	8006284 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80062d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	18d0      	adds	r0, r2, r3
 80062de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	4413      	add	r3, r2
 80062e4:	697a      	ldr	r2, [r7, #20]
 80062e6:	4619      	mov	r1, r3
 80062e8:	f00e fe59 	bl	8014f9e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80062ec:	69fa      	ldr	r2, [r7, #28]
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	4413      	add	r3, r2
 80062f2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80062fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d1bb      	bne.n	8006278 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006300:	4b1b      	ldr	r3, [pc, #108]	; (8006370 <low_level_input+0x164>)
 8006302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006304:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006306:	2300      	movs	r3, #0
 8006308:	613b      	str	r3, [r7, #16]
 800630a:	e00b      	b.n	8006324 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	3301      	adds	r3, #1
 8006322:	613b      	str	r3, [r7, #16]
 8006324:	4b12      	ldr	r3, [pc, #72]	; (8006370 <low_level_input+0x164>)
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	429a      	cmp	r2, r3
 800632c:	d3ee      	bcc.n	800630c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800632e:	4b10      	ldr	r3, [pc, #64]	; (8006370 <low_level_input+0x164>)
 8006330:	2200      	movs	r2, #0
 8006332:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006334:	4b0e      	ldr	r3, [pc, #56]	; (8006370 <low_level_input+0x164>)
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	f241 0314 	movw	r3, #4116	; 0x1014
 800633c:	4413      	add	r3, r2
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00d      	beq.n	8006364 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8006348:	4b09      	ldr	r3, [pc, #36]	; (8006370 <low_level_input+0x164>)
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	f241 0314 	movw	r3, #4116	; 0x1014
 8006350:	4413      	add	r3, r2
 8006352:	2280      	movs	r2, #128	; 0x80
 8006354:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006356:	4b06      	ldr	r3, [pc, #24]	; (8006370 <low_level_input+0x164>)
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	f241 0308 	movw	r3, #4104	; 0x1008
 800635e:	4413      	add	r3, r2
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]
  }
  return p;
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006366:	4618      	mov	r0, r3
 8006368:	3730      	adds	r7, #48	; 0x30
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	2000650c 	.word	0x2000650c

08006374 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006380:	4b12      	ldr	r3, [pc, #72]	; (80063cc <ethernetif_input+0x58>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006388:	4618      	mov	r0, r3
 800638a:	f000 fa8d 	bl	80068a8 <osSemaphoreWait>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1f5      	bne.n	8006380 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8006394:	480e      	ldr	r0, [pc, #56]	; (80063d0 <ethernetif_input+0x5c>)
 8006396:	f00e fd6f 	bl	8014e78 <sys_mutex_lock>
        p = low_level_input( netif );
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f7ff ff36 	bl	800620c <low_level_input>
 80063a0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	68f9      	ldr	r1, [r7, #12]
 80063ae:	68b8      	ldr	r0, [r7, #8]
 80063b0:	4798      	blx	r3
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80063b8:	68b8      	ldr	r0, [r7, #8]
 80063ba:	f005 fbbd 	bl	800bb38 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80063be:	4804      	ldr	r0, [pc, #16]	; (80063d0 <ethernetif_input+0x5c>)
 80063c0:	f00e fd69 	bl	8014e96 <sys_mutex_unlock>
      } while(p!=NULL);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e4      	bne.n	8006394 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80063ca:	e7d9      	b.n	8006380 <ethernetif_input+0xc>
 80063cc:	20000300 	.word	0x20000300
 80063d0:	20007d24 	.word	0x20007d24

080063d4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d106      	bne.n	80063f0 <ethernetif_init+0x1c>
 80063e2:	4b0e      	ldr	r3, [pc, #56]	; (800641c <ethernetif_init+0x48>)
 80063e4:	f240 2233 	movw	r2, #563	; 0x233
 80063e8:	490d      	ldr	r1, [pc, #52]	; (8006420 <ethernetif_init+0x4c>)
 80063ea:	480e      	ldr	r0, [pc, #56]	; (8006424 <ethernetif_init+0x50>)
 80063ec:	f00e fdea 	bl	8014fc4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2273      	movs	r2, #115	; 0x73
 80063f4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2274      	movs	r2, #116	; 0x74
 80063fc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a09      	ldr	r2, [pc, #36]	; (8006428 <ethernetif_init+0x54>)
 8006404:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a08      	ldr	r2, [pc, #32]	; (800642c <ethernetif_init+0x58>)
 800640a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff fd8f 	bl	8005f30 <low_level_init>

  return ERR_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	08015ecc 	.word	0x08015ecc
 8006420:	08015ee8 	.word	0x08015ee8
 8006424:	08015ef8 	.word	0x08015ef8
 8006428:	08013031 	.word	0x08013031
 800642c:	080060d1 	.word	0x080060d1

08006430 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006434:	f7fa ff7e 	bl	8001334 <HAL_GetTick>
 8006438:	4603      	mov	r3, r0
}
 800643a:	4618      	mov	r0, r3
 800643c:	bd80      	pop	{r7, pc}
	...

08006440 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006448:	2300      	movs	r3, #0
 800644a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006450:	f107 0308 	add.w	r3, r7, #8
 8006454:	461a      	mov	r2, r3
 8006456:	2101      	movs	r1, #1
 8006458:	4816      	ldr	r0, [pc, #88]	; (80064b4 <ethernetif_set_link+0x74>)
 800645a:	f7fb fcda 	bl	8001e12 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	f003 0304 	and.w	r3, r3, #4
 8006464:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b00      	cmp	r3, #0
 8006474:	d108      	bne.n	8006488 <ethernetif_set_link+0x48>
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d005      	beq.n	8006488 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4618      	mov	r0, r3
 8006482:	f004 ff4b 	bl	800b31c <netif_set_link_up>
 8006486:	e011      	b.n	80064ac <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006490:	089b      	lsrs	r3, r3, #2
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	b2db      	uxtb	r3, r3
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <ethernetif_set_link+0x6c>
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d104      	bne.n	80064ac <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f004 ff6c 	bl	800b384 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80064ac:	20c8      	movs	r0, #200	; 0xc8
 80064ae:	f000 f916 	bl	80066de <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80064b2:	e7cd      	b.n	8006450 <ethernetif_set_link+0x10>
 80064b4:	2000650c 	.word	0x2000650c

080064b8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80064ce:	089b      	lsrs	r3, r3, #2
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d05d      	beq.n	8006596 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80064da:	4b34      	ldr	r3, [pc, #208]	; (80065ac <ethernetif_update_config+0xf4>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d03f      	beq.n	8006562 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80064e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80064e6:	2100      	movs	r1, #0
 80064e8:	4830      	ldr	r0, [pc, #192]	; (80065ac <ethernetif_update_config+0xf4>)
 80064ea:	f7fb fcfa 	bl	8001ee2 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 80064ee:	f7fa ff21 	bl	8001334 <HAL_GetTick>
 80064f2:	4603      	mov	r3, r0
 80064f4:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80064f6:	f107 0308 	add.w	r3, r7, #8
 80064fa:	461a      	mov	r2, r3
 80064fc:	2101      	movs	r1, #1
 80064fe:	482b      	ldr	r0, [pc, #172]	; (80065ac <ethernetif_update_config+0xf4>)
 8006500:	f7fb fc87 	bl	8001e12 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006504:	f7fa ff16 	bl	8001334 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006512:	d828      	bhi.n	8006566 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0eb      	beq.n	80064f6 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800651e:	f107 0308 	add.w	r3, r7, #8
 8006522:	461a      	mov	r2, r3
 8006524:	211f      	movs	r1, #31
 8006526:	4821      	ldr	r0, [pc, #132]	; (80065ac <ethernetif_update_config+0xf4>)
 8006528:	f7fb fc73 	bl	8001e12 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f003 0310 	and.w	r3, r3, #16
 8006532:	2b00      	cmp	r3, #0
 8006534:	d004      	beq.n	8006540 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006536:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <ethernetif_update_config+0xf4>)
 8006538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800653c:	60da      	str	r2, [r3, #12]
 800653e:	e002      	b.n	8006546 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8006540:	4b1a      	ldr	r3, [pc, #104]	; (80065ac <ethernetif_update_config+0xf4>)
 8006542:	2200      	movs	r2, #0
 8006544:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8006550:	4b16      	ldr	r3, [pc, #88]	; (80065ac <ethernetif_update_config+0xf4>)
 8006552:	2200      	movs	r2, #0
 8006554:	609a      	str	r2, [r3, #8]
 8006556:	e016      	b.n	8006586 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8006558:	4b14      	ldr	r3, [pc, #80]	; (80065ac <ethernetif_update_config+0xf4>)
 800655a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800655e:	609a      	str	r2, [r3, #8]
 8006560:	e011      	b.n	8006586 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8006562:	bf00      	nop
 8006564:	e000      	b.n	8006568 <ethernetif_update_config+0xb0>
          goto error;
 8006566:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006568:	4b10      	ldr	r3, [pc, #64]	; (80065ac <ethernetif_update_config+0xf4>)
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	08db      	lsrs	r3, r3, #3
 800656e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8006570:	4b0e      	ldr	r3, [pc, #56]	; (80065ac <ethernetif_update_config+0xf4>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	085b      	lsrs	r3, r3, #1
 8006576:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8006578:	4313      	orrs	r3, r2
 800657a:	b29b      	uxth	r3, r3
 800657c:	461a      	mov	r2, r3
 800657e:	2100      	movs	r1, #0
 8006580:	480a      	ldr	r0, [pc, #40]	; (80065ac <ethernetif_update_config+0xf4>)
 8006582:	f7fb fcae 	bl	8001ee2 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8006586:	2100      	movs	r1, #0
 8006588:	4808      	ldr	r0, [pc, #32]	; (80065ac <ethernetif_update_config+0xf4>)
 800658a:	f7fb fd6f 	bl	800206c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800658e:	4807      	ldr	r0, [pc, #28]	; (80065ac <ethernetif_update_config+0xf4>)
 8006590:	f7fb fd0d 	bl	8001fae <HAL_ETH_Start>
 8006594:	e002      	b.n	800659c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8006596:	4805      	ldr	r0, [pc, #20]	; (80065ac <ethernetif_update_config+0xf4>)
 8006598:	f7fb fd38 	bl	800200c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f807 	bl	80065b0 <ethernetif_notify_conn_changed>
}
 80065a2:	bf00      	nop
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	2000650c 	.word	0x2000650c

080065b0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	4603      	mov	r3, r0
 80065cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80065ce:	2300      	movs	r3, #0
 80065d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80065d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065d6:	2b84      	cmp	r3, #132	; 0x84
 80065d8:	d005      	beq.n	80065e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80065da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	4413      	add	r3, r2
 80065e2:	3303      	adds	r3, #3
 80065e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80065e6:	68fb      	ldr	r3, [r7, #12]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3714      	adds	r7, #20
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065fa:	f3ef 8305 	mrs	r3, IPSR
 80065fe:	607b      	str	r3, [r7, #4]
  return(result);
 8006600:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006602:	2b00      	cmp	r3, #0
 8006604:	bf14      	ite	ne
 8006606:	2301      	movne	r3, #1
 8006608:	2300      	moveq	r3, #0
 800660a:	b2db      	uxtb	r3, r3
}
 800660c:	4618      	mov	r0, r3
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800661c:	f001 fc88 	bl	8007f30 <vTaskStartScheduler>
  
  return osOK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	bd80      	pop	{r7, pc}

08006626 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800662a:	f7ff ffe3 	bl	80065f4 <inHandlerMode>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d003      	beq.n	800663c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006634:	f001 fd9a 	bl	800816c <xTaskGetTickCountFromISR>
 8006638:	4603      	mov	r3, r0
 800663a:	e002      	b.n	8006642 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800663c:	f001 fd86 	bl	800814c <xTaskGetTickCount>
 8006640:	4603      	mov	r3, r0
  }
}
 8006642:	4618      	mov	r0, r3
 8006644:	bd80      	pop	{r7, pc}

08006646 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006646:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006648:	b089      	sub	sp, #36	; 0x24
 800664a:	af04      	add	r7, sp, #16
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d020      	beq.n	800669a <osThreadCreate+0x54>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d01c      	beq.n	800669a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685c      	ldr	r4, [r3, #4]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681d      	ldr	r5, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691e      	ldr	r6, [r3, #16]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006672:	4618      	mov	r0, r3
 8006674:	f7ff ffa6 	bl	80065c4 <makeFreeRtosPriority>
 8006678:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006682:	9202      	str	r2, [sp, #8]
 8006684:	9301      	str	r3, [sp, #4]
 8006686:	9100      	str	r1, [sp, #0]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	4632      	mov	r2, r6
 800668c:	4629      	mov	r1, r5
 800668e:	4620      	mov	r0, r4
 8006690:	f001 fa81 	bl	8007b96 <xTaskCreateStatic>
 8006694:	4603      	mov	r3, r0
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	e01c      	b.n	80066d4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685c      	ldr	r4, [r3, #4]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80066a6:	b29e      	uxth	r6, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff ff88 	bl	80065c4 <makeFreeRtosPriority>
 80066b4:	4602      	mov	r2, r0
 80066b6:	f107 030c 	add.w	r3, r7, #12
 80066ba:	9301      	str	r3, [sp, #4]
 80066bc:	9200      	str	r2, [sp, #0]
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	4632      	mov	r2, r6
 80066c2:	4629      	mov	r1, r5
 80066c4:	4620      	mov	r0, r4
 80066c6:	f001 fac6 	bl	8007c56 <xTaskCreate>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d001      	beq.n	80066d4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	e000      	b.n	80066d6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80066d4:	68fb      	ldr	r3, [r7, #12]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066de <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b084      	sub	sp, #16
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d001      	beq.n	80066f4 <osDelay+0x16>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	e000      	b.n	80066f6 <osDelay+0x18>
 80066f4:	2301      	movs	r3, #1
 80066f6:	4618      	mov	r0, r3
 80066f8:	f001 fbe4 	bl	8007ec4 <vTaskDelay>
  
  return osOK;
 80066fc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b082      	sub	sp, #8
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d007      	beq.n	8006726 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	4619      	mov	r1, r3
 800671c:	2001      	movs	r0, #1
 800671e:	f000 fc52 	bl	8006fc6 <xQueueCreateMutexStatic>
 8006722:	4603      	mov	r3, r0
 8006724:	e003      	b.n	800672e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006726:	2001      	movs	r0, #1
 8006728:	f000 fc35 	bl	8006f96 <xQueueCreateMutex>
 800672c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800672e:	4618      	mov	r0, r3
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
	...

08006738 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006742:	2300      	movs	r3, #0
 8006744:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <osMutexWait+0x18>
    return osErrorParameter;
 800674c:	2380      	movs	r3, #128	; 0x80
 800674e:	e03a      	b.n	80067c6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006750:	2300      	movs	r3, #0
 8006752:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800675a:	d103      	bne.n	8006764 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800675c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006760:	60fb      	str	r3, [r7, #12]
 8006762:	e009      	b.n	8006778 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d006      	beq.n	8006778 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <osMutexWait+0x40>
      ticks = 1;
 8006774:	2301      	movs	r3, #1
 8006776:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006778:	f7ff ff3c 	bl	80065f4 <inHandlerMode>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d017      	beq.n	80067b2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006782:	f107 0308 	add.w	r3, r7, #8
 8006786:	461a      	mov	r2, r3
 8006788:	2100      	movs	r1, #0
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f001 f858 	bl	8007840 <xQueueReceiveFromISR>
 8006790:	4603      	mov	r3, r0
 8006792:	2b01      	cmp	r3, #1
 8006794:	d001      	beq.n	800679a <osMutexWait+0x62>
      return osErrorOS;
 8006796:	23ff      	movs	r3, #255	; 0xff
 8006798:	e015      	b.n	80067c6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800679a:	68bb      	ldr	r3, [r7, #8]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d011      	beq.n	80067c4 <osMutexWait+0x8c>
 80067a0:	4b0b      	ldr	r3, [pc, #44]	; (80067d0 <osMutexWait+0x98>)
 80067a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	e008      	b.n	80067c4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80067b2:	68f9      	ldr	r1, [r7, #12]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 ff33 	bl	8007620 <xQueueSemaphoreTake>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d001      	beq.n	80067c4 <osMutexWait+0x8c>
    return osErrorOS;
 80067c0:	23ff      	movs	r3, #255	; 0xff
 80067c2:	e000      	b.n	80067c6 <osMutexWait+0x8e>
  }
  
  return osOK;
 80067c4:	2300      	movs	r3, #0
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	e000ed04 	.word	0xe000ed04

080067d4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80067dc:	2300      	movs	r3, #0
 80067de:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80067e4:	f7ff ff06 	bl	80065f4 <inHandlerMode>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d016      	beq.n	800681c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80067ee:	f107 0308 	add.w	r3, r7, #8
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fd9f 	bl	8007338 <xQueueGiveFromISR>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d001      	beq.n	8006804 <osMutexRelease+0x30>
      return osErrorOS;
 8006800:	23ff      	movs	r3, #255	; 0xff
 8006802:	e017      	b.n	8006834 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d013      	beq.n	8006832 <osMutexRelease+0x5e>
 800680a:	4b0c      	ldr	r3, [pc, #48]	; (800683c <osMutexRelease+0x68>)
 800680c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	f3bf 8f4f 	dsb	sy
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	e00a      	b.n	8006832 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800681c:	2300      	movs	r3, #0
 800681e:	2200      	movs	r2, #0
 8006820:	2100      	movs	r1, #0
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 fbea 	bl	8006ffc <xQueueGenericSend>
 8006828:	4603      	mov	r3, r0
 800682a:	2b01      	cmp	r3, #1
 800682c:	d001      	beq.n	8006832 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800682e:	23ff      	movs	r3, #255	; 0xff
 8006830:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006832:	68fb      	ldr	r3, [r7, #12]
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	e000ed04 	.word	0xe000ed04

08006840 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af02      	add	r7, sp, #8
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d010      	beq.n	8006874 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d10b      	bne.n	8006870 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	2303      	movs	r3, #3
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	4613      	mov	r3, r2
 8006862:	2200      	movs	r2, #0
 8006864:	2100      	movs	r1, #0
 8006866:	2001      	movs	r0, #1
 8006868:	f000 fa9e 	bl	8006da8 <xQueueGenericCreateStatic>
 800686c:	4603      	mov	r3, r0
 800686e:	e016      	b.n	800689e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006870:	2300      	movs	r3, #0
 8006872:	e014      	b.n	800689e <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d110      	bne.n	800689c <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800687a:	2203      	movs	r2, #3
 800687c:	2100      	movs	r1, #0
 800687e:	2001      	movs	r0, #1
 8006880:	f000 fb0f 	bl	8006ea2 <xQueueGenericCreate>
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d005      	beq.n	8006898 <osSemaphoreCreate+0x58>
 800688c:	2300      	movs	r3, #0
 800688e:	2200      	movs	r2, #0
 8006890:	2100      	movs	r1, #0
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	f000 fbb2 	bl	8006ffc <xQueueGenericSend>
      return sema;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	e000      	b.n	800689e <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800689c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
	...

080068a8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80068b2:	2300      	movs	r3, #0
 80068b4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80068bc:	2380      	movs	r3, #128	; 0x80
 80068be:	e03a      	b.n	8006936 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80068c0:	2300      	movs	r3, #0
 80068c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ca:	d103      	bne.n	80068d4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80068cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	e009      	b.n	80068e8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d006      	beq.n	80068e8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <osSemaphoreWait+0x40>
      ticks = 1;
 80068e4:	2301      	movs	r3, #1
 80068e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80068e8:	f7ff fe84 	bl	80065f4 <inHandlerMode>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d017      	beq.n	8006922 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80068f2:	f107 0308 	add.w	r3, r7, #8
 80068f6:	461a      	mov	r2, r3
 80068f8:	2100      	movs	r1, #0
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 ffa0 	bl	8007840 <xQueueReceiveFromISR>
 8006900:	4603      	mov	r3, r0
 8006902:	2b01      	cmp	r3, #1
 8006904:	d001      	beq.n	800690a <osSemaphoreWait+0x62>
      return osErrorOS;
 8006906:	23ff      	movs	r3, #255	; 0xff
 8006908:	e015      	b.n	8006936 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d011      	beq.n	8006934 <osSemaphoreWait+0x8c>
 8006910:	4b0b      	ldr	r3, [pc, #44]	; (8006940 <osSemaphoreWait+0x98>)
 8006912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	e008      	b.n	8006934 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006922:	68f9      	ldr	r1, [r7, #12]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fe7b 	bl	8007620 <xQueueSemaphoreTake>
 800692a:	4603      	mov	r3, r0
 800692c:	2b01      	cmp	r3, #1
 800692e:	d001      	beq.n	8006934 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006930:	23ff      	movs	r3, #255	; 0xff
 8006932:	e000      	b.n	8006936 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	e000ed04 	.word	0xe000ed04

08006944 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800694c:	2300      	movs	r3, #0
 800694e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006950:	2300      	movs	r3, #0
 8006952:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006954:	f7ff fe4e 	bl	80065f4 <inHandlerMode>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d016      	beq.n	800698c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800695e:	f107 0308 	add.w	r3, r7, #8
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fce7 	bl	8007338 <xQueueGiveFromISR>
 800696a:	4603      	mov	r3, r0
 800696c:	2b01      	cmp	r3, #1
 800696e:	d001      	beq.n	8006974 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006970:	23ff      	movs	r3, #255	; 0xff
 8006972:	e017      	b.n	80069a4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d013      	beq.n	80069a2 <osSemaphoreRelease+0x5e>
 800697a:	4b0c      	ldr	r3, [pc, #48]	; (80069ac <osSemaphoreRelease+0x68>)
 800697c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	e00a      	b.n	80069a2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800698c:	2300      	movs	r3, #0
 800698e:	2200      	movs	r2, #0
 8006990:	2100      	movs	r1, #0
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fb32 	bl	8006ffc <xQueueGenericSend>
 8006998:	4603      	mov	r3, r0
 800699a:	2b01      	cmp	r3, #1
 800699c:	d001      	beq.n	80069a2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800699e:	23ff      	movs	r3, #255	; 0xff
 80069a0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80069a2:	68fb      	ldr	r3, [r7, #12]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	e000ed04 	.word	0xe000ed04

080069b0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80069b0:	b590      	push	{r4, r7, lr}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af02      	add	r7, sp, #8
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d012      	beq.n	80069e8 <osMessageCreate+0x38>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00e      	beq.n	80069e8 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6818      	ldr	r0, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6859      	ldr	r1, [r3, #4]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68dc      	ldr	r4, [r3, #12]
 80069da:	2300      	movs	r3, #0
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	4623      	mov	r3, r4
 80069e0:	f000 f9e2 	bl	8006da8 <xQueueGenericCreateStatic>
 80069e4:	4603      	mov	r3, r0
 80069e6:	e008      	b.n	80069fa <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6818      	ldr	r0, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	4619      	mov	r1, r3
 80069f4:	f000 fa55 	bl	8006ea2 <xQueueGenericCreate>
 80069f8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd90      	pop	{r4, r7, pc}
	...

08006a04 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b086      	sub	sp, #24
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006a10:	2300      	movs	r3, #0
 8006a12:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <osMessagePut+0x1e>
    ticks = 1;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006a22:	f7ff fde7 	bl	80065f4 <inHandlerMode>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d018      	beq.n	8006a5e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006a2c:	f107 0210 	add.w	r2, r7, #16
 8006a30:	f107 0108 	add.w	r1, r7, #8
 8006a34:	2300      	movs	r3, #0
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 fbe2 	bl	8007200 <xQueueGenericSendFromISR>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d001      	beq.n	8006a46 <osMessagePut+0x42>
      return osErrorOS;
 8006a42:	23ff      	movs	r3, #255	; 0xff
 8006a44:	e018      	b.n	8006a78 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d014      	beq.n	8006a76 <osMessagePut+0x72>
 8006a4c:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <osMessagePut+0x7c>)
 8006a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	e00b      	b.n	8006a76 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006a5e:	f107 0108 	add.w	r1, r7, #8
 8006a62:	2300      	movs	r3, #0
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f000 fac8 	bl	8006ffc <xQueueGenericSend>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b01      	cmp	r3, #1
 8006a70:	d001      	beq.n	8006a76 <osMessagePut+0x72>
      return osErrorOS;
 8006a72:	23ff      	movs	r3, #255	; 0xff
 8006a74:	e000      	b.n	8006a78 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3718      	adds	r7, #24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	e000ed04 	.word	0xe000ed04

08006a84 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006a84:	b590      	push	{r4, r7, lr}
 8006a86:	b08b      	sub	sp, #44	; 0x2c
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10a      	bne.n	8006ab4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006a9e:	2380      	movs	r3, #128	; 0x80
 8006aa0:	617b      	str	r3, [r7, #20]
    return event;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	461c      	mov	r4, r3
 8006aa6:	f107 0314 	add.w	r3, r7, #20
 8006aaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006aae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006ab2:	e054      	b.n	8006b5e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ac2:	d103      	bne.n	8006acc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8006aca:	e009      	b.n	8006ae0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d006      	beq.n	8006ae0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <osMessageGet+0x5c>
      ticks = 1;
 8006adc:	2301      	movs	r3, #1
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006ae0:	f7ff fd88 	bl	80065f4 <inHandlerMode>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d01c      	beq.n	8006b24 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006aea:	f107 0220 	add.w	r2, r7, #32
 8006aee:	f107 0314 	add.w	r3, r7, #20
 8006af2:	3304      	adds	r3, #4
 8006af4:	4619      	mov	r1, r3
 8006af6:	68b8      	ldr	r0, [r7, #8]
 8006af8:	f000 fea2 	bl	8007840 <xQueueReceiveFromISR>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d102      	bne.n	8006b08 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006b02:	2310      	movs	r3, #16
 8006b04:	617b      	str	r3, [r7, #20]
 8006b06:	e001      	b.n	8006b0c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006b0c:	6a3b      	ldr	r3, [r7, #32]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d01d      	beq.n	8006b4e <osMessageGet+0xca>
 8006b12:	4b15      	ldr	r3, [pc, #84]	; (8006b68 <osMessageGet+0xe4>)
 8006b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b18:	601a      	str	r2, [r3, #0]
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	f3bf 8f6f 	isb	sy
 8006b22:	e014      	b.n	8006b4e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006b24:	f107 0314 	add.w	r3, r7, #20
 8006b28:	3304      	adds	r3, #4
 8006b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	68b8      	ldr	r0, [r7, #8]
 8006b30:	f000 fc94 	bl	800745c <xQueueReceive>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d102      	bne.n	8006b40 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006b3a:	2310      	movs	r3, #16
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	e006      	b.n	8006b4e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <osMessageGet+0xc6>
 8006b46:	2300      	movs	r3, #0
 8006b48:	e000      	b.n	8006b4c <osMessageGet+0xc8>
 8006b4a:	2340      	movs	r3, #64	; 0x40
 8006b4c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	461c      	mov	r4, r3
 8006b52:	f107 0314 	add.w	r3, r7, #20
 8006b56:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006b5a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	372c      	adds	r7, #44	; 0x2c
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd90      	pop	{r4, r7, pc}
 8006b66:	bf00      	nop
 8006b68:	e000ed04 	.word	0xe000ed04

08006b6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f103 0208 	add.w	r2, r3, #8
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f103 0208 	add.w	r2, r3, #8
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f103 0208 	add.w	r2, r3, #8
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006bba:	bf00      	nop
 8006bbc:	370c      	adds	r7, #12
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b085      	sub	sp, #20
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	601a      	str	r2, [r3, #0]
}
 8006c02:	bf00      	nop
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b085      	sub	sp, #20
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c24:	d103      	bne.n	8006c2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	e00c      	b.n	8006c48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	3308      	adds	r3, #8
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	e002      	b.n	8006c3c <vListInsert+0x2e>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d2f6      	bcs.n	8006c36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	683a      	ldr	r2, [r7, #0]
 8006c56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	683a      	ldr	r2, [r7, #0]
 8006c62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	1c5a      	adds	r2, r3, #1
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	601a      	str	r2, [r3, #0]
}
 8006c74:	bf00      	nop
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6892      	ldr	r2, [r2, #8]
 8006c96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6852      	ldr	r2, [r2, #4]
 8006ca0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d103      	bne.n	8006cb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	689a      	ldr	r2, [r3, #8]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	1e5a      	subs	r2, r3, #1
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10b      	bne.n	8006d00 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cec:	b672      	cpsid	i
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	b662      	cpsie	i
 8006cfc:	60bb      	str	r3, [r7, #8]
 8006cfe:	e7fe      	b.n	8006cfe <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8006d00:	f002 f882 	bl	8008e08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d0c:	68f9      	ldr	r1, [r7, #12]
 8006d0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d10:	fb01 f303 	mul.w	r3, r1, r3
 8006d14:	441a      	add	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d30:	3b01      	subs	r3, #1
 8006d32:	68f9      	ldr	r1, [r7, #12]
 8006d34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006d36:	fb01 f303 	mul.w	r3, r1, r3
 8006d3a:	441a      	add	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	22ff      	movs	r2, #255	; 0xff
 8006d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	22ff      	movs	r2, #255	; 0xff
 8006d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d114      	bne.n	8006d80 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d01a      	beq.n	8006d94 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3310      	adds	r3, #16
 8006d62:	4618      	mov	r0, r3
 8006d64:	f001 fb50 	bl	8008408 <xTaskRemoveFromEventList>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d012      	beq.n	8006d94 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006d6e:	4b0d      	ldr	r3, [pc, #52]	; (8006da4 <xQueueGenericReset+0xd0>)
 8006d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	e009      	b.n	8006d94 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3310      	adds	r3, #16
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff fef1 	bl	8006b6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3324      	adds	r3, #36	; 0x24
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7ff feec 	bl	8006b6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006d94:	f002 f86a 	bl	8008e6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006d98:	2301      	movs	r3, #1
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	e000ed04 	.word	0xe000ed04

08006da8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08e      	sub	sp, #56	; 0x38
 8006dac:	af02      	add	r7, sp, #8
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
 8006db4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10b      	bne.n	8006dd4 <xQueueGenericCreateStatic+0x2c>
 8006dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc0:	b672      	cpsid	i
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	b662      	cpsie	i
 8006dd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dd2:	e7fe      	b.n	8006dd2 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10b      	bne.n	8006df2 <xQueueGenericCreateStatic+0x4a>
 8006dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dde:	b672      	cpsid	i
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	b662      	cpsie	i
 8006dee:	627b      	str	r3, [r7, #36]	; 0x24
 8006df0:	e7fe      	b.n	8006df0 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d002      	beq.n	8006dfe <xQueueGenericCreateStatic+0x56>
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d001      	beq.n	8006e02 <xQueueGenericCreateStatic+0x5a>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e000      	b.n	8006e04 <xQueueGenericCreateStatic+0x5c>
 8006e02:	2300      	movs	r3, #0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10b      	bne.n	8006e20 <xQueueGenericCreateStatic+0x78>
 8006e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0c:	b672      	cpsid	i
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	b662      	cpsie	i
 8006e1c:	623b      	str	r3, [r7, #32]
 8006e1e:	e7fe      	b.n	8006e1e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d102      	bne.n	8006e2c <xQueueGenericCreateStatic+0x84>
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <xQueueGenericCreateStatic+0x88>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e000      	b.n	8006e32 <xQueueGenericCreateStatic+0x8a>
 8006e30:	2300      	movs	r3, #0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10b      	bne.n	8006e4e <xQueueGenericCreateStatic+0xa6>
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	b672      	cpsid	i
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	b662      	cpsie	i
 8006e4a:	61fb      	str	r3, [r7, #28]
 8006e4c:	e7fe      	b.n	8006e4c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006e4e:	2348      	movs	r3, #72	; 0x48
 8006e50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b48      	cmp	r3, #72	; 0x48
 8006e56:	d00b      	beq.n	8006e70 <xQueueGenericCreateStatic+0xc8>
 8006e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e5c:	b672      	cpsid	i
 8006e5e:	f383 8811 	msr	BASEPRI, r3
 8006e62:	f3bf 8f6f 	isb	sy
 8006e66:	f3bf 8f4f 	dsb	sy
 8006e6a:	b662      	cpsie	i
 8006e6c:	61bb      	str	r3, [r7, #24]
 8006e6e:	e7fe      	b.n	8006e6e <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006e70:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00d      	beq.n	8006e98 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006e84:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e8a:	9300      	str	r3, [sp, #0]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	68b9      	ldr	r1, [r7, #8]
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 f846 	bl	8006f24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3730      	adds	r7, #48	; 0x30
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b08a      	sub	sp, #40	; 0x28
 8006ea6:	af02      	add	r7, sp, #8
 8006ea8:	60f8      	str	r0, [r7, #12]
 8006eaa:	60b9      	str	r1, [r7, #8]
 8006eac:	4613      	mov	r3, r2
 8006eae:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10b      	bne.n	8006ece <xQueueGenericCreate+0x2c>
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	b672      	cpsid	i
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	b662      	cpsie	i
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	e7fe      	b.n	8006ecc <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d102      	bne.n	8006eda <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	61fb      	str	r3, [r7, #28]
 8006ed8:	e004      	b.n	8006ee4 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	fb02 f303 	mul.w	r3, r2, r3
 8006ee2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	3348      	adds	r3, #72	; 0x48
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f002 f8af 	bl	800904c <pvPortMalloc>
 8006eee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d011      	beq.n	8006f1a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	3348      	adds	r3, #72	; 0x48
 8006efe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f08:	79fa      	ldrb	r2, [r7, #7]
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	9300      	str	r3, [sp, #0]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	68b9      	ldr	r1, [r7, #8]
 8006f14:	68f8      	ldr	r0, [r7, #12]
 8006f16:	f000 f805 	bl	8006f24 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f1a:	69bb      	ldr	r3, [r7, #24]
	}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3720      	adds	r7, #32
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	607a      	str	r2, [r7, #4]
 8006f30:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d103      	bne.n	8006f40 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	e002      	b.n	8006f46 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006f52:	2101      	movs	r1, #1
 8006f54:	69b8      	ldr	r0, [r7, #24]
 8006f56:	f7ff febd 	bl	8006cd4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006f5a:	bf00      	nop
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b082      	sub	sp, #8
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00e      	beq.n	8006f8e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006f82:	2300      	movs	r3, #0
 8006f84:	2200      	movs	r2, #0
 8006f86:	2100      	movs	r1, #0
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f837 	bl	8006ffc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006f8e:	bf00      	nop
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b086      	sub	sp, #24
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	617b      	str	r3, [r7, #20]
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006fa8:	79fb      	ldrb	r3, [r7, #7]
 8006faa:	461a      	mov	r2, r3
 8006fac:	6939      	ldr	r1, [r7, #16]
 8006fae:	6978      	ldr	r0, [r7, #20]
 8006fb0:	f7ff ff77 	bl	8006ea2 <xQueueGenericCreate>
 8006fb4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006fb6:	68f8      	ldr	r0, [r7, #12]
 8006fb8:	f7ff ffd3 	bl	8006f62 <prvInitialiseMutex>

		return xNewQueue;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
	}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3718      	adds	r7, #24
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b088      	sub	sp, #32
 8006fca:	af02      	add	r7, sp, #8
 8006fcc:	4603      	mov	r3, r0
 8006fce:	6039      	str	r1, [r7, #0]
 8006fd0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	6939      	ldr	r1, [r7, #16]
 8006fe4:	6978      	ldr	r0, [r7, #20]
 8006fe6:	f7ff fedf 	bl	8006da8 <xQueueGenericCreateStatic>
 8006fea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f7ff ffb8 	bl	8006f62 <prvInitialiseMutex>

		return xNewQueue;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
	}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3718      	adds	r7, #24
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08e      	sub	sp, #56	; 0x38
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800700a:	2300      	movs	r3, #0
 800700c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007014:	2b00      	cmp	r3, #0
 8007016:	d10b      	bne.n	8007030 <xQueueGenericSend+0x34>
 8007018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701c:	b672      	cpsid	i
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	b662      	cpsie	i
 800702c:	62bb      	str	r3, [r7, #40]	; 0x28
 800702e:	e7fe      	b.n	800702e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d103      	bne.n	800703e <xQueueGenericSend+0x42>
 8007036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <xQueueGenericSend+0x46>
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <xQueueGenericSend+0x48>
 8007042:	2300      	movs	r3, #0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10b      	bne.n	8007060 <xQueueGenericSend+0x64>
 8007048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704c:	b672      	cpsid	i
 800704e:	f383 8811 	msr	BASEPRI, r3
 8007052:	f3bf 8f6f 	isb	sy
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	b662      	cpsie	i
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
 800705e:	e7fe      	b.n	800705e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2b02      	cmp	r3, #2
 8007064:	d103      	bne.n	800706e <xQueueGenericSend+0x72>
 8007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706a:	2b01      	cmp	r3, #1
 800706c:	d101      	bne.n	8007072 <xQueueGenericSend+0x76>
 800706e:	2301      	movs	r3, #1
 8007070:	e000      	b.n	8007074 <xQueueGenericSend+0x78>
 8007072:	2300      	movs	r3, #0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10b      	bne.n	8007090 <xQueueGenericSend+0x94>
 8007078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707c:	b672      	cpsid	i
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	b662      	cpsie	i
 800708c:	623b      	str	r3, [r7, #32]
 800708e:	e7fe      	b.n	800708e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007090:	f001 fb78 	bl	8008784 <xTaskGetSchedulerState>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d102      	bne.n	80070a0 <xQueueGenericSend+0xa4>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <xQueueGenericSend+0xa8>
 80070a0:	2301      	movs	r3, #1
 80070a2:	e000      	b.n	80070a6 <xQueueGenericSend+0xaa>
 80070a4:	2300      	movs	r3, #0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10b      	bne.n	80070c2 <xQueueGenericSend+0xc6>
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	b672      	cpsid	i
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	b662      	cpsie	i
 80070be:	61fb      	str	r3, [r7, #28]
 80070c0:	e7fe      	b.n	80070c0 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070c2:	f001 fea1 	bl	8008e08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d302      	bcc.n	80070d8 <xQueueGenericSend+0xdc>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d129      	bne.n	800712c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070d8:	683a      	ldr	r2, [r7, #0]
 80070da:	68b9      	ldr	r1, [r7, #8]
 80070dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80070de:	f000 fc4a 	bl	8007976 <prvCopyDataToQueue>
 80070e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d010      	beq.n	800710e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ee:	3324      	adds	r3, #36	; 0x24
 80070f0:	4618      	mov	r0, r3
 80070f2:	f001 f989 	bl	8008408 <xTaskRemoveFromEventList>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d013      	beq.n	8007124 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80070fc:	4b3f      	ldr	r3, [pc, #252]	; (80071fc <xQueueGenericSend+0x200>)
 80070fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	e00a      	b.n	8007124 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800710e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007110:	2b00      	cmp	r3, #0
 8007112:	d007      	beq.n	8007124 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007114:	4b39      	ldr	r3, [pc, #228]	; (80071fc <xQueueGenericSend+0x200>)
 8007116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800711a:	601a      	str	r2, [r3, #0]
 800711c:	f3bf 8f4f 	dsb	sy
 8007120:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007124:	f001 fea2 	bl	8008e6c <vPortExitCritical>
				return pdPASS;
 8007128:	2301      	movs	r3, #1
 800712a:	e063      	b.n	80071f4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d103      	bne.n	800713a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007132:	f001 fe9b 	bl	8008e6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007136:	2300      	movs	r3, #0
 8007138:	e05c      	b.n	80071f4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800713a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800713c:	2b00      	cmp	r3, #0
 800713e:	d106      	bne.n	800714e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007140:	f107 0314 	add.w	r3, r7, #20
 8007144:	4618      	mov	r0, r3
 8007146:	f001 f9c3 	bl	80084d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800714a:	2301      	movs	r3, #1
 800714c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800714e:	f001 fe8d 	bl	8008e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007152:	f000 ff4f 	bl	8007ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007156:	f001 fe57 	bl	8008e08 <vPortEnterCritical>
 800715a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800715c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007160:	b25b      	sxtb	r3, r3
 8007162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007166:	d103      	bne.n	8007170 <xQueueGenericSend+0x174>
 8007168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007172:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007176:	b25b      	sxtb	r3, r3
 8007178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800717c:	d103      	bne.n	8007186 <xQueueGenericSend+0x18a>
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007186:	f001 fe71 	bl	8008e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800718a:	1d3a      	adds	r2, r7, #4
 800718c:	f107 0314 	add.w	r3, r7, #20
 8007190:	4611      	mov	r1, r2
 8007192:	4618      	mov	r0, r3
 8007194:	f001 f9b2 	bl	80084fc <xTaskCheckForTimeOut>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d124      	bne.n	80071e8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800719e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071a0:	f000 fce1 	bl	8007b66 <prvIsQueueFull>
 80071a4:	4603      	mov	r3, r0
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d018      	beq.n	80071dc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	3310      	adds	r3, #16
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	4611      	mov	r1, r2
 80071b2:	4618      	mov	r0, r3
 80071b4:	f001 f902 	bl	80083bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ba:	f000 fc6c 	bl	8007a96 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071be:	f000 ff27 	bl	8008010 <xTaskResumeAll>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f47f af7c 	bne.w	80070c2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80071ca:	4b0c      	ldr	r3, [pc, #48]	; (80071fc <xQueueGenericSend+0x200>)
 80071cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	e772      	b.n	80070c2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80071dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071de:	f000 fc5a 	bl	8007a96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80071e2:	f000 ff15 	bl	8008010 <xTaskResumeAll>
 80071e6:	e76c      	b.n	80070c2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80071e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071ea:	f000 fc54 	bl	8007a96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071ee:	f000 ff0f 	bl	8008010 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80071f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3738      	adds	r7, #56	; 0x38
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	e000ed04 	.word	0xe000ed04

08007200 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08e      	sub	sp, #56	; 0x38
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	60b9      	str	r1, [r7, #8]
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10b      	bne.n	8007230 <xQueueGenericSendFromISR+0x30>
 8007218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721c:	b672      	cpsid	i
 800721e:	f383 8811 	msr	BASEPRI, r3
 8007222:	f3bf 8f6f 	isb	sy
 8007226:	f3bf 8f4f 	dsb	sy
 800722a:	b662      	cpsie	i
 800722c:	627b      	str	r3, [r7, #36]	; 0x24
 800722e:	e7fe      	b.n	800722e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d103      	bne.n	800723e <xQueueGenericSendFromISR+0x3e>
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <xQueueGenericSendFromISR+0x42>
 800723e:	2301      	movs	r3, #1
 8007240:	e000      	b.n	8007244 <xQueueGenericSendFromISR+0x44>
 8007242:	2300      	movs	r3, #0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10b      	bne.n	8007260 <xQueueGenericSendFromISR+0x60>
 8007248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800724c:	b672      	cpsid	i
 800724e:	f383 8811 	msr	BASEPRI, r3
 8007252:	f3bf 8f6f 	isb	sy
 8007256:	f3bf 8f4f 	dsb	sy
 800725a:	b662      	cpsie	i
 800725c:	623b      	str	r3, [r7, #32]
 800725e:	e7fe      	b.n	800725e <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	2b02      	cmp	r3, #2
 8007264:	d103      	bne.n	800726e <xQueueGenericSendFromISR+0x6e>
 8007266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726a:	2b01      	cmp	r3, #1
 800726c:	d101      	bne.n	8007272 <xQueueGenericSendFromISR+0x72>
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <xQueueGenericSendFromISR+0x74>
 8007272:	2300      	movs	r3, #0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10b      	bne.n	8007290 <xQueueGenericSendFromISR+0x90>
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	b672      	cpsid	i
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	b662      	cpsie	i
 800728c:	61fb      	str	r3, [r7, #28]
 800728e:	e7fe      	b.n	800728e <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007290:	f001 fe9a 	bl	8008fc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007294:	f3ef 8211 	mrs	r2, BASEPRI
 8007298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729c:	b672      	cpsid	i
 800729e:	f383 8811 	msr	BASEPRI, r3
 80072a2:	f3bf 8f6f 	isb	sy
 80072a6:	f3bf 8f4f 	dsb	sy
 80072aa:	b662      	cpsie	i
 80072ac:	61ba      	str	r2, [r7, #24]
 80072ae:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80072b0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072bc:	429a      	cmp	r2, r3
 80072be:	d302      	bcc.n	80072c6 <xQueueGenericSendFromISR+0xc6>
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d12c      	bne.n	8007320 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	68b9      	ldr	r1, [r7, #8]
 80072d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072d6:	f000 fb4e 	bl	8007976 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80072da:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80072de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072e2:	d112      	bne.n	800730a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d016      	beq.n	800731a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ee:	3324      	adds	r3, #36	; 0x24
 80072f0:	4618      	mov	r0, r3
 80072f2:	f001 f889 	bl	8008408 <xTaskRemoveFromEventList>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00e      	beq.n	800731a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00b      	beq.n	800731a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2201      	movs	r2, #1
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	e007      	b.n	800731a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800730a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800730e:	3301      	adds	r3, #1
 8007310:	b2db      	uxtb	r3, r3
 8007312:	b25a      	sxtb	r2, r3
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800731a:	2301      	movs	r3, #1
 800731c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800731e:	e001      	b.n	8007324 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007320:	2300      	movs	r3, #0
 8007322:	637b      	str	r3, [r7, #52]	; 0x34
 8007324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007326:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800732e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007330:	4618      	mov	r0, r3
 8007332:	3738      	adds	r7, #56	; 0x38
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b08e      	sub	sp, #56	; 0x38
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10b      	bne.n	8007364 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800734c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007350:	b672      	cpsid	i
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	b662      	cpsie	i
 8007360:	623b      	str	r3, [r7, #32]
 8007362:	e7fe      	b.n	8007362 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00b      	beq.n	8007384 <xQueueGiveFromISR+0x4c>
 800736c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007370:	b672      	cpsid	i
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	b662      	cpsie	i
 8007380:	61fb      	str	r3, [r7, #28]
 8007382:	e7fe      	b.n	8007382 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d103      	bne.n	8007394 <xQueueGiveFromISR+0x5c>
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d101      	bne.n	8007398 <xQueueGiveFromISR+0x60>
 8007394:	2301      	movs	r3, #1
 8007396:	e000      	b.n	800739a <xQueueGiveFromISR+0x62>
 8007398:	2300      	movs	r3, #0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10b      	bne.n	80073b6 <xQueueGiveFromISR+0x7e>
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	b672      	cpsid	i
 80073a4:	f383 8811 	msr	BASEPRI, r3
 80073a8:	f3bf 8f6f 	isb	sy
 80073ac:	f3bf 8f4f 	dsb	sy
 80073b0:	b662      	cpsie	i
 80073b2:	61bb      	str	r3, [r7, #24]
 80073b4:	e7fe      	b.n	80073b4 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073b6:	f001 fe07 	bl	8008fc8 <vPortValidateInterruptPriority>
	__asm volatile
 80073ba:	f3ef 8211 	mrs	r2, BASEPRI
 80073be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c2:	b672      	cpsid	i
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	b662      	cpsie	i
 80073d2:	617a      	str	r2, [r7, #20]
 80073d4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80073d6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80073e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d22b      	bcs.n	8007442 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f6:	1c5a      	adds	r2, r3, #1
 80073f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007404:	d112      	bne.n	800742c <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	2b00      	cmp	r3, #0
 800740c:	d016      	beq.n	800743c <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	3324      	adds	r3, #36	; 0x24
 8007412:	4618      	mov	r0, r3
 8007414:	f000 fff8 	bl	8008408 <xTaskRemoveFromEventList>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00e      	beq.n	800743c <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00b      	beq.n	800743c <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2201      	movs	r2, #1
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	e007      	b.n	800743c <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800742c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007430:	3301      	adds	r3, #1
 8007432:	b2db      	uxtb	r3, r3
 8007434:	b25a      	sxtb	r2, r3
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800743c:	2301      	movs	r3, #1
 800743e:	637b      	str	r3, [r7, #52]	; 0x34
 8007440:	e001      	b.n	8007446 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007442:	2300      	movs	r3, #0
 8007444:	637b      	str	r3, [r7, #52]	; 0x34
 8007446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007448:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007452:	4618      	mov	r0, r3
 8007454:	3738      	adds	r7, #56	; 0x38
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08c      	sub	sp, #48	; 0x30
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007468:	2300      	movs	r3, #0
 800746a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	2b00      	cmp	r3, #0
 8007474:	d10b      	bne.n	800748e <xQueueReceive+0x32>
	__asm volatile
 8007476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747a:	b672      	cpsid	i
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	b662      	cpsie	i
 800748a:	623b      	str	r3, [r7, #32]
 800748c:	e7fe      	b.n	800748c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d103      	bne.n	800749c <xQueueReceive+0x40>
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <xQueueReceive+0x44>
 800749c:	2301      	movs	r3, #1
 800749e:	e000      	b.n	80074a2 <xQueueReceive+0x46>
 80074a0:	2300      	movs	r3, #0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10b      	bne.n	80074be <xQueueReceive+0x62>
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	b672      	cpsid	i
 80074ac:	f383 8811 	msr	BASEPRI, r3
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	b662      	cpsie	i
 80074ba:	61fb      	str	r3, [r7, #28]
 80074bc:	e7fe      	b.n	80074bc <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074be:	f001 f961 	bl	8008784 <xTaskGetSchedulerState>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d102      	bne.n	80074ce <xQueueReceive+0x72>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d101      	bne.n	80074d2 <xQueueReceive+0x76>
 80074ce:	2301      	movs	r3, #1
 80074d0:	e000      	b.n	80074d4 <xQueueReceive+0x78>
 80074d2:	2300      	movs	r3, #0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10b      	bne.n	80074f0 <xQueueReceive+0x94>
 80074d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074dc:	b672      	cpsid	i
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	b662      	cpsie	i
 80074ec:	61bb      	str	r3, [r7, #24]
 80074ee:	e7fe      	b.n	80074ee <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074f0:	f001 fc8a 	bl	8008e08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d01f      	beq.n	8007540 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007500:	68b9      	ldr	r1, [r7, #8]
 8007502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007504:	f000 faa1 	bl	8007a4a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	1e5a      	subs	r2, r3, #1
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00f      	beq.n	8007538 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751a:	3310      	adds	r3, #16
 800751c:	4618      	mov	r0, r3
 800751e:	f000 ff73 	bl	8008408 <xTaskRemoveFromEventList>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d007      	beq.n	8007538 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007528:	4b3c      	ldr	r3, [pc, #240]	; (800761c <xQueueReceive+0x1c0>)
 800752a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007538:	f001 fc98 	bl	8008e6c <vPortExitCritical>
				return pdPASS;
 800753c:	2301      	movs	r3, #1
 800753e:	e069      	b.n	8007614 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d103      	bne.n	800754e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007546:	f001 fc91 	bl	8008e6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800754a:	2300      	movs	r3, #0
 800754c:	e062      	b.n	8007614 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007550:	2b00      	cmp	r3, #0
 8007552:	d106      	bne.n	8007562 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007554:	f107 0310 	add.w	r3, r7, #16
 8007558:	4618      	mov	r0, r3
 800755a:	f000 ffb9 	bl	80084d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800755e:	2301      	movs	r3, #1
 8007560:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007562:	f001 fc83 	bl	8008e6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007566:	f000 fd45 	bl	8007ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800756a:	f001 fc4d 	bl	8008e08 <vPortEnterCritical>
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007574:	b25b      	sxtb	r3, r3
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800757a:	d103      	bne.n	8007584 <xQueueReceive+0x128>
 800757c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007586:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800758a:	b25b      	sxtb	r3, r3
 800758c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007590:	d103      	bne.n	800759a <xQueueReceive+0x13e>
 8007592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007594:	2200      	movs	r2, #0
 8007596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800759a:	f001 fc67 	bl	8008e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800759e:	1d3a      	adds	r2, r7, #4
 80075a0:	f107 0310 	add.w	r3, r7, #16
 80075a4:	4611      	mov	r1, r2
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 ffa8 	bl	80084fc <xTaskCheckForTimeOut>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d123      	bne.n	80075fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075b4:	f000 fac1 	bl	8007b3a <prvIsQueueEmpty>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d017      	beq.n	80075ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c0:	3324      	adds	r3, #36	; 0x24
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	4611      	mov	r1, r2
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 fef8 	bl	80083bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ce:	f000 fa62 	bl	8007a96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075d2:	f000 fd1d 	bl	8008010 <xTaskResumeAll>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d189      	bne.n	80074f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80075dc:	4b0f      	ldr	r3, [pc, #60]	; (800761c <xQueueReceive+0x1c0>)
 80075de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	e780      	b.n	80074f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80075ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f0:	f000 fa51 	bl	8007a96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075f4:	f000 fd0c 	bl	8008010 <xTaskResumeAll>
 80075f8:	e77a      	b.n	80074f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80075fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075fc:	f000 fa4b 	bl	8007a96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007600:	f000 fd06 	bl	8008010 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007606:	f000 fa98 	bl	8007b3a <prvIsQueueEmpty>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	f43f af6f 	beq.w	80074f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007612:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007614:	4618      	mov	r0, r3
 8007616:	3730      	adds	r7, #48	; 0x30
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	e000ed04 	.word	0xe000ed04

08007620 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08e      	sub	sp, #56	; 0x38
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
 8007628:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800762a:	2300      	movs	r3, #0
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007632:	2300      	movs	r3, #0
 8007634:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10b      	bne.n	8007654 <xQueueSemaphoreTake+0x34>
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	b672      	cpsid	i
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	b662      	cpsie	i
 8007650:	623b      	str	r3, [r7, #32]
 8007652:	e7fe      	b.n	8007652 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00b      	beq.n	8007674 <xQueueSemaphoreTake+0x54>
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	b672      	cpsid	i
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	b662      	cpsie	i
 8007670:	61fb      	str	r3, [r7, #28]
 8007672:	e7fe      	b.n	8007672 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007674:	f001 f886 	bl	8008784 <xTaskGetSchedulerState>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d102      	bne.n	8007684 <xQueueSemaphoreTake+0x64>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <xQueueSemaphoreTake+0x68>
 8007684:	2301      	movs	r3, #1
 8007686:	e000      	b.n	800768a <xQueueSemaphoreTake+0x6a>
 8007688:	2300      	movs	r3, #0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10b      	bne.n	80076a6 <xQueueSemaphoreTake+0x86>
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	b672      	cpsid	i
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	b662      	cpsie	i
 80076a2:	61bb      	str	r3, [r7, #24]
 80076a4:	e7fe      	b.n	80076a4 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80076a6:	f001 fbaf 	bl	8008e08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80076aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80076b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d024      	beq.n	8007700 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80076b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b8:	1e5a      	subs	r2, r3, #1
 80076ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076bc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d104      	bne.n	80076d0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80076c6:	f001 fa1f 	bl	8008b08 <pvTaskIncrementMutexHeldCount>
 80076ca:	4602      	mov	r2, r0
 80076cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ce:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00f      	beq.n	80076f8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076da:	3310      	adds	r3, #16
 80076dc:	4618      	mov	r0, r3
 80076de:	f000 fe93 	bl	8008408 <xTaskRemoveFromEventList>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d007      	beq.n	80076f8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80076e8:	4b54      	ldr	r3, [pc, #336]	; (800783c <xQueueSemaphoreTake+0x21c>)
 80076ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80076f8:	f001 fbb8 	bl	8008e6c <vPortExitCritical>
				return pdPASS;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e098      	b.n	8007832 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d112      	bne.n	800772c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00b      	beq.n	8007724 <xQueueSemaphoreTake+0x104>
 800770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007710:	b672      	cpsid	i
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	b662      	cpsie	i
 8007720:	617b      	str	r3, [r7, #20]
 8007722:	e7fe      	b.n	8007722 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007724:	f001 fba2 	bl	8008e6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007728:	2300      	movs	r3, #0
 800772a:	e082      	b.n	8007832 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800772c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772e:	2b00      	cmp	r3, #0
 8007730:	d106      	bne.n	8007740 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007732:	f107 030c 	add.w	r3, r7, #12
 8007736:	4618      	mov	r0, r3
 8007738:	f000 feca 	bl	80084d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800773c:	2301      	movs	r3, #1
 800773e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007740:	f001 fb94 	bl	8008e6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007744:	f000 fc56 	bl	8007ff4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007748:	f001 fb5e 	bl	8008e08 <vPortEnterCritical>
 800774c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007752:	b25b      	sxtb	r3, r3
 8007754:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007758:	d103      	bne.n	8007762 <xQueueSemaphoreTake+0x142>
 800775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007764:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007768:	b25b      	sxtb	r3, r3
 800776a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800776e:	d103      	bne.n	8007778 <xQueueSemaphoreTake+0x158>
 8007770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007772:	2200      	movs	r2, #0
 8007774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007778:	f001 fb78 	bl	8008e6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800777c:	463a      	mov	r2, r7
 800777e:	f107 030c 	add.w	r3, r7, #12
 8007782:	4611      	mov	r1, r2
 8007784:	4618      	mov	r0, r3
 8007786:	f000 feb9 	bl	80084fc <xTaskCheckForTimeOut>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d132      	bne.n	80077f6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007790:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007792:	f000 f9d2 	bl	8007b3a <prvIsQueueEmpty>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d026      	beq.n	80077ea <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800779c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d109      	bne.n	80077b8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80077a4:	f001 fb30 	bl	8008e08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	4618      	mov	r0, r3
 80077ae:	f001 f807 	bl	80087c0 <xTaskPriorityInherit>
 80077b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80077b4:	f001 fb5a 	bl	8008e6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80077b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ba:	3324      	adds	r3, #36	; 0x24
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	4611      	mov	r1, r2
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 fdfb 	bl	80083bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80077c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077c8:	f000 f965 	bl	8007a96 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80077cc:	f000 fc20 	bl	8008010 <xTaskResumeAll>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f47f af67 	bne.w	80076a6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80077d8:	4b18      	ldr	r3, [pc, #96]	; (800783c <xQueueSemaphoreTake+0x21c>)
 80077da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	e75d      	b.n	80076a6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80077ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077ec:	f000 f953 	bl	8007a96 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077f0:	f000 fc0e 	bl	8008010 <xTaskResumeAll>
 80077f4:	e757      	b.n	80076a6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80077f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80077f8:	f000 f94d 	bl	8007a96 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077fc:	f000 fc08 	bl	8008010 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007800:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007802:	f000 f99a 	bl	8007b3a <prvIsQueueEmpty>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	f43f af4c 	beq.w	80076a6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00d      	beq.n	8007830 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007814:	f001 faf8 	bl	8008e08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007818:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800781a:	f000 f894 	bl	8007946 <prvGetDisinheritPriorityAfterTimeout>
 800781e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007826:	4618      	mov	r0, r3
 8007828:	f001 f8d2 	bl	80089d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800782c:	f001 fb1e 	bl	8008e6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007830:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007832:	4618      	mov	r0, r3
 8007834:	3738      	adds	r7, #56	; 0x38
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	e000ed04 	.word	0xe000ed04

08007840 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08e      	sub	sp, #56	; 0x38
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10b      	bne.n	800786e <xQueueReceiveFromISR+0x2e>
 8007856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785a:	b672      	cpsid	i
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	b662      	cpsie	i
 800786a:	623b      	str	r3, [r7, #32]
 800786c:	e7fe      	b.n	800786c <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d103      	bne.n	800787c <xQueueReceiveFromISR+0x3c>
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007878:	2b00      	cmp	r3, #0
 800787a:	d101      	bne.n	8007880 <xQueueReceiveFromISR+0x40>
 800787c:	2301      	movs	r3, #1
 800787e:	e000      	b.n	8007882 <xQueueReceiveFromISR+0x42>
 8007880:	2300      	movs	r3, #0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10b      	bne.n	800789e <xQueueReceiveFromISR+0x5e>
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	b672      	cpsid	i
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	b662      	cpsie	i
 800789a:	61fb      	str	r3, [r7, #28]
 800789c:	e7fe      	b.n	800789c <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800789e:	f001 fb93 	bl	8008fc8 <vPortValidateInterruptPriority>
	__asm volatile
 80078a2:	f3ef 8211 	mrs	r2, BASEPRI
 80078a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078aa:	b672      	cpsid	i
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	b662      	cpsie	i
 80078ba:	61ba      	str	r2, [r7, #24]
 80078bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80078be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d02f      	beq.n	800792e <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80078ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078d8:	68b9      	ldr	r1, [r7, #8]
 80078da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078dc:	f000 f8b5 	bl	8007a4a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e2:	1e5a      	subs	r2, r3, #1
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80078e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078f0:	d112      	bne.n	8007918 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d016      	beq.n	8007928 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	3310      	adds	r3, #16
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fd82 	bl	8008408 <xTaskRemoveFromEventList>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00e      	beq.n	8007928 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d00b      	beq.n	8007928 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	601a      	str	r2, [r3, #0]
 8007916:	e007      	b.n	8007928 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800791c:	3301      	adds	r3, #1
 800791e:	b2db      	uxtb	r3, r3
 8007920:	b25a      	sxtb	r2, r3
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007928:	2301      	movs	r3, #1
 800792a:	637b      	str	r3, [r7, #52]	; 0x34
 800792c:	e001      	b.n	8007932 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 800792e:	2300      	movs	r3, #0
 8007930:	637b      	str	r3, [r7, #52]	; 0x34
 8007932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007934:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800793c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800793e:	4618      	mov	r0, r3
 8007940:	3738      	adds	r7, #56	; 0x38
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007946:	b480      	push	{r7}
 8007948:	b085      	sub	sp, #20
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007952:	2b00      	cmp	r3, #0
 8007954:	d006      	beq.n	8007964 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f1c3 0307 	rsb	r3, r3, #7
 8007960:	60fb      	str	r3, [r7, #12]
 8007962:	e001      	b.n	8007968 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007964:	2300      	movs	r3, #0
 8007966:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007968:	68fb      	ldr	r3, [r7, #12]
	}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b086      	sub	sp, #24
 800797a:	af00      	add	r7, sp, #0
 800797c:	60f8      	str	r0, [r7, #12]
 800797e:	60b9      	str	r1, [r7, #8]
 8007980:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007982:	2300      	movs	r3, #0
 8007984:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10d      	bne.n	80079b0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d14d      	bne.n	8007a38 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 ff8d 	bl	80088c0 <xTaskPriorityDisinherit>
 80079a6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	609a      	str	r2, [r3, #8]
 80079ae:	e043      	b.n	8007a38 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d119      	bne.n	80079ea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6858      	ldr	r0, [r3, #4]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079be:	461a      	mov	r2, r3
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	f00d faec 	bl	8014f9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	441a      	add	r2, r3
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d32b      	bcc.n	8007a38 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	605a      	str	r2, [r3, #4]
 80079e8:	e026      	b.n	8007a38 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	68d8      	ldr	r0, [r3, #12]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f2:	461a      	mov	r2, r3
 80079f4:	68b9      	ldr	r1, [r7, #8]
 80079f6:	f00d fad2 	bl	8014f9e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	425b      	negs	r3, r3
 8007a04:	441a      	add	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	68da      	ldr	r2, [r3, #12]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d207      	bcs.n	8007a26 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	689a      	ldr	r2, [r3, #8]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1e:	425b      	negs	r3, r3
 8007a20:	441a      	add	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d105      	bne.n	8007a38 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d002      	beq.n	8007a38 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	3b01      	subs	r3, #1
 8007a36:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007a40:	697b      	ldr	r3, [r7, #20]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3718      	adds	r7, #24
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b082      	sub	sp, #8
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d018      	beq.n	8007a8e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a64:	441a      	add	r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d303      	bcc.n	8007a7e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68d9      	ldr	r1, [r3, #12]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a86:	461a      	mov	r2, r3
 8007a88:	6838      	ldr	r0, [r7, #0]
 8007a8a:	f00d fa88 	bl	8014f9e <memcpy>
	}
}
 8007a8e:	bf00      	nop
 8007a90:	3708      	adds	r7, #8
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b084      	sub	sp, #16
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a9e:	f001 f9b3 	bl	8008e08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aa8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007aaa:	e011      	b.n	8007ad0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d012      	beq.n	8007ada <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	3324      	adds	r3, #36	; 0x24
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 fca5 	bl	8008408 <xTaskRemoveFromEventList>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d001      	beq.n	8007ac8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ac4:	f000 fd7e 	bl	80085c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ac8:	7bfb      	ldrb	r3, [r7, #15]
 8007aca:	3b01      	subs	r3, #1
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	dce9      	bgt.n	8007aac <prvUnlockQueue+0x16>
 8007ad8:	e000      	b.n	8007adc <prvUnlockQueue+0x46>
					break;
 8007ada:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	22ff      	movs	r2, #255	; 0xff
 8007ae0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007ae4:	f001 f9c2 	bl	8008e6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007ae8:	f001 f98e 	bl	8008e08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007af2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007af4:	e011      	b.n	8007b1a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d012      	beq.n	8007b24 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3310      	adds	r3, #16
 8007b02:	4618      	mov	r0, r3
 8007b04:	f000 fc80 	bl	8008408 <xTaskRemoveFromEventList>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b0e:	f000 fd59 	bl	80085c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	b2db      	uxtb	r3, r3
 8007b18:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	dce9      	bgt.n	8007af6 <prvUnlockQueue+0x60>
 8007b22:	e000      	b.n	8007b26 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b24:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	22ff      	movs	r2, #255	; 0xff
 8007b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007b2e:	f001 f99d 	bl	8008e6c <vPortExitCritical>
}
 8007b32:	bf00      	nop
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b084      	sub	sp, #16
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b42:	f001 f961 	bl	8008e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d102      	bne.n	8007b54 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]
 8007b52:	e001      	b.n	8007b58 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007b54:	2300      	movs	r3, #0
 8007b56:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b58:	f001 f988 	bl	8008e6c <vPortExitCritical>

	return xReturn;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3710      	adds	r7, #16
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b084      	sub	sp, #16
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b6e:	f001 f94b 	bl	8008e08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d102      	bne.n	8007b84 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	60fb      	str	r3, [r7, #12]
 8007b82:	e001      	b.n	8007b88 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b84:	2300      	movs	r3, #0
 8007b86:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b88:	f001 f970 	bl	8008e6c <vPortExitCritical>

	return xReturn;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b08e      	sub	sp, #56	; 0x38
 8007b9a:	af04      	add	r7, sp, #16
 8007b9c:	60f8      	str	r0, [r7, #12]
 8007b9e:	60b9      	str	r1, [r7, #8]
 8007ba0:	607a      	str	r2, [r7, #4]
 8007ba2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10b      	bne.n	8007bc2 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	b672      	cpsid	i
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	b662      	cpsie	i
 8007bbe:	623b      	str	r3, [r7, #32]
 8007bc0:	e7fe      	b.n	8007bc0 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10b      	bne.n	8007be0 <xTaskCreateStatic+0x4a>
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	b672      	cpsid	i
 8007bce:	f383 8811 	msr	BASEPRI, r3
 8007bd2:	f3bf 8f6f 	isb	sy
 8007bd6:	f3bf 8f4f 	dsb	sy
 8007bda:	b662      	cpsie	i
 8007bdc:	61fb      	str	r3, [r7, #28]
 8007bde:	e7fe      	b.n	8007bde <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007be0:	2354      	movs	r3, #84	; 0x54
 8007be2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	2b54      	cmp	r3, #84	; 0x54
 8007be8:	d00b      	beq.n	8007c02 <xTaskCreateStatic+0x6c>
 8007bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bee:	b672      	cpsid	i
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	b662      	cpsie	i
 8007bfe:	61bb      	str	r3, [r7, #24]
 8007c00:	e7fe      	b.n	8007c00 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007c02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d01e      	beq.n	8007c48 <xTaskCreateStatic+0xb2>
 8007c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d01b      	beq.n	8007c48 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	2202      	movs	r2, #2
 8007c1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c22:	2300      	movs	r3, #0
 8007c24:	9303      	str	r3, [sp, #12]
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	9302      	str	r3, [sp, #8]
 8007c2a:	f107 0314 	add.w	r3, r7, #20
 8007c2e:	9301      	str	r3, [sp, #4]
 8007c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	68b9      	ldr	r1, [r7, #8]
 8007c3a:	68f8      	ldr	r0, [r7, #12]
 8007c3c:	f000 f850 	bl	8007ce0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c42:	f000 f8d5 	bl	8007df0 <prvAddNewTaskToReadyList>
 8007c46:	e001      	b.n	8007c4c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007c4c:	697b      	ldr	r3, [r7, #20]
	}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3728      	adds	r7, #40	; 0x28
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b08c      	sub	sp, #48	; 0x30
 8007c5a:	af04      	add	r7, sp, #16
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	60b9      	str	r1, [r7, #8]
 8007c60:	603b      	str	r3, [r7, #0]
 8007c62:	4613      	mov	r3, r2
 8007c64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007c66:	88fb      	ldrh	r3, [r7, #6]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 f9ee 	bl	800904c <pvPortMalloc>
 8007c70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d00e      	beq.n	8007c96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007c78:	2054      	movs	r0, #84	; 0x54
 8007c7a:	f001 f9e7 	bl	800904c <pvPortMalloc>
 8007c7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	631a      	str	r2, [r3, #48]	; 0x30
 8007c8c:	e005      	b.n	8007c9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007c8e:	6978      	ldr	r0, [r7, #20]
 8007c90:	f001 faa4 	bl	80091dc <vPortFree>
 8007c94:	e001      	b.n	8007c9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c96:	2300      	movs	r3, #0
 8007c98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d017      	beq.n	8007cd0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007ca8:	88fa      	ldrh	r2, [r7, #6]
 8007caa:	2300      	movs	r3, #0
 8007cac:	9303      	str	r3, [sp, #12]
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	9302      	str	r3, [sp, #8]
 8007cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb4:	9301      	str	r3, [sp, #4]
 8007cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	68b9      	ldr	r1, [r7, #8]
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 f80e 	bl	8007ce0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007cc4:	69f8      	ldr	r0, [r7, #28]
 8007cc6:	f000 f893 	bl	8007df0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	61bb      	str	r3, [r7, #24]
 8007cce:	e002      	b.n	8007cd6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007cd6:	69bb      	ldr	r3, [r7, #24]
	}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3720      	adds	r7, #32
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b088      	sub	sp, #32
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cf2:	6879      	ldr	r1, [r7, #4]
 8007cf4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007cf8:	440b      	add	r3, r1
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	f023 0307 	bic.w	r3, r3, #7
 8007d06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	f003 0307 	and.w	r3, r3, #7
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00b      	beq.n	8007d2a <prvInitialiseNewTask+0x4a>
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	b672      	cpsid	i
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	b662      	cpsie	i
 8007d26:	617b      	str	r3, [r7, #20]
 8007d28:	e7fe      	b.n	8007d28 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d01f      	beq.n	8007d70 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d30:	2300      	movs	r3, #0
 8007d32:	61fb      	str	r3, [r7, #28]
 8007d34:	e012      	b.n	8007d5c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	7819      	ldrb	r1, [r3, #0]
 8007d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	4413      	add	r3, r2
 8007d44:	3334      	adds	r3, #52	; 0x34
 8007d46:	460a      	mov	r2, r1
 8007d48:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	4413      	add	r3, r2
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d006      	beq.n	8007d64 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d56:	69fb      	ldr	r3, [r7, #28]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	61fb      	str	r3, [r7, #28]
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	2b0f      	cmp	r3, #15
 8007d60:	d9e9      	bls.n	8007d36 <prvInitialiseNewTask+0x56>
 8007d62:	e000      	b.n	8007d66 <prvInitialiseNewTask+0x86>
			{
				break;
 8007d64:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007d6e:	e003      	b.n	8007d78 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	2b06      	cmp	r3, #6
 8007d7c:	d901      	bls.n	8007d82 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007d7e:	2306      	movs	r3, #6
 8007d80:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d86:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d8c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d90:	2200      	movs	r2, #0
 8007d92:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d96:	3304      	adds	r3, #4
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fe ff07 	bl	8006bac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	3318      	adds	r3, #24
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7fe ff02 	bl	8006bac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db0:	f1c3 0207 	rsb	r2, r3, #7
 8007db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007dbc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	68f9      	ldr	r1, [r7, #12]
 8007dd0:	69b8      	ldr	r0, [r7, #24]
 8007dd2:	f000 ff13 	bl	8008bfc <pxPortInitialiseStack>
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dda:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007de6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007de8:	bf00      	nop
 8007dea:	3720      	adds	r7, #32
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007df8:	f001 f806 	bl	8008e08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007dfc:	4b2a      	ldr	r3, [pc, #168]	; (8007ea8 <prvAddNewTaskToReadyList+0xb8>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3301      	adds	r3, #1
 8007e02:	4a29      	ldr	r2, [pc, #164]	; (8007ea8 <prvAddNewTaskToReadyList+0xb8>)
 8007e04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e06:	4b29      	ldr	r3, [pc, #164]	; (8007eac <prvAddNewTaskToReadyList+0xbc>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d109      	bne.n	8007e22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e0e:	4a27      	ldr	r2, [pc, #156]	; (8007eac <prvAddNewTaskToReadyList+0xbc>)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007e14:	4b24      	ldr	r3, [pc, #144]	; (8007ea8 <prvAddNewTaskToReadyList+0xb8>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d110      	bne.n	8007e3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007e1c:	f000 fbf6 	bl	800860c <prvInitialiseTaskLists>
 8007e20:	e00d      	b.n	8007e3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007e22:	4b23      	ldr	r3, [pc, #140]	; (8007eb0 <prvAddNewTaskToReadyList+0xc0>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d109      	bne.n	8007e3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007e2a:	4b20      	ldr	r3, [pc, #128]	; (8007eac <prvAddNewTaskToReadyList+0xbc>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d802      	bhi.n	8007e3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007e38:	4a1c      	ldr	r2, [pc, #112]	; (8007eac <prvAddNewTaskToReadyList+0xbc>)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007e3e:	4b1d      	ldr	r3, [pc, #116]	; (8007eb4 <prvAddNewTaskToReadyList+0xc4>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	3301      	adds	r3, #1
 8007e44:	4a1b      	ldr	r2, [pc, #108]	; (8007eb4 <prvAddNewTaskToReadyList+0xc4>)
 8007e46:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	409a      	lsls	r2, r3
 8007e50:	4b19      	ldr	r3, [pc, #100]	; (8007eb8 <prvAddNewTaskToReadyList+0xc8>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	4a18      	ldr	r2, [pc, #96]	; (8007eb8 <prvAddNewTaskToReadyList+0xc8>)
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5e:	4613      	mov	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4a15      	ldr	r2, [pc, #84]	; (8007ebc <prvAddNewTaskToReadyList+0xcc>)
 8007e68:	441a      	add	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	4619      	mov	r1, r3
 8007e70:	4610      	mov	r0, r2
 8007e72:	f7fe fea8 	bl	8006bc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e76:	f000 fff9 	bl	8008e6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e7a:	4b0d      	ldr	r3, [pc, #52]	; (8007eb0 <prvAddNewTaskToReadyList+0xc0>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00e      	beq.n	8007ea0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e82:	4b0a      	ldr	r3, [pc, #40]	; (8007eac <prvAddNewTaskToReadyList+0xbc>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d207      	bcs.n	8007ea0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e90:	4b0b      	ldr	r3, [pc, #44]	; (8007ec0 <prvAddNewTaskToReadyList+0xd0>)
 8007e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ea0:	bf00      	nop
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	20000404 	.word	0x20000404
 8007eac:	20000304 	.word	0x20000304
 8007eb0:	20000410 	.word	0x20000410
 8007eb4:	20000420 	.word	0x20000420
 8007eb8:	2000040c 	.word	0x2000040c
 8007ebc:	20000308 	.word	0x20000308
 8007ec0:	e000ed04 	.word	0xe000ed04

08007ec4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d018      	beq.n	8007f08 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007ed6:	4b14      	ldr	r3, [pc, #80]	; (8007f28 <vTaskDelay+0x64>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d00b      	beq.n	8007ef6 <vTaskDelay+0x32>
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	b672      	cpsid	i
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	b662      	cpsie	i
 8007ef2:	60bb      	str	r3, [r7, #8]
 8007ef4:	e7fe      	b.n	8007ef4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8007ef6:	f000 f87d 	bl	8007ff4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007efa:	2100      	movs	r1, #0
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fe17 	bl	8008b30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f02:	f000 f885 	bl	8008010 <xTaskResumeAll>
 8007f06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d107      	bne.n	8007f1e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007f0e:	4b07      	ldr	r3, [pc, #28]	; (8007f2c <vTaskDelay+0x68>)
 8007f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f1e:	bf00      	nop
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	2000042c 	.word	0x2000042c
 8007f2c:	e000ed04 	.word	0xe000ed04

08007f30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08a      	sub	sp, #40	; 0x28
 8007f34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007f36:	2300      	movs	r3, #0
 8007f38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007f3e:	463a      	mov	r2, r7
 8007f40:	1d39      	adds	r1, r7, #4
 8007f42:	f107 0308 	add.w	r3, r7, #8
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7f8 fb62 	bl	8000610 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007f4c:	6839      	ldr	r1, [r7, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	9202      	str	r2, [sp, #8]
 8007f54:	9301      	str	r3, [sp, #4]
 8007f56:	2300      	movs	r3, #0
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	460a      	mov	r2, r1
 8007f5e:	491f      	ldr	r1, [pc, #124]	; (8007fdc <vTaskStartScheduler+0xac>)
 8007f60:	481f      	ldr	r0, [pc, #124]	; (8007fe0 <vTaskStartScheduler+0xb0>)
 8007f62:	f7ff fe18 	bl	8007b96 <xTaskCreateStatic>
 8007f66:	4602      	mov	r2, r0
 8007f68:	4b1e      	ldr	r3, [pc, #120]	; (8007fe4 <vTaskStartScheduler+0xb4>)
 8007f6a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007f6c:	4b1d      	ldr	r3, [pc, #116]	; (8007fe4 <vTaskStartScheduler+0xb4>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d002      	beq.n	8007f7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f74:	2301      	movs	r3, #1
 8007f76:	617b      	str	r3, [r7, #20]
 8007f78:	e001      	b.n	8007f7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d117      	bne.n	8007fb4 <vTaskStartScheduler+0x84>
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	b672      	cpsid	i
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	b662      	cpsie	i
 8007f98:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f9a:	4b13      	ldr	r3, [pc, #76]	; (8007fe8 <vTaskStartScheduler+0xb8>)
 8007f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007fa2:	4b12      	ldr	r3, [pc, #72]	; (8007fec <vTaskStartScheduler+0xbc>)
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007fa8:	4b11      	ldr	r3, [pc, #68]	; (8007ff0 <vTaskStartScheduler+0xc0>)
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007fae:	f000 feaf 	bl	8008d10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007fb2:	e00f      	b.n	8007fd4 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007fba:	d10b      	bne.n	8007fd4 <vTaskStartScheduler+0xa4>
 8007fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc0:	b672      	cpsid	i
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	b662      	cpsie	i
 8007fd0:	60fb      	str	r3, [r7, #12]
 8007fd2:	e7fe      	b.n	8007fd2 <vTaskStartScheduler+0xa2>
}
 8007fd4:	bf00      	nop
 8007fd6:	3718      	adds	r7, #24
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	08015f20 	.word	0x08015f20
 8007fe0:	080085dd 	.word	0x080085dd
 8007fe4:	20000428 	.word	0x20000428
 8007fe8:	20000424 	.word	0x20000424
 8007fec:	20000410 	.word	0x20000410
 8007ff0:	20000408 	.word	0x20000408

08007ff4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007ff8:	4b04      	ldr	r3, [pc, #16]	; (800800c <vTaskSuspendAll+0x18>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	4a03      	ldr	r2, [pc, #12]	; (800800c <vTaskSuspendAll+0x18>)
 8008000:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008002:	bf00      	nop
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	2000042c 	.word	0x2000042c

08008010 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008016:	2300      	movs	r3, #0
 8008018:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800801a:	2300      	movs	r3, #0
 800801c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800801e:	4b42      	ldr	r3, [pc, #264]	; (8008128 <xTaskResumeAll+0x118>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10b      	bne.n	800803e <xTaskResumeAll+0x2e>
 8008026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802a:	b672      	cpsid	i
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	b662      	cpsie	i
 800803a:	603b      	str	r3, [r7, #0]
 800803c:	e7fe      	b.n	800803c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800803e:	f000 fee3 	bl	8008e08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008042:	4b39      	ldr	r3, [pc, #228]	; (8008128 <xTaskResumeAll+0x118>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3b01      	subs	r3, #1
 8008048:	4a37      	ldr	r2, [pc, #220]	; (8008128 <xTaskResumeAll+0x118>)
 800804a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800804c:	4b36      	ldr	r3, [pc, #216]	; (8008128 <xTaskResumeAll+0x118>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d161      	bne.n	8008118 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008054:	4b35      	ldr	r3, [pc, #212]	; (800812c <xTaskResumeAll+0x11c>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d05d      	beq.n	8008118 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800805c:	e02e      	b.n	80080bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800805e:	4b34      	ldr	r3, [pc, #208]	; (8008130 <xTaskResumeAll+0x120>)
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	3318      	adds	r3, #24
 800806a:	4618      	mov	r0, r3
 800806c:	f7fe fe08 	bl	8006c80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3304      	adds	r3, #4
 8008074:	4618      	mov	r0, r3
 8008076:	f7fe fe03 	bl	8006c80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807e:	2201      	movs	r2, #1
 8008080:	409a      	lsls	r2, r3
 8008082:	4b2c      	ldr	r3, [pc, #176]	; (8008134 <xTaskResumeAll+0x124>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4313      	orrs	r3, r2
 8008088:	4a2a      	ldr	r2, [pc, #168]	; (8008134 <xTaskResumeAll+0x124>)
 800808a:	6013      	str	r3, [r2, #0]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008090:	4613      	mov	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4a27      	ldr	r2, [pc, #156]	; (8008138 <xTaskResumeAll+0x128>)
 800809a:	441a      	add	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	3304      	adds	r3, #4
 80080a0:	4619      	mov	r1, r3
 80080a2:	4610      	mov	r0, r2
 80080a4:	f7fe fd8f 	bl	8006bc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ac:	4b23      	ldr	r3, [pc, #140]	; (800813c <xTaskResumeAll+0x12c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d302      	bcc.n	80080bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80080b6:	4b22      	ldr	r3, [pc, #136]	; (8008140 <xTaskResumeAll+0x130>)
 80080b8:	2201      	movs	r2, #1
 80080ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80080bc:	4b1c      	ldr	r3, [pc, #112]	; (8008130 <xTaskResumeAll+0x120>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1cc      	bne.n	800805e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80080ca:	f000 fb3b 	bl	8008744 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80080ce:	4b1d      	ldr	r3, [pc, #116]	; (8008144 <xTaskResumeAll+0x134>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d010      	beq.n	80080fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80080da:	f000 f859 	bl	8008190 <xTaskIncrementTick>
 80080de:	4603      	mov	r3, r0
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80080e4:	4b16      	ldr	r3, [pc, #88]	; (8008140 <xTaskResumeAll+0x130>)
 80080e6:	2201      	movs	r2, #1
 80080e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1f1      	bne.n	80080da <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80080f6:	4b13      	ldr	r3, [pc, #76]	; (8008144 <xTaskResumeAll+0x134>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80080fc:	4b10      	ldr	r3, [pc, #64]	; (8008140 <xTaskResumeAll+0x130>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d009      	beq.n	8008118 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008104:	2301      	movs	r3, #1
 8008106:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008108:	4b0f      	ldr	r3, [pc, #60]	; (8008148 <xTaskResumeAll+0x138>)
 800810a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800810e:	601a      	str	r2, [r3, #0]
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008118:	f000 fea8 	bl	8008e6c <vPortExitCritical>

	return xAlreadyYielded;
 800811c:	68bb      	ldr	r3, [r7, #8]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	2000042c 	.word	0x2000042c
 800812c:	20000404 	.word	0x20000404
 8008130:	200003c4 	.word	0x200003c4
 8008134:	2000040c 	.word	0x2000040c
 8008138:	20000308 	.word	0x20000308
 800813c:	20000304 	.word	0x20000304
 8008140:	20000418 	.word	0x20000418
 8008144:	20000414 	.word	0x20000414
 8008148:	e000ed04 	.word	0xe000ed04

0800814c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008152:	4b05      	ldr	r3, [pc, #20]	; (8008168 <xTaskGetTickCount+0x1c>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008158:	687b      	ldr	r3, [r7, #4]
}
 800815a:	4618      	mov	r0, r3
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
 8008166:	bf00      	nop
 8008168:	20000408 	.word	0x20000408

0800816c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008172:	f000 ff29 	bl	8008fc8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008176:	2300      	movs	r3, #0
 8008178:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800817a:	4b04      	ldr	r3, [pc, #16]	; (800818c <xTaskGetTickCountFromISR+0x20>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008180:	683b      	ldr	r3, [r7, #0]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	20000408 	.word	0x20000408

08008190 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008196:	2300      	movs	r3, #0
 8008198:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800819a:	4b4f      	ldr	r3, [pc, #316]	; (80082d8 <xTaskIncrementTick+0x148>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f040 8089 	bne.w	80082b6 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80081a4:	4b4d      	ldr	r3, [pc, #308]	; (80082dc <xTaskIncrementTick+0x14c>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3301      	adds	r3, #1
 80081aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80081ac:	4a4b      	ldr	r2, [pc, #300]	; (80082dc <xTaskIncrementTick+0x14c>)
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d121      	bne.n	80081fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80081b8:	4b49      	ldr	r3, [pc, #292]	; (80082e0 <xTaskIncrementTick+0x150>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00b      	beq.n	80081da <xTaskIncrementTick+0x4a>
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	b672      	cpsid	i
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	b662      	cpsie	i
 80081d6:	603b      	str	r3, [r7, #0]
 80081d8:	e7fe      	b.n	80081d8 <xTaskIncrementTick+0x48>
 80081da:	4b41      	ldr	r3, [pc, #260]	; (80082e0 <xTaskIncrementTick+0x150>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	60fb      	str	r3, [r7, #12]
 80081e0:	4b40      	ldr	r3, [pc, #256]	; (80082e4 <xTaskIncrementTick+0x154>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a3e      	ldr	r2, [pc, #248]	; (80082e0 <xTaskIncrementTick+0x150>)
 80081e6:	6013      	str	r3, [r2, #0]
 80081e8:	4a3e      	ldr	r2, [pc, #248]	; (80082e4 <xTaskIncrementTick+0x154>)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6013      	str	r3, [r2, #0]
 80081ee:	4b3e      	ldr	r3, [pc, #248]	; (80082e8 <xTaskIncrementTick+0x158>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	3301      	adds	r3, #1
 80081f4:	4a3c      	ldr	r2, [pc, #240]	; (80082e8 <xTaskIncrementTick+0x158>)
 80081f6:	6013      	str	r3, [r2, #0]
 80081f8:	f000 faa4 	bl	8008744 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80081fc:	4b3b      	ldr	r3, [pc, #236]	; (80082ec <xTaskIncrementTick+0x15c>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	429a      	cmp	r2, r3
 8008204:	d348      	bcc.n	8008298 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008206:	4b36      	ldr	r3, [pc, #216]	; (80082e0 <xTaskIncrementTick+0x150>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d104      	bne.n	800821a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008210:	4b36      	ldr	r3, [pc, #216]	; (80082ec <xTaskIncrementTick+0x15c>)
 8008212:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008216:	601a      	str	r2, [r3, #0]
					break;
 8008218:	e03e      	b.n	8008298 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800821a:	4b31      	ldr	r3, [pc, #196]	; (80082e0 <xTaskIncrementTick+0x150>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	429a      	cmp	r2, r3
 8008230:	d203      	bcs.n	800823a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008232:	4a2e      	ldr	r2, [pc, #184]	; (80082ec <xTaskIncrementTick+0x15c>)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008238:	e02e      	b.n	8008298 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	3304      	adds	r3, #4
 800823e:	4618      	mov	r0, r3
 8008240:	f7fe fd1e 	bl	8006c80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008248:	2b00      	cmp	r3, #0
 800824a:	d004      	beq.n	8008256 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	3318      	adds	r3, #24
 8008250:	4618      	mov	r0, r3
 8008252:	f7fe fd15 	bl	8006c80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825a:	2201      	movs	r2, #1
 800825c:	409a      	lsls	r2, r3
 800825e:	4b24      	ldr	r3, [pc, #144]	; (80082f0 <xTaskIncrementTick+0x160>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4313      	orrs	r3, r2
 8008264:	4a22      	ldr	r2, [pc, #136]	; (80082f0 <xTaskIncrementTick+0x160>)
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800826c:	4613      	mov	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4a1f      	ldr	r2, [pc, #124]	; (80082f4 <xTaskIncrementTick+0x164>)
 8008276:	441a      	add	r2, r3
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	3304      	adds	r3, #4
 800827c:	4619      	mov	r1, r3
 800827e:	4610      	mov	r0, r2
 8008280:	f7fe fca1 	bl	8006bc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008288:	4b1b      	ldr	r3, [pc, #108]	; (80082f8 <xTaskIncrementTick+0x168>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828e:	429a      	cmp	r2, r3
 8008290:	d3b9      	bcc.n	8008206 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008292:	2301      	movs	r3, #1
 8008294:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008296:	e7b6      	b.n	8008206 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008298:	4b17      	ldr	r3, [pc, #92]	; (80082f8 <xTaskIncrementTick+0x168>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829e:	4915      	ldr	r1, [pc, #84]	; (80082f4 <xTaskIncrementTick+0x164>)
 80082a0:	4613      	mov	r3, r2
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	440b      	add	r3, r1
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d907      	bls.n	80082c0 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 80082b0:	2301      	movs	r3, #1
 80082b2:	617b      	str	r3, [r7, #20]
 80082b4:	e004      	b.n	80082c0 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80082b6:	4b11      	ldr	r3, [pc, #68]	; (80082fc <xTaskIncrementTick+0x16c>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3301      	adds	r3, #1
 80082bc:	4a0f      	ldr	r2, [pc, #60]	; (80082fc <xTaskIncrementTick+0x16c>)
 80082be:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80082c0:	4b0f      	ldr	r3, [pc, #60]	; (8008300 <xTaskIncrementTick+0x170>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80082c8:	2301      	movs	r3, #1
 80082ca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80082cc:	697b      	ldr	r3, [r7, #20]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	2000042c 	.word	0x2000042c
 80082dc:	20000408 	.word	0x20000408
 80082e0:	200003bc 	.word	0x200003bc
 80082e4:	200003c0 	.word	0x200003c0
 80082e8:	2000041c 	.word	0x2000041c
 80082ec:	20000424 	.word	0x20000424
 80082f0:	2000040c 	.word	0x2000040c
 80082f4:	20000308 	.word	0x20000308
 80082f8:	20000304 	.word	0x20000304
 80082fc:	20000414 	.word	0x20000414
 8008300:	20000418 	.word	0x20000418

08008304 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008304:	b480      	push	{r7}
 8008306:	b087      	sub	sp, #28
 8008308:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800830a:	4b27      	ldr	r3, [pc, #156]	; (80083a8 <vTaskSwitchContext+0xa4>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d003      	beq.n	800831a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008312:	4b26      	ldr	r3, [pc, #152]	; (80083ac <vTaskSwitchContext+0xa8>)
 8008314:	2201      	movs	r2, #1
 8008316:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008318:	e040      	b.n	800839c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800831a:	4b24      	ldr	r3, [pc, #144]	; (80083ac <vTaskSwitchContext+0xa8>)
 800831c:	2200      	movs	r2, #0
 800831e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008320:	4b23      	ldr	r3, [pc, #140]	; (80083b0 <vTaskSwitchContext+0xac>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	fab3 f383 	clz	r3, r3
 800832c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800832e:	7afb      	ldrb	r3, [r7, #11]
 8008330:	f1c3 031f 	rsb	r3, r3, #31
 8008334:	617b      	str	r3, [r7, #20]
 8008336:	491f      	ldr	r1, [pc, #124]	; (80083b4 <vTaskSwitchContext+0xb0>)
 8008338:	697a      	ldr	r2, [r7, #20]
 800833a:	4613      	mov	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4413      	add	r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	440b      	add	r3, r1
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10b      	bne.n	8008362 <vTaskSwitchContext+0x5e>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	b672      	cpsid	i
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	b662      	cpsie	i
 800835e:	607b      	str	r3, [r7, #4]
 8008360:	e7fe      	b.n	8008360 <vTaskSwitchContext+0x5c>
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	4613      	mov	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4a11      	ldr	r2, [pc, #68]	; (80083b4 <vTaskSwitchContext+0xb0>)
 800836e:	4413      	add	r3, r2
 8008370:	613b      	str	r3, [r7, #16]
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	685a      	ldr	r2, [r3, #4]
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	605a      	str	r2, [r3, #4]
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	3308      	adds	r3, #8
 8008384:	429a      	cmp	r2, r3
 8008386:	d104      	bne.n	8008392 <vTaskSwitchContext+0x8e>
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	605a      	str	r2, [r3, #4]
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	4a07      	ldr	r2, [pc, #28]	; (80083b8 <vTaskSwitchContext+0xb4>)
 800839a:	6013      	str	r3, [r2, #0]
}
 800839c:	bf00      	nop
 800839e:	371c      	adds	r7, #28
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr
 80083a8:	2000042c 	.word	0x2000042c
 80083ac:	20000418 	.word	0x20000418
 80083b0:	2000040c 	.word	0x2000040c
 80083b4:	20000308 	.word	0x20000308
 80083b8:	20000304 	.word	0x20000304

080083bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b084      	sub	sp, #16
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d10b      	bne.n	80083e4 <vTaskPlaceOnEventList+0x28>
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	b672      	cpsid	i
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	b662      	cpsie	i
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	e7fe      	b.n	80083e2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083e4:	4b07      	ldr	r3, [pc, #28]	; (8008404 <vTaskPlaceOnEventList+0x48>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3318      	adds	r3, #24
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f7fe fc0e 	bl	8006c0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80083f2:	2101      	movs	r1, #1
 80083f4:	6838      	ldr	r0, [r7, #0]
 80083f6:	f000 fb9b 	bl	8008b30 <prvAddCurrentTaskToDelayedList>
}
 80083fa:	bf00      	nop
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000304 	.word	0x20000304

08008408 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10b      	bne.n	8008436 <xTaskRemoveFromEventList+0x2e>
 800841e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008422:	b672      	cpsid	i
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	b662      	cpsie	i
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	e7fe      	b.n	8008434 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	3318      	adds	r3, #24
 800843a:	4618      	mov	r0, r3
 800843c:	f7fe fc20 	bl	8006c80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008440:	4b1d      	ldr	r3, [pc, #116]	; (80084b8 <xTaskRemoveFromEventList+0xb0>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d11c      	bne.n	8008482 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	3304      	adds	r3, #4
 800844c:	4618      	mov	r0, r3
 800844e:	f7fe fc17 	bl	8006c80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008456:	2201      	movs	r2, #1
 8008458:	409a      	lsls	r2, r3
 800845a:	4b18      	ldr	r3, [pc, #96]	; (80084bc <xTaskRemoveFromEventList+0xb4>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4313      	orrs	r3, r2
 8008460:	4a16      	ldr	r2, [pc, #88]	; (80084bc <xTaskRemoveFromEventList+0xb4>)
 8008462:	6013      	str	r3, [r2, #0]
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008468:	4613      	mov	r3, r2
 800846a:	009b      	lsls	r3, r3, #2
 800846c:	4413      	add	r3, r2
 800846e:	009b      	lsls	r3, r3, #2
 8008470:	4a13      	ldr	r2, [pc, #76]	; (80084c0 <xTaskRemoveFromEventList+0xb8>)
 8008472:	441a      	add	r2, r3
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	3304      	adds	r3, #4
 8008478:	4619      	mov	r1, r3
 800847a:	4610      	mov	r0, r2
 800847c:	f7fe fba3 	bl	8006bc6 <vListInsertEnd>
 8008480:	e005      	b.n	800848e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	3318      	adds	r3, #24
 8008486:	4619      	mov	r1, r3
 8008488:	480e      	ldr	r0, [pc, #56]	; (80084c4 <xTaskRemoveFromEventList+0xbc>)
 800848a:	f7fe fb9c 	bl	8006bc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008492:	4b0d      	ldr	r3, [pc, #52]	; (80084c8 <xTaskRemoveFromEventList+0xc0>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008498:	429a      	cmp	r2, r3
 800849a:	d905      	bls.n	80084a8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800849c:	2301      	movs	r3, #1
 800849e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80084a0:	4b0a      	ldr	r3, [pc, #40]	; (80084cc <xTaskRemoveFromEventList+0xc4>)
 80084a2:	2201      	movs	r2, #1
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	e001      	b.n	80084ac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80084a8:	2300      	movs	r3, #0
 80084aa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80084ac:	697b      	ldr	r3, [r7, #20]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	2000042c 	.word	0x2000042c
 80084bc:	2000040c 	.word	0x2000040c
 80084c0:	20000308 	.word	0x20000308
 80084c4:	200003c4 	.word	0x200003c4
 80084c8:	20000304 	.word	0x20000304
 80084cc:	20000418 	.word	0x20000418

080084d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80084d8:	4b06      	ldr	r3, [pc, #24]	; (80084f4 <vTaskInternalSetTimeOutState+0x24>)
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80084e0:	4b05      	ldr	r3, [pc, #20]	; (80084f8 <vTaskInternalSetTimeOutState+0x28>)
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	605a      	str	r2, [r3, #4]
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	2000041c 	.word	0x2000041c
 80084f8:	20000408 	.word	0x20000408

080084fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b088      	sub	sp, #32
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d10b      	bne.n	8008524 <xTaskCheckForTimeOut+0x28>
 800850c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008510:	b672      	cpsid	i
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	b662      	cpsie	i
 8008520:	613b      	str	r3, [r7, #16]
 8008522:	e7fe      	b.n	8008522 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d10b      	bne.n	8008542 <xTaskCheckForTimeOut+0x46>
 800852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852e:	b672      	cpsid	i
 8008530:	f383 8811 	msr	BASEPRI, r3
 8008534:	f3bf 8f6f 	isb	sy
 8008538:	f3bf 8f4f 	dsb	sy
 800853c:	b662      	cpsie	i
 800853e:	60fb      	str	r3, [r7, #12]
 8008540:	e7fe      	b.n	8008540 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8008542:	f000 fc61 	bl	8008e08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008546:	4b1d      	ldr	r3, [pc, #116]	; (80085bc <xTaskCheckForTimeOut+0xc0>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800855e:	d102      	bne.n	8008566 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008560:	2300      	movs	r3, #0
 8008562:	61fb      	str	r3, [r7, #28]
 8008564:	e023      	b.n	80085ae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	4b15      	ldr	r3, [pc, #84]	; (80085c0 <xTaskCheckForTimeOut+0xc4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	429a      	cmp	r2, r3
 8008570:	d007      	beq.n	8008582 <xTaskCheckForTimeOut+0x86>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	69ba      	ldr	r2, [r7, #24]
 8008578:	429a      	cmp	r2, r3
 800857a:	d302      	bcc.n	8008582 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800857c:	2301      	movs	r3, #1
 800857e:	61fb      	str	r3, [r7, #28]
 8008580:	e015      	b.n	80085ae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	429a      	cmp	r2, r3
 800858a:	d20b      	bcs.n	80085a4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	1ad2      	subs	r2, r2, r3
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7ff ff99 	bl	80084d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800859e:	2300      	movs	r3, #0
 80085a0:	61fb      	str	r3, [r7, #28]
 80085a2:	e004      	b.n	80085ae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2200      	movs	r2, #0
 80085a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80085aa:	2301      	movs	r3, #1
 80085ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80085ae:	f000 fc5d 	bl	8008e6c <vPortExitCritical>

	return xReturn;
 80085b2:	69fb      	ldr	r3, [r7, #28]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3720      	adds	r7, #32
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	20000408 	.word	0x20000408
 80085c0:	2000041c 	.word	0x2000041c

080085c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80085c4:	b480      	push	{r7}
 80085c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80085c8:	4b03      	ldr	r3, [pc, #12]	; (80085d8 <vTaskMissedYield+0x14>)
 80085ca:	2201      	movs	r2, #1
 80085cc:	601a      	str	r2, [r3, #0]
}
 80085ce:	bf00      	nop
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	20000418 	.word	0x20000418

080085dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80085e4:	f000 f852 	bl	800868c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085e8:	4b06      	ldr	r3, [pc, #24]	; (8008604 <prvIdleTask+0x28>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d9f9      	bls.n	80085e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80085f0:	4b05      	ldr	r3, [pc, #20]	; (8008608 <prvIdleTask+0x2c>)
 80085f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085f6:	601a      	str	r2, [r3, #0]
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008600:	e7f0      	b.n	80085e4 <prvIdleTask+0x8>
 8008602:	bf00      	nop
 8008604:	20000308 	.word	0x20000308
 8008608:	e000ed04 	.word	0xe000ed04

0800860c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800860c:	b580      	push	{r7, lr}
 800860e:	b082      	sub	sp, #8
 8008610:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008612:	2300      	movs	r3, #0
 8008614:	607b      	str	r3, [r7, #4]
 8008616:	e00c      	b.n	8008632 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	4613      	mov	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4413      	add	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4a12      	ldr	r2, [pc, #72]	; (800866c <prvInitialiseTaskLists+0x60>)
 8008624:	4413      	add	r3, r2
 8008626:	4618      	mov	r0, r3
 8008628:	f7fe faa0 	bl	8006b6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	3301      	adds	r3, #1
 8008630:	607b      	str	r3, [r7, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b06      	cmp	r3, #6
 8008636:	d9ef      	bls.n	8008618 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008638:	480d      	ldr	r0, [pc, #52]	; (8008670 <prvInitialiseTaskLists+0x64>)
 800863a:	f7fe fa97 	bl	8006b6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800863e:	480d      	ldr	r0, [pc, #52]	; (8008674 <prvInitialiseTaskLists+0x68>)
 8008640:	f7fe fa94 	bl	8006b6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008644:	480c      	ldr	r0, [pc, #48]	; (8008678 <prvInitialiseTaskLists+0x6c>)
 8008646:	f7fe fa91 	bl	8006b6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800864a:	480c      	ldr	r0, [pc, #48]	; (800867c <prvInitialiseTaskLists+0x70>)
 800864c:	f7fe fa8e 	bl	8006b6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008650:	480b      	ldr	r0, [pc, #44]	; (8008680 <prvInitialiseTaskLists+0x74>)
 8008652:	f7fe fa8b 	bl	8006b6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008656:	4b0b      	ldr	r3, [pc, #44]	; (8008684 <prvInitialiseTaskLists+0x78>)
 8008658:	4a05      	ldr	r2, [pc, #20]	; (8008670 <prvInitialiseTaskLists+0x64>)
 800865a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800865c:	4b0a      	ldr	r3, [pc, #40]	; (8008688 <prvInitialiseTaskLists+0x7c>)
 800865e:	4a05      	ldr	r2, [pc, #20]	; (8008674 <prvInitialiseTaskLists+0x68>)
 8008660:	601a      	str	r2, [r3, #0]
}
 8008662:	bf00      	nop
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	20000308 	.word	0x20000308
 8008670:	20000394 	.word	0x20000394
 8008674:	200003a8 	.word	0x200003a8
 8008678:	200003c4 	.word	0x200003c4
 800867c:	200003d8 	.word	0x200003d8
 8008680:	200003f0 	.word	0x200003f0
 8008684:	200003bc 	.word	0x200003bc
 8008688:	200003c0 	.word	0x200003c0

0800868c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008692:	e019      	b.n	80086c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008694:	f000 fbb8 	bl	8008e08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008698:	4b0f      	ldr	r3, [pc, #60]	; (80086d8 <prvCheckTasksWaitingTermination+0x4c>)
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	3304      	adds	r3, #4
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fe faeb 	bl	8006c80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80086aa:	4b0c      	ldr	r3, [pc, #48]	; (80086dc <prvCheckTasksWaitingTermination+0x50>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	3b01      	subs	r3, #1
 80086b0:	4a0a      	ldr	r2, [pc, #40]	; (80086dc <prvCheckTasksWaitingTermination+0x50>)
 80086b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086b4:	4b0a      	ldr	r3, [pc, #40]	; (80086e0 <prvCheckTasksWaitingTermination+0x54>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3b01      	subs	r3, #1
 80086ba:	4a09      	ldr	r2, [pc, #36]	; (80086e0 <prvCheckTasksWaitingTermination+0x54>)
 80086bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086be:	f000 fbd5 	bl	8008e6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 f80e 	bl	80086e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086c8:	4b05      	ldr	r3, [pc, #20]	; (80086e0 <prvCheckTasksWaitingTermination+0x54>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1e1      	bne.n	8008694 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80086d0:	bf00      	nop
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}
 80086d8:	200003d8 	.word	0x200003d8
 80086dc:	20000404 	.word	0x20000404
 80086e0:	200003ec 	.word	0x200003ec

080086e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d108      	bne.n	8008708 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 fd6e 	bl	80091dc <vPortFree>
				vPortFree( pxTCB );
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fd6b 	bl	80091dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008706:	e019      	b.n	800873c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800870e:	2b01      	cmp	r3, #1
 8008710:	d103      	bne.n	800871a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fd62 	bl	80091dc <vPortFree>
	}
 8008718:	e010      	b.n	800873c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008720:	2b02      	cmp	r3, #2
 8008722:	d00b      	beq.n	800873c <prvDeleteTCB+0x58>
 8008724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008728:	b672      	cpsid	i
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	b662      	cpsie	i
 8008738:	60fb      	str	r3, [r7, #12]
 800873a:	e7fe      	b.n	800873a <prvDeleteTCB+0x56>
	}
 800873c:	bf00      	nop
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800874a:	4b0c      	ldr	r3, [pc, #48]	; (800877c <prvResetNextTaskUnblockTime+0x38>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d104      	bne.n	800875e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008754:	4b0a      	ldr	r3, [pc, #40]	; (8008780 <prvResetNextTaskUnblockTime+0x3c>)
 8008756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800875a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800875c:	e008      	b.n	8008770 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800875e:	4b07      	ldr	r3, [pc, #28]	; (800877c <prvResetNextTaskUnblockTime+0x38>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	4a04      	ldr	r2, [pc, #16]	; (8008780 <prvResetNextTaskUnblockTime+0x3c>)
 800876e:	6013      	str	r3, [r2, #0]
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr
 800877c:	200003bc 	.word	0x200003bc
 8008780:	20000424 	.word	0x20000424

08008784 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800878a:	4b0b      	ldr	r3, [pc, #44]	; (80087b8 <xTaskGetSchedulerState+0x34>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d102      	bne.n	8008798 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008792:	2301      	movs	r3, #1
 8008794:	607b      	str	r3, [r7, #4]
 8008796:	e008      	b.n	80087aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008798:	4b08      	ldr	r3, [pc, #32]	; (80087bc <xTaskGetSchedulerState+0x38>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d102      	bne.n	80087a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80087a0:	2302      	movs	r3, #2
 80087a2:	607b      	str	r3, [r7, #4]
 80087a4:	e001      	b.n	80087aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80087a6:	2300      	movs	r3, #0
 80087a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087aa:	687b      	ldr	r3, [r7, #4]
	}
 80087ac:	4618      	mov	r0, r3
 80087ae:	370c      	adds	r7, #12
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr
 80087b8:	20000410 	.word	0x20000410
 80087bc:	2000042c 	.word	0x2000042c

080087c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80087cc:	2300      	movs	r3, #0
 80087ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d069      	beq.n	80088aa <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087da:	4b36      	ldr	r3, [pc, #216]	; (80088b4 <xTaskPriorityInherit+0xf4>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d259      	bcs.n	8008898 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	699b      	ldr	r3, [r3, #24]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	db06      	blt.n	80087fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ec:	4b31      	ldr	r3, [pc, #196]	; (80088b4 <xTaskPriorityInherit+0xf4>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f2:	f1c3 0207 	rsb	r2, r3, #7
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	6959      	ldr	r1, [r3, #20]
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008802:	4613      	mov	r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	4a2b      	ldr	r2, [pc, #172]	; (80088b8 <xTaskPriorityInherit+0xf8>)
 800880c:	4413      	add	r3, r2
 800880e:	4299      	cmp	r1, r3
 8008810:	d13a      	bne.n	8008888 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	3304      	adds	r3, #4
 8008816:	4618      	mov	r0, r3
 8008818:	f7fe fa32 	bl	8006c80 <uxListRemove>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d115      	bne.n	800884e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008826:	4924      	ldr	r1, [pc, #144]	; (80088b8 <xTaskPriorityInherit+0xf8>)
 8008828:	4613      	mov	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	440b      	add	r3, r1
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10a      	bne.n	800884e <xTaskPriorityInherit+0x8e>
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883c:	2201      	movs	r2, #1
 800883e:	fa02 f303 	lsl.w	r3, r2, r3
 8008842:	43da      	mvns	r2, r3
 8008844:	4b1d      	ldr	r3, [pc, #116]	; (80088bc <xTaskPriorityInherit+0xfc>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4013      	ands	r3, r2
 800884a:	4a1c      	ldr	r2, [pc, #112]	; (80088bc <xTaskPriorityInherit+0xfc>)
 800884c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800884e:	4b19      	ldr	r3, [pc, #100]	; (80088b4 <xTaskPriorityInherit+0xf4>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885c:	2201      	movs	r2, #1
 800885e:	409a      	lsls	r2, r3
 8008860:	4b16      	ldr	r3, [pc, #88]	; (80088bc <xTaskPriorityInherit+0xfc>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4313      	orrs	r3, r2
 8008866:	4a15      	ldr	r2, [pc, #84]	; (80088bc <xTaskPriorityInherit+0xfc>)
 8008868:	6013      	str	r3, [r2, #0]
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800886e:	4613      	mov	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	4a10      	ldr	r2, [pc, #64]	; (80088b8 <xTaskPriorityInherit+0xf8>)
 8008878:	441a      	add	r2, r3
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	3304      	adds	r3, #4
 800887e:	4619      	mov	r1, r3
 8008880:	4610      	mov	r0, r2
 8008882:	f7fe f9a0 	bl	8006bc6 <vListInsertEnd>
 8008886:	e004      	b.n	8008892 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008888:	4b0a      	ldr	r3, [pc, #40]	; (80088b4 <xTaskPriorityInherit+0xf4>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008892:	2301      	movs	r3, #1
 8008894:	60fb      	str	r3, [r7, #12]
 8008896:	e008      	b.n	80088aa <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800889c:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <xTaskPriorityInherit+0xf4>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d201      	bcs.n	80088aa <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80088a6:	2301      	movs	r3, #1
 80088a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80088aa:	68fb      	ldr	r3, [r7, #12]
	}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	20000304 	.word	0x20000304
 80088b8:	20000308 	.word	0x20000308
 80088bc:	2000040c 	.word	0x2000040c

080088c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80088cc:	2300      	movs	r3, #0
 80088ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d070      	beq.n	80089b8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80088d6:	4b3b      	ldr	r3, [pc, #236]	; (80089c4 <xTaskPriorityDisinherit+0x104>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d00b      	beq.n	80088f8 <xTaskPriorityDisinherit+0x38>
 80088e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e4:	b672      	cpsid	i
 80088e6:	f383 8811 	msr	BASEPRI, r3
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	f3bf 8f4f 	dsb	sy
 80088f2:	b662      	cpsie	i
 80088f4:	60fb      	str	r3, [r7, #12]
 80088f6:	e7fe      	b.n	80088f6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10b      	bne.n	8008918 <xTaskPriorityDisinherit+0x58>
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	b672      	cpsid	i
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	b662      	cpsie	i
 8008914:	60bb      	str	r3, [r7, #8]
 8008916:	e7fe      	b.n	8008916 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800891c:	1e5a      	subs	r2, r3, #1
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800892a:	429a      	cmp	r2, r3
 800892c:	d044      	beq.n	80089b8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008932:	2b00      	cmp	r3, #0
 8008934:	d140      	bne.n	80089b8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	3304      	adds	r3, #4
 800893a:	4618      	mov	r0, r3
 800893c:	f7fe f9a0 	bl	8006c80 <uxListRemove>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d115      	bne.n	8008972 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894a:	491f      	ldr	r1, [pc, #124]	; (80089c8 <xTaskPriorityDisinherit+0x108>)
 800894c:	4613      	mov	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	440b      	add	r3, r1
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10a      	bne.n	8008972 <xTaskPriorityDisinherit+0xb2>
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008960:	2201      	movs	r2, #1
 8008962:	fa02 f303 	lsl.w	r3, r2, r3
 8008966:	43da      	mvns	r2, r3
 8008968:	4b18      	ldr	r3, [pc, #96]	; (80089cc <xTaskPriorityDisinherit+0x10c>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4013      	ands	r3, r2
 800896e:	4a17      	ldr	r2, [pc, #92]	; (80089cc <xTaskPriorityDisinherit+0x10c>)
 8008970:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897e:	f1c3 0207 	rsb	r2, r3, #7
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898a:	2201      	movs	r2, #1
 800898c:	409a      	lsls	r2, r3
 800898e:	4b0f      	ldr	r3, [pc, #60]	; (80089cc <xTaskPriorityDisinherit+0x10c>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4313      	orrs	r3, r2
 8008994:	4a0d      	ldr	r2, [pc, #52]	; (80089cc <xTaskPriorityDisinherit+0x10c>)
 8008996:	6013      	str	r3, [r2, #0]
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899c:	4613      	mov	r3, r2
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	4a08      	ldr	r2, [pc, #32]	; (80089c8 <xTaskPriorityDisinherit+0x108>)
 80089a6:	441a      	add	r2, r3
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	3304      	adds	r3, #4
 80089ac:	4619      	mov	r1, r3
 80089ae:	4610      	mov	r0, r2
 80089b0:	f7fe f909 	bl	8006bc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80089b4:	2301      	movs	r3, #1
 80089b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80089b8:	697b      	ldr	r3, [r7, #20]
	}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	20000304 	.word	0x20000304
 80089c8:	20000308 	.word	0x20000308
 80089cc:	2000040c 	.word	0x2000040c

080089d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b088      	sub	sp, #32
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80089de:	2301      	movs	r3, #1
 80089e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	f000 8085 	beq.w	8008af4 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d10b      	bne.n	8008a0a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 80089f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f6:	b672      	cpsid	i
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	b662      	cpsie	i
 8008a06:	60fb      	str	r3, [r7, #12]
 8008a08:	e7fe      	b.n	8008a08 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0e:	683a      	ldr	r2, [r7, #0]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d902      	bls.n	8008a1a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	61fb      	str	r3, [r7, #28]
 8008a18:	e002      	b.n	8008a20 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a1e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a24:	69fa      	ldr	r2, [r7, #28]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d064      	beq.n	8008af4 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d15f      	bne.n	8008af4 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008a34:	4b31      	ldr	r3, [pc, #196]	; (8008afc <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d10b      	bne.n	8008a56 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	b672      	cpsid	i
 8008a44:	f383 8811 	msr	BASEPRI, r3
 8008a48:	f3bf 8f6f 	isb	sy
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	b662      	cpsie	i
 8008a52:	60bb      	str	r3, [r7, #8]
 8008a54:	e7fe      	b.n	8008a54 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008a5c:	69bb      	ldr	r3, [r7, #24]
 8008a5e:	69fa      	ldr	r2, [r7, #28]
 8008a60:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	699b      	ldr	r3, [r3, #24]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	db04      	blt.n	8008a74 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	f1c3 0207 	rsb	r2, r3, #7
 8008a70:	69bb      	ldr	r3, [r7, #24]
 8008a72:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	6959      	ldr	r1, [r3, #20]
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	009b      	lsls	r3, r3, #2
 8008a82:	4a1f      	ldr	r2, [pc, #124]	; (8008b00 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008a84:	4413      	add	r3, r2
 8008a86:	4299      	cmp	r1, r3
 8008a88:	d134      	bne.n	8008af4 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7fe f8f6 	bl	8006c80 <uxListRemove>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d115      	bne.n	8008ac6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008a9a:	69bb      	ldr	r3, [r7, #24]
 8008a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9e:	4918      	ldr	r1, [pc, #96]	; (8008b00 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	009b      	lsls	r3, r3, #2
 8008aa4:	4413      	add	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	440b      	add	r3, r1
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10a      	bne.n	8008ac6 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8008ab0:	69bb      	ldr	r3, [r7, #24]
 8008ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aba:	43da      	mvns	r2, r3
 8008abc:	4b11      	ldr	r3, [pc, #68]	; (8008b04 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	4a10      	ldr	r2, [pc, #64]	; (8008b04 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008ac4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aca:	2201      	movs	r2, #1
 8008acc:	409a      	lsls	r2, r3
 8008ace:	4b0d      	ldr	r3, [pc, #52]	; (8008b04 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	4a0b      	ldr	r2, [pc, #44]	; (8008b04 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008ad6:	6013      	str	r3, [r2, #0]
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008adc:	4613      	mov	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4a06      	ldr	r2, [pc, #24]	; (8008b00 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008ae6:	441a      	add	r2, r3
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	3304      	adds	r3, #4
 8008aec:	4619      	mov	r1, r3
 8008aee:	4610      	mov	r0, r2
 8008af0:	f7fe f869 	bl	8006bc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008af4:	bf00      	nop
 8008af6:	3720      	adds	r7, #32
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	20000304 	.word	0x20000304
 8008b00:	20000308 	.word	0x20000308
 8008b04:	2000040c 	.word	0x2000040c

08008b08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b08:	b480      	push	{r7}
 8008b0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b0c:	4b07      	ldr	r3, [pc, #28]	; (8008b2c <pvTaskIncrementMutexHeldCount+0x24>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d004      	beq.n	8008b1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008b14:	4b05      	ldr	r3, [pc, #20]	; (8008b2c <pvTaskIncrementMutexHeldCount+0x24>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b1a:	3201      	adds	r2, #1
 8008b1c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008b1e:	4b03      	ldr	r3, [pc, #12]	; (8008b2c <pvTaskIncrementMutexHeldCount+0x24>)
 8008b20:	681b      	ldr	r3, [r3, #0]
	}
 8008b22:	4618      	mov	r0, r3
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	20000304 	.word	0x20000304

08008b30 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b3a:	4b29      	ldr	r3, [pc, #164]	; (8008be0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b40:	4b28      	ldr	r3, [pc, #160]	; (8008be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3304      	adds	r3, #4
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fe f89a 	bl	8006c80 <uxListRemove>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d10b      	bne.n	8008b6a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008b52:	4b24      	ldr	r3, [pc, #144]	; (8008be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b58:	2201      	movs	r2, #1
 8008b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5e:	43da      	mvns	r2, r3
 8008b60:	4b21      	ldr	r3, [pc, #132]	; (8008be8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4013      	ands	r3, r2
 8008b66:	4a20      	ldr	r2, [pc, #128]	; (8008be8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008b68:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b70:	d10a      	bne.n	8008b88 <prvAddCurrentTaskToDelayedList+0x58>
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d007      	beq.n	8008b88 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b78:	4b1a      	ldr	r3, [pc, #104]	; (8008be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	3304      	adds	r3, #4
 8008b7e:	4619      	mov	r1, r3
 8008b80:	481a      	ldr	r0, [pc, #104]	; (8008bec <prvAddCurrentTaskToDelayedList+0xbc>)
 8008b82:	f7fe f820 	bl	8006bc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b86:	e026      	b.n	8008bd6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b90:	4b14      	ldr	r3, [pc, #80]	; (8008be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d209      	bcs.n	8008bb4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ba0:	4b13      	ldr	r3, [pc, #76]	; (8008bf0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	4b0f      	ldr	r3, [pc, #60]	; (8008be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3304      	adds	r3, #4
 8008baa:	4619      	mov	r1, r3
 8008bac:	4610      	mov	r0, r2
 8008bae:	f7fe f82e 	bl	8006c0e <vListInsert>
}
 8008bb2:	e010      	b.n	8008bd6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bb4:	4b0f      	ldr	r3, [pc, #60]	; (8008bf4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	4b0a      	ldr	r3, [pc, #40]	; (8008be4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	f7fe f824 	bl	8006c0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008bc6:	4b0c      	ldr	r3, [pc, #48]	; (8008bf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	68ba      	ldr	r2, [r7, #8]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d202      	bcs.n	8008bd6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008bd0:	4a09      	ldr	r2, [pc, #36]	; (8008bf8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	6013      	str	r3, [r2, #0]
}
 8008bd6:	bf00      	nop
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	20000408 	.word	0x20000408
 8008be4:	20000304 	.word	0x20000304
 8008be8:	2000040c 	.word	0x2000040c
 8008bec:	200003f0 	.word	0x200003f0
 8008bf0:	200003c0 	.word	0x200003c0
 8008bf4:	200003bc 	.word	0x200003bc
 8008bf8:	20000424 	.word	0x20000424

08008bfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b085      	sub	sp, #20
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	3b04      	subs	r3, #4
 8008c0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	3b04      	subs	r3, #4
 8008c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	f023 0201 	bic.w	r2, r3, #1
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3b04      	subs	r3, #4
 8008c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c2c:	4a0c      	ldr	r2, [pc, #48]	; (8008c60 <pxPortInitialiseStack+0x64>)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	3b14      	subs	r3, #20
 8008c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	3b04      	subs	r3, #4
 8008c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f06f 0202 	mvn.w	r2, #2
 8008c4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3b20      	subs	r3, #32
 8008c50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c52:	68fb      	ldr	r3, [r7, #12]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3714      	adds	r7, #20
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr
 8008c60:	08008c65 	.word	0x08008c65

08008c64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c6e:	4b13      	ldr	r3, [pc, #76]	; (8008cbc <prvTaskExitError+0x58>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c76:	d00b      	beq.n	8008c90 <prvTaskExitError+0x2c>
 8008c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7c:	b672      	cpsid	i
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	b662      	cpsie	i
 8008c8c:	60fb      	str	r3, [r7, #12]
 8008c8e:	e7fe      	b.n	8008c8e <prvTaskExitError+0x2a>
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	b672      	cpsid	i
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	b662      	cpsie	i
 8008ca4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ca6:	bf00      	nop
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d0fc      	beq.n	8008ca8 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008cae:	bf00      	nop
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	2000000c 	.word	0x2000000c

08008cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008cc0:	4b07      	ldr	r3, [pc, #28]	; (8008ce0 <pxCurrentTCBConst2>)
 8008cc2:	6819      	ldr	r1, [r3, #0]
 8008cc4:	6808      	ldr	r0, [r1, #0]
 8008cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cca:	f380 8809 	msr	PSP, r0
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f04f 0000 	mov.w	r0, #0
 8008cd6:	f380 8811 	msr	BASEPRI, r0
 8008cda:	4770      	bx	lr
 8008cdc:	f3af 8000 	nop.w

08008ce0 <pxCurrentTCBConst2>:
 8008ce0:	20000304 	.word	0x20000304
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop

08008ce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ce8:	4808      	ldr	r0, [pc, #32]	; (8008d0c <prvPortStartFirstTask+0x24>)
 8008cea:	6800      	ldr	r0, [r0, #0]
 8008cec:	6800      	ldr	r0, [r0, #0]
 8008cee:	f380 8808 	msr	MSP, r0
 8008cf2:	f04f 0000 	mov.w	r0, #0
 8008cf6:	f380 8814 	msr	CONTROL, r0
 8008cfa:	b662      	cpsie	i
 8008cfc:	b661      	cpsie	f
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	f3bf 8f6f 	isb	sy
 8008d06:	df00      	svc	0
 8008d08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d0a:	bf00      	nop
 8008d0c:	e000ed08 	.word	0xe000ed08

08008d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d16:	4b36      	ldr	r3, [pc, #216]	; (8008df0 <xPortStartScheduler+0xe0>)
 8008d18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	22ff      	movs	r2, #255	; 0xff
 8008d26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d30:	78fb      	ldrb	r3, [r7, #3]
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d38:	b2da      	uxtb	r2, r3
 8008d3a:	4b2e      	ldr	r3, [pc, #184]	; (8008df4 <xPortStartScheduler+0xe4>)
 8008d3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d3e:	4b2e      	ldr	r3, [pc, #184]	; (8008df8 <xPortStartScheduler+0xe8>)
 8008d40:	2207      	movs	r2, #7
 8008d42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d44:	e009      	b.n	8008d5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008d46:	4b2c      	ldr	r3, [pc, #176]	; (8008df8 <xPortStartScheduler+0xe8>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	4a2a      	ldr	r2, [pc, #168]	; (8008df8 <xPortStartScheduler+0xe8>)
 8008d4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d50:	78fb      	ldrb	r3, [r7, #3]
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d5a:	78fb      	ldrb	r3, [r7, #3]
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d62:	2b80      	cmp	r3, #128	; 0x80
 8008d64:	d0ef      	beq.n	8008d46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d66:	4b24      	ldr	r3, [pc, #144]	; (8008df8 <xPortStartScheduler+0xe8>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f1c3 0307 	rsb	r3, r3, #7
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d00b      	beq.n	8008d8a <xPortStartScheduler+0x7a>
 8008d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d76:	b672      	cpsid	i
 8008d78:	f383 8811 	msr	BASEPRI, r3
 8008d7c:	f3bf 8f6f 	isb	sy
 8008d80:	f3bf 8f4f 	dsb	sy
 8008d84:	b662      	cpsie	i
 8008d86:	60bb      	str	r3, [r7, #8]
 8008d88:	e7fe      	b.n	8008d88 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d8a:	4b1b      	ldr	r3, [pc, #108]	; (8008df8 <xPortStartScheduler+0xe8>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	021b      	lsls	r3, r3, #8
 8008d90:	4a19      	ldr	r2, [pc, #100]	; (8008df8 <xPortStartScheduler+0xe8>)
 8008d92:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d94:	4b18      	ldr	r3, [pc, #96]	; (8008df8 <xPortStartScheduler+0xe8>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008d9c:	4a16      	ldr	r2, [pc, #88]	; (8008df8 <xPortStartScheduler+0xe8>)
 8008d9e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008da8:	4b14      	ldr	r3, [pc, #80]	; (8008dfc <xPortStartScheduler+0xec>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a13      	ldr	r2, [pc, #76]	; (8008dfc <xPortStartScheduler+0xec>)
 8008dae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008db2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008db4:	4b11      	ldr	r3, [pc, #68]	; (8008dfc <xPortStartScheduler+0xec>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a10      	ldr	r2, [pc, #64]	; (8008dfc <xPortStartScheduler+0xec>)
 8008dba:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008dbe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008dc0:	f000 f8d4 	bl	8008f6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008dc4:	4b0e      	ldr	r3, [pc, #56]	; (8008e00 <xPortStartScheduler+0xf0>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008dca:	f000 f8f3 	bl	8008fb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008dce:	4b0d      	ldr	r3, [pc, #52]	; (8008e04 <xPortStartScheduler+0xf4>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a0c      	ldr	r2, [pc, #48]	; (8008e04 <xPortStartScheduler+0xf4>)
 8008dd4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008dd8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008dda:	f7ff ff85 	bl	8008ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008dde:	f7ff fa91 	bl	8008304 <vTaskSwitchContext>
	prvTaskExitError();
 8008de2:	f7ff ff3f 	bl	8008c64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	e000e400 	.word	0xe000e400
 8008df4:	20000430 	.word	0x20000430
 8008df8:	20000434 	.word	0x20000434
 8008dfc:	e000ed20 	.word	0xe000ed20
 8008e00:	2000000c 	.word	0x2000000c
 8008e04:	e000ef34 	.word	0xe000ef34

08008e08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	b672      	cpsid	i
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	b662      	cpsie	i
 8008e22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e24:	4b0f      	ldr	r3, [pc, #60]	; (8008e64 <vPortEnterCritical+0x5c>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	4a0e      	ldr	r2, [pc, #56]	; (8008e64 <vPortEnterCritical+0x5c>)
 8008e2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e2e:	4b0d      	ldr	r3, [pc, #52]	; (8008e64 <vPortEnterCritical+0x5c>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d110      	bne.n	8008e58 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e36:	4b0c      	ldr	r3, [pc, #48]	; (8008e68 <vPortEnterCritical+0x60>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d00b      	beq.n	8008e58 <vPortEnterCritical+0x50>
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	b672      	cpsid	i
 8008e46:	f383 8811 	msr	BASEPRI, r3
 8008e4a:	f3bf 8f6f 	isb	sy
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	b662      	cpsie	i
 8008e54:	603b      	str	r3, [r7, #0]
 8008e56:	e7fe      	b.n	8008e56 <vPortEnterCritical+0x4e>
	}
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr
 8008e64:	2000000c 	.word	0x2000000c
 8008e68:	e000ed04 	.word	0xe000ed04

08008e6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b083      	sub	sp, #12
 8008e70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e72:	4b12      	ldr	r3, [pc, #72]	; (8008ebc <vPortExitCritical+0x50>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10b      	bne.n	8008e92 <vPortExitCritical+0x26>
 8008e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7e:	b672      	cpsid	i
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	b662      	cpsie	i
 8008e8e:	607b      	str	r3, [r7, #4]
 8008e90:	e7fe      	b.n	8008e90 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8008e92:	4b0a      	ldr	r3, [pc, #40]	; (8008ebc <vPortExitCritical+0x50>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3b01      	subs	r3, #1
 8008e98:	4a08      	ldr	r2, [pc, #32]	; (8008ebc <vPortExitCritical+0x50>)
 8008e9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e9c:	4b07      	ldr	r3, [pc, #28]	; (8008ebc <vPortExitCritical+0x50>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d104      	bne.n	8008eae <vPortExitCritical+0x42>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008eae:	bf00      	nop
 8008eb0:	370c      	adds	r7, #12
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	2000000c 	.word	0x2000000c

08008ec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ec0:	f3ef 8009 	mrs	r0, PSP
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	4b15      	ldr	r3, [pc, #84]	; (8008f20 <pxCurrentTCBConst>)
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	f01e 0f10 	tst.w	lr, #16
 8008ed0:	bf08      	it	eq
 8008ed2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ed6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eda:	6010      	str	r0, [r2, #0]
 8008edc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ee4:	b672      	cpsid	i
 8008ee6:	f380 8811 	msr	BASEPRI, r0
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	f3bf 8f6f 	isb	sy
 8008ef2:	b662      	cpsie	i
 8008ef4:	f7ff fa06 	bl	8008304 <vTaskSwitchContext>
 8008ef8:	f04f 0000 	mov.w	r0, #0
 8008efc:	f380 8811 	msr	BASEPRI, r0
 8008f00:	bc09      	pop	{r0, r3}
 8008f02:	6819      	ldr	r1, [r3, #0]
 8008f04:	6808      	ldr	r0, [r1, #0]
 8008f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0a:	f01e 0f10 	tst.w	lr, #16
 8008f0e:	bf08      	it	eq
 8008f10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f14:	f380 8809 	msr	PSP, r0
 8008f18:	f3bf 8f6f 	isb	sy
 8008f1c:	4770      	bx	lr
 8008f1e:	bf00      	nop

08008f20 <pxCurrentTCBConst>:
 8008f20:	20000304 	.word	0x20000304
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop

08008f28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b082      	sub	sp, #8
 8008f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f32:	b672      	cpsid	i
 8008f34:	f383 8811 	msr	BASEPRI, r3
 8008f38:	f3bf 8f6f 	isb	sy
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	b662      	cpsie	i
 8008f42:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f44:	f7ff f924 	bl	8008190 <xTaskIncrementTick>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d003      	beq.n	8008f56 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f4e:	4b06      	ldr	r3, [pc, #24]	; (8008f68 <SysTick_Handler+0x40>)
 8008f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	2300      	movs	r3, #0
 8008f58:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f60:	bf00      	nop
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	e000ed04 	.word	0xe000ed04

08008f6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f70:	4b0b      	ldr	r3, [pc, #44]	; (8008fa0 <vPortSetupTimerInterrupt+0x34>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f76:	4b0b      	ldr	r3, [pc, #44]	; (8008fa4 <vPortSetupTimerInterrupt+0x38>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f7c:	4b0a      	ldr	r3, [pc, #40]	; (8008fa8 <vPortSetupTimerInterrupt+0x3c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a0a      	ldr	r2, [pc, #40]	; (8008fac <vPortSetupTimerInterrupt+0x40>)
 8008f82:	fba2 2303 	umull	r2, r3, r2, r3
 8008f86:	099b      	lsrs	r3, r3, #6
 8008f88:	4a09      	ldr	r2, [pc, #36]	; (8008fb0 <vPortSetupTimerInterrupt+0x44>)
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f8e:	4b04      	ldr	r3, [pc, #16]	; (8008fa0 <vPortSetupTimerInterrupt+0x34>)
 8008f90:	2207      	movs	r2, #7
 8008f92:	601a      	str	r2, [r3, #0]
}
 8008f94:	bf00      	nop
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	e000e010 	.word	0xe000e010
 8008fa4:	e000e018 	.word	0xe000e018
 8008fa8:	20000000 	.word	0x20000000
 8008fac:	10624dd3 	.word	0x10624dd3
 8008fb0:	e000e014 	.word	0xe000e014

08008fb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008fb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008fc4 <vPortEnableVFP+0x10>
 8008fb8:	6801      	ldr	r1, [r0, #0]
 8008fba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008fbe:	6001      	str	r1, [r0, #0]
 8008fc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008fc2:	bf00      	nop
 8008fc4:	e000ed88 	.word	0xe000ed88

08008fc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008fce:	f3ef 8305 	mrs	r3, IPSR
 8008fd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2b0f      	cmp	r3, #15
 8008fd8:	d915      	bls.n	8009006 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008fda:	4a18      	ldr	r2, [pc, #96]	; (800903c <vPortValidateInterruptPriority+0x74>)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	4413      	add	r3, r2
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008fe4:	4b16      	ldr	r3, [pc, #88]	; (8009040 <vPortValidateInterruptPriority+0x78>)
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	7afa      	ldrb	r2, [r7, #11]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d20b      	bcs.n	8009006 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	b672      	cpsid	i
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	b662      	cpsie	i
 8009002:	607b      	str	r3, [r7, #4]
 8009004:	e7fe      	b.n	8009004 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009006:	4b0f      	ldr	r3, [pc, #60]	; (8009044 <vPortValidateInterruptPriority+0x7c>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800900e:	4b0e      	ldr	r3, [pc, #56]	; (8009048 <vPortValidateInterruptPriority+0x80>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	429a      	cmp	r2, r3
 8009014:	d90b      	bls.n	800902e <vPortValidateInterruptPriority+0x66>
 8009016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800901a:	b672      	cpsid	i
 800901c:	f383 8811 	msr	BASEPRI, r3
 8009020:	f3bf 8f6f 	isb	sy
 8009024:	f3bf 8f4f 	dsb	sy
 8009028:	b662      	cpsie	i
 800902a:	603b      	str	r3, [r7, #0]
 800902c:	e7fe      	b.n	800902c <vPortValidateInterruptPriority+0x64>
	}
 800902e:	bf00      	nop
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	e000e3f0 	.word	0xe000e3f0
 8009040:	20000430 	.word	0x20000430
 8009044:	e000ed0c 	.word	0xe000ed0c
 8009048:	20000434 	.word	0x20000434

0800904c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b08a      	sub	sp, #40	; 0x28
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009054:	2300      	movs	r3, #0
 8009056:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009058:	f7fe ffcc 	bl	8007ff4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800905c:	4b5a      	ldr	r3, [pc, #360]	; (80091c8 <pvPortMalloc+0x17c>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d101      	bne.n	8009068 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009064:	f000 f916 	bl	8009294 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009068:	4b58      	ldr	r3, [pc, #352]	; (80091cc <pvPortMalloc+0x180>)
 800906a:	681a      	ldr	r2, [r3, #0]
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4013      	ands	r3, r2
 8009070:	2b00      	cmp	r3, #0
 8009072:	f040 8090 	bne.w	8009196 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d01e      	beq.n	80090ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800907c:	2208      	movs	r2, #8
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4413      	add	r3, r2
 8009082:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f003 0307 	and.w	r3, r3, #7
 800908a:	2b00      	cmp	r3, #0
 800908c:	d015      	beq.n	80090ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f023 0307 	bic.w	r3, r3, #7
 8009094:	3308      	adds	r3, #8
 8009096:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f003 0307 	and.w	r3, r3, #7
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00b      	beq.n	80090ba <pvPortMalloc+0x6e>
 80090a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a6:	b672      	cpsid	i
 80090a8:	f383 8811 	msr	BASEPRI, r3
 80090ac:	f3bf 8f6f 	isb	sy
 80090b0:	f3bf 8f4f 	dsb	sy
 80090b4:	b662      	cpsie	i
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	e7fe      	b.n	80090b8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d06a      	beq.n	8009196 <pvPortMalloc+0x14a>
 80090c0:	4b43      	ldr	r3, [pc, #268]	; (80091d0 <pvPortMalloc+0x184>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d865      	bhi.n	8009196 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80090ca:	4b42      	ldr	r3, [pc, #264]	; (80091d4 <pvPortMalloc+0x188>)
 80090cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80090ce:	4b41      	ldr	r3, [pc, #260]	; (80091d4 <pvPortMalloc+0x188>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090d4:	e004      	b.n	80090e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80090d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d903      	bls.n	80090f2 <pvPortMalloc+0xa6>
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d1f1      	bne.n	80090d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090f2:	4b35      	ldr	r3, [pc, #212]	; (80091c8 <pvPortMalloc+0x17c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d04c      	beq.n	8009196 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090fc:	6a3b      	ldr	r3, [r7, #32]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2208      	movs	r2, #8
 8009102:	4413      	add	r3, r2
 8009104:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	6a3b      	ldr	r3, [r7, #32]
 800910c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800910e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009110:	685a      	ldr	r2, [r3, #4]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	1ad2      	subs	r2, r2, r3
 8009116:	2308      	movs	r3, #8
 8009118:	005b      	lsls	r3, r3, #1
 800911a:	429a      	cmp	r2, r3
 800911c:	d920      	bls.n	8009160 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800911e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4413      	add	r3, r2
 8009124:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	f003 0307 	and.w	r3, r3, #7
 800912c:	2b00      	cmp	r3, #0
 800912e:	d00b      	beq.n	8009148 <pvPortMalloc+0xfc>
 8009130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009134:	b672      	cpsid	i
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	b662      	cpsie	i
 8009144:	613b      	str	r3, [r7, #16]
 8009146:	e7fe      	b.n	8009146 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	1ad2      	subs	r2, r2, r3
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800915a:	69b8      	ldr	r0, [r7, #24]
 800915c:	f000 f8fc 	bl	8009358 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009160:	4b1b      	ldr	r3, [pc, #108]	; (80091d0 <pvPortMalloc+0x184>)
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	1ad3      	subs	r3, r2, r3
 800916a:	4a19      	ldr	r2, [pc, #100]	; (80091d0 <pvPortMalloc+0x184>)
 800916c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800916e:	4b18      	ldr	r3, [pc, #96]	; (80091d0 <pvPortMalloc+0x184>)
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	4b19      	ldr	r3, [pc, #100]	; (80091d8 <pvPortMalloc+0x18c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	429a      	cmp	r2, r3
 8009178:	d203      	bcs.n	8009182 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800917a:	4b15      	ldr	r3, [pc, #84]	; (80091d0 <pvPortMalloc+0x184>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a16      	ldr	r2, [pc, #88]	; (80091d8 <pvPortMalloc+0x18c>)
 8009180:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	4b11      	ldr	r3, [pc, #68]	; (80091cc <pvPortMalloc+0x180>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	431a      	orrs	r2, r3
 800918c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009196:	f7fe ff3b 	bl	8008010 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	f003 0307 	and.w	r3, r3, #7
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00b      	beq.n	80091bc <pvPortMalloc+0x170>
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	b672      	cpsid	i
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	b662      	cpsie	i
 80091b8:	60fb      	str	r3, [r7, #12]
 80091ba:	e7fe      	b.n	80091ba <pvPortMalloc+0x16e>
	return pvReturn;
 80091bc:	69fb      	ldr	r3, [r7, #28]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3728      	adds	r7, #40	; 0x28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bd80      	pop	{r7, pc}
 80091c6:	bf00      	nop
 80091c8:	20004040 	.word	0x20004040
 80091cc:	2000404c 	.word	0x2000404c
 80091d0:	20004044 	.word	0x20004044
 80091d4:	20004038 	.word	0x20004038
 80091d8:	20004048 	.word	0x20004048

080091dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d04a      	beq.n	8009284 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091ee:	2308      	movs	r3, #8
 80091f0:	425b      	negs	r3, r3
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	4413      	add	r3, r2
 80091f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	4b22      	ldr	r3, [pc, #136]	; (800928c <vPortFree+0xb0>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4013      	ands	r3, r2
 8009206:	2b00      	cmp	r3, #0
 8009208:	d10b      	bne.n	8009222 <vPortFree+0x46>
 800920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920e:	b672      	cpsid	i
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	b662      	cpsie	i
 800921e:	60fb      	str	r3, [r7, #12]
 8009220:	e7fe      	b.n	8009220 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00b      	beq.n	8009242 <vPortFree+0x66>
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	b672      	cpsid	i
 8009230:	f383 8811 	msr	BASEPRI, r3
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	b662      	cpsie	i
 800923e:	60bb      	str	r3, [r7, #8]
 8009240:	e7fe      	b.n	8009240 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	4b11      	ldr	r3, [pc, #68]	; (800928c <vPortFree+0xb0>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4013      	ands	r3, r2
 800924c:	2b00      	cmp	r3, #0
 800924e:	d019      	beq.n	8009284 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d115      	bne.n	8009284 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	685a      	ldr	r2, [r3, #4]
 800925c:	4b0b      	ldr	r3, [pc, #44]	; (800928c <vPortFree+0xb0>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	43db      	mvns	r3, r3
 8009262:	401a      	ands	r2, r3
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009268:	f7fe fec4 	bl	8007ff4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	685a      	ldr	r2, [r3, #4]
 8009270:	4b07      	ldr	r3, [pc, #28]	; (8009290 <vPortFree+0xb4>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4413      	add	r3, r2
 8009276:	4a06      	ldr	r2, [pc, #24]	; (8009290 <vPortFree+0xb4>)
 8009278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800927a:	6938      	ldr	r0, [r7, #16]
 800927c:	f000 f86c 	bl	8009358 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009280:	f7fe fec6 	bl	8008010 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009284:	bf00      	nop
 8009286:	3718      	adds	r7, #24
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	2000404c 	.word	0x2000404c
 8009290:	20004044 	.word	0x20004044

08009294 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800929a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800929e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80092a0:	4b27      	ldr	r3, [pc, #156]	; (8009340 <prvHeapInit+0xac>)
 80092a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f003 0307 	and.w	r3, r3, #7
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00c      	beq.n	80092c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	3307      	adds	r3, #7
 80092b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f023 0307 	bic.w	r3, r3, #7
 80092ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	4a1f      	ldr	r2, [pc, #124]	; (8009340 <prvHeapInit+0xac>)
 80092c4:	4413      	add	r3, r2
 80092c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80092cc:	4a1d      	ldr	r2, [pc, #116]	; (8009344 <prvHeapInit+0xb0>)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092d2:	4b1c      	ldr	r3, [pc, #112]	; (8009344 <prvHeapInit+0xb0>)
 80092d4:	2200      	movs	r2, #0
 80092d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	4413      	add	r3, r2
 80092de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092e0:	2208      	movs	r2, #8
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	1a9b      	subs	r3, r3, r2
 80092e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f023 0307 	bic.w	r3, r3, #7
 80092ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4a15      	ldr	r2, [pc, #84]	; (8009348 <prvHeapInit+0xb4>)
 80092f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092f6:	4b14      	ldr	r3, [pc, #80]	; (8009348 <prvHeapInit+0xb4>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2200      	movs	r2, #0
 80092fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092fe:	4b12      	ldr	r3, [pc, #72]	; (8009348 <prvHeapInit+0xb4>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2200      	movs	r2, #0
 8009304:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	68fa      	ldr	r2, [r7, #12]
 800930e:	1ad2      	subs	r2, r2, r3
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009314:	4b0c      	ldr	r3, [pc, #48]	; (8009348 <prvHeapInit+0xb4>)
 8009316:	681a      	ldr	r2, [r3, #0]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	4a0a      	ldr	r2, [pc, #40]	; (800934c <prvHeapInit+0xb8>)
 8009322:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	4a09      	ldr	r2, [pc, #36]	; (8009350 <prvHeapInit+0xbc>)
 800932a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800932c:	4b09      	ldr	r3, [pc, #36]	; (8009354 <prvHeapInit+0xc0>)
 800932e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009332:	601a      	str	r2, [r3, #0]
}
 8009334:	bf00      	nop
 8009336:	3714      	adds	r7, #20
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	20000438 	.word	0x20000438
 8009344:	20004038 	.word	0x20004038
 8009348:	20004040 	.word	0x20004040
 800934c:	20004048 	.word	0x20004048
 8009350:	20004044 	.word	0x20004044
 8009354:	2000404c 	.word	0x2000404c

08009358 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009360:	4b28      	ldr	r3, [pc, #160]	; (8009404 <prvInsertBlockIntoFreeList+0xac>)
 8009362:	60fb      	str	r3, [r7, #12]
 8009364:	e002      	b.n	800936c <prvInsertBlockIntoFreeList+0x14>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	429a      	cmp	r2, r3
 8009374:	d8f7      	bhi.n	8009366 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	4413      	add	r3, r2
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	429a      	cmp	r2, r3
 8009386:	d108      	bne.n	800939a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	441a      	add	r2, r3
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	441a      	add	r2, r3
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d118      	bne.n	80093e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	4b15      	ldr	r3, [pc, #84]	; (8009408 <prvInsertBlockIntoFreeList+0xb0>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	429a      	cmp	r2, r3
 80093b8:	d00d      	beq.n	80093d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685a      	ldr	r2, [r3, #4]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	441a      	add	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	e008      	b.n	80093e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093d6:	4b0c      	ldr	r3, [pc, #48]	; (8009408 <prvInsertBlockIntoFreeList+0xb0>)
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	e003      	b.n	80093e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d002      	beq.n	80093f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093f6:	bf00      	nop
 80093f8:	3714      	adds	r7, #20
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	20004038 	.word	0x20004038
 8009408:	20004040 	.word	0x20004040

0800940c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009416:	f008 ffcd 	bl	80123b4 <sys_timeouts_sleeptime>
 800941a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009422:	d10b      	bne.n	800943c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009424:	4813      	ldr	r0, [pc, #76]	; (8009474 <tcpip_timeouts_mbox_fetch+0x68>)
 8009426:	f00b fd36 	bl	8014e96 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800942a:	2200      	movs	r2, #0
 800942c:	6839      	ldr	r1, [r7, #0]
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f00b fca8 	bl	8014d84 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009434:	480f      	ldr	r0, [pc, #60]	; (8009474 <tcpip_timeouts_mbox_fetch+0x68>)
 8009436:	f00b fd1f 	bl	8014e78 <sys_mutex_lock>
    return;
 800943a:	e018      	b.n	800946e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d102      	bne.n	8009448 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8009442:	f008 ff7d 	bl	8012340 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8009446:	e7e6      	b.n	8009416 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009448:	480a      	ldr	r0, [pc, #40]	; (8009474 <tcpip_timeouts_mbox_fetch+0x68>)
 800944a:	f00b fd24 	bl	8014e96 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	6839      	ldr	r1, [r7, #0]
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f00b fc96 	bl	8014d84 <sys_arch_mbox_fetch>
 8009458:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800945a:	4806      	ldr	r0, [pc, #24]	; (8009474 <tcpip_timeouts_mbox_fetch+0x68>)
 800945c:	f00b fd0c 	bl	8014e78 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009466:	d102      	bne.n	800946e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8009468:	f008 ff6a 	bl	8012340 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800946c:	e7d3      	b.n	8009416 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}
 8009474:	20007d24 	.word	0x20007d24

08009478 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b084      	sub	sp, #16
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8009480:	4810      	ldr	r0, [pc, #64]	; (80094c4 <tcpip_thread+0x4c>)
 8009482:	f00b fcf9 	bl	8014e78 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8009486:	4b10      	ldr	r3, [pc, #64]	; (80094c8 <tcpip_thread+0x50>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d005      	beq.n	800949a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800948e:	4b0e      	ldr	r3, [pc, #56]	; (80094c8 <tcpip_thread+0x50>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a0e      	ldr	r2, [pc, #56]	; (80094cc <tcpip_thread+0x54>)
 8009494:	6812      	ldr	r2, [r2, #0]
 8009496:	4610      	mov	r0, r2
 8009498:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800949a:	f107 030c 	add.w	r3, r7, #12
 800949e:	4619      	mov	r1, r3
 80094a0:	480b      	ldr	r0, [pc, #44]	; (80094d0 <tcpip_thread+0x58>)
 80094a2:	f7ff ffb3 	bl	800940c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d106      	bne.n	80094ba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80094ac:	4b09      	ldr	r3, [pc, #36]	; (80094d4 <tcpip_thread+0x5c>)
 80094ae:	2291      	movs	r2, #145	; 0x91
 80094b0:	4909      	ldr	r1, [pc, #36]	; (80094d8 <tcpip_thread+0x60>)
 80094b2:	480a      	ldr	r0, [pc, #40]	; (80094dc <tcpip_thread+0x64>)
 80094b4:	f00b fd86 	bl	8014fc4 <iprintf>
      continue;
 80094b8:	e003      	b.n	80094c2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	4618      	mov	r0, r3
 80094be:	f000 f80f 	bl	80094e0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80094c2:	e7ea      	b.n	800949a <tcpip_thread+0x22>
 80094c4:	20007d24 	.word	0x20007d24
 80094c8:	20004050 	.word	0x20004050
 80094cc:	20004054 	.word	0x20004054
 80094d0:	20004058 	.word	0x20004058
 80094d4:	08015f28 	.word	0x08015f28
 80094d8:	08015f58 	.word	0x08015f58
 80094dc:	08015f78 	.word	0x08015f78

080094e0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d018      	beq.n	8009522 <tcpip_thread_handle_msg+0x42>
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	d021      	beq.n	8009538 <tcpip_thread_handle_msg+0x58>
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d126      	bne.n	8009546 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	6850      	ldr	r0, [r2, #4]
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	6892      	ldr	r2, [r2, #8]
 8009504:	4611      	mov	r1, r2
 8009506:	4798      	blx	r3
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d004      	beq.n	8009518 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	4618      	mov	r0, r3
 8009514:	f002 fb10 	bl	800bb38 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009518:	6879      	ldr	r1, [r7, #4]
 800951a:	2009      	movs	r0, #9
 800951c:	f001 fc6c 	bl	800adf8 <memp_free>
      break;
 8009520:	e018      	b.n	8009554 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	6892      	ldr	r2, [r2, #8]
 800952a:	4610      	mov	r0, r2
 800952c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800952e:	6879      	ldr	r1, [r7, #4]
 8009530:	2008      	movs	r0, #8
 8009532:	f001 fc61 	bl	800adf8 <memp_free>
      break;
 8009536:	e00d      	b.n	8009554 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	6892      	ldr	r2, [r2, #8]
 8009540:	4610      	mov	r0, r2
 8009542:	4798      	blx	r3
      break;
 8009544:	e006      	b.n	8009554 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009546:	4b05      	ldr	r3, [pc, #20]	; (800955c <tcpip_thread_handle_msg+0x7c>)
 8009548:	22cf      	movs	r2, #207	; 0xcf
 800954a:	4905      	ldr	r1, [pc, #20]	; (8009560 <tcpip_thread_handle_msg+0x80>)
 800954c:	4805      	ldr	r0, [pc, #20]	; (8009564 <tcpip_thread_handle_msg+0x84>)
 800954e:	f00b fd39 	bl	8014fc4 <iprintf>
      break;
 8009552:	bf00      	nop
  }
}
 8009554:	bf00      	nop
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	08015f28 	.word	0x08015f28
 8009560:	08015f58 	.word	0x08015f58
 8009564:	08015f78 	.word	0x08015f78

08009568 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009574:	481a      	ldr	r0, [pc, #104]	; (80095e0 <tcpip_inpkt+0x78>)
 8009576:	f00b fc44 	bl	8014e02 <sys_mbox_valid>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d105      	bne.n	800958c <tcpip_inpkt+0x24>
 8009580:	4b18      	ldr	r3, [pc, #96]	; (80095e4 <tcpip_inpkt+0x7c>)
 8009582:	22fc      	movs	r2, #252	; 0xfc
 8009584:	4918      	ldr	r1, [pc, #96]	; (80095e8 <tcpip_inpkt+0x80>)
 8009586:	4819      	ldr	r0, [pc, #100]	; (80095ec <tcpip_inpkt+0x84>)
 8009588:	f00b fd1c 	bl	8014fc4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800958c:	2009      	movs	r0, #9
 800958e:	f001 fbe1 	bl	800ad54 <memp_malloc>
 8009592:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d102      	bne.n	80095a0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800959a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800959e:	e01a      	b.n	80095d6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	2200      	movs	r2, #0
 80095a4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	68ba      	ldr	r2, [r7, #8]
 80095b0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80095b8:	6979      	ldr	r1, [r7, #20]
 80095ba:	4809      	ldr	r0, [pc, #36]	; (80095e0 <tcpip_inpkt+0x78>)
 80095bc:	f00b fbc8 	bl	8014d50 <sys_mbox_trypost>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d006      	beq.n	80095d4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80095c6:	6979      	ldr	r1, [r7, #20]
 80095c8:	2009      	movs	r0, #9
 80095ca:	f001 fc15 	bl	800adf8 <memp_free>
    return ERR_MEM;
 80095ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80095d2:	e000      	b.n	80095d6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80095d4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3718      	adds	r7, #24
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20004058 	.word	0x20004058
 80095e4:	08015f28 	.word	0x08015f28
 80095e8:	08015fa0 	.word	0x08015fa0
 80095ec:	08015f78 	.word	0x08015f78

080095f0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009600:	f003 0318 	and.w	r3, r3, #24
 8009604:	2b00      	cmp	r3, #0
 8009606:	d006      	beq.n	8009616 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009608:	4a08      	ldr	r2, [pc, #32]	; (800962c <tcpip_input+0x3c>)
 800960a:	6839      	ldr	r1, [r7, #0]
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7ff ffab 	bl	8009568 <tcpip_inpkt>
 8009612:	4603      	mov	r3, r0
 8009614:	e005      	b.n	8009622 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009616:	4a06      	ldr	r2, [pc, #24]	; (8009630 <tcpip_input+0x40>)
 8009618:	6839      	ldr	r1, [r7, #0]
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7ff ffa4 	bl	8009568 <tcpip_inpkt>
 8009620:	4603      	mov	r3, r0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	08014b61 	.word	0x08014b61
 8009630:	08013a81 	.word	0x08013a81

08009634 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800963e:	4819      	ldr	r0, [pc, #100]	; (80096a4 <tcpip_try_callback+0x70>)
 8009640:	f00b fbdf 	bl	8014e02 <sys_mbox_valid>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d106      	bne.n	8009658 <tcpip_try_callback+0x24>
 800964a:	4b17      	ldr	r3, [pc, #92]	; (80096a8 <tcpip_try_callback+0x74>)
 800964c:	f240 125d 	movw	r2, #349	; 0x15d
 8009650:	4916      	ldr	r1, [pc, #88]	; (80096ac <tcpip_try_callback+0x78>)
 8009652:	4817      	ldr	r0, [pc, #92]	; (80096b0 <tcpip_try_callback+0x7c>)
 8009654:	f00b fcb6 	bl	8014fc4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009658:	2008      	movs	r0, #8
 800965a:	f001 fb7b 	bl	800ad54 <memp_malloc>
 800965e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d102      	bne.n	800966c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009666:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800966a:	e017      	b.n	800969c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2201      	movs	r2, #1
 8009670:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	683a      	ldr	r2, [r7, #0]
 800967c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800967e:	68f9      	ldr	r1, [r7, #12]
 8009680:	4808      	ldr	r0, [pc, #32]	; (80096a4 <tcpip_try_callback+0x70>)
 8009682:	f00b fb65 	bl	8014d50 <sys_mbox_trypost>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d006      	beq.n	800969a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800968c:	68f9      	ldr	r1, [r7, #12]
 800968e:	2008      	movs	r0, #8
 8009690:	f001 fbb2 	bl	800adf8 <memp_free>
    return ERR_MEM;
 8009694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009698:	e000      	b.n	800969c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	20004058 	.word	0x20004058
 80096a8:	08015f28 	.word	0x08015f28
 80096ac:	08015fa0 	.word	0x08015fa0
 80096b0:	08015f78 	.word	0x08015f78

080096b4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af02      	add	r7, sp, #8
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  lwip_init();
 80096be:	f000 fec1 	bl	800a444 <lwip_init>

  tcpip_init_done = initfunc;
 80096c2:	4a17      	ldr	r2, [pc, #92]	; (8009720 <tcpip_init+0x6c>)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80096c8:	4a16      	ldr	r2, [pc, #88]	; (8009724 <tcpip_init+0x70>)
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80096ce:	2106      	movs	r1, #6
 80096d0:	4815      	ldr	r0, [pc, #84]	; (8009728 <tcpip_init+0x74>)
 80096d2:	f00b fb1b 	bl	8014d0c <sys_mbox_new>
 80096d6:	4603      	mov	r3, r0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d006      	beq.n	80096ea <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80096dc:	4b13      	ldr	r3, [pc, #76]	; (800972c <tcpip_init+0x78>)
 80096de:	f240 2261 	movw	r2, #609	; 0x261
 80096e2:	4913      	ldr	r1, [pc, #76]	; (8009730 <tcpip_init+0x7c>)
 80096e4:	4813      	ldr	r0, [pc, #76]	; (8009734 <tcpip_init+0x80>)
 80096e6:	f00b fc6d 	bl	8014fc4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80096ea:	4813      	ldr	r0, [pc, #76]	; (8009738 <tcpip_init+0x84>)
 80096ec:	f00b fba8 	bl	8014e40 <sys_mutex_new>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d006      	beq.n	8009704 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80096f6:	4b0d      	ldr	r3, [pc, #52]	; (800972c <tcpip_init+0x78>)
 80096f8:	f240 2265 	movw	r2, #613	; 0x265
 80096fc:	490f      	ldr	r1, [pc, #60]	; (800973c <tcpip_init+0x88>)
 80096fe:	480d      	ldr	r0, [pc, #52]	; (8009734 <tcpip_init+0x80>)
 8009700:	f00b fc60 	bl	8014fc4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009704:	2300      	movs	r3, #0
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800970c:	2200      	movs	r2, #0
 800970e:	490c      	ldr	r1, [pc, #48]	; (8009740 <tcpip_init+0x8c>)
 8009710:	480c      	ldr	r0, [pc, #48]	; (8009744 <tcpip_init+0x90>)
 8009712:	f00b fbcd 	bl	8014eb0 <sys_thread_new>
}
 8009716:	bf00      	nop
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	20004050 	.word	0x20004050
 8009724:	20004054 	.word	0x20004054
 8009728:	20004058 	.word	0x20004058
 800972c:	08015f28 	.word	0x08015f28
 8009730:	08015fb0 	.word	0x08015fb0
 8009734:	08015f78 	.word	0x08015f78
 8009738:	20007d24 	.word	0x20007d24
 800973c:	08015fd4 	.word	0x08015fd4
 8009740:	08009479 	.word	0x08009479
 8009744:	08015ff8 	.word	0x08015ff8

08009748 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d002      	beq.n	800975e <fs_open+0x16>
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d102      	bne.n	8009764 <fs_open+0x1c>
    return ERR_ARG;
 800975e:	f06f 030f 	mvn.w	r3, #15
 8009762:	e028      	b.n	80097b6 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009764:	4b16      	ldr	r3, [pc, #88]	; (80097c0 <fs_open+0x78>)
 8009766:	60fb      	str	r3, [r7, #12]
 8009768:	e020      	b.n	80097ac <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	4619      	mov	r1, r3
 8009770:	6838      	ldr	r0, [r7, #0]
 8009772:	f7f6 fd65 	bl	8000240 <strcmp>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d114      	bne.n	80097a6 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	689a      	ldr	r2, [r3, #8]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	68da      	ldr	r2, [r3, #12]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	68da      	ldr	r2, [r3, #12]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	7c1a      	ldrb	r2, [r3, #16]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 80097a2:	2300      	movs	r3, #0
 80097a4:	e007      	b.n	80097b6 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	60fb      	str	r3, [r7, #12]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d1db      	bne.n	800976a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 80097b2:	f06f 0305 	mvn.w	r3, #5
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	080296ec 	.word	0x080296ec

080097c4 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 80097d8:	b480      	push	{r7}
 80097da:	b083      	sub	sp, #12
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	1ad3      	subs	r3, r2, r3
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 80097f6:	b580      	push	{r7, lr}
 80097f8:	b082      	sub	sp, #8
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80097fe:	222c      	movs	r2, #44	; 0x2c
 8009800:	2100      	movs	r1, #0
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f00b fbd6 	bl	8014fb4 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8009808:	bf00      	nop
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8009816:	202c      	movs	r0, #44	; 0x2c
 8009818:	f001 f91a 	bl	800aa50 <mem_malloc>
 800981c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d002      	beq.n	800982a <http_state_alloc+0x1a>
    http_state_init(ret);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f7ff ffe6 	bl	80097f6 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800982a:	687b      	ldr	r3, [r7, #4]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	695b      	ldr	r3, [r3, #20]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d007      	beq.n	8009854 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	4618      	mov	r0, r3
 800984a:	f7ff ffbb 	bl	80097c4 <fs_close>
    hs->handle = NULL;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2200      	movs	r2, #0
 8009852:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a1b      	ldr	r3, [r3, #32]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d007      	beq.n	800986c <http_state_eof+0x38>
    pbuf_free(hs->req);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6a1b      	ldr	r3, [r3, #32]
 8009860:	4618      	mov	r0, r3
 8009862:	f002 f969 	bl	800bb38 <pbuf_free>
    hs->req = NULL;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800986c:	bf00      	nop
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d005      	beq.n	800988e <http_state_free+0x1a>
    http_state_eof(hs);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7ff ffd6 	bl	8009834 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 ff47 	bl	800a71c <mem_free>
  }
}
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
	...

08009898 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
 80098a4:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d106      	bne.n	80098ba <http_write+0x22>
 80098ac:	4b2c      	ldr	r3, [pc, #176]	; (8009960 <http_write+0xc8>)
 80098ae:	f240 2219 	movw	r2, #537	; 0x219
 80098b2:	492c      	ldr	r1, [pc, #176]	; (8009964 <http_write+0xcc>)
 80098b4:	482c      	ldr	r0, [pc, #176]	; (8009968 <http_write+0xd0>)
 80098b6:	f00b fb85 	bl	8014fc4 <iprintf>
  len = *length;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 80098c0:	8afb      	ldrh	r3, [r7, #22]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <http_write+0x32>
    return ERR_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	e045      	b.n	8009956 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80098d0:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 80098d2:	8aba      	ldrh	r2, [r7, #20]
 80098d4:	8afb      	ldrh	r3, [r7, #22]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d201      	bcs.n	80098de <http_write+0x46>
    len = max_len;
 80098da:	8abb      	ldrh	r3, [r7, #20]
 80098dc:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80098e2:	005b      	lsls	r3, r3, #1
 80098e4:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 80098e6:	8afa      	ldrh	r2, [r7, #22]
 80098e8:	8abb      	ldrh	r3, [r7, #20]
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d901      	bls.n	80098f2 <http_write+0x5a>
    len = max_len;
 80098ee:	8abb      	ldrh	r3, [r7, #20]
 80098f0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80098f2:	78fb      	ldrb	r3, [r7, #3]
 80098f4:	8afa      	ldrh	r2, [r7, #22]
 80098f6:	68b9      	ldr	r1, [r7, #8]
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f006 fea7 	bl	801064c <tcp_write>
 80098fe:	4603      	mov	r3, r0
 8009900:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8009902:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800990a:	d10f      	bne.n	800992c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009912:	2b00      	cmp	r3, #0
 8009914:	d004      	beq.n	8009920 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800991c:	2b08      	cmp	r3, #8
 800991e:	d902      	bls.n	8009926 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8009920:	2301      	movs	r3, #1
 8009922:	82fb      	strh	r3, [r7, #22]
 8009924:	e002      	b.n	800992c <http_write+0x94>
      } else {
        len /= 2;
 8009926:	8afb      	ldrh	r3, [r7, #22]
 8009928:	085b      	lsrs	r3, r3, #1
 800992a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800992c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009934:	d102      	bne.n	800993c <http_write+0xa4>
 8009936:	8afb      	ldrh	r3, [r7, #22]
 8009938:	2b01      	cmp	r3, #1
 800993a:	d8da      	bhi.n	80098f2 <http_write+0x5a>

  if (err == ERR_OK) {
 800993c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d103      	bne.n	800994c <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	8afa      	ldrh	r2, [r7, #22]
 8009948:	801a      	strh	r2, [r3, #0]
 800994a:	e002      	b.n	8009952 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2200      	movs	r2, #0
 8009950:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8009952:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3718      	adds	r7, #24
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	08016048 	.word	0x08016048
 8009964:	08016080 	.word	0x08016080
 8009968:	08016090 	.word	0x08016090

0800996c <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b086      	sub	sp, #24
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	4613      	mov	r3, r2
 8009978:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800997a:	2100      	movs	r1, #0
 800997c:	68f8      	ldr	r0, [r7, #12]
 800997e:	f003 ff29 	bl	800d7d4 <tcp_arg>
  altcp_recv(pcb, NULL);
 8009982:	2100      	movs	r1, #0
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f003 ff37 	bl	800d7f8 <tcp_recv>
  altcp_err(pcb, NULL);
 800998a:	2100      	movs	r1, #0
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f003 ff77 	bl	800d880 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8009992:	2200      	movs	r2, #0
 8009994:	2100      	movs	r1, #0
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f003 ffac 	bl	800d8f4 <tcp_poll>
  altcp_sent(pcb, NULL);
 800999c:	2100      	movs	r1, #0
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f003 ff4c 	bl	800d83c <tcp_sent>
  if (hs != NULL) {
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d002      	beq.n	80099b0 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 80099aa:	68b8      	ldr	r0, [r7, #8]
 80099ac:	f7ff ff62 	bl	8009874 <http_state_free>
  }

  if (abort_conn) {
 80099b0:	79fb      	ldrb	r3, [r7, #7]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d004      	beq.n	80099c0 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f002 fe4a 	bl	800c650 <tcp_abort>
    return ERR_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	e00f      	b.n	80099e0 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 80099c0:	68f8      	ldr	r0, [r7, #12]
 80099c2:	f002 fd5b 	bl	800c47c <tcp_close>
 80099c6:	4603      	mov	r3, r0
 80099c8:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 80099ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d004      	beq.n	80099dc <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80099d2:	2204      	movs	r2, #4
 80099d4:	4904      	ldr	r1, [pc, #16]	; (80099e8 <http_close_or_abort_conn+0x7c>)
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f003 ff8c 	bl	800d8f4 <tcp_poll>
  }
  return err;
 80099dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3718      	adds	r7, #24
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	0800a0af 	.word	0x0800a0af

080099ec <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b082      	sub	sp, #8
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 80099f6:	2200      	movs	r2, #0
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f7ff ffb6 	bl	800996c <http_close_or_abort_conn>
 8009a00:	4603      	mov	r3, r0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b082      	sub	sp, #8
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8009a14:	6839      	ldr	r1, [r7, #0]
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7ff ffe8 	bl	80099ec <http_close_conn>
  }
}
 8009a1c:	bf00      	nop
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d105      	bne.n	8009a42 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8009a36:	6839      	ldr	r1, [r7, #0]
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7ff ffe6 	bl	8009a0a <http_eof>
    return 0;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	e016      	b.n	8009a70 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	695b      	ldr	r3, [r3, #20]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f7ff fec6 	bl	80097d8 <fs_bytes_left>
 8009a4c:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	dc05      	bgt.n	8009a60 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8009a54:	6839      	ldr	r1, [r7, #0]
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f7ff ffd7 	bl	8009a0a <http_eof>
    return 0;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	e007      	b.n	8009a70 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8009a60:	4b05      	ldr	r3, [pc, #20]	; (8009a78 <http_check_eof+0x54>)
 8009a62:	f240 429d 	movw	r2, #1181	; 0x49d
 8009a66:	4905      	ldr	r1, [pc, #20]	; (8009a7c <http_check_eof+0x58>)
 8009a68:	4805      	ldr	r0, [pc, #20]	; (8009a80 <http_check_eof+0x5c>)
 8009a6a:	f00b faab 	bl	8014fc4 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8009a6e:	2301      	movs	r3, #1
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	08016048 	.word	0x08016048
 8009a7c:	080160b8 	.word	0x080160b8
 8009a80:	08016090 	.word	0x08016090

08009a84 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a96:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d803      	bhi.n	8009aa6 <http_send_data_nonssi+0x22>
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	e001      	b.n	8009aaa <http_send_data_nonssi+0x26>
 8009aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009aaa:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	6999      	ldr	r1, [r3, #24]
 8009ab0:	f107 020c 	add.w	r2, r7, #12
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f7ff feee 	bl	8009898 <http_write>
 8009abc:	4603      	mov	r3, r0
 8009abe:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8009ac0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10d      	bne.n	8009ae4 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	699b      	ldr	r3, [r3, #24]
 8009ad0:	89ba      	ldrh	r2, [r7, #12]
 8009ad2:	441a      	add	r2, r3
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009adc:	89ba      	ldrh	r2, [r7, #12]
 8009ade:	1a9a      	subs	r2, r3, r2
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8009ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b084      	sub	sp, #16
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	6078      	str	r0, [r7, #4]
 8009af6:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8009af8:	2300      	movs	r3, #0
 8009afa:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d101      	bne.n	8009b06 <http_send+0x18>
    return 0;
 8009b02:	2300      	movs	r3, #0
 8009b04:	e025      	b.n	8009b52 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d108      	bne.n	8009b20 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8009b0e:	6839      	ldr	r1, [r7, #0]
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f7ff ff87 	bl	8009a24 <http_check_eof>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d101      	bne.n	8009b20 <http_send+0x32>
      return 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	e018      	b.n	8009b52 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8009b20:	6839      	ldr	r1, [r7, #0]
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7ff ffae 	bl	8009a84 <http_send_data_nonssi>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d10d      	bne.n	8009b50 <http_send+0x62>
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	695b      	ldr	r3, [r3, #20]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7ff fe4d 	bl	80097d8 <fs_bytes_left>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	dc05      	bgt.n	8009b50 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8009b44:	6839      	ldr	r1, [r7, #0]
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7ff ff5f 	bl	8009a0a <http_eof>
    return 0;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	e000      	b.n	8009b52 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}
	...

08009b5c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	4a1c      	ldr	r2, [pc, #112]	; (8009bdc <http_get_404_file+0x80>)
 8009b6a:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4619      	mov	r1, r3
 8009b74:	4610      	mov	r0, r2
 8009b76:	f7ff fde7 	bl	8009748 <fs_open>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8009b7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d024      	beq.n	8009bd0 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	4a15      	ldr	r2, [pc, #84]	; (8009be0 <http_get_404_file+0x84>)
 8009b8a:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4619      	mov	r1, r3
 8009b94:	4610      	mov	r0, r2
 8009b96:	f7ff fdd7 	bl	8009748 <fs_open>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d014      	beq.n	8009bd0 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	4a0e      	ldr	r2, [pc, #56]	; (8009be4 <http_get_404_file+0x88>)
 8009baa:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	4610      	mov	r0, r2
 8009bb6:	f7ff fdc7 	bl	8009748 <fs_open>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8009bbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d004      	beq.n	8009bd0 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	601a      	str	r2, [r3, #0]
        return NULL;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	e000      	b.n	8009bd2 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8009bd0:	687b      	ldr	r3, [r7, #4]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	080160f0 	.word	0x080160f0
 8009be0:	080160fc 	.word	0x080160fc
 8009be4:	08016108 	.word	0x08016108

08009be8 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b08e      	sub	sp, #56	; 0x38
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d106      	bne.n	8009c0c <http_parse_request+0x24>
 8009bfe:	4b65      	ldr	r3, [pc, #404]	; (8009d94 <http_parse_request+0x1ac>)
 8009c00:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8009c04:	4964      	ldr	r1, [pc, #400]	; (8009d98 <http_parse_request+0x1b0>)
 8009c06:	4865      	ldr	r0, [pc, #404]	; (8009d9c <http_parse_request+0x1b4>)
 8009c08:	f00b f9dc 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d106      	bne.n	8009c20 <http_parse_request+0x38>
 8009c12:	4b60      	ldr	r3, [pc, #384]	; (8009d94 <http_parse_request+0x1ac>)
 8009c14:	f240 72af 	movw	r2, #1967	; 0x7af
 8009c18:	4961      	ldr	r1, [pc, #388]	; (8009da0 <http_parse_request+0x1b8>)
 8009c1a:	4860      	ldr	r0, [pc, #384]	; (8009d9c <http_parse_request+0x1b4>)
 8009c1c:	f00b f9d2 	bl	8014fc4 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d103      	bne.n	8009c30 <http_parse_request+0x48>
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d002      	beq.n	8009c36 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8009c30:	f06f 0307 	mvn.w	r3, #7
 8009c34:	e0aa      	b.n	8009d8c <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d103      	bne.n	8009c46 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c42:	621a      	str	r2, [r3, #32]
 8009c44:	e005      	b.n	8009c52 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	6a1b      	ldr	r3, [r3, #32]
 8009c4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f002 f841 	bl	800bcd4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8009c52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c54:	f002 f816 	bl	800bc84 <pbuf_ref>

  if (hs->req->next != NULL) {
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	6a1b      	ldr	r3, [r3, #32]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d012      	beq.n	8009c88 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	891b      	ldrh	r3, [r3, #8]
 8009c68:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	bf28      	it	cs
 8009c70:	4613      	movcs	r3, r2
 8009c72:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	6a18      	ldr	r0, [r3, #32]
 8009c78:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	4949      	ldr	r1, [pc, #292]	; (8009da4 <http_parse_request+0x1bc>)
 8009c7e:	f002 f951 	bl	800bf24 <pbuf_copy_partial>
    data = httpd_req_buf;
 8009c82:	4b48      	ldr	r3, [pc, #288]	; (8009da4 <http_parse_request+0x1bc>)
 8009c84:	637b      	str	r3, [r7, #52]	; 0x34
 8009c86:	e005      	b.n	8009c94 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8009c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	895b      	ldrh	r3, [r3, #10]
 8009c92:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8009c94:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009c96:	2b06      	cmp	r3, #6
 8009c98:	d963      	bls.n	8009d62 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8009c9a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	4942      	ldr	r1, [pc, #264]	; (8009da8 <http_parse_request+0x1c0>)
 8009ca0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009ca2:	f000 fb99 	bl	800a3d8 <lwip_strnstr>
 8009ca6:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d059      	beq.n	8009d62 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8009cb2:	2204      	movs	r2, #4
 8009cb4:	493d      	ldr	r1, [pc, #244]	; (8009dac <http_parse_request+0x1c4>)
 8009cb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009cb8:	f00b f9dd 	bl	8015076 <strncmp>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d117      	bne.n	8009cf2 <http_parse_request+0x10a>
        sp1 = data + 3;
 8009cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc4:	3303      	adds	r3, #3
 8009cc6:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	461a      	mov	r2, r3
 8009cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009cd6:	1ad3      	subs	r3, r2, r3
 8009cd8:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	8b7a      	ldrh	r2, [r7, #26]
 8009ce0:	4933      	ldr	r1, [pc, #204]	; (8009db0 <http_parse_request+0x1c8>)
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f000 fb78 	bl	800a3d8 <lwip_strnstr>
 8009ce8:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8009cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d111      	bne.n	8009d14 <http_parse_request+0x12c>
 8009cf0:	e006      	b.n	8009d00 <http_parse_request+0x118>
        data[4] = 0;
 8009cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8009cfa:	f06f 030f 	mvn.w	r3, #15
 8009cfe:	e045      	b.n	8009d8c <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	3301      	adds	r3, #1
 8009d04:	8b7a      	ldrh	r2, [r7, #26]
 8009d06:	4928      	ldr	r1, [pc, #160]	; (8009da8 <http_parse_request+0x1c0>)
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 fb65 	bl	800a3d8 <lwip_strnstr>
 8009d0e:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8009d10:	2301      	movs	r3, #1
 8009d12:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8009d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d16:	69fa      	ldr	r2, [r7, #28]
 8009d18:	3201      	adds	r2, #1
 8009d1a:	1a9b      	subs	r3, r3, r2
 8009d1c:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8009d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d01e      	beq.n	8009d62 <http_parse_request+0x17a>
 8009d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d91a      	bls.n	8009d62 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8009d2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009d2e:	461a      	mov	r2, r3
 8009d30:	4920      	ldr	r1, [pc, #128]	; (8009db4 <http_parse_request+0x1cc>)
 8009d32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009d34:	f000 fb50 	bl	800a3d8 <lwip_strnstr>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d011      	beq.n	8009d62 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 8009d3e:	69fb      	ldr	r3, [r7, #28]
 8009d40:	3301      	adds	r3, #1
 8009d42:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	2200      	movs	r2, #0
 8009d48:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8009d4a:	8b3b      	ldrh	r3, [r7, #24]
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	4413      	add	r3, r2
 8009d50:	2200      	movs	r2, #0
 8009d52:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8009d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d56:	6979      	ldr	r1, [r7, #20]
 8009d58:	68b8      	ldr	r0, [r7, #8]
 8009d5a:	f000 f82d 	bl	8009db8 <http_find_file>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	e014      	b.n	8009d8c <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	6a1b      	ldr	r3, [r3, #32]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f001 ff74 	bl	800bc54 <pbuf_clen>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	6a1b      	ldr	r3, [r3, #32]
 8009d74:	891b      	ldrh	r3, [r3, #8]
 8009d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d7a:	d205      	bcs.n	8009d88 <http_parse_request+0x1a0>
 8009d7c:	8a7b      	ldrh	r3, [r7, #18]
 8009d7e:	2b05      	cmp	r3, #5
 8009d80:	d802      	bhi.n	8009d88 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8009d82:	f06f 0304 	mvn.w	r3, #4
 8009d86:	e001      	b.n	8009d8c <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8009d88:	f06f 030f 	mvn.w	r3, #15
  }
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	3738      	adds	r7, #56	; 0x38
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	08016048 	.word	0x08016048
 8009d98:	08016114 	.word	0x08016114
 8009d9c:	08016090 	.word	0x08016090
 8009da0:	08016120 	.word	0x08016120
 8009da4:	2000405c 	.word	0x2000405c
 8009da8:	0801612c 	.word	0x0801612c
 8009dac:	08016130 	.word	0x08016130
 8009db0:	08016138 	.word	0x08016138
 8009db4:	0801613c 	.word	0x0801613c

08009db8 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b092      	sub	sp, #72	; 0x48
 8009dbc:	af02      	add	r7, sp, #8
 8009dbe:	60f8      	str	r0, [r7, #12]
 8009dc0:	60b9      	str	r1, [r7, #8]
 8009dc2:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f7f6 fa3d 	bl	8000254 <strlen>
 8009dda:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8009ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d06b      	beq.n	8009eba <http_find_file+0x102>
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	3b01      	subs	r3, #1
 8009de8:	4413      	add	r3, r2
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	2b2f      	cmp	r3, #47	; 0x2f
 8009dee:	d164      	bne.n	8009eba <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8009df0:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8009df2:	4a53      	ldr	r2, [pc, #332]	; (8009f40 <http_find_file+0x188>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d102      	bne.n	8009dfe <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8009df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d15d      	bne.n	8009eba <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8009dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e00:	3b01      	subs	r3, #1
 8009e02:	2b3f      	cmp	r3, #63	; 0x3f
 8009e04:	bf28      	it	cs
 8009e06:	233f      	movcs	r3, #63	; 0x3f
 8009e08:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00a      	beq.n	8009e26 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e14:	4619      	mov	r1, r3
 8009e16:	484a      	ldr	r0, [pc, #296]	; (8009f40 <http_find_file+0x188>)
 8009e18:	f00b f8c1 	bl	8014f9e <memcpy>
      http_uri_buf[copy_len] = 0;
 8009e1c:	4a48      	ldr	r2, [pc, #288]	; (8009f40 <http_find_file+0x188>)
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e20:	4413      	add	r3, r2
 8009e22:	2200      	movs	r2, #0
 8009e24:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8009e26:	2300      	movs	r3, #0
 8009e28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e2a:	e043      	b.n	8009eb4 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d028      	beq.n	8009e84 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 8009e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e34:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8009e38:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d01e      	beq.n	8009e7e <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8009e40:	4a40      	ldr	r2, [pc, #256]	; (8009f44 <http_find_file+0x18c>)
 8009e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7f6 fa03 	bl	8000254 <strlen>
 8009e4e:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8009e50:	69fa      	ldr	r2, [r7, #28]
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	4293      	cmp	r3, r2
 8009e56:	bf28      	it	cs
 8009e58:	4613      	movcs	r3, r2
 8009e5a:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	4a38      	ldr	r2, [pc, #224]	; (8009f40 <http_find_file+0x188>)
 8009e60:	1898      	adds	r0, r3, r2
 8009e62:	4a38      	ldr	r2, [pc, #224]	; (8009f44 <http_find_file+0x18c>)
 8009e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e66:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e6a:	69ba      	ldr	r2, [r7, #24]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	f00b f896 	bl	8014f9e <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8009e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	4413      	add	r3, r2
 8009e78:	4a31      	ldr	r2, [pc, #196]	; (8009f40 <http_find_file+0x188>)
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 8009e7e:	4b30      	ldr	r3, [pc, #192]	; (8009f40 <http_find_file+0x188>)
 8009e80:	633b      	str	r3, [r7, #48]	; 0x30
 8009e82:	e004      	b.n	8009e8e <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 8009e84:	4a2f      	ldr	r2, [pc, #188]	; (8009f44 <http_find_file+0x18c>)
 8009e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009e8c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e92:	4618      	mov	r0, r3
 8009e94:	f7ff fc58 	bl	8009748 <fs_open>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 8009e9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d104      	bne.n	8009eae <http_find_file+0xf6>
        uri = file_name;
 8009ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea6:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 8009eac:	e005      	b.n	8009eba <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8009eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009eb6:	2b04      	cmp	r3, #4
 8009eb8:	d9b8      	bls.n	8009e2c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 8009eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d124      	bne.n	8009f0a <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	213f      	movs	r1, #63	; 0x3f
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f00b f8c9 	bl	801505c <strchr>
 8009eca:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 8009ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d005      	beq.n	8009ede <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 8009ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	701a      	strb	r2, [r3, #0]
      params++;
 8009ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eda:	3301      	adds	r3, #1
 8009edc:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	68ba      	ldr	r2, [r7, #8]
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7ff fc2f 	bl	8009748 <fs_open>
 8009eea:	4603      	mov	r3, r0
 8009eec:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8009eee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d102      	bne.n	8009efc <http_find_file+0x144>
      file = &hs->file_handle;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009efa:	e006      	b.n	8009f0a <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 8009efc:	f107 0308 	add.w	r3, r7, #8
 8009f00:	4619      	mov	r1, r3
 8009f02:	68f8      	ldr	r0, [r7, #12]
 8009f04:	f7ff fe2a 	bl	8009b5c <http_get_404_file>
 8009f08:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d106      	bne.n	8009f1e <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 8009f10:	f107 0308 	add.w	r3, r7, #8
 8009f14:	4619      	mov	r1, r3
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f7ff fe20 	bl	8009b5c <http_get_404_file>
 8009f1c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f22:	9301      	str	r3, [sp, #4]
 8009f24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	4613      	mov	r3, r2
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f000 f809 	bl	8009f48 <http_init_file>
 8009f36:	4603      	mov	r3, r0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3740      	adds	r7, #64	; 0x40
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	2000445c 	.word	0x2000445c
 8009f44:	08029700 	.word	0x08029700

08009f48 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	607a      	str	r2, [r7, #4]
 8009f54:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d05d      	beq.n	800a018 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d106      	bne.n	8009f72 <http_init_file+0x2a>
 8009f64:	4b35      	ldr	r3, [pc, #212]	; (800a03c <http_init_file+0xf4>)
 8009f66:	f640 120b 	movw	r2, #2315	; 0x90b
 8009f6a:	4935      	ldr	r1, [pc, #212]	; (800a040 <http_init_file+0xf8>)
 8009f6c:	4835      	ldr	r0, [pc, #212]	; (800a044 <http_init_file+0xfc>)
 8009f6e:	f00b f829 	bl	8014fc4 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	68ba      	ldr	r2, [r7, #8]
 8009f76:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	681a      	ldr	r2, [r3, #0]
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	da06      	bge.n	8009f96 <http_init_file+0x4e>
 8009f88:	4b2c      	ldr	r3, [pc, #176]	; (800a03c <http_init_file+0xf4>)
 8009f8a:	f640 1234 	movw	r2, #2356	; 0x934
 8009f8e:	492e      	ldr	r1, [pc, #184]	; (800a048 <http_init_file+0x100>)
 8009f90:	482c      	ldr	r0, [pc, #176]	; (800a044 <http_init_file+0xfc>)
 8009f92:	f00b f817 	bl	8014fc4 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	695b      	ldr	r3, [r3, #20]
 8009fac:	7c1b      	ldrb	r3, [r3, #16]
 8009fae:	f003 0301 	and.w	r3, r3, #1
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d106      	bne.n	8009fc4 <http_init_file+0x7c>
 8009fb6:	4b21      	ldr	r3, [pc, #132]	; (800a03c <http_init_file+0xf4>)
 8009fb8:	f640 1244 	movw	r2, #2372	; 0x944
 8009fbc:	4923      	ldr	r1, [pc, #140]	; (800a04c <http_init_file+0x104>)
 8009fbe:	4821      	ldr	r0, [pc, #132]	; (800a044 <http_init_file+0xfc>)
 8009fc0:	f00b f800 	bl	8014fc4 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d033      	beq.n	800a032 <http_init_file+0xea>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	695b      	ldr	r3, [r3, #20]
 8009fce:	7c1b      	ldrb	r3, [r3, #16]
 8009fd0:	f003 0301 	and.w	r3, r3, #1
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d02c      	beq.n	800a032 <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6998      	ldr	r0, [r3, #24]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	491b      	ldr	r1, [pc, #108]	; (800a050 <http_init_file+0x108>)
 8009fe4:	f000 f9f8 	bl	800a3d8 <lwip_strnstr>
 8009fe8:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d020      	beq.n	800a032 <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	3304      	adds	r3, #4
 8009ff4:	461a      	mov	r2, r3
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	1ad3      	subs	r3, r2, r3
 8009ffc:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	699a      	ldr	r2, [r3, #24]
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	441a      	add	r2, r3
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	1ad2      	subs	r2, r2, r3
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	625a      	str	r2, [r3, #36]	; 0x24
 800a016:	e00c      	b.n	800a032 <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2200      	movs	r2, #0
 800a01c:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2200      	movs	r2, #0
 800a028:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3718      	adds	r7, #24
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	08016048 	.word	0x08016048
 800a040:	08016144 	.word	0x08016144
 800a044:	08016090 	.word	0x08016090
 800a048:	08016158 	.word	0x08016158
 800a04c:	08016178 	.word	0x08016178
 800a050:	0801613c 	.word	0x0801613c

0800a054 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	460b      	mov	r3, r1
 800a05e:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d002      	beq.n	800a070 <http_err+0x1c>
    http_state_free(hs);
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f7ff fc02 	bl	8009874 <http_state_free>
  }
}
 800a070:	bf00      	nop
 800a072:	3710      	adds	r7, #16
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}

0800a078 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	4613      	mov	r3, r2
 800a084:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d101      	bne.n	800a094 <http_sent+0x1c>
    return ERR_OK;
 800a090:	2300      	movs	r3, #0
 800a092:	e008      	b.n	800a0a6 <http_sent+0x2e>
  }

  hs->retries = 0;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	2200      	movs	r2, #0
 800a098:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800a09c:	6979      	ldr	r1, [r7, #20]
 800a09e:	68b8      	ldr	r0, [r7, #8]
 800a0a0:	f7ff fd25 	bl	8009aee <http_send>

  return ERR_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3718      	adds	r7, #24
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b084      	sub	sp, #16
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d107      	bne.n	800a0d2 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	6838      	ldr	r0, [r7, #0]
 800a0c6:	f7ff fc91 	bl	80099ec <http_close_conn>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	e021      	b.n	800a116 <http_poll+0x68>
  } else {
    hs->retries++;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0d8:	3301      	adds	r3, #1
 800a0da:	b2da      	uxtb	r2, r3
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0e8:	2b04      	cmp	r3, #4
 800a0ea:	d105      	bne.n	800a0f8 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800a0ec:	68f9      	ldr	r1, [r7, #12]
 800a0ee:	6838      	ldr	r0, [r7, #0]
 800a0f0:	f7ff fc7c 	bl	80099ec <http_close_conn>
      return ERR_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e00e      	b.n	800a116 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d009      	beq.n	800a114 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800a100:	68f9      	ldr	r1, [r7, #12]
 800a102:	6838      	ldr	r0, [r7, #0]
 800a104:	f7ff fcf3 	bl	8009aee <http_send>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d002      	beq.n	800a114 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800a10e:	6838      	ldr	r0, [r7, #0]
 800a110:	f007 f888 	bl	8011224 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
	...

0800a120 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b086      	sub	sp, #24
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800a132:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d105      	bne.n	800a146 <http_recv+0x26>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d002      	beq.n	800a146 <http_recv+0x26>
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d111      	bne.n	800a16a <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d008      	beq.n	800a15e <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	891b      	ldrh	r3, [r3, #8]
 800a150:	4619      	mov	r1, r3
 800a152:	68b8      	ldr	r0, [r7, #8]
 800a154:	f002 fc56 	bl	800ca04 <tcp_recved>
      pbuf_free(p);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f001 fced 	bl	800bb38 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800a15e:	6979      	ldr	r1, [r7, #20]
 800a160:	68b8      	ldr	r0, [r7, #8]
 800a162:	f7ff fc43 	bl	80099ec <http_close_conn>
    return ERR_OK;
 800a166:	2300      	movs	r3, #0
 800a168:	e055      	b.n	800a216 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	891b      	ldrh	r3, [r3, #8]
 800a16e:	4619      	mov	r1, r3
 800a170:	68b8      	ldr	r0, [r7, #8]
 800a172:	f002 fc47 	bl	800ca04 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	695b      	ldr	r3, [r3, #20]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d147      	bne.n	800a20e <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	6979      	ldr	r1, [r7, #20]
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f7ff fd30 	bl	8009be8 <http_parse_request>
 800a188:	4603      	mov	r3, r0
 800a18a:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800a18c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d015      	beq.n	800a1c0 <http_recv+0xa0>
 800a194:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a198:	f113 0f05 	cmn.w	r3, #5
 800a19c:	d010      	beq.n	800a1c0 <http_recv+0xa0>
 800a19e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1a2:	f113 0f10 	cmn.w	r3, #16
 800a1a6:	d00b      	beq.n	800a1c0 <http_recv+0xa0>
 800a1a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1ac:	f113 0f08 	cmn.w	r3, #8
 800a1b0:	d006      	beq.n	800a1c0 <http_recv+0xa0>
 800a1b2:	4b1b      	ldr	r3, [pc, #108]	; (800a220 <http_recv+0x100>)
 800a1b4:	f640 2205 	movw	r2, #2565	; 0xa05
 800a1b8:	491a      	ldr	r1, [pc, #104]	; (800a224 <http_recv+0x104>)
 800a1ba:	481b      	ldr	r0, [pc, #108]	; (800a228 <http_recv+0x108>)
 800a1bc:	f00a ff02 	bl	8014fc4 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800a1c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1c4:	f113 0f05 	cmn.w	r3, #5
 800a1c8:	d00b      	beq.n	800a1e2 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d007      	beq.n	800a1e2 <http_recv+0xc2>
          pbuf_free(hs->req);
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f001 fcae 	bl	800bb38 <pbuf_free>
          hs->req = NULL;
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f001 fca8 	bl	800bb38 <pbuf_free>
      if (parsed == ERR_OK) {
 800a1e8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d104      	bne.n	800a1fa <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800a1f0:	6979      	ldr	r1, [r7, #20]
 800a1f2:	68b8      	ldr	r0, [r7, #8]
 800a1f4:	f7ff fc7b 	bl	8009aee <http_send>
 800a1f8:	e00c      	b.n	800a214 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800a1fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a1fe:	f113 0f10 	cmn.w	r3, #16
 800a202:	d107      	bne.n	800a214 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800a204:	6979      	ldr	r1, [r7, #20]
 800a206:	68b8      	ldr	r0, [r7, #8]
 800a208:	f7ff fbf0 	bl	80099ec <http_close_conn>
 800a20c:	e002      	b.n	800a214 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f001 fc92 	bl	800bb38 <pbuf_free>
    }
  }
  return ERR_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	08016048 	.word	0x08016048
 800a224:	080161a4 	.word	0x080161a4
 800a228:	08016090 	.word	0x08016090

0800a22c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b086      	sub	sp, #24
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	4613      	mov	r3, r2
 800a238:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800a23a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d102      	bne.n	800a248 <http_accept+0x1c>
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d102      	bne.n	800a24e <http_accept+0x22>
    return ERR_VAL;
 800a248:	f06f 0305 	mvn.w	r3, #5
 800a24c:	e025      	b.n	800a29a <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a24e:	2101      	movs	r1, #1
 800a250:	68b8      	ldr	r0, [r7, #8]
 800a252:	f003 f8b7 	bl	800d3c4 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800a256:	f7ff fadb 	bl	8009810 <http_state_alloc>
 800a25a:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d102      	bne.n	800a268 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800a262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a266:	e018      	b.n	800a29a <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800a26e:	6979      	ldr	r1, [r7, #20]
 800a270:	68b8      	ldr	r0, [r7, #8]
 800a272:	f003 faaf 	bl	800d7d4 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800a276:	490b      	ldr	r1, [pc, #44]	; (800a2a4 <http_accept+0x78>)
 800a278:	68b8      	ldr	r0, [r7, #8]
 800a27a:	f003 fabd 	bl	800d7f8 <tcp_recv>
  altcp_err(pcb, http_err);
 800a27e:	490a      	ldr	r1, [pc, #40]	; (800a2a8 <http_accept+0x7c>)
 800a280:	68b8      	ldr	r0, [r7, #8]
 800a282:	f003 fafd 	bl	800d880 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a286:	2204      	movs	r2, #4
 800a288:	4908      	ldr	r1, [pc, #32]	; (800a2ac <http_accept+0x80>)
 800a28a:	68b8      	ldr	r0, [r7, #8]
 800a28c:	f003 fb32 	bl	800d8f4 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800a290:	4907      	ldr	r1, [pc, #28]	; (800a2b0 <http_accept+0x84>)
 800a292:	68b8      	ldr	r0, [r7, #8]
 800a294:	f003 fad2 	bl	800d83c <tcp_sent>

  return ERR_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3718      	adds	r7, #24
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	0800a121 	.word	0x0800a121
 800a2a8:	0800a055 	.word	0x0800a055
 800a2ac:	0800a0af 	.word	0x0800a0af
 800a2b0:	0800a079 	.word	0x0800a079

0800a2b4 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d029      	beq.n	800a31a <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a2c6:	2101      	movs	r1, #1
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f003 f87b 	bl	800d3c4 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800a2ce:	887b      	ldrh	r3, [r7, #2]
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	4914      	ldr	r1, [pc, #80]	; (800a324 <httpd_init_pcb+0x70>)
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f002 f9c7 	bl	800c668 <tcp_bind>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800a2de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d006      	beq.n	800a2f4 <httpd_init_pcb+0x40>
 800a2e6:	4b10      	ldr	r3, [pc, #64]	; (800a328 <httpd_init_pcb+0x74>)
 800a2e8:	f640 2257 	movw	r2, #2647	; 0xa57
 800a2ec:	490f      	ldr	r1, [pc, #60]	; (800a32c <httpd_init_pcb+0x78>)
 800a2ee:	4810      	ldr	r0, [pc, #64]	; (800a330 <httpd_init_pcb+0x7c>)
 800a2f0:	f00a fe68 	bl	8014fc4 <iprintf>
    pcb = altcp_listen(pcb);
 800a2f4:	21ff      	movs	r1, #255	; 0xff
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f002 fa6e 	bl	800c7d8 <tcp_listen_with_backlog>
 800a2fc:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d106      	bne.n	800a312 <httpd_init_pcb+0x5e>
 800a304:	4b08      	ldr	r3, [pc, #32]	; (800a328 <httpd_init_pcb+0x74>)
 800a306:	f640 2259 	movw	r2, #2649	; 0xa59
 800a30a:	490a      	ldr	r1, [pc, #40]	; (800a334 <httpd_init_pcb+0x80>)
 800a30c:	4808      	ldr	r0, [pc, #32]	; (800a330 <httpd_init_pcb+0x7c>)
 800a30e:	f00a fe59 	bl	8014fc4 <iprintf>
    altcp_accept(pcb, http_accept);
 800a312:	4909      	ldr	r1, [pc, #36]	; (800a338 <httpd_init_pcb+0x84>)
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f003 fad5 	bl	800d8c4 <tcp_accept>
  }
}
 800a31a:	bf00      	nop
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	08029838 	.word	0x08029838
 800a328:	08016048 	.word	0x08016048
 800a32c:	080161d0 	.word	0x080161d0
 800a330:	08016090 	.word	0x08016090
 800a334:	080161ec 	.word	0x080161ec
 800a338:	0800a22d 	.word	0x0800a22d

0800a33c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b082      	sub	sp, #8
 800a340:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800a342:	202e      	movs	r0, #46	; 0x2e
 800a344:	f003 fa38 	bl	800d7b8 <tcp_new_ip_type>
 800a348:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d106      	bne.n	800a35e <httpd_init+0x22>
 800a350:	4b07      	ldr	r3, [pc, #28]	; (800a370 <httpd_init+0x34>)
 800a352:	f640 2272 	movw	r2, #2674	; 0xa72
 800a356:	4907      	ldr	r1, [pc, #28]	; (800a374 <httpd_init+0x38>)
 800a358:	4807      	ldr	r0, [pc, #28]	; (800a378 <httpd_init+0x3c>)
 800a35a:	f00a fe33 	bl	8014fc4 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800a35e:	2150      	movs	r1, #80	; 0x50
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f7ff ffa7 	bl	800a2b4 <httpd_init_pcb>
}
 800a366:	bf00      	nop
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	08016048 	.word	0x08016048
 800a374:	0801620c 	.word	0x0801620c
 800a378:	08016090 	.word	0x08016090

0800a37c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	4603      	mov	r3, r0
 800a384:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a386:	88fb      	ldrh	r3, [r7, #6]
 800a388:	021b      	lsls	r3, r3, #8
 800a38a:	b21a      	sxth	r2, r3
 800a38c:	88fb      	ldrh	r3, [r7, #6]
 800a38e:	0a1b      	lsrs	r3, r3, #8
 800a390:	b29b      	uxth	r3, r3
 800a392:	b21b      	sxth	r3, r3
 800a394:	4313      	orrs	r3, r2
 800a396:	b21b      	sxth	r3, r3
 800a398:	b29b      	uxth	r3, r3
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	061a      	lsls	r2, r3, #24
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	021b      	lsls	r3, r3, #8
 800a3b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a3ba:	431a      	orrs	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	0a1b      	lsrs	r3, r3, #8
 800a3c0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a3c4:	431a      	orrs	r2, r3
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	0e1b      	lsrs	r3, r3, #24
 800a3ca:	4313      	orrs	r3, r2
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	60f8      	str	r0, [r7, #12]
 800a3e0:	60b9      	str	r1, [r7, #8]
 800a3e2:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800a3e4:	68b8      	ldr	r0, [r7, #8]
 800a3e6:	f7f5 ff35 	bl	8000254 <strlen>
 800a3ea:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	e022      	b.n	800a43c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	617b      	str	r3, [r7, #20]
 800a3fa:	e012      	b.n	800a422 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	781a      	ldrb	r2, [r3, #0]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	429a      	cmp	r2, r3
 800a406:	d109      	bne.n	800a41c <lwip_strnstr+0x44>
 800a408:	693a      	ldr	r2, [r7, #16]
 800a40a:	68b9      	ldr	r1, [r7, #8]
 800a40c:	6978      	ldr	r0, [r7, #20]
 800a40e:	f00a fe32 	bl	8015076 <strncmp>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	e00f      	b.n	800a43c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	3301      	adds	r3, #1
 800a420:	617b      	str	r3, [r7, #20]
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d007      	beq.n	800a43a <lwip_strnstr+0x62>
 800a42a:	697a      	ldr	r2, [r7, #20]
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	441a      	add	r2, r3
 800a430:	68f9      	ldr	r1, [r7, #12]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	440b      	add	r3, r1
 800a436:	429a      	cmp	r2, r3
 800a438:	d9e0      	bls.n	800a3fc <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3718      	adds	r7, #24
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b082      	sub	sp, #8
 800a448:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a44a:	2300      	movs	r3, #0
 800a44c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a44e:	f00a fce9 	bl	8014e24 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a452:	f000 f8d5 	bl	800a600 <mem_init>
  memp_init();
 800a456:	f000 fc31 	bl	800acbc <memp_init>
  pbuf_init();
  netif_init();
 800a45a:	f000 fcf7 	bl	800ae4c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a45e:	f007 ffe1 	bl	8012424 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a462:	f001 fe03 	bl	800c06c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a466:	f007 ff25 	bl	80122b4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a46a:	bf00      	nop
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
	...

0800a474 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	4603      	mov	r3, r0
 800a47c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a47e:	4b05      	ldr	r3, [pc, #20]	; (800a494 <ptr_to_mem+0x20>)
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	88fb      	ldrh	r3, [r7, #6]
 800a484:	4413      	add	r3, r2
}
 800a486:	4618      	mov	r0, r3
 800a488:	370c      	adds	r7, #12
 800a48a:	46bd      	mov	sp, r7
 800a48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	2000449c 	.word	0x2000449c

0800a498 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a05      	ldr	r2, [pc, #20]	; (800a4b8 <mem_to_ptr+0x20>)
 800a4a4:	6812      	ldr	r2, [r2, #0]
 800a4a6:	1a9b      	subs	r3, r3, r2
 800a4a8:	b29b      	uxth	r3, r3
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	2000449c 	.word	0x2000449c

0800a4bc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a4bc:	b590      	push	{r4, r7, lr}
 800a4be:	b085      	sub	sp, #20
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a4c4:	4b45      	ldr	r3, [pc, #276]	; (800a5dc <plug_holes+0x120>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d206      	bcs.n	800a4dc <plug_holes+0x20>
 800a4ce:	4b44      	ldr	r3, [pc, #272]	; (800a5e0 <plug_holes+0x124>)
 800a4d0:	f240 12df 	movw	r2, #479	; 0x1df
 800a4d4:	4943      	ldr	r1, [pc, #268]	; (800a5e4 <plug_holes+0x128>)
 800a4d6:	4844      	ldr	r0, [pc, #272]	; (800a5e8 <plug_holes+0x12c>)
 800a4d8:	f00a fd74 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a4dc:	4b43      	ldr	r3, [pc, #268]	; (800a5ec <plug_holes+0x130>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d306      	bcc.n	800a4f4 <plug_holes+0x38>
 800a4e6:	4b3e      	ldr	r3, [pc, #248]	; (800a5e0 <plug_holes+0x124>)
 800a4e8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a4ec:	4940      	ldr	r1, [pc, #256]	; (800a5f0 <plug_holes+0x134>)
 800a4ee:	483e      	ldr	r0, [pc, #248]	; (800a5e8 <plug_holes+0x12c>)
 800a4f0:	f00a fd68 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	791b      	ldrb	r3, [r3, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d006      	beq.n	800a50a <plug_holes+0x4e>
 800a4fc:	4b38      	ldr	r3, [pc, #224]	; (800a5e0 <plug_holes+0x124>)
 800a4fe:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a502:	493c      	ldr	r1, [pc, #240]	; (800a5f4 <plug_holes+0x138>)
 800a504:	4838      	ldr	r0, [pc, #224]	; (800a5e8 <plug_holes+0x12c>)
 800a506:	f00a fd5d 	bl	8014fc4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	881b      	ldrh	r3, [r3, #0]
 800a50e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a512:	d906      	bls.n	800a522 <plug_holes+0x66>
 800a514:	4b32      	ldr	r3, [pc, #200]	; (800a5e0 <plug_holes+0x124>)
 800a516:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a51a:	4937      	ldr	r1, [pc, #220]	; (800a5f8 <plug_holes+0x13c>)
 800a51c:	4832      	ldr	r0, [pc, #200]	; (800a5e8 <plug_holes+0x12c>)
 800a51e:	f00a fd51 	bl	8014fc4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	881b      	ldrh	r3, [r3, #0]
 800a526:	4618      	mov	r0, r3
 800a528:	f7ff ffa4 	bl	800a474 <ptr_to_mem>
 800a52c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	429a      	cmp	r2, r3
 800a534:	d024      	beq.n	800a580 <plug_holes+0xc4>
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	791b      	ldrb	r3, [r3, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d120      	bne.n	800a580 <plug_holes+0xc4>
 800a53e:	4b2b      	ldr	r3, [pc, #172]	; (800a5ec <plug_holes+0x130>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68fa      	ldr	r2, [r7, #12]
 800a544:	429a      	cmp	r2, r3
 800a546:	d01b      	beq.n	800a580 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a548:	4b2c      	ldr	r3, [pc, #176]	; (800a5fc <plug_holes+0x140>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	429a      	cmp	r2, r3
 800a550:	d102      	bne.n	800a558 <plug_holes+0x9c>
      lfree = mem;
 800a552:	4a2a      	ldr	r2, [pc, #168]	; (800a5fc <plug_holes+0x140>)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	881a      	ldrh	r2, [r3, #0]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	881b      	ldrh	r3, [r3, #0]
 800a564:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a568:	d00a      	beq.n	800a580 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	881b      	ldrh	r3, [r3, #0]
 800a56e:	4618      	mov	r0, r3
 800a570:	f7ff ff80 	bl	800a474 <ptr_to_mem>
 800a574:	4604      	mov	r4, r0
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f7ff ff8e 	bl	800a498 <mem_to_ptr>
 800a57c:	4603      	mov	r3, r0
 800a57e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	885b      	ldrh	r3, [r3, #2]
 800a584:	4618      	mov	r0, r3
 800a586:	f7ff ff75 	bl	800a474 <ptr_to_mem>
 800a58a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a58c:	68ba      	ldr	r2, [r7, #8]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	429a      	cmp	r2, r3
 800a592:	d01f      	beq.n	800a5d4 <plug_holes+0x118>
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	791b      	ldrb	r3, [r3, #4]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d11b      	bne.n	800a5d4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a59c:	4b17      	ldr	r3, [pc, #92]	; (800a5fc <plug_holes+0x140>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d102      	bne.n	800a5ac <plug_holes+0xf0>
      lfree = pmem;
 800a5a6:	4a15      	ldr	r2, [pc, #84]	; (800a5fc <plug_holes+0x140>)
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	881a      	ldrh	r2, [r3, #0]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	881b      	ldrh	r3, [r3, #0]
 800a5b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a5bc:	d00a      	beq.n	800a5d4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	881b      	ldrh	r3, [r3, #0]
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f7ff ff56 	bl	800a474 <ptr_to_mem>
 800a5c8:	4604      	mov	r4, r0
 800a5ca:	68b8      	ldr	r0, [r7, #8]
 800a5cc:	f7ff ff64 	bl	800a498 <mem_to_ptr>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a5d4:	bf00      	nop
 800a5d6:	3714      	adds	r7, #20
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd90      	pop	{r4, r7, pc}
 800a5dc:	2000449c 	.word	0x2000449c
 800a5e0:	08016228 	.word	0x08016228
 800a5e4:	08016258 	.word	0x08016258
 800a5e8:	08016270 	.word	0x08016270
 800a5ec:	200044a0 	.word	0x200044a0
 800a5f0:	08016298 	.word	0x08016298
 800a5f4:	080162b4 	.word	0x080162b4
 800a5f8:	080162d0 	.word	0x080162d0
 800a5fc:	200044a8 	.word	0x200044a8

0800a600 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a606:	4b1f      	ldr	r3, [pc, #124]	; (800a684 <mem_init+0x84>)
 800a608:	3303      	adds	r3, #3
 800a60a:	f023 0303 	bic.w	r3, r3, #3
 800a60e:	461a      	mov	r2, r3
 800a610:	4b1d      	ldr	r3, [pc, #116]	; (800a688 <mem_init+0x88>)
 800a612:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a614:	4b1c      	ldr	r3, [pc, #112]	; (800a688 <mem_init+0x88>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a620:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a62e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a632:	f7ff ff1f 	bl	800a474 <ptr_to_mem>
 800a636:	4602      	mov	r2, r0
 800a638:	4b14      	ldr	r3, [pc, #80]	; (800a68c <mem_init+0x8c>)
 800a63a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800a63c:	4b13      	ldr	r3, [pc, #76]	; (800a68c <mem_init+0x8c>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2201      	movs	r2, #1
 800a642:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a644:	4b11      	ldr	r3, [pc, #68]	; (800a68c <mem_init+0x8c>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a64c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a64e:	4b0f      	ldr	r3, [pc, #60]	; (800a68c <mem_init+0x8c>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a656:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a658:	4b0b      	ldr	r3, [pc, #44]	; (800a688 <mem_init+0x88>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a0c      	ldr	r2, [pc, #48]	; (800a690 <mem_init+0x90>)
 800a65e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a660:	480c      	ldr	r0, [pc, #48]	; (800a694 <mem_init+0x94>)
 800a662:	f00a fbed 	bl	8014e40 <sys_mutex_new>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d006      	beq.n	800a67a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a66c:	4b0a      	ldr	r3, [pc, #40]	; (800a698 <mem_init+0x98>)
 800a66e:	f240 221f 	movw	r2, #543	; 0x21f
 800a672:	490a      	ldr	r1, [pc, #40]	; (800a69c <mem_init+0x9c>)
 800a674:	480a      	ldr	r0, [pc, #40]	; (800a6a0 <mem_init+0xa0>)
 800a676:	f00a fca5 	bl	8014fc4 <iprintf>
  }
}
 800a67a:	bf00      	nop
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	20007d40 	.word	0x20007d40
 800a688:	2000449c 	.word	0x2000449c
 800a68c:	200044a0 	.word	0x200044a0
 800a690:	200044a8 	.word	0x200044a8
 800a694:	200044a4 	.word	0x200044a4
 800a698:	08016228 	.word	0x08016228
 800a69c:	080162fc 	.word	0x080162fc
 800a6a0:	08016270 	.word	0x08016270

0800a6a4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b086      	sub	sp, #24
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f7ff fef3 	bl	800a498 <mem_to_ptr>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	881b      	ldrh	r3, [r3, #0]
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7ff feda 	bl	800a474 <ptr_to_mem>
 800a6c0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	885b      	ldrh	r3, [r3, #2]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7ff fed4 	bl	800a474 <ptr_to_mem>
 800a6cc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	881b      	ldrh	r3, [r3, #0]
 800a6d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a6d6:	d818      	bhi.n	800a70a <mem_link_valid+0x66>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	885b      	ldrh	r3, [r3, #2]
 800a6dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a6e0:	d813      	bhi.n	800a70a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a6e6:	8afa      	ldrh	r2, [r7, #22]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d004      	beq.n	800a6f6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	881b      	ldrh	r3, [r3, #0]
 800a6f0:	8afa      	ldrh	r2, [r7, #22]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d109      	bne.n	800a70a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a6f6:	4b08      	ldr	r3, [pc, #32]	; (800a718 <mem_link_valid+0x74>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a6fa:	693a      	ldr	r2, [r7, #16]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d006      	beq.n	800a70e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	885b      	ldrh	r3, [r3, #2]
 800a704:	8afa      	ldrh	r2, [r7, #22]
 800a706:	429a      	cmp	r2, r3
 800a708:	d001      	beq.n	800a70e <mem_link_valid+0x6a>
    return 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	e000      	b.n	800a710 <mem_link_valid+0x6c>
  }
  return 1;
 800a70e:	2301      	movs	r3, #1
}
 800a710:	4618      	mov	r0, r3
 800a712:	3718      	adds	r7, #24
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}
 800a718:	200044a0 	.word	0x200044a0

0800a71c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b088      	sub	sp, #32
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d070      	beq.n	800a80c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f003 0303 	and.w	r3, r3, #3
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00d      	beq.n	800a750 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a734:	4b37      	ldr	r3, [pc, #220]	; (800a814 <mem_free+0xf8>)
 800a736:	f240 2273 	movw	r2, #627	; 0x273
 800a73a:	4937      	ldr	r1, [pc, #220]	; (800a818 <mem_free+0xfc>)
 800a73c:	4837      	ldr	r0, [pc, #220]	; (800a81c <mem_free+0x100>)
 800a73e:	f00a fc41 	bl	8014fc4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a742:	f00a fbdb 	bl	8014efc <sys_arch_protect>
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	68f8      	ldr	r0, [r7, #12]
 800a74a:	f00a fbe5 	bl	8014f18 <sys_arch_unprotect>
    return;
 800a74e:	e05e      	b.n	800a80e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	3b08      	subs	r3, #8
 800a754:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a756:	4b32      	ldr	r3, [pc, #200]	; (800a820 <mem_free+0x104>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	69fa      	ldr	r2, [r7, #28]
 800a75c:	429a      	cmp	r2, r3
 800a75e:	d306      	bcc.n	800a76e <mem_free+0x52>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f103 020c 	add.w	r2, r3, #12
 800a766:	4b2f      	ldr	r3, [pc, #188]	; (800a824 <mem_free+0x108>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d90d      	bls.n	800a78a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a76e:	4b29      	ldr	r3, [pc, #164]	; (800a814 <mem_free+0xf8>)
 800a770:	f240 227f 	movw	r2, #639	; 0x27f
 800a774:	492c      	ldr	r1, [pc, #176]	; (800a828 <mem_free+0x10c>)
 800a776:	4829      	ldr	r0, [pc, #164]	; (800a81c <mem_free+0x100>)
 800a778:	f00a fc24 	bl	8014fc4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a77c:	f00a fbbe 	bl	8014efc <sys_arch_protect>
 800a780:	6138      	str	r0, [r7, #16]
 800a782:	6938      	ldr	r0, [r7, #16]
 800a784:	f00a fbc8 	bl	8014f18 <sys_arch_unprotect>
    return;
 800a788:	e041      	b.n	800a80e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a78a:	4828      	ldr	r0, [pc, #160]	; (800a82c <mem_free+0x110>)
 800a78c:	f00a fb74 	bl	8014e78 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	791b      	ldrb	r3, [r3, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d110      	bne.n	800a7ba <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a798:	4b1e      	ldr	r3, [pc, #120]	; (800a814 <mem_free+0xf8>)
 800a79a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a79e:	4924      	ldr	r1, [pc, #144]	; (800a830 <mem_free+0x114>)
 800a7a0:	481e      	ldr	r0, [pc, #120]	; (800a81c <mem_free+0x100>)
 800a7a2:	f00a fc0f 	bl	8014fc4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a7a6:	4821      	ldr	r0, [pc, #132]	; (800a82c <mem_free+0x110>)
 800a7a8:	f00a fb75 	bl	8014e96 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a7ac:	f00a fba6 	bl	8014efc <sys_arch_protect>
 800a7b0:	6178      	str	r0, [r7, #20]
 800a7b2:	6978      	ldr	r0, [r7, #20]
 800a7b4:	f00a fbb0 	bl	8014f18 <sys_arch_unprotect>
    return;
 800a7b8:	e029      	b.n	800a80e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a7ba:	69f8      	ldr	r0, [r7, #28]
 800a7bc:	f7ff ff72 	bl	800a6a4 <mem_link_valid>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d110      	bne.n	800a7e8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a7c6:	4b13      	ldr	r3, [pc, #76]	; (800a814 <mem_free+0xf8>)
 800a7c8:	f240 2295 	movw	r2, #661	; 0x295
 800a7cc:	4919      	ldr	r1, [pc, #100]	; (800a834 <mem_free+0x118>)
 800a7ce:	4813      	ldr	r0, [pc, #76]	; (800a81c <mem_free+0x100>)
 800a7d0:	f00a fbf8 	bl	8014fc4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a7d4:	4815      	ldr	r0, [pc, #84]	; (800a82c <mem_free+0x110>)
 800a7d6:	f00a fb5e 	bl	8014e96 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a7da:	f00a fb8f 	bl	8014efc <sys_arch_protect>
 800a7de:	61b8      	str	r0, [r7, #24]
 800a7e0:	69b8      	ldr	r0, [r7, #24]
 800a7e2:	f00a fb99 	bl	8014f18 <sys_arch_unprotect>
    return;
 800a7e6:	e012      	b.n	800a80e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a7ee:	4b12      	ldr	r3, [pc, #72]	; (800a838 <mem_free+0x11c>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	69fa      	ldr	r2, [r7, #28]
 800a7f4:	429a      	cmp	r2, r3
 800a7f6:	d202      	bcs.n	800a7fe <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a7f8:	4a0f      	ldr	r2, [pc, #60]	; (800a838 <mem_free+0x11c>)
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a7fe:	69f8      	ldr	r0, [r7, #28]
 800a800:	f7ff fe5c 	bl	800a4bc <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a804:	4809      	ldr	r0, [pc, #36]	; (800a82c <mem_free+0x110>)
 800a806:	f00a fb46 	bl	8014e96 <sys_mutex_unlock>
 800a80a:	e000      	b.n	800a80e <mem_free+0xf2>
    return;
 800a80c:	bf00      	nop
}
 800a80e:	3720      	adds	r7, #32
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	08016228 	.word	0x08016228
 800a818:	08016318 	.word	0x08016318
 800a81c:	08016270 	.word	0x08016270
 800a820:	2000449c 	.word	0x2000449c
 800a824:	200044a0 	.word	0x200044a0
 800a828:	0801633c 	.word	0x0801633c
 800a82c:	200044a4 	.word	0x200044a4
 800a830:	08016358 	.word	0x08016358
 800a834:	08016380 	.word	0x08016380
 800a838:	200044a8 	.word	0x200044a8

0800a83c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b088      	sub	sp, #32
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a848:	887b      	ldrh	r3, [r7, #2]
 800a84a:	3303      	adds	r3, #3
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	f023 0303 	bic.w	r3, r3, #3
 800a852:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a854:	8bfb      	ldrh	r3, [r7, #30]
 800a856:	2b0b      	cmp	r3, #11
 800a858:	d801      	bhi.n	800a85e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a85a:	230c      	movs	r3, #12
 800a85c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a85e:	8bfb      	ldrh	r3, [r7, #30]
 800a860:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a864:	d803      	bhi.n	800a86e <mem_trim+0x32>
 800a866:	8bfa      	ldrh	r2, [r7, #30]
 800a868:	887b      	ldrh	r3, [r7, #2]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d201      	bcs.n	800a872 <mem_trim+0x36>
    return NULL;
 800a86e:	2300      	movs	r3, #0
 800a870:	e0d8      	b.n	800aa24 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a872:	4b6e      	ldr	r3, [pc, #440]	; (800aa2c <mem_trim+0x1f0>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	429a      	cmp	r2, r3
 800a87a:	d304      	bcc.n	800a886 <mem_trim+0x4a>
 800a87c:	4b6c      	ldr	r3, [pc, #432]	; (800aa30 <mem_trim+0x1f4>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	429a      	cmp	r2, r3
 800a884:	d306      	bcc.n	800a894 <mem_trim+0x58>
 800a886:	4b6b      	ldr	r3, [pc, #428]	; (800aa34 <mem_trim+0x1f8>)
 800a888:	f240 22d2 	movw	r2, #722	; 0x2d2
 800a88c:	496a      	ldr	r1, [pc, #424]	; (800aa38 <mem_trim+0x1fc>)
 800a88e:	486b      	ldr	r0, [pc, #428]	; (800aa3c <mem_trim+0x200>)
 800a890:	f00a fb98 	bl	8014fc4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a894:	4b65      	ldr	r3, [pc, #404]	; (800aa2c <mem_trim+0x1f0>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	687a      	ldr	r2, [r7, #4]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d304      	bcc.n	800a8a8 <mem_trim+0x6c>
 800a89e:	4b64      	ldr	r3, [pc, #400]	; (800aa30 <mem_trim+0x1f4>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	687a      	ldr	r2, [r7, #4]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d307      	bcc.n	800a8b8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a8a8:	f00a fb28 	bl	8014efc <sys_arch_protect>
 800a8ac:	60b8      	str	r0, [r7, #8]
 800a8ae:	68b8      	ldr	r0, [r7, #8]
 800a8b0:	f00a fb32 	bl	8014f18 <sys_arch_unprotect>
    return rmem;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	e0b5      	b.n	800aa24 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	3b08      	subs	r3, #8
 800a8bc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a8be:	69b8      	ldr	r0, [r7, #24]
 800a8c0:	f7ff fdea 	bl	800a498 <mem_to_ptr>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a8c8:	69bb      	ldr	r3, [r7, #24]
 800a8ca:	881a      	ldrh	r2, [r3, #0]
 800a8cc:	8afb      	ldrh	r3, [r7, #22]
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	3b08      	subs	r3, #8
 800a8d4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a8d6:	8bfa      	ldrh	r2, [r7, #30]
 800a8d8:	8abb      	ldrh	r3, [r7, #20]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d906      	bls.n	800a8ec <mem_trim+0xb0>
 800a8de:	4b55      	ldr	r3, [pc, #340]	; (800aa34 <mem_trim+0x1f8>)
 800a8e0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a8e4:	4956      	ldr	r1, [pc, #344]	; (800aa40 <mem_trim+0x204>)
 800a8e6:	4855      	ldr	r0, [pc, #340]	; (800aa3c <mem_trim+0x200>)
 800a8e8:	f00a fb6c 	bl	8014fc4 <iprintf>
  if (newsize > size) {
 800a8ec:	8bfa      	ldrh	r2, [r7, #30]
 800a8ee:	8abb      	ldrh	r3, [r7, #20]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d901      	bls.n	800a8f8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	e095      	b.n	800aa24 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a8f8:	8bfa      	ldrh	r2, [r7, #30]
 800a8fa:	8abb      	ldrh	r3, [r7, #20]
 800a8fc:	429a      	cmp	r2, r3
 800a8fe:	d101      	bne.n	800a904 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	e08f      	b.n	800aa24 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a904:	484f      	ldr	r0, [pc, #316]	; (800aa44 <mem_trim+0x208>)
 800a906:	f00a fab7 	bl	8014e78 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a90a:	69bb      	ldr	r3, [r7, #24]
 800a90c:	881b      	ldrh	r3, [r3, #0]
 800a90e:	4618      	mov	r0, r3
 800a910:	f7ff fdb0 	bl	800a474 <ptr_to_mem>
 800a914:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	791b      	ldrb	r3, [r3, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d13f      	bne.n	800a99e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	881b      	ldrh	r3, [r3, #0]
 800a922:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a926:	d106      	bne.n	800a936 <mem_trim+0xfa>
 800a928:	4b42      	ldr	r3, [pc, #264]	; (800aa34 <mem_trim+0x1f8>)
 800a92a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a92e:	4946      	ldr	r1, [pc, #280]	; (800aa48 <mem_trim+0x20c>)
 800a930:	4842      	ldr	r0, [pc, #264]	; (800aa3c <mem_trim+0x200>)
 800a932:	f00a fb47 	bl	8014fc4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	881b      	ldrh	r3, [r3, #0]
 800a93a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a93c:	8afa      	ldrh	r2, [r7, #22]
 800a93e:	8bfb      	ldrh	r3, [r7, #30]
 800a940:	4413      	add	r3, r2
 800a942:	b29b      	uxth	r3, r3
 800a944:	3308      	adds	r3, #8
 800a946:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a948:	4b40      	ldr	r3, [pc, #256]	; (800aa4c <mem_trim+0x210>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	693a      	ldr	r2, [r7, #16]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d106      	bne.n	800a960 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a952:	89fb      	ldrh	r3, [r7, #14]
 800a954:	4618      	mov	r0, r3
 800a956:	f7ff fd8d 	bl	800a474 <ptr_to_mem>
 800a95a:	4602      	mov	r2, r0
 800a95c:	4b3b      	ldr	r3, [pc, #236]	; (800aa4c <mem_trim+0x210>)
 800a95e:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a960:	89fb      	ldrh	r3, [r7, #14]
 800a962:	4618      	mov	r0, r3
 800a964:	f7ff fd86 	bl	800a474 <ptr_to_mem>
 800a968:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	2200      	movs	r2, #0
 800a96e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	89ba      	ldrh	r2, [r7, #12]
 800a974:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	8afa      	ldrh	r2, [r7, #22]
 800a97a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	89fa      	ldrh	r2, [r7, #14]
 800a980:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a982:	693b      	ldr	r3, [r7, #16]
 800a984:	881b      	ldrh	r3, [r3, #0]
 800a986:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a98a:	d047      	beq.n	800aa1c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a98c:	693b      	ldr	r3, [r7, #16]
 800a98e:	881b      	ldrh	r3, [r3, #0]
 800a990:	4618      	mov	r0, r3
 800a992:	f7ff fd6f 	bl	800a474 <ptr_to_mem>
 800a996:	4602      	mov	r2, r0
 800a998:	89fb      	ldrh	r3, [r7, #14]
 800a99a:	8053      	strh	r3, [r2, #2]
 800a99c:	e03e      	b.n	800aa1c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a99e:	8bfb      	ldrh	r3, [r7, #30]
 800a9a0:	f103 0214 	add.w	r2, r3, #20
 800a9a4:	8abb      	ldrh	r3, [r7, #20]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d838      	bhi.n	800aa1c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a9aa:	8afa      	ldrh	r2, [r7, #22]
 800a9ac:	8bfb      	ldrh	r3, [r7, #30]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	3308      	adds	r3, #8
 800a9b4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	881b      	ldrh	r3, [r3, #0]
 800a9ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a9be:	d106      	bne.n	800a9ce <mem_trim+0x192>
 800a9c0:	4b1c      	ldr	r3, [pc, #112]	; (800aa34 <mem_trim+0x1f8>)
 800a9c2:	f240 3216 	movw	r2, #790	; 0x316
 800a9c6:	4920      	ldr	r1, [pc, #128]	; (800aa48 <mem_trim+0x20c>)
 800a9c8:	481c      	ldr	r0, [pc, #112]	; (800aa3c <mem_trim+0x200>)
 800a9ca:	f00a fafb 	bl	8014fc4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a9ce:	89fb      	ldrh	r3, [r7, #14]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7ff fd4f 	bl	800a474 <ptr_to_mem>
 800a9d6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a9d8:	4b1c      	ldr	r3, [pc, #112]	; (800aa4c <mem_trim+0x210>)
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	693a      	ldr	r2, [r7, #16]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d202      	bcs.n	800a9e8 <mem_trim+0x1ac>
      lfree = mem2;
 800a9e2:	4a1a      	ldr	r2, [pc, #104]	; (800aa4c <mem_trim+0x210>)
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a9ee:	69bb      	ldr	r3, [r7, #24]
 800a9f0:	881a      	ldrh	r2, [r3, #0]
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	8afa      	ldrh	r2, [r7, #22]
 800a9fa:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	89fa      	ldrh	r2, [r7, #14]
 800aa00:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	881b      	ldrh	r3, [r3, #0]
 800aa06:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa0a:	d007      	beq.n	800aa1c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	881b      	ldrh	r3, [r3, #0]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7ff fd2f 	bl	800a474 <ptr_to_mem>
 800aa16:	4602      	mov	r2, r0
 800aa18:	89fb      	ldrh	r3, [r7, #14]
 800aa1a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800aa1c:	4809      	ldr	r0, [pc, #36]	; (800aa44 <mem_trim+0x208>)
 800aa1e:	f00a fa3a 	bl	8014e96 <sys_mutex_unlock>
  return rmem;
 800aa22:	687b      	ldr	r3, [r7, #4]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3720      	adds	r7, #32
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	2000449c 	.word	0x2000449c
 800aa30:	200044a0 	.word	0x200044a0
 800aa34:	08016228 	.word	0x08016228
 800aa38:	080163b4 	.word	0x080163b4
 800aa3c:	08016270 	.word	0x08016270
 800aa40:	080163cc 	.word	0x080163cc
 800aa44:	200044a4 	.word	0x200044a4
 800aa48:	080163ec 	.word	0x080163ec
 800aa4c:	200044a8 	.word	0x200044a8

0800aa50 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b088      	sub	sp, #32
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	4603      	mov	r3, r0
 800aa58:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800aa5a:	88fb      	ldrh	r3, [r7, #6]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d101      	bne.n	800aa64 <mem_malloc+0x14>
    return NULL;
 800aa60:	2300      	movs	r3, #0
 800aa62:	e0e2      	b.n	800ac2a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800aa64:	88fb      	ldrh	r3, [r7, #6]
 800aa66:	3303      	adds	r3, #3
 800aa68:	b29b      	uxth	r3, r3
 800aa6a:	f023 0303 	bic.w	r3, r3, #3
 800aa6e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800aa70:	8bbb      	ldrh	r3, [r7, #28]
 800aa72:	2b0b      	cmp	r3, #11
 800aa74:	d801      	bhi.n	800aa7a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800aa76:	230c      	movs	r3, #12
 800aa78:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800aa7a:	8bbb      	ldrh	r3, [r7, #28]
 800aa7c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa80:	d803      	bhi.n	800aa8a <mem_malloc+0x3a>
 800aa82:	8bba      	ldrh	r2, [r7, #28]
 800aa84:	88fb      	ldrh	r3, [r7, #6]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d201      	bcs.n	800aa8e <mem_malloc+0x3e>
    return NULL;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	e0cd      	b.n	800ac2a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800aa8e:	4869      	ldr	r0, [pc, #420]	; (800ac34 <mem_malloc+0x1e4>)
 800aa90:	f00a f9f2 	bl	8014e78 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800aa94:	4b68      	ldr	r3, [pc, #416]	; (800ac38 <mem_malloc+0x1e8>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f7ff fcfd 	bl	800a498 <mem_to_ptr>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	83fb      	strh	r3, [r7, #30]
 800aaa2:	e0b7      	b.n	800ac14 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800aaa4:	8bfb      	ldrh	r3, [r7, #30]
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7ff fce4 	bl	800a474 <ptr_to_mem>
 800aaac:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	791b      	ldrb	r3, [r3, #4]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f040 80a7 	bne.w	800ac06 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	881b      	ldrh	r3, [r3, #0]
 800aabc:	461a      	mov	r2, r3
 800aabe:	8bfb      	ldrh	r3, [r7, #30]
 800aac0:	1ad3      	subs	r3, r2, r3
 800aac2:	f1a3 0208 	sub.w	r2, r3, #8
 800aac6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800aac8:	429a      	cmp	r2, r3
 800aaca:	f0c0 809c 	bcc.w	800ac06 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	461a      	mov	r2, r3
 800aad4:	8bfb      	ldrh	r3, [r7, #30]
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	f1a3 0208 	sub.w	r2, r3, #8
 800aadc:	8bbb      	ldrh	r3, [r7, #28]
 800aade:	3314      	adds	r3, #20
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d333      	bcc.n	800ab4c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800aae4:	8bfa      	ldrh	r2, [r7, #30]
 800aae6:	8bbb      	ldrh	r3, [r7, #28]
 800aae8:	4413      	add	r3, r2
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	3308      	adds	r3, #8
 800aaee:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800aaf0:	8a7b      	ldrh	r3, [r7, #18]
 800aaf2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aaf6:	d106      	bne.n	800ab06 <mem_malloc+0xb6>
 800aaf8:	4b50      	ldr	r3, [pc, #320]	; (800ac3c <mem_malloc+0x1ec>)
 800aafa:	f240 3287 	movw	r2, #903	; 0x387
 800aafe:	4950      	ldr	r1, [pc, #320]	; (800ac40 <mem_malloc+0x1f0>)
 800ab00:	4850      	ldr	r0, [pc, #320]	; (800ac44 <mem_malloc+0x1f4>)
 800ab02:	f00a fa5f 	bl	8014fc4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ab06:	8a7b      	ldrh	r3, [r7, #18]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7ff fcb3 	bl	800a474 <ptr_to_mem>
 800ab0e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2200      	movs	r2, #0
 800ab14:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	881a      	ldrh	r2, [r3, #0]
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	8bfa      	ldrh	r2, [r7, #30]
 800ab22:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	8a7a      	ldrh	r2, [r7, #18]
 800ab28:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab38:	d00b      	beq.n	800ab52 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7ff fc98 	bl	800a474 <ptr_to_mem>
 800ab44:	4602      	mov	r2, r0
 800ab46:	8a7b      	ldrh	r3, [r7, #18]
 800ab48:	8053      	strh	r3, [r2, #2]
 800ab4a:	e002      	b.n	800ab52 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ab52:	4b39      	ldr	r3, [pc, #228]	; (800ac38 <mem_malloc+0x1e8>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d127      	bne.n	800abac <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ab5c:	4b36      	ldr	r3, [pc, #216]	; (800ac38 <mem_malloc+0x1e8>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ab62:	e005      	b.n	800ab70 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f7ff fc83 	bl	800a474 <ptr_to_mem>
 800ab6e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	791b      	ldrb	r3, [r3, #4]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d004      	beq.n	800ab82 <mem_malloc+0x132>
 800ab78:	4b33      	ldr	r3, [pc, #204]	; (800ac48 <mem_malloc+0x1f8>)
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d1f0      	bne.n	800ab64 <mem_malloc+0x114>
          }
          lfree = cur;
 800ab82:	4a2d      	ldr	r2, [pc, #180]	; (800ac38 <mem_malloc+0x1e8>)
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ab88:	4b2b      	ldr	r3, [pc, #172]	; (800ac38 <mem_malloc+0x1e8>)
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	4b2e      	ldr	r3, [pc, #184]	; (800ac48 <mem_malloc+0x1f8>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d00b      	beq.n	800abac <mem_malloc+0x15c>
 800ab94:	4b28      	ldr	r3, [pc, #160]	; (800ac38 <mem_malloc+0x1e8>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	791b      	ldrb	r3, [r3, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d006      	beq.n	800abac <mem_malloc+0x15c>
 800ab9e:	4b27      	ldr	r3, [pc, #156]	; (800ac3c <mem_malloc+0x1ec>)
 800aba0:	f240 32b5 	movw	r2, #949	; 0x3b5
 800aba4:	4929      	ldr	r1, [pc, #164]	; (800ac4c <mem_malloc+0x1fc>)
 800aba6:	4827      	ldr	r0, [pc, #156]	; (800ac44 <mem_malloc+0x1f4>)
 800aba8:	f00a fa0c 	bl	8014fc4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800abac:	4821      	ldr	r0, [pc, #132]	; (800ac34 <mem_malloc+0x1e4>)
 800abae:	f00a f972 	bl	8014e96 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800abb2:	8bba      	ldrh	r2, [r7, #28]
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	4413      	add	r3, r2
 800abb8:	3308      	adds	r3, #8
 800abba:	4a23      	ldr	r2, [pc, #140]	; (800ac48 <mem_malloc+0x1f8>)
 800abbc:	6812      	ldr	r2, [r2, #0]
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d906      	bls.n	800abd0 <mem_malloc+0x180>
 800abc2:	4b1e      	ldr	r3, [pc, #120]	; (800ac3c <mem_malloc+0x1ec>)
 800abc4:	f240 32ba 	movw	r2, #954	; 0x3ba
 800abc8:	4921      	ldr	r1, [pc, #132]	; (800ac50 <mem_malloc+0x200>)
 800abca:	481e      	ldr	r0, [pc, #120]	; (800ac44 <mem_malloc+0x1f4>)
 800abcc:	f00a f9fa 	bl	8014fc4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	f003 0303 	and.w	r3, r3, #3
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d006      	beq.n	800abe8 <mem_malloc+0x198>
 800abda:	4b18      	ldr	r3, [pc, #96]	; (800ac3c <mem_malloc+0x1ec>)
 800abdc:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800abe0:	491c      	ldr	r1, [pc, #112]	; (800ac54 <mem_malloc+0x204>)
 800abe2:	4818      	ldr	r0, [pc, #96]	; (800ac44 <mem_malloc+0x1f4>)
 800abe4:	f00a f9ee 	bl	8014fc4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	f003 0303 	and.w	r3, r3, #3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d006      	beq.n	800ac00 <mem_malloc+0x1b0>
 800abf2:	4b12      	ldr	r3, [pc, #72]	; (800ac3c <mem_malloc+0x1ec>)
 800abf4:	f240 32be 	movw	r2, #958	; 0x3be
 800abf8:	4917      	ldr	r1, [pc, #92]	; (800ac58 <mem_malloc+0x208>)
 800abfa:	4812      	ldr	r0, [pc, #72]	; (800ac44 <mem_malloc+0x1f4>)
 800abfc:	f00a f9e2 	bl	8014fc4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	3308      	adds	r3, #8
 800ac04:	e011      	b.n	800ac2a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ac06:	8bfb      	ldrh	r3, [r7, #30]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7ff fc33 	bl	800a474 <ptr_to_mem>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	881b      	ldrh	r3, [r3, #0]
 800ac12:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ac14:	8bfa      	ldrh	r2, [r7, #30]
 800ac16:	8bbb      	ldrh	r3, [r7, #28]
 800ac18:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	f4ff af41 	bcc.w	800aaa4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ac22:	4804      	ldr	r0, [pc, #16]	; (800ac34 <mem_malloc+0x1e4>)
 800ac24:	f00a f937 	bl	8014e96 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3720      	adds	r7, #32
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	200044a4 	.word	0x200044a4
 800ac38:	200044a8 	.word	0x200044a8
 800ac3c:	08016228 	.word	0x08016228
 800ac40:	080163ec 	.word	0x080163ec
 800ac44:	08016270 	.word	0x08016270
 800ac48:	200044a0 	.word	0x200044a0
 800ac4c:	08016400 	.word	0x08016400
 800ac50:	0801641c 	.word	0x0801641c
 800ac54:	0801644c 	.word	0x0801644c
 800ac58:	0801647c 	.word	0x0801647c

0800ac5c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	3303      	adds	r3, #3
 800ac72:	f023 0303 	bic.w	r3, r3, #3
 800ac76:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ac78:	2300      	movs	r3, #0
 800ac7a:	60fb      	str	r3, [r7, #12]
 800ac7c:	e011      	b.n	800aca2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	68ba      	ldr	r2, [r7, #8]
 800ac8e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	881b      	ldrh	r3, [r3, #0]
 800ac94:	461a      	mov	r2, r3
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	4413      	add	r3, r2
 800ac9a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	3301      	adds	r3, #1
 800aca0:	60fb      	str	r3, [r7, #12]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	885b      	ldrh	r3, [r3, #2]
 800aca6:	461a      	mov	r2, r3
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	4293      	cmp	r3, r2
 800acac:	dbe7      	blt.n	800ac7e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800acae:	bf00      	nop
 800acb0:	3714      	adds	r7, #20
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr
	...

0800acbc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800acc2:	2300      	movs	r3, #0
 800acc4:	80fb      	strh	r3, [r7, #6]
 800acc6:	e009      	b.n	800acdc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800acc8:	88fb      	ldrh	r3, [r7, #6]
 800acca:	4a08      	ldr	r2, [pc, #32]	; (800acec <memp_init+0x30>)
 800accc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7ff ffc3 	bl	800ac5c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800acd6:	88fb      	ldrh	r3, [r7, #6]
 800acd8:	3301      	adds	r3, #1
 800acda:	80fb      	strh	r3, [r7, #6]
 800acdc:	88fb      	ldrh	r3, [r7, #6]
 800acde:	2b0c      	cmp	r3, #12
 800ace0:	d9f2      	bls.n	800acc8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ace2:	bf00      	nop
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}
 800acea:	bf00      	nop
 800acec:	080297c4 	.word	0x080297c4

0800acf0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800acf8:	f00a f900 	bl	8014efc <sys_arch_protect>
 800acfc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d015      	beq.n	800ad38 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	68ba      	ldr	r2, [r7, #8]
 800ad12:	6812      	ldr	r2, [r2, #0]
 800ad14:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	f003 0303 	and.w	r3, r3, #3
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d006      	beq.n	800ad2e <do_memp_malloc_pool+0x3e>
 800ad20:	4b09      	ldr	r3, [pc, #36]	; (800ad48 <do_memp_malloc_pool+0x58>)
 800ad22:	f240 1219 	movw	r2, #281	; 0x119
 800ad26:	4909      	ldr	r1, [pc, #36]	; (800ad4c <do_memp_malloc_pool+0x5c>)
 800ad28:	4809      	ldr	r0, [pc, #36]	; (800ad50 <do_memp_malloc_pool+0x60>)
 800ad2a:	f00a f94b 	bl	8014fc4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f00a f8f2 	bl	8014f18 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	e003      	b.n	800ad40 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f00a f8ed 	bl	8014f18 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ad3e:	2300      	movs	r3, #0
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3710      	adds	r7, #16
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	080164a0 	.word	0x080164a0
 800ad4c:	080164d0 	.word	0x080164d0
 800ad50:	080164f4 	.word	0x080164f4

0800ad54 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ad5e:	79fb      	ldrb	r3, [r7, #7]
 800ad60:	2b0c      	cmp	r3, #12
 800ad62:	d908      	bls.n	800ad76 <memp_malloc+0x22>
 800ad64:	4b0a      	ldr	r3, [pc, #40]	; (800ad90 <memp_malloc+0x3c>)
 800ad66:	f240 1257 	movw	r2, #343	; 0x157
 800ad6a:	490a      	ldr	r1, [pc, #40]	; (800ad94 <memp_malloc+0x40>)
 800ad6c:	480a      	ldr	r0, [pc, #40]	; (800ad98 <memp_malloc+0x44>)
 800ad6e:	f00a f929 	bl	8014fc4 <iprintf>
 800ad72:	2300      	movs	r3, #0
 800ad74:	e008      	b.n	800ad88 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ad76:	79fb      	ldrb	r3, [r7, #7]
 800ad78:	4a08      	ldr	r2, [pc, #32]	; (800ad9c <memp_malloc+0x48>)
 800ad7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7ff ffb6 	bl	800acf0 <do_memp_malloc_pool>
 800ad84:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ad86:	68fb      	ldr	r3, [r7, #12]
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	080164a0 	.word	0x080164a0
 800ad94:	08016530 	.word	0x08016530
 800ad98:	080164f4 	.word	0x080164f4
 800ad9c:	080297c4 	.word	0x080297c4

0800ada0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b084      	sub	sp, #16
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	f003 0303 	and.w	r3, r3, #3
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d006      	beq.n	800adc2 <do_memp_free_pool+0x22>
 800adb4:	4b0d      	ldr	r3, [pc, #52]	; (800adec <do_memp_free_pool+0x4c>)
 800adb6:	f240 126d 	movw	r2, #365	; 0x16d
 800adba:	490d      	ldr	r1, [pc, #52]	; (800adf0 <do_memp_free_pool+0x50>)
 800adbc:	480d      	ldr	r0, [pc, #52]	; (800adf4 <do_memp_free_pool+0x54>)
 800adbe:	f00a f901 	bl	8014fc4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800adc6:	f00a f899 	bl	8014efc <sys_arch_protect>
 800adca:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800adde:	68b8      	ldr	r0, [r7, #8]
 800ade0:	f00a f89a 	bl	8014f18 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ade4:	bf00      	nop
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	080164a0 	.word	0x080164a0
 800adf0:	08016550 	.word	0x08016550
 800adf4:	080164f4 	.word	0x080164f4

0800adf8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	4603      	mov	r3, r0
 800ae00:	6039      	str	r1, [r7, #0]
 800ae02:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ae04:	79fb      	ldrb	r3, [r7, #7]
 800ae06:	2b0c      	cmp	r3, #12
 800ae08:	d907      	bls.n	800ae1a <memp_free+0x22>
 800ae0a:	4b0c      	ldr	r3, [pc, #48]	; (800ae3c <memp_free+0x44>)
 800ae0c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ae10:	490b      	ldr	r1, [pc, #44]	; (800ae40 <memp_free+0x48>)
 800ae12:	480c      	ldr	r0, [pc, #48]	; (800ae44 <memp_free+0x4c>)
 800ae14:	f00a f8d6 	bl	8014fc4 <iprintf>
 800ae18:	e00c      	b.n	800ae34 <memp_free+0x3c>

  if (mem == NULL) {
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d008      	beq.n	800ae32 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ae20:	79fb      	ldrb	r3, [r7, #7]
 800ae22:	4a09      	ldr	r2, [pc, #36]	; (800ae48 <memp_free+0x50>)
 800ae24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae28:	6839      	ldr	r1, [r7, #0]
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7ff ffb8 	bl	800ada0 <do_memp_free_pool>
 800ae30:	e000      	b.n	800ae34 <memp_free+0x3c>
    return;
 800ae32:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	080164a0 	.word	0x080164a0
 800ae40:	08016570 	.word	0x08016570
 800ae44:	080164f4 	.word	0x080164f4
 800ae48:	080297c4 	.word	0x080297c4

0800ae4c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ae50:	bf00      	nop
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
	...

0800ae5c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b086      	sub	sp, #24
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
 800ae68:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d108      	bne.n	800ae82 <netif_add+0x26>
 800ae70:	4b57      	ldr	r3, [pc, #348]	; (800afd0 <netif_add+0x174>)
 800ae72:	f240 1227 	movw	r2, #295	; 0x127
 800ae76:	4957      	ldr	r1, [pc, #348]	; (800afd4 <netif_add+0x178>)
 800ae78:	4857      	ldr	r0, [pc, #348]	; (800afd8 <netif_add+0x17c>)
 800ae7a:	f00a f8a3 	bl	8014fc4 <iprintf>
 800ae7e:	2300      	movs	r3, #0
 800ae80:	e0a2      	b.n	800afc8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ae82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d108      	bne.n	800ae9a <netif_add+0x3e>
 800ae88:	4b51      	ldr	r3, [pc, #324]	; (800afd0 <netif_add+0x174>)
 800ae8a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ae8e:	4953      	ldr	r1, [pc, #332]	; (800afdc <netif_add+0x180>)
 800ae90:	4851      	ldr	r0, [pc, #324]	; (800afd8 <netif_add+0x17c>)
 800ae92:	f00a f897 	bl	8014fc4 <iprintf>
 800ae96:	2300      	movs	r3, #0
 800ae98:	e096      	b.n	800afc8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d101      	bne.n	800aea4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800aea0:	4b4f      	ldr	r3, [pc, #316]	; (800afe0 <netif_add+0x184>)
 800aea2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d101      	bne.n	800aeae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800aeaa:	4b4d      	ldr	r3, [pc, #308]	; (800afe0 <netif_add+0x184>)
 800aeac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d101      	bne.n	800aeb8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800aeb4:	4b4a      	ldr	r3, [pc, #296]	; (800afe0 <netif_add+0x184>)
 800aeb6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2200      	movs	r2, #0
 800aec8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	4a45      	ldr	r2, [pc, #276]	; (800afe4 <netif_add+0x188>)
 800aece:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2200      	movs	r2, #0
 800aee2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6a3a      	ldr	r2, [r7, #32]
 800aee8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800aeea:	4b3f      	ldr	r3, [pc, #252]	; (800afe8 <netif_add+0x18c>)
 800aeec:	781a      	ldrb	r2, [r3, #0]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aef8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	68b9      	ldr	r1, [r7, #8]
 800af00:	68f8      	ldr	r0, [r7, #12]
 800af02:	f000 f913 	bl	800b12c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800af06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	4798      	blx	r3
 800af0c:	4603      	mov	r3, r0
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d001      	beq.n	800af16 <netif_add+0xba>
    return NULL;
 800af12:	2300      	movs	r3, #0
 800af14:	e058      	b.n	800afc8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af1c:	2bff      	cmp	r3, #255	; 0xff
 800af1e:	d103      	bne.n	800af28 <netif_add+0xcc>
        netif->num = 0;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800af28:	2300      	movs	r3, #0
 800af2a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800af2c:	4b2f      	ldr	r3, [pc, #188]	; (800afec <netif_add+0x190>)
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	617b      	str	r3, [r7, #20]
 800af32:	e02b      	b.n	800af8c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800af34:	697a      	ldr	r2, [r7, #20]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d106      	bne.n	800af4a <netif_add+0xee>
 800af3c:	4b24      	ldr	r3, [pc, #144]	; (800afd0 <netif_add+0x174>)
 800af3e:	f240 128b 	movw	r2, #395	; 0x18b
 800af42:	492b      	ldr	r1, [pc, #172]	; (800aff0 <netif_add+0x194>)
 800af44:	4824      	ldr	r0, [pc, #144]	; (800afd8 <netif_add+0x17c>)
 800af46:	f00a f83d 	bl	8014fc4 <iprintf>
        num_netifs++;
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	3301      	adds	r3, #1
 800af4e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	2bff      	cmp	r3, #255	; 0xff
 800af54:	dd06      	ble.n	800af64 <netif_add+0x108>
 800af56:	4b1e      	ldr	r3, [pc, #120]	; (800afd0 <netif_add+0x174>)
 800af58:	f240 128d 	movw	r2, #397	; 0x18d
 800af5c:	4925      	ldr	r1, [pc, #148]	; (800aff4 <netif_add+0x198>)
 800af5e:	481e      	ldr	r0, [pc, #120]	; (800afd8 <netif_add+0x17c>)
 800af60:	f00a f830 	bl	8014fc4 <iprintf>
        if (netif2->num == netif->num) {
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af70:	429a      	cmp	r2, r3
 800af72:	d108      	bne.n	800af86 <netif_add+0x12a>
          netif->num++;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af7a:	3301      	adds	r3, #1
 800af7c:	b2da      	uxtb	r2, r3
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800af84:	e005      	b.n	800af92 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	617b      	str	r3, [r7, #20]
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1d0      	bne.n	800af34 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1be      	bne.n	800af16 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af9e:	2bfe      	cmp	r3, #254	; 0xfe
 800afa0:	d103      	bne.n	800afaa <netif_add+0x14e>
    netif_num = 0;
 800afa2:	4b11      	ldr	r3, [pc, #68]	; (800afe8 <netif_add+0x18c>)
 800afa4:	2200      	movs	r2, #0
 800afa6:	701a      	strb	r2, [r3, #0]
 800afa8:	e006      	b.n	800afb8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800afb0:	3301      	adds	r3, #1
 800afb2:	b2da      	uxtb	r2, r3
 800afb4:	4b0c      	ldr	r3, [pc, #48]	; (800afe8 <netif_add+0x18c>)
 800afb6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800afb8:	4b0c      	ldr	r3, [pc, #48]	; (800afec <netif_add+0x190>)
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800afc0:	4a0a      	ldr	r2, [pc, #40]	; (800afec <netif_add+0x190>)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800afc6:	68fb      	ldr	r3, [r7, #12]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3718      	adds	r7, #24
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}
 800afd0:	0801658c 	.word	0x0801658c
 800afd4:	08016620 	.word	0x08016620
 800afd8:	080165dc 	.word	0x080165dc
 800afdc:	0801663c 	.word	0x0801663c
 800afe0:	08029838 	.word	0x08029838
 800afe4:	0800b407 	.word	0x0800b407
 800afe8:	200044e0 	.word	0x200044e0
 800afec:	2000b42c 	.word	0x2000b42c
 800aff0:	08016660 	.word	0x08016660
 800aff4:	08016674 	.word	0x08016674

0800aff8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
 800b000:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b002:	6839      	ldr	r1, [r7, #0]
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f002 fe1b 	bl	800dc40 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b00a:	6839      	ldr	r1, [r7, #0]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f007 fb93 	bl	8012738 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b012:	bf00      	nop
 800b014:	3708      	adds	r7, #8
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}
	...

0800b01c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b086      	sub	sp, #24
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d106      	bne.n	800b03c <netif_do_set_ipaddr+0x20>
 800b02e:	4b1d      	ldr	r3, [pc, #116]	; (800b0a4 <netif_do_set_ipaddr+0x88>)
 800b030:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b034:	491c      	ldr	r1, [pc, #112]	; (800b0a8 <netif_do_set_ipaddr+0x8c>)
 800b036:	481d      	ldr	r0, [pc, #116]	; (800b0ac <netif_do_set_ipaddr+0x90>)
 800b038:	f009 ffc4 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d106      	bne.n	800b050 <netif_do_set_ipaddr+0x34>
 800b042:	4b18      	ldr	r3, [pc, #96]	; (800b0a4 <netif_do_set_ipaddr+0x88>)
 800b044:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b048:	4917      	ldr	r1, [pc, #92]	; (800b0a8 <netif_do_set_ipaddr+0x8c>)
 800b04a:	4818      	ldr	r0, [pc, #96]	; (800b0ac <netif_do_set_ipaddr+0x90>)
 800b04c:	f009 ffba 	bl	8014fc4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	3304      	adds	r3, #4
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d01c      	beq.n	800b098 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	3304      	adds	r3, #4
 800b068:	681a      	ldr	r2, [r3, #0]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b06e:	f107 0314 	add.w	r3, r7, #20
 800b072:	4619      	mov	r1, r3
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f7ff ffbf 	bl	800aff8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <netif_do_set_ipaddr+0x6a>
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	e000      	b.n	800b088 <netif_do_set_ipaddr+0x6c>
 800b086:	2300      	movs	r3, #0
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b08c:	2101      	movs	r1, #1
 800b08e:	68f8      	ldr	r0, [r7, #12]
 800b090:	f000 f8d2 	bl	800b238 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b094:	2301      	movs	r3, #1
 800b096:	e000      	b.n	800b09a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b098:	2300      	movs	r3, #0
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3718      	adds	r7, #24
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	bd80      	pop	{r7, pc}
 800b0a2:	bf00      	nop
 800b0a4:	0801658c 	.word	0x0801658c
 800b0a8:	080166a4 	.word	0x080166a4
 800b0ac:	080165dc 	.word	0x080165dc

0800b0b0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	60f8      	str	r0, [r7, #12]
 800b0b8:	60b9      	str	r1, [r7, #8]
 800b0ba:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	3308      	adds	r3, #8
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	429a      	cmp	r2, r3
 800b0c8:	d00a      	beq.n	800b0e0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d002      	beq.n	800b0d6 <netif_do_set_netmask+0x26>
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	e000      	b.n	800b0d8 <netif_do_set_netmask+0x28>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b0dc:	2301      	movs	r3, #1
 800b0de:	e000      	b.n	800b0e2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3714      	adds	r7, #20
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr

0800b0ee <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b0ee:	b480      	push	{r7}
 800b0f0:	b085      	sub	sp, #20
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	60f8      	str	r0, [r7, #12]
 800b0f6:	60b9      	str	r1, [r7, #8]
 800b0f8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	330c      	adds	r3, #12
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	429a      	cmp	r2, r3
 800b106:	d00a      	beq.n	800b11e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d002      	beq.n	800b114 <netif_do_set_gw+0x26>
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	e000      	b.n	800b116 <netif_do_set_gw+0x28>
 800b114:	2300      	movs	r3, #0
 800b116:	68fa      	ldr	r2, [r7, #12]
 800b118:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b11a:	2301      	movs	r3, #1
 800b11c:	e000      	b.n	800b120 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3714      	adds	r7, #20
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b088      	sub	sp, #32
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
 800b138:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b13e:	2300      	movs	r3, #0
 800b140:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d101      	bne.n	800b14c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b148:	4b1c      	ldr	r3, [pc, #112]	; (800b1bc <netif_set_addr+0x90>)
 800b14a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d101      	bne.n	800b156 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b152:	4b1a      	ldr	r3, [pc, #104]	; (800b1bc <netif_set_addr+0x90>)
 800b154:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d101      	bne.n	800b160 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b15c:	4b17      	ldr	r3, [pc, #92]	; (800b1bc <netif_set_addr+0x90>)
 800b15e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d003      	beq.n	800b16e <netif_set_addr+0x42>
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d101      	bne.n	800b172 <netif_set_addr+0x46>
 800b16e:	2301      	movs	r3, #1
 800b170:	e000      	b.n	800b174 <netif_set_addr+0x48>
 800b172:	2300      	movs	r3, #0
 800b174:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d006      	beq.n	800b18a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b17c:	f107 0310 	add.w	r3, r7, #16
 800b180:	461a      	mov	r2, r3
 800b182:	68b9      	ldr	r1, [r7, #8]
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f7ff ff49 	bl	800b01c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b18a:	69fa      	ldr	r2, [r7, #28]
 800b18c:	6879      	ldr	r1, [r7, #4]
 800b18e:	68f8      	ldr	r0, [r7, #12]
 800b190:	f7ff ff8e 	bl	800b0b0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b194:	69ba      	ldr	r2, [r7, #24]
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f7ff ffa8 	bl	800b0ee <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d106      	bne.n	800b1b2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b1a4:	f107 0310 	add.w	r3, r7, #16
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	68b9      	ldr	r1, [r7, #8]
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f7ff ff35 	bl	800b01c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b1b2:	bf00      	nop
 800b1b4:	3720      	adds	r7, #32
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	08029838 	.word	0x08029838

0800b1c0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b083      	sub	sp, #12
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b1c8:	4a04      	ldr	r2, [pc, #16]	; (800b1dc <netif_set_default+0x1c>)
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b1ce:	bf00      	nop
 800b1d0:	370c      	adds	r7, #12
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop
 800b1dc:	2000b430 	.word	0x2000b430

0800b1e0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b082      	sub	sp, #8
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d107      	bne.n	800b1fe <netif_set_up+0x1e>
 800b1ee:	4b0f      	ldr	r3, [pc, #60]	; (800b22c <netif_set_up+0x4c>)
 800b1f0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b1f4:	490e      	ldr	r1, [pc, #56]	; (800b230 <netif_set_up+0x50>)
 800b1f6:	480f      	ldr	r0, [pc, #60]	; (800b234 <netif_set_up+0x54>)
 800b1f8:	f009 fee4 	bl	8014fc4 <iprintf>
 800b1fc:	e013      	b.n	800b226 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b204:	f003 0301 	and.w	r3, r3, #1
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d10c      	bne.n	800b226 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b212:	f043 0301 	orr.w	r3, r3, #1
 800b216:	b2da      	uxtb	r2, r3
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b21e:	2103      	movs	r1, #3
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 f809 	bl	800b238 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b226:	3708      	adds	r7, #8
 800b228:	46bd      	mov	sp, r7
 800b22a:	bd80      	pop	{r7, pc}
 800b22c:	0801658c 	.word	0x0801658c
 800b230:	08016714 	.word	0x08016714
 800b234:	080165dc 	.word	0x080165dc

0800b238 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	460b      	mov	r3, r1
 800b242:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d106      	bne.n	800b258 <netif_issue_reports+0x20>
 800b24a:	4b18      	ldr	r3, [pc, #96]	; (800b2ac <netif_issue_reports+0x74>)
 800b24c:	f240 326d 	movw	r2, #877	; 0x36d
 800b250:	4917      	ldr	r1, [pc, #92]	; (800b2b0 <netif_issue_reports+0x78>)
 800b252:	4818      	ldr	r0, [pc, #96]	; (800b2b4 <netif_issue_reports+0x7c>)
 800b254:	f009 feb6 	bl	8014fc4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b25e:	f003 0304 	and.w	r3, r3, #4
 800b262:	2b00      	cmp	r3, #0
 800b264:	d01e      	beq.n	800b2a4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b26c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b270:	2b00      	cmp	r3, #0
 800b272:	d017      	beq.n	800b2a4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b274:	78fb      	ldrb	r3, [r7, #3]
 800b276:	f003 0301 	and.w	r3, r3, #1
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d013      	beq.n	800b2a6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	3304      	adds	r3, #4
 800b282:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b284:	2b00      	cmp	r3, #0
 800b286:	d00e      	beq.n	800b2a6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b28e:	f003 0308 	and.w	r3, r3, #8
 800b292:	2b00      	cmp	r3, #0
 800b294:	d007      	beq.n	800b2a6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	3304      	adds	r3, #4
 800b29a:	4619      	mov	r1, r3
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f008 f9b5 	bl	801360c <etharp_request>
 800b2a2:	e000      	b.n	800b2a6 <netif_issue_reports+0x6e>
    return;
 800b2a4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b2a6:	3708      	adds	r7, #8
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}
 800b2ac:	0801658c 	.word	0x0801658c
 800b2b0:	08016730 	.word	0x08016730
 800b2b4:	080165dc 	.word	0x080165dc

0800b2b8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d107      	bne.n	800b2d6 <netif_set_down+0x1e>
 800b2c6:	4b12      	ldr	r3, [pc, #72]	; (800b310 <netif_set_down+0x58>)
 800b2c8:	f240 329b 	movw	r2, #923	; 0x39b
 800b2cc:	4911      	ldr	r1, [pc, #68]	; (800b314 <netif_set_down+0x5c>)
 800b2ce:	4812      	ldr	r0, [pc, #72]	; (800b318 <netif_set_down+0x60>)
 800b2d0:	f009 fe78 	bl	8014fc4 <iprintf>
 800b2d4:	e019      	b.n	800b30a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2dc:	f003 0301 	and.w	r3, r3, #1
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d012      	beq.n	800b30a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2ea:	f023 0301 	bic.w	r3, r3, #1
 800b2ee:	b2da      	uxtb	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2fc:	f003 0308 	and.w	r3, r3, #8
 800b300:	2b00      	cmp	r3, #0
 800b302:	d002      	beq.n	800b30a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f007 fd3f 	bl	8012d88 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	0801658c 	.word	0x0801658c
 800b314:	08016754 	.word	0x08016754
 800b318:	080165dc 	.word	0x080165dc

0800b31c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d107      	bne.n	800b33a <netif_set_link_up+0x1e>
 800b32a:	4b13      	ldr	r3, [pc, #76]	; (800b378 <netif_set_link_up+0x5c>)
 800b32c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b330:	4912      	ldr	r1, [pc, #72]	; (800b37c <netif_set_link_up+0x60>)
 800b332:	4813      	ldr	r0, [pc, #76]	; (800b380 <netif_set_link_up+0x64>)
 800b334:	f009 fe46 	bl	8014fc4 <iprintf>
 800b338:	e01b      	b.n	800b372 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b340:	f003 0304 	and.w	r3, r3, #4
 800b344:	2b00      	cmp	r3, #0
 800b346:	d114      	bne.n	800b372 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b34e:	f043 0304 	orr.w	r3, r3, #4
 800b352:	b2da      	uxtb	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b35a:	2103      	movs	r1, #3
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7ff ff6b 	bl	800b238 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	69db      	ldr	r3, [r3, #28]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d003      	beq.n	800b372 <netif_set_link_up+0x56>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	69db      	ldr	r3, [r3, #28]
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b372:	3708      	adds	r7, #8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}
 800b378:	0801658c 	.word	0x0801658c
 800b37c:	08016774 	.word	0x08016774
 800b380:	080165dc 	.word	0x080165dc

0800b384 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d107      	bne.n	800b3a2 <netif_set_link_down+0x1e>
 800b392:	4b11      	ldr	r3, [pc, #68]	; (800b3d8 <netif_set_link_down+0x54>)
 800b394:	f240 4206 	movw	r2, #1030	; 0x406
 800b398:	4910      	ldr	r1, [pc, #64]	; (800b3dc <netif_set_link_down+0x58>)
 800b39a:	4811      	ldr	r0, [pc, #68]	; (800b3e0 <netif_set_link_down+0x5c>)
 800b39c:	f009 fe12 	bl	8014fc4 <iprintf>
 800b3a0:	e017      	b.n	800b3d2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b3a8:	f003 0304 	and.w	r3, r3, #4
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d010      	beq.n	800b3d2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b3b6:	f023 0304 	bic.w	r3, r3, #4
 800b3ba:	b2da      	uxtb	r2, r3
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	69db      	ldr	r3, [r3, #28]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d003      	beq.n	800b3d2 <netif_set_link_down+0x4e>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	69db      	ldr	r3, [r3, #28]
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b3d2:	3708      	adds	r7, #8
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	0801658c 	.word	0x0801658c
 800b3dc:	08016798 	.word	0x08016798
 800b3e0:	080165dc 	.word	0x080165dc

0800b3e4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d002      	beq.n	800b3fa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	683a      	ldr	r2, [r7, #0]
 800b3f8:	61da      	str	r2, [r3, #28]
  }
}
 800b3fa:	bf00      	nop
 800b3fc:	370c      	adds	r7, #12
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr

0800b406 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b406:	b480      	push	{r7}
 800b408:	b085      	sub	sp, #20
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	60f8      	str	r0, [r7, #12]
 800b40e:	60b9      	str	r1, [r7, #8]
 800b410:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b412:	f06f 030b 	mvn.w	r3, #11
}
 800b416:	4618      	mov	r0, r3
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
	...

0800b424 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	4603      	mov	r3, r0
 800b42c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b42e:	79fb      	ldrb	r3, [r7, #7]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d013      	beq.n	800b45c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b434:	4b0d      	ldr	r3, [pc, #52]	; (800b46c <netif_get_by_index+0x48>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	60fb      	str	r3, [r7, #12]
 800b43a:	e00c      	b.n	800b456 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b442:	3301      	adds	r3, #1
 800b444:	b2db      	uxtb	r3, r3
 800b446:	79fa      	ldrb	r2, [r7, #7]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d101      	bne.n	800b450 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	e006      	b.n	800b45e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	60fb      	str	r3, [r7, #12]
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d1ef      	bne.n	800b43c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3714      	adds	r7, #20
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop
 800b46c:	2000b42c 	.word	0x2000b42c

0800b470 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b082      	sub	sp, #8
 800b474:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b476:	f009 fd41 	bl	8014efc <sys_arch_protect>
 800b47a:	6038      	str	r0, [r7, #0]
 800b47c:	4b0d      	ldr	r3, [pc, #52]	; (800b4b4 <pbuf_free_ooseq+0x44>)
 800b47e:	2200      	movs	r2, #0
 800b480:	701a      	strb	r2, [r3, #0]
 800b482:	6838      	ldr	r0, [r7, #0]
 800b484:	f009 fd48 	bl	8014f18 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b488:	4b0b      	ldr	r3, [pc, #44]	; (800b4b8 <pbuf_free_ooseq+0x48>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	607b      	str	r3, [r7, #4]
 800b48e:	e00a      	b.n	800b4a6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b494:	2b00      	cmp	r3, #0
 800b496:	d003      	beq.n	800b4a0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f002 fc0f 	bl	800dcbc <tcp_free_ooseq>
      return;
 800b49e:	e005      	b.n	800b4ac <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	607b      	str	r3, [r7, #4]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1f1      	bne.n	800b490 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b4ac:	3708      	adds	r7, #8
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	2000b434 	.word	0x2000b434
 800b4b8:	2000b43c 	.word	0x2000b43c

0800b4bc <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b4c4:	f7ff ffd4 	bl	800b470 <pbuf_free_ooseq>
}
 800b4c8:	bf00      	nop
 800b4ca:	3708      	adds	r7, #8
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}

0800b4d0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b082      	sub	sp, #8
 800b4d4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b4d6:	f009 fd11 	bl	8014efc <sys_arch_protect>
 800b4da:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b4dc:	4b0f      	ldr	r3, [pc, #60]	; (800b51c <pbuf_pool_is_empty+0x4c>)
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b4e2:	4b0e      	ldr	r3, [pc, #56]	; (800b51c <pbuf_pool_is_empty+0x4c>)
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f009 fd15 	bl	8014f18 <sys_arch_unprotect>

  if (!queued) {
 800b4ee:	78fb      	ldrb	r3, [r7, #3]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10f      	bne.n	800b514 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	480a      	ldr	r0, [pc, #40]	; (800b520 <pbuf_pool_is_empty+0x50>)
 800b4f8:	f7fe f89c 	bl	8009634 <tcpip_try_callback>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d008      	beq.n	800b514 <pbuf_pool_is_empty+0x44>
 800b502:	f009 fcfb 	bl	8014efc <sys_arch_protect>
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	4b04      	ldr	r3, [pc, #16]	; (800b51c <pbuf_pool_is_empty+0x4c>)
 800b50a:	2200      	movs	r2, #0
 800b50c:	701a      	strb	r2, [r3, #0]
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f009 fd02 	bl	8014f18 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b514:	bf00      	nop
 800b516:	3708      	adds	r7, #8
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	2000b434 	.word	0x2000b434
 800b520:	0800b4bd 	.word	0x0800b4bd

0800b524 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	60f8      	str	r0, [r7, #12]
 800b52c:	60b9      	str	r1, [r7, #8]
 800b52e:	4611      	mov	r1, r2
 800b530:	461a      	mov	r2, r3
 800b532:	460b      	mov	r3, r1
 800b534:	80fb      	strh	r3, [r7, #6]
 800b536:	4613      	mov	r3, r2
 800b538:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2200      	movs	r2, #0
 800b53e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	68ba      	ldr	r2, [r7, #8]
 800b544:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	88fa      	ldrh	r2, [r7, #6]
 800b54a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	88ba      	ldrh	r2, [r7, #4]
 800b550:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b552:	8b3b      	ldrh	r3, [r7, #24]
 800b554:	b2da      	uxtb	r2, r3
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	7f3a      	ldrb	r2, [r7, #28]
 800b55e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2201      	movs	r2, #1
 800b564:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2200      	movs	r2, #0
 800b56a:	73da      	strb	r2, [r3, #15]
}
 800b56c:	bf00      	nop
 800b56e:	3714      	adds	r7, #20
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b08c      	sub	sp, #48	; 0x30
 800b57c:	af02      	add	r7, sp, #8
 800b57e:	4603      	mov	r3, r0
 800b580:	71fb      	strb	r3, [r7, #7]
 800b582:	460b      	mov	r3, r1
 800b584:	80bb      	strh	r3, [r7, #4]
 800b586:	4613      	mov	r3, r2
 800b588:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b58a:	79fb      	ldrb	r3, [r7, #7]
 800b58c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b58e:	887b      	ldrh	r3, [r7, #2]
 800b590:	2b41      	cmp	r3, #65	; 0x41
 800b592:	d00b      	beq.n	800b5ac <pbuf_alloc+0x34>
 800b594:	2b41      	cmp	r3, #65	; 0x41
 800b596:	dc02      	bgt.n	800b59e <pbuf_alloc+0x26>
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d007      	beq.n	800b5ac <pbuf_alloc+0x34>
 800b59c:	e0c2      	b.n	800b724 <pbuf_alloc+0x1ac>
 800b59e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b5a2:	d00b      	beq.n	800b5bc <pbuf_alloc+0x44>
 800b5a4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b5a8:	d070      	beq.n	800b68c <pbuf_alloc+0x114>
 800b5aa:	e0bb      	b.n	800b724 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b5ac:	887a      	ldrh	r2, [r7, #2]
 800b5ae:	88bb      	ldrh	r3, [r7, #4]
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	f000 f8d2 	bl	800b75c <pbuf_alloc_reference>
 800b5b8:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b5ba:	e0bd      	b.n	800b738 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b5c4:	88bb      	ldrh	r3, [r7, #4]
 800b5c6:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b5c8:	200c      	movs	r0, #12
 800b5ca:	f7ff fbc3 	bl	800ad54 <memp_malloc>
 800b5ce:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d109      	bne.n	800b5ea <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800b5d6:	f7ff ff7b 	bl	800b4d0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d002      	beq.n	800b5e6 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800b5e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5e2:	f000 faa9 	bl	800bb38 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	e0a7      	b.n	800b73a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b5ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5ec:	3303      	adds	r3, #3
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	f023 0303 	bic.w	r3, r3, #3
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	8b7a      	ldrh	r2, [r7, #26]
 800b5fe:	4293      	cmp	r3, r2
 800b600:	bf28      	it	cs
 800b602:	4613      	movcs	r3, r2
 800b604:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b606:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b608:	3310      	adds	r3, #16
 800b60a:	693a      	ldr	r2, [r7, #16]
 800b60c:	4413      	add	r3, r2
 800b60e:	3303      	adds	r3, #3
 800b610:	f023 0303 	bic.w	r3, r3, #3
 800b614:	4618      	mov	r0, r3
 800b616:	89f9      	ldrh	r1, [r7, #14]
 800b618:	8b7a      	ldrh	r2, [r7, #26]
 800b61a:	2300      	movs	r3, #0
 800b61c:	9301      	str	r3, [sp, #4]
 800b61e:	887b      	ldrh	r3, [r7, #2]
 800b620:	9300      	str	r3, [sp, #0]
 800b622:	460b      	mov	r3, r1
 800b624:	4601      	mov	r1, r0
 800b626:	6938      	ldr	r0, [r7, #16]
 800b628:	f7ff ff7c 	bl	800b524 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	f003 0303 	and.w	r3, r3, #3
 800b634:	2b00      	cmp	r3, #0
 800b636:	d006      	beq.n	800b646 <pbuf_alloc+0xce>
 800b638:	4b42      	ldr	r3, [pc, #264]	; (800b744 <pbuf_alloc+0x1cc>)
 800b63a:	f240 1201 	movw	r2, #257	; 0x101
 800b63e:	4942      	ldr	r1, [pc, #264]	; (800b748 <pbuf_alloc+0x1d0>)
 800b640:	4842      	ldr	r0, [pc, #264]	; (800b74c <pbuf_alloc+0x1d4>)
 800b642:	f009 fcbf 	bl	8014fc4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b646:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b648:	3303      	adds	r3, #3
 800b64a:	f023 0303 	bic.w	r3, r3, #3
 800b64e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b652:	d106      	bne.n	800b662 <pbuf_alloc+0xea>
 800b654:	4b3b      	ldr	r3, [pc, #236]	; (800b744 <pbuf_alloc+0x1cc>)
 800b656:	f240 1203 	movw	r2, #259	; 0x103
 800b65a:	493d      	ldr	r1, [pc, #244]	; (800b750 <pbuf_alloc+0x1d8>)
 800b65c:	483b      	ldr	r0, [pc, #236]	; (800b74c <pbuf_alloc+0x1d4>)
 800b65e:	f009 fcb1 	bl	8014fc4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b664:	2b00      	cmp	r3, #0
 800b666:	d102      	bne.n	800b66e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	627b      	str	r3, [r7, #36]	; 0x24
 800b66c:	e002      	b.n	800b674 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	693a      	ldr	r2, [r7, #16]
 800b672:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b678:	8b7a      	ldrh	r2, [r7, #26]
 800b67a:	89fb      	ldrh	r3, [r7, #14]
 800b67c:	1ad3      	subs	r3, r2, r3
 800b67e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b680:	2300      	movs	r3, #0
 800b682:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b684:	8b7b      	ldrh	r3, [r7, #26]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d19e      	bne.n	800b5c8 <pbuf_alloc+0x50>
      break;
 800b68a:	e055      	b.n	800b738 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b68c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b68e:	3303      	adds	r3, #3
 800b690:	b29b      	uxth	r3, r3
 800b692:	f023 0303 	bic.w	r3, r3, #3
 800b696:	b29a      	uxth	r2, r3
 800b698:	88bb      	ldrh	r3, [r7, #4]
 800b69a:	3303      	adds	r3, #3
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	f023 0303 	bic.w	r3, r3, #3
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	4413      	add	r3, r2
 800b6a6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b6a8:	8b3b      	ldrh	r3, [r7, #24]
 800b6aa:	3310      	adds	r3, #16
 800b6ac:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b6ae:	8b3a      	ldrh	r2, [r7, #24]
 800b6b0:	88bb      	ldrh	r3, [r7, #4]
 800b6b2:	3303      	adds	r3, #3
 800b6b4:	f023 0303 	bic.w	r3, r3, #3
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d306      	bcc.n	800b6ca <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b6bc:	8afa      	ldrh	r2, [r7, #22]
 800b6be:	88bb      	ldrh	r3, [r7, #4]
 800b6c0:	3303      	adds	r3, #3
 800b6c2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d201      	bcs.n	800b6ce <pbuf_alloc+0x156>
        return NULL;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	e035      	b.n	800b73a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b6ce:	8afb      	ldrh	r3, [r7, #22]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7ff f9bd 	bl	800aa50 <mem_malloc>
 800b6d6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d101      	bne.n	800b6e2 <pbuf_alloc+0x16a>
        return NULL;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	e02b      	b.n	800b73a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b6e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6e4:	3310      	adds	r3, #16
 800b6e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6e8:	4413      	add	r3, r2
 800b6ea:	3303      	adds	r3, #3
 800b6ec:	f023 0303 	bic.w	r3, r3, #3
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	88b9      	ldrh	r1, [r7, #4]
 800b6f4:	88ba      	ldrh	r2, [r7, #4]
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	9301      	str	r3, [sp, #4]
 800b6fa:	887b      	ldrh	r3, [r7, #2]
 800b6fc:	9300      	str	r3, [sp, #0]
 800b6fe:	460b      	mov	r3, r1
 800b700:	4601      	mov	r1, r0
 800b702:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b704:	f7ff ff0e 	bl	800b524 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70a:	685b      	ldr	r3, [r3, #4]
 800b70c:	f003 0303 	and.w	r3, r3, #3
 800b710:	2b00      	cmp	r3, #0
 800b712:	d010      	beq.n	800b736 <pbuf_alloc+0x1be>
 800b714:	4b0b      	ldr	r3, [pc, #44]	; (800b744 <pbuf_alloc+0x1cc>)
 800b716:	f240 1223 	movw	r2, #291	; 0x123
 800b71a:	490e      	ldr	r1, [pc, #56]	; (800b754 <pbuf_alloc+0x1dc>)
 800b71c:	480b      	ldr	r0, [pc, #44]	; (800b74c <pbuf_alloc+0x1d4>)
 800b71e:	f009 fc51 	bl	8014fc4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b722:	e008      	b.n	800b736 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b724:	4b07      	ldr	r3, [pc, #28]	; (800b744 <pbuf_alloc+0x1cc>)
 800b726:	f240 1227 	movw	r2, #295	; 0x127
 800b72a:	490b      	ldr	r1, [pc, #44]	; (800b758 <pbuf_alloc+0x1e0>)
 800b72c:	4807      	ldr	r0, [pc, #28]	; (800b74c <pbuf_alloc+0x1d4>)
 800b72e:	f009 fc49 	bl	8014fc4 <iprintf>
      return NULL;
 800b732:	2300      	movs	r3, #0
 800b734:	e001      	b.n	800b73a <pbuf_alloc+0x1c2>
      break;
 800b736:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3728      	adds	r7, #40	; 0x28
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	080167bc 	.word	0x080167bc
 800b748:	080167ec 	.word	0x080167ec
 800b74c:	0801681c 	.word	0x0801681c
 800b750:	08016844 	.word	0x08016844
 800b754:	08016878 	.word	0x08016878
 800b758:	080168a4 	.word	0x080168a4

0800b75c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b086      	sub	sp, #24
 800b760:	af02      	add	r7, sp, #8
 800b762:	6078      	str	r0, [r7, #4]
 800b764:	460b      	mov	r3, r1
 800b766:	807b      	strh	r3, [r7, #2]
 800b768:	4613      	mov	r3, r2
 800b76a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b76c:	883b      	ldrh	r3, [r7, #0]
 800b76e:	2b41      	cmp	r3, #65	; 0x41
 800b770:	d009      	beq.n	800b786 <pbuf_alloc_reference+0x2a>
 800b772:	883b      	ldrh	r3, [r7, #0]
 800b774:	2b01      	cmp	r3, #1
 800b776:	d006      	beq.n	800b786 <pbuf_alloc_reference+0x2a>
 800b778:	4b0f      	ldr	r3, [pc, #60]	; (800b7b8 <pbuf_alloc_reference+0x5c>)
 800b77a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b77e:	490f      	ldr	r1, [pc, #60]	; (800b7bc <pbuf_alloc_reference+0x60>)
 800b780:	480f      	ldr	r0, [pc, #60]	; (800b7c0 <pbuf_alloc_reference+0x64>)
 800b782:	f009 fc1f 	bl	8014fc4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b786:	200b      	movs	r0, #11
 800b788:	f7ff fae4 	bl	800ad54 <memp_malloc>
 800b78c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b794:	2300      	movs	r3, #0
 800b796:	e00b      	b.n	800b7b0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b798:	8879      	ldrh	r1, [r7, #2]
 800b79a:	887a      	ldrh	r2, [r7, #2]
 800b79c:	2300      	movs	r3, #0
 800b79e:	9301      	str	r3, [sp, #4]
 800b7a0:	883b      	ldrh	r3, [r7, #0]
 800b7a2:	9300      	str	r3, [sp, #0]
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	6879      	ldr	r1, [r7, #4]
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f7ff febb 	bl	800b524 <pbuf_init_alloced_pbuf>
  return p;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	080167bc 	.word	0x080167bc
 800b7bc:	080168c0 	.word	0x080168c0
 800b7c0:	0801681c 	.word	0x0801681c

0800b7c4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b088      	sub	sp, #32
 800b7c8:	af02      	add	r7, sp, #8
 800b7ca:	607b      	str	r3, [r7, #4]
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	73fb      	strb	r3, [r7, #15]
 800b7d0:	460b      	mov	r3, r1
 800b7d2:	81bb      	strh	r3, [r7, #12]
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b7d8:	7bfb      	ldrb	r3, [r7, #15]
 800b7da:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b7dc:	8a7b      	ldrh	r3, [r7, #18]
 800b7de:	3303      	adds	r3, #3
 800b7e0:	f023 0203 	bic.w	r2, r3, #3
 800b7e4:	89bb      	ldrh	r3, [r7, #12]
 800b7e6:	441a      	add	r2, r3
 800b7e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d901      	bls.n	800b7f2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	e018      	b.n	800b824 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b7f2:	6a3b      	ldr	r3, [r7, #32]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d007      	beq.n	800b808 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b7f8:	8a7b      	ldrh	r3, [r7, #18]
 800b7fa:	3303      	adds	r3, #3
 800b7fc:	f023 0303 	bic.w	r3, r3, #3
 800b800:	6a3a      	ldr	r2, [r7, #32]
 800b802:	4413      	add	r3, r2
 800b804:	617b      	str	r3, [r7, #20]
 800b806:	e001      	b.n	800b80c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b808:	2300      	movs	r3, #0
 800b80a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	89b9      	ldrh	r1, [r7, #12]
 800b810:	89ba      	ldrh	r2, [r7, #12]
 800b812:	2302      	movs	r3, #2
 800b814:	9301      	str	r3, [sp, #4]
 800b816:	897b      	ldrh	r3, [r7, #10]
 800b818:	9300      	str	r3, [sp, #0]
 800b81a:	460b      	mov	r3, r1
 800b81c:	6979      	ldr	r1, [r7, #20]
 800b81e:	f7ff fe81 	bl	800b524 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b822:	687b      	ldr	r3, [r7, #4]
}
 800b824:	4618      	mov	r0, r3
 800b826:	3718      	adds	r7, #24
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	460b      	mov	r3, r1
 800b836:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d106      	bne.n	800b84c <pbuf_realloc+0x20>
 800b83e:	4b3a      	ldr	r3, [pc, #232]	; (800b928 <pbuf_realloc+0xfc>)
 800b840:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b844:	4939      	ldr	r1, [pc, #228]	; (800b92c <pbuf_realloc+0x100>)
 800b846:	483a      	ldr	r0, [pc, #232]	; (800b930 <pbuf_realloc+0x104>)
 800b848:	f009 fbbc 	bl	8014fc4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	891b      	ldrh	r3, [r3, #8]
 800b850:	887a      	ldrh	r2, [r7, #2]
 800b852:	429a      	cmp	r2, r3
 800b854:	d264      	bcs.n	800b920 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	891a      	ldrh	r2, [r3, #8]
 800b85a:	887b      	ldrh	r3, [r7, #2]
 800b85c:	1ad3      	subs	r3, r2, r3
 800b85e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b860:	887b      	ldrh	r3, [r7, #2]
 800b862:	817b      	strh	r3, [r7, #10]
  q = p;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b868:	e018      	b.n	800b89c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	895b      	ldrh	r3, [r3, #10]
 800b86e:	897a      	ldrh	r2, [r7, #10]
 800b870:	1ad3      	subs	r3, r2, r3
 800b872:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	891a      	ldrh	r2, [r3, #8]
 800b878:	893b      	ldrh	r3, [r7, #8]
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	b29a      	uxth	r2, r3
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d106      	bne.n	800b89c <pbuf_realloc+0x70>
 800b88e:	4b26      	ldr	r3, [pc, #152]	; (800b928 <pbuf_realloc+0xfc>)
 800b890:	f240 12af 	movw	r2, #431	; 0x1af
 800b894:	4927      	ldr	r1, [pc, #156]	; (800b934 <pbuf_realloc+0x108>)
 800b896:	4826      	ldr	r0, [pc, #152]	; (800b930 <pbuf_realloc+0x104>)
 800b898:	f009 fb94 	bl	8014fc4 <iprintf>
  while (rem_len > q->len) {
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	895b      	ldrh	r3, [r3, #10]
 800b8a0:	897a      	ldrh	r2, [r7, #10]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d8e1      	bhi.n	800b86a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	7b1b      	ldrb	r3, [r3, #12]
 800b8aa:	f003 030f 	and.w	r3, r3, #15
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d122      	bne.n	800b8f8 <pbuf_realloc+0xcc>
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	895b      	ldrh	r3, [r3, #10]
 800b8b6:	897a      	ldrh	r2, [r7, #10]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d01d      	beq.n	800b8f8 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	7b5b      	ldrb	r3, [r3, #13]
 800b8c0:	f003 0302 	and.w	r3, r3, #2
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d117      	bne.n	800b8f8 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	b29a      	uxth	r2, r3
 800b8d4:	897b      	ldrh	r3, [r7, #10]
 800b8d6:	4413      	add	r3, r2
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	4619      	mov	r1, r3
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f7fe ffad 	bl	800a83c <mem_trim>
 800b8e2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d106      	bne.n	800b8f8 <pbuf_realloc+0xcc>
 800b8ea:	4b0f      	ldr	r3, [pc, #60]	; (800b928 <pbuf_realloc+0xfc>)
 800b8ec:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b8f0:	4911      	ldr	r1, [pc, #68]	; (800b938 <pbuf_realloc+0x10c>)
 800b8f2:	480f      	ldr	r0, [pc, #60]	; (800b930 <pbuf_realloc+0x104>)
 800b8f4:	f009 fb66 	bl	8014fc4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	897a      	ldrh	r2, [r7, #10]
 800b8fc:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	895a      	ldrh	r2, [r3, #10]
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d004      	beq.n	800b918 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4618      	mov	r0, r3
 800b914:	f000 f910 	bl	800bb38 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	601a      	str	r2, [r3, #0]
 800b91e:	e000      	b.n	800b922 <pbuf_realloc+0xf6>
    return;
 800b920:	bf00      	nop

}
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	080167bc 	.word	0x080167bc
 800b92c:	080168d4 	.word	0x080168d4
 800b930:	0801681c 	.word	0x0801681c
 800b934:	080168ec 	.word	0x080168ec
 800b938:	08016904 	.word	0x08016904

0800b93c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b086      	sub	sp, #24
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	4613      	mov	r3, r2
 800b948:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d106      	bne.n	800b95e <pbuf_add_header_impl+0x22>
 800b950:	4b2b      	ldr	r3, [pc, #172]	; (800ba00 <pbuf_add_header_impl+0xc4>)
 800b952:	f240 12df 	movw	r2, #479	; 0x1df
 800b956:	492b      	ldr	r1, [pc, #172]	; (800ba04 <pbuf_add_header_impl+0xc8>)
 800b958:	482b      	ldr	r0, [pc, #172]	; (800ba08 <pbuf_add_header_impl+0xcc>)
 800b95a:	f009 fb33 	bl	8014fc4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d003      	beq.n	800b96c <pbuf_add_header_impl+0x30>
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b96a:	d301      	bcc.n	800b970 <pbuf_add_header_impl+0x34>
    return 1;
 800b96c:	2301      	movs	r3, #1
 800b96e:	e043      	b.n	800b9f8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d101      	bne.n	800b97a <pbuf_add_header_impl+0x3e>
    return 0;
 800b976:	2300      	movs	r3, #0
 800b978:	e03e      	b.n	800b9f8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	891a      	ldrh	r2, [r3, #8]
 800b982:	8a7b      	ldrh	r3, [r7, #18]
 800b984:	4413      	add	r3, r2
 800b986:	b29b      	uxth	r3, r3
 800b988:	8a7a      	ldrh	r2, [r7, #18]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d901      	bls.n	800b992 <pbuf_add_header_impl+0x56>
    return 1;
 800b98e:	2301      	movs	r3, #1
 800b990:	e032      	b.n	800b9f8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	7b1b      	ldrb	r3, [r3, #12]
 800b996:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b998:	8a3b      	ldrh	r3, [r7, #16]
 800b99a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00c      	beq.n	800b9bc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	685a      	ldr	r2, [r3, #4]
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	425b      	negs	r3, r3
 800b9aa:	4413      	add	r3, r2
 800b9ac:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	3310      	adds	r3, #16
 800b9b2:	697a      	ldr	r2, [r7, #20]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d20d      	bcs.n	800b9d4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e01d      	b.n	800b9f8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b9bc:	79fb      	ldrb	r3, [r7, #7]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d006      	beq.n	800b9d0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	685a      	ldr	r2, [r3, #4]
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	425b      	negs	r3, r3
 800b9ca:	4413      	add	r3, r2
 800b9cc:	617b      	str	r3, [r7, #20]
 800b9ce:	e001      	b.n	800b9d4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e011      	b.n	800b9f8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	697a      	ldr	r2, [r7, #20]
 800b9d8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	895a      	ldrh	r2, [r3, #10]
 800b9de:	8a7b      	ldrh	r3, [r7, #18]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	891a      	ldrh	r2, [r3, #8]
 800b9ec:	8a7b      	ldrh	r3, [r7, #18]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	811a      	strh	r2, [r3, #8]


  return 0;
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3718      	adds	r7, #24
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	080167bc 	.word	0x080167bc
 800ba04:	08016920 	.word	0x08016920
 800ba08:	0801681c 	.word	0x0801681c

0800ba0c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
 800ba14:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ba16:	2200      	movs	r2, #0
 800ba18:	6839      	ldr	r1, [r7, #0]
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f7ff ff8e 	bl	800b93c <pbuf_add_header_impl>
 800ba20:	4603      	mov	r3, r0
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3708      	adds	r7, #8
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
	...

0800ba2c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d106      	bne.n	800ba4a <pbuf_remove_header+0x1e>
 800ba3c:	4b20      	ldr	r3, [pc, #128]	; (800bac0 <pbuf_remove_header+0x94>)
 800ba3e:	f240 224b 	movw	r2, #587	; 0x24b
 800ba42:	4920      	ldr	r1, [pc, #128]	; (800bac4 <pbuf_remove_header+0x98>)
 800ba44:	4820      	ldr	r0, [pc, #128]	; (800bac8 <pbuf_remove_header+0x9c>)
 800ba46:	f009 fabd 	bl	8014fc4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d003      	beq.n	800ba58 <pbuf_remove_header+0x2c>
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba56:	d301      	bcc.n	800ba5c <pbuf_remove_header+0x30>
    return 1;
 800ba58:	2301      	movs	r3, #1
 800ba5a:	e02c      	b.n	800bab6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <pbuf_remove_header+0x3a>
    return 0;
 800ba62:	2300      	movs	r3, #0
 800ba64:	e027      	b.n	800bab6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	895b      	ldrh	r3, [r3, #10]
 800ba6e:	89fa      	ldrh	r2, [r7, #14]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d908      	bls.n	800ba86 <pbuf_remove_header+0x5a>
 800ba74:	4b12      	ldr	r3, [pc, #72]	; (800bac0 <pbuf_remove_header+0x94>)
 800ba76:	f240 2255 	movw	r2, #597	; 0x255
 800ba7a:	4914      	ldr	r1, [pc, #80]	; (800bacc <pbuf_remove_header+0xa0>)
 800ba7c:	4812      	ldr	r0, [pc, #72]	; (800bac8 <pbuf_remove_header+0x9c>)
 800ba7e:	f009 faa1 	bl	8014fc4 <iprintf>
 800ba82:	2301      	movs	r3, #1
 800ba84:	e017      	b.n	800bab6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	685a      	ldr	r2, [r3, #4]
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	441a      	add	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	895a      	ldrh	r2, [r3, #10]
 800ba9c:	89fb      	ldrh	r3, [r7, #14]
 800ba9e:	1ad3      	subs	r3, r2, r3
 800baa0:	b29a      	uxth	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	891a      	ldrh	r2, [r3, #8]
 800baaa:	89fb      	ldrh	r3, [r7, #14]
 800baac:	1ad3      	subs	r3, r2, r3
 800baae:	b29a      	uxth	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}
 800babe:	bf00      	nop
 800bac0:	080167bc 	.word	0x080167bc
 800bac4:	08016920 	.word	0x08016920
 800bac8:	0801681c 	.word	0x0801681c
 800bacc:	0801692c 	.word	0x0801692c

0800bad0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
 800bad8:	460b      	mov	r3, r1
 800bada:	807b      	strh	r3, [r7, #2]
 800badc:	4613      	mov	r3, r2
 800bade:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bae0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	da08      	bge.n	800bafa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bae8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800baec:	425b      	negs	r3, r3
 800baee:	4619      	mov	r1, r3
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f7ff ff9b 	bl	800ba2c <pbuf_remove_header>
 800baf6:	4603      	mov	r3, r0
 800baf8:	e007      	b.n	800bb0a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bafa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bafe:	787a      	ldrb	r2, [r7, #1]
 800bb00:	4619      	mov	r1, r3
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f7ff ff1a 	bl	800b93c <pbuf_add_header_impl>
 800bb08:	4603      	mov	r3, r0
  }
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b082      	sub	sp, #8
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bb1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb22:	2201      	movs	r2, #1
 800bb24:	4619      	mov	r1, r3
 800bb26:	6878      	ldr	r0, [r7, #4]
 800bb28:	f7ff ffd2 	bl	800bad0 <pbuf_header_impl>
 800bb2c:	4603      	mov	r3, r0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3708      	adds	r7, #8
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
	...

0800bb38 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b088      	sub	sp, #32
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d10b      	bne.n	800bb5e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d106      	bne.n	800bb5a <pbuf_free+0x22>
 800bb4c:	4b3b      	ldr	r3, [pc, #236]	; (800bc3c <pbuf_free+0x104>)
 800bb4e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800bb52:	493b      	ldr	r1, [pc, #236]	; (800bc40 <pbuf_free+0x108>)
 800bb54:	483b      	ldr	r0, [pc, #236]	; (800bc44 <pbuf_free+0x10c>)
 800bb56:	f009 fa35 	bl	8014fc4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	e069      	b.n	800bc32 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bb62:	e062      	b.n	800bc2a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bb64:	f009 f9ca 	bl	8014efc <sys_arch_protect>
 800bb68:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	7b9b      	ldrb	r3, [r3, #14]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d106      	bne.n	800bb80 <pbuf_free+0x48>
 800bb72:	4b32      	ldr	r3, [pc, #200]	; (800bc3c <pbuf_free+0x104>)
 800bb74:	f240 22f1 	movw	r2, #753	; 0x2f1
 800bb78:	4933      	ldr	r1, [pc, #204]	; (800bc48 <pbuf_free+0x110>)
 800bb7a:	4832      	ldr	r0, [pc, #200]	; (800bc44 <pbuf_free+0x10c>)
 800bb7c:	f009 fa22 	bl	8014fc4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	7b9b      	ldrb	r3, [r3, #14]
 800bb84:	3b01      	subs	r3, #1
 800bb86:	b2da      	uxtb	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	739a      	strb	r2, [r3, #14]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	7b9b      	ldrb	r3, [r3, #14]
 800bb90:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bb92:	69b8      	ldr	r0, [r7, #24]
 800bb94:	f009 f9c0 	bl	8014f18 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bb98:	7dfb      	ldrb	r3, [r7, #23]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d143      	bne.n	800bc26 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	7b1b      	ldrb	r3, [r3, #12]
 800bba8:	f003 030f 	and.w	r3, r3, #15
 800bbac:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	7b5b      	ldrb	r3, [r3, #13]
 800bbb2:	f003 0302 	and.w	r3, r3, #2
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d011      	beq.n	800bbde <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d106      	bne.n	800bbd4 <pbuf_free+0x9c>
 800bbc6:	4b1d      	ldr	r3, [pc, #116]	; (800bc3c <pbuf_free+0x104>)
 800bbc8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bbcc:	491f      	ldr	r1, [pc, #124]	; (800bc4c <pbuf_free+0x114>)
 800bbce:	481d      	ldr	r0, [pc, #116]	; (800bc44 <pbuf_free+0x10c>)
 800bbd0:	f009 f9f8 	bl	8014fc4 <iprintf>
        pc->custom_free_function(p);
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	691b      	ldr	r3, [r3, #16]
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	4798      	blx	r3
 800bbdc:	e01d      	b.n	800bc1a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bbde:	7bfb      	ldrb	r3, [r7, #15]
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	d104      	bne.n	800bbee <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bbe4:	6879      	ldr	r1, [r7, #4]
 800bbe6:	200c      	movs	r0, #12
 800bbe8:	f7ff f906 	bl	800adf8 <memp_free>
 800bbec:	e015      	b.n	800bc1a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bbee:	7bfb      	ldrb	r3, [r7, #15]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d104      	bne.n	800bbfe <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bbf4:	6879      	ldr	r1, [r7, #4]
 800bbf6:	200b      	movs	r0, #11
 800bbf8:	f7ff f8fe 	bl	800adf8 <memp_free>
 800bbfc:	e00d      	b.n	800bc1a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bbfe:	7bfb      	ldrb	r3, [r7, #15]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d103      	bne.n	800bc0c <pbuf_free+0xd4>
          mem_free(p);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7fe fd89 	bl	800a71c <mem_free>
 800bc0a:	e006      	b.n	800bc1a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bc0c:	4b0b      	ldr	r3, [pc, #44]	; (800bc3c <pbuf_free+0x104>)
 800bc0e:	f240 320f 	movw	r2, #783	; 0x30f
 800bc12:	490f      	ldr	r1, [pc, #60]	; (800bc50 <pbuf_free+0x118>)
 800bc14:	480b      	ldr	r0, [pc, #44]	; (800bc44 <pbuf_free+0x10c>)
 800bc16:	f009 f9d5 	bl	8014fc4 <iprintf>
        }
      }
      count++;
 800bc1a:	7ffb      	ldrb	r3, [r7, #31]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	607b      	str	r3, [r7, #4]
 800bc24:	e001      	b.n	800bc2a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bc26:	2300      	movs	r3, #0
 800bc28:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d199      	bne.n	800bb64 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bc30:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3720      	adds	r7, #32
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
 800bc3a:	bf00      	nop
 800bc3c:	080167bc 	.word	0x080167bc
 800bc40:	08016920 	.word	0x08016920
 800bc44:	0801681c 	.word	0x0801681c
 800bc48:	0801694c 	.word	0x0801694c
 800bc4c:	08016964 	.word	0x08016964
 800bc50:	08016988 	.word	0x08016988

0800bc54 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b085      	sub	sp, #20
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bc60:	e005      	b.n	800bc6e <pbuf_clen+0x1a>
    ++len;
 800bc62:	89fb      	ldrh	r3, [r7, #14]
 800bc64:	3301      	adds	r3, #1
 800bc66:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d1f6      	bne.n	800bc62 <pbuf_clen+0xe>
  }
  return len;
 800bc74:	89fb      	ldrh	r3, [r7, #14]
}
 800bc76:	4618      	mov	r0, r3
 800bc78:	3714      	adds	r7, #20
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc80:	4770      	bx	lr
	...

0800bc84 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b084      	sub	sp, #16
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d016      	beq.n	800bcc0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bc92:	f009 f933 	bl	8014efc <sys_arch_protect>
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	7b9b      	ldrb	r3, [r3, #14]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	b2da      	uxtb	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	739a      	strb	r2, [r3, #14]
 800bca4:	68f8      	ldr	r0, [r7, #12]
 800bca6:	f009 f937 	bl	8014f18 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	7b9b      	ldrb	r3, [r3, #14]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d106      	bne.n	800bcc0 <pbuf_ref+0x3c>
 800bcb2:	4b05      	ldr	r3, [pc, #20]	; (800bcc8 <pbuf_ref+0x44>)
 800bcb4:	f240 3242 	movw	r2, #834	; 0x342
 800bcb8:	4904      	ldr	r1, [pc, #16]	; (800bccc <pbuf_ref+0x48>)
 800bcba:	4805      	ldr	r0, [pc, #20]	; (800bcd0 <pbuf_ref+0x4c>)
 800bcbc:	f009 f982 	bl	8014fc4 <iprintf>
  }
}
 800bcc0:	bf00      	nop
 800bcc2:	3710      	adds	r7, #16
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}
 800bcc8:	080167bc 	.word	0x080167bc
 800bccc:	0801699c 	.word	0x0801699c
 800bcd0:	0801681c 	.word	0x0801681c

0800bcd4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d002      	beq.n	800bcea <pbuf_cat+0x16>
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d107      	bne.n	800bcfa <pbuf_cat+0x26>
 800bcea:	4b20      	ldr	r3, [pc, #128]	; (800bd6c <pbuf_cat+0x98>)
 800bcec:	f240 325a 	movw	r2, #858	; 0x35a
 800bcf0:	491f      	ldr	r1, [pc, #124]	; (800bd70 <pbuf_cat+0x9c>)
 800bcf2:	4820      	ldr	r0, [pc, #128]	; (800bd74 <pbuf_cat+0xa0>)
 800bcf4:	f009 f966 	bl	8014fc4 <iprintf>
 800bcf8:	e034      	b.n	800bd64 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	60fb      	str	r3, [r7, #12]
 800bcfe:	e00a      	b.n	800bd16 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	891a      	ldrh	r2, [r3, #8]
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	891b      	ldrh	r3, [r3, #8]
 800bd08:	4413      	add	r3, r2
 800bd0a:	b29a      	uxth	r2, r3
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	60fb      	str	r3, [r7, #12]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1f0      	bne.n	800bd00 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	891a      	ldrh	r2, [r3, #8]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	895b      	ldrh	r3, [r3, #10]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d006      	beq.n	800bd38 <pbuf_cat+0x64>
 800bd2a:	4b10      	ldr	r3, [pc, #64]	; (800bd6c <pbuf_cat+0x98>)
 800bd2c:	f240 3262 	movw	r2, #866	; 0x362
 800bd30:	4911      	ldr	r1, [pc, #68]	; (800bd78 <pbuf_cat+0xa4>)
 800bd32:	4810      	ldr	r0, [pc, #64]	; (800bd74 <pbuf_cat+0xa0>)
 800bd34:	f009 f946 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d006      	beq.n	800bd4e <pbuf_cat+0x7a>
 800bd40:	4b0a      	ldr	r3, [pc, #40]	; (800bd6c <pbuf_cat+0x98>)
 800bd42:	f240 3263 	movw	r2, #867	; 0x363
 800bd46:	490d      	ldr	r1, [pc, #52]	; (800bd7c <pbuf_cat+0xa8>)
 800bd48:	480a      	ldr	r0, [pc, #40]	; (800bd74 <pbuf_cat+0xa0>)
 800bd4a:	f009 f93b 	bl	8014fc4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	891a      	ldrh	r2, [r3, #8]
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	891b      	ldrh	r3, [r3, #8]
 800bd56:	4413      	add	r3, r2
 800bd58:	b29a      	uxth	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	683a      	ldr	r2, [r7, #0]
 800bd62:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	080167bc 	.word	0x080167bc
 800bd70:	080169b0 	.word	0x080169b0
 800bd74:	0801681c 	.word	0x0801681c
 800bd78:	080169e8 	.word	0x080169e8
 800bd7c:	08016a18 	.word	0x08016a18

0800bd80 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	617b      	str	r3, [r7, #20]
 800bd8e:	2300      	movs	r3, #0
 800bd90:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d008      	beq.n	800bdaa <pbuf_copy+0x2a>
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d005      	beq.n	800bdaa <pbuf_copy+0x2a>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	891a      	ldrh	r2, [r3, #8]
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	891b      	ldrh	r3, [r3, #8]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d209      	bcs.n	800bdbe <pbuf_copy+0x3e>
 800bdaa:	4b57      	ldr	r3, [pc, #348]	; (800bf08 <pbuf_copy+0x188>)
 800bdac:	f240 32ca 	movw	r2, #970	; 0x3ca
 800bdb0:	4956      	ldr	r1, [pc, #344]	; (800bf0c <pbuf_copy+0x18c>)
 800bdb2:	4857      	ldr	r0, [pc, #348]	; (800bf10 <pbuf_copy+0x190>)
 800bdb4:	f009 f906 	bl	8014fc4 <iprintf>
 800bdb8:	f06f 030f 	mvn.w	r3, #15
 800bdbc:	e09f      	b.n	800befe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	895b      	ldrh	r3, [r3, #10]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	1ad2      	subs	r2, r2, r3
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	895b      	ldrh	r3, [r3, #10]
 800bdcc:	4619      	mov	r1, r3
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	1acb      	subs	r3, r1, r3
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d306      	bcc.n	800bde4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	895b      	ldrh	r3, [r3, #10]
 800bdda:	461a      	mov	r2, r3
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	60fb      	str	r3, [r7, #12]
 800bde2:	e005      	b.n	800bdf0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	895b      	ldrh	r3, [r3, #10]
 800bde8:	461a      	mov	r2, r3
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	1ad3      	subs	r3, r2, r3
 800bdee:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	18d0      	adds	r0, r2, r3
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	685a      	ldr	r2, [r3, #4]
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	4413      	add	r3, r2
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	4619      	mov	r1, r3
 800be04:	f009 f8cb 	bl	8014f9e <memcpy>
    offset_to += len;
 800be08:	697a      	ldr	r2, [r7, #20]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	4413      	add	r3, r2
 800be0e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800be10:	693a      	ldr	r2, [r7, #16]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	4413      	add	r3, r2
 800be16:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	895b      	ldrh	r3, [r3, #10]
 800be1c:	461a      	mov	r2, r3
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	4293      	cmp	r3, r2
 800be22:	d906      	bls.n	800be32 <pbuf_copy+0xb2>
 800be24:	4b38      	ldr	r3, [pc, #224]	; (800bf08 <pbuf_copy+0x188>)
 800be26:	f240 32d9 	movw	r2, #985	; 0x3d9
 800be2a:	493a      	ldr	r1, [pc, #232]	; (800bf14 <pbuf_copy+0x194>)
 800be2c:	4838      	ldr	r0, [pc, #224]	; (800bf10 <pbuf_copy+0x190>)
 800be2e:	f009 f8c9 	bl	8014fc4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	895b      	ldrh	r3, [r3, #10]
 800be36:	461a      	mov	r2, r3
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d906      	bls.n	800be4c <pbuf_copy+0xcc>
 800be3e:	4b32      	ldr	r3, [pc, #200]	; (800bf08 <pbuf_copy+0x188>)
 800be40:	f240 32da 	movw	r2, #986	; 0x3da
 800be44:	4934      	ldr	r1, [pc, #208]	; (800bf18 <pbuf_copy+0x198>)
 800be46:	4832      	ldr	r0, [pc, #200]	; (800bf10 <pbuf_copy+0x190>)
 800be48:	f009 f8bc 	bl	8014fc4 <iprintf>
    if (offset_from >= p_from->len) {
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	895b      	ldrh	r3, [r3, #10]
 800be50:	461a      	mov	r2, r3
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	4293      	cmp	r3, r2
 800be56:	d304      	bcc.n	800be62 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800be58:	2300      	movs	r3, #0
 800be5a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	895b      	ldrh	r3, [r3, #10]
 800be66:	461a      	mov	r2, r3
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d114      	bne.n	800be98 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800be6e:	2300      	movs	r3, #0
 800be70:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d10c      	bne.n	800be98 <pbuf_copy+0x118>
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d009      	beq.n	800be98 <pbuf_copy+0x118>
 800be84:	4b20      	ldr	r3, [pc, #128]	; (800bf08 <pbuf_copy+0x188>)
 800be86:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800be8a:	4924      	ldr	r1, [pc, #144]	; (800bf1c <pbuf_copy+0x19c>)
 800be8c:	4820      	ldr	r0, [pc, #128]	; (800bf10 <pbuf_copy+0x190>)
 800be8e:	f009 f899 	bl	8014fc4 <iprintf>
 800be92:	f06f 030f 	mvn.w	r3, #15
 800be96:	e032      	b.n	800befe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d013      	beq.n	800bec6 <pbuf_copy+0x146>
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	895a      	ldrh	r2, [r3, #10]
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	891b      	ldrh	r3, [r3, #8]
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d10d      	bne.n	800bec6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d009      	beq.n	800bec6 <pbuf_copy+0x146>
 800beb2:	4b15      	ldr	r3, [pc, #84]	; (800bf08 <pbuf_copy+0x188>)
 800beb4:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800beb8:	4919      	ldr	r1, [pc, #100]	; (800bf20 <pbuf_copy+0x1a0>)
 800beba:	4815      	ldr	r0, [pc, #84]	; (800bf10 <pbuf_copy+0x190>)
 800bebc:	f009 f882 	bl	8014fc4 <iprintf>
 800bec0:	f06f 0305 	mvn.w	r3, #5
 800bec4:	e01b      	b.n	800befe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d013      	beq.n	800bef4 <pbuf_copy+0x174>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	895a      	ldrh	r2, [r3, #10]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	891b      	ldrh	r3, [r3, #8]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d10d      	bne.n	800bef4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d009      	beq.n	800bef4 <pbuf_copy+0x174>
 800bee0:	4b09      	ldr	r3, [pc, #36]	; (800bf08 <pbuf_copy+0x188>)
 800bee2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800bee6:	490e      	ldr	r1, [pc, #56]	; (800bf20 <pbuf_copy+0x1a0>)
 800bee8:	4809      	ldr	r0, [pc, #36]	; (800bf10 <pbuf_copy+0x190>)
 800beea:	f009 f86b 	bl	8014fc4 <iprintf>
 800beee:	f06f 0305 	mvn.w	r3, #5
 800bef2:	e004      	b.n	800befe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f47f af61 	bne.w	800bdbe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800befc:	2300      	movs	r3, #0
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3718      	adds	r7, #24
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
 800bf06:	bf00      	nop
 800bf08:	080167bc 	.word	0x080167bc
 800bf0c:	08016a64 	.word	0x08016a64
 800bf10:	0801681c 	.word	0x0801681c
 800bf14:	08016a94 	.word	0x08016a94
 800bf18:	08016aac 	.word	0x08016aac
 800bf1c:	08016ac8 	.word	0x08016ac8
 800bf20:	08016ad8 	.word	0x08016ad8

0800bf24 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b088      	sub	sp, #32
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	4611      	mov	r1, r2
 800bf30:	461a      	mov	r2, r3
 800bf32:	460b      	mov	r3, r1
 800bf34:	80fb      	strh	r3, [r7, #6]
 800bf36:	4613      	mov	r3, r2
 800bf38:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bf3e:	2300      	movs	r3, #0
 800bf40:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d108      	bne.n	800bf5a <pbuf_copy_partial+0x36>
 800bf48:	4b2b      	ldr	r3, [pc, #172]	; (800bff8 <pbuf_copy_partial+0xd4>)
 800bf4a:	f240 420a 	movw	r2, #1034	; 0x40a
 800bf4e:	492b      	ldr	r1, [pc, #172]	; (800bffc <pbuf_copy_partial+0xd8>)
 800bf50:	482b      	ldr	r0, [pc, #172]	; (800c000 <pbuf_copy_partial+0xdc>)
 800bf52:	f009 f837 	bl	8014fc4 <iprintf>
 800bf56:	2300      	movs	r3, #0
 800bf58:	e04a      	b.n	800bff0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d108      	bne.n	800bf72 <pbuf_copy_partial+0x4e>
 800bf60:	4b25      	ldr	r3, [pc, #148]	; (800bff8 <pbuf_copy_partial+0xd4>)
 800bf62:	f240 420b 	movw	r2, #1035	; 0x40b
 800bf66:	4927      	ldr	r1, [pc, #156]	; (800c004 <pbuf_copy_partial+0xe0>)
 800bf68:	4825      	ldr	r0, [pc, #148]	; (800c000 <pbuf_copy_partial+0xdc>)
 800bf6a:	f009 f82b 	bl	8014fc4 <iprintf>
 800bf6e:	2300      	movs	r3, #0
 800bf70:	e03e      	b.n	800bff0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	61fb      	str	r3, [r7, #28]
 800bf76:	e034      	b.n	800bfe2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bf78:	88bb      	ldrh	r3, [r7, #4]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00a      	beq.n	800bf94 <pbuf_copy_partial+0x70>
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	895b      	ldrh	r3, [r3, #10]
 800bf82:	88ba      	ldrh	r2, [r7, #4]
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d305      	bcc.n	800bf94 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	895b      	ldrh	r3, [r3, #10]
 800bf8c:	88ba      	ldrh	r2, [r7, #4]
 800bf8e:	1ad3      	subs	r3, r2, r3
 800bf90:	80bb      	strh	r3, [r7, #4]
 800bf92:	e023      	b.n	800bfdc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	895a      	ldrh	r2, [r3, #10]
 800bf98:	88bb      	ldrh	r3, [r7, #4]
 800bf9a:	1ad3      	subs	r3, r2, r3
 800bf9c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bf9e:	8b3a      	ldrh	r2, [r7, #24]
 800bfa0:	88fb      	ldrh	r3, [r7, #6]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d901      	bls.n	800bfaa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bfa6:	88fb      	ldrh	r3, [r7, #6]
 800bfa8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bfaa:	8b7b      	ldrh	r3, [r7, #26]
 800bfac:	68ba      	ldr	r2, [r7, #8]
 800bfae:	18d0      	adds	r0, r2, r3
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	685a      	ldr	r2, [r3, #4]
 800bfb4:	88bb      	ldrh	r3, [r7, #4]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	8b3a      	ldrh	r2, [r7, #24]
 800bfba:	4619      	mov	r1, r3
 800bfbc:	f008 ffef 	bl	8014f9e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bfc0:	8afa      	ldrh	r2, [r7, #22]
 800bfc2:	8b3b      	ldrh	r3, [r7, #24]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bfc8:	8b7a      	ldrh	r2, [r7, #26]
 800bfca:	8b3b      	ldrh	r3, [r7, #24]
 800bfcc:	4413      	add	r3, r2
 800bfce:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bfd0:	88fa      	ldrh	r2, [r7, #6]
 800bfd2:	8b3b      	ldrh	r3, [r7, #24]
 800bfd4:	1ad3      	subs	r3, r2, r3
 800bfd6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bfdc:	69fb      	ldr	r3, [r7, #28]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	61fb      	str	r3, [r7, #28]
 800bfe2:	88fb      	ldrh	r3, [r7, #6]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d002      	beq.n	800bfee <pbuf_copy_partial+0xca>
 800bfe8:	69fb      	ldr	r3, [r7, #28]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d1c4      	bne.n	800bf78 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800bfee:	8afb      	ldrh	r3, [r7, #22]
}
 800bff0:	4618      	mov	r0, r3
 800bff2:	3720      	adds	r7, #32
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	080167bc 	.word	0x080167bc
 800bffc:	08016b04 	.word	0x08016b04
 800c000:	0801681c 	.word	0x0801681c
 800c004:	08016b24 	.word	0x08016b24

0800c008 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	4603      	mov	r3, r0
 800c010:	603a      	str	r2, [r7, #0]
 800c012:	71fb      	strb	r3, [r7, #7]
 800c014:	460b      	mov	r3, r1
 800c016:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	8919      	ldrh	r1, [r3, #8]
 800c01c:	88ba      	ldrh	r2, [r7, #4]
 800c01e:	79fb      	ldrb	r3, [r7, #7]
 800c020:	4618      	mov	r0, r3
 800c022:	f7ff faa9 	bl	800b578 <pbuf_alloc>
 800c026:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d101      	bne.n	800c032 <pbuf_clone+0x2a>
    return NULL;
 800c02e:	2300      	movs	r3, #0
 800c030:	e011      	b.n	800c056 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c032:	6839      	ldr	r1, [r7, #0]
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f7ff fea3 	bl	800bd80 <pbuf_copy>
 800c03a:	4603      	mov	r3, r0
 800c03c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c03e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d006      	beq.n	800c054 <pbuf_clone+0x4c>
 800c046:	4b06      	ldr	r3, [pc, #24]	; (800c060 <pbuf_clone+0x58>)
 800c048:	f240 5224 	movw	r2, #1316	; 0x524
 800c04c:	4905      	ldr	r1, [pc, #20]	; (800c064 <pbuf_clone+0x5c>)
 800c04e:	4806      	ldr	r0, [pc, #24]	; (800c068 <pbuf_clone+0x60>)
 800c050:	f008 ffb8 	bl	8014fc4 <iprintf>
  return q;
 800c054:	68fb      	ldr	r3, [r7, #12]
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	080167bc 	.word	0x080167bc
 800c064:	08016c30 	.word	0x08016c30
 800c068:	0801681c 	.word	0x0801681c

0800c06c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c070:	f008 ffc0 	bl	8014ff4 <rand>
 800c074:	4603      	mov	r3, r0
 800c076:	b29b      	uxth	r3, r3
 800c078:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c082:	b29a      	uxth	r2, r3
 800c084:	4b01      	ldr	r3, [pc, #4]	; (800c08c <tcp_init+0x20>)
 800c086:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c088:	bf00      	nop
 800c08a:	bd80      	pop	{r7, pc}
 800c08c:	20000010 	.word	0x20000010

0800c090 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	7d1b      	ldrb	r3, [r3, #20]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d105      	bne.n	800c0ac <tcp_free+0x1c>
 800c0a0:	4b06      	ldr	r3, [pc, #24]	; (800c0bc <tcp_free+0x2c>)
 800c0a2:	22d4      	movs	r2, #212	; 0xd4
 800c0a4:	4906      	ldr	r1, [pc, #24]	; (800c0c0 <tcp_free+0x30>)
 800c0a6:	4807      	ldr	r0, [pc, #28]	; (800c0c4 <tcp_free+0x34>)
 800c0a8:	f008 ff8c 	bl	8014fc4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c0ac:	6879      	ldr	r1, [r7, #4]
 800c0ae:	2001      	movs	r0, #1
 800c0b0:	f7fe fea2 	bl	800adf8 <memp_free>
}
 800c0b4:	bf00      	nop
 800c0b6:	3708      	adds	r7, #8
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}
 800c0bc:	08016cbc 	.word	0x08016cbc
 800c0c0:	08016cec 	.word	0x08016cec
 800c0c4:	08016d00 	.word	0x08016d00

0800c0c8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	b082      	sub	sp, #8
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	7d1b      	ldrb	r3, [r3, #20]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d105      	bne.n	800c0e4 <tcp_free_listen+0x1c>
 800c0d8:	4b06      	ldr	r3, [pc, #24]	; (800c0f4 <tcp_free_listen+0x2c>)
 800c0da:	22df      	movs	r2, #223	; 0xdf
 800c0dc:	4906      	ldr	r1, [pc, #24]	; (800c0f8 <tcp_free_listen+0x30>)
 800c0de:	4807      	ldr	r0, [pc, #28]	; (800c0fc <tcp_free_listen+0x34>)
 800c0e0:	f008 ff70 	bl	8014fc4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c0e4:	6879      	ldr	r1, [r7, #4]
 800c0e6:	2002      	movs	r0, #2
 800c0e8:	f7fe fe86 	bl	800adf8 <memp_free>
}
 800c0ec:	bf00      	nop
 800c0ee:	3708      	adds	r7, #8
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	08016cbc 	.word	0x08016cbc
 800c0f8:	08016d28 	.word	0x08016d28
 800c0fc:	08016d00 	.word	0x08016d00

0800c100 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c104:	f001 f852 	bl	800d1ac <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c108:	4b07      	ldr	r3, [pc, #28]	; (800c128 <tcp_tmr+0x28>)
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	3301      	adds	r3, #1
 800c10e:	b2da      	uxtb	r2, r3
 800c110:	4b05      	ldr	r3, [pc, #20]	; (800c128 <tcp_tmr+0x28>)
 800c112:	701a      	strb	r2, [r3, #0]
 800c114:	4b04      	ldr	r3, [pc, #16]	; (800c128 <tcp_tmr+0x28>)
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	f003 0301 	and.w	r3, r3, #1
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d001      	beq.n	800c124 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c120:	f000 fd06 	bl	800cb30 <tcp_slowtmr>
  }
}
 800c124:	bf00      	nop
 800c126:	bd80      	pop	{r7, pc}
 800c128:	200044e1 	.word	0x200044e1

0800c12c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d105      	bne.n	800c148 <tcp_remove_listener+0x1c>
 800c13c:	4b0d      	ldr	r3, [pc, #52]	; (800c174 <tcp_remove_listener+0x48>)
 800c13e:	22ff      	movs	r2, #255	; 0xff
 800c140:	490d      	ldr	r1, [pc, #52]	; (800c178 <tcp_remove_listener+0x4c>)
 800c142:	480e      	ldr	r0, [pc, #56]	; (800c17c <tcp_remove_listener+0x50>)
 800c144:	f008 ff3e 	bl	8014fc4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	60fb      	str	r3, [r7, #12]
 800c14c:	e00a      	b.n	800c164 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c152:	683a      	ldr	r2, [r7, #0]
 800c154:	429a      	cmp	r2, r3
 800c156:	d102      	bne.n	800c15e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2200      	movs	r2, #0
 800c15c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	60fb      	str	r3, [r7, #12]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d1f1      	bne.n	800c14e <tcp_remove_listener+0x22>
    }
  }
}
 800c16a:	bf00      	nop
 800c16c:	3710      	adds	r7, #16
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	08016cbc 	.word	0x08016cbc
 800c178:	08016d44 	.word	0x08016d44
 800c17c:	08016d00 	.word	0x08016d00

0800c180 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d106      	bne.n	800c19c <tcp_listen_closed+0x1c>
 800c18e:	4b14      	ldr	r3, [pc, #80]	; (800c1e0 <tcp_listen_closed+0x60>)
 800c190:	f240 1211 	movw	r2, #273	; 0x111
 800c194:	4913      	ldr	r1, [pc, #76]	; (800c1e4 <tcp_listen_closed+0x64>)
 800c196:	4814      	ldr	r0, [pc, #80]	; (800c1e8 <tcp_listen_closed+0x68>)
 800c198:	f008 ff14 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	7d1b      	ldrb	r3, [r3, #20]
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	d006      	beq.n	800c1b2 <tcp_listen_closed+0x32>
 800c1a4:	4b0e      	ldr	r3, [pc, #56]	; (800c1e0 <tcp_listen_closed+0x60>)
 800c1a6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c1aa:	4910      	ldr	r1, [pc, #64]	; (800c1ec <tcp_listen_closed+0x6c>)
 800c1ac:	480e      	ldr	r0, [pc, #56]	; (800c1e8 <tcp_listen_closed+0x68>)
 800c1ae:	f008 ff09 	bl	8014fc4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	60fb      	str	r3, [r7, #12]
 800c1b6:	e00b      	b.n	800c1d0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c1b8:	4a0d      	ldr	r2, [pc, #52]	; (800c1f0 <tcp_listen_closed+0x70>)
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	6879      	ldr	r1, [r7, #4]
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f7ff ffb1 	bl	800c12c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	60fb      	str	r3, [r7, #12]
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2b03      	cmp	r3, #3
 800c1d4:	d9f0      	bls.n	800c1b8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c1d6:	bf00      	nop
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	08016cbc 	.word	0x08016cbc
 800c1e4:	08016d6c 	.word	0x08016d6c
 800c1e8:	08016d00 	.word	0x08016d00
 800c1ec:	08016d78 	.word	0x08016d78
 800c1f0:	08029810 	.word	0x08029810

0800c1f4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c1f4:	b5b0      	push	{r4, r5, r7, lr}
 800c1f6:	b088      	sub	sp, #32
 800c1f8:	af04      	add	r7, sp, #16
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d106      	bne.n	800c214 <tcp_close_shutdown+0x20>
 800c206:	4b61      	ldr	r3, [pc, #388]	; (800c38c <tcp_close_shutdown+0x198>)
 800c208:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c20c:	4960      	ldr	r1, [pc, #384]	; (800c390 <tcp_close_shutdown+0x19c>)
 800c20e:	4861      	ldr	r0, [pc, #388]	; (800c394 <tcp_close_shutdown+0x1a0>)
 800c210:	f008 fed8 	bl	8014fc4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c214:	78fb      	ldrb	r3, [r7, #3]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d066      	beq.n	800c2e8 <tcp_close_shutdown+0xf4>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	7d1b      	ldrb	r3, [r3, #20]
 800c21e:	2b04      	cmp	r3, #4
 800c220:	d003      	beq.n	800c22a <tcp_close_shutdown+0x36>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	7d1b      	ldrb	r3, [r3, #20]
 800c226:	2b07      	cmp	r3, #7
 800c228:	d15e      	bne.n	800c2e8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d104      	bne.n	800c23c <tcp_close_shutdown+0x48>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c236:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c23a:	d055      	beq.n	800c2e8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	8b5b      	ldrh	r3, [r3, #26]
 800c240:	f003 0310 	and.w	r3, r3, #16
 800c244:	2b00      	cmp	r3, #0
 800c246:	d106      	bne.n	800c256 <tcp_close_shutdown+0x62>
 800c248:	4b50      	ldr	r3, [pc, #320]	; (800c38c <tcp_close_shutdown+0x198>)
 800c24a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c24e:	4952      	ldr	r1, [pc, #328]	; (800c398 <tcp_close_shutdown+0x1a4>)
 800c250:	4850      	ldr	r0, [pc, #320]	; (800c394 <tcp_close_shutdown+0x1a0>)
 800c252:	f008 feb7 	bl	8014fc4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c25e:	687d      	ldr	r5, [r7, #4]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	3304      	adds	r3, #4
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	8ad2      	ldrh	r2, [r2, #22]
 800c268:	6879      	ldr	r1, [r7, #4]
 800c26a:	8b09      	ldrh	r1, [r1, #24]
 800c26c:	9102      	str	r1, [sp, #8]
 800c26e:	9201      	str	r2, [sp, #4]
 800c270:	9300      	str	r3, [sp, #0]
 800c272:	462b      	mov	r3, r5
 800c274:	4622      	mov	r2, r4
 800c276:	4601      	mov	r1, r0
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f005 fd99 	bl	8011db0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f001 fb68 	bl	800d954 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c284:	4b45      	ldr	r3, [pc, #276]	; (800c39c <tcp_close_shutdown+0x1a8>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d105      	bne.n	800c29a <tcp_close_shutdown+0xa6>
 800c28e:	4b43      	ldr	r3, [pc, #268]	; (800c39c <tcp_close_shutdown+0x1a8>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	4a41      	ldr	r2, [pc, #260]	; (800c39c <tcp_close_shutdown+0x1a8>)
 800c296:	6013      	str	r3, [r2, #0]
 800c298:	e013      	b.n	800c2c2 <tcp_close_shutdown+0xce>
 800c29a:	4b40      	ldr	r3, [pc, #256]	; (800c39c <tcp_close_shutdown+0x1a8>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	60fb      	str	r3, [r7, #12]
 800c2a0:	e00c      	b.n	800c2bc <tcp_close_shutdown+0xc8>
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	429a      	cmp	r2, r3
 800c2aa:	d104      	bne.n	800c2b6 <tcp_close_shutdown+0xc2>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	68da      	ldr	r2, [r3, #12]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	60da      	str	r2, [r3, #12]
 800c2b4:	e005      	b.n	800c2c2 <tcp_close_shutdown+0xce>
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	68db      	ldr	r3, [r3, #12]
 800c2ba:	60fb      	str	r3, [r7, #12]
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1ef      	bne.n	800c2a2 <tcp_close_shutdown+0xae>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	60da      	str	r2, [r3, #12]
 800c2c8:	4b35      	ldr	r3, [pc, #212]	; (800c3a0 <tcp_close_shutdown+0x1ac>)
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c2ce:	4b35      	ldr	r3, [pc, #212]	; (800c3a4 <tcp_close_shutdown+0x1b0>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d102      	bne.n	800c2de <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c2d8:	f003 fffa 	bl	80102d0 <tcp_trigger_input_pcb_close>
 800c2dc:	e002      	b.n	800c2e4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f7ff fed6 	bl	800c090 <tcp_free>
      }
      return ERR_OK;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	e04d      	b.n	800c384 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	7d1b      	ldrb	r3, [r3, #20]
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d02d      	beq.n	800c34c <tcp_close_shutdown+0x158>
 800c2f0:	2b02      	cmp	r3, #2
 800c2f2:	d036      	beq.n	800c362 <tcp_close_shutdown+0x16e>
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d13f      	bne.n	800c378 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	8adb      	ldrh	r3, [r3, #22]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d021      	beq.n	800c344 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c300:	4b29      	ldr	r3, [pc, #164]	; (800c3a8 <tcp_close_shutdown+0x1b4>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	429a      	cmp	r2, r3
 800c308:	d105      	bne.n	800c316 <tcp_close_shutdown+0x122>
 800c30a:	4b27      	ldr	r3, [pc, #156]	; (800c3a8 <tcp_close_shutdown+0x1b4>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	4a25      	ldr	r2, [pc, #148]	; (800c3a8 <tcp_close_shutdown+0x1b4>)
 800c312:	6013      	str	r3, [r2, #0]
 800c314:	e013      	b.n	800c33e <tcp_close_shutdown+0x14a>
 800c316:	4b24      	ldr	r3, [pc, #144]	; (800c3a8 <tcp_close_shutdown+0x1b4>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	60bb      	str	r3, [r7, #8]
 800c31c:	e00c      	b.n	800c338 <tcp_close_shutdown+0x144>
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	429a      	cmp	r2, r3
 800c326:	d104      	bne.n	800c332 <tcp_close_shutdown+0x13e>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	68da      	ldr	r2, [r3, #12]
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	60da      	str	r2, [r3, #12]
 800c330:	e005      	b.n	800c33e <tcp_close_shutdown+0x14a>
 800c332:	68bb      	ldr	r3, [r7, #8]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	60bb      	str	r3, [r7, #8]
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1ef      	bne.n	800c31e <tcp_close_shutdown+0x12a>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2200      	movs	r2, #0
 800c342:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7ff fea3 	bl	800c090 <tcp_free>
      break;
 800c34a:	e01a      	b.n	800c382 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f7ff ff17 	bl	800c180 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c352:	6879      	ldr	r1, [r7, #4]
 800c354:	4815      	ldr	r0, [pc, #84]	; (800c3ac <tcp_close_shutdown+0x1b8>)
 800c356:	f001 fb4d 	bl	800d9f4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f7ff feb4 	bl	800c0c8 <tcp_free_listen>
      break;
 800c360:	e00f      	b.n	800c382 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c362:	6879      	ldr	r1, [r7, #4]
 800c364:	480d      	ldr	r0, [pc, #52]	; (800c39c <tcp_close_shutdown+0x1a8>)
 800c366:	f001 fb45 	bl	800d9f4 <tcp_pcb_remove>
 800c36a:	4b0d      	ldr	r3, [pc, #52]	; (800c3a0 <tcp_close_shutdown+0x1ac>)
 800c36c:	2201      	movs	r2, #1
 800c36e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f7ff fe8d 	bl	800c090 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c376:	e004      	b.n	800c382 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 f819 	bl	800c3b0 <tcp_close_shutdown_fin>
 800c37e:	4603      	mov	r3, r0
 800c380:	e000      	b.n	800c384 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800c382:	2300      	movs	r3, #0
}
 800c384:	4618      	mov	r0, r3
 800c386:	3710      	adds	r7, #16
 800c388:	46bd      	mov	sp, r7
 800c38a:	bdb0      	pop	{r4, r5, r7, pc}
 800c38c:	08016cbc 	.word	0x08016cbc
 800c390:	08016d90 	.word	0x08016d90
 800c394:	08016d00 	.word	0x08016d00
 800c398:	08016db0 	.word	0x08016db0
 800c39c:	2000b43c 	.word	0x2000b43c
 800c3a0:	2000b438 	.word	0x2000b438
 800c3a4:	2000b450 	.word	0x2000b450
 800c3a8:	2000b448 	.word	0x2000b448
 800c3ac:	2000b444 	.word	0x2000b444

0800c3b0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d106      	bne.n	800c3cc <tcp_close_shutdown_fin+0x1c>
 800c3be:	4b2c      	ldr	r3, [pc, #176]	; (800c470 <tcp_close_shutdown_fin+0xc0>)
 800c3c0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c3c4:	492b      	ldr	r1, [pc, #172]	; (800c474 <tcp_close_shutdown_fin+0xc4>)
 800c3c6:	482c      	ldr	r0, [pc, #176]	; (800c478 <tcp_close_shutdown_fin+0xc8>)
 800c3c8:	f008 fdfc 	bl	8014fc4 <iprintf>

  switch (pcb->state) {
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	7d1b      	ldrb	r3, [r3, #20]
 800c3d0:	2b04      	cmp	r3, #4
 800c3d2:	d010      	beq.n	800c3f6 <tcp_close_shutdown_fin+0x46>
 800c3d4:	2b07      	cmp	r3, #7
 800c3d6:	d01b      	beq.n	800c410 <tcp_close_shutdown_fin+0x60>
 800c3d8:	2b03      	cmp	r3, #3
 800c3da:	d126      	bne.n	800c42a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f004 fde3 	bl	8010fa8 <tcp_send_fin>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c3e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d11f      	bne.n	800c42e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2205      	movs	r2, #5
 800c3f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c3f4:	e01b      	b.n	800c42e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f004 fdd6 	bl	8010fa8 <tcp_send_fin>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d114      	bne.n	800c432 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2205      	movs	r2, #5
 800c40c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c40e:	e010      	b.n	800c432 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f004 fdc9 	bl	8010fa8 <tcp_send_fin>
 800c416:	4603      	mov	r3, r0
 800c418:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c41a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d109      	bne.n	800c436 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2209      	movs	r2, #9
 800c426:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c428:	e005      	b.n	800c436 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c42a:	2300      	movs	r3, #0
 800c42c:	e01c      	b.n	800c468 <tcp_close_shutdown_fin+0xb8>
      break;
 800c42e:	bf00      	nop
 800c430:	e002      	b.n	800c438 <tcp_close_shutdown_fin+0x88>
      break;
 800c432:	bf00      	nop
 800c434:	e000      	b.n	800c438 <tcp_close_shutdown_fin+0x88>
      break;
 800c436:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c438:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d103      	bne.n	800c448 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f004 feef 	bl	8011224 <tcp_output>
 800c446:	e00d      	b.n	800c464 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800c448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c44c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c450:	d108      	bne.n	800c464 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	8b5b      	ldrh	r3, [r3, #26]
 800c456:	f043 0308 	orr.w	r3, r3, #8
 800c45a:	b29a      	uxth	r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c460:	2300      	movs	r3, #0
 800c462:	e001      	b.n	800c468 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800c464:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3710      	adds	r7, #16
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	08016cbc 	.word	0x08016cbc
 800c474:	08016d6c 	.word	0x08016d6c
 800c478:	08016d00 	.word	0x08016d00

0800c47c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b082      	sub	sp, #8
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d109      	bne.n	800c49e <tcp_close+0x22>
 800c48a:	4b0f      	ldr	r3, [pc, #60]	; (800c4c8 <tcp_close+0x4c>)
 800c48c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c490:	490e      	ldr	r1, [pc, #56]	; (800c4cc <tcp_close+0x50>)
 800c492:	480f      	ldr	r0, [pc, #60]	; (800c4d0 <tcp_close+0x54>)
 800c494:	f008 fd96 	bl	8014fc4 <iprintf>
 800c498:	f06f 030f 	mvn.w	r3, #15
 800c49c:	e00f      	b.n	800c4be <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	7d1b      	ldrb	r3, [r3, #20]
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d006      	beq.n	800c4b4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	8b5b      	ldrh	r3, [r3, #26]
 800c4aa:	f043 0310 	orr.w	r3, r3, #16
 800c4ae:	b29a      	uxth	r2, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c4b4:	2101      	movs	r1, #1
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f7ff fe9c 	bl	800c1f4 <tcp_close_shutdown>
 800c4bc:	4603      	mov	r3, r0
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3708      	adds	r7, #8
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	08016cbc 	.word	0x08016cbc
 800c4cc:	08016dcc 	.word	0x08016dcc
 800c4d0:	08016d00 	.word	0x08016d00

0800c4d4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b08e      	sub	sp, #56	; 0x38
 800c4d8:	af04      	add	r7, sp, #16
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d107      	bne.n	800c4f4 <tcp_abandon+0x20>
 800c4e4:	4b52      	ldr	r3, [pc, #328]	; (800c630 <tcp_abandon+0x15c>)
 800c4e6:	f240 223d 	movw	r2, #573	; 0x23d
 800c4ea:	4952      	ldr	r1, [pc, #328]	; (800c634 <tcp_abandon+0x160>)
 800c4ec:	4852      	ldr	r0, [pc, #328]	; (800c638 <tcp_abandon+0x164>)
 800c4ee:	f008 fd69 	bl	8014fc4 <iprintf>
 800c4f2:	e099      	b.n	800c628 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	7d1b      	ldrb	r3, [r3, #20]
 800c4f8:	2b01      	cmp	r3, #1
 800c4fa:	d106      	bne.n	800c50a <tcp_abandon+0x36>
 800c4fc:	4b4c      	ldr	r3, [pc, #304]	; (800c630 <tcp_abandon+0x15c>)
 800c4fe:	f240 2241 	movw	r2, #577	; 0x241
 800c502:	494e      	ldr	r1, [pc, #312]	; (800c63c <tcp_abandon+0x168>)
 800c504:	484c      	ldr	r0, [pc, #304]	; (800c638 <tcp_abandon+0x164>)
 800c506:	f008 fd5d 	bl	8014fc4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	7d1b      	ldrb	r3, [r3, #20]
 800c50e:	2b0a      	cmp	r3, #10
 800c510:	d107      	bne.n	800c522 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c512:	6879      	ldr	r1, [r7, #4]
 800c514:	484a      	ldr	r0, [pc, #296]	; (800c640 <tcp_abandon+0x16c>)
 800c516:	f001 fa6d 	bl	800d9f4 <tcp_pcb_remove>
    tcp_free(pcb);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f7ff fdb8 	bl	800c090 <tcp_free>
 800c520:	e082      	b.n	800c628 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c522:	2300      	movs	r3, #0
 800c524:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c526:	2300      	movs	r3, #0
 800c528:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c52e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c534:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c53c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	691b      	ldr	r3, [r3, #16]
 800c542:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	7d1b      	ldrb	r3, [r3, #20]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d126      	bne.n	800c59a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	8adb      	ldrh	r3, [r3, #22]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d02e      	beq.n	800c5b2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c554:	4b3b      	ldr	r3, [pc, #236]	; (800c644 <tcp_abandon+0x170>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d105      	bne.n	800c56a <tcp_abandon+0x96>
 800c55e:	4b39      	ldr	r3, [pc, #228]	; (800c644 <tcp_abandon+0x170>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	4a37      	ldr	r2, [pc, #220]	; (800c644 <tcp_abandon+0x170>)
 800c566:	6013      	str	r3, [r2, #0]
 800c568:	e013      	b.n	800c592 <tcp_abandon+0xbe>
 800c56a:	4b36      	ldr	r3, [pc, #216]	; (800c644 <tcp_abandon+0x170>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	61fb      	str	r3, [r7, #28]
 800c570:	e00c      	b.n	800c58c <tcp_abandon+0xb8>
 800c572:	69fb      	ldr	r3, [r7, #28]
 800c574:	68db      	ldr	r3, [r3, #12]
 800c576:	687a      	ldr	r2, [r7, #4]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d104      	bne.n	800c586 <tcp_abandon+0xb2>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	68da      	ldr	r2, [r3, #12]
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	60da      	str	r2, [r3, #12]
 800c584:	e005      	b.n	800c592 <tcp_abandon+0xbe>
 800c586:	69fb      	ldr	r3, [r7, #28]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	61fb      	str	r3, [r7, #28]
 800c58c:	69fb      	ldr	r3, [r7, #28]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d1ef      	bne.n	800c572 <tcp_abandon+0x9e>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	60da      	str	r2, [r3, #12]
 800c598:	e00b      	b.n	800c5b2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	8adb      	ldrh	r3, [r3, #22]
 800c5a2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c5a4:	6879      	ldr	r1, [r7, #4]
 800c5a6:	4828      	ldr	r0, [pc, #160]	; (800c648 <tcp_abandon+0x174>)
 800c5a8:	f001 fa24 	bl	800d9f4 <tcp_pcb_remove>
 800c5ac:	4b27      	ldr	r3, [pc, #156]	; (800c64c <tcp_abandon+0x178>)
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d004      	beq.n	800c5c4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f000 fed4 	bl	800d36c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d004      	beq.n	800c5d6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f000 fecb 	bl	800d36c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d004      	beq.n	800c5e8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f000 fec2 	bl	800d36c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00e      	beq.n	800c60c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c5ee:	6879      	ldr	r1, [r7, #4]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	3304      	adds	r3, #4
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	8b12      	ldrh	r2, [r2, #24]
 800c5f8:	9202      	str	r2, [sp, #8]
 800c5fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c5fc:	9201      	str	r2, [sp, #4]
 800c5fe:	9300      	str	r3, [sp, #0]
 800c600:	460b      	mov	r3, r1
 800c602:	697a      	ldr	r2, [r7, #20]
 800c604:	69b9      	ldr	r1, [r7, #24]
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f005 fbd2 	bl	8011db0 <tcp_rst>
    }
    last_state = pcb->state;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	7d1b      	ldrb	r3, [r3, #20]
 800c610:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f7ff fd3c 	bl	800c090 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d004      	beq.n	800c628 <tcp_abandon+0x154>
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	f06f 010c 	mvn.w	r1, #12
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	4798      	blx	r3
  }
}
 800c628:	3728      	adds	r7, #40	; 0x28
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	08016cbc 	.word	0x08016cbc
 800c634:	08016e00 	.word	0x08016e00
 800c638:	08016d00 	.word	0x08016d00
 800c63c:	08016e1c 	.word	0x08016e1c
 800c640:	2000b44c 	.word	0x2000b44c
 800c644:	2000b448 	.word	0x2000b448
 800c648:	2000b43c 	.word	0x2000b43c
 800c64c:	2000b438 	.word	0x2000b438

0800c650 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c658:	2101      	movs	r1, #1
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f7ff ff3a 	bl	800c4d4 <tcp_abandon>
}
 800c660:	bf00      	nop
 800c662:	3708      	adds	r7, #8
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b088      	sub	sp, #32
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	4613      	mov	r3, r2
 800c674:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c676:	2304      	movs	r3, #4
 800c678:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d101      	bne.n	800c684 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c680:	4b3e      	ldr	r3, [pc, #248]	; (800c77c <tcp_bind+0x114>)
 800c682:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d109      	bne.n	800c69e <tcp_bind+0x36>
 800c68a:	4b3d      	ldr	r3, [pc, #244]	; (800c780 <tcp_bind+0x118>)
 800c68c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c690:	493c      	ldr	r1, [pc, #240]	; (800c784 <tcp_bind+0x11c>)
 800c692:	483d      	ldr	r0, [pc, #244]	; (800c788 <tcp_bind+0x120>)
 800c694:	f008 fc96 	bl	8014fc4 <iprintf>
 800c698:	f06f 030f 	mvn.w	r3, #15
 800c69c:	e06a      	b.n	800c774 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	7d1b      	ldrb	r3, [r3, #20]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d009      	beq.n	800c6ba <tcp_bind+0x52>
 800c6a6:	4b36      	ldr	r3, [pc, #216]	; (800c780 <tcp_bind+0x118>)
 800c6a8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c6ac:	4937      	ldr	r1, [pc, #220]	; (800c78c <tcp_bind+0x124>)
 800c6ae:	4836      	ldr	r0, [pc, #216]	; (800c788 <tcp_bind+0x120>)
 800c6b0:	f008 fc88 	bl	8014fc4 <iprintf>
 800c6b4:	f06f 0305 	mvn.w	r3, #5
 800c6b8:	e05c      	b.n	800c774 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c6ba:	88fb      	ldrh	r3, [r7, #6]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d109      	bne.n	800c6d4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c6c0:	f000 f9f0 	bl	800caa4 <tcp_new_port>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c6c8:	88fb      	ldrh	r3, [r7, #6]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d135      	bne.n	800c73a <tcp_bind+0xd2>
      return ERR_BUF;
 800c6ce:	f06f 0301 	mvn.w	r3, #1
 800c6d2:	e04f      	b.n	800c774 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	61fb      	str	r3, [r7, #28]
 800c6d8:	e02b      	b.n	800c732 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c6da:	4a2d      	ldr	r2, [pc, #180]	; (800c790 <tcp_bind+0x128>)
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	61bb      	str	r3, [r7, #24]
 800c6e6:	e01e      	b.n	800c726 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	8adb      	ldrh	r3, [r3, #22]
 800c6ec:	88fa      	ldrh	r2, [r7, #6]
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	d116      	bne.n	800c720 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c6f2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d010      	beq.n	800c71a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00c      	beq.n	800c71a <tcp_bind+0xb2>
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d009      	beq.n	800c71a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d005      	beq.n	800c71a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c70e:	69bb      	ldr	r3, [r7, #24]
 800c710:	681a      	ldr	r2, [r3, #0]
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c716:	429a      	cmp	r2, r3
 800c718:	d102      	bne.n	800c720 <tcp_bind+0xb8>
              return ERR_USE;
 800c71a:	f06f 0307 	mvn.w	r3, #7
 800c71e:	e029      	b.n	800c774 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c720:	69bb      	ldr	r3, [r7, #24]
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	61bb      	str	r3, [r7, #24]
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d1dd      	bne.n	800c6e8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	3301      	adds	r3, #1
 800c730:	61fb      	str	r3, [r7, #28]
 800c732:	69fa      	ldr	r2, [r7, #28]
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	429a      	cmp	r2, r3
 800c738:	dbcf      	blt.n	800c6da <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d00c      	beq.n	800c75a <tcp_bind+0xf2>
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d008      	beq.n	800c75a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d002      	beq.n	800c754 <tcp_bind+0xec>
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	e000      	b.n	800c756 <tcp_bind+0xee>
 800c754:	2300      	movs	r3, #0
 800c756:	68fa      	ldr	r2, [r7, #12]
 800c758:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	88fa      	ldrh	r2, [r7, #6]
 800c75e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c760:	4b0c      	ldr	r3, [pc, #48]	; (800c794 <tcp_bind+0x12c>)
 800c762:	681a      	ldr	r2, [r3, #0]
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	60da      	str	r2, [r3, #12]
 800c768:	4a0a      	ldr	r2, [pc, #40]	; (800c794 <tcp_bind+0x12c>)
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	6013      	str	r3, [r2, #0]
 800c76e:	f005 fce1 	bl	8012134 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c772:	2300      	movs	r3, #0
}
 800c774:	4618      	mov	r0, r3
 800c776:	3720      	adds	r7, #32
 800c778:	46bd      	mov	sp, r7
 800c77a:	bd80      	pop	{r7, pc}
 800c77c:	08029838 	.word	0x08029838
 800c780:	08016cbc 	.word	0x08016cbc
 800c784:	08016e50 	.word	0x08016e50
 800c788:	08016d00 	.word	0x08016d00
 800c78c:	08016e68 	.word	0x08016e68
 800c790:	08029810 	.word	0x08029810
 800c794:	2000b448 	.word	0x2000b448

0800c798 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	4613      	mov	r3, r2
 800c7a4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d106      	bne.n	800c7ba <tcp_accept_null+0x22>
 800c7ac:	4b07      	ldr	r3, [pc, #28]	; (800c7cc <tcp_accept_null+0x34>)
 800c7ae:	f240 320f 	movw	r2, #783	; 0x30f
 800c7b2:	4907      	ldr	r1, [pc, #28]	; (800c7d0 <tcp_accept_null+0x38>)
 800c7b4:	4807      	ldr	r0, [pc, #28]	; (800c7d4 <tcp_accept_null+0x3c>)
 800c7b6:	f008 fc05 	bl	8014fc4 <iprintf>

  tcp_abort(pcb);
 800c7ba:	68b8      	ldr	r0, [r7, #8]
 800c7bc:	f7ff ff48 	bl	800c650 <tcp_abort>

  return ERR_ABRT;
 800c7c0:	f06f 030c 	mvn.w	r3, #12
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	08016cbc 	.word	0x08016cbc
 800c7d0:	08016e90 	.word	0x08016e90
 800c7d4:	08016d00 	.word	0x08016d00

0800c7d8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800c7e4:	78fb      	ldrb	r3, [r7, #3]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 f806 	bl	800c7fc <tcp_listen_with_backlog_and_err>
 800c7f0:	4603      	mov	r3, r0
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
	...

0800c7fc <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b088      	sub	sp, #32
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	460b      	mov	r3, r1
 800c806:	607a      	str	r2, [r7, #4]
 800c808:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c80a:	2300      	movs	r3, #0
 800c80c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d109      	bne.n	800c828 <tcp_listen_with_backlog_and_err+0x2c>
 800c814:	4b47      	ldr	r3, [pc, #284]	; (800c934 <tcp_listen_with_backlog_and_err+0x138>)
 800c816:	f240 3259 	movw	r2, #857	; 0x359
 800c81a:	4947      	ldr	r1, [pc, #284]	; (800c938 <tcp_listen_with_backlog_and_err+0x13c>)
 800c81c:	4847      	ldr	r0, [pc, #284]	; (800c93c <tcp_listen_with_backlog_and_err+0x140>)
 800c81e:	f008 fbd1 	bl	8014fc4 <iprintf>
 800c822:	23f0      	movs	r3, #240	; 0xf0
 800c824:	76fb      	strb	r3, [r7, #27]
 800c826:	e079      	b.n	800c91c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	7d1b      	ldrb	r3, [r3, #20]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d009      	beq.n	800c844 <tcp_listen_with_backlog_and_err+0x48>
 800c830:	4b40      	ldr	r3, [pc, #256]	; (800c934 <tcp_listen_with_backlog_and_err+0x138>)
 800c832:	f240 325a 	movw	r2, #858	; 0x35a
 800c836:	4942      	ldr	r1, [pc, #264]	; (800c940 <tcp_listen_with_backlog_and_err+0x144>)
 800c838:	4840      	ldr	r0, [pc, #256]	; (800c93c <tcp_listen_with_backlog_and_err+0x140>)
 800c83a:	f008 fbc3 	bl	8014fc4 <iprintf>
 800c83e:	23f1      	movs	r3, #241	; 0xf1
 800c840:	76fb      	strb	r3, [r7, #27]
 800c842:	e06b      	b.n	800c91c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	7d1b      	ldrb	r3, [r3, #20]
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d104      	bne.n	800c856 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c850:	23f7      	movs	r3, #247	; 0xf7
 800c852:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c854:	e062      	b.n	800c91c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c856:	2002      	movs	r0, #2
 800c858:	f7fe fa7c 	bl	800ad54 <memp_malloc>
 800c85c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c85e:	69fb      	ldr	r3, [r7, #28]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d102      	bne.n	800c86a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c864:	23ff      	movs	r3, #255	; 0xff
 800c866:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c868:	e058      	b.n	800c91c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	691a      	ldr	r2, [r3, #16]
 800c86e:	69fb      	ldr	r3, [r7, #28]
 800c870:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	8ada      	ldrh	r2, [r3, #22]
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c87a:	69fb      	ldr	r3, [r7, #28]
 800c87c:	2201      	movs	r2, #1
 800c87e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	7d5a      	ldrb	r2, [r3, #21]
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	7a5a      	ldrb	r2, [r3, #9]
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	2200      	movs	r2, #0
 800c894:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	7ada      	ldrb	r2, [r3, #11]
 800c89a:	69fb      	ldr	r3, [r7, #28]
 800c89c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	7a9a      	ldrb	r2, [r3, #10]
 800c8a2:	69fb      	ldr	r3, [r7, #28]
 800c8a4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	8adb      	ldrh	r3, [r3, #22]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d021      	beq.n	800c8fa <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c8b6:	4b23      	ldr	r3, [pc, #140]	; (800c944 <tcp_listen_with_backlog_and_err+0x148>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d105      	bne.n	800c8cc <tcp_listen_with_backlog_and_err+0xd0>
 800c8c0:	4b20      	ldr	r3, [pc, #128]	; (800c944 <tcp_listen_with_backlog_and_err+0x148>)
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	68db      	ldr	r3, [r3, #12]
 800c8c6:	4a1f      	ldr	r2, [pc, #124]	; (800c944 <tcp_listen_with_backlog_and_err+0x148>)
 800c8c8:	6013      	str	r3, [r2, #0]
 800c8ca:	e013      	b.n	800c8f4 <tcp_listen_with_backlog_and_err+0xf8>
 800c8cc:	4b1d      	ldr	r3, [pc, #116]	; (800c944 <tcp_listen_with_backlog_and_err+0x148>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	617b      	str	r3, [r7, #20]
 800c8d2:	e00c      	b.n	800c8ee <tcp_listen_with_backlog_and_err+0xf2>
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	68db      	ldr	r3, [r3, #12]
 800c8d8:	68fa      	ldr	r2, [r7, #12]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d104      	bne.n	800c8e8 <tcp_listen_with_backlog_and_err+0xec>
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	68da      	ldr	r2, [r3, #12]
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	60da      	str	r2, [r3, #12]
 800c8e6:	e005      	b.n	800c8f4 <tcp_listen_with_backlog_and_err+0xf8>
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	617b      	str	r3, [r7, #20]
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1ef      	bne.n	800c8d4 <tcp_listen_with_backlog_and_err+0xd8>
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c8fa:	68f8      	ldr	r0, [r7, #12]
 800c8fc:	f7ff fbc8 	bl	800c090 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c900:	69fb      	ldr	r3, [r7, #28]
 800c902:	4a11      	ldr	r2, [pc, #68]	; (800c948 <tcp_listen_with_backlog_and_err+0x14c>)
 800c904:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c906:	4b11      	ldr	r3, [pc, #68]	; (800c94c <tcp_listen_with_backlog_and_err+0x150>)
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	60da      	str	r2, [r3, #12]
 800c90e:	4a0f      	ldr	r2, [pc, #60]	; (800c94c <tcp_listen_with_backlog_and_err+0x150>)
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	6013      	str	r3, [r2, #0]
 800c914:	f005 fc0e 	bl	8012134 <tcp_timer_needed>
  res = ERR_OK;
 800c918:	2300      	movs	r3, #0
 800c91a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d002      	beq.n	800c928 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	7efa      	ldrb	r2, [r7, #27]
 800c926:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c928:	69fb      	ldr	r3, [r7, #28]
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3720      	adds	r7, #32
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	08016cbc 	.word	0x08016cbc
 800c938:	08016eb0 	.word	0x08016eb0
 800c93c:	08016d00 	.word	0x08016d00
 800c940:	08016ee0 	.word	0x08016ee0
 800c944:	2000b448 	.word	0x2000b448
 800c948:	0800c799 	.word	0x0800c799
 800c94c:	2000b444 	.word	0x2000b444

0800c950 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d106      	bne.n	800c96c <tcp_update_rcv_ann_wnd+0x1c>
 800c95e:	4b25      	ldr	r3, [pc, #148]	; (800c9f4 <tcp_update_rcv_ann_wnd+0xa4>)
 800c960:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c964:	4924      	ldr	r1, [pc, #144]	; (800c9f8 <tcp_update_rcv_ann_wnd+0xa8>)
 800c966:	4825      	ldr	r0, [pc, #148]	; (800c9fc <tcp_update_rcv_ann_wnd+0xac>)
 800c968:	f008 fb2c 	bl	8014fc4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c974:	4413      	add	r3, r2
 800c976:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c980:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c984:	bf28      	it	cs
 800c986:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c98a:	b292      	uxth	r2, r2
 800c98c:	4413      	add	r3, r2
 800c98e:	68fa      	ldr	r2, [r7, #12]
 800c990:	1ad3      	subs	r3, r2, r3
 800c992:	2b00      	cmp	r3, #0
 800c994:	db08      	blt.n	800c9a8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	1ad3      	subs	r3, r2, r3
 800c9a6:	e020      	b.n	800c9ea <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b0:	1ad3      	subs	r3, r2, r3
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	dd03      	ble.n	800c9be <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c9bc:	e014      	b.n	800c9e8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c6:	1ad3      	subs	r3, r2, r3
 800c9c8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9d0:	d306      	bcc.n	800c9e0 <tcp_update_rcv_ann_wnd+0x90>
 800c9d2:	4b08      	ldr	r3, [pc, #32]	; (800c9f4 <tcp_update_rcv_ann_wnd+0xa4>)
 800c9d4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c9d8:	4909      	ldr	r1, [pc, #36]	; (800ca00 <tcp_update_rcv_ann_wnd+0xb0>)
 800c9da:	4808      	ldr	r0, [pc, #32]	; (800c9fc <tcp_update_rcv_ann_wnd+0xac>)
 800c9dc:	f008 faf2 	bl	8014fc4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	b29a      	uxth	r2, r3
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c9e8:	2300      	movs	r3, #0
  }
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	08016cbc 	.word	0x08016cbc
 800c9f8:	08016f18 	.word	0x08016f18
 800c9fc:	08016d00 	.word	0x08016d00
 800ca00:	08016f3c 	.word	0x08016f3c

0800ca04 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d107      	bne.n	800ca26 <tcp_recved+0x22>
 800ca16:	4b1f      	ldr	r3, [pc, #124]	; (800ca94 <tcp_recved+0x90>)
 800ca18:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ca1c:	491e      	ldr	r1, [pc, #120]	; (800ca98 <tcp_recved+0x94>)
 800ca1e:	481f      	ldr	r0, [pc, #124]	; (800ca9c <tcp_recved+0x98>)
 800ca20:	f008 fad0 	bl	8014fc4 <iprintf>
 800ca24:	e032      	b.n	800ca8c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	7d1b      	ldrb	r3, [r3, #20]
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d106      	bne.n	800ca3c <tcp_recved+0x38>
 800ca2e:	4b19      	ldr	r3, [pc, #100]	; (800ca94 <tcp_recved+0x90>)
 800ca30:	f240 32d3 	movw	r2, #979	; 0x3d3
 800ca34:	491a      	ldr	r1, [pc, #104]	; (800caa0 <tcp_recved+0x9c>)
 800ca36:	4819      	ldr	r0, [pc, #100]	; (800ca9c <tcp_recved+0x98>)
 800ca38:	f008 fac4 	bl	8014fc4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ca40:	887b      	ldrh	r3, [r7, #2]
 800ca42:	4413      	add	r3, r2
 800ca44:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ca46:	89fb      	ldrh	r3, [r7, #14]
 800ca48:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ca4c:	d804      	bhi.n	800ca58 <tcp_recved+0x54>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca52:	89fa      	ldrh	r2, [r7, #14]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d204      	bcs.n	800ca62 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ca5e:	851a      	strh	r2, [r3, #40]	; 0x28
 800ca60:	e002      	b.n	800ca68 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	89fa      	ldrh	r2, [r7, #14]
 800ca66:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f7ff ff71 	bl	800c950 <tcp_update_rcv_ann_wnd>
 800ca6e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ca76:	d309      	bcc.n	800ca8c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	8b5b      	ldrh	r3, [r3, #26]
 800ca7c:	f043 0302 	orr.w	r3, r3, #2
 800ca80:	b29a      	uxth	r2, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f004 fbcc 	bl	8011224 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ca8c:	3710      	adds	r7, #16
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	08016cbc 	.word	0x08016cbc
 800ca98:	08016f58 	.word	0x08016f58
 800ca9c:	08016d00 	.word	0x08016d00
 800caa0:	08016f70 	.word	0x08016f70

0800caa4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800caaa:	2300      	movs	r3, #0
 800caac:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800caae:	4b1e      	ldr	r3, [pc, #120]	; (800cb28 <tcp_new_port+0x84>)
 800cab0:	881b      	ldrh	r3, [r3, #0]
 800cab2:	3301      	adds	r3, #1
 800cab4:	b29a      	uxth	r2, r3
 800cab6:	4b1c      	ldr	r3, [pc, #112]	; (800cb28 <tcp_new_port+0x84>)
 800cab8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800caba:	4b1b      	ldr	r3, [pc, #108]	; (800cb28 <tcp_new_port+0x84>)
 800cabc:	881b      	ldrh	r3, [r3, #0]
 800cabe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d103      	bne.n	800cace <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800cac6:	4b18      	ldr	r3, [pc, #96]	; (800cb28 <tcp_new_port+0x84>)
 800cac8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800cacc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cace:	2300      	movs	r3, #0
 800cad0:	71fb      	strb	r3, [r7, #7]
 800cad2:	e01e      	b.n	800cb12 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cad4:	79fb      	ldrb	r3, [r7, #7]
 800cad6:	4a15      	ldr	r2, [pc, #84]	; (800cb2c <tcp_new_port+0x88>)
 800cad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	603b      	str	r3, [r7, #0]
 800cae0:	e011      	b.n	800cb06 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	8ada      	ldrh	r2, [r3, #22]
 800cae6:	4b10      	ldr	r3, [pc, #64]	; (800cb28 <tcp_new_port+0x84>)
 800cae8:	881b      	ldrh	r3, [r3, #0]
 800caea:	429a      	cmp	r2, r3
 800caec:	d108      	bne.n	800cb00 <tcp_new_port+0x5c>
        n++;
 800caee:	88bb      	ldrh	r3, [r7, #4]
 800caf0:	3301      	adds	r3, #1
 800caf2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800caf4:	88bb      	ldrh	r3, [r7, #4]
 800caf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cafa:	d3d8      	bcc.n	800caae <tcp_new_port+0xa>
          return 0;
 800cafc:	2300      	movs	r3, #0
 800cafe:	e00d      	b.n	800cb1c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	68db      	ldr	r3, [r3, #12]
 800cb04:	603b      	str	r3, [r7, #0]
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1ea      	bne.n	800cae2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cb0c:	79fb      	ldrb	r3, [r7, #7]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	71fb      	strb	r3, [r7, #7]
 800cb12:	79fb      	ldrb	r3, [r7, #7]
 800cb14:	2b03      	cmp	r3, #3
 800cb16:	d9dd      	bls.n	800cad4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800cb18:	4b03      	ldr	r3, [pc, #12]	; (800cb28 <tcp_new_port+0x84>)
 800cb1a:	881b      	ldrh	r3, [r3, #0]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	370c      	adds	r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr
 800cb28:	20000010 	.word	0x20000010
 800cb2c:	08029810 	.word	0x08029810

0800cb30 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cb30:	b5b0      	push	{r4, r5, r7, lr}
 800cb32:	b090      	sub	sp, #64	; 0x40
 800cb34:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cb36:	2300      	movs	r3, #0
 800cb38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800cb3c:	4b94      	ldr	r3, [pc, #592]	; (800cd90 <tcp_slowtmr+0x260>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	3301      	adds	r3, #1
 800cb42:	4a93      	ldr	r2, [pc, #588]	; (800cd90 <tcp_slowtmr+0x260>)
 800cb44:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cb46:	4b93      	ldr	r3, [pc, #588]	; (800cd94 <tcp_slowtmr+0x264>)
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	b2da      	uxtb	r2, r3
 800cb4e:	4b91      	ldr	r3, [pc, #580]	; (800cd94 <tcp_slowtmr+0x264>)
 800cb50:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800cb52:	2300      	movs	r3, #0
 800cb54:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800cb56:	4b90      	ldr	r3, [pc, #576]	; (800cd98 <tcp_slowtmr+0x268>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800cb5c:	e29d      	b.n	800d09a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb60:	7d1b      	ldrb	r3, [r3, #20]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d106      	bne.n	800cb74 <tcp_slowtmr+0x44>
 800cb66:	4b8d      	ldr	r3, [pc, #564]	; (800cd9c <tcp_slowtmr+0x26c>)
 800cb68:	f240 42be 	movw	r2, #1214	; 0x4be
 800cb6c:	498c      	ldr	r1, [pc, #560]	; (800cda0 <tcp_slowtmr+0x270>)
 800cb6e:	488d      	ldr	r0, [pc, #564]	; (800cda4 <tcp_slowtmr+0x274>)
 800cb70:	f008 fa28 	bl	8014fc4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb76:	7d1b      	ldrb	r3, [r3, #20]
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	d106      	bne.n	800cb8a <tcp_slowtmr+0x5a>
 800cb7c:	4b87      	ldr	r3, [pc, #540]	; (800cd9c <tcp_slowtmr+0x26c>)
 800cb7e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800cb82:	4989      	ldr	r1, [pc, #548]	; (800cda8 <tcp_slowtmr+0x278>)
 800cb84:	4887      	ldr	r0, [pc, #540]	; (800cda4 <tcp_slowtmr+0x274>)
 800cb86:	f008 fa1d 	bl	8014fc4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8c:	7d1b      	ldrb	r3, [r3, #20]
 800cb8e:	2b0a      	cmp	r3, #10
 800cb90:	d106      	bne.n	800cba0 <tcp_slowtmr+0x70>
 800cb92:	4b82      	ldr	r3, [pc, #520]	; (800cd9c <tcp_slowtmr+0x26c>)
 800cb94:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800cb98:	4984      	ldr	r1, [pc, #528]	; (800cdac <tcp_slowtmr+0x27c>)
 800cb9a:	4882      	ldr	r0, [pc, #520]	; (800cda4 <tcp_slowtmr+0x274>)
 800cb9c:	f008 fa12 	bl	8014fc4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800cba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba2:	7f9a      	ldrb	r2, [r3, #30]
 800cba4:	4b7b      	ldr	r3, [pc, #492]	; (800cd94 <tcp_slowtmr+0x264>)
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d105      	bne.n	800cbb8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800cbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb2:	68db      	ldr	r3, [r3, #12]
 800cbb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800cbb6:	e270      	b.n	800d09a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800cbb8:	4b76      	ldr	r3, [pc, #472]	; (800cd94 <tcp_slowtmr+0x264>)
 800cbba:	781a      	ldrb	r2, [r3, #0]
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800cbcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbce:	7d1b      	ldrb	r3, [r3, #20]
 800cbd0:	2b02      	cmp	r3, #2
 800cbd2:	d10a      	bne.n	800cbea <tcp_slowtmr+0xba>
 800cbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cbda:	2b05      	cmp	r3, #5
 800cbdc:	d905      	bls.n	800cbea <tcp_slowtmr+0xba>
      ++pcb_remove;
 800cbde:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cbe8:	e11e      	b.n	800ce28 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800cbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cbf0:	2b0b      	cmp	r3, #11
 800cbf2:	d905      	bls.n	800cc00 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800cbf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cbfe:	e113      	b.n	800ce28 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800cc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc02:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d075      	beq.n	800ccf6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800cc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d006      	beq.n	800cc20 <tcp_slowtmr+0xf0>
 800cc12:	4b62      	ldr	r3, [pc, #392]	; (800cd9c <tcp_slowtmr+0x26c>)
 800cc14:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cc18:	4965      	ldr	r1, [pc, #404]	; (800cdb0 <tcp_slowtmr+0x280>)
 800cc1a:	4862      	ldr	r0, [pc, #392]	; (800cda4 <tcp_slowtmr+0x274>)
 800cc1c:	f008 f9d2 	bl	8014fc4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d106      	bne.n	800cc36 <tcp_slowtmr+0x106>
 800cc28:	4b5c      	ldr	r3, [pc, #368]	; (800cd9c <tcp_slowtmr+0x26c>)
 800cc2a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cc2e:	4961      	ldr	r1, [pc, #388]	; (800cdb4 <tcp_slowtmr+0x284>)
 800cc30:	485c      	ldr	r0, [pc, #368]	; (800cda4 <tcp_slowtmr+0x274>)
 800cc32:	f008 f9c7 	bl	8014fc4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc38:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cc3c:	2b0b      	cmp	r3, #11
 800cc3e:	d905      	bls.n	800cc4c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cc40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc44:	3301      	adds	r3, #1
 800cc46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc4a:	e0ed      	b.n	800ce28 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cc52:	3b01      	subs	r3, #1
 800cc54:	4a58      	ldr	r2, [pc, #352]	; (800cdb8 <tcp_slowtmr+0x288>)
 800cc56:	5cd3      	ldrb	r3, [r2, r3]
 800cc58:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cc60:	7c7a      	ldrb	r2, [r7, #17]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d907      	bls.n	800cc76 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cc66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	b2da      	uxtb	r2, r3
 800cc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc72:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cc7c:	7c7a      	ldrb	r2, [r7, #17]
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	f200 80d2 	bhi.w	800ce28 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cc84:	2301      	movs	r3, #1
 800cc86:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d108      	bne.n	800cca4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cc92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc94:	f005 f980 	bl	8011f98 <tcp_zero_window_probe>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d014      	beq.n	800ccc8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800cc9e:	2300      	movs	r3, #0
 800cca0:	623b      	str	r3, [r7, #32]
 800cca2:	e011      	b.n	800ccc8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ccaa:	4619      	mov	r1, r3
 800ccac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccae:	f004 f833 	bl	8010d18 <tcp_split_unsent_seg>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d107      	bne.n	800ccc8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ccb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccba:	f004 fab3 	bl	8011224 <tcp_output>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d101      	bne.n	800ccc8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ccc8:	6a3b      	ldr	r3, [r7, #32]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	f000 80ac 	beq.w	800ce28 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ccd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ccd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccda:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ccde:	2b06      	cmp	r3, #6
 800cce0:	f200 80a2 	bhi.w	800ce28 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ccea:	3301      	adds	r3, #1
 800ccec:	b2da      	uxtb	r2, r3
 800ccee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ccf4:	e098      	b.n	800ce28 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ccf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	db0f      	blt.n	800cd20 <tcp_slowtmr+0x1f0>
 800cd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd02:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd06:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d008      	beq.n	800cd20 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd10:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	3301      	adds	r3, #1
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	b21a      	sxth	r2, r3
 800cd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd22:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd28:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	db7b      	blt.n	800ce28 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cd30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd32:	f004 fd6f 	bl	8011814 <tcp_rexmit_rto_prepare>
 800cd36:	4603      	mov	r3, r0
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d007      	beq.n	800cd4c <tcp_slowtmr+0x21c>
 800cd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d171      	bne.n	800ce28 <tcp_slowtmr+0x2f8>
 800cd44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d06d      	beq.n	800ce28 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cd4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4e:	7d1b      	ldrb	r3, [r3, #20]
 800cd50:	2b02      	cmp	r3, #2
 800cd52:	d03a      	beq.n	800cdca <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cd5a:	2b0c      	cmp	r3, #12
 800cd5c:	bf28      	it	cs
 800cd5e:	230c      	movcs	r3, #12
 800cd60:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd64:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cd68:	10db      	asrs	r3, r3, #3
 800cd6a:	b21b      	sxth	r3, r3
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd70:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cd74:	4413      	add	r3, r2
 800cd76:	7efa      	ldrb	r2, [r7, #27]
 800cd78:	4910      	ldr	r1, [pc, #64]	; (800cdbc <tcp_slowtmr+0x28c>)
 800cd7a:	5c8a      	ldrb	r2, [r1, r2]
 800cd7c:	4093      	lsls	r3, r2
 800cd7e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cd86:	4293      	cmp	r3, r2
 800cd88:	dc1a      	bgt.n	800cdc0 <tcp_slowtmr+0x290>
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	b21a      	sxth	r2, r3
 800cd8e:	e019      	b.n	800cdc4 <tcp_slowtmr+0x294>
 800cd90:	2000b440 	.word	0x2000b440
 800cd94:	200044e2 	.word	0x200044e2
 800cd98:	2000b43c 	.word	0x2000b43c
 800cd9c:	08016cbc 	.word	0x08016cbc
 800cda0:	08017000 	.word	0x08017000
 800cda4:	08016d00 	.word	0x08016d00
 800cda8:	0801702c 	.word	0x0801702c
 800cdac:	08017058 	.word	0x08017058
 800cdb0:	08017088 	.word	0x08017088
 800cdb4:	080170bc 	.word	0x080170bc
 800cdb8:	08029808 	.word	0x08029808
 800cdbc:	080297f8 	.word	0x080297f8
 800cdc0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800cdca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdcc:	2200      	movs	r2, #0
 800cdce:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cddc:	4293      	cmp	r3, r2
 800cdde:	bf28      	it	cs
 800cde0:	4613      	movcs	r3, r2
 800cde2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cde4:	8a7b      	ldrh	r3, [r7, #18]
 800cde6:	085b      	lsrs	r3, r3, #1
 800cde8:	b29a      	uxth	r2, r3
 800cdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cdfa:	005b      	lsls	r3, r3, #1
 800cdfc:	b29b      	uxth	r3, r3
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d206      	bcs.n	800ce10 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ce02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ce06:	005b      	lsls	r3, r3, #1
 800ce08:	b29a      	uxth	r2, r3
 800ce0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ce10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce12:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ce14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ce1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ce22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce24:	f004 fd66 	bl	80118f4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ce28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2a:	7d1b      	ldrb	r3, [r3, #20]
 800ce2c:	2b06      	cmp	r3, #6
 800ce2e:	d111      	bne.n	800ce54 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ce30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce32:	8b5b      	ldrh	r3, [r3, #26]
 800ce34:	f003 0310 	and.w	r3, r3, #16
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d00b      	beq.n	800ce54 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce3c:	4b9c      	ldr	r3, [pc, #624]	; (800d0b0 <tcp_slowtmr+0x580>)
 800ce3e:	681a      	ldr	r2, [r3, #0]
 800ce40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce42:	6a1b      	ldr	r3, [r3, #32]
 800ce44:	1ad3      	subs	r3, r2, r3
 800ce46:	2b28      	cmp	r3, #40	; 0x28
 800ce48:	d904      	bls.n	800ce54 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ce4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce4e:	3301      	adds	r3, #1
 800ce50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ce54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce56:	7a5b      	ldrb	r3, [r3, #9]
 800ce58:	f003 0308 	and.w	r3, r3, #8
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d04a      	beq.n	800cef6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800ce60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce62:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ce64:	2b04      	cmp	r3, #4
 800ce66:	d003      	beq.n	800ce70 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ce6c:	2b07      	cmp	r3, #7
 800ce6e:	d142      	bne.n	800cef6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce70:	4b8f      	ldr	r3, [pc, #572]	; (800d0b0 <tcp_slowtmr+0x580>)
 800ce72:	681a      	ldr	r2, [r3, #0]
 800ce74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce76:	6a1b      	ldr	r3, [r3, #32]
 800ce78:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ce7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ce80:	4b8c      	ldr	r3, [pc, #560]	; (800d0b4 <tcp_slowtmr+0x584>)
 800ce82:	440b      	add	r3, r1
 800ce84:	498c      	ldr	r1, [pc, #560]	; (800d0b8 <tcp_slowtmr+0x588>)
 800ce86:	fba1 1303 	umull	r1, r3, r1, r3
 800ce8a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d90a      	bls.n	800cea6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ce90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce94:	3301      	adds	r3, #1
 800ce96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ce9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce9e:	3301      	adds	r3, #1
 800cea0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cea4:	e027      	b.n	800cef6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cea6:	4b82      	ldr	r3, [pc, #520]	; (800d0b0 <tcp_slowtmr+0x580>)
 800cea8:	681a      	ldr	r2, [r3, #0]
 800ceaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceac:	6a1b      	ldr	r3, [r3, #32]
 800ceae:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ceb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ceb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cebc:	4618      	mov	r0, r3
 800cebe:	4b7f      	ldr	r3, [pc, #508]	; (800d0bc <tcp_slowtmr+0x58c>)
 800cec0:	fb03 f300 	mul.w	r3, r3, r0
 800cec4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cec6:	497c      	ldr	r1, [pc, #496]	; (800d0b8 <tcp_slowtmr+0x588>)
 800cec8:	fba1 1303 	umull	r1, r3, r1, r3
 800cecc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cece:	429a      	cmp	r2, r3
 800ced0:	d911      	bls.n	800cef6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800ced2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ced4:	f005 f820 	bl	8011f18 <tcp_keepalive>
 800ced8:	4603      	mov	r3, r0
 800ceda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cede:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d107      	bne.n	800cef6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800cee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ceec:	3301      	adds	r3, #1
 800ceee:	b2da      	uxtb	r2, r3
 800cef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d011      	beq.n	800cf22 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cefe:	4b6c      	ldr	r3, [pc, #432]	; (800d0b0 <tcp_slowtmr+0x580>)
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf04:	6a1b      	ldr	r3, [r3, #32]
 800cf06:	1ad2      	subs	r2, r2, r3
 800cf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cf0e:	4619      	mov	r1, r3
 800cf10:	460b      	mov	r3, r1
 800cf12:	005b      	lsls	r3, r3, #1
 800cf14:	440b      	add	r3, r1
 800cf16:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d302      	bcc.n	800cf22 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cf1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf1e:	f000 fecd 	bl	800dcbc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800cf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf24:	7d1b      	ldrb	r3, [r3, #20]
 800cf26:	2b03      	cmp	r3, #3
 800cf28:	d10b      	bne.n	800cf42 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cf2a:	4b61      	ldr	r3, [pc, #388]	; (800d0b0 <tcp_slowtmr+0x580>)
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf30:	6a1b      	ldr	r3, [r3, #32]
 800cf32:	1ad3      	subs	r3, r2, r3
 800cf34:	2b28      	cmp	r3, #40	; 0x28
 800cf36:	d904      	bls.n	800cf42 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cf38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf44:	7d1b      	ldrb	r3, [r3, #20]
 800cf46:	2b09      	cmp	r3, #9
 800cf48:	d10b      	bne.n	800cf62 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cf4a:	4b59      	ldr	r3, [pc, #356]	; (800d0b0 <tcp_slowtmr+0x580>)
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf50:	6a1b      	ldr	r3, [r3, #32]
 800cf52:	1ad3      	subs	r3, r2, r3
 800cf54:	2bf0      	cmp	r3, #240	; 0xf0
 800cf56:	d904      	bls.n	800cf62 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800cf58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf5c:	3301      	adds	r3, #1
 800cf5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cf62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d060      	beq.n	800d02c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf70:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cf72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf74:	f000 fcee 	bl	800d954 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d010      	beq.n	800cfa0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cf7e:	4b50      	ldr	r3, [pc, #320]	; (800d0c0 <tcp_slowtmr+0x590>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d106      	bne.n	800cf96 <tcp_slowtmr+0x466>
 800cf88:	4b4e      	ldr	r3, [pc, #312]	; (800d0c4 <tcp_slowtmr+0x594>)
 800cf8a:	f240 526d 	movw	r2, #1389	; 0x56d
 800cf8e:	494e      	ldr	r1, [pc, #312]	; (800d0c8 <tcp_slowtmr+0x598>)
 800cf90:	484e      	ldr	r0, [pc, #312]	; (800d0cc <tcp_slowtmr+0x59c>)
 800cf92:	f008 f817 	bl	8014fc4 <iprintf>
        prev->next = pcb->next;
 800cf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf98:	68da      	ldr	r2, [r3, #12]
 800cf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9c:	60da      	str	r2, [r3, #12]
 800cf9e:	e00f      	b.n	800cfc0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cfa0:	4b47      	ldr	r3, [pc, #284]	; (800d0c0 <tcp_slowtmr+0x590>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d006      	beq.n	800cfb8 <tcp_slowtmr+0x488>
 800cfaa:	4b46      	ldr	r3, [pc, #280]	; (800d0c4 <tcp_slowtmr+0x594>)
 800cfac:	f240 5271 	movw	r2, #1393	; 0x571
 800cfb0:	4947      	ldr	r1, [pc, #284]	; (800d0d0 <tcp_slowtmr+0x5a0>)
 800cfb2:	4846      	ldr	r0, [pc, #280]	; (800d0cc <tcp_slowtmr+0x59c>)
 800cfb4:	f008 f806 	bl	8014fc4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cfb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfba:	68db      	ldr	r3, [r3, #12]
 800cfbc:	4a40      	ldr	r2, [pc, #256]	; (800d0c0 <tcp_slowtmr+0x590>)
 800cfbe:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cfc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d013      	beq.n	800cff0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cfd0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd4:	3304      	adds	r3, #4
 800cfd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfd8:	8ad2      	ldrh	r2, [r2, #22]
 800cfda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cfdc:	8b09      	ldrh	r1, [r1, #24]
 800cfde:	9102      	str	r1, [sp, #8]
 800cfe0:	9201      	str	r2, [sp, #4]
 800cfe2:	9300      	str	r3, [sp, #0]
 800cfe4:	462b      	mov	r3, r5
 800cfe6:	4622      	mov	r2, r4
 800cfe8:	4601      	mov	r1, r0
 800cfea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfec:	f004 fee0 	bl	8011db0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800cff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff2:	691b      	ldr	r3, [r3, #16]
 800cff4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800cff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff8:	7d1b      	ldrb	r3, [r3, #20]
 800cffa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800cffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d002:	68db      	ldr	r3, [r3, #12]
 800d004:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d006:	6838      	ldr	r0, [r7, #0]
 800d008:	f7ff f842 	bl	800c090 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d00c:	4b31      	ldr	r3, [pc, #196]	; (800d0d4 <tcp_slowtmr+0x5a4>)
 800d00e:	2200      	movs	r2, #0
 800d010:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d004      	beq.n	800d022 <tcp_slowtmr+0x4f2>
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f06f 010c 	mvn.w	r1, #12
 800d01e:	68b8      	ldr	r0, [r7, #8]
 800d020:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d022:	4b2c      	ldr	r3, [pc, #176]	; (800d0d4 <tcp_slowtmr+0x5a4>)
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d037      	beq.n	800d09a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d02a:	e592      	b.n	800cb52 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d038:	7f1b      	ldrb	r3, [r3, #28]
 800d03a:	3301      	adds	r3, #1
 800d03c:	b2da      	uxtb	r2, r3
 800d03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d040:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d044:	7f1a      	ldrb	r2, [r3, #28]
 800d046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d048:	7f5b      	ldrb	r3, [r3, #29]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d325      	bcc.n	800d09a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d050:	2200      	movs	r2, #0
 800d052:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d054:	4b1f      	ldr	r3, [pc, #124]	; (800d0d4 <tcp_slowtmr+0x5a4>)
 800d056:	2200      	movs	r2, #0
 800d058:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00b      	beq.n	800d07c <tcp_slowtmr+0x54c>
 800d064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d066:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d06a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d06c:	6912      	ldr	r2, [r2, #16]
 800d06e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d070:	4610      	mov	r0, r2
 800d072:	4798      	blx	r3
 800d074:	4603      	mov	r3, r0
 800d076:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d07a:	e002      	b.n	800d082 <tcp_slowtmr+0x552>
 800d07c:	2300      	movs	r3, #0
 800d07e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d082:	4b14      	ldr	r3, [pc, #80]	; (800d0d4 <tcp_slowtmr+0x5a4>)
 800d084:	781b      	ldrb	r3, [r3, #0]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d000      	beq.n	800d08c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d08a:	e562      	b.n	800cb52 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d08c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d090:	2b00      	cmp	r3, #0
 800d092:	d102      	bne.n	800d09a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d096:	f004 f8c5 	bl	8011224 <tcp_output>
  while (pcb != NULL) {
 800d09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	f47f ad5e 	bne.w	800cb5e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d0a6:	4b0c      	ldr	r3, [pc, #48]	; (800d0d8 <tcp_slowtmr+0x5a8>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d0ac:	e069      	b.n	800d182 <tcp_slowtmr+0x652>
 800d0ae:	bf00      	nop
 800d0b0:	2000b440 	.word	0x2000b440
 800d0b4:	000a4cb8 	.word	0x000a4cb8
 800d0b8:	10624dd3 	.word	0x10624dd3
 800d0bc:	000124f8 	.word	0x000124f8
 800d0c0:	2000b43c 	.word	0x2000b43c
 800d0c4:	08016cbc 	.word	0x08016cbc
 800d0c8:	080170f4 	.word	0x080170f4
 800d0cc:	08016d00 	.word	0x08016d00
 800d0d0:	08017120 	.word	0x08017120
 800d0d4:	2000b438 	.word	0x2000b438
 800d0d8:	2000b44c 	.word	0x2000b44c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0de:	7d1b      	ldrb	r3, [r3, #20]
 800d0e0:	2b0a      	cmp	r3, #10
 800d0e2:	d006      	beq.n	800d0f2 <tcp_slowtmr+0x5c2>
 800d0e4:	4b2a      	ldr	r3, [pc, #168]	; (800d190 <tcp_slowtmr+0x660>)
 800d0e6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d0ea:	492a      	ldr	r1, [pc, #168]	; (800d194 <tcp_slowtmr+0x664>)
 800d0ec:	482a      	ldr	r0, [pc, #168]	; (800d198 <tcp_slowtmr+0x668>)
 800d0ee:	f007 ff69 	bl	8014fc4 <iprintf>
    pcb_remove = 0;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d0f8:	4b28      	ldr	r3, [pc, #160]	; (800d19c <tcp_slowtmr+0x66c>)
 800d0fa:	681a      	ldr	r2, [r3, #0]
 800d0fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fe:	6a1b      	ldr	r3, [r3, #32]
 800d100:	1ad3      	subs	r3, r2, r3
 800d102:	2bf0      	cmp	r3, #240	; 0xf0
 800d104:	d904      	bls.n	800d110 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d10a:	3301      	adds	r3, #1
 800d10c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d114:	2b00      	cmp	r3, #0
 800d116:	d02f      	beq.n	800d178 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d118:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d11a:	f000 fc1b 	bl	800d954 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d120:	2b00      	cmp	r3, #0
 800d122:	d010      	beq.n	800d146 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d124:	4b1e      	ldr	r3, [pc, #120]	; (800d1a0 <tcp_slowtmr+0x670>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d106      	bne.n	800d13c <tcp_slowtmr+0x60c>
 800d12e:	4b18      	ldr	r3, [pc, #96]	; (800d190 <tcp_slowtmr+0x660>)
 800d130:	f240 52af 	movw	r2, #1455	; 0x5af
 800d134:	491b      	ldr	r1, [pc, #108]	; (800d1a4 <tcp_slowtmr+0x674>)
 800d136:	4818      	ldr	r0, [pc, #96]	; (800d198 <tcp_slowtmr+0x668>)
 800d138:	f007 ff44 	bl	8014fc4 <iprintf>
        prev->next = pcb->next;
 800d13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d13e:	68da      	ldr	r2, [r3, #12]
 800d140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d142:	60da      	str	r2, [r3, #12]
 800d144:	e00f      	b.n	800d166 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d146:	4b16      	ldr	r3, [pc, #88]	; (800d1a0 <tcp_slowtmr+0x670>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d006      	beq.n	800d15e <tcp_slowtmr+0x62e>
 800d150:	4b0f      	ldr	r3, [pc, #60]	; (800d190 <tcp_slowtmr+0x660>)
 800d152:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d156:	4914      	ldr	r1, [pc, #80]	; (800d1a8 <tcp_slowtmr+0x678>)
 800d158:	480f      	ldr	r0, [pc, #60]	; (800d198 <tcp_slowtmr+0x668>)
 800d15a:	f007 ff33 	bl	8014fc4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d160:	68db      	ldr	r3, [r3, #12]
 800d162:	4a0f      	ldr	r2, [pc, #60]	; (800d1a0 <tcp_slowtmr+0x670>)
 800d164:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d168:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d170:	69f8      	ldr	r0, [r7, #28]
 800d172:	f7fe ff8d 	bl	800c090 <tcp_free>
 800d176:	e004      	b.n	800d182 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d184:	2b00      	cmp	r3, #0
 800d186:	d1a9      	bne.n	800d0dc <tcp_slowtmr+0x5ac>
    }
  }
}
 800d188:	bf00      	nop
 800d18a:	3730      	adds	r7, #48	; 0x30
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bdb0      	pop	{r4, r5, r7, pc}
 800d190:	08016cbc 	.word	0x08016cbc
 800d194:	0801714c 	.word	0x0801714c
 800d198:	08016d00 	.word	0x08016d00
 800d19c:	2000b440 	.word	0x2000b440
 800d1a0:	2000b44c 	.word	0x2000b44c
 800d1a4:	0801717c 	.word	0x0801717c
 800d1a8:	080171a4 	.word	0x080171a4

0800d1ac <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d1b2:	4b2d      	ldr	r3, [pc, #180]	; (800d268 <tcp_fasttmr+0xbc>)
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	b2da      	uxtb	r2, r3
 800d1ba:	4b2b      	ldr	r3, [pc, #172]	; (800d268 <tcp_fasttmr+0xbc>)
 800d1bc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d1be:	4b2b      	ldr	r3, [pc, #172]	; (800d26c <tcp_fasttmr+0xc0>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d1c4:	e048      	b.n	800d258 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	7f9a      	ldrb	r2, [r3, #30]
 800d1ca:	4b27      	ldr	r3, [pc, #156]	; (800d268 <tcp_fasttmr+0xbc>)
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	429a      	cmp	r2, r3
 800d1d0:	d03f      	beq.n	800d252 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d1d2:	4b25      	ldr	r3, [pc, #148]	; (800d268 <tcp_fasttmr+0xbc>)
 800d1d4:	781a      	ldrb	r2, [r3, #0]
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	8b5b      	ldrh	r3, [r3, #26]
 800d1de:	f003 0301 	and.w	r3, r3, #1
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d010      	beq.n	800d208 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	8b5b      	ldrh	r3, [r3, #26]
 800d1ea:	f043 0302 	orr.w	r3, r3, #2
 800d1ee:	b29a      	uxth	r2, r3
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f004 f815 	bl	8011224 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	8b5b      	ldrh	r3, [r3, #26]
 800d1fe:	f023 0303 	bic.w	r3, r3, #3
 800d202:	b29a      	uxth	r2, r3
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	8b5b      	ldrh	r3, [r3, #26]
 800d20c:	f003 0308 	and.w	r3, r3, #8
 800d210:	2b00      	cmp	r3, #0
 800d212:	d009      	beq.n	800d228 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	8b5b      	ldrh	r3, [r3, #26]
 800d218:	f023 0308 	bic.w	r3, r3, #8
 800d21c:	b29a      	uxth	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f7ff f8c4 	bl	800c3b0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d232:	2b00      	cmp	r3, #0
 800d234:	d00a      	beq.n	800d24c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d236:	4b0e      	ldr	r3, [pc, #56]	; (800d270 <tcp_fasttmr+0xc4>)
 800d238:	2200      	movs	r2, #0
 800d23a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 f819 	bl	800d274 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d242:	4b0b      	ldr	r3, [pc, #44]	; (800d270 <tcp_fasttmr+0xc4>)
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d000      	beq.n	800d24c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d24a:	e7b8      	b.n	800d1be <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d24c:	683b      	ldr	r3, [r7, #0]
 800d24e:	607b      	str	r3, [r7, #4]
 800d250:	e002      	b.n	800d258 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d1b3      	bne.n	800d1c6 <tcp_fasttmr+0x1a>
    }
  }
}
 800d25e:	bf00      	nop
 800d260:	3708      	adds	r7, #8
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	200044e2 	.word	0x200044e2
 800d26c:	2000b43c 	.word	0x2000b43c
 800d270:	2000b438 	.word	0x2000b438

0800d274 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d274:	b590      	push	{r4, r7, lr}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d109      	bne.n	800d296 <tcp_process_refused_data+0x22>
 800d282:	4b37      	ldr	r3, [pc, #220]	; (800d360 <tcp_process_refused_data+0xec>)
 800d284:	f240 6209 	movw	r2, #1545	; 0x609
 800d288:	4936      	ldr	r1, [pc, #216]	; (800d364 <tcp_process_refused_data+0xf0>)
 800d28a:	4837      	ldr	r0, [pc, #220]	; (800d368 <tcp_process_refused_data+0xf4>)
 800d28c:	f007 fe9a 	bl	8014fc4 <iprintf>
 800d290:	f06f 030f 	mvn.w	r3, #15
 800d294:	e060      	b.n	800d358 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d29a:	7b5b      	ldrb	r3, [r3, #13]
 800d29c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2a2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d00b      	beq.n	800d2cc <tcp_process_refused_data+0x58>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6918      	ldr	r0, [r3, #16]
 800d2be:	2300      	movs	r3, #0
 800d2c0:	68ba      	ldr	r2, [r7, #8]
 800d2c2:	6879      	ldr	r1, [r7, #4]
 800d2c4:	47a0      	blx	r4
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	73fb      	strb	r3, [r7, #15]
 800d2ca:	e007      	b.n	800d2dc <tcp_process_refused_data+0x68>
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	68ba      	ldr	r2, [r7, #8]
 800d2d0:	6879      	ldr	r1, [r7, #4]
 800d2d2:	2000      	movs	r0, #0
 800d2d4:	f000 f8c0 	bl	800d458 <tcp_recv_null>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d2dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d12a      	bne.n	800d33a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d2e4:	7bbb      	ldrb	r3, [r7, #14]
 800d2e6:	f003 0320 	and.w	r3, r3, #32
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d033      	beq.n	800d356 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2f2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d2f6:	d005      	beq.n	800d304 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	b29a      	uxth	r2, r3
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00b      	beq.n	800d326 <tcp_process_refused_data+0xb2>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6918      	ldr	r0, [r3, #16]
 800d318:	2300      	movs	r3, #0
 800d31a:	2200      	movs	r2, #0
 800d31c:	6879      	ldr	r1, [r7, #4]
 800d31e:	47a0      	blx	r4
 800d320:	4603      	mov	r3, r0
 800d322:	73fb      	strb	r3, [r7, #15]
 800d324:	e001      	b.n	800d32a <tcp_process_refused_data+0xb6>
 800d326:	2300      	movs	r3, #0
 800d328:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d32a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d32e:	f113 0f0d 	cmn.w	r3, #13
 800d332:	d110      	bne.n	800d356 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d334:	f06f 030c 	mvn.w	r3, #12
 800d338:	e00e      	b.n	800d358 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d33a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d33e:	f113 0f0d 	cmn.w	r3, #13
 800d342:	d102      	bne.n	800d34a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d344:	f06f 030c 	mvn.w	r3, #12
 800d348:	e006      	b.n	800d358 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	68ba      	ldr	r2, [r7, #8]
 800d34e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d350:	f06f 0304 	mvn.w	r3, #4
 800d354:	e000      	b.n	800d358 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d356:	2300      	movs	r3, #0
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3714      	adds	r7, #20
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd90      	pop	{r4, r7, pc}
 800d360:	08016cbc 	.word	0x08016cbc
 800d364:	080171cc 	.word	0x080171cc
 800d368:	08016d00 	.word	0x08016d00

0800d36c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d374:	e007      	b.n	800d386 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f000 f809 	bl	800d394 <tcp_seg_free>
    seg = next;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1f4      	bne.n	800d376 <tcp_segs_free+0xa>
  }
}
 800d38c:	bf00      	nop
 800d38e:	3710      	adds	r7, #16
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d00c      	beq.n	800d3bc <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d004      	beq.n	800d3b4 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	685b      	ldr	r3, [r3, #4]
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7fe fbc2 	bl	800bb38 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d3b4:	6879      	ldr	r1, [r7, #4]
 800d3b6:	2003      	movs	r0, #3
 800d3b8:	f7fd fd1e 	bl	800adf8 <memp_free>
  }
}
 800d3bc:	bf00      	nop
 800d3be:	3708      	adds	r7, #8
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d107      	bne.n	800d3e6 <tcp_setprio+0x22>
 800d3d6:	4b07      	ldr	r3, [pc, #28]	; (800d3f4 <tcp_setprio+0x30>)
 800d3d8:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800d3dc:	4906      	ldr	r1, [pc, #24]	; (800d3f8 <tcp_setprio+0x34>)
 800d3de:	4807      	ldr	r0, [pc, #28]	; (800d3fc <tcp_setprio+0x38>)
 800d3e0:	f007 fdf0 	bl	8014fc4 <iprintf>
 800d3e4:	e002      	b.n	800d3ec <tcp_setprio+0x28>

  pcb->prio = prio;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	78fa      	ldrb	r2, [r7, #3]
 800d3ea:	755a      	strb	r2, [r3, #21]
}
 800d3ec:	3708      	adds	r7, #8
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}
 800d3f2:	bf00      	nop
 800d3f4:	08016cbc 	.word	0x08016cbc
 800d3f8:	080171f4 	.word	0x080171f4
 800d3fc:	08016d00 	.word	0x08016d00

0800d400 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b084      	sub	sp, #16
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d106      	bne.n	800d41c <tcp_seg_copy+0x1c>
 800d40e:	4b0f      	ldr	r3, [pc, #60]	; (800d44c <tcp_seg_copy+0x4c>)
 800d410:	f240 6282 	movw	r2, #1666	; 0x682
 800d414:	490e      	ldr	r1, [pc, #56]	; (800d450 <tcp_seg_copy+0x50>)
 800d416:	480f      	ldr	r0, [pc, #60]	; (800d454 <tcp_seg_copy+0x54>)
 800d418:	f007 fdd4 	bl	8014fc4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d41c:	2003      	movs	r0, #3
 800d41e:	f7fd fc99 	bl	800ad54 <memp_malloc>
 800d422:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d101      	bne.n	800d42e <tcp_seg_copy+0x2e>
    return NULL;
 800d42a:	2300      	movs	r3, #0
 800d42c:	e00a      	b.n	800d444 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d42e:	2210      	movs	r2, #16
 800d430:	6879      	ldr	r1, [r7, #4]
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f007 fdb3 	bl	8014f9e <memcpy>
  pbuf_ref(cseg->p);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	4618      	mov	r0, r3
 800d43e:	f7fe fc21 	bl	800bc84 <pbuf_ref>
  return cseg;
 800d442:	68fb      	ldr	r3, [r7, #12]
}
 800d444:	4618      	mov	r0, r3
 800d446:	3710      	adds	r7, #16
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	08016cbc 	.word	0x08016cbc
 800d450:	08017210 	.word	0x08017210
 800d454:	08016d00 	.word	0x08016d00

0800d458 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b084      	sub	sp, #16
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	60f8      	str	r0, [r7, #12]
 800d460:	60b9      	str	r1, [r7, #8]
 800d462:	607a      	str	r2, [r7, #4]
 800d464:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d109      	bne.n	800d480 <tcp_recv_null+0x28>
 800d46c:	4b12      	ldr	r3, [pc, #72]	; (800d4b8 <tcp_recv_null+0x60>)
 800d46e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d472:	4912      	ldr	r1, [pc, #72]	; (800d4bc <tcp_recv_null+0x64>)
 800d474:	4812      	ldr	r0, [pc, #72]	; (800d4c0 <tcp_recv_null+0x68>)
 800d476:	f007 fda5 	bl	8014fc4 <iprintf>
 800d47a:	f06f 030f 	mvn.w	r3, #15
 800d47e:	e016      	b.n	800d4ae <tcp_recv_null+0x56>

  if (p != NULL) {
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d009      	beq.n	800d49a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	891b      	ldrh	r3, [r3, #8]
 800d48a:	4619      	mov	r1, r3
 800d48c:	68b8      	ldr	r0, [r7, #8]
 800d48e:	f7ff fab9 	bl	800ca04 <tcp_recved>
    pbuf_free(p);
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f7fe fb50 	bl	800bb38 <pbuf_free>
 800d498:	e008      	b.n	800d4ac <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d49a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d104      	bne.n	800d4ac <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d4a2:	68b8      	ldr	r0, [r7, #8]
 800d4a4:	f7fe ffea 	bl	800c47c <tcp_close>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	e000      	b.n	800d4ae <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d4ac:	2300      	movs	r3, #0
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	08016cbc 	.word	0x08016cbc
 800d4bc:	0801722c 	.word	0x0801722c
 800d4c0:	08016d00 	.word	0x08016d00

0800d4c4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b086      	sub	sp, #24
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d4ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	db01      	blt.n	800d4da <tcp_kill_prio+0x16>
 800d4d6:	79fb      	ldrb	r3, [r7, #7]
 800d4d8:	e000      	b.n	800d4dc <tcp_kill_prio+0x18>
 800d4da:	237f      	movs	r3, #127	; 0x7f
 800d4dc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d4de:	7afb      	ldrb	r3, [r7, #11]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d034      	beq.n	800d54e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d4e4:	7afb      	ldrb	r3, [r7, #11]
 800d4e6:	3b01      	subs	r3, #1
 800d4e8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4f2:	4b19      	ldr	r3, [pc, #100]	; (800d558 <tcp_kill_prio+0x94>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	617b      	str	r3, [r7, #20]
 800d4f8:	e01f      	b.n	800d53a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	7d5b      	ldrb	r3, [r3, #21]
 800d4fe:	7afa      	ldrb	r2, [r7, #11]
 800d500:	429a      	cmp	r2, r3
 800d502:	d80c      	bhi.n	800d51e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d508:	7afa      	ldrb	r2, [r7, #11]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d112      	bne.n	800d534 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d50e:	4b13      	ldr	r3, [pc, #76]	; (800d55c <tcp_kill_prio+0x98>)
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	6a1b      	ldr	r3, [r3, #32]
 800d516:	1ad3      	subs	r3, r2, r3
 800d518:	68fa      	ldr	r2, [r7, #12]
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d80a      	bhi.n	800d534 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d51e:	4b0f      	ldr	r3, [pc, #60]	; (800d55c <tcp_kill_prio+0x98>)
 800d520:	681a      	ldr	r2, [r3, #0]
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	6a1b      	ldr	r3, [r3, #32]
 800d526:	1ad3      	subs	r3, r2, r3
 800d528:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	7d5b      	ldrb	r3, [r3, #21]
 800d532:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	617b      	str	r3, [r7, #20]
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d1dc      	bne.n	800d4fa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d004      	beq.n	800d550 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d546:	6938      	ldr	r0, [r7, #16]
 800d548:	f7ff f882 	bl	800c650 <tcp_abort>
 800d54c:	e000      	b.n	800d550 <tcp_kill_prio+0x8c>
    return;
 800d54e:	bf00      	nop
  }
}
 800d550:	3718      	adds	r7, #24
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	2000b43c 	.word	0x2000b43c
 800d55c:	2000b440 	.word	0x2000b440

0800d560 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b086      	sub	sp, #24
 800d564:	af00      	add	r7, sp, #0
 800d566:	4603      	mov	r3, r0
 800d568:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d56a:	79fb      	ldrb	r3, [r7, #7]
 800d56c:	2b08      	cmp	r3, #8
 800d56e:	d009      	beq.n	800d584 <tcp_kill_state+0x24>
 800d570:	79fb      	ldrb	r3, [r7, #7]
 800d572:	2b09      	cmp	r3, #9
 800d574:	d006      	beq.n	800d584 <tcp_kill_state+0x24>
 800d576:	4b1a      	ldr	r3, [pc, #104]	; (800d5e0 <tcp_kill_state+0x80>)
 800d578:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d57c:	4919      	ldr	r1, [pc, #100]	; (800d5e4 <tcp_kill_state+0x84>)
 800d57e:	481a      	ldr	r0, [pc, #104]	; (800d5e8 <tcp_kill_state+0x88>)
 800d580:	f007 fd20 	bl	8014fc4 <iprintf>

  inactivity = 0;
 800d584:	2300      	movs	r3, #0
 800d586:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d588:	2300      	movs	r3, #0
 800d58a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d58c:	4b17      	ldr	r3, [pc, #92]	; (800d5ec <tcp_kill_state+0x8c>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	617b      	str	r3, [r7, #20]
 800d592:	e017      	b.n	800d5c4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	7d1b      	ldrb	r3, [r3, #20]
 800d598:	79fa      	ldrb	r2, [r7, #7]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d10f      	bne.n	800d5be <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d59e:	4b14      	ldr	r3, [pc, #80]	; (800d5f0 <tcp_kill_state+0x90>)
 800d5a0:	681a      	ldr	r2, [r3, #0]
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	6a1b      	ldr	r3, [r3, #32]
 800d5a6:	1ad3      	subs	r3, r2, r3
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	429a      	cmp	r2, r3
 800d5ac:	d807      	bhi.n	800d5be <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d5ae:	4b10      	ldr	r3, [pc, #64]	; (800d5f0 <tcp_kill_state+0x90>)
 800d5b0:	681a      	ldr	r2, [r3, #0]
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	6a1b      	ldr	r3, [r3, #32]
 800d5b6:	1ad3      	subs	r3, r2, r3
 800d5b8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5be:	697b      	ldr	r3, [r7, #20]
 800d5c0:	68db      	ldr	r3, [r3, #12]
 800d5c2:	617b      	str	r3, [r7, #20]
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d1e4      	bne.n	800d594 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d003      	beq.n	800d5d8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d5d0:	2100      	movs	r1, #0
 800d5d2:	6938      	ldr	r0, [r7, #16]
 800d5d4:	f7fe ff7e 	bl	800c4d4 <tcp_abandon>
  }
}
 800d5d8:	bf00      	nop
 800d5da:	3718      	adds	r7, #24
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	08016cbc 	.word	0x08016cbc
 800d5e4:	08017248 	.word	0x08017248
 800d5e8:	08016d00 	.word	0x08016d00
 800d5ec:	2000b43c 	.word	0x2000b43c
 800d5f0:	2000b440 	.word	0x2000b440

0800d5f4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d5fe:	2300      	movs	r3, #0
 800d600:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d602:	4b12      	ldr	r3, [pc, #72]	; (800d64c <tcp_kill_timewait+0x58>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	60fb      	str	r3, [r7, #12]
 800d608:	e012      	b.n	800d630 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d60a:	4b11      	ldr	r3, [pc, #68]	; (800d650 <tcp_kill_timewait+0x5c>)
 800d60c:	681a      	ldr	r2, [r3, #0]
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	6a1b      	ldr	r3, [r3, #32]
 800d612:	1ad3      	subs	r3, r2, r3
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	429a      	cmp	r2, r3
 800d618:	d807      	bhi.n	800d62a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d61a:	4b0d      	ldr	r3, [pc, #52]	; (800d650 <tcp_kill_timewait+0x5c>)
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	6a1b      	ldr	r3, [r3, #32]
 800d622:	1ad3      	subs	r3, r2, r3
 800d624:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	60fb      	str	r3, [r7, #12]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d1e9      	bne.n	800d60a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d002      	beq.n	800d642 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d63c:	68b8      	ldr	r0, [r7, #8]
 800d63e:	f7ff f807 	bl	800c650 <tcp_abort>
  }
}
 800d642:	bf00      	nop
 800d644:	3710      	adds	r7, #16
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}
 800d64a:	bf00      	nop
 800d64c:	2000b44c 	.word	0x2000b44c
 800d650:	2000b440 	.word	0x2000b440

0800d654 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b082      	sub	sp, #8
 800d658:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d65a:	4b10      	ldr	r3, [pc, #64]	; (800d69c <tcp_handle_closepend+0x48>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d660:	e014      	b.n	800d68c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	68db      	ldr	r3, [r3, #12]
 800d666:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	8b5b      	ldrh	r3, [r3, #26]
 800d66c:	f003 0308 	and.w	r3, r3, #8
 800d670:	2b00      	cmp	r3, #0
 800d672:	d009      	beq.n	800d688 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	8b5b      	ldrh	r3, [r3, #26]
 800d678:	f023 0308 	bic.w	r3, r3, #8
 800d67c:	b29a      	uxth	r2, r3
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f7fe fe94 	bl	800c3b0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d1e7      	bne.n	800d662 <tcp_handle_closepend+0xe>
  }
}
 800d692:	bf00      	nop
 800d694:	3708      	adds	r7, #8
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop
 800d69c:	2000b43c 	.word	0x2000b43c

0800d6a0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6aa:	2001      	movs	r0, #1
 800d6ac:	f7fd fb52 	bl	800ad54 <memp_malloc>
 800d6b0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d126      	bne.n	800d706 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d6b8:	f7ff ffcc 	bl	800d654 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d6bc:	f7ff ff9a 	bl	800d5f4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6c0:	2001      	movs	r0, #1
 800d6c2:	f7fd fb47 	bl	800ad54 <memp_malloc>
 800d6c6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d11b      	bne.n	800d706 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d6ce:	2009      	movs	r0, #9
 800d6d0:	f7ff ff46 	bl	800d560 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6d4:	2001      	movs	r0, #1
 800d6d6:	f7fd fb3d 	bl	800ad54 <memp_malloc>
 800d6da:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d111      	bne.n	800d706 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d6e2:	2008      	movs	r0, #8
 800d6e4:	f7ff ff3c 	bl	800d560 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6e8:	2001      	movs	r0, #1
 800d6ea:	f7fd fb33 	bl	800ad54 <memp_malloc>
 800d6ee:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d107      	bne.n	800d706 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d6f6:	79fb      	ldrb	r3, [r7, #7]
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7ff fee3 	bl	800d4c4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d6fe:	2001      	movs	r0, #1
 800d700:	f7fd fb28 	bl	800ad54 <memp_malloc>
 800d704:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d03f      	beq.n	800d78c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d70c:	229c      	movs	r2, #156	; 0x9c
 800d70e:	2100      	movs	r1, #0
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f007 fc4f 	bl	8014fb4 <memset>
    pcb->prio = prio;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	79fa      	ldrb	r2, [r7, #7]
 800d71a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d722:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d72c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	22ff      	movs	r2, #255	; 0xff
 800d73a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d742:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2206      	movs	r2, #6
 800d748:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2206      	movs	r2, #6
 800d750:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d758:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2201      	movs	r2, #1
 800d75e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d762:	4b0d      	ldr	r3, [pc, #52]	; (800d798 <tcp_alloc+0xf8>)
 800d764:	681a      	ldr	r2, [r3, #0]
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d76a:	4b0c      	ldr	r3, [pc, #48]	; (800d79c <tcp_alloc+0xfc>)
 800d76c:	781a      	ldrb	r2, [r3, #0]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d778:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	4a08      	ldr	r2, [pc, #32]	; (800d7a0 <tcp_alloc+0x100>)
 800d780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	4a07      	ldr	r2, [pc, #28]	; (800d7a4 <tcp_alloc+0x104>)
 800d788:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d78c:	68fb      	ldr	r3, [r7, #12]
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3710      	adds	r7, #16
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	2000b440 	.word	0x2000b440
 800d79c:	200044e2 	.word	0x200044e2
 800d7a0:	0800d459 	.word	0x0800d459
 800d7a4:	006ddd00 	.word	0x006ddd00

0800d7a8 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800d7ac:	2040      	movs	r0, #64	; 0x40
 800d7ae:	f7ff ff77 	bl	800d6a0 <tcp_alloc>
 800d7b2:	4603      	mov	r3, r0
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	4603      	mov	r3, r0
 800d7c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d7c2:	2040      	movs	r0, #64	; 0x40
 800d7c4:	f7ff ff6c 	bl	800d6a0 <tcp_alloc>
 800d7c8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d7ca:	68fb      	ldr	r3, [r7, #12]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3710      	adds	r7, #16
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d002      	beq.n	800d7ea <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	611a      	str	r2, [r3, #16]
  }
}
 800d7ea:	bf00      	nop
 800d7ec:	370c      	adds	r7, #12
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr
	...

0800d7f8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d7f8:	b580      	push	{r7, lr}
 800d7fa:	b082      	sub	sp, #8
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d00e      	beq.n	800d826 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	7d1b      	ldrb	r3, [r3, #20]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d106      	bne.n	800d81e <tcp_recv+0x26>
 800d810:	4b07      	ldr	r3, [pc, #28]	; (800d830 <tcp_recv+0x38>)
 800d812:	f240 72df 	movw	r2, #2015	; 0x7df
 800d816:	4907      	ldr	r1, [pc, #28]	; (800d834 <tcp_recv+0x3c>)
 800d818:	4807      	ldr	r0, [pc, #28]	; (800d838 <tcp_recv+0x40>)
 800d81a:	f007 fbd3 	bl	8014fc4 <iprintf>
    pcb->recv = recv;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	683a      	ldr	r2, [r7, #0]
 800d822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d826:	bf00      	nop
 800d828:	3708      	adds	r7, #8
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	08016cbc 	.word	0x08016cbc
 800d834:	08017258 	.word	0x08017258
 800d838:	08016d00 	.word	0x08016d00

0800d83c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b082      	sub	sp, #8
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d00e      	beq.n	800d86a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	7d1b      	ldrb	r3, [r3, #20]
 800d850:	2b01      	cmp	r3, #1
 800d852:	d106      	bne.n	800d862 <tcp_sent+0x26>
 800d854:	4b07      	ldr	r3, [pc, #28]	; (800d874 <tcp_sent+0x38>)
 800d856:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d85a:	4907      	ldr	r1, [pc, #28]	; (800d878 <tcp_sent+0x3c>)
 800d85c:	4807      	ldr	r0, [pc, #28]	; (800d87c <tcp_sent+0x40>)
 800d85e:	f007 fbb1 	bl	8014fc4 <iprintf>
    pcb->sent = sent;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	683a      	ldr	r2, [r7, #0]
 800d866:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d86a:	bf00      	nop
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	08016cbc 	.word	0x08016cbc
 800d878:	08017280 	.word	0x08017280
 800d87c:	08016d00 	.word	0x08016d00

0800d880 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d00e      	beq.n	800d8ae <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	7d1b      	ldrb	r3, [r3, #20]
 800d894:	2b01      	cmp	r3, #1
 800d896:	d106      	bne.n	800d8a6 <tcp_err+0x26>
 800d898:	4b07      	ldr	r3, [pc, #28]	; (800d8b8 <tcp_err+0x38>)
 800d89a:	f640 020d 	movw	r2, #2061	; 0x80d
 800d89e:	4907      	ldr	r1, [pc, #28]	; (800d8bc <tcp_err+0x3c>)
 800d8a0:	4807      	ldr	r0, [pc, #28]	; (800d8c0 <tcp_err+0x40>)
 800d8a2:	f007 fb8f 	bl	8014fc4 <iprintf>
    pcb->errf = err;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	683a      	ldr	r2, [r7, #0]
 800d8aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d8ae:	bf00      	nop
 800d8b0:	3708      	adds	r7, #8
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	08016cbc 	.word	0x08016cbc
 800d8bc:	080172a8 	.word	0x080172a8
 800d8c0:	08016d00 	.word	0x08016d00

0800d8c4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b085      	sub	sp, #20
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d008      	beq.n	800d8e6 <tcp_accept+0x22>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	7d1b      	ldrb	r3, [r3, #20]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d104      	bne.n	800d8e6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	683a      	ldr	r2, [r7, #0]
 800d8e4:	619a      	str	r2, [r3, #24]
  }
}
 800d8e6:	bf00      	nop
 800d8e8:	3714      	adds	r7, #20
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr
	...

0800d8f4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b084      	sub	sp, #16
 800d8f8:	af00      	add	r7, sp, #0
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	60b9      	str	r1, [r7, #8]
 800d8fe:	4613      	mov	r3, r2
 800d900:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d107      	bne.n	800d918 <tcp_poll+0x24>
 800d908:	4b0e      	ldr	r3, [pc, #56]	; (800d944 <tcp_poll+0x50>)
 800d90a:	f640 023d 	movw	r2, #2109	; 0x83d
 800d90e:	490e      	ldr	r1, [pc, #56]	; (800d948 <tcp_poll+0x54>)
 800d910:	480e      	ldr	r0, [pc, #56]	; (800d94c <tcp_poll+0x58>)
 800d912:	f007 fb57 	bl	8014fc4 <iprintf>
 800d916:	e011      	b.n	800d93c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	7d1b      	ldrb	r3, [r3, #20]
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d106      	bne.n	800d92e <tcp_poll+0x3a>
 800d920:	4b08      	ldr	r3, [pc, #32]	; (800d944 <tcp_poll+0x50>)
 800d922:	f640 023e 	movw	r2, #2110	; 0x83e
 800d926:	490a      	ldr	r1, [pc, #40]	; (800d950 <tcp_poll+0x5c>)
 800d928:	4808      	ldr	r0, [pc, #32]	; (800d94c <tcp_poll+0x58>)
 800d92a:	f007 fb4b 	bl	8014fc4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	68ba      	ldr	r2, [r7, #8]
 800d932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	79fa      	ldrb	r2, [r7, #7]
 800d93a:	775a      	strb	r2, [r3, #29]
}
 800d93c:	3710      	adds	r7, #16
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
 800d942:	bf00      	nop
 800d944:	08016cbc 	.word	0x08016cbc
 800d948:	080172d0 	.word	0x080172d0
 800d94c:	08016d00 	.word	0x08016d00
 800d950:	080172e8 	.word	0x080172e8

0800d954 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d107      	bne.n	800d972 <tcp_pcb_purge+0x1e>
 800d962:	4b21      	ldr	r3, [pc, #132]	; (800d9e8 <tcp_pcb_purge+0x94>)
 800d964:	f640 0251 	movw	r2, #2129	; 0x851
 800d968:	4920      	ldr	r1, [pc, #128]	; (800d9ec <tcp_pcb_purge+0x98>)
 800d96a:	4821      	ldr	r0, [pc, #132]	; (800d9f0 <tcp_pcb_purge+0x9c>)
 800d96c:	f007 fb2a 	bl	8014fc4 <iprintf>
 800d970:	e037      	b.n	800d9e2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	7d1b      	ldrb	r3, [r3, #20]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d033      	beq.n	800d9e2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d97e:	2b0a      	cmp	r3, #10
 800d980:	d02f      	beq.n	800d9e2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d986:	2b01      	cmp	r3, #1
 800d988:	d02b      	beq.n	800d9e2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d007      	beq.n	800d9a2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d996:	4618      	mov	r0, r3
 800d998:	f7fe f8ce 	bl	800bb38 <pbuf_free>
      pcb->refused_data = NULL;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d002      	beq.n	800d9b0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 f986 	bl	800dcbc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9b6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f7ff fcd5 	bl	800d36c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7ff fcd0 	bl	800d36c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	66da      	str	r2, [r3, #108]	; 0x6c
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	2200      	movs	r2, #0
 800d9de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d9e2:	3708      	adds	r7, #8
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	08016cbc 	.word	0x08016cbc
 800d9ec:	08017308 	.word	0x08017308
 800d9f0:	08016d00 	.word	0x08016d00

0800d9f4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d106      	bne.n	800da12 <tcp_pcb_remove+0x1e>
 800da04:	4b3e      	ldr	r3, [pc, #248]	; (800db00 <tcp_pcb_remove+0x10c>)
 800da06:	f640 0283 	movw	r2, #2179	; 0x883
 800da0a:	493e      	ldr	r1, [pc, #248]	; (800db04 <tcp_pcb_remove+0x110>)
 800da0c:	483e      	ldr	r0, [pc, #248]	; (800db08 <tcp_pcb_remove+0x114>)
 800da0e:	f007 fad9 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d106      	bne.n	800da26 <tcp_pcb_remove+0x32>
 800da18:	4b39      	ldr	r3, [pc, #228]	; (800db00 <tcp_pcb_remove+0x10c>)
 800da1a:	f640 0284 	movw	r2, #2180	; 0x884
 800da1e:	493b      	ldr	r1, [pc, #236]	; (800db0c <tcp_pcb_remove+0x118>)
 800da20:	4839      	ldr	r0, [pc, #228]	; (800db08 <tcp_pcb_remove+0x114>)
 800da22:	f007 facf 	bl	8014fc4 <iprintf>

  TCP_RMV(pcblist, pcb);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	683a      	ldr	r2, [r7, #0]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d105      	bne.n	800da3c <tcp_pcb_remove+0x48>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	68da      	ldr	r2, [r3, #12]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	601a      	str	r2, [r3, #0]
 800da3a:	e013      	b.n	800da64 <tcp_pcb_remove+0x70>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	60fb      	str	r3, [r7, #12]
 800da42:	e00c      	b.n	800da5e <tcp_pcb_remove+0x6a>
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	683a      	ldr	r2, [r7, #0]
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d104      	bne.n	800da58 <tcp_pcb_remove+0x64>
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	68da      	ldr	r2, [r3, #12]
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	60da      	str	r2, [r3, #12]
 800da56:	e005      	b.n	800da64 <tcp_pcb_remove+0x70>
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	68db      	ldr	r3, [r3, #12]
 800da5c:	60fb      	str	r3, [r7, #12]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d1ef      	bne.n	800da44 <tcp_pcb_remove+0x50>
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	2200      	movs	r2, #0
 800da68:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800da6a:	6838      	ldr	r0, [r7, #0]
 800da6c:	f7ff ff72 	bl	800d954 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	7d1b      	ldrb	r3, [r3, #20]
 800da74:	2b0a      	cmp	r3, #10
 800da76:	d013      	beq.n	800daa0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	d00f      	beq.n	800daa0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	8b5b      	ldrh	r3, [r3, #26]
 800da84:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d009      	beq.n	800daa0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	8b5b      	ldrh	r3, [r3, #26]
 800da90:	f043 0302 	orr.w	r3, r3, #2
 800da94:	b29a      	uxth	r2, r3
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800da9a:	6838      	ldr	r0, [r7, #0]
 800da9c:	f003 fbc2 	bl	8011224 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	7d1b      	ldrb	r3, [r3, #20]
 800daa4:	2b01      	cmp	r3, #1
 800daa6:	d020      	beq.n	800daea <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daac:	2b00      	cmp	r3, #0
 800daae:	d006      	beq.n	800dabe <tcp_pcb_remove+0xca>
 800dab0:	4b13      	ldr	r3, [pc, #76]	; (800db00 <tcp_pcb_remove+0x10c>)
 800dab2:	f640 0293 	movw	r2, #2195	; 0x893
 800dab6:	4916      	ldr	r1, [pc, #88]	; (800db10 <tcp_pcb_remove+0x11c>)
 800dab8:	4813      	ldr	r0, [pc, #76]	; (800db08 <tcp_pcb_remove+0x114>)
 800daba:	f007 fa83 	bl	8014fc4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d006      	beq.n	800dad4 <tcp_pcb_remove+0xe0>
 800dac6:	4b0e      	ldr	r3, [pc, #56]	; (800db00 <tcp_pcb_remove+0x10c>)
 800dac8:	f640 0294 	movw	r2, #2196	; 0x894
 800dacc:	4911      	ldr	r1, [pc, #68]	; (800db14 <tcp_pcb_remove+0x120>)
 800dace:	480e      	ldr	r0, [pc, #56]	; (800db08 <tcp_pcb_remove+0x114>)
 800dad0:	f007 fa78 	bl	8014fc4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d006      	beq.n	800daea <tcp_pcb_remove+0xf6>
 800dadc:	4b08      	ldr	r3, [pc, #32]	; (800db00 <tcp_pcb_remove+0x10c>)
 800dade:	f640 0296 	movw	r2, #2198	; 0x896
 800dae2:	490d      	ldr	r1, [pc, #52]	; (800db18 <tcp_pcb_remove+0x124>)
 800dae4:	4808      	ldr	r0, [pc, #32]	; (800db08 <tcp_pcb_remove+0x114>)
 800dae6:	f007 fa6d 	bl	8014fc4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	2200      	movs	r2, #0
 800daee:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	2200      	movs	r2, #0
 800daf4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800daf6:	bf00      	nop
 800daf8:	3710      	adds	r7, #16
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	08016cbc 	.word	0x08016cbc
 800db04:	08017324 	.word	0x08017324
 800db08:	08016d00 	.word	0x08016d00
 800db0c:	08017340 	.word	0x08017340
 800db10:	08017360 	.word	0x08017360
 800db14:	08017378 	.word	0x08017378
 800db18:	08017394 	.word	0x08017394

0800db1c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d106      	bne.n	800db38 <tcp_next_iss+0x1c>
 800db2a:	4b0a      	ldr	r3, [pc, #40]	; (800db54 <tcp_next_iss+0x38>)
 800db2c:	f640 02af 	movw	r2, #2223	; 0x8af
 800db30:	4909      	ldr	r1, [pc, #36]	; (800db58 <tcp_next_iss+0x3c>)
 800db32:	480a      	ldr	r0, [pc, #40]	; (800db5c <tcp_next_iss+0x40>)
 800db34:	f007 fa46 	bl	8014fc4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800db38:	4b09      	ldr	r3, [pc, #36]	; (800db60 <tcp_next_iss+0x44>)
 800db3a:	681a      	ldr	r2, [r3, #0]
 800db3c:	4b09      	ldr	r3, [pc, #36]	; (800db64 <tcp_next_iss+0x48>)
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4413      	add	r3, r2
 800db42:	4a07      	ldr	r2, [pc, #28]	; (800db60 <tcp_next_iss+0x44>)
 800db44:	6013      	str	r3, [r2, #0]
  return iss;
 800db46:	4b06      	ldr	r3, [pc, #24]	; (800db60 <tcp_next_iss+0x44>)
 800db48:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3708      	adds	r7, #8
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	08016cbc 	.word	0x08016cbc
 800db58:	080173ac 	.word	0x080173ac
 800db5c:	08016d00 	.word	0x08016d00
 800db60:	20000014 	.word	0x20000014
 800db64:	2000b440 	.word	0x2000b440

0800db68 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b086      	sub	sp, #24
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	4603      	mov	r3, r0
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	607a      	str	r2, [r7, #4]
 800db74:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d106      	bne.n	800db8a <tcp_eff_send_mss_netif+0x22>
 800db7c:	4b14      	ldr	r3, [pc, #80]	; (800dbd0 <tcp_eff_send_mss_netif+0x68>)
 800db7e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800db82:	4914      	ldr	r1, [pc, #80]	; (800dbd4 <tcp_eff_send_mss_netif+0x6c>)
 800db84:	4814      	ldr	r0, [pc, #80]	; (800dbd8 <tcp_eff_send_mss_netif+0x70>)
 800db86:	f007 fa1d 	bl	8014fc4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d101      	bne.n	800db94 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800db90:	89fb      	ldrh	r3, [r7, #14]
 800db92:	e019      	b.n	800dbc8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800db98:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800db9a:	8afb      	ldrh	r3, [r7, #22]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d012      	beq.n	800dbc6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800dba0:	2328      	movs	r3, #40	; 0x28
 800dba2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800dba4:	8afa      	ldrh	r2, [r7, #22]
 800dba6:	8abb      	ldrh	r3, [r7, #20]
 800dba8:	429a      	cmp	r2, r3
 800dbaa:	d904      	bls.n	800dbb6 <tcp_eff_send_mss_netif+0x4e>
 800dbac:	8afa      	ldrh	r2, [r7, #22]
 800dbae:	8abb      	ldrh	r3, [r7, #20]
 800dbb0:	1ad3      	subs	r3, r2, r3
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	e000      	b.n	800dbb8 <tcp_eff_send_mss_netif+0x50>
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800dbba:	8a7a      	ldrh	r2, [r7, #18]
 800dbbc:	89fb      	ldrh	r3, [r7, #14]
 800dbbe:	4293      	cmp	r3, r2
 800dbc0:	bf28      	it	cs
 800dbc2:	4613      	movcs	r3, r2
 800dbc4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800dbc6:	89fb      	ldrh	r3, [r7, #14]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3718      	adds	r7, #24
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	08016cbc 	.word	0x08016cbc
 800dbd4:	080173c8 	.word	0x080173c8
 800dbd8:	08016d00 	.word	0x08016d00

0800dbdc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d119      	bne.n	800dc24 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800dbf0:	4b10      	ldr	r3, [pc, #64]	; (800dc34 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800dbf2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800dbf6:	4910      	ldr	r1, [pc, #64]	; (800dc38 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800dbf8:	4810      	ldr	r0, [pc, #64]	; (800dc3c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800dbfa:	f007 f9e3 	bl	8014fc4 <iprintf>

  while (pcb != NULL) {
 800dbfe:	e011      	b.n	800dc24 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d108      	bne.n	800dc1e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800dc12:	68f8      	ldr	r0, [r7, #12]
 800dc14:	f7fe fd1c 	bl	800c650 <tcp_abort>
      pcb = next;
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	60fb      	str	r3, [r7, #12]
 800dc1c:	e002      	b.n	800dc24 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	68db      	ldr	r3, [r3, #12]
 800dc22:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d1ea      	bne.n	800dc00 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800dc2a:	bf00      	nop
 800dc2c:	3710      	adds	r7, #16
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	08016cbc 	.word	0x08016cbc
 800dc38:	080173f0 	.word	0x080173f0
 800dc3c:	08016d00 	.word	0x08016d00

0800dc40 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b084      	sub	sp, #16
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d02a      	beq.n	800dca6 <tcp_netif_ip_addr_changed+0x66>
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d026      	beq.n	800dca6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dc58:	4b15      	ldr	r3, [pc, #84]	; (800dcb0 <tcp_netif_ip_addr_changed+0x70>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f7ff ffbc 	bl	800dbdc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dc64:	4b13      	ldr	r3, [pc, #76]	; (800dcb4 <tcp_netif_ip_addr_changed+0x74>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	4619      	mov	r1, r3
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f7ff ffb6 	bl	800dbdc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d017      	beq.n	800dca6 <tcp_netif_ip_addr_changed+0x66>
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d013      	beq.n	800dca6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dc7e:	4b0e      	ldr	r3, [pc, #56]	; (800dcb8 <tcp_netif_ip_addr_changed+0x78>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	60fb      	str	r3, [r7, #12]
 800dc84:	e00c      	b.n	800dca0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d103      	bne.n	800dc9a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	681a      	ldr	r2, [r3, #0]
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	68db      	ldr	r3, [r3, #12]
 800dc9e:	60fb      	str	r3, [r7, #12]
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d1ef      	bne.n	800dc86 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800dca6:	bf00      	nop
 800dca8:	3710      	adds	r7, #16
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	2000b43c 	.word	0x2000b43c
 800dcb4:	2000b448 	.word	0x2000b448
 800dcb8:	2000b444 	.word	0x2000b444

0800dcbc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b082      	sub	sp, #8
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d007      	beq.n	800dcdc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7ff fb4b 	bl	800d36c <tcp_segs_free>
    pcb->ooseq = NULL;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2200      	movs	r2, #0
 800dcda:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800dcdc:	bf00      	nop
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800dce4:	b590      	push	{r4, r7, lr}
 800dce6:	b08d      	sub	sp, #52	; 0x34
 800dce8:	af04      	add	r7, sp, #16
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d105      	bne.n	800dd00 <tcp_input+0x1c>
 800dcf4:	4b9b      	ldr	r3, [pc, #620]	; (800df64 <tcp_input+0x280>)
 800dcf6:	2283      	movs	r2, #131	; 0x83
 800dcf8:	499b      	ldr	r1, [pc, #620]	; (800df68 <tcp_input+0x284>)
 800dcfa:	489c      	ldr	r0, [pc, #624]	; (800df6c <tcp_input+0x288>)
 800dcfc:	f007 f962 	bl	8014fc4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	4a9a      	ldr	r2, [pc, #616]	; (800df70 <tcp_input+0x28c>)
 800dd06:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	895b      	ldrh	r3, [r3, #10]
 800dd0c:	2b13      	cmp	r3, #19
 800dd0e:	f240 83c4 	bls.w	800e49a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dd12:	4b98      	ldr	r3, [pc, #608]	; (800df74 <tcp_input+0x290>)
 800dd14:	695a      	ldr	r2, [r3, #20]
 800dd16:	4b97      	ldr	r3, [pc, #604]	; (800df74 <tcp_input+0x290>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	4619      	mov	r1, r3
 800dd1c:	4610      	mov	r0, r2
 800dd1e:	f006 f8a9 	bl	8013e74 <ip4_addr_isbroadcast_u32>
 800dd22:	4603      	mov	r3, r0
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	f040 83ba 	bne.w	800e49e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800dd2a:	4b92      	ldr	r3, [pc, #584]	; (800df74 <tcp_input+0x290>)
 800dd2c:	695b      	ldr	r3, [r3, #20]
 800dd2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800dd32:	2be0      	cmp	r3, #224	; 0xe0
 800dd34:	f000 83b3 	beq.w	800e49e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800dd38:	4b8d      	ldr	r3, [pc, #564]	; (800df70 <tcp_input+0x28c>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	899b      	ldrh	r3, [r3, #12]
 800dd3e:	b29b      	uxth	r3, r3
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7fc fb1b 	bl	800a37c <lwip_htons>
 800dd46:	4603      	mov	r3, r0
 800dd48:	0b1b      	lsrs	r3, r3, #12
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800dd52:	7cbb      	ldrb	r3, [r7, #18]
 800dd54:	2b13      	cmp	r3, #19
 800dd56:	f240 83a2 	bls.w	800e49e <tcp_input+0x7ba>
 800dd5a:	7cbb      	ldrb	r3, [r7, #18]
 800dd5c:	b29a      	uxth	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	891b      	ldrh	r3, [r3, #8]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	f200 839b 	bhi.w	800e49e <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800dd68:	7cbb      	ldrb	r3, [r7, #18]
 800dd6a:	b29b      	uxth	r3, r3
 800dd6c:	3b14      	subs	r3, #20
 800dd6e:	b29a      	uxth	r2, r3
 800dd70:	4b81      	ldr	r3, [pc, #516]	; (800df78 <tcp_input+0x294>)
 800dd72:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800dd74:	4b81      	ldr	r3, [pc, #516]	; (800df7c <tcp_input+0x298>)
 800dd76:	2200      	movs	r2, #0
 800dd78:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	895a      	ldrh	r2, [r3, #10]
 800dd7e:	7cbb      	ldrb	r3, [r7, #18]
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d309      	bcc.n	800dd9a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dd86:	4b7c      	ldr	r3, [pc, #496]	; (800df78 <tcp_input+0x294>)
 800dd88:	881a      	ldrh	r2, [r3, #0]
 800dd8a:	4b7d      	ldr	r3, [pc, #500]	; (800df80 <tcp_input+0x29c>)
 800dd8c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800dd8e:	7cbb      	ldrb	r3, [r7, #18]
 800dd90:	4619      	mov	r1, r3
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f7fd fe4a 	bl	800ba2c <pbuf_remove_header>
 800dd98:	e04e      	b.n	800de38 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d105      	bne.n	800ddae <tcp_input+0xca>
 800dda2:	4b70      	ldr	r3, [pc, #448]	; (800df64 <tcp_input+0x280>)
 800dda4:	22c2      	movs	r2, #194	; 0xc2
 800dda6:	4977      	ldr	r1, [pc, #476]	; (800df84 <tcp_input+0x2a0>)
 800dda8:	4870      	ldr	r0, [pc, #448]	; (800df6c <tcp_input+0x288>)
 800ddaa:	f007 f90b 	bl	8014fc4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ddae:	2114      	movs	r1, #20
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f7fd fe3b 	bl	800ba2c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	895a      	ldrh	r2, [r3, #10]
 800ddba:	4b71      	ldr	r3, [pc, #452]	; (800df80 <tcp_input+0x29c>)
 800ddbc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ddbe:	4b6e      	ldr	r3, [pc, #440]	; (800df78 <tcp_input+0x294>)
 800ddc0:	881a      	ldrh	r2, [r3, #0]
 800ddc2:	4b6f      	ldr	r3, [pc, #444]	; (800df80 <tcp_input+0x29c>)
 800ddc4:	881b      	ldrh	r3, [r3, #0]
 800ddc6:	1ad3      	subs	r3, r2, r3
 800ddc8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ddca:	4b6d      	ldr	r3, [pc, #436]	; (800df80 <tcp_input+0x29c>)
 800ddcc:	881b      	ldrh	r3, [r3, #0]
 800ddce:	4619      	mov	r1, r3
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f7fd fe2b 	bl	800ba2c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	895b      	ldrh	r3, [r3, #10]
 800dddc:	8a3a      	ldrh	r2, [r7, #16]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	f200 835f 	bhi.w	800e4a2 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	4a64      	ldr	r2, [pc, #400]	; (800df7c <tcp_input+0x298>)
 800ddec:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	8a3a      	ldrh	r2, [r7, #16]
 800ddf4:	4611      	mov	r1, r2
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7fd fe18 	bl	800ba2c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	891a      	ldrh	r2, [r3, #8]
 800de00:	8a3b      	ldrh	r3, [r7, #16]
 800de02:	1ad3      	subs	r3, r2, r3
 800de04:	b29a      	uxth	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	895b      	ldrh	r3, [r3, #10]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d005      	beq.n	800de1e <tcp_input+0x13a>
 800de12:	4b54      	ldr	r3, [pc, #336]	; (800df64 <tcp_input+0x280>)
 800de14:	22df      	movs	r2, #223	; 0xdf
 800de16:	495c      	ldr	r1, [pc, #368]	; (800df88 <tcp_input+0x2a4>)
 800de18:	4854      	ldr	r0, [pc, #336]	; (800df6c <tcp_input+0x288>)
 800de1a:	f007 f8d3 	bl	8014fc4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	891a      	ldrh	r2, [r3, #8]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	891b      	ldrh	r3, [r3, #8]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d005      	beq.n	800de38 <tcp_input+0x154>
 800de2c:	4b4d      	ldr	r3, [pc, #308]	; (800df64 <tcp_input+0x280>)
 800de2e:	22e0      	movs	r2, #224	; 0xe0
 800de30:	4956      	ldr	r1, [pc, #344]	; (800df8c <tcp_input+0x2a8>)
 800de32:	484e      	ldr	r0, [pc, #312]	; (800df6c <tcp_input+0x288>)
 800de34:	f007 f8c6 	bl	8014fc4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800de38:	4b4d      	ldr	r3, [pc, #308]	; (800df70 <tcp_input+0x28c>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	881b      	ldrh	r3, [r3, #0]
 800de3e:	b29a      	uxth	r2, r3
 800de40:	4b4b      	ldr	r3, [pc, #300]	; (800df70 <tcp_input+0x28c>)
 800de42:	681c      	ldr	r4, [r3, #0]
 800de44:	4610      	mov	r0, r2
 800de46:	f7fc fa99 	bl	800a37c <lwip_htons>
 800de4a:	4603      	mov	r3, r0
 800de4c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800de4e:	4b48      	ldr	r3, [pc, #288]	; (800df70 <tcp_input+0x28c>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	885b      	ldrh	r3, [r3, #2]
 800de54:	b29a      	uxth	r2, r3
 800de56:	4b46      	ldr	r3, [pc, #280]	; (800df70 <tcp_input+0x28c>)
 800de58:	681c      	ldr	r4, [r3, #0]
 800de5a:	4610      	mov	r0, r2
 800de5c:	f7fc fa8e 	bl	800a37c <lwip_htons>
 800de60:	4603      	mov	r3, r0
 800de62:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800de64:	4b42      	ldr	r3, [pc, #264]	; (800df70 <tcp_input+0x28c>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	685a      	ldr	r2, [r3, #4]
 800de6a:	4b41      	ldr	r3, [pc, #260]	; (800df70 <tcp_input+0x28c>)
 800de6c:	681c      	ldr	r4, [r3, #0]
 800de6e:	4610      	mov	r0, r2
 800de70:	f7fc fa99 	bl	800a3a6 <lwip_htonl>
 800de74:	4603      	mov	r3, r0
 800de76:	6063      	str	r3, [r4, #4]
 800de78:	6863      	ldr	r3, [r4, #4]
 800de7a:	4a45      	ldr	r2, [pc, #276]	; (800df90 <tcp_input+0x2ac>)
 800de7c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800de7e:	4b3c      	ldr	r3, [pc, #240]	; (800df70 <tcp_input+0x28c>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	689a      	ldr	r2, [r3, #8]
 800de84:	4b3a      	ldr	r3, [pc, #232]	; (800df70 <tcp_input+0x28c>)
 800de86:	681c      	ldr	r4, [r3, #0]
 800de88:	4610      	mov	r0, r2
 800de8a:	f7fc fa8c 	bl	800a3a6 <lwip_htonl>
 800de8e:	4603      	mov	r3, r0
 800de90:	60a3      	str	r3, [r4, #8]
 800de92:	68a3      	ldr	r3, [r4, #8]
 800de94:	4a3f      	ldr	r2, [pc, #252]	; (800df94 <tcp_input+0x2b0>)
 800de96:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800de98:	4b35      	ldr	r3, [pc, #212]	; (800df70 <tcp_input+0x28c>)
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	89db      	ldrh	r3, [r3, #14]
 800de9e:	b29a      	uxth	r2, r3
 800dea0:	4b33      	ldr	r3, [pc, #204]	; (800df70 <tcp_input+0x28c>)
 800dea2:	681c      	ldr	r4, [r3, #0]
 800dea4:	4610      	mov	r0, r2
 800dea6:	f7fc fa69 	bl	800a37c <lwip_htons>
 800deaa:	4603      	mov	r3, r0
 800deac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800deae:	4b30      	ldr	r3, [pc, #192]	; (800df70 <tcp_input+0x28c>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	899b      	ldrh	r3, [r3, #12]
 800deb4:	b29b      	uxth	r3, r3
 800deb6:	4618      	mov	r0, r3
 800deb8:	f7fc fa60 	bl	800a37c <lwip_htons>
 800debc:	4603      	mov	r3, r0
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dec4:	b2da      	uxtb	r2, r3
 800dec6:	4b34      	ldr	r3, [pc, #208]	; (800df98 <tcp_input+0x2b4>)
 800dec8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	891a      	ldrh	r2, [r3, #8]
 800dece:	4b33      	ldr	r3, [pc, #204]	; (800df9c <tcp_input+0x2b8>)
 800ded0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ded2:	4b31      	ldr	r3, [pc, #196]	; (800df98 <tcp_input+0x2b4>)
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	f003 0303 	and.w	r3, r3, #3
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d00c      	beq.n	800def8 <tcp_input+0x214>
    tcplen++;
 800dede:	4b2f      	ldr	r3, [pc, #188]	; (800df9c <tcp_input+0x2b8>)
 800dee0:	881b      	ldrh	r3, [r3, #0]
 800dee2:	3301      	adds	r3, #1
 800dee4:	b29a      	uxth	r2, r3
 800dee6:	4b2d      	ldr	r3, [pc, #180]	; (800df9c <tcp_input+0x2b8>)
 800dee8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	891a      	ldrh	r2, [r3, #8]
 800deee:	4b2b      	ldr	r3, [pc, #172]	; (800df9c <tcp_input+0x2b8>)
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	429a      	cmp	r2, r3
 800def4:	f200 82d7 	bhi.w	800e4a6 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800def8:	2300      	movs	r3, #0
 800defa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800defc:	4b28      	ldr	r3, [pc, #160]	; (800dfa0 <tcp_input+0x2bc>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	61fb      	str	r3, [r7, #28]
 800df02:	e09d      	b.n	800e040 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800df04:	69fb      	ldr	r3, [r7, #28]
 800df06:	7d1b      	ldrb	r3, [r3, #20]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d105      	bne.n	800df18 <tcp_input+0x234>
 800df0c:	4b15      	ldr	r3, [pc, #84]	; (800df64 <tcp_input+0x280>)
 800df0e:	22fb      	movs	r2, #251	; 0xfb
 800df10:	4924      	ldr	r1, [pc, #144]	; (800dfa4 <tcp_input+0x2c0>)
 800df12:	4816      	ldr	r0, [pc, #88]	; (800df6c <tcp_input+0x288>)
 800df14:	f007 f856 	bl	8014fc4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	7d1b      	ldrb	r3, [r3, #20]
 800df1c:	2b0a      	cmp	r3, #10
 800df1e:	d105      	bne.n	800df2c <tcp_input+0x248>
 800df20:	4b10      	ldr	r3, [pc, #64]	; (800df64 <tcp_input+0x280>)
 800df22:	22fc      	movs	r2, #252	; 0xfc
 800df24:	4920      	ldr	r1, [pc, #128]	; (800dfa8 <tcp_input+0x2c4>)
 800df26:	4811      	ldr	r0, [pc, #68]	; (800df6c <tcp_input+0x288>)
 800df28:	f007 f84c 	bl	8014fc4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	7d1b      	ldrb	r3, [r3, #20]
 800df30:	2b01      	cmp	r3, #1
 800df32:	d105      	bne.n	800df40 <tcp_input+0x25c>
 800df34:	4b0b      	ldr	r3, [pc, #44]	; (800df64 <tcp_input+0x280>)
 800df36:	22fd      	movs	r2, #253	; 0xfd
 800df38:	491c      	ldr	r1, [pc, #112]	; (800dfac <tcp_input+0x2c8>)
 800df3a:	480c      	ldr	r0, [pc, #48]	; (800df6c <tcp_input+0x288>)
 800df3c:	f007 f842 	bl	8014fc4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df40:	69fb      	ldr	r3, [r7, #28]
 800df42:	7a1b      	ldrb	r3, [r3, #8]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d033      	beq.n	800dfb0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	7a1a      	ldrb	r2, [r3, #8]
 800df4c:	4b09      	ldr	r3, [pc, #36]	; (800df74 <tcp_input+0x290>)
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800df54:	3301      	adds	r3, #1
 800df56:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800df58:	429a      	cmp	r2, r3
 800df5a:	d029      	beq.n	800dfb0 <tcp_input+0x2cc>
      prev = pcb;
 800df5c:	69fb      	ldr	r3, [r7, #28]
 800df5e:	61bb      	str	r3, [r7, #24]
      continue;
 800df60:	e06b      	b.n	800e03a <tcp_input+0x356>
 800df62:	bf00      	nop
 800df64:	08017424 	.word	0x08017424
 800df68:	08017458 	.word	0x08017458
 800df6c:	08017470 	.word	0x08017470
 800df70:	200044f4 	.word	0x200044f4
 800df74:	20007d28 	.word	0x20007d28
 800df78:	200044f8 	.word	0x200044f8
 800df7c:	200044fc 	.word	0x200044fc
 800df80:	200044fa 	.word	0x200044fa
 800df84:	08017498 	.word	0x08017498
 800df88:	080174a8 	.word	0x080174a8
 800df8c:	080174b4 	.word	0x080174b4
 800df90:	20004504 	.word	0x20004504
 800df94:	20004508 	.word	0x20004508
 800df98:	20004510 	.word	0x20004510
 800df9c:	2000450e 	.word	0x2000450e
 800dfa0:	2000b43c 	.word	0x2000b43c
 800dfa4:	080174d4 	.word	0x080174d4
 800dfa8:	080174fc 	.word	0x080174fc
 800dfac:	08017528 	.word	0x08017528
    }

    if (pcb->remote_port == tcphdr->src &&
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	8b1a      	ldrh	r2, [r3, #24]
 800dfb4:	4b94      	ldr	r3, [pc, #592]	; (800e208 <tcp_input+0x524>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	881b      	ldrh	r3, [r3, #0]
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d13a      	bne.n	800e036 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	8ada      	ldrh	r2, [r3, #22]
 800dfc4:	4b90      	ldr	r3, [pc, #576]	; (800e208 <tcp_input+0x524>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	885b      	ldrh	r3, [r3, #2]
 800dfca:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d132      	bne.n	800e036 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dfd0:	69fb      	ldr	r3, [r7, #28]
 800dfd2:	685a      	ldr	r2, [r3, #4]
 800dfd4:	4b8d      	ldr	r3, [pc, #564]	; (800e20c <tcp_input+0x528>)
 800dfd6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dfd8:	429a      	cmp	r2, r3
 800dfda:	d12c      	bne.n	800e036 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	681a      	ldr	r2, [r3, #0]
 800dfe0:	4b8a      	ldr	r3, [pc, #552]	; (800e20c <tcp_input+0x528>)
 800dfe2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d126      	bne.n	800e036 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dfe8:	69fb      	ldr	r3, [r7, #28]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	69fa      	ldr	r2, [r7, #28]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d106      	bne.n	800e000 <tcp_input+0x31c>
 800dff2:	4b87      	ldr	r3, [pc, #540]	; (800e210 <tcp_input+0x52c>)
 800dff4:	f240 120d 	movw	r2, #269	; 0x10d
 800dff8:	4986      	ldr	r1, [pc, #536]	; (800e214 <tcp_input+0x530>)
 800dffa:	4887      	ldr	r0, [pc, #540]	; (800e218 <tcp_input+0x534>)
 800dffc:	f006 ffe2 	bl	8014fc4 <iprintf>
      if (prev != NULL) {
 800e000:	69bb      	ldr	r3, [r7, #24]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d00a      	beq.n	800e01c <tcp_input+0x338>
        prev->next = pcb->next;
 800e006:	69fb      	ldr	r3, [r7, #28]
 800e008:	68da      	ldr	r2, [r3, #12]
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e00e:	4b83      	ldr	r3, [pc, #524]	; (800e21c <tcp_input+0x538>)
 800e010:	681a      	ldr	r2, [r3, #0]
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e016:	4a81      	ldr	r2, [pc, #516]	; (800e21c <tcp_input+0x538>)
 800e018:	69fb      	ldr	r3, [r7, #28]
 800e01a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	68db      	ldr	r3, [r3, #12]
 800e020:	69fa      	ldr	r2, [r7, #28]
 800e022:	429a      	cmp	r2, r3
 800e024:	d111      	bne.n	800e04a <tcp_input+0x366>
 800e026:	4b7a      	ldr	r3, [pc, #488]	; (800e210 <tcp_input+0x52c>)
 800e028:	f240 1215 	movw	r2, #277	; 0x115
 800e02c:	497c      	ldr	r1, [pc, #496]	; (800e220 <tcp_input+0x53c>)
 800e02e:	487a      	ldr	r0, [pc, #488]	; (800e218 <tcp_input+0x534>)
 800e030:	f006 ffc8 	bl	8014fc4 <iprintf>
      break;
 800e034:	e009      	b.n	800e04a <tcp_input+0x366>
    }
    prev = pcb;
 800e036:	69fb      	ldr	r3, [r7, #28]
 800e038:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	68db      	ldr	r3, [r3, #12]
 800e03e:	61fb      	str	r3, [r7, #28]
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	2b00      	cmp	r3, #0
 800e044:	f47f af5e 	bne.w	800df04 <tcp_input+0x220>
 800e048:	e000      	b.n	800e04c <tcp_input+0x368>
      break;
 800e04a:	bf00      	nop
  }

  if (pcb == NULL) {
 800e04c:	69fb      	ldr	r3, [r7, #28]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	f040 8095 	bne.w	800e17e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e054:	4b73      	ldr	r3, [pc, #460]	; (800e224 <tcp_input+0x540>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	61fb      	str	r3, [r7, #28]
 800e05a:	e03f      	b.n	800e0dc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e05c:	69fb      	ldr	r3, [r7, #28]
 800e05e:	7d1b      	ldrb	r3, [r3, #20]
 800e060:	2b0a      	cmp	r3, #10
 800e062:	d006      	beq.n	800e072 <tcp_input+0x38e>
 800e064:	4b6a      	ldr	r3, [pc, #424]	; (800e210 <tcp_input+0x52c>)
 800e066:	f240 121f 	movw	r2, #287	; 0x11f
 800e06a:	496f      	ldr	r1, [pc, #444]	; (800e228 <tcp_input+0x544>)
 800e06c:	486a      	ldr	r0, [pc, #424]	; (800e218 <tcp_input+0x534>)
 800e06e:	f006 ffa9 	bl	8014fc4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e072:	69fb      	ldr	r3, [r7, #28]
 800e074:	7a1b      	ldrb	r3, [r3, #8]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d009      	beq.n	800e08e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	7a1a      	ldrb	r2, [r3, #8]
 800e07e:	4b63      	ldr	r3, [pc, #396]	; (800e20c <tcp_input+0x528>)
 800e080:	685b      	ldr	r3, [r3, #4]
 800e082:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e086:	3301      	adds	r3, #1
 800e088:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d122      	bne.n	800e0d4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	8b1a      	ldrh	r2, [r3, #24]
 800e092:	4b5d      	ldr	r3, [pc, #372]	; (800e208 <tcp_input+0x524>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	881b      	ldrh	r3, [r3, #0]
 800e098:	b29b      	uxth	r3, r3
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d11b      	bne.n	800e0d6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	8ada      	ldrh	r2, [r3, #22]
 800e0a2:	4b59      	ldr	r3, [pc, #356]	; (800e208 <tcp_input+0x524>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	885b      	ldrh	r3, [r3, #2]
 800e0a8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e0aa:	429a      	cmp	r2, r3
 800e0ac:	d113      	bne.n	800e0d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	685a      	ldr	r2, [r3, #4]
 800e0b2:	4b56      	ldr	r3, [pc, #344]	; (800e20c <tcp_input+0x528>)
 800e0b4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d10d      	bne.n	800e0d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	4b53      	ldr	r3, [pc, #332]	; (800e20c <tcp_input+0x528>)
 800e0c0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e0c2:	429a      	cmp	r2, r3
 800e0c4:	d107      	bne.n	800e0d6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e0c6:	69f8      	ldr	r0, [r7, #28]
 800e0c8:	f000 fb52 	bl	800e770 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f7fd fd33 	bl	800bb38 <pbuf_free>
        return;
 800e0d2:	e1ee      	b.n	800e4b2 <tcp_input+0x7ce>
        continue;
 800e0d4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	68db      	ldr	r3, [r3, #12]
 800e0da:	61fb      	str	r3, [r7, #28]
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d1bc      	bne.n	800e05c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e0e6:	4b51      	ldr	r3, [pc, #324]	; (800e22c <tcp_input+0x548>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	617b      	str	r3, [r7, #20]
 800e0ec:	e02a      	b.n	800e144 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	7a1b      	ldrb	r3, [r3, #8]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d00c      	beq.n	800e110 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	7a1a      	ldrb	r2, [r3, #8]
 800e0fa:	4b44      	ldr	r3, [pc, #272]	; (800e20c <tcp_input+0x528>)
 800e0fc:	685b      	ldr	r3, [r3, #4]
 800e0fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e102:	3301      	adds	r3, #1
 800e104:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e106:	429a      	cmp	r2, r3
 800e108:	d002      	beq.n	800e110 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	61bb      	str	r3, [r7, #24]
        continue;
 800e10e:	e016      	b.n	800e13e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	8ada      	ldrh	r2, [r3, #22]
 800e114:	4b3c      	ldr	r3, [pc, #240]	; (800e208 <tcp_input+0x524>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	885b      	ldrh	r3, [r3, #2]
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d10c      	bne.n	800e13a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	681a      	ldr	r2, [r3, #0]
 800e124:	4b39      	ldr	r3, [pc, #228]	; (800e20c <tcp_input+0x528>)
 800e126:	695b      	ldr	r3, [r3, #20]
 800e128:	429a      	cmp	r2, r3
 800e12a:	d00f      	beq.n	800e14c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e12c:	697b      	ldr	r3, [r7, #20]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d00d      	beq.n	800e14e <tcp_input+0x46a>
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d009      	beq.n	800e14e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	68db      	ldr	r3, [r3, #12]
 800e142:	617b      	str	r3, [r7, #20]
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d1d1      	bne.n	800e0ee <tcp_input+0x40a>
 800e14a:	e000      	b.n	800e14e <tcp_input+0x46a>
            break;
 800e14c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d014      	beq.n	800e17e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e154:	69bb      	ldr	r3, [r7, #24]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d00a      	beq.n	800e170 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	68da      	ldr	r2, [r3, #12]
 800e15e:	69bb      	ldr	r3, [r7, #24]
 800e160:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e162:	4b32      	ldr	r3, [pc, #200]	; (800e22c <tcp_input+0x548>)
 800e164:	681a      	ldr	r2, [r3, #0]
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e16a:	4a30      	ldr	r2, [pc, #192]	; (800e22c <tcp_input+0x548>)
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e170:	6978      	ldr	r0, [r7, #20]
 800e172:	f000 f9ff 	bl	800e574 <tcp_listen_input>
      }
      pbuf_free(p);
 800e176:	6878      	ldr	r0, [r7, #4]
 800e178:	f7fd fcde 	bl	800bb38 <pbuf_free>
      return;
 800e17c:	e199      	b.n	800e4b2 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e17e:	69fb      	ldr	r3, [r7, #28]
 800e180:	2b00      	cmp	r3, #0
 800e182:	f000 8160 	beq.w	800e446 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e186:	4b2a      	ldr	r3, [pc, #168]	; (800e230 <tcp_input+0x54c>)
 800e188:	2200      	movs	r2, #0
 800e18a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	891a      	ldrh	r2, [r3, #8]
 800e190:	4b27      	ldr	r3, [pc, #156]	; (800e230 <tcp_input+0x54c>)
 800e192:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e194:	4a26      	ldr	r2, [pc, #152]	; (800e230 <tcp_input+0x54c>)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e19a:	4b1b      	ldr	r3, [pc, #108]	; (800e208 <tcp_input+0x524>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4a24      	ldr	r2, [pc, #144]	; (800e230 <tcp_input+0x54c>)
 800e1a0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e1a2:	4b24      	ldr	r3, [pc, #144]	; (800e234 <tcp_input+0x550>)
 800e1a4:	2200      	movs	r2, #0
 800e1a6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e1a8:	4b23      	ldr	r3, [pc, #140]	; (800e238 <tcp_input+0x554>)
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e1ae:	4b23      	ldr	r3, [pc, #140]	; (800e23c <tcp_input+0x558>)
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e1b4:	4b22      	ldr	r3, [pc, #136]	; (800e240 <tcp_input+0x55c>)
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	f003 0308 	and.w	r3, r3, #8
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d006      	beq.n	800e1ce <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	7b5b      	ldrb	r3, [r3, #13]
 800e1c4:	f043 0301 	orr.w	r3, r3, #1
 800e1c8:	b2da      	uxtb	r2, r3
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e1ce:	69fb      	ldr	r3, [r7, #28]
 800e1d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d038      	beq.n	800e248 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e1d6:	69f8      	ldr	r0, [r7, #28]
 800e1d8:	f7ff f84c 	bl	800d274 <tcp_process_refused_data>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	f113 0f0d 	cmn.w	r3, #13
 800e1e2:	d007      	beq.n	800e1f4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e1e4:	69fb      	ldr	r3, [r7, #28]
 800e1e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d02d      	beq.n	800e248 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e1ec:	4b15      	ldr	r3, [pc, #84]	; (800e244 <tcp_input+0x560>)
 800e1ee:	881b      	ldrh	r3, [r3, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d029      	beq.n	800e248 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e1f4:	69fb      	ldr	r3, [r7, #28]
 800e1f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	f040 8104 	bne.w	800e406 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e1fe:	69f8      	ldr	r0, [r7, #28]
 800e200:	f003 fe28 	bl	8011e54 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e204:	e0ff      	b.n	800e406 <tcp_input+0x722>
 800e206:	bf00      	nop
 800e208:	200044f4 	.word	0x200044f4
 800e20c:	20007d28 	.word	0x20007d28
 800e210:	08017424 	.word	0x08017424
 800e214:	08017550 	.word	0x08017550
 800e218:	08017470 	.word	0x08017470
 800e21c:	2000b43c 	.word	0x2000b43c
 800e220:	0801757c 	.word	0x0801757c
 800e224:	2000b44c 	.word	0x2000b44c
 800e228:	080175a8 	.word	0x080175a8
 800e22c:	2000b444 	.word	0x2000b444
 800e230:	200044e4 	.word	0x200044e4
 800e234:	20004514 	.word	0x20004514
 800e238:	20004511 	.word	0x20004511
 800e23c:	2000450c 	.word	0x2000450c
 800e240:	20004510 	.word	0x20004510
 800e244:	2000450e 	.word	0x2000450e
      }
    }
    tcp_input_pcb = pcb;
 800e248:	4a9b      	ldr	r2, [pc, #620]	; (800e4b8 <tcp_input+0x7d4>)
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e24e:	69f8      	ldr	r0, [r7, #28]
 800e250:	f000 fb0a 	bl	800e868 <tcp_process>
 800e254:	4603      	mov	r3, r0
 800e256:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e258:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e25c:	f113 0f0d 	cmn.w	r3, #13
 800e260:	f000 80d3 	beq.w	800e40a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e264:	4b95      	ldr	r3, [pc, #596]	; (800e4bc <tcp_input+0x7d8>)
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	f003 0308 	and.w	r3, r3, #8
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d015      	beq.n	800e29c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e276:	2b00      	cmp	r3, #0
 800e278:	d008      	beq.n	800e28c <tcp_input+0x5a8>
 800e27a:	69fb      	ldr	r3, [r7, #28]
 800e27c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e280:	69fa      	ldr	r2, [r7, #28]
 800e282:	6912      	ldr	r2, [r2, #16]
 800e284:	f06f 010d 	mvn.w	r1, #13
 800e288:	4610      	mov	r0, r2
 800e28a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e28c:	69f9      	ldr	r1, [r7, #28]
 800e28e:	488c      	ldr	r0, [pc, #560]	; (800e4c0 <tcp_input+0x7dc>)
 800e290:	f7ff fbb0 	bl	800d9f4 <tcp_pcb_remove>
        tcp_free(pcb);
 800e294:	69f8      	ldr	r0, [r7, #28]
 800e296:	f7fd fefb 	bl	800c090 <tcp_free>
 800e29a:	e0c1      	b.n	800e420 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e29c:	2300      	movs	r3, #0
 800e29e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e2a0:	4b88      	ldr	r3, [pc, #544]	; (800e4c4 <tcp_input+0x7e0>)
 800e2a2:	881b      	ldrh	r3, [r3, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d01d      	beq.n	800e2e4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e2a8:	4b86      	ldr	r3, [pc, #536]	; (800e4c4 <tcp_input+0x7e0>)
 800e2aa:	881b      	ldrh	r3, [r3, #0]
 800e2ac:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e2ae:	69fb      	ldr	r3, [r7, #28]
 800e2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d00a      	beq.n	800e2ce <tcp_input+0x5ea>
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e2be:	69fa      	ldr	r2, [r7, #28]
 800e2c0:	6910      	ldr	r0, [r2, #16]
 800e2c2:	89fa      	ldrh	r2, [r7, #14]
 800e2c4:	69f9      	ldr	r1, [r7, #28]
 800e2c6:	4798      	blx	r3
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	74fb      	strb	r3, [r7, #19]
 800e2cc:	e001      	b.n	800e2d2 <tcp_input+0x5ee>
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e2d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e2d6:	f113 0f0d 	cmn.w	r3, #13
 800e2da:	f000 8098 	beq.w	800e40e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e2de:	4b79      	ldr	r3, [pc, #484]	; (800e4c4 <tcp_input+0x7e0>)
 800e2e0:	2200      	movs	r2, #0
 800e2e2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e2e4:	69f8      	ldr	r0, [r7, #28]
 800e2e6:	f000 f905 	bl	800e4f4 <tcp_input_delayed_close>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	f040 8090 	bne.w	800e412 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e2f2:	4b75      	ldr	r3, [pc, #468]	; (800e4c8 <tcp_input+0x7e4>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d041      	beq.n	800e37e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e2fa:	69fb      	ldr	r3, [r7, #28]
 800e2fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d006      	beq.n	800e310 <tcp_input+0x62c>
 800e302:	4b72      	ldr	r3, [pc, #456]	; (800e4cc <tcp_input+0x7e8>)
 800e304:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e308:	4971      	ldr	r1, [pc, #452]	; (800e4d0 <tcp_input+0x7ec>)
 800e30a:	4872      	ldr	r0, [pc, #456]	; (800e4d4 <tcp_input+0x7f0>)
 800e30c:	f006 fe5a 	bl	8014fc4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e310:	69fb      	ldr	r3, [r7, #28]
 800e312:	8b5b      	ldrh	r3, [r3, #26]
 800e314:	f003 0310 	and.w	r3, r3, #16
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d008      	beq.n	800e32e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e31c:	4b6a      	ldr	r3, [pc, #424]	; (800e4c8 <tcp_input+0x7e4>)
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4618      	mov	r0, r3
 800e322:	f7fd fc09 	bl	800bb38 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e326:	69f8      	ldr	r0, [r7, #28]
 800e328:	f7fe f992 	bl	800c650 <tcp_abort>
            goto aborted;
 800e32c:	e078      	b.n	800e420 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e32e:	69fb      	ldr	r3, [r7, #28]
 800e330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e334:	2b00      	cmp	r3, #0
 800e336:	d00c      	beq.n	800e352 <tcp_input+0x66e>
 800e338:	69fb      	ldr	r3, [r7, #28]
 800e33a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e33e:	69fb      	ldr	r3, [r7, #28]
 800e340:	6918      	ldr	r0, [r3, #16]
 800e342:	4b61      	ldr	r3, [pc, #388]	; (800e4c8 <tcp_input+0x7e4>)
 800e344:	681a      	ldr	r2, [r3, #0]
 800e346:	2300      	movs	r3, #0
 800e348:	69f9      	ldr	r1, [r7, #28]
 800e34a:	47a0      	blx	r4
 800e34c:	4603      	mov	r3, r0
 800e34e:	74fb      	strb	r3, [r7, #19]
 800e350:	e008      	b.n	800e364 <tcp_input+0x680>
 800e352:	4b5d      	ldr	r3, [pc, #372]	; (800e4c8 <tcp_input+0x7e4>)
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	2300      	movs	r3, #0
 800e358:	69f9      	ldr	r1, [r7, #28]
 800e35a:	2000      	movs	r0, #0
 800e35c:	f7ff f87c 	bl	800d458 <tcp_recv_null>
 800e360:	4603      	mov	r3, r0
 800e362:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e364:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e368:	f113 0f0d 	cmn.w	r3, #13
 800e36c:	d053      	beq.n	800e416 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e36e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d003      	beq.n	800e37e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e376:	4b54      	ldr	r3, [pc, #336]	; (800e4c8 <tcp_input+0x7e4>)
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	69fb      	ldr	r3, [r7, #28]
 800e37c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e37e:	4b4f      	ldr	r3, [pc, #316]	; (800e4bc <tcp_input+0x7d8>)
 800e380:	781b      	ldrb	r3, [r3, #0]
 800e382:	f003 0320 	and.w	r3, r3, #32
 800e386:	2b00      	cmp	r3, #0
 800e388:	d030      	beq.n	800e3ec <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e38a:	69fb      	ldr	r3, [r7, #28]
 800e38c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d009      	beq.n	800e3a6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e392:	69fb      	ldr	r3, [r7, #28]
 800e394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e396:	7b5a      	ldrb	r2, [r3, #13]
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e39c:	f042 0220 	orr.w	r2, r2, #32
 800e3a0:	b2d2      	uxtb	r2, r2
 800e3a2:	735a      	strb	r2, [r3, #13]
 800e3a4:	e022      	b.n	800e3ec <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3aa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e3ae:	d005      	beq.n	800e3bc <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	b29a      	uxth	r2, r3
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d00b      	beq.n	800e3de <tcp_input+0x6fa>
 800e3c6:	69fb      	ldr	r3, [r7, #28]
 800e3c8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	6918      	ldr	r0, [r3, #16]
 800e3d0:	2300      	movs	r3, #0
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	69f9      	ldr	r1, [r7, #28]
 800e3d6:	47a0      	blx	r4
 800e3d8:	4603      	mov	r3, r0
 800e3da:	74fb      	strb	r3, [r7, #19]
 800e3dc:	e001      	b.n	800e3e2 <tcp_input+0x6fe>
 800e3de:	2300      	movs	r3, #0
 800e3e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e3e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e3e6:	f113 0f0d 	cmn.w	r3, #13
 800e3ea:	d016      	beq.n	800e41a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e3ec:	4b32      	ldr	r3, [pc, #200]	; (800e4b8 <tcp_input+0x7d4>)
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e3f2:	69f8      	ldr	r0, [r7, #28]
 800e3f4:	f000 f87e 	bl	800e4f4 <tcp_input_delayed_close>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d10f      	bne.n	800e41e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e3fe:	69f8      	ldr	r0, [r7, #28]
 800e400:	f002 ff10 	bl	8011224 <tcp_output>
 800e404:	e00c      	b.n	800e420 <tcp_input+0x73c>
        goto aborted;
 800e406:	bf00      	nop
 800e408:	e00a      	b.n	800e420 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e40a:	bf00      	nop
 800e40c:	e008      	b.n	800e420 <tcp_input+0x73c>
              goto aborted;
 800e40e:	bf00      	nop
 800e410:	e006      	b.n	800e420 <tcp_input+0x73c>
          goto aborted;
 800e412:	bf00      	nop
 800e414:	e004      	b.n	800e420 <tcp_input+0x73c>
            goto aborted;
 800e416:	bf00      	nop
 800e418:	e002      	b.n	800e420 <tcp_input+0x73c>
              goto aborted;
 800e41a:	bf00      	nop
 800e41c:	e000      	b.n	800e420 <tcp_input+0x73c>
          goto aborted;
 800e41e:	bf00      	nop
    tcp_input_pcb = NULL;
 800e420:	4b25      	ldr	r3, [pc, #148]	; (800e4b8 <tcp_input+0x7d4>)
 800e422:	2200      	movs	r2, #0
 800e424:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e426:	4b28      	ldr	r3, [pc, #160]	; (800e4c8 <tcp_input+0x7e4>)
 800e428:	2200      	movs	r2, #0
 800e42a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e42c:	4b2a      	ldr	r3, [pc, #168]	; (800e4d8 <tcp_input+0x7f4>)
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d03d      	beq.n	800e4b0 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800e434:	4b28      	ldr	r3, [pc, #160]	; (800e4d8 <tcp_input+0x7f4>)
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	4618      	mov	r0, r3
 800e43a:	f7fd fb7d 	bl	800bb38 <pbuf_free>
      inseg.p = NULL;
 800e43e:	4b26      	ldr	r3, [pc, #152]	; (800e4d8 <tcp_input+0x7f4>)
 800e440:	2200      	movs	r2, #0
 800e442:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e444:	e034      	b.n	800e4b0 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e446:	4b25      	ldr	r3, [pc, #148]	; (800e4dc <tcp_input+0x7f8>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	899b      	ldrh	r3, [r3, #12]
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	4618      	mov	r0, r3
 800e450:	f7fb ff94 	bl	800a37c <lwip_htons>
 800e454:	4603      	mov	r3, r0
 800e456:	b2db      	uxtb	r3, r3
 800e458:	f003 0304 	and.w	r3, r3, #4
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d118      	bne.n	800e492 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e460:	4b1f      	ldr	r3, [pc, #124]	; (800e4e0 <tcp_input+0x7fc>)
 800e462:	6819      	ldr	r1, [r3, #0]
 800e464:	4b1f      	ldr	r3, [pc, #124]	; (800e4e4 <tcp_input+0x800>)
 800e466:	881b      	ldrh	r3, [r3, #0]
 800e468:	461a      	mov	r2, r3
 800e46a:	4b1f      	ldr	r3, [pc, #124]	; (800e4e8 <tcp_input+0x804>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e470:	4b1a      	ldr	r3, [pc, #104]	; (800e4dc <tcp_input+0x7f8>)
 800e472:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e474:	885b      	ldrh	r3, [r3, #2]
 800e476:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e478:	4a18      	ldr	r2, [pc, #96]	; (800e4dc <tcp_input+0x7f8>)
 800e47a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e47c:	8812      	ldrh	r2, [r2, #0]
 800e47e:	b292      	uxth	r2, r2
 800e480:	9202      	str	r2, [sp, #8]
 800e482:	9301      	str	r3, [sp, #4]
 800e484:	4b19      	ldr	r3, [pc, #100]	; (800e4ec <tcp_input+0x808>)
 800e486:	9300      	str	r3, [sp, #0]
 800e488:	4b19      	ldr	r3, [pc, #100]	; (800e4f0 <tcp_input+0x80c>)
 800e48a:	4602      	mov	r2, r0
 800e48c:	2000      	movs	r0, #0
 800e48e:	f003 fc8f 	bl	8011db0 <tcp_rst>
    pbuf_free(p);
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f7fd fb50 	bl	800bb38 <pbuf_free>
  return;
 800e498:	e00a      	b.n	800e4b0 <tcp_input+0x7cc>
    goto dropped;
 800e49a:	bf00      	nop
 800e49c:	e004      	b.n	800e4a8 <tcp_input+0x7c4>
dropped:
 800e49e:	bf00      	nop
 800e4a0:	e002      	b.n	800e4a8 <tcp_input+0x7c4>
      goto dropped;
 800e4a2:	bf00      	nop
 800e4a4:	e000      	b.n	800e4a8 <tcp_input+0x7c4>
      goto dropped;
 800e4a6:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f7fd fb45 	bl	800bb38 <pbuf_free>
 800e4ae:	e000      	b.n	800e4b2 <tcp_input+0x7ce>
  return;
 800e4b0:	bf00      	nop
}
 800e4b2:	3724      	adds	r7, #36	; 0x24
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd90      	pop	{r4, r7, pc}
 800e4b8:	2000b450 	.word	0x2000b450
 800e4bc:	20004511 	.word	0x20004511
 800e4c0:	2000b43c 	.word	0x2000b43c
 800e4c4:	2000450c 	.word	0x2000450c
 800e4c8:	20004514 	.word	0x20004514
 800e4cc:	08017424 	.word	0x08017424
 800e4d0:	080175d8 	.word	0x080175d8
 800e4d4:	08017470 	.word	0x08017470
 800e4d8:	200044e4 	.word	0x200044e4
 800e4dc:	200044f4 	.word	0x200044f4
 800e4e0:	20004508 	.word	0x20004508
 800e4e4:	2000450e 	.word	0x2000450e
 800e4e8:	20004504 	.word	0x20004504
 800e4ec:	20007d38 	.word	0x20007d38
 800e4f0:	20007d3c 	.word	0x20007d3c

0800e4f4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b082      	sub	sp, #8
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d106      	bne.n	800e510 <tcp_input_delayed_close+0x1c>
 800e502:	4b17      	ldr	r3, [pc, #92]	; (800e560 <tcp_input_delayed_close+0x6c>)
 800e504:	f240 225a 	movw	r2, #602	; 0x25a
 800e508:	4916      	ldr	r1, [pc, #88]	; (800e564 <tcp_input_delayed_close+0x70>)
 800e50a:	4817      	ldr	r0, [pc, #92]	; (800e568 <tcp_input_delayed_close+0x74>)
 800e50c:	f006 fd5a 	bl	8014fc4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e510:	4b16      	ldr	r3, [pc, #88]	; (800e56c <tcp_input_delayed_close+0x78>)
 800e512:	781b      	ldrb	r3, [r3, #0]
 800e514:	f003 0310 	and.w	r3, r3, #16
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d01c      	beq.n	800e556 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	8b5b      	ldrh	r3, [r3, #26]
 800e520:	f003 0310 	and.w	r3, r3, #16
 800e524:	2b00      	cmp	r3, #0
 800e526:	d10d      	bne.n	800e544 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d008      	beq.n	800e544 <tcp_input_delayed_close+0x50>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	6912      	ldr	r2, [r2, #16]
 800e53c:	f06f 010e 	mvn.w	r1, #14
 800e540:	4610      	mov	r0, r2
 800e542:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e544:	6879      	ldr	r1, [r7, #4]
 800e546:	480a      	ldr	r0, [pc, #40]	; (800e570 <tcp_input_delayed_close+0x7c>)
 800e548:	f7ff fa54 	bl	800d9f4 <tcp_pcb_remove>
    tcp_free(pcb);
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f7fd fd9f 	bl	800c090 <tcp_free>
    return 1;
 800e552:	2301      	movs	r3, #1
 800e554:	e000      	b.n	800e558 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e556:	2300      	movs	r3, #0
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3708      	adds	r7, #8
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}
 800e560:	08017424 	.word	0x08017424
 800e564:	080175f4 	.word	0x080175f4
 800e568:	08017470 	.word	0x08017470
 800e56c:	20004511 	.word	0x20004511
 800e570:	2000b43c 	.word	0x2000b43c

0800e574 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e574:	b590      	push	{r4, r7, lr}
 800e576:	b08b      	sub	sp, #44	; 0x2c
 800e578:	af04      	add	r7, sp, #16
 800e57a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e57c:	4b6f      	ldr	r3, [pc, #444]	; (800e73c <tcp_listen_input+0x1c8>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	f003 0304 	and.w	r3, r3, #4
 800e584:	2b00      	cmp	r3, #0
 800e586:	f040 80d3 	bne.w	800e730 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d106      	bne.n	800e59e <tcp_listen_input+0x2a>
 800e590:	4b6b      	ldr	r3, [pc, #428]	; (800e740 <tcp_listen_input+0x1cc>)
 800e592:	f240 2281 	movw	r2, #641	; 0x281
 800e596:	496b      	ldr	r1, [pc, #428]	; (800e744 <tcp_listen_input+0x1d0>)
 800e598:	486b      	ldr	r0, [pc, #428]	; (800e748 <tcp_listen_input+0x1d4>)
 800e59a:	f006 fd13 	bl	8014fc4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e59e:	4b67      	ldr	r3, [pc, #412]	; (800e73c <tcp_listen_input+0x1c8>)
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	f003 0310 	and.w	r3, r3, #16
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d019      	beq.n	800e5de <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5aa:	4b68      	ldr	r3, [pc, #416]	; (800e74c <tcp_listen_input+0x1d8>)
 800e5ac:	6819      	ldr	r1, [r3, #0]
 800e5ae:	4b68      	ldr	r3, [pc, #416]	; (800e750 <tcp_listen_input+0x1dc>)
 800e5b0:	881b      	ldrh	r3, [r3, #0]
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	4b67      	ldr	r3, [pc, #412]	; (800e754 <tcp_listen_input+0x1e0>)
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e5ba:	4b67      	ldr	r3, [pc, #412]	; (800e758 <tcp_listen_input+0x1e4>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5be:	885b      	ldrh	r3, [r3, #2]
 800e5c0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e5c2:	4a65      	ldr	r2, [pc, #404]	; (800e758 <tcp_listen_input+0x1e4>)
 800e5c4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e5c6:	8812      	ldrh	r2, [r2, #0]
 800e5c8:	b292      	uxth	r2, r2
 800e5ca:	9202      	str	r2, [sp, #8]
 800e5cc:	9301      	str	r3, [sp, #4]
 800e5ce:	4b63      	ldr	r3, [pc, #396]	; (800e75c <tcp_listen_input+0x1e8>)
 800e5d0:	9300      	str	r3, [sp, #0]
 800e5d2:	4b63      	ldr	r3, [pc, #396]	; (800e760 <tcp_listen_input+0x1ec>)
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f003 fbea 	bl	8011db0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e5dc:	e0aa      	b.n	800e734 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800e5de:	4b57      	ldr	r3, [pc, #348]	; (800e73c <tcp_listen_input+0x1c8>)
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	f003 0302 	and.w	r3, r3, #2
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	f000 80a4 	beq.w	800e734 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	7d5b      	ldrb	r3, [r3, #21]
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f7ff f855 	bl	800d6a0 <tcp_alloc>
 800e5f6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d111      	bne.n	800e622 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	699b      	ldr	r3, [r3, #24]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d00a      	beq.n	800e61c <tcp_listen_input+0xa8>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	699b      	ldr	r3, [r3, #24]
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	6910      	ldr	r0, [r2, #16]
 800e60e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e612:	2100      	movs	r1, #0
 800e614:	4798      	blx	r3
 800e616:	4603      	mov	r3, r0
 800e618:	73bb      	strb	r3, [r7, #14]
      return;
 800e61a:	e08c      	b.n	800e736 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e61c:	23f0      	movs	r3, #240	; 0xf0
 800e61e:	73bb      	strb	r3, [r7, #14]
      return;
 800e620:	e089      	b.n	800e736 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e622:	4b50      	ldr	r3, [pc, #320]	; (800e764 <tcp_listen_input+0x1f0>)
 800e624:	695a      	ldr	r2, [r3, #20]
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e62a:	4b4e      	ldr	r3, [pc, #312]	; (800e764 <tcp_listen_input+0x1f0>)
 800e62c:	691a      	ldr	r2, [r3, #16]
 800e62e:	697b      	ldr	r3, [r7, #20]
 800e630:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	8ada      	ldrh	r2, [r3, #22]
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e63a:	4b47      	ldr	r3, [pc, #284]	; (800e758 <tcp_listen_input+0x1e4>)
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	881b      	ldrh	r3, [r3, #0]
 800e640:	b29a      	uxth	r2, r3
 800e642:	697b      	ldr	r3, [r7, #20]
 800e644:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	2203      	movs	r2, #3
 800e64a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e64c:	4b41      	ldr	r3, [pc, #260]	; (800e754 <tcp_listen_input+0x1e0>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	1c5a      	adds	r2, r3, #1
 800e652:	697b      	ldr	r3, [r7, #20]
 800e654:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e65a:	697b      	ldr	r3, [r7, #20]
 800e65c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e65e:	6978      	ldr	r0, [r7, #20]
 800e660:	f7ff fa5c 	bl	800db1c <tcp_next_iss>
 800e664:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	693a      	ldr	r2, [r7, #16]
 800e66a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	693a      	ldr	r2, [r7, #16]
 800e670:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	693a      	ldr	r2, [r7, #16]
 800e676:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	693a      	ldr	r2, [r7, #16]
 800e67c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e67e:	4b35      	ldr	r3, [pc, #212]	; (800e754 <tcp_listen_input+0x1e0>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	1e5a      	subs	r2, r3, #1
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	691a      	ldr	r2, [r3, #16]
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	7a5b      	ldrb	r3, [r3, #9]
 800e69a:	f003 030c 	and.w	r3, r3, #12
 800e69e:	b2da      	uxtb	r2, r3
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	7a1a      	ldrb	r2, [r3, #8]
 800e6a8:	697b      	ldr	r3, [r7, #20]
 800e6aa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e6ac:	4b2e      	ldr	r3, [pc, #184]	; (800e768 <tcp_listen_input+0x1f4>)
 800e6ae:	681a      	ldr	r2, [r3, #0]
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	60da      	str	r2, [r3, #12]
 800e6b4:	4a2c      	ldr	r2, [pc, #176]	; (800e768 <tcp_listen_input+0x1f4>)
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	6013      	str	r3, [r2, #0]
 800e6ba:	f003 fd3b 	bl	8012134 <tcp_timer_needed>
 800e6be:	4b2b      	ldr	r3, [pc, #172]	; (800e76c <tcp_listen_input+0x1f8>)
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e6c4:	6978      	ldr	r0, [r7, #20]
 800e6c6:	f001 fd8f 	bl	80101e8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e6ca:	4b23      	ldr	r3, [pc, #140]	; (800e758 <tcp_listen_input+0x1e4>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	89db      	ldrh	r3, [r3, #14]
 800e6d0:	b29a      	uxth	r2, r3
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e6e8:	697b      	ldr	r3, [r7, #20]
 800e6ea:	3304      	adds	r3, #4
 800e6ec:	4618      	mov	r0, r3
 800e6ee:	f005 f92d 	bl	801394c <ip4_route>
 800e6f2:	4601      	mov	r1, r0
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	3304      	adds	r3, #4
 800e6f8:	461a      	mov	r2, r3
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f7ff fa34 	bl	800db68 <tcp_eff_send_mss_netif>
 800e700:	4603      	mov	r3, r0
 800e702:	461a      	mov	r2, r3
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e708:	2112      	movs	r1, #18
 800e70a:	6978      	ldr	r0, [r7, #20]
 800e70c:	f002 fc9c 	bl	8011048 <tcp_enqueue_flags>
 800e710:	4603      	mov	r3, r0
 800e712:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d004      	beq.n	800e726 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e71c:	2100      	movs	r1, #0
 800e71e:	6978      	ldr	r0, [r7, #20]
 800e720:	f7fd fed8 	bl	800c4d4 <tcp_abandon>
      return;
 800e724:	e007      	b.n	800e736 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800e726:	6978      	ldr	r0, [r7, #20]
 800e728:	f002 fd7c 	bl	8011224 <tcp_output>
  return;
 800e72c:	bf00      	nop
 800e72e:	e001      	b.n	800e734 <tcp_listen_input+0x1c0>
    return;
 800e730:	bf00      	nop
 800e732:	e000      	b.n	800e736 <tcp_listen_input+0x1c2>
  return;
 800e734:	bf00      	nop
}
 800e736:	371c      	adds	r7, #28
 800e738:	46bd      	mov	sp, r7
 800e73a:	bd90      	pop	{r4, r7, pc}
 800e73c:	20004510 	.word	0x20004510
 800e740:	08017424 	.word	0x08017424
 800e744:	0801761c 	.word	0x0801761c
 800e748:	08017470 	.word	0x08017470
 800e74c:	20004508 	.word	0x20004508
 800e750:	2000450e 	.word	0x2000450e
 800e754:	20004504 	.word	0x20004504
 800e758:	200044f4 	.word	0x200044f4
 800e75c:	20007d38 	.word	0x20007d38
 800e760:	20007d3c 	.word	0x20007d3c
 800e764:	20007d28 	.word	0x20007d28
 800e768:	2000b43c 	.word	0x2000b43c
 800e76c:	2000b438 	.word	0x2000b438

0800e770 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b086      	sub	sp, #24
 800e774:	af04      	add	r7, sp, #16
 800e776:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e778:	4b30      	ldr	r3, [pc, #192]	; (800e83c <tcp_timewait_input+0xcc>)
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	f003 0304 	and.w	r3, r3, #4
 800e780:	2b00      	cmp	r3, #0
 800e782:	d154      	bne.n	800e82e <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d106      	bne.n	800e798 <tcp_timewait_input+0x28>
 800e78a:	4b2d      	ldr	r3, [pc, #180]	; (800e840 <tcp_timewait_input+0xd0>)
 800e78c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e790:	492c      	ldr	r1, [pc, #176]	; (800e844 <tcp_timewait_input+0xd4>)
 800e792:	482d      	ldr	r0, [pc, #180]	; (800e848 <tcp_timewait_input+0xd8>)
 800e794:	f006 fc16 	bl	8014fc4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e798:	4b28      	ldr	r3, [pc, #160]	; (800e83c <tcp_timewait_input+0xcc>)
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	f003 0302 	and.w	r3, r3, #2
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d02a      	beq.n	800e7fa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e7a4:	4b29      	ldr	r3, [pc, #164]	; (800e84c <tcp_timewait_input+0xdc>)
 800e7a6:	681a      	ldr	r2, [r3, #0]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ac:	1ad3      	subs	r3, r2, r3
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	db2d      	blt.n	800e80e <tcp_timewait_input+0x9e>
 800e7b2:	4b26      	ldr	r3, [pc, #152]	; (800e84c <tcp_timewait_input+0xdc>)
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ba:	6879      	ldr	r1, [r7, #4]
 800e7bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e7be:	440b      	add	r3, r1
 800e7c0:	1ad3      	subs	r3, r2, r3
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	dc23      	bgt.n	800e80e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7c6:	4b22      	ldr	r3, [pc, #136]	; (800e850 <tcp_timewait_input+0xe0>)
 800e7c8:	6819      	ldr	r1, [r3, #0]
 800e7ca:	4b22      	ldr	r3, [pc, #136]	; (800e854 <tcp_timewait_input+0xe4>)
 800e7cc:	881b      	ldrh	r3, [r3, #0]
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	4b1e      	ldr	r3, [pc, #120]	; (800e84c <tcp_timewait_input+0xdc>)
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7d6:	4b20      	ldr	r3, [pc, #128]	; (800e858 <tcp_timewait_input+0xe8>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7da:	885b      	ldrh	r3, [r3, #2]
 800e7dc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7de:	4a1e      	ldr	r2, [pc, #120]	; (800e858 <tcp_timewait_input+0xe8>)
 800e7e0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7e2:	8812      	ldrh	r2, [r2, #0]
 800e7e4:	b292      	uxth	r2, r2
 800e7e6:	9202      	str	r2, [sp, #8]
 800e7e8:	9301      	str	r3, [sp, #4]
 800e7ea:	4b1c      	ldr	r3, [pc, #112]	; (800e85c <tcp_timewait_input+0xec>)
 800e7ec:	9300      	str	r3, [sp, #0]
 800e7ee:	4b1c      	ldr	r3, [pc, #112]	; (800e860 <tcp_timewait_input+0xf0>)
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f003 fadc 	bl	8011db0 <tcp_rst>
      return;
 800e7f8:	e01c      	b.n	800e834 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800e7fa:	4b10      	ldr	r3, [pc, #64]	; (800e83c <tcp_timewait_input+0xcc>)
 800e7fc:	781b      	ldrb	r3, [r3, #0]
 800e7fe:	f003 0301 	and.w	r3, r3, #1
 800e802:	2b00      	cmp	r3, #0
 800e804:	d003      	beq.n	800e80e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e806:	4b17      	ldr	r3, [pc, #92]	; (800e864 <tcp_timewait_input+0xf4>)
 800e808:	681a      	ldr	r2, [r3, #0]
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e80e:	4b11      	ldr	r3, [pc, #68]	; (800e854 <tcp_timewait_input+0xe4>)
 800e810:	881b      	ldrh	r3, [r3, #0]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00d      	beq.n	800e832 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	8b5b      	ldrh	r3, [r3, #26]
 800e81a:	f043 0302 	orr.w	r3, r3, #2
 800e81e:	b29a      	uxth	r2, r3
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f002 fcfd 	bl	8011224 <tcp_output>
  }
  return;
 800e82a:	bf00      	nop
 800e82c:	e001      	b.n	800e832 <tcp_timewait_input+0xc2>
    return;
 800e82e:	bf00      	nop
 800e830:	e000      	b.n	800e834 <tcp_timewait_input+0xc4>
  return;
 800e832:	bf00      	nop
}
 800e834:	3708      	adds	r7, #8
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}
 800e83a:	bf00      	nop
 800e83c:	20004510 	.word	0x20004510
 800e840:	08017424 	.word	0x08017424
 800e844:	0801763c 	.word	0x0801763c
 800e848:	08017470 	.word	0x08017470
 800e84c:	20004504 	.word	0x20004504
 800e850:	20004508 	.word	0x20004508
 800e854:	2000450e 	.word	0x2000450e
 800e858:	200044f4 	.word	0x200044f4
 800e85c:	20007d38 	.word	0x20007d38
 800e860:	20007d3c 	.word	0x20007d3c
 800e864:	2000b440 	.word	0x2000b440

0800e868 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e868:	b590      	push	{r4, r7, lr}
 800e86a:	b08d      	sub	sp, #52	; 0x34
 800e86c:	af04      	add	r7, sp, #16
 800e86e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e870:	2300      	movs	r3, #0
 800e872:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e874:	2300      	movs	r3, #0
 800e876:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d106      	bne.n	800e88c <tcp_process+0x24>
 800e87e:	4ba5      	ldr	r3, [pc, #660]	; (800eb14 <tcp_process+0x2ac>)
 800e880:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e884:	49a4      	ldr	r1, [pc, #656]	; (800eb18 <tcp_process+0x2b0>)
 800e886:	48a5      	ldr	r0, [pc, #660]	; (800eb1c <tcp_process+0x2b4>)
 800e888:	f006 fb9c 	bl	8014fc4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e88c:	4ba4      	ldr	r3, [pc, #656]	; (800eb20 <tcp_process+0x2b8>)
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	f003 0304 	and.w	r3, r3, #4
 800e894:	2b00      	cmp	r3, #0
 800e896:	d04e      	beq.n	800e936 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	7d1b      	ldrb	r3, [r3, #20]
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	d108      	bne.n	800e8b2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8a4:	4b9f      	ldr	r3, [pc, #636]	; (800eb24 <tcp_process+0x2bc>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d123      	bne.n	800e8f4 <tcp_process+0x8c>
        acceptable = 1;
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	76fb      	strb	r3, [r7, #27]
 800e8b0:	e020      	b.n	800e8f4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8b6:	4b9c      	ldr	r3, [pc, #624]	; (800eb28 <tcp_process+0x2c0>)
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	429a      	cmp	r2, r3
 800e8bc:	d102      	bne.n	800e8c4 <tcp_process+0x5c>
        acceptable = 1;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	76fb      	strb	r3, [r7, #27]
 800e8c2:	e017      	b.n	800e8f4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e8c4:	4b98      	ldr	r3, [pc, #608]	; (800eb28 <tcp_process+0x2c0>)
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8cc:	1ad3      	subs	r3, r2, r3
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	db10      	blt.n	800e8f4 <tcp_process+0x8c>
 800e8d2:	4b95      	ldr	r3, [pc, #596]	; (800eb28 <tcp_process+0x2c0>)
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8da:	6879      	ldr	r1, [r7, #4]
 800e8dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e8de:	440b      	add	r3, r1
 800e8e0:	1ad3      	subs	r3, r2, r3
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	dc06      	bgt.n	800e8f4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	8b5b      	ldrh	r3, [r3, #26]
 800e8ea:	f043 0302 	orr.w	r3, r3, #2
 800e8ee:	b29a      	uxth	r2, r3
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e8f4:	7efb      	ldrb	r3, [r7, #27]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d01b      	beq.n	800e932 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	7d1b      	ldrb	r3, [r3, #20]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d106      	bne.n	800e910 <tcp_process+0xa8>
 800e902:	4b84      	ldr	r3, [pc, #528]	; (800eb14 <tcp_process+0x2ac>)
 800e904:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e908:	4988      	ldr	r1, [pc, #544]	; (800eb2c <tcp_process+0x2c4>)
 800e90a:	4884      	ldr	r0, [pc, #528]	; (800eb1c <tcp_process+0x2b4>)
 800e90c:	f006 fb5a 	bl	8014fc4 <iprintf>
      recv_flags |= TF_RESET;
 800e910:	4b87      	ldr	r3, [pc, #540]	; (800eb30 <tcp_process+0x2c8>)
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	f043 0308 	orr.w	r3, r3, #8
 800e918:	b2da      	uxtb	r2, r3
 800e91a:	4b85      	ldr	r3, [pc, #532]	; (800eb30 <tcp_process+0x2c8>)
 800e91c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	8b5b      	ldrh	r3, [r3, #26]
 800e922:	f023 0301 	bic.w	r3, r3, #1
 800e926:	b29a      	uxth	r2, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e92c:	f06f 030d 	mvn.w	r3, #13
 800e930:	e37a      	b.n	800f028 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e932:	2300      	movs	r3, #0
 800e934:	e378      	b.n	800f028 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e936:	4b7a      	ldr	r3, [pc, #488]	; (800eb20 <tcp_process+0x2b8>)
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	f003 0302 	and.w	r3, r3, #2
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d010      	beq.n	800e964 <tcp_process+0xfc>
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	7d1b      	ldrb	r3, [r3, #20]
 800e946:	2b02      	cmp	r3, #2
 800e948:	d00c      	beq.n	800e964 <tcp_process+0xfc>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	7d1b      	ldrb	r3, [r3, #20]
 800e94e:	2b03      	cmp	r3, #3
 800e950:	d008      	beq.n	800e964 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	8b5b      	ldrh	r3, [r3, #26]
 800e956:	f043 0302 	orr.w	r3, r3, #2
 800e95a:	b29a      	uxth	r2, r3
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e960:	2300      	movs	r3, #0
 800e962:	e361      	b.n	800f028 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	8b5b      	ldrh	r3, [r3, #26]
 800e968:	f003 0310 	and.w	r3, r3, #16
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d103      	bne.n	800e978 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e970:	4b70      	ldr	r3, [pc, #448]	; (800eb34 <tcp_process+0x2cc>)
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2200      	movs	r2, #0
 800e97c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2200      	movs	r2, #0
 800e984:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f001 fc2d 	bl	80101e8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	7d1b      	ldrb	r3, [r3, #20]
 800e992:	3b02      	subs	r3, #2
 800e994:	2b07      	cmp	r3, #7
 800e996:	f200 8337 	bhi.w	800f008 <tcp_process+0x7a0>
 800e99a:	a201      	add	r2, pc, #4	; (adr r2, 800e9a0 <tcp_process+0x138>)
 800e99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9a0:	0800e9c1 	.word	0x0800e9c1
 800e9a4:	0800ebf1 	.word	0x0800ebf1
 800e9a8:	0800ed69 	.word	0x0800ed69
 800e9ac:	0800ed93 	.word	0x0800ed93
 800e9b0:	0800eeb7 	.word	0x0800eeb7
 800e9b4:	0800ed69 	.word	0x0800ed69
 800e9b8:	0800ef43 	.word	0x0800ef43
 800e9bc:	0800efd3 	.word	0x0800efd3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e9c0:	4b57      	ldr	r3, [pc, #348]	; (800eb20 <tcp_process+0x2b8>)
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	f003 0310 	and.w	r3, r3, #16
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	f000 80e4 	beq.w	800eb96 <tcp_process+0x32e>
 800e9ce:	4b54      	ldr	r3, [pc, #336]	; (800eb20 <tcp_process+0x2b8>)
 800e9d0:	781b      	ldrb	r3, [r3, #0]
 800e9d2:	f003 0302 	and.w	r3, r3, #2
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	f000 80dd 	beq.w	800eb96 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9e0:	1c5a      	adds	r2, r3, #1
 800e9e2:	4b50      	ldr	r3, [pc, #320]	; (800eb24 <tcp_process+0x2bc>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	f040 80d5 	bne.w	800eb96 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e9ec:	4b4e      	ldr	r3, [pc, #312]	; (800eb28 <tcp_process+0x2c0>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	1c5a      	adds	r2, r3, #1
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e9fe:	4b49      	ldr	r3, [pc, #292]	; (800eb24 <tcp_process+0x2bc>)
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ea06:	4b4c      	ldr	r3, [pc, #304]	; (800eb38 <tcp_process+0x2d0>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	89db      	ldrh	r3, [r3, #14]
 800ea0c:	b29a      	uxth	r2, r3
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ea20:	4b41      	ldr	r3, [pc, #260]	; (800eb28 <tcp_process+0x2c0>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	1e5a      	subs	r2, r3, #1
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2204      	movs	r2, #4
 800ea2e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	3304      	adds	r3, #4
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f004 ff87 	bl	801394c <ip4_route>
 800ea3e:	4601      	mov	r1, r0
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	3304      	adds	r3, #4
 800ea44:	461a      	mov	r2, r3
 800ea46:	4620      	mov	r0, r4
 800ea48:	f7ff f88e 	bl	800db68 <tcp_eff_send_mss_netif>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	461a      	mov	r2, r3
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea58:	009a      	lsls	r2, r3, #2
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea5e:	005b      	lsls	r3, r3, #1
 800ea60:	f241 111c 	movw	r1, #4380	; 0x111c
 800ea64:	428b      	cmp	r3, r1
 800ea66:	bf38      	it	cc
 800ea68:	460b      	movcc	r3, r1
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d204      	bcs.n	800ea78 <tcp_process+0x210>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea72:	009b      	lsls	r3, r3, #2
 800ea74:	b29b      	uxth	r3, r3
 800ea76:	e00d      	b.n	800ea94 <tcp_process+0x22c>
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea7c:	005b      	lsls	r3, r3, #1
 800ea7e:	f241 121c 	movw	r2, #4380	; 0x111c
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d904      	bls.n	800ea90 <tcp_process+0x228>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea8a:	005b      	lsls	r3, r3, #1
 800ea8c:	b29b      	uxth	r3, r3
 800ea8e:	e001      	b.n	800ea94 <tcp_process+0x22c>
 800ea90:	f241 131c 	movw	r3, #4380	; 0x111c
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d106      	bne.n	800eab2 <tcp_process+0x24a>
 800eaa4:	4b1b      	ldr	r3, [pc, #108]	; (800eb14 <tcp_process+0x2ac>)
 800eaa6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800eaaa:	4924      	ldr	r1, [pc, #144]	; (800eb3c <tcp_process+0x2d4>)
 800eaac:	481b      	ldr	r0, [pc, #108]	; (800eb1c <tcp_process+0x2b4>)
 800eaae:	f006 fa89 	bl	8014fc4 <iprintf>
        --pcb->snd_queuelen;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eab8:	3b01      	subs	r3, #1
 800eaba:	b29a      	uxth	r2, r3
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eac6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800eac8:	69fb      	ldr	r3, [r7, #28]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d111      	bne.n	800eaf2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ead2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d106      	bne.n	800eae8 <tcp_process+0x280>
 800eada:	4b0e      	ldr	r3, [pc, #56]	; (800eb14 <tcp_process+0x2ac>)
 800eadc:	f44f 725d 	mov.w	r2, #884	; 0x374
 800eae0:	4917      	ldr	r1, [pc, #92]	; (800eb40 <tcp_process+0x2d8>)
 800eae2:	480e      	ldr	r0, [pc, #56]	; (800eb1c <tcp_process+0x2b4>)
 800eae4:	f006 fa6e 	bl	8014fc4 <iprintf>
          pcb->unsent = rseg->next;
 800eae8:	69fb      	ldr	r3, [r7, #28]
 800eaea:	681a      	ldr	r2, [r3, #0]
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	66da      	str	r2, [r3, #108]	; 0x6c
 800eaf0:	e003      	b.n	800eafa <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800eaf2:	69fb      	ldr	r3, [r7, #28]
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800eafa:	69f8      	ldr	r0, [r7, #28]
 800eafc:	f7fe fc4a 	bl	800d394 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d11d      	bne.n	800eb44 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb0e:	861a      	strh	r2, [r3, #48]	; 0x30
 800eb10:	e01f      	b.n	800eb52 <tcp_process+0x2ea>
 800eb12:	bf00      	nop
 800eb14:	08017424 	.word	0x08017424
 800eb18:	0801765c 	.word	0x0801765c
 800eb1c:	08017470 	.word	0x08017470
 800eb20:	20004510 	.word	0x20004510
 800eb24:	20004508 	.word	0x20004508
 800eb28:	20004504 	.word	0x20004504
 800eb2c:	08017678 	.word	0x08017678
 800eb30:	20004511 	.word	0x20004511
 800eb34:	2000b440 	.word	0x2000b440
 800eb38:	200044f4 	.word	0x200044f4
 800eb3c:	08017698 	.word	0x08017698
 800eb40:	080176b0 	.word	0x080176b0
        } else {
          pcb->rtime = 0;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2200      	movs	r2, #0
 800eb48:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d00a      	beq.n	800eb72 <tcp_process+0x30a>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb62:	687a      	ldr	r2, [r7, #4]
 800eb64:	6910      	ldr	r0, [r2, #16]
 800eb66:	2200      	movs	r2, #0
 800eb68:	6879      	ldr	r1, [r7, #4]
 800eb6a:	4798      	blx	r3
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	76bb      	strb	r3, [r7, #26]
 800eb70:	e001      	b.n	800eb76 <tcp_process+0x30e>
 800eb72:	2300      	movs	r3, #0
 800eb74:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800eb76:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eb7a:	f113 0f0d 	cmn.w	r3, #13
 800eb7e:	d102      	bne.n	800eb86 <tcp_process+0x31e>
          return ERR_ABRT;
 800eb80:	f06f 030c 	mvn.w	r3, #12
 800eb84:	e250      	b.n	800f028 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	8b5b      	ldrh	r3, [r3, #26]
 800eb8a:	f043 0302 	orr.w	r3, r3, #2
 800eb8e:	b29a      	uxth	r2, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800eb94:	e23a      	b.n	800f00c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800eb96:	4b9d      	ldr	r3, [pc, #628]	; (800ee0c <tcp_process+0x5a4>)
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	f003 0310 	and.w	r3, r3, #16
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	f000 8234 	beq.w	800f00c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eba4:	4b9a      	ldr	r3, [pc, #616]	; (800ee10 <tcp_process+0x5a8>)
 800eba6:	6819      	ldr	r1, [r3, #0]
 800eba8:	4b9a      	ldr	r3, [pc, #616]	; (800ee14 <tcp_process+0x5ac>)
 800ebaa:	881b      	ldrh	r3, [r3, #0]
 800ebac:	461a      	mov	r2, r3
 800ebae:	4b9a      	ldr	r3, [pc, #616]	; (800ee18 <tcp_process+0x5b0>)
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebb4:	4b99      	ldr	r3, [pc, #612]	; (800ee1c <tcp_process+0x5b4>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebb8:	885b      	ldrh	r3, [r3, #2]
 800ebba:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebbc:	4a97      	ldr	r2, [pc, #604]	; (800ee1c <tcp_process+0x5b4>)
 800ebbe:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebc0:	8812      	ldrh	r2, [r2, #0]
 800ebc2:	b292      	uxth	r2, r2
 800ebc4:	9202      	str	r2, [sp, #8]
 800ebc6:	9301      	str	r3, [sp, #4]
 800ebc8:	4b95      	ldr	r3, [pc, #596]	; (800ee20 <tcp_process+0x5b8>)
 800ebca:	9300      	str	r3, [sp, #0]
 800ebcc:	4b95      	ldr	r3, [pc, #596]	; (800ee24 <tcp_process+0x5bc>)
 800ebce:	4602      	mov	r2, r0
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f003 f8ed 	bl	8011db0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ebdc:	2b05      	cmp	r3, #5
 800ebde:	f200 8215 	bhi.w	800f00c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f002 feab 	bl	8011944 <tcp_rexmit_rto>
      break;
 800ebee:	e20d      	b.n	800f00c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ebf0:	4b86      	ldr	r3, [pc, #536]	; (800ee0c <tcp_process+0x5a4>)
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	f003 0310 	and.w	r3, r3, #16
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	f000 80a1 	beq.w	800ed40 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ebfe:	4b84      	ldr	r3, [pc, #528]	; (800ee10 <tcp_process+0x5a8>)
 800ec00:	681a      	ldr	r2, [r3, #0]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec06:	1ad3      	subs	r3, r2, r3
 800ec08:	3b01      	subs	r3, #1
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	db7e      	blt.n	800ed0c <tcp_process+0x4a4>
 800ec0e:	4b80      	ldr	r3, [pc, #512]	; (800ee10 <tcp_process+0x5a8>)
 800ec10:	681a      	ldr	r2, [r3, #0]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec16:	1ad3      	subs	r3, r2, r3
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	dc77      	bgt.n	800ed0c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2204      	movs	r2, #4
 800ec20:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d102      	bne.n	800ec30 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ec2a:	23fa      	movs	r3, #250	; 0xfa
 800ec2c:	76bb      	strb	r3, [r7, #26]
 800ec2e:	e01d      	b.n	800ec6c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec34:	699b      	ldr	r3, [r3, #24]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d106      	bne.n	800ec48 <tcp_process+0x3e0>
 800ec3a:	4b7b      	ldr	r3, [pc, #492]	; (800ee28 <tcp_process+0x5c0>)
 800ec3c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800ec40:	497a      	ldr	r1, [pc, #488]	; (800ee2c <tcp_process+0x5c4>)
 800ec42:	487b      	ldr	r0, [pc, #492]	; (800ee30 <tcp_process+0x5c8>)
 800ec44:	f006 f9be 	bl	8014fc4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec4c:	699b      	ldr	r3, [r3, #24]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d00a      	beq.n	800ec68 <tcp_process+0x400>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec56:	699b      	ldr	r3, [r3, #24]
 800ec58:	687a      	ldr	r2, [r7, #4]
 800ec5a:	6910      	ldr	r0, [r2, #16]
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	6879      	ldr	r1, [r7, #4]
 800ec60:	4798      	blx	r3
 800ec62:	4603      	mov	r3, r0
 800ec64:	76bb      	strb	r3, [r7, #26]
 800ec66:	e001      	b.n	800ec6c <tcp_process+0x404>
 800ec68:	23f0      	movs	r3, #240	; 0xf0
 800ec6a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800ec6c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d00a      	beq.n	800ec8a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800ec74:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ec78:	f113 0f0d 	cmn.w	r3, #13
 800ec7c:	d002      	beq.n	800ec84 <tcp_process+0x41c>
              tcp_abort(pcb);
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f7fd fce6 	bl	800c650 <tcp_abort>
            }
            return ERR_ABRT;
 800ec84:	f06f 030c 	mvn.w	r3, #12
 800ec88:	e1ce      	b.n	800f028 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f000 fae0 	bl	800f250 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800ec90:	4b68      	ldr	r3, [pc, #416]	; (800ee34 <tcp_process+0x5cc>)
 800ec92:	881b      	ldrh	r3, [r3, #0]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d005      	beq.n	800eca4 <tcp_process+0x43c>
            recv_acked--;
 800ec98:	4b66      	ldr	r3, [pc, #408]	; (800ee34 <tcp_process+0x5cc>)
 800ec9a:	881b      	ldrh	r3, [r3, #0]
 800ec9c:	3b01      	subs	r3, #1
 800ec9e:	b29a      	uxth	r2, r3
 800eca0:	4b64      	ldr	r3, [pc, #400]	; (800ee34 <tcp_process+0x5cc>)
 800eca2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eca8:	009a      	lsls	r2, r3, #2
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecae:	005b      	lsls	r3, r3, #1
 800ecb0:	f241 111c 	movw	r1, #4380	; 0x111c
 800ecb4:	428b      	cmp	r3, r1
 800ecb6:	bf38      	it	cc
 800ecb8:	460b      	movcc	r3, r1
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d204      	bcs.n	800ecc8 <tcp_process+0x460>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	b29b      	uxth	r3, r3
 800ecc6:	e00d      	b.n	800ece4 <tcp_process+0x47c>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eccc:	005b      	lsls	r3, r3, #1
 800ecce:	f241 121c 	movw	r2, #4380	; 0x111c
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d904      	bls.n	800ece0 <tcp_process+0x478>
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecda:	005b      	lsls	r3, r3, #1
 800ecdc:	b29b      	uxth	r3, r3
 800ecde:	e001      	b.n	800ece4 <tcp_process+0x47c>
 800ece0:	f241 131c 	movw	r3, #4380	; 0x111c
 800ece4:	687a      	ldr	r2, [r7, #4]
 800ece6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ecea:	4b53      	ldr	r3, [pc, #332]	; (800ee38 <tcp_process+0x5d0>)
 800ecec:	781b      	ldrb	r3, [r3, #0]
 800ecee:	f003 0320 	and.w	r3, r3, #32
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d037      	beq.n	800ed66 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	8b5b      	ldrh	r3, [r3, #26]
 800ecfa:	f043 0302 	orr.w	r3, r3, #2
 800ecfe:	b29a      	uxth	r2, r3
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2207      	movs	r2, #7
 800ed08:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ed0a:	e02c      	b.n	800ed66 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed0c:	4b40      	ldr	r3, [pc, #256]	; (800ee10 <tcp_process+0x5a8>)
 800ed0e:	6819      	ldr	r1, [r3, #0]
 800ed10:	4b40      	ldr	r3, [pc, #256]	; (800ee14 <tcp_process+0x5ac>)
 800ed12:	881b      	ldrh	r3, [r3, #0]
 800ed14:	461a      	mov	r2, r3
 800ed16:	4b40      	ldr	r3, [pc, #256]	; (800ee18 <tcp_process+0x5b0>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed1c:	4b3f      	ldr	r3, [pc, #252]	; (800ee1c <tcp_process+0x5b4>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed20:	885b      	ldrh	r3, [r3, #2]
 800ed22:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ed24:	4a3d      	ldr	r2, [pc, #244]	; (800ee1c <tcp_process+0x5b4>)
 800ed26:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed28:	8812      	ldrh	r2, [r2, #0]
 800ed2a:	b292      	uxth	r2, r2
 800ed2c:	9202      	str	r2, [sp, #8]
 800ed2e:	9301      	str	r3, [sp, #4]
 800ed30:	4b3b      	ldr	r3, [pc, #236]	; (800ee20 <tcp_process+0x5b8>)
 800ed32:	9300      	str	r3, [sp, #0]
 800ed34:	4b3b      	ldr	r3, [pc, #236]	; (800ee24 <tcp_process+0x5bc>)
 800ed36:	4602      	mov	r2, r0
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f003 f839 	bl	8011db0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ed3e:	e167      	b.n	800f010 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ed40:	4b32      	ldr	r3, [pc, #200]	; (800ee0c <tcp_process+0x5a4>)
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	f003 0302 	and.w	r3, r3, #2
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	f000 8161 	beq.w	800f010 <tcp_process+0x7a8>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed52:	1e5a      	subs	r2, r3, #1
 800ed54:	4b30      	ldr	r3, [pc, #192]	; (800ee18 <tcp_process+0x5b0>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	f040 8159 	bne.w	800f010 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f002 fe12 	bl	8011988 <tcp_rexmit>
      break;
 800ed64:	e154      	b.n	800f010 <tcp_process+0x7a8>
 800ed66:	e153      	b.n	800f010 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f000 fa71 	bl	800f250 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ed6e:	4b32      	ldr	r3, [pc, #200]	; (800ee38 <tcp_process+0x5d0>)
 800ed70:	781b      	ldrb	r3, [r3, #0]
 800ed72:	f003 0320 	and.w	r3, r3, #32
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	f000 814c 	beq.w	800f014 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	8b5b      	ldrh	r3, [r3, #26]
 800ed80:	f043 0302 	orr.w	r3, r3, #2
 800ed84:	b29a      	uxth	r2, r3
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2207      	movs	r2, #7
 800ed8e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ed90:	e140      	b.n	800f014 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f000 fa5c 	bl	800f250 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ed98:	4b27      	ldr	r3, [pc, #156]	; (800ee38 <tcp_process+0x5d0>)
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	f003 0320 	and.w	r3, r3, #32
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d071      	beq.n	800ee88 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eda4:	4b19      	ldr	r3, [pc, #100]	; (800ee0c <tcp_process+0x5a4>)
 800eda6:	781b      	ldrb	r3, [r3, #0]
 800eda8:	f003 0310 	and.w	r3, r3, #16
 800edac:	2b00      	cmp	r3, #0
 800edae:	d060      	beq.n	800ee72 <tcp_process+0x60a>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edb4:	4b16      	ldr	r3, [pc, #88]	; (800ee10 <tcp_process+0x5a8>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	429a      	cmp	r2, r3
 800edba:	d15a      	bne.n	800ee72 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d156      	bne.n	800ee72 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	8b5b      	ldrh	r3, [r3, #26]
 800edc8:	f043 0302 	orr.w	r3, r3, #2
 800edcc:	b29a      	uxth	r2, r3
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f7fe fdbe 	bl	800d954 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800edd8:	4b18      	ldr	r3, [pc, #96]	; (800ee3c <tcp_process+0x5d4>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	687a      	ldr	r2, [r7, #4]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d105      	bne.n	800edee <tcp_process+0x586>
 800ede2:	4b16      	ldr	r3, [pc, #88]	; (800ee3c <tcp_process+0x5d4>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	68db      	ldr	r3, [r3, #12]
 800ede8:	4a14      	ldr	r2, [pc, #80]	; (800ee3c <tcp_process+0x5d4>)
 800edea:	6013      	str	r3, [r2, #0]
 800edec:	e02e      	b.n	800ee4c <tcp_process+0x5e4>
 800edee:	4b13      	ldr	r3, [pc, #76]	; (800ee3c <tcp_process+0x5d4>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	617b      	str	r3, [r7, #20]
 800edf4:	e027      	b.n	800ee46 <tcp_process+0x5de>
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	68db      	ldr	r3, [r3, #12]
 800edfa:	687a      	ldr	r2, [r7, #4]
 800edfc:	429a      	cmp	r2, r3
 800edfe:	d11f      	bne.n	800ee40 <tcp_process+0x5d8>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	68da      	ldr	r2, [r3, #12]
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	60da      	str	r2, [r3, #12]
 800ee08:	e020      	b.n	800ee4c <tcp_process+0x5e4>
 800ee0a:	bf00      	nop
 800ee0c:	20004510 	.word	0x20004510
 800ee10:	20004508 	.word	0x20004508
 800ee14:	2000450e 	.word	0x2000450e
 800ee18:	20004504 	.word	0x20004504
 800ee1c:	200044f4 	.word	0x200044f4
 800ee20:	20007d38 	.word	0x20007d38
 800ee24:	20007d3c 	.word	0x20007d3c
 800ee28:	08017424 	.word	0x08017424
 800ee2c:	080176c4 	.word	0x080176c4
 800ee30:	08017470 	.word	0x08017470
 800ee34:	2000450c 	.word	0x2000450c
 800ee38:	20004511 	.word	0x20004511
 800ee3c:	2000b43c 	.word	0x2000b43c
 800ee40:	697b      	ldr	r3, [r7, #20]
 800ee42:	68db      	ldr	r3, [r3, #12]
 800ee44:	617b      	str	r3, [r7, #20]
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d1d4      	bne.n	800edf6 <tcp_process+0x58e>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2200      	movs	r2, #0
 800ee50:	60da      	str	r2, [r3, #12]
 800ee52:	4b77      	ldr	r3, [pc, #476]	; (800f030 <tcp_process+0x7c8>)
 800ee54:	2201      	movs	r2, #1
 800ee56:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	220a      	movs	r2, #10
 800ee5c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ee5e:	4b75      	ldr	r3, [pc, #468]	; (800f034 <tcp_process+0x7cc>)
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	60da      	str	r2, [r3, #12]
 800ee66:	4a73      	ldr	r2, [pc, #460]	; (800f034 <tcp_process+0x7cc>)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6013      	str	r3, [r2, #0]
 800ee6c:	f003 f962 	bl	8012134 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ee70:	e0d2      	b.n	800f018 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	8b5b      	ldrh	r3, [r3, #26]
 800ee76:	f043 0302 	orr.w	r3, r3, #2
 800ee7a:	b29a      	uxth	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2208      	movs	r2, #8
 800ee84:	751a      	strb	r2, [r3, #20]
      break;
 800ee86:	e0c7      	b.n	800f018 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ee88:	4b6b      	ldr	r3, [pc, #428]	; (800f038 <tcp_process+0x7d0>)
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	f003 0310 	and.w	r3, r3, #16
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	f000 80c1 	beq.w	800f018 <tcp_process+0x7b0>
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee9a:	4b68      	ldr	r3, [pc, #416]	; (800f03c <tcp_process+0x7d4>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	f040 80ba 	bne.w	800f018 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	f040 80b5 	bne.w	800f018 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2206      	movs	r2, #6
 800eeb2:	751a      	strb	r2, [r3, #20]
      break;
 800eeb4:	e0b0      	b.n	800f018 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 f9ca 	bl	800f250 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eebc:	4b60      	ldr	r3, [pc, #384]	; (800f040 <tcp_process+0x7d8>)
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	f003 0320 	and.w	r3, r3, #32
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f000 80a9 	beq.w	800f01c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	8b5b      	ldrh	r3, [r3, #26]
 800eece:	f043 0302 	orr.w	r3, r3, #2
 800eed2:	b29a      	uxth	r2, r3
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f7fe fd3b 	bl	800d954 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eede:	4b59      	ldr	r3, [pc, #356]	; (800f044 <tcp_process+0x7dc>)
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d105      	bne.n	800eef4 <tcp_process+0x68c>
 800eee8:	4b56      	ldr	r3, [pc, #344]	; (800f044 <tcp_process+0x7dc>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	4a55      	ldr	r2, [pc, #340]	; (800f044 <tcp_process+0x7dc>)
 800eef0:	6013      	str	r3, [r2, #0]
 800eef2:	e013      	b.n	800ef1c <tcp_process+0x6b4>
 800eef4:	4b53      	ldr	r3, [pc, #332]	; (800f044 <tcp_process+0x7dc>)
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	613b      	str	r3, [r7, #16]
 800eefa:	e00c      	b.n	800ef16 <tcp_process+0x6ae>
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	68db      	ldr	r3, [r3, #12]
 800ef00:	687a      	ldr	r2, [r7, #4]
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d104      	bne.n	800ef10 <tcp_process+0x6a8>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	68da      	ldr	r2, [r3, #12]
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	60da      	str	r2, [r3, #12]
 800ef0e:	e005      	b.n	800ef1c <tcp_process+0x6b4>
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	68db      	ldr	r3, [r3, #12]
 800ef14:	613b      	str	r3, [r7, #16]
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d1ef      	bne.n	800eefc <tcp_process+0x694>
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	60da      	str	r2, [r3, #12]
 800ef22:	4b43      	ldr	r3, [pc, #268]	; (800f030 <tcp_process+0x7c8>)
 800ef24:	2201      	movs	r2, #1
 800ef26:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	220a      	movs	r2, #10
 800ef2c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ef2e:	4b41      	ldr	r3, [pc, #260]	; (800f034 <tcp_process+0x7cc>)
 800ef30:	681a      	ldr	r2, [r3, #0]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	60da      	str	r2, [r3, #12]
 800ef36:	4a3f      	ldr	r2, [pc, #252]	; (800f034 <tcp_process+0x7cc>)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6013      	str	r3, [r2, #0]
 800ef3c:	f003 f8fa 	bl	8012134 <tcp_timer_needed>
      }
      break;
 800ef40:	e06c      	b.n	800f01c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f000 f984 	bl	800f250 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ef48:	4b3b      	ldr	r3, [pc, #236]	; (800f038 <tcp_process+0x7d0>)
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	f003 0310 	and.w	r3, r3, #16
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d065      	beq.n	800f020 <tcp_process+0x7b8>
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ef58:	4b38      	ldr	r3, [pc, #224]	; (800f03c <tcp_process+0x7d4>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	429a      	cmp	r2, r3
 800ef5e:	d15f      	bne.n	800f020 <tcp_process+0x7b8>
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d15b      	bne.n	800f020 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f7fe fcf3 	bl	800d954 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ef6e:	4b35      	ldr	r3, [pc, #212]	; (800f044 <tcp_process+0x7dc>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	687a      	ldr	r2, [r7, #4]
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d105      	bne.n	800ef84 <tcp_process+0x71c>
 800ef78:	4b32      	ldr	r3, [pc, #200]	; (800f044 <tcp_process+0x7dc>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	68db      	ldr	r3, [r3, #12]
 800ef7e:	4a31      	ldr	r2, [pc, #196]	; (800f044 <tcp_process+0x7dc>)
 800ef80:	6013      	str	r3, [r2, #0]
 800ef82:	e013      	b.n	800efac <tcp_process+0x744>
 800ef84:	4b2f      	ldr	r3, [pc, #188]	; (800f044 <tcp_process+0x7dc>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	60fb      	str	r3, [r7, #12]
 800ef8a:	e00c      	b.n	800efa6 <tcp_process+0x73e>
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	68db      	ldr	r3, [r3, #12]
 800ef90:	687a      	ldr	r2, [r7, #4]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d104      	bne.n	800efa0 <tcp_process+0x738>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	68da      	ldr	r2, [r3, #12]
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	60da      	str	r2, [r3, #12]
 800ef9e:	e005      	b.n	800efac <tcp_process+0x744>
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	68db      	ldr	r3, [r3, #12]
 800efa4:	60fb      	str	r3, [r7, #12]
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d1ef      	bne.n	800ef8c <tcp_process+0x724>
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2200      	movs	r2, #0
 800efb0:	60da      	str	r2, [r3, #12]
 800efb2:	4b1f      	ldr	r3, [pc, #124]	; (800f030 <tcp_process+0x7c8>)
 800efb4:	2201      	movs	r2, #1
 800efb6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	220a      	movs	r2, #10
 800efbc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800efbe:	4b1d      	ldr	r3, [pc, #116]	; (800f034 <tcp_process+0x7cc>)
 800efc0:	681a      	ldr	r2, [r3, #0]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	60da      	str	r2, [r3, #12]
 800efc6:	4a1b      	ldr	r2, [pc, #108]	; (800f034 <tcp_process+0x7cc>)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6013      	str	r3, [r2, #0]
 800efcc:	f003 f8b2 	bl	8012134 <tcp_timer_needed>
      }
      break;
 800efd0:	e026      	b.n	800f020 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f000 f93c 	bl	800f250 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800efd8:	4b17      	ldr	r3, [pc, #92]	; (800f038 <tcp_process+0x7d0>)
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	f003 0310 	and.w	r3, r3, #16
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d01f      	beq.n	800f024 <tcp_process+0x7bc>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efe8:	4b14      	ldr	r3, [pc, #80]	; (800f03c <tcp_process+0x7d4>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	429a      	cmp	r2, r3
 800efee:	d119      	bne.n	800f024 <tcp_process+0x7bc>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d115      	bne.n	800f024 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800eff8:	4b11      	ldr	r3, [pc, #68]	; (800f040 <tcp_process+0x7d8>)
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	f043 0310 	orr.w	r3, r3, #16
 800f000:	b2da      	uxtb	r2, r3
 800f002:	4b0f      	ldr	r3, [pc, #60]	; (800f040 <tcp_process+0x7d8>)
 800f004:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f006:	e00d      	b.n	800f024 <tcp_process+0x7bc>
    default:
      break;
 800f008:	bf00      	nop
 800f00a:	e00c      	b.n	800f026 <tcp_process+0x7be>
      break;
 800f00c:	bf00      	nop
 800f00e:	e00a      	b.n	800f026 <tcp_process+0x7be>
      break;
 800f010:	bf00      	nop
 800f012:	e008      	b.n	800f026 <tcp_process+0x7be>
      break;
 800f014:	bf00      	nop
 800f016:	e006      	b.n	800f026 <tcp_process+0x7be>
      break;
 800f018:	bf00      	nop
 800f01a:	e004      	b.n	800f026 <tcp_process+0x7be>
      break;
 800f01c:	bf00      	nop
 800f01e:	e002      	b.n	800f026 <tcp_process+0x7be>
      break;
 800f020:	bf00      	nop
 800f022:	e000      	b.n	800f026 <tcp_process+0x7be>
      break;
 800f024:	bf00      	nop
  }
  return ERR_OK;
 800f026:	2300      	movs	r3, #0
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3724      	adds	r7, #36	; 0x24
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd90      	pop	{r4, r7, pc}
 800f030:	2000b438 	.word	0x2000b438
 800f034:	2000b44c 	.word	0x2000b44c
 800f038:	20004510 	.word	0x20004510
 800f03c:	20004508 	.word	0x20004508
 800f040:	20004511 	.word	0x20004511
 800f044:	2000b43c 	.word	0x2000b43c

0800f048 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f048:	b590      	push	{r4, r7, lr}
 800f04a:	b085      	sub	sp, #20
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d106      	bne.n	800f066 <tcp_oos_insert_segment+0x1e>
 800f058:	4b3b      	ldr	r3, [pc, #236]	; (800f148 <tcp_oos_insert_segment+0x100>)
 800f05a:	f240 421f 	movw	r2, #1055	; 0x41f
 800f05e:	493b      	ldr	r1, [pc, #236]	; (800f14c <tcp_oos_insert_segment+0x104>)
 800f060:	483b      	ldr	r0, [pc, #236]	; (800f150 <tcp_oos_insert_segment+0x108>)
 800f062:	f005 ffaf 	bl	8014fc4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	68db      	ldr	r3, [r3, #12]
 800f06a:	899b      	ldrh	r3, [r3, #12]
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	4618      	mov	r0, r3
 800f070:	f7fb f984 	bl	800a37c <lwip_htons>
 800f074:	4603      	mov	r3, r0
 800f076:	b2db      	uxtb	r3, r3
 800f078:	f003 0301 	and.w	r3, r3, #1
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d028      	beq.n	800f0d2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f080:	6838      	ldr	r0, [r7, #0]
 800f082:	f7fe f973 	bl	800d36c <tcp_segs_free>
    next = NULL;
 800f086:	2300      	movs	r3, #0
 800f088:	603b      	str	r3, [r7, #0]
 800f08a:	e056      	b.n	800f13a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	899b      	ldrh	r3, [r3, #12]
 800f092:	b29b      	uxth	r3, r3
 800f094:	4618      	mov	r0, r3
 800f096:	f7fb f971 	bl	800a37c <lwip_htons>
 800f09a:	4603      	mov	r3, r0
 800f09c:	b2db      	uxtb	r3, r3
 800f09e:	f003 0301 	and.w	r3, r3, #1
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d00d      	beq.n	800f0c2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	68db      	ldr	r3, [r3, #12]
 800f0aa:	899b      	ldrh	r3, [r3, #12]
 800f0ac:	b29c      	uxth	r4, r3
 800f0ae:	2001      	movs	r0, #1
 800f0b0:	f7fb f964 	bl	800a37c <lwip_htons>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	461a      	mov	r2, r3
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	68db      	ldr	r3, [r3, #12]
 800f0bc:	4322      	orrs	r2, r4
 800f0be:	b292      	uxth	r2, r2
 800f0c0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f0cc:	68f8      	ldr	r0, [r7, #12]
 800f0ce:	f7fe f961 	bl	800d394 <tcp_seg_free>
    while (next &&
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d00e      	beq.n	800f0f6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	891b      	ldrh	r3, [r3, #8]
 800f0dc:	461a      	mov	r2, r3
 800f0de:	4b1d      	ldr	r3, [pc, #116]	; (800f154 <tcp_oos_insert_segment+0x10c>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	441a      	add	r2, r3
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	6839      	ldr	r1, [r7, #0]
 800f0ec:	8909      	ldrh	r1, [r1, #8]
 800f0ee:	440b      	add	r3, r1
 800f0f0:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	daca      	bge.n	800f08c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d01e      	beq.n	800f13a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	891b      	ldrh	r3, [r3, #8]
 800f100:	461a      	mov	r2, r3
 800f102:	4b14      	ldr	r3, [pc, #80]	; (800f154 <tcp_oos_insert_segment+0x10c>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	441a      	add	r2, r3
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f110:	2b00      	cmp	r3, #0
 800f112:	dd12      	ble.n	800f13a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	685b      	ldr	r3, [r3, #4]
 800f11a:	b29a      	uxth	r2, r3
 800f11c:	4b0d      	ldr	r3, [pc, #52]	; (800f154 <tcp_oos_insert_segment+0x10c>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	b29b      	uxth	r3, r3
 800f122:	1ad3      	subs	r3, r2, r3
 800f124:	b29a      	uxth	r2, r3
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	685a      	ldr	r2, [r3, #4]
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	891b      	ldrh	r3, [r3, #8]
 800f132:	4619      	mov	r1, r3
 800f134:	4610      	mov	r0, r2
 800f136:	f7fc fb79 	bl	800b82c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	683a      	ldr	r2, [r7, #0]
 800f13e:	601a      	str	r2, [r3, #0]
}
 800f140:	bf00      	nop
 800f142:	3714      	adds	r7, #20
 800f144:	46bd      	mov	sp, r7
 800f146:	bd90      	pop	{r4, r7, pc}
 800f148:	08017424 	.word	0x08017424
 800f14c:	080176e4 	.word	0x080176e4
 800f150:	08017470 	.word	0x08017470
 800f154:	20004504 	.word	0x20004504

0800f158 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f158:	b5b0      	push	{r4, r5, r7, lr}
 800f15a:	b086      	sub	sp, #24
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	60f8      	str	r0, [r7, #12]
 800f160:	60b9      	str	r1, [r7, #8]
 800f162:	607a      	str	r2, [r7, #4]
 800f164:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f166:	e03e      	b.n	800f1e6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	4618      	mov	r0, r3
 800f178:	f7fc fd6c 	bl	800bc54 <pbuf_clen>
 800f17c:	4603      	mov	r3, r0
 800f17e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f186:	8a7a      	ldrh	r2, [r7, #18]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d906      	bls.n	800f19a <tcp_free_acked_segments+0x42>
 800f18c:	4b2a      	ldr	r3, [pc, #168]	; (800f238 <tcp_free_acked_segments+0xe0>)
 800f18e:	f240 4257 	movw	r2, #1111	; 0x457
 800f192:	492a      	ldr	r1, [pc, #168]	; (800f23c <tcp_free_acked_segments+0xe4>)
 800f194:	482a      	ldr	r0, [pc, #168]	; (800f240 <tcp_free_acked_segments+0xe8>)
 800f196:	f005 ff15 	bl	8014fc4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f1a0:	8a7b      	ldrh	r3, [r7, #18]
 800f1a2:	1ad3      	subs	r3, r2, r3
 800f1a4:	b29a      	uxth	r2, r3
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f1ac:	697b      	ldr	r3, [r7, #20]
 800f1ae:	891a      	ldrh	r2, [r3, #8]
 800f1b0:	4b24      	ldr	r3, [pc, #144]	; (800f244 <tcp_free_acked_segments+0xec>)
 800f1b2:	881b      	ldrh	r3, [r3, #0]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	b29a      	uxth	r2, r3
 800f1b8:	4b22      	ldr	r3, [pc, #136]	; (800f244 <tcp_free_acked_segments+0xec>)
 800f1ba:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f1bc:	6978      	ldr	r0, [r7, #20]
 800f1be:	f7fe f8e9 	bl	800d394 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d00c      	beq.n	800f1e6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d109      	bne.n	800f1e6 <tcp_free_acked_segments+0x8e>
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d106      	bne.n	800f1e6 <tcp_free_acked_segments+0x8e>
 800f1d8:	4b17      	ldr	r3, [pc, #92]	; (800f238 <tcp_free_acked_segments+0xe0>)
 800f1da:	f240 4262 	movw	r2, #1122	; 0x462
 800f1de:	491a      	ldr	r1, [pc, #104]	; (800f248 <tcp_free_acked_segments+0xf0>)
 800f1e0:	4817      	ldr	r0, [pc, #92]	; (800f240 <tcp_free_acked_segments+0xe8>)
 800f1e2:	f005 feef 	bl	8014fc4 <iprintf>
  while (seg_list != NULL &&
 800f1e6:	68bb      	ldr	r3, [r7, #8]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d020      	beq.n	800f22e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	68db      	ldr	r3, [r3, #12]
 800f1f0:	685b      	ldr	r3, [r3, #4]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7fb f8d7 	bl	800a3a6 <lwip_htonl>
 800f1f8:	4604      	mov	r4, r0
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	891b      	ldrh	r3, [r3, #8]
 800f1fe:	461d      	mov	r5, r3
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	68db      	ldr	r3, [r3, #12]
 800f204:	899b      	ldrh	r3, [r3, #12]
 800f206:	b29b      	uxth	r3, r3
 800f208:	4618      	mov	r0, r3
 800f20a:	f7fb f8b7 	bl	800a37c <lwip_htons>
 800f20e:	4603      	mov	r3, r0
 800f210:	b2db      	uxtb	r3, r3
 800f212:	f003 0303 	and.w	r3, r3, #3
 800f216:	2b00      	cmp	r3, #0
 800f218:	d001      	beq.n	800f21e <tcp_free_acked_segments+0xc6>
 800f21a:	2301      	movs	r3, #1
 800f21c:	e000      	b.n	800f220 <tcp_free_acked_segments+0xc8>
 800f21e:	2300      	movs	r3, #0
 800f220:	442b      	add	r3, r5
 800f222:	18e2      	adds	r2, r4, r3
 800f224:	4b09      	ldr	r3, [pc, #36]	; (800f24c <tcp_free_acked_segments+0xf4>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	dd9c      	ble.n	800f168 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f22e:	68bb      	ldr	r3, [r7, #8]
}
 800f230:	4618      	mov	r0, r3
 800f232:	3718      	adds	r7, #24
 800f234:	46bd      	mov	sp, r7
 800f236:	bdb0      	pop	{r4, r5, r7, pc}
 800f238:	08017424 	.word	0x08017424
 800f23c:	0801770c 	.word	0x0801770c
 800f240:	08017470 	.word	0x08017470
 800f244:	2000450c 	.word	0x2000450c
 800f248:	08017734 	.word	0x08017734
 800f24c:	20004508 	.word	0x20004508

0800f250 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f250:	b5b0      	push	{r4, r5, r7, lr}
 800f252:	b094      	sub	sp, #80	; 0x50
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f258:	2300      	movs	r3, #0
 800f25a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d106      	bne.n	800f270 <tcp_receive+0x20>
 800f262:	4ba6      	ldr	r3, [pc, #664]	; (800f4fc <tcp_receive+0x2ac>)
 800f264:	f240 427b 	movw	r2, #1147	; 0x47b
 800f268:	49a5      	ldr	r1, [pc, #660]	; (800f500 <tcp_receive+0x2b0>)
 800f26a:	48a6      	ldr	r0, [pc, #664]	; (800f504 <tcp_receive+0x2b4>)
 800f26c:	f005 feaa 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	7d1b      	ldrb	r3, [r3, #20]
 800f274:	2b03      	cmp	r3, #3
 800f276:	d806      	bhi.n	800f286 <tcp_receive+0x36>
 800f278:	4ba0      	ldr	r3, [pc, #640]	; (800f4fc <tcp_receive+0x2ac>)
 800f27a:	f240 427c 	movw	r2, #1148	; 0x47c
 800f27e:	49a2      	ldr	r1, [pc, #648]	; (800f508 <tcp_receive+0x2b8>)
 800f280:	48a0      	ldr	r0, [pc, #640]	; (800f504 <tcp_receive+0x2b4>)
 800f282:	f005 fe9f 	bl	8014fc4 <iprintf>

  if (flags & TCP_ACK) {
 800f286:	4ba1      	ldr	r3, [pc, #644]	; (800f50c <tcp_receive+0x2bc>)
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	f003 0310 	and.w	r3, r3, #16
 800f28e:	2b00      	cmp	r3, #0
 800f290:	f000 8263 	beq.w	800f75a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f29a:	461a      	mov	r2, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f2a0:	4413      	add	r3, r2
 800f2a2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2a8:	4b99      	ldr	r3, [pc, #612]	; (800f510 <tcp_receive+0x2c0>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	1ad3      	subs	r3, r2, r3
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	db1b      	blt.n	800f2ea <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2b6:	4b96      	ldr	r3, [pc, #600]	; (800f510 <tcp_receive+0x2c0>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d106      	bne.n	800f2cc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f2c2:	4b94      	ldr	r3, [pc, #592]	; (800f514 <tcp_receive+0x2c4>)
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	1ad3      	subs	r3, r2, r3
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	db0e      	blt.n	800f2ea <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f2d0:	4b90      	ldr	r3, [pc, #576]	; (800f514 <tcp_receive+0x2c4>)
 800f2d2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d125      	bne.n	800f324 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f2d8:	4b8f      	ldr	r3, [pc, #572]	; (800f518 <tcp_receive+0x2c8>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	89db      	ldrh	r3, [r3, #14]
 800f2de:	b29a      	uxth	r2, r3
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d91c      	bls.n	800f324 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f2ea:	4b8b      	ldr	r3, [pc, #556]	; (800f518 <tcp_receive+0x2c8>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	89db      	ldrh	r3, [r3, #14]
 800f2f0:	b29a      	uxth	r2, r3
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f304:	429a      	cmp	r2, r3
 800f306:	d205      	bcs.n	800f314 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f314:	4b7e      	ldr	r3, [pc, #504]	; (800f510 <tcp_receive+0x2c0>)
 800f316:	681a      	ldr	r2, [r3, #0]
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f31c:	4b7d      	ldr	r3, [pc, #500]	; (800f514 <tcp_receive+0x2c4>)
 800f31e:	681a      	ldr	r2, [r3, #0]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f324:	4b7b      	ldr	r3, [pc, #492]	; (800f514 <tcp_receive+0x2c4>)
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f32c:	1ad3      	subs	r3, r2, r3
 800f32e:	2b00      	cmp	r3, #0
 800f330:	dc58      	bgt.n	800f3e4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f332:	4b7a      	ldr	r3, [pc, #488]	; (800f51c <tcp_receive+0x2cc>)
 800f334:	881b      	ldrh	r3, [r3, #0]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d14b      	bne.n	800f3d2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f33e:	687a      	ldr	r2, [r7, #4]
 800f340:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f344:	4413      	add	r3, r2
 800f346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f348:	429a      	cmp	r2, r3
 800f34a:	d142      	bne.n	800f3d2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f352:	2b00      	cmp	r3, #0
 800f354:	db3d      	blt.n	800f3d2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f35a:	4b6e      	ldr	r3, [pc, #440]	; (800f514 <tcp_receive+0x2c4>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	429a      	cmp	r2, r3
 800f360:	d137      	bne.n	800f3d2 <tcp_receive+0x182>
              found_dupack = 1;
 800f362:	2301      	movs	r3, #1
 800f364:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f36c:	2bff      	cmp	r3, #255	; 0xff
 800f36e:	d007      	beq.n	800f380 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f376:	3301      	adds	r3, #1
 800f378:	b2da      	uxtb	r2, r3
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f386:	2b03      	cmp	r3, #3
 800f388:	d91b      	bls.n	800f3c2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f394:	4413      	add	r3, r2
 800f396:	b29a      	uxth	r2, r3
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f39e:	429a      	cmp	r2, r3
 800f3a0:	d30a      	bcc.n	800f3b8 <tcp_receive+0x168>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f3ac:	4413      	add	r3, r2
 800f3ae:	b29a      	uxth	r2, r3
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f3b6:	e004      	b.n	800f3c2 <tcp_receive+0x172>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f3c8:	2b02      	cmp	r3, #2
 800f3ca:	d902      	bls.n	800f3d2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	f002 fb47 	bl	8011a60 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f3d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	f040 8160 	bne.w	800f69a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f3e2:	e15a      	b.n	800f69a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f3e4:	4b4b      	ldr	r3, [pc, #300]	; (800f514 <tcp_receive+0x2c4>)
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3ec:	1ad3      	subs	r3, r2, r3
 800f3ee:	3b01      	subs	r3, #1
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	f2c0 814d 	blt.w	800f690 <tcp_receive+0x440>
 800f3f6:	4b47      	ldr	r3, [pc, #284]	; (800f514 <tcp_receive+0x2c4>)
 800f3f8:	681a      	ldr	r2, [r3, #0]
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3fe:	1ad3      	subs	r3, r2, r3
 800f400:	2b00      	cmp	r3, #0
 800f402:	f300 8145 	bgt.w	800f690 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	8b5b      	ldrh	r3, [r3, #26]
 800f40a:	f003 0304 	and.w	r3, r3, #4
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d010      	beq.n	800f434 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	8b5b      	ldrh	r3, [r3, #26]
 800f416:	f023 0304 	bic.w	r3, r3, #4
 800f41a:	b29a      	uxth	r2, r3
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2200      	movs	r2, #0
 800f430:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2200      	movs	r2, #0
 800f438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f442:	10db      	asrs	r3, r3, #3
 800f444:	b21b      	sxth	r3, r3
 800f446:	b29a      	uxth	r2, r3
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f44e:	b29b      	uxth	r3, r3
 800f450:	4413      	add	r3, r2
 800f452:	b29b      	uxth	r3, r3
 800f454:	b21a      	sxth	r2, r3
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f45c:	4b2d      	ldr	r3, [pc, #180]	; (800f514 <tcp_receive+0x2c4>)
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	b29a      	uxth	r2, r3
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f466:	b29b      	uxth	r3, r3
 800f468:	1ad3      	subs	r3, r2, r3
 800f46a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	2200      	movs	r2, #0
 800f470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f474:	4b27      	ldr	r3, [pc, #156]	; (800f514 <tcp_receive+0x2c4>)
 800f476:	681a      	ldr	r2, [r3, #0]
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	7d1b      	ldrb	r3, [r3, #20]
 800f480:	2b03      	cmp	r3, #3
 800f482:	f240 8096 	bls.w	800f5b2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f492:	429a      	cmp	r2, r3
 800f494:	d244      	bcs.n	800f520 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	8b5b      	ldrh	r3, [r3, #26]
 800f49a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d001      	beq.n	800f4a6 <tcp_receive+0x256>
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e000      	b.n	800f4a8 <tcp_receive+0x258>
 800f4a6:	2302      	movs	r3, #2
 800f4a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f4ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f4b0:	b29a      	uxth	r2, r3
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4b6:	fb12 f303 	smulbb	r3, r2, r3
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	bf28      	it	cs
 800f4c2:	4613      	movcs	r3, r2
 800f4c4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f4ce:	4413      	add	r3, r2
 800f4d0:	b29a      	uxth	r2, r3
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d309      	bcc.n	800f4f0 <tcp_receive+0x2a0>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f4e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f4e4:	4413      	add	r3, r2
 800f4e6:	b29a      	uxth	r2, r3
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f4ee:	e060      	b.n	800f5b2 <tcp_receive+0x362>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f4f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f4fa:	e05a      	b.n	800f5b2 <tcp_receive+0x362>
 800f4fc:	08017424 	.word	0x08017424
 800f500:	08017754 	.word	0x08017754
 800f504:	08017470 	.word	0x08017470
 800f508:	08017770 	.word	0x08017770
 800f50c:	20004510 	.word	0x20004510
 800f510:	20004504 	.word	0x20004504
 800f514:	20004508 	.word	0x20004508
 800f518:	200044f4 	.word	0x200044f4
 800f51c:	2000450e 	.word	0x2000450e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f526:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f528:	4413      	add	r3, r2
 800f52a:	b29a      	uxth	r2, r3
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f532:	429a      	cmp	r2, r3
 800f534:	d309      	bcc.n	800f54a <tcp_receive+0x2fa>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f53c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f53e:	4413      	add	r3, r2
 800f540:	b29a      	uxth	r2, r3
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f548:	e004      	b.n	800f554 <tcp_receive+0x304>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f550:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f560:	429a      	cmp	r2, r3
 800f562:	d326      	bcc.n	800f5b2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f570:	1ad3      	subs	r3, r2, r3
 800f572:	b29a      	uxth	r2, r3
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f584:	4413      	add	r3, r2
 800f586:	b29a      	uxth	r2, r3
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f58e:	429a      	cmp	r2, r3
 800f590:	d30a      	bcc.n	800f5a8 <tcp_receive+0x358>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f59c:	4413      	add	r3, r2
 800f59e:	b29a      	uxth	r2, r3
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f5a6:	e004      	b.n	800f5b2 <tcp_receive+0x362>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f5ba:	4a98      	ldr	r2, [pc, #608]	; (800f81c <tcp_receive+0x5cc>)
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f7ff fdcb 	bl	800f158 <tcp_free_acked_segments>
 800f5c2:	4602      	mov	r2, r0
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5d0:	4a93      	ldr	r2, [pc, #588]	; (800f820 <tcp_receive+0x5d0>)
 800f5d2:	6878      	ldr	r0, [r7, #4]
 800f5d4:	f7ff fdc0 	bl	800f158 <tcp_free_acked_segments>
 800f5d8:	4602      	mov	r2, r0
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d104      	bne.n	800f5f0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f5ec:	861a      	strh	r2, [r3, #48]	; 0x30
 800f5ee:	e002      	b.n	800f5f6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f600:	2b00      	cmp	r3, #0
 800f602:	d103      	bne.n	800f60c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2200      	movs	r2, #0
 800f608:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f612:	4b84      	ldr	r3, [pc, #528]	; (800f824 <tcp_receive+0x5d4>)
 800f614:	881b      	ldrh	r3, [r3, #0]
 800f616:	4413      	add	r3, r2
 800f618:	b29a      	uxth	r2, r3
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	8b5b      	ldrh	r3, [r3, #26]
 800f624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d035      	beq.n	800f698 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f630:	2b00      	cmp	r3, #0
 800f632:	d118      	bne.n	800f666 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d00c      	beq.n	800f656 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f644:	68db      	ldr	r3, [r3, #12]
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fa feac 	bl	800a3a6 <lwip_htonl>
 800f64e:	4603      	mov	r3, r0
 800f650:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f652:	2b00      	cmp	r3, #0
 800f654:	dc20      	bgt.n	800f698 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	8b5b      	ldrh	r3, [r3, #26]
 800f65a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f65e:	b29a      	uxth	r2, r3
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f664:	e018      	b.n	800f698 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f66e:	68db      	ldr	r3, [r3, #12]
 800f670:	685b      	ldr	r3, [r3, #4]
 800f672:	4618      	mov	r0, r3
 800f674:	f7fa fe97 	bl	800a3a6 <lwip_htonl>
 800f678:	4603      	mov	r3, r0
 800f67a:	1ae3      	subs	r3, r4, r3
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	dc0b      	bgt.n	800f698 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	8b5b      	ldrh	r3, [r3, #26]
 800f684:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f688:	b29a      	uxth	r2, r3
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f68e:	e003      	b.n	800f698 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f002 fbdf 	bl	8011e54 <tcp_send_empty_ack>
 800f696:	e000      	b.n	800f69a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f698:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d05b      	beq.n	800f75a <tcp_receive+0x50a>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f6a6:	4b60      	ldr	r3, [pc, #384]	; (800f828 <tcp_receive+0x5d8>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	1ad3      	subs	r3, r2, r3
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	da54      	bge.n	800f75a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f6b0:	4b5e      	ldr	r3, [pc, #376]	; (800f82c <tcp_receive+0x5dc>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	b29a      	uxth	r2, r3
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6ba:	b29b      	uxth	r3, r3
 800f6bc:	1ad3      	subs	r3, r2, r3
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f6c4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f6ce:	10db      	asrs	r3, r3, #3
 800f6d0:	b21b      	sxth	r3, r3
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	1ad3      	subs	r3, r2, r3
 800f6d6:	b29b      	uxth	r3, r3
 800f6d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f6e2:	b29a      	uxth	r2, r3
 800f6e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f6e8:	4413      	add	r3, r2
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	b21a      	sxth	r2, r3
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f6f2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	da05      	bge.n	800f706 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f6fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f6fe:	425b      	negs	r3, r3
 800f700:	b29b      	uxth	r3, r3
 800f702:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f706:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f710:	109b      	asrs	r3, r3, #2
 800f712:	b21b      	sxth	r3, r3
 800f714:	b29b      	uxth	r3, r3
 800f716:	1ad3      	subs	r3, r2, r3
 800f718:	b29b      	uxth	r3, r3
 800f71a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f724:	b29a      	uxth	r2, r3
 800f726:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f72a:	4413      	add	r3, r2
 800f72c:	b29b      	uxth	r3, r3
 800f72e:	b21a      	sxth	r2, r3
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f73a:	10db      	asrs	r3, r3, #3
 800f73c:	b21b      	sxth	r3, r3
 800f73e:	b29a      	uxth	r2, r3
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f746:	b29b      	uxth	r3, r3
 800f748:	4413      	add	r3, r2
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	b21a      	sxth	r2, r3
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	2200      	movs	r2, #0
 800f758:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f75a:	4b35      	ldr	r3, [pc, #212]	; (800f830 <tcp_receive+0x5e0>)
 800f75c:	881b      	ldrh	r3, [r3, #0]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	f000 84e1 	beq.w	8010126 <tcp_receive+0xed6>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	7d1b      	ldrb	r3, [r3, #20]
 800f768:	2b06      	cmp	r3, #6
 800f76a:	f200 84dc 	bhi.w	8010126 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f772:	4b30      	ldr	r3, [pc, #192]	; (800f834 <tcp_receive+0x5e4>)
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	1ad3      	subs	r3, r2, r3
 800f778:	3b01      	subs	r3, #1
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	f2c0 808e 	blt.w	800f89c <tcp_receive+0x64c>
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f784:	4b2a      	ldr	r3, [pc, #168]	; (800f830 <tcp_receive+0x5e0>)
 800f786:	881b      	ldrh	r3, [r3, #0]
 800f788:	4619      	mov	r1, r3
 800f78a:	4b2a      	ldr	r3, [pc, #168]	; (800f834 <tcp_receive+0x5e4>)
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	440b      	add	r3, r1
 800f790:	1ad3      	subs	r3, r2, r3
 800f792:	3301      	adds	r3, #1
 800f794:	2b00      	cmp	r3, #0
 800f796:	f300 8081 	bgt.w	800f89c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f79a:	4b27      	ldr	r3, [pc, #156]	; (800f838 <tcp_receive+0x5e8>)
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7a4:	4b23      	ldr	r3, [pc, #140]	; (800f834 <tcp_receive+0x5e4>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	1ad3      	subs	r3, r2, r3
 800f7aa:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f7ac:	4b22      	ldr	r3, [pc, #136]	; (800f838 <tcp_receive+0x5e8>)
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d106      	bne.n	800f7c2 <tcp_receive+0x572>
 800f7b4:	4b21      	ldr	r3, [pc, #132]	; (800f83c <tcp_receive+0x5ec>)
 800f7b6:	f240 5294 	movw	r2, #1428	; 0x594
 800f7ba:	4921      	ldr	r1, [pc, #132]	; (800f840 <tcp_receive+0x5f0>)
 800f7bc:	4821      	ldr	r0, [pc, #132]	; (800f844 <tcp_receive+0x5f4>)
 800f7be:	f005 fc01 	bl	8014fc4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d906      	bls.n	800f7da <tcp_receive+0x58a>
 800f7cc:	4b1b      	ldr	r3, [pc, #108]	; (800f83c <tcp_receive+0x5ec>)
 800f7ce:	f240 5295 	movw	r2, #1429	; 0x595
 800f7d2:	491d      	ldr	r1, [pc, #116]	; (800f848 <tcp_receive+0x5f8>)
 800f7d4:	481b      	ldr	r0, [pc, #108]	; (800f844 <tcp_receive+0x5f4>)
 800f7d6:	f005 fbf5 	bl	8014fc4 <iprintf>
      off = (u16_t)off32;
 800f7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f7e0:	4b15      	ldr	r3, [pc, #84]	; (800f838 <tcp_receive+0x5e8>)
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	891b      	ldrh	r3, [r3, #8]
 800f7e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d906      	bls.n	800f7fc <tcp_receive+0x5ac>
 800f7ee:	4b13      	ldr	r3, [pc, #76]	; (800f83c <tcp_receive+0x5ec>)
 800f7f0:	f240 5297 	movw	r2, #1431	; 0x597
 800f7f4:	4915      	ldr	r1, [pc, #84]	; (800f84c <tcp_receive+0x5fc>)
 800f7f6:	4813      	ldr	r0, [pc, #76]	; (800f844 <tcp_receive+0x5f4>)
 800f7f8:	f005 fbe4 	bl	8014fc4 <iprintf>
      inseg.len -= off;
 800f7fc:	4b0e      	ldr	r3, [pc, #56]	; (800f838 <tcp_receive+0x5e8>)
 800f7fe:	891a      	ldrh	r2, [r3, #8]
 800f800:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f804:	1ad3      	subs	r3, r2, r3
 800f806:	b29a      	uxth	r2, r3
 800f808:	4b0b      	ldr	r3, [pc, #44]	; (800f838 <tcp_receive+0x5e8>)
 800f80a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f80c:	4b0a      	ldr	r3, [pc, #40]	; (800f838 <tcp_receive+0x5e8>)
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	891a      	ldrh	r2, [r3, #8]
 800f812:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f816:	1ad3      	subs	r3, r2, r3
 800f818:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f81a:	e029      	b.n	800f870 <tcp_receive+0x620>
 800f81c:	0801778c 	.word	0x0801778c
 800f820:	08017794 	.word	0x08017794
 800f824:	2000450c 	.word	0x2000450c
 800f828:	20004508 	.word	0x20004508
 800f82c:	2000b440 	.word	0x2000b440
 800f830:	2000450e 	.word	0x2000450e
 800f834:	20004504 	.word	0x20004504
 800f838:	200044e4 	.word	0x200044e4
 800f83c:	08017424 	.word	0x08017424
 800f840:	0801779c 	.word	0x0801779c
 800f844:	08017470 	.word	0x08017470
 800f848:	080177ac 	.word	0x080177ac
 800f84c:	080177bc 	.word	0x080177bc
        off -= p->len;
 800f850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f852:	895b      	ldrh	r3, [r3, #10]
 800f854:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f858:	1ad3      	subs	r3, r2, r3
 800f85a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f85e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f860:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f862:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f866:	2200      	movs	r2, #0
 800f868:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f86a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f872:	895b      	ldrh	r3, [r3, #10]
 800f874:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f878:	429a      	cmp	r2, r3
 800f87a:	d8e9      	bhi.n	800f850 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f87c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f880:	4619      	mov	r1, r3
 800f882:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f884:	f7fc f8d2 	bl	800ba2c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f88c:	4a91      	ldr	r2, [pc, #580]	; (800fad4 <tcp_receive+0x884>)
 800f88e:	6013      	str	r3, [r2, #0]
 800f890:	4b91      	ldr	r3, [pc, #580]	; (800fad8 <tcp_receive+0x888>)
 800f892:	68db      	ldr	r3, [r3, #12]
 800f894:	4a8f      	ldr	r2, [pc, #572]	; (800fad4 <tcp_receive+0x884>)
 800f896:	6812      	ldr	r2, [r2, #0]
 800f898:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f89a:	e00d      	b.n	800f8b8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f89c:	4b8d      	ldr	r3, [pc, #564]	; (800fad4 <tcp_receive+0x884>)
 800f89e:	681a      	ldr	r2, [r3, #0]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8a4:	1ad3      	subs	r3, r2, r3
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	da06      	bge.n	800f8b8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	8b5b      	ldrh	r3, [r3, #26]
 800f8ae:	f043 0302 	orr.w	r3, r3, #2
 800f8b2:	b29a      	uxth	r2, r3
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f8b8:	4b86      	ldr	r3, [pc, #536]	; (800fad4 <tcp_receive+0x884>)
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8c0:	1ad3      	subs	r3, r2, r3
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	f2c0 842a 	blt.w	801011c <tcp_receive+0xecc>
 800f8c8:	4b82      	ldr	r3, [pc, #520]	; (800fad4 <tcp_receive+0x884>)
 800f8ca:	681a      	ldr	r2, [r3, #0]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8d0:	6879      	ldr	r1, [r7, #4]
 800f8d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f8d4:	440b      	add	r3, r1
 800f8d6:	1ad3      	subs	r3, r2, r3
 800f8d8:	3301      	adds	r3, #1
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	f300 841e 	bgt.w	801011c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8e4:	4b7b      	ldr	r3, [pc, #492]	; (800fad4 <tcp_receive+0x884>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	f040 829a 	bne.w	800fe22 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f8ee:	4b7a      	ldr	r3, [pc, #488]	; (800fad8 <tcp_receive+0x888>)
 800f8f0:	891c      	ldrh	r4, [r3, #8]
 800f8f2:	4b79      	ldr	r3, [pc, #484]	; (800fad8 <tcp_receive+0x888>)
 800f8f4:	68db      	ldr	r3, [r3, #12]
 800f8f6:	899b      	ldrh	r3, [r3, #12]
 800f8f8:	b29b      	uxth	r3, r3
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7fa fd3e 	bl	800a37c <lwip_htons>
 800f900:	4603      	mov	r3, r0
 800f902:	b2db      	uxtb	r3, r3
 800f904:	f003 0303 	and.w	r3, r3, #3
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d001      	beq.n	800f910 <tcp_receive+0x6c0>
 800f90c:	2301      	movs	r3, #1
 800f90e:	e000      	b.n	800f912 <tcp_receive+0x6c2>
 800f910:	2300      	movs	r3, #0
 800f912:	4423      	add	r3, r4
 800f914:	b29a      	uxth	r2, r3
 800f916:	4b71      	ldr	r3, [pc, #452]	; (800fadc <tcp_receive+0x88c>)
 800f918:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f91e:	4b6f      	ldr	r3, [pc, #444]	; (800fadc <tcp_receive+0x88c>)
 800f920:	881b      	ldrh	r3, [r3, #0]
 800f922:	429a      	cmp	r2, r3
 800f924:	d275      	bcs.n	800fa12 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f926:	4b6c      	ldr	r3, [pc, #432]	; (800fad8 <tcp_receive+0x888>)
 800f928:	68db      	ldr	r3, [r3, #12]
 800f92a:	899b      	ldrh	r3, [r3, #12]
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	4618      	mov	r0, r3
 800f930:	f7fa fd24 	bl	800a37c <lwip_htons>
 800f934:	4603      	mov	r3, r0
 800f936:	b2db      	uxtb	r3, r3
 800f938:	f003 0301 	and.w	r3, r3, #1
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d01f      	beq.n	800f980 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f940:	4b65      	ldr	r3, [pc, #404]	; (800fad8 <tcp_receive+0x888>)
 800f942:	68db      	ldr	r3, [r3, #12]
 800f944:	899b      	ldrh	r3, [r3, #12]
 800f946:	b29b      	uxth	r3, r3
 800f948:	b21b      	sxth	r3, r3
 800f94a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f94e:	b21c      	sxth	r4, r3
 800f950:	4b61      	ldr	r3, [pc, #388]	; (800fad8 <tcp_receive+0x888>)
 800f952:	68db      	ldr	r3, [r3, #12]
 800f954:	899b      	ldrh	r3, [r3, #12]
 800f956:	b29b      	uxth	r3, r3
 800f958:	4618      	mov	r0, r3
 800f95a:	f7fa fd0f 	bl	800a37c <lwip_htons>
 800f95e:	4603      	mov	r3, r0
 800f960:	b2db      	uxtb	r3, r3
 800f962:	b29b      	uxth	r3, r3
 800f964:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f968:	b29b      	uxth	r3, r3
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7fa fd06 	bl	800a37c <lwip_htons>
 800f970:	4603      	mov	r3, r0
 800f972:	b21b      	sxth	r3, r3
 800f974:	4323      	orrs	r3, r4
 800f976:	b21a      	sxth	r2, r3
 800f978:	4b57      	ldr	r3, [pc, #348]	; (800fad8 <tcp_receive+0x888>)
 800f97a:	68db      	ldr	r3, [r3, #12]
 800f97c:	b292      	uxth	r2, r2
 800f97e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f984:	4b54      	ldr	r3, [pc, #336]	; (800fad8 <tcp_receive+0x888>)
 800f986:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f988:	4b53      	ldr	r3, [pc, #332]	; (800fad8 <tcp_receive+0x888>)
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	899b      	ldrh	r3, [r3, #12]
 800f98e:	b29b      	uxth	r3, r3
 800f990:	4618      	mov	r0, r3
 800f992:	f7fa fcf3 	bl	800a37c <lwip_htons>
 800f996:	4603      	mov	r3, r0
 800f998:	b2db      	uxtb	r3, r3
 800f99a:	f003 0302 	and.w	r3, r3, #2
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d005      	beq.n	800f9ae <tcp_receive+0x75e>
            inseg.len -= 1;
 800f9a2:	4b4d      	ldr	r3, [pc, #308]	; (800fad8 <tcp_receive+0x888>)
 800f9a4:	891b      	ldrh	r3, [r3, #8]
 800f9a6:	3b01      	subs	r3, #1
 800f9a8:	b29a      	uxth	r2, r3
 800f9aa:	4b4b      	ldr	r3, [pc, #300]	; (800fad8 <tcp_receive+0x888>)
 800f9ac:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f9ae:	4b4a      	ldr	r3, [pc, #296]	; (800fad8 <tcp_receive+0x888>)
 800f9b0:	685a      	ldr	r2, [r3, #4]
 800f9b2:	4b49      	ldr	r3, [pc, #292]	; (800fad8 <tcp_receive+0x888>)
 800f9b4:	891b      	ldrh	r3, [r3, #8]
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	4610      	mov	r0, r2
 800f9ba:	f7fb ff37 	bl	800b82c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f9be:	4b46      	ldr	r3, [pc, #280]	; (800fad8 <tcp_receive+0x888>)
 800f9c0:	891c      	ldrh	r4, [r3, #8]
 800f9c2:	4b45      	ldr	r3, [pc, #276]	; (800fad8 <tcp_receive+0x888>)
 800f9c4:	68db      	ldr	r3, [r3, #12]
 800f9c6:	899b      	ldrh	r3, [r3, #12]
 800f9c8:	b29b      	uxth	r3, r3
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7fa fcd6 	bl	800a37c <lwip_htons>
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	b2db      	uxtb	r3, r3
 800f9d4:	f003 0303 	and.w	r3, r3, #3
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d001      	beq.n	800f9e0 <tcp_receive+0x790>
 800f9dc:	2301      	movs	r3, #1
 800f9de:	e000      	b.n	800f9e2 <tcp_receive+0x792>
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	4423      	add	r3, r4
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	4b3d      	ldr	r3, [pc, #244]	; (800fadc <tcp_receive+0x88c>)
 800f9e8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f9ea:	4b3c      	ldr	r3, [pc, #240]	; (800fadc <tcp_receive+0x88c>)
 800f9ec:	881b      	ldrh	r3, [r3, #0]
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	4b38      	ldr	r3, [pc, #224]	; (800fad4 <tcp_receive+0x884>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	441a      	add	r2, r3
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9fa:	6879      	ldr	r1, [r7, #4]
 800f9fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f9fe:	440b      	add	r3, r1
 800fa00:	429a      	cmp	r2, r3
 800fa02:	d006      	beq.n	800fa12 <tcp_receive+0x7c2>
 800fa04:	4b36      	ldr	r3, [pc, #216]	; (800fae0 <tcp_receive+0x890>)
 800fa06:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800fa0a:	4936      	ldr	r1, [pc, #216]	; (800fae4 <tcp_receive+0x894>)
 800fa0c:	4836      	ldr	r0, [pc, #216]	; (800fae8 <tcp_receive+0x898>)
 800fa0e:	f005 fad9 	bl	8014fc4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	f000 80e7 	beq.w	800fbea <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fa1c:	4b2e      	ldr	r3, [pc, #184]	; (800fad8 <tcp_receive+0x888>)
 800fa1e:	68db      	ldr	r3, [r3, #12]
 800fa20:	899b      	ldrh	r3, [r3, #12]
 800fa22:	b29b      	uxth	r3, r3
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7fa fca9 	bl	800a37c <lwip_htons>
 800fa2a:	4603      	mov	r3, r0
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	f003 0301 	and.w	r3, r3, #1
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d010      	beq.n	800fa58 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fa36:	e00a      	b.n	800fa4e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa3c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa42:	681a      	ldr	r2, [r3, #0]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f7fd fca3 	bl	800d394 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d1f0      	bne.n	800fa38 <tcp_receive+0x7e8>
 800fa56:	e0c8      	b.n	800fbea <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa5c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fa5e:	e052      	b.n	800fb06 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fa60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa62:	68db      	ldr	r3, [r3, #12]
 800fa64:	899b      	ldrh	r3, [r3, #12]
 800fa66:	b29b      	uxth	r3, r3
 800fa68:	4618      	mov	r0, r3
 800fa6a:	f7fa fc87 	bl	800a37c <lwip_htons>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	b2db      	uxtb	r3, r3
 800fa72:	f003 0301 	and.w	r3, r3, #1
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d03d      	beq.n	800faf6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fa7a:	4b17      	ldr	r3, [pc, #92]	; (800fad8 <tcp_receive+0x888>)
 800fa7c:	68db      	ldr	r3, [r3, #12]
 800fa7e:	899b      	ldrh	r3, [r3, #12]
 800fa80:	b29b      	uxth	r3, r3
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7fa fc7a 	bl	800a37c <lwip_htons>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	b2db      	uxtb	r3, r3
 800fa8c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d130      	bne.n	800faf6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fa94:	4b10      	ldr	r3, [pc, #64]	; (800fad8 <tcp_receive+0x888>)
 800fa96:	68db      	ldr	r3, [r3, #12]
 800fa98:	899b      	ldrh	r3, [r3, #12]
 800fa9a:	b29c      	uxth	r4, r3
 800fa9c:	2001      	movs	r0, #1
 800fa9e:	f7fa fc6d 	bl	800a37c <lwip_htons>
 800faa2:	4603      	mov	r3, r0
 800faa4:	461a      	mov	r2, r3
 800faa6:	4b0c      	ldr	r3, [pc, #48]	; (800fad8 <tcp_receive+0x888>)
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	4322      	orrs	r2, r4
 800faac:	b292      	uxth	r2, r2
 800faae:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fab0:	4b09      	ldr	r3, [pc, #36]	; (800fad8 <tcp_receive+0x888>)
 800fab2:	891c      	ldrh	r4, [r3, #8]
 800fab4:	4b08      	ldr	r3, [pc, #32]	; (800fad8 <tcp_receive+0x888>)
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	899b      	ldrh	r3, [r3, #12]
 800faba:	b29b      	uxth	r3, r3
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7fa fc5d 	bl	800a37c <lwip_htons>
 800fac2:	4603      	mov	r3, r0
 800fac4:	b2db      	uxtb	r3, r3
 800fac6:	f003 0303 	and.w	r3, r3, #3
 800faca:	2b00      	cmp	r3, #0
 800facc:	d00e      	beq.n	800faec <tcp_receive+0x89c>
 800face:	2301      	movs	r3, #1
 800fad0:	e00d      	b.n	800faee <tcp_receive+0x89e>
 800fad2:	bf00      	nop
 800fad4:	20004504 	.word	0x20004504
 800fad8:	200044e4 	.word	0x200044e4
 800fadc:	2000450e 	.word	0x2000450e
 800fae0:	08017424 	.word	0x08017424
 800fae4:	080177cc 	.word	0x080177cc
 800fae8:	08017470 	.word	0x08017470
 800faec:	2300      	movs	r3, #0
 800faee:	4423      	add	r3, r4
 800faf0:	b29a      	uxth	r2, r3
 800faf2:	4b98      	ldr	r3, [pc, #608]	; (800fd54 <tcp_receive+0xb04>)
 800faf4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800faf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800faf8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fafa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fb00:	6938      	ldr	r0, [r7, #16]
 800fb02:	f7fd fc47 	bl	800d394 <tcp_seg_free>
            while (next &&
 800fb06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d00e      	beq.n	800fb2a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fb0c:	4b91      	ldr	r3, [pc, #580]	; (800fd54 <tcp_receive+0xb04>)
 800fb0e:	881b      	ldrh	r3, [r3, #0]
 800fb10:	461a      	mov	r2, r3
 800fb12:	4b91      	ldr	r3, [pc, #580]	; (800fd58 <tcp_receive+0xb08>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	441a      	add	r2, r3
 800fb18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb1a:	68db      	ldr	r3, [r3, #12]
 800fb1c:	685b      	ldr	r3, [r3, #4]
 800fb1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fb20:	8909      	ldrh	r1, [r1, #8]
 800fb22:	440b      	add	r3, r1
 800fb24:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	da9a      	bge.n	800fa60 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fb2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d059      	beq.n	800fbe4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800fb30:	4b88      	ldr	r3, [pc, #544]	; (800fd54 <tcp_receive+0xb04>)
 800fb32:	881b      	ldrh	r3, [r3, #0]
 800fb34:	461a      	mov	r2, r3
 800fb36:	4b88      	ldr	r3, [pc, #544]	; (800fd58 <tcp_receive+0xb08>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	441a      	add	r2, r3
 800fb3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb3e:	68db      	ldr	r3, [r3, #12]
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	dd4d      	ble.n	800fbe4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fb48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb4a:	68db      	ldr	r3, [r3, #12]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	b29a      	uxth	r2, r3
 800fb50:	4b81      	ldr	r3, [pc, #516]	; (800fd58 <tcp_receive+0xb08>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	b29b      	uxth	r3, r3
 800fb56:	1ad3      	subs	r3, r2, r3
 800fb58:	b29a      	uxth	r2, r3
 800fb5a:	4b80      	ldr	r3, [pc, #512]	; (800fd5c <tcp_receive+0xb0c>)
 800fb5c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fb5e:	4b7f      	ldr	r3, [pc, #508]	; (800fd5c <tcp_receive+0xb0c>)
 800fb60:	68db      	ldr	r3, [r3, #12]
 800fb62:	899b      	ldrh	r3, [r3, #12]
 800fb64:	b29b      	uxth	r3, r3
 800fb66:	4618      	mov	r0, r3
 800fb68:	f7fa fc08 	bl	800a37c <lwip_htons>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	b2db      	uxtb	r3, r3
 800fb70:	f003 0302 	and.w	r3, r3, #2
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d005      	beq.n	800fb84 <tcp_receive+0x934>
                inseg.len -= 1;
 800fb78:	4b78      	ldr	r3, [pc, #480]	; (800fd5c <tcp_receive+0xb0c>)
 800fb7a:	891b      	ldrh	r3, [r3, #8]
 800fb7c:	3b01      	subs	r3, #1
 800fb7e:	b29a      	uxth	r2, r3
 800fb80:	4b76      	ldr	r3, [pc, #472]	; (800fd5c <tcp_receive+0xb0c>)
 800fb82:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fb84:	4b75      	ldr	r3, [pc, #468]	; (800fd5c <tcp_receive+0xb0c>)
 800fb86:	685a      	ldr	r2, [r3, #4]
 800fb88:	4b74      	ldr	r3, [pc, #464]	; (800fd5c <tcp_receive+0xb0c>)
 800fb8a:	891b      	ldrh	r3, [r3, #8]
 800fb8c:	4619      	mov	r1, r3
 800fb8e:	4610      	mov	r0, r2
 800fb90:	f7fb fe4c 	bl	800b82c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fb94:	4b71      	ldr	r3, [pc, #452]	; (800fd5c <tcp_receive+0xb0c>)
 800fb96:	891c      	ldrh	r4, [r3, #8]
 800fb98:	4b70      	ldr	r3, [pc, #448]	; (800fd5c <tcp_receive+0xb0c>)
 800fb9a:	68db      	ldr	r3, [r3, #12]
 800fb9c:	899b      	ldrh	r3, [r3, #12]
 800fb9e:	b29b      	uxth	r3, r3
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7fa fbeb 	bl	800a37c <lwip_htons>
 800fba6:	4603      	mov	r3, r0
 800fba8:	b2db      	uxtb	r3, r3
 800fbaa:	f003 0303 	and.w	r3, r3, #3
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d001      	beq.n	800fbb6 <tcp_receive+0x966>
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	e000      	b.n	800fbb8 <tcp_receive+0x968>
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	4423      	add	r3, r4
 800fbba:	b29a      	uxth	r2, r3
 800fbbc:	4b65      	ldr	r3, [pc, #404]	; (800fd54 <tcp_receive+0xb04>)
 800fbbe:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fbc0:	4b64      	ldr	r3, [pc, #400]	; (800fd54 <tcp_receive+0xb04>)
 800fbc2:	881b      	ldrh	r3, [r3, #0]
 800fbc4:	461a      	mov	r2, r3
 800fbc6:	4b64      	ldr	r3, [pc, #400]	; (800fd58 <tcp_receive+0xb08>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	441a      	add	r2, r3
 800fbcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbce:	68db      	ldr	r3, [r3, #12]
 800fbd0:	685b      	ldr	r3, [r3, #4]
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d006      	beq.n	800fbe4 <tcp_receive+0x994>
 800fbd6:	4b62      	ldr	r3, [pc, #392]	; (800fd60 <tcp_receive+0xb10>)
 800fbd8:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800fbdc:	4961      	ldr	r1, [pc, #388]	; (800fd64 <tcp_receive+0xb14>)
 800fbde:	4862      	ldr	r0, [pc, #392]	; (800fd68 <tcp_receive+0xb18>)
 800fbe0:	f005 f9f0 	bl	8014fc4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fbe8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fbea:	4b5a      	ldr	r3, [pc, #360]	; (800fd54 <tcp_receive+0xb04>)
 800fbec:	881b      	ldrh	r3, [r3, #0]
 800fbee:	461a      	mov	r2, r3
 800fbf0:	4b59      	ldr	r3, [pc, #356]	; (800fd58 <tcp_receive+0xb08>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	441a      	add	r2, r3
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fbfe:	4b55      	ldr	r3, [pc, #340]	; (800fd54 <tcp_receive+0xb04>)
 800fc00:	881b      	ldrh	r3, [r3, #0]
 800fc02:	429a      	cmp	r2, r3
 800fc04:	d206      	bcs.n	800fc14 <tcp_receive+0x9c4>
 800fc06:	4b56      	ldr	r3, [pc, #344]	; (800fd60 <tcp_receive+0xb10>)
 800fc08:	f240 6207 	movw	r2, #1543	; 0x607
 800fc0c:	4957      	ldr	r1, [pc, #348]	; (800fd6c <tcp_receive+0xb1c>)
 800fc0e:	4856      	ldr	r0, [pc, #344]	; (800fd68 <tcp_receive+0xb18>)
 800fc10:	f005 f9d8 	bl	8014fc4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fc18:	4b4e      	ldr	r3, [pc, #312]	; (800fd54 <tcp_receive+0xb04>)
 800fc1a:	881b      	ldrh	r3, [r3, #0]
 800fc1c:	1ad3      	subs	r3, r2, r3
 800fc1e:	b29a      	uxth	r2, r3
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f7fc fe93 	bl	800c950 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fc2a:	4b4c      	ldr	r3, [pc, #304]	; (800fd5c <tcp_receive+0xb0c>)
 800fc2c:	685b      	ldr	r3, [r3, #4]
 800fc2e:	891b      	ldrh	r3, [r3, #8]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d006      	beq.n	800fc42 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fc34:	4b49      	ldr	r3, [pc, #292]	; (800fd5c <tcp_receive+0xb0c>)
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	4a4d      	ldr	r2, [pc, #308]	; (800fd70 <tcp_receive+0xb20>)
 800fc3a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fc3c:	4b47      	ldr	r3, [pc, #284]	; (800fd5c <tcp_receive+0xb0c>)
 800fc3e:	2200      	movs	r2, #0
 800fc40:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fc42:	4b46      	ldr	r3, [pc, #280]	; (800fd5c <tcp_receive+0xb0c>)
 800fc44:	68db      	ldr	r3, [r3, #12]
 800fc46:	899b      	ldrh	r3, [r3, #12]
 800fc48:	b29b      	uxth	r3, r3
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7fa fb96 	bl	800a37c <lwip_htons>
 800fc50:	4603      	mov	r3, r0
 800fc52:	b2db      	uxtb	r3, r3
 800fc54:	f003 0301 	and.w	r3, r3, #1
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	f000 80b8 	beq.w	800fdce <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800fc5e:	4b45      	ldr	r3, [pc, #276]	; (800fd74 <tcp_receive+0xb24>)
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	f043 0320 	orr.w	r3, r3, #32
 800fc66:	b2da      	uxtb	r2, r3
 800fc68:	4b42      	ldr	r3, [pc, #264]	; (800fd74 <tcp_receive+0xb24>)
 800fc6a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fc6c:	e0af      	b.n	800fdce <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc72:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc78:	68db      	ldr	r3, [r3, #12]
 800fc7a:	685b      	ldr	r3, [r3, #4]
 800fc7c:	4a36      	ldr	r2, [pc, #216]	; (800fd58 <tcp_receive+0xb08>)
 800fc7e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	891b      	ldrh	r3, [r3, #8]
 800fc84:	461c      	mov	r4, r3
 800fc86:	68bb      	ldr	r3, [r7, #8]
 800fc88:	68db      	ldr	r3, [r3, #12]
 800fc8a:	899b      	ldrh	r3, [r3, #12]
 800fc8c:	b29b      	uxth	r3, r3
 800fc8e:	4618      	mov	r0, r3
 800fc90:	f7fa fb74 	bl	800a37c <lwip_htons>
 800fc94:	4603      	mov	r3, r0
 800fc96:	b2db      	uxtb	r3, r3
 800fc98:	f003 0303 	and.w	r3, r3, #3
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d001      	beq.n	800fca4 <tcp_receive+0xa54>
 800fca0:	2301      	movs	r3, #1
 800fca2:	e000      	b.n	800fca6 <tcp_receive+0xa56>
 800fca4:	2300      	movs	r3, #0
 800fca6:	191a      	adds	r2, r3, r4
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcac:	441a      	add	r2, r3
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fcb6:	461c      	mov	r4, r3
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	891b      	ldrh	r3, [r3, #8]
 800fcbc:	461d      	mov	r5, r3
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	68db      	ldr	r3, [r3, #12]
 800fcc2:	899b      	ldrh	r3, [r3, #12]
 800fcc4:	b29b      	uxth	r3, r3
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7fa fb58 	bl	800a37c <lwip_htons>
 800fccc:	4603      	mov	r3, r0
 800fcce:	b2db      	uxtb	r3, r3
 800fcd0:	f003 0303 	and.w	r3, r3, #3
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d001      	beq.n	800fcdc <tcp_receive+0xa8c>
 800fcd8:	2301      	movs	r3, #1
 800fcda:	e000      	b.n	800fcde <tcp_receive+0xa8e>
 800fcdc:	2300      	movs	r3, #0
 800fcde:	442b      	add	r3, r5
 800fce0:	429c      	cmp	r4, r3
 800fce2:	d206      	bcs.n	800fcf2 <tcp_receive+0xaa2>
 800fce4:	4b1e      	ldr	r3, [pc, #120]	; (800fd60 <tcp_receive+0xb10>)
 800fce6:	f240 622c 	movw	r2, #1580	; 0x62c
 800fcea:	4923      	ldr	r1, [pc, #140]	; (800fd78 <tcp_receive+0xb28>)
 800fcec:	481e      	ldr	r0, [pc, #120]	; (800fd68 <tcp_receive+0xb18>)
 800fcee:	f005 f969 	bl	8014fc4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	891b      	ldrh	r3, [r3, #8]
 800fcf6:	461c      	mov	r4, r3
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	68db      	ldr	r3, [r3, #12]
 800fcfc:	899b      	ldrh	r3, [r3, #12]
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7fa fb3b 	bl	800a37c <lwip_htons>
 800fd06:	4603      	mov	r3, r0
 800fd08:	b2db      	uxtb	r3, r3
 800fd0a:	f003 0303 	and.w	r3, r3, #3
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d001      	beq.n	800fd16 <tcp_receive+0xac6>
 800fd12:	2301      	movs	r3, #1
 800fd14:	e000      	b.n	800fd18 <tcp_receive+0xac8>
 800fd16:	2300      	movs	r3, #0
 800fd18:	1919      	adds	r1, r3, r4
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd1e:	b28b      	uxth	r3, r1
 800fd20:	1ad3      	subs	r3, r2, r3
 800fd22:	b29a      	uxth	r2, r3
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800fd28:	6878      	ldr	r0, [r7, #4]
 800fd2a:	f7fc fe11 	bl	800c950 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	685b      	ldr	r3, [r3, #4]
 800fd32:	891b      	ldrh	r3, [r3, #8]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d028      	beq.n	800fd8a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fd38:	4b0d      	ldr	r3, [pc, #52]	; (800fd70 <tcp_receive+0xb20>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d01d      	beq.n	800fd7c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800fd40:	4b0b      	ldr	r3, [pc, #44]	; (800fd70 <tcp_receive+0xb20>)
 800fd42:	681a      	ldr	r2, [r3, #0]
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	685b      	ldr	r3, [r3, #4]
 800fd48:	4619      	mov	r1, r3
 800fd4a:	4610      	mov	r0, r2
 800fd4c:	f7fb ffc2 	bl	800bcd4 <pbuf_cat>
 800fd50:	e018      	b.n	800fd84 <tcp_receive+0xb34>
 800fd52:	bf00      	nop
 800fd54:	2000450e 	.word	0x2000450e
 800fd58:	20004504 	.word	0x20004504
 800fd5c:	200044e4 	.word	0x200044e4
 800fd60:	08017424 	.word	0x08017424
 800fd64:	08017804 	.word	0x08017804
 800fd68:	08017470 	.word	0x08017470
 800fd6c:	08017840 	.word	0x08017840
 800fd70:	20004514 	.word	0x20004514
 800fd74:	20004511 	.word	0x20004511
 800fd78:	08017860 	.word	0x08017860
            } else {
              recv_data = cseg->p;
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	685b      	ldr	r3, [r3, #4]
 800fd80:	4a70      	ldr	r2, [pc, #448]	; (800ff44 <tcp_receive+0xcf4>)
 800fd82:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fd84:	68bb      	ldr	r3, [r7, #8]
 800fd86:	2200      	movs	r2, #0
 800fd88:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	68db      	ldr	r3, [r3, #12]
 800fd8e:	899b      	ldrh	r3, [r3, #12]
 800fd90:	b29b      	uxth	r3, r3
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7fa faf2 	bl	800a37c <lwip_htons>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	b2db      	uxtb	r3, r3
 800fd9c:	f003 0301 	and.w	r3, r3, #1
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d00d      	beq.n	800fdc0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fda4:	4b68      	ldr	r3, [pc, #416]	; (800ff48 <tcp_receive+0xcf8>)
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	f043 0320 	orr.w	r3, r3, #32
 800fdac:	b2da      	uxtb	r2, r3
 800fdae:	4b66      	ldr	r3, [pc, #408]	; (800ff48 <tcp_receive+0xcf8>)
 800fdb0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	7d1b      	ldrb	r3, [r3, #20]
 800fdb6:	2b04      	cmp	r3, #4
 800fdb8:	d102      	bne.n	800fdc0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2207      	movs	r2, #7
 800fdbe:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	681a      	ldr	r2, [r3, #0]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fdc8:	68b8      	ldr	r0, [r7, #8]
 800fdca:	f7fd fae3 	bl	800d394 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d008      	beq.n	800fde8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdda:	68db      	ldr	r3, [r3, #12]
 800fddc:	685a      	ldr	r2, [r3, #4]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fde2:	429a      	cmp	r2, r3
 800fde4:	f43f af43 	beq.w	800fc6e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	8b5b      	ldrh	r3, [r3, #26]
 800fdec:	f003 0301 	and.w	r3, r3, #1
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d00e      	beq.n	800fe12 <tcp_receive+0xbc2>
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	8b5b      	ldrh	r3, [r3, #26]
 800fdf8:	f023 0301 	bic.w	r3, r3, #1
 800fdfc:	b29a      	uxth	r2, r3
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	835a      	strh	r2, [r3, #26]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	8b5b      	ldrh	r3, [r3, #26]
 800fe06:	f043 0302 	orr.w	r3, r3, #2
 800fe0a:	b29a      	uxth	r2, r3
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fe10:	e188      	b.n	8010124 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	8b5b      	ldrh	r3, [r3, #26]
 800fe16:	f043 0301 	orr.w	r3, r3, #1
 800fe1a:	b29a      	uxth	r2, r3
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fe20:	e180      	b.n	8010124 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d106      	bne.n	800fe38 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800fe2a:	4848      	ldr	r0, [pc, #288]	; (800ff4c <tcp_receive+0xcfc>)
 800fe2c:	f7fd fae8 	bl	800d400 <tcp_seg_copy>
 800fe30:	4602      	mov	r2, r0
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	675a      	str	r2, [r3, #116]	; 0x74
 800fe36:	e16d      	b.n	8010114 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe40:	63bb      	str	r3, [r7, #56]	; 0x38
 800fe42:	e157      	b.n	80100f4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800fe44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe46:	68db      	ldr	r3, [r3, #12]
 800fe48:	685a      	ldr	r2, [r3, #4]
 800fe4a:	4b41      	ldr	r3, [pc, #260]	; (800ff50 <tcp_receive+0xd00>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d11d      	bne.n	800fe8e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fe52:	4b3e      	ldr	r3, [pc, #248]	; (800ff4c <tcp_receive+0xcfc>)
 800fe54:	891a      	ldrh	r2, [r3, #8]
 800fe56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe58:	891b      	ldrh	r3, [r3, #8]
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	f240 814f 	bls.w	80100fe <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fe60:	483a      	ldr	r0, [pc, #232]	; (800ff4c <tcp_receive+0xcfc>)
 800fe62:	f7fd facd 	bl	800d400 <tcp_seg_copy>
 800fe66:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	f000 8149 	beq.w	8010102 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800fe70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d003      	beq.n	800fe7e <tcp_receive+0xc2e>
                    prev->next = cseg;
 800fe76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe78:	697a      	ldr	r2, [r7, #20]
 800fe7a:	601a      	str	r2, [r3, #0]
 800fe7c:	e002      	b.n	800fe84 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	697a      	ldr	r2, [r7, #20]
 800fe82:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fe84:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe86:	6978      	ldr	r0, [r7, #20]
 800fe88:	f7ff f8de 	bl	800f048 <tcp_oos_insert_segment>
                }
                break;
 800fe8c:	e139      	b.n	8010102 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fe8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d117      	bne.n	800fec4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fe94:	4b2e      	ldr	r3, [pc, #184]	; (800ff50 <tcp_receive+0xd00>)
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9a:	68db      	ldr	r3, [r3, #12]
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	1ad3      	subs	r3, r2, r3
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	da57      	bge.n	800ff54 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fea4:	4829      	ldr	r0, [pc, #164]	; (800ff4c <tcp_receive+0xcfc>)
 800fea6:	f7fd faab 	bl	800d400 <tcp_seg_copy>
 800feaa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800feac:	69bb      	ldr	r3, [r7, #24]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	f000 8129 	beq.w	8010106 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	69ba      	ldr	r2, [r7, #24]
 800feb8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800feba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800febc:	69b8      	ldr	r0, [r7, #24]
 800febe:	f7ff f8c3 	bl	800f048 <tcp_oos_insert_segment>
                  }
                  break;
 800fec2:	e120      	b.n	8010106 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fec4:	4b22      	ldr	r3, [pc, #136]	; (800ff50 <tcp_receive+0xd00>)
 800fec6:	681a      	ldr	r2, [r3, #0]
 800fec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feca:	68db      	ldr	r3, [r3, #12]
 800fecc:	685b      	ldr	r3, [r3, #4]
 800fece:	1ad3      	subs	r3, r2, r3
 800fed0:	3b01      	subs	r3, #1
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	db3e      	blt.n	800ff54 <tcp_receive+0xd04>
 800fed6:	4b1e      	ldr	r3, [pc, #120]	; (800ff50 <tcp_receive+0xd00>)
 800fed8:	681a      	ldr	r2, [r3, #0]
 800feda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fedc:	68db      	ldr	r3, [r3, #12]
 800fede:	685b      	ldr	r3, [r3, #4]
 800fee0:	1ad3      	subs	r3, r2, r3
 800fee2:	3301      	adds	r3, #1
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	dc35      	bgt.n	800ff54 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fee8:	4818      	ldr	r0, [pc, #96]	; (800ff4c <tcp_receive+0xcfc>)
 800feea:	f7fd fa89 	bl	800d400 <tcp_seg_copy>
 800feee:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fef0:	69fb      	ldr	r3, [r7, #28]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	f000 8109 	beq.w	801010a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	685b      	ldr	r3, [r3, #4]
 800fefe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff00:	8912      	ldrh	r2, [r2, #8]
 800ff02:	441a      	add	r2, r3
 800ff04:	4b12      	ldr	r3, [pc, #72]	; (800ff50 <tcp_receive+0xd00>)
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	1ad3      	subs	r3, r2, r3
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	dd12      	ble.n	800ff34 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800ff0e:	4b10      	ldr	r3, [pc, #64]	; (800ff50 <tcp_receive+0xd00>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	b29a      	uxth	r2, r3
 800ff14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff16:	68db      	ldr	r3, [r3, #12]
 800ff18:	685b      	ldr	r3, [r3, #4]
 800ff1a:	b29b      	uxth	r3, r3
 800ff1c:	1ad3      	subs	r3, r2, r3
 800ff1e:	b29a      	uxth	r2, r3
 800ff20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff22:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ff24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff26:	685a      	ldr	r2, [r3, #4]
 800ff28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff2a:	891b      	ldrh	r3, [r3, #8]
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	4610      	mov	r0, r2
 800ff30:	f7fb fc7c 	bl	800b82c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ff34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff36:	69fa      	ldr	r2, [r7, #28]
 800ff38:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ff3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff3c:	69f8      	ldr	r0, [r7, #28]
 800ff3e:	f7ff f883 	bl	800f048 <tcp_oos_insert_segment>
                  }
                  break;
 800ff42:	e0e2      	b.n	801010a <tcp_receive+0xeba>
 800ff44:	20004514 	.word	0x20004514
 800ff48:	20004511 	.word	0x20004511
 800ff4c:	200044e4 	.word	0x200044e4
 800ff50:	20004504 	.word	0x20004504
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ff54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff56:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ff58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	f040 80c6 	bne.w	80100ee <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ff62:	4b80      	ldr	r3, [pc, #512]	; (8010164 <tcp_receive+0xf14>)
 800ff64:	681a      	ldr	r2, [r3, #0]
 800ff66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff68:	68db      	ldr	r3, [r3, #12]
 800ff6a:	685b      	ldr	r3, [r3, #4]
 800ff6c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	f340 80bd 	ble.w	80100ee <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ff74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff76:	68db      	ldr	r3, [r3, #12]
 800ff78:	899b      	ldrh	r3, [r3, #12]
 800ff7a:	b29b      	uxth	r3, r3
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7fa f9fd 	bl	800a37c <lwip_htons>
 800ff82:	4603      	mov	r3, r0
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	f003 0301 	and.w	r3, r3, #1
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	f040 80bf 	bne.w	801010e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ff90:	4875      	ldr	r0, [pc, #468]	; (8010168 <tcp_receive+0xf18>)
 800ff92:	f7fd fa35 	bl	800d400 <tcp_seg_copy>
 800ff96:	4602      	mov	r2, r0
 800ff98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff9a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ff9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	f000 80b6 	beq.w	8010112 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ffa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa8:	68db      	ldr	r3, [r3, #12]
 800ffaa:	685b      	ldr	r3, [r3, #4]
 800ffac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffae:	8912      	ldrh	r2, [r2, #8]
 800ffb0:	441a      	add	r2, r3
 800ffb2:	4b6c      	ldr	r3, [pc, #432]	; (8010164 <tcp_receive+0xf14>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	1ad3      	subs	r3, r2, r3
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	dd12      	ble.n	800ffe2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ffbc:	4b69      	ldr	r3, [pc, #420]	; (8010164 <tcp_receive+0xf14>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	b29a      	uxth	r2, r3
 800ffc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc4:	68db      	ldr	r3, [r3, #12]
 800ffc6:	685b      	ldr	r3, [r3, #4]
 800ffc8:	b29b      	uxth	r3, r3
 800ffca:	1ad3      	subs	r3, r2, r3
 800ffcc:	b29a      	uxth	r2, r3
 800ffce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800ffd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd4:	685a      	ldr	r2, [r3, #4]
 800ffd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd8:	891b      	ldrh	r3, [r3, #8]
 800ffda:	4619      	mov	r1, r3
 800ffdc:	4610      	mov	r0, r2
 800ffde:	f7fb fc25 	bl	800b82c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800ffe2:	4b62      	ldr	r3, [pc, #392]	; (801016c <tcp_receive+0xf1c>)
 800ffe4:	881b      	ldrh	r3, [r3, #0]
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	4b5e      	ldr	r3, [pc, #376]	; (8010164 <tcp_receive+0xf14>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	441a      	add	r2, r3
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff2:	6879      	ldr	r1, [r7, #4]
 800fff4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fff6:	440b      	add	r3, r1
 800fff8:	1ad3      	subs	r3, r2, r3
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	f340 8089 	ble.w	8010112 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	68db      	ldr	r3, [r3, #12]
 8010006:	899b      	ldrh	r3, [r3, #12]
 8010008:	b29b      	uxth	r3, r3
 801000a:	4618      	mov	r0, r3
 801000c:	f7fa f9b6 	bl	800a37c <lwip_htons>
 8010010:	4603      	mov	r3, r0
 8010012:	b2db      	uxtb	r3, r3
 8010014:	f003 0301 	and.w	r3, r3, #1
 8010018:	2b00      	cmp	r3, #0
 801001a:	d022      	beq.n	8010062 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801001c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	68db      	ldr	r3, [r3, #12]
 8010022:	899b      	ldrh	r3, [r3, #12]
 8010024:	b29b      	uxth	r3, r3
 8010026:	b21b      	sxth	r3, r3
 8010028:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801002c:	b21c      	sxth	r4, r3
 801002e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	899b      	ldrh	r3, [r3, #12]
 8010036:	b29b      	uxth	r3, r3
 8010038:	4618      	mov	r0, r3
 801003a:	f7fa f99f 	bl	800a37c <lwip_htons>
 801003e:	4603      	mov	r3, r0
 8010040:	b2db      	uxtb	r3, r3
 8010042:	b29b      	uxth	r3, r3
 8010044:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010048:	b29b      	uxth	r3, r3
 801004a:	4618      	mov	r0, r3
 801004c:	f7fa f996 	bl	800a37c <lwip_htons>
 8010050:	4603      	mov	r3, r0
 8010052:	b21b      	sxth	r3, r3
 8010054:	4323      	orrs	r3, r4
 8010056:	b21a      	sxth	r2, r3
 8010058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	68db      	ldr	r3, [r3, #12]
 801005e:	b292      	uxth	r2, r2
 8010060:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010066:	b29a      	uxth	r2, r3
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801006c:	4413      	add	r3, r2
 801006e:	b299      	uxth	r1, r3
 8010070:	4b3c      	ldr	r3, [pc, #240]	; (8010164 <tcp_receive+0xf14>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	b29a      	uxth	r2, r3
 8010076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	1a8a      	subs	r2, r1, r2
 801007c:	b292      	uxth	r2, r2
 801007e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	685a      	ldr	r2, [r3, #4]
 8010086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	891b      	ldrh	r3, [r3, #8]
 801008c:	4619      	mov	r1, r3
 801008e:	4610      	mov	r0, r2
 8010090:	f7fb fbcc 	bl	800b82c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	891c      	ldrh	r4, [r3, #8]
 801009a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	899b      	ldrh	r3, [r3, #12]
 80100a2:	b29b      	uxth	r3, r3
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7fa f969 	bl	800a37c <lwip_htons>
 80100aa:	4603      	mov	r3, r0
 80100ac:	b2db      	uxtb	r3, r3
 80100ae:	f003 0303 	and.w	r3, r3, #3
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d001      	beq.n	80100ba <tcp_receive+0xe6a>
 80100b6:	2301      	movs	r3, #1
 80100b8:	e000      	b.n	80100bc <tcp_receive+0xe6c>
 80100ba:	2300      	movs	r3, #0
 80100bc:	4423      	add	r3, r4
 80100be:	b29a      	uxth	r2, r3
 80100c0:	4b2a      	ldr	r3, [pc, #168]	; (801016c <tcp_receive+0xf1c>)
 80100c2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80100c4:	4b29      	ldr	r3, [pc, #164]	; (801016c <tcp_receive+0xf1c>)
 80100c6:	881b      	ldrh	r3, [r3, #0]
 80100c8:	461a      	mov	r2, r3
 80100ca:	4b26      	ldr	r3, [pc, #152]	; (8010164 <tcp_receive+0xf14>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	441a      	add	r2, r3
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d4:	6879      	ldr	r1, [r7, #4]
 80100d6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100d8:	440b      	add	r3, r1
 80100da:	429a      	cmp	r2, r3
 80100dc:	d019      	beq.n	8010112 <tcp_receive+0xec2>
 80100de:	4b24      	ldr	r3, [pc, #144]	; (8010170 <tcp_receive+0xf20>)
 80100e0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80100e4:	4923      	ldr	r1, [pc, #140]	; (8010174 <tcp_receive+0xf24>)
 80100e6:	4824      	ldr	r0, [pc, #144]	; (8010178 <tcp_receive+0xf28>)
 80100e8:	f004 ff6c 	bl	8014fc4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80100ec:	e011      	b.n	8010112 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80100ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80100f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	f47f aea4 	bne.w	800fe44 <tcp_receive+0xbf4>
 80100fc:	e00a      	b.n	8010114 <tcp_receive+0xec4>
                break;
 80100fe:	bf00      	nop
 8010100:	e008      	b.n	8010114 <tcp_receive+0xec4>
                break;
 8010102:	bf00      	nop
 8010104:	e006      	b.n	8010114 <tcp_receive+0xec4>
                  break;
 8010106:	bf00      	nop
 8010108:	e004      	b.n	8010114 <tcp_receive+0xec4>
                  break;
 801010a:	bf00      	nop
 801010c:	e002      	b.n	8010114 <tcp_receive+0xec4>
                  break;
 801010e:	bf00      	nop
 8010110:	e000      	b.n	8010114 <tcp_receive+0xec4>
                break;
 8010112:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010114:	6878      	ldr	r0, [r7, #4]
 8010116:	f001 fe9d 	bl	8011e54 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801011a:	e003      	b.n	8010124 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	f001 fe99 	bl	8011e54 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010122:	e01a      	b.n	801015a <tcp_receive+0xf0a>
 8010124:	e019      	b.n	801015a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010126:	4b0f      	ldr	r3, [pc, #60]	; (8010164 <tcp_receive+0xf14>)
 8010128:	681a      	ldr	r2, [r3, #0]
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801012e:	1ad3      	subs	r3, r2, r3
 8010130:	2b00      	cmp	r3, #0
 8010132:	db0a      	blt.n	801014a <tcp_receive+0xefa>
 8010134:	4b0b      	ldr	r3, [pc, #44]	; (8010164 <tcp_receive+0xf14>)
 8010136:	681a      	ldr	r2, [r3, #0]
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801013c:	6879      	ldr	r1, [r7, #4]
 801013e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010140:	440b      	add	r3, r1
 8010142:	1ad3      	subs	r3, r2, r3
 8010144:	3301      	adds	r3, #1
 8010146:	2b00      	cmp	r3, #0
 8010148:	dd07      	ble.n	801015a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	8b5b      	ldrh	r3, [r3, #26]
 801014e:	f043 0302 	orr.w	r3, r3, #2
 8010152:	b29a      	uxth	r2, r3
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010158:	e7ff      	b.n	801015a <tcp_receive+0xf0a>
 801015a:	bf00      	nop
 801015c:	3750      	adds	r7, #80	; 0x50
 801015e:	46bd      	mov	sp, r7
 8010160:	bdb0      	pop	{r4, r5, r7, pc}
 8010162:	bf00      	nop
 8010164:	20004504 	.word	0x20004504
 8010168:	200044e4 	.word	0x200044e4
 801016c:	2000450e 	.word	0x2000450e
 8010170:	08017424 	.word	0x08017424
 8010174:	080177cc 	.word	0x080177cc
 8010178:	08017470 	.word	0x08017470

0801017c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801017c:	b480      	push	{r7}
 801017e:	b083      	sub	sp, #12
 8010180:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010182:	4b15      	ldr	r3, [pc, #84]	; (80101d8 <tcp_get_next_optbyte+0x5c>)
 8010184:	881b      	ldrh	r3, [r3, #0]
 8010186:	1c5a      	adds	r2, r3, #1
 8010188:	b291      	uxth	r1, r2
 801018a:	4a13      	ldr	r2, [pc, #76]	; (80101d8 <tcp_get_next_optbyte+0x5c>)
 801018c:	8011      	strh	r1, [r2, #0]
 801018e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010190:	4b12      	ldr	r3, [pc, #72]	; (80101dc <tcp_get_next_optbyte+0x60>)
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d004      	beq.n	80101a2 <tcp_get_next_optbyte+0x26>
 8010198:	4b11      	ldr	r3, [pc, #68]	; (80101e0 <tcp_get_next_optbyte+0x64>)
 801019a:	881b      	ldrh	r3, [r3, #0]
 801019c:	88fa      	ldrh	r2, [r7, #6]
 801019e:	429a      	cmp	r2, r3
 80101a0:	d208      	bcs.n	80101b4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80101a2:	4b10      	ldr	r3, [pc, #64]	; (80101e4 <tcp_get_next_optbyte+0x68>)
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	3314      	adds	r3, #20
 80101a8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80101aa:	88fb      	ldrh	r3, [r7, #6]
 80101ac:	683a      	ldr	r2, [r7, #0]
 80101ae:	4413      	add	r3, r2
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	e00b      	b.n	80101cc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80101b4:	88fb      	ldrh	r3, [r7, #6]
 80101b6:	b2da      	uxtb	r2, r3
 80101b8:	4b09      	ldr	r3, [pc, #36]	; (80101e0 <tcp_get_next_optbyte+0x64>)
 80101ba:	881b      	ldrh	r3, [r3, #0]
 80101bc:	b2db      	uxtb	r3, r3
 80101be:	1ad3      	subs	r3, r2, r3
 80101c0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80101c2:	4b06      	ldr	r3, [pc, #24]	; (80101dc <tcp_get_next_optbyte+0x60>)
 80101c4:	681a      	ldr	r2, [r3, #0]
 80101c6:	797b      	ldrb	r3, [r7, #5]
 80101c8:	4413      	add	r3, r2
 80101ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 80101cc:	4618      	mov	r0, r3
 80101ce:	370c      	adds	r7, #12
 80101d0:	46bd      	mov	sp, r7
 80101d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d6:	4770      	bx	lr
 80101d8:	20004500 	.word	0x20004500
 80101dc:	200044fc 	.word	0x200044fc
 80101e0:	200044fa 	.word	0x200044fa
 80101e4:	200044f4 	.word	0x200044f4

080101e8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b084      	sub	sp, #16
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d106      	bne.n	8010204 <tcp_parseopt+0x1c>
 80101f6:	4b31      	ldr	r3, [pc, #196]	; (80102bc <tcp_parseopt+0xd4>)
 80101f8:	f240 727d 	movw	r2, #1917	; 0x77d
 80101fc:	4930      	ldr	r1, [pc, #192]	; (80102c0 <tcp_parseopt+0xd8>)
 80101fe:	4831      	ldr	r0, [pc, #196]	; (80102c4 <tcp_parseopt+0xdc>)
 8010200:	f004 fee0 	bl	8014fc4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010204:	4b30      	ldr	r3, [pc, #192]	; (80102c8 <tcp_parseopt+0xe0>)
 8010206:	881b      	ldrh	r3, [r3, #0]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d053      	beq.n	80102b4 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801020c:	4b2f      	ldr	r3, [pc, #188]	; (80102cc <tcp_parseopt+0xe4>)
 801020e:	2200      	movs	r2, #0
 8010210:	801a      	strh	r2, [r3, #0]
 8010212:	e043      	b.n	801029c <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8010214:	f7ff ffb2 	bl	801017c <tcp_get_next_optbyte>
 8010218:	4603      	mov	r3, r0
 801021a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801021c:	7bfb      	ldrb	r3, [r7, #15]
 801021e:	2b01      	cmp	r3, #1
 8010220:	d03c      	beq.n	801029c <tcp_parseopt+0xb4>
 8010222:	2b02      	cmp	r3, #2
 8010224:	d002      	beq.n	801022c <tcp_parseopt+0x44>
 8010226:	2b00      	cmp	r3, #0
 8010228:	d03f      	beq.n	80102aa <tcp_parseopt+0xc2>
 801022a:	e026      	b.n	801027a <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801022c:	f7ff ffa6 	bl	801017c <tcp_get_next_optbyte>
 8010230:	4603      	mov	r3, r0
 8010232:	2b04      	cmp	r3, #4
 8010234:	d13b      	bne.n	80102ae <tcp_parseopt+0xc6>
 8010236:	4b25      	ldr	r3, [pc, #148]	; (80102cc <tcp_parseopt+0xe4>)
 8010238:	881b      	ldrh	r3, [r3, #0]
 801023a:	3302      	adds	r3, #2
 801023c:	4a22      	ldr	r2, [pc, #136]	; (80102c8 <tcp_parseopt+0xe0>)
 801023e:	8812      	ldrh	r2, [r2, #0]
 8010240:	4293      	cmp	r3, r2
 8010242:	dc34      	bgt.n	80102ae <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010244:	f7ff ff9a 	bl	801017c <tcp_get_next_optbyte>
 8010248:	4603      	mov	r3, r0
 801024a:	b29b      	uxth	r3, r3
 801024c:	021b      	lsls	r3, r3, #8
 801024e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010250:	f7ff ff94 	bl	801017c <tcp_get_next_optbyte>
 8010254:	4603      	mov	r3, r0
 8010256:	b29a      	uxth	r2, r3
 8010258:	89bb      	ldrh	r3, [r7, #12]
 801025a:	4313      	orrs	r3, r2
 801025c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801025e:	89bb      	ldrh	r3, [r7, #12]
 8010260:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010264:	d804      	bhi.n	8010270 <tcp_parseopt+0x88>
 8010266:	89bb      	ldrh	r3, [r7, #12]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d001      	beq.n	8010270 <tcp_parseopt+0x88>
 801026c:	89ba      	ldrh	r2, [r7, #12]
 801026e:	e001      	b.n	8010274 <tcp_parseopt+0x8c>
 8010270:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010278:	e010      	b.n	801029c <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801027a:	f7ff ff7f 	bl	801017c <tcp_get_next_optbyte>
 801027e:	4603      	mov	r3, r0
 8010280:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010282:	7afb      	ldrb	r3, [r7, #11]
 8010284:	2b01      	cmp	r3, #1
 8010286:	d914      	bls.n	80102b2 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010288:	7afb      	ldrb	r3, [r7, #11]
 801028a:	b29a      	uxth	r2, r3
 801028c:	4b0f      	ldr	r3, [pc, #60]	; (80102cc <tcp_parseopt+0xe4>)
 801028e:	881b      	ldrh	r3, [r3, #0]
 8010290:	4413      	add	r3, r2
 8010292:	b29b      	uxth	r3, r3
 8010294:	3b02      	subs	r3, #2
 8010296:	b29a      	uxth	r2, r3
 8010298:	4b0c      	ldr	r3, [pc, #48]	; (80102cc <tcp_parseopt+0xe4>)
 801029a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801029c:	4b0b      	ldr	r3, [pc, #44]	; (80102cc <tcp_parseopt+0xe4>)
 801029e:	881a      	ldrh	r2, [r3, #0]
 80102a0:	4b09      	ldr	r3, [pc, #36]	; (80102c8 <tcp_parseopt+0xe0>)
 80102a2:	881b      	ldrh	r3, [r3, #0]
 80102a4:	429a      	cmp	r2, r3
 80102a6:	d3b5      	bcc.n	8010214 <tcp_parseopt+0x2c>
 80102a8:	e004      	b.n	80102b4 <tcp_parseopt+0xcc>
          return;
 80102aa:	bf00      	nop
 80102ac:	e002      	b.n	80102b4 <tcp_parseopt+0xcc>
            return;
 80102ae:	bf00      	nop
 80102b0:	e000      	b.n	80102b4 <tcp_parseopt+0xcc>
            return;
 80102b2:	bf00      	nop
      }
    }
  }
}
 80102b4:	3710      	adds	r7, #16
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
 80102ba:	bf00      	nop
 80102bc:	08017424 	.word	0x08017424
 80102c0:	08017888 	.word	0x08017888
 80102c4:	08017470 	.word	0x08017470
 80102c8:	200044f8 	.word	0x200044f8
 80102cc:	20004500 	.word	0x20004500

080102d0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80102d0:	b480      	push	{r7}
 80102d2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80102d4:	4b05      	ldr	r3, [pc, #20]	; (80102ec <tcp_trigger_input_pcb_close+0x1c>)
 80102d6:	781b      	ldrb	r3, [r3, #0]
 80102d8:	f043 0310 	orr.w	r3, r3, #16
 80102dc:	b2da      	uxtb	r2, r3
 80102de:	4b03      	ldr	r3, [pc, #12]	; (80102ec <tcp_trigger_input_pcb_close+0x1c>)
 80102e0:	701a      	strb	r2, [r3, #0]
}
 80102e2:	bf00      	nop
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr
 80102ec:	20004511 	.word	0x20004511

080102f0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b084      	sub	sp, #16
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	60f8      	str	r0, [r7, #12]
 80102f8:	60b9      	str	r1, [r7, #8]
 80102fa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d00a      	beq.n	8010318 <tcp_route+0x28>
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	7a1b      	ldrb	r3, [r3, #8]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d006      	beq.n	8010318 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	7a1b      	ldrb	r3, [r3, #8]
 801030e:	4618      	mov	r0, r3
 8010310:	f7fb f888 	bl	800b424 <netif_get_by_index>
 8010314:	4603      	mov	r3, r0
 8010316:	e003      	b.n	8010320 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f003 fb17 	bl	801394c <ip4_route>
 801031e:	4603      	mov	r3, r0
  }
}
 8010320:	4618      	mov	r0, r3
 8010322:	3710      	adds	r7, #16
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}

08010328 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010328:	b590      	push	{r4, r7, lr}
 801032a:	b087      	sub	sp, #28
 801032c:	af00      	add	r7, sp, #0
 801032e:	60f8      	str	r0, [r7, #12]
 8010330:	60b9      	str	r1, [r7, #8]
 8010332:	603b      	str	r3, [r7, #0]
 8010334:	4613      	mov	r3, r2
 8010336:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d105      	bne.n	801034a <tcp_create_segment+0x22>
 801033e:	4b44      	ldr	r3, [pc, #272]	; (8010450 <tcp_create_segment+0x128>)
 8010340:	22a3      	movs	r2, #163	; 0xa3
 8010342:	4944      	ldr	r1, [pc, #272]	; (8010454 <tcp_create_segment+0x12c>)
 8010344:	4844      	ldr	r0, [pc, #272]	; (8010458 <tcp_create_segment+0x130>)
 8010346:	f004 fe3d 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d105      	bne.n	801035c <tcp_create_segment+0x34>
 8010350:	4b3f      	ldr	r3, [pc, #252]	; (8010450 <tcp_create_segment+0x128>)
 8010352:	22a4      	movs	r2, #164	; 0xa4
 8010354:	4941      	ldr	r1, [pc, #260]	; (801045c <tcp_create_segment+0x134>)
 8010356:	4840      	ldr	r0, [pc, #256]	; (8010458 <tcp_create_segment+0x130>)
 8010358:	f004 fe34 	bl	8014fc4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801035c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010360:	009b      	lsls	r3, r3, #2
 8010362:	b2db      	uxtb	r3, r3
 8010364:	f003 0304 	and.w	r3, r3, #4
 8010368:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801036a:	2003      	movs	r0, #3
 801036c:	f7fa fcf2 	bl	800ad54 <memp_malloc>
 8010370:	6138      	str	r0, [r7, #16]
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d104      	bne.n	8010382 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010378:	68b8      	ldr	r0, [r7, #8]
 801037a:	f7fb fbdd 	bl	800bb38 <pbuf_free>
    return NULL;
 801037e:	2300      	movs	r3, #0
 8010380:	e061      	b.n	8010446 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010388:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	2200      	movs	r2, #0
 801038e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	68ba      	ldr	r2, [r7, #8]
 8010394:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	891a      	ldrh	r2, [r3, #8]
 801039a:	7dfb      	ldrb	r3, [r7, #23]
 801039c:	b29b      	uxth	r3, r3
 801039e:	429a      	cmp	r2, r3
 80103a0:	d205      	bcs.n	80103ae <tcp_create_segment+0x86>
 80103a2:	4b2b      	ldr	r3, [pc, #172]	; (8010450 <tcp_create_segment+0x128>)
 80103a4:	22b0      	movs	r2, #176	; 0xb0
 80103a6:	492e      	ldr	r1, [pc, #184]	; (8010460 <tcp_create_segment+0x138>)
 80103a8:	482b      	ldr	r0, [pc, #172]	; (8010458 <tcp_create_segment+0x130>)
 80103aa:	f004 fe0b 	bl	8014fc4 <iprintf>
  seg->len = p->tot_len - optlen;
 80103ae:	68bb      	ldr	r3, [r7, #8]
 80103b0:	891a      	ldrh	r2, [r3, #8]
 80103b2:	7dfb      	ldrb	r3, [r7, #23]
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	1ad3      	subs	r3, r2, r3
 80103b8:	b29a      	uxth	r2, r3
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80103be:	2114      	movs	r1, #20
 80103c0:	68b8      	ldr	r0, [r7, #8]
 80103c2:	f7fb fb23 	bl	800ba0c <pbuf_add_header>
 80103c6:	4603      	mov	r3, r0
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d004      	beq.n	80103d6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80103cc:	6938      	ldr	r0, [r7, #16]
 80103ce:	f7fc ffe1 	bl	800d394 <tcp_seg_free>
    return NULL;
 80103d2:	2300      	movs	r3, #0
 80103d4:	e037      	b.n	8010446 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80103d6:	693b      	ldr	r3, [r7, #16]
 80103d8:	685b      	ldr	r3, [r3, #4]
 80103da:	685a      	ldr	r2, [r3, #4]
 80103dc:	693b      	ldr	r3, [r7, #16]
 80103de:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	8ada      	ldrh	r2, [r3, #22]
 80103e4:	693b      	ldr	r3, [r7, #16]
 80103e6:	68dc      	ldr	r4, [r3, #12]
 80103e8:	4610      	mov	r0, r2
 80103ea:	f7f9 ffc7 	bl	800a37c <lwip_htons>
 80103ee:	4603      	mov	r3, r0
 80103f0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	8b1a      	ldrh	r2, [r3, #24]
 80103f6:	693b      	ldr	r3, [r7, #16]
 80103f8:	68dc      	ldr	r4, [r3, #12]
 80103fa:	4610      	mov	r0, r2
 80103fc:	f7f9 ffbe 	bl	800a37c <lwip_htons>
 8010400:	4603      	mov	r3, r0
 8010402:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	68dc      	ldr	r4, [r3, #12]
 8010408:	6838      	ldr	r0, [r7, #0]
 801040a:	f7f9 ffcc 	bl	800a3a6 <lwip_htonl>
 801040e:	4603      	mov	r3, r0
 8010410:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010412:	7dfb      	ldrb	r3, [r7, #23]
 8010414:	089b      	lsrs	r3, r3, #2
 8010416:	b2db      	uxtb	r3, r3
 8010418:	b29b      	uxth	r3, r3
 801041a:	3305      	adds	r3, #5
 801041c:	b29b      	uxth	r3, r3
 801041e:	031b      	lsls	r3, r3, #12
 8010420:	b29a      	uxth	r2, r3
 8010422:	79fb      	ldrb	r3, [r7, #7]
 8010424:	b29b      	uxth	r3, r3
 8010426:	4313      	orrs	r3, r2
 8010428:	b29a      	uxth	r2, r3
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	68dc      	ldr	r4, [r3, #12]
 801042e:	4610      	mov	r0, r2
 8010430:	f7f9 ffa4 	bl	800a37c <lwip_htons>
 8010434:	4603      	mov	r3, r0
 8010436:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010438:	693b      	ldr	r3, [r7, #16]
 801043a:	68db      	ldr	r3, [r3, #12]
 801043c:	2200      	movs	r2, #0
 801043e:	749a      	strb	r2, [r3, #18]
 8010440:	2200      	movs	r2, #0
 8010442:	74da      	strb	r2, [r3, #19]
  return seg;
 8010444:	693b      	ldr	r3, [r7, #16]
}
 8010446:	4618      	mov	r0, r3
 8010448:	371c      	adds	r7, #28
 801044a:	46bd      	mov	sp, r7
 801044c:	bd90      	pop	{r4, r7, pc}
 801044e:	bf00      	nop
 8010450:	080178a4 	.word	0x080178a4
 8010454:	080178d8 	.word	0x080178d8
 8010458:	080178f8 	.word	0x080178f8
 801045c:	08017920 	.word	0x08017920
 8010460:	08017944 	.word	0x08017944

08010464 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b086      	sub	sp, #24
 8010468:	af00      	add	r7, sp, #0
 801046a:	607b      	str	r3, [r7, #4]
 801046c:	4603      	mov	r3, r0
 801046e:	73fb      	strb	r3, [r7, #15]
 8010470:	460b      	mov	r3, r1
 8010472:	81bb      	strh	r3, [r7, #12]
 8010474:	4613      	mov	r3, r2
 8010476:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010478:	89bb      	ldrh	r3, [r7, #12]
 801047a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d105      	bne.n	801048e <tcp_pbuf_prealloc+0x2a>
 8010482:	4b30      	ldr	r3, [pc, #192]	; (8010544 <tcp_pbuf_prealloc+0xe0>)
 8010484:	22e8      	movs	r2, #232	; 0xe8
 8010486:	4930      	ldr	r1, [pc, #192]	; (8010548 <tcp_pbuf_prealloc+0xe4>)
 8010488:	4830      	ldr	r0, [pc, #192]	; (801054c <tcp_pbuf_prealloc+0xe8>)
 801048a:	f004 fd9b 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801048e:	6a3b      	ldr	r3, [r7, #32]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d105      	bne.n	80104a0 <tcp_pbuf_prealloc+0x3c>
 8010494:	4b2b      	ldr	r3, [pc, #172]	; (8010544 <tcp_pbuf_prealloc+0xe0>)
 8010496:	22e9      	movs	r2, #233	; 0xe9
 8010498:	492d      	ldr	r1, [pc, #180]	; (8010550 <tcp_pbuf_prealloc+0xec>)
 801049a:	482c      	ldr	r0, [pc, #176]	; (801054c <tcp_pbuf_prealloc+0xe8>)
 801049c:	f004 fd92 	bl	8014fc4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80104a0:	89ba      	ldrh	r2, [r7, #12]
 80104a2:	897b      	ldrh	r3, [r7, #10]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d221      	bcs.n	80104ec <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80104a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80104ac:	f003 0302 	and.w	r3, r3, #2
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d111      	bne.n	80104d8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80104b4:	6a3b      	ldr	r3, [r7, #32]
 80104b6:	8b5b      	ldrh	r3, [r3, #26]
 80104b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d115      	bne.n	80104ec <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80104c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d007      	beq.n	80104d8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80104c8:	6a3b      	ldr	r3, [r7, #32]
 80104ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d103      	bne.n	80104d8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80104d0:	6a3b      	ldr	r3, [r7, #32]
 80104d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d009      	beq.n	80104ec <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80104d8:	89bb      	ldrh	r3, [r7, #12]
 80104da:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80104de:	f023 0203 	bic.w	r2, r3, #3
 80104e2:	897b      	ldrh	r3, [r7, #10]
 80104e4:	4293      	cmp	r3, r2
 80104e6:	bf28      	it	cs
 80104e8:	4613      	movcs	r3, r2
 80104ea:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80104ec:	8af9      	ldrh	r1, [r7, #22]
 80104ee:	7bfb      	ldrb	r3, [r7, #15]
 80104f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7fb f83f 	bl	800b578 <pbuf_alloc>
 80104fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d101      	bne.n	8010506 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010502:	2300      	movs	r3, #0
 8010504:	e019      	b.n	801053a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d006      	beq.n	801051c <tcp_pbuf_prealloc+0xb8>
 801050e:	4b0d      	ldr	r3, [pc, #52]	; (8010544 <tcp_pbuf_prealloc+0xe0>)
 8010510:	f240 120b 	movw	r2, #267	; 0x10b
 8010514:	490f      	ldr	r1, [pc, #60]	; (8010554 <tcp_pbuf_prealloc+0xf0>)
 8010516:	480d      	ldr	r0, [pc, #52]	; (801054c <tcp_pbuf_prealloc+0xe8>)
 8010518:	f004 fd54 	bl	8014fc4 <iprintf>
  *oversize = p->len - length;
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	895a      	ldrh	r2, [r3, #10]
 8010520:	89bb      	ldrh	r3, [r7, #12]
 8010522:	1ad3      	subs	r3, r2, r3
 8010524:	b29a      	uxth	r2, r3
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	89ba      	ldrh	r2, [r7, #12]
 801052e:	811a      	strh	r2, [r3, #8]
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	891a      	ldrh	r2, [r3, #8]
 8010534:	693b      	ldr	r3, [r7, #16]
 8010536:	815a      	strh	r2, [r3, #10]
  return p;
 8010538:	693b      	ldr	r3, [r7, #16]
}
 801053a:	4618      	mov	r0, r3
 801053c:	3718      	adds	r7, #24
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}
 8010542:	bf00      	nop
 8010544:	080178a4 	.word	0x080178a4
 8010548:	0801795c 	.word	0x0801795c
 801054c:	080178f8 	.word	0x080178f8
 8010550:	08017980 	.word	0x08017980
 8010554:	080179a0 	.word	0x080179a0

08010558 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	460b      	mov	r3, r1
 8010562:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d106      	bne.n	8010578 <tcp_write_checks+0x20>
 801056a:	4b33      	ldr	r3, [pc, #204]	; (8010638 <tcp_write_checks+0xe0>)
 801056c:	f240 1233 	movw	r2, #307	; 0x133
 8010570:	4932      	ldr	r1, [pc, #200]	; (801063c <tcp_write_checks+0xe4>)
 8010572:	4833      	ldr	r0, [pc, #204]	; (8010640 <tcp_write_checks+0xe8>)
 8010574:	f004 fd26 	bl	8014fc4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	7d1b      	ldrb	r3, [r3, #20]
 801057c:	2b04      	cmp	r3, #4
 801057e:	d00e      	beq.n	801059e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010584:	2b07      	cmp	r3, #7
 8010586:	d00a      	beq.n	801059e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801058c:	2b02      	cmp	r3, #2
 801058e:	d006      	beq.n	801059e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010594:	2b03      	cmp	r3, #3
 8010596:	d002      	beq.n	801059e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010598:	f06f 030a 	mvn.w	r3, #10
 801059c:	e048      	b.n	8010630 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801059e:	887b      	ldrh	r3, [r7, #2]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d101      	bne.n	80105a8 <tcp_write_checks+0x50>
    return ERR_OK;
 80105a4:	2300      	movs	r3, #0
 80105a6:	e043      	b.n	8010630 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80105ae:	887a      	ldrh	r2, [r7, #2]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d909      	bls.n	80105c8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	8b5b      	ldrh	r3, [r3, #26]
 80105b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105bc:	b29a      	uxth	r2, r3
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80105c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105c6:	e033      	b.n	8010630 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105ce:	2b08      	cmp	r3, #8
 80105d0:	d909      	bls.n	80105e6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	8b5b      	ldrh	r3, [r3, #26]
 80105d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105da:	b29a      	uxth	r2, r3
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80105e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105e4:	e024      	b.n	8010630 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d00f      	beq.n	8010610 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d11a      	bne.n	801062e <tcp_write_checks+0xd6>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d116      	bne.n	801062e <tcp_write_checks+0xd6>
 8010600:	4b0d      	ldr	r3, [pc, #52]	; (8010638 <tcp_write_checks+0xe0>)
 8010602:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8010606:	490f      	ldr	r1, [pc, #60]	; (8010644 <tcp_write_checks+0xec>)
 8010608:	480d      	ldr	r0, [pc, #52]	; (8010640 <tcp_write_checks+0xe8>)
 801060a:	f004 fcdb 	bl	8014fc4 <iprintf>
 801060e:	e00e      	b.n	801062e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010614:	2b00      	cmp	r3, #0
 8010616:	d103      	bne.n	8010620 <tcp_write_checks+0xc8>
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801061c:	2b00      	cmp	r3, #0
 801061e:	d006      	beq.n	801062e <tcp_write_checks+0xd6>
 8010620:	4b05      	ldr	r3, [pc, #20]	; (8010638 <tcp_write_checks+0xe0>)
 8010622:	f240 1259 	movw	r2, #345	; 0x159
 8010626:	4908      	ldr	r1, [pc, #32]	; (8010648 <tcp_write_checks+0xf0>)
 8010628:	4805      	ldr	r0, [pc, #20]	; (8010640 <tcp_write_checks+0xe8>)
 801062a:	f004 fccb 	bl	8014fc4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801062e:	2300      	movs	r3, #0
}
 8010630:	4618      	mov	r0, r3
 8010632:	3708      	adds	r7, #8
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}
 8010638:	080178a4 	.word	0x080178a4
 801063c:	080179b4 	.word	0x080179b4
 8010640:	080178f8 	.word	0x080178f8
 8010644:	080179d4 	.word	0x080179d4
 8010648:	08017a10 	.word	0x08017a10

0801064c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801064c:	b590      	push	{r4, r7, lr}
 801064e:	b09b      	sub	sp, #108	; 0x6c
 8010650:	af04      	add	r7, sp, #16
 8010652:	60f8      	str	r0, [r7, #12]
 8010654:	60b9      	str	r1, [r7, #8]
 8010656:	4611      	mov	r1, r2
 8010658:	461a      	mov	r2, r3
 801065a:	460b      	mov	r3, r1
 801065c:	80fb      	strh	r3, [r7, #6]
 801065e:	4613      	mov	r3, r2
 8010660:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010662:	2300      	movs	r3, #0
 8010664:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010666:	2300      	movs	r3, #0
 8010668:	653b      	str	r3, [r7, #80]	; 0x50
 801066a:	2300      	movs	r3, #0
 801066c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801066e:	2300      	movs	r3, #0
 8010670:	64bb      	str	r3, [r7, #72]	; 0x48
 8010672:	2300      	movs	r3, #0
 8010674:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010676:	2300      	movs	r3, #0
 8010678:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801067c:	2300      	movs	r3, #0
 801067e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010682:	2300      	movs	r3, #0
 8010684:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010686:	2300      	movs	r3, #0
 8010688:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801068a:	2300      	movs	r3, #0
 801068c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d109      	bne.n	80106a8 <tcp_write+0x5c>
 8010694:	4ba5      	ldr	r3, [pc, #660]	; (801092c <tcp_write+0x2e0>)
 8010696:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801069a:	49a5      	ldr	r1, [pc, #660]	; (8010930 <tcp_write+0x2e4>)
 801069c:	48a5      	ldr	r0, [pc, #660]	; (8010934 <tcp_write+0x2e8>)
 801069e:	f004 fc91 	bl	8014fc4 <iprintf>
 80106a2:	f06f 030f 	mvn.w	r3, #15
 80106a6:	e32c      	b.n	8010d02 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80106ae:	085b      	lsrs	r3, r3, #1
 80106b0:	b29a      	uxth	r2, r3
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106b6:	4293      	cmp	r3, r2
 80106b8:	bf28      	it	cs
 80106ba:	4613      	movcs	r3, r2
 80106bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80106be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d102      	bne.n	80106ca <tcp_write+0x7e>
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106c8:	e000      	b.n	80106cc <tcp_write+0x80>
 80106ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80106cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d109      	bne.n	80106e8 <tcp_write+0x9c>
 80106d4:	4b95      	ldr	r3, [pc, #596]	; (801092c <tcp_write+0x2e0>)
 80106d6:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 80106da:	4997      	ldr	r1, [pc, #604]	; (8010938 <tcp_write+0x2ec>)
 80106dc:	4895      	ldr	r0, [pc, #596]	; (8010934 <tcp_write+0x2e8>)
 80106de:	f004 fc71 	bl	8014fc4 <iprintf>
 80106e2:	f06f 030f 	mvn.w	r3, #15
 80106e6:	e30c      	b.n	8010d02 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80106e8:	88fb      	ldrh	r3, [r7, #6]
 80106ea:	4619      	mov	r1, r3
 80106ec:	68f8      	ldr	r0, [r7, #12]
 80106ee:	f7ff ff33 	bl	8010558 <tcp_write_checks>
 80106f2:	4603      	mov	r3, r0
 80106f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80106f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d002      	beq.n	8010706 <tcp_write+0xba>
    return err;
 8010700:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010704:	e2fd      	b.n	8010d02 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801070c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010710:	2300      	movs	r3, #0
 8010712:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801071a:	2b00      	cmp	r3, #0
 801071c:	f000 80f7 	beq.w	801090e <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010724:	653b      	str	r3, [r7, #80]	; 0x50
 8010726:	e002      	b.n	801072e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010728:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801072e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d1f8      	bne.n	8010728 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010738:	7a9b      	ldrb	r3, [r3, #10]
 801073a:	009b      	lsls	r3, r3, #2
 801073c:	b29b      	uxth	r3, r3
 801073e:	f003 0304 	and.w	r3, r3, #4
 8010742:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010744:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010748:	891b      	ldrh	r3, [r3, #8]
 801074a:	4619      	mov	r1, r3
 801074c:	8c3b      	ldrh	r3, [r7, #32]
 801074e:	440b      	add	r3, r1
 8010750:	429a      	cmp	r2, r3
 8010752:	da06      	bge.n	8010762 <tcp_write+0x116>
 8010754:	4b75      	ldr	r3, [pc, #468]	; (801092c <tcp_write+0x2e0>)
 8010756:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801075a:	4978      	ldr	r1, [pc, #480]	; (801093c <tcp_write+0x2f0>)
 801075c:	4875      	ldr	r0, [pc, #468]	; (8010934 <tcp_write+0x2e8>)
 801075e:	f004 fc31 	bl	8014fc4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010764:	891a      	ldrh	r2, [r3, #8]
 8010766:	8c3b      	ldrh	r3, [r7, #32]
 8010768:	4413      	add	r3, r2
 801076a:	b29b      	uxth	r3, r3
 801076c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801076e:	1ad3      	subs	r3, r2, r3
 8010770:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010778:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801077a:	8a7b      	ldrh	r3, [r7, #18]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d027      	beq.n	80107d0 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010780:	8a7b      	ldrh	r3, [r7, #18]
 8010782:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010784:	429a      	cmp	r2, r3
 8010786:	d206      	bcs.n	8010796 <tcp_write+0x14a>
 8010788:	4b68      	ldr	r3, [pc, #416]	; (801092c <tcp_write+0x2e0>)
 801078a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801078e:	496c      	ldr	r1, [pc, #432]	; (8010940 <tcp_write+0x2f4>)
 8010790:	4868      	ldr	r0, [pc, #416]	; (8010934 <tcp_write+0x2e8>)
 8010792:	f004 fc17 	bl	8014fc4 <iprintf>
      seg = last_unsent;
 8010796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010798:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801079a:	8a7b      	ldrh	r3, [r7, #18]
 801079c:	88fa      	ldrh	r2, [r7, #6]
 801079e:	429a      	cmp	r2, r3
 80107a0:	d901      	bls.n	80107a6 <tcp_write+0x15a>
 80107a2:	8a7b      	ldrh	r3, [r7, #18]
 80107a4:	e000      	b.n	80107a8 <tcp_write+0x15c>
 80107a6:	88fb      	ldrh	r3, [r7, #6]
 80107a8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80107aa:	4293      	cmp	r3, r2
 80107ac:	bfa8      	it	ge
 80107ae:	4613      	movge	r3, r2
 80107b0:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80107b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107b8:	4413      	add	r3, r2
 80107ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80107be:	8a7a      	ldrh	r2, [r7, #18]
 80107c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107c2:	1ad3      	subs	r3, r2, r3
 80107c4:	b29b      	uxth	r3, r3
 80107c6:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80107c8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80107ca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80107cc:	1ad3      	subs	r3, r2, r3
 80107ce:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80107d0:	8a7b      	ldrh	r3, [r7, #18]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d00b      	beq.n	80107ee <tcp_write+0x1a2>
 80107d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107da:	88fb      	ldrh	r3, [r7, #6]
 80107dc:	429a      	cmp	r2, r3
 80107de:	d006      	beq.n	80107ee <tcp_write+0x1a2>
 80107e0:	4b52      	ldr	r3, [pc, #328]	; (801092c <tcp_write+0x2e0>)
 80107e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80107e6:	4957      	ldr	r1, [pc, #348]	; (8010944 <tcp_write+0x2f8>)
 80107e8:	4852      	ldr	r0, [pc, #328]	; (8010934 <tcp_write+0x2e8>)
 80107ea:	f004 fbeb 	bl	8014fc4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80107ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80107f2:	88fb      	ldrh	r3, [r7, #6]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	f080 8168 	bcs.w	8010aca <tcp_write+0x47e>
 80107fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	f000 8164 	beq.w	8010aca <tcp_write+0x47e>
 8010802:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010804:	891b      	ldrh	r3, [r3, #8]
 8010806:	2b00      	cmp	r3, #0
 8010808:	f000 815f 	beq.w	8010aca <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801080c:	88fa      	ldrh	r2, [r7, #6]
 801080e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010812:	1ad2      	subs	r2, r2, r3
 8010814:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010816:	4293      	cmp	r3, r2
 8010818:	bfa8      	it	ge
 801081a:	4613      	movge	r3, r2
 801081c:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801081e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010820:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010822:	797b      	ldrb	r3, [r7, #5]
 8010824:	f003 0301 	and.w	r3, r3, #1
 8010828:	2b00      	cmp	r3, #0
 801082a:	d027      	beq.n	801087c <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801082c:	f107 0012 	add.w	r0, r7, #18
 8010830:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010832:	8bf9      	ldrh	r1, [r7, #30]
 8010834:	2301      	movs	r3, #1
 8010836:	9302      	str	r3, [sp, #8]
 8010838:	797b      	ldrb	r3, [r7, #5]
 801083a:	9301      	str	r3, [sp, #4]
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	9300      	str	r3, [sp, #0]
 8010840:	4603      	mov	r3, r0
 8010842:	2000      	movs	r0, #0
 8010844:	f7ff fe0e 	bl	8010464 <tcp_pbuf_prealloc>
 8010848:	6578      	str	r0, [r7, #84]	; 0x54
 801084a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801084c:	2b00      	cmp	r3, #0
 801084e:	f000 8226 	beq.w	8010c9e <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010854:	6858      	ldr	r0, [r3, #4]
 8010856:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801085a:	68ba      	ldr	r2, [r7, #8]
 801085c:	4413      	add	r3, r2
 801085e:	8bfa      	ldrh	r2, [r7, #30]
 8010860:	4619      	mov	r1, r3
 8010862:	f004 fb9c 	bl	8014f9e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010866:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010868:	f7fb f9f4 	bl	800bc54 <pbuf_clen>
 801086c:	4603      	mov	r3, r0
 801086e:	461a      	mov	r2, r3
 8010870:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010874:	4413      	add	r3, r2
 8010876:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801087a:	e041      	b.n	8010900 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801087c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	637b      	str	r3, [r7, #52]	; 0x34
 8010882:	e002      	b.n	801088a <tcp_write+0x23e>
 8010884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	637b      	str	r3, [r7, #52]	; 0x34
 801088a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d1f8      	bne.n	8010884 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010894:	7b1b      	ldrb	r3, [r3, #12]
 8010896:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801089a:	2b00      	cmp	r3, #0
 801089c:	d115      	bne.n	80108ca <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801089e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108a0:	685b      	ldr	r3, [r3, #4]
 80108a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80108a4:	8952      	ldrh	r2, [r2, #10]
 80108a6:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80108a8:	68ba      	ldr	r2, [r7, #8]
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d10d      	bne.n	80108ca <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80108ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d006      	beq.n	80108c4 <tcp_write+0x278>
 80108b6:	4b1d      	ldr	r3, [pc, #116]	; (801092c <tcp_write+0x2e0>)
 80108b8:	f240 2231 	movw	r2, #561	; 0x231
 80108bc:	4922      	ldr	r1, [pc, #136]	; (8010948 <tcp_write+0x2fc>)
 80108be:	481d      	ldr	r0, [pc, #116]	; (8010934 <tcp_write+0x2e8>)
 80108c0:	f004 fb80 	bl	8014fc4 <iprintf>
          extendlen = seglen;
 80108c4:	8bfb      	ldrh	r3, [r7, #30]
 80108c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80108c8:	e01a      	b.n	8010900 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80108ca:	8bfb      	ldrh	r3, [r7, #30]
 80108cc:	2201      	movs	r2, #1
 80108ce:	4619      	mov	r1, r3
 80108d0:	2000      	movs	r0, #0
 80108d2:	f7fa fe51 	bl	800b578 <pbuf_alloc>
 80108d6:	6578      	str	r0, [r7, #84]	; 0x54
 80108d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108da:	2b00      	cmp	r3, #0
 80108dc:	f000 81e1 	beq.w	8010ca2 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80108e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80108e4:	68ba      	ldr	r2, [r7, #8]
 80108e6:	441a      	add	r2, r3
 80108e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108ea:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80108ec:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80108ee:	f7fb f9b1 	bl	800bc54 <pbuf_clen>
 80108f2:	4603      	mov	r3, r0
 80108f4:	461a      	mov	r2, r3
 80108f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80108fa:	4413      	add	r3, r2
 80108fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010900:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010904:	8bfb      	ldrh	r3, [r7, #30]
 8010906:	4413      	add	r3, r2
 8010908:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801090c:	e0dd      	b.n	8010aca <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010914:	2b00      	cmp	r3, #0
 8010916:	f000 80d8 	beq.w	8010aca <tcp_write+0x47e>
 801091a:	4b04      	ldr	r3, [pc, #16]	; (801092c <tcp_write+0x2e0>)
 801091c:	f240 224b 	movw	r2, #587	; 0x24b
 8010920:	490a      	ldr	r1, [pc, #40]	; (801094c <tcp_write+0x300>)
 8010922:	4804      	ldr	r0, [pc, #16]	; (8010934 <tcp_write+0x2e8>)
 8010924:	f004 fb4e 	bl	8014fc4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010928:	e0cf      	b.n	8010aca <tcp_write+0x47e>
 801092a:	bf00      	nop
 801092c:	080178a4 	.word	0x080178a4
 8010930:	08017a44 	.word	0x08017a44
 8010934:	080178f8 	.word	0x080178f8
 8010938:	08017a5c 	.word	0x08017a5c
 801093c:	08017a90 	.word	0x08017a90
 8010940:	08017aa8 	.word	0x08017aa8
 8010944:	08017ac8 	.word	0x08017ac8
 8010948:	08017ae8 	.word	0x08017ae8
 801094c:	08017b14 	.word	0x08017b14
    struct pbuf *p;
    u16_t left = len - pos;
 8010950:	88fa      	ldrh	r2, [r7, #6]
 8010952:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010956:	1ad3      	subs	r3, r2, r3
 8010958:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801095a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801095e:	b29b      	uxth	r3, r3
 8010960:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010962:	1ad3      	subs	r3, r2, r3
 8010964:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010966:	8b7a      	ldrh	r2, [r7, #26]
 8010968:	8bbb      	ldrh	r3, [r7, #28]
 801096a:	4293      	cmp	r3, r2
 801096c:	bf28      	it	cs
 801096e:	4613      	movcs	r3, r2
 8010970:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010972:	797b      	ldrb	r3, [r7, #5]
 8010974:	f003 0301 	and.w	r3, r3, #1
 8010978:	2b00      	cmp	r3, #0
 801097a:	d036      	beq.n	80109ea <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801097c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010980:	b29a      	uxth	r2, r3
 8010982:	8b3b      	ldrh	r3, [r7, #24]
 8010984:	4413      	add	r3, r2
 8010986:	b299      	uxth	r1, r3
 8010988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801098a:	2b00      	cmp	r3, #0
 801098c:	bf0c      	ite	eq
 801098e:	2301      	moveq	r3, #1
 8010990:	2300      	movne	r3, #0
 8010992:	b2db      	uxtb	r3, r3
 8010994:	f107 0012 	add.w	r0, r7, #18
 8010998:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801099a:	9302      	str	r3, [sp, #8]
 801099c:	797b      	ldrb	r3, [r7, #5]
 801099e:	9301      	str	r3, [sp, #4]
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	9300      	str	r3, [sp, #0]
 80109a4:	4603      	mov	r3, r0
 80109a6:	2036      	movs	r0, #54	; 0x36
 80109a8:	f7ff fd5c 	bl	8010464 <tcp_pbuf_prealloc>
 80109ac:	6338      	str	r0, [r7, #48]	; 0x30
 80109ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	f000 8178 	beq.w	8010ca6 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80109b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b8:	895b      	ldrh	r3, [r3, #10]
 80109ba:	8b3a      	ldrh	r2, [r7, #24]
 80109bc:	429a      	cmp	r2, r3
 80109be:	d906      	bls.n	80109ce <tcp_write+0x382>
 80109c0:	4b8c      	ldr	r3, [pc, #560]	; (8010bf4 <tcp_write+0x5a8>)
 80109c2:	f240 2267 	movw	r2, #615	; 0x267
 80109c6:	498c      	ldr	r1, [pc, #560]	; (8010bf8 <tcp_write+0x5ac>)
 80109c8:	488c      	ldr	r0, [pc, #560]	; (8010bfc <tcp_write+0x5b0>)
 80109ca:	f004 fafb 	bl	8014fc4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80109ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109d0:	685a      	ldr	r2, [r3, #4]
 80109d2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80109d6:	18d0      	adds	r0, r2, r3
 80109d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80109dc:	68ba      	ldr	r2, [r7, #8]
 80109de:	4413      	add	r3, r2
 80109e0:	8b3a      	ldrh	r2, [r7, #24]
 80109e2:	4619      	mov	r1, r3
 80109e4:	f004 fadb 	bl	8014f9e <memcpy>
 80109e8:	e02f      	b.n	8010a4a <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80109ea:	8a7b      	ldrh	r3, [r7, #18]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d006      	beq.n	80109fe <tcp_write+0x3b2>
 80109f0:	4b80      	ldr	r3, [pc, #512]	; (8010bf4 <tcp_write+0x5a8>)
 80109f2:	f240 2271 	movw	r2, #625	; 0x271
 80109f6:	4982      	ldr	r1, [pc, #520]	; (8010c00 <tcp_write+0x5b4>)
 80109f8:	4880      	ldr	r0, [pc, #512]	; (8010bfc <tcp_write+0x5b0>)
 80109fa:	f004 fae3 	bl	8014fc4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80109fe:	8b3b      	ldrh	r3, [r7, #24]
 8010a00:	2201      	movs	r2, #1
 8010a02:	4619      	mov	r1, r3
 8010a04:	2036      	movs	r0, #54	; 0x36
 8010a06:	f7fa fdb7 	bl	800b578 <pbuf_alloc>
 8010a0a:	6178      	str	r0, [r7, #20]
 8010a0c:	697b      	ldr	r3, [r7, #20]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	f000 814b 	beq.w	8010caa <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010a14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a18:	68ba      	ldr	r2, [r7, #8]
 8010a1a:	441a      	add	r2, r3
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010a20:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010a24:	b29b      	uxth	r3, r3
 8010a26:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a2a:	4619      	mov	r1, r3
 8010a2c:	2036      	movs	r0, #54	; 0x36
 8010a2e:	f7fa fda3 	bl	800b578 <pbuf_alloc>
 8010a32:	6338      	str	r0, [r7, #48]	; 0x30
 8010a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d103      	bne.n	8010a42 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010a3a:	6978      	ldr	r0, [r7, #20]
 8010a3c:	f7fb f87c 	bl	800bb38 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010a40:	e136      	b.n	8010cb0 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010a42:	6979      	ldr	r1, [r7, #20]
 8010a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a46:	f7fb f945 	bl	800bcd4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a4c:	f7fb f902 	bl	800bc54 <pbuf_clen>
 8010a50:	4603      	mov	r3, r0
 8010a52:	461a      	mov	r2, r3
 8010a54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a58:	4413      	add	r3, r2
 8010a5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010a5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010a62:	2b09      	cmp	r3, #9
 8010a64:	d903      	bls.n	8010a6e <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010a66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a68:	f7fb f866 	bl	800bb38 <pbuf_free>
      goto memerr;
 8010a6c:	e120      	b.n	8010cb0 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010a72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a76:	441a      	add	r2, r3
 8010a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a7c:	9300      	str	r3, [sp, #0]
 8010a7e:	4613      	mov	r3, r2
 8010a80:	2200      	movs	r2, #0
 8010a82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010a84:	68f8      	ldr	r0, [r7, #12]
 8010a86:	f7ff fc4f 	bl	8010328 <tcp_create_segment>
 8010a8a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	f000 810d 	beq.w	8010cae <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d102      	bne.n	8010aa0 <tcp_write+0x454>
      queue = seg;
 8010a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8010a9e:	e00c      	b.n	8010aba <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d106      	bne.n	8010ab4 <tcp_write+0x468>
 8010aa6:	4b53      	ldr	r3, [pc, #332]	; (8010bf4 <tcp_write+0x5a8>)
 8010aa8:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010aac:	4955      	ldr	r1, [pc, #340]	; (8010c04 <tcp_write+0x5b8>)
 8010aae:	4853      	ldr	r0, [pc, #332]	; (8010bfc <tcp_write+0x5b0>)
 8010ab0:	f004 fa88 	bl	8014fc4 <iprintf>
      prev_seg->next = seg;
 8010ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ab6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010ab8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010aba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010abc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010abe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010ac2:	8b3b      	ldrh	r3, [r7, #24]
 8010ac4:	4413      	add	r3, r2
 8010ac6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010aca:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010ace:	88fb      	ldrh	r3, [r7, #6]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	f4ff af3d 	bcc.w	8010950 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010ad6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d02c      	beq.n	8010b36 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ae2:	e01e      	b.n	8010b22 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8010ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae6:	891a      	ldrh	r2, [r3, #8]
 8010ae8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010aea:	4413      	add	r3, r2
 8010aec:	b29a      	uxth	r2, r3
 8010aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d110      	bne.n	8010b1c <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010afc:	685b      	ldr	r3, [r3, #4]
 8010afe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b00:	8952      	ldrh	r2, [r2, #10]
 8010b02:	4413      	add	r3, r2
 8010b04:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010b06:	68b9      	ldr	r1, [r7, #8]
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f004 fa48 	bl	8014f9e <memcpy>
        p->len += oversize_used;
 8010b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b10:	895a      	ldrh	r2, [r3, #10]
 8010b12:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b14:	4413      	add	r3, r2
 8010b16:	b29a      	uxth	r2, r3
 8010b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b1a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d1dd      	bne.n	8010ae4 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8010b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b2a:	891a      	ldrh	r2, [r3, #8]
 8010b2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010b2e:	4413      	add	r3, r2
 8010b30:	b29a      	uxth	r2, r3
 8010b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b34:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010b36:	8a7a      	ldrh	r2, [r7, #18]
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d018      	beq.n	8010b76 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d106      	bne.n	8010b58 <tcp_write+0x50c>
 8010b4a:	4b2a      	ldr	r3, [pc, #168]	; (8010bf4 <tcp_write+0x5a8>)
 8010b4c:	f240 22e1 	movw	r2, #737	; 0x2e1
 8010b50:	492d      	ldr	r1, [pc, #180]	; (8010c08 <tcp_write+0x5bc>)
 8010b52:	482a      	ldr	r0, [pc, #168]	; (8010bfc <tcp_write+0x5b0>)
 8010b54:	f004 fa36 	bl	8014fc4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b5a:	685b      	ldr	r3, [r3, #4]
 8010b5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f7fb f8b8 	bl	800bcd4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b66:	891a      	ldrh	r2, [r3, #8]
 8010b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b6a:	891b      	ldrh	r3, [r3, #8]
 8010b6c:	4413      	add	r3, r2
 8010b6e:	b29a      	uxth	r2, r3
 8010b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b72:	811a      	strh	r2, [r3, #8]
 8010b74:	e037      	b.n	8010be6 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8010b76:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d034      	beq.n	8010be6 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d003      	beq.n	8010b8a <tcp_write+0x53e>
 8010b82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b84:	685b      	ldr	r3, [r3, #4]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d106      	bne.n	8010b98 <tcp_write+0x54c>
 8010b8a:	4b1a      	ldr	r3, [pc, #104]	; (8010bf4 <tcp_write+0x5a8>)
 8010b8c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010b90:	491e      	ldr	r1, [pc, #120]	; (8010c0c <tcp_write+0x5c0>)
 8010b92:	481a      	ldr	r0, [pc, #104]	; (8010bfc <tcp_write+0x5b0>)
 8010b94:	f004 fa16 	bl	8014fc4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010b98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b9a:	685b      	ldr	r3, [r3, #4]
 8010b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010b9e:	e009      	b.n	8010bb4 <tcp_write+0x568>
      p->tot_len += extendlen;
 8010ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba2:	891a      	ldrh	r2, [r3, #8]
 8010ba4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010ba6:	4413      	add	r3, r2
 8010ba8:	b29a      	uxth	r2, r3
 8010baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bac:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8010bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d1f1      	bne.n	8010ba0 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8010bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bbe:	891a      	ldrh	r2, [r3, #8]
 8010bc0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010bc2:	4413      	add	r3, r2
 8010bc4:	b29a      	uxth	r2, r3
 8010bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bcc:	895a      	ldrh	r2, [r3, #10]
 8010bce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010bd0:	4413      	add	r3, r2
 8010bd2:	b29a      	uxth	r2, r3
 8010bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010bd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bda:	891a      	ldrh	r2, [r3, #8]
 8010bdc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010bde:	4413      	add	r3, r2
 8010be0:	b29a      	uxth	r2, r3
 8010be2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010be4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d111      	bne.n	8010c10 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010bf0:	66da      	str	r2, [r3, #108]	; 0x6c
 8010bf2:	e010      	b.n	8010c16 <tcp_write+0x5ca>
 8010bf4:	080178a4 	.word	0x080178a4
 8010bf8:	08017b44 	.word	0x08017b44
 8010bfc:	080178f8 	.word	0x080178f8
 8010c00:	08017b84 	.word	0x08017b84
 8010c04:	08017b94 	.word	0x08017b94
 8010c08:	08017ba8 	.word	0x08017ba8
 8010c0c:	08017be0 	.word	0x08017be0
  } else {
    last_unsent->next = queue;
 8010c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c14:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010c1a:	88fb      	ldrh	r3, [r7, #6]
 8010c1c:	441a      	add	r2, r3
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010c28:	88fb      	ldrh	r3, [r7, #6]
 8010c2a:	1ad3      	subs	r3, r2, r3
 8010c2c:	b29a      	uxth	r2, r3
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010c3a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d00e      	beq.n	8010c66 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d10a      	bne.n	8010c66 <tcp_write+0x61a>
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d106      	bne.n	8010c66 <tcp_write+0x61a>
 8010c58:	4b2c      	ldr	r3, [pc, #176]	; (8010d0c <tcp_write+0x6c0>)
 8010c5a:	f240 3213 	movw	r2, #787	; 0x313
 8010c5e:	492c      	ldr	r1, [pc, #176]	; (8010d10 <tcp_write+0x6c4>)
 8010c60:	482c      	ldr	r0, [pc, #176]	; (8010d14 <tcp_write+0x6c8>)
 8010c62:	f004 f9af 	bl	8014fc4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d016      	beq.n	8010c9a <tcp_write+0x64e>
 8010c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c6e:	68db      	ldr	r3, [r3, #12]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d012      	beq.n	8010c9a <tcp_write+0x64e>
 8010c74:	797b      	ldrb	r3, [r7, #5]
 8010c76:	f003 0302 	and.w	r3, r3, #2
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d10d      	bne.n	8010c9a <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c80:	68db      	ldr	r3, [r3, #12]
 8010c82:	899b      	ldrh	r3, [r3, #12]
 8010c84:	b29c      	uxth	r4, r3
 8010c86:	2008      	movs	r0, #8
 8010c88:	f7f9 fb78 	bl	800a37c <lwip_htons>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	461a      	mov	r2, r3
 8010c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c92:	68db      	ldr	r3, [r3, #12]
 8010c94:	4322      	orrs	r2, r4
 8010c96:	b292      	uxth	r2, r2
 8010c98:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	e031      	b.n	8010d02 <tcp_write+0x6b6>
          goto memerr;
 8010c9e:	bf00      	nop
 8010ca0:	e006      	b.n	8010cb0 <tcp_write+0x664>
            goto memerr;
 8010ca2:	bf00      	nop
 8010ca4:	e004      	b.n	8010cb0 <tcp_write+0x664>
        goto memerr;
 8010ca6:	bf00      	nop
 8010ca8:	e002      	b.n	8010cb0 <tcp_write+0x664>
        goto memerr;
 8010caa:	bf00      	nop
 8010cac:	e000      	b.n	8010cb0 <tcp_write+0x664>
      goto memerr;
 8010cae:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	8b5b      	ldrh	r3, [r3, #26]
 8010cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cb8:	b29a      	uxth	r2, r3
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010cbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d002      	beq.n	8010cca <tcp_write+0x67e>
    pbuf_free(concat_p);
 8010cc4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010cc6:	f7fa ff37 	bl	800bb38 <pbuf_free>
  }
  if (queue != NULL) {
 8010cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d002      	beq.n	8010cd6 <tcp_write+0x68a>
    tcp_segs_free(queue);
 8010cd0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010cd2:	f7fc fb4b 	bl	800d36c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d00e      	beq.n	8010cfe <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d10a      	bne.n	8010cfe <tcp_write+0x6b2>
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d106      	bne.n	8010cfe <tcp_write+0x6b2>
 8010cf0:	4b06      	ldr	r3, [pc, #24]	; (8010d0c <tcp_write+0x6c0>)
 8010cf2:	f44f 724a 	mov.w	r2, #808	; 0x328
 8010cf6:	4906      	ldr	r1, [pc, #24]	; (8010d10 <tcp_write+0x6c4>)
 8010cf8:	4806      	ldr	r0, [pc, #24]	; (8010d14 <tcp_write+0x6c8>)
 8010cfa:	f004 f963 	bl	8014fc4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	375c      	adds	r7, #92	; 0x5c
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd90      	pop	{r4, r7, pc}
 8010d0a:	bf00      	nop
 8010d0c:	080178a4 	.word	0x080178a4
 8010d10:	08017c18 	.word	0x08017c18
 8010d14:	080178f8 	.word	0x080178f8

08010d18 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010d18:	b590      	push	{r4, r7, lr}
 8010d1a:	b08b      	sub	sp, #44	; 0x2c
 8010d1c:	af02      	add	r7, sp, #8
 8010d1e:	6078      	str	r0, [r7, #4]
 8010d20:	460b      	mov	r3, r1
 8010d22:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010d24:	2300      	movs	r3, #0
 8010d26:	61fb      	str	r3, [r7, #28]
 8010d28:	2300      	movs	r3, #0
 8010d2a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d106      	bne.n	8010d44 <tcp_split_unsent_seg+0x2c>
 8010d36:	4b95      	ldr	r3, [pc, #596]	; (8010f8c <tcp_split_unsent_seg+0x274>)
 8010d38:	f240 324b 	movw	r2, #843	; 0x34b
 8010d3c:	4994      	ldr	r1, [pc, #592]	; (8010f90 <tcp_split_unsent_seg+0x278>)
 8010d3e:	4895      	ldr	r0, [pc, #596]	; (8010f94 <tcp_split_unsent_seg+0x27c>)
 8010d40:	f004 f940 	bl	8014fc4 <iprintf>

  useg = pcb->unsent;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d48:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010d4a:	697b      	ldr	r3, [r7, #20]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d102      	bne.n	8010d56 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d54:	e116      	b.n	8010f84 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010d56:	887b      	ldrh	r3, [r7, #2]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d109      	bne.n	8010d70 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010d5c:	4b8b      	ldr	r3, [pc, #556]	; (8010f8c <tcp_split_unsent_seg+0x274>)
 8010d5e:	f240 3253 	movw	r2, #851	; 0x353
 8010d62:	498d      	ldr	r1, [pc, #564]	; (8010f98 <tcp_split_unsent_seg+0x280>)
 8010d64:	488b      	ldr	r0, [pc, #556]	; (8010f94 <tcp_split_unsent_seg+0x27c>)
 8010d66:	f004 f92d 	bl	8014fc4 <iprintf>
    return ERR_VAL;
 8010d6a:	f06f 0305 	mvn.w	r3, #5
 8010d6e:	e109      	b.n	8010f84 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010d70:	697b      	ldr	r3, [r7, #20]
 8010d72:	891b      	ldrh	r3, [r3, #8]
 8010d74:	887a      	ldrh	r2, [r7, #2]
 8010d76:	429a      	cmp	r2, r3
 8010d78:	d301      	bcc.n	8010d7e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	e102      	b.n	8010f84 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d82:	887a      	ldrh	r2, [r7, #2]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d906      	bls.n	8010d96 <tcp_split_unsent_seg+0x7e>
 8010d88:	4b80      	ldr	r3, [pc, #512]	; (8010f8c <tcp_split_unsent_seg+0x274>)
 8010d8a:	f240 325b 	movw	r2, #859	; 0x35b
 8010d8e:	4983      	ldr	r1, [pc, #524]	; (8010f9c <tcp_split_unsent_seg+0x284>)
 8010d90:	4880      	ldr	r0, [pc, #512]	; (8010f94 <tcp_split_unsent_seg+0x27c>)
 8010d92:	f004 f917 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	891b      	ldrh	r3, [r3, #8]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d106      	bne.n	8010dac <tcp_split_unsent_seg+0x94>
 8010d9e:	4b7b      	ldr	r3, [pc, #492]	; (8010f8c <tcp_split_unsent_seg+0x274>)
 8010da0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010da4:	497e      	ldr	r1, [pc, #504]	; (8010fa0 <tcp_split_unsent_seg+0x288>)
 8010da6:	487b      	ldr	r0, [pc, #492]	; (8010f94 <tcp_split_unsent_seg+0x27c>)
 8010da8:	f004 f90c 	bl	8014fc4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	7a9b      	ldrb	r3, [r3, #10]
 8010db0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010db2:	7bfb      	ldrb	r3, [r7, #15]
 8010db4:	009b      	lsls	r3, r3, #2
 8010db6:	b2db      	uxtb	r3, r3
 8010db8:	f003 0304 	and.w	r3, r3, #4
 8010dbc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8010dbe:	697b      	ldr	r3, [r7, #20]
 8010dc0:	891a      	ldrh	r2, [r3, #8]
 8010dc2:	887b      	ldrh	r3, [r7, #2]
 8010dc4:	1ad3      	subs	r3, r2, r3
 8010dc6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010dc8:	7bbb      	ldrb	r3, [r7, #14]
 8010dca:	b29a      	uxth	r2, r3
 8010dcc:	89bb      	ldrh	r3, [r7, #12]
 8010dce:	4413      	add	r3, r2
 8010dd0:	b29b      	uxth	r3, r3
 8010dd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010dd6:	4619      	mov	r1, r3
 8010dd8:	2036      	movs	r0, #54	; 0x36
 8010dda:	f7fa fbcd 	bl	800b578 <pbuf_alloc>
 8010dde:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010de0:	693b      	ldr	r3, [r7, #16]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	f000 80b7 	beq.w	8010f56 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	891a      	ldrh	r2, [r3, #8]
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	891b      	ldrh	r3, [r3, #8]
 8010df2:	1ad3      	subs	r3, r2, r3
 8010df4:	b29a      	uxth	r2, r3
 8010df6:	887b      	ldrh	r3, [r7, #2]
 8010df8:	4413      	add	r3, r2
 8010dfa:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	6858      	ldr	r0, [r3, #4]
 8010e00:	693b      	ldr	r3, [r7, #16]
 8010e02:	685a      	ldr	r2, [r3, #4]
 8010e04:	7bbb      	ldrb	r3, [r7, #14]
 8010e06:	18d1      	adds	r1, r2, r3
 8010e08:	897b      	ldrh	r3, [r7, #10]
 8010e0a:	89ba      	ldrh	r2, [r7, #12]
 8010e0c:	f7fb f88a 	bl	800bf24 <pbuf_copy_partial>
 8010e10:	4603      	mov	r3, r0
 8010e12:	461a      	mov	r2, r3
 8010e14:	89bb      	ldrh	r3, [r7, #12]
 8010e16:	4293      	cmp	r3, r2
 8010e18:	f040 809f 	bne.w	8010f5a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	899b      	ldrh	r3, [r3, #12]
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	4618      	mov	r0, r3
 8010e26:	f7f9 faa9 	bl	800a37c <lwip_htons>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	b2db      	uxtb	r3, r3
 8010e2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e32:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010e34:	2300      	movs	r3, #0
 8010e36:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010e38:	7efb      	ldrb	r3, [r7, #27]
 8010e3a:	f003 0308 	and.w	r3, r3, #8
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d007      	beq.n	8010e52 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010e42:	7efb      	ldrb	r3, [r7, #27]
 8010e44:	f023 0308 	bic.w	r3, r3, #8
 8010e48:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010e4a:	7ebb      	ldrb	r3, [r7, #26]
 8010e4c:	f043 0308 	orr.w	r3, r3, #8
 8010e50:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010e52:	7efb      	ldrb	r3, [r7, #27]
 8010e54:	f003 0301 	and.w	r3, r3, #1
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d007      	beq.n	8010e6c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010e5c:	7efb      	ldrb	r3, [r7, #27]
 8010e5e:	f023 0301 	bic.w	r3, r3, #1
 8010e62:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010e64:	7ebb      	ldrb	r3, [r7, #26]
 8010e66:	f043 0301 	orr.w	r3, r3, #1
 8010e6a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	68db      	ldr	r3, [r3, #12]
 8010e70:	685b      	ldr	r3, [r3, #4]
 8010e72:	4618      	mov	r0, r3
 8010e74:	f7f9 fa97 	bl	800a3a6 <lwip_htonl>
 8010e78:	4602      	mov	r2, r0
 8010e7a:	887b      	ldrh	r3, [r7, #2]
 8010e7c:	18d1      	adds	r1, r2, r3
 8010e7e:	7eba      	ldrb	r2, [r7, #26]
 8010e80:	7bfb      	ldrb	r3, [r7, #15]
 8010e82:	9300      	str	r3, [sp, #0]
 8010e84:	460b      	mov	r3, r1
 8010e86:	6939      	ldr	r1, [r7, #16]
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f7ff fa4d 	bl	8010328 <tcp_create_segment>
 8010e8e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010e90:	69fb      	ldr	r3, [r7, #28]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d063      	beq.n	8010f5e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	685b      	ldr	r3, [r3, #4]
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7fa feda 	bl	800bc54 <pbuf_clen>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010eaa:	1a9b      	subs	r3, r3, r2
 8010eac:	b29a      	uxth	r2, r3
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010eb4:	697b      	ldr	r3, [r7, #20]
 8010eb6:	6858      	ldr	r0, [r3, #4]
 8010eb8:	697b      	ldr	r3, [r7, #20]
 8010eba:	685b      	ldr	r3, [r3, #4]
 8010ebc:	891a      	ldrh	r2, [r3, #8]
 8010ebe:	89bb      	ldrh	r3, [r7, #12]
 8010ec0:	1ad3      	subs	r3, r2, r3
 8010ec2:	b29b      	uxth	r3, r3
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	f7fa fcb1 	bl	800b82c <pbuf_realloc>
  useg->len -= remainder;
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	891a      	ldrh	r2, [r3, #8]
 8010ece:	89bb      	ldrh	r3, [r7, #12]
 8010ed0:	1ad3      	subs	r3, r2, r3
 8010ed2:	b29a      	uxth	r2, r3
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	68db      	ldr	r3, [r3, #12]
 8010edc:	899b      	ldrh	r3, [r3, #12]
 8010ede:	b29c      	uxth	r4, r3
 8010ee0:	7efb      	ldrb	r3, [r7, #27]
 8010ee2:	b29b      	uxth	r3, r3
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7f9 fa49 	bl	800a37c <lwip_htons>
 8010eea:	4603      	mov	r3, r0
 8010eec:	461a      	mov	r2, r3
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	68db      	ldr	r3, [r3, #12]
 8010ef2:	4322      	orrs	r2, r4
 8010ef4:	b292      	uxth	r2, r2
 8010ef6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010ef8:	697b      	ldr	r3, [r7, #20]
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	4618      	mov	r0, r3
 8010efe:	f7fa fea9 	bl	800bc54 <pbuf_clen>
 8010f02:	4603      	mov	r3, r0
 8010f04:	461a      	mov	r2, r3
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f0c:	4413      	add	r3, r2
 8010f0e:	b29a      	uxth	r2, r3
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010f16:	69fb      	ldr	r3, [r7, #28]
 8010f18:	685b      	ldr	r3, [r3, #4]
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7fa fe9a 	bl	800bc54 <pbuf_clen>
 8010f20:	4603      	mov	r3, r0
 8010f22:	461a      	mov	r2, r3
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f2a:	4413      	add	r3, r2
 8010f2c:	b29a      	uxth	r2, r3
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010f34:	697b      	ldr	r3, [r7, #20]
 8010f36:	681a      	ldr	r2, [r3, #0]
 8010f38:	69fb      	ldr	r3, [r7, #28]
 8010f3a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010f3c:	697b      	ldr	r3, [r7, #20]
 8010f3e:	69fa      	ldr	r2, [r7, #28]
 8010f40:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010f42:	69fb      	ldr	r3, [r7, #28]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d103      	bne.n	8010f52 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010f52:	2300      	movs	r3, #0
 8010f54:	e016      	b.n	8010f84 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010f56:	bf00      	nop
 8010f58:	e002      	b.n	8010f60 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010f5a:	bf00      	nop
 8010f5c:	e000      	b.n	8010f60 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010f5e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010f60:	69fb      	ldr	r3, [r7, #28]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d006      	beq.n	8010f74 <tcp_split_unsent_seg+0x25c>
 8010f66:	4b09      	ldr	r3, [pc, #36]	; (8010f8c <tcp_split_unsent_seg+0x274>)
 8010f68:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010f6c:	490d      	ldr	r1, [pc, #52]	; (8010fa4 <tcp_split_unsent_seg+0x28c>)
 8010f6e:	4809      	ldr	r0, [pc, #36]	; (8010f94 <tcp_split_unsent_seg+0x27c>)
 8010f70:	f004 f828 	bl	8014fc4 <iprintf>
  if (p != NULL) {
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d002      	beq.n	8010f80 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010f7a:	6938      	ldr	r0, [r7, #16]
 8010f7c:	f7fa fddc 	bl	800bb38 <pbuf_free>
  }

  return ERR_MEM;
 8010f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010f84:	4618      	mov	r0, r3
 8010f86:	3724      	adds	r7, #36	; 0x24
 8010f88:	46bd      	mov	sp, r7
 8010f8a:	bd90      	pop	{r4, r7, pc}
 8010f8c:	080178a4 	.word	0x080178a4
 8010f90:	08017c38 	.word	0x08017c38
 8010f94:	080178f8 	.word	0x080178f8
 8010f98:	08017c5c 	.word	0x08017c5c
 8010f9c:	08017c80 	.word	0x08017c80
 8010fa0:	08017c90 	.word	0x08017c90
 8010fa4:	08017ca0 	.word	0x08017ca0

08010fa8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010fa8:	b590      	push	{r4, r7, lr}
 8010faa:	b085      	sub	sp, #20
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d106      	bne.n	8010fc4 <tcp_send_fin+0x1c>
 8010fb6:	4b21      	ldr	r3, [pc, #132]	; (801103c <tcp_send_fin+0x94>)
 8010fb8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010fbc:	4920      	ldr	r1, [pc, #128]	; (8011040 <tcp_send_fin+0x98>)
 8010fbe:	4821      	ldr	r0, [pc, #132]	; (8011044 <tcp_send_fin+0x9c>)
 8010fc0:	f004 f800 	bl	8014fc4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d02e      	beq.n	801102a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fd0:	60fb      	str	r3, [r7, #12]
 8010fd2:	e002      	b.n	8010fda <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d1f8      	bne.n	8010fd4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	68db      	ldr	r3, [r3, #12]
 8010fe6:	899b      	ldrh	r3, [r3, #12]
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	4618      	mov	r0, r3
 8010fec:	f7f9 f9c6 	bl	800a37c <lwip_htons>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	b2db      	uxtb	r3, r3
 8010ff4:	f003 0307 	and.w	r3, r3, #7
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d116      	bne.n	801102a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	68db      	ldr	r3, [r3, #12]
 8011000:	899b      	ldrh	r3, [r3, #12]
 8011002:	b29c      	uxth	r4, r3
 8011004:	2001      	movs	r0, #1
 8011006:	f7f9 f9b9 	bl	800a37c <lwip_htons>
 801100a:	4603      	mov	r3, r0
 801100c:	461a      	mov	r2, r3
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	68db      	ldr	r3, [r3, #12]
 8011012:	4322      	orrs	r2, r4
 8011014:	b292      	uxth	r2, r2
 8011016:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	8b5b      	ldrh	r3, [r3, #26]
 801101c:	f043 0320 	orr.w	r3, r3, #32
 8011020:	b29a      	uxth	r2, r3
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011026:	2300      	movs	r3, #0
 8011028:	e004      	b.n	8011034 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801102a:	2101      	movs	r1, #1
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f000 f80b 	bl	8011048 <tcp_enqueue_flags>
 8011032:	4603      	mov	r3, r0
}
 8011034:	4618      	mov	r0, r3
 8011036:	3714      	adds	r7, #20
 8011038:	46bd      	mov	sp, r7
 801103a:	bd90      	pop	{r4, r7, pc}
 801103c:	080178a4 	.word	0x080178a4
 8011040:	08017cac 	.word	0x08017cac
 8011044:	080178f8 	.word	0x080178f8

08011048 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b08a      	sub	sp, #40	; 0x28
 801104c:	af02      	add	r7, sp, #8
 801104e:	6078      	str	r0, [r7, #4]
 8011050:	460b      	mov	r3, r1
 8011052:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011054:	2300      	movs	r3, #0
 8011056:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011058:	2300      	movs	r3, #0
 801105a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801105c:	78fb      	ldrb	r3, [r7, #3]
 801105e:	f003 0303 	and.w	r3, r3, #3
 8011062:	2b00      	cmp	r3, #0
 8011064:	d106      	bne.n	8011074 <tcp_enqueue_flags+0x2c>
 8011066:	4b67      	ldr	r3, [pc, #412]	; (8011204 <tcp_enqueue_flags+0x1bc>)
 8011068:	f240 4212 	movw	r2, #1042	; 0x412
 801106c:	4966      	ldr	r1, [pc, #408]	; (8011208 <tcp_enqueue_flags+0x1c0>)
 801106e:	4867      	ldr	r0, [pc, #412]	; (801120c <tcp_enqueue_flags+0x1c4>)
 8011070:	f003 ffa8 	bl	8014fc4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d106      	bne.n	8011088 <tcp_enqueue_flags+0x40>
 801107a:	4b62      	ldr	r3, [pc, #392]	; (8011204 <tcp_enqueue_flags+0x1bc>)
 801107c:	f240 4213 	movw	r2, #1043	; 0x413
 8011080:	4963      	ldr	r1, [pc, #396]	; (8011210 <tcp_enqueue_flags+0x1c8>)
 8011082:	4862      	ldr	r0, [pc, #392]	; (801120c <tcp_enqueue_flags+0x1c4>)
 8011084:	f003 ff9e 	bl	8014fc4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011088:	78fb      	ldrb	r3, [r7, #3]
 801108a:	f003 0302 	and.w	r3, r3, #2
 801108e:	2b00      	cmp	r3, #0
 8011090:	d001      	beq.n	8011096 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011092:	2301      	movs	r3, #1
 8011094:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011096:	7ffb      	ldrb	r3, [r7, #31]
 8011098:	009b      	lsls	r3, r3, #2
 801109a:	b2db      	uxtb	r3, r3
 801109c:	f003 0304 	and.w	r3, r3, #4
 80110a0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80110a2:	7dfb      	ldrb	r3, [r7, #23]
 80110a4:	b29b      	uxth	r3, r3
 80110a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80110aa:	4619      	mov	r1, r3
 80110ac:	2036      	movs	r0, #54	; 0x36
 80110ae:	f7fa fa63 	bl	800b578 <pbuf_alloc>
 80110b2:	6138      	str	r0, [r7, #16]
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d109      	bne.n	80110ce <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	8b5b      	ldrh	r3, [r3, #26]
 80110be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110c2:	b29a      	uxth	r2, r3
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80110c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110cc:	e095      	b.n	80111fa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80110ce:	693b      	ldr	r3, [r7, #16]
 80110d0:	895a      	ldrh	r2, [r3, #10]
 80110d2:	7dfb      	ldrb	r3, [r7, #23]
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	429a      	cmp	r2, r3
 80110d8:	d206      	bcs.n	80110e8 <tcp_enqueue_flags+0xa0>
 80110da:	4b4a      	ldr	r3, [pc, #296]	; (8011204 <tcp_enqueue_flags+0x1bc>)
 80110dc:	f240 423a 	movw	r2, #1082	; 0x43a
 80110e0:	494c      	ldr	r1, [pc, #304]	; (8011214 <tcp_enqueue_flags+0x1cc>)
 80110e2:	484a      	ldr	r0, [pc, #296]	; (801120c <tcp_enqueue_flags+0x1c4>)
 80110e4:	f003 ff6e 	bl	8014fc4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80110ec:	78fa      	ldrb	r2, [r7, #3]
 80110ee:	7ffb      	ldrb	r3, [r7, #31]
 80110f0:	9300      	str	r3, [sp, #0]
 80110f2:	460b      	mov	r3, r1
 80110f4:	6939      	ldr	r1, [r7, #16]
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	f7ff f916 	bl	8010328 <tcp_create_segment>
 80110fc:	60f8      	str	r0, [r7, #12]
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d109      	bne.n	8011118 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	8b5b      	ldrh	r3, [r3, #26]
 8011108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801110c:	b29a      	uxth	r2, r3
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011116:	e070      	b.n	80111fa <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	68db      	ldr	r3, [r3, #12]
 801111c:	f003 0303 	and.w	r3, r3, #3
 8011120:	2b00      	cmp	r3, #0
 8011122:	d006      	beq.n	8011132 <tcp_enqueue_flags+0xea>
 8011124:	4b37      	ldr	r3, [pc, #220]	; (8011204 <tcp_enqueue_flags+0x1bc>)
 8011126:	f240 4242 	movw	r2, #1090	; 0x442
 801112a:	493b      	ldr	r1, [pc, #236]	; (8011218 <tcp_enqueue_flags+0x1d0>)
 801112c:	4837      	ldr	r0, [pc, #220]	; (801120c <tcp_enqueue_flags+0x1c4>)
 801112e:	f003 ff49 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	891b      	ldrh	r3, [r3, #8]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d006      	beq.n	8011148 <tcp_enqueue_flags+0x100>
 801113a:	4b32      	ldr	r3, [pc, #200]	; (8011204 <tcp_enqueue_flags+0x1bc>)
 801113c:	f240 4243 	movw	r2, #1091	; 0x443
 8011140:	4936      	ldr	r1, [pc, #216]	; (801121c <tcp_enqueue_flags+0x1d4>)
 8011142:	4832      	ldr	r0, [pc, #200]	; (801120c <tcp_enqueue_flags+0x1c4>)
 8011144:	f003 ff3e 	bl	8014fc4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801114c:	2b00      	cmp	r3, #0
 801114e:	d103      	bne.n	8011158 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	68fa      	ldr	r2, [r7, #12]
 8011154:	66da      	str	r2, [r3, #108]	; 0x6c
 8011156:	e00d      	b.n	8011174 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801115c:	61bb      	str	r3, [r7, #24]
 801115e:	e002      	b.n	8011166 <tcp_enqueue_flags+0x11e>
 8011160:	69bb      	ldr	r3, [r7, #24]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	61bb      	str	r3, [r7, #24]
 8011166:	69bb      	ldr	r3, [r7, #24]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d1f8      	bne.n	8011160 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801116e:	69bb      	ldr	r3, [r7, #24]
 8011170:	68fa      	ldr	r2, [r7, #12]
 8011172:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2200      	movs	r2, #0
 8011178:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801117c:	78fb      	ldrb	r3, [r7, #3]
 801117e:	f003 0302 	and.w	r3, r3, #2
 8011182:	2b00      	cmp	r3, #0
 8011184:	d104      	bne.n	8011190 <tcp_enqueue_flags+0x148>
 8011186:	78fb      	ldrb	r3, [r7, #3]
 8011188:	f003 0301 	and.w	r3, r3, #1
 801118c:	2b00      	cmp	r3, #0
 801118e:	d004      	beq.n	801119a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011194:	1c5a      	adds	r2, r3, #1
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801119a:	78fb      	ldrb	r3, [r7, #3]
 801119c:	f003 0301 	and.w	r3, r3, #1
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d006      	beq.n	80111b2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	8b5b      	ldrh	r3, [r3, #26]
 80111a8:	f043 0320 	orr.w	r3, r3, #32
 80111ac:	b29a      	uxth	r2, r3
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	685b      	ldr	r3, [r3, #4]
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7fa fd4c 	bl	800bc54 <pbuf_clen>
 80111bc:	4603      	mov	r3, r0
 80111be:	461a      	mov	r2, r3
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111c6:	4413      	add	r3, r2
 80111c8:	b29a      	uxth	r2, r3
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d00e      	beq.n	80111f8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d10a      	bne.n	80111f8 <tcp_enqueue_flags+0x1b0>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d106      	bne.n	80111f8 <tcp_enqueue_flags+0x1b0>
 80111ea:	4b06      	ldr	r3, [pc, #24]	; (8011204 <tcp_enqueue_flags+0x1bc>)
 80111ec:	f240 4266 	movw	r2, #1126	; 0x466
 80111f0:	490b      	ldr	r1, [pc, #44]	; (8011220 <tcp_enqueue_flags+0x1d8>)
 80111f2:	4806      	ldr	r0, [pc, #24]	; (801120c <tcp_enqueue_flags+0x1c4>)
 80111f4:	f003 fee6 	bl	8014fc4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80111f8:	2300      	movs	r3, #0
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3720      	adds	r7, #32
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}
 8011202:	bf00      	nop
 8011204:	080178a4 	.word	0x080178a4
 8011208:	08017cc8 	.word	0x08017cc8
 801120c:	080178f8 	.word	0x080178f8
 8011210:	08017d20 	.word	0x08017d20
 8011214:	08017d40 	.word	0x08017d40
 8011218:	08017d7c 	.word	0x08017d7c
 801121c:	08017d94 	.word	0x08017d94
 8011220:	08017dc0 	.word	0x08017dc0

08011224 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011224:	b5b0      	push	{r4, r5, r7, lr}
 8011226:	b08a      	sub	sp, #40	; 0x28
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2b00      	cmp	r3, #0
 8011230:	d106      	bne.n	8011240 <tcp_output+0x1c>
 8011232:	4ba0      	ldr	r3, [pc, #640]	; (80114b4 <tcp_output+0x290>)
 8011234:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011238:	499f      	ldr	r1, [pc, #636]	; (80114b8 <tcp_output+0x294>)
 801123a:	48a0      	ldr	r0, [pc, #640]	; (80114bc <tcp_output+0x298>)
 801123c:	f003 fec2 	bl	8014fc4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	7d1b      	ldrb	r3, [r3, #20]
 8011244:	2b01      	cmp	r3, #1
 8011246:	d106      	bne.n	8011256 <tcp_output+0x32>
 8011248:	4b9a      	ldr	r3, [pc, #616]	; (80114b4 <tcp_output+0x290>)
 801124a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 801124e:	499c      	ldr	r1, [pc, #624]	; (80114c0 <tcp_output+0x29c>)
 8011250:	489a      	ldr	r0, [pc, #616]	; (80114bc <tcp_output+0x298>)
 8011252:	f003 feb7 	bl	8014fc4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011256:	4b9b      	ldr	r3, [pc, #620]	; (80114c4 <tcp_output+0x2a0>)
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	687a      	ldr	r2, [r7, #4]
 801125c:	429a      	cmp	r2, r3
 801125e:	d101      	bne.n	8011264 <tcp_output+0x40>
    return ERR_OK;
 8011260:	2300      	movs	r3, #0
 8011262:	e1d2      	b.n	801160a <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011270:	429a      	cmp	r2, r3
 8011272:	d203      	bcs.n	801127c <tcp_output+0x58>
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801127a:	e002      	b.n	8011282 <tcp_output+0x5e>
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011282:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011288:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801128a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128c:	2b00      	cmp	r3, #0
 801128e:	d10b      	bne.n	80112a8 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	8b5b      	ldrh	r3, [r3, #26]
 8011294:	f003 0302 	and.w	r3, r3, #2
 8011298:	2b00      	cmp	r3, #0
 801129a:	f000 81a9 	beq.w	80115f0 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	f000 fdd8 	bl	8011e54 <tcp_send_empty_ack>
 80112a4:	4603      	mov	r3, r0
 80112a6:	e1b0      	b.n	801160a <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80112a8:	6879      	ldr	r1, [r7, #4]
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	3304      	adds	r3, #4
 80112ae:	461a      	mov	r2, r3
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f7ff f81d 	bl	80102f0 <tcp_route>
 80112b6:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80112b8:	697b      	ldr	r3, [r7, #20]
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d102      	bne.n	80112c4 <tcp_output+0xa0>
    return ERR_RTE;
 80112be:	f06f 0303 	mvn.w	r3, #3
 80112c2:	e1a2      	b.n	801160a <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d003      	beq.n	80112d2 <tcp_output+0xae>
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d111      	bne.n	80112f6 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80112d2:	697b      	ldr	r3, [r7, #20]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d002      	beq.n	80112de <tcp_output+0xba>
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	3304      	adds	r3, #4
 80112dc:	e000      	b.n	80112e0 <tcp_output+0xbc>
 80112de:	2300      	movs	r3, #0
 80112e0:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d102      	bne.n	80112ee <tcp_output+0xca>
      return ERR_RTE;
 80112e8:	f06f 0303 	mvn.w	r3, #3
 80112ec:	e18d      	b.n	801160a <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	681a      	ldr	r2, [r3, #0]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80112f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7f9 f852 	bl	800a3a6 <lwip_htonl>
 8011302:	4602      	mov	r2, r0
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011308:	1ad3      	subs	r3, r2, r3
 801130a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801130c:	8912      	ldrh	r2, [r2, #8]
 801130e:	4413      	add	r3, r2
 8011310:	69ba      	ldr	r2, [r7, #24]
 8011312:	429a      	cmp	r2, r3
 8011314:	d227      	bcs.n	8011366 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801131c:	461a      	mov	r2, r3
 801131e:	69bb      	ldr	r3, [r7, #24]
 8011320:	4293      	cmp	r3, r2
 8011322:	d114      	bne.n	801134e <tcp_output+0x12a>
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011328:	2b00      	cmp	r3, #0
 801132a:	d110      	bne.n	801134e <tcp_output+0x12a>
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011332:	2b00      	cmp	r3, #0
 8011334:	d10b      	bne.n	801134e <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	2200      	movs	r2, #0
 801133a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2201      	movs	r2, #1
 8011342:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2200      	movs	r2, #0
 801134a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	8b5b      	ldrh	r3, [r3, #26]
 8011352:	f003 0302 	and.w	r3, r3, #2
 8011356:	2b00      	cmp	r3, #0
 8011358:	f000 814c 	beq.w	80115f4 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f000 fd79 	bl	8011e54 <tcp_send_empty_ack>
 8011362:	4603      	mov	r3, r0
 8011364:	e151      	b.n	801160a <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2200      	movs	r2, #0
 801136a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011372:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011374:	6a3b      	ldr	r3, [r7, #32]
 8011376:	2b00      	cmp	r3, #0
 8011378:	f000 811b 	beq.w	80115b2 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 801137c:	e002      	b.n	8011384 <tcp_output+0x160>
 801137e:	6a3b      	ldr	r3, [r7, #32]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	623b      	str	r3, [r7, #32]
 8011384:	6a3b      	ldr	r3, [r7, #32]
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d1f8      	bne.n	801137e <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801138c:	e111      	b.n	80115b2 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	899b      	ldrh	r3, [r3, #12]
 8011394:	b29b      	uxth	r3, r3
 8011396:	4618      	mov	r0, r3
 8011398:	f7f8 fff0 	bl	800a37c <lwip_htons>
 801139c:	4603      	mov	r3, r0
 801139e:	b2db      	uxtb	r3, r3
 80113a0:	f003 0304 	and.w	r3, r3, #4
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d006      	beq.n	80113b6 <tcp_output+0x192>
 80113a8:	4b42      	ldr	r3, [pc, #264]	; (80114b4 <tcp_output+0x290>)
 80113aa:	f240 5237 	movw	r2, #1335	; 0x537
 80113ae:	4946      	ldr	r1, [pc, #280]	; (80114c8 <tcp_output+0x2a4>)
 80113b0:	4842      	ldr	r0, [pc, #264]	; (80114bc <tcp_output+0x298>)
 80113b2:	f003 fe07 	bl	8014fc4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d01f      	beq.n	80113fe <tcp_output+0x1da>
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	8b5b      	ldrh	r3, [r3, #26]
 80113c2:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d119      	bne.n	80113fe <tcp_output+0x1da>
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d00b      	beq.n	80113ea <tcp_output+0x1c6>
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d110      	bne.n	80113fe <tcp_output+0x1da>
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113e0:	891a      	ldrh	r2, [r3, #8]
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d209      	bcs.n	80113fe <tcp_output+0x1da>
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d004      	beq.n	80113fe <tcp_output+0x1da>
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80113fa:	2b08      	cmp	r3, #8
 80113fc:	d901      	bls.n	8011402 <tcp_output+0x1de>
 80113fe:	2301      	movs	r3, #1
 8011400:	e000      	b.n	8011404 <tcp_output+0x1e0>
 8011402:	2300      	movs	r3, #0
 8011404:	2b00      	cmp	r3, #0
 8011406:	d106      	bne.n	8011416 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	8b5b      	ldrh	r3, [r3, #26]
 801140c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011410:	2b00      	cmp	r3, #0
 8011412:	f000 80e3 	beq.w	80115dc <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	7d1b      	ldrb	r3, [r3, #20]
 801141a:	2b02      	cmp	r3, #2
 801141c:	d00d      	beq.n	801143a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011420:	68db      	ldr	r3, [r3, #12]
 8011422:	899b      	ldrh	r3, [r3, #12]
 8011424:	b29c      	uxth	r4, r3
 8011426:	2010      	movs	r0, #16
 8011428:	f7f8 ffa8 	bl	800a37c <lwip_htons>
 801142c:	4603      	mov	r3, r0
 801142e:	461a      	mov	r2, r3
 8011430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011432:	68db      	ldr	r3, [r3, #12]
 8011434:	4322      	orrs	r2, r4
 8011436:	b292      	uxth	r2, r2
 8011438:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801143a:	697a      	ldr	r2, [r7, #20]
 801143c:	6879      	ldr	r1, [r7, #4]
 801143e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011440:	f000 f908 	bl	8011654 <tcp_output_segment>
 8011444:	4603      	mov	r3, r0
 8011446:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d009      	beq.n	8011464 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	8b5b      	ldrh	r3, [r3, #26]
 8011454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011458:	b29a      	uxth	r2, r3
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	835a      	strh	r2, [r3, #26]
      return err;
 801145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011462:	e0d2      	b.n	801160a <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011466:	681a      	ldr	r2, [r3, #0]
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	7d1b      	ldrb	r3, [r3, #20]
 8011470:	2b02      	cmp	r3, #2
 8011472:	d006      	beq.n	8011482 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	8b5b      	ldrh	r3, [r3, #26]
 8011478:	f023 0303 	bic.w	r3, r3, #3
 801147c:	b29a      	uxth	r2, r3
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011484:	68db      	ldr	r3, [r3, #12]
 8011486:	685b      	ldr	r3, [r3, #4]
 8011488:	4618      	mov	r0, r3
 801148a:	f7f8 ff8c 	bl	800a3a6 <lwip_htonl>
 801148e:	4604      	mov	r4, r0
 8011490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011492:	891b      	ldrh	r3, [r3, #8]
 8011494:	461d      	mov	r5, r3
 8011496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011498:	68db      	ldr	r3, [r3, #12]
 801149a:	899b      	ldrh	r3, [r3, #12]
 801149c:	b29b      	uxth	r3, r3
 801149e:	4618      	mov	r0, r3
 80114a0:	f7f8 ff6c 	bl	800a37c <lwip_htons>
 80114a4:	4603      	mov	r3, r0
 80114a6:	b2db      	uxtb	r3, r3
 80114a8:	f003 0303 	and.w	r3, r3, #3
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d00d      	beq.n	80114cc <tcp_output+0x2a8>
 80114b0:	2301      	movs	r3, #1
 80114b2:	e00c      	b.n	80114ce <tcp_output+0x2aa>
 80114b4:	080178a4 	.word	0x080178a4
 80114b8:	08017de8 	.word	0x08017de8
 80114bc:	080178f8 	.word	0x080178f8
 80114c0:	08017e00 	.word	0x08017e00
 80114c4:	2000b450 	.word	0x2000b450
 80114c8:	08017e28 	.word	0x08017e28
 80114cc:	2300      	movs	r3, #0
 80114ce:	442b      	add	r3, r5
 80114d0:	4423      	add	r3, r4
 80114d2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	1ad3      	subs	r3, r2, r3
 80114dc:	2b00      	cmp	r3, #0
 80114de:	da02      	bge.n	80114e6 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	68ba      	ldr	r2, [r7, #8]
 80114e4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80114e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114e8:	891b      	ldrh	r3, [r3, #8]
 80114ea:	461c      	mov	r4, r3
 80114ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ee:	68db      	ldr	r3, [r3, #12]
 80114f0:	899b      	ldrh	r3, [r3, #12]
 80114f2:	b29b      	uxth	r3, r3
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7f8 ff41 	bl	800a37c <lwip_htons>
 80114fa:	4603      	mov	r3, r0
 80114fc:	b2db      	uxtb	r3, r3
 80114fe:	f003 0303 	and.w	r3, r3, #3
 8011502:	2b00      	cmp	r3, #0
 8011504:	d001      	beq.n	801150a <tcp_output+0x2e6>
 8011506:	2301      	movs	r3, #1
 8011508:	e000      	b.n	801150c <tcp_output+0x2e8>
 801150a:	2300      	movs	r3, #0
 801150c:	4423      	add	r3, r4
 801150e:	2b00      	cmp	r3, #0
 8011510:	d049      	beq.n	80115a6 <tcp_output+0x382>
      seg->next = NULL;
 8011512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011514:	2200      	movs	r2, #0
 8011516:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801151c:	2b00      	cmp	r3, #0
 801151e:	d105      	bne.n	801152c <tcp_output+0x308>
        pcb->unacked = seg;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011524:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011528:	623b      	str	r3, [r7, #32]
 801152a:	e03f      	b.n	80115ac <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801152e:	68db      	ldr	r3, [r3, #12]
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	4618      	mov	r0, r3
 8011534:	f7f8 ff37 	bl	800a3a6 <lwip_htonl>
 8011538:	4604      	mov	r4, r0
 801153a:	6a3b      	ldr	r3, [r7, #32]
 801153c:	68db      	ldr	r3, [r3, #12]
 801153e:	685b      	ldr	r3, [r3, #4]
 8011540:	4618      	mov	r0, r3
 8011542:	f7f8 ff30 	bl	800a3a6 <lwip_htonl>
 8011546:	4603      	mov	r3, r0
 8011548:	1ae3      	subs	r3, r4, r3
 801154a:	2b00      	cmp	r3, #0
 801154c:	da24      	bge.n	8011598 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	3370      	adds	r3, #112	; 0x70
 8011552:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011554:	e002      	b.n	801155c <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011556:	69fb      	ldr	r3, [r7, #28]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801155c:	69fb      	ldr	r3, [r7, #28]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d011      	beq.n	8011588 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011564:	69fb      	ldr	r3, [r7, #28]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	68db      	ldr	r3, [r3, #12]
 801156a:	685b      	ldr	r3, [r3, #4]
 801156c:	4618      	mov	r0, r3
 801156e:	f7f8 ff1a 	bl	800a3a6 <lwip_htonl>
 8011572:	4604      	mov	r4, r0
 8011574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011576:	68db      	ldr	r3, [r3, #12]
 8011578:	685b      	ldr	r3, [r3, #4]
 801157a:	4618      	mov	r0, r3
 801157c:	f7f8 ff13 	bl	800a3a6 <lwip_htonl>
 8011580:	4603      	mov	r3, r0
 8011582:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011584:	2b00      	cmp	r3, #0
 8011586:	dbe6      	blt.n	8011556 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8011588:	69fb      	ldr	r3, [r7, #28]
 801158a:	681a      	ldr	r2, [r3, #0]
 801158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801158e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011594:	601a      	str	r2, [r3, #0]
 8011596:	e009      	b.n	80115ac <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011598:	6a3b      	ldr	r3, [r7, #32]
 801159a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801159c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801159e:	6a3b      	ldr	r3, [r7, #32]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	623b      	str	r3, [r7, #32]
 80115a4:	e002      	b.n	80115ac <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80115a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80115a8:	f7fb fef4 	bl	800d394 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115b0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80115b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d012      	beq.n	80115de <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80115b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ba:	68db      	ldr	r3, [r3, #12]
 80115bc:	685b      	ldr	r3, [r3, #4]
 80115be:	4618      	mov	r0, r3
 80115c0:	f7f8 fef1 	bl	800a3a6 <lwip_htonl>
 80115c4:	4602      	mov	r2, r0
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115ca:	1ad3      	subs	r3, r2, r3
 80115cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115ce:	8912      	ldrh	r2, [r2, #8]
 80115d0:	4413      	add	r3, r2
  while (seg != NULL &&
 80115d2:	69ba      	ldr	r2, [r7, #24]
 80115d4:	429a      	cmp	r2, r3
 80115d6:	f4bf aeda 	bcs.w	801138e <tcp_output+0x16a>
 80115da:	e000      	b.n	80115de <tcp_output+0x3ba>
      break;
 80115dc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d108      	bne.n	80115f8 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	2200      	movs	r2, #0
 80115ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80115ee:	e004      	b.n	80115fa <tcp_output+0x3d6>
    goto output_done;
 80115f0:	bf00      	nop
 80115f2:	e002      	b.n	80115fa <tcp_output+0x3d6>
    goto output_done;
 80115f4:	bf00      	nop
 80115f6:	e000      	b.n	80115fa <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80115f8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	8b5b      	ldrh	r3, [r3, #26]
 80115fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011602:	b29a      	uxth	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011608:	2300      	movs	r3, #0
}
 801160a:	4618      	mov	r0, r3
 801160c:	3728      	adds	r7, #40	; 0x28
 801160e:	46bd      	mov	sp, r7
 8011610:	bdb0      	pop	{r4, r5, r7, pc}
 8011612:	bf00      	nop

08011614 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b082      	sub	sp, #8
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d106      	bne.n	8011630 <tcp_output_segment_busy+0x1c>
 8011622:	4b09      	ldr	r3, [pc, #36]	; (8011648 <tcp_output_segment_busy+0x34>)
 8011624:	f240 529a 	movw	r2, #1434	; 0x59a
 8011628:	4908      	ldr	r1, [pc, #32]	; (801164c <tcp_output_segment_busy+0x38>)
 801162a:	4809      	ldr	r0, [pc, #36]	; (8011650 <tcp_output_segment_busy+0x3c>)
 801162c:	f003 fcca 	bl	8014fc4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	685b      	ldr	r3, [r3, #4]
 8011634:	7b9b      	ldrb	r3, [r3, #14]
 8011636:	2b01      	cmp	r3, #1
 8011638:	d001      	beq.n	801163e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801163a:	2301      	movs	r3, #1
 801163c:	e000      	b.n	8011640 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801163e:	2300      	movs	r3, #0
}
 8011640:	4618      	mov	r0, r3
 8011642:	3708      	adds	r7, #8
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}
 8011648:	080178a4 	.word	0x080178a4
 801164c:	08017e40 	.word	0x08017e40
 8011650:	080178f8 	.word	0x080178f8

08011654 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011654:	b5b0      	push	{r4, r5, r7, lr}
 8011656:	b08c      	sub	sp, #48	; 0x30
 8011658:	af04      	add	r7, sp, #16
 801165a:	60f8      	str	r0, [r7, #12]
 801165c:	60b9      	str	r1, [r7, #8]
 801165e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d106      	bne.n	8011674 <tcp_output_segment+0x20>
 8011666:	4b64      	ldr	r3, [pc, #400]	; (80117f8 <tcp_output_segment+0x1a4>)
 8011668:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801166c:	4963      	ldr	r1, [pc, #396]	; (80117fc <tcp_output_segment+0x1a8>)
 801166e:	4864      	ldr	r0, [pc, #400]	; (8011800 <tcp_output_segment+0x1ac>)
 8011670:	f003 fca8 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d106      	bne.n	8011688 <tcp_output_segment+0x34>
 801167a:	4b5f      	ldr	r3, [pc, #380]	; (80117f8 <tcp_output_segment+0x1a4>)
 801167c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011680:	4960      	ldr	r1, [pc, #384]	; (8011804 <tcp_output_segment+0x1b0>)
 8011682:	485f      	ldr	r0, [pc, #380]	; (8011800 <tcp_output_segment+0x1ac>)
 8011684:	f003 fc9e 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d106      	bne.n	801169c <tcp_output_segment+0x48>
 801168e:	4b5a      	ldr	r3, [pc, #360]	; (80117f8 <tcp_output_segment+0x1a4>)
 8011690:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011694:	495c      	ldr	r1, [pc, #368]	; (8011808 <tcp_output_segment+0x1b4>)
 8011696:	485a      	ldr	r0, [pc, #360]	; (8011800 <tcp_output_segment+0x1ac>)
 8011698:	f003 fc94 	bl	8014fc4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801169c:	68f8      	ldr	r0, [r7, #12]
 801169e:	f7ff ffb9 	bl	8011614 <tcp_output_segment_busy>
 80116a2:	4603      	mov	r3, r0
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d001      	beq.n	80116ac <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80116a8:	2300      	movs	r3, #0
 80116aa:	e0a0      	b.n	80117ee <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	68dc      	ldr	r4, [r3, #12]
 80116b4:	4610      	mov	r0, r2
 80116b6:	f7f8 fe76 	bl	800a3a6 <lwip_htonl>
 80116ba:	4603      	mov	r3, r0
 80116bc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80116be:	68bb      	ldr	r3, [r7, #8]
 80116c0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	68dc      	ldr	r4, [r3, #12]
 80116c6:	4610      	mov	r0, r2
 80116c8:	f7f8 fe58 	bl	800a37c <lwip_htons>
 80116cc:	4603      	mov	r3, r0
 80116ce:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80116d0:	68bb      	ldr	r3, [r7, #8]
 80116d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116d4:	68ba      	ldr	r2, [r7, #8]
 80116d6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80116d8:	441a      	add	r2, r3
 80116da:	68bb      	ldr	r3, [r7, #8]
 80116dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	68db      	ldr	r3, [r3, #12]
 80116e2:	3314      	adds	r3, #20
 80116e4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	7a9b      	ldrb	r3, [r3, #10]
 80116ea:	f003 0301 	and.w	r3, r3, #1
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d015      	beq.n	801171e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	3304      	adds	r3, #4
 80116f6:	461a      	mov	r2, r3
 80116f8:	6879      	ldr	r1, [r7, #4]
 80116fa:	f44f 7006 	mov.w	r0, #536	; 0x218
 80116fe:	f7fc fa33 	bl	800db68 <tcp_eff_send_mss_netif>
 8011702:	4603      	mov	r3, r0
 8011704:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011706:	8b7b      	ldrh	r3, [r7, #26]
 8011708:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801170c:	4618      	mov	r0, r3
 801170e:	f7f8 fe4a 	bl	800a3a6 <lwip_htonl>
 8011712:	4602      	mov	r2, r0
 8011714:	69fb      	ldr	r3, [r7, #28]
 8011716:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011718:	69fb      	ldr	r3, [r7, #28]
 801171a:	3304      	adds	r3, #4
 801171c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011724:	2b00      	cmp	r3, #0
 8011726:	da02      	bge.n	801172e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	2200      	movs	r2, #0
 801172c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011732:	2b00      	cmp	r3, #0
 8011734:	d10c      	bne.n	8011750 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011736:	4b35      	ldr	r3, [pc, #212]	; (801180c <tcp_output_segment+0x1b8>)
 8011738:	681a      	ldr	r2, [r3, #0]
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	68db      	ldr	r3, [r3, #12]
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	4618      	mov	r0, r3
 8011746:	f7f8 fe2e 	bl	800a3a6 <lwip_htonl>
 801174a:	4602      	mov	r2, r0
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	68db      	ldr	r3, [r3, #12]
 8011754:	461a      	mov	r2, r3
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	685b      	ldr	r3, [r3, #4]
 801175c:	1ad3      	subs	r3, r2, r3
 801175e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	8959      	ldrh	r1, [r3, #10]
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	685b      	ldr	r3, [r3, #4]
 801176a:	8b3a      	ldrh	r2, [r7, #24]
 801176c:	1a8a      	subs	r2, r1, r2
 801176e:	b292      	uxth	r2, r2
 8011770:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	685b      	ldr	r3, [r3, #4]
 8011776:	8919      	ldrh	r1, [r3, #8]
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	685b      	ldr	r3, [r3, #4]
 801177c:	8b3a      	ldrh	r2, [r7, #24]
 801177e:	1a8a      	subs	r2, r1, r2
 8011780:	b292      	uxth	r2, r2
 8011782:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	685b      	ldr	r3, [r3, #4]
 8011788:	68fa      	ldr	r2, [r7, #12]
 801178a:	68d2      	ldr	r2, [r2, #12]
 801178c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	68db      	ldr	r3, [r3, #12]
 8011792:	2200      	movs	r2, #0
 8011794:	741a      	strb	r2, [r3, #16]
 8011796:	2200      	movs	r2, #0
 8011798:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	68db      	ldr	r3, [r3, #12]
 801179e:	f103 0214 	add.w	r2, r3, #20
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	7a9b      	ldrb	r3, [r3, #10]
 80117a6:	009b      	lsls	r3, r3, #2
 80117a8:	f003 0304 	and.w	r3, r3, #4
 80117ac:	4413      	add	r3, r2
 80117ae:	69fa      	ldr	r2, [r7, #28]
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d006      	beq.n	80117c2 <tcp_output_segment+0x16e>
 80117b4:	4b10      	ldr	r3, [pc, #64]	; (80117f8 <tcp_output_segment+0x1a4>)
 80117b6:	f240 621c 	movw	r2, #1564	; 0x61c
 80117ba:	4915      	ldr	r1, [pc, #84]	; (8011810 <tcp_output_segment+0x1bc>)
 80117bc:	4810      	ldr	r0, [pc, #64]	; (8011800 <tcp_output_segment+0x1ac>)
 80117be:	f003 fc01 	bl	8014fc4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	6858      	ldr	r0, [r3, #4]
 80117c6:	68b9      	ldr	r1, [r7, #8]
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	1d1c      	adds	r4, r3, #4
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	7add      	ldrb	r5, [r3, #11]
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	7a9b      	ldrb	r3, [r3, #10]
 80117d4:	687a      	ldr	r2, [r7, #4]
 80117d6:	9202      	str	r2, [sp, #8]
 80117d8:	2206      	movs	r2, #6
 80117da:	9201      	str	r2, [sp, #4]
 80117dc:	9300      	str	r3, [sp, #0]
 80117de:	462b      	mov	r3, r5
 80117e0:	4622      	mov	r2, r4
 80117e2:	f002 fa6f 	bl	8013cc4 <ip4_output_if>
 80117e6:	4603      	mov	r3, r0
 80117e8:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80117ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	3720      	adds	r7, #32
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bdb0      	pop	{r4, r5, r7, pc}
 80117f6:	bf00      	nop
 80117f8:	080178a4 	.word	0x080178a4
 80117fc:	08017e68 	.word	0x08017e68
 8011800:	080178f8 	.word	0x080178f8
 8011804:	08017e88 	.word	0x08017e88
 8011808:	08017ea8 	.word	0x08017ea8
 801180c:	2000b440 	.word	0x2000b440
 8011810:	08017ecc 	.word	0x08017ecc

08011814 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011814:	b5b0      	push	{r4, r5, r7, lr}
 8011816:	b084      	sub	sp, #16
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d106      	bne.n	8011830 <tcp_rexmit_rto_prepare+0x1c>
 8011822:	4b31      	ldr	r3, [pc, #196]	; (80118e8 <tcp_rexmit_rto_prepare+0xd4>)
 8011824:	f240 6263 	movw	r2, #1635	; 0x663
 8011828:	4930      	ldr	r1, [pc, #192]	; (80118ec <tcp_rexmit_rto_prepare+0xd8>)
 801182a:	4831      	ldr	r0, [pc, #196]	; (80118f0 <tcp_rexmit_rto_prepare+0xdc>)
 801182c:	f003 fbca 	bl	8014fc4 <iprintf>

  if (pcb->unacked == NULL) {
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011834:	2b00      	cmp	r3, #0
 8011836:	d102      	bne.n	801183e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011838:	f06f 0305 	mvn.w	r3, #5
 801183c:	e050      	b.n	80118e0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011842:	60fb      	str	r3, [r7, #12]
 8011844:	e00b      	b.n	801185e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011846:	68f8      	ldr	r0, [r7, #12]
 8011848:	f7ff fee4 	bl	8011614 <tcp_output_segment_busy>
 801184c:	4603      	mov	r3, r0
 801184e:	2b00      	cmp	r3, #0
 8011850:	d002      	beq.n	8011858 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011852:	f06f 0305 	mvn.w	r3, #5
 8011856:	e043      	b.n	80118e0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	60fb      	str	r3, [r7, #12]
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d1ef      	bne.n	8011846 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011866:	68f8      	ldr	r0, [r7, #12]
 8011868:	f7ff fed4 	bl	8011614 <tcp_output_segment_busy>
 801186c:	4603      	mov	r3, r0
 801186e:	2b00      	cmp	r3, #0
 8011870:	d002      	beq.n	8011878 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011872:	f06f 0305 	mvn.w	r3, #5
 8011876:	e033      	b.n	80118e0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	2200      	movs	r2, #0
 801188c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	8b5b      	ldrh	r3, [r3, #26]
 8011892:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011896:	b29a      	uxth	r2, r3
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	68db      	ldr	r3, [r3, #12]
 80118a0:	685b      	ldr	r3, [r3, #4]
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7f8 fd7f 	bl	800a3a6 <lwip_htonl>
 80118a8:	4604      	mov	r4, r0
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	891b      	ldrh	r3, [r3, #8]
 80118ae:	461d      	mov	r5, r3
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	68db      	ldr	r3, [r3, #12]
 80118b4:	899b      	ldrh	r3, [r3, #12]
 80118b6:	b29b      	uxth	r3, r3
 80118b8:	4618      	mov	r0, r3
 80118ba:	f7f8 fd5f 	bl	800a37c <lwip_htons>
 80118be:	4603      	mov	r3, r0
 80118c0:	b2db      	uxtb	r3, r3
 80118c2:	f003 0303 	and.w	r3, r3, #3
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d001      	beq.n	80118ce <tcp_rexmit_rto_prepare+0xba>
 80118ca:	2301      	movs	r3, #1
 80118cc:	e000      	b.n	80118d0 <tcp_rexmit_rto_prepare+0xbc>
 80118ce:	2300      	movs	r3, #0
 80118d0:	442b      	add	r3, r5
 80118d2:	18e2      	adds	r2, r4, r3
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2200      	movs	r2, #0
 80118dc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80118de:	2300      	movs	r3, #0
}
 80118e0:	4618      	mov	r0, r3
 80118e2:	3710      	adds	r7, #16
 80118e4:	46bd      	mov	sp, r7
 80118e6:	bdb0      	pop	{r4, r5, r7, pc}
 80118e8:	080178a4 	.word	0x080178a4
 80118ec:	08017ee0 	.word	0x08017ee0
 80118f0:	080178f8 	.word	0x080178f8

080118f4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d106      	bne.n	8011910 <tcp_rexmit_rto_commit+0x1c>
 8011902:	4b0d      	ldr	r3, [pc, #52]	; (8011938 <tcp_rexmit_rto_commit+0x44>)
 8011904:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011908:	490c      	ldr	r1, [pc, #48]	; (801193c <tcp_rexmit_rto_commit+0x48>)
 801190a:	480d      	ldr	r0, [pc, #52]	; (8011940 <tcp_rexmit_rto_commit+0x4c>)
 801190c:	f003 fb5a 	bl	8014fc4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011916:	2bff      	cmp	r3, #255	; 0xff
 8011918:	d007      	beq.n	801192a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011920:	3301      	adds	r3, #1
 8011922:	b2da      	uxtb	r2, r3
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f7ff fc7a 	bl	8011224 <tcp_output>
}
 8011930:	bf00      	nop
 8011932:	3708      	adds	r7, #8
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}
 8011938:	080178a4 	.word	0x080178a4
 801193c:	08017f04 	.word	0x08017f04
 8011940:	080178f8 	.word	0x080178f8

08011944 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011944:	b580      	push	{r7, lr}
 8011946:	b082      	sub	sp, #8
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d106      	bne.n	8011960 <tcp_rexmit_rto+0x1c>
 8011952:	4b0a      	ldr	r3, [pc, #40]	; (801197c <tcp_rexmit_rto+0x38>)
 8011954:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011958:	4909      	ldr	r1, [pc, #36]	; (8011980 <tcp_rexmit_rto+0x3c>)
 801195a:	480a      	ldr	r0, [pc, #40]	; (8011984 <tcp_rexmit_rto+0x40>)
 801195c:	f003 fb32 	bl	8014fc4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011960:	6878      	ldr	r0, [r7, #4]
 8011962:	f7ff ff57 	bl	8011814 <tcp_rexmit_rto_prepare>
 8011966:	4603      	mov	r3, r0
 8011968:	2b00      	cmp	r3, #0
 801196a:	d102      	bne.n	8011972 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801196c:	6878      	ldr	r0, [r7, #4]
 801196e:	f7ff ffc1 	bl	80118f4 <tcp_rexmit_rto_commit>
  }
}
 8011972:	bf00      	nop
 8011974:	3708      	adds	r7, #8
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}
 801197a:	bf00      	nop
 801197c:	080178a4 	.word	0x080178a4
 8011980:	08017f28 	.word	0x08017f28
 8011984:	080178f8 	.word	0x080178f8

08011988 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011988:	b590      	push	{r4, r7, lr}
 801198a:	b085      	sub	sp, #20
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d106      	bne.n	80119a4 <tcp_rexmit+0x1c>
 8011996:	4b2f      	ldr	r3, [pc, #188]	; (8011a54 <tcp_rexmit+0xcc>)
 8011998:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801199c:	492e      	ldr	r1, [pc, #184]	; (8011a58 <tcp_rexmit+0xd0>)
 801199e:	482f      	ldr	r0, [pc, #188]	; (8011a5c <tcp_rexmit+0xd4>)
 80119a0:	f003 fb10 	bl	8014fc4 <iprintf>

  if (pcb->unacked == NULL) {
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d102      	bne.n	80119b2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80119ac:	f06f 0305 	mvn.w	r3, #5
 80119b0:	e04c      	b.n	8011a4c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119b6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80119b8:	68b8      	ldr	r0, [r7, #8]
 80119ba:	f7ff fe2b 	bl	8011614 <tcp_output_segment_busy>
 80119be:	4603      	mov	r3, r0
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d002      	beq.n	80119ca <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80119c4:	f06f 0305 	mvn.w	r3, #5
 80119c8:	e040      	b.n	8011a4c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80119ca:	68bb      	ldr	r3, [r7, #8]
 80119cc:	681a      	ldr	r2, [r3, #0]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	336c      	adds	r3, #108	; 0x6c
 80119d6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80119d8:	e002      	b.n	80119e0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d011      	beq.n	8011a0c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	68db      	ldr	r3, [r3, #12]
 80119ee:	685b      	ldr	r3, [r3, #4]
 80119f0:	4618      	mov	r0, r3
 80119f2:	f7f8 fcd8 	bl	800a3a6 <lwip_htonl>
 80119f6:	4604      	mov	r4, r0
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	68db      	ldr	r3, [r3, #12]
 80119fc:	685b      	ldr	r3, [r3, #4]
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7f8 fcd1 	bl	800a3a6 <lwip_htonl>
 8011a04:	4603      	mov	r3, r0
 8011a06:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	dbe6      	blt.n	80119da <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	681a      	ldr	r2, [r3, #0]
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	68ba      	ldr	r2, [r7, #8]
 8011a18:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d103      	bne.n	8011a2a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	2200      	movs	r2, #0
 8011a26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a30:	2bff      	cmp	r3, #255	; 0xff
 8011a32:	d007      	beq.n	8011a44 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011a3a:	3301      	adds	r3, #1
 8011a3c:	b2da      	uxtb	r2, r3
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2200      	movs	r2, #0
 8011a48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011a4a:	2300      	movs	r3, #0
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3714      	adds	r7, #20
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd90      	pop	{r4, r7, pc}
 8011a54:	080178a4 	.word	0x080178a4
 8011a58:	08017f44 	.word	0x08017f44
 8011a5c:	080178f8 	.word	0x080178f8

08011a60 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b082      	sub	sp, #8
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d106      	bne.n	8011a7c <tcp_rexmit_fast+0x1c>
 8011a6e:	4b2f      	ldr	r3, [pc, #188]	; (8011b2c <tcp_rexmit_fast+0xcc>)
 8011a70:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011a74:	492e      	ldr	r1, [pc, #184]	; (8011b30 <tcp_rexmit_fast+0xd0>)
 8011a76:	482f      	ldr	r0, [pc, #188]	; (8011b34 <tcp_rexmit_fast+0xd4>)
 8011a78:	f003 faa4 	bl	8014fc4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d04f      	beq.n	8011b24 <tcp_rexmit_fast+0xc4>
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	8b5b      	ldrh	r3, [r3, #26]
 8011a88:	f003 0304 	and.w	r3, r3, #4
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d149      	bne.n	8011b24 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f7ff ff79 	bl	8011988 <tcp_rexmit>
 8011a96:	4603      	mov	r3, r0
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d143      	bne.n	8011b24 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011aa8:	429a      	cmp	r2, r3
 8011aaa:	d208      	bcs.n	8011abe <tcp_rexmit_fast+0x5e>
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	da00      	bge.n	8011ab8 <tcp_rexmit_fast+0x58>
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	105b      	asrs	r3, r3, #1
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	e007      	b.n	8011ace <tcp_rexmit_fast+0x6e>
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	da00      	bge.n	8011aca <tcp_rexmit_fast+0x6a>
 8011ac8:	3301      	adds	r3, #1
 8011aca:	105b      	asrs	r3, r3, #1
 8011acc:	b29b      	uxth	r3, r3
 8011ace:	687a      	ldr	r2, [r7, #4]
 8011ad0:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011ada:	461a      	mov	r2, r3
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ae0:	005b      	lsls	r3, r3, #1
 8011ae2:	429a      	cmp	r2, r3
 8011ae4:	d206      	bcs.n	8011af4 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011aea:	005b      	lsls	r3, r3, #1
 8011aec:	b29a      	uxth	r2, r3
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011afe:	4619      	mov	r1, r3
 8011b00:	0049      	lsls	r1, r1, #1
 8011b02:	440b      	add	r3, r1
 8011b04:	b29b      	uxth	r3, r3
 8011b06:	4413      	add	r3, r2
 8011b08:	b29a      	uxth	r2, r3
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	8b5b      	ldrh	r3, [r3, #26]
 8011b14:	f043 0304 	orr.w	r3, r3, #4
 8011b18:	b29a      	uxth	r2, r3
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2200      	movs	r2, #0
 8011b22:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011b24:	bf00      	nop
 8011b26:	3708      	adds	r7, #8
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bd80      	pop	{r7, pc}
 8011b2c:	080178a4 	.word	0x080178a4
 8011b30:	08017f5c 	.word	0x08017f5c
 8011b34:	080178f8 	.word	0x080178f8

08011b38 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b086      	sub	sp, #24
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	60f8      	str	r0, [r7, #12]
 8011b40:	607b      	str	r3, [r7, #4]
 8011b42:	460b      	mov	r3, r1
 8011b44:	817b      	strh	r3, [r7, #10]
 8011b46:	4613      	mov	r3, r2
 8011b48:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011b4a:	897a      	ldrh	r2, [r7, #10]
 8011b4c:	893b      	ldrh	r3, [r7, #8]
 8011b4e:	4413      	add	r3, r2
 8011b50:	b29b      	uxth	r3, r3
 8011b52:	3314      	adds	r3, #20
 8011b54:	b29b      	uxth	r3, r3
 8011b56:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b5a:	4619      	mov	r1, r3
 8011b5c:	2022      	movs	r0, #34	; 0x22
 8011b5e:	f7f9 fd0b 	bl	800b578 <pbuf_alloc>
 8011b62:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011b64:	697b      	ldr	r3, [r7, #20]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d04e      	beq.n	8011c08 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	895b      	ldrh	r3, [r3, #10]
 8011b6e:	461a      	mov	r2, r3
 8011b70:	897b      	ldrh	r3, [r7, #10]
 8011b72:	3314      	adds	r3, #20
 8011b74:	429a      	cmp	r2, r3
 8011b76:	da06      	bge.n	8011b86 <tcp_output_alloc_header_common+0x4e>
 8011b78:	4b26      	ldr	r3, [pc, #152]	; (8011c14 <tcp_output_alloc_header_common+0xdc>)
 8011b7a:	f240 7224 	movw	r2, #1828	; 0x724
 8011b7e:	4926      	ldr	r1, [pc, #152]	; (8011c18 <tcp_output_alloc_header_common+0xe0>)
 8011b80:	4826      	ldr	r0, [pc, #152]	; (8011c1c <tcp_output_alloc_header_common+0xe4>)
 8011b82:	f003 fa1f 	bl	8014fc4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	685b      	ldr	r3, [r3, #4]
 8011b8a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011b8c:	8c3b      	ldrh	r3, [r7, #32]
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f7f8 fbf4 	bl	800a37c <lwip_htons>
 8011b94:	4603      	mov	r3, r0
 8011b96:	461a      	mov	r2, r3
 8011b98:	693b      	ldr	r3, [r7, #16]
 8011b9a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011b9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	f7f8 fbec 	bl	800a37c <lwip_htons>
 8011ba4:	4603      	mov	r3, r0
 8011ba6:	461a      	mov	r2, r3
 8011ba8:	693b      	ldr	r3, [r7, #16]
 8011baa:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011bac:	693b      	ldr	r3, [r7, #16]
 8011bae:	687a      	ldr	r2, [r7, #4]
 8011bb0:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011bb2:	68f8      	ldr	r0, [r7, #12]
 8011bb4:	f7f8 fbf7 	bl	800a3a6 <lwip_htonl>
 8011bb8:	4602      	mov	r2, r0
 8011bba:	693b      	ldr	r3, [r7, #16]
 8011bbc:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011bbe:	897b      	ldrh	r3, [r7, #10]
 8011bc0:	089b      	lsrs	r3, r3, #2
 8011bc2:	b29b      	uxth	r3, r3
 8011bc4:	3305      	adds	r3, #5
 8011bc6:	b29b      	uxth	r3, r3
 8011bc8:	031b      	lsls	r3, r3, #12
 8011bca:	b29a      	uxth	r2, r3
 8011bcc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011bd0:	b29b      	uxth	r3, r3
 8011bd2:	4313      	orrs	r3, r2
 8011bd4:	b29b      	uxth	r3, r3
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7f8 fbd0 	bl	800a37c <lwip_htons>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	461a      	mov	r2, r3
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011be4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011be6:	4618      	mov	r0, r3
 8011be8:	f7f8 fbc8 	bl	800a37c <lwip_htons>
 8011bec:	4603      	mov	r3, r0
 8011bee:	461a      	mov	r2, r3
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011bf4:	693b      	ldr	r3, [r7, #16]
 8011bf6:	2200      	movs	r2, #0
 8011bf8:	741a      	strb	r2, [r3, #16]
 8011bfa:	2200      	movs	r2, #0
 8011bfc:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011bfe:	693b      	ldr	r3, [r7, #16]
 8011c00:	2200      	movs	r2, #0
 8011c02:	749a      	strb	r2, [r3, #18]
 8011c04:	2200      	movs	r2, #0
 8011c06:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011c08:	697b      	ldr	r3, [r7, #20]
}
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	3718      	adds	r7, #24
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}
 8011c12:	bf00      	nop
 8011c14:	080178a4 	.word	0x080178a4
 8011c18:	08017f7c 	.word	0x08017f7c
 8011c1c:	080178f8 	.word	0x080178f8

08011c20 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011c20:	b5b0      	push	{r4, r5, r7, lr}
 8011c22:	b08a      	sub	sp, #40	; 0x28
 8011c24:	af04      	add	r7, sp, #16
 8011c26:	60f8      	str	r0, [r7, #12]
 8011c28:	607b      	str	r3, [r7, #4]
 8011c2a:	460b      	mov	r3, r1
 8011c2c:	817b      	strh	r3, [r7, #10]
 8011c2e:	4613      	mov	r3, r2
 8011c30:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d106      	bne.n	8011c46 <tcp_output_alloc_header+0x26>
 8011c38:	4b15      	ldr	r3, [pc, #84]	; (8011c90 <tcp_output_alloc_header+0x70>)
 8011c3a:	f240 7242 	movw	r2, #1858	; 0x742
 8011c3e:	4915      	ldr	r1, [pc, #84]	; (8011c94 <tcp_output_alloc_header+0x74>)
 8011c40:	4815      	ldr	r0, [pc, #84]	; (8011c98 <tcp_output_alloc_header+0x78>)
 8011c42:	f003 f9bf 	bl	8014fc4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	8adb      	ldrh	r3, [r3, #22]
 8011c4e:	68fa      	ldr	r2, [r7, #12]
 8011c50:	8b12      	ldrh	r2, [r2, #24]
 8011c52:	68f9      	ldr	r1, [r7, #12]
 8011c54:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011c56:	893d      	ldrh	r5, [r7, #8]
 8011c58:	897c      	ldrh	r4, [r7, #10]
 8011c5a:	9103      	str	r1, [sp, #12]
 8011c5c:	2110      	movs	r1, #16
 8011c5e:	9102      	str	r1, [sp, #8]
 8011c60:	9201      	str	r2, [sp, #4]
 8011c62:	9300      	str	r3, [sp, #0]
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	462a      	mov	r2, r5
 8011c68:	4621      	mov	r1, r4
 8011c6a:	f7ff ff65 	bl	8011b38 <tcp_output_alloc_header_common>
 8011c6e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011c70:	697b      	ldr	r3, [r7, #20]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d006      	beq.n	8011c84 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c7a:	68fa      	ldr	r2, [r7, #12]
 8011c7c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011c7e:	441a      	add	r2, r3
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011c84:	697b      	ldr	r3, [r7, #20]
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3718      	adds	r7, #24
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bdb0      	pop	{r4, r5, r7, pc}
 8011c8e:	bf00      	nop
 8011c90:	080178a4 	.word	0x080178a4
 8011c94:	08017fac 	.word	0x08017fac
 8011c98:	080178f8 	.word	0x080178f8

08011c9c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b088      	sub	sp, #32
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	60f8      	str	r0, [r7, #12]
 8011ca4:	60b9      	str	r1, [r7, #8]
 8011ca6:	4611      	mov	r1, r2
 8011ca8:	461a      	mov	r2, r3
 8011caa:	460b      	mov	r3, r1
 8011cac:	71fb      	strb	r3, [r7, #7]
 8011cae:	4613      	mov	r3, r2
 8011cb0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d106      	bne.n	8011cca <tcp_output_fill_options+0x2e>
 8011cbc:	4b13      	ldr	r3, [pc, #76]	; (8011d0c <tcp_output_fill_options+0x70>)
 8011cbe:	f240 7256 	movw	r2, #1878	; 0x756
 8011cc2:	4913      	ldr	r1, [pc, #76]	; (8011d10 <tcp_output_fill_options+0x74>)
 8011cc4:	4813      	ldr	r0, [pc, #76]	; (8011d14 <tcp_output_fill_options+0x78>)
 8011cc6:	f003 f97d 	bl	8014fc4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011cca:	68bb      	ldr	r3, [r7, #8]
 8011ccc:	685b      	ldr	r3, [r3, #4]
 8011cce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011cd0:	69bb      	ldr	r3, [r7, #24]
 8011cd2:	3314      	adds	r3, #20
 8011cd4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011cd6:	69bb      	ldr	r3, [r7, #24]
 8011cd8:	f103 0214 	add.w	r2, r3, #20
 8011cdc:	8bfb      	ldrh	r3, [r7, #30]
 8011cde:	009b      	lsls	r3, r3, #2
 8011ce0:	4619      	mov	r1, r3
 8011ce2:	79fb      	ldrb	r3, [r7, #7]
 8011ce4:	009b      	lsls	r3, r3, #2
 8011ce6:	f003 0304 	and.w	r3, r3, #4
 8011cea:	440b      	add	r3, r1
 8011cec:	4413      	add	r3, r2
 8011cee:	697a      	ldr	r2, [r7, #20]
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d006      	beq.n	8011d02 <tcp_output_fill_options+0x66>
 8011cf4:	4b05      	ldr	r3, [pc, #20]	; (8011d0c <tcp_output_fill_options+0x70>)
 8011cf6:	f240 7275 	movw	r2, #1909	; 0x775
 8011cfa:	4907      	ldr	r1, [pc, #28]	; (8011d18 <tcp_output_fill_options+0x7c>)
 8011cfc:	4805      	ldr	r0, [pc, #20]	; (8011d14 <tcp_output_fill_options+0x78>)
 8011cfe:	f003 f961 	bl	8014fc4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011d02:	bf00      	nop
 8011d04:	3720      	adds	r7, #32
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}
 8011d0a:	bf00      	nop
 8011d0c:	080178a4 	.word	0x080178a4
 8011d10:	08017fd4 	.word	0x08017fd4
 8011d14:	080178f8 	.word	0x080178f8
 8011d18:	08017ecc 	.word	0x08017ecc

08011d1c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b08a      	sub	sp, #40	; 0x28
 8011d20:	af04      	add	r7, sp, #16
 8011d22:	60f8      	str	r0, [r7, #12]
 8011d24:	60b9      	str	r1, [r7, #8]
 8011d26:	607a      	str	r2, [r7, #4]
 8011d28:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d106      	bne.n	8011d3e <tcp_output_control_segment+0x22>
 8011d30:	4b1c      	ldr	r3, [pc, #112]	; (8011da4 <tcp_output_control_segment+0x88>)
 8011d32:	f240 7287 	movw	r2, #1927	; 0x787
 8011d36:	491c      	ldr	r1, [pc, #112]	; (8011da8 <tcp_output_control_segment+0x8c>)
 8011d38:	481c      	ldr	r0, [pc, #112]	; (8011dac <tcp_output_control_segment+0x90>)
 8011d3a:	f003 f943 	bl	8014fc4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011d3e:	683a      	ldr	r2, [r7, #0]
 8011d40:	6879      	ldr	r1, [r7, #4]
 8011d42:	68f8      	ldr	r0, [r7, #12]
 8011d44:	f7fe fad4 	bl	80102f0 <tcp_route>
 8011d48:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011d4a:	693b      	ldr	r3, [r7, #16]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d102      	bne.n	8011d56 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011d50:	23fc      	movs	r3, #252	; 0xfc
 8011d52:	75fb      	strb	r3, [r7, #23]
 8011d54:	e01c      	b.n	8011d90 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d006      	beq.n	8011d6a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	7adb      	ldrb	r3, [r3, #11]
 8011d60:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	7a9b      	ldrb	r3, [r3, #10]
 8011d66:	757b      	strb	r3, [r7, #21]
 8011d68:	e003      	b.n	8011d72 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011d6a:	23ff      	movs	r3, #255	; 0xff
 8011d6c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011d72:	7dba      	ldrb	r2, [r7, #22]
 8011d74:	693b      	ldr	r3, [r7, #16]
 8011d76:	9302      	str	r3, [sp, #8]
 8011d78:	2306      	movs	r3, #6
 8011d7a:	9301      	str	r3, [sp, #4]
 8011d7c:	7d7b      	ldrb	r3, [r7, #21]
 8011d7e:	9300      	str	r3, [sp, #0]
 8011d80:	4613      	mov	r3, r2
 8011d82:	683a      	ldr	r2, [r7, #0]
 8011d84:	6879      	ldr	r1, [r7, #4]
 8011d86:	68b8      	ldr	r0, [r7, #8]
 8011d88:	f001 ff9c 	bl	8013cc4 <ip4_output_if>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011d90:	68b8      	ldr	r0, [r7, #8]
 8011d92:	f7f9 fed1 	bl	800bb38 <pbuf_free>
  return err;
 8011d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3718      	adds	r7, #24
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}
 8011da2:	bf00      	nop
 8011da4:	080178a4 	.word	0x080178a4
 8011da8:	08017ffc 	.word	0x08017ffc
 8011dac:	080178f8 	.word	0x080178f8

08011db0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011db0:	b590      	push	{r4, r7, lr}
 8011db2:	b08b      	sub	sp, #44	; 0x2c
 8011db4:	af04      	add	r7, sp, #16
 8011db6:	60f8      	str	r0, [r7, #12]
 8011db8:	60b9      	str	r1, [r7, #8]
 8011dba:	607a      	str	r2, [r7, #4]
 8011dbc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011dbe:	683b      	ldr	r3, [r7, #0]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d106      	bne.n	8011dd2 <tcp_rst+0x22>
 8011dc4:	4b1f      	ldr	r3, [pc, #124]	; (8011e44 <tcp_rst+0x94>)
 8011dc6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011dca:	491f      	ldr	r1, [pc, #124]	; (8011e48 <tcp_rst+0x98>)
 8011dcc:	481f      	ldr	r0, [pc, #124]	; (8011e4c <tcp_rst+0x9c>)
 8011dce:	f003 f8f9 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8011dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d106      	bne.n	8011de6 <tcp_rst+0x36>
 8011dd8:	4b1a      	ldr	r3, [pc, #104]	; (8011e44 <tcp_rst+0x94>)
 8011dda:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011dde:	491c      	ldr	r1, [pc, #112]	; (8011e50 <tcp_rst+0xa0>)
 8011de0:	481a      	ldr	r0, [pc, #104]	; (8011e4c <tcp_rst+0x9c>)
 8011de2:	f003 f8ef 	bl	8014fc4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011de6:	2300      	movs	r3, #0
 8011de8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011dea:	f246 0308 	movw	r3, #24584	; 0x6008
 8011dee:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011df0:	7dfb      	ldrb	r3, [r7, #23]
 8011df2:	b29c      	uxth	r4, r3
 8011df4:	68b8      	ldr	r0, [r7, #8]
 8011df6:	f7f8 fad6 	bl	800a3a6 <lwip_htonl>
 8011dfa:	4602      	mov	r2, r0
 8011dfc:	8abb      	ldrh	r3, [r7, #20]
 8011dfe:	9303      	str	r3, [sp, #12]
 8011e00:	2314      	movs	r3, #20
 8011e02:	9302      	str	r3, [sp, #8]
 8011e04:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011e06:	9301      	str	r3, [sp, #4]
 8011e08:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011e0a:	9300      	str	r3, [sp, #0]
 8011e0c:	4613      	mov	r3, r2
 8011e0e:	2200      	movs	r2, #0
 8011e10:	4621      	mov	r1, r4
 8011e12:	6878      	ldr	r0, [r7, #4]
 8011e14:	f7ff fe90 	bl	8011b38 <tcp_output_alloc_header_common>
 8011e18:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d00c      	beq.n	8011e3a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011e20:	7dfb      	ldrb	r3, [r7, #23]
 8011e22:	2200      	movs	r2, #0
 8011e24:	6939      	ldr	r1, [r7, #16]
 8011e26:	68f8      	ldr	r0, [r7, #12]
 8011e28:	f7ff ff38 	bl	8011c9c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e2e:	683a      	ldr	r2, [r7, #0]
 8011e30:	6939      	ldr	r1, [r7, #16]
 8011e32:	68f8      	ldr	r0, [r7, #12]
 8011e34:	f7ff ff72 	bl	8011d1c <tcp_output_control_segment>
 8011e38:	e000      	b.n	8011e3c <tcp_rst+0x8c>
    return;
 8011e3a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011e3c:	371c      	adds	r7, #28
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd90      	pop	{r4, r7, pc}
 8011e42:	bf00      	nop
 8011e44:	080178a4 	.word	0x080178a4
 8011e48:	08018028 	.word	0x08018028
 8011e4c:	080178f8 	.word	0x080178f8
 8011e50:	08018044 	.word	0x08018044

08011e54 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011e54:	b590      	push	{r4, r7, lr}
 8011e56:	b087      	sub	sp, #28
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011e60:	2300      	movs	r3, #0
 8011e62:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d106      	bne.n	8011e78 <tcp_send_empty_ack+0x24>
 8011e6a:	4b28      	ldr	r3, [pc, #160]	; (8011f0c <tcp_send_empty_ack+0xb8>)
 8011e6c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011e70:	4927      	ldr	r1, [pc, #156]	; (8011f10 <tcp_send_empty_ack+0xbc>)
 8011e72:	4828      	ldr	r0, [pc, #160]	; (8011f14 <tcp_send_empty_ack+0xc0>)
 8011e74:	f003 f8a6 	bl	8014fc4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011e78:	7dfb      	ldrb	r3, [r7, #23]
 8011e7a:	009b      	lsls	r3, r3, #2
 8011e7c:	b2db      	uxtb	r3, r3
 8011e7e:	f003 0304 	and.w	r3, r3, #4
 8011e82:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011e84:	7d7b      	ldrb	r3, [r7, #21]
 8011e86:	b29c      	uxth	r4, r3
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7f8 fa8a 	bl	800a3a6 <lwip_htonl>
 8011e92:	4603      	mov	r3, r0
 8011e94:	2200      	movs	r2, #0
 8011e96:	4621      	mov	r1, r4
 8011e98:	6878      	ldr	r0, [r7, #4]
 8011e9a:	f7ff fec1 	bl	8011c20 <tcp_output_alloc_header>
 8011e9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d109      	bne.n	8011eba <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	8b5b      	ldrh	r3, [r3, #26]
 8011eaa:	f043 0303 	orr.w	r3, r3, #3
 8011eae:	b29a      	uxth	r2, r3
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011eb4:	f06f 0301 	mvn.w	r3, #1
 8011eb8:	e023      	b.n	8011f02 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011eba:	7dbb      	ldrb	r3, [r7, #22]
 8011ebc:	7dfa      	ldrb	r2, [r7, #23]
 8011ebe:	6939      	ldr	r1, [r7, #16]
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f7ff feeb 	bl	8011c9c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011ec6:	687a      	ldr	r2, [r7, #4]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	3304      	adds	r3, #4
 8011ecc:	6939      	ldr	r1, [r7, #16]
 8011ece:	6878      	ldr	r0, [r7, #4]
 8011ed0:	f7ff ff24 	bl	8011d1c <tcp_output_control_segment>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d007      	beq.n	8011ef0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	8b5b      	ldrh	r3, [r3, #26]
 8011ee4:	f043 0303 	orr.w	r3, r3, #3
 8011ee8:	b29a      	uxth	r2, r3
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	835a      	strh	r2, [r3, #26]
 8011eee:	e006      	b.n	8011efe <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	8b5b      	ldrh	r3, [r3, #26]
 8011ef4:	f023 0303 	bic.w	r3, r3, #3
 8011ef8:	b29a      	uxth	r2, r3
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011efe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	371c      	adds	r7, #28
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd90      	pop	{r4, r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	080178a4 	.word	0x080178a4
 8011f10:	08018060 	.word	0x08018060
 8011f14:	080178f8 	.word	0x080178f8

08011f18 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011f18:	b590      	push	{r4, r7, lr}
 8011f1a:	b087      	sub	sp, #28
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f20:	2300      	movs	r3, #0
 8011f22:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d106      	bne.n	8011f38 <tcp_keepalive+0x20>
 8011f2a:	4b18      	ldr	r3, [pc, #96]	; (8011f8c <tcp_keepalive+0x74>)
 8011f2c:	f640 0224 	movw	r2, #2084	; 0x824
 8011f30:	4917      	ldr	r1, [pc, #92]	; (8011f90 <tcp_keepalive+0x78>)
 8011f32:	4818      	ldr	r0, [pc, #96]	; (8011f94 <tcp_keepalive+0x7c>)
 8011f34:	f003 f846 	bl	8014fc4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011f38:	7dfb      	ldrb	r3, [r7, #23]
 8011f3a:	b29c      	uxth	r4, r3
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f40:	3b01      	subs	r3, #1
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7f8 fa2f 	bl	800a3a6 <lwip_htonl>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	4621      	mov	r1, r4
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	f7ff fe66 	bl	8011c20 <tcp_output_alloc_header>
 8011f54:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d102      	bne.n	8011f62 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011f5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011f60:	e010      	b.n	8011f84 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011f62:	7dfb      	ldrb	r3, [r7, #23]
 8011f64:	2200      	movs	r2, #0
 8011f66:	6939      	ldr	r1, [r7, #16]
 8011f68:	6878      	ldr	r0, [r7, #4]
 8011f6a:	f7ff fe97 	bl	8011c9c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011f6e:	687a      	ldr	r2, [r7, #4]
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	3304      	adds	r3, #4
 8011f74:	6939      	ldr	r1, [r7, #16]
 8011f76:	6878      	ldr	r0, [r7, #4]
 8011f78:	f7ff fed0 	bl	8011d1c <tcp_output_control_segment>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f84:	4618      	mov	r0, r3
 8011f86:	371c      	adds	r7, #28
 8011f88:	46bd      	mov	sp, r7
 8011f8a:	bd90      	pop	{r4, r7, pc}
 8011f8c:	080178a4 	.word	0x080178a4
 8011f90:	08018080 	.word	0x08018080
 8011f94:	080178f8 	.word	0x080178f8

08011f98 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011f98:	b590      	push	{r4, r7, lr}
 8011f9a:	b08b      	sub	sp, #44	; 0x2c
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d106      	bne.n	8011fba <tcp_zero_window_probe+0x22>
 8011fac:	4b4c      	ldr	r3, [pc, #304]	; (80120e0 <tcp_zero_window_probe+0x148>)
 8011fae:	f640 024f 	movw	r2, #2127	; 0x84f
 8011fb2:	494c      	ldr	r1, [pc, #304]	; (80120e4 <tcp_zero_window_probe+0x14c>)
 8011fb4:	484c      	ldr	r0, [pc, #304]	; (80120e8 <tcp_zero_window_probe+0x150>)
 8011fb6:	f003 f805 	bl	8014fc4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fbe:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011fc0:	6a3b      	ldr	r3, [r7, #32]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d101      	bne.n	8011fca <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	e086      	b.n	80120d8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011fd0:	2bff      	cmp	r3, #255	; 0xff
 8011fd2:	d007      	beq.n	8011fe4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011fda:	3301      	adds	r3, #1
 8011fdc:	b2da      	uxtb	r2, r3
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011fe4:	6a3b      	ldr	r3, [r7, #32]
 8011fe6:	68db      	ldr	r3, [r3, #12]
 8011fe8:	899b      	ldrh	r3, [r3, #12]
 8011fea:	b29b      	uxth	r3, r3
 8011fec:	4618      	mov	r0, r3
 8011fee:	f7f8 f9c5 	bl	800a37c <lwip_htons>
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	b2db      	uxtb	r3, r3
 8011ff6:	f003 0301 	and.w	r3, r3, #1
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d005      	beq.n	801200a <tcp_zero_window_probe+0x72>
 8011ffe:	6a3b      	ldr	r3, [r7, #32]
 8012000:	891b      	ldrh	r3, [r3, #8]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d101      	bne.n	801200a <tcp_zero_window_probe+0x72>
 8012006:	2301      	movs	r3, #1
 8012008:	e000      	b.n	801200c <tcp_zero_window_probe+0x74>
 801200a:	2300      	movs	r3, #0
 801200c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801200e:	7ffb      	ldrb	r3, [r7, #31]
 8012010:	2b00      	cmp	r3, #0
 8012012:	bf0c      	ite	eq
 8012014:	2301      	moveq	r3, #1
 8012016:	2300      	movne	r3, #0
 8012018:	b2db      	uxtb	r3, r3
 801201a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801201c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012020:	b299      	uxth	r1, r3
 8012022:	6a3b      	ldr	r3, [r7, #32]
 8012024:	68db      	ldr	r3, [r3, #12]
 8012026:	685b      	ldr	r3, [r3, #4]
 8012028:	8bba      	ldrh	r2, [r7, #28]
 801202a:	6878      	ldr	r0, [r7, #4]
 801202c:	f7ff fdf8 	bl	8011c20 <tcp_output_alloc_header>
 8012030:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012032:	69bb      	ldr	r3, [r7, #24]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d102      	bne.n	801203e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801203c:	e04c      	b.n	80120d8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801203e:	69bb      	ldr	r3, [r7, #24]
 8012040:	685b      	ldr	r3, [r3, #4]
 8012042:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012044:	7ffb      	ldrb	r3, [r7, #31]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d011      	beq.n	801206e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	899b      	ldrh	r3, [r3, #12]
 801204e:	b29b      	uxth	r3, r3
 8012050:	b21b      	sxth	r3, r3
 8012052:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012056:	b21c      	sxth	r4, r3
 8012058:	2011      	movs	r0, #17
 801205a:	f7f8 f98f 	bl	800a37c <lwip_htons>
 801205e:	4603      	mov	r3, r0
 8012060:	b21b      	sxth	r3, r3
 8012062:	4323      	orrs	r3, r4
 8012064:	b21b      	sxth	r3, r3
 8012066:	b29a      	uxth	r2, r3
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	819a      	strh	r2, [r3, #12]
 801206c:	e010      	b.n	8012090 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801206e:	69bb      	ldr	r3, [r7, #24]
 8012070:	685b      	ldr	r3, [r3, #4]
 8012072:	3314      	adds	r3, #20
 8012074:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012076:	6a3b      	ldr	r3, [r7, #32]
 8012078:	6858      	ldr	r0, [r3, #4]
 801207a:	6a3b      	ldr	r3, [r7, #32]
 801207c:	685b      	ldr	r3, [r3, #4]
 801207e:	891a      	ldrh	r2, [r3, #8]
 8012080:	6a3b      	ldr	r3, [r7, #32]
 8012082:	891b      	ldrh	r3, [r3, #8]
 8012084:	1ad3      	subs	r3, r2, r3
 8012086:	b29b      	uxth	r3, r3
 8012088:	2201      	movs	r2, #1
 801208a:	6939      	ldr	r1, [r7, #16]
 801208c:	f7f9 ff4a 	bl	800bf24 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012090:	6a3b      	ldr	r3, [r7, #32]
 8012092:	68db      	ldr	r3, [r3, #12]
 8012094:	685b      	ldr	r3, [r3, #4]
 8012096:	4618      	mov	r0, r3
 8012098:	f7f8 f985 	bl	800a3a6 <lwip_htonl>
 801209c:	4603      	mov	r3, r0
 801209e:	3301      	adds	r3, #1
 80120a0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	1ad3      	subs	r3, r2, r3
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	da02      	bge.n	80120b4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	68fa      	ldr	r2, [r7, #12]
 80120b2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80120b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120b8:	2200      	movs	r2, #0
 80120ba:	69b9      	ldr	r1, [r7, #24]
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f7ff fded 	bl	8011c9c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80120c2:	687a      	ldr	r2, [r7, #4]
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	3304      	adds	r3, #4
 80120c8:	69b9      	ldr	r1, [r7, #24]
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f7ff fe26 	bl	8011d1c <tcp_output_control_segment>
 80120d0:	4603      	mov	r3, r0
 80120d2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80120d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80120d8:	4618      	mov	r0, r3
 80120da:	372c      	adds	r7, #44	; 0x2c
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd90      	pop	{r4, r7, pc}
 80120e0:	080178a4 	.word	0x080178a4
 80120e4:	0801809c 	.word	0x0801809c
 80120e8:	080178f8 	.word	0x080178f8

080120ec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80120ec:	b580      	push	{r7, lr}
 80120ee:	b082      	sub	sp, #8
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80120f4:	f7fa f804 	bl	800c100 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80120f8:	4b0a      	ldr	r3, [pc, #40]	; (8012124 <tcpip_tcp_timer+0x38>)
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d103      	bne.n	8012108 <tcpip_tcp_timer+0x1c>
 8012100:	4b09      	ldr	r3, [pc, #36]	; (8012128 <tcpip_tcp_timer+0x3c>)
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d005      	beq.n	8012114 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012108:	2200      	movs	r2, #0
 801210a:	4908      	ldr	r1, [pc, #32]	; (801212c <tcpip_tcp_timer+0x40>)
 801210c:	20fa      	movs	r0, #250	; 0xfa
 801210e:	f000 f8f1 	bl	80122f4 <sys_timeout>
 8012112:	e002      	b.n	801211a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012114:	4b06      	ldr	r3, [pc, #24]	; (8012130 <tcpip_tcp_timer+0x44>)
 8012116:	2200      	movs	r2, #0
 8012118:	601a      	str	r2, [r3, #0]
  }
}
 801211a:	bf00      	nop
 801211c:	3708      	adds	r7, #8
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
 8012122:	bf00      	nop
 8012124:	2000b43c 	.word	0x2000b43c
 8012128:	2000b44c 	.word	0x2000b44c
 801212c:	080120ed 	.word	0x080120ed
 8012130:	20004520 	.word	0x20004520

08012134 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012138:	4b0a      	ldr	r3, [pc, #40]	; (8012164 <tcp_timer_needed+0x30>)
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d10f      	bne.n	8012160 <tcp_timer_needed+0x2c>
 8012140:	4b09      	ldr	r3, [pc, #36]	; (8012168 <tcp_timer_needed+0x34>)
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d103      	bne.n	8012150 <tcp_timer_needed+0x1c>
 8012148:	4b08      	ldr	r3, [pc, #32]	; (801216c <tcp_timer_needed+0x38>)
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d007      	beq.n	8012160 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012150:	4b04      	ldr	r3, [pc, #16]	; (8012164 <tcp_timer_needed+0x30>)
 8012152:	2201      	movs	r2, #1
 8012154:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012156:	2200      	movs	r2, #0
 8012158:	4905      	ldr	r1, [pc, #20]	; (8012170 <tcp_timer_needed+0x3c>)
 801215a:	20fa      	movs	r0, #250	; 0xfa
 801215c:	f000 f8ca 	bl	80122f4 <sys_timeout>
  }
}
 8012160:	bf00      	nop
 8012162:	bd80      	pop	{r7, pc}
 8012164:	20004520 	.word	0x20004520
 8012168:	2000b43c 	.word	0x2000b43c
 801216c:	2000b44c 	.word	0x2000b44c
 8012170:	080120ed 	.word	0x080120ed

08012174 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b086      	sub	sp, #24
 8012178:	af00      	add	r7, sp, #0
 801217a:	60f8      	str	r0, [r7, #12]
 801217c:	60b9      	str	r1, [r7, #8]
 801217e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012180:	200a      	movs	r0, #10
 8012182:	f7f8 fde7 	bl	800ad54 <memp_malloc>
 8012186:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012188:	693b      	ldr	r3, [r7, #16]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d109      	bne.n	80121a2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d151      	bne.n	8012238 <sys_timeout_abs+0xc4>
 8012194:	4b2a      	ldr	r3, [pc, #168]	; (8012240 <sys_timeout_abs+0xcc>)
 8012196:	22be      	movs	r2, #190	; 0xbe
 8012198:	492a      	ldr	r1, [pc, #168]	; (8012244 <sys_timeout_abs+0xd0>)
 801219a:	482b      	ldr	r0, [pc, #172]	; (8012248 <sys_timeout_abs+0xd4>)
 801219c:	f002 ff12 	bl	8014fc4 <iprintf>
    return;
 80121a0:	e04a      	b.n	8012238 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80121a2:	693b      	ldr	r3, [r7, #16]
 80121a4:	2200      	movs	r2, #0
 80121a6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80121a8:	693b      	ldr	r3, [r7, #16]
 80121aa:	68ba      	ldr	r2, [r7, #8]
 80121ac:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80121ae:	693b      	ldr	r3, [r7, #16]
 80121b0:	687a      	ldr	r2, [r7, #4]
 80121b2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	68fa      	ldr	r2, [r7, #12]
 80121b8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80121ba:	4b24      	ldr	r3, [pc, #144]	; (801224c <sys_timeout_abs+0xd8>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d103      	bne.n	80121ca <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80121c2:	4a22      	ldr	r2, [pc, #136]	; (801224c <sys_timeout_abs+0xd8>)
 80121c4:	693b      	ldr	r3, [r7, #16]
 80121c6:	6013      	str	r3, [r2, #0]
    return;
 80121c8:	e037      	b.n	801223a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80121ca:	693b      	ldr	r3, [r7, #16]
 80121cc:	685a      	ldr	r2, [r3, #4]
 80121ce:	4b1f      	ldr	r3, [pc, #124]	; (801224c <sys_timeout_abs+0xd8>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	685b      	ldr	r3, [r3, #4]
 80121d4:	1ad3      	subs	r3, r2, r3
 80121d6:	0fdb      	lsrs	r3, r3, #31
 80121d8:	f003 0301 	and.w	r3, r3, #1
 80121dc:	b2db      	uxtb	r3, r3
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d007      	beq.n	80121f2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80121e2:	4b1a      	ldr	r3, [pc, #104]	; (801224c <sys_timeout_abs+0xd8>)
 80121e4:	681a      	ldr	r2, [r3, #0]
 80121e6:	693b      	ldr	r3, [r7, #16]
 80121e8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80121ea:	4a18      	ldr	r2, [pc, #96]	; (801224c <sys_timeout_abs+0xd8>)
 80121ec:	693b      	ldr	r3, [r7, #16]
 80121ee:	6013      	str	r3, [r2, #0]
 80121f0:	e023      	b.n	801223a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80121f2:	4b16      	ldr	r3, [pc, #88]	; (801224c <sys_timeout_abs+0xd8>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	617b      	str	r3, [r7, #20]
 80121f8:	e01a      	b.n	8012230 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d00b      	beq.n	801221a <sys_timeout_abs+0xa6>
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	685a      	ldr	r2, [r3, #4]
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	685b      	ldr	r3, [r3, #4]
 801220c:	1ad3      	subs	r3, r2, r3
 801220e:	0fdb      	lsrs	r3, r3, #31
 8012210:	f003 0301 	and.w	r3, r3, #1
 8012214:	b2db      	uxtb	r3, r3
 8012216:	2b00      	cmp	r3, #0
 8012218:	d007      	beq.n	801222a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	681a      	ldr	r2, [r3, #0]
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012222:	697b      	ldr	r3, [r7, #20]
 8012224:	693a      	ldr	r2, [r7, #16]
 8012226:	601a      	str	r2, [r3, #0]
        break;
 8012228:	e007      	b.n	801223a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801222a:	697b      	ldr	r3, [r7, #20]
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	617b      	str	r3, [r7, #20]
 8012230:	697b      	ldr	r3, [r7, #20]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d1e1      	bne.n	80121fa <sys_timeout_abs+0x86>
 8012236:	e000      	b.n	801223a <sys_timeout_abs+0xc6>
    return;
 8012238:	bf00      	nop
      }
    }
  }
}
 801223a:	3718      	adds	r7, #24
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}
 8012240:	080180c0 	.word	0x080180c0
 8012244:	080180f4 	.word	0x080180f4
 8012248:	08018134 	.word	0x08018134
 801224c:	20004518 	.word	0x20004518

08012250 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012250:	b580      	push	{r7, lr}
 8012252:	b086      	sub	sp, #24
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	685b      	ldr	r3, [r3, #4]
 8012260:	4798      	blx	r3

  now = sys_now();
 8012262:	f7f4 f8e5 	bl	8006430 <sys_now>
 8012266:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	681a      	ldr	r2, [r3, #0]
 801226c:	4b0f      	ldr	r3, [pc, #60]	; (80122ac <lwip_cyclic_timer+0x5c>)
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	4413      	add	r3, r2
 8012272:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012274:	68fa      	ldr	r2, [r7, #12]
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	1ad3      	subs	r3, r2, r3
 801227a:	0fdb      	lsrs	r3, r3, #31
 801227c:	f003 0301 	and.w	r3, r3, #1
 8012280:	b2db      	uxtb	r3, r3
 8012282:	2b00      	cmp	r3, #0
 8012284:	d009      	beq.n	801229a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012286:	697b      	ldr	r3, [r7, #20]
 8012288:	681a      	ldr	r2, [r3, #0]
 801228a:	693b      	ldr	r3, [r7, #16]
 801228c:	4413      	add	r3, r2
 801228e:	687a      	ldr	r2, [r7, #4]
 8012290:	4907      	ldr	r1, [pc, #28]	; (80122b0 <lwip_cyclic_timer+0x60>)
 8012292:	4618      	mov	r0, r3
 8012294:	f7ff ff6e 	bl	8012174 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012298:	e004      	b.n	80122a4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801229a:	687a      	ldr	r2, [r7, #4]
 801229c:	4904      	ldr	r1, [pc, #16]	; (80122b0 <lwip_cyclic_timer+0x60>)
 801229e:	68f8      	ldr	r0, [r7, #12]
 80122a0:	f7ff ff68 	bl	8012174 <sys_timeout_abs>
}
 80122a4:	bf00      	nop
 80122a6:	3718      	adds	r7, #24
 80122a8:	46bd      	mov	sp, r7
 80122aa:	bd80      	pop	{r7, pc}
 80122ac:	2000451c 	.word	0x2000451c
 80122b0:	08012251 	.word	0x08012251

080122b4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80122ba:	2301      	movs	r3, #1
 80122bc:	607b      	str	r3, [r7, #4]
 80122be:	e00e      	b.n	80122de <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80122c0:	4a0a      	ldr	r2, [pc, #40]	; (80122ec <sys_timeouts_init+0x38>)
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	00db      	lsls	r3, r3, #3
 80122cc:	4a07      	ldr	r2, [pc, #28]	; (80122ec <sys_timeouts_init+0x38>)
 80122ce:	4413      	add	r3, r2
 80122d0:	461a      	mov	r2, r3
 80122d2:	4907      	ldr	r1, [pc, #28]	; (80122f0 <sys_timeouts_init+0x3c>)
 80122d4:	f000 f80e 	bl	80122f4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	3301      	adds	r3, #1
 80122dc:	607b      	str	r3, [r7, #4]
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	2b02      	cmp	r3, #2
 80122e2:	d9ed      	bls.n	80122c0 <sys_timeouts_init+0xc>
  }
}
 80122e4:	bf00      	nop
 80122e6:	3708      	adds	r7, #8
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd80      	pop	{r7, pc}
 80122ec:	08029820 	.word	0x08029820
 80122f0:	08012251 	.word	0x08012251

080122f4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b086      	sub	sp, #24
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	60f8      	str	r0, [r7, #12]
 80122fc:	60b9      	str	r1, [r7, #8]
 80122fe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012306:	d306      	bcc.n	8012316 <sys_timeout+0x22>
 8012308:	4b0a      	ldr	r3, [pc, #40]	; (8012334 <sys_timeout+0x40>)
 801230a:	f240 1229 	movw	r2, #297	; 0x129
 801230e:	490a      	ldr	r1, [pc, #40]	; (8012338 <sys_timeout+0x44>)
 8012310:	480a      	ldr	r0, [pc, #40]	; (801233c <sys_timeout+0x48>)
 8012312:	f002 fe57 	bl	8014fc4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012316:	f7f4 f88b 	bl	8006430 <sys_now>
 801231a:	4602      	mov	r2, r0
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	4413      	add	r3, r2
 8012320:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012322:	687a      	ldr	r2, [r7, #4]
 8012324:	68b9      	ldr	r1, [r7, #8]
 8012326:	6978      	ldr	r0, [r7, #20]
 8012328:	f7ff ff24 	bl	8012174 <sys_timeout_abs>
#endif
}
 801232c:	bf00      	nop
 801232e:	3718      	adds	r7, #24
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}
 8012334:	080180c0 	.word	0x080180c0
 8012338:	0801815c 	.word	0x0801815c
 801233c:	08018134 	.word	0x08018134

08012340 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b084      	sub	sp, #16
 8012344:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012346:	f7f4 f873 	bl	8006430 <sys_now>
 801234a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801234c:	4b17      	ldr	r3, [pc, #92]	; (80123ac <sys_check_timeouts+0x6c>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d022      	beq.n	801239e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	685b      	ldr	r3, [r3, #4]
 801235c:	68fa      	ldr	r2, [r7, #12]
 801235e:	1ad3      	subs	r3, r2, r3
 8012360:	0fdb      	lsrs	r3, r3, #31
 8012362:	f003 0301 	and.w	r3, r3, #1
 8012366:	b2db      	uxtb	r3, r3
 8012368:	2b00      	cmp	r3, #0
 801236a:	d11a      	bne.n	80123a2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801236c:	68bb      	ldr	r3, [r7, #8]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	4a0e      	ldr	r2, [pc, #56]	; (80123ac <sys_check_timeouts+0x6c>)
 8012372:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012374:	68bb      	ldr	r3, [r7, #8]
 8012376:	689b      	ldr	r3, [r3, #8]
 8012378:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	68db      	ldr	r3, [r3, #12]
 801237e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012380:	68bb      	ldr	r3, [r7, #8]
 8012382:	685b      	ldr	r3, [r3, #4]
 8012384:	4a0a      	ldr	r2, [pc, #40]	; (80123b0 <sys_check_timeouts+0x70>)
 8012386:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012388:	68b9      	ldr	r1, [r7, #8]
 801238a:	200a      	movs	r0, #10
 801238c:	f7f8 fd34 	bl	800adf8 <memp_free>
    if (handler != NULL) {
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d0da      	beq.n	801234c <sys_check_timeouts+0xc>
      handler(arg);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	6838      	ldr	r0, [r7, #0]
 801239a:	4798      	blx	r3
  do {
 801239c:	e7d6      	b.n	801234c <sys_check_timeouts+0xc>
      return;
 801239e:	bf00      	nop
 80123a0:	e000      	b.n	80123a4 <sys_check_timeouts+0x64>
      return;
 80123a2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80123a4:	3710      	adds	r7, #16
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}
 80123aa:	bf00      	nop
 80123ac:	20004518 	.word	0x20004518
 80123b0:	2000451c 	.word	0x2000451c

080123b4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b082      	sub	sp, #8
 80123b8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80123ba:	4b16      	ldr	r3, [pc, #88]	; (8012414 <sys_timeouts_sleeptime+0x60>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d102      	bne.n	80123c8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80123c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80123c6:	e020      	b.n	801240a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80123c8:	f7f4 f832 	bl	8006430 <sys_now>
 80123cc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80123ce:	4b11      	ldr	r3, [pc, #68]	; (8012414 <sys_timeouts_sleeptime+0x60>)
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	685a      	ldr	r2, [r3, #4]
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	1ad3      	subs	r3, r2, r3
 80123d8:	0fdb      	lsrs	r3, r3, #31
 80123da:	f003 0301 	and.w	r3, r3, #1
 80123de:	b2db      	uxtb	r3, r3
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d001      	beq.n	80123e8 <sys_timeouts_sleeptime+0x34>
    return 0;
 80123e4:	2300      	movs	r3, #0
 80123e6:	e010      	b.n	801240a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80123e8:	4b0a      	ldr	r3, [pc, #40]	; (8012414 <sys_timeouts_sleeptime+0x60>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	685a      	ldr	r2, [r3, #4]
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	1ad3      	subs	r3, r2, r3
 80123f2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80123f4:	683b      	ldr	r3, [r7, #0]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	da06      	bge.n	8012408 <sys_timeouts_sleeptime+0x54>
 80123fa:	4b07      	ldr	r3, [pc, #28]	; (8012418 <sys_timeouts_sleeptime+0x64>)
 80123fc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012400:	4906      	ldr	r1, [pc, #24]	; (801241c <sys_timeouts_sleeptime+0x68>)
 8012402:	4807      	ldr	r0, [pc, #28]	; (8012420 <sys_timeouts_sleeptime+0x6c>)
 8012404:	f002 fdde 	bl	8014fc4 <iprintf>
    return ret;
 8012408:	683b      	ldr	r3, [r7, #0]
  }
}
 801240a:	4618      	mov	r0, r3
 801240c:	3708      	adds	r7, #8
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}
 8012412:	bf00      	nop
 8012414:	20004518 	.word	0x20004518
 8012418:	080180c0 	.word	0x080180c0
 801241c:	08018194 	.word	0x08018194
 8012420:	08018134 	.word	0x08018134

08012424 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012428:	f002 fde4 	bl	8014ff4 <rand>
 801242c:	4603      	mov	r3, r0
 801242e:	b29b      	uxth	r3, r3
 8012430:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012434:	b29b      	uxth	r3, r3
 8012436:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801243a:	b29a      	uxth	r2, r3
 801243c:	4b01      	ldr	r3, [pc, #4]	; (8012444 <udp_init+0x20>)
 801243e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012440:	bf00      	nop
 8012442:	bd80      	pop	{r7, pc}
 8012444:	20000018 	.word	0x20000018

08012448 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b084      	sub	sp, #16
 801244c:	af00      	add	r7, sp, #0
 801244e:	60f8      	str	r0, [r7, #12]
 8012450:	60b9      	str	r1, [r7, #8]
 8012452:	4613      	mov	r3, r2
 8012454:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d105      	bne.n	8012468 <udp_input_local_match+0x20>
 801245c:	4b27      	ldr	r3, [pc, #156]	; (80124fc <udp_input_local_match+0xb4>)
 801245e:	2287      	movs	r2, #135	; 0x87
 8012460:	4927      	ldr	r1, [pc, #156]	; (8012500 <udp_input_local_match+0xb8>)
 8012462:	4828      	ldr	r0, [pc, #160]	; (8012504 <udp_input_local_match+0xbc>)
 8012464:	f002 fdae 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d105      	bne.n	801247a <udp_input_local_match+0x32>
 801246e:	4b23      	ldr	r3, [pc, #140]	; (80124fc <udp_input_local_match+0xb4>)
 8012470:	2288      	movs	r2, #136	; 0x88
 8012472:	4925      	ldr	r1, [pc, #148]	; (8012508 <udp_input_local_match+0xc0>)
 8012474:	4823      	ldr	r0, [pc, #140]	; (8012504 <udp_input_local_match+0xbc>)
 8012476:	f002 fda5 	bl	8014fc4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	7a1b      	ldrb	r3, [r3, #8]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d00b      	beq.n	801249a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	7a1a      	ldrb	r2, [r3, #8]
 8012486:	4b21      	ldr	r3, [pc, #132]	; (801250c <udp_input_local_match+0xc4>)
 8012488:	685b      	ldr	r3, [r3, #4]
 801248a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801248e:	3301      	adds	r3, #1
 8012490:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012492:	429a      	cmp	r2, r3
 8012494:	d001      	beq.n	801249a <udp_input_local_match+0x52>
    return 0;
 8012496:	2300      	movs	r3, #0
 8012498:	e02b      	b.n	80124f2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801249a:	79fb      	ldrb	r3, [r7, #7]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d018      	beq.n	80124d2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d013      	beq.n	80124ce <udp_input_local_match+0x86>
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d00f      	beq.n	80124ce <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80124ae:	4b17      	ldr	r3, [pc, #92]	; (801250c <udp_input_local_match+0xc4>)
 80124b0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80124b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80124b6:	d00a      	beq.n	80124ce <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	681a      	ldr	r2, [r3, #0]
 80124bc:	4b13      	ldr	r3, [pc, #76]	; (801250c <udp_input_local_match+0xc4>)
 80124be:	695b      	ldr	r3, [r3, #20]
 80124c0:	405a      	eors	r2, r3
 80124c2:	68bb      	ldr	r3, [r7, #8]
 80124c4:	3308      	adds	r3, #8
 80124c6:	681b      	ldr	r3, [r3, #0]
 80124c8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d110      	bne.n	80124f0 <udp_input_local_match+0xa8>
          return 1;
 80124ce:	2301      	movs	r3, #1
 80124d0:	e00f      	b.n	80124f2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d009      	beq.n	80124ec <udp_input_local_match+0xa4>
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d005      	beq.n	80124ec <udp_input_local_match+0xa4>
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	681a      	ldr	r2, [r3, #0]
 80124e4:	4b09      	ldr	r3, [pc, #36]	; (801250c <udp_input_local_match+0xc4>)
 80124e6:	695b      	ldr	r3, [r3, #20]
 80124e8:	429a      	cmp	r2, r3
 80124ea:	d101      	bne.n	80124f0 <udp_input_local_match+0xa8>
        return 1;
 80124ec:	2301      	movs	r3, #1
 80124ee:	e000      	b.n	80124f2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80124f0:	2300      	movs	r3, #0
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	3710      	adds	r7, #16
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}
 80124fa:	bf00      	nop
 80124fc:	080181a8 	.word	0x080181a8
 8012500:	080181d8 	.word	0x080181d8
 8012504:	080181fc 	.word	0x080181fc
 8012508:	08018224 	.word	0x08018224
 801250c:	20007d28 	.word	0x20007d28

08012510 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012510:	b590      	push	{r4, r7, lr}
 8012512:	b08d      	sub	sp, #52	; 0x34
 8012514:	af02      	add	r7, sp, #8
 8012516:	6078      	str	r0, [r7, #4]
 8012518:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801251a:	2300      	movs	r3, #0
 801251c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d105      	bne.n	8012530 <udp_input+0x20>
 8012524:	4b7c      	ldr	r3, [pc, #496]	; (8012718 <udp_input+0x208>)
 8012526:	22cf      	movs	r2, #207	; 0xcf
 8012528:	497c      	ldr	r1, [pc, #496]	; (801271c <udp_input+0x20c>)
 801252a:	487d      	ldr	r0, [pc, #500]	; (8012720 <udp_input+0x210>)
 801252c:	f002 fd4a 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d105      	bne.n	8012542 <udp_input+0x32>
 8012536:	4b78      	ldr	r3, [pc, #480]	; (8012718 <udp_input+0x208>)
 8012538:	22d0      	movs	r2, #208	; 0xd0
 801253a:	497a      	ldr	r1, [pc, #488]	; (8012724 <udp_input+0x214>)
 801253c:	4878      	ldr	r0, [pc, #480]	; (8012720 <udp_input+0x210>)
 801253e:	f002 fd41 	bl	8014fc4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	895b      	ldrh	r3, [r3, #10]
 8012546:	2b07      	cmp	r3, #7
 8012548:	d803      	bhi.n	8012552 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801254a:	6878      	ldr	r0, [r7, #4]
 801254c:	f7f9 faf4 	bl	800bb38 <pbuf_free>
    goto end;
 8012550:	e0de      	b.n	8012710 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	685b      	ldr	r3, [r3, #4]
 8012556:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012558:	4b73      	ldr	r3, [pc, #460]	; (8012728 <udp_input+0x218>)
 801255a:	695a      	ldr	r2, [r3, #20]
 801255c:	4b72      	ldr	r3, [pc, #456]	; (8012728 <udp_input+0x218>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	4619      	mov	r1, r3
 8012562:	4610      	mov	r0, r2
 8012564:	f001 fc86 	bl	8013e74 <ip4_addr_isbroadcast_u32>
 8012568:	4603      	mov	r3, r0
 801256a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801256c:	697b      	ldr	r3, [r7, #20]
 801256e:	881b      	ldrh	r3, [r3, #0]
 8012570:	b29b      	uxth	r3, r3
 8012572:	4618      	mov	r0, r3
 8012574:	f7f7 ff02 	bl	800a37c <lwip_htons>
 8012578:	4603      	mov	r3, r0
 801257a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	885b      	ldrh	r3, [r3, #2]
 8012580:	b29b      	uxth	r3, r3
 8012582:	4618      	mov	r0, r3
 8012584:	f7f7 fefa 	bl	800a37c <lwip_htons>
 8012588:	4603      	mov	r3, r0
 801258a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801258c:	2300      	movs	r3, #0
 801258e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012590:	2300      	movs	r3, #0
 8012592:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012594:	2300      	movs	r3, #0
 8012596:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012598:	4b64      	ldr	r3, [pc, #400]	; (801272c <udp_input+0x21c>)
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	627b      	str	r3, [r7, #36]	; 0x24
 801259e:	e054      	b.n	801264a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80125a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125a2:	8a5b      	ldrh	r3, [r3, #18]
 80125a4:	89fa      	ldrh	r2, [r7, #14]
 80125a6:	429a      	cmp	r2, r3
 80125a8:	d14a      	bne.n	8012640 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80125aa:	7cfb      	ldrb	r3, [r7, #19]
 80125ac:	461a      	mov	r2, r3
 80125ae:	6839      	ldr	r1, [r7, #0]
 80125b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125b2:	f7ff ff49 	bl	8012448 <udp_input_local_match>
 80125b6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d041      	beq.n	8012640 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80125bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125be:	7c1b      	ldrb	r3, [r3, #16]
 80125c0:	f003 0304 	and.w	r3, r3, #4
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d11d      	bne.n	8012604 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80125c8:	69fb      	ldr	r3, [r7, #28]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d102      	bne.n	80125d4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80125ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125d0:	61fb      	str	r3, [r7, #28]
 80125d2:	e017      	b.n	8012604 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80125d4:	7cfb      	ldrb	r3, [r7, #19]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d014      	beq.n	8012604 <udp_input+0xf4>
 80125da:	4b53      	ldr	r3, [pc, #332]	; (8012728 <udp_input+0x218>)
 80125dc:	695b      	ldr	r3, [r3, #20]
 80125de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80125e2:	d10f      	bne.n	8012604 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80125e4:	69fb      	ldr	r3, [r7, #28]
 80125e6:	681a      	ldr	r2, [r3, #0]
 80125e8:	683b      	ldr	r3, [r7, #0]
 80125ea:	3304      	adds	r3, #4
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	429a      	cmp	r2, r3
 80125f0:	d008      	beq.n	8012604 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80125f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f4:	681a      	ldr	r2, [r3, #0]
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	3304      	adds	r3, #4
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	429a      	cmp	r2, r3
 80125fe:	d101      	bne.n	8012604 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012602:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012606:	8a9b      	ldrh	r3, [r3, #20]
 8012608:	8a3a      	ldrh	r2, [r7, #16]
 801260a:	429a      	cmp	r2, r3
 801260c:	d118      	bne.n	8012640 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012610:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012612:	2b00      	cmp	r3, #0
 8012614:	d005      	beq.n	8012622 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012618:	685a      	ldr	r2, [r3, #4]
 801261a:	4b43      	ldr	r3, [pc, #268]	; (8012728 <udp_input+0x218>)
 801261c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801261e:	429a      	cmp	r2, r3
 8012620:	d10e      	bne.n	8012640 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012622:	6a3b      	ldr	r3, [r7, #32]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d014      	beq.n	8012652 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801262a:	68da      	ldr	r2, [r3, #12]
 801262c:	6a3b      	ldr	r3, [r7, #32]
 801262e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012630:	4b3e      	ldr	r3, [pc, #248]	; (801272c <udp_input+0x21c>)
 8012632:	681a      	ldr	r2, [r3, #0]
 8012634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012636:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012638:	4a3c      	ldr	r2, [pc, #240]	; (801272c <udp_input+0x21c>)
 801263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801263c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801263e:	e008      	b.n	8012652 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012642:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012646:	68db      	ldr	r3, [r3, #12]
 8012648:	627b      	str	r3, [r7, #36]	; 0x24
 801264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801264c:	2b00      	cmp	r3, #0
 801264e:	d1a7      	bne.n	80125a0 <udp_input+0x90>
 8012650:	e000      	b.n	8012654 <udp_input+0x144>
        break;
 8012652:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012656:	2b00      	cmp	r3, #0
 8012658:	d101      	bne.n	801265e <udp_input+0x14e>
    pcb = uncon_pcb;
 801265a:	69fb      	ldr	r3, [r7, #28]
 801265c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012660:	2b00      	cmp	r3, #0
 8012662:	d002      	beq.n	801266a <udp_input+0x15a>
    for_us = 1;
 8012664:	2301      	movs	r3, #1
 8012666:	76fb      	strb	r3, [r7, #27]
 8012668:	e00a      	b.n	8012680 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	3304      	adds	r3, #4
 801266e:	681a      	ldr	r2, [r3, #0]
 8012670:	4b2d      	ldr	r3, [pc, #180]	; (8012728 <udp_input+0x218>)
 8012672:	695b      	ldr	r3, [r3, #20]
 8012674:	429a      	cmp	r2, r3
 8012676:	bf0c      	ite	eq
 8012678:	2301      	moveq	r3, #1
 801267a:	2300      	movne	r3, #0
 801267c:	b2db      	uxtb	r3, r3
 801267e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012680:	7efb      	ldrb	r3, [r7, #27]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d041      	beq.n	801270a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012686:	2108      	movs	r1, #8
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f7f9 f9cf 	bl	800ba2c <pbuf_remove_header>
 801268e:	4603      	mov	r3, r0
 8012690:	2b00      	cmp	r3, #0
 8012692:	d00a      	beq.n	80126aa <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012694:	4b20      	ldr	r3, [pc, #128]	; (8012718 <udp_input+0x208>)
 8012696:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801269a:	4925      	ldr	r1, [pc, #148]	; (8012730 <udp_input+0x220>)
 801269c:	4820      	ldr	r0, [pc, #128]	; (8012720 <udp_input+0x210>)
 801269e:	f002 fc91 	bl	8014fc4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80126a2:	6878      	ldr	r0, [r7, #4]
 80126a4:	f7f9 fa48 	bl	800bb38 <pbuf_free>
      goto end;
 80126a8:	e032      	b.n	8012710 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80126aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d012      	beq.n	80126d6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80126b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126b2:	699b      	ldr	r3, [r3, #24]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d00a      	beq.n	80126ce <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80126b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126ba:	699c      	ldr	r4, [r3, #24]
 80126bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80126be:	69d8      	ldr	r0, [r3, #28]
 80126c0:	8a3b      	ldrh	r3, [r7, #16]
 80126c2:	9300      	str	r3, [sp, #0]
 80126c4:	4b1b      	ldr	r3, [pc, #108]	; (8012734 <udp_input+0x224>)
 80126c6:	687a      	ldr	r2, [r7, #4]
 80126c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80126ca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80126cc:	e021      	b.n	8012712 <udp_input+0x202>
        pbuf_free(p);
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f7f9 fa32 	bl	800bb38 <pbuf_free>
        goto end;
 80126d4:	e01c      	b.n	8012710 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80126d6:	7cfb      	ldrb	r3, [r7, #19]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d112      	bne.n	8012702 <udp_input+0x1f2>
 80126dc:	4b12      	ldr	r3, [pc, #72]	; (8012728 <udp_input+0x218>)
 80126de:	695b      	ldr	r3, [r3, #20]
 80126e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80126e4:	2be0      	cmp	r3, #224	; 0xe0
 80126e6:	d00c      	beq.n	8012702 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80126e8:	4b0f      	ldr	r3, [pc, #60]	; (8012728 <udp_input+0x218>)
 80126ea:	899b      	ldrh	r3, [r3, #12]
 80126ec:	3308      	adds	r3, #8
 80126ee:	b29b      	uxth	r3, r3
 80126f0:	b21b      	sxth	r3, r3
 80126f2:	4619      	mov	r1, r3
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f7f9 fa0c 	bl	800bb12 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80126fa:	2103      	movs	r1, #3
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f001 f89b 	bl	8013838 <icmp_dest_unreach>
      pbuf_free(p);
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f7f9 fa18 	bl	800bb38 <pbuf_free>
  return;
 8012708:	e003      	b.n	8012712 <udp_input+0x202>
    pbuf_free(p);
 801270a:	6878      	ldr	r0, [r7, #4]
 801270c:	f7f9 fa14 	bl	800bb38 <pbuf_free>
  return;
 8012710:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012712:	372c      	adds	r7, #44	; 0x2c
 8012714:	46bd      	mov	sp, r7
 8012716:	bd90      	pop	{r4, r7, pc}
 8012718:	080181a8 	.word	0x080181a8
 801271c:	0801824c 	.word	0x0801824c
 8012720:	080181fc 	.word	0x080181fc
 8012724:	08018264 	.word	0x08018264
 8012728:	20007d28 	.word	0x20007d28
 801272c:	2000b454 	.word	0x2000b454
 8012730:	08018280 	.word	0x08018280
 8012734:	20007d38 	.word	0x20007d38

08012738 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012738:	b480      	push	{r7}
 801273a:	b085      	sub	sp, #20
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d01e      	beq.n	8012786 <udp_netif_ip_addr_changed+0x4e>
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d01a      	beq.n	8012786 <udp_netif_ip_addr_changed+0x4e>
 8012750:	683b      	ldr	r3, [r7, #0]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d017      	beq.n	8012786 <udp_netif_ip_addr_changed+0x4e>
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d013      	beq.n	8012786 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801275e:	4b0d      	ldr	r3, [pc, #52]	; (8012794 <udp_netif_ip_addr_changed+0x5c>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	60fb      	str	r3, [r7, #12]
 8012764:	e00c      	b.n	8012780 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	681a      	ldr	r2, [r3, #0]
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	429a      	cmp	r2, r3
 8012770:	d103      	bne.n	801277a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	681a      	ldr	r2, [r3, #0]
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801277a:	68fb      	ldr	r3, [r7, #12]
 801277c:	68db      	ldr	r3, [r3, #12]
 801277e:	60fb      	str	r3, [r7, #12]
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d1ef      	bne.n	8012766 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012786:	bf00      	nop
 8012788:	3714      	adds	r7, #20
 801278a:	46bd      	mov	sp, r7
 801278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012790:	4770      	bx	lr
 8012792:	bf00      	nop
 8012794:	2000b454 	.word	0x2000b454

08012798 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b082      	sub	sp, #8
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80127a0:	4915      	ldr	r1, [pc, #84]	; (80127f8 <etharp_free_entry+0x60>)
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	4613      	mov	r3, r2
 80127a6:	005b      	lsls	r3, r3, #1
 80127a8:	4413      	add	r3, r2
 80127aa:	00db      	lsls	r3, r3, #3
 80127ac:	440b      	add	r3, r1
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d013      	beq.n	80127dc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80127b4:	4910      	ldr	r1, [pc, #64]	; (80127f8 <etharp_free_entry+0x60>)
 80127b6:	687a      	ldr	r2, [r7, #4]
 80127b8:	4613      	mov	r3, r2
 80127ba:	005b      	lsls	r3, r3, #1
 80127bc:	4413      	add	r3, r2
 80127be:	00db      	lsls	r3, r3, #3
 80127c0:	440b      	add	r3, r1
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	4618      	mov	r0, r3
 80127c6:	f7f9 f9b7 	bl	800bb38 <pbuf_free>
    arp_table[i].q = NULL;
 80127ca:	490b      	ldr	r1, [pc, #44]	; (80127f8 <etharp_free_entry+0x60>)
 80127cc:	687a      	ldr	r2, [r7, #4]
 80127ce:	4613      	mov	r3, r2
 80127d0:	005b      	lsls	r3, r3, #1
 80127d2:	4413      	add	r3, r2
 80127d4:	00db      	lsls	r3, r3, #3
 80127d6:	440b      	add	r3, r1
 80127d8:	2200      	movs	r2, #0
 80127da:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80127dc:	4906      	ldr	r1, [pc, #24]	; (80127f8 <etharp_free_entry+0x60>)
 80127de:	687a      	ldr	r2, [r7, #4]
 80127e0:	4613      	mov	r3, r2
 80127e2:	005b      	lsls	r3, r3, #1
 80127e4:	4413      	add	r3, r2
 80127e6:	00db      	lsls	r3, r3, #3
 80127e8:	440b      	add	r3, r1
 80127ea:	3314      	adds	r3, #20
 80127ec:	2200      	movs	r2, #0
 80127ee:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80127f0:	bf00      	nop
 80127f2:	3708      	adds	r7, #8
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}
 80127f8:	20004524 	.word	0x20004524

080127fc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b082      	sub	sp, #8
 8012800:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012802:	2300      	movs	r3, #0
 8012804:	607b      	str	r3, [r7, #4]
 8012806:	e096      	b.n	8012936 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012808:	494f      	ldr	r1, [pc, #316]	; (8012948 <etharp_tmr+0x14c>)
 801280a:	687a      	ldr	r2, [r7, #4]
 801280c:	4613      	mov	r3, r2
 801280e:	005b      	lsls	r3, r3, #1
 8012810:	4413      	add	r3, r2
 8012812:	00db      	lsls	r3, r3, #3
 8012814:	440b      	add	r3, r1
 8012816:	3314      	adds	r3, #20
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801281c:	78fb      	ldrb	r3, [r7, #3]
 801281e:	2b00      	cmp	r3, #0
 8012820:	f000 8086 	beq.w	8012930 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012824:	4948      	ldr	r1, [pc, #288]	; (8012948 <etharp_tmr+0x14c>)
 8012826:	687a      	ldr	r2, [r7, #4]
 8012828:	4613      	mov	r3, r2
 801282a:	005b      	lsls	r3, r3, #1
 801282c:	4413      	add	r3, r2
 801282e:	00db      	lsls	r3, r3, #3
 8012830:	440b      	add	r3, r1
 8012832:	3312      	adds	r3, #18
 8012834:	881b      	ldrh	r3, [r3, #0]
 8012836:	3301      	adds	r3, #1
 8012838:	b298      	uxth	r0, r3
 801283a:	4943      	ldr	r1, [pc, #268]	; (8012948 <etharp_tmr+0x14c>)
 801283c:	687a      	ldr	r2, [r7, #4]
 801283e:	4613      	mov	r3, r2
 8012840:	005b      	lsls	r3, r3, #1
 8012842:	4413      	add	r3, r2
 8012844:	00db      	lsls	r3, r3, #3
 8012846:	440b      	add	r3, r1
 8012848:	3312      	adds	r3, #18
 801284a:	4602      	mov	r2, r0
 801284c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801284e:	493e      	ldr	r1, [pc, #248]	; (8012948 <etharp_tmr+0x14c>)
 8012850:	687a      	ldr	r2, [r7, #4]
 8012852:	4613      	mov	r3, r2
 8012854:	005b      	lsls	r3, r3, #1
 8012856:	4413      	add	r3, r2
 8012858:	00db      	lsls	r3, r3, #3
 801285a:	440b      	add	r3, r1
 801285c:	3312      	adds	r3, #18
 801285e:	881b      	ldrh	r3, [r3, #0]
 8012860:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012864:	d215      	bcs.n	8012892 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012866:	4938      	ldr	r1, [pc, #224]	; (8012948 <etharp_tmr+0x14c>)
 8012868:	687a      	ldr	r2, [r7, #4]
 801286a:	4613      	mov	r3, r2
 801286c:	005b      	lsls	r3, r3, #1
 801286e:	4413      	add	r3, r2
 8012870:	00db      	lsls	r3, r3, #3
 8012872:	440b      	add	r3, r1
 8012874:	3314      	adds	r3, #20
 8012876:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012878:	2b01      	cmp	r3, #1
 801287a:	d10e      	bne.n	801289a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801287c:	4932      	ldr	r1, [pc, #200]	; (8012948 <etharp_tmr+0x14c>)
 801287e:	687a      	ldr	r2, [r7, #4]
 8012880:	4613      	mov	r3, r2
 8012882:	005b      	lsls	r3, r3, #1
 8012884:	4413      	add	r3, r2
 8012886:	00db      	lsls	r3, r3, #3
 8012888:	440b      	add	r3, r1
 801288a:	3312      	adds	r3, #18
 801288c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801288e:	2b04      	cmp	r3, #4
 8012890:	d903      	bls.n	801289a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f7ff ff80 	bl	8012798 <etharp_free_entry>
 8012898:	e04a      	b.n	8012930 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801289a:	492b      	ldr	r1, [pc, #172]	; (8012948 <etharp_tmr+0x14c>)
 801289c:	687a      	ldr	r2, [r7, #4]
 801289e:	4613      	mov	r3, r2
 80128a0:	005b      	lsls	r3, r3, #1
 80128a2:	4413      	add	r3, r2
 80128a4:	00db      	lsls	r3, r3, #3
 80128a6:	440b      	add	r3, r1
 80128a8:	3314      	adds	r3, #20
 80128aa:	781b      	ldrb	r3, [r3, #0]
 80128ac:	2b03      	cmp	r3, #3
 80128ae:	d10a      	bne.n	80128c6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80128b0:	4925      	ldr	r1, [pc, #148]	; (8012948 <etharp_tmr+0x14c>)
 80128b2:	687a      	ldr	r2, [r7, #4]
 80128b4:	4613      	mov	r3, r2
 80128b6:	005b      	lsls	r3, r3, #1
 80128b8:	4413      	add	r3, r2
 80128ba:	00db      	lsls	r3, r3, #3
 80128bc:	440b      	add	r3, r1
 80128be:	3314      	adds	r3, #20
 80128c0:	2204      	movs	r2, #4
 80128c2:	701a      	strb	r2, [r3, #0]
 80128c4:	e034      	b.n	8012930 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80128c6:	4920      	ldr	r1, [pc, #128]	; (8012948 <etharp_tmr+0x14c>)
 80128c8:	687a      	ldr	r2, [r7, #4]
 80128ca:	4613      	mov	r3, r2
 80128cc:	005b      	lsls	r3, r3, #1
 80128ce:	4413      	add	r3, r2
 80128d0:	00db      	lsls	r3, r3, #3
 80128d2:	440b      	add	r3, r1
 80128d4:	3314      	adds	r3, #20
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	2b04      	cmp	r3, #4
 80128da:	d10a      	bne.n	80128f2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80128dc:	491a      	ldr	r1, [pc, #104]	; (8012948 <etharp_tmr+0x14c>)
 80128de:	687a      	ldr	r2, [r7, #4]
 80128e0:	4613      	mov	r3, r2
 80128e2:	005b      	lsls	r3, r3, #1
 80128e4:	4413      	add	r3, r2
 80128e6:	00db      	lsls	r3, r3, #3
 80128e8:	440b      	add	r3, r1
 80128ea:	3314      	adds	r3, #20
 80128ec:	2202      	movs	r2, #2
 80128ee:	701a      	strb	r2, [r3, #0]
 80128f0:	e01e      	b.n	8012930 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80128f2:	4915      	ldr	r1, [pc, #84]	; (8012948 <etharp_tmr+0x14c>)
 80128f4:	687a      	ldr	r2, [r7, #4]
 80128f6:	4613      	mov	r3, r2
 80128f8:	005b      	lsls	r3, r3, #1
 80128fa:	4413      	add	r3, r2
 80128fc:	00db      	lsls	r3, r3, #3
 80128fe:	440b      	add	r3, r1
 8012900:	3314      	adds	r3, #20
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	2b01      	cmp	r3, #1
 8012906:	d113      	bne.n	8012930 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012908:	490f      	ldr	r1, [pc, #60]	; (8012948 <etharp_tmr+0x14c>)
 801290a:	687a      	ldr	r2, [r7, #4]
 801290c:	4613      	mov	r3, r2
 801290e:	005b      	lsls	r3, r3, #1
 8012910:	4413      	add	r3, r2
 8012912:	00db      	lsls	r3, r3, #3
 8012914:	440b      	add	r3, r1
 8012916:	3308      	adds	r3, #8
 8012918:	6818      	ldr	r0, [r3, #0]
 801291a:	687a      	ldr	r2, [r7, #4]
 801291c:	4613      	mov	r3, r2
 801291e:	005b      	lsls	r3, r3, #1
 8012920:	4413      	add	r3, r2
 8012922:	00db      	lsls	r3, r3, #3
 8012924:	4a08      	ldr	r2, [pc, #32]	; (8012948 <etharp_tmr+0x14c>)
 8012926:	4413      	add	r3, r2
 8012928:	3304      	adds	r3, #4
 801292a:	4619      	mov	r1, r3
 801292c:	f000 fe6e 	bl	801360c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	3301      	adds	r3, #1
 8012934:	607b      	str	r3, [r7, #4]
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2b09      	cmp	r3, #9
 801293a:	f77f af65 	ble.w	8012808 <etharp_tmr+0xc>
      }
    }
  }
}
 801293e:	bf00      	nop
 8012940:	3708      	adds	r7, #8
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}
 8012946:	bf00      	nop
 8012948:	20004524 	.word	0x20004524

0801294c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b08a      	sub	sp, #40	; 0x28
 8012950:	af00      	add	r7, sp, #0
 8012952:	60f8      	str	r0, [r7, #12]
 8012954:	460b      	mov	r3, r1
 8012956:	607a      	str	r2, [r7, #4]
 8012958:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801295a:	230a      	movs	r3, #10
 801295c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801295e:	230a      	movs	r3, #10
 8012960:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012962:	230a      	movs	r3, #10
 8012964:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012966:	2300      	movs	r3, #0
 8012968:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801296a:	230a      	movs	r3, #10
 801296c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801296e:	2300      	movs	r3, #0
 8012970:	83bb      	strh	r3, [r7, #28]
 8012972:	2300      	movs	r3, #0
 8012974:	837b      	strh	r3, [r7, #26]
 8012976:	2300      	movs	r3, #0
 8012978:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801297a:	2300      	movs	r3, #0
 801297c:	843b      	strh	r3, [r7, #32]
 801297e:	e0ae      	b.n	8012ade <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012980:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012984:	49a6      	ldr	r1, [pc, #664]	; (8012c20 <etharp_find_entry+0x2d4>)
 8012986:	4613      	mov	r3, r2
 8012988:	005b      	lsls	r3, r3, #1
 801298a:	4413      	add	r3, r2
 801298c:	00db      	lsls	r3, r3, #3
 801298e:	440b      	add	r3, r1
 8012990:	3314      	adds	r3, #20
 8012992:	781b      	ldrb	r3, [r3, #0]
 8012994:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012996:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801299a:	2b0a      	cmp	r3, #10
 801299c:	d105      	bne.n	80129aa <etharp_find_entry+0x5e>
 801299e:	7dfb      	ldrb	r3, [r7, #23]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d102      	bne.n	80129aa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80129a4:	8c3b      	ldrh	r3, [r7, #32]
 80129a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80129a8:	e095      	b.n	8012ad6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80129aa:	7dfb      	ldrb	r3, [r7, #23]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	f000 8092 	beq.w	8012ad6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80129b2:	7dfb      	ldrb	r3, [r7, #23]
 80129b4:	2b01      	cmp	r3, #1
 80129b6:	d009      	beq.n	80129cc <etharp_find_entry+0x80>
 80129b8:	7dfb      	ldrb	r3, [r7, #23]
 80129ba:	2b01      	cmp	r3, #1
 80129bc:	d806      	bhi.n	80129cc <etharp_find_entry+0x80>
 80129be:	4b99      	ldr	r3, [pc, #612]	; (8012c24 <etharp_find_entry+0x2d8>)
 80129c0:	f44f 7292 	mov.w	r2, #292	; 0x124
 80129c4:	4998      	ldr	r1, [pc, #608]	; (8012c28 <etharp_find_entry+0x2dc>)
 80129c6:	4899      	ldr	r0, [pc, #612]	; (8012c2c <etharp_find_entry+0x2e0>)
 80129c8:	f002 fafc 	bl	8014fc4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80129cc:	68fb      	ldr	r3, [r7, #12]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d020      	beq.n	8012a14 <etharp_find_entry+0xc8>
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	6819      	ldr	r1, [r3, #0]
 80129d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129da:	4891      	ldr	r0, [pc, #580]	; (8012c20 <etharp_find_entry+0x2d4>)
 80129dc:	4613      	mov	r3, r2
 80129de:	005b      	lsls	r3, r3, #1
 80129e0:	4413      	add	r3, r2
 80129e2:	00db      	lsls	r3, r3, #3
 80129e4:	4403      	add	r3, r0
 80129e6:	3304      	adds	r3, #4
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	4299      	cmp	r1, r3
 80129ec:	d112      	bne.n	8012a14 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d00c      	beq.n	8012a0e <etharp_find_entry+0xc2>
 80129f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129f8:	4989      	ldr	r1, [pc, #548]	; (8012c20 <etharp_find_entry+0x2d4>)
 80129fa:	4613      	mov	r3, r2
 80129fc:	005b      	lsls	r3, r3, #1
 80129fe:	4413      	add	r3, r2
 8012a00:	00db      	lsls	r3, r3, #3
 8012a02:	440b      	add	r3, r1
 8012a04:	3308      	adds	r3, #8
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	687a      	ldr	r2, [r7, #4]
 8012a0a:	429a      	cmp	r2, r3
 8012a0c:	d102      	bne.n	8012a14 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012a0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012a12:	e100      	b.n	8012c16 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012a14:	7dfb      	ldrb	r3, [r7, #23]
 8012a16:	2b01      	cmp	r3, #1
 8012a18:	d140      	bne.n	8012a9c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012a1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a1e:	4980      	ldr	r1, [pc, #512]	; (8012c20 <etharp_find_entry+0x2d4>)
 8012a20:	4613      	mov	r3, r2
 8012a22:	005b      	lsls	r3, r3, #1
 8012a24:	4413      	add	r3, r2
 8012a26:	00db      	lsls	r3, r3, #3
 8012a28:	440b      	add	r3, r1
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d01a      	beq.n	8012a66 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012a30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a34:	497a      	ldr	r1, [pc, #488]	; (8012c20 <etharp_find_entry+0x2d4>)
 8012a36:	4613      	mov	r3, r2
 8012a38:	005b      	lsls	r3, r3, #1
 8012a3a:	4413      	add	r3, r2
 8012a3c:	00db      	lsls	r3, r3, #3
 8012a3e:	440b      	add	r3, r1
 8012a40:	3312      	adds	r3, #18
 8012a42:	881b      	ldrh	r3, [r3, #0]
 8012a44:	8bba      	ldrh	r2, [r7, #28]
 8012a46:	429a      	cmp	r2, r3
 8012a48:	d845      	bhi.n	8012ad6 <etharp_find_entry+0x18a>
            old_queue = i;
 8012a4a:	8c3b      	ldrh	r3, [r7, #32]
 8012a4c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012a4e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a52:	4973      	ldr	r1, [pc, #460]	; (8012c20 <etharp_find_entry+0x2d4>)
 8012a54:	4613      	mov	r3, r2
 8012a56:	005b      	lsls	r3, r3, #1
 8012a58:	4413      	add	r3, r2
 8012a5a:	00db      	lsls	r3, r3, #3
 8012a5c:	440b      	add	r3, r1
 8012a5e:	3312      	adds	r3, #18
 8012a60:	881b      	ldrh	r3, [r3, #0]
 8012a62:	83bb      	strh	r3, [r7, #28]
 8012a64:	e037      	b.n	8012ad6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012a66:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a6a:	496d      	ldr	r1, [pc, #436]	; (8012c20 <etharp_find_entry+0x2d4>)
 8012a6c:	4613      	mov	r3, r2
 8012a6e:	005b      	lsls	r3, r3, #1
 8012a70:	4413      	add	r3, r2
 8012a72:	00db      	lsls	r3, r3, #3
 8012a74:	440b      	add	r3, r1
 8012a76:	3312      	adds	r3, #18
 8012a78:	881b      	ldrh	r3, [r3, #0]
 8012a7a:	8b7a      	ldrh	r2, [r7, #26]
 8012a7c:	429a      	cmp	r2, r3
 8012a7e:	d82a      	bhi.n	8012ad6 <etharp_find_entry+0x18a>
            old_pending = i;
 8012a80:	8c3b      	ldrh	r3, [r7, #32]
 8012a82:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012a84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a88:	4965      	ldr	r1, [pc, #404]	; (8012c20 <etharp_find_entry+0x2d4>)
 8012a8a:	4613      	mov	r3, r2
 8012a8c:	005b      	lsls	r3, r3, #1
 8012a8e:	4413      	add	r3, r2
 8012a90:	00db      	lsls	r3, r3, #3
 8012a92:	440b      	add	r3, r1
 8012a94:	3312      	adds	r3, #18
 8012a96:	881b      	ldrh	r3, [r3, #0]
 8012a98:	837b      	strh	r3, [r7, #26]
 8012a9a:	e01c      	b.n	8012ad6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012a9c:	7dfb      	ldrb	r3, [r7, #23]
 8012a9e:	2b01      	cmp	r3, #1
 8012aa0:	d919      	bls.n	8012ad6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012aa2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012aa6:	495e      	ldr	r1, [pc, #376]	; (8012c20 <etharp_find_entry+0x2d4>)
 8012aa8:	4613      	mov	r3, r2
 8012aaa:	005b      	lsls	r3, r3, #1
 8012aac:	4413      	add	r3, r2
 8012aae:	00db      	lsls	r3, r3, #3
 8012ab0:	440b      	add	r3, r1
 8012ab2:	3312      	adds	r3, #18
 8012ab4:	881b      	ldrh	r3, [r3, #0]
 8012ab6:	8b3a      	ldrh	r2, [r7, #24]
 8012ab8:	429a      	cmp	r2, r3
 8012aba:	d80c      	bhi.n	8012ad6 <etharp_find_entry+0x18a>
            old_stable = i;
 8012abc:	8c3b      	ldrh	r3, [r7, #32]
 8012abe:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012ac0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ac4:	4956      	ldr	r1, [pc, #344]	; (8012c20 <etharp_find_entry+0x2d4>)
 8012ac6:	4613      	mov	r3, r2
 8012ac8:	005b      	lsls	r3, r3, #1
 8012aca:	4413      	add	r3, r2
 8012acc:	00db      	lsls	r3, r3, #3
 8012ace:	440b      	add	r3, r1
 8012ad0:	3312      	adds	r3, #18
 8012ad2:	881b      	ldrh	r3, [r3, #0]
 8012ad4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012ad6:	8c3b      	ldrh	r3, [r7, #32]
 8012ad8:	3301      	adds	r3, #1
 8012ada:	b29b      	uxth	r3, r3
 8012adc:	843b      	strh	r3, [r7, #32]
 8012ade:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012ae2:	2b09      	cmp	r3, #9
 8012ae4:	f77f af4c 	ble.w	8012980 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012ae8:	7afb      	ldrb	r3, [r7, #11]
 8012aea:	f003 0302 	and.w	r3, r3, #2
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d108      	bne.n	8012b04 <etharp_find_entry+0x1b8>
 8012af2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012af6:	2b0a      	cmp	r3, #10
 8012af8:	d107      	bne.n	8012b0a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012afa:	7afb      	ldrb	r3, [r7, #11]
 8012afc:	f003 0301 	and.w	r3, r3, #1
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d102      	bne.n	8012b0a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012b04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b08:	e085      	b.n	8012c16 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012b0a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012b0e:	2b09      	cmp	r3, #9
 8012b10:	dc02      	bgt.n	8012b18 <etharp_find_entry+0x1cc>
    i = empty;
 8012b12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b14:	843b      	strh	r3, [r7, #32]
 8012b16:	e039      	b.n	8012b8c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012b18:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012b1c:	2b09      	cmp	r3, #9
 8012b1e:	dc14      	bgt.n	8012b4a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012b20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012b22:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012b24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b28:	493d      	ldr	r1, [pc, #244]	; (8012c20 <etharp_find_entry+0x2d4>)
 8012b2a:	4613      	mov	r3, r2
 8012b2c:	005b      	lsls	r3, r3, #1
 8012b2e:	4413      	add	r3, r2
 8012b30:	00db      	lsls	r3, r3, #3
 8012b32:	440b      	add	r3, r1
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d018      	beq.n	8012b6c <etharp_find_entry+0x220>
 8012b3a:	4b3a      	ldr	r3, [pc, #232]	; (8012c24 <etharp_find_entry+0x2d8>)
 8012b3c:	f240 126d 	movw	r2, #365	; 0x16d
 8012b40:	493b      	ldr	r1, [pc, #236]	; (8012c30 <etharp_find_entry+0x2e4>)
 8012b42:	483a      	ldr	r0, [pc, #232]	; (8012c2c <etharp_find_entry+0x2e0>)
 8012b44:	f002 fa3e 	bl	8014fc4 <iprintf>
 8012b48:	e010      	b.n	8012b6c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012b4a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012b4e:	2b09      	cmp	r3, #9
 8012b50:	dc02      	bgt.n	8012b58 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012b52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b54:	843b      	strh	r3, [r7, #32]
 8012b56:	e009      	b.n	8012b6c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012b58:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012b5c:	2b09      	cmp	r3, #9
 8012b5e:	dc02      	bgt.n	8012b66 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012b60:	8bfb      	ldrh	r3, [r7, #30]
 8012b62:	843b      	strh	r3, [r7, #32]
 8012b64:	e002      	b.n	8012b6c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b6a:	e054      	b.n	8012c16 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012b6c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b70:	2b09      	cmp	r3, #9
 8012b72:	dd06      	ble.n	8012b82 <etharp_find_entry+0x236>
 8012b74:	4b2b      	ldr	r3, [pc, #172]	; (8012c24 <etharp_find_entry+0x2d8>)
 8012b76:	f240 127f 	movw	r2, #383	; 0x17f
 8012b7a:	492e      	ldr	r1, [pc, #184]	; (8012c34 <etharp_find_entry+0x2e8>)
 8012b7c:	482b      	ldr	r0, [pc, #172]	; (8012c2c <etharp_find_entry+0x2e0>)
 8012b7e:	f002 fa21 	bl	8014fc4 <iprintf>
    etharp_free_entry(i);
 8012b82:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b86:	4618      	mov	r0, r3
 8012b88:	f7ff fe06 	bl	8012798 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012b8c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b90:	2b09      	cmp	r3, #9
 8012b92:	dd06      	ble.n	8012ba2 <etharp_find_entry+0x256>
 8012b94:	4b23      	ldr	r3, [pc, #140]	; (8012c24 <etharp_find_entry+0x2d8>)
 8012b96:	f240 1283 	movw	r2, #387	; 0x183
 8012b9a:	4926      	ldr	r1, [pc, #152]	; (8012c34 <etharp_find_entry+0x2e8>)
 8012b9c:	4823      	ldr	r0, [pc, #140]	; (8012c2c <etharp_find_entry+0x2e0>)
 8012b9e:	f002 fa11 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012ba2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ba6:	491e      	ldr	r1, [pc, #120]	; (8012c20 <etharp_find_entry+0x2d4>)
 8012ba8:	4613      	mov	r3, r2
 8012baa:	005b      	lsls	r3, r3, #1
 8012bac:	4413      	add	r3, r2
 8012bae:	00db      	lsls	r3, r3, #3
 8012bb0:	440b      	add	r3, r1
 8012bb2:	3314      	adds	r3, #20
 8012bb4:	781b      	ldrb	r3, [r3, #0]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d006      	beq.n	8012bc8 <etharp_find_entry+0x27c>
 8012bba:	4b1a      	ldr	r3, [pc, #104]	; (8012c24 <etharp_find_entry+0x2d8>)
 8012bbc:	f240 1285 	movw	r2, #389	; 0x185
 8012bc0:	491d      	ldr	r1, [pc, #116]	; (8012c38 <etharp_find_entry+0x2ec>)
 8012bc2:	481a      	ldr	r0, [pc, #104]	; (8012c2c <etharp_find_entry+0x2e0>)
 8012bc4:	f002 f9fe 	bl	8014fc4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d00b      	beq.n	8012be6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012bce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	6819      	ldr	r1, [r3, #0]
 8012bd6:	4812      	ldr	r0, [pc, #72]	; (8012c20 <etharp_find_entry+0x2d4>)
 8012bd8:	4613      	mov	r3, r2
 8012bda:	005b      	lsls	r3, r3, #1
 8012bdc:	4413      	add	r3, r2
 8012bde:	00db      	lsls	r3, r3, #3
 8012be0:	4403      	add	r3, r0
 8012be2:	3304      	adds	r3, #4
 8012be4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012be6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bea:	490d      	ldr	r1, [pc, #52]	; (8012c20 <etharp_find_entry+0x2d4>)
 8012bec:	4613      	mov	r3, r2
 8012bee:	005b      	lsls	r3, r3, #1
 8012bf0:	4413      	add	r3, r2
 8012bf2:	00db      	lsls	r3, r3, #3
 8012bf4:	440b      	add	r3, r1
 8012bf6:	3312      	adds	r3, #18
 8012bf8:	2200      	movs	r2, #0
 8012bfa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012bfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c00:	4907      	ldr	r1, [pc, #28]	; (8012c20 <etharp_find_entry+0x2d4>)
 8012c02:	4613      	mov	r3, r2
 8012c04:	005b      	lsls	r3, r3, #1
 8012c06:	4413      	add	r3, r2
 8012c08:	00db      	lsls	r3, r3, #3
 8012c0a:	440b      	add	r3, r1
 8012c0c:	3308      	adds	r3, #8
 8012c0e:	687a      	ldr	r2, [r7, #4]
 8012c10:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012c12:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012c16:	4618      	mov	r0, r3
 8012c18:	3728      	adds	r7, #40	; 0x28
 8012c1a:	46bd      	mov	sp, r7
 8012c1c:	bd80      	pop	{r7, pc}
 8012c1e:	bf00      	nop
 8012c20:	20004524 	.word	0x20004524
 8012c24:	0801850c 	.word	0x0801850c
 8012c28:	08018544 	.word	0x08018544
 8012c2c:	08018584 	.word	0x08018584
 8012c30:	080185ac 	.word	0x080185ac
 8012c34:	080185c4 	.word	0x080185c4
 8012c38:	080185d8 	.word	0x080185d8

08012c3c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b088      	sub	sp, #32
 8012c40:	af02      	add	r7, sp, #8
 8012c42:	60f8      	str	r0, [r7, #12]
 8012c44:	60b9      	str	r1, [r7, #8]
 8012c46:	607a      	str	r2, [r7, #4]
 8012c48:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012c50:	2b06      	cmp	r3, #6
 8012c52:	d006      	beq.n	8012c62 <etharp_update_arp_entry+0x26>
 8012c54:	4b48      	ldr	r3, [pc, #288]	; (8012d78 <etharp_update_arp_entry+0x13c>)
 8012c56:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012c5a:	4948      	ldr	r1, [pc, #288]	; (8012d7c <etharp_update_arp_entry+0x140>)
 8012c5c:	4848      	ldr	r0, [pc, #288]	; (8012d80 <etharp_update_arp_entry+0x144>)
 8012c5e:	f002 f9b1 	bl	8014fc4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012c62:	68bb      	ldr	r3, [r7, #8]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d012      	beq.n	8012c8e <etharp_update_arp_entry+0x52>
 8012c68:	68bb      	ldr	r3, [r7, #8]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d00e      	beq.n	8012c8e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012c70:	68bb      	ldr	r3, [r7, #8]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	68f9      	ldr	r1, [r7, #12]
 8012c76:	4618      	mov	r0, r3
 8012c78:	f001 f8fc 	bl	8013e74 <ip4_addr_isbroadcast_u32>
 8012c7c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d105      	bne.n	8012c8e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012c82:	68bb      	ldr	r3, [r7, #8]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012c8a:	2be0      	cmp	r3, #224	; 0xe0
 8012c8c:	d102      	bne.n	8012c94 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012c8e:	f06f 030f 	mvn.w	r3, #15
 8012c92:	e06c      	b.n	8012d6e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012c94:	78fb      	ldrb	r3, [r7, #3]
 8012c96:	68fa      	ldr	r2, [r7, #12]
 8012c98:	4619      	mov	r1, r3
 8012c9a:	68b8      	ldr	r0, [r7, #8]
 8012c9c:	f7ff fe56 	bl	801294c <etharp_find_entry>
 8012ca0:	4603      	mov	r3, r0
 8012ca2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012ca4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	da02      	bge.n	8012cb2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012cac:	8afb      	ldrh	r3, [r7, #22]
 8012cae:	b25b      	sxtb	r3, r3
 8012cb0:	e05d      	b.n	8012d6e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012cb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cb6:	4933      	ldr	r1, [pc, #204]	; (8012d84 <etharp_update_arp_entry+0x148>)
 8012cb8:	4613      	mov	r3, r2
 8012cba:	005b      	lsls	r3, r3, #1
 8012cbc:	4413      	add	r3, r2
 8012cbe:	00db      	lsls	r3, r3, #3
 8012cc0:	440b      	add	r3, r1
 8012cc2:	3314      	adds	r3, #20
 8012cc4:	2202      	movs	r2, #2
 8012cc6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012cc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ccc:	492d      	ldr	r1, [pc, #180]	; (8012d84 <etharp_update_arp_entry+0x148>)
 8012cce:	4613      	mov	r3, r2
 8012cd0:	005b      	lsls	r3, r3, #1
 8012cd2:	4413      	add	r3, r2
 8012cd4:	00db      	lsls	r3, r3, #3
 8012cd6:	440b      	add	r3, r1
 8012cd8:	3308      	adds	r3, #8
 8012cda:	68fa      	ldr	r2, [r7, #12]
 8012cdc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012cde:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ce2:	4613      	mov	r3, r2
 8012ce4:	005b      	lsls	r3, r3, #1
 8012ce6:	4413      	add	r3, r2
 8012ce8:	00db      	lsls	r3, r3, #3
 8012cea:	3308      	adds	r3, #8
 8012cec:	4a25      	ldr	r2, [pc, #148]	; (8012d84 <etharp_update_arp_entry+0x148>)
 8012cee:	4413      	add	r3, r2
 8012cf0:	3304      	adds	r3, #4
 8012cf2:	2206      	movs	r2, #6
 8012cf4:	6879      	ldr	r1, [r7, #4]
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	f002 f951 	bl	8014f9e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012cfc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d00:	4920      	ldr	r1, [pc, #128]	; (8012d84 <etharp_update_arp_entry+0x148>)
 8012d02:	4613      	mov	r3, r2
 8012d04:	005b      	lsls	r3, r3, #1
 8012d06:	4413      	add	r3, r2
 8012d08:	00db      	lsls	r3, r3, #3
 8012d0a:	440b      	add	r3, r1
 8012d0c:	3312      	adds	r3, #18
 8012d0e:	2200      	movs	r2, #0
 8012d10:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012d12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d16:	491b      	ldr	r1, [pc, #108]	; (8012d84 <etharp_update_arp_entry+0x148>)
 8012d18:	4613      	mov	r3, r2
 8012d1a:	005b      	lsls	r3, r3, #1
 8012d1c:	4413      	add	r3, r2
 8012d1e:	00db      	lsls	r3, r3, #3
 8012d20:	440b      	add	r3, r1
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d021      	beq.n	8012d6c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012d28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d2c:	4915      	ldr	r1, [pc, #84]	; (8012d84 <etharp_update_arp_entry+0x148>)
 8012d2e:	4613      	mov	r3, r2
 8012d30:	005b      	lsls	r3, r3, #1
 8012d32:	4413      	add	r3, r2
 8012d34:	00db      	lsls	r3, r3, #3
 8012d36:	440b      	add	r3, r1
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012d3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d40:	4910      	ldr	r1, [pc, #64]	; (8012d84 <etharp_update_arp_entry+0x148>)
 8012d42:	4613      	mov	r3, r2
 8012d44:	005b      	lsls	r3, r3, #1
 8012d46:	4413      	add	r3, r2
 8012d48:	00db      	lsls	r3, r3, #3
 8012d4a:	440b      	add	r3, r1
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012d56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012d5a:	9300      	str	r3, [sp, #0]
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	6939      	ldr	r1, [r7, #16]
 8012d60:	68f8      	ldr	r0, [r7, #12]
 8012d62:	f001 ff8b 	bl	8014c7c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012d66:	6938      	ldr	r0, [r7, #16]
 8012d68:	f7f8 fee6 	bl	800bb38 <pbuf_free>
  }
  return ERR_OK;
 8012d6c:	2300      	movs	r3, #0
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	3718      	adds	r7, #24
 8012d72:	46bd      	mov	sp, r7
 8012d74:	bd80      	pop	{r7, pc}
 8012d76:	bf00      	nop
 8012d78:	0801850c 	.word	0x0801850c
 8012d7c:	08018604 	.word	0x08018604
 8012d80:	08018584 	.word	0x08018584
 8012d84:	20004524 	.word	0x20004524

08012d88 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b084      	sub	sp, #16
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012d90:	2300      	movs	r3, #0
 8012d92:	60fb      	str	r3, [r7, #12]
 8012d94:	e01e      	b.n	8012dd4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012d96:	4913      	ldr	r1, [pc, #76]	; (8012de4 <etharp_cleanup_netif+0x5c>)
 8012d98:	68fa      	ldr	r2, [r7, #12]
 8012d9a:	4613      	mov	r3, r2
 8012d9c:	005b      	lsls	r3, r3, #1
 8012d9e:	4413      	add	r3, r2
 8012da0:	00db      	lsls	r3, r3, #3
 8012da2:	440b      	add	r3, r1
 8012da4:	3314      	adds	r3, #20
 8012da6:	781b      	ldrb	r3, [r3, #0]
 8012da8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012daa:	7afb      	ldrb	r3, [r7, #11]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d00e      	beq.n	8012dce <etharp_cleanup_netif+0x46>
 8012db0:	490c      	ldr	r1, [pc, #48]	; (8012de4 <etharp_cleanup_netif+0x5c>)
 8012db2:	68fa      	ldr	r2, [r7, #12]
 8012db4:	4613      	mov	r3, r2
 8012db6:	005b      	lsls	r3, r3, #1
 8012db8:	4413      	add	r3, r2
 8012dba:	00db      	lsls	r3, r3, #3
 8012dbc:	440b      	add	r3, r1
 8012dbe:	3308      	adds	r3, #8
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	687a      	ldr	r2, [r7, #4]
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	d102      	bne.n	8012dce <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012dc8:	68f8      	ldr	r0, [r7, #12]
 8012dca:	f7ff fce5 	bl	8012798 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	3301      	adds	r3, #1
 8012dd2:	60fb      	str	r3, [r7, #12]
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	2b09      	cmp	r3, #9
 8012dd8:	dddd      	ble.n	8012d96 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012dda:	bf00      	nop
 8012ddc:	3710      	adds	r7, #16
 8012dde:	46bd      	mov	sp, r7
 8012de0:	bd80      	pop	{r7, pc}
 8012de2:	bf00      	nop
 8012de4:	20004524 	.word	0x20004524

08012de8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012de8:	b5b0      	push	{r4, r5, r7, lr}
 8012dea:	b08a      	sub	sp, #40	; 0x28
 8012dec:	af04      	add	r7, sp, #16
 8012dee:	6078      	str	r0, [r7, #4]
 8012df0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012df2:	683b      	ldr	r3, [r7, #0]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d107      	bne.n	8012e08 <etharp_input+0x20>
 8012df8:	4b3d      	ldr	r3, [pc, #244]	; (8012ef0 <etharp_input+0x108>)
 8012dfa:	f240 228a 	movw	r2, #650	; 0x28a
 8012dfe:	493d      	ldr	r1, [pc, #244]	; (8012ef4 <etharp_input+0x10c>)
 8012e00:	483d      	ldr	r0, [pc, #244]	; (8012ef8 <etharp_input+0x110>)
 8012e02:	f002 f8df 	bl	8014fc4 <iprintf>
 8012e06:	e06f      	b.n	8012ee8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012e0e:	693b      	ldr	r3, [r7, #16]
 8012e10:	881b      	ldrh	r3, [r3, #0]
 8012e12:	b29b      	uxth	r3, r3
 8012e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e18:	d10c      	bne.n	8012e34 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012e1e:	2b06      	cmp	r3, #6
 8012e20:	d108      	bne.n	8012e34 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012e26:	2b04      	cmp	r3, #4
 8012e28:	d104      	bne.n	8012e34 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	885b      	ldrh	r3, [r3, #2]
 8012e2e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012e30:	2b08      	cmp	r3, #8
 8012e32:	d003      	beq.n	8012e3c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f7f8 fe7f 	bl	800bb38 <pbuf_free>
    return;
 8012e3a:	e055      	b.n	8012ee8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012e3c:	693b      	ldr	r3, [r7, #16]
 8012e3e:	330e      	adds	r3, #14
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012e44:	693b      	ldr	r3, [r7, #16]
 8012e46:	3318      	adds	r3, #24
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012e4c:	683b      	ldr	r3, [r7, #0]
 8012e4e:	3304      	adds	r3, #4
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d102      	bne.n	8012e5c <etharp_input+0x74>
    for_us = 0;
 8012e56:	2300      	movs	r3, #0
 8012e58:	75fb      	strb	r3, [r7, #23]
 8012e5a:	e009      	b.n	8012e70 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012e5c:	68ba      	ldr	r2, [r7, #8]
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	3304      	adds	r3, #4
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	429a      	cmp	r2, r3
 8012e66:	bf0c      	ite	eq
 8012e68:	2301      	moveq	r3, #1
 8012e6a:	2300      	movne	r3, #0
 8012e6c:	b2db      	uxtb	r3, r3
 8012e6e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012e70:	693b      	ldr	r3, [r7, #16]
 8012e72:	f103 0208 	add.w	r2, r3, #8
 8012e76:	7dfb      	ldrb	r3, [r7, #23]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d001      	beq.n	8012e80 <etharp_input+0x98>
 8012e7c:	2301      	movs	r3, #1
 8012e7e:	e000      	b.n	8012e82 <etharp_input+0x9a>
 8012e80:	2302      	movs	r3, #2
 8012e82:	f107 010c 	add.w	r1, r7, #12
 8012e86:	6838      	ldr	r0, [r7, #0]
 8012e88:	f7ff fed8 	bl	8012c3c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012e8c:	693b      	ldr	r3, [r7, #16]
 8012e8e:	88db      	ldrh	r3, [r3, #6]
 8012e90:	b29b      	uxth	r3, r3
 8012e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e96:	d003      	beq.n	8012ea0 <etharp_input+0xb8>
 8012e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e9c:	d01e      	beq.n	8012edc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012e9e:	e020      	b.n	8012ee2 <etharp_input+0xfa>
      if (for_us) {
 8012ea0:	7dfb      	ldrb	r3, [r7, #23]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d01c      	beq.n	8012ee0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012eac:	693b      	ldr	r3, [r7, #16]
 8012eae:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012ebc:	693a      	ldr	r2, [r7, #16]
 8012ebe:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012ec0:	2102      	movs	r1, #2
 8012ec2:	9103      	str	r1, [sp, #12]
 8012ec4:	f107 010c 	add.w	r1, r7, #12
 8012ec8:	9102      	str	r1, [sp, #8]
 8012eca:	9201      	str	r2, [sp, #4]
 8012ecc:	9300      	str	r3, [sp, #0]
 8012ece:	462b      	mov	r3, r5
 8012ed0:	4622      	mov	r2, r4
 8012ed2:	4601      	mov	r1, r0
 8012ed4:	6838      	ldr	r0, [r7, #0]
 8012ed6:	f000 faeb 	bl	80134b0 <etharp_raw>
      break;
 8012eda:	e001      	b.n	8012ee0 <etharp_input+0xf8>
      break;
 8012edc:	bf00      	nop
 8012ede:	e000      	b.n	8012ee2 <etharp_input+0xfa>
      break;
 8012ee0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f7f8 fe28 	bl	800bb38 <pbuf_free>
}
 8012ee8:	3718      	adds	r7, #24
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bdb0      	pop	{r4, r5, r7, pc}
 8012eee:	bf00      	nop
 8012ef0:	0801850c 	.word	0x0801850c
 8012ef4:	0801865c 	.word	0x0801865c
 8012ef8:	08018584 	.word	0x08018584

08012efc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b086      	sub	sp, #24
 8012f00:	af02      	add	r7, sp, #8
 8012f02:	60f8      	str	r0, [r7, #12]
 8012f04:	60b9      	str	r1, [r7, #8]
 8012f06:	4613      	mov	r3, r2
 8012f08:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012f0a:	79fa      	ldrb	r2, [r7, #7]
 8012f0c:	4944      	ldr	r1, [pc, #272]	; (8013020 <etharp_output_to_arp_index+0x124>)
 8012f0e:	4613      	mov	r3, r2
 8012f10:	005b      	lsls	r3, r3, #1
 8012f12:	4413      	add	r3, r2
 8012f14:	00db      	lsls	r3, r3, #3
 8012f16:	440b      	add	r3, r1
 8012f18:	3314      	adds	r3, #20
 8012f1a:	781b      	ldrb	r3, [r3, #0]
 8012f1c:	2b01      	cmp	r3, #1
 8012f1e:	d806      	bhi.n	8012f2e <etharp_output_to_arp_index+0x32>
 8012f20:	4b40      	ldr	r3, [pc, #256]	; (8013024 <etharp_output_to_arp_index+0x128>)
 8012f22:	f240 22ef 	movw	r2, #751	; 0x2ef
 8012f26:	4940      	ldr	r1, [pc, #256]	; (8013028 <etharp_output_to_arp_index+0x12c>)
 8012f28:	4840      	ldr	r0, [pc, #256]	; (801302c <etharp_output_to_arp_index+0x130>)
 8012f2a:	f002 f84b 	bl	8014fc4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012f2e:	79fa      	ldrb	r2, [r7, #7]
 8012f30:	493b      	ldr	r1, [pc, #236]	; (8013020 <etharp_output_to_arp_index+0x124>)
 8012f32:	4613      	mov	r3, r2
 8012f34:	005b      	lsls	r3, r3, #1
 8012f36:	4413      	add	r3, r2
 8012f38:	00db      	lsls	r3, r3, #3
 8012f3a:	440b      	add	r3, r1
 8012f3c:	3314      	adds	r3, #20
 8012f3e:	781b      	ldrb	r3, [r3, #0]
 8012f40:	2b02      	cmp	r3, #2
 8012f42:	d153      	bne.n	8012fec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012f44:	79fa      	ldrb	r2, [r7, #7]
 8012f46:	4936      	ldr	r1, [pc, #216]	; (8013020 <etharp_output_to_arp_index+0x124>)
 8012f48:	4613      	mov	r3, r2
 8012f4a:	005b      	lsls	r3, r3, #1
 8012f4c:	4413      	add	r3, r2
 8012f4e:	00db      	lsls	r3, r3, #3
 8012f50:	440b      	add	r3, r1
 8012f52:	3312      	adds	r3, #18
 8012f54:	881b      	ldrh	r3, [r3, #0]
 8012f56:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012f5a:	d919      	bls.n	8012f90 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012f5c:	79fa      	ldrb	r2, [r7, #7]
 8012f5e:	4613      	mov	r3, r2
 8012f60:	005b      	lsls	r3, r3, #1
 8012f62:	4413      	add	r3, r2
 8012f64:	00db      	lsls	r3, r3, #3
 8012f66:	4a2e      	ldr	r2, [pc, #184]	; (8013020 <etharp_output_to_arp_index+0x124>)
 8012f68:	4413      	add	r3, r2
 8012f6a:	3304      	adds	r3, #4
 8012f6c:	4619      	mov	r1, r3
 8012f6e:	68f8      	ldr	r0, [r7, #12]
 8012f70:	f000 fb4c 	bl	801360c <etharp_request>
 8012f74:	4603      	mov	r3, r0
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d138      	bne.n	8012fec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012f7a:	79fa      	ldrb	r2, [r7, #7]
 8012f7c:	4928      	ldr	r1, [pc, #160]	; (8013020 <etharp_output_to_arp_index+0x124>)
 8012f7e:	4613      	mov	r3, r2
 8012f80:	005b      	lsls	r3, r3, #1
 8012f82:	4413      	add	r3, r2
 8012f84:	00db      	lsls	r3, r3, #3
 8012f86:	440b      	add	r3, r1
 8012f88:	3314      	adds	r3, #20
 8012f8a:	2203      	movs	r2, #3
 8012f8c:	701a      	strb	r2, [r3, #0]
 8012f8e:	e02d      	b.n	8012fec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012f90:	79fa      	ldrb	r2, [r7, #7]
 8012f92:	4923      	ldr	r1, [pc, #140]	; (8013020 <etharp_output_to_arp_index+0x124>)
 8012f94:	4613      	mov	r3, r2
 8012f96:	005b      	lsls	r3, r3, #1
 8012f98:	4413      	add	r3, r2
 8012f9a:	00db      	lsls	r3, r3, #3
 8012f9c:	440b      	add	r3, r1
 8012f9e:	3312      	adds	r3, #18
 8012fa0:	881b      	ldrh	r3, [r3, #0]
 8012fa2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012fa6:	d321      	bcc.n	8012fec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012fa8:	79fa      	ldrb	r2, [r7, #7]
 8012faa:	4613      	mov	r3, r2
 8012fac:	005b      	lsls	r3, r3, #1
 8012fae:	4413      	add	r3, r2
 8012fb0:	00db      	lsls	r3, r3, #3
 8012fb2:	4a1b      	ldr	r2, [pc, #108]	; (8013020 <etharp_output_to_arp_index+0x124>)
 8012fb4:	4413      	add	r3, r2
 8012fb6:	1d19      	adds	r1, r3, #4
 8012fb8:	79fa      	ldrb	r2, [r7, #7]
 8012fba:	4613      	mov	r3, r2
 8012fbc:	005b      	lsls	r3, r3, #1
 8012fbe:	4413      	add	r3, r2
 8012fc0:	00db      	lsls	r3, r3, #3
 8012fc2:	3308      	adds	r3, #8
 8012fc4:	4a16      	ldr	r2, [pc, #88]	; (8013020 <etharp_output_to_arp_index+0x124>)
 8012fc6:	4413      	add	r3, r2
 8012fc8:	3304      	adds	r3, #4
 8012fca:	461a      	mov	r2, r3
 8012fcc:	68f8      	ldr	r0, [r7, #12]
 8012fce:	f000 fafb 	bl	80135c8 <etharp_request_dst>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d109      	bne.n	8012fec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012fd8:	79fa      	ldrb	r2, [r7, #7]
 8012fda:	4911      	ldr	r1, [pc, #68]	; (8013020 <etharp_output_to_arp_index+0x124>)
 8012fdc:	4613      	mov	r3, r2
 8012fde:	005b      	lsls	r3, r3, #1
 8012fe0:	4413      	add	r3, r2
 8012fe2:	00db      	lsls	r3, r3, #3
 8012fe4:	440b      	add	r3, r1
 8012fe6:	3314      	adds	r3, #20
 8012fe8:	2203      	movs	r2, #3
 8012fea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8012ff2:	79fa      	ldrb	r2, [r7, #7]
 8012ff4:	4613      	mov	r3, r2
 8012ff6:	005b      	lsls	r3, r3, #1
 8012ff8:	4413      	add	r3, r2
 8012ffa:	00db      	lsls	r3, r3, #3
 8012ffc:	3308      	adds	r3, #8
 8012ffe:	4a08      	ldr	r2, [pc, #32]	; (8013020 <etharp_output_to_arp_index+0x124>)
 8013000:	4413      	add	r3, r2
 8013002:	1d1a      	adds	r2, r3, #4
 8013004:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013008:	9300      	str	r3, [sp, #0]
 801300a:	4613      	mov	r3, r2
 801300c:	460a      	mov	r2, r1
 801300e:	68b9      	ldr	r1, [r7, #8]
 8013010:	68f8      	ldr	r0, [r7, #12]
 8013012:	f001 fe33 	bl	8014c7c <ethernet_output>
 8013016:	4603      	mov	r3, r0
}
 8013018:	4618      	mov	r0, r3
 801301a:	3710      	adds	r7, #16
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}
 8013020:	20004524 	.word	0x20004524
 8013024:	0801850c 	.word	0x0801850c
 8013028:	0801867c 	.word	0x0801867c
 801302c:	08018584 	.word	0x08018584

08013030 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b08a      	sub	sp, #40	; 0x28
 8013034:	af02      	add	r7, sp, #8
 8013036:	60f8      	str	r0, [r7, #12]
 8013038:	60b9      	str	r1, [r7, #8]
 801303a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d106      	bne.n	8013054 <etharp_output+0x24>
 8013046:	4b73      	ldr	r3, [pc, #460]	; (8013214 <etharp_output+0x1e4>)
 8013048:	f240 321e 	movw	r2, #798	; 0x31e
 801304c:	4972      	ldr	r1, [pc, #456]	; (8013218 <etharp_output+0x1e8>)
 801304e:	4873      	ldr	r0, [pc, #460]	; (801321c <etharp_output+0x1ec>)
 8013050:	f001 ffb8 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013054:	68bb      	ldr	r3, [r7, #8]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d106      	bne.n	8013068 <etharp_output+0x38>
 801305a:	4b6e      	ldr	r3, [pc, #440]	; (8013214 <etharp_output+0x1e4>)
 801305c:	f240 321f 	movw	r2, #799	; 0x31f
 8013060:	496f      	ldr	r1, [pc, #444]	; (8013220 <etharp_output+0x1f0>)
 8013062:	486e      	ldr	r0, [pc, #440]	; (801321c <etharp_output+0x1ec>)
 8013064:	f001 ffae 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d106      	bne.n	801307c <etharp_output+0x4c>
 801306e:	4b69      	ldr	r3, [pc, #420]	; (8013214 <etharp_output+0x1e4>)
 8013070:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013074:	496b      	ldr	r1, [pc, #428]	; (8013224 <etharp_output+0x1f4>)
 8013076:	4869      	ldr	r0, [pc, #420]	; (801321c <etharp_output+0x1ec>)
 8013078:	f001 ffa4 	bl	8014fc4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	68f9      	ldr	r1, [r7, #12]
 8013082:	4618      	mov	r0, r3
 8013084:	f000 fef6 	bl	8013e74 <ip4_addr_isbroadcast_u32>
 8013088:	4603      	mov	r3, r0
 801308a:	2b00      	cmp	r3, #0
 801308c:	d002      	beq.n	8013094 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801308e:	4b66      	ldr	r3, [pc, #408]	; (8013228 <etharp_output+0x1f8>)
 8013090:	61fb      	str	r3, [r7, #28]
 8013092:	e0af      	b.n	80131f4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801309c:	2be0      	cmp	r3, #224	; 0xe0
 801309e:	d118      	bne.n	80130d2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80130a0:	2301      	movs	r3, #1
 80130a2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80130a4:	2300      	movs	r3, #0
 80130a6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80130a8:	235e      	movs	r3, #94	; 0x5e
 80130aa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	3301      	adds	r3, #1
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80130b6:	b2db      	uxtb	r3, r3
 80130b8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	3302      	adds	r3, #2
 80130be:	781b      	ldrb	r3, [r3, #0]
 80130c0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	3303      	adds	r3, #3
 80130c6:	781b      	ldrb	r3, [r3, #0]
 80130c8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80130ca:	f107 0310 	add.w	r3, r7, #16
 80130ce:	61fb      	str	r3, [r7, #28]
 80130d0:	e090      	b.n	80131f4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	681a      	ldr	r2, [r3, #0]
 80130d6:	68fb      	ldr	r3, [r7, #12]
 80130d8:	3304      	adds	r3, #4
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	405a      	eors	r2, r3
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	3308      	adds	r3, #8
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	4013      	ands	r3, r2
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d012      	beq.n	8013110 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80130f0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80130f4:	4293      	cmp	r3, r2
 80130f6:	d00b      	beq.n	8013110 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	330c      	adds	r3, #12
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d003      	beq.n	801310a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	330c      	adds	r3, #12
 8013106:	61bb      	str	r3, [r7, #24]
 8013108:	e002      	b.n	8013110 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801310a:	f06f 0303 	mvn.w	r3, #3
 801310e:	e07d      	b.n	801320c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013110:	4b46      	ldr	r3, [pc, #280]	; (801322c <etharp_output+0x1fc>)
 8013112:	781b      	ldrb	r3, [r3, #0]
 8013114:	4619      	mov	r1, r3
 8013116:	4a46      	ldr	r2, [pc, #280]	; (8013230 <etharp_output+0x200>)
 8013118:	460b      	mov	r3, r1
 801311a:	005b      	lsls	r3, r3, #1
 801311c:	440b      	add	r3, r1
 801311e:	00db      	lsls	r3, r3, #3
 8013120:	4413      	add	r3, r2
 8013122:	3314      	adds	r3, #20
 8013124:	781b      	ldrb	r3, [r3, #0]
 8013126:	2b01      	cmp	r3, #1
 8013128:	d925      	bls.n	8013176 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801312a:	4b40      	ldr	r3, [pc, #256]	; (801322c <etharp_output+0x1fc>)
 801312c:	781b      	ldrb	r3, [r3, #0]
 801312e:	4619      	mov	r1, r3
 8013130:	4a3f      	ldr	r2, [pc, #252]	; (8013230 <etharp_output+0x200>)
 8013132:	460b      	mov	r3, r1
 8013134:	005b      	lsls	r3, r3, #1
 8013136:	440b      	add	r3, r1
 8013138:	00db      	lsls	r3, r3, #3
 801313a:	4413      	add	r3, r2
 801313c:	3308      	adds	r3, #8
 801313e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013140:	68fa      	ldr	r2, [r7, #12]
 8013142:	429a      	cmp	r2, r3
 8013144:	d117      	bne.n	8013176 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013146:	69bb      	ldr	r3, [r7, #24]
 8013148:	681a      	ldr	r2, [r3, #0]
 801314a:	4b38      	ldr	r3, [pc, #224]	; (801322c <etharp_output+0x1fc>)
 801314c:	781b      	ldrb	r3, [r3, #0]
 801314e:	4618      	mov	r0, r3
 8013150:	4937      	ldr	r1, [pc, #220]	; (8013230 <etharp_output+0x200>)
 8013152:	4603      	mov	r3, r0
 8013154:	005b      	lsls	r3, r3, #1
 8013156:	4403      	add	r3, r0
 8013158:	00db      	lsls	r3, r3, #3
 801315a:	440b      	add	r3, r1
 801315c:	3304      	adds	r3, #4
 801315e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013160:	429a      	cmp	r2, r3
 8013162:	d108      	bne.n	8013176 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013164:	4b31      	ldr	r3, [pc, #196]	; (801322c <etharp_output+0x1fc>)
 8013166:	781b      	ldrb	r3, [r3, #0]
 8013168:	461a      	mov	r2, r3
 801316a:	68b9      	ldr	r1, [r7, #8]
 801316c:	68f8      	ldr	r0, [r7, #12]
 801316e:	f7ff fec5 	bl	8012efc <etharp_output_to_arp_index>
 8013172:	4603      	mov	r3, r0
 8013174:	e04a      	b.n	801320c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013176:	2300      	movs	r3, #0
 8013178:	75fb      	strb	r3, [r7, #23]
 801317a:	e031      	b.n	80131e0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801317c:	7dfa      	ldrb	r2, [r7, #23]
 801317e:	492c      	ldr	r1, [pc, #176]	; (8013230 <etharp_output+0x200>)
 8013180:	4613      	mov	r3, r2
 8013182:	005b      	lsls	r3, r3, #1
 8013184:	4413      	add	r3, r2
 8013186:	00db      	lsls	r3, r3, #3
 8013188:	440b      	add	r3, r1
 801318a:	3314      	adds	r3, #20
 801318c:	781b      	ldrb	r3, [r3, #0]
 801318e:	2b01      	cmp	r3, #1
 8013190:	d923      	bls.n	80131da <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013192:	7dfa      	ldrb	r2, [r7, #23]
 8013194:	4926      	ldr	r1, [pc, #152]	; (8013230 <etharp_output+0x200>)
 8013196:	4613      	mov	r3, r2
 8013198:	005b      	lsls	r3, r3, #1
 801319a:	4413      	add	r3, r2
 801319c:	00db      	lsls	r3, r3, #3
 801319e:	440b      	add	r3, r1
 80131a0:	3308      	adds	r3, #8
 80131a2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80131a4:	68fa      	ldr	r2, [r7, #12]
 80131a6:	429a      	cmp	r2, r3
 80131a8:	d117      	bne.n	80131da <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80131aa:	69bb      	ldr	r3, [r7, #24]
 80131ac:	6819      	ldr	r1, [r3, #0]
 80131ae:	7dfa      	ldrb	r2, [r7, #23]
 80131b0:	481f      	ldr	r0, [pc, #124]	; (8013230 <etharp_output+0x200>)
 80131b2:	4613      	mov	r3, r2
 80131b4:	005b      	lsls	r3, r3, #1
 80131b6:	4413      	add	r3, r2
 80131b8:	00db      	lsls	r3, r3, #3
 80131ba:	4403      	add	r3, r0
 80131bc:	3304      	adds	r3, #4
 80131be:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80131c0:	4299      	cmp	r1, r3
 80131c2:	d10a      	bne.n	80131da <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80131c4:	4a19      	ldr	r2, [pc, #100]	; (801322c <etharp_output+0x1fc>)
 80131c6:	7dfb      	ldrb	r3, [r7, #23]
 80131c8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80131ca:	7dfb      	ldrb	r3, [r7, #23]
 80131cc:	461a      	mov	r2, r3
 80131ce:	68b9      	ldr	r1, [r7, #8]
 80131d0:	68f8      	ldr	r0, [r7, #12]
 80131d2:	f7ff fe93 	bl	8012efc <etharp_output_to_arp_index>
 80131d6:	4603      	mov	r3, r0
 80131d8:	e018      	b.n	801320c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80131da:	7dfb      	ldrb	r3, [r7, #23]
 80131dc:	3301      	adds	r3, #1
 80131de:	75fb      	strb	r3, [r7, #23]
 80131e0:	7dfb      	ldrb	r3, [r7, #23]
 80131e2:	2b09      	cmp	r3, #9
 80131e4:	d9ca      	bls.n	801317c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80131e6:	68ba      	ldr	r2, [r7, #8]
 80131e8:	69b9      	ldr	r1, [r7, #24]
 80131ea:	68f8      	ldr	r0, [r7, #12]
 80131ec:	f000 f822 	bl	8013234 <etharp_query>
 80131f0:	4603      	mov	r3, r0
 80131f2:	e00b      	b.n	801320c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80131fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80131fe:	9300      	str	r3, [sp, #0]
 8013200:	69fb      	ldr	r3, [r7, #28]
 8013202:	68b9      	ldr	r1, [r7, #8]
 8013204:	68f8      	ldr	r0, [r7, #12]
 8013206:	f001 fd39 	bl	8014c7c <ethernet_output>
 801320a:	4603      	mov	r3, r0
}
 801320c:	4618      	mov	r0, r3
 801320e:	3720      	adds	r7, #32
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}
 8013214:	0801850c 	.word	0x0801850c
 8013218:	0801865c 	.word	0x0801865c
 801321c:	08018584 	.word	0x08018584
 8013220:	080186ac 	.word	0x080186ac
 8013224:	0801864c 	.word	0x0801864c
 8013228:	0802983c 	.word	0x0802983c
 801322c:	20004614 	.word	0x20004614
 8013230:	20004524 	.word	0x20004524

08013234 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b08c      	sub	sp, #48	; 0x30
 8013238:	af02      	add	r7, sp, #8
 801323a:	60f8      	str	r0, [r7, #12]
 801323c:	60b9      	str	r1, [r7, #8]
 801323e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	3326      	adds	r3, #38	; 0x26
 8013244:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8013246:	23ff      	movs	r3, #255	; 0xff
 8013248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801324c:	2300      	movs	r3, #0
 801324e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013250:	68bb      	ldr	r3, [r7, #8]
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	68f9      	ldr	r1, [r7, #12]
 8013256:	4618      	mov	r0, r3
 8013258:	f000 fe0c 	bl	8013e74 <ip4_addr_isbroadcast_u32>
 801325c:	4603      	mov	r3, r0
 801325e:	2b00      	cmp	r3, #0
 8013260:	d10c      	bne.n	801327c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801326a:	2be0      	cmp	r3, #224	; 0xe0
 801326c:	d006      	beq.n	801327c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801326e:	68bb      	ldr	r3, [r7, #8]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d003      	beq.n	801327c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8013274:	68bb      	ldr	r3, [r7, #8]
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d102      	bne.n	8013282 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801327c:	f06f 030f 	mvn.w	r3, #15
 8013280:	e102      	b.n	8013488 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8013282:	68fa      	ldr	r2, [r7, #12]
 8013284:	2101      	movs	r1, #1
 8013286:	68b8      	ldr	r0, [r7, #8]
 8013288:	f7ff fb60 	bl	801294c <etharp_find_entry>
 801328c:	4603      	mov	r3, r0
 801328e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013290:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013294:	2b00      	cmp	r3, #0
 8013296:	da02      	bge.n	801329e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013298:	8a7b      	ldrh	r3, [r7, #18]
 801329a:	b25b      	sxtb	r3, r3
 801329c:	e0f4      	b.n	8013488 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801329e:	8a7b      	ldrh	r3, [r7, #18]
 80132a0:	2b7e      	cmp	r3, #126	; 0x7e
 80132a2:	d906      	bls.n	80132b2 <etharp_query+0x7e>
 80132a4:	4b7a      	ldr	r3, [pc, #488]	; (8013490 <etharp_query+0x25c>)
 80132a6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80132aa:	497a      	ldr	r1, [pc, #488]	; (8013494 <etharp_query+0x260>)
 80132ac:	487a      	ldr	r0, [pc, #488]	; (8013498 <etharp_query+0x264>)
 80132ae:	f001 fe89 	bl	8014fc4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80132b2:	8a7b      	ldrh	r3, [r7, #18]
 80132b4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80132b6:	7c7a      	ldrb	r2, [r7, #17]
 80132b8:	4978      	ldr	r1, [pc, #480]	; (801349c <etharp_query+0x268>)
 80132ba:	4613      	mov	r3, r2
 80132bc:	005b      	lsls	r3, r3, #1
 80132be:	4413      	add	r3, r2
 80132c0:	00db      	lsls	r3, r3, #3
 80132c2:	440b      	add	r3, r1
 80132c4:	3314      	adds	r3, #20
 80132c6:	781b      	ldrb	r3, [r3, #0]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d115      	bne.n	80132f8 <etharp_query+0xc4>
    is_new_entry = 1;
 80132cc:	2301      	movs	r3, #1
 80132ce:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80132d0:	7c7a      	ldrb	r2, [r7, #17]
 80132d2:	4972      	ldr	r1, [pc, #456]	; (801349c <etharp_query+0x268>)
 80132d4:	4613      	mov	r3, r2
 80132d6:	005b      	lsls	r3, r3, #1
 80132d8:	4413      	add	r3, r2
 80132da:	00db      	lsls	r3, r3, #3
 80132dc:	440b      	add	r3, r1
 80132de:	3314      	adds	r3, #20
 80132e0:	2201      	movs	r2, #1
 80132e2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80132e4:	7c7a      	ldrb	r2, [r7, #17]
 80132e6:	496d      	ldr	r1, [pc, #436]	; (801349c <etharp_query+0x268>)
 80132e8:	4613      	mov	r3, r2
 80132ea:	005b      	lsls	r3, r3, #1
 80132ec:	4413      	add	r3, r2
 80132ee:	00db      	lsls	r3, r3, #3
 80132f0:	440b      	add	r3, r1
 80132f2:	3308      	adds	r3, #8
 80132f4:	68fa      	ldr	r2, [r7, #12]
 80132f6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80132f8:	7c7a      	ldrb	r2, [r7, #17]
 80132fa:	4968      	ldr	r1, [pc, #416]	; (801349c <etharp_query+0x268>)
 80132fc:	4613      	mov	r3, r2
 80132fe:	005b      	lsls	r3, r3, #1
 8013300:	4413      	add	r3, r2
 8013302:	00db      	lsls	r3, r3, #3
 8013304:	440b      	add	r3, r1
 8013306:	3314      	adds	r3, #20
 8013308:	781b      	ldrb	r3, [r3, #0]
 801330a:	2b01      	cmp	r3, #1
 801330c:	d011      	beq.n	8013332 <etharp_query+0xfe>
 801330e:	7c7a      	ldrb	r2, [r7, #17]
 8013310:	4962      	ldr	r1, [pc, #392]	; (801349c <etharp_query+0x268>)
 8013312:	4613      	mov	r3, r2
 8013314:	005b      	lsls	r3, r3, #1
 8013316:	4413      	add	r3, r2
 8013318:	00db      	lsls	r3, r3, #3
 801331a:	440b      	add	r3, r1
 801331c:	3314      	adds	r3, #20
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	2b01      	cmp	r3, #1
 8013322:	d806      	bhi.n	8013332 <etharp_query+0xfe>
 8013324:	4b5a      	ldr	r3, [pc, #360]	; (8013490 <etharp_query+0x25c>)
 8013326:	f240 32cf 	movw	r2, #975	; 0x3cf
 801332a:	495d      	ldr	r1, [pc, #372]	; (80134a0 <etharp_query+0x26c>)
 801332c:	485a      	ldr	r0, [pc, #360]	; (8013498 <etharp_query+0x264>)
 801332e:	f001 fe49 	bl	8014fc4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013332:	6a3b      	ldr	r3, [r7, #32]
 8013334:	2b00      	cmp	r3, #0
 8013336:	d102      	bne.n	801333e <etharp_query+0x10a>
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d10c      	bne.n	8013358 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801333e:	68b9      	ldr	r1, [r7, #8]
 8013340:	68f8      	ldr	r0, [r7, #12]
 8013342:	f000 f963 	bl	801360c <etharp_request>
 8013346:	4603      	mov	r3, r0
 8013348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d102      	bne.n	8013358 <etharp_query+0x124>
      return result;
 8013352:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013356:	e097      	b.n	8013488 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d106      	bne.n	801336c <etharp_query+0x138>
 801335e:	4b4c      	ldr	r3, [pc, #304]	; (8013490 <etharp_query+0x25c>)
 8013360:	f240 32e1 	movw	r2, #993	; 0x3e1
 8013364:	494f      	ldr	r1, [pc, #316]	; (80134a4 <etharp_query+0x270>)
 8013366:	484c      	ldr	r0, [pc, #304]	; (8013498 <etharp_query+0x264>)
 8013368:	f001 fe2c 	bl	8014fc4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801336c:	7c7a      	ldrb	r2, [r7, #17]
 801336e:	494b      	ldr	r1, [pc, #300]	; (801349c <etharp_query+0x268>)
 8013370:	4613      	mov	r3, r2
 8013372:	005b      	lsls	r3, r3, #1
 8013374:	4413      	add	r3, r2
 8013376:	00db      	lsls	r3, r3, #3
 8013378:	440b      	add	r3, r1
 801337a:	3314      	adds	r3, #20
 801337c:	781b      	ldrb	r3, [r3, #0]
 801337e:	2b01      	cmp	r3, #1
 8013380:	d918      	bls.n	80133b4 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8013382:	4a49      	ldr	r2, [pc, #292]	; (80134a8 <etharp_query+0x274>)
 8013384:	7c7b      	ldrb	r3, [r7, #17]
 8013386:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013388:	7c7a      	ldrb	r2, [r7, #17]
 801338a:	4613      	mov	r3, r2
 801338c:	005b      	lsls	r3, r3, #1
 801338e:	4413      	add	r3, r2
 8013390:	00db      	lsls	r3, r3, #3
 8013392:	3308      	adds	r3, #8
 8013394:	4a41      	ldr	r2, [pc, #260]	; (801349c <etharp_query+0x268>)
 8013396:	4413      	add	r3, r2
 8013398:	1d1a      	adds	r2, r3, #4
 801339a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801339e:	9300      	str	r3, [sp, #0]
 80133a0:	4613      	mov	r3, r2
 80133a2:	697a      	ldr	r2, [r7, #20]
 80133a4:	6879      	ldr	r1, [r7, #4]
 80133a6:	68f8      	ldr	r0, [r7, #12]
 80133a8:	f001 fc68 	bl	8014c7c <ethernet_output>
 80133ac:	4603      	mov	r3, r0
 80133ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80133b2:	e067      	b.n	8013484 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80133b4:	7c7a      	ldrb	r2, [r7, #17]
 80133b6:	4939      	ldr	r1, [pc, #228]	; (801349c <etharp_query+0x268>)
 80133b8:	4613      	mov	r3, r2
 80133ba:	005b      	lsls	r3, r3, #1
 80133bc:	4413      	add	r3, r2
 80133be:	00db      	lsls	r3, r3, #3
 80133c0:	440b      	add	r3, r1
 80133c2:	3314      	adds	r3, #20
 80133c4:	781b      	ldrb	r3, [r3, #0]
 80133c6:	2b01      	cmp	r3, #1
 80133c8:	d15c      	bne.n	8013484 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80133ca:	2300      	movs	r3, #0
 80133cc:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	61fb      	str	r3, [r7, #28]
    while (p) {
 80133d2:	e01c      	b.n	801340e <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80133d4:	69fb      	ldr	r3, [r7, #28]
 80133d6:	895a      	ldrh	r2, [r3, #10]
 80133d8:	69fb      	ldr	r3, [r7, #28]
 80133da:	891b      	ldrh	r3, [r3, #8]
 80133dc:	429a      	cmp	r2, r3
 80133de:	d10a      	bne.n	80133f6 <etharp_query+0x1c2>
 80133e0:	69fb      	ldr	r3, [r7, #28]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d006      	beq.n	80133f6 <etharp_query+0x1c2>
 80133e8:	4b29      	ldr	r3, [pc, #164]	; (8013490 <etharp_query+0x25c>)
 80133ea:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80133ee:	492f      	ldr	r1, [pc, #188]	; (80134ac <etharp_query+0x278>)
 80133f0:	4829      	ldr	r0, [pc, #164]	; (8013498 <etharp_query+0x264>)
 80133f2:	f001 fde7 	bl	8014fc4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80133f6:	69fb      	ldr	r3, [r7, #28]
 80133f8:	7b1b      	ldrb	r3, [r3, #12]
 80133fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d002      	beq.n	8013408 <etharp_query+0x1d4>
        copy_needed = 1;
 8013402:	2301      	movs	r3, #1
 8013404:	61bb      	str	r3, [r7, #24]
        break;
 8013406:	e005      	b.n	8013414 <etharp_query+0x1e0>
      }
      p = p->next;
 8013408:	69fb      	ldr	r3, [r7, #28]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801340e:	69fb      	ldr	r3, [r7, #28]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d1df      	bne.n	80133d4 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8013414:	69bb      	ldr	r3, [r7, #24]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d007      	beq.n	801342a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801341a:	687a      	ldr	r2, [r7, #4]
 801341c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013420:	200e      	movs	r0, #14
 8013422:	f7f8 fdf1 	bl	800c008 <pbuf_clone>
 8013426:	61f8      	str	r0, [r7, #28]
 8013428:	e004      	b.n	8013434 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801342e:	69f8      	ldr	r0, [r7, #28]
 8013430:	f7f8 fc28 	bl	800bc84 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013434:	69fb      	ldr	r3, [r7, #28]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d021      	beq.n	801347e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801343a:	7c7a      	ldrb	r2, [r7, #17]
 801343c:	4917      	ldr	r1, [pc, #92]	; (801349c <etharp_query+0x268>)
 801343e:	4613      	mov	r3, r2
 8013440:	005b      	lsls	r3, r3, #1
 8013442:	4413      	add	r3, r2
 8013444:	00db      	lsls	r3, r3, #3
 8013446:	440b      	add	r3, r1
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d00a      	beq.n	8013464 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801344e:	7c7a      	ldrb	r2, [r7, #17]
 8013450:	4912      	ldr	r1, [pc, #72]	; (801349c <etharp_query+0x268>)
 8013452:	4613      	mov	r3, r2
 8013454:	005b      	lsls	r3, r3, #1
 8013456:	4413      	add	r3, r2
 8013458:	00db      	lsls	r3, r3, #3
 801345a:	440b      	add	r3, r1
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	4618      	mov	r0, r3
 8013460:	f7f8 fb6a 	bl	800bb38 <pbuf_free>
      }
      arp_table[i].q = p;
 8013464:	7c7a      	ldrb	r2, [r7, #17]
 8013466:	490d      	ldr	r1, [pc, #52]	; (801349c <etharp_query+0x268>)
 8013468:	4613      	mov	r3, r2
 801346a:	005b      	lsls	r3, r3, #1
 801346c:	4413      	add	r3, r2
 801346e:	00db      	lsls	r3, r3, #3
 8013470:	440b      	add	r3, r1
 8013472:	69fa      	ldr	r2, [r7, #28]
 8013474:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8013476:	2300      	movs	r3, #0
 8013478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801347c:	e002      	b.n	8013484 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801347e:	23ff      	movs	r3, #255	; 0xff
 8013480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8013484:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013488:	4618      	mov	r0, r3
 801348a:	3728      	adds	r7, #40	; 0x28
 801348c:	46bd      	mov	sp, r7
 801348e:	bd80      	pop	{r7, pc}
 8013490:	0801850c 	.word	0x0801850c
 8013494:	080186b8 	.word	0x080186b8
 8013498:	08018584 	.word	0x08018584
 801349c:	20004524 	.word	0x20004524
 80134a0:	080186c8 	.word	0x080186c8
 80134a4:	080186ac 	.word	0x080186ac
 80134a8:	20004614 	.word	0x20004614
 80134ac:	080186f0 	.word	0x080186f0

080134b0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b08a      	sub	sp, #40	; 0x28
 80134b4:	af02      	add	r7, sp, #8
 80134b6:	60f8      	str	r0, [r7, #12]
 80134b8:	60b9      	str	r1, [r7, #8]
 80134ba:	607a      	str	r2, [r7, #4]
 80134bc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80134be:	2300      	movs	r3, #0
 80134c0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d106      	bne.n	80134d6 <etharp_raw+0x26>
 80134c8:	4b3a      	ldr	r3, [pc, #232]	; (80135b4 <etharp_raw+0x104>)
 80134ca:	f240 4257 	movw	r2, #1111	; 0x457
 80134ce:	493a      	ldr	r1, [pc, #232]	; (80135b8 <etharp_raw+0x108>)
 80134d0:	483a      	ldr	r0, [pc, #232]	; (80135bc <etharp_raw+0x10c>)
 80134d2:	f001 fd77 	bl	8014fc4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80134d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80134da:	211c      	movs	r1, #28
 80134dc:	200e      	movs	r0, #14
 80134de:	f7f8 f84b 	bl	800b578 <pbuf_alloc>
 80134e2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80134e4:	69bb      	ldr	r3, [r7, #24]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d102      	bne.n	80134f0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80134ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134ee:	e05d      	b.n	80135ac <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80134f0:	69bb      	ldr	r3, [r7, #24]
 80134f2:	895b      	ldrh	r3, [r3, #10]
 80134f4:	2b1b      	cmp	r3, #27
 80134f6:	d806      	bhi.n	8013506 <etharp_raw+0x56>
 80134f8:	4b2e      	ldr	r3, [pc, #184]	; (80135b4 <etharp_raw+0x104>)
 80134fa:	f240 4263 	movw	r2, #1123	; 0x463
 80134fe:	4930      	ldr	r1, [pc, #192]	; (80135c0 <etharp_raw+0x110>)
 8013500:	482e      	ldr	r0, [pc, #184]	; (80135bc <etharp_raw+0x10c>)
 8013502:	f001 fd5f 	bl	8014fc4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013506:	69bb      	ldr	r3, [r7, #24]
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801350c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801350e:	4618      	mov	r0, r3
 8013510:	f7f6 ff34 	bl	800a37c <lwip_htons>
 8013514:	4603      	mov	r3, r0
 8013516:	461a      	mov	r2, r3
 8013518:	697b      	ldr	r3, [r7, #20]
 801351a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013522:	2b06      	cmp	r3, #6
 8013524:	d006      	beq.n	8013534 <etharp_raw+0x84>
 8013526:	4b23      	ldr	r3, [pc, #140]	; (80135b4 <etharp_raw+0x104>)
 8013528:	f240 426a 	movw	r2, #1130	; 0x46a
 801352c:	4925      	ldr	r1, [pc, #148]	; (80135c4 <etharp_raw+0x114>)
 801352e:	4823      	ldr	r0, [pc, #140]	; (80135bc <etharp_raw+0x10c>)
 8013530:	f001 fd48 	bl	8014fc4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013534:	697b      	ldr	r3, [r7, #20]
 8013536:	3308      	adds	r3, #8
 8013538:	2206      	movs	r2, #6
 801353a:	6839      	ldr	r1, [r7, #0]
 801353c:	4618      	mov	r0, r3
 801353e:	f001 fd2e 	bl	8014f9e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8013542:	697b      	ldr	r3, [r7, #20]
 8013544:	3312      	adds	r3, #18
 8013546:	2206      	movs	r2, #6
 8013548:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801354a:	4618      	mov	r0, r3
 801354c:	f001 fd27 	bl	8014f9e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013550:	697b      	ldr	r3, [r7, #20]
 8013552:	330e      	adds	r3, #14
 8013554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013556:	6812      	ldr	r2, [r2, #0]
 8013558:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801355a:	697b      	ldr	r3, [r7, #20]
 801355c:	3318      	adds	r3, #24
 801355e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013560:	6812      	ldr	r2, [r2, #0]
 8013562:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8013564:	697b      	ldr	r3, [r7, #20]
 8013566:	2200      	movs	r2, #0
 8013568:	701a      	strb	r2, [r3, #0]
 801356a:	2200      	movs	r2, #0
 801356c:	f042 0201 	orr.w	r2, r2, #1
 8013570:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	2200      	movs	r2, #0
 8013576:	f042 0208 	orr.w	r2, r2, #8
 801357a:	709a      	strb	r2, [r3, #2]
 801357c:	2200      	movs	r2, #0
 801357e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013580:	697b      	ldr	r3, [r7, #20]
 8013582:	2206      	movs	r2, #6
 8013584:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8013586:	697b      	ldr	r3, [r7, #20]
 8013588:	2204      	movs	r2, #4
 801358a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801358c:	f640 0306 	movw	r3, #2054	; 0x806
 8013590:	9300      	str	r3, [sp, #0]
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	68ba      	ldr	r2, [r7, #8]
 8013596:	69b9      	ldr	r1, [r7, #24]
 8013598:	68f8      	ldr	r0, [r7, #12]
 801359a:	f001 fb6f 	bl	8014c7c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801359e:	69b8      	ldr	r0, [r7, #24]
 80135a0:	f7f8 faca 	bl	800bb38 <pbuf_free>
  p = NULL;
 80135a4:	2300      	movs	r3, #0
 80135a6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80135a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3720      	adds	r7, #32
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}
 80135b4:	0801850c 	.word	0x0801850c
 80135b8:	0801865c 	.word	0x0801865c
 80135bc:	08018584 	.word	0x08018584
 80135c0:	0801870c 	.word	0x0801870c
 80135c4:	08018740 	.word	0x08018740

080135c8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b088      	sub	sp, #32
 80135cc:	af04      	add	r7, sp, #16
 80135ce:	60f8      	str	r0, [r7, #12]
 80135d0:	60b9      	str	r1, [r7, #8]
 80135d2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80135e4:	2201      	movs	r2, #1
 80135e6:	9203      	str	r2, [sp, #12]
 80135e8:	68ba      	ldr	r2, [r7, #8]
 80135ea:	9202      	str	r2, [sp, #8]
 80135ec:	4a06      	ldr	r2, [pc, #24]	; (8013608 <etharp_request_dst+0x40>)
 80135ee:	9201      	str	r2, [sp, #4]
 80135f0:	9300      	str	r3, [sp, #0]
 80135f2:	4603      	mov	r3, r0
 80135f4:	687a      	ldr	r2, [r7, #4]
 80135f6:	68f8      	ldr	r0, [r7, #12]
 80135f8:	f7ff ff5a 	bl	80134b0 <etharp_raw>
 80135fc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3710      	adds	r7, #16
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	08029844 	.word	0x08029844

0801360c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801360c:	b580      	push	{r7, lr}
 801360e:	b082      	sub	sp, #8
 8013610:	af00      	add	r7, sp, #0
 8013612:	6078      	str	r0, [r7, #4]
 8013614:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013616:	4a05      	ldr	r2, [pc, #20]	; (801362c <etharp_request+0x20>)
 8013618:	6839      	ldr	r1, [r7, #0]
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f7ff ffd4 	bl	80135c8 <etharp_request_dst>
 8013620:	4603      	mov	r3, r0
}
 8013622:	4618      	mov	r0, r3
 8013624:	3708      	adds	r7, #8
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}
 801362a:	bf00      	nop
 801362c:	0802983c 	.word	0x0802983c

08013630 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b08e      	sub	sp, #56	; 0x38
 8013634:	af04      	add	r7, sp, #16
 8013636:	6078      	str	r0, [r7, #4]
 8013638:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801363a:	4b79      	ldr	r3, [pc, #484]	; (8013820 <icmp_input+0x1f0>)
 801363c:	689b      	ldr	r3, [r3, #8]
 801363e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013642:	781b      	ldrb	r3, [r3, #0]
 8013644:	f003 030f 	and.w	r3, r3, #15
 8013648:	b2db      	uxtb	r3, r3
 801364a:	009b      	lsls	r3, r3, #2
 801364c:	b2db      	uxtb	r3, r3
 801364e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013650:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013652:	2b13      	cmp	r3, #19
 8013654:	f240 80cd 	bls.w	80137f2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	895b      	ldrh	r3, [r3, #10]
 801365c:	2b03      	cmp	r3, #3
 801365e:	f240 80ca 	bls.w	80137f6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	685b      	ldr	r3, [r3, #4]
 8013666:	781b      	ldrb	r3, [r3, #0]
 8013668:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801366c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013670:	2b00      	cmp	r3, #0
 8013672:	f000 80b7 	beq.w	80137e4 <icmp_input+0x1b4>
 8013676:	2b08      	cmp	r3, #8
 8013678:	f040 80b7 	bne.w	80137ea <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801367c:	4b69      	ldr	r3, [pc, #420]	; (8013824 <icmp_input+0x1f4>)
 801367e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013680:	4b67      	ldr	r3, [pc, #412]	; (8013820 <icmp_input+0x1f0>)
 8013682:	695b      	ldr	r3, [r3, #20]
 8013684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013688:	2be0      	cmp	r3, #224	; 0xe0
 801368a:	f000 80bb 	beq.w	8013804 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801368e:	4b64      	ldr	r3, [pc, #400]	; (8013820 <icmp_input+0x1f0>)
 8013690:	695a      	ldr	r2, [r3, #20]
 8013692:	4b63      	ldr	r3, [pc, #396]	; (8013820 <icmp_input+0x1f0>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	4619      	mov	r1, r3
 8013698:	4610      	mov	r0, r2
 801369a:	f000 fbeb 	bl	8013e74 <ip4_addr_isbroadcast_u32>
 801369e:	4603      	mov	r3, r0
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	f040 80b1 	bne.w	8013808 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	891b      	ldrh	r3, [r3, #8]
 80136aa:	2b07      	cmp	r3, #7
 80136ac:	f240 80a5 	bls.w	80137fa <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80136b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80136b2:	330e      	adds	r3, #14
 80136b4:	4619      	mov	r1, r3
 80136b6:	6878      	ldr	r0, [r7, #4]
 80136b8:	f7f8 f9a8 	bl	800ba0c <pbuf_add_header>
 80136bc:	4603      	mov	r3, r0
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d04b      	beq.n	801375a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	891a      	ldrh	r2, [r3, #8]
 80136c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80136c8:	4413      	add	r3, r2
 80136ca:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	891b      	ldrh	r3, [r3, #8]
 80136d0:	8b7a      	ldrh	r2, [r7, #26]
 80136d2:	429a      	cmp	r2, r3
 80136d4:	f0c0 809a 	bcc.w	801380c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80136d8:	8b7b      	ldrh	r3, [r7, #26]
 80136da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80136de:	4619      	mov	r1, r3
 80136e0:	200e      	movs	r0, #14
 80136e2:	f7f7 ff49 	bl	800b578 <pbuf_alloc>
 80136e6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80136e8:	697b      	ldr	r3, [r7, #20]
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	f000 8090 	beq.w	8013810 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80136f0:	697b      	ldr	r3, [r7, #20]
 80136f2:	895b      	ldrh	r3, [r3, #10]
 80136f4:	461a      	mov	r2, r3
 80136f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80136f8:	3308      	adds	r3, #8
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d203      	bcs.n	8013706 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80136fe:	6978      	ldr	r0, [r7, #20]
 8013700:	f7f8 fa1a 	bl	800bb38 <pbuf_free>
          goto icmperr;
 8013704:	e085      	b.n	8013812 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	685b      	ldr	r3, [r3, #4]
 801370a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801370c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801370e:	4618      	mov	r0, r3
 8013710:	f001 fc45 	bl	8014f9e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013714:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013716:	4619      	mov	r1, r3
 8013718:	6978      	ldr	r0, [r7, #20]
 801371a:	f7f8 f987 	bl	800ba2c <pbuf_remove_header>
 801371e:	4603      	mov	r3, r0
 8013720:	2b00      	cmp	r3, #0
 8013722:	d009      	beq.n	8013738 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013724:	4b40      	ldr	r3, [pc, #256]	; (8013828 <icmp_input+0x1f8>)
 8013726:	22b6      	movs	r2, #182	; 0xb6
 8013728:	4940      	ldr	r1, [pc, #256]	; (801382c <icmp_input+0x1fc>)
 801372a:	4841      	ldr	r0, [pc, #260]	; (8013830 <icmp_input+0x200>)
 801372c:	f001 fc4a 	bl	8014fc4 <iprintf>
          pbuf_free(r);
 8013730:	6978      	ldr	r0, [r7, #20]
 8013732:	f7f8 fa01 	bl	800bb38 <pbuf_free>
          goto icmperr;
 8013736:	e06c      	b.n	8013812 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013738:	6879      	ldr	r1, [r7, #4]
 801373a:	6978      	ldr	r0, [r7, #20]
 801373c:	f7f8 fb20 	bl	800bd80 <pbuf_copy>
 8013740:	4603      	mov	r3, r0
 8013742:	2b00      	cmp	r3, #0
 8013744:	d003      	beq.n	801374e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8013746:	6978      	ldr	r0, [r7, #20]
 8013748:	f7f8 f9f6 	bl	800bb38 <pbuf_free>
          goto icmperr;
 801374c:	e061      	b.n	8013812 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801374e:	6878      	ldr	r0, [r7, #4]
 8013750:	f7f8 f9f2 	bl	800bb38 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	607b      	str	r3, [r7, #4]
 8013758:	e00f      	b.n	801377a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801375a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801375c:	330e      	adds	r3, #14
 801375e:	4619      	mov	r1, r3
 8013760:	6878      	ldr	r0, [r7, #4]
 8013762:	f7f8 f963 	bl	800ba2c <pbuf_remove_header>
 8013766:	4603      	mov	r3, r0
 8013768:	2b00      	cmp	r3, #0
 801376a:	d006      	beq.n	801377a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801376c:	4b2e      	ldr	r3, [pc, #184]	; (8013828 <icmp_input+0x1f8>)
 801376e:	22c7      	movs	r2, #199	; 0xc7
 8013770:	4930      	ldr	r1, [pc, #192]	; (8013834 <icmp_input+0x204>)
 8013772:	482f      	ldr	r0, [pc, #188]	; (8013830 <icmp_input+0x200>)
 8013774:	f001 fc26 	bl	8014fc4 <iprintf>
          goto icmperr;
 8013778:	e04b      	b.n	8013812 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	685b      	ldr	r3, [r3, #4]
 801377e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013780:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013782:	4619      	mov	r1, r3
 8013784:	6878      	ldr	r0, [r7, #4]
 8013786:	f7f8 f941 	bl	800ba0c <pbuf_add_header>
 801378a:	4603      	mov	r3, r0
 801378c:	2b00      	cmp	r3, #0
 801378e:	d12b      	bne.n	80137e8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	685b      	ldr	r3, [r3, #4]
 8013794:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8013796:	69fb      	ldr	r3, [r7, #28]
 8013798:	681a      	ldr	r2, [r3, #0]
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801379e:	4b20      	ldr	r3, [pc, #128]	; (8013820 <icmp_input+0x1f0>)
 80137a0:	691a      	ldr	r2, [r3, #16]
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80137a6:	693b      	ldr	r3, [r7, #16]
 80137a8:	2200      	movs	r2, #0
 80137aa:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	2200      	movs	r2, #0
 80137b0:	709a      	strb	r2, [r3, #2]
 80137b2:	2200      	movs	r2, #0
 80137b4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	22ff      	movs	r2, #255	; 0xff
 80137ba:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80137bc:	68fb      	ldr	r3, [r7, #12]
 80137be:	2200      	movs	r2, #0
 80137c0:	729a      	strb	r2, [r3, #10]
 80137c2:	2200      	movs	r2, #0
 80137c4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	9302      	str	r3, [sp, #8]
 80137ca:	2301      	movs	r3, #1
 80137cc:	9301      	str	r3, [sp, #4]
 80137ce:	2300      	movs	r3, #0
 80137d0:	9300      	str	r3, [sp, #0]
 80137d2:	23ff      	movs	r3, #255	; 0xff
 80137d4:	2200      	movs	r2, #0
 80137d6:	69f9      	ldr	r1, [r7, #28]
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f000 fa73 	bl	8013cc4 <ip4_output_if>
 80137de:	4603      	mov	r3, r0
 80137e0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80137e2:	e001      	b.n	80137e8 <icmp_input+0x1b8>
      break;
 80137e4:	bf00      	nop
 80137e6:	e000      	b.n	80137ea <icmp_input+0x1ba>
      break;
 80137e8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80137ea:	6878      	ldr	r0, [r7, #4]
 80137ec:	f7f8 f9a4 	bl	800bb38 <pbuf_free>
  return;
 80137f0:	e013      	b.n	801381a <icmp_input+0x1ea>
    goto lenerr;
 80137f2:	bf00      	nop
 80137f4:	e002      	b.n	80137fc <icmp_input+0x1cc>
    goto lenerr;
 80137f6:	bf00      	nop
 80137f8:	e000      	b.n	80137fc <icmp_input+0x1cc>
        goto lenerr;
 80137fa:	bf00      	nop
lenerr:
  pbuf_free(p);
 80137fc:	6878      	ldr	r0, [r7, #4]
 80137fe:	f7f8 f99b 	bl	800bb38 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013802:	e00a      	b.n	801381a <icmp_input+0x1ea>
        goto icmperr;
 8013804:	bf00      	nop
 8013806:	e004      	b.n	8013812 <icmp_input+0x1e2>
        goto icmperr;
 8013808:	bf00      	nop
 801380a:	e002      	b.n	8013812 <icmp_input+0x1e2>
          goto icmperr;
 801380c:	bf00      	nop
 801380e:	e000      	b.n	8013812 <icmp_input+0x1e2>
          goto icmperr;
 8013810:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013812:	6878      	ldr	r0, [r7, #4]
 8013814:	f7f8 f990 	bl	800bb38 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013818:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801381a:	3728      	adds	r7, #40	; 0x28
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}
 8013820:	20007d28 	.word	0x20007d28
 8013824:	20007d3c 	.word	0x20007d3c
 8013828:	08018784 	.word	0x08018784
 801382c:	080187bc 	.word	0x080187bc
 8013830:	080187f4 	.word	0x080187f4
 8013834:	0801881c 	.word	0x0801881c

08013838 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b082      	sub	sp, #8
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
 8013840:	460b      	mov	r3, r1
 8013842:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013844:	78fb      	ldrb	r3, [r7, #3]
 8013846:	461a      	mov	r2, r3
 8013848:	2103      	movs	r1, #3
 801384a:	6878      	ldr	r0, [r7, #4]
 801384c:	f000 f814 	bl	8013878 <icmp_send_response>
}
 8013850:	bf00      	nop
 8013852:	3708      	adds	r7, #8
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}

08013858 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	460b      	mov	r3, r1
 8013862:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013864:	78fb      	ldrb	r3, [r7, #3]
 8013866:	461a      	mov	r2, r3
 8013868:	210b      	movs	r1, #11
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	f000 f804 	bl	8013878 <icmp_send_response>
}
 8013870:	bf00      	nop
 8013872:	3708      	adds	r7, #8
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}

08013878 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b08c      	sub	sp, #48	; 0x30
 801387c:	af04      	add	r7, sp, #16
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	460b      	mov	r3, r1
 8013882:	70fb      	strb	r3, [r7, #3]
 8013884:	4613      	mov	r3, r2
 8013886:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013888:	f44f 7220 	mov.w	r2, #640	; 0x280
 801388c:	2124      	movs	r1, #36	; 0x24
 801388e:	2022      	movs	r0, #34	; 0x22
 8013890:	f7f7 fe72 	bl	800b578 <pbuf_alloc>
 8013894:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013896:	69fb      	ldr	r3, [r7, #28]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d04c      	beq.n	8013936 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801389c:	69fb      	ldr	r3, [r7, #28]
 801389e:	895b      	ldrh	r3, [r3, #10]
 80138a0:	2b23      	cmp	r3, #35	; 0x23
 80138a2:	d806      	bhi.n	80138b2 <icmp_send_response+0x3a>
 80138a4:	4b26      	ldr	r3, [pc, #152]	; (8013940 <icmp_send_response+0xc8>)
 80138a6:	f240 1269 	movw	r2, #361	; 0x169
 80138aa:	4926      	ldr	r1, [pc, #152]	; (8013944 <icmp_send_response+0xcc>)
 80138ac:	4826      	ldr	r0, [pc, #152]	; (8013948 <icmp_send_response+0xd0>)
 80138ae:	f001 fb89 	bl	8014fc4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	685b      	ldr	r3, [r3, #4]
 80138b6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80138b8:	69fb      	ldr	r3, [r7, #28]
 80138ba:	685b      	ldr	r3, [r3, #4]
 80138bc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	78fa      	ldrb	r2, [r7, #3]
 80138c2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80138c4:	697b      	ldr	r3, [r7, #20]
 80138c6:	78ba      	ldrb	r2, [r7, #2]
 80138c8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	2200      	movs	r2, #0
 80138ce:	711a      	strb	r2, [r3, #4]
 80138d0:	2200      	movs	r2, #0
 80138d2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80138d4:	697b      	ldr	r3, [r7, #20]
 80138d6:	2200      	movs	r2, #0
 80138d8:	719a      	strb	r2, [r3, #6]
 80138da:	2200      	movs	r2, #0
 80138dc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80138de:	69fb      	ldr	r3, [r7, #28]
 80138e0:	685b      	ldr	r3, [r3, #4]
 80138e2:	f103 0008 	add.w	r0, r3, #8
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	685b      	ldr	r3, [r3, #4]
 80138ea:	221c      	movs	r2, #28
 80138ec:	4619      	mov	r1, r3
 80138ee:	f001 fb56 	bl	8014f9e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80138f2:	69bb      	ldr	r3, [r7, #24]
 80138f4:	68db      	ldr	r3, [r3, #12]
 80138f6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80138f8:	f107 030c 	add.w	r3, r7, #12
 80138fc:	4618      	mov	r0, r3
 80138fe:	f000 f825 	bl	801394c <ip4_route>
 8013902:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013904:	693b      	ldr	r3, [r7, #16]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d011      	beq.n	801392e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801390a:	697b      	ldr	r3, [r7, #20]
 801390c:	2200      	movs	r2, #0
 801390e:	709a      	strb	r2, [r3, #2]
 8013910:	2200      	movs	r2, #0
 8013912:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013914:	f107 020c 	add.w	r2, r7, #12
 8013918:	693b      	ldr	r3, [r7, #16]
 801391a:	9302      	str	r3, [sp, #8]
 801391c:	2301      	movs	r3, #1
 801391e:	9301      	str	r3, [sp, #4]
 8013920:	2300      	movs	r3, #0
 8013922:	9300      	str	r3, [sp, #0]
 8013924:	23ff      	movs	r3, #255	; 0xff
 8013926:	2100      	movs	r1, #0
 8013928:	69f8      	ldr	r0, [r7, #28]
 801392a:	f000 f9cb 	bl	8013cc4 <ip4_output_if>
  }
  pbuf_free(q);
 801392e:	69f8      	ldr	r0, [r7, #28]
 8013930:	f7f8 f902 	bl	800bb38 <pbuf_free>
 8013934:	e000      	b.n	8013938 <icmp_send_response+0xc0>
    return;
 8013936:	bf00      	nop
}
 8013938:	3720      	adds	r7, #32
 801393a:	46bd      	mov	sp, r7
 801393c:	bd80      	pop	{r7, pc}
 801393e:	bf00      	nop
 8013940:	08018784 	.word	0x08018784
 8013944:	08018850 	.word	0x08018850
 8013948:	080187f4 	.word	0x080187f4

0801394c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801394c:	b480      	push	{r7}
 801394e:	b085      	sub	sp, #20
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013954:	4b33      	ldr	r3, [pc, #204]	; (8013a24 <ip4_route+0xd8>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	60fb      	str	r3, [r7, #12]
 801395a:	e036      	b.n	80139ca <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013962:	f003 0301 	and.w	r3, r3, #1
 8013966:	b2db      	uxtb	r3, r3
 8013968:	2b00      	cmp	r3, #0
 801396a:	d02b      	beq.n	80139c4 <ip4_route+0x78>
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013972:	089b      	lsrs	r3, r3, #2
 8013974:	f003 0301 	and.w	r3, r3, #1
 8013978:	b2db      	uxtb	r3, r3
 801397a:	2b00      	cmp	r3, #0
 801397c:	d022      	beq.n	80139c4 <ip4_route+0x78>
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	3304      	adds	r3, #4
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	2b00      	cmp	r3, #0
 8013986:	d01d      	beq.n	80139c4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	681a      	ldr	r2, [r3, #0]
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	3304      	adds	r3, #4
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	405a      	eors	r2, r3
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	3308      	adds	r3, #8
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	4013      	ands	r3, r2
 801399c:	2b00      	cmp	r3, #0
 801399e:	d101      	bne.n	80139a4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	e038      	b.n	8013a16 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80139aa:	f003 0302 	and.w	r3, r3, #2
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d108      	bne.n	80139c4 <ip4_route+0x78>
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	681a      	ldr	r2, [r3, #0]
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	330c      	adds	r3, #12
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	429a      	cmp	r2, r3
 80139be:	d101      	bne.n	80139c4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	e028      	b.n	8013a16 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	60fb      	str	r3, [r7, #12]
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d1c5      	bne.n	801395c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80139d0:	4b15      	ldr	r3, [pc, #84]	; (8013a28 <ip4_route+0xdc>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d01a      	beq.n	8013a0e <ip4_route+0xc2>
 80139d8:	4b13      	ldr	r3, [pc, #76]	; (8013a28 <ip4_route+0xdc>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80139e0:	f003 0301 	and.w	r3, r3, #1
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d012      	beq.n	8013a0e <ip4_route+0xc2>
 80139e8:	4b0f      	ldr	r3, [pc, #60]	; (8013a28 <ip4_route+0xdc>)
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80139f0:	f003 0304 	and.w	r3, r3, #4
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d00a      	beq.n	8013a0e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80139f8:	4b0b      	ldr	r3, [pc, #44]	; (8013a28 <ip4_route+0xdc>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	3304      	adds	r3, #4
 80139fe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d004      	beq.n	8013a0e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	b2db      	uxtb	r3, r3
 8013a0a:	2b7f      	cmp	r3, #127	; 0x7f
 8013a0c:	d101      	bne.n	8013a12 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013a0e:	2300      	movs	r3, #0
 8013a10:	e001      	b.n	8013a16 <ip4_route+0xca>
  }

  return netif_default;
 8013a12:	4b05      	ldr	r3, [pc, #20]	; (8013a28 <ip4_route+0xdc>)
 8013a14:	681b      	ldr	r3, [r3, #0]
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	3714      	adds	r7, #20
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a20:	4770      	bx	lr
 8013a22:	bf00      	nop
 8013a24:	2000b42c 	.word	0x2000b42c
 8013a28:	2000b430 	.word	0x2000b430

08013a2c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	b082      	sub	sp, #8
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013a3a:	f003 0301 	and.w	r3, r3, #1
 8013a3e:	b2db      	uxtb	r3, r3
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d016      	beq.n	8013a72 <ip4_input_accept+0x46>
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	3304      	adds	r3, #4
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d011      	beq.n	8013a72 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013a4e:	4b0b      	ldr	r3, [pc, #44]	; (8013a7c <ip4_input_accept+0x50>)
 8013a50:	695a      	ldr	r2, [r3, #20]
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	3304      	adds	r3, #4
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	429a      	cmp	r2, r3
 8013a5a:	d008      	beq.n	8013a6e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013a5c:	4b07      	ldr	r3, [pc, #28]	; (8013a7c <ip4_input_accept+0x50>)
 8013a5e:	695b      	ldr	r3, [r3, #20]
 8013a60:	6879      	ldr	r1, [r7, #4]
 8013a62:	4618      	mov	r0, r3
 8013a64:	f000 fa06 	bl	8013e74 <ip4_addr_isbroadcast_u32>
 8013a68:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d001      	beq.n	8013a72 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013a6e:	2301      	movs	r3, #1
 8013a70:	e000      	b.n	8013a74 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013a72:	2300      	movs	r3, #0
}
 8013a74:	4618      	mov	r0, r3
 8013a76:	3708      	adds	r7, #8
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd80      	pop	{r7, pc}
 8013a7c:	20007d28 	.word	0x20007d28

08013a80 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b086      	sub	sp, #24
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
 8013a88:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	685b      	ldr	r3, [r3, #4]
 8013a8e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013a90:	697b      	ldr	r3, [r7, #20]
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	091b      	lsrs	r3, r3, #4
 8013a96:	b2db      	uxtb	r3, r3
 8013a98:	2b04      	cmp	r3, #4
 8013a9a:	d004      	beq.n	8013aa6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013a9c:	6878      	ldr	r0, [r7, #4]
 8013a9e:	f7f8 f84b 	bl	800bb38 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	e105      	b.n	8013cb2 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013aa6:	697b      	ldr	r3, [r7, #20]
 8013aa8:	781b      	ldrb	r3, [r3, #0]
 8013aaa:	f003 030f 	and.w	r3, r3, #15
 8013aae:	b2db      	uxtb	r3, r3
 8013ab0:	009b      	lsls	r3, r3, #2
 8013ab2:	b2db      	uxtb	r3, r3
 8013ab4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013ab6:	697b      	ldr	r3, [r7, #20]
 8013ab8:	885b      	ldrh	r3, [r3, #2]
 8013aba:	b29b      	uxth	r3, r3
 8013abc:	4618      	mov	r0, r3
 8013abe:	f7f6 fc5d 	bl	800a37c <lwip_htons>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	891b      	ldrh	r3, [r3, #8]
 8013aca:	89ba      	ldrh	r2, [r7, #12]
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d204      	bcs.n	8013ada <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013ad0:	89bb      	ldrh	r3, [r7, #12]
 8013ad2:	4619      	mov	r1, r3
 8013ad4:	6878      	ldr	r0, [r7, #4]
 8013ad6:	f7f7 fea9 	bl	800b82c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	895b      	ldrh	r3, [r3, #10]
 8013ade:	89fa      	ldrh	r2, [r7, #14]
 8013ae0:	429a      	cmp	r2, r3
 8013ae2:	d807      	bhi.n	8013af4 <ip4_input+0x74>
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	891b      	ldrh	r3, [r3, #8]
 8013ae8:	89ba      	ldrh	r2, [r7, #12]
 8013aea:	429a      	cmp	r2, r3
 8013aec:	d802      	bhi.n	8013af4 <ip4_input+0x74>
 8013aee:	89fb      	ldrh	r3, [r7, #14]
 8013af0:	2b13      	cmp	r3, #19
 8013af2:	d804      	bhi.n	8013afe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f7f8 f81f 	bl	800bb38 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013afa:	2300      	movs	r3, #0
 8013afc:	e0d9      	b.n	8013cb2 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013afe:	697b      	ldr	r3, [r7, #20]
 8013b00:	691b      	ldr	r3, [r3, #16]
 8013b02:	4a6e      	ldr	r2, [pc, #440]	; (8013cbc <ip4_input+0x23c>)
 8013b04:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013b06:	697b      	ldr	r3, [r7, #20]
 8013b08:	68db      	ldr	r3, [r3, #12]
 8013b0a:	4a6c      	ldr	r2, [pc, #432]	; (8013cbc <ip4_input+0x23c>)
 8013b0c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013b0e:	4b6b      	ldr	r3, [pc, #428]	; (8013cbc <ip4_input+0x23c>)
 8013b10:	695b      	ldr	r3, [r3, #20]
 8013b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013b16:	2be0      	cmp	r3, #224	; 0xe0
 8013b18:	d112      	bne.n	8013b40 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013b1a:	683b      	ldr	r3, [r7, #0]
 8013b1c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013b20:	f003 0301 	and.w	r3, r3, #1
 8013b24:	b2db      	uxtb	r3, r3
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d007      	beq.n	8013b3a <ip4_input+0xba>
 8013b2a:	683b      	ldr	r3, [r7, #0]
 8013b2c:	3304      	adds	r3, #4
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d002      	beq.n	8013b3a <ip4_input+0xba>
      netif = inp;
 8013b34:	683b      	ldr	r3, [r7, #0]
 8013b36:	613b      	str	r3, [r7, #16]
 8013b38:	e02a      	b.n	8013b90 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	613b      	str	r3, [r7, #16]
 8013b3e:	e027      	b.n	8013b90 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013b40:	6838      	ldr	r0, [r7, #0]
 8013b42:	f7ff ff73 	bl	8013a2c <ip4_input_accept>
 8013b46:	4603      	mov	r3, r0
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d002      	beq.n	8013b52 <ip4_input+0xd2>
      netif = inp;
 8013b4c:	683b      	ldr	r3, [r7, #0]
 8013b4e:	613b      	str	r3, [r7, #16]
 8013b50:	e01e      	b.n	8013b90 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013b52:	2300      	movs	r3, #0
 8013b54:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013b56:	4b59      	ldr	r3, [pc, #356]	; (8013cbc <ip4_input+0x23c>)
 8013b58:	695b      	ldr	r3, [r3, #20]
 8013b5a:	b2db      	uxtb	r3, r3
 8013b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8013b5e:	d017      	beq.n	8013b90 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013b60:	4b57      	ldr	r3, [pc, #348]	; (8013cc0 <ip4_input+0x240>)
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	613b      	str	r3, [r7, #16]
 8013b66:	e00e      	b.n	8013b86 <ip4_input+0x106>
          if (netif == inp) {
 8013b68:	693a      	ldr	r2, [r7, #16]
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d006      	beq.n	8013b7e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013b70:	6938      	ldr	r0, [r7, #16]
 8013b72:	f7ff ff5b 	bl	8013a2c <ip4_input_accept>
 8013b76:	4603      	mov	r3, r0
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d108      	bne.n	8013b8e <ip4_input+0x10e>
 8013b7c:	e000      	b.n	8013b80 <ip4_input+0x100>
            continue;
 8013b7e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013b80:	693b      	ldr	r3, [r7, #16]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	613b      	str	r3, [r7, #16]
 8013b86:	693b      	ldr	r3, [r7, #16]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d1ed      	bne.n	8013b68 <ip4_input+0xe8>
 8013b8c:	e000      	b.n	8013b90 <ip4_input+0x110>
            break;
 8013b8e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013b90:	4b4a      	ldr	r3, [pc, #296]	; (8013cbc <ip4_input+0x23c>)
 8013b92:	691b      	ldr	r3, [r3, #16]
 8013b94:	6839      	ldr	r1, [r7, #0]
 8013b96:	4618      	mov	r0, r3
 8013b98:	f000 f96c 	bl	8013e74 <ip4_addr_isbroadcast_u32>
 8013b9c:	4603      	mov	r3, r0
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d105      	bne.n	8013bae <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013ba2:	4b46      	ldr	r3, [pc, #280]	; (8013cbc <ip4_input+0x23c>)
 8013ba4:	691b      	ldr	r3, [r3, #16]
 8013ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013baa:	2be0      	cmp	r3, #224	; 0xe0
 8013bac:	d104      	bne.n	8013bb8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f7f7 ffc2 	bl	800bb38 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	e07c      	b.n	8013cb2 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d104      	bne.n	8013bc8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f7f7 ffba 	bl	800bb38 <pbuf_free>
    return ERR_OK;
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	e074      	b.n	8013cb2 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013bc8:	697b      	ldr	r3, [r7, #20]
 8013bca:	88db      	ldrh	r3, [r3, #6]
 8013bcc:	b29b      	uxth	r3, r3
 8013bce:	461a      	mov	r2, r3
 8013bd0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013bd4:	4013      	ands	r3, r2
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d00b      	beq.n	8013bf2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013bda:	6878      	ldr	r0, [r7, #4]
 8013bdc:	f000 fc90 	bl	8014500 <ip4_reass>
 8013be0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d101      	bne.n	8013bec <ip4_input+0x16c>
      return ERR_OK;
 8013be8:	2300      	movs	r3, #0
 8013bea:	e062      	b.n	8013cb2 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	685b      	ldr	r3, [r3, #4]
 8013bf0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013bf2:	4a32      	ldr	r2, [pc, #200]	; (8013cbc <ip4_input+0x23c>)
 8013bf4:	693b      	ldr	r3, [r7, #16]
 8013bf6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013bf8:	4a30      	ldr	r2, [pc, #192]	; (8013cbc <ip4_input+0x23c>)
 8013bfa:	683b      	ldr	r3, [r7, #0]
 8013bfc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013bfe:	4a2f      	ldr	r2, [pc, #188]	; (8013cbc <ip4_input+0x23c>)
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013c04:	697b      	ldr	r3, [r7, #20]
 8013c06:	781b      	ldrb	r3, [r3, #0]
 8013c08:	f003 030f 	and.w	r3, r3, #15
 8013c0c:	b2db      	uxtb	r3, r3
 8013c0e:	009b      	lsls	r3, r3, #2
 8013c10:	b2db      	uxtb	r3, r3
 8013c12:	b29a      	uxth	r2, r3
 8013c14:	4b29      	ldr	r3, [pc, #164]	; (8013cbc <ip4_input+0x23c>)
 8013c16:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013c18:	89fb      	ldrh	r3, [r7, #14]
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	6878      	ldr	r0, [r7, #4]
 8013c1e:	f7f7 ff05 	bl	800ba2c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013c22:	697b      	ldr	r3, [r7, #20]
 8013c24:	7a5b      	ldrb	r3, [r3, #9]
 8013c26:	2b06      	cmp	r3, #6
 8013c28:	d009      	beq.n	8013c3e <ip4_input+0x1be>
 8013c2a:	2b11      	cmp	r3, #17
 8013c2c:	d002      	beq.n	8013c34 <ip4_input+0x1b4>
 8013c2e:	2b01      	cmp	r3, #1
 8013c30:	d00a      	beq.n	8013c48 <ip4_input+0x1c8>
 8013c32:	e00e      	b.n	8013c52 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013c34:	6839      	ldr	r1, [r7, #0]
 8013c36:	6878      	ldr	r0, [r7, #4]
 8013c38:	f7fe fc6a 	bl	8012510 <udp_input>
        break;
 8013c3c:	e026      	b.n	8013c8c <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013c3e:	6839      	ldr	r1, [r7, #0]
 8013c40:	6878      	ldr	r0, [r7, #4]
 8013c42:	f7fa f84f 	bl	800dce4 <tcp_input>
        break;
 8013c46:	e021      	b.n	8013c8c <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013c48:	6839      	ldr	r1, [r7, #0]
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f7ff fcf0 	bl	8013630 <icmp_input>
        break;
 8013c50:	e01c      	b.n	8013c8c <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013c52:	4b1a      	ldr	r3, [pc, #104]	; (8013cbc <ip4_input+0x23c>)
 8013c54:	695b      	ldr	r3, [r3, #20]
 8013c56:	6939      	ldr	r1, [r7, #16]
 8013c58:	4618      	mov	r0, r3
 8013c5a:	f000 f90b 	bl	8013e74 <ip4_addr_isbroadcast_u32>
 8013c5e:	4603      	mov	r3, r0
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d10f      	bne.n	8013c84 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013c64:	4b15      	ldr	r3, [pc, #84]	; (8013cbc <ip4_input+0x23c>)
 8013c66:	695b      	ldr	r3, [r3, #20]
 8013c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013c6c:	2be0      	cmp	r3, #224	; 0xe0
 8013c6e:	d009      	beq.n	8013c84 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013c70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013c74:	4619      	mov	r1, r3
 8013c76:	6878      	ldr	r0, [r7, #4]
 8013c78:	f7f7 ff4b 	bl	800bb12 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013c7c:	2102      	movs	r1, #2
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	f7ff fdda 	bl	8013838 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013c84:	6878      	ldr	r0, [r7, #4]
 8013c86:	f7f7 ff57 	bl	800bb38 <pbuf_free>
        break;
 8013c8a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013c8c:	4b0b      	ldr	r3, [pc, #44]	; (8013cbc <ip4_input+0x23c>)
 8013c8e:	2200      	movs	r2, #0
 8013c90:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013c92:	4b0a      	ldr	r3, [pc, #40]	; (8013cbc <ip4_input+0x23c>)
 8013c94:	2200      	movs	r2, #0
 8013c96:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013c98:	4b08      	ldr	r3, [pc, #32]	; (8013cbc <ip4_input+0x23c>)
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013c9e:	4b07      	ldr	r3, [pc, #28]	; (8013cbc <ip4_input+0x23c>)
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013ca4:	4b05      	ldr	r3, [pc, #20]	; (8013cbc <ip4_input+0x23c>)
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013caa:	4b04      	ldr	r3, [pc, #16]	; (8013cbc <ip4_input+0x23c>)
 8013cac:	2200      	movs	r2, #0
 8013cae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013cb0:	2300      	movs	r3, #0
}
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	3718      	adds	r7, #24
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}
 8013cba:	bf00      	nop
 8013cbc:	20007d28 	.word	0x20007d28
 8013cc0:	2000b42c 	.word	0x2000b42c

08013cc4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b08a      	sub	sp, #40	; 0x28
 8013cc8:	af04      	add	r7, sp, #16
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	60b9      	str	r1, [r7, #8]
 8013cce:	607a      	str	r2, [r7, #4]
 8013cd0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013cd2:	68bb      	ldr	r3, [r7, #8]
 8013cd4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d009      	beq.n	8013cf0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013cdc:	68bb      	ldr	r3, [r7, #8]
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d003      	beq.n	8013cea <ip4_output_if+0x26>
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d102      	bne.n	8013cf0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cec:	3304      	adds	r3, #4
 8013cee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013cf0:	78fa      	ldrb	r2, [r7, #3]
 8013cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf4:	9302      	str	r3, [sp, #8]
 8013cf6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013cfa:	9301      	str	r3, [sp, #4]
 8013cfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013d00:	9300      	str	r3, [sp, #0]
 8013d02:	4613      	mov	r3, r2
 8013d04:	687a      	ldr	r2, [r7, #4]
 8013d06:	6979      	ldr	r1, [r7, #20]
 8013d08:	68f8      	ldr	r0, [r7, #12]
 8013d0a:	f000 f805 	bl	8013d18 <ip4_output_if_src>
 8013d0e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013d10:	4618      	mov	r0, r3
 8013d12:	3718      	adds	r7, #24
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bd80      	pop	{r7, pc}

08013d18 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b088      	sub	sp, #32
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	60f8      	str	r0, [r7, #12]
 8013d20:	60b9      	str	r1, [r7, #8]
 8013d22:	607a      	str	r2, [r7, #4]
 8013d24:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	7b9b      	ldrb	r3, [r3, #14]
 8013d2a:	2b01      	cmp	r3, #1
 8013d2c:	d006      	beq.n	8013d3c <ip4_output_if_src+0x24>
 8013d2e:	4b4b      	ldr	r3, [pc, #300]	; (8013e5c <ip4_output_if_src+0x144>)
 8013d30:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013d34:	494a      	ldr	r1, [pc, #296]	; (8013e60 <ip4_output_if_src+0x148>)
 8013d36:	484b      	ldr	r0, [pc, #300]	; (8013e64 <ip4_output_if_src+0x14c>)
 8013d38:	f001 f944 	bl	8014fc4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d060      	beq.n	8013e04 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013d42:	2314      	movs	r3, #20
 8013d44:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013d46:	2114      	movs	r1, #20
 8013d48:	68f8      	ldr	r0, [r7, #12]
 8013d4a:	f7f7 fe5f 	bl	800ba0c <pbuf_add_header>
 8013d4e:	4603      	mov	r3, r0
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d002      	beq.n	8013d5a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013d54:	f06f 0301 	mvn.w	r3, #1
 8013d58:	e07c      	b.n	8013e54 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	685b      	ldr	r3, [r3, #4]
 8013d5e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	895b      	ldrh	r3, [r3, #10]
 8013d64:	2b13      	cmp	r3, #19
 8013d66:	d806      	bhi.n	8013d76 <ip4_output_if_src+0x5e>
 8013d68:	4b3c      	ldr	r3, [pc, #240]	; (8013e5c <ip4_output_if_src+0x144>)
 8013d6a:	f240 3289 	movw	r2, #905	; 0x389
 8013d6e:	493e      	ldr	r1, [pc, #248]	; (8013e68 <ip4_output_if_src+0x150>)
 8013d70:	483c      	ldr	r0, [pc, #240]	; (8013e64 <ip4_output_if_src+0x14c>)
 8013d72:	f001 f927 	bl	8014fc4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013d76:	69fb      	ldr	r3, [r7, #28]
 8013d78:	78fa      	ldrb	r2, [r7, #3]
 8013d7a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013d7c:	69fb      	ldr	r3, [r7, #28]
 8013d7e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013d82:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	681a      	ldr	r2, [r3, #0]
 8013d88:	69fb      	ldr	r3, [r7, #28]
 8013d8a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013d8c:	8b7b      	ldrh	r3, [r7, #26]
 8013d8e:	089b      	lsrs	r3, r3, #2
 8013d90:	b29b      	uxth	r3, r3
 8013d92:	b2db      	uxtb	r3, r3
 8013d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d98:	b2da      	uxtb	r2, r3
 8013d9a:	69fb      	ldr	r3, [r7, #28]
 8013d9c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013d9e:	69fb      	ldr	r3, [r7, #28]
 8013da0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013da4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	891b      	ldrh	r3, [r3, #8]
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7f6 fae6 	bl	800a37c <lwip_htons>
 8013db0:	4603      	mov	r3, r0
 8013db2:	461a      	mov	r2, r3
 8013db4:	69fb      	ldr	r3, [r7, #28]
 8013db6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013db8:	69fb      	ldr	r3, [r7, #28]
 8013dba:	2200      	movs	r2, #0
 8013dbc:	719a      	strb	r2, [r3, #6]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013dc2:	4b2a      	ldr	r3, [pc, #168]	; (8013e6c <ip4_output_if_src+0x154>)
 8013dc4:	881b      	ldrh	r3, [r3, #0]
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f7f6 fad8 	bl	800a37c <lwip_htons>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	461a      	mov	r2, r3
 8013dd0:	69fb      	ldr	r3, [r7, #28]
 8013dd2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013dd4:	4b25      	ldr	r3, [pc, #148]	; (8013e6c <ip4_output_if_src+0x154>)
 8013dd6:	881b      	ldrh	r3, [r3, #0]
 8013dd8:	3301      	adds	r3, #1
 8013dda:	b29a      	uxth	r2, r3
 8013ddc:	4b23      	ldr	r3, [pc, #140]	; (8013e6c <ip4_output_if_src+0x154>)
 8013dde:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013de0:	68bb      	ldr	r3, [r7, #8]
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d104      	bne.n	8013df0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013de6:	4b22      	ldr	r3, [pc, #136]	; (8013e70 <ip4_output_if_src+0x158>)
 8013de8:	681a      	ldr	r2, [r3, #0]
 8013dea:	69fb      	ldr	r3, [r7, #28]
 8013dec:	60da      	str	r2, [r3, #12]
 8013dee:	e003      	b.n	8013df8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013df0:	68bb      	ldr	r3, [r7, #8]
 8013df2:	681a      	ldr	r2, [r3, #0]
 8013df4:	69fb      	ldr	r3, [r7, #28]
 8013df6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013df8:	69fb      	ldr	r3, [r7, #28]
 8013dfa:	2200      	movs	r2, #0
 8013dfc:	729a      	strb	r2, [r3, #10]
 8013dfe:	2200      	movs	r2, #0
 8013e00:	72da      	strb	r2, [r3, #11]
 8013e02:	e00f      	b.n	8013e24 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	895b      	ldrh	r3, [r3, #10]
 8013e08:	2b13      	cmp	r3, #19
 8013e0a:	d802      	bhi.n	8013e12 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013e0c:	f06f 0301 	mvn.w	r3, #1
 8013e10:	e020      	b.n	8013e54 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	685b      	ldr	r3, [r3, #4]
 8013e16:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013e18:	69fb      	ldr	r3, [r7, #28]
 8013e1a:	691b      	ldr	r3, [r3, #16]
 8013e1c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013e1e:	f107 0314 	add.w	r3, r7, #20
 8013e22:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d00c      	beq.n	8013e46 <ip4_output_if_src+0x12e>
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	891a      	ldrh	r2, [r3, #8]
 8013e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013e34:	429a      	cmp	r2, r3
 8013e36:	d906      	bls.n	8013e46 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013e38:	687a      	ldr	r2, [r7, #4]
 8013e3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013e3c:	68f8      	ldr	r0, [r7, #12]
 8013e3e:	f000 fd4b 	bl	80148d8 <ip4_frag>
 8013e42:	4603      	mov	r3, r0
 8013e44:	e006      	b.n	8013e54 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e48:	695b      	ldr	r3, [r3, #20]
 8013e4a:	687a      	ldr	r2, [r7, #4]
 8013e4c:	68f9      	ldr	r1, [r7, #12]
 8013e4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e50:	4798      	blx	r3
 8013e52:	4603      	mov	r3, r0
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3720      	adds	r7, #32
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}
 8013e5c:	0801887c 	.word	0x0801887c
 8013e60:	080188b0 	.word	0x080188b0
 8013e64:	080188bc 	.word	0x080188bc
 8013e68:	080188e4 	.word	0x080188e4
 8013e6c:	20004616 	.word	0x20004616
 8013e70:	08029838 	.word	0x08029838

08013e74 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013e74:	b480      	push	{r7}
 8013e76:	b085      	sub	sp, #20
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e88:	d002      	beq.n	8013e90 <ip4_addr_isbroadcast_u32+0x1c>
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d101      	bne.n	8013e94 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013e90:	2301      	movs	r3, #1
 8013e92:	e02a      	b.n	8013eea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013e9a:	f003 0302 	and.w	r3, r3, #2
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d101      	bne.n	8013ea6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	e021      	b.n	8013eea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013ea6:	683b      	ldr	r3, [r7, #0]
 8013ea8:	3304      	adds	r3, #4
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	687a      	ldr	r2, [r7, #4]
 8013eae:	429a      	cmp	r2, r3
 8013eb0:	d101      	bne.n	8013eb6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	e019      	b.n	8013eea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013eb6:	68fa      	ldr	r2, [r7, #12]
 8013eb8:	683b      	ldr	r3, [r7, #0]
 8013eba:	3304      	adds	r3, #4
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	405a      	eors	r2, r3
 8013ec0:	683b      	ldr	r3, [r7, #0]
 8013ec2:	3308      	adds	r3, #8
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	4013      	ands	r3, r2
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d10d      	bne.n	8013ee8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013ecc:	683b      	ldr	r3, [r7, #0]
 8013ece:	3308      	adds	r3, #8
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	43da      	mvns	r2, r3
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013ed8:	683b      	ldr	r3, [r7, #0]
 8013eda:	3308      	adds	r3, #8
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013ee0:	429a      	cmp	r2, r3
 8013ee2:	d101      	bne.n	8013ee8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013ee4:	2301      	movs	r3, #1
 8013ee6:	e000      	b.n	8013eea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013ee8:	2300      	movs	r3, #0
  }
}
 8013eea:	4618      	mov	r0, r3
 8013eec:	3714      	adds	r7, #20
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef4:	4770      	bx	lr
	...

08013ef8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b084      	sub	sp, #16
 8013efc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8013efe:	2300      	movs	r3, #0
 8013f00:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013f02:	4b12      	ldr	r3, [pc, #72]	; (8013f4c <ip_reass_tmr+0x54>)
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013f08:	e018      	b.n	8013f3c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	7fdb      	ldrb	r3, [r3, #31]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d00b      	beq.n	8013f2a <ip_reass_tmr+0x32>
      r->timer--;
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	7fdb      	ldrb	r3, [r3, #31]
 8013f16:	3b01      	subs	r3, #1
 8013f18:	b2da      	uxtb	r2, r3
 8013f1a:	68fb      	ldr	r3, [r7, #12]
 8013f1c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	681b      	ldr	r3, [r3, #0]
 8013f26:	60fb      	str	r3, [r7, #12]
 8013f28:	e008      	b.n	8013f3c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013f34:	68b9      	ldr	r1, [r7, #8]
 8013f36:	6878      	ldr	r0, [r7, #4]
 8013f38:	f000 f80a 	bl	8013f50 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d1e3      	bne.n	8013f0a <ip_reass_tmr+0x12>
    }
  }
}
 8013f42:	bf00      	nop
 8013f44:	3710      	adds	r7, #16
 8013f46:	46bd      	mov	sp, r7
 8013f48:	bd80      	pop	{r7, pc}
 8013f4a:	bf00      	nop
 8013f4c:	20004618 	.word	0x20004618

08013f50 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b088      	sub	sp, #32
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
 8013f58:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013f5e:	683a      	ldr	r2, [r7, #0]
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	429a      	cmp	r2, r3
 8013f64:	d105      	bne.n	8013f72 <ip_reass_free_complete_datagram+0x22>
 8013f66:	4b45      	ldr	r3, [pc, #276]	; (801407c <ip_reass_free_complete_datagram+0x12c>)
 8013f68:	22ab      	movs	r2, #171	; 0xab
 8013f6a:	4945      	ldr	r1, [pc, #276]	; (8014080 <ip_reass_free_complete_datagram+0x130>)
 8013f6c:	4845      	ldr	r0, [pc, #276]	; (8014084 <ip_reass_free_complete_datagram+0x134>)
 8013f6e:	f001 f829 	bl	8014fc4 <iprintf>
  if (prev != NULL) {
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d00a      	beq.n	8013f8e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013f78:	683b      	ldr	r3, [r7, #0]
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	687a      	ldr	r2, [r7, #4]
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	d005      	beq.n	8013f8e <ip_reass_free_complete_datagram+0x3e>
 8013f82:	4b3e      	ldr	r3, [pc, #248]	; (801407c <ip_reass_free_complete_datagram+0x12c>)
 8013f84:	22ad      	movs	r2, #173	; 0xad
 8013f86:	4940      	ldr	r1, [pc, #256]	; (8014088 <ip_reass_free_complete_datagram+0x138>)
 8013f88:	483e      	ldr	r0, [pc, #248]	; (8014084 <ip_reass_free_complete_datagram+0x134>)
 8013f8a:	f001 f81b 	bl	8014fc4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	685b      	ldr	r3, [r3, #4]
 8013f92:	685b      	ldr	r3, [r3, #4]
 8013f94:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013f96:	697b      	ldr	r3, [r7, #20]
 8013f98:	889b      	ldrh	r3, [r3, #4]
 8013f9a:	b29b      	uxth	r3, r3
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d12a      	bne.n	8013ff6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	685b      	ldr	r3, [r3, #4]
 8013fa4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013fa6:	697b      	ldr	r3, [r7, #20]
 8013fa8:	681a      	ldr	r2, [r3, #0]
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013fae:	69bb      	ldr	r3, [r7, #24]
 8013fb0:	6858      	ldr	r0, [r3, #4]
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	3308      	adds	r3, #8
 8013fb6:	2214      	movs	r2, #20
 8013fb8:	4619      	mov	r1, r3
 8013fba:	f000 fff0 	bl	8014f9e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013fbe:	2101      	movs	r1, #1
 8013fc0:	69b8      	ldr	r0, [r7, #24]
 8013fc2:	f7ff fc49 	bl	8013858 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013fc6:	69b8      	ldr	r0, [r7, #24]
 8013fc8:	f7f7 fe44 	bl	800bc54 <pbuf_clen>
 8013fcc:	4603      	mov	r3, r0
 8013fce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013fd0:	8bfa      	ldrh	r2, [r7, #30]
 8013fd2:	8a7b      	ldrh	r3, [r7, #18]
 8013fd4:	4413      	add	r3, r2
 8013fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013fda:	db05      	blt.n	8013fe8 <ip_reass_free_complete_datagram+0x98>
 8013fdc:	4b27      	ldr	r3, [pc, #156]	; (801407c <ip_reass_free_complete_datagram+0x12c>)
 8013fde:	22bc      	movs	r2, #188	; 0xbc
 8013fe0:	492a      	ldr	r1, [pc, #168]	; (801408c <ip_reass_free_complete_datagram+0x13c>)
 8013fe2:	4828      	ldr	r0, [pc, #160]	; (8014084 <ip_reass_free_complete_datagram+0x134>)
 8013fe4:	f000 ffee 	bl	8014fc4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013fe8:	8bfa      	ldrh	r2, [r7, #30]
 8013fea:	8a7b      	ldrh	r3, [r7, #18]
 8013fec:	4413      	add	r3, r2
 8013fee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013ff0:	69b8      	ldr	r0, [r7, #24]
 8013ff2:	f7f7 fda1 	bl	800bb38 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	685b      	ldr	r3, [r3, #4]
 8013ffa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8013ffc:	e01f      	b.n	801403e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8013ffe:	69bb      	ldr	r3, [r7, #24]
 8014000:	685b      	ldr	r3, [r3, #4]
 8014002:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014004:	69bb      	ldr	r3, [r7, #24]
 8014006:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014008:	697b      	ldr	r3, [r7, #20]
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801400e:	68f8      	ldr	r0, [r7, #12]
 8014010:	f7f7 fe20 	bl	800bc54 <pbuf_clen>
 8014014:	4603      	mov	r3, r0
 8014016:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014018:	8bfa      	ldrh	r2, [r7, #30]
 801401a:	8a7b      	ldrh	r3, [r7, #18]
 801401c:	4413      	add	r3, r2
 801401e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014022:	db05      	blt.n	8014030 <ip_reass_free_complete_datagram+0xe0>
 8014024:	4b15      	ldr	r3, [pc, #84]	; (801407c <ip_reass_free_complete_datagram+0x12c>)
 8014026:	22cc      	movs	r2, #204	; 0xcc
 8014028:	4918      	ldr	r1, [pc, #96]	; (801408c <ip_reass_free_complete_datagram+0x13c>)
 801402a:	4816      	ldr	r0, [pc, #88]	; (8014084 <ip_reass_free_complete_datagram+0x134>)
 801402c:	f000 ffca 	bl	8014fc4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014030:	8bfa      	ldrh	r2, [r7, #30]
 8014032:	8a7b      	ldrh	r3, [r7, #18]
 8014034:	4413      	add	r3, r2
 8014036:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014038:	68f8      	ldr	r0, [r7, #12]
 801403a:	f7f7 fd7d 	bl	800bb38 <pbuf_free>
  while (p != NULL) {
 801403e:	69bb      	ldr	r3, [r7, #24]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d1dc      	bne.n	8013ffe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014044:	6839      	ldr	r1, [r7, #0]
 8014046:	6878      	ldr	r0, [r7, #4]
 8014048:	f000 f8c2 	bl	80141d0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801404c:	4b10      	ldr	r3, [pc, #64]	; (8014090 <ip_reass_free_complete_datagram+0x140>)
 801404e:	881b      	ldrh	r3, [r3, #0]
 8014050:	8bfa      	ldrh	r2, [r7, #30]
 8014052:	429a      	cmp	r2, r3
 8014054:	d905      	bls.n	8014062 <ip_reass_free_complete_datagram+0x112>
 8014056:	4b09      	ldr	r3, [pc, #36]	; (801407c <ip_reass_free_complete_datagram+0x12c>)
 8014058:	22d2      	movs	r2, #210	; 0xd2
 801405a:	490e      	ldr	r1, [pc, #56]	; (8014094 <ip_reass_free_complete_datagram+0x144>)
 801405c:	4809      	ldr	r0, [pc, #36]	; (8014084 <ip_reass_free_complete_datagram+0x134>)
 801405e:	f000 ffb1 	bl	8014fc4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014062:	4b0b      	ldr	r3, [pc, #44]	; (8014090 <ip_reass_free_complete_datagram+0x140>)
 8014064:	881a      	ldrh	r2, [r3, #0]
 8014066:	8bfb      	ldrh	r3, [r7, #30]
 8014068:	1ad3      	subs	r3, r2, r3
 801406a:	b29a      	uxth	r2, r3
 801406c:	4b08      	ldr	r3, [pc, #32]	; (8014090 <ip_reass_free_complete_datagram+0x140>)
 801406e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014070:	8bfb      	ldrh	r3, [r7, #30]
}
 8014072:	4618      	mov	r0, r3
 8014074:	3720      	adds	r7, #32
 8014076:	46bd      	mov	sp, r7
 8014078:	bd80      	pop	{r7, pc}
 801407a:	bf00      	nop
 801407c:	08018914 	.word	0x08018914
 8014080:	08018950 	.word	0x08018950
 8014084:	0801895c 	.word	0x0801895c
 8014088:	08018984 	.word	0x08018984
 801408c:	08018998 	.word	0x08018998
 8014090:	2000461c 	.word	0x2000461c
 8014094:	080189b8 	.word	0x080189b8

08014098 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b08a      	sub	sp, #40	; 0x28
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
 80140a0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80140a2:	2300      	movs	r3, #0
 80140a4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80140a6:	2300      	movs	r3, #0
 80140a8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80140aa:	2300      	movs	r3, #0
 80140ac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80140ae:	2300      	movs	r3, #0
 80140b0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80140b2:	2300      	movs	r3, #0
 80140b4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80140b6:	4b28      	ldr	r3, [pc, #160]	; (8014158 <ip_reass_remove_oldest_datagram+0xc0>)
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80140bc:	e030      	b.n	8014120 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80140be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c0:	695a      	ldr	r2, [r3, #20]
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	68db      	ldr	r3, [r3, #12]
 80140c6:	429a      	cmp	r2, r3
 80140c8:	d10c      	bne.n	80140e4 <ip_reass_remove_oldest_datagram+0x4c>
 80140ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140cc:	699a      	ldr	r2, [r3, #24]
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	691b      	ldr	r3, [r3, #16]
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d106      	bne.n	80140e4 <ip_reass_remove_oldest_datagram+0x4c>
 80140d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140d8:	899a      	ldrh	r2, [r3, #12]
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	889b      	ldrh	r3, [r3, #4]
 80140de:	b29b      	uxth	r3, r3
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d014      	beq.n	801410e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80140e4:	693b      	ldr	r3, [r7, #16]
 80140e6:	3301      	adds	r3, #1
 80140e8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80140ea:	6a3b      	ldr	r3, [r7, #32]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d104      	bne.n	80140fa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80140f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80140f4:	69fb      	ldr	r3, [r7, #28]
 80140f6:	61bb      	str	r3, [r7, #24]
 80140f8:	e009      	b.n	801410e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80140fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140fc:	7fda      	ldrb	r2, [r3, #31]
 80140fe:	6a3b      	ldr	r3, [r7, #32]
 8014100:	7fdb      	ldrb	r3, [r3, #31]
 8014102:	429a      	cmp	r2, r3
 8014104:	d803      	bhi.n	801410e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014108:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801410a:	69fb      	ldr	r3, [r7, #28]
 801410c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d001      	beq.n	801411a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014118:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014122:	2b00      	cmp	r3, #0
 8014124:	d1cb      	bne.n	80140be <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014126:	6a3b      	ldr	r3, [r7, #32]
 8014128:	2b00      	cmp	r3, #0
 801412a:	d008      	beq.n	801413e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801412c:	69b9      	ldr	r1, [r7, #24]
 801412e:	6a38      	ldr	r0, [r7, #32]
 8014130:	f7ff ff0e 	bl	8013f50 <ip_reass_free_complete_datagram>
 8014134:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014136:	697a      	ldr	r2, [r7, #20]
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	4413      	add	r3, r2
 801413c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801413e:	697a      	ldr	r2, [r7, #20]
 8014140:	683b      	ldr	r3, [r7, #0]
 8014142:	429a      	cmp	r2, r3
 8014144:	da02      	bge.n	801414c <ip_reass_remove_oldest_datagram+0xb4>
 8014146:	693b      	ldr	r3, [r7, #16]
 8014148:	2b01      	cmp	r3, #1
 801414a:	dcac      	bgt.n	80140a6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801414c:	697b      	ldr	r3, [r7, #20]
}
 801414e:	4618      	mov	r0, r3
 8014150:	3728      	adds	r7, #40	; 0x28
 8014152:	46bd      	mov	sp, r7
 8014154:	bd80      	pop	{r7, pc}
 8014156:	bf00      	nop
 8014158:	20004618 	.word	0x20004618

0801415c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801415c:	b580      	push	{r7, lr}
 801415e:	b084      	sub	sp, #16
 8014160:	af00      	add	r7, sp, #0
 8014162:	6078      	str	r0, [r7, #4]
 8014164:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014166:	2004      	movs	r0, #4
 8014168:	f7f6 fdf4 	bl	800ad54 <memp_malloc>
 801416c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d110      	bne.n	8014196 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014174:	6839      	ldr	r1, [r7, #0]
 8014176:	6878      	ldr	r0, [r7, #4]
 8014178:	f7ff ff8e 	bl	8014098 <ip_reass_remove_oldest_datagram>
 801417c:	4602      	mov	r2, r0
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	4293      	cmp	r3, r2
 8014182:	dc03      	bgt.n	801418c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014184:	2004      	movs	r0, #4
 8014186:	f7f6 fde5 	bl	800ad54 <memp_malloc>
 801418a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d101      	bne.n	8014196 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014192:	2300      	movs	r3, #0
 8014194:	e016      	b.n	80141c4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014196:	2220      	movs	r2, #32
 8014198:	2100      	movs	r1, #0
 801419a:	68f8      	ldr	r0, [r7, #12]
 801419c:	f000 ff0a 	bl	8014fb4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	220f      	movs	r2, #15
 80141a4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80141a6:	4b09      	ldr	r3, [pc, #36]	; (80141cc <ip_reass_enqueue_new_datagram+0x70>)
 80141a8:	681a      	ldr	r2, [r3, #0]
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80141ae:	4a07      	ldr	r2, [pc, #28]	; (80141cc <ip_reass_enqueue_new_datagram+0x70>)
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	3308      	adds	r3, #8
 80141b8:	2214      	movs	r2, #20
 80141ba:	6879      	ldr	r1, [r7, #4]
 80141bc:	4618      	mov	r0, r3
 80141be:	f000 feee 	bl	8014f9e <memcpy>
  return ipr;
 80141c2:	68fb      	ldr	r3, [r7, #12]
}
 80141c4:	4618      	mov	r0, r3
 80141c6:	3710      	adds	r7, #16
 80141c8:	46bd      	mov	sp, r7
 80141ca:	bd80      	pop	{r7, pc}
 80141cc:	20004618 	.word	0x20004618

080141d0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b082      	sub	sp, #8
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	6078      	str	r0, [r7, #4]
 80141d8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80141da:	4b10      	ldr	r3, [pc, #64]	; (801421c <ip_reass_dequeue_datagram+0x4c>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	687a      	ldr	r2, [r7, #4]
 80141e0:	429a      	cmp	r2, r3
 80141e2:	d104      	bne.n	80141ee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	4a0c      	ldr	r2, [pc, #48]	; (801421c <ip_reass_dequeue_datagram+0x4c>)
 80141ea:	6013      	str	r3, [r2, #0]
 80141ec:	e00d      	b.n	801420a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80141ee:	683b      	ldr	r3, [r7, #0]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d106      	bne.n	8014202 <ip_reass_dequeue_datagram+0x32>
 80141f4:	4b0a      	ldr	r3, [pc, #40]	; (8014220 <ip_reass_dequeue_datagram+0x50>)
 80141f6:	f240 1245 	movw	r2, #325	; 0x145
 80141fa:	490a      	ldr	r1, [pc, #40]	; (8014224 <ip_reass_dequeue_datagram+0x54>)
 80141fc:	480a      	ldr	r0, [pc, #40]	; (8014228 <ip_reass_dequeue_datagram+0x58>)
 80141fe:	f000 fee1 	bl	8014fc4 <iprintf>
    prev->next = ipr->next;
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	681a      	ldr	r2, [r3, #0]
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801420a:	6879      	ldr	r1, [r7, #4]
 801420c:	2004      	movs	r0, #4
 801420e:	f7f6 fdf3 	bl	800adf8 <memp_free>
}
 8014212:	bf00      	nop
 8014214:	3708      	adds	r7, #8
 8014216:	46bd      	mov	sp, r7
 8014218:	bd80      	pop	{r7, pc}
 801421a:	bf00      	nop
 801421c:	20004618 	.word	0x20004618
 8014220:	08018914 	.word	0x08018914
 8014224:	080189dc 	.word	0x080189dc
 8014228:	0801895c 	.word	0x0801895c

0801422c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b08c      	sub	sp, #48	; 0x30
 8014230:	af00      	add	r7, sp, #0
 8014232:	60f8      	str	r0, [r7, #12]
 8014234:	60b9      	str	r1, [r7, #8]
 8014236:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014238:	2300      	movs	r3, #0
 801423a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801423c:	2301      	movs	r3, #1
 801423e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8014240:	68bb      	ldr	r3, [r7, #8]
 8014242:	685b      	ldr	r3, [r3, #4]
 8014244:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8014246:	69fb      	ldr	r3, [r7, #28]
 8014248:	885b      	ldrh	r3, [r3, #2]
 801424a:	b29b      	uxth	r3, r3
 801424c:	4618      	mov	r0, r3
 801424e:	f7f6 f895 	bl	800a37c <lwip_htons>
 8014252:	4603      	mov	r3, r0
 8014254:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8014256:	69fb      	ldr	r3, [r7, #28]
 8014258:	781b      	ldrb	r3, [r3, #0]
 801425a:	f003 030f 	and.w	r3, r3, #15
 801425e:	b2db      	uxtb	r3, r3
 8014260:	009b      	lsls	r3, r3, #2
 8014262:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8014264:	7e7b      	ldrb	r3, [r7, #25]
 8014266:	b29b      	uxth	r3, r3
 8014268:	8b7a      	ldrh	r2, [r7, #26]
 801426a:	429a      	cmp	r2, r3
 801426c:	d202      	bcs.n	8014274 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801426e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014272:	e135      	b.n	80144e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8014274:	7e7b      	ldrb	r3, [r7, #25]
 8014276:	b29b      	uxth	r3, r3
 8014278:	8b7a      	ldrh	r2, [r7, #26]
 801427a:	1ad3      	subs	r3, r2, r3
 801427c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801427e:	69fb      	ldr	r3, [r7, #28]
 8014280:	88db      	ldrh	r3, [r3, #6]
 8014282:	b29b      	uxth	r3, r3
 8014284:	4618      	mov	r0, r3
 8014286:	f7f6 f879 	bl	800a37c <lwip_htons>
 801428a:	4603      	mov	r3, r0
 801428c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014290:	b29b      	uxth	r3, r3
 8014292:	00db      	lsls	r3, r3, #3
 8014294:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	685b      	ldr	r3, [r3, #4]
 801429a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801429e:	2200      	movs	r2, #0
 80142a0:	701a      	strb	r2, [r3, #0]
 80142a2:	2200      	movs	r2, #0
 80142a4:	705a      	strb	r2, [r3, #1]
 80142a6:	2200      	movs	r2, #0
 80142a8:	709a      	strb	r2, [r3, #2]
 80142aa:	2200      	movs	r2, #0
 80142ac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80142ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b0:	8afa      	ldrh	r2, [r7, #22]
 80142b2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80142b4:	8afa      	ldrh	r2, [r7, #22]
 80142b6:	8b7b      	ldrh	r3, [r7, #26]
 80142b8:	4413      	add	r3, r2
 80142ba:	b29a      	uxth	r2, r3
 80142bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142be:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80142c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c2:	88db      	ldrh	r3, [r3, #6]
 80142c4:	b29b      	uxth	r3, r3
 80142c6:	8afa      	ldrh	r2, [r7, #22]
 80142c8:	429a      	cmp	r2, r3
 80142ca:	d902      	bls.n	80142d2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80142cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80142d0:	e106      	b.n	80144e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	685b      	ldr	r3, [r3, #4]
 80142d6:	627b      	str	r3, [r7, #36]	; 0x24
 80142d8:	e068      	b.n	80143ac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80142da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142dc:	685b      	ldr	r3, [r3, #4]
 80142de:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80142e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142e2:	889b      	ldrh	r3, [r3, #4]
 80142e4:	b29a      	uxth	r2, r3
 80142e6:	693b      	ldr	r3, [r7, #16]
 80142e8:	889b      	ldrh	r3, [r3, #4]
 80142ea:	b29b      	uxth	r3, r3
 80142ec:	429a      	cmp	r2, r3
 80142ee:	d235      	bcs.n	801435c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80142f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80142f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d020      	beq.n	801433e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80142fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142fe:	889b      	ldrh	r3, [r3, #4]
 8014300:	b29a      	uxth	r2, r3
 8014302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014304:	88db      	ldrh	r3, [r3, #6]
 8014306:	b29b      	uxth	r3, r3
 8014308:	429a      	cmp	r2, r3
 801430a:	d307      	bcc.n	801431c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801430e:	88db      	ldrh	r3, [r3, #6]
 8014310:	b29a      	uxth	r2, r3
 8014312:	693b      	ldr	r3, [r7, #16]
 8014314:	889b      	ldrh	r3, [r3, #4]
 8014316:	b29b      	uxth	r3, r3
 8014318:	429a      	cmp	r2, r3
 801431a:	d902      	bls.n	8014322 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801431c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014320:	e0de      	b.n	80144e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014324:	68ba      	ldr	r2, [r7, #8]
 8014326:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801432a:	88db      	ldrh	r3, [r3, #6]
 801432c:	b29a      	uxth	r2, r3
 801432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014330:	889b      	ldrh	r3, [r3, #4]
 8014332:	b29b      	uxth	r3, r3
 8014334:	429a      	cmp	r2, r3
 8014336:	d03d      	beq.n	80143b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014338:	2300      	movs	r3, #0
 801433a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801433c:	e03a      	b.n	80143b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014340:	88db      	ldrh	r3, [r3, #6]
 8014342:	b29a      	uxth	r2, r3
 8014344:	693b      	ldr	r3, [r7, #16]
 8014346:	889b      	ldrh	r3, [r3, #4]
 8014348:	b29b      	uxth	r3, r3
 801434a:	429a      	cmp	r2, r3
 801434c:	d902      	bls.n	8014354 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801434e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014352:	e0c5      	b.n	80144e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8014354:	68fb      	ldr	r3, [r7, #12]
 8014356:	68ba      	ldr	r2, [r7, #8]
 8014358:	605a      	str	r2, [r3, #4]
      break;
 801435a:	e02b      	b.n	80143b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801435e:	889b      	ldrh	r3, [r3, #4]
 8014360:	b29a      	uxth	r2, r3
 8014362:	693b      	ldr	r3, [r7, #16]
 8014364:	889b      	ldrh	r3, [r3, #4]
 8014366:	b29b      	uxth	r3, r3
 8014368:	429a      	cmp	r2, r3
 801436a:	d102      	bne.n	8014372 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801436c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014370:	e0b6      	b.n	80144e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8014372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014374:	889b      	ldrh	r3, [r3, #4]
 8014376:	b29a      	uxth	r2, r3
 8014378:	693b      	ldr	r3, [r7, #16]
 801437a:	88db      	ldrh	r3, [r3, #6]
 801437c:	b29b      	uxth	r3, r3
 801437e:	429a      	cmp	r2, r3
 8014380:	d202      	bcs.n	8014388 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014386:	e0ab      	b.n	80144e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801438a:	2b00      	cmp	r3, #0
 801438c:	d009      	beq.n	80143a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014390:	88db      	ldrh	r3, [r3, #6]
 8014392:	b29a      	uxth	r2, r3
 8014394:	693b      	ldr	r3, [r7, #16]
 8014396:	889b      	ldrh	r3, [r3, #4]
 8014398:	b29b      	uxth	r3, r3
 801439a:	429a      	cmp	r2, r3
 801439c:	d001      	beq.n	80143a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801439e:	2300      	movs	r3, #0
 80143a0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80143a2:	693b      	ldr	r3, [r7, #16]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80143a8:	693b      	ldr	r3, [r7, #16]
 80143aa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80143ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d193      	bne.n	80142da <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80143b2:	e000      	b.n	80143b6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80143b4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80143b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d12d      	bne.n	8014418 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80143bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d01c      	beq.n	80143fc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80143c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143c4:	88db      	ldrh	r3, [r3, #6]
 80143c6:	b29a      	uxth	r2, r3
 80143c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143ca:	889b      	ldrh	r3, [r3, #4]
 80143cc:	b29b      	uxth	r3, r3
 80143ce:	429a      	cmp	r2, r3
 80143d0:	d906      	bls.n	80143e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80143d2:	4b45      	ldr	r3, [pc, #276]	; (80144e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80143d4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80143d8:	4944      	ldr	r1, [pc, #272]	; (80144ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80143da:	4845      	ldr	r0, [pc, #276]	; (80144f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80143dc:	f000 fdf2 	bl	8014fc4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80143e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e2:	68ba      	ldr	r2, [r7, #8]
 80143e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80143e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143e8:	88db      	ldrh	r3, [r3, #6]
 80143ea:	b29a      	uxth	r2, r3
 80143ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143ee:	889b      	ldrh	r3, [r3, #4]
 80143f0:	b29b      	uxth	r3, r3
 80143f2:	429a      	cmp	r2, r3
 80143f4:	d010      	beq.n	8014418 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80143f6:	2300      	movs	r3, #0
 80143f8:	623b      	str	r3, [r7, #32]
 80143fa:	e00d      	b.n	8014418 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	685b      	ldr	r3, [r3, #4]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d006      	beq.n	8014412 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014404:	4b38      	ldr	r3, [pc, #224]	; (80144e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014406:	f240 12bf 	movw	r2, #447	; 0x1bf
 801440a:	493a      	ldr	r1, [pc, #232]	; (80144f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801440c:	4838      	ldr	r0, [pc, #224]	; (80144f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801440e:	f000 fdd9 	bl	8014fc4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014412:	68fb      	ldr	r3, [r7, #12]
 8014414:	68ba      	ldr	r2, [r7, #8]
 8014416:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d105      	bne.n	801442a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	7f9b      	ldrb	r3, [r3, #30]
 8014422:	f003 0301 	and.w	r3, r3, #1
 8014426:	2b00      	cmp	r3, #0
 8014428:	d059      	beq.n	80144de <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801442a:	6a3b      	ldr	r3, [r7, #32]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d04f      	beq.n	80144d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	685b      	ldr	r3, [r3, #4]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d006      	beq.n	8014446 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	685b      	ldr	r3, [r3, #4]
 801443c:	685b      	ldr	r3, [r3, #4]
 801443e:	889b      	ldrh	r3, [r3, #4]
 8014440:	b29b      	uxth	r3, r3
 8014442:	2b00      	cmp	r3, #0
 8014444:	d002      	beq.n	801444c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8014446:	2300      	movs	r3, #0
 8014448:	623b      	str	r3, [r7, #32]
 801444a:	e041      	b.n	80144d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801444c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801444e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8014450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8014456:	e012      	b.n	801447e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8014458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801445a:	685b      	ldr	r3, [r3, #4]
 801445c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801445e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014460:	88db      	ldrh	r3, [r3, #6]
 8014462:	b29a      	uxth	r2, r3
 8014464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014466:	889b      	ldrh	r3, [r3, #4]
 8014468:	b29b      	uxth	r3, r3
 801446a:	429a      	cmp	r2, r3
 801446c:	d002      	beq.n	8014474 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801446e:	2300      	movs	r3, #0
 8014470:	623b      	str	r3, [r7, #32]
            break;
 8014472:	e007      	b.n	8014484 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8014474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014476:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8014478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014480:	2b00      	cmp	r3, #0
 8014482:	d1e9      	bne.n	8014458 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8014484:	6a3b      	ldr	r3, [r7, #32]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d022      	beq.n	80144d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	685b      	ldr	r3, [r3, #4]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d106      	bne.n	80144a0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8014492:	4b15      	ldr	r3, [pc, #84]	; (80144e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014494:	f240 12df 	movw	r2, #479	; 0x1df
 8014498:	4917      	ldr	r1, [pc, #92]	; (80144f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801449a:	4815      	ldr	r0, [pc, #84]	; (80144f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801449c:	f000 fd92 	bl	8014fc4 <iprintf>
          LWIP_ASSERT("sanity check",
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	685b      	ldr	r3, [r3, #4]
 80144a4:	685b      	ldr	r3, [r3, #4]
 80144a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80144a8:	429a      	cmp	r2, r3
 80144aa:	d106      	bne.n	80144ba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80144ac:	4b0e      	ldr	r3, [pc, #56]	; (80144e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80144ae:	f240 12e1 	movw	r2, #481	; 0x1e1
 80144b2:	4911      	ldr	r1, [pc, #68]	; (80144f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80144b4:	480e      	ldr	r0, [pc, #56]	; (80144f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144b6:	f000 fd85 	bl	8014fc4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80144ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d006      	beq.n	80144d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80144c2:	4b09      	ldr	r3, [pc, #36]	; (80144e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80144c4:	f240 12e3 	movw	r2, #483	; 0x1e3
 80144c8:	490c      	ldr	r1, [pc, #48]	; (80144fc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80144ca:	4809      	ldr	r0, [pc, #36]	; (80144f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80144cc:	f000 fd7a 	bl	8014fc4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80144d0:	6a3b      	ldr	r3, [r7, #32]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	bf14      	ite	ne
 80144d6:	2301      	movne	r3, #1
 80144d8:	2300      	moveq	r3, #0
 80144da:	b2db      	uxtb	r3, r3
 80144dc:	e000      	b.n	80144e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80144de:	2300      	movs	r3, #0
}
 80144e0:	4618      	mov	r0, r3
 80144e2:	3730      	adds	r7, #48	; 0x30
 80144e4:	46bd      	mov	sp, r7
 80144e6:	bd80      	pop	{r7, pc}
 80144e8:	08018914 	.word	0x08018914
 80144ec:	080189f8 	.word	0x080189f8
 80144f0:	0801895c 	.word	0x0801895c
 80144f4:	08018a18 	.word	0x08018a18
 80144f8:	08018a50 	.word	0x08018a50
 80144fc:	08018a60 	.word	0x08018a60

08014500 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b08e      	sub	sp, #56	; 0x38
 8014504:	af00      	add	r7, sp, #0
 8014506:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	685b      	ldr	r3, [r3, #4]
 801450c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014510:	781b      	ldrb	r3, [r3, #0]
 8014512:	f003 030f 	and.w	r3, r3, #15
 8014516:	b2db      	uxtb	r3, r3
 8014518:	009b      	lsls	r3, r3, #2
 801451a:	b2db      	uxtb	r3, r3
 801451c:	2b14      	cmp	r3, #20
 801451e:	f040 8167 	bne.w	80147f0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014524:	88db      	ldrh	r3, [r3, #6]
 8014526:	b29b      	uxth	r3, r3
 8014528:	4618      	mov	r0, r3
 801452a:	f7f5 ff27 	bl	800a37c <lwip_htons>
 801452e:	4603      	mov	r3, r0
 8014530:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014534:	b29b      	uxth	r3, r3
 8014536:	00db      	lsls	r3, r3, #3
 8014538:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801453c:	885b      	ldrh	r3, [r3, #2]
 801453e:	b29b      	uxth	r3, r3
 8014540:	4618      	mov	r0, r3
 8014542:	f7f5 ff1b 	bl	800a37c <lwip_htons>
 8014546:	4603      	mov	r3, r0
 8014548:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801454a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801454c:	781b      	ldrb	r3, [r3, #0]
 801454e:	f003 030f 	and.w	r3, r3, #15
 8014552:	b2db      	uxtb	r3, r3
 8014554:	009b      	lsls	r3, r3, #2
 8014556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801455a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801455e:	b29b      	uxth	r3, r3
 8014560:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014562:	429a      	cmp	r2, r3
 8014564:	f0c0 8146 	bcc.w	80147f4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8014568:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801456c:	b29b      	uxth	r3, r3
 801456e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014570:	1ad3      	subs	r3, r2, r3
 8014572:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	f7f7 fb6d 	bl	800bc54 <pbuf_clen>
 801457a:	4603      	mov	r3, r0
 801457c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801457e:	4ba3      	ldr	r3, [pc, #652]	; (801480c <ip4_reass+0x30c>)
 8014580:	881b      	ldrh	r3, [r3, #0]
 8014582:	461a      	mov	r2, r3
 8014584:	8c3b      	ldrh	r3, [r7, #32]
 8014586:	4413      	add	r3, r2
 8014588:	2b0a      	cmp	r3, #10
 801458a:	dd10      	ble.n	80145ae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801458c:	8c3b      	ldrh	r3, [r7, #32]
 801458e:	4619      	mov	r1, r3
 8014590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014592:	f7ff fd81 	bl	8014098 <ip_reass_remove_oldest_datagram>
 8014596:	4603      	mov	r3, r0
 8014598:	2b00      	cmp	r3, #0
 801459a:	f000 812d 	beq.w	80147f8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801459e:	4b9b      	ldr	r3, [pc, #620]	; (801480c <ip4_reass+0x30c>)
 80145a0:	881b      	ldrh	r3, [r3, #0]
 80145a2:	461a      	mov	r2, r3
 80145a4:	8c3b      	ldrh	r3, [r7, #32]
 80145a6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80145a8:	2b0a      	cmp	r3, #10
 80145aa:	f300 8125 	bgt.w	80147f8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80145ae:	4b98      	ldr	r3, [pc, #608]	; (8014810 <ip4_reass+0x310>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	633b      	str	r3, [r7, #48]	; 0x30
 80145b4:	e015      	b.n	80145e2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80145b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145b8:	695a      	ldr	r2, [r3, #20]
 80145ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145bc:	68db      	ldr	r3, [r3, #12]
 80145be:	429a      	cmp	r2, r3
 80145c0:	d10c      	bne.n	80145dc <ip4_reass+0xdc>
 80145c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c4:	699a      	ldr	r2, [r3, #24]
 80145c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145c8:	691b      	ldr	r3, [r3, #16]
 80145ca:	429a      	cmp	r2, r3
 80145cc:	d106      	bne.n	80145dc <ip4_reass+0xdc>
 80145ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145d0:	899a      	ldrh	r2, [r3, #12]
 80145d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145d4:	889b      	ldrh	r3, [r3, #4]
 80145d6:	b29b      	uxth	r3, r3
 80145d8:	429a      	cmp	r2, r3
 80145da:	d006      	beq.n	80145ea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80145dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	633b      	str	r3, [r7, #48]	; 0x30
 80145e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d1e6      	bne.n	80145b6 <ip4_reass+0xb6>
 80145e8:	e000      	b.n	80145ec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80145ea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80145ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d109      	bne.n	8014606 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80145f2:	8c3b      	ldrh	r3, [r7, #32]
 80145f4:	4619      	mov	r1, r3
 80145f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145f8:	f7ff fdb0 	bl	801415c <ip_reass_enqueue_new_datagram>
 80145fc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80145fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014600:	2b00      	cmp	r3, #0
 8014602:	d11c      	bne.n	801463e <ip4_reass+0x13e>
      goto nullreturn;
 8014604:	e0f9      	b.n	80147fa <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014608:	88db      	ldrh	r3, [r3, #6]
 801460a:	b29b      	uxth	r3, r3
 801460c:	4618      	mov	r0, r3
 801460e:	f7f5 feb5 	bl	800a37c <lwip_htons>
 8014612:	4603      	mov	r3, r0
 8014614:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014618:	2b00      	cmp	r3, #0
 801461a:	d110      	bne.n	801463e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801461e:	89db      	ldrh	r3, [r3, #14]
 8014620:	4618      	mov	r0, r3
 8014622:	f7f5 feab 	bl	800a37c <lwip_htons>
 8014626:	4603      	mov	r3, r0
 8014628:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801462c:	2b00      	cmp	r3, #0
 801462e:	d006      	beq.n	801463e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014632:	3308      	adds	r3, #8
 8014634:	2214      	movs	r2, #20
 8014636:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014638:	4618      	mov	r0, r3
 801463a:	f000 fcb0 	bl	8014f9e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801463e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014640:	88db      	ldrh	r3, [r3, #6]
 8014642:	b29b      	uxth	r3, r3
 8014644:	f003 0320 	and.w	r3, r3, #32
 8014648:	2b00      	cmp	r3, #0
 801464a:	bf0c      	ite	eq
 801464c:	2301      	moveq	r3, #1
 801464e:	2300      	movne	r3, #0
 8014650:	b2db      	uxtb	r3, r3
 8014652:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8014654:	69fb      	ldr	r3, [r7, #28]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d00e      	beq.n	8014678 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801465a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801465c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801465e:	4413      	add	r3, r2
 8014660:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8014662:	8b7a      	ldrh	r2, [r7, #26]
 8014664:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014666:	429a      	cmp	r2, r3
 8014668:	f0c0 80a0 	bcc.w	80147ac <ip4_reass+0x2ac>
 801466c:	8b7b      	ldrh	r3, [r7, #26]
 801466e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8014672:	4293      	cmp	r3, r2
 8014674:	f200 809a 	bhi.w	80147ac <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8014678:	69fa      	ldr	r2, [r7, #28]
 801467a:	6879      	ldr	r1, [r7, #4]
 801467c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801467e:	f7ff fdd5 	bl	801422c <ip_reass_chain_frag_into_datagram_and_validate>
 8014682:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8014684:	697b      	ldr	r3, [r7, #20]
 8014686:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801468a:	f000 8091 	beq.w	80147b0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801468e:	4b5f      	ldr	r3, [pc, #380]	; (801480c <ip4_reass+0x30c>)
 8014690:	881a      	ldrh	r2, [r3, #0]
 8014692:	8c3b      	ldrh	r3, [r7, #32]
 8014694:	4413      	add	r3, r2
 8014696:	b29a      	uxth	r2, r3
 8014698:	4b5c      	ldr	r3, [pc, #368]	; (801480c <ip4_reass+0x30c>)
 801469a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801469c:	69fb      	ldr	r3, [r7, #28]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d00d      	beq.n	80146be <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80146a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80146a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146a6:	4413      	add	r3, r2
 80146a8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80146aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ac:	8a7a      	ldrh	r2, [r7, #18]
 80146ae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80146b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b2:	7f9b      	ldrb	r3, [r3, #30]
 80146b4:	f043 0301 	orr.w	r3, r3, #1
 80146b8:	b2da      	uxtb	r2, r3
 80146ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146bc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80146be:	697b      	ldr	r3, [r7, #20]
 80146c0:	2b01      	cmp	r3, #1
 80146c2:	d171      	bne.n	80147a8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80146c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c6:	8b9b      	ldrh	r3, [r3, #28]
 80146c8:	3314      	adds	r3, #20
 80146ca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80146cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146ce:	685b      	ldr	r3, [r3, #4]
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80146d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146d8:	685b      	ldr	r3, [r3, #4]
 80146da:	685b      	ldr	r3, [r3, #4]
 80146dc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80146de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146e0:	3308      	adds	r3, #8
 80146e2:	2214      	movs	r2, #20
 80146e4:	4619      	mov	r1, r3
 80146e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80146e8:	f000 fc59 	bl	8014f9e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80146ec:	8a3b      	ldrh	r3, [r7, #16]
 80146ee:	4618      	mov	r0, r3
 80146f0:	f7f5 fe44 	bl	800a37c <lwip_htons>
 80146f4:	4603      	mov	r3, r0
 80146f6:	461a      	mov	r2, r3
 80146f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146fa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80146fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146fe:	2200      	movs	r2, #0
 8014700:	719a      	strb	r2, [r3, #6]
 8014702:	2200      	movs	r2, #0
 8014704:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014708:	2200      	movs	r2, #0
 801470a:	729a      	strb	r2, [r3, #10]
 801470c:	2200      	movs	r2, #0
 801470e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014712:	685b      	ldr	r3, [r3, #4]
 8014714:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014716:	e00d      	b.n	8014734 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801471a:	685b      	ldr	r3, [r3, #4]
 801471c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801471e:	2114      	movs	r1, #20
 8014720:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014722:	f7f7 f983 	bl	800ba2c <pbuf_remove_header>
      pbuf_cat(p, r);
 8014726:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f7f7 fad3 	bl	800bcd4 <pbuf_cat>
      r = iprh->next_pbuf;
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014736:	2b00      	cmp	r3, #0
 8014738:	d1ee      	bne.n	8014718 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801473a:	4b35      	ldr	r3, [pc, #212]	; (8014810 <ip4_reass+0x310>)
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014740:	429a      	cmp	r2, r3
 8014742:	d102      	bne.n	801474a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8014744:	2300      	movs	r3, #0
 8014746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014748:	e010      	b.n	801476c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801474a:	4b31      	ldr	r3, [pc, #196]	; (8014810 <ip4_reass+0x310>)
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014750:	e007      	b.n	8014762 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8014752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014758:	429a      	cmp	r2, r3
 801475a:	d006      	beq.n	801476a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801475c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801475e:	681b      	ldr	r3, [r3, #0]
 8014760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014764:	2b00      	cmp	r3, #0
 8014766:	d1f4      	bne.n	8014752 <ip4_reass+0x252>
 8014768:	e000      	b.n	801476c <ip4_reass+0x26c>
          break;
 801476a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801476c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801476e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014770:	f7ff fd2e 	bl	80141d0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f7f7 fa6d 	bl	800bc54 <pbuf_clen>
 801477a:	4603      	mov	r3, r0
 801477c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801477e:	4b23      	ldr	r3, [pc, #140]	; (801480c <ip4_reass+0x30c>)
 8014780:	881b      	ldrh	r3, [r3, #0]
 8014782:	8c3a      	ldrh	r2, [r7, #32]
 8014784:	429a      	cmp	r2, r3
 8014786:	d906      	bls.n	8014796 <ip4_reass+0x296>
 8014788:	4b22      	ldr	r3, [pc, #136]	; (8014814 <ip4_reass+0x314>)
 801478a:	f240 229b 	movw	r2, #667	; 0x29b
 801478e:	4922      	ldr	r1, [pc, #136]	; (8014818 <ip4_reass+0x318>)
 8014790:	4822      	ldr	r0, [pc, #136]	; (801481c <ip4_reass+0x31c>)
 8014792:	f000 fc17 	bl	8014fc4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014796:	4b1d      	ldr	r3, [pc, #116]	; (801480c <ip4_reass+0x30c>)
 8014798:	881a      	ldrh	r2, [r3, #0]
 801479a:	8c3b      	ldrh	r3, [r7, #32]
 801479c:	1ad3      	subs	r3, r2, r3
 801479e:	b29a      	uxth	r2, r3
 80147a0:	4b1a      	ldr	r3, [pc, #104]	; (801480c <ip4_reass+0x30c>)
 80147a2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	e02c      	b.n	8014802 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80147a8:	2300      	movs	r3, #0
 80147aa:	e02a      	b.n	8014802 <ip4_reass+0x302>

nullreturn_ipr:
 80147ac:	bf00      	nop
 80147ae:	e000      	b.n	80147b2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80147b0:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80147b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d106      	bne.n	80147c6 <ip4_reass+0x2c6>
 80147b8:	4b16      	ldr	r3, [pc, #88]	; (8014814 <ip4_reass+0x314>)
 80147ba:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80147be:	4918      	ldr	r1, [pc, #96]	; (8014820 <ip4_reass+0x320>)
 80147c0:	4816      	ldr	r0, [pc, #88]	; (801481c <ip4_reass+0x31c>)
 80147c2:	f000 fbff 	bl	8014fc4 <iprintf>
  if (ipr->p == NULL) {
 80147c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c8:	685b      	ldr	r3, [r3, #4]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d114      	bne.n	80147f8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80147ce:	4b10      	ldr	r3, [pc, #64]	; (8014810 <ip4_reass+0x310>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147d4:	429a      	cmp	r2, r3
 80147d6:	d006      	beq.n	80147e6 <ip4_reass+0x2e6>
 80147d8:	4b0e      	ldr	r3, [pc, #56]	; (8014814 <ip4_reass+0x314>)
 80147da:	f240 22ab 	movw	r2, #683	; 0x2ab
 80147de:	4911      	ldr	r1, [pc, #68]	; (8014824 <ip4_reass+0x324>)
 80147e0:	480e      	ldr	r0, [pc, #56]	; (801481c <ip4_reass+0x31c>)
 80147e2:	f000 fbef 	bl	8014fc4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80147e6:	2100      	movs	r1, #0
 80147e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80147ea:	f7ff fcf1 	bl	80141d0 <ip_reass_dequeue_datagram>
 80147ee:	e004      	b.n	80147fa <ip4_reass+0x2fa>
    goto nullreturn;
 80147f0:	bf00      	nop
 80147f2:	e002      	b.n	80147fa <ip4_reass+0x2fa>
    goto nullreturn;
 80147f4:	bf00      	nop
 80147f6:	e000      	b.n	80147fa <ip4_reass+0x2fa>
  }

nullreturn:
 80147f8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f7f7 f99c 	bl	800bb38 <pbuf_free>
  return NULL;
 8014800:	2300      	movs	r3, #0
}
 8014802:	4618      	mov	r0, r3
 8014804:	3738      	adds	r7, #56	; 0x38
 8014806:	46bd      	mov	sp, r7
 8014808:	bd80      	pop	{r7, pc}
 801480a:	bf00      	nop
 801480c:	2000461c 	.word	0x2000461c
 8014810:	20004618 	.word	0x20004618
 8014814:	08018914 	.word	0x08018914
 8014818:	08018a84 	.word	0x08018a84
 801481c:	0801895c 	.word	0x0801895c
 8014820:	08018aa0 	.word	0x08018aa0
 8014824:	08018aac 	.word	0x08018aac

08014828 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801482c:	2005      	movs	r0, #5
 801482e:	f7f6 fa91 	bl	800ad54 <memp_malloc>
 8014832:	4603      	mov	r3, r0
}
 8014834:	4618      	mov	r0, r3
 8014836:	bd80      	pop	{r7, pc}

08014838 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b082      	sub	sp, #8
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d106      	bne.n	8014854 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014846:	4b07      	ldr	r3, [pc, #28]	; (8014864 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014848:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801484c:	4906      	ldr	r1, [pc, #24]	; (8014868 <ip_frag_free_pbuf_custom_ref+0x30>)
 801484e:	4807      	ldr	r0, [pc, #28]	; (801486c <ip_frag_free_pbuf_custom_ref+0x34>)
 8014850:	f000 fbb8 	bl	8014fc4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014854:	6879      	ldr	r1, [r7, #4]
 8014856:	2005      	movs	r0, #5
 8014858:	f7f6 face 	bl	800adf8 <memp_free>
}
 801485c:	bf00      	nop
 801485e:	3708      	adds	r7, #8
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}
 8014864:	08018914 	.word	0x08018914
 8014868:	08018acc 	.word	0x08018acc
 801486c:	0801895c 	.word	0x0801895c

08014870 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014870:	b580      	push	{r7, lr}
 8014872:	b084      	sub	sp, #16
 8014874:	af00      	add	r7, sp, #0
 8014876:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801487c:	68fb      	ldr	r3, [r7, #12]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d106      	bne.n	8014890 <ipfrag_free_pbuf_custom+0x20>
 8014882:	4b11      	ldr	r3, [pc, #68]	; (80148c8 <ipfrag_free_pbuf_custom+0x58>)
 8014884:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014888:	4910      	ldr	r1, [pc, #64]	; (80148cc <ipfrag_free_pbuf_custom+0x5c>)
 801488a:	4811      	ldr	r0, [pc, #68]	; (80148d0 <ipfrag_free_pbuf_custom+0x60>)
 801488c:	f000 fb9a 	bl	8014fc4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014890:	68fa      	ldr	r2, [r7, #12]
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	429a      	cmp	r2, r3
 8014896:	d006      	beq.n	80148a6 <ipfrag_free_pbuf_custom+0x36>
 8014898:	4b0b      	ldr	r3, [pc, #44]	; (80148c8 <ipfrag_free_pbuf_custom+0x58>)
 801489a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801489e:	490d      	ldr	r1, [pc, #52]	; (80148d4 <ipfrag_free_pbuf_custom+0x64>)
 80148a0:	480b      	ldr	r0, [pc, #44]	; (80148d0 <ipfrag_free_pbuf_custom+0x60>)
 80148a2:	f000 fb8f 	bl	8014fc4 <iprintf>
  if (pcr->original != NULL) {
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	695b      	ldr	r3, [r3, #20]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d004      	beq.n	80148b8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	695b      	ldr	r3, [r3, #20]
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7f7 f940 	bl	800bb38 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80148b8:	68f8      	ldr	r0, [r7, #12]
 80148ba:	f7ff ffbd 	bl	8014838 <ip_frag_free_pbuf_custom_ref>
}
 80148be:	bf00      	nop
 80148c0:	3710      	adds	r7, #16
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	08018914 	.word	0x08018914
 80148cc:	08018ad8 	.word	0x08018ad8
 80148d0:	0801895c 	.word	0x0801895c
 80148d4:	08018ae4 	.word	0x08018ae4

080148d8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b094      	sub	sp, #80	; 0x50
 80148dc:	af02      	add	r7, sp, #8
 80148de:	60f8      	str	r0, [r7, #12]
 80148e0:	60b9      	str	r1, [r7, #8]
 80148e2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80148e4:	2300      	movs	r3, #0
 80148e6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80148ea:	68bb      	ldr	r3, [r7, #8]
 80148ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80148ee:	3b14      	subs	r3, #20
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	da00      	bge.n	80148f6 <ip4_frag+0x1e>
 80148f4:	3307      	adds	r3, #7
 80148f6:	10db      	asrs	r3, r3, #3
 80148f8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80148fa:	2314      	movs	r3, #20
 80148fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	685b      	ldr	r3, [r3, #4]
 8014902:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014906:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	f003 030f 	and.w	r3, r3, #15
 8014910:	b2db      	uxtb	r3, r3
 8014912:	009b      	lsls	r3, r3, #2
 8014914:	b2db      	uxtb	r3, r3
 8014916:	2b14      	cmp	r3, #20
 8014918:	d002      	beq.n	8014920 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801491a:	f06f 0305 	mvn.w	r3, #5
 801491e:	e10f      	b.n	8014b40 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	895b      	ldrh	r3, [r3, #10]
 8014924:	2b13      	cmp	r3, #19
 8014926:	d809      	bhi.n	801493c <ip4_frag+0x64>
 8014928:	4b87      	ldr	r3, [pc, #540]	; (8014b48 <ip4_frag+0x270>)
 801492a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801492e:	4987      	ldr	r1, [pc, #540]	; (8014b4c <ip4_frag+0x274>)
 8014930:	4887      	ldr	r0, [pc, #540]	; (8014b50 <ip4_frag+0x278>)
 8014932:	f000 fb47 	bl	8014fc4 <iprintf>
 8014936:	f06f 0305 	mvn.w	r3, #5
 801493a:	e101      	b.n	8014b40 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801493e:	88db      	ldrh	r3, [r3, #6]
 8014940:	b29b      	uxth	r3, r3
 8014942:	4618      	mov	r0, r3
 8014944:	f7f5 fd1a 	bl	800a37c <lwip_htons>
 8014948:	4603      	mov	r3, r0
 801494a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801494c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801494e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014952:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014956:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014958:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801495c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	891b      	ldrh	r3, [r3, #8]
 8014962:	3b14      	subs	r3, #20
 8014964:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014968:	e0e0      	b.n	8014b2c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801496a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801496c:	00db      	lsls	r3, r3, #3
 801496e:	b29b      	uxth	r3, r3
 8014970:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014974:	4293      	cmp	r3, r2
 8014976:	bf28      	it	cs
 8014978:	4613      	movcs	r3, r2
 801497a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801497c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014980:	2114      	movs	r1, #20
 8014982:	200e      	movs	r0, #14
 8014984:	f7f6 fdf8 	bl	800b578 <pbuf_alloc>
 8014988:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801498c:	2b00      	cmp	r3, #0
 801498e:	f000 80d4 	beq.w	8014b3a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014994:	895b      	ldrh	r3, [r3, #10]
 8014996:	2b13      	cmp	r3, #19
 8014998:	d806      	bhi.n	80149a8 <ip4_frag+0xd0>
 801499a:	4b6b      	ldr	r3, [pc, #428]	; (8014b48 <ip4_frag+0x270>)
 801499c:	f240 3225 	movw	r2, #805	; 0x325
 80149a0:	496c      	ldr	r1, [pc, #432]	; (8014b54 <ip4_frag+0x27c>)
 80149a2:	486b      	ldr	r0, [pc, #428]	; (8014b50 <ip4_frag+0x278>)
 80149a4:	f000 fb0e 	bl	8014fc4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80149a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149aa:	685b      	ldr	r3, [r3, #4]
 80149ac:	2214      	movs	r2, #20
 80149ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80149b0:	4618      	mov	r0, r3
 80149b2:	f000 faf4 	bl	8014f9e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80149b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b8:	685b      	ldr	r3, [r3, #4]
 80149ba:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80149bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80149be:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80149c2:	e064      	b.n	8014a8e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	895a      	ldrh	r2, [r3, #10]
 80149c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80149ca:	1ad3      	subs	r3, r2, r3
 80149cc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80149ce:	68fb      	ldr	r3, [r7, #12]
 80149d0:	895b      	ldrh	r3, [r3, #10]
 80149d2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80149d4:	429a      	cmp	r2, r3
 80149d6:	d906      	bls.n	80149e6 <ip4_frag+0x10e>
 80149d8:	4b5b      	ldr	r3, [pc, #364]	; (8014b48 <ip4_frag+0x270>)
 80149da:	f240 322d 	movw	r2, #813	; 0x32d
 80149de:	495e      	ldr	r1, [pc, #376]	; (8014b58 <ip4_frag+0x280>)
 80149e0:	485b      	ldr	r0, [pc, #364]	; (8014b50 <ip4_frag+0x278>)
 80149e2:	f000 faef 	bl	8014fc4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80149e6:	8bfa      	ldrh	r2, [r7, #30]
 80149e8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80149ec:	4293      	cmp	r3, r2
 80149ee:	bf28      	it	cs
 80149f0:	4613      	movcs	r3, r2
 80149f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80149f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d105      	bne.n	8014a0a <ip4_frag+0x132>
        poff = 0;
 80149fe:	2300      	movs	r3, #0
 8014a00:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	60fb      	str	r3, [r7, #12]
        continue;
 8014a08:	e041      	b.n	8014a8e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014a0a:	f7ff ff0d 	bl	8014828 <ip_frag_alloc_pbuf_custom_ref>
 8014a0e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014a10:	69bb      	ldr	r3, [r7, #24]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d103      	bne.n	8014a1e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014a16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a18:	f7f7 f88e 	bl	800bb38 <pbuf_free>
        goto memerr;
 8014a1c:	e08e      	b.n	8014b3c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014a1e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014a24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014a26:	4413      	add	r3, r2
 8014a28:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014a2c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014a30:	9201      	str	r2, [sp, #4]
 8014a32:	9300      	str	r3, [sp, #0]
 8014a34:	4603      	mov	r3, r0
 8014a36:	2241      	movs	r2, #65	; 0x41
 8014a38:	2000      	movs	r0, #0
 8014a3a:	f7f6 fec3 	bl	800b7c4 <pbuf_alloced_custom>
 8014a3e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d106      	bne.n	8014a54 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014a46:	69b8      	ldr	r0, [r7, #24]
 8014a48:	f7ff fef6 	bl	8014838 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014a4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a4e:	f7f7 f873 	bl	800bb38 <pbuf_free>
        goto memerr;
 8014a52:	e073      	b.n	8014b3c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8014a54:	68f8      	ldr	r0, [r7, #12]
 8014a56:	f7f7 f915 	bl	800bc84 <pbuf_ref>
      pcr->original = p;
 8014a5a:	69bb      	ldr	r3, [r7, #24]
 8014a5c:	68fa      	ldr	r2, [r7, #12]
 8014a5e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014a60:	69bb      	ldr	r3, [r7, #24]
 8014a62:	4a3e      	ldr	r2, [pc, #248]	; (8014b5c <ip4_frag+0x284>)
 8014a64:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014a66:	6979      	ldr	r1, [r7, #20]
 8014a68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a6a:	f7f7 f933 	bl	800bcd4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014a6e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014a72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014a76:	1ad3      	subs	r3, r2, r3
 8014a78:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014a7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d004      	beq.n	8014a8e <ip4_frag+0x1b6>
        poff = 0;
 8014a84:	2300      	movs	r3, #0
 8014a86:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	681b      	ldr	r3, [r3, #0]
 8014a8c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014a8e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d196      	bne.n	80149c4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014a96:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014a98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014a9c:	4413      	add	r3, r2
 8014a9e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014aa0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014aa4:	68bb      	ldr	r3, [r7, #8]
 8014aa6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014aa8:	3b14      	subs	r3, #20
 8014aaa:	429a      	cmp	r2, r3
 8014aac:	bfd4      	ite	le
 8014aae:	2301      	movle	r3, #1
 8014ab0:	2300      	movgt	r3, #0
 8014ab2:	b2db      	uxtb	r3, r3
 8014ab4:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014ab6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014aba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014abe:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014ac0:	6a3b      	ldr	r3, [r7, #32]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d002      	beq.n	8014acc <ip4_frag+0x1f4>
 8014ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d003      	beq.n	8014ad4 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014acc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014ace:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014ad2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014ad4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	f7f5 fc50 	bl	800a37c <lwip_htons>
 8014adc:	4603      	mov	r3, r0
 8014ade:	461a      	mov	r2, r3
 8014ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014ae4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014ae6:	3314      	adds	r3, #20
 8014ae8:	b29b      	uxth	r3, r3
 8014aea:	4618      	mov	r0, r3
 8014aec:	f7f5 fc46 	bl	800a37c <lwip_htons>
 8014af0:	4603      	mov	r3, r0
 8014af2:	461a      	mov	r2, r3
 8014af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014af6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014afa:	2200      	movs	r2, #0
 8014afc:	729a      	strb	r2, [r3, #10]
 8014afe:	2200      	movs	r2, #0
 8014b00:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014b02:	68bb      	ldr	r3, [r7, #8]
 8014b04:	695b      	ldr	r3, [r3, #20]
 8014b06:	687a      	ldr	r2, [r7, #4]
 8014b08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014b0a:	68b8      	ldr	r0, [r7, #8]
 8014b0c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014b0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014b10:	f7f7 f812 	bl	800bb38 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014b14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014b18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014b1a:	1ad3      	subs	r3, r2, r3
 8014b1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014b20:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014b24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014b26:	4413      	add	r3, r2
 8014b28:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014b2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	f47f af1a 	bne.w	801496a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014b36:	2300      	movs	r3, #0
 8014b38:	e002      	b.n	8014b40 <ip4_frag+0x268>
      goto memerr;
 8014b3a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014b3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014b40:	4618      	mov	r0, r3
 8014b42:	3748      	adds	r7, #72	; 0x48
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd80      	pop	{r7, pc}
 8014b48:	08018914 	.word	0x08018914
 8014b4c:	08018af0 	.word	0x08018af0
 8014b50:	0801895c 	.word	0x0801895c
 8014b54:	08018b0c 	.word	0x08018b0c
 8014b58:	08018b2c 	.word	0x08018b2c
 8014b5c:	08014871 	.word	0x08014871

08014b60 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b086      	sub	sp, #24
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
 8014b68:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014b6a:	230e      	movs	r3, #14
 8014b6c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	895b      	ldrh	r3, [r3, #10]
 8014b72:	2b0e      	cmp	r3, #14
 8014b74:	d96e      	bls.n	8014c54 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	7bdb      	ldrb	r3, [r3, #15]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d106      	bne.n	8014b8c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014b84:	3301      	adds	r3, #1
 8014b86:	b2da      	uxtb	r2, r3
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	685b      	ldr	r3, [r3, #4]
 8014b90:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014b92:	693b      	ldr	r3, [r7, #16]
 8014b94:	7b1a      	ldrb	r2, [r3, #12]
 8014b96:	7b5b      	ldrb	r3, [r3, #13]
 8014b98:	021b      	lsls	r3, r3, #8
 8014b9a:	4313      	orrs	r3, r2
 8014b9c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014b9e:	693b      	ldr	r3, [r7, #16]
 8014ba0:	781b      	ldrb	r3, [r3, #0]
 8014ba2:	f003 0301 	and.w	r3, r3, #1
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d023      	beq.n	8014bf2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014baa:	693b      	ldr	r3, [r7, #16]
 8014bac:	781b      	ldrb	r3, [r3, #0]
 8014bae:	2b01      	cmp	r3, #1
 8014bb0:	d10f      	bne.n	8014bd2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014bb2:	693b      	ldr	r3, [r7, #16]
 8014bb4:	785b      	ldrb	r3, [r3, #1]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d11b      	bne.n	8014bf2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014bba:	693b      	ldr	r3, [r7, #16]
 8014bbc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014bbe:	2b5e      	cmp	r3, #94	; 0x5e
 8014bc0:	d117      	bne.n	8014bf2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	7b5b      	ldrb	r3, [r3, #13]
 8014bc6:	f043 0310 	orr.w	r3, r3, #16
 8014bca:	b2da      	uxtb	r2, r3
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	735a      	strb	r2, [r3, #13]
 8014bd0:	e00f      	b.n	8014bf2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014bd2:	693b      	ldr	r3, [r7, #16]
 8014bd4:	2206      	movs	r2, #6
 8014bd6:	4928      	ldr	r1, [pc, #160]	; (8014c78 <ethernet_input+0x118>)
 8014bd8:	4618      	mov	r0, r3
 8014bda:	f000 f9d1 	bl	8014f80 <memcmp>
 8014bde:	4603      	mov	r3, r0
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d106      	bne.n	8014bf2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	7b5b      	ldrb	r3, [r3, #13]
 8014be8:	f043 0308 	orr.w	r3, r3, #8
 8014bec:	b2da      	uxtb	r2, r3
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014bf2:	89fb      	ldrh	r3, [r7, #14]
 8014bf4:	2b08      	cmp	r3, #8
 8014bf6:	d003      	beq.n	8014c00 <ethernet_input+0xa0>
 8014bf8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014bfc:	d014      	beq.n	8014c28 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014bfe:	e032      	b.n	8014c66 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014c00:	683b      	ldr	r3, [r7, #0]
 8014c02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014c06:	f003 0308 	and.w	r3, r3, #8
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d024      	beq.n	8014c58 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014c0e:	8afb      	ldrh	r3, [r7, #22]
 8014c10:	4619      	mov	r1, r3
 8014c12:	6878      	ldr	r0, [r7, #4]
 8014c14:	f7f6 ff0a 	bl	800ba2c <pbuf_remove_header>
 8014c18:	4603      	mov	r3, r0
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d11e      	bne.n	8014c5c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014c1e:	6839      	ldr	r1, [r7, #0]
 8014c20:	6878      	ldr	r0, [r7, #4]
 8014c22:	f7fe ff2d 	bl	8013a80 <ip4_input>
      break;
 8014c26:	e013      	b.n	8014c50 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014c2e:	f003 0308 	and.w	r3, r3, #8
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d014      	beq.n	8014c60 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014c36:	8afb      	ldrh	r3, [r7, #22]
 8014c38:	4619      	mov	r1, r3
 8014c3a:	6878      	ldr	r0, [r7, #4]
 8014c3c:	f7f6 fef6 	bl	800ba2c <pbuf_remove_header>
 8014c40:	4603      	mov	r3, r0
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d10e      	bne.n	8014c64 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014c46:	6839      	ldr	r1, [r7, #0]
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f7fe f8cd 	bl	8012de8 <etharp_input>
      break;
 8014c4e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014c50:	2300      	movs	r3, #0
 8014c52:	e00c      	b.n	8014c6e <ethernet_input+0x10e>
    goto free_and_return;
 8014c54:	bf00      	nop
 8014c56:	e006      	b.n	8014c66 <ethernet_input+0x106>
        goto free_and_return;
 8014c58:	bf00      	nop
 8014c5a:	e004      	b.n	8014c66 <ethernet_input+0x106>
        goto free_and_return;
 8014c5c:	bf00      	nop
 8014c5e:	e002      	b.n	8014c66 <ethernet_input+0x106>
        goto free_and_return;
 8014c60:	bf00      	nop
 8014c62:	e000      	b.n	8014c66 <ethernet_input+0x106>
        goto free_and_return;
 8014c64:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014c66:	6878      	ldr	r0, [r7, #4]
 8014c68:	f7f6 ff66 	bl	800bb38 <pbuf_free>
  return ERR_OK;
 8014c6c:	2300      	movs	r3, #0
}
 8014c6e:	4618      	mov	r0, r3
 8014c70:	3718      	adds	r7, #24
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd80      	pop	{r7, pc}
 8014c76:	bf00      	nop
 8014c78:	0802983c 	.word	0x0802983c

08014c7c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b086      	sub	sp, #24
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	60f8      	str	r0, [r7, #12]
 8014c84:	60b9      	str	r1, [r7, #8]
 8014c86:	607a      	str	r2, [r7, #4]
 8014c88:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014c8a:	8c3b      	ldrh	r3, [r7, #32]
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	f7f5 fb75 	bl	800a37c <lwip_htons>
 8014c92:	4603      	mov	r3, r0
 8014c94:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014c96:	210e      	movs	r1, #14
 8014c98:	68b8      	ldr	r0, [r7, #8]
 8014c9a:	f7f6 feb7 	bl	800ba0c <pbuf_add_header>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d125      	bne.n	8014cf0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014ca4:	68bb      	ldr	r3, [r7, #8]
 8014ca6:	685b      	ldr	r3, [r3, #4]
 8014ca8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014caa:	693b      	ldr	r3, [r7, #16]
 8014cac:	8afa      	ldrh	r2, [r7, #22]
 8014cae:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014cb0:	693b      	ldr	r3, [r7, #16]
 8014cb2:	2206      	movs	r2, #6
 8014cb4:	6839      	ldr	r1, [r7, #0]
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f000 f971 	bl	8014f9e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014cbc:	693b      	ldr	r3, [r7, #16]
 8014cbe:	3306      	adds	r3, #6
 8014cc0:	2206      	movs	r2, #6
 8014cc2:	6879      	ldr	r1, [r7, #4]
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	f000 f96a 	bl	8014f9e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014cd0:	2b06      	cmp	r3, #6
 8014cd2:	d006      	beq.n	8014ce2 <ethernet_output+0x66>
 8014cd4:	4b0a      	ldr	r3, [pc, #40]	; (8014d00 <ethernet_output+0x84>)
 8014cd6:	f240 1233 	movw	r2, #307	; 0x133
 8014cda:	490a      	ldr	r1, [pc, #40]	; (8014d04 <ethernet_output+0x88>)
 8014cdc:	480a      	ldr	r0, [pc, #40]	; (8014d08 <ethernet_output+0x8c>)
 8014cde:	f000 f971 	bl	8014fc4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014ce2:	68fb      	ldr	r3, [r7, #12]
 8014ce4:	699b      	ldr	r3, [r3, #24]
 8014ce6:	68b9      	ldr	r1, [r7, #8]
 8014ce8:	68f8      	ldr	r0, [r7, #12]
 8014cea:	4798      	blx	r3
 8014cec:	4603      	mov	r3, r0
 8014cee:	e002      	b.n	8014cf6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014cf0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014cf2:	f06f 0301 	mvn.w	r3, #1
}
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	3718      	adds	r7, #24
 8014cfa:	46bd      	mov	sp, r7
 8014cfc:	bd80      	pop	{r7, pc}
 8014cfe:	bf00      	nop
 8014d00:	08018b3c 	.word	0x08018b3c
 8014d04:	08018b74 	.word	0x08018b74
 8014d08:	08018ba8 	.word	0x08018ba8

08014d0c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b086      	sub	sp, #24
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
 8014d14:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	60bb      	str	r3, [r7, #8]
 8014d1a:	2304      	movs	r3, #4
 8014d1c:	60fb      	str	r3, [r7, #12]
 8014d1e:	2300      	movs	r3, #0
 8014d20:	613b      	str	r3, [r7, #16]
 8014d22:	2300      	movs	r3, #0
 8014d24:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8014d26:	f107 0308 	add.w	r3, r7, #8
 8014d2a:	2100      	movs	r1, #0
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f7f1 fe3f 	bl	80069b0 <osMessageCreate>
 8014d32:	4602      	mov	r2, r0
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d102      	bne.n	8014d46 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8014d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014d44:	e000      	b.n	8014d48 <sys_mbox_new+0x3c>

  return ERR_OK;
 8014d46:	2300      	movs	r3, #0
}
 8014d48:	4618      	mov	r0, r3
 8014d4a:	3718      	adds	r7, #24
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}

08014d50 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b084      	sub	sp, #16
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
 8014d58:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	6839      	ldr	r1, [r7, #0]
 8014d60:	2200      	movs	r2, #0
 8014d62:	4618      	mov	r0, r3
 8014d64:	f7f1 fe4e 	bl	8006a04 <osMessagePut>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d102      	bne.n	8014d74 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	73fb      	strb	r3, [r7, #15]
 8014d72:	e001      	b.n	8014d78 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014d74:	23ff      	movs	r3, #255	; 0xff
 8014d76:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	3710      	adds	r7, #16
 8014d80:	46bd      	mov	sp, r7
 8014d82:	bd80      	pop	{r7, pc}

08014d84 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b08c      	sub	sp, #48	; 0x30
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	61f8      	str	r0, [r7, #28]
 8014d8c:	61b9      	str	r1, [r7, #24]
 8014d8e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014d90:	f7f1 fc49 	bl	8006626 <osKernelSysTick>
 8014d94:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014d96:	697b      	ldr	r3, [r7, #20]
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	d017      	beq.n	8014dcc <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014d9c:	69fb      	ldr	r3, [r7, #28]
 8014d9e:	6819      	ldr	r1, [r3, #0]
 8014da0:	f107 0320 	add.w	r3, r7, #32
 8014da4:	697a      	ldr	r2, [r7, #20]
 8014da6:	4618      	mov	r0, r3
 8014da8:	f7f1 fe6c 	bl	8006a84 <osMessageGet>

    if(event.status == osEventMessage)
 8014dac:	6a3b      	ldr	r3, [r7, #32]
 8014dae:	2b10      	cmp	r3, #16
 8014db0:	d109      	bne.n	8014dc6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8014db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014db4:	461a      	mov	r2, r3
 8014db6:	69bb      	ldr	r3, [r7, #24]
 8014db8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8014dba:	f7f1 fc34 	bl	8006626 <osKernelSysTick>
 8014dbe:	4602      	mov	r2, r0
 8014dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dc2:	1ad3      	subs	r3, r2, r3
 8014dc4:	e019      	b.n	8014dfa <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014dca:	e016      	b.n	8014dfa <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8014dcc:	69fb      	ldr	r3, [r7, #28]
 8014dce:	6819      	ldr	r1, [r3, #0]
 8014dd0:	463b      	mov	r3, r7
 8014dd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f7f1 fe54 	bl	8006a84 <osMessageGet>
 8014ddc:	f107 0320 	add.w	r3, r7, #32
 8014de0:	463a      	mov	r2, r7
 8014de2:	ca07      	ldmia	r2, {r0, r1, r2}
 8014de4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8014de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dea:	461a      	mov	r2, r3
 8014dec:	69bb      	ldr	r3, [r7, #24]
 8014dee:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8014df0:	f7f1 fc19 	bl	8006626 <osKernelSysTick>
 8014df4:	4602      	mov	r2, r0
 8014df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014df8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	3730      	adds	r7, #48	; 0x30
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	bd80      	pop	{r7, pc}

08014e02 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8014e02:	b480      	push	{r7}
 8014e04:	b083      	sub	sp, #12
 8014e06:	af00      	add	r7, sp, #0
 8014e08:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d101      	bne.n	8014e16 <sys_mbox_valid+0x14>
    return 0;
 8014e12:	2300      	movs	r3, #0
 8014e14:	e000      	b.n	8014e18 <sys_mbox_valid+0x16>
  else
    return 1;
 8014e16:	2301      	movs	r3, #1
}
 8014e18:	4618      	mov	r0, r3
 8014e1a:	370c      	adds	r7, #12
 8014e1c:	46bd      	mov	sp, r7
 8014e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e22:	4770      	bx	lr

08014e24 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8014e28:	4803      	ldr	r0, [pc, #12]	; (8014e38 <sys_init+0x14>)
 8014e2a:	f7f1 fc6c 	bl	8006706 <osMutexCreate>
 8014e2e:	4602      	mov	r2, r0
 8014e30:	4b02      	ldr	r3, [pc, #8]	; (8014e3c <sys_init+0x18>)
 8014e32:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014e34:	bf00      	nop
 8014e36:	bd80      	pop	{r7, pc}
 8014e38:	0802984c 	.word	0x0802984c
 8014e3c:	2000b45c 	.word	0x2000b45c

08014e40 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b084      	sub	sp, #16
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8014e48:	2300      	movs	r3, #0
 8014e4a:	60bb      	str	r3, [r7, #8]
 8014e4c:	2300      	movs	r3, #0
 8014e4e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014e50:	f107 0308 	add.w	r3, r7, #8
 8014e54:	4618      	mov	r0, r3
 8014e56:	f7f1 fc56 	bl	8006706 <osMutexCreate>
 8014e5a:	4602      	mov	r2, r0
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d102      	bne.n	8014e6e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014e68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e6c:	e000      	b.n	8014e70 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014e6e:	2300      	movs	r3, #0
}
 8014e70:	4618      	mov	r0, r3
 8014e72:	3710      	adds	r7, #16
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}

08014e78 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7f1 fc55 	bl	8006738 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8014e8e:	bf00      	nop
 8014e90:	3708      	adds	r7, #8
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}

08014e96 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014e96:	b580      	push	{r7, lr}
 8014e98:	b082      	sub	sp, #8
 8014e9a:	af00      	add	r7, sp, #0
 8014e9c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	f7f1 fc96 	bl	80067d4 <osMutexRelease>
}
 8014ea8:	bf00      	nop
 8014eaa:	3708      	adds	r7, #8
 8014eac:	46bd      	mov	sp, r7
 8014eae:	bd80      	pop	{r7, pc}

08014eb0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b08c      	sub	sp, #48	; 0x30
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	60f8      	str	r0, [r7, #12]
 8014eb8:	60b9      	str	r1, [r7, #8]
 8014eba:	607a      	str	r2, [r7, #4]
 8014ebc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8014ebe:	f107 0314 	add.w	r3, r7, #20
 8014ec2:	2200      	movs	r2, #0
 8014ec4:	601a      	str	r2, [r3, #0]
 8014ec6:	605a      	str	r2, [r3, #4]
 8014ec8:	609a      	str	r2, [r3, #8]
 8014eca:	60da      	str	r2, [r3, #12]
 8014ecc:	611a      	str	r2, [r3, #16]
 8014ece:	615a      	str	r2, [r3, #20]
 8014ed0:	619a      	str	r2, [r3, #24]
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	617b      	str	r3, [r7, #20]
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	61bb      	str	r3, [r7, #24]
 8014eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014edc:	b21b      	sxth	r3, r3
 8014ede:	83bb      	strh	r3, [r7, #28]
 8014ee0:	683b      	ldr	r3, [r7, #0]
 8014ee2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8014ee4:	f107 0314 	add.w	r3, r7, #20
 8014ee8:	6879      	ldr	r1, [r7, #4]
 8014eea:	4618      	mov	r0, r3
 8014eec:	f7f1 fbab 	bl	8006646 <osThreadCreate>
 8014ef0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	3730      	adds	r7, #48	; 0x30
 8014ef6:	46bd      	mov	sp, r7
 8014ef8:	bd80      	pop	{r7, pc}
	...

08014efc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8014f00:	4b04      	ldr	r3, [pc, #16]	; (8014f14 <sys_arch_protect+0x18>)
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014f08:	4618      	mov	r0, r3
 8014f0a:	f7f1 fc15 	bl	8006738 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8014f0e:	2301      	movs	r3, #1
}
 8014f10:	4618      	mov	r0, r3
 8014f12:	bd80      	pop	{r7, pc}
 8014f14:	2000b45c 	.word	0x2000b45c

08014f18 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b082      	sub	sp, #8
 8014f1c:	af00      	add	r7, sp, #0
 8014f1e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014f20:	4b04      	ldr	r3, [pc, #16]	; (8014f34 <sys_arch_unprotect+0x1c>)
 8014f22:	681b      	ldr	r3, [r3, #0]
 8014f24:	4618      	mov	r0, r3
 8014f26:	f7f1 fc55 	bl	80067d4 <osMutexRelease>
}
 8014f2a:	bf00      	nop
 8014f2c:	3708      	adds	r7, #8
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}
 8014f32:	bf00      	nop
 8014f34:	2000b45c 	.word	0x2000b45c

08014f38 <__libc_init_array>:
 8014f38:	b570      	push	{r4, r5, r6, lr}
 8014f3a:	4e0d      	ldr	r6, [pc, #52]	; (8014f70 <__libc_init_array+0x38>)
 8014f3c:	4c0d      	ldr	r4, [pc, #52]	; (8014f74 <__libc_init_array+0x3c>)
 8014f3e:	1ba4      	subs	r4, r4, r6
 8014f40:	10a4      	asrs	r4, r4, #2
 8014f42:	2500      	movs	r5, #0
 8014f44:	42a5      	cmp	r5, r4
 8014f46:	d109      	bne.n	8014f5c <__libc_init_array+0x24>
 8014f48:	4e0b      	ldr	r6, [pc, #44]	; (8014f78 <__libc_init_array+0x40>)
 8014f4a:	4c0c      	ldr	r4, [pc, #48]	; (8014f7c <__libc_init_array+0x44>)
 8014f4c:	f000 ff7a 	bl	8015e44 <_init>
 8014f50:	1ba4      	subs	r4, r4, r6
 8014f52:	10a4      	asrs	r4, r4, #2
 8014f54:	2500      	movs	r5, #0
 8014f56:	42a5      	cmp	r5, r4
 8014f58:	d105      	bne.n	8014f66 <__libc_init_array+0x2e>
 8014f5a:	bd70      	pop	{r4, r5, r6, pc}
 8014f5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014f60:	4798      	blx	r3
 8014f62:	3501      	adds	r5, #1
 8014f64:	e7ee      	b.n	8014f44 <__libc_init_array+0xc>
 8014f66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014f6a:	4798      	blx	r3
 8014f6c:	3501      	adds	r5, #1
 8014f6e:	e7f2      	b.n	8014f56 <__libc_init_array+0x1e>
 8014f70:	080298f4 	.word	0x080298f4
 8014f74:	080298f4 	.word	0x080298f4
 8014f78:	080298f4 	.word	0x080298f4
 8014f7c:	080298f8 	.word	0x080298f8

08014f80 <memcmp>:
 8014f80:	b530      	push	{r4, r5, lr}
 8014f82:	2400      	movs	r4, #0
 8014f84:	42a2      	cmp	r2, r4
 8014f86:	d101      	bne.n	8014f8c <memcmp+0xc>
 8014f88:	2000      	movs	r0, #0
 8014f8a:	e007      	b.n	8014f9c <memcmp+0x1c>
 8014f8c:	5d03      	ldrb	r3, [r0, r4]
 8014f8e:	3401      	adds	r4, #1
 8014f90:	190d      	adds	r5, r1, r4
 8014f92:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8014f96:	42ab      	cmp	r3, r5
 8014f98:	d0f4      	beq.n	8014f84 <memcmp+0x4>
 8014f9a:	1b58      	subs	r0, r3, r5
 8014f9c:	bd30      	pop	{r4, r5, pc}

08014f9e <memcpy>:
 8014f9e:	b510      	push	{r4, lr}
 8014fa0:	1e43      	subs	r3, r0, #1
 8014fa2:	440a      	add	r2, r1
 8014fa4:	4291      	cmp	r1, r2
 8014fa6:	d100      	bne.n	8014faa <memcpy+0xc>
 8014fa8:	bd10      	pop	{r4, pc}
 8014faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014fae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014fb2:	e7f7      	b.n	8014fa4 <memcpy+0x6>

08014fb4 <memset>:
 8014fb4:	4402      	add	r2, r0
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	4293      	cmp	r3, r2
 8014fba:	d100      	bne.n	8014fbe <memset+0xa>
 8014fbc:	4770      	bx	lr
 8014fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8014fc2:	e7f9      	b.n	8014fb8 <memset+0x4>

08014fc4 <iprintf>:
 8014fc4:	b40f      	push	{r0, r1, r2, r3}
 8014fc6:	4b0a      	ldr	r3, [pc, #40]	; (8014ff0 <iprintf+0x2c>)
 8014fc8:	b513      	push	{r0, r1, r4, lr}
 8014fca:	681c      	ldr	r4, [r3, #0]
 8014fcc:	b124      	cbz	r4, 8014fd8 <iprintf+0x14>
 8014fce:	69a3      	ldr	r3, [r4, #24]
 8014fd0:	b913      	cbnz	r3, 8014fd8 <iprintf+0x14>
 8014fd2:	4620      	mov	r0, r4
 8014fd4:	f000 f8a2 	bl	801511c <__sinit>
 8014fd8:	ab05      	add	r3, sp, #20
 8014fda:	9a04      	ldr	r2, [sp, #16]
 8014fdc:	68a1      	ldr	r1, [r4, #8]
 8014fde:	9301      	str	r3, [sp, #4]
 8014fe0:	4620      	mov	r0, r4
 8014fe2:	f000 f9ff 	bl	80153e4 <_vfiprintf_r>
 8014fe6:	b002      	add	sp, #8
 8014fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014fec:	b004      	add	sp, #16
 8014fee:	4770      	bx	lr
 8014ff0:	2000001c 	.word	0x2000001c

08014ff4 <rand>:
 8014ff4:	b538      	push	{r3, r4, r5, lr}
 8014ff6:	4b13      	ldr	r3, [pc, #76]	; (8015044 <rand+0x50>)
 8014ff8:	681c      	ldr	r4, [r3, #0]
 8014ffa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014ffc:	b97b      	cbnz	r3, 801501e <rand+0x2a>
 8014ffe:	2018      	movs	r0, #24
 8015000:	f000 f916 	bl	8015230 <malloc>
 8015004:	4a10      	ldr	r2, [pc, #64]	; (8015048 <rand+0x54>)
 8015006:	4b11      	ldr	r3, [pc, #68]	; (801504c <rand+0x58>)
 8015008:	63a0      	str	r0, [r4, #56]	; 0x38
 801500a:	e9c0 2300 	strd	r2, r3, [r0]
 801500e:	4b10      	ldr	r3, [pc, #64]	; (8015050 <rand+0x5c>)
 8015010:	6083      	str	r3, [r0, #8]
 8015012:	230b      	movs	r3, #11
 8015014:	8183      	strh	r3, [r0, #12]
 8015016:	2201      	movs	r2, #1
 8015018:	2300      	movs	r3, #0
 801501a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801501e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015020:	480c      	ldr	r0, [pc, #48]	; (8015054 <rand+0x60>)
 8015022:	690a      	ldr	r2, [r1, #16]
 8015024:	694b      	ldr	r3, [r1, #20]
 8015026:	4c0c      	ldr	r4, [pc, #48]	; (8015058 <rand+0x64>)
 8015028:	4350      	muls	r0, r2
 801502a:	fb04 0003 	mla	r0, r4, r3, r0
 801502e:	fba2 2304 	umull	r2, r3, r2, r4
 8015032:	4403      	add	r3, r0
 8015034:	1c54      	adds	r4, r2, #1
 8015036:	f143 0500 	adc.w	r5, r3, #0
 801503a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801503e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8015042:	bd38      	pop	{r3, r4, r5, pc}
 8015044:	2000001c 	.word	0x2000001c
 8015048:	abcd330e 	.word	0xabcd330e
 801504c:	e66d1234 	.word	0xe66d1234
 8015050:	0005deec 	.word	0x0005deec
 8015054:	5851f42d 	.word	0x5851f42d
 8015058:	4c957f2d 	.word	0x4c957f2d

0801505c <strchr>:
 801505c:	b2c9      	uxtb	r1, r1
 801505e:	4603      	mov	r3, r0
 8015060:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015064:	b11a      	cbz	r2, 801506e <strchr+0x12>
 8015066:	428a      	cmp	r2, r1
 8015068:	d1f9      	bne.n	801505e <strchr+0x2>
 801506a:	4618      	mov	r0, r3
 801506c:	4770      	bx	lr
 801506e:	2900      	cmp	r1, #0
 8015070:	bf18      	it	ne
 8015072:	2300      	movne	r3, #0
 8015074:	e7f9      	b.n	801506a <strchr+0xe>

08015076 <strncmp>:
 8015076:	b510      	push	{r4, lr}
 8015078:	b16a      	cbz	r2, 8015096 <strncmp+0x20>
 801507a:	3901      	subs	r1, #1
 801507c:	1884      	adds	r4, r0, r2
 801507e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015082:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015086:	4293      	cmp	r3, r2
 8015088:	d103      	bne.n	8015092 <strncmp+0x1c>
 801508a:	42a0      	cmp	r0, r4
 801508c:	d001      	beq.n	8015092 <strncmp+0x1c>
 801508e:	2b00      	cmp	r3, #0
 8015090:	d1f5      	bne.n	801507e <strncmp+0x8>
 8015092:	1a98      	subs	r0, r3, r2
 8015094:	bd10      	pop	{r4, pc}
 8015096:	4610      	mov	r0, r2
 8015098:	e7fc      	b.n	8015094 <strncmp+0x1e>
	...

0801509c <std>:
 801509c:	2300      	movs	r3, #0
 801509e:	b510      	push	{r4, lr}
 80150a0:	4604      	mov	r4, r0
 80150a2:	e9c0 3300 	strd	r3, r3, [r0]
 80150a6:	6083      	str	r3, [r0, #8]
 80150a8:	8181      	strh	r1, [r0, #12]
 80150aa:	6643      	str	r3, [r0, #100]	; 0x64
 80150ac:	81c2      	strh	r2, [r0, #14]
 80150ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80150b2:	6183      	str	r3, [r0, #24]
 80150b4:	4619      	mov	r1, r3
 80150b6:	2208      	movs	r2, #8
 80150b8:	305c      	adds	r0, #92	; 0x5c
 80150ba:	f7ff ff7b 	bl	8014fb4 <memset>
 80150be:	4b05      	ldr	r3, [pc, #20]	; (80150d4 <std+0x38>)
 80150c0:	6263      	str	r3, [r4, #36]	; 0x24
 80150c2:	4b05      	ldr	r3, [pc, #20]	; (80150d8 <std+0x3c>)
 80150c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80150c6:	4b05      	ldr	r3, [pc, #20]	; (80150dc <std+0x40>)
 80150c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80150ca:	4b05      	ldr	r3, [pc, #20]	; (80150e0 <std+0x44>)
 80150cc:	6224      	str	r4, [r4, #32]
 80150ce:	6323      	str	r3, [r4, #48]	; 0x30
 80150d0:	bd10      	pop	{r4, pc}
 80150d2:	bf00      	nop
 80150d4:	08015941 	.word	0x08015941
 80150d8:	08015963 	.word	0x08015963
 80150dc:	0801599b 	.word	0x0801599b
 80150e0:	080159bf 	.word	0x080159bf

080150e4 <_cleanup_r>:
 80150e4:	4901      	ldr	r1, [pc, #4]	; (80150ec <_cleanup_r+0x8>)
 80150e6:	f000 b885 	b.w	80151f4 <_fwalk_reent>
 80150ea:	bf00      	nop
 80150ec:	08015c99 	.word	0x08015c99

080150f0 <__sfmoreglue>:
 80150f0:	b570      	push	{r4, r5, r6, lr}
 80150f2:	1e4a      	subs	r2, r1, #1
 80150f4:	2568      	movs	r5, #104	; 0x68
 80150f6:	4355      	muls	r5, r2
 80150f8:	460e      	mov	r6, r1
 80150fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80150fe:	f000 f8ed 	bl	80152dc <_malloc_r>
 8015102:	4604      	mov	r4, r0
 8015104:	b140      	cbz	r0, 8015118 <__sfmoreglue+0x28>
 8015106:	2100      	movs	r1, #0
 8015108:	e9c0 1600 	strd	r1, r6, [r0]
 801510c:	300c      	adds	r0, #12
 801510e:	60a0      	str	r0, [r4, #8]
 8015110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015114:	f7ff ff4e 	bl	8014fb4 <memset>
 8015118:	4620      	mov	r0, r4
 801511a:	bd70      	pop	{r4, r5, r6, pc}

0801511c <__sinit>:
 801511c:	6983      	ldr	r3, [r0, #24]
 801511e:	b510      	push	{r4, lr}
 8015120:	4604      	mov	r4, r0
 8015122:	bb33      	cbnz	r3, 8015172 <__sinit+0x56>
 8015124:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015128:	6503      	str	r3, [r0, #80]	; 0x50
 801512a:	4b12      	ldr	r3, [pc, #72]	; (8015174 <__sinit+0x58>)
 801512c:	4a12      	ldr	r2, [pc, #72]	; (8015178 <__sinit+0x5c>)
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	6282      	str	r2, [r0, #40]	; 0x28
 8015132:	4298      	cmp	r0, r3
 8015134:	bf04      	itt	eq
 8015136:	2301      	moveq	r3, #1
 8015138:	6183      	streq	r3, [r0, #24]
 801513a:	f000 f81f 	bl	801517c <__sfp>
 801513e:	6060      	str	r0, [r4, #4]
 8015140:	4620      	mov	r0, r4
 8015142:	f000 f81b 	bl	801517c <__sfp>
 8015146:	60a0      	str	r0, [r4, #8]
 8015148:	4620      	mov	r0, r4
 801514a:	f000 f817 	bl	801517c <__sfp>
 801514e:	2200      	movs	r2, #0
 8015150:	60e0      	str	r0, [r4, #12]
 8015152:	2104      	movs	r1, #4
 8015154:	6860      	ldr	r0, [r4, #4]
 8015156:	f7ff ffa1 	bl	801509c <std>
 801515a:	2201      	movs	r2, #1
 801515c:	2109      	movs	r1, #9
 801515e:	68a0      	ldr	r0, [r4, #8]
 8015160:	f7ff ff9c 	bl	801509c <std>
 8015164:	2202      	movs	r2, #2
 8015166:	2112      	movs	r1, #18
 8015168:	68e0      	ldr	r0, [r4, #12]
 801516a:	f7ff ff97 	bl	801509c <std>
 801516e:	2301      	movs	r3, #1
 8015170:	61a3      	str	r3, [r4, #24]
 8015172:	bd10      	pop	{r4, pc}
 8015174:	08029854 	.word	0x08029854
 8015178:	080150e5 	.word	0x080150e5

0801517c <__sfp>:
 801517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801517e:	4b1b      	ldr	r3, [pc, #108]	; (80151ec <__sfp+0x70>)
 8015180:	681e      	ldr	r6, [r3, #0]
 8015182:	69b3      	ldr	r3, [r6, #24]
 8015184:	4607      	mov	r7, r0
 8015186:	b913      	cbnz	r3, 801518e <__sfp+0x12>
 8015188:	4630      	mov	r0, r6
 801518a:	f7ff ffc7 	bl	801511c <__sinit>
 801518e:	3648      	adds	r6, #72	; 0x48
 8015190:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015194:	3b01      	subs	r3, #1
 8015196:	d503      	bpl.n	80151a0 <__sfp+0x24>
 8015198:	6833      	ldr	r3, [r6, #0]
 801519a:	b133      	cbz	r3, 80151aa <__sfp+0x2e>
 801519c:	6836      	ldr	r6, [r6, #0]
 801519e:	e7f7      	b.n	8015190 <__sfp+0x14>
 80151a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80151a4:	b16d      	cbz	r5, 80151c2 <__sfp+0x46>
 80151a6:	3468      	adds	r4, #104	; 0x68
 80151a8:	e7f4      	b.n	8015194 <__sfp+0x18>
 80151aa:	2104      	movs	r1, #4
 80151ac:	4638      	mov	r0, r7
 80151ae:	f7ff ff9f 	bl	80150f0 <__sfmoreglue>
 80151b2:	6030      	str	r0, [r6, #0]
 80151b4:	2800      	cmp	r0, #0
 80151b6:	d1f1      	bne.n	801519c <__sfp+0x20>
 80151b8:	230c      	movs	r3, #12
 80151ba:	603b      	str	r3, [r7, #0]
 80151bc:	4604      	mov	r4, r0
 80151be:	4620      	mov	r0, r4
 80151c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151c2:	4b0b      	ldr	r3, [pc, #44]	; (80151f0 <__sfp+0x74>)
 80151c4:	6665      	str	r5, [r4, #100]	; 0x64
 80151c6:	e9c4 5500 	strd	r5, r5, [r4]
 80151ca:	60a5      	str	r5, [r4, #8]
 80151cc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80151d0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80151d4:	2208      	movs	r2, #8
 80151d6:	4629      	mov	r1, r5
 80151d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80151dc:	f7ff feea 	bl	8014fb4 <memset>
 80151e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80151e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80151e8:	e7e9      	b.n	80151be <__sfp+0x42>
 80151ea:	bf00      	nop
 80151ec:	08029854 	.word	0x08029854
 80151f0:	ffff0001 	.word	0xffff0001

080151f4 <_fwalk_reent>:
 80151f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80151f8:	4680      	mov	r8, r0
 80151fa:	4689      	mov	r9, r1
 80151fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015200:	2600      	movs	r6, #0
 8015202:	b914      	cbnz	r4, 801520a <_fwalk_reent+0x16>
 8015204:	4630      	mov	r0, r6
 8015206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801520a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801520e:	3f01      	subs	r7, #1
 8015210:	d501      	bpl.n	8015216 <_fwalk_reent+0x22>
 8015212:	6824      	ldr	r4, [r4, #0]
 8015214:	e7f5      	b.n	8015202 <_fwalk_reent+0xe>
 8015216:	89ab      	ldrh	r3, [r5, #12]
 8015218:	2b01      	cmp	r3, #1
 801521a:	d907      	bls.n	801522c <_fwalk_reent+0x38>
 801521c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015220:	3301      	adds	r3, #1
 8015222:	d003      	beq.n	801522c <_fwalk_reent+0x38>
 8015224:	4629      	mov	r1, r5
 8015226:	4640      	mov	r0, r8
 8015228:	47c8      	blx	r9
 801522a:	4306      	orrs	r6, r0
 801522c:	3568      	adds	r5, #104	; 0x68
 801522e:	e7ee      	b.n	801520e <_fwalk_reent+0x1a>

08015230 <malloc>:
 8015230:	4b02      	ldr	r3, [pc, #8]	; (801523c <malloc+0xc>)
 8015232:	4601      	mov	r1, r0
 8015234:	6818      	ldr	r0, [r3, #0]
 8015236:	f000 b851 	b.w	80152dc <_malloc_r>
 801523a:	bf00      	nop
 801523c:	2000001c 	.word	0x2000001c

08015240 <_free_r>:
 8015240:	b538      	push	{r3, r4, r5, lr}
 8015242:	4605      	mov	r5, r0
 8015244:	2900      	cmp	r1, #0
 8015246:	d045      	beq.n	80152d4 <_free_r+0x94>
 8015248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801524c:	1f0c      	subs	r4, r1, #4
 801524e:	2b00      	cmp	r3, #0
 8015250:	bfb8      	it	lt
 8015252:	18e4      	addlt	r4, r4, r3
 8015254:	f000 fdc0 	bl	8015dd8 <__malloc_lock>
 8015258:	4a1f      	ldr	r2, [pc, #124]	; (80152d8 <_free_r+0x98>)
 801525a:	6813      	ldr	r3, [r2, #0]
 801525c:	4610      	mov	r0, r2
 801525e:	b933      	cbnz	r3, 801526e <_free_r+0x2e>
 8015260:	6063      	str	r3, [r4, #4]
 8015262:	6014      	str	r4, [r2, #0]
 8015264:	4628      	mov	r0, r5
 8015266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801526a:	f000 bdb6 	b.w	8015dda <__malloc_unlock>
 801526e:	42a3      	cmp	r3, r4
 8015270:	d90c      	bls.n	801528c <_free_r+0x4c>
 8015272:	6821      	ldr	r1, [r4, #0]
 8015274:	1862      	adds	r2, r4, r1
 8015276:	4293      	cmp	r3, r2
 8015278:	bf04      	itt	eq
 801527a:	681a      	ldreq	r2, [r3, #0]
 801527c:	685b      	ldreq	r3, [r3, #4]
 801527e:	6063      	str	r3, [r4, #4]
 8015280:	bf04      	itt	eq
 8015282:	1852      	addeq	r2, r2, r1
 8015284:	6022      	streq	r2, [r4, #0]
 8015286:	6004      	str	r4, [r0, #0]
 8015288:	e7ec      	b.n	8015264 <_free_r+0x24>
 801528a:	4613      	mov	r3, r2
 801528c:	685a      	ldr	r2, [r3, #4]
 801528e:	b10a      	cbz	r2, 8015294 <_free_r+0x54>
 8015290:	42a2      	cmp	r2, r4
 8015292:	d9fa      	bls.n	801528a <_free_r+0x4a>
 8015294:	6819      	ldr	r1, [r3, #0]
 8015296:	1858      	adds	r0, r3, r1
 8015298:	42a0      	cmp	r0, r4
 801529a:	d10b      	bne.n	80152b4 <_free_r+0x74>
 801529c:	6820      	ldr	r0, [r4, #0]
 801529e:	4401      	add	r1, r0
 80152a0:	1858      	adds	r0, r3, r1
 80152a2:	4282      	cmp	r2, r0
 80152a4:	6019      	str	r1, [r3, #0]
 80152a6:	d1dd      	bne.n	8015264 <_free_r+0x24>
 80152a8:	6810      	ldr	r0, [r2, #0]
 80152aa:	6852      	ldr	r2, [r2, #4]
 80152ac:	605a      	str	r2, [r3, #4]
 80152ae:	4401      	add	r1, r0
 80152b0:	6019      	str	r1, [r3, #0]
 80152b2:	e7d7      	b.n	8015264 <_free_r+0x24>
 80152b4:	d902      	bls.n	80152bc <_free_r+0x7c>
 80152b6:	230c      	movs	r3, #12
 80152b8:	602b      	str	r3, [r5, #0]
 80152ba:	e7d3      	b.n	8015264 <_free_r+0x24>
 80152bc:	6820      	ldr	r0, [r4, #0]
 80152be:	1821      	adds	r1, r4, r0
 80152c0:	428a      	cmp	r2, r1
 80152c2:	bf04      	itt	eq
 80152c4:	6811      	ldreq	r1, [r2, #0]
 80152c6:	6852      	ldreq	r2, [r2, #4]
 80152c8:	6062      	str	r2, [r4, #4]
 80152ca:	bf04      	itt	eq
 80152cc:	1809      	addeq	r1, r1, r0
 80152ce:	6021      	streq	r1, [r4, #0]
 80152d0:	605c      	str	r4, [r3, #4]
 80152d2:	e7c7      	b.n	8015264 <_free_r+0x24>
 80152d4:	bd38      	pop	{r3, r4, r5, pc}
 80152d6:	bf00      	nop
 80152d8:	20004620 	.word	0x20004620

080152dc <_malloc_r>:
 80152dc:	b570      	push	{r4, r5, r6, lr}
 80152de:	1ccd      	adds	r5, r1, #3
 80152e0:	f025 0503 	bic.w	r5, r5, #3
 80152e4:	3508      	adds	r5, #8
 80152e6:	2d0c      	cmp	r5, #12
 80152e8:	bf38      	it	cc
 80152ea:	250c      	movcc	r5, #12
 80152ec:	2d00      	cmp	r5, #0
 80152ee:	4606      	mov	r6, r0
 80152f0:	db01      	blt.n	80152f6 <_malloc_r+0x1a>
 80152f2:	42a9      	cmp	r1, r5
 80152f4:	d903      	bls.n	80152fe <_malloc_r+0x22>
 80152f6:	230c      	movs	r3, #12
 80152f8:	6033      	str	r3, [r6, #0]
 80152fa:	2000      	movs	r0, #0
 80152fc:	bd70      	pop	{r4, r5, r6, pc}
 80152fe:	f000 fd6b 	bl	8015dd8 <__malloc_lock>
 8015302:	4a21      	ldr	r2, [pc, #132]	; (8015388 <_malloc_r+0xac>)
 8015304:	6814      	ldr	r4, [r2, #0]
 8015306:	4621      	mov	r1, r4
 8015308:	b991      	cbnz	r1, 8015330 <_malloc_r+0x54>
 801530a:	4c20      	ldr	r4, [pc, #128]	; (801538c <_malloc_r+0xb0>)
 801530c:	6823      	ldr	r3, [r4, #0]
 801530e:	b91b      	cbnz	r3, 8015318 <_malloc_r+0x3c>
 8015310:	4630      	mov	r0, r6
 8015312:	f000 fb05 	bl	8015920 <_sbrk_r>
 8015316:	6020      	str	r0, [r4, #0]
 8015318:	4629      	mov	r1, r5
 801531a:	4630      	mov	r0, r6
 801531c:	f000 fb00 	bl	8015920 <_sbrk_r>
 8015320:	1c43      	adds	r3, r0, #1
 8015322:	d124      	bne.n	801536e <_malloc_r+0x92>
 8015324:	230c      	movs	r3, #12
 8015326:	6033      	str	r3, [r6, #0]
 8015328:	4630      	mov	r0, r6
 801532a:	f000 fd56 	bl	8015dda <__malloc_unlock>
 801532e:	e7e4      	b.n	80152fa <_malloc_r+0x1e>
 8015330:	680b      	ldr	r3, [r1, #0]
 8015332:	1b5b      	subs	r3, r3, r5
 8015334:	d418      	bmi.n	8015368 <_malloc_r+0x8c>
 8015336:	2b0b      	cmp	r3, #11
 8015338:	d90f      	bls.n	801535a <_malloc_r+0x7e>
 801533a:	600b      	str	r3, [r1, #0]
 801533c:	50cd      	str	r5, [r1, r3]
 801533e:	18cc      	adds	r4, r1, r3
 8015340:	4630      	mov	r0, r6
 8015342:	f000 fd4a 	bl	8015dda <__malloc_unlock>
 8015346:	f104 000b 	add.w	r0, r4, #11
 801534a:	1d23      	adds	r3, r4, #4
 801534c:	f020 0007 	bic.w	r0, r0, #7
 8015350:	1ac3      	subs	r3, r0, r3
 8015352:	d0d3      	beq.n	80152fc <_malloc_r+0x20>
 8015354:	425a      	negs	r2, r3
 8015356:	50e2      	str	r2, [r4, r3]
 8015358:	e7d0      	b.n	80152fc <_malloc_r+0x20>
 801535a:	428c      	cmp	r4, r1
 801535c:	684b      	ldr	r3, [r1, #4]
 801535e:	bf16      	itet	ne
 8015360:	6063      	strne	r3, [r4, #4]
 8015362:	6013      	streq	r3, [r2, #0]
 8015364:	460c      	movne	r4, r1
 8015366:	e7eb      	b.n	8015340 <_malloc_r+0x64>
 8015368:	460c      	mov	r4, r1
 801536a:	6849      	ldr	r1, [r1, #4]
 801536c:	e7cc      	b.n	8015308 <_malloc_r+0x2c>
 801536e:	1cc4      	adds	r4, r0, #3
 8015370:	f024 0403 	bic.w	r4, r4, #3
 8015374:	42a0      	cmp	r0, r4
 8015376:	d005      	beq.n	8015384 <_malloc_r+0xa8>
 8015378:	1a21      	subs	r1, r4, r0
 801537a:	4630      	mov	r0, r6
 801537c:	f000 fad0 	bl	8015920 <_sbrk_r>
 8015380:	3001      	adds	r0, #1
 8015382:	d0cf      	beq.n	8015324 <_malloc_r+0x48>
 8015384:	6025      	str	r5, [r4, #0]
 8015386:	e7db      	b.n	8015340 <_malloc_r+0x64>
 8015388:	20004620 	.word	0x20004620
 801538c:	20004624 	.word	0x20004624

08015390 <__sfputc_r>:
 8015390:	6893      	ldr	r3, [r2, #8]
 8015392:	3b01      	subs	r3, #1
 8015394:	2b00      	cmp	r3, #0
 8015396:	b410      	push	{r4}
 8015398:	6093      	str	r3, [r2, #8]
 801539a:	da08      	bge.n	80153ae <__sfputc_r+0x1e>
 801539c:	6994      	ldr	r4, [r2, #24]
 801539e:	42a3      	cmp	r3, r4
 80153a0:	db01      	blt.n	80153a6 <__sfputc_r+0x16>
 80153a2:	290a      	cmp	r1, #10
 80153a4:	d103      	bne.n	80153ae <__sfputc_r+0x1e>
 80153a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153aa:	f000 bb0d 	b.w	80159c8 <__swbuf_r>
 80153ae:	6813      	ldr	r3, [r2, #0]
 80153b0:	1c58      	adds	r0, r3, #1
 80153b2:	6010      	str	r0, [r2, #0]
 80153b4:	7019      	strb	r1, [r3, #0]
 80153b6:	4608      	mov	r0, r1
 80153b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80153bc:	4770      	bx	lr

080153be <__sfputs_r>:
 80153be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153c0:	4606      	mov	r6, r0
 80153c2:	460f      	mov	r7, r1
 80153c4:	4614      	mov	r4, r2
 80153c6:	18d5      	adds	r5, r2, r3
 80153c8:	42ac      	cmp	r4, r5
 80153ca:	d101      	bne.n	80153d0 <__sfputs_r+0x12>
 80153cc:	2000      	movs	r0, #0
 80153ce:	e007      	b.n	80153e0 <__sfputs_r+0x22>
 80153d0:	463a      	mov	r2, r7
 80153d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80153d6:	4630      	mov	r0, r6
 80153d8:	f7ff ffda 	bl	8015390 <__sfputc_r>
 80153dc:	1c43      	adds	r3, r0, #1
 80153de:	d1f3      	bne.n	80153c8 <__sfputs_r+0xa>
 80153e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080153e4 <_vfiprintf_r>:
 80153e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153e8:	460c      	mov	r4, r1
 80153ea:	b09d      	sub	sp, #116	; 0x74
 80153ec:	4617      	mov	r7, r2
 80153ee:	461d      	mov	r5, r3
 80153f0:	4606      	mov	r6, r0
 80153f2:	b118      	cbz	r0, 80153fc <_vfiprintf_r+0x18>
 80153f4:	6983      	ldr	r3, [r0, #24]
 80153f6:	b90b      	cbnz	r3, 80153fc <_vfiprintf_r+0x18>
 80153f8:	f7ff fe90 	bl	801511c <__sinit>
 80153fc:	4b7c      	ldr	r3, [pc, #496]	; (80155f0 <_vfiprintf_r+0x20c>)
 80153fe:	429c      	cmp	r4, r3
 8015400:	d158      	bne.n	80154b4 <_vfiprintf_r+0xd0>
 8015402:	6874      	ldr	r4, [r6, #4]
 8015404:	89a3      	ldrh	r3, [r4, #12]
 8015406:	0718      	lsls	r0, r3, #28
 8015408:	d55e      	bpl.n	80154c8 <_vfiprintf_r+0xe4>
 801540a:	6923      	ldr	r3, [r4, #16]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d05b      	beq.n	80154c8 <_vfiprintf_r+0xe4>
 8015410:	2300      	movs	r3, #0
 8015412:	9309      	str	r3, [sp, #36]	; 0x24
 8015414:	2320      	movs	r3, #32
 8015416:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801541a:	2330      	movs	r3, #48	; 0x30
 801541c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015420:	9503      	str	r5, [sp, #12]
 8015422:	f04f 0b01 	mov.w	fp, #1
 8015426:	46b8      	mov	r8, r7
 8015428:	4645      	mov	r5, r8
 801542a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801542e:	b10b      	cbz	r3, 8015434 <_vfiprintf_r+0x50>
 8015430:	2b25      	cmp	r3, #37	; 0x25
 8015432:	d154      	bne.n	80154de <_vfiprintf_r+0xfa>
 8015434:	ebb8 0a07 	subs.w	sl, r8, r7
 8015438:	d00b      	beq.n	8015452 <_vfiprintf_r+0x6e>
 801543a:	4653      	mov	r3, sl
 801543c:	463a      	mov	r2, r7
 801543e:	4621      	mov	r1, r4
 8015440:	4630      	mov	r0, r6
 8015442:	f7ff ffbc 	bl	80153be <__sfputs_r>
 8015446:	3001      	adds	r0, #1
 8015448:	f000 80c2 	beq.w	80155d0 <_vfiprintf_r+0x1ec>
 801544c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801544e:	4453      	add	r3, sl
 8015450:	9309      	str	r3, [sp, #36]	; 0x24
 8015452:	f898 3000 	ldrb.w	r3, [r8]
 8015456:	2b00      	cmp	r3, #0
 8015458:	f000 80ba 	beq.w	80155d0 <_vfiprintf_r+0x1ec>
 801545c:	2300      	movs	r3, #0
 801545e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015462:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015466:	9304      	str	r3, [sp, #16]
 8015468:	9307      	str	r3, [sp, #28]
 801546a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801546e:	931a      	str	r3, [sp, #104]	; 0x68
 8015470:	46a8      	mov	r8, r5
 8015472:	2205      	movs	r2, #5
 8015474:	f818 1b01 	ldrb.w	r1, [r8], #1
 8015478:	485e      	ldr	r0, [pc, #376]	; (80155f4 <_vfiprintf_r+0x210>)
 801547a:	f7ea fef9 	bl	8000270 <memchr>
 801547e:	9b04      	ldr	r3, [sp, #16]
 8015480:	bb78      	cbnz	r0, 80154e2 <_vfiprintf_r+0xfe>
 8015482:	06d9      	lsls	r1, r3, #27
 8015484:	bf44      	itt	mi
 8015486:	2220      	movmi	r2, #32
 8015488:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801548c:	071a      	lsls	r2, r3, #28
 801548e:	bf44      	itt	mi
 8015490:	222b      	movmi	r2, #43	; 0x2b
 8015492:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015496:	782a      	ldrb	r2, [r5, #0]
 8015498:	2a2a      	cmp	r2, #42	; 0x2a
 801549a:	d02a      	beq.n	80154f2 <_vfiprintf_r+0x10e>
 801549c:	9a07      	ldr	r2, [sp, #28]
 801549e:	46a8      	mov	r8, r5
 80154a0:	2000      	movs	r0, #0
 80154a2:	250a      	movs	r5, #10
 80154a4:	4641      	mov	r1, r8
 80154a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80154aa:	3b30      	subs	r3, #48	; 0x30
 80154ac:	2b09      	cmp	r3, #9
 80154ae:	d969      	bls.n	8015584 <_vfiprintf_r+0x1a0>
 80154b0:	b360      	cbz	r0, 801550c <_vfiprintf_r+0x128>
 80154b2:	e024      	b.n	80154fe <_vfiprintf_r+0x11a>
 80154b4:	4b50      	ldr	r3, [pc, #320]	; (80155f8 <_vfiprintf_r+0x214>)
 80154b6:	429c      	cmp	r4, r3
 80154b8:	d101      	bne.n	80154be <_vfiprintf_r+0xda>
 80154ba:	68b4      	ldr	r4, [r6, #8]
 80154bc:	e7a2      	b.n	8015404 <_vfiprintf_r+0x20>
 80154be:	4b4f      	ldr	r3, [pc, #316]	; (80155fc <_vfiprintf_r+0x218>)
 80154c0:	429c      	cmp	r4, r3
 80154c2:	bf08      	it	eq
 80154c4:	68f4      	ldreq	r4, [r6, #12]
 80154c6:	e79d      	b.n	8015404 <_vfiprintf_r+0x20>
 80154c8:	4621      	mov	r1, r4
 80154ca:	4630      	mov	r0, r6
 80154cc:	f000 fae0 	bl	8015a90 <__swsetup_r>
 80154d0:	2800      	cmp	r0, #0
 80154d2:	d09d      	beq.n	8015410 <_vfiprintf_r+0x2c>
 80154d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80154d8:	b01d      	add	sp, #116	; 0x74
 80154da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154de:	46a8      	mov	r8, r5
 80154e0:	e7a2      	b.n	8015428 <_vfiprintf_r+0x44>
 80154e2:	4a44      	ldr	r2, [pc, #272]	; (80155f4 <_vfiprintf_r+0x210>)
 80154e4:	1a80      	subs	r0, r0, r2
 80154e6:	fa0b f000 	lsl.w	r0, fp, r0
 80154ea:	4318      	orrs	r0, r3
 80154ec:	9004      	str	r0, [sp, #16]
 80154ee:	4645      	mov	r5, r8
 80154f0:	e7be      	b.n	8015470 <_vfiprintf_r+0x8c>
 80154f2:	9a03      	ldr	r2, [sp, #12]
 80154f4:	1d11      	adds	r1, r2, #4
 80154f6:	6812      	ldr	r2, [r2, #0]
 80154f8:	9103      	str	r1, [sp, #12]
 80154fa:	2a00      	cmp	r2, #0
 80154fc:	db01      	blt.n	8015502 <_vfiprintf_r+0x11e>
 80154fe:	9207      	str	r2, [sp, #28]
 8015500:	e004      	b.n	801550c <_vfiprintf_r+0x128>
 8015502:	4252      	negs	r2, r2
 8015504:	f043 0302 	orr.w	r3, r3, #2
 8015508:	9207      	str	r2, [sp, #28]
 801550a:	9304      	str	r3, [sp, #16]
 801550c:	f898 3000 	ldrb.w	r3, [r8]
 8015510:	2b2e      	cmp	r3, #46	; 0x2e
 8015512:	d10e      	bne.n	8015532 <_vfiprintf_r+0x14e>
 8015514:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015518:	2b2a      	cmp	r3, #42	; 0x2a
 801551a:	d138      	bne.n	801558e <_vfiprintf_r+0x1aa>
 801551c:	9b03      	ldr	r3, [sp, #12]
 801551e:	1d1a      	adds	r2, r3, #4
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	9203      	str	r2, [sp, #12]
 8015524:	2b00      	cmp	r3, #0
 8015526:	bfb8      	it	lt
 8015528:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801552c:	f108 0802 	add.w	r8, r8, #2
 8015530:	9305      	str	r3, [sp, #20]
 8015532:	4d33      	ldr	r5, [pc, #204]	; (8015600 <_vfiprintf_r+0x21c>)
 8015534:	f898 1000 	ldrb.w	r1, [r8]
 8015538:	2203      	movs	r2, #3
 801553a:	4628      	mov	r0, r5
 801553c:	f7ea fe98 	bl	8000270 <memchr>
 8015540:	b140      	cbz	r0, 8015554 <_vfiprintf_r+0x170>
 8015542:	2340      	movs	r3, #64	; 0x40
 8015544:	1b40      	subs	r0, r0, r5
 8015546:	fa03 f000 	lsl.w	r0, r3, r0
 801554a:	9b04      	ldr	r3, [sp, #16]
 801554c:	4303      	orrs	r3, r0
 801554e:	f108 0801 	add.w	r8, r8, #1
 8015552:	9304      	str	r3, [sp, #16]
 8015554:	f898 1000 	ldrb.w	r1, [r8]
 8015558:	482a      	ldr	r0, [pc, #168]	; (8015604 <_vfiprintf_r+0x220>)
 801555a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801555e:	2206      	movs	r2, #6
 8015560:	f108 0701 	add.w	r7, r8, #1
 8015564:	f7ea fe84 	bl	8000270 <memchr>
 8015568:	2800      	cmp	r0, #0
 801556a:	d037      	beq.n	80155dc <_vfiprintf_r+0x1f8>
 801556c:	4b26      	ldr	r3, [pc, #152]	; (8015608 <_vfiprintf_r+0x224>)
 801556e:	bb1b      	cbnz	r3, 80155b8 <_vfiprintf_r+0x1d4>
 8015570:	9b03      	ldr	r3, [sp, #12]
 8015572:	3307      	adds	r3, #7
 8015574:	f023 0307 	bic.w	r3, r3, #7
 8015578:	3308      	adds	r3, #8
 801557a:	9303      	str	r3, [sp, #12]
 801557c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801557e:	444b      	add	r3, r9
 8015580:	9309      	str	r3, [sp, #36]	; 0x24
 8015582:	e750      	b.n	8015426 <_vfiprintf_r+0x42>
 8015584:	fb05 3202 	mla	r2, r5, r2, r3
 8015588:	2001      	movs	r0, #1
 801558a:	4688      	mov	r8, r1
 801558c:	e78a      	b.n	80154a4 <_vfiprintf_r+0xc0>
 801558e:	2300      	movs	r3, #0
 8015590:	f108 0801 	add.w	r8, r8, #1
 8015594:	9305      	str	r3, [sp, #20]
 8015596:	4619      	mov	r1, r3
 8015598:	250a      	movs	r5, #10
 801559a:	4640      	mov	r0, r8
 801559c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80155a0:	3a30      	subs	r2, #48	; 0x30
 80155a2:	2a09      	cmp	r2, #9
 80155a4:	d903      	bls.n	80155ae <_vfiprintf_r+0x1ca>
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d0c3      	beq.n	8015532 <_vfiprintf_r+0x14e>
 80155aa:	9105      	str	r1, [sp, #20]
 80155ac:	e7c1      	b.n	8015532 <_vfiprintf_r+0x14e>
 80155ae:	fb05 2101 	mla	r1, r5, r1, r2
 80155b2:	2301      	movs	r3, #1
 80155b4:	4680      	mov	r8, r0
 80155b6:	e7f0      	b.n	801559a <_vfiprintf_r+0x1b6>
 80155b8:	ab03      	add	r3, sp, #12
 80155ba:	9300      	str	r3, [sp, #0]
 80155bc:	4622      	mov	r2, r4
 80155be:	4b13      	ldr	r3, [pc, #76]	; (801560c <_vfiprintf_r+0x228>)
 80155c0:	a904      	add	r1, sp, #16
 80155c2:	4630      	mov	r0, r6
 80155c4:	f3af 8000 	nop.w
 80155c8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80155cc:	4681      	mov	r9, r0
 80155ce:	d1d5      	bne.n	801557c <_vfiprintf_r+0x198>
 80155d0:	89a3      	ldrh	r3, [r4, #12]
 80155d2:	065b      	lsls	r3, r3, #25
 80155d4:	f53f af7e 	bmi.w	80154d4 <_vfiprintf_r+0xf0>
 80155d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80155da:	e77d      	b.n	80154d8 <_vfiprintf_r+0xf4>
 80155dc:	ab03      	add	r3, sp, #12
 80155de:	9300      	str	r3, [sp, #0]
 80155e0:	4622      	mov	r2, r4
 80155e2:	4b0a      	ldr	r3, [pc, #40]	; (801560c <_vfiprintf_r+0x228>)
 80155e4:	a904      	add	r1, sp, #16
 80155e6:	4630      	mov	r0, r6
 80155e8:	f000 f888 	bl	80156fc <_printf_i>
 80155ec:	e7ec      	b.n	80155c8 <_vfiprintf_r+0x1e4>
 80155ee:	bf00      	nop
 80155f0:	08029878 	.word	0x08029878
 80155f4:	080298b8 	.word	0x080298b8
 80155f8:	08029898 	.word	0x08029898
 80155fc:	08029858 	.word	0x08029858
 8015600:	080298be 	.word	0x080298be
 8015604:	080298c2 	.word	0x080298c2
 8015608:	00000000 	.word	0x00000000
 801560c:	080153bf 	.word	0x080153bf

08015610 <_printf_common>:
 8015610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015614:	4691      	mov	r9, r2
 8015616:	461f      	mov	r7, r3
 8015618:	688a      	ldr	r2, [r1, #8]
 801561a:	690b      	ldr	r3, [r1, #16]
 801561c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015620:	4293      	cmp	r3, r2
 8015622:	bfb8      	it	lt
 8015624:	4613      	movlt	r3, r2
 8015626:	f8c9 3000 	str.w	r3, [r9]
 801562a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801562e:	4606      	mov	r6, r0
 8015630:	460c      	mov	r4, r1
 8015632:	b112      	cbz	r2, 801563a <_printf_common+0x2a>
 8015634:	3301      	adds	r3, #1
 8015636:	f8c9 3000 	str.w	r3, [r9]
 801563a:	6823      	ldr	r3, [r4, #0]
 801563c:	0699      	lsls	r1, r3, #26
 801563e:	bf42      	ittt	mi
 8015640:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015644:	3302      	addmi	r3, #2
 8015646:	f8c9 3000 	strmi.w	r3, [r9]
 801564a:	6825      	ldr	r5, [r4, #0]
 801564c:	f015 0506 	ands.w	r5, r5, #6
 8015650:	d107      	bne.n	8015662 <_printf_common+0x52>
 8015652:	f104 0a19 	add.w	sl, r4, #25
 8015656:	68e3      	ldr	r3, [r4, #12]
 8015658:	f8d9 2000 	ldr.w	r2, [r9]
 801565c:	1a9b      	subs	r3, r3, r2
 801565e:	42ab      	cmp	r3, r5
 8015660:	dc28      	bgt.n	80156b4 <_printf_common+0xa4>
 8015662:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015666:	6822      	ldr	r2, [r4, #0]
 8015668:	3300      	adds	r3, #0
 801566a:	bf18      	it	ne
 801566c:	2301      	movne	r3, #1
 801566e:	0692      	lsls	r2, r2, #26
 8015670:	d42d      	bmi.n	80156ce <_printf_common+0xbe>
 8015672:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015676:	4639      	mov	r1, r7
 8015678:	4630      	mov	r0, r6
 801567a:	47c0      	blx	r8
 801567c:	3001      	adds	r0, #1
 801567e:	d020      	beq.n	80156c2 <_printf_common+0xb2>
 8015680:	6823      	ldr	r3, [r4, #0]
 8015682:	68e5      	ldr	r5, [r4, #12]
 8015684:	f8d9 2000 	ldr.w	r2, [r9]
 8015688:	f003 0306 	and.w	r3, r3, #6
 801568c:	2b04      	cmp	r3, #4
 801568e:	bf08      	it	eq
 8015690:	1aad      	subeq	r5, r5, r2
 8015692:	68a3      	ldr	r3, [r4, #8]
 8015694:	6922      	ldr	r2, [r4, #16]
 8015696:	bf0c      	ite	eq
 8015698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801569c:	2500      	movne	r5, #0
 801569e:	4293      	cmp	r3, r2
 80156a0:	bfc4      	itt	gt
 80156a2:	1a9b      	subgt	r3, r3, r2
 80156a4:	18ed      	addgt	r5, r5, r3
 80156a6:	f04f 0900 	mov.w	r9, #0
 80156aa:	341a      	adds	r4, #26
 80156ac:	454d      	cmp	r5, r9
 80156ae:	d11a      	bne.n	80156e6 <_printf_common+0xd6>
 80156b0:	2000      	movs	r0, #0
 80156b2:	e008      	b.n	80156c6 <_printf_common+0xb6>
 80156b4:	2301      	movs	r3, #1
 80156b6:	4652      	mov	r2, sl
 80156b8:	4639      	mov	r1, r7
 80156ba:	4630      	mov	r0, r6
 80156bc:	47c0      	blx	r8
 80156be:	3001      	adds	r0, #1
 80156c0:	d103      	bne.n	80156ca <_printf_common+0xba>
 80156c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80156c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156ca:	3501      	adds	r5, #1
 80156cc:	e7c3      	b.n	8015656 <_printf_common+0x46>
 80156ce:	18e1      	adds	r1, r4, r3
 80156d0:	1c5a      	adds	r2, r3, #1
 80156d2:	2030      	movs	r0, #48	; 0x30
 80156d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80156d8:	4422      	add	r2, r4
 80156da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80156de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80156e2:	3302      	adds	r3, #2
 80156e4:	e7c5      	b.n	8015672 <_printf_common+0x62>
 80156e6:	2301      	movs	r3, #1
 80156e8:	4622      	mov	r2, r4
 80156ea:	4639      	mov	r1, r7
 80156ec:	4630      	mov	r0, r6
 80156ee:	47c0      	blx	r8
 80156f0:	3001      	adds	r0, #1
 80156f2:	d0e6      	beq.n	80156c2 <_printf_common+0xb2>
 80156f4:	f109 0901 	add.w	r9, r9, #1
 80156f8:	e7d8      	b.n	80156ac <_printf_common+0x9c>
	...

080156fc <_printf_i>:
 80156fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015700:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015704:	460c      	mov	r4, r1
 8015706:	7e09      	ldrb	r1, [r1, #24]
 8015708:	b085      	sub	sp, #20
 801570a:	296e      	cmp	r1, #110	; 0x6e
 801570c:	4617      	mov	r7, r2
 801570e:	4606      	mov	r6, r0
 8015710:	4698      	mov	r8, r3
 8015712:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015714:	f000 80b3 	beq.w	801587e <_printf_i+0x182>
 8015718:	d822      	bhi.n	8015760 <_printf_i+0x64>
 801571a:	2963      	cmp	r1, #99	; 0x63
 801571c:	d036      	beq.n	801578c <_printf_i+0x90>
 801571e:	d80a      	bhi.n	8015736 <_printf_i+0x3a>
 8015720:	2900      	cmp	r1, #0
 8015722:	f000 80b9 	beq.w	8015898 <_printf_i+0x19c>
 8015726:	2958      	cmp	r1, #88	; 0x58
 8015728:	f000 8083 	beq.w	8015832 <_printf_i+0x136>
 801572c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015730:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015734:	e032      	b.n	801579c <_printf_i+0xa0>
 8015736:	2964      	cmp	r1, #100	; 0x64
 8015738:	d001      	beq.n	801573e <_printf_i+0x42>
 801573a:	2969      	cmp	r1, #105	; 0x69
 801573c:	d1f6      	bne.n	801572c <_printf_i+0x30>
 801573e:	6820      	ldr	r0, [r4, #0]
 8015740:	6813      	ldr	r3, [r2, #0]
 8015742:	0605      	lsls	r5, r0, #24
 8015744:	f103 0104 	add.w	r1, r3, #4
 8015748:	d52a      	bpl.n	80157a0 <_printf_i+0xa4>
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	6011      	str	r1, [r2, #0]
 801574e:	2b00      	cmp	r3, #0
 8015750:	da03      	bge.n	801575a <_printf_i+0x5e>
 8015752:	222d      	movs	r2, #45	; 0x2d
 8015754:	425b      	negs	r3, r3
 8015756:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801575a:	486f      	ldr	r0, [pc, #444]	; (8015918 <_printf_i+0x21c>)
 801575c:	220a      	movs	r2, #10
 801575e:	e039      	b.n	80157d4 <_printf_i+0xd8>
 8015760:	2973      	cmp	r1, #115	; 0x73
 8015762:	f000 809d 	beq.w	80158a0 <_printf_i+0x1a4>
 8015766:	d808      	bhi.n	801577a <_printf_i+0x7e>
 8015768:	296f      	cmp	r1, #111	; 0x6f
 801576a:	d020      	beq.n	80157ae <_printf_i+0xb2>
 801576c:	2970      	cmp	r1, #112	; 0x70
 801576e:	d1dd      	bne.n	801572c <_printf_i+0x30>
 8015770:	6823      	ldr	r3, [r4, #0]
 8015772:	f043 0320 	orr.w	r3, r3, #32
 8015776:	6023      	str	r3, [r4, #0]
 8015778:	e003      	b.n	8015782 <_printf_i+0x86>
 801577a:	2975      	cmp	r1, #117	; 0x75
 801577c:	d017      	beq.n	80157ae <_printf_i+0xb2>
 801577e:	2978      	cmp	r1, #120	; 0x78
 8015780:	d1d4      	bne.n	801572c <_printf_i+0x30>
 8015782:	2378      	movs	r3, #120	; 0x78
 8015784:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015788:	4864      	ldr	r0, [pc, #400]	; (801591c <_printf_i+0x220>)
 801578a:	e055      	b.n	8015838 <_printf_i+0x13c>
 801578c:	6813      	ldr	r3, [r2, #0]
 801578e:	1d19      	adds	r1, r3, #4
 8015790:	681b      	ldr	r3, [r3, #0]
 8015792:	6011      	str	r1, [r2, #0]
 8015794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801579c:	2301      	movs	r3, #1
 801579e:	e08c      	b.n	80158ba <_printf_i+0x1be>
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	6011      	str	r1, [r2, #0]
 80157a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80157a8:	bf18      	it	ne
 80157aa:	b21b      	sxthne	r3, r3
 80157ac:	e7cf      	b.n	801574e <_printf_i+0x52>
 80157ae:	6813      	ldr	r3, [r2, #0]
 80157b0:	6825      	ldr	r5, [r4, #0]
 80157b2:	1d18      	adds	r0, r3, #4
 80157b4:	6010      	str	r0, [r2, #0]
 80157b6:	0628      	lsls	r0, r5, #24
 80157b8:	d501      	bpl.n	80157be <_printf_i+0xc2>
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	e002      	b.n	80157c4 <_printf_i+0xc8>
 80157be:	0668      	lsls	r0, r5, #25
 80157c0:	d5fb      	bpl.n	80157ba <_printf_i+0xbe>
 80157c2:	881b      	ldrh	r3, [r3, #0]
 80157c4:	4854      	ldr	r0, [pc, #336]	; (8015918 <_printf_i+0x21c>)
 80157c6:	296f      	cmp	r1, #111	; 0x6f
 80157c8:	bf14      	ite	ne
 80157ca:	220a      	movne	r2, #10
 80157cc:	2208      	moveq	r2, #8
 80157ce:	2100      	movs	r1, #0
 80157d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80157d4:	6865      	ldr	r5, [r4, #4]
 80157d6:	60a5      	str	r5, [r4, #8]
 80157d8:	2d00      	cmp	r5, #0
 80157da:	f2c0 8095 	blt.w	8015908 <_printf_i+0x20c>
 80157de:	6821      	ldr	r1, [r4, #0]
 80157e0:	f021 0104 	bic.w	r1, r1, #4
 80157e4:	6021      	str	r1, [r4, #0]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d13d      	bne.n	8015866 <_printf_i+0x16a>
 80157ea:	2d00      	cmp	r5, #0
 80157ec:	f040 808e 	bne.w	801590c <_printf_i+0x210>
 80157f0:	4665      	mov	r5, ip
 80157f2:	2a08      	cmp	r2, #8
 80157f4:	d10b      	bne.n	801580e <_printf_i+0x112>
 80157f6:	6823      	ldr	r3, [r4, #0]
 80157f8:	07db      	lsls	r3, r3, #31
 80157fa:	d508      	bpl.n	801580e <_printf_i+0x112>
 80157fc:	6923      	ldr	r3, [r4, #16]
 80157fe:	6862      	ldr	r2, [r4, #4]
 8015800:	429a      	cmp	r2, r3
 8015802:	bfde      	ittt	le
 8015804:	2330      	movle	r3, #48	; 0x30
 8015806:	f805 3c01 	strble.w	r3, [r5, #-1]
 801580a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801580e:	ebac 0305 	sub.w	r3, ip, r5
 8015812:	6123      	str	r3, [r4, #16]
 8015814:	f8cd 8000 	str.w	r8, [sp]
 8015818:	463b      	mov	r3, r7
 801581a:	aa03      	add	r2, sp, #12
 801581c:	4621      	mov	r1, r4
 801581e:	4630      	mov	r0, r6
 8015820:	f7ff fef6 	bl	8015610 <_printf_common>
 8015824:	3001      	adds	r0, #1
 8015826:	d14d      	bne.n	80158c4 <_printf_i+0x1c8>
 8015828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801582c:	b005      	add	sp, #20
 801582e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015832:	4839      	ldr	r0, [pc, #228]	; (8015918 <_printf_i+0x21c>)
 8015834:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015838:	6813      	ldr	r3, [r2, #0]
 801583a:	6821      	ldr	r1, [r4, #0]
 801583c:	1d1d      	adds	r5, r3, #4
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	6015      	str	r5, [r2, #0]
 8015842:	060a      	lsls	r2, r1, #24
 8015844:	d50b      	bpl.n	801585e <_printf_i+0x162>
 8015846:	07ca      	lsls	r2, r1, #31
 8015848:	bf44      	itt	mi
 801584a:	f041 0120 	orrmi.w	r1, r1, #32
 801584e:	6021      	strmi	r1, [r4, #0]
 8015850:	b91b      	cbnz	r3, 801585a <_printf_i+0x15e>
 8015852:	6822      	ldr	r2, [r4, #0]
 8015854:	f022 0220 	bic.w	r2, r2, #32
 8015858:	6022      	str	r2, [r4, #0]
 801585a:	2210      	movs	r2, #16
 801585c:	e7b7      	b.n	80157ce <_printf_i+0xd2>
 801585e:	064d      	lsls	r5, r1, #25
 8015860:	bf48      	it	mi
 8015862:	b29b      	uxthmi	r3, r3
 8015864:	e7ef      	b.n	8015846 <_printf_i+0x14a>
 8015866:	4665      	mov	r5, ip
 8015868:	fbb3 f1f2 	udiv	r1, r3, r2
 801586c:	fb02 3311 	mls	r3, r2, r1, r3
 8015870:	5cc3      	ldrb	r3, [r0, r3]
 8015872:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015876:	460b      	mov	r3, r1
 8015878:	2900      	cmp	r1, #0
 801587a:	d1f5      	bne.n	8015868 <_printf_i+0x16c>
 801587c:	e7b9      	b.n	80157f2 <_printf_i+0xf6>
 801587e:	6813      	ldr	r3, [r2, #0]
 8015880:	6825      	ldr	r5, [r4, #0]
 8015882:	6961      	ldr	r1, [r4, #20]
 8015884:	1d18      	adds	r0, r3, #4
 8015886:	6010      	str	r0, [r2, #0]
 8015888:	0628      	lsls	r0, r5, #24
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	d501      	bpl.n	8015892 <_printf_i+0x196>
 801588e:	6019      	str	r1, [r3, #0]
 8015890:	e002      	b.n	8015898 <_printf_i+0x19c>
 8015892:	066a      	lsls	r2, r5, #25
 8015894:	d5fb      	bpl.n	801588e <_printf_i+0x192>
 8015896:	8019      	strh	r1, [r3, #0]
 8015898:	2300      	movs	r3, #0
 801589a:	6123      	str	r3, [r4, #16]
 801589c:	4665      	mov	r5, ip
 801589e:	e7b9      	b.n	8015814 <_printf_i+0x118>
 80158a0:	6813      	ldr	r3, [r2, #0]
 80158a2:	1d19      	adds	r1, r3, #4
 80158a4:	6011      	str	r1, [r2, #0]
 80158a6:	681d      	ldr	r5, [r3, #0]
 80158a8:	6862      	ldr	r2, [r4, #4]
 80158aa:	2100      	movs	r1, #0
 80158ac:	4628      	mov	r0, r5
 80158ae:	f7ea fcdf 	bl	8000270 <memchr>
 80158b2:	b108      	cbz	r0, 80158b8 <_printf_i+0x1bc>
 80158b4:	1b40      	subs	r0, r0, r5
 80158b6:	6060      	str	r0, [r4, #4]
 80158b8:	6863      	ldr	r3, [r4, #4]
 80158ba:	6123      	str	r3, [r4, #16]
 80158bc:	2300      	movs	r3, #0
 80158be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80158c2:	e7a7      	b.n	8015814 <_printf_i+0x118>
 80158c4:	6923      	ldr	r3, [r4, #16]
 80158c6:	462a      	mov	r2, r5
 80158c8:	4639      	mov	r1, r7
 80158ca:	4630      	mov	r0, r6
 80158cc:	47c0      	blx	r8
 80158ce:	3001      	adds	r0, #1
 80158d0:	d0aa      	beq.n	8015828 <_printf_i+0x12c>
 80158d2:	6823      	ldr	r3, [r4, #0]
 80158d4:	079b      	lsls	r3, r3, #30
 80158d6:	d413      	bmi.n	8015900 <_printf_i+0x204>
 80158d8:	68e0      	ldr	r0, [r4, #12]
 80158da:	9b03      	ldr	r3, [sp, #12]
 80158dc:	4298      	cmp	r0, r3
 80158de:	bfb8      	it	lt
 80158e0:	4618      	movlt	r0, r3
 80158e2:	e7a3      	b.n	801582c <_printf_i+0x130>
 80158e4:	2301      	movs	r3, #1
 80158e6:	464a      	mov	r2, r9
 80158e8:	4639      	mov	r1, r7
 80158ea:	4630      	mov	r0, r6
 80158ec:	47c0      	blx	r8
 80158ee:	3001      	adds	r0, #1
 80158f0:	d09a      	beq.n	8015828 <_printf_i+0x12c>
 80158f2:	3501      	adds	r5, #1
 80158f4:	68e3      	ldr	r3, [r4, #12]
 80158f6:	9a03      	ldr	r2, [sp, #12]
 80158f8:	1a9b      	subs	r3, r3, r2
 80158fa:	42ab      	cmp	r3, r5
 80158fc:	dcf2      	bgt.n	80158e4 <_printf_i+0x1e8>
 80158fe:	e7eb      	b.n	80158d8 <_printf_i+0x1dc>
 8015900:	2500      	movs	r5, #0
 8015902:	f104 0919 	add.w	r9, r4, #25
 8015906:	e7f5      	b.n	80158f4 <_printf_i+0x1f8>
 8015908:	2b00      	cmp	r3, #0
 801590a:	d1ac      	bne.n	8015866 <_printf_i+0x16a>
 801590c:	7803      	ldrb	r3, [r0, #0]
 801590e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015912:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015916:	e76c      	b.n	80157f2 <_printf_i+0xf6>
 8015918:	080298c9 	.word	0x080298c9
 801591c:	080298da 	.word	0x080298da

08015920 <_sbrk_r>:
 8015920:	b538      	push	{r3, r4, r5, lr}
 8015922:	4c06      	ldr	r4, [pc, #24]	; (801593c <_sbrk_r+0x1c>)
 8015924:	2300      	movs	r3, #0
 8015926:	4605      	mov	r5, r0
 8015928:	4608      	mov	r0, r1
 801592a:	6023      	str	r3, [r4, #0]
 801592c:	f7eb fb66 	bl	8000ffc <_sbrk>
 8015930:	1c43      	adds	r3, r0, #1
 8015932:	d102      	bne.n	801593a <_sbrk_r+0x1a>
 8015934:	6823      	ldr	r3, [r4, #0]
 8015936:	b103      	cbz	r3, 801593a <_sbrk_r+0x1a>
 8015938:	602b      	str	r3, [r5, #0]
 801593a:	bd38      	pop	{r3, r4, r5, pc}
 801593c:	2000b458 	.word	0x2000b458

08015940 <__sread>:
 8015940:	b510      	push	{r4, lr}
 8015942:	460c      	mov	r4, r1
 8015944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015948:	f000 fa48 	bl	8015ddc <_read_r>
 801594c:	2800      	cmp	r0, #0
 801594e:	bfab      	itete	ge
 8015950:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015952:	89a3      	ldrhlt	r3, [r4, #12]
 8015954:	181b      	addge	r3, r3, r0
 8015956:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801595a:	bfac      	ite	ge
 801595c:	6563      	strge	r3, [r4, #84]	; 0x54
 801595e:	81a3      	strhlt	r3, [r4, #12]
 8015960:	bd10      	pop	{r4, pc}

08015962 <__swrite>:
 8015962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015966:	461f      	mov	r7, r3
 8015968:	898b      	ldrh	r3, [r1, #12]
 801596a:	05db      	lsls	r3, r3, #23
 801596c:	4605      	mov	r5, r0
 801596e:	460c      	mov	r4, r1
 8015970:	4616      	mov	r6, r2
 8015972:	d505      	bpl.n	8015980 <__swrite+0x1e>
 8015974:	2302      	movs	r3, #2
 8015976:	2200      	movs	r2, #0
 8015978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801597c:	f000 f9b6 	bl	8015cec <_lseek_r>
 8015980:	89a3      	ldrh	r3, [r4, #12]
 8015982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801598a:	81a3      	strh	r3, [r4, #12]
 801598c:	4632      	mov	r2, r6
 801598e:	463b      	mov	r3, r7
 8015990:	4628      	mov	r0, r5
 8015992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015996:	f000 b869 	b.w	8015a6c <_write_r>

0801599a <__sseek>:
 801599a:	b510      	push	{r4, lr}
 801599c:	460c      	mov	r4, r1
 801599e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159a2:	f000 f9a3 	bl	8015cec <_lseek_r>
 80159a6:	1c43      	adds	r3, r0, #1
 80159a8:	89a3      	ldrh	r3, [r4, #12]
 80159aa:	bf15      	itete	ne
 80159ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80159ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80159b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80159b6:	81a3      	strheq	r3, [r4, #12]
 80159b8:	bf18      	it	ne
 80159ba:	81a3      	strhne	r3, [r4, #12]
 80159bc:	bd10      	pop	{r4, pc}

080159be <__sclose>:
 80159be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80159c2:	f000 b8d3 	b.w	8015b6c <_close_r>
	...

080159c8 <__swbuf_r>:
 80159c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ca:	460e      	mov	r6, r1
 80159cc:	4614      	mov	r4, r2
 80159ce:	4605      	mov	r5, r0
 80159d0:	b118      	cbz	r0, 80159da <__swbuf_r+0x12>
 80159d2:	6983      	ldr	r3, [r0, #24]
 80159d4:	b90b      	cbnz	r3, 80159da <__swbuf_r+0x12>
 80159d6:	f7ff fba1 	bl	801511c <__sinit>
 80159da:	4b21      	ldr	r3, [pc, #132]	; (8015a60 <__swbuf_r+0x98>)
 80159dc:	429c      	cmp	r4, r3
 80159de:	d12a      	bne.n	8015a36 <__swbuf_r+0x6e>
 80159e0:	686c      	ldr	r4, [r5, #4]
 80159e2:	69a3      	ldr	r3, [r4, #24]
 80159e4:	60a3      	str	r3, [r4, #8]
 80159e6:	89a3      	ldrh	r3, [r4, #12]
 80159e8:	071a      	lsls	r2, r3, #28
 80159ea:	d52e      	bpl.n	8015a4a <__swbuf_r+0x82>
 80159ec:	6923      	ldr	r3, [r4, #16]
 80159ee:	b363      	cbz	r3, 8015a4a <__swbuf_r+0x82>
 80159f0:	6923      	ldr	r3, [r4, #16]
 80159f2:	6820      	ldr	r0, [r4, #0]
 80159f4:	1ac0      	subs	r0, r0, r3
 80159f6:	6963      	ldr	r3, [r4, #20]
 80159f8:	b2f6      	uxtb	r6, r6
 80159fa:	4283      	cmp	r3, r0
 80159fc:	4637      	mov	r7, r6
 80159fe:	dc04      	bgt.n	8015a0a <__swbuf_r+0x42>
 8015a00:	4621      	mov	r1, r4
 8015a02:	4628      	mov	r0, r5
 8015a04:	f000 f948 	bl	8015c98 <_fflush_r>
 8015a08:	bb28      	cbnz	r0, 8015a56 <__swbuf_r+0x8e>
 8015a0a:	68a3      	ldr	r3, [r4, #8]
 8015a0c:	3b01      	subs	r3, #1
 8015a0e:	60a3      	str	r3, [r4, #8]
 8015a10:	6823      	ldr	r3, [r4, #0]
 8015a12:	1c5a      	adds	r2, r3, #1
 8015a14:	6022      	str	r2, [r4, #0]
 8015a16:	701e      	strb	r6, [r3, #0]
 8015a18:	6963      	ldr	r3, [r4, #20]
 8015a1a:	3001      	adds	r0, #1
 8015a1c:	4283      	cmp	r3, r0
 8015a1e:	d004      	beq.n	8015a2a <__swbuf_r+0x62>
 8015a20:	89a3      	ldrh	r3, [r4, #12]
 8015a22:	07db      	lsls	r3, r3, #31
 8015a24:	d519      	bpl.n	8015a5a <__swbuf_r+0x92>
 8015a26:	2e0a      	cmp	r6, #10
 8015a28:	d117      	bne.n	8015a5a <__swbuf_r+0x92>
 8015a2a:	4621      	mov	r1, r4
 8015a2c:	4628      	mov	r0, r5
 8015a2e:	f000 f933 	bl	8015c98 <_fflush_r>
 8015a32:	b190      	cbz	r0, 8015a5a <__swbuf_r+0x92>
 8015a34:	e00f      	b.n	8015a56 <__swbuf_r+0x8e>
 8015a36:	4b0b      	ldr	r3, [pc, #44]	; (8015a64 <__swbuf_r+0x9c>)
 8015a38:	429c      	cmp	r4, r3
 8015a3a:	d101      	bne.n	8015a40 <__swbuf_r+0x78>
 8015a3c:	68ac      	ldr	r4, [r5, #8]
 8015a3e:	e7d0      	b.n	80159e2 <__swbuf_r+0x1a>
 8015a40:	4b09      	ldr	r3, [pc, #36]	; (8015a68 <__swbuf_r+0xa0>)
 8015a42:	429c      	cmp	r4, r3
 8015a44:	bf08      	it	eq
 8015a46:	68ec      	ldreq	r4, [r5, #12]
 8015a48:	e7cb      	b.n	80159e2 <__swbuf_r+0x1a>
 8015a4a:	4621      	mov	r1, r4
 8015a4c:	4628      	mov	r0, r5
 8015a4e:	f000 f81f 	bl	8015a90 <__swsetup_r>
 8015a52:	2800      	cmp	r0, #0
 8015a54:	d0cc      	beq.n	80159f0 <__swbuf_r+0x28>
 8015a56:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015a5a:	4638      	mov	r0, r7
 8015a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a5e:	bf00      	nop
 8015a60:	08029878 	.word	0x08029878
 8015a64:	08029898 	.word	0x08029898
 8015a68:	08029858 	.word	0x08029858

08015a6c <_write_r>:
 8015a6c:	b538      	push	{r3, r4, r5, lr}
 8015a6e:	4c07      	ldr	r4, [pc, #28]	; (8015a8c <_write_r+0x20>)
 8015a70:	4605      	mov	r5, r0
 8015a72:	4608      	mov	r0, r1
 8015a74:	4611      	mov	r1, r2
 8015a76:	2200      	movs	r2, #0
 8015a78:	6022      	str	r2, [r4, #0]
 8015a7a:	461a      	mov	r2, r3
 8015a7c:	f7eb fa6d 	bl	8000f5a <_write>
 8015a80:	1c43      	adds	r3, r0, #1
 8015a82:	d102      	bne.n	8015a8a <_write_r+0x1e>
 8015a84:	6823      	ldr	r3, [r4, #0]
 8015a86:	b103      	cbz	r3, 8015a8a <_write_r+0x1e>
 8015a88:	602b      	str	r3, [r5, #0]
 8015a8a:	bd38      	pop	{r3, r4, r5, pc}
 8015a8c:	2000b458 	.word	0x2000b458

08015a90 <__swsetup_r>:
 8015a90:	4b32      	ldr	r3, [pc, #200]	; (8015b5c <__swsetup_r+0xcc>)
 8015a92:	b570      	push	{r4, r5, r6, lr}
 8015a94:	681d      	ldr	r5, [r3, #0]
 8015a96:	4606      	mov	r6, r0
 8015a98:	460c      	mov	r4, r1
 8015a9a:	b125      	cbz	r5, 8015aa6 <__swsetup_r+0x16>
 8015a9c:	69ab      	ldr	r3, [r5, #24]
 8015a9e:	b913      	cbnz	r3, 8015aa6 <__swsetup_r+0x16>
 8015aa0:	4628      	mov	r0, r5
 8015aa2:	f7ff fb3b 	bl	801511c <__sinit>
 8015aa6:	4b2e      	ldr	r3, [pc, #184]	; (8015b60 <__swsetup_r+0xd0>)
 8015aa8:	429c      	cmp	r4, r3
 8015aaa:	d10f      	bne.n	8015acc <__swsetup_r+0x3c>
 8015aac:	686c      	ldr	r4, [r5, #4]
 8015aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ab2:	b29a      	uxth	r2, r3
 8015ab4:	0715      	lsls	r5, r2, #28
 8015ab6:	d42c      	bmi.n	8015b12 <__swsetup_r+0x82>
 8015ab8:	06d0      	lsls	r0, r2, #27
 8015aba:	d411      	bmi.n	8015ae0 <__swsetup_r+0x50>
 8015abc:	2209      	movs	r2, #9
 8015abe:	6032      	str	r2, [r6, #0]
 8015ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ac4:	81a3      	strh	r3, [r4, #12]
 8015ac6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015aca:	e03e      	b.n	8015b4a <__swsetup_r+0xba>
 8015acc:	4b25      	ldr	r3, [pc, #148]	; (8015b64 <__swsetup_r+0xd4>)
 8015ace:	429c      	cmp	r4, r3
 8015ad0:	d101      	bne.n	8015ad6 <__swsetup_r+0x46>
 8015ad2:	68ac      	ldr	r4, [r5, #8]
 8015ad4:	e7eb      	b.n	8015aae <__swsetup_r+0x1e>
 8015ad6:	4b24      	ldr	r3, [pc, #144]	; (8015b68 <__swsetup_r+0xd8>)
 8015ad8:	429c      	cmp	r4, r3
 8015ada:	bf08      	it	eq
 8015adc:	68ec      	ldreq	r4, [r5, #12]
 8015ade:	e7e6      	b.n	8015aae <__swsetup_r+0x1e>
 8015ae0:	0751      	lsls	r1, r2, #29
 8015ae2:	d512      	bpl.n	8015b0a <__swsetup_r+0x7a>
 8015ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015ae6:	b141      	cbz	r1, 8015afa <__swsetup_r+0x6a>
 8015ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015aec:	4299      	cmp	r1, r3
 8015aee:	d002      	beq.n	8015af6 <__swsetup_r+0x66>
 8015af0:	4630      	mov	r0, r6
 8015af2:	f7ff fba5 	bl	8015240 <_free_r>
 8015af6:	2300      	movs	r3, #0
 8015af8:	6363      	str	r3, [r4, #52]	; 0x34
 8015afa:	89a3      	ldrh	r3, [r4, #12]
 8015afc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015b00:	81a3      	strh	r3, [r4, #12]
 8015b02:	2300      	movs	r3, #0
 8015b04:	6063      	str	r3, [r4, #4]
 8015b06:	6923      	ldr	r3, [r4, #16]
 8015b08:	6023      	str	r3, [r4, #0]
 8015b0a:	89a3      	ldrh	r3, [r4, #12]
 8015b0c:	f043 0308 	orr.w	r3, r3, #8
 8015b10:	81a3      	strh	r3, [r4, #12]
 8015b12:	6923      	ldr	r3, [r4, #16]
 8015b14:	b94b      	cbnz	r3, 8015b2a <__swsetup_r+0x9a>
 8015b16:	89a3      	ldrh	r3, [r4, #12]
 8015b18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015b20:	d003      	beq.n	8015b2a <__swsetup_r+0x9a>
 8015b22:	4621      	mov	r1, r4
 8015b24:	4630      	mov	r0, r6
 8015b26:	f000 f917 	bl	8015d58 <__smakebuf_r>
 8015b2a:	89a2      	ldrh	r2, [r4, #12]
 8015b2c:	f012 0301 	ands.w	r3, r2, #1
 8015b30:	d00c      	beq.n	8015b4c <__swsetup_r+0xbc>
 8015b32:	2300      	movs	r3, #0
 8015b34:	60a3      	str	r3, [r4, #8]
 8015b36:	6963      	ldr	r3, [r4, #20]
 8015b38:	425b      	negs	r3, r3
 8015b3a:	61a3      	str	r3, [r4, #24]
 8015b3c:	6923      	ldr	r3, [r4, #16]
 8015b3e:	b953      	cbnz	r3, 8015b56 <__swsetup_r+0xc6>
 8015b40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b44:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015b48:	d1ba      	bne.n	8015ac0 <__swsetup_r+0x30>
 8015b4a:	bd70      	pop	{r4, r5, r6, pc}
 8015b4c:	0792      	lsls	r2, r2, #30
 8015b4e:	bf58      	it	pl
 8015b50:	6963      	ldrpl	r3, [r4, #20]
 8015b52:	60a3      	str	r3, [r4, #8]
 8015b54:	e7f2      	b.n	8015b3c <__swsetup_r+0xac>
 8015b56:	2000      	movs	r0, #0
 8015b58:	e7f7      	b.n	8015b4a <__swsetup_r+0xba>
 8015b5a:	bf00      	nop
 8015b5c:	2000001c 	.word	0x2000001c
 8015b60:	08029878 	.word	0x08029878
 8015b64:	08029898 	.word	0x08029898
 8015b68:	08029858 	.word	0x08029858

08015b6c <_close_r>:
 8015b6c:	b538      	push	{r3, r4, r5, lr}
 8015b6e:	4c06      	ldr	r4, [pc, #24]	; (8015b88 <_close_r+0x1c>)
 8015b70:	2300      	movs	r3, #0
 8015b72:	4605      	mov	r5, r0
 8015b74:	4608      	mov	r0, r1
 8015b76:	6023      	str	r3, [r4, #0]
 8015b78:	f7eb fa0b 	bl	8000f92 <_close>
 8015b7c:	1c43      	adds	r3, r0, #1
 8015b7e:	d102      	bne.n	8015b86 <_close_r+0x1a>
 8015b80:	6823      	ldr	r3, [r4, #0]
 8015b82:	b103      	cbz	r3, 8015b86 <_close_r+0x1a>
 8015b84:	602b      	str	r3, [r5, #0]
 8015b86:	bd38      	pop	{r3, r4, r5, pc}
 8015b88:	2000b458 	.word	0x2000b458

08015b8c <__sflush_r>:
 8015b8c:	898a      	ldrh	r2, [r1, #12]
 8015b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b92:	4605      	mov	r5, r0
 8015b94:	0710      	lsls	r0, r2, #28
 8015b96:	460c      	mov	r4, r1
 8015b98:	d458      	bmi.n	8015c4c <__sflush_r+0xc0>
 8015b9a:	684b      	ldr	r3, [r1, #4]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	dc05      	bgt.n	8015bac <__sflush_r+0x20>
 8015ba0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	dc02      	bgt.n	8015bac <__sflush_r+0x20>
 8015ba6:	2000      	movs	r0, #0
 8015ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015bae:	2e00      	cmp	r6, #0
 8015bb0:	d0f9      	beq.n	8015ba6 <__sflush_r+0x1a>
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015bb8:	682f      	ldr	r7, [r5, #0]
 8015bba:	6a21      	ldr	r1, [r4, #32]
 8015bbc:	602b      	str	r3, [r5, #0]
 8015bbe:	d032      	beq.n	8015c26 <__sflush_r+0x9a>
 8015bc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015bc2:	89a3      	ldrh	r3, [r4, #12]
 8015bc4:	075a      	lsls	r2, r3, #29
 8015bc6:	d505      	bpl.n	8015bd4 <__sflush_r+0x48>
 8015bc8:	6863      	ldr	r3, [r4, #4]
 8015bca:	1ac0      	subs	r0, r0, r3
 8015bcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015bce:	b10b      	cbz	r3, 8015bd4 <__sflush_r+0x48>
 8015bd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015bd2:	1ac0      	subs	r0, r0, r3
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	4602      	mov	r2, r0
 8015bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015bda:	6a21      	ldr	r1, [r4, #32]
 8015bdc:	4628      	mov	r0, r5
 8015bde:	47b0      	blx	r6
 8015be0:	1c43      	adds	r3, r0, #1
 8015be2:	89a3      	ldrh	r3, [r4, #12]
 8015be4:	d106      	bne.n	8015bf4 <__sflush_r+0x68>
 8015be6:	6829      	ldr	r1, [r5, #0]
 8015be8:	291d      	cmp	r1, #29
 8015bea:	d848      	bhi.n	8015c7e <__sflush_r+0xf2>
 8015bec:	4a29      	ldr	r2, [pc, #164]	; (8015c94 <__sflush_r+0x108>)
 8015bee:	40ca      	lsrs	r2, r1
 8015bf0:	07d6      	lsls	r6, r2, #31
 8015bf2:	d544      	bpl.n	8015c7e <__sflush_r+0xf2>
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	6062      	str	r2, [r4, #4]
 8015bf8:	04d9      	lsls	r1, r3, #19
 8015bfa:	6922      	ldr	r2, [r4, #16]
 8015bfc:	6022      	str	r2, [r4, #0]
 8015bfe:	d504      	bpl.n	8015c0a <__sflush_r+0x7e>
 8015c00:	1c42      	adds	r2, r0, #1
 8015c02:	d101      	bne.n	8015c08 <__sflush_r+0x7c>
 8015c04:	682b      	ldr	r3, [r5, #0]
 8015c06:	b903      	cbnz	r3, 8015c0a <__sflush_r+0x7e>
 8015c08:	6560      	str	r0, [r4, #84]	; 0x54
 8015c0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015c0c:	602f      	str	r7, [r5, #0]
 8015c0e:	2900      	cmp	r1, #0
 8015c10:	d0c9      	beq.n	8015ba6 <__sflush_r+0x1a>
 8015c12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015c16:	4299      	cmp	r1, r3
 8015c18:	d002      	beq.n	8015c20 <__sflush_r+0x94>
 8015c1a:	4628      	mov	r0, r5
 8015c1c:	f7ff fb10 	bl	8015240 <_free_r>
 8015c20:	2000      	movs	r0, #0
 8015c22:	6360      	str	r0, [r4, #52]	; 0x34
 8015c24:	e7c0      	b.n	8015ba8 <__sflush_r+0x1c>
 8015c26:	2301      	movs	r3, #1
 8015c28:	4628      	mov	r0, r5
 8015c2a:	47b0      	blx	r6
 8015c2c:	1c41      	adds	r1, r0, #1
 8015c2e:	d1c8      	bne.n	8015bc2 <__sflush_r+0x36>
 8015c30:	682b      	ldr	r3, [r5, #0]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d0c5      	beq.n	8015bc2 <__sflush_r+0x36>
 8015c36:	2b1d      	cmp	r3, #29
 8015c38:	d001      	beq.n	8015c3e <__sflush_r+0xb2>
 8015c3a:	2b16      	cmp	r3, #22
 8015c3c:	d101      	bne.n	8015c42 <__sflush_r+0xb6>
 8015c3e:	602f      	str	r7, [r5, #0]
 8015c40:	e7b1      	b.n	8015ba6 <__sflush_r+0x1a>
 8015c42:	89a3      	ldrh	r3, [r4, #12]
 8015c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c48:	81a3      	strh	r3, [r4, #12]
 8015c4a:	e7ad      	b.n	8015ba8 <__sflush_r+0x1c>
 8015c4c:	690f      	ldr	r7, [r1, #16]
 8015c4e:	2f00      	cmp	r7, #0
 8015c50:	d0a9      	beq.n	8015ba6 <__sflush_r+0x1a>
 8015c52:	0793      	lsls	r3, r2, #30
 8015c54:	680e      	ldr	r6, [r1, #0]
 8015c56:	bf08      	it	eq
 8015c58:	694b      	ldreq	r3, [r1, #20]
 8015c5a:	600f      	str	r7, [r1, #0]
 8015c5c:	bf18      	it	ne
 8015c5e:	2300      	movne	r3, #0
 8015c60:	eba6 0807 	sub.w	r8, r6, r7
 8015c64:	608b      	str	r3, [r1, #8]
 8015c66:	f1b8 0f00 	cmp.w	r8, #0
 8015c6a:	dd9c      	ble.n	8015ba6 <__sflush_r+0x1a>
 8015c6c:	4643      	mov	r3, r8
 8015c6e:	463a      	mov	r2, r7
 8015c70:	6a21      	ldr	r1, [r4, #32]
 8015c72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015c74:	4628      	mov	r0, r5
 8015c76:	47b0      	blx	r6
 8015c78:	2800      	cmp	r0, #0
 8015c7a:	dc06      	bgt.n	8015c8a <__sflush_r+0xfe>
 8015c7c:	89a3      	ldrh	r3, [r4, #12]
 8015c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c82:	81a3      	strh	r3, [r4, #12]
 8015c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015c88:	e78e      	b.n	8015ba8 <__sflush_r+0x1c>
 8015c8a:	4407      	add	r7, r0
 8015c8c:	eba8 0800 	sub.w	r8, r8, r0
 8015c90:	e7e9      	b.n	8015c66 <__sflush_r+0xda>
 8015c92:	bf00      	nop
 8015c94:	20400001 	.word	0x20400001

08015c98 <_fflush_r>:
 8015c98:	b538      	push	{r3, r4, r5, lr}
 8015c9a:	690b      	ldr	r3, [r1, #16]
 8015c9c:	4605      	mov	r5, r0
 8015c9e:	460c      	mov	r4, r1
 8015ca0:	b1db      	cbz	r3, 8015cda <_fflush_r+0x42>
 8015ca2:	b118      	cbz	r0, 8015cac <_fflush_r+0x14>
 8015ca4:	6983      	ldr	r3, [r0, #24]
 8015ca6:	b90b      	cbnz	r3, 8015cac <_fflush_r+0x14>
 8015ca8:	f7ff fa38 	bl	801511c <__sinit>
 8015cac:	4b0c      	ldr	r3, [pc, #48]	; (8015ce0 <_fflush_r+0x48>)
 8015cae:	429c      	cmp	r4, r3
 8015cb0:	d109      	bne.n	8015cc6 <_fflush_r+0x2e>
 8015cb2:	686c      	ldr	r4, [r5, #4]
 8015cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015cb8:	b17b      	cbz	r3, 8015cda <_fflush_r+0x42>
 8015cba:	4621      	mov	r1, r4
 8015cbc:	4628      	mov	r0, r5
 8015cbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015cc2:	f7ff bf63 	b.w	8015b8c <__sflush_r>
 8015cc6:	4b07      	ldr	r3, [pc, #28]	; (8015ce4 <_fflush_r+0x4c>)
 8015cc8:	429c      	cmp	r4, r3
 8015cca:	d101      	bne.n	8015cd0 <_fflush_r+0x38>
 8015ccc:	68ac      	ldr	r4, [r5, #8]
 8015cce:	e7f1      	b.n	8015cb4 <_fflush_r+0x1c>
 8015cd0:	4b05      	ldr	r3, [pc, #20]	; (8015ce8 <_fflush_r+0x50>)
 8015cd2:	429c      	cmp	r4, r3
 8015cd4:	bf08      	it	eq
 8015cd6:	68ec      	ldreq	r4, [r5, #12]
 8015cd8:	e7ec      	b.n	8015cb4 <_fflush_r+0x1c>
 8015cda:	2000      	movs	r0, #0
 8015cdc:	bd38      	pop	{r3, r4, r5, pc}
 8015cde:	bf00      	nop
 8015ce0:	08029878 	.word	0x08029878
 8015ce4:	08029898 	.word	0x08029898
 8015ce8:	08029858 	.word	0x08029858

08015cec <_lseek_r>:
 8015cec:	b538      	push	{r3, r4, r5, lr}
 8015cee:	4c07      	ldr	r4, [pc, #28]	; (8015d0c <_lseek_r+0x20>)
 8015cf0:	4605      	mov	r5, r0
 8015cf2:	4608      	mov	r0, r1
 8015cf4:	4611      	mov	r1, r2
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	6022      	str	r2, [r4, #0]
 8015cfa:	461a      	mov	r2, r3
 8015cfc:	f7eb f970 	bl	8000fe0 <_lseek>
 8015d00:	1c43      	adds	r3, r0, #1
 8015d02:	d102      	bne.n	8015d0a <_lseek_r+0x1e>
 8015d04:	6823      	ldr	r3, [r4, #0]
 8015d06:	b103      	cbz	r3, 8015d0a <_lseek_r+0x1e>
 8015d08:	602b      	str	r3, [r5, #0]
 8015d0a:	bd38      	pop	{r3, r4, r5, pc}
 8015d0c:	2000b458 	.word	0x2000b458

08015d10 <__swhatbuf_r>:
 8015d10:	b570      	push	{r4, r5, r6, lr}
 8015d12:	460e      	mov	r6, r1
 8015d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d18:	2900      	cmp	r1, #0
 8015d1a:	b096      	sub	sp, #88	; 0x58
 8015d1c:	4614      	mov	r4, r2
 8015d1e:	461d      	mov	r5, r3
 8015d20:	da07      	bge.n	8015d32 <__swhatbuf_r+0x22>
 8015d22:	2300      	movs	r3, #0
 8015d24:	602b      	str	r3, [r5, #0]
 8015d26:	89b3      	ldrh	r3, [r6, #12]
 8015d28:	061a      	lsls	r2, r3, #24
 8015d2a:	d410      	bmi.n	8015d4e <__swhatbuf_r+0x3e>
 8015d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015d30:	e00e      	b.n	8015d50 <__swhatbuf_r+0x40>
 8015d32:	466a      	mov	r2, sp
 8015d34:	f000 f864 	bl	8015e00 <_fstat_r>
 8015d38:	2800      	cmp	r0, #0
 8015d3a:	dbf2      	blt.n	8015d22 <__swhatbuf_r+0x12>
 8015d3c:	9a01      	ldr	r2, [sp, #4]
 8015d3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015d42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015d46:	425a      	negs	r2, r3
 8015d48:	415a      	adcs	r2, r3
 8015d4a:	602a      	str	r2, [r5, #0]
 8015d4c:	e7ee      	b.n	8015d2c <__swhatbuf_r+0x1c>
 8015d4e:	2340      	movs	r3, #64	; 0x40
 8015d50:	2000      	movs	r0, #0
 8015d52:	6023      	str	r3, [r4, #0]
 8015d54:	b016      	add	sp, #88	; 0x58
 8015d56:	bd70      	pop	{r4, r5, r6, pc}

08015d58 <__smakebuf_r>:
 8015d58:	898b      	ldrh	r3, [r1, #12]
 8015d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015d5c:	079d      	lsls	r5, r3, #30
 8015d5e:	4606      	mov	r6, r0
 8015d60:	460c      	mov	r4, r1
 8015d62:	d507      	bpl.n	8015d74 <__smakebuf_r+0x1c>
 8015d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015d68:	6023      	str	r3, [r4, #0]
 8015d6a:	6123      	str	r3, [r4, #16]
 8015d6c:	2301      	movs	r3, #1
 8015d6e:	6163      	str	r3, [r4, #20]
 8015d70:	b002      	add	sp, #8
 8015d72:	bd70      	pop	{r4, r5, r6, pc}
 8015d74:	ab01      	add	r3, sp, #4
 8015d76:	466a      	mov	r2, sp
 8015d78:	f7ff ffca 	bl	8015d10 <__swhatbuf_r>
 8015d7c:	9900      	ldr	r1, [sp, #0]
 8015d7e:	4605      	mov	r5, r0
 8015d80:	4630      	mov	r0, r6
 8015d82:	f7ff faab 	bl	80152dc <_malloc_r>
 8015d86:	b948      	cbnz	r0, 8015d9c <__smakebuf_r+0x44>
 8015d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d8c:	059a      	lsls	r2, r3, #22
 8015d8e:	d4ef      	bmi.n	8015d70 <__smakebuf_r+0x18>
 8015d90:	f023 0303 	bic.w	r3, r3, #3
 8015d94:	f043 0302 	orr.w	r3, r3, #2
 8015d98:	81a3      	strh	r3, [r4, #12]
 8015d9a:	e7e3      	b.n	8015d64 <__smakebuf_r+0xc>
 8015d9c:	4b0d      	ldr	r3, [pc, #52]	; (8015dd4 <__smakebuf_r+0x7c>)
 8015d9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8015da0:	89a3      	ldrh	r3, [r4, #12]
 8015da2:	6020      	str	r0, [r4, #0]
 8015da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015da8:	81a3      	strh	r3, [r4, #12]
 8015daa:	9b00      	ldr	r3, [sp, #0]
 8015dac:	6163      	str	r3, [r4, #20]
 8015dae:	9b01      	ldr	r3, [sp, #4]
 8015db0:	6120      	str	r0, [r4, #16]
 8015db2:	b15b      	cbz	r3, 8015dcc <__smakebuf_r+0x74>
 8015db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015db8:	4630      	mov	r0, r6
 8015dba:	f000 f833 	bl	8015e24 <_isatty_r>
 8015dbe:	b128      	cbz	r0, 8015dcc <__smakebuf_r+0x74>
 8015dc0:	89a3      	ldrh	r3, [r4, #12]
 8015dc2:	f023 0303 	bic.w	r3, r3, #3
 8015dc6:	f043 0301 	orr.w	r3, r3, #1
 8015dca:	81a3      	strh	r3, [r4, #12]
 8015dcc:	89a3      	ldrh	r3, [r4, #12]
 8015dce:	431d      	orrs	r5, r3
 8015dd0:	81a5      	strh	r5, [r4, #12]
 8015dd2:	e7cd      	b.n	8015d70 <__smakebuf_r+0x18>
 8015dd4:	080150e5 	.word	0x080150e5

08015dd8 <__malloc_lock>:
 8015dd8:	4770      	bx	lr

08015dda <__malloc_unlock>:
 8015dda:	4770      	bx	lr

08015ddc <_read_r>:
 8015ddc:	b538      	push	{r3, r4, r5, lr}
 8015dde:	4c07      	ldr	r4, [pc, #28]	; (8015dfc <_read_r+0x20>)
 8015de0:	4605      	mov	r5, r0
 8015de2:	4608      	mov	r0, r1
 8015de4:	4611      	mov	r1, r2
 8015de6:	2200      	movs	r2, #0
 8015de8:	6022      	str	r2, [r4, #0]
 8015dea:	461a      	mov	r2, r3
 8015dec:	f7eb f898 	bl	8000f20 <_read>
 8015df0:	1c43      	adds	r3, r0, #1
 8015df2:	d102      	bne.n	8015dfa <_read_r+0x1e>
 8015df4:	6823      	ldr	r3, [r4, #0]
 8015df6:	b103      	cbz	r3, 8015dfa <_read_r+0x1e>
 8015df8:	602b      	str	r3, [r5, #0]
 8015dfa:	bd38      	pop	{r3, r4, r5, pc}
 8015dfc:	2000b458 	.word	0x2000b458

08015e00 <_fstat_r>:
 8015e00:	b538      	push	{r3, r4, r5, lr}
 8015e02:	4c07      	ldr	r4, [pc, #28]	; (8015e20 <_fstat_r+0x20>)
 8015e04:	2300      	movs	r3, #0
 8015e06:	4605      	mov	r5, r0
 8015e08:	4608      	mov	r0, r1
 8015e0a:	4611      	mov	r1, r2
 8015e0c:	6023      	str	r3, [r4, #0]
 8015e0e:	f7eb f8cc 	bl	8000faa <_fstat>
 8015e12:	1c43      	adds	r3, r0, #1
 8015e14:	d102      	bne.n	8015e1c <_fstat_r+0x1c>
 8015e16:	6823      	ldr	r3, [r4, #0]
 8015e18:	b103      	cbz	r3, 8015e1c <_fstat_r+0x1c>
 8015e1a:	602b      	str	r3, [r5, #0]
 8015e1c:	bd38      	pop	{r3, r4, r5, pc}
 8015e1e:	bf00      	nop
 8015e20:	2000b458 	.word	0x2000b458

08015e24 <_isatty_r>:
 8015e24:	b538      	push	{r3, r4, r5, lr}
 8015e26:	4c06      	ldr	r4, [pc, #24]	; (8015e40 <_isatty_r+0x1c>)
 8015e28:	2300      	movs	r3, #0
 8015e2a:	4605      	mov	r5, r0
 8015e2c:	4608      	mov	r0, r1
 8015e2e:	6023      	str	r3, [r4, #0]
 8015e30:	f7eb f8cb 	bl	8000fca <_isatty>
 8015e34:	1c43      	adds	r3, r0, #1
 8015e36:	d102      	bne.n	8015e3e <_isatty_r+0x1a>
 8015e38:	6823      	ldr	r3, [r4, #0]
 8015e3a:	b103      	cbz	r3, 8015e3e <_isatty_r+0x1a>
 8015e3c:	602b      	str	r3, [r5, #0]
 8015e3e:	bd38      	pop	{r3, r4, r5, pc}
 8015e40:	2000b458 	.word	0x2000b458

08015e44 <_init>:
 8015e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e46:	bf00      	nop
 8015e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e4a:	bc08      	pop	{r3}
 8015e4c:	469e      	mov	lr, r3
 8015e4e:	4770      	bx	lr

08015e50 <_fini>:
 8015e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e52:	bf00      	nop
 8015e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e56:	bc08      	pop	{r3}
 8015e58:	469e      	mov	lr, r3
 8015e5a:	4770      	bx	lr
