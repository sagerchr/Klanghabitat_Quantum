
updating_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016230  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013a94  08016430  08016430  00026430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029ec4  08029ec4  00040080  2**0
                  CONTENTS
  4 .ARM          00000008  08029ec4  08029ec4  00039ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029ecc  08029ecc  00040080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08029ecc  08029ecc  00039ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08029ed0  08029ed0  00039ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08029ed4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b384  20000080  08029f54  00040080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b404  08029f54  0004b404  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00040080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045681  00000000  00000000  000400ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000849c  00000000  00000000  0008572f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025e8  00000000  00000000  0008dbd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000023c0  00000000  00000000  000901b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00039d66  00000000  00000000  00092578  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002fcd1  00000000  00000000  000cc2de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00122f7c  00000000  00000000  000fbfaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021ef2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a31c  00000000  00000000  0021efa8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08016418 	.word	0x08016418

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08016418 	.word	0x08016418

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <MY_FLASH_EraseSector>:
static uint8_t MY_SectorNum;

//functions definitions
//1. Erase Sector
static void MY_FLASH_EraseSector(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000614:	f002 fa18 	bl	8002a48 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(MY_SectorNum, FLASH_VOLTAGE_RANGE_3);
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MY_FLASH_EraseSector+0x38>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2102      	movs	r1, #2
 800061e:	4618      	mov	r0, r3
 8000620:	f002 fb6c 	bl	8002cfc <FLASH_Erase_Sector>
	FLASH_Erase_Sector(MY_SectorNum+1, FLASH_VOLTAGE_RANGE_3);
 8000624:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MY_FLASH_EraseSector+0x38>)
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f002 fb65 	bl	8002cfc <FLASH_Erase_Sector>
	FLASH_Erase_Sector(MY_SectorNum+2, FLASH_VOLTAGE_RANGE_3);
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <MY_FLASH_EraseSector+0x38>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	3302      	adds	r3, #2
 8000638:	2102      	movs	r1, #2
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fb5e 	bl	8002cfc <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8000640:	f002 fa24 	bl	8002a8c <HAL_FLASH_Lock>
}
 8000644:	bf00      	nop
 8000646:	bd80      	pop	{r7, pc}
 8000648:	200000a0 	.word	0x200000a0

0800064c <MY_FLASH_SetSectorAddrs>:

//2. Set Sector Adress
void MY_FLASH_SetSectorAddrs(uint8_t sector, uint32_t addrs)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	6039      	str	r1, [r7, #0]
 8000656:	71fb      	strb	r3, [r7, #7]
	MY_SectorNum = sector;
 8000658:	4a06      	ldr	r2, [pc, #24]	; (8000674 <MY_FLASH_SetSectorAddrs+0x28>)
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	7013      	strb	r3, [r2, #0]
	MY_SectorAddrs = addrs;
 800065e:	4a06      	ldr	r2, [pc, #24]	; (8000678 <MY_FLASH_SetSectorAddrs+0x2c>)
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	6013      	str	r3, [r2, #0]

	//Erase sector before write
	MY_FLASH_EraseSector();
 8000664:	f7ff ffd4 	bl	8000610 <MY_FLASH_EraseSector>

	//Unlock Flash
	HAL_FLASH_Unlock();
 8000668:	f002 f9ee 	bl	8002a48 <HAL_FLASH_Unlock>
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000a0 	.word	0x200000a0
 8000678:	2000009c 	.word	0x2000009c

0800067c <MY_FLASH_WriteN>:

//3. Write Flash
void MY_FLASH_WriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b089      	sub	sp, #36	; 0x24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
 8000688:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = MY_SectorAddrs + idx;
 800068a:	4b39      	ldr	r3, [pc, #228]	; (8000770 <MY_FLASH_WriteN+0xf4>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	68fa      	ldr	r2, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	61fb      	str	r3, [r7, #28]
	

	//Write to Flash
	switch(dataType)
 8000694:	78fb      	ldrb	r3, [r7, #3]
 8000696:	2b01      	cmp	r3, #1
 8000698:	d022      	beq.n	80006e0 <MY_FLASH_WriteN+0x64>
 800069a:	2b02      	cmp	r3, #2
 800069c:	d040      	beq.n	8000720 <MY_FLASH_WriteN+0xa4>
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d15d      	bne.n	800075e <MY_FLASH_WriteN+0xe2>
	{
		case DATA_TYPE_8:
				for(uint32_t i=0; i<Nsize; i++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	e016      	b.n	80006d6 <MY_FLASH_WriteN+0x5a>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress , ((uint8_t *)wrBuf)[i]);
 80006a8:	68ba      	ldr	r2, [r7, #8]
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	4413      	add	r3, r2
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	f04f 0400 	mov.w	r4, #0
 80006b6:	461a      	mov	r2, r3
 80006b8:	4623      	mov	r3, r4
 80006ba:	69f9      	ldr	r1, [r7, #28]
 80006bc:	2000      	movs	r0, #0
 80006be:	f002 f967 	bl	8002990 <HAL_FLASH_Program>
					flashAddress++;
 80006c2:	69fb      	ldr	r3, [r7, #28]
 80006c4:	3301      	adds	r3, #1
 80006c6:	61fb      	str	r3, [r7, #28]
					HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 80006c8:	2180      	movs	r1, #128	; 0x80
 80006ca:	482a      	ldr	r0, [pc, #168]	; (8000774 <MY_FLASH_WriteN+0xf8>)
 80006cc:	f002 fd29 	bl	8003122 <HAL_GPIO_TogglePin>
				for(uint32_t i=0; i<Nsize; i++)
 80006d0:	69bb      	ldr	r3, [r7, #24]
 80006d2:	3301      	adds	r3, #1
 80006d4:	61bb      	str	r3, [r7, #24]
 80006d6:	69ba      	ldr	r2, [r7, #24]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	429a      	cmp	r2, r3
 80006dc:	d3e4      	bcc.n	80006a8 <MY_FLASH_WriteN+0x2c>
				}
			break;
 80006de:	e03e      	b.n	800075e <MY_FLASH_WriteN+0xe2>
		
		case DATA_TYPE_16:
				for(uint32_t i=0; i<Nsize; i++)
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	e017      	b.n	8000716 <MY_FLASH_WriteN+0x9a>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress , ((uint16_t *)wrBuf)[i]);
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	4413      	add	r3, r2
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	f04f 0400 	mov.w	r4, #0
 80006f6:	461a      	mov	r2, r3
 80006f8:	4623      	mov	r3, r4
 80006fa:	69f9      	ldr	r1, [r7, #28]
 80006fc:	2001      	movs	r0, #1
 80006fe:	f002 f947 	bl	8002990 <HAL_FLASH_Program>
					flashAddress+=2;
 8000702:	69fb      	ldr	r3, [r7, #28]
 8000704:	3302      	adds	r3, #2
 8000706:	61fb      	str	r3, [r7, #28]
					HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	481a      	ldr	r0, [pc, #104]	; (8000774 <MY_FLASH_WriteN+0xf8>)
 800070c:	f002 fd09 	bl	8003122 <HAL_GPIO_TogglePin>
				for(uint32_t i=0; i<Nsize; i++)
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	3301      	adds	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
 8000716:	697a      	ldr	r2, [r7, #20]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	429a      	cmp	r2, r3
 800071c:	d3e3      	bcc.n	80006e6 <MY_FLASH_WriteN+0x6a>
				}
			break;
 800071e:	e01e      	b.n	800075e <MY_FLASH_WriteN+0xe2>
		
		case DATA_TYPE_32:
				for(uint32_t i=0; i<Nsize; i++)
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	e016      	b.n	8000754 <MY_FLASH_WriteN+0xd8>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress , ((uint32_t *)wrBuf)[i]);
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	68ba      	ldr	r2, [r7, #8]
 800072c:	4413      	add	r3, r2
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f04f 0400 	mov.w	r4, #0
 8000734:	461a      	mov	r2, r3
 8000736:	4623      	mov	r3, r4
 8000738:	69f9      	ldr	r1, [r7, #28]
 800073a:	2002      	movs	r0, #2
 800073c:	f002 f928 	bl	8002990 <HAL_FLASH_Program>
					flashAddress+=4;
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	3304      	adds	r3, #4
 8000744:	61fb      	str	r3, [r7, #28]
					HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000746:	2180      	movs	r1, #128	; 0x80
 8000748:	480a      	ldr	r0, [pc, #40]	; (8000774 <MY_FLASH_WriteN+0xf8>)
 800074a:	f002 fcea 	bl	8003122 <HAL_GPIO_TogglePin>
				for(uint32_t i=0; i<Nsize; i++)
 800074e:	693b      	ldr	r3, [r7, #16]
 8000750:	3301      	adds	r3, #1
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693a      	ldr	r2, [r7, #16]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	429a      	cmp	r2, r3
 800075a:	d3e4      	bcc.n	8000726 <MY_FLASH_WriteN+0xaa>
				}
			break;
 800075c:	bf00      	nop
	}
	//Lock the Flash space

	HAL_GPIO_WritePin(GPIOB,LD2_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	4804      	ldr	r0, [pc, #16]	; (8000774 <MY_FLASH_WriteN+0xf8>)
 8000764:	f002 fcc4 	bl	80030f0 <HAL_GPIO_WritePin>
}
 8000768:	bf00      	nop
 800076a:	3724      	adds	r7, #36	; 0x24
 800076c:	46bd      	mov	sp, r7
 800076e:	bd90      	pop	{r4, r7, pc}
 8000770:	2000009c 	.word	0x2000009c
 8000774:	40020400 	.word	0x40020400

08000778 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000788:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	4a06      	ldr	r2, [pc, #24]	; (80007a8 <vApplicationGetIdleTaskMemory+0x30>)
 800078e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000796:	bf00      	nop
 8000798:	3714      	adds	r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	200000a4 	.word	0x200000a4
 80007a8:	200000f8 	.word	0x200000f8

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b5b0      	push	{r4, r5, r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b2:	f000 fe36 	bl	8001422 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f821 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 f963 	bl	8000a84 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007be:	f000 f903 	bl	80009c8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007c2:	f000 f931 	bl	8000a28 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80007c6:	f000 f8af 	bl	8000928 <MX_TIM3_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <main+0x48>)
 80007cc:	1d3c      	adds	r4, r7, #4
 80007ce:	461d      	mov	r5, r3
 80007d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f006 f860 	bl	80068a6 <osThreadCreate>
 80007e6:	4602      	mov	r2, r0
 80007e8:	4b03      	ldr	r3, [pc, #12]	; (80007f8 <main+0x4c>)
 80007ea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007ec:	f006 f844 	bl	8006878 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <main+0x44>
 80007f2:	bf00      	nop
 80007f4:	0801643c 	.word	0x0801643c
 80007f8:	20004630 	.word	0x20004630

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0b8      	sub	sp, #224	; 0xe0
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000806:	2234      	movs	r2, #52	; 0x34
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f014 fd1b 	bl	8015246 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2290      	movs	r2, #144	; 0x90
 8000826:	2100      	movs	r1, #0
 8000828:	4618      	mov	r0, r3
 800082a:	f014 fd0c 	bl	8015246 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800082e:	f002 fddb 	bl	80033e8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000832:	4b3a      	ldr	r3, [pc, #232]	; (800091c <SystemClock_Config+0x120>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	4a39      	ldr	r2, [pc, #228]	; (800091c <SystemClock_Config+0x120>)
 8000838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083c:	6413      	str	r3, [r2, #64]	; 0x40
 800083e:	4b37      	ldr	r3, [pc, #220]	; (800091c <SystemClock_Config+0x120>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084a:	4b35      	ldr	r3, [pc, #212]	; (8000920 <SystemClock_Config+0x124>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a34      	ldr	r2, [pc, #208]	; (8000920 <SystemClock_Config+0x124>)
 8000850:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000854:	6013      	str	r3, [r2, #0]
 8000856:	4b32      	ldr	r3, [pc, #200]	; (8000920 <SystemClock_Config+0x124>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000862:	2301      	movs	r3, #1
 8000864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000868:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800086c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000870:	2302      	movs	r3, #2
 8000872:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800087e:	2304      	movs	r3, #4
 8000880:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000884:	23d8      	movs	r3, #216	; 0xd8
 8000886:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088a:	2302      	movs	r3, #2
 800088c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000890:	2309      	movs	r3, #9
 8000892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000896:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800089a:	4618      	mov	r0, r3
 800089c:	f002 fe04 	bl	80034a8 <HAL_RCC_OscConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008a6:	f000 f9d3 	bl	8000c50 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008aa:	f002 fdad 	bl	8003408 <HAL_PWREx_EnableOverDrive>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80008b4:	f000 f9cc 	bl	8000c50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b8:	230f      	movs	r3, #15
 80008ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008be:	2302      	movs	r3, #2
 80008c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80008de:	2107      	movs	r1, #7
 80008e0:	4618      	mov	r0, r3
 80008e2:	f003 f88f 	bl	8003a04 <HAL_RCC_ClockConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80008ec:	f000 f9b0 	bl	8000c50 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <SystemClock_Config+0x128>)
 80008f2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008f4:	2300      	movs	r3, #0
 80008f6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008fe:	f107 0308 	add.w	r3, r7, #8
 8000902:	4618      	mov	r0, r3
 8000904:	f003 faa8 	bl	8003e58 <HAL_RCCEx_PeriphCLKConfig>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <SystemClock_Config+0x116>
  {
    Error_Handler();
 800090e:	f000 f99f 	bl	8000c50 <Error_Handler>
  }
}
 8000912:	bf00      	nop
 8000914:	37e0      	adds	r7, #224	; 0xe0
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023800 	.word	0x40023800
 8000920:	40007000 	.word	0x40007000
 8000924:	00200100 	.word	0x00200100

08000928 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_TIM3_Init+0x94>)
 8000948:	4a1d      	ldr	r2, [pc, #116]	; (80009c0 <MX_TIM3_Init+0x98>)
 800094a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 216;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_TIM3_Init+0x94>)
 800094e:	22d8      	movs	r2, #216	; 0xd8
 8000950:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_TIM3_Init+0x94>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100000;
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_TIM3_Init+0x94>)
 800095a:	4a1a      	ldr	r2, [pc, #104]	; (80009c4 <MX_TIM3_Init+0x9c>)
 800095c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_TIM3_Init+0x94>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_TIM3_Init+0x94>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800096a:	4814      	ldr	r0, [pc, #80]	; (80009bc <MX_TIM3_Init+0x94>)
 800096c:	f003 fe9a 	bl	80046a4 <HAL_TIM_Base_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000976:	f000 f96b 	bl	8000c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	4619      	mov	r1, r3
 8000986:	480d      	ldr	r0, [pc, #52]	; (80009bc <MX_TIM3_Init+0x94>)
 8000988:	f004 f802 	bl	8004990 <HAL_TIM_ConfigClockSource>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000992:	f000 f95d 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4619      	mov	r1, r3
 80009a2:	4806      	ldr	r0, [pc, #24]	; (80009bc <MX_TIM3_Init+0x94>)
 80009a4:	f004 fa10 	bl	8004dc8 <HAL_TIMEx_MasterConfigSynchronization>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80009ae:	f000 f94f 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20004ab8 	.word	0x20004ab8
 80009c0:	40000400 	.word	0x40000400
 80009c4:	000186a0 	.word	0x000186a0

080009c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009ce:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <MX_USART3_UART_Init+0x5c>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART3_UART_Init+0x58>)
 8000a0c:	f004 fa88 	bl	8004f20 <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000a16:	f000 f91b 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20004634 	.word	0x20004634
 8000a24:	40004800 	.word	0x40004800

08000a28 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a36:	2206      	movs	r2, #6
 8000a38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a48:	2202      	movs	r2, #2
 8000a4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a6c:	f002 fb73 	bl	8003156 <HAL_PCD_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a76:	f000 f8eb 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200046b4 	.word	0x200046b4

08000a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9a:	4b46      	ldr	r3, [pc, #280]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a45      	ldr	r2, [pc, #276]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b43      	ldr	r3, [pc, #268]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	61bb      	str	r3, [r7, #24]
 8000ab0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	4b40      	ldr	r3, [pc, #256]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a3f      	ldr	r2, [pc, #252]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b3d      	ldr	r3, [pc, #244]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b3a      	ldr	r3, [pc, #232]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a39      	ldr	r2, [pc, #228]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b37      	ldr	r3, [pc, #220]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	4b34      	ldr	r3, [pc, #208]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a33      	ldr	r2, [pc, #204]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b31      	ldr	r3, [pc, #196]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	4a2d      	ldr	r2, [pc, #180]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000b00:	f043 0308 	orr.w	r3, r3, #8
 8000b04:	6313      	str	r3, [r2, #48]	; 0x30
 8000b06:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0a:	f003 0308 	and.w	r3, r3, #8
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b12:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a27      	ldr	r2, [pc, #156]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <MX_GPIO_Init+0x130>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b30:	4821      	ldr	r0, [pc, #132]	; (8000bb8 <MX_GPIO_Init+0x134>)
 8000b32:	f002 fadd 	bl	80030f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2140      	movs	r1, #64	; 0x40
 8000b3a:	4820      	ldr	r0, [pc, #128]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000b3c:	f002 fad8 	bl	80030f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b46:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <MX_GPIO_Init+0x13c>)
 8000b48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	4619      	mov	r1, r3
 8000b54:	481b      	ldr	r0, [pc, #108]	; (8000bc4 <MX_GPIO_Init+0x140>)
 8000b56:	f002 f921 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000b5a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	4811      	ldr	r0, [pc, #68]	; (8000bb8 <MX_GPIO_Init+0x134>)
 8000b74:	f002 f912 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b78:	2340      	movs	r3, #64	; 0x40
 8000b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 031c 	add.w	r3, r7, #28
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	480b      	ldr	r0, [pc, #44]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000b90:	f002 f904 	bl	8002d9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_GPIO_Init+0x138>)
 8000ba8:	f002 f8f8 	bl	8002d9c <HAL_GPIO_Init>

}
 8000bac:	bf00      	nop
 8000bae:	3730      	adds	r7, #48	; 0x30
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020400 	.word	0x40020400
 8000bbc:	40021800 	.word	0x40021800
 8000bc0:	10110000 	.word	0x10110000
 8000bc4:	40020800 	.word	0x40020800

08000bc8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000bd0:	f005 f8b0 	bl	8005d34 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  httpd_init();
 8000bd4:	f009 fce2 	bl	800a59c <httpd_init>
  HAL_TIM_Base_Start_IT(&htim3);
 8000bd8:	4812      	ldr	r0, [pc, #72]	; (8000c24 <StartDefaultTask+0x5c>)
 8000bda:	f003 fd8f 	bl	80046fc <HAL_TIM_Base_Start_IT>
  //MY_FLASH_SetSectorAddrs(5, 0x08040000);
  echo_init();
 8000bde:	f000 fa97 	bl	8001110 <echo_init>


  /* Infinite loop */
  for(;;)
  {
	  for(int i= 0; i <30; i++){
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	e009      	b.n	8000bfc <StartDefaultTask+0x34>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000be8:	2101      	movs	r1, #1
 8000bea:	480f      	ldr	r0, [pc, #60]	; (8000c28 <StartDefaultTask+0x60>)
 8000bec:	f002 fa99 	bl	8003122 <HAL_GPIO_TogglePin>
		  HAL_Delay(250);
 8000bf0:	20fa      	movs	r0, #250	; 0xfa
 8000bf2:	f000 fc43 	bl	800147c <HAL_Delay>
	  for(int i= 0; i <30; i++){
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b1d      	cmp	r3, #29
 8000c00:	ddf2      	ble.n	8000be8 <StartDefaultTask+0x20>
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(int i= 0; i <10 ; i++){
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
 8000c06:	e009      	b.n	8000c1c <StartDefaultTask+0x54>
		  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4807      	ldr	r0, [pc, #28]	; (8000c28 <StartDefaultTask+0x60>)
 8000c0c:	f002 fa89 	bl	8003122 <HAL_GPIO_TogglePin>

		  HAL_Delay(50);
 8000c10:	2032      	movs	r0, #50	; 0x32
 8000c12:	f000 fc33 	bl	800147c <HAL_Delay>
	  for(int i= 0; i <10 ; i++){
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	2b09      	cmp	r3, #9
 8000c20:	ddf2      	ble.n	8000c08 <StartDefaultTask+0x40>
	  for(int i= 0; i <30; i++){
 8000c22:	e7de      	b.n	8000be2 <StartDefaultTask+0x1a>
 8000c24:	20004ab8 	.word	0x20004ab8
 8000c28:	40020400 	.word	0x40020400

08000c2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d101      	bne.n	8000c42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c3e:	f000 fbfd 	bl	800143c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40010000 	.word	0x40010000

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <HAL_MspInit+0x7c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a1c      	ldr	r2, [pc, #112]	; (8000cdc <HAL_MspInit+0x7c>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
 8000c72:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <HAL_MspInit+0x7c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_MspInit+0x7c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a16      	ldr	r2, [pc, #88]	; (8000cdc <HAL_MspInit+0x7c>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_MspInit+0x7c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 10, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	210a      	movs	r1, #10
 8000c9a:	f06f 000b 	mvn.w	r0, #11
 8000c9e:	f000 fcc7 	bl	8001630 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 10, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	210a      	movs	r1, #10
 8000ca6:	f06f 000a 	mvn.w	r0, #10
 8000caa:	f000 fcc1 	bl	8001630 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 10, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	210a      	movs	r1, #10
 8000cb2:	f06f 0009 	mvn.w	r0, #9
 8000cb6:	f000 fcbb 	bl	8001630 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 10, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	210a      	movs	r1, #10
 8000cbe:	f06f 0003 	mvn.w	r0, #3
 8000cc2:	f000 fcb5 	bl	8001630 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	210f      	movs	r1, #15
 8000cca:	f06f 0001 	mvn.w	r0, #1
 8000cce:	f000 fcaf 	bl	8001630 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40023800 	.word	0x40023800

08000ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_TIM_Base_MspInit+0x44>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d113      	bne.n	8000d1a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	; (8000d28 <HAL_TIM_Base_MspInit+0x48>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <HAL_TIM_Base_MspInit+0x48>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <HAL_TIM_Base_MspInit+0x48>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2103      	movs	r1, #3
 8000d0e:	201d      	movs	r0, #29
 8000d10:	f000 fc8e 	bl	8001630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d14:	201d      	movs	r0, #29
 8000d16:	f000 fca7 	bl	8001668 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40000400 	.word	0x40000400
 8000d28:	40023800 	.word	0x40023800

08000d2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <HAL_UART_MspInit+0x7c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d128      	bne.n	8000da0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a16      	ldr	r2, [pc, #88]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a10      	ldr	r2, [pc, #64]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <HAL_UART_MspInit+0x80>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d90:	2307      	movs	r3, #7
 8000d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <HAL_UART_MspInit+0x84>)
 8000d9c:	f001 fffe 	bl	8002d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	; 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40004800 	.word	0x40004800
 8000dac:	40023800 	.word	0x40023800
 8000db0:	40020c00 	.word	0x40020c00

08000db4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dd4:	d141      	bne.n	8000e5a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <HAL_PCD_MspInit+0xb0>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <HAL_PCD_MspInit+0xb0>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
 8000de2:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <HAL_PCD_MspInit+0xb0>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dee:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df4:	2302      	movs	r3, #2
 8000df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e00:	230a      	movs	r3, #10
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4817      	ldr	r0, [pc, #92]	; (8000e68 <HAL_PCD_MspInit+0xb4>)
 8000e0c:	f001 ffc6 	bl	8002d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4810      	ldr	r0, [pc, #64]	; (8000e68 <HAL_PCD_MspInit+0xb4>)
 8000e26:	f001 ffb9 	bl	8002d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_PCD_MspInit+0xb0>)
 8000e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2e:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <HAL_PCD_MspInit+0xb0>)
 8000e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e34:	6353      	str	r3, [r2, #52]	; 0x34
 8000e36:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_PCD_MspInit+0xb0>)
 8000e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_PCD_MspInit+0xb0>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_PCD_MspInit+0xb0>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b05      	ldr	r3, [pc, #20]	; (8000e64 <HAL_PCD_MspInit+0xb0>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e56:	60bb      	str	r3, [r7, #8]
 8000e58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	; 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000

08000e6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08c      	sub	sp, #48	; 0x30
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	2019      	movs	r0, #25
 8000e82:	f000 fbd5 	bl	8001630 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e86:	2019      	movs	r0, #25
 8000e88:	f000 fbee 	bl	8001668 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <HAL_InitTick+0xa0>)
 8000e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e90:	4a1e      	ldr	r2, [pc, #120]	; (8000f0c <HAL_InitTick+0xa0>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6453      	str	r3, [r2, #68]	; 0x44
 8000e98:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <HAL_InitTick+0xa0>)
 8000e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ea4:	f107 0210 	add.w	r2, r7, #16
 8000ea8:	f107 0314 	add.w	r3, r7, #20
 8000eac:	4611      	mov	r1, r2
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f002 ffa0 	bl	8003df4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000eb4:	f002 ff8a 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec0:	4a13      	ldr	r2, [pc, #76]	; (8000f10 <HAL_InitTick+0xa4>)
 8000ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec6:	0c9b      	lsrs	r3, r3, #18
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <HAL_InitTick+0xa8>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <HAL_InitTick+0xac>)
 8000ed0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <HAL_InitTick+0xa8>)
 8000ed4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ed8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000eda:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <HAL_InitTick+0xa8>)
 8000edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ede:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <HAL_InitTick+0xa8>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <HAL_InitTick+0xa8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <HAL_InitTick+0xa8>)
 8000eee:	f003 fbd9 	bl	80046a4 <HAL_TIM_Base_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d104      	bne.n	8000f02 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000ef8:	4806      	ldr	r0, [pc, #24]	; (8000f14 <HAL_InitTick+0xa8>)
 8000efa:	f003 fbff 	bl	80046fc <HAL_TIM_Base_Start_IT>
 8000efe:	4603      	mov	r3, r0
 8000f00:	e000      	b.n	8000f04 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3730      	adds	r7, #48	; 0x30
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	431bde83 	.word	0x431bde83
 8000f14:	20004b2c 	.word	0x20004b2c
 8000f18:	40010000 	.word	0x40010000

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <MemManage_Handler+0x4>

08000f36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000f56:	f003 fbfb 	bl	8004750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20004b2c 	.word	0x20004b2c

08000f64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <TIM3_IRQHandler+0x18>)
 8000f6a:	f003 fbf1 	bl	8004750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000f6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f72:	4803      	ldr	r0, [pc, #12]	; (8000f80 <TIM3_IRQHandler+0x1c>)
 8000f74:	f002 f8d5 	bl	8003122 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20004ab8 	.word	0x20004ab8
 8000f80:	40020400 	.word	0x40020400

08000f84 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <ETH_IRQHandler+0x10>)
 8000f8a:	f000 ff5f 	bl	8001e4c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200064b0 	.word	0x200064b0

08000f98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	e00a      	b.n	8000fc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000faa:	f3af 8000 	nop.w
 8000fae:	4601      	mov	r1, r0
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	60ba      	str	r2, [r7, #8]
 8000fb6:	b2ca      	uxtb	r2, r1
 8000fb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697a      	ldr	r2, [r7, #20]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	dbf0      	blt.n	8000faa <_read+0x12>
	}

return len;
 8000fc8:	687b      	ldr	r3, [r7, #4]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3718      	adds	r7, #24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	60f8      	str	r0, [r7, #12]
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
 8000fe2:	e009      	b.n	8000ff8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	1c5a      	adds	r2, r3, #1
 8000fe8:	60ba      	str	r2, [r7, #8]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	617b      	str	r3, [r7, #20]
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	dbf1      	blt.n	8000fe4 <_write+0x12>
	}
	return len;
 8001000:	687b      	ldr	r3, [r7, #4]
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <_close>:

int _close(int file)
{
 800100a:	b480      	push	{r7}
 800100c:	b083      	sub	sp, #12
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
	return -1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
 800102a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001032:	605a      	str	r2, [r3, #4]
	return 0;
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <_isatty>:

int _isatty(int file)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
	return 1;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
	return 0;
 8001064:	2300      	movs	r3, #0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3714      	adds	r7, #20
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <_sbrk+0x5c>)
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <_sbrk+0x60>)
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <_sbrk+0x64>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <_sbrk+0x68>)
 8001094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d205      	bcs.n	80010b0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <_sbrk+0x6c>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ae:	e009      	b.n	80010c4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b6:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <_sbrk+0x64>)
 80010c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c2:	68fb      	ldr	r3, [r7, #12]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	371c      	adds	r7, #28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	20080000 	.word	0x20080000
 80010d4:	00000400 	.word	0x00000400
 80010d8:	200002f8 	.word	0x200002f8
 80010dc:	2000b408 	.word	0x2000b408
 80010e0:	2000b3fc 	.word	0x2000b3fc

080010e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <SystemInit+0x28>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ee:	4a07      	ldr	r2, [pc, #28]	; (800110c <SystemInit+0x28>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010f8:	4b04      	ldr	r3, [pc, #16]	; (800110c <SystemInit+0x28>)
 80010fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010fe:	609a      	str	r2, [r3, #8]
#endif
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <echo_init>:
#define FLASH_STORAGE 0x08040000
#define page_size 0x800

void
echo_init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
  echo_pcb = tcp_new();
 8001116:	f00c fc77 	bl	800da08 <tcp_new>
 800111a:	4602      	mov	r2, r0
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <echo_init+0x58>)
 800111e:	601a      	str	r2, [r3, #0]
  if (echo_pcb != NULL)
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <echo_init+0x58>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d01b      	beq.n	8001160 <echo_init+0x50>
  {
    err_t err;

    err = tcp_bind(echo_pcb, IP_ADDR_ANY, 7);
 8001128:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <echo_init+0x58>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2207      	movs	r2, #7
 800112e:	490f      	ldr	r1, [pc, #60]	; (800116c <echo_init+0x5c>)
 8001130:	4618      	mov	r0, r3
 8001132:	f00b fbc9 	bl	800c8c8 <tcp_bind>
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
    if (err == ERR_OK)
 800113a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10e      	bne.n	8001160 <echo_init+0x50>
    {
      echo_pcb = tcp_listen(echo_pcb);
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <echo_init+0x58>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	21ff      	movs	r1, #255	; 0xff
 8001148:	4618      	mov	r0, r3
 800114a:	f00b fc75 	bl	800ca38 <tcp_listen_with_backlog>
 800114e:	4602      	mov	r2, r0
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <echo_init+0x58>)
 8001152:	601a      	str	r2, [r3, #0]
      tcp_accept(echo_pcb, echo_accept);
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <echo_init+0x58>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4905      	ldr	r1, [pc, #20]	; (8001170 <echo_init+0x60>)
 800115a:	4618      	mov	r0, r3
 800115c:	f00c fce2 	bl	800db24 <tcp_accept>
  }
  else
  {
    /* abort? output diagnostic? */
  }
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200002fc 	.word	0x200002fc
 800116c:	08029e10 	.word	0x08029e10
 8001170:	08001175 	.word	0x08001175

08001174 <echo_accept>:
uint32_t count = 0;

err_t
echo_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	4613      	mov	r3, r2
 8001180:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* commonly observed practive to call tcp_setprio(), why? */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8001182:	2101      	movs	r1, #1
 8001184:	68b8      	ldr	r0, [r7, #8]
 8001186:	f00c fa4d 	bl	800d624 <tcp_setprio>

  es = (struct echo_state *)mem_malloc(sizeof(struct echo_state));
 800118a:	200c      	movs	r0, #12
 800118c:	f009 fd90 	bl	800acb0 <mem_malloc>
 8001190:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d019      	beq.n	80011cc <echo_accept+0x58>
  {
    es->state = ES_ACCEPTED;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	2201      	movs	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	2200      	movs	r2, #0
 80011a8:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
    /* pass newly allocated es to our callbacks */
    tcp_arg(newpcb, es);
 80011b0:	6939      	ldr	r1, [r7, #16]
 80011b2:	68b8      	ldr	r0, [r7, #8]
 80011b4:	f00c fc3e 	bl	800da34 <tcp_arg>
    tcp_recv(newpcb, echo_recv);
 80011b8:	490a      	ldr	r1, [pc, #40]	; (80011e4 <echo_accept+0x70>)
 80011ba:	68b8      	ldr	r0, [r7, #8]
 80011bc:	f00c fc4c 	bl	800da58 <tcp_recv>
    count = 0;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <echo_accept+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
    ret_err = ERR_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	75fb      	strb	r3, [r7, #23]
 80011ca:	e001      	b.n	80011d0 <echo_accept+0x5c>

  }
  else
  {
    ret_err = ERR_MEM;
 80011cc:	23ff      	movs	r3, #255	; 0xff
 80011ce:	75fb      	strb	r3, [r7, #23]
  }
  MY_FLASH_SetSectorAddrs(5, 0x08040000);
 80011d0:	4906      	ldr	r1, [pc, #24]	; (80011ec <echo_accept+0x78>)
 80011d2:	2005      	movs	r0, #5
 80011d4:	f7ff fa3a 	bl	800064c <MY_FLASH_SetSectorAddrs>
  return ret_err;
 80011d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	080011f1 	.word	0x080011f1
 80011e8:	20000300 	.word	0x20000300
 80011ec:	08040000 	.word	0x08040000

080011f0 <echo_recv>:

err_t
echo_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b090      	sub	sp, #64	; 0x40
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
 80011fc:	70fb      	strb	r3, [r7, #3]
 80011fe:	466b      	mov	r3, sp
 8001200:	461d      	mov	r5, r3


	if (!p) {
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10a      	bne.n	800121e <echo_recv+0x2e>
        tcp_close(tpcb);
 8001208:	68b8      	ldr	r0, [r7, #8]
 800120a:	f00b fa67 	bl	800c6dc <tcp_close>
        tcp_recv(tpcb, NULL);
 800120e:	2100      	movs	r1, #0
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f00c fc21 	bl	800da58 <tcp_recv>
        HAL_FLASH_Lock();
 8001216:	f001 fc39 	bl	8002a8c <HAL_FLASH_Lock>
        return ERR_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e0cd      	b.n	80013ba <echo_recv+0x1ca>
    }


	char buffer[p->len];
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	8958      	ldrh	r0, [r3, #10]
 8001222:	4603      	mov	r3, r0
 8001224:	3b01      	subs	r3, #1
 8001226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001228:	b281      	uxth	r1, r0
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	f04f 0400 	mov.w	r4, #0
 8001236:	00d4      	lsls	r4, r2, #3
 8001238:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800123c:	00cb      	lsls	r3, r1, #3
 800123e:	b281      	uxth	r1, r0
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	f04f 0300 	mov.w	r3, #0
 8001248:	f04f 0400 	mov.w	r4, #0
 800124c:	00d4      	lsls	r4, r2, #3
 800124e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001252:	00cb      	lsls	r3, r1, #3
 8001254:	4603      	mov	r3, r0
 8001256:	3307      	adds	r3, #7
 8001258:	08db      	lsrs	r3, r3, #3
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	ebad 0d03 	sub.w	sp, sp, r3
 8001260:	466b      	mov	r3, sp
 8001262:	3300      	adds	r3, #0
 8001264:	63bb      	str	r3, [r7, #56]	; 0x38
	char buffer2[p->len];
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	8958      	ldrh	r0, [r3, #10]
 800126a:	4603      	mov	r3, r0
 800126c:	3b01      	subs	r3, #1
 800126e:	637b      	str	r3, [r7, #52]	; 0x34
 8001270:	b281      	uxth	r1, r0
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	f04f 0400 	mov.w	r4, #0
 800127e:	00d4      	lsls	r4, r2, #3
 8001280:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001284:	00cb      	lsls	r3, r1, #3
 8001286:	b281      	uxth	r1, r0
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	f04f 0400 	mov.w	r4, #0
 8001294:	00d4      	lsls	r4, r2, #3
 8001296:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800129a:	00cb      	lsls	r3, r1, #3
 800129c:	4603      	mov	r3, r0
 800129e:	3307      	adds	r3, #7
 80012a0:	08db      	lsrs	r3, r3, #3
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	ebad 0d03 	sub.w	sp, sp, r3
 80012a8:	466b      	mov	r3, sp
 80012aa:	3300      	adds	r3, #0
 80012ac:	633b      	str	r3, [r7, #48]	; 0x30
    /* indicate that the packet has been received */
    tcp_recved(tpcb, p->len);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	895b      	ldrh	r3, [r3, #10]
 80012b2:	4619      	mov	r1, r3
 80012b4:	68b8      	ldr	r0, [r7, #8]
 80012b6:	f00b fcd5 	bl	800cc64 <tcp_recved>
    memcpy(buffer, p->payload,p->len);
 80012ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6859      	ldr	r1, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	895b      	ldrh	r3, [r3, #10]
 80012c4:	461a      	mov	r2, r3
 80012c6:	f013 ff9a 	bl	80151fe <memcpy>
    /* echo back the payload */
    /* in this case, we assume that the payload is < TCP_SND_BUF */

    //err = tcp_write(tpcb, p->payload, p->len, 1);
    /* free the received pbuf */
    pbuf_free(p);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f00a fd64 	bl	800bd98 <pbuf_free>

    MY_FLASH_WriteN(count, buffer, p->len, DATA_TYPE_8);
 80012d0:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <echo_recv+0x1d4>)
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	895b      	ldrh	r3, [r3, #10]
 80012da:	461a      	mov	r2, r3
 80012dc:	2300      	movs	r3, #0
 80012de:	f7ff f9cd 	bl	800067c <MY_FLASH_WriteN>
    count = count + p->len;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	895b      	ldrh	r3, [r3, #10]
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <echo_recv+0x1d4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a35      	ldr	r2, [pc, #212]	; (80013c4 <echo_recv+0x1d4>)
 80012f0:	6013      	str	r3, [r2, #0]

    if(count<100){
 80012f2:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <echo_recv+0x1d4>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b63      	cmp	r3, #99	; 0x63
 80012f8:	d80f      	bhi.n	800131a <echo_recv+0x12a>
    		char str[3];
    		sprintf(str, "%d;", count);
 80012fa:	4b32      	ldr	r3, [pc, #200]	; (80013c4 <echo_recv+0x1d4>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001302:	4931      	ldr	r1, [pc, #196]	; (80013c8 <echo_recv+0x1d8>)
 8001304:	4618      	mov	r0, r3
 8001306:	f013 fff3 	bl	80152f0 <siprintf>
    		tcp_write(tpcb, str, 3, 1);
 800130a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800130e:	2301      	movs	r3, #1
 8001310:	2203      	movs	r2, #3
 8001312:	68b8      	ldr	r0, [r7, #8]
 8001314:	f00f faca 	bl	80108ac <tcp_write>
 8001318:	e04e      	b.n	80013b8 <echo_recv+0x1c8>
    	}
    else if(count<1000){
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <echo_recv+0x1d4>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001322:	d20f      	bcs.n	8001344 <echo_recv+0x154>
    		char str[4];
    		sprintf(str, "%d;", count);
 8001324:	4b27      	ldr	r3, [pc, #156]	; (80013c4 <echo_recv+0x1d4>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132c:	4926      	ldr	r1, [pc, #152]	; (80013c8 <echo_recv+0x1d8>)
 800132e:	4618      	mov	r0, r3
 8001330:	f013 ffde 	bl	80152f0 <siprintf>
    		tcp_write(tpcb, str, 4, 1);
 8001334:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001338:	2301      	movs	r3, #1
 800133a:	2204      	movs	r2, #4
 800133c:	68b8      	ldr	r0, [r7, #8]
 800133e:	f00f fab5 	bl	80108ac <tcp_write>
 8001342:	e039      	b.n	80013b8 <echo_recv+0x1c8>
    	}
    else if(count<10000){
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <echo_recv+0x1d4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f242 720f 	movw	r2, #9999	; 0x270f
 800134c:	4293      	cmp	r3, r2
 800134e:	d80f      	bhi.n	8001370 <echo_recv+0x180>
        	char str[5];
        	sprintf(str, "%d;", count);
 8001350:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <echo_recv+0x1d4>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	f107 0320 	add.w	r3, r7, #32
 8001358:	491b      	ldr	r1, [pc, #108]	; (80013c8 <echo_recv+0x1d8>)
 800135a:	4618      	mov	r0, r3
 800135c:	f013 ffc8 	bl	80152f0 <siprintf>
        	tcp_write(tpcb, str, 5, 1);
 8001360:	f107 0120 	add.w	r1, r7, #32
 8001364:	2301      	movs	r3, #1
 8001366:	2205      	movs	r2, #5
 8001368:	68b8      	ldr	r0, [r7, #8]
 800136a:	f00f fa9f 	bl	80108ac <tcp_write>
 800136e:	e023      	b.n	80013b8 <echo_recv+0x1c8>
        }
    else if(count<100000){
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <echo_recv+0x1d4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a15      	ldr	r2, [pc, #84]	; (80013cc <echo_recv+0x1dc>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d80f      	bhi.n	800139a <echo_recv+0x1aa>
           	char str[6];
           	sprintf(str, "%d;", count);
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <echo_recv+0x1d4>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	f107 0318 	add.w	r3, r7, #24
 8001382:	4911      	ldr	r1, [pc, #68]	; (80013c8 <echo_recv+0x1d8>)
 8001384:	4618      	mov	r0, r3
 8001386:	f013 ffb3 	bl	80152f0 <siprintf>
           	tcp_write(tpcb, str, 6, 1);
 800138a:	f107 0118 	add.w	r1, r7, #24
 800138e:	2301      	movs	r3, #1
 8001390:	2206      	movs	r2, #6
 8001392:	68b8      	ldr	r0, [r7, #8]
 8001394:	f00f fa8a 	bl	80108ac <tcp_write>
 8001398:	e00e      	b.n	80013b8 <echo_recv+0x1c8>
        }
    else {
       		char str[7];
       		sprintf(str, "%d;", count);
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <echo_recv+0x1d4>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	4909      	ldr	r1, [pc, #36]	; (80013c8 <echo_recv+0x1d8>)
 80013a4:	4618      	mov	r0, r3
 80013a6:	f013 ffa3 	bl	80152f0 <siprintf>
       		tcp_write(tpcb, str, 7, 1);
 80013aa:	f107 0110 	add.w	r1, r7, #16
 80013ae:	2301      	movs	r3, #1
 80013b0:	2207      	movs	r2, #7
 80013b2:	68b8      	ldr	r0, [r7, #8]
 80013b4:	f00f fa7a 	bl	80108ac <tcp_write>
    	}

    return ERR_OK;
 80013b8:	2300      	movs	r3, #0
 80013ba:	46ad      	mov	sp, r5
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3740      	adds	r7, #64	; 0x40
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bdb0      	pop	{r4, r5, r7, pc}
 80013c4:	20000300 	.word	0x20000300
 80013c8:	08016458 	.word	0x08016458
 80013cc:	0001869f 	.word	0x0001869f

080013d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001408 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013d6:	e003      	b.n	80013e0 <LoopCopyDataInit>

080013d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80013da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013de:	3104      	adds	r1, #4

080013e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013e0:	480b      	ldr	r0, [pc, #44]	; (8001410 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013e8:	d3f6      	bcc.n	80013d8 <CopyDataInit>
  ldr  r2, =_sbss
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013ec:	e002      	b.n	80013f4 <LoopFillZerobss>

080013ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013f0:	f842 3b04 	str.w	r3, [r2], #4

080013f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013f4:	4b09      	ldr	r3, [pc, #36]	; (800141c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013f8:	d3f9      	bcc.n	80013ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013fa:	f7ff fe73 	bl	80010e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fe:	f013 fecb 	bl	8015198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001402:	f7ff f9d3 	bl	80007ac <main>
  bx  lr    
 8001406:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001408:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800140c:	08029ed4 	.word	0x08029ed4
  ldr  r0, =_sdata
 8001410:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001414:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8001418:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 800141c:	2000b404 	.word	0x2000b404

08001420 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <ADC_IRQHandler>

08001422 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001426:	2003      	movs	r0, #3
 8001428:	f000 f8f7 	bl	800161a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff fd1d 	bl	8000e6c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001432:	f7ff fc15 	bl	8000c60 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_IncTick+0x20>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x24>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4413      	add	r3, r2
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <HAL_IncTick+0x24>)
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	20000008 	.word	0x20000008
 8001460:	20004b6c 	.word	0x20004b6c

08001464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return uwTick;
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <HAL_GetTick+0x14>)
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20004b6c 	.word	0x20004b6c

0800147c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001484:	f7ff ffee 	bl	8001464 <HAL_GetTick>
 8001488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001494:	d005      	beq.n	80014a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_Delay+0x40>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a2:	bf00      	nop
 80014a4:	f7ff ffde 	bl	8001464 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d8f7      	bhi.n	80014a4 <HAL_Delay+0x28>
  {
  }
}
 80014b4:	bf00      	nop
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000008 	.word	0x20000008

080014c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d0:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <__NVIC_SetPriorityGrouping+0x40>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014dc:	4013      	ands	r3, r2
 80014de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <__NVIC_SetPriorityGrouping+0x44>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <__NVIC_SetPriorityGrouping+0x40>)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60d3      	str	r3, [r2, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	e000ed00 	.word	0xe000ed00
 8001504:	05fa0000 	.word	0x05fa0000

08001508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800150c:	4b04      	ldr	r3, [pc, #16]	; (8001520 <__NVIC_GetPriorityGrouping+0x18>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	f003 0307 	and.w	r3, r3, #7
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db0b      	blt.n	800154e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001536:	79fb      	ldrb	r3, [r7, #7]
 8001538:	f003 021f 	and.w	r2, r3, #31
 800153c:	4907      	ldr	r1, [pc, #28]	; (800155c <__NVIC_EnableIRQ+0x38>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	095b      	lsrs	r3, r3, #5
 8001544:	2001      	movs	r0, #1
 8001546:	fa00 f202 	lsl.w	r2, r0, r2
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000e100 	.word	0xe000e100

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db0a      	blt.n	800158a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	; (80015ac <__NVIC_SetPriority+0x4c>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	440b      	add	r3, r1
 8001584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001588:	e00a      	b.n	80015a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4908      	ldr	r1, [pc, #32]	; (80015b0 <__NVIC_SetPriority+0x50>)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3b04      	subs	r3, #4
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	440b      	add	r3, r1
 800159e:	761a      	strb	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000e100 	.word	0xe000e100
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf28      	it	cs
 80015d2:	2304      	movcs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d902      	bls.n	80015e4 <NVIC_EncodePriority+0x30>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b03      	subs	r3, #3
 80015e2:	e000      	b.n	80015e6 <NVIC_EncodePriority+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	401a      	ands	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	4313      	orrs	r3, r2
         );
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161a:	b580      	push	{r7, lr}
 800161c:	b082      	sub	sp, #8
 800161e:	af00      	add	r7, sp, #0
 8001620:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff ff4c 	bl	80014c0 <__NVIC_SetPriorityGrouping>
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
 800163c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800163e:	2300      	movs	r3, #0
 8001640:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001642:	f7ff ff61 	bl	8001508 <__NVIC_GetPriorityGrouping>
 8001646:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	68b9      	ldr	r1, [r7, #8]
 800164c:	6978      	ldr	r0, [r7, #20]
 800164e:	f7ff ffb1 	bl	80015b4 <NVIC_EncodePriority>
 8001652:	4602      	mov	r2, r0
 8001654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff ff80 	bl	8001560 <__NVIC_SetPriority>
}
 8001660:	bf00      	nop
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff54 	bl	8001524 <__NVIC_EnableIRQ>
}
 800167c:	bf00      	nop
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001694:	4ba9      	ldr	r3, [pc, #676]	; (800193c <HAL_ETH_Init+0x2b8>)
 8001696:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800169c:	2300      	movs	r3, #0
 800169e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e183      	b.n	80019b2 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d106      	bne.n	80016c4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f004 fc96 	bl	8005ff0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016c4:	4b9e      	ldr	r3, [pc, #632]	; (8001940 <HAL_ETH_Init+0x2bc>)
 80016c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c8:	4a9d      	ldr	r2, [pc, #628]	; (8001940 <HAL_ETH_Init+0x2bc>)
 80016ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ce:	6453      	str	r3, [r2, #68]	; 0x44
 80016d0:	4b9b      	ldr	r3, [pc, #620]	; (8001940 <HAL_ETH_Init+0x2bc>)
 80016d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80016dc:	4b99      	ldr	r3, [pc, #612]	; (8001944 <HAL_ETH_Init+0x2c0>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4a98      	ldr	r2, [pc, #608]	; (8001944 <HAL_ETH_Init+0x2c0>)
 80016e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016e6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80016e8:	4b96      	ldr	r3, [pc, #600]	; (8001944 <HAL_ETH_Init+0x2c0>)
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4994      	ldr	r1, [pc, #592]	; (8001944 <HAL_ETH_Init+0x2c0>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f042 0201 	orr.w	r2, r2, #1
 8001708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800170c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800170e:	f7ff fea9 	bl	8001464 <HAL_GetTick>
 8001712:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001714:	e011      	b.n	800173a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001716:	f7ff fea5 	bl	8001464 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001724:	d909      	bls.n	800173a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2203      	movs	r2, #3
 800172a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e13b      	b.n	80019b2 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1e4      	bne.n	8001716 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	f023 031c 	bic.w	r3, r3, #28
 800175a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800175c:	f002 fb16 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8001760:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4a78      	ldr	r2, [pc, #480]	; (8001948 <HAL_ETH_Init+0x2c4>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d908      	bls.n	800177c <HAL_ETH_Init+0xf8>
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4a77      	ldr	r2, [pc, #476]	; (800194c <HAL_ETH_Init+0x2c8>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d804      	bhi.n	800177c <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f043 0308 	orr.w	r3, r3, #8
 8001778:	61fb      	str	r3, [r7, #28]
 800177a:	e027      	b.n	80017cc <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	4a73      	ldr	r2, [pc, #460]	; (800194c <HAL_ETH_Init+0x2c8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d908      	bls.n	8001796 <HAL_ETH_Init+0x112>
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	4a72      	ldr	r2, [pc, #456]	; (8001950 <HAL_ETH_Init+0x2cc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d804      	bhi.n	8001796 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	f043 030c 	orr.w	r3, r3, #12
 8001792:	61fb      	str	r3, [r7, #28]
 8001794:	e01a      	b.n	80017cc <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	4a6d      	ldr	r2, [pc, #436]	; (8001950 <HAL_ETH_Init+0x2cc>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d903      	bls.n	80017a6 <HAL_ETH_Init+0x122>
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	4a6c      	ldr	r2, [pc, #432]	; (8001954 <HAL_ETH_Init+0x2d0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d911      	bls.n	80017ca <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	4a6a      	ldr	r2, [pc, #424]	; (8001954 <HAL_ETH_Init+0x2d0>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d908      	bls.n	80017c0 <HAL_ETH_Init+0x13c>
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	4a69      	ldr	r2, [pc, #420]	; (8001958 <HAL_ETH_Init+0x2d4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d804      	bhi.n	80017c0 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	e005      	b.n	80017cc <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f043 0310 	orr.w	r3, r3, #16
 80017c6:	61fb      	str	r3, [r7, #28]
 80017c8:	e000      	b.n	80017cc <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80017ca:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80017d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017d8:	2100      	movs	r1, #0
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 fc19 	bl	8002012 <HAL_ETH_WritePHYRegister>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00b      	beq.n	80017fe <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80017ea:	6939      	ldr	r1, [r7, #16]
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 fdcf 	bl	8002390 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e0d9      	b.n	80019b2 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80017fe:	20ff      	movs	r0, #255	; 0xff
 8001800:	f7ff fe3c 	bl	800147c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a7 	beq.w	800195c <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800180e:	f7ff fe29 	bl	8001464 <HAL_GetTick>
 8001812:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	461a      	mov	r2, r3
 800181a:	2101      	movs	r1, #1
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 fb90 	bl	8001f42 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001822:	f7ff fe1f 	bl	8001464 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001830:	4293      	cmp	r3, r2
 8001832:	d90f      	bls.n	8001854 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001838:	6939      	ldr	r1, [r7, #16]
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f000 fda8 	bl	8002390 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e0ae      	b.n	80019b2 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0da      	beq.n	8001814 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800185e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001862:	2100      	movs	r1, #0
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 fbd4 	bl	8002012 <HAL_ETH_WritePHYRegister>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d00b      	beq.n	8001888 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001874:	6939      	ldr	r1, [r7, #16]
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fd8a 	bl	8002390 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001884:	2301      	movs	r3, #1
 8001886:	e094      	b.n	80019b2 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001888:	f7ff fdec 	bl	8001464 <HAL_GetTick>
 800188c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800188e:	f107 030c 	add.w	r3, r7, #12
 8001892:	461a      	mov	r2, r3
 8001894:	2101      	movs	r1, #1
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 fb53 	bl	8001f42 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800189c:	f7ff fde2 	bl	8001464 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d90f      	bls.n	80018ce <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80018b2:	6939      	ldr	r1, [r7, #16]
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f000 fd6b 	bl	8002390 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e071      	b.n	80019b2 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f003 0320 	and.w	r3, r3, #32
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0da      	beq.n	800188e <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	461a      	mov	r2, r3
 80018de:	211f      	movs	r1, #31
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f000 fb2e 	bl	8001f42 <HAL_ETH_ReadPHYRegister>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00b      	beq.n	8001904 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80018f0:	6939      	ldr	r1, [r7, #16]
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fd4c 	bl	8002390 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001900:	2301      	movs	r3, #1
 8001902:	e056      	b.n	80019b2 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	2b00      	cmp	r3, #0
 800190c:	d004      	beq.n	8001918 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	e002      	b.n	800191e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	e037      	b.n	80019a0 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	e032      	b.n	80019a0 <HAL_ETH_Init+0x31c>
 800193a:	bf00      	nop
 800193c:	03938700 	.word	0x03938700
 8001940:	40023800 	.word	0x40023800
 8001944:	40013800 	.word	0x40013800
 8001948:	01312cff 	.word	0x01312cff
 800194c:	02160ebf 	.word	0x02160ebf
 8001950:	039386ff 	.word	0x039386ff
 8001954:	05f5e0ff 	.word	0x05f5e0ff
 8001958:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	08db      	lsrs	r3, r3, #3
 8001962:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	085b      	lsrs	r3, r3, #1
 800196a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800196c:	4313      	orrs	r3, r2
 800196e:	b29b      	uxth	r3, r3
 8001970:	461a      	mov	r2, r3
 8001972:	2100      	movs	r1, #0
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 fb4c 	bl	8002012 <HAL_ETH_WritePHYRegister>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00b      	beq.n	8001998 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001984:	6939      	ldr	r1, [r7, #16]
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fd02 	bl	8002390 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e00c      	b.n	80019b2 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001998:	f640 70ff 	movw	r0, #4095	; 0xfff
 800199c:	f7ff fd6e 	bl	800147c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80019a0:	6939      	ldr	r1, [r7, #16]
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fcf4 	bl	8002390 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3720      	adds	r7, #32
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop

080019bc <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
 80019c8:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <HAL_ETH_DMATxDescListInit+0x20>
 80019d8:	2302      	movs	r3, #2
 80019da:	e052      	b.n	8001a82 <HAL_ETH_DMATxDescListInit+0xc6>
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	e030      	b.n	8001a5a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	015b      	lsls	r3, r3, #5
 80019fc:	68ba      	ldr	r2, [r7, #8]
 80019fe:	4413      	add	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001a08:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001a10:	fb02 f303 	mul.w	r3, r2, r3
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	4413      	add	r3, r2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d105      	bne.n	8001a32 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d208      	bcs.n	8001a4e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	015b      	lsls	r3, r3, #5
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	4413      	add	r3, r2
 8001a46:	461a      	mov	r2, r3
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	60da      	str	r2, [r3, #12]
 8001a4c:	e002      	b.n	8001a54 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3301      	adds	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d3ca      	bcc.n	80019f8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6819      	ldr	r1, [r3, #0]
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f241 0310 	movw	r3, #4112	; 0x1010
 8001a6c:	440b      	add	r3, r1
 8001a6e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	371c      	adds	r7, #28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b087      	sub	sp, #28
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_ETH_DMARxDescListInit+0x20>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e056      	b.n	8001b5c <HAL_ETH_DMARxDescListInit+0xce>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	e034      	b.n	8001b34 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	015b      	lsls	r3, r3, #5
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ada:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001ae2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001aea:	fb02 f303 	mul.w	r3, r2, r3
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	461a      	mov	r2, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d105      	bne.n	8001b0c <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d208      	bcs.n	8001b28 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	015b      	lsls	r3, r3, #5
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	4413      	add	r3, r2
 8001b20:	461a      	mov	r2, r3
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	e002      	b.n	8001b2e <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	3301      	adds	r3, #1
 8001b32:	617b      	str	r3, [r7, #20]
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d3c6      	bcc.n	8001aca <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6819      	ldr	r1, [r3, #0]
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	f241 030c 	movw	r3, #4108	; 0x100c
 8001b46:	440b      	add	r3, r1
 8001b48:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b087      	sub	sp, #28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d101      	bne.n	8001b8c <HAL_ETH_TransmitFrame+0x24>
 8001b88:	2302      	movs	r3, #2
 8001b8a:	e0cd      	b.n	8001d28 <HAL_ETH_TransmitFrame+0x1c0>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d109      	bne.n	8001bb6 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0b8      	b.n	8001d28 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	da09      	bge.n	8001bd4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2212      	movs	r2, #18
 8001bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e0a9      	b.n	8001d28 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d915      	bls.n	8001c0a <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	4a54      	ldr	r2, [pc, #336]	; (8001d34 <HAL_ETH_TransmitFrame+0x1cc>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	0a9b      	lsrs	r3, r3, #10
 8001be8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	4b51      	ldr	r3, [pc, #324]	; (8001d34 <HAL_ETH_TransmitFrame+0x1cc>)
 8001bee:	fba3 1302 	umull	r1, r3, r3, r2
 8001bf2:	0a9b      	lsrs	r3, r3, #10
 8001bf4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001bf8:	fb01 f303 	mul.w	r3, r1, r3
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d005      	beq.n	8001c0e <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	e001      	b.n	8001c0e <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d11c      	bne.n	8001c4e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001c22:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001c2e:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001c3e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	461a      	mov	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c4c:	e04b      	b.n	8001ce6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	e044      	b.n	8001cde <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c62:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d107      	bne.n	8001c7a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c78:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001c82:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d116      	bne.n	8001cbc <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001c9c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	4a25      	ldr	r2, [pc, #148]	; (8001d38 <HAL_ETH_TransmitFrame+0x1d0>)
 8001ca2:	fb02 f203 	mul.w	r2, r2, r3
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	4413      	add	r3, r2
 8001caa:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001cae:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001cba:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cca:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	613b      	str	r3, [r7, #16]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d3b6      	bcc.n	8001c54 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	f241 0314 	movw	r3, #4116	; 0x1014
 8001cee:	4413      	add	r3, r2
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00d      	beq.n	8001d16 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	f241 0314 	movw	r3, #4116	; 0x1014
 8001d02:	4413      	add	r3, r2
 8001d04:	2204      	movs	r2, #4
 8001d06:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	f241 0304 	movw	r3, #4100	; 0x1004
 8001d10:	4413      	add	r3, r2
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	371c      	adds	r7, #28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	ac02b00b 	.word	0xac02b00b
 8001d38:	fffffa0c 	.word	0xfffffa0c

08001d3c <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d101      	bne.n	8001d56 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e074      	b.n	8001e40 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2202      	movs	r2, #2
 8001d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001d66:	e05a      	b.n	8001e1e <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d7c:	d10d      	bne.n	8001d9a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	461a      	mov	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
 8001d98:	e041      	b.n	8001e1e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10b      	bne.n	8001dc0 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	461a      	mov	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	629a      	str	r2, [r3, #40]	; 0x28
 8001dbe:	e02e      	b.n	8001e1e <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d103      	bne.n	8001de2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0c1b      	lsrs	r3, r3, #16
 8001dea:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001dee:	1f1a      	subs	r2, r3, #4
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	689a      	ldr	r2, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	461a      	mov	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e010      	b.n	8001e40 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	db02      	blt.n	8001e2e <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d99c      	bls.n	8001d68 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	f241 0314 	movw	r3, #4116	; 0x1014
 8001e5c:	4413      	add	r3, r2
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e64:	2b40      	cmp	r3, #64	; 0x40
 8001e66:	d112      	bne.n	8001e8e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f004 f981 	bl	8006170 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	f241 0314 	movw	r3, #4116	; 0x1014
 8001e76:	4413      	add	r3, r2
 8001e78:	2240      	movs	r2, #64	; 0x40
 8001e7a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e8c:	e01b      	b.n	8001ec6 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	f241 0314 	movw	r3, #4116	; 0x1014
 8001e96:	4413      	add	r3, r2
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d111      	bne.n	8001ec6 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f839 	bl	8001f1a <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	f241 0314 	movw	r3, #4116	; 0x1014
 8001eb0:	4413      	add	r3, r2
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	f241 0314 	movw	r3, #4116	; 0x1014
 8001ece:	4413      	add	r3, r2
 8001ed0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ed4:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	f241 0314 	movw	r3, #4116	; 0x1014
 8001ede:	4413      	add	r3, r2
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eea:	d112      	bne.n	8001f12 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f81e 	bl	8001f2e <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	f241 0314 	movw	r3, #4116	; 0x1014
 8001efa:	4413      	add	r3, r2
 8001efc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f00:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b82      	cmp	r3, #130	; 0x82
 8001f62:	d101      	bne.n	8001f68 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001f64:	2302      	movs	r3, #2
 8001f66:	e050      	b.n	800200a <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2282      	movs	r2, #130	; 0x82
 8001f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f003 031c 	and.w	r3, r3, #28
 8001f7e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	8a1b      	ldrh	r3, [r3, #16]
 8001f84:	02db      	lsls	r3, r3, #11
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001f8e:	897b      	ldrh	r3, [r7, #10]
 8001f90:	019b      	lsls	r3, r3, #6
 8001f92:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	f023 0302 	bic.w	r3, r3, #2
 8001fa2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001fb4:	f7ff fa56 	bl	8001464 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fba:	e015      	b.n	8001fe8 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001fbc:	f7ff fa52 	bl	8001464 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fca:	d309      	bcc.n	8001fe0 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e014      	b.n	800200a <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1e4      	bne.n	8001fbc <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	460b      	mov	r3, r1
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b42      	cmp	r3, #66	; 0x42
 8002032:	d101      	bne.n	8002038 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002034:	2302      	movs	r3, #2
 8002036:	e04e      	b.n	80020d6 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2242      	movs	r2, #66	; 0x42
 800203c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f003 031c 	and.w	r3, r3, #28
 800204e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8a1b      	ldrh	r3, [r3, #16]
 8002054:	02db      	lsls	r3, r3, #11
 8002056:	b29b      	uxth	r3, r3
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	4313      	orrs	r3, r2
 800205c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800205e:	897b      	ldrh	r3, [r7, #10]
 8002060:	019b      	lsls	r3, r3, #6
 8002062:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	4313      	orrs	r3, r2
 800206a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f043 0302 	orr.w	r3, r3, #2
 8002072:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800208e:	f7ff f9e9 	bl	8001464 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002094:	e015      	b.n	80020c2 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002096:	f7ff f9e5 	bl	8001464 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a4:	d309      	bcc.n	80020ba <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e00d      	b.n	80020d6 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1e4      	bne.n	8002096 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80020de:	b580      	push	{r7, lr}
 80020e0:	b082      	sub	sp, #8
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d101      	bne.n	80020f4 <HAL_ETH_Start+0x16>
 80020f0:	2302      	movs	r3, #2
 80020f2:	e01f      	b.n	8002134 <HAL_ETH_Start+0x56>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 fb45 	bl	8002794 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 fb7c 	bl	8002808 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fc13 	bl	800293c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 fbb0 	bl	800287c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 fbdd 	bl	80028dc <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800214a:	2b01      	cmp	r3, #1
 800214c:	d101      	bne.n	8002152 <HAL_ETH_Stop+0x16>
 800214e:	2302      	movs	r3, #2
 8002150:	e01f      	b.n	8002192 <HAL_ETH_Stop+0x56>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2201      	movs	r2, #1
 8002156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2202      	movs	r2, #2
 800215e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fba2 	bl	80028ac <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 fbcf 	bl	800290c <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fb67 	bl	8002842 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 fbe1 	bl	800293c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 fb27 	bl	80027ce <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_ETH_ConfigMAC+0x1c>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e0e4      	b.n	8002382 <HAL_ETH_ConfigMAC+0x1e6>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	f000 80b1 	beq.w	8002332 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4b6c      	ldr	r3, [pc, #432]	; (800238c <HAL_ETH_ConfigMAC+0x1f0>)
 80021dc:	4013      	ands	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 80021e8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80021ee:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80021f4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80021fa:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002200:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8002206:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 800220c:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002212:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8002218:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800221e:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002224:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800222a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002242:	2001      	movs	r0, #1
 8002244:	f7ff f91a 	bl	800147c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002258:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800225e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002264:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800226a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002270:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002276:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002282:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002284:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800228e:	2001      	movs	r0, #1
 8002290:	f7ff f8f4 	bl	800147c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022a4:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80022ae:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	f64f 7341 	movw	r3, #65345	; 0xff41
 80022be:	4013      	ands	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c6:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80022cc:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80022d2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80022d8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80022de:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80022e4:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80022fc:	2001      	movs	r0, #1
 80022fe:	f7ff f8bd 	bl	800147c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002322:	2001      	movs	r0, #1
 8002324:	f7ff f8aa 	bl	800147c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	61da      	str	r2, [r3, #28]
 8002330:	e01e      	b.n	8002370 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002340:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	4313      	orrs	r3, r2
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002362:	2001      	movs	r0, #1
 8002364:	f7ff f88a 	bl	800147c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	ff20810f 	.word	0xff20810f

08002390 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b0b0      	sub	sp, #192	; 0xc0
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d007      	beq.n	80023b6 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023ac:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023b4:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80023ba:	2300      	movs	r3, #0
 80023bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80023be:	2300      	movs	r3, #0
 80023c0:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80023c6:	2300      	movs	r3, #0
 80023c8:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d103      	bne.n	80023de <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80023d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023da:	663b      	str	r3, [r7, #96]	; 0x60
 80023dc:	e001      	b.n	80023e2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80023e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023e6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80023e8:	2300      	movs	r3, #0
 80023ea:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023ec:	2300      	movs	r3, #0
 80023ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80023f0:	2300      	movs	r3, #0
 80023f2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80023fc:	2340      	movs	r3, #64	; 0x40
 80023fe:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002412:	2300      	movs	r3, #0
 8002414:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002424:	2300      	movs	r3, #0
 8002426:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800242a:	2300      	movs	r3, #0
 800242c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002436:	2300      	movs	r3, #0
 8002438:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002442:	2300      	movs	r3, #0
 8002444:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002448:	2300      	movs	r3, #0
 800244a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800244e:	2300      	movs	r3, #0
 8002450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002454:	2300      	movs	r3, #0
 8002456:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002464:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002468:	4bab      	ldr	r3, [pc, #684]	; (8002718 <ETH_MACDMAConfig+0x388>)
 800246a:	4013      	ands	r3, r2
 800246c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002470:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002474:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002478:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800247a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800247c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002482:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002484:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002486:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800248a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002490:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002494:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002498:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800249a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800249c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800249e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80024a0:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80024a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80024a4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80024a6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024b8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024c4:	2001      	movs	r0, #1
 80024c6:	f7fe ffd9 	bl	800147c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024d2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80024d4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80024d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80024d8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80024da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80024dc:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80024de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80024e2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80024e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80024e8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80024ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80024ee:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80024f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80024f4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80024f8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002500:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002502:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800250e:	2001      	movs	r0, #1
 8002510:	f7fe ffb4 	bl	800147c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800251c:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002526:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002530:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800253c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002540:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002544:	4013      	ands	r3, r2
 8002546:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800254a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800254e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002550:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002554:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002556:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800255a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800255c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002560:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002566:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002568:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800256c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800256e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002580:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800258c:	2001      	movs	r0, #1
 800258e:	f7fe ff75 	bl	800147c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800259a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800259c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80025a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b6:	2001      	movs	r0, #1
 80025b8:	f7fe ff60 	bl	800147c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025c4:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80025ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ce:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80025d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80025d8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80025da:	2300      	movs	r3, #0
 80025dc:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80025e6:	2300      	movs	r3, #0
 80025e8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80025ea:	2304      	movs	r3, #4
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80025ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80025f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025f8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025fe:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002604:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800260a:	2300      	movs	r3, #0
 800260c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800260e:	2300      	movs	r3, #0
 8002610:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	f241 0318 	movw	r3, #4120	; 0x1018
 800261a:	4413      	add	r3, r2
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002622:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002626:	4b3d      	ldr	r3, [pc, #244]	; (800271c <ETH_MACDMAConfig+0x38c>)
 8002628:	4013      	ands	r3, r2
 800262a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800262e:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002630:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002632:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002634:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002636:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002638:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800263a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800263c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800263e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002640:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002642:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002644:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002646:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800264a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800264e:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002650:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002654:	4313      	orrs	r3, r2
 8002656:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002662:	4413      	add	r3, r2
 8002664:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002668:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002672:	4413      	add	r3, r2
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800267a:	2001      	movs	r0, #1
 800267c:	f7fe fefe 	bl	800147c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	f241 0318 	movw	r3, #4120	; 0x1018
 8002688:	4413      	add	r3, r2
 800268a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800268e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002694:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002698:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800269a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800269c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800269e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80026a0:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80026a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026a4:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80026a6:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80026a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80026aa:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80026b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b8:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c8:	2001      	movs	r0, #1
 80026ca:	f7fe fed7 	bl	800147c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026da:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d10d      	bne.n	8002700 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	f241 031c 	movw	r3, #4124	; 0x101c
 80026ec:	4413      	add	r3, r2
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6811      	ldr	r1, [r2, #0]
 80026f4:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <ETH_MACDMAConfig+0x390>)
 80026f6:	431a      	orrs	r2, r3
 80026f8:	f241 031c 	movw	r3, #4124	; 0x101c
 80026fc:	440b      	add	r3, r1
 80026fe:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	461a      	mov	r2, r3
 8002706:	2100      	movs	r1, #0
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f80b 	bl	8002724 <ETH_MACAddressConfig>
}
 800270e:	bf00      	nop
 8002710:	37c0      	adds	r7, #192	; 0xc0
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	ff20810f 	.word	0xff20810f
 800271c:	f8de3f23 	.word	0xf8de3f23
 8002720:	00010040 	.word	0x00010040

08002724 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	60b9      	str	r1, [r7, #8]
 800272e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3305      	adds	r3, #5
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	3204      	adds	r2, #4
 800273c:	7812      	ldrb	r2, [r2, #0]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002742:	68ba      	ldr	r2, [r7, #8]
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <ETH_MACAddressConfig+0x68>)
 8002746:	4413      	add	r3, r2
 8002748:	461a      	mov	r2, r3
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3303      	adds	r3, #3
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	061a      	lsls	r2, r3, #24
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3302      	adds	r3, #2
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	041b      	lsls	r3, r3, #16
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3301      	adds	r3, #1
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	4313      	orrs	r3, r2
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	7812      	ldrb	r2, [r2, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	4b06      	ldr	r3, [pc, #24]	; (8002790 <ETH_MACAddressConfig+0x6c>)
 8002776:	4413      	add	r3, r2
 8002778:	461a      	mov	r2, r3
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	6013      	str	r3, [r2, #0]
}
 800277e:	bf00      	nop
 8002780:	371c      	adds	r7, #28
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40028040 	.word	0x40028040
 8002790:	40028044 	.word	0x40028044

08002794 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0208 	orr.w	r2, r2, #8
 80027ae:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027b8:	2001      	movs	r0, #1
 80027ba:	f7fe fe5f 	bl	800147c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	601a      	str	r2, [r3, #0]
}
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0208 	bic.w	r2, r2, #8
 80027e8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027f2:	2001      	movs	r0, #1
 80027f4:	f7fe fe42 	bl	800147c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0204 	orr.w	r2, r2, #4
 8002822:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800282c:	2001      	movs	r0, #1
 800282e:	f7fe fe25 	bl	800147c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	601a      	str	r2, [r3, #0]
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002842:	b580      	push	{r7, lr}
 8002844:	b084      	sub	sp, #16
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0204 	bic.w	r2, r2, #4
 800285c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002866:	2001      	movs	r0, #1
 8002868:	f7fe fe08 	bl	800147c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	601a      	str	r2, [r3, #0]
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	f241 0318 	movw	r3, #4120	; 0x1018
 800288c:	4413      	add	r3, r2
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6811      	ldr	r1, [r2, #0]
 8002894:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002898:	f241 0318 	movw	r3, #4120	; 0x1018
 800289c:	440b      	add	r3, r1
 800289e:	601a      	str	r2, [r3, #0]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	f241 0318 	movw	r3, #4120	; 0x1018
 80028bc:	4413      	add	r3, r2
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6811      	ldr	r1, [r2, #0]
 80028c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80028c8:	f241 0318 	movw	r3, #4120	; 0x1018
 80028cc:	440b      	add	r3, r1
 80028ce:	601a      	str	r2, [r3, #0]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	f241 0318 	movw	r3, #4120	; 0x1018
 80028ec:	4413      	add	r3, r2
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6811      	ldr	r1, [r2, #0]
 80028f4:	f043 0202 	orr.w	r2, r3, #2
 80028f8:	f241 0318 	movw	r3, #4120	; 0x1018
 80028fc:	440b      	add	r3, r1
 80028fe:	601a      	str	r2, [r3, #0]
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	f241 0318 	movw	r3, #4120	; 0x1018
 800291c:	4413      	add	r3, r2
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6811      	ldr	r1, [r2, #0]
 8002924:	f023 0202 	bic.w	r2, r3, #2
 8002928:	f241 0318 	movw	r3, #4120	; 0x1018
 800292c:	440b      	add	r3, r1
 800292e:	601a      	str	r2, [r3, #0]
}
 8002930:	bf00      	nop
 8002932:	370c      	adds	r7, #12
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002950:	4413      	add	r3, r2
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6811      	ldr	r1, [r2, #0]
 8002958:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800295c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002960:	440b      	add	r3, r1
 8002962:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	f241 0318 	movw	r3, #4120	; 0x1018
 800296c:	4413      	add	r3, r2
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002972:	2001      	movs	r0, #1
 8002974:	f7fe fd82 	bl	800147c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6819      	ldr	r1, [r3, #0]
 800297c:	68fa      	ldr	r2, [r7, #12]
 800297e:	f241 0318 	movw	r3, #4120	; 0x1018
 8002982:	440b      	add	r3, r1
 8002984:	601a      	str	r2, [r3, #0]
}
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80029a2:	4b27      	ldr	r3, [pc, #156]	; (8002a40 <HAL_FLASH_Program+0xb0>)
 80029a4:	7d1b      	ldrb	r3, [r3, #20]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_FLASH_Program+0x1e>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e043      	b.n	8002a36 <HAL_FLASH_Program+0xa6>
 80029ae:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <HAL_FLASH_Program+0xb0>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029b8:	f000 f878 	bl	8002aac <FLASH_WaitForLastOperation>
 80029bc:	4603      	mov	r3, r0
 80029be:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d133      	bne.n	8002a2e <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d823      	bhi.n	8002a14 <HAL_FLASH_Program+0x84>
 80029cc:	a201      	add	r2, pc, #4	; (adr r2, 80029d4 <HAL_FLASH_Program+0x44>)
 80029ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d2:	bf00      	nop
 80029d4:	080029e5 	.word	0x080029e5
 80029d8:	080029f1 	.word	0x080029f1
 80029dc:	080029fd 	.word	0x080029fd
 80029e0:	08002a09 	.word	0x08002a09
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 80029e4:	783b      	ldrb	r3, [r7, #0]
 80029e6:	4619      	mov	r1, r3
 80029e8:	68b8      	ldr	r0, [r7, #8]
 80029ea:	f000 f919 	bl	8002c20 <FLASH_Program_Byte>
        break;
 80029ee:	e012      	b.n	8002a16 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80029f0:	883b      	ldrh	r3, [r7, #0]
 80029f2:	4619      	mov	r1, r3
 80029f4:	68b8      	ldr	r0, [r7, #8]
 80029f6:	f000 f8ed 	bl	8002bd4 <FLASH_Program_HalfWord>
        break;
 80029fa:	e00c      	b.n	8002a16 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	4619      	mov	r1, r3
 8002a00:	68b8      	ldr	r0, [r7, #8]
 8002a02:	f000 f8c3 	bl	8002b8c <FLASH_Program_Word>
        break;
 8002a06:	e006      	b.n	8002a16 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8002a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a0c:	68b8      	ldr	r0, [r7, #8]
 8002a0e:	f000 f88d 	bl	8002b2c <FLASH_Program_DoubleWord>
        break;
 8002a12:	e000      	b.n	8002a16 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8002a14:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a16:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a1a:	f000 f847 	bl	8002aac <FLASH_WaitForLastOperation>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <HAL_FLASH_Program+0xb4>)
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <HAL_FLASH_Program+0xb4>)
 8002a28:	f023 0301 	bic.w	r3, r3, #1
 8002a2c:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <HAL_FLASH_Program+0xb0>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	751a      	strb	r2, [r3, #20]

  return status;
 8002a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20004b70 	.word	0x20004b70
 8002a44:	40023c00 	.word	0x40023c00

08002a48 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a52:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_FLASH_Unlock+0x38>)
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	da0b      	bge.n	8002a72 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_FLASH_Unlock+0x38>)
 8002a5c:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <HAL_FLASH_Unlock+0x3c>)
 8002a5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002a60:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <HAL_FLASH_Unlock+0x38>)
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <HAL_FLASH_Unlock+0x40>)
 8002a64:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_FLASH_Unlock+0x38>)
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	da01      	bge.n	8002a72 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002a72:	79fb      	ldrb	r3, [r7, #7]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	40023c00 	.word	0x40023c00
 8002a84:	45670123 	.word	0x45670123
 8002a88:	cdef89ab 	.word	0xcdef89ab

08002a8c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_FLASH_Lock+0x1c>)
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <HAL_FLASH_Lock+0x1c>)
 8002a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a9a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	40023c00 	.word	0x40023c00

08002aac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ab8:	4b1a      	ldr	r3, [pc, #104]	; (8002b24 <FLASH_WaitForLastOperation+0x78>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002abe:	f7fe fcd1 	bl	8001464 <HAL_GetTick>
 8002ac2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002ac4:	e010      	b.n	8002ae8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002acc:	d00c      	beq.n	8002ae8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <FLASH_WaitForLastOperation+0x38>
 8002ad4:	f7fe fcc6 	bl	8001464 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d201      	bcs.n	8002ae8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e019      	b.n	8002b1c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <FLASH_WaitForLastOperation+0x7c>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d1e8      	bne.n	8002ac6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <FLASH_WaitForLastOperation+0x7c>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002b00:	f000 f8b2 	bl	8002c68 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e009      	b.n	8002b1c <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002b08:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <FLASH_WaitForLastOperation+0x7c>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <FLASH_WaitForLastOperation+0x7c>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
  
}  
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20004b70 	.word	0x20004b70
 8002b28:	40023c00 	.word	0x40023c00

08002b2c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002b2c:	b490      	push	{r4, r7}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <FLASH_Program_DoubleWord+0x5c>)
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	4a12      	ldr	r2, [pc, #72]	; (8002b88 <FLASH_Program_DoubleWord+0x5c>)
 8002b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002b44:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <FLASH_Program_DoubleWord+0x5c>)
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	4a0f      	ldr	r2, [pc, #60]	; (8002b88 <FLASH_Program_DoubleWord+0x5c>)
 8002b4a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002b4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002b50:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <FLASH_Program_DoubleWord+0x5c>)
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	4a0c      	ldr	r2, [pc, #48]	; (8002b88 <FLASH_Program_DoubleWord+0x5c>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002b62:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002b66:	f04f 0300 	mov.w	r3, #0
 8002b6a:	f04f 0400 	mov.w	r4, #0
 8002b6e:	0013      	movs	r3, r2
 8002b70:	2400      	movs	r4, #0
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	3204      	adds	r2, #4
 8002b76:	6013      	str	r3, [r2, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b78:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002b7c:	bf00      	nop
 8002b7e:	3710      	adds	r7, #16
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc90      	pop	{r4, r7}
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	40023c00 	.word	0x40023c00

08002b8c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <FLASH_Program_Word+0x44>)
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	4a0d      	ldr	r2, [pc, #52]	; (8002bd0 <FLASH_Program_Word+0x44>)
 8002b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ba0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002ba2:	4b0b      	ldr	r3, [pc, #44]	; (8002bd0 <FLASH_Program_Word+0x44>)
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <FLASH_Program_Word+0x44>)
 8002ba8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bac:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002bae:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <FLASH_Program_Word+0x44>)
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	4a07      	ldr	r2, [pc, #28]	; (8002bd0 <FLASH_Program_Word+0x44>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	40023c00 	.word	0x40023c00

08002bd4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002be0:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <FLASH_Program_HalfWord+0x48>)
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	4a0d      	ldr	r2, [pc, #52]	; (8002c1c <FLASH_Program_HalfWord+0x48>)
 8002be6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <FLASH_Program_HalfWord+0x48>)
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	4a0a      	ldr	r2, [pc, #40]	; (8002c1c <FLASH_Program_HalfWord+0x48>)
 8002bf2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002bf8:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <FLASH_Program_HalfWord+0x48>)
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	4a07      	ldr	r2, [pc, #28]	; (8002c1c <FLASH_Program_HalfWord+0x48>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	887a      	ldrh	r2, [r7, #2]
 8002c08:	801a      	strh	r2, [r3, #0]
 8002c0a:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40023c00 	.word	0x40023c00

08002c20 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002c2c:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <FLASH_Program_Byte+0x44>)
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	4a0c      	ldr	r2, [pc, #48]	; (8002c64 <FLASH_Program_Byte+0x44>)
 8002c32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002c38:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <FLASH_Program_Byte+0x44>)
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <FLASH_Program_Byte+0x44>)
 8002c3c:	691b      	ldr	r3, [r3, #16]
 8002c3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <FLASH_Program_Byte+0x44>)
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	4a07      	ldr	r2, [pc, #28]	; (8002c64 <FLASH_Program_Byte+0x44>)
 8002c46:	f043 0301 	orr.w	r3, r3, #1
 8002c4a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	f3bf 8f4f 	dsb	sy

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40023c00 	.word	0x40023c00

08002c68 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002c6c:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <FLASH_SetErrorCode+0x8c>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d005      	beq.n	8002c84 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002c78:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <FLASH_SetErrorCode+0x90>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	f043 0320 	orr.w	r3, r3, #32
 8002c80:	4a1d      	ldr	r2, [pc, #116]	; (8002cf8 <FLASH_SetErrorCode+0x90>)
 8002c82:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002c84:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <FLASH_SetErrorCode+0x8c>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0310 	and.w	r3, r3, #16
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002c90:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <FLASH_SetErrorCode+0x90>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	f043 0310 	orr.w	r3, r3, #16
 8002c98:	4a17      	ldr	r2, [pc, #92]	; (8002cf8 <FLASH_SetErrorCode+0x90>)
 8002c9a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002c9c:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <FLASH_SetErrorCode+0x8c>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <FLASH_SetErrorCode+0x90>)
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	f043 0308 	orr.w	r3, r3, #8
 8002cb0:	4a11      	ldr	r2, [pc, #68]	; (8002cf8 <FLASH_SetErrorCode+0x90>)
 8002cb2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <FLASH_SetErrorCode+0x8c>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <FLASH_SetErrorCode+0x90>)
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	f043 0304 	orr.w	r3, r3, #4
 8002cc8:	4a0b      	ldr	r2, [pc, #44]	; (8002cf8 <FLASH_SetErrorCode+0x90>)
 8002cca:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8002ccc:	4b09      	ldr	r3, [pc, #36]	; (8002cf4 <FLASH_SetErrorCode+0x8c>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8002cd8:	4b07      	ldr	r3, [pc, #28]	; (8002cf8 <FLASH_SetErrorCode+0x90>)
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	4a05      	ldr	r2, [pc, #20]	; (8002cf8 <FLASH_SetErrorCode+0x90>)
 8002ce2:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <FLASH_SetErrorCode+0x8c>)
 8002ce6:	22f2      	movs	r2, #242	; 0xf2
 8002ce8:	60da      	str	r2, [r3, #12]
}
 8002cea:	bf00      	nop
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	40023c00 	.word	0x40023c00
 8002cf8:	20004b70 	.word	0x20004b70

08002cfc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8002d12:	2300      	movs	r3, #0
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	e010      	b.n	8002d3a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d103      	bne.n	8002d26 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e009      	b.n	8002d3a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d103      	bne.n	8002d34 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	e002      	b.n	8002d3a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002d34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d38:	60fb      	str	r3, [r7, #12]
  }
  
  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if(Sector > FLASH_SECTOR_11) 
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b0b      	cmp	r3, #11
 8002d3e:	d902      	bls.n	8002d46 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3304      	adds	r3, #4
 8002d44:	607b      	str	r3, [r7, #4]
  }  

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8002d46:	4b14      	ldr	r3, [pc, #80]	; (8002d98 <FLASH_Erase_Sector+0x9c>)
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	4a13      	ldr	r2, [pc, #76]	; (8002d98 <FLASH_Erase_Sector+0x9c>)
 8002d4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d50:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002d52:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <FLASH_Erase_Sector+0x9c>)
 8002d54:	691a      	ldr	r2, [r3, #16]
 8002d56:	4910      	ldr	r1, [pc, #64]	; (8002d98 <FLASH_Erase_Sector+0x9c>)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	; (8002d98 <FLASH_Erase_Sector+0x9c>)
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <FLASH_Erase_Sector+0x9c>)
 8002d64:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002d6a:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <FLASH_Erase_Sector+0x9c>)
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4313      	orrs	r3, r2
 8002d74:	4a08      	ldr	r2, [pc, #32]	; (8002d98 <FLASH_Erase_Sector+0x9c>)
 8002d76:	f043 0302 	orr.w	r3, r3, #2
 8002d7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <FLASH_Erase_Sector+0x9c>)
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	4a05      	ldr	r2, [pc, #20]	; (8002d98 <FLASH_Erase_Sector+0x9c>)
 8002d82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d86:	6113      	str	r3, [r2, #16]
 8002d88:	f3bf 8f4f 	dsb	sy
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40023c00 	.word	0x40023c00

08002d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b089      	sub	sp, #36	; 0x24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	e175      	b.n	80030a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	f040 8164 	bne.w	80030a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d00b      	beq.n	8002dfa <HAL_GPIO_Init+0x5e>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d007      	beq.n	8002dfa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dee:	2b11      	cmp	r3, #17
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b12      	cmp	r3, #18
 8002df8:	d130      	bne.n	8002e5c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	2203      	movs	r2, #3
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69ba      	ldr	r2, [r7, #24]
 8002e28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e30:	2201      	movs	r2, #1
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 0201 	and.w	r2, r3, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	2203      	movs	r2, #3
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x100>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b12      	cmp	r3, #18
 8002e9a:	d123      	bne.n	8002ee4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	08da      	lsrs	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3208      	adds	r2, #8
 8002ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	08da      	lsrs	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3208      	adds	r2, #8
 8002ede:	69b9      	ldr	r1, [r7, #24]
 8002ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0203 	and.w	r2, r3, #3
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80be 	beq.w	80030a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f26:	4b65      	ldr	r3, [pc, #404]	; (80030bc <HAL_GPIO_Init+0x320>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	4a64      	ldr	r2, [pc, #400]	; (80030bc <HAL_GPIO_Init+0x320>)
 8002f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f30:	6453      	str	r3, [r2, #68]	; 0x44
 8002f32:	4b62      	ldr	r3, [pc, #392]	; (80030bc <HAL_GPIO_Init+0x320>)
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3a:	60fb      	str	r3, [r7, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f3e:	4a60      	ldr	r2, [pc, #384]	; (80030c0 <HAL_GPIO_Init+0x324>)
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	089b      	lsrs	r3, r3, #2
 8002f44:	3302      	adds	r3, #2
 8002f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	220f      	movs	r2, #15
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a57      	ldr	r2, [pc, #348]	; (80030c4 <HAL_GPIO_Init+0x328>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d037      	beq.n	8002fda <HAL_GPIO_Init+0x23e>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a56      	ldr	r2, [pc, #344]	; (80030c8 <HAL_GPIO_Init+0x32c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d031      	beq.n	8002fd6 <HAL_GPIO_Init+0x23a>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a55      	ldr	r2, [pc, #340]	; (80030cc <HAL_GPIO_Init+0x330>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d02b      	beq.n	8002fd2 <HAL_GPIO_Init+0x236>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a54      	ldr	r2, [pc, #336]	; (80030d0 <HAL_GPIO_Init+0x334>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d025      	beq.n	8002fce <HAL_GPIO_Init+0x232>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a53      	ldr	r2, [pc, #332]	; (80030d4 <HAL_GPIO_Init+0x338>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d01f      	beq.n	8002fca <HAL_GPIO_Init+0x22e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a52      	ldr	r2, [pc, #328]	; (80030d8 <HAL_GPIO_Init+0x33c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d019      	beq.n	8002fc6 <HAL_GPIO_Init+0x22a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a51      	ldr	r2, [pc, #324]	; (80030dc <HAL_GPIO_Init+0x340>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <HAL_GPIO_Init+0x226>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a50      	ldr	r2, [pc, #320]	; (80030e0 <HAL_GPIO_Init+0x344>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d00d      	beq.n	8002fbe <HAL_GPIO_Init+0x222>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a4f      	ldr	r2, [pc, #316]	; (80030e4 <HAL_GPIO_Init+0x348>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d007      	beq.n	8002fba <HAL_GPIO_Init+0x21e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a4e      	ldr	r2, [pc, #312]	; (80030e8 <HAL_GPIO_Init+0x34c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d101      	bne.n	8002fb6 <HAL_GPIO_Init+0x21a>
 8002fb2:	2309      	movs	r3, #9
 8002fb4:	e012      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fb6:	230a      	movs	r3, #10
 8002fb8:	e010      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fba:	2308      	movs	r3, #8
 8002fbc:	e00e      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fbe:	2307      	movs	r3, #7
 8002fc0:	e00c      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fc2:	2306      	movs	r3, #6
 8002fc4:	e00a      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fc6:	2305      	movs	r3, #5
 8002fc8:	e008      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fca:	2304      	movs	r3, #4
 8002fcc:	e006      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e004      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e002      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e000      	b.n	8002fdc <HAL_GPIO_Init+0x240>
 8002fda:	2300      	movs	r3, #0
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	f002 0203 	and.w	r2, r2, #3
 8002fe2:	0092      	lsls	r2, r2, #2
 8002fe4:	4093      	lsls	r3, r2
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fec:	4934      	ldr	r1, [pc, #208]	; (80030c0 <HAL_GPIO_Init+0x324>)
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	089b      	lsrs	r3, r3, #2
 8002ff2:	3302      	adds	r3, #2
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ffa:	4b3c      	ldr	r3, [pc, #240]	; (80030ec <HAL_GPIO_Init+0x350>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800301e:	4a33      	ldr	r2, [pc, #204]	; (80030ec <HAL_GPIO_Init+0x350>)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003024:	4b31      	ldr	r3, [pc, #196]	; (80030ec <HAL_GPIO_Init+0x350>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003048:	4a28      	ldr	r2, [pc, #160]	; (80030ec <HAL_GPIO_Init+0x350>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800304e:	4b27      	ldr	r3, [pc, #156]	; (80030ec <HAL_GPIO_Init+0x350>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003072:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <HAL_GPIO_Init+0x350>)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003078:	4b1c      	ldr	r3, [pc, #112]	; (80030ec <HAL_GPIO_Init+0x350>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800309c:	4a13      	ldr	r2, [pc, #76]	; (80030ec <HAL_GPIO_Init+0x350>)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3301      	adds	r3, #1
 80030a6:	61fb      	str	r3, [r7, #28]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	2b0f      	cmp	r3, #15
 80030ac:	f67f ae86 	bls.w	8002dbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030b0:	bf00      	nop
 80030b2:	3724      	adds	r7, #36	; 0x24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40013800 	.word	0x40013800
 80030c4:	40020000 	.word	0x40020000
 80030c8:	40020400 	.word	0x40020400
 80030cc:	40020800 	.word	0x40020800
 80030d0:	40020c00 	.word	0x40020c00
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40021400 	.word	0x40021400
 80030dc:	40021800 	.word	0x40021800
 80030e0:	40021c00 	.word	0x40021c00
 80030e4:	40022000 	.word	0x40022000
 80030e8:	40022400 	.word	0x40022400
 80030ec:	40013c00 	.word	0x40013c00

080030f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	807b      	strh	r3, [r7, #2]
 80030fc:	4613      	mov	r3, r2
 80030fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003100:	787b      	ldrb	r3, [r7, #1]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003106:	887a      	ldrh	r2, [r7, #2]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800310c:	e003      	b.n	8003116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800310e:	887b      	ldrh	r3, [r7, #2]
 8003110:	041a      	lsls	r2, r3, #16
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	619a      	str	r2, [r3, #24]
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	460b      	mov	r3, r1
 800312c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	887b      	ldrh	r3, [r7, #2]
 8003134:	4013      	ands	r3, r2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d004      	beq.n	8003144 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800313a:	887b      	ldrh	r3, [r7, #2]
 800313c:	041a      	lsls	r2, r3, #16
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003142:	e002      	b.n	800314a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003144:	887a      	ldrh	r2, [r7, #2]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	619a      	str	r2, [r3, #24]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003156:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003158:	b08f      	sub	sp, #60	; 0x3c
 800315a:	af0a      	add	r7, sp, #40	; 0x28
 800315c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e116      	b.n	8003396 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fd fe16 	bl	8000db4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2203      	movs	r2, #3
 800318c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003198:	2b00      	cmp	r3, #0
 800319a:	d102      	bne.n	80031a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f002 fb6c 	bl	8005884 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	603b      	str	r3, [r7, #0]
 80031b2:	687e      	ldr	r6, [r7, #4]
 80031b4:	466d      	mov	r5, sp
 80031b6:	f106 0410 	add.w	r4, r6, #16
 80031ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80031ca:	1d33      	adds	r3, r6, #4
 80031cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ce:	6838      	ldr	r0, [r7, #0]
 80031d0:	f002 fb00 	bl	80057d4 <USB_CoreInit>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2202      	movs	r2, #2
 80031de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e0d7      	b.n	8003396 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f002 fb5a 	bl	80058a6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]
 80031f6:	e04a      	b.n	800328e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80031f8:	7bfa      	ldrb	r2, [r7, #15]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	333d      	adds	r3, #61	; 0x3d
 8003208:	2201      	movs	r2, #1
 800320a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800320c:	7bfa      	ldrb	r2, [r7, #15]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	333c      	adds	r3, #60	; 0x3c
 800321c:	7bfa      	ldrb	r2, [r7, #15]
 800321e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003220:	7bfa      	ldrb	r2, [r7, #15]
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	b298      	uxth	r0, r3
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	1a9b      	subs	r3, r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	3342      	adds	r3, #66	; 0x42
 8003234:	4602      	mov	r2, r0
 8003236:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003238:	7bfa      	ldrb	r2, [r7, #15]
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	1a9b      	subs	r3, r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	333f      	adds	r3, #63	; 0x3f
 8003248:	2200      	movs	r2, #0
 800324a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800324c:	7bfa      	ldrb	r2, [r7, #15]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	3344      	adds	r3, #68	; 0x44
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003260:	7bfa      	ldrb	r2, [r7, #15]
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	440b      	add	r3, r1
 800326e:	3348      	adds	r3, #72	; 0x48
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003274:	7bfa      	ldrb	r2, [r7, #15]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	3350      	adds	r3, #80	; 0x50
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003288:	7bfb      	ldrb	r3, [r7, #15]
 800328a:	3301      	adds	r3, #1
 800328c:	73fb      	strb	r3, [r7, #15]
 800328e:	7bfa      	ldrb	r2, [r7, #15]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	429a      	cmp	r2, r3
 8003296:	d3af      	bcc.n	80031f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003298:	2300      	movs	r3, #0
 800329a:	73fb      	strb	r3, [r7, #15]
 800329c:	e044      	b.n	8003328 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800329e:	7bfa      	ldrb	r2, [r7, #15]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032b4:	7bfa      	ldrb	r2, [r7, #15]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	1a9b      	subs	r3, r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80032c6:	7bfa      	ldrb	r2, [r7, #15]
 80032c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80032ca:	7bfa      	ldrb	r2, [r7, #15]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80032e0:	7bfa      	ldrb	r2, [r7, #15]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80032f6:	7bfa      	ldrb	r2, [r7, #15]
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800330c:	7bfa      	ldrb	r2, [r7, #15]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003322:	7bfb      	ldrb	r3, [r7, #15]
 8003324:	3301      	adds	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	429a      	cmp	r2, r3
 8003330:	d3b5      	bcc.n	800329e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	687e      	ldr	r6, [r7, #4]
 800333a:	466d      	mov	r5, sp
 800333c:	f106 0410 	add.w	r4, r6, #16
 8003340:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003342:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003344:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003348:	e894 0003 	ldmia.w	r4, {r0, r1}
 800334c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003350:	1d33      	adds	r3, r6, #4
 8003352:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003354:	6838      	ldr	r0, [r7, #0]
 8003356:	f002 fad1 	bl	80058fc <USB_DevInit>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e014      	b.n	8003396 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	2b01      	cmp	r3, #1
 8003382:	d102      	bne.n	800338a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f80b 	bl	80033a0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f002 fc83 	bl	8005c9a <USB_DevDisconnect>

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080033a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	699b      	ldr	r3, [r3, #24]
 80033c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80033d0:	4313      	orrs	r3, r2
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	10000003 	.word	0x10000003

080033e8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a04      	ldr	r2, [pc, #16]	; (8003404 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f6:	6013      	str	r3, [r2, #0]
}
 80033f8:	bf00      	nop
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40007000 	.word	0x40007000

08003408 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003412:	4b23      	ldr	r3, [pc, #140]	; (80034a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	4a22      	ldr	r2, [pc, #136]	; (80034a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341c:	6413      	str	r3, [r2, #64]	; 0x40
 800341e:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800342a:	4b1e      	ldr	r3, [pc, #120]	; (80034a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1d      	ldr	r2, [pc, #116]	; (80034a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003434:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003436:	f7fe f815 	bl	8001464 <HAL_GetTick>
 800343a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800343c:	e009      	b.n	8003452 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800343e:	f7fe f811 	bl	8001464 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800344c:	d901      	bls.n	8003452 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e022      	b.n	8003498 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003452:	4b14      	ldr	r3, [pc, #80]	; (80034a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345e:	d1ee      	bne.n	800343e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003460:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a0f      	ldr	r2, [pc, #60]	; (80034a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800346a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800346c:	f7fd fffa 	bl	8001464 <HAL_GetTick>
 8003470:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003472:	e009      	b.n	8003488 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003474:	f7fd fff6 	bl	8001464 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003482:	d901      	bls.n	8003488 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e007      	b.n	8003498 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003494:	d1ee      	bne.n	8003474 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40023800 	.word	0x40023800
 80034a4:	40007000 	.word	0x40007000

080034a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80034b0:	2300      	movs	r3, #0
 80034b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e29b      	b.n	80039f6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 8087 	beq.w	80035da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034cc:	4b96      	ldr	r3, [pc, #600]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d00c      	beq.n	80034f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034d8:	4b93      	ldr	r3, [pc, #588]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 030c 	and.w	r3, r3, #12
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d112      	bne.n	800350a <HAL_RCC_OscConfig+0x62>
 80034e4:	4b90      	ldr	r3, [pc, #576]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034f0:	d10b      	bne.n	800350a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f2:	4b8d      	ldr	r3, [pc, #564]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d06c      	beq.n	80035d8 <HAL_RCC_OscConfig+0x130>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d168      	bne.n	80035d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e275      	b.n	80039f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003512:	d106      	bne.n	8003522 <HAL_RCC_OscConfig+0x7a>
 8003514:	4b84      	ldr	r3, [pc, #528]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a83      	ldr	r2, [pc, #524]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 800351a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	e02e      	b.n	8003580 <HAL_RCC_OscConfig+0xd8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10c      	bne.n	8003544 <HAL_RCC_OscConfig+0x9c>
 800352a:	4b7f      	ldr	r3, [pc, #508]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a7e      	ldr	r2, [pc, #504]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 8003530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	4b7c      	ldr	r3, [pc, #496]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a7b      	ldr	r2, [pc, #492]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 800353c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	e01d      	b.n	8003580 <HAL_RCC_OscConfig+0xd8>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0xc0>
 800354e:	4b76      	ldr	r3, [pc, #472]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a75      	ldr	r2, [pc, #468]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 8003554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4b73      	ldr	r3, [pc, #460]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a72      	ldr	r2, [pc, #456]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e00b      	b.n	8003580 <HAL_RCC_OscConfig+0xd8>
 8003568:	4b6f      	ldr	r3, [pc, #444]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a6e      	ldr	r2, [pc, #440]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 800356e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	4b6c      	ldr	r3, [pc, #432]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a6b      	ldr	r2, [pc, #428]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 800357a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800357e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d013      	beq.n	80035b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fd ff6c 	bl	8001464 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003590:	f7fd ff68 	bl	8001464 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b64      	cmp	r3, #100	; 0x64
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e229      	b.n	80039f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035a2:	4b61      	ldr	r3, [pc, #388]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCC_OscConfig+0xe8>
 80035ae:	e014      	b.n	80035da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fd ff58 	bl	8001464 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b8:	f7fd ff54 	bl	8001464 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	; 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e215      	b.n	80039f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ca:	4b57      	ldr	r3, [pc, #348]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x110>
 80035d6:	e000      	b.n	80035da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d069      	beq.n	80036ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035e6:	4b50      	ldr	r3, [pc, #320]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00b      	beq.n	800360a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035f2:	4b4d      	ldr	r3, [pc, #308]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b08      	cmp	r3, #8
 80035fc:	d11c      	bne.n	8003638 <HAL_RCC_OscConfig+0x190>
 80035fe:	4b4a      	ldr	r3, [pc, #296]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d116      	bne.n	8003638 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360a:	4b47      	ldr	r3, [pc, #284]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d005      	beq.n	8003622 <HAL_RCC_OscConfig+0x17a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d001      	beq.n	8003622 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e1e9      	b.n	80039f6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003622:	4b41      	ldr	r3, [pc, #260]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	493d      	ldr	r1, [pc, #244]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003636:	e040      	b.n	80036ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d023      	beq.n	8003688 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003640:	4b39      	ldr	r3, [pc, #228]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a38      	ldr	r2, [pc, #224]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7fd ff0a 	bl	8001464 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003654:	f7fd ff06 	bl	8001464 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e1c7      	b.n	80039f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003666:	4b30      	ldr	r3, [pc, #192]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003672:	4b2d      	ldr	r3, [pc, #180]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	4929      	ldr	r1, [pc, #164]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]
 8003686:	e018      	b.n	80036ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003688:	4b27      	ldr	r3, [pc, #156]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a26      	ldr	r2, [pc, #152]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003694:	f7fd fee6 	bl	8001464 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369c:	f7fd fee2 	bl	8001464 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e1a3      	b.n	80039f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ae:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0308 	and.w	r3, r3, #8
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d038      	beq.n	8003738 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d019      	beq.n	8003702 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ce:	4b16      	ldr	r3, [pc, #88]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 80036d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d2:	4a15      	ldr	r2, [pc, #84]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036da:	f7fd fec3 	bl	8001464 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e2:	f7fd febf 	bl	8001464 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e180      	b.n	80039f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 80036f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x23a>
 8003700:	e01a      	b.n	8003738 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003702:	4b09      	ldr	r3, [pc, #36]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 8003704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003706:	4a08      	ldr	r2, [pc, #32]	; (8003728 <HAL_RCC_OscConfig+0x280>)
 8003708:	f023 0301 	bic.w	r3, r3, #1
 800370c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370e:	f7fd fea9 	bl	8001464 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003714:	e00a      	b.n	800372c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003716:	f7fd fea5 	bl	8001464 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d903      	bls.n	800372c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e166      	b.n	80039f6 <HAL_RCC_OscConfig+0x54e>
 8003728:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372c:	4b92      	ldr	r3, [pc, #584]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 800372e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1ee      	bne.n	8003716 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 80a4 	beq.w	800388e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003746:	4b8c      	ldr	r3, [pc, #560]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10d      	bne.n	800376e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	4b89      	ldr	r3, [pc, #548]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	4a88      	ldr	r2, [pc, #544]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	6413      	str	r3, [r2, #64]	; 0x40
 800375e:	4b86      	ldr	r3, [pc, #536]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	60bb      	str	r3, [r7, #8]
 8003768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800376a:	2301      	movs	r3, #1
 800376c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800376e:	4b83      	ldr	r3, [pc, #524]	; (800397c <HAL_RCC_OscConfig+0x4d4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d118      	bne.n	80037ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800377a:	4b80      	ldr	r3, [pc, #512]	; (800397c <HAL_RCC_OscConfig+0x4d4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a7f      	ldr	r2, [pc, #508]	; (800397c <HAL_RCC_OscConfig+0x4d4>)
 8003780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003786:	f7fd fe6d 	bl	8001464 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378e:	f7fd fe69 	bl	8001464 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b64      	cmp	r3, #100	; 0x64
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e12a      	b.n	80039f6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037a0:	4b76      	ldr	r3, [pc, #472]	; (800397c <HAL_RCC_OscConfig+0x4d4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0f0      	beq.n	800378e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d106      	bne.n	80037c2 <HAL_RCC_OscConfig+0x31a>
 80037b4:	4b70      	ldr	r3, [pc, #448]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 80037b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b8:	4a6f      	ldr	r2, [pc, #444]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6713      	str	r3, [r2, #112]	; 0x70
 80037c0:	e02d      	b.n	800381e <HAL_RCC_OscConfig+0x376>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x33c>
 80037ca:	4b6b      	ldr	r3, [pc, #428]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	4a6a      	ldr	r2, [pc, #424]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	6713      	str	r3, [r2, #112]	; 0x70
 80037d6:	4b68      	ldr	r3, [pc, #416]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	4a67      	ldr	r2, [pc, #412]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 80037dc:	f023 0304 	bic.w	r3, r3, #4
 80037e0:	6713      	str	r3, [r2, #112]	; 0x70
 80037e2:	e01c      	b.n	800381e <HAL_RCC_OscConfig+0x376>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b05      	cmp	r3, #5
 80037ea:	d10c      	bne.n	8003806 <HAL_RCC_OscConfig+0x35e>
 80037ec:	4b62      	ldr	r3, [pc, #392]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 80037ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f0:	4a61      	ldr	r2, [pc, #388]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 80037f2:	f043 0304 	orr.w	r3, r3, #4
 80037f6:	6713      	str	r3, [r2, #112]	; 0x70
 80037f8:	4b5f      	ldr	r3, [pc, #380]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fc:	4a5e      	ldr	r2, [pc, #376]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6713      	str	r3, [r2, #112]	; 0x70
 8003804:	e00b      	b.n	800381e <HAL_RCC_OscConfig+0x376>
 8003806:	4b5c      	ldr	r3, [pc, #368]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	4a5b      	ldr	r2, [pc, #364]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 800380c:	f023 0301 	bic.w	r3, r3, #1
 8003810:	6713      	str	r3, [r2, #112]	; 0x70
 8003812:	4b59      	ldr	r3, [pc, #356]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	4a58      	ldr	r2, [pc, #352]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 8003818:	f023 0304 	bic.w	r3, r3, #4
 800381c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d015      	beq.n	8003852 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003826:	f7fd fe1d 	bl	8001464 <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382c:	e00a      	b.n	8003844 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382e:	f7fd fe19 	bl	8001464 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f241 3288 	movw	r2, #5000	; 0x1388
 800383c:	4293      	cmp	r3, r2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e0d8      	b.n	80039f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003844:	4b4c      	ldr	r3, [pc, #304]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d0ee      	beq.n	800382e <HAL_RCC_OscConfig+0x386>
 8003850:	e014      	b.n	800387c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003852:	f7fd fe07 	bl	8001464 <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003858:	e00a      	b.n	8003870 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385a:	f7fd fe03 	bl	8001464 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	f241 3288 	movw	r2, #5000	; 0x1388
 8003868:	4293      	cmp	r3, r2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e0c2      	b.n	80039f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003870:	4b41      	ldr	r3, [pc, #260]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 8003872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003874:	f003 0302 	and.w	r3, r3, #2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1ee      	bne.n	800385a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800387c:	7dfb      	ldrb	r3, [r7, #23]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d105      	bne.n	800388e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003882:	4b3d      	ldr	r3, [pc, #244]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	4a3c      	ldr	r2, [pc, #240]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 8003888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f000 80ae 	beq.w	80039f4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003898:	4b37      	ldr	r3, [pc, #220]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f003 030c 	and.w	r3, r3, #12
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d06d      	beq.n	8003980 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	699b      	ldr	r3, [r3, #24]
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d14b      	bne.n	8003944 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ac:	4b32      	ldr	r3, [pc, #200]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a31      	ldr	r2, [pc, #196]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 80038b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fd fdd4 	bl	8001464 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c0:	f7fd fdd0 	bl	8001464 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e091      	b.n	80039f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038d2:	4b29      	ldr	r3, [pc, #164]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69da      	ldr	r2, [r3, #28]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ec:	019b      	lsls	r3, r3, #6
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	3b01      	subs	r3, #1
 80038f8:	041b      	lsls	r3, r3, #16
 80038fa:	431a      	orrs	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	061b      	lsls	r3, r3, #24
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	071b      	lsls	r3, r3, #28
 800390a:	491b      	ldr	r1, [pc, #108]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003910:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a18      	ldr	r2, [pc, #96]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 8003916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800391a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391c:	f7fd fda2 	bl	8001464 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003922:	e008      	b.n	8003936 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003924:	f7fd fd9e 	bl	8001464 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	2b02      	cmp	r3, #2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e05f      	b.n	80039f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003936:	4b10      	ldr	r3, [pc, #64]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d0f0      	beq.n	8003924 <HAL_RCC_OscConfig+0x47c>
 8003942:	e057      	b.n	80039f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a0b      	ldr	r2, [pc, #44]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 800394a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800394e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fd fd88 	bl	8001464 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003958:	f7fd fd84 	bl	8001464 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e045      	b.n	80039f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396a:	4b03      	ldr	r3, [pc, #12]	; (8003978 <HAL_RCC_OscConfig+0x4d0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x4b0>
 8003976:	e03d      	b.n	80039f4 <HAL_RCC_OscConfig+0x54c>
 8003978:	40023800 	.word	0x40023800
 800397c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003980:	4b1f      	ldr	r3, [pc, #124]	; (8003a00 <HAL_RCC_OscConfig+0x558>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d030      	beq.n	80039f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d129      	bne.n	80039f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d122      	bne.n	80039f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039b0:	4013      	ands	r3, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d119      	bne.n	80039f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	085b      	lsrs	r3, r3, #1
 80039c8:	3b01      	subs	r3, #1
 80039ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d10f      	bne.n	80039f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039dc:	429a      	cmp	r2, r3
 80039de:	d107      	bne.n	80039f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800

08003a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0d0      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a1c:	4b6a      	ldr	r3, [pc, #424]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 030f 	and.w	r3, r3, #15
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d910      	bls.n	8003a4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a2a:	4b67      	ldr	r3, [pc, #412]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f023 020f 	bic.w	r2, r3, #15
 8003a32:	4965      	ldr	r1, [pc, #404]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3a:	4b63      	ldr	r3, [pc, #396]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0b8      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d020      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d005      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a64:	4b59      	ldr	r3, [pc, #356]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	4a58      	ldr	r2, [pc, #352]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0308 	and.w	r3, r3, #8
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a7c:	4b53      	ldr	r3, [pc, #332]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	4a52      	ldr	r2, [pc, #328]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a88:	4b50      	ldr	r3, [pc, #320]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	494d      	ldr	r1, [pc, #308]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d040      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d107      	bne.n	8003abe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aae:	4b47      	ldr	r3, [pc, #284]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d115      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e07f      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac6:	4b41      	ldr	r3, [pc, #260]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e073      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ad6:	4b3d      	ldr	r3, [pc, #244]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e06b      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ae6:	4b39      	ldr	r3, [pc, #228]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f023 0203 	bic.w	r2, r3, #3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4936      	ldr	r1, [pc, #216]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af8:	f7fd fcb4 	bl	8001464 <HAL_GetTick>
 8003afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afe:	e00a      	b.n	8003b16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b00:	f7fd fcb0 	bl	8001464 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e053      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b16:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f003 020c 	and.w	r2, r3, #12
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d1eb      	bne.n	8003b00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b28:	4b27      	ldr	r3, [pc, #156]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	683a      	ldr	r2, [r7, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d210      	bcs.n	8003b58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b36:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 020f 	bic.w	r2, r3, #15
 8003b3e:	4922      	ldr	r1, [pc, #136]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b46:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d001      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e032      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d008      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b64:	4b19      	ldr	r3, [pc, #100]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4916      	ldr	r1, [pc, #88]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0308 	and.w	r3, r3, #8
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b82:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	490e      	ldr	r1, [pc, #56]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b96:	f000 f821 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 8003b9a:	4601      	mov	r1, r0
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_RCC_ClockConfig+0x1c8>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	f003 030f 	and.w	r3, r3, #15
 8003ba6:	4a0a      	ldr	r2, [pc, #40]	; (8003bd0 <HAL_RCC_ClockConfig+0x1cc>)
 8003ba8:	5cd3      	ldrb	r3, [r2, r3]
 8003baa:	fa21 f303 	lsr.w	r3, r1, r3
 8003bae:	4a09      	ldr	r2, [pc, #36]	; (8003bd4 <HAL_RCC_ClockConfig+0x1d0>)
 8003bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bb2:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <HAL_RCC_ClockConfig+0x1d4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd f958 	bl	8000e6c <HAL_InitTick>

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40023c00 	.word	0x40023c00
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	080191a8 	.word	0x080191a8
 8003bd4:	20000000 	.word	0x20000000
 8003bd8:	20000004 	.word	0x20000004

08003bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003be2:	2300      	movs	r3, #0
 8003be4:	607b      	str	r3, [r7, #4]
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	2300      	movs	r3, #0
 8003bec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bf2:	4b63      	ldr	r3, [pc, #396]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d007      	beq.n	8003c0e <HAL_RCC_GetSysClockFreq+0x32>
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d008      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0x38>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f040 80b4 	bne.w	8003d70 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c08:	4b5e      	ldr	r3, [pc, #376]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c0a:	60bb      	str	r3, [r7, #8]
      break;
 8003c0c:	e0b3      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c0e:	4b5e      	ldr	r3, [pc, #376]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003c10:	60bb      	str	r3, [r7, #8]
      break;
 8003c12:	e0b0      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c14:	4b5a      	ldr	r3, [pc, #360]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c1c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c1e:	4b58      	ldr	r3, [pc, #352]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d04a      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c2a:	4b55      	ldr	r3, [pc, #340]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	099b      	lsrs	r3, r3, #6
 8003c30:	f04f 0400 	mov.w	r4, #0
 8003c34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	ea03 0501 	and.w	r5, r3, r1
 8003c40:	ea04 0602 	and.w	r6, r4, r2
 8003c44:	4629      	mov	r1, r5
 8003c46:	4632      	mov	r2, r6
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	f04f 0400 	mov.w	r4, #0
 8003c50:	0154      	lsls	r4, r2, #5
 8003c52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c56:	014b      	lsls	r3, r1, #5
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4622      	mov	r2, r4
 8003c5c:	1b49      	subs	r1, r1, r5
 8003c5e:	eb62 0206 	sbc.w	r2, r2, r6
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	f04f 0400 	mov.w	r4, #0
 8003c6a:	0194      	lsls	r4, r2, #6
 8003c6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c70:	018b      	lsls	r3, r1, #6
 8003c72:	1a5b      	subs	r3, r3, r1
 8003c74:	eb64 0402 	sbc.w	r4, r4, r2
 8003c78:	f04f 0100 	mov.w	r1, #0
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	00e2      	lsls	r2, r4, #3
 8003c82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c86:	00d9      	lsls	r1, r3, #3
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4614      	mov	r4, r2
 8003c8c:	195b      	adds	r3, r3, r5
 8003c8e:	eb44 0406 	adc.w	r4, r4, r6
 8003c92:	f04f 0100 	mov.w	r1, #0
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	0262      	lsls	r2, r4, #9
 8003c9c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003ca0:	0259      	lsls	r1, r3, #9
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4614      	mov	r4, r2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	4621      	mov	r1, r4
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f04f 0400 	mov.w	r4, #0
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	4623      	mov	r3, r4
 8003cb4:	f7fc fb2c 	bl	8000310 <__aeabi_uldivmod>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	460c      	mov	r4, r1
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	e049      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc0:	4b2f      	ldr	r3, [pc, #188]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	099b      	lsrs	r3, r3, #6
 8003cc6:	f04f 0400 	mov.w	r4, #0
 8003cca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	ea03 0501 	and.w	r5, r3, r1
 8003cd6:	ea04 0602 	and.w	r6, r4, r2
 8003cda:	4629      	mov	r1, r5
 8003cdc:	4632      	mov	r2, r6
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	f04f 0400 	mov.w	r4, #0
 8003ce6:	0154      	lsls	r4, r2, #5
 8003ce8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003cec:	014b      	lsls	r3, r1, #5
 8003cee:	4619      	mov	r1, r3
 8003cf0:	4622      	mov	r2, r4
 8003cf2:	1b49      	subs	r1, r1, r5
 8003cf4:	eb62 0206 	sbc.w	r2, r2, r6
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	f04f 0400 	mov.w	r4, #0
 8003d00:	0194      	lsls	r4, r2, #6
 8003d02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d06:	018b      	lsls	r3, r1, #6
 8003d08:	1a5b      	subs	r3, r3, r1
 8003d0a:	eb64 0402 	sbc.w	r4, r4, r2
 8003d0e:	f04f 0100 	mov.w	r1, #0
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	00e2      	lsls	r2, r4, #3
 8003d18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d1c:	00d9      	lsls	r1, r3, #3
 8003d1e:	460b      	mov	r3, r1
 8003d20:	4614      	mov	r4, r2
 8003d22:	195b      	adds	r3, r3, r5
 8003d24:	eb44 0406 	adc.w	r4, r4, r6
 8003d28:	f04f 0100 	mov.w	r1, #0
 8003d2c:	f04f 0200 	mov.w	r2, #0
 8003d30:	02a2      	lsls	r2, r4, #10
 8003d32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003d36:	0299      	lsls	r1, r3, #10
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4614      	mov	r4, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	4621      	mov	r1, r4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f04f 0400 	mov.w	r4, #0
 8003d46:	461a      	mov	r2, r3
 8003d48:	4623      	mov	r3, r4
 8003d4a:	f7fc fae1 	bl	8000310 <__aeabi_uldivmod>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	460c      	mov	r4, r1
 8003d52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d54:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	0c1b      	lsrs	r3, r3, #16
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6c:	60bb      	str	r3, [r7, #8]
      break;
 8003d6e:	e002      	b.n	8003d76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d70:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d72:	60bb      	str	r3, [r7, #8]
      break;
 8003d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d76:	68bb      	ldr	r3, [r7, #8]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d80:	40023800 	.word	0x40023800
 8003d84:	00f42400 	.word	0x00f42400
 8003d88:	007a1200 	.word	0x007a1200

08003d8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d90:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d92:	681b      	ldr	r3, [r3, #0]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20000000 	.word	0x20000000

08003da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003da8:	f7ff fff0 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dac:	4601      	mov	r1, r0
 8003dae:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0a9b      	lsrs	r3, r3, #10
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4a03      	ldr	r2, [pc, #12]	; (8003dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dba:	5cd3      	ldrb	r3, [r2, r3]
 8003dbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	080191b8 	.word	0x080191b8

08003dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dd0:	f7ff ffdc 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dd4:	4601      	mov	r1, r0
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	0b5b      	lsrs	r3, r3, #13
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	4a03      	ldr	r2, [pc, #12]	; (8003df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de2:	5cd3      	ldrb	r3, [r2, r3]
 8003de4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40023800 	.word	0x40023800
 8003df0:	080191b8 	.word	0x080191b8

08003df4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	220f      	movs	r2, #15
 8003e02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e04:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <HAL_RCC_GetClockConfig+0x5c>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 0203 	and.w	r2, r3, #3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <HAL_RCC_GetClockConfig+0x5c>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e28:	4b09      	ldr	r3, [pc, #36]	; (8003e50 <HAL_RCC_GetClockConfig+0x5c>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	08db      	lsrs	r3, r3, #3
 8003e2e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e36:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <HAL_RCC_GetClockConfig+0x60>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 020f 	and.w	r2, r3, #15
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	601a      	str	r2, [r3, #0]
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40023c00 	.word	0x40023c00

08003e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d012      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e80:	4b69      	ldr	r3, [pc, #420]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a68      	ldr	r2, [pc, #416]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e86:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003e8a:	6093      	str	r3, [r2, #8]
 8003e8c:	4b66      	ldr	r3, [pc, #408]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e94:	4964      	ldr	r1, [pc, #400]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d017      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eb2:	4b5d      	ldr	r3, [pc, #372]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003eb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec0:	4959      	ldr	r1, [pc, #356]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d017      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003eee:	4b4e      	ldr	r3, [pc, #312]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ef4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	494a      	ldr	r1, [pc, #296]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 808b 	beq.w	8004052 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f3c:	4b3a      	ldr	r3, [pc, #232]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	4a39      	ldr	r2, [pc, #228]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f46:	6413      	str	r3, [r2, #64]	; 0x40
 8003f48:	4b37      	ldr	r3, [pc, #220]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f54:	4b35      	ldr	r3, [pc, #212]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a34      	ldr	r2, [pc, #208]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f60:	f7fd fa80 	bl	8001464 <HAL_GetTick>
 8003f64:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f68:	f7fd fa7c 	bl	8001464 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	; 0x64
 8003f74:	d901      	bls.n	8003f7a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e38d      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f7a:	4b2c      	ldr	r3, [pc, #176]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f86:	4b28      	ldr	r3, [pc, #160]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f8e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d035      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d02e      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fa4:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fae:	4b1e      	ldr	r3, [pc, #120]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	4a1d      	ldr	r2, [pc, #116]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fba:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	4a1a      	ldr	r2, [pc, #104]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003fc6:	4a18      	ldr	r2, [pc, #96]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fcc:	4b16      	ldr	r3, [pc, #88]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d114      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fd fa44 	bl	8001464 <HAL_GetTick>
 8003fdc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fde:	e00a      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe0:	f7fd fa40 	bl	8001464 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e34f      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d0ee      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800400e:	d111      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004010:	4b05      	ldr	r3, [pc, #20]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800401c:	4b04      	ldr	r3, [pc, #16]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800401e:	400b      	ands	r3, r1
 8004020:	4901      	ldr	r1, [pc, #4]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004022:	4313      	orrs	r3, r2
 8004024:	608b      	str	r3, [r1, #8]
 8004026:	e00b      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004028:	40023800 	.word	0x40023800
 800402c:	40007000 	.word	0x40007000
 8004030:	0ffffcff 	.word	0x0ffffcff
 8004034:	4bb3      	ldr	r3, [pc, #716]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	4ab2      	ldr	r2, [pc, #712]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800403a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800403e:	6093      	str	r3, [r2, #8]
 8004040:	4bb0      	ldr	r3, [pc, #704]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004042:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404c:	49ad      	ldr	r1, [pc, #692]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800404e:	4313      	orrs	r3, r2
 8004050:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	2b00      	cmp	r3, #0
 800405c:	d010      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800405e:	4ba9      	ldr	r3, [pc, #676]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004064:	4aa7      	ldr	r2, [pc, #668]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800406a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800406e:	4ba5      	ldr	r3, [pc, #660]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004070:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	49a2      	ldr	r1, [pc, #648]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800408c:	4b9d      	ldr	r3, [pc, #628]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004092:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800409a:	499a      	ldr	r1, [pc, #616]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040ae:	4b95      	ldr	r3, [pc, #596]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040bc:	4991      	ldr	r1, [pc, #580]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040d0:	4b8c      	ldr	r3, [pc, #560]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040de:	4989      	ldr	r1, [pc, #548]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00a      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040f2:	4b84      	ldr	r3, [pc, #528]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	4980      	ldr	r1, [pc, #512]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004114:	4b7b      	ldr	r3, [pc, #492]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	f023 0203 	bic.w	r2, r3, #3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004122:	4978      	ldr	r1, [pc, #480]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004136:	4b73      	ldr	r3, [pc, #460]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413c:	f023 020c 	bic.w	r2, r3, #12
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004144:	496f      	ldr	r1, [pc, #444]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004146:	4313      	orrs	r3, r2
 8004148:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004158:	4b6a      	ldr	r3, [pc, #424]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004166:	4967      	ldr	r1, [pc, #412]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800417a:	4b62      	ldr	r3, [pc, #392]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800417c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004180:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004188:	495e      	ldr	r1, [pc, #376]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00a      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800419c:	4b59      	ldr	r3, [pc, #356]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	4956      	ldr	r1, [pc, #344]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80041be:	4b51      	ldr	r3, [pc, #324]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	494d      	ldr	r1, [pc, #308]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80041e0:	4b48      	ldr	r3, [pc, #288]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ee:	4945      	ldr	r1, [pc, #276]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004202:	4b40      	ldr	r3, [pc, #256]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004208:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004210:	493c      	ldr	r1, [pc, #240]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004224:	4b37      	ldr	r3, [pc, #220]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004232:	4934      	ldr	r1, [pc, #208]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d011      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004246:	4b2f      	ldr	r3, [pc, #188]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004254:	492b      	ldr	r1, [pc, #172]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004260:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004264:	d101      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004266:	2301      	movs	r3, #1
 8004268:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004276:	2301      	movs	r3, #1
 8004278:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00a      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004286:	4b1f      	ldr	r3, [pc, #124]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004288:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004294:	491b      	ldr	r1, [pc, #108]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00b      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042a8:	4b16      	ldr	r3, [pc, #88]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042b8:	4912      	ldr	r1, [pc, #72]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00b      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80042cc:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042dc:	4909      	ldr	r1, [pc, #36]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00f      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042f0:	4b04      	ldr	r3, [pc, #16]	; (8004304 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80042f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004300:	e002      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004302:	bf00      	nop
 8004304:	40023800 	.word	0x40023800
 8004308:	4985      	ldr	r1, [pc, #532]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00b      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800431c:	4b80      	ldr	r3, [pc, #512]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800431e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004322:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800432c:	497c      	ldr	r1, [pc, #496]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d005      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004342:	f040 80d6 	bne.w	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004346:	4b76      	ldr	r3, [pc, #472]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a75      	ldr	r2, [pc, #468]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800434c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004350:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004352:	f7fd f887 	bl	8001464 <HAL_GetTick>
 8004356:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004358:	e008      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800435a:	f7fd f883 	bl	8001464 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b64      	cmp	r3, #100	; 0x64
 8004366:	d901      	bls.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e194      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800436c:	4b6c      	ldr	r3, [pc, #432]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f0      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b00      	cmp	r3, #0
 8004382:	d021      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004388:	2b00      	cmp	r3, #0
 800438a:	d11d      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800438c:	4b64      	ldr	r3, [pc, #400]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800438e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004392:	0c1b      	lsrs	r3, r3, #16
 8004394:	f003 0303 	and.w	r3, r3, #3
 8004398:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800439a:	4b61      	ldr	r3, [pc, #388]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800439c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a0:	0e1b      	lsrs	r3, r3, #24
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	019a      	lsls	r2, r3, #6
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	041b      	lsls	r3, r3, #16
 80043b2:	431a      	orrs	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	061b      	lsls	r3, r3, #24
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	071b      	lsls	r3, r3, #28
 80043c0:	4957      	ldr	r1, [pc, #348]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d004      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x586>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d02e      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043f2:	d129      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043f4:	4b4a      	ldr	r3, [pc, #296]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80043f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043fa:	0c1b      	lsrs	r3, r3, #16
 80043fc:	f003 0303 	and.w	r3, r3, #3
 8004400:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004402:	4b47      	ldr	r3, [pc, #284]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004408:	0f1b      	lsrs	r3, r3, #28
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	019a      	lsls	r2, r3, #6
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	041b      	lsls	r3, r3, #16
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	061b      	lsls	r3, r3, #24
 8004422:	431a      	orrs	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	071b      	lsls	r3, r3, #28
 8004428:	493d      	ldr	r1, [pc, #244]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004430:	4b3b      	ldr	r3, [pc, #236]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004436:	f023 021f 	bic.w	r2, r3, #31
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	3b01      	subs	r3, #1
 8004440:	4937      	ldr	r1, [pc, #220]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d01d      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004454:	4b32      	ldr	r3, [pc, #200]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004456:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800445a:	0e1b      	lsrs	r3, r3, #24
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004462:	4b2f      	ldr	r3, [pc, #188]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004468:	0f1b      	lsrs	r3, r3, #28
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	019a      	lsls	r2, r3, #6
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	041b      	lsls	r3, r3, #16
 800447c:	431a      	orrs	r2, r3
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	061b      	lsls	r3, r3, #24
 8004482:	431a      	orrs	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	071b      	lsls	r3, r3, #28
 8004488:	4925      	ldr	r1, [pc, #148]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d011      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	019a      	lsls	r2, r3, #6
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	041b      	lsls	r3, r3, #16
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	061b      	lsls	r3, r3, #24
 80044b0:	431a      	orrs	r2, r3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	071b      	lsls	r3, r3, #28
 80044b8:	4919      	ldr	r1, [pc, #100]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044c0:	4b17      	ldr	r3, [pc, #92]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a16      	ldr	r2, [pc, #88]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044cc:	f7fc ffca 	bl	8001464 <HAL_GetTick>
 80044d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044d4:	f7fc ffc6 	bl	8001464 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e0d7      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044e6:	4b0e      	ldr	r3, [pc, #56]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0f0      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	f040 80cd 	bne.w	8004694 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80044fa:	4b09      	ldr	r3, [pc, #36]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a08      	ldr	r2, [pc, #32]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004504:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004506:	f7fc ffad 	bl	8001464 <HAL_GetTick>
 800450a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800450c:	e00a      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800450e:	f7fc ffa9 	bl	8001464 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b64      	cmp	r3, #100	; 0x64
 800451a:	d903      	bls.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800451c:	2303      	movs	r3, #3
 800451e:	e0ba      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004520:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004524:	4b5e      	ldr	r3, [pc, #376]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800452c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004530:	d0ed      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004542:	2b00      	cmp	r3, #0
 8004544:	d009      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800454e:	2b00      	cmp	r3, #0
 8004550:	d02e      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d12a      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800455a:	4b51      	ldr	r3, [pc, #324]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004560:	0c1b      	lsrs	r3, r3, #16
 8004562:	f003 0303 	and.w	r3, r3, #3
 8004566:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004568:	4b4d      	ldr	r3, [pc, #308]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456e:	0f1b      	lsrs	r3, r3, #28
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	019a      	lsls	r2, r3, #6
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	041b      	lsls	r3, r3, #16
 8004580:	431a      	orrs	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	061b      	lsls	r3, r3, #24
 8004588:	431a      	orrs	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	071b      	lsls	r3, r3, #28
 800458e:	4944      	ldr	r1, [pc, #272]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004596:	4b42      	ldr	r3, [pc, #264]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004598:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800459c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a4:	3b01      	subs	r3, #1
 80045a6:	021b      	lsls	r3, r3, #8
 80045a8:	493d      	ldr	r1, [pc, #244]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d022      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045c4:	d11d      	bne.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045c6:	4b36      	ldr	r3, [pc, #216]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80045c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045cc:	0e1b      	lsrs	r3, r3, #24
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045d4:	4b32      	ldr	r3, [pc, #200]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045da:	0f1b      	lsrs	r3, r3, #28
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	019a      	lsls	r2, r3, #6
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	041b      	lsls	r3, r3, #16
 80045ee:	431a      	orrs	r2, r3
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	061b      	lsls	r3, r3, #24
 80045f4:	431a      	orrs	r2, r3
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	071b      	lsls	r3, r3, #28
 80045fa:	4929      	ldr	r1, [pc, #164]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d028      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800460e:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004614:	0e1b      	lsrs	r3, r3, #24
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800461c:	4b20      	ldr	r3, [pc, #128]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	0c1b      	lsrs	r3, r3, #16
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	019a      	lsls	r2, r3, #6
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	041b      	lsls	r3, r3, #16
 8004634:	431a      	orrs	r2, r3
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	061b      	lsls	r3, r3, #24
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	071b      	lsls	r3, r3, #28
 8004642:	4917      	ldr	r1, [pc, #92]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800464a:	4b15      	ldr	r3, [pc, #84]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800464c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004650:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	4911      	ldr	r1, [pc, #68]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004660:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a0e      	ldr	r2, [pc, #56]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800466c:	f7fc fefa 	bl	8001464 <HAL_GetTick>
 8004670:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004674:	f7fc fef6 	bl	8001464 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b64      	cmp	r3, #100	; 0x64
 8004680:	d901      	bls.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e007      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800468e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004692:	d1ef      	bne.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3720      	adds	r7, #32
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40023800 	.word	0x40023800

080046a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e01d      	b.n	80046f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fc fb08 	bl	8000ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3304      	adds	r3, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	4610      	mov	r0, r2
 80046e4:	f000 fa36 	bl	8004b54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	4b0c      	ldr	r3, [pc, #48]	; (800474c <HAL_TIM_Base_Start_IT+0x50>)
 800471c:	4013      	ands	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b06      	cmp	r3, #6
 8004724:	d00b      	beq.n	800473e <HAL_TIM_Base_Start_IT+0x42>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800472c:	d007      	beq.n	800473e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f042 0201 	orr.w	r2, r2, #1
 800473c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3714      	adds	r7, #20
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	00010007 	.word	0x00010007

08004750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b02      	cmp	r3, #2
 8004764:	d122      	bne.n	80047ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b02      	cmp	r3, #2
 8004772:	d11b      	bne.n	80047ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0202 	mvn.w	r2, #2
 800477c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f9c0 	bl	8004b18 <HAL_TIM_IC_CaptureCallback>
 8004798:	e005      	b.n	80047a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f9b2 	bl	8004b04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f9c3 	bl	8004b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d122      	bne.n	8004800 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0304 	and.w	r3, r3, #4
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d11b      	bne.n	8004800 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f06f 0204 	mvn.w	r2, #4
 80047d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2202      	movs	r2, #2
 80047d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f996 	bl	8004b18 <HAL_TIM_IC_CaptureCallback>
 80047ec:	e005      	b.n	80047fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f988 	bl	8004b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f999 	bl	8004b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b08      	cmp	r3, #8
 800480c:	d122      	bne.n	8004854 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b08      	cmp	r3, #8
 800481a:	d11b      	bne.n	8004854 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f06f 0208 	mvn.w	r2, #8
 8004824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2204      	movs	r2, #4
 800482a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d003      	beq.n	8004842 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f96c 	bl	8004b18 <HAL_TIM_IC_CaptureCallback>
 8004840:	e005      	b.n	800484e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f95e 	bl	8004b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 f96f 	bl	8004b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0310 	and.w	r3, r3, #16
 800485e:	2b10      	cmp	r3, #16
 8004860:	d122      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	2b10      	cmp	r3, #16
 800486e:	d11b      	bne.n	80048a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0210 	mvn.w	r2, #16
 8004878:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2208      	movs	r2, #8
 800487e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f942 	bl	8004b18 <HAL_TIM_IC_CaptureCallback>
 8004894:	e005      	b.n	80048a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f934 	bl	8004b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f945 	bl	8004b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d10e      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d107      	bne.n	80048d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0201 	mvn.w	r2, #1
 80048cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fc f9ac 	bl	8000c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048de:	2b80      	cmp	r3, #128	; 0x80
 80048e0:	d10e      	bne.n	8004900 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ec:	2b80      	cmp	r3, #128	; 0x80
 80048ee:	d107      	bne.n	8004900 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fafc 	bl	8004ef8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800490e:	d10e      	bne.n	800492e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491a:	2b80      	cmp	r3, #128	; 0x80
 800491c:	d107      	bne.n	800492e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 faef 	bl	8004f0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004938:	2b40      	cmp	r3, #64	; 0x40
 800493a:	d10e      	bne.n	800495a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004946:	2b40      	cmp	r3, #64	; 0x40
 8004948:	d107      	bne.n	800495a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f8f3 	bl	8004b40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b20      	cmp	r3, #32
 8004966:	d10e      	bne.n	8004986 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b20      	cmp	r3, #32
 8004974:	d107      	bne.n	8004986 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f06f 0220 	mvn.w	r2, #32
 800497e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 faaf 	bl	8004ee4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004986:	bf00      	nop
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
	...

08004990 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_TIM_ConfigClockSource+0x18>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e0a6      	b.n	8004af6 <HAL_TIM_ConfigClockSource+0x166>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	4b4f      	ldr	r3, [pc, #316]	; (8004b00 <HAL_TIM_ConfigClockSource+0x170>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2b40      	cmp	r3, #64	; 0x40
 80049de:	d067      	beq.n	8004ab0 <HAL_TIM_ConfigClockSource+0x120>
 80049e0:	2b40      	cmp	r3, #64	; 0x40
 80049e2:	d80b      	bhi.n	80049fc <HAL_TIM_ConfigClockSource+0x6c>
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d073      	beq.n	8004ad0 <HAL_TIM_ConfigClockSource+0x140>
 80049e8:	2b10      	cmp	r3, #16
 80049ea:	d802      	bhi.n	80049f2 <HAL_TIM_ConfigClockSource+0x62>
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d06f      	beq.n	8004ad0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80049f0:	e078      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d06c      	beq.n	8004ad0 <HAL_TIM_ConfigClockSource+0x140>
 80049f6:	2b30      	cmp	r3, #48	; 0x30
 80049f8:	d06a      	beq.n	8004ad0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80049fa:	e073      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80049fc:	2b70      	cmp	r3, #112	; 0x70
 80049fe:	d00d      	beq.n	8004a1c <HAL_TIM_ConfigClockSource+0x8c>
 8004a00:	2b70      	cmp	r3, #112	; 0x70
 8004a02:	d804      	bhi.n	8004a0e <HAL_TIM_ConfigClockSource+0x7e>
 8004a04:	2b50      	cmp	r3, #80	; 0x50
 8004a06:	d033      	beq.n	8004a70 <HAL_TIM_ConfigClockSource+0xe0>
 8004a08:	2b60      	cmp	r3, #96	; 0x60
 8004a0a:	d041      	beq.n	8004a90 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004a0c:	e06a      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004a0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a12:	d066      	beq.n	8004ae2 <HAL_TIM_ConfigClockSource+0x152>
 8004a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a18:	d017      	beq.n	8004a4a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004a1a:	e063      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6818      	ldr	r0, [r3, #0]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	6899      	ldr	r1, [r3, #8]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f000 f9ac 	bl	8004d88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a3e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	609a      	str	r2, [r3, #8]
      break;
 8004a48:	e04c      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	6899      	ldr	r1, [r3, #8]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685a      	ldr	r2, [r3, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f000 f995 	bl	8004d88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a6c:	609a      	str	r2, [r3, #8]
      break;
 8004a6e:	e039      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	6859      	ldr	r1, [r3, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f000 f909 	bl	8004c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2150      	movs	r1, #80	; 0x50
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 f962 	bl	8004d52 <TIM_ITRx_SetConfig>
      break;
 8004a8e:	e029      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	6859      	ldr	r1, [r3, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f000 f928 	bl	8004cf2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2160      	movs	r1, #96	; 0x60
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 f952 	bl	8004d52 <TIM_ITRx_SetConfig>
      break;
 8004aae:	e019      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6818      	ldr	r0, [r3, #0]
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	6859      	ldr	r1, [r3, #4]
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	461a      	mov	r2, r3
 8004abe:	f000 f8e9 	bl	8004c94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2140      	movs	r1, #64	; 0x40
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 f942 	bl	8004d52 <TIM_ITRx_SetConfig>
      break;
 8004ace:	e009      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f000 f939 	bl	8004d52 <TIM_ITRx_SetConfig>
      break;
 8004ae0:	e000      	b.n	8004ae4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004ae2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	fffeff88 	.word	0xfffeff88

08004b04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a40      	ldr	r2, [pc, #256]	; (8004c68 <TIM_Base_SetConfig+0x114>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d013      	beq.n	8004b94 <TIM_Base_SetConfig+0x40>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b72:	d00f      	beq.n	8004b94 <TIM_Base_SetConfig+0x40>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a3d      	ldr	r2, [pc, #244]	; (8004c6c <TIM_Base_SetConfig+0x118>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d00b      	beq.n	8004b94 <TIM_Base_SetConfig+0x40>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a3c      	ldr	r2, [pc, #240]	; (8004c70 <TIM_Base_SetConfig+0x11c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d007      	beq.n	8004b94 <TIM_Base_SetConfig+0x40>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a3b      	ldr	r2, [pc, #236]	; (8004c74 <TIM_Base_SetConfig+0x120>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d003      	beq.n	8004b94 <TIM_Base_SetConfig+0x40>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a3a      	ldr	r2, [pc, #232]	; (8004c78 <TIM_Base_SetConfig+0x124>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d108      	bne.n	8004ba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a2f      	ldr	r2, [pc, #188]	; (8004c68 <TIM_Base_SetConfig+0x114>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d02b      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb4:	d027      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a2c      	ldr	r2, [pc, #176]	; (8004c6c <TIM_Base_SetConfig+0x118>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d023      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a2b      	ldr	r2, [pc, #172]	; (8004c70 <TIM_Base_SetConfig+0x11c>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d01f      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2a      	ldr	r2, [pc, #168]	; (8004c74 <TIM_Base_SetConfig+0x120>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d01b      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a29      	ldr	r2, [pc, #164]	; (8004c78 <TIM_Base_SetConfig+0x124>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d017      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a28      	ldr	r2, [pc, #160]	; (8004c7c <TIM_Base_SetConfig+0x128>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d013      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a27      	ldr	r2, [pc, #156]	; (8004c80 <TIM_Base_SetConfig+0x12c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d00f      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a26      	ldr	r2, [pc, #152]	; (8004c84 <TIM_Base_SetConfig+0x130>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00b      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a25      	ldr	r2, [pc, #148]	; (8004c88 <TIM_Base_SetConfig+0x134>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d007      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a24      	ldr	r2, [pc, #144]	; (8004c8c <TIM_Base_SetConfig+0x138>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d003      	beq.n	8004c06 <TIM_Base_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a23      	ldr	r2, [pc, #140]	; (8004c90 <TIM_Base_SetConfig+0x13c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d108      	bne.n	8004c18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a0a      	ldr	r2, [pc, #40]	; (8004c68 <TIM_Base_SetConfig+0x114>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d003      	beq.n	8004c4c <TIM_Base_SetConfig+0xf8>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a0c      	ldr	r2, [pc, #48]	; (8004c78 <TIM_Base_SetConfig+0x124>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d103      	bne.n	8004c54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	615a      	str	r2, [r3, #20]
}
 8004c5a:	bf00      	nop
 8004c5c:	3714      	adds	r7, #20
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	40010000 	.word	0x40010000
 8004c6c:	40000400 	.word	0x40000400
 8004c70:	40000800 	.word	0x40000800
 8004c74:	40000c00 	.word	0x40000c00
 8004c78:	40010400 	.word	0x40010400
 8004c7c:	40014000 	.word	0x40014000
 8004c80:	40014400 	.word	0x40014400
 8004c84:	40014800 	.word	0x40014800
 8004c88:	40001800 	.word	0x40001800
 8004c8c:	40001c00 	.word	0x40001c00
 8004c90:	40002000 	.word	0x40002000

08004c94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	f023 0201 	bic.w	r2, r3, #1
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f023 030a 	bic.w	r3, r3, #10
 8004cd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	621a      	str	r2, [r3, #32]
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b087      	sub	sp, #28
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	60f8      	str	r0, [r7, #12]
 8004cfa:	60b9      	str	r1, [r7, #8]
 8004cfc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	f023 0210 	bic.w	r2, r3, #16
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	031b      	lsls	r3, r3, #12
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	621a      	str	r2, [r3, #32]
}
 8004d46:	bf00      	nop
 8004d48:	371c      	adds	r7, #28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b085      	sub	sp, #20
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	f043 0307 	orr.w	r3, r3, #7
 8004d74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	609a      	str	r2, [r3, #8]
}
 8004d7c:	bf00      	nop
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b087      	sub	sp, #28
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004da2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	021a      	lsls	r2, r3, #8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	431a      	orrs	r2, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	609a      	str	r2, [r3, #8]
}
 8004dbc:	bf00      	nop
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e06d      	b.n	8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a30      	ldr	r2, [pc, #192]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d004      	beq.n	8004e14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a2f      	ldr	r2, [pc, #188]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d108      	bne.n	8004e26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a20      	ldr	r2, [pc, #128]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d022      	beq.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e52:	d01d      	beq.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a1d      	ldr	r2, [pc, #116]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d018      	beq.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a1c      	ldr	r2, [pc, #112]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d013      	beq.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a1a      	ldr	r2, [pc, #104]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d00e      	beq.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a15      	ldr	r2, [pc, #84]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d009      	beq.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a16      	ldr	r2, [pc, #88]	; (8004edc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d004      	beq.n	8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d10c      	bne.n	8004eaa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	40010400 	.word	0x40010400
 8004ed0:	40000400 	.word	0x40000400
 8004ed4:	40000800 	.word	0x40000800
 8004ed8:	40000c00 	.word	0x40000c00
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40001800 	.word	0x40001800

08004ee4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e040      	b.n	8004fb4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fb fef2 	bl	8000d2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2224      	movs	r2, #36	; 0x24
 8004f4c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0201 	bic.w	r2, r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f82c 	bl	8004fbc <UART_SetConfig>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d101      	bne.n	8004f6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e022      	b.n	8004fb4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 faca 	bl	8005510 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0201 	orr.w	r2, r2, #1
 8004faa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 fb51 	bl	8005654 <UART_CheckIdleState>
 8004fb2:	4603      	mov	r3, r0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	431a      	orrs	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69db      	ldr	r3, [r3, #28]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	4bb1      	ldr	r3, [pc, #708]	; (80052b0 <UART_SetConfig+0x2f4>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	6812      	ldr	r2, [r2, #0]
 8004ff2:	6939      	ldr	r1, [r7, #16]
 8004ff4:	430b      	orrs	r3, r1
 8004ff6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	430a      	orrs	r2, r1
 8005030:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a9f      	ldr	r2, [pc, #636]	; (80052b4 <UART_SetConfig+0x2f8>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d121      	bne.n	8005080 <UART_SetConfig+0xc4>
 800503c:	4b9e      	ldr	r3, [pc, #632]	; (80052b8 <UART_SetConfig+0x2fc>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b03      	cmp	r3, #3
 8005048:	d816      	bhi.n	8005078 <UART_SetConfig+0xbc>
 800504a:	a201      	add	r2, pc, #4	; (adr r2, 8005050 <UART_SetConfig+0x94>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	08005061 	.word	0x08005061
 8005054:	0800506d 	.word	0x0800506d
 8005058:	08005067 	.word	0x08005067
 800505c:	08005073 	.word	0x08005073
 8005060:	2301      	movs	r3, #1
 8005062:	77fb      	strb	r3, [r7, #31]
 8005064:	e151      	b.n	800530a <UART_SetConfig+0x34e>
 8005066:	2302      	movs	r3, #2
 8005068:	77fb      	strb	r3, [r7, #31]
 800506a:	e14e      	b.n	800530a <UART_SetConfig+0x34e>
 800506c:	2304      	movs	r3, #4
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e14b      	b.n	800530a <UART_SetConfig+0x34e>
 8005072:	2308      	movs	r3, #8
 8005074:	77fb      	strb	r3, [r7, #31]
 8005076:	e148      	b.n	800530a <UART_SetConfig+0x34e>
 8005078:	2310      	movs	r3, #16
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	bf00      	nop
 800507e:	e144      	b.n	800530a <UART_SetConfig+0x34e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a8d      	ldr	r2, [pc, #564]	; (80052bc <UART_SetConfig+0x300>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d134      	bne.n	80050f4 <UART_SetConfig+0x138>
 800508a:	4b8b      	ldr	r3, [pc, #556]	; (80052b8 <UART_SetConfig+0x2fc>)
 800508c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005090:	f003 030c 	and.w	r3, r3, #12
 8005094:	2b0c      	cmp	r3, #12
 8005096:	d829      	bhi.n	80050ec <UART_SetConfig+0x130>
 8005098:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <UART_SetConfig+0xe4>)
 800509a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509e:	bf00      	nop
 80050a0:	080050d5 	.word	0x080050d5
 80050a4:	080050ed 	.word	0x080050ed
 80050a8:	080050ed 	.word	0x080050ed
 80050ac:	080050ed 	.word	0x080050ed
 80050b0:	080050e1 	.word	0x080050e1
 80050b4:	080050ed 	.word	0x080050ed
 80050b8:	080050ed 	.word	0x080050ed
 80050bc:	080050ed 	.word	0x080050ed
 80050c0:	080050db 	.word	0x080050db
 80050c4:	080050ed 	.word	0x080050ed
 80050c8:	080050ed 	.word	0x080050ed
 80050cc:	080050ed 	.word	0x080050ed
 80050d0:	080050e7 	.word	0x080050e7
 80050d4:	2300      	movs	r3, #0
 80050d6:	77fb      	strb	r3, [r7, #31]
 80050d8:	e117      	b.n	800530a <UART_SetConfig+0x34e>
 80050da:	2302      	movs	r3, #2
 80050dc:	77fb      	strb	r3, [r7, #31]
 80050de:	e114      	b.n	800530a <UART_SetConfig+0x34e>
 80050e0:	2304      	movs	r3, #4
 80050e2:	77fb      	strb	r3, [r7, #31]
 80050e4:	e111      	b.n	800530a <UART_SetConfig+0x34e>
 80050e6:	2308      	movs	r3, #8
 80050e8:	77fb      	strb	r3, [r7, #31]
 80050ea:	e10e      	b.n	800530a <UART_SetConfig+0x34e>
 80050ec:	2310      	movs	r3, #16
 80050ee:	77fb      	strb	r3, [r7, #31]
 80050f0:	bf00      	nop
 80050f2:	e10a      	b.n	800530a <UART_SetConfig+0x34e>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a71      	ldr	r2, [pc, #452]	; (80052c0 <UART_SetConfig+0x304>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d120      	bne.n	8005140 <UART_SetConfig+0x184>
 80050fe:	4b6e      	ldr	r3, [pc, #440]	; (80052b8 <UART_SetConfig+0x2fc>)
 8005100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005104:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005108:	2b10      	cmp	r3, #16
 800510a:	d00f      	beq.n	800512c <UART_SetConfig+0x170>
 800510c:	2b10      	cmp	r3, #16
 800510e:	d802      	bhi.n	8005116 <UART_SetConfig+0x15a>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <UART_SetConfig+0x164>
 8005114:	e010      	b.n	8005138 <UART_SetConfig+0x17c>
 8005116:	2b20      	cmp	r3, #32
 8005118:	d005      	beq.n	8005126 <UART_SetConfig+0x16a>
 800511a:	2b30      	cmp	r3, #48	; 0x30
 800511c:	d009      	beq.n	8005132 <UART_SetConfig+0x176>
 800511e:	e00b      	b.n	8005138 <UART_SetConfig+0x17c>
 8005120:	2300      	movs	r3, #0
 8005122:	77fb      	strb	r3, [r7, #31]
 8005124:	e0f1      	b.n	800530a <UART_SetConfig+0x34e>
 8005126:	2302      	movs	r3, #2
 8005128:	77fb      	strb	r3, [r7, #31]
 800512a:	e0ee      	b.n	800530a <UART_SetConfig+0x34e>
 800512c:	2304      	movs	r3, #4
 800512e:	77fb      	strb	r3, [r7, #31]
 8005130:	e0eb      	b.n	800530a <UART_SetConfig+0x34e>
 8005132:	2308      	movs	r3, #8
 8005134:	77fb      	strb	r3, [r7, #31]
 8005136:	e0e8      	b.n	800530a <UART_SetConfig+0x34e>
 8005138:	2310      	movs	r3, #16
 800513a:	77fb      	strb	r3, [r7, #31]
 800513c:	bf00      	nop
 800513e:	e0e4      	b.n	800530a <UART_SetConfig+0x34e>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a5f      	ldr	r2, [pc, #380]	; (80052c4 <UART_SetConfig+0x308>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d120      	bne.n	800518c <UART_SetConfig+0x1d0>
 800514a:	4b5b      	ldr	r3, [pc, #364]	; (80052b8 <UART_SetConfig+0x2fc>)
 800514c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005150:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d00f      	beq.n	8005178 <UART_SetConfig+0x1bc>
 8005158:	2b40      	cmp	r3, #64	; 0x40
 800515a:	d802      	bhi.n	8005162 <UART_SetConfig+0x1a6>
 800515c:	2b00      	cmp	r3, #0
 800515e:	d005      	beq.n	800516c <UART_SetConfig+0x1b0>
 8005160:	e010      	b.n	8005184 <UART_SetConfig+0x1c8>
 8005162:	2b80      	cmp	r3, #128	; 0x80
 8005164:	d005      	beq.n	8005172 <UART_SetConfig+0x1b6>
 8005166:	2bc0      	cmp	r3, #192	; 0xc0
 8005168:	d009      	beq.n	800517e <UART_SetConfig+0x1c2>
 800516a:	e00b      	b.n	8005184 <UART_SetConfig+0x1c8>
 800516c:	2300      	movs	r3, #0
 800516e:	77fb      	strb	r3, [r7, #31]
 8005170:	e0cb      	b.n	800530a <UART_SetConfig+0x34e>
 8005172:	2302      	movs	r3, #2
 8005174:	77fb      	strb	r3, [r7, #31]
 8005176:	e0c8      	b.n	800530a <UART_SetConfig+0x34e>
 8005178:	2304      	movs	r3, #4
 800517a:	77fb      	strb	r3, [r7, #31]
 800517c:	e0c5      	b.n	800530a <UART_SetConfig+0x34e>
 800517e:	2308      	movs	r3, #8
 8005180:	77fb      	strb	r3, [r7, #31]
 8005182:	e0c2      	b.n	800530a <UART_SetConfig+0x34e>
 8005184:	2310      	movs	r3, #16
 8005186:	77fb      	strb	r3, [r7, #31]
 8005188:	bf00      	nop
 800518a:	e0be      	b.n	800530a <UART_SetConfig+0x34e>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a4d      	ldr	r2, [pc, #308]	; (80052c8 <UART_SetConfig+0x30c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d124      	bne.n	80051e0 <UART_SetConfig+0x224>
 8005196:	4b48      	ldr	r3, [pc, #288]	; (80052b8 <UART_SetConfig+0x2fc>)
 8005198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051a4:	d012      	beq.n	80051cc <UART_SetConfig+0x210>
 80051a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051aa:	d802      	bhi.n	80051b2 <UART_SetConfig+0x1f6>
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d007      	beq.n	80051c0 <UART_SetConfig+0x204>
 80051b0:	e012      	b.n	80051d8 <UART_SetConfig+0x21c>
 80051b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b6:	d006      	beq.n	80051c6 <UART_SetConfig+0x20a>
 80051b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051bc:	d009      	beq.n	80051d2 <UART_SetConfig+0x216>
 80051be:	e00b      	b.n	80051d8 <UART_SetConfig+0x21c>
 80051c0:	2300      	movs	r3, #0
 80051c2:	77fb      	strb	r3, [r7, #31]
 80051c4:	e0a1      	b.n	800530a <UART_SetConfig+0x34e>
 80051c6:	2302      	movs	r3, #2
 80051c8:	77fb      	strb	r3, [r7, #31]
 80051ca:	e09e      	b.n	800530a <UART_SetConfig+0x34e>
 80051cc:	2304      	movs	r3, #4
 80051ce:	77fb      	strb	r3, [r7, #31]
 80051d0:	e09b      	b.n	800530a <UART_SetConfig+0x34e>
 80051d2:	2308      	movs	r3, #8
 80051d4:	77fb      	strb	r3, [r7, #31]
 80051d6:	e098      	b.n	800530a <UART_SetConfig+0x34e>
 80051d8:	2310      	movs	r3, #16
 80051da:	77fb      	strb	r3, [r7, #31]
 80051dc:	bf00      	nop
 80051de:	e094      	b.n	800530a <UART_SetConfig+0x34e>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a39      	ldr	r2, [pc, #228]	; (80052cc <UART_SetConfig+0x310>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d124      	bne.n	8005234 <UART_SetConfig+0x278>
 80051ea:	4b33      	ldr	r3, [pc, #204]	; (80052b8 <UART_SetConfig+0x2fc>)
 80051ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f8:	d012      	beq.n	8005220 <UART_SetConfig+0x264>
 80051fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051fe:	d802      	bhi.n	8005206 <UART_SetConfig+0x24a>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d007      	beq.n	8005214 <UART_SetConfig+0x258>
 8005204:	e012      	b.n	800522c <UART_SetConfig+0x270>
 8005206:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800520a:	d006      	beq.n	800521a <UART_SetConfig+0x25e>
 800520c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005210:	d009      	beq.n	8005226 <UART_SetConfig+0x26a>
 8005212:	e00b      	b.n	800522c <UART_SetConfig+0x270>
 8005214:	2301      	movs	r3, #1
 8005216:	77fb      	strb	r3, [r7, #31]
 8005218:	e077      	b.n	800530a <UART_SetConfig+0x34e>
 800521a:	2302      	movs	r3, #2
 800521c:	77fb      	strb	r3, [r7, #31]
 800521e:	e074      	b.n	800530a <UART_SetConfig+0x34e>
 8005220:	2304      	movs	r3, #4
 8005222:	77fb      	strb	r3, [r7, #31]
 8005224:	e071      	b.n	800530a <UART_SetConfig+0x34e>
 8005226:	2308      	movs	r3, #8
 8005228:	77fb      	strb	r3, [r7, #31]
 800522a:	e06e      	b.n	800530a <UART_SetConfig+0x34e>
 800522c:	2310      	movs	r3, #16
 800522e:	77fb      	strb	r3, [r7, #31]
 8005230:	bf00      	nop
 8005232:	e06a      	b.n	800530a <UART_SetConfig+0x34e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a25      	ldr	r2, [pc, #148]	; (80052d0 <UART_SetConfig+0x314>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d124      	bne.n	8005288 <UART_SetConfig+0x2cc>
 800523e:	4b1e      	ldr	r3, [pc, #120]	; (80052b8 <UART_SetConfig+0x2fc>)
 8005240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005244:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524c:	d012      	beq.n	8005274 <UART_SetConfig+0x2b8>
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005252:	d802      	bhi.n	800525a <UART_SetConfig+0x29e>
 8005254:	2b00      	cmp	r3, #0
 8005256:	d007      	beq.n	8005268 <UART_SetConfig+0x2ac>
 8005258:	e012      	b.n	8005280 <UART_SetConfig+0x2c4>
 800525a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800525e:	d006      	beq.n	800526e <UART_SetConfig+0x2b2>
 8005260:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005264:	d009      	beq.n	800527a <UART_SetConfig+0x2be>
 8005266:	e00b      	b.n	8005280 <UART_SetConfig+0x2c4>
 8005268:	2300      	movs	r3, #0
 800526a:	77fb      	strb	r3, [r7, #31]
 800526c:	e04d      	b.n	800530a <UART_SetConfig+0x34e>
 800526e:	2302      	movs	r3, #2
 8005270:	77fb      	strb	r3, [r7, #31]
 8005272:	e04a      	b.n	800530a <UART_SetConfig+0x34e>
 8005274:	2304      	movs	r3, #4
 8005276:	77fb      	strb	r3, [r7, #31]
 8005278:	e047      	b.n	800530a <UART_SetConfig+0x34e>
 800527a:	2308      	movs	r3, #8
 800527c:	77fb      	strb	r3, [r7, #31]
 800527e:	e044      	b.n	800530a <UART_SetConfig+0x34e>
 8005280:	2310      	movs	r3, #16
 8005282:	77fb      	strb	r3, [r7, #31]
 8005284:	bf00      	nop
 8005286:	e040      	b.n	800530a <UART_SetConfig+0x34e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a11      	ldr	r2, [pc, #68]	; (80052d4 <UART_SetConfig+0x318>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d139      	bne.n	8005306 <UART_SetConfig+0x34a>
 8005292:	4b09      	ldr	r3, [pc, #36]	; (80052b8 <UART_SetConfig+0x2fc>)
 8005294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005298:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800529c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052a0:	d027      	beq.n	80052f2 <UART_SetConfig+0x336>
 80052a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052a6:	d817      	bhi.n	80052d8 <UART_SetConfig+0x31c>
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01c      	beq.n	80052e6 <UART_SetConfig+0x32a>
 80052ac:	e027      	b.n	80052fe <UART_SetConfig+0x342>
 80052ae:	bf00      	nop
 80052b0:	efff69f3 	.word	0xefff69f3
 80052b4:	40011000 	.word	0x40011000
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40004400 	.word	0x40004400
 80052c0:	40004800 	.word	0x40004800
 80052c4:	40004c00 	.word	0x40004c00
 80052c8:	40005000 	.word	0x40005000
 80052cc:	40011400 	.word	0x40011400
 80052d0:	40007800 	.word	0x40007800
 80052d4:	40007c00 	.word	0x40007c00
 80052d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052dc:	d006      	beq.n	80052ec <UART_SetConfig+0x330>
 80052de:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80052e2:	d009      	beq.n	80052f8 <UART_SetConfig+0x33c>
 80052e4:	e00b      	b.n	80052fe <UART_SetConfig+0x342>
 80052e6:	2300      	movs	r3, #0
 80052e8:	77fb      	strb	r3, [r7, #31]
 80052ea:	e00e      	b.n	800530a <UART_SetConfig+0x34e>
 80052ec:	2302      	movs	r3, #2
 80052ee:	77fb      	strb	r3, [r7, #31]
 80052f0:	e00b      	b.n	800530a <UART_SetConfig+0x34e>
 80052f2:	2304      	movs	r3, #4
 80052f4:	77fb      	strb	r3, [r7, #31]
 80052f6:	e008      	b.n	800530a <UART_SetConfig+0x34e>
 80052f8:	2308      	movs	r3, #8
 80052fa:	77fb      	strb	r3, [r7, #31]
 80052fc:	e005      	b.n	800530a <UART_SetConfig+0x34e>
 80052fe:	2310      	movs	r3, #16
 8005300:	77fb      	strb	r3, [r7, #31]
 8005302:	bf00      	nop
 8005304:	e001      	b.n	800530a <UART_SetConfig+0x34e>
 8005306:	2310      	movs	r3, #16
 8005308:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005312:	d17f      	bne.n	8005414 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8005314:	7ffb      	ldrb	r3, [r7, #31]
 8005316:	2b08      	cmp	r3, #8
 8005318:	d85c      	bhi.n	80053d4 <UART_SetConfig+0x418>
 800531a:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <UART_SetConfig+0x364>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	08005345 	.word	0x08005345
 8005324:	08005365 	.word	0x08005365
 8005328:	08005385 	.word	0x08005385
 800532c:	080053d5 	.word	0x080053d5
 8005330:	0800539d 	.word	0x0800539d
 8005334:	080053d5 	.word	0x080053d5
 8005338:	080053d5 	.word	0x080053d5
 800533c:	080053d5 	.word	0x080053d5
 8005340:	080053bd 	.word	0x080053bd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005344:	f7fe fd2e 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8005348:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	005a      	lsls	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	085b      	lsrs	r3, r3, #1
 8005354:	441a      	add	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	fbb2 f3f3 	udiv	r3, r2, r3
 800535e:	b29b      	uxth	r3, r3
 8005360:	61bb      	str	r3, [r7, #24]
        break;
 8005362:	e03a      	b.n	80053da <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005364:	f7fe fd32 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005368:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	005a      	lsls	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	085b      	lsrs	r3, r3, #1
 8005374:	441a      	add	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	fbb2 f3f3 	udiv	r3, r2, r3
 800537e:	b29b      	uxth	r3, r3
 8005380:	61bb      	str	r3, [r7, #24]
        break;
 8005382:	e02a      	b.n	80053da <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	085a      	lsrs	r2, r3, #1
 800538a:	4b5f      	ldr	r3, [pc, #380]	; (8005508 <UART_SetConfig+0x54c>)
 800538c:	4413      	add	r3, r2
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6852      	ldr	r2, [r2, #4]
 8005392:	fbb3 f3f2 	udiv	r3, r3, r2
 8005396:	b29b      	uxth	r3, r3
 8005398:	61bb      	str	r3, [r7, #24]
        break;
 800539a:	e01e      	b.n	80053da <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800539c:	f7fe fc1e 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 80053a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	005a      	lsls	r2, r3, #1
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	085b      	lsrs	r3, r3, #1
 80053ac:	441a      	add	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	61bb      	str	r3, [r7, #24]
        break;
 80053ba:	e00e      	b.n	80053da <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	085b      	lsrs	r3, r3, #1
 80053c2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	61bb      	str	r3, [r7, #24]
        break;
 80053d2:	e002      	b.n	80053da <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	75fb      	strb	r3, [r7, #23]
        break;
 80053d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	2b0f      	cmp	r3, #15
 80053de:	d916      	bls.n	800540e <UART_SetConfig+0x452>
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e6:	d212      	bcs.n	800540e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f023 030f 	bic.w	r3, r3, #15
 80053f0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	085b      	lsrs	r3, r3, #1
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	897b      	ldrh	r3, [r7, #10]
 8005400:	4313      	orrs	r3, r2
 8005402:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	897a      	ldrh	r2, [r7, #10]
 800540a:	60da      	str	r2, [r3, #12]
 800540c:	e070      	b.n	80054f0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	75fb      	strb	r3, [r7, #23]
 8005412:	e06d      	b.n	80054f0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8005414:	7ffb      	ldrb	r3, [r7, #31]
 8005416:	2b08      	cmp	r3, #8
 8005418:	d859      	bhi.n	80054ce <UART_SetConfig+0x512>
 800541a:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <UART_SetConfig+0x464>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005445 	.word	0x08005445
 8005424:	08005463 	.word	0x08005463
 8005428:	08005481 	.word	0x08005481
 800542c:	080054cf 	.word	0x080054cf
 8005430:	08005499 	.word	0x08005499
 8005434:	080054cf 	.word	0x080054cf
 8005438:	080054cf 	.word	0x080054cf
 800543c:	080054cf 	.word	0x080054cf
 8005440:	080054b7 	.word	0x080054b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005444:	f7fe fcae 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8005448:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	085a      	lsrs	r2, r3, #1
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	441a      	add	r2, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	fbb2 f3f3 	udiv	r3, r2, r3
 800545c:	b29b      	uxth	r3, r3
 800545e:	61bb      	str	r3, [r7, #24]
        break;
 8005460:	e038      	b.n	80054d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005462:	f7fe fcb3 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005466:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	085a      	lsrs	r2, r3, #1
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	441a      	add	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	fbb2 f3f3 	udiv	r3, r2, r3
 800547a:	b29b      	uxth	r3, r3
 800547c:	61bb      	str	r3, [r7, #24]
        break;
 800547e:	e029      	b.n	80054d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	085a      	lsrs	r2, r3, #1
 8005486:	4b21      	ldr	r3, [pc, #132]	; (800550c <UART_SetConfig+0x550>)
 8005488:	4413      	add	r3, r2
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	6852      	ldr	r2, [r2, #4]
 800548e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005492:	b29b      	uxth	r3, r3
 8005494:	61bb      	str	r3, [r7, #24]
        break;
 8005496:	e01d      	b.n	80054d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005498:	f7fe fba0 	bl	8003bdc <HAL_RCC_GetSysClockFreq>
 800549c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	085a      	lsrs	r2, r3, #1
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	441a      	add	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	61bb      	str	r3, [r7, #24]
        break;
 80054b4:	e00e      	b.n	80054d4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	085b      	lsrs	r3, r3, #1
 80054bc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	61bb      	str	r3, [r7, #24]
        break;
 80054cc:	e002      	b.n	80054d4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	75fb      	strb	r3, [r7, #23]
        break;
 80054d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	2b0f      	cmp	r3, #15
 80054d8:	d908      	bls.n	80054ec <UART_SetConfig+0x530>
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054e0:	d204      	bcs.n	80054ec <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	60da      	str	r2, [r3, #12]
 80054ea:	e001      	b.n	80054f0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80054fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3720      	adds	r7, #32
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	01e84800 	.word	0x01e84800
 800550c:	00f42400 	.word	0x00f42400

08005510 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00a      	beq.n	800553a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	430a      	orrs	r2, r1
 8005538:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00a      	beq.n	800555c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	430a      	orrs	r2, r1
 800555a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00a      	beq.n	800557e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	f003 0308 	and.w	r3, r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00a      	beq.n	80055a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00a      	beq.n	80055c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d01a      	beq.n	8005626 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800560e:	d10a      	bne.n	8005626 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	430a      	orrs	r2, r1
 8005646:	605a      	str	r2, [r3, #4]
  }
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af02      	add	r7, sp, #8
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005662:	f7fb feff 	bl	8001464 <HAL_GetTick>
 8005666:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b08      	cmp	r3, #8
 8005674:	d10e      	bne.n	8005694 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005676:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f82a 	bl	80056de <UART_WaitOnFlagUntilTimeout>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e020      	b.n	80056d6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d10e      	bne.n	80056c0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f814 	bl	80056de <UART_WaitOnFlagUntilTimeout>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e00a      	b.n	80056d6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2220      	movs	r2, #32
 80056c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2220      	movs	r2, #32
 80056ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b084      	sub	sp, #16
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	603b      	str	r3, [r7, #0]
 80056ea:	4613      	mov	r3, r2
 80056ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ee:	e05d      	b.n	80057ac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056f6:	d059      	beq.n	80057ac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056f8:	f7fb feb4 	bl	8001464 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	429a      	cmp	r2, r3
 8005706:	d302      	bcc.n	800570e <UART_WaitOnFlagUntilTimeout+0x30>
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d11b      	bne.n	8005746 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800571c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0201 	bic.w	r2, r2, #1
 800572c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2220      	movs	r2, #32
 8005732:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e042      	b.n	80057cc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0304 	and.w	r3, r3, #4
 8005750:	2b00      	cmp	r3, #0
 8005752:	d02b      	beq.n	80057ac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800575e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005762:	d123      	bne.n	80057ac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800576c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800577c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0201 	bic.w	r2, r2, #1
 800578c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2220      	movs	r2, #32
 8005792:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2220      	movs	r2, #32
 8005798:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2220      	movs	r2, #32
 800579e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e00f      	b.n	80057cc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	69da      	ldr	r2, [r3, #28]
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	4013      	ands	r3, r2
 80057b6:	68ba      	ldr	r2, [r7, #8]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	bf0c      	ite	eq
 80057bc:	2301      	moveq	r3, #1
 80057be:	2300      	movne	r3, #0
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	79fb      	ldrb	r3, [r7, #7]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d092      	beq.n	80056f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057d4:	b084      	sub	sp, #16
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b084      	sub	sp, #16
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	f107 001c 	add.w	r0, r7, #28
 80057e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d120      	bne.n	800582e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68da      	ldr	r2, [r3, #12]
 80057fc:	4b20      	ldr	r3, [pc, #128]	; (8005880 <USB_CoreInit+0xac>)
 80057fe:	4013      	ands	r3, r2
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005812:	2b01      	cmp	r3, #1
 8005814:	d105      	bne.n	8005822 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 fa52 	bl	8005ccc <USB_CoreReset>
 8005828:	4603      	mov	r3, r0
 800582a:	73fb      	strb	r3, [r7, #15]
 800582c:	e010      	b.n	8005850 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 fa46 	bl	8005ccc <USB_CoreReset>
 8005840:	4603      	mov	r3, r0
 8005842:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	2b01      	cmp	r3, #1
 8005854:	d10b      	bne.n	800586e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f043 0206 	orr.w	r2, r3, #6
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f043 0220 	orr.w	r2, r3, #32
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800586e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800587a:	b004      	add	sp, #16
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	ffbdffbf 	.word	0xffbdffbf

08005884 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f023 0201 	bic.w	r2, r3, #1
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	460b      	mov	r3, r1
 80058b0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058be:	78fb      	ldrb	r3, [r7, #3]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d106      	bne.n	80058d2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	60da      	str	r2, [r3, #12]
 80058d0:	e00b      	b.n	80058ea <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80058d2:	78fb      	ldrb	r3, [r7, #3]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d106      	bne.n	80058e6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	60da      	str	r2, [r3, #12]
 80058e4:	e001      	b.n	80058ea <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e003      	b.n	80058f2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80058ea:	2032      	movs	r0, #50	; 0x32
 80058ec:	f7fb fdc6 	bl	800147c <HAL_Delay>

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058fc:	b084      	sub	sp, #16
 80058fe:	b580      	push	{r7, lr}
 8005900:	b086      	sub	sp, #24
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
 8005906:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800590a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005916:	2300      	movs	r3, #0
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	e009      	b.n	8005930 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	3340      	adds	r3, #64	; 0x40
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	4413      	add	r3, r2
 8005926:	2200      	movs	r2, #0
 8005928:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	3301      	adds	r3, #1
 800592e:	613b      	str	r3, [r7, #16]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2b0e      	cmp	r3, #14
 8005934:	d9f2      	bls.n	800591c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005938:	2b00      	cmp	r3, #0
 800593a:	d11c      	bne.n	8005976 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800594a:	f043 0302 	orr.w	r3, r3, #2
 800594e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005954:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	601a      	str	r2, [r3, #0]
 8005974:	e005      	b.n	8005982 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005988:	461a      	mov	r2, r3
 800598a:	2300      	movs	r3, #0
 800598c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005994:	4619      	mov	r1, r3
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599c:	461a      	mov	r2, r3
 800599e:	680b      	ldr	r3, [r1, #0]
 80059a0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d10c      	bne.n	80059c2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80059a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d104      	bne.n	80059b8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80059ae:	2100      	movs	r1, #0
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f959 	bl	8005c68 <USB_SetDevSpeed>
 80059b6:	e018      	b.n	80059ea <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80059b8:	2101      	movs	r1, #1
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f954 	bl	8005c68 <USB_SetDevSpeed>
 80059c0:	e013      	b.n	80059ea <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	2b03      	cmp	r3, #3
 80059c6:	d10c      	bne.n	80059e2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d104      	bne.n	80059d8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80059ce:	2100      	movs	r1, #0
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f949 	bl	8005c68 <USB_SetDevSpeed>
 80059d6:	e008      	b.n	80059ea <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80059d8:	2101      	movs	r1, #1
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f944 	bl	8005c68 <USB_SetDevSpeed>
 80059e0:	e003      	b.n	80059ea <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059e2:	2103      	movs	r1, #3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 f93f 	bl	8005c68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059ea:	2110      	movs	r1, #16
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f8f3 	bl	8005bd8 <USB_FlushTxFifo>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d001      	beq.n	80059fc <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f911 	bl	8005c24 <USB_FlushRxFifo>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a12:	461a      	mov	r2, r3
 8005a14:	2300      	movs	r3, #0
 8005a16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	461a      	mov	r2, r3
 8005a20:	2300      	movs	r3, #0
 8005a22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a30:	2300      	movs	r3, #0
 8005a32:	613b      	str	r3, [r7, #16]
 8005a34:	e043      	b.n	8005abe <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	015a      	lsls	r2, r3, #5
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4413      	add	r3, r2
 8005a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a4c:	d118      	bne.n	8005a80 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10a      	bne.n	8005a6a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	015a      	lsls	r2, r3, #5
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a60:	461a      	mov	r2, r3
 8005a62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	e013      	b.n	8005a92 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a76:	461a      	mov	r2, r3
 8005a78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	e008      	b.n	8005a92 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	2300      	movs	r3, #0
 8005a90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ab6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	3301      	adds	r3, #1
 8005abc:	613b      	str	r3, [r7, #16]
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d3b7      	bcc.n	8005a36 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	613b      	str	r3, [r7, #16]
 8005aca:	e043      	b.n	8005b54 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ae2:	d118      	bne.n	8005b16 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10a      	bne.n	8005b00 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af6:	461a      	mov	r2, r3
 8005af8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	e013      	b.n	8005b28 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	e008      	b.n	8005b28 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b22:	461a      	mov	r2, r3
 8005b24:	2300      	movs	r3, #0
 8005b26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b34:	461a      	mov	r2, r3
 8005b36:	2300      	movs	r3, #0
 8005b38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	015a      	lsls	r2, r3, #5
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4413      	add	r3, r2
 8005b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b46:	461a      	mov	r2, r3
 8005b48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	3301      	adds	r3, #1
 8005b52:	613b      	str	r3, [r7, #16]
 8005b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d3b7      	bcc.n	8005acc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d105      	bne.n	8005b90 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	f043 0210 	orr.w	r2, r3, #16
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	699a      	ldr	r2, [r3, #24]
 8005b94:	4b0e      	ldr	r3, [pc, #56]	; (8005bd0 <USB_DevInit+0x2d4>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d005      	beq.n	8005bae <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f043 0208 	orr.w	r2, r3, #8
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d105      	bne.n	8005bc0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699a      	ldr	r2, [r3, #24]
 8005bb8:	4b06      	ldr	r3, [pc, #24]	; (8005bd4 <USB_DevInit+0x2d8>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bcc:	b004      	add	sp, #16
 8005bce:	4770      	bx	lr
 8005bd0:	803c3800 	.word	0x803c3800
 8005bd4:	40000004 	.word	0x40000004

08005bd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	019b      	lsls	r3, r3, #6
 8005bea:	f043 0220 	orr.w	r2, r3, #32
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	60fb      	str	r3, [r7, #12]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <USB_FlushTxFifo+0x48>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d901      	bls.n	8005c04 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e006      	b.n	8005c12 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	2b20      	cmp	r3, #32
 8005c0e:	d0f0      	beq.n	8005bf2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	00030d40 	.word	0x00030d40

08005c24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2210      	movs	r2, #16
 8005c34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a09      	ldr	r2, [pc, #36]	; (8005c64 <USB_FlushRxFifo+0x40>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d901      	bls.n	8005c48 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e006      	b.n	8005c56 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f003 0310 	and.w	r3, r3, #16
 8005c50:	2b10      	cmp	r3, #16
 8005c52:	d0f0      	beq.n	8005c36 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	00030d40 	.word	0x00030d40

08005c68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	460b      	mov	r3, r1
 8005c72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	68f9      	ldr	r1, [r7, #12]
 8005c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b084      	sub	sp, #16
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cb4:	f043 0302 	orr.w	r3, r3, #2
 8005cb8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005cba:	2003      	movs	r0, #3
 8005cbc:	f7fb fbde 	bl	800147c <HAL_Delay>

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3710      	adds	r7, #16
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
	...

08005ccc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	4a13      	ldr	r2, [pc, #76]	; (8005d30 <USB_CoreReset+0x64>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d901      	bls.n	8005cea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e01b      	b.n	8005d22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	daf2      	bge.n	8005cd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f043 0201 	orr.w	r2, r3, #1
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	3301      	adds	r3, #1
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4a09      	ldr	r2, [pc, #36]	; (8005d30 <USB_CoreReset+0x64>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d901      	bls.n	8005d14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e006      	b.n	8005d22 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d0f0      	beq.n	8005d02 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d20:	2300      	movs	r3, #0
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr
 8005d2e:	bf00      	nop
 8005d30:	00030d40 	.word	0x00030d40

08005d34 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005d34:	b5b0      	push	{r4, r5, r7, lr}
 8005d36:	b08e      	sub	sp, #56	; 0x38
 8005d38:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8005d3a:	4ba0      	ldr	r3, [pc, #640]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005d3c:	22c0      	movs	r2, #192	; 0xc0
 8005d3e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8005d40:	4b9e      	ldr	r3, [pc, #632]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005d42:	22a8      	movs	r2, #168	; 0xa8
 8005d44:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8005d46:	4b9d      	ldr	r3, [pc, #628]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 70;
 8005d4c:	4b9b      	ldr	r3, [pc, #620]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005d4e:	2246      	movs	r2, #70	; 0x46
 8005d50:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005d52:	4b9b      	ldr	r3, [pc, #620]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005d54:	22ff      	movs	r2, #255	; 0xff
 8005d56:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005d58:	4b99      	ldr	r3, [pc, #612]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005d5a:	22ff      	movs	r2, #255	; 0xff
 8005d5c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8005d5e:	4b98      	ldr	r3, [pc, #608]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005d60:	22ff      	movs	r2, #255	; 0xff
 8005d62:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005d64:	4b96      	ldr	r3, [pc, #600]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 0;
 8005d6a:	4b96      	ldr	r3, [pc, #600]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 8005d70:	4b94      	ldr	r3, [pc, #592]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8005d76:	4b93      	ldr	r3, [pc, #588]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 0;
 8005d7c:	4b91      	ldr	r3, [pc, #580]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	70da      	strb	r2, [r3, #3]

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005d82:	2100      	movs	r1, #0
 8005d84:	2000      	movs	r0, #0
 8005d86:	f003 fdc5 	bl	8009914 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005d8a:	4b8c      	ldr	r3, [pc, #560]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	061a      	lsls	r2, r3, #24
 8005d90:	4b8a      	ldr	r3, [pc, #552]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005d92:	785b      	ldrb	r3, [r3, #1]
 8005d94:	041b      	lsls	r3, r3, #16
 8005d96:	431a      	orrs	r2, r3
 8005d98:	4b88      	ldr	r3, [pc, #544]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005d9a:	789b      	ldrb	r3, [r3, #2]
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	4a86      	ldr	r2, [pc, #536]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005da2:	78d2      	ldrb	r2, [r2, #3]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	061a      	lsls	r2, r3, #24
 8005da8:	4b84      	ldr	r3, [pc, #528]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	0619      	lsls	r1, r3, #24
 8005dae:	4b83      	ldr	r3, [pc, #524]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005db0:	785b      	ldrb	r3, [r3, #1]
 8005db2:	041b      	lsls	r3, r3, #16
 8005db4:	4319      	orrs	r1, r3
 8005db6:	4b81      	ldr	r3, [pc, #516]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005db8:	789b      	ldrb	r3, [r3, #2]
 8005dba:	021b      	lsls	r3, r3, #8
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	497f      	ldr	r1, [pc, #508]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005dc0:	78c9      	ldrb	r1, [r1, #3]
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	021b      	lsls	r3, r3, #8
 8005dc6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	4b7b      	ldr	r3, [pc, #492]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	0619      	lsls	r1, r3, #24
 8005dd2:	4b7a      	ldr	r3, [pc, #488]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005dd4:	785b      	ldrb	r3, [r3, #1]
 8005dd6:	041b      	lsls	r3, r3, #16
 8005dd8:	4319      	orrs	r1, r3
 8005dda:	4b78      	ldr	r3, [pc, #480]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005ddc:	789b      	ldrb	r3, [r3, #2]
 8005dde:	021b      	lsls	r3, r3, #8
 8005de0:	430b      	orrs	r3, r1
 8005de2:	4976      	ldr	r1, [pc, #472]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005de4:	78c9      	ldrb	r1, [r1, #3]
 8005de6:	430b      	orrs	r3, r1
 8005de8:	0a1b      	lsrs	r3, r3, #8
 8005dea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005dee:	431a      	orrs	r2, r3
 8005df0:	4b72      	ldr	r3, [pc, #456]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	0619      	lsls	r1, r3, #24
 8005df6:	4b71      	ldr	r3, [pc, #452]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005df8:	785b      	ldrb	r3, [r3, #1]
 8005dfa:	041b      	lsls	r3, r3, #16
 8005dfc:	4319      	orrs	r1, r3
 8005dfe:	4b6f      	ldr	r3, [pc, #444]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005e00:	789b      	ldrb	r3, [r3, #2]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	430b      	orrs	r3, r1
 8005e06:	496d      	ldr	r1, [pc, #436]	; (8005fbc <MX_LWIP_Init+0x288>)
 8005e08:	78c9      	ldrb	r1, [r1, #3]
 8005e0a:	430b      	orrs	r3, r1
 8005e0c:	0e1b      	lsrs	r3, r3, #24
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	4a6d      	ldr	r2, [pc, #436]	; (8005fc8 <MX_LWIP_Init+0x294>)
 8005e12:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005e14:	4b6a      	ldr	r3, [pc, #424]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	061a      	lsls	r2, r3, #24
 8005e1a:	4b69      	ldr	r3, [pc, #420]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005e1c:	785b      	ldrb	r3, [r3, #1]
 8005e1e:	041b      	lsls	r3, r3, #16
 8005e20:	431a      	orrs	r2, r3
 8005e22:	4b67      	ldr	r3, [pc, #412]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005e24:	789b      	ldrb	r3, [r3, #2]
 8005e26:	021b      	lsls	r3, r3, #8
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	4a65      	ldr	r2, [pc, #404]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005e2c:	78d2      	ldrb	r2, [r2, #3]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	061a      	lsls	r2, r3, #24
 8005e32:	4b63      	ldr	r3, [pc, #396]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	0619      	lsls	r1, r3, #24
 8005e38:	4b61      	ldr	r3, [pc, #388]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005e3a:	785b      	ldrb	r3, [r3, #1]
 8005e3c:	041b      	lsls	r3, r3, #16
 8005e3e:	4319      	orrs	r1, r3
 8005e40:	4b5f      	ldr	r3, [pc, #380]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005e42:	789b      	ldrb	r3, [r3, #2]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	430b      	orrs	r3, r1
 8005e48:	495d      	ldr	r1, [pc, #372]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005e4a:	78c9      	ldrb	r1, [r1, #3]
 8005e4c:	430b      	orrs	r3, r1
 8005e4e:	021b      	lsls	r3, r3, #8
 8005e50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e54:	431a      	orrs	r2, r3
 8005e56:	4b5a      	ldr	r3, [pc, #360]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	0619      	lsls	r1, r3, #24
 8005e5c:	4b58      	ldr	r3, [pc, #352]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005e5e:	785b      	ldrb	r3, [r3, #1]
 8005e60:	041b      	lsls	r3, r3, #16
 8005e62:	4319      	orrs	r1, r3
 8005e64:	4b56      	ldr	r3, [pc, #344]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005e66:	789b      	ldrb	r3, [r3, #2]
 8005e68:	021b      	lsls	r3, r3, #8
 8005e6a:	430b      	orrs	r3, r1
 8005e6c:	4954      	ldr	r1, [pc, #336]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005e6e:	78c9      	ldrb	r1, [r1, #3]
 8005e70:	430b      	orrs	r3, r1
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	4b51      	ldr	r3, [pc, #324]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	0619      	lsls	r1, r3, #24
 8005e80:	4b4f      	ldr	r3, [pc, #316]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	041b      	lsls	r3, r3, #16
 8005e86:	4319      	orrs	r1, r3
 8005e88:	4b4d      	ldr	r3, [pc, #308]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005e8a:	789b      	ldrb	r3, [r3, #2]
 8005e8c:	021b      	lsls	r3, r3, #8
 8005e8e:	430b      	orrs	r3, r1
 8005e90:	494b      	ldr	r1, [pc, #300]	; (8005fc0 <MX_LWIP_Init+0x28c>)
 8005e92:	78c9      	ldrb	r1, [r1, #3]
 8005e94:	430b      	orrs	r3, r1
 8005e96:	0e1b      	lsrs	r3, r3, #24
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	4a4c      	ldr	r2, [pc, #304]	; (8005fcc <MX_LWIP_Init+0x298>)
 8005e9c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005e9e:	4b49      	ldr	r3, [pc, #292]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	061a      	lsls	r2, r3, #24
 8005ea4:	4b47      	ldr	r3, [pc, #284]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005ea6:	785b      	ldrb	r3, [r3, #1]
 8005ea8:	041b      	lsls	r3, r3, #16
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	4b45      	ldr	r3, [pc, #276]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005eae:	789b      	ldrb	r3, [r3, #2]
 8005eb0:	021b      	lsls	r3, r3, #8
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	4a43      	ldr	r2, [pc, #268]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005eb6:	78d2      	ldrb	r2, [r2, #3]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	061a      	lsls	r2, r3, #24
 8005ebc:	4b41      	ldr	r3, [pc, #260]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	0619      	lsls	r1, r3, #24
 8005ec2:	4b40      	ldr	r3, [pc, #256]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005ec4:	785b      	ldrb	r3, [r3, #1]
 8005ec6:	041b      	lsls	r3, r3, #16
 8005ec8:	4319      	orrs	r1, r3
 8005eca:	4b3e      	ldr	r3, [pc, #248]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005ecc:	789b      	ldrb	r3, [r3, #2]
 8005ece:	021b      	lsls	r3, r3, #8
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	493c      	ldr	r1, [pc, #240]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005ed4:	78c9      	ldrb	r1, [r1, #3]
 8005ed6:	430b      	orrs	r3, r1
 8005ed8:	021b      	lsls	r3, r3, #8
 8005eda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	4b38      	ldr	r3, [pc, #224]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	0619      	lsls	r1, r3, #24
 8005ee6:	4b37      	ldr	r3, [pc, #220]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005ee8:	785b      	ldrb	r3, [r3, #1]
 8005eea:	041b      	lsls	r3, r3, #16
 8005eec:	4319      	orrs	r1, r3
 8005eee:	4b35      	ldr	r3, [pc, #212]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005ef0:	789b      	ldrb	r3, [r3, #2]
 8005ef2:	021b      	lsls	r3, r3, #8
 8005ef4:	430b      	orrs	r3, r1
 8005ef6:	4933      	ldr	r1, [pc, #204]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005ef8:	78c9      	ldrb	r1, [r1, #3]
 8005efa:	430b      	orrs	r3, r1
 8005efc:	0a1b      	lsrs	r3, r3, #8
 8005efe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005f02:	431a      	orrs	r2, r3
 8005f04:	4b2f      	ldr	r3, [pc, #188]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	0619      	lsls	r1, r3, #24
 8005f0a:	4b2e      	ldr	r3, [pc, #184]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005f0c:	785b      	ldrb	r3, [r3, #1]
 8005f0e:	041b      	lsls	r3, r3, #16
 8005f10:	4319      	orrs	r1, r3
 8005f12:	4b2c      	ldr	r3, [pc, #176]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005f14:	789b      	ldrb	r3, [r3, #2]
 8005f16:	021b      	lsls	r3, r3, #8
 8005f18:	430b      	orrs	r3, r1
 8005f1a:	492a      	ldr	r1, [pc, #168]	; (8005fc4 <MX_LWIP_Init+0x290>)
 8005f1c:	78c9      	ldrb	r1, [r1, #3]
 8005f1e:	430b      	orrs	r3, r1
 8005f20:	0e1b      	lsrs	r3, r3, #24
 8005f22:	4313      	orrs	r3, r2
 8005f24:	4a2a      	ldr	r2, [pc, #168]	; (8005fd0 <MX_LWIP_Init+0x29c>)
 8005f26:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005f28:	4b2a      	ldr	r3, [pc, #168]	; (8005fd4 <MX_LWIP_Init+0x2a0>)
 8005f2a:	9302      	str	r3, [sp, #8]
 8005f2c:	4b2a      	ldr	r3, [pc, #168]	; (8005fd8 <MX_LWIP_Init+0x2a4>)
 8005f2e:	9301      	str	r3, [sp, #4]
 8005f30:	2300      	movs	r3, #0
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	4b26      	ldr	r3, [pc, #152]	; (8005fd0 <MX_LWIP_Init+0x29c>)
 8005f36:	4a25      	ldr	r2, [pc, #148]	; (8005fcc <MX_LWIP_Init+0x298>)
 8005f38:	4923      	ldr	r1, [pc, #140]	; (8005fc8 <MX_LWIP_Init+0x294>)
 8005f3a:	4828      	ldr	r0, [pc, #160]	; (8005fdc <MX_LWIP_Init+0x2a8>)
 8005f3c:	f005 f8be 	bl	800b0bc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005f40:	4826      	ldr	r0, [pc, #152]	; (8005fdc <MX_LWIP_Init+0x2a8>)
 8005f42:	f005 fa6d 	bl	800b420 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005f46:	4b25      	ldr	r3, [pc, #148]	; (8005fdc <MX_LWIP_Init+0x2a8>)
 8005f48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f4c:	089b      	lsrs	r3, r3, #2
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005f58:	4820      	ldr	r0, [pc, #128]	; (8005fdc <MX_LWIP_Init+0x2a8>)
 8005f5a:	f005 fa71 	bl	800b440 <netif_set_up>
 8005f5e:	e002      	b.n	8005f66 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005f60:	481e      	ldr	r0, [pc, #120]	; (8005fdc <MX_LWIP_Init+0x2a8>)
 8005f62:	f005 fad9 	bl	800b518 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005f66:	491e      	ldr	r1, [pc, #120]	; (8005fe0 <MX_LWIP_Init+0x2ac>)
 8005f68:	481c      	ldr	r0, [pc, #112]	; (8005fdc <MX_LWIP_Init+0x2a8>)
 8005f6a:	f005 fb6b 	bl	800b644 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8005f6e:	2300      	movs	r3, #0
 8005f70:	623b      	str	r3, [r7, #32]
 8005f72:	2300      	movs	r3, #0
 8005f74:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8005f76:	f107 0320 	add.w	r3, r7, #32
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 fd8f 	bl	8006aa0 <osSemaphoreCreate>
 8005f82:	4602      	mov	r2, r0
 8005f84:	4b17      	ldr	r3, [pc, #92]	; (8005fe4 <MX_LWIP_Init+0x2b0>)
 8005f86:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 8005f88:	4b17      	ldr	r3, [pc, #92]	; (8005fe8 <MX_LWIP_Init+0x2b4>)
 8005f8a:	4a14      	ldr	r2, [pc, #80]	; (8005fdc <MX_LWIP_Init+0x2a8>)
 8005f8c:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8005f8e:	4b15      	ldr	r3, [pc, #84]	; (8005fe4 <MX_LWIP_Init+0x2b0>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a15      	ldr	r2, [pc, #84]	; (8005fe8 <MX_LWIP_Init+0x2b4>)
 8005f94:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8005f96:	4b15      	ldr	r3, [pc, #84]	; (8005fec <MX_LWIP_Init+0x2b8>)
 8005f98:	1d3c      	adds	r4, r7, #4
 8005f9a:	461d      	mov	r5, r3
 8005f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fa0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005fa4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8005fa8:	1d3b      	adds	r3, r7, #4
 8005faa:	490f      	ldr	r1, [pc, #60]	; (8005fe8 <MX_LWIP_Init+0x2b4>)
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fc7a 	bl	80068a6 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005fb2:	bf00      	nop
 8005fb4:	3728      	adds	r7, #40	; 0x28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	20004bd4 	.word	0x20004bd4
 8005fc0:	20004bd0 	.word	0x20004bd0
 8005fc4:	20004b94 	.word	0x20004b94
 8005fc8:	20004bcc 	.word	0x20004bcc
 8005fcc:	20004bd8 	.word	0x20004bd8
 8005fd0:	20004bdc 	.word	0x20004bdc
 8005fd4:	08009851 	.word	0x08009851
 8005fd8:	08006635 	.word	0x08006635
 8005fdc:	20004b98 	.word	0x20004b98
 8005fe0:	08006719 	.word	0x08006719
 8005fe4:	20000304 	.word	0x20000304
 8005fe8:	20004b8c 	.word	0x20004b8c
 8005fec:	08016464 	.word	0x08016464

08005ff0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b08e      	sub	sp, #56	; 0x38
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]
 8006000:	605a      	str	r2, [r3, #4]
 8006002:	609a      	str	r2, [r3, #8]
 8006004:	60da      	str	r2, [r3, #12]
 8006006:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a52      	ldr	r2, [pc, #328]	; (8006158 <HAL_ETH_MspInit+0x168>)
 800600e:	4293      	cmp	r3, r2
 8006010:	f040 809e 	bne.w	8006150 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006014:	4b51      	ldr	r3, [pc, #324]	; (800615c <HAL_ETH_MspInit+0x16c>)
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	4a50      	ldr	r2, [pc, #320]	; (800615c <HAL_ETH_MspInit+0x16c>)
 800601a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800601e:	6313      	str	r3, [r2, #48]	; 0x30
 8006020:	4b4e      	ldr	r3, [pc, #312]	; (800615c <HAL_ETH_MspInit+0x16c>)
 8006022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006028:	623b      	str	r3, [r7, #32]
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	4b4b      	ldr	r3, [pc, #300]	; (800615c <HAL_ETH_MspInit+0x16c>)
 800602e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006030:	4a4a      	ldr	r2, [pc, #296]	; (800615c <HAL_ETH_MspInit+0x16c>)
 8006032:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006036:	6313      	str	r3, [r2, #48]	; 0x30
 8006038:	4b48      	ldr	r3, [pc, #288]	; (800615c <HAL_ETH_MspInit+0x16c>)
 800603a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006040:	61fb      	str	r3, [r7, #28]
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	4b45      	ldr	r3, [pc, #276]	; (800615c <HAL_ETH_MspInit+0x16c>)
 8006046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006048:	4a44      	ldr	r2, [pc, #272]	; (800615c <HAL_ETH_MspInit+0x16c>)
 800604a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800604e:	6313      	str	r3, [r2, #48]	; 0x30
 8006050:	4b42      	ldr	r3, [pc, #264]	; (800615c <HAL_ETH_MspInit+0x16c>)
 8006052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006054:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006058:	61bb      	str	r3, [r7, #24]
 800605a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800605c:	4b3f      	ldr	r3, [pc, #252]	; (800615c <HAL_ETH_MspInit+0x16c>)
 800605e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006060:	4a3e      	ldr	r2, [pc, #248]	; (800615c <HAL_ETH_MspInit+0x16c>)
 8006062:	f043 0304 	orr.w	r3, r3, #4
 8006066:	6313      	str	r3, [r2, #48]	; 0x30
 8006068:	4b3c      	ldr	r3, [pc, #240]	; (800615c <HAL_ETH_MspInit+0x16c>)
 800606a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	617b      	str	r3, [r7, #20]
 8006072:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006074:	4b39      	ldr	r3, [pc, #228]	; (800615c <HAL_ETH_MspInit+0x16c>)
 8006076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006078:	4a38      	ldr	r2, [pc, #224]	; (800615c <HAL_ETH_MspInit+0x16c>)
 800607a:	f043 0301 	orr.w	r3, r3, #1
 800607e:	6313      	str	r3, [r2, #48]	; 0x30
 8006080:	4b36      	ldr	r3, [pc, #216]	; (800615c <HAL_ETH_MspInit+0x16c>)
 8006082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006084:	f003 0301 	and.w	r3, r3, #1
 8006088:	613b      	str	r3, [r7, #16]
 800608a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800608c:	4b33      	ldr	r3, [pc, #204]	; (800615c <HAL_ETH_MspInit+0x16c>)
 800608e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006090:	4a32      	ldr	r2, [pc, #200]	; (800615c <HAL_ETH_MspInit+0x16c>)
 8006092:	f043 0302 	orr.w	r3, r3, #2
 8006096:	6313      	str	r3, [r2, #48]	; 0x30
 8006098:	4b30      	ldr	r3, [pc, #192]	; (800615c <HAL_ETH_MspInit+0x16c>)
 800609a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609c:	f003 0302 	and.w	r3, r3, #2
 80060a0:	60fb      	str	r3, [r7, #12]
 80060a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80060a4:	4b2d      	ldr	r3, [pc, #180]	; (800615c <HAL_ETH_MspInit+0x16c>)
 80060a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a8:	4a2c      	ldr	r2, [pc, #176]	; (800615c <HAL_ETH_MspInit+0x16c>)
 80060aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ae:	6313      	str	r3, [r2, #48]	; 0x30
 80060b0:	4b2a      	ldr	r3, [pc, #168]	; (800615c <HAL_ETH_MspInit+0x16c>)
 80060b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b8:	60bb      	str	r3, [r7, #8]
 80060ba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80060bc:	2332      	movs	r3, #50	; 0x32
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060c0:	2302      	movs	r3, #2
 80060c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060c4:	2300      	movs	r3, #0
 80060c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060c8:	2303      	movs	r3, #3
 80060ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80060cc:	230b      	movs	r3, #11
 80060ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80060d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060d4:	4619      	mov	r1, r3
 80060d6:	4822      	ldr	r0, [pc, #136]	; (8006160 <HAL_ETH_MspInit+0x170>)
 80060d8:	f7fc fe60 	bl	8002d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80060dc:	2386      	movs	r3, #134	; 0x86
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e0:	2302      	movs	r3, #2
 80060e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e4:	2300      	movs	r3, #0
 80060e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060e8:	2303      	movs	r3, #3
 80060ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80060ec:	230b      	movs	r3, #11
 80060ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060f4:	4619      	mov	r1, r3
 80060f6:	481b      	ldr	r0, [pc, #108]	; (8006164 <HAL_ETH_MspInit+0x174>)
 80060f8:	f7fc fe50 	bl	8002d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80060fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006100:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006102:	2302      	movs	r3, #2
 8006104:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006106:	2300      	movs	r3, #0
 8006108:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800610a:	2303      	movs	r3, #3
 800610c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800610e:	230b      	movs	r3, #11
 8006110:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006116:	4619      	mov	r1, r3
 8006118:	4813      	ldr	r0, [pc, #76]	; (8006168 <HAL_ETH_MspInit+0x178>)
 800611a:	f7fc fe3f 	bl	8002d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800611e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006124:	2302      	movs	r3, #2
 8006126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006128:	2300      	movs	r3, #0
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800612c:	2303      	movs	r3, #3
 800612e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006130:	230b      	movs	r3, #11
 8006132:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006134:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006138:	4619      	mov	r1, r3
 800613a:	480c      	ldr	r0, [pc, #48]	; (800616c <HAL_ETH_MspInit+0x17c>)
 800613c:	f7fc fe2e 	bl	8002d9c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006140:	2200      	movs	r2, #0
 8006142:	2105      	movs	r1, #5
 8006144:	203d      	movs	r0, #61	; 0x3d
 8006146:	f7fb fa73 	bl	8001630 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800614a:	203d      	movs	r0, #61	; 0x3d
 800614c:	f7fb fa8c 	bl	8001668 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006150:	bf00      	nop
 8006152:	3738      	adds	r7, #56	; 0x38
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	40028000 	.word	0x40028000
 800615c:	40023800 	.word	0x40023800
 8006160:	40020800 	.word	0x40020800
 8006164:	40020000 	.word	0x40020000
 8006168:	40020400 	.word	0x40020400
 800616c:	40021800 	.word	0x40021800

08006170 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8006178:	4b04      	ldr	r3, [pc, #16]	; (800618c <HAL_ETH_RxCpltCallback+0x1c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fd11 	bl	8006ba4 <osSemaphoreRelease>
}
 8006182:	bf00      	nop
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000308 	.word	0x20000308

08006190 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006190:	b5b0      	push	{r4, r5, r7, lr}
 8006192:	b090      	sub	sp, #64	; 0x40
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800619c:	4b5c      	ldr	r3, [pc, #368]	; (8006310 <low_level_init+0x180>)
 800619e:	4a5d      	ldr	r2, [pc, #372]	; (8006314 <low_level_init+0x184>)
 80061a0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80061a2:	4b5b      	ldr	r3, [pc, #364]	; (8006310 <low_level_init+0x180>)
 80061a4:	2201      	movs	r2, #1
 80061a6:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80061a8:	4b59      	ldr	r3, [pc, #356]	; (8006310 <low_level_init+0x180>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80061ae:	2300      	movs	r3, #0
 80061b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80061b4:	2380      	movs	r3, #128	; 0x80
 80061b6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80061ba:	23e1      	movs	r3, #225	; 0xe1
 80061bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 80061c0:	2300      	movs	r3, #0
 80061c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 80061c6:	2300      	movs	r3, #0
 80061c8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 80061cc:	2300      	movs	r3, #0
 80061ce:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80061d2:	4a4f      	ldr	r2, [pc, #316]	; (8006310 <low_level_init+0x180>)
 80061d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80061d8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80061da:	4b4d      	ldr	r3, [pc, #308]	; (8006310 <low_level_init+0x180>)
 80061dc:	2201      	movs	r2, #1
 80061de:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80061e0:	4b4b      	ldr	r3, [pc, #300]	; (8006310 <low_level_init+0x180>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80061e6:	4b4a      	ldr	r3, [pc, #296]	; (8006310 <low_level_init+0x180>)
 80061e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80061ec:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80061ee:	4848      	ldr	r0, [pc, #288]	; (8006310 <low_level_init+0x180>)
 80061f0:	f7fb fa48 	bl	8001684 <HAL_ETH_Init>
 80061f4:	4603      	mov	r3, r0
 80061f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80061fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d108      	bne.n	8006214 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006208:	f043 0304 	orr.w	r3, r3, #4
 800620c:	b2da      	uxtb	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006214:	2304      	movs	r3, #4
 8006216:	4a40      	ldr	r2, [pc, #256]	; (8006318 <low_level_init+0x188>)
 8006218:	4940      	ldr	r1, [pc, #256]	; (800631c <low_level_init+0x18c>)
 800621a:	483d      	ldr	r0, [pc, #244]	; (8006310 <low_level_init+0x180>)
 800621c:	f7fb fbce 	bl	80019bc <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006220:	2304      	movs	r3, #4
 8006222:	4a3f      	ldr	r2, [pc, #252]	; (8006320 <low_level_init+0x190>)
 8006224:	493f      	ldr	r1, [pc, #252]	; (8006324 <low_level_init+0x194>)
 8006226:	483a      	ldr	r0, [pc, #232]	; (8006310 <low_level_init+0x180>)
 8006228:	f7fb fc31 	bl	8001a8e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2206      	movs	r2, #6
 8006230:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006234:	4b36      	ldr	r3, [pc, #216]	; (8006310 <low_level_init+0x180>)
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	781a      	ldrb	r2, [r3, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006240:	4b33      	ldr	r3, [pc, #204]	; (8006310 <low_level_init+0x180>)
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	785a      	ldrb	r2, [r3, #1]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800624c:	4b30      	ldr	r3, [pc, #192]	; (8006310 <low_level_init+0x180>)
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	789a      	ldrb	r2, [r3, #2]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006258:	4b2d      	ldr	r3, [pc, #180]	; (8006310 <low_level_init+0x180>)
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	78da      	ldrb	r2, [r3, #3]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006264:	4b2a      	ldr	r3, [pc, #168]	; (8006310 <low_level_init+0x180>)
 8006266:	695b      	ldr	r3, [r3, #20]
 8006268:	791a      	ldrb	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006270:	4b27      	ldr	r3, [pc, #156]	; (8006310 <low_level_init+0x180>)
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	795a      	ldrb	r2, [r3, #5]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006282:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800628a:	f043 030a 	orr.w	r3, r3, #10
 800628e:	b2da      	uxtb	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8006296:	2300      	movs	r3, #0
 8006298:	62bb      	str	r3, [r7, #40]	; 0x28
 800629a:	2300      	movs	r3, #0
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800629e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80062a2:	2101      	movs	r1, #1
 80062a4:	4618      	mov	r0, r3
 80062a6:	f000 fbfb 	bl	8006aa0 <osSemaphoreCreate>
 80062aa:	4602      	mov	r2, r0
 80062ac:	4b1e      	ldr	r3, [pc, #120]	; (8006328 <low_level_init+0x198>)
 80062ae:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80062b0:	4b1e      	ldr	r3, [pc, #120]	; (800632c <low_level_init+0x19c>)
 80062b2:	f107 040c 	add.w	r4, r7, #12
 80062b6:	461d      	mov	r5, r3
 80062b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80062ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80062c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80062c4:	f107 030c 	add.w	r3, r7, #12
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 faeb 	bl	80068a6 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80062d0:	480f      	ldr	r0, [pc, #60]	; (8006310 <low_level_init+0x180>)
 80062d2:	f7fb ff04 	bl	80020de <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80062d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80062da:	461a      	mov	r2, r3
 80062dc:	211d      	movs	r1, #29
 80062de:	480c      	ldr	r0, [pc, #48]	; (8006310 <low_level_init+0x180>)
 80062e0:	f7fb fe2f 	bl	8001f42 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80062e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e6:	f043 030b 	orr.w	r3, r3, #11
 80062ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80062ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ee:	461a      	mov	r2, r3
 80062f0:	211d      	movs	r1, #29
 80062f2:	4807      	ldr	r0, [pc, #28]	; (8006310 <low_level_init+0x180>)
 80062f4:	f7fb fe8d 	bl	8002012 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80062f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80062fc:	461a      	mov	r2, r3
 80062fe:	211d      	movs	r1, #29
 8006300:	4803      	ldr	r0, [pc, #12]	; (8006310 <low_level_init+0x180>)
 8006302:	f7fb fe1e 	bl	8001f42 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006306:	bf00      	nop
 8006308:	3740      	adds	r7, #64	; 0x40
 800630a:	46bd      	mov	sp, r7
 800630c:	bdb0      	pop	{r4, r5, r7, pc}
 800630e:	bf00      	nop
 8006310:	200064b0 	.word	0x200064b0
 8006314:	40028000 	.word	0x40028000
 8006318:	200064f8 	.word	0x200064f8
 800631c:	20004be0 	.word	0x20004be0
 8006320:	20004c60 	.word	0x20004c60
 8006324:	20006430 	.word	0x20006430
 8006328:	20000308 	.word	0x20000308
 800632c:	08016488 	.word	0x08016488

08006330 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08a      	sub	sp, #40	; 0x28
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800633a:	4b4b      	ldr	r3, [pc, #300]	; (8006468 <low_level_output+0x138>)
 800633c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800634e:	2300      	movs	r3, #0
 8006350:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006352:	4b45      	ldr	r3, [pc, #276]	; (8006468 <low_level_output+0x138>)
 8006354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006356:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	623b      	str	r3, [r7, #32]
 8006360:	e05a      	b.n	8006418 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	da03      	bge.n	8006372 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800636a:	23f8      	movs	r3, #248	; 0xf8
 800636c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006370:	e05c      	b.n	800642c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006372:	6a3b      	ldr	r3, [r7, #32]
 8006374:	895b      	ldrh	r3, [r3, #10]
 8006376:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006378:	2300      	movs	r3, #0
 800637a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800637c:	e02f      	b.n	80063de <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	18d0      	adds	r0, r2, r3
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	18d1      	adds	r1, r2, r3
 800638c:	693a      	ldr	r2, [r7, #16]
 800638e:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8006392:	1a9b      	subs	r3, r3, r2
 8006394:	461a      	mov	r2, r3
 8006396:	f00e ff32 	bl	80151fe <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	68db      	ldr	r3, [r3, #12]
 800639e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	da03      	bge.n	80063b0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80063a8:	23f8      	movs	r3, #248	; 0xf8
 80063aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80063ae:	e03d      	b.n	800642c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	4413      	add	r3, r2
 80063bc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80063c0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80063cc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80063d8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80063da:	2300      	movs	r3, #0
 80063dc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	4413      	add	r3, r2
 80063e4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d8c8      	bhi.n	800637e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80063ec:	69fa      	ldr	r2, [r7, #28]
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	18d0      	adds	r0, r2, r3
 80063f2:	6a3b      	ldr	r3, [r7, #32]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	4413      	add	r3, r2
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	4619      	mov	r1, r3
 80063fe:	f00e fefe 	bl	80151fe <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	623b      	str	r3, [r7, #32]
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1a1      	bne.n	8006362 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800641e:	6979      	ldr	r1, [r7, #20]
 8006420:	4811      	ldr	r0, [pc, #68]	; (8006468 <low_level_output+0x138>)
 8006422:	f7fb fba1 	bl	8001b68 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8006426:	2300      	movs	r3, #0
 8006428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800642c:	4b0e      	ldr	r3, [pc, #56]	; (8006468 <low_level_output+0x138>)
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	f241 0314 	movw	r3, #4116	; 0x1014
 8006434:	4413      	add	r3, r2
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0320 	and.w	r3, r3, #32
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00d      	beq.n	800645c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006440:	4b09      	ldr	r3, [pc, #36]	; (8006468 <low_level_output+0x138>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	f241 0314 	movw	r3, #4116	; 0x1014
 8006448:	4413      	add	r3, r2
 800644a:	2220      	movs	r2, #32
 800644c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800644e:	4b06      	ldr	r3, [pc, #24]	; (8006468 <low_level_output+0x138>)
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	f241 0304 	movw	r3, #4100	; 0x1004
 8006456:	4413      	add	r3, r2
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800645c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006460:	4618      	mov	r0, r3
 8006462:	3728      	adds	r7, #40	; 0x28
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	200064b0 	.word	0x200064b0

0800646c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08c      	sub	sp, #48	; 0x30
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006474:	2300      	movs	r3, #0
 8006476:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8006478:	2300      	movs	r3, #0
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800647c:	2300      	movs	r3, #0
 800647e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006484:	2300      	movs	r3, #0
 8006486:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800648c:	2300      	movs	r3, #0
 800648e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8006490:	484f      	ldr	r0, [pc, #316]	; (80065d0 <low_level_input+0x164>)
 8006492:	f7fb fc53 	bl	8001d3c <HAL_ETH_GetReceivedFrame_IT>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <low_level_input+0x34>

    return NULL;
 800649c:	2300      	movs	r3, #0
 800649e:	e092      	b.n	80065c6 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80064a0:	4b4b      	ldr	r3, [pc, #300]	; (80065d0 <low_level_input+0x164>)
 80064a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80064a6:	4b4a      	ldr	r3, [pc, #296]	; (80065d0 <low_level_input+0x164>)
 80064a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064aa:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80064ac:	89fb      	ldrh	r3, [r7, #14]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d007      	beq.n	80064c2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80064b2:	89fb      	ldrh	r3, [r7, #14]
 80064b4:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80064b8:	4619      	mov	r1, r3
 80064ba:	2000      	movs	r0, #0
 80064bc:	f005 f98c 	bl	800b7d8 <pbuf_alloc>
 80064c0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d04b      	beq.n	8006560 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80064c8:	4b41      	ldr	r3, [pc, #260]	; (80065d0 <low_level_input+0x164>)
 80064ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064cc:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80064ce:	2300      	movs	r3, #0
 80064d0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80064d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80064d6:	e040      	b.n	800655a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	895b      	ldrh	r3, [r3, #10]
 80064dc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80064de:	2300      	movs	r3, #0
 80064e0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80064e2:	e021      	b.n	8006528 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80064e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	18d0      	adds	r0, r2, r3
 80064ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	18d1      	adds	r1, r2, r3
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80064f8:	1a9b      	subs	r3, r3, r2
 80064fa:	461a      	mov	r2, r3
 80064fc:	f00e fe7f 	bl	80151fe <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800650c:	69fa      	ldr	r2, [r7, #28]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	4413      	add	r3, r2
 8006512:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006516:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006522:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006524:	2300      	movs	r3, #0
 8006526:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006528:	697a      	ldr	r2, [r7, #20]
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	4413      	add	r3, r2
 800652e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006532:	4293      	cmp	r3, r2
 8006534:	d8d6      	bhi.n	80064e4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	69bb      	ldr	r3, [r7, #24]
 800653c:	18d0      	adds	r0, r2, r3
 800653e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	4413      	add	r3, r2
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4619      	mov	r1, r3
 8006548:	f00e fe59 	bl	80151fe <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800654c:	69fa      	ldr	r2, [r7, #28]
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	4413      	add	r3, r2
 8006552:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	62bb      	str	r3, [r7, #40]	; 0x28
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1bb      	bne.n	80064d8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006560:	4b1b      	ldr	r3, [pc, #108]	; (80065d0 <low_level_input+0x164>)
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006566:	2300      	movs	r3, #0
 8006568:	613b      	str	r3, [r7, #16]
 800656a:	e00b      	b.n	8006584 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800656c:	6a3b      	ldr	r3, [r7, #32]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	3301      	adds	r3, #1
 8006582:	613b      	str	r3, [r7, #16]
 8006584:	4b12      	ldr	r3, [pc, #72]	; (80065d0 <low_level_input+0x164>)
 8006586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	429a      	cmp	r2, r3
 800658c:	d3ee      	bcc.n	800656c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800658e:	4b10      	ldr	r3, [pc, #64]	; (80065d0 <low_level_input+0x164>)
 8006590:	2200      	movs	r2, #0
 8006592:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8006594:	4b0e      	ldr	r3, [pc, #56]	; (80065d0 <low_level_input+0x164>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	f241 0314 	movw	r3, #4116	; 0x1014
 800659c:	4413      	add	r3, r2
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00d      	beq.n	80065c4 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80065a8:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <low_level_input+0x164>)
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	f241 0314 	movw	r3, #4116	; 0x1014
 80065b0:	4413      	add	r3, r2
 80065b2:	2280      	movs	r2, #128	; 0x80
 80065b4:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80065b6:	4b06      	ldr	r3, [pc, #24]	; (80065d0 <low_level_input+0x164>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	f241 0308 	movw	r3, #4104	; 0x1008
 80065be:	4413      	add	r3, r2
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]
  }
  return p;
 80065c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3730      	adds	r7, #48	; 0x30
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	200064b0 	.word	0x200064b0

080065d4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80065e0:	4b12      	ldr	r3, [pc, #72]	; (800662c <ethernetif_input+0x58>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 fa8d 	bl	8006b08 <osSemaphoreWait>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1f5      	bne.n	80065e0 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80065f4:	480e      	ldr	r0, [pc, #56]	; (8006630 <ethernetif_input+0x5c>)
 80065f6:	f00e fd6f 	bl	80150d8 <sys_mutex_lock>
        p = low_level_input( netif );
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f7ff ff36 	bl	800646c <low_level_input>
 8006600:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	68f9      	ldr	r1, [r7, #12]
 800660e:	68b8      	ldr	r0, [r7, #8]
 8006610:	4798      	blx	r3
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8006618:	68b8      	ldr	r0, [r7, #8]
 800661a:	f005 fbbd 	bl	800bd98 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800661e:	4804      	ldr	r0, [pc, #16]	; (8006630 <ethernetif_input+0x5c>)
 8006620:	f00e fd69 	bl	80150f6 <sys_mutex_unlock>
      } while(p!=NULL);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e4      	bne.n	80065f4 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800662a:	e7d9      	b.n	80065e0 <ethernetif_input+0xc>
 800662c:	20000308 	.word	0x20000308
 8006630:	20007cc8 	.word	0x20007cc8

08006634 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d106      	bne.n	8006650 <ethernetif_init+0x1c>
 8006642:	4b0e      	ldr	r3, [pc, #56]	; (800667c <ethernetif_init+0x48>)
 8006644:	f240 2233 	movw	r2, #563	; 0x233
 8006648:	490d      	ldr	r1, [pc, #52]	; (8006680 <ethernetif_init+0x4c>)
 800664a:	480e      	ldr	r0, [pc, #56]	; (8006684 <ethernetif_init+0x50>)
 800664c:	f00e fe04 	bl	8015258 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2273      	movs	r2, #115	; 0x73
 8006654:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2274      	movs	r2, #116	; 0x74
 800665c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a09      	ldr	r2, [pc, #36]	; (8006688 <ethernetif_init+0x54>)
 8006664:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a08      	ldr	r2, [pc, #32]	; (800668c <ethernetif_init+0x58>)
 800666a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7ff fd8f 	bl	8006190 <low_level_init>

  return ERR_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	080164a4 	.word	0x080164a4
 8006680:	080164c0 	.word	0x080164c0
 8006684:	080164d0 	.word	0x080164d0
 8006688:	08013291 	.word	0x08013291
 800668c:	08006331 	.word	0x08006331

08006690 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006694:	f7fa fee6 	bl	8001464 <HAL_GetTick>
 8006698:	4603      	mov	r3, r0
}
 800669a:	4618      	mov	r0, r3
 800669c:	bd80      	pop	{r7, pc}
	...

080066a0 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80066a8:	2300      	movs	r3, #0
 80066aa:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80066b0:	f107 0308 	add.w	r3, r7, #8
 80066b4:	461a      	mov	r2, r3
 80066b6:	2101      	movs	r1, #1
 80066b8:	4816      	ldr	r0, [pc, #88]	; (8006714 <ethernetif_set_link+0x74>)
 80066ba:	f7fb fc42 	bl	8001f42 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066ce:	f003 0304 	and.w	r3, r3, #4
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d108      	bne.n	80066e8 <ethernetif_set_link+0x48>
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d005      	beq.n	80066e8 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f004 ff4b 	bl	800b57c <netif_set_link_up>
 80066e6:	e011      	b.n	800670c <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80066f0:	089b      	lsrs	r3, r3, #2
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d007      	beq.n	800670c <ethernetif_set_link+0x6c>
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d104      	bne.n	800670c <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f004 ff6c 	bl	800b5e4 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 800670c:	20c8      	movs	r0, #200	; 0xc8
 800670e:	f000 f916 	bl	800693e <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006712:	e7cd      	b.n	80066b0 <ethernetif_set_link+0x10>
 8006714:	200064b0 	.word	0x200064b0

08006718 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8006724:	2300      	movs	r3, #0
 8006726:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800672e:	089b      	lsrs	r3, r3, #2
 8006730:	f003 0301 	and.w	r3, r3, #1
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d05d      	beq.n	80067f6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800673a:	4b34      	ldr	r3, [pc, #208]	; (800680c <ethernetif_update_config+0xf4>)
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d03f      	beq.n	80067c2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8006742:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006746:	2100      	movs	r1, #0
 8006748:	4830      	ldr	r0, [pc, #192]	; (800680c <ethernetif_update_config+0xf4>)
 800674a:	f7fb fc62 	bl	8002012 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800674e:	f7fa fe89 	bl	8001464 <HAL_GetTick>
 8006752:	4603      	mov	r3, r0
 8006754:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8006756:	f107 0308 	add.w	r3, r7, #8
 800675a:	461a      	mov	r2, r3
 800675c:	2101      	movs	r1, #1
 800675e:	482b      	ldr	r0, [pc, #172]	; (800680c <ethernetif_update_config+0xf4>)
 8006760:	f7fb fbef 	bl	8001f42 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8006764:	f7fa fe7e 	bl	8001464 <HAL_GetTick>
 8006768:	4602      	mov	r2, r0
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	1ad3      	subs	r3, r2, r3
 800676e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006772:	d828      	bhi.n	80067c6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0eb      	beq.n	8006756 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800677e:	f107 0308 	add.w	r3, r7, #8
 8006782:	461a      	mov	r2, r3
 8006784:	211f      	movs	r1, #31
 8006786:	4821      	ldr	r0, [pc, #132]	; (800680c <ethernetif_update_config+0xf4>)
 8006788:	f7fb fbdb 	bl	8001f42 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	f003 0310 	and.w	r3, r3, #16
 8006792:	2b00      	cmp	r3, #0
 8006794:	d004      	beq.n	80067a0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8006796:	4b1d      	ldr	r3, [pc, #116]	; (800680c <ethernetif_update_config+0xf4>)
 8006798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800679c:	60da      	str	r2, [r3, #12]
 800679e:	e002      	b.n	80067a6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80067a0:	4b1a      	ldr	r3, [pc, #104]	; (800680c <ethernetif_update_config+0xf4>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80067b0:	4b16      	ldr	r3, [pc, #88]	; (800680c <ethernetif_update_config+0xf4>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	609a      	str	r2, [r3, #8]
 80067b6:	e016      	b.n	80067e6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80067b8:	4b14      	ldr	r3, [pc, #80]	; (800680c <ethernetif_update_config+0xf4>)
 80067ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80067be:	609a      	str	r2, [r3, #8]
 80067c0:	e011      	b.n	80067e6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80067c2:	bf00      	nop
 80067c4:	e000      	b.n	80067c8 <ethernetif_update_config+0xb0>
          goto error;
 80067c6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80067c8:	4b10      	ldr	r3, [pc, #64]	; (800680c <ethernetif_update_config+0xf4>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	08db      	lsrs	r3, r3, #3
 80067ce:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80067d0:	4b0e      	ldr	r3, [pc, #56]	; (800680c <ethernetif_update_config+0xf4>)
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	085b      	lsrs	r3, r3, #1
 80067d6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80067d8:	4313      	orrs	r3, r2
 80067da:	b29b      	uxth	r3, r3
 80067dc:	461a      	mov	r2, r3
 80067de:	2100      	movs	r1, #0
 80067e0:	480a      	ldr	r0, [pc, #40]	; (800680c <ethernetif_update_config+0xf4>)
 80067e2:	f7fb fc16 	bl	8002012 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80067e6:	2100      	movs	r1, #0
 80067e8:	4808      	ldr	r0, [pc, #32]	; (800680c <ethernetif_update_config+0xf4>)
 80067ea:	f7fb fcd7 	bl	800219c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80067ee:	4807      	ldr	r0, [pc, #28]	; (800680c <ethernetif_update_config+0xf4>)
 80067f0:	f7fb fc75 	bl	80020de <HAL_ETH_Start>
 80067f4:	e002      	b.n	80067fc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80067f6:	4805      	ldr	r0, [pc, #20]	; (800680c <ethernetif_update_config+0xf4>)
 80067f8:	f7fb fca0 	bl	800213c <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f807 	bl	8006810 <ethernetif_notify_conn_changed>
}
 8006802:	bf00      	nop
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	200064b0 	.word	0x200064b0

08006810 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8006818:	bf00      	nop
 800681a:	370c      	adds	r7, #12
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	4603      	mov	r3, r0
 800682c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006832:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006836:	2b84      	cmp	r3, #132	; 0x84
 8006838:	d005      	beq.n	8006846 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800683a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4413      	add	r3, r2
 8006842:	3303      	adds	r3, #3
 8006844:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006846:	68fb      	ldr	r3, [r7, #12]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800685a:	f3ef 8305 	mrs	r3, IPSR
 800685e:	607b      	str	r3, [r7, #4]
  return(result);
 8006860:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006862:	2b00      	cmp	r3, #0
 8006864:	bf14      	ite	ne
 8006866:	2301      	movne	r3, #1
 8006868:	2300      	moveq	r3, #0
 800686a:	b2db      	uxtb	r3, r3
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800687c:	f001 fc88 	bl	8008190 <vTaskStartScheduler>
  
  return osOK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	bd80      	pop	{r7, pc}

08006886 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800688a:	f7ff ffe3 	bl	8006854 <inHandlerMode>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d003      	beq.n	800689c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006894:	f001 fd9a 	bl	80083cc <xTaskGetTickCountFromISR>
 8006898:	4603      	mov	r3, r0
 800689a:	e002      	b.n	80068a2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800689c:	f001 fd86 	bl	80083ac <xTaskGetTickCount>
 80068a0:	4603      	mov	r3, r0
  }
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80068a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068a8:	b089      	sub	sp, #36	; 0x24
 80068aa:	af04      	add	r7, sp, #16
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	695b      	ldr	r3, [r3, #20]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d020      	beq.n	80068fa <osThreadCreate+0x54>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d01c      	beq.n	80068fa <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685c      	ldr	r4, [r3, #4]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681d      	ldr	r5, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691e      	ldr	r6, [r3, #16]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff ffa6 	bl	8006824 <makeFreeRtosPriority>
 80068d8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068e2:	9202      	str	r2, [sp, #8]
 80068e4:	9301      	str	r3, [sp, #4]
 80068e6:	9100      	str	r1, [sp, #0]
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	4632      	mov	r2, r6
 80068ec:	4629      	mov	r1, r5
 80068ee:	4620      	mov	r0, r4
 80068f0:	f001 fa81 	bl	8007df6 <xTaskCreateStatic>
 80068f4:	4603      	mov	r3, r0
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	e01c      	b.n	8006934 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685c      	ldr	r4, [r3, #4]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006906:	b29e      	uxth	r6, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff ff88 	bl	8006824 <makeFreeRtosPriority>
 8006914:	4602      	mov	r2, r0
 8006916:	f107 030c 	add.w	r3, r7, #12
 800691a:	9301      	str	r3, [sp, #4]
 800691c:	9200      	str	r2, [sp, #0]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	4632      	mov	r2, r6
 8006922:	4629      	mov	r1, r5
 8006924:	4620      	mov	r0, r4
 8006926:	f001 fac6 	bl	8007eb6 <xTaskCreate>
 800692a:	4603      	mov	r3, r0
 800692c:	2b01      	cmp	r3, #1
 800692e:	d001      	beq.n	8006934 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006930:	2300      	movs	r3, #0
 8006932:	e000      	b.n	8006936 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006934:	68fb      	ldr	r3, [r7, #12]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3714      	adds	r7, #20
 800693a:	46bd      	mov	sp, r7
 800693c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800693e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800693e:	b580      	push	{r7, lr}
 8006940:	b084      	sub	sp, #16
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <osDelay+0x16>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	e000      	b.n	8006956 <osDelay+0x18>
 8006954:	2301      	movs	r3, #1
 8006956:	4618      	mov	r0, r3
 8006958:	f001 fbe4 	bl	8008124 <vTaskDelay>
  
  return osOK;
 800695c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800695e:	4618      	mov	r0, r3
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d007      	beq.n	8006986 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	4619      	mov	r1, r3
 800697c:	2001      	movs	r0, #1
 800697e:	f000 fc52 	bl	8007226 <xQueueCreateMutexStatic>
 8006982:	4603      	mov	r3, r0
 8006984:	e003      	b.n	800698e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006986:	2001      	movs	r0, #1
 8006988:	f000 fc35 	bl	80071f6 <xQueueCreateMutex>
 800698c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800698e:	4618      	mov	r0, r3
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80069a2:	2300      	movs	r3, #0
 80069a4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <osMutexWait+0x18>
    return osErrorParameter;
 80069ac:	2380      	movs	r3, #128	; 0x80
 80069ae:	e03a      	b.n	8006a26 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80069b0:	2300      	movs	r3, #0
 80069b2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069ba:	d103      	bne.n	80069c4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80069bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069c0:	60fb      	str	r3, [r7, #12]
 80069c2:	e009      	b.n	80069d8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d006      	beq.n	80069d8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <osMutexWait+0x40>
      ticks = 1;
 80069d4:	2301      	movs	r3, #1
 80069d6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80069d8:	f7ff ff3c 	bl	8006854 <inHandlerMode>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d017      	beq.n	8006a12 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80069e2:	f107 0308 	add.w	r3, r7, #8
 80069e6:	461a      	mov	r2, r3
 80069e8:	2100      	movs	r1, #0
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f001 f858 	bl	8007aa0 <xQueueReceiveFromISR>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d001      	beq.n	80069fa <osMutexWait+0x62>
      return osErrorOS;
 80069f6:	23ff      	movs	r3, #255	; 0xff
 80069f8:	e015      	b.n	8006a26 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d011      	beq.n	8006a24 <osMutexWait+0x8c>
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <osMutexWait+0x98>)
 8006a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	e008      	b.n	8006a24 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006a12:	68f9      	ldr	r1, [r7, #12]
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 ff33 	bl	8007880 <xQueueSemaphoreTake>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d001      	beq.n	8006a24 <osMutexWait+0x8c>
    return osErrorOS;
 8006a20:	23ff      	movs	r3, #255	; 0xff
 8006a22:	e000      	b.n	8006a26 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	e000ed04 	.word	0xe000ed04

08006a34 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006a40:	2300      	movs	r3, #0
 8006a42:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006a44:	f7ff ff06 	bl	8006854 <inHandlerMode>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d016      	beq.n	8006a7c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006a4e:	f107 0308 	add.w	r3, r7, #8
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 fd9f 	bl	8007598 <xQueueGiveFromISR>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d001      	beq.n	8006a64 <osMutexRelease+0x30>
      return osErrorOS;
 8006a60:	23ff      	movs	r3, #255	; 0xff
 8006a62:	e017      	b.n	8006a94 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d013      	beq.n	8006a92 <osMutexRelease+0x5e>
 8006a6a:	4b0c      	ldr	r3, [pc, #48]	; (8006a9c <osMutexRelease+0x68>)
 8006a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a70:	601a      	str	r2, [r3, #0]
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	f3bf 8f6f 	isb	sy
 8006a7a:	e00a      	b.n	8006a92 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	2200      	movs	r2, #0
 8006a80:	2100      	movs	r1, #0
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fbea 	bl	800725c <xQueueGenericSend>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d001      	beq.n	8006a92 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006a8e:	23ff      	movs	r3, #255	; 0xff
 8006a90:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006a92:	68fb      	ldr	r3, [r7, #12]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	e000ed04 	.word	0xe000ed04

08006aa0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d010      	beq.n	8006ad4 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	d10b      	bne.n	8006ad0 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	2303      	movs	r3, #3
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	f000 fa9e 	bl	8007008 <xQueueGenericCreateStatic>
 8006acc:	4603      	mov	r3, r0
 8006ace:	e016      	b.n	8006afe <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	e014      	b.n	8006afe <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d110      	bne.n	8006afc <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8006ada:	2203      	movs	r2, #3
 8006adc:	2100      	movs	r1, #0
 8006ade:	2001      	movs	r0, #1
 8006ae0:	f000 fb0f 	bl	8007102 <xQueueGenericCreate>
 8006ae4:	60f8      	str	r0, [r7, #12]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d005      	beq.n	8006af8 <osSemaphoreCreate+0x58>
 8006aec:	2300      	movs	r3, #0
 8006aee:	2200      	movs	r2, #0
 8006af0:	2100      	movs	r1, #0
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 fbb2 	bl	800725c <xQueueGenericSend>
      return sema;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	e000      	b.n	8006afe <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006afc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006b12:	2300      	movs	r3, #0
 8006b14:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006b1c:	2380      	movs	r3, #128	; 0x80
 8006b1e:	e03a      	b.n	8006b96 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006b20:	2300      	movs	r3, #0
 8006b22:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b2a:	d103      	bne.n	8006b34 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006b2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	e009      	b.n	8006b48 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d006      	beq.n	8006b48 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <osSemaphoreWait+0x40>
      ticks = 1;
 8006b44:	2301      	movs	r3, #1
 8006b46:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006b48:	f7ff fe84 	bl	8006854 <inHandlerMode>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d017      	beq.n	8006b82 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006b52:	f107 0308 	add.w	r3, r7, #8
 8006b56:	461a      	mov	r2, r3
 8006b58:	2100      	movs	r1, #0
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 ffa0 	bl	8007aa0 <xQueueReceiveFromISR>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d001      	beq.n	8006b6a <osSemaphoreWait+0x62>
      return osErrorOS;
 8006b66:	23ff      	movs	r3, #255	; 0xff
 8006b68:	e015      	b.n	8006b96 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d011      	beq.n	8006b94 <osSemaphoreWait+0x8c>
 8006b70:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <osSemaphoreWait+0x98>)
 8006b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b76:	601a      	str	r2, [r3, #0]
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	e008      	b.n	8006b94 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fe7b 	bl	8007880 <xQueueSemaphoreTake>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d001      	beq.n	8006b94 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006b90:	23ff      	movs	r3, #255	; 0xff
 8006b92:	e000      	b.n	8006b96 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	e000ed04 	.word	0xe000ed04

08006ba4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006bb4:	f7ff fe4e 	bl	8006854 <inHandlerMode>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d016      	beq.n	8006bec <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006bbe:	f107 0308 	add.w	r3, r7, #8
 8006bc2:	4619      	mov	r1, r3
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fce7 	bl	8007598 <xQueueGiveFromISR>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d001      	beq.n	8006bd4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006bd0:	23ff      	movs	r3, #255	; 0xff
 8006bd2:	e017      	b.n	8006c04 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d013      	beq.n	8006c02 <osSemaphoreRelease+0x5e>
 8006bda:	4b0c      	ldr	r3, [pc, #48]	; (8006c0c <osSemaphoreRelease+0x68>)
 8006bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	e00a      	b.n	8006c02 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8006bec:	2300      	movs	r3, #0
 8006bee:	2200      	movs	r2, #0
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fb32 	bl	800725c <xQueueGenericSend>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d001      	beq.n	8006c02 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8006bfe:	23ff      	movs	r3, #255	; 0xff
 8006c00:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006c02:	68fb      	ldr	r3, [r7, #12]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	e000ed04 	.word	0xe000ed04

08006c10 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006c10:	b590      	push	{r4, r7, lr}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d012      	beq.n	8006c48 <osMessageCreate+0x38>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00e      	beq.n	8006c48 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6818      	ldr	r0, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6859      	ldr	r1, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	689a      	ldr	r2, [r3, #8]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68dc      	ldr	r4, [r3, #12]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	9300      	str	r3, [sp, #0]
 8006c3e:	4623      	mov	r3, r4
 8006c40:	f000 f9e2 	bl	8007008 <xQueueGenericCreateStatic>
 8006c44:	4603      	mov	r3, r0
 8006c46:	e008      	b.n	8006c5a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6818      	ldr	r0, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	4619      	mov	r1, r3
 8006c54:	f000 fa55 	bl	8007102 <xQueueGenericCreate>
 8006c58:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd90      	pop	{r4, r7, pc}
	...

08006c64 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006c70:	2300      	movs	r3, #0
 8006c72:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d101      	bne.n	8006c82 <osMessagePut+0x1e>
    ticks = 1;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8006c82:	f7ff fde7 	bl	8006854 <inHandlerMode>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d018      	beq.n	8006cbe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006c8c:	f107 0210 	add.w	r2, r7, #16
 8006c90:	f107 0108 	add.w	r1, r7, #8
 8006c94:	2300      	movs	r3, #0
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 fbe2 	bl	8007460 <xQueueGenericSendFromISR>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d001      	beq.n	8006ca6 <osMessagePut+0x42>
      return osErrorOS;
 8006ca2:	23ff      	movs	r3, #255	; 0xff
 8006ca4:	e018      	b.n	8006cd8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d014      	beq.n	8006cd6 <osMessagePut+0x72>
 8006cac:	4b0c      	ldr	r3, [pc, #48]	; (8006ce0 <osMessagePut+0x7c>)
 8006cae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	e00b      	b.n	8006cd6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006cbe:	f107 0108 	add.w	r1, r7, #8
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 fac8 	bl	800725c <xQueueGenericSend>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d001      	beq.n	8006cd6 <osMessagePut+0x72>
      return osErrorOS;
 8006cd2:	23ff      	movs	r3, #255	; 0xff
 8006cd4:	e000      	b.n	8006cd8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3718      	adds	r7, #24
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}
 8006ce0:	e000ed04 	.word	0xe000ed04

08006ce4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006ce4:	b590      	push	{r4, r7, lr}
 8006ce6:	b08b      	sub	sp, #44	; 0x2c
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10a      	bne.n	8006d14 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8006cfe:	2380      	movs	r3, #128	; 0x80
 8006d00:	617b      	str	r3, [r7, #20]
    return event;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	461c      	mov	r4, r3
 8006d06:	f107 0314 	add.w	r3, r7, #20
 8006d0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006d0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d12:	e054      	b.n	8006dbe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006d14:	2300      	movs	r3, #0
 8006d16:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d22:	d103      	bne.n	8006d2c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d28:	627b      	str	r3, [r7, #36]	; 0x24
 8006d2a:	e009      	b.n	8006d40 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d006      	beq.n	8006d40 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8006d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <osMessageGet+0x5c>
      ticks = 1;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8006d40:	f7ff fd88 	bl	8006854 <inHandlerMode>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d01c      	beq.n	8006d84 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006d4a:	f107 0220 	add.w	r2, r7, #32
 8006d4e:	f107 0314 	add.w	r3, r7, #20
 8006d52:	3304      	adds	r3, #4
 8006d54:	4619      	mov	r1, r3
 8006d56:	68b8      	ldr	r0, [r7, #8]
 8006d58:	f000 fea2 	bl	8007aa0 <xQueueReceiveFromISR>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d102      	bne.n	8006d68 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8006d62:	2310      	movs	r3, #16
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	e001      	b.n	8006d6c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d01d      	beq.n	8006dae <osMessageGet+0xca>
 8006d72:	4b15      	ldr	r3, [pc, #84]	; (8006dc8 <osMessageGet+0xe4>)
 8006d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	e014      	b.n	8006dae <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006d84:	f107 0314 	add.w	r3, r7, #20
 8006d88:	3304      	adds	r3, #4
 8006d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	68b8      	ldr	r0, [r7, #8]
 8006d90:	f000 fc94 	bl	80076bc <xQueueReceive>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d102      	bne.n	8006da0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006d9a:	2310      	movs	r3, #16
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	e006      	b.n	8006dae <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <osMessageGet+0xc6>
 8006da6:	2300      	movs	r3, #0
 8006da8:	e000      	b.n	8006dac <osMessageGet+0xc8>
 8006daa:	2340      	movs	r3, #64	; 0x40
 8006dac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	461c      	mov	r4, r3
 8006db2:	f107 0314 	add.w	r3, r7, #20
 8006db6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006dba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	372c      	adds	r7, #44	; 0x2c
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd90      	pop	{r4, r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	e000ed04 	.word	0xe000ed04

08006dcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f103 0208 	add.w	r2, r3, #8
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006de4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f103 0208 	add.w	r2, r3, #8
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f103 0208 	add.w	r2, r3, #8
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e1a:	bf00      	nop
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e26:	b480      	push	{r7}
 8006e28:	b085      	sub	sp, #20
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	601a      	str	r2, [r3, #0]
}
 8006e62:	bf00      	nop
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e84:	d103      	bne.n	8006e8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	e00c      	b.n	8006ea8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3308      	adds	r3, #8
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	e002      	b.n	8006e9c <vListInsert+0x2e>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68ba      	ldr	r2, [r7, #8]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d2f6      	bcs.n	8006e96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	601a      	str	r2, [r3, #0]
}
 8006ed4:	bf00      	nop
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	6892      	ldr	r2, [r2, #8]
 8006ef6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6852      	ldr	r2, [r2, #4]
 8006f00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d103      	bne.n	8006f14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	1e5a      	subs	r2, r3, #1
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10b      	bne.n	8006f60 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	b672      	cpsid	i
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	b662      	cpsie	i
 8006f5c:	60bb      	str	r3, [r7, #8]
 8006f5e:	e7fe      	b.n	8006f5e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8006f60:	f002 f882 	bl	8009068 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6c:	68f9      	ldr	r1, [r7, #12]
 8006f6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f70:	fb01 f303 	mul.w	r3, r1, r3
 8006f74:	441a      	add	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f90:	3b01      	subs	r3, #1
 8006f92:	68f9      	ldr	r1, [r7, #12]
 8006f94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006f96:	fb01 f303 	mul.w	r3, r1, r3
 8006f9a:	441a      	add	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	22ff      	movs	r2, #255	; 0xff
 8006fa4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	22ff      	movs	r2, #255	; 0xff
 8006fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d114      	bne.n	8006fe0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	691b      	ldr	r3, [r3, #16]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d01a      	beq.n	8006ff4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	3310      	adds	r3, #16
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f001 fb50 	bl	8008668 <xTaskRemoveFromEventList>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d012      	beq.n	8006ff4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006fce:	4b0d      	ldr	r3, [pc, #52]	; (8007004 <xQueueGenericReset+0xd0>)
 8006fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	e009      	b.n	8006ff4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3310      	adds	r3, #16
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff fef1 	bl	8006dcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3324      	adds	r3, #36	; 0x24
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7ff feec 	bl	8006dcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ff4:	f002 f86a 	bl	80090cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ff8:	2301      	movs	r3, #1
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	e000ed04 	.word	0xe000ed04

08007008 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007008:	b580      	push	{r7, lr}
 800700a:	b08e      	sub	sp, #56	; 0x38
 800700c:	af02      	add	r7, sp, #8
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
 8007014:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10b      	bne.n	8007034 <xQueueGenericCreateStatic+0x2c>
 800701c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007020:	b672      	cpsid	i
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	b662      	cpsie	i
 8007030:	62bb      	str	r3, [r7, #40]	; 0x28
 8007032:	e7fe      	b.n	8007032 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10b      	bne.n	8007052 <xQueueGenericCreateStatic+0x4a>
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	b672      	cpsid	i
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	b662      	cpsie	i
 800704e:	627b      	str	r3, [r7, #36]	; 0x24
 8007050:	e7fe      	b.n	8007050 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d002      	beq.n	800705e <xQueueGenericCreateStatic+0x56>
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <xQueueGenericCreateStatic+0x5a>
 800705e:	2301      	movs	r3, #1
 8007060:	e000      	b.n	8007064 <xQueueGenericCreateStatic+0x5c>
 8007062:	2300      	movs	r3, #0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10b      	bne.n	8007080 <xQueueGenericCreateStatic+0x78>
 8007068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706c:	b672      	cpsid	i
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	b662      	cpsie	i
 800707c:	623b      	str	r3, [r7, #32]
 800707e:	e7fe      	b.n	800707e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d102      	bne.n	800708c <xQueueGenericCreateStatic+0x84>
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <xQueueGenericCreateStatic+0x88>
 800708c:	2301      	movs	r3, #1
 800708e:	e000      	b.n	8007092 <xQueueGenericCreateStatic+0x8a>
 8007090:	2300      	movs	r3, #0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10b      	bne.n	80070ae <xQueueGenericCreateStatic+0xa6>
 8007096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800709a:	b672      	cpsid	i
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	b662      	cpsie	i
 80070aa:	61fb      	str	r3, [r7, #28]
 80070ac:	e7fe      	b.n	80070ac <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80070ae:	2348      	movs	r3, #72	; 0x48
 80070b0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	2b48      	cmp	r3, #72	; 0x48
 80070b6:	d00b      	beq.n	80070d0 <xQueueGenericCreateStatic+0xc8>
 80070b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070bc:	b672      	cpsid	i
 80070be:	f383 8811 	msr	BASEPRI, r3
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	b662      	cpsie	i
 80070cc:	61bb      	str	r3, [r7, #24]
 80070ce:	e7fe      	b.n	80070ce <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80070d0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00d      	beq.n	80070f8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80070dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070e4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80070e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	4613      	mov	r3, r2
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	68b9      	ldr	r1, [r7, #8]
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f000 f846 	bl	8007184 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3730      	adds	r7, #48	; 0x30
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007102:	b580      	push	{r7, lr}
 8007104:	b08a      	sub	sp, #40	; 0x28
 8007106:	af02      	add	r7, sp, #8
 8007108:	60f8      	str	r0, [r7, #12]
 800710a:	60b9      	str	r1, [r7, #8]
 800710c:	4613      	mov	r3, r2
 800710e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10b      	bne.n	800712e <xQueueGenericCreate+0x2c>
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	b672      	cpsid	i
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	b662      	cpsie	i
 800712a:	613b      	str	r3, [r7, #16]
 800712c:	e7fe      	b.n	800712c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d102      	bne.n	800713a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007134:	2300      	movs	r3, #0
 8007136:	61fb      	str	r3, [r7, #28]
 8007138:	e004      	b.n	8007144 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	fb02 f303 	mul.w	r3, r2, r3
 8007142:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	3348      	adds	r3, #72	; 0x48
 8007148:	4618      	mov	r0, r3
 800714a:	f002 f8af 	bl	80092ac <pvPortMalloc>
 800714e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d011      	beq.n	800717a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	3348      	adds	r3, #72	; 0x48
 800715e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007168:	79fa      	ldrb	r2, [r7, #7]
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	4613      	mov	r3, r2
 8007170:	697a      	ldr	r2, [r7, #20]
 8007172:	68b9      	ldr	r1, [r7, #8]
 8007174:	68f8      	ldr	r0, [r7, #12]
 8007176:	f000 f805 	bl	8007184 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800717a:	69bb      	ldr	r3, [r7, #24]
	}
 800717c:	4618      	mov	r0, r3
 800717e:	3720      	adds	r7, #32
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	607a      	str	r2, [r7, #4]
 8007190:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d103      	bne.n	80071a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	69ba      	ldr	r2, [r7, #24]
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	e002      	b.n	80071a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80071a0:	69bb      	ldr	r3, [r7, #24]
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80071b2:	2101      	movs	r1, #1
 80071b4:	69b8      	ldr	r0, [r7, #24]
 80071b6:	f7ff febd 	bl	8006f34 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80071ba:	bf00      	nop
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b082      	sub	sp, #8
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00e      	beq.n	80071ee <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80071e2:	2300      	movs	r3, #0
 80071e4:	2200      	movs	r2, #0
 80071e6:	2100      	movs	r1, #0
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f837 	bl	800725c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80071ee:	bf00      	nop
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b086      	sub	sp, #24
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	4603      	mov	r3, r0
 80071fe:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007200:	2301      	movs	r3, #1
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	2300      	movs	r3, #0
 8007206:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007208:	79fb      	ldrb	r3, [r7, #7]
 800720a:	461a      	mov	r2, r3
 800720c:	6939      	ldr	r1, [r7, #16]
 800720e:	6978      	ldr	r0, [r7, #20]
 8007210:	f7ff ff77 	bl	8007102 <xQueueGenericCreate>
 8007214:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7ff ffd3 	bl	80071c2 <prvInitialiseMutex>

		return xNewQueue;
 800721c:	68fb      	ldr	r3, [r7, #12]
	}
 800721e:	4618      	mov	r0, r3
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007226:	b580      	push	{r7, lr}
 8007228:	b088      	sub	sp, #32
 800722a:	af02      	add	r7, sp, #8
 800722c:	4603      	mov	r3, r0
 800722e:	6039      	str	r1, [r7, #0]
 8007230:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007232:	2301      	movs	r3, #1
 8007234:	617b      	str	r3, [r7, #20]
 8007236:	2300      	movs	r3, #0
 8007238:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800723a:	79fb      	ldrb	r3, [r7, #7]
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2200      	movs	r2, #0
 8007242:	6939      	ldr	r1, [r7, #16]
 8007244:	6978      	ldr	r0, [r7, #20]
 8007246:	f7ff fedf 	bl	8007008 <xQueueGenericCreateStatic>
 800724a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f7ff ffb8 	bl	80071c2 <prvInitialiseMutex>

		return xNewQueue;
 8007252:	68fb      	ldr	r3, [r7, #12]
	}
 8007254:	4618      	mov	r0, r3
 8007256:	3718      	adds	r7, #24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b08e      	sub	sp, #56	; 0x38
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
 8007268:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800726a:	2300      	movs	r3, #0
 800726c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10b      	bne.n	8007290 <xQueueGenericSend+0x34>
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	b672      	cpsid	i
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	b662      	cpsie	i
 800728c:	62bb      	str	r3, [r7, #40]	; 0x28
 800728e:	e7fe      	b.n	800728e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d103      	bne.n	800729e <xQueueGenericSend+0x42>
 8007296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <xQueueGenericSend+0x46>
 800729e:	2301      	movs	r3, #1
 80072a0:	e000      	b.n	80072a4 <xQueueGenericSend+0x48>
 80072a2:	2300      	movs	r3, #0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10b      	bne.n	80072c0 <xQueueGenericSend+0x64>
 80072a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ac:	b672      	cpsid	i
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
 80072ba:	b662      	cpsie	i
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24
 80072be:	e7fe      	b.n	80072be <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d103      	bne.n	80072ce <xQueueGenericSend+0x72>
 80072c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d101      	bne.n	80072d2 <xQueueGenericSend+0x76>
 80072ce:	2301      	movs	r3, #1
 80072d0:	e000      	b.n	80072d4 <xQueueGenericSend+0x78>
 80072d2:	2300      	movs	r3, #0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10b      	bne.n	80072f0 <xQueueGenericSend+0x94>
 80072d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072dc:	b672      	cpsid	i
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	b662      	cpsie	i
 80072ec:	623b      	str	r3, [r7, #32]
 80072ee:	e7fe      	b.n	80072ee <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072f0:	f001 fb78 	bl	80089e4 <xTaskGetSchedulerState>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d102      	bne.n	8007300 <xQueueGenericSend+0xa4>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <xQueueGenericSend+0xa8>
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <xQueueGenericSend+0xaa>
 8007304:	2300      	movs	r3, #0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10b      	bne.n	8007322 <xQueueGenericSend+0xc6>
 800730a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730e:	b672      	cpsid	i
 8007310:	f383 8811 	msr	BASEPRI, r3
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	f3bf 8f4f 	dsb	sy
 800731c:	b662      	cpsie	i
 800731e:	61fb      	str	r3, [r7, #28]
 8007320:	e7fe      	b.n	8007320 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007322:	f001 fea1 	bl	8009068 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732e:	429a      	cmp	r2, r3
 8007330:	d302      	bcc.n	8007338 <xQueueGenericSend+0xdc>
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b02      	cmp	r3, #2
 8007336:	d129      	bne.n	800738c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	68b9      	ldr	r1, [r7, #8]
 800733c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800733e:	f000 fc4a 	bl	8007bd6 <prvCopyDataToQueue>
 8007342:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007348:	2b00      	cmp	r3, #0
 800734a:	d010      	beq.n	800736e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800734c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734e:	3324      	adds	r3, #36	; 0x24
 8007350:	4618      	mov	r0, r3
 8007352:	f001 f989 	bl	8008668 <xTaskRemoveFromEventList>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d013      	beq.n	8007384 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800735c:	4b3f      	ldr	r3, [pc, #252]	; (800745c <xQueueGenericSend+0x200>)
 800735e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	e00a      	b.n	8007384 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	2b00      	cmp	r3, #0
 8007372:	d007      	beq.n	8007384 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007374:	4b39      	ldr	r3, [pc, #228]	; (800745c <xQueueGenericSend+0x200>)
 8007376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	f3bf 8f4f 	dsb	sy
 8007380:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007384:	f001 fea2 	bl	80090cc <vPortExitCritical>
				return pdPASS;
 8007388:	2301      	movs	r3, #1
 800738a:	e063      	b.n	8007454 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d103      	bne.n	800739a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007392:	f001 fe9b 	bl	80090cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007396:	2300      	movs	r3, #0
 8007398:	e05c      	b.n	8007454 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800739a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739c:	2b00      	cmp	r3, #0
 800739e:	d106      	bne.n	80073ae <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80073a0:	f107 0314 	add.w	r3, r7, #20
 80073a4:	4618      	mov	r0, r3
 80073a6:	f001 f9c3 	bl	8008730 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80073aa:	2301      	movs	r3, #1
 80073ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80073ae:	f001 fe8d 	bl	80090cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80073b2:	f000 ff4f 	bl	8008254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80073b6:	f001 fe57 	bl	8009068 <vPortEnterCritical>
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073c0:	b25b      	sxtb	r3, r3
 80073c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073c6:	d103      	bne.n	80073d0 <xQueueGenericSend+0x174>
 80073c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073d6:	b25b      	sxtb	r3, r3
 80073d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073dc:	d103      	bne.n	80073e6 <xQueueGenericSend+0x18a>
 80073de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073e6:	f001 fe71 	bl	80090cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073ea:	1d3a      	adds	r2, r7, #4
 80073ec:	f107 0314 	add.w	r3, r7, #20
 80073f0:	4611      	mov	r1, r2
 80073f2:	4618      	mov	r0, r3
 80073f4:	f001 f9b2 	bl	800875c <xTaskCheckForTimeOut>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d124      	bne.n	8007448 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80073fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007400:	f000 fce1 	bl	8007dc6 <prvIsQueueFull>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d018      	beq.n	800743c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740c:	3310      	adds	r3, #16
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	4611      	mov	r1, r2
 8007412:	4618      	mov	r0, r3
 8007414:	f001 f902 	bl	800861c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007418:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800741a:	f000 fc6c 	bl	8007cf6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800741e:	f000 ff27 	bl	8008270 <xTaskResumeAll>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	f47f af7c 	bne.w	8007322 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800742a:	4b0c      	ldr	r3, [pc, #48]	; (800745c <xQueueGenericSend+0x200>)
 800742c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	f3bf 8f6f 	isb	sy
 800743a:	e772      	b.n	8007322 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800743c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800743e:	f000 fc5a 	bl	8007cf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007442:	f000 ff15 	bl	8008270 <xTaskResumeAll>
 8007446:	e76c      	b.n	8007322 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007448:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800744a:	f000 fc54 	bl	8007cf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800744e:	f000 ff0f 	bl	8008270 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007452:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007454:	4618      	mov	r0, r3
 8007456:	3738      	adds	r7, #56	; 0x38
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	e000ed04 	.word	0xe000ed04

08007460 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08e      	sub	sp, #56	; 0x38
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
 800746c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10b      	bne.n	8007490 <xQueueGenericSendFromISR+0x30>
 8007478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747c:	b672      	cpsid	i
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	b662      	cpsie	i
 800748c:	627b      	str	r3, [r7, #36]	; 0x24
 800748e:	e7fe      	b.n	800748e <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d103      	bne.n	800749e <xQueueGenericSendFromISR+0x3e>
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <xQueueGenericSendFromISR+0x42>
 800749e:	2301      	movs	r3, #1
 80074a0:	e000      	b.n	80074a4 <xQueueGenericSendFromISR+0x44>
 80074a2:	2300      	movs	r3, #0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10b      	bne.n	80074c0 <xQueueGenericSendFromISR+0x60>
 80074a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ac:	b672      	cpsid	i
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	b662      	cpsie	i
 80074bc:	623b      	str	r3, [r7, #32]
 80074be:	e7fe      	b.n	80074be <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d103      	bne.n	80074ce <xQueueGenericSendFromISR+0x6e>
 80074c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d101      	bne.n	80074d2 <xQueueGenericSendFromISR+0x72>
 80074ce:	2301      	movs	r3, #1
 80074d0:	e000      	b.n	80074d4 <xQueueGenericSendFromISR+0x74>
 80074d2:	2300      	movs	r3, #0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d10b      	bne.n	80074f0 <xQueueGenericSendFromISR+0x90>
 80074d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074dc:	b672      	cpsid	i
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	b662      	cpsie	i
 80074ec:	61fb      	str	r3, [r7, #28]
 80074ee:	e7fe      	b.n	80074ee <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074f0:	f001 fe9a 	bl	8009228 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80074f4:	f3ef 8211 	mrs	r2, BASEPRI
 80074f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074fc:	b672      	cpsid	i
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
 800750a:	b662      	cpsie	i
 800750c:	61ba      	str	r2, [r7, #24]
 800750e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007510:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007512:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751c:	429a      	cmp	r2, r3
 800751e:	d302      	bcc.n	8007526 <xQueueGenericSendFromISR+0xc6>
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b02      	cmp	r3, #2
 8007524:	d12c      	bne.n	8007580 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800752c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	68b9      	ldr	r1, [r7, #8]
 8007534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007536:	f000 fb4e 	bl	8007bd6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800753a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007542:	d112      	bne.n	800756a <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007548:	2b00      	cmp	r3, #0
 800754a:	d016      	beq.n	800757a <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800754c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754e:	3324      	adds	r3, #36	; 0x24
 8007550:	4618      	mov	r0, r3
 8007552:	f001 f889 	bl	8008668 <xTaskRemoveFromEventList>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00e      	beq.n	800757a <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00b      	beq.n	800757a <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2201      	movs	r2, #1
 8007566:	601a      	str	r2, [r3, #0]
 8007568:	e007      	b.n	800757a <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800756a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800756e:	3301      	adds	r3, #1
 8007570:	b2db      	uxtb	r3, r3
 8007572:	b25a      	sxtb	r2, r3
 8007574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800757a:	2301      	movs	r3, #1
 800757c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800757e:	e001      	b.n	8007584 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007580:	2300      	movs	r3, #0
 8007582:	637b      	str	r3, [r7, #52]	; 0x34
 8007584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007586:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800758e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007590:	4618      	mov	r0, r3
 8007592:	3738      	adds	r7, #56	; 0x38
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08e      	sub	sp, #56	; 0x38
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80075a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10b      	bne.n	80075c4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80075ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b0:	b672      	cpsid	i
 80075b2:	f383 8811 	msr	BASEPRI, r3
 80075b6:	f3bf 8f6f 	isb	sy
 80075ba:	f3bf 8f4f 	dsb	sy
 80075be:	b662      	cpsie	i
 80075c0:	623b      	str	r3, [r7, #32]
 80075c2:	e7fe      	b.n	80075c2 <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80075c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00b      	beq.n	80075e4 <xQueueGiveFromISR+0x4c>
 80075cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d0:	b672      	cpsid	i
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	b662      	cpsie	i
 80075e0:	61fb      	str	r3, [r7, #28]
 80075e2:	e7fe      	b.n	80075e2 <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d103      	bne.n	80075f4 <xQueueGiveFromISR+0x5c>
 80075ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <xQueueGiveFromISR+0x60>
 80075f4:	2301      	movs	r3, #1
 80075f6:	e000      	b.n	80075fa <xQueueGiveFromISR+0x62>
 80075f8:	2300      	movs	r3, #0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10b      	bne.n	8007616 <xQueueGiveFromISR+0x7e>
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	b672      	cpsid	i
 8007604:	f383 8811 	msr	BASEPRI, r3
 8007608:	f3bf 8f6f 	isb	sy
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	b662      	cpsie	i
 8007612:	61bb      	str	r3, [r7, #24]
 8007614:	e7fe      	b.n	8007614 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007616:	f001 fe07 	bl	8009228 <vPortValidateInterruptPriority>
	__asm volatile
 800761a:	f3ef 8211 	mrs	r2, BASEPRI
 800761e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007622:	b672      	cpsid	i
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	b662      	cpsie	i
 8007632:	617a      	str	r2, [r7, #20]
 8007634:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007636:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007638:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800763a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007646:	429a      	cmp	r2, r3
 8007648:	d22b      	bcs.n	80076a2 <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007656:	1c5a      	adds	r2, r3, #1
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800765c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007664:	d112      	bne.n	800768c <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766a:	2b00      	cmp	r3, #0
 800766c:	d016      	beq.n	800769c <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	3324      	adds	r3, #36	; 0x24
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fff8 	bl	8008668 <xTaskRemoveFromEventList>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00e      	beq.n	800769c <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00b      	beq.n	800769c <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	2201      	movs	r2, #1
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	e007      	b.n	800769c <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800768c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007690:	3301      	adds	r3, #1
 8007692:	b2db      	uxtb	r3, r3
 8007694:	b25a      	sxtb	r2, r3
 8007696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800769c:	2301      	movs	r3, #1
 800769e:	637b      	str	r3, [r7, #52]	; 0x34
 80076a0:	e001      	b.n	80076a6 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	637b      	str	r3, [r7, #52]	; 0x34
 80076a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3738      	adds	r7, #56	; 0x38
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
	...

080076bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b08c      	sub	sp, #48	; 0x30
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80076c8:	2300      	movs	r3, #0
 80076ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d10b      	bne.n	80076ee <xQueueReceive+0x32>
	__asm volatile
 80076d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076da:	b672      	cpsid	i
 80076dc:	f383 8811 	msr	BASEPRI, r3
 80076e0:	f3bf 8f6f 	isb	sy
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	b662      	cpsie	i
 80076ea:	623b      	str	r3, [r7, #32]
 80076ec:	e7fe      	b.n	80076ec <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d103      	bne.n	80076fc <xQueueReceive+0x40>
 80076f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <xQueueReceive+0x44>
 80076fc:	2301      	movs	r3, #1
 80076fe:	e000      	b.n	8007702 <xQueueReceive+0x46>
 8007700:	2300      	movs	r3, #0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10b      	bne.n	800771e <xQueueReceive+0x62>
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	b672      	cpsid	i
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	b662      	cpsie	i
 800771a:	61fb      	str	r3, [r7, #28]
 800771c:	e7fe      	b.n	800771c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800771e:	f001 f961 	bl	80089e4 <xTaskGetSchedulerState>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d102      	bne.n	800772e <xQueueReceive+0x72>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <xQueueReceive+0x76>
 800772e:	2301      	movs	r3, #1
 8007730:	e000      	b.n	8007734 <xQueueReceive+0x78>
 8007732:	2300      	movs	r3, #0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d10b      	bne.n	8007750 <xQueueReceive+0x94>
 8007738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773c:	b672      	cpsid	i
 800773e:	f383 8811 	msr	BASEPRI, r3
 8007742:	f3bf 8f6f 	isb	sy
 8007746:	f3bf 8f4f 	dsb	sy
 800774a:	b662      	cpsie	i
 800774c:	61bb      	str	r3, [r7, #24]
 800774e:	e7fe      	b.n	800774e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007750:	f001 fc8a 	bl	8009068 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007758:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	2b00      	cmp	r3, #0
 800775e:	d01f      	beq.n	80077a0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007760:	68b9      	ldr	r1, [r7, #8]
 8007762:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007764:	f000 faa1 	bl	8007caa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	1e5a      	subs	r2, r3, #1
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00f      	beq.n	8007798 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	3310      	adds	r3, #16
 800777c:	4618      	mov	r0, r3
 800777e:	f000 ff73 	bl	8008668 <xTaskRemoveFromEventList>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d007      	beq.n	8007798 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007788:	4b3c      	ldr	r3, [pc, #240]	; (800787c <xQueueReceive+0x1c0>)
 800778a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800778e:	601a      	str	r2, [r3, #0]
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007798:	f001 fc98 	bl	80090cc <vPortExitCritical>
				return pdPASS;
 800779c:	2301      	movs	r3, #1
 800779e:	e069      	b.n	8007874 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d103      	bne.n	80077ae <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077a6:	f001 fc91 	bl	80090cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80077aa:	2300      	movs	r3, #0
 80077ac:	e062      	b.n	8007874 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d106      	bne.n	80077c2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077b4:	f107 0310 	add.w	r3, r7, #16
 80077b8:	4618      	mov	r0, r3
 80077ba:	f000 ffb9 	bl	8008730 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077be:	2301      	movs	r3, #1
 80077c0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077c2:	f001 fc83 	bl	80090cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077c6:	f000 fd45 	bl	8008254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077ca:	f001 fc4d 	bl	8009068 <vPortEnterCritical>
 80077ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077d4:	b25b      	sxtb	r3, r3
 80077d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077da:	d103      	bne.n	80077e4 <xQueueReceive+0x128>
 80077dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077ea:	b25b      	sxtb	r3, r3
 80077ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077f0:	d103      	bne.n	80077fa <xQueueReceive+0x13e>
 80077f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077fa:	f001 fc67 	bl	80090cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80077fe:	1d3a      	adds	r2, r7, #4
 8007800:	f107 0310 	add.w	r3, r7, #16
 8007804:	4611      	mov	r1, r2
 8007806:	4618      	mov	r0, r3
 8007808:	f000 ffa8 	bl	800875c <xTaskCheckForTimeOut>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d123      	bne.n	800785a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007814:	f000 fac1 	bl	8007d9a <prvIsQueueEmpty>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d017      	beq.n	800784e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800781e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007820:	3324      	adds	r3, #36	; 0x24
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	4611      	mov	r1, r2
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fef8 	bl	800861c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800782c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800782e:	f000 fa62 	bl	8007cf6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007832:	f000 fd1d 	bl	8008270 <xTaskResumeAll>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d189      	bne.n	8007750 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800783c:	4b0f      	ldr	r3, [pc, #60]	; (800787c <xQueueReceive+0x1c0>)
 800783e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	f3bf 8f6f 	isb	sy
 800784c:	e780      	b.n	8007750 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800784e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007850:	f000 fa51 	bl	8007cf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007854:	f000 fd0c 	bl	8008270 <xTaskResumeAll>
 8007858:	e77a      	b.n	8007750 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800785a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800785c:	f000 fa4b 	bl	8007cf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007860:	f000 fd06 	bl	8008270 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007866:	f000 fa98 	bl	8007d9a <prvIsQueueEmpty>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	f43f af6f 	beq.w	8007750 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007872:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007874:	4618      	mov	r0, r3
 8007876:	3730      	adds	r7, #48	; 0x30
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	e000ed04 	.word	0xe000ed04

08007880 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b08e      	sub	sp, #56	; 0x38
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800788a:	2300      	movs	r3, #0
 800788c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007892:	2300      	movs	r3, #0
 8007894:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d10b      	bne.n	80078b4 <xQueueSemaphoreTake+0x34>
 800789c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a0:	b672      	cpsid	i
 80078a2:	f383 8811 	msr	BASEPRI, r3
 80078a6:	f3bf 8f6f 	isb	sy
 80078aa:	f3bf 8f4f 	dsb	sy
 80078ae:	b662      	cpsie	i
 80078b0:	623b      	str	r3, [r7, #32]
 80078b2:	e7fe      	b.n	80078b2 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80078b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00b      	beq.n	80078d4 <xQueueSemaphoreTake+0x54>
 80078bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c0:	b672      	cpsid	i
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	b662      	cpsie	i
 80078d0:	61fb      	str	r3, [r7, #28]
 80078d2:	e7fe      	b.n	80078d2 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078d4:	f001 f886 	bl	80089e4 <xTaskGetSchedulerState>
 80078d8:	4603      	mov	r3, r0
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d102      	bne.n	80078e4 <xQueueSemaphoreTake+0x64>
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <xQueueSemaphoreTake+0x68>
 80078e4:	2301      	movs	r3, #1
 80078e6:	e000      	b.n	80078ea <xQueueSemaphoreTake+0x6a>
 80078e8:	2300      	movs	r3, #0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10b      	bne.n	8007906 <xQueueSemaphoreTake+0x86>
 80078ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f2:	b672      	cpsid	i
 80078f4:	f383 8811 	msr	BASEPRI, r3
 80078f8:	f3bf 8f6f 	isb	sy
 80078fc:	f3bf 8f4f 	dsb	sy
 8007900:	b662      	cpsie	i
 8007902:	61bb      	str	r3, [r7, #24]
 8007904:	e7fe      	b.n	8007904 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007906:	f001 fbaf 	bl	8009068 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800790a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007912:	2b00      	cmp	r3, #0
 8007914:	d024      	beq.n	8007960 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007918:	1e5a      	subs	r2, r3, #1
 800791a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800791c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800791e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d104      	bne.n	8007930 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007926:	f001 fa1f 	bl	8008d68 <pvTaskIncrementMutexHeldCount>
 800792a:	4602      	mov	r2, r0
 800792c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800792e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00f      	beq.n	8007958 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793a:	3310      	adds	r3, #16
 800793c:	4618      	mov	r0, r3
 800793e:	f000 fe93 	bl	8008668 <xTaskRemoveFromEventList>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d007      	beq.n	8007958 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007948:	4b54      	ldr	r3, [pc, #336]	; (8007a9c <xQueueSemaphoreTake+0x21c>)
 800794a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007958:	f001 fbb8 	bl	80090cc <vPortExitCritical>
				return pdPASS;
 800795c:	2301      	movs	r3, #1
 800795e:	e098      	b.n	8007a92 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d112      	bne.n	800798c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00b      	beq.n	8007984 <xQueueSemaphoreTake+0x104>
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	b672      	cpsid	i
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	b662      	cpsie	i
 8007980:	617b      	str	r3, [r7, #20]
 8007982:	e7fe      	b.n	8007982 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007984:	f001 fba2 	bl	80090cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007988:	2300      	movs	r3, #0
 800798a:	e082      	b.n	8007a92 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800798c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800798e:	2b00      	cmp	r3, #0
 8007990:	d106      	bne.n	80079a0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007992:	f107 030c 	add.w	r3, r7, #12
 8007996:	4618      	mov	r0, r3
 8007998:	f000 feca 	bl	8008730 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800799c:	2301      	movs	r3, #1
 800799e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079a0:	f001 fb94 	bl	80090cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079a4:	f000 fc56 	bl	8008254 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079a8:	f001 fb5e 	bl	8009068 <vPortEnterCritical>
 80079ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079b2:	b25b      	sxtb	r3, r3
 80079b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079b8:	d103      	bne.n	80079c2 <xQueueSemaphoreTake+0x142>
 80079ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079c8:	b25b      	sxtb	r3, r3
 80079ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079ce:	d103      	bne.n	80079d8 <xQueueSemaphoreTake+0x158>
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	2200      	movs	r2, #0
 80079d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079d8:	f001 fb78 	bl	80090cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079dc:	463a      	mov	r2, r7
 80079de:	f107 030c 	add.w	r3, r7, #12
 80079e2:	4611      	mov	r1, r2
 80079e4:	4618      	mov	r0, r3
 80079e6:	f000 feb9 	bl	800875c <xTaskCheckForTimeOut>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d132      	bne.n	8007a56 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079f2:	f000 f9d2 	bl	8007d9a <prvIsQueueEmpty>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d026      	beq.n	8007a4a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d109      	bne.n	8007a18 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007a04:	f001 fb30 	bl	8009068 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0a:	689b      	ldr	r3, [r3, #8]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f001 f807 	bl	8008a20 <xTaskPriorityInherit>
 8007a12:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007a14:	f001 fb5a 	bl	80090cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1a:	3324      	adds	r3, #36	; 0x24
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	4611      	mov	r1, r2
 8007a20:	4618      	mov	r0, r3
 8007a22:	f000 fdfb 	bl	800861c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a28:	f000 f965 	bl	8007cf6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a2c:	f000 fc20 	bl	8008270 <xTaskResumeAll>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f47f af67 	bne.w	8007906 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007a38:	4b18      	ldr	r3, [pc, #96]	; (8007a9c <xQueueSemaphoreTake+0x21c>)
 8007a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a3e:	601a      	str	r2, [r3, #0]
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	e75d      	b.n	8007906 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007a4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a4c:	f000 f953 	bl	8007cf6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a50:	f000 fc0e 	bl	8008270 <xTaskResumeAll>
 8007a54:	e757      	b.n	8007906 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007a56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a58:	f000 f94d 	bl	8007cf6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a5c:	f000 fc08 	bl	8008270 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a62:	f000 f99a 	bl	8007d9a <prvIsQueueEmpty>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f43f af4c 	beq.w	8007906 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00d      	beq.n	8007a90 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007a74:	f001 faf8 	bl	8009068 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007a78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a7a:	f000 f894 	bl	8007ba6 <prvGetDisinheritPriorityAfterTimeout>
 8007a7e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a86:	4618      	mov	r0, r3
 8007a88:	f001 f8d2 	bl	8008c30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007a8c:	f001 fb1e 	bl	80090cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a90:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3738      	adds	r7, #56	; 0x38
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	e000ed04 	.word	0xe000ed04

08007aa0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08e      	sub	sp, #56	; 0x38
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10b      	bne.n	8007ace <xQueueReceiveFromISR+0x2e>
 8007ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aba:	b672      	cpsid	i
 8007abc:	f383 8811 	msr	BASEPRI, r3
 8007ac0:	f3bf 8f6f 	isb	sy
 8007ac4:	f3bf 8f4f 	dsb	sy
 8007ac8:	b662      	cpsie	i
 8007aca:	623b      	str	r3, [r7, #32]
 8007acc:	e7fe      	b.n	8007acc <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d103      	bne.n	8007adc <xQueueReceiveFromISR+0x3c>
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d101      	bne.n	8007ae0 <xQueueReceiveFromISR+0x40>
 8007adc:	2301      	movs	r3, #1
 8007ade:	e000      	b.n	8007ae2 <xQueueReceiveFromISR+0x42>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10b      	bne.n	8007afe <xQueueReceiveFromISR+0x5e>
 8007ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aea:	b672      	cpsid	i
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	b662      	cpsie	i
 8007afa:	61fb      	str	r3, [r7, #28]
 8007afc:	e7fe      	b.n	8007afc <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007afe:	f001 fb93 	bl	8009228 <vPortValidateInterruptPriority>
	__asm volatile
 8007b02:	f3ef 8211 	mrs	r2, BASEPRI
 8007b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0a:	b672      	cpsid	i
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	b662      	cpsie	i
 8007b1a:	61ba      	str	r2, [r7, #24]
 8007b1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007b1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d02f      	beq.n	8007b8e <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b38:	68b9      	ldr	r1, [r7, #8]
 8007b3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b3c:	f000 f8b5 	bl	8007caa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b42:	1e5a      	subs	r2, r3, #1
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007b48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b50:	d112      	bne.n	8007b78 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d016      	beq.n	8007b88 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5c:	3310      	adds	r3, #16
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 fd82 	bl	8008668 <xTaskRemoveFromEventList>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d00e      	beq.n	8007b88 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00b      	beq.n	8007b88 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2201      	movs	r2, #1
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	e007      	b.n	8007b88 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	b25a      	sxtb	r2, r3
 8007b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b8c:	e001      	b.n	8007b92 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
 8007b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b94:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3738      	adds	r7, #56	; 0x38
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}

08007ba6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b085      	sub	sp, #20
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d006      	beq.n	8007bc4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f1c3 0307 	rsb	r3, r3, #7
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	e001      	b.n	8007bc8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
	}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr

08007bd6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b086      	sub	sp, #24
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	60f8      	str	r0, [r7, #12]
 8007bde:	60b9      	str	r1, [r7, #8]
 8007be0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007be2:	2300      	movs	r3, #0
 8007be4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10d      	bne.n	8007c10 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d14d      	bne.n	8007c98 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f000 ff8d 	bl	8008b20 <xTaskPriorityDisinherit>
 8007c06:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	609a      	str	r2, [r3, #8]
 8007c0e:	e043      	b.n	8007c98 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d119      	bne.n	8007c4a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6858      	ldr	r0, [r3, #4]
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1e:	461a      	mov	r2, r3
 8007c20:	68b9      	ldr	r1, [r7, #8]
 8007c22:	f00d faec 	bl	80151fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	685a      	ldr	r2, [r3, #4]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2e:	441a      	add	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	685a      	ldr	r2, [r3, #4]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	429a      	cmp	r2, r3
 8007c3e:	d32b      	bcc.n	8007c98 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	605a      	str	r2, [r3, #4]
 8007c48:	e026      	b.n	8007c98 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	68d8      	ldr	r0, [r3, #12]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	461a      	mov	r2, r3
 8007c54:	68b9      	ldr	r1, [r7, #8]
 8007c56:	f00d fad2 	bl	80151fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	68da      	ldr	r2, [r3, #12]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c62:	425b      	negs	r3, r3
 8007c64:	441a      	add	r2, r3
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	68da      	ldr	r2, [r3, #12]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d207      	bcs.n	8007c86 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	689a      	ldr	r2, [r3, #8]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7e:	425b      	negs	r3, r3
 8007c80:	441a      	add	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d105      	bne.n	8007c98 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c92:	693b      	ldr	r3, [r7, #16]
 8007c94:	3b01      	subs	r3, #1
 8007c96:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	1c5a      	adds	r2, r3, #1
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007ca0:	697b      	ldr	r3, [r7, #20]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3718      	adds	r7, #24
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	6078      	str	r0, [r7, #4]
 8007cb2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d018      	beq.n	8007cee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68da      	ldr	r2, [r3, #12]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc4:	441a      	add	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	68da      	ldr	r2, [r3, #12]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d303      	bcc.n	8007cde <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68d9      	ldr	r1, [r3, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	6838      	ldr	r0, [r7, #0]
 8007cea:	f00d fa88 	bl	80151fe <memcpy>
	}
}
 8007cee:	bf00      	nop
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007cfe:	f001 f9b3 	bl	8009068 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d08:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d0a:	e011      	b.n	8007d30 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d012      	beq.n	8007d3a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	3324      	adds	r3, #36	; 0x24
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f000 fca5 	bl	8008668 <xTaskRemoveFromEventList>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d24:	f000 fd7e 	bl	8008824 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	3b01      	subs	r3, #1
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	dce9      	bgt.n	8007d0c <prvUnlockQueue+0x16>
 8007d38:	e000      	b.n	8007d3c <prvUnlockQueue+0x46>
					break;
 8007d3a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	22ff      	movs	r2, #255	; 0xff
 8007d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007d44:	f001 f9c2 	bl	80090cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d48:	f001 f98e 	bl	8009068 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d52:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d54:	e011      	b.n	8007d7a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d012      	beq.n	8007d84 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3310      	adds	r3, #16
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 fc80 	bl	8008668 <xTaskRemoveFromEventList>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d6e:	f000 fd59 	bl	8008824 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d72:	7bbb      	ldrb	r3, [r7, #14]
 8007d74:	3b01      	subs	r3, #1
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	dce9      	bgt.n	8007d56 <prvUnlockQueue+0x60>
 8007d82:	e000      	b.n	8007d86 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d84:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	22ff      	movs	r2, #255	; 0xff
 8007d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007d8e:	f001 f99d 	bl	80090cc <vPortExitCritical>
}
 8007d92:	bf00      	nop
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007da2:	f001 f961 	bl	8009068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d102      	bne.n	8007db4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007dae:	2301      	movs	r3, #1
 8007db0:	60fb      	str	r3, [r7, #12]
 8007db2:	e001      	b.n	8007db8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007db4:	2300      	movs	r3, #0
 8007db6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007db8:	f001 f988 	bl	80090cc <vPortExitCritical>

	return xReturn;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b084      	sub	sp, #16
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007dce:	f001 f94b 	bl	8009068 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d102      	bne.n	8007de4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007dde:	2301      	movs	r3, #1
 8007de0:	60fb      	str	r3, [r7, #12]
 8007de2:	e001      	b.n	8007de8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007de4:	2300      	movs	r3, #0
 8007de6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007de8:	f001 f970 	bl	80090cc <vPortExitCritical>

	return xReturn;
 8007dec:	68fb      	ldr	r3, [r7, #12]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b08e      	sub	sp, #56	; 0x38
 8007dfa:	af04      	add	r7, sp, #16
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	607a      	str	r2, [r7, #4]
 8007e02:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10b      	bne.n	8007e22 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e0e:	b672      	cpsid	i
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	b662      	cpsie	i
 8007e1e:	623b      	str	r3, [r7, #32]
 8007e20:	e7fe      	b.n	8007e20 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8007e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d10b      	bne.n	8007e40 <xTaskCreateStatic+0x4a>
 8007e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2c:	b672      	cpsid	i
 8007e2e:	f383 8811 	msr	BASEPRI, r3
 8007e32:	f3bf 8f6f 	isb	sy
 8007e36:	f3bf 8f4f 	dsb	sy
 8007e3a:	b662      	cpsie	i
 8007e3c:	61fb      	str	r3, [r7, #28]
 8007e3e:	e7fe      	b.n	8007e3e <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e40:	2354      	movs	r3, #84	; 0x54
 8007e42:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	2b54      	cmp	r3, #84	; 0x54
 8007e48:	d00b      	beq.n	8007e62 <xTaskCreateStatic+0x6c>
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	b672      	cpsid	i
 8007e50:	f383 8811 	msr	BASEPRI, r3
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	f3bf 8f4f 	dsb	sy
 8007e5c:	b662      	cpsie	i
 8007e5e:	61bb      	str	r3, [r7, #24]
 8007e60:	e7fe      	b.n	8007e60 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d01e      	beq.n	8007ea8 <xTaskCreateStatic+0xb2>
 8007e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d01b      	beq.n	8007ea8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	2202      	movs	r2, #2
 8007e7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e82:	2300      	movs	r3, #0
 8007e84:	9303      	str	r3, [sp, #12]
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	9302      	str	r3, [sp, #8]
 8007e8a:	f107 0314 	add.w	r3, r7, #20
 8007e8e:	9301      	str	r3, [sp, #4]
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	68b9      	ldr	r1, [r7, #8]
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f000 f850 	bl	8007f40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007ea2:	f000 f8d5 	bl	8008050 <prvAddNewTaskToReadyList>
 8007ea6:	e001      	b.n	8007eac <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007eac:	697b      	ldr	r3, [r7, #20]
	}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3728      	adds	r7, #40	; 0x28
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b08c      	sub	sp, #48	; 0x30
 8007eba:	af04      	add	r7, sp, #16
 8007ebc:	60f8      	str	r0, [r7, #12]
 8007ebe:	60b9      	str	r1, [r7, #8]
 8007ec0:	603b      	str	r3, [r7, #0]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007ec6:	88fb      	ldrh	r3, [r7, #6]
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f001 f9ee 	bl	80092ac <pvPortMalloc>
 8007ed0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d00e      	beq.n	8007ef6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ed8:	2054      	movs	r0, #84	; 0x54
 8007eda:	f001 f9e7 	bl	80092ac <pvPortMalloc>
 8007ede:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d003      	beq.n	8007eee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	631a      	str	r2, [r3, #48]	; 0x30
 8007eec:	e005      	b.n	8007efa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007eee:	6978      	ldr	r0, [r7, #20]
 8007ef0:	f001 faa4 	bl	800943c <vPortFree>
 8007ef4:	e001      	b.n	8007efa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d017      	beq.n	8007f30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007f00:	69fb      	ldr	r3, [r7, #28]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007f08:	88fa      	ldrh	r2, [r7, #6]
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	9303      	str	r3, [sp, #12]
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	9302      	str	r3, [sp, #8]
 8007f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f14:	9301      	str	r3, [sp, #4]
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	68b9      	ldr	r1, [r7, #8]
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 f80e 	bl	8007f40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f24:	69f8      	ldr	r0, [r7, #28]
 8007f26:	f000 f893 	bl	8008050 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	61bb      	str	r3, [r7, #24]
 8007f2e:	e002      	b.n	8007f36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007f36:	69bb      	ldr	r3, [r7, #24]
	}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3720      	adds	r7, #32
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
 8007f4c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007f58:	440b      	add	r3, r1
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	f023 0307 	bic.w	r3, r3, #7
 8007f66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00b      	beq.n	8007f8a <prvInitialiseNewTask+0x4a>
 8007f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f76:	b672      	cpsid	i
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	b662      	cpsie	i
 8007f86:	617b      	str	r3, [r7, #20]
 8007f88:	e7fe      	b.n	8007f88 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d01f      	beq.n	8007fd0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f90:	2300      	movs	r3, #0
 8007f92:	61fb      	str	r3, [r7, #28]
 8007f94:	e012      	b.n	8007fbc <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	7819      	ldrb	r1, [r3, #0]
 8007f9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	3334      	adds	r3, #52	; 0x34
 8007fa6:	460a      	mov	r2, r1
 8007fa8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	4413      	add	r3, r2
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d006      	beq.n	8007fc4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	61fb      	str	r3, [r7, #28]
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	2b0f      	cmp	r3, #15
 8007fc0:	d9e9      	bls.n	8007f96 <prvInitialiseNewTask+0x56>
 8007fc2:	e000      	b.n	8007fc6 <prvInitialiseNewTask+0x86>
			{
				break;
 8007fc4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007fce:	e003      	b.n	8007fd8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fda:	2b06      	cmp	r3, #6
 8007fdc:	d901      	bls.n	8007fe2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007fde:	2306      	movs	r3, #6
 8007fe0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fe6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7fe ff07 	bl	8006e0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	3318      	adds	r3, #24
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe ff02 	bl	8006e0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800800c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800800e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008010:	f1c3 0207 	rsb	r2, r3, #7
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800801c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	2200      	movs	r2, #0
 8008022:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	68f9      	ldr	r1, [r7, #12]
 8008030:	69b8      	ldr	r0, [r7, #24]
 8008032:	f000 ff13 	bl	8008e5c <pxPortInitialiseStack>
 8008036:	4602      	mov	r2, r0
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803e:	2b00      	cmp	r3, #0
 8008040:	d002      	beq.n	8008048 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008046:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008048:	bf00      	nop
 800804a:	3720      	adds	r7, #32
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008058:	f001 f806 	bl	8009068 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800805c:	4b2a      	ldr	r3, [pc, #168]	; (8008108 <prvAddNewTaskToReadyList+0xb8>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3301      	adds	r3, #1
 8008062:	4a29      	ldr	r2, [pc, #164]	; (8008108 <prvAddNewTaskToReadyList+0xb8>)
 8008064:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008066:	4b29      	ldr	r3, [pc, #164]	; (800810c <prvAddNewTaskToReadyList+0xbc>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d109      	bne.n	8008082 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800806e:	4a27      	ldr	r2, [pc, #156]	; (800810c <prvAddNewTaskToReadyList+0xbc>)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008074:	4b24      	ldr	r3, [pc, #144]	; (8008108 <prvAddNewTaskToReadyList+0xb8>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d110      	bne.n	800809e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800807c:	f000 fbf6 	bl	800886c <prvInitialiseTaskLists>
 8008080:	e00d      	b.n	800809e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008082:	4b23      	ldr	r3, [pc, #140]	; (8008110 <prvAddNewTaskToReadyList+0xc0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d109      	bne.n	800809e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800808a:	4b20      	ldr	r3, [pc, #128]	; (800810c <prvAddNewTaskToReadyList+0xbc>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008094:	429a      	cmp	r2, r3
 8008096:	d802      	bhi.n	800809e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008098:	4a1c      	ldr	r2, [pc, #112]	; (800810c <prvAddNewTaskToReadyList+0xbc>)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800809e:	4b1d      	ldr	r3, [pc, #116]	; (8008114 <prvAddNewTaskToReadyList+0xc4>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3301      	adds	r3, #1
 80080a4:	4a1b      	ldr	r2, [pc, #108]	; (8008114 <prvAddNewTaskToReadyList+0xc4>)
 80080a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ac:	2201      	movs	r2, #1
 80080ae:	409a      	lsls	r2, r3
 80080b0:	4b19      	ldr	r3, [pc, #100]	; (8008118 <prvAddNewTaskToReadyList+0xc8>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	4a18      	ldr	r2, [pc, #96]	; (8008118 <prvAddNewTaskToReadyList+0xc8>)
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080be:	4613      	mov	r3, r2
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	4a15      	ldr	r2, [pc, #84]	; (800811c <prvAddNewTaskToReadyList+0xcc>)
 80080c8:	441a      	add	r2, r3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	3304      	adds	r3, #4
 80080ce:	4619      	mov	r1, r3
 80080d0:	4610      	mov	r0, r2
 80080d2:	f7fe fea8 	bl	8006e26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080d6:	f000 fff9 	bl	80090cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080da:	4b0d      	ldr	r3, [pc, #52]	; (8008110 <prvAddNewTaskToReadyList+0xc0>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00e      	beq.n	8008100 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080e2:	4b0a      	ldr	r3, [pc, #40]	; (800810c <prvAddNewTaskToReadyList+0xbc>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d207      	bcs.n	8008100 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080f0:	4b0b      	ldr	r3, [pc, #44]	; (8008120 <prvAddNewTaskToReadyList+0xd0>)
 80080f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	f3bf 8f4f 	dsb	sy
 80080fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008100:	bf00      	nop
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	2000040c 	.word	0x2000040c
 800810c:	2000030c 	.word	0x2000030c
 8008110:	20000418 	.word	0x20000418
 8008114:	20000428 	.word	0x20000428
 8008118:	20000414 	.word	0x20000414
 800811c:	20000310 	.word	0x20000310
 8008120:	e000ed04 	.word	0xe000ed04

08008124 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800812c:	2300      	movs	r3, #0
 800812e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d018      	beq.n	8008168 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008136:	4b14      	ldr	r3, [pc, #80]	; (8008188 <vTaskDelay+0x64>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00b      	beq.n	8008156 <vTaskDelay+0x32>
 800813e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008142:	b672      	cpsid	i
 8008144:	f383 8811 	msr	BASEPRI, r3
 8008148:	f3bf 8f6f 	isb	sy
 800814c:	f3bf 8f4f 	dsb	sy
 8008150:	b662      	cpsie	i
 8008152:	60bb      	str	r3, [r7, #8]
 8008154:	e7fe      	b.n	8008154 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8008156:	f000 f87d 	bl	8008254 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800815a:	2100      	movs	r1, #0
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 fe17 	bl	8008d90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008162:	f000 f885 	bl	8008270 <xTaskResumeAll>
 8008166:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d107      	bne.n	800817e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800816e:	4b07      	ldr	r3, [pc, #28]	; (800818c <vTaskDelay+0x68>)
 8008170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800817e:	bf00      	nop
 8008180:	3710      	adds	r7, #16
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20000434 	.word	0x20000434
 800818c:	e000ed04 	.word	0xe000ed04

08008190 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b08a      	sub	sp, #40	; 0x28
 8008194:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008196:	2300      	movs	r3, #0
 8008198:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800819a:	2300      	movs	r3, #0
 800819c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800819e:	463a      	mov	r2, r7
 80081a0:	1d39      	adds	r1, r7, #4
 80081a2:	f107 0308 	add.w	r3, r7, #8
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7f8 fae6 	bl	8000778 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	9202      	str	r2, [sp, #8]
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	2300      	movs	r3, #0
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	2300      	movs	r3, #0
 80081bc:	460a      	mov	r2, r1
 80081be:	491f      	ldr	r1, [pc, #124]	; (800823c <vTaskStartScheduler+0xac>)
 80081c0:	481f      	ldr	r0, [pc, #124]	; (8008240 <vTaskStartScheduler+0xb0>)
 80081c2:	f7ff fe18 	bl	8007df6 <xTaskCreateStatic>
 80081c6:	4602      	mov	r2, r0
 80081c8:	4b1e      	ldr	r3, [pc, #120]	; (8008244 <vTaskStartScheduler+0xb4>)
 80081ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081cc:	4b1d      	ldr	r3, [pc, #116]	; (8008244 <vTaskStartScheduler+0xb4>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d002      	beq.n	80081da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081d4:	2301      	movs	r3, #1
 80081d6:	617b      	str	r3, [r7, #20]
 80081d8:	e001      	b.n	80081de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081da:	2300      	movs	r3, #0
 80081dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d117      	bne.n	8008214 <vTaskStartScheduler+0x84>
 80081e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e8:	b672      	cpsid	i
 80081ea:	f383 8811 	msr	BASEPRI, r3
 80081ee:	f3bf 8f6f 	isb	sy
 80081f2:	f3bf 8f4f 	dsb	sy
 80081f6:	b662      	cpsie	i
 80081f8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081fa:	4b13      	ldr	r3, [pc, #76]	; (8008248 <vTaskStartScheduler+0xb8>)
 80081fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008200:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008202:	4b12      	ldr	r3, [pc, #72]	; (800824c <vTaskStartScheduler+0xbc>)
 8008204:	2201      	movs	r2, #1
 8008206:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008208:	4b11      	ldr	r3, [pc, #68]	; (8008250 <vTaskStartScheduler+0xc0>)
 800820a:	2200      	movs	r2, #0
 800820c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800820e:	f000 feaf 	bl	8008f70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008212:	e00f      	b.n	8008234 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800821a:	d10b      	bne.n	8008234 <vTaskStartScheduler+0xa4>
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	b672      	cpsid	i
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	b662      	cpsie	i
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	e7fe      	b.n	8008232 <vTaskStartScheduler+0xa2>
}
 8008234:	bf00      	nop
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	080164f8 	.word	0x080164f8
 8008240:	0800883d 	.word	0x0800883d
 8008244:	20000430 	.word	0x20000430
 8008248:	2000042c 	.word	0x2000042c
 800824c:	20000418 	.word	0x20000418
 8008250:	20000410 	.word	0x20000410

08008254 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008254:	b480      	push	{r7}
 8008256:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008258:	4b04      	ldr	r3, [pc, #16]	; (800826c <vTaskSuspendAll+0x18>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	3301      	adds	r3, #1
 800825e:	4a03      	ldr	r2, [pc, #12]	; (800826c <vTaskSuspendAll+0x18>)
 8008260:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008262:	bf00      	nop
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	20000434 	.word	0x20000434

08008270 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008276:	2300      	movs	r3, #0
 8008278:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800827a:	2300      	movs	r3, #0
 800827c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800827e:	4b42      	ldr	r3, [pc, #264]	; (8008388 <xTaskResumeAll+0x118>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10b      	bne.n	800829e <xTaskResumeAll+0x2e>
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	b672      	cpsid	i
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	b662      	cpsie	i
 800829a:	603b      	str	r3, [r7, #0]
 800829c:	e7fe      	b.n	800829c <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800829e:	f000 fee3 	bl	8009068 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082a2:	4b39      	ldr	r3, [pc, #228]	; (8008388 <xTaskResumeAll+0x118>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3b01      	subs	r3, #1
 80082a8:	4a37      	ldr	r2, [pc, #220]	; (8008388 <xTaskResumeAll+0x118>)
 80082aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082ac:	4b36      	ldr	r3, [pc, #216]	; (8008388 <xTaskResumeAll+0x118>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d161      	bne.n	8008378 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082b4:	4b35      	ldr	r3, [pc, #212]	; (800838c <xTaskResumeAll+0x11c>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d05d      	beq.n	8008378 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082bc:	e02e      	b.n	800831c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082be:	4b34      	ldr	r3, [pc, #208]	; (8008390 <xTaskResumeAll+0x120>)
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	68db      	ldr	r3, [r3, #12]
 80082c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	3318      	adds	r3, #24
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe fe08 	bl	8006ee0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4618      	mov	r0, r3
 80082d6:	f7fe fe03 	bl	8006ee0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082de:	2201      	movs	r2, #1
 80082e0:	409a      	lsls	r2, r3
 80082e2:	4b2c      	ldr	r3, [pc, #176]	; (8008394 <xTaskResumeAll+0x124>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	4a2a      	ldr	r2, [pc, #168]	; (8008394 <xTaskResumeAll+0x124>)
 80082ea:	6013      	str	r3, [r2, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f0:	4613      	mov	r3, r2
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	4413      	add	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4a27      	ldr	r2, [pc, #156]	; (8008398 <xTaskResumeAll+0x128>)
 80082fa:	441a      	add	r2, r3
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3304      	adds	r3, #4
 8008300:	4619      	mov	r1, r3
 8008302:	4610      	mov	r0, r2
 8008304:	f7fe fd8f 	bl	8006e26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800830c:	4b23      	ldr	r3, [pc, #140]	; (800839c <xTaskResumeAll+0x12c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008312:	429a      	cmp	r2, r3
 8008314:	d302      	bcc.n	800831c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008316:	4b22      	ldr	r3, [pc, #136]	; (80083a0 <xTaskResumeAll+0x130>)
 8008318:	2201      	movs	r2, #1
 800831a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800831c:	4b1c      	ldr	r3, [pc, #112]	; (8008390 <xTaskResumeAll+0x120>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1cc      	bne.n	80082be <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800832a:	f000 fb3b 	bl	80089a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800832e:	4b1d      	ldr	r3, [pc, #116]	; (80083a4 <xTaskResumeAll+0x134>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d010      	beq.n	800835c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800833a:	f000 f859 	bl	80083f0 <xTaskIncrementTick>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d002      	beq.n	800834a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008344:	4b16      	ldr	r3, [pc, #88]	; (80083a0 <xTaskResumeAll+0x130>)
 8008346:	2201      	movs	r2, #1
 8008348:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	3b01      	subs	r3, #1
 800834e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d1f1      	bne.n	800833a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8008356:	4b13      	ldr	r3, [pc, #76]	; (80083a4 <xTaskResumeAll+0x134>)
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800835c:	4b10      	ldr	r3, [pc, #64]	; (80083a0 <xTaskResumeAll+0x130>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d009      	beq.n	8008378 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008364:	2301      	movs	r3, #1
 8008366:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008368:	4b0f      	ldr	r3, [pc, #60]	; (80083a8 <xTaskResumeAll+0x138>)
 800836a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	f3bf 8f4f 	dsb	sy
 8008374:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008378:	f000 fea8 	bl	80090cc <vPortExitCritical>

	return xAlreadyYielded;
 800837c:	68bb      	ldr	r3, [r7, #8]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	20000434 	.word	0x20000434
 800838c:	2000040c 	.word	0x2000040c
 8008390:	200003cc 	.word	0x200003cc
 8008394:	20000414 	.word	0x20000414
 8008398:	20000310 	.word	0x20000310
 800839c:	2000030c 	.word	0x2000030c
 80083a0:	20000420 	.word	0x20000420
 80083a4:	2000041c 	.word	0x2000041c
 80083a8:	e000ed04 	.word	0xe000ed04

080083ac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083b2:	4b05      	ldr	r3, [pc, #20]	; (80083c8 <xTaskGetTickCount+0x1c>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083b8:	687b      	ldr	r3, [r7, #4]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	20000410 	.word	0x20000410

080083cc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083d2:	f000 ff29 	bl	8009228 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80083d6:	2300      	movs	r3, #0
 80083d8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80083da:	4b04      	ldr	r3, [pc, #16]	; (80083ec <xTaskGetTickCountFromISR+0x20>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80083e0:	683b      	ldr	r3, [r7, #0]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20000410 	.word	0x20000410

080083f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083f6:	2300      	movs	r3, #0
 80083f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083fa:	4b4f      	ldr	r3, [pc, #316]	; (8008538 <xTaskIncrementTick+0x148>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	f040 8089 	bne.w	8008516 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008404:	4b4d      	ldr	r3, [pc, #308]	; (800853c <xTaskIncrementTick+0x14c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	3301      	adds	r3, #1
 800840a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800840c:	4a4b      	ldr	r2, [pc, #300]	; (800853c <xTaskIncrementTick+0x14c>)
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d121      	bne.n	800845c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008418:	4b49      	ldr	r3, [pc, #292]	; (8008540 <xTaskIncrementTick+0x150>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00b      	beq.n	800843a <xTaskIncrementTick+0x4a>
 8008422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008426:	b672      	cpsid	i
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	b662      	cpsie	i
 8008436:	603b      	str	r3, [r7, #0]
 8008438:	e7fe      	b.n	8008438 <xTaskIncrementTick+0x48>
 800843a:	4b41      	ldr	r3, [pc, #260]	; (8008540 <xTaskIncrementTick+0x150>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	4b40      	ldr	r3, [pc, #256]	; (8008544 <xTaskIncrementTick+0x154>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a3e      	ldr	r2, [pc, #248]	; (8008540 <xTaskIncrementTick+0x150>)
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	4a3e      	ldr	r2, [pc, #248]	; (8008544 <xTaskIncrementTick+0x154>)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	6013      	str	r3, [r2, #0]
 800844e:	4b3e      	ldr	r3, [pc, #248]	; (8008548 <xTaskIncrementTick+0x158>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3301      	adds	r3, #1
 8008454:	4a3c      	ldr	r2, [pc, #240]	; (8008548 <xTaskIncrementTick+0x158>)
 8008456:	6013      	str	r3, [r2, #0]
 8008458:	f000 faa4 	bl	80089a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800845c:	4b3b      	ldr	r3, [pc, #236]	; (800854c <xTaskIncrementTick+0x15c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	429a      	cmp	r2, r3
 8008464:	d348      	bcc.n	80084f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008466:	4b36      	ldr	r3, [pc, #216]	; (8008540 <xTaskIncrementTick+0x150>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d104      	bne.n	800847a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008470:	4b36      	ldr	r3, [pc, #216]	; (800854c <xTaskIncrementTick+0x15c>)
 8008472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008476:	601a      	str	r2, [r3, #0]
					break;
 8008478:	e03e      	b.n	80084f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800847a:	4b31      	ldr	r3, [pc, #196]	; (8008540 <xTaskIncrementTick+0x150>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	429a      	cmp	r2, r3
 8008490:	d203      	bcs.n	800849a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008492:	4a2e      	ldr	r2, [pc, #184]	; (800854c <xTaskIncrementTick+0x15c>)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008498:	e02e      	b.n	80084f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	3304      	adds	r3, #4
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fe fd1e 	bl	8006ee0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d004      	beq.n	80084b6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	3318      	adds	r3, #24
 80084b0:	4618      	mov	r0, r3
 80084b2:	f7fe fd15 	bl	8006ee0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ba:	2201      	movs	r2, #1
 80084bc:	409a      	lsls	r2, r3
 80084be:	4b24      	ldr	r3, [pc, #144]	; (8008550 <xTaskIncrementTick+0x160>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	4a22      	ldr	r2, [pc, #136]	; (8008550 <xTaskIncrementTick+0x160>)
 80084c6:	6013      	str	r3, [r2, #0]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084cc:	4613      	mov	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4a1f      	ldr	r2, [pc, #124]	; (8008554 <xTaskIncrementTick+0x164>)
 80084d6:	441a      	add	r2, r3
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	3304      	adds	r3, #4
 80084dc:	4619      	mov	r1, r3
 80084de:	4610      	mov	r0, r2
 80084e0:	f7fe fca1 	bl	8006e26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e8:	4b1b      	ldr	r3, [pc, #108]	; (8008558 <xTaskIncrementTick+0x168>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ee:	429a      	cmp	r2, r3
 80084f0:	d3b9      	bcc.n	8008466 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80084f2:	2301      	movs	r3, #1
 80084f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084f6:	e7b6      	b.n	8008466 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084f8:	4b17      	ldr	r3, [pc, #92]	; (8008558 <xTaskIncrementTick+0x168>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fe:	4915      	ldr	r1, [pc, #84]	; (8008554 <xTaskIncrementTick+0x164>)
 8008500:	4613      	mov	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	440b      	add	r3, r1
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d907      	bls.n	8008520 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8008510:	2301      	movs	r3, #1
 8008512:	617b      	str	r3, [r7, #20]
 8008514:	e004      	b.n	8008520 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008516:	4b11      	ldr	r3, [pc, #68]	; (800855c <xTaskIncrementTick+0x16c>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3301      	adds	r3, #1
 800851c:	4a0f      	ldr	r2, [pc, #60]	; (800855c <xTaskIncrementTick+0x16c>)
 800851e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008520:	4b0f      	ldr	r3, [pc, #60]	; (8008560 <xTaskIncrementTick+0x170>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d001      	beq.n	800852c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8008528:	2301      	movs	r3, #1
 800852a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800852c:	697b      	ldr	r3, [r7, #20]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3718      	adds	r7, #24
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}
 8008536:	bf00      	nop
 8008538:	20000434 	.word	0x20000434
 800853c:	20000410 	.word	0x20000410
 8008540:	200003c4 	.word	0x200003c4
 8008544:	200003c8 	.word	0x200003c8
 8008548:	20000424 	.word	0x20000424
 800854c:	2000042c 	.word	0x2000042c
 8008550:	20000414 	.word	0x20000414
 8008554:	20000310 	.word	0x20000310
 8008558:	2000030c 	.word	0x2000030c
 800855c:	2000041c 	.word	0x2000041c
 8008560:	20000420 	.word	0x20000420

08008564 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008564:	b480      	push	{r7}
 8008566:	b087      	sub	sp, #28
 8008568:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800856a:	4b27      	ldr	r3, [pc, #156]	; (8008608 <vTaskSwitchContext+0xa4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008572:	4b26      	ldr	r3, [pc, #152]	; (800860c <vTaskSwitchContext+0xa8>)
 8008574:	2201      	movs	r2, #1
 8008576:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008578:	e040      	b.n	80085fc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800857a:	4b24      	ldr	r3, [pc, #144]	; (800860c <vTaskSwitchContext+0xa8>)
 800857c:	2200      	movs	r2, #0
 800857e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008580:	4b23      	ldr	r3, [pc, #140]	; (8008610 <vTaskSwitchContext+0xac>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	fab3 f383 	clz	r3, r3
 800858c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800858e:	7afb      	ldrb	r3, [r7, #11]
 8008590:	f1c3 031f 	rsb	r3, r3, #31
 8008594:	617b      	str	r3, [r7, #20]
 8008596:	491f      	ldr	r1, [pc, #124]	; (8008614 <vTaskSwitchContext+0xb0>)
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	4613      	mov	r3, r2
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	440b      	add	r3, r1
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10b      	bne.n	80085c2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ae:	b672      	cpsid	i
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	b662      	cpsie	i
 80085be:	607b      	str	r3, [r7, #4]
 80085c0:	e7fe      	b.n	80085c0 <vTaskSwitchContext+0x5c>
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	4613      	mov	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4413      	add	r3, r2
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	4a11      	ldr	r2, [pc, #68]	; (8008614 <vTaskSwitchContext+0xb0>)
 80085ce:	4413      	add	r3, r2
 80085d0:	613b      	str	r3, [r7, #16]
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	685a      	ldr	r2, [r3, #4]
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	605a      	str	r2, [r3, #4]
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	3308      	adds	r3, #8
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d104      	bne.n	80085f2 <vTaskSwitchContext+0x8e>
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	605a      	str	r2, [r3, #4]
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	4a07      	ldr	r2, [pc, #28]	; (8008618 <vTaskSwitchContext+0xb4>)
 80085fa:	6013      	str	r3, [r2, #0]
}
 80085fc:	bf00      	nop
 80085fe:	371c      	adds	r7, #28
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr
 8008608:	20000434 	.word	0x20000434
 800860c:	20000420 	.word	0x20000420
 8008610:	20000414 	.word	0x20000414
 8008614:	20000310 	.word	0x20000310
 8008618:	2000030c 	.word	0x2000030c

0800861c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10b      	bne.n	8008644 <vTaskPlaceOnEventList+0x28>
 800862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008630:	b672      	cpsid	i
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	b662      	cpsie	i
 8008640:	60fb      	str	r3, [r7, #12]
 8008642:	e7fe      	b.n	8008642 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008644:	4b07      	ldr	r3, [pc, #28]	; (8008664 <vTaskPlaceOnEventList+0x48>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	3318      	adds	r3, #24
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7fe fc0e 	bl	8006e6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008652:	2101      	movs	r1, #1
 8008654:	6838      	ldr	r0, [r7, #0]
 8008656:	f000 fb9b 	bl	8008d90 <prvAddCurrentTaskToDelayedList>
}
 800865a:	bf00      	nop
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	2000030c 	.word	0x2000030c

08008668 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10b      	bne.n	8008696 <xTaskRemoveFromEventList+0x2e>
 800867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008682:	b672      	cpsid	i
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	b662      	cpsie	i
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	e7fe      	b.n	8008694 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	3318      	adds	r3, #24
 800869a:	4618      	mov	r0, r3
 800869c:	f7fe fc20 	bl	8006ee0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086a0:	4b1d      	ldr	r3, [pc, #116]	; (8008718 <xTaskRemoveFromEventList+0xb0>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d11c      	bne.n	80086e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	3304      	adds	r3, #4
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fe fc17 	bl	8006ee0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b6:	2201      	movs	r2, #1
 80086b8:	409a      	lsls	r2, r3
 80086ba:	4b18      	ldr	r3, [pc, #96]	; (800871c <xTaskRemoveFromEventList+0xb4>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4313      	orrs	r3, r2
 80086c0:	4a16      	ldr	r2, [pc, #88]	; (800871c <xTaskRemoveFromEventList+0xb4>)
 80086c2:	6013      	str	r3, [r2, #0]
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c8:	4613      	mov	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	4a13      	ldr	r2, [pc, #76]	; (8008720 <xTaskRemoveFromEventList+0xb8>)
 80086d2:	441a      	add	r2, r3
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4619      	mov	r1, r3
 80086da:	4610      	mov	r0, r2
 80086dc:	f7fe fba3 	bl	8006e26 <vListInsertEnd>
 80086e0:	e005      	b.n	80086ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	3318      	adds	r3, #24
 80086e6:	4619      	mov	r1, r3
 80086e8:	480e      	ldr	r0, [pc, #56]	; (8008724 <xTaskRemoveFromEventList+0xbc>)
 80086ea:	f7fe fb9c 	bl	8006e26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f2:	4b0d      	ldr	r3, [pc, #52]	; (8008728 <xTaskRemoveFromEventList+0xc0>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d905      	bls.n	8008708 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80086fc:	2301      	movs	r3, #1
 80086fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008700:	4b0a      	ldr	r3, [pc, #40]	; (800872c <xTaskRemoveFromEventList+0xc4>)
 8008702:	2201      	movs	r2, #1
 8008704:	601a      	str	r2, [r3, #0]
 8008706:	e001      	b.n	800870c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008708:	2300      	movs	r3, #0
 800870a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800870c:	697b      	ldr	r3, [r7, #20]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	20000434 	.word	0x20000434
 800871c:	20000414 	.word	0x20000414
 8008720:	20000310 	.word	0x20000310
 8008724:	200003cc 	.word	0x200003cc
 8008728:	2000030c 	.word	0x2000030c
 800872c:	20000420 	.word	0x20000420

08008730 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008730:	b480      	push	{r7}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008738:	4b06      	ldr	r3, [pc, #24]	; (8008754 <vTaskInternalSetTimeOutState+0x24>)
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008740:	4b05      	ldr	r3, [pc, #20]	; (8008758 <vTaskInternalSetTimeOutState+0x28>)
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	605a      	str	r2, [r3, #4]
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	20000424 	.word	0x20000424
 8008758:	20000410 	.word	0x20000410

0800875c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10b      	bne.n	8008784 <xTaskCheckForTimeOut+0x28>
 800876c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008770:	b672      	cpsid	i
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	b662      	cpsie	i
 8008780:	613b      	str	r3, [r7, #16]
 8008782:	e7fe      	b.n	8008782 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10b      	bne.n	80087a2 <xTaskCheckForTimeOut+0x46>
 800878a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878e:	b672      	cpsid	i
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	b662      	cpsie	i
 800879e:	60fb      	str	r3, [r7, #12]
 80087a0:	e7fe      	b.n	80087a0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80087a2:	f000 fc61 	bl	8009068 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087a6:	4b1d      	ldr	r3, [pc, #116]	; (800881c <xTaskCheckForTimeOut+0xc0>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	1ad3      	subs	r3, r2, r3
 80087b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087be:	d102      	bne.n	80087c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087c0:	2300      	movs	r3, #0
 80087c2:	61fb      	str	r3, [r7, #28]
 80087c4:	e023      	b.n	800880e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	4b15      	ldr	r3, [pc, #84]	; (8008820 <xTaskCheckForTimeOut+0xc4>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d007      	beq.n	80087e2 <xTaskCheckForTimeOut+0x86>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	429a      	cmp	r2, r3
 80087da:	d302      	bcc.n	80087e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80087dc:	2301      	movs	r3, #1
 80087de:	61fb      	str	r3, [r7, #28]
 80087e0:	e015      	b.n	800880e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d20b      	bcs.n	8008804 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	1ad2      	subs	r2, r2, r3
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f7ff ff99 	bl	8008730 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80087fe:	2300      	movs	r3, #0
 8008800:	61fb      	str	r3, [r7, #28]
 8008802:	e004      	b.n	800880e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	2200      	movs	r2, #0
 8008808:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800880a:	2301      	movs	r3, #1
 800880c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800880e:	f000 fc5d 	bl	80090cc <vPortExitCritical>

	return xReturn;
 8008812:	69fb      	ldr	r3, [r7, #28]
}
 8008814:	4618      	mov	r0, r3
 8008816:	3720      	adds	r7, #32
 8008818:	46bd      	mov	sp, r7
 800881a:	bd80      	pop	{r7, pc}
 800881c:	20000410 	.word	0x20000410
 8008820:	20000424 	.word	0x20000424

08008824 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008824:	b480      	push	{r7}
 8008826:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008828:	4b03      	ldr	r3, [pc, #12]	; (8008838 <vTaskMissedYield+0x14>)
 800882a:	2201      	movs	r2, #1
 800882c:	601a      	str	r2, [r3, #0]
}
 800882e:	bf00      	nop
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	20000420 	.word	0x20000420

0800883c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008844:	f000 f852 	bl	80088ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008848:	4b06      	ldr	r3, [pc, #24]	; (8008864 <prvIdleTask+0x28>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d9f9      	bls.n	8008844 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008850:	4b05      	ldr	r3, [pc, #20]	; (8008868 <prvIdleTask+0x2c>)
 8008852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008856:	601a      	str	r2, [r3, #0]
 8008858:	f3bf 8f4f 	dsb	sy
 800885c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008860:	e7f0      	b.n	8008844 <prvIdleTask+0x8>
 8008862:	bf00      	nop
 8008864:	20000310 	.word	0x20000310
 8008868:	e000ed04 	.word	0xe000ed04

0800886c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008872:	2300      	movs	r3, #0
 8008874:	607b      	str	r3, [r7, #4]
 8008876:	e00c      	b.n	8008892 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	4613      	mov	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	4413      	add	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4a12      	ldr	r2, [pc, #72]	; (80088cc <prvInitialiseTaskLists+0x60>)
 8008884:	4413      	add	r3, r2
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe faa0 	bl	8006dcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	3301      	adds	r3, #1
 8008890:	607b      	str	r3, [r7, #4]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2b06      	cmp	r3, #6
 8008896:	d9ef      	bls.n	8008878 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008898:	480d      	ldr	r0, [pc, #52]	; (80088d0 <prvInitialiseTaskLists+0x64>)
 800889a:	f7fe fa97 	bl	8006dcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800889e:	480d      	ldr	r0, [pc, #52]	; (80088d4 <prvInitialiseTaskLists+0x68>)
 80088a0:	f7fe fa94 	bl	8006dcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088a4:	480c      	ldr	r0, [pc, #48]	; (80088d8 <prvInitialiseTaskLists+0x6c>)
 80088a6:	f7fe fa91 	bl	8006dcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088aa:	480c      	ldr	r0, [pc, #48]	; (80088dc <prvInitialiseTaskLists+0x70>)
 80088ac:	f7fe fa8e 	bl	8006dcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088b0:	480b      	ldr	r0, [pc, #44]	; (80088e0 <prvInitialiseTaskLists+0x74>)
 80088b2:	f7fe fa8b 	bl	8006dcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088b6:	4b0b      	ldr	r3, [pc, #44]	; (80088e4 <prvInitialiseTaskLists+0x78>)
 80088b8:	4a05      	ldr	r2, [pc, #20]	; (80088d0 <prvInitialiseTaskLists+0x64>)
 80088ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088bc:	4b0a      	ldr	r3, [pc, #40]	; (80088e8 <prvInitialiseTaskLists+0x7c>)
 80088be:	4a05      	ldr	r2, [pc, #20]	; (80088d4 <prvInitialiseTaskLists+0x68>)
 80088c0:	601a      	str	r2, [r3, #0]
}
 80088c2:	bf00      	nop
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	20000310 	.word	0x20000310
 80088d0:	2000039c 	.word	0x2000039c
 80088d4:	200003b0 	.word	0x200003b0
 80088d8:	200003cc 	.word	0x200003cc
 80088dc:	200003e0 	.word	0x200003e0
 80088e0:	200003f8 	.word	0x200003f8
 80088e4:	200003c4 	.word	0x200003c4
 80088e8:	200003c8 	.word	0x200003c8

080088ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80088f2:	e019      	b.n	8008928 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80088f4:	f000 fbb8 	bl	8009068 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088f8:	4b0f      	ldr	r3, [pc, #60]	; (8008938 <prvCheckTasksWaitingTermination+0x4c>)
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3304      	adds	r3, #4
 8008904:	4618      	mov	r0, r3
 8008906:	f7fe faeb 	bl	8006ee0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800890a:	4b0c      	ldr	r3, [pc, #48]	; (800893c <prvCheckTasksWaitingTermination+0x50>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	3b01      	subs	r3, #1
 8008910:	4a0a      	ldr	r2, [pc, #40]	; (800893c <prvCheckTasksWaitingTermination+0x50>)
 8008912:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008914:	4b0a      	ldr	r3, [pc, #40]	; (8008940 <prvCheckTasksWaitingTermination+0x54>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3b01      	subs	r3, #1
 800891a:	4a09      	ldr	r2, [pc, #36]	; (8008940 <prvCheckTasksWaitingTermination+0x54>)
 800891c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800891e:	f000 fbd5 	bl	80090cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f80e 	bl	8008944 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008928:	4b05      	ldr	r3, [pc, #20]	; (8008940 <prvCheckTasksWaitingTermination+0x54>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d1e1      	bne.n	80088f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	200003e0 	.word	0x200003e0
 800893c:	2000040c 	.word	0x2000040c
 8008940:	200003f4 	.word	0x200003f4

08008944 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008952:	2b00      	cmp	r3, #0
 8008954:	d108      	bne.n	8008968 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895a:	4618      	mov	r0, r3
 800895c:	f000 fd6e 	bl	800943c <vPortFree>
				vPortFree( pxTCB );
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fd6b 	bl	800943c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008966:	e019      	b.n	800899c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800896e:	2b01      	cmp	r3, #1
 8008970:	d103      	bne.n	800897a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 fd62 	bl	800943c <vPortFree>
	}
 8008978:	e010      	b.n	800899c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008980:	2b02      	cmp	r3, #2
 8008982:	d00b      	beq.n	800899c <prvDeleteTCB+0x58>
 8008984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008988:	b672      	cpsid	i
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	b662      	cpsie	i
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	e7fe      	b.n	800899a <prvDeleteTCB+0x56>
	}
 800899c:	bf00      	nop
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089aa:	4b0c      	ldr	r3, [pc, #48]	; (80089dc <prvResetNextTaskUnblockTime+0x38>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d104      	bne.n	80089be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089b4:	4b0a      	ldr	r3, [pc, #40]	; (80089e0 <prvResetNextTaskUnblockTime+0x3c>)
 80089b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089bc:	e008      	b.n	80089d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089be:	4b07      	ldr	r3, [pc, #28]	; (80089dc <prvResetNextTaskUnblockTime+0x38>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	4a04      	ldr	r2, [pc, #16]	; (80089e0 <prvResetNextTaskUnblockTime+0x3c>)
 80089ce:	6013      	str	r3, [r2, #0]
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	200003c4 	.word	0x200003c4
 80089e0:	2000042c 	.word	0x2000042c

080089e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80089ea:	4b0b      	ldr	r3, [pc, #44]	; (8008a18 <xTaskGetSchedulerState+0x34>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d102      	bne.n	80089f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80089f2:	2301      	movs	r3, #1
 80089f4:	607b      	str	r3, [r7, #4]
 80089f6:	e008      	b.n	8008a0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089f8:	4b08      	ldr	r3, [pc, #32]	; (8008a1c <xTaskGetSchedulerState+0x38>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d102      	bne.n	8008a06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a00:	2302      	movs	r3, #2
 8008a02:	607b      	str	r3, [r7, #4]
 8008a04:	e001      	b.n	8008a0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a06:	2300      	movs	r3, #0
 8008a08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a0a:	687b      	ldr	r3, [r7, #4]
	}
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	370c      	adds	r7, #12
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	20000418 	.word	0x20000418
 8008a1c:	20000434 	.word	0x20000434

08008a20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d069      	beq.n	8008b0a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a3a:	4b36      	ldr	r3, [pc, #216]	; (8008b14 <xTaskPriorityInherit+0xf4>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d259      	bcs.n	8008af8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	db06      	blt.n	8008a5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a4c:	4b31      	ldr	r3, [pc, #196]	; (8008b14 <xTaskPriorityInherit+0xf4>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a52:	f1c3 0207 	rsb	r2, r3, #7
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	6959      	ldr	r1, [r3, #20]
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a62:	4613      	mov	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4a2b      	ldr	r2, [pc, #172]	; (8008b18 <xTaskPriorityInherit+0xf8>)
 8008a6c:	4413      	add	r3, r2
 8008a6e:	4299      	cmp	r1, r3
 8008a70:	d13a      	bne.n	8008ae8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	3304      	adds	r3, #4
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fe fa32 	bl	8006ee0 <uxListRemove>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d115      	bne.n	8008aae <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a86:	4924      	ldr	r1, [pc, #144]	; (8008b18 <xTaskPriorityInherit+0xf8>)
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	440b      	add	r3, r1
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10a      	bne.n	8008aae <xTaskPriorityInherit+0x8e>
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9c:	2201      	movs	r2, #1
 8008a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa2:	43da      	mvns	r2, r3
 8008aa4:	4b1d      	ldr	r3, [pc, #116]	; (8008b1c <xTaskPriorityInherit+0xfc>)
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	4a1c      	ldr	r2, [pc, #112]	; (8008b1c <xTaskPriorityInherit+0xfc>)
 8008aac:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008aae:	4b19      	ldr	r3, [pc, #100]	; (8008b14 <xTaskPriorityInherit+0xf4>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abc:	2201      	movs	r2, #1
 8008abe:	409a      	lsls	r2, r3
 8008ac0:	4b16      	ldr	r3, [pc, #88]	; (8008b1c <xTaskPriorityInherit+0xfc>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	4a15      	ldr	r2, [pc, #84]	; (8008b1c <xTaskPriorityInherit+0xfc>)
 8008ac8:	6013      	str	r3, [r2, #0]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4a10      	ldr	r2, [pc, #64]	; (8008b18 <xTaskPriorityInherit+0xf8>)
 8008ad8:	441a      	add	r2, r3
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	3304      	adds	r3, #4
 8008ade:	4619      	mov	r1, r3
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	f7fe f9a0 	bl	8006e26 <vListInsertEnd>
 8008ae6:	e004      	b.n	8008af2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ae8:	4b0a      	ldr	r3, [pc, #40]	; (8008b14 <xTaskPriorityInherit+0xf4>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008af2:	2301      	movs	r3, #1
 8008af4:	60fb      	str	r3, [r7, #12]
 8008af6:	e008      	b.n	8008b0a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008afc:	4b05      	ldr	r3, [pc, #20]	; (8008b14 <xTaskPriorityInherit+0xf4>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b02:	429a      	cmp	r2, r3
 8008b04:	d201      	bcs.n	8008b0a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008b06:	2301      	movs	r3, #1
 8008b08:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
	}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3710      	adds	r7, #16
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	2000030c 	.word	0x2000030c
 8008b18:	20000310 	.word	0x20000310
 8008b1c:	20000414 	.word	0x20000414

08008b20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d070      	beq.n	8008c18 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008b36:	4b3b      	ldr	r3, [pc, #236]	; (8008c24 <xTaskPriorityDisinherit+0x104>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d00b      	beq.n	8008b58 <xTaskPriorityDisinherit+0x38>
 8008b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b44:	b672      	cpsid	i
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	b662      	cpsie	i
 8008b54:	60fb      	str	r3, [r7, #12]
 8008b56:	e7fe      	b.n	8008b56 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10b      	bne.n	8008b78 <xTaskPriorityDisinherit+0x58>
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	b672      	cpsid	i
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	b662      	cpsie	i
 8008b74:	60bb      	str	r3, [r7, #8]
 8008b76:	e7fe      	b.n	8008b76 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b7c:	1e5a      	subs	r2, r3, #1
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d044      	beq.n	8008c18 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d140      	bne.n	8008c18 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	3304      	adds	r3, #4
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe f9a0 	bl	8006ee0 <uxListRemove>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d115      	bne.n	8008bd2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008baa:	491f      	ldr	r1, [pc, #124]	; (8008c28 <xTaskPriorityDisinherit+0x108>)
 8008bac:	4613      	mov	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	440b      	add	r3, r1
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10a      	bne.n	8008bd2 <xTaskPriorityDisinherit+0xb2>
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc6:	43da      	mvns	r2, r3
 8008bc8:	4b18      	ldr	r3, [pc, #96]	; (8008c2c <xTaskPriorityDisinherit+0x10c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4013      	ands	r3, r2
 8008bce:	4a17      	ldr	r2, [pc, #92]	; (8008c2c <xTaskPriorityDisinherit+0x10c>)
 8008bd0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bde:	f1c3 0207 	rsb	r2, r3, #7
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bea:	2201      	movs	r2, #1
 8008bec:	409a      	lsls	r2, r3
 8008bee:	4b0f      	ldr	r3, [pc, #60]	; (8008c2c <xTaskPriorityDisinherit+0x10c>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	4a0d      	ldr	r2, [pc, #52]	; (8008c2c <xTaskPriorityDisinherit+0x10c>)
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	4413      	add	r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	4a08      	ldr	r2, [pc, #32]	; (8008c28 <xTaskPriorityDisinherit+0x108>)
 8008c06:	441a      	add	r2, r3
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	4610      	mov	r0, r2
 8008c10:	f7fe f909 	bl	8006e26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008c14:	2301      	movs	r3, #1
 8008c16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008c18:	697b      	ldr	r3, [r7, #20]
	}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3718      	adds	r7, #24
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	2000030c 	.word	0x2000030c
 8008c28:	20000310 	.word	0x20000310
 8008c2c:	20000414 	.word	0x20000414

08008c30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b088      	sub	sp, #32
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f000 8085 	beq.w	8008d54 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10b      	bne.n	8008c6a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	b672      	cpsid	i
 8008c58:	f383 8811 	msr	BASEPRI, r3
 8008c5c:	f3bf 8f6f 	isb	sy
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	b662      	cpsie	i
 8008c66:	60fb      	str	r3, [r7, #12]
 8008c68:	e7fe      	b.n	8008c68 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d902      	bls.n	8008c7a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	61fb      	str	r3, [r7, #28]
 8008c78:	e002      	b.n	8008c80 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c7e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c84:	69fa      	ldr	r2, [r7, #28]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d064      	beq.n	8008d54 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d15f      	bne.n	8008d54 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008c94:	4b31      	ldr	r3, [pc, #196]	; (8008d5c <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d10b      	bne.n	8008cb6 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8008c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca2:	b672      	cpsid	i
 8008ca4:	f383 8811 	msr	BASEPRI, r3
 8008ca8:	f3bf 8f6f 	isb	sy
 8008cac:	f3bf 8f4f 	dsb	sy
 8008cb0:	b662      	cpsie	i
 8008cb2:	60bb      	str	r3, [r7, #8]
 8008cb4:	e7fe      	b.n	8008cb4 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008cb6:	69bb      	ldr	r3, [r7, #24]
 8008cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cba:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	69fa      	ldr	r2, [r7, #28]
 8008cc0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	db04      	blt.n	8008cd4 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	f1c3 0207 	rsb	r2, r3, #7
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	6959      	ldr	r1, [r3, #20]
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4a1f      	ldr	r2, [pc, #124]	; (8008d60 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008ce4:	4413      	add	r3, r2
 8008ce6:	4299      	cmp	r1, r3
 8008ce8:	d134      	bne.n	8008d54 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	3304      	adds	r3, #4
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fe f8f6 	bl	8006ee0 <uxListRemove>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d115      	bne.n	8008d26 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cfe:	4918      	ldr	r1, [pc, #96]	; (8008d60 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008d00:	4613      	mov	r3, r2
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4413      	add	r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	440b      	add	r3, r1
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d10a      	bne.n	8008d26 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d14:	2201      	movs	r2, #1
 8008d16:	fa02 f303 	lsl.w	r3, r2, r3
 8008d1a:	43da      	mvns	r2, r3
 8008d1c:	4b11      	ldr	r3, [pc, #68]	; (8008d64 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4013      	ands	r3, r2
 8008d22:	4a10      	ldr	r2, [pc, #64]	; (8008d64 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008d24:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	409a      	lsls	r2, r3
 8008d2e:	4b0d      	ldr	r3, [pc, #52]	; (8008d64 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4313      	orrs	r3, r2
 8008d34:	4a0b      	ldr	r2, [pc, #44]	; (8008d64 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008d36:	6013      	str	r3, [r2, #0]
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d3c:	4613      	mov	r3, r2
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4a06      	ldr	r2, [pc, #24]	; (8008d60 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008d46:	441a      	add	r2, r3
 8008d48:	69bb      	ldr	r3, [r7, #24]
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	4610      	mov	r0, r2
 8008d50:	f7fe f869 	bl	8006e26 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008d54:	bf00      	nop
 8008d56:	3720      	adds	r7, #32
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	2000030c 	.word	0x2000030c
 8008d60:	20000310 	.word	0x20000310
 8008d64:	20000414 	.word	0x20000414

08008d68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008d68:	b480      	push	{r7}
 8008d6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008d6c:	4b07      	ldr	r3, [pc, #28]	; (8008d8c <pvTaskIncrementMutexHeldCount+0x24>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d004      	beq.n	8008d7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008d74:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <pvTaskIncrementMutexHeldCount+0x24>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d7a:	3201      	adds	r2, #1
 8008d7c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008d7e:	4b03      	ldr	r3, [pc, #12]	; (8008d8c <pvTaskIncrementMutexHeldCount+0x24>)
 8008d80:	681b      	ldr	r3, [r3, #0]
	}
 8008d82:	4618      	mov	r0, r3
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr
 8008d8c:	2000030c 	.word	0x2000030c

08008d90 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d9a:	4b29      	ldr	r3, [pc, #164]	; (8008e40 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008da0:	4b28      	ldr	r3, [pc, #160]	; (8008e44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3304      	adds	r3, #4
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe f89a 	bl	8006ee0 <uxListRemove>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d10b      	bne.n	8008dca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008db2:	4b24      	ldr	r3, [pc, #144]	; (8008e44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db8:	2201      	movs	r2, #1
 8008dba:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbe:	43da      	mvns	r2, r3
 8008dc0:	4b21      	ldr	r3, [pc, #132]	; (8008e48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	4a20      	ldr	r2, [pc, #128]	; (8008e48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008dc8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008dd0:	d10a      	bne.n	8008de8 <prvAddCurrentTaskToDelayedList+0x58>
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d007      	beq.n	8008de8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dd8:	4b1a      	ldr	r3, [pc, #104]	; (8008e44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3304      	adds	r3, #4
 8008dde:	4619      	mov	r1, r3
 8008de0:	481a      	ldr	r0, [pc, #104]	; (8008e4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008de2:	f7fe f820 	bl	8006e26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008de6:	e026      	b.n	8008e36 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4413      	add	r3, r2
 8008dee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008df0:	4b14      	ldr	r3, [pc, #80]	; (8008e44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008df8:	68ba      	ldr	r2, [r7, #8]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d209      	bcs.n	8008e14 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e00:	4b13      	ldr	r3, [pc, #76]	; (8008e50 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	4b0f      	ldr	r3, [pc, #60]	; (8008e44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	3304      	adds	r3, #4
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	f7fe f82e 	bl	8006e6e <vListInsert>
}
 8008e12:	e010      	b.n	8008e36 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e14:	4b0f      	ldr	r3, [pc, #60]	; (8008e54 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008e16:	681a      	ldr	r2, [r3, #0]
 8008e18:	4b0a      	ldr	r3, [pc, #40]	; (8008e44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3304      	adds	r3, #4
 8008e1e:	4619      	mov	r1, r3
 8008e20:	4610      	mov	r0, r2
 8008e22:	f7fe f824 	bl	8006e6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008e26:	4b0c      	ldr	r3, [pc, #48]	; (8008e58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d202      	bcs.n	8008e36 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008e30:	4a09      	ldr	r2, [pc, #36]	; (8008e58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	6013      	str	r3, [r2, #0]
}
 8008e36:	bf00      	nop
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	20000410 	.word	0x20000410
 8008e44:	2000030c 	.word	0x2000030c
 8008e48:	20000414 	.word	0x20000414
 8008e4c:	200003f8 	.word	0x200003f8
 8008e50:	200003c8 	.word	0x200003c8
 8008e54:	200003c4 	.word	0x200003c4
 8008e58:	2000042c 	.word	0x2000042c

08008e5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3b04      	subs	r3, #4
 8008e6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	3b04      	subs	r3, #4
 8008e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	f023 0201 	bic.w	r2, r3, #1
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3b04      	subs	r3, #4
 8008e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e8c:	4a0c      	ldr	r2, [pc, #48]	; (8008ec0 <pxPortInitialiseStack+0x64>)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	3b14      	subs	r3, #20
 8008e96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	3b04      	subs	r3, #4
 8008ea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f06f 0202 	mvn.w	r2, #2
 8008eaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	3b20      	subs	r3, #32
 8008eb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebe:	4770      	bx	lr
 8008ec0:	08008ec5 	.word	0x08008ec5

08008ec4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008ece:	4b13      	ldr	r3, [pc, #76]	; (8008f1c <prvTaskExitError+0x58>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008ed6:	d00b      	beq.n	8008ef0 <prvTaskExitError+0x2c>
 8008ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008edc:	b672      	cpsid	i
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	b662      	cpsie	i
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	e7fe      	b.n	8008eee <prvTaskExitError+0x2a>
 8008ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef4:	b672      	cpsid	i
 8008ef6:	f383 8811 	msr	BASEPRI, r3
 8008efa:	f3bf 8f6f 	isb	sy
 8008efe:	f3bf 8f4f 	dsb	sy
 8008f02:	b662      	cpsie	i
 8008f04:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008f06:	bf00      	nop
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d0fc      	beq.n	8008f08 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f0e:	bf00      	nop
 8008f10:	3714      	adds	r7, #20
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
 8008f1a:	bf00      	nop
 8008f1c:	2000000c 	.word	0x2000000c

08008f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f20:	4b07      	ldr	r3, [pc, #28]	; (8008f40 <pxCurrentTCBConst2>)
 8008f22:	6819      	ldr	r1, [r3, #0]
 8008f24:	6808      	ldr	r0, [r1, #0]
 8008f26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2a:	f380 8809 	msr	PSP, r0
 8008f2e:	f3bf 8f6f 	isb	sy
 8008f32:	f04f 0000 	mov.w	r0, #0
 8008f36:	f380 8811 	msr	BASEPRI, r0
 8008f3a:	4770      	bx	lr
 8008f3c:	f3af 8000 	nop.w

08008f40 <pxCurrentTCBConst2>:
 8008f40:	2000030c 	.word	0x2000030c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f44:	bf00      	nop
 8008f46:	bf00      	nop

08008f48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f48:	4808      	ldr	r0, [pc, #32]	; (8008f6c <prvPortStartFirstTask+0x24>)
 8008f4a:	6800      	ldr	r0, [r0, #0]
 8008f4c:	6800      	ldr	r0, [r0, #0]
 8008f4e:	f380 8808 	msr	MSP, r0
 8008f52:	f04f 0000 	mov.w	r0, #0
 8008f56:	f380 8814 	msr	CONTROL, r0
 8008f5a:	b662      	cpsie	i
 8008f5c:	b661      	cpsie	f
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	df00      	svc	0
 8008f68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f6a:	bf00      	nop
 8008f6c:	e000ed08 	.word	0xe000ed08

08008f70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b084      	sub	sp, #16
 8008f74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f76:	4b36      	ldr	r3, [pc, #216]	; (8009050 <xPortStartScheduler+0xe0>)
 8008f78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	22ff      	movs	r2, #255	; 0xff
 8008f86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	781b      	ldrb	r3, [r3, #0]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f90:	78fb      	ldrb	r3, [r7, #3]
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	4b2e      	ldr	r3, [pc, #184]	; (8009054 <xPortStartScheduler+0xe4>)
 8008f9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f9e:	4b2e      	ldr	r3, [pc, #184]	; (8009058 <xPortStartScheduler+0xe8>)
 8008fa0:	2207      	movs	r2, #7
 8008fa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fa4:	e009      	b.n	8008fba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008fa6:	4b2c      	ldr	r3, [pc, #176]	; (8009058 <xPortStartScheduler+0xe8>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3b01      	subs	r3, #1
 8008fac:	4a2a      	ldr	r2, [pc, #168]	; (8009058 <xPortStartScheduler+0xe8>)
 8008fae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	005b      	lsls	r3, r3, #1
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fba:	78fb      	ldrb	r3, [r7, #3]
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fc2:	2b80      	cmp	r3, #128	; 0x80
 8008fc4:	d0ef      	beq.n	8008fa6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008fc6:	4b24      	ldr	r3, [pc, #144]	; (8009058 <xPortStartScheduler+0xe8>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f1c3 0307 	rsb	r3, r3, #7
 8008fce:	2b04      	cmp	r3, #4
 8008fd0:	d00b      	beq.n	8008fea <xPortStartScheduler+0x7a>
 8008fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd6:	b672      	cpsid	i
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	b662      	cpsie	i
 8008fe6:	60bb      	str	r3, [r7, #8]
 8008fe8:	e7fe      	b.n	8008fe8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008fea:	4b1b      	ldr	r3, [pc, #108]	; (8009058 <xPortStartScheduler+0xe8>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	021b      	lsls	r3, r3, #8
 8008ff0:	4a19      	ldr	r2, [pc, #100]	; (8009058 <xPortStartScheduler+0xe8>)
 8008ff2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ff4:	4b18      	ldr	r3, [pc, #96]	; (8009058 <xPortStartScheduler+0xe8>)
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ffc:	4a16      	ldr	r2, [pc, #88]	; (8009058 <xPortStartScheduler+0xe8>)
 8008ffe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	b2da      	uxtb	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009008:	4b14      	ldr	r3, [pc, #80]	; (800905c <xPortStartScheduler+0xec>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a13      	ldr	r2, [pc, #76]	; (800905c <xPortStartScheduler+0xec>)
 800900e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009012:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009014:	4b11      	ldr	r3, [pc, #68]	; (800905c <xPortStartScheduler+0xec>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a10      	ldr	r2, [pc, #64]	; (800905c <xPortStartScheduler+0xec>)
 800901a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800901e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009020:	f000 f8d4 	bl	80091cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009024:	4b0e      	ldr	r3, [pc, #56]	; (8009060 <xPortStartScheduler+0xf0>)
 8009026:	2200      	movs	r2, #0
 8009028:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800902a:	f000 f8f3 	bl	8009214 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800902e:	4b0d      	ldr	r3, [pc, #52]	; (8009064 <xPortStartScheduler+0xf4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a0c      	ldr	r2, [pc, #48]	; (8009064 <xPortStartScheduler+0xf4>)
 8009034:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009038:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800903a:	f7ff ff85 	bl	8008f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800903e:	f7ff fa91 	bl	8008564 <vTaskSwitchContext>
	prvTaskExitError();
 8009042:	f7ff ff3f 	bl	8008ec4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3710      	adds	r7, #16
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}
 8009050:	e000e400 	.word	0xe000e400
 8009054:	20000438 	.word	0x20000438
 8009058:	2000043c 	.word	0x2000043c
 800905c:	e000ed20 	.word	0xe000ed20
 8009060:	2000000c 	.word	0x2000000c
 8009064:	e000ef34 	.word	0xe000ef34

08009068 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009072:	b672      	cpsid	i
 8009074:	f383 8811 	msr	BASEPRI, r3
 8009078:	f3bf 8f6f 	isb	sy
 800907c:	f3bf 8f4f 	dsb	sy
 8009080:	b662      	cpsie	i
 8009082:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009084:	4b0f      	ldr	r3, [pc, #60]	; (80090c4 <vPortEnterCritical+0x5c>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	3301      	adds	r3, #1
 800908a:	4a0e      	ldr	r2, [pc, #56]	; (80090c4 <vPortEnterCritical+0x5c>)
 800908c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800908e:	4b0d      	ldr	r3, [pc, #52]	; (80090c4 <vPortEnterCritical+0x5c>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b01      	cmp	r3, #1
 8009094:	d110      	bne.n	80090b8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009096:	4b0c      	ldr	r3, [pc, #48]	; (80090c8 <vPortEnterCritical+0x60>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00b      	beq.n	80090b8 <vPortEnterCritical+0x50>
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	b672      	cpsid	i
 80090a6:	f383 8811 	msr	BASEPRI, r3
 80090aa:	f3bf 8f6f 	isb	sy
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	b662      	cpsie	i
 80090b4:	603b      	str	r3, [r7, #0]
 80090b6:	e7fe      	b.n	80090b6 <vPortEnterCritical+0x4e>
	}
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	2000000c 	.word	0x2000000c
 80090c8:	e000ed04 	.word	0xe000ed04

080090cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090d2:	4b12      	ldr	r3, [pc, #72]	; (800911c <vPortExitCritical+0x50>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10b      	bne.n	80090f2 <vPortExitCritical+0x26>
 80090da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090de:	b672      	cpsid	i
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	b662      	cpsie	i
 80090ee:	607b      	str	r3, [r7, #4]
 80090f0:	e7fe      	b.n	80090f0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80090f2:	4b0a      	ldr	r3, [pc, #40]	; (800911c <vPortExitCritical+0x50>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	3b01      	subs	r3, #1
 80090f8:	4a08      	ldr	r2, [pc, #32]	; (800911c <vPortExitCritical+0x50>)
 80090fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80090fc:	4b07      	ldr	r3, [pc, #28]	; (800911c <vPortExitCritical+0x50>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d104      	bne.n	800910e <vPortExitCritical+0x42>
 8009104:	2300      	movs	r3, #0
 8009106:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800910e:	bf00      	nop
 8009110:	370c      	adds	r7, #12
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	2000000c 	.word	0x2000000c

08009120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009120:	f3ef 8009 	mrs	r0, PSP
 8009124:	f3bf 8f6f 	isb	sy
 8009128:	4b15      	ldr	r3, [pc, #84]	; (8009180 <pxCurrentTCBConst>)
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	f01e 0f10 	tst.w	lr, #16
 8009130:	bf08      	it	eq
 8009132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913a:	6010      	str	r0, [r2, #0]
 800913c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009140:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009144:	b672      	cpsid	i
 8009146:	f380 8811 	msr	BASEPRI, r0
 800914a:	f3bf 8f4f 	dsb	sy
 800914e:	f3bf 8f6f 	isb	sy
 8009152:	b662      	cpsie	i
 8009154:	f7ff fa06 	bl	8008564 <vTaskSwitchContext>
 8009158:	f04f 0000 	mov.w	r0, #0
 800915c:	f380 8811 	msr	BASEPRI, r0
 8009160:	bc09      	pop	{r0, r3}
 8009162:	6819      	ldr	r1, [r3, #0]
 8009164:	6808      	ldr	r0, [r1, #0]
 8009166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916a:	f01e 0f10 	tst.w	lr, #16
 800916e:	bf08      	it	eq
 8009170:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009174:	f380 8809 	msr	PSP, r0
 8009178:	f3bf 8f6f 	isb	sy
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop

08009180 <pxCurrentTCBConst>:
 8009180:	2000030c 	.word	0x2000030c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009184:	bf00      	nop
 8009186:	bf00      	nop

08009188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
	__asm volatile
 800918e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009192:	b672      	cpsid	i
 8009194:	f383 8811 	msr	BASEPRI, r3
 8009198:	f3bf 8f6f 	isb	sy
 800919c:	f3bf 8f4f 	dsb	sy
 80091a0:	b662      	cpsie	i
 80091a2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091a4:	f7ff f924 	bl	80083f0 <xTaskIncrementTick>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091ae:	4b06      	ldr	r3, [pc, #24]	; (80091c8 <SysTick_Handler+0x40>)
 80091b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b4:	601a      	str	r2, [r3, #0]
 80091b6:	2300      	movs	r3, #0
 80091b8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80091c0:	bf00      	nop
 80091c2:	3708      	adds	r7, #8
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}
 80091c8:	e000ed04 	.word	0xe000ed04

080091cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091cc:	b480      	push	{r7}
 80091ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091d0:	4b0b      	ldr	r3, [pc, #44]	; (8009200 <vPortSetupTimerInterrupt+0x34>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091d6:	4b0b      	ldr	r3, [pc, #44]	; (8009204 <vPortSetupTimerInterrupt+0x38>)
 80091d8:	2200      	movs	r2, #0
 80091da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091dc:	4b0a      	ldr	r3, [pc, #40]	; (8009208 <vPortSetupTimerInterrupt+0x3c>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a0a      	ldr	r2, [pc, #40]	; (800920c <vPortSetupTimerInterrupt+0x40>)
 80091e2:	fba2 2303 	umull	r2, r3, r2, r3
 80091e6:	099b      	lsrs	r3, r3, #6
 80091e8:	4a09      	ldr	r2, [pc, #36]	; (8009210 <vPortSetupTimerInterrupt+0x44>)
 80091ea:	3b01      	subs	r3, #1
 80091ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091ee:	4b04      	ldr	r3, [pc, #16]	; (8009200 <vPortSetupTimerInterrupt+0x34>)
 80091f0:	2207      	movs	r2, #7
 80091f2:	601a      	str	r2, [r3, #0]
}
 80091f4:	bf00      	nop
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr
 80091fe:	bf00      	nop
 8009200:	e000e010 	.word	0xe000e010
 8009204:	e000e018 	.word	0xe000e018
 8009208:	20000000 	.word	0x20000000
 800920c:	10624dd3 	.word	0x10624dd3
 8009210:	e000e014 	.word	0xe000e014

08009214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009214:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009224 <vPortEnableVFP+0x10>
 8009218:	6801      	ldr	r1, [r0, #0]
 800921a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800921e:	6001      	str	r1, [r0, #0]
 8009220:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009222:	bf00      	nop
 8009224:	e000ed88 	.word	0xe000ed88

08009228 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009228:	b480      	push	{r7}
 800922a:	b085      	sub	sp, #20
 800922c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800922e:	f3ef 8305 	mrs	r3, IPSR
 8009232:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2b0f      	cmp	r3, #15
 8009238:	d915      	bls.n	8009266 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800923a:	4a18      	ldr	r2, [pc, #96]	; (800929c <vPortValidateInterruptPriority+0x74>)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	4413      	add	r3, r2
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009244:	4b16      	ldr	r3, [pc, #88]	; (80092a0 <vPortValidateInterruptPriority+0x78>)
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	7afa      	ldrb	r2, [r7, #11]
 800924a:	429a      	cmp	r2, r3
 800924c:	d20b      	bcs.n	8009266 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800924e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009252:	b672      	cpsid	i
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	b662      	cpsie	i
 8009262:	607b      	str	r3, [r7, #4]
 8009264:	e7fe      	b.n	8009264 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009266:	4b0f      	ldr	r3, [pc, #60]	; (80092a4 <vPortValidateInterruptPriority+0x7c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800926e:	4b0e      	ldr	r3, [pc, #56]	; (80092a8 <vPortValidateInterruptPriority+0x80>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	429a      	cmp	r2, r3
 8009274:	d90b      	bls.n	800928e <vPortValidateInterruptPriority+0x66>
 8009276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800927a:	b672      	cpsid	i
 800927c:	f383 8811 	msr	BASEPRI, r3
 8009280:	f3bf 8f6f 	isb	sy
 8009284:	f3bf 8f4f 	dsb	sy
 8009288:	b662      	cpsie	i
 800928a:	603b      	str	r3, [r7, #0]
 800928c:	e7fe      	b.n	800928c <vPortValidateInterruptPriority+0x64>
	}
 800928e:	bf00      	nop
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	e000e3f0 	.word	0xe000e3f0
 80092a0:	20000438 	.word	0x20000438
 80092a4:	e000ed0c 	.word	0xe000ed0c
 80092a8:	2000043c 	.word	0x2000043c

080092ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08a      	sub	sp, #40	; 0x28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80092b4:	2300      	movs	r3, #0
 80092b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80092b8:	f7fe ffcc 	bl	8008254 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80092bc:	4b5a      	ldr	r3, [pc, #360]	; (8009428 <pvPortMalloc+0x17c>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092c4:	f000 f916 	bl	80094f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092c8:	4b58      	ldr	r3, [pc, #352]	; (800942c <pvPortMalloc+0x180>)
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4013      	ands	r3, r2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f040 8090 	bne.w	80093f6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d01e      	beq.n	800931a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80092dc:	2208      	movs	r2, #8
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4413      	add	r3, r2
 80092e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f003 0307 	and.w	r3, r3, #7
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d015      	beq.n	800931a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f023 0307 	bic.w	r3, r3, #7
 80092f4:	3308      	adds	r3, #8
 80092f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f003 0307 	and.w	r3, r3, #7
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00b      	beq.n	800931a <pvPortMalloc+0x6e>
 8009302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009306:	b672      	cpsid	i
 8009308:	f383 8811 	msr	BASEPRI, r3
 800930c:	f3bf 8f6f 	isb	sy
 8009310:	f3bf 8f4f 	dsb	sy
 8009314:	b662      	cpsie	i
 8009316:	617b      	str	r3, [r7, #20]
 8009318:	e7fe      	b.n	8009318 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d06a      	beq.n	80093f6 <pvPortMalloc+0x14a>
 8009320:	4b43      	ldr	r3, [pc, #268]	; (8009430 <pvPortMalloc+0x184>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	429a      	cmp	r2, r3
 8009328:	d865      	bhi.n	80093f6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800932a:	4b42      	ldr	r3, [pc, #264]	; (8009434 <pvPortMalloc+0x188>)
 800932c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800932e:	4b41      	ldr	r3, [pc, #260]	; (8009434 <pvPortMalloc+0x188>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009334:	e004      	b.n	8009340 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009338:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800933a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	429a      	cmp	r2, r3
 8009348:	d903      	bls.n	8009352 <pvPortMalloc+0xa6>
 800934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1f1      	bne.n	8009336 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009352:	4b35      	ldr	r3, [pc, #212]	; (8009428 <pvPortMalloc+0x17c>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009358:	429a      	cmp	r2, r3
 800935a:	d04c      	beq.n	80093f6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2208      	movs	r2, #8
 8009362:	4413      	add	r3, r2
 8009364:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	6a3b      	ldr	r3, [r7, #32]
 800936c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	1ad2      	subs	r2, r2, r3
 8009376:	2308      	movs	r3, #8
 8009378:	005b      	lsls	r3, r3, #1
 800937a:	429a      	cmp	r2, r3
 800937c:	d920      	bls.n	80093c0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800937e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4413      	add	r3, r2
 8009384:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	f003 0307 	and.w	r3, r3, #7
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00b      	beq.n	80093a8 <pvPortMalloc+0xfc>
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	b672      	cpsid	i
 8009396:	f383 8811 	msr	BASEPRI, r3
 800939a:	f3bf 8f6f 	isb	sy
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	b662      	cpsie	i
 80093a4:	613b      	str	r3, [r7, #16]
 80093a6:	e7fe      	b.n	80093a6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093aa:	685a      	ldr	r2, [r3, #4]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	1ad2      	subs	r2, r2, r3
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093ba:	69b8      	ldr	r0, [r7, #24]
 80093bc:	f000 f8fc 	bl	80095b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093c0:	4b1b      	ldr	r3, [pc, #108]	; (8009430 <pvPortMalloc+0x184>)
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	4a19      	ldr	r2, [pc, #100]	; (8009430 <pvPortMalloc+0x184>)
 80093cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093ce:	4b18      	ldr	r3, [pc, #96]	; (8009430 <pvPortMalloc+0x184>)
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	4b19      	ldr	r3, [pc, #100]	; (8009438 <pvPortMalloc+0x18c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d203      	bcs.n	80093e2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093da:	4b15      	ldr	r3, [pc, #84]	; (8009430 <pvPortMalloc+0x184>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a16      	ldr	r2, [pc, #88]	; (8009438 <pvPortMalloc+0x18c>)
 80093e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	4b11      	ldr	r3, [pc, #68]	; (800942c <pvPortMalloc+0x180>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	431a      	orrs	r2, r3
 80093ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80093f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093f2:	2200      	movs	r2, #0
 80093f4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80093f6:	f7fe ff3b 	bl	8008270 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	f003 0307 	and.w	r3, r3, #7
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00b      	beq.n	800941c <pvPortMalloc+0x170>
 8009404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009408:	b672      	cpsid	i
 800940a:	f383 8811 	msr	BASEPRI, r3
 800940e:	f3bf 8f6f 	isb	sy
 8009412:	f3bf 8f4f 	dsb	sy
 8009416:	b662      	cpsie	i
 8009418:	60fb      	str	r3, [r7, #12]
 800941a:	e7fe      	b.n	800941a <pvPortMalloc+0x16e>
	return pvReturn;
 800941c:	69fb      	ldr	r3, [r7, #28]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3728      	adds	r7, #40	; 0x28
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	20004048 	.word	0x20004048
 800942c:	20004054 	.word	0x20004054
 8009430:	2000404c 	.word	0x2000404c
 8009434:	20004040 	.word	0x20004040
 8009438:	20004050 	.word	0x20004050

0800943c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b086      	sub	sp, #24
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d04a      	beq.n	80094e4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800944e:	2308      	movs	r3, #8
 8009450:	425b      	negs	r3, r3
 8009452:	697a      	ldr	r2, [r7, #20]
 8009454:	4413      	add	r3, r2
 8009456:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	685a      	ldr	r2, [r3, #4]
 8009460:	4b22      	ldr	r3, [pc, #136]	; (80094ec <vPortFree+0xb0>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4013      	ands	r3, r2
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10b      	bne.n	8009482 <vPortFree+0x46>
 800946a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946e:	b672      	cpsid	i
 8009470:	f383 8811 	msr	BASEPRI, r3
 8009474:	f3bf 8f6f 	isb	sy
 8009478:	f3bf 8f4f 	dsb	sy
 800947c:	b662      	cpsie	i
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	e7fe      	b.n	8009480 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d00b      	beq.n	80094a2 <vPortFree+0x66>
 800948a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948e:	b672      	cpsid	i
 8009490:	f383 8811 	msr	BASEPRI, r3
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	f3bf 8f4f 	dsb	sy
 800949c:	b662      	cpsie	i
 800949e:	60bb      	str	r3, [r7, #8]
 80094a0:	e7fe      	b.n	80094a0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	685a      	ldr	r2, [r3, #4]
 80094a6:	4b11      	ldr	r3, [pc, #68]	; (80094ec <vPortFree+0xb0>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4013      	ands	r3, r2
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d019      	beq.n	80094e4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d115      	bne.n	80094e4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	685a      	ldr	r2, [r3, #4]
 80094bc:	4b0b      	ldr	r3, [pc, #44]	; (80094ec <vPortFree+0xb0>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	43db      	mvns	r3, r3
 80094c2:	401a      	ands	r2, r3
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80094c8:	f7fe fec4 	bl	8008254 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	4b07      	ldr	r3, [pc, #28]	; (80094f0 <vPortFree+0xb4>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4413      	add	r3, r2
 80094d6:	4a06      	ldr	r2, [pc, #24]	; (80094f0 <vPortFree+0xb4>)
 80094d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094da:	6938      	ldr	r0, [r7, #16]
 80094dc:	f000 f86c 	bl	80095b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80094e0:	f7fe fec6 	bl	8008270 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80094e4:	bf00      	nop
 80094e6:	3718      	adds	r7, #24
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}
 80094ec:	20004054 	.word	0x20004054
 80094f0:	2000404c 	.word	0x2000404c

080094f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80094fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80094fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009500:	4b27      	ldr	r3, [pc, #156]	; (80095a0 <prvHeapInit+0xac>)
 8009502:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f003 0307 	and.w	r3, r3, #7
 800950a:	2b00      	cmp	r3, #0
 800950c:	d00c      	beq.n	8009528 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	3307      	adds	r3, #7
 8009512:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f023 0307 	bic.w	r3, r3, #7
 800951a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	1ad3      	subs	r3, r2, r3
 8009522:	4a1f      	ldr	r2, [pc, #124]	; (80095a0 <prvHeapInit+0xac>)
 8009524:	4413      	add	r3, r2
 8009526:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800952c:	4a1d      	ldr	r2, [pc, #116]	; (80095a4 <prvHeapInit+0xb0>)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009532:	4b1c      	ldr	r3, [pc, #112]	; (80095a4 <prvHeapInit+0xb0>)
 8009534:	2200      	movs	r2, #0
 8009536:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	4413      	add	r3, r2
 800953e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009540:	2208      	movs	r2, #8
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	1a9b      	subs	r3, r3, r2
 8009546:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f023 0307 	bic.w	r3, r3, #7
 800954e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	4a15      	ldr	r2, [pc, #84]	; (80095a8 <prvHeapInit+0xb4>)
 8009554:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009556:	4b14      	ldr	r3, [pc, #80]	; (80095a8 <prvHeapInit+0xb4>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2200      	movs	r2, #0
 800955c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800955e:	4b12      	ldr	r3, [pc, #72]	; (80095a8 <prvHeapInit+0xb4>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2200      	movs	r2, #0
 8009564:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	1ad2      	subs	r2, r2, r3
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009574:	4b0c      	ldr	r3, [pc, #48]	; (80095a8 <prvHeapInit+0xb4>)
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	4a0a      	ldr	r2, [pc, #40]	; (80095ac <prvHeapInit+0xb8>)
 8009582:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	4a09      	ldr	r2, [pc, #36]	; (80095b0 <prvHeapInit+0xbc>)
 800958a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800958c:	4b09      	ldr	r3, [pc, #36]	; (80095b4 <prvHeapInit+0xc0>)
 800958e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009592:	601a      	str	r2, [r3, #0]
}
 8009594:	bf00      	nop
 8009596:	3714      	adds	r7, #20
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr
 80095a0:	20000440 	.word	0x20000440
 80095a4:	20004040 	.word	0x20004040
 80095a8:	20004048 	.word	0x20004048
 80095ac:	20004050 	.word	0x20004050
 80095b0:	2000404c 	.word	0x2000404c
 80095b4:	20004054 	.word	0x20004054

080095b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80095b8:	b480      	push	{r7}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095c0:	4b28      	ldr	r3, [pc, #160]	; (8009664 <prvInsertBlockIntoFreeList+0xac>)
 80095c2:	60fb      	str	r3, [r7, #12]
 80095c4:	e002      	b.n	80095cc <prvInsertBlockIntoFreeList+0x14>
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	60fb      	str	r3, [r7, #12]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d8f7      	bhi.n	80095c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	68ba      	ldr	r2, [r7, #8]
 80095e0:	4413      	add	r3, r2
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d108      	bne.n	80095fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	685a      	ldr	r2, [r3, #4]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	441a      	add	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	441a      	add	r2, r3
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	429a      	cmp	r2, r3
 800960c:	d118      	bne.n	8009640 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	4b15      	ldr	r3, [pc, #84]	; (8009668 <prvInsertBlockIntoFreeList+0xb0>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	429a      	cmp	r2, r3
 8009618:	d00d      	beq.n	8009636 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685a      	ldr	r2, [r3, #4]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	441a      	add	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	e008      	b.n	8009648 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009636:	4b0c      	ldr	r3, [pc, #48]	; (8009668 <prvInsertBlockIntoFreeList+0xb0>)
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	e003      	b.n	8009648 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	429a      	cmp	r2, r3
 800964e:	d002      	beq.n	8009656 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009656:	bf00      	nop
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	20004040 	.word	0x20004040
 8009668:	20004048 	.word	0x20004048

0800966c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009676:	f008 ffcd 	bl	8012614 <sys_timeouts_sleeptime>
 800967a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009682:	d10b      	bne.n	800969c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009684:	4813      	ldr	r0, [pc, #76]	; (80096d4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009686:	f00b fd36 	bl	80150f6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800968a:	2200      	movs	r2, #0
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f00b fca8 	bl	8014fe4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8009694:	480f      	ldr	r0, [pc, #60]	; (80096d4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009696:	f00b fd1f 	bl	80150d8 <sys_mutex_lock>
    return;
 800969a:	e018      	b.n	80096ce <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d102      	bne.n	80096a8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80096a2:	f008 ff7d 	bl	80125a0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80096a6:	e7e6      	b.n	8009676 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80096a8:	480a      	ldr	r0, [pc, #40]	; (80096d4 <tcpip_timeouts_mbox_fetch+0x68>)
 80096aa:	f00b fd24 	bl	80150f6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f00b fc96 	bl	8014fe4 <sys_arch_mbox_fetch>
 80096b8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80096ba:	4806      	ldr	r0, [pc, #24]	; (80096d4 <tcpip_timeouts_mbox_fetch+0x68>)
 80096bc:	f00b fd0c 	bl	80150d8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096c6:	d102      	bne.n	80096ce <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80096c8:	f008 ff6a 	bl	80125a0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80096cc:	e7d3      	b.n	8009676 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	20007cc8 	.word	0x20007cc8

080096d8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80096e0:	4810      	ldr	r0, [pc, #64]	; (8009724 <tcpip_thread+0x4c>)
 80096e2:	f00b fcf9 	bl	80150d8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80096e6:	4b10      	ldr	r3, [pc, #64]	; (8009728 <tcpip_thread+0x50>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d005      	beq.n	80096fa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80096ee:	4b0e      	ldr	r3, [pc, #56]	; (8009728 <tcpip_thread+0x50>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a0e      	ldr	r2, [pc, #56]	; (800972c <tcpip_thread+0x54>)
 80096f4:	6812      	ldr	r2, [r2, #0]
 80096f6:	4610      	mov	r0, r2
 80096f8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80096fa:	f107 030c 	add.w	r3, r7, #12
 80096fe:	4619      	mov	r1, r3
 8009700:	480b      	ldr	r0, [pc, #44]	; (8009730 <tcpip_thread+0x58>)
 8009702:	f7ff ffb3 	bl	800966c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d106      	bne.n	800971a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800970c:	4b09      	ldr	r3, [pc, #36]	; (8009734 <tcpip_thread+0x5c>)
 800970e:	2291      	movs	r2, #145	; 0x91
 8009710:	4909      	ldr	r1, [pc, #36]	; (8009738 <tcpip_thread+0x60>)
 8009712:	480a      	ldr	r0, [pc, #40]	; (800973c <tcpip_thread+0x64>)
 8009714:	f00b fda0 	bl	8015258 <iprintf>
      continue;
 8009718:	e003      	b.n	8009722 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	4618      	mov	r0, r3
 800971e:	f000 f80f 	bl	8009740 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009722:	e7ea      	b.n	80096fa <tcpip_thread+0x22>
 8009724:	20007cc8 	.word	0x20007cc8
 8009728:	20004058 	.word	0x20004058
 800972c:	2000405c 	.word	0x2000405c
 8009730:	20004060 	.word	0x20004060
 8009734:	08016500 	.word	0x08016500
 8009738:	08016530 	.word	0x08016530
 800973c:	08016550 	.word	0x08016550

08009740 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b082      	sub	sp, #8
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d018      	beq.n	8009782 <tcpip_thread_handle_msg+0x42>
 8009750:	2b02      	cmp	r3, #2
 8009752:	d021      	beq.n	8009798 <tcpip_thread_handle_msg+0x58>
 8009754:	2b00      	cmp	r3, #0
 8009756:	d126      	bne.n	80097a6 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	6850      	ldr	r0, [r2, #4]
 8009760:	687a      	ldr	r2, [r7, #4]
 8009762:	6892      	ldr	r2, [r2, #8]
 8009764:	4611      	mov	r1, r2
 8009766:	4798      	blx	r3
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d004      	beq.n	8009778 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	4618      	mov	r0, r3
 8009774:	f002 fb10 	bl	800bd98 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009778:	6879      	ldr	r1, [r7, #4]
 800977a:	2009      	movs	r0, #9
 800977c:	f001 fc6c 	bl	800b058 <memp_free>
      break;
 8009780:	e018      	b.n	80097b4 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	6892      	ldr	r2, [r2, #8]
 800978a:	4610      	mov	r0, r2
 800978c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800978e:	6879      	ldr	r1, [r7, #4]
 8009790:	2008      	movs	r0, #8
 8009792:	f001 fc61 	bl	800b058 <memp_free>
      break;
 8009796:	e00d      	b.n	80097b4 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	687a      	ldr	r2, [r7, #4]
 800979e:	6892      	ldr	r2, [r2, #8]
 80097a0:	4610      	mov	r0, r2
 80097a2:	4798      	blx	r3
      break;
 80097a4:	e006      	b.n	80097b4 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80097a6:	4b05      	ldr	r3, [pc, #20]	; (80097bc <tcpip_thread_handle_msg+0x7c>)
 80097a8:	22cf      	movs	r2, #207	; 0xcf
 80097aa:	4905      	ldr	r1, [pc, #20]	; (80097c0 <tcpip_thread_handle_msg+0x80>)
 80097ac:	4805      	ldr	r0, [pc, #20]	; (80097c4 <tcpip_thread_handle_msg+0x84>)
 80097ae:	f00b fd53 	bl	8015258 <iprintf>
      break;
 80097b2:	bf00      	nop
  }
}
 80097b4:	bf00      	nop
 80097b6:	3708      	adds	r7, #8
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	08016500 	.word	0x08016500
 80097c0:	08016530 	.word	0x08016530
 80097c4:	08016550 	.word	0x08016550

080097c8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b086      	sub	sp, #24
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80097d4:	481a      	ldr	r0, [pc, #104]	; (8009840 <tcpip_inpkt+0x78>)
 80097d6:	f00b fc44 	bl	8015062 <sys_mbox_valid>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d105      	bne.n	80097ec <tcpip_inpkt+0x24>
 80097e0:	4b18      	ldr	r3, [pc, #96]	; (8009844 <tcpip_inpkt+0x7c>)
 80097e2:	22fc      	movs	r2, #252	; 0xfc
 80097e4:	4918      	ldr	r1, [pc, #96]	; (8009848 <tcpip_inpkt+0x80>)
 80097e6:	4819      	ldr	r0, [pc, #100]	; (800984c <tcpip_inpkt+0x84>)
 80097e8:	f00b fd36 	bl	8015258 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80097ec:	2009      	movs	r0, #9
 80097ee:	f001 fbe1 	bl	800afb4 <memp_malloc>
 80097f2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d102      	bne.n	8009800 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80097fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80097fe:	e01a      	b.n	8009836 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	2200      	movs	r2, #0
 8009804:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	68fa      	ldr	r2, [r7, #12]
 800980a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009818:	6979      	ldr	r1, [r7, #20]
 800981a:	4809      	ldr	r0, [pc, #36]	; (8009840 <tcpip_inpkt+0x78>)
 800981c:	f00b fbc8 	bl	8014fb0 <sys_mbox_trypost>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d006      	beq.n	8009834 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009826:	6979      	ldr	r1, [r7, #20]
 8009828:	2009      	movs	r0, #9
 800982a:	f001 fc15 	bl	800b058 <memp_free>
    return ERR_MEM;
 800982e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009832:	e000      	b.n	8009836 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009834:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009836:	4618      	mov	r0, r3
 8009838:	3718      	adds	r7, #24
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	20004060 	.word	0x20004060
 8009844:	08016500 	.word	0x08016500
 8009848:	08016578 	.word	0x08016578
 800984c:	08016550 	.word	0x08016550

08009850 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009860:	f003 0318 	and.w	r3, r3, #24
 8009864:	2b00      	cmp	r3, #0
 8009866:	d006      	beq.n	8009876 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009868:	4a08      	ldr	r2, [pc, #32]	; (800988c <tcpip_input+0x3c>)
 800986a:	6839      	ldr	r1, [r7, #0]
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f7ff ffab 	bl	80097c8 <tcpip_inpkt>
 8009872:	4603      	mov	r3, r0
 8009874:	e005      	b.n	8009882 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009876:	4a06      	ldr	r2, [pc, #24]	; (8009890 <tcpip_input+0x40>)
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7ff ffa4 	bl	80097c8 <tcpip_inpkt>
 8009880:	4603      	mov	r3, r0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3708      	adds	r7, #8
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	08014dc1 	.word	0x08014dc1
 8009890:	08013ce1 	.word	0x08013ce1

08009894 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800989e:	4819      	ldr	r0, [pc, #100]	; (8009904 <tcpip_try_callback+0x70>)
 80098a0:	f00b fbdf 	bl	8015062 <sys_mbox_valid>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d106      	bne.n	80098b8 <tcpip_try_callback+0x24>
 80098aa:	4b17      	ldr	r3, [pc, #92]	; (8009908 <tcpip_try_callback+0x74>)
 80098ac:	f240 125d 	movw	r2, #349	; 0x15d
 80098b0:	4916      	ldr	r1, [pc, #88]	; (800990c <tcpip_try_callback+0x78>)
 80098b2:	4817      	ldr	r0, [pc, #92]	; (8009910 <tcpip_try_callback+0x7c>)
 80098b4:	f00b fcd0 	bl	8015258 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80098b8:	2008      	movs	r0, #8
 80098ba:	f001 fb7b 	bl	800afb4 <memp_malloc>
 80098be:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d102      	bne.n	80098cc <tcpip_try_callback+0x38>
    return ERR_MEM;
 80098c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098ca:	e017      	b.n	80098fc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2201      	movs	r2, #1
 80098d0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	683a      	ldr	r2, [r7, #0]
 80098dc:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80098de:	68f9      	ldr	r1, [r7, #12]
 80098e0:	4808      	ldr	r0, [pc, #32]	; (8009904 <tcpip_try_callback+0x70>)
 80098e2:	f00b fb65 	bl	8014fb0 <sys_mbox_trypost>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d006      	beq.n	80098fa <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80098ec:	68f9      	ldr	r1, [r7, #12]
 80098ee:	2008      	movs	r0, #8
 80098f0:	f001 fbb2 	bl	800b058 <memp_free>
    return ERR_MEM;
 80098f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098f8:	e000      	b.n	80098fc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3710      	adds	r7, #16
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	20004060 	.word	0x20004060
 8009908:	08016500 	.word	0x08016500
 800990c:	08016578 	.word	0x08016578
 8009910:	08016550 	.word	0x08016550

08009914 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af02      	add	r7, sp, #8
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800991e:	f000 fec1 	bl	800a6a4 <lwip_init>

  tcpip_init_done = initfunc;
 8009922:	4a17      	ldr	r2, [pc, #92]	; (8009980 <tcpip_init+0x6c>)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009928:	4a16      	ldr	r2, [pc, #88]	; (8009984 <tcpip_init+0x70>)
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800992e:	2106      	movs	r1, #6
 8009930:	4815      	ldr	r0, [pc, #84]	; (8009988 <tcpip_init+0x74>)
 8009932:	f00b fb1b 	bl	8014f6c <sys_mbox_new>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d006      	beq.n	800994a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800993c:	4b13      	ldr	r3, [pc, #76]	; (800998c <tcpip_init+0x78>)
 800993e:	f240 2261 	movw	r2, #609	; 0x261
 8009942:	4913      	ldr	r1, [pc, #76]	; (8009990 <tcpip_init+0x7c>)
 8009944:	4813      	ldr	r0, [pc, #76]	; (8009994 <tcpip_init+0x80>)
 8009946:	f00b fc87 	bl	8015258 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800994a:	4813      	ldr	r0, [pc, #76]	; (8009998 <tcpip_init+0x84>)
 800994c:	f00b fba8 	bl	80150a0 <sys_mutex_new>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d006      	beq.n	8009964 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009956:	4b0d      	ldr	r3, [pc, #52]	; (800998c <tcpip_init+0x78>)
 8009958:	f240 2265 	movw	r2, #613	; 0x265
 800995c:	490f      	ldr	r1, [pc, #60]	; (800999c <tcpip_init+0x88>)
 800995e:	480d      	ldr	r0, [pc, #52]	; (8009994 <tcpip_init+0x80>)
 8009960:	f00b fc7a 	bl	8015258 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009964:	2300      	movs	r3, #0
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800996c:	2200      	movs	r2, #0
 800996e:	490c      	ldr	r1, [pc, #48]	; (80099a0 <tcpip_init+0x8c>)
 8009970:	480c      	ldr	r0, [pc, #48]	; (80099a4 <tcpip_init+0x90>)
 8009972:	f00b fbcd 	bl	8015110 <sys_thread_new>
}
 8009976:	bf00      	nop
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	20004058 	.word	0x20004058
 8009984:	2000405c 	.word	0x2000405c
 8009988:	20004060 	.word	0x20004060
 800998c:	08016500 	.word	0x08016500
 8009990:	08016588 	.word	0x08016588
 8009994:	08016550 	.word	0x08016550
 8009998:	20007cc8 	.word	0x20007cc8
 800999c:	080165ac 	.word	0x080165ac
 80099a0:	080096d9 	.word	0x080096d9
 80099a4:	080165d0 	.word	0x080165d0

080099a8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d002      	beq.n	80099be <fs_open+0x16>
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d102      	bne.n	80099c4 <fs_open+0x1c>
    return ERR_ARG;
 80099be:	f06f 030f 	mvn.w	r3, #15
 80099c2:	e028      	b.n	8009a16 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80099c4:	4b16      	ldr	r3, [pc, #88]	; (8009a20 <fs_open+0x78>)
 80099c6:	60fb      	str	r3, [r7, #12]
 80099c8:	e020      	b.n	8009a0c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	685b      	ldr	r3, [r3, #4]
 80099ce:	4619      	mov	r1, r3
 80099d0:	6838      	ldr	r0, [r7, #0]
 80099d2:	f7f6 fc35 	bl	8000240 <strcmp>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d114      	bne.n	8009a06 <fs_open+0x5e>
      file->data = (const char *)f->data;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	689a      	ldr	r2, [r3, #8]
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	68da      	ldr	r2, [r3, #12]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	68da      	ldr	r2, [r3, #12]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2200      	movs	r2, #0
 80099f8:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	7c1a      	ldrb	r2, [r3, #16]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8009a02:	2300      	movs	r3, #0
 8009a04:	e007      	b.n	8009a16 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	60fb      	str	r3, [r7, #12]
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1db      	bne.n	80099ca <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8009a12:	f06f 0305 	mvn.w	r3, #5
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3710      	adds	r7, #16
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	08029cc4 	.word	0x08029cc4

08009a24 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685a      	ldr	r2, [r3, #4]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	689b      	ldr	r3, [r3, #8]
 8009a48:	1ad3      	subs	r3, r2, r3
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 8009a5e:	222c      	movs	r2, #44	; 0x2c
 8009a60:	2100      	movs	r1, #0
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f00b fbef 	bl	8015246 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 8009a68:	bf00      	nop
 8009a6a:	3708      	adds	r7, #8
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8009a76:	202c      	movs	r0, #44	; 0x2c
 8009a78:	f001 f91a 	bl	800acb0 <mem_malloc>
 8009a7c:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d002      	beq.n	8009a8a <http_state_alloc+0x1a>
    http_state_init(ret);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f7ff ffe6 	bl	8009a56 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 8009a8a:	687b      	ldr	r3, [r7, #4]
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	695b      	ldr	r3, [r3, #20]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d007      	beq.n	8009ab4 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f7ff ffbb 	bl	8009a24 <fs_close>
    hs->handle = NULL;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	615a      	str	r2, [r3, #20]
    http_ssi_state_free(hs->ssi);
    hs->ssi = NULL;
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a1b      	ldr	r3, [r3, #32]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d007      	beq.n	8009acc <http_state_eof+0x38>
    pbuf_free(hs->req);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a1b      	ldr	r3, [r3, #32]
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f002 f969 	bl	800bd98 <pbuf_free>
    hs->req = NULL;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8009acc:	bf00      	nop
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d005      	beq.n	8009aee <http_state_free+0x1a>
    http_state_eof(hs);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7ff ffd6 	bl	8009a94 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 ff47 	bl	800a97c <mem_free>
  }
}
 8009aee:	bf00      	nop
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
	...

08009af8 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b086      	sub	sp, #24
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	60f8      	str	r0, [r7, #12]
 8009b00:	60b9      	str	r1, [r7, #8]
 8009b02:	607a      	str	r2, [r7, #4]
 8009b04:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d106      	bne.n	8009b1a <http_write+0x22>
 8009b0c:	4b2c      	ldr	r3, [pc, #176]	; (8009bc0 <http_write+0xc8>)
 8009b0e:	f240 2219 	movw	r2, #537	; 0x219
 8009b12:	492c      	ldr	r1, [pc, #176]	; (8009bc4 <http_write+0xcc>)
 8009b14:	482c      	ldr	r0, [pc, #176]	; (8009bc8 <http_write+0xd0>)
 8009b16:	f00b fb9f 	bl	8015258 <iprintf>
  len = *length;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	881b      	ldrh	r3, [r3, #0]
 8009b1e:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8009b20:	8afb      	ldrh	r3, [r7, #22]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d101      	bne.n	8009b2a <http_write+0x32>
    return ERR_OK;
 8009b26:	2300      	movs	r3, #0
 8009b28:	e045      	b.n	8009bb6 <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009b30:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 8009b32:	8aba      	ldrh	r2, [r7, #20]
 8009b34:	8afb      	ldrh	r3, [r7, #22]
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d201      	bcs.n	8009b3e <http_write+0x46>
    len = max_len;
 8009b3a:	8abb      	ldrh	r3, [r7, #20]
 8009b3c:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 8009b46:	8afa      	ldrh	r2, [r7, #22]
 8009b48:	8abb      	ldrh	r3, [r7, #20]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d901      	bls.n	8009b52 <http_write+0x5a>
    len = max_len;
 8009b4e:	8abb      	ldrh	r3, [r7, #20]
 8009b50:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8009b52:	78fb      	ldrb	r3, [r7, #3]
 8009b54:	8afa      	ldrh	r2, [r7, #22]
 8009b56:	68b9      	ldr	r1, [r7, #8]
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f006 fea7 	bl	80108ac <tcp_write>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 8009b62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009b66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b6a:	d10f      	bne.n	8009b8c <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d004      	beq.n	8009b80 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 8009b7c:	2b08      	cmp	r3, #8
 8009b7e:	d902      	bls.n	8009b86 <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 8009b80:	2301      	movs	r3, #1
 8009b82:	82fb      	strh	r3, [r7, #22]
 8009b84:	e002      	b.n	8009b8c <http_write+0x94>
      } else {
        len /= 2;
 8009b86:	8afb      	ldrh	r3, [r7, #22]
 8009b88:	085b      	lsrs	r3, r3, #1
 8009b8a:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8009b8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b94:	d102      	bne.n	8009b9c <http_write+0xa4>
 8009b96:	8afb      	ldrh	r3, [r7, #22]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d8da      	bhi.n	8009b52 <http_write+0x5a>

  if (err == ERR_OK) {
 8009b9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d103      	bne.n	8009bac <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	8afa      	ldrh	r2, [r7, #22]
 8009ba8:	801a      	strh	r2, [r3, #0]
 8009baa:	e002      	b.n	8009bb2 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8009bb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3718      	adds	r7, #24
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	08016620 	.word	0x08016620
 8009bc4:	08016658 	.word	0x08016658
 8009bc8:	08016668 	.word	0x08016668

08009bcc <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b086      	sub	sp, #24
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 8009bda:	2100      	movs	r1, #0
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f003 ff29 	bl	800da34 <tcp_arg>
  altcp_recv(pcb, NULL);
 8009be2:	2100      	movs	r1, #0
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f003 ff37 	bl	800da58 <tcp_recv>
  altcp_err(pcb, NULL);
 8009bea:	2100      	movs	r1, #0
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f003 ff77 	bl	800dae0 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f003 ffac 	bl	800db54 <tcp_poll>
  altcp_sent(pcb, NULL);
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f003 ff4c 	bl	800da9c <tcp_sent>
  if (hs != NULL) {
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d002      	beq.n	8009c10 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 8009c0a:	68b8      	ldr	r0, [r7, #8]
 8009c0c:	f7ff ff62 	bl	8009ad4 <http_state_free>
  }

  if (abort_conn) {
 8009c10:	79fb      	ldrb	r3, [r7, #7]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d004      	beq.n	8009c20 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f002 fe4a 	bl	800c8b0 <tcp_abort>
    return ERR_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	e00f      	b.n	8009c40 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	f002 fd5b 	bl	800c6dc <tcp_close>
 8009c26:	4603      	mov	r3, r0
 8009c28:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 8009c2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d004      	beq.n	8009c3c <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8009c32:	2204      	movs	r2, #4
 8009c34:	4904      	ldr	r1, [pc, #16]	; (8009c48 <http_close_or_abort_conn+0x7c>)
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f003 ff8c 	bl	800db54 <tcp_poll>
  }
  return err;
 8009c3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3718      	adds	r7, #24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	0800a30f 	.word	0x0800a30f

08009c4c <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 8009c56:	2200      	movs	r2, #0
 8009c58:	6839      	ldr	r1, [r7, #0]
 8009c5a:	6878      	ldr	r0, [r7, #4]
 8009c5c:	f7ff ffb6 	bl	8009bcc <http_close_or_abort_conn>
 8009c60:	4603      	mov	r3, r0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3708      	adds	r7, #8
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b082      	sub	sp, #8
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 8009c74:	6839      	ldr	r1, [r7, #0]
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f7ff ffe8 	bl	8009c4c <http_close_conn>
  }
}
 8009c7c:	bf00      	nop
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	695b      	ldr	r3, [r3, #20]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d105      	bne.n	8009ca2 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f7ff ffe6 	bl	8009c6a <http_eof>
    return 0;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	e016      	b.n	8009cd0 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	695b      	ldr	r3, [r3, #20]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7ff fec6 	bl	8009a38 <fs_bytes_left>
 8009cac:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	dc05      	bgt.n	8009cc0 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8009cb4:	6839      	ldr	r1, [r7, #0]
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7ff ffd7 	bl	8009c6a <http_eof>
    return 0;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	e007      	b.n	8009cd0 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8009cc0:	4b05      	ldr	r3, [pc, #20]	; (8009cd8 <http_check_eof+0x54>)
 8009cc2:	f240 429d 	movw	r2, #1181	; 0x49d
 8009cc6:	4905      	ldr	r1, [pc, #20]	; (8009cdc <http_check_eof+0x58>)
 8009cc8:	4805      	ldr	r0, [pc, #20]	; (8009ce0 <http_check_eof+0x5c>)
 8009cca:	f00b fac5 	bl	8015258 <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8009cce:	2301      	movs	r3, #1
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	08016620 	.word	0x08016620
 8009cdc:	08016690 	.word	0x08016690
 8009ce0:	08016668 	.word	0x08016668

08009ce4 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d803      	bhi.n	8009d06 <http_send_data_nonssi+0x22>
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	e001      	b.n	8009d0a <http_send_data_nonssi+0x26>
 8009d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d0a:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	6999      	ldr	r1, [r3, #24]
 8009d10:	f107 020c 	add.w	r2, r7, #12
 8009d14:	2300      	movs	r3, #0
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7ff feee 	bl	8009af8 <http_write>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8009d20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d10d      	bne.n	8009d44 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	699b      	ldr	r3, [r3, #24]
 8009d30:	89ba      	ldrh	r2, [r7, #12]
 8009d32:	441a      	add	r2, r3
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3c:	89ba      	ldrh	r2, [r7, #12]
 8009d3e:	1a9a      	subs	r2, r3, r2
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8009d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d101      	bne.n	8009d66 <http_send+0x18>
    return 0;
 8009d62:	2300      	movs	r3, #0
 8009d64:	e025      	b.n	8009db2 <http_send+0x64>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d108      	bne.n	8009d80 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 8009d6e:	6839      	ldr	r1, [r7, #0]
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7ff ff87 	bl	8009c84 <http_check_eof>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d101      	bne.n	8009d80 <http_send+0x32>
      return 0;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	e018      	b.n	8009db2 <http_send+0x64>
  if (hs->ssi) {
    data_to_send = http_send_data_ssi(pcb, hs);
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 8009d80:	6839      	ldr	r1, [r7, #0]
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff ffae 	bl	8009ce4 <http_send_data_nonssi>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10d      	bne.n	8009db0 <http_send+0x62>
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	695b      	ldr	r3, [r3, #20]
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7ff fe4d 	bl	8009a38 <fs_bytes_left>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	dc05      	bgt.n	8009db0 <http_send+0x62>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8009da4:	6839      	ldr	r1, [r7, #0]
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7ff ff5f 	bl	8009c6a <http_eof>
    return 0;
 8009dac:	2300      	movs	r3, #0
 8009dae:	e000      	b.n	8009db2 <http_send+0x64>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
	...

08009dbc <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b084      	sub	sp, #16
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	4a1c      	ldr	r2, [pc, #112]	; (8009e3c <http_get_404_file+0x80>)
 8009dca:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	4610      	mov	r0, r2
 8009dd6:	f7ff fde7 	bl	80099a8 <fs_open>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8009dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d024      	beq.n	8009e30 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	4a15      	ldr	r2, [pc, #84]	; (8009e40 <http_get_404_file+0x84>)
 8009dea:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4619      	mov	r1, r3
 8009df4:	4610      	mov	r0, r2
 8009df6:	f7ff fdd7 	bl	80099a8 <fs_open>
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d014      	beq.n	8009e30 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	4a0e      	ldr	r2, [pc, #56]	; (8009e44 <http_get_404_file+0x88>)
 8009e0a:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4619      	mov	r1, r3
 8009e14:	4610      	mov	r0, r2
 8009e16:	f7ff fdc7 	bl	80099a8 <fs_open>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8009e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d004      	beq.n	8009e30 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	601a      	str	r2, [r3, #0]
        return NULL;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	e000      	b.n	8009e32 <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 8009e30:	687b      	ldr	r3, [r7, #4]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	080166c8 	.word	0x080166c8
 8009e40:	080166d4 	.word	0x080166d4
 8009e44:	080166e0 	.word	0x080166e0

08009e48 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b08e      	sub	sp, #56	; 0x38
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 8009e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d106      	bne.n	8009e6c <http_parse_request+0x24>
 8009e5e:	4b65      	ldr	r3, [pc, #404]	; (8009ff4 <http_parse_request+0x1ac>)
 8009e60:	f240 72ae 	movw	r2, #1966	; 0x7ae
 8009e64:	4964      	ldr	r1, [pc, #400]	; (8009ff8 <http_parse_request+0x1b0>)
 8009e66:	4865      	ldr	r0, [pc, #404]	; (8009ffc <http_parse_request+0x1b4>)
 8009e68:	f00b f9f6 	bl	8015258 <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d106      	bne.n	8009e80 <http_parse_request+0x38>
 8009e72:	4b60      	ldr	r3, [pc, #384]	; (8009ff4 <http_parse_request+0x1ac>)
 8009e74:	f240 72af 	movw	r2, #1967	; 0x7af
 8009e78:	4961      	ldr	r1, [pc, #388]	; (800a000 <http_parse_request+0x1b8>)
 8009e7a:	4860      	ldr	r0, [pc, #384]	; (8009ffc <http_parse_request+0x1b4>)
 8009e7c:	f00b f9ec 	bl	8015258 <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	695b      	ldr	r3, [r3, #20]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d103      	bne.n	8009e90 <http_parse_request+0x48>
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 8009e90:	f06f 0307 	mvn.w	r3, #7
 8009e94:	e0aa      	b.n	8009fec <http_parse_request+0x1a4>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	6a1b      	ldr	r3, [r3, #32]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d103      	bne.n	8009ea6 <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea2:	621a      	str	r2, [r3, #32]
 8009ea4:	e005      	b.n	8009eb2 <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	6a1b      	ldr	r3, [r3, #32]
 8009eaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009eac:	4618      	mov	r0, r3
 8009eae:	f002 f841 	bl	800bf34 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 8009eb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009eb4:	f002 f816 	bl	800bee4 <pbuf_ref>

  if (hs->req->next != NULL) {
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	6a1b      	ldr	r3, [r3, #32]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d012      	beq.n	8009ee8 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	891b      	ldrh	r3, [r3, #8]
 8009ec8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	bf28      	it	cs
 8009ed0:	4613      	movcs	r3, r2
 8009ed2:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	6a18      	ldr	r0, [r3, #32]
 8009ed8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009eda:	2300      	movs	r3, #0
 8009edc:	4949      	ldr	r1, [pc, #292]	; (800a004 <http_parse_request+0x1bc>)
 8009ede:	f002 f951 	bl	800c184 <pbuf_copy_partial>
    data = httpd_req_buf;
 8009ee2:	4b48      	ldr	r3, [pc, #288]	; (800a004 <http_parse_request+0x1bc>)
 8009ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8009ee6:	e005      	b.n	8009ef4 <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 8009ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	895b      	ldrh	r3, [r3, #10]
 8009ef2:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 8009ef4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009ef6:	2b06      	cmp	r3, #6
 8009ef8:	d963      	bls.n	8009fc2 <http_parse_request+0x17a>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 8009efa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009efc:	461a      	mov	r2, r3
 8009efe:	4942      	ldr	r1, [pc, #264]	; (800a008 <http_parse_request+0x1c0>)
 8009f00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009f02:	f000 fb99 	bl	800a638 <lwip_strnstr>
 8009f06:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 8009f08:	6a3b      	ldr	r3, [r7, #32]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d059      	beq.n	8009fc2 <http_parse_request+0x17a>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 8009f12:	2204      	movs	r2, #4
 8009f14:	493d      	ldr	r1, [pc, #244]	; (800a00c <http_parse_request+0x1c4>)
 8009f16:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009f18:	f00b fa17 	bl	801534a <strncmp>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d117      	bne.n	8009f52 <http_parse_request+0x10a>
        sp1 = data + 3;
 8009f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f24:	3303      	adds	r3, #3
 8009f26:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f30:	1ad3      	subs	r3, r2, r3
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8009f3a:	69fb      	ldr	r3, [r7, #28]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	8b7a      	ldrh	r2, [r7, #26]
 8009f40:	4933      	ldr	r1, [pc, #204]	; (800a010 <http_parse_request+0x1c8>)
 8009f42:	4618      	mov	r0, r3
 8009f44:	f000 fb78 	bl	800a638 <lwip_strnstr>
 8009f48:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 8009f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d111      	bne.n	8009f74 <http_parse_request+0x12c>
 8009f50:	e006      	b.n	8009f60 <http_parse_request+0x118>
        data[4] = 0;
 8009f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f54:	3304      	adds	r3, #4
 8009f56:	2200      	movs	r2, #0
 8009f58:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 8009f5a:	f06f 030f 	mvn.w	r3, #15
 8009f5e:	e045      	b.n	8009fec <http_parse_request+0x1a4>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8009f60:	69fb      	ldr	r3, [r7, #28]
 8009f62:	3301      	adds	r3, #1
 8009f64:	8b7a      	ldrh	r2, [r7, #26]
 8009f66:	4928      	ldr	r1, [pc, #160]	; (800a008 <http_parse_request+0x1c0>)
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 fb65 	bl	800a638 <lwip_strnstr>
 8009f6e:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 8009f70:	2301      	movs	r3, #1
 8009f72:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8009f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f76:	69fa      	ldr	r2, [r7, #28]
 8009f78:	3201      	adds	r2, #1
 8009f7a:	1a9b      	subs	r3, r3, r2
 8009f7c:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 8009f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d01e      	beq.n	8009fc2 <http_parse_request+0x17a>
 8009f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d91a      	bls.n	8009fc2 <http_parse_request+0x17a>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8009f8c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009f8e:	461a      	mov	r2, r3
 8009f90:	4920      	ldr	r1, [pc, #128]	; (800a014 <http_parse_request+0x1cc>)
 8009f92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009f94:	f000 fb50 	bl	800a638 <lwip_strnstr>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d011      	beq.n	8009fc2 <http_parse_request+0x17a>
          char *uri = sp1 + 1;
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 8009faa:	8b3b      	ldrh	r3, [r7, #24]
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	4413      	add	r3, r2
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 8009fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009fb6:	6979      	ldr	r1, [r7, #20]
 8009fb8:	68b8      	ldr	r0, [r7, #8]
 8009fba:	f000 f82d 	bl	800a018 <http_find_file>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	e014      	b.n	8009fec <http_parse_request+0x1a4>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f001 ff74 	bl	800beb4 <pbuf_clen>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	6a1b      	ldr	r3, [r3, #32]
 8009fd4:	891b      	ldrh	r3, [r3, #8]
 8009fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fda:	d205      	bcs.n	8009fe8 <http_parse_request+0x1a0>
 8009fdc:	8a7b      	ldrh	r3, [r7, #18]
 8009fde:	2b05      	cmp	r3, #5
 8009fe0:	d802      	bhi.n	8009fe8 <http_parse_request+0x1a0>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 8009fe2:	f06f 0304 	mvn.w	r3, #4
 8009fe6:	e001      	b.n	8009fec <http_parse_request+0x1a4>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 8009fe8:	f06f 030f 	mvn.w	r3, #15
  }
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3738      	adds	r7, #56	; 0x38
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	08016620 	.word	0x08016620
 8009ff8:	080166ec 	.word	0x080166ec
 8009ffc:	08016668 	.word	0x08016668
 800a000:	080166f8 	.word	0x080166f8
 800a004:	20004064 	.word	0x20004064
 800a008:	08016704 	.word	0x08016704
 800a00c:	08016708 	.word	0x08016708
 800a010:	08016710 	.word	0x08016710
 800a014:	08016714 	.word	0x08016714

0800a018 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b092      	sub	sp, #72	; 0x48
 800a01c:	af02      	add	r7, sp, #8
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800a024:	2300      	movs	r3, #0
 800a026:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800a028:	2300      	movs	r3, #0
 800a02a:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800a02c:	2300      	movs	r3, #0
 800a02e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	4618      	mov	r0, r3
 800a036:	f7f6 f90d 	bl	8000254 <strlen>
 800a03a:	62b8      	str	r0, [r7, #40]	; 0x28
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d06b      	beq.n	800a11a <http_find_file+0x102>
 800a042:	68ba      	ldr	r2, [r7, #8]
 800a044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a046:	3b01      	subs	r3, #1
 800a048:	4413      	add	r3, r2
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2b2f      	cmp	r3, #47	; 0x2f
 800a04e:	d164      	bne.n	800a11a <http_find_file+0x102>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a050:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a052:	4a53      	ldr	r2, [pc, #332]	; (800a1a0 <http_find_file+0x188>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d102      	bne.n	800a05e <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05a:	2b01      	cmp	r3, #1
 800a05c:	d15d      	bne.n	800a11a <http_find_file+0x102>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800a05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a060:	3b01      	subs	r3, #1
 800a062:	2b3f      	cmp	r3, #63	; 0x3f
 800a064:	bf28      	it	cs
 800a066:	233f      	movcs	r3, #63	; 0x3f
 800a068:	627b      	str	r3, [r7, #36]	; 0x24
    if (copy_len > 0) {
 800a06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00a      	beq.n	800a086 <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a074:	4619      	mov	r1, r3
 800a076:	484a      	ldr	r0, [pc, #296]	; (800a1a0 <http_find_file+0x188>)
 800a078:	f00b f8c1 	bl	80151fe <memcpy>
      http_uri_buf[copy_len] = 0;
 800a07c:	4a48      	ldr	r2, [pc, #288]	; (800a1a0 <http_find_file+0x188>)
 800a07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a080:	4413      	add	r3, r2
 800a082:	2200      	movs	r2, #0
 800a084:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a086:	2300      	movs	r3, #0
 800a088:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a08a:	e043      	b.n	800a114 <http_find_file+0xfc>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800a08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d028      	beq.n	800a0e4 <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800a092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a094:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800a098:	623b      	str	r3, [r7, #32]
        if (len_left > 0) {
 800a09a:	6a3b      	ldr	r3, [r7, #32]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d01e      	beq.n	800a0de <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800a0a0:	4a40      	ldr	r2, [pc, #256]	; (800a1a4 <http_find_file+0x18c>)
 800a0a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7f6 f8d3 	bl	8000254 <strlen>
 800a0ae:	61f8      	str	r0, [r7, #28]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800a0b0:	69fa      	ldr	r2, [r7, #28]
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	bf28      	it	cs
 800a0b8:	4613      	movcs	r3, r2
 800a0ba:	61bb      	str	r3, [r7, #24]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800a0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0be:	4a38      	ldr	r2, [pc, #224]	; (800a1a0 <http_find_file+0x188>)
 800a0c0:	1898      	adds	r0, r3, r2
 800a0c2:	4a38      	ldr	r2, [pc, #224]	; (800a1a4 <http_find_file+0x18c>)
 800a0c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0c6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	4619      	mov	r1, r3
 800a0ce:	f00b f896 	bl	80151fe <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800a0d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	4a31      	ldr	r2, [pc, #196]	; (800a1a0 <http_find_file+0x188>)
 800a0da:	2100      	movs	r1, #0
 800a0dc:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800a0de:	4b30      	ldr	r3, [pc, #192]	; (800a1a0 <http_find_file+0x188>)
 800a0e0:	633b      	str	r3, [r7, #48]	; 0x30
 800a0e2:	e004      	b.n	800a0ee <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800a0e4:	4a2f      	ldr	r2, [pc, #188]	; (800a1a4 <http_find_file+0x18c>)
 800a0e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a0ec:	633b      	str	r3, [r7, #48]	; 0x30
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f7ff fc58 	bl	80099a8 <fs_open>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	75fb      	strb	r3, [r7, #23]
      if (err == ERR_OK) {
 800a0fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d104      	bne.n	800a10e <http_find_file+0xf6>
        uri = file_name;
 800a104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a106:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
#endif /* LWIP_HTTPD_SSI */
        break;
 800a10c:	e005      	b.n	800a11a <http_find_file+0x102>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a110:	3301      	adds	r3, #1
 800a112:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a116:	2b04      	cmp	r3, #4
 800a118:	d9b8      	bls.n	800a08c <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800a11a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d124      	bne.n	800a16a <http_find_file+0x152>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	213f      	movs	r1, #63	; 0x3f
 800a124:	4618      	mov	r0, r3
 800a126:	f00b f903 	bl	8015330 <strchr>
 800a12a:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800a12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d005      	beq.n	800a13e <http_find_file+0x126>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800a132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a134:	2200      	movs	r2, #0
 800a136:	701a      	strb	r2, [r3, #0]
      params++;
 800a138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a13a:	3301      	adds	r3, #1
 800a13c:	637b      	str	r3, [r7, #52]	; 0x34
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	4611      	mov	r1, r2
 800a144:	4618      	mov	r0, r3
 800a146:	f7ff fc2f 	bl	80099a8 <fs_open>
 800a14a:	4603      	mov	r3, r0
 800a14c:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800a14e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d102      	bne.n	800a15c <http_find_file+0x144>
      file = &hs->file_handle;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	63bb      	str	r3, [r7, #56]	; 0x38
 800a15a:	e006      	b.n	800a16a <http_find_file+0x152>
    } else {
      file = http_get_404_file(hs, &uri);
 800a15c:	f107 0308 	add.w	r3, r7, #8
 800a160:	4619      	mov	r1, r3
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f7ff fe2a 	bl	8009dbc <http_get_404_file>
 800a168:	63b8      	str	r0, [r7, #56]	; 0x38
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800a16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d106      	bne.n	800a17e <http_find_file+0x166>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800a170:	f107 0308 	add.w	r3, r7, #8
 800a174:	4619      	mov	r1, r3
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f7ff fe20 	bl	8009dbc <http_get_404_file>
 800a17c:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a182:	9301      	str	r3, [sp, #4]
 800a184:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a188:	9300      	str	r3, [sp, #0]
 800a18a:	4613      	mov	r3, r2
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f000 f809 	bl	800a1a8 <http_init_file>
 800a196:	4603      	mov	r3, r0
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3740      	adds	r7, #64	; 0x40
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	20004464 	.word	0x20004464
 800a1a4:	08029cd8 	.word	0x08029cd8

0800a1a8 <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
 800a1b4:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800a1b6:	68bb      	ldr	r3, [r7, #8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d05d      	beq.n	800a278 <http_init_file+0xd0>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d106      	bne.n	800a1d2 <http_init_file+0x2a>
 800a1c4:	4b35      	ldr	r3, [pc, #212]	; (800a29c <http_init_file+0xf4>)
 800a1c6:	f640 120b 	movw	r2, #2315	; 0x90b
 800a1ca:	4935      	ldr	r1, [pc, #212]	; (800a2a0 <http_init_file+0xf8>)
 800a1cc:	4835      	ldr	r0, [pc, #212]	; (800a2a4 <http_init_file+0xfc>)
 800a1ce:	f00b f843 	bl	8015258 <iprintf>
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	681a      	ldr	r2, [r3, #0]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	685b      	ldr	r3, [r3, #4]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	da06      	bge.n	800a1f6 <http_init_file+0x4e>
 800a1e8:	4b2c      	ldr	r3, [pc, #176]	; (800a29c <http_init_file+0xf4>)
 800a1ea:	f640 1234 	movw	r2, #2356	; 0x934
 800a1ee:	492e      	ldr	r1, [pc, #184]	; (800a2a8 <http_init_file+0x100>)
 800a1f0:	482c      	ldr	r0, [pc, #176]	; (800a2a4 <http_init_file+0xfc>)
 800a1f2:	f00b f831 	bl	8015258 <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2200      	movs	r2, #0
 800a204:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	695b      	ldr	r3, [r3, #20]
 800a20c:	7c1b      	ldrb	r3, [r3, #16]
 800a20e:	f003 0301 	and.w	r3, r3, #1
 800a212:	2b00      	cmp	r3, #0
 800a214:	d106      	bne.n	800a224 <http_init_file+0x7c>
 800a216:	4b21      	ldr	r3, [pc, #132]	; (800a29c <http_init_file+0xf4>)
 800a218:	f640 1244 	movw	r2, #2372	; 0x944
 800a21c:	4923      	ldr	r1, [pc, #140]	; (800a2ac <http_init_file+0x104>)
 800a21e:	4821      	ldr	r0, [pc, #132]	; (800a2a4 <http_init_file+0xfc>)
 800a220:	f00b f81a 	bl	8015258 <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d033      	beq.n	800a292 <http_init_file+0xea>
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	7c1b      	ldrb	r3, [r3, #16]
 800a230:	f003 0301 	and.w	r3, r3, #1
 800a234:	2b00      	cmp	r3, #0
 800a236:	d02c      	beq.n	800a292 <http_init_file+0xea>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6998      	ldr	r0, [r3, #24]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a240:	461a      	mov	r2, r3
 800a242:	491b      	ldr	r1, [pc, #108]	; (800a2b0 <http_init_file+0x108>)
 800a244:	f000 f9f8 	bl	800a638 <lwip_strnstr>
 800a248:	6178      	str	r0, [r7, #20]
      if (file_start != NULL) {
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d020      	beq.n	800a292 <http_init_file+0xea>
        int diff = file_start + 4 - hs->file;
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	3304      	adds	r3, #4
 800a254:	461a      	mov	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	613b      	str	r3, [r7, #16]
        hs->file += diff;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	699a      	ldr	r2, [r3, #24]
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	441a      	add	r2, r3
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	1ad2      	subs	r2, r2, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	625a      	str	r2, [r3, #36]	; 0x24
 800a276:	e00c      	b.n	800a292 <http_init_file+0xea>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3718      	adds	r7, #24
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	08016620 	.word	0x08016620
 800a2a0:	0801671c 	.word	0x0801671c
 800a2a4:	08016668 	.word	0x08016668
 800a2a8:	08016730 	.word	0x08016730
 800a2ac:	08016750 	.word	0x08016750
 800a2b0:	08016714 	.word	0x08016714

0800a2b4 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b084      	sub	sp, #16
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	460b      	mov	r3, r1
 800a2be:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d002      	beq.n	800a2d0 <http_err+0x1c>
    http_state_free(hs);
 800a2ca:	68f8      	ldr	r0, [r7, #12]
 800a2cc:	f7ff fc02 	bl	8009ad4 <http_state_free>
  }
}
 800a2d0:	bf00      	nop
 800a2d2:	3710      	adds	r7, #16
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b086      	sub	sp, #24
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	60f8      	str	r0, [r7, #12]
 800a2e0:	60b9      	str	r1, [r7, #8]
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d101      	bne.n	800a2f4 <http_sent+0x1c>
    return ERR_OK;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	e008      	b.n	800a306 <http_sent+0x2e>
  }

  hs->retries = 0;
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800a2fc:	6979      	ldr	r1, [r7, #20]
 800a2fe:	68b8      	ldr	r0, [r7, #8]
 800a300:	f7ff fd25 	bl	8009d4e <http_send>

  return ERR_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b084      	sub	sp, #16
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d107      	bne.n	800a332 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800a322:	2100      	movs	r1, #0
 800a324:	6838      	ldr	r0, [r7, #0]
 800a326:	f7ff fc91 	bl	8009c4c <http_close_conn>
 800a32a:	4603      	mov	r3, r0
 800a32c:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	e021      	b.n	800a376 <http_poll+0x68>
  } else {
    hs->retries++;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a338:	3301      	adds	r3, #1
 800a33a:	b2da      	uxtb	r2, r3
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a348:	2b04      	cmp	r3, #4
 800a34a:	d105      	bne.n	800a358 <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800a34c:	68f9      	ldr	r1, [r7, #12]
 800a34e:	6838      	ldr	r0, [r7, #0]
 800a350:	f7ff fc7c 	bl	8009c4c <http_close_conn>
      return ERR_OK;
 800a354:	2300      	movs	r3, #0
 800a356:	e00e      	b.n	800a376 <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	695b      	ldr	r3, [r3, #20]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d009      	beq.n	800a374 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800a360:	68f9      	ldr	r1, [r7, #12]
 800a362:	6838      	ldr	r0, [r7, #0]
 800a364:	f7ff fcf3 	bl	8009d4e <http_send>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d002      	beq.n	800a374 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800a36e:	6838      	ldr	r0, [r7, #0]
 800a370:	f007 f888 	bl	8011484 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
	...

0800a380 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af00      	add	r7, sp, #0
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
 800a38c:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800a392:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d105      	bne.n	800a3a6 <http_recv+0x26>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <http_recv+0x26>
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d111      	bne.n	800a3ca <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d008      	beq.n	800a3be <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	891b      	ldrh	r3, [r3, #8]
 800a3b0:	4619      	mov	r1, r3
 800a3b2:	68b8      	ldr	r0, [r7, #8]
 800a3b4:	f002 fc56 	bl	800cc64 <tcp_recved>
      pbuf_free(p);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f001 fced 	bl	800bd98 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800a3be:	6979      	ldr	r1, [r7, #20]
 800a3c0:	68b8      	ldr	r0, [r7, #8]
 800a3c2:	f7ff fc43 	bl	8009c4c <http_close_conn>
    return ERR_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	e055      	b.n	800a476 <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	891b      	ldrh	r3, [r3, #8]
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	68b8      	ldr	r0, [r7, #8]
 800a3d2:	f002 fc47 	bl	800cc64 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d147      	bne.n	800a46e <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	6979      	ldr	r1, [r7, #20]
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f7ff fd30 	bl	8009e48 <http_parse_request>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800a3ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d015      	beq.n	800a420 <http_recv+0xa0>
 800a3f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a3f8:	f113 0f05 	cmn.w	r3, #5
 800a3fc:	d010      	beq.n	800a420 <http_recv+0xa0>
 800a3fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a402:	f113 0f10 	cmn.w	r3, #16
 800a406:	d00b      	beq.n	800a420 <http_recv+0xa0>
 800a408:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a40c:	f113 0f08 	cmn.w	r3, #8
 800a410:	d006      	beq.n	800a420 <http_recv+0xa0>
 800a412:	4b1b      	ldr	r3, [pc, #108]	; (800a480 <http_recv+0x100>)
 800a414:	f640 2205 	movw	r2, #2565	; 0xa05
 800a418:	491a      	ldr	r1, [pc, #104]	; (800a484 <http_recv+0x104>)
 800a41a:	481b      	ldr	r0, [pc, #108]	; (800a488 <http_recv+0x108>)
 800a41c:	f00a ff1c 	bl	8015258 <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800a420:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a424:	f113 0f05 	cmn.w	r3, #5
 800a428:	d00b      	beq.n	800a442 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	6a1b      	ldr	r3, [r3, #32]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d007      	beq.n	800a442 <http_recv+0xc2>
          pbuf_free(hs->req);
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	6a1b      	ldr	r3, [r3, #32]
 800a436:	4618      	mov	r0, r3
 800a438:	f001 fcae 	bl	800bd98 <pbuf_free>
          hs->req = NULL;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	2200      	movs	r2, #0
 800a440:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f001 fca8 	bl	800bd98 <pbuf_free>
      if (parsed == ERR_OK) {
 800a448:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d104      	bne.n	800a45a <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800a450:	6979      	ldr	r1, [r7, #20]
 800a452:	68b8      	ldr	r0, [r7, #8]
 800a454:	f7ff fc7b 	bl	8009d4e <http_send>
 800a458:	e00c      	b.n	800a474 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800a45a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a45e:	f113 0f10 	cmn.w	r3, #16
 800a462:	d107      	bne.n	800a474 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800a464:	6979      	ldr	r1, [r7, #20]
 800a466:	68b8      	ldr	r0, [r7, #8]
 800a468:	f7ff fbf0 	bl	8009c4c <http_close_conn>
 800a46c:	e002      	b.n	800a474 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f001 fc92 	bl	800bd98 <pbuf_free>
    }
  }
  return ERR_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3718      	adds	r7, #24
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	08016620 	.word	0x08016620
 800a484:	0801677c 	.word	0x0801677c
 800a488:	08016668 	.word	0x08016668

0800a48c <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	4613      	mov	r3, r2
 800a498:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800a49a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d102      	bne.n	800a4a8 <http_accept+0x1c>
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d102      	bne.n	800a4ae <http_accept+0x22>
    return ERR_VAL;
 800a4a8:	f06f 0305 	mvn.w	r3, #5
 800a4ac:	e025      	b.n	800a4fa <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a4ae:	2101      	movs	r1, #1
 800a4b0:	68b8      	ldr	r0, [r7, #8]
 800a4b2:	f003 f8b7 	bl	800d624 <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800a4b6:	f7ff fadb 	bl	8009a70 <http_state_alloc>
 800a4ba:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d102      	bne.n	800a4c8 <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800a4c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4c6:	e018      	b.n	800a4fa <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	68ba      	ldr	r2, [r7, #8]
 800a4cc:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800a4ce:	6979      	ldr	r1, [r7, #20]
 800a4d0:	68b8      	ldr	r0, [r7, #8]
 800a4d2:	f003 faaf 	bl	800da34 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800a4d6:	490b      	ldr	r1, [pc, #44]	; (800a504 <http_accept+0x78>)
 800a4d8:	68b8      	ldr	r0, [r7, #8]
 800a4da:	f003 fabd 	bl	800da58 <tcp_recv>
  altcp_err(pcb, http_err);
 800a4de:	490a      	ldr	r1, [pc, #40]	; (800a508 <http_accept+0x7c>)
 800a4e0:	68b8      	ldr	r0, [r7, #8]
 800a4e2:	f003 fafd 	bl	800dae0 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a4e6:	2204      	movs	r2, #4
 800a4e8:	4908      	ldr	r1, [pc, #32]	; (800a50c <http_accept+0x80>)
 800a4ea:	68b8      	ldr	r0, [r7, #8]
 800a4ec:	f003 fb32 	bl	800db54 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800a4f0:	4907      	ldr	r1, [pc, #28]	; (800a510 <http_accept+0x84>)
 800a4f2:	68b8      	ldr	r0, [r7, #8]
 800a4f4:	f003 fad2 	bl	800da9c <tcp_sent>

  return ERR_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3718      	adds	r7, #24
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
 800a502:	bf00      	nop
 800a504:	0800a381 	.word	0x0800a381
 800a508:	0800a2b5 	.word	0x0800a2b5
 800a50c:	0800a30f 	.word	0x0800a30f
 800a510:	0800a2d9 	.word	0x0800a2d9

0800a514 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	460b      	mov	r3, r1
 800a51e:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d029      	beq.n	800a57a <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a526:	2101      	movs	r1, #1
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f003 f87b 	bl	800d624 <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800a52e:	887b      	ldrh	r3, [r7, #2]
 800a530:	461a      	mov	r2, r3
 800a532:	4914      	ldr	r1, [pc, #80]	; (800a584 <httpd_init_pcb+0x70>)
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f002 f9c7 	bl	800c8c8 <tcp_bind>
 800a53a:	4603      	mov	r3, r0
 800a53c:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800a53e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d006      	beq.n	800a554 <httpd_init_pcb+0x40>
 800a546:	4b10      	ldr	r3, [pc, #64]	; (800a588 <httpd_init_pcb+0x74>)
 800a548:	f640 2257 	movw	r2, #2647	; 0xa57
 800a54c:	490f      	ldr	r1, [pc, #60]	; (800a58c <httpd_init_pcb+0x78>)
 800a54e:	4810      	ldr	r0, [pc, #64]	; (800a590 <httpd_init_pcb+0x7c>)
 800a550:	f00a fe82 	bl	8015258 <iprintf>
    pcb = altcp_listen(pcb);
 800a554:	21ff      	movs	r1, #255	; 0xff
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f002 fa6e 	bl	800ca38 <tcp_listen_with_backlog>
 800a55c:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d106      	bne.n	800a572 <httpd_init_pcb+0x5e>
 800a564:	4b08      	ldr	r3, [pc, #32]	; (800a588 <httpd_init_pcb+0x74>)
 800a566:	f640 2259 	movw	r2, #2649	; 0xa59
 800a56a:	490a      	ldr	r1, [pc, #40]	; (800a594 <httpd_init_pcb+0x80>)
 800a56c:	4808      	ldr	r0, [pc, #32]	; (800a590 <httpd_init_pcb+0x7c>)
 800a56e:	f00a fe73 	bl	8015258 <iprintf>
    altcp_accept(pcb, http_accept);
 800a572:	4909      	ldr	r1, [pc, #36]	; (800a598 <httpd_init_pcb+0x84>)
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f003 fad5 	bl	800db24 <tcp_accept>
  }
}
 800a57a:	bf00      	nop
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	08029e10 	.word	0x08029e10
 800a588:	08016620 	.word	0x08016620
 800a58c:	080167a8 	.word	0x080167a8
 800a590:	08016668 	.word	0x08016668
 800a594:	080167c4 	.word	0x080167c4
 800a598:	0800a48d 	.word	0x0800a48d

0800a59c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800a5a2:	202e      	movs	r0, #46	; 0x2e
 800a5a4:	f003 fa38 	bl	800da18 <tcp_new_ip_type>
 800a5a8:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d106      	bne.n	800a5be <httpd_init+0x22>
 800a5b0:	4b07      	ldr	r3, [pc, #28]	; (800a5d0 <httpd_init+0x34>)
 800a5b2:	f640 2272 	movw	r2, #2674	; 0xa72
 800a5b6:	4907      	ldr	r1, [pc, #28]	; (800a5d4 <httpd_init+0x38>)
 800a5b8:	4807      	ldr	r0, [pc, #28]	; (800a5d8 <httpd_init+0x3c>)
 800a5ba:	f00a fe4d 	bl	8015258 <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800a5be:	2150      	movs	r1, #80	; 0x50
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f7ff ffa7 	bl	800a514 <httpd_init_pcb>
}
 800a5c6:	bf00      	nop
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	08016620 	.word	0x08016620
 800a5d4:	080167e4 	.word	0x080167e4
 800a5d8:	08016668 	.word	0x08016668

0800a5dc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a5e6:	88fb      	ldrh	r3, [r7, #6]
 800a5e8:	021b      	lsls	r3, r3, #8
 800a5ea:	b21a      	sxth	r2, r3
 800a5ec:	88fb      	ldrh	r3, [r7, #6]
 800a5ee:	0a1b      	lsrs	r3, r3, #8
 800a5f0:	b29b      	uxth	r3, r3
 800a5f2:	b21b      	sxth	r3, r3
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	b21b      	sxth	r3, r3
 800a5f8:	b29b      	uxth	r3, r3
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	370c      	adds	r7, #12
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a606:	b480      	push	{r7}
 800a608:	b083      	sub	sp, #12
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	061a      	lsls	r2, r3, #24
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	021b      	lsls	r3, r3, #8
 800a616:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a61a:	431a      	orrs	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	0a1b      	lsrs	r3, r3, #8
 800a620:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a624:	431a      	orrs	r2, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	0e1b      	lsrs	r3, r3, #24
 800a62a:	4313      	orrs	r3, r2
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	370c      	adds	r7, #12
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b086      	sub	sp, #24
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800a644:	68b8      	ldr	r0, [r7, #8]
 800a646:	f7f5 fe05 	bl	8000254 <strlen>
 800a64a:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d101      	bne.n	800a656 <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	e022      	b.n	800a69c <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	617b      	str	r3, [r7, #20]
 800a65a:	e012      	b.n	800a682 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	781a      	ldrb	r2, [r3, #0]
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	781b      	ldrb	r3, [r3, #0]
 800a664:	429a      	cmp	r2, r3
 800a666:	d109      	bne.n	800a67c <lwip_strnstr+0x44>
 800a668:	693a      	ldr	r2, [r7, #16]
 800a66a:	68b9      	ldr	r1, [r7, #8]
 800a66c:	6978      	ldr	r0, [r7, #20]
 800a66e:	f00a fe6c 	bl	801534a <strncmp>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d101      	bne.n	800a67c <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	e00f      	b.n	800a69c <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	3301      	adds	r3, #1
 800a680:	617b      	str	r3, [r7, #20]
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d007      	beq.n	800a69a <lwip_strnstr+0x62>
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	441a      	add	r2, r3
 800a690:	68f9      	ldr	r1, [r7, #12]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	440b      	add	r3, r1
 800a696:	429a      	cmp	r2, r3
 800a698:	d9e0      	bls.n	800a65c <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3718      	adds	r7, #24
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a6ae:	f00a fce9 	bl	8015084 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a6b2:	f000 f8d5 	bl	800a860 <mem_init>
  memp_init();
 800a6b6:	f000 fc31 	bl	800af1c <memp_init>
  pbuf_init();
  netif_init();
 800a6ba:	f000 fcf7 	bl	800b0ac <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a6be:	f007 ffe1 	bl	8012684 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a6c2:	f001 fe03 	bl	800c2cc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a6c6:	f007 ff25 	bl	8012514 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a6ca:	bf00      	nop
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
	...

0800a6d4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	4603      	mov	r3, r0
 800a6dc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a6de:	4b05      	ldr	r3, [pc, #20]	; (800a6f4 <ptr_to_mem+0x20>)
 800a6e0:	681a      	ldr	r2, [r3, #0]
 800a6e2:	88fb      	ldrh	r3, [r7, #6]
 800a6e4:	4413      	add	r3, r2
}
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	370c      	adds	r7, #12
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr
 800a6f2:	bf00      	nop
 800a6f4:	200044a4 	.word	0x200044a4

0800a6f8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a05      	ldr	r2, [pc, #20]	; (800a718 <mem_to_ptr+0x20>)
 800a704:	6812      	ldr	r2, [r2, #0]
 800a706:	1a9b      	subs	r3, r3, r2
 800a708:	b29b      	uxth	r3, r3
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	370c      	adds	r7, #12
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	200044a4 	.word	0x200044a4

0800a71c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a71c:	b590      	push	{r4, r7, lr}
 800a71e:	b085      	sub	sp, #20
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a724:	4b45      	ldr	r3, [pc, #276]	; (800a83c <plug_holes+0x120>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	687a      	ldr	r2, [r7, #4]
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d206      	bcs.n	800a73c <plug_holes+0x20>
 800a72e:	4b44      	ldr	r3, [pc, #272]	; (800a840 <plug_holes+0x124>)
 800a730:	f240 12df 	movw	r2, #479	; 0x1df
 800a734:	4943      	ldr	r1, [pc, #268]	; (800a844 <plug_holes+0x128>)
 800a736:	4844      	ldr	r0, [pc, #272]	; (800a848 <plug_holes+0x12c>)
 800a738:	f00a fd8e 	bl	8015258 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a73c:	4b43      	ldr	r3, [pc, #268]	; (800a84c <plug_holes+0x130>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	429a      	cmp	r2, r3
 800a744:	d306      	bcc.n	800a754 <plug_holes+0x38>
 800a746:	4b3e      	ldr	r3, [pc, #248]	; (800a840 <plug_holes+0x124>)
 800a748:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a74c:	4940      	ldr	r1, [pc, #256]	; (800a850 <plug_holes+0x134>)
 800a74e:	483e      	ldr	r0, [pc, #248]	; (800a848 <plug_holes+0x12c>)
 800a750:	f00a fd82 	bl	8015258 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	791b      	ldrb	r3, [r3, #4]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d006      	beq.n	800a76a <plug_holes+0x4e>
 800a75c:	4b38      	ldr	r3, [pc, #224]	; (800a840 <plug_holes+0x124>)
 800a75e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a762:	493c      	ldr	r1, [pc, #240]	; (800a854 <plug_holes+0x138>)
 800a764:	4838      	ldr	r0, [pc, #224]	; (800a848 <plug_holes+0x12c>)
 800a766:	f00a fd77 	bl	8015258 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	881b      	ldrh	r3, [r3, #0]
 800a76e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a772:	d906      	bls.n	800a782 <plug_holes+0x66>
 800a774:	4b32      	ldr	r3, [pc, #200]	; (800a840 <plug_holes+0x124>)
 800a776:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a77a:	4937      	ldr	r1, [pc, #220]	; (800a858 <plug_holes+0x13c>)
 800a77c:	4832      	ldr	r0, [pc, #200]	; (800a848 <plug_holes+0x12c>)
 800a77e:	f00a fd6b 	bl	8015258 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	881b      	ldrh	r3, [r3, #0]
 800a786:	4618      	mov	r0, r3
 800a788:	f7ff ffa4 	bl	800a6d4 <ptr_to_mem>
 800a78c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	429a      	cmp	r2, r3
 800a794:	d024      	beq.n	800a7e0 <plug_holes+0xc4>
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	791b      	ldrb	r3, [r3, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d120      	bne.n	800a7e0 <plug_holes+0xc4>
 800a79e:	4b2b      	ldr	r3, [pc, #172]	; (800a84c <plug_holes+0x130>)
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	68fa      	ldr	r2, [r7, #12]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d01b      	beq.n	800a7e0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a7a8:	4b2c      	ldr	r3, [pc, #176]	; (800a85c <plug_holes+0x140>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d102      	bne.n	800a7b8 <plug_holes+0x9c>
      lfree = mem;
 800a7b2:	4a2a      	ldr	r2, [pc, #168]	; (800a85c <plug_holes+0x140>)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	881a      	ldrh	r2, [r3, #0]
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	881b      	ldrh	r3, [r3, #0]
 800a7c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a7c8:	d00a      	beq.n	800a7e0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	881b      	ldrh	r3, [r3, #0]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7ff ff80 	bl	800a6d4 <ptr_to_mem>
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f7ff ff8e 	bl	800a6f8 <mem_to_ptr>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	885b      	ldrh	r3, [r3, #2]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7ff ff75 	bl	800a6d4 <ptr_to_mem>
 800a7ea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d01f      	beq.n	800a834 <plug_holes+0x118>
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	791b      	ldrb	r3, [r3, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d11b      	bne.n	800a834 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a7fc:	4b17      	ldr	r3, [pc, #92]	; (800a85c <plug_holes+0x140>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	429a      	cmp	r2, r3
 800a804:	d102      	bne.n	800a80c <plug_holes+0xf0>
      lfree = pmem;
 800a806:	4a15      	ldr	r2, [pc, #84]	; (800a85c <plug_holes+0x140>)
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	881a      	ldrh	r2, [r3, #0]
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	881b      	ldrh	r3, [r3, #0]
 800a818:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a81c:	d00a      	beq.n	800a834 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	881b      	ldrh	r3, [r3, #0]
 800a822:	4618      	mov	r0, r3
 800a824:	f7ff ff56 	bl	800a6d4 <ptr_to_mem>
 800a828:	4604      	mov	r4, r0
 800a82a:	68b8      	ldr	r0, [r7, #8]
 800a82c:	f7ff ff64 	bl	800a6f8 <mem_to_ptr>
 800a830:	4603      	mov	r3, r0
 800a832:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a834:	bf00      	nop
 800a836:	3714      	adds	r7, #20
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd90      	pop	{r4, r7, pc}
 800a83c:	200044a4 	.word	0x200044a4
 800a840:	08016800 	.word	0x08016800
 800a844:	08016830 	.word	0x08016830
 800a848:	08016848 	.word	0x08016848
 800a84c:	200044a8 	.word	0x200044a8
 800a850:	08016870 	.word	0x08016870
 800a854:	0801688c 	.word	0x0801688c
 800a858:	080168a8 	.word	0x080168a8
 800a85c:	200044b0 	.word	0x200044b0

0800a860 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a866:	4b1f      	ldr	r3, [pc, #124]	; (800a8e4 <mem_init+0x84>)
 800a868:	3303      	adds	r3, #3
 800a86a:	f023 0303 	bic.w	r3, r3, #3
 800a86e:	461a      	mov	r2, r3
 800a870:	4b1d      	ldr	r3, [pc, #116]	; (800a8e8 <mem_init+0x88>)
 800a872:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a874:	4b1c      	ldr	r3, [pc, #112]	; (800a8e8 <mem_init+0x88>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a880:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2200      	movs	r2, #0
 800a886:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a88e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a892:	f7ff ff1f 	bl	800a6d4 <ptr_to_mem>
 800a896:	4602      	mov	r2, r0
 800a898:	4b14      	ldr	r3, [pc, #80]	; (800a8ec <mem_init+0x8c>)
 800a89a:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 800a89c:	4b13      	ldr	r3, [pc, #76]	; (800a8ec <mem_init+0x8c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a8a4:	4b11      	ldr	r3, [pc, #68]	; (800a8ec <mem_init+0x8c>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a8ac:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a8ae:	4b0f      	ldr	r3, [pc, #60]	; (800a8ec <mem_init+0x8c>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a8b6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a8b8:	4b0b      	ldr	r3, [pc, #44]	; (800a8e8 <mem_init+0x88>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a0c      	ldr	r2, [pc, #48]	; (800a8f0 <mem_init+0x90>)
 800a8be:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a8c0:	480c      	ldr	r0, [pc, #48]	; (800a8f4 <mem_init+0x94>)
 800a8c2:	f00a fbed 	bl	80150a0 <sys_mutex_new>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d006      	beq.n	800a8da <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a8cc:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <mem_init+0x98>)
 800a8ce:	f240 221f 	movw	r2, #543	; 0x21f
 800a8d2:	490a      	ldr	r1, [pc, #40]	; (800a8fc <mem_init+0x9c>)
 800a8d4:	480a      	ldr	r0, [pc, #40]	; (800a900 <mem_init+0xa0>)
 800a8d6:	f00a fcbf 	bl	8015258 <iprintf>
  }
}
 800a8da:	bf00      	nop
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20007ce4 	.word	0x20007ce4
 800a8e8:	200044a4 	.word	0x200044a4
 800a8ec:	200044a8 	.word	0x200044a8
 800a8f0:	200044b0 	.word	0x200044b0
 800a8f4:	200044ac 	.word	0x200044ac
 800a8f8:	08016800 	.word	0x08016800
 800a8fc:	080168d4 	.word	0x080168d4
 800a900:	08016848 	.word	0x08016848

0800a904 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b086      	sub	sp, #24
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7ff fef3 	bl	800a6f8 <mem_to_ptr>
 800a912:	4603      	mov	r3, r0
 800a914:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	881b      	ldrh	r3, [r3, #0]
 800a91a:	4618      	mov	r0, r3
 800a91c:	f7ff feda 	bl	800a6d4 <ptr_to_mem>
 800a920:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	885b      	ldrh	r3, [r3, #2]
 800a926:	4618      	mov	r0, r3
 800a928:	f7ff fed4 	bl	800a6d4 <ptr_to_mem>
 800a92c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	881b      	ldrh	r3, [r3, #0]
 800a932:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a936:	d818      	bhi.n	800a96a <mem_link_valid+0x66>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	885b      	ldrh	r3, [r3, #2]
 800a93c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a940:	d813      	bhi.n	800a96a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a946:	8afa      	ldrh	r2, [r7, #22]
 800a948:	429a      	cmp	r2, r3
 800a94a:	d004      	beq.n	800a956 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	881b      	ldrh	r3, [r3, #0]
 800a950:	8afa      	ldrh	r2, [r7, #22]
 800a952:	429a      	cmp	r2, r3
 800a954:	d109      	bne.n	800a96a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a956:	4b08      	ldr	r3, [pc, #32]	; (800a978 <mem_link_valid+0x74>)
 800a958:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a95a:	693a      	ldr	r2, [r7, #16]
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d006      	beq.n	800a96e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	885b      	ldrh	r3, [r3, #2]
 800a964:	8afa      	ldrh	r2, [r7, #22]
 800a966:	429a      	cmp	r2, r3
 800a968:	d001      	beq.n	800a96e <mem_link_valid+0x6a>
    return 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	e000      	b.n	800a970 <mem_link_valid+0x6c>
  }
  return 1;
 800a96e:	2301      	movs	r3, #1
}
 800a970:	4618      	mov	r0, r3
 800a972:	3718      	adds	r7, #24
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	200044a8 	.word	0x200044a8

0800a97c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b088      	sub	sp, #32
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d070      	beq.n	800aa6c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f003 0303 	and.w	r3, r3, #3
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00d      	beq.n	800a9b0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a994:	4b37      	ldr	r3, [pc, #220]	; (800aa74 <mem_free+0xf8>)
 800a996:	f240 2273 	movw	r2, #627	; 0x273
 800a99a:	4937      	ldr	r1, [pc, #220]	; (800aa78 <mem_free+0xfc>)
 800a99c:	4837      	ldr	r0, [pc, #220]	; (800aa7c <mem_free+0x100>)
 800a99e:	f00a fc5b 	bl	8015258 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a9a2:	f00a fbdb 	bl	801515c <sys_arch_protect>
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	68f8      	ldr	r0, [r7, #12]
 800a9aa:	f00a fbe5 	bl	8015178 <sys_arch_unprotect>
    return;
 800a9ae:	e05e      	b.n	800aa6e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	3b08      	subs	r3, #8
 800a9b4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a9b6:	4b32      	ldr	r3, [pc, #200]	; (800aa80 <mem_free+0x104>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	69fa      	ldr	r2, [r7, #28]
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d306      	bcc.n	800a9ce <mem_free+0x52>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f103 020c 	add.w	r2, r3, #12
 800a9c6:	4b2f      	ldr	r3, [pc, #188]	; (800aa84 <mem_free+0x108>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d90d      	bls.n	800a9ea <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a9ce:	4b29      	ldr	r3, [pc, #164]	; (800aa74 <mem_free+0xf8>)
 800a9d0:	f240 227f 	movw	r2, #639	; 0x27f
 800a9d4:	492c      	ldr	r1, [pc, #176]	; (800aa88 <mem_free+0x10c>)
 800a9d6:	4829      	ldr	r0, [pc, #164]	; (800aa7c <mem_free+0x100>)
 800a9d8:	f00a fc3e 	bl	8015258 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a9dc:	f00a fbbe 	bl	801515c <sys_arch_protect>
 800a9e0:	6138      	str	r0, [r7, #16]
 800a9e2:	6938      	ldr	r0, [r7, #16]
 800a9e4:	f00a fbc8 	bl	8015178 <sys_arch_unprotect>
    return;
 800a9e8:	e041      	b.n	800aa6e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a9ea:	4828      	ldr	r0, [pc, #160]	; (800aa8c <mem_free+0x110>)
 800a9ec:	f00a fb74 	bl	80150d8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	791b      	ldrb	r3, [r3, #4]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d110      	bne.n	800aa1a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a9f8:	4b1e      	ldr	r3, [pc, #120]	; (800aa74 <mem_free+0xf8>)
 800a9fa:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a9fe:	4924      	ldr	r1, [pc, #144]	; (800aa90 <mem_free+0x114>)
 800aa00:	481e      	ldr	r0, [pc, #120]	; (800aa7c <mem_free+0x100>)
 800aa02:	f00a fc29 	bl	8015258 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800aa06:	4821      	ldr	r0, [pc, #132]	; (800aa8c <mem_free+0x110>)
 800aa08:	f00a fb75 	bl	80150f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aa0c:	f00a fba6 	bl	801515c <sys_arch_protect>
 800aa10:	6178      	str	r0, [r7, #20]
 800aa12:	6978      	ldr	r0, [r7, #20]
 800aa14:	f00a fbb0 	bl	8015178 <sys_arch_unprotect>
    return;
 800aa18:	e029      	b.n	800aa6e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800aa1a:	69f8      	ldr	r0, [r7, #28]
 800aa1c:	f7ff ff72 	bl	800a904 <mem_link_valid>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d110      	bne.n	800aa48 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800aa26:	4b13      	ldr	r3, [pc, #76]	; (800aa74 <mem_free+0xf8>)
 800aa28:	f240 2295 	movw	r2, #661	; 0x295
 800aa2c:	4919      	ldr	r1, [pc, #100]	; (800aa94 <mem_free+0x118>)
 800aa2e:	4813      	ldr	r0, [pc, #76]	; (800aa7c <mem_free+0x100>)
 800aa30:	f00a fc12 	bl	8015258 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800aa34:	4815      	ldr	r0, [pc, #84]	; (800aa8c <mem_free+0x110>)
 800aa36:	f00a fb5e 	bl	80150f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aa3a:	f00a fb8f 	bl	801515c <sys_arch_protect>
 800aa3e:	61b8      	str	r0, [r7, #24]
 800aa40:	69b8      	ldr	r0, [r7, #24]
 800aa42:	f00a fb99 	bl	8015178 <sys_arch_unprotect>
    return;
 800aa46:	e012      	b.n	800aa6e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800aa4e:	4b12      	ldr	r3, [pc, #72]	; (800aa98 <mem_free+0x11c>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	69fa      	ldr	r2, [r7, #28]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d202      	bcs.n	800aa5e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800aa58:	4a0f      	ldr	r2, [pc, #60]	; (800aa98 <mem_free+0x11c>)
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800aa5e:	69f8      	ldr	r0, [r7, #28]
 800aa60:	f7ff fe5c 	bl	800a71c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800aa64:	4809      	ldr	r0, [pc, #36]	; (800aa8c <mem_free+0x110>)
 800aa66:	f00a fb46 	bl	80150f6 <sys_mutex_unlock>
 800aa6a:	e000      	b.n	800aa6e <mem_free+0xf2>
    return;
 800aa6c:	bf00      	nop
}
 800aa6e:	3720      	adds	r7, #32
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	08016800 	.word	0x08016800
 800aa78:	080168f0 	.word	0x080168f0
 800aa7c:	08016848 	.word	0x08016848
 800aa80:	200044a4 	.word	0x200044a4
 800aa84:	200044a8 	.word	0x200044a8
 800aa88:	08016914 	.word	0x08016914
 800aa8c:	200044ac 	.word	0x200044ac
 800aa90:	08016930 	.word	0x08016930
 800aa94:	08016958 	.word	0x08016958
 800aa98:	200044b0 	.word	0x200044b0

0800aa9c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b088      	sub	sp, #32
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	460b      	mov	r3, r1
 800aaa6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800aaa8:	887b      	ldrh	r3, [r7, #2]
 800aaaa:	3303      	adds	r3, #3
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	f023 0303 	bic.w	r3, r3, #3
 800aab2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800aab4:	8bfb      	ldrh	r3, [r7, #30]
 800aab6:	2b0b      	cmp	r3, #11
 800aab8:	d801      	bhi.n	800aabe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800aaba:	230c      	movs	r3, #12
 800aabc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800aabe:	8bfb      	ldrh	r3, [r7, #30]
 800aac0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aac4:	d803      	bhi.n	800aace <mem_trim+0x32>
 800aac6:	8bfa      	ldrh	r2, [r7, #30]
 800aac8:	887b      	ldrh	r3, [r7, #2]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d201      	bcs.n	800aad2 <mem_trim+0x36>
    return NULL;
 800aace:	2300      	movs	r3, #0
 800aad0:	e0d8      	b.n	800ac84 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800aad2:	4b6e      	ldr	r3, [pc, #440]	; (800ac8c <mem_trim+0x1f0>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	429a      	cmp	r2, r3
 800aada:	d304      	bcc.n	800aae6 <mem_trim+0x4a>
 800aadc:	4b6c      	ldr	r3, [pc, #432]	; (800ac90 <mem_trim+0x1f4>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	687a      	ldr	r2, [r7, #4]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d306      	bcc.n	800aaf4 <mem_trim+0x58>
 800aae6:	4b6b      	ldr	r3, [pc, #428]	; (800ac94 <mem_trim+0x1f8>)
 800aae8:	f240 22d2 	movw	r2, #722	; 0x2d2
 800aaec:	496a      	ldr	r1, [pc, #424]	; (800ac98 <mem_trim+0x1fc>)
 800aaee:	486b      	ldr	r0, [pc, #428]	; (800ac9c <mem_trim+0x200>)
 800aaf0:	f00a fbb2 	bl	8015258 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800aaf4:	4b65      	ldr	r3, [pc, #404]	; (800ac8c <mem_trim+0x1f0>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d304      	bcc.n	800ab08 <mem_trim+0x6c>
 800aafe:	4b64      	ldr	r3, [pc, #400]	; (800ac90 <mem_trim+0x1f4>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d307      	bcc.n	800ab18 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ab08:	f00a fb28 	bl	801515c <sys_arch_protect>
 800ab0c:	60b8      	str	r0, [r7, #8]
 800ab0e:	68b8      	ldr	r0, [r7, #8]
 800ab10:	f00a fb32 	bl	8015178 <sys_arch_unprotect>
    return rmem;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	e0b5      	b.n	800ac84 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	3b08      	subs	r3, #8
 800ab1c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ab1e:	69b8      	ldr	r0, [r7, #24]
 800ab20:	f7ff fdea 	bl	800a6f8 <mem_to_ptr>
 800ab24:	4603      	mov	r3, r0
 800ab26:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	881a      	ldrh	r2, [r3, #0]
 800ab2c:	8afb      	ldrh	r3, [r7, #22]
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	3b08      	subs	r3, #8
 800ab34:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ab36:	8bfa      	ldrh	r2, [r7, #30]
 800ab38:	8abb      	ldrh	r3, [r7, #20]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d906      	bls.n	800ab4c <mem_trim+0xb0>
 800ab3e:	4b55      	ldr	r3, [pc, #340]	; (800ac94 <mem_trim+0x1f8>)
 800ab40:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ab44:	4956      	ldr	r1, [pc, #344]	; (800aca0 <mem_trim+0x204>)
 800ab46:	4855      	ldr	r0, [pc, #340]	; (800ac9c <mem_trim+0x200>)
 800ab48:	f00a fb86 	bl	8015258 <iprintf>
  if (newsize > size) {
 800ab4c:	8bfa      	ldrh	r2, [r7, #30]
 800ab4e:	8abb      	ldrh	r3, [r7, #20]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d901      	bls.n	800ab58 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ab54:	2300      	movs	r3, #0
 800ab56:	e095      	b.n	800ac84 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ab58:	8bfa      	ldrh	r2, [r7, #30]
 800ab5a:	8abb      	ldrh	r3, [r7, #20]
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d101      	bne.n	800ab64 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	e08f      	b.n	800ac84 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ab64:	484f      	ldr	r0, [pc, #316]	; (800aca4 <mem_trim+0x208>)
 800ab66:	f00a fab7 	bl	80150d8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ab6a:	69bb      	ldr	r3, [r7, #24]
 800ab6c:	881b      	ldrh	r3, [r3, #0]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7ff fdb0 	bl	800a6d4 <ptr_to_mem>
 800ab74:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	791b      	ldrb	r3, [r3, #4]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d13f      	bne.n	800abfe <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ab7e:	69bb      	ldr	r3, [r7, #24]
 800ab80:	881b      	ldrh	r3, [r3, #0]
 800ab82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab86:	d106      	bne.n	800ab96 <mem_trim+0xfa>
 800ab88:	4b42      	ldr	r3, [pc, #264]	; (800ac94 <mem_trim+0x1f8>)
 800ab8a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ab8e:	4946      	ldr	r1, [pc, #280]	; (800aca8 <mem_trim+0x20c>)
 800ab90:	4842      	ldr	r0, [pc, #264]	; (800ac9c <mem_trim+0x200>)
 800ab92:	f00a fb61 	bl	8015258 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	881b      	ldrh	r3, [r3, #0]
 800ab9a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ab9c:	8afa      	ldrh	r2, [r7, #22]
 800ab9e:	8bfb      	ldrh	r3, [r7, #30]
 800aba0:	4413      	add	r3, r2
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	3308      	adds	r3, #8
 800aba6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800aba8:	4b40      	ldr	r3, [pc, #256]	; (800acac <mem_trim+0x210>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	693a      	ldr	r2, [r7, #16]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d106      	bne.n	800abc0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800abb2:	89fb      	ldrh	r3, [r7, #14]
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7ff fd8d 	bl	800a6d4 <ptr_to_mem>
 800abba:	4602      	mov	r2, r0
 800abbc:	4b3b      	ldr	r3, [pc, #236]	; (800acac <mem_trim+0x210>)
 800abbe:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800abc0:	89fb      	ldrh	r3, [r7, #14]
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7ff fd86 	bl	800a6d4 <ptr_to_mem>
 800abc8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	2200      	movs	r2, #0
 800abce:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	89ba      	ldrh	r2, [r7, #12]
 800abd4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800abd6:	693b      	ldr	r3, [r7, #16]
 800abd8:	8afa      	ldrh	r2, [r7, #22]
 800abda:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	89fa      	ldrh	r2, [r7, #14]
 800abe0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	881b      	ldrh	r3, [r3, #0]
 800abe6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800abea:	d047      	beq.n	800ac7c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	881b      	ldrh	r3, [r3, #0]
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7ff fd6f 	bl	800a6d4 <ptr_to_mem>
 800abf6:	4602      	mov	r2, r0
 800abf8:	89fb      	ldrh	r3, [r7, #14]
 800abfa:	8053      	strh	r3, [r2, #2]
 800abfc:	e03e      	b.n	800ac7c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800abfe:	8bfb      	ldrh	r3, [r7, #30]
 800ac00:	f103 0214 	add.w	r2, r3, #20
 800ac04:	8abb      	ldrh	r3, [r7, #20]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d838      	bhi.n	800ac7c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ac0a:	8afa      	ldrh	r2, [r7, #22]
 800ac0c:	8bfb      	ldrh	r3, [r7, #30]
 800ac0e:	4413      	add	r3, r2
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	3308      	adds	r3, #8
 800ac14:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	881b      	ldrh	r3, [r3, #0]
 800ac1a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac1e:	d106      	bne.n	800ac2e <mem_trim+0x192>
 800ac20:	4b1c      	ldr	r3, [pc, #112]	; (800ac94 <mem_trim+0x1f8>)
 800ac22:	f240 3216 	movw	r2, #790	; 0x316
 800ac26:	4920      	ldr	r1, [pc, #128]	; (800aca8 <mem_trim+0x20c>)
 800ac28:	481c      	ldr	r0, [pc, #112]	; (800ac9c <mem_trim+0x200>)
 800ac2a:	f00a fb15 	bl	8015258 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ac2e:	89fb      	ldrh	r3, [r7, #14]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7ff fd4f 	bl	800a6d4 <ptr_to_mem>
 800ac36:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ac38:	4b1c      	ldr	r3, [pc, #112]	; (800acac <mem_trim+0x210>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	693a      	ldr	r2, [r7, #16]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d202      	bcs.n	800ac48 <mem_trim+0x1ac>
      lfree = mem2;
 800ac42:	4a1a      	ldr	r2, [pc, #104]	; (800acac <mem_trim+0x210>)
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	881a      	ldrh	r2, [r3, #0]
 800ac52:	693b      	ldr	r3, [r7, #16]
 800ac54:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	8afa      	ldrh	r2, [r7, #22]
 800ac5a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ac5c:	69bb      	ldr	r3, [r7, #24]
 800ac5e:	89fa      	ldrh	r2, [r7, #14]
 800ac60:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	881b      	ldrh	r3, [r3, #0]
 800ac66:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac6a:	d007      	beq.n	800ac7c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	881b      	ldrh	r3, [r3, #0]
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7ff fd2f 	bl	800a6d4 <ptr_to_mem>
 800ac76:	4602      	mov	r2, r0
 800ac78:	89fb      	ldrh	r3, [r7, #14]
 800ac7a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ac7c:	4809      	ldr	r0, [pc, #36]	; (800aca4 <mem_trim+0x208>)
 800ac7e:	f00a fa3a 	bl	80150f6 <sys_mutex_unlock>
  return rmem;
 800ac82:	687b      	ldr	r3, [r7, #4]
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	3720      	adds	r7, #32
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	bd80      	pop	{r7, pc}
 800ac8c:	200044a4 	.word	0x200044a4
 800ac90:	200044a8 	.word	0x200044a8
 800ac94:	08016800 	.word	0x08016800
 800ac98:	0801698c 	.word	0x0801698c
 800ac9c:	08016848 	.word	0x08016848
 800aca0:	080169a4 	.word	0x080169a4
 800aca4:	200044ac 	.word	0x200044ac
 800aca8:	080169c4 	.word	0x080169c4
 800acac:	200044b0 	.word	0x200044b0

0800acb0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b088      	sub	sp, #32
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	4603      	mov	r3, r0
 800acb8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800acba:	88fb      	ldrh	r3, [r7, #6]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d101      	bne.n	800acc4 <mem_malloc+0x14>
    return NULL;
 800acc0:	2300      	movs	r3, #0
 800acc2:	e0e2      	b.n	800ae8a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800acc4:	88fb      	ldrh	r3, [r7, #6]
 800acc6:	3303      	adds	r3, #3
 800acc8:	b29b      	uxth	r3, r3
 800acca:	f023 0303 	bic.w	r3, r3, #3
 800acce:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800acd0:	8bbb      	ldrh	r3, [r7, #28]
 800acd2:	2b0b      	cmp	r3, #11
 800acd4:	d801      	bhi.n	800acda <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800acd6:	230c      	movs	r3, #12
 800acd8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800acda:	8bbb      	ldrh	r3, [r7, #28]
 800acdc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ace0:	d803      	bhi.n	800acea <mem_malloc+0x3a>
 800ace2:	8bba      	ldrh	r2, [r7, #28]
 800ace4:	88fb      	ldrh	r3, [r7, #6]
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d201      	bcs.n	800acee <mem_malloc+0x3e>
    return NULL;
 800acea:	2300      	movs	r3, #0
 800acec:	e0cd      	b.n	800ae8a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800acee:	4869      	ldr	r0, [pc, #420]	; (800ae94 <mem_malloc+0x1e4>)
 800acf0:	f00a f9f2 	bl	80150d8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800acf4:	4b68      	ldr	r3, [pc, #416]	; (800ae98 <mem_malloc+0x1e8>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4618      	mov	r0, r3
 800acfa:	f7ff fcfd 	bl	800a6f8 <mem_to_ptr>
 800acfe:	4603      	mov	r3, r0
 800ad00:	83fb      	strh	r3, [r7, #30]
 800ad02:	e0b7      	b.n	800ae74 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ad04:	8bfb      	ldrh	r3, [r7, #30]
 800ad06:	4618      	mov	r0, r3
 800ad08:	f7ff fce4 	bl	800a6d4 <ptr_to_mem>
 800ad0c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	791b      	ldrb	r3, [r3, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f040 80a7 	bne.w	800ae66 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	881b      	ldrh	r3, [r3, #0]
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	8bfb      	ldrh	r3, [r7, #30]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	f1a3 0208 	sub.w	r2, r3, #8
 800ad26:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	f0c0 809c 	bcc.w	800ae66 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	881b      	ldrh	r3, [r3, #0]
 800ad32:	461a      	mov	r2, r3
 800ad34:	8bfb      	ldrh	r3, [r7, #30]
 800ad36:	1ad3      	subs	r3, r2, r3
 800ad38:	f1a3 0208 	sub.w	r2, r3, #8
 800ad3c:	8bbb      	ldrh	r3, [r7, #28]
 800ad3e:	3314      	adds	r3, #20
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d333      	bcc.n	800adac <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ad44:	8bfa      	ldrh	r2, [r7, #30]
 800ad46:	8bbb      	ldrh	r3, [r7, #28]
 800ad48:	4413      	add	r3, r2
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	3308      	adds	r3, #8
 800ad4e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ad50:	8a7b      	ldrh	r3, [r7, #18]
 800ad52:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad56:	d106      	bne.n	800ad66 <mem_malloc+0xb6>
 800ad58:	4b50      	ldr	r3, [pc, #320]	; (800ae9c <mem_malloc+0x1ec>)
 800ad5a:	f240 3287 	movw	r2, #903	; 0x387
 800ad5e:	4950      	ldr	r1, [pc, #320]	; (800aea0 <mem_malloc+0x1f0>)
 800ad60:	4850      	ldr	r0, [pc, #320]	; (800aea4 <mem_malloc+0x1f4>)
 800ad62:	f00a fa79 	bl	8015258 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ad66:	8a7b      	ldrh	r3, [r7, #18]
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7ff fcb3 	bl	800a6d4 <ptr_to_mem>
 800ad6e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2200      	movs	r2, #0
 800ad74:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	881a      	ldrh	r2, [r3, #0]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	8bfa      	ldrh	r2, [r7, #30]
 800ad82:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	8a7a      	ldrh	r2, [r7, #18]
 800ad88:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	2201      	movs	r2, #1
 800ad8e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	881b      	ldrh	r3, [r3, #0]
 800ad94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad98:	d00b      	beq.n	800adb2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	881b      	ldrh	r3, [r3, #0]
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7ff fc98 	bl	800a6d4 <ptr_to_mem>
 800ada4:	4602      	mov	r2, r0
 800ada6:	8a7b      	ldrh	r3, [r7, #18]
 800ada8:	8053      	strh	r3, [r2, #2]
 800adaa:	e002      	b.n	800adb2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	2201      	movs	r2, #1
 800adb0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800adb2:	4b39      	ldr	r3, [pc, #228]	; (800ae98 <mem_malloc+0x1e8>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	697a      	ldr	r2, [r7, #20]
 800adb8:	429a      	cmp	r2, r3
 800adba:	d127      	bne.n	800ae0c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800adbc:	4b36      	ldr	r3, [pc, #216]	; (800ae98 <mem_malloc+0x1e8>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800adc2:	e005      	b.n	800add0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	881b      	ldrh	r3, [r3, #0]
 800adc8:	4618      	mov	r0, r3
 800adca:	f7ff fc83 	bl	800a6d4 <ptr_to_mem>
 800adce:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	791b      	ldrb	r3, [r3, #4]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d004      	beq.n	800ade2 <mem_malloc+0x132>
 800add8:	4b33      	ldr	r3, [pc, #204]	; (800aea8 <mem_malloc+0x1f8>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	69ba      	ldr	r2, [r7, #24]
 800adde:	429a      	cmp	r2, r3
 800ade0:	d1f0      	bne.n	800adc4 <mem_malloc+0x114>
          }
          lfree = cur;
 800ade2:	4a2d      	ldr	r2, [pc, #180]	; (800ae98 <mem_malloc+0x1e8>)
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ade8:	4b2b      	ldr	r3, [pc, #172]	; (800ae98 <mem_malloc+0x1e8>)
 800adea:	681a      	ldr	r2, [r3, #0]
 800adec:	4b2e      	ldr	r3, [pc, #184]	; (800aea8 <mem_malloc+0x1f8>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d00b      	beq.n	800ae0c <mem_malloc+0x15c>
 800adf4:	4b28      	ldr	r3, [pc, #160]	; (800ae98 <mem_malloc+0x1e8>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	791b      	ldrb	r3, [r3, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d006      	beq.n	800ae0c <mem_malloc+0x15c>
 800adfe:	4b27      	ldr	r3, [pc, #156]	; (800ae9c <mem_malloc+0x1ec>)
 800ae00:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ae04:	4929      	ldr	r1, [pc, #164]	; (800aeac <mem_malloc+0x1fc>)
 800ae06:	4827      	ldr	r0, [pc, #156]	; (800aea4 <mem_malloc+0x1f4>)
 800ae08:	f00a fa26 	bl	8015258 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ae0c:	4821      	ldr	r0, [pc, #132]	; (800ae94 <mem_malloc+0x1e4>)
 800ae0e:	f00a f972 	bl	80150f6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ae12:	8bba      	ldrh	r2, [r7, #28]
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	4413      	add	r3, r2
 800ae18:	3308      	adds	r3, #8
 800ae1a:	4a23      	ldr	r2, [pc, #140]	; (800aea8 <mem_malloc+0x1f8>)
 800ae1c:	6812      	ldr	r2, [r2, #0]
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d906      	bls.n	800ae30 <mem_malloc+0x180>
 800ae22:	4b1e      	ldr	r3, [pc, #120]	; (800ae9c <mem_malloc+0x1ec>)
 800ae24:	f240 32ba 	movw	r2, #954	; 0x3ba
 800ae28:	4921      	ldr	r1, [pc, #132]	; (800aeb0 <mem_malloc+0x200>)
 800ae2a:	481e      	ldr	r0, [pc, #120]	; (800aea4 <mem_malloc+0x1f4>)
 800ae2c:	f00a fa14 	bl	8015258 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	f003 0303 	and.w	r3, r3, #3
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d006      	beq.n	800ae48 <mem_malloc+0x198>
 800ae3a:	4b18      	ldr	r3, [pc, #96]	; (800ae9c <mem_malloc+0x1ec>)
 800ae3c:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800ae40:	491c      	ldr	r1, [pc, #112]	; (800aeb4 <mem_malloc+0x204>)
 800ae42:	4818      	ldr	r0, [pc, #96]	; (800aea4 <mem_malloc+0x1f4>)
 800ae44:	f00a fa08 	bl	8015258 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	f003 0303 	and.w	r3, r3, #3
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d006      	beq.n	800ae60 <mem_malloc+0x1b0>
 800ae52:	4b12      	ldr	r3, [pc, #72]	; (800ae9c <mem_malloc+0x1ec>)
 800ae54:	f240 32be 	movw	r2, #958	; 0x3be
 800ae58:	4917      	ldr	r1, [pc, #92]	; (800aeb8 <mem_malloc+0x208>)
 800ae5a:	4812      	ldr	r0, [pc, #72]	; (800aea4 <mem_malloc+0x1f4>)
 800ae5c:	f00a f9fc 	bl	8015258 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	3308      	adds	r3, #8
 800ae64:	e011      	b.n	800ae8a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ae66:	8bfb      	ldrh	r3, [r7, #30]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7ff fc33 	bl	800a6d4 <ptr_to_mem>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ae74:	8bfa      	ldrh	r2, [r7, #30]
 800ae76:	8bbb      	ldrh	r3, [r7, #28]
 800ae78:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	f4ff af41 	bcc.w	800ad04 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ae82:	4804      	ldr	r0, [pc, #16]	; (800ae94 <mem_malloc+0x1e4>)
 800ae84:	f00a f937 	bl	80150f6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3720      	adds	r7, #32
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}
 800ae92:	bf00      	nop
 800ae94:	200044ac 	.word	0x200044ac
 800ae98:	200044b0 	.word	0x200044b0
 800ae9c:	08016800 	.word	0x08016800
 800aea0:	080169c4 	.word	0x080169c4
 800aea4:	08016848 	.word	0x08016848
 800aea8:	200044a8 	.word	0x200044a8
 800aeac:	080169d8 	.word	0x080169d8
 800aeb0:	080169f4 	.word	0x080169f4
 800aeb4:	08016a24 	.word	0x08016a24
 800aeb8:	08016a54 	.word	0x08016a54

0800aebc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b085      	sub	sp, #20
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	689b      	ldr	r3, [r3, #8]
 800aec8:	2200      	movs	r2, #0
 800aeca:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	3303      	adds	r3, #3
 800aed2:	f023 0303 	bic.w	r3, r3, #3
 800aed6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800aed8:	2300      	movs	r3, #0
 800aeda:	60fb      	str	r3, [r7, #12]
 800aedc:	e011      	b.n	800af02 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	881b      	ldrh	r3, [r3, #0]
 800aef4:	461a      	mov	r2, r3
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	4413      	add	r3, r2
 800aefa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	3301      	adds	r3, #1
 800af00:	60fb      	str	r3, [r7, #12]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	885b      	ldrh	r3, [r3, #2]
 800af06:	461a      	mov	r2, r3
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	4293      	cmp	r3, r2
 800af0c:	dbe7      	blt.n	800aede <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800af0e:	bf00      	nop
 800af10:	3714      	adds	r7, #20
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
	...

0800af1c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800af22:	2300      	movs	r3, #0
 800af24:	80fb      	strh	r3, [r7, #6]
 800af26:	e009      	b.n	800af3c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800af28:	88fb      	ldrh	r3, [r7, #6]
 800af2a:	4a08      	ldr	r2, [pc, #32]	; (800af4c <memp_init+0x30>)
 800af2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af30:	4618      	mov	r0, r3
 800af32:	f7ff ffc3 	bl	800aebc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800af36:	88fb      	ldrh	r3, [r7, #6]
 800af38:	3301      	adds	r3, #1
 800af3a:	80fb      	strh	r3, [r7, #6]
 800af3c:	88fb      	ldrh	r3, [r7, #6]
 800af3e:	2b0c      	cmp	r3, #12
 800af40:	d9f2      	bls.n	800af28 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800af42:	bf00      	nop
 800af44:	3708      	adds	r7, #8
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	08029d9c 	.word	0x08029d9c

0800af50 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b084      	sub	sp, #16
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800af58:	f00a f900 	bl	801515c <sys_arch_protect>
 800af5c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d015      	beq.n	800af98 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	68ba      	ldr	r2, [r7, #8]
 800af72:	6812      	ldr	r2, [r2, #0]
 800af74:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	f003 0303 	and.w	r3, r3, #3
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d006      	beq.n	800af8e <do_memp_malloc_pool+0x3e>
 800af80:	4b09      	ldr	r3, [pc, #36]	; (800afa8 <do_memp_malloc_pool+0x58>)
 800af82:	f240 1219 	movw	r2, #281	; 0x119
 800af86:	4909      	ldr	r1, [pc, #36]	; (800afac <do_memp_malloc_pool+0x5c>)
 800af88:	4809      	ldr	r0, [pc, #36]	; (800afb0 <do_memp_malloc_pool+0x60>)
 800af8a:	f00a f965 	bl	8015258 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f00a f8f2 	bl	8015178 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	e003      	b.n	800afa0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	f00a f8ed 	bl	8015178 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800af9e:	2300      	movs	r3, #0
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3710      	adds	r7, #16
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	08016a78 	.word	0x08016a78
 800afac:	08016aa8 	.word	0x08016aa8
 800afb0:	08016acc 	.word	0x08016acc

0800afb4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b084      	sub	sp, #16
 800afb8:	af00      	add	r7, sp, #0
 800afba:	4603      	mov	r3, r0
 800afbc:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800afbe:	79fb      	ldrb	r3, [r7, #7]
 800afc0:	2b0c      	cmp	r3, #12
 800afc2:	d908      	bls.n	800afd6 <memp_malloc+0x22>
 800afc4:	4b0a      	ldr	r3, [pc, #40]	; (800aff0 <memp_malloc+0x3c>)
 800afc6:	f240 1257 	movw	r2, #343	; 0x157
 800afca:	490a      	ldr	r1, [pc, #40]	; (800aff4 <memp_malloc+0x40>)
 800afcc:	480a      	ldr	r0, [pc, #40]	; (800aff8 <memp_malloc+0x44>)
 800afce:	f00a f943 	bl	8015258 <iprintf>
 800afd2:	2300      	movs	r3, #0
 800afd4:	e008      	b.n	800afe8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800afd6:	79fb      	ldrb	r3, [r7, #7]
 800afd8:	4a08      	ldr	r2, [pc, #32]	; (800affc <memp_malloc+0x48>)
 800afda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afde:	4618      	mov	r0, r3
 800afe0:	f7ff ffb6 	bl	800af50 <do_memp_malloc_pool>
 800afe4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800afe6:	68fb      	ldr	r3, [r7, #12]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	08016a78 	.word	0x08016a78
 800aff4:	08016b08 	.word	0x08016b08
 800aff8:	08016acc 	.word	0x08016acc
 800affc:	08029d9c 	.word	0x08029d9c

0800b000 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	f003 0303 	and.w	r3, r3, #3
 800b010:	2b00      	cmp	r3, #0
 800b012:	d006      	beq.n	800b022 <do_memp_free_pool+0x22>
 800b014:	4b0d      	ldr	r3, [pc, #52]	; (800b04c <do_memp_free_pool+0x4c>)
 800b016:	f240 126d 	movw	r2, #365	; 0x16d
 800b01a:	490d      	ldr	r1, [pc, #52]	; (800b050 <do_memp_free_pool+0x50>)
 800b01c:	480d      	ldr	r0, [pc, #52]	; (800b054 <do_memp_free_pool+0x54>)
 800b01e:	f00a f91b 	bl	8015258 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b026:	f00a f899 	bl	801515c <sys_arch_protect>
 800b02a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b03e:	68b8      	ldr	r0, [r7, #8]
 800b040:	f00a f89a 	bl	8015178 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b044:	bf00      	nop
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}
 800b04c:	08016a78 	.word	0x08016a78
 800b050:	08016b28 	.word	0x08016b28
 800b054:	08016acc 	.word	0x08016acc

0800b058 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	4603      	mov	r3, r0
 800b060:	6039      	str	r1, [r7, #0]
 800b062:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b064:	79fb      	ldrb	r3, [r7, #7]
 800b066:	2b0c      	cmp	r3, #12
 800b068:	d907      	bls.n	800b07a <memp_free+0x22>
 800b06a:	4b0c      	ldr	r3, [pc, #48]	; (800b09c <memp_free+0x44>)
 800b06c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b070:	490b      	ldr	r1, [pc, #44]	; (800b0a0 <memp_free+0x48>)
 800b072:	480c      	ldr	r0, [pc, #48]	; (800b0a4 <memp_free+0x4c>)
 800b074:	f00a f8f0 	bl	8015258 <iprintf>
 800b078:	e00c      	b.n	800b094 <memp_free+0x3c>

  if (mem == NULL) {
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d008      	beq.n	800b092 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b080:	79fb      	ldrb	r3, [r7, #7]
 800b082:	4a09      	ldr	r2, [pc, #36]	; (800b0a8 <memp_free+0x50>)
 800b084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b088:	6839      	ldr	r1, [r7, #0]
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7ff ffb8 	bl	800b000 <do_memp_free_pool>
 800b090:	e000      	b.n	800b094 <memp_free+0x3c>
    return;
 800b092:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b094:	3708      	adds	r7, #8
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}
 800b09a:	bf00      	nop
 800b09c:	08016a78 	.word	0x08016a78
 800b0a0:	08016b48 	.word	0x08016b48
 800b0a4:	08016acc 	.word	0x08016acc
 800b0a8:	08029d9c 	.word	0x08029d9c

0800b0ac <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b0b0:	bf00      	nop
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b8:	4770      	bx	lr
	...

0800b0bc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	60f8      	str	r0, [r7, #12]
 800b0c4:	60b9      	str	r1, [r7, #8]
 800b0c6:	607a      	str	r2, [r7, #4]
 800b0c8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d108      	bne.n	800b0e2 <netif_add+0x26>
 800b0d0:	4b57      	ldr	r3, [pc, #348]	; (800b230 <netif_add+0x174>)
 800b0d2:	f240 1227 	movw	r2, #295	; 0x127
 800b0d6:	4957      	ldr	r1, [pc, #348]	; (800b234 <netif_add+0x178>)
 800b0d8:	4857      	ldr	r0, [pc, #348]	; (800b238 <netif_add+0x17c>)
 800b0da:	f00a f8bd 	bl	8015258 <iprintf>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	e0a2      	b.n	800b228 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d108      	bne.n	800b0fa <netif_add+0x3e>
 800b0e8:	4b51      	ldr	r3, [pc, #324]	; (800b230 <netif_add+0x174>)
 800b0ea:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b0ee:	4953      	ldr	r1, [pc, #332]	; (800b23c <netif_add+0x180>)
 800b0f0:	4851      	ldr	r0, [pc, #324]	; (800b238 <netif_add+0x17c>)
 800b0f2:	f00a f8b1 	bl	8015258 <iprintf>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	e096      	b.n	800b228 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d101      	bne.n	800b104 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b100:	4b4f      	ldr	r3, [pc, #316]	; (800b240 <netif_add+0x184>)
 800b102:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d101      	bne.n	800b10e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b10a:	4b4d      	ldr	r3, [pc, #308]	; (800b240 <netif_add+0x184>)
 800b10c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d101      	bne.n	800b118 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b114:	4b4a      	ldr	r3, [pc, #296]	; (800b240 <netif_add+0x184>)
 800b116:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2200      	movs	r2, #0
 800b11c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2200      	movs	r2, #0
 800b122:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2200      	movs	r2, #0
 800b128:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	4a45      	ldr	r2, [pc, #276]	; (800b244 <netif_add+0x188>)
 800b12e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	2200      	movs	r2, #0
 800b134:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2200      	movs	r2, #0
 800b13a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	2200      	movs	r2, #0
 800b142:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	6a3a      	ldr	r2, [r7, #32]
 800b148:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b14a:	4b3f      	ldr	r3, [pc, #252]	; (800b248 <netif_add+0x18c>)
 800b14c:	781a      	ldrb	r2, [r3, #0]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b158:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	68b9      	ldr	r1, [r7, #8]
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	f000 f913 	bl	800b38c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	4798      	blx	r3
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d001      	beq.n	800b176 <netif_add+0xba>
    return NULL;
 800b172:	2300      	movs	r3, #0
 800b174:	e058      	b.n	800b228 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b17c:	2bff      	cmp	r3, #255	; 0xff
 800b17e:	d103      	bne.n	800b188 <netif_add+0xcc>
        netif->num = 0;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b18c:	4b2f      	ldr	r3, [pc, #188]	; (800b24c <netif_add+0x190>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	617b      	str	r3, [r7, #20]
 800b192:	e02b      	b.n	800b1ec <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b194:	697a      	ldr	r2, [r7, #20]
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d106      	bne.n	800b1aa <netif_add+0xee>
 800b19c:	4b24      	ldr	r3, [pc, #144]	; (800b230 <netif_add+0x174>)
 800b19e:	f240 128b 	movw	r2, #395	; 0x18b
 800b1a2:	492b      	ldr	r1, [pc, #172]	; (800b250 <netif_add+0x194>)
 800b1a4:	4824      	ldr	r0, [pc, #144]	; (800b238 <netif_add+0x17c>)
 800b1a6:	f00a f857 	bl	8015258 <iprintf>
        num_netifs++;
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	2bff      	cmp	r3, #255	; 0xff
 800b1b4:	dd06      	ble.n	800b1c4 <netif_add+0x108>
 800b1b6:	4b1e      	ldr	r3, [pc, #120]	; (800b230 <netif_add+0x174>)
 800b1b8:	f240 128d 	movw	r2, #397	; 0x18d
 800b1bc:	4925      	ldr	r1, [pc, #148]	; (800b254 <netif_add+0x198>)
 800b1be:	481e      	ldr	r0, [pc, #120]	; (800b238 <netif_add+0x17c>)
 800b1c0:	f00a f84a 	bl	8015258 <iprintf>
        if (netif2->num == netif->num) {
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d108      	bne.n	800b1e6 <netif_add+0x12a>
          netif->num++;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b1da:	3301      	adds	r3, #1
 800b1dc:	b2da      	uxtb	r2, r3
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b1e4:	e005      	b.n	800b1f2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	617b      	str	r3, [r7, #20]
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1d0      	bne.n	800b194 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1be      	bne.n	800b176 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b1fe:	2bfe      	cmp	r3, #254	; 0xfe
 800b200:	d103      	bne.n	800b20a <netif_add+0x14e>
    netif_num = 0;
 800b202:	4b11      	ldr	r3, [pc, #68]	; (800b248 <netif_add+0x18c>)
 800b204:	2200      	movs	r2, #0
 800b206:	701a      	strb	r2, [r3, #0]
 800b208:	e006      	b.n	800b218 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b210:	3301      	adds	r3, #1
 800b212:	b2da      	uxtb	r2, r3
 800b214:	4b0c      	ldr	r3, [pc, #48]	; (800b248 <netif_add+0x18c>)
 800b216:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b218:	4b0c      	ldr	r3, [pc, #48]	; (800b24c <netif_add+0x190>)
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b220:	4a0a      	ldr	r2, [pc, #40]	; (800b24c <netif_add+0x190>)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b226:	68fb      	ldr	r3, [r7, #12]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3718      	adds	r7, #24
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	08016b64 	.word	0x08016b64
 800b234:	08016bf8 	.word	0x08016bf8
 800b238:	08016bb4 	.word	0x08016bb4
 800b23c:	08016c14 	.word	0x08016c14
 800b240:	08029e10 	.word	0x08029e10
 800b244:	0800b667 	.word	0x0800b667
 800b248:	200044e8 	.word	0x200044e8
 800b24c:	2000b3d0 	.word	0x2000b3d0
 800b250:	08016c38 	.word	0x08016c38
 800b254:	08016c4c 	.word	0x08016c4c

0800b258 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b262:	6839      	ldr	r1, [r7, #0]
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f002 fe1b 	bl	800dea0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b26a:	6839      	ldr	r1, [r7, #0]
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f007 fb93 	bl	8012998 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b272:	bf00      	nop
 800b274:	3708      	adds	r7, #8
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
	...

0800b27c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d106      	bne.n	800b29c <netif_do_set_ipaddr+0x20>
 800b28e:	4b1d      	ldr	r3, [pc, #116]	; (800b304 <netif_do_set_ipaddr+0x88>)
 800b290:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b294:	491c      	ldr	r1, [pc, #112]	; (800b308 <netif_do_set_ipaddr+0x8c>)
 800b296:	481d      	ldr	r0, [pc, #116]	; (800b30c <netif_do_set_ipaddr+0x90>)
 800b298:	f009 ffde 	bl	8015258 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d106      	bne.n	800b2b0 <netif_do_set_ipaddr+0x34>
 800b2a2:	4b18      	ldr	r3, [pc, #96]	; (800b304 <netif_do_set_ipaddr+0x88>)
 800b2a4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b2a8:	4917      	ldr	r1, [pc, #92]	; (800b308 <netif_do_set_ipaddr+0x8c>)
 800b2aa:	4818      	ldr	r0, [pc, #96]	; (800b30c <netif_do_set_ipaddr+0x90>)
 800b2ac:	f009 ffd4 	bl	8015258 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	3304      	adds	r3, #4
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d01c      	beq.n	800b2f8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b2ce:	f107 0314 	add.w	r3, r7, #20
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f7ff ffbf 	bl	800b258 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <netif_do_set_ipaddr+0x6a>
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	e000      	b.n	800b2e8 <netif_do_set_ipaddr+0x6c>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b2ec:	2101      	movs	r1, #1
 800b2ee:	68f8      	ldr	r0, [r7, #12]
 800b2f0:	f000 f8d2 	bl	800b498 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e000      	b.n	800b2fa <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b2f8:	2300      	movs	r3, #0
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3718      	adds	r7, #24
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	08016b64 	.word	0x08016b64
 800b308:	08016c7c 	.word	0x08016c7c
 800b30c:	08016bb4 	.word	0x08016bb4

0800b310 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b310:	b480      	push	{r7}
 800b312:	b085      	sub	sp, #20
 800b314:	af00      	add	r7, sp, #0
 800b316:	60f8      	str	r0, [r7, #12]
 800b318:	60b9      	str	r1, [r7, #8]
 800b31a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	3308      	adds	r3, #8
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	429a      	cmp	r2, r3
 800b328:	d00a      	beq.n	800b340 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <netif_do_set_netmask+0x26>
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	e000      	b.n	800b338 <netif_do_set_netmask+0x28>
 800b336:	2300      	movs	r3, #0
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b33c:	2301      	movs	r3, #1
 800b33e:	e000      	b.n	800b342 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	3714      	adds	r7, #20
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr

0800b34e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b34e:	b480      	push	{r7}
 800b350:	b085      	sub	sp, #20
 800b352:	af00      	add	r7, sp, #0
 800b354:	60f8      	str	r0, [r7, #12]
 800b356:	60b9      	str	r1, [r7, #8]
 800b358:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	681a      	ldr	r2, [r3, #0]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	330c      	adds	r3, #12
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	429a      	cmp	r2, r3
 800b366:	d00a      	beq.n	800b37e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d002      	beq.n	800b374 <netif_do_set_gw+0x26>
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	e000      	b.n	800b376 <netif_do_set_gw+0x28>
 800b374:	2300      	movs	r3, #0
 800b376:	68fa      	ldr	r2, [r7, #12]
 800b378:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b37a:	2301      	movs	r3, #1
 800b37c:	e000      	b.n	800b380 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3714      	adds	r7, #20
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b088      	sub	sp, #32
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
 800b398:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b39a:	2300      	movs	r3, #0
 800b39c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d101      	bne.n	800b3ac <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b3a8:	4b1c      	ldr	r3, [pc, #112]	; (800b41c <netif_set_addr+0x90>)
 800b3aa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d101      	bne.n	800b3b6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b3b2:	4b1a      	ldr	r3, [pc, #104]	; (800b41c <netif_set_addr+0x90>)
 800b3b4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d101      	bne.n	800b3c0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b3bc:	4b17      	ldr	r3, [pc, #92]	; (800b41c <netif_set_addr+0x90>)
 800b3be:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d003      	beq.n	800b3ce <netif_set_addr+0x42>
 800b3c6:	68bb      	ldr	r3, [r7, #8]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d101      	bne.n	800b3d2 <netif_set_addr+0x46>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e000      	b.n	800b3d4 <netif_set_addr+0x48>
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d006      	beq.n	800b3ea <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b3dc:	f107 0310 	add.w	r3, r7, #16
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	68b9      	ldr	r1, [r7, #8]
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f7ff ff49 	bl	800b27c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b3ea:	69fa      	ldr	r2, [r7, #28]
 800b3ec:	6879      	ldr	r1, [r7, #4]
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f7ff ff8e 	bl	800b310 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b3f4:	69ba      	ldr	r2, [r7, #24]
 800b3f6:	6839      	ldr	r1, [r7, #0]
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f7ff ffa8 	bl	800b34e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d106      	bne.n	800b412 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b404:	f107 0310 	add.w	r3, r7, #16
 800b408:	461a      	mov	r2, r3
 800b40a:	68b9      	ldr	r1, [r7, #8]
 800b40c:	68f8      	ldr	r0, [r7, #12]
 800b40e:	f7ff ff35 	bl	800b27c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b412:	bf00      	nop
 800b414:	3720      	adds	r7, #32
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	08029e10 	.word	0x08029e10

0800b420 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b428:	4a04      	ldr	r2, [pc, #16]	; (800b43c <netif_set_default+0x1c>)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b42e:	bf00      	nop
 800b430:	370c      	adds	r7, #12
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	2000b3d4 	.word	0x2000b3d4

0800b440 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d107      	bne.n	800b45e <netif_set_up+0x1e>
 800b44e:	4b0f      	ldr	r3, [pc, #60]	; (800b48c <netif_set_up+0x4c>)
 800b450:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b454:	490e      	ldr	r1, [pc, #56]	; (800b490 <netif_set_up+0x50>)
 800b456:	480f      	ldr	r0, [pc, #60]	; (800b494 <netif_set_up+0x54>)
 800b458:	f009 fefe 	bl	8015258 <iprintf>
 800b45c:	e013      	b.n	800b486 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b464:	f003 0301 	and.w	r3, r3, #1
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10c      	bne.n	800b486 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b472:	f043 0301 	orr.w	r3, r3, #1
 800b476:	b2da      	uxtb	r2, r3
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b47e:	2103      	movs	r1, #3
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 f809 	bl	800b498 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b486:	3708      	adds	r7, #8
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	08016b64 	.word	0x08016b64
 800b490:	08016cec 	.word	0x08016cec
 800b494:	08016bb4 	.word	0x08016bb4

0800b498 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d106      	bne.n	800b4b8 <netif_issue_reports+0x20>
 800b4aa:	4b18      	ldr	r3, [pc, #96]	; (800b50c <netif_issue_reports+0x74>)
 800b4ac:	f240 326d 	movw	r2, #877	; 0x36d
 800b4b0:	4917      	ldr	r1, [pc, #92]	; (800b510 <netif_issue_reports+0x78>)
 800b4b2:	4818      	ldr	r0, [pc, #96]	; (800b514 <netif_issue_reports+0x7c>)
 800b4b4:	f009 fed0 	bl	8015258 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b4be:	f003 0304 	and.w	r3, r3, #4
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d01e      	beq.n	800b504 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b4cc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d017      	beq.n	800b504 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b4d4:	78fb      	ldrb	r3, [r7, #3]
 800b4d6:	f003 0301 	and.w	r3, r3, #1
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d013      	beq.n	800b506 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00e      	beq.n	800b506 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b4ee:	f003 0308 	and.w	r3, r3, #8
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d007      	beq.n	800b506 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	3304      	adds	r3, #4
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f008 f9b5 	bl	801386c <etharp_request>
 800b502:	e000      	b.n	800b506 <netif_issue_reports+0x6e>
    return;
 800b504:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b506:	3708      	adds	r7, #8
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	08016b64 	.word	0x08016b64
 800b510:	08016d08 	.word	0x08016d08
 800b514:	08016bb4 	.word	0x08016bb4

0800b518 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d107      	bne.n	800b536 <netif_set_down+0x1e>
 800b526:	4b12      	ldr	r3, [pc, #72]	; (800b570 <netif_set_down+0x58>)
 800b528:	f240 329b 	movw	r2, #923	; 0x39b
 800b52c:	4911      	ldr	r1, [pc, #68]	; (800b574 <netif_set_down+0x5c>)
 800b52e:	4812      	ldr	r0, [pc, #72]	; (800b578 <netif_set_down+0x60>)
 800b530:	f009 fe92 	bl	8015258 <iprintf>
 800b534:	e019      	b.n	800b56a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b53c:	f003 0301 	and.w	r3, r3, #1
 800b540:	2b00      	cmp	r3, #0
 800b542:	d012      	beq.n	800b56a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b54a:	f023 0301 	bic.w	r3, r3, #1
 800b54e:	b2da      	uxtb	r2, r3
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b55c:	f003 0308 	and.w	r3, r3, #8
 800b560:	2b00      	cmp	r3, #0
 800b562:	d002      	beq.n	800b56a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f007 fd3f 	bl	8012fe8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}
 800b570:	08016b64 	.word	0x08016b64
 800b574:	08016d2c 	.word	0x08016d2c
 800b578:	08016bb4 	.word	0x08016bb4

0800b57c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d107      	bne.n	800b59a <netif_set_link_up+0x1e>
 800b58a:	4b13      	ldr	r3, [pc, #76]	; (800b5d8 <netif_set_link_up+0x5c>)
 800b58c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b590:	4912      	ldr	r1, [pc, #72]	; (800b5dc <netif_set_link_up+0x60>)
 800b592:	4813      	ldr	r0, [pc, #76]	; (800b5e0 <netif_set_link_up+0x64>)
 800b594:	f009 fe60 	bl	8015258 <iprintf>
 800b598:	e01b      	b.n	800b5d2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b5a0:	f003 0304 	and.w	r3, r3, #4
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d114      	bne.n	800b5d2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b5ae:	f043 0304 	orr.w	r3, r3, #4
 800b5b2:	b2da      	uxtb	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b5ba:	2103      	movs	r1, #3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f7ff ff6b 	bl	800b498 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	69db      	ldr	r3, [r3, #28]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d003      	beq.n	800b5d2 <netif_set_link_up+0x56>
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	69db      	ldr	r3, [r3, #28]
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b5d2:	3708      	adds	r7, #8
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	08016b64 	.word	0x08016b64
 800b5dc:	08016d4c 	.word	0x08016d4c
 800b5e0:	08016bb4 	.word	0x08016bb4

0800b5e4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d107      	bne.n	800b602 <netif_set_link_down+0x1e>
 800b5f2:	4b11      	ldr	r3, [pc, #68]	; (800b638 <netif_set_link_down+0x54>)
 800b5f4:	f240 4206 	movw	r2, #1030	; 0x406
 800b5f8:	4910      	ldr	r1, [pc, #64]	; (800b63c <netif_set_link_down+0x58>)
 800b5fa:	4811      	ldr	r0, [pc, #68]	; (800b640 <netif_set_link_down+0x5c>)
 800b5fc:	f009 fe2c 	bl	8015258 <iprintf>
 800b600:	e017      	b.n	800b632 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b608:	f003 0304 	and.w	r3, r3, #4
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d010      	beq.n	800b632 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b616:	f023 0304 	bic.w	r3, r3, #4
 800b61a:	b2da      	uxtb	r2, r3
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	69db      	ldr	r3, [r3, #28]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d003      	beq.n	800b632 <netif_set_link_down+0x4e>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	69db      	ldr	r3, [r3, #28]
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	08016b64 	.word	0x08016b64
 800b63c:	08016d70 	.word	0x08016d70
 800b640:	08016bb4 	.word	0x08016bb4

0800b644 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d002      	beq.n	800b65a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	61da      	str	r2, [r3, #28]
  }
}
 800b65a:	bf00      	nop
 800b65c:	370c      	adds	r7, #12
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b666:	b480      	push	{r7}
 800b668:	b085      	sub	sp, #20
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	60f8      	str	r0, [r7, #12]
 800b66e:	60b9      	str	r1, [r7, #8]
 800b670:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b672:	f06f 030b 	mvn.w	r3, #11
}
 800b676:	4618      	mov	r0, r3
 800b678:	3714      	adds	r7, #20
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr
	...

0800b684 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b684:	b480      	push	{r7}
 800b686:	b085      	sub	sp, #20
 800b688:	af00      	add	r7, sp, #0
 800b68a:	4603      	mov	r3, r0
 800b68c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b68e:	79fb      	ldrb	r3, [r7, #7]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d013      	beq.n	800b6bc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b694:	4b0d      	ldr	r3, [pc, #52]	; (800b6cc <netif_get_by_index+0x48>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	60fb      	str	r3, [r7, #12]
 800b69a:	e00c      	b.n	800b6b6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	79fa      	ldrb	r2, [r7, #7]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d101      	bne.n	800b6b0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	e006      	b.n	800b6be <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	60fb      	str	r3, [r7, #12]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1ef      	bne.n	800b69c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3714      	adds	r7, #20
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	2000b3d0 	.word	0x2000b3d0

0800b6d0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b082      	sub	sp, #8
 800b6d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b6d6:	f009 fd41 	bl	801515c <sys_arch_protect>
 800b6da:	6038      	str	r0, [r7, #0]
 800b6dc:	4b0d      	ldr	r3, [pc, #52]	; (800b714 <pbuf_free_ooseq+0x44>)
 800b6de:	2200      	movs	r2, #0
 800b6e0:	701a      	strb	r2, [r3, #0]
 800b6e2:	6838      	ldr	r0, [r7, #0]
 800b6e4:	f009 fd48 	bl	8015178 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b6e8:	4b0b      	ldr	r3, [pc, #44]	; (800b718 <pbuf_free_ooseq+0x48>)
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	607b      	str	r3, [r7, #4]
 800b6ee:	e00a      	b.n	800b706 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d003      	beq.n	800b700 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f002 fc0f 	bl	800df1c <tcp_free_ooseq>
      return;
 800b6fe:	e005      	b.n	800b70c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	607b      	str	r3, [r7, #4]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1f1      	bne.n	800b6f0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b70c:	3708      	adds	r7, #8
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	2000b3d8 	.word	0x2000b3d8
 800b718:	2000b3e0 	.word	0x2000b3e0

0800b71c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b724:	f7ff ffd4 	bl	800b6d0 <pbuf_free_ooseq>
}
 800b728:	bf00      	nop
 800b72a:	3708      	adds	r7, #8
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b736:	f009 fd11 	bl	801515c <sys_arch_protect>
 800b73a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b73c:	4b0f      	ldr	r3, [pc, #60]	; (800b77c <pbuf_pool_is_empty+0x4c>)
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b742:	4b0e      	ldr	r3, [pc, #56]	; (800b77c <pbuf_pool_is_empty+0x4c>)
 800b744:	2201      	movs	r2, #1
 800b746:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b748:	6878      	ldr	r0, [r7, #4]
 800b74a:	f009 fd15 	bl	8015178 <sys_arch_unprotect>

  if (!queued) {
 800b74e:	78fb      	ldrb	r3, [r7, #3]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d10f      	bne.n	800b774 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b754:	2100      	movs	r1, #0
 800b756:	480a      	ldr	r0, [pc, #40]	; (800b780 <pbuf_pool_is_empty+0x50>)
 800b758:	f7fe f89c 	bl	8009894 <tcpip_try_callback>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d008      	beq.n	800b774 <pbuf_pool_is_empty+0x44>
 800b762:	f009 fcfb 	bl	801515c <sys_arch_protect>
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	4b04      	ldr	r3, [pc, #16]	; (800b77c <pbuf_pool_is_empty+0x4c>)
 800b76a:	2200      	movs	r2, #0
 800b76c:	701a      	strb	r2, [r3, #0]
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f009 fd02 	bl	8015178 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b774:	bf00      	nop
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	2000b3d8 	.word	0x2000b3d8
 800b780:	0800b71d 	.word	0x0800b71d

0800b784 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b784:	b480      	push	{r7}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	60f8      	str	r0, [r7, #12]
 800b78c:	60b9      	str	r1, [r7, #8]
 800b78e:	4611      	mov	r1, r2
 800b790:	461a      	mov	r2, r3
 800b792:	460b      	mov	r3, r1
 800b794:	80fb      	strh	r3, [r7, #6]
 800b796:	4613      	mov	r3, r2
 800b798:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2200      	movs	r2, #0
 800b79e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	88fa      	ldrh	r2, [r7, #6]
 800b7aa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	88ba      	ldrh	r2, [r7, #4]
 800b7b0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b7b2:	8b3b      	ldrh	r3, [r7, #24]
 800b7b4:	b2da      	uxtb	r2, r3
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	7f3a      	ldrb	r2, [r7, #28]
 800b7be:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	73da      	strb	r2, [r3, #15]
}
 800b7cc:	bf00      	nop
 800b7ce:	3714      	adds	r7, #20
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b08c      	sub	sp, #48	; 0x30
 800b7dc:	af02      	add	r7, sp, #8
 800b7de:	4603      	mov	r3, r0
 800b7e0:	71fb      	strb	r3, [r7, #7]
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	80bb      	strh	r3, [r7, #4]
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b7ea:	79fb      	ldrb	r3, [r7, #7]
 800b7ec:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b7ee:	887b      	ldrh	r3, [r7, #2]
 800b7f0:	2b41      	cmp	r3, #65	; 0x41
 800b7f2:	d00b      	beq.n	800b80c <pbuf_alloc+0x34>
 800b7f4:	2b41      	cmp	r3, #65	; 0x41
 800b7f6:	dc02      	bgt.n	800b7fe <pbuf_alloc+0x26>
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d007      	beq.n	800b80c <pbuf_alloc+0x34>
 800b7fc:	e0c2      	b.n	800b984 <pbuf_alloc+0x1ac>
 800b7fe:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b802:	d00b      	beq.n	800b81c <pbuf_alloc+0x44>
 800b804:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b808:	d070      	beq.n	800b8ec <pbuf_alloc+0x114>
 800b80a:	e0bb      	b.n	800b984 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b80c:	887a      	ldrh	r2, [r7, #2]
 800b80e:	88bb      	ldrh	r3, [r7, #4]
 800b810:	4619      	mov	r1, r3
 800b812:	2000      	movs	r0, #0
 800b814:	f000 f8d2 	bl	800b9bc <pbuf_alloc_reference>
 800b818:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b81a:	e0bd      	b.n	800b998 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b81c:	2300      	movs	r3, #0
 800b81e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b820:	2300      	movs	r3, #0
 800b822:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b824:	88bb      	ldrh	r3, [r7, #4]
 800b826:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b828:	200c      	movs	r0, #12
 800b82a:	f7ff fbc3 	bl	800afb4 <memp_malloc>
 800b82e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d109      	bne.n	800b84a <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800b836:	f7ff ff7b 	bl	800b730 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d002      	beq.n	800b846 <pbuf_alloc+0x6e>
            pbuf_free(p);
 800b840:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b842:	f000 faa9 	bl	800bd98 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b846:	2300      	movs	r3, #0
 800b848:	e0a7      	b.n	800b99a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b84a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b84c:	3303      	adds	r3, #3
 800b84e:	b29b      	uxth	r3, r3
 800b850:	f023 0303 	bic.w	r3, r3, #3
 800b854:	b29b      	uxth	r3, r3
 800b856:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	8b7a      	ldrh	r2, [r7, #26]
 800b85e:	4293      	cmp	r3, r2
 800b860:	bf28      	it	cs
 800b862:	4613      	movcs	r3, r2
 800b864:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b866:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b868:	3310      	adds	r3, #16
 800b86a:	693a      	ldr	r2, [r7, #16]
 800b86c:	4413      	add	r3, r2
 800b86e:	3303      	adds	r3, #3
 800b870:	f023 0303 	bic.w	r3, r3, #3
 800b874:	4618      	mov	r0, r3
 800b876:	89f9      	ldrh	r1, [r7, #14]
 800b878:	8b7a      	ldrh	r2, [r7, #26]
 800b87a:	2300      	movs	r3, #0
 800b87c:	9301      	str	r3, [sp, #4]
 800b87e:	887b      	ldrh	r3, [r7, #2]
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	460b      	mov	r3, r1
 800b884:	4601      	mov	r1, r0
 800b886:	6938      	ldr	r0, [r7, #16]
 800b888:	f7ff ff7c 	bl	800b784 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	f003 0303 	and.w	r3, r3, #3
 800b894:	2b00      	cmp	r3, #0
 800b896:	d006      	beq.n	800b8a6 <pbuf_alloc+0xce>
 800b898:	4b42      	ldr	r3, [pc, #264]	; (800b9a4 <pbuf_alloc+0x1cc>)
 800b89a:	f240 1201 	movw	r2, #257	; 0x101
 800b89e:	4942      	ldr	r1, [pc, #264]	; (800b9a8 <pbuf_alloc+0x1d0>)
 800b8a0:	4842      	ldr	r0, [pc, #264]	; (800b9ac <pbuf_alloc+0x1d4>)
 800b8a2:	f009 fcd9 	bl	8015258 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b8a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b8a8:	3303      	adds	r3, #3
 800b8aa:	f023 0303 	bic.w	r3, r3, #3
 800b8ae:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b8b2:	d106      	bne.n	800b8c2 <pbuf_alloc+0xea>
 800b8b4:	4b3b      	ldr	r3, [pc, #236]	; (800b9a4 <pbuf_alloc+0x1cc>)
 800b8b6:	f240 1203 	movw	r2, #259	; 0x103
 800b8ba:	493d      	ldr	r1, [pc, #244]	; (800b9b0 <pbuf_alloc+0x1d8>)
 800b8bc:	483b      	ldr	r0, [pc, #236]	; (800b9ac <pbuf_alloc+0x1d4>)
 800b8be:	f009 fccb 	bl	8015258 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d102      	bne.n	800b8ce <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	627b      	str	r3, [r7, #36]	; 0x24
 800b8cc:	e002      	b.n	800b8d4 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	693a      	ldr	r2, [r7, #16]
 800b8d2:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b8d8:	8b7a      	ldrh	r2, [r7, #26]
 800b8da:	89fb      	ldrh	r3, [r7, #14]
 800b8dc:	1ad3      	subs	r3, r2, r3
 800b8de:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b8e4:	8b7b      	ldrh	r3, [r7, #26]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d19e      	bne.n	800b828 <pbuf_alloc+0x50>
      break;
 800b8ea:	e055      	b.n	800b998 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b8ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b8ee:	3303      	adds	r3, #3
 800b8f0:	b29b      	uxth	r3, r3
 800b8f2:	f023 0303 	bic.w	r3, r3, #3
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	88bb      	ldrh	r3, [r7, #4]
 800b8fa:	3303      	adds	r3, #3
 800b8fc:	b29b      	uxth	r3, r3
 800b8fe:	f023 0303 	bic.w	r3, r3, #3
 800b902:	b29b      	uxth	r3, r3
 800b904:	4413      	add	r3, r2
 800b906:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b908:	8b3b      	ldrh	r3, [r7, #24]
 800b90a:	3310      	adds	r3, #16
 800b90c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b90e:	8b3a      	ldrh	r2, [r7, #24]
 800b910:	88bb      	ldrh	r3, [r7, #4]
 800b912:	3303      	adds	r3, #3
 800b914:	f023 0303 	bic.w	r3, r3, #3
 800b918:	429a      	cmp	r2, r3
 800b91a:	d306      	bcc.n	800b92a <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b91c:	8afa      	ldrh	r2, [r7, #22]
 800b91e:	88bb      	ldrh	r3, [r7, #4]
 800b920:	3303      	adds	r3, #3
 800b922:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b926:	429a      	cmp	r2, r3
 800b928:	d201      	bcs.n	800b92e <pbuf_alloc+0x156>
        return NULL;
 800b92a:	2300      	movs	r3, #0
 800b92c:	e035      	b.n	800b99a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b92e:	8afb      	ldrh	r3, [r7, #22]
 800b930:	4618      	mov	r0, r3
 800b932:	f7ff f9bd 	bl	800acb0 <mem_malloc>
 800b936:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d101      	bne.n	800b942 <pbuf_alloc+0x16a>
        return NULL;
 800b93e:	2300      	movs	r3, #0
 800b940:	e02b      	b.n	800b99a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b942:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b944:	3310      	adds	r3, #16
 800b946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b948:	4413      	add	r3, r2
 800b94a:	3303      	adds	r3, #3
 800b94c:	f023 0303 	bic.w	r3, r3, #3
 800b950:	4618      	mov	r0, r3
 800b952:	88b9      	ldrh	r1, [r7, #4]
 800b954:	88ba      	ldrh	r2, [r7, #4]
 800b956:	2300      	movs	r3, #0
 800b958:	9301      	str	r3, [sp, #4]
 800b95a:	887b      	ldrh	r3, [r7, #2]
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	460b      	mov	r3, r1
 800b960:	4601      	mov	r1, r0
 800b962:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b964:	f7ff ff0e 	bl	800b784 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	f003 0303 	and.w	r3, r3, #3
 800b970:	2b00      	cmp	r3, #0
 800b972:	d010      	beq.n	800b996 <pbuf_alloc+0x1be>
 800b974:	4b0b      	ldr	r3, [pc, #44]	; (800b9a4 <pbuf_alloc+0x1cc>)
 800b976:	f240 1223 	movw	r2, #291	; 0x123
 800b97a:	490e      	ldr	r1, [pc, #56]	; (800b9b4 <pbuf_alloc+0x1dc>)
 800b97c:	480b      	ldr	r0, [pc, #44]	; (800b9ac <pbuf_alloc+0x1d4>)
 800b97e:	f009 fc6b 	bl	8015258 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b982:	e008      	b.n	800b996 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b984:	4b07      	ldr	r3, [pc, #28]	; (800b9a4 <pbuf_alloc+0x1cc>)
 800b986:	f240 1227 	movw	r2, #295	; 0x127
 800b98a:	490b      	ldr	r1, [pc, #44]	; (800b9b8 <pbuf_alloc+0x1e0>)
 800b98c:	4807      	ldr	r0, [pc, #28]	; (800b9ac <pbuf_alloc+0x1d4>)
 800b98e:	f009 fc63 	bl	8015258 <iprintf>
      return NULL;
 800b992:	2300      	movs	r3, #0
 800b994:	e001      	b.n	800b99a <pbuf_alloc+0x1c2>
      break;
 800b996:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3728      	adds	r7, #40	; 0x28
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	08016d94 	.word	0x08016d94
 800b9a8:	08016dc4 	.word	0x08016dc4
 800b9ac:	08016df4 	.word	0x08016df4
 800b9b0:	08016e1c 	.word	0x08016e1c
 800b9b4:	08016e50 	.word	0x08016e50
 800b9b8:	08016e7c 	.word	0x08016e7c

0800b9bc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af02      	add	r7, sp, #8
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	807b      	strh	r3, [r7, #2]
 800b9c8:	4613      	mov	r3, r2
 800b9ca:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b9cc:	883b      	ldrh	r3, [r7, #0]
 800b9ce:	2b41      	cmp	r3, #65	; 0x41
 800b9d0:	d009      	beq.n	800b9e6 <pbuf_alloc_reference+0x2a>
 800b9d2:	883b      	ldrh	r3, [r7, #0]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d006      	beq.n	800b9e6 <pbuf_alloc_reference+0x2a>
 800b9d8:	4b0f      	ldr	r3, [pc, #60]	; (800ba18 <pbuf_alloc_reference+0x5c>)
 800b9da:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b9de:	490f      	ldr	r1, [pc, #60]	; (800ba1c <pbuf_alloc_reference+0x60>)
 800b9e0:	480f      	ldr	r0, [pc, #60]	; (800ba20 <pbuf_alloc_reference+0x64>)
 800b9e2:	f009 fc39 	bl	8015258 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b9e6:	200b      	movs	r0, #11
 800b9e8:	f7ff fae4 	bl	800afb4 <memp_malloc>
 800b9ec:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d101      	bne.n	800b9f8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	e00b      	b.n	800ba10 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b9f8:	8879      	ldrh	r1, [r7, #2]
 800b9fa:	887a      	ldrh	r2, [r7, #2]
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	9301      	str	r3, [sp, #4]
 800ba00:	883b      	ldrh	r3, [r7, #0]
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	460b      	mov	r3, r1
 800ba06:	6879      	ldr	r1, [r7, #4]
 800ba08:	68f8      	ldr	r0, [r7, #12]
 800ba0a:	f7ff febb 	bl	800b784 <pbuf_init_alloced_pbuf>
  return p;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	08016d94 	.word	0x08016d94
 800ba1c:	08016e98 	.word	0x08016e98
 800ba20:	08016df4 	.word	0x08016df4

0800ba24 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b088      	sub	sp, #32
 800ba28:	af02      	add	r7, sp, #8
 800ba2a:	607b      	str	r3, [r7, #4]
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	73fb      	strb	r3, [r7, #15]
 800ba30:	460b      	mov	r3, r1
 800ba32:	81bb      	strh	r3, [r7, #12]
 800ba34:	4613      	mov	r3, r2
 800ba36:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ba38:	7bfb      	ldrb	r3, [r7, #15]
 800ba3a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ba3c:	8a7b      	ldrh	r3, [r7, #18]
 800ba3e:	3303      	adds	r3, #3
 800ba40:	f023 0203 	bic.w	r2, r3, #3
 800ba44:	89bb      	ldrh	r3, [r7, #12]
 800ba46:	441a      	add	r2, r3
 800ba48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba4a:	429a      	cmp	r2, r3
 800ba4c:	d901      	bls.n	800ba52 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	e018      	b.n	800ba84 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ba52:	6a3b      	ldr	r3, [r7, #32]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d007      	beq.n	800ba68 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ba58:	8a7b      	ldrh	r3, [r7, #18]
 800ba5a:	3303      	adds	r3, #3
 800ba5c:	f023 0303 	bic.w	r3, r3, #3
 800ba60:	6a3a      	ldr	r2, [r7, #32]
 800ba62:	4413      	add	r3, r2
 800ba64:	617b      	str	r3, [r7, #20]
 800ba66:	e001      	b.n	800ba6c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	89b9      	ldrh	r1, [r7, #12]
 800ba70:	89ba      	ldrh	r2, [r7, #12]
 800ba72:	2302      	movs	r3, #2
 800ba74:	9301      	str	r3, [sp, #4]
 800ba76:	897b      	ldrh	r3, [r7, #10]
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	6979      	ldr	r1, [r7, #20]
 800ba7e:	f7ff fe81 	bl	800b784 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ba82:	687b      	ldr	r3, [r7, #4]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3718      	adds	r7, #24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	460b      	mov	r3, r1
 800ba96:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d106      	bne.n	800baac <pbuf_realloc+0x20>
 800ba9e:	4b3a      	ldr	r3, [pc, #232]	; (800bb88 <pbuf_realloc+0xfc>)
 800baa0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800baa4:	4939      	ldr	r1, [pc, #228]	; (800bb8c <pbuf_realloc+0x100>)
 800baa6:	483a      	ldr	r0, [pc, #232]	; (800bb90 <pbuf_realloc+0x104>)
 800baa8:	f009 fbd6 	bl	8015258 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	891b      	ldrh	r3, [r3, #8]
 800bab0:	887a      	ldrh	r2, [r7, #2]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d264      	bcs.n	800bb80 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	891a      	ldrh	r2, [r3, #8]
 800baba:	887b      	ldrh	r3, [r7, #2]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bac0:	887b      	ldrh	r3, [r7, #2]
 800bac2:	817b      	strh	r3, [r7, #10]
  q = p;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bac8:	e018      	b.n	800bafc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	895b      	ldrh	r3, [r3, #10]
 800bace:	897a      	ldrh	r2, [r7, #10]
 800bad0:	1ad3      	subs	r3, r2, r3
 800bad2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	891a      	ldrh	r2, [r3, #8]
 800bad8:	893b      	ldrh	r3, [r7, #8]
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	b29a      	uxth	r2, r3
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d106      	bne.n	800bafc <pbuf_realloc+0x70>
 800baee:	4b26      	ldr	r3, [pc, #152]	; (800bb88 <pbuf_realloc+0xfc>)
 800baf0:	f240 12af 	movw	r2, #431	; 0x1af
 800baf4:	4927      	ldr	r1, [pc, #156]	; (800bb94 <pbuf_realloc+0x108>)
 800baf6:	4826      	ldr	r0, [pc, #152]	; (800bb90 <pbuf_realloc+0x104>)
 800baf8:	f009 fbae 	bl	8015258 <iprintf>
  while (rem_len > q->len) {
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	895b      	ldrh	r3, [r3, #10]
 800bb00:	897a      	ldrh	r2, [r7, #10]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d8e1      	bhi.n	800baca <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	7b1b      	ldrb	r3, [r3, #12]
 800bb0a:	f003 030f 	and.w	r3, r3, #15
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d122      	bne.n	800bb58 <pbuf_realloc+0xcc>
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	895b      	ldrh	r3, [r3, #10]
 800bb16:	897a      	ldrh	r2, [r7, #10]
 800bb18:	429a      	cmp	r2, r3
 800bb1a:	d01d      	beq.n	800bb58 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	7b5b      	ldrb	r3, [r3, #13]
 800bb20:	f003 0302 	and.w	r3, r3, #2
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d117      	bne.n	800bb58 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	1ad3      	subs	r3, r2, r3
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	897b      	ldrh	r3, [r7, #10]
 800bb36:	4413      	add	r3, r2
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f7fe ffad 	bl	800aa9c <mem_trim>
 800bb42:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d106      	bne.n	800bb58 <pbuf_realloc+0xcc>
 800bb4a:	4b0f      	ldr	r3, [pc, #60]	; (800bb88 <pbuf_realloc+0xfc>)
 800bb4c:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bb50:	4911      	ldr	r1, [pc, #68]	; (800bb98 <pbuf_realloc+0x10c>)
 800bb52:	480f      	ldr	r0, [pc, #60]	; (800bb90 <pbuf_realloc+0x104>)
 800bb54:	f009 fb80 	bl	8015258 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	897a      	ldrh	r2, [r7, #10]
 800bb5c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	895a      	ldrh	r2, [r3, #10]
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d004      	beq.n	800bb78 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 f910 	bl	800bd98 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	601a      	str	r2, [r3, #0]
 800bb7e:	e000      	b.n	800bb82 <pbuf_realloc+0xf6>
    return;
 800bb80:	bf00      	nop

}
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	08016d94 	.word	0x08016d94
 800bb8c:	08016eac 	.word	0x08016eac
 800bb90:	08016df4 	.word	0x08016df4
 800bb94:	08016ec4 	.word	0x08016ec4
 800bb98:	08016edc 	.word	0x08016edc

0800bb9c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b086      	sub	sp, #24
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	60b9      	str	r1, [r7, #8]
 800bba6:	4613      	mov	r3, r2
 800bba8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d106      	bne.n	800bbbe <pbuf_add_header_impl+0x22>
 800bbb0:	4b2b      	ldr	r3, [pc, #172]	; (800bc60 <pbuf_add_header_impl+0xc4>)
 800bbb2:	f240 12df 	movw	r2, #479	; 0x1df
 800bbb6:	492b      	ldr	r1, [pc, #172]	; (800bc64 <pbuf_add_header_impl+0xc8>)
 800bbb8:	482b      	ldr	r0, [pc, #172]	; (800bc68 <pbuf_add_header_impl+0xcc>)
 800bbba:	f009 fb4d 	bl	8015258 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d003      	beq.n	800bbcc <pbuf_add_header_impl+0x30>
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbca:	d301      	bcc.n	800bbd0 <pbuf_add_header_impl+0x34>
    return 1;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e043      	b.n	800bc58 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d101      	bne.n	800bbda <pbuf_add_header_impl+0x3e>
    return 0;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	e03e      	b.n	800bc58 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	891a      	ldrh	r2, [r3, #8]
 800bbe2:	8a7b      	ldrh	r3, [r7, #18]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	8a7a      	ldrh	r2, [r7, #18]
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d901      	bls.n	800bbf2 <pbuf_add_header_impl+0x56>
    return 1;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e032      	b.n	800bc58 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	7b1b      	ldrb	r3, [r3, #12]
 800bbf6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800bbf8:	8a3b      	ldrh	r3, [r7, #16]
 800bbfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00c      	beq.n	800bc1c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	685a      	ldr	r2, [r3, #4]
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	425b      	negs	r3, r3
 800bc0a:	4413      	add	r3, r2
 800bc0c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	3310      	adds	r3, #16
 800bc12:	697a      	ldr	r2, [r7, #20]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d20d      	bcs.n	800bc34 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e01d      	b.n	800bc58 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bc1c:	79fb      	ldrb	r3, [r7, #7]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d006      	beq.n	800bc30 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	685a      	ldr	r2, [r3, #4]
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	425b      	negs	r3, r3
 800bc2a:	4413      	add	r3, r2
 800bc2c:	617b      	str	r3, [r7, #20]
 800bc2e:	e001      	b.n	800bc34 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800bc30:	2301      	movs	r3, #1
 800bc32:	e011      	b.n	800bc58 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	697a      	ldr	r2, [r7, #20]
 800bc38:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	895a      	ldrh	r2, [r3, #10]
 800bc3e:	8a7b      	ldrh	r3, [r7, #18]
 800bc40:	4413      	add	r3, r2
 800bc42:	b29a      	uxth	r2, r3
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	891a      	ldrh	r2, [r3, #8]
 800bc4c:	8a7b      	ldrh	r3, [r7, #18]
 800bc4e:	4413      	add	r3, r2
 800bc50:	b29a      	uxth	r2, r3
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	811a      	strh	r2, [r3, #8]


  return 0;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3718      	adds	r7, #24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	08016d94 	.word	0x08016d94
 800bc64:	08016ef8 	.word	0x08016ef8
 800bc68:	08016df4 	.word	0x08016df4

0800bc6c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800bc76:	2200      	movs	r2, #0
 800bc78:	6839      	ldr	r1, [r7, #0]
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7ff ff8e 	bl	800bb9c <pbuf_add_header_impl>
 800bc80:	4603      	mov	r3, r0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3708      	adds	r7, #8
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
	...

0800bc8c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d106      	bne.n	800bcaa <pbuf_remove_header+0x1e>
 800bc9c:	4b20      	ldr	r3, [pc, #128]	; (800bd20 <pbuf_remove_header+0x94>)
 800bc9e:	f240 224b 	movw	r2, #587	; 0x24b
 800bca2:	4920      	ldr	r1, [pc, #128]	; (800bd24 <pbuf_remove_header+0x98>)
 800bca4:	4820      	ldr	r0, [pc, #128]	; (800bd28 <pbuf_remove_header+0x9c>)
 800bca6:	f009 fad7 	bl	8015258 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d003      	beq.n	800bcb8 <pbuf_remove_header+0x2c>
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bcb6:	d301      	bcc.n	800bcbc <pbuf_remove_header+0x30>
    return 1;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	e02c      	b.n	800bd16 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d101      	bne.n	800bcc6 <pbuf_remove_header+0x3a>
    return 0;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	e027      	b.n	800bd16 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	895b      	ldrh	r3, [r3, #10]
 800bcce:	89fa      	ldrh	r2, [r7, #14]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d908      	bls.n	800bce6 <pbuf_remove_header+0x5a>
 800bcd4:	4b12      	ldr	r3, [pc, #72]	; (800bd20 <pbuf_remove_header+0x94>)
 800bcd6:	f240 2255 	movw	r2, #597	; 0x255
 800bcda:	4914      	ldr	r1, [pc, #80]	; (800bd2c <pbuf_remove_header+0xa0>)
 800bcdc:	4812      	ldr	r0, [pc, #72]	; (800bd28 <pbuf_remove_header+0x9c>)
 800bcde:	f009 fabb 	bl	8015258 <iprintf>
 800bce2:	2301      	movs	r3, #1
 800bce4:	e017      	b.n	800bd16 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	685a      	ldr	r2, [r3, #4]
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	441a      	add	r2, r3
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	895a      	ldrh	r2, [r3, #10]
 800bcfc:	89fb      	ldrh	r3, [r7, #14]
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	b29a      	uxth	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	891a      	ldrh	r2, [r3, #8]
 800bd0a:	89fb      	ldrh	r3, [r7, #14]
 800bd0c:	1ad3      	subs	r3, r2, r3
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	08016d94 	.word	0x08016d94
 800bd24:	08016ef8 	.word	0x08016ef8
 800bd28:	08016df4 	.word	0x08016df4
 800bd2c:	08016f04 	.word	0x08016f04

0800bd30 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	460b      	mov	r3, r1
 800bd3a:	807b      	strh	r3, [r7, #2]
 800bd3c:	4613      	mov	r3, r2
 800bd3e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bd40:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	da08      	bge.n	800bd5a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bd48:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bd4c:	425b      	negs	r3, r3
 800bd4e:	4619      	mov	r1, r3
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7ff ff9b 	bl	800bc8c <pbuf_remove_header>
 800bd56:	4603      	mov	r3, r0
 800bd58:	e007      	b.n	800bd6a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bd5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bd5e:	787a      	ldrb	r2, [r7, #1]
 800bd60:	4619      	mov	r1, r3
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f7ff ff1a 	bl	800bb9c <pbuf_add_header_impl>
 800bd68:	4603      	mov	r3, r0
  }
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3708      	adds	r7, #8
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b082      	sub	sp, #8
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
 800bd7a:	460b      	mov	r3, r1
 800bd7c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bd7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bd82:	2201      	movs	r2, #1
 800bd84:	4619      	mov	r1, r3
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f7ff ffd2 	bl	800bd30 <pbuf_header_impl>
 800bd8c:	4603      	mov	r3, r0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3708      	adds	r7, #8
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
	...

0800bd98 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b088      	sub	sp, #32
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d10b      	bne.n	800bdbe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d106      	bne.n	800bdba <pbuf_free+0x22>
 800bdac:	4b3b      	ldr	r3, [pc, #236]	; (800be9c <pbuf_free+0x104>)
 800bdae:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800bdb2:	493b      	ldr	r1, [pc, #236]	; (800bea0 <pbuf_free+0x108>)
 800bdb4:	483b      	ldr	r0, [pc, #236]	; (800bea4 <pbuf_free+0x10c>)
 800bdb6:	f009 fa4f 	bl	8015258 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	e069      	b.n	800be92 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bdc2:	e062      	b.n	800be8a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bdc4:	f009 f9ca 	bl	801515c <sys_arch_protect>
 800bdc8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	7b9b      	ldrb	r3, [r3, #14]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d106      	bne.n	800bde0 <pbuf_free+0x48>
 800bdd2:	4b32      	ldr	r3, [pc, #200]	; (800be9c <pbuf_free+0x104>)
 800bdd4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800bdd8:	4933      	ldr	r1, [pc, #204]	; (800bea8 <pbuf_free+0x110>)
 800bdda:	4832      	ldr	r0, [pc, #200]	; (800bea4 <pbuf_free+0x10c>)
 800bddc:	f009 fa3c 	bl	8015258 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	7b9b      	ldrb	r3, [r3, #14]
 800bde4:	3b01      	subs	r3, #1
 800bde6:	b2da      	uxtb	r2, r3
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	739a      	strb	r2, [r3, #14]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	7b9b      	ldrb	r3, [r3, #14]
 800bdf0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bdf2:	69b8      	ldr	r0, [r7, #24]
 800bdf4:	f009 f9c0 	bl	8015178 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bdf8:	7dfb      	ldrb	r3, [r7, #23]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d143      	bne.n	800be86 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	7b1b      	ldrb	r3, [r3, #12]
 800be08:	f003 030f 	and.w	r3, r3, #15
 800be0c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	7b5b      	ldrb	r3, [r3, #13]
 800be12:	f003 0302 	and.w	r3, r3, #2
 800be16:	2b00      	cmp	r3, #0
 800be18:	d011      	beq.n	800be3e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	691b      	ldr	r3, [r3, #16]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d106      	bne.n	800be34 <pbuf_free+0x9c>
 800be26:	4b1d      	ldr	r3, [pc, #116]	; (800be9c <pbuf_free+0x104>)
 800be28:	f240 22ff 	movw	r2, #767	; 0x2ff
 800be2c:	491f      	ldr	r1, [pc, #124]	; (800beac <pbuf_free+0x114>)
 800be2e:	481d      	ldr	r0, [pc, #116]	; (800bea4 <pbuf_free+0x10c>)
 800be30:	f009 fa12 	bl	8015258 <iprintf>
        pc->custom_free_function(p);
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	691b      	ldr	r3, [r3, #16]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	4798      	blx	r3
 800be3c:	e01d      	b.n	800be7a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800be3e:	7bfb      	ldrb	r3, [r7, #15]
 800be40:	2b02      	cmp	r3, #2
 800be42:	d104      	bne.n	800be4e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800be44:	6879      	ldr	r1, [r7, #4]
 800be46:	200c      	movs	r0, #12
 800be48:	f7ff f906 	bl	800b058 <memp_free>
 800be4c:	e015      	b.n	800be7a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800be4e:	7bfb      	ldrb	r3, [r7, #15]
 800be50:	2b01      	cmp	r3, #1
 800be52:	d104      	bne.n	800be5e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800be54:	6879      	ldr	r1, [r7, #4]
 800be56:	200b      	movs	r0, #11
 800be58:	f7ff f8fe 	bl	800b058 <memp_free>
 800be5c:	e00d      	b.n	800be7a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800be5e:	7bfb      	ldrb	r3, [r7, #15]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d103      	bne.n	800be6c <pbuf_free+0xd4>
          mem_free(p);
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f7fe fd89 	bl	800a97c <mem_free>
 800be6a:	e006      	b.n	800be7a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800be6c:	4b0b      	ldr	r3, [pc, #44]	; (800be9c <pbuf_free+0x104>)
 800be6e:	f240 320f 	movw	r2, #783	; 0x30f
 800be72:	490f      	ldr	r1, [pc, #60]	; (800beb0 <pbuf_free+0x118>)
 800be74:	480b      	ldr	r0, [pc, #44]	; (800bea4 <pbuf_free+0x10c>)
 800be76:	f009 f9ef 	bl	8015258 <iprintf>
        }
      }
      count++;
 800be7a:	7ffb      	ldrb	r3, [r7, #31]
 800be7c:	3301      	adds	r3, #1
 800be7e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	607b      	str	r3, [r7, #4]
 800be84:	e001      	b.n	800be8a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800be86:	2300      	movs	r3, #0
 800be88:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d199      	bne.n	800bdc4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800be90:	7ffb      	ldrb	r3, [r7, #31]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3720      	adds	r7, #32
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	08016d94 	.word	0x08016d94
 800bea0:	08016ef8 	.word	0x08016ef8
 800bea4:	08016df4 	.word	0x08016df4
 800bea8:	08016f24 	.word	0x08016f24
 800beac:	08016f3c 	.word	0x08016f3c
 800beb0:	08016f60 	.word	0x08016f60

0800beb4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800beb4:	b480      	push	{r7}
 800beb6:	b085      	sub	sp, #20
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bebc:	2300      	movs	r3, #0
 800bebe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bec0:	e005      	b.n	800bece <pbuf_clen+0x1a>
    ++len;
 800bec2:	89fb      	ldrh	r3, [r7, #14]
 800bec4:	3301      	adds	r3, #1
 800bec6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d1f6      	bne.n	800bec2 <pbuf_clen+0xe>
  }
  return len;
 800bed4:	89fb      	ldrh	r3, [r7, #14]
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3714      	adds	r7, #20
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr
	...

0800bee4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d016      	beq.n	800bf20 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bef2:	f009 f933 	bl	801515c <sys_arch_protect>
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	7b9b      	ldrb	r3, [r3, #14]
 800befc:	3301      	adds	r3, #1
 800befe:	b2da      	uxtb	r2, r3
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	739a      	strb	r2, [r3, #14]
 800bf04:	68f8      	ldr	r0, [r7, #12]
 800bf06:	f009 f937 	bl	8015178 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	7b9b      	ldrb	r3, [r3, #14]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d106      	bne.n	800bf20 <pbuf_ref+0x3c>
 800bf12:	4b05      	ldr	r3, [pc, #20]	; (800bf28 <pbuf_ref+0x44>)
 800bf14:	f240 3242 	movw	r2, #834	; 0x342
 800bf18:	4904      	ldr	r1, [pc, #16]	; (800bf2c <pbuf_ref+0x48>)
 800bf1a:	4805      	ldr	r0, [pc, #20]	; (800bf30 <pbuf_ref+0x4c>)
 800bf1c:	f009 f99c 	bl	8015258 <iprintf>
  }
}
 800bf20:	bf00      	nop
 800bf22:	3710      	adds	r7, #16
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	08016d94 	.word	0x08016d94
 800bf2c:	08016f74 	.word	0x08016f74
 800bf30:	08016df4 	.word	0x08016df4

0800bf34 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d002      	beq.n	800bf4a <pbuf_cat+0x16>
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d107      	bne.n	800bf5a <pbuf_cat+0x26>
 800bf4a:	4b20      	ldr	r3, [pc, #128]	; (800bfcc <pbuf_cat+0x98>)
 800bf4c:	f240 325a 	movw	r2, #858	; 0x35a
 800bf50:	491f      	ldr	r1, [pc, #124]	; (800bfd0 <pbuf_cat+0x9c>)
 800bf52:	4820      	ldr	r0, [pc, #128]	; (800bfd4 <pbuf_cat+0xa0>)
 800bf54:	f009 f980 	bl	8015258 <iprintf>
 800bf58:	e034      	b.n	800bfc4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	60fb      	str	r3, [r7, #12]
 800bf5e:	e00a      	b.n	800bf76 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	891a      	ldrh	r2, [r3, #8]
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	891b      	ldrh	r3, [r3, #8]
 800bf68:	4413      	add	r3, r2
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	60fb      	str	r3, [r7, #12]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1f0      	bne.n	800bf60 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	891a      	ldrh	r2, [r3, #8]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	895b      	ldrh	r3, [r3, #10]
 800bf86:	429a      	cmp	r2, r3
 800bf88:	d006      	beq.n	800bf98 <pbuf_cat+0x64>
 800bf8a:	4b10      	ldr	r3, [pc, #64]	; (800bfcc <pbuf_cat+0x98>)
 800bf8c:	f240 3262 	movw	r2, #866	; 0x362
 800bf90:	4911      	ldr	r1, [pc, #68]	; (800bfd8 <pbuf_cat+0xa4>)
 800bf92:	4810      	ldr	r0, [pc, #64]	; (800bfd4 <pbuf_cat+0xa0>)
 800bf94:	f009 f960 	bl	8015258 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d006      	beq.n	800bfae <pbuf_cat+0x7a>
 800bfa0:	4b0a      	ldr	r3, [pc, #40]	; (800bfcc <pbuf_cat+0x98>)
 800bfa2:	f240 3263 	movw	r2, #867	; 0x363
 800bfa6:	490d      	ldr	r1, [pc, #52]	; (800bfdc <pbuf_cat+0xa8>)
 800bfa8:	480a      	ldr	r0, [pc, #40]	; (800bfd4 <pbuf_cat+0xa0>)
 800bfaa:	f009 f955 	bl	8015258 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	891a      	ldrh	r2, [r3, #8]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	891b      	ldrh	r3, [r3, #8]
 800bfb6:	4413      	add	r3, r2
 800bfb8:	b29a      	uxth	r2, r3
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	683a      	ldr	r2, [r7, #0]
 800bfc2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bfc4:	3710      	adds	r7, #16
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bd80      	pop	{r7, pc}
 800bfca:	bf00      	nop
 800bfcc:	08016d94 	.word	0x08016d94
 800bfd0:	08016f88 	.word	0x08016f88
 800bfd4:	08016df4 	.word	0x08016df4
 800bfd8:	08016fc0 	.word	0x08016fc0
 800bfdc:	08016ff0 	.word	0x08016ff0

0800bfe0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bfea:	2300      	movs	r3, #0
 800bfec:	617b      	str	r3, [r7, #20]
 800bfee:	2300      	movs	r3, #0
 800bff0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d008      	beq.n	800c00a <pbuf_copy+0x2a>
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d005      	beq.n	800c00a <pbuf_copy+0x2a>
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	891a      	ldrh	r2, [r3, #8]
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	891b      	ldrh	r3, [r3, #8]
 800c006:	429a      	cmp	r2, r3
 800c008:	d209      	bcs.n	800c01e <pbuf_copy+0x3e>
 800c00a:	4b57      	ldr	r3, [pc, #348]	; (800c168 <pbuf_copy+0x188>)
 800c00c:	f240 32ca 	movw	r2, #970	; 0x3ca
 800c010:	4956      	ldr	r1, [pc, #344]	; (800c16c <pbuf_copy+0x18c>)
 800c012:	4857      	ldr	r0, [pc, #348]	; (800c170 <pbuf_copy+0x190>)
 800c014:	f009 f920 	bl	8015258 <iprintf>
 800c018:	f06f 030f 	mvn.w	r3, #15
 800c01c:	e09f      	b.n	800c15e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	895b      	ldrh	r3, [r3, #10]
 800c022:	461a      	mov	r2, r3
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	1ad2      	subs	r2, r2, r3
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	895b      	ldrh	r3, [r3, #10]
 800c02c:	4619      	mov	r1, r3
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	1acb      	subs	r3, r1, r3
 800c032:	429a      	cmp	r2, r3
 800c034:	d306      	bcc.n	800c044 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	895b      	ldrh	r3, [r3, #10]
 800c03a:	461a      	mov	r2, r3
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	60fb      	str	r3, [r7, #12]
 800c042:	e005      	b.n	800c050 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	895b      	ldrh	r3, [r3, #10]
 800c048:	461a      	mov	r2, r3
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	1ad3      	subs	r3, r2, r3
 800c04e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	685a      	ldr	r2, [r3, #4]
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	18d0      	adds	r0, r2, r3
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	685a      	ldr	r2, [r3, #4]
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	4413      	add	r3, r2
 800c060:	68fa      	ldr	r2, [r7, #12]
 800c062:	4619      	mov	r1, r3
 800c064:	f009 f8cb 	bl	80151fe <memcpy>
    offset_to += len;
 800c068:	697a      	ldr	r2, [r7, #20]
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	4413      	add	r3, r2
 800c06e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c070:	693a      	ldr	r2, [r7, #16]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	4413      	add	r3, r2
 800c076:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	895b      	ldrh	r3, [r3, #10]
 800c07c:	461a      	mov	r2, r3
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	4293      	cmp	r3, r2
 800c082:	d906      	bls.n	800c092 <pbuf_copy+0xb2>
 800c084:	4b38      	ldr	r3, [pc, #224]	; (800c168 <pbuf_copy+0x188>)
 800c086:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c08a:	493a      	ldr	r1, [pc, #232]	; (800c174 <pbuf_copy+0x194>)
 800c08c:	4838      	ldr	r0, [pc, #224]	; (800c170 <pbuf_copy+0x190>)
 800c08e:	f009 f8e3 	bl	8015258 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	895b      	ldrh	r3, [r3, #10]
 800c096:	461a      	mov	r2, r3
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d906      	bls.n	800c0ac <pbuf_copy+0xcc>
 800c09e:	4b32      	ldr	r3, [pc, #200]	; (800c168 <pbuf_copy+0x188>)
 800c0a0:	f240 32da 	movw	r2, #986	; 0x3da
 800c0a4:	4934      	ldr	r1, [pc, #208]	; (800c178 <pbuf_copy+0x198>)
 800c0a6:	4832      	ldr	r0, [pc, #200]	; (800c170 <pbuf_copy+0x190>)
 800c0a8:	f009 f8d6 	bl	8015258 <iprintf>
    if (offset_from >= p_from->len) {
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	895b      	ldrh	r3, [r3, #10]
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d304      	bcc.n	800c0c2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	895b      	ldrh	r3, [r3, #10]
 800c0c6:	461a      	mov	r2, r3
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d114      	bne.n	800c0f8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d10c      	bne.n	800c0f8 <pbuf_copy+0x118>
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d009      	beq.n	800c0f8 <pbuf_copy+0x118>
 800c0e4:	4b20      	ldr	r3, [pc, #128]	; (800c168 <pbuf_copy+0x188>)
 800c0e6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c0ea:	4924      	ldr	r1, [pc, #144]	; (800c17c <pbuf_copy+0x19c>)
 800c0ec:	4820      	ldr	r0, [pc, #128]	; (800c170 <pbuf_copy+0x190>)
 800c0ee:	f009 f8b3 	bl	8015258 <iprintf>
 800c0f2:	f06f 030f 	mvn.w	r3, #15
 800c0f6:	e032      	b.n	800c15e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d013      	beq.n	800c126 <pbuf_copy+0x146>
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	895a      	ldrh	r2, [r3, #10]
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	891b      	ldrh	r3, [r3, #8]
 800c106:	429a      	cmp	r2, r3
 800c108:	d10d      	bne.n	800c126 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d009      	beq.n	800c126 <pbuf_copy+0x146>
 800c112:	4b15      	ldr	r3, [pc, #84]	; (800c168 <pbuf_copy+0x188>)
 800c114:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800c118:	4919      	ldr	r1, [pc, #100]	; (800c180 <pbuf_copy+0x1a0>)
 800c11a:	4815      	ldr	r0, [pc, #84]	; (800c170 <pbuf_copy+0x190>)
 800c11c:	f009 f89c 	bl	8015258 <iprintf>
 800c120:	f06f 0305 	mvn.w	r3, #5
 800c124:	e01b      	b.n	800c15e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d013      	beq.n	800c154 <pbuf_copy+0x174>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	895a      	ldrh	r2, [r3, #10]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	891b      	ldrh	r3, [r3, #8]
 800c134:	429a      	cmp	r2, r3
 800c136:	d10d      	bne.n	800c154 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d009      	beq.n	800c154 <pbuf_copy+0x174>
 800c140:	4b09      	ldr	r3, [pc, #36]	; (800c168 <pbuf_copy+0x188>)
 800c142:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800c146:	490e      	ldr	r1, [pc, #56]	; (800c180 <pbuf_copy+0x1a0>)
 800c148:	4809      	ldr	r0, [pc, #36]	; (800c170 <pbuf_copy+0x190>)
 800c14a:	f009 f885 	bl	8015258 <iprintf>
 800c14e:	f06f 0305 	mvn.w	r3, #5
 800c152:	e004      	b.n	800c15e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	f47f af61 	bne.w	800c01e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3718      	adds	r7, #24
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	08016d94 	.word	0x08016d94
 800c16c:	0801703c 	.word	0x0801703c
 800c170:	08016df4 	.word	0x08016df4
 800c174:	0801706c 	.word	0x0801706c
 800c178:	08017084 	.word	0x08017084
 800c17c:	080170a0 	.word	0x080170a0
 800c180:	080170b0 	.word	0x080170b0

0800c184 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b088      	sub	sp, #32
 800c188:	af00      	add	r7, sp, #0
 800c18a:	60f8      	str	r0, [r7, #12]
 800c18c:	60b9      	str	r1, [r7, #8]
 800c18e:	4611      	mov	r1, r2
 800c190:	461a      	mov	r2, r3
 800c192:	460b      	mov	r3, r1
 800c194:	80fb      	strh	r3, [r7, #6]
 800c196:	4613      	mov	r3, r2
 800c198:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c19a:	2300      	movs	r3, #0
 800c19c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d108      	bne.n	800c1ba <pbuf_copy_partial+0x36>
 800c1a8:	4b2b      	ldr	r3, [pc, #172]	; (800c258 <pbuf_copy_partial+0xd4>)
 800c1aa:	f240 420a 	movw	r2, #1034	; 0x40a
 800c1ae:	492b      	ldr	r1, [pc, #172]	; (800c25c <pbuf_copy_partial+0xd8>)
 800c1b0:	482b      	ldr	r0, [pc, #172]	; (800c260 <pbuf_copy_partial+0xdc>)
 800c1b2:	f009 f851 	bl	8015258 <iprintf>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	e04a      	b.n	800c250 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d108      	bne.n	800c1d2 <pbuf_copy_partial+0x4e>
 800c1c0:	4b25      	ldr	r3, [pc, #148]	; (800c258 <pbuf_copy_partial+0xd4>)
 800c1c2:	f240 420b 	movw	r2, #1035	; 0x40b
 800c1c6:	4927      	ldr	r1, [pc, #156]	; (800c264 <pbuf_copy_partial+0xe0>)
 800c1c8:	4825      	ldr	r0, [pc, #148]	; (800c260 <pbuf_copy_partial+0xdc>)
 800c1ca:	f009 f845 	bl	8015258 <iprintf>
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	e03e      	b.n	800c250 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	61fb      	str	r3, [r7, #28]
 800c1d6:	e034      	b.n	800c242 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c1d8:	88bb      	ldrh	r3, [r7, #4]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d00a      	beq.n	800c1f4 <pbuf_copy_partial+0x70>
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	895b      	ldrh	r3, [r3, #10]
 800c1e2:	88ba      	ldrh	r2, [r7, #4]
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d305      	bcc.n	800c1f4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c1e8:	69fb      	ldr	r3, [r7, #28]
 800c1ea:	895b      	ldrh	r3, [r3, #10]
 800c1ec:	88ba      	ldrh	r2, [r7, #4]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	80bb      	strh	r3, [r7, #4]
 800c1f2:	e023      	b.n	800c23c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c1f4:	69fb      	ldr	r3, [r7, #28]
 800c1f6:	895a      	ldrh	r2, [r3, #10]
 800c1f8:	88bb      	ldrh	r3, [r7, #4]
 800c1fa:	1ad3      	subs	r3, r2, r3
 800c1fc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c1fe:	8b3a      	ldrh	r2, [r7, #24]
 800c200:	88fb      	ldrh	r3, [r7, #6]
 800c202:	429a      	cmp	r2, r3
 800c204:	d901      	bls.n	800c20a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c206:	88fb      	ldrh	r3, [r7, #6]
 800c208:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c20a:	8b7b      	ldrh	r3, [r7, #26]
 800c20c:	68ba      	ldr	r2, [r7, #8]
 800c20e:	18d0      	adds	r0, r2, r3
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	685a      	ldr	r2, [r3, #4]
 800c214:	88bb      	ldrh	r3, [r7, #4]
 800c216:	4413      	add	r3, r2
 800c218:	8b3a      	ldrh	r2, [r7, #24]
 800c21a:	4619      	mov	r1, r3
 800c21c:	f008 ffef 	bl	80151fe <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c220:	8afa      	ldrh	r2, [r7, #22]
 800c222:	8b3b      	ldrh	r3, [r7, #24]
 800c224:	4413      	add	r3, r2
 800c226:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c228:	8b7a      	ldrh	r2, [r7, #26]
 800c22a:	8b3b      	ldrh	r3, [r7, #24]
 800c22c:	4413      	add	r3, r2
 800c22e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c230:	88fa      	ldrh	r2, [r7, #6]
 800c232:	8b3b      	ldrh	r3, [r7, #24]
 800c234:	1ad3      	subs	r3, r2, r3
 800c236:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c238:	2300      	movs	r3, #0
 800c23a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	61fb      	str	r3, [r7, #28]
 800c242:	88fb      	ldrh	r3, [r7, #6]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d002      	beq.n	800c24e <pbuf_copy_partial+0xca>
 800c248:	69fb      	ldr	r3, [r7, #28]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d1c4      	bne.n	800c1d8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c24e:	8afb      	ldrh	r3, [r7, #22]
}
 800c250:	4618      	mov	r0, r3
 800c252:	3720      	adds	r7, #32
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	08016d94 	.word	0x08016d94
 800c25c:	080170dc 	.word	0x080170dc
 800c260:	08016df4 	.word	0x08016df4
 800c264:	080170fc 	.word	0x080170fc

0800c268 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	4603      	mov	r3, r0
 800c270:	603a      	str	r2, [r7, #0]
 800c272:	71fb      	strb	r3, [r7, #7]
 800c274:	460b      	mov	r3, r1
 800c276:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	8919      	ldrh	r1, [r3, #8]
 800c27c:	88ba      	ldrh	r2, [r7, #4]
 800c27e:	79fb      	ldrb	r3, [r7, #7]
 800c280:	4618      	mov	r0, r3
 800c282:	f7ff faa9 	bl	800b7d8 <pbuf_alloc>
 800c286:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d101      	bne.n	800c292 <pbuf_clone+0x2a>
    return NULL;
 800c28e:	2300      	movs	r3, #0
 800c290:	e011      	b.n	800c2b6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c292:	6839      	ldr	r1, [r7, #0]
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	f7ff fea3 	bl	800bfe0 <pbuf_copy>
 800c29a:	4603      	mov	r3, r0
 800c29c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c29e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d006      	beq.n	800c2b4 <pbuf_clone+0x4c>
 800c2a6:	4b06      	ldr	r3, [pc, #24]	; (800c2c0 <pbuf_clone+0x58>)
 800c2a8:	f240 5224 	movw	r2, #1316	; 0x524
 800c2ac:	4905      	ldr	r1, [pc, #20]	; (800c2c4 <pbuf_clone+0x5c>)
 800c2ae:	4806      	ldr	r0, [pc, #24]	; (800c2c8 <pbuf_clone+0x60>)
 800c2b0:	f008 ffd2 	bl	8015258 <iprintf>
  return q;
 800c2b4:	68fb      	ldr	r3, [r7, #12]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3710      	adds	r7, #16
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	08016d94 	.word	0x08016d94
 800c2c4:	08017208 	.word	0x08017208
 800c2c8:	08016df4 	.word	0x08016df4

0800c2cc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c2d0:	f008 ffda 	bl	8015288 <rand>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	b29b      	uxth	r3, r3
 800c2d8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c2e2:	b29a      	uxth	r2, r3
 800c2e4:	4b01      	ldr	r3, [pc, #4]	; (800c2ec <tcp_init+0x20>)
 800c2e6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c2e8:	bf00      	nop
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	20000010 	.word	0x20000010

0800c2f0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	7d1b      	ldrb	r3, [r3, #20]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d105      	bne.n	800c30c <tcp_free+0x1c>
 800c300:	4b06      	ldr	r3, [pc, #24]	; (800c31c <tcp_free+0x2c>)
 800c302:	22d4      	movs	r2, #212	; 0xd4
 800c304:	4906      	ldr	r1, [pc, #24]	; (800c320 <tcp_free+0x30>)
 800c306:	4807      	ldr	r0, [pc, #28]	; (800c324 <tcp_free+0x34>)
 800c308:	f008 ffa6 	bl	8015258 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c30c:	6879      	ldr	r1, [r7, #4]
 800c30e:	2001      	movs	r0, #1
 800c310:	f7fe fea2 	bl	800b058 <memp_free>
}
 800c314:	bf00      	nop
 800c316:	3708      	adds	r7, #8
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	08017294 	.word	0x08017294
 800c320:	080172c4 	.word	0x080172c4
 800c324:	080172d8 	.word	0x080172d8

0800c328 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	7d1b      	ldrb	r3, [r3, #20]
 800c334:	2b01      	cmp	r3, #1
 800c336:	d105      	bne.n	800c344 <tcp_free_listen+0x1c>
 800c338:	4b06      	ldr	r3, [pc, #24]	; (800c354 <tcp_free_listen+0x2c>)
 800c33a:	22df      	movs	r2, #223	; 0xdf
 800c33c:	4906      	ldr	r1, [pc, #24]	; (800c358 <tcp_free_listen+0x30>)
 800c33e:	4807      	ldr	r0, [pc, #28]	; (800c35c <tcp_free_listen+0x34>)
 800c340:	f008 ff8a 	bl	8015258 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c344:	6879      	ldr	r1, [r7, #4]
 800c346:	2002      	movs	r0, #2
 800c348:	f7fe fe86 	bl	800b058 <memp_free>
}
 800c34c:	bf00      	nop
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}
 800c354:	08017294 	.word	0x08017294
 800c358:	08017300 	.word	0x08017300
 800c35c:	080172d8 	.word	0x080172d8

0800c360 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c364:	f001 f852 	bl	800d40c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c368:	4b07      	ldr	r3, [pc, #28]	; (800c388 <tcp_tmr+0x28>)
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	3301      	adds	r3, #1
 800c36e:	b2da      	uxtb	r2, r3
 800c370:	4b05      	ldr	r3, [pc, #20]	; (800c388 <tcp_tmr+0x28>)
 800c372:	701a      	strb	r2, [r3, #0]
 800c374:	4b04      	ldr	r3, [pc, #16]	; (800c388 <tcp_tmr+0x28>)
 800c376:	781b      	ldrb	r3, [r3, #0]
 800c378:	f003 0301 	and.w	r3, r3, #1
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d001      	beq.n	800c384 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c380:	f000 fd06 	bl	800cd90 <tcp_slowtmr>
  }
}
 800c384:	bf00      	nop
 800c386:	bd80      	pop	{r7, pc}
 800c388:	200044e9 	.word	0x200044e9

0800c38c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d105      	bne.n	800c3a8 <tcp_remove_listener+0x1c>
 800c39c:	4b0d      	ldr	r3, [pc, #52]	; (800c3d4 <tcp_remove_listener+0x48>)
 800c39e:	22ff      	movs	r2, #255	; 0xff
 800c3a0:	490d      	ldr	r1, [pc, #52]	; (800c3d8 <tcp_remove_listener+0x4c>)
 800c3a2:	480e      	ldr	r0, [pc, #56]	; (800c3dc <tcp_remove_listener+0x50>)
 800c3a4:	f008 ff58 	bl	8015258 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	60fb      	str	r3, [r7, #12]
 800c3ac:	e00a      	b.n	800c3c4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3b2:	683a      	ldr	r2, [r7, #0]
 800c3b4:	429a      	cmp	r2, r3
 800c3b6:	d102      	bne.n	800c3be <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	68db      	ldr	r3, [r3, #12]
 800c3c2:	60fb      	str	r3, [r7, #12]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d1f1      	bne.n	800c3ae <tcp_remove_listener+0x22>
    }
  }
}
 800c3ca:	bf00      	nop
 800c3cc:	3710      	adds	r7, #16
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	08017294 	.word	0x08017294
 800c3d8:	0801731c 	.word	0x0801731c
 800c3dc:	080172d8 	.word	0x080172d8

0800c3e0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d106      	bne.n	800c3fc <tcp_listen_closed+0x1c>
 800c3ee:	4b14      	ldr	r3, [pc, #80]	; (800c440 <tcp_listen_closed+0x60>)
 800c3f0:	f240 1211 	movw	r2, #273	; 0x111
 800c3f4:	4913      	ldr	r1, [pc, #76]	; (800c444 <tcp_listen_closed+0x64>)
 800c3f6:	4814      	ldr	r0, [pc, #80]	; (800c448 <tcp_listen_closed+0x68>)
 800c3f8:	f008 ff2e 	bl	8015258 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	7d1b      	ldrb	r3, [r3, #20]
 800c400:	2b01      	cmp	r3, #1
 800c402:	d006      	beq.n	800c412 <tcp_listen_closed+0x32>
 800c404:	4b0e      	ldr	r3, [pc, #56]	; (800c440 <tcp_listen_closed+0x60>)
 800c406:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c40a:	4910      	ldr	r1, [pc, #64]	; (800c44c <tcp_listen_closed+0x6c>)
 800c40c:	480e      	ldr	r0, [pc, #56]	; (800c448 <tcp_listen_closed+0x68>)
 800c40e:	f008 ff23 	bl	8015258 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c412:	2301      	movs	r3, #1
 800c414:	60fb      	str	r3, [r7, #12]
 800c416:	e00b      	b.n	800c430 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c418:	4a0d      	ldr	r2, [pc, #52]	; (800c450 <tcp_listen_closed+0x70>)
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	6879      	ldr	r1, [r7, #4]
 800c424:	4618      	mov	r0, r3
 800c426:	f7ff ffb1 	bl	800c38c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	3301      	adds	r3, #1
 800c42e:	60fb      	str	r3, [r7, #12]
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2b03      	cmp	r3, #3
 800c434:	d9f0      	bls.n	800c418 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c436:	bf00      	nop
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	08017294 	.word	0x08017294
 800c444:	08017344 	.word	0x08017344
 800c448:	080172d8 	.word	0x080172d8
 800c44c:	08017350 	.word	0x08017350
 800c450:	08029de8 	.word	0x08029de8

0800c454 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c454:	b5b0      	push	{r4, r5, r7, lr}
 800c456:	b088      	sub	sp, #32
 800c458:	af04      	add	r7, sp, #16
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	460b      	mov	r3, r1
 800c45e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d106      	bne.n	800c474 <tcp_close_shutdown+0x20>
 800c466:	4b61      	ldr	r3, [pc, #388]	; (800c5ec <tcp_close_shutdown+0x198>)
 800c468:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c46c:	4960      	ldr	r1, [pc, #384]	; (800c5f0 <tcp_close_shutdown+0x19c>)
 800c46e:	4861      	ldr	r0, [pc, #388]	; (800c5f4 <tcp_close_shutdown+0x1a0>)
 800c470:	f008 fef2 	bl	8015258 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c474:	78fb      	ldrb	r3, [r7, #3]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d066      	beq.n	800c548 <tcp_close_shutdown+0xf4>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	7d1b      	ldrb	r3, [r3, #20]
 800c47e:	2b04      	cmp	r3, #4
 800c480:	d003      	beq.n	800c48a <tcp_close_shutdown+0x36>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	7d1b      	ldrb	r3, [r3, #20]
 800c486:	2b07      	cmp	r3, #7
 800c488:	d15e      	bne.n	800c548 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d104      	bne.n	800c49c <tcp_close_shutdown+0x48>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c496:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c49a:	d055      	beq.n	800c548 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	8b5b      	ldrh	r3, [r3, #26]
 800c4a0:	f003 0310 	and.w	r3, r3, #16
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d106      	bne.n	800c4b6 <tcp_close_shutdown+0x62>
 800c4a8:	4b50      	ldr	r3, [pc, #320]	; (800c5ec <tcp_close_shutdown+0x198>)
 800c4aa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c4ae:	4952      	ldr	r1, [pc, #328]	; (800c5f8 <tcp_close_shutdown+0x1a4>)
 800c4b0:	4850      	ldr	r0, [pc, #320]	; (800c5f4 <tcp_close_shutdown+0x1a0>)
 800c4b2:	f008 fed1 	bl	8015258 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c4be:	687d      	ldr	r5, [r7, #4]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	3304      	adds	r3, #4
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	8ad2      	ldrh	r2, [r2, #22]
 800c4c8:	6879      	ldr	r1, [r7, #4]
 800c4ca:	8b09      	ldrh	r1, [r1, #24]
 800c4cc:	9102      	str	r1, [sp, #8]
 800c4ce:	9201      	str	r2, [sp, #4]
 800c4d0:	9300      	str	r3, [sp, #0]
 800c4d2:	462b      	mov	r3, r5
 800c4d4:	4622      	mov	r2, r4
 800c4d6:	4601      	mov	r1, r0
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f005 fd99 	bl	8012010 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f001 fb68 	bl	800dbb4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c4e4:	4b45      	ldr	r3, [pc, #276]	; (800c5fc <tcp_close_shutdown+0x1a8>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	687a      	ldr	r2, [r7, #4]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d105      	bne.n	800c4fa <tcp_close_shutdown+0xa6>
 800c4ee:	4b43      	ldr	r3, [pc, #268]	; (800c5fc <tcp_close_shutdown+0x1a8>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	4a41      	ldr	r2, [pc, #260]	; (800c5fc <tcp_close_shutdown+0x1a8>)
 800c4f6:	6013      	str	r3, [r2, #0]
 800c4f8:	e013      	b.n	800c522 <tcp_close_shutdown+0xce>
 800c4fa:	4b40      	ldr	r3, [pc, #256]	; (800c5fc <tcp_close_shutdown+0x1a8>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	60fb      	str	r3, [r7, #12]
 800c500:	e00c      	b.n	800c51c <tcp_close_shutdown+0xc8>
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	68db      	ldr	r3, [r3, #12]
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d104      	bne.n	800c516 <tcp_close_shutdown+0xc2>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	68da      	ldr	r2, [r3, #12]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	60da      	str	r2, [r3, #12]
 800c514:	e005      	b.n	800c522 <tcp_close_shutdown+0xce>
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	60fb      	str	r3, [r7, #12]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d1ef      	bne.n	800c502 <tcp_close_shutdown+0xae>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2200      	movs	r2, #0
 800c526:	60da      	str	r2, [r3, #12]
 800c528:	4b35      	ldr	r3, [pc, #212]	; (800c600 <tcp_close_shutdown+0x1ac>)
 800c52a:	2201      	movs	r2, #1
 800c52c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c52e:	4b35      	ldr	r3, [pc, #212]	; (800c604 <tcp_close_shutdown+0x1b0>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	429a      	cmp	r2, r3
 800c536:	d102      	bne.n	800c53e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c538:	f003 fffa 	bl	8010530 <tcp_trigger_input_pcb_close>
 800c53c:	e002      	b.n	800c544 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f7ff fed6 	bl	800c2f0 <tcp_free>
      }
      return ERR_OK;
 800c544:	2300      	movs	r3, #0
 800c546:	e04d      	b.n	800c5e4 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	7d1b      	ldrb	r3, [r3, #20]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d02d      	beq.n	800c5ac <tcp_close_shutdown+0x158>
 800c550:	2b02      	cmp	r3, #2
 800c552:	d036      	beq.n	800c5c2 <tcp_close_shutdown+0x16e>
 800c554:	2b00      	cmp	r3, #0
 800c556:	d13f      	bne.n	800c5d8 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	8adb      	ldrh	r3, [r3, #22]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d021      	beq.n	800c5a4 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c560:	4b29      	ldr	r3, [pc, #164]	; (800c608 <tcp_close_shutdown+0x1b4>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	687a      	ldr	r2, [r7, #4]
 800c566:	429a      	cmp	r2, r3
 800c568:	d105      	bne.n	800c576 <tcp_close_shutdown+0x122>
 800c56a:	4b27      	ldr	r3, [pc, #156]	; (800c608 <tcp_close_shutdown+0x1b4>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	68db      	ldr	r3, [r3, #12]
 800c570:	4a25      	ldr	r2, [pc, #148]	; (800c608 <tcp_close_shutdown+0x1b4>)
 800c572:	6013      	str	r3, [r2, #0]
 800c574:	e013      	b.n	800c59e <tcp_close_shutdown+0x14a>
 800c576:	4b24      	ldr	r3, [pc, #144]	; (800c608 <tcp_close_shutdown+0x1b4>)
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	60bb      	str	r3, [r7, #8]
 800c57c:	e00c      	b.n	800c598 <tcp_close_shutdown+0x144>
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	68db      	ldr	r3, [r3, #12]
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	429a      	cmp	r2, r3
 800c586:	d104      	bne.n	800c592 <tcp_close_shutdown+0x13e>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	68da      	ldr	r2, [r3, #12]
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	60da      	str	r2, [r3, #12]
 800c590:	e005      	b.n	800c59e <tcp_close_shutdown+0x14a>
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	68db      	ldr	r3, [r3, #12]
 800c596:	60bb      	str	r3, [r7, #8]
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d1ef      	bne.n	800c57e <tcp_close_shutdown+0x12a>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f7ff fea3 	bl	800c2f0 <tcp_free>
      break;
 800c5aa:	e01a      	b.n	800c5e2 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f7ff ff17 	bl	800c3e0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c5b2:	6879      	ldr	r1, [r7, #4]
 800c5b4:	4815      	ldr	r0, [pc, #84]	; (800c60c <tcp_close_shutdown+0x1b8>)
 800c5b6:	f001 fb4d 	bl	800dc54 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f7ff feb4 	bl	800c328 <tcp_free_listen>
      break;
 800c5c0:	e00f      	b.n	800c5e2 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c5c2:	6879      	ldr	r1, [r7, #4]
 800c5c4:	480d      	ldr	r0, [pc, #52]	; (800c5fc <tcp_close_shutdown+0x1a8>)
 800c5c6:	f001 fb45 	bl	800dc54 <tcp_pcb_remove>
 800c5ca:	4b0d      	ldr	r3, [pc, #52]	; (800c600 <tcp_close_shutdown+0x1ac>)
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f7ff fe8d 	bl	800c2f0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c5d6:	e004      	b.n	800c5e2 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 f819 	bl	800c610 <tcp_close_shutdown_fin>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	e000      	b.n	800c5e4 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3710      	adds	r7, #16
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bdb0      	pop	{r4, r5, r7, pc}
 800c5ec:	08017294 	.word	0x08017294
 800c5f0:	08017368 	.word	0x08017368
 800c5f4:	080172d8 	.word	0x080172d8
 800c5f8:	08017388 	.word	0x08017388
 800c5fc:	2000b3e0 	.word	0x2000b3e0
 800c600:	2000b3dc 	.word	0x2000b3dc
 800c604:	2000b3f4 	.word	0x2000b3f4
 800c608:	2000b3ec 	.word	0x2000b3ec
 800c60c:	2000b3e8 	.word	0x2000b3e8

0800c610 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d106      	bne.n	800c62c <tcp_close_shutdown_fin+0x1c>
 800c61e:	4b2c      	ldr	r3, [pc, #176]	; (800c6d0 <tcp_close_shutdown_fin+0xc0>)
 800c620:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c624:	492b      	ldr	r1, [pc, #172]	; (800c6d4 <tcp_close_shutdown_fin+0xc4>)
 800c626:	482c      	ldr	r0, [pc, #176]	; (800c6d8 <tcp_close_shutdown_fin+0xc8>)
 800c628:	f008 fe16 	bl	8015258 <iprintf>

  switch (pcb->state) {
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	7d1b      	ldrb	r3, [r3, #20]
 800c630:	2b04      	cmp	r3, #4
 800c632:	d010      	beq.n	800c656 <tcp_close_shutdown_fin+0x46>
 800c634:	2b07      	cmp	r3, #7
 800c636:	d01b      	beq.n	800c670 <tcp_close_shutdown_fin+0x60>
 800c638:	2b03      	cmp	r3, #3
 800c63a:	d126      	bne.n	800c68a <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f004 fde3 	bl	8011208 <tcp_send_fin>
 800c642:	4603      	mov	r3, r0
 800c644:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d11f      	bne.n	800c68e <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2205      	movs	r2, #5
 800c652:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c654:	e01b      	b.n	800c68e <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f004 fdd6 	bl	8011208 <tcp_send_fin>
 800c65c:	4603      	mov	r3, r0
 800c65e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c660:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d114      	bne.n	800c692 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2205      	movs	r2, #5
 800c66c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c66e:	e010      	b.n	800c692 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f004 fdc9 	bl	8011208 <tcp_send_fin>
 800c676:	4603      	mov	r3, r0
 800c678:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c67a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d109      	bne.n	800c696 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2209      	movs	r2, #9
 800c686:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c688:	e005      	b.n	800c696 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c68a:	2300      	movs	r3, #0
 800c68c:	e01c      	b.n	800c6c8 <tcp_close_shutdown_fin+0xb8>
      break;
 800c68e:	bf00      	nop
 800c690:	e002      	b.n	800c698 <tcp_close_shutdown_fin+0x88>
      break;
 800c692:	bf00      	nop
 800c694:	e000      	b.n	800c698 <tcp_close_shutdown_fin+0x88>
      break;
 800c696:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d103      	bne.n	800c6a8 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f004 feef 	bl	8011484 <tcp_output>
 800c6a6:	e00d      	b.n	800c6c4 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800c6a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6b0:	d108      	bne.n	800c6c4 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	8b5b      	ldrh	r3, [r3, #26]
 800c6b6:	f043 0308 	orr.w	r3, r3, #8
 800c6ba:	b29a      	uxth	r2, r3
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	e001      	b.n	800c6c8 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800c6c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3710      	adds	r7, #16
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	08017294 	.word	0x08017294
 800c6d4:	08017344 	.word	0x08017344
 800c6d8:	080172d8 	.word	0x080172d8

0800c6dc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b082      	sub	sp, #8
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d109      	bne.n	800c6fe <tcp_close+0x22>
 800c6ea:	4b0f      	ldr	r3, [pc, #60]	; (800c728 <tcp_close+0x4c>)
 800c6ec:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c6f0:	490e      	ldr	r1, [pc, #56]	; (800c72c <tcp_close+0x50>)
 800c6f2:	480f      	ldr	r0, [pc, #60]	; (800c730 <tcp_close+0x54>)
 800c6f4:	f008 fdb0 	bl	8015258 <iprintf>
 800c6f8:	f06f 030f 	mvn.w	r3, #15
 800c6fc:	e00f      	b.n	800c71e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	7d1b      	ldrb	r3, [r3, #20]
 800c702:	2b01      	cmp	r3, #1
 800c704:	d006      	beq.n	800c714 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	8b5b      	ldrh	r3, [r3, #26]
 800c70a:	f043 0310 	orr.w	r3, r3, #16
 800c70e:	b29a      	uxth	r2, r3
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c714:	2101      	movs	r1, #1
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f7ff fe9c 	bl	800c454 <tcp_close_shutdown>
 800c71c:	4603      	mov	r3, r0
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3708      	adds	r7, #8
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}
 800c726:	bf00      	nop
 800c728:	08017294 	.word	0x08017294
 800c72c:	080173a4 	.word	0x080173a4
 800c730:	080172d8 	.word	0x080172d8

0800c734 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b08e      	sub	sp, #56	; 0x38
 800c738:	af04      	add	r7, sp, #16
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d107      	bne.n	800c754 <tcp_abandon+0x20>
 800c744:	4b52      	ldr	r3, [pc, #328]	; (800c890 <tcp_abandon+0x15c>)
 800c746:	f240 223d 	movw	r2, #573	; 0x23d
 800c74a:	4952      	ldr	r1, [pc, #328]	; (800c894 <tcp_abandon+0x160>)
 800c74c:	4852      	ldr	r0, [pc, #328]	; (800c898 <tcp_abandon+0x164>)
 800c74e:	f008 fd83 	bl	8015258 <iprintf>
 800c752:	e099      	b.n	800c888 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	7d1b      	ldrb	r3, [r3, #20]
 800c758:	2b01      	cmp	r3, #1
 800c75a:	d106      	bne.n	800c76a <tcp_abandon+0x36>
 800c75c:	4b4c      	ldr	r3, [pc, #304]	; (800c890 <tcp_abandon+0x15c>)
 800c75e:	f240 2241 	movw	r2, #577	; 0x241
 800c762:	494e      	ldr	r1, [pc, #312]	; (800c89c <tcp_abandon+0x168>)
 800c764:	484c      	ldr	r0, [pc, #304]	; (800c898 <tcp_abandon+0x164>)
 800c766:	f008 fd77 	bl	8015258 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	7d1b      	ldrb	r3, [r3, #20]
 800c76e:	2b0a      	cmp	r3, #10
 800c770:	d107      	bne.n	800c782 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c772:	6879      	ldr	r1, [r7, #4]
 800c774:	484a      	ldr	r0, [pc, #296]	; (800c8a0 <tcp_abandon+0x16c>)
 800c776:	f001 fa6d 	bl	800dc54 <tcp_pcb_remove>
    tcp_free(pcb);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f7ff fdb8 	bl	800c2f0 <tcp_free>
 800c780:	e082      	b.n	800c888 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c782:	2300      	movs	r3, #0
 800c784:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c786:	2300      	movs	r3, #0
 800c788:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c78e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c794:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c79c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	691b      	ldr	r3, [r3, #16]
 800c7a2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	7d1b      	ldrb	r3, [r3, #20]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d126      	bne.n	800c7fa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	8adb      	ldrh	r3, [r3, #22]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d02e      	beq.n	800c812 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c7b4:	4b3b      	ldr	r3, [pc, #236]	; (800c8a4 <tcp_abandon+0x170>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d105      	bne.n	800c7ca <tcp_abandon+0x96>
 800c7be:	4b39      	ldr	r3, [pc, #228]	; (800c8a4 <tcp_abandon+0x170>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	68db      	ldr	r3, [r3, #12]
 800c7c4:	4a37      	ldr	r2, [pc, #220]	; (800c8a4 <tcp_abandon+0x170>)
 800c7c6:	6013      	str	r3, [r2, #0]
 800c7c8:	e013      	b.n	800c7f2 <tcp_abandon+0xbe>
 800c7ca:	4b36      	ldr	r3, [pc, #216]	; (800c8a4 <tcp_abandon+0x170>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	61fb      	str	r3, [r7, #28]
 800c7d0:	e00c      	b.n	800c7ec <tcp_abandon+0xb8>
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	68db      	ldr	r3, [r3, #12]
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d104      	bne.n	800c7e6 <tcp_abandon+0xb2>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	68da      	ldr	r2, [r3, #12]
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	60da      	str	r2, [r3, #12]
 800c7e4:	e005      	b.n	800c7f2 <tcp_abandon+0xbe>
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	68db      	ldr	r3, [r3, #12]
 800c7ea:	61fb      	str	r3, [r7, #28]
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d1ef      	bne.n	800c7d2 <tcp_abandon+0x9e>
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	60da      	str	r2, [r3, #12]
 800c7f8:	e00b      	b.n	800c812 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	8adb      	ldrh	r3, [r3, #22]
 800c802:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c804:	6879      	ldr	r1, [r7, #4]
 800c806:	4828      	ldr	r0, [pc, #160]	; (800c8a8 <tcp_abandon+0x174>)
 800c808:	f001 fa24 	bl	800dc54 <tcp_pcb_remove>
 800c80c:	4b27      	ldr	r3, [pc, #156]	; (800c8ac <tcp_abandon+0x178>)
 800c80e:	2201      	movs	r2, #1
 800c810:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c816:	2b00      	cmp	r3, #0
 800c818:	d004      	beq.n	800c824 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c81e:	4618      	mov	r0, r3
 800c820:	f000 fed4 	bl	800d5cc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d004      	beq.n	800c836 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c830:	4618      	mov	r0, r3
 800c832:	f000 fecb 	bl	800d5cc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d004      	beq.n	800c848 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c842:	4618      	mov	r0, r3
 800c844:	f000 fec2 	bl	800d5cc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00e      	beq.n	800c86c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c84e:	6879      	ldr	r1, [r7, #4]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	3304      	adds	r3, #4
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	8b12      	ldrh	r2, [r2, #24]
 800c858:	9202      	str	r2, [sp, #8]
 800c85a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c85c:	9201      	str	r2, [sp, #4]
 800c85e:	9300      	str	r3, [sp, #0]
 800c860:	460b      	mov	r3, r1
 800c862:	697a      	ldr	r2, [r7, #20]
 800c864:	69b9      	ldr	r1, [r7, #24]
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f005 fbd2 	bl	8012010 <tcp_rst>
    }
    last_state = pcb->state;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	7d1b      	ldrb	r3, [r3, #20]
 800c870:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c872:	6878      	ldr	r0, [r7, #4]
 800c874:	f7ff fd3c 	bl	800c2f0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d004      	beq.n	800c888 <tcp_abandon+0x154>
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	f06f 010c 	mvn.w	r1, #12
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	4798      	blx	r3
  }
}
 800c888:	3728      	adds	r7, #40	; 0x28
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	08017294 	.word	0x08017294
 800c894:	080173d8 	.word	0x080173d8
 800c898:	080172d8 	.word	0x080172d8
 800c89c:	080173f4 	.word	0x080173f4
 800c8a0:	2000b3f0 	.word	0x2000b3f0
 800c8a4:	2000b3ec 	.word	0x2000b3ec
 800c8a8:	2000b3e0 	.word	0x2000b3e0
 800c8ac:	2000b3dc 	.word	0x2000b3dc

0800c8b0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c8b8:	2101      	movs	r1, #1
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f7ff ff3a 	bl	800c734 <tcp_abandon>
}
 800c8c0:	bf00      	nop
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b088      	sub	sp, #32
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	60f8      	str	r0, [r7, #12]
 800c8d0:	60b9      	str	r1, [r7, #8]
 800c8d2:	4613      	mov	r3, r2
 800c8d4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c8d6:	2304      	movs	r3, #4
 800c8d8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d101      	bne.n	800c8e4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c8e0:	4b3e      	ldr	r3, [pc, #248]	; (800c9dc <tcp_bind+0x114>)
 800c8e2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d109      	bne.n	800c8fe <tcp_bind+0x36>
 800c8ea:	4b3d      	ldr	r3, [pc, #244]	; (800c9e0 <tcp_bind+0x118>)
 800c8ec:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c8f0:	493c      	ldr	r1, [pc, #240]	; (800c9e4 <tcp_bind+0x11c>)
 800c8f2:	483d      	ldr	r0, [pc, #244]	; (800c9e8 <tcp_bind+0x120>)
 800c8f4:	f008 fcb0 	bl	8015258 <iprintf>
 800c8f8:	f06f 030f 	mvn.w	r3, #15
 800c8fc:	e06a      	b.n	800c9d4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	7d1b      	ldrb	r3, [r3, #20]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d009      	beq.n	800c91a <tcp_bind+0x52>
 800c906:	4b36      	ldr	r3, [pc, #216]	; (800c9e0 <tcp_bind+0x118>)
 800c908:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c90c:	4937      	ldr	r1, [pc, #220]	; (800c9ec <tcp_bind+0x124>)
 800c90e:	4836      	ldr	r0, [pc, #216]	; (800c9e8 <tcp_bind+0x120>)
 800c910:	f008 fca2 	bl	8015258 <iprintf>
 800c914:	f06f 0305 	mvn.w	r3, #5
 800c918:	e05c      	b.n	800c9d4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c91a:	88fb      	ldrh	r3, [r7, #6]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d109      	bne.n	800c934 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c920:	f000 f9f0 	bl	800cd04 <tcp_new_port>
 800c924:	4603      	mov	r3, r0
 800c926:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c928:	88fb      	ldrh	r3, [r7, #6]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d135      	bne.n	800c99a <tcp_bind+0xd2>
      return ERR_BUF;
 800c92e:	f06f 0301 	mvn.w	r3, #1
 800c932:	e04f      	b.n	800c9d4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c934:	2300      	movs	r3, #0
 800c936:	61fb      	str	r3, [r7, #28]
 800c938:	e02b      	b.n	800c992 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c93a:	4a2d      	ldr	r2, [pc, #180]	; (800c9f0 <tcp_bind+0x128>)
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	61bb      	str	r3, [r7, #24]
 800c946:	e01e      	b.n	800c986 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	8adb      	ldrh	r3, [r3, #22]
 800c94c:	88fa      	ldrh	r2, [r7, #6]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d116      	bne.n	800c980 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c952:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c954:	2b00      	cmp	r3, #0
 800c956:	d010      	beq.n	800c97a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d00c      	beq.n	800c97a <tcp_bind+0xb2>
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d009      	beq.n	800c97a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d005      	beq.n	800c97a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c96e:	69bb      	ldr	r3, [r7, #24]
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c976:	429a      	cmp	r2, r3
 800c978:	d102      	bne.n	800c980 <tcp_bind+0xb8>
              return ERR_USE;
 800c97a:	f06f 0307 	mvn.w	r3, #7
 800c97e:	e029      	b.n	800c9d4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c980:	69bb      	ldr	r3, [r7, #24]
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	61bb      	str	r3, [r7, #24]
 800c986:	69bb      	ldr	r3, [r7, #24]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d1dd      	bne.n	800c948 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c98c:	69fb      	ldr	r3, [r7, #28]
 800c98e:	3301      	adds	r3, #1
 800c990:	61fb      	str	r3, [r7, #28]
 800c992:	69fa      	ldr	r2, [r7, #28]
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	429a      	cmp	r2, r3
 800c998:	dbcf      	blt.n	800c93a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00c      	beq.n	800c9ba <tcp_bind+0xf2>
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d008      	beq.n	800c9ba <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d002      	beq.n	800c9b4 <tcp_bind+0xec>
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	e000      	b.n	800c9b6 <tcp_bind+0xee>
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	68fa      	ldr	r2, [r7, #12]
 800c9b8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	88fa      	ldrh	r2, [r7, #6]
 800c9be:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c9c0:	4b0c      	ldr	r3, [pc, #48]	; (800c9f4 <tcp_bind+0x12c>)
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	60da      	str	r2, [r3, #12]
 800c9c8:	4a0a      	ldr	r2, [pc, #40]	; (800c9f4 <tcp_bind+0x12c>)
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6013      	str	r3, [r2, #0]
 800c9ce:	f005 fce1 	bl	8012394 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c9d2:	2300      	movs	r3, #0
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3720      	adds	r7, #32
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	08029e10 	.word	0x08029e10
 800c9e0:	08017294 	.word	0x08017294
 800c9e4:	08017428 	.word	0x08017428
 800c9e8:	080172d8 	.word	0x080172d8
 800c9ec:	08017440 	.word	0x08017440
 800c9f0:	08029de8 	.word	0x08029de8
 800c9f4:	2000b3ec 	.word	0x2000b3ec

0800c9f8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	4613      	mov	r3, r2
 800ca04:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d106      	bne.n	800ca1a <tcp_accept_null+0x22>
 800ca0c:	4b07      	ldr	r3, [pc, #28]	; (800ca2c <tcp_accept_null+0x34>)
 800ca0e:	f240 320f 	movw	r2, #783	; 0x30f
 800ca12:	4907      	ldr	r1, [pc, #28]	; (800ca30 <tcp_accept_null+0x38>)
 800ca14:	4807      	ldr	r0, [pc, #28]	; (800ca34 <tcp_accept_null+0x3c>)
 800ca16:	f008 fc1f 	bl	8015258 <iprintf>

  tcp_abort(pcb);
 800ca1a:	68b8      	ldr	r0, [r7, #8]
 800ca1c:	f7ff ff48 	bl	800c8b0 <tcp_abort>

  return ERR_ABRT;
 800ca20:	f06f 030c 	mvn.w	r3, #12
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3710      	adds	r7, #16
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bd80      	pop	{r7, pc}
 800ca2c:	08017294 	.word	0x08017294
 800ca30:	08017468 	.word	0x08017468
 800ca34:	080172d8 	.word	0x080172d8

0800ca38 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b082      	sub	sp, #8
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	460b      	mov	r3, r1
 800ca42:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800ca44:	78fb      	ldrb	r3, [r7, #3]
 800ca46:	2200      	movs	r2, #0
 800ca48:	4619      	mov	r1, r3
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 f806 	bl	800ca5c <tcp_listen_with_backlog_and_err>
 800ca50:	4603      	mov	r3, r0
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3708      	adds	r7, #8
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
	...

0800ca5c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b088      	sub	sp, #32
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	460b      	mov	r3, r1
 800ca66:	607a      	str	r2, [r7, #4]
 800ca68:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d109      	bne.n	800ca88 <tcp_listen_with_backlog_and_err+0x2c>
 800ca74:	4b47      	ldr	r3, [pc, #284]	; (800cb94 <tcp_listen_with_backlog_and_err+0x138>)
 800ca76:	f240 3259 	movw	r2, #857	; 0x359
 800ca7a:	4947      	ldr	r1, [pc, #284]	; (800cb98 <tcp_listen_with_backlog_and_err+0x13c>)
 800ca7c:	4847      	ldr	r0, [pc, #284]	; (800cb9c <tcp_listen_with_backlog_and_err+0x140>)
 800ca7e:	f008 fbeb 	bl	8015258 <iprintf>
 800ca82:	23f0      	movs	r3, #240	; 0xf0
 800ca84:	76fb      	strb	r3, [r7, #27]
 800ca86:	e079      	b.n	800cb7c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	7d1b      	ldrb	r3, [r3, #20]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d009      	beq.n	800caa4 <tcp_listen_with_backlog_and_err+0x48>
 800ca90:	4b40      	ldr	r3, [pc, #256]	; (800cb94 <tcp_listen_with_backlog_and_err+0x138>)
 800ca92:	f240 325a 	movw	r2, #858	; 0x35a
 800ca96:	4942      	ldr	r1, [pc, #264]	; (800cba0 <tcp_listen_with_backlog_and_err+0x144>)
 800ca98:	4840      	ldr	r0, [pc, #256]	; (800cb9c <tcp_listen_with_backlog_and_err+0x140>)
 800ca9a:	f008 fbdd 	bl	8015258 <iprintf>
 800ca9e:	23f1      	movs	r3, #241	; 0xf1
 800caa0:	76fb      	strb	r3, [r7, #27]
 800caa2:	e06b      	b.n	800cb7c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	7d1b      	ldrb	r3, [r3, #20]
 800caa8:	2b01      	cmp	r3, #1
 800caaa:	d104      	bne.n	800cab6 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800cab0:	23f7      	movs	r3, #247	; 0xf7
 800cab2:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cab4:	e062      	b.n	800cb7c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800cab6:	2002      	movs	r0, #2
 800cab8:	f7fe fa7c 	bl	800afb4 <memp_malloc>
 800cabc:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d102      	bne.n	800caca <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800cac4:	23ff      	movs	r3, #255	; 0xff
 800cac6:	76fb      	strb	r3, [r7, #27]
    goto done;
 800cac8:	e058      	b.n	800cb7c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	691a      	ldr	r2, [r3, #16]
 800cace:	69fb      	ldr	r3, [r7, #28]
 800cad0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	8ada      	ldrh	r2, [r3, #22]
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800cada:	69fb      	ldr	r3, [r7, #28]
 800cadc:	2201      	movs	r2, #1
 800cade:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	7d5a      	ldrb	r2, [r3, #21]
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	7a5a      	ldrb	r2, [r3, #9]
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	2200      	movs	r2, #0
 800caf4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	7ada      	ldrb	r2, [r3, #11]
 800cafa:	69fb      	ldr	r3, [r7, #28]
 800cafc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	7a9a      	ldrb	r2, [r3, #10]
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	69fb      	ldr	r3, [r7, #28]
 800cb0c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	8adb      	ldrh	r3, [r3, #22]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d021      	beq.n	800cb5a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800cb16:	4b23      	ldr	r3, [pc, #140]	; (800cba4 <tcp_listen_with_backlog_and_err+0x148>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d105      	bne.n	800cb2c <tcp_listen_with_backlog_and_err+0xd0>
 800cb20:	4b20      	ldr	r3, [pc, #128]	; (800cba4 <tcp_listen_with_backlog_and_err+0x148>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	4a1f      	ldr	r2, [pc, #124]	; (800cba4 <tcp_listen_with_backlog_and_err+0x148>)
 800cb28:	6013      	str	r3, [r2, #0]
 800cb2a:	e013      	b.n	800cb54 <tcp_listen_with_backlog_and_err+0xf8>
 800cb2c:	4b1d      	ldr	r3, [pc, #116]	; (800cba4 <tcp_listen_with_backlog_and_err+0x148>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	617b      	str	r3, [r7, #20]
 800cb32:	e00c      	b.n	800cb4e <tcp_listen_with_backlog_and_err+0xf2>
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	68fa      	ldr	r2, [r7, #12]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d104      	bne.n	800cb48 <tcp_listen_with_backlog_and_err+0xec>
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	68da      	ldr	r2, [r3, #12]
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	60da      	str	r2, [r3, #12]
 800cb46:	e005      	b.n	800cb54 <tcp_listen_with_backlog_and_err+0xf8>
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	617b      	str	r3, [r7, #20]
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d1ef      	bne.n	800cb34 <tcp_listen_with_backlog_and_err+0xd8>
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2200      	movs	r2, #0
 800cb58:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800cb5a:	68f8      	ldr	r0, [r7, #12]
 800cb5c:	f7ff fbc8 	bl	800c2f0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800cb60:	69fb      	ldr	r3, [r7, #28]
 800cb62:	4a11      	ldr	r2, [pc, #68]	; (800cba8 <tcp_listen_with_backlog_and_err+0x14c>)
 800cb64:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800cb66:	4b11      	ldr	r3, [pc, #68]	; (800cbac <tcp_listen_with_backlog_and_err+0x150>)
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	60da      	str	r2, [r3, #12]
 800cb6e:	4a0f      	ldr	r2, [pc, #60]	; (800cbac <tcp_listen_with_backlog_and_err+0x150>)
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	6013      	str	r3, [r2, #0]
 800cb74:	f005 fc0e 	bl	8012394 <tcp_timer_needed>
  res = ERR_OK;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d002      	beq.n	800cb88 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	7efa      	ldrb	r2, [r7, #27]
 800cb86:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800cb88:	69fb      	ldr	r3, [r7, #28]
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3720      	adds	r7, #32
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	08017294 	.word	0x08017294
 800cb98:	08017488 	.word	0x08017488
 800cb9c:	080172d8 	.word	0x080172d8
 800cba0:	080174b8 	.word	0x080174b8
 800cba4:	2000b3ec 	.word	0x2000b3ec
 800cba8:	0800c9f9 	.word	0x0800c9f9
 800cbac:	2000b3e8 	.word	0x2000b3e8

0800cbb0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d106      	bne.n	800cbcc <tcp_update_rcv_ann_wnd+0x1c>
 800cbbe:	4b25      	ldr	r3, [pc, #148]	; (800cc54 <tcp_update_rcv_ann_wnd+0xa4>)
 800cbc0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800cbc4:	4924      	ldr	r1, [pc, #144]	; (800cc58 <tcp_update_rcv_ann_wnd+0xa8>)
 800cbc6:	4825      	ldr	r0, [pc, #148]	; (800cc5c <tcp_update_rcv_ann_wnd+0xac>)
 800cbc8:	f008 fb46 	bl	8015258 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cbd4:	4413      	add	r3, r2
 800cbd6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbdc:	687a      	ldr	r2, [r7, #4]
 800cbde:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cbe0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cbe4:	bf28      	it	cs
 800cbe6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800cbea:	b292      	uxth	r2, r2
 800cbec:	4413      	add	r3, r2
 800cbee:	68fa      	ldr	r2, [r7, #12]
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	db08      	blt.n	800cc08 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc02:	68fa      	ldr	r2, [r7, #12]
 800cc04:	1ad3      	subs	r3, r2, r3
 800cc06:	e020      	b.n	800cc4a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc10:	1ad3      	subs	r3, r2, r3
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	dd03      	ble.n	800cc1e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cc1c:	e014      	b.n	800cc48 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc26:	1ad3      	subs	r3, r2, r3
 800cc28:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc30:	d306      	bcc.n	800cc40 <tcp_update_rcv_ann_wnd+0x90>
 800cc32:	4b08      	ldr	r3, [pc, #32]	; (800cc54 <tcp_update_rcv_ann_wnd+0xa4>)
 800cc34:	f240 32b6 	movw	r2, #950	; 0x3b6
 800cc38:	4909      	ldr	r1, [pc, #36]	; (800cc60 <tcp_update_rcv_ann_wnd+0xb0>)
 800cc3a:	4808      	ldr	r0, [pc, #32]	; (800cc5c <tcp_update_rcv_ann_wnd+0xac>)
 800cc3c:	f008 fb0c 	bl	8015258 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	b29a      	uxth	r2, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cc48:	2300      	movs	r3, #0
  }
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	08017294 	.word	0x08017294
 800cc58:	080174f0 	.word	0x080174f0
 800cc5c:	080172d8 	.word	0x080172d8
 800cc60:	08017514 	.word	0x08017514

0800cc64 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b084      	sub	sp, #16
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d107      	bne.n	800cc86 <tcp_recved+0x22>
 800cc76:	4b1f      	ldr	r3, [pc, #124]	; (800ccf4 <tcp_recved+0x90>)
 800cc78:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cc7c:	491e      	ldr	r1, [pc, #120]	; (800ccf8 <tcp_recved+0x94>)
 800cc7e:	481f      	ldr	r0, [pc, #124]	; (800ccfc <tcp_recved+0x98>)
 800cc80:	f008 faea 	bl	8015258 <iprintf>
 800cc84:	e032      	b.n	800ccec <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	7d1b      	ldrb	r3, [r3, #20]
 800cc8a:	2b01      	cmp	r3, #1
 800cc8c:	d106      	bne.n	800cc9c <tcp_recved+0x38>
 800cc8e:	4b19      	ldr	r3, [pc, #100]	; (800ccf4 <tcp_recved+0x90>)
 800cc90:	f240 32d3 	movw	r2, #979	; 0x3d3
 800cc94:	491a      	ldr	r1, [pc, #104]	; (800cd00 <tcp_recved+0x9c>)
 800cc96:	4819      	ldr	r0, [pc, #100]	; (800ccfc <tcp_recved+0x98>)
 800cc98:	f008 fade 	bl	8015258 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cca0:	887b      	ldrh	r3, [r7, #2]
 800cca2:	4413      	add	r3, r2
 800cca4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800cca6:	89fb      	ldrh	r3, [r7, #14]
 800cca8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ccac:	d804      	bhi.n	800ccb8 <tcp_recved+0x54>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccb2:	89fa      	ldrh	r2, [r7, #14]
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d204      	bcs.n	800ccc2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ccbe:	851a      	strh	r2, [r3, #40]	; 0x28
 800ccc0:	e002      	b.n	800ccc8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	89fa      	ldrh	r2, [r7, #14]
 800ccc6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ccc8:	6878      	ldr	r0, [r7, #4]
 800ccca:	f7ff ff71 	bl	800cbb0 <tcp_update_rcv_ann_wnd>
 800ccce:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ccd6:	d309      	bcc.n	800ccec <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	8b5b      	ldrh	r3, [r3, #26]
 800ccdc:	f043 0302 	orr.w	r3, r3, #2
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f004 fbcc 	bl	8011484 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	08017294 	.word	0x08017294
 800ccf8:	08017530 	.word	0x08017530
 800ccfc:	080172d8 	.word	0x080172d8
 800cd00:	08017548 	.word	0x08017548

0800cd04 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800cd0e:	4b1e      	ldr	r3, [pc, #120]	; (800cd88 <tcp_new_port+0x84>)
 800cd10:	881b      	ldrh	r3, [r3, #0]
 800cd12:	3301      	adds	r3, #1
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	4b1c      	ldr	r3, [pc, #112]	; (800cd88 <tcp_new_port+0x84>)
 800cd18:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800cd1a:	4b1b      	ldr	r3, [pc, #108]	; (800cd88 <tcp_new_port+0x84>)
 800cd1c:	881b      	ldrh	r3, [r3, #0]
 800cd1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d103      	bne.n	800cd2e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800cd26:	4b18      	ldr	r3, [pc, #96]	; (800cd88 <tcp_new_port+0x84>)
 800cd28:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800cd2c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cd2e:	2300      	movs	r3, #0
 800cd30:	71fb      	strb	r3, [r7, #7]
 800cd32:	e01e      	b.n	800cd72 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cd34:	79fb      	ldrb	r3, [r7, #7]
 800cd36:	4a15      	ldr	r2, [pc, #84]	; (800cd8c <tcp_new_port+0x88>)
 800cd38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	603b      	str	r3, [r7, #0]
 800cd40:	e011      	b.n	800cd66 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	8ada      	ldrh	r2, [r3, #22]
 800cd46:	4b10      	ldr	r3, [pc, #64]	; (800cd88 <tcp_new_port+0x84>)
 800cd48:	881b      	ldrh	r3, [r3, #0]
 800cd4a:	429a      	cmp	r2, r3
 800cd4c:	d108      	bne.n	800cd60 <tcp_new_port+0x5c>
        n++;
 800cd4e:	88bb      	ldrh	r3, [r7, #4]
 800cd50:	3301      	adds	r3, #1
 800cd52:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800cd54:	88bb      	ldrh	r3, [r7, #4]
 800cd56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd5a:	d3d8      	bcc.n	800cd0e <tcp_new_port+0xa>
          return 0;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	e00d      	b.n	800cd7c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	68db      	ldr	r3, [r3, #12]
 800cd64:	603b      	str	r3, [r7, #0]
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d1ea      	bne.n	800cd42 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800cd6c:	79fb      	ldrb	r3, [r7, #7]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	71fb      	strb	r3, [r7, #7]
 800cd72:	79fb      	ldrb	r3, [r7, #7]
 800cd74:	2b03      	cmp	r3, #3
 800cd76:	d9dd      	bls.n	800cd34 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800cd78:	4b03      	ldr	r3, [pc, #12]	; (800cd88 <tcp_new_port+0x84>)
 800cd7a:	881b      	ldrh	r3, [r3, #0]
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr
 800cd88:	20000010 	.word	0x20000010
 800cd8c:	08029de8 	.word	0x08029de8

0800cd90 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800cd90:	b5b0      	push	{r4, r5, r7, lr}
 800cd92:	b090      	sub	sp, #64	; 0x40
 800cd94:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800cd96:	2300      	movs	r3, #0
 800cd98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800cd9c:	4b94      	ldr	r3, [pc, #592]	; (800cff0 <tcp_slowtmr+0x260>)
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	3301      	adds	r3, #1
 800cda2:	4a93      	ldr	r2, [pc, #588]	; (800cff0 <tcp_slowtmr+0x260>)
 800cda4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800cda6:	4b93      	ldr	r3, [pc, #588]	; (800cff4 <tcp_slowtmr+0x264>)
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	b2da      	uxtb	r2, r3
 800cdae:	4b91      	ldr	r3, [pc, #580]	; (800cff4 <tcp_slowtmr+0x264>)
 800cdb0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800cdb6:	4b90      	ldr	r3, [pc, #576]	; (800cff8 <tcp_slowtmr+0x268>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800cdbc:	e29d      	b.n	800d2fa <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800cdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc0:	7d1b      	ldrb	r3, [r3, #20]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d106      	bne.n	800cdd4 <tcp_slowtmr+0x44>
 800cdc6:	4b8d      	ldr	r3, [pc, #564]	; (800cffc <tcp_slowtmr+0x26c>)
 800cdc8:	f240 42be 	movw	r2, #1214	; 0x4be
 800cdcc:	498c      	ldr	r1, [pc, #560]	; (800d000 <tcp_slowtmr+0x270>)
 800cdce:	488d      	ldr	r0, [pc, #564]	; (800d004 <tcp_slowtmr+0x274>)
 800cdd0:	f008 fa42 	bl	8015258 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800cdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd6:	7d1b      	ldrb	r3, [r3, #20]
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d106      	bne.n	800cdea <tcp_slowtmr+0x5a>
 800cddc:	4b87      	ldr	r3, [pc, #540]	; (800cffc <tcp_slowtmr+0x26c>)
 800cdde:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800cde2:	4989      	ldr	r1, [pc, #548]	; (800d008 <tcp_slowtmr+0x278>)
 800cde4:	4887      	ldr	r0, [pc, #540]	; (800d004 <tcp_slowtmr+0x274>)
 800cde6:	f008 fa37 	bl	8015258 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800cdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdec:	7d1b      	ldrb	r3, [r3, #20]
 800cdee:	2b0a      	cmp	r3, #10
 800cdf0:	d106      	bne.n	800ce00 <tcp_slowtmr+0x70>
 800cdf2:	4b82      	ldr	r3, [pc, #520]	; (800cffc <tcp_slowtmr+0x26c>)
 800cdf4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800cdf8:	4984      	ldr	r1, [pc, #528]	; (800d00c <tcp_slowtmr+0x27c>)
 800cdfa:	4882      	ldr	r0, [pc, #520]	; (800d004 <tcp_slowtmr+0x274>)
 800cdfc:	f008 fa2c 	bl	8015258 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ce00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce02:	7f9a      	ldrb	r2, [r3, #30]
 800ce04:	4b7b      	ldr	r3, [pc, #492]	; (800cff4 <tcp_slowtmr+0x264>)
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d105      	bne.n	800ce18 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ce0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ce10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ce16:	e270      	b.n	800d2fa <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ce18:	4b76      	ldr	r3, [pc, #472]	; (800cff4 <tcp_slowtmr+0x264>)
 800ce1a:	781a      	ldrb	r2, [r3, #0]
 800ce1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce1e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ce20:	2300      	movs	r3, #0
 800ce22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ce26:	2300      	movs	r3, #0
 800ce28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ce2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2e:	7d1b      	ldrb	r3, [r3, #20]
 800ce30:	2b02      	cmp	r3, #2
 800ce32:	d10a      	bne.n	800ce4a <tcp_slowtmr+0xba>
 800ce34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce3a:	2b05      	cmp	r3, #5
 800ce3c:	d905      	bls.n	800ce4a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ce3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce42:	3301      	adds	r3, #1
 800ce44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce48:	e11e      	b.n	800d088 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ce4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ce50:	2b0b      	cmp	r3, #11
 800ce52:	d905      	bls.n	800ce60 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ce54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce58:	3301      	adds	r3, #1
 800ce5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ce5e:	e113      	b.n	800d088 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ce60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce62:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d075      	beq.n	800cf56 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ce6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d006      	beq.n	800ce80 <tcp_slowtmr+0xf0>
 800ce72:	4b62      	ldr	r3, [pc, #392]	; (800cffc <tcp_slowtmr+0x26c>)
 800ce74:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ce78:	4965      	ldr	r1, [pc, #404]	; (800d010 <tcp_slowtmr+0x280>)
 800ce7a:	4862      	ldr	r0, [pc, #392]	; (800d004 <tcp_slowtmr+0x274>)
 800ce7c:	f008 f9ec 	bl	8015258 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ce80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d106      	bne.n	800ce96 <tcp_slowtmr+0x106>
 800ce88:	4b5c      	ldr	r3, [pc, #368]	; (800cffc <tcp_slowtmr+0x26c>)
 800ce8a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ce8e:	4961      	ldr	r1, [pc, #388]	; (800d014 <tcp_slowtmr+0x284>)
 800ce90:	485c      	ldr	r0, [pc, #368]	; (800d004 <tcp_slowtmr+0x274>)
 800ce92:	f008 f9e1 	bl	8015258 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ce96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce98:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ce9c:	2b0b      	cmp	r3, #11
 800ce9e:	d905      	bls.n	800ceac <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cea4:	3301      	adds	r3, #1
 800cea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ceaa:	e0ed      	b.n	800d088 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ceac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ceb2:	3b01      	subs	r3, #1
 800ceb4:	4a58      	ldr	r2, [pc, #352]	; (800d018 <tcp_slowtmr+0x288>)
 800ceb6:	5cd3      	ldrb	r3, [r2, r3]
 800ceb8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ceba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cec0:	7c7a      	ldrb	r2, [r7, #17]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d907      	bls.n	800ced6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cecc:	3301      	adds	r3, #1
 800cece:	b2da      	uxtb	r2, r3
 800ced0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800ced6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cedc:	7c7a      	ldrb	r2, [r7, #17]
 800cede:	429a      	cmp	r2, r3
 800cee0:	f200 80d2 	bhi.w	800d088 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cee4:	2301      	movs	r3, #1
 800cee6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d108      	bne.n	800cf04 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cef2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cef4:	f005 f980 	bl	80121f8 <tcp_zero_window_probe>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d014      	beq.n	800cf28 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800cefe:	2300      	movs	r3, #0
 800cf00:	623b      	str	r3, [r7, #32]
 800cf02:	e011      	b.n	800cf28 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf0e:	f004 f833 	bl	8010f78 <tcp_split_unsent_seg>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d107      	bne.n	800cf28 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cf18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf1a:	f004 fab3 	bl	8011484 <tcp_output>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d101      	bne.n	800cf28 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800cf24:	2300      	movs	r3, #0
 800cf26:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cf28:	6a3b      	ldr	r3, [r7, #32]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	f000 80ac 	beq.w	800d088 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cf30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf32:	2200      	movs	r2, #0
 800cf34:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cf3e:	2b06      	cmp	r3, #6
 800cf40:	f200 80a2 	bhi.w	800d088 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cf44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf46:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cf4a:	3301      	adds	r3, #1
 800cf4c:	b2da      	uxtb	r2, r3
 800cf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf50:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cf54:	e098      	b.n	800d088 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cf56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf58:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	db0f      	blt.n	800cf80 <tcp_slowtmr+0x1f0>
 800cf60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf62:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cf66:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d008      	beq.n	800cf80 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf70:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	3301      	adds	r3, #1
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	b21a      	sxth	r2, r3
 800cf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cf80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf82:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cf86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf88:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	db7b      	blt.n	800d088 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cf90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf92:	f004 fd6f 	bl	8011a74 <tcp_rexmit_rto_prepare>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d007      	beq.n	800cfac <tcp_slowtmr+0x21c>
 800cf9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d171      	bne.n	800d088 <tcp_slowtmr+0x2f8>
 800cfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d06d      	beq.n	800d088 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfae:	7d1b      	ldrb	r3, [r3, #20]
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	d03a      	beq.n	800d02a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cfb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cfba:	2b0c      	cmp	r3, #12
 800cfbc:	bf28      	it	cs
 800cfbe:	230c      	movcs	r3, #12
 800cfc0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cfc8:	10db      	asrs	r3, r3, #3
 800cfca:	b21b      	sxth	r3, r3
 800cfcc:	461a      	mov	r2, r3
 800cfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cfd4:	4413      	add	r3, r2
 800cfd6:	7efa      	ldrb	r2, [r7, #27]
 800cfd8:	4910      	ldr	r1, [pc, #64]	; (800d01c <tcp_slowtmr+0x28c>)
 800cfda:	5c8a      	ldrb	r2, [r1, r2]
 800cfdc:	4093      	lsls	r3, r2
 800cfde:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cfe0:	697b      	ldr	r3, [r7, #20]
 800cfe2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	dc1a      	bgt.n	800d020 <tcp_slowtmr+0x290>
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	b21a      	sxth	r2, r3
 800cfee:	e019      	b.n	800d024 <tcp_slowtmr+0x294>
 800cff0:	2000b3e4 	.word	0x2000b3e4
 800cff4:	200044ea 	.word	0x200044ea
 800cff8:	2000b3e0 	.word	0x2000b3e0
 800cffc:	08017294 	.word	0x08017294
 800d000:	080175d8 	.word	0x080175d8
 800d004:	080172d8 	.word	0x080172d8
 800d008:	08017604 	.word	0x08017604
 800d00c:	08017630 	.word	0x08017630
 800d010:	08017660 	.word	0x08017660
 800d014:	08017694 	.word	0x08017694
 800d018:	08029de0 	.word	0x08029de0
 800d01c:	08029dd0 	.word	0x08029dd0
 800d020:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d026:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02c:	2200      	movs	r2, #0
 800d02e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d032:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d038:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d03c:	4293      	cmp	r3, r2
 800d03e:	bf28      	it	cs
 800d040:	4613      	movcs	r3, r2
 800d042:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d044:	8a7b      	ldrh	r3, [r7, #18]
 800d046:	085b      	lsrs	r3, r3, #1
 800d048:	b29a      	uxth	r2, r3
 800d04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d052:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d058:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d05a:	005b      	lsls	r3, r3, #1
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	429a      	cmp	r2, r3
 800d060:	d206      	bcs.n	800d070 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d066:	005b      	lsls	r3, r3, #1
 800d068:	b29a      	uxth	r2, r3
 800d06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d072:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d076:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07c:	2200      	movs	r2, #0
 800d07e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d082:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d084:	f004 fd66 	bl	8011b54 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08a:	7d1b      	ldrb	r3, [r3, #20]
 800d08c:	2b06      	cmp	r3, #6
 800d08e:	d111      	bne.n	800d0b4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d092:	8b5b      	ldrh	r3, [r3, #26]
 800d094:	f003 0310 	and.w	r3, r3, #16
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d00b      	beq.n	800d0b4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d09c:	4b9c      	ldr	r3, [pc, #624]	; (800d310 <tcp_slowtmr+0x580>)
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a2:	6a1b      	ldr	r3, [r3, #32]
 800d0a4:	1ad3      	subs	r3, r2, r3
 800d0a6:	2b28      	cmp	r3, #40	; 0x28
 800d0a8:	d904      	bls.n	800d0b4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d0aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0ae:	3301      	adds	r3, #1
 800d0b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b6:	7a5b      	ldrb	r3, [r3, #9]
 800d0b8:	f003 0308 	and.w	r3, r3, #8
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d04a      	beq.n	800d156 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0c2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d0c4:	2b04      	cmp	r3, #4
 800d0c6:	d003      	beq.n	800d0d0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ca:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d0cc:	2b07      	cmp	r3, #7
 800d0ce:	d142      	bne.n	800d156 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d0d0:	4b8f      	ldr	r3, [pc, #572]	; (800d310 <tcp_slowtmr+0x580>)
 800d0d2:	681a      	ldr	r2, [r3, #0]
 800d0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d6:	6a1b      	ldr	r3, [r3, #32]
 800d0d8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0dc:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d0e0:	4b8c      	ldr	r3, [pc, #560]	; (800d314 <tcp_slowtmr+0x584>)
 800d0e2:	440b      	add	r3, r1
 800d0e4:	498c      	ldr	r1, [pc, #560]	; (800d318 <tcp_slowtmr+0x588>)
 800d0e6:	fba1 1303 	umull	r1, r3, r1, r3
 800d0ea:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d90a      	bls.n	800d106 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d0f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0f4:	3301      	adds	r3, #1
 800d0f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d0fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d0fe:	3301      	adds	r3, #1
 800d100:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d104:	e027      	b.n	800d156 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d106:	4b82      	ldr	r3, [pc, #520]	; (800d310 <tcp_slowtmr+0x580>)
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10c:	6a1b      	ldr	r3, [r3, #32]
 800d10e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d112:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d118:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d11c:	4618      	mov	r0, r3
 800d11e:	4b7f      	ldr	r3, [pc, #508]	; (800d31c <tcp_slowtmr+0x58c>)
 800d120:	fb03 f300 	mul.w	r3, r3, r0
 800d124:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d126:	497c      	ldr	r1, [pc, #496]	; (800d318 <tcp_slowtmr+0x588>)
 800d128:	fba1 1303 	umull	r1, r3, r1, r3
 800d12c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d12e:	429a      	cmp	r2, r3
 800d130:	d911      	bls.n	800d156 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d134:	f005 f820 	bl	8012178 <tcp_keepalive>
 800d138:	4603      	mov	r3, r0
 800d13a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d13e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d142:	2b00      	cmp	r3, #0
 800d144:	d107      	bne.n	800d156 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d148:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d14c:	3301      	adds	r3, #1
 800d14e:	b2da      	uxtb	r2, r3
 800d150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d152:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d011      	beq.n	800d182 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d15e:	4b6c      	ldr	r3, [pc, #432]	; (800d310 <tcp_slowtmr+0x580>)
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d164:	6a1b      	ldr	r3, [r3, #32]
 800d166:	1ad2      	subs	r2, r2, r3
 800d168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d16e:	4619      	mov	r1, r3
 800d170:	460b      	mov	r3, r1
 800d172:	005b      	lsls	r3, r3, #1
 800d174:	440b      	add	r3, r1
 800d176:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d178:	429a      	cmp	r2, r3
 800d17a:	d302      	bcc.n	800d182 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d17c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d17e:	f000 fecd 	bl	800df1c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d184:	7d1b      	ldrb	r3, [r3, #20]
 800d186:	2b03      	cmp	r3, #3
 800d188:	d10b      	bne.n	800d1a2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d18a:	4b61      	ldr	r3, [pc, #388]	; (800d310 <tcp_slowtmr+0x580>)
 800d18c:	681a      	ldr	r2, [r3, #0]
 800d18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d190:	6a1b      	ldr	r3, [r3, #32]
 800d192:	1ad3      	subs	r3, r2, r3
 800d194:	2b28      	cmp	r3, #40	; 0x28
 800d196:	d904      	bls.n	800d1a2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d198:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d19c:	3301      	adds	r3, #1
 800d19e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a4:	7d1b      	ldrb	r3, [r3, #20]
 800d1a6:	2b09      	cmp	r3, #9
 800d1a8:	d10b      	bne.n	800d1c2 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d1aa:	4b59      	ldr	r3, [pc, #356]	; (800d310 <tcp_slowtmr+0x580>)
 800d1ac:	681a      	ldr	r2, [r3, #0]
 800d1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b0:	6a1b      	ldr	r3, [r3, #32]
 800d1b2:	1ad3      	subs	r3, r2, r3
 800d1b4:	2bf0      	cmp	r3, #240	; 0xf0
 800d1b6:	d904      	bls.n	800d1c2 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800d1b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1bc:	3301      	adds	r3, #1
 800d1be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d1c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d060      	beq.n	800d28c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1d0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d1d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1d4:	f000 fcee 	bl	800dbb4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d010      	beq.n	800d200 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d1de:	4b50      	ldr	r3, [pc, #320]	; (800d320 <tcp_slowtmr+0x590>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d106      	bne.n	800d1f6 <tcp_slowtmr+0x466>
 800d1e8:	4b4e      	ldr	r3, [pc, #312]	; (800d324 <tcp_slowtmr+0x594>)
 800d1ea:	f240 526d 	movw	r2, #1389	; 0x56d
 800d1ee:	494e      	ldr	r1, [pc, #312]	; (800d328 <tcp_slowtmr+0x598>)
 800d1f0:	484e      	ldr	r0, [pc, #312]	; (800d32c <tcp_slowtmr+0x59c>)
 800d1f2:	f008 f831 	bl	8015258 <iprintf>
        prev->next = pcb->next;
 800d1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f8:	68da      	ldr	r2, [r3, #12]
 800d1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fc:	60da      	str	r2, [r3, #12]
 800d1fe:	e00f      	b.n	800d220 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d200:	4b47      	ldr	r3, [pc, #284]	; (800d320 <tcp_slowtmr+0x590>)
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d206:	429a      	cmp	r2, r3
 800d208:	d006      	beq.n	800d218 <tcp_slowtmr+0x488>
 800d20a:	4b46      	ldr	r3, [pc, #280]	; (800d324 <tcp_slowtmr+0x594>)
 800d20c:	f240 5271 	movw	r2, #1393	; 0x571
 800d210:	4947      	ldr	r1, [pc, #284]	; (800d330 <tcp_slowtmr+0x5a0>)
 800d212:	4846      	ldr	r0, [pc, #280]	; (800d32c <tcp_slowtmr+0x59c>)
 800d214:	f008 f820 	bl	8015258 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21a:	68db      	ldr	r3, [r3, #12]
 800d21c:	4a40      	ldr	r2, [pc, #256]	; (800d320 <tcp_slowtmr+0x590>)
 800d21e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d220:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d224:	2b00      	cmp	r3, #0
 800d226:	d013      	beq.n	800d250 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d230:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d234:	3304      	adds	r3, #4
 800d236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d238:	8ad2      	ldrh	r2, [r2, #22]
 800d23a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d23c:	8b09      	ldrh	r1, [r1, #24]
 800d23e:	9102      	str	r1, [sp, #8]
 800d240:	9201      	str	r2, [sp, #4]
 800d242:	9300      	str	r3, [sp, #0]
 800d244:	462b      	mov	r3, r5
 800d246:	4622      	mov	r2, r4
 800d248:	4601      	mov	r1, r0
 800d24a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d24c:	f004 fee0 	bl	8012010 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d258:	7d1b      	ldrb	r3, [r3, #20]
 800d25a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d262:	68db      	ldr	r3, [r3, #12]
 800d264:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d266:	6838      	ldr	r0, [r7, #0]
 800d268:	f7ff f842 	bl	800c2f0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d26c:	4b31      	ldr	r3, [pc, #196]	; (800d334 <tcp_slowtmr+0x5a4>)
 800d26e:	2200      	movs	r2, #0
 800d270:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d004      	beq.n	800d282 <tcp_slowtmr+0x4f2>
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f06f 010c 	mvn.w	r1, #12
 800d27e:	68b8      	ldr	r0, [r7, #8]
 800d280:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d282:	4b2c      	ldr	r3, [pc, #176]	; (800d334 <tcp_slowtmr+0x5a4>)
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d037      	beq.n	800d2fa <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d28a:	e592      	b.n	800cdb2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d298:	7f1b      	ldrb	r3, [r3, #28]
 800d29a:	3301      	adds	r3, #1
 800d29c:	b2da      	uxtb	r2, r3
 800d29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a4:	7f1a      	ldrb	r2, [r3, #28]
 800d2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a8:	7f5b      	ldrb	r3, [r3, #29]
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	d325      	bcc.n	800d2fa <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d2b4:	4b1f      	ldr	r3, [pc, #124]	; (800d334 <tcp_slowtmr+0x5a4>)
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d00b      	beq.n	800d2dc <tcp_slowtmr+0x54c>
 800d2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d2ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2cc:	6912      	ldr	r2, [r2, #16]
 800d2ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2d0:	4610      	mov	r0, r2
 800d2d2:	4798      	blx	r3
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d2da:	e002      	b.n	800d2e2 <tcp_slowtmr+0x552>
 800d2dc:	2300      	movs	r3, #0
 800d2de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d2e2:	4b14      	ldr	r3, [pc, #80]	; (800d334 <tcp_slowtmr+0x5a4>)
 800d2e4:	781b      	ldrb	r3, [r3, #0]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d000      	beq.n	800d2ec <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d2ea:	e562      	b.n	800cdb2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d2ec:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d102      	bne.n	800d2fa <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d2f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2f6:	f004 f8c5 	bl	8011484 <tcp_output>
  while (pcb != NULL) {
 800d2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	f47f ad5e 	bne.w	800cdbe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d302:	2300      	movs	r3, #0
 800d304:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d306:	4b0c      	ldr	r3, [pc, #48]	; (800d338 <tcp_slowtmr+0x5a8>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d30c:	e069      	b.n	800d3e2 <tcp_slowtmr+0x652>
 800d30e:	bf00      	nop
 800d310:	2000b3e4 	.word	0x2000b3e4
 800d314:	000a4cb8 	.word	0x000a4cb8
 800d318:	10624dd3 	.word	0x10624dd3
 800d31c:	000124f8 	.word	0x000124f8
 800d320:	2000b3e0 	.word	0x2000b3e0
 800d324:	08017294 	.word	0x08017294
 800d328:	080176cc 	.word	0x080176cc
 800d32c:	080172d8 	.word	0x080172d8
 800d330:	080176f8 	.word	0x080176f8
 800d334:	2000b3dc 	.word	0x2000b3dc
 800d338:	2000b3f0 	.word	0x2000b3f0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33e:	7d1b      	ldrb	r3, [r3, #20]
 800d340:	2b0a      	cmp	r3, #10
 800d342:	d006      	beq.n	800d352 <tcp_slowtmr+0x5c2>
 800d344:	4b2a      	ldr	r3, [pc, #168]	; (800d3f0 <tcp_slowtmr+0x660>)
 800d346:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d34a:	492a      	ldr	r1, [pc, #168]	; (800d3f4 <tcp_slowtmr+0x664>)
 800d34c:	482a      	ldr	r0, [pc, #168]	; (800d3f8 <tcp_slowtmr+0x668>)
 800d34e:	f007 ff83 	bl	8015258 <iprintf>
    pcb_remove = 0;
 800d352:	2300      	movs	r3, #0
 800d354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d358:	4b28      	ldr	r3, [pc, #160]	; (800d3fc <tcp_slowtmr+0x66c>)
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35e:	6a1b      	ldr	r3, [r3, #32]
 800d360:	1ad3      	subs	r3, r2, r3
 800d362:	2bf0      	cmp	r3, #240	; 0xf0
 800d364:	d904      	bls.n	800d370 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d366:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d36a:	3301      	adds	r3, #1
 800d36c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d374:	2b00      	cmp	r3, #0
 800d376:	d02f      	beq.n	800d3d8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d378:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d37a:	f000 fc1b 	bl	800dbb4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d380:	2b00      	cmp	r3, #0
 800d382:	d010      	beq.n	800d3a6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d384:	4b1e      	ldr	r3, [pc, #120]	; (800d400 <tcp_slowtmr+0x670>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d106      	bne.n	800d39c <tcp_slowtmr+0x60c>
 800d38e:	4b18      	ldr	r3, [pc, #96]	; (800d3f0 <tcp_slowtmr+0x660>)
 800d390:	f240 52af 	movw	r2, #1455	; 0x5af
 800d394:	491b      	ldr	r1, [pc, #108]	; (800d404 <tcp_slowtmr+0x674>)
 800d396:	4818      	ldr	r0, [pc, #96]	; (800d3f8 <tcp_slowtmr+0x668>)
 800d398:	f007 ff5e 	bl	8015258 <iprintf>
        prev->next = pcb->next;
 800d39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39e:	68da      	ldr	r2, [r3, #12]
 800d3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3a2:	60da      	str	r2, [r3, #12]
 800d3a4:	e00f      	b.n	800d3c6 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d3a6:	4b16      	ldr	r3, [pc, #88]	; (800d400 <tcp_slowtmr+0x670>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d006      	beq.n	800d3be <tcp_slowtmr+0x62e>
 800d3b0:	4b0f      	ldr	r3, [pc, #60]	; (800d3f0 <tcp_slowtmr+0x660>)
 800d3b2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d3b6:	4914      	ldr	r1, [pc, #80]	; (800d408 <tcp_slowtmr+0x678>)
 800d3b8:	480f      	ldr	r0, [pc, #60]	; (800d3f8 <tcp_slowtmr+0x668>)
 800d3ba:	f007 ff4d 	bl	8015258 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	4a0f      	ldr	r2, [pc, #60]	; (800d400 <tcp_slowtmr+0x670>)
 800d3c4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d3d0:	69f8      	ldr	r0, [r7, #28]
 800d3d2:	f7fe ff8d 	bl	800c2f0 <tcp_free>
 800d3d6:	e004      	b.n	800d3e2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3da:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3de:	68db      	ldr	r3, [r3, #12]
 800d3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1a9      	bne.n	800d33c <tcp_slowtmr+0x5ac>
    }
  }
}
 800d3e8:	bf00      	nop
 800d3ea:	3730      	adds	r7, #48	; 0x30
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bdb0      	pop	{r4, r5, r7, pc}
 800d3f0:	08017294 	.word	0x08017294
 800d3f4:	08017724 	.word	0x08017724
 800d3f8:	080172d8 	.word	0x080172d8
 800d3fc:	2000b3e4 	.word	0x2000b3e4
 800d400:	2000b3f0 	.word	0x2000b3f0
 800d404:	08017754 	.word	0x08017754
 800d408:	0801777c 	.word	0x0801777c

0800d40c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d412:	4b2d      	ldr	r3, [pc, #180]	; (800d4c8 <tcp_fasttmr+0xbc>)
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	3301      	adds	r3, #1
 800d418:	b2da      	uxtb	r2, r3
 800d41a:	4b2b      	ldr	r3, [pc, #172]	; (800d4c8 <tcp_fasttmr+0xbc>)
 800d41c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d41e:	4b2b      	ldr	r3, [pc, #172]	; (800d4cc <tcp_fasttmr+0xc0>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d424:	e048      	b.n	800d4b8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	7f9a      	ldrb	r2, [r3, #30]
 800d42a:	4b27      	ldr	r3, [pc, #156]	; (800d4c8 <tcp_fasttmr+0xbc>)
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	429a      	cmp	r2, r3
 800d430:	d03f      	beq.n	800d4b2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d432:	4b25      	ldr	r3, [pc, #148]	; (800d4c8 <tcp_fasttmr+0xbc>)
 800d434:	781a      	ldrb	r2, [r3, #0]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	8b5b      	ldrh	r3, [r3, #26]
 800d43e:	f003 0301 	and.w	r3, r3, #1
 800d442:	2b00      	cmp	r3, #0
 800d444:	d010      	beq.n	800d468 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	8b5b      	ldrh	r3, [r3, #26]
 800d44a:	f043 0302 	orr.w	r3, r3, #2
 800d44e:	b29a      	uxth	r2, r3
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f004 f815 	bl	8011484 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	8b5b      	ldrh	r3, [r3, #26]
 800d45e:	f023 0303 	bic.w	r3, r3, #3
 800d462:	b29a      	uxth	r2, r3
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	8b5b      	ldrh	r3, [r3, #26]
 800d46c:	f003 0308 	and.w	r3, r3, #8
 800d470:	2b00      	cmp	r3, #0
 800d472:	d009      	beq.n	800d488 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	8b5b      	ldrh	r3, [r3, #26]
 800d478:	f023 0308 	bic.w	r3, r3, #8
 800d47c:	b29a      	uxth	r2, r3
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f7ff f8c4 	bl	800c610 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d492:	2b00      	cmp	r3, #0
 800d494:	d00a      	beq.n	800d4ac <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d496:	4b0e      	ldr	r3, [pc, #56]	; (800d4d0 <tcp_fasttmr+0xc4>)
 800d498:	2200      	movs	r2, #0
 800d49a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d49c:	6878      	ldr	r0, [r7, #4]
 800d49e:	f000 f819 	bl	800d4d4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d4a2:	4b0b      	ldr	r3, [pc, #44]	; (800d4d0 <tcp_fasttmr+0xc4>)
 800d4a4:	781b      	ldrb	r3, [r3, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d000      	beq.n	800d4ac <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d4aa:	e7b8      	b.n	800d41e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	607b      	str	r3, [r7, #4]
 800d4b0:	e002      	b.n	800d4b8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	68db      	ldr	r3, [r3, #12]
 800d4b6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d1b3      	bne.n	800d426 <tcp_fasttmr+0x1a>
    }
  }
}
 800d4be:	bf00      	nop
 800d4c0:	3708      	adds	r7, #8
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	200044ea 	.word	0x200044ea
 800d4cc:	2000b3e0 	.word	0x2000b3e0
 800d4d0:	2000b3dc 	.word	0x2000b3dc

0800d4d4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d4d4:	b590      	push	{r4, r7, lr}
 800d4d6:	b085      	sub	sp, #20
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d109      	bne.n	800d4f6 <tcp_process_refused_data+0x22>
 800d4e2:	4b37      	ldr	r3, [pc, #220]	; (800d5c0 <tcp_process_refused_data+0xec>)
 800d4e4:	f240 6209 	movw	r2, #1545	; 0x609
 800d4e8:	4936      	ldr	r1, [pc, #216]	; (800d5c4 <tcp_process_refused_data+0xf0>)
 800d4ea:	4837      	ldr	r0, [pc, #220]	; (800d5c8 <tcp_process_refused_data+0xf4>)
 800d4ec:	f007 feb4 	bl	8015258 <iprintf>
 800d4f0:	f06f 030f 	mvn.w	r3, #15
 800d4f4:	e060      	b.n	800d5b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4fa:	7b5b      	ldrb	r3, [r3, #13]
 800d4fc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d502:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2200      	movs	r2, #0
 800d508:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00b      	beq.n	800d52c <tcp_process_refused_data+0x58>
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6918      	ldr	r0, [r3, #16]
 800d51e:	2300      	movs	r3, #0
 800d520:	68ba      	ldr	r2, [r7, #8]
 800d522:	6879      	ldr	r1, [r7, #4]
 800d524:	47a0      	blx	r4
 800d526:	4603      	mov	r3, r0
 800d528:	73fb      	strb	r3, [r7, #15]
 800d52a:	e007      	b.n	800d53c <tcp_process_refused_data+0x68>
 800d52c:	2300      	movs	r3, #0
 800d52e:	68ba      	ldr	r2, [r7, #8]
 800d530:	6879      	ldr	r1, [r7, #4]
 800d532:	2000      	movs	r0, #0
 800d534:	f000 f8c0 	bl	800d6b8 <tcp_recv_null>
 800d538:	4603      	mov	r3, r0
 800d53a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d53c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d12a      	bne.n	800d59a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d544:	7bbb      	ldrb	r3, [r7, #14]
 800d546:	f003 0320 	and.w	r3, r3, #32
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d033      	beq.n	800d5b6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d552:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d556:	d005      	beq.n	800d564 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d55c:	3301      	adds	r3, #1
 800d55e:	b29a      	uxth	r2, r3
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d00b      	beq.n	800d586 <tcp_process_refused_data+0xb2>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6918      	ldr	r0, [r3, #16]
 800d578:	2300      	movs	r3, #0
 800d57a:	2200      	movs	r2, #0
 800d57c:	6879      	ldr	r1, [r7, #4]
 800d57e:	47a0      	blx	r4
 800d580:	4603      	mov	r3, r0
 800d582:	73fb      	strb	r3, [r7, #15]
 800d584:	e001      	b.n	800d58a <tcp_process_refused_data+0xb6>
 800d586:	2300      	movs	r3, #0
 800d588:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d58a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d58e:	f113 0f0d 	cmn.w	r3, #13
 800d592:	d110      	bne.n	800d5b6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d594:	f06f 030c 	mvn.w	r3, #12
 800d598:	e00e      	b.n	800d5b8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d59a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d59e:	f113 0f0d 	cmn.w	r3, #13
 800d5a2:	d102      	bne.n	800d5aa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d5a4:	f06f 030c 	mvn.w	r3, #12
 800d5a8:	e006      	b.n	800d5b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	68ba      	ldr	r2, [r7, #8]
 800d5ae:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d5b0:	f06f 0304 	mvn.w	r3, #4
 800d5b4:	e000      	b.n	800d5b8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d5b6:	2300      	movs	r3, #0
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3714      	adds	r7, #20
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd90      	pop	{r4, r7, pc}
 800d5c0:	08017294 	.word	0x08017294
 800d5c4:	080177a4 	.word	0x080177a4
 800d5c8:	080172d8 	.word	0x080172d8

0800d5cc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d5d4:	e007      	b.n	800d5e6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 f809 	bl	800d5f4 <tcp_seg_free>
    seg = next;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d1f4      	bne.n	800d5d6 <tcp_segs_free+0xa>
  }
}
 800d5ec:	bf00      	nop
 800d5ee:	3710      	adds	r7, #16
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d00c      	beq.n	800d61c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d004      	beq.n	800d614 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	685b      	ldr	r3, [r3, #4]
 800d60e:	4618      	mov	r0, r3
 800d610:	f7fe fbc2 	bl	800bd98 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d614:	6879      	ldr	r1, [r7, #4]
 800d616:	2003      	movs	r0, #3
 800d618:	f7fd fd1e 	bl	800b058 <memp_free>
  }
}
 800d61c:	bf00      	nop
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b082      	sub	sp, #8
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	460b      	mov	r3, r1
 800d62e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d107      	bne.n	800d646 <tcp_setprio+0x22>
 800d636:	4b07      	ldr	r3, [pc, #28]	; (800d654 <tcp_setprio+0x30>)
 800d638:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800d63c:	4906      	ldr	r1, [pc, #24]	; (800d658 <tcp_setprio+0x34>)
 800d63e:	4807      	ldr	r0, [pc, #28]	; (800d65c <tcp_setprio+0x38>)
 800d640:	f007 fe0a 	bl	8015258 <iprintf>
 800d644:	e002      	b.n	800d64c <tcp_setprio+0x28>

  pcb->prio = prio;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	78fa      	ldrb	r2, [r7, #3]
 800d64a:	755a      	strb	r2, [r3, #21]
}
 800d64c:	3708      	adds	r7, #8
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
 800d652:	bf00      	nop
 800d654:	08017294 	.word	0x08017294
 800d658:	080177cc 	.word	0x080177cc
 800d65c:	080172d8 	.word	0x080172d8

0800d660 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d106      	bne.n	800d67c <tcp_seg_copy+0x1c>
 800d66e:	4b0f      	ldr	r3, [pc, #60]	; (800d6ac <tcp_seg_copy+0x4c>)
 800d670:	f240 6282 	movw	r2, #1666	; 0x682
 800d674:	490e      	ldr	r1, [pc, #56]	; (800d6b0 <tcp_seg_copy+0x50>)
 800d676:	480f      	ldr	r0, [pc, #60]	; (800d6b4 <tcp_seg_copy+0x54>)
 800d678:	f007 fdee 	bl	8015258 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d67c:	2003      	movs	r0, #3
 800d67e:	f7fd fc99 	bl	800afb4 <memp_malloc>
 800d682:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d101      	bne.n	800d68e <tcp_seg_copy+0x2e>
    return NULL;
 800d68a:	2300      	movs	r3, #0
 800d68c:	e00a      	b.n	800d6a4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d68e:	2210      	movs	r2, #16
 800d690:	6879      	ldr	r1, [r7, #4]
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f007 fdb3 	bl	80151fe <memcpy>
  pbuf_ref(cseg->p);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	4618      	mov	r0, r3
 800d69e:	f7fe fc21 	bl	800bee4 <pbuf_ref>
  return cseg;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}
 800d6ac:	08017294 	.word	0x08017294
 800d6b0:	080177e8 	.word	0x080177e8
 800d6b4:	080172d8 	.word	0x080172d8

0800d6b8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b084      	sub	sp, #16
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
 800d6c4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d109      	bne.n	800d6e0 <tcp_recv_null+0x28>
 800d6cc:	4b12      	ldr	r3, [pc, #72]	; (800d718 <tcp_recv_null+0x60>)
 800d6ce:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d6d2:	4912      	ldr	r1, [pc, #72]	; (800d71c <tcp_recv_null+0x64>)
 800d6d4:	4812      	ldr	r0, [pc, #72]	; (800d720 <tcp_recv_null+0x68>)
 800d6d6:	f007 fdbf 	bl	8015258 <iprintf>
 800d6da:	f06f 030f 	mvn.w	r3, #15
 800d6de:	e016      	b.n	800d70e <tcp_recv_null+0x56>

  if (p != NULL) {
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d009      	beq.n	800d6fa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	891b      	ldrh	r3, [r3, #8]
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	68b8      	ldr	r0, [r7, #8]
 800d6ee:	f7ff fab9 	bl	800cc64 <tcp_recved>
    pbuf_free(p);
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f7fe fb50 	bl	800bd98 <pbuf_free>
 800d6f8:	e008      	b.n	800d70c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d6fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d104      	bne.n	800d70c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d702:	68b8      	ldr	r0, [r7, #8]
 800d704:	f7fe ffea 	bl	800c6dc <tcp_close>
 800d708:	4603      	mov	r3, r0
 800d70a:	e000      	b.n	800d70e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d70c:	2300      	movs	r3, #0
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3710      	adds	r7, #16
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
 800d716:	bf00      	nop
 800d718:	08017294 	.word	0x08017294
 800d71c:	08017804 	.word	0x08017804
 800d720:	080172d8 	.word	0x080172d8

0800d724 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b086      	sub	sp, #24
 800d728:	af00      	add	r7, sp, #0
 800d72a:	4603      	mov	r3, r0
 800d72c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d72e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d732:	2b00      	cmp	r3, #0
 800d734:	db01      	blt.n	800d73a <tcp_kill_prio+0x16>
 800d736:	79fb      	ldrb	r3, [r7, #7]
 800d738:	e000      	b.n	800d73c <tcp_kill_prio+0x18>
 800d73a:	237f      	movs	r3, #127	; 0x7f
 800d73c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d73e:	7afb      	ldrb	r3, [r7, #11]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d034      	beq.n	800d7ae <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d744:	7afb      	ldrb	r3, [r7, #11]
 800d746:	3b01      	subs	r3, #1
 800d748:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d74a:	2300      	movs	r3, #0
 800d74c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d74e:	2300      	movs	r3, #0
 800d750:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d752:	4b19      	ldr	r3, [pc, #100]	; (800d7b8 <tcp_kill_prio+0x94>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	617b      	str	r3, [r7, #20]
 800d758:	e01f      	b.n	800d79a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	7d5b      	ldrb	r3, [r3, #21]
 800d75e:	7afa      	ldrb	r2, [r7, #11]
 800d760:	429a      	cmp	r2, r3
 800d762:	d80c      	bhi.n	800d77e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d768:	7afa      	ldrb	r2, [r7, #11]
 800d76a:	429a      	cmp	r2, r3
 800d76c:	d112      	bne.n	800d794 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d76e:	4b13      	ldr	r3, [pc, #76]	; (800d7bc <tcp_kill_prio+0x98>)
 800d770:	681a      	ldr	r2, [r3, #0]
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	6a1b      	ldr	r3, [r3, #32]
 800d776:	1ad3      	subs	r3, r2, r3
 800d778:	68fa      	ldr	r2, [r7, #12]
 800d77a:	429a      	cmp	r2, r3
 800d77c:	d80a      	bhi.n	800d794 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d77e:	4b0f      	ldr	r3, [pc, #60]	; (800d7bc <tcp_kill_prio+0x98>)
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	6a1b      	ldr	r3, [r3, #32]
 800d786:	1ad3      	subs	r3, r2, r3
 800d788:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	7d5b      	ldrb	r3, [r3, #21]
 800d792:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	68db      	ldr	r3, [r3, #12]
 800d798:	617b      	str	r3, [r7, #20]
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d1dc      	bne.n	800d75a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d004      	beq.n	800d7b0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d7a6:	6938      	ldr	r0, [r7, #16]
 800d7a8:	f7ff f882 	bl	800c8b0 <tcp_abort>
 800d7ac:	e000      	b.n	800d7b0 <tcp_kill_prio+0x8c>
    return;
 800d7ae:	bf00      	nop
  }
}
 800d7b0:	3718      	adds	r7, #24
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	2000b3e0 	.word	0x2000b3e0
 800d7bc:	2000b3e4 	.word	0x2000b3e4

0800d7c0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b086      	sub	sp, #24
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d7ca:	79fb      	ldrb	r3, [r7, #7]
 800d7cc:	2b08      	cmp	r3, #8
 800d7ce:	d009      	beq.n	800d7e4 <tcp_kill_state+0x24>
 800d7d0:	79fb      	ldrb	r3, [r7, #7]
 800d7d2:	2b09      	cmp	r3, #9
 800d7d4:	d006      	beq.n	800d7e4 <tcp_kill_state+0x24>
 800d7d6:	4b1a      	ldr	r3, [pc, #104]	; (800d840 <tcp_kill_state+0x80>)
 800d7d8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d7dc:	4919      	ldr	r1, [pc, #100]	; (800d844 <tcp_kill_state+0x84>)
 800d7de:	481a      	ldr	r0, [pc, #104]	; (800d848 <tcp_kill_state+0x88>)
 800d7e0:	f007 fd3a 	bl	8015258 <iprintf>

  inactivity = 0;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d7ec:	4b17      	ldr	r3, [pc, #92]	; (800d84c <tcp_kill_state+0x8c>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	617b      	str	r3, [r7, #20]
 800d7f2:	e017      	b.n	800d824 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	7d1b      	ldrb	r3, [r3, #20]
 800d7f8:	79fa      	ldrb	r2, [r7, #7]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d10f      	bne.n	800d81e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d7fe:	4b14      	ldr	r3, [pc, #80]	; (800d850 <tcp_kill_state+0x90>)
 800d800:	681a      	ldr	r2, [r3, #0]
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	6a1b      	ldr	r3, [r3, #32]
 800d806:	1ad3      	subs	r3, r2, r3
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d807      	bhi.n	800d81e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d80e:	4b10      	ldr	r3, [pc, #64]	; (800d850 <tcp_kill_state+0x90>)
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	6a1b      	ldr	r3, [r3, #32]
 800d816:	1ad3      	subs	r3, r2, r3
 800d818:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d81a:	697b      	ldr	r3, [r7, #20]
 800d81c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d81e:	697b      	ldr	r3, [r7, #20]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	617b      	str	r3, [r7, #20]
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d1e4      	bne.n	800d7f4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d003      	beq.n	800d838 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d830:	2100      	movs	r1, #0
 800d832:	6938      	ldr	r0, [r7, #16]
 800d834:	f7fe ff7e 	bl	800c734 <tcp_abandon>
  }
}
 800d838:	bf00      	nop
 800d83a:	3718      	adds	r7, #24
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	08017294 	.word	0x08017294
 800d844:	08017820 	.word	0x08017820
 800d848:	080172d8 	.word	0x080172d8
 800d84c:	2000b3e0 	.word	0x2000b3e0
 800d850:	2000b3e4 	.word	0x2000b3e4

0800d854 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d85a:	2300      	movs	r3, #0
 800d85c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d85e:	2300      	movs	r3, #0
 800d860:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d862:	4b12      	ldr	r3, [pc, #72]	; (800d8ac <tcp_kill_timewait+0x58>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	60fb      	str	r3, [r7, #12]
 800d868:	e012      	b.n	800d890 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d86a:	4b11      	ldr	r3, [pc, #68]	; (800d8b0 <tcp_kill_timewait+0x5c>)
 800d86c:	681a      	ldr	r2, [r3, #0]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	6a1b      	ldr	r3, [r3, #32]
 800d872:	1ad3      	subs	r3, r2, r3
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	429a      	cmp	r2, r3
 800d878:	d807      	bhi.n	800d88a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d87a:	4b0d      	ldr	r3, [pc, #52]	; (800d8b0 <tcp_kill_timewait+0x5c>)
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	6a1b      	ldr	r3, [r3, #32]
 800d882:	1ad3      	subs	r3, r2, r3
 800d884:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	60fb      	str	r3, [r7, #12]
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d1e9      	bne.n	800d86a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d002      	beq.n	800d8a2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d89c:	68b8      	ldr	r0, [r7, #8]
 800d89e:	f7ff f807 	bl	800c8b0 <tcp_abort>
  }
}
 800d8a2:	bf00      	nop
 800d8a4:	3710      	adds	r7, #16
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd80      	pop	{r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	2000b3f0 	.word	0x2000b3f0
 800d8b0:	2000b3e4 	.word	0x2000b3e4

0800d8b4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b082      	sub	sp, #8
 800d8b8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d8ba:	4b10      	ldr	r3, [pc, #64]	; (800d8fc <tcp_handle_closepend+0x48>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d8c0:	e014      	b.n	800d8ec <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	68db      	ldr	r3, [r3, #12]
 800d8c6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	8b5b      	ldrh	r3, [r3, #26]
 800d8cc:	f003 0308 	and.w	r3, r3, #8
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d009      	beq.n	800d8e8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	8b5b      	ldrh	r3, [r3, #26]
 800d8d8:	f023 0308 	bic.w	r3, r3, #8
 800d8dc:	b29a      	uxth	r2, r3
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d8e2:	6878      	ldr	r0, [r7, #4]
 800d8e4:	f7fe fe94 	bl	800c610 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d1e7      	bne.n	800d8c2 <tcp_handle_closepend+0xe>
  }
}
 800d8f2:	bf00      	nop
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	2000b3e0 	.word	0x2000b3e0

0800d900 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	4603      	mov	r3, r0
 800d908:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d90a:	2001      	movs	r0, #1
 800d90c:	f7fd fb52 	bl	800afb4 <memp_malloc>
 800d910:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d126      	bne.n	800d966 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d918:	f7ff ffcc 	bl	800d8b4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d91c:	f7ff ff9a 	bl	800d854 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d920:	2001      	movs	r0, #1
 800d922:	f7fd fb47 	bl	800afb4 <memp_malloc>
 800d926:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d11b      	bne.n	800d966 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d92e:	2009      	movs	r0, #9
 800d930:	f7ff ff46 	bl	800d7c0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d934:	2001      	movs	r0, #1
 800d936:	f7fd fb3d 	bl	800afb4 <memp_malloc>
 800d93a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d111      	bne.n	800d966 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d942:	2008      	movs	r0, #8
 800d944:	f7ff ff3c 	bl	800d7c0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d948:	2001      	movs	r0, #1
 800d94a:	f7fd fb33 	bl	800afb4 <memp_malloc>
 800d94e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d107      	bne.n	800d966 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d956:	79fb      	ldrb	r3, [r7, #7]
 800d958:	4618      	mov	r0, r3
 800d95a:	f7ff fee3 	bl	800d724 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d95e:	2001      	movs	r0, #1
 800d960:	f7fd fb28 	bl	800afb4 <memp_malloc>
 800d964:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d03f      	beq.n	800d9ec <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d96c:	229c      	movs	r2, #156	; 0x9c
 800d96e:	2100      	movs	r1, #0
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f007 fc68 	bl	8015246 <memset>
    pcb->prio = prio;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	79fa      	ldrb	r2, [r7, #7]
 800d97a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d982:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d98c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	22ff      	movs	r2, #255	; 0xff
 800d99a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d9a2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2206      	movs	r2, #6
 800d9a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	2206      	movs	r2, #6
 800d9b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9b8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2201      	movs	r2, #1
 800d9be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d9c2:	4b0d      	ldr	r3, [pc, #52]	; (800d9f8 <tcp_alloc+0xf8>)
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d9ca:	4b0c      	ldr	r3, [pc, #48]	; (800d9fc <tcp_alloc+0xfc>)
 800d9cc:	781a      	ldrb	r2, [r3, #0]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d9d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	4a08      	ldr	r2, [pc, #32]	; (800da00 <tcp_alloc+0x100>)
 800d9e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	4a07      	ldr	r2, [pc, #28]	; (800da04 <tcp_alloc+0x104>)
 800d9e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3710      	adds	r7, #16
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	2000b3e4 	.word	0x2000b3e4
 800d9fc:	200044ea 	.word	0x200044ea
 800da00:	0800d6b9 	.word	0x0800d6b9
 800da04:	006ddd00 	.word	0x006ddd00

0800da08 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800da0c:	2040      	movs	r0, #64	; 0x40
 800da0e:	f7ff ff77 	bl	800d900 <tcp_alloc>
 800da12:	4603      	mov	r3, r0
}
 800da14:	4618      	mov	r0, r3
 800da16:	bd80      	pop	{r7, pc}

0800da18 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	4603      	mov	r3, r0
 800da20:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800da22:	2040      	movs	r0, #64	; 0x40
 800da24:	f7ff ff6c 	bl	800d900 <tcp_alloc>
 800da28:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800da2a:	68fb      	ldr	r3, [r7, #12]
}
 800da2c:	4618      	mov	r0, r3
 800da2e:	3710      	adds	r7, #16
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d002      	beq.n	800da4a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	683a      	ldr	r2, [r7, #0]
 800da48:	611a      	str	r2, [r3, #16]
  }
}
 800da4a:	bf00      	nop
 800da4c:	370c      	adds	r7, #12
 800da4e:	46bd      	mov	sp, r7
 800da50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da54:	4770      	bx	lr
	...

0800da58 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b082      	sub	sp, #8
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d00e      	beq.n	800da86 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	7d1b      	ldrb	r3, [r3, #20]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d106      	bne.n	800da7e <tcp_recv+0x26>
 800da70:	4b07      	ldr	r3, [pc, #28]	; (800da90 <tcp_recv+0x38>)
 800da72:	f240 72df 	movw	r2, #2015	; 0x7df
 800da76:	4907      	ldr	r1, [pc, #28]	; (800da94 <tcp_recv+0x3c>)
 800da78:	4807      	ldr	r0, [pc, #28]	; (800da98 <tcp_recv+0x40>)
 800da7a:	f007 fbed 	bl	8015258 <iprintf>
    pcb->recv = recv;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	683a      	ldr	r2, [r7, #0]
 800da82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800da86:	bf00      	nop
 800da88:	3708      	adds	r7, #8
 800da8a:	46bd      	mov	sp, r7
 800da8c:	bd80      	pop	{r7, pc}
 800da8e:	bf00      	nop
 800da90:	08017294 	.word	0x08017294
 800da94:	08017830 	.word	0x08017830
 800da98:	080172d8 	.word	0x080172d8

0800da9c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800da9c:	b580      	push	{r7, lr}
 800da9e:	b082      	sub	sp, #8
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d00e      	beq.n	800daca <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	7d1b      	ldrb	r3, [r3, #20]
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d106      	bne.n	800dac2 <tcp_sent+0x26>
 800dab4:	4b07      	ldr	r3, [pc, #28]	; (800dad4 <tcp_sent+0x38>)
 800dab6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800daba:	4907      	ldr	r1, [pc, #28]	; (800dad8 <tcp_sent+0x3c>)
 800dabc:	4807      	ldr	r0, [pc, #28]	; (800dadc <tcp_sent+0x40>)
 800dabe:	f007 fbcb 	bl	8015258 <iprintf>
    pcb->sent = sent;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	683a      	ldr	r2, [r7, #0]
 800dac6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800daca:	bf00      	nop
 800dacc:	3708      	adds	r7, #8
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop
 800dad4:	08017294 	.word	0x08017294
 800dad8:	08017858 	.word	0x08017858
 800dadc:	080172d8 	.word	0x080172d8

0800dae0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d00e      	beq.n	800db0e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	7d1b      	ldrb	r3, [r3, #20]
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d106      	bne.n	800db06 <tcp_err+0x26>
 800daf8:	4b07      	ldr	r3, [pc, #28]	; (800db18 <tcp_err+0x38>)
 800dafa:	f640 020d 	movw	r2, #2061	; 0x80d
 800dafe:	4907      	ldr	r1, [pc, #28]	; (800db1c <tcp_err+0x3c>)
 800db00:	4807      	ldr	r0, [pc, #28]	; (800db20 <tcp_err+0x40>)
 800db02:	f007 fba9 	bl	8015258 <iprintf>
    pcb->errf = err;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	683a      	ldr	r2, [r7, #0]
 800db0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800db0e:	bf00      	nop
 800db10:	3708      	adds	r7, #8
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	08017294 	.word	0x08017294
 800db1c:	08017880 	.word	0x08017880
 800db20:	080172d8 	.word	0x080172d8

0800db24 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800db24:	b480      	push	{r7}
 800db26:	b085      	sub	sp, #20
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d008      	beq.n	800db46 <tcp_accept+0x22>
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	7d1b      	ldrb	r3, [r3, #20]
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d104      	bne.n	800db46 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	683a      	ldr	r2, [r7, #0]
 800db44:	619a      	str	r2, [r3, #24]
  }
}
 800db46:	bf00      	nop
 800db48:	3714      	adds	r7, #20
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr
	...

0800db54 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	60b9      	str	r1, [r7, #8]
 800db5e:	4613      	mov	r3, r2
 800db60:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d107      	bne.n	800db78 <tcp_poll+0x24>
 800db68:	4b0e      	ldr	r3, [pc, #56]	; (800dba4 <tcp_poll+0x50>)
 800db6a:	f640 023d 	movw	r2, #2109	; 0x83d
 800db6e:	490e      	ldr	r1, [pc, #56]	; (800dba8 <tcp_poll+0x54>)
 800db70:	480e      	ldr	r0, [pc, #56]	; (800dbac <tcp_poll+0x58>)
 800db72:	f007 fb71 	bl	8015258 <iprintf>
 800db76:	e011      	b.n	800db9c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	7d1b      	ldrb	r3, [r3, #20]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d106      	bne.n	800db8e <tcp_poll+0x3a>
 800db80:	4b08      	ldr	r3, [pc, #32]	; (800dba4 <tcp_poll+0x50>)
 800db82:	f640 023e 	movw	r2, #2110	; 0x83e
 800db86:	490a      	ldr	r1, [pc, #40]	; (800dbb0 <tcp_poll+0x5c>)
 800db88:	4808      	ldr	r0, [pc, #32]	; (800dbac <tcp_poll+0x58>)
 800db8a:	f007 fb65 	bl	8015258 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	68ba      	ldr	r2, [r7, #8]
 800db92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	79fa      	ldrb	r2, [r7, #7]
 800db9a:	775a      	strb	r2, [r3, #29]
}
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	08017294 	.word	0x08017294
 800dba8:	080178a8 	.word	0x080178a8
 800dbac:	080172d8 	.word	0x080172d8
 800dbb0:	080178c0 	.word	0x080178c0

0800dbb4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b082      	sub	sp, #8
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d107      	bne.n	800dbd2 <tcp_pcb_purge+0x1e>
 800dbc2:	4b21      	ldr	r3, [pc, #132]	; (800dc48 <tcp_pcb_purge+0x94>)
 800dbc4:	f640 0251 	movw	r2, #2129	; 0x851
 800dbc8:	4920      	ldr	r1, [pc, #128]	; (800dc4c <tcp_pcb_purge+0x98>)
 800dbca:	4821      	ldr	r0, [pc, #132]	; (800dc50 <tcp_pcb_purge+0x9c>)
 800dbcc:	f007 fb44 	bl	8015258 <iprintf>
 800dbd0:	e037      	b.n	800dc42 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	7d1b      	ldrb	r3, [r3, #20]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d033      	beq.n	800dc42 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800dbde:	2b0a      	cmp	r3, #10
 800dbe0:	d02f      	beq.n	800dc42 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d02b      	beq.n	800dc42 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d007      	beq.n	800dc02 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f7fe f8ce 	bl	800bd98 <pbuf_free>
      pcb->refused_data = NULL;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2200      	movs	r2, #0
 800dc00:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d002      	beq.n	800dc10 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 f986 	bl	800df1c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc16:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7ff fcd5 	bl	800d5cc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7ff fcd0 	bl	800d5cc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	66da      	str	r2, [r3, #108]	; 0x6c
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800dc42:	3708      	adds	r7, #8
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}
 800dc48:	08017294 	.word	0x08017294
 800dc4c:	080178e0 	.word	0x080178e0
 800dc50:	080172d8 	.word	0x080172d8

0800dc54 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b084      	sub	sp, #16
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d106      	bne.n	800dc72 <tcp_pcb_remove+0x1e>
 800dc64:	4b3e      	ldr	r3, [pc, #248]	; (800dd60 <tcp_pcb_remove+0x10c>)
 800dc66:	f640 0283 	movw	r2, #2179	; 0x883
 800dc6a:	493e      	ldr	r1, [pc, #248]	; (800dd64 <tcp_pcb_remove+0x110>)
 800dc6c:	483e      	ldr	r0, [pc, #248]	; (800dd68 <tcp_pcb_remove+0x114>)
 800dc6e:	f007 faf3 	bl	8015258 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d106      	bne.n	800dc86 <tcp_pcb_remove+0x32>
 800dc78:	4b39      	ldr	r3, [pc, #228]	; (800dd60 <tcp_pcb_remove+0x10c>)
 800dc7a:	f640 0284 	movw	r2, #2180	; 0x884
 800dc7e:	493b      	ldr	r1, [pc, #236]	; (800dd6c <tcp_pcb_remove+0x118>)
 800dc80:	4839      	ldr	r0, [pc, #228]	; (800dd68 <tcp_pcb_remove+0x114>)
 800dc82:	f007 fae9 	bl	8015258 <iprintf>

  TCP_RMV(pcblist, pcb);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	683a      	ldr	r2, [r7, #0]
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d105      	bne.n	800dc9c <tcp_pcb_remove+0x48>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	68da      	ldr	r2, [r3, #12]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	601a      	str	r2, [r3, #0]
 800dc9a:	e013      	b.n	800dcc4 <tcp_pcb_remove+0x70>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	60fb      	str	r3, [r7, #12]
 800dca2:	e00c      	b.n	800dcbe <tcp_pcb_remove+0x6a>
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	683a      	ldr	r2, [r7, #0]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d104      	bne.n	800dcb8 <tcp_pcb_remove+0x64>
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	68da      	ldr	r2, [r3, #12]
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	60da      	str	r2, [r3, #12]
 800dcb6:	e005      	b.n	800dcc4 <tcp_pcb_remove+0x70>
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	68db      	ldr	r3, [r3, #12]
 800dcbc:	60fb      	str	r3, [r7, #12]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d1ef      	bne.n	800dca4 <tcp_pcb_remove+0x50>
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800dcca:	6838      	ldr	r0, [r7, #0]
 800dccc:	f7ff ff72 	bl	800dbb4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	7d1b      	ldrb	r3, [r3, #20]
 800dcd4:	2b0a      	cmp	r3, #10
 800dcd6:	d013      	beq.n	800dd00 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d00f      	beq.n	800dd00 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	8b5b      	ldrh	r3, [r3, #26]
 800dce4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d009      	beq.n	800dd00 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	8b5b      	ldrh	r3, [r3, #26]
 800dcf0:	f043 0302 	orr.w	r3, r3, #2
 800dcf4:	b29a      	uxth	r2, r3
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dcfa:	6838      	ldr	r0, [r7, #0]
 800dcfc:	f003 fbc2 	bl	8011484 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	7d1b      	ldrb	r3, [r3, #20]
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d020      	beq.n	800dd4a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d006      	beq.n	800dd1e <tcp_pcb_remove+0xca>
 800dd10:	4b13      	ldr	r3, [pc, #76]	; (800dd60 <tcp_pcb_remove+0x10c>)
 800dd12:	f640 0293 	movw	r2, #2195	; 0x893
 800dd16:	4916      	ldr	r1, [pc, #88]	; (800dd70 <tcp_pcb_remove+0x11c>)
 800dd18:	4813      	ldr	r0, [pc, #76]	; (800dd68 <tcp_pcb_remove+0x114>)
 800dd1a:	f007 fa9d 	bl	8015258 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d006      	beq.n	800dd34 <tcp_pcb_remove+0xe0>
 800dd26:	4b0e      	ldr	r3, [pc, #56]	; (800dd60 <tcp_pcb_remove+0x10c>)
 800dd28:	f640 0294 	movw	r2, #2196	; 0x894
 800dd2c:	4911      	ldr	r1, [pc, #68]	; (800dd74 <tcp_pcb_remove+0x120>)
 800dd2e:	480e      	ldr	r0, [pc, #56]	; (800dd68 <tcp_pcb_remove+0x114>)
 800dd30:	f007 fa92 	bl	8015258 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d006      	beq.n	800dd4a <tcp_pcb_remove+0xf6>
 800dd3c:	4b08      	ldr	r3, [pc, #32]	; (800dd60 <tcp_pcb_remove+0x10c>)
 800dd3e:	f640 0296 	movw	r2, #2198	; 0x896
 800dd42:	490d      	ldr	r1, [pc, #52]	; (800dd78 <tcp_pcb_remove+0x124>)
 800dd44:	4808      	ldr	r0, [pc, #32]	; (800dd68 <tcp_pcb_remove+0x114>)
 800dd46:	f007 fa87 	bl	8015258 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	2200      	movs	r2, #0
 800dd54:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800dd56:	bf00      	nop
 800dd58:	3710      	adds	r7, #16
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	08017294 	.word	0x08017294
 800dd64:	080178fc 	.word	0x080178fc
 800dd68:	080172d8 	.word	0x080172d8
 800dd6c:	08017918 	.word	0x08017918
 800dd70:	08017938 	.word	0x08017938
 800dd74:	08017950 	.word	0x08017950
 800dd78:	0801796c 	.word	0x0801796c

0800dd7c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d106      	bne.n	800dd98 <tcp_next_iss+0x1c>
 800dd8a:	4b0a      	ldr	r3, [pc, #40]	; (800ddb4 <tcp_next_iss+0x38>)
 800dd8c:	f640 02af 	movw	r2, #2223	; 0x8af
 800dd90:	4909      	ldr	r1, [pc, #36]	; (800ddb8 <tcp_next_iss+0x3c>)
 800dd92:	480a      	ldr	r0, [pc, #40]	; (800ddbc <tcp_next_iss+0x40>)
 800dd94:	f007 fa60 	bl	8015258 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800dd98:	4b09      	ldr	r3, [pc, #36]	; (800ddc0 <tcp_next_iss+0x44>)
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	4b09      	ldr	r3, [pc, #36]	; (800ddc4 <tcp_next_iss+0x48>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4413      	add	r3, r2
 800dda2:	4a07      	ldr	r2, [pc, #28]	; (800ddc0 <tcp_next_iss+0x44>)
 800dda4:	6013      	str	r3, [r2, #0]
  return iss;
 800dda6:	4b06      	ldr	r3, [pc, #24]	; (800ddc0 <tcp_next_iss+0x44>)
 800dda8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3708      	adds	r7, #8
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	08017294 	.word	0x08017294
 800ddb8:	08017984 	.word	0x08017984
 800ddbc:	080172d8 	.word	0x080172d8
 800ddc0:	20000014 	.word	0x20000014
 800ddc4:	2000b3e4 	.word	0x2000b3e4

0800ddc8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b086      	sub	sp, #24
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	607a      	str	r2, [r7, #4]
 800ddd4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d106      	bne.n	800ddea <tcp_eff_send_mss_netif+0x22>
 800dddc:	4b14      	ldr	r3, [pc, #80]	; (800de30 <tcp_eff_send_mss_netif+0x68>)
 800ddde:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800dde2:	4914      	ldr	r1, [pc, #80]	; (800de34 <tcp_eff_send_mss_netif+0x6c>)
 800dde4:	4814      	ldr	r0, [pc, #80]	; (800de38 <tcp_eff_send_mss_netif+0x70>)
 800dde6:	f007 fa37 	bl	8015258 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d101      	bne.n	800ddf4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ddf0:	89fb      	ldrh	r3, [r7, #14]
 800ddf2:	e019      	b.n	800de28 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ddf8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ddfa:	8afb      	ldrh	r3, [r7, #22]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d012      	beq.n	800de26 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800de00:	2328      	movs	r3, #40	; 0x28
 800de02:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800de04:	8afa      	ldrh	r2, [r7, #22]
 800de06:	8abb      	ldrh	r3, [r7, #20]
 800de08:	429a      	cmp	r2, r3
 800de0a:	d904      	bls.n	800de16 <tcp_eff_send_mss_netif+0x4e>
 800de0c:	8afa      	ldrh	r2, [r7, #22]
 800de0e:	8abb      	ldrh	r3, [r7, #20]
 800de10:	1ad3      	subs	r3, r2, r3
 800de12:	b29b      	uxth	r3, r3
 800de14:	e000      	b.n	800de18 <tcp_eff_send_mss_netif+0x50>
 800de16:	2300      	movs	r3, #0
 800de18:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800de1a:	8a7a      	ldrh	r2, [r7, #18]
 800de1c:	89fb      	ldrh	r3, [r7, #14]
 800de1e:	4293      	cmp	r3, r2
 800de20:	bf28      	it	cs
 800de22:	4613      	movcs	r3, r2
 800de24:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800de26:	89fb      	ldrh	r3, [r7, #14]
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3718      	adds	r7, #24
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	08017294 	.word	0x08017294
 800de34:	080179a0 	.word	0x080179a0
 800de38:	080172d8 	.word	0x080172d8

0800de3c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800de46:	683b      	ldr	r3, [r7, #0]
 800de48:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d119      	bne.n	800de84 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800de50:	4b10      	ldr	r3, [pc, #64]	; (800de94 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800de52:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800de56:	4910      	ldr	r1, [pc, #64]	; (800de98 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800de58:	4810      	ldr	r0, [pc, #64]	; (800de9c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800de5a:	f007 f9fd 	bl	8015258 <iprintf>

  while (pcb != NULL) {
 800de5e:	e011      	b.n	800de84 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681a      	ldr	r2, [r3, #0]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	429a      	cmp	r2, r3
 800de6a:	d108      	bne.n	800de7e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	68db      	ldr	r3, [r3, #12]
 800de70:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800de72:	68f8      	ldr	r0, [r7, #12]
 800de74:	f7fe fd1c 	bl	800c8b0 <tcp_abort>
      pcb = next;
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	60fb      	str	r3, [r7, #12]
 800de7c:	e002      	b.n	800de84 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	68db      	ldr	r3, [r3, #12]
 800de82:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d1ea      	bne.n	800de60 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800de8a:	bf00      	nop
 800de8c:	3710      	adds	r7, #16
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}
 800de92:	bf00      	nop
 800de94:	08017294 	.word	0x08017294
 800de98:	080179c8 	.word	0x080179c8
 800de9c:	080172d8 	.word	0x080172d8

0800dea0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d02a      	beq.n	800df06 <tcp_netif_ip_addr_changed+0x66>
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d026      	beq.n	800df06 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800deb8:	4b15      	ldr	r3, [pc, #84]	; (800df10 <tcp_netif_ip_addr_changed+0x70>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	4619      	mov	r1, r3
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f7ff ffbc 	bl	800de3c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dec4:	4b13      	ldr	r3, [pc, #76]	; (800df14 <tcp_netif_ip_addr_changed+0x74>)
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	4619      	mov	r1, r3
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f7ff ffb6 	bl	800de3c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d017      	beq.n	800df06 <tcp_netif_ip_addr_changed+0x66>
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d013      	beq.n	800df06 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dede:	4b0e      	ldr	r3, [pc, #56]	; (800df18 <tcp_netif_ip_addr_changed+0x78>)
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	60fb      	str	r3, [r7, #12]
 800dee4:	e00c      	b.n	800df00 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	429a      	cmp	r2, r3
 800def0:	d103      	bne.n	800defa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	681a      	ldr	r2, [r3, #0]
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	68db      	ldr	r3, [r3, #12]
 800defe:	60fb      	str	r3, [r7, #12]
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d1ef      	bne.n	800dee6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800df06:	bf00      	nop
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
 800df0e:	bf00      	nop
 800df10:	2000b3e0 	.word	0x2000b3e0
 800df14:	2000b3ec 	.word	0x2000b3ec
 800df18:	2000b3e8 	.word	0x2000b3e8

0800df1c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d007      	beq.n	800df3c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df30:	4618      	mov	r0, r3
 800df32:	f7ff fb4b 	bl	800d5cc <tcp_segs_free>
    pcb->ooseq = NULL;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2200      	movs	r2, #0
 800df3a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800df3c:	bf00      	nop
 800df3e:	3708      	adds	r7, #8
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800df44:	b590      	push	{r4, r7, lr}
 800df46:	b08d      	sub	sp, #52	; 0x34
 800df48:	af04      	add	r7, sp, #16
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d105      	bne.n	800df60 <tcp_input+0x1c>
 800df54:	4b9b      	ldr	r3, [pc, #620]	; (800e1c4 <tcp_input+0x280>)
 800df56:	2283      	movs	r2, #131	; 0x83
 800df58:	499b      	ldr	r1, [pc, #620]	; (800e1c8 <tcp_input+0x284>)
 800df5a:	489c      	ldr	r0, [pc, #624]	; (800e1cc <tcp_input+0x288>)
 800df5c:	f007 f97c 	bl	8015258 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	4a9a      	ldr	r2, [pc, #616]	; (800e1d0 <tcp_input+0x28c>)
 800df66:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	895b      	ldrh	r3, [r3, #10]
 800df6c:	2b13      	cmp	r3, #19
 800df6e:	f240 83c4 	bls.w	800e6fa <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800df72:	4b98      	ldr	r3, [pc, #608]	; (800e1d4 <tcp_input+0x290>)
 800df74:	695a      	ldr	r2, [r3, #20]
 800df76:	4b97      	ldr	r3, [pc, #604]	; (800e1d4 <tcp_input+0x290>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	4619      	mov	r1, r3
 800df7c:	4610      	mov	r0, r2
 800df7e:	f006 f8a9 	bl	80140d4 <ip4_addr_isbroadcast_u32>
 800df82:	4603      	mov	r3, r0
 800df84:	2b00      	cmp	r3, #0
 800df86:	f040 83ba 	bne.w	800e6fe <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800df8a:	4b92      	ldr	r3, [pc, #584]	; (800e1d4 <tcp_input+0x290>)
 800df8c:	695b      	ldr	r3, [r3, #20]
 800df8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800df92:	2be0      	cmp	r3, #224	; 0xe0
 800df94:	f000 83b3 	beq.w	800e6fe <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800df98:	4b8d      	ldr	r3, [pc, #564]	; (800e1d0 <tcp_input+0x28c>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	899b      	ldrh	r3, [r3, #12]
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7fc fb1b 	bl	800a5dc <lwip_htons>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	0b1b      	lsrs	r3, r3, #12
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	009b      	lsls	r3, r3, #2
 800dfb0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800dfb2:	7cbb      	ldrb	r3, [r7, #18]
 800dfb4:	2b13      	cmp	r3, #19
 800dfb6:	f240 83a2 	bls.w	800e6fe <tcp_input+0x7ba>
 800dfba:	7cbb      	ldrb	r3, [r7, #18]
 800dfbc:	b29a      	uxth	r2, r3
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	891b      	ldrh	r3, [r3, #8]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	f200 839b 	bhi.w	800e6fe <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800dfc8:	7cbb      	ldrb	r3, [r7, #18]
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	3b14      	subs	r3, #20
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	4b81      	ldr	r3, [pc, #516]	; (800e1d8 <tcp_input+0x294>)
 800dfd2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800dfd4:	4b81      	ldr	r3, [pc, #516]	; (800e1dc <tcp_input+0x298>)
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	895a      	ldrh	r2, [r3, #10]
 800dfde:	7cbb      	ldrb	r3, [r7, #18]
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	429a      	cmp	r2, r3
 800dfe4:	d309      	bcc.n	800dffa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800dfe6:	4b7c      	ldr	r3, [pc, #496]	; (800e1d8 <tcp_input+0x294>)
 800dfe8:	881a      	ldrh	r2, [r3, #0]
 800dfea:	4b7d      	ldr	r3, [pc, #500]	; (800e1e0 <tcp_input+0x29c>)
 800dfec:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800dfee:	7cbb      	ldrb	r3, [r7, #18]
 800dff0:	4619      	mov	r1, r3
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f7fd fe4a 	bl	800bc8c <pbuf_remove_header>
 800dff8:	e04e      	b.n	800e098 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d105      	bne.n	800e00e <tcp_input+0xca>
 800e002:	4b70      	ldr	r3, [pc, #448]	; (800e1c4 <tcp_input+0x280>)
 800e004:	22c2      	movs	r2, #194	; 0xc2
 800e006:	4977      	ldr	r1, [pc, #476]	; (800e1e4 <tcp_input+0x2a0>)
 800e008:	4870      	ldr	r0, [pc, #448]	; (800e1cc <tcp_input+0x288>)
 800e00a:	f007 f925 	bl	8015258 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e00e:	2114      	movs	r1, #20
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f7fd fe3b 	bl	800bc8c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	895a      	ldrh	r2, [r3, #10]
 800e01a:	4b71      	ldr	r3, [pc, #452]	; (800e1e0 <tcp_input+0x29c>)
 800e01c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e01e:	4b6e      	ldr	r3, [pc, #440]	; (800e1d8 <tcp_input+0x294>)
 800e020:	881a      	ldrh	r2, [r3, #0]
 800e022:	4b6f      	ldr	r3, [pc, #444]	; (800e1e0 <tcp_input+0x29c>)
 800e024:	881b      	ldrh	r3, [r3, #0]
 800e026:	1ad3      	subs	r3, r2, r3
 800e028:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e02a:	4b6d      	ldr	r3, [pc, #436]	; (800e1e0 <tcp_input+0x29c>)
 800e02c:	881b      	ldrh	r3, [r3, #0]
 800e02e:	4619      	mov	r1, r3
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7fd fe2b 	bl	800bc8c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	895b      	ldrh	r3, [r3, #10]
 800e03c:	8a3a      	ldrh	r2, [r7, #16]
 800e03e:	429a      	cmp	r2, r3
 800e040:	f200 835f 	bhi.w	800e702 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	685b      	ldr	r3, [r3, #4]
 800e04a:	4a64      	ldr	r2, [pc, #400]	; (800e1dc <tcp_input+0x298>)
 800e04c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	8a3a      	ldrh	r2, [r7, #16]
 800e054:	4611      	mov	r1, r2
 800e056:	4618      	mov	r0, r3
 800e058:	f7fd fe18 	bl	800bc8c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	891a      	ldrh	r2, [r3, #8]
 800e060:	8a3b      	ldrh	r3, [r7, #16]
 800e062:	1ad3      	subs	r3, r2, r3
 800e064:	b29a      	uxth	r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	895b      	ldrh	r3, [r3, #10]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d005      	beq.n	800e07e <tcp_input+0x13a>
 800e072:	4b54      	ldr	r3, [pc, #336]	; (800e1c4 <tcp_input+0x280>)
 800e074:	22df      	movs	r2, #223	; 0xdf
 800e076:	495c      	ldr	r1, [pc, #368]	; (800e1e8 <tcp_input+0x2a4>)
 800e078:	4854      	ldr	r0, [pc, #336]	; (800e1cc <tcp_input+0x288>)
 800e07a:	f007 f8ed 	bl	8015258 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	891a      	ldrh	r2, [r3, #8]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	891b      	ldrh	r3, [r3, #8]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d005      	beq.n	800e098 <tcp_input+0x154>
 800e08c:	4b4d      	ldr	r3, [pc, #308]	; (800e1c4 <tcp_input+0x280>)
 800e08e:	22e0      	movs	r2, #224	; 0xe0
 800e090:	4956      	ldr	r1, [pc, #344]	; (800e1ec <tcp_input+0x2a8>)
 800e092:	484e      	ldr	r0, [pc, #312]	; (800e1cc <tcp_input+0x288>)
 800e094:	f007 f8e0 	bl	8015258 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e098:	4b4d      	ldr	r3, [pc, #308]	; (800e1d0 <tcp_input+0x28c>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	881b      	ldrh	r3, [r3, #0]
 800e09e:	b29a      	uxth	r2, r3
 800e0a0:	4b4b      	ldr	r3, [pc, #300]	; (800e1d0 <tcp_input+0x28c>)
 800e0a2:	681c      	ldr	r4, [r3, #0]
 800e0a4:	4610      	mov	r0, r2
 800e0a6:	f7fc fa99 	bl	800a5dc <lwip_htons>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e0ae:	4b48      	ldr	r3, [pc, #288]	; (800e1d0 <tcp_input+0x28c>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	885b      	ldrh	r3, [r3, #2]
 800e0b4:	b29a      	uxth	r2, r3
 800e0b6:	4b46      	ldr	r3, [pc, #280]	; (800e1d0 <tcp_input+0x28c>)
 800e0b8:	681c      	ldr	r4, [r3, #0]
 800e0ba:	4610      	mov	r0, r2
 800e0bc:	f7fc fa8e 	bl	800a5dc <lwip_htons>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e0c4:	4b42      	ldr	r3, [pc, #264]	; (800e1d0 <tcp_input+0x28c>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	685a      	ldr	r2, [r3, #4]
 800e0ca:	4b41      	ldr	r3, [pc, #260]	; (800e1d0 <tcp_input+0x28c>)
 800e0cc:	681c      	ldr	r4, [r3, #0]
 800e0ce:	4610      	mov	r0, r2
 800e0d0:	f7fc fa99 	bl	800a606 <lwip_htonl>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	6063      	str	r3, [r4, #4]
 800e0d8:	6863      	ldr	r3, [r4, #4]
 800e0da:	4a45      	ldr	r2, [pc, #276]	; (800e1f0 <tcp_input+0x2ac>)
 800e0dc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e0de:	4b3c      	ldr	r3, [pc, #240]	; (800e1d0 <tcp_input+0x28c>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	689a      	ldr	r2, [r3, #8]
 800e0e4:	4b3a      	ldr	r3, [pc, #232]	; (800e1d0 <tcp_input+0x28c>)
 800e0e6:	681c      	ldr	r4, [r3, #0]
 800e0e8:	4610      	mov	r0, r2
 800e0ea:	f7fc fa8c 	bl	800a606 <lwip_htonl>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	60a3      	str	r3, [r4, #8]
 800e0f2:	68a3      	ldr	r3, [r4, #8]
 800e0f4:	4a3f      	ldr	r2, [pc, #252]	; (800e1f4 <tcp_input+0x2b0>)
 800e0f6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e0f8:	4b35      	ldr	r3, [pc, #212]	; (800e1d0 <tcp_input+0x28c>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	89db      	ldrh	r3, [r3, #14]
 800e0fe:	b29a      	uxth	r2, r3
 800e100:	4b33      	ldr	r3, [pc, #204]	; (800e1d0 <tcp_input+0x28c>)
 800e102:	681c      	ldr	r4, [r3, #0]
 800e104:	4610      	mov	r0, r2
 800e106:	f7fc fa69 	bl	800a5dc <lwip_htons>
 800e10a:	4603      	mov	r3, r0
 800e10c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e10e:	4b30      	ldr	r3, [pc, #192]	; (800e1d0 <tcp_input+0x28c>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	899b      	ldrh	r3, [r3, #12]
 800e114:	b29b      	uxth	r3, r3
 800e116:	4618      	mov	r0, r3
 800e118:	f7fc fa60 	bl	800a5dc <lwip_htons>
 800e11c:	4603      	mov	r3, r0
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e124:	b2da      	uxtb	r2, r3
 800e126:	4b34      	ldr	r3, [pc, #208]	; (800e1f8 <tcp_input+0x2b4>)
 800e128:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	891a      	ldrh	r2, [r3, #8]
 800e12e:	4b33      	ldr	r3, [pc, #204]	; (800e1fc <tcp_input+0x2b8>)
 800e130:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e132:	4b31      	ldr	r3, [pc, #196]	; (800e1f8 <tcp_input+0x2b4>)
 800e134:	781b      	ldrb	r3, [r3, #0]
 800e136:	f003 0303 	and.w	r3, r3, #3
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d00c      	beq.n	800e158 <tcp_input+0x214>
    tcplen++;
 800e13e:	4b2f      	ldr	r3, [pc, #188]	; (800e1fc <tcp_input+0x2b8>)
 800e140:	881b      	ldrh	r3, [r3, #0]
 800e142:	3301      	adds	r3, #1
 800e144:	b29a      	uxth	r2, r3
 800e146:	4b2d      	ldr	r3, [pc, #180]	; (800e1fc <tcp_input+0x2b8>)
 800e148:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	891a      	ldrh	r2, [r3, #8]
 800e14e:	4b2b      	ldr	r3, [pc, #172]	; (800e1fc <tcp_input+0x2b8>)
 800e150:	881b      	ldrh	r3, [r3, #0]
 800e152:	429a      	cmp	r2, r3
 800e154:	f200 82d7 	bhi.w	800e706 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e158:	2300      	movs	r3, #0
 800e15a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e15c:	4b28      	ldr	r3, [pc, #160]	; (800e200 <tcp_input+0x2bc>)
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	61fb      	str	r3, [r7, #28]
 800e162:	e09d      	b.n	800e2a0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e164:	69fb      	ldr	r3, [r7, #28]
 800e166:	7d1b      	ldrb	r3, [r3, #20]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d105      	bne.n	800e178 <tcp_input+0x234>
 800e16c:	4b15      	ldr	r3, [pc, #84]	; (800e1c4 <tcp_input+0x280>)
 800e16e:	22fb      	movs	r2, #251	; 0xfb
 800e170:	4924      	ldr	r1, [pc, #144]	; (800e204 <tcp_input+0x2c0>)
 800e172:	4816      	ldr	r0, [pc, #88]	; (800e1cc <tcp_input+0x288>)
 800e174:	f007 f870 	bl	8015258 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	7d1b      	ldrb	r3, [r3, #20]
 800e17c:	2b0a      	cmp	r3, #10
 800e17e:	d105      	bne.n	800e18c <tcp_input+0x248>
 800e180:	4b10      	ldr	r3, [pc, #64]	; (800e1c4 <tcp_input+0x280>)
 800e182:	22fc      	movs	r2, #252	; 0xfc
 800e184:	4920      	ldr	r1, [pc, #128]	; (800e208 <tcp_input+0x2c4>)
 800e186:	4811      	ldr	r0, [pc, #68]	; (800e1cc <tcp_input+0x288>)
 800e188:	f007 f866 	bl	8015258 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	7d1b      	ldrb	r3, [r3, #20]
 800e190:	2b01      	cmp	r3, #1
 800e192:	d105      	bne.n	800e1a0 <tcp_input+0x25c>
 800e194:	4b0b      	ldr	r3, [pc, #44]	; (800e1c4 <tcp_input+0x280>)
 800e196:	22fd      	movs	r2, #253	; 0xfd
 800e198:	491c      	ldr	r1, [pc, #112]	; (800e20c <tcp_input+0x2c8>)
 800e19a:	480c      	ldr	r0, [pc, #48]	; (800e1cc <tcp_input+0x288>)
 800e19c:	f007 f85c 	bl	8015258 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	7a1b      	ldrb	r3, [r3, #8]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d033      	beq.n	800e210 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e1a8:	69fb      	ldr	r3, [r7, #28]
 800e1aa:	7a1a      	ldrb	r2, [r3, #8]
 800e1ac:	4b09      	ldr	r3, [pc, #36]	; (800e1d4 <tcp_input+0x290>)
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d029      	beq.n	800e210 <tcp_input+0x2cc>
      prev = pcb;
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	61bb      	str	r3, [r7, #24]
      continue;
 800e1c0:	e06b      	b.n	800e29a <tcp_input+0x356>
 800e1c2:	bf00      	nop
 800e1c4:	080179fc 	.word	0x080179fc
 800e1c8:	08017a30 	.word	0x08017a30
 800e1cc:	08017a48 	.word	0x08017a48
 800e1d0:	200044fc 	.word	0x200044fc
 800e1d4:	20007ccc 	.word	0x20007ccc
 800e1d8:	20004500 	.word	0x20004500
 800e1dc:	20004504 	.word	0x20004504
 800e1e0:	20004502 	.word	0x20004502
 800e1e4:	08017a70 	.word	0x08017a70
 800e1e8:	08017a80 	.word	0x08017a80
 800e1ec:	08017a8c 	.word	0x08017a8c
 800e1f0:	2000450c 	.word	0x2000450c
 800e1f4:	20004510 	.word	0x20004510
 800e1f8:	20004518 	.word	0x20004518
 800e1fc:	20004516 	.word	0x20004516
 800e200:	2000b3e0 	.word	0x2000b3e0
 800e204:	08017aac 	.word	0x08017aac
 800e208:	08017ad4 	.word	0x08017ad4
 800e20c:	08017b00 	.word	0x08017b00
    }

    if (pcb->remote_port == tcphdr->src &&
 800e210:	69fb      	ldr	r3, [r7, #28]
 800e212:	8b1a      	ldrh	r2, [r3, #24]
 800e214:	4b94      	ldr	r3, [pc, #592]	; (800e468 <tcp_input+0x524>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	881b      	ldrh	r3, [r3, #0]
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d13a      	bne.n	800e296 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	8ada      	ldrh	r2, [r3, #22]
 800e224:	4b90      	ldr	r3, [pc, #576]	; (800e468 <tcp_input+0x524>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	885b      	ldrh	r3, [r3, #2]
 800e22a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d132      	bne.n	800e296 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	685a      	ldr	r2, [r3, #4]
 800e234:	4b8d      	ldr	r3, [pc, #564]	; (800e46c <tcp_input+0x528>)
 800e236:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e238:	429a      	cmp	r2, r3
 800e23a:	d12c      	bne.n	800e296 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e23c:	69fb      	ldr	r3, [r7, #28]
 800e23e:	681a      	ldr	r2, [r3, #0]
 800e240:	4b8a      	ldr	r3, [pc, #552]	; (800e46c <tcp_input+0x528>)
 800e242:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e244:	429a      	cmp	r2, r3
 800e246:	d126      	bne.n	800e296 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	68db      	ldr	r3, [r3, #12]
 800e24c:	69fa      	ldr	r2, [r7, #28]
 800e24e:	429a      	cmp	r2, r3
 800e250:	d106      	bne.n	800e260 <tcp_input+0x31c>
 800e252:	4b87      	ldr	r3, [pc, #540]	; (800e470 <tcp_input+0x52c>)
 800e254:	f240 120d 	movw	r2, #269	; 0x10d
 800e258:	4986      	ldr	r1, [pc, #536]	; (800e474 <tcp_input+0x530>)
 800e25a:	4887      	ldr	r0, [pc, #540]	; (800e478 <tcp_input+0x534>)
 800e25c:	f006 fffc 	bl	8015258 <iprintf>
      if (prev != NULL) {
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d00a      	beq.n	800e27c <tcp_input+0x338>
        prev->next = pcb->next;
 800e266:	69fb      	ldr	r3, [r7, #28]
 800e268:	68da      	ldr	r2, [r3, #12]
 800e26a:	69bb      	ldr	r3, [r7, #24]
 800e26c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e26e:	4b83      	ldr	r3, [pc, #524]	; (800e47c <tcp_input+0x538>)
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	69fb      	ldr	r3, [r7, #28]
 800e274:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e276:	4a81      	ldr	r2, [pc, #516]	; (800e47c <tcp_input+0x538>)
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	69fa      	ldr	r2, [r7, #28]
 800e282:	429a      	cmp	r2, r3
 800e284:	d111      	bne.n	800e2aa <tcp_input+0x366>
 800e286:	4b7a      	ldr	r3, [pc, #488]	; (800e470 <tcp_input+0x52c>)
 800e288:	f240 1215 	movw	r2, #277	; 0x115
 800e28c:	497c      	ldr	r1, [pc, #496]	; (800e480 <tcp_input+0x53c>)
 800e28e:	487a      	ldr	r0, [pc, #488]	; (800e478 <tcp_input+0x534>)
 800e290:	f006 ffe2 	bl	8015258 <iprintf>
      break;
 800e294:	e009      	b.n	800e2aa <tcp_input+0x366>
    }
    prev = pcb;
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	68db      	ldr	r3, [r3, #12]
 800e29e:	61fb      	str	r3, [r7, #28]
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	f47f af5e 	bne.w	800e164 <tcp_input+0x220>
 800e2a8:	e000      	b.n	800e2ac <tcp_input+0x368>
      break;
 800e2aa:	bf00      	nop
  }

  if (pcb == NULL) {
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f040 8095 	bne.w	800e3de <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e2b4:	4b73      	ldr	r3, [pc, #460]	; (800e484 <tcp_input+0x540>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	61fb      	str	r3, [r7, #28]
 800e2ba:	e03f      	b.n	800e33c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e2bc:	69fb      	ldr	r3, [r7, #28]
 800e2be:	7d1b      	ldrb	r3, [r3, #20]
 800e2c0:	2b0a      	cmp	r3, #10
 800e2c2:	d006      	beq.n	800e2d2 <tcp_input+0x38e>
 800e2c4:	4b6a      	ldr	r3, [pc, #424]	; (800e470 <tcp_input+0x52c>)
 800e2c6:	f240 121f 	movw	r2, #287	; 0x11f
 800e2ca:	496f      	ldr	r1, [pc, #444]	; (800e488 <tcp_input+0x544>)
 800e2cc:	486a      	ldr	r0, [pc, #424]	; (800e478 <tcp_input+0x534>)
 800e2ce:	f006 ffc3 	bl	8015258 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	7a1b      	ldrb	r3, [r3, #8]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d009      	beq.n	800e2ee <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e2da:	69fb      	ldr	r3, [r7, #28]
 800e2dc:	7a1a      	ldrb	r2, [r3, #8]
 800e2de:	4b63      	ldr	r3, [pc, #396]	; (800e46c <tcp_input+0x528>)
 800e2e0:	685b      	ldr	r3, [r3, #4]
 800e2e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d122      	bne.n	800e334 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e2ee:	69fb      	ldr	r3, [r7, #28]
 800e2f0:	8b1a      	ldrh	r2, [r3, #24]
 800e2f2:	4b5d      	ldr	r3, [pc, #372]	; (800e468 <tcp_input+0x524>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	881b      	ldrh	r3, [r3, #0]
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d11b      	bne.n	800e336 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e2fe:	69fb      	ldr	r3, [r7, #28]
 800e300:	8ada      	ldrh	r2, [r3, #22]
 800e302:	4b59      	ldr	r3, [pc, #356]	; (800e468 <tcp_input+0x524>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	885b      	ldrh	r3, [r3, #2]
 800e308:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e30a:	429a      	cmp	r2, r3
 800e30c:	d113      	bne.n	800e336 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e30e:	69fb      	ldr	r3, [r7, #28]
 800e310:	685a      	ldr	r2, [r3, #4]
 800e312:	4b56      	ldr	r3, [pc, #344]	; (800e46c <tcp_input+0x528>)
 800e314:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e316:	429a      	cmp	r2, r3
 800e318:	d10d      	bne.n	800e336 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e31a:	69fb      	ldr	r3, [r7, #28]
 800e31c:	681a      	ldr	r2, [r3, #0]
 800e31e:	4b53      	ldr	r3, [pc, #332]	; (800e46c <tcp_input+0x528>)
 800e320:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e322:	429a      	cmp	r2, r3
 800e324:	d107      	bne.n	800e336 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e326:	69f8      	ldr	r0, [r7, #28]
 800e328:	f000 fb52 	bl	800e9d0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f7fd fd33 	bl	800bd98 <pbuf_free>
        return;
 800e332:	e1ee      	b.n	800e712 <tcp_input+0x7ce>
        continue;
 800e334:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e336:	69fb      	ldr	r3, [r7, #28]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	61fb      	str	r3, [r7, #28]
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d1bc      	bne.n	800e2bc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e342:	2300      	movs	r3, #0
 800e344:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e346:	4b51      	ldr	r3, [pc, #324]	; (800e48c <tcp_input+0x548>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	617b      	str	r3, [r7, #20]
 800e34c:	e02a      	b.n	800e3a4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	7a1b      	ldrb	r3, [r3, #8]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d00c      	beq.n	800e370 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	7a1a      	ldrb	r2, [r3, #8]
 800e35a:	4b44      	ldr	r3, [pc, #272]	; (800e46c <tcp_input+0x528>)
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e362:	3301      	adds	r3, #1
 800e364:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e366:	429a      	cmp	r2, r3
 800e368:	d002      	beq.n	800e370 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	61bb      	str	r3, [r7, #24]
        continue;
 800e36e:	e016      	b.n	800e39e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	8ada      	ldrh	r2, [r3, #22]
 800e374:	4b3c      	ldr	r3, [pc, #240]	; (800e468 <tcp_input+0x524>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	885b      	ldrh	r3, [r3, #2]
 800e37a:	b29b      	uxth	r3, r3
 800e37c:	429a      	cmp	r2, r3
 800e37e:	d10c      	bne.n	800e39a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	681a      	ldr	r2, [r3, #0]
 800e384:	4b39      	ldr	r3, [pc, #228]	; (800e46c <tcp_input+0x528>)
 800e386:	695b      	ldr	r3, [r3, #20]
 800e388:	429a      	cmp	r2, r3
 800e38a:	d00f      	beq.n	800e3ac <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e38c:	697b      	ldr	r3, [r7, #20]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d00d      	beq.n	800e3ae <tcp_input+0x46a>
 800e392:	697b      	ldr	r3, [r7, #20]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d009      	beq.n	800e3ae <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	617b      	str	r3, [r7, #20]
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d1d1      	bne.n	800e34e <tcp_input+0x40a>
 800e3aa:	e000      	b.n	800e3ae <tcp_input+0x46a>
            break;
 800e3ac:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d014      	beq.n	800e3de <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e3b4:	69bb      	ldr	r3, [r7, #24]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d00a      	beq.n	800e3d0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	68da      	ldr	r2, [r3, #12]
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e3c2:	4b32      	ldr	r3, [pc, #200]	; (800e48c <tcp_input+0x548>)
 800e3c4:	681a      	ldr	r2, [r3, #0]
 800e3c6:	697b      	ldr	r3, [r7, #20]
 800e3c8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e3ca:	4a30      	ldr	r2, [pc, #192]	; (800e48c <tcp_input+0x548>)
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e3d0:	6978      	ldr	r0, [r7, #20]
 800e3d2:	f000 f9ff 	bl	800e7d4 <tcp_listen_input>
      }
      pbuf_free(p);
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f7fd fcde 	bl	800bd98 <pbuf_free>
      return;
 800e3dc:	e199      	b.n	800e712 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f000 8160 	beq.w	800e6a6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e3e6:	4b2a      	ldr	r3, [pc, #168]	; (800e490 <tcp_input+0x54c>)
 800e3e8:	2200      	movs	r2, #0
 800e3ea:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	891a      	ldrh	r2, [r3, #8]
 800e3f0:	4b27      	ldr	r3, [pc, #156]	; (800e490 <tcp_input+0x54c>)
 800e3f2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e3f4:	4a26      	ldr	r2, [pc, #152]	; (800e490 <tcp_input+0x54c>)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e3fa:	4b1b      	ldr	r3, [pc, #108]	; (800e468 <tcp_input+0x524>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	4a24      	ldr	r2, [pc, #144]	; (800e490 <tcp_input+0x54c>)
 800e400:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e402:	4b24      	ldr	r3, [pc, #144]	; (800e494 <tcp_input+0x550>)
 800e404:	2200      	movs	r2, #0
 800e406:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e408:	4b23      	ldr	r3, [pc, #140]	; (800e498 <tcp_input+0x554>)
 800e40a:	2200      	movs	r2, #0
 800e40c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e40e:	4b23      	ldr	r3, [pc, #140]	; (800e49c <tcp_input+0x558>)
 800e410:	2200      	movs	r2, #0
 800e412:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e414:	4b22      	ldr	r3, [pc, #136]	; (800e4a0 <tcp_input+0x55c>)
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	f003 0308 	and.w	r3, r3, #8
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d006      	beq.n	800e42e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	7b5b      	ldrb	r3, [r3, #13]
 800e424:	f043 0301 	orr.w	r3, r3, #1
 800e428:	b2da      	uxtb	r2, r3
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e42e:	69fb      	ldr	r3, [r7, #28]
 800e430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e432:	2b00      	cmp	r3, #0
 800e434:	d038      	beq.n	800e4a8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e436:	69f8      	ldr	r0, [r7, #28]
 800e438:	f7ff f84c 	bl	800d4d4 <tcp_process_refused_data>
 800e43c:	4603      	mov	r3, r0
 800e43e:	f113 0f0d 	cmn.w	r3, #13
 800e442:	d007      	beq.n	800e454 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d02d      	beq.n	800e4a8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e44c:	4b15      	ldr	r3, [pc, #84]	; (800e4a4 <tcp_input+0x560>)
 800e44e:	881b      	ldrh	r3, [r3, #0]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d029      	beq.n	800e4a8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e458:	2b00      	cmp	r3, #0
 800e45a:	f040 8104 	bne.w	800e666 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e45e:	69f8      	ldr	r0, [r7, #28]
 800e460:	f003 fe28 	bl	80120b4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e464:	e0ff      	b.n	800e666 <tcp_input+0x722>
 800e466:	bf00      	nop
 800e468:	200044fc 	.word	0x200044fc
 800e46c:	20007ccc 	.word	0x20007ccc
 800e470:	080179fc 	.word	0x080179fc
 800e474:	08017b28 	.word	0x08017b28
 800e478:	08017a48 	.word	0x08017a48
 800e47c:	2000b3e0 	.word	0x2000b3e0
 800e480:	08017b54 	.word	0x08017b54
 800e484:	2000b3f0 	.word	0x2000b3f0
 800e488:	08017b80 	.word	0x08017b80
 800e48c:	2000b3e8 	.word	0x2000b3e8
 800e490:	200044ec 	.word	0x200044ec
 800e494:	2000451c 	.word	0x2000451c
 800e498:	20004519 	.word	0x20004519
 800e49c:	20004514 	.word	0x20004514
 800e4a0:	20004518 	.word	0x20004518
 800e4a4:	20004516 	.word	0x20004516
      }
    }
    tcp_input_pcb = pcb;
 800e4a8:	4a9b      	ldr	r2, [pc, #620]	; (800e718 <tcp_input+0x7d4>)
 800e4aa:	69fb      	ldr	r3, [r7, #28]
 800e4ac:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e4ae:	69f8      	ldr	r0, [r7, #28]
 800e4b0:	f000 fb0a 	bl	800eac8 <tcp_process>
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e4b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e4bc:	f113 0f0d 	cmn.w	r3, #13
 800e4c0:	f000 80d3 	beq.w	800e66a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800e4c4:	4b95      	ldr	r3, [pc, #596]	; (800e71c <tcp_input+0x7d8>)
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	f003 0308 	and.w	r3, r3, #8
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d015      	beq.n	800e4fc <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e4d0:	69fb      	ldr	r3, [r7, #28]
 800e4d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d008      	beq.n	800e4ec <tcp_input+0x5a8>
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4e0:	69fa      	ldr	r2, [r7, #28]
 800e4e2:	6912      	ldr	r2, [r2, #16]
 800e4e4:	f06f 010d 	mvn.w	r1, #13
 800e4e8:	4610      	mov	r0, r2
 800e4ea:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e4ec:	69f9      	ldr	r1, [r7, #28]
 800e4ee:	488c      	ldr	r0, [pc, #560]	; (800e720 <tcp_input+0x7dc>)
 800e4f0:	f7ff fbb0 	bl	800dc54 <tcp_pcb_remove>
        tcp_free(pcb);
 800e4f4:	69f8      	ldr	r0, [r7, #28]
 800e4f6:	f7fd fefb 	bl	800c2f0 <tcp_free>
 800e4fa:	e0c1      	b.n	800e680 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e500:	4b88      	ldr	r3, [pc, #544]	; (800e724 <tcp_input+0x7e0>)
 800e502:	881b      	ldrh	r3, [r3, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d01d      	beq.n	800e544 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e508:	4b86      	ldr	r3, [pc, #536]	; (800e724 <tcp_input+0x7e0>)
 800e50a:	881b      	ldrh	r3, [r3, #0]
 800e50c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e50e:	69fb      	ldr	r3, [r7, #28]
 800e510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e514:	2b00      	cmp	r3, #0
 800e516:	d00a      	beq.n	800e52e <tcp_input+0x5ea>
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e51e:	69fa      	ldr	r2, [r7, #28]
 800e520:	6910      	ldr	r0, [r2, #16]
 800e522:	89fa      	ldrh	r2, [r7, #14]
 800e524:	69f9      	ldr	r1, [r7, #28]
 800e526:	4798      	blx	r3
 800e528:	4603      	mov	r3, r0
 800e52a:	74fb      	strb	r3, [r7, #19]
 800e52c:	e001      	b.n	800e532 <tcp_input+0x5ee>
 800e52e:	2300      	movs	r3, #0
 800e530:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e532:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e536:	f113 0f0d 	cmn.w	r3, #13
 800e53a:	f000 8098 	beq.w	800e66e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e53e:	4b79      	ldr	r3, [pc, #484]	; (800e724 <tcp_input+0x7e0>)
 800e540:	2200      	movs	r2, #0
 800e542:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e544:	69f8      	ldr	r0, [r7, #28]
 800e546:	f000 f905 	bl	800e754 <tcp_input_delayed_close>
 800e54a:	4603      	mov	r3, r0
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	f040 8090 	bne.w	800e672 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e552:	4b75      	ldr	r3, [pc, #468]	; (800e728 <tcp_input+0x7e4>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d041      	beq.n	800e5de <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e55a:	69fb      	ldr	r3, [r7, #28]
 800e55c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d006      	beq.n	800e570 <tcp_input+0x62c>
 800e562:	4b72      	ldr	r3, [pc, #456]	; (800e72c <tcp_input+0x7e8>)
 800e564:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e568:	4971      	ldr	r1, [pc, #452]	; (800e730 <tcp_input+0x7ec>)
 800e56a:	4872      	ldr	r0, [pc, #456]	; (800e734 <tcp_input+0x7f0>)
 800e56c:	f006 fe74 	bl	8015258 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e570:	69fb      	ldr	r3, [r7, #28]
 800e572:	8b5b      	ldrh	r3, [r3, #26]
 800e574:	f003 0310 	and.w	r3, r3, #16
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d008      	beq.n	800e58e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e57c:	4b6a      	ldr	r3, [pc, #424]	; (800e728 <tcp_input+0x7e4>)
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4618      	mov	r0, r3
 800e582:	f7fd fc09 	bl	800bd98 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e586:	69f8      	ldr	r0, [r7, #28]
 800e588:	f7fe f992 	bl	800c8b0 <tcp_abort>
            goto aborted;
 800e58c:	e078      	b.n	800e680 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e58e:	69fb      	ldr	r3, [r7, #28]
 800e590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00c      	beq.n	800e5b2 <tcp_input+0x66e>
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e59e:	69fb      	ldr	r3, [r7, #28]
 800e5a0:	6918      	ldr	r0, [r3, #16]
 800e5a2:	4b61      	ldr	r3, [pc, #388]	; (800e728 <tcp_input+0x7e4>)
 800e5a4:	681a      	ldr	r2, [r3, #0]
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	69f9      	ldr	r1, [r7, #28]
 800e5aa:	47a0      	blx	r4
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	74fb      	strb	r3, [r7, #19]
 800e5b0:	e008      	b.n	800e5c4 <tcp_input+0x680>
 800e5b2:	4b5d      	ldr	r3, [pc, #372]	; (800e728 <tcp_input+0x7e4>)
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	69f9      	ldr	r1, [r7, #28]
 800e5ba:	2000      	movs	r0, #0
 800e5bc:	f7ff f87c 	bl	800d6b8 <tcp_recv_null>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e5c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e5c8:	f113 0f0d 	cmn.w	r3, #13
 800e5cc:	d053      	beq.n	800e676 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e5ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d003      	beq.n	800e5de <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e5d6:	4b54      	ldr	r3, [pc, #336]	; (800e728 <tcp_input+0x7e4>)
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	69fb      	ldr	r3, [r7, #28]
 800e5dc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e5de:	4b4f      	ldr	r3, [pc, #316]	; (800e71c <tcp_input+0x7d8>)
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	f003 0320 	and.w	r3, r3, #32
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d030      	beq.n	800e64c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800e5ea:	69fb      	ldr	r3, [r7, #28]
 800e5ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d009      	beq.n	800e606 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e5f2:	69fb      	ldr	r3, [r7, #28]
 800e5f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5f6:	7b5a      	ldrb	r2, [r3, #13]
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e5fc:	f042 0220 	orr.w	r2, r2, #32
 800e600:	b2d2      	uxtb	r2, r2
 800e602:	735a      	strb	r2, [r3, #13]
 800e604:	e022      	b.n	800e64c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e606:	69fb      	ldr	r3, [r7, #28]
 800e608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e60a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e60e:	d005      	beq.n	800e61c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800e610:	69fb      	ldr	r3, [r7, #28]
 800e612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e614:	3301      	adds	r3, #1
 800e616:	b29a      	uxth	r2, r3
 800e618:	69fb      	ldr	r3, [r7, #28]
 800e61a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e61c:	69fb      	ldr	r3, [r7, #28]
 800e61e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e622:	2b00      	cmp	r3, #0
 800e624:	d00b      	beq.n	800e63e <tcp_input+0x6fa>
 800e626:	69fb      	ldr	r3, [r7, #28]
 800e628:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e62c:	69fb      	ldr	r3, [r7, #28]
 800e62e:	6918      	ldr	r0, [r3, #16]
 800e630:	2300      	movs	r3, #0
 800e632:	2200      	movs	r2, #0
 800e634:	69f9      	ldr	r1, [r7, #28]
 800e636:	47a0      	blx	r4
 800e638:	4603      	mov	r3, r0
 800e63a:	74fb      	strb	r3, [r7, #19]
 800e63c:	e001      	b.n	800e642 <tcp_input+0x6fe>
 800e63e:	2300      	movs	r3, #0
 800e640:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e642:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e646:	f113 0f0d 	cmn.w	r3, #13
 800e64a:	d016      	beq.n	800e67a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e64c:	4b32      	ldr	r3, [pc, #200]	; (800e718 <tcp_input+0x7d4>)
 800e64e:	2200      	movs	r2, #0
 800e650:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e652:	69f8      	ldr	r0, [r7, #28]
 800e654:	f000 f87e 	bl	800e754 <tcp_input_delayed_close>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d10f      	bne.n	800e67e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e65e:	69f8      	ldr	r0, [r7, #28]
 800e660:	f002 ff10 	bl	8011484 <tcp_output>
 800e664:	e00c      	b.n	800e680 <tcp_input+0x73c>
        goto aborted;
 800e666:	bf00      	nop
 800e668:	e00a      	b.n	800e680 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e66a:	bf00      	nop
 800e66c:	e008      	b.n	800e680 <tcp_input+0x73c>
              goto aborted;
 800e66e:	bf00      	nop
 800e670:	e006      	b.n	800e680 <tcp_input+0x73c>
          goto aborted;
 800e672:	bf00      	nop
 800e674:	e004      	b.n	800e680 <tcp_input+0x73c>
            goto aborted;
 800e676:	bf00      	nop
 800e678:	e002      	b.n	800e680 <tcp_input+0x73c>
              goto aborted;
 800e67a:	bf00      	nop
 800e67c:	e000      	b.n	800e680 <tcp_input+0x73c>
          goto aborted;
 800e67e:	bf00      	nop
    tcp_input_pcb = NULL;
 800e680:	4b25      	ldr	r3, [pc, #148]	; (800e718 <tcp_input+0x7d4>)
 800e682:	2200      	movs	r2, #0
 800e684:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e686:	4b28      	ldr	r3, [pc, #160]	; (800e728 <tcp_input+0x7e4>)
 800e688:	2200      	movs	r2, #0
 800e68a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e68c:	4b2a      	ldr	r3, [pc, #168]	; (800e738 <tcp_input+0x7f4>)
 800e68e:	685b      	ldr	r3, [r3, #4]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d03d      	beq.n	800e710 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800e694:	4b28      	ldr	r3, [pc, #160]	; (800e738 <tcp_input+0x7f4>)
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	4618      	mov	r0, r3
 800e69a:	f7fd fb7d 	bl	800bd98 <pbuf_free>
      inseg.p = NULL;
 800e69e:	4b26      	ldr	r3, [pc, #152]	; (800e738 <tcp_input+0x7f4>)
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e6a4:	e034      	b.n	800e710 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e6a6:	4b25      	ldr	r3, [pc, #148]	; (800e73c <tcp_input+0x7f8>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	899b      	ldrh	r3, [r3, #12]
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	f7fb ff94 	bl	800a5dc <lwip_htons>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	f003 0304 	and.w	r3, r3, #4
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d118      	bne.n	800e6f2 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6c0:	4b1f      	ldr	r3, [pc, #124]	; (800e740 <tcp_input+0x7fc>)
 800e6c2:	6819      	ldr	r1, [r3, #0]
 800e6c4:	4b1f      	ldr	r3, [pc, #124]	; (800e744 <tcp_input+0x800>)
 800e6c6:	881b      	ldrh	r3, [r3, #0]
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	4b1f      	ldr	r3, [pc, #124]	; (800e748 <tcp_input+0x804>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6d0:	4b1a      	ldr	r3, [pc, #104]	; (800e73c <tcp_input+0x7f8>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6d4:	885b      	ldrh	r3, [r3, #2]
 800e6d6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6d8:	4a18      	ldr	r2, [pc, #96]	; (800e73c <tcp_input+0x7f8>)
 800e6da:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6dc:	8812      	ldrh	r2, [r2, #0]
 800e6de:	b292      	uxth	r2, r2
 800e6e0:	9202      	str	r2, [sp, #8]
 800e6e2:	9301      	str	r3, [sp, #4]
 800e6e4:	4b19      	ldr	r3, [pc, #100]	; (800e74c <tcp_input+0x808>)
 800e6e6:	9300      	str	r3, [sp, #0]
 800e6e8:	4b19      	ldr	r3, [pc, #100]	; (800e750 <tcp_input+0x80c>)
 800e6ea:	4602      	mov	r2, r0
 800e6ec:	2000      	movs	r0, #0
 800e6ee:	f003 fc8f 	bl	8012010 <tcp_rst>
    pbuf_free(p);
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f7fd fb50 	bl	800bd98 <pbuf_free>
  return;
 800e6f8:	e00a      	b.n	800e710 <tcp_input+0x7cc>
    goto dropped;
 800e6fa:	bf00      	nop
 800e6fc:	e004      	b.n	800e708 <tcp_input+0x7c4>
dropped:
 800e6fe:	bf00      	nop
 800e700:	e002      	b.n	800e708 <tcp_input+0x7c4>
      goto dropped;
 800e702:	bf00      	nop
 800e704:	e000      	b.n	800e708 <tcp_input+0x7c4>
      goto dropped;
 800e706:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f7fd fb45 	bl	800bd98 <pbuf_free>
 800e70e:	e000      	b.n	800e712 <tcp_input+0x7ce>
  return;
 800e710:	bf00      	nop
}
 800e712:	3724      	adds	r7, #36	; 0x24
 800e714:	46bd      	mov	sp, r7
 800e716:	bd90      	pop	{r4, r7, pc}
 800e718:	2000b3f4 	.word	0x2000b3f4
 800e71c:	20004519 	.word	0x20004519
 800e720:	2000b3e0 	.word	0x2000b3e0
 800e724:	20004514 	.word	0x20004514
 800e728:	2000451c 	.word	0x2000451c
 800e72c:	080179fc 	.word	0x080179fc
 800e730:	08017bb0 	.word	0x08017bb0
 800e734:	08017a48 	.word	0x08017a48
 800e738:	200044ec 	.word	0x200044ec
 800e73c:	200044fc 	.word	0x200044fc
 800e740:	20004510 	.word	0x20004510
 800e744:	20004516 	.word	0x20004516
 800e748:	2000450c 	.word	0x2000450c
 800e74c:	20007cdc 	.word	0x20007cdc
 800e750:	20007ce0 	.word	0x20007ce0

0800e754 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b082      	sub	sp, #8
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d106      	bne.n	800e770 <tcp_input_delayed_close+0x1c>
 800e762:	4b17      	ldr	r3, [pc, #92]	; (800e7c0 <tcp_input_delayed_close+0x6c>)
 800e764:	f240 225a 	movw	r2, #602	; 0x25a
 800e768:	4916      	ldr	r1, [pc, #88]	; (800e7c4 <tcp_input_delayed_close+0x70>)
 800e76a:	4817      	ldr	r0, [pc, #92]	; (800e7c8 <tcp_input_delayed_close+0x74>)
 800e76c:	f006 fd74 	bl	8015258 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e770:	4b16      	ldr	r3, [pc, #88]	; (800e7cc <tcp_input_delayed_close+0x78>)
 800e772:	781b      	ldrb	r3, [r3, #0]
 800e774:	f003 0310 	and.w	r3, r3, #16
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d01c      	beq.n	800e7b6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	8b5b      	ldrh	r3, [r3, #26]
 800e780:	f003 0310 	and.w	r3, r3, #16
 800e784:	2b00      	cmp	r3, #0
 800e786:	d10d      	bne.n	800e7a4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d008      	beq.n	800e7a4 <tcp_input_delayed_close+0x50>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	6912      	ldr	r2, [r2, #16]
 800e79c:	f06f 010e 	mvn.w	r1, #14
 800e7a0:	4610      	mov	r0, r2
 800e7a2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e7a4:	6879      	ldr	r1, [r7, #4]
 800e7a6:	480a      	ldr	r0, [pc, #40]	; (800e7d0 <tcp_input_delayed_close+0x7c>)
 800e7a8:	f7ff fa54 	bl	800dc54 <tcp_pcb_remove>
    tcp_free(pcb);
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f7fd fd9f 	bl	800c2f0 <tcp_free>
    return 1;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	e000      	b.n	800e7b8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e7b6:	2300      	movs	r3, #0
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3708      	adds	r7, #8
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	080179fc 	.word	0x080179fc
 800e7c4:	08017bcc 	.word	0x08017bcc
 800e7c8:	08017a48 	.word	0x08017a48
 800e7cc:	20004519 	.word	0x20004519
 800e7d0:	2000b3e0 	.word	0x2000b3e0

0800e7d4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e7d4:	b590      	push	{r4, r7, lr}
 800e7d6:	b08b      	sub	sp, #44	; 0x2c
 800e7d8:	af04      	add	r7, sp, #16
 800e7da:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e7dc:	4b6f      	ldr	r3, [pc, #444]	; (800e99c <tcp_listen_input+0x1c8>)
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	f003 0304 	and.w	r3, r3, #4
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	f040 80d3 	bne.w	800e990 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d106      	bne.n	800e7fe <tcp_listen_input+0x2a>
 800e7f0:	4b6b      	ldr	r3, [pc, #428]	; (800e9a0 <tcp_listen_input+0x1cc>)
 800e7f2:	f240 2281 	movw	r2, #641	; 0x281
 800e7f6:	496b      	ldr	r1, [pc, #428]	; (800e9a4 <tcp_listen_input+0x1d0>)
 800e7f8:	486b      	ldr	r0, [pc, #428]	; (800e9a8 <tcp_listen_input+0x1d4>)
 800e7fa:	f006 fd2d 	bl	8015258 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e7fe:	4b67      	ldr	r3, [pc, #412]	; (800e99c <tcp_listen_input+0x1c8>)
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	f003 0310 	and.w	r3, r3, #16
 800e806:	2b00      	cmp	r3, #0
 800e808:	d019      	beq.n	800e83e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e80a:	4b68      	ldr	r3, [pc, #416]	; (800e9ac <tcp_listen_input+0x1d8>)
 800e80c:	6819      	ldr	r1, [r3, #0]
 800e80e:	4b68      	ldr	r3, [pc, #416]	; (800e9b0 <tcp_listen_input+0x1dc>)
 800e810:	881b      	ldrh	r3, [r3, #0]
 800e812:	461a      	mov	r2, r3
 800e814:	4b67      	ldr	r3, [pc, #412]	; (800e9b4 <tcp_listen_input+0x1e0>)
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e81a:	4b67      	ldr	r3, [pc, #412]	; (800e9b8 <tcp_listen_input+0x1e4>)
 800e81c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e81e:	885b      	ldrh	r3, [r3, #2]
 800e820:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e822:	4a65      	ldr	r2, [pc, #404]	; (800e9b8 <tcp_listen_input+0x1e4>)
 800e824:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e826:	8812      	ldrh	r2, [r2, #0]
 800e828:	b292      	uxth	r2, r2
 800e82a:	9202      	str	r2, [sp, #8]
 800e82c:	9301      	str	r3, [sp, #4]
 800e82e:	4b63      	ldr	r3, [pc, #396]	; (800e9bc <tcp_listen_input+0x1e8>)
 800e830:	9300      	str	r3, [sp, #0]
 800e832:	4b63      	ldr	r3, [pc, #396]	; (800e9c0 <tcp_listen_input+0x1ec>)
 800e834:	4602      	mov	r2, r0
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f003 fbea 	bl	8012010 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e83c:	e0aa      	b.n	800e994 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800e83e:	4b57      	ldr	r3, [pc, #348]	; (800e99c <tcp_listen_input+0x1c8>)
 800e840:	781b      	ldrb	r3, [r3, #0]
 800e842:	f003 0302 	and.w	r3, r3, #2
 800e846:	2b00      	cmp	r3, #0
 800e848:	f000 80a4 	beq.w	800e994 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	7d5b      	ldrb	r3, [r3, #21]
 800e850:	4618      	mov	r0, r3
 800e852:	f7ff f855 	bl	800d900 <tcp_alloc>
 800e856:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d111      	bne.n	800e882 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	699b      	ldr	r3, [r3, #24]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d00a      	beq.n	800e87c <tcp_listen_input+0xa8>
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	699b      	ldr	r3, [r3, #24]
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	6910      	ldr	r0, [r2, #16]
 800e86e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e872:	2100      	movs	r1, #0
 800e874:	4798      	blx	r3
 800e876:	4603      	mov	r3, r0
 800e878:	73bb      	strb	r3, [r7, #14]
      return;
 800e87a:	e08c      	b.n	800e996 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e87c:	23f0      	movs	r3, #240	; 0xf0
 800e87e:	73bb      	strb	r3, [r7, #14]
      return;
 800e880:	e089      	b.n	800e996 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e882:	4b50      	ldr	r3, [pc, #320]	; (800e9c4 <tcp_listen_input+0x1f0>)
 800e884:	695a      	ldr	r2, [r3, #20]
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e88a:	4b4e      	ldr	r3, [pc, #312]	; (800e9c4 <tcp_listen_input+0x1f0>)
 800e88c:	691a      	ldr	r2, [r3, #16]
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	8ada      	ldrh	r2, [r3, #22]
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e89a:	4b47      	ldr	r3, [pc, #284]	; (800e9b8 <tcp_listen_input+0x1e4>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	881b      	ldrh	r3, [r3, #0]
 800e8a0:	b29a      	uxth	r2, r3
 800e8a2:	697b      	ldr	r3, [r7, #20]
 800e8a4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	2203      	movs	r2, #3
 800e8aa:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e8ac:	4b41      	ldr	r3, [pc, #260]	; (800e9b4 <tcp_listen_input+0x1e0>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	1c5a      	adds	r2, r3, #1
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e8be:	6978      	ldr	r0, [r7, #20]
 800e8c0:	f7ff fa5c 	bl	800dd7c <tcp_next_iss>
 800e8c4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e8c6:	697b      	ldr	r3, [r7, #20]
 800e8c8:	693a      	ldr	r2, [r7, #16]
 800e8ca:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e8cc:	697b      	ldr	r3, [r7, #20]
 800e8ce:	693a      	ldr	r2, [r7, #16]
 800e8d0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	693a      	ldr	r2, [r7, #16]
 800e8d6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e8d8:	697b      	ldr	r3, [r7, #20]
 800e8da:	693a      	ldr	r2, [r7, #16]
 800e8dc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e8de:	4b35      	ldr	r3, [pc, #212]	; (800e9b4 <tcp_listen_input+0x1e0>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	1e5a      	subs	r2, r3, #1
 800e8e4:	697b      	ldr	r3, [r7, #20]
 800e8e6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	691a      	ldr	r2, [r3, #16]
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e8f0:	697b      	ldr	r3, [r7, #20]
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	7a5b      	ldrb	r3, [r3, #9]
 800e8fa:	f003 030c 	and.w	r3, r3, #12
 800e8fe:	b2da      	uxtb	r2, r3
 800e900:	697b      	ldr	r3, [r7, #20]
 800e902:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	7a1a      	ldrb	r2, [r3, #8]
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e90c:	4b2e      	ldr	r3, [pc, #184]	; (800e9c8 <tcp_listen_input+0x1f4>)
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	60da      	str	r2, [r3, #12]
 800e914:	4a2c      	ldr	r2, [pc, #176]	; (800e9c8 <tcp_listen_input+0x1f4>)
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	6013      	str	r3, [r2, #0]
 800e91a:	f003 fd3b 	bl	8012394 <tcp_timer_needed>
 800e91e:	4b2b      	ldr	r3, [pc, #172]	; (800e9cc <tcp_listen_input+0x1f8>)
 800e920:	2201      	movs	r2, #1
 800e922:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e924:	6978      	ldr	r0, [r7, #20]
 800e926:	f001 fd8f 	bl	8010448 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e92a:	4b23      	ldr	r3, [pc, #140]	; (800e9b8 <tcp_listen_input+0x1e4>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	89db      	ldrh	r3, [r3, #14]
 800e930:	b29a      	uxth	r2, r3
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e938:	697b      	ldr	r3, [r7, #20]
 800e93a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	3304      	adds	r3, #4
 800e94c:	4618      	mov	r0, r3
 800e94e:	f005 f92d 	bl	8013bac <ip4_route>
 800e952:	4601      	mov	r1, r0
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	3304      	adds	r3, #4
 800e958:	461a      	mov	r2, r3
 800e95a:	4620      	mov	r0, r4
 800e95c:	f7ff fa34 	bl	800ddc8 <tcp_eff_send_mss_netif>
 800e960:	4603      	mov	r3, r0
 800e962:	461a      	mov	r2, r3
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e968:	2112      	movs	r1, #18
 800e96a:	6978      	ldr	r0, [r7, #20]
 800e96c:	f002 fc9c 	bl	80112a8 <tcp_enqueue_flags>
 800e970:	4603      	mov	r3, r0
 800e972:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d004      	beq.n	800e986 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e97c:	2100      	movs	r1, #0
 800e97e:	6978      	ldr	r0, [r7, #20]
 800e980:	f7fd fed8 	bl	800c734 <tcp_abandon>
      return;
 800e984:	e007      	b.n	800e996 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800e986:	6978      	ldr	r0, [r7, #20]
 800e988:	f002 fd7c 	bl	8011484 <tcp_output>
  return;
 800e98c:	bf00      	nop
 800e98e:	e001      	b.n	800e994 <tcp_listen_input+0x1c0>
    return;
 800e990:	bf00      	nop
 800e992:	e000      	b.n	800e996 <tcp_listen_input+0x1c2>
  return;
 800e994:	bf00      	nop
}
 800e996:	371c      	adds	r7, #28
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd90      	pop	{r4, r7, pc}
 800e99c:	20004518 	.word	0x20004518
 800e9a0:	080179fc 	.word	0x080179fc
 800e9a4:	08017bf4 	.word	0x08017bf4
 800e9a8:	08017a48 	.word	0x08017a48
 800e9ac:	20004510 	.word	0x20004510
 800e9b0:	20004516 	.word	0x20004516
 800e9b4:	2000450c 	.word	0x2000450c
 800e9b8:	200044fc 	.word	0x200044fc
 800e9bc:	20007cdc 	.word	0x20007cdc
 800e9c0:	20007ce0 	.word	0x20007ce0
 800e9c4:	20007ccc 	.word	0x20007ccc
 800e9c8:	2000b3e0 	.word	0x2000b3e0
 800e9cc:	2000b3dc 	.word	0x2000b3dc

0800e9d0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b086      	sub	sp, #24
 800e9d4:	af04      	add	r7, sp, #16
 800e9d6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e9d8:	4b30      	ldr	r3, [pc, #192]	; (800ea9c <tcp_timewait_input+0xcc>)
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	f003 0304 	and.w	r3, r3, #4
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d154      	bne.n	800ea8e <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d106      	bne.n	800e9f8 <tcp_timewait_input+0x28>
 800e9ea:	4b2d      	ldr	r3, [pc, #180]	; (800eaa0 <tcp_timewait_input+0xd0>)
 800e9ec:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e9f0:	492c      	ldr	r1, [pc, #176]	; (800eaa4 <tcp_timewait_input+0xd4>)
 800e9f2:	482d      	ldr	r0, [pc, #180]	; (800eaa8 <tcp_timewait_input+0xd8>)
 800e9f4:	f006 fc30 	bl	8015258 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e9f8:	4b28      	ldr	r3, [pc, #160]	; (800ea9c <tcp_timewait_input+0xcc>)
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	f003 0302 	and.w	r3, r3, #2
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d02a      	beq.n	800ea5a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ea04:	4b29      	ldr	r3, [pc, #164]	; (800eaac <tcp_timewait_input+0xdc>)
 800ea06:	681a      	ldr	r2, [r3, #0]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea0c:	1ad3      	subs	r3, r2, r3
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	db2d      	blt.n	800ea6e <tcp_timewait_input+0x9e>
 800ea12:	4b26      	ldr	r3, [pc, #152]	; (800eaac <tcp_timewait_input+0xdc>)
 800ea14:	681a      	ldr	r2, [r3, #0]
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea1a:	6879      	ldr	r1, [r7, #4]
 800ea1c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ea1e:	440b      	add	r3, r1
 800ea20:	1ad3      	subs	r3, r2, r3
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	dc23      	bgt.n	800ea6e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea26:	4b22      	ldr	r3, [pc, #136]	; (800eab0 <tcp_timewait_input+0xe0>)
 800ea28:	6819      	ldr	r1, [r3, #0]
 800ea2a:	4b22      	ldr	r3, [pc, #136]	; (800eab4 <tcp_timewait_input+0xe4>)
 800ea2c:	881b      	ldrh	r3, [r3, #0]
 800ea2e:	461a      	mov	r2, r3
 800ea30:	4b1e      	ldr	r3, [pc, #120]	; (800eaac <tcp_timewait_input+0xdc>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea36:	4b20      	ldr	r3, [pc, #128]	; (800eab8 <tcp_timewait_input+0xe8>)
 800ea38:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea3a:	885b      	ldrh	r3, [r3, #2]
 800ea3c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ea3e:	4a1e      	ldr	r2, [pc, #120]	; (800eab8 <tcp_timewait_input+0xe8>)
 800ea40:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ea42:	8812      	ldrh	r2, [r2, #0]
 800ea44:	b292      	uxth	r2, r2
 800ea46:	9202      	str	r2, [sp, #8]
 800ea48:	9301      	str	r3, [sp, #4]
 800ea4a:	4b1c      	ldr	r3, [pc, #112]	; (800eabc <tcp_timewait_input+0xec>)
 800ea4c:	9300      	str	r3, [sp, #0]
 800ea4e:	4b1c      	ldr	r3, [pc, #112]	; (800eac0 <tcp_timewait_input+0xf0>)
 800ea50:	4602      	mov	r2, r0
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f003 fadc 	bl	8012010 <tcp_rst>
      return;
 800ea58:	e01c      	b.n	800ea94 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800ea5a:	4b10      	ldr	r3, [pc, #64]	; (800ea9c <tcp_timewait_input+0xcc>)
 800ea5c:	781b      	ldrb	r3, [r3, #0]
 800ea5e:	f003 0301 	and.w	r3, r3, #1
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d003      	beq.n	800ea6e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800ea66:	4b17      	ldr	r3, [pc, #92]	; (800eac4 <tcp_timewait_input+0xf4>)
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800ea6e:	4b11      	ldr	r3, [pc, #68]	; (800eab4 <tcp_timewait_input+0xe4>)
 800ea70:	881b      	ldrh	r3, [r3, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d00d      	beq.n	800ea92 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	8b5b      	ldrh	r3, [r3, #26]
 800ea7a:	f043 0302 	orr.w	r3, r3, #2
 800ea7e:	b29a      	uxth	r2, r3
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f002 fcfd 	bl	8011484 <tcp_output>
  }
  return;
 800ea8a:	bf00      	nop
 800ea8c:	e001      	b.n	800ea92 <tcp_timewait_input+0xc2>
    return;
 800ea8e:	bf00      	nop
 800ea90:	e000      	b.n	800ea94 <tcp_timewait_input+0xc4>
  return;
 800ea92:	bf00      	nop
}
 800ea94:	3708      	adds	r7, #8
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	20004518 	.word	0x20004518
 800eaa0:	080179fc 	.word	0x080179fc
 800eaa4:	08017c14 	.word	0x08017c14
 800eaa8:	08017a48 	.word	0x08017a48
 800eaac:	2000450c 	.word	0x2000450c
 800eab0:	20004510 	.word	0x20004510
 800eab4:	20004516 	.word	0x20004516
 800eab8:	200044fc 	.word	0x200044fc
 800eabc:	20007cdc 	.word	0x20007cdc
 800eac0:	20007ce0 	.word	0x20007ce0
 800eac4:	2000b3e4 	.word	0x2000b3e4

0800eac8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800eac8:	b590      	push	{r4, r7, lr}
 800eaca:	b08d      	sub	sp, #52	; 0x34
 800eacc:	af04      	add	r7, sp, #16
 800eace:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ead0:	2300      	movs	r3, #0
 800ead2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ead4:	2300      	movs	r3, #0
 800ead6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d106      	bne.n	800eaec <tcp_process+0x24>
 800eade:	4ba5      	ldr	r3, [pc, #660]	; (800ed74 <tcp_process+0x2ac>)
 800eae0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800eae4:	49a4      	ldr	r1, [pc, #656]	; (800ed78 <tcp_process+0x2b0>)
 800eae6:	48a5      	ldr	r0, [pc, #660]	; (800ed7c <tcp_process+0x2b4>)
 800eae8:	f006 fbb6 	bl	8015258 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800eaec:	4ba4      	ldr	r3, [pc, #656]	; (800ed80 <tcp_process+0x2b8>)
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	f003 0304 	and.w	r3, r3, #4
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d04e      	beq.n	800eb96 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	7d1b      	ldrb	r3, [r3, #20]
 800eafc:	2b02      	cmp	r3, #2
 800eafe:	d108      	bne.n	800eb12 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb04:	4b9f      	ldr	r3, [pc, #636]	; (800ed84 <tcp_process+0x2bc>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	429a      	cmp	r2, r3
 800eb0a:	d123      	bne.n	800eb54 <tcp_process+0x8c>
        acceptable = 1;
 800eb0c:	2301      	movs	r3, #1
 800eb0e:	76fb      	strb	r3, [r7, #27]
 800eb10:	e020      	b.n	800eb54 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb16:	4b9c      	ldr	r3, [pc, #624]	; (800ed88 <tcp_process+0x2c0>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d102      	bne.n	800eb24 <tcp_process+0x5c>
        acceptable = 1;
 800eb1e:	2301      	movs	r3, #1
 800eb20:	76fb      	strb	r3, [r7, #27]
 800eb22:	e017      	b.n	800eb54 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800eb24:	4b98      	ldr	r3, [pc, #608]	; (800ed88 <tcp_process+0x2c0>)
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2c:	1ad3      	subs	r3, r2, r3
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	db10      	blt.n	800eb54 <tcp_process+0x8c>
 800eb32:	4b95      	ldr	r3, [pc, #596]	; (800ed88 <tcp_process+0x2c0>)
 800eb34:	681a      	ldr	r2, [r3, #0]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb3a:	6879      	ldr	r1, [r7, #4]
 800eb3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eb3e:	440b      	add	r3, r1
 800eb40:	1ad3      	subs	r3, r2, r3
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	dc06      	bgt.n	800eb54 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	8b5b      	ldrh	r3, [r3, #26]
 800eb4a:	f043 0302 	orr.w	r3, r3, #2
 800eb4e:	b29a      	uxth	r2, r3
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800eb54:	7efb      	ldrb	r3, [r7, #27]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d01b      	beq.n	800eb92 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	7d1b      	ldrb	r3, [r3, #20]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d106      	bne.n	800eb70 <tcp_process+0xa8>
 800eb62:	4b84      	ldr	r3, [pc, #528]	; (800ed74 <tcp_process+0x2ac>)
 800eb64:	f44f 724e 	mov.w	r2, #824	; 0x338
 800eb68:	4988      	ldr	r1, [pc, #544]	; (800ed8c <tcp_process+0x2c4>)
 800eb6a:	4884      	ldr	r0, [pc, #528]	; (800ed7c <tcp_process+0x2b4>)
 800eb6c:	f006 fb74 	bl	8015258 <iprintf>
      recv_flags |= TF_RESET;
 800eb70:	4b87      	ldr	r3, [pc, #540]	; (800ed90 <tcp_process+0x2c8>)
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	f043 0308 	orr.w	r3, r3, #8
 800eb78:	b2da      	uxtb	r2, r3
 800eb7a:	4b85      	ldr	r3, [pc, #532]	; (800ed90 <tcp_process+0x2c8>)
 800eb7c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	8b5b      	ldrh	r3, [r3, #26]
 800eb82:	f023 0301 	bic.w	r3, r3, #1
 800eb86:	b29a      	uxth	r2, r3
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800eb8c:	f06f 030d 	mvn.w	r3, #13
 800eb90:	e37a      	b.n	800f288 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800eb92:	2300      	movs	r3, #0
 800eb94:	e378      	b.n	800f288 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800eb96:	4b7a      	ldr	r3, [pc, #488]	; (800ed80 <tcp_process+0x2b8>)
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	f003 0302 	and.w	r3, r3, #2
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d010      	beq.n	800ebc4 <tcp_process+0xfc>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	7d1b      	ldrb	r3, [r3, #20]
 800eba6:	2b02      	cmp	r3, #2
 800eba8:	d00c      	beq.n	800ebc4 <tcp_process+0xfc>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	7d1b      	ldrb	r3, [r3, #20]
 800ebae:	2b03      	cmp	r3, #3
 800ebb0:	d008      	beq.n	800ebc4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	8b5b      	ldrh	r3, [r3, #26]
 800ebb6:	f043 0302 	orr.w	r3, r3, #2
 800ebba:	b29a      	uxth	r2, r3
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	e361      	b.n	800f288 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	8b5b      	ldrh	r3, [r3, #26]
 800ebc8:	f003 0310 	and.w	r3, r3, #16
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d103      	bne.n	800ebd8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ebd0:	4b70      	ldr	r3, [pc, #448]	; (800ed94 <tcp_process+0x2cc>)
 800ebd2:	681a      	ldr	r2, [r3, #0]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f001 fc2d 	bl	8010448 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	7d1b      	ldrb	r3, [r3, #20]
 800ebf2:	3b02      	subs	r3, #2
 800ebf4:	2b07      	cmp	r3, #7
 800ebf6:	f200 8337 	bhi.w	800f268 <tcp_process+0x7a0>
 800ebfa:	a201      	add	r2, pc, #4	; (adr r2, 800ec00 <tcp_process+0x138>)
 800ebfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec00:	0800ec21 	.word	0x0800ec21
 800ec04:	0800ee51 	.word	0x0800ee51
 800ec08:	0800efc9 	.word	0x0800efc9
 800ec0c:	0800eff3 	.word	0x0800eff3
 800ec10:	0800f117 	.word	0x0800f117
 800ec14:	0800efc9 	.word	0x0800efc9
 800ec18:	0800f1a3 	.word	0x0800f1a3
 800ec1c:	0800f233 	.word	0x0800f233
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ec20:	4b57      	ldr	r3, [pc, #348]	; (800ed80 <tcp_process+0x2b8>)
 800ec22:	781b      	ldrb	r3, [r3, #0]
 800ec24:	f003 0310 	and.w	r3, r3, #16
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f000 80e4 	beq.w	800edf6 <tcp_process+0x32e>
 800ec2e:	4b54      	ldr	r3, [pc, #336]	; (800ed80 <tcp_process+0x2b8>)
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	f003 0302 	and.w	r3, r3, #2
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	f000 80dd 	beq.w	800edf6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec40:	1c5a      	adds	r2, r3, #1
 800ec42:	4b50      	ldr	r3, [pc, #320]	; (800ed84 <tcp_process+0x2bc>)
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	f040 80d5 	bne.w	800edf6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ec4c:	4b4e      	ldr	r3, [pc, #312]	; (800ed88 <tcp_process+0x2c0>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	1c5a      	adds	r2, r3, #1
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ec5e:	4b49      	ldr	r3, [pc, #292]	; (800ed84 <tcp_process+0x2bc>)
 800ec60:	681a      	ldr	r2, [r3, #0]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ec66:	4b4c      	ldr	r3, [pc, #304]	; (800ed98 <tcp_process+0x2d0>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	89db      	ldrh	r3, [r3, #14]
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ec80:	4b41      	ldr	r3, [pc, #260]	; (800ed88 <tcp_process+0x2c0>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	1e5a      	subs	r2, r3, #1
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2204      	movs	r2, #4
 800ec8e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	3304      	adds	r3, #4
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f004 ff87 	bl	8013bac <ip4_route>
 800ec9e:	4601      	mov	r1, r0
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	3304      	adds	r3, #4
 800eca4:	461a      	mov	r2, r3
 800eca6:	4620      	mov	r0, r4
 800eca8:	f7ff f88e 	bl	800ddc8 <tcp_eff_send_mss_netif>
 800ecac:	4603      	mov	r3, r0
 800ecae:	461a      	mov	r2, r3
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecb8:	009a      	lsls	r2, r3, #2
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecbe:	005b      	lsls	r3, r3, #1
 800ecc0:	f241 111c 	movw	r1, #4380	; 0x111c
 800ecc4:	428b      	cmp	r3, r1
 800ecc6:	bf38      	it	cc
 800ecc8:	460b      	movcc	r3, r1
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d204      	bcs.n	800ecd8 <tcp_process+0x210>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecd2:	009b      	lsls	r3, r3, #2
 800ecd4:	b29b      	uxth	r3, r3
 800ecd6:	e00d      	b.n	800ecf4 <tcp_process+0x22c>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecdc:	005b      	lsls	r3, r3, #1
 800ecde:	f241 121c 	movw	r2, #4380	; 0x111c
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d904      	bls.n	800ecf0 <tcp_process+0x228>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ecea:	005b      	lsls	r3, r3, #1
 800ecec:	b29b      	uxth	r3, r3
 800ecee:	e001      	b.n	800ecf4 <tcp_process+0x22c>
 800ecf0:	f241 131c 	movw	r3, #4380	; 0x111c
 800ecf4:	687a      	ldr	r2, [r7, #4]
 800ecf6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d106      	bne.n	800ed12 <tcp_process+0x24a>
 800ed04:	4b1b      	ldr	r3, [pc, #108]	; (800ed74 <tcp_process+0x2ac>)
 800ed06:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ed0a:	4924      	ldr	r1, [pc, #144]	; (800ed9c <tcp_process+0x2d4>)
 800ed0c:	481b      	ldr	r0, [pc, #108]	; (800ed7c <tcp_process+0x2b4>)
 800ed0e:	f006 faa3 	bl	8015258 <iprintf>
        --pcb->snd_queuelen;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ed18:	3b01      	subs	r3, #1
 800ed1a:	b29a      	uxth	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed26:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d111      	bne.n	800ed52 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed32:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ed34:	69fb      	ldr	r3, [r7, #28]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d106      	bne.n	800ed48 <tcp_process+0x280>
 800ed3a:	4b0e      	ldr	r3, [pc, #56]	; (800ed74 <tcp_process+0x2ac>)
 800ed3c:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ed40:	4917      	ldr	r1, [pc, #92]	; (800eda0 <tcp_process+0x2d8>)
 800ed42:	480e      	ldr	r0, [pc, #56]	; (800ed7c <tcp_process+0x2b4>)
 800ed44:	f006 fa88 	bl	8015258 <iprintf>
          pcb->unsent = rseg->next;
 800ed48:	69fb      	ldr	r3, [r7, #28]
 800ed4a:	681a      	ldr	r2, [r3, #0]
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	66da      	str	r2, [r3, #108]	; 0x6c
 800ed50:	e003      	b.n	800ed5a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800ed52:	69fb      	ldr	r3, [r7, #28]
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ed5a:	69f8      	ldr	r0, [r7, #28]
 800ed5c:	f7fe fc4a 	bl	800d5f4 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d11d      	bne.n	800eda4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed6e:	861a      	strh	r2, [r3, #48]	; 0x30
 800ed70:	e01f      	b.n	800edb2 <tcp_process+0x2ea>
 800ed72:	bf00      	nop
 800ed74:	080179fc 	.word	0x080179fc
 800ed78:	08017c34 	.word	0x08017c34
 800ed7c:	08017a48 	.word	0x08017a48
 800ed80:	20004518 	.word	0x20004518
 800ed84:	20004510 	.word	0x20004510
 800ed88:	2000450c 	.word	0x2000450c
 800ed8c:	08017c50 	.word	0x08017c50
 800ed90:	20004519 	.word	0x20004519
 800ed94:	2000b3e4 	.word	0x2000b3e4
 800ed98:	200044fc 	.word	0x200044fc
 800ed9c:	08017c70 	.word	0x08017c70
 800eda0:	08017c88 	.word	0x08017c88
        } else {
          pcb->rtime = 0;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2200      	movs	r2, #0
 800edae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d00a      	beq.n	800edd2 <tcp_process+0x30a>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edc2:	687a      	ldr	r2, [r7, #4]
 800edc4:	6910      	ldr	r0, [r2, #16]
 800edc6:	2200      	movs	r2, #0
 800edc8:	6879      	ldr	r1, [r7, #4]
 800edca:	4798      	blx	r3
 800edcc:	4603      	mov	r3, r0
 800edce:	76bb      	strb	r3, [r7, #26]
 800edd0:	e001      	b.n	800edd6 <tcp_process+0x30e>
 800edd2:	2300      	movs	r3, #0
 800edd4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800edd6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800edda:	f113 0f0d 	cmn.w	r3, #13
 800edde:	d102      	bne.n	800ede6 <tcp_process+0x31e>
          return ERR_ABRT;
 800ede0:	f06f 030c 	mvn.w	r3, #12
 800ede4:	e250      	b.n	800f288 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	8b5b      	ldrh	r3, [r3, #26]
 800edea:	f043 0302 	orr.w	r3, r3, #2
 800edee:	b29a      	uxth	r2, r3
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800edf4:	e23a      	b.n	800f26c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800edf6:	4b9d      	ldr	r3, [pc, #628]	; (800f06c <tcp_process+0x5a4>)
 800edf8:	781b      	ldrb	r3, [r3, #0]
 800edfa:	f003 0310 	and.w	r3, r3, #16
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	f000 8234 	beq.w	800f26c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee04:	4b9a      	ldr	r3, [pc, #616]	; (800f070 <tcp_process+0x5a8>)
 800ee06:	6819      	ldr	r1, [r3, #0]
 800ee08:	4b9a      	ldr	r3, [pc, #616]	; (800f074 <tcp_process+0x5ac>)
 800ee0a:	881b      	ldrh	r3, [r3, #0]
 800ee0c:	461a      	mov	r2, r3
 800ee0e:	4b9a      	ldr	r3, [pc, #616]	; (800f078 <tcp_process+0x5b0>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee14:	4b99      	ldr	r3, [pc, #612]	; (800f07c <tcp_process+0x5b4>)
 800ee16:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee18:	885b      	ldrh	r3, [r3, #2]
 800ee1a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ee1c:	4a97      	ldr	r2, [pc, #604]	; (800f07c <tcp_process+0x5b4>)
 800ee1e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ee20:	8812      	ldrh	r2, [r2, #0]
 800ee22:	b292      	uxth	r2, r2
 800ee24:	9202      	str	r2, [sp, #8]
 800ee26:	9301      	str	r3, [sp, #4]
 800ee28:	4b95      	ldr	r3, [pc, #596]	; (800f080 <tcp_process+0x5b8>)
 800ee2a:	9300      	str	r3, [sp, #0]
 800ee2c:	4b95      	ldr	r3, [pc, #596]	; (800f084 <tcp_process+0x5bc>)
 800ee2e:	4602      	mov	r2, r0
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	f003 f8ed 	bl	8012010 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee3c:	2b05      	cmp	r3, #5
 800ee3e:	f200 8215 	bhi.w	800f26c <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2200      	movs	r2, #0
 800ee46:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f002 feab 	bl	8011ba4 <tcp_rexmit_rto>
      break;
 800ee4e:	e20d      	b.n	800f26c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ee50:	4b86      	ldr	r3, [pc, #536]	; (800f06c <tcp_process+0x5a4>)
 800ee52:	781b      	ldrb	r3, [r3, #0]
 800ee54:	f003 0310 	and.w	r3, r3, #16
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	f000 80a1 	beq.w	800efa0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ee5e:	4b84      	ldr	r3, [pc, #528]	; (800f070 <tcp_process+0x5a8>)
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee66:	1ad3      	subs	r3, r2, r3
 800ee68:	3b01      	subs	r3, #1
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	db7e      	blt.n	800ef6c <tcp_process+0x4a4>
 800ee6e:	4b80      	ldr	r3, [pc, #512]	; (800f070 <tcp_process+0x5a8>)
 800ee70:	681a      	ldr	r2, [r3, #0]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee76:	1ad3      	subs	r3, r2, r3
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	dc77      	bgt.n	800ef6c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2204      	movs	r2, #4
 800ee80:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d102      	bne.n	800ee90 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ee8a:	23fa      	movs	r3, #250	; 0xfa
 800ee8c:	76bb      	strb	r3, [r7, #26]
 800ee8e:	e01d      	b.n	800eecc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ee94:	699b      	ldr	r3, [r3, #24]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d106      	bne.n	800eea8 <tcp_process+0x3e0>
 800ee9a:	4b7b      	ldr	r3, [pc, #492]	; (800f088 <tcp_process+0x5c0>)
 800ee9c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800eea0:	497a      	ldr	r1, [pc, #488]	; (800f08c <tcp_process+0x5c4>)
 800eea2:	487b      	ldr	r0, [pc, #492]	; (800f090 <tcp_process+0x5c8>)
 800eea4:	f006 f9d8 	bl	8015258 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eeac:	699b      	ldr	r3, [r3, #24]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d00a      	beq.n	800eec8 <tcp_process+0x400>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eeb6:	699b      	ldr	r3, [r3, #24]
 800eeb8:	687a      	ldr	r2, [r7, #4]
 800eeba:	6910      	ldr	r0, [r2, #16]
 800eebc:	2200      	movs	r2, #0
 800eebe:	6879      	ldr	r1, [r7, #4]
 800eec0:	4798      	blx	r3
 800eec2:	4603      	mov	r3, r0
 800eec4:	76bb      	strb	r3, [r7, #26]
 800eec6:	e001      	b.n	800eecc <tcp_process+0x404>
 800eec8:	23f0      	movs	r3, #240	; 0xf0
 800eeca:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800eecc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d00a      	beq.n	800eeea <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800eed4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eed8:	f113 0f0d 	cmn.w	r3, #13
 800eedc:	d002      	beq.n	800eee4 <tcp_process+0x41c>
              tcp_abort(pcb);
 800eede:	6878      	ldr	r0, [r7, #4]
 800eee0:	f7fd fce6 	bl	800c8b0 <tcp_abort>
            }
            return ERR_ABRT;
 800eee4:	f06f 030c 	mvn.w	r3, #12
 800eee8:	e1ce      	b.n	800f288 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f000 fae0 	bl	800f4b0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800eef0:	4b68      	ldr	r3, [pc, #416]	; (800f094 <tcp_process+0x5cc>)
 800eef2:	881b      	ldrh	r3, [r3, #0]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d005      	beq.n	800ef04 <tcp_process+0x43c>
            recv_acked--;
 800eef8:	4b66      	ldr	r3, [pc, #408]	; (800f094 <tcp_process+0x5cc>)
 800eefa:	881b      	ldrh	r3, [r3, #0]
 800eefc:	3b01      	subs	r3, #1
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	4b64      	ldr	r3, [pc, #400]	; (800f094 <tcp_process+0x5cc>)
 800ef02:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef08:	009a      	lsls	r2, r3, #2
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef0e:	005b      	lsls	r3, r3, #1
 800ef10:	f241 111c 	movw	r1, #4380	; 0x111c
 800ef14:	428b      	cmp	r3, r1
 800ef16:	bf38      	it	cc
 800ef18:	460b      	movcc	r3, r1
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d204      	bcs.n	800ef28 <tcp_process+0x460>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef22:	009b      	lsls	r3, r3, #2
 800ef24:	b29b      	uxth	r3, r3
 800ef26:	e00d      	b.n	800ef44 <tcp_process+0x47c>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef2c:	005b      	lsls	r3, r3, #1
 800ef2e:	f241 121c 	movw	r2, #4380	; 0x111c
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d904      	bls.n	800ef40 <tcp_process+0x478>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef3a:	005b      	lsls	r3, r3, #1
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	e001      	b.n	800ef44 <tcp_process+0x47c>
 800ef40:	f241 131c 	movw	r3, #4380	; 0x111c
 800ef44:	687a      	ldr	r2, [r7, #4]
 800ef46:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800ef4a:	4b53      	ldr	r3, [pc, #332]	; (800f098 <tcp_process+0x5d0>)
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	f003 0320 	and.w	r3, r3, #32
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d037      	beq.n	800efc6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	8b5b      	ldrh	r3, [r3, #26]
 800ef5a:	f043 0302 	orr.w	r3, r3, #2
 800ef5e:	b29a      	uxth	r2, r3
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2207      	movs	r2, #7
 800ef68:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ef6a:	e02c      	b.n	800efc6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef6c:	4b40      	ldr	r3, [pc, #256]	; (800f070 <tcp_process+0x5a8>)
 800ef6e:	6819      	ldr	r1, [r3, #0]
 800ef70:	4b40      	ldr	r3, [pc, #256]	; (800f074 <tcp_process+0x5ac>)
 800ef72:	881b      	ldrh	r3, [r3, #0]
 800ef74:	461a      	mov	r2, r3
 800ef76:	4b40      	ldr	r3, [pc, #256]	; (800f078 <tcp_process+0x5b0>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef7c:	4b3f      	ldr	r3, [pc, #252]	; (800f07c <tcp_process+0x5b4>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef80:	885b      	ldrh	r3, [r3, #2]
 800ef82:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef84:	4a3d      	ldr	r2, [pc, #244]	; (800f07c <tcp_process+0x5b4>)
 800ef86:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef88:	8812      	ldrh	r2, [r2, #0]
 800ef8a:	b292      	uxth	r2, r2
 800ef8c:	9202      	str	r2, [sp, #8]
 800ef8e:	9301      	str	r3, [sp, #4]
 800ef90:	4b3b      	ldr	r3, [pc, #236]	; (800f080 <tcp_process+0x5b8>)
 800ef92:	9300      	str	r3, [sp, #0]
 800ef94:	4b3b      	ldr	r3, [pc, #236]	; (800f084 <tcp_process+0x5bc>)
 800ef96:	4602      	mov	r2, r0
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f003 f839 	bl	8012010 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ef9e:	e167      	b.n	800f270 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800efa0:	4b32      	ldr	r3, [pc, #200]	; (800f06c <tcp_process+0x5a4>)
 800efa2:	781b      	ldrb	r3, [r3, #0]
 800efa4:	f003 0302 	and.w	r3, r3, #2
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	f000 8161 	beq.w	800f270 <tcp_process+0x7a8>
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efb2:	1e5a      	subs	r2, r3, #1
 800efb4:	4b30      	ldr	r3, [pc, #192]	; (800f078 <tcp_process+0x5b0>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	429a      	cmp	r2, r3
 800efba:	f040 8159 	bne.w	800f270 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f002 fe12 	bl	8011be8 <tcp_rexmit>
      break;
 800efc4:	e154      	b.n	800f270 <tcp_process+0x7a8>
 800efc6:	e153      	b.n	800f270 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800efc8:	6878      	ldr	r0, [r7, #4]
 800efca:	f000 fa71 	bl	800f4b0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800efce:	4b32      	ldr	r3, [pc, #200]	; (800f098 <tcp_process+0x5d0>)
 800efd0:	781b      	ldrb	r3, [r3, #0]
 800efd2:	f003 0320 	and.w	r3, r3, #32
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	f000 814c 	beq.w	800f274 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	8b5b      	ldrh	r3, [r3, #26]
 800efe0:	f043 0302 	orr.w	r3, r3, #2
 800efe4:	b29a      	uxth	r2, r3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2207      	movs	r2, #7
 800efee:	751a      	strb	r2, [r3, #20]
      }
      break;
 800eff0:	e140      	b.n	800f274 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 fa5c 	bl	800f4b0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eff8:	4b27      	ldr	r3, [pc, #156]	; (800f098 <tcp_process+0x5d0>)
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	f003 0320 	and.w	r3, r3, #32
 800f000:	2b00      	cmp	r3, #0
 800f002:	d071      	beq.n	800f0e8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f004:	4b19      	ldr	r3, [pc, #100]	; (800f06c <tcp_process+0x5a4>)
 800f006:	781b      	ldrb	r3, [r3, #0]
 800f008:	f003 0310 	and.w	r3, r3, #16
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d060      	beq.n	800f0d2 <tcp_process+0x60a>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f014:	4b16      	ldr	r3, [pc, #88]	; (800f070 <tcp_process+0x5a8>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d15a      	bne.n	800f0d2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f020:	2b00      	cmp	r3, #0
 800f022:	d156      	bne.n	800f0d2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	8b5b      	ldrh	r3, [r3, #26]
 800f028:	f043 0302 	orr.w	r3, r3, #2
 800f02c:	b29a      	uxth	r2, r3
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f7fe fdbe 	bl	800dbb4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f038:	4b18      	ldr	r3, [pc, #96]	; (800f09c <tcp_process+0x5d4>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d105      	bne.n	800f04e <tcp_process+0x586>
 800f042:	4b16      	ldr	r3, [pc, #88]	; (800f09c <tcp_process+0x5d4>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	4a14      	ldr	r2, [pc, #80]	; (800f09c <tcp_process+0x5d4>)
 800f04a:	6013      	str	r3, [r2, #0]
 800f04c:	e02e      	b.n	800f0ac <tcp_process+0x5e4>
 800f04e:	4b13      	ldr	r3, [pc, #76]	; (800f09c <tcp_process+0x5d4>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	617b      	str	r3, [r7, #20]
 800f054:	e027      	b.n	800f0a6 <tcp_process+0x5de>
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	68db      	ldr	r3, [r3, #12]
 800f05a:	687a      	ldr	r2, [r7, #4]
 800f05c:	429a      	cmp	r2, r3
 800f05e:	d11f      	bne.n	800f0a0 <tcp_process+0x5d8>
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	68da      	ldr	r2, [r3, #12]
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	60da      	str	r2, [r3, #12]
 800f068:	e020      	b.n	800f0ac <tcp_process+0x5e4>
 800f06a:	bf00      	nop
 800f06c:	20004518 	.word	0x20004518
 800f070:	20004510 	.word	0x20004510
 800f074:	20004516 	.word	0x20004516
 800f078:	2000450c 	.word	0x2000450c
 800f07c:	200044fc 	.word	0x200044fc
 800f080:	20007cdc 	.word	0x20007cdc
 800f084:	20007ce0 	.word	0x20007ce0
 800f088:	080179fc 	.word	0x080179fc
 800f08c:	08017c9c 	.word	0x08017c9c
 800f090:	08017a48 	.word	0x08017a48
 800f094:	20004514 	.word	0x20004514
 800f098:	20004519 	.word	0x20004519
 800f09c:	2000b3e0 	.word	0x2000b3e0
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	617b      	str	r3, [r7, #20]
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d1d4      	bne.n	800f056 <tcp_process+0x58e>
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	60da      	str	r2, [r3, #12]
 800f0b2:	4b77      	ldr	r3, [pc, #476]	; (800f290 <tcp_process+0x7c8>)
 800f0b4:	2201      	movs	r2, #1
 800f0b6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	220a      	movs	r2, #10
 800f0bc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f0be:	4b75      	ldr	r3, [pc, #468]	; (800f294 <tcp_process+0x7cc>)
 800f0c0:	681a      	ldr	r2, [r3, #0]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	60da      	str	r2, [r3, #12]
 800f0c6:	4a73      	ldr	r2, [pc, #460]	; (800f294 <tcp_process+0x7cc>)
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	6013      	str	r3, [r2, #0]
 800f0cc:	f003 f962 	bl	8012394 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f0d0:	e0d2      	b.n	800f278 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	8b5b      	ldrh	r3, [r3, #26]
 800f0d6:	f043 0302 	orr.w	r3, r3, #2
 800f0da:	b29a      	uxth	r2, r3
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	2208      	movs	r2, #8
 800f0e4:	751a      	strb	r2, [r3, #20]
      break;
 800f0e6:	e0c7      	b.n	800f278 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f0e8:	4b6b      	ldr	r3, [pc, #428]	; (800f298 <tcp_process+0x7d0>)
 800f0ea:	781b      	ldrb	r3, [r3, #0]
 800f0ec:	f003 0310 	and.w	r3, r3, #16
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	f000 80c1 	beq.w	800f278 <tcp_process+0x7b0>
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f0fa:	4b68      	ldr	r3, [pc, #416]	; (800f29c <tcp_process+0x7d4>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	429a      	cmp	r2, r3
 800f100:	f040 80ba 	bne.w	800f278 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f108:	2b00      	cmp	r3, #0
 800f10a:	f040 80b5 	bne.w	800f278 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2206      	movs	r2, #6
 800f112:	751a      	strb	r2, [r3, #20]
      break;
 800f114:	e0b0      	b.n	800f278 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f000 f9ca 	bl	800f4b0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f11c:	4b60      	ldr	r3, [pc, #384]	; (800f2a0 <tcp_process+0x7d8>)
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	f003 0320 	and.w	r3, r3, #32
 800f124:	2b00      	cmp	r3, #0
 800f126:	f000 80a9 	beq.w	800f27c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	8b5b      	ldrh	r3, [r3, #26]
 800f12e:	f043 0302 	orr.w	r3, r3, #2
 800f132:	b29a      	uxth	r2, r3
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f7fe fd3b 	bl	800dbb4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f13e:	4b59      	ldr	r3, [pc, #356]	; (800f2a4 <tcp_process+0x7dc>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	429a      	cmp	r2, r3
 800f146:	d105      	bne.n	800f154 <tcp_process+0x68c>
 800f148:	4b56      	ldr	r3, [pc, #344]	; (800f2a4 <tcp_process+0x7dc>)
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	68db      	ldr	r3, [r3, #12]
 800f14e:	4a55      	ldr	r2, [pc, #340]	; (800f2a4 <tcp_process+0x7dc>)
 800f150:	6013      	str	r3, [r2, #0]
 800f152:	e013      	b.n	800f17c <tcp_process+0x6b4>
 800f154:	4b53      	ldr	r3, [pc, #332]	; (800f2a4 <tcp_process+0x7dc>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	613b      	str	r3, [r7, #16]
 800f15a:	e00c      	b.n	800f176 <tcp_process+0x6ae>
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	68db      	ldr	r3, [r3, #12]
 800f160:	687a      	ldr	r2, [r7, #4]
 800f162:	429a      	cmp	r2, r3
 800f164:	d104      	bne.n	800f170 <tcp_process+0x6a8>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	68da      	ldr	r2, [r3, #12]
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	60da      	str	r2, [r3, #12]
 800f16e:	e005      	b.n	800f17c <tcp_process+0x6b4>
 800f170:	693b      	ldr	r3, [r7, #16]
 800f172:	68db      	ldr	r3, [r3, #12]
 800f174:	613b      	str	r3, [r7, #16]
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d1ef      	bne.n	800f15c <tcp_process+0x694>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2200      	movs	r2, #0
 800f180:	60da      	str	r2, [r3, #12]
 800f182:	4b43      	ldr	r3, [pc, #268]	; (800f290 <tcp_process+0x7c8>)
 800f184:	2201      	movs	r2, #1
 800f186:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	220a      	movs	r2, #10
 800f18c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f18e:	4b41      	ldr	r3, [pc, #260]	; (800f294 <tcp_process+0x7cc>)
 800f190:	681a      	ldr	r2, [r3, #0]
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	60da      	str	r2, [r3, #12]
 800f196:	4a3f      	ldr	r2, [pc, #252]	; (800f294 <tcp_process+0x7cc>)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6013      	str	r3, [r2, #0]
 800f19c:	f003 f8fa 	bl	8012394 <tcp_timer_needed>
      }
      break;
 800f1a0:	e06c      	b.n	800f27c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f1a2:	6878      	ldr	r0, [r7, #4]
 800f1a4:	f000 f984 	bl	800f4b0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f1a8:	4b3b      	ldr	r3, [pc, #236]	; (800f298 <tcp_process+0x7d0>)
 800f1aa:	781b      	ldrb	r3, [r3, #0]
 800f1ac:	f003 0310 	and.w	r3, r3, #16
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d065      	beq.n	800f280 <tcp_process+0x7b8>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f1b8:	4b38      	ldr	r3, [pc, #224]	; (800f29c <tcp_process+0x7d4>)
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d15f      	bne.n	800f280 <tcp_process+0x7b8>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d15b      	bne.n	800f280 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f7fe fcf3 	bl	800dbb4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f1ce:	4b35      	ldr	r3, [pc, #212]	; (800f2a4 <tcp_process+0x7dc>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	d105      	bne.n	800f1e4 <tcp_process+0x71c>
 800f1d8:	4b32      	ldr	r3, [pc, #200]	; (800f2a4 <tcp_process+0x7dc>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	68db      	ldr	r3, [r3, #12]
 800f1de:	4a31      	ldr	r2, [pc, #196]	; (800f2a4 <tcp_process+0x7dc>)
 800f1e0:	6013      	str	r3, [r2, #0]
 800f1e2:	e013      	b.n	800f20c <tcp_process+0x744>
 800f1e4:	4b2f      	ldr	r3, [pc, #188]	; (800f2a4 <tcp_process+0x7dc>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	60fb      	str	r3, [r7, #12]
 800f1ea:	e00c      	b.n	800f206 <tcp_process+0x73e>
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	68db      	ldr	r3, [r3, #12]
 800f1f0:	687a      	ldr	r2, [r7, #4]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d104      	bne.n	800f200 <tcp_process+0x738>
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	68da      	ldr	r2, [r3, #12]
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	60da      	str	r2, [r3, #12]
 800f1fe:	e005      	b.n	800f20c <tcp_process+0x744>
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	68db      	ldr	r3, [r3, #12]
 800f204:	60fb      	str	r3, [r7, #12]
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d1ef      	bne.n	800f1ec <tcp_process+0x724>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2200      	movs	r2, #0
 800f210:	60da      	str	r2, [r3, #12]
 800f212:	4b1f      	ldr	r3, [pc, #124]	; (800f290 <tcp_process+0x7c8>)
 800f214:	2201      	movs	r2, #1
 800f216:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	220a      	movs	r2, #10
 800f21c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f21e:	4b1d      	ldr	r3, [pc, #116]	; (800f294 <tcp_process+0x7cc>)
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	60da      	str	r2, [r3, #12]
 800f226:	4a1b      	ldr	r2, [pc, #108]	; (800f294 <tcp_process+0x7cc>)
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6013      	str	r3, [r2, #0]
 800f22c:	f003 f8b2 	bl	8012394 <tcp_timer_needed>
      }
      break;
 800f230:	e026      	b.n	800f280 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f000 f93c 	bl	800f4b0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f238:	4b17      	ldr	r3, [pc, #92]	; (800f298 <tcp_process+0x7d0>)
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	f003 0310 	and.w	r3, r3, #16
 800f240:	2b00      	cmp	r3, #0
 800f242:	d01f      	beq.n	800f284 <tcp_process+0x7bc>
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f248:	4b14      	ldr	r3, [pc, #80]	; (800f29c <tcp_process+0x7d4>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d119      	bne.n	800f284 <tcp_process+0x7bc>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f254:	2b00      	cmp	r3, #0
 800f256:	d115      	bne.n	800f284 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f258:	4b11      	ldr	r3, [pc, #68]	; (800f2a0 <tcp_process+0x7d8>)
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	f043 0310 	orr.w	r3, r3, #16
 800f260:	b2da      	uxtb	r2, r3
 800f262:	4b0f      	ldr	r3, [pc, #60]	; (800f2a0 <tcp_process+0x7d8>)
 800f264:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f266:	e00d      	b.n	800f284 <tcp_process+0x7bc>
    default:
      break;
 800f268:	bf00      	nop
 800f26a:	e00c      	b.n	800f286 <tcp_process+0x7be>
      break;
 800f26c:	bf00      	nop
 800f26e:	e00a      	b.n	800f286 <tcp_process+0x7be>
      break;
 800f270:	bf00      	nop
 800f272:	e008      	b.n	800f286 <tcp_process+0x7be>
      break;
 800f274:	bf00      	nop
 800f276:	e006      	b.n	800f286 <tcp_process+0x7be>
      break;
 800f278:	bf00      	nop
 800f27a:	e004      	b.n	800f286 <tcp_process+0x7be>
      break;
 800f27c:	bf00      	nop
 800f27e:	e002      	b.n	800f286 <tcp_process+0x7be>
      break;
 800f280:	bf00      	nop
 800f282:	e000      	b.n	800f286 <tcp_process+0x7be>
      break;
 800f284:	bf00      	nop
  }
  return ERR_OK;
 800f286:	2300      	movs	r3, #0
}
 800f288:	4618      	mov	r0, r3
 800f28a:	3724      	adds	r7, #36	; 0x24
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd90      	pop	{r4, r7, pc}
 800f290:	2000b3dc 	.word	0x2000b3dc
 800f294:	2000b3f0 	.word	0x2000b3f0
 800f298:	20004518 	.word	0x20004518
 800f29c:	20004510 	.word	0x20004510
 800f2a0:	20004519 	.word	0x20004519
 800f2a4:	2000b3e0 	.word	0x2000b3e0

0800f2a8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f2a8:	b590      	push	{r4, r7, lr}
 800f2aa:	b085      	sub	sp, #20
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d106      	bne.n	800f2c6 <tcp_oos_insert_segment+0x1e>
 800f2b8:	4b3b      	ldr	r3, [pc, #236]	; (800f3a8 <tcp_oos_insert_segment+0x100>)
 800f2ba:	f240 421f 	movw	r2, #1055	; 0x41f
 800f2be:	493b      	ldr	r1, [pc, #236]	; (800f3ac <tcp_oos_insert_segment+0x104>)
 800f2c0:	483b      	ldr	r0, [pc, #236]	; (800f3b0 <tcp_oos_insert_segment+0x108>)
 800f2c2:	f005 ffc9 	bl	8015258 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	68db      	ldr	r3, [r3, #12]
 800f2ca:	899b      	ldrh	r3, [r3, #12]
 800f2cc:	b29b      	uxth	r3, r3
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fb f984 	bl	800a5dc <lwip_htons>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	b2db      	uxtb	r3, r3
 800f2d8:	f003 0301 	and.w	r3, r3, #1
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d028      	beq.n	800f332 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f2e0:	6838      	ldr	r0, [r7, #0]
 800f2e2:	f7fe f973 	bl	800d5cc <tcp_segs_free>
    next = NULL;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	603b      	str	r3, [r7, #0]
 800f2ea:	e056      	b.n	800f39a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	68db      	ldr	r3, [r3, #12]
 800f2f0:	899b      	ldrh	r3, [r3, #12]
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7fb f971 	bl	800a5dc <lwip_htons>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	b2db      	uxtb	r3, r3
 800f2fe:	f003 0301 	and.w	r3, r3, #1
 800f302:	2b00      	cmp	r3, #0
 800f304:	d00d      	beq.n	800f322 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	68db      	ldr	r3, [r3, #12]
 800f30a:	899b      	ldrh	r3, [r3, #12]
 800f30c:	b29c      	uxth	r4, r3
 800f30e:	2001      	movs	r0, #1
 800f310:	f7fb f964 	bl	800a5dc <lwip_htons>
 800f314:	4603      	mov	r3, r0
 800f316:	461a      	mov	r2, r3
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	68db      	ldr	r3, [r3, #12]
 800f31c:	4322      	orrs	r2, r4
 800f31e:	b292      	uxth	r2, r2
 800f320:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f32c:	68f8      	ldr	r0, [r7, #12]
 800f32e:	f7fe f961 	bl	800d5f4 <tcp_seg_free>
    while (next &&
 800f332:	683b      	ldr	r3, [r7, #0]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d00e      	beq.n	800f356 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	891b      	ldrh	r3, [r3, #8]
 800f33c:	461a      	mov	r2, r3
 800f33e:	4b1d      	ldr	r3, [pc, #116]	; (800f3b4 <tcp_oos_insert_segment+0x10c>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	441a      	add	r2, r3
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	68db      	ldr	r3, [r3, #12]
 800f348:	685b      	ldr	r3, [r3, #4]
 800f34a:	6839      	ldr	r1, [r7, #0]
 800f34c:	8909      	ldrh	r1, [r1, #8]
 800f34e:	440b      	add	r3, r1
 800f350:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f352:	2b00      	cmp	r3, #0
 800f354:	daca      	bge.n	800f2ec <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d01e      	beq.n	800f39a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	891b      	ldrh	r3, [r3, #8]
 800f360:	461a      	mov	r2, r3
 800f362:	4b14      	ldr	r3, [pc, #80]	; (800f3b4 <tcp_oos_insert_segment+0x10c>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	441a      	add	r2, r3
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	68db      	ldr	r3, [r3, #12]
 800f36c:	685b      	ldr	r3, [r3, #4]
 800f36e:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f370:	2b00      	cmp	r3, #0
 800f372:	dd12      	ble.n	800f39a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	b29a      	uxth	r2, r3
 800f37c:	4b0d      	ldr	r3, [pc, #52]	; (800f3b4 <tcp_oos_insert_segment+0x10c>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	b29b      	uxth	r3, r3
 800f382:	1ad3      	subs	r3, r2, r3
 800f384:	b29a      	uxth	r2, r3
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	685a      	ldr	r2, [r3, #4]
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	891b      	ldrh	r3, [r3, #8]
 800f392:	4619      	mov	r1, r3
 800f394:	4610      	mov	r0, r2
 800f396:	f7fc fb79 	bl	800ba8c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	683a      	ldr	r2, [r7, #0]
 800f39e:	601a      	str	r2, [r3, #0]
}
 800f3a0:	bf00      	nop
 800f3a2:	3714      	adds	r7, #20
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd90      	pop	{r4, r7, pc}
 800f3a8:	080179fc 	.word	0x080179fc
 800f3ac:	08017cbc 	.word	0x08017cbc
 800f3b0:	08017a48 	.word	0x08017a48
 800f3b4:	2000450c 	.word	0x2000450c

0800f3b8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f3b8:	b5b0      	push	{r4, r5, r7, lr}
 800f3ba:	b086      	sub	sp, #24
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	60f8      	str	r0, [r7, #12]
 800f3c0:	60b9      	str	r1, [r7, #8]
 800f3c2:	607a      	str	r2, [r7, #4]
 800f3c4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f3c6:	e03e      	b.n	800f446 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fc fd6c 	bl	800beb4 <pbuf_clen>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f3e6:	8a7a      	ldrh	r2, [r7, #18]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d906      	bls.n	800f3fa <tcp_free_acked_segments+0x42>
 800f3ec:	4b2a      	ldr	r3, [pc, #168]	; (800f498 <tcp_free_acked_segments+0xe0>)
 800f3ee:	f240 4257 	movw	r2, #1111	; 0x457
 800f3f2:	492a      	ldr	r1, [pc, #168]	; (800f49c <tcp_free_acked_segments+0xe4>)
 800f3f4:	482a      	ldr	r0, [pc, #168]	; (800f4a0 <tcp_free_acked_segments+0xe8>)
 800f3f6:	f005 ff2f 	bl	8015258 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f400:	8a7b      	ldrh	r3, [r7, #18]
 800f402:	1ad3      	subs	r3, r2, r3
 800f404:	b29a      	uxth	r2, r3
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	891a      	ldrh	r2, [r3, #8]
 800f410:	4b24      	ldr	r3, [pc, #144]	; (800f4a4 <tcp_free_acked_segments+0xec>)
 800f412:	881b      	ldrh	r3, [r3, #0]
 800f414:	4413      	add	r3, r2
 800f416:	b29a      	uxth	r2, r3
 800f418:	4b22      	ldr	r3, [pc, #136]	; (800f4a4 <tcp_free_acked_segments+0xec>)
 800f41a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f41c:	6978      	ldr	r0, [r7, #20]
 800f41e:	f7fe f8e9 	bl	800d5f4 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d00c      	beq.n	800f446 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d109      	bne.n	800f446 <tcp_free_acked_segments+0x8e>
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d106      	bne.n	800f446 <tcp_free_acked_segments+0x8e>
 800f438:	4b17      	ldr	r3, [pc, #92]	; (800f498 <tcp_free_acked_segments+0xe0>)
 800f43a:	f240 4262 	movw	r2, #1122	; 0x462
 800f43e:	491a      	ldr	r1, [pc, #104]	; (800f4a8 <tcp_free_acked_segments+0xf0>)
 800f440:	4817      	ldr	r0, [pc, #92]	; (800f4a0 <tcp_free_acked_segments+0xe8>)
 800f442:	f005 ff09 	bl	8015258 <iprintf>
  while (seg_list != NULL &&
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d020      	beq.n	800f48e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	68db      	ldr	r3, [r3, #12]
 800f450:	685b      	ldr	r3, [r3, #4]
 800f452:	4618      	mov	r0, r3
 800f454:	f7fb f8d7 	bl	800a606 <lwip_htonl>
 800f458:	4604      	mov	r4, r0
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	891b      	ldrh	r3, [r3, #8]
 800f45e:	461d      	mov	r5, r3
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	68db      	ldr	r3, [r3, #12]
 800f464:	899b      	ldrh	r3, [r3, #12]
 800f466:	b29b      	uxth	r3, r3
 800f468:	4618      	mov	r0, r3
 800f46a:	f7fb f8b7 	bl	800a5dc <lwip_htons>
 800f46e:	4603      	mov	r3, r0
 800f470:	b2db      	uxtb	r3, r3
 800f472:	f003 0303 	and.w	r3, r3, #3
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <tcp_free_acked_segments+0xc6>
 800f47a:	2301      	movs	r3, #1
 800f47c:	e000      	b.n	800f480 <tcp_free_acked_segments+0xc8>
 800f47e:	2300      	movs	r3, #0
 800f480:	442b      	add	r3, r5
 800f482:	18e2      	adds	r2, r4, r3
 800f484:	4b09      	ldr	r3, [pc, #36]	; (800f4ac <tcp_free_acked_segments+0xf4>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	dd9c      	ble.n	800f3c8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f48e:	68bb      	ldr	r3, [r7, #8]
}
 800f490:	4618      	mov	r0, r3
 800f492:	3718      	adds	r7, #24
 800f494:	46bd      	mov	sp, r7
 800f496:	bdb0      	pop	{r4, r5, r7, pc}
 800f498:	080179fc 	.word	0x080179fc
 800f49c:	08017ce4 	.word	0x08017ce4
 800f4a0:	08017a48 	.word	0x08017a48
 800f4a4:	20004514 	.word	0x20004514
 800f4a8:	08017d0c 	.word	0x08017d0c
 800f4ac:	20004510 	.word	0x20004510

0800f4b0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f4b0:	b5b0      	push	{r4, r5, r7, lr}
 800f4b2:	b094      	sub	sp, #80	; 0x50
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d106      	bne.n	800f4d0 <tcp_receive+0x20>
 800f4c2:	4ba6      	ldr	r3, [pc, #664]	; (800f75c <tcp_receive+0x2ac>)
 800f4c4:	f240 427b 	movw	r2, #1147	; 0x47b
 800f4c8:	49a5      	ldr	r1, [pc, #660]	; (800f760 <tcp_receive+0x2b0>)
 800f4ca:	48a6      	ldr	r0, [pc, #664]	; (800f764 <tcp_receive+0x2b4>)
 800f4cc:	f005 fec4 	bl	8015258 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	7d1b      	ldrb	r3, [r3, #20]
 800f4d4:	2b03      	cmp	r3, #3
 800f4d6:	d806      	bhi.n	800f4e6 <tcp_receive+0x36>
 800f4d8:	4ba0      	ldr	r3, [pc, #640]	; (800f75c <tcp_receive+0x2ac>)
 800f4da:	f240 427c 	movw	r2, #1148	; 0x47c
 800f4de:	49a2      	ldr	r1, [pc, #648]	; (800f768 <tcp_receive+0x2b8>)
 800f4e0:	48a0      	ldr	r0, [pc, #640]	; (800f764 <tcp_receive+0x2b4>)
 800f4e2:	f005 feb9 	bl	8015258 <iprintf>

  if (flags & TCP_ACK) {
 800f4e6:	4ba1      	ldr	r3, [pc, #644]	; (800f76c <tcp_receive+0x2bc>)
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	f003 0310 	and.w	r3, r3, #16
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	f000 8263 	beq.w	800f9ba <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f500:	4413      	add	r3, r2
 800f502:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f508:	4b99      	ldr	r3, [pc, #612]	; (800f770 <tcp_receive+0x2c0>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	1ad3      	subs	r3, r2, r3
 800f50e:	2b00      	cmp	r3, #0
 800f510:	db1b      	blt.n	800f54a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f516:	4b96      	ldr	r3, [pc, #600]	; (800f770 <tcp_receive+0x2c0>)
 800f518:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f51a:	429a      	cmp	r2, r3
 800f51c:	d106      	bne.n	800f52c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f522:	4b94      	ldr	r3, [pc, #592]	; (800f774 <tcp_receive+0x2c4>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	1ad3      	subs	r3, r2, r3
 800f528:	2b00      	cmp	r3, #0
 800f52a:	db0e      	blt.n	800f54a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f530:	4b90      	ldr	r3, [pc, #576]	; (800f774 <tcp_receive+0x2c4>)
 800f532:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f534:	429a      	cmp	r2, r3
 800f536:	d125      	bne.n	800f584 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f538:	4b8f      	ldr	r3, [pc, #572]	; (800f778 <tcp_receive+0x2c8>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	89db      	ldrh	r3, [r3, #14]
 800f53e:	b29a      	uxth	r2, r3
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f546:	429a      	cmp	r2, r3
 800f548:	d91c      	bls.n	800f584 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f54a:	4b8b      	ldr	r3, [pc, #556]	; (800f778 <tcp_receive+0x2c8>)
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	89db      	ldrh	r3, [r3, #14]
 800f550:	b29a      	uxth	r2, r3
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f564:	429a      	cmp	r2, r3
 800f566:	d205      	bcs.n	800f574 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f574:	4b7e      	ldr	r3, [pc, #504]	; (800f770 <tcp_receive+0x2c0>)
 800f576:	681a      	ldr	r2, [r3, #0]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f57c:	4b7d      	ldr	r3, [pc, #500]	; (800f774 <tcp_receive+0x2c4>)
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f584:	4b7b      	ldr	r3, [pc, #492]	; (800f774 <tcp_receive+0x2c4>)
 800f586:	681a      	ldr	r2, [r3, #0]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f58c:	1ad3      	subs	r3, r2, r3
 800f58e:	2b00      	cmp	r3, #0
 800f590:	dc58      	bgt.n	800f644 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f592:	4b7a      	ldr	r3, [pc, #488]	; (800f77c <tcp_receive+0x2cc>)
 800f594:	881b      	ldrh	r3, [r3, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d14b      	bne.n	800f632 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f59e:	687a      	ldr	r2, [r7, #4]
 800f5a0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f5a4:	4413      	add	r3, r2
 800f5a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5a8:	429a      	cmp	r2, r3
 800f5aa:	d142      	bne.n	800f632 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	db3d      	blt.n	800f632 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f5ba:	4b6e      	ldr	r3, [pc, #440]	; (800f774 <tcp_receive+0x2c4>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	429a      	cmp	r2, r3
 800f5c0:	d137      	bne.n	800f632 <tcp_receive+0x182>
              found_dupack = 1;
 800f5c2:	2301      	movs	r3, #1
 800f5c4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f5cc:	2bff      	cmp	r3, #255	; 0xff
 800f5ce:	d007      	beq.n	800f5e0 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	b2da      	uxtb	r2, r3
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f5e6:	2b03      	cmp	r3, #3
 800f5e8:	d91b      	bls.n	800f622 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f5f4:	4413      	add	r3, r2
 800f5f6:	b29a      	uxth	r2, r3
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d30a      	bcc.n	800f618 <tcp_receive+0x168>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f60c:	4413      	add	r3, r2
 800f60e:	b29a      	uxth	r2, r3
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f616:	e004      	b.n	800f622 <tcp_receive+0x172>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f61e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f628:	2b02      	cmp	r3, #2
 800f62a:	d902      	bls.n	800f632 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f002 fb47 	bl	8011cc0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f632:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f634:	2b00      	cmp	r3, #0
 800f636:	f040 8160 	bne.w	800f8fa <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	2200      	movs	r2, #0
 800f63e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f642:	e15a      	b.n	800f8fa <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f644:	4b4b      	ldr	r3, [pc, #300]	; (800f774 <tcp_receive+0x2c4>)
 800f646:	681a      	ldr	r2, [r3, #0]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f64c:	1ad3      	subs	r3, r2, r3
 800f64e:	3b01      	subs	r3, #1
 800f650:	2b00      	cmp	r3, #0
 800f652:	f2c0 814d 	blt.w	800f8f0 <tcp_receive+0x440>
 800f656:	4b47      	ldr	r3, [pc, #284]	; (800f774 <tcp_receive+0x2c4>)
 800f658:	681a      	ldr	r2, [r3, #0]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f65e:	1ad3      	subs	r3, r2, r3
 800f660:	2b00      	cmp	r3, #0
 800f662:	f300 8145 	bgt.w	800f8f0 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	8b5b      	ldrh	r3, [r3, #26]
 800f66a:	f003 0304 	and.w	r3, r3, #4
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d010      	beq.n	800f694 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	8b5b      	ldrh	r3, [r3, #26]
 800f676:	f023 0304 	bic.w	r3, r3, #4
 800f67a:	b29a      	uxth	r2, r3
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2200      	movs	r2, #0
 800f690:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	2200      	movs	r2, #0
 800f698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f6a2:	10db      	asrs	r3, r3, #3
 800f6a4:	b21b      	sxth	r3, r3
 800f6a6:	b29a      	uxth	r2, r3
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f6ae:	b29b      	uxth	r3, r3
 800f6b0:	4413      	add	r3, r2
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	b21a      	sxth	r2, r3
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f6bc:	4b2d      	ldr	r3, [pc, #180]	; (800f774 <tcp_receive+0x2c4>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	b29a      	uxth	r2, r3
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	1ad3      	subs	r3, r2, r3
 800f6ca:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f6d4:	4b27      	ldr	r3, [pc, #156]	; (800f774 <tcp_receive+0x2c4>)
 800f6d6:	681a      	ldr	r2, [r3, #0]
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	7d1b      	ldrb	r3, [r3, #20]
 800f6e0:	2b03      	cmp	r3, #3
 800f6e2:	f240 8096 	bls.w	800f812 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d244      	bcs.n	800f780 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	8b5b      	ldrh	r3, [r3, #26]
 800f6fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d001      	beq.n	800f706 <tcp_receive+0x256>
 800f702:	2301      	movs	r3, #1
 800f704:	e000      	b.n	800f708 <tcp_receive+0x258>
 800f706:	2302      	movs	r3, #2
 800f708:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f70c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f710:	b29a      	uxth	r2, r3
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f716:	fb12 f303 	smulbb	r3, r2, r3
 800f71a:	b29b      	uxth	r3, r3
 800f71c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f71e:	4293      	cmp	r3, r2
 800f720:	bf28      	it	cs
 800f722:	4613      	movcs	r3, r2
 800f724:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f72c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f72e:	4413      	add	r3, r2
 800f730:	b29a      	uxth	r2, r3
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f738:	429a      	cmp	r2, r3
 800f73a:	d309      	bcc.n	800f750 <tcp_receive+0x2a0>
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f742:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f744:	4413      	add	r3, r2
 800f746:	b29a      	uxth	r2, r3
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f74e:	e060      	b.n	800f812 <tcp_receive+0x362>
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f756:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f75a:	e05a      	b.n	800f812 <tcp_receive+0x362>
 800f75c:	080179fc 	.word	0x080179fc
 800f760:	08017d2c 	.word	0x08017d2c
 800f764:	08017a48 	.word	0x08017a48
 800f768:	08017d48 	.word	0x08017d48
 800f76c:	20004518 	.word	0x20004518
 800f770:	2000450c 	.word	0x2000450c
 800f774:	20004510 	.word	0x20004510
 800f778:	200044fc 	.word	0x200044fc
 800f77c:	20004516 	.word	0x20004516
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f786:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f788:	4413      	add	r3, r2
 800f78a:	b29a      	uxth	r2, r3
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f792:	429a      	cmp	r2, r3
 800f794:	d309      	bcc.n	800f7aa <tcp_receive+0x2fa>
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f79c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f79e:	4413      	add	r3, r2
 800f7a0:	b29a      	uxth	r2, r3
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f7a8:	e004      	b.n	800f7b4 <tcp_receive+0x304>
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	d326      	bcc.n	800f812 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f7d0:	1ad3      	subs	r3, r2, r3
 800f7d2:	b29a      	uxth	r2, r3
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7e4:	4413      	add	r3, r2
 800f7e6:	b29a      	uxth	r2, r3
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d30a      	bcc.n	800f808 <tcp_receive+0x358>
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7fc:	4413      	add	r3, r2
 800f7fe:	b29a      	uxth	r2, r3
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f806:	e004      	b.n	800f812 <tcp_receive+0x362>
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f80e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f81a:	4a98      	ldr	r2, [pc, #608]	; (800fa7c <tcp_receive+0x5cc>)
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f7ff fdcb 	bl	800f3b8 <tcp_free_acked_segments>
 800f822:	4602      	mov	r2, r0
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f830:	4a93      	ldr	r2, [pc, #588]	; (800fa80 <tcp_receive+0x5d0>)
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f7ff fdc0 	bl	800f3b8 <tcp_free_acked_segments>
 800f838:	4602      	mov	r2, r0
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f842:	2b00      	cmp	r3, #0
 800f844:	d104      	bne.n	800f850 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f84c:	861a      	strh	r2, [r3, #48]	; 0x30
 800f84e:	e002      	b.n	800f856 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	2200      	movs	r2, #0
 800f854:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2200      	movs	r2, #0
 800f85a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f860:	2b00      	cmp	r3, #0
 800f862:	d103      	bne.n	800f86c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	2200      	movs	r2, #0
 800f868:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f872:	4b84      	ldr	r3, [pc, #528]	; (800fa84 <tcp_receive+0x5d4>)
 800f874:	881b      	ldrh	r3, [r3, #0]
 800f876:	4413      	add	r3, r2
 800f878:	b29a      	uxth	r2, r3
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	8b5b      	ldrh	r3, [r3, #26]
 800f884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d035      	beq.n	800f8f8 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f890:	2b00      	cmp	r3, #0
 800f892:	d118      	bne.n	800f8c6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d00c      	beq.n	800f8b6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8a4:	68db      	ldr	r3, [r3, #12]
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7fa feac 	bl	800a606 <lwip_htonl>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	dc20      	bgt.n	800f8f8 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	8b5b      	ldrh	r3, [r3, #26]
 800f8ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f8be:	b29a      	uxth	r2, r3
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f8c4:	e018      	b.n	800f8f8 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8ce:	68db      	ldr	r3, [r3, #12]
 800f8d0:	685b      	ldr	r3, [r3, #4]
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fa fe97 	bl	800a606 <lwip_htonl>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	1ae3      	subs	r3, r4, r3
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	dc0b      	bgt.n	800f8f8 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	8b5b      	ldrh	r3, [r3, #26]
 800f8e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f8e8:	b29a      	uxth	r2, r3
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f8ee:	e003      	b.n	800f8f8 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f8f0:	6878      	ldr	r0, [r7, #4]
 800f8f2:	f002 fbdf 	bl	80120b4 <tcp_send_empty_ack>
 800f8f6:	e000      	b.n	800f8fa <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f8f8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d05b      	beq.n	800f9ba <tcp_receive+0x50a>
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f906:	4b60      	ldr	r3, [pc, #384]	; (800fa88 <tcp_receive+0x5d8>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	1ad3      	subs	r3, r2, r3
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	da54      	bge.n	800f9ba <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f910:	4b5e      	ldr	r3, [pc, #376]	; (800fa8c <tcp_receive+0x5dc>)
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	b29a      	uxth	r2, r3
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f91a:	b29b      	uxth	r3, r3
 800f91c:	1ad3      	subs	r3, r2, r3
 800f91e:	b29b      	uxth	r3, r3
 800f920:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f924:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f92e:	10db      	asrs	r3, r3, #3
 800f930:	b21b      	sxth	r3, r3
 800f932:	b29b      	uxth	r3, r3
 800f934:	1ad3      	subs	r3, r2, r3
 800f936:	b29b      	uxth	r3, r3
 800f938:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f942:	b29a      	uxth	r2, r3
 800f944:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f948:	4413      	add	r3, r2
 800f94a:	b29b      	uxth	r3, r3
 800f94c:	b21a      	sxth	r2, r3
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f952:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f956:	2b00      	cmp	r3, #0
 800f958:	da05      	bge.n	800f966 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f95a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f95e:	425b      	negs	r3, r3
 800f960:	b29b      	uxth	r3, r3
 800f962:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f966:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f970:	109b      	asrs	r3, r3, #2
 800f972:	b21b      	sxth	r3, r3
 800f974:	b29b      	uxth	r3, r3
 800f976:	1ad3      	subs	r3, r2, r3
 800f978:	b29b      	uxth	r3, r3
 800f97a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f984:	b29a      	uxth	r2, r3
 800f986:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f98a:	4413      	add	r3, r2
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	b21a      	sxth	r2, r3
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f99a:	10db      	asrs	r3, r3, #3
 800f99c:	b21b      	sxth	r3, r3
 800f99e:	b29a      	uxth	r2, r3
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f9a6:	b29b      	uxth	r3, r3
 800f9a8:	4413      	add	r3, r2
 800f9aa:	b29b      	uxth	r3, r3
 800f9ac:	b21a      	sxth	r2, r3
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f9ba:	4b35      	ldr	r3, [pc, #212]	; (800fa90 <tcp_receive+0x5e0>)
 800f9bc:	881b      	ldrh	r3, [r3, #0]
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	f000 84e1 	beq.w	8010386 <tcp_receive+0xed6>
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	7d1b      	ldrb	r3, [r3, #20]
 800f9c8:	2b06      	cmp	r3, #6
 800f9ca:	f200 84dc 	bhi.w	8010386 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9d2:	4b30      	ldr	r3, [pc, #192]	; (800fa94 <tcp_receive+0x5e4>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	1ad3      	subs	r3, r2, r3
 800f9d8:	3b01      	subs	r3, #1
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	f2c0 808e 	blt.w	800fafc <tcp_receive+0x64c>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9e4:	4b2a      	ldr	r3, [pc, #168]	; (800fa90 <tcp_receive+0x5e0>)
 800f9e6:	881b      	ldrh	r3, [r3, #0]
 800f9e8:	4619      	mov	r1, r3
 800f9ea:	4b2a      	ldr	r3, [pc, #168]	; (800fa94 <tcp_receive+0x5e4>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	440b      	add	r3, r1
 800f9f0:	1ad3      	subs	r3, r2, r3
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	f300 8081 	bgt.w	800fafc <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f9fa:	4b27      	ldr	r3, [pc, #156]	; (800fa98 <tcp_receive+0x5e8>)
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fa04:	4b23      	ldr	r3, [pc, #140]	; (800fa94 <tcp_receive+0x5e4>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	1ad3      	subs	r3, r2, r3
 800fa0a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fa0c:	4b22      	ldr	r3, [pc, #136]	; (800fa98 <tcp_receive+0x5e8>)
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d106      	bne.n	800fa22 <tcp_receive+0x572>
 800fa14:	4b21      	ldr	r3, [pc, #132]	; (800fa9c <tcp_receive+0x5ec>)
 800fa16:	f240 5294 	movw	r2, #1428	; 0x594
 800fa1a:	4921      	ldr	r1, [pc, #132]	; (800faa0 <tcp_receive+0x5f0>)
 800fa1c:	4821      	ldr	r0, [pc, #132]	; (800faa4 <tcp_receive+0x5f4>)
 800fa1e:	f005 fc1b 	bl	8015258 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fa22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d906      	bls.n	800fa3a <tcp_receive+0x58a>
 800fa2c:	4b1b      	ldr	r3, [pc, #108]	; (800fa9c <tcp_receive+0x5ec>)
 800fa2e:	f240 5295 	movw	r2, #1429	; 0x595
 800fa32:	491d      	ldr	r1, [pc, #116]	; (800faa8 <tcp_receive+0x5f8>)
 800fa34:	481b      	ldr	r0, [pc, #108]	; (800faa4 <tcp_receive+0x5f4>)
 800fa36:	f005 fc0f 	bl	8015258 <iprintf>
      off = (u16_t)off32;
 800fa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa3c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fa40:	4b15      	ldr	r3, [pc, #84]	; (800fa98 <tcp_receive+0x5e8>)
 800fa42:	685b      	ldr	r3, [r3, #4]
 800fa44:	891b      	ldrh	r3, [r3, #8]
 800fa46:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fa4a:	429a      	cmp	r2, r3
 800fa4c:	d906      	bls.n	800fa5c <tcp_receive+0x5ac>
 800fa4e:	4b13      	ldr	r3, [pc, #76]	; (800fa9c <tcp_receive+0x5ec>)
 800fa50:	f240 5297 	movw	r2, #1431	; 0x597
 800fa54:	4915      	ldr	r1, [pc, #84]	; (800faac <tcp_receive+0x5fc>)
 800fa56:	4813      	ldr	r0, [pc, #76]	; (800faa4 <tcp_receive+0x5f4>)
 800fa58:	f005 fbfe 	bl	8015258 <iprintf>
      inseg.len -= off;
 800fa5c:	4b0e      	ldr	r3, [pc, #56]	; (800fa98 <tcp_receive+0x5e8>)
 800fa5e:	891a      	ldrh	r2, [r3, #8]
 800fa60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fa64:	1ad3      	subs	r3, r2, r3
 800fa66:	b29a      	uxth	r2, r3
 800fa68:	4b0b      	ldr	r3, [pc, #44]	; (800fa98 <tcp_receive+0x5e8>)
 800fa6a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fa6c:	4b0a      	ldr	r3, [pc, #40]	; (800fa98 <tcp_receive+0x5e8>)
 800fa6e:	685b      	ldr	r3, [r3, #4]
 800fa70:	891a      	ldrh	r2, [r3, #8]
 800fa72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fa76:	1ad3      	subs	r3, r2, r3
 800fa78:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800fa7a:	e029      	b.n	800fad0 <tcp_receive+0x620>
 800fa7c:	08017d64 	.word	0x08017d64
 800fa80:	08017d6c 	.word	0x08017d6c
 800fa84:	20004514 	.word	0x20004514
 800fa88:	20004510 	.word	0x20004510
 800fa8c:	2000b3e4 	.word	0x2000b3e4
 800fa90:	20004516 	.word	0x20004516
 800fa94:	2000450c 	.word	0x2000450c
 800fa98:	200044ec 	.word	0x200044ec
 800fa9c:	080179fc 	.word	0x080179fc
 800faa0:	08017d74 	.word	0x08017d74
 800faa4:	08017a48 	.word	0x08017a48
 800faa8:	08017d84 	.word	0x08017d84
 800faac:	08017d94 	.word	0x08017d94
        off -= p->len;
 800fab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fab2:	895b      	ldrh	r3, [r3, #10]
 800fab4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fab8:	1ad3      	subs	r3, r2, r3
 800faba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fabe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fac0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fac2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fac6:	2200      	movs	r2, #0
 800fac8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800faca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800fad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fad2:	895b      	ldrh	r3, [r3, #10]
 800fad4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fad8:	429a      	cmp	r2, r3
 800fada:	d8e9      	bhi.n	800fab0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fadc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fae0:	4619      	mov	r1, r3
 800fae2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fae4:	f7fc f8d2 	bl	800bc8c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faec:	4a91      	ldr	r2, [pc, #580]	; (800fd34 <tcp_receive+0x884>)
 800faee:	6013      	str	r3, [r2, #0]
 800faf0:	4b91      	ldr	r3, [pc, #580]	; (800fd38 <tcp_receive+0x888>)
 800faf2:	68db      	ldr	r3, [r3, #12]
 800faf4:	4a8f      	ldr	r2, [pc, #572]	; (800fd34 <tcp_receive+0x884>)
 800faf6:	6812      	ldr	r2, [r2, #0]
 800faf8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fafa:	e00d      	b.n	800fb18 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fafc:	4b8d      	ldr	r3, [pc, #564]	; (800fd34 <tcp_receive+0x884>)
 800fafe:	681a      	ldr	r2, [r3, #0]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb04:	1ad3      	subs	r3, r2, r3
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	da06      	bge.n	800fb18 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	8b5b      	ldrh	r3, [r3, #26]
 800fb0e:	f043 0302 	orr.w	r3, r3, #2
 800fb12:	b29a      	uxth	r2, r3
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fb18:	4b86      	ldr	r3, [pc, #536]	; (800fd34 <tcp_receive+0x884>)
 800fb1a:	681a      	ldr	r2, [r3, #0]
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb20:	1ad3      	subs	r3, r2, r3
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	f2c0 842a 	blt.w	801037c <tcp_receive+0xecc>
 800fb28:	4b82      	ldr	r3, [pc, #520]	; (800fd34 <tcp_receive+0x884>)
 800fb2a:	681a      	ldr	r2, [r3, #0]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb30:	6879      	ldr	r1, [r7, #4]
 800fb32:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fb34:	440b      	add	r3, r1
 800fb36:	1ad3      	subs	r3, r2, r3
 800fb38:	3301      	adds	r3, #1
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	f300 841e 	bgt.w	801037c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb44:	4b7b      	ldr	r3, [pc, #492]	; (800fd34 <tcp_receive+0x884>)
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	f040 829a 	bne.w	8010082 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fb4e:	4b7a      	ldr	r3, [pc, #488]	; (800fd38 <tcp_receive+0x888>)
 800fb50:	891c      	ldrh	r4, [r3, #8]
 800fb52:	4b79      	ldr	r3, [pc, #484]	; (800fd38 <tcp_receive+0x888>)
 800fb54:	68db      	ldr	r3, [r3, #12]
 800fb56:	899b      	ldrh	r3, [r3, #12]
 800fb58:	b29b      	uxth	r3, r3
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f7fa fd3e 	bl	800a5dc <lwip_htons>
 800fb60:	4603      	mov	r3, r0
 800fb62:	b2db      	uxtb	r3, r3
 800fb64:	f003 0303 	and.w	r3, r3, #3
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d001      	beq.n	800fb70 <tcp_receive+0x6c0>
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	e000      	b.n	800fb72 <tcp_receive+0x6c2>
 800fb70:	2300      	movs	r3, #0
 800fb72:	4423      	add	r3, r4
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	4b71      	ldr	r3, [pc, #452]	; (800fd3c <tcp_receive+0x88c>)
 800fb78:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fb7e:	4b6f      	ldr	r3, [pc, #444]	; (800fd3c <tcp_receive+0x88c>)
 800fb80:	881b      	ldrh	r3, [r3, #0]
 800fb82:	429a      	cmp	r2, r3
 800fb84:	d275      	bcs.n	800fc72 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fb86:	4b6c      	ldr	r3, [pc, #432]	; (800fd38 <tcp_receive+0x888>)
 800fb88:	68db      	ldr	r3, [r3, #12]
 800fb8a:	899b      	ldrh	r3, [r3, #12]
 800fb8c:	b29b      	uxth	r3, r3
 800fb8e:	4618      	mov	r0, r3
 800fb90:	f7fa fd24 	bl	800a5dc <lwip_htons>
 800fb94:	4603      	mov	r3, r0
 800fb96:	b2db      	uxtb	r3, r3
 800fb98:	f003 0301 	and.w	r3, r3, #1
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d01f      	beq.n	800fbe0 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fba0:	4b65      	ldr	r3, [pc, #404]	; (800fd38 <tcp_receive+0x888>)
 800fba2:	68db      	ldr	r3, [r3, #12]
 800fba4:	899b      	ldrh	r3, [r3, #12]
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	b21b      	sxth	r3, r3
 800fbaa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fbae:	b21c      	sxth	r4, r3
 800fbb0:	4b61      	ldr	r3, [pc, #388]	; (800fd38 <tcp_receive+0x888>)
 800fbb2:	68db      	ldr	r3, [r3, #12]
 800fbb4:	899b      	ldrh	r3, [r3, #12]
 800fbb6:	b29b      	uxth	r3, r3
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7fa fd0f 	bl	800a5dc <lwip_htons>
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	b2db      	uxtb	r3, r3
 800fbc2:	b29b      	uxth	r3, r3
 800fbc4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7fa fd06 	bl	800a5dc <lwip_htons>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	b21b      	sxth	r3, r3
 800fbd4:	4323      	orrs	r3, r4
 800fbd6:	b21a      	sxth	r2, r3
 800fbd8:	4b57      	ldr	r3, [pc, #348]	; (800fd38 <tcp_receive+0x888>)
 800fbda:	68db      	ldr	r3, [r3, #12]
 800fbdc:	b292      	uxth	r2, r2
 800fbde:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fbe4:	4b54      	ldr	r3, [pc, #336]	; (800fd38 <tcp_receive+0x888>)
 800fbe6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fbe8:	4b53      	ldr	r3, [pc, #332]	; (800fd38 <tcp_receive+0x888>)
 800fbea:	68db      	ldr	r3, [r3, #12]
 800fbec:	899b      	ldrh	r3, [r3, #12]
 800fbee:	b29b      	uxth	r3, r3
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7fa fcf3 	bl	800a5dc <lwip_htons>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	b2db      	uxtb	r3, r3
 800fbfa:	f003 0302 	and.w	r3, r3, #2
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d005      	beq.n	800fc0e <tcp_receive+0x75e>
            inseg.len -= 1;
 800fc02:	4b4d      	ldr	r3, [pc, #308]	; (800fd38 <tcp_receive+0x888>)
 800fc04:	891b      	ldrh	r3, [r3, #8]
 800fc06:	3b01      	subs	r3, #1
 800fc08:	b29a      	uxth	r2, r3
 800fc0a:	4b4b      	ldr	r3, [pc, #300]	; (800fd38 <tcp_receive+0x888>)
 800fc0c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fc0e:	4b4a      	ldr	r3, [pc, #296]	; (800fd38 <tcp_receive+0x888>)
 800fc10:	685a      	ldr	r2, [r3, #4]
 800fc12:	4b49      	ldr	r3, [pc, #292]	; (800fd38 <tcp_receive+0x888>)
 800fc14:	891b      	ldrh	r3, [r3, #8]
 800fc16:	4619      	mov	r1, r3
 800fc18:	4610      	mov	r0, r2
 800fc1a:	f7fb ff37 	bl	800ba8c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fc1e:	4b46      	ldr	r3, [pc, #280]	; (800fd38 <tcp_receive+0x888>)
 800fc20:	891c      	ldrh	r4, [r3, #8]
 800fc22:	4b45      	ldr	r3, [pc, #276]	; (800fd38 <tcp_receive+0x888>)
 800fc24:	68db      	ldr	r3, [r3, #12]
 800fc26:	899b      	ldrh	r3, [r3, #12]
 800fc28:	b29b      	uxth	r3, r3
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7fa fcd6 	bl	800a5dc <lwip_htons>
 800fc30:	4603      	mov	r3, r0
 800fc32:	b2db      	uxtb	r3, r3
 800fc34:	f003 0303 	and.w	r3, r3, #3
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d001      	beq.n	800fc40 <tcp_receive+0x790>
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	e000      	b.n	800fc42 <tcp_receive+0x792>
 800fc40:	2300      	movs	r3, #0
 800fc42:	4423      	add	r3, r4
 800fc44:	b29a      	uxth	r2, r3
 800fc46:	4b3d      	ldr	r3, [pc, #244]	; (800fd3c <tcp_receive+0x88c>)
 800fc48:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fc4a:	4b3c      	ldr	r3, [pc, #240]	; (800fd3c <tcp_receive+0x88c>)
 800fc4c:	881b      	ldrh	r3, [r3, #0]
 800fc4e:	461a      	mov	r2, r3
 800fc50:	4b38      	ldr	r3, [pc, #224]	; (800fd34 <tcp_receive+0x884>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	441a      	add	r2, r3
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc5a:	6879      	ldr	r1, [r7, #4]
 800fc5c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fc5e:	440b      	add	r3, r1
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d006      	beq.n	800fc72 <tcp_receive+0x7c2>
 800fc64:	4b36      	ldr	r3, [pc, #216]	; (800fd40 <tcp_receive+0x890>)
 800fc66:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800fc6a:	4936      	ldr	r1, [pc, #216]	; (800fd44 <tcp_receive+0x894>)
 800fc6c:	4836      	ldr	r0, [pc, #216]	; (800fd48 <tcp_receive+0x898>)
 800fc6e:	f005 faf3 	bl	8015258 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	f000 80e7 	beq.w	800fe4a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fc7c:	4b2e      	ldr	r3, [pc, #184]	; (800fd38 <tcp_receive+0x888>)
 800fc7e:	68db      	ldr	r3, [r3, #12]
 800fc80:	899b      	ldrh	r3, [r3, #12]
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	4618      	mov	r0, r3
 800fc86:	f7fa fca9 	bl	800a5dc <lwip_htons>
 800fc8a:	4603      	mov	r3, r0
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	f003 0301 	and.w	r3, r3, #1
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d010      	beq.n	800fcb8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fc96:	e00a      	b.n	800fcae <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc9c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fca2:	681a      	ldr	r2, [r3, #0]
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fca8:	68f8      	ldr	r0, [r7, #12]
 800fcaa:	f7fd fca3 	bl	800d5f4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d1f0      	bne.n	800fc98 <tcp_receive+0x7e8>
 800fcb6:	e0c8      	b.n	800fe4a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcbc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fcbe:	e052      	b.n	800fd66 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fcc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcc2:	68db      	ldr	r3, [r3, #12]
 800fcc4:	899b      	ldrh	r3, [r3, #12]
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f7fa fc87 	bl	800a5dc <lwip_htons>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	b2db      	uxtb	r3, r3
 800fcd2:	f003 0301 	and.w	r3, r3, #1
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d03d      	beq.n	800fd56 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fcda:	4b17      	ldr	r3, [pc, #92]	; (800fd38 <tcp_receive+0x888>)
 800fcdc:	68db      	ldr	r3, [r3, #12]
 800fcde:	899b      	ldrh	r3, [r3, #12]
 800fce0:	b29b      	uxth	r3, r3
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7fa fc7a 	bl	800a5dc <lwip_htons>
 800fce8:	4603      	mov	r3, r0
 800fcea:	b2db      	uxtb	r3, r3
 800fcec:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d130      	bne.n	800fd56 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fcf4:	4b10      	ldr	r3, [pc, #64]	; (800fd38 <tcp_receive+0x888>)
 800fcf6:	68db      	ldr	r3, [r3, #12]
 800fcf8:	899b      	ldrh	r3, [r3, #12]
 800fcfa:	b29c      	uxth	r4, r3
 800fcfc:	2001      	movs	r0, #1
 800fcfe:	f7fa fc6d 	bl	800a5dc <lwip_htons>
 800fd02:	4603      	mov	r3, r0
 800fd04:	461a      	mov	r2, r3
 800fd06:	4b0c      	ldr	r3, [pc, #48]	; (800fd38 <tcp_receive+0x888>)
 800fd08:	68db      	ldr	r3, [r3, #12]
 800fd0a:	4322      	orrs	r2, r4
 800fd0c:	b292      	uxth	r2, r2
 800fd0e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fd10:	4b09      	ldr	r3, [pc, #36]	; (800fd38 <tcp_receive+0x888>)
 800fd12:	891c      	ldrh	r4, [r3, #8]
 800fd14:	4b08      	ldr	r3, [pc, #32]	; (800fd38 <tcp_receive+0x888>)
 800fd16:	68db      	ldr	r3, [r3, #12]
 800fd18:	899b      	ldrh	r3, [r3, #12]
 800fd1a:	b29b      	uxth	r3, r3
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	f7fa fc5d 	bl	800a5dc <lwip_htons>
 800fd22:	4603      	mov	r3, r0
 800fd24:	b2db      	uxtb	r3, r3
 800fd26:	f003 0303 	and.w	r3, r3, #3
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d00e      	beq.n	800fd4c <tcp_receive+0x89c>
 800fd2e:	2301      	movs	r3, #1
 800fd30:	e00d      	b.n	800fd4e <tcp_receive+0x89e>
 800fd32:	bf00      	nop
 800fd34:	2000450c 	.word	0x2000450c
 800fd38:	200044ec 	.word	0x200044ec
 800fd3c:	20004516 	.word	0x20004516
 800fd40:	080179fc 	.word	0x080179fc
 800fd44:	08017da4 	.word	0x08017da4
 800fd48:	08017a48 	.word	0x08017a48
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	4423      	add	r3, r4
 800fd50:	b29a      	uxth	r2, r3
 800fd52:	4b98      	ldr	r3, [pc, #608]	; (800ffb4 <tcp_receive+0xb04>)
 800fd54:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fd56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd58:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fd5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fd60:	6938      	ldr	r0, [r7, #16]
 800fd62:	f7fd fc47 	bl	800d5f4 <tcp_seg_free>
            while (next &&
 800fd66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d00e      	beq.n	800fd8a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fd6c:	4b91      	ldr	r3, [pc, #580]	; (800ffb4 <tcp_receive+0xb04>)
 800fd6e:	881b      	ldrh	r3, [r3, #0]
 800fd70:	461a      	mov	r2, r3
 800fd72:	4b91      	ldr	r3, [pc, #580]	; (800ffb8 <tcp_receive+0xb08>)
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	441a      	add	r2, r3
 800fd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd7a:	68db      	ldr	r3, [r3, #12]
 800fd7c:	685b      	ldr	r3, [r3, #4]
 800fd7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fd80:	8909      	ldrh	r1, [r1, #8]
 800fd82:	440b      	add	r3, r1
 800fd84:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	da9a      	bge.n	800fcc0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fd8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d059      	beq.n	800fe44 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800fd90:	4b88      	ldr	r3, [pc, #544]	; (800ffb4 <tcp_receive+0xb04>)
 800fd92:	881b      	ldrh	r3, [r3, #0]
 800fd94:	461a      	mov	r2, r3
 800fd96:	4b88      	ldr	r3, [pc, #544]	; (800ffb8 <tcp_receive+0xb08>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	441a      	add	r2, r3
 800fd9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd9e:	68db      	ldr	r3, [r3, #12]
 800fda0:	685b      	ldr	r3, [r3, #4]
 800fda2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	dd4d      	ble.n	800fe44 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800fda8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdaa:	68db      	ldr	r3, [r3, #12]
 800fdac:	685b      	ldr	r3, [r3, #4]
 800fdae:	b29a      	uxth	r2, r3
 800fdb0:	4b81      	ldr	r3, [pc, #516]	; (800ffb8 <tcp_receive+0xb08>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	b29b      	uxth	r3, r3
 800fdb6:	1ad3      	subs	r3, r2, r3
 800fdb8:	b29a      	uxth	r2, r3
 800fdba:	4b80      	ldr	r3, [pc, #512]	; (800ffbc <tcp_receive+0xb0c>)
 800fdbc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fdbe:	4b7f      	ldr	r3, [pc, #508]	; (800ffbc <tcp_receive+0xb0c>)
 800fdc0:	68db      	ldr	r3, [r3, #12]
 800fdc2:	899b      	ldrh	r3, [r3, #12]
 800fdc4:	b29b      	uxth	r3, r3
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f7fa fc08 	bl	800a5dc <lwip_htons>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	b2db      	uxtb	r3, r3
 800fdd0:	f003 0302 	and.w	r3, r3, #2
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d005      	beq.n	800fde4 <tcp_receive+0x934>
                inseg.len -= 1;
 800fdd8:	4b78      	ldr	r3, [pc, #480]	; (800ffbc <tcp_receive+0xb0c>)
 800fdda:	891b      	ldrh	r3, [r3, #8]
 800fddc:	3b01      	subs	r3, #1
 800fdde:	b29a      	uxth	r2, r3
 800fde0:	4b76      	ldr	r3, [pc, #472]	; (800ffbc <tcp_receive+0xb0c>)
 800fde2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fde4:	4b75      	ldr	r3, [pc, #468]	; (800ffbc <tcp_receive+0xb0c>)
 800fde6:	685a      	ldr	r2, [r3, #4]
 800fde8:	4b74      	ldr	r3, [pc, #464]	; (800ffbc <tcp_receive+0xb0c>)
 800fdea:	891b      	ldrh	r3, [r3, #8]
 800fdec:	4619      	mov	r1, r3
 800fdee:	4610      	mov	r0, r2
 800fdf0:	f7fb fe4c 	bl	800ba8c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800fdf4:	4b71      	ldr	r3, [pc, #452]	; (800ffbc <tcp_receive+0xb0c>)
 800fdf6:	891c      	ldrh	r4, [r3, #8]
 800fdf8:	4b70      	ldr	r3, [pc, #448]	; (800ffbc <tcp_receive+0xb0c>)
 800fdfa:	68db      	ldr	r3, [r3, #12]
 800fdfc:	899b      	ldrh	r3, [r3, #12]
 800fdfe:	b29b      	uxth	r3, r3
 800fe00:	4618      	mov	r0, r3
 800fe02:	f7fa fbeb 	bl	800a5dc <lwip_htons>
 800fe06:	4603      	mov	r3, r0
 800fe08:	b2db      	uxtb	r3, r3
 800fe0a:	f003 0303 	and.w	r3, r3, #3
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d001      	beq.n	800fe16 <tcp_receive+0x966>
 800fe12:	2301      	movs	r3, #1
 800fe14:	e000      	b.n	800fe18 <tcp_receive+0x968>
 800fe16:	2300      	movs	r3, #0
 800fe18:	4423      	add	r3, r4
 800fe1a:	b29a      	uxth	r2, r3
 800fe1c:	4b65      	ldr	r3, [pc, #404]	; (800ffb4 <tcp_receive+0xb04>)
 800fe1e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800fe20:	4b64      	ldr	r3, [pc, #400]	; (800ffb4 <tcp_receive+0xb04>)
 800fe22:	881b      	ldrh	r3, [r3, #0]
 800fe24:	461a      	mov	r2, r3
 800fe26:	4b64      	ldr	r3, [pc, #400]	; (800ffb8 <tcp_receive+0xb08>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	441a      	add	r2, r3
 800fe2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe2e:	68db      	ldr	r3, [r3, #12]
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d006      	beq.n	800fe44 <tcp_receive+0x994>
 800fe36:	4b62      	ldr	r3, [pc, #392]	; (800ffc0 <tcp_receive+0xb10>)
 800fe38:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800fe3c:	4961      	ldr	r1, [pc, #388]	; (800ffc4 <tcp_receive+0xb14>)
 800fe3e:	4862      	ldr	r0, [pc, #392]	; (800ffc8 <tcp_receive+0xb18>)
 800fe40:	f005 fa0a 	bl	8015258 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fe48:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800fe4a:	4b5a      	ldr	r3, [pc, #360]	; (800ffb4 <tcp_receive+0xb04>)
 800fe4c:	881b      	ldrh	r3, [r3, #0]
 800fe4e:	461a      	mov	r2, r3
 800fe50:	4b59      	ldr	r3, [pc, #356]	; (800ffb8 <tcp_receive+0xb08>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	441a      	add	r2, r3
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fe5e:	4b55      	ldr	r3, [pc, #340]	; (800ffb4 <tcp_receive+0xb04>)
 800fe60:	881b      	ldrh	r3, [r3, #0]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d206      	bcs.n	800fe74 <tcp_receive+0x9c4>
 800fe66:	4b56      	ldr	r3, [pc, #344]	; (800ffc0 <tcp_receive+0xb10>)
 800fe68:	f240 6207 	movw	r2, #1543	; 0x607
 800fe6c:	4957      	ldr	r1, [pc, #348]	; (800ffcc <tcp_receive+0xb1c>)
 800fe6e:	4856      	ldr	r0, [pc, #344]	; (800ffc8 <tcp_receive+0xb18>)
 800fe70:	f005 f9f2 	bl	8015258 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fe78:	4b4e      	ldr	r3, [pc, #312]	; (800ffb4 <tcp_receive+0xb04>)
 800fe7a:	881b      	ldrh	r3, [r3, #0]
 800fe7c:	1ad3      	subs	r3, r2, r3
 800fe7e:	b29a      	uxth	r2, r3
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f7fc fe93 	bl	800cbb0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800fe8a:	4b4c      	ldr	r3, [pc, #304]	; (800ffbc <tcp_receive+0xb0c>)
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	891b      	ldrh	r3, [r3, #8]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d006      	beq.n	800fea2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800fe94:	4b49      	ldr	r3, [pc, #292]	; (800ffbc <tcp_receive+0xb0c>)
 800fe96:	685b      	ldr	r3, [r3, #4]
 800fe98:	4a4d      	ldr	r2, [pc, #308]	; (800ffd0 <tcp_receive+0xb20>)
 800fe9a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800fe9c:	4b47      	ldr	r3, [pc, #284]	; (800ffbc <tcp_receive+0xb0c>)
 800fe9e:	2200      	movs	r2, #0
 800fea0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fea2:	4b46      	ldr	r3, [pc, #280]	; (800ffbc <tcp_receive+0xb0c>)
 800fea4:	68db      	ldr	r3, [r3, #12]
 800fea6:	899b      	ldrh	r3, [r3, #12]
 800fea8:	b29b      	uxth	r3, r3
 800feaa:	4618      	mov	r0, r3
 800feac:	f7fa fb96 	bl	800a5dc <lwip_htons>
 800feb0:	4603      	mov	r3, r0
 800feb2:	b2db      	uxtb	r3, r3
 800feb4:	f003 0301 	and.w	r3, r3, #1
 800feb8:	2b00      	cmp	r3, #0
 800feba:	f000 80b8 	beq.w	801002e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800febe:	4b45      	ldr	r3, [pc, #276]	; (800ffd4 <tcp_receive+0xb24>)
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	f043 0320 	orr.w	r3, r3, #32
 800fec6:	b2da      	uxtb	r2, r3
 800fec8:	4b42      	ldr	r3, [pc, #264]	; (800ffd4 <tcp_receive+0xb24>)
 800feca:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800fecc:	e0af      	b.n	801002e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fed2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fed8:	68db      	ldr	r3, [r3, #12]
 800feda:	685b      	ldr	r3, [r3, #4]
 800fedc:	4a36      	ldr	r2, [pc, #216]	; (800ffb8 <tcp_receive+0xb08>)
 800fede:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800fee0:	68bb      	ldr	r3, [r7, #8]
 800fee2:	891b      	ldrh	r3, [r3, #8]
 800fee4:	461c      	mov	r4, r3
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	68db      	ldr	r3, [r3, #12]
 800feea:	899b      	ldrh	r3, [r3, #12]
 800feec:	b29b      	uxth	r3, r3
 800feee:	4618      	mov	r0, r3
 800fef0:	f7fa fb74 	bl	800a5dc <lwip_htons>
 800fef4:	4603      	mov	r3, r0
 800fef6:	b2db      	uxtb	r3, r3
 800fef8:	f003 0303 	and.w	r3, r3, #3
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d001      	beq.n	800ff04 <tcp_receive+0xa54>
 800ff00:	2301      	movs	r3, #1
 800ff02:	e000      	b.n	800ff06 <tcp_receive+0xa56>
 800ff04:	2300      	movs	r3, #0
 800ff06:	191a      	adds	r2, r3, r4
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff0c:	441a      	add	r2, r3
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ff16:	461c      	mov	r4, r3
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	891b      	ldrh	r3, [r3, #8]
 800ff1c:	461d      	mov	r5, r3
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	68db      	ldr	r3, [r3, #12]
 800ff22:	899b      	ldrh	r3, [r3, #12]
 800ff24:	b29b      	uxth	r3, r3
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7fa fb58 	bl	800a5dc <lwip_htons>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	b2db      	uxtb	r3, r3
 800ff30:	f003 0303 	and.w	r3, r3, #3
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d001      	beq.n	800ff3c <tcp_receive+0xa8c>
 800ff38:	2301      	movs	r3, #1
 800ff3a:	e000      	b.n	800ff3e <tcp_receive+0xa8e>
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	442b      	add	r3, r5
 800ff40:	429c      	cmp	r4, r3
 800ff42:	d206      	bcs.n	800ff52 <tcp_receive+0xaa2>
 800ff44:	4b1e      	ldr	r3, [pc, #120]	; (800ffc0 <tcp_receive+0xb10>)
 800ff46:	f240 622c 	movw	r2, #1580	; 0x62c
 800ff4a:	4923      	ldr	r1, [pc, #140]	; (800ffd8 <tcp_receive+0xb28>)
 800ff4c:	481e      	ldr	r0, [pc, #120]	; (800ffc8 <tcp_receive+0xb18>)
 800ff4e:	f005 f983 	bl	8015258 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	891b      	ldrh	r3, [r3, #8]
 800ff56:	461c      	mov	r4, r3
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	68db      	ldr	r3, [r3, #12]
 800ff5c:	899b      	ldrh	r3, [r3, #12]
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	4618      	mov	r0, r3
 800ff62:	f7fa fb3b 	bl	800a5dc <lwip_htons>
 800ff66:	4603      	mov	r3, r0
 800ff68:	b2db      	uxtb	r3, r3
 800ff6a:	f003 0303 	and.w	r3, r3, #3
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d001      	beq.n	800ff76 <tcp_receive+0xac6>
 800ff72:	2301      	movs	r3, #1
 800ff74:	e000      	b.n	800ff78 <tcp_receive+0xac8>
 800ff76:	2300      	movs	r3, #0
 800ff78:	1919      	adds	r1, r3, r4
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ff7e:	b28b      	uxth	r3, r1
 800ff80:	1ad3      	subs	r3, r2, r3
 800ff82:	b29a      	uxth	r2, r3
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7fc fe11 	bl	800cbb0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	685b      	ldr	r3, [r3, #4]
 800ff92:	891b      	ldrh	r3, [r3, #8]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d028      	beq.n	800ffea <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800ff98:	4b0d      	ldr	r3, [pc, #52]	; (800ffd0 <tcp_receive+0xb20>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d01d      	beq.n	800ffdc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800ffa0:	4b0b      	ldr	r3, [pc, #44]	; (800ffd0 <tcp_receive+0xb20>)
 800ffa2:	681a      	ldr	r2, [r3, #0]
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	4610      	mov	r0, r2
 800ffac:	f7fb ffc2 	bl	800bf34 <pbuf_cat>
 800ffb0:	e018      	b.n	800ffe4 <tcp_receive+0xb34>
 800ffb2:	bf00      	nop
 800ffb4:	20004516 	.word	0x20004516
 800ffb8:	2000450c 	.word	0x2000450c
 800ffbc:	200044ec 	.word	0x200044ec
 800ffc0:	080179fc 	.word	0x080179fc
 800ffc4:	08017ddc 	.word	0x08017ddc
 800ffc8:	08017a48 	.word	0x08017a48
 800ffcc:	08017e18 	.word	0x08017e18
 800ffd0:	2000451c 	.word	0x2000451c
 800ffd4:	20004519 	.word	0x20004519
 800ffd8:	08017e38 	.word	0x08017e38
            } else {
              recv_data = cseg->p;
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	685b      	ldr	r3, [r3, #4]
 800ffe0:	4a70      	ldr	r2, [pc, #448]	; (80101a4 <tcp_receive+0xcf4>)
 800ffe2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	68db      	ldr	r3, [r3, #12]
 800ffee:	899b      	ldrh	r3, [r3, #12]
 800fff0:	b29b      	uxth	r3, r3
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7fa faf2 	bl	800a5dc <lwip_htons>
 800fff8:	4603      	mov	r3, r0
 800fffa:	b2db      	uxtb	r3, r3
 800fffc:	f003 0301 	and.w	r3, r3, #1
 8010000:	2b00      	cmp	r3, #0
 8010002:	d00d      	beq.n	8010020 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010004:	4b68      	ldr	r3, [pc, #416]	; (80101a8 <tcp_receive+0xcf8>)
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	f043 0320 	orr.w	r3, r3, #32
 801000c:	b2da      	uxtb	r2, r3
 801000e:	4b66      	ldr	r3, [pc, #408]	; (80101a8 <tcp_receive+0xcf8>)
 8010010:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	7d1b      	ldrb	r3, [r3, #20]
 8010016:	2b04      	cmp	r3, #4
 8010018:	d102      	bne.n	8010020 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2207      	movs	r2, #7
 801001e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	681a      	ldr	r2, [r3, #0]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010028:	68b8      	ldr	r0, [r7, #8]
 801002a:	f7fd fae3 	bl	800d5f4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010032:	2b00      	cmp	r3, #0
 8010034:	d008      	beq.n	8010048 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801003a:	68db      	ldr	r3, [r3, #12]
 801003c:	685a      	ldr	r2, [r3, #4]
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010042:	429a      	cmp	r2, r3
 8010044:	f43f af43 	beq.w	800fece <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	8b5b      	ldrh	r3, [r3, #26]
 801004c:	f003 0301 	and.w	r3, r3, #1
 8010050:	2b00      	cmp	r3, #0
 8010052:	d00e      	beq.n	8010072 <tcp_receive+0xbc2>
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	8b5b      	ldrh	r3, [r3, #26]
 8010058:	f023 0301 	bic.w	r3, r3, #1
 801005c:	b29a      	uxth	r2, r3
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	835a      	strh	r2, [r3, #26]
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	8b5b      	ldrh	r3, [r3, #26]
 8010066:	f043 0302 	orr.w	r3, r3, #2
 801006a:	b29a      	uxth	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010070:	e188      	b.n	8010384 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	8b5b      	ldrh	r3, [r3, #26]
 8010076:	f043 0301 	orr.w	r3, r3, #1
 801007a:	b29a      	uxth	r2, r3
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010080:	e180      	b.n	8010384 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010086:	2b00      	cmp	r3, #0
 8010088:	d106      	bne.n	8010098 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801008a:	4848      	ldr	r0, [pc, #288]	; (80101ac <tcp_receive+0xcfc>)
 801008c:	f7fd fae8 	bl	800d660 <tcp_seg_copy>
 8010090:	4602      	mov	r2, r0
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	675a      	str	r2, [r3, #116]	; 0x74
 8010096:	e16d      	b.n	8010374 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010098:	2300      	movs	r3, #0
 801009a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80100a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80100a2:	e157      	b.n	8010354 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80100a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a6:	68db      	ldr	r3, [r3, #12]
 80100a8:	685a      	ldr	r2, [r3, #4]
 80100aa:	4b41      	ldr	r3, [pc, #260]	; (80101b0 <tcp_receive+0xd00>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	429a      	cmp	r2, r3
 80100b0:	d11d      	bne.n	80100ee <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80100b2:	4b3e      	ldr	r3, [pc, #248]	; (80101ac <tcp_receive+0xcfc>)
 80100b4:	891a      	ldrh	r2, [r3, #8]
 80100b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b8:	891b      	ldrh	r3, [r3, #8]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	f240 814f 	bls.w	801035e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80100c0:	483a      	ldr	r0, [pc, #232]	; (80101ac <tcp_receive+0xcfc>)
 80100c2:	f7fd facd 	bl	800d660 <tcp_seg_copy>
 80100c6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	f000 8149 	beq.w	8010362 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80100d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d003      	beq.n	80100de <tcp_receive+0xc2e>
                    prev->next = cseg;
 80100d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d8:	697a      	ldr	r2, [r7, #20]
 80100da:	601a      	str	r2, [r3, #0]
 80100dc:	e002      	b.n	80100e4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	697a      	ldr	r2, [r7, #20]
 80100e2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80100e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80100e6:	6978      	ldr	r0, [r7, #20]
 80100e8:	f7ff f8de 	bl	800f2a8 <tcp_oos_insert_segment>
                }
                break;
 80100ec:	e139      	b.n	8010362 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80100ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d117      	bne.n	8010124 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80100f4:	4b2e      	ldr	r3, [pc, #184]	; (80101b0 <tcp_receive+0xd00>)
 80100f6:	681a      	ldr	r2, [r3, #0]
 80100f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fa:	68db      	ldr	r3, [r3, #12]
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	1ad3      	subs	r3, r2, r3
 8010100:	2b00      	cmp	r3, #0
 8010102:	da57      	bge.n	80101b4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010104:	4829      	ldr	r0, [pc, #164]	; (80101ac <tcp_receive+0xcfc>)
 8010106:	f7fd faab 	bl	800d660 <tcp_seg_copy>
 801010a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801010c:	69bb      	ldr	r3, [r7, #24]
 801010e:	2b00      	cmp	r3, #0
 8010110:	f000 8129 	beq.w	8010366 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	69ba      	ldr	r2, [r7, #24]
 8010118:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801011a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801011c:	69b8      	ldr	r0, [r7, #24]
 801011e:	f7ff f8c3 	bl	800f2a8 <tcp_oos_insert_segment>
                  }
                  break;
 8010122:	e120      	b.n	8010366 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010124:	4b22      	ldr	r3, [pc, #136]	; (80101b0 <tcp_receive+0xd00>)
 8010126:	681a      	ldr	r2, [r3, #0]
 8010128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801012a:	68db      	ldr	r3, [r3, #12]
 801012c:	685b      	ldr	r3, [r3, #4]
 801012e:	1ad3      	subs	r3, r2, r3
 8010130:	3b01      	subs	r3, #1
 8010132:	2b00      	cmp	r3, #0
 8010134:	db3e      	blt.n	80101b4 <tcp_receive+0xd04>
 8010136:	4b1e      	ldr	r3, [pc, #120]	; (80101b0 <tcp_receive+0xd00>)
 8010138:	681a      	ldr	r2, [r3, #0]
 801013a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013c:	68db      	ldr	r3, [r3, #12]
 801013e:	685b      	ldr	r3, [r3, #4]
 8010140:	1ad3      	subs	r3, r2, r3
 8010142:	3301      	adds	r3, #1
 8010144:	2b00      	cmp	r3, #0
 8010146:	dc35      	bgt.n	80101b4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010148:	4818      	ldr	r0, [pc, #96]	; (80101ac <tcp_receive+0xcfc>)
 801014a:	f7fd fa89 	bl	800d660 <tcp_seg_copy>
 801014e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010150:	69fb      	ldr	r3, [r7, #28]
 8010152:	2b00      	cmp	r3, #0
 8010154:	f000 8109 	beq.w	801036a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801015a:	68db      	ldr	r3, [r3, #12]
 801015c:	685b      	ldr	r3, [r3, #4]
 801015e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010160:	8912      	ldrh	r2, [r2, #8]
 8010162:	441a      	add	r2, r3
 8010164:	4b12      	ldr	r3, [pc, #72]	; (80101b0 <tcp_receive+0xd00>)
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	1ad3      	subs	r3, r2, r3
 801016a:	2b00      	cmp	r3, #0
 801016c:	dd12      	ble.n	8010194 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801016e:	4b10      	ldr	r3, [pc, #64]	; (80101b0 <tcp_receive+0xd00>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	b29a      	uxth	r2, r3
 8010174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010176:	68db      	ldr	r3, [r3, #12]
 8010178:	685b      	ldr	r3, [r3, #4]
 801017a:	b29b      	uxth	r3, r3
 801017c:	1ad3      	subs	r3, r2, r3
 801017e:	b29a      	uxth	r2, r3
 8010180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010182:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010186:	685a      	ldr	r2, [r3, #4]
 8010188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801018a:	891b      	ldrh	r3, [r3, #8]
 801018c:	4619      	mov	r1, r3
 801018e:	4610      	mov	r0, r2
 8010190:	f7fb fc7c 	bl	800ba8c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010196:	69fa      	ldr	r2, [r7, #28]
 8010198:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801019a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801019c:	69f8      	ldr	r0, [r7, #28]
 801019e:	f7ff f883 	bl	800f2a8 <tcp_oos_insert_segment>
                  }
                  break;
 80101a2:	e0e2      	b.n	801036a <tcp_receive+0xeba>
 80101a4:	2000451c 	.word	0x2000451c
 80101a8:	20004519 	.word	0x20004519
 80101ac:	200044ec 	.word	0x200044ec
 80101b0:	2000450c 	.word	0x2000450c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80101b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80101b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	f040 80c6 	bne.w	801034e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80101c2:	4b80      	ldr	r3, [pc, #512]	; (80103c4 <tcp_receive+0xf14>)
 80101c4:	681a      	ldr	r2, [r3, #0]
 80101c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c8:	68db      	ldr	r3, [r3, #12]
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	f340 80bd 	ble.w	801034e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80101d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d6:	68db      	ldr	r3, [r3, #12]
 80101d8:	899b      	ldrh	r3, [r3, #12]
 80101da:	b29b      	uxth	r3, r3
 80101dc:	4618      	mov	r0, r3
 80101de:	f7fa f9fd 	bl	800a5dc <lwip_htons>
 80101e2:	4603      	mov	r3, r0
 80101e4:	b2db      	uxtb	r3, r3
 80101e6:	f003 0301 	and.w	r3, r3, #1
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	f040 80bf 	bne.w	801036e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80101f0:	4875      	ldr	r0, [pc, #468]	; (80103c8 <tcp_receive+0xf18>)
 80101f2:	f7fd fa35 	bl	800d660 <tcp_seg_copy>
 80101f6:	4602      	mov	r2, r0
 80101f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101fa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80101fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	f000 80b6 	beq.w	8010372 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010208:	68db      	ldr	r3, [r3, #12]
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801020e:	8912      	ldrh	r2, [r2, #8]
 8010210:	441a      	add	r2, r3
 8010212:	4b6c      	ldr	r3, [pc, #432]	; (80103c4 <tcp_receive+0xf14>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	1ad3      	subs	r3, r2, r3
 8010218:	2b00      	cmp	r3, #0
 801021a:	dd12      	ble.n	8010242 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801021c:	4b69      	ldr	r3, [pc, #420]	; (80103c4 <tcp_receive+0xf14>)
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	b29a      	uxth	r2, r3
 8010222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010224:	68db      	ldr	r3, [r3, #12]
 8010226:	685b      	ldr	r3, [r3, #4]
 8010228:	b29b      	uxth	r3, r3
 801022a:	1ad3      	subs	r3, r2, r3
 801022c:	b29a      	uxth	r2, r3
 801022e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010230:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010234:	685a      	ldr	r2, [r3, #4]
 8010236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010238:	891b      	ldrh	r3, [r3, #8]
 801023a:	4619      	mov	r1, r3
 801023c:	4610      	mov	r0, r2
 801023e:	f7fb fc25 	bl	800ba8c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010242:	4b62      	ldr	r3, [pc, #392]	; (80103cc <tcp_receive+0xf1c>)
 8010244:	881b      	ldrh	r3, [r3, #0]
 8010246:	461a      	mov	r2, r3
 8010248:	4b5e      	ldr	r3, [pc, #376]	; (80103c4 <tcp_receive+0xf14>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	441a      	add	r2, r3
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010252:	6879      	ldr	r1, [r7, #4]
 8010254:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010256:	440b      	add	r3, r1
 8010258:	1ad3      	subs	r3, r2, r3
 801025a:	2b00      	cmp	r3, #0
 801025c:	f340 8089 	ble.w	8010372 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	68db      	ldr	r3, [r3, #12]
 8010266:	899b      	ldrh	r3, [r3, #12]
 8010268:	b29b      	uxth	r3, r3
 801026a:	4618      	mov	r0, r3
 801026c:	f7fa f9b6 	bl	800a5dc <lwip_htons>
 8010270:	4603      	mov	r3, r0
 8010272:	b2db      	uxtb	r3, r3
 8010274:	f003 0301 	and.w	r3, r3, #1
 8010278:	2b00      	cmp	r3, #0
 801027a:	d022      	beq.n	80102c2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801027c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	68db      	ldr	r3, [r3, #12]
 8010282:	899b      	ldrh	r3, [r3, #12]
 8010284:	b29b      	uxth	r3, r3
 8010286:	b21b      	sxth	r3, r3
 8010288:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801028c:	b21c      	sxth	r4, r3
 801028e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	899b      	ldrh	r3, [r3, #12]
 8010296:	b29b      	uxth	r3, r3
 8010298:	4618      	mov	r0, r3
 801029a:	f7fa f99f 	bl	800a5dc <lwip_htons>
 801029e:	4603      	mov	r3, r0
 80102a0:	b2db      	uxtb	r3, r3
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80102a8:	b29b      	uxth	r3, r3
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7fa f996 	bl	800a5dc <lwip_htons>
 80102b0:	4603      	mov	r3, r0
 80102b2:	b21b      	sxth	r3, r3
 80102b4:	4323      	orrs	r3, r4
 80102b6:	b21a      	sxth	r2, r3
 80102b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	68db      	ldr	r3, [r3, #12]
 80102be:	b292      	uxth	r2, r2
 80102c0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c6:	b29a      	uxth	r2, r3
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80102cc:	4413      	add	r3, r2
 80102ce:	b299      	uxth	r1, r3
 80102d0:	4b3c      	ldr	r3, [pc, #240]	; (80103c4 <tcp_receive+0xf14>)
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	b29a      	uxth	r2, r3
 80102d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	1a8a      	subs	r2, r1, r2
 80102dc:	b292      	uxth	r2, r2
 80102de:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80102e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	685a      	ldr	r2, [r3, #4]
 80102e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	891b      	ldrh	r3, [r3, #8]
 80102ec:	4619      	mov	r1, r3
 80102ee:	4610      	mov	r0, r2
 80102f0:	f7fb fbcc 	bl	800ba8c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80102f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	891c      	ldrh	r4, [r3, #8]
 80102fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	68db      	ldr	r3, [r3, #12]
 8010300:	899b      	ldrh	r3, [r3, #12]
 8010302:	b29b      	uxth	r3, r3
 8010304:	4618      	mov	r0, r3
 8010306:	f7fa f969 	bl	800a5dc <lwip_htons>
 801030a:	4603      	mov	r3, r0
 801030c:	b2db      	uxtb	r3, r3
 801030e:	f003 0303 	and.w	r3, r3, #3
 8010312:	2b00      	cmp	r3, #0
 8010314:	d001      	beq.n	801031a <tcp_receive+0xe6a>
 8010316:	2301      	movs	r3, #1
 8010318:	e000      	b.n	801031c <tcp_receive+0xe6c>
 801031a:	2300      	movs	r3, #0
 801031c:	4423      	add	r3, r4
 801031e:	b29a      	uxth	r2, r3
 8010320:	4b2a      	ldr	r3, [pc, #168]	; (80103cc <tcp_receive+0xf1c>)
 8010322:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010324:	4b29      	ldr	r3, [pc, #164]	; (80103cc <tcp_receive+0xf1c>)
 8010326:	881b      	ldrh	r3, [r3, #0]
 8010328:	461a      	mov	r2, r3
 801032a:	4b26      	ldr	r3, [pc, #152]	; (80103c4 <tcp_receive+0xf14>)
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	441a      	add	r2, r3
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010334:	6879      	ldr	r1, [r7, #4]
 8010336:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010338:	440b      	add	r3, r1
 801033a:	429a      	cmp	r2, r3
 801033c:	d019      	beq.n	8010372 <tcp_receive+0xec2>
 801033e:	4b24      	ldr	r3, [pc, #144]	; (80103d0 <tcp_receive+0xf20>)
 8010340:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010344:	4923      	ldr	r1, [pc, #140]	; (80103d4 <tcp_receive+0xf24>)
 8010346:	4824      	ldr	r0, [pc, #144]	; (80103d8 <tcp_receive+0xf28>)
 8010348:	f004 ff86 	bl	8015258 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801034c:	e011      	b.n	8010372 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801034e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	63bb      	str	r3, [r7, #56]	; 0x38
 8010354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010356:	2b00      	cmp	r3, #0
 8010358:	f47f aea4 	bne.w	80100a4 <tcp_receive+0xbf4>
 801035c:	e00a      	b.n	8010374 <tcp_receive+0xec4>
                break;
 801035e:	bf00      	nop
 8010360:	e008      	b.n	8010374 <tcp_receive+0xec4>
                break;
 8010362:	bf00      	nop
 8010364:	e006      	b.n	8010374 <tcp_receive+0xec4>
                  break;
 8010366:	bf00      	nop
 8010368:	e004      	b.n	8010374 <tcp_receive+0xec4>
                  break;
 801036a:	bf00      	nop
 801036c:	e002      	b.n	8010374 <tcp_receive+0xec4>
                  break;
 801036e:	bf00      	nop
 8010370:	e000      	b.n	8010374 <tcp_receive+0xec4>
                break;
 8010372:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f001 fe9d 	bl	80120b4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801037a:	e003      	b.n	8010384 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f001 fe99 	bl	80120b4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010382:	e01a      	b.n	80103ba <tcp_receive+0xf0a>
 8010384:	e019      	b.n	80103ba <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010386:	4b0f      	ldr	r3, [pc, #60]	; (80103c4 <tcp_receive+0xf14>)
 8010388:	681a      	ldr	r2, [r3, #0]
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801038e:	1ad3      	subs	r3, r2, r3
 8010390:	2b00      	cmp	r3, #0
 8010392:	db0a      	blt.n	80103aa <tcp_receive+0xefa>
 8010394:	4b0b      	ldr	r3, [pc, #44]	; (80103c4 <tcp_receive+0xf14>)
 8010396:	681a      	ldr	r2, [r3, #0]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801039c:	6879      	ldr	r1, [r7, #4]
 801039e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80103a0:	440b      	add	r3, r1
 80103a2:	1ad3      	subs	r3, r2, r3
 80103a4:	3301      	adds	r3, #1
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	dd07      	ble.n	80103ba <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	8b5b      	ldrh	r3, [r3, #26]
 80103ae:	f043 0302 	orr.w	r3, r3, #2
 80103b2:	b29a      	uxth	r2, r3
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80103b8:	e7ff      	b.n	80103ba <tcp_receive+0xf0a>
 80103ba:	bf00      	nop
 80103bc:	3750      	adds	r7, #80	; 0x50
 80103be:	46bd      	mov	sp, r7
 80103c0:	bdb0      	pop	{r4, r5, r7, pc}
 80103c2:	bf00      	nop
 80103c4:	2000450c 	.word	0x2000450c
 80103c8:	200044ec 	.word	0x200044ec
 80103cc:	20004516 	.word	0x20004516
 80103d0:	080179fc 	.word	0x080179fc
 80103d4:	08017da4 	.word	0x08017da4
 80103d8:	08017a48 	.word	0x08017a48

080103dc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80103dc:	b480      	push	{r7}
 80103de:	b083      	sub	sp, #12
 80103e0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80103e2:	4b15      	ldr	r3, [pc, #84]	; (8010438 <tcp_get_next_optbyte+0x5c>)
 80103e4:	881b      	ldrh	r3, [r3, #0]
 80103e6:	1c5a      	adds	r2, r3, #1
 80103e8:	b291      	uxth	r1, r2
 80103ea:	4a13      	ldr	r2, [pc, #76]	; (8010438 <tcp_get_next_optbyte+0x5c>)
 80103ec:	8011      	strh	r1, [r2, #0]
 80103ee:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80103f0:	4b12      	ldr	r3, [pc, #72]	; (801043c <tcp_get_next_optbyte+0x60>)
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d004      	beq.n	8010402 <tcp_get_next_optbyte+0x26>
 80103f8:	4b11      	ldr	r3, [pc, #68]	; (8010440 <tcp_get_next_optbyte+0x64>)
 80103fa:	881b      	ldrh	r3, [r3, #0]
 80103fc:	88fa      	ldrh	r2, [r7, #6]
 80103fe:	429a      	cmp	r2, r3
 8010400:	d208      	bcs.n	8010414 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010402:	4b10      	ldr	r3, [pc, #64]	; (8010444 <tcp_get_next_optbyte+0x68>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	3314      	adds	r3, #20
 8010408:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801040a:	88fb      	ldrh	r3, [r7, #6]
 801040c:	683a      	ldr	r2, [r7, #0]
 801040e:	4413      	add	r3, r2
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	e00b      	b.n	801042c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010414:	88fb      	ldrh	r3, [r7, #6]
 8010416:	b2da      	uxtb	r2, r3
 8010418:	4b09      	ldr	r3, [pc, #36]	; (8010440 <tcp_get_next_optbyte+0x64>)
 801041a:	881b      	ldrh	r3, [r3, #0]
 801041c:	b2db      	uxtb	r3, r3
 801041e:	1ad3      	subs	r3, r2, r3
 8010420:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010422:	4b06      	ldr	r3, [pc, #24]	; (801043c <tcp_get_next_optbyte+0x60>)
 8010424:	681a      	ldr	r2, [r3, #0]
 8010426:	797b      	ldrb	r3, [r7, #5]
 8010428:	4413      	add	r3, r2
 801042a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801042c:	4618      	mov	r0, r3
 801042e:	370c      	adds	r7, #12
 8010430:	46bd      	mov	sp, r7
 8010432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010436:	4770      	bx	lr
 8010438:	20004508 	.word	0x20004508
 801043c:	20004504 	.word	0x20004504
 8010440:	20004502 	.word	0x20004502
 8010444:	200044fc 	.word	0x200044fc

08010448 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b084      	sub	sp, #16
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d106      	bne.n	8010464 <tcp_parseopt+0x1c>
 8010456:	4b31      	ldr	r3, [pc, #196]	; (801051c <tcp_parseopt+0xd4>)
 8010458:	f240 727d 	movw	r2, #1917	; 0x77d
 801045c:	4930      	ldr	r1, [pc, #192]	; (8010520 <tcp_parseopt+0xd8>)
 801045e:	4831      	ldr	r0, [pc, #196]	; (8010524 <tcp_parseopt+0xdc>)
 8010460:	f004 fefa 	bl	8015258 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010464:	4b30      	ldr	r3, [pc, #192]	; (8010528 <tcp_parseopt+0xe0>)
 8010466:	881b      	ldrh	r3, [r3, #0]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d053      	beq.n	8010514 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801046c:	4b2f      	ldr	r3, [pc, #188]	; (801052c <tcp_parseopt+0xe4>)
 801046e:	2200      	movs	r2, #0
 8010470:	801a      	strh	r2, [r3, #0]
 8010472:	e043      	b.n	80104fc <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8010474:	f7ff ffb2 	bl	80103dc <tcp_get_next_optbyte>
 8010478:	4603      	mov	r3, r0
 801047a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801047c:	7bfb      	ldrb	r3, [r7, #15]
 801047e:	2b01      	cmp	r3, #1
 8010480:	d03c      	beq.n	80104fc <tcp_parseopt+0xb4>
 8010482:	2b02      	cmp	r3, #2
 8010484:	d002      	beq.n	801048c <tcp_parseopt+0x44>
 8010486:	2b00      	cmp	r3, #0
 8010488:	d03f      	beq.n	801050a <tcp_parseopt+0xc2>
 801048a:	e026      	b.n	80104da <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801048c:	f7ff ffa6 	bl	80103dc <tcp_get_next_optbyte>
 8010490:	4603      	mov	r3, r0
 8010492:	2b04      	cmp	r3, #4
 8010494:	d13b      	bne.n	801050e <tcp_parseopt+0xc6>
 8010496:	4b25      	ldr	r3, [pc, #148]	; (801052c <tcp_parseopt+0xe4>)
 8010498:	881b      	ldrh	r3, [r3, #0]
 801049a:	3302      	adds	r3, #2
 801049c:	4a22      	ldr	r2, [pc, #136]	; (8010528 <tcp_parseopt+0xe0>)
 801049e:	8812      	ldrh	r2, [r2, #0]
 80104a0:	4293      	cmp	r3, r2
 80104a2:	dc34      	bgt.n	801050e <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80104a4:	f7ff ff9a 	bl	80103dc <tcp_get_next_optbyte>
 80104a8:	4603      	mov	r3, r0
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	021b      	lsls	r3, r3, #8
 80104ae:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80104b0:	f7ff ff94 	bl	80103dc <tcp_get_next_optbyte>
 80104b4:	4603      	mov	r3, r0
 80104b6:	b29a      	uxth	r2, r3
 80104b8:	89bb      	ldrh	r3, [r7, #12]
 80104ba:	4313      	orrs	r3, r2
 80104bc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80104be:	89bb      	ldrh	r3, [r7, #12]
 80104c0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80104c4:	d804      	bhi.n	80104d0 <tcp_parseopt+0x88>
 80104c6:	89bb      	ldrh	r3, [r7, #12]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d001      	beq.n	80104d0 <tcp_parseopt+0x88>
 80104cc:	89ba      	ldrh	r2, [r7, #12]
 80104ce:	e001      	b.n	80104d4 <tcp_parseopt+0x8c>
 80104d0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80104d8:	e010      	b.n	80104fc <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80104da:	f7ff ff7f 	bl	80103dc <tcp_get_next_optbyte>
 80104de:	4603      	mov	r3, r0
 80104e0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80104e2:	7afb      	ldrb	r3, [r7, #11]
 80104e4:	2b01      	cmp	r3, #1
 80104e6:	d914      	bls.n	8010512 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80104e8:	7afb      	ldrb	r3, [r7, #11]
 80104ea:	b29a      	uxth	r2, r3
 80104ec:	4b0f      	ldr	r3, [pc, #60]	; (801052c <tcp_parseopt+0xe4>)
 80104ee:	881b      	ldrh	r3, [r3, #0]
 80104f0:	4413      	add	r3, r2
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	3b02      	subs	r3, #2
 80104f6:	b29a      	uxth	r2, r3
 80104f8:	4b0c      	ldr	r3, [pc, #48]	; (801052c <tcp_parseopt+0xe4>)
 80104fa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80104fc:	4b0b      	ldr	r3, [pc, #44]	; (801052c <tcp_parseopt+0xe4>)
 80104fe:	881a      	ldrh	r2, [r3, #0]
 8010500:	4b09      	ldr	r3, [pc, #36]	; (8010528 <tcp_parseopt+0xe0>)
 8010502:	881b      	ldrh	r3, [r3, #0]
 8010504:	429a      	cmp	r2, r3
 8010506:	d3b5      	bcc.n	8010474 <tcp_parseopt+0x2c>
 8010508:	e004      	b.n	8010514 <tcp_parseopt+0xcc>
          return;
 801050a:	bf00      	nop
 801050c:	e002      	b.n	8010514 <tcp_parseopt+0xcc>
            return;
 801050e:	bf00      	nop
 8010510:	e000      	b.n	8010514 <tcp_parseopt+0xcc>
            return;
 8010512:	bf00      	nop
      }
    }
  }
}
 8010514:	3710      	adds	r7, #16
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	080179fc 	.word	0x080179fc
 8010520:	08017e60 	.word	0x08017e60
 8010524:	08017a48 	.word	0x08017a48
 8010528:	20004500 	.word	0x20004500
 801052c:	20004508 	.word	0x20004508

08010530 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010530:	b480      	push	{r7}
 8010532:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010534:	4b05      	ldr	r3, [pc, #20]	; (801054c <tcp_trigger_input_pcb_close+0x1c>)
 8010536:	781b      	ldrb	r3, [r3, #0]
 8010538:	f043 0310 	orr.w	r3, r3, #16
 801053c:	b2da      	uxtb	r2, r3
 801053e:	4b03      	ldr	r3, [pc, #12]	; (801054c <tcp_trigger_input_pcb_close+0x1c>)
 8010540:	701a      	strb	r2, [r3, #0]
}
 8010542:	bf00      	nop
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr
 801054c:	20004519 	.word	0x20004519

08010550 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b084      	sub	sp, #16
 8010554:	af00      	add	r7, sp, #0
 8010556:	60f8      	str	r0, [r7, #12]
 8010558:	60b9      	str	r1, [r7, #8]
 801055a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d00a      	beq.n	8010578 <tcp_route+0x28>
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	7a1b      	ldrb	r3, [r3, #8]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d006      	beq.n	8010578 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	7a1b      	ldrb	r3, [r3, #8]
 801056e:	4618      	mov	r0, r3
 8010570:	f7fb f888 	bl	800b684 <netif_get_by_index>
 8010574:	4603      	mov	r3, r0
 8010576:	e003      	b.n	8010580 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	f003 fb17 	bl	8013bac <ip4_route>
 801057e:	4603      	mov	r3, r0
  }
}
 8010580:	4618      	mov	r0, r3
 8010582:	3710      	adds	r7, #16
 8010584:	46bd      	mov	sp, r7
 8010586:	bd80      	pop	{r7, pc}

08010588 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010588:	b590      	push	{r4, r7, lr}
 801058a:	b087      	sub	sp, #28
 801058c:	af00      	add	r7, sp, #0
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	60b9      	str	r1, [r7, #8]
 8010592:	603b      	str	r3, [r7, #0]
 8010594:	4613      	mov	r3, r2
 8010596:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d105      	bne.n	80105aa <tcp_create_segment+0x22>
 801059e:	4b44      	ldr	r3, [pc, #272]	; (80106b0 <tcp_create_segment+0x128>)
 80105a0:	22a3      	movs	r2, #163	; 0xa3
 80105a2:	4944      	ldr	r1, [pc, #272]	; (80106b4 <tcp_create_segment+0x12c>)
 80105a4:	4844      	ldr	r0, [pc, #272]	; (80106b8 <tcp_create_segment+0x130>)
 80105a6:	f004 fe57 	bl	8015258 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d105      	bne.n	80105bc <tcp_create_segment+0x34>
 80105b0:	4b3f      	ldr	r3, [pc, #252]	; (80106b0 <tcp_create_segment+0x128>)
 80105b2:	22a4      	movs	r2, #164	; 0xa4
 80105b4:	4941      	ldr	r1, [pc, #260]	; (80106bc <tcp_create_segment+0x134>)
 80105b6:	4840      	ldr	r0, [pc, #256]	; (80106b8 <tcp_create_segment+0x130>)
 80105b8:	f004 fe4e 	bl	8015258 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80105bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80105c0:	009b      	lsls	r3, r3, #2
 80105c2:	b2db      	uxtb	r3, r3
 80105c4:	f003 0304 	and.w	r3, r3, #4
 80105c8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80105ca:	2003      	movs	r0, #3
 80105cc:	f7fa fcf2 	bl	800afb4 <memp_malloc>
 80105d0:	6138      	str	r0, [r7, #16]
 80105d2:	693b      	ldr	r3, [r7, #16]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d104      	bne.n	80105e2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80105d8:	68b8      	ldr	r0, [r7, #8]
 80105da:	f7fb fbdd 	bl	800bd98 <pbuf_free>
    return NULL;
 80105de:	2300      	movs	r3, #0
 80105e0:	e061      	b.n	80106a6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80105e2:	693b      	ldr	r3, [r7, #16]
 80105e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80105e8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80105ea:	693b      	ldr	r3, [r7, #16]
 80105ec:	2200      	movs	r2, #0
 80105ee:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	68ba      	ldr	r2, [r7, #8]
 80105f4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	891a      	ldrh	r2, [r3, #8]
 80105fa:	7dfb      	ldrb	r3, [r7, #23]
 80105fc:	b29b      	uxth	r3, r3
 80105fe:	429a      	cmp	r2, r3
 8010600:	d205      	bcs.n	801060e <tcp_create_segment+0x86>
 8010602:	4b2b      	ldr	r3, [pc, #172]	; (80106b0 <tcp_create_segment+0x128>)
 8010604:	22b0      	movs	r2, #176	; 0xb0
 8010606:	492e      	ldr	r1, [pc, #184]	; (80106c0 <tcp_create_segment+0x138>)
 8010608:	482b      	ldr	r0, [pc, #172]	; (80106b8 <tcp_create_segment+0x130>)
 801060a:	f004 fe25 	bl	8015258 <iprintf>
  seg->len = p->tot_len - optlen;
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	891a      	ldrh	r2, [r3, #8]
 8010612:	7dfb      	ldrb	r3, [r7, #23]
 8010614:	b29b      	uxth	r3, r3
 8010616:	1ad3      	subs	r3, r2, r3
 8010618:	b29a      	uxth	r2, r3
 801061a:	693b      	ldr	r3, [r7, #16]
 801061c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801061e:	2114      	movs	r1, #20
 8010620:	68b8      	ldr	r0, [r7, #8]
 8010622:	f7fb fb23 	bl	800bc6c <pbuf_add_header>
 8010626:	4603      	mov	r3, r0
 8010628:	2b00      	cmp	r3, #0
 801062a:	d004      	beq.n	8010636 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801062c:	6938      	ldr	r0, [r7, #16]
 801062e:	f7fc ffe1 	bl	800d5f4 <tcp_seg_free>
    return NULL;
 8010632:	2300      	movs	r3, #0
 8010634:	e037      	b.n	80106a6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	685b      	ldr	r3, [r3, #4]
 801063a:	685a      	ldr	r2, [r3, #4]
 801063c:	693b      	ldr	r3, [r7, #16]
 801063e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	8ada      	ldrh	r2, [r3, #22]
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	68dc      	ldr	r4, [r3, #12]
 8010648:	4610      	mov	r0, r2
 801064a:	f7f9 ffc7 	bl	800a5dc <lwip_htons>
 801064e:	4603      	mov	r3, r0
 8010650:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	8b1a      	ldrh	r2, [r3, #24]
 8010656:	693b      	ldr	r3, [r7, #16]
 8010658:	68dc      	ldr	r4, [r3, #12]
 801065a:	4610      	mov	r0, r2
 801065c:	f7f9 ffbe 	bl	800a5dc <lwip_htons>
 8010660:	4603      	mov	r3, r0
 8010662:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010664:	693b      	ldr	r3, [r7, #16]
 8010666:	68dc      	ldr	r4, [r3, #12]
 8010668:	6838      	ldr	r0, [r7, #0]
 801066a:	f7f9 ffcc 	bl	800a606 <lwip_htonl>
 801066e:	4603      	mov	r3, r0
 8010670:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010672:	7dfb      	ldrb	r3, [r7, #23]
 8010674:	089b      	lsrs	r3, r3, #2
 8010676:	b2db      	uxtb	r3, r3
 8010678:	b29b      	uxth	r3, r3
 801067a:	3305      	adds	r3, #5
 801067c:	b29b      	uxth	r3, r3
 801067e:	031b      	lsls	r3, r3, #12
 8010680:	b29a      	uxth	r2, r3
 8010682:	79fb      	ldrb	r3, [r7, #7]
 8010684:	b29b      	uxth	r3, r3
 8010686:	4313      	orrs	r3, r2
 8010688:	b29a      	uxth	r2, r3
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	68dc      	ldr	r4, [r3, #12]
 801068e:	4610      	mov	r0, r2
 8010690:	f7f9 ffa4 	bl	800a5dc <lwip_htons>
 8010694:	4603      	mov	r3, r0
 8010696:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010698:	693b      	ldr	r3, [r7, #16]
 801069a:	68db      	ldr	r3, [r3, #12]
 801069c:	2200      	movs	r2, #0
 801069e:	749a      	strb	r2, [r3, #18]
 80106a0:	2200      	movs	r2, #0
 80106a2:	74da      	strb	r2, [r3, #19]
  return seg;
 80106a4:	693b      	ldr	r3, [r7, #16]
}
 80106a6:	4618      	mov	r0, r3
 80106a8:	371c      	adds	r7, #28
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd90      	pop	{r4, r7, pc}
 80106ae:	bf00      	nop
 80106b0:	08017e7c 	.word	0x08017e7c
 80106b4:	08017eb0 	.word	0x08017eb0
 80106b8:	08017ed0 	.word	0x08017ed0
 80106bc:	08017ef8 	.word	0x08017ef8
 80106c0:	08017f1c 	.word	0x08017f1c

080106c4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b086      	sub	sp, #24
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	607b      	str	r3, [r7, #4]
 80106cc:	4603      	mov	r3, r0
 80106ce:	73fb      	strb	r3, [r7, #15]
 80106d0:	460b      	mov	r3, r1
 80106d2:	81bb      	strh	r3, [r7, #12]
 80106d4:	4613      	mov	r3, r2
 80106d6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80106d8:	89bb      	ldrh	r3, [r7, #12]
 80106da:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d105      	bne.n	80106ee <tcp_pbuf_prealloc+0x2a>
 80106e2:	4b30      	ldr	r3, [pc, #192]	; (80107a4 <tcp_pbuf_prealloc+0xe0>)
 80106e4:	22e8      	movs	r2, #232	; 0xe8
 80106e6:	4930      	ldr	r1, [pc, #192]	; (80107a8 <tcp_pbuf_prealloc+0xe4>)
 80106e8:	4830      	ldr	r0, [pc, #192]	; (80107ac <tcp_pbuf_prealloc+0xe8>)
 80106ea:	f004 fdb5 	bl	8015258 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80106ee:	6a3b      	ldr	r3, [r7, #32]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d105      	bne.n	8010700 <tcp_pbuf_prealloc+0x3c>
 80106f4:	4b2b      	ldr	r3, [pc, #172]	; (80107a4 <tcp_pbuf_prealloc+0xe0>)
 80106f6:	22e9      	movs	r2, #233	; 0xe9
 80106f8:	492d      	ldr	r1, [pc, #180]	; (80107b0 <tcp_pbuf_prealloc+0xec>)
 80106fa:	482c      	ldr	r0, [pc, #176]	; (80107ac <tcp_pbuf_prealloc+0xe8>)
 80106fc:	f004 fdac 	bl	8015258 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010700:	89ba      	ldrh	r2, [r7, #12]
 8010702:	897b      	ldrh	r3, [r7, #10]
 8010704:	429a      	cmp	r2, r3
 8010706:	d221      	bcs.n	801074c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010708:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801070c:	f003 0302 	and.w	r3, r3, #2
 8010710:	2b00      	cmp	r3, #0
 8010712:	d111      	bne.n	8010738 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010714:	6a3b      	ldr	r3, [r7, #32]
 8010716:	8b5b      	ldrh	r3, [r3, #26]
 8010718:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801071c:	2b00      	cmp	r3, #0
 801071e:	d115      	bne.n	801074c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010720:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010724:	2b00      	cmp	r3, #0
 8010726:	d007      	beq.n	8010738 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010728:	6a3b      	ldr	r3, [r7, #32]
 801072a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801072c:	2b00      	cmp	r3, #0
 801072e:	d103      	bne.n	8010738 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010730:	6a3b      	ldr	r3, [r7, #32]
 8010732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010734:	2b00      	cmp	r3, #0
 8010736:	d009      	beq.n	801074c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010738:	89bb      	ldrh	r3, [r7, #12]
 801073a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801073e:	f023 0203 	bic.w	r2, r3, #3
 8010742:	897b      	ldrh	r3, [r7, #10]
 8010744:	4293      	cmp	r3, r2
 8010746:	bf28      	it	cs
 8010748:	4613      	movcs	r3, r2
 801074a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801074c:	8af9      	ldrh	r1, [r7, #22]
 801074e:	7bfb      	ldrb	r3, [r7, #15]
 8010750:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010754:	4618      	mov	r0, r3
 8010756:	f7fb f83f 	bl	800b7d8 <pbuf_alloc>
 801075a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d101      	bne.n	8010766 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010762:	2300      	movs	r3, #0
 8010764:	e019      	b.n	801079a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d006      	beq.n	801077c <tcp_pbuf_prealloc+0xb8>
 801076e:	4b0d      	ldr	r3, [pc, #52]	; (80107a4 <tcp_pbuf_prealloc+0xe0>)
 8010770:	f240 120b 	movw	r2, #267	; 0x10b
 8010774:	490f      	ldr	r1, [pc, #60]	; (80107b4 <tcp_pbuf_prealloc+0xf0>)
 8010776:	480d      	ldr	r0, [pc, #52]	; (80107ac <tcp_pbuf_prealloc+0xe8>)
 8010778:	f004 fd6e 	bl	8015258 <iprintf>
  *oversize = p->len - length;
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	895a      	ldrh	r2, [r3, #10]
 8010780:	89bb      	ldrh	r3, [r7, #12]
 8010782:	1ad3      	subs	r3, r2, r3
 8010784:	b29a      	uxth	r2, r3
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801078a:	693b      	ldr	r3, [r7, #16]
 801078c:	89ba      	ldrh	r2, [r7, #12]
 801078e:	811a      	strh	r2, [r3, #8]
 8010790:	693b      	ldr	r3, [r7, #16]
 8010792:	891a      	ldrh	r2, [r3, #8]
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	815a      	strh	r2, [r3, #10]
  return p;
 8010798:	693b      	ldr	r3, [r7, #16]
}
 801079a:	4618      	mov	r0, r3
 801079c:	3718      	adds	r7, #24
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}
 80107a2:	bf00      	nop
 80107a4:	08017e7c 	.word	0x08017e7c
 80107a8:	08017f34 	.word	0x08017f34
 80107ac:	08017ed0 	.word	0x08017ed0
 80107b0:	08017f58 	.word	0x08017f58
 80107b4:	08017f78 	.word	0x08017f78

080107b8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b082      	sub	sp, #8
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]
 80107c0:	460b      	mov	r3, r1
 80107c2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d106      	bne.n	80107d8 <tcp_write_checks+0x20>
 80107ca:	4b33      	ldr	r3, [pc, #204]	; (8010898 <tcp_write_checks+0xe0>)
 80107cc:	f240 1233 	movw	r2, #307	; 0x133
 80107d0:	4932      	ldr	r1, [pc, #200]	; (801089c <tcp_write_checks+0xe4>)
 80107d2:	4833      	ldr	r0, [pc, #204]	; (80108a0 <tcp_write_checks+0xe8>)
 80107d4:	f004 fd40 	bl	8015258 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	7d1b      	ldrb	r3, [r3, #20]
 80107dc:	2b04      	cmp	r3, #4
 80107de:	d00e      	beq.n	80107fe <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80107e4:	2b07      	cmp	r3, #7
 80107e6:	d00a      	beq.n	80107fe <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80107ec:	2b02      	cmp	r3, #2
 80107ee:	d006      	beq.n	80107fe <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80107f4:	2b03      	cmp	r3, #3
 80107f6:	d002      	beq.n	80107fe <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80107f8:	f06f 030a 	mvn.w	r3, #10
 80107fc:	e048      	b.n	8010890 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80107fe:	887b      	ldrh	r3, [r7, #2]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d101      	bne.n	8010808 <tcp_write_checks+0x50>
    return ERR_OK;
 8010804:	2300      	movs	r3, #0
 8010806:	e043      	b.n	8010890 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801080e:	887a      	ldrh	r2, [r7, #2]
 8010810:	429a      	cmp	r2, r3
 8010812:	d909      	bls.n	8010828 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	8b5b      	ldrh	r3, [r3, #26]
 8010818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801081c:	b29a      	uxth	r2, r3
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010826:	e033      	b.n	8010890 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801082e:	2b08      	cmp	r3, #8
 8010830:	d909      	bls.n	8010846 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	8b5b      	ldrh	r3, [r3, #26]
 8010836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801083a:	b29a      	uxth	r2, r3
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010844:	e024      	b.n	8010890 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801084c:	2b00      	cmp	r3, #0
 801084e:	d00f      	beq.n	8010870 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010854:	2b00      	cmp	r3, #0
 8010856:	d11a      	bne.n	801088e <tcp_write_checks+0xd6>
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801085c:	2b00      	cmp	r3, #0
 801085e:	d116      	bne.n	801088e <tcp_write_checks+0xd6>
 8010860:	4b0d      	ldr	r3, [pc, #52]	; (8010898 <tcp_write_checks+0xe0>)
 8010862:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8010866:	490f      	ldr	r1, [pc, #60]	; (80108a4 <tcp_write_checks+0xec>)
 8010868:	480d      	ldr	r0, [pc, #52]	; (80108a0 <tcp_write_checks+0xe8>)
 801086a:	f004 fcf5 	bl	8015258 <iprintf>
 801086e:	e00e      	b.n	801088e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010874:	2b00      	cmp	r3, #0
 8010876:	d103      	bne.n	8010880 <tcp_write_checks+0xc8>
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801087c:	2b00      	cmp	r3, #0
 801087e:	d006      	beq.n	801088e <tcp_write_checks+0xd6>
 8010880:	4b05      	ldr	r3, [pc, #20]	; (8010898 <tcp_write_checks+0xe0>)
 8010882:	f240 1259 	movw	r2, #345	; 0x159
 8010886:	4908      	ldr	r1, [pc, #32]	; (80108a8 <tcp_write_checks+0xf0>)
 8010888:	4805      	ldr	r0, [pc, #20]	; (80108a0 <tcp_write_checks+0xe8>)
 801088a:	f004 fce5 	bl	8015258 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801088e:	2300      	movs	r3, #0
}
 8010890:	4618      	mov	r0, r3
 8010892:	3708      	adds	r7, #8
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	08017e7c 	.word	0x08017e7c
 801089c:	08017f8c 	.word	0x08017f8c
 80108a0:	08017ed0 	.word	0x08017ed0
 80108a4:	08017fac 	.word	0x08017fac
 80108a8:	08017fe8 	.word	0x08017fe8

080108ac <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80108ac:	b590      	push	{r4, r7, lr}
 80108ae:	b09b      	sub	sp, #108	; 0x6c
 80108b0:	af04      	add	r7, sp, #16
 80108b2:	60f8      	str	r0, [r7, #12]
 80108b4:	60b9      	str	r1, [r7, #8]
 80108b6:	4611      	mov	r1, r2
 80108b8:	461a      	mov	r2, r3
 80108ba:	460b      	mov	r3, r1
 80108bc:	80fb      	strh	r3, [r7, #6]
 80108be:	4613      	mov	r3, r2
 80108c0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80108c2:	2300      	movs	r3, #0
 80108c4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80108c6:	2300      	movs	r3, #0
 80108c8:	653b      	str	r3, [r7, #80]	; 0x50
 80108ca:	2300      	movs	r3, #0
 80108cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80108ce:	2300      	movs	r3, #0
 80108d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80108d2:	2300      	movs	r3, #0
 80108d4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80108d6:	2300      	movs	r3, #0
 80108d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80108dc:	2300      	movs	r3, #0
 80108de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80108e2:	2300      	movs	r3, #0
 80108e4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80108e6:	2300      	movs	r3, #0
 80108e8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80108ea:	2300      	movs	r3, #0
 80108ec:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d109      	bne.n	8010908 <tcp_write+0x5c>
 80108f4:	4ba5      	ldr	r3, [pc, #660]	; (8010b8c <tcp_write+0x2e0>)
 80108f6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80108fa:	49a5      	ldr	r1, [pc, #660]	; (8010b90 <tcp_write+0x2e4>)
 80108fc:	48a5      	ldr	r0, [pc, #660]	; (8010b94 <tcp_write+0x2e8>)
 80108fe:	f004 fcab 	bl	8015258 <iprintf>
 8010902:	f06f 030f 	mvn.w	r3, #15
 8010906:	e32c      	b.n	8010f62 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801090e:	085b      	lsrs	r3, r3, #1
 8010910:	b29a      	uxth	r2, r3
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010916:	4293      	cmp	r3, r2
 8010918:	bf28      	it	cs
 801091a:	4613      	movcs	r3, r2
 801091c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801091e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010920:	2b00      	cmp	r3, #0
 8010922:	d102      	bne.n	801092a <tcp_write+0x7e>
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010928:	e000      	b.n	801092c <tcp_write+0x80>
 801092a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801092c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801092e:	68bb      	ldr	r3, [r7, #8]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d109      	bne.n	8010948 <tcp_write+0x9c>
 8010934:	4b95      	ldr	r3, [pc, #596]	; (8010b8c <tcp_write+0x2e0>)
 8010936:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 801093a:	4997      	ldr	r1, [pc, #604]	; (8010b98 <tcp_write+0x2ec>)
 801093c:	4895      	ldr	r0, [pc, #596]	; (8010b94 <tcp_write+0x2e8>)
 801093e:	f004 fc8b 	bl	8015258 <iprintf>
 8010942:	f06f 030f 	mvn.w	r3, #15
 8010946:	e30c      	b.n	8010f62 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010948:	88fb      	ldrh	r3, [r7, #6]
 801094a:	4619      	mov	r1, r3
 801094c:	68f8      	ldr	r0, [r7, #12]
 801094e:	f7ff ff33 	bl	80107b8 <tcp_write_checks>
 8010952:	4603      	mov	r3, r0
 8010954:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010958:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801095c:	2b00      	cmp	r3, #0
 801095e:	d002      	beq.n	8010966 <tcp_write+0xba>
    return err;
 8010960:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010964:	e2fd      	b.n	8010f62 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801096c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010970:	2300      	movs	r3, #0
 8010972:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801097a:	2b00      	cmp	r3, #0
 801097c:	f000 80f7 	beq.w	8010b6e <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010984:	653b      	str	r3, [r7, #80]	; 0x50
 8010986:	e002      	b.n	801098e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801098e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d1f8      	bne.n	8010988 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010996:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010998:	7a9b      	ldrb	r3, [r3, #10]
 801099a:	009b      	lsls	r3, r3, #2
 801099c:	b29b      	uxth	r3, r3
 801099e:	f003 0304 	and.w	r3, r3, #4
 80109a2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80109a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80109a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109a8:	891b      	ldrh	r3, [r3, #8]
 80109aa:	4619      	mov	r1, r3
 80109ac:	8c3b      	ldrh	r3, [r7, #32]
 80109ae:	440b      	add	r3, r1
 80109b0:	429a      	cmp	r2, r3
 80109b2:	da06      	bge.n	80109c2 <tcp_write+0x116>
 80109b4:	4b75      	ldr	r3, [pc, #468]	; (8010b8c <tcp_write+0x2e0>)
 80109b6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80109ba:	4978      	ldr	r1, [pc, #480]	; (8010b9c <tcp_write+0x2f0>)
 80109bc:	4875      	ldr	r0, [pc, #468]	; (8010b94 <tcp_write+0x2e8>)
 80109be:	f004 fc4b 	bl	8015258 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80109c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109c4:	891a      	ldrh	r2, [r3, #8]
 80109c6:	8c3b      	ldrh	r3, [r7, #32]
 80109c8:	4413      	add	r3, r2
 80109ca:	b29b      	uxth	r3, r3
 80109cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80109ce:	1ad3      	subs	r3, r2, r3
 80109d0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80109d8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80109da:	8a7b      	ldrh	r3, [r7, #18]
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d027      	beq.n	8010a30 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80109e0:	8a7b      	ldrh	r3, [r7, #18]
 80109e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80109e4:	429a      	cmp	r2, r3
 80109e6:	d206      	bcs.n	80109f6 <tcp_write+0x14a>
 80109e8:	4b68      	ldr	r3, [pc, #416]	; (8010b8c <tcp_write+0x2e0>)
 80109ea:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80109ee:	496c      	ldr	r1, [pc, #432]	; (8010ba0 <tcp_write+0x2f4>)
 80109f0:	4868      	ldr	r0, [pc, #416]	; (8010b94 <tcp_write+0x2e8>)
 80109f2:	f004 fc31 	bl	8015258 <iprintf>
      seg = last_unsent;
 80109f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109f8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80109fa:	8a7b      	ldrh	r3, [r7, #18]
 80109fc:	88fa      	ldrh	r2, [r7, #6]
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d901      	bls.n	8010a06 <tcp_write+0x15a>
 8010a02:	8a7b      	ldrh	r3, [r7, #18]
 8010a04:	e000      	b.n	8010a08 <tcp_write+0x15c>
 8010a06:	88fb      	ldrh	r3, [r7, #6]
 8010a08:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	bfa8      	it	ge
 8010a0e:	4613      	movge	r3, r2
 8010a10:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010a12:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a16:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010a18:	4413      	add	r3, r2
 8010a1a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010a1e:	8a7a      	ldrh	r2, [r7, #18]
 8010a20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010a22:	1ad3      	subs	r3, r2, r3
 8010a24:	b29b      	uxth	r3, r3
 8010a26:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010a28:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010a2a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010a2c:	1ad3      	subs	r3, r2, r3
 8010a2e:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010a30:	8a7b      	ldrh	r3, [r7, #18]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d00b      	beq.n	8010a4e <tcp_write+0x1a2>
 8010a36:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a3a:	88fb      	ldrh	r3, [r7, #6]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d006      	beq.n	8010a4e <tcp_write+0x1a2>
 8010a40:	4b52      	ldr	r3, [pc, #328]	; (8010b8c <tcp_write+0x2e0>)
 8010a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a46:	4957      	ldr	r1, [pc, #348]	; (8010ba4 <tcp_write+0x2f8>)
 8010a48:	4852      	ldr	r0, [pc, #328]	; (8010b94 <tcp_write+0x2e8>)
 8010a4a:	f004 fc05 	bl	8015258 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010a4e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010a52:	88fb      	ldrh	r3, [r7, #6]
 8010a54:	429a      	cmp	r2, r3
 8010a56:	f080 8168 	bcs.w	8010d2a <tcp_write+0x47e>
 8010a5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f000 8164 	beq.w	8010d2a <tcp_write+0x47e>
 8010a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a64:	891b      	ldrh	r3, [r3, #8]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	f000 815f 	beq.w	8010d2a <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010a6c:	88fa      	ldrh	r2, [r7, #6]
 8010a6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a72:	1ad2      	subs	r2, r2, r3
 8010a74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010a76:	4293      	cmp	r3, r2
 8010a78:	bfa8      	it	ge
 8010a7a:	4613      	movge	r3, r2
 8010a7c:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010a80:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010a82:	797b      	ldrb	r3, [r7, #5]
 8010a84:	f003 0301 	and.w	r3, r3, #1
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d027      	beq.n	8010adc <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010a8c:	f107 0012 	add.w	r0, r7, #18
 8010a90:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010a92:	8bf9      	ldrh	r1, [r7, #30]
 8010a94:	2301      	movs	r3, #1
 8010a96:	9302      	str	r3, [sp, #8]
 8010a98:	797b      	ldrb	r3, [r7, #5]
 8010a9a:	9301      	str	r3, [sp, #4]
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	9300      	str	r3, [sp, #0]
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	2000      	movs	r0, #0
 8010aa4:	f7ff fe0e 	bl	80106c4 <tcp_pbuf_prealloc>
 8010aa8:	6578      	str	r0, [r7, #84]	; 0x54
 8010aaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	f000 8226 	beq.w	8010efe <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ab4:	6858      	ldr	r0, [r3, #4]
 8010ab6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010aba:	68ba      	ldr	r2, [r7, #8]
 8010abc:	4413      	add	r3, r2
 8010abe:	8bfa      	ldrh	r2, [r7, #30]
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	f004 fb9c 	bl	80151fe <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010ac6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010ac8:	f7fb f9f4 	bl	800beb4 <pbuf_clen>
 8010acc:	4603      	mov	r3, r0
 8010ace:	461a      	mov	r2, r3
 8010ad0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010ad4:	4413      	add	r3, r2
 8010ad6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010ada:	e041      	b.n	8010b60 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010adc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ade:	685b      	ldr	r3, [r3, #4]
 8010ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8010ae2:	e002      	b.n	8010aea <tcp_write+0x23e>
 8010ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	637b      	str	r3, [r7, #52]	; 0x34
 8010aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d1f8      	bne.n	8010ae4 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010af4:	7b1b      	ldrb	r3, [r3, #12]
 8010af6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d115      	bne.n	8010b2a <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b00:	685b      	ldr	r3, [r3, #4]
 8010b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b04:	8952      	ldrh	r2, [r2, #10]
 8010b06:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010b08:	68ba      	ldr	r2, [r7, #8]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d10d      	bne.n	8010b2a <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010b0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d006      	beq.n	8010b24 <tcp_write+0x278>
 8010b16:	4b1d      	ldr	r3, [pc, #116]	; (8010b8c <tcp_write+0x2e0>)
 8010b18:	f240 2231 	movw	r2, #561	; 0x231
 8010b1c:	4922      	ldr	r1, [pc, #136]	; (8010ba8 <tcp_write+0x2fc>)
 8010b1e:	481d      	ldr	r0, [pc, #116]	; (8010b94 <tcp_write+0x2e8>)
 8010b20:	f004 fb9a 	bl	8015258 <iprintf>
          extendlen = seglen;
 8010b24:	8bfb      	ldrh	r3, [r7, #30]
 8010b26:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010b28:	e01a      	b.n	8010b60 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010b2a:	8bfb      	ldrh	r3, [r7, #30]
 8010b2c:	2201      	movs	r2, #1
 8010b2e:	4619      	mov	r1, r3
 8010b30:	2000      	movs	r0, #0
 8010b32:	f7fa fe51 	bl	800b7d8 <pbuf_alloc>
 8010b36:	6578      	str	r0, [r7, #84]	; 0x54
 8010b38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	f000 81e1 	beq.w	8010f02 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8010b40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010b44:	68ba      	ldr	r2, [r7, #8]
 8010b46:	441a      	add	r2, r3
 8010b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010b4a:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010b4c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010b4e:	f7fb f9b1 	bl	800beb4 <pbuf_clen>
 8010b52:	4603      	mov	r3, r0
 8010b54:	461a      	mov	r2, r3
 8010b56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010b5a:	4413      	add	r3, r2
 8010b5c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010b60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010b64:	8bfb      	ldrh	r3, [r7, #30]
 8010b66:	4413      	add	r3, r2
 8010b68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010b6c:	e0dd      	b.n	8010d2a <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	f000 80d8 	beq.w	8010d2a <tcp_write+0x47e>
 8010b7a:	4b04      	ldr	r3, [pc, #16]	; (8010b8c <tcp_write+0x2e0>)
 8010b7c:	f240 224b 	movw	r2, #587	; 0x24b
 8010b80:	490a      	ldr	r1, [pc, #40]	; (8010bac <tcp_write+0x300>)
 8010b82:	4804      	ldr	r0, [pc, #16]	; (8010b94 <tcp_write+0x2e8>)
 8010b84:	f004 fb68 	bl	8015258 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010b88:	e0cf      	b.n	8010d2a <tcp_write+0x47e>
 8010b8a:	bf00      	nop
 8010b8c:	08017e7c 	.word	0x08017e7c
 8010b90:	0801801c 	.word	0x0801801c
 8010b94:	08017ed0 	.word	0x08017ed0
 8010b98:	08018034 	.word	0x08018034
 8010b9c:	08018068 	.word	0x08018068
 8010ba0:	08018080 	.word	0x08018080
 8010ba4:	080180a0 	.word	0x080180a0
 8010ba8:	080180c0 	.word	0x080180c0
 8010bac:	080180ec 	.word	0x080180ec
    struct pbuf *p;
    u16_t left = len - pos;
 8010bb0:	88fa      	ldrh	r2, [r7, #6]
 8010bb2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010bb6:	1ad3      	subs	r3, r2, r3
 8010bb8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010bba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010bbe:	b29b      	uxth	r3, r3
 8010bc0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010bc2:	1ad3      	subs	r3, r2, r3
 8010bc4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010bc6:	8b7a      	ldrh	r2, [r7, #26]
 8010bc8:	8bbb      	ldrh	r3, [r7, #28]
 8010bca:	4293      	cmp	r3, r2
 8010bcc:	bf28      	it	cs
 8010bce:	4613      	movcs	r3, r2
 8010bd0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010bd2:	797b      	ldrb	r3, [r7, #5]
 8010bd4:	f003 0301 	and.w	r3, r3, #1
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d036      	beq.n	8010c4a <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010bdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010be0:	b29a      	uxth	r2, r3
 8010be2:	8b3b      	ldrh	r3, [r7, #24]
 8010be4:	4413      	add	r3, r2
 8010be6:	b299      	uxth	r1, r3
 8010be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	bf0c      	ite	eq
 8010bee:	2301      	moveq	r3, #1
 8010bf0:	2300      	movne	r3, #0
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	f107 0012 	add.w	r0, r7, #18
 8010bf8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010bfa:	9302      	str	r3, [sp, #8]
 8010bfc:	797b      	ldrb	r3, [r7, #5]
 8010bfe:	9301      	str	r3, [sp, #4]
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	9300      	str	r3, [sp, #0]
 8010c04:	4603      	mov	r3, r0
 8010c06:	2036      	movs	r0, #54	; 0x36
 8010c08:	f7ff fd5c 	bl	80106c4 <tcp_pbuf_prealloc>
 8010c0c:	6338      	str	r0, [r7, #48]	; 0x30
 8010c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	f000 8178 	beq.w	8010f06 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c18:	895b      	ldrh	r3, [r3, #10]
 8010c1a:	8b3a      	ldrh	r2, [r7, #24]
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d906      	bls.n	8010c2e <tcp_write+0x382>
 8010c20:	4b8c      	ldr	r3, [pc, #560]	; (8010e54 <tcp_write+0x5a8>)
 8010c22:	f240 2267 	movw	r2, #615	; 0x267
 8010c26:	498c      	ldr	r1, [pc, #560]	; (8010e58 <tcp_write+0x5ac>)
 8010c28:	488c      	ldr	r0, [pc, #560]	; (8010e5c <tcp_write+0x5b0>)
 8010c2a:	f004 fb15 	bl	8015258 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8010c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c30:	685a      	ldr	r2, [r3, #4]
 8010c32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010c36:	18d0      	adds	r0, r2, r3
 8010c38:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010c3c:	68ba      	ldr	r2, [r7, #8]
 8010c3e:	4413      	add	r3, r2
 8010c40:	8b3a      	ldrh	r2, [r7, #24]
 8010c42:	4619      	mov	r1, r3
 8010c44:	f004 fadb 	bl	80151fe <memcpy>
 8010c48:	e02f      	b.n	8010caa <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010c4a:	8a7b      	ldrh	r3, [r7, #18]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d006      	beq.n	8010c5e <tcp_write+0x3b2>
 8010c50:	4b80      	ldr	r3, [pc, #512]	; (8010e54 <tcp_write+0x5a8>)
 8010c52:	f240 2271 	movw	r2, #625	; 0x271
 8010c56:	4982      	ldr	r1, [pc, #520]	; (8010e60 <tcp_write+0x5b4>)
 8010c58:	4880      	ldr	r0, [pc, #512]	; (8010e5c <tcp_write+0x5b0>)
 8010c5a:	f004 fafd 	bl	8015258 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010c5e:	8b3b      	ldrh	r3, [r7, #24]
 8010c60:	2201      	movs	r2, #1
 8010c62:	4619      	mov	r1, r3
 8010c64:	2036      	movs	r0, #54	; 0x36
 8010c66:	f7fa fdb7 	bl	800b7d8 <pbuf_alloc>
 8010c6a:	6178      	str	r0, [r7, #20]
 8010c6c:	697b      	ldr	r3, [r7, #20]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	f000 814b 	beq.w	8010f0a <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010c74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010c78:	68ba      	ldr	r2, [r7, #8]
 8010c7a:	441a      	add	r2, r3
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010c80:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010c84:	b29b      	uxth	r3, r3
 8010c86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	2036      	movs	r0, #54	; 0x36
 8010c8e:	f7fa fda3 	bl	800b7d8 <pbuf_alloc>
 8010c92:	6338      	str	r0, [r7, #48]	; 0x30
 8010c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d103      	bne.n	8010ca2 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010c9a:	6978      	ldr	r0, [r7, #20]
 8010c9c:	f7fb f87c 	bl	800bd98 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010ca0:	e136      	b.n	8010f10 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010ca2:	6979      	ldr	r1, [r7, #20]
 8010ca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ca6:	f7fb f945 	bl	800bf34 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010caa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010cac:	f7fb f902 	bl	800beb4 <pbuf_clen>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	461a      	mov	r2, r3
 8010cb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010cb8:	4413      	add	r3, r2
 8010cba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8010cbe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010cc2:	2b09      	cmp	r3, #9
 8010cc4:	d903      	bls.n	8010cce <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8010cc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010cc8:	f7fb f866 	bl	800bd98 <pbuf_free>
      goto memerr;
 8010ccc:	e120      	b.n	8010f10 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010cd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010cd6:	441a      	add	r2, r3
 8010cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010cdc:	9300      	str	r3, [sp, #0]
 8010cde:	4613      	mov	r3, r2
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010ce4:	68f8      	ldr	r0, [r7, #12]
 8010ce6:	f7ff fc4f 	bl	8010588 <tcp_create_segment>
 8010cea:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010cec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	f000 810d 	beq.w	8010f0e <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010cf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d102      	bne.n	8010d00 <tcp_write+0x454>
      queue = seg;
 8010cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8010cfe:	e00c      	b.n	8010d1a <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8010d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d106      	bne.n	8010d14 <tcp_write+0x468>
 8010d06:	4b53      	ldr	r3, [pc, #332]	; (8010e54 <tcp_write+0x5a8>)
 8010d08:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010d0c:	4955      	ldr	r1, [pc, #340]	; (8010e64 <tcp_write+0x5b8>)
 8010d0e:	4853      	ldr	r0, [pc, #332]	; (8010e5c <tcp_write+0x5b0>)
 8010d10:	f004 faa2 	bl	8015258 <iprintf>
      prev_seg->next = seg;
 8010d14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d16:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010d18:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d1c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8010d1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d22:	8b3b      	ldrh	r3, [r7, #24]
 8010d24:	4413      	add	r3, r2
 8010d26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010d2a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d2e:	88fb      	ldrh	r3, [r7, #6]
 8010d30:	429a      	cmp	r2, r3
 8010d32:	f4ff af3d 	bcc.w	8010bb0 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010d36:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d02c      	beq.n	8010d96 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d42:	e01e      	b.n	8010d82 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 8010d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d46:	891a      	ldrh	r2, [r3, #8]
 8010d48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d4a:	4413      	add	r3, r2
 8010d4c:	b29a      	uxth	r2, r3
 8010d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d50:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8010d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d110      	bne.n	8010d7c <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d60:	8952      	ldrh	r2, [r2, #10]
 8010d62:	4413      	add	r3, r2
 8010d64:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010d66:	68b9      	ldr	r1, [r7, #8]
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f004 fa48 	bl	80151fe <memcpy>
        p->len += oversize_used;
 8010d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d70:	895a      	ldrh	r2, [r3, #10]
 8010d72:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d74:	4413      	add	r3, r2
 8010d76:	b29a      	uxth	r2, r3
 8010d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d7a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d1dd      	bne.n	8010d44 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 8010d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d8a:	891a      	ldrh	r2, [r3, #8]
 8010d8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d8e:	4413      	add	r3, r2
 8010d90:	b29a      	uxth	r2, r3
 8010d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d94:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8010d96:	8a7a      	ldrh	r2, [r7, #18]
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8010d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d018      	beq.n	8010dd6 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8010da4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d106      	bne.n	8010db8 <tcp_write+0x50c>
 8010daa:	4b2a      	ldr	r3, [pc, #168]	; (8010e54 <tcp_write+0x5a8>)
 8010dac:	f240 22e1 	movw	r2, #737	; 0x2e1
 8010db0:	492d      	ldr	r1, [pc, #180]	; (8010e68 <tcp_write+0x5bc>)
 8010db2:	482a      	ldr	r0, [pc, #168]	; (8010e5c <tcp_write+0x5b0>)
 8010db4:	f004 fa50 	bl	8015258 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8010db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dba:	685b      	ldr	r3, [r3, #4]
 8010dbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7fb f8b8 	bl	800bf34 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8010dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dc6:	891a      	ldrh	r2, [r3, #8]
 8010dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010dca:	891b      	ldrh	r3, [r3, #8]
 8010dcc:	4413      	add	r3, r2
 8010dce:	b29a      	uxth	r2, r3
 8010dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dd2:	811a      	strh	r2, [r3, #8]
 8010dd4:	e037      	b.n	8010e46 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 8010dd6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d034      	beq.n	8010e46 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8010ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d003      	beq.n	8010dea <tcp_write+0x53e>
 8010de2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010de4:	685b      	ldr	r3, [r3, #4]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d106      	bne.n	8010df8 <tcp_write+0x54c>
 8010dea:	4b1a      	ldr	r3, [pc, #104]	; (8010e54 <tcp_write+0x5a8>)
 8010dec:	f240 22e7 	movw	r2, #743	; 0x2e7
 8010df0:	491e      	ldr	r1, [pc, #120]	; (8010e6c <tcp_write+0x5c0>)
 8010df2:	481a      	ldr	r0, [pc, #104]	; (8010e5c <tcp_write+0x5b0>)
 8010df4:	f004 fa30 	bl	8015258 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010df8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dfa:	685b      	ldr	r3, [r3, #4]
 8010dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8010dfe:	e009      	b.n	8010e14 <tcp_write+0x568>
      p->tot_len += extendlen;
 8010e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e02:	891a      	ldrh	r2, [r3, #8]
 8010e04:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010e06:	4413      	add	r3, r2
 8010e08:	b29a      	uxth	r2, r3
 8010e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d1f1      	bne.n	8010e00 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 8010e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e1e:	891a      	ldrh	r2, [r3, #8]
 8010e20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010e22:	4413      	add	r3, r2
 8010e24:	b29a      	uxth	r2, r3
 8010e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e28:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2c:	895a      	ldrh	r2, [r3, #10]
 8010e2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010e30:	4413      	add	r3, r2
 8010e32:	b29a      	uxth	r2, r3
 8010e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e36:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e3a:	891a      	ldrh	r2, [r3, #8]
 8010e3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010e3e:	4413      	add	r3, r2
 8010e40:	b29a      	uxth	r2, r3
 8010e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e44:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d111      	bne.n	8010e70 <tcp_write+0x5c4>
    pcb->unsent = queue;
 8010e4c:	68fb      	ldr	r3, [r7, #12]
 8010e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e50:	66da      	str	r2, [r3, #108]	; 0x6c
 8010e52:	e010      	b.n	8010e76 <tcp_write+0x5ca>
 8010e54:	08017e7c 	.word	0x08017e7c
 8010e58:	0801811c 	.word	0x0801811c
 8010e5c:	08017ed0 	.word	0x08017ed0
 8010e60:	0801815c 	.word	0x0801815c
 8010e64:	0801816c 	.word	0x0801816c
 8010e68:	08018180 	.word	0x08018180
 8010e6c:	080181b8 	.word	0x080181b8
  } else {
    last_unsent->next = queue;
 8010e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010e74:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010e7a:	88fb      	ldrh	r3, [r7, #6]
 8010e7c:	441a      	add	r2, r3
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010e88:	88fb      	ldrh	r3, [r7, #6]
 8010e8a:	1ad3      	subs	r3, r2, r3
 8010e8c:	b29a      	uxth	r2, r3
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8010e9a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010e9e:	68fb      	ldr	r3, [r7, #12]
 8010ea0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d00e      	beq.n	8010ec6 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d10a      	bne.n	8010ec6 <tcp_write+0x61a>
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d106      	bne.n	8010ec6 <tcp_write+0x61a>
 8010eb8:	4b2c      	ldr	r3, [pc, #176]	; (8010f6c <tcp_write+0x6c0>)
 8010eba:	f240 3213 	movw	r2, #787	; 0x313
 8010ebe:	492c      	ldr	r1, [pc, #176]	; (8010f70 <tcp_write+0x6c4>)
 8010ec0:	482c      	ldr	r0, [pc, #176]	; (8010f74 <tcp_write+0x6c8>)
 8010ec2:	f004 f9c9 	bl	8015258 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8010ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d016      	beq.n	8010efa <tcp_write+0x64e>
 8010ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ece:	68db      	ldr	r3, [r3, #12]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d012      	beq.n	8010efa <tcp_write+0x64e>
 8010ed4:	797b      	ldrb	r3, [r7, #5]
 8010ed6:	f003 0302 	and.w	r3, r3, #2
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d10d      	bne.n	8010efa <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8010ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ee0:	68db      	ldr	r3, [r3, #12]
 8010ee2:	899b      	ldrh	r3, [r3, #12]
 8010ee4:	b29c      	uxth	r4, r3
 8010ee6:	2008      	movs	r0, #8
 8010ee8:	f7f9 fb78 	bl	800a5dc <lwip_htons>
 8010eec:	4603      	mov	r3, r0
 8010eee:	461a      	mov	r2, r3
 8010ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ef2:	68db      	ldr	r3, [r3, #12]
 8010ef4:	4322      	orrs	r2, r4
 8010ef6:	b292      	uxth	r2, r2
 8010ef8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010efa:	2300      	movs	r3, #0
 8010efc:	e031      	b.n	8010f62 <tcp_write+0x6b6>
          goto memerr;
 8010efe:	bf00      	nop
 8010f00:	e006      	b.n	8010f10 <tcp_write+0x664>
            goto memerr;
 8010f02:	bf00      	nop
 8010f04:	e004      	b.n	8010f10 <tcp_write+0x664>
        goto memerr;
 8010f06:	bf00      	nop
 8010f08:	e002      	b.n	8010f10 <tcp_write+0x664>
        goto memerr;
 8010f0a:	bf00      	nop
 8010f0c:	e000      	b.n	8010f10 <tcp_write+0x664>
      goto memerr;
 8010f0e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	8b5b      	ldrh	r3, [r3, #26]
 8010f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f18:	b29a      	uxth	r2, r3
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8010f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d002      	beq.n	8010f2a <tcp_write+0x67e>
    pbuf_free(concat_p);
 8010f24:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010f26:	f7fa ff37 	bl	800bd98 <pbuf_free>
  }
  if (queue != NULL) {
 8010f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d002      	beq.n	8010f36 <tcp_write+0x68a>
    tcp_segs_free(queue);
 8010f30:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010f32:	f7fc fb4b 	bl	800d5cc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d00e      	beq.n	8010f5e <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d10a      	bne.n	8010f5e <tcp_write+0x6b2>
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d106      	bne.n	8010f5e <tcp_write+0x6b2>
 8010f50:	4b06      	ldr	r3, [pc, #24]	; (8010f6c <tcp_write+0x6c0>)
 8010f52:	f44f 724a 	mov.w	r2, #808	; 0x328
 8010f56:	4906      	ldr	r1, [pc, #24]	; (8010f70 <tcp_write+0x6c4>)
 8010f58:	4806      	ldr	r0, [pc, #24]	; (8010f74 <tcp_write+0x6c8>)
 8010f5a:	f004 f97d 	bl	8015258 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8010f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010f62:	4618      	mov	r0, r3
 8010f64:	375c      	adds	r7, #92	; 0x5c
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd90      	pop	{r4, r7, pc}
 8010f6a:	bf00      	nop
 8010f6c:	08017e7c 	.word	0x08017e7c
 8010f70:	080181f0 	.word	0x080181f0
 8010f74:	08017ed0 	.word	0x08017ed0

08010f78 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010f78:	b590      	push	{r4, r7, lr}
 8010f7a:	b08b      	sub	sp, #44	; 0x2c
 8010f7c:	af02      	add	r7, sp, #8
 8010f7e:	6078      	str	r0, [r7, #4]
 8010f80:	460b      	mov	r3, r1
 8010f82:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010f84:	2300      	movs	r3, #0
 8010f86:	61fb      	str	r3, [r7, #28]
 8010f88:	2300      	movs	r3, #0
 8010f8a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d106      	bne.n	8010fa4 <tcp_split_unsent_seg+0x2c>
 8010f96:	4b95      	ldr	r3, [pc, #596]	; (80111ec <tcp_split_unsent_seg+0x274>)
 8010f98:	f240 324b 	movw	r2, #843	; 0x34b
 8010f9c:	4994      	ldr	r1, [pc, #592]	; (80111f0 <tcp_split_unsent_seg+0x278>)
 8010f9e:	4895      	ldr	r0, [pc, #596]	; (80111f4 <tcp_split_unsent_seg+0x27c>)
 8010fa0:	f004 f95a 	bl	8015258 <iprintf>

  useg = pcb->unsent;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fa8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d102      	bne.n	8010fb6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010fb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010fb4:	e116      	b.n	80111e4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010fb6:	887b      	ldrh	r3, [r7, #2]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d109      	bne.n	8010fd0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010fbc:	4b8b      	ldr	r3, [pc, #556]	; (80111ec <tcp_split_unsent_seg+0x274>)
 8010fbe:	f240 3253 	movw	r2, #851	; 0x353
 8010fc2:	498d      	ldr	r1, [pc, #564]	; (80111f8 <tcp_split_unsent_seg+0x280>)
 8010fc4:	488b      	ldr	r0, [pc, #556]	; (80111f4 <tcp_split_unsent_seg+0x27c>)
 8010fc6:	f004 f947 	bl	8015258 <iprintf>
    return ERR_VAL;
 8010fca:	f06f 0305 	mvn.w	r3, #5
 8010fce:	e109      	b.n	80111e4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	891b      	ldrh	r3, [r3, #8]
 8010fd4:	887a      	ldrh	r2, [r7, #2]
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d301      	bcc.n	8010fde <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010fda:	2300      	movs	r3, #0
 8010fdc:	e102      	b.n	80111e4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fe2:	887a      	ldrh	r2, [r7, #2]
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d906      	bls.n	8010ff6 <tcp_split_unsent_seg+0x7e>
 8010fe8:	4b80      	ldr	r3, [pc, #512]	; (80111ec <tcp_split_unsent_seg+0x274>)
 8010fea:	f240 325b 	movw	r2, #859	; 0x35b
 8010fee:	4983      	ldr	r1, [pc, #524]	; (80111fc <tcp_split_unsent_seg+0x284>)
 8010ff0:	4880      	ldr	r0, [pc, #512]	; (80111f4 <tcp_split_unsent_seg+0x27c>)
 8010ff2:	f004 f931 	bl	8015258 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	891b      	ldrh	r3, [r3, #8]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d106      	bne.n	801100c <tcp_split_unsent_seg+0x94>
 8010ffe:	4b7b      	ldr	r3, [pc, #492]	; (80111ec <tcp_split_unsent_seg+0x274>)
 8011000:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011004:	497e      	ldr	r1, [pc, #504]	; (8011200 <tcp_split_unsent_seg+0x288>)
 8011006:	487b      	ldr	r0, [pc, #492]	; (80111f4 <tcp_split_unsent_seg+0x27c>)
 8011008:	f004 f926 	bl	8015258 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801100c:	697b      	ldr	r3, [r7, #20]
 801100e:	7a9b      	ldrb	r3, [r3, #10]
 8011010:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011012:	7bfb      	ldrb	r3, [r7, #15]
 8011014:	009b      	lsls	r3, r3, #2
 8011016:	b2db      	uxtb	r3, r3
 8011018:	f003 0304 	and.w	r3, r3, #4
 801101c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	891a      	ldrh	r2, [r3, #8]
 8011022:	887b      	ldrh	r3, [r7, #2]
 8011024:	1ad3      	subs	r3, r2, r3
 8011026:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011028:	7bbb      	ldrb	r3, [r7, #14]
 801102a:	b29a      	uxth	r2, r3
 801102c:	89bb      	ldrh	r3, [r7, #12]
 801102e:	4413      	add	r3, r2
 8011030:	b29b      	uxth	r3, r3
 8011032:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011036:	4619      	mov	r1, r3
 8011038:	2036      	movs	r0, #54	; 0x36
 801103a:	f7fa fbcd 	bl	800b7d8 <pbuf_alloc>
 801103e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011040:	693b      	ldr	r3, [r7, #16]
 8011042:	2b00      	cmp	r3, #0
 8011044:	f000 80b7 	beq.w	80111b6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011048:	697b      	ldr	r3, [r7, #20]
 801104a:	685b      	ldr	r3, [r3, #4]
 801104c:	891a      	ldrh	r2, [r3, #8]
 801104e:	697b      	ldr	r3, [r7, #20]
 8011050:	891b      	ldrh	r3, [r3, #8]
 8011052:	1ad3      	subs	r3, r2, r3
 8011054:	b29a      	uxth	r2, r3
 8011056:	887b      	ldrh	r3, [r7, #2]
 8011058:	4413      	add	r3, r2
 801105a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801105c:	697b      	ldr	r3, [r7, #20]
 801105e:	6858      	ldr	r0, [r3, #4]
 8011060:	693b      	ldr	r3, [r7, #16]
 8011062:	685a      	ldr	r2, [r3, #4]
 8011064:	7bbb      	ldrb	r3, [r7, #14]
 8011066:	18d1      	adds	r1, r2, r3
 8011068:	897b      	ldrh	r3, [r7, #10]
 801106a:	89ba      	ldrh	r2, [r7, #12]
 801106c:	f7fb f88a 	bl	800c184 <pbuf_copy_partial>
 8011070:	4603      	mov	r3, r0
 8011072:	461a      	mov	r2, r3
 8011074:	89bb      	ldrh	r3, [r7, #12]
 8011076:	4293      	cmp	r3, r2
 8011078:	f040 809f 	bne.w	80111ba <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	68db      	ldr	r3, [r3, #12]
 8011080:	899b      	ldrh	r3, [r3, #12]
 8011082:	b29b      	uxth	r3, r3
 8011084:	4618      	mov	r0, r3
 8011086:	f7f9 faa9 	bl	800a5dc <lwip_htons>
 801108a:	4603      	mov	r3, r0
 801108c:	b2db      	uxtb	r3, r3
 801108e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011092:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011094:	2300      	movs	r3, #0
 8011096:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011098:	7efb      	ldrb	r3, [r7, #27]
 801109a:	f003 0308 	and.w	r3, r3, #8
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d007      	beq.n	80110b2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80110a2:	7efb      	ldrb	r3, [r7, #27]
 80110a4:	f023 0308 	bic.w	r3, r3, #8
 80110a8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80110aa:	7ebb      	ldrb	r3, [r7, #26]
 80110ac:	f043 0308 	orr.w	r3, r3, #8
 80110b0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80110b2:	7efb      	ldrb	r3, [r7, #27]
 80110b4:	f003 0301 	and.w	r3, r3, #1
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d007      	beq.n	80110cc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80110bc:	7efb      	ldrb	r3, [r7, #27]
 80110be:	f023 0301 	bic.w	r3, r3, #1
 80110c2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80110c4:	7ebb      	ldrb	r3, [r7, #26]
 80110c6:	f043 0301 	orr.w	r3, r3, #1
 80110ca:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	68db      	ldr	r3, [r3, #12]
 80110d0:	685b      	ldr	r3, [r3, #4]
 80110d2:	4618      	mov	r0, r3
 80110d4:	f7f9 fa97 	bl	800a606 <lwip_htonl>
 80110d8:	4602      	mov	r2, r0
 80110da:	887b      	ldrh	r3, [r7, #2]
 80110dc:	18d1      	adds	r1, r2, r3
 80110de:	7eba      	ldrb	r2, [r7, #26]
 80110e0:	7bfb      	ldrb	r3, [r7, #15]
 80110e2:	9300      	str	r3, [sp, #0]
 80110e4:	460b      	mov	r3, r1
 80110e6:	6939      	ldr	r1, [r7, #16]
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f7ff fa4d 	bl	8010588 <tcp_create_segment>
 80110ee:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80110f0:	69fb      	ldr	r3, [r7, #28]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d063      	beq.n	80111be <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	685b      	ldr	r3, [r3, #4]
 80110fa:	4618      	mov	r0, r3
 80110fc:	f7fa feda 	bl	800beb4 <pbuf_clen>
 8011100:	4603      	mov	r3, r0
 8011102:	461a      	mov	r2, r3
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801110a:	1a9b      	subs	r3, r3, r2
 801110c:	b29a      	uxth	r2, r3
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011114:	697b      	ldr	r3, [r7, #20]
 8011116:	6858      	ldr	r0, [r3, #4]
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	685b      	ldr	r3, [r3, #4]
 801111c:	891a      	ldrh	r2, [r3, #8]
 801111e:	89bb      	ldrh	r3, [r7, #12]
 8011120:	1ad3      	subs	r3, r2, r3
 8011122:	b29b      	uxth	r3, r3
 8011124:	4619      	mov	r1, r3
 8011126:	f7fa fcb1 	bl	800ba8c <pbuf_realloc>
  useg->len -= remainder;
 801112a:	697b      	ldr	r3, [r7, #20]
 801112c:	891a      	ldrh	r2, [r3, #8]
 801112e:	89bb      	ldrh	r3, [r7, #12]
 8011130:	1ad3      	subs	r3, r2, r3
 8011132:	b29a      	uxth	r2, r3
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011138:	697b      	ldr	r3, [r7, #20]
 801113a:	68db      	ldr	r3, [r3, #12]
 801113c:	899b      	ldrh	r3, [r3, #12]
 801113e:	b29c      	uxth	r4, r3
 8011140:	7efb      	ldrb	r3, [r7, #27]
 8011142:	b29b      	uxth	r3, r3
 8011144:	4618      	mov	r0, r3
 8011146:	f7f9 fa49 	bl	800a5dc <lwip_htons>
 801114a:	4603      	mov	r3, r0
 801114c:	461a      	mov	r2, r3
 801114e:	697b      	ldr	r3, [r7, #20]
 8011150:	68db      	ldr	r3, [r3, #12]
 8011152:	4322      	orrs	r2, r4
 8011154:	b292      	uxth	r2, r2
 8011156:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	4618      	mov	r0, r3
 801115e:	f7fa fea9 	bl	800beb4 <pbuf_clen>
 8011162:	4603      	mov	r3, r0
 8011164:	461a      	mov	r2, r3
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801116c:	4413      	add	r3, r2
 801116e:	b29a      	uxth	r2, r3
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011176:	69fb      	ldr	r3, [r7, #28]
 8011178:	685b      	ldr	r3, [r3, #4]
 801117a:	4618      	mov	r0, r3
 801117c:	f7fa fe9a 	bl	800beb4 <pbuf_clen>
 8011180:	4603      	mov	r3, r0
 8011182:	461a      	mov	r2, r3
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801118a:	4413      	add	r3, r2
 801118c:	b29a      	uxth	r2, r3
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011194:	697b      	ldr	r3, [r7, #20]
 8011196:	681a      	ldr	r2, [r3, #0]
 8011198:	69fb      	ldr	r3, [r7, #28]
 801119a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801119c:	697b      	ldr	r3, [r7, #20]
 801119e:	69fa      	ldr	r2, [r7, #28]
 80111a0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80111a2:	69fb      	ldr	r3, [r7, #28]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d103      	bne.n	80111b2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	2200      	movs	r2, #0
 80111ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80111b2:	2300      	movs	r3, #0
 80111b4:	e016      	b.n	80111e4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80111b6:	bf00      	nop
 80111b8:	e002      	b.n	80111c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80111ba:	bf00      	nop
 80111bc:	e000      	b.n	80111c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80111be:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80111c0:	69fb      	ldr	r3, [r7, #28]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d006      	beq.n	80111d4 <tcp_split_unsent_seg+0x25c>
 80111c6:	4b09      	ldr	r3, [pc, #36]	; (80111ec <tcp_split_unsent_seg+0x274>)
 80111c8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80111cc:	490d      	ldr	r1, [pc, #52]	; (8011204 <tcp_split_unsent_seg+0x28c>)
 80111ce:	4809      	ldr	r0, [pc, #36]	; (80111f4 <tcp_split_unsent_seg+0x27c>)
 80111d0:	f004 f842 	bl	8015258 <iprintf>
  if (p != NULL) {
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d002      	beq.n	80111e0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80111da:	6938      	ldr	r0, [r7, #16]
 80111dc:	f7fa fddc 	bl	800bd98 <pbuf_free>
  }

  return ERR_MEM;
 80111e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80111e4:	4618      	mov	r0, r3
 80111e6:	3724      	adds	r7, #36	; 0x24
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd90      	pop	{r4, r7, pc}
 80111ec:	08017e7c 	.word	0x08017e7c
 80111f0:	08018210 	.word	0x08018210
 80111f4:	08017ed0 	.word	0x08017ed0
 80111f8:	08018234 	.word	0x08018234
 80111fc:	08018258 	.word	0x08018258
 8011200:	08018268 	.word	0x08018268
 8011204:	08018278 	.word	0x08018278

08011208 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011208:	b590      	push	{r4, r7, lr}
 801120a:	b085      	sub	sp, #20
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d106      	bne.n	8011224 <tcp_send_fin+0x1c>
 8011216:	4b21      	ldr	r3, [pc, #132]	; (801129c <tcp_send_fin+0x94>)
 8011218:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801121c:	4920      	ldr	r1, [pc, #128]	; (80112a0 <tcp_send_fin+0x98>)
 801121e:	4821      	ldr	r0, [pc, #132]	; (80112a4 <tcp_send_fin+0x9c>)
 8011220:	f004 f81a 	bl	8015258 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011228:	2b00      	cmp	r3, #0
 801122a:	d02e      	beq.n	801128a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011230:	60fb      	str	r3, [r7, #12]
 8011232:	e002      	b.n	801123a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d1f8      	bne.n	8011234 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	68db      	ldr	r3, [r3, #12]
 8011246:	899b      	ldrh	r3, [r3, #12]
 8011248:	b29b      	uxth	r3, r3
 801124a:	4618      	mov	r0, r3
 801124c:	f7f9 f9c6 	bl	800a5dc <lwip_htons>
 8011250:	4603      	mov	r3, r0
 8011252:	b2db      	uxtb	r3, r3
 8011254:	f003 0307 	and.w	r3, r3, #7
 8011258:	2b00      	cmp	r3, #0
 801125a:	d116      	bne.n	801128a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	68db      	ldr	r3, [r3, #12]
 8011260:	899b      	ldrh	r3, [r3, #12]
 8011262:	b29c      	uxth	r4, r3
 8011264:	2001      	movs	r0, #1
 8011266:	f7f9 f9b9 	bl	800a5dc <lwip_htons>
 801126a:	4603      	mov	r3, r0
 801126c:	461a      	mov	r2, r3
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	68db      	ldr	r3, [r3, #12]
 8011272:	4322      	orrs	r2, r4
 8011274:	b292      	uxth	r2, r2
 8011276:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	8b5b      	ldrh	r3, [r3, #26]
 801127c:	f043 0320 	orr.w	r3, r3, #32
 8011280:	b29a      	uxth	r2, r3
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011286:	2300      	movs	r3, #0
 8011288:	e004      	b.n	8011294 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801128a:	2101      	movs	r1, #1
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f000 f80b 	bl	80112a8 <tcp_enqueue_flags>
 8011292:	4603      	mov	r3, r0
}
 8011294:	4618      	mov	r0, r3
 8011296:	3714      	adds	r7, #20
 8011298:	46bd      	mov	sp, r7
 801129a:	bd90      	pop	{r4, r7, pc}
 801129c:	08017e7c 	.word	0x08017e7c
 80112a0:	08018284 	.word	0x08018284
 80112a4:	08017ed0 	.word	0x08017ed0

080112a8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b08a      	sub	sp, #40	; 0x28
 80112ac:	af02      	add	r7, sp, #8
 80112ae:	6078      	str	r0, [r7, #4]
 80112b0:	460b      	mov	r3, r1
 80112b2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80112b4:	2300      	movs	r3, #0
 80112b6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80112b8:	2300      	movs	r3, #0
 80112ba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80112bc:	78fb      	ldrb	r3, [r7, #3]
 80112be:	f003 0303 	and.w	r3, r3, #3
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d106      	bne.n	80112d4 <tcp_enqueue_flags+0x2c>
 80112c6:	4b67      	ldr	r3, [pc, #412]	; (8011464 <tcp_enqueue_flags+0x1bc>)
 80112c8:	f240 4212 	movw	r2, #1042	; 0x412
 80112cc:	4966      	ldr	r1, [pc, #408]	; (8011468 <tcp_enqueue_flags+0x1c0>)
 80112ce:	4867      	ldr	r0, [pc, #412]	; (801146c <tcp_enqueue_flags+0x1c4>)
 80112d0:	f003 ffc2 	bl	8015258 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d106      	bne.n	80112e8 <tcp_enqueue_flags+0x40>
 80112da:	4b62      	ldr	r3, [pc, #392]	; (8011464 <tcp_enqueue_flags+0x1bc>)
 80112dc:	f240 4213 	movw	r2, #1043	; 0x413
 80112e0:	4963      	ldr	r1, [pc, #396]	; (8011470 <tcp_enqueue_flags+0x1c8>)
 80112e2:	4862      	ldr	r0, [pc, #392]	; (801146c <tcp_enqueue_flags+0x1c4>)
 80112e4:	f003 ffb8 	bl	8015258 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80112e8:	78fb      	ldrb	r3, [r7, #3]
 80112ea:	f003 0302 	and.w	r3, r3, #2
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d001      	beq.n	80112f6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80112f2:	2301      	movs	r3, #1
 80112f4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80112f6:	7ffb      	ldrb	r3, [r7, #31]
 80112f8:	009b      	lsls	r3, r3, #2
 80112fa:	b2db      	uxtb	r3, r3
 80112fc:	f003 0304 	and.w	r3, r3, #4
 8011300:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011302:	7dfb      	ldrb	r3, [r7, #23]
 8011304:	b29b      	uxth	r3, r3
 8011306:	f44f 7220 	mov.w	r2, #640	; 0x280
 801130a:	4619      	mov	r1, r3
 801130c:	2036      	movs	r0, #54	; 0x36
 801130e:	f7fa fa63 	bl	800b7d8 <pbuf_alloc>
 8011312:	6138      	str	r0, [r7, #16]
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d109      	bne.n	801132e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	8b5b      	ldrh	r3, [r3, #26]
 801131e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011322:	b29a      	uxth	r2, r3
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801132c:	e095      	b.n	801145a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801132e:	693b      	ldr	r3, [r7, #16]
 8011330:	895a      	ldrh	r2, [r3, #10]
 8011332:	7dfb      	ldrb	r3, [r7, #23]
 8011334:	b29b      	uxth	r3, r3
 8011336:	429a      	cmp	r2, r3
 8011338:	d206      	bcs.n	8011348 <tcp_enqueue_flags+0xa0>
 801133a:	4b4a      	ldr	r3, [pc, #296]	; (8011464 <tcp_enqueue_flags+0x1bc>)
 801133c:	f240 423a 	movw	r2, #1082	; 0x43a
 8011340:	494c      	ldr	r1, [pc, #304]	; (8011474 <tcp_enqueue_flags+0x1cc>)
 8011342:	484a      	ldr	r0, [pc, #296]	; (801146c <tcp_enqueue_flags+0x1c4>)
 8011344:	f003 ff88 	bl	8015258 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801134c:	78fa      	ldrb	r2, [r7, #3]
 801134e:	7ffb      	ldrb	r3, [r7, #31]
 8011350:	9300      	str	r3, [sp, #0]
 8011352:	460b      	mov	r3, r1
 8011354:	6939      	ldr	r1, [r7, #16]
 8011356:	6878      	ldr	r0, [r7, #4]
 8011358:	f7ff f916 	bl	8010588 <tcp_create_segment>
 801135c:	60f8      	str	r0, [r7, #12]
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d109      	bne.n	8011378 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	8b5b      	ldrh	r3, [r3, #26]
 8011368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801136c:	b29a      	uxth	r2, r3
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011376:	e070      	b.n	801145a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	f003 0303 	and.w	r3, r3, #3
 8011380:	2b00      	cmp	r3, #0
 8011382:	d006      	beq.n	8011392 <tcp_enqueue_flags+0xea>
 8011384:	4b37      	ldr	r3, [pc, #220]	; (8011464 <tcp_enqueue_flags+0x1bc>)
 8011386:	f240 4242 	movw	r2, #1090	; 0x442
 801138a:	493b      	ldr	r1, [pc, #236]	; (8011478 <tcp_enqueue_flags+0x1d0>)
 801138c:	4837      	ldr	r0, [pc, #220]	; (801146c <tcp_enqueue_flags+0x1c4>)
 801138e:	f003 ff63 	bl	8015258 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	891b      	ldrh	r3, [r3, #8]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d006      	beq.n	80113a8 <tcp_enqueue_flags+0x100>
 801139a:	4b32      	ldr	r3, [pc, #200]	; (8011464 <tcp_enqueue_flags+0x1bc>)
 801139c:	f240 4243 	movw	r2, #1091	; 0x443
 80113a0:	4936      	ldr	r1, [pc, #216]	; (801147c <tcp_enqueue_flags+0x1d4>)
 80113a2:	4832      	ldr	r0, [pc, #200]	; (801146c <tcp_enqueue_flags+0x1c4>)
 80113a4:	f003 ff58 	bl	8015258 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d103      	bne.n	80113b8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	68fa      	ldr	r2, [r7, #12]
 80113b4:	66da      	str	r2, [r3, #108]	; 0x6c
 80113b6:	e00d      	b.n	80113d4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113bc:	61bb      	str	r3, [r7, #24]
 80113be:	e002      	b.n	80113c6 <tcp_enqueue_flags+0x11e>
 80113c0:	69bb      	ldr	r3, [r7, #24]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	61bb      	str	r3, [r7, #24]
 80113c6:	69bb      	ldr	r3, [r7, #24]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d1f8      	bne.n	80113c0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80113ce:	69bb      	ldr	r3, [r7, #24]
 80113d0:	68fa      	ldr	r2, [r7, #12]
 80113d2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2200      	movs	r2, #0
 80113d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80113dc:	78fb      	ldrb	r3, [r7, #3]
 80113de:	f003 0302 	and.w	r3, r3, #2
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d104      	bne.n	80113f0 <tcp_enqueue_flags+0x148>
 80113e6:	78fb      	ldrb	r3, [r7, #3]
 80113e8:	f003 0301 	and.w	r3, r3, #1
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d004      	beq.n	80113fa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113f4:	1c5a      	adds	r2, r3, #1
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80113fa:	78fb      	ldrb	r3, [r7, #3]
 80113fc:	f003 0301 	and.w	r3, r3, #1
 8011400:	2b00      	cmp	r3, #0
 8011402:	d006      	beq.n	8011412 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	8b5b      	ldrh	r3, [r3, #26]
 8011408:	f043 0320 	orr.w	r3, r3, #32
 801140c:	b29a      	uxth	r2, r3
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	4618      	mov	r0, r3
 8011418:	f7fa fd4c 	bl	800beb4 <pbuf_clen>
 801141c:	4603      	mov	r3, r0
 801141e:	461a      	mov	r2, r3
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011426:	4413      	add	r3, r2
 8011428:	b29a      	uxth	r2, r3
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011436:	2b00      	cmp	r3, #0
 8011438:	d00e      	beq.n	8011458 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801143e:	2b00      	cmp	r3, #0
 8011440:	d10a      	bne.n	8011458 <tcp_enqueue_flags+0x1b0>
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011446:	2b00      	cmp	r3, #0
 8011448:	d106      	bne.n	8011458 <tcp_enqueue_flags+0x1b0>
 801144a:	4b06      	ldr	r3, [pc, #24]	; (8011464 <tcp_enqueue_flags+0x1bc>)
 801144c:	f240 4266 	movw	r2, #1126	; 0x466
 8011450:	490b      	ldr	r1, [pc, #44]	; (8011480 <tcp_enqueue_flags+0x1d8>)
 8011452:	4806      	ldr	r0, [pc, #24]	; (801146c <tcp_enqueue_flags+0x1c4>)
 8011454:	f003 ff00 	bl	8015258 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011458:	2300      	movs	r3, #0
}
 801145a:	4618      	mov	r0, r3
 801145c:	3720      	adds	r7, #32
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}
 8011462:	bf00      	nop
 8011464:	08017e7c 	.word	0x08017e7c
 8011468:	080182a0 	.word	0x080182a0
 801146c:	08017ed0 	.word	0x08017ed0
 8011470:	080182f8 	.word	0x080182f8
 8011474:	08018318 	.word	0x08018318
 8011478:	08018354 	.word	0x08018354
 801147c:	0801836c 	.word	0x0801836c
 8011480:	08018398 	.word	0x08018398

08011484 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011484:	b5b0      	push	{r4, r5, r7, lr}
 8011486:	b08a      	sub	sp, #40	; 0x28
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d106      	bne.n	80114a0 <tcp_output+0x1c>
 8011492:	4ba0      	ldr	r3, [pc, #640]	; (8011714 <tcp_output+0x290>)
 8011494:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011498:	499f      	ldr	r1, [pc, #636]	; (8011718 <tcp_output+0x294>)
 801149a:	48a0      	ldr	r0, [pc, #640]	; (801171c <tcp_output+0x298>)
 801149c:	f003 fedc 	bl	8015258 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	7d1b      	ldrb	r3, [r3, #20]
 80114a4:	2b01      	cmp	r3, #1
 80114a6:	d106      	bne.n	80114b6 <tcp_output+0x32>
 80114a8:	4b9a      	ldr	r3, [pc, #616]	; (8011714 <tcp_output+0x290>)
 80114aa:	f240 42e4 	movw	r2, #1252	; 0x4e4
 80114ae:	499c      	ldr	r1, [pc, #624]	; (8011720 <tcp_output+0x29c>)
 80114b0:	489a      	ldr	r0, [pc, #616]	; (801171c <tcp_output+0x298>)
 80114b2:	f003 fed1 	bl	8015258 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80114b6:	4b9b      	ldr	r3, [pc, #620]	; (8011724 <tcp_output+0x2a0>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	687a      	ldr	r2, [r7, #4]
 80114bc:	429a      	cmp	r2, r3
 80114be:	d101      	bne.n	80114c4 <tcp_output+0x40>
    return ERR_OK;
 80114c0:	2300      	movs	r3, #0
 80114c2:	e1d2      	b.n	801186a <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d203      	bcs.n	80114dc <tcp_output+0x58>
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80114da:	e002      	b.n	80114e2 <tcp_output+0x5e>
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80114e2:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114e8:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80114ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d10b      	bne.n	8011508 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	8b5b      	ldrh	r3, [r3, #26]
 80114f4:	f003 0302 	and.w	r3, r3, #2
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	f000 81a9 	beq.w	8011850 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 80114fe:	6878      	ldr	r0, [r7, #4]
 8011500:	f000 fdd8 	bl	80120b4 <tcp_send_empty_ack>
 8011504:	4603      	mov	r3, r0
 8011506:	e1b0      	b.n	801186a <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011508:	6879      	ldr	r1, [r7, #4]
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	3304      	adds	r3, #4
 801150e:	461a      	mov	r2, r3
 8011510:	6878      	ldr	r0, [r7, #4]
 8011512:	f7ff f81d 	bl	8010550 <tcp_route>
 8011516:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d102      	bne.n	8011524 <tcp_output+0xa0>
    return ERR_RTE;
 801151e:	f06f 0303 	mvn.w	r3, #3
 8011522:	e1a2      	b.n	801186a <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d003      	beq.n	8011532 <tcp_output+0xae>
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d111      	bne.n	8011556 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d002      	beq.n	801153e <tcp_output+0xba>
 8011538:	697b      	ldr	r3, [r7, #20]
 801153a:	3304      	adds	r3, #4
 801153c:	e000      	b.n	8011540 <tcp_output+0xbc>
 801153e:	2300      	movs	r3, #0
 8011540:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011542:	693b      	ldr	r3, [r7, #16]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d102      	bne.n	801154e <tcp_output+0xca>
      return ERR_RTE;
 8011548:	f06f 0303 	mvn.w	r3, #3
 801154c:	e18d      	b.n	801186a <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	681a      	ldr	r2, [r3, #0]
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011558:	68db      	ldr	r3, [r3, #12]
 801155a:	685b      	ldr	r3, [r3, #4]
 801155c:	4618      	mov	r0, r3
 801155e:	f7f9 f852 	bl	800a606 <lwip_htonl>
 8011562:	4602      	mov	r2, r0
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011568:	1ad3      	subs	r3, r2, r3
 801156a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801156c:	8912      	ldrh	r2, [r2, #8]
 801156e:	4413      	add	r3, r2
 8011570:	69ba      	ldr	r2, [r7, #24]
 8011572:	429a      	cmp	r2, r3
 8011574:	d227      	bcs.n	80115c6 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801157c:	461a      	mov	r2, r3
 801157e:	69bb      	ldr	r3, [r7, #24]
 8011580:	4293      	cmp	r3, r2
 8011582:	d114      	bne.n	80115ae <tcp_output+0x12a>
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011588:	2b00      	cmp	r3, #0
 801158a:	d110      	bne.n	80115ae <tcp_output+0x12a>
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011592:	2b00      	cmp	r3, #0
 8011594:	d10b      	bne.n	80115ae <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	2200      	movs	r2, #0
 801159a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2201      	movs	r2, #1
 80115a2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	2200      	movs	r2, #0
 80115aa:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	8b5b      	ldrh	r3, [r3, #26]
 80115b2:	f003 0302 	and.w	r3, r3, #2
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	f000 814c 	beq.w	8011854 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f000 fd79 	bl	80120b4 <tcp_send_empty_ack>
 80115c2:	4603      	mov	r3, r0
 80115c4:	e151      	b.n	801186a <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	2200      	movs	r2, #0
 80115ca:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115d2:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80115d4:	6a3b      	ldr	r3, [r7, #32]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	f000 811b 	beq.w	8011812 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 80115dc:	e002      	b.n	80115e4 <tcp_output+0x160>
 80115de:	6a3b      	ldr	r3, [r7, #32]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	623b      	str	r3, [r7, #32]
 80115e4:	6a3b      	ldr	r3, [r7, #32]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d1f8      	bne.n	80115de <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80115ec:	e111      	b.n	8011812 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80115ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f0:	68db      	ldr	r3, [r3, #12]
 80115f2:	899b      	ldrh	r3, [r3, #12]
 80115f4:	b29b      	uxth	r3, r3
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7f8 fff0 	bl	800a5dc <lwip_htons>
 80115fc:	4603      	mov	r3, r0
 80115fe:	b2db      	uxtb	r3, r3
 8011600:	f003 0304 	and.w	r3, r3, #4
 8011604:	2b00      	cmp	r3, #0
 8011606:	d006      	beq.n	8011616 <tcp_output+0x192>
 8011608:	4b42      	ldr	r3, [pc, #264]	; (8011714 <tcp_output+0x290>)
 801160a:	f240 5237 	movw	r2, #1335	; 0x537
 801160e:	4946      	ldr	r1, [pc, #280]	; (8011728 <tcp_output+0x2a4>)
 8011610:	4842      	ldr	r0, [pc, #264]	; (801171c <tcp_output+0x298>)
 8011612:	f003 fe21 	bl	8015258 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801161a:	2b00      	cmp	r3, #0
 801161c:	d01f      	beq.n	801165e <tcp_output+0x1da>
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	8b5b      	ldrh	r3, [r3, #26]
 8011622:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011626:	2b00      	cmp	r3, #0
 8011628:	d119      	bne.n	801165e <tcp_output+0x1da>
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801162e:	2b00      	cmp	r3, #0
 8011630:	d00b      	beq.n	801164a <tcp_output+0x1c6>
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d110      	bne.n	801165e <tcp_output+0x1da>
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011640:	891a      	ldrh	r2, [r3, #8]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011646:	429a      	cmp	r2, r3
 8011648:	d209      	bcs.n	801165e <tcp_output+0x1da>
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011650:	2b00      	cmp	r3, #0
 8011652:	d004      	beq.n	801165e <tcp_output+0x1da>
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801165a:	2b08      	cmp	r3, #8
 801165c:	d901      	bls.n	8011662 <tcp_output+0x1de>
 801165e:	2301      	movs	r3, #1
 8011660:	e000      	b.n	8011664 <tcp_output+0x1e0>
 8011662:	2300      	movs	r3, #0
 8011664:	2b00      	cmp	r3, #0
 8011666:	d106      	bne.n	8011676 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	8b5b      	ldrh	r3, [r3, #26]
 801166c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011670:	2b00      	cmp	r3, #0
 8011672:	f000 80e3 	beq.w	801183c <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	7d1b      	ldrb	r3, [r3, #20]
 801167a:	2b02      	cmp	r3, #2
 801167c:	d00d      	beq.n	801169a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011680:	68db      	ldr	r3, [r3, #12]
 8011682:	899b      	ldrh	r3, [r3, #12]
 8011684:	b29c      	uxth	r4, r3
 8011686:	2010      	movs	r0, #16
 8011688:	f7f8 ffa8 	bl	800a5dc <lwip_htons>
 801168c:	4603      	mov	r3, r0
 801168e:	461a      	mov	r2, r3
 8011690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011692:	68db      	ldr	r3, [r3, #12]
 8011694:	4322      	orrs	r2, r4
 8011696:	b292      	uxth	r2, r2
 8011698:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801169a:	697a      	ldr	r2, [r7, #20]
 801169c:	6879      	ldr	r1, [r7, #4]
 801169e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80116a0:	f000 f908 	bl	80118b4 <tcp_output_segment>
 80116a4:	4603      	mov	r3, r0
 80116a6:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80116a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d009      	beq.n	80116c4 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	8b5b      	ldrh	r3, [r3, #26]
 80116b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116b8:	b29a      	uxth	r2, r3
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	835a      	strh	r2, [r3, #26]
      return err;
 80116be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80116c2:	e0d2      	b.n	801186a <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80116c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c6:	681a      	ldr	r2, [r3, #0]
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	7d1b      	ldrb	r3, [r3, #20]
 80116d0:	2b02      	cmp	r3, #2
 80116d2:	d006      	beq.n	80116e2 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	8b5b      	ldrh	r3, [r3, #26]
 80116d8:	f023 0303 	bic.w	r3, r3, #3
 80116dc:	b29a      	uxth	r2, r3
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80116e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e4:	68db      	ldr	r3, [r3, #12]
 80116e6:	685b      	ldr	r3, [r3, #4]
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7f8 ff8c 	bl	800a606 <lwip_htonl>
 80116ee:	4604      	mov	r4, r0
 80116f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f2:	891b      	ldrh	r3, [r3, #8]
 80116f4:	461d      	mov	r5, r3
 80116f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f8:	68db      	ldr	r3, [r3, #12]
 80116fa:	899b      	ldrh	r3, [r3, #12]
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	4618      	mov	r0, r3
 8011700:	f7f8 ff6c 	bl	800a5dc <lwip_htons>
 8011704:	4603      	mov	r3, r0
 8011706:	b2db      	uxtb	r3, r3
 8011708:	f003 0303 	and.w	r3, r3, #3
 801170c:	2b00      	cmp	r3, #0
 801170e:	d00d      	beq.n	801172c <tcp_output+0x2a8>
 8011710:	2301      	movs	r3, #1
 8011712:	e00c      	b.n	801172e <tcp_output+0x2aa>
 8011714:	08017e7c 	.word	0x08017e7c
 8011718:	080183c0 	.word	0x080183c0
 801171c:	08017ed0 	.word	0x08017ed0
 8011720:	080183d8 	.word	0x080183d8
 8011724:	2000b3f4 	.word	0x2000b3f4
 8011728:	08018400 	.word	0x08018400
 801172c:	2300      	movs	r3, #0
 801172e:	442b      	add	r3, r5
 8011730:	4423      	add	r3, r4
 8011732:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011738:	68bb      	ldr	r3, [r7, #8]
 801173a:	1ad3      	subs	r3, r2, r3
 801173c:	2b00      	cmp	r3, #0
 801173e:	da02      	bge.n	8011746 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	68ba      	ldr	r2, [r7, #8]
 8011744:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011748:	891b      	ldrh	r3, [r3, #8]
 801174a:	461c      	mov	r4, r3
 801174c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801174e:	68db      	ldr	r3, [r3, #12]
 8011750:	899b      	ldrh	r3, [r3, #12]
 8011752:	b29b      	uxth	r3, r3
 8011754:	4618      	mov	r0, r3
 8011756:	f7f8 ff41 	bl	800a5dc <lwip_htons>
 801175a:	4603      	mov	r3, r0
 801175c:	b2db      	uxtb	r3, r3
 801175e:	f003 0303 	and.w	r3, r3, #3
 8011762:	2b00      	cmp	r3, #0
 8011764:	d001      	beq.n	801176a <tcp_output+0x2e6>
 8011766:	2301      	movs	r3, #1
 8011768:	e000      	b.n	801176c <tcp_output+0x2e8>
 801176a:	2300      	movs	r3, #0
 801176c:	4423      	add	r3, r4
 801176e:	2b00      	cmp	r3, #0
 8011770:	d049      	beq.n	8011806 <tcp_output+0x382>
      seg->next = NULL;
 8011772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011774:	2200      	movs	r2, #0
 8011776:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801177c:	2b00      	cmp	r3, #0
 801177e:	d105      	bne.n	801178c <tcp_output+0x308>
        pcb->unacked = seg;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011784:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011788:	623b      	str	r3, [r7, #32]
 801178a:	e03f      	b.n	801180c <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801178e:	68db      	ldr	r3, [r3, #12]
 8011790:	685b      	ldr	r3, [r3, #4]
 8011792:	4618      	mov	r0, r3
 8011794:	f7f8 ff37 	bl	800a606 <lwip_htonl>
 8011798:	4604      	mov	r4, r0
 801179a:	6a3b      	ldr	r3, [r7, #32]
 801179c:	68db      	ldr	r3, [r3, #12]
 801179e:	685b      	ldr	r3, [r3, #4]
 80117a0:	4618      	mov	r0, r3
 80117a2:	f7f8 ff30 	bl	800a606 <lwip_htonl>
 80117a6:	4603      	mov	r3, r0
 80117a8:	1ae3      	subs	r3, r4, r3
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	da24      	bge.n	80117f8 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	3370      	adds	r3, #112	; 0x70
 80117b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80117b4:	e002      	b.n	80117bc <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80117b6:	69fb      	ldr	r3, [r7, #28]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80117bc:	69fb      	ldr	r3, [r7, #28]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d011      	beq.n	80117e8 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80117c4:	69fb      	ldr	r3, [r7, #28]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	68db      	ldr	r3, [r3, #12]
 80117ca:	685b      	ldr	r3, [r3, #4]
 80117cc:	4618      	mov	r0, r3
 80117ce:	f7f8 ff1a 	bl	800a606 <lwip_htonl>
 80117d2:	4604      	mov	r4, r0
 80117d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d6:	68db      	ldr	r3, [r3, #12]
 80117d8:	685b      	ldr	r3, [r3, #4]
 80117da:	4618      	mov	r0, r3
 80117dc:	f7f8 ff13 	bl	800a606 <lwip_htonl>
 80117e0:	4603      	mov	r3, r0
 80117e2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	dbe6      	blt.n	80117b6 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 80117e8:	69fb      	ldr	r3, [r7, #28]
 80117ea:	681a      	ldr	r2, [r3, #0]
 80117ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ee:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80117f0:	69fb      	ldr	r3, [r7, #28]
 80117f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117f4:	601a      	str	r2, [r3, #0]
 80117f6:	e009      	b.n	801180c <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80117f8:	6a3b      	ldr	r3, [r7, #32]
 80117fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117fc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80117fe:	6a3b      	ldr	r3, [r7, #32]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	623b      	str	r3, [r7, #32]
 8011804:	e002      	b.n	801180c <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011808:	f7fb fef4 	bl	800d5f4 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011810:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011814:	2b00      	cmp	r3, #0
 8011816:	d012      	beq.n	801183e <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801181a:	68db      	ldr	r3, [r3, #12]
 801181c:	685b      	ldr	r3, [r3, #4]
 801181e:	4618      	mov	r0, r3
 8011820:	f7f8 fef1 	bl	800a606 <lwip_htonl>
 8011824:	4602      	mov	r2, r0
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801182a:	1ad3      	subs	r3, r2, r3
 801182c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801182e:	8912      	ldrh	r2, [r2, #8]
 8011830:	4413      	add	r3, r2
  while (seg != NULL &&
 8011832:	69ba      	ldr	r2, [r7, #24]
 8011834:	429a      	cmp	r2, r3
 8011836:	f4bf aeda 	bcs.w	80115ee <tcp_output+0x16a>
 801183a:	e000      	b.n	801183e <tcp_output+0x3ba>
      break;
 801183c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011842:	2b00      	cmp	r3, #0
 8011844:	d108      	bne.n	8011858 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2200      	movs	r2, #0
 801184a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801184e:	e004      	b.n	801185a <tcp_output+0x3d6>
    goto output_done;
 8011850:	bf00      	nop
 8011852:	e002      	b.n	801185a <tcp_output+0x3d6>
    goto output_done;
 8011854:	bf00      	nop
 8011856:	e000      	b.n	801185a <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011858:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	8b5b      	ldrh	r3, [r3, #26]
 801185e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011862:	b29a      	uxth	r2, r3
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011868:	2300      	movs	r3, #0
}
 801186a:	4618      	mov	r0, r3
 801186c:	3728      	adds	r7, #40	; 0x28
 801186e:	46bd      	mov	sp, r7
 8011870:	bdb0      	pop	{r4, r5, r7, pc}
 8011872:	bf00      	nop

08011874 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d106      	bne.n	8011890 <tcp_output_segment_busy+0x1c>
 8011882:	4b09      	ldr	r3, [pc, #36]	; (80118a8 <tcp_output_segment_busy+0x34>)
 8011884:	f240 529a 	movw	r2, #1434	; 0x59a
 8011888:	4908      	ldr	r1, [pc, #32]	; (80118ac <tcp_output_segment_busy+0x38>)
 801188a:	4809      	ldr	r0, [pc, #36]	; (80118b0 <tcp_output_segment_busy+0x3c>)
 801188c:	f003 fce4 	bl	8015258 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	685b      	ldr	r3, [r3, #4]
 8011894:	7b9b      	ldrb	r3, [r3, #14]
 8011896:	2b01      	cmp	r3, #1
 8011898:	d001      	beq.n	801189e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801189a:	2301      	movs	r3, #1
 801189c:	e000      	b.n	80118a0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801189e:	2300      	movs	r3, #0
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	3708      	adds	r7, #8
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}
 80118a8:	08017e7c 	.word	0x08017e7c
 80118ac:	08018418 	.word	0x08018418
 80118b0:	08017ed0 	.word	0x08017ed0

080118b4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80118b4:	b5b0      	push	{r4, r5, r7, lr}
 80118b6:	b08c      	sub	sp, #48	; 0x30
 80118b8:	af04      	add	r7, sp, #16
 80118ba:	60f8      	str	r0, [r7, #12]
 80118bc:	60b9      	str	r1, [r7, #8]
 80118be:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d106      	bne.n	80118d4 <tcp_output_segment+0x20>
 80118c6:	4b64      	ldr	r3, [pc, #400]	; (8011a58 <tcp_output_segment+0x1a4>)
 80118c8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80118cc:	4963      	ldr	r1, [pc, #396]	; (8011a5c <tcp_output_segment+0x1a8>)
 80118ce:	4864      	ldr	r0, [pc, #400]	; (8011a60 <tcp_output_segment+0x1ac>)
 80118d0:	f003 fcc2 	bl	8015258 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d106      	bne.n	80118e8 <tcp_output_segment+0x34>
 80118da:	4b5f      	ldr	r3, [pc, #380]	; (8011a58 <tcp_output_segment+0x1a4>)
 80118dc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80118e0:	4960      	ldr	r1, [pc, #384]	; (8011a64 <tcp_output_segment+0x1b0>)
 80118e2:	485f      	ldr	r0, [pc, #380]	; (8011a60 <tcp_output_segment+0x1ac>)
 80118e4:	f003 fcb8 	bl	8015258 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d106      	bne.n	80118fc <tcp_output_segment+0x48>
 80118ee:	4b5a      	ldr	r3, [pc, #360]	; (8011a58 <tcp_output_segment+0x1a4>)
 80118f0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80118f4:	495c      	ldr	r1, [pc, #368]	; (8011a68 <tcp_output_segment+0x1b4>)
 80118f6:	485a      	ldr	r0, [pc, #360]	; (8011a60 <tcp_output_segment+0x1ac>)
 80118f8:	f003 fcae 	bl	8015258 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80118fc:	68f8      	ldr	r0, [r7, #12]
 80118fe:	f7ff ffb9 	bl	8011874 <tcp_output_segment_busy>
 8011902:	4603      	mov	r3, r0
 8011904:	2b00      	cmp	r3, #0
 8011906:	d001      	beq.n	801190c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011908:	2300      	movs	r3, #0
 801190a:	e0a0      	b.n	8011a4e <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801190c:	68bb      	ldr	r3, [r7, #8]
 801190e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	68dc      	ldr	r4, [r3, #12]
 8011914:	4610      	mov	r0, r2
 8011916:	f7f8 fe76 	bl	800a606 <lwip_htonl>
 801191a:	4603      	mov	r3, r0
 801191c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801191e:	68bb      	ldr	r3, [r7, #8]
 8011920:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	68dc      	ldr	r4, [r3, #12]
 8011926:	4610      	mov	r0, r2
 8011928:	f7f8 fe58 	bl	800a5dc <lwip_htons>
 801192c:	4603      	mov	r3, r0
 801192e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011930:	68bb      	ldr	r3, [r7, #8]
 8011932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011934:	68ba      	ldr	r2, [r7, #8]
 8011936:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011938:	441a      	add	r2, r3
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	68db      	ldr	r3, [r3, #12]
 8011942:	3314      	adds	r3, #20
 8011944:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	7a9b      	ldrb	r3, [r3, #10]
 801194a:	f003 0301 	and.w	r3, r3, #1
 801194e:	2b00      	cmp	r3, #0
 8011950:	d015      	beq.n	801197e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011952:	68bb      	ldr	r3, [r7, #8]
 8011954:	3304      	adds	r3, #4
 8011956:	461a      	mov	r2, r3
 8011958:	6879      	ldr	r1, [r7, #4]
 801195a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801195e:	f7fc fa33 	bl	800ddc8 <tcp_eff_send_mss_netif>
 8011962:	4603      	mov	r3, r0
 8011964:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011966:	8b7b      	ldrh	r3, [r7, #26]
 8011968:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801196c:	4618      	mov	r0, r3
 801196e:	f7f8 fe4a 	bl	800a606 <lwip_htonl>
 8011972:	4602      	mov	r2, r0
 8011974:	69fb      	ldr	r3, [r7, #28]
 8011976:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011978:	69fb      	ldr	r3, [r7, #28]
 801197a:	3304      	adds	r3, #4
 801197c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011984:	2b00      	cmp	r3, #0
 8011986:	da02      	bge.n	801198e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011988:	68bb      	ldr	r3, [r7, #8]
 801198a:	2200      	movs	r2, #0
 801198c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011992:	2b00      	cmp	r3, #0
 8011994:	d10c      	bne.n	80119b0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011996:	4b35      	ldr	r3, [pc, #212]	; (8011a6c <tcp_output_segment+0x1b8>)
 8011998:	681a      	ldr	r2, [r3, #0]
 801199a:	68bb      	ldr	r3, [r7, #8]
 801199c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	68db      	ldr	r3, [r3, #12]
 80119a2:	685b      	ldr	r3, [r3, #4]
 80119a4:	4618      	mov	r0, r3
 80119a6:	f7f8 fe2e 	bl	800a606 <lwip_htonl>
 80119aa:	4602      	mov	r2, r0
 80119ac:	68bb      	ldr	r3, [r7, #8]
 80119ae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	68db      	ldr	r3, [r3, #12]
 80119b4:	461a      	mov	r2, r3
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	685b      	ldr	r3, [r3, #4]
 80119ba:	685b      	ldr	r3, [r3, #4]
 80119bc:	1ad3      	subs	r3, r2, r3
 80119be:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	685b      	ldr	r3, [r3, #4]
 80119c4:	8959      	ldrh	r1, [r3, #10]
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	8b3a      	ldrh	r2, [r7, #24]
 80119cc:	1a8a      	subs	r2, r1, r2
 80119ce:	b292      	uxth	r2, r2
 80119d0:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	685b      	ldr	r3, [r3, #4]
 80119d6:	8919      	ldrh	r1, [r3, #8]
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	685b      	ldr	r3, [r3, #4]
 80119dc:	8b3a      	ldrh	r2, [r7, #24]
 80119de:	1a8a      	subs	r2, r1, r2
 80119e0:	b292      	uxth	r2, r2
 80119e2:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	685b      	ldr	r3, [r3, #4]
 80119e8:	68fa      	ldr	r2, [r7, #12]
 80119ea:	68d2      	ldr	r2, [r2, #12]
 80119ec:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	68db      	ldr	r3, [r3, #12]
 80119f2:	2200      	movs	r2, #0
 80119f4:	741a      	strb	r2, [r3, #16]
 80119f6:	2200      	movs	r2, #0
 80119f8:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	68db      	ldr	r3, [r3, #12]
 80119fe:	f103 0214 	add.w	r2, r3, #20
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	7a9b      	ldrb	r3, [r3, #10]
 8011a06:	009b      	lsls	r3, r3, #2
 8011a08:	f003 0304 	and.w	r3, r3, #4
 8011a0c:	4413      	add	r3, r2
 8011a0e:	69fa      	ldr	r2, [r7, #28]
 8011a10:	429a      	cmp	r2, r3
 8011a12:	d006      	beq.n	8011a22 <tcp_output_segment+0x16e>
 8011a14:	4b10      	ldr	r3, [pc, #64]	; (8011a58 <tcp_output_segment+0x1a4>)
 8011a16:	f240 621c 	movw	r2, #1564	; 0x61c
 8011a1a:	4915      	ldr	r1, [pc, #84]	; (8011a70 <tcp_output_segment+0x1bc>)
 8011a1c:	4810      	ldr	r0, [pc, #64]	; (8011a60 <tcp_output_segment+0x1ac>)
 8011a1e:	f003 fc1b 	bl	8015258 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	6858      	ldr	r0, [r3, #4]
 8011a26:	68b9      	ldr	r1, [r7, #8]
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	1d1c      	adds	r4, r3, #4
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	7add      	ldrb	r5, [r3, #11]
 8011a30:	68bb      	ldr	r3, [r7, #8]
 8011a32:	7a9b      	ldrb	r3, [r3, #10]
 8011a34:	687a      	ldr	r2, [r7, #4]
 8011a36:	9202      	str	r2, [sp, #8]
 8011a38:	2206      	movs	r2, #6
 8011a3a:	9201      	str	r2, [sp, #4]
 8011a3c:	9300      	str	r3, [sp, #0]
 8011a3e:	462b      	mov	r3, r5
 8011a40:	4622      	mov	r2, r4
 8011a42:	f002 fa6f 	bl	8013f24 <ip4_output_if>
 8011a46:	4603      	mov	r3, r0
 8011a48:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011a4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3720      	adds	r7, #32
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bdb0      	pop	{r4, r5, r7, pc}
 8011a56:	bf00      	nop
 8011a58:	08017e7c 	.word	0x08017e7c
 8011a5c:	08018440 	.word	0x08018440
 8011a60:	08017ed0 	.word	0x08017ed0
 8011a64:	08018460 	.word	0x08018460
 8011a68:	08018480 	.word	0x08018480
 8011a6c:	2000b3e4 	.word	0x2000b3e4
 8011a70:	080184a4 	.word	0x080184a4

08011a74 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011a74:	b5b0      	push	{r4, r5, r7, lr}
 8011a76:	b084      	sub	sp, #16
 8011a78:	af00      	add	r7, sp, #0
 8011a7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d106      	bne.n	8011a90 <tcp_rexmit_rto_prepare+0x1c>
 8011a82:	4b31      	ldr	r3, [pc, #196]	; (8011b48 <tcp_rexmit_rto_prepare+0xd4>)
 8011a84:	f240 6263 	movw	r2, #1635	; 0x663
 8011a88:	4930      	ldr	r1, [pc, #192]	; (8011b4c <tcp_rexmit_rto_prepare+0xd8>)
 8011a8a:	4831      	ldr	r0, [pc, #196]	; (8011b50 <tcp_rexmit_rto_prepare+0xdc>)
 8011a8c:	f003 fbe4 	bl	8015258 <iprintf>

  if (pcb->unacked == NULL) {
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d102      	bne.n	8011a9e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011a98:	f06f 0305 	mvn.w	r3, #5
 8011a9c:	e050      	b.n	8011b40 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011aa2:	60fb      	str	r3, [r7, #12]
 8011aa4:	e00b      	b.n	8011abe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8011aa6:	68f8      	ldr	r0, [r7, #12]
 8011aa8:	f7ff fee4 	bl	8011874 <tcp_output_segment_busy>
 8011aac:	4603      	mov	r3, r0
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d002      	beq.n	8011ab8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011ab2:	f06f 0305 	mvn.w	r3, #5
 8011ab6:	e043      	b.n	8011b40 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	60fb      	str	r3, [r7, #12]
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d1ef      	bne.n	8011aa6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011ac6:	68f8      	ldr	r0, [r7, #12]
 8011ac8:	f7ff fed4 	bl	8011874 <tcp_output_segment_busy>
 8011acc:	4603      	mov	r3, r0
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d002      	beq.n	8011ad8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011ad2:	f06f 0305 	mvn.w	r3, #5
 8011ad6:	e033      	b.n	8011b40 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2200      	movs	r2, #0
 8011aec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	8b5b      	ldrh	r3, [r3, #26]
 8011af2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011af6:	b29a      	uxth	r2, r3
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	68db      	ldr	r3, [r3, #12]
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	4618      	mov	r0, r3
 8011b04:	f7f8 fd7f 	bl	800a606 <lwip_htonl>
 8011b08:	4604      	mov	r4, r0
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	891b      	ldrh	r3, [r3, #8]
 8011b0e:	461d      	mov	r5, r3
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	68db      	ldr	r3, [r3, #12]
 8011b14:	899b      	ldrh	r3, [r3, #12]
 8011b16:	b29b      	uxth	r3, r3
 8011b18:	4618      	mov	r0, r3
 8011b1a:	f7f8 fd5f 	bl	800a5dc <lwip_htons>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	b2db      	uxtb	r3, r3
 8011b22:	f003 0303 	and.w	r3, r3, #3
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d001      	beq.n	8011b2e <tcp_rexmit_rto_prepare+0xba>
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	e000      	b.n	8011b30 <tcp_rexmit_rto_prepare+0xbc>
 8011b2e:	2300      	movs	r3, #0
 8011b30:	442b      	add	r3, r5
 8011b32:	18e2      	adds	r2, r4, r3
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8011b3e:	2300      	movs	r3, #0
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3710      	adds	r7, #16
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bdb0      	pop	{r4, r5, r7, pc}
 8011b48:	08017e7c 	.word	0x08017e7c
 8011b4c:	080184b8 	.word	0x080184b8
 8011b50:	08017ed0 	.word	0x08017ed0

08011b54 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b082      	sub	sp, #8
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d106      	bne.n	8011b70 <tcp_rexmit_rto_commit+0x1c>
 8011b62:	4b0d      	ldr	r3, [pc, #52]	; (8011b98 <tcp_rexmit_rto_commit+0x44>)
 8011b64:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011b68:	490c      	ldr	r1, [pc, #48]	; (8011b9c <tcp_rexmit_rto_commit+0x48>)
 8011b6a:	480d      	ldr	r0, [pc, #52]	; (8011ba0 <tcp_rexmit_rto_commit+0x4c>)
 8011b6c:	f003 fb74 	bl	8015258 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011b76:	2bff      	cmp	r3, #255	; 0xff
 8011b78:	d007      	beq.n	8011b8a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011b80:	3301      	adds	r3, #1
 8011b82:	b2da      	uxtb	r2, r3
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f7ff fc7a 	bl	8011484 <tcp_output>
}
 8011b90:	bf00      	nop
 8011b92:	3708      	adds	r7, #8
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}
 8011b98:	08017e7c 	.word	0x08017e7c
 8011b9c:	080184dc 	.word	0x080184dc
 8011ba0:	08017ed0 	.word	0x08017ed0

08011ba4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d106      	bne.n	8011bc0 <tcp_rexmit_rto+0x1c>
 8011bb2:	4b0a      	ldr	r3, [pc, #40]	; (8011bdc <tcp_rexmit_rto+0x38>)
 8011bb4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011bb8:	4909      	ldr	r1, [pc, #36]	; (8011be0 <tcp_rexmit_rto+0x3c>)
 8011bba:	480a      	ldr	r0, [pc, #40]	; (8011be4 <tcp_rexmit_rto+0x40>)
 8011bbc:	f003 fb4c 	bl	8015258 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011bc0:	6878      	ldr	r0, [r7, #4]
 8011bc2:	f7ff ff57 	bl	8011a74 <tcp_rexmit_rto_prepare>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d102      	bne.n	8011bd2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8011bcc:	6878      	ldr	r0, [r7, #4]
 8011bce:	f7ff ffc1 	bl	8011b54 <tcp_rexmit_rto_commit>
  }
}
 8011bd2:	bf00      	nop
 8011bd4:	3708      	adds	r7, #8
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
 8011bda:	bf00      	nop
 8011bdc:	08017e7c 	.word	0x08017e7c
 8011be0:	08018500 	.word	0x08018500
 8011be4:	08017ed0 	.word	0x08017ed0

08011be8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011be8:	b590      	push	{r4, r7, lr}
 8011bea:	b085      	sub	sp, #20
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d106      	bne.n	8011c04 <tcp_rexmit+0x1c>
 8011bf6:	4b2f      	ldr	r3, [pc, #188]	; (8011cb4 <tcp_rexmit+0xcc>)
 8011bf8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8011bfc:	492e      	ldr	r1, [pc, #184]	; (8011cb8 <tcp_rexmit+0xd0>)
 8011bfe:	482f      	ldr	r0, [pc, #188]	; (8011cbc <tcp_rexmit+0xd4>)
 8011c00:	f003 fb2a 	bl	8015258 <iprintf>

  if (pcb->unacked == NULL) {
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d102      	bne.n	8011c12 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8011c0c:	f06f 0305 	mvn.w	r3, #5
 8011c10:	e04c      	b.n	8011cac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c16:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011c18:	68b8      	ldr	r0, [r7, #8]
 8011c1a:	f7ff fe2b 	bl	8011874 <tcp_output_segment_busy>
 8011c1e:	4603      	mov	r3, r0
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d002      	beq.n	8011c2a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011c24:	f06f 0305 	mvn.w	r3, #5
 8011c28:	e040      	b.n	8011cac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8011c2a:	68bb      	ldr	r3, [r7, #8]
 8011c2c:	681a      	ldr	r2, [r3, #0]
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	336c      	adds	r3, #108	; 0x6c
 8011c36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011c38:	e002      	b.n	8011c40 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d011      	beq.n	8011c6c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	68db      	ldr	r3, [r3, #12]
 8011c4e:	685b      	ldr	r3, [r3, #4]
 8011c50:	4618      	mov	r0, r3
 8011c52:	f7f8 fcd8 	bl	800a606 <lwip_htonl>
 8011c56:	4604      	mov	r4, r0
 8011c58:	68bb      	ldr	r3, [r7, #8]
 8011c5a:	68db      	ldr	r3, [r3, #12]
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f7f8 fcd1 	bl	800a606 <lwip_htonl>
 8011c64:	4603      	mov	r3, r0
 8011c66:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	dbe6      	blt.n	8011c3a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	681a      	ldr	r2, [r3, #0]
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	68ba      	ldr	r2, [r7, #8]
 8011c78:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d103      	bne.n	8011c8a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	2200      	movs	r2, #0
 8011c86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011c90:	2bff      	cmp	r3, #255	; 0xff
 8011c92:	d007      	beq.n	8011ca4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011c9a:	3301      	adds	r3, #1
 8011c9c:	b2da      	uxtb	r2, r3
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	2200      	movs	r2, #0
 8011ca8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8011caa:	2300      	movs	r3, #0
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	3714      	adds	r7, #20
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd90      	pop	{r4, r7, pc}
 8011cb4:	08017e7c 	.word	0x08017e7c
 8011cb8:	0801851c 	.word	0x0801851c
 8011cbc:	08017ed0 	.word	0x08017ed0

08011cc0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b082      	sub	sp, #8
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d106      	bne.n	8011cdc <tcp_rexmit_fast+0x1c>
 8011cce:	4b2f      	ldr	r3, [pc, #188]	; (8011d8c <tcp_rexmit_fast+0xcc>)
 8011cd0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011cd4:	492e      	ldr	r1, [pc, #184]	; (8011d90 <tcp_rexmit_fast+0xd0>)
 8011cd6:	482f      	ldr	r0, [pc, #188]	; (8011d94 <tcp_rexmit_fast+0xd4>)
 8011cd8:	f003 fabe 	bl	8015258 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d04f      	beq.n	8011d84 <tcp_rexmit_fast+0xc4>
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	8b5b      	ldrh	r3, [r3, #26]
 8011ce8:	f003 0304 	and.w	r3, r3, #4
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d149      	bne.n	8011d84 <tcp_rexmit_fast+0xc4>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011cf0:	6878      	ldr	r0, [r7, #4]
 8011cf2:	f7ff ff79 	bl	8011be8 <tcp_rexmit>
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d143      	bne.n	8011d84 <tcp_rexmit_fast+0xc4>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d208      	bcs.n	8011d1e <tcp_rexmit_fast+0x5e>
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	da00      	bge.n	8011d18 <tcp_rexmit_fast+0x58>
 8011d16:	3301      	adds	r3, #1
 8011d18:	105b      	asrs	r3, r3, #1
 8011d1a:	b29b      	uxth	r3, r3
 8011d1c:	e007      	b.n	8011d2e <tcp_rexmit_fast+0x6e>
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	da00      	bge.n	8011d2a <tcp_rexmit_fast+0x6a>
 8011d28:	3301      	adds	r3, #1
 8011d2a:	105b      	asrs	r3, r3, #1
 8011d2c:	b29b      	uxth	r3, r3
 8011d2e:	687a      	ldr	r2, [r7, #4]
 8011d30:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011d3a:	461a      	mov	r2, r3
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011d40:	005b      	lsls	r3, r3, #1
 8011d42:	429a      	cmp	r2, r3
 8011d44:	d206      	bcs.n	8011d54 <tcp_rexmit_fast+0x94>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011d4a:	005b      	lsls	r3, r3, #1
 8011d4c:	b29a      	uxth	r2, r3
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011d5e:	4619      	mov	r1, r3
 8011d60:	0049      	lsls	r1, r1, #1
 8011d62:	440b      	add	r3, r1
 8011d64:	b29b      	uxth	r3, r3
 8011d66:	4413      	add	r3, r2
 8011d68:	b29a      	uxth	r2, r3
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	8b5b      	ldrh	r3, [r3, #26]
 8011d74:	f043 0304 	orr.w	r3, r3, #4
 8011d78:	b29a      	uxth	r2, r3
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2200      	movs	r2, #0
 8011d82:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8011d84:	bf00      	nop
 8011d86:	3708      	adds	r7, #8
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}
 8011d8c:	08017e7c 	.word	0x08017e7c
 8011d90:	08018534 	.word	0x08018534
 8011d94:	08017ed0 	.word	0x08017ed0

08011d98 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b086      	sub	sp, #24
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	60f8      	str	r0, [r7, #12]
 8011da0:	607b      	str	r3, [r7, #4]
 8011da2:	460b      	mov	r3, r1
 8011da4:	817b      	strh	r3, [r7, #10]
 8011da6:	4613      	mov	r3, r2
 8011da8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011daa:	897a      	ldrh	r2, [r7, #10]
 8011dac:	893b      	ldrh	r3, [r7, #8]
 8011dae:	4413      	add	r3, r2
 8011db0:	b29b      	uxth	r3, r3
 8011db2:	3314      	adds	r3, #20
 8011db4:	b29b      	uxth	r3, r3
 8011db6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011dba:	4619      	mov	r1, r3
 8011dbc:	2022      	movs	r0, #34	; 0x22
 8011dbe:	f7f9 fd0b 	bl	800b7d8 <pbuf_alloc>
 8011dc2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011dc4:	697b      	ldr	r3, [r7, #20]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d04e      	beq.n	8011e68 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	895b      	ldrh	r3, [r3, #10]
 8011dce:	461a      	mov	r2, r3
 8011dd0:	897b      	ldrh	r3, [r7, #10]
 8011dd2:	3314      	adds	r3, #20
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	da06      	bge.n	8011de6 <tcp_output_alloc_header_common+0x4e>
 8011dd8:	4b26      	ldr	r3, [pc, #152]	; (8011e74 <tcp_output_alloc_header_common+0xdc>)
 8011dda:	f240 7224 	movw	r2, #1828	; 0x724
 8011dde:	4926      	ldr	r1, [pc, #152]	; (8011e78 <tcp_output_alloc_header_common+0xe0>)
 8011de0:	4826      	ldr	r0, [pc, #152]	; (8011e7c <tcp_output_alloc_header_common+0xe4>)
 8011de2:	f003 fa39 	bl	8015258 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011de6:	697b      	ldr	r3, [r7, #20]
 8011de8:	685b      	ldr	r3, [r3, #4]
 8011dea:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011dec:	8c3b      	ldrh	r3, [r7, #32]
 8011dee:	4618      	mov	r0, r3
 8011df0:	f7f8 fbf4 	bl	800a5dc <lwip_htons>
 8011df4:	4603      	mov	r3, r0
 8011df6:	461a      	mov	r2, r3
 8011df8:	693b      	ldr	r3, [r7, #16]
 8011dfa:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011dfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011dfe:	4618      	mov	r0, r3
 8011e00:	f7f8 fbec 	bl	800a5dc <lwip_htons>
 8011e04:	4603      	mov	r3, r0
 8011e06:	461a      	mov	r2, r3
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011e0c:	693b      	ldr	r3, [r7, #16]
 8011e0e:	687a      	ldr	r2, [r7, #4]
 8011e10:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8011e12:	68f8      	ldr	r0, [r7, #12]
 8011e14:	f7f8 fbf7 	bl	800a606 <lwip_htonl>
 8011e18:	4602      	mov	r2, r0
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011e1e:	897b      	ldrh	r3, [r7, #10]
 8011e20:	089b      	lsrs	r3, r3, #2
 8011e22:	b29b      	uxth	r3, r3
 8011e24:	3305      	adds	r3, #5
 8011e26:	b29b      	uxth	r3, r3
 8011e28:	031b      	lsls	r3, r3, #12
 8011e2a:	b29a      	uxth	r2, r3
 8011e2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011e30:	b29b      	uxth	r3, r3
 8011e32:	4313      	orrs	r3, r2
 8011e34:	b29b      	uxth	r3, r3
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7f8 fbd0 	bl	800a5dc <lwip_htons>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	461a      	mov	r2, r3
 8011e40:	693b      	ldr	r3, [r7, #16]
 8011e42:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8011e44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7f8 fbc8 	bl	800a5dc <lwip_htons>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	461a      	mov	r2, r3
 8011e50:	693b      	ldr	r3, [r7, #16]
 8011e52:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	2200      	movs	r2, #0
 8011e58:	741a      	strb	r2, [r3, #16]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	2200      	movs	r2, #0
 8011e62:	749a      	strb	r2, [r3, #18]
 8011e64:	2200      	movs	r2, #0
 8011e66:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011e68:	697b      	ldr	r3, [r7, #20]
}
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	3718      	adds	r7, #24
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bd80      	pop	{r7, pc}
 8011e72:	bf00      	nop
 8011e74:	08017e7c 	.word	0x08017e7c
 8011e78:	08018554 	.word	0x08018554
 8011e7c:	08017ed0 	.word	0x08017ed0

08011e80 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011e80:	b5b0      	push	{r4, r5, r7, lr}
 8011e82:	b08a      	sub	sp, #40	; 0x28
 8011e84:	af04      	add	r7, sp, #16
 8011e86:	60f8      	str	r0, [r7, #12]
 8011e88:	607b      	str	r3, [r7, #4]
 8011e8a:	460b      	mov	r3, r1
 8011e8c:	817b      	strh	r3, [r7, #10]
 8011e8e:	4613      	mov	r3, r2
 8011e90:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d106      	bne.n	8011ea6 <tcp_output_alloc_header+0x26>
 8011e98:	4b15      	ldr	r3, [pc, #84]	; (8011ef0 <tcp_output_alloc_header+0x70>)
 8011e9a:	f240 7242 	movw	r2, #1858	; 0x742
 8011e9e:	4915      	ldr	r1, [pc, #84]	; (8011ef4 <tcp_output_alloc_header+0x74>)
 8011ea0:	4815      	ldr	r0, [pc, #84]	; (8011ef8 <tcp_output_alloc_header+0x78>)
 8011ea2:	f003 f9d9 	bl	8015258 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	8adb      	ldrh	r3, [r3, #22]
 8011eae:	68fa      	ldr	r2, [r7, #12]
 8011eb0:	8b12      	ldrh	r2, [r2, #24]
 8011eb2:	68f9      	ldr	r1, [r7, #12]
 8011eb4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011eb6:	893d      	ldrh	r5, [r7, #8]
 8011eb8:	897c      	ldrh	r4, [r7, #10]
 8011eba:	9103      	str	r1, [sp, #12]
 8011ebc:	2110      	movs	r1, #16
 8011ebe:	9102      	str	r1, [sp, #8]
 8011ec0:	9201      	str	r2, [sp, #4]
 8011ec2:	9300      	str	r3, [sp, #0]
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	462a      	mov	r2, r5
 8011ec8:	4621      	mov	r1, r4
 8011eca:	f7ff ff65 	bl	8011d98 <tcp_output_alloc_header_common>
 8011ece:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011ed0:	697b      	ldr	r3, [r7, #20]
 8011ed2:	2b00      	cmp	r3, #0
 8011ed4:	d006      	beq.n	8011ee4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eda:	68fa      	ldr	r2, [r7, #12]
 8011edc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011ede:	441a      	add	r2, r3
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011ee4:	697b      	ldr	r3, [r7, #20]
}
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	3718      	adds	r7, #24
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bdb0      	pop	{r4, r5, r7, pc}
 8011eee:	bf00      	nop
 8011ef0:	08017e7c 	.word	0x08017e7c
 8011ef4:	08018584 	.word	0x08018584
 8011ef8:	08017ed0 	.word	0x08017ed0

08011efc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011efc:	b580      	push	{r7, lr}
 8011efe:	b088      	sub	sp, #32
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	60f8      	str	r0, [r7, #12]
 8011f04:	60b9      	str	r1, [r7, #8]
 8011f06:	4611      	mov	r1, r2
 8011f08:	461a      	mov	r2, r3
 8011f0a:	460b      	mov	r3, r1
 8011f0c:	71fb      	strb	r3, [r7, #7]
 8011f0e:	4613      	mov	r3, r2
 8011f10:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8011f12:	2300      	movs	r3, #0
 8011f14:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011f16:	68bb      	ldr	r3, [r7, #8]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d106      	bne.n	8011f2a <tcp_output_fill_options+0x2e>
 8011f1c:	4b13      	ldr	r3, [pc, #76]	; (8011f6c <tcp_output_fill_options+0x70>)
 8011f1e:	f240 7256 	movw	r2, #1878	; 0x756
 8011f22:	4913      	ldr	r1, [pc, #76]	; (8011f70 <tcp_output_fill_options+0x74>)
 8011f24:	4813      	ldr	r0, [pc, #76]	; (8011f74 <tcp_output_fill_options+0x78>)
 8011f26:	f003 f997 	bl	8015258 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011f2a:	68bb      	ldr	r3, [r7, #8]
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011f30:	69bb      	ldr	r3, [r7, #24]
 8011f32:	3314      	adds	r3, #20
 8011f34:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011f36:	69bb      	ldr	r3, [r7, #24]
 8011f38:	f103 0214 	add.w	r2, r3, #20
 8011f3c:	8bfb      	ldrh	r3, [r7, #30]
 8011f3e:	009b      	lsls	r3, r3, #2
 8011f40:	4619      	mov	r1, r3
 8011f42:	79fb      	ldrb	r3, [r7, #7]
 8011f44:	009b      	lsls	r3, r3, #2
 8011f46:	f003 0304 	and.w	r3, r3, #4
 8011f4a:	440b      	add	r3, r1
 8011f4c:	4413      	add	r3, r2
 8011f4e:	697a      	ldr	r2, [r7, #20]
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d006      	beq.n	8011f62 <tcp_output_fill_options+0x66>
 8011f54:	4b05      	ldr	r3, [pc, #20]	; (8011f6c <tcp_output_fill_options+0x70>)
 8011f56:	f240 7275 	movw	r2, #1909	; 0x775
 8011f5a:	4907      	ldr	r1, [pc, #28]	; (8011f78 <tcp_output_fill_options+0x7c>)
 8011f5c:	4805      	ldr	r0, [pc, #20]	; (8011f74 <tcp_output_fill_options+0x78>)
 8011f5e:	f003 f97b 	bl	8015258 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8011f62:	bf00      	nop
 8011f64:	3720      	adds	r7, #32
 8011f66:	46bd      	mov	sp, r7
 8011f68:	bd80      	pop	{r7, pc}
 8011f6a:	bf00      	nop
 8011f6c:	08017e7c 	.word	0x08017e7c
 8011f70:	080185ac 	.word	0x080185ac
 8011f74:	08017ed0 	.word	0x08017ed0
 8011f78:	080184a4 	.word	0x080184a4

08011f7c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b08a      	sub	sp, #40	; 0x28
 8011f80:	af04      	add	r7, sp, #16
 8011f82:	60f8      	str	r0, [r7, #12]
 8011f84:	60b9      	str	r1, [r7, #8]
 8011f86:	607a      	str	r2, [r7, #4]
 8011f88:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011f8a:	68bb      	ldr	r3, [r7, #8]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d106      	bne.n	8011f9e <tcp_output_control_segment+0x22>
 8011f90:	4b1c      	ldr	r3, [pc, #112]	; (8012004 <tcp_output_control_segment+0x88>)
 8011f92:	f240 7287 	movw	r2, #1927	; 0x787
 8011f96:	491c      	ldr	r1, [pc, #112]	; (8012008 <tcp_output_control_segment+0x8c>)
 8011f98:	481c      	ldr	r0, [pc, #112]	; (801200c <tcp_output_control_segment+0x90>)
 8011f9a:	f003 f95d 	bl	8015258 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011f9e:	683a      	ldr	r2, [r7, #0]
 8011fa0:	6879      	ldr	r1, [r7, #4]
 8011fa2:	68f8      	ldr	r0, [r7, #12]
 8011fa4:	f7fe fad4 	bl	8010550 <tcp_route>
 8011fa8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011faa:	693b      	ldr	r3, [r7, #16]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d102      	bne.n	8011fb6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011fb0:	23fc      	movs	r3, #252	; 0xfc
 8011fb2:	75fb      	strb	r3, [r7, #23]
 8011fb4:	e01c      	b.n	8011ff0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d006      	beq.n	8011fca <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	7adb      	ldrb	r3, [r3, #11]
 8011fc0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	7a9b      	ldrb	r3, [r3, #10]
 8011fc6:	757b      	strb	r3, [r7, #21]
 8011fc8:	e003      	b.n	8011fd2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011fca:	23ff      	movs	r3, #255	; 0xff
 8011fcc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011fd2:	7dba      	ldrb	r2, [r7, #22]
 8011fd4:	693b      	ldr	r3, [r7, #16]
 8011fd6:	9302      	str	r3, [sp, #8]
 8011fd8:	2306      	movs	r3, #6
 8011fda:	9301      	str	r3, [sp, #4]
 8011fdc:	7d7b      	ldrb	r3, [r7, #21]
 8011fde:	9300      	str	r3, [sp, #0]
 8011fe0:	4613      	mov	r3, r2
 8011fe2:	683a      	ldr	r2, [r7, #0]
 8011fe4:	6879      	ldr	r1, [r7, #4]
 8011fe6:	68b8      	ldr	r0, [r7, #8]
 8011fe8:	f001 ff9c 	bl	8013f24 <ip4_output_if>
 8011fec:	4603      	mov	r3, r0
 8011fee:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011ff0:	68b8      	ldr	r0, [r7, #8]
 8011ff2:	f7f9 fed1 	bl	800bd98 <pbuf_free>
  return err;
 8011ff6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	3718      	adds	r7, #24
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}
 8012002:	bf00      	nop
 8012004:	08017e7c 	.word	0x08017e7c
 8012008:	080185d4 	.word	0x080185d4
 801200c:	08017ed0 	.word	0x08017ed0

08012010 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012010:	b590      	push	{r4, r7, lr}
 8012012:	b08b      	sub	sp, #44	; 0x2c
 8012014:	af04      	add	r7, sp, #16
 8012016:	60f8      	str	r0, [r7, #12]
 8012018:	60b9      	str	r1, [r7, #8]
 801201a:	607a      	str	r2, [r7, #4]
 801201c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d106      	bne.n	8012032 <tcp_rst+0x22>
 8012024:	4b1f      	ldr	r3, [pc, #124]	; (80120a4 <tcp_rst+0x94>)
 8012026:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801202a:	491f      	ldr	r1, [pc, #124]	; (80120a8 <tcp_rst+0x98>)
 801202c:	481f      	ldr	r0, [pc, #124]	; (80120ac <tcp_rst+0x9c>)
 801202e:	f003 f913 	bl	8015258 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012034:	2b00      	cmp	r3, #0
 8012036:	d106      	bne.n	8012046 <tcp_rst+0x36>
 8012038:	4b1a      	ldr	r3, [pc, #104]	; (80120a4 <tcp_rst+0x94>)
 801203a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801203e:	491c      	ldr	r1, [pc, #112]	; (80120b0 <tcp_rst+0xa0>)
 8012040:	481a      	ldr	r0, [pc, #104]	; (80120ac <tcp_rst+0x9c>)
 8012042:	f003 f909 	bl	8015258 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012046:	2300      	movs	r3, #0
 8012048:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801204a:	f246 0308 	movw	r3, #24584	; 0x6008
 801204e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012050:	7dfb      	ldrb	r3, [r7, #23]
 8012052:	b29c      	uxth	r4, r3
 8012054:	68b8      	ldr	r0, [r7, #8]
 8012056:	f7f8 fad6 	bl	800a606 <lwip_htonl>
 801205a:	4602      	mov	r2, r0
 801205c:	8abb      	ldrh	r3, [r7, #20]
 801205e:	9303      	str	r3, [sp, #12]
 8012060:	2314      	movs	r3, #20
 8012062:	9302      	str	r3, [sp, #8]
 8012064:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012066:	9301      	str	r3, [sp, #4]
 8012068:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801206a:	9300      	str	r3, [sp, #0]
 801206c:	4613      	mov	r3, r2
 801206e:	2200      	movs	r2, #0
 8012070:	4621      	mov	r1, r4
 8012072:	6878      	ldr	r0, [r7, #4]
 8012074:	f7ff fe90 	bl	8011d98 <tcp_output_alloc_header_common>
 8012078:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801207a:	693b      	ldr	r3, [r7, #16]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d00c      	beq.n	801209a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012080:	7dfb      	ldrb	r3, [r7, #23]
 8012082:	2200      	movs	r2, #0
 8012084:	6939      	ldr	r1, [r7, #16]
 8012086:	68f8      	ldr	r0, [r7, #12]
 8012088:	f7ff ff38 	bl	8011efc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801208c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801208e:	683a      	ldr	r2, [r7, #0]
 8012090:	6939      	ldr	r1, [r7, #16]
 8012092:	68f8      	ldr	r0, [r7, #12]
 8012094:	f7ff ff72 	bl	8011f7c <tcp_output_control_segment>
 8012098:	e000      	b.n	801209c <tcp_rst+0x8c>
    return;
 801209a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801209c:	371c      	adds	r7, #28
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd90      	pop	{r4, r7, pc}
 80120a2:	bf00      	nop
 80120a4:	08017e7c 	.word	0x08017e7c
 80120a8:	08018600 	.word	0x08018600
 80120ac:	08017ed0 	.word	0x08017ed0
 80120b0:	0801861c 	.word	0x0801861c

080120b4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80120b4:	b590      	push	{r4, r7, lr}
 80120b6:	b087      	sub	sp, #28
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80120bc:	2300      	movs	r3, #0
 80120be:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80120c0:	2300      	movs	r3, #0
 80120c2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d106      	bne.n	80120d8 <tcp_send_empty_ack+0x24>
 80120ca:	4b28      	ldr	r3, [pc, #160]	; (801216c <tcp_send_empty_ack+0xb8>)
 80120cc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80120d0:	4927      	ldr	r1, [pc, #156]	; (8012170 <tcp_send_empty_ack+0xbc>)
 80120d2:	4828      	ldr	r0, [pc, #160]	; (8012174 <tcp_send_empty_ack+0xc0>)
 80120d4:	f003 f8c0 	bl	8015258 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80120d8:	7dfb      	ldrb	r3, [r7, #23]
 80120da:	009b      	lsls	r3, r3, #2
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	f003 0304 	and.w	r3, r3, #4
 80120e2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80120e4:	7d7b      	ldrb	r3, [r7, #21]
 80120e6:	b29c      	uxth	r4, r3
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120ec:	4618      	mov	r0, r3
 80120ee:	f7f8 fa8a 	bl	800a606 <lwip_htonl>
 80120f2:	4603      	mov	r3, r0
 80120f4:	2200      	movs	r2, #0
 80120f6:	4621      	mov	r1, r4
 80120f8:	6878      	ldr	r0, [r7, #4]
 80120fa:	f7ff fec1 	bl	8011e80 <tcp_output_alloc_header>
 80120fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012100:	693b      	ldr	r3, [r7, #16]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d109      	bne.n	801211a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	8b5b      	ldrh	r3, [r3, #26]
 801210a:	f043 0303 	orr.w	r3, r3, #3
 801210e:	b29a      	uxth	r2, r3
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012114:	f06f 0301 	mvn.w	r3, #1
 8012118:	e023      	b.n	8012162 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801211a:	7dbb      	ldrb	r3, [r7, #22]
 801211c:	7dfa      	ldrb	r2, [r7, #23]
 801211e:	6939      	ldr	r1, [r7, #16]
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f7ff feeb 	bl	8011efc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012126:	687a      	ldr	r2, [r7, #4]
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	3304      	adds	r3, #4
 801212c:	6939      	ldr	r1, [r7, #16]
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f7ff ff24 	bl	8011f7c <tcp_output_control_segment>
 8012134:	4603      	mov	r3, r0
 8012136:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012138:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d007      	beq.n	8012150 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	8b5b      	ldrh	r3, [r3, #26]
 8012144:	f043 0303 	orr.w	r3, r3, #3
 8012148:	b29a      	uxth	r2, r3
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	835a      	strh	r2, [r3, #26]
 801214e:	e006      	b.n	801215e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	8b5b      	ldrh	r3, [r3, #26]
 8012154:	f023 0303 	bic.w	r3, r3, #3
 8012158:	b29a      	uxth	r2, r3
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801215e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012162:	4618      	mov	r0, r3
 8012164:	371c      	adds	r7, #28
 8012166:	46bd      	mov	sp, r7
 8012168:	bd90      	pop	{r4, r7, pc}
 801216a:	bf00      	nop
 801216c:	08017e7c 	.word	0x08017e7c
 8012170:	08018638 	.word	0x08018638
 8012174:	08017ed0 	.word	0x08017ed0

08012178 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012178:	b590      	push	{r4, r7, lr}
 801217a:	b087      	sub	sp, #28
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012180:	2300      	movs	r3, #0
 8012182:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d106      	bne.n	8012198 <tcp_keepalive+0x20>
 801218a:	4b18      	ldr	r3, [pc, #96]	; (80121ec <tcp_keepalive+0x74>)
 801218c:	f640 0224 	movw	r2, #2084	; 0x824
 8012190:	4917      	ldr	r1, [pc, #92]	; (80121f0 <tcp_keepalive+0x78>)
 8012192:	4818      	ldr	r0, [pc, #96]	; (80121f4 <tcp_keepalive+0x7c>)
 8012194:	f003 f860 	bl	8015258 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012198:	7dfb      	ldrb	r3, [r7, #23]
 801219a:	b29c      	uxth	r4, r3
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121a0:	3b01      	subs	r3, #1
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7f8 fa2f 	bl	800a606 <lwip_htonl>
 80121a8:	4603      	mov	r3, r0
 80121aa:	2200      	movs	r2, #0
 80121ac:	4621      	mov	r1, r4
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f7ff fe66 	bl	8011e80 <tcp_output_alloc_header>
 80121b4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80121b6:	693b      	ldr	r3, [r7, #16]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d102      	bne.n	80121c2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80121bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80121c0:	e010      	b.n	80121e4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80121c2:	7dfb      	ldrb	r3, [r7, #23]
 80121c4:	2200      	movs	r2, #0
 80121c6:	6939      	ldr	r1, [r7, #16]
 80121c8:	6878      	ldr	r0, [r7, #4]
 80121ca:	f7ff fe97 	bl	8011efc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80121ce:	687a      	ldr	r2, [r7, #4]
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	3304      	adds	r3, #4
 80121d4:	6939      	ldr	r1, [r7, #16]
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f7ff fed0 	bl	8011f7c <tcp_output_control_segment>
 80121dc:	4603      	mov	r3, r0
 80121de:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80121e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	371c      	adds	r7, #28
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd90      	pop	{r4, r7, pc}
 80121ec:	08017e7c 	.word	0x08017e7c
 80121f0:	08018658 	.word	0x08018658
 80121f4:	08017ed0 	.word	0x08017ed0

080121f8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80121f8:	b590      	push	{r4, r7, lr}
 80121fa:	b08b      	sub	sp, #44	; 0x2c
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012200:	2300      	movs	r3, #0
 8012202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d106      	bne.n	801221a <tcp_zero_window_probe+0x22>
 801220c:	4b4c      	ldr	r3, [pc, #304]	; (8012340 <tcp_zero_window_probe+0x148>)
 801220e:	f640 024f 	movw	r2, #2127	; 0x84f
 8012212:	494c      	ldr	r1, [pc, #304]	; (8012344 <tcp_zero_window_probe+0x14c>)
 8012214:	484c      	ldr	r0, [pc, #304]	; (8012348 <tcp_zero_window_probe+0x150>)
 8012216:	f003 f81f 	bl	8015258 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801221e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012220:	6a3b      	ldr	r3, [r7, #32]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d101      	bne.n	801222a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012226:	2300      	movs	r3, #0
 8012228:	e086      	b.n	8012338 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012230:	2bff      	cmp	r3, #255	; 0xff
 8012232:	d007      	beq.n	8012244 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801223a:	3301      	adds	r3, #1
 801223c:	b2da      	uxtb	r2, r3
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012244:	6a3b      	ldr	r3, [r7, #32]
 8012246:	68db      	ldr	r3, [r3, #12]
 8012248:	899b      	ldrh	r3, [r3, #12]
 801224a:	b29b      	uxth	r3, r3
 801224c:	4618      	mov	r0, r3
 801224e:	f7f8 f9c5 	bl	800a5dc <lwip_htons>
 8012252:	4603      	mov	r3, r0
 8012254:	b2db      	uxtb	r3, r3
 8012256:	f003 0301 	and.w	r3, r3, #1
 801225a:	2b00      	cmp	r3, #0
 801225c:	d005      	beq.n	801226a <tcp_zero_window_probe+0x72>
 801225e:	6a3b      	ldr	r3, [r7, #32]
 8012260:	891b      	ldrh	r3, [r3, #8]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d101      	bne.n	801226a <tcp_zero_window_probe+0x72>
 8012266:	2301      	movs	r3, #1
 8012268:	e000      	b.n	801226c <tcp_zero_window_probe+0x74>
 801226a:	2300      	movs	r3, #0
 801226c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801226e:	7ffb      	ldrb	r3, [r7, #31]
 8012270:	2b00      	cmp	r3, #0
 8012272:	bf0c      	ite	eq
 8012274:	2301      	moveq	r3, #1
 8012276:	2300      	movne	r3, #0
 8012278:	b2db      	uxtb	r3, r3
 801227a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801227c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012280:	b299      	uxth	r1, r3
 8012282:	6a3b      	ldr	r3, [r7, #32]
 8012284:	68db      	ldr	r3, [r3, #12]
 8012286:	685b      	ldr	r3, [r3, #4]
 8012288:	8bba      	ldrh	r2, [r7, #28]
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f7ff fdf8 	bl	8011e80 <tcp_output_alloc_header>
 8012290:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012292:	69bb      	ldr	r3, [r7, #24]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d102      	bne.n	801229e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012298:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801229c:	e04c      	b.n	8012338 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801229e:	69bb      	ldr	r3, [r7, #24]
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80122a4:	7ffb      	ldrb	r3, [r7, #31]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d011      	beq.n	80122ce <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	899b      	ldrh	r3, [r3, #12]
 80122ae:	b29b      	uxth	r3, r3
 80122b0:	b21b      	sxth	r3, r3
 80122b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80122b6:	b21c      	sxth	r4, r3
 80122b8:	2011      	movs	r0, #17
 80122ba:	f7f8 f98f 	bl	800a5dc <lwip_htons>
 80122be:	4603      	mov	r3, r0
 80122c0:	b21b      	sxth	r3, r3
 80122c2:	4323      	orrs	r3, r4
 80122c4:	b21b      	sxth	r3, r3
 80122c6:	b29a      	uxth	r2, r3
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	819a      	strh	r2, [r3, #12]
 80122cc:	e010      	b.n	80122f0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80122ce:	69bb      	ldr	r3, [r7, #24]
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	3314      	adds	r3, #20
 80122d4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80122d6:	6a3b      	ldr	r3, [r7, #32]
 80122d8:	6858      	ldr	r0, [r3, #4]
 80122da:	6a3b      	ldr	r3, [r7, #32]
 80122dc:	685b      	ldr	r3, [r3, #4]
 80122de:	891a      	ldrh	r2, [r3, #8]
 80122e0:	6a3b      	ldr	r3, [r7, #32]
 80122e2:	891b      	ldrh	r3, [r3, #8]
 80122e4:	1ad3      	subs	r3, r2, r3
 80122e6:	b29b      	uxth	r3, r3
 80122e8:	2201      	movs	r2, #1
 80122ea:	6939      	ldr	r1, [r7, #16]
 80122ec:	f7f9 ff4a 	bl	800c184 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80122f0:	6a3b      	ldr	r3, [r7, #32]
 80122f2:	68db      	ldr	r3, [r3, #12]
 80122f4:	685b      	ldr	r3, [r3, #4]
 80122f6:	4618      	mov	r0, r3
 80122f8:	f7f8 f985 	bl	800a606 <lwip_htonl>
 80122fc:	4603      	mov	r3, r0
 80122fe:	3301      	adds	r3, #1
 8012300:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	1ad3      	subs	r3, r2, r3
 801230a:	2b00      	cmp	r3, #0
 801230c:	da02      	bge.n	8012314 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	68fa      	ldr	r2, [r7, #12]
 8012312:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012318:	2200      	movs	r2, #0
 801231a:	69b9      	ldr	r1, [r7, #24]
 801231c:	6878      	ldr	r0, [r7, #4]
 801231e:	f7ff fded 	bl	8011efc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012322:	687a      	ldr	r2, [r7, #4]
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	3304      	adds	r3, #4
 8012328:	69b9      	ldr	r1, [r7, #24]
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f7ff fe26 	bl	8011f7c <tcp_output_control_segment>
 8012330:	4603      	mov	r3, r0
 8012332:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012334:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012338:	4618      	mov	r0, r3
 801233a:	372c      	adds	r7, #44	; 0x2c
 801233c:	46bd      	mov	sp, r7
 801233e:	bd90      	pop	{r4, r7, pc}
 8012340:	08017e7c 	.word	0x08017e7c
 8012344:	08018674 	.word	0x08018674
 8012348:	08017ed0 	.word	0x08017ed0

0801234c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b082      	sub	sp, #8
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012354:	f7fa f804 	bl	800c360 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012358:	4b0a      	ldr	r3, [pc, #40]	; (8012384 <tcpip_tcp_timer+0x38>)
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d103      	bne.n	8012368 <tcpip_tcp_timer+0x1c>
 8012360:	4b09      	ldr	r3, [pc, #36]	; (8012388 <tcpip_tcp_timer+0x3c>)
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d005      	beq.n	8012374 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012368:	2200      	movs	r2, #0
 801236a:	4908      	ldr	r1, [pc, #32]	; (801238c <tcpip_tcp_timer+0x40>)
 801236c:	20fa      	movs	r0, #250	; 0xfa
 801236e:	f000 f8f1 	bl	8012554 <sys_timeout>
 8012372:	e002      	b.n	801237a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012374:	4b06      	ldr	r3, [pc, #24]	; (8012390 <tcpip_tcp_timer+0x44>)
 8012376:	2200      	movs	r2, #0
 8012378:	601a      	str	r2, [r3, #0]
  }
}
 801237a:	bf00      	nop
 801237c:	3708      	adds	r7, #8
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}
 8012382:	bf00      	nop
 8012384:	2000b3e0 	.word	0x2000b3e0
 8012388:	2000b3f0 	.word	0x2000b3f0
 801238c:	0801234d 	.word	0x0801234d
 8012390:	20004528 	.word	0x20004528

08012394 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012394:	b580      	push	{r7, lr}
 8012396:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012398:	4b0a      	ldr	r3, [pc, #40]	; (80123c4 <tcp_timer_needed+0x30>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d10f      	bne.n	80123c0 <tcp_timer_needed+0x2c>
 80123a0:	4b09      	ldr	r3, [pc, #36]	; (80123c8 <tcp_timer_needed+0x34>)
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d103      	bne.n	80123b0 <tcp_timer_needed+0x1c>
 80123a8:	4b08      	ldr	r3, [pc, #32]	; (80123cc <tcp_timer_needed+0x38>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d007      	beq.n	80123c0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80123b0:	4b04      	ldr	r3, [pc, #16]	; (80123c4 <tcp_timer_needed+0x30>)
 80123b2:	2201      	movs	r2, #1
 80123b4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80123b6:	2200      	movs	r2, #0
 80123b8:	4905      	ldr	r1, [pc, #20]	; (80123d0 <tcp_timer_needed+0x3c>)
 80123ba:	20fa      	movs	r0, #250	; 0xfa
 80123bc:	f000 f8ca 	bl	8012554 <sys_timeout>
  }
}
 80123c0:	bf00      	nop
 80123c2:	bd80      	pop	{r7, pc}
 80123c4:	20004528 	.word	0x20004528
 80123c8:	2000b3e0 	.word	0x2000b3e0
 80123cc:	2000b3f0 	.word	0x2000b3f0
 80123d0:	0801234d 	.word	0x0801234d

080123d4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b086      	sub	sp, #24
 80123d8:	af00      	add	r7, sp, #0
 80123da:	60f8      	str	r0, [r7, #12]
 80123dc:	60b9      	str	r1, [r7, #8]
 80123de:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80123e0:	200a      	movs	r0, #10
 80123e2:	f7f8 fde7 	bl	800afb4 <memp_malloc>
 80123e6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80123e8:	693b      	ldr	r3, [r7, #16]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d109      	bne.n	8012402 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80123ee:	693b      	ldr	r3, [r7, #16]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d151      	bne.n	8012498 <sys_timeout_abs+0xc4>
 80123f4:	4b2a      	ldr	r3, [pc, #168]	; (80124a0 <sys_timeout_abs+0xcc>)
 80123f6:	22be      	movs	r2, #190	; 0xbe
 80123f8:	492a      	ldr	r1, [pc, #168]	; (80124a4 <sys_timeout_abs+0xd0>)
 80123fa:	482b      	ldr	r0, [pc, #172]	; (80124a8 <sys_timeout_abs+0xd4>)
 80123fc:	f002 ff2c 	bl	8015258 <iprintf>
    return;
 8012400:	e04a      	b.n	8012498 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	2200      	movs	r2, #0
 8012406:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	68ba      	ldr	r2, [r7, #8]
 801240c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	687a      	ldr	r2, [r7, #4]
 8012412:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012414:	693b      	ldr	r3, [r7, #16]
 8012416:	68fa      	ldr	r2, [r7, #12]
 8012418:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801241a:	4b24      	ldr	r3, [pc, #144]	; (80124ac <sys_timeout_abs+0xd8>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d103      	bne.n	801242a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012422:	4a22      	ldr	r2, [pc, #136]	; (80124ac <sys_timeout_abs+0xd8>)
 8012424:	693b      	ldr	r3, [r7, #16]
 8012426:	6013      	str	r3, [r2, #0]
    return;
 8012428:	e037      	b.n	801249a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	685a      	ldr	r2, [r3, #4]
 801242e:	4b1f      	ldr	r3, [pc, #124]	; (80124ac <sys_timeout_abs+0xd8>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	685b      	ldr	r3, [r3, #4]
 8012434:	1ad3      	subs	r3, r2, r3
 8012436:	0fdb      	lsrs	r3, r3, #31
 8012438:	f003 0301 	and.w	r3, r3, #1
 801243c:	b2db      	uxtb	r3, r3
 801243e:	2b00      	cmp	r3, #0
 8012440:	d007      	beq.n	8012452 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012442:	4b1a      	ldr	r3, [pc, #104]	; (80124ac <sys_timeout_abs+0xd8>)
 8012444:	681a      	ldr	r2, [r3, #0]
 8012446:	693b      	ldr	r3, [r7, #16]
 8012448:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801244a:	4a18      	ldr	r2, [pc, #96]	; (80124ac <sys_timeout_abs+0xd8>)
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	6013      	str	r3, [r2, #0]
 8012450:	e023      	b.n	801249a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012452:	4b16      	ldr	r3, [pc, #88]	; (80124ac <sys_timeout_abs+0xd8>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	617b      	str	r3, [r7, #20]
 8012458:	e01a      	b.n	8012490 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	2b00      	cmp	r3, #0
 8012460:	d00b      	beq.n	801247a <sys_timeout_abs+0xa6>
 8012462:	693b      	ldr	r3, [r7, #16]
 8012464:	685a      	ldr	r2, [r3, #4]
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	685b      	ldr	r3, [r3, #4]
 801246c:	1ad3      	subs	r3, r2, r3
 801246e:	0fdb      	lsrs	r3, r3, #31
 8012470:	f003 0301 	and.w	r3, r3, #1
 8012474:	b2db      	uxtb	r3, r3
 8012476:	2b00      	cmp	r3, #0
 8012478:	d007      	beq.n	801248a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801247a:	697b      	ldr	r3, [r7, #20]
 801247c:	681a      	ldr	r2, [r3, #0]
 801247e:	693b      	ldr	r3, [r7, #16]
 8012480:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012482:	697b      	ldr	r3, [r7, #20]
 8012484:	693a      	ldr	r2, [r7, #16]
 8012486:	601a      	str	r2, [r3, #0]
        break;
 8012488:	e007      	b.n	801249a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	617b      	str	r3, [r7, #20]
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d1e1      	bne.n	801245a <sys_timeout_abs+0x86>
 8012496:	e000      	b.n	801249a <sys_timeout_abs+0xc6>
    return;
 8012498:	bf00      	nop
      }
    }
  }
}
 801249a:	3718      	adds	r7, #24
 801249c:	46bd      	mov	sp, r7
 801249e:	bd80      	pop	{r7, pc}
 80124a0:	08018698 	.word	0x08018698
 80124a4:	080186cc 	.word	0x080186cc
 80124a8:	0801870c 	.word	0x0801870c
 80124ac:	20004520 	.word	0x20004520

080124b0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b086      	sub	sp, #24
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	685b      	ldr	r3, [r3, #4]
 80124c0:	4798      	blx	r3

  now = sys_now();
 80124c2:	f7f4 f8e5 	bl	8006690 <sys_now>
 80124c6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80124c8:	697b      	ldr	r3, [r7, #20]
 80124ca:	681a      	ldr	r2, [r3, #0]
 80124cc:	4b0f      	ldr	r3, [pc, #60]	; (801250c <lwip_cyclic_timer+0x5c>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	4413      	add	r3, r2
 80124d2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80124d4:	68fa      	ldr	r2, [r7, #12]
 80124d6:	693b      	ldr	r3, [r7, #16]
 80124d8:	1ad3      	subs	r3, r2, r3
 80124da:	0fdb      	lsrs	r3, r3, #31
 80124dc:	f003 0301 	and.w	r3, r3, #1
 80124e0:	b2db      	uxtb	r3, r3
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d009      	beq.n	80124fa <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80124e6:	697b      	ldr	r3, [r7, #20]
 80124e8:	681a      	ldr	r2, [r3, #0]
 80124ea:	693b      	ldr	r3, [r7, #16]
 80124ec:	4413      	add	r3, r2
 80124ee:	687a      	ldr	r2, [r7, #4]
 80124f0:	4907      	ldr	r1, [pc, #28]	; (8012510 <lwip_cyclic_timer+0x60>)
 80124f2:	4618      	mov	r0, r3
 80124f4:	f7ff ff6e 	bl	80123d4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80124f8:	e004      	b.n	8012504 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80124fa:	687a      	ldr	r2, [r7, #4]
 80124fc:	4904      	ldr	r1, [pc, #16]	; (8012510 <lwip_cyclic_timer+0x60>)
 80124fe:	68f8      	ldr	r0, [r7, #12]
 8012500:	f7ff ff68 	bl	80123d4 <sys_timeout_abs>
}
 8012504:	bf00      	nop
 8012506:	3718      	adds	r7, #24
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}
 801250c:	20004524 	.word	0x20004524
 8012510:	080124b1 	.word	0x080124b1

08012514 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b082      	sub	sp, #8
 8012518:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801251a:	2301      	movs	r3, #1
 801251c:	607b      	str	r3, [r7, #4]
 801251e:	e00e      	b.n	801253e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012520:	4a0a      	ldr	r2, [pc, #40]	; (801254c <sys_timeouts_init+0x38>)
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	00db      	lsls	r3, r3, #3
 801252c:	4a07      	ldr	r2, [pc, #28]	; (801254c <sys_timeouts_init+0x38>)
 801252e:	4413      	add	r3, r2
 8012530:	461a      	mov	r2, r3
 8012532:	4907      	ldr	r1, [pc, #28]	; (8012550 <sys_timeouts_init+0x3c>)
 8012534:	f000 f80e 	bl	8012554 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	3301      	adds	r3, #1
 801253c:	607b      	str	r3, [r7, #4]
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2b02      	cmp	r3, #2
 8012542:	d9ed      	bls.n	8012520 <sys_timeouts_init+0xc>
  }
}
 8012544:	bf00      	nop
 8012546:	3708      	adds	r7, #8
 8012548:	46bd      	mov	sp, r7
 801254a:	bd80      	pop	{r7, pc}
 801254c:	08029df8 	.word	0x08029df8
 8012550:	080124b1 	.word	0x080124b1

08012554 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012554:	b580      	push	{r7, lr}
 8012556:	b086      	sub	sp, #24
 8012558:	af00      	add	r7, sp, #0
 801255a:	60f8      	str	r0, [r7, #12]
 801255c:	60b9      	str	r1, [r7, #8]
 801255e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012566:	d306      	bcc.n	8012576 <sys_timeout+0x22>
 8012568:	4b0a      	ldr	r3, [pc, #40]	; (8012594 <sys_timeout+0x40>)
 801256a:	f240 1229 	movw	r2, #297	; 0x129
 801256e:	490a      	ldr	r1, [pc, #40]	; (8012598 <sys_timeout+0x44>)
 8012570:	480a      	ldr	r0, [pc, #40]	; (801259c <sys_timeout+0x48>)
 8012572:	f002 fe71 	bl	8015258 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012576:	f7f4 f88b 	bl	8006690 <sys_now>
 801257a:	4602      	mov	r2, r0
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	4413      	add	r3, r2
 8012580:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012582:	687a      	ldr	r2, [r7, #4]
 8012584:	68b9      	ldr	r1, [r7, #8]
 8012586:	6978      	ldr	r0, [r7, #20]
 8012588:	f7ff ff24 	bl	80123d4 <sys_timeout_abs>
#endif
}
 801258c:	bf00      	nop
 801258e:	3718      	adds	r7, #24
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}
 8012594:	08018698 	.word	0x08018698
 8012598:	08018734 	.word	0x08018734
 801259c:	0801870c 	.word	0x0801870c

080125a0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b084      	sub	sp, #16
 80125a4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80125a6:	f7f4 f873 	bl	8006690 <sys_now>
 80125aa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80125ac:	4b17      	ldr	r3, [pc, #92]	; (801260c <sys_check_timeouts+0x6c>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80125b2:	68bb      	ldr	r3, [r7, #8]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d022      	beq.n	80125fe <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80125b8:	68bb      	ldr	r3, [r7, #8]
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	68fa      	ldr	r2, [r7, #12]
 80125be:	1ad3      	subs	r3, r2, r3
 80125c0:	0fdb      	lsrs	r3, r3, #31
 80125c2:	f003 0301 	and.w	r3, r3, #1
 80125c6:	b2db      	uxtb	r3, r3
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d11a      	bne.n	8012602 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	4a0e      	ldr	r2, [pc, #56]	; (801260c <sys_check_timeouts+0x6c>)
 80125d2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	689b      	ldr	r3, [r3, #8]
 80125d8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	68db      	ldr	r3, [r3, #12]
 80125de:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	685b      	ldr	r3, [r3, #4]
 80125e4:	4a0a      	ldr	r2, [pc, #40]	; (8012610 <sys_check_timeouts+0x70>)
 80125e6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80125e8:	68b9      	ldr	r1, [r7, #8]
 80125ea:	200a      	movs	r0, #10
 80125ec:	f7f8 fd34 	bl	800b058 <memp_free>
    if (handler != NULL) {
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d0da      	beq.n	80125ac <sys_check_timeouts+0xc>
      handler(arg);
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	6838      	ldr	r0, [r7, #0]
 80125fa:	4798      	blx	r3
  do {
 80125fc:	e7d6      	b.n	80125ac <sys_check_timeouts+0xc>
      return;
 80125fe:	bf00      	nop
 8012600:	e000      	b.n	8012604 <sys_check_timeouts+0x64>
      return;
 8012602:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012604:	3710      	adds	r7, #16
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}
 801260a:	bf00      	nop
 801260c:	20004520 	.word	0x20004520
 8012610:	20004524 	.word	0x20004524

08012614 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b082      	sub	sp, #8
 8012618:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801261a:	4b16      	ldr	r3, [pc, #88]	; (8012674 <sys_timeouts_sleeptime+0x60>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d102      	bne.n	8012628 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012626:	e020      	b.n	801266a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012628:	f7f4 f832 	bl	8006690 <sys_now>
 801262c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801262e:	4b11      	ldr	r3, [pc, #68]	; (8012674 <sys_timeouts_sleeptime+0x60>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	685a      	ldr	r2, [r3, #4]
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	1ad3      	subs	r3, r2, r3
 8012638:	0fdb      	lsrs	r3, r3, #31
 801263a:	f003 0301 	and.w	r3, r3, #1
 801263e:	b2db      	uxtb	r3, r3
 8012640:	2b00      	cmp	r3, #0
 8012642:	d001      	beq.n	8012648 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012644:	2300      	movs	r3, #0
 8012646:	e010      	b.n	801266a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012648:	4b0a      	ldr	r3, [pc, #40]	; (8012674 <sys_timeouts_sleeptime+0x60>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	685a      	ldr	r2, [r3, #4]
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	1ad3      	subs	r3, r2, r3
 8012652:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	2b00      	cmp	r3, #0
 8012658:	da06      	bge.n	8012668 <sys_timeouts_sleeptime+0x54>
 801265a:	4b07      	ldr	r3, [pc, #28]	; (8012678 <sys_timeouts_sleeptime+0x64>)
 801265c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012660:	4906      	ldr	r1, [pc, #24]	; (801267c <sys_timeouts_sleeptime+0x68>)
 8012662:	4807      	ldr	r0, [pc, #28]	; (8012680 <sys_timeouts_sleeptime+0x6c>)
 8012664:	f002 fdf8 	bl	8015258 <iprintf>
    return ret;
 8012668:	683b      	ldr	r3, [r7, #0]
  }
}
 801266a:	4618      	mov	r0, r3
 801266c:	3708      	adds	r7, #8
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}
 8012672:	bf00      	nop
 8012674:	20004520 	.word	0x20004520
 8012678:	08018698 	.word	0x08018698
 801267c:	0801876c 	.word	0x0801876c
 8012680:	0801870c 	.word	0x0801870c

08012684 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012688:	f002 fdfe 	bl	8015288 <rand>
 801268c:	4603      	mov	r3, r0
 801268e:	b29b      	uxth	r3, r3
 8012690:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012694:	b29b      	uxth	r3, r3
 8012696:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801269a:	b29a      	uxth	r2, r3
 801269c:	4b01      	ldr	r3, [pc, #4]	; (80126a4 <udp_init+0x20>)
 801269e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80126a0:	bf00      	nop
 80126a2:	bd80      	pop	{r7, pc}
 80126a4:	20000018 	.word	0x20000018

080126a8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b084      	sub	sp, #16
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	60f8      	str	r0, [r7, #12]
 80126b0:	60b9      	str	r1, [r7, #8]
 80126b2:	4613      	mov	r3, r2
 80126b4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d105      	bne.n	80126c8 <udp_input_local_match+0x20>
 80126bc:	4b27      	ldr	r3, [pc, #156]	; (801275c <udp_input_local_match+0xb4>)
 80126be:	2287      	movs	r2, #135	; 0x87
 80126c0:	4927      	ldr	r1, [pc, #156]	; (8012760 <udp_input_local_match+0xb8>)
 80126c2:	4828      	ldr	r0, [pc, #160]	; (8012764 <udp_input_local_match+0xbc>)
 80126c4:	f002 fdc8 	bl	8015258 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d105      	bne.n	80126da <udp_input_local_match+0x32>
 80126ce:	4b23      	ldr	r3, [pc, #140]	; (801275c <udp_input_local_match+0xb4>)
 80126d0:	2288      	movs	r2, #136	; 0x88
 80126d2:	4925      	ldr	r1, [pc, #148]	; (8012768 <udp_input_local_match+0xc0>)
 80126d4:	4823      	ldr	r0, [pc, #140]	; (8012764 <udp_input_local_match+0xbc>)
 80126d6:	f002 fdbf 	bl	8015258 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	7a1b      	ldrb	r3, [r3, #8]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d00b      	beq.n	80126fa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	7a1a      	ldrb	r2, [r3, #8]
 80126e6:	4b21      	ldr	r3, [pc, #132]	; (801276c <udp_input_local_match+0xc4>)
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80126ee:	3301      	adds	r3, #1
 80126f0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80126f2:	429a      	cmp	r2, r3
 80126f4:	d001      	beq.n	80126fa <udp_input_local_match+0x52>
    return 0;
 80126f6:	2300      	movs	r3, #0
 80126f8:	e02b      	b.n	8012752 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80126fa:	79fb      	ldrb	r3, [r7, #7]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d018      	beq.n	8012732 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d013      	beq.n	801272e <udp_input_local_match+0x86>
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d00f      	beq.n	801272e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801270e:	4b17      	ldr	r3, [pc, #92]	; (801276c <udp_input_local_match+0xc4>)
 8012710:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012712:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012716:	d00a      	beq.n	801272e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	681a      	ldr	r2, [r3, #0]
 801271c:	4b13      	ldr	r3, [pc, #76]	; (801276c <udp_input_local_match+0xc4>)
 801271e:	695b      	ldr	r3, [r3, #20]
 8012720:	405a      	eors	r2, r3
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	3308      	adds	r3, #8
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801272a:	2b00      	cmp	r3, #0
 801272c:	d110      	bne.n	8012750 <udp_input_local_match+0xa8>
          return 1;
 801272e:	2301      	movs	r3, #1
 8012730:	e00f      	b.n	8012752 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d009      	beq.n	801274c <udp_input_local_match+0xa4>
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d005      	beq.n	801274c <udp_input_local_match+0xa4>
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	681a      	ldr	r2, [r3, #0]
 8012744:	4b09      	ldr	r3, [pc, #36]	; (801276c <udp_input_local_match+0xc4>)
 8012746:	695b      	ldr	r3, [r3, #20]
 8012748:	429a      	cmp	r2, r3
 801274a:	d101      	bne.n	8012750 <udp_input_local_match+0xa8>
        return 1;
 801274c:	2301      	movs	r3, #1
 801274e:	e000      	b.n	8012752 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012750:	2300      	movs	r3, #0
}
 8012752:	4618      	mov	r0, r3
 8012754:	3710      	adds	r7, #16
 8012756:	46bd      	mov	sp, r7
 8012758:	bd80      	pop	{r7, pc}
 801275a:	bf00      	nop
 801275c:	08018780 	.word	0x08018780
 8012760:	080187b0 	.word	0x080187b0
 8012764:	080187d4 	.word	0x080187d4
 8012768:	080187fc 	.word	0x080187fc
 801276c:	20007ccc 	.word	0x20007ccc

08012770 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012770:	b590      	push	{r4, r7, lr}
 8012772:	b08d      	sub	sp, #52	; 0x34
 8012774:	af02      	add	r7, sp, #8
 8012776:	6078      	str	r0, [r7, #4]
 8012778:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801277a:	2300      	movs	r3, #0
 801277c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d105      	bne.n	8012790 <udp_input+0x20>
 8012784:	4b7c      	ldr	r3, [pc, #496]	; (8012978 <udp_input+0x208>)
 8012786:	22cf      	movs	r2, #207	; 0xcf
 8012788:	497c      	ldr	r1, [pc, #496]	; (801297c <udp_input+0x20c>)
 801278a:	487d      	ldr	r0, [pc, #500]	; (8012980 <udp_input+0x210>)
 801278c:	f002 fd64 	bl	8015258 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012790:	683b      	ldr	r3, [r7, #0]
 8012792:	2b00      	cmp	r3, #0
 8012794:	d105      	bne.n	80127a2 <udp_input+0x32>
 8012796:	4b78      	ldr	r3, [pc, #480]	; (8012978 <udp_input+0x208>)
 8012798:	22d0      	movs	r2, #208	; 0xd0
 801279a:	497a      	ldr	r1, [pc, #488]	; (8012984 <udp_input+0x214>)
 801279c:	4878      	ldr	r0, [pc, #480]	; (8012980 <udp_input+0x210>)
 801279e:	f002 fd5b 	bl	8015258 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	895b      	ldrh	r3, [r3, #10]
 80127a6:	2b07      	cmp	r3, #7
 80127a8:	d803      	bhi.n	80127b2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f7f9 faf4 	bl	800bd98 <pbuf_free>
    goto end;
 80127b0:	e0de      	b.n	8012970 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	685b      	ldr	r3, [r3, #4]
 80127b6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80127b8:	4b73      	ldr	r3, [pc, #460]	; (8012988 <udp_input+0x218>)
 80127ba:	695a      	ldr	r2, [r3, #20]
 80127bc:	4b72      	ldr	r3, [pc, #456]	; (8012988 <udp_input+0x218>)
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	4619      	mov	r1, r3
 80127c2:	4610      	mov	r0, r2
 80127c4:	f001 fc86 	bl	80140d4 <ip4_addr_isbroadcast_u32>
 80127c8:	4603      	mov	r3, r0
 80127ca:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	881b      	ldrh	r3, [r3, #0]
 80127d0:	b29b      	uxth	r3, r3
 80127d2:	4618      	mov	r0, r3
 80127d4:	f7f7 ff02 	bl	800a5dc <lwip_htons>
 80127d8:	4603      	mov	r3, r0
 80127da:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80127dc:	697b      	ldr	r3, [r7, #20]
 80127de:	885b      	ldrh	r3, [r3, #2]
 80127e0:	b29b      	uxth	r3, r3
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7f7 fefa 	bl	800a5dc <lwip_htons>
 80127e8:	4603      	mov	r3, r0
 80127ea:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80127ec:	2300      	movs	r3, #0
 80127ee:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80127f0:	2300      	movs	r3, #0
 80127f2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80127f4:	2300      	movs	r3, #0
 80127f6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80127f8:	4b64      	ldr	r3, [pc, #400]	; (801298c <udp_input+0x21c>)
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	627b      	str	r3, [r7, #36]	; 0x24
 80127fe:	e054      	b.n	80128aa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012802:	8a5b      	ldrh	r3, [r3, #18]
 8012804:	89fa      	ldrh	r2, [r7, #14]
 8012806:	429a      	cmp	r2, r3
 8012808:	d14a      	bne.n	80128a0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801280a:	7cfb      	ldrb	r3, [r7, #19]
 801280c:	461a      	mov	r2, r3
 801280e:	6839      	ldr	r1, [r7, #0]
 8012810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012812:	f7ff ff49 	bl	80126a8 <udp_input_local_match>
 8012816:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012818:	2b00      	cmp	r3, #0
 801281a:	d041      	beq.n	80128a0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801281e:	7c1b      	ldrb	r3, [r3, #16]
 8012820:	f003 0304 	and.w	r3, r3, #4
 8012824:	2b00      	cmp	r3, #0
 8012826:	d11d      	bne.n	8012864 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012828:	69fb      	ldr	r3, [r7, #28]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d102      	bne.n	8012834 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012830:	61fb      	str	r3, [r7, #28]
 8012832:	e017      	b.n	8012864 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012834:	7cfb      	ldrb	r3, [r7, #19]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d014      	beq.n	8012864 <udp_input+0xf4>
 801283a:	4b53      	ldr	r3, [pc, #332]	; (8012988 <udp_input+0x218>)
 801283c:	695b      	ldr	r3, [r3, #20]
 801283e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012842:	d10f      	bne.n	8012864 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012844:	69fb      	ldr	r3, [r7, #28]
 8012846:	681a      	ldr	r2, [r3, #0]
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	3304      	adds	r3, #4
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	429a      	cmp	r2, r3
 8012850:	d008      	beq.n	8012864 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012854:	681a      	ldr	r2, [r3, #0]
 8012856:	683b      	ldr	r3, [r7, #0]
 8012858:	3304      	adds	r3, #4
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	429a      	cmp	r2, r3
 801285e:	d101      	bne.n	8012864 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012862:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012866:	8a9b      	ldrh	r3, [r3, #20]
 8012868:	8a3a      	ldrh	r2, [r7, #16]
 801286a:	429a      	cmp	r2, r3
 801286c:	d118      	bne.n	80128a0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012870:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012872:	2b00      	cmp	r3, #0
 8012874:	d005      	beq.n	8012882 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012878:	685a      	ldr	r2, [r3, #4]
 801287a:	4b43      	ldr	r3, [pc, #268]	; (8012988 <udp_input+0x218>)
 801287c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801287e:	429a      	cmp	r2, r3
 8012880:	d10e      	bne.n	80128a0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012882:	6a3b      	ldr	r3, [r7, #32]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d014      	beq.n	80128b2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801288a:	68da      	ldr	r2, [r3, #12]
 801288c:	6a3b      	ldr	r3, [r7, #32]
 801288e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012890:	4b3e      	ldr	r3, [pc, #248]	; (801298c <udp_input+0x21c>)
 8012892:	681a      	ldr	r2, [r3, #0]
 8012894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012896:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012898:	4a3c      	ldr	r2, [pc, #240]	; (801298c <udp_input+0x21c>)
 801289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801289c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801289e:	e008      	b.n	80128b2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80128a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80128a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a6:	68db      	ldr	r3, [r3, #12]
 80128a8:	627b      	str	r3, [r7, #36]	; 0x24
 80128aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d1a7      	bne.n	8012800 <udp_input+0x90>
 80128b0:	e000      	b.n	80128b4 <udp_input+0x144>
        break;
 80128b2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80128b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d101      	bne.n	80128be <udp_input+0x14e>
    pcb = uncon_pcb;
 80128ba:	69fb      	ldr	r3, [r7, #28]
 80128bc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80128be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d002      	beq.n	80128ca <udp_input+0x15a>
    for_us = 1;
 80128c4:	2301      	movs	r3, #1
 80128c6:	76fb      	strb	r3, [r7, #27]
 80128c8:	e00a      	b.n	80128e0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80128ca:	683b      	ldr	r3, [r7, #0]
 80128cc:	3304      	adds	r3, #4
 80128ce:	681a      	ldr	r2, [r3, #0]
 80128d0:	4b2d      	ldr	r3, [pc, #180]	; (8012988 <udp_input+0x218>)
 80128d2:	695b      	ldr	r3, [r3, #20]
 80128d4:	429a      	cmp	r2, r3
 80128d6:	bf0c      	ite	eq
 80128d8:	2301      	moveq	r3, #1
 80128da:	2300      	movne	r3, #0
 80128dc:	b2db      	uxtb	r3, r3
 80128de:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80128e0:	7efb      	ldrb	r3, [r7, #27]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d041      	beq.n	801296a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80128e6:	2108      	movs	r1, #8
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f7f9 f9cf 	bl	800bc8c <pbuf_remove_header>
 80128ee:	4603      	mov	r3, r0
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d00a      	beq.n	801290a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80128f4:	4b20      	ldr	r3, [pc, #128]	; (8012978 <udp_input+0x208>)
 80128f6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80128fa:	4925      	ldr	r1, [pc, #148]	; (8012990 <udp_input+0x220>)
 80128fc:	4820      	ldr	r0, [pc, #128]	; (8012980 <udp_input+0x210>)
 80128fe:	f002 fcab 	bl	8015258 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012902:	6878      	ldr	r0, [r7, #4]
 8012904:	f7f9 fa48 	bl	800bd98 <pbuf_free>
      goto end;
 8012908:	e032      	b.n	8012970 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801290c:	2b00      	cmp	r3, #0
 801290e:	d012      	beq.n	8012936 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012912:	699b      	ldr	r3, [r3, #24]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d00a      	beq.n	801292e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291a:	699c      	ldr	r4, [r3, #24]
 801291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291e:	69d8      	ldr	r0, [r3, #28]
 8012920:	8a3b      	ldrh	r3, [r7, #16]
 8012922:	9300      	str	r3, [sp, #0]
 8012924:	4b1b      	ldr	r3, [pc, #108]	; (8012994 <udp_input+0x224>)
 8012926:	687a      	ldr	r2, [r7, #4]
 8012928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801292a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801292c:	e021      	b.n	8012972 <udp_input+0x202>
        pbuf_free(p);
 801292e:	6878      	ldr	r0, [r7, #4]
 8012930:	f7f9 fa32 	bl	800bd98 <pbuf_free>
        goto end;
 8012934:	e01c      	b.n	8012970 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012936:	7cfb      	ldrb	r3, [r7, #19]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d112      	bne.n	8012962 <udp_input+0x1f2>
 801293c:	4b12      	ldr	r3, [pc, #72]	; (8012988 <udp_input+0x218>)
 801293e:	695b      	ldr	r3, [r3, #20]
 8012940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012944:	2be0      	cmp	r3, #224	; 0xe0
 8012946:	d00c      	beq.n	8012962 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012948:	4b0f      	ldr	r3, [pc, #60]	; (8012988 <udp_input+0x218>)
 801294a:	899b      	ldrh	r3, [r3, #12]
 801294c:	3308      	adds	r3, #8
 801294e:	b29b      	uxth	r3, r3
 8012950:	b21b      	sxth	r3, r3
 8012952:	4619      	mov	r1, r3
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f7f9 fa0c 	bl	800bd72 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801295a:	2103      	movs	r1, #3
 801295c:	6878      	ldr	r0, [r7, #4]
 801295e:	f001 f89b 	bl	8013a98 <icmp_dest_unreach>
      pbuf_free(p);
 8012962:	6878      	ldr	r0, [r7, #4]
 8012964:	f7f9 fa18 	bl	800bd98 <pbuf_free>
  return;
 8012968:	e003      	b.n	8012972 <udp_input+0x202>
    pbuf_free(p);
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f7f9 fa14 	bl	800bd98 <pbuf_free>
  return;
 8012970:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012972:	372c      	adds	r7, #44	; 0x2c
 8012974:	46bd      	mov	sp, r7
 8012976:	bd90      	pop	{r4, r7, pc}
 8012978:	08018780 	.word	0x08018780
 801297c:	08018824 	.word	0x08018824
 8012980:	080187d4 	.word	0x080187d4
 8012984:	0801883c 	.word	0x0801883c
 8012988:	20007ccc 	.word	0x20007ccc
 801298c:	2000b3f8 	.word	0x2000b3f8
 8012990:	08018858 	.word	0x08018858
 8012994:	20007cdc 	.word	0x20007cdc

08012998 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012998:	b480      	push	{r7}
 801299a:	b085      	sub	sp, #20
 801299c:	af00      	add	r7, sp, #0
 801299e:	6078      	str	r0, [r7, #4]
 80129a0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d01e      	beq.n	80129e6 <udp_netif_ip_addr_changed+0x4e>
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d01a      	beq.n	80129e6 <udp_netif_ip_addr_changed+0x4e>
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d017      	beq.n	80129e6 <udp_netif_ip_addr_changed+0x4e>
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d013      	beq.n	80129e6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80129be:	4b0d      	ldr	r3, [pc, #52]	; (80129f4 <udp_netif_ip_addr_changed+0x5c>)
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	60fb      	str	r3, [r7, #12]
 80129c4:	e00c      	b.n	80129e0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	681a      	ldr	r2, [r3, #0]
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d103      	bne.n	80129da <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	681a      	ldr	r2, [r3, #0]
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	68db      	ldr	r3, [r3, #12]
 80129de:	60fb      	str	r3, [r7, #12]
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d1ef      	bne.n	80129c6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80129e6:	bf00      	nop
 80129e8:	3714      	adds	r7, #20
 80129ea:	46bd      	mov	sp, r7
 80129ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f0:	4770      	bx	lr
 80129f2:	bf00      	nop
 80129f4:	2000b3f8 	.word	0x2000b3f8

080129f8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b082      	sub	sp, #8
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012a00:	4915      	ldr	r1, [pc, #84]	; (8012a58 <etharp_free_entry+0x60>)
 8012a02:	687a      	ldr	r2, [r7, #4]
 8012a04:	4613      	mov	r3, r2
 8012a06:	005b      	lsls	r3, r3, #1
 8012a08:	4413      	add	r3, r2
 8012a0a:	00db      	lsls	r3, r3, #3
 8012a0c:	440b      	add	r3, r1
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d013      	beq.n	8012a3c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012a14:	4910      	ldr	r1, [pc, #64]	; (8012a58 <etharp_free_entry+0x60>)
 8012a16:	687a      	ldr	r2, [r7, #4]
 8012a18:	4613      	mov	r3, r2
 8012a1a:	005b      	lsls	r3, r3, #1
 8012a1c:	4413      	add	r3, r2
 8012a1e:	00db      	lsls	r3, r3, #3
 8012a20:	440b      	add	r3, r1
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	4618      	mov	r0, r3
 8012a26:	f7f9 f9b7 	bl	800bd98 <pbuf_free>
    arp_table[i].q = NULL;
 8012a2a:	490b      	ldr	r1, [pc, #44]	; (8012a58 <etharp_free_entry+0x60>)
 8012a2c:	687a      	ldr	r2, [r7, #4]
 8012a2e:	4613      	mov	r3, r2
 8012a30:	005b      	lsls	r3, r3, #1
 8012a32:	4413      	add	r3, r2
 8012a34:	00db      	lsls	r3, r3, #3
 8012a36:	440b      	add	r3, r1
 8012a38:	2200      	movs	r2, #0
 8012a3a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8012a3c:	4906      	ldr	r1, [pc, #24]	; (8012a58 <etharp_free_entry+0x60>)
 8012a3e:	687a      	ldr	r2, [r7, #4]
 8012a40:	4613      	mov	r3, r2
 8012a42:	005b      	lsls	r3, r3, #1
 8012a44:	4413      	add	r3, r2
 8012a46:	00db      	lsls	r3, r3, #3
 8012a48:	440b      	add	r3, r1
 8012a4a:	3314      	adds	r3, #20
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8012a50:	bf00      	nop
 8012a52:	3708      	adds	r7, #8
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}
 8012a58:	2000452c 	.word	0x2000452c

08012a5c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b082      	sub	sp, #8
 8012a60:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012a62:	2300      	movs	r3, #0
 8012a64:	607b      	str	r3, [r7, #4]
 8012a66:	e096      	b.n	8012b96 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8012a68:	494f      	ldr	r1, [pc, #316]	; (8012ba8 <etharp_tmr+0x14c>)
 8012a6a:	687a      	ldr	r2, [r7, #4]
 8012a6c:	4613      	mov	r3, r2
 8012a6e:	005b      	lsls	r3, r3, #1
 8012a70:	4413      	add	r3, r2
 8012a72:	00db      	lsls	r3, r3, #3
 8012a74:	440b      	add	r3, r1
 8012a76:	3314      	adds	r3, #20
 8012a78:	781b      	ldrb	r3, [r3, #0]
 8012a7a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8012a7c:	78fb      	ldrb	r3, [r7, #3]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	f000 8086 	beq.w	8012b90 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8012a84:	4948      	ldr	r1, [pc, #288]	; (8012ba8 <etharp_tmr+0x14c>)
 8012a86:	687a      	ldr	r2, [r7, #4]
 8012a88:	4613      	mov	r3, r2
 8012a8a:	005b      	lsls	r3, r3, #1
 8012a8c:	4413      	add	r3, r2
 8012a8e:	00db      	lsls	r3, r3, #3
 8012a90:	440b      	add	r3, r1
 8012a92:	3312      	adds	r3, #18
 8012a94:	881b      	ldrh	r3, [r3, #0]
 8012a96:	3301      	adds	r3, #1
 8012a98:	b298      	uxth	r0, r3
 8012a9a:	4943      	ldr	r1, [pc, #268]	; (8012ba8 <etharp_tmr+0x14c>)
 8012a9c:	687a      	ldr	r2, [r7, #4]
 8012a9e:	4613      	mov	r3, r2
 8012aa0:	005b      	lsls	r3, r3, #1
 8012aa2:	4413      	add	r3, r2
 8012aa4:	00db      	lsls	r3, r3, #3
 8012aa6:	440b      	add	r3, r1
 8012aa8:	3312      	adds	r3, #18
 8012aaa:	4602      	mov	r2, r0
 8012aac:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012aae:	493e      	ldr	r1, [pc, #248]	; (8012ba8 <etharp_tmr+0x14c>)
 8012ab0:	687a      	ldr	r2, [r7, #4]
 8012ab2:	4613      	mov	r3, r2
 8012ab4:	005b      	lsls	r3, r3, #1
 8012ab6:	4413      	add	r3, r2
 8012ab8:	00db      	lsls	r3, r3, #3
 8012aba:	440b      	add	r3, r1
 8012abc:	3312      	adds	r3, #18
 8012abe:	881b      	ldrh	r3, [r3, #0]
 8012ac0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012ac4:	d215      	bcs.n	8012af2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012ac6:	4938      	ldr	r1, [pc, #224]	; (8012ba8 <etharp_tmr+0x14c>)
 8012ac8:	687a      	ldr	r2, [r7, #4]
 8012aca:	4613      	mov	r3, r2
 8012acc:	005b      	lsls	r3, r3, #1
 8012ace:	4413      	add	r3, r2
 8012ad0:	00db      	lsls	r3, r3, #3
 8012ad2:	440b      	add	r3, r1
 8012ad4:	3314      	adds	r3, #20
 8012ad6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012ad8:	2b01      	cmp	r3, #1
 8012ada:	d10e      	bne.n	8012afa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8012adc:	4932      	ldr	r1, [pc, #200]	; (8012ba8 <etharp_tmr+0x14c>)
 8012ade:	687a      	ldr	r2, [r7, #4]
 8012ae0:	4613      	mov	r3, r2
 8012ae2:	005b      	lsls	r3, r3, #1
 8012ae4:	4413      	add	r3, r2
 8012ae6:	00db      	lsls	r3, r3, #3
 8012ae8:	440b      	add	r3, r1
 8012aea:	3312      	adds	r3, #18
 8012aec:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012aee:	2b04      	cmp	r3, #4
 8012af0:	d903      	bls.n	8012afa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012af2:	6878      	ldr	r0, [r7, #4]
 8012af4:	f7ff ff80 	bl	80129f8 <etharp_free_entry>
 8012af8:	e04a      	b.n	8012b90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8012afa:	492b      	ldr	r1, [pc, #172]	; (8012ba8 <etharp_tmr+0x14c>)
 8012afc:	687a      	ldr	r2, [r7, #4]
 8012afe:	4613      	mov	r3, r2
 8012b00:	005b      	lsls	r3, r3, #1
 8012b02:	4413      	add	r3, r2
 8012b04:	00db      	lsls	r3, r3, #3
 8012b06:	440b      	add	r3, r1
 8012b08:	3314      	adds	r3, #20
 8012b0a:	781b      	ldrb	r3, [r3, #0]
 8012b0c:	2b03      	cmp	r3, #3
 8012b0e:	d10a      	bne.n	8012b26 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012b10:	4925      	ldr	r1, [pc, #148]	; (8012ba8 <etharp_tmr+0x14c>)
 8012b12:	687a      	ldr	r2, [r7, #4]
 8012b14:	4613      	mov	r3, r2
 8012b16:	005b      	lsls	r3, r3, #1
 8012b18:	4413      	add	r3, r2
 8012b1a:	00db      	lsls	r3, r3, #3
 8012b1c:	440b      	add	r3, r1
 8012b1e:	3314      	adds	r3, #20
 8012b20:	2204      	movs	r2, #4
 8012b22:	701a      	strb	r2, [r3, #0]
 8012b24:	e034      	b.n	8012b90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012b26:	4920      	ldr	r1, [pc, #128]	; (8012ba8 <etharp_tmr+0x14c>)
 8012b28:	687a      	ldr	r2, [r7, #4]
 8012b2a:	4613      	mov	r3, r2
 8012b2c:	005b      	lsls	r3, r3, #1
 8012b2e:	4413      	add	r3, r2
 8012b30:	00db      	lsls	r3, r3, #3
 8012b32:	440b      	add	r3, r1
 8012b34:	3314      	adds	r3, #20
 8012b36:	781b      	ldrb	r3, [r3, #0]
 8012b38:	2b04      	cmp	r3, #4
 8012b3a:	d10a      	bne.n	8012b52 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8012b3c:	491a      	ldr	r1, [pc, #104]	; (8012ba8 <etharp_tmr+0x14c>)
 8012b3e:	687a      	ldr	r2, [r7, #4]
 8012b40:	4613      	mov	r3, r2
 8012b42:	005b      	lsls	r3, r3, #1
 8012b44:	4413      	add	r3, r2
 8012b46:	00db      	lsls	r3, r3, #3
 8012b48:	440b      	add	r3, r1
 8012b4a:	3314      	adds	r3, #20
 8012b4c:	2202      	movs	r2, #2
 8012b4e:	701a      	strb	r2, [r3, #0]
 8012b50:	e01e      	b.n	8012b90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012b52:	4915      	ldr	r1, [pc, #84]	; (8012ba8 <etharp_tmr+0x14c>)
 8012b54:	687a      	ldr	r2, [r7, #4]
 8012b56:	4613      	mov	r3, r2
 8012b58:	005b      	lsls	r3, r3, #1
 8012b5a:	4413      	add	r3, r2
 8012b5c:	00db      	lsls	r3, r3, #3
 8012b5e:	440b      	add	r3, r1
 8012b60:	3314      	adds	r3, #20
 8012b62:	781b      	ldrb	r3, [r3, #0]
 8012b64:	2b01      	cmp	r3, #1
 8012b66:	d113      	bne.n	8012b90 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8012b68:	490f      	ldr	r1, [pc, #60]	; (8012ba8 <etharp_tmr+0x14c>)
 8012b6a:	687a      	ldr	r2, [r7, #4]
 8012b6c:	4613      	mov	r3, r2
 8012b6e:	005b      	lsls	r3, r3, #1
 8012b70:	4413      	add	r3, r2
 8012b72:	00db      	lsls	r3, r3, #3
 8012b74:	440b      	add	r3, r1
 8012b76:	3308      	adds	r3, #8
 8012b78:	6818      	ldr	r0, [r3, #0]
 8012b7a:	687a      	ldr	r2, [r7, #4]
 8012b7c:	4613      	mov	r3, r2
 8012b7e:	005b      	lsls	r3, r3, #1
 8012b80:	4413      	add	r3, r2
 8012b82:	00db      	lsls	r3, r3, #3
 8012b84:	4a08      	ldr	r2, [pc, #32]	; (8012ba8 <etharp_tmr+0x14c>)
 8012b86:	4413      	add	r3, r2
 8012b88:	3304      	adds	r3, #4
 8012b8a:	4619      	mov	r1, r3
 8012b8c:	f000 fe6e 	bl	801386c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	3301      	adds	r3, #1
 8012b94:	607b      	str	r3, [r7, #4]
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	2b09      	cmp	r3, #9
 8012b9a:	f77f af65 	ble.w	8012a68 <etharp_tmr+0xc>
      }
    }
  }
}
 8012b9e:	bf00      	nop
 8012ba0:	3708      	adds	r7, #8
 8012ba2:	46bd      	mov	sp, r7
 8012ba4:	bd80      	pop	{r7, pc}
 8012ba6:	bf00      	nop
 8012ba8:	2000452c 	.word	0x2000452c

08012bac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b08a      	sub	sp, #40	; 0x28
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	60f8      	str	r0, [r7, #12]
 8012bb4:	460b      	mov	r3, r1
 8012bb6:	607a      	str	r2, [r7, #4]
 8012bb8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8012bba:	230a      	movs	r3, #10
 8012bbc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012bbe:	230a      	movs	r3, #10
 8012bc0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012bc2:	230a      	movs	r3, #10
 8012bc4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8012bca:	230a      	movs	r3, #10
 8012bcc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8012bce:	2300      	movs	r3, #0
 8012bd0:	83bb      	strh	r3, [r7, #28]
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	837b      	strh	r3, [r7, #26]
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012bda:	2300      	movs	r3, #0
 8012bdc:	843b      	strh	r3, [r7, #32]
 8012bde:	e0ae      	b.n	8012d3e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012be0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012be4:	49a6      	ldr	r1, [pc, #664]	; (8012e80 <etharp_find_entry+0x2d4>)
 8012be6:	4613      	mov	r3, r2
 8012be8:	005b      	lsls	r3, r3, #1
 8012bea:	4413      	add	r3, r2
 8012bec:	00db      	lsls	r3, r3, #3
 8012bee:	440b      	add	r3, r1
 8012bf0:	3314      	adds	r3, #20
 8012bf2:	781b      	ldrb	r3, [r3, #0]
 8012bf4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012bf6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012bfa:	2b0a      	cmp	r3, #10
 8012bfc:	d105      	bne.n	8012c0a <etharp_find_entry+0x5e>
 8012bfe:	7dfb      	ldrb	r3, [r7, #23]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d102      	bne.n	8012c0a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012c04:	8c3b      	ldrh	r3, [r7, #32]
 8012c06:	847b      	strh	r3, [r7, #34]	; 0x22
 8012c08:	e095      	b.n	8012d36 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8012c0a:	7dfb      	ldrb	r3, [r7, #23]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	f000 8092 	beq.w	8012d36 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012c12:	7dfb      	ldrb	r3, [r7, #23]
 8012c14:	2b01      	cmp	r3, #1
 8012c16:	d009      	beq.n	8012c2c <etharp_find_entry+0x80>
 8012c18:	7dfb      	ldrb	r3, [r7, #23]
 8012c1a:	2b01      	cmp	r3, #1
 8012c1c:	d806      	bhi.n	8012c2c <etharp_find_entry+0x80>
 8012c1e:	4b99      	ldr	r3, [pc, #612]	; (8012e84 <etharp_find_entry+0x2d8>)
 8012c20:	f44f 7292 	mov.w	r2, #292	; 0x124
 8012c24:	4998      	ldr	r1, [pc, #608]	; (8012e88 <etharp_find_entry+0x2dc>)
 8012c26:	4899      	ldr	r0, [pc, #612]	; (8012e8c <etharp_find_entry+0x2e0>)
 8012c28:	f002 fb16 	bl	8015258 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d020      	beq.n	8012c74 <etharp_find_entry+0xc8>
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	6819      	ldr	r1, [r3, #0]
 8012c36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c3a:	4891      	ldr	r0, [pc, #580]	; (8012e80 <etharp_find_entry+0x2d4>)
 8012c3c:	4613      	mov	r3, r2
 8012c3e:	005b      	lsls	r3, r3, #1
 8012c40:	4413      	add	r3, r2
 8012c42:	00db      	lsls	r3, r3, #3
 8012c44:	4403      	add	r3, r0
 8012c46:	3304      	adds	r3, #4
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	4299      	cmp	r1, r3
 8012c4c:	d112      	bne.n	8012c74 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d00c      	beq.n	8012c6e <etharp_find_entry+0xc2>
 8012c54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c58:	4989      	ldr	r1, [pc, #548]	; (8012e80 <etharp_find_entry+0x2d4>)
 8012c5a:	4613      	mov	r3, r2
 8012c5c:	005b      	lsls	r3, r3, #1
 8012c5e:	4413      	add	r3, r2
 8012c60:	00db      	lsls	r3, r3, #3
 8012c62:	440b      	add	r3, r1
 8012c64:	3308      	adds	r3, #8
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	687a      	ldr	r2, [r7, #4]
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d102      	bne.n	8012c74 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8012c6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012c72:	e100      	b.n	8012e76 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8012c74:	7dfb      	ldrb	r3, [r7, #23]
 8012c76:	2b01      	cmp	r3, #1
 8012c78:	d140      	bne.n	8012cfc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8012c7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c7e:	4980      	ldr	r1, [pc, #512]	; (8012e80 <etharp_find_entry+0x2d4>)
 8012c80:	4613      	mov	r3, r2
 8012c82:	005b      	lsls	r3, r3, #1
 8012c84:	4413      	add	r3, r2
 8012c86:	00db      	lsls	r3, r3, #3
 8012c88:	440b      	add	r3, r1
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d01a      	beq.n	8012cc6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012c90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012c94:	497a      	ldr	r1, [pc, #488]	; (8012e80 <etharp_find_entry+0x2d4>)
 8012c96:	4613      	mov	r3, r2
 8012c98:	005b      	lsls	r3, r3, #1
 8012c9a:	4413      	add	r3, r2
 8012c9c:	00db      	lsls	r3, r3, #3
 8012c9e:	440b      	add	r3, r1
 8012ca0:	3312      	adds	r3, #18
 8012ca2:	881b      	ldrh	r3, [r3, #0]
 8012ca4:	8bba      	ldrh	r2, [r7, #28]
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d845      	bhi.n	8012d36 <etharp_find_entry+0x18a>
            old_queue = i;
 8012caa:	8c3b      	ldrh	r3, [r7, #32]
 8012cac:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012cae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cb2:	4973      	ldr	r1, [pc, #460]	; (8012e80 <etharp_find_entry+0x2d4>)
 8012cb4:	4613      	mov	r3, r2
 8012cb6:	005b      	lsls	r3, r3, #1
 8012cb8:	4413      	add	r3, r2
 8012cba:	00db      	lsls	r3, r3, #3
 8012cbc:	440b      	add	r3, r1
 8012cbe:	3312      	adds	r3, #18
 8012cc0:	881b      	ldrh	r3, [r3, #0]
 8012cc2:	83bb      	strh	r3, [r7, #28]
 8012cc4:	e037      	b.n	8012d36 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012cc6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012cca:	496d      	ldr	r1, [pc, #436]	; (8012e80 <etharp_find_entry+0x2d4>)
 8012ccc:	4613      	mov	r3, r2
 8012cce:	005b      	lsls	r3, r3, #1
 8012cd0:	4413      	add	r3, r2
 8012cd2:	00db      	lsls	r3, r3, #3
 8012cd4:	440b      	add	r3, r1
 8012cd6:	3312      	adds	r3, #18
 8012cd8:	881b      	ldrh	r3, [r3, #0]
 8012cda:	8b7a      	ldrh	r2, [r7, #26]
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	d82a      	bhi.n	8012d36 <etharp_find_entry+0x18a>
            old_pending = i;
 8012ce0:	8c3b      	ldrh	r3, [r7, #32]
 8012ce2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012ce4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ce8:	4965      	ldr	r1, [pc, #404]	; (8012e80 <etharp_find_entry+0x2d4>)
 8012cea:	4613      	mov	r3, r2
 8012cec:	005b      	lsls	r3, r3, #1
 8012cee:	4413      	add	r3, r2
 8012cf0:	00db      	lsls	r3, r3, #3
 8012cf2:	440b      	add	r3, r1
 8012cf4:	3312      	adds	r3, #18
 8012cf6:	881b      	ldrh	r3, [r3, #0]
 8012cf8:	837b      	strh	r3, [r7, #26]
 8012cfa:	e01c      	b.n	8012d36 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012cfc:	7dfb      	ldrb	r3, [r7, #23]
 8012cfe:	2b01      	cmp	r3, #1
 8012d00:	d919      	bls.n	8012d36 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012d02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d06:	495e      	ldr	r1, [pc, #376]	; (8012e80 <etharp_find_entry+0x2d4>)
 8012d08:	4613      	mov	r3, r2
 8012d0a:	005b      	lsls	r3, r3, #1
 8012d0c:	4413      	add	r3, r2
 8012d0e:	00db      	lsls	r3, r3, #3
 8012d10:	440b      	add	r3, r1
 8012d12:	3312      	adds	r3, #18
 8012d14:	881b      	ldrh	r3, [r3, #0]
 8012d16:	8b3a      	ldrh	r2, [r7, #24]
 8012d18:	429a      	cmp	r2, r3
 8012d1a:	d80c      	bhi.n	8012d36 <etharp_find_entry+0x18a>
            old_stable = i;
 8012d1c:	8c3b      	ldrh	r3, [r7, #32]
 8012d1e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012d20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d24:	4956      	ldr	r1, [pc, #344]	; (8012e80 <etharp_find_entry+0x2d4>)
 8012d26:	4613      	mov	r3, r2
 8012d28:	005b      	lsls	r3, r3, #1
 8012d2a:	4413      	add	r3, r2
 8012d2c:	00db      	lsls	r3, r3, #3
 8012d2e:	440b      	add	r3, r1
 8012d30:	3312      	adds	r3, #18
 8012d32:	881b      	ldrh	r3, [r3, #0]
 8012d34:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012d36:	8c3b      	ldrh	r3, [r7, #32]
 8012d38:	3301      	adds	r3, #1
 8012d3a:	b29b      	uxth	r3, r3
 8012d3c:	843b      	strh	r3, [r7, #32]
 8012d3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012d42:	2b09      	cmp	r3, #9
 8012d44:	f77f af4c 	ble.w	8012be0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012d48:	7afb      	ldrb	r3, [r7, #11]
 8012d4a:	f003 0302 	and.w	r3, r3, #2
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d108      	bne.n	8012d64 <etharp_find_entry+0x1b8>
 8012d52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012d56:	2b0a      	cmp	r3, #10
 8012d58:	d107      	bne.n	8012d6a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012d5a:	7afb      	ldrb	r3, [r7, #11]
 8012d5c:	f003 0301 	and.w	r3, r3, #1
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d102      	bne.n	8012d6a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012d68:	e085      	b.n	8012e76 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012d6a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012d6e:	2b09      	cmp	r3, #9
 8012d70:	dc02      	bgt.n	8012d78 <etharp_find_entry+0x1cc>
    i = empty;
 8012d72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d74:	843b      	strh	r3, [r7, #32]
 8012d76:	e039      	b.n	8012dec <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012d78:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012d7c:	2b09      	cmp	r3, #9
 8012d7e:	dc14      	bgt.n	8012daa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012d80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d82:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012d84:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012d88:	493d      	ldr	r1, [pc, #244]	; (8012e80 <etharp_find_entry+0x2d4>)
 8012d8a:	4613      	mov	r3, r2
 8012d8c:	005b      	lsls	r3, r3, #1
 8012d8e:	4413      	add	r3, r2
 8012d90:	00db      	lsls	r3, r3, #3
 8012d92:	440b      	add	r3, r1
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d018      	beq.n	8012dcc <etharp_find_entry+0x220>
 8012d9a:	4b3a      	ldr	r3, [pc, #232]	; (8012e84 <etharp_find_entry+0x2d8>)
 8012d9c:	f240 126d 	movw	r2, #365	; 0x16d
 8012da0:	493b      	ldr	r1, [pc, #236]	; (8012e90 <etharp_find_entry+0x2e4>)
 8012da2:	483a      	ldr	r0, [pc, #232]	; (8012e8c <etharp_find_entry+0x2e0>)
 8012da4:	f002 fa58 	bl	8015258 <iprintf>
 8012da8:	e010      	b.n	8012dcc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012daa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012dae:	2b09      	cmp	r3, #9
 8012db0:	dc02      	bgt.n	8012db8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012db2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012db4:	843b      	strh	r3, [r7, #32]
 8012db6:	e009      	b.n	8012dcc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012db8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012dbc:	2b09      	cmp	r3, #9
 8012dbe:	dc02      	bgt.n	8012dc6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012dc0:	8bfb      	ldrh	r3, [r7, #30]
 8012dc2:	843b      	strh	r3, [r7, #32]
 8012dc4:	e002      	b.n	8012dcc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012dca:	e054      	b.n	8012e76 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012dcc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012dd0:	2b09      	cmp	r3, #9
 8012dd2:	dd06      	ble.n	8012de2 <etharp_find_entry+0x236>
 8012dd4:	4b2b      	ldr	r3, [pc, #172]	; (8012e84 <etharp_find_entry+0x2d8>)
 8012dd6:	f240 127f 	movw	r2, #383	; 0x17f
 8012dda:	492e      	ldr	r1, [pc, #184]	; (8012e94 <etharp_find_entry+0x2e8>)
 8012ddc:	482b      	ldr	r0, [pc, #172]	; (8012e8c <etharp_find_entry+0x2e0>)
 8012dde:	f002 fa3b 	bl	8015258 <iprintf>
    etharp_free_entry(i);
 8012de2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012de6:	4618      	mov	r0, r3
 8012de8:	f7ff fe06 	bl	80129f8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012dec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012df0:	2b09      	cmp	r3, #9
 8012df2:	dd06      	ble.n	8012e02 <etharp_find_entry+0x256>
 8012df4:	4b23      	ldr	r3, [pc, #140]	; (8012e84 <etharp_find_entry+0x2d8>)
 8012df6:	f240 1283 	movw	r2, #387	; 0x183
 8012dfa:	4926      	ldr	r1, [pc, #152]	; (8012e94 <etharp_find_entry+0x2e8>)
 8012dfc:	4823      	ldr	r0, [pc, #140]	; (8012e8c <etharp_find_entry+0x2e0>)
 8012dfe:	f002 fa2b 	bl	8015258 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012e02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e06:	491e      	ldr	r1, [pc, #120]	; (8012e80 <etharp_find_entry+0x2d4>)
 8012e08:	4613      	mov	r3, r2
 8012e0a:	005b      	lsls	r3, r3, #1
 8012e0c:	4413      	add	r3, r2
 8012e0e:	00db      	lsls	r3, r3, #3
 8012e10:	440b      	add	r3, r1
 8012e12:	3314      	adds	r3, #20
 8012e14:	781b      	ldrb	r3, [r3, #0]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d006      	beq.n	8012e28 <etharp_find_entry+0x27c>
 8012e1a:	4b1a      	ldr	r3, [pc, #104]	; (8012e84 <etharp_find_entry+0x2d8>)
 8012e1c:	f240 1285 	movw	r2, #389	; 0x185
 8012e20:	491d      	ldr	r1, [pc, #116]	; (8012e98 <etharp_find_entry+0x2ec>)
 8012e22:	481a      	ldr	r0, [pc, #104]	; (8012e8c <etharp_find_entry+0x2e0>)
 8012e24:	f002 fa18 	bl	8015258 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d00b      	beq.n	8012e46 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012e2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	6819      	ldr	r1, [r3, #0]
 8012e36:	4812      	ldr	r0, [pc, #72]	; (8012e80 <etharp_find_entry+0x2d4>)
 8012e38:	4613      	mov	r3, r2
 8012e3a:	005b      	lsls	r3, r3, #1
 8012e3c:	4413      	add	r3, r2
 8012e3e:	00db      	lsls	r3, r3, #3
 8012e40:	4403      	add	r3, r0
 8012e42:	3304      	adds	r3, #4
 8012e44:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012e46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e4a:	490d      	ldr	r1, [pc, #52]	; (8012e80 <etharp_find_entry+0x2d4>)
 8012e4c:	4613      	mov	r3, r2
 8012e4e:	005b      	lsls	r3, r3, #1
 8012e50:	4413      	add	r3, r2
 8012e52:	00db      	lsls	r3, r3, #3
 8012e54:	440b      	add	r3, r1
 8012e56:	3312      	adds	r3, #18
 8012e58:	2200      	movs	r2, #0
 8012e5a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012e5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012e60:	4907      	ldr	r1, [pc, #28]	; (8012e80 <etharp_find_entry+0x2d4>)
 8012e62:	4613      	mov	r3, r2
 8012e64:	005b      	lsls	r3, r3, #1
 8012e66:	4413      	add	r3, r2
 8012e68:	00db      	lsls	r3, r3, #3
 8012e6a:	440b      	add	r3, r1
 8012e6c:	3308      	adds	r3, #8
 8012e6e:	687a      	ldr	r2, [r7, #4]
 8012e70:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012e72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3728      	adds	r7, #40	; 0x28
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}
 8012e7e:	bf00      	nop
 8012e80:	2000452c 	.word	0x2000452c
 8012e84:	08018ae4 	.word	0x08018ae4
 8012e88:	08018b1c 	.word	0x08018b1c
 8012e8c:	08018b5c 	.word	0x08018b5c
 8012e90:	08018b84 	.word	0x08018b84
 8012e94:	08018b9c 	.word	0x08018b9c
 8012e98:	08018bb0 	.word	0x08018bb0

08012e9c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b088      	sub	sp, #32
 8012ea0:	af02      	add	r7, sp, #8
 8012ea2:	60f8      	str	r0, [r7, #12]
 8012ea4:	60b9      	str	r1, [r7, #8]
 8012ea6:	607a      	str	r2, [r7, #4]
 8012ea8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012eb0:	2b06      	cmp	r3, #6
 8012eb2:	d006      	beq.n	8012ec2 <etharp_update_arp_entry+0x26>
 8012eb4:	4b48      	ldr	r3, [pc, #288]	; (8012fd8 <etharp_update_arp_entry+0x13c>)
 8012eb6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012eba:	4948      	ldr	r1, [pc, #288]	; (8012fdc <etharp_update_arp_entry+0x140>)
 8012ebc:	4848      	ldr	r0, [pc, #288]	; (8012fe0 <etharp_update_arp_entry+0x144>)
 8012ebe:	f002 f9cb 	bl	8015258 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012ec2:	68bb      	ldr	r3, [r7, #8]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d012      	beq.n	8012eee <etharp_update_arp_entry+0x52>
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d00e      	beq.n	8012eee <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	68f9      	ldr	r1, [r7, #12]
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f001 f8fc 	bl	80140d4 <ip4_addr_isbroadcast_u32>
 8012edc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d105      	bne.n	8012eee <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012eea:	2be0      	cmp	r3, #224	; 0xe0
 8012eec:	d102      	bne.n	8012ef4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012eee:	f06f 030f 	mvn.w	r3, #15
 8012ef2:	e06c      	b.n	8012fce <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012ef4:	78fb      	ldrb	r3, [r7, #3]
 8012ef6:	68fa      	ldr	r2, [r7, #12]
 8012ef8:	4619      	mov	r1, r3
 8012efa:	68b8      	ldr	r0, [r7, #8]
 8012efc:	f7ff fe56 	bl	8012bac <etharp_find_entry>
 8012f00:	4603      	mov	r3, r0
 8012f02:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012f04:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	da02      	bge.n	8012f12 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012f0c:	8afb      	ldrh	r3, [r7, #22]
 8012f0e:	b25b      	sxtb	r3, r3
 8012f10:	e05d      	b.n	8012fce <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012f12:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f16:	4933      	ldr	r1, [pc, #204]	; (8012fe4 <etharp_update_arp_entry+0x148>)
 8012f18:	4613      	mov	r3, r2
 8012f1a:	005b      	lsls	r3, r3, #1
 8012f1c:	4413      	add	r3, r2
 8012f1e:	00db      	lsls	r3, r3, #3
 8012f20:	440b      	add	r3, r1
 8012f22:	3314      	adds	r3, #20
 8012f24:	2202      	movs	r2, #2
 8012f26:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012f28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f2c:	492d      	ldr	r1, [pc, #180]	; (8012fe4 <etharp_update_arp_entry+0x148>)
 8012f2e:	4613      	mov	r3, r2
 8012f30:	005b      	lsls	r3, r3, #1
 8012f32:	4413      	add	r3, r2
 8012f34:	00db      	lsls	r3, r3, #3
 8012f36:	440b      	add	r3, r1
 8012f38:	3308      	adds	r3, #8
 8012f3a:	68fa      	ldr	r2, [r7, #12]
 8012f3c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012f3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f42:	4613      	mov	r3, r2
 8012f44:	005b      	lsls	r3, r3, #1
 8012f46:	4413      	add	r3, r2
 8012f48:	00db      	lsls	r3, r3, #3
 8012f4a:	3308      	adds	r3, #8
 8012f4c:	4a25      	ldr	r2, [pc, #148]	; (8012fe4 <etharp_update_arp_entry+0x148>)
 8012f4e:	4413      	add	r3, r2
 8012f50:	3304      	adds	r3, #4
 8012f52:	2206      	movs	r2, #6
 8012f54:	6879      	ldr	r1, [r7, #4]
 8012f56:	4618      	mov	r0, r3
 8012f58:	f002 f951 	bl	80151fe <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012f5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f60:	4920      	ldr	r1, [pc, #128]	; (8012fe4 <etharp_update_arp_entry+0x148>)
 8012f62:	4613      	mov	r3, r2
 8012f64:	005b      	lsls	r3, r3, #1
 8012f66:	4413      	add	r3, r2
 8012f68:	00db      	lsls	r3, r3, #3
 8012f6a:	440b      	add	r3, r1
 8012f6c:	3312      	adds	r3, #18
 8012f6e:	2200      	movs	r2, #0
 8012f70:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012f72:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f76:	491b      	ldr	r1, [pc, #108]	; (8012fe4 <etharp_update_arp_entry+0x148>)
 8012f78:	4613      	mov	r3, r2
 8012f7a:	005b      	lsls	r3, r3, #1
 8012f7c:	4413      	add	r3, r2
 8012f7e:	00db      	lsls	r3, r3, #3
 8012f80:	440b      	add	r3, r1
 8012f82:	681b      	ldr	r3, [r3, #0]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d021      	beq.n	8012fcc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012f88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012f8c:	4915      	ldr	r1, [pc, #84]	; (8012fe4 <etharp_update_arp_entry+0x148>)
 8012f8e:	4613      	mov	r3, r2
 8012f90:	005b      	lsls	r3, r3, #1
 8012f92:	4413      	add	r3, r2
 8012f94:	00db      	lsls	r3, r3, #3
 8012f96:	440b      	add	r3, r1
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012f9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012fa0:	4910      	ldr	r1, [pc, #64]	; (8012fe4 <etharp_update_arp_entry+0x148>)
 8012fa2:	4613      	mov	r3, r2
 8012fa4:	005b      	lsls	r3, r3, #1
 8012fa6:	4413      	add	r3, r2
 8012fa8:	00db      	lsls	r3, r3, #3
 8012faa:	440b      	add	r3, r1
 8012fac:	2200      	movs	r2, #0
 8012fae:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012fb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012fba:	9300      	str	r3, [sp, #0]
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	6939      	ldr	r1, [r7, #16]
 8012fc0:	68f8      	ldr	r0, [r7, #12]
 8012fc2:	f001 ff8b 	bl	8014edc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012fc6:	6938      	ldr	r0, [r7, #16]
 8012fc8:	f7f8 fee6 	bl	800bd98 <pbuf_free>
  }
  return ERR_OK;
 8012fcc:	2300      	movs	r3, #0
}
 8012fce:	4618      	mov	r0, r3
 8012fd0:	3718      	adds	r7, #24
 8012fd2:	46bd      	mov	sp, r7
 8012fd4:	bd80      	pop	{r7, pc}
 8012fd6:	bf00      	nop
 8012fd8:	08018ae4 	.word	0x08018ae4
 8012fdc:	08018bdc 	.word	0x08018bdc
 8012fe0:	08018b5c 	.word	0x08018b5c
 8012fe4:	2000452c 	.word	0x2000452c

08012fe8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b084      	sub	sp, #16
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	60fb      	str	r3, [r7, #12]
 8012ff4:	e01e      	b.n	8013034 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012ff6:	4913      	ldr	r1, [pc, #76]	; (8013044 <etharp_cleanup_netif+0x5c>)
 8012ff8:	68fa      	ldr	r2, [r7, #12]
 8012ffa:	4613      	mov	r3, r2
 8012ffc:	005b      	lsls	r3, r3, #1
 8012ffe:	4413      	add	r3, r2
 8013000:	00db      	lsls	r3, r3, #3
 8013002:	440b      	add	r3, r1
 8013004:	3314      	adds	r3, #20
 8013006:	781b      	ldrb	r3, [r3, #0]
 8013008:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801300a:	7afb      	ldrb	r3, [r7, #11]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d00e      	beq.n	801302e <etharp_cleanup_netif+0x46>
 8013010:	490c      	ldr	r1, [pc, #48]	; (8013044 <etharp_cleanup_netif+0x5c>)
 8013012:	68fa      	ldr	r2, [r7, #12]
 8013014:	4613      	mov	r3, r2
 8013016:	005b      	lsls	r3, r3, #1
 8013018:	4413      	add	r3, r2
 801301a:	00db      	lsls	r3, r3, #3
 801301c:	440b      	add	r3, r1
 801301e:	3308      	adds	r3, #8
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	687a      	ldr	r2, [r7, #4]
 8013024:	429a      	cmp	r2, r3
 8013026:	d102      	bne.n	801302e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013028:	68f8      	ldr	r0, [r7, #12]
 801302a:	f7ff fce5 	bl	80129f8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	3301      	adds	r3, #1
 8013032:	60fb      	str	r3, [r7, #12]
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	2b09      	cmp	r3, #9
 8013038:	dddd      	ble.n	8012ff6 <etharp_cleanup_netif+0xe>
    }
  }
}
 801303a:	bf00      	nop
 801303c:	3710      	adds	r7, #16
 801303e:	46bd      	mov	sp, r7
 8013040:	bd80      	pop	{r7, pc}
 8013042:	bf00      	nop
 8013044:	2000452c 	.word	0x2000452c

08013048 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013048:	b5b0      	push	{r4, r5, r7, lr}
 801304a:	b08a      	sub	sp, #40	; 0x28
 801304c:	af04      	add	r7, sp, #16
 801304e:	6078      	str	r0, [r7, #4]
 8013050:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013052:	683b      	ldr	r3, [r7, #0]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d107      	bne.n	8013068 <etharp_input+0x20>
 8013058:	4b3d      	ldr	r3, [pc, #244]	; (8013150 <etharp_input+0x108>)
 801305a:	f240 228a 	movw	r2, #650	; 0x28a
 801305e:	493d      	ldr	r1, [pc, #244]	; (8013154 <etharp_input+0x10c>)
 8013060:	483d      	ldr	r0, [pc, #244]	; (8013158 <etharp_input+0x110>)
 8013062:	f002 f8f9 	bl	8015258 <iprintf>
 8013066:	e06f      	b.n	8013148 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	685b      	ldr	r3, [r3, #4]
 801306c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	881b      	ldrh	r3, [r3, #0]
 8013072:	b29b      	uxth	r3, r3
 8013074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013078:	d10c      	bne.n	8013094 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801307a:	693b      	ldr	r3, [r7, #16]
 801307c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801307e:	2b06      	cmp	r3, #6
 8013080:	d108      	bne.n	8013094 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013082:	693b      	ldr	r3, [r7, #16]
 8013084:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013086:	2b04      	cmp	r3, #4
 8013088:	d104      	bne.n	8013094 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801308a:	693b      	ldr	r3, [r7, #16]
 801308c:	885b      	ldrh	r3, [r3, #2]
 801308e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013090:	2b08      	cmp	r3, #8
 8013092:	d003      	beq.n	801309c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013094:	6878      	ldr	r0, [r7, #4]
 8013096:	f7f8 fe7f 	bl	800bd98 <pbuf_free>
    return;
 801309a:	e055      	b.n	8013148 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801309c:	693b      	ldr	r3, [r7, #16]
 801309e:	330e      	adds	r3, #14
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80130a4:	693b      	ldr	r3, [r7, #16]
 80130a6:	3318      	adds	r3, #24
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	3304      	adds	r3, #4
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d102      	bne.n	80130bc <etharp_input+0x74>
    for_us = 0;
 80130b6:	2300      	movs	r3, #0
 80130b8:	75fb      	strb	r3, [r7, #23]
 80130ba:	e009      	b.n	80130d0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80130bc:	68ba      	ldr	r2, [r7, #8]
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	3304      	adds	r3, #4
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	429a      	cmp	r2, r3
 80130c6:	bf0c      	ite	eq
 80130c8:	2301      	moveq	r3, #1
 80130ca:	2300      	movne	r3, #0
 80130cc:	b2db      	uxtb	r3, r3
 80130ce:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80130d0:	693b      	ldr	r3, [r7, #16]
 80130d2:	f103 0208 	add.w	r2, r3, #8
 80130d6:	7dfb      	ldrb	r3, [r7, #23]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d001      	beq.n	80130e0 <etharp_input+0x98>
 80130dc:	2301      	movs	r3, #1
 80130de:	e000      	b.n	80130e2 <etharp_input+0x9a>
 80130e0:	2302      	movs	r3, #2
 80130e2:	f107 010c 	add.w	r1, r7, #12
 80130e6:	6838      	ldr	r0, [r7, #0]
 80130e8:	f7ff fed8 	bl	8012e9c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80130ec:	693b      	ldr	r3, [r7, #16]
 80130ee:	88db      	ldrh	r3, [r3, #6]
 80130f0:	b29b      	uxth	r3, r3
 80130f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80130f6:	d003      	beq.n	8013100 <etharp_input+0xb8>
 80130f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80130fc:	d01e      	beq.n	801313c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80130fe:	e020      	b.n	8013142 <etharp_input+0xfa>
      if (for_us) {
 8013100:	7dfb      	ldrb	r3, [r7, #23]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d01c      	beq.n	8013140 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013106:	683b      	ldr	r3, [r7, #0]
 8013108:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801310c:	693b      	ldr	r3, [r7, #16]
 801310e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013112:	683b      	ldr	r3, [r7, #0]
 8013114:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013118:	683b      	ldr	r3, [r7, #0]
 801311a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801311c:	693a      	ldr	r2, [r7, #16]
 801311e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013120:	2102      	movs	r1, #2
 8013122:	9103      	str	r1, [sp, #12]
 8013124:	f107 010c 	add.w	r1, r7, #12
 8013128:	9102      	str	r1, [sp, #8]
 801312a:	9201      	str	r2, [sp, #4]
 801312c:	9300      	str	r3, [sp, #0]
 801312e:	462b      	mov	r3, r5
 8013130:	4622      	mov	r2, r4
 8013132:	4601      	mov	r1, r0
 8013134:	6838      	ldr	r0, [r7, #0]
 8013136:	f000 faeb 	bl	8013710 <etharp_raw>
      break;
 801313a:	e001      	b.n	8013140 <etharp_input+0xf8>
      break;
 801313c:	bf00      	nop
 801313e:	e000      	b.n	8013142 <etharp_input+0xfa>
      break;
 8013140:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013142:	6878      	ldr	r0, [r7, #4]
 8013144:	f7f8 fe28 	bl	800bd98 <pbuf_free>
}
 8013148:	3718      	adds	r7, #24
 801314a:	46bd      	mov	sp, r7
 801314c:	bdb0      	pop	{r4, r5, r7, pc}
 801314e:	bf00      	nop
 8013150:	08018ae4 	.word	0x08018ae4
 8013154:	08018c34 	.word	0x08018c34
 8013158:	08018b5c 	.word	0x08018b5c

0801315c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b086      	sub	sp, #24
 8013160:	af02      	add	r7, sp, #8
 8013162:	60f8      	str	r0, [r7, #12]
 8013164:	60b9      	str	r1, [r7, #8]
 8013166:	4613      	mov	r3, r2
 8013168:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801316a:	79fa      	ldrb	r2, [r7, #7]
 801316c:	4944      	ldr	r1, [pc, #272]	; (8013280 <etharp_output_to_arp_index+0x124>)
 801316e:	4613      	mov	r3, r2
 8013170:	005b      	lsls	r3, r3, #1
 8013172:	4413      	add	r3, r2
 8013174:	00db      	lsls	r3, r3, #3
 8013176:	440b      	add	r3, r1
 8013178:	3314      	adds	r3, #20
 801317a:	781b      	ldrb	r3, [r3, #0]
 801317c:	2b01      	cmp	r3, #1
 801317e:	d806      	bhi.n	801318e <etharp_output_to_arp_index+0x32>
 8013180:	4b40      	ldr	r3, [pc, #256]	; (8013284 <etharp_output_to_arp_index+0x128>)
 8013182:	f240 22ef 	movw	r2, #751	; 0x2ef
 8013186:	4940      	ldr	r1, [pc, #256]	; (8013288 <etharp_output_to_arp_index+0x12c>)
 8013188:	4840      	ldr	r0, [pc, #256]	; (801328c <etharp_output_to_arp_index+0x130>)
 801318a:	f002 f865 	bl	8015258 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801318e:	79fa      	ldrb	r2, [r7, #7]
 8013190:	493b      	ldr	r1, [pc, #236]	; (8013280 <etharp_output_to_arp_index+0x124>)
 8013192:	4613      	mov	r3, r2
 8013194:	005b      	lsls	r3, r3, #1
 8013196:	4413      	add	r3, r2
 8013198:	00db      	lsls	r3, r3, #3
 801319a:	440b      	add	r3, r1
 801319c:	3314      	adds	r3, #20
 801319e:	781b      	ldrb	r3, [r3, #0]
 80131a0:	2b02      	cmp	r3, #2
 80131a2:	d153      	bne.n	801324c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80131a4:	79fa      	ldrb	r2, [r7, #7]
 80131a6:	4936      	ldr	r1, [pc, #216]	; (8013280 <etharp_output_to_arp_index+0x124>)
 80131a8:	4613      	mov	r3, r2
 80131aa:	005b      	lsls	r3, r3, #1
 80131ac:	4413      	add	r3, r2
 80131ae:	00db      	lsls	r3, r3, #3
 80131b0:	440b      	add	r3, r1
 80131b2:	3312      	adds	r3, #18
 80131b4:	881b      	ldrh	r3, [r3, #0]
 80131b6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80131ba:	d919      	bls.n	80131f0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80131bc:	79fa      	ldrb	r2, [r7, #7]
 80131be:	4613      	mov	r3, r2
 80131c0:	005b      	lsls	r3, r3, #1
 80131c2:	4413      	add	r3, r2
 80131c4:	00db      	lsls	r3, r3, #3
 80131c6:	4a2e      	ldr	r2, [pc, #184]	; (8013280 <etharp_output_to_arp_index+0x124>)
 80131c8:	4413      	add	r3, r2
 80131ca:	3304      	adds	r3, #4
 80131cc:	4619      	mov	r1, r3
 80131ce:	68f8      	ldr	r0, [r7, #12]
 80131d0:	f000 fb4c 	bl	801386c <etharp_request>
 80131d4:	4603      	mov	r3, r0
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d138      	bne.n	801324c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80131da:	79fa      	ldrb	r2, [r7, #7]
 80131dc:	4928      	ldr	r1, [pc, #160]	; (8013280 <etharp_output_to_arp_index+0x124>)
 80131de:	4613      	mov	r3, r2
 80131e0:	005b      	lsls	r3, r3, #1
 80131e2:	4413      	add	r3, r2
 80131e4:	00db      	lsls	r3, r3, #3
 80131e6:	440b      	add	r3, r1
 80131e8:	3314      	adds	r3, #20
 80131ea:	2203      	movs	r2, #3
 80131ec:	701a      	strb	r2, [r3, #0]
 80131ee:	e02d      	b.n	801324c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80131f0:	79fa      	ldrb	r2, [r7, #7]
 80131f2:	4923      	ldr	r1, [pc, #140]	; (8013280 <etharp_output_to_arp_index+0x124>)
 80131f4:	4613      	mov	r3, r2
 80131f6:	005b      	lsls	r3, r3, #1
 80131f8:	4413      	add	r3, r2
 80131fa:	00db      	lsls	r3, r3, #3
 80131fc:	440b      	add	r3, r1
 80131fe:	3312      	adds	r3, #18
 8013200:	881b      	ldrh	r3, [r3, #0]
 8013202:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013206:	d321      	bcc.n	801324c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013208:	79fa      	ldrb	r2, [r7, #7]
 801320a:	4613      	mov	r3, r2
 801320c:	005b      	lsls	r3, r3, #1
 801320e:	4413      	add	r3, r2
 8013210:	00db      	lsls	r3, r3, #3
 8013212:	4a1b      	ldr	r2, [pc, #108]	; (8013280 <etharp_output_to_arp_index+0x124>)
 8013214:	4413      	add	r3, r2
 8013216:	1d19      	adds	r1, r3, #4
 8013218:	79fa      	ldrb	r2, [r7, #7]
 801321a:	4613      	mov	r3, r2
 801321c:	005b      	lsls	r3, r3, #1
 801321e:	4413      	add	r3, r2
 8013220:	00db      	lsls	r3, r3, #3
 8013222:	3308      	adds	r3, #8
 8013224:	4a16      	ldr	r2, [pc, #88]	; (8013280 <etharp_output_to_arp_index+0x124>)
 8013226:	4413      	add	r3, r2
 8013228:	3304      	adds	r3, #4
 801322a:	461a      	mov	r2, r3
 801322c:	68f8      	ldr	r0, [r7, #12]
 801322e:	f000 fafb 	bl	8013828 <etharp_request_dst>
 8013232:	4603      	mov	r3, r0
 8013234:	2b00      	cmp	r3, #0
 8013236:	d109      	bne.n	801324c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013238:	79fa      	ldrb	r2, [r7, #7]
 801323a:	4911      	ldr	r1, [pc, #68]	; (8013280 <etharp_output_to_arp_index+0x124>)
 801323c:	4613      	mov	r3, r2
 801323e:	005b      	lsls	r3, r3, #1
 8013240:	4413      	add	r3, r2
 8013242:	00db      	lsls	r3, r3, #3
 8013244:	440b      	add	r3, r1
 8013246:	3314      	adds	r3, #20
 8013248:	2203      	movs	r2, #3
 801324a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013252:	79fa      	ldrb	r2, [r7, #7]
 8013254:	4613      	mov	r3, r2
 8013256:	005b      	lsls	r3, r3, #1
 8013258:	4413      	add	r3, r2
 801325a:	00db      	lsls	r3, r3, #3
 801325c:	3308      	adds	r3, #8
 801325e:	4a08      	ldr	r2, [pc, #32]	; (8013280 <etharp_output_to_arp_index+0x124>)
 8013260:	4413      	add	r3, r2
 8013262:	1d1a      	adds	r2, r3, #4
 8013264:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013268:	9300      	str	r3, [sp, #0]
 801326a:	4613      	mov	r3, r2
 801326c:	460a      	mov	r2, r1
 801326e:	68b9      	ldr	r1, [r7, #8]
 8013270:	68f8      	ldr	r0, [r7, #12]
 8013272:	f001 fe33 	bl	8014edc <ethernet_output>
 8013276:	4603      	mov	r3, r0
}
 8013278:	4618      	mov	r0, r3
 801327a:	3710      	adds	r7, #16
 801327c:	46bd      	mov	sp, r7
 801327e:	bd80      	pop	{r7, pc}
 8013280:	2000452c 	.word	0x2000452c
 8013284:	08018ae4 	.word	0x08018ae4
 8013288:	08018c54 	.word	0x08018c54
 801328c:	08018b5c 	.word	0x08018b5c

08013290 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b08a      	sub	sp, #40	; 0x28
 8013294:	af02      	add	r7, sp, #8
 8013296:	60f8      	str	r0, [r7, #12]
 8013298:	60b9      	str	r1, [r7, #8]
 801329a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d106      	bne.n	80132b4 <etharp_output+0x24>
 80132a6:	4b73      	ldr	r3, [pc, #460]	; (8013474 <etharp_output+0x1e4>)
 80132a8:	f240 321e 	movw	r2, #798	; 0x31e
 80132ac:	4972      	ldr	r1, [pc, #456]	; (8013478 <etharp_output+0x1e8>)
 80132ae:	4873      	ldr	r0, [pc, #460]	; (801347c <etharp_output+0x1ec>)
 80132b0:	f001 ffd2 	bl	8015258 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80132b4:	68bb      	ldr	r3, [r7, #8]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d106      	bne.n	80132c8 <etharp_output+0x38>
 80132ba:	4b6e      	ldr	r3, [pc, #440]	; (8013474 <etharp_output+0x1e4>)
 80132bc:	f240 321f 	movw	r2, #799	; 0x31f
 80132c0:	496f      	ldr	r1, [pc, #444]	; (8013480 <etharp_output+0x1f0>)
 80132c2:	486e      	ldr	r0, [pc, #440]	; (801347c <etharp_output+0x1ec>)
 80132c4:	f001 ffc8 	bl	8015258 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d106      	bne.n	80132dc <etharp_output+0x4c>
 80132ce:	4b69      	ldr	r3, [pc, #420]	; (8013474 <etharp_output+0x1e4>)
 80132d0:	f44f 7248 	mov.w	r2, #800	; 0x320
 80132d4:	496b      	ldr	r1, [pc, #428]	; (8013484 <etharp_output+0x1f4>)
 80132d6:	4869      	ldr	r0, [pc, #420]	; (801347c <etharp_output+0x1ec>)
 80132d8:	f001 ffbe 	bl	8015258 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	68f9      	ldr	r1, [r7, #12]
 80132e2:	4618      	mov	r0, r3
 80132e4:	f000 fef6 	bl	80140d4 <ip4_addr_isbroadcast_u32>
 80132e8:	4603      	mov	r3, r0
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d002      	beq.n	80132f4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80132ee:	4b66      	ldr	r3, [pc, #408]	; (8013488 <etharp_output+0x1f8>)
 80132f0:	61fb      	str	r3, [r7, #28]
 80132f2:	e0af      	b.n	8013454 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80132fc:	2be0      	cmp	r3, #224	; 0xe0
 80132fe:	d118      	bne.n	8013332 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013300:	2301      	movs	r3, #1
 8013302:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013304:	2300      	movs	r3, #0
 8013306:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013308:	235e      	movs	r3, #94	; 0x5e
 801330a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	3301      	adds	r3, #1
 8013310:	781b      	ldrb	r3, [r3, #0]
 8013312:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013316:	b2db      	uxtb	r3, r3
 8013318:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	3302      	adds	r3, #2
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	3303      	adds	r3, #3
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801332a:	f107 0310 	add.w	r3, r7, #16
 801332e:	61fb      	str	r3, [r7, #28]
 8013330:	e090      	b.n	8013454 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	681a      	ldr	r2, [r3, #0]
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	3304      	adds	r3, #4
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	405a      	eors	r2, r3
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	3308      	adds	r3, #8
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	4013      	ands	r3, r2
 8013346:	2b00      	cmp	r3, #0
 8013348:	d012      	beq.n	8013370 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013350:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013354:	4293      	cmp	r3, r2
 8013356:	d00b      	beq.n	8013370 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	330c      	adds	r3, #12
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d003      	beq.n	801336a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	330c      	adds	r3, #12
 8013366:	61bb      	str	r3, [r7, #24]
 8013368:	e002      	b.n	8013370 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801336a:	f06f 0303 	mvn.w	r3, #3
 801336e:	e07d      	b.n	801346c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013370:	4b46      	ldr	r3, [pc, #280]	; (801348c <etharp_output+0x1fc>)
 8013372:	781b      	ldrb	r3, [r3, #0]
 8013374:	4619      	mov	r1, r3
 8013376:	4a46      	ldr	r2, [pc, #280]	; (8013490 <etharp_output+0x200>)
 8013378:	460b      	mov	r3, r1
 801337a:	005b      	lsls	r3, r3, #1
 801337c:	440b      	add	r3, r1
 801337e:	00db      	lsls	r3, r3, #3
 8013380:	4413      	add	r3, r2
 8013382:	3314      	adds	r3, #20
 8013384:	781b      	ldrb	r3, [r3, #0]
 8013386:	2b01      	cmp	r3, #1
 8013388:	d925      	bls.n	80133d6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801338a:	4b40      	ldr	r3, [pc, #256]	; (801348c <etharp_output+0x1fc>)
 801338c:	781b      	ldrb	r3, [r3, #0]
 801338e:	4619      	mov	r1, r3
 8013390:	4a3f      	ldr	r2, [pc, #252]	; (8013490 <etharp_output+0x200>)
 8013392:	460b      	mov	r3, r1
 8013394:	005b      	lsls	r3, r3, #1
 8013396:	440b      	add	r3, r1
 8013398:	00db      	lsls	r3, r3, #3
 801339a:	4413      	add	r3, r2
 801339c:	3308      	adds	r3, #8
 801339e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80133a0:	68fa      	ldr	r2, [r7, #12]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d117      	bne.n	80133d6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80133a6:	69bb      	ldr	r3, [r7, #24]
 80133a8:	681a      	ldr	r2, [r3, #0]
 80133aa:	4b38      	ldr	r3, [pc, #224]	; (801348c <etharp_output+0x1fc>)
 80133ac:	781b      	ldrb	r3, [r3, #0]
 80133ae:	4618      	mov	r0, r3
 80133b0:	4937      	ldr	r1, [pc, #220]	; (8013490 <etharp_output+0x200>)
 80133b2:	4603      	mov	r3, r0
 80133b4:	005b      	lsls	r3, r3, #1
 80133b6:	4403      	add	r3, r0
 80133b8:	00db      	lsls	r3, r3, #3
 80133ba:	440b      	add	r3, r1
 80133bc:	3304      	adds	r3, #4
 80133be:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d108      	bne.n	80133d6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80133c4:	4b31      	ldr	r3, [pc, #196]	; (801348c <etharp_output+0x1fc>)
 80133c6:	781b      	ldrb	r3, [r3, #0]
 80133c8:	461a      	mov	r2, r3
 80133ca:	68b9      	ldr	r1, [r7, #8]
 80133cc:	68f8      	ldr	r0, [r7, #12]
 80133ce:	f7ff fec5 	bl	801315c <etharp_output_to_arp_index>
 80133d2:	4603      	mov	r3, r0
 80133d4:	e04a      	b.n	801346c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80133d6:	2300      	movs	r3, #0
 80133d8:	75fb      	strb	r3, [r7, #23]
 80133da:	e031      	b.n	8013440 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80133dc:	7dfa      	ldrb	r2, [r7, #23]
 80133de:	492c      	ldr	r1, [pc, #176]	; (8013490 <etharp_output+0x200>)
 80133e0:	4613      	mov	r3, r2
 80133e2:	005b      	lsls	r3, r3, #1
 80133e4:	4413      	add	r3, r2
 80133e6:	00db      	lsls	r3, r3, #3
 80133e8:	440b      	add	r3, r1
 80133ea:	3314      	adds	r3, #20
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	2b01      	cmp	r3, #1
 80133f0:	d923      	bls.n	801343a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80133f2:	7dfa      	ldrb	r2, [r7, #23]
 80133f4:	4926      	ldr	r1, [pc, #152]	; (8013490 <etharp_output+0x200>)
 80133f6:	4613      	mov	r3, r2
 80133f8:	005b      	lsls	r3, r3, #1
 80133fa:	4413      	add	r3, r2
 80133fc:	00db      	lsls	r3, r3, #3
 80133fe:	440b      	add	r3, r1
 8013400:	3308      	adds	r3, #8
 8013402:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013404:	68fa      	ldr	r2, [r7, #12]
 8013406:	429a      	cmp	r2, r3
 8013408:	d117      	bne.n	801343a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801340a:	69bb      	ldr	r3, [r7, #24]
 801340c:	6819      	ldr	r1, [r3, #0]
 801340e:	7dfa      	ldrb	r2, [r7, #23]
 8013410:	481f      	ldr	r0, [pc, #124]	; (8013490 <etharp_output+0x200>)
 8013412:	4613      	mov	r3, r2
 8013414:	005b      	lsls	r3, r3, #1
 8013416:	4413      	add	r3, r2
 8013418:	00db      	lsls	r3, r3, #3
 801341a:	4403      	add	r3, r0
 801341c:	3304      	adds	r3, #4
 801341e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013420:	4299      	cmp	r1, r3
 8013422:	d10a      	bne.n	801343a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013424:	4a19      	ldr	r2, [pc, #100]	; (801348c <etharp_output+0x1fc>)
 8013426:	7dfb      	ldrb	r3, [r7, #23]
 8013428:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801342a:	7dfb      	ldrb	r3, [r7, #23]
 801342c:	461a      	mov	r2, r3
 801342e:	68b9      	ldr	r1, [r7, #8]
 8013430:	68f8      	ldr	r0, [r7, #12]
 8013432:	f7ff fe93 	bl	801315c <etharp_output_to_arp_index>
 8013436:	4603      	mov	r3, r0
 8013438:	e018      	b.n	801346c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801343a:	7dfb      	ldrb	r3, [r7, #23]
 801343c:	3301      	adds	r3, #1
 801343e:	75fb      	strb	r3, [r7, #23]
 8013440:	7dfb      	ldrb	r3, [r7, #23]
 8013442:	2b09      	cmp	r3, #9
 8013444:	d9ca      	bls.n	80133dc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8013446:	68ba      	ldr	r2, [r7, #8]
 8013448:	69b9      	ldr	r1, [r7, #24]
 801344a:	68f8      	ldr	r0, [r7, #12]
 801344c:	f000 f822 	bl	8013494 <etharp_query>
 8013450:	4603      	mov	r3, r0
 8013452:	e00b      	b.n	801346c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801345a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801345e:	9300      	str	r3, [sp, #0]
 8013460:	69fb      	ldr	r3, [r7, #28]
 8013462:	68b9      	ldr	r1, [r7, #8]
 8013464:	68f8      	ldr	r0, [r7, #12]
 8013466:	f001 fd39 	bl	8014edc <ethernet_output>
 801346a:	4603      	mov	r3, r0
}
 801346c:	4618      	mov	r0, r3
 801346e:	3720      	adds	r7, #32
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}
 8013474:	08018ae4 	.word	0x08018ae4
 8013478:	08018c34 	.word	0x08018c34
 801347c:	08018b5c 	.word	0x08018b5c
 8013480:	08018c84 	.word	0x08018c84
 8013484:	08018c24 	.word	0x08018c24
 8013488:	08029e14 	.word	0x08029e14
 801348c:	2000461c 	.word	0x2000461c
 8013490:	2000452c 	.word	0x2000452c

08013494 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8013494:	b580      	push	{r7, lr}
 8013496:	b08c      	sub	sp, #48	; 0x30
 8013498:	af02      	add	r7, sp, #8
 801349a:	60f8      	str	r0, [r7, #12]
 801349c:	60b9      	str	r1, [r7, #8]
 801349e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	3326      	adds	r3, #38	; 0x26
 80134a4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80134a6:	23ff      	movs	r3, #255	; 0xff
 80134a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80134ac:	2300      	movs	r3, #0
 80134ae:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80134b0:	68bb      	ldr	r3, [r7, #8]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	68f9      	ldr	r1, [r7, #12]
 80134b6:	4618      	mov	r0, r3
 80134b8:	f000 fe0c 	bl	80140d4 <ip4_addr_isbroadcast_u32>
 80134bc:	4603      	mov	r3, r0
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d10c      	bne.n	80134dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80134ca:	2be0      	cmp	r3, #224	; 0xe0
 80134cc:	d006      	beq.n	80134dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d003      	beq.n	80134dc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80134d4:	68bb      	ldr	r3, [r7, #8]
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d102      	bne.n	80134e2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80134dc:	f06f 030f 	mvn.w	r3, #15
 80134e0:	e102      	b.n	80136e8 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80134e2:	68fa      	ldr	r2, [r7, #12]
 80134e4:	2101      	movs	r1, #1
 80134e6:	68b8      	ldr	r0, [r7, #8]
 80134e8:	f7ff fb60 	bl	8012bac <etharp_find_entry>
 80134ec:	4603      	mov	r3, r0
 80134ee:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80134f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	da02      	bge.n	80134fe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80134f8:	8a7b      	ldrh	r3, [r7, #18]
 80134fa:	b25b      	sxtb	r3, r3
 80134fc:	e0f4      	b.n	80136e8 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80134fe:	8a7b      	ldrh	r3, [r7, #18]
 8013500:	2b7e      	cmp	r3, #126	; 0x7e
 8013502:	d906      	bls.n	8013512 <etharp_query+0x7e>
 8013504:	4b7a      	ldr	r3, [pc, #488]	; (80136f0 <etharp_query+0x25c>)
 8013506:	f240 32c1 	movw	r2, #961	; 0x3c1
 801350a:	497a      	ldr	r1, [pc, #488]	; (80136f4 <etharp_query+0x260>)
 801350c:	487a      	ldr	r0, [pc, #488]	; (80136f8 <etharp_query+0x264>)
 801350e:	f001 fea3 	bl	8015258 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8013512:	8a7b      	ldrh	r3, [r7, #18]
 8013514:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8013516:	7c7a      	ldrb	r2, [r7, #17]
 8013518:	4978      	ldr	r1, [pc, #480]	; (80136fc <etharp_query+0x268>)
 801351a:	4613      	mov	r3, r2
 801351c:	005b      	lsls	r3, r3, #1
 801351e:	4413      	add	r3, r2
 8013520:	00db      	lsls	r3, r3, #3
 8013522:	440b      	add	r3, r1
 8013524:	3314      	adds	r3, #20
 8013526:	781b      	ldrb	r3, [r3, #0]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d115      	bne.n	8013558 <etharp_query+0xc4>
    is_new_entry = 1;
 801352c:	2301      	movs	r3, #1
 801352e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8013530:	7c7a      	ldrb	r2, [r7, #17]
 8013532:	4972      	ldr	r1, [pc, #456]	; (80136fc <etharp_query+0x268>)
 8013534:	4613      	mov	r3, r2
 8013536:	005b      	lsls	r3, r3, #1
 8013538:	4413      	add	r3, r2
 801353a:	00db      	lsls	r3, r3, #3
 801353c:	440b      	add	r3, r1
 801353e:	3314      	adds	r3, #20
 8013540:	2201      	movs	r2, #1
 8013542:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8013544:	7c7a      	ldrb	r2, [r7, #17]
 8013546:	496d      	ldr	r1, [pc, #436]	; (80136fc <etharp_query+0x268>)
 8013548:	4613      	mov	r3, r2
 801354a:	005b      	lsls	r3, r3, #1
 801354c:	4413      	add	r3, r2
 801354e:	00db      	lsls	r3, r3, #3
 8013550:	440b      	add	r3, r1
 8013552:	3308      	adds	r3, #8
 8013554:	68fa      	ldr	r2, [r7, #12]
 8013556:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8013558:	7c7a      	ldrb	r2, [r7, #17]
 801355a:	4968      	ldr	r1, [pc, #416]	; (80136fc <etharp_query+0x268>)
 801355c:	4613      	mov	r3, r2
 801355e:	005b      	lsls	r3, r3, #1
 8013560:	4413      	add	r3, r2
 8013562:	00db      	lsls	r3, r3, #3
 8013564:	440b      	add	r3, r1
 8013566:	3314      	adds	r3, #20
 8013568:	781b      	ldrb	r3, [r3, #0]
 801356a:	2b01      	cmp	r3, #1
 801356c:	d011      	beq.n	8013592 <etharp_query+0xfe>
 801356e:	7c7a      	ldrb	r2, [r7, #17]
 8013570:	4962      	ldr	r1, [pc, #392]	; (80136fc <etharp_query+0x268>)
 8013572:	4613      	mov	r3, r2
 8013574:	005b      	lsls	r3, r3, #1
 8013576:	4413      	add	r3, r2
 8013578:	00db      	lsls	r3, r3, #3
 801357a:	440b      	add	r3, r1
 801357c:	3314      	adds	r3, #20
 801357e:	781b      	ldrb	r3, [r3, #0]
 8013580:	2b01      	cmp	r3, #1
 8013582:	d806      	bhi.n	8013592 <etharp_query+0xfe>
 8013584:	4b5a      	ldr	r3, [pc, #360]	; (80136f0 <etharp_query+0x25c>)
 8013586:	f240 32cf 	movw	r2, #975	; 0x3cf
 801358a:	495d      	ldr	r1, [pc, #372]	; (8013700 <etharp_query+0x26c>)
 801358c:	485a      	ldr	r0, [pc, #360]	; (80136f8 <etharp_query+0x264>)
 801358e:	f001 fe63 	bl	8015258 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8013592:	6a3b      	ldr	r3, [r7, #32]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d102      	bne.n	801359e <etharp_query+0x10a>
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d10c      	bne.n	80135b8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801359e:	68b9      	ldr	r1, [r7, #8]
 80135a0:	68f8      	ldr	r0, [r7, #12]
 80135a2:	f000 f963 	bl	801386c <etharp_request>
 80135a6:	4603      	mov	r3, r0
 80135a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d102      	bne.n	80135b8 <etharp_query+0x124>
      return result;
 80135b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80135b6:	e097      	b.n	80136e8 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d106      	bne.n	80135cc <etharp_query+0x138>
 80135be:	4b4c      	ldr	r3, [pc, #304]	; (80136f0 <etharp_query+0x25c>)
 80135c0:	f240 32e1 	movw	r2, #993	; 0x3e1
 80135c4:	494f      	ldr	r1, [pc, #316]	; (8013704 <etharp_query+0x270>)
 80135c6:	484c      	ldr	r0, [pc, #304]	; (80136f8 <etharp_query+0x264>)
 80135c8:	f001 fe46 	bl	8015258 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80135cc:	7c7a      	ldrb	r2, [r7, #17]
 80135ce:	494b      	ldr	r1, [pc, #300]	; (80136fc <etharp_query+0x268>)
 80135d0:	4613      	mov	r3, r2
 80135d2:	005b      	lsls	r3, r3, #1
 80135d4:	4413      	add	r3, r2
 80135d6:	00db      	lsls	r3, r3, #3
 80135d8:	440b      	add	r3, r1
 80135da:	3314      	adds	r3, #20
 80135dc:	781b      	ldrb	r3, [r3, #0]
 80135de:	2b01      	cmp	r3, #1
 80135e0:	d918      	bls.n	8013614 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80135e2:	4a49      	ldr	r2, [pc, #292]	; (8013708 <etharp_query+0x274>)
 80135e4:	7c7b      	ldrb	r3, [r7, #17]
 80135e6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80135e8:	7c7a      	ldrb	r2, [r7, #17]
 80135ea:	4613      	mov	r3, r2
 80135ec:	005b      	lsls	r3, r3, #1
 80135ee:	4413      	add	r3, r2
 80135f0:	00db      	lsls	r3, r3, #3
 80135f2:	3308      	adds	r3, #8
 80135f4:	4a41      	ldr	r2, [pc, #260]	; (80136fc <etharp_query+0x268>)
 80135f6:	4413      	add	r3, r2
 80135f8:	1d1a      	adds	r2, r3, #4
 80135fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80135fe:	9300      	str	r3, [sp, #0]
 8013600:	4613      	mov	r3, r2
 8013602:	697a      	ldr	r2, [r7, #20]
 8013604:	6879      	ldr	r1, [r7, #4]
 8013606:	68f8      	ldr	r0, [r7, #12]
 8013608:	f001 fc68 	bl	8014edc <ethernet_output>
 801360c:	4603      	mov	r3, r0
 801360e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013612:	e067      	b.n	80136e4 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013614:	7c7a      	ldrb	r2, [r7, #17]
 8013616:	4939      	ldr	r1, [pc, #228]	; (80136fc <etharp_query+0x268>)
 8013618:	4613      	mov	r3, r2
 801361a:	005b      	lsls	r3, r3, #1
 801361c:	4413      	add	r3, r2
 801361e:	00db      	lsls	r3, r3, #3
 8013620:	440b      	add	r3, r1
 8013622:	3314      	adds	r3, #20
 8013624:	781b      	ldrb	r3, [r3, #0]
 8013626:	2b01      	cmp	r3, #1
 8013628:	d15c      	bne.n	80136e4 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801362a:	2300      	movs	r3, #0
 801362c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	61fb      	str	r3, [r7, #28]
    while (p) {
 8013632:	e01c      	b.n	801366e <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8013634:	69fb      	ldr	r3, [r7, #28]
 8013636:	895a      	ldrh	r2, [r3, #10]
 8013638:	69fb      	ldr	r3, [r7, #28]
 801363a:	891b      	ldrh	r3, [r3, #8]
 801363c:	429a      	cmp	r2, r3
 801363e:	d10a      	bne.n	8013656 <etharp_query+0x1c2>
 8013640:	69fb      	ldr	r3, [r7, #28]
 8013642:	681b      	ldr	r3, [r3, #0]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d006      	beq.n	8013656 <etharp_query+0x1c2>
 8013648:	4b29      	ldr	r3, [pc, #164]	; (80136f0 <etharp_query+0x25c>)
 801364a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801364e:	492f      	ldr	r1, [pc, #188]	; (801370c <etharp_query+0x278>)
 8013650:	4829      	ldr	r0, [pc, #164]	; (80136f8 <etharp_query+0x264>)
 8013652:	f001 fe01 	bl	8015258 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8013656:	69fb      	ldr	r3, [r7, #28]
 8013658:	7b1b      	ldrb	r3, [r3, #12]
 801365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801365e:	2b00      	cmp	r3, #0
 8013660:	d002      	beq.n	8013668 <etharp_query+0x1d4>
        copy_needed = 1;
 8013662:	2301      	movs	r3, #1
 8013664:	61bb      	str	r3, [r7, #24]
        break;
 8013666:	e005      	b.n	8013674 <etharp_query+0x1e0>
      }
      p = p->next;
 8013668:	69fb      	ldr	r3, [r7, #28]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	61fb      	str	r3, [r7, #28]
    while (p) {
 801366e:	69fb      	ldr	r3, [r7, #28]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d1df      	bne.n	8013634 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 8013674:	69bb      	ldr	r3, [r7, #24]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d007      	beq.n	801368a <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801367a:	687a      	ldr	r2, [r7, #4]
 801367c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8013680:	200e      	movs	r0, #14
 8013682:	f7f8 fdf1 	bl	800c268 <pbuf_clone>
 8013686:	61f8      	str	r0, [r7, #28]
 8013688:	e004      	b.n	8013694 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801368e:	69f8      	ldr	r0, [r7, #28]
 8013690:	f7f8 fc28 	bl	800bee4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8013694:	69fb      	ldr	r3, [r7, #28]
 8013696:	2b00      	cmp	r3, #0
 8013698:	d021      	beq.n	80136de <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801369a:	7c7a      	ldrb	r2, [r7, #17]
 801369c:	4917      	ldr	r1, [pc, #92]	; (80136fc <etharp_query+0x268>)
 801369e:	4613      	mov	r3, r2
 80136a0:	005b      	lsls	r3, r3, #1
 80136a2:	4413      	add	r3, r2
 80136a4:	00db      	lsls	r3, r3, #3
 80136a6:	440b      	add	r3, r1
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d00a      	beq.n	80136c4 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80136ae:	7c7a      	ldrb	r2, [r7, #17]
 80136b0:	4912      	ldr	r1, [pc, #72]	; (80136fc <etharp_query+0x268>)
 80136b2:	4613      	mov	r3, r2
 80136b4:	005b      	lsls	r3, r3, #1
 80136b6:	4413      	add	r3, r2
 80136b8:	00db      	lsls	r3, r3, #3
 80136ba:	440b      	add	r3, r1
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	4618      	mov	r0, r3
 80136c0:	f7f8 fb6a 	bl	800bd98 <pbuf_free>
      }
      arp_table[i].q = p;
 80136c4:	7c7a      	ldrb	r2, [r7, #17]
 80136c6:	490d      	ldr	r1, [pc, #52]	; (80136fc <etharp_query+0x268>)
 80136c8:	4613      	mov	r3, r2
 80136ca:	005b      	lsls	r3, r3, #1
 80136cc:	4413      	add	r3, r2
 80136ce:	00db      	lsls	r3, r3, #3
 80136d0:	440b      	add	r3, r1
 80136d2:	69fa      	ldr	r2, [r7, #28]
 80136d4:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80136d6:	2300      	movs	r3, #0
 80136d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80136dc:	e002      	b.n	80136e4 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80136de:	23ff      	movs	r3, #255	; 0xff
 80136e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80136e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	3728      	adds	r7, #40	; 0x28
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}
 80136f0:	08018ae4 	.word	0x08018ae4
 80136f4:	08018c90 	.word	0x08018c90
 80136f8:	08018b5c 	.word	0x08018b5c
 80136fc:	2000452c 	.word	0x2000452c
 8013700:	08018ca0 	.word	0x08018ca0
 8013704:	08018c84 	.word	0x08018c84
 8013708:	2000461c 	.word	0x2000461c
 801370c:	08018cc8 	.word	0x08018cc8

08013710 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b08a      	sub	sp, #40	; 0x28
 8013714:	af02      	add	r7, sp, #8
 8013716:	60f8      	str	r0, [r7, #12]
 8013718:	60b9      	str	r1, [r7, #8]
 801371a:	607a      	str	r2, [r7, #4]
 801371c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801371e:	2300      	movs	r3, #0
 8013720:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d106      	bne.n	8013736 <etharp_raw+0x26>
 8013728:	4b3a      	ldr	r3, [pc, #232]	; (8013814 <etharp_raw+0x104>)
 801372a:	f240 4257 	movw	r2, #1111	; 0x457
 801372e:	493a      	ldr	r1, [pc, #232]	; (8013818 <etharp_raw+0x108>)
 8013730:	483a      	ldr	r0, [pc, #232]	; (801381c <etharp_raw+0x10c>)
 8013732:	f001 fd91 	bl	8015258 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8013736:	f44f 7220 	mov.w	r2, #640	; 0x280
 801373a:	211c      	movs	r1, #28
 801373c:	200e      	movs	r0, #14
 801373e:	f7f8 f84b 	bl	800b7d8 <pbuf_alloc>
 8013742:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8013744:	69bb      	ldr	r3, [r7, #24]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d102      	bne.n	8013750 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801374a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801374e:	e05d      	b.n	801380c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8013750:	69bb      	ldr	r3, [r7, #24]
 8013752:	895b      	ldrh	r3, [r3, #10]
 8013754:	2b1b      	cmp	r3, #27
 8013756:	d806      	bhi.n	8013766 <etharp_raw+0x56>
 8013758:	4b2e      	ldr	r3, [pc, #184]	; (8013814 <etharp_raw+0x104>)
 801375a:	f240 4263 	movw	r2, #1123	; 0x463
 801375e:	4930      	ldr	r1, [pc, #192]	; (8013820 <etharp_raw+0x110>)
 8013760:	482e      	ldr	r0, [pc, #184]	; (801381c <etharp_raw+0x10c>)
 8013762:	f001 fd79 	bl	8015258 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8013766:	69bb      	ldr	r3, [r7, #24]
 8013768:	685b      	ldr	r3, [r3, #4]
 801376a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801376c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801376e:	4618      	mov	r0, r3
 8013770:	f7f6 ff34 	bl	800a5dc <lwip_htons>
 8013774:	4603      	mov	r3, r0
 8013776:	461a      	mov	r2, r3
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013782:	2b06      	cmp	r3, #6
 8013784:	d006      	beq.n	8013794 <etharp_raw+0x84>
 8013786:	4b23      	ldr	r3, [pc, #140]	; (8013814 <etharp_raw+0x104>)
 8013788:	f240 426a 	movw	r2, #1130	; 0x46a
 801378c:	4925      	ldr	r1, [pc, #148]	; (8013824 <etharp_raw+0x114>)
 801378e:	4823      	ldr	r0, [pc, #140]	; (801381c <etharp_raw+0x10c>)
 8013790:	f001 fd62 	bl	8015258 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8013794:	697b      	ldr	r3, [r7, #20]
 8013796:	3308      	adds	r3, #8
 8013798:	2206      	movs	r2, #6
 801379a:	6839      	ldr	r1, [r7, #0]
 801379c:	4618      	mov	r0, r3
 801379e:	f001 fd2e 	bl	80151fe <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80137a2:	697b      	ldr	r3, [r7, #20]
 80137a4:	3312      	adds	r3, #18
 80137a6:	2206      	movs	r2, #6
 80137a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80137aa:	4618      	mov	r0, r3
 80137ac:	f001 fd27 	bl	80151fe <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80137b0:	697b      	ldr	r3, [r7, #20]
 80137b2:	330e      	adds	r3, #14
 80137b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80137b6:	6812      	ldr	r2, [r2, #0]
 80137b8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80137ba:	697b      	ldr	r3, [r7, #20]
 80137bc:	3318      	adds	r3, #24
 80137be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137c0:	6812      	ldr	r2, [r2, #0]
 80137c2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80137c4:	697b      	ldr	r3, [r7, #20]
 80137c6:	2200      	movs	r2, #0
 80137c8:	701a      	strb	r2, [r3, #0]
 80137ca:	2200      	movs	r2, #0
 80137cc:	f042 0201 	orr.w	r2, r2, #1
 80137d0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	2200      	movs	r2, #0
 80137d6:	f042 0208 	orr.w	r2, r2, #8
 80137da:	709a      	strb	r2, [r3, #2]
 80137dc:	2200      	movs	r2, #0
 80137de:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80137e0:	697b      	ldr	r3, [r7, #20]
 80137e2:	2206      	movs	r2, #6
 80137e4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80137e6:	697b      	ldr	r3, [r7, #20]
 80137e8:	2204      	movs	r2, #4
 80137ea:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80137ec:	f640 0306 	movw	r3, #2054	; 0x806
 80137f0:	9300      	str	r3, [sp, #0]
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	68ba      	ldr	r2, [r7, #8]
 80137f6:	69b9      	ldr	r1, [r7, #24]
 80137f8:	68f8      	ldr	r0, [r7, #12]
 80137fa:	f001 fb6f 	bl	8014edc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80137fe:	69b8      	ldr	r0, [r7, #24]
 8013800:	f7f8 faca 	bl	800bd98 <pbuf_free>
  p = NULL;
 8013804:	2300      	movs	r3, #0
 8013806:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013808:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801380c:	4618      	mov	r0, r3
 801380e:	3720      	adds	r7, #32
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}
 8013814:	08018ae4 	.word	0x08018ae4
 8013818:	08018c34 	.word	0x08018c34
 801381c:	08018b5c 	.word	0x08018b5c
 8013820:	08018ce4 	.word	0x08018ce4
 8013824:	08018d18 	.word	0x08018d18

08013828 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8013828:	b580      	push	{r7, lr}
 801382a:	b088      	sub	sp, #32
 801382c:	af04      	add	r7, sp, #16
 801382e:	60f8      	str	r0, [r7, #12]
 8013830:	60b9      	str	r1, [r7, #8]
 8013832:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8013844:	2201      	movs	r2, #1
 8013846:	9203      	str	r2, [sp, #12]
 8013848:	68ba      	ldr	r2, [r7, #8]
 801384a:	9202      	str	r2, [sp, #8]
 801384c:	4a06      	ldr	r2, [pc, #24]	; (8013868 <etharp_request_dst+0x40>)
 801384e:	9201      	str	r2, [sp, #4]
 8013850:	9300      	str	r3, [sp, #0]
 8013852:	4603      	mov	r3, r0
 8013854:	687a      	ldr	r2, [r7, #4]
 8013856:	68f8      	ldr	r0, [r7, #12]
 8013858:	f7ff ff5a 	bl	8013710 <etharp_raw>
 801385c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801385e:	4618      	mov	r0, r3
 8013860:	3710      	adds	r7, #16
 8013862:	46bd      	mov	sp, r7
 8013864:	bd80      	pop	{r7, pc}
 8013866:	bf00      	nop
 8013868:	08029e1c 	.word	0x08029e1c

0801386c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801386c:	b580      	push	{r7, lr}
 801386e:	b082      	sub	sp, #8
 8013870:	af00      	add	r7, sp, #0
 8013872:	6078      	str	r0, [r7, #4]
 8013874:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8013876:	4a05      	ldr	r2, [pc, #20]	; (801388c <etharp_request+0x20>)
 8013878:	6839      	ldr	r1, [r7, #0]
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f7ff ffd4 	bl	8013828 <etharp_request_dst>
 8013880:	4603      	mov	r3, r0
}
 8013882:	4618      	mov	r0, r3
 8013884:	3708      	adds	r7, #8
 8013886:	46bd      	mov	sp, r7
 8013888:	bd80      	pop	{r7, pc}
 801388a:	bf00      	nop
 801388c:	08029e14 	.word	0x08029e14

08013890 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013890:	b580      	push	{r7, lr}
 8013892:	b08e      	sub	sp, #56	; 0x38
 8013894:	af04      	add	r7, sp, #16
 8013896:	6078      	str	r0, [r7, #4]
 8013898:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801389a:	4b79      	ldr	r3, [pc, #484]	; (8013a80 <icmp_input+0x1f0>)
 801389c:	689b      	ldr	r3, [r3, #8]
 801389e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80138a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	f003 030f 	and.w	r3, r3, #15
 80138a8:	b2db      	uxtb	r3, r3
 80138aa:	009b      	lsls	r3, r3, #2
 80138ac:	b2db      	uxtb	r3, r3
 80138ae:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80138b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80138b2:	2b13      	cmp	r3, #19
 80138b4:	f240 80cd 	bls.w	8013a52 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	895b      	ldrh	r3, [r3, #10]
 80138bc:	2b03      	cmp	r3, #3
 80138be:	f240 80ca 	bls.w	8013a56 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	685b      	ldr	r3, [r3, #4]
 80138c6:	781b      	ldrb	r3, [r3, #0]
 80138c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80138cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	f000 80b7 	beq.w	8013a44 <icmp_input+0x1b4>
 80138d6:	2b08      	cmp	r3, #8
 80138d8:	f040 80b7 	bne.w	8013a4a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80138dc:	4b69      	ldr	r3, [pc, #420]	; (8013a84 <icmp_input+0x1f4>)
 80138de:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80138e0:	4b67      	ldr	r3, [pc, #412]	; (8013a80 <icmp_input+0x1f0>)
 80138e2:	695b      	ldr	r3, [r3, #20]
 80138e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80138e8:	2be0      	cmp	r3, #224	; 0xe0
 80138ea:	f000 80bb 	beq.w	8013a64 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80138ee:	4b64      	ldr	r3, [pc, #400]	; (8013a80 <icmp_input+0x1f0>)
 80138f0:	695a      	ldr	r2, [r3, #20]
 80138f2:	4b63      	ldr	r3, [pc, #396]	; (8013a80 <icmp_input+0x1f0>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	4619      	mov	r1, r3
 80138f8:	4610      	mov	r0, r2
 80138fa:	f000 fbeb 	bl	80140d4 <ip4_addr_isbroadcast_u32>
 80138fe:	4603      	mov	r3, r0
 8013900:	2b00      	cmp	r3, #0
 8013902:	f040 80b1 	bne.w	8013a68 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	891b      	ldrh	r3, [r3, #8]
 801390a:	2b07      	cmp	r3, #7
 801390c:	f240 80a5 	bls.w	8013a5a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013910:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013912:	330e      	adds	r3, #14
 8013914:	4619      	mov	r1, r3
 8013916:	6878      	ldr	r0, [r7, #4]
 8013918:	f7f8 f9a8 	bl	800bc6c <pbuf_add_header>
 801391c:	4603      	mov	r3, r0
 801391e:	2b00      	cmp	r3, #0
 8013920:	d04b      	beq.n	80139ba <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	891a      	ldrh	r2, [r3, #8]
 8013926:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013928:	4413      	add	r3, r2
 801392a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	891b      	ldrh	r3, [r3, #8]
 8013930:	8b7a      	ldrh	r2, [r7, #26]
 8013932:	429a      	cmp	r2, r3
 8013934:	f0c0 809a 	bcc.w	8013a6c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8013938:	8b7b      	ldrh	r3, [r7, #26]
 801393a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801393e:	4619      	mov	r1, r3
 8013940:	200e      	movs	r0, #14
 8013942:	f7f7 ff49 	bl	800b7d8 <pbuf_alloc>
 8013946:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8013948:	697b      	ldr	r3, [r7, #20]
 801394a:	2b00      	cmp	r3, #0
 801394c:	f000 8090 	beq.w	8013a70 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8013950:	697b      	ldr	r3, [r7, #20]
 8013952:	895b      	ldrh	r3, [r3, #10]
 8013954:	461a      	mov	r2, r3
 8013956:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013958:	3308      	adds	r3, #8
 801395a:	429a      	cmp	r2, r3
 801395c:	d203      	bcs.n	8013966 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801395e:	6978      	ldr	r0, [r7, #20]
 8013960:	f7f8 fa1a 	bl	800bd98 <pbuf_free>
          goto icmperr;
 8013964:	e085      	b.n	8013a72 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8013966:	697b      	ldr	r3, [r7, #20]
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801396c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801396e:	4618      	mov	r0, r3
 8013970:	f001 fc45 	bl	80151fe <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8013974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013976:	4619      	mov	r1, r3
 8013978:	6978      	ldr	r0, [r7, #20]
 801397a:	f7f8 f987 	bl	800bc8c <pbuf_remove_header>
 801397e:	4603      	mov	r3, r0
 8013980:	2b00      	cmp	r3, #0
 8013982:	d009      	beq.n	8013998 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8013984:	4b40      	ldr	r3, [pc, #256]	; (8013a88 <icmp_input+0x1f8>)
 8013986:	22b6      	movs	r2, #182	; 0xb6
 8013988:	4940      	ldr	r1, [pc, #256]	; (8013a8c <icmp_input+0x1fc>)
 801398a:	4841      	ldr	r0, [pc, #260]	; (8013a90 <icmp_input+0x200>)
 801398c:	f001 fc64 	bl	8015258 <iprintf>
          pbuf_free(r);
 8013990:	6978      	ldr	r0, [r7, #20]
 8013992:	f7f8 fa01 	bl	800bd98 <pbuf_free>
          goto icmperr;
 8013996:	e06c      	b.n	8013a72 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013998:	6879      	ldr	r1, [r7, #4]
 801399a:	6978      	ldr	r0, [r7, #20]
 801399c:	f7f8 fb20 	bl	800bfe0 <pbuf_copy>
 80139a0:	4603      	mov	r3, r0
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d003      	beq.n	80139ae <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80139a6:	6978      	ldr	r0, [r7, #20]
 80139a8:	f7f8 f9f6 	bl	800bd98 <pbuf_free>
          goto icmperr;
 80139ac:	e061      	b.n	8013a72 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80139ae:	6878      	ldr	r0, [r7, #4]
 80139b0:	f7f8 f9f2 	bl	800bd98 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	607b      	str	r3, [r7, #4]
 80139b8:	e00f      	b.n	80139da <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80139ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139bc:	330e      	adds	r3, #14
 80139be:	4619      	mov	r1, r3
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f7f8 f963 	bl	800bc8c <pbuf_remove_header>
 80139c6:	4603      	mov	r3, r0
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d006      	beq.n	80139da <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80139cc:	4b2e      	ldr	r3, [pc, #184]	; (8013a88 <icmp_input+0x1f8>)
 80139ce:	22c7      	movs	r2, #199	; 0xc7
 80139d0:	4930      	ldr	r1, [pc, #192]	; (8013a94 <icmp_input+0x204>)
 80139d2:	482f      	ldr	r0, [pc, #188]	; (8013a90 <icmp_input+0x200>)
 80139d4:	f001 fc40 	bl	8015258 <iprintf>
          goto icmperr;
 80139d8:	e04b      	b.n	8013a72 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	685b      	ldr	r3, [r3, #4]
 80139de:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80139e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80139e2:	4619      	mov	r1, r3
 80139e4:	6878      	ldr	r0, [r7, #4]
 80139e6:	f7f8 f941 	bl	800bc6c <pbuf_add_header>
 80139ea:	4603      	mov	r3, r0
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d12b      	bne.n	8013a48 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	685b      	ldr	r3, [r3, #4]
 80139f4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80139f6:	69fb      	ldr	r3, [r7, #28]
 80139f8:	681a      	ldr	r2, [r3, #0]
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80139fe:	4b20      	ldr	r3, [pc, #128]	; (8013a80 <icmp_input+0x1f0>)
 8013a00:	691a      	ldr	r2, [r3, #16]
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8013a06:	693b      	ldr	r3, [r7, #16]
 8013a08:	2200      	movs	r2, #0
 8013a0a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013a0c:	693b      	ldr	r3, [r7, #16]
 8013a0e:	2200      	movs	r2, #0
 8013a10:	709a      	strb	r2, [r3, #2]
 8013a12:	2200      	movs	r2, #0
 8013a14:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	22ff      	movs	r2, #255	; 0xff
 8013a1a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	2200      	movs	r2, #0
 8013a20:	729a      	strb	r2, [r3, #10]
 8013a22:	2200      	movs	r2, #0
 8013a24:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8013a26:	683b      	ldr	r3, [r7, #0]
 8013a28:	9302      	str	r3, [sp, #8]
 8013a2a:	2301      	movs	r3, #1
 8013a2c:	9301      	str	r3, [sp, #4]
 8013a2e:	2300      	movs	r3, #0
 8013a30:	9300      	str	r3, [sp, #0]
 8013a32:	23ff      	movs	r3, #255	; 0xff
 8013a34:	2200      	movs	r2, #0
 8013a36:	69f9      	ldr	r1, [r7, #28]
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f000 fa73 	bl	8013f24 <ip4_output_if>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8013a42:	e001      	b.n	8013a48 <icmp_input+0x1b8>
      break;
 8013a44:	bf00      	nop
 8013a46:	e000      	b.n	8013a4a <icmp_input+0x1ba>
      break;
 8013a48:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8013a4a:	6878      	ldr	r0, [r7, #4]
 8013a4c:	f7f8 f9a4 	bl	800bd98 <pbuf_free>
  return;
 8013a50:	e013      	b.n	8013a7a <icmp_input+0x1ea>
    goto lenerr;
 8013a52:	bf00      	nop
 8013a54:	e002      	b.n	8013a5c <icmp_input+0x1cc>
    goto lenerr;
 8013a56:	bf00      	nop
 8013a58:	e000      	b.n	8013a5c <icmp_input+0x1cc>
        goto lenerr;
 8013a5a:	bf00      	nop
lenerr:
  pbuf_free(p);
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f7f8 f99b 	bl	800bd98 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013a62:	e00a      	b.n	8013a7a <icmp_input+0x1ea>
        goto icmperr;
 8013a64:	bf00      	nop
 8013a66:	e004      	b.n	8013a72 <icmp_input+0x1e2>
        goto icmperr;
 8013a68:	bf00      	nop
 8013a6a:	e002      	b.n	8013a72 <icmp_input+0x1e2>
          goto icmperr;
 8013a6c:	bf00      	nop
 8013a6e:	e000      	b.n	8013a72 <icmp_input+0x1e2>
          goto icmperr;
 8013a70:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8013a72:	6878      	ldr	r0, [r7, #4]
 8013a74:	f7f8 f990 	bl	800bd98 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8013a78:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8013a7a:	3728      	adds	r7, #40	; 0x28
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}
 8013a80:	20007ccc 	.word	0x20007ccc
 8013a84:	20007ce0 	.word	0x20007ce0
 8013a88:	08018d5c 	.word	0x08018d5c
 8013a8c:	08018d94 	.word	0x08018d94
 8013a90:	08018dcc 	.word	0x08018dcc
 8013a94:	08018df4 	.word	0x08018df4

08013a98 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b082      	sub	sp, #8
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
 8013aa0:	460b      	mov	r3, r1
 8013aa2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8013aa4:	78fb      	ldrb	r3, [r7, #3]
 8013aa6:	461a      	mov	r2, r3
 8013aa8:	2103      	movs	r1, #3
 8013aaa:	6878      	ldr	r0, [r7, #4]
 8013aac:	f000 f814 	bl	8013ad8 <icmp_send_response>
}
 8013ab0:	bf00      	nop
 8013ab2:	3708      	adds	r7, #8
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	bd80      	pop	{r7, pc}

08013ab8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b082      	sub	sp, #8
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
 8013ac0:	460b      	mov	r3, r1
 8013ac2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8013ac4:	78fb      	ldrb	r3, [r7, #3]
 8013ac6:	461a      	mov	r2, r3
 8013ac8:	210b      	movs	r1, #11
 8013aca:	6878      	ldr	r0, [r7, #4]
 8013acc:	f000 f804 	bl	8013ad8 <icmp_send_response>
}
 8013ad0:	bf00      	nop
 8013ad2:	3708      	adds	r7, #8
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	bd80      	pop	{r7, pc}

08013ad8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b08c      	sub	sp, #48	; 0x30
 8013adc:	af04      	add	r7, sp, #16
 8013ade:	6078      	str	r0, [r7, #4]
 8013ae0:	460b      	mov	r3, r1
 8013ae2:	70fb      	strb	r3, [r7, #3]
 8013ae4:	4613      	mov	r3, r2
 8013ae6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013ae8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013aec:	2124      	movs	r1, #36	; 0x24
 8013aee:	2022      	movs	r0, #34	; 0x22
 8013af0:	f7f7 fe72 	bl	800b7d8 <pbuf_alloc>
 8013af4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8013af6:	69fb      	ldr	r3, [r7, #28]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d04c      	beq.n	8013b96 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013afc:	69fb      	ldr	r3, [r7, #28]
 8013afe:	895b      	ldrh	r3, [r3, #10]
 8013b00:	2b23      	cmp	r3, #35	; 0x23
 8013b02:	d806      	bhi.n	8013b12 <icmp_send_response+0x3a>
 8013b04:	4b26      	ldr	r3, [pc, #152]	; (8013ba0 <icmp_send_response+0xc8>)
 8013b06:	f240 1269 	movw	r2, #361	; 0x169
 8013b0a:	4926      	ldr	r1, [pc, #152]	; (8013ba4 <icmp_send_response+0xcc>)
 8013b0c:	4826      	ldr	r0, [pc, #152]	; (8013ba8 <icmp_send_response+0xd0>)
 8013b0e:	f001 fba3 	bl	8015258 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	685b      	ldr	r3, [r3, #4]
 8013b16:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013b18:	69fb      	ldr	r3, [r7, #28]
 8013b1a:	685b      	ldr	r3, [r3, #4]
 8013b1c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	78fa      	ldrb	r2, [r7, #3]
 8013b22:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8013b24:	697b      	ldr	r3, [r7, #20]
 8013b26:	78ba      	ldrb	r2, [r7, #2]
 8013b28:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8013b2a:	697b      	ldr	r3, [r7, #20]
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	711a      	strb	r2, [r3, #4]
 8013b30:	2200      	movs	r2, #0
 8013b32:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8013b34:	697b      	ldr	r3, [r7, #20]
 8013b36:	2200      	movs	r2, #0
 8013b38:	719a      	strb	r2, [r3, #6]
 8013b3a:	2200      	movs	r2, #0
 8013b3c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8013b3e:	69fb      	ldr	r3, [r7, #28]
 8013b40:	685b      	ldr	r3, [r3, #4]
 8013b42:	f103 0008 	add.w	r0, r3, #8
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	685b      	ldr	r3, [r3, #4]
 8013b4a:	221c      	movs	r2, #28
 8013b4c:	4619      	mov	r1, r3
 8013b4e:	f001 fb56 	bl	80151fe <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8013b52:	69bb      	ldr	r3, [r7, #24]
 8013b54:	68db      	ldr	r3, [r3, #12]
 8013b56:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8013b58:	f107 030c 	add.w	r3, r7, #12
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f000 f825 	bl	8013bac <ip4_route>
 8013b62:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8013b64:	693b      	ldr	r3, [r7, #16]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d011      	beq.n	8013b8e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8013b6a:	697b      	ldr	r3, [r7, #20]
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	709a      	strb	r2, [r3, #2]
 8013b70:	2200      	movs	r2, #0
 8013b72:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8013b74:	f107 020c 	add.w	r2, r7, #12
 8013b78:	693b      	ldr	r3, [r7, #16]
 8013b7a:	9302      	str	r3, [sp, #8]
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	9301      	str	r3, [sp, #4]
 8013b80:	2300      	movs	r3, #0
 8013b82:	9300      	str	r3, [sp, #0]
 8013b84:	23ff      	movs	r3, #255	; 0xff
 8013b86:	2100      	movs	r1, #0
 8013b88:	69f8      	ldr	r0, [r7, #28]
 8013b8a:	f000 f9cb 	bl	8013f24 <ip4_output_if>
  }
  pbuf_free(q);
 8013b8e:	69f8      	ldr	r0, [r7, #28]
 8013b90:	f7f8 f902 	bl	800bd98 <pbuf_free>
 8013b94:	e000      	b.n	8013b98 <icmp_send_response+0xc0>
    return;
 8013b96:	bf00      	nop
}
 8013b98:	3720      	adds	r7, #32
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bd80      	pop	{r7, pc}
 8013b9e:	bf00      	nop
 8013ba0:	08018d5c 	.word	0x08018d5c
 8013ba4:	08018e28 	.word	0x08018e28
 8013ba8:	08018dcc 	.word	0x08018dcc

08013bac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013bac:	b480      	push	{r7}
 8013bae:	b085      	sub	sp, #20
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8013bb4:	4b33      	ldr	r3, [pc, #204]	; (8013c84 <ip4_route+0xd8>)
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	60fb      	str	r3, [r7, #12]
 8013bba:	e036      	b.n	8013c2a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013bc2:	f003 0301 	and.w	r3, r3, #1
 8013bc6:	b2db      	uxtb	r3, r3
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d02b      	beq.n	8013c24 <ip4_route+0x78>
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013bd2:	089b      	lsrs	r3, r3, #2
 8013bd4:	f003 0301 	and.w	r3, r3, #1
 8013bd8:	b2db      	uxtb	r3, r3
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d022      	beq.n	8013c24 <ip4_route+0x78>
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	3304      	adds	r3, #4
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d01d      	beq.n	8013c24 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	681a      	ldr	r2, [r3, #0]
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	3304      	adds	r3, #4
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	405a      	eors	r2, r3
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	3308      	adds	r3, #8
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	4013      	ands	r3, r2
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d101      	bne.n	8013c04 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	e038      	b.n	8013c76 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c0a:	f003 0302 	and.w	r3, r3, #2
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d108      	bne.n	8013c24 <ip4_route+0x78>
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681a      	ldr	r2, [r3, #0]
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	330c      	adds	r3, #12
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	429a      	cmp	r2, r3
 8013c1e:	d101      	bne.n	8013c24 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	e028      	b.n	8013c76 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	60fb      	str	r3, [r7, #12]
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d1c5      	bne.n	8013bbc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013c30:	4b15      	ldr	r3, [pc, #84]	; (8013c88 <ip4_route+0xdc>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d01a      	beq.n	8013c6e <ip4_route+0xc2>
 8013c38:	4b13      	ldr	r3, [pc, #76]	; (8013c88 <ip4_route+0xdc>)
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c40:	f003 0301 	and.w	r3, r3, #1
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d012      	beq.n	8013c6e <ip4_route+0xc2>
 8013c48:	4b0f      	ldr	r3, [pc, #60]	; (8013c88 <ip4_route+0xdc>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c50:	f003 0304 	and.w	r3, r3, #4
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d00a      	beq.n	8013c6e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013c58:	4b0b      	ldr	r3, [pc, #44]	; (8013c88 <ip4_route+0xdc>)
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	3304      	adds	r3, #4
 8013c5e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d004      	beq.n	8013c6e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	b2db      	uxtb	r3, r3
 8013c6a:	2b7f      	cmp	r3, #127	; 0x7f
 8013c6c:	d101      	bne.n	8013c72 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	e001      	b.n	8013c76 <ip4_route+0xca>
  }

  return netif_default;
 8013c72:	4b05      	ldr	r3, [pc, #20]	; (8013c88 <ip4_route+0xdc>)
 8013c74:	681b      	ldr	r3, [r3, #0]
}
 8013c76:	4618      	mov	r0, r3
 8013c78:	3714      	adds	r7, #20
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c80:	4770      	bx	lr
 8013c82:	bf00      	nop
 8013c84:	2000b3d0 	.word	0x2000b3d0
 8013c88:	2000b3d4 	.word	0x2000b3d4

08013c8c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b082      	sub	sp, #8
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c9a:	f003 0301 	and.w	r3, r3, #1
 8013c9e:	b2db      	uxtb	r3, r3
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d016      	beq.n	8013cd2 <ip4_input_accept+0x46>
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	3304      	adds	r3, #4
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d011      	beq.n	8013cd2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013cae:	4b0b      	ldr	r3, [pc, #44]	; (8013cdc <ip4_input_accept+0x50>)
 8013cb0:	695a      	ldr	r2, [r3, #20]
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	3304      	adds	r3, #4
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	429a      	cmp	r2, r3
 8013cba:	d008      	beq.n	8013cce <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013cbc:	4b07      	ldr	r3, [pc, #28]	; (8013cdc <ip4_input_accept+0x50>)
 8013cbe:	695b      	ldr	r3, [r3, #20]
 8013cc0:	6879      	ldr	r1, [r7, #4]
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f000 fa06 	bl	80140d4 <ip4_addr_isbroadcast_u32>
 8013cc8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d001      	beq.n	8013cd2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013cce:	2301      	movs	r3, #1
 8013cd0:	e000      	b.n	8013cd4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013cd2:	2300      	movs	r3, #0
}
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3708      	adds	r7, #8
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}
 8013cdc:	20007ccc 	.word	0x20007ccc

08013ce0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b086      	sub	sp, #24
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
 8013ce8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	685b      	ldr	r3, [r3, #4]
 8013cee:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8013cf0:	697b      	ldr	r3, [r7, #20]
 8013cf2:	781b      	ldrb	r3, [r3, #0]
 8013cf4:	091b      	lsrs	r3, r3, #4
 8013cf6:	b2db      	uxtb	r3, r3
 8013cf8:	2b04      	cmp	r3, #4
 8013cfa:	d004      	beq.n	8013d06 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013cfc:	6878      	ldr	r0, [r7, #4]
 8013cfe:	f7f8 f84b 	bl	800bd98 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013d02:	2300      	movs	r3, #0
 8013d04:	e105      	b.n	8013f12 <ip4_input+0x232>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013d06:	697b      	ldr	r3, [r7, #20]
 8013d08:	781b      	ldrb	r3, [r3, #0]
 8013d0a:	f003 030f 	and.w	r3, r3, #15
 8013d0e:	b2db      	uxtb	r3, r3
 8013d10:	009b      	lsls	r3, r3, #2
 8013d12:	b2db      	uxtb	r3, r3
 8013d14:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013d16:	697b      	ldr	r3, [r7, #20]
 8013d18:	885b      	ldrh	r3, [r3, #2]
 8013d1a:	b29b      	uxth	r3, r3
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7f6 fc5d 	bl	800a5dc <lwip_htons>
 8013d22:	4603      	mov	r3, r0
 8013d24:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	891b      	ldrh	r3, [r3, #8]
 8013d2a:	89ba      	ldrh	r2, [r7, #12]
 8013d2c:	429a      	cmp	r2, r3
 8013d2e:	d204      	bcs.n	8013d3a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8013d30:	89bb      	ldrh	r3, [r7, #12]
 8013d32:	4619      	mov	r1, r3
 8013d34:	6878      	ldr	r0, [r7, #4]
 8013d36:	f7f7 fea9 	bl	800ba8c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	895b      	ldrh	r3, [r3, #10]
 8013d3e:	89fa      	ldrh	r2, [r7, #14]
 8013d40:	429a      	cmp	r2, r3
 8013d42:	d807      	bhi.n	8013d54 <ip4_input+0x74>
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	891b      	ldrh	r3, [r3, #8]
 8013d48:	89ba      	ldrh	r2, [r7, #12]
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d802      	bhi.n	8013d54 <ip4_input+0x74>
 8013d4e:	89fb      	ldrh	r3, [r7, #14]
 8013d50:	2b13      	cmp	r3, #19
 8013d52:	d804      	bhi.n	8013d5e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f7f8 f81f 	bl	800bd98 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	e0d9      	b.n	8013f12 <ip4_input+0x232>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013d5e:	697b      	ldr	r3, [r7, #20]
 8013d60:	691b      	ldr	r3, [r3, #16]
 8013d62:	4a6e      	ldr	r2, [pc, #440]	; (8013f1c <ip4_input+0x23c>)
 8013d64:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013d66:	697b      	ldr	r3, [r7, #20]
 8013d68:	68db      	ldr	r3, [r3, #12]
 8013d6a:	4a6c      	ldr	r2, [pc, #432]	; (8013f1c <ip4_input+0x23c>)
 8013d6c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013d6e:	4b6b      	ldr	r3, [pc, #428]	; (8013f1c <ip4_input+0x23c>)
 8013d70:	695b      	ldr	r3, [r3, #20]
 8013d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013d76:	2be0      	cmp	r3, #224	; 0xe0
 8013d78:	d112      	bne.n	8013da0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013d7a:	683b      	ldr	r3, [r7, #0]
 8013d7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013d80:	f003 0301 	and.w	r3, r3, #1
 8013d84:	b2db      	uxtb	r3, r3
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d007      	beq.n	8013d9a <ip4_input+0xba>
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	3304      	adds	r3, #4
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d002      	beq.n	8013d9a <ip4_input+0xba>
      netif = inp;
 8013d94:	683b      	ldr	r3, [r7, #0]
 8013d96:	613b      	str	r3, [r7, #16]
 8013d98:	e02a      	b.n	8013df0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013d9a:	2300      	movs	r3, #0
 8013d9c:	613b      	str	r3, [r7, #16]
 8013d9e:	e027      	b.n	8013df0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013da0:	6838      	ldr	r0, [r7, #0]
 8013da2:	f7ff ff73 	bl	8013c8c <ip4_input_accept>
 8013da6:	4603      	mov	r3, r0
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d002      	beq.n	8013db2 <ip4_input+0xd2>
      netif = inp;
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	613b      	str	r3, [r7, #16]
 8013db0:	e01e      	b.n	8013df0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8013db2:	2300      	movs	r3, #0
 8013db4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013db6:	4b59      	ldr	r3, [pc, #356]	; (8013f1c <ip4_input+0x23c>)
 8013db8:	695b      	ldr	r3, [r3, #20]
 8013dba:	b2db      	uxtb	r3, r3
 8013dbc:	2b7f      	cmp	r3, #127	; 0x7f
 8013dbe:	d017      	beq.n	8013df0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013dc0:	4b57      	ldr	r3, [pc, #348]	; (8013f20 <ip4_input+0x240>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	613b      	str	r3, [r7, #16]
 8013dc6:	e00e      	b.n	8013de6 <ip4_input+0x106>
          if (netif == inp) {
 8013dc8:	693a      	ldr	r2, [r7, #16]
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	d006      	beq.n	8013dde <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013dd0:	6938      	ldr	r0, [r7, #16]
 8013dd2:	f7ff ff5b 	bl	8013c8c <ip4_input_accept>
 8013dd6:	4603      	mov	r3, r0
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d108      	bne.n	8013dee <ip4_input+0x10e>
 8013ddc:	e000      	b.n	8013de0 <ip4_input+0x100>
            continue;
 8013dde:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013de0:	693b      	ldr	r3, [r7, #16]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	613b      	str	r3, [r7, #16]
 8013de6:	693b      	ldr	r3, [r7, #16]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d1ed      	bne.n	8013dc8 <ip4_input+0xe8>
 8013dec:	e000      	b.n	8013df0 <ip4_input+0x110>
            break;
 8013dee:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013df0:	4b4a      	ldr	r3, [pc, #296]	; (8013f1c <ip4_input+0x23c>)
 8013df2:	691b      	ldr	r3, [r3, #16]
 8013df4:	6839      	ldr	r1, [r7, #0]
 8013df6:	4618      	mov	r0, r3
 8013df8:	f000 f96c 	bl	80140d4 <ip4_addr_isbroadcast_u32>
 8013dfc:	4603      	mov	r3, r0
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d105      	bne.n	8013e0e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013e02:	4b46      	ldr	r3, [pc, #280]	; (8013f1c <ip4_input+0x23c>)
 8013e04:	691b      	ldr	r3, [r3, #16]
 8013e06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013e0a:	2be0      	cmp	r3, #224	; 0xe0
 8013e0c:	d104      	bne.n	8013e18 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013e0e:	6878      	ldr	r0, [r7, #4]
 8013e10:	f7f7 ffc2 	bl	800bd98 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013e14:	2300      	movs	r3, #0
 8013e16:	e07c      	b.n	8013f12 <ip4_input+0x232>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013e18:	693b      	ldr	r3, [r7, #16]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d104      	bne.n	8013e28 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013e1e:	6878      	ldr	r0, [r7, #4]
 8013e20:	f7f7 ffba 	bl	800bd98 <pbuf_free>
    return ERR_OK;
 8013e24:	2300      	movs	r3, #0
 8013e26:	e074      	b.n	8013f12 <ip4_input+0x232>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013e28:	697b      	ldr	r3, [r7, #20]
 8013e2a:	88db      	ldrh	r3, [r3, #6]
 8013e2c:	b29b      	uxth	r3, r3
 8013e2e:	461a      	mov	r2, r3
 8013e30:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013e34:	4013      	ands	r3, r2
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d00b      	beq.n	8013e52 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013e3a:	6878      	ldr	r0, [r7, #4]
 8013e3c:	f000 fc90 	bl	8014760 <ip4_reass>
 8013e40:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d101      	bne.n	8013e4c <ip4_input+0x16c>
      return ERR_OK;
 8013e48:	2300      	movs	r3, #0
 8013e4a:	e062      	b.n	8013f12 <ip4_input+0x232>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	685b      	ldr	r3, [r3, #4]
 8013e50:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013e52:	4a32      	ldr	r2, [pc, #200]	; (8013f1c <ip4_input+0x23c>)
 8013e54:	693b      	ldr	r3, [r7, #16]
 8013e56:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013e58:	4a30      	ldr	r2, [pc, #192]	; (8013f1c <ip4_input+0x23c>)
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013e5e:	4a2f      	ldr	r2, [pc, #188]	; (8013f1c <ip4_input+0x23c>)
 8013e60:	697b      	ldr	r3, [r7, #20]
 8013e62:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013e64:	697b      	ldr	r3, [r7, #20]
 8013e66:	781b      	ldrb	r3, [r3, #0]
 8013e68:	f003 030f 	and.w	r3, r3, #15
 8013e6c:	b2db      	uxtb	r3, r3
 8013e6e:	009b      	lsls	r3, r3, #2
 8013e70:	b2db      	uxtb	r3, r3
 8013e72:	b29a      	uxth	r2, r3
 8013e74:	4b29      	ldr	r3, [pc, #164]	; (8013f1c <ip4_input+0x23c>)
 8013e76:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013e78:	89fb      	ldrh	r3, [r7, #14]
 8013e7a:	4619      	mov	r1, r3
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f7f7 ff05 	bl	800bc8c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013e82:	697b      	ldr	r3, [r7, #20]
 8013e84:	7a5b      	ldrb	r3, [r3, #9]
 8013e86:	2b06      	cmp	r3, #6
 8013e88:	d009      	beq.n	8013e9e <ip4_input+0x1be>
 8013e8a:	2b11      	cmp	r3, #17
 8013e8c:	d002      	beq.n	8013e94 <ip4_input+0x1b4>
 8013e8e:	2b01      	cmp	r3, #1
 8013e90:	d00a      	beq.n	8013ea8 <ip4_input+0x1c8>
 8013e92:	e00e      	b.n	8013eb2 <ip4_input+0x1d2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013e94:	6839      	ldr	r1, [r7, #0]
 8013e96:	6878      	ldr	r0, [r7, #4]
 8013e98:	f7fe fc6a 	bl	8012770 <udp_input>
        break;
 8013e9c:	e026      	b.n	8013eec <ip4_input+0x20c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013e9e:	6839      	ldr	r1, [r7, #0]
 8013ea0:	6878      	ldr	r0, [r7, #4]
 8013ea2:	f7fa f84f 	bl	800df44 <tcp_input>
        break;
 8013ea6:	e021      	b.n	8013eec <ip4_input+0x20c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013ea8:	6839      	ldr	r1, [r7, #0]
 8013eaa:	6878      	ldr	r0, [r7, #4]
 8013eac:	f7ff fcf0 	bl	8013890 <icmp_input>
        break;
 8013eb0:	e01c      	b.n	8013eec <ip4_input+0x20c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013eb2:	4b1a      	ldr	r3, [pc, #104]	; (8013f1c <ip4_input+0x23c>)
 8013eb4:	695b      	ldr	r3, [r3, #20]
 8013eb6:	6939      	ldr	r1, [r7, #16]
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f000 f90b 	bl	80140d4 <ip4_addr_isbroadcast_u32>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d10f      	bne.n	8013ee4 <ip4_input+0x204>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013ec4:	4b15      	ldr	r3, [pc, #84]	; (8013f1c <ip4_input+0x23c>)
 8013ec6:	695b      	ldr	r3, [r3, #20]
 8013ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013ecc:	2be0      	cmp	r3, #224	; 0xe0
 8013ece:	d009      	beq.n	8013ee4 <ip4_input+0x204>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013ed0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013ed4:	4619      	mov	r1, r3
 8013ed6:	6878      	ldr	r0, [r7, #4]
 8013ed8:	f7f7 ff4b 	bl	800bd72 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013edc:	2102      	movs	r1, #2
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	f7ff fdda 	bl	8013a98 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f7f7 ff57 	bl	800bd98 <pbuf_free>
        break;
 8013eea:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013eec:	4b0b      	ldr	r3, [pc, #44]	; (8013f1c <ip4_input+0x23c>)
 8013eee:	2200      	movs	r2, #0
 8013ef0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013ef2:	4b0a      	ldr	r3, [pc, #40]	; (8013f1c <ip4_input+0x23c>)
 8013ef4:	2200      	movs	r2, #0
 8013ef6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013ef8:	4b08      	ldr	r3, [pc, #32]	; (8013f1c <ip4_input+0x23c>)
 8013efa:	2200      	movs	r2, #0
 8013efc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013efe:	4b07      	ldr	r3, [pc, #28]	; (8013f1c <ip4_input+0x23c>)
 8013f00:	2200      	movs	r2, #0
 8013f02:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013f04:	4b05      	ldr	r3, [pc, #20]	; (8013f1c <ip4_input+0x23c>)
 8013f06:	2200      	movs	r2, #0
 8013f08:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013f0a:	4b04      	ldr	r3, [pc, #16]	; (8013f1c <ip4_input+0x23c>)
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013f10:	2300      	movs	r3, #0
}
 8013f12:	4618      	mov	r0, r3
 8013f14:	3718      	adds	r7, #24
 8013f16:	46bd      	mov	sp, r7
 8013f18:	bd80      	pop	{r7, pc}
 8013f1a:	bf00      	nop
 8013f1c:	20007ccc 	.word	0x20007ccc
 8013f20:	2000b3d0 	.word	0x2000b3d0

08013f24 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b08a      	sub	sp, #40	; 0x28
 8013f28:	af04      	add	r7, sp, #16
 8013f2a:	60f8      	str	r0, [r7, #12]
 8013f2c:	60b9      	str	r1, [r7, #8]
 8013f2e:	607a      	str	r2, [r7, #4]
 8013f30:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d009      	beq.n	8013f50 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013f3c:	68bb      	ldr	r3, [r7, #8]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d003      	beq.n	8013f4a <ip4_output_if+0x26>
 8013f42:	68bb      	ldr	r3, [r7, #8]
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d102      	bne.n	8013f50 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f4c:	3304      	adds	r3, #4
 8013f4e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013f50:	78fa      	ldrb	r2, [r7, #3]
 8013f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f54:	9302      	str	r3, [sp, #8]
 8013f56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013f5a:	9301      	str	r3, [sp, #4]
 8013f5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013f60:	9300      	str	r3, [sp, #0]
 8013f62:	4613      	mov	r3, r2
 8013f64:	687a      	ldr	r2, [r7, #4]
 8013f66:	6979      	ldr	r1, [r7, #20]
 8013f68:	68f8      	ldr	r0, [r7, #12]
 8013f6a:	f000 f805 	bl	8013f78 <ip4_output_if_src>
 8013f6e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013f70:	4618      	mov	r0, r3
 8013f72:	3718      	adds	r7, #24
 8013f74:	46bd      	mov	sp, r7
 8013f76:	bd80      	pop	{r7, pc}

08013f78 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b088      	sub	sp, #32
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	60f8      	str	r0, [r7, #12]
 8013f80:	60b9      	str	r1, [r7, #8]
 8013f82:	607a      	str	r2, [r7, #4]
 8013f84:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	7b9b      	ldrb	r3, [r3, #14]
 8013f8a:	2b01      	cmp	r3, #1
 8013f8c:	d006      	beq.n	8013f9c <ip4_output_if_src+0x24>
 8013f8e:	4b4b      	ldr	r3, [pc, #300]	; (80140bc <ip4_output_if_src+0x144>)
 8013f90:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013f94:	494a      	ldr	r1, [pc, #296]	; (80140c0 <ip4_output_if_src+0x148>)
 8013f96:	484b      	ldr	r0, [pc, #300]	; (80140c4 <ip4_output_if_src+0x14c>)
 8013f98:	f001 f95e 	bl	8015258 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d060      	beq.n	8014064 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013fa2:	2314      	movs	r3, #20
 8013fa4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013fa6:	2114      	movs	r1, #20
 8013fa8:	68f8      	ldr	r0, [r7, #12]
 8013faa:	f7f7 fe5f 	bl	800bc6c <pbuf_add_header>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d002      	beq.n	8013fba <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013fb4:	f06f 0301 	mvn.w	r3, #1
 8013fb8:	e07c      	b.n	80140b4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	685b      	ldr	r3, [r3, #4]
 8013fbe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	895b      	ldrh	r3, [r3, #10]
 8013fc4:	2b13      	cmp	r3, #19
 8013fc6:	d806      	bhi.n	8013fd6 <ip4_output_if_src+0x5e>
 8013fc8:	4b3c      	ldr	r3, [pc, #240]	; (80140bc <ip4_output_if_src+0x144>)
 8013fca:	f240 3289 	movw	r2, #905	; 0x389
 8013fce:	493e      	ldr	r1, [pc, #248]	; (80140c8 <ip4_output_if_src+0x150>)
 8013fd0:	483c      	ldr	r0, [pc, #240]	; (80140c4 <ip4_output_if_src+0x14c>)
 8013fd2:	f001 f941 	bl	8015258 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013fd6:	69fb      	ldr	r3, [r7, #28]
 8013fd8:	78fa      	ldrb	r2, [r7, #3]
 8013fda:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013fdc:	69fb      	ldr	r3, [r7, #28]
 8013fde:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013fe2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	681a      	ldr	r2, [r3, #0]
 8013fe8:	69fb      	ldr	r3, [r7, #28]
 8013fea:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013fec:	8b7b      	ldrh	r3, [r7, #26]
 8013fee:	089b      	lsrs	r3, r3, #2
 8013ff0:	b29b      	uxth	r3, r3
 8013ff2:	b2db      	uxtb	r3, r3
 8013ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ff8:	b2da      	uxtb	r2, r3
 8013ffa:	69fb      	ldr	r3, [r7, #28]
 8013ffc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013ffe:	69fb      	ldr	r3, [r7, #28]
 8014000:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014004:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	891b      	ldrh	r3, [r3, #8]
 801400a:	4618      	mov	r0, r3
 801400c:	f7f6 fae6 	bl	800a5dc <lwip_htons>
 8014010:	4603      	mov	r3, r0
 8014012:	461a      	mov	r2, r3
 8014014:	69fb      	ldr	r3, [r7, #28]
 8014016:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014018:	69fb      	ldr	r3, [r7, #28]
 801401a:	2200      	movs	r2, #0
 801401c:	719a      	strb	r2, [r3, #6]
 801401e:	2200      	movs	r2, #0
 8014020:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014022:	4b2a      	ldr	r3, [pc, #168]	; (80140cc <ip4_output_if_src+0x154>)
 8014024:	881b      	ldrh	r3, [r3, #0]
 8014026:	4618      	mov	r0, r3
 8014028:	f7f6 fad8 	bl	800a5dc <lwip_htons>
 801402c:	4603      	mov	r3, r0
 801402e:	461a      	mov	r2, r3
 8014030:	69fb      	ldr	r3, [r7, #28]
 8014032:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014034:	4b25      	ldr	r3, [pc, #148]	; (80140cc <ip4_output_if_src+0x154>)
 8014036:	881b      	ldrh	r3, [r3, #0]
 8014038:	3301      	adds	r3, #1
 801403a:	b29a      	uxth	r2, r3
 801403c:	4b23      	ldr	r3, [pc, #140]	; (80140cc <ip4_output_if_src+0x154>)
 801403e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014040:	68bb      	ldr	r3, [r7, #8]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d104      	bne.n	8014050 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014046:	4b22      	ldr	r3, [pc, #136]	; (80140d0 <ip4_output_if_src+0x158>)
 8014048:	681a      	ldr	r2, [r3, #0]
 801404a:	69fb      	ldr	r3, [r7, #28]
 801404c:	60da      	str	r2, [r3, #12]
 801404e:	e003      	b.n	8014058 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	681a      	ldr	r2, [r3, #0]
 8014054:	69fb      	ldr	r3, [r7, #28]
 8014056:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014058:	69fb      	ldr	r3, [r7, #28]
 801405a:	2200      	movs	r2, #0
 801405c:	729a      	strb	r2, [r3, #10]
 801405e:	2200      	movs	r2, #0
 8014060:	72da      	strb	r2, [r3, #11]
 8014062:	e00f      	b.n	8014084 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	895b      	ldrh	r3, [r3, #10]
 8014068:	2b13      	cmp	r3, #19
 801406a:	d802      	bhi.n	8014072 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801406c:	f06f 0301 	mvn.w	r3, #1
 8014070:	e020      	b.n	80140b4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	685b      	ldr	r3, [r3, #4]
 8014076:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014078:	69fb      	ldr	r3, [r7, #28]
 801407a:	691b      	ldr	r3, [r3, #16]
 801407c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801407e:	f107 0314 	add.w	r3, r7, #20
 8014082:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014086:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014088:	2b00      	cmp	r3, #0
 801408a:	d00c      	beq.n	80140a6 <ip4_output_if_src+0x12e>
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	891a      	ldrh	r2, [r3, #8]
 8014090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014092:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014094:	429a      	cmp	r2, r3
 8014096:	d906      	bls.n	80140a6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014098:	687a      	ldr	r2, [r7, #4]
 801409a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801409c:	68f8      	ldr	r0, [r7, #12]
 801409e:	f000 fd4b 	bl	8014b38 <ip4_frag>
 80140a2:	4603      	mov	r3, r0
 80140a4:	e006      	b.n	80140b4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80140a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140a8:	695b      	ldr	r3, [r3, #20]
 80140aa:	687a      	ldr	r2, [r7, #4]
 80140ac:	68f9      	ldr	r1, [r7, #12]
 80140ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140b0:	4798      	blx	r3
 80140b2:	4603      	mov	r3, r0
}
 80140b4:	4618      	mov	r0, r3
 80140b6:	3720      	adds	r7, #32
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}
 80140bc:	08018e54 	.word	0x08018e54
 80140c0:	08018e88 	.word	0x08018e88
 80140c4:	08018e94 	.word	0x08018e94
 80140c8:	08018ebc 	.word	0x08018ebc
 80140cc:	2000461e 	.word	0x2000461e
 80140d0:	08029e10 	.word	0x08029e10

080140d4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80140d4:	b480      	push	{r7}
 80140d6:	b085      	sub	sp, #20
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
 80140dc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80140e8:	d002      	beq.n	80140f0 <ip4_addr_isbroadcast_u32+0x1c>
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d101      	bne.n	80140f4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80140f0:	2301      	movs	r3, #1
 80140f2:	e02a      	b.n	801414a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80140f4:	683b      	ldr	r3, [r7, #0]
 80140f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80140fa:	f003 0302 	and.w	r3, r3, #2
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d101      	bne.n	8014106 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014102:	2300      	movs	r3, #0
 8014104:	e021      	b.n	801414a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014106:	683b      	ldr	r3, [r7, #0]
 8014108:	3304      	adds	r3, #4
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	687a      	ldr	r2, [r7, #4]
 801410e:	429a      	cmp	r2, r3
 8014110:	d101      	bne.n	8014116 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014112:	2300      	movs	r3, #0
 8014114:	e019      	b.n	801414a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014116:	68fa      	ldr	r2, [r7, #12]
 8014118:	683b      	ldr	r3, [r7, #0]
 801411a:	3304      	adds	r3, #4
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	405a      	eors	r2, r3
 8014120:	683b      	ldr	r3, [r7, #0]
 8014122:	3308      	adds	r3, #8
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	4013      	ands	r3, r2
 8014128:	2b00      	cmp	r3, #0
 801412a:	d10d      	bne.n	8014148 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801412c:	683b      	ldr	r3, [r7, #0]
 801412e:	3308      	adds	r3, #8
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	43da      	mvns	r2, r3
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	3308      	adds	r3, #8
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014140:	429a      	cmp	r2, r3
 8014142:	d101      	bne.n	8014148 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014144:	2301      	movs	r3, #1
 8014146:	e000      	b.n	801414a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014148:	2300      	movs	r3, #0
  }
}
 801414a:	4618      	mov	r0, r3
 801414c:	3714      	adds	r7, #20
 801414e:	46bd      	mov	sp, r7
 8014150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014154:	4770      	bx	lr
	...

08014158 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b084      	sub	sp, #16
 801415c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801415e:	2300      	movs	r3, #0
 8014160:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014162:	4b12      	ldr	r3, [pc, #72]	; (80141ac <ip_reass_tmr+0x54>)
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014168:	e018      	b.n	801419c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	7fdb      	ldrb	r3, [r3, #31]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d00b      	beq.n	801418a <ip_reass_tmr+0x32>
      r->timer--;
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	7fdb      	ldrb	r3, [r3, #31]
 8014176:	3b01      	subs	r3, #1
 8014178:	b2da      	uxtb	r2, r3
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	60fb      	str	r3, [r7, #12]
 8014188:	e008      	b.n	801419c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014194:	68b9      	ldr	r1, [r7, #8]
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f000 f80a 	bl	80141b0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d1e3      	bne.n	801416a <ip_reass_tmr+0x12>
    }
  }
}
 80141a2:	bf00      	nop
 80141a4:	3710      	adds	r7, #16
 80141a6:	46bd      	mov	sp, r7
 80141a8:	bd80      	pop	{r7, pc}
 80141aa:	bf00      	nop
 80141ac:	20004620 	.word	0x20004620

080141b0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b088      	sub	sp, #32
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
 80141b8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80141ba:	2300      	movs	r3, #0
 80141bc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80141be:	683a      	ldr	r2, [r7, #0]
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	429a      	cmp	r2, r3
 80141c4:	d105      	bne.n	80141d2 <ip_reass_free_complete_datagram+0x22>
 80141c6:	4b45      	ldr	r3, [pc, #276]	; (80142dc <ip_reass_free_complete_datagram+0x12c>)
 80141c8:	22ab      	movs	r2, #171	; 0xab
 80141ca:	4945      	ldr	r1, [pc, #276]	; (80142e0 <ip_reass_free_complete_datagram+0x130>)
 80141cc:	4845      	ldr	r0, [pc, #276]	; (80142e4 <ip_reass_free_complete_datagram+0x134>)
 80141ce:	f001 f843 	bl	8015258 <iprintf>
  if (prev != NULL) {
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d00a      	beq.n	80141ee <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	687a      	ldr	r2, [r7, #4]
 80141de:	429a      	cmp	r2, r3
 80141e0:	d005      	beq.n	80141ee <ip_reass_free_complete_datagram+0x3e>
 80141e2:	4b3e      	ldr	r3, [pc, #248]	; (80142dc <ip_reass_free_complete_datagram+0x12c>)
 80141e4:	22ad      	movs	r2, #173	; 0xad
 80141e6:	4940      	ldr	r1, [pc, #256]	; (80142e8 <ip_reass_free_complete_datagram+0x138>)
 80141e8:	483e      	ldr	r0, [pc, #248]	; (80142e4 <ip_reass_free_complete_datagram+0x134>)
 80141ea:	f001 f835 	bl	8015258 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	685b      	ldr	r3, [r3, #4]
 80141f2:	685b      	ldr	r3, [r3, #4]
 80141f4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80141f6:	697b      	ldr	r3, [r7, #20]
 80141f8:	889b      	ldrh	r3, [r3, #4]
 80141fa:	b29b      	uxth	r3, r3
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d12a      	bne.n	8014256 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	685b      	ldr	r3, [r3, #4]
 8014204:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	681a      	ldr	r2, [r3, #0]
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801420e:	69bb      	ldr	r3, [r7, #24]
 8014210:	6858      	ldr	r0, [r3, #4]
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	3308      	adds	r3, #8
 8014216:	2214      	movs	r2, #20
 8014218:	4619      	mov	r1, r3
 801421a:	f000 fff0 	bl	80151fe <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801421e:	2101      	movs	r1, #1
 8014220:	69b8      	ldr	r0, [r7, #24]
 8014222:	f7ff fc49 	bl	8013ab8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014226:	69b8      	ldr	r0, [r7, #24]
 8014228:	f7f7 fe44 	bl	800beb4 <pbuf_clen>
 801422c:	4603      	mov	r3, r0
 801422e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014230:	8bfa      	ldrh	r2, [r7, #30]
 8014232:	8a7b      	ldrh	r3, [r7, #18]
 8014234:	4413      	add	r3, r2
 8014236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801423a:	db05      	blt.n	8014248 <ip_reass_free_complete_datagram+0x98>
 801423c:	4b27      	ldr	r3, [pc, #156]	; (80142dc <ip_reass_free_complete_datagram+0x12c>)
 801423e:	22bc      	movs	r2, #188	; 0xbc
 8014240:	492a      	ldr	r1, [pc, #168]	; (80142ec <ip_reass_free_complete_datagram+0x13c>)
 8014242:	4828      	ldr	r0, [pc, #160]	; (80142e4 <ip_reass_free_complete_datagram+0x134>)
 8014244:	f001 f808 	bl	8015258 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014248:	8bfa      	ldrh	r2, [r7, #30]
 801424a:	8a7b      	ldrh	r3, [r7, #18]
 801424c:	4413      	add	r3, r2
 801424e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014250:	69b8      	ldr	r0, [r7, #24]
 8014252:	f7f7 fda1 	bl	800bd98 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	685b      	ldr	r3, [r3, #4]
 801425a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801425c:	e01f      	b.n	801429e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801425e:	69bb      	ldr	r3, [r7, #24]
 8014260:	685b      	ldr	r3, [r3, #4]
 8014262:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014264:	69bb      	ldr	r3, [r7, #24]
 8014266:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801426e:	68f8      	ldr	r0, [r7, #12]
 8014270:	f7f7 fe20 	bl	800beb4 <pbuf_clen>
 8014274:	4603      	mov	r3, r0
 8014276:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014278:	8bfa      	ldrh	r2, [r7, #30]
 801427a:	8a7b      	ldrh	r3, [r7, #18]
 801427c:	4413      	add	r3, r2
 801427e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014282:	db05      	blt.n	8014290 <ip_reass_free_complete_datagram+0xe0>
 8014284:	4b15      	ldr	r3, [pc, #84]	; (80142dc <ip_reass_free_complete_datagram+0x12c>)
 8014286:	22cc      	movs	r2, #204	; 0xcc
 8014288:	4918      	ldr	r1, [pc, #96]	; (80142ec <ip_reass_free_complete_datagram+0x13c>)
 801428a:	4816      	ldr	r0, [pc, #88]	; (80142e4 <ip_reass_free_complete_datagram+0x134>)
 801428c:	f000 ffe4 	bl	8015258 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014290:	8bfa      	ldrh	r2, [r7, #30]
 8014292:	8a7b      	ldrh	r3, [r7, #18]
 8014294:	4413      	add	r3, r2
 8014296:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014298:	68f8      	ldr	r0, [r7, #12]
 801429a:	f7f7 fd7d 	bl	800bd98 <pbuf_free>
  while (p != NULL) {
 801429e:	69bb      	ldr	r3, [r7, #24]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d1dc      	bne.n	801425e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80142a4:	6839      	ldr	r1, [r7, #0]
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	f000 f8c2 	bl	8014430 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80142ac:	4b10      	ldr	r3, [pc, #64]	; (80142f0 <ip_reass_free_complete_datagram+0x140>)
 80142ae:	881b      	ldrh	r3, [r3, #0]
 80142b0:	8bfa      	ldrh	r2, [r7, #30]
 80142b2:	429a      	cmp	r2, r3
 80142b4:	d905      	bls.n	80142c2 <ip_reass_free_complete_datagram+0x112>
 80142b6:	4b09      	ldr	r3, [pc, #36]	; (80142dc <ip_reass_free_complete_datagram+0x12c>)
 80142b8:	22d2      	movs	r2, #210	; 0xd2
 80142ba:	490e      	ldr	r1, [pc, #56]	; (80142f4 <ip_reass_free_complete_datagram+0x144>)
 80142bc:	4809      	ldr	r0, [pc, #36]	; (80142e4 <ip_reass_free_complete_datagram+0x134>)
 80142be:	f000 ffcb 	bl	8015258 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80142c2:	4b0b      	ldr	r3, [pc, #44]	; (80142f0 <ip_reass_free_complete_datagram+0x140>)
 80142c4:	881a      	ldrh	r2, [r3, #0]
 80142c6:	8bfb      	ldrh	r3, [r7, #30]
 80142c8:	1ad3      	subs	r3, r2, r3
 80142ca:	b29a      	uxth	r2, r3
 80142cc:	4b08      	ldr	r3, [pc, #32]	; (80142f0 <ip_reass_free_complete_datagram+0x140>)
 80142ce:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80142d0:	8bfb      	ldrh	r3, [r7, #30]
}
 80142d2:	4618      	mov	r0, r3
 80142d4:	3720      	adds	r7, #32
 80142d6:	46bd      	mov	sp, r7
 80142d8:	bd80      	pop	{r7, pc}
 80142da:	bf00      	nop
 80142dc:	08018eec 	.word	0x08018eec
 80142e0:	08018f28 	.word	0x08018f28
 80142e4:	08018f34 	.word	0x08018f34
 80142e8:	08018f5c 	.word	0x08018f5c
 80142ec:	08018f70 	.word	0x08018f70
 80142f0:	20004624 	.word	0x20004624
 80142f4:	08018f90 	.word	0x08018f90

080142f8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b08a      	sub	sp, #40	; 0x28
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	6078      	str	r0, [r7, #4]
 8014300:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014302:	2300      	movs	r3, #0
 8014304:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014306:	2300      	movs	r3, #0
 8014308:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801430a:	2300      	movs	r3, #0
 801430c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801430e:	2300      	movs	r3, #0
 8014310:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014312:	2300      	movs	r3, #0
 8014314:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014316:	4b28      	ldr	r3, [pc, #160]	; (80143b8 <ip_reass_remove_oldest_datagram+0xc0>)
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801431c:	e030      	b.n	8014380 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014320:	695a      	ldr	r2, [r3, #20]
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	68db      	ldr	r3, [r3, #12]
 8014326:	429a      	cmp	r2, r3
 8014328:	d10c      	bne.n	8014344 <ip_reass_remove_oldest_datagram+0x4c>
 801432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801432c:	699a      	ldr	r2, [r3, #24]
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	691b      	ldr	r3, [r3, #16]
 8014332:	429a      	cmp	r2, r3
 8014334:	d106      	bne.n	8014344 <ip_reass_remove_oldest_datagram+0x4c>
 8014336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014338:	899a      	ldrh	r2, [r3, #12]
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	889b      	ldrh	r3, [r3, #4]
 801433e:	b29b      	uxth	r3, r3
 8014340:	429a      	cmp	r2, r3
 8014342:	d014      	beq.n	801436e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014344:	693b      	ldr	r3, [r7, #16]
 8014346:	3301      	adds	r3, #1
 8014348:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801434a:	6a3b      	ldr	r3, [r7, #32]
 801434c:	2b00      	cmp	r3, #0
 801434e:	d104      	bne.n	801435a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014352:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014354:	69fb      	ldr	r3, [r7, #28]
 8014356:	61bb      	str	r3, [r7, #24]
 8014358:	e009      	b.n	801436e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435c:	7fda      	ldrb	r2, [r3, #31]
 801435e:	6a3b      	ldr	r3, [r7, #32]
 8014360:	7fdb      	ldrb	r3, [r3, #31]
 8014362:	429a      	cmp	r2, r3
 8014364:	d803      	bhi.n	801436e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014368:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801436a:	69fb      	ldr	r3, [r7, #28]
 801436c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	2b00      	cmp	r3, #0
 8014374:	d001      	beq.n	801437a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014378:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801437c:	681b      	ldr	r3, [r3, #0]
 801437e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014382:	2b00      	cmp	r3, #0
 8014384:	d1cb      	bne.n	801431e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014386:	6a3b      	ldr	r3, [r7, #32]
 8014388:	2b00      	cmp	r3, #0
 801438a:	d008      	beq.n	801439e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801438c:	69b9      	ldr	r1, [r7, #24]
 801438e:	6a38      	ldr	r0, [r7, #32]
 8014390:	f7ff ff0e 	bl	80141b0 <ip_reass_free_complete_datagram>
 8014394:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014396:	697a      	ldr	r2, [r7, #20]
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	4413      	add	r3, r2
 801439c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801439e:	697a      	ldr	r2, [r7, #20]
 80143a0:	683b      	ldr	r3, [r7, #0]
 80143a2:	429a      	cmp	r2, r3
 80143a4:	da02      	bge.n	80143ac <ip_reass_remove_oldest_datagram+0xb4>
 80143a6:	693b      	ldr	r3, [r7, #16]
 80143a8:	2b01      	cmp	r3, #1
 80143aa:	dcac      	bgt.n	8014306 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80143ac:	697b      	ldr	r3, [r7, #20]
}
 80143ae:	4618      	mov	r0, r3
 80143b0:	3728      	adds	r7, #40	; 0x28
 80143b2:	46bd      	mov	sp, r7
 80143b4:	bd80      	pop	{r7, pc}
 80143b6:	bf00      	nop
 80143b8:	20004620 	.word	0x20004620

080143bc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b084      	sub	sp, #16
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
 80143c4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80143c6:	2004      	movs	r0, #4
 80143c8:	f7f6 fdf4 	bl	800afb4 <memp_malloc>
 80143cc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80143ce:	68fb      	ldr	r3, [r7, #12]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d110      	bne.n	80143f6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80143d4:	6839      	ldr	r1, [r7, #0]
 80143d6:	6878      	ldr	r0, [r7, #4]
 80143d8:	f7ff ff8e 	bl	80142f8 <ip_reass_remove_oldest_datagram>
 80143dc:	4602      	mov	r2, r0
 80143de:	683b      	ldr	r3, [r7, #0]
 80143e0:	4293      	cmp	r3, r2
 80143e2:	dc03      	bgt.n	80143ec <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80143e4:	2004      	movs	r0, #4
 80143e6:	f7f6 fde5 	bl	800afb4 <memp_malloc>
 80143ea:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d101      	bne.n	80143f6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80143f2:	2300      	movs	r3, #0
 80143f4:	e016      	b.n	8014424 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80143f6:	2220      	movs	r2, #32
 80143f8:	2100      	movs	r1, #0
 80143fa:	68f8      	ldr	r0, [r7, #12]
 80143fc:	f000 ff23 	bl	8015246 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	220f      	movs	r2, #15
 8014404:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014406:	4b09      	ldr	r3, [pc, #36]	; (801442c <ip_reass_enqueue_new_datagram+0x70>)
 8014408:	681a      	ldr	r2, [r3, #0]
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801440e:	4a07      	ldr	r2, [pc, #28]	; (801442c <ip_reass_enqueue_new_datagram+0x70>)
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	3308      	adds	r3, #8
 8014418:	2214      	movs	r2, #20
 801441a:	6879      	ldr	r1, [r7, #4]
 801441c:	4618      	mov	r0, r3
 801441e:	f000 feee 	bl	80151fe <memcpy>
  return ipr;
 8014422:	68fb      	ldr	r3, [r7, #12]
}
 8014424:	4618      	mov	r0, r3
 8014426:	3710      	adds	r7, #16
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}
 801442c:	20004620 	.word	0x20004620

08014430 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014430:	b580      	push	{r7, lr}
 8014432:	b082      	sub	sp, #8
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801443a:	4b10      	ldr	r3, [pc, #64]	; (801447c <ip_reass_dequeue_datagram+0x4c>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	687a      	ldr	r2, [r7, #4]
 8014440:	429a      	cmp	r2, r3
 8014442:	d104      	bne.n	801444e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	4a0c      	ldr	r2, [pc, #48]	; (801447c <ip_reass_dequeue_datagram+0x4c>)
 801444a:	6013      	str	r3, [r2, #0]
 801444c:	e00d      	b.n	801446a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801444e:	683b      	ldr	r3, [r7, #0]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d106      	bne.n	8014462 <ip_reass_dequeue_datagram+0x32>
 8014454:	4b0a      	ldr	r3, [pc, #40]	; (8014480 <ip_reass_dequeue_datagram+0x50>)
 8014456:	f240 1245 	movw	r2, #325	; 0x145
 801445a:	490a      	ldr	r1, [pc, #40]	; (8014484 <ip_reass_dequeue_datagram+0x54>)
 801445c:	480a      	ldr	r0, [pc, #40]	; (8014488 <ip_reass_dequeue_datagram+0x58>)
 801445e:	f000 fefb 	bl	8015258 <iprintf>
    prev->next = ipr->next;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681a      	ldr	r2, [r3, #0]
 8014466:	683b      	ldr	r3, [r7, #0]
 8014468:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801446a:	6879      	ldr	r1, [r7, #4]
 801446c:	2004      	movs	r0, #4
 801446e:	f7f6 fdf3 	bl	800b058 <memp_free>
}
 8014472:	bf00      	nop
 8014474:	3708      	adds	r7, #8
 8014476:	46bd      	mov	sp, r7
 8014478:	bd80      	pop	{r7, pc}
 801447a:	bf00      	nop
 801447c:	20004620 	.word	0x20004620
 8014480:	08018eec 	.word	0x08018eec
 8014484:	08018fb4 	.word	0x08018fb4
 8014488:	08018f34 	.word	0x08018f34

0801448c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b08c      	sub	sp, #48	; 0x30
 8014490:	af00      	add	r7, sp, #0
 8014492:	60f8      	str	r0, [r7, #12]
 8014494:	60b9      	str	r1, [r7, #8]
 8014496:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8014498:	2300      	movs	r3, #0
 801449a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801449c:	2301      	movs	r3, #1
 801449e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80144a0:	68bb      	ldr	r3, [r7, #8]
 80144a2:	685b      	ldr	r3, [r3, #4]
 80144a4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80144a6:	69fb      	ldr	r3, [r7, #28]
 80144a8:	885b      	ldrh	r3, [r3, #2]
 80144aa:	b29b      	uxth	r3, r3
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7f6 f895 	bl	800a5dc <lwip_htons>
 80144b2:	4603      	mov	r3, r0
 80144b4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80144b6:	69fb      	ldr	r3, [r7, #28]
 80144b8:	781b      	ldrb	r3, [r3, #0]
 80144ba:	f003 030f 	and.w	r3, r3, #15
 80144be:	b2db      	uxtb	r3, r3
 80144c0:	009b      	lsls	r3, r3, #2
 80144c2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80144c4:	7e7b      	ldrb	r3, [r7, #25]
 80144c6:	b29b      	uxth	r3, r3
 80144c8:	8b7a      	ldrh	r2, [r7, #26]
 80144ca:	429a      	cmp	r2, r3
 80144cc:	d202      	bcs.n	80144d4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80144ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80144d2:	e135      	b.n	8014740 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80144d4:	7e7b      	ldrb	r3, [r7, #25]
 80144d6:	b29b      	uxth	r3, r3
 80144d8:	8b7a      	ldrh	r2, [r7, #26]
 80144da:	1ad3      	subs	r3, r2, r3
 80144dc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80144de:	69fb      	ldr	r3, [r7, #28]
 80144e0:	88db      	ldrh	r3, [r3, #6]
 80144e2:	b29b      	uxth	r3, r3
 80144e4:	4618      	mov	r0, r3
 80144e6:	f7f6 f879 	bl	800a5dc <lwip_htons>
 80144ea:	4603      	mov	r3, r0
 80144ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80144f0:	b29b      	uxth	r3, r3
 80144f2:	00db      	lsls	r3, r3, #3
 80144f4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	685b      	ldr	r3, [r3, #4]
 80144fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80144fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144fe:	2200      	movs	r2, #0
 8014500:	701a      	strb	r2, [r3, #0]
 8014502:	2200      	movs	r2, #0
 8014504:	705a      	strb	r2, [r3, #1]
 8014506:	2200      	movs	r2, #0
 8014508:	709a      	strb	r2, [r3, #2]
 801450a:	2200      	movs	r2, #0
 801450c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801450e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014510:	8afa      	ldrh	r2, [r7, #22]
 8014512:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8014514:	8afa      	ldrh	r2, [r7, #22]
 8014516:	8b7b      	ldrh	r3, [r7, #26]
 8014518:	4413      	add	r3, r2
 801451a:	b29a      	uxth	r2, r3
 801451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801451e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014522:	88db      	ldrh	r3, [r3, #6]
 8014524:	b29b      	uxth	r3, r3
 8014526:	8afa      	ldrh	r2, [r7, #22]
 8014528:	429a      	cmp	r2, r3
 801452a:	d902      	bls.n	8014532 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801452c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014530:	e106      	b.n	8014740 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8014532:	68fb      	ldr	r3, [r7, #12]
 8014534:	685b      	ldr	r3, [r3, #4]
 8014536:	627b      	str	r3, [r7, #36]	; 0x24
 8014538:	e068      	b.n	801460c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801453a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801453c:	685b      	ldr	r3, [r3, #4]
 801453e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014542:	889b      	ldrh	r3, [r3, #4]
 8014544:	b29a      	uxth	r2, r3
 8014546:	693b      	ldr	r3, [r7, #16]
 8014548:	889b      	ldrh	r3, [r3, #4]
 801454a:	b29b      	uxth	r3, r3
 801454c:	429a      	cmp	r2, r3
 801454e:	d235      	bcs.n	80145bc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014554:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8014556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014558:	2b00      	cmp	r3, #0
 801455a:	d020      	beq.n	801459e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801455c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801455e:	889b      	ldrh	r3, [r3, #4]
 8014560:	b29a      	uxth	r2, r3
 8014562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014564:	88db      	ldrh	r3, [r3, #6]
 8014566:	b29b      	uxth	r3, r3
 8014568:	429a      	cmp	r2, r3
 801456a:	d307      	bcc.n	801457c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801456c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801456e:	88db      	ldrh	r3, [r3, #6]
 8014570:	b29a      	uxth	r2, r3
 8014572:	693b      	ldr	r3, [r7, #16]
 8014574:	889b      	ldrh	r3, [r3, #4]
 8014576:	b29b      	uxth	r3, r3
 8014578:	429a      	cmp	r2, r3
 801457a:	d902      	bls.n	8014582 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801457c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014580:	e0de      	b.n	8014740 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8014582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014584:	68ba      	ldr	r2, [r7, #8]
 8014586:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8014588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801458a:	88db      	ldrh	r3, [r3, #6]
 801458c:	b29a      	uxth	r2, r3
 801458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014590:	889b      	ldrh	r3, [r3, #4]
 8014592:	b29b      	uxth	r3, r3
 8014594:	429a      	cmp	r2, r3
 8014596:	d03d      	beq.n	8014614 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014598:	2300      	movs	r3, #0
 801459a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801459c:	e03a      	b.n	8014614 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145a0:	88db      	ldrh	r3, [r3, #6]
 80145a2:	b29a      	uxth	r2, r3
 80145a4:	693b      	ldr	r3, [r7, #16]
 80145a6:	889b      	ldrh	r3, [r3, #4]
 80145a8:	b29b      	uxth	r3, r3
 80145aa:	429a      	cmp	r2, r3
 80145ac:	d902      	bls.n	80145b4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80145ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145b2:	e0c5      	b.n	8014740 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	68ba      	ldr	r2, [r7, #8]
 80145b8:	605a      	str	r2, [r3, #4]
      break;
 80145ba:	e02b      	b.n	8014614 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80145bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145be:	889b      	ldrh	r3, [r3, #4]
 80145c0:	b29a      	uxth	r2, r3
 80145c2:	693b      	ldr	r3, [r7, #16]
 80145c4:	889b      	ldrh	r3, [r3, #4]
 80145c6:	b29b      	uxth	r3, r3
 80145c8:	429a      	cmp	r2, r3
 80145ca:	d102      	bne.n	80145d2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80145cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145d0:	e0b6      	b.n	8014740 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80145d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145d4:	889b      	ldrh	r3, [r3, #4]
 80145d6:	b29a      	uxth	r2, r3
 80145d8:	693b      	ldr	r3, [r7, #16]
 80145da:	88db      	ldrh	r3, [r3, #6]
 80145dc:	b29b      	uxth	r3, r3
 80145de:	429a      	cmp	r2, r3
 80145e0:	d202      	bcs.n	80145e8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80145e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80145e6:	e0ab      	b.n	8014740 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80145e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d009      	beq.n	8014602 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80145ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145f0:	88db      	ldrh	r3, [r3, #6]
 80145f2:	b29a      	uxth	r2, r3
 80145f4:	693b      	ldr	r3, [r7, #16]
 80145f6:	889b      	ldrh	r3, [r3, #4]
 80145f8:	b29b      	uxth	r3, r3
 80145fa:	429a      	cmp	r2, r3
 80145fc:	d001      	beq.n	8014602 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80145fe:	2300      	movs	r3, #0
 8014600:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8014602:	693b      	ldr	r3, [r7, #16]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014608:	693b      	ldr	r3, [r7, #16]
 801460a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801460e:	2b00      	cmp	r3, #0
 8014610:	d193      	bne.n	801453a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8014612:	e000      	b.n	8014616 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8014614:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8014616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014618:	2b00      	cmp	r3, #0
 801461a:	d12d      	bne.n	8014678 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801461c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801461e:	2b00      	cmp	r3, #0
 8014620:	d01c      	beq.n	801465c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8014622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014624:	88db      	ldrh	r3, [r3, #6]
 8014626:	b29a      	uxth	r2, r3
 8014628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801462a:	889b      	ldrh	r3, [r3, #4]
 801462c:	b29b      	uxth	r3, r3
 801462e:	429a      	cmp	r2, r3
 8014630:	d906      	bls.n	8014640 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8014632:	4b45      	ldr	r3, [pc, #276]	; (8014748 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014634:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014638:	4944      	ldr	r1, [pc, #272]	; (801474c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801463a:	4845      	ldr	r0, [pc, #276]	; (8014750 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801463c:	f000 fe0c 	bl	8015258 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014642:	68ba      	ldr	r2, [r7, #8]
 8014644:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8014646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014648:	88db      	ldrh	r3, [r3, #6]
 801464a:	b29a      	uxth	r2, r3
 801464c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801464e:	889b      	ldrh	r3, [r3, #4]
 8014650:	b29b      	uxth	r3, r3
 8014652:	429a      	cmp	r2, r3
 8014654:	d010      	beq.n	8014678 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8014656:	2300      	movs	r3, #0
 8014658:	623b      	str	r3, [r7, #32]
 801465a:	e00d      	b.n	8014678 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	685b      	ldr	r3, [r3, #4]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d006      	beq.n	8014672 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8014664:	4b38      	ldr	r3, [pc, #224]	; (8014748 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014666:	f240 12bf 	movw	r2, #447	; 0x1bf
 801466a:	493a      	ldr	r1, [pc, #232]	; (8014754 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801466c:	4838      	ldr	r0, [pc, #224]	; (8014750 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801466e:	f000 fdf3 	bl	8015258 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	68ba      	ldr	r2, [r7, #8]
 8014676:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d105      	bne.n	801468a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	7f9b      	ldrb	r3, [r3, #30]
 8014682:	f003 0301 	and.w	r3, r3, #1
 8014686:	2b00      	cmp	r3, #0
 8014688:	d059      	beq.n	801473e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801468a:	6a3b      	ldr	r3, [r7, #32]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d04f      	beq.n	8014730 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	685b      	ldr	r3, [r3, #4]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d006      	beq.n	80146a6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	685b      	ldr	r3, [r3, #4]
 801469c:	685b      	ldr	r3, [r3, #4]
 801469e:	889b      	ldrh	r3, [r3, #4]
 80146a0:	b29b      	uxth	r3, r3
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d002      	beq.n	80146ac <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80146a6:	2300      	movs	r3, #0
 80146a8:	623b      	str	r3, [r7, #32]
 80146aa:	e041      	b.n	8014730 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80146ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ae:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80146b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80146b6:	e012      	b.n	80146de <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80146b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ba:	685b      	ldr	r3, [r3, #4]
 80146bc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80146be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146c0:	88db      	ldrh	r3, [r3, #6]
 80146c2:	b29a      	uxth	r2, r3
 80146c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146c6:	889b      	ldrh	r3, [r3, #4]
 80146c8:	b29b      	uxth	r3, r3
 80146ca:	429a      	cmp	r2, r3
 80146cc:	d002      	beq.n	80146d4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80146ce:	2300      	movs	r3, #0
 80146d0:	623b      	str	r3, [r7, #32]
            break;
 80146d2:	e007      	b.n	80146e4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80146d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146d6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80146d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80146de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d1e9      	bne.n	80146b8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80146e4:	6a3b      	ldr	r3, [r7, #32]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d022      	beq.n	8014730 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	685b      	ldr	r3, [r3, #4]
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d106      	bne.n	8014700 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80146f2:	4b15      	ldr	r3, [pc, #84]	; (8014748 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80146f4:	f240 12df 	movw	r2, #479	; 0x1df
 80146f8:	4917      	ldr	r1, [pc, #92]	; (8014758 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80146fa:	4815      	ldr	r0, [pc, #84]	; (8014750 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80146fc:	f000 fdac 	bl	8015258 <iprintf>
          LWIP_ASSERT("sanity check",
 8014700:	68fb      	ldr	r3, [r7, #12]
 8014702:	685b      	ldr	r3, [r3, #4]
 8014704:	685b      	ldr	r3, [r3, #4]
 8014706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014708:	429a      	cmp	r2, r3
 801470a:	d106      	bne.n	801471a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801470c:	4b0e      	ldr	r3, [pc, #56]	; (8014748 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801470e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8014712:	4911      	ldr	r1, [pc, #68]	; (8014758 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014714:	480e      	ldr	r0, [pc, #56]	; (8014750 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014716:	f000 fd9f 	bl	8015258 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801471c:	681b      	ldr	r3, [r3, #0]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d006      	beq.n	8014730 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8014722:	4b09      	ldr	r3, [pc, #36]	; (8014748 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014724:	f240 12e3 	movw	r2, #483	; 0x1e3
 8014728:	490c      	ldr	r1, [pc, #48]	; (801475c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801472a:	4809      	ldr	r0, [pc, #36]	; (8014750 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801472c:	f000 fd94 	bl	8015258 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014730:	6a3b      	ldr	r3, [r7, #32]
 8014732:	2b00      	cmp	r3, #0
 8014734:	bf14      	ite	ne
 8014736:	2301      	movne	r3, #1
 8014738:	2300      	moveq	r3, #0
 801473a:	b2db      	uxtb	r3, r3
 801473c:	e000      	b.n	8014740 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801473e:	2300      	movs	r3, #0
}
 8014740:	4618      	mov	r0, r3
 8014742:	3730      	adds	r7, #48	; 0x30
 8014744:	46bd      	mov	sp, r7
 8014746:	bd80      	pop	{r7, pc}
 8014748:	08018eec 	.word	0x08018eec
 801474c:	08018fd0 	.word	0x08018fd0
 8014750:	08018f34 	.word	0x08018f34
 8014754:	08018ff0 	.word	0x08018ff0
 8014758:	08019028 	.word	0x08019028
 801475c:	08019038 	.word	0x08019038

08014760 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b08e      	sub	sp, #56	; 0x38
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	685b      	ldr	r3, [r3, #4]
 801476c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014770:	781b      	ldrb	r3, [r3, #0]
 8014772:	f003 030f 	and.w	r3, r3, #15
 8014776:	b2db      	uxtb	r3, r3
 8014778:	009b      	lsls	r3, r3, #2
 801477a:	b2db      	uxtb	r3, r3
 801477c:	2b14      	cmp	r3, #20
 801477e:	f040 8167 	bne.w	8014a50 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8014782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014784:	88db      	ldrh	r3, [r3, #6]
 8014786:	b29b      	uxth	r3, r3
 8014788:	4618      	mov	r0, r3
 801478a:	f7f5 ff27 	bl	800a5dc <lwip_htons>
 801478e:	4603      	mov	r3, r0
 8014790:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014794:	b29b      	uxth	r3, r3
 8014796:	00db      	lsls	r3, r3, #3
 8014798:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801479a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801479c:	885b      	ldrh	r3, [r3, #2]
 801479e:	b29b      	uxth	r3, r3
 80147a0:	4618      	mov	r0, r3
 80147a2:	f7f5 ff1b 	bl	800a5dc <lwip_htons>
 80147a6:	4603      	mov	r3, r0
 80147a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80147aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ac:	781b      	ldrb	r3, [r3, #0]
 80147ae:	f003 030f 	and.w	r3, r3, #15
 80147b2:	b2db      	uxtb	r3, r3
 80147b4:	009b      	lsls	r3, r3, #2
 80147b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80147ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147be:	b29b      	uxth	r3, r3
 80147c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80147c2:	429a      	cmp	r2, r3
 80147c4:	f0c0 8146 	bcc.w	8014a54 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80147c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147cc:	b29b      	uxth	r3, r3
 80147ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80147d0:	1ad3      	subs	r3, r2, r3
 80147d2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80147d4:	6878      	ldr	r0, [r7, #4]
 80147d6:	f7f7 fb6d 	bl	800beb4 <pbuf_clen>
 80147da:	4603      	mov	r3, r0
 80147dc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80147de:	4ba3      	ldr	r3, [pc, #652]	; (8014a6c <ip4_reass+0x30c>)
 80147e0:	881b      	ldrh	r3, [r3, #0]
 80147e2:	461a      	mov	r2, r3
 80147e4:	8c3b      	ldrh	r3, [r7, #32]
 80147e6:	4413      	add	r3, r2
 80147e8:	2b0a      	cmp	r3, #10
 80147ea:	dd10      	ble.n	801480e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80147ec:	8c3b      	ldrh	r3, [r7, #32]
 80147ee:	4619      	mov	r1, r3
 80147f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80147f2:	f7ff fd81 	bl	80142f8 <ip_reass_remove_oldest_datagram>
 80147f6:	4603      	mov	r3, r0
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	f000 812d 	beq.w	8014a58 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80147fe:	4b9b      	ldr	r3, [pc, #620]	; (8014a6c <ip4_reass+0x30c>)
 8014800:	881b      	ldrh	r3, [r3, #0]
 8014802:	461a      	mov	r2, r3
 8014804:	8c3b      	ldrh	r3, [r7, #32]
 8014806:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014808:	2b0a      	cmp	r3, #10
 801480a:	f300 8125 	bgt.w	8014a58 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801480e:	4b98      	ldr	r3, [pc, #608]	; (8014a70 <ip4_reass+0x310>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	633b      	str	r3, [r7, #48]	; 0x30
 8014814:	e015      	b.n	8014842 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8014816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014818:	695a      	ldr	r2, [r3, #20]
 801481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801481c:	68db      	ldr	r3, [r3, #12]
 801481e:	429a      	cmp	r2, r3
 8014820:	d10c      	bne.n	801483c <ip4_reass+0xdc>
 8014822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014824:	699a      	ldr	r2, [r3, #24]
 8014826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014828:	691b      	ldr	r3, [r3, #16]
 801482a:	429a      	cmp	r2, r3
 801482c:	d106      	bne.n	801483c <ip4_reass+0xdc>
 801482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014830:	899a      	ldrh	r2, [r3, #12]
 8014832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014834:	889b      	ldrh	r3, [r3, #4]
 8014836:	b29b      	uxth	r3, r3
 8014838:	429a      	cmp	r2, r3
 801483a:	d006      	beq.n	801484a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	633b      	str	r3, [r7, #48]	; 0x30
 8014842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014844:	2b00      	cmp	r3, #0
 8014846:	d1e6      	bne.n	8014816 <ip4_reass+0xb6>
 8014848:	e000      	b.n	801484c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801484a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801484c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801484e:	2b00      	cmp	r3, #0
 8014850:	d109      	bne.n	8014866 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8014852:	8c3b      	ldrh	r3, [r7, #32]
 8014854:	4619      	mov	r1, r3
 8014856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014858:	f7ff fdb0 	bl	80143bc <ip_reass_enqueue_new_datagram>
 801485c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014860:	2b00      	cmp	r3, #0
 8014862:	d11c      	bne.n	801489e <ip4_reass+0x13e>
      goto nullreturn;
 8014864:	e0f9      	b.n	8014a5a <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8014866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014868:	88db      	ldrh	r3, [r3, #6]
 801486a:	b29b      	uxth	r3, r3
 801486c:	4618      	mov	r0, r3
 801486e:	f7f5 feb5 	bl	800a5dc <lwip_htons>
 8014872:	4603      	mov	r3, r0
 8014874:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014878:	2b00      	cmp	r3, #0
 801487a:	d110      	bne.n	801489e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801487c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801487e:	89db      	ldrh	r3, [r3, #14]
 8014880:	4618      	mov	r0, r3
 8014882:	f7f5 feab 	bl	800a5dc <lwip_htons>
 8014886:	4603      	mov	r3, r0
 8014888:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801488c:	2b00      	cmp	r3, #0
 801488e:	d006      	beq.n	801489e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8014890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014892:	3308      	adds	r3, #8
 8014894:	2214      	movs	r2, #20
 8014896:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014898:	4618      	mov	r0, r3
 801489a:	f000 fcb0 	bl	80151fe <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801489e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148a0:	88db      	ldrh	r3, [r3, #6]
 80148a2:	b29b      	uxth	r3, r3
 80148a4:	f003 0320 	and.w	r3, r3, #32
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	bf0c      	ite	eq
 80148ac:	2301      	moveq	r3, #1
 80148ae:	2300      	movne	r3, #0
 80148b0:	b2db      	uxtb	r3, r3
 80148b2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80148b4:	69fb      	ldr	r3, [r7, #28]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d00e      	beq.n	80148d8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80148ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80148bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148be:	4413      	add	r3, r2
 80148c0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80148c2:	8b7a      	ldrh	r2, [r7, #26]
 80148c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80148c6:	429a      	cmp	r2, r3
 80148c8:	f0c0 80a0 	bcc.w	8014a0c <ip4_reass+0x2ac>
 80148cc:	8b7b      	ldrh	r3, [r7, #26]
 80148ce:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80148d2:	4293      	cmp	r3, r2
 80148d4:	f200 809a 	bhi.w	8014a0c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80148d8:	69fa      	ldr	r2, [r7, #28]
 80148da:	6879      	ldr	r1, [r7, #4]
 80148dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80148de:	f7ff fdd5 	bl	801448c <ip_reass_chain_frag_into_datagram_and_validate>
 80148e2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80148e4:	697b      	ldr	r3, [r7, #20]
 80148e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80148ea:	f000 8091 	beq.w	8014a10 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80148ee:	4b5f      	ldr	r3, [pc, #380]	; (8014a6c <ip4_reass+0x30c>)
 80148f0:	881a      	ldrh	r2, [r3, #0]
 80148f2:	8c3b      	ldrh	r3, [r7, #32]
 80148f4:	4413      	add	r3, r2
 80148f6:	b29a      	uxth	r2, r3
 80148f8:	4b5c      	ldr	r3, [pc, #368]	; (8014a6c <ip4_reass+0x30c>)
 80148fa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80148fc:	69fb      	ldr	r3, [r7, #28]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d00d      	beq.n	801491e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8014902:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8014904:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014906:	4413      	add	r3, r2
 8014908:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801490c:	8a7a      	ldrh	r2, [r7, #18]
 801490e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014912:	7f9b      	ldrb	r3, [r3, #30]
 8014914:	f043 0301 	orr.w	r3, r3, #1
 8014918:	b2da      	uxtb	r2, r3
 801491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801491c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801491e:	697b      	ldr	r3, [r7, #20]
 8014920:	2b01      	cmp	r3, #1
 8014922:	d171      	bne.n	8014a08 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8014924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014926:	8b9b      	ldrh	r3, [r3, #28]
 8014928:	3314      	adds	r3, #20
 801492a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801492e:	685b      	ldr	r3, [r3, #4]
 8014930:	685b      	ldr	r3, [r3, #4]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8014936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014938:	685b      	ldr	r3, [r3, #4]
 801493a:	685b      	ldr	r3, [r3, #4]
 801493c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014940:	3308      	adds	r3, #8
 8014942:	2214      	movs	r2, #20
 8014944:	4619      	mov	r1, r3
 8014946:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014948:	f000 fc59 	bl	80151fe <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801494c:	8a3b      	ldrh	r3, [r7, #16]
 801494e:	4618      	mov	r0, r3
 8014950:	f7f5 fe44 	bl	800a5dc <lwip_htons>
 8014954:	4603      	mov	r3, r0
 8014956:	461a      	mov	r2, r3
 8014958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801495a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801495c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801495e:	2200      	movs	r2, #0
 8014960:	719a      	strb	r2, [r3, #6]
 8014962:	2200      	movs	r2, #0
 8014964:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8014966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014968:	2200      	movs	r2, #0
 801496a:	729a      	strb	r2, [r3, #10]
 801496c:	2200      	movs	r2, #0
 801496e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014972:	685b      	ldr	r3, [r3, #4]
 8014974:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8014976:	e00d      	b.n	8014994 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801497a:	685b      	ldr	r3, [r3, #4]
 801497c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801497e:	2114      	movs	r1, #20
 8014980:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014982:	f7f7 f983 	bl	800bc8c <pbuf_remove_header>
      pbuf_cat(p, r);
 8014986:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014988:	6878      	ldr	r0, [r7, #4]
 801498a:	f7f7 fad3 	bl	800bf34 <pbuf_cat>
      r = iprh->next_pbuf;
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8014994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014996:	2b00      	cmp	r3, #0
 8014998:	d1ee      	bne.n	8014978 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801499a:	4b35      	ldr	r3, [pc, #212]	; (8014a70 <ip4_reass+0x310>)
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149a0:	429a      	cmp	r2, r3
 80149a2:	d102      	bne.n	80149aa <ip4_reass+0x24a>
      ipr_prev = NULL;
 80149a4:	2300      	movs	r3, #0
 80149a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80149a8:	e010      	b.n	80149cc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80149aa:	4b31      	ldr	r3, [pc, #196]	; (8014a70 <ip4_reass+0x310>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80149b0:	e007      	b.n	80149c2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80149b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d006      	beq.n	80149ca <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80149bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80149c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d1f4      	bne.n	80149b2 <ip4_reass+0x252>
 80149c8:	e000      	b.n	80149cc <ip4_reass+0x26c>
          break;
 80149ca:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80149cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80149ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80149d0:	f7ff fd2e 	bl	8014430 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80149d4:	6878      	ldr	r0, [r7, #4]
 80149d6:	f7f7 fa6d 	bl	800beb4 <pbuf_clen>
 80149da:	4603      	mov	r3, r0
 80149dc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80149de:	4b23      	ldr	r3, [pc, #140]	; (8014a6c <ip4_reass+0x30c>)
 80149e0:	881b      	ldrh	r3, [r3, #0]
 80149e2:	8c3a      	ldrh	r2, [r7, #32]
 80149e4:	429a      	cmp	r2, r3
 80149e6:	d906      	bls.n	80149f6 <ip4_reass+0x296>
 80149e8:	4b22      	ldr	r3, [pc, #136]	; (8014a74 <ip4_reass+0x314>)
 80149ea:	f240 229b 	movw	r2, #667	; 0x29b
 80149ee:	4922      	ldr	r1, [pc, #136]	; (8014a78 <ip4_reass+0x318>)
 80149f0:	4822      	ldr	r0, [pc, #136]	; (8014a7c <ip4_reass+0x31c>)
 80149f2:	f000 fc31 	bl	8015258 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80149f6:	4b1d      	ldr	r3, [pc, #116]	; (8014a6c <ip4_reass+0x30c>)
 80149f8:	881a      	ldrh	r2, [r3, #0]
 80149fa:	8c3b      	ldrh	r3, [r7, #32]
 80149fc:	1ad3      	subs	r3, r2, r3
 80149fe:	b29a      	uxth	r2, r3
 8014a00:	4b1a      	ldr	r3, [pc, #104]	; (8014a6c <ip4_reass+0x30c>)
 8014a02:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	e02c      	b.n	8014a62 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014a08:	2300      	movs	r3, #0
 8014a0a:	e02a      	b.n	8014a62 <ip4_reass+0x302>

nullreturn_ipr:
 8014a0c:	bf00      	nop
 8014a0e:	e000      	b.n	8014a12 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014a10:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d106      	bne.n	8014a26 <ip4_reass+0x2c6>
 8014a18:	4b16      	ldr	r3, [pc, #88]	; (8014a74 <ip4_reass+0x314>)
 8014a1a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014a1e:	4918      	ldr	r1, [pc, #96]	; (8014a80 <ip4_reass+0x320>)
 8014a20:	4816      	ldr	r0, [pc, #88]	; (8014a7c <ip4_reass+0x31c>)
 8014a22:	f000 fc19 	bl	8015258 <iprintf>
  if (ipr->p == NULL) {
 8014a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a28:	685b      	ldr	r3, [r3, #4]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d114      	bne.n	8014a58 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014a2e:	4b10      	ldr	r3, [pc, #64]	; (8014a70 <ip4_reass+0x310>)
 8014a30:	681b      	ldr	r3, [r3, #0]
 8014a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a34:	429a      	cmp	r2, r3
 8014a36:	d006      	beq.n	8014a46 <ip4_reass+0x2e6>
 8014a38:	4b0e      	ldr	r3, [pc, #56]	; (8014a74 <ip4_reass+0x314>)
 8014a3a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014a3e:	4911      	ldr	r1, [pc, #68]	; (8014a84 <ip4_reass+0x324>)
 8014a40:	480e      	ldr	r0, [pc, #56]	; (8014a7c <ip4_reass+0x31c>)
 8014a42:	f000 fc09 	bl	8015258 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014a46:	2100      	movs	r1, #0
 8014a48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014a4a:	f7ff fcf1 	bl	8014430 <ip_reass_dequeue_datagram>
 8014a4e:	e004      	b.n	8014a5a <ip4_reass+0x2fa>
    goto nullreturn;
 8014a50:	bf00      	nop
 8014a52:	e002      	b.n	8014a5a <ip4_reass+0x2fa>
    goto nullreturn;
 8014a54:	bf00      	nop
 8014a56:	e000      	b.n	8014a5a <ip4_reass+0x2fa>
  }

nullreturn:
 8014a58:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014a5a:	6878      	ldr	r0, [r7, #4]
 8014a5c:	f7f7 f99c 	bl	800bd98 <pbuf_free>
  return NULL;
 8014a60:	2300      	movs	r3, #0
}
 8014a62:	4618      	mov	r0, r3
 8014a64:	3738      	adds	r7, #56	; 0x38
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bd80      	pop	{r7, pc}
 8014a6a:	bf00      	nop
 8014a6c:	20004624 	.word	0x20004624
 8014a70:	20004620 	.word	0x20004620
 8014a74:	08018eec 	.word	0x08018eec
 8014a78:	0801905c 	.word	0x0801905c
 8014a7c:	08018f34 	.word	0x08018f34
 8014a80:	08019078 	.word	0x08019078
 8014a84:	08019084 	.word	0x08019084

08014a88 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014a8c:	2005      	movs	r0, #5
 8014a8e:	f7f6 fa91 	bl	800afb4 <memp_malloc>
 8014a92:	4603      	mov	r3, r0
}
 8014a94:	4618      	mov	r0, r3
 8014a96:	bd80      	pop	{r7, pc}

08014a98 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b082      	sub	sp, #8
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d106      	bne.n	8014ab4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8014aa6:	4b07      	ldr	r3, [pc, #28]	; (8014ac4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014aa8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014aac:	4906      	ldr	r1, [pc, #24]	; (8014ac8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014aae:	4807      	ldr	r0, [pc, #28]	; (8014acc <ip_frag_free_pbuf_custom_ref+0x34>)
 8014ab0:	f000 fbd2 	bl	8015258 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014ab4:	6879      	ldr	r1, [r7, #4]
 8014ab6:	2005      	movs	r0, #5
 8014ab8:	f7f6 face 	bl	800b058 <memp_free>
}
 8014abc:	bf00      	nop
 8014abe:	3708      	adds	r7, #8
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	bd80      	pop	{r7, pc}
 8014ac4:	08018eec 	.word	0x08018eec
 8014ac8:	080190a4 	.word	0x080190a4
 8014acc:	08018f34 	.word	0x08018f34

08014ad0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b084      	sub	sp, #16
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d106      	bne.n	8014af0 <ipfrag_free_pbuf_custom+0x20>
 8014ae2:	4b11      	ldr	r3, [pc, #68]	; (8014b28 <ipfrag_free_pbuf_custom+0x58>)
 8014ae4:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014ae8:	4910      	ldr	r1, [pc, #64]	; (8014b2c <ipfrag_free_pbuf_custom+0x5c>)
 8014aea:	4811      	ldr	r0, [pc, #68]	; (8014b30 <ipfrag_free_pbuf_custom+0x60>)
 8014aec:	f000 fbb4 	bl	8015258 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014af0:	68fa      	ldr	r2, [r7, #12]
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	429a      	cmp	r2, r3
 8014af6:	d006      	beq.n	8014b06 <ipfrag_free_pbuf_custom+0x36>
 8014af8:	4b0b      	ldr	r3, [pc, #44]	; (8014b28 <ipfrag_free_pbuf_custom+0x58>)
 8014afa:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014afe:	490d      	ldr	r1, [pc, #52]	; (8014b34 <ipfrag_free_pbuf_custom+0x64>)
 8014b00:	480b      	ldr	r0, [pc, #44]	; (8014b30 <ipfrag_free_pbuf_custom+0x60>)
 8014b02:	f000 fba9 	bl	8015258 <iprintf>
  if (pcr->original != NULL) {
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	695b      	ldr	r3, [r3, #20]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d004      	beq.n	8014b18 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014b0e:	68fb      	ldr	r3, [r7, #12]
 8014b10:	695b      	ldr	r3, [r3, #20]
 8014b12:	4618      	mov	r0, r3
 8014b14:	f7f7 f940 	bl	800bd98 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014b18:	68f8      	ldr	r0, [r7, #12]
 8014b1a:	f7ff ffbd 	bl	8014a98 <ip_frag_free_pbuf_custom_ref>
}
 8014b1e:	bf00      	nop
 8014b20:	3710      	adds	r7, #16
 8014b22:	46bd      	mov	sp, r7
 8014b24:	bd80      	pop	{r7, pc}
 8014b26:	bf00      	nop
 8014b28:	08018eec 	.word	0x08018eec
 8014b2c:	080190b0 	.word	0x080190b0
 8014b30:	08018f34 	.word	0x08018f34
 8014b34:	080190bc 	.word	0x080190bc

08014b38 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b094      	sub	sp, #80	; 0x50
 8014b3c:	af02      	add	r7, sp, #8
 8014b3e:	60f8      	str	r0, [r7, #12]
 8014b40:	60b9      	str	r1, [r7, #8]
 8014b42:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014b44:	2300      	movs	r3, #0
 8014b46:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014b4a:	68bb      	ldr	r3, [r7, #8]
 8014b4c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014b4e:	3b14      	subs	r3, #20
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	da00      	bge.n	8014b56 <ip4_frag+0x1e>
 8014b54:	3307      	adds	r3, #7
 8014b56:	10db      	asrs	r3, r3, #3
 8014b58:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014b5a:	2314      	movs	r3, #20
 8014b5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	685b      	ldr	r3, [r3, #4]
 8014b62:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b66:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b6a:	781b      	ldrb	r3, [r3, #0]
 8014b6c:	f003 030f 	and.w	r3, r3, #15
 8014b70:	b2db      	uxtb	r3, r3
 8014b72:	009b      	lsls	r3, r3, #2
 8014b74:	b2db      	uxtb	r3, r3
 8014b76:	2b14      	cmp	r3, #20
 8014b78:	d002      	beq.n	8014b80 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014b7a:	f06f 0305 	mvn.w	r3, #5
 8014b7e:	e10f      	b.n	8014da0 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	895b      	ldrh	r3, [r3, #10]
 8014b84:	2b13      	cmp	r3, #19
 8014b86:	d809      	bhi.n	8014b9c <ip4_frag+0x64>
 8014b88:	4b87      	ldr	r3, [pc, #540]	; (8014da8 <ip4_frag+0x270>)
 8014b8a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014b8e:	4987      	ldr	r1, [pc, #540]	; (8014dac <ip4_frag+0x274>)
 8014b90:	4887      	ldr	r0, [pc, #540]	; (8014db0 <ip4_frag+0x278>)
 8014b92:	f000 fb61 	bl	8015258 <iprintf>
 8014b96:	f06f 0305 	mvn.w	r3, #5
 8014b9a:	e101      	b.n	8014da0 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b9e:	88db      	ldrh	r3, [r3, #6]
 8014ba0:	b29b      	uxth	r3, r3
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f7f5 fd1a 	bl	800a5dc <lwip_htons>
 8014ba8:	4603      	mov	r3, r0
 8014baa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014bac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014bae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014bb2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014bb6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014bb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014bbc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	891b      	ldrh	r3, [r3, #8]
 8014bc2:	3b14      	subs	r3, #20
 8014bc4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014bc8:	e0e0      	b.n	8014d8c <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014bca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014bcc:	00db      	lsls	r3, r3, #3
 8014bce:	b29b      	uxth	r3, r3
 8014bd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014bd4:	4293      	cmp	r3, r2
 8014bd6:	bf28      	it	cs
 8014bd8:	4613      	movcs	r3, r2
 8014bda:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014bdc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014be0:	2114      	movs	r1, #20
 8014be2:	200e      	movs	r0, #14
 8014be4:	f7f6 fdf8 	bl	800b7d8 <pbuf_alloc>
 8014be8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	f000 80d4 	beq.w	8014d9a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bf4:	895b      	ldrh	r3, [r3, #10]
 8014bf6:	2b13      	cmp	r3, #19
 8014bf8:	d806      	bhi.n	8014c08 <ip4_frag+0xd0>
 8014bfa:	4b6b      	ldr	r3, [pc, #428]	; (8014da8 <ip4_frag+0x270>)
 8014bfc:	f240 3225 	movw	r2, #805	; 0x325
 8014c00:	496c      	ldr	r1, [pc, #432]	; (8014db4 <ip4_frag+0x27c>)
 8014c02:	486b      	ldr	r0, [pc, #428]	; (8014db0 <ip4_frag+0x278>)
 8014c04:	f000 fb28 	bl	8015258 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c0a:	685b      	ldr	r3, [r3, #4]
 8014c0c:	2214      	movs	r2, #20
 8014c0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014c10:	4618      	mov	r0, r3
 8014c12:	f000 faf4 	bl	80151fe <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c18:	685b      	ldr	r3, [r3, #4]
 8014c1a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014c1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014c1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014c22:	e064      	b.n	8014cee <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	895a      	ldrh	r2, [r3, #10]
 8014c28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014c2a:	1ad3      	subs	r3, r2, r3
 8014c2c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	895b      	ldrh	r3, [r3, #10]
 8014c32:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014c34:	429a      	cmp	r2, r3
 8014c36:	d906      	bls.n	8014c46 <ip4_frag+0x10e>
 8014c38:	4b5b      	ldr	r3, [pc, #364]	; (8014da8 <ip4_frag+0x270>)
 8014c3a:	f240 322d 	movw	r2, #813	; 0x32d
 8014c3e:	495e      	ldr	r1, [pc, #376]	; (8014db8 <ip4_frag+0x280>)
 8014c40:	485b      	ldr	r0, [pc, #364]	; (8014db0 <ip4_frag+0x278>)
 8014c42:	f000 fb09 	bl	8015258 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014c46:	8bfa      	ldrh	r2, [r7, #30]
 8014c48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014c4c:	4293      	cmp	r3, r2
 8014c4e:	bf28      	it	cs
 8014c50:	4613      	movcs	r3, r2
 8014c52:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014c56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d105      	bne.n	8014c6a <ip4_frag+0x132>
        poff = 0;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	60fb      	str	r3, [r7, #12]
        continue;
 8014c68:	e041      	b.n	8014cee <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014c6a:	f7ff ff0d 	bl	8014a88 <ip_frag_alloc_pbuf_custom_ref>
 8014c6e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014c70:	69bb      	ldr	r3, [r7, #24]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d103      	bne.n	8014c7e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014c76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014c78:	f7f7 f88e 	bl	800bd98 <pbuf_free>
        goto memerr;
 8014c7c:	e08e      	b.n	8014d9c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014c7e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014c84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014c86:	4413      	add	r3, r2
 8014c88:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014c8c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014c90:	9201      	str	r2, [sp, #4]
 8014c92:	9300      	str	r3, [sp, #0]
 8014c94:	4603      	mov	r3, r0
 8014c96:	2241      	movs	r2, #65	; 0x41
 8014c98:	2000      	movs	r0, #0
 8014c9a:	f7f6 fec3 	bl	800ba24 <pbuf_alloced_custom>
 8014c9e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014ca0:	697b      	ldr	r3, [r7, #20]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d106      	bne.n	8014cb4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014ca6:	69b8      	ldr	r0, [r7, #24]
 8014ca8:	f7ff fef6 	bl	8014a98 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014cac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014cae:	f7f7 f873 	bl	800bd98 <pbuf_free>
        goto memerr;
 8014cb2:	e073      	b.n	8014d9c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8014cb4:	68f8      	ldr	r0, [r7, #12]
 8014cb6:	f7f7 f915 	bl	800bee4 <pbuf_ref>
      pcr->original = p;
 8014cba:	69bb      	ldr	r3, [r7, #24]
 8014cbc:	68fa      	ldr	r2, [r7, #12]
 8014cbe:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014cc0:	69bb      	ldr	r3, [r7, #24]
 8014cc2:	4a3e      	ldr	r2, [pc, #248]	; (8014dbc <ip4_frag+0x284>)
 8014cc4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014cc6:	6979      	ldr	r1, [r7, #20]
 8014cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014cca:	f7f7 f933 	bl	800bf34 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014cce:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014cd2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014cd6:	1ad3      	subs	r3, r2, r3
 8014cd8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014cdc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d004      	beq.n	8014cee <ip4_frag+0x1b6>
        poff = 0;
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014cee:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d196      	bne.n	8014c24 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014cf6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014cf8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014cfc:	4413      	add	r3, r2
 8014cfe:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014d00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014d04:	68bb      	ldr	r3, [r7, #8]
 8014d06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014d08:	3b14      	subs	r3, #20
 8014d0a:	429a      	cmp	r2, r3
 8014d0c:	bfd4      	ite	le
 8014d0e:	2301      	movle	r3, #1
 8014d10:	2300      	movgt	r3, #0
 8014d12:	b2db      	uxtb	r3, r3
 8014d14:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014d16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014d1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014d1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014d20:	6a3b      	ldr	r3, [r7, #32]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d002      	beq.n	8014d2c <ip4_frag+0x1f4>
 8014d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d003      	beq.n	8014d34 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014d2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014d2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014d32:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014d34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014d36:	4618      	mov	r0, r3
 8014d38:	f7f5 fc50 	bl	800a5dc <lwip_htons>
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	461a      	mov	r2, r3
 8014d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d42:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014d44:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014d46:	3314      	adds	r3, #20
 8014d48:	b29b      	uxth	r3, r3
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	f7f5 fc46 	bl	800a5dc <lwip_htons>
 8014d50:	4603      	mov	r3, r0
 8014d52:	461a      	mov	r2, r3
 8014d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d56:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	729a      	strb	r2, [r3, #10]
 8014d5e:	2200      	movs	r2, #0
 8014d60:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014d62:	68bb      	ldr	r3, [r7, #8]
 8014d64:	695b      	ldr	r3, [r3, #20]
 8014d66:	687a      	ldr	r2, [r7, #4]
 8014d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014d6a:	68b8      	ldr	r0, [r7, #8]
 8014d6c:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014d6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d70:	f7f7 f812 	bl	800bd98 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014d74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014d78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014d7a:	1ad3      	subs	r3, r2, r3
 8014d7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014d80:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014d84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014d86:	4413      	add	r3, r2
 8014d88:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014d8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	f47f af1a 	bne.w	8014bca <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014d96:	2300      	movs	r3, #0
 8014d98:	e002      	b.n	8014da0 <ip4_frag+0x268>
      goto memerr;
 8014d9a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014da0:	4618      	mov	r0, r3
 8014da2:	3748      	adds	r7, #72	; 0x48
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}
 8014da8:	08018eec 	.word	0x08018eec
 8014dac:	080190c8 	.word	0x080190c8
 8014db0:	08018f34 	.word	0x08018f34
 8014db4:	080190e4 	.word	0x080190e4
 8014db8:	08019104 	.word	0x08019104
 8014dbc:	08014ad1 	.word	0x08014ad1

08014dc0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b086      	sub	sp, #24
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
 8014dc8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014dca:	230e      	movs	r3, #14
 8014dcc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	895b      	ldrh	r3, [r3, #10]
 8014dd2:	2b0e      	cmp	r3, #14
 8014dd4:	d96e      	bls.n	8014eb4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	7bdb      	ldrb	r3, [r3, #15]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d106      	bne.n	8014dec <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014dde:	683b      	ldr	r3, [r7, #0]
 8014de0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014de4:	3301      	adds	r3, #1
 8014de6:	b2da      	uxtb	r2, r3
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	685b      	ldr	r3, [r3, #4]
 8014df0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014df2:	693b      	ldr	r3, [r7, #16]
 8014df4:	7b1a      	ldrb	r2, [r3, #12]
 8014df6:	7b5b      	ldrb	r3, [r3, #13]
 8014df8:	021b      	lsls	r3, r3, #8
 8014dfa:	4313      	orrs	r3, r2
 8014dfc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014dfe:	693b      	ldr	r3, [r7, #16]
 8014e00:	781b      	ldrb	r3, [r3, #0]
 8014e02:	f003 0301 	and.w	r3, r3, #1
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d023      	beq.n	8014e52 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	2b01      	cmp	r3, #1
 8014e10:	d10f      	bne.n	8014e32 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	785b      	ldrb	r3, [r3, #1]
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d11b      	bne.n	8014e52 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014e1a:	693b      	ldr	r3, [r7, #16]
 8014e1c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014e1e:	2b5e      	cmp	r3, #94	; 0x5e
 8014e20:	d117      	bne.n	8014e52 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	7b5b      	ldrb	r3, [r3, #13]
 8014e26:	f043 0310 	orr.w	r3, r3, #16
 8014e2a:	b2da      	uxtb	r2, r3
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	735a      	strb	r2, [r3, #13]
 8014e30:	e00f      	b.n	8014e52 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014e32:	693b      	ldr	r3, [r7, #16]
 8014e34:	2206      	movs	r2, #6
 8014e36:	4928      	ldr	r1, [pc, #160]	; (8014ed8 <ethernet_input+0x118>)
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f000 f9d1 	bl	80151e0 <memcmp>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d106      	bne.n	8014e52 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	7b5b      	ldrb	r3, [r3, #13]
 8014e48:	f043 0308 	orr.w	r3, r3, #8
 8014e4c:	b2da      	uxtb	r2, r3
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014e52:	89fb      	ldrh	r3, [r7, #14]
 8014e54:	2b08      	cmp	r3, #8
 8014e56:	d003      	beq.n	8014e60 <ethernet_input+0xa0>
 8014e58:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014e5c:	d014      	beq.n	8014e88 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014e5e:	e032      	b.n	8014ec6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014e60:	683b      	ldr	r3, [r7, #0]
 8014e62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014e66:	f003 0308 	and.w	r3, r3, #8
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d024      	beq.n	8014eb8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014e6e:	8afb      	ldrh	r3, [r7, #22]
 8014e70:	4619      	mov	r1, r3
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	f7f6 ff0a 	bl	800bc8c <pbuf_remove_header>
 8014e78:	4603      	mov	r3, r0
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d11e      	bne.n	8014ebc <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014e7e:	6839      	ldr	r1, [r7, #0]
 8014e80:	6878      	ldr	r0, [r7, #4]
 8014e82:	f7fe ff2d 	bl	8013ce0 <ip4_input>
      break;
 8014e86:	e013      	b.n	8014eb0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014e88:	683b      	ldr	r3, [r7, #0]
 8014e8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014e8e:	f003 0308 	and.w	r3, r3, #8
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d014      	beq.n	8014ec0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014e96:	8afb      	ldrh	r3, [r7, #22]
 8014e98:	4619      	mov	r1, r3
 8014e9a:	6878      	ldr	r0, [r7, #4]
 8014e9c:	f7f6 fef6 	bl	800bc8c <pbuf_remove_header>
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d10e      	bne.n	8014ec4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8014ea6:	6839      	ldr	r1, [r7, #0]
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f7fe f8cd 	bl	8013048 <etharp_input>
      break;
 8014eae:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014eb0:	2300      	movs	r3, #0
 8014eb2:	e00c      	b.n	8014ece <ethernet_input+0x10e>
    goto free_and_return;
 8014eb4:	bf00      	nop
 8014eb6:	e006      	b.n	8014ec6 <ethernet_input+0x106>
        goto free_and_return;
 8014eb8:	bf00      	nop
 8014eba:	e004      	b.n	8014ec6 <ethernet_input+0x106>
        goto free_and_return;
 8014ebc:	bf00      	nop
 8014ebe:	e002      	b.n	8014ec6 <ethernet_input+0x106>
        goto free_and_return;
 8014ec0:	bf00      	nop
 8014ec2:	e000      	b.n	8014ec6 <ethernet_input+0x106>
        goto free_and_return;
 8014ec4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014ec6:	6878      	ldr	r0, [r7, #4]
 8014ec8:	f7f6 ff66 	bl	800bd98 <pbuf_free>
  return ERR_OK;
 8014ecc:	2300      	movs	r3, #0
}
 8014ece:	4618      	mov	r0, r3
 8014ed0:	3718      	adds	r7, #24
 8014ed2:	46bd      	mov	sp, r7
 8014ed4:	bd80      	pop	{r7, pc}
 8014ed6:	bf00      	nop
 8014ed8:	08029e14 	.word	0x08029e14

08014edc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b086      	sub	sp, #24
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	60f8      	str	r0, [r7, #12]
 8014ee4:	60b9      	str	r1, [r7, #8]
 8014ee6:	607a      	str	r2, [r7, #4]
 8014ee8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014eea:	8c3b      	ldrh	r3, [r7, #32]
 8014eec:	4618      	mov	r0, r3
 8014eee:	f7f5 fb75 	bl	800a5dc <lwip_htons>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014ef6:	210e      	movs	r1, #14
 8014ef8:	68b8      	ldr	r0, [r7, #8]
 8014efa:	f7f6 feb7 	bl	800bc6c <pbuf_add_header>
 8014efe:	4603      	mov	r3, r0
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d125      	bne.n	8014f50 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014f04:	68bb      	ldr	r3, [r7, #8]
 8014f06:	685b      	ldr	r3, [r3, #4]
 8014f08:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	8afa      	ldrh	r2, [r7, #22]
 8014f0e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014f10:	693b      	ldr	r3, [r7, #16]
 8014f12:	2206      	movs	r2, #6
 8014f14:	6839      	ldr	r1, [r7, #0]
 8014f16:	4618      	mov	r0, r3
 8014f18:	f000 f971 	bl	80151fe <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014f1c:	693b      	ldr	r3, [r7, #16]
 8014f1e:	3306      	adds	r3, #6
 8014f20:	2206      	movs	r2, #6
 8014f22:	6879      	ldr	r1, [r7, #4]
 8014f24:	4618      	mov	r0, r3
 8014f26:	f000 f96a 	bl	80151fe <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8014f30:	2b06      	cmp	r3, #6
 8014f32:	d006      	beq.n	8014f42 <ethernet_output+0x66>
 8014f34:	4b0a      	ldr	r3, [pc, #40]	; (8014f60 <ethernet_output+0x84>)
 8014f36:	f240 1233 	movw	r2, #307	; 0x133
 8014f3a:	490a      	ldr	r1, [pc, #40]	; (8014f64 <ethernet_output+0x88>)
 8014f3c:	480a      	ldr	r0, [pc, #40]	; (8014f68 <ethernet_output+0x8c>)
 8014f3e:	f000 f98b 	bl	8015258 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	699b      	ldr	r3, [r3, #24]
 8014f46:	68b9      	ldr	r1, [r7, #8]
 8014f48:	68f8      	ldr	r0, [r7, #12]
 8014f4a:	4798      	blx	r3
 8014f4c:	4603      	mov	r3, r0
 8014f4e:	e002      	b.n	8014f56 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014f50:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014f52:	f06f 0301 	mvn.w	r3, #1
}
 8014f56:	4618      	mov	r0, r3
 8014f58:	3718      	adds	r7, #24
 8014f5a:	46bd      	mov	sp, r7
 8014f5c:	bd80      	pop	{r7, pc}
 8014f5e:	bf00      	nop
 8014f60:	08019114 	.word	0x08019114
 8014f64:	0801914c 	.word	0x0801914c
 8014f68:	08019180 	.word	0x08019180

08014f6c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b086      	sub	sp, #24
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]
 8014f74:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8014f76:	683b      	ldr	r3, [r7, #0]
 8014f78:	60bb      	str	r3, [r7, #8]
 8014f7a:	2304      	movs	r3, #4
 8014f7c:	60fb      	str	r3, [r7, #12]
 8014f7e:	2300      	movs	r3, #0
 8014f80:	613b      	str	r3, [r7, #16]
 8014f82:	2300      	movs	r3, #0
 8014f84:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8014f86:	f107 0308 	add.w	r3, r7, #8
 8014f8a:	2100      	movs	r1, #0
 8014f8c:	4618      	mov	r0, r3
 8014f8e:	f7f1 fe3f 	bl	8006c10 <osMessageCreate>
 8014f92:	4602      	mov	r2, r0
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	681b      	ldr	r3, [r3, #0]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d102      	bne.n	8014fa6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8014fa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014fa4:	e000      	b.n	8014fa8 <sys_mbox_new+0x3c>

  return ERR_OK;
 8014fa6:	2300      	movs	r3, #0
}
 8014fa8:	4618      	mov	r0, r3
 8014faa:	3718      	adds	r7, #24
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd80      	pop	{r7, pc}

08014fb0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b084      	sub	sp, #16
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
 8014fb8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	681b      	ldr	r3, [r3, #0]
 8014fbe:	6839      	ldr	r1, [r7, #0]
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7f1 fe4e 	bl	8006c64 <osMessagePut>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d102      	bne.n	8014fd4 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8014fce:	2300      	movs	r3, #0
 8014fd0:	73fb      	strb	r3, [r7, #15]
 8014fd2:	e001      	b.n	8014fd8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8014fd4:	23ff      	movs	r3, #255	; 0xff
 8014fd6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014fd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	3710      	adds	r7, #16
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}

08014fe4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b08c      	sub	sp, #48	; 0x30
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	61f8      	str	r0, [r7, #28]
 8014fec:	61b9      	str	r1, [r7, #24]
 8014fee:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014ff0:	f7f1 fc49 	bl	8006886 <osKernelSysTick>
 8014ff4:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8014ff6:	697b      	ldr	r3, [r7, #20]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d017      	beq.n	801502c <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014ffc:	69fb      	ldr	r3, [r7, #28]
 8014ffe:	6819      	ldr	r1, [r3, #0]
 8015000:	f107 0320 	add.w	r3, r7, #32
 8015004:	697a      	ldr	r2, [r7, #20]
 8015006:	4618      	mov	r0, r3
 8015008:	f7f1 fe6c 	bl	8006ce4 <osMessageGet>

    if(event.status == osEventMessage)
 801500c:	6a3b      	ldr	r3, [r7, #32]
 801500e:	2b10      	cmp	r3, #16
 8015010:	d109      	bne.n	8015026 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8015012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015014:	461a      	mov	r2, r3
 8015016:	69bb      	ldr	r3, [r7, #24]
 8015018:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801501a:	f7f1 fc34 	bl	8006886 <osKernelSysTick>
 801501e:	4602      	mov	r2, r0
 8015020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015022:	1ad3      	subs	r3, r2, r3
 8015024:	e019      	b.n	801505a <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801502a:	e016      	b.n	801505a <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801502c:	69fb      	ldr	r3, [r7, #28]
 801502e:	6819      	ldr	r1, [r3, #0]
 8015030:	463b      	mov	r3, r7
 8015032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015036:	4618      	mov	r0, r3
 8015038:	f7f1 fe54 	bl	8006ce4 <osMessageGet>
 801503c:	f107 0320 	add.w	r3, r7, #32
 8015040:	463a      	mov	r2, r7
 8015042:	ca07      	ldmia	r2, {r0, r1, r2}
 8015044:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801504a:	461a      	mov	r2, r3
 801504c:	69bb      	ldr	r3, [r7, #24]
 801504e:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015050:	f7f1 fc19 	bl	8006886 <osKernelSysTick>
 8015054:	4602      	mov	r2, r0
 8015056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015058:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801505a:	4618      	mov	r0, r3
 801505c:	3730      	adds	r7, #48	; 0x30
 801505e:	46bd      	mov	sp, r7
 8015060:	bd80      	pop	{r7, pc}

08015062 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015062:	b480      	push	{r7}
 8015064:	b083      	sub	sp, #12
 8015066:	af00      	add	r7, sp, #0
 8015068:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	2b00      	cmp	r3, #0
 8015070:	d101      	bne.n	8015076 <sys_mbox_valid+0x14>
    return 0;
 8015072:	2300      	movs	r3, #0
 8015074:	e000      	b.n	8015078 <sys_mbox_valid+0x16>
  else
    return 1;
 8015076:	2301      	movs	r3, #1
}
 8015078:	4618      	mov	r0, r3
 801507a:	370c      	adds	r7, #12
 801507c:	46bd      	mov	sp, r7
 801507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015082:	4770      	bx	lr

08015084 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015084:	b580      	push	{r7, lr}
 8015086:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015088:	4803      	ldr	r0, [pc, #12]	; (8015098 <sys_init+0x14>)
 801508a:	f7f1 fc6c 	bl	8006966 <osMutexCreate>
 801508e:	4602      	mov	r2, r0
 8015090:	4b02      	ldr	r3, [pc, #8]	; (801509c <sys_init+0x18>)
 8015092:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015094:	bf00      	nop
 8015096:	bd80      	pop	{r7, pc}
 8015098:	08029e24 	.word	0x08029e24
 801509c:	2000b400 	.word	0x2000b400

080150a0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b084      	sub	sp, #16
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80150a8:	2300      	movs	r3, #0
 80150aa:	60bb      	str	r3, [r7, #8]
 80150ac:	2300      	movs	r3, #0
 80150ae:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80150b0:	f107 0308 	add.w	r3, r7, #8
 80150b4:	4618      	mov	r0, r3
 80150b6:	f7f1 fc56 	bl	8006966 <osMutexCreate>
 80150ba:	4602      	mov	r2, r0
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d102      	bne.n	80150ce <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80150c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80150cc:	e000      	b.n	80150d0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80150ce:	2300      	movs	r3, #0
}
 80150d0:	4618      	mov	r0, r3
 80150d2:	3710      	adds	r7, #16
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}

080150d8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80150d8:	b580      	push	{r7, lr}
 80150da:	b082      	sub	sp, #8
 80150dc:	af00      	add	r7, sp, #0
 80150de:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	681b      	ldr	r3, [r3, #0]
 80150e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80150e8:	4618      	mov	r0, r3
 80150ea:	f7f1 fc55 	bl	8006998 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80150ee:	bf00      	nop
 80150f0:	3708      	adds	r7, #8
 80150f2:	46bd      	mov	sp, r7
 80150f4:	bd80      	pop	{r7, pc}

080150f6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80150f6:	b580      	push	{r7, lr}
 80150f8:	b082      	sub	sp, #8
 80150fa:	af00      	add	r7, sp, #0
 80150fc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	4618      	mov	r0, r3
 8015104:	f7f1 fc96 	bl	8006a34 <osMutexRelease>
}
 8015108:	bf00      	nop
 801510a:	3708      	adds	r7, #8
 801510c:	46bd      	mov	sp, r7
 801510e:	bd80      	pop	{r7, pc}

08015110 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b08c      	sub	sp, #48	; 0x30
 8015114:	af00      	add	r7, sp, #0
 8015116:	60f8      	str	r0, [r7, #12]
 8015118:	60b9      	str	r1, [r7, #8]
 801511a:	607a      	str	r2, [r7, #4]
 801511c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801511e:	f107 0314 	add.w	r3, r7, #20
 8015122:	2200      	movs	r2, #0
 8015124:	601a      	str	r2, [r3, #0]
 8015126:	605a      	str	r2, [r3, #4]
 8015128:	609a      	str	r2, [r3, #8]
 801512a:	60da      	str	r2, [r3, #12]
 801512c:	611a      	str	r2, [r3, #16]
 801512e:	615a      	str	r2, [r3, #20]
 8015130:	619a      	str	r2, [r3, #24]
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	617b      	str	r3, [r7, #20]
 8015136:	68bb      	ldr	r3, [r7, #8]
 8015138:	61bb      	str	r3, [r7, #24]
 801513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801513c:	b21b      	sxth	r3, r3
 801513e:	83bb      	strh	r3, [r7, #28]
 8015140:	683b      	ldr	r3, [r7, #0]
 8015142:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015144:	f107 0314 	add.w	r3, r7, #20
 8015148:	6879      	ldr	r1, [r7, #4]
 801514a:	4618      	mov	r0, r3
 801514c:	f7f1 fbab 	bl	80068a6 <osThreadCreate>
 8015150:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8015152:	4618      	mov	r0, r3
 8015154:	3730      	adds	r7, #48	; 0x30
 8015156:	46bd      	mov	sp, r7
 8015158:	bd80      	pop	{r7, pc}
	...

0801515c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801515c:	b580      	push	{r7, lr}
 801515e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015160:	4b04      	ldr	r3, [pc, #16]	; (8015174 <sys_arch_protect+0x18>)
 8015162:	681b      	ldr	r3, [r3, #0]
 8015164:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015168:	4618      	mov	r0, r3
 801516a:	f7f1 fc15 	bl	8006998 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801516e:	2301      	movs	r3, #1
}
 8015170:	4618      	mov	r0, r3
 8015172:	bd80      	pop	{r7, pc}
 8015174:	2000b400 	.word	0x2000b400

08015178 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b082      	sub	sp, #8
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015180:	4b04      	ldr	r3, [pc, #16]	; (8015194 <sys_arch_unprotect+0x1c>)
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	4618      	mov	r0, r3
 8015186:	f7f1 fc55 	bl	8006a34 <osMutexRelease>
}
 801518a:	bf00      	nop
 801518c:	3708      	adds	r7, #8
 801518e:	46bd      	mov	sp, r7
 8015190:	bd80      	pop	{r7, pc}
 8015192:	bf00      	nop
 8015194:	2000b400 	.word	0x2000b400

08015198 <__libc_init_array>:
 8015198:	b570      	push	{r4, r5, r6, lr}
 801519a:	4e0d      	ldr	r6, [pc, #52]	; (80151d0 <__libc_init_array+0x38>)
 801519c:	4c0d      	ldr	r4, [pc, #52]	; (80151d4 <__libc_init_array+0x3c>)
 801519e:	1ba4      	subs	r4, r4, r6
 80151a0:	10a4      	asrs	r4, r4, #2
 80151a2:	2500      	movs	r5, #0
 80151a4:	42a5      	cmp	r5, r4
 80151a6:	d109      	bne.n	80151bc <__libc_init_array+0x24>
 80151a8:	4e0b      	ldr	r6, [pc, #44]	; (80151d8 <__libc_init_array+0x40>)
 80151aa:	4c0c      	ldr	r4, [pc, #48]	; (80151dc <__libc_init_array+0x44>)
 80151ac:	f001 f934 	bl	8016418 <_init>
 80151b0:	1ba4      	subs	r4, r4, r6
 80151b2:	10a4      	asrs	r4, r4, #2
 80151b4:	2500      	movs	r5, #0
 80151b6:	42a5      	cmp	r5, r4
 80151b8:	d105      	bne.n	80151c6 <__libc_init_array+0x2e>
 80151ba:	bd70      	pop	{r4, r5, r6, pc}
 80151bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80151c0:	4798      	blx	r3
 80151c2:	3501      	adds	r5, #1
 80151c4:	e7ee      	b.n	80151a4 <__libc_init_array+0xc>
 80151c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80151ca:	4798      	blx	r3
 80151cc:	3501      	adds	r5, #1
 80151ce:	e7f2      	b.n	80151b6 <__libc_init_array+0x1e>
 80151d0:	08029ecc 	.word	0x08029ecc
 80151d4:	08029ecc 	.word	0x08029ecc
 80151d8:	08029ecc 	.word	0x08029ecc
 80151dc:	08029ed0 	.word	0x08029ed0

080151e0 <memcmp>:
 80151e0:	b530      	push	{r4, r5, lr}
 80151e2:	2400      	movs	r4, #0
 80151e4:	42a2      	cmp	r2, r4
 80151e6:	d101      	bne.n	80151ec <memcmp+0xc>
 80151e8:	2000      	movs	r0, #0
 80151ea:	e007      	b.n	80151fc <memcmp+0x1c>
 80151ec:	5d03      	ldrb	r3, [r0, r4]
 80151ee:	3401      	adds	r4, #1
 80151f0:	190d      	adds	r5, r1, r4
 80151f2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80151f6:	42ab      	cmp	r3, r5
 80151f8:	d0f4      	beq.n	80151e4 <memcmp+0x4>
 80151fa:	1b58      	subs	r0, r3, r5
 80151fc:	bd30      	pop	{r4, r5, pc}

080151fe <memcpy>:
 80151fe:	b510      	push	{r4, lr}
 8015200:	1e43      	subs	r3, r0, #1
 8015202:	440a      	add	r2, r1
 8015204:	4291      	cmp	r1, r2
 8015206:	d100      	bne.n	801520a <memcpy+0xc>
 8015208:	bd10      	pop	{r4, pc}
 801520a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801520e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015212:	e7f7      	b.n	8015204 <memcpy+0x6>

08015214 <memmove>:
 8015214:	4288      	cmp	r0, r1
 8015216:	b510      	push	{r4, lr}
 8015218:	eb01 0302 	add.w	r3, r1, r2
 801521c:	d807      	bhi.n	801522e <memmove+0x1a>
 801521e:	1e42      	subs	r2, r0, #1
 8015220:	4299      	cmp	r1, r3
 8015222:	d00a      	beq.n	801523a <memmove+0x26>
 8015224:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015228:	f802 4f01 	strb.w	r4, [r2, #1]!
 801522c:	e7f8      	b.n	8015220 <memmove+0xc>
 801522e:	4283      	cmp	r3, r0
 8015230:	d9f5      	bls.n	801521e <memmove+0xa>
 8015232:	1881      	adds	r1, r0, r2
 8015234:	1ad2      	subs	r2, r2, r3
 8015236:	42d3      	cmn	r3, r2
 8015238:	d100      	bne.n	801523c <memmove+0x28>
 801523a:	bd10      	pop	{r4, pc}
 801523c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015240:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8015244:	e7f7      	b.n	8015236 <memmove+0x22>

08015246 <memset>:
 8015246:	4402      	add	r2, r0
 8015248:	4603      	mov	r3, r0
 801524a:	4293      	cmp	r3, r2
 801524c:	d100      	bne.n	8015250 <memset+0xa>
 801524e:	4770      	bx	lr
 8015250:	f803 1b01 	strb.w	r1, [r3], #1
 8015254:	e7f9      	b.n	801524a <memset+0x4>
	...

08015258 <iprintf>:
 8015258:	b40f      	push	{r0, r1, r2, r3}
 801525a:	4b0a      	ldr	r3, [pc, #40]	; (8015284 <iprintf+0x2c>)
 801525c:	b513      	push	{r0, r1, r4, lr}
 801525e:	681c      	ldr	r4, [r3, #0]
 8015260:	b124      	cbz	r4, 801526c <iprintf+0x14>
 8015262:	69a3      	ldr	r3, [r4, #24]
 8015264:	b913      	cbnz	r3, 801526c <iprintf+0x14>
 8015266:	4620      	mov	r0, r4
 8015268:	f000 f8c2 	bl	80153f0 <__sinit>
 801526c:	ab05      	add	r3, sp, #20
 801526e:	9a04      	ldr	r2, [sp, #16]
 8015270:	68a1      	ldr	r1, [r4, #8]
 8015272:	9301      	str	r3, [sp, #4]
 8015274:	4620      	mov	r0, r4
 8015276:	f000 fb71 	bl	801595c <_vfiprintf_r>
 801527a:	b002      	add	sp, #8
 801527c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015280:	b004      	add	sp, #16
 8015282:	4770      	bx	lr
 8015284:	2000001c 	.word	0x2000001c

08015288 <rand>:
 8015288:	b538      	push	{r3, r4, r5, lr}
 801528a:	4b13      	ldr	r3, [pc, #76]	; (80152d8 <rand+0x50>)
 801528c:	681c      	ldr	r4, [r3, #0]
 801528e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015290:	b97b      	cbnz	r3, 80152b2 <rand+0x2a>
 8015292:	2018      	movs	r0, #24
 8015294:	f000 f936 	bl	8015504 <malloc>
 8015298:	4a10      	ldr	r2, [pc, #64]	; (80152dc <rand+0x54>)
 801529a:	4b11      	ldr	r3, [pc, #68]	; (80152e0 <rand+0x58>)
 801529c:	63a0      	str	r0, [r4, #56]	; 0x38
 801529e:	e9c0 2300 	strd	r2, r3, [r0]
 80152a2:	4b10      	ldr	r3, [pc, #64]	; (80152e4 <rand+0x5c>)
 80152a4:	6083      	str	r3, [r0, #8]
 80152a6:	230b      	movs	r3, #11
 80152a8:	8183      	strh	r3, [r0, #12]
 80152aa:	2201      	movs	r2, #1
 80152ac:	2300      	movs	r3, #0
 80152ae:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80152b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80152b4:	480c      	ldr	r0, [pc, #48]	; (80152e8 <rand+0x60>)
 80152b6:	690a      	ldr	r2, [r1, #16]
 80152b8:	694b      	ldr	r3, [r1, #20]
 80152ba:	4c0c      	ldr	r4, [pc, #48]	; (80152ec <rand+0x64>)
 80152bc:	4350      	muls	r0, r2
 80152be:	fb04 0003 	mla	r0, r4, r3, r0
 80152c2:	fba2 2304 	umull	r2, r3, r2, r4
 80152c6:	4403      	add	r3, r0
 80152c8:	1c54      	adds	r4, r2, #1
 80152ca:	f143 0500 	adc.w	r5, r3, #0
 80152ce:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80152d2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80152d6:	bd38      	pop	{r3, r4, r5, pc}
 80152d8:	2000001c 	.word	0x2000001c
 80152dc:	abcd330e 	.word	0xabcd330e
 80152e0:	e66d1234 	.word	0xe66d1234
 80152e4:	0005deec 	.word	0x0005deec
 80152e8:	5851f42d 	.word	0x5851f42d
 80152ec:	4c957f2d 	.word	0x4c957f2d

080152f0 <siprintf>:
 80152f0:	b40e      	push	{r1, r2, r3}
 80152f2:	b500      	push	{lr}
 80152f4:	b09c      	sub	sp, #112	; 0x70
 80152f6:	ab1d      	add	r3, sp, #116	; 0x74
 80152f8:	9002      	str	r0, [sp, #8]
 80152fa:	9006      	str	r0, [sp, #24]
 80152fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015300:	4809      	ldr	r0, [pc, #36]	; (8015328 <siprintf+0x38>)
 8015302:	9107      	str	r1, [sp, #28]
 8015304:	9104      	str	r1, [sp, #16]
 8015306:	4909      	ldr	r1, [pc, #36]	; (801532c <siprintf+0x3c>)
 8015308:	f853 2b04 	ldr.w	r2, [r3], #4
 801530c:	9105      	str	r1, [sp, #20]
 801530e:	6800      	ldr	r0, [r0, #0]
 8015310:	9301      	str	r3, [sp, #4]
 8015312:	a902      	add	r1, sp, #8
 8015314:	f000 fa00 	bl	8015718 <_svfiprintf_r>
 8015318:	9b02      	ldr	r3, [sp, #8]
 801531a:	2200      	movs	r2, #0
 801531c:	701a      	strb	r2, [r3, #0]
 801531e:	b01c      	add	sp, #112	; 0x70
 8015320:	f85d eb04 	ldr.w	lr, [sp], #4
 8015324:	b003      	add	sp, #12
 8015326:	4770      	bx	lr
 8015328:	2000001c 	.word	0x2000001c
 801532c:	ffff0208 	.word	0xffff0208

08015330 <strchr>:
 8015330:	b2c9      	uxtb	r1, r1
 8015332:	4603      	mov	r3, r0
 8015334:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015338:	b11a      	cbz	r2, 8015342 <strchr+0x12>
 801533a:	428a      	cmp	r2, r1
 801533c:	d1f9      	bne.n	8015332 <strchr+0x2>
 801533e:	4618      	mov	r0, r3
 8015340:	4770      	bx	lr
 8015342:	2900      	cmp	r1, #0
 8015344:	bf18      	it	ne
 8015346:	2300      	movne	r3, #0
 8015348:	e7f9      	b.n	801533e <strchr+0xe>

0801534a <strncmp>:
 801534a:	b510      	push	{r4, lr}
 801534c:	b16a      	cbz	r2, 801536a <strncmp+0x20>
 801534e:	3901      	subs	r1, #1
 8015350:	1884      	adds	r4, r0, r2
 8015352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015356:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801535a:	4293      	cmp	r3, r2
 801535c:	d103      	bne.n	8015366 <strncmp+0x1c>
 801535e:	42a0      	cmp	r0, r4
 8015360:	d001      	beq.n	8015366 <strncmp+0x1c>
 8015362:	2b00      	cmp	r3, #0
 8015364:	d1f5      	bne.n	8015352 <strncmp+0x8>
 8015366:	1a98      	subs	r0, r3, r2
 8015368:	bd10      	pop	{r4, pc}
 801536a:	4610      	mov	r0, r2
 801536c:	e7fc      	b.n	8015368 <strncmp+0x1e>
	...

08015370 <std>:
 8015370:	2300      	movs	r3, #0
 8015372:	b510      	push	{r4, lr}
 8015374:	4604      	mov	r4, r0
 8015376:	e9c0 3300 	strd	r3, r3, [r0]
 801537a:	6083      	str	r3, [r0, #8]
 801537c:	8181      	strh	r1, [r0, #12]
 801537e:	6643      	str	r3, [r0, #100]	; 0x64
 8015380:	81c2      	strh	r2, [r0, #14]
 8015382:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015386:	6183      	str	r3, [r0, #24]
 8015388:	4619      	mov	r1, r3
 801538a:	2208      	movs	r2, #8
 801538c:	305c      	adds	r0, #92	; 0x5c
 801538e:	f7ff ff5a 	bl	8015246 <memset>
 8015392:	4b05      	ldr	r3, [pc, #20]	; (80153a8 <std+0x38>)
 8015394:	6263      	str	r3, [r4, #36]	; 0x24
 8015396:	4b05      	ldr	r3, [pc, #20]	; (80153ac <std+0x3c>)
 8015398:	62a3      	str	r3, [r4, #40]	; 0x28
 801539a:	4b05      	ldr	r3, [pc, #20]	; (80153b0 <std+0x40>)
 801539c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801539e:	4b05      	ldr	r3, [pc, #20]	; (80153b4 <std+0x44>)
 80153a0:	6224      	str	r4, [r4, #32]
 80153a2:	6323      	str	r3, [r4, #48]	; 0x30
 80153a4:	bd10      	pop	{r4, pc}
 80153a6:	bf00      	nop
 80153a8:	08015eb9 	.word	0x08015eb9
 80153ac:	08015edb 	.word	0x08015edb
 80153b0:	08015f13 	.word	0x08015f13
 80153b4:	08015f37 	.word	0x08015f37

080153b8 <_cleanup_r>:
 80153b8:	4901      	ldr	r1, [pc, #4]	; (80153c0 <_cleanup_r+0x8>)
 80153ba:	f000 b885 	b.w	80154c8 <_fwalk_reent>
 80153be:	bf00      	nop
 80153c0:	08016211 	.word	0x08016211

080153c4 <__sfmoreglue>:
 80153c4:	b570      	push	{r4, r5, r6, lr}
 80153c6:	1e4a      	subs	r2, r1, #1
 80153c8:	2568      	movs	r5, #104	; 0x68
 80153ca:	4355      	muls	r5, r2
 80153cc:	460e      	mov	r6, r1
 80153ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80153d2:	f000 f8ed 	bl	80155b0 <_malloc_r>
 80153d6:	4604      	mov	r4, r0
 80153d8:	b140      	cbz	r0, 80153ec <__sfmoreglue+0x28>
 80153da:	2100      	movs	r1, #0
 80153dc:	e9c0 1600 	strd	r1, r6, [r0]
 80153e0:	300c      	adds	r0, #12
 80153e2:	60a0      	str	r0, [r4, #8]
 80153e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80153e8:	f7ff ff2d 	bl	8015246 <memset>
 80153ec:	4620      	mov	r0, r4
 80153ee:	bd70      	pop	{r4, r5, r6, pc}

080153f0 <__sinit>:
 80153f0:	6983      	ldr	r3, [r0, #24]
 80153f2:	b510      	push	{r4, lr}
 80153f4:	4604      	mov	r4, r0
 80153f6:	bb33      	cbnz	r3, 8015446 <__sinit+0x56>
 80153f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80153fc:	6503      	str	r3, [r0, #80]	; 0x50
 80153fe:	4b12      	ldr	r3, [pc, #72]	; (8015448 <__sinit+0x58>)
 8015400:	4a12      	ldr	r2, [pc, #72]	; (801544c <__sinit+0x5c>)
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	6282      	str	r2, [r0, #40]	; 0x28
 8015406:	4298      	cmp	r0, r3
 8015408:	bf04      	itt	eq
 801540a:	2301      	moveq	r3, #1
 801540c:	6183      	streq	r3, [r0, #24]
 801540e:	f000 f81f 	bl	8015450 <__sfp>
 8015412:	6060      	str	r0, [r4, #4]
 8015414:	4620      	mov	r0, r4
 8015416:	f000 f81b 	bl	8015450 <__sfp>
 801541a:	60a0      	str	r0, [r4, #8]
 801541c:	4620      	mov	r0, r4
 801541e:	f000 f817 	bl	8015450 <__sfp>
 8015422:	2200      	movs	r2, #0
 8015424:	60e0      	str	r0, [r4, #12]
 8015426:	2104      	movs	r1, #4
 8015428:	6860      	ldr	r0, [r4, #4]
 801542a:	f7ff ffa1 	bl	8015370 <std>
 801542e:	2201      	movs	r2, #1
 8015430:	2109      	movs	r1, #9
 8015432:	68a0      	ldr	r0, [r4, #8]
 8015434:	f7ff ff9c 	bl	8015370 <std>
 8015438:	2202      	movs	r2, #2
 801543a:	2112      	movs	r1, #18
 801543c:	68e0      	ldr	r0, [r4, #12]
 801543e:	f7ff ff97 	bl	8015370 <std>
 8015442:	2301      	movs	r3, #1
 8015444:	61a3      	str	r3, [r4, #24]
 8015446:	bd10      	pop	{r4, pc}
 8015448:	08029e2c 	.word	0x08029e2c
 801544c:	080153b9 	.word	0x080153b9

08015450 <__sfp>:
 8015450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015452:	4b1b      	ldr	r3, [pc, #108]	; (80154c0 <__sfp+0x70>)
 8015454:	681e      	ldr	r6, [r3, #0]
 8015456:	69b3      	ldr	r3, [r6, #24]
 8015458:	4607      	mov	r7, r0
 801545a:	b913      	cbnz	r3, 8015462 <__sfp+0x12>
 801545c:	4630      	mov	r0, r6
 801545e:	f7ff ffc7 	bl	80153f0 <__sinit>
 8015462:	3648      	adds	r6, #72	; 0x48
 8015464:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015468:	3b01      	subs	r3, #1
 801546a:	d503      	bpl.n	8015474 <__sfp+0x24>
 801546c:	6833      	ldr	r3, [r6, #0]
 801546e:	b133      	cbz	r3, 801547e <__sfp+0x2e>
 8015470:	6836      	ldr	r6, [r6, #0]
 8015472:	e7f7      	b.n	8015464 <__sfp+0x14>
 8015474:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015478:	b16d      	cbz	r5, 8015496 <__sfp+0x46>
 801547a:	3468      	adds	r4, #104	; 0x68
 801547c:	e7f4      	b.n	8015468 <__sfp+0x18>
 801547e:	2104      	movs	r1, #4
 8015480:	4638      	mov	r0, r7
 8015482:	f7ff ff9f 	bl	80153c4 <__sfmoreglue>
 8015486:	6030      	str	r0, [r6, #0]
 8015488:	2800      	cmp	r0, #0
 801548a:	d1f1      	bne.n	8015470 <__sfp+0x20>
 801548c:	230c      	movs	r3, #12
 801548e:	603b      	str	r3, [r7, #0]
 8015490:	4604      	mov	r4, r0
 8015492:	4620      	mov	r0, r4
 8015494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015496:	4b0b      	ldr	r3, [pc, #44]	; (80154c4 <__sfp+0x74>)
 8015498:	6665      	str	r5, [r4, #100]	; 0x64
 801549a:	e9c4 5500 	strd	r5, r5, [r4]
 801549e:	60a5      	str	r5, [r4, #8]
 80154a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80154a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80154a8:	2208      	movs	r2, #8
 80154aa:	4629      	mov	r1, r5
 80154ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80154b0:	f7ff fec9 	bl	8015246 <memset>
 80154b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80154b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80154bc:	e7e9      	b.n	8015492 <__sfp+0x42>
 80154be:	bf00      	nop
 80154c0:	08029e2c 	.word	0x08029e2c
 80154c4:	ffff0001 	.word	0xffff0001

080154c8 <_fwalk_reent>:
 80154c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154cc:	4680      	mov	r8, r0
 80154ce:	4689      	mov	r9, r1
 80154d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80154d4:	2600      	movs	r6, #0
 80154d6:	b914      	cbnz	r4, 80154de <_fwalk_reent+0x16>
 80154d8:	4630      	mov	r0, r6
 80154da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80154e2:	3f01      	subs	r7, #1
 80154e4:	d501      	bpl.n	80154ea <_fwalk_reent+0x22>
 80154e6:	6824      	ldr	r4, [r4, #0]
 80154e8:	e7f5      	b.n	80154d6 <_fwalk_reent+0xe>
 80154ea:	89ab      	ldrh	r3, [r5, #12]
 80154ec:	2b01      	cmp	r3, #1
 80154ee:	d907      	bls.n	8015500 <_fwalk_reent+0x38>
 80154f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80154f4:	3301      	adds	r3, #1
 80154f6:	d003      	beq.n	8015500 <_fwalk_reent+0x38>
 80154f8:	4629      	mov	r1, r5
 80154fa:	4640      	mov	r0, r8
 80154fc:	47c8      	blx	r9
 80154fe:	4306      	orrs	r6, r0
 8015500:	3568      	adds	r5, #104	; 0x68
 8015502:	e7ee      	b.n	80154e2 <_fwalk_reent+0x1a>

08015504 <malloc>:
 8015504:	4b02      	ldr	r3, [pc, #8]	; (8015510 <malloc+0xc>)
 8015506:	4601      	mov	r1, r0
 8015508:	6818      	ldr	r0, [r3, #0]
 801550a:	f000 b851 	b.w	80155b0 <_malloc_r>
 801550e:	bf00      	nop
 8015510:	2000001c 	.word	0x2000001c

08015514 <_free_r>:
 8015514:	b538      	push	{r3, r4, r5, lr}
 8015516:	4605      	mov	r5, r0
 8015518:	2900      	cmp	r1, #0
 801551a:	d045      	beq.n	80155a8 <_free_r+0x94>
 801551c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015520:	1f0c      	subs	r4, r1, #4
 8015522:	2b00      	cmp	r3, #0
 8015524:	bfb8      	it	lt
 8015526:	18e4      	addlt	r4, r4, r3
 8015528:	f000 ff12 	bl	8016350 <__malloc_lock>
 801552c:	4a1f      	ldr	r2, [pc, #124]	; (80155ac <_free_r+0x98>)
 801552e:	6813      	ldr	r3, [r2, #0]
 8015530:	4610      	mov	r0, r2
 8015532:	b933      	cbnz	r3, 8015542 <_free_r+0x2e>
 8015534:	6063      	str	r3, [r4, #4]
 8015536:	6014      	str	r4, [r2, #0]
 8015538:	4628      	mov	r0, r5
 801553a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801553e:	f000 bf08 	b.w	8016352 <__malloc_unlock>
 8015542:	42a3      	cmp	r3, r4
 8015544:	d90c      	bls.n	8015560 <_free_r+0x4c>
 8015546:	6821      	ldr	r1, [r4, #0]
 8015548:	1862      	adds	r2, r4, r1
 801554a:	4293      	cmp	r3, r2
 801554c:	bf04      	itt	eq
 801554e:	681a      	ldreq	r2, [r3, #0]
 8015550:	685b      	ldreq	r3, [r3, #4]
 8015552:	6063      	str	r3, [r4, #4]
 8015554:	bf04      	itt	eq
 8015556:	1852      	addeq	r2, r2, r1
 8015558:	6022      	streq	r2, [r4, #0]
 801555a:	6004      	str	r4, [r0, #0]
 801555c:	e7ec      	b.n	8015538 <_free_r+0x24>
 801555e:	4613      	mov	r3, r2
 8015560:	685a      	ldr	r2, [r3, #4]
 8015562:	b10a      	cbz	r2, 8015568 <_free_r+0x54>
 8015564:	42a2      	cmp	r2, r4
 8015566:	d9fa      	bls.n	801555e <_free_r+0x4a>
 8015568:	6819      	ldr	r1, [r3, #0]
 801556a:	1858      	adds	r0, r3, r1
 801556c:	42a0      	cmp	r0, r4
 801556e:	d10b      	bne.n	8015588 <_free_r+0x74>
 8015570:	6820      	ldr	r0, [r4, #0]
 8015572:	4401      	add	r1, r0
 8015574:	1858      	adds	r0, r3, r1
 8015576:	4282      	cmp	r2, r0
 8015578:	6019      	str	r1, [r3, #0]
 801557a:	d1dd      	bne.n	8015538 <_free_r+0x24>
 801557c:	6810      	ldr	r0, [r2, #0]
 801557e:	6852      	ldr	r2, [r2, #4]
 8015580:	605a      	str	r2, [r3, #4]
 8015582:	4401      	add	r1, r0
 8015584:	6019      	str	r1, [r3, #0]
 8015586:	e7d7      	b.n	8015538 <_free_r+0x24>
 8015588:	d902      	bls.n	8015590 <_free_r+0x7c>
 801558a:	230c      	movs	r3, #12
 801558c:	602b      	str	r3, [r5, #0]
 801558e:	e7d3      	b.n	8015538 <_free_r+0x24>
 8015590:	6820      	ldr	r0, [r4, #0]
 8015592:	1821      	adds	r1, r4, r0
 8015594:	428a      	cmp	r2, r1
 8015596:	bf04      	itt	eq
 8015598:	6811      	ldreq	r1, [r2, #0]
 801559a:	6852      	ldreq	r2, [r2, #4]
 801559c:	6062      	str	r2, [r4, #4]
 801559e:	bf04      	itt	eq
 80155a0:	1809      	addeq	r1, r1, r0
 80155a2:	6021      	streq	r1, [r4, #0]
 80155a4:	605c      	str	r4, [r3, #4]
 80155a6:	e7c7      	b.n	8015538 <_free_r+0x24>
 80155a8:	bd38      	pop	{r3, r4, r5, pc}
 80155aa:	bf00      	nop
 80155ac:	20004628 	.word	0x20004628

080155b0 <_malloc_r>:
 80155b0:	b570      	push	{r4, r5, r6, lr}
 80155b2:	1ccd      	adds	r5, r1, #3
 80155b4:	f025 0503 	bic.w	r5, r5, #3
 80155b8:	3508      	adds	r5, #8
 80155ba:	2d0c      	cmp	r5, #12
 80155bc:	bf38      	it	cc
 80155be:	250c      	movcc	r5, #12
 80155c0:	2d00      	cmp	r5, #0
 80155c2:	4606      	mov	r6, r0
 80155c4:	db01      	blt.n	80155ca <_malloc_r+0x1a>
 80155c6:	42a9      	cmp	r1, r5
 80155c8:	d903      	bls.n	80155d2 <_malloc_r+0x22>
 80155ca:	230c      	movs	r3, #12
 80155cc:	6033      	str	r3, [r6, #0]
 80155ce:	2000      	movs	r0, #0
 80155d0:	bd70      	pop	{r4, r5, r6, pc}
 80155d2:	f000 febd 	bl	8016350 <__malloc_lock>
 80155d6:	4a21      	ldr	r2, [pc, #132]	; (801565c <_malloc_r+0xac>)
 80155d8:	6814      	ldr	r4, [r2, #0]
 80155da:	4621      	mov	r1, r4
 80155dc:	b991      	cbnz	r1, 8015604 <_malloc_r+0x54>
 80155de:	4c20      	ldr	r4, [pc, #128]	; (8015660 <_malloc_r+0xb0>)
 80155e0:	6823      	ldr	r3, [r4, #0]
 80155e2:	b91b      	cbnz	r3, 80155ec <_malloc_r+0x3c>
 80155e4:	4630      	mov	r0, r6
 80155e6:	f000 fc57 	bl	8015e98 <_sbrk_r>
 80155ea:	6020      	str	r0, [r4, #0]
 80155ec:	4629      	mov	r1, r5
 80155ee:	4630      	mov	r0, r6
 80155f0:	f000 fc52 	bl	8015e98 <_sbrk_r>
 80155f4:	1c43      	adds	r3, r0, #1
 80155f6:	d124      	bne.n	8015642 <_malloc_r+0x92>
 80155f8:	230c      	movs	r3, #12
 80155fa:	6033      	str	r3, [r6, #0]
 80155fc:	4630      	mov	r0, r6
 80155fe:	f000 fea8 	bl	8016352 <__malloc_unlock>
 8015602:	e7e4      	b.n	80155ce <_malloc_r+0x1e>
 8015604:	680b      	ldr	r3, [r1, #0]
 8015606:	1b5b      	subs	r3, r3, r5
 8015608:	d418      	bmi.n	801563c <_malloc_r+0x8c>
 801560a:	2b0b      	cmp	r3, #11
 801560c:	d90f      	bls.n	801562e <_malloc_r+0x7e>
 801560e:	600b      	str	r3, [r1, #0]
 8015610:	50cd      	str	r5, [r1, r3]
 8015612:	18cc      	adds	r4, r1, r3
 8015614:	4630      	mov	r0, r6
 8015616:	f000 fe9c 	bl	8016352 <__malloc_unlock>
 801561a:	f104 000b 	add.w	r0, r4, #11
 801561e:	1d23      	adds	r3, r4, #4
 8015620:	f020 0007 	bic.w	r0, r0, #7
 8015624:	1ac3      	subs	r3, r0, r3
 8015626:	d0d3      	beq.n	80155d0 <_malloc_r+0x20>
 8015628:	425a      	negs	r2, r3
 801562a:	50e2      	str	r2, [r4, r3]
 801562c:	e7d0      	b.n	80155d0 <_malloc_r+0x20>
 801562e:	428c      	cmp	r4, r1
 8015630:	684b      	ldr	r3, [r1, #4]
 8015632:	bf16      	itet	ne
 8015634:	6063      	strne	r3, [r4, #4]
 8015636:	6013      	streq	r3, [r2, #0]
 8015638:	460c      	movne	r4, r1
 801563a:	e7eb      	b.n	8015614 <_malloc_r+0x64>
 801563c:	460c      	mov	r4, r1
 801563e:	6849      	ldr	r1, [r1, #4]
 8015640:	e7cc      	b.n	80155dc <_malloc_r+0x2c>
 8015642:	1cc4      	adds	r4, r0, #3
 8015644:	f024 0403 	bic.w	r4, r4, #3
 8015648:	42a0      	cmp	r0, r4
 801564a:	d005      	beq.n	8015658 <_malloc_r+0xa8>
 801564c:	1a21      	subs	r1, r4, r0
 801564e:	4630      	mov	r0, r6
 8015650:	f000 fc22 	bl	8015e98 <_sbrk_r>
 8015654:	3001      	adds	r0, #1
 8015656:	d0cf      	beq.n	80155f8 <_malloc_r+0x48>
 8015658:	6025      	str	r5, [r4, #0]
 801565a:	e7db      	b.n	8015614 <_malloc_r+0x64>
 801565c:	20004628 	.word	0x20004628
 8015660:	2000462c 	.word	0x2000462c

08015664 <__ssputs_r>:
 8015664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015668:	688e      	ldr	r6, [r1, #8]
 801566a:	429e      	cmp	r6, r3
 801566c:	4682      	mov	sl, r0
 801566e:	460c      	mov	r4, r1
 8015670:	4690      	mov	r8, r2
 8015672:	4699      	mov	r9, r3
 8015674:	d837      	bhi.n	80156e6 <__ssputs_r+0x82>
 8015676:	898a      	ldrh	r2, [r1, #12]
 8015678:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801567c:	d031      	beq.n	80156e2 <__ssputs_r+0x7e>
 801567e:	6825      	ldr	r5, [r4, #0]
 8015680:	6909      	ldr	r1, [r1, #16]
 8015682:	1a6f      	subs	r7, r5, r1
 8015684:	6965      	ldr	r5, [r4, #20]
 8015686:	2302      	movs	r3, #2
 8015688:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801568c:	fb95 f5f3 	sdiv	r5, r5, r3
 8015690:	f109 0301 	add.w	r3, r9, #1
 8015694:	443b      	add	r3, r7
 8015696:	429d      	cmp	r5, r3
 8015698:	bf38      	it	cc
 801569a:	461d      	movcc	r5, r3
 801569c:	0553      	lsls	r3, r2, #21
 801569e:	d530      	bpl.n	8015702 <__ssputs_r+0x9e>
 80156a0:	4629      	mov	r1, r5
 80156a2:	f7ff ff85 	bl	80155b0 <_malloc_r>
 80156a6:	4606      	mov	r6, r0
 80156a8:	b950      	cbnz	r0, 80156c0 <__ssputs_r+0x5c>
 80156aa:	230c      	movs	r3, #12
 80156ac:	f8ca 3000 	str.w	r3, [sl]
 80156b0:	89a3      	ldrh	r3, [r4, #12]
 80156b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80156b6:	81a3      	strh	r3, [r4, #12]
 80156b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80156bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156c0:	463a      	mov	r2, r7
 80156c2:	6921      	ldr	r1, [r4, #16]
 80156c4:	f7ff fd9b 	bl	80151fe <memcpy>
 80156c8:	89a3      	ldrh	r3, [r4, #12]
 80156ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80156ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80156d2:	81a3      	strh	r3, [r4, #12]
 80156d4:	6126      	str	r6, [r4, #16]
 80156d6:	6165      	str	r5, [r4, #20]
 80156d8:	443e      	add	r6, r7
 80156da:	1bed      	subs	r5, r5, r7
 80156dc:	6026      	str	r6, [r4, #0]
 80156de:	60a5      	str	r5, [r4, #8]
 80156e0:	464e      	mov	r6, r9
 80156e2:	454e      	cmp	r6, r9
 80156e4:	d900      	bls.n	80156e8 <__ssputs_r+0x84>
 80156e6:	464e      	mov	r6, r9
 80156e8:	4632      	mov	r2, r6
 80156ea:	4641      	mov	r1, r8
 80156ec:	6820      	ldr	r0, [r4, #0]
 80156ee:	f7ff fd91 	bl	8015214 <memmove>
 80156f2:	68a3      	ldr	r3, [r4, #8]
 80156f4:	1b9b      	subs	r3, r3, r6
 80156f6:	60a3      	str	r3, [r4, #8]
 80156f8:	6823      	ldr	r3, [r4, #0]
 80156fa:	441e      	add	r6, r3
 80156fc:	6026      	str	r6, [r4, #0]
 80156fe:	2000      	movs	r0, #0
 8015700:	e7dc      	b.n	80156bc <__ssputs_r+0x58>
 8015702:	462a      	mov	r2, r5
 8015704:	f000 fe26 	bl	8016354 <_realloc_r>
 8015708:	4606      	mov	r6, r0
 801570a:	2800      	cmp	r0, #0
 801570c:	d1e2      	bne.n	80156d4 <__ssputs_r+0x70>
 801570e:	6921      	ldr	r1, [r4, #16]
 8015710:	4650      	mov	r0, sl
 8015712:	f7ff feff 	bl	8015514 <_free_r>
 8015716:	e7c8      	b.n	80156aa <__ssputs_r+0x46>

08015718 <_svfiprintf_r>:
 8015718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801571c:	461d      	mov	r5, r3
 801571e:	898b      	ldrh	r3, [r1, #12]
 8015720:	061f      	lsls	r7, r3, #24
 8015722:	b09d      	sub	sp, #116	; 0x74
 8015724:	4680      	mov	r8, r0
 8015726:	460c      	mov	r4, r1
 8015728:	4616      	mov	r6, r2
 801572a:	d50f      	bpl.n	801574c <_svfiprintf_r+0x34>
 801572c:	690b      	ldr	r3, [r1, #16]
 801572e:	b96b      	cbnz	r3, 801574c <_svfiprintf_r+0x34>
 8015730:	2140      	movs	r1, #64	; 0x40
 8015732:	f7ff ff3d 	bl	80155b0 <_malloc_r>
 8015736:	6020      	str	r0, [r4, #0]
 8015738:	6120      	str	r0, [r4, #16]
 801573a:	b928      	cbnz	r0, 8015748 <_svfiprintf_r+0x30>
 801573c:	230c      	movs	r3, #12
 801573e:	f8c8 3000 	str.w	r3, [r8]
 8015742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015746:	e0c8      	b.n	80158da <_svfiprintf_r+0x1c2>
 8015748:	2340      	movs	r3, #64	; 0x40
 801574a:	6163      	str	r3, [r4, #20]
 801574c:	2300      	movs	r3, #0
 801574e:	9309      	str	r3, [sp, #36]	; 0x24
 8015750:	2320      	movs	r3, #32
 8015752:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015756:	2330      	movs	r3, #48	; 0x30
 8015758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801575c:	9503      	str	r5, [sp, #12]
 801575e:	f04f 0b01 	mov.w	fp, #1
 8015762:	4637      	mov	r7, r6
 8015764:	463d      	mov	r5, r7
 8015766:	f815 3b01 	ldrb.w	r3, [r5], #1
 801576a:	b10b      	cbz	r3, 8015770 <_svfiprintf_r+0x58>
 801576c:	2b25      	cmp	r3, #37	; 0x25
 801576e:	d13e      	bne.n	80157ee <_svfiprintf_r+0xd6>
 8015770:	ebb7 0a06 	subs.w	sl, r7, r6
 8015774:	d00b      	beq.n	801578e <_svfiprintf_r+0x76>
 8015776:	4653      	mov	r3, sl
 8015778:	4632      	mov	r2, r6
 801577a:	4621      	mov	r1, r4
 801577c:	4640      	mov	r0, r8
 801577e:	f7ff ff71 	bl	8015664 <__ssputs_r>
 8015782:	3001      	adds	r0, #1
 8015784:	f000 80a4 	beq.w	80158d0 <_svfiprintf_r+0x1b8>
 8015788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801578a:	4453      	add	r3, sl
 801578c:	9309      	str	r3, [sp, #36]	; 0x24
 801578e:	783b      	ldrb	r3, [r7, #0]
 8015790:	2b00      	cmp	r3, #0
 8015792:	f000 809d 	beq.w	80158d0 <_svfiprintf_r+0x1b8>
 8015796:	2300      	movs	r3, #0
 8015798:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801579c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80157a0:	9304      	str	r3, [sp, #16]
 80157a2:	9307      	str	r3, [sp, #28]
 80157a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80157a8:	931a      	str	r3, [sp, #104]	; 0x68
 80157aa:	462f      	mov	r7, r5
 80157ac:	2205      	movs	r2, #5
 80157ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80157b2:	4850      	ldr	r0, [pc, #320]	; (80158f4 <_svfiprintf_r+0x1dc>)
 80157b4:	f7ea fd5c 	bl	8000270 <memchr>
 80157b8:	9b04      	ldr	r3, [sp, #16]
 80157ba:	b9d0      	cbnz	r0, 80157f2 <_svfiprintf_r+0xda>
 80157bc:	06d9      	lsls	r1, r3, #27
 80157be:	bf44      	itt	mi
 80157c0:	2220      	movmi	r2, #32
 80157c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80157c6:	071a      	lsls	r2, r3, #28
 80157c8:	bf44      	itt	mi
 80157ca:	222b      	movmi	r2, #43	; 0x2b
 80157cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80157d0:	782a      	ldrb	r2, [r5, #0]
 80157d2:	2a2a      	cmp	r2, #42	; 0x2a
 80157d4:	d015      	beq.n	8015802 <_svfiprintf_r+0xea>
 80157d6:	9a07      	ldr	r2, [sp, #28]
 80157d8:	462f      	mov	r7, r5
 80157da:	2000      	movs	r0, #0
 80157dc:	250a      	movs	r5, #10
 80157de:	4639      	mov	r1, r7
 80157e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80157e4:	3b30      	subs	r3, #48	; 0x30
 80157e6:	2b09      	cmp	r3, #9
 80157e8:	d94d      	bls.n	8015886 <_svfiprintf_r+0x16e>
 80157ea:	b1b8      	cbz	r0, 801581c <_svfiprintf_r+0x104>
 80157ec:	e00f      	b.n	801580e <_svfiprintf_r+0xf6>
 80157ee:	462f      	mov	r7, r5
 80157f0:	e7b8      	b.n	8015764 <_svfiprintf_r+0x4c>
 80157f2:	4a40      	ldr	r2, [pc, #256]	; (80158f4 <_svfiprintf_r+0x1dc>)
 80157f4:	1a80      	subs	r0, r0, r2
 80157f6:	fa0b f000 	lsl.w	r0, fp, r0
 80157fa:	4318      	orrs	r0, r3
 80157fc:	9004      	str	r0, [sp, #16]
 80157fe:	463d      	mov	r5, r7
 8015800:	e7d3      	b.n	80157aa <_svfiprintf_r+0x92>
 8015802:	9a03      	ldr	r2, [sp, #12]
 8015804:	1d11      	adds	r1, r2, #4
 8015806:	6812      	ldr	r2, [r2, #0]
 8015808:	9103      	str	r1, [sp, #12]
 801580a:	2a00      	cmp	r2, #0
 801580c:	db01      	blt.n	8015812 <_svfiprintf_r+0xfa>
 801580e:	9207      	str	r2, [sp, #28]
 8015810:	e004      	b.n	801581c <_svfiprintf_r+0x104>
 8015812:	4252      	negs	r2, r2
 8015814:	f043 0302 	orr.w	r3, r3, #2
 8015818:	9207      	str	r2, [sp, #28]
 801581a:	9304      	str	r3, [sp, #16]
 801581c:	783b      	ldrb	r3, [r7, #0]
 801581e:	2b2e      	cmp	r3, #46	; 0x2e
 8015820:	d10c      	bne.n	801583c <_svfiprintf_r+0x124>
 8015822:	787b      	ldrb	r3, [r7, #1]
 8015824:	2b2a      	cmp	r3, #42	; 0x2a
 8015826:	d133      	bne.n	8015890 <_svfiprintf_r+0x178>
 8015828:	9b03      	ldr	r3, [sp, #12]
 801582a:	1d1a      	adds	r2, r3, #4
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	9203      	str	r2, [sp, #12]
 8015830:	2b00      	cmp	r3, #0
 8015832:	bfb8      	it	lt
 8015834:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015838:	3702      	adds	r7, #2
 801583a:	9305      	str	r3, [sp, #20]
 801583c:	4d2e      	ldr	r5, [pc, #184]	; (80158f8 <_svfiprintf_r+0x1e0>)
 801583e:	7839      	ldrb	r1, [r7, #0]
 8015840:	2203      	movs	r2, #3
 8015842:	4628      	mov	r0, r5
 8015844:	f7ea fd14 	bl	8000270 <memchr>
 8015848:	b138      	cbz	r0, 801585a <_svfiprintf_r+0x142>
 801584a:	2340      	movs	r3, #64	; 0x40
 801584c:	1b40      	subs	r0, r0, r5
 801584e:	fa03 f000 	lsl.w	r0, r3, r0
 8015852:	9b04      	ldr	r3, [sp, #16]
 8015854:	4303      	orrs	r3, r0
 8015856:	3701      	adds	r7, #1
 8015858:	9304      	str	r3, [sp, #16]
 801585a:	7839      	ldrb	r1, [r7, #0]
 801585c:	4827      	ldr	r0, [pc, #156]	; (80158fc <_svfiprintf_r+0x1e4>)
 801585e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015862:	2206      	movs	r2, #6
 8015864:	1c7e      	adds	r6, r7, #1
 8015866:	f7ea fd03 	bl	8000270 <memchr>
 801586a:	2800      	cmp	r0, #0
 801586c:	d038      	beq.n	80158e0 <_svfiprintf_r+0x1c8>
 801586e:	4b24      	ldr	r3, [pc, #144]	; (8015900 <_svfiprintf_r+0x1e8>)
 8015870:	bb13      	cbnz	r3, 80158b8 <_svfiprintf_r+0x1a0>
 8015872:	9b03      	ldr	r3, [sp, #12]
 8015874:	3307      	adds	r3, #7
 8015876:	f023 0307 	bic.w	r3, r3, #7
 801587a:	3308      	adds	r3, #8
 801587c:	9303      	str	r3, [sp, #12]
 801587e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015880:	444b      	add	r3, r9
 8015882:	9309      	str	r3, [sp, #36]	; 0x24
 8015884:	e76d      	b.n	8015762 <_svfiprintf_r+0x4a>
 8015886:	fb05 3202 	mla	r2, r5, r2, r3
 801588a:	2001      	movs	r0, #1
 801588c:	460f      	mov	r7, r1
 801588e:	e7a6      	b.n	80157de <_svfiprintf_r+0xc6>
 8015890:	2300      	movs	r3, #0
 8015892:	3701      	adds	r7, #1
 8015894:	9305      	str	r3, [sp, #20]
 8015896:	4619      	mov	r1, r3
 8015898:	250a      	movs	r5, #10
 801589a:	4638      	mov	r0, r7
 801589c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80158a0:	3a30      	subs	r2, #48	; 0x30
 80158a2:	2a09      	cmp	r2, #9
 80158a4:	d903      	bls.n	80158ae <_svfiprintf_r+0x196>
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d0c8      	beq.n	801583c <_svfiprintf_r+0x124>
 80158aa:	9105      	str	r1, [sp, #20]
 80158ac:	e7c6      	b.n	801583c <_svfiprintf_r+0x124>
 80158ae:	fb05 2101 	mla	r1, r5, r1, r2
 80158b2:	2301      	movs	r3, #1
 80158b4:	4607      	mov	r7, r0
 80158b6:	e7f0      	b.n	801589a <_svfiprintf_r+0x182>
 80158b8:	ab03      	add	r3, sp, #12
 80158ba:	9300      	str	r3, [sp, #0]
 80158bc:	4622      	mov	r2, r4
 80158be:	4b11      	ldr	r3, [pc, #68]	; (8015904 <_svfiprintf_r+0x1ec>)
 80158c0:	a904      	add	r1, sp, #16
 80158c2:	4640      	mov	r0, r8
 80158c4:	f3af 8000 	nop.w
 80158c8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80158cc:	4681      	mov	r9, r0
 80158ce:	d1d6      	bne.n	801587e <_svfiprintf_r+0x166>
 80158d0:	89a3      	ldrh	r3, [r4, #12]
 80158d2:	065b      	lsls	r3, r3, #25
 80158d4:	f53f af35 	bmi.w	8015742 <_svfiprintf_r+0x2a>
 80158d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80158da:	b01d      	add	sp, #116	; 0x74
 80158dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158e0:	ab03      	add	r3, sp, #12
 80158e2:	9300      	str	r3, [sp, #0]
 80158e4:	4622      	mov	r2, r4
 80158e6:	4b07      	ldr	r3, [pc, #28]	; (8015904 <_svfiprintf_r+0x1ec>)
 80158e8:	a904      	add	r1, sp, #16
 80158ea:	4640      	mov	r0, r8
 80158ec:	f000 f9c2 	bl	8015c74 <_printf_i>
 80158f0:	e7ea      	b.n	80158c8 <_svfiprintf_r+0x1b0>
 80158f2:	bf00      	nop
 80158f4:	08029e90 	.word	0x08029e90
 80158f8:	08029e96 	.word	0x08029e96
 80158fc:	08029e9a 	.word	0x08029e9a
 8015900:	00000000 	.word	0x00000000
 8015904:	08015665 	.word	0x08015665

08015908 <__sfputc_r>:
 8015908:	6893      	ldr	r3, [r2, #8]
 801590a:	3b01      	subs	r3, #1
 801590c:	2b00      	cmp	r3, #0
 801590e:	b410      	push	{r4}
 8015910:	6093      	str	r3, [r2, #8]
 8015912:	da08      	bge.n	8015926 <__sfputc_r+0x1e>
 8015914:	6994      	ldr	r4, [r2, #24]
 8015916:	42a3      	cmp	r3, r4
 8015918:	db01      	blt.n	801591e <__sfputc_r+0x16>
 801591a:	290a      	cmp	r1, #10
 801591c:	d103      	bne.n	8015926 <__sfputc_r+0x1e>
 801591e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015922:	f000 bb0d 	b.w	8015f40 <__swbuf_r>
 8015926:	6813      	ldr	r3, [r2, #0]
 8015928:	1c58      	adds	r0, r3, #1
 801592a:	6010      	str	r0, [r2, #0]
 801592c:	7019      	strb	r1, [r3, #0]
 801592e:	4608      	mov	r0, r1
 8015930:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015934:	4770      	bx	lr

08015936 <__sfputs_r>:
 8015936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015938:	4606      	mov	r6, r0
 801593a:	460f      	mov	r7, r1
 801593c:	4614      	mov	r4, r2
 801593e:	18d5      	adds	r5, r2, r3
 8015940:	42ac      	cmp	r4, r5
 8015942:	d101      	bne.n	8015948 <__sfputs_r+0x12>
 8015944:	2000      	movs	r0, #0
 8015946:	e007      	b.n	8015958 <__sfputs_r+0x22>
 8015948:	463a      	mov	r2, r7
 801594a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801594e:	4630      	mov	r0, r6
 8015950:	f7ff ffda 	bl	8015908 <__sfputc_r>
 8015954:	1c43      	adds	r3, r0, #1
 8015956:	d1f3      	bne.n	8015940 <__sfputs_r+0xa>
 8015958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801595c <_vfiprintf_r>:
 801595c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015960:	460c      	mov	r4, r1
 8015962:	b09d      	sub	sp, #116	; 0x74
 8015964:	4617      	mov	r7, r2
 8015966:	461d      	mov	r5, r3
 8015968:	4606      	mov	r6, r0
 801596a:	b118      	cbz	r0, 8015974 <_vfiprintf_r+0x18>
 801596c:	6983      	ldr	r3, [r0, #24]
 801596e:	b90b      	cbnz	r3, 8015974 <_vfiprintf_r+0x18>
 8015970:	f7ff fd3e 	bl	80153f0 <__sinit>
 8015974:	4b7c      	ldr	r3, [pc, #496]	; (8015b68 <_vfiprintf_r+0x20c>)
 8015976:	429c      	cmp	r4, r3
 8015978:	d158      	bne.n	8015a2c <_vfiprintf_r+0xd0>
 801597a:	6874      	ldr	r4, [r6, #4]
 801597c:	89a3      	ldrh	r3, [r4, #12]
 801597e:	0718      	lsls	r0, r3, #28
 8015980:	d55e      	bpl.n	8015a40 <_vfiprintf_r+0xe4>
 8015982:	6923      	ldr	r3, [r4, #16]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d05b      	beq.n	8015a40 <_vfiprintf_r+0xe4>
 8015988:	2300      	movs	r3, #0
 801598a:	9309      	str	r3, [sp, #36]	; 0x24
 801598c:	2320      	movs	r3, #32
 801598e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015992:	2330      	movs	r3, #48	; 0x30
 8015994:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015998:	9503      	str	r5, [sp, #12]
 801599a:	f04f 0b01 	mov.w	fp, #1
 801599e:	46b8      	mov	r8, r7
 80159a0:	4645      	mov	r5, r8
 80159a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80159a6:	b10b      	cbz	r3, 80159ac <_vfiprintf_r+0x50>
 80159a8:	2b25      	cmp	r3, #37	; 0x25
 80159aa:	d154      	bne.n	8015a56 <_vfiprintf_r+0xfa>
 80159ac:	ebb8 0a07 	subs.w	sl, r8, r7
 80159b0:	d00b      	beq.n	80159ca <_vfiprintf_r+0x6e>
 80159b2:	4653      	mov	r3, sl
 80159b4:	463a      	mov	r2, r7
 80159b6:	4621      	mov	r1, r4
 80159b8:	4630      	mov	r0, r6
 80159ba:	f7ff ffbc 	bl	8015936 <__sfputs_r>
 80159be:	3001      	adds	r0, #1
 80159c0:	f000 80c2 	beq.w	8015b48 <_vfiprintf_r+0x1ec>
 80159c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159c6:	4453      	add	r3, sl
 80159c8:	9309      	str	r3, [sp, #36]	; 0x24
 80159ca:	f898 3000 	ldrb.w	r3, [r8]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	f000 80ba 	beq.w	8015b48 <_vfiprintf_r+0x1ec>
 80159d4:	2300      	movs	r3, #0
 80159d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80159da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80159de:	9304      	str	r3, [sp, #16]
 80159e0:	9307      	str	r3, [sp, #28]
 80159e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80159e6:	931a      	str	r3, [sp, #104]	; 0x68
 80159e8:	46a8      	mov	r8, r5
 80159ea:	2205      	movs	r2, #5
 80159ec:	f818 1b01 	ldrb.w	r1, [r8], #1
 80159f0:	485e      	ldr	r0, [pc, #376]	; (8015b6c <_vfiprintf_r+0x210>)
 80159f2:	f7ea fc3d 	bl	8000270 <memchr>
 80159f6:	9b04      	ldr	r3, [sp, #16]
 80159f8:	bb78      	cbnz	r0, 8015a5a <_vfiprintf_r+0xfe>
 80159fa:	06d9      	lsls	r1, r3, #27
 80159fc:	bf44      	itt	mi
 80159fe:	2220      	movmi	r2, #32
 8015a00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015a04:	071a      	lsls	r2, r3, #28
 8015a06:	bf44      	itt	mi
 8015a08:	222b      	movmi	r2, #43	; 0x2b
 8015a0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015a0e:	782a      	ldrb	r2, [r5, #0]
 8015a10:	2a2a      	cmp	r2, #42	; 0x2a
 8015a12:	d02a      	beq.n	8015a6a <_vfiprintf_r+0x10e>
 8015a14:	9a07      	ldr	r2, [sp, #28]
 8015a16:	46a8      	mov	r8, r5
 8015a18:	2000      	movs	r0, #0
 8015a1a:	250a      	movs	r5, #10
 8015a1c:	4641      	mov	r1, r8
 8015a1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a22:	3b30      	subs	r3, #48	; 0x30
 8015a24:	2b09      	cmp	r3, #9
 8015a26:	d969      	bls.n	8015afc <_vfiprintf_r+0x1a0>
 8015a28:	b360      	cbz	r0, 8015a84 <_vfiprintf_r+0x128>
 8015a2a:	e024      	b.n	8015a76 <_vfiprintf_r+0x11a>
 8015a2c:	4b50      	ldr	r3, [pc, #320]	; (8015b70 <_vfiprintf_r+0x214>)
 8015a2e:	429c      	cmp	r4, r3
 8015a30:	d101      	bne.n	8015a36 <_vfiprintf_r+0xda>
 8015a32:	68b4      	ldr	r4, [r6, #8]
 8015a34:	e7a2      	b.n	801597c <_vfiprintf_r+0x20>
 8015a36:	4b4f      	ldr	r3, [pc, #316]	; (8015b74 <_vfiprintf_r+0x218>)
 8015a38:	429c      	cmp	r4, r3
 8015a3a:	bf08      	it	eq
 8015a3c:	68f4      	ldreq	r4, [r6, #12]
 8015a3e:	e79d      	b.n	801597c <_vfiprintf_r+0x20>
 8015a40:	4621      	mov	r1, r4
 8015a42:	4630      	mov	r0, r6
 8015a44:	f000 fae0 	bl	8016008 <__swsetup_r>
 8015a48:	2800      	cmp	r0, #0
 8015a4a:	d09d      	beq.n	8015988 <_vfiprintf_r+0x2c>
 8015a4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015a50:	b01d      	add	sp, #116	; 0x74
 8015a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a56:	46a8      	mov	r8, r5
 8015a58:	e7a2      	b.n	80159a0 <_vfiprintf_r+0x44>
 8015a5a:	4a44      	ldr	r2, [pc, #272]	; (8015b6c <_vfiprintf_r+0x210>)
 8015a5c:	1a80      	subs	r0, r0, r2
 8015a5e:	fa0b f000 	lsl.w	r0, fp, r0
 8015a62:	4318      	orrs	r0, r3
 8015a64:	9004      	str	r0, [sp, #16]
 8015a66:	4645      	mov	r5, r8
 8015a68:	e7be      	b.n	80159e8 <_vfiprintf_r+0x8c>
 8015a6a:	9a03      	ldr	r2, [sp, #12]
 8015a6c:	1d11      	adds	r1, r2, #4
 8015a6e:	6812      	ldr	r2, [r2, #0]
 8015a70:	9103      	str	r1, [sp, #12]
 8015a72:	2a00      	cmp	r2, #0
 8015a74:	db01      	blt.n	8015a7a <_vfiprintf_r+0x11e>
 8015a76:	9207      	str	r2, [sp, #28]
 8015a78:	e004      	b.n	8015a84 <_vfiprintf_r+0x128>
 8015a7a:	4252      	negs	r2, r2
 8015a7c:	f043 0302 	orr.w	r3, r3, #2
 8015a80:	9207      	str	r2, [sp, #28]
 8015a82:	9304      	str	r3, [sp, #16]
 8015a84:	f898 3000 	ldrb.w	r3, [r8]
 8015a88:	2b2e      	cmp	r3, #46	; 0x2e
 8015a8a:	d10e      	bne.n	8015aaa <_vfiprintf_r+0x14e>
 8015a8c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8015a90:	2b2a      	cmp	r3, #42	; 0x2a
 8015a92:	d138      	bne.n	8015b06 <_vfiprintf_r+0x1aa>
 8015a94:	9b03      	ldr	r3, [sp, #12]
 8015a96:	1d1a      	adds	r2, r3, #4
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	9203      	str	r2, [sp, #12]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	bfb8      	it	lt
 8015aa0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8015aa4:	f108 0802 	add.w	r8, r8, #2
 8015aa8:	9305      	str	r3, [sp, #20]
 8015aaa:	4d33      	ldr	r5, [pc, #204]	; (8015b78 <_vfiprintf_r+0x21c>)
 8015aac:	f898 1000 	ldrb.w	r1, [r8]
 8015ab0:	2203      	movs	r2, #3
 8015ab2:	4628      	mov	r0, r5
 8015ab4:	f7ea fbdc 	bl	8000270 <memchr>
 8015ab8:	b140      	cbz	r0, 8015acc <_vfiprintf_r+0x170>
 8015aba:	2340      	movs	r3, #64	; 0x40
 8015abc:	1b40      	subs	r0, r0, r5
 8015abe:	fa03 f000 	lsl.w	r0, r3, r0
 8015ac2:	9b04      	ldr	r3, [sp, #16]
 8015ac4:	4303      	orrs	r3, r0
 8015ac6:	f108 0801 	add.w	r8, r8, #1
 8015aca:	9304      	str	r3, [sp, #16]
 8015acc:	f898 1000 	ldrb.w	r1, [r8]
 8015ad0:	482a      	ldr	r0, [pc, #168]	; (8015b7c <_vfiprintf_r+0x220>)
 8015ad2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015ad6:	2206      	movs	r2, #6
 8015ad8:	f108 0701 	add.w	r7, r8, #1
 8015adc:	f7ea fbc8 	bl	8000270 <memchr>
 8015ae0:	2800      	cmp	r0, #0
 8015ae2:	d037      	beq.n	8015b54 <_vfiprintf_r+0x1f8>
 8015ae4:	4b26      	ldr	r3, [pc, #152]	; (8015b80 <_vfiprintf_r+0x224>)
 8015ae6:	bb1b      	cbnz	r3, 8015b30 <_vfiprintf_r+0x1d4>
 8015ae8:	9b03      	ldr	r3, [sp, #12]
 8015aea:	3307      	adds	r3, #7
 8015aec:	f023 0307 	bic.w	r3, r3, #7
 8015af0:	3308      	adds	r3, #8
 8015af2:	9303      	str	r3, [sp, #12]
 8015af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015af6:	444b      	add	r3, r9
 8015af8:	9309      	str	r3, [sp, #36]	; 0x24
 8015afa:	e750      	b.n	801599e <_vfiprintf_r+0x42>
 8015afc:	fb05 3202 	mla	r2, r5, r2, r3
 8015b00:	2001      	movs	r0, #1
 8015b02:	4688      	mov	r8, r1
 8015b04:	e78a      	b.n	8015a1c <_vfiprintf_r+0xc0>
 8015b06:	2300      	movs	r3, #0
 8015b08:	f108 0801 	add.w	r8, r8, #1
 8015b0c:	9305      	str	r3, [sp, #20]
 8015b0e:	4619      	mov	r1, r3
 8015b10:	250a      	movs	r5, #10
 8015b12:	4640      	mov	r0, r8
 8015b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015b18:	3a30      	subs	r2, #48	; 0x30
 8015b1a:	2a09      	cmp	r2, #9
 8015b1c:	d903      	bls.n	8015b26 <_vfiprintf_r+0x1ca>
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d0c3      	beq.n	8015aaa <_vfiprintf_r+0x14e>
 8015b22:	9105      	str	r1, [sp, #20]
 8015b24:	e7c1      	b.n	8015aaa <_vfiprintf_r+0x14e>
 8015b26:	fb05 2101 	mla	r1, r5, r1, r2
 8015b2a:	2301      	movs	r3, #1
 8015b2c:	4680      	mov	r8, r0
 8015b2e:	e7f0      	b.n	8015b12 <_vfiprintf_r+0x1b6>
 8015b30:	ab03      	add	r3, sp, #12
 8015b32:	9300      	str	r3, [sp, #0]
 8015b34:	4622      	mov	r2, r4
 8015b36:	4b13      	ldr	r3, [pc, #76]	; (8015b84 <_vfiprintf_r+0x228>)
 8015b38:	a904      	add	r1, sp, #16
 8015b3a:	4630      	mov	r0, r6
 8015b3c:	f3af 8000 	nop.w
 8015b40:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8015b44:	4681      	mov	r9, r0
 8015b46:	d1d5      	bne.n	8015af4 <_vfiprintf_r+0x198>
 8015b48:	89a3      	ldrh	r3, [r4, #12]
 8015b4a:	065b      	lsls	r3, r3, #25
 8015b4c:	f53f af7e 	bmi.w	8015a4c <_vfiprintf_r+0xf0>
 8015b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015b52:	e77d      	b.n	8015a50 <_vfiprintf_r+0xf4>
 8015b54:	ab03      	add	r3, sp, #12
 8015b56:	9300      	str	r3, [sp, #0]
 8015b58:	4622      	mov	r2, r4
 8015b5a:	4b0a      	ldr	r3, [pc, #40]	; (8015b84 <_vfiprintf_r+0x228>)
 8015b5c:	a904      	add	r1, sp, #16
 8015b5e:	4630      	mov	r0, r6
 8015b60:	f000 f888 	bl	8015c74 <_printf_i>
 8015b64:	e7ec      	b.n	8015b40 <_vfiprintf_r+0x1e4>
 8015b66:	bf00      	nop
 8015b68:	08029e50 	.word	0x08029e50
 8015b6c:	08029e90 	.word	0x08029e90
 8015b70:	08029e70 	.word	0x08029e70
 8015b74:	08029e30 	.word	0x08029e30
 8015b78:	08029e96 	.word	0x08029e96
 8015b7c:	08029e9a 	.word	0x08029e9a
 8015b80:	00000000 	.word	0x00000000
 8015b84:	08015937 	.word	0x08015937

08015b88 <_printf_common>:
 8015b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b8c:	4691      	mov	r9, r2
 8015b8e:	461f      	mov	r7, r3
 8015b90:	688a      	ldr	r2, [r1, #8]
 8015b92:	690b      	ldr	r3, [r1, #16]
 8015b94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015b98:	4293      	cmp	r3, r2
 8015b9a:	bfb8      	it	lt
 8015b9c:	4613      	movlt	r3, r2
 8015b9e:	f8c9 3000 	str.w	r3, [r9]
 8015ba2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015ba6:	4606      	mov	r6, r0
 8015ba8:	460c      	mov	r4, r1
 8015baa:	b112      	cbz	r2, 8015bb2 <_printf_common+0x2a>
 8015bac:	3301      	adds	r3, #1
 8015bae:	f8c9 3000 	str.w	r3, [r9]
 8015bb2:	6823      	ldr	r3, [r4, #0]
 8015bb4:	0699      	lsls	r1, r3, #26
 8015bb6:	bf42      	ittt	mi
 8015bb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015bbc:	3302      	addmi	r3, #2
 8015bbe:	f8c9 3000 	strmi.w	r3, [r9]
 8015bc2:	6825      	ldr	r5, [r4, #0]
 8015bc4:	f015 0506 	ands.w	r5, r5, #6
 8015bc8:	d107      	bne.n	8015bda <_printf_common+0x52>
 8015bca:	f104 0a19 	add.w	sl, r4, #25
 8015bce:	68e3      	ldr	r3, [r4, #12]
 8015bd0:	f8d9 2000 	ldr.w	r2, [r9]
 8015bd4:	1a9b      	subs	r3, r3, r2
 8015bd6:	42ab      	cmp	r3, r5
 8015bd8:	dc28      	bgt.n	8015c2c <_printf_common+0xa4>
 8015bda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015bde:	6822      	ldr	r2, [r4, #0]
 8015be0:	3300      	adds	r3, #0
 8015be2:	bf18      	it	ne
 8015be4:	2301      	movne	r3, #1
 8015be6:	0692      	lsls	r2, r2, #26
 8015be8:	d42d      	bmi.n	8015c46 <_printf_common+0xbe>
 8015bea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015bee:	4639      	mov	r1, r7
 8015bf0:	4630      	mov	r0, r6
 8015bf2:	47c0      	blx	r8
 8015bf4:	3001      	adds	r0, #1
 8015bf6:	d020      	beq.n	8015c3a <_printf_common+0xb2>
 8015bf8:	6823      	ldr	r3, [r4, #0]
 8015bfa:	68e5      	ldr	r5, [r4, #12]
 8015bfc:	f8d9 2000 	ldr.w	r2, [r9]
 8015c00:	f003 0306 	and.w	r3, r3, #6
 8015c04:	2b04      	cmp	r3, #4
 8015c06:	bf08      	it	eq
 8015c08:	1aad      	subeq	r5, r5, r2
 8015c0a:	68a3      	ldr	r3, [r4, #8]
 8015c0c:	6922      	ldr	r2, [r4, #16]
 8015c0e:	bf0c      	ite	eq
 8015c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015c14:	2500      	movne	r5, #0
 8015c16:	4293      	cmp	r3, r2
 8015c18:	bfc4      	itt	gt
 8015c1a:	1a9b      	subgt	r3, r3, r2
 8015c1c:	18ed      	addgt	r5, r5, r3
 8015c1e:	f04f 0900 	mov.w	r9, #0
 8015c22:	341a      	adds	r4, #26
 8015c24:	454d      	cmp	r5, r9
 8015c26:	d11a      	bne.n	8015c5e <_printf_common+0xd6>
 8015c28:	2000      	movs	r0, #0
 8015c2a:	e008      	b.n	8015c3e <_printf_common+0xb6>
 8015c2c:	2301      	movs	r3, #1
 8015c2e:	4652      	mov	r2, sl
 8015c30:	4639      	mov	r1, r7
 8015c32:	4630      	mov	r0, r6
 8015c34:	47c0      	blx	r8
 8015c36:	3001      	adds	r0, #1
 8015c38:	d103      	bne.n	8015c42 <_printf_common+0xba>
 8015c3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c42:	3501      	adds	r5, #1
 8015c44:	e7c3      	b.n	8015bce <_printf_common+0x46>
 8015c46:	18e1      	adds	r1, r4, r3
 8015c48:	1c5a      	adds	r2, r3, #1
 8015c4a:	2030      	movs	r0, #48	; 0x30
 8015c4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015c50:	4422      	add	r2, r4
 8015c52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015c56:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015c5a:	3302      	adds	r3, #2
 8015c5c:	e7c5      	b.n	8015bea <_printf_common+0x62>
 8015c5e:	2301      	movs	r3, #1
 8015c60:	4622      	mov	r2, r4
 8015c62:	4639      	mov	r1, r7
 8015c64:	4630      	mov	r0, r6
 8015c66:	47c0      	blx	r8
 8015c68:	3001      	adds	r0, #1
 8015c6a:	d0e6      	beq.n	8015c3a <_printf_common+0xb2>
 8015c6c:	f109 0901 	add.w	r9, r9, #1
 8015c70:	e7d8      	b.n	8015c24 <_printf_common+0x9c>
	...

08015c74 <_printf_i>:
 8015c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c78:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015c7c:	460c      	mov	r4, r1
 8015c7e:	7e09      	ldrb	r1, [r1, #24]
 8015c80:	b085      	sub	sp, #20
 8015c82:	296e      	cmp	r1, #110	; 0x6e
 8015c84:	4617      	mov	r7, r2
 8015c86:	4606      	mov	r6, r0
 8015c88:	4698      	mov	r8, r3
 8015c8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015c8c:	f000 80b3 	beq.w	8015df6 <_printf_i+0x182>
 8015c90:	d822      	bhi.n	8015cd8 <_printf_i+0x64>
 8015c92:	2963      	cmp	r1, #99	; 0x63
 8015c94:	d036      	beq.n	8015d04 <_printf_i+0x90>
 8015c96:	d80a      	bhi.n	8015cae <_printf_i+0x3a>
 8015c98:	2900      	cmp	r1, #0
 8015c9a:	f000 80b9 	beq.w	8015e10 <_printf_i+0x19c>
 8015c9e:	2958      	cmp	r1, #88	; 0x58
 8015ca0:	f000 8083 	beq.w	8015daa <_printf_i+0x136>
 8015ca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ca8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015cac:	e032      	b.n	8015d14 <_printf_i+0xa0>
 8015cae:	2964      	cmp	r1, #100	; 0x64
 8015cb0:	d001      	beq.n	8015cb6 <_printf_i+0x42>
 8015cb2:	2969      	cmp	r1, #105	; 0x69
 8015cb4:	d1f6      	bne.n	8015ca4 <_printf_i+0x30>
 8015cb6:	6820      	ldr	r0, [r4, #0]
 8015cb8:	6813      	ldr	r3, [r2, #0]
 8015cba:	0605      	lsls	r5, r0, #24
 8015cbc:	f103 0104 	add.w	r1, r3, #4
 8015cc0:	d52a      	bpl.n	8015d18 <_printf_i+0xa4>
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	6011      	str	r1, [r2, #0]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	da03      	bge.n	8015cd2 <_printf_i+0x5e>
 8015cca:	222d      	movs	r2, #45	; 0x2d
 8015ccc:	425b      	negs	r3, r3
 8015cce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015cd2:	486f      	ldr	r0, [pc, #444]	; (8015e90 <_printf_i+0x21c>)
 8015cd4:	220a      	movs	r2, #10
 8015cd6:	e039      	b.n	8015d4c <_printf_i+0xd8>
 8015cd8:	2973      	cmp	r1, #115	; 0x73
 8015cda:	f000 809d 	beq.w	8015e18 <_printf_i+0x1a4>
 8015cde:	d808      	bhi.n	8015cf2 <_printf_i+0x7e>
 8015ce0:	296f      	cmp	r1, #111	; 0x6f
 8015ce2:	d020      	beq.n	8015d26 <_printf_i+0xb2>
 8015ce4:	2970      	cmp	r1, #112	; 0x70
 8015ce6:	d1dd      	bne.n	8015ca4 <_printf_i+0x30>
 8015ce8:	6823      	ldr	r3, [r4, #0]
 8015cea:	f043 0320 	orr.w	r3, r3, #32
 8015cee:	6023      	str	r3, [r4, #0]
 8015cf0:	e003      	b.n	8015cfa <_printf_i+0x86>
 8015cf2:	2975      	cmp	r1, #117	; 0x75
 8015cf4:	d017      	beq.n	8015d26 <_printf_i+0xb2>
 8015cf6:	2978      	cmp	r1, #120	; 0x78
 8015cf8:	d1d4      	bne.n	8015ca4 <_printf_i+0x30>
 8015cfa:	2378      	movs	r3, #120	; 0x78
 8015cfc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015d00:	4864      	ldr	r0, [pc, #400]	; (8015e94 <_printf_i+0x220>)
 8015d02:	e055      	b.n	8015db0 <_printf_i+0x13c>
 8015d04:	6813      	ldr	r3, [r2, #0]
 8015d06:	1d19      	adds	r1, r3, #4
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	6011      	str	r1, [r2, #0]
 8015d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015d14:	2301      	movs	r3, #1
 8015d16:	e08c      	b.n	8015e32 <_printf_i+0x1be>
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	6011      	str	r1, [r2, #0]
 8015d1c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015d20:	bf18      	it	ne
 8015d22:	b21b      	sxthne	r3, r3
 8015d24:	e7cf      	b.n	8015cc6 <_printf_i+0x52>
 8015d26:	6813      	ldr	r3, [r2, #0]
 8015d28:	6825      	ldr	r5, [r4, #0]
 8015d2a:	1d18      	adds	r0, r3, #4
 8015d2c:	6010      	str	r0, [r2, #0]
 8015d2e:	0628      	lsls	r0, r5, #24
 8015d30:	d501      	bpl.n	8015d36 <_printf_i+0xc2>
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	e002      	b.n	8015d3c <_printf_i+0xc8>
 8015d36:	0668      	lsls	r0, r5, #25
 8015d38:	d5fb      	bpl.n	8015d32 <_printf_i+0xbe>
 8015d3a:	881b      	ldrh	r3, [r3, #0]
 8015d3c:	4854      	ldr	r0, [pc, #336]	; (8015e90 <_printf_i+0x21c>)
 8015d3e:	296f      	cmp	r1, #111	; 0x6f
 8015d40:	bf14      	ite	ne
 8015d42:	220a      	movne	r2, #10
 8015d44:	2208      	moveq	r2, #8
 8015d46:	2100      	movs	r1, #0
 8015d48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015d4c:	6865      	ldr	r5, [r4, #4]
 8015d4e:	60a5      	str	r5, [r4, #8]
 8015d50:	2d00      	cmp	r5, #0
 8015d52:	f2c0 8095 	blt.w	8015e80 <_printf_i+0x20c>
 8015d56:	6821      	ldr	r1, [r4, #0]
 8015d58:	f021 0104 	bic.w	r1, r1, #4
 8015d5c:	6021      	str	r1, [r4, #0]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d13d      	bne.n	8015dde <_printf_i+0x16a>
 8015d62:	2d00      	cmp	r5, #0
 8015d64:	f040 808e 	bne.w	8015e84 <_printf_i+0x210>
 8015d68:	4665      	mov	r5, ip
 8015d6a:	2a08      	cmp	r2, #8
 8015d6c:	d10b      	bne.n	8015d86 <_printf_i+0x112>
 8015d6e:	6823      	ldr	r3, [r4, #0]
 8015d70:	07db      	lsls	r3, r3, #31
 8015d72:	d508      	bpl.n	8015d86 <_printf_i+0x112>
 8015d74:	6923      	ldr	r3, [r4, #16]
 8015d76:	6862      	ldr	r2, [r4, #4]
 8015d78:	429a      	cmp	r2, r3
 8015d7a:	bfde      	ittt	le
 8015d7c:	2330      	movle	r3, #48	; 0x30
 8015d7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015d82:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8015d86:	ebac 0305 	sub.w	r3, ip, r5
 8015d8a:	6123      	str	r3, [r4, #16]
 8015d8c:	f8cd 8000 	str.w	r8, [sp]
 8015d90:	463b      	mov	r3, r7
 8015d92:	aa03      	add	r2, sp, #12
 8015d94:	4621      	mov	r1, r4
 8015d96:	4630      	mov	r0, r6
 8015d98:	f7ff fef6 	bl	8015b88 <_printf_common>
 8015d9c:	3001      	adds	r0, #1
 8015d9e:	d14d      	bne.n	8015e3c <_printf_i+0x1c8>
 8015da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015da4:	b005      	add	sp, #20
 8015da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015daa:	4839      	ldr	r0, [pc, #228]	; (8015e90 <_printf_i+0x21c>)
 8015dac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015db0:	6813      	ldr	r3, [r2, #0]
 8015db2:	6821      	ldr	r1, [r4, #0]
 8015db4:	1d1d      	adds	r5, r3, #4
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	6015      	str	r5, [r2, #0]
 8015dba:	060a      	lsls	r2, r1, #24
 8015dbc:	d50b      	bpl.n	8015dd6 <_printf_i+0x162>
 8015dbe:	07ca      	lsls	r2, r1, #31
 8015dc0:	bf44      	itt	mi
 8015dc2:	f041 0120 	orrmi.w	r1, r1, #32
 8015dc6:	6021      	strmi	r1, [r4, #0]
 8015dc8:	b91b      	cbnz	r3, 8015dd2 <_printf_i+0x15e>
 8015dca:	6822      	ldr	r2, [r4, #0]
 8015dcc:	f022 0220 	bic.w	r2, r2, #32
 8015dd0:	6022      	str	r2, [r4, #0]
 8015dd2:	2210      	movs	r2, #16
 8015dd4:	e7b7      	b.n	8015d46 <_printf_i+0xd2>
 8015dd6:	064d      	lsls	r5, r1, #25
 8015dd8:	bf48      	it	mi
 8015dda:	b29b      	uxthmi	r3, r3
 8015ddc:	e7ef      	b.n	8015dbe <_printf_i+0x14a>
 8015dde:	4665      	mov	r5, ip
 8015de0:	fbb3 f1f2 	udiv	r1, r3, r2
 8015de4:	fb02 3311 	mls	r3, r2, r1, r3
 8015de8:	5cc3      	ldrb	r3, [r0, r3]
 8015dea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015dee:	460b      	mov	r3, r1
 8015df0:	2900      	cmp	r1, #0
 8015df2:	d1f5      	bne.n	8015de0 <_printf_i+0x16c>
 8015df4:	e7b9      	b.n	8015d6a <_printf_i+0xf6>
 8015df6:	6813      	ldr	r3, [r2, #0]
 8015df8:	6825      	ldr	r5, [r4, #0]
 8015dfa:	6961      	ldr	r1, [r4, #20]
 8015dfc:	1d18      	adds	r0, r3, #4
 8015dfe:	6010      	str	r0, [r2, #0]
 8015e00:	0628      	lsls	r0, r5, #24
 8015e02:	681b      	ldr	r3, [r3, #0]
 8015e04:	d501      	bpl.n	8015e0a <_printf_i+0x196>
 8015e06:	6019      	str	r1, [r3, #0]
 8015e08:	e002      	b.n	8015e10 <_printf_i+0x19c>
 8015e0a:	066a      	lsls	r2, r5, #25
 8015e0c:	d5fb      	bpl.n	8015e06 <_printf_i+0x192>
 8015e0e:	8019      	strh	r1, [r3, #0]
 8015e10:	2300      	movs	r3, #0
 8015e12:	6123      	str	r3, [r4, #16]
 8015e14:	4665      	mov	r5, ip
 8015e16:	e7b9      	b.n	8015d8c <_printf_i+0x118>
 8015e18:	6813      	ldr	r3, [r2, #0]
 8015e1a:	1d19      	adds	r1, r3, #4
 8015e1c:	6011      	str	r1, [r2, #0]
 8015e1e:	681d      	ldr	r5, [r3, #0]
 8015e20:	6862      	ldr	r2, [r4, #4]
 8015e22:	2100      	movs	r1, #0
 8015e24:	4628      	mov	r0, r5
 8015e26:	f7ea fa23 	bl	8000270 <memchr>
 8015e2a:	b108      	cbz	r0, 8015e30 <_printf_i+0x1bc>
 8015e2c:	1b40      	subs	r0, r0, r5
 8015e2e:	6060      	str	r0, [r4, #4]
 8015e30:	6863      	ldr	r3, [r4, #4]
 8015e32:	6123      	str	r3, [r4, #16]
 8015e34:	2300      	movs	r3, #0
 8015e36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e3a:	e7a7      	b.n	8015d8c <_printf_i+0x118>
 8015e3c:	6923      	ldr	r3, [r4, #16]
 8015e3e:	462a      	mov	r2, r5
 8015e40:	4639      	mov	r1, r7
 8015e42:	4630      	mov	r0, r6
 8015e44:	47c0      	blx	r8
 8015e46:	3001      	adds	r0, #1
 8015e48:	d0aa      	beq.n	8015da0 <_printf_i+0x12c>
 8015e4a:	6823      	ldr	r3, [r4, #0]
 8015e4c:	079b      	lsls	r3, r3, #30
 8015e4e:	d413      	bmi.n	8015e78 <_printf_i+0x204>
 8015e50:	68e0      	ldr	r0, [r4, #12]
 8015e52:	9b03      	ldr	r3, [sp, #12]
 8015e54:	4298      	cmp	r0, r3
 8015e56:	bfb8      	it	lt
 8015e58:	4618      	movlt	r0, r3
 8015e5a:	e7a3      	b.n	8015da4 <_printf_i+0x130>
 8015e5c:	2301      	movs	r3, #1
 8015e5e:	464a      	mov	r2, r9
 8015e60:	4639      	mov	r1, r7
 8015e62:	4630      	mov	r0, r6
 8015e64:	47c0      	blx	r8
 8015e66:	3001      	adds	r0, #1
 8015e68:	d09a      	beq.n	8015da0 <_printf_i+0x12c>
 8015e6a:	3501      	adds	r5, #1
 8015e6c:	68e3      	ldr	r3, [r4, #12]
 8015e6e:	9a03      	ldr	r2, [sp, #12]
 8015e70:	1a9b      	subs	r3, r3, r2
 8015e72:	42ab      	cmp	r3, r5
 8015e74:	dcf2      	bgt.n	8015e5c <_printf_i+0x1e8>
 8015e76:	e7eb      	b.n	8015e50 <_printf_i+0x1dc>
 8015e78:	2500      	movs	r5, #0
 8015e7a:	f104 0919 	add.w	r9, r4, #25
 8015e7e:	e7f5      	b.n	8015e6c <_printf_i+0x1f8>
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d1ac      	bne.n	8015dde <_printf_i+0x16a>
 8015e84:	7803      	ldrb	r3, [r0, #0]
 8015e86:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015e8a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015e8e:	e76c      	b.n	8015d6a <_printf_i+0xf6>
 8015e90:	08029ea1 	.word	0x08029ea1
 8015e94:	08029eb2 	.word	0x08029eb2

08015e98 <_sbrk_r>:
 8015e98:	b538      	push	{r3, r4, r5, lr}
 8015e9a:	4c06      	ldr	r4, [pc, #24]	; (8015eb4 <_sbrk_r+0x1c>)
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	4605      	mov	r5, r0
 8015ea0:	4608      	mov	r0, r1
 8015ea2:	6023      	str	r3, [r4, #0]
 8015ea4:	f7eb f8e6 	bl	8001074 <_sbrk>
 8015ea8:	1c43      	adds	r3, r0, #1
 8015eaa:	d102      	bne.n	8015eb2 <_sbrk_r+0x1a>
 8015eac:	6823      	ldr	r3, [r4, #0]
 8015eae:	b103      	cbz	r3, 8015eb2 <_sbrk_r+0x1a>
 8015eb0:	602b      	str	r3, [r5, #0]
 8015eb2:	bd38      	pop	{r3, r4, r5, pc}
 8015eb4:	2000b3fc 	.word	0x2000b3fc

08015eb8 <__sread>:
 8015eb8:	b510      	push	{r4, lr}
 8015eba:	460c      	mov	r4, r1
 8015ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ec0:	f000 fa6e 	bl	80163a0 <_read_r>
 8015ec4:	2800      	cmp	r0, #0
 8015ec6:	bfab      	itete	ge
 8015ec8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015eca:	89a3      	ldrhlt	r3, [r4, #12]
 8015ecc:	181b      	addge	r3, r3, r0
 8015ece:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015ed2:	bfac      	ite	ge
 8015ed4:	6563      	strge	r3, [r4, #84]	; 0x54
 8015ed6:	81a3      	strhlt	r3, [r4, #12]
 8015ed8:	bd10      	pop	{r4, pc}

08015eda <__swrite>:
 8015eda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ede:	461f      	mov	r7, r3
 8015ee0:	898b      	ldrh	r3, [r1, #12]
 8015ee2:	05db      	lsls	r3, r3, #23
 8015ee4:	4605      	mov	r5, r0
 8015ee6:	460c      	mov	r4, r1
 8015ee8:	4616      	mov	r6, r2
 8015eea:	d505      	bpl.n	8015ef8 <__swrite+0x1e>
 8015eec:	2302      	movs	r3, #2
 8015eee:	2200      	movs	r2, #0
 8015ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ef4:	f000 f9b6 	bl	8016264 <_lseek_r>
 8015ef8:	89a3      	ldrh	r3, [r4, #12]
 8015efa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015efe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015f02:	81a3      	strh	r3, [r4, #12]
 8015f04:	4632      	mov	r2, r6
 8015f06:	463b      	mov	r3, r7
 8015f08:	4628      	mov	r0, r5
 8015f0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015f0e:	f000 b869 	b.w	8015fe4 <_write_r>

08015f12 <__sseek>:
 8015f12:	b510      	push	{r4, lr}
 8015f14:	460c      	mov	r4, r1
 8015f16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f1a:	f000 f9a3 	bl	8016264 <_lseek_r>
 8015f1e:	1c43      	adds	r3, r0, #1
 8015f20:	89a3      	ldrh	r3, [r4, #12]
 8015f22:	bf15      	itete	ne
 8015f24:	6560      	strne	r0, [r4, #84]	; 0x54
 8015f26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015f2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015f2e:	81a3      	strheq	r3, [r4, #12]
 8015f30:	bf18      	it	ne
 8015f32:	81a3      	strhne	r3, [r4, #12]
 8015f34:	bd10      	pop	{r4, pc}

08015f36 <__sclose>:
 8015f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015f3a:	f000 b8d3 	b.w	80160e4 <_close_r>
	...

08015f40 <__swbuf_r>:
 8015f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f42:	460e      	mov	r6, r1
 8015f44:	4614      	mov	r4, r2
 8015f46:	4605      	mov	r5, r0
 8015f48:	b118      	cbz	r0, 8015f52 <__swbuf_r+0x12>
 8015f4a:	6983      	ldr	r3, [r0, #24]
 8015f4c:	b90b      	cbnz	r3, 8015f52 <__swbuf_r+0x12>
 8015f4e:	f7ff fa4f 	bl	80153f0 <__sinit>
 8015f52:	4b21      	ldr	r3, [pc, #132]	; (8015fd8 <__swbuf_r+0x98>)
 8015f54:	429c      	cmp	r4, r3
 8015f56:	d12a      	bne.n	8015fae <__swbuf_r+0x6e>
 8015f58:	686c      	ldr	r4, [r5, #4]
 8015f5a:	69a3      	ldr	r3, [r4, #24]
 8015f5c:	60a3      	str	r3, [r4, #8]
 8015f5e:	89a3      	ldrh	r3, [r4, #12]
 8015f60:	071a      	lsls	r2, r3, #28
 8015f62:	d52e      	bpl.n	8015fc2 <__swbuf_r+0x82>
 8015f64:	6923      	ldr	r3, [r4, #16]
 8015f66:	b363      	cbz	r3, 8015fc2 <__swbuf_r+0x82>
 8015f68:	6923      	ldr	r3, [r4, #16]
 8015f6a:	6820      	ldr	r0, [r4, #0]
 8015f6c:	1ac0      	subs	r0, r0, r3
 8015f6e:	6963      	ldr	r3, [r4, #20]
 8015f70:	b2f6      	uxtb	r6, r6
 8015f72:	4283      	cmp	r3, r0
 8015f74:	4637      	mov	r7, r6
 8015f76:	dc04      	bgt.n	8015f82 <__swbuf_r+0x42>
 8015f78:	4621      	mov	r1, r4
 8015f7a:	4628      	mov	r0, r5
 8015f7c:	f000 f948 	bl	8016210 <_fflush_r>
 8015f80:	bb28      	cbnz	r0, 8015fce <__swbuf_r+0x8e>
 8015f82:	68a3      	ldr	r3, [r4, #8]
 8015f84:	3b01      	subs	r3, #1
 8015f86:	60a3      	str	r3, [r4, #8]
 8015f88:	6823      	ldr	r3, [r4, #0]
 8015f8a:	1c5a      	adds	r2, r3, #1
 8015f8c:	6022      	str	r2, [r4, #0]
 8015f8e:	701e      	strb	r6, [r3, #0]
 8015f90:	6963      	ldr	r3, [r4, #20]
 8015f92:	3001      	adds	r0, #1
 8015f94:	4283      	cmp	r3, r0
 8015f96:	d004      	beq.n	8015fa2 <__swbuf_r+0x62>
 8015f98:	89a3      	ldrh	r3, [r4, #12]
 8015f9a:	07db      	lsls	r3, r3, #31
 8015f9c:	d519      	bpl.n	8015fd2 <__swbuf_r+0x92>
 8015f9e:	2e0a      	cmp	r6, #10
 8015fa0:	d117      	bne.n	8015fd2 <__swbuf_r+0x92>
 8015fa2:	4621      	mov	r1, r4
 8015fa4:	4628      	mov	r0, r5
 8015fa6:	f000 f933 	bl	8016210 <_fflush_r>
 8015faa:	b190      	cbz	r0, 8015fd2 <__swbuf_r+0x92>
 8015fac:	e00f      	b.n	8015fce <__swbuf_r+0x8e>
 8015fae:	4b0b      	ldr	r3, [pc, #44]	; (8015fdc <__swbuf_r+0x9c>)
 8015fb0:	429c      	cmp	r4, r3
 8015fb2:	d101      	bne.n	8015fb8 <__swbuf_r+0x78>
 8015fb4:	68ac      	ldr	r4, [r5, #8]
 8015fb6:	e7d0      	b.n	8015f5a <__swbuf_r+0x1a>
 8015fb8:	4b09      	ldr	r3, [pc, #36]	; (8015fe0 <__swbuf_r+0xa0>)
 8015fba:	429c      	cmp	r4, r3
 8015fbc:	bf08      	it	eq
 8015fbe:	68ec      	ldreq	r4, [r5, #12]
 8015fc0:	e7cb      	b.n	8015f5a <__swbuf_r+0x1a>
 8015fc2:	4621      	mov	r1, r4
 8015fc4:	4628      	mov	r0, r5
 8015fc6:	f000 f81f 	bl	8016008 <__swsetup_r>
 8015fca:	2800      	cmp	r0, #0
 8015fcc:	d0cc      	beq.n	8015f68 <__swbuf_r+0x28>
 8015fce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8015fd2:	4638      	mov	r0, r7
 8015fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fd6:	bf00      	nop
 8015fd8:	08029e50 	.word	0x08029e50
 8015fdc:	08029e70 	.word	0x08029e70
 8015fe0:	08029e30 	.word	0x08029e30

08015fe4 <_write_r>:
 8015fe4:	b538      	push	{r3, r4, r5, lr}
 8015fe6:	4c07      	ldr	r4, [pc, #28]	; (8016004 <_write_r+0x20>)
 8015fe8:	4605      	mov	r5, r0
 8015fea:	4608      	mov	r0, r1
 8015fec:	4611      	mov	r1, r2
 8015fee:	2200      	movs	r2, #0
 8015ff0:	6022      	str	r2, [r4, #0]
 8015ff2:	461a      	mov	r2, r3
 8015ff4:	f7ea ffed 	bl	8000fd2 <_write>
 8015ff8:	1c43      	adds	r3, r0, #1
 8015ffa:	d102      	bne.n	8016002 <_write_r+0x1e>
 8015ffc:	6823      	ldr	r3, [r4, #0]
 8015ffe:	b103      	cbz	r3, 8016002 <_write_r+0x1e>
 8016000:	602b      	str	r3, [r5, #0]
 8016002:	bd38      	pop	{r3, r4, r5, pc}
 8016004:	2000b3fc 	.word	0x2000b3fc

08016008 <__swsetup_r>:
 8016008:	4b32      	ldr	r3, [pc, #200]	; (80160d4 <__swsetup_r+0xcc>)
 801600a:	b570      	push	{r4, r5, r6, lr}
 801600c:	681d      	ldr	r5, [r3, #0]
 801600e:	4606      	mov	r6, r0
 8016010:	460c      	mov	r4, r1
 8016012:	b125      	cbz	r5, 801601e <__swsetup_r+0x16>
 8016014:	69ab      	ldr	r3, [r5, #24]
 8016016:	b913      	cbnz	r3, 801601e <__swsetup_r+0x16>
 8016018:	4628      	mov	r0, r5
 801601a:	f7ff f9e9 	bl	80153f0 <__sinit>
 801601e:	4b2e      	ldr	r3, [pc, #184]	; (80160d8 <__swsetup_r+0xd0>)
 8016020:	429c      	cmp	r4, r3
 8016022:	d10f      	bne.n	8016044 <__swsetup_r+0x3c>
 8016024:	686c      	ldr	r4, [r5, #4]
 8016026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801602a:	b29a      	uxth	r2, r3
 801602c:	0715      	lsls	r5, r2, #28
 801602e:	d42c      	bmi.n	801608a <__swsetup_r+0x82>
 8016030:	06d0      	lsls	r0, r2, #27
 8016032:	d411      	bmi.n	8016058 <__swsetup_r+0x50>
 8016034:	2209      	movs	r2, #9
 8016036:	6032      	str	r2, [r6, #0]
 8016038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801603c:	81a3      	strh	r3, [r4, #12]
 801603e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016042:	e03e      	b.n	80160c2 <__swsetup_r+0xba>
 8016044:	4b25      	ldr	r3, [pc, #148]	; (80160dc <__swsetup_r+0xd4>)
 8016046:	429c      	cmp	r4, r3
 8016048:	d101      	bne.n	801604e <__swsetup_r+0x46>
 801604a:	68ac      	ldr	r4, [r5, #8]
 801604c:	e7eb      	b.n	8016026 <__swsetup_r+0x1e>
 801604e:	4b24      	ldr	r3, [pc, #144]	; (80160e0 <__swsetup_r+0xd8>)
 8016050:	429c      	cmp	r4, r3
 8016052:	bf08      	it	eq
 8016054:	68ec      	ldreq	r4, [r5, #12]
 8016056:	e7e6      	b.n	8016026 <__swsetup_r+0x1e>
 8016058:	0751      	lsls	r1, r2, #29
 801605a:	d512      	bpl.n	8016082 <__swsetup_r+0x7a>
 801605c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801605e:	b141      	cbz	r1, 8016072 <__swsetup_r+0x6a>
 8016060:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016064:	4299      	cmp	r1, r3
 8016066:	d002      	beq.n	801606e <__swsetup_r+0x66>
 8016068:	4630      	mov	r0, r6
 801606a:	f7ff fa53 	bl	8015514 <_free_r>
 801606e:	2300      	movs	r3, #0
 8016070:	6363      	str	r3, [r4, #52]	; 0x34
 8016072:	89a3      	ldrh	r3, [r4, #12]
 8016074:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016078:	81a3      	strh	r3, [r4, #12]
 801607a:	2300      	movs	r3, #0
 801607c:	6063      	str	r3, [r4, #4]
 801607e:	6923      	ldr	r3, [r4, #16]
 8016080:	6023      	str	r3, [r4, #0]
 8016082:	89a3      	ldrh	r3, [r4, #12]
 8016084:	f043 0308 	orr.w	r3, r3, #8
 8016088:	81a3      	strh	r3, [r4, #12]
 801608a:	6923      	ldr	r3, [r4, #16]
 801608c:	b94b      	cbnz	r3, 80160a2 <__swsetup_r+0x9a>
 801608e:	89a3      	ldrh	r3, [r4, #12]
 8016090:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016098:	d003      	beq.n	80160a2 <__swsetup_r+0x9a>
 801609a:	4621      	mov	r1, r4
 801609c:	4630      	mov	r0, r6
 801609e:	f000 f917 	bl	80162d0 <__smakebuf_r>
 80160a2:	89a2      	ldrh	r2, [r4, #12]
 80160a4:	f012 0301 	ands.w	r3, r2, #1
 80160a8:	d00c      	beq.n	80160c4 <__swsetup_r+0xbc>
 80160aa:	2300      	movs	r3, #0
 80160ac:	60a3      	str	r3, [r4, #8]
 80160ae:	6963      	ldr	r3, [r4, #20]
 80160b0:	425b      	negs	r3, r3
 80160b2:	61a3      	str	r3, [r4, #24]
 80160b4:	6923      	ldr	r3, [r4, #16]
 80160b6:	b953      	cbnz	r3, 80160ce <__swsetup_r+0xc6>
 80160b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80160bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80160c0:	d1ba      	bne.n	8016038 <__swsetup_r+0x30>
 80160c2:	bd70      	pop	{r4, r5, r6, pc}
 80160c4:	0792      	lsls	r2, r2, #30
 80160c6:	bf58      	it	pl
 80160c8:	6963      	ldrpl	r3, [r4, #20]
 80160ca:	60a3      	str	r3, [r4, #8]
 80160cc:	e7f2      	b.n	80160b4 <__swsetup_r+0xac>
 80160ce:	2000      	movs	r0, #0
 80160d0:	e7f7      	b.n	80160c2 <__swsetup_r+0xba>
 80160d2:	bf00      	nop
 80160d4:	2000001c 	.word	0x2000001c
 80160d8:	08029e50 	.word	0x08029e50
 80160dc:	08029e70 	.word	0x08029e70
 80160e0:	08029e30 	.word	0x08029e30

080160e4 <_close_r>:
 80160e4:	b538      	push	{r3, r4, r5, lr}
 80160e6:	4c06      	ldr	r4, [pc, #24]	; (8016100 <_close_r+0x1c>)
 80160e8:	2300      	movs	r3, #0
 80160ea:	4605      	mov	r5, r0
 80160ec:	4608      	mov	r0, r1
 80160ee:	6023      	str	r3, [r4, #0]
 80160f0:	f7ea ff8b 	bl	800100a <_close>
 80160f4:	1c43      	adds	r3, r0, #1
 80160f6:	d102      	bne.n	80160fe <_close_r+0x1a>
 80160f8:	6823      	ldr	r3, [r4, #0]
 80160fa:	b103      	cbz	r3, 80160fe <_close_r+0x1a>
 80160fc:	602b      	str	r3, [r5, #0]
 80160fe:	bd38      	pop	{r3, r4, r5, pc}
 8016100:	2000b3fc 	.word	0x2000b3fc

08016104 <__sflush_r>:
 8016104:	898a      	ldrh	r2, [r1, #12]
 8016106:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801610a:	4605      	mov	r5, r0
 801610c:	0710      	lsls	r0, r2, #28
 801610e:	460c      	mov	r4, r1
 8016110:	d458      	bmi.n	80161c4 <__sflush_r+0xc0>
 8016112:	684b      	ldr	r3, [r1, #4]
 8016114:	2b00      	cmp	r3, #0
 8016116:	dc05      	bgt.n	8016124 <__sflush_r+0x20>
 8016118:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801611a:	2b00      	cmp	r3, #0
 801611c:	dc02      	bgt.n	8016124 <__sflush_r+0x20>
 801611e:	2000      	movs	r0, #0
 8016120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016124:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016126:	2e00      	cmp	r6, #0
 8016128:	d0f9      	beq.n	801611e <__sflush_r+0x1a>
 801612a:	2300      	movs	r3, #0
 801612c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016130:	682f      	ldr	r7, [r5, #0]
 8016132:	6a21      	ldr	r1, [r4, #32]
 8016134:	602b      	str	r3, [r5, #0]
 8016136:	d032      	beq.n	801619e <__sflush_r+0x9a>
 8016138:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801613a:	89a3      	ldrh	r3, [r4, #12]
 801613c:	075a      	lsls	r2, r3, #29
 801613e:	d505      	bpl.n	801614c <__sflush_r+0x48>
 8016140:	6863      	ldr	r3, [r4, #4]
 8016142:	1ac0      	subs	r0, r0, r3
 8016144:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016146:	b10b      	cbz	r3, 801614c <__sflush_r+0x48>
 8016148:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801614a:	1ac0      	subs	r0, r0, r3
 801614c:	2300      	movs	r3, #0
 801614e:	4602      	mov	r2, r0
 8016150:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016152:	6a21      	ldr	r1, [r4, #32]
 8016154:	4628      	mov	r0, r5
 8016156:	47b0      	blx	r6
 8016158:	1c43      	adds	r3, r0, #1
 801615a:	89a3      	ldrh	r3, [r4, #12]
 801615c:	d106      	bne.n	801616c <__sflush_r+0x68>
 801615e:	6829      	ldr	r1, [r5, #0]
 8016160:	291d      	cmp	r1, #29
 8016162:	d848      	bhi.n	80161f6 <__sflush_r+0xf2>
 8016164:	4a29      	ldr	r2, [pc, #164]	; (801620c <__sflush_r+0x108>)
 8016166:	40ca      	lsrs	r2, r1
 8016168:	07d6      	lsls	r6, r2, #31
 801616a:	d544      	bpl.n	80161f6 <__sflush_r+0xf2>
 801616c:	2200      	movs	r2, #0
 801616e:	6062      	str	r2, [r4, #4]
 8016170:	04d9      	lsls	r1, r3, #19
 8016172:	6922      	ldr	r2, [r4, #16]
 8016174:	6022      	str	r2, [r4, #0]
 8016176:	d504      	bpl.n	8016182 <__sflush_r+0x7e>
 8016178:	1c42      	adds	r2, r0, #1
 801617a:	d101      	bne.n	8016180 <__sflush_r+0x7c>
 801617c:	682b      	ldr	r3, [r5, #0]
 801617e:	b903      	cbnz	r3, 8016182 <__sflush_r+0x7e>
 8016180:	6560      	str	r0, [r4, #84]	; 0x54
 8016182:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016184:	602f      	str	r7, [r5, #0]
 8016186:	2900      	cmp	r1, #0
 8016188:	d0c9      	beq.n	801611e <__sflush_r+0x1a>
 801618a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801618e:	4299      	cmp	r1, r3
 8016190:	d002      	beq.n	8016198 <__sflush_r+0x94>
 8016192:	4628      	mov	r0, r5
 8016194:	f7ff f9be 	bl	8015514 <_free_r>
 8016198:	2000      	movs	r0, #0
 801619a:	6360      	str	r0, [r4, #52]	; 0x34
 801619c:	e7c0      	b.n	8016120 <__sflush_r+0x1c>
 801619e:	2301      	movs	r3, #1
 80161a0:	4628      	mov	r0, r5
 80161a2:	47b0      	blx	r6
 80161a4:	1c41      	adds	r1, r0, #1
 80161a6:	d1c8      	bne.n	801613a <__sflush_r+0x36>
 80161a8:	682b      	ldr	r3, [r5, #0]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d0c5      	beq.n	801613a <__sflush_r+0x36>
 80161ae:	2b1d      	cmp	r3, #29
 80161b0:	d001      	beq.n	80161b6 <__sflush_r+0xb2>
 80161b2:	2b16      	cmp	r3, #22
 80161b4:	d101      	bne.n	80161ba <__sflush_r+0xb6>
 80161b6:	602f      	str	r7, [r5, #0]
 80161b8:	e7b1      	b.n	801611e <__sflush_r+0x1a>
 80161ba:	89a3      	ldrh	r3, [r4, #12]
 80161bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80161c0:	81a3      	strh	r3, [r4, #12]
 80161c2:	e7ad      	b.n	8016120 <__sflush_r+0x1c>
 80161c4:	690f      	ldr	r7, [r1, #16]
 80161c6:	2f00      	cmp	r7, #0
 80161c8:	d0a9      	beq.n	801611e <__sflush_r+0x1a>
 80161ca:	0793      	lsls	r3, r2, #30
 80161cc:	680e      	ldr	r6, [r1, #0]
 80161ce:	bf08      	it	eq
 80161d0:	694b      	ldreq	r3, [r1, #20]
 80161d2:	600f      	str	r7, [r1, #0]
 80161d4:	bf18      	it	ne
 80161d6:	2300      	movne	r3, #0
 80161d8:	eba6 0807 	sub.w	r8, r6, r7
 80161dc:	608b      	str	r3, [r1, #8]
 80161de:	f1b8 0f00 	cmp.w	r8, #0
 80161e2:	dd9c      	ble.n	801611e <__sflush_r+0x1a>
 80161e4:	4643      	mov	r3, r8
 80161e6:	463a      	mov	r2, r7
 80161e8:	6a21      	ldr	r1, [r4, #32]
 80161ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80161ec:	4628      	mov	r0, r5
 80161ee:	47b0      	blx	r6
 80161f0:	2800      	cmp	r0, #0
 80161f2:	dc06      	bgt.n	8016202 <__sflush_r+0xfe>
 80161f4:	89a3      	ldrh	r3, [r4, #12]
 80161f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80161fa:	81a3      	strh	r3, [r4, #12]
 80161fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016200:	e78e      	b.n	8016120 <__sflush_r+0x1c>
 8016202:	4407      	add	r7, r0
 8016204:	eba8 0800 	sub.w	r8, r8, r0
 8016208:	e7e9      	b.n	80161de <__sflush_r+0xda>
 801620a:	bf00      	nop
 801620c:	20400001 	.word	0x20400001

08016210 <_fflush_r>:
 8016210:	b538      	push	{r3, r4, r5, lr}
 8016212:	690b      	ldr	r3, [r1, #16]
 8016214:	4605      	mov	r5, r0
 8016216:	460c      	mov	r4, r1
 8016218:	b1db      	cbz	r3, 8016252 <_fflush_r+0x42>
 801621a:	b118      	cbz	r0, 8016224 <_fflush_r+0x14>
 801621c:	6983      	ldr	r3, [r0, #24]
 801621e:	b90b      	cbnz	r3, 8016224 <_fflush_r+0x14>
 8016220:	f7ff f8e6 	bl	80153f0 <__sinit>
 8016224:	4b0c      	ldr	r3, [pc, #48]	; (8016258 <_fflush_r+0x48>)
 8016226:	429c      	cmp	r4, r3
 8016228:	d109      	bne.n	801623e <_fflush_r+0x2e>
 801622a:	686c      	ldr	r4, [r5, #4]
 801622c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016230:	b17b      	cbz	r3, 8016252 <_fflush_r+0x42>
 8016232:	4621      	mov	r1, r4
 8016234:	4628      	mov	r0, r5
 8016236:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801623a:	f7ff bf63 	b.w	8016104 <__sflush_r>
 801623e:	4b07      	ldr	r3, [pc, #28]	; (801625c <_fflush_r+0x4c>)
 8016240:	429c      	cmp	r4, r3
 8016242:	d101      	bne.n	8016248 <_fflush_r+0x38>
 8016244:	68ac      	ldr	r4, [r5, #8]
 8016246:	e7f1      	b.n	801622c <_fflush_r+0x1c>
 8016248:	4b05      	ldr	r3, [pc, #20]	; (8016260 <_fflush_r+0x50>)
 801624a:	429c      	cmp	r4, r3
 801624c:	bf08      	it	eq
 801624e:	68ec      	ldreq	r4, [r5, #12]
 8016250:	e7ec      	b.n	801622c <_fflush_r+0x1c>
 8016252:	2000      	movs	r0, #0
 8016254:	bd38      	pop	{r3, r4, r5, pc}
 8016256:	bf00      	nop
 8016258:	08029e50 	.word	0x08029e50
 801625c:	08029e70 	.word	0x08029e70
 8016260:	08029e30 	.word	0x08029e30

08016264 <_lseek_r>:
 8016264:	b538      	push	{r3, r4, r5, lr}
 8016266:	4c07      	ldr	r4, [pc, #28]	; (8016284 <_lseek_r+0x20>)
 8016268:	4605      	mov	r5, r0
 801626a:	4608      	mov	r0, r1
 801626c:	4611      	mov	r1, r2
 801626e:	2200      	movs	r2, #0
 8016270:	6022      	str	r2, [r4, #0]
 8016272:	461a      	mov	r2, r3
 8016274:	f7ea fef0 	bl	8001058 <_lseek>
 8016278:	1c43      	adds	r3, r0, #1
 801627a:	d102      	bne.n	8016282 <_lseek_r+0x1e>
 801627c:	6823      	ldr	r3, [r4, #0]
 801627e:	b103      	cbz	r3, 8016282 <_lseek_r+0x1e>
 8016280:	602b      	str	r3, [r5, #0]
 8016282:	bd38      	pop	{r3, r4, r5, pc}
 8016284:	2000b3fc 	.word	0x2000b3fc

08016288 <__swhatbuf_r>:
 8016288:	b570      	push	{r4, r5, r6, lr}
 801628a:	460e      	mov	r6, r1
 801628c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016290:	2900      	cmp	r1, #0
 8016292:	b096      	sub	sp, #88	; 0x58
 8016294:	4614      	mov	r4, r2
 8016296:	461d      	mov	r5, r3
 8016298:	da07      	bge.n	80162aa <__swhatbuf_r+0x22>
 801629a:	2300      	movs	r3, #0
 801629c:	602b      	str	r3, [r5, #0]
 801629e:	89b3      	ldrh	r3, [r6, #12]
 80162a0:	061a      	lsls	r2, r3, #24
 80162a2:	d410      	bmi.n	80162c6 <__swhatbuf_r+0x3e>
 80162a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80162a8:	e00e      	b.n	80162c8 <__swhatbuf_r+0x40>
 80162aa:	466a      	mov	r2, sp
 80162ac:	f000 f88a 	bl	80163c4 <_fstat_r>
 80162b0:	2800      	cmp	r0, #0
 80162b2:	dbf2      	blt.n	801629a <__swhatbuf_r+0x12>
 80162b4:	9a01      	ldr	r2, [sp, #4]
 80162b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80162ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80162be:	425a      	negs	r2, r3
 80162c0:	415a      	adcs	r2, r3
 80162c2:	602a      	str	r2, [r5, #0]
 80162c4:	e7ee      	b.n	80162a4 <__swhatbuf_r+0x1c>
 80162c6:	2340      	movs	r3, #64	; 0x40
 80162c8:	2000      	movs	r0, #0
 80162ca:	6023      	str	r3, [r4, #0]
 80162cc:	b016      	add	sp, #88	; 0x58
 80162ce:	bd70      	pop	{r4, r5, r6, pc}

080162d0 <__smakebuf_r>:
 80162d0:	898b      	ldrh	r3, [r1, #12]
 80162d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80162d4:	079d      	lsls	r5, r3, #30
 80162d6:	4606      	mov	r6, r0
 80162d8:	460c      	mov	r4, r1
 80162da:	d507      	bpl.n	80162ec <__smakebuf_r+0x1c>
 80162dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80162e0:	6023      	str	r3, [r4, #0]
 80162e2:	6123      	str	r3, [r4, #16]
 80162e4:	2301      	movs	r3, #1
 80162e6:	6163      	str	r3, [r4, #20]
 80162e8:	b002      	add	sp, #8
 80162ea:	bd70      	pop	{r4, r5, r6, pc}
 80162ec:	ab01      	add	r3, sp, #4
 80162ee:	466a      	mov	r2, sp
 80162f0:	f7ff ffca 	bl	8016288 <__swhatbuf_r>
 80162f4:	9900      	ldr	r1, [sp, #0]
 80162f6:	4605      	mov	r5, r0
 80162f8:	4630      	mov	r0, r6
 80162fa:	f7ff f959 	bl	80155b0 <_malloc_r>
 80162fe:	b948      	cbnz	r0, 8016314 <__smakebuf_r+0x44>
 8016300:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016304:	059a      	lsls	r2, r3, #22
 8016306:	d4ef      	bmi.n	80162e8 <__smakebuf_r+0x18>
 8016308:	f023 0303 	bic.w	r3, r3, #3
 801630c:	f043 0302 	orr.w	r3, r3, #2
 8016310:	81a3      	strh	r3, [r4, #12]
 8016312:	e7e3      	b.n	80162dc <__smakebuf_r+0xc>
 8016314:	4b0d      	ldr	r3, [pc, #52]	; (801634c <__smakebuf_r+0x7c>)
 8016316:	62b3      	str	r3, [r6, #40]	; 0x28
 8016318:	89a3      	ldrh	r3, [r4, #12]
 801631a:	6020      	str	r0, [r4, #0]
 801631c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016320:	81a3      	strh	r3, [r4, #12]
 8016322:	9b00      	ldr	r3, [sp, #0]
 8016324:	6163      	str	r3, [r4, #20]
 8016326:	9b01      	ldr	r3, [sp, #4]
 8016328:	6120      	str	r0, [r4, #16]
 801632a:	b15b      	cbz	r3, 8016344 <__smakebuf_r+0x74>
 801632c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016330:	4630      	mov	r0, r6
 8016332:	f000 f859 	bl	80163e8 <_isatty_r>
 8016336:	b128      	cbz	r0, 8016344 <__smakebuf_r+0x74>
 8016338:	89a3      	ldrh	r3, [r4, #12]
 801633a:	f023 0303 	bic.w	r3, r3, #3
 801633e:	f043 0301 	orr.w	r3, r3, #1
 8016342:	81a3      	strh	r3, [r4, #12]
 8016344:	89a3      	ldrh	r3, [r4, #12]
 8016346:	431d      	orrs	r5, r3
 8016348:	81a5      	strh	r5, [r4, #12]
 801634a:	e7cd      	b.n	80162e8 <__smakebuf_r+0x18>
 801634c:	080153b9 	.word	0x080153b9

08016350 <__malloc_lock>:
 8016350:	4770      	bx	lr

08016352 <__malloc_unlock>:
 8016352:	4770      	bx	lr

08016354 <_realloc_r>:
 8016354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016356:	4607      	mov	r7, r0
 8016358:	4614      	mov	r4, r2
 801635a:	460e      	mov	r6, r1
 801635c:	b921      	cbnz	r1, 8016368 <_realloc_r+0x14>
 801635e:	4611      	mov	r1, r2
 8016360:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016364:	f7ff b924 	b.w	80155b0 <_malloc_r>
 8016368:	b922      	cbnz	r2, 8016374 <_realloc_r+0x20>
 801636a:	f7ff f8d3 	bl	8015514 <_free_r>
 801636e:	4625      	mov	r5, r4
 8016370:	4628      	mov	r0, r5
 8016372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016374:	f000 f848 	bl	8016408 <_malloc_usable_size_r>
 8016378:	42a0      	cmp	r0, r4
 801637a:	d20f      	bcs.n	801639c <_realloc_r+0x48>
 801637c:	4621      	mov	r1, r4
 801637e:	4638      	mov	r0, r7
 8016380:	f7ff f916 	bl	80155b0 <_malloc_r>
 8016384:	4605      	mov	r5, r0
 8016386:	2800      	cmp	r0, #0
 8016388:	d0f2      	beq.n	8016370 <_realloc_r+0x1c>
 801638a:	4631      	mov	r1, r6
 801638c:	4622      	mov	r2, r4
 801638e:	f7fe ff36 	bl	80151fe <memcpy>
 8016392:	4631      	mov	r1, r6
 8016394:	4638      	mov	r0, r7
 8016396:	f7ff f8bd 	bl	8015514 <_free_r>
 801639a:	e7e9      	b.n	8016370 <_realloc_r+0x1c>
 801639c:	4635      	mov	r5, r6
 801639e:	e7e7      	b.n	8016370 <_realloc_r+0x1c>

080163a0 <_read_r>:
 80163a0:	b538      	push	{r3, r4, r5, lr}
 80163a2:	4c07      	ldr	r4, [pc, #28]	; (80163c0 <_read_r+0x20>)
 80163a4:	4605      	mov	r5, r0
 80163a6:	4608      	mov	r0, r1
 80163a8:	4611      	mov	r1, r2
 80163aa:	2200      	movs	r2, #0
 80163ac:	6022      	str	r2, [r4, #0]
 80163ae:	461a      	mov	r2, r3
 80163b0:	f7ea fdf2 	bl	8000f98 <_read>
 80163b4:	1c43      	adds	r3, r0, #1
 80163b6:	d102      	bne.n	80163be <_read_r+0x1e>
 80163b8:	6823      	ldr	r3, [r4, #0]
 80163ba:	b103      	cbz	r3, 80163be <_read_r+0x1e>
 80163bc:	602b      	str	r3, [r5, #0]
 80163be:	bd38      	pop	{r3, r4, r5, pc}
 80163c0:	2000b3fc 	.word	0x2000b3fc

080163c4 <_fstat_r>:
 80163c4:	b538      	push	{r3, r4, r5, lr}
 80163c6:	4c07      	ldr	r4, [pc, #28]	; (80163e4 <_fstat_r+0x20>)
 80163c8:	2300      	movs	r3, #0
 80163ca:	4605      	mov	r5, r0
 80163cc:	4608      	mov	r0, r1
 80163ce:	4611      	mov	r1, r2
 80163d0:	6023      	str	r3, [r4, #0]
 80163d2:	f7ea fe26 	bl	8001022 <_fstat>
 80163d6:	1c43      	adds	r3, r0, #1
 80163d8:	d102      	bne.n	80163e0 <_fstat_r+0x1c>
 80163da:	6823      	ldr	r3, [r4, #0]
 80163dc:	b103      	cbz	r3, 80163e0 <_fstat_r+0x1c>
 80163de:	602b      	str	r3, [r5, #0]
 80163e0:	bd38      	pop	{r3, r4, r5, pc}
 80163e2:	bf00      	nop
 80163e4:	2000b3fc 	.word	0x2000b3fc

080163e8 <_isatty_r>:
 80163e8:	b538      	push	{r3, r4, r5, lr}
 80163ea:	4c06      	ldr	r4, [pc, #24]	; (8016404 <_isatty_r+0x1c>)
 80163ec:	2300      	movs	r3, #0
 80163ee:	4605      	mov	r5, r0
 80163f0:	4608      	mov	r0, r1
 80163f2:	6023      	str	r3, [r4, #0]
 80163f4:	f7ea fe25 	bl	8001042 <_isatty>
 80163f8:	1c43      	adds	r3, r0, #1
 80163fa:	d102      	bne.n	8016402 <_isatty_r+0x1a>
 80163fc:	6823      	ldr	r3, [r4, #0]
 80163fe:	b103      	cbz	r3, 8016402 <_isatty_r+0x1a>
 8016400:	602b      	str	r3, [r5, #0]
 8016402:	bd38      	pop	{r3, r4, r5, pc}
 8016404:	2000b3fc 	.word	0x2000b3fc

08016408 <_malloc_usable_size_r>:
 8016408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801640c:	1f18      	subs	r0, r3, #4
 801640e:	2b00      	cmp	r3, #0
 8016410:	bfbc      	itt	lt
 8016412:	580b      	ldrlt	r3, [r1, r0]
 8016414:	18c0      	addlt	r0, r0, r3
 8016416:	4770      	bx	lr

08016418 <_init>:
 8016418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801641a:	bf00      	nop
 801641c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801641e:	bc08      	pop	{r3}
 8016420:	469e      	mov	lr, r3
 8016422:	4770      	bx	lr

08016424 <_fini>:
 8016424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016426:	bf00      	nop
 8016428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801642a:	bc08      	pop	{r3}
 801642c:	469e      	mov	lr, r3
 801642e:	4770      	bx	lr
