
Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b8  08010000  08010000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eb58  080101c0  080101c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013d14  0802ed18  0802ed18  0002ed18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08042a2c  08042a2c  00042a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08042a34  08042a34  00042a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08042a38  08042a38  00042a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000040  08042a3c  00050040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00050228  2**0
                  CONTENTS
  8 .bss          00030730  20000228  20000228  00050228  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20030958  20030958  00050228  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00050228  2**0
                  CONTENTS, READONLY
 11 .debug_info   000a32df  00000000  00000000  00050258  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000a4aa  00000000  00000000  000f3537  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002b18  00000000  00000000  000fd9e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002a08  00000000  00000000  001004f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0003d6af  00000000  00000000  00102f01  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0003644d  00000000  00000000  001405b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0012a384  00000000  00000000  001769fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000e9  00000000  00000000  002a0d81  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007cb0  00000000  00000000  002a0e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00020127  00000000  00000000  002a8b1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080101c0 <__do_global_dtors_aux>:
 80101c0:	b510      	push	{r4, lr}
 80101c2:	4c05      	ldr	r4, [pc, #20]	; (80101d8 <__do_global_dtors_aux+0x18>)
 80101c4:	7823      	ldrb	r3, [r4, #0]
 80101c6:	b933      	cbnz	r3, 80101d6 <__do_global_dtors_aux+0x16>
 80101c8:	4b04      	ldr	r3, [pc, #16]	; (80101dc <__do_global_dtors_aux+0x1c>)
 80101ca:	b113      	cbz	r3, 80101d2 <__do_global_dtors_aux+0x12>
 80101cc:	4804      	ldr	r0, [pc, #16]	; (80101e0 <__do_global_dtors_aux+0x20>)
 80101ce:	f3af 8000 	nop.w
 80101d2:	2301      	movs	r3, #1
 80101d4:	7023      	strb	r3, [r4, #0]
 80101d6:	bd10      	pop	{r4, pc}
 80101d8:	20000228 	.word	0x20000228
 80101dc:	00000000 	.word	0x00000000
 80101e0:	0802ed00 	.word	0x0802ed00

080101e4 <frame_dummy>:
 80101e4:	b508      	push	{r3, lr}
 80101e6:	4b03      	ldr	r3, [pc, #12]	; (80101f4 <frame_dummy+0x10>)
 80101e8:	b11b      	cbz	r3, 80101f2 <frame_dummy+0xe>
 80101ea:	4903      	ldr	r1, [pc, #12]	; (80101f8 <frame_dummy+0x14>)
 80101ec:	4803      	ldr	r0, [pc, #12]	; (80101fc <frame_dummy+0x18>)
 80101ee:	f3af 8000 	nop.w
 80101f2:	bd08      	pop	{r3, pc}
 80101f4:	00000000 	.word	0x00000000
 80101f8:	2000022c 	.word	0x2000022c
 80101fc:	0802ed00 	.word	0x0802ed00

08010200 <strlen>:
 8010200:	4603      	mov	r3, r0
 8010202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010206:	2a00      	cmp	r2, #0
 8010208:	d1fb      	bne.n	8010202 <strlen+0x2>
 801020a:	1a18      	subs	r0, r3, r0
 801020c:	3801      	subs	r0, #1
 801020e:	4770      	bx	lr

08010210 <__aeabi_drsub>:
 8010210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8010214:	e002      	b.n	801021c <__adddf3>
 8010216:	bf00      	nop

08010218 <__aeabi_dsub>:
 8010218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801021c <__adddf3>:
 801021c:	b530      	push	{r4, r5, lr}
 801021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8010222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8010226:	ea94 0f05 	teq	r4, r5
 801022a:	bf08      	it	eq
 801022c:	ea90 0f02 	teqeq	r0, r2
 8010230:	bf1f      	itttt	ne
 8010232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8010236:	ea55 0c02 	orrsne.w	ip, r5, r2
 801023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010242:	f000 80e2 	beq.w	801040a <__adddf3+0x1ee>
 8010246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 801024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 801024e:	bfb8      	it	lt
 8010250:	426d      	neglt	r5, r5
 8010252:	dd0c      	ble.n	801026e <__adddf3+0x52>
 8010254:	442c      	add	r4, r5
 8010256:	ea80 0202 	eor.w	r2, r0, r2
 801025a:	ea81 0303 	eor.w	r3, r1, r3
 801025e:	ea82 0000 	eor.w	r0, r2, r0
 8010262:	ea83 0101 	eor.w	r1, r3, r1
 8010266:	ea80 0202 	eor.w	r2, r0, r2
 801026a:	ea81 0303 	eor.w	r3, r1, r3
 801026e:	2d36      	cmp	r5, #54	; 0x36
 8010270:	bf88      	it	hi
 8010272:	bd30      	pophi	{r4, r5, pc}
 8010274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010284:	d002      	beq.n	801028c <__adddf3+0x70>
 8010286:	4240      	negs	r0, r0
 8010288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 801028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010298:	d002      	beq.n	80102a0 <__adddf3+0x84>
 801029a:	4252      	negs	r2, r2
 801029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80102a0:	ea94 0f05 	teq	r4, r5
 80102a4:	f000 80a7 	beq.w	80103f6 <__adddf3+0x1da>
 80102a8:	f1a4 0401 	sub.w	r4, r4, #1
 80102ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80102b0:	db0d      	blt.n	80102ce <__adddf3+0xb2>
 80102b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80102b6:	fa22 f205 	lsr.w	r2, r2, r5
 80102ba:	1880      	adds	r0, r0, r2
 80102bc:	f141 0100 	adc.w	r1, r1, #0
 80102c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80102c4:	1880      	adds	r0, r0, r2
 80102c6:	fa43 f305 	asr.w	r3, r3, r5
 80102ca:	4159      	adcs	r1, r3
 80102cc:	e00e      	b.n	80102ec <__adddf3+0xd0>
 80102ce:	f1a5 0520 	sub.w	r5, r5, #32
 80102d2:	f10e 0e20 	add.w	lr, lr, #32
 80102d6:	2a01      	cmp	r2, #1
 80102d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80102dc:	bf28      	it	cs
 80102de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80102e2:	fa43 f305 	asr.w	r3, r3, r5
 80102e6:	18c0      	adds	r0, r0, r3
 80102e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80102ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80102f0:	d507      	bpl.n	8010302 <__adddf3+0xe6>
 80102f2:	f04f 0e00 	mov.w	lr, #0
 80102f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80102fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80102fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8010302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010306:	d31b      	bcc.n	8010340 <__adddf3+0x124>
 8010308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801030c:	d30c      	bcc.n	8010328 <__adddf3+0x10c>
 801030e:	0849      	lsrs	r1, r1, #1
 8010310:	ea5f 0030 	movs.w	r0, r0, rrx
 8010314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8010318:	f104 0401 	add.w	r4, r4, #1
 801031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8010320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8010324:	f080 809a 	bcs.w	801045c <__adddf3+0x240>
 8010328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801032c:	bf08      	it	eq
 801032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010332:	f150 0000 	adcs.w	r0, r0, #0
 8010336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801033a:	ea41 0105 	orr.w	r1, r1, r5
 801033e:	bd30      	pop	{r4, r5, pc}
 8010340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8010344:	4140      	adcs	r0, r0
 8010346:	eb41 0101 	adc.w	r1, r1, r1
 801034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 801034e:	f1a4 0401 	sub.w	r4, r4, #1
 8010352:	d1e9      	bne.n	8010328 <__adddf3+0x10c>
 8010354:	f091 0f00 	teq	r1, #0
 8010358:	bf04      	itt	eq
 801035a:	4601      	moveq	r1, r0
 801035c:	2000      	moveq	r0, #0
 801035e:	fab1 f381 	clz	r3, r1
 8010362:	bf08      	it	eq
 8010364:	3320      	addeq	r3, #32
 8010366:	f1a3 030b 	sub.w	r3, r3, #11
 801036a:	f1b3 0220 	subs.w	r2, r3, #32
 801036e:	da0c      	bge.n	801038a <__adddf3+0x16e>
 8010370:	320c      	adds	r2, #12
 8010372:	dd08      	ble.n	8010386 <__adddf3+0x16a>
 8010374:	f102 0c14 	add.w	ip, r2, #20
 8010378:	f1c2 020c 	rsb	r2, r2, #12
 801037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8010380:	fa21 f102 	lsr.w	r1, r1, r2
 8010384:	e00c      	b.n	80103a0 <__adddf3+0x184>
 8010386:	f102 0214 	add.w	r2, r2, #20
 801038a:	bfd8      	it	le
 801038c:	f1c2 0c20 	rsble	ip, r2, #32
 8010390:	fa01 f102 	lsl.w	r1, r1, r2
 8010394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010398:	bfdc      	itt	le
 801039a:	ea41 010c 	orrle.w	r1, r1, ip
 801039e:	4090      	lslle	r0, r2
 80103a0:	1ae4      	subs	r4, r4, r3
 80103a2:	bfa2      	ittt	ge
 80103a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80103a8:	4329      	orrge	r1, r5
 80103aa:	bd30      	popge	{r4, r5, pc}
 80103ac:	ea6f 0404 	mvn.w	r4, r4
 80103b0:	3c1f      	subs	r4, #31
 80103b2:	da1c      	bge.n	80103ee <__adddf3+0x1d2>
 80103b4:	340c      	adds	r4, #12
 80103b6:	dc0e      	bgt.n	80103d6 <__adddf3+0x1ba>
 80103b8:	f104 0414 	add.w	r4, r4, #20
 80103bc:	f1c4 0220 	rsb	r2, r4, #32
 80103c0:	fa20 f004 	lsr.w	r0, r0, r4
 80103c4:	fa01 f302 	lsl.w	r3, r1, r2
 80103c8:	ea40 0003 	orr.w	r0, r0, r3
 80103cc:	fa21 f304 	lsr.w	r3, r1, r4
 80103d0:	ea45 0103 	orr.w	r1, r5, r3
 80103d4:	bd30      	pop	{r4, r5, pc}
 80103d6:	f1c4 040c 	rsb	r4, r4, #12
 80103da:	f1c4 0220 	rsb	r2, r4, #32
 80103de:	fa20 f002 	lsr.w	r0, r0, r2
 80103e2:	fa01 f304 	lsl.w	r3, r1, r4
 80103e6:	ea40 0003 	orr.w	r0, r0, r3
 80103ea:	4629      	mov	r1, r5
 80103ec:	bd30      	pop	{r4, r5, pc}
 80103ee:	fa21 f004 	lsr.w	r0, r1, r4
 80103f2:	4629      	mov	r1, r5
 80103f4:	bd30      	pop	{r4, r5, pc}
 80103f6:	f094 0f00 	teq	r4, #0
 80103fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80103fe:	bf06      	itte	eq
 8010400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8010404:	3401      	addeq	r4, #1
 8010406:	3d01      	subne	r5, #1
 8010408:	e74e      	b.n	80102a8 <__adddf3+0x8c>
 801040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801040e:	bf18      	it	ne
 8010410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010414:	d029      	beq.n	801046a <__adddf3+0x24e>
 8010416:	ea94 0f05 	teq	r4, r5
 801041a:	bf08      	it	eq
 801041c:	ea90 0f02 	teqeq	r0, r2
 8010420:	d005      	beq.n	801042e <__adddf3+0x212>
 8010422:	ea54 0c00 	orrs.w	ip, r4, r0
 8010426:	bf04      	itt	eq
 8010428:	4619      	moveq	r1, r3
 801042a:	4610      	moveq	r0, r2
 801042c:	bd30      	pop	{r4, r5, pc}
 801042e:	ea91 0f03 	teq	r1, r3
 8010432:	bf1e      	ittt	ne
 8010434:	2100      	movne	r1, #0
 8010436:	2000      	movne	r0, #0
 8010438:	bd30      	popne	{r4, r5, pc}
 801043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 801043e:	d105      	bne.n	801044c <__adddf3+0x230>
 8010440:	0040      	lsls	r0, r0, #1
 8010442:	4149      	adcs	r1, r1
 8010444:	bf28      	it	cs
 8010446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 801044a:	bd30      	pop	{r4, r5, pc}
 801044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8010450:	bf3c      	itt	cc
 8010452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8010456:	bd30      	popcc	{r4, r5, pc}
 8010458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 801045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010464:	f04f 0000 	mov.w	r0, #0
 8010468:	bd30      	pop	{r4, r5, pc}
 801046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801046e:	bf1a      	itte	ne
 8010470:	4619      	movne	r1, r3
 8010472:	4610      	movne	r0, r2
 8010474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010478:	bf1c      	itt	ne
 801047a:	460b      	movne	r3, r1
 801047c:	4602      	movne	r2, r0
 801047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010482:	bf06      	itte	eq
 8010484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010488:	ea91 0f03 	teqeq	r1, r3
 801048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010490:	bd30      	pop	{r4, r5, pc}
 8010492:	bf00      	nop

08010494 <__aeabi_ui2d>:
 8010494:	f090 0f00 	teq	r0, #0
 8010498:	bf04      	itt	eq
 801049a:	2100      	moveq	r1, #0
 801049c:	4770      	bxeq	lr
 801049e:	b530      	push	{r4, r5, lr}
 80104a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80104a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80104a8:	f04f 0500 	mov.w	r5, #0
 80104ac:	f04f 0100 	mov.w	r1, #0
 80104b0:	e750      	b.n	8010354 <__adddf3+0x138>
 80104b2:	bf00      	nop

080104b4 <__aeabi_i2d>:
 80104b4:	f090 0f00 	teq	r0, #0
 80104b8:	bf04      	itt	eq
 80104ba:	2100      	moveq	r1, #0
 80104bc:	4770      	bxeq	lr
 80104be:	b530      	push	{r4, r5, lr}
 80104c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80104c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80104c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80104cc:	bf48      	it	mi
 80104ce:	4240      	negmi	r0, r0
 80104d0:	f04f 0100 	mov.w	r1, #0
 80104d4:	e73e      	b.n	8010354 <__adddf3+0x138>
 80104d6:	bf00      	nop

080104d8 <__aeabi_f2d>:
 80104d8:	0042      	lsls	r2, r0, #1
 80104da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80104de:	ea4f 0131 	mov.w	r1, r1, rrx
 80104e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80104e6:	bf1f      	itttt	ne
 80104e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80104ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80104f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80104f4:	4770      	bxne	lr
 80104f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80104fa:	bf08      	it	eq
 80104fc:	4770      	bxeq	lr
 80104fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8010502:	bf04      	itt	eq
 8010504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8010508:	4770      	bxeq	lr
 801050a:	b530      	push	{r4, r5, lr}
 801050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8010510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010518:	e71c      	b.n	8010354 <__adddf3+0x138>
 801051a:	bf00      	nop

0801051c <__aeabi_ul2d>:
 801051c:	ea50 0201 	orrs.w	r2, r0, r1
 8010520:	bf08      	it	eq
 8010522:	4770      	bxeq	lr
 8010524:	b530      	push	{r4, r5, lr}
 8010526:	f04f 0500 	mov.w	r5, #0
 801052a:	e00a      	b.n	8010542 <__aeabi_l2d+0x16>

0801052c <__aeabi_l2d>:
 801052c:	ea50 0201 	orrs.w	r2, r0, r1
 8010530:	bf08      	it	eq
 8010532:	4770      	bxeq	lr
 8010534:	b530      	push	{r4, r5, lr}
 8010536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 801053a:	d502      	bpl.n	8010542 <__aeabi_l2d+0x16>
 801053c:	4240      	negs	r0, r0
 801053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 801054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 801054e:	f43f aed8 	beq.w	8010302 <__adddf3+0xe6>
 8010552:	f04f 0203 	mov.w	r2, #3
 8010556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 801055a:	bf18      	it	ne
 801055c:	3203      	addne	r2, #3
 801055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010562:	bf18      	it	ne
 8010564:	3203      	addne	r2, #3
 8010566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 801056a:	f1c2 0320 	rsb	r3, r2, #32
 801056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010572:	fa20 f002 	lsr.w	r0, r0, r2
 8010576:	fa01 fe03 	lsl.w	lr, r1, r3
 801057a:	ea40 000e 	orr.w	r0, r0, lr
 801057e:	fa21 f102 	lsr.w	r1, r1, r2
 8010582:	4414      	add	r4, r2
 8010584:	e6bd      	b.n	8010302 <__adddf3+0xe6>
 8010586:	bf00      	nop

08010588 <__aeabi_dmul>:
 8010588:	b570      	push	{r4, r5, r6, lr}
 801058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 801058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010596:	bf1d      	ittte	ne
 8010598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 801059c:	ea94 0f0c 	teqne	r4, ip
 80105a0:	ea95 0f0c 	teqne	r5, ip
 80105a4:	f000 f8de 	bleq	8010764 <__aeabi_dmul+0x1dc>
 80105a8:	442c      	add	r4, r5
 80105aa:	ea81 0603 	eor.w	r6, r1, r3
 80105ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80105b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80105b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80105ba:	bf18      	it	ne
 80105bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80105c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80105c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80105c8:	d038      	beq.n	801063c <__aeabi_dmul+0xb4>
 80105ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80105ce:	f04f 0500 	mov.w	r5, #0
 80105d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80105d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80105da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80105de:	f04f 0600 	mov.w	r6, #0
 80105e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80105e6:	f09c 0f00 	teq	ip, #0
 80105ea:	bf18      	it	ne
 80105ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80105f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80105f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80105f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80105fc:	d204      	bcs.n	8010608 <__aeabi_dmul+0x80>
 80105fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8010602:	416d      	adcs	r5, r5
 8010604:	eb46 0606 	adc.w	r6, r6, r6
 8010608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8010610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8010614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8010618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010620:	bf88      	it	hi
 8010622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8010626:	d81e      	bhi.n	8010666 <__aeabi_dmul+0xde>
 8010628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 801062c:	bf08      	it	eq
 801062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8010632:	f150 0000 	adcs.w	r0, r0, #0
 8010636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801063a:	bd70      	pop	{r4, r5, r6, pc}
 801063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8010640:	ea46 0101 	orr.w	r1, r6, r1
 8010644:	ea40 0002 	orr.w	r0, r0, r2
 8010648:	ea81 0103 	eor.w	r1, r1, r3
 801064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8010650:	bfc2      	ittt	gt
 8010652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8010656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 801065a:	bd70      	popgt	{r4, r5, r6, pc}
 801065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010660:	f04f 0e00 	mov.w	lr, #0
 8010664:	3c01      	subs	r4, #1
 8010666:	f300 80ab 	bgt.w	80107c0 <__aeabi_dmul+0x238>
 801066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 801066e:	bfde      	ittt	le
 8010670:	2000      	movle	r0, #0
 8010672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8010676:	bd70      	pople	{r4, r5, r6, pc}
 8010678:	f1c4 0400 	rsb	r4, r4, #0
 801067c:	3c20      	subs	r4, #32
 801067e:	da35      	bge.n	80106ec <__aeabi_dmul+0x164>
 8010680:	340c      	adds	r4, #12
 8010682:	dc1b      	bgt.n	80106bc <__aeabi_dmul+0x134>
 8010684:	f104 0414 	add.w	r4, r4, #20
 8010688:	f1c4 0520 	rsb	r5, r4, #32
 801068c:	fa00 f305 	lsl.w	r3, r0, r5
 8010690:	fa20 f004 	lsr.w	r0, r0, r4
 8010694:	fa01 f205 	lsl.w	r2, r1, r5
 8010698:	ea40 0002 	orr.w	r0, r0, r2
 801069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80106a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80106a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80106a8:	fa21 f604 	lsr.w	r6, r1, r4
 80106ac:	eb42 0106 	adc.w	r1, r2, r6
 80106b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80106b4:	bf08      	it	eq
 80106b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80106ba:	bd70      	pop	{r4, r5, r6, pc}
 80106bc:	f1c4 040c 	rsb	r4, r4, #12
 80106c0:	f1c4 0520 	rsb	r5, r4, #32
 80106c4:	fa00 f304 	lsl.w	r3, r0, r4
 80106c8:	fa20 f005 	lsr.w	r0, r0, r5
 80106cc:	fa01 f204 	lsl.w	r2, r1, r4
 80106d0:	ea40 0002 	orr.w	r0, r0, r2
 80106d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80106d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80106dc:	f141 0100 	adc.w	r1, r1, #0
 80106e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80106e4:	bf08      	it	eq
 80106e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80106ea:	bd70      	pop	{r4, r5, r6, pc}
 80106ec:	f1c4 0520 	rsb	r5, r4, #32
 80106f0:	fa00 f205 	lsl.w	r2, r0, r5
 80106f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80106f8:	fa20 f304 	lsr.w	r3, r0, r4
 80106fc:	fa01 f205 	lsl.w	r2, r1, r5
 8010700:	ea43 0302 	orr.w	r3, r3, r2
 8010704:	fa21 f004 	lsr.w	r0, r1, r4
 8010708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801070c:	fa21 f204 	lsr.w	r2, r1, r4
 8010710:	ea20 0002 	bic.w	r0, r0, r2
 8010714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8010718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801071c:	bf08      	it	eq
 801071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010722:	bd70      	pop	{r4, r5, r6, pc}
 8010724:	f094 0f00 	teq	r4, #0
 8010728:	d10f      	bne.n	801074a <__aeabi_dmul+0x1c2>
 801072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801072e:	0040      	lsls	r0, r0, #1
 8010730:	eb41 0101 	adc.w	r1, r1, r1
 8010734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010738:	bf08      	it	eq
 801073a:	3c01      	subeq	r4, #1
 801073c:	d0f7      	beq.n	801072e <__aeabi_dmul+0x1a6>
 801073e:	ea41 0106 	orr.w	r1, r1, r6
 8010742:	f095 0f00 	teq	r5, #0
 8010746:	bf18      	it	ne
 8010748:	4770      	bxne	lr
 801074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 801074e:	0052      	lsls	r2, r2, #1
 8010750:	eb43 0303 	adc.w	r3, r3, r3
 8010754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8010758:	bf08      	it	eq
 801075a:	3d01      	subeq	r5, #1
 801075c:	d0f7      	beq.n	801074e <__aeabi_dmul+0x1c6>
 801075e:	ea43 0306 	orr.w	r3, r3, r6
 8010762:	4770      	bx	lr
 8010764:	ea94 0f0c 	teq	r4, ip
 8010768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801076c:	bf18      	it	ne
 801076e:	ea95 0f0c 	teqne	r5, ip
 8010772:	d00c      	beq.n	801078e <__aeabi_dmul+0x206>
 8010774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010778:	bf18      	it	ne
 801077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801077e:	d1d1      	bne.n	8010724 <__aeabi_dmul+0x19c>
 8010780:	ea81 0103 	eor.w	r1, r1, r3
 8010784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010788:	f04f 0000 	mov.w	r0, #0
 801078c:	bd70      	pop	{r4, r5, r6, pc}
 801078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010792:	bf06      	itte	eq
 8010794:	4610      	moveq	r0, r2
 8010796:	4619      	moveq	r1, r3
 8010798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 801079c:	d019      	beq.n	80107d2 <__aeabi_dmul+0x24a>
 801079e:	ea94 0f0c 	teq	r4, ip
 80107a2:	d102      	bne.n	80107aa <__aeabi_dmul+0x222>
 80107a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80107a8:	d113      	bne.n	80107d2 <__aeabi_dmul+0x24a>
 80107aa:	ea95 0f0c 	teq	r5, ip
 80107ae:	d105      	bne.n	80107bc <__aeabi_dmul+0x234>
 80107b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80107b4:	bf1c      	itt	ne
 80107b6:	4610      	movne	r0, r2
 80107b8:	4619      	movne	r1, r3
 80107ba:	d10a      	bne.n	80107d2 <__aeabi_dmul+0x24a>
 80107bc:	ea81 0103 	eor.w	r1, r1, r3
 80107c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80107c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80107c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80107cc:	f04f 0000 	mov.w	r0, #0
 80107d0:	bd70      	pop	{r4, r5, r6, pc}
 80107d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80107d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80107da:	bd70      	pop	{r4, r5, r6, pc}

080107dc <__aeabi_ddiv>:
 80107dc:	b570      	push	{r4, r5, r6, lr}
 80107de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80107e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80107e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80107ea:	bf1d      	ittte	ne
 80107ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80107f0:	ea94 0f0c 	teqne	r4, ip
 80107f4:	ea95 0f0c 	teqne	r5, ip
 80107f8:	f000 f8a7 	bleq	801094a <__aeabi_ddiv+0x16e>
 80107fc:	eba4 0405 	sub.w	r4, r4, r5
 8010800:	ea81 0e03 	eor.w	lr, r1, r3
 8010804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801080c:	f000 8088 	beq.w	8010920 <__aeabi_ddiv+0x144>
 8010810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8010818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8010820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8010824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8010828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8010830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8010834:	429d      	cmp	r5, r3
 8010836:	bf08      	it	eq
 8010838:	4296      	cmpeq	r6, r2
 801083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 801083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8010842:	d202      	bcs.n	801084a <__aeabi_ddiv+0x6e>
 8010844:	085b      	lsrs	r3, r3, #1
 8010846:	ea4f 0232 	mov.w	r2, r2, rrx
 801084a:	1ab6      	subs	r6, r6, r2
 801084c:	eb65 0503 	sbc.w	r5, r5, r3
 8010850:	085b      	lsrs	r3, r3, #1
 8010852:	ea4f 0232 	mov.w	r2, r2, rrx
 8010856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 801085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010866:	bf22      	ittt	cs
 8010868:	1ab6      	subcs	r6, r6, r2
 801086a:	4675      	movcs	r5, lr
 801086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8010870:	085b      	lsrs	r3, r3, #1
 8010872:	ea4f 0232 	mov.w	r2, r2, rrx
 8010876:	ebb6 0e02 	subs.w	lr, r6, r2
 801087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801087e:	bf22      	ittt	cs
 8010880:	1ab6      	subcs	r6, r6, r2
 8010882:	4675      	movcs	r5, lr
 8010884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010888:	085b      	lsrs	r3, r3, #1
 801088a:	ea4f 0232 	mov.w	r2, r2, rrx
 801088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8010892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010896:	bf22      	ittt	cs
 8010898:	1ab6      	subcs	r6, r6, r2
 801089a:	4675      	movcs	r5, lr
 801089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80108a0:	085b      	lsrs	r3, r3, #1
 80108a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80108a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80108aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80108ae:	bf22      	ittt	cs
 80108b0:	1ab6      	subcs	r6, r6, r2
 80108b2:	4675      	movcs	r5, lr
 80108b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80108b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80108bc:	d018      	beq.n	80108f0 <__aeabi_ddiv+0x114>
 80108be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80108c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80108c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80108ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80108ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80108d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80108d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80108da:	d1c0      	bne.n	801085e <__aeabi_ddiv+0x82>
 80108dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80108e0:	d10b      	bne.n	80108fa <__aeabi_ddiv+0x11e>
 80108e2:	ea41 0100 	orr.w	r1, r1, r0
 80108e6:	f04f 0000 	mov.w	r0, #0
 80108ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80108ee:	e7b6      	b.n	801085e <__aeabi_ddiv+0x82>
 80108f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80108f4:	bf04      	itt	eq
 80108f6:	4301      	orreq	r1, r0
 80108f8:	2000      	moveq	r0, #0
 80108fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80108fe:	bf88      	it	hi
 8010900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8010904:	f63f aeaf 	bhi.w	8010666 <__aeabi_dmul+0xde>
 8010908:	ebb5 0c03 	subs.w	ip, r5, r3
 801090c:	bf04      	itt	eq
 801090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8010912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010916:	f150 0000 	adcs.w	r0, r0, #0
 801091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801091e:	bd70      	pop	{r4, r5, r6, pc}
 8010920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8010924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8010928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801092c:	bfc2      	ittt	gt
 801092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8010932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8010936:	bd70      	popgt	{r4, r5, r6, pc}
 8010938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801093c:	f04f 0e00 	mov.w	lr, #0
 8010940:	3c01      	subs	r4, #1
 8010942:	e690      	b.n	8010666 <__aeabi_dmul+0xde>
 8010944:	ea45 0e06 	orr.w	lr, r5, r6
 8010948:	e68d      	b.n	8010666 <__aeabi_dmul+0xde>
 801094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801094e:	ea94 0f0c 	teq	r4, ip
 8010952:	bf08      	it	eq
 8010954:	ea95 0f0c 	teqeq	r5, ip
 8010958:	f43f af3b 	beq.w	80107d2 <__aeabi_dmul+0x24a>
 801095c:	ea94 0f0c 	teq	r4, ip
 8010960:	d10a      	bne.n	8010978 <__aeabi_ddiv+0x19c>
 8010962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010966:	f47f af34 	bne.w	80107d2 <__aeabi_dmul+0x24a>
 801096a:	ea95 0f0c 	teq	r5, ip
 801096e:	f47f af25 	bne.w	80107bc <__aeabi_dmul+0x234>
 8010972:	4610      	mov	r0, r2
 8010974:	4619      	mov	r1, r3
 8010976:	e72c      	b.n	80107d2 <__aeabi_dmul+0x24a>
 8010978:	ea95 0f0c 	teq	r5, ip
 801097c:	d106      	bne.n	801098c <__aeabi_ddiv+0x1b0>
 801097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010982:	f43f aefd 	beq.w	8010780 <__aeabi_dmul+0x1f8>
 8010986:	4610      	mov	r0, r2
 8010988:	4619      	mov	r1, r3
 801098a:	e722      	b.n	80107d2 <__aeabi_dmul+0x24a>
 801098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010990:	bf18      	it	ne
 8010992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010996:	f47f aec5 	bne.w	8010724 <__aeabi_dmul+0x19c>
 801099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801099e:	f47f af0d 	bne.w	80107bc <__aeabi_dmul+0x234>
 80109a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80109a6:	f47f aeeb 	bne.w	8010780 <__aeabi_dmul+0x1f8>
 80109aa:	e712      	b.n	80107d2 <__aeabi_dmul+0x24a>

080109ac <__gedf2>:
 80109ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80109b0:	e006      	b.n	80109c0 <__cmpdf2+0x4>
 80109b2:	bf00      	nop

080109b4 <__ledf2>:
 80109b4:	f04f 0c01 	mov.w	ip, #1
 80109b8:	e002      	b.n	80109c0 <__cmpdf2+0x4>
 80109ba:	bf00      	nop

080109bc <__cmpdf2>:
 80109bc:	f04f 0c01 	mov.w	ip, #1
 80109c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80109c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80109c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80109cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80109d0:	bf18      	it	ne
 80109d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80109d6:	d01b      	beq.n	8010a10 <__cmpdf2+0x54>
 80109d8:	b001      	add	sp, #4
 80109da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80109de:	bf0c      	ite	eq
 80109e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80109e4:	ea91 0f03 	teqne	r1, r3
 80109e8:	bf02      	ittt	eq
 80109ea:	ea90 0f02 	teqeq	r0, r2
 80109ee:	2000      	moveq	r0, #0
 80109f0:	4770      	bxeq	lr
 80109f2:	f110 0f00 	cmn.w	r0, #0
 80109f6:	ea91 0f03 	teq	r1, r3
 80109fa:	bf58      	it	pl
 80109fc:	4299      	cmppl	r1, r3
 80109fe:	bf08      	it	eq
 8010a00:	4290      	cmpeq	r0, r2
 8010a02:	bf2c      	ite	cs
 8010a04:	17d8      	asrcs	r0, r3, #31
 8010a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010a0a:	f040 0001 	orr.w	r0, r0, #1
 8010a0e:	4770      	bx	lr
 8010a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a18:	d102      	bne.n	8010a20 <__cmpdf2+0x64>
 8010a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010a1e:	d107      	bne.n	8010a30 <__cmpdf2+0x74>
 8010a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010a28:	d1d6      	bne.n	80109d8 <__cmpdf2+0x1c>
 8010a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010a2e:	d0d3      	beq.n	80109d8 <__cmpdf2+0x1c>
 8010a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010a34:	4770      	bx	lr
 8010a36:	bf00      	nop

08010a38 <__aeabi_cdrcmple>:
 8010a38:	4684      	mov	ip, r0
 8010a3a:	4610      	mov	r0, r2
 8010a3c:	4662      	mov	r2, ip
 8010a3e:	468c      	mov	ip, r1
 8010a40:	4619      	mov	r1, r3
 8010a42:	4663      	mov	r3, ip
 8010a44:	e000      	b.n	8010a48 <__aeabi_cdcmpeq>
 8010a46:	bf00      	nop

08010a48 <__aeabi_cdcmpeq>:
 8010a48:	b501      	push	{r0, lr}
 8010a4a:	f7ff ffb7 	bl	80109bc <__cmpdf2>
 8010a4e:	2800      	cmp	r0, #0
 8010a50:	bf48      	it	mi
 8010a52:	f110 0f00 	cmnmi.w	r0, #0
 8010a56:	bd01      	pop	{r0, pc}

08010a58 <__aeabi_dcmpeq>:
 8010a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010a5c:	f7ff fff4 	bl	8010a48 <__aeabi_cdcmpeq>
 8010a60:	bf0c      	ite	eq
 8010a62:	2001      	moveq	r0, #1
 8010a64:	2000      	movne	r0, #0
 8010a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8010a6a:	bf00      	nop

08010a6c <__aeabi_dcmplt>:
 8010a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010a70:	f7ff ffea 	bl	8010a48 <__aeabi_cdcmpeq>
 8010a74:	bf34      	ite	cc
 8010a76:	2001      	movcc	r0, #1
 8010a78:	2000      	movcs	r0, #0
 8010a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8010a7e:	bf00      	nop

08010a80 <__aeabi_dcmple>:
 8010a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010a84:	f7ff ffe0 	bl	8010a48 <__aeabi_cdcmpeq>
 8010a88:	bf94      	ite	ls
 8010a8a:	2001      	movls	r0, #1
 8010a8c:	2000      	movhi	r0, #0
 8010a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8010a92:	bf00      	nop

08010a94 <__aeabi_dcmpge>:
 8010a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010a98:	f7ff ffce 	bl	8010a38 <__aeabi_cdrcmple>
 8010a9c:	bf94      	ite	ls
 8010a9e:	2001      	movls	r0, #1
 8010aa0:	2000      	movhi	r0, #0
 8010aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8010aa6:	bf00      	nop

08010aa8 <__aeabi_dcmpgt>:
 8010aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010aac:	f7ff ffc4 	bl	8010a38 <__aeabi_cdrcmple>
 8010ab0:	bf34      	ite	cc
 8010ab2:	2001      	movcc	r0, #1
 8010ab4:	2000      	movcs	r0, #0
 8010ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8010aba:	bf00      	nop

08010abc <__aeabi_d2f>:
 8010abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8010ac4:	bf24      	itt	cs
 8010ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8010aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8010ace:	d90d      	bls.n	8010aec <__aeabi_d2f+0x30>
 8010ad0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8010ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010adc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8010ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010ae4:	bf08      	it	eq
 8010ae6:	f020 0001 	biceq.w	r0, r0, #1
 8010aea:	4770      	bx	lr
 8010aec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8010af0:	d121      	bne.n	8010b36 <__aeabi_d2f+0x7a>
 8010af2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8010af6:	bfbc      	itt	lt
 8010af8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8010afc:	4770      	bxlt	lr
 8010afe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8010b06:	f1c2 0218 	rsb	r2, r2, #24
 8010b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8010b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8010b12:	fa20 f002 	lsr.w	r0, r0, r2
 8010b16:	bf18      	it	ne
 8010b18:	f040 0001 	orrne.w	r0, r0, #1
 8010b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8010b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8010b28:	ea40 000c 	orr.w	r0, r0, ip
 8010b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8010b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010b34:	e7cc      	b.n	8010ad0 <__aeabi_d2f+0x14>
 8010b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8010b3a:	d107      	bne.n	8010b4c <__aeabi_d2f+0x90>
 8010b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8010b40:	bf1e      	ittt	ne
 8010b42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8010b46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8010b4a:	4770      	bxne	lr
 8010b4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8010b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8010b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010b58:	4770      	bx	lr
 8010b5a:	bf00      	nop

08010b5c <__aeabi_uldivmod>:
 8010b5c:	b953      	cbnz	r3, 8010b74 <__aeabi_uldivmod+0x18>
 8010b5e:	b94a      	cbnz	r2, 8010b74 <__aeabi_uldivmod+0x18>
 8010b60:	2900      	cmp	r1, #0
 8010b62:	bf08      	it	eq
 8010b64:	2800      	cmpeq	r0, #0
 8010b66:	bf1c      	itt	ne
 8010b68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8010b6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8010b70:	f000 b972 	b.w	8010e58 <__aeabi_idiv0>
 8010b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8010b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8010b7c:	f000 f806 	bl	8010b8c <__udivmoddi4>
 8010b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010b88:	b004      	add	sp, #16
 8010b8a:	4770      	bx	lr

08010b8c <__udivmoddi4>:
 8010b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b90:	9e08      	ldr	r6, [sp, #32]
 8010b92:	4604      	mov	r4, r0
 8010b94:	4688      	mov	r8, r1
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d14b      	bne.n	8010c32 <__udivmoddi4+0xa6>
 8010b9a:	428a      	cmp	r2, r1
 8010b9c:	4615      	mov	r5, r2
 8010b9e:	d967      	bls.n	8010c70 <__udivmoddi4+0xe4>
 8010ba0:	fab2 f282 	clz	r2, r2
 8010ba4:	b14a      	cbz	r2, 8010bba <__udivmoddi4+0x2e>
 8010ba6:	f1c2 0720 	rsb	r7, r2, #32
 8010baa:	fa01 f302 	lsl.w	r3, r1, r2
 8010bae:	fa20 f707 	lsr.w	r7, r0, r7
 8010bb2:	4095      	lsls	r5, r2
 8010bb4:	ea47 0803 	orr.w	r8, r7, r3
 8010bb8:	4094      	lsls	r4, r2
 8010bba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8010bbe:	0c23      	lsrs	r3, r4, #16
 8010bc0:	fbb8 f7fe 	udiv	r7, r8, lr
 8010bc4:	fa1f fc85 	uxth.w	ip, r5
 8010bc8:	fb0e 8817 	mls	r8, lr, r7, r8
 8010bcc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8010bd0:	fb07 f10c 	mul.w	r1, r7, ip
 8010bd4:	4299      	cmp	r1, r3
 8010bd6:	d909      	bls.n	8010bec <__udivmoddi4+0x60>
 8010bd8:	18eb      	adds	r3, r5, r3
 8010bda:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8010bde:	f080 811b 	bcs.w	8010e18 <__udivmoddi4+0x28c>
 8010be2:	4299      	cmp	r1, r3
 8010be4:	f240 8118 	bls.w	8010e18 <__udivmoddi4+0x28c>
 8010be8:	3f02      	subs	r7, #2
 8010bea:	442b      	add	r3, r5
 8010bec:	1a5b      	subs	r3, r3, r1
 8010bee:	b2a4      	uxth	r4, r4
 8010bf0:	fbb3 f0fe 	udiv	r0, r3, lr
 8010bf4:	fb0e 3310 	mls	r3, lr, r0, r3
 8010bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8010bfc:	fb00 fc0c 	mul.w	ip, r0, ip
 8010c00:	45a4      	cmp	ip, r4
 8010c02:	d909      	bls.n	8010c18 <__udivmoddi4+0x8c>
 8010c04:	192c      	adds	r4, r5, r4
 8010c06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010c0a:	f080 8107 	bcs.w	8010e1c <__udivmoddi4+0x290>
 8010c0e:	45a4      	cmp	ip, r4
 8010c10:	f240 8104 	bls.w	8010e1c <__udivmoddi4+0x290>
 8010c14:	3802      	subs	r0, #2
 8010c16:	442c      	add	r4, r5
 8010c18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8010c1c:	eba4 040c 	sub.w	r4, r4, ip
 8010c20:	2700      	movs	r7, #0
 8010c22:	b11e      	cbz	r6, 8010c2c <__udivmoddi4+0xa0>
 8010c24:	40d4      	lsrs	r4, r2
 8010c26:	2300      	movs	r3, #0
 8010c28:	e9c6 4300 	strd	r4, r3, [r6]
 8010c2c:	4639      	mov	r1, r7
 8010c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c32:	428b      	cmp	r3, r1
 8010c34:	d909      	bls.n	8010c4a <__udivmoddi4+0xbe>
 8010c36:	2e00      	cmp	r6, #0
 8010c38:	f000 80eb 	beq.w	8010e12 <__udivmoddi4+0x286>
 8010c3c:	2700      	movs	r7, #0
 8010c3e:	e9c6 0100 	strd	r0, r1, [r6]
 8010c42:	4638      	mov	r0, r7
 8010c44:	4639      	mov	r1, r7
 8010c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c4a:	fab3 f783 	clz	r7, r3
 8010c4e:	2f00      	cmp	r7, #0
 8010c50:	d147      	bne.n	8010ce2 <__udivmoddi4+0x156>
 8010c52:	428b      	cmp	r3, r1
 8010c54:	d302      	bcc.n	8010c5c <__udivmoddi4+0xd0>
 8010c56:	4282      	cmp	r2, r0
 8010c58:	f200 80fa 	bhi.w	8010e50 <__udivmoddi4+0x2c4>
 8010c5c:	1a84      	subs	r4, r0, r2
 8010c5e:	eb61 0303 	sbc.w	r3, r1, r3
 8010c62:	2001      	movs	r0, #1
 8010c64:	4698      	mov	r8, r3
 8010c66:	2e00      	cmp	r6, #0
 8010c68:	d0e0      	beq.n	8010c2c <__udivmoddi4+0xa0>
 8010c6a:	e9c6 4800 	strd	r4, r8, [r6]
 8010c6e:	e7dd      	b.n	8010c2c <__udivmoddi4+0xa0>
 8010c70:	b902      	cbnz	r2, 8010c74 <__udivmoddi4+0xe8>
 8010c72:	deff      	udf	#255	; 0xff
 8010c74:	fab2 f282 	clz	r2, r2
 8010c78:	2a00      	cmp	r2, #0
 8010c7a:	f040 808f 	bne.w	8010d9c <__udivmoddi4+0x210>
 8010c7e:	1b49      	subs	r1, r1, r5
 8010c80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8010c84:	fa1f f885 	uxth.w	r8, r5
 8010c88:	2701      	movs	r7, #1
 8010c8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8010c8e:	0c23      	lsrs	r3, r4, #16
 8010c90:	fb0e 111c 	mls	r1, lr, ip, r1
 8010c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010c98:	fb08 f10c 	mul.w	r1, r8, ip
 8010c9c:	4299      	cmp	r1, r3
 8010c9e:	d907      	bls.n	8010cb0 <__udivmoddi4+0x124>
 8010ca0:	18eb      	adds	r3, r5, r3
 8010ca2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8010ca6:	d202      	bcs.n	8010cae <__udivmoddi4+0x122>
 8010ca8:	4299      	cmp	r1, r3
 8010caa:	f200 80cd 	bhi.w	8010e48 <__udivmoddi4+0x2bc>
 8010cae:	4684      	mov	ip, r0
 8010cb0:	1a59      	subs	r1, r3, r1
 8010cb2:	b2a3      	uxth	r3, r4
 8010cb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8010cb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8010cbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8010cc0:	fb08 f800 	mul.w	r8, r8, r0
 8010cc4:	45a0      	cmp	r8, r4
 8010cc6:	d907      	bls.n	8010cd8 <__udivmoddi4+0x14c>
 8010cc8:	192c      	adds	r4, r5, r4
 8010cca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010cce:	d202      	bcs.n	8010cd6 <__udivmoddi4+0x14a>
 8010cd0:	45a0      	cmp	r8, r4
 8010cd2:	f200 80b6 	bhi.w	8010e42 <__udivmoddi4+0x2b6>
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	eba4 0408 	sub.w	r4, r4, r8
 8010cdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8010ce0:	e79f      	b.n	8010c22 <__udivmoddi4+0x96>
 8010ce2:	f1c7 0c20 	rsb	ip, r7, #32
 8010ce6:	40bb      	lsls	r3, r7
 8010ce8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8010cec:	ea4e 0e03 	orr.w	lr, lr, r3
 8010cf0:	fa01 f407 	lsl.w	r4, r1, r7
 8010cf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8010cf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8010cfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8010d00:	4325      	orrs	r5, r4
 8010d02:	fbb3 f9f8 	udiv	r9, r3, r8
 8010d06:	0c2c      	lsrs	r4, r5, #16
 8010d08:	fb08 3319 	mls	r3, r8, r9, r3
 8010d0c:	fa1f fa8e 	uxth.w	sl, lr
 8010d10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8010d14:	fb09 f40a 	mul.w	r4, r9, sl
 8010d18:	429c      	cmp	r4, r3
 8010d1a:	fa02 f207 	lsl.w	r2, r2, r7
 8010d1e:	fa00 f107 	lsl.w	r1, r0, r7
 8010d22:	d90b      	bls.n	8010d3c <__udivmoddi4+0x1b0>
 8010d24:	eb1e 0303 	adds.w	r3, lr, r3
 8010d28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8010d2c:	f080 8087 	bcs.w	8010e3e <__udivmoddi4+0x2b2>
 8010d30:	429c      	cmp	r4, r3
 8010d32:	f240 8084 	bls.w	8010e3e <__udivmoddi4+0x2b2>
 8010d36:	f1a9 0902 	sub.w	r9, r9, #2
 8010d3a:	4473      	add	r3, lr
 8010d3c:	1b1b      	subs	r3, r3, r4
 8010d3e:	b2ad      	uxth	r5, r5
 8010d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8010d44:	fb08 3310 	mls	r3, r8, r0, r3
 8010d48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8010d4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8010d50:	45a2      	cmp	sl, r4
 8010d52:	d908      	bls.n	8010d66 <__udivmoddi4+0x1da>
 8010d54:	eb1e 0404 	adds.w	r4, lr, r4
 8010d58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010d5c:	d26b      	bcs.n	8010e36 <__udivmoddi4+0x2aa>
 8010d5e:	45a2      	cmp	sl, r4
 8010d60:	d969      	bls.n	8010e36 <__udivmoddi4+0x2aa>
 8010d62:	3802      	subs	r0, #2
 8010d64:	4474      	add	r4, lr
 8010d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8010d6a:	fba0 8902 	umull	r8, r9, r0, r2
 8010d6e:	eba4 040a 	sub.w	r4, r4, sl
 8010d72:	454c      	cmp	r4, r9
 8010d74:	46c2      	mov	sl, r8
 8010d76:	464b      	mov	r3, r9
 8010d78:	d354      	bcc.n	8010e24 <__udivmoddi4+0x298>
 8010d7a:	d051      	beq.n	8010e20 <__udivmoddi4+0x294>
 8010d7c:	2e00      	cmp	r6, #0
 8010d7e:	d069      	beq.n	8010e54 <__udivmoddi4+0x2c8>
 8010d80:	ebb1 050a 	subs.w	r5, r1, sl
 8010d84:	eb64 0403 	sbc.w	r4, r4, r3
 8010d88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8010d8c:	40fd      	lsrs	r5, r7
 8010d8e:	40fc      	lsrs	r4, r7
 8010d90:	ea4c 0505 	orr.w	r5, ip, r5
 8010d94:	e9c6 5400 	strd	r5, r4, [r6]
 8010d98:	2700      	movs	r7, #0
 8010d9a:	e747      	b.n	8010c2c <__udivmoddi4+0xa0>
 8010d9c:	f1c2 0320 	rsb	r3, r2, #32
 8010da0:	fa20 f703 	lsr.w	r7, r0, r3
 8010da4:	4095      	lsls	r5, r2
 8010da6:	fa01 f002 	lsl.w	r0, r1, r2
 8010daa:	fa21 f303 	lsr.w	r3, r1, r3
 8010dae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8010db2:	4338      	orrs	r0, r7
 8010db4:	0c01      	lsrs	r1, r0, #16
 8010db6:	fbb3 f7fe 	udiv	r7, r3, lr
 8010dba:	fa1f f885 	uxth.w	r8, r5
 8010dbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8010dc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010dc6:	fb07 f308 	mul.w	r3, r7, r8
 8010dca:	428b      	cmp	r3, r1
 8010dcc:	fa04 f402 	lsl.w	r4, r4, r2
 8010dd0:	d907      	bls.n	8010de2 <__udivmoddi4+0x256>
 8010dd2:	1869      	adds	r1, r5, r1
 8010dd4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8010dd8:	d22f      	bcs.n	8010e3a <__udivmoddi4+0x2ae>
 8010dda:	428b      	cmp	r3, r1
 8010ddc:	d92d      	bls.n	8010e3a <__udivmoddi4+0x2ae>
 8010dde:	3f02      	subs	r7, #2
 8010de0:	4429      	add	r1, r5
 8010de2:	1acb      	subs	r3, r1, r3
 8010de4:	b281      	uxth	r1, r0
 8010de6:	fbb3 f0fe 	udiv	r0, r3, lr
 8010dea:	fb0e 3310 	mls	r3, lr, r0, r3
 8010dee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8010df2:	fb00 f308 	mul.w	r3, r0, r8
 8010df6:	428b      	cmp	r3, r1
 8010df8:	d907      	bls.n	8010e0a <__udivmoddi4+0x27e>
 8010dfa:	1869      	adds	r1, r5, r1
 8010dfc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8010e00:	d217      	bcs.n	8010e32 <__udivmoddi4+0x2a6>
 8010e02:	428b      	cmp	r3, r1
 8010e04:	d915      	bls.n	8010e32 <__udivmoddi4+0x2a6>
 8010e06:	3802      	subs	r0, #2
 8010e08:	4429      	add	r1, r5
 8010e0a:	1ac9      	subs	r1, r1, r3
 8010e0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8010e10:	e73b      	b.n	8010c8a <__udivmoddi4+0xfe>
 8010e12:	4637      	mov	r7, r6
 8010e14:	4630      	mov	r0, r6
 8010e16:	e709      	b.n	8010c2c <__udivmoddi4+0xa0>
 8010e18:	4607      	mov	r7, r0
 8010e1a:	e6e7      	b.n	8010bec <__udivmoddi4+0x60>
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	e6fb      	b.n	8010c18 <__udivmoddi4+0x8c>
 8010e20:	4541      	cmp	r1, r8
 8010e22:	d2ab      	bcs.n	8010d7c <__udivmoddi4+0x1f0>
 8010e24:	ebb8 0a02 	subs.w	sl, r8, r2
 8010e28:	eb69 020e 	sbc.w	r2, r9, lr
 8010e2c:	3801      	subs	r0, #1
 8010e2e:	4613      	mov	r3, r2
 8010e30:	e7a4      	b.n	8010d7c <__udivmoddi4+0x1f0>
 8010e32:	4660      	mov	r0, ip
 8010e34:	e7e9      	b.n	8010e0a <__udivmoddi4+0x27e>
 8010e36:	4618      	mov	r0, r3
 8010e38:	e795      	b.n	8010d66 <__udivmoddi4+0x1da>
 8010e3a:	4667      	mov	r7, ip
 8010e3c:	e7d1      	b.n	8010de2 <__udivmoddi4+0x256>
 8010e3e:	4681      	mov	r9, r0
 8010e40:	e77c      	b.n	8010d3c <__udivmoddi4+0x1b0>
 8010e42:	3802      	subs	r0, #2
 8010e44:	442c      	add	r4, r5
 8010e46:	e747      	b.n	8010cd8 <__udivmoddi4+0x14c>
 8010e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8010e4c:	442b      	add	r3, r5
 8010e4e:	e72f      	b.n	8010cb0 <__udivmoddi4+0x124>
 8010e50:	4638      	mov	r0, r7
 8010e52:	e708      	b.n	8010c66 <__udivmoddi4+0xda>
 8010e54:	4637      	mov	r7, r6
 8010e56:	e6e9      	b.n	8010c2c <__udivmoddi4+0xa0>

08010e58 <__aeabi_idiv0>:
 8010e58:	4770      	bx	lr
 8010e5a:	bf00      	nop

08010e5c <createFloat>:

float createFloat(int startadress){
	   /************Input Data to float**************/
	static int INT;
	static float result;
	   INT = UARTDATA[startadress+3] 			|
 8010e5c:	1cc3      	adds	r3, r0, #3
 8010e5e:	4a0f      	ldr	r2, [pc, #60]	; (8010e9c <createFloat+0x40>)
 8010e60:	5cd3      	ldrb	r3, [r2, r3]
	   		(UARTDATA[startadress+2] << 8) 		|
 8010e62:	1c81      	adds	r1, r0, #2
 8010e64:	5c51      	ldrb	r1, [r2, r1]
	   INT = UARTDATA[startadress+3] 			|
 8010e66:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	   		(UARTDATA[startadress+1] << 16) 	|
 8010e6a:	1c41      	adds	r1, r0, #1
 8010e6c:	5c51      	ldrb	r1, [r2, r1]
	   		(UARTDATA[startadress+2] << 8) 		|
 8010e6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	   		(UARTDATA[startadress] << 24);
 8010e72:	5c12      	ldrb	r2, [r2, r0]
	   		(UARTDATA[startadress+1] << 16) 	|
 8010e74:	ea43 6302 	orr.w	r3, r3, r2, lsl #24

	   memcpy(&result, &INT, sizeof(result));
 8010e78:	4a09      	ldr	r2, [pc, #36]	; (8010ea0 <createFloat+0x44>)
 8010e7a:	6013      	str	r3, [r2, #0]

	   if (result > 20){
 8010e7c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8010e80:	ee07 3a10 	vmov	s14, r3
 8010e84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e8c:	dd02      	ble.n	8010e94 <createFloat+0x38>
		   result = 20;
 8010e8e:	4613      	mov	r3, r2
 8010e90:	edc3 7a00 	vstr	s15, [r3]
	   }

	   return result;
	   /*********************************************/
}
 8010e94:	4b02      	ldr	r3, [pc, #8]	; (8010ea0 <createFloat+0x44>)
 8010e96:	ed93 0a00 	vldr	s0, [r3]
 8010e9a:	4770      	bx	lr
 8010e9c:	2002e80c 	.word	0x2002e80c
 8010ea0:	20000244 	.word	0x20000244

08010ea4 <BSP_Pointer_Update>:
  uint8_t buttonstateLeft;
  uint8_t buttonstateRight;
  I2C_HandleTypeDef hi2c1;


void BSP_Pointer_Update(void) {
 8010ea4:	b530      	push	{r4, r5, lr}
 8010ea6:	b085      	sub	sp, #20
  GUI_PID_STATE TS_State;               /* Structure that reports the touch state to STemWin */
  static TS_StateTypeDef prev_state;    /* Previous touch state from the touch sensor used from BSP package */
  //                   /* Actual touch state from the touch sensor used from BSP package */
  uint16_t xDiff, yDiff;                /* Difference in postitions between touch states*/
  BSP_TS_GetState(&ts);                 /* Read the touch state from touch sensor (BSP API)*/
 8010ea8:	4c1e      	ldr	r4, [pc, #120]	; (8010f24 <BSP_Pointer_Update+0x80>)
 8010eaa:	4620      	mov	r0, r4
 8010eac:	f00d feb4 	bl	801ec18 <BSP_TS_GetState>
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure*/
 8010eb0:	7820      	ldrb	r0, [r4, #0]
 8010eb2:	f88d 000c 	strb.w	r0, [sp, #12]


  TouchXCoordinate = ts.touchX[0];
 8010eb6:	8861      	ldrh	r1, [r4, #2]
 8010eb8:	4b1b      	ldr	r3, [pc, #108]	; (8010f28 <BSP_Pointer_Update+0x84>)
 8010eba:	6019      	str	r1, [r3, #0]
  TouchYCoordinate = ts.touchY[0];
 8010ebc:	88e4      	ldrh	r4, [r4, #6]
 8010ebe:	4b1b      	ldr	r3, [pc, #108]	; (8010f2c <BSP_Pointer_Update+0x88>)
 8010ec0:	601c      	str	r4, [r3, #0]
  TouchDetected = ts.touchDetected;
 8010ec2:	4b1b      	ldr	r3, [pc, #108]	; (8010f30 <BSP_Pointer_Update+0x8c>)
 8010ec4:	6018      	str	r0, [r3, #0]


  /* Compute x variation */
  xDiff = (prev_state.touchX[0] > ts.touchX[0]) ? (prev_state.touchX[0] - ts.touchX[0]) : (ts.touchX[0] - prev_state.touchX[0]);
 8010ec6:	4b1b      	ldr	r3, [pc, #108]	; (8010f34 <BSP_Pointer_Update+0x90>)
 8010ec8:	885b      	ldrh	r3, [r3, #2]
 8010eca:	4299      	cmp	r1, r3
 8010ecc:	d21e      	bcs.n	8010f0c <BSP_Pointer_Update+0x68>
 8010ece:	1a5b      	subs	r3, r3, r1
 8010ed0:	b29b      	uxth	r3, r3

  /* Compute y variation */
  yDiff = (prev_state.touchY[0] > ts.touchY[0]) ? (prev_state.touchY[0] - ts.touchY[0]) : (ts.touchY[0] - prev_state.touchY[0]);
 8010ed2:	4a18      	ldr	r2, [pc, #96]	; (8010f34 <BSP_Pointer_Update+0x90>)
 8010ed4:	88d2      	ldrh	r2, [r2, #6]
 8010ed6:	4294      	cmp	r4, r2
 8010ed8:	d21b      	bcs.n	8010f12 <BSP_Pointer_Update+0x6e>
 8010eda:	1b12      	subs	r2, r2, r4
 8010edc:	b292      	uxth	r2, r2

  /* Check if the touch is pressed */
  if ((prev_state.touchDetected != ts.touchDetected) || (xDiff > 3)|| (yDiff > 3))
 8010ede:	4d15      	ldr	r5, [pc, #84]	; (8010f34 <BSP_Pointer_Update+0x90>)
 8010ee0:	782d      	ldrb	r5, [r5, #0]
 8010ee2:	42a8      	cmp	r0, r5
 8010ee4:	d018      	beq.n	8010f18 <BSP_Pointer_Update+0x74>
  {
    prev_state.touchDetected = ts.touchDetected;
 8010ee6:	4b13      	ldr	r3, [pc, #76]	; (8010f34 <BSP_Pointer_Update+0x90>)
 8010ee8:	7018      	strb	r0, [r3, #0]
    /* Check touch variations */
    if ((ts.touchX[0] != 0) && (ts.touchY[0] != 0))
 8010eea:	b111      	cbz	r1, 8010ef2 <BSP_Pointer_Update+0x4e>
 8010eec:	b10c      	cbz	r4, 8010ef2 <BSP_Pointer_Update+0x4e>
    {
      prev_state.touchX[0] = ts.touchX[0];
 8010eee:	8059      	strh	r1, [r3, #2]
      prev_state.touchY[0] = ts.touchY[0];
 8010ef0:	80dc      	strh	r4, [r3, #6]
    }
    TS_State.Layer = 0;
 8010ef2:	2300      	movs	r3, #0
 8010ef4:	f88d 300d 	strb.w	r3, [sp, #13]
    TS_State.x = prev_state.touchX[0];
 8010ef8:	4b0e      	ldr	r3, [pc, #56]	; (8010f34 <BSP_Pointer_Update+0x90>)
 8010efa:	885a      	ldrh	r2, [r3, #2]
 8010efc:	9201      	str	r2, [sp, #4]
    TS_State.y = prev_state.touchY[0];
 8010efe:	88db      	ldrh	r3, [r3, #6]
 8010f00:	9302      	str	r3, [sp, #8]

    /* Send touch state to STemWin */
    GUI_TOUCH_StoreStateEx(&TS_State);
 8010f02:	a801      	add	r0, sp, #4
 8010f04:	f010 fb9c 	bl	8021640 <GUI_TOUCH_StoreStateEx>
  }
}
 8010f08:	b005      	add	sp, #20
 8010f0a:	bd30      	pop	{r4, r5, pc}
  xDiff = (prev_state.touchX[0] > ts.touchX[0]) ? (prev_state.touchX[0] - ts.touchX[0]) : (ts.touchX[0] - prev_state.touchX[0]);
 8010f0c:	1acb      	subs	r3, r1, r3
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	e7df      	b.n	8010ed2 <BSP_Pointer_Update+0x2e>
  yDiff = (prev_state.touchY[0] > ts.touchY[0]) ? (prev_state.touchY[0] - ts.touchY[0]) : (ts.touchY[0] - prev_state.touchY[0]);
 8010f12:	1aa2      	subs	r2, r4, r2
 8010f14:	b292      	uxth	r2, r2
 8010f16:	e7e2      	b.n	8010ede <BSP_Pointer_Update+0x3a>
  if ((prev_state.touchDetected != ts.touchDetected) || (xDiff > 3)|| (yDiff > 3))
 8010f18:	2b03      	cmp	r3, #3
 8010f1a:	d8e4      	bhi.n	8010ee6 <BSP_Pointer_Update+0x42>
 8010f1c:	2a03      	cmp	r2, #3
 8010f1e:	d8e2      	bhi.n	8010ee6 <BSP_Pointer_Update+0x42>
 8010f20:	e7f2      	b.n	8010f08 <BSP_Pointer_Update+0x64>
 8010f22:	bf00      	nop
 8010f24:	2002f390 	.word	0x2002f390
 8010f28:	2002e9cc 	.word	0x2002e9cc
 8010f2c:	2002e720 	.word	0x2002e720
 8010f30:	2002e5d0 	.word	0x2002e5d0
 8010f34:	20000248 	.word	0x20000248

08010f38 <TOUCHUPDATE>:
int intervall4 = 0;
int high4 = 0;
//++++++++++++++++++++++++++++++++++++//

void TOUCHUPDATE(){
	if(TIM4->CNT>100){
 8010f38:	4ba4      	ldr	r3, [pc, #656]	; (80111cc <TOUCHUPDATE+0x294>)
 8010f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f3c:	2b64      	cmp	r3, #100	; 0x64
 8010f3e:	d800      	bhi.n	8010f42 <TOUCHUPDATE+0xa>
 8010f40:	4770      	bx	lr
void TOUCHUPDATE(){
 8010f42:	b570      	push	{r4, r5, r6, lr}
 8010f44:	b082      	sub	sp, #8
		BSP_LED_Toggle(LED1);
 8010f46:	2000      	movs	r0, #0
 8010f48:	f00d fe04 	bl	801eb54 <BSP_LED_Toggle>
		aTxBuffer[9] = i_inputLeft_Indicator*10;
 8010f4c:	4aa0      	ldr	r2, [pc, #640]	; (80111d0 <TOUCHUPDATE+0x298>)
 8010f4e:	4ba1      	ldr	r3, [pc, #644]	; (80111d4 <TOUCHUPDATE+0x29c>)
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8010f56:	0059      	lsls	r1, r3, #1
 8010f58:	7251      	strb	r1, [r2, #9]



		    switch (count) {
 8010f5a:	68d3      	ldr	r3, [r2, #12]
 8010f5c:	2b02      	cmp	r3, #2
 8010f5e:	f000 815d 	beq.w	801121c <TOUCHUPDATE+0x2e4>
 8010f62:	2b03      	cmp	r3, #3
 8010f64:	f000 82a0 	beq.w	80114a8 <TOUCHUPDATE+0x570>
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d004      	beq.n	8010f76 <TOUCHUPDATE+0x3e>
		    	BSP_Pointer_Update();

		     	count=1;
		        break;
		    }
		    TIM4->CNT = 0;
 8010f6c:	4b97      	ldr	r3, [pc, #604]	; (80111cc <TOUCHUPDATE+0x294>)
 8010f6e:	2200      	movs	r2, #0
 8010f70:	625a      	str	r2, [r3, #36]	; 0x24
	  	}
}
 8010f72:	b002      	add	sp, #8
 8010f74:	bd70      	pop	{r4, r5, r6, pc}
		    	if 		(Encoder3.Color == GUI_LIGHTGRAY)	{aTxBuffer[1] = 0;}
 8010f76:	4b98      	ldr	r3, [pc, #608]	; (80111d8 <TOUCHUPDATE+0x2a0>)
 8010f78:	691b      	ldr	r3, [r3, #16]
 8010f7a:	4a98      	ldr	r2, [pc, #608]	; (80111dc <TOUCHUPDATE+0x2a4>)
 8010f7c:	4293      	cmp	r3, r2
 8010f7e:	d018      	beq.n	8010fb2 <TOUCHUPDATE+0x7a>
		    	else if (Encoder3.Color == GUI_MAGENTA)		{aTxBuffer[1] = 1;}
 8010f80:	f46f 427f 	mvn.w	r2, #65280	; 0xff00
 8010f84:	4293      	cmp	r3, r2
 8010f86:	d03b      	beq.n	8011000 <TOUCHUPDATE+0xc8>
		    	else if (Encoder3.Color == GUI_ORANGE)		{aTxBuffer[1] = 2;}
 8010f88:	f513 4fb6 	cmn.w	r3, #23296	; 0x5b00
 8010f8c:	d03c      	beq.n	8011008 <TOUCHUPDATE+0xd0>
		    	else if (Encoder3.Color == GUI_CYAN)		{aTxBuffer[1] = 3;}
 8010f8e:	f46f 027f 	mvn.w	r2, #16711680	; 0xff0000
 8010f92:	4293      	cmp	r3, r2
 8010f94:	d03c      	beq.n	8011010 <TOUCHUPDATE+0xd8>
		    	else if (Encoder3.Color == GUI_LIGHTYELLOW)	{aTxBuffer[1] = 4;}
 8010f96:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8010f9a:	d03d      	beq.n	8011018 <TOUCHUPDATE+0xe0>
		    	else if (Encoder3.Color == GUI_LIGHTGREEN)	{aTxBuffer[1] = 5;}
 8010f9c:	f06f 127f 	mvn.w	r2, #8323199	; 0x7f007f
 8010fa0:	4293      	cmp	r3, r2
 8010fa2:	d03d      	beq.n	8011020 <TOUCHUPDATE+0xe8>
		    	else if (Encoder3.Color == GUI_LIGHTBLUE)	{aTxBuffer[1] = 6;}
 8010fa4:	4a8e      	ldr	r2, [pc, #568]	; (80111e0 <TOUCHUPDATE+0x2a8>)
 8010fa6:	4293      	cmp	r3, r2
 8010fa8:	d03e      	beq.n	8011028 <TOUCHUPDATE+0xf0>
		    	else								    	{aTxBuffer[1] = 10;}
 8010faa:	4b89      	ldr	r3, [pc, #548]	; (80111d0 <TOUCHUPDATE+0x298>)
 8010fac:	220a      	movs	r2, #10
 8010fae:	705a      	strb	r2, [r3, #1]
 8010fb0:	e002      	b.n	8010fb8 <TOUCHUPDATE+0x80>
		    	if 		(Encoder3.Color == GUI_LIGHTGRAY)	{aTxBuffer[1] = 0;}
 8010fb2:	4b87      	ldr	r3, [pc, #540]	; (80111d0 <TOUCHUPDATE+0x298>)
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	705a      	strb	r2, [r3, #1]
		    	if 		(Encoder4.Color == GUI_LIGHTGRAY)	{aTxBuffer[2] = 0;}
 8010fb8:	4b8a      	ldr	r3, [pc, #552]	; (80111e4 <TOUCHUPDATE+0x2ac>)
 8010fba:	691b      	ldr	r3, [r3, #16]
 8010fbc:	4a87      	ldr	r2, [pc, #540]	; (80111dc <TOUCHUPDATE+0x2a4>)
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	d036      	beq.n	8011030 <TOUCHUPDATE+0xf8>
		    	else if (Encoder4.Color == GUI_MAGENTA)		{aTxBuffer[2] = 1;}
 8010fc2:	f46f 427f 	mvn.w	r2, #65280	; 0xff00
 8010fc6:	4293      	cmp	r3, r2
 8010fc8:	f000 80c0 	beq.w	801114c <TOUCHUPDATE+0x214>
		    	else if (Encoder4.Color == GUI_ORANGE)		{aTxBuffer[2] = 2;}
 8010fcc:	f513 4fb6 	cmn.w	r3, #23296	; 0x5b00
 8010fd0:	f000 80c0 	beq.w	8011154 <TOUCHUPDATE+0x21c>
		    	else if (Encoder4.Color == GUI_CYAN)		{aTxBuffer[2] = 3;}
 8010fd4:	f46f 027f 	mvn.w	r2, #16711680	; 0xff0000
 8010fd8:	4293      	cmp	r3, r2
 8010fda:	f000 80bf 	beq.w	801115c <TOUCHUPDATE+0x224>
		    	else if (Encoder4.Color == GUI_LIGHTYELLOW)	{aTxBuffer[2] = 4;}
 8010fde:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8010fe2:	f000 80bf 	beq.w	8011164 <TOUCHUPDATE+0x22c>
		    	else if (Encoder4.Color == GUI_LIGHTGREEN)	{aTxBuffer[2] = 5;}
 8010fe6:	f06f 127f 	mvn.w	r2, #8323199	; 0x7f007f
 8010fea:	4293      	cmp	r3, r2
 8010fec:	f000 80be 	beq.w	801116c <TOUCHUPDATE+0x234>
		    	else if (Encoder4.Color == GUI_LIGHTBLUE)	{aTxBuffer[2] = 6;}
 8010ff0:	4a7b      	ldr	r2, [pc, #492]	; (80111e0 <TOUCHUPDATE+0x2a8>)
 8010ff2:	4293      	cmp	r3, r2
 8010ff4:	f000 80be 	beq.w	8011174 <TOUCHUPDATE+0x23c>
		    	else								    	{aTxBuffer[2] = 10;}
 8010ff8:	4b75      	ldr	r3, [pc, #468]	; (80111d0 <TOUCHUPDATE+0x298>)
 8010ffa:	220a      	movs	r2, #10
 8010ffc:	709a      	strb	r2, [r3, #2]
 8010ffe:	e01a      	b.n	8011036 <TOUCHUPDATE+0xfe>
		    	else if (Encoder3.Color == GUI_MAGENTA)		{aTxBuffer[1] = 1;}
 8011000:	4b73      	ldr	r3, [pc, #460]	; (80111d0 <TOUCHUPDATE+0x298>)
 8011002:	2201      	movs	r2, #1
 8011004:	705a      	strb	r2, [r3, #1]
 8011006:	e7d7      	b.n	8010fb8 <TOUCHUPDATE+0x80>
		    	else if (Encoder3.Color == GUI_ORANGE)		{aTxBuffer[1] = 2;}
 8011008:	4b71      	ldr	r3, [pc, #452]	; (80111d0 <TOUCHUPDATE+0x298>)
 801100a:	2202      	movs	r2, #2
 801100c:	705a      	strb	r2, [r3, #1]
 801100e:	e7d3      	b.n	8010fb8 <TOUCHUPDATE+0x80>
		    	else if (Encoder3.Color == GUI_CYAN)		{aTxBuffer[1] = 3;}
 8011010:	4b6f      	ldr	r3, [pc, #444]	; (80111d0 <TOUCHUPDATE+0x298>)
 8011012:	2203      	movs	r2, #3
 8011014:	705a      	strb	r2, [r3, #1]
 8011016:	e7cf      	b.n	8010fb8 <TOUCHUPDATE+0x80>
		    	else if (Encoder3.Color == GUI_LIGHTYELLOW)	{aTxBuffer[1] = 4;}
 8011018:	4b6d      	ldr	r3, [pc, #436]	; (80111d0 <TOUCHUPDATE+0x298>)
 801101a:	2204      	movs	r2, #4
 801101c:	705a      	strb	r2, [r3, #1]
 801101e:	e7cb      	b.n	8010fb8 <TOUCHUPDATE+0x80>
		    	else if (Encoder3.Color == GUI_LIGHTGREEN)	{aTxBuffer[1] = 5;}
 8011020:	4b6b      	ldr	r3, [pc, #428]	; (80111d0 <TOUCHUPDATE+0x298>)
 8011022:	2205      	movs	r2, #5
 8011024:	705a      	strb	r2, [r3, #1]
 8011026:	e7c7      	b.n	8010fb8 <TOUCHUPDATE+0x80>
		    	else if (Encoder3.Color == GUI_LIGHTBLUE)	{aTxBuffer[1] = 6;}
 8011028:	4b69      	ldr	r3, [pc, #420]	; (80111d0 <TOUCHUPDATE+0x298>)
 801102a:	2206      	movs	r2, #6
 801102c:	705a      	strb	r2, [r3, #1]
 801102e:	e7c3      	b.n	8010fb8 <TOUCHUPDATE+0x80>
		    	if 		(Encoder4.Color == GUI_LIGHTGRAY)	{aTxBuffer[2] = 0;}
 8011030:	4b67      	ldr	r3, [pc, #412]	; (80111d0 <TOUCHUPDATE+0x298>)
 8011032:	2200      	movs	r2, #0
 8011034:	709a      	strb	r2, [r3, #2]
		    	aTxBuffer[8]= Encoder1.value;
 8011036:	4b6c      	ldr	r3, [pc, #432]	; (80111e8 <TOUCHUPDATE+0x2b0>)
 8011038:	edd3 7a00 	vldr	s15, [r3]
 801103c:	4e64      	ldr	r6, [pc, #400]	; (80111d0 <TOUCHUPDATE+0x298>)
 801103e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011042:	ee17 3a90 	vmov	r3, s15
 8011046:	7233      	strb	r3, [r6, #8]
		    	HAL_I2C_Master_Transmit(&hi2c1, 50, aTxBuffer,10,10); //Send to LOGO WS2812
 8011048:	4d68      	ldr	r5, [pc, #416]	; (80111ec <TOUCHUPDATE+0x2b4>)
 801104a:	240a      	movs	r4, #10
 801104c:	9400      	str	r4, [sp, #0]
 801104e:	4623      	mov	r3, r4
 8011050:	4632      	mov	r2, r6
 8011052:	2132      	movs	r1, #50	; 0x32
 8011054:	4628      	mov	r0, r5
 8011056:	f003 fad5 	bl	8014604 <HAL_I2C_Master_Transmit>
		    	 HAL_I2C_Master_Transmit(&hi2c1, 40, aTxBuffer,10,10);
 801105a:	9400      	str	r4, [sp, #0]
 801105c:	4623      	mov	r3, r4
 801105e:	4632      	mov	r2, r6
 8011060:	2128      	movs	r1, #40	; 0x28
 8011062:	4628      	mov	r0, r5
 8011064:	f003 face 	bl	8014604 <HAL_I2C_Master_Transmit>
				 HAL_I2C_Master_Receive(&hi2c1, 40, aRxBuffer,10,10);
 8011068:	4e61      	ldr	r6, [pc, #388]	; (80111f0 <TOUCHUPDATE+0x2b8>)
 801106a:	9400      	str	r4, [sp, #0]
 801106c:	4623      	mov	r3, r4
 801106e:	4632      	mov	r2, r6
 8011070:	2128      	movs	r1, #40	; 0x28
 8011072:	4628      	mov	r0, r5
 8011074:	f003 fb80 	bl	8014778 <HAL_I2C_Master_Receive>
				 if(aRxBuffer[6]!=255) {buttonstateRight=aRxBuffer[6];}
 8011078:	79b3      	ldrb	r3, [r6, #6]
 801107a:	2bff      	cmp	r3, #255	; 0xff
 801107c:	d001      	beq.n	8011082 <TOUCHUPDATE+0x14a>
 801107e:	4a5d      	ldr	r2, [pc, #372]	; (80111f4 <TOUCHUPDATE+0x2bc>)
 8011080:	7013      	strb	r3, [r2, #0]
				 if(aRxBuffer[7]!=255) {
 8011082:	4a5b      	ldr	r2, [pc, #364]	; (80111f0 <TOUCHUPDATE+0x2b8>)
 8011084:	79d2      	ldrb	r2, [r2, #7]
 8011086:	2aff      	cmp	r2, #255	; 0xff
 8011088:	d006      	beq.n	8011098 <TOUCHUPDATE+0x160>
					 Encoder3.value=aRxBuffer[7];
 801108a:	ee07 2a90 	vmov	s15, r2
 801108e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011092:	4a51      	ldr	r2, [pc, #324]	; (80111d8 <TOUCHUPDATE+0x2a0>)
 8011094:	edc2 7a00 	vstr	s15, [r2]
				 if(aRxBuffer[9]!=255){
 8011098:	4a55      	ldr	r2, [pc, #340]	; (80111f0 <TOUCHUPDATE+0x2b8>)
 801109a:	7a52      	ldrb	r2, [r2, #9]
 801109c:	2aff      	cmp	r2, #255	; 0xff
 801109e:	d006      	beq.n	80110ae <TOUCHUPDATE+0x176>
					 Encoder4.value=aRxBuffer[9];
 80110a0:	ee07 2a90 	vmov	s15, r2
 80110a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80110a8:	4a4e      	ldr	r2, [pc, #312]	; (80111e4 <TOUCHUPDATE+0x2ac>)
 80110aa:	edc2 7a00 	vstr	s15, [r2]
				 Encoder3.buttonState =	!(aRxBuffer[6] & 0x01);
 80110ae:	f083 0201 	eor.w	r2, r3, #1
 80110b2:	f002 0201 	and.w	r2, r2, #1
 80110b6:	4948      	ldr	r1, [pc, #288]	; (80111d8 <TOUCHUPDATE+0x2a0>)
 80110b8:	608a      	str	r2, [r1, #8]
				 Encoder4.buttonState = !((aRxBuffer[6]>>2) & 0x01);
 80110ba:	089b      	lsrs	r3, r3, #2
 80110bc:	f083 0301 	eor.w	r3, r3, #1
 80110c0:	f003 0301 	and.w	r3, r3, #1
 80110c4:	4947      	ldr	r1, [pc, #284]	; (80111e4 <TOUCHUPDATE+0x2ac>)
 80110c6:	608b      	str	r3, [r1, #8]
				 if(Encoder3.buttonState&&DoubleClick3<2&&!high3){
 80110c8:	b11a      	cbz	r2, 80110d2 <TOUCHUPDATE+0x19a>
 80110ca:	494b      	ldr	r1, [pc, #300]	; (80111f8 <TOUCHUPDATE+0x2c0>)
 80110cc:	68c9      	ldr	r1, [r1, #12]
 80110ce:	2901      	cmp	r1, #1
 80110d0:	dd54      	ble.n	801117c <TOUCHUPDATE+0x244>
				 if(!Encoder3.buttonState){
 80110d2:	b912      	cbnz	r2, 80110da <TOUCHUPDATE+0x1a2>
					 high3 = 0;
 80110d4:	4a48      	ldr	r2, [pc, #288]	; (80111f8 <TOUCHUPDATE+0x2c0>)
 80110d6:	2100      	movs	r1, #0
 80110d8:	6111      	str	r1, [r2, #16]
				 if (DoubleClick3 == 2 && intervall3 < 20){
 80110da:	4a47      	ldr	r2, [pc, #284]	; (80111f8 <TOUCHUPDATE+0x2c0>)
 80110dc:	68d2      	ldr	r2, [r2, #12]
 80110de:	2a02      	cmp	r2, #2
 80110e0:	d058      	beq.n	8011194 <TOUCHUPDATE+0x25c>
				 if (Encoder3.doubleclickEvent && intervall3 == 20){
 80110e2:	4a3d      	ldr	r2, [pc, #244]	; (80111d8 <TOUCHUPDATE+0x2a0>)
 80110e4:	68d2      	ldr	r2, [r2, #12]
 80110e6:	b11a      	cbz	r2, 80110f0 <TOUCHUPDATE+0x1b8>
 80110e8:	4a43      	ldr	r2, [pc, #268]	; (80111f8 <TOUCHUPDATE+0x2c0>)
 80110ea:	6952      	ldr	r2, [r2, #20]
 80110ec:	2a14      	cmp	r2, #20
 80110ee:	d05d      	beq.n	80111ac <TOUCHUPDATE+0x274>
				 intervall3++;
 80110f0:	4941      	ldr	r1, [pc, #260]	; (80111f8 <TOUCHUPDATE+0x2c0>)
 80110f2:	694a      	ldr	r2, [r1, #20]
 80110f4:	3201      	adds	r2, #1
 80110f6:	614a      	str	r2, [r1, #20]
				 if(intervall3 >= 20){intervall3 = 20;DoubleClick3 = 0;}
 80110f8:	2a13      	cmp	r2, #19
 80110fa:	dd04      	ble.n	8011106 <TOUCHUPDATE+0x1ce>
 80110fc:	460a      	mov	r2, r1
 80110fe:	2114      	movs	r1, #20
 8011100:	6151      	str	r1, [r2, #20]
 8011102:	2100      	movs	r1, #0
 8011104:	60d1      	str	r1, [r2, #12]
				 if(Encoder4.buttonState&&DoubleClick4<2&&!high4){
 8011106:	b11b      	cbz	r3, 8011110 <TOUCHUPDATE+0x1d8>
 8011108:	4a3b      	ldr	r2, [pc, #236]	; (80111f8 <TOUCHUPDATE+0x2c0>)
 801110a:	6992      	ldr	r2, [r2, #24]
 801110c:	2a01      	cmp	r2, #1
 801110e:	dd51      	ble.n	80111b4 <TOUCHUPDATE+0x27c>
				 if(!Encoder4.buttonState){
 8011110:	b913      	cbnz	r3, 8011118 <TOUCHUPDATE+0x1e0>
					 high4 = 0;
 8011112:	4b39      	ldr	r3, [pc, #228]	; (80111f8 <TOUCHUPDATE+0x2c0>)
 8011114:	2200      	movs	r2, #0
 8011116:	61da      	str	r2, [r3, #28]
				 if (DoubleClick4 == 2 && intervall4 < 20){
 8011118:	4b37      	ldr	r3, [pc, #220]	; (80111f8 <TOUCHUPDATE+0x2c0>)
 801111a:	699b      	ldr	r3, [r3, #24]
 801111c:	2b02      	cmp	r3, #2
 801111e:	d06d      	beq.n	80111fc <TOUCHUPDATE+0x2c4>
				 if (Encoder4.doubleclickEvent && intervall4 == 20){
 8011120:	4b30      	ldr	r3, [pc, #192]	; (80111e4 <TOUCHUPDATE+0x2ac>)
 8011122:	68db      	ldr	r3, [r3, #12]
 8011124:	b11b      	cbz	r3, 801112e <TOUCHUPDATE+0x1f6>
 8011126:	4b34      	ldr	r3, [pc, #208]	; (80111f8 <TOUCHUPDATE+0x2c0>)
 8011128:	6a1b      	ldr	r3, [r3, #32]
 801112a:	2b14      	cmp	r3, #20
 801112c:	d072      	beq.n	8011214 <TOUCHUPDATE+0x2dc>
				 intervall4++;
 801112e:	4a32      	ldr	r2, [pc, #200]	; (80111f8 <TOUCHUPDATE+0x2c0>)
 8011130:	6a13      	ldr	r3, [r2, #32]
 8011132:	3301      	adds	r3, #1
 8011134:	6213      	str	r3, [r2, #32]
				 if(intervall4 >= 20){intervall4 = 20;DoubleClick4 = 0;}
 8011136:	2b13      	cmp	r3, #19
 8011138:	dd04      	ble.n	8011144 <TOUCHUPDATE+0x20c>
 801113a:	4613      	mov	r3, r2
 801113c:	2214      	movs	r2, #20
 801113e:	621a      	str	r2, [r3, #32]
 8011140:	2200      	movs	r2, #0
 8011142:	619a      	str	r2, [r3, #24]
		    	 count =2;
 8011144:	4b22      	ldr	r3, [pc, #136]	; (80111d0 <TOUCHUPDATE+0x298>)
 8011146:	2202      	movs	r2, #2
 8011148:	60da      	str	r2, [r3, #12]
		     	 break;
 801114a:	e70f      	b.n	8010f6c <TOUCHUPDATE+0x34>
		    	else if (Encoder4.Color == GUI_MAGENTA)		{aTxBuffer[2] = 1;}
 801114c:	4b20      	ldr	r3, [pc, #128]	; (80111d0 <TOUCHUPDATE+0x298>)
 801114e:	2201      	movs	r2, #1
 8011150:	709a      	strb	r2, [r3, #2]
 8011152:	e770      	b.n	8011036 <TOUCHUPDATE+0xfe>
		    	else if (Encoder4.Color == GUI_ORANGE)		{aTxBuffer[2] = 2;}
 8011154:	4b1e      	ldr	r3, [pc, #120]	; (80111d0 <TOUCHUPDATE+0x298>)
 8011156:	2202      	movs	r2, #2
 8011158:	709a      	strb	r2, [r3, #2]
 801115a:	e76c      	b.n	8011036 <TOUCHUPDATE+0xfe>
		    	else if (Encoder4.Color == GUI_CYAN)		{aTxBuffer[2] = 3;}
 801115c:	4b1c      	ldr	r3, [pc, #112]	; (80111d0 <TOUCHUPDATE+0x298>)
 801115e:	2203      	movs	r2, #3
 8011160:	709a      	strb	r2, [r3, #2]
 8011162:	e768      	b.n	8011036 <TOUCHUPDATE+0xfe>
		    	else if (Encoder4.Color == GUI_LIGHTYELLOW)	{aTxBuffer[2] = 4;}
 8011164:	4b1a      	ldr	r3, [pc, #104]	; (80111d0 <TOUCHUPDATE+0x298>)
 8011166:	2204      	movs	r2, #4
 8011168:	709a      	strb	r2, [r3, #2]
 801116a:	e764      	b.n	8011036 <TOUCHUPDATE+0xfe>
		    	else if (Encoder4.Color == GUI_LIGHTGREEN)	{aTxBuffer[2] = 5;}
 801116c:	4b18      	ldr	r3, [pc, #96]	; (80111d0 <TOUCHUPDATE+0x298>)
 801116e:	2205      	movs	r2, #5
 8011170:	709a      	strb	r2, [r3, #2]
 8011172:	e760      	b.n	8011036 <TOUCHUPDATE+0xfe>
		    	else if (Encoder4.Color == GUI_LIGHTBLUE)	{aTxBuffer[2] = 6;}
 8011174:	4b16      	ldr	r3, [pc, #88]	; (80111d0 <TOUCHUPDATE+0x298>)
 8011176:	2206      	movs	r2, #6
 8011178:	709a      	strb	r2, [r3, #2]
 801117a:	e75c      	b.n	8011036 <TOUCHUPDATE+0xfe>
				 if(Encoder3.buttonState&&DoubleClick3<2&&!high3){
 801117c:	481e      	ldr	r0, [pc, #120]	; (80111f8 <TOUCHUPDATE+0x2c0>)
 801117e:	6900      	ldr	r0, [r0, #16]
 8011180:	2800      	cmp	r0, #0
 8011182:	d1a6      	bne.n	80110d2 <TOUCHUPDATE+0x19a>
					 DoubleClick3 = DoubleClick3+1;
 8011184:	3101      	adds	r1, #1
 8011186:	481c      	ldr	r0, [pc, #112]	; (80111f8 <TOUCHUPDATE+0x2c0>)
 8011188:	60c1      	str	r1, [r0, #12]
					 high3 = 1;
 801118a:	2101      	movs	r1, #1
 801118c:	6101      	str	r1, [r0, #16]
					 intervall3 = 0;
 801118e:	2100      	movs	r1, #0
 8011190:	6141      	str	r1, [r0, #20]
 8011192:	e79e      	b.n	80110d2 <TOUCHUPDATE+0x19a>
				 if (DoubleClick3 == 2 && intervall3 < 20){
 8011194:	4a18      	ldr	r2, [pc, #96]	; (80111f8 <TOUCHUPDATE+0x2c0>)
 8011196:	6952      	ldr	r2, [r2, #20]
 8011198:	2a13      	cmp	r2, #19
 801119a:	dca2      	bgt.n	80110e2 <TOUCHUPDATE+0x1aa>
					 DoubleClick3 = 0;
 801119c:	4a16      	ldr	r2, [pc, #88]	; (80111f8 <TOUCHUPDATE+0x2c0>)
 801119e:	2100      	movs	r1, #0
 80111a0:	60d1      	str	r1, [r2, #12]
					 Encoder3.doubleclickEvent = 1;
 80111a2:	480d      	ldr	r0, [pc, #52]	; (80111d8 <TOUCHUPDATE+0x2a0>)
 80111a4:	2401      	movs	r4, #1
 80111a6:	60c4      	str	r4, [r0, #12]
					 intervall3=0;
 80111a8:	6151      	str	r1, [r2, #20]
 80111aa:	e79a      	b.n	80110e2 <TOUCHUPDATE+0x1aa>
					 Encoder3.doubleclickEvent = 0;
 80111ac:	4a0a      	ldr	r2, [pc, #40]	; (80111d8 <TOUCHUPDATE+0x2a0>)
 80111ae:	2100      	movs	r1, #0
 80111b0:	60d1      	str	r1, [r2, #12]
 80111b2:	e79d      	b.n	80110f0 <TOUCHUPDATE+0x1b8>
				 if(Encoder4.buttonState&&DoubleClick4<2&&!high4){
 80111b4:	4910      	ldr	r1, [pc, #64]	; (80111f8 <TOUCHUPDATE+0x2c0>)
 80111b6:	69c9      	ldr	r1, [r1, #28]
 80111b8:	2900      	cmp	r1, #0
 80111ba:	d1a9      	bne.n	8011110 <TOUCHUPDATE+0x1d8>
					 DoubleClick4 = DoubleClick4+1;
 80111bc:	3201      	adds	r2, #1
 80111be:	490e      	ldr	r1, [pc, #56]	; (80111f8 <TOUCHUPDATE+0x2c0>)
 80111c0:	618a      	str	r2, [r1, #24]
					 high4 = 1;
 80111c2:	2201      	movs	r2, #1
 80111c4:	61ca      	str	r2, [r1, #28]
					 intervall4 = 0;
 80111c6:	2200      	movs	r2, #0
 80111c8:	620a      	str	r2, [r1, #32]
 80111ca:	e7a1      	b.n	8011110 <TOUCHUPDATE+0x1d8>
 80111cc:	40000800 	.word	0x40000800
 80111d0:	20000040 	.word	0x20000040
 80111d4:	2002f188 	.word	0x2002f188
 80111d8:	2002e560 	.word	0x2002e560
 80111dc:	ffd3d3d3 	.word	0xffd3d3d3
 80111e0:	ff8080ff 	.word	0xff8080ff
 80111e4:	2002e70c 	.word	0x2002e70c
 80111e8:	2002eef4 	.word	0x2002eef4
 80111ec:	2002f1ac 	.word	0x2002f1ac
 80111f0:	2002fa6c 	.word	0x2002fa6c
 80111f4:	2002f8b4 	.word	0x2002f8b4
 80111f8:	20000248 	.word	0x20000248
				 if (DoubleClick4 == 2 && intervall4 < 20){
 80111fc:	4ba0      	ldr	r3, [pc, #640]	; (8011480 <TOUCHUPDATE+0x548>)
 80111fe:	6a1b      	ldr	r3, [r3, #32]
 8011200:	2b13      	cmp	r3, #19
 8011202:	dc8d      	bgt.n	8011120 <TOUCHUPDATE+0x1e8>
					 DoubleClick4 = 0;
 8011204:	4b9e      	ldr	r3, [pc, #632]	; (8011480 <TOUCHUPDATE+0x548>)
 8011206:	2200      	movs	r2, #0
 8011208:	619a      	str	r2, [r3, #24]
					 Encoder4.doubleclickEvent = 1;
 801120a:	499e      	ldr	r1, [pc, #632]	; (8011484 <TOUCHUPDATE+0x54c>)
 801120c:	2001      	movs	r0, #1
 801120e:	60c8      	str	r0, [r1, #12]
					 intervall4=0;
 8011210:	621a      	str	r2, [r3, #32]
 8011212:	e785      	b.n	8011120 <TOUCHUPDATE+0x1e8>
					 Encoder4.doubleclickEvent = 0;
 8011214:	4b9b      	ldr	r3, [pc, #620]	; (8011484 <TOUCHUPDATE+0x54c>)
 8011216:	2200      	movs	r2, #0
 8011218:	60da      	str	r2, [r3, #12]
 801121a:	e788      	b.n	801112e <TOUCHUPDATE+0x1f6>
		    	if 		(Encoder1.Color == GUI_LIGHTGRAY)	{aTxBuffer[2] = 0;}
 801121c:	4b9a      	ldr	r3, [pc, #616]	; (8011488 <TOUCHUPDATE+0x550>)
 801121e:	691b      	ldr	r3, [r3, #16]
 8011220:	4a9a      	ldr	r2, [pc, #616]	; (801148c <TOUCHUPDATE+0x554>)
 8011222:	4293      	cmp	r3, r2
 8011224:	d018      	beq.n	8011258 <TOUCHUPDATE+0x320>
		    	else if (Encoder1.Color == GUI_MAGENTA)		{aTxBuffer[2] = 1;}
 8011226:	f46f 427f 	mvn.w	r2, #65280	; 0xff00
 801122a:	4293      	cmp	r3, r2
 801122c:	d03b      	beq.n	80112a6 <TOUCHUPDATE+0x36e>
		    	else if (Encoder1.Color == GUI_ORANGE)		{aTxBuffer[2] = 2;}
 801122e:	f513 4fb6 	cmn.w	r3, #23296	; 0x5b00
 8011232:	d03c      	beq.n	80112ae <TOUCHUPDATE+0x376>
		    	else if (Encoder1.Color == GUI_CYAN)		{aTxBuffer[2] = 3;}
 8011234:	f46f 027f 	mvn.w	r2, #16711680	; 0xff0000
 8011238:	4293      	cmp	r3, r2
 801123a:	d03c      	beq.n	80112b6 <TOUCHUPDATE+0x37e>
		    	else if (Encoder1.Color == GUI_LIGHTYELLOW)	{aTxBuffer[2] = 4;}
 801123c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8011240:	d03d      	beq.n	80112be <TOUCHUPDATE+0x386>
		    	else if (Encoder1.Color == GUI_LIGHTGREEN)	{aTxBuffer[2] = 5;}
 8011242:	f06f 127f 	mvn.w	r2, #8323199	; 0x7f007f
 8011246:	4293      	cmp	r3, r2
 8011248:	d03d      	beq.n	80112c6 <TOUCHUPDATE+0x38e>
		    	else if (Encoder1.Color == GUI_LIGHTBLUE)	{aTxBuffer[2] = 6;}
 801124a:	4a91      	ldr	r2, [pc, #580]	; (8011490 <TOUCHUPDATE+0x558>)
 801124c:	4293      	cmp	r3, r2
 801124e:	d03e      	beq.n	80112ce <TOUCHUPDATE+0x396>
		    	else								    	{aTxBuffer[2] = 10;}
 8011250:	4b90      	ldr	r3, [pc, #576]	; (8011494 <TOUCHUPDATE+0x55c>)
 8011252:	220a      	movs	r2, #10
 8011254:	709a      	strb	r2, [r3, #2]
 8011256:	e002      	b.n	801125e <TOUCHUPDATE+0x326>
		    	if 		(Encoder1.Color == GUI_LIGHTGRAY)	{aTxBuffer[2] = 0;}
 8011258:	4b8e      	ldr	r3, [pc, #568]	; (8011494 <TOUCHUPDATE+0x55c>)
 801125a:	2200      	movs	r2, #0
 801125c:	709a      	strb	r2, [r3, #2]
		    	if 		(Encoder2.Color == GUI_LIGHTGRAY)	{aTxBuffer[1] = 0;}
 801125e:	4b8e      	ldr	r3, [pc, #568]	; (8011498 <TOUCHUPDATE+0x560>)
 8011260:	691b      	ldr	r3, [r3, #16]
 8011262:	4a8a      	ldr	r2, [pc, #552]	; (801148c <TOUCHUPDATE+0x554>)
 8011264:	4293      	cmp	r3, r2
 8011266:	d036      	beq.n	80112d6 <TOUCHUPDATE+0x39e>
		    	else if (Encoder2.Color == GUI_MAGENTA)		{aTxBuffer[1] = 1;}
 8011268:	f46f 427f 	mvn.w	r2, #65280	; 0xff00
 801126c:	4293      	cmp	r3, r2
 801126e:	f000 80b7 	beq.w	80113e0 <TOUCHUPDATE+0x4a8>
		    	else if (Encoder2.Color == GUI_ORANGE)		{aTxBuffer[1] = 2;}
 8011272:	f513 4fb6 	cmn.w	r3, #23296	; 0x5b00
 8011276:	f000 80b7 	beq.w	80113e8 <TOUCHUPDATE+0x4b0>
		    	else if (Encoder2.Color == GUI_CYAN)		{aTxBuffer[1] = 3;}
 801127a:	f46f 027f 	mvn.w	r2, #16711680	; 0xff0000
 801127e:	4293      	cmp	r3, r2
 8011280:	f000 80b6 	beq.w	80113f0 <TOUCHUPDATE+0x4b8>
		    	else if (Encoder2.Color == GUI_LIGHTYELLOW)	{aTxBuffer[1] = 4;}
 8011284:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8011288:	f000 80b6 	beq.w	80113f8 <TOUCHUPDATE+0x4c0>
		    	else if (Encoder2.Color == GUI_LIGHTGREEN)	{aTxBuffer[1] = 5;}
 801128c:	f06f 127f 	mvn.w	r2, #8323199	; 0x7f007f
 8011290:	4293      	cmp	r3, r2
 8011292:	f000 80b5 	beq.w	8011400 <TOUCHUPDATE+0x4c8>
		    	else if (Encoder2.Color == GUI_LIGHTBLUE)	{aTxBuffer[1] = 6;}
 8011296:	4a7e      	ldr	r2, [pc, #504]	; (8011490 <TOUCHUPDATE+0x558>)
 8011298:	4293      	cmp	r3, r2
 801129a:	f000 80b5 	beq.w	8011408 <TOUCHUPDATE+0x4d0>
		    	else								    	{aTxBuffer[1] = 10;}
 801129e:	4b7d      	ldr	r3, [pc, #500]	; (8011494 <TOUCHUPDATE+0x55c>)
 80112a0:	220a      	movs	r2, #10
 80112a2:	705a      	strb	r2, [r3, #1]
 80112a4:	e01a      	b.n	80112dc <TOUCHUPDATE+0x3a4>
		    	else if (Encoder1.Color == GUI_MAGENTA)		{aTxBuffer[2] = 1;}
 80112a6:	4b7b      	ldr	r3, [pc, #492]	; (8011494 <TOUCHUPDATE+0x55c>)
 80112a8:	2201      	movs	r2, #1
 80112aa:	709a      	strb	r2, [r3, #2]
 80112ac:	e7d7      	b.n	801125e <TOUCHUPDATE+0x326>
		    	else if (Encoder1.Color == GUI_ORANGE)		{aTxBuffer[2] = 2;}
 80112ae:	4b79      	ldr	r3, [pc, #484]	; (8011494 <TOUCHUPDATE+0x55c>)
 80112b0:	2202      	movs	r2, #2
 80112b2:	709a      	strb	r2, [r3, #2]
 80112b4:	e7d3      	b.n	801125e <TOUCHUPDATE+0x326>
		    	else if (Encoder1.Color == GUI_CYAN)		{aTxBuffer[2] = 3;}
 80112b6:	4b77      	ldr	r3, [pc, #476]	; (8011494 <TOUCHUPDATE+0x55c>)
 80112b8:	2203      	movs	r2, #3
 80112ba:	709a      	strb	r2, [r3, #2]
 80112bc:	e7cf      	b.n	801125e <TOUCHUPDATE+0x326>
		    	else if (Encoder1.Color == GUI_LIGHTYELLOW)	{aTxBuffer[2] = 4;}
 80112be:	4b75      	ldr	r3, [pc, #468]	; (8011494 <TOUCHUPDATE+0x55c>)
 80112c0:	2204      	movs	r2, #4
 80112c2:	709a      	strb	r2, [r3, #2]
 80112c4:	e7cb      	b.n	801125e <TOUCHUPDATE+0x326>
		    	else if (Encoder1.Color == GUI_LIGHTGREEN)	{aTxBuffer[2] = 5;}
 80112c6:	4b73      	ldr	r3, [pc, #460]	; (8011494 <TOUCHUPDATE+0x55c>)
 80112c8:	2205      	movs	r2, #5
 80112ca:	709a      	strb	r2, [r3, #2]
 80112cc:	e7c7      	b.n	801125e <TOUCHUPDATE+0x326>
		    	else if (Encoder1.Color == GUI_LIGHTBLUE)	{aTxBuffer[2] = 6;}
 80112ce:	4b71      	ldr	r3, [pc, #452]	; (8011494 <TOUCHUPDATE+0x55c>)
 80112d0:	2206      	movs	r2, #6
 80112d2:	709a      	strb	r2, [r3, #2]
 80112d4:	e7c3      	b.n	801125e <TOUCHUPDATE+0x326>
		    	if 		(Encoder2.Color == GUI_LIGHTGRAY)	{aTxBuffer[1] = 0;}
 80112d6:	4b6f      	ldr	r3, [pc, #444]	; (8011494 <TOUCHUPDATE+0x55c>)
 80112d8:	2200      	movs	r2, #0
 80112da:	705a      	strb	r2, [r3, #1]
		    	 HAL_I2C_Master_Transmit(&hi2c1, 50, aTxBuffer,10,10); //Send to LOGO WS2812
 80112dc:	4e6d      	ldr	r6, [pc, #436]	; (8011494 <TOUCHUPDATE+0x55c>)
 80112de:	4d6f      	ldr	r5, [pc, #444]	; (801149c <TOUCHUPDATE+0x564>)
 80112e0:	240a      	movs	r4, #10
 80112e2:	9400      	str	r4, [sp, #0]
 80112e4:	4623      	mov	r3, r4
 80112e6:	4632      	mov	r2, r6
 80112e8:	2132      	movs	r1, #50	; 0x32
 80112ea:	4628      	mov	r0, r5
 80112ec:	f003 f98a 	bl	8014604 <HAL_I2C_Master_Transmit>
				 HAL_I2C_Master_Transmit(&hi2c1, 30, aTxBuffer,10,10);
 80112f0:	9400      	str	r4, [sp, #0]
 80112f2:	4623      	mov	r3, r4
 80112f4:	4632      	mov	r2, r6
 80112f6:	211e      	movs	r1, #30
 80112f8:	4628      	mov	r0, r5
 80112fa:	f003 f983 	bl	8014604 <HAL_I2C_Master_Transmit>
				 HAL_I2C_Master_Receive(&hi2c1, 30, aRxBuffer,10,10);
 80112fe:	4e68      	ldr	r6, [pc, #416]	; (80114a0 <TOUCHUPDATE+0x568>)
 8011300:	9400      	str	r4, [sp, #0]
 8011302:	4623      	mov	r3, r4
 8011304:	4632      	mov	r2, r6
 8011306:	211e      	movs	r1, #30
 8011308:	4628      	mov	r0, r5
 801130a:	f003 fa35 	bl	8014778 <HAL_I2C_Master_Receive>
				 if(aRxBuffer[6]!=255) {buttonstateLeft=aRxBuffer[6];}
 801130e:	79b2      	ldrb	r2, [r6, #6]
 8011310:	2aff      	cmp	r2, #255	; 0xff
 8011312:	d001      	beq.n	8011318 <TOUCHUPDATE+0x3e0>
 8011314:	4b63      	ldr	r3, [pc, #396]	; (80114a4 <TOUCHUPDATE+0x56c>)
 8011316:	701a      	strb	r2, [r3, #0]
				 if(aRxBuffer[7]!=255){
 8011318:	4b61      	ldr	r3, [pc, #388]	; (80114a0 <TOUCHUPDATE+0x568>)
 801131a:	79db      	ldrb	r3, [r3, #7]
 801131c:	2bff      	cmp	r3, #255	; 0xff
 801131e:	d006      	beq.n	801132e <TOUCHUPDATE+0x3f6>
					 Encoder1.value=aRxBuffer[7];
 8011320:	ee07 3a90 	vmov	s15, r3
 8011324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011328:	4b57      	ldr	r3, [pc, #348]	; (8011488 <TOUCHUPDATE+0x550>)
 801132a:	edc3 7a00 	vstr	s15, [r3]
				 if(aRxBuffer[9]!=255){
 801132e:	4b5c      	ldr	r3, [pc, #368]	; (80114a0 <TOUCHUPDATE+0x568>)
 8011330:	7a5b      	ldrb	r3, [r3, #9]
 8011332:	2bff      	cmp	r3, #255	; 0xff
 8011334:	d006      	beq.n	8011344 <TOUCHUPDATE+0x40c>
					 Encoder2.value=aRxBuffer[9];
 8011336:	ee07 3a90 	vmov	s15, r3
 801133a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801133e:	4b56      	ldr	r3, [pc, #344]	; (8011498 <TOUCHUPDATE+0x560>)
 8011340:	edc3 7a00 	vstr	s15, [r3]
				 Encoder1.buttonState= !((aRxBuffer[6]>>2) & 0x01);
 8011344:	0893      	lsrs	r3, r2, #2
 8011346:	f083 0301 	eor.w	r3, r3, #1
 801134a:	f003 0301 	and.w	r3, r3, #1
 801134e:	494e      	ldr	r1, [pc, #312]	; (8011488 <TOUCHUPDATE+0x550>)
 8011350:	608b      	str	r3, [r1, #8]
				 Encoder2.buttonState= !(aRxBuffer[6] & 0x01);
 8011352:	f082 0201 	eor.w	r2, r2, #1
 8011356:	f002 0201 	and.w	r2, r2, #1
 801135a:	494f      	ldr	r1, [pc, #316]	; (8011498 <TOUCHUPDATE+0x560>)
 801135c:	608a      	str	r2, [r1, #8]
				 if(Encoder1.buttonState&&DoubleClick1<2&&!high1){
 801135e:	b11b      	cbz	r3, 8011368 <TOUCHUPDATE+0x430>
 8011360:	4947      	ldr	r1, [pc, #284]	; (8011480 <TOUCHUPDATE+0x548>)
 8011362:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8011364:	2901      	cmp	r1, #1
 8011366:	dd53      	ble.n	8011410 <TOUCHUPDATE+0x4d8>
				 if(!Encoder1.buttonState){
 8011368:	b913      	cbnz	r3, 8011370 <TOUCHUPDATE+0x438>
					 high1 = 0;
 801136a:	4b45      	ldr	r3, [pc, #276]	; (8011480 <TOUCHUPDATE+0x548>)
 801136c:	2100      	movs	r1, #0
 801136e:	6299      	str	r1, [r3, #40]	; 0x28
				 if (DoubleClick1 == 2 && intervall1 < 20){
 8011370:	4b43      	ldr	r3, [pc, #268]	; (8011480 <TOUCHUPDATE+0x548>)
 8011372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011374:	2b02      	cmp	r3, #2
 8011376:	d057      	beq.n	8011428 <TOUCHUPDATE+0x4f0>
				 if (Encoder1.doubleclickEvent && intervall1 == 20){
 8011378:	4b43      	ldr	r3, [pc, #268]	; (8011488 <TOUCHUPDATE+0x550>)
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	b11b      	cbz	r3, 8011386 <TOUCHUPDATE+0x44e>
 801137e:	4b40      	ldr	r3, [pc, #256]	; (8011480 <TOUCHUPDATE+0x548>)
 8011380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011382:	2b14      	cmp	r3, #20
 8011384:	d05c      	beq.n	8011440 <TOUCHUPDATE+0x508>
				 intervall1++;
 8011386:	493e      	ldr	r1, [pc, #248]	; (8011480 <TOUCHUPDATE+0x548>)
 8011388:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801138a:	3301      	adds	r3, #1
 801138c:	62cb      	str	r3, [r1, #44]	; 0x2c
				 if(intervall1 >= 20){intervall1 = 20;DoubleClick1 = 0;}
 801138e:	2b13      	cmp	r3, #19
 8011390:	dd04      	ble.n	801139c <TOUCHUPDATE+0x464>
 8011392:	460b      	mov	r3, r1
 8011394:	2114      	movs	r1, #20
 8011396:	62d9      	str	r1, [r3, #44]	; 0x2c
 8011398:	2100      	movs	r1, #0
 801139a:	6259      	str	r1, [r3, #36]	; 0x24
				 if(Encoder2.buttonState&&DoubleClick2<2&&!high2){
 801139c:	b11a      	cbz	r2, 80113a6 <TOUCHUPDATE+0x46e>
 801139e:	4b38      	ldr	r3, [pc, #224]	; (8011480 <TOUCHUPDATE+0x548>)
 80113a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113a2:	2b01      	cmp	r3, #1
 80113a4:	dd50      	ble.n	8011448 <TOUCHUPDATE+0x510>
				 if(!Encoder2.buttonState){
 80113a6:	b90a      	cbnz	r2, 80113ac <TOUCHUPDATE+0x474>
					 high2 = 0;
 80113a8:	4b35      	ldr	r3, [pc, #212]	; (8011480 <TOUCHUPDATE+0x548>)
 80113aa:	635a      	str	r2, [r3, #52]	; 0x34
				 if (DoubleClick2 == 2 && intervall2 < 20){
 80113ac:	4b34      	ldr	r3, [pc, #208]	; (8011480 <TOUCHUPDATE+0x548>)
 80113ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113b0:	2b02      	cmp	r3, #2
 80113b2:	d055      	beq.n	8011460 <TOUCHUPDATE+0x528>
				 if (Encoder2.doubleclickEvent && intervall2 == 20){
 80113b4:	4b38      	ldr	r3, [pc, #224]	; (8011498 <TOUCHUPDATE+0x560>)
 80113b6:	68db      	ldr	r3, [r3, #12]
 80113b8:	b11b      	cbz	r3, 80113c2 <TOUCHUPDATE+0x48a>
 80113ba:	4b31      	ldr	r3, [pc, #196]	; (8011480 <TOUCHUPDATE+0x548>)
 80113bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113be:	2b14      	cmp	r3, #20
 80113c0:	d05a      	beq.n	8011478 <TOUCHUPDATE+0x540>
				 intervall2++;
 80113c2:	4a2f      	ldr	r2, [pc, #188]	; (8011480 <TOUCHUPDATE+0x548>)
 80113c4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80113c6:	3301      	adds	r3, #1
 80113c8:	6393      	str	r3, [r2, #56]	; 0x38
				 if(intervall2 >= 20){intervall2 = 20;DoubleClick2 = 0;}
 80113ca:	2b13      	cmp	r3, #19
 80113cc:	dd04      	ble.n	80113d8 <TOUCHUPDATE+0x4a0>
 80113ce:	4613      	mov	r3, r2
 80113d0:	2214      	movs	r2, #20
 80113d2:	639a      	str	r2, [r3, #56]	; 0x38
 80113d4:	2200      	movs	r2, #0
 80113d6:	631a      	str	r2, [r3, #48]	; 0x30
		    	 count=3;
 80113d8:	4b2e      	ldr	r3, [pc, #184]	; (8011494 <TOUCHUPDATE+0x55c>)
 80113da:	2203      	movs	r2, #3
 80113dc:	60da      	str	r2, [r3, #12]
		     	 break;
 80113de:	e5c5      	b.n	8010f6c <TOUCHUPDATE+0x34>
		    	else if (Encoder2.Color == GUI_MAGENTA)		{aTxBuffer[1] = 1;}
 80113e0:	4b2c      	ldr	r3, [pc, #176]	; (8011494 <TOUCHUPDATE+0x55c>)
 80113e2:	2201      	movs	r2, #1
 80113e4:	705a      	strb	r2, [r3, #1]
 80113e6:	e779      	b.n	80112dc <TOUCHUPDATE+0x3a4>
		    	else if (Encoder2.Color == GUI_ORANGE)		{aTxBuffer[1] = 2;}
 80113e8:	4b2a      	ldr	r3, [pc, #168]	; (8011494 <TOUCHUPDATE+0x55c>)
 80113ea:	2202      	movs	r2, #2
 80113ec:	705a      	strb	r2, [r3, #1]
 80113ee:	e775      	b.n	80112dc <TOUCHUPDATE+0x3a4>
		    	else if (Encoder2.Color == GUI_CYAN)		{aTxBuffer[1] = 3;}
 80113f0:	4b28      	ldr	r3, [pc, #160]	; (8011494 <TOUCHUPDATE+0x55c>)
 80113f2:	2203      	movs	r2, #3
 80113f4:	705a      	strb	r2, [r3, #1]
 80113f6:	e771      	b.n	80112dc <TOUCHUPDATE+0x3a4>
		    	else if (Encoder2.Color == GUI_LIGHTYELLOW)	{aTxBuffer[1] = 4;}
 80113f8:	4b26      	ldr	r3, [pc, #152]	; (8011494 <TOUCHUPDATE+0x55c>)
 80113fa:	2204      	movs	r2, #4
 80113fc:	705a      	strb	r2, [r3, #1]
 80113fe:	e76d      	b.n	80112dc <TOUCHUPDATE+0x3a4>
		    	else if (Encoder2.Color == GUI_LIGHTGREEN)	{aTxBuffer[1] = 5;}
 8011400:	4b24      	ldr	r3, [pc, #144]	; (8011494 <TOUCHUPDATE+0x55c>)
 8011402:	2205      	movs	r2, #5
 8011404:	705a      	strb	r2, [r3, #1]
 8011406:	e769      	b.n	80112dc <TOUCHUPDATE+0x3a4>
		    	else if (Encoder2.Color == GUI_LIGHTBLUE)	{aTxBuffer[1] = 6;}
 8011408:	4b22      	ldr	r3, [pc, #136]	; (8011494 <TOUCHUPDATE+0x55c>)
 801140a:	2206      	movs	r2, #6
 801140c:	705a      	strb	r2, [r3, #1]
 801140e:	e765      	b.n	80112dc <TOUCHUPDATE+0x3a4>
				 if(Encoder1.buttonState&&DoubleClick1<2&&!high1){
 8011410:	481b      	ldr	r0, [pc, #108]	; (8011480 <TOUCHUPDATE+0x548>)
 8011412:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8011414:	2800      	cmp	r0, #0
 8011416:	d1a7      	bne.n	8011368 <TOUCHUPDATE+0x430>
					 DoubleClick1 = DoubleClick1+1;
 8011418:	3101      	adds	r1, #1
 801141a:	4819      	ldr	r0, [pc, #100]	; (8011480 <TOUCHUPDATE+0x548>)
 801141c:	6241      	str	r1, [r0, #36]	; 0x24
					 high1 = 1;
 801141e:	2101      	movs	r1, #1
 8011420:	6281      	str	r1, [r0, #40]	; 0x28
					 intervall1 = 0;
 8011422:	2100      	movs	r1, #0
 8011424:	62c1      	str	r1, [r0, #44]	; 0x2c
 8011426:	e79f      	b.n	8011368 <TOUCHUPDATE+0x430>
				 if (DoubleClick1 == 2 && intervall1 < 20){
 8011428:	4b15      	ldr	r3, [pc, #84]	; (8011480 <TOUCHUPDATE+0x548>)
 801142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801142c:	2b13      	cmp	r3, #19
 801142e:	dca3      	bgt.n	8011378 <TOUCHUPDATE+0x440>
					 DoubleClick1 = 0;
 8011430:	4b13      	ldr	r3, [pc, #76]	; (8011480 <TOUCHUPDATE+0x548>)
 8011432:	2100      	movs	r1, #0
 8011434:	6259      	str	r1, [r3, #36]	; 0x24
					 Encoder1.doubleclickEvent = 1;
 8011436:	4814      	ldr	r0, [pc, #80]	; (8011488 <TOUCHUPDATE+0x550>)
 8011438:	2401      	movs	r4, #1
 801143a:	60c4      	str	r4, [r0, #12]
					 intervall1=0;
 801143c:	62d9      	str	r1, [r3, #44]	; 0x2c
 801143e:	e79b      	b.n	8011378 <TOUCHUPDATE+0x440>
					 Encoder1.doubleclickEvent = 0;
 8011440:	4b11      	ldr	r3, [pc, #68]	; (8011488 <TOUCHUPDATE+0x550>)
 8011442:	2100      	movs	r1, #0
 8011444:	60d9      	str	r1, [r3, #12]
 8011446:	e79e      	b.n	8011386 <TOUCHUPDATE+0x44e>
				 if(Encoder2.buttonState&&DoubleClick2<2&&!high2){
 8011448:	490d      	ldr	r1, [pc, #52]	; (8011480 <TOUCHUPDATE+0x548>)
 801144a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801144c:	2900      	cmp	r1, #0
 801144e:	d1aa      	bne.n	80113a6 <TOUCHUPDATE+0x46e>
					 DoubleClick2 = DoubleClick2+1;
 8011450:	3301      	adds	r3, #1
 8011452:	490b      	ldr	r1, [pc, #44]	; (8011480 <TOUCHUPDATE+0x548>)
 8011454:	630b      	str	r3, [r1, #48]	; 0x30
					 high2 = 1;
 8011456:	2301      	movs	r3, #1
 8011458:	634b      	str	r3, [r1, #52]	; 0x34
					 intervall2 = 0;
 801145a:	2300      	movs	r3, #0
 801145c:	638b      	str	r3, [r1, #56]	; 0x38
 801145e:	e7a2      	b.n	80113a6 <TOUCHUPDATE+0x46e>
				 if (DoubleClick2 == 2 && intervall2 < 20){
 8011460:	4b07      	ldr	r3, [pc, #28]	; (8011480 <TOUCHUPDATE+0x548>)
 8011462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011464:	2b13      	cmp	r3, #19
 8011466:	dca5      	bgt.n	80113b4 <TOUCHUPDATE+0x47c>
					 DoubleClick2 = 0;
 8011468:	4b05      	ldr	r3, [pc, #20]	; (8011480 <TOUCHUPDATE+0x548>)
 801146a:	2200      	movs	r2, #0
 801146c:	631a      	str	r2, [r3, #48]	; 0x30
					 Encoder2.doubleclickEvent = 1;
 801146e:	490a      	ldr	r1, [pc, #40]	; (8011498 <TOUCHUPDATE+0x560>)
 8011470:	2001      	movs	r0, #1
 8011472:	60c8      	str	r0, [r1, #12]
					 intervall2=0;
 8011474:	639a      	str	r2, [r3, #56]	; 0x38
 8011476:	e79d      	b.n	80113b4 <TOUCHUPDATE+0x47c>
					 Encoder2.doubleclickEvent = 0;
 8011478:	4b07      	ldr	r3, [pc, #28]	; (8011498 <TOUCHUPDATE+0x560>)
 801147a:	2200      	movs	r2, #0
 801147c:	60da      	str	r2, [r3, #12]
 801147e:	e7a0      	b.n	80113c2 <TOUCHUPDATE+0x48a>
 8011480:	20000248 	.word	0x20000248
 8011484:	2002e70c 	.word	0x2002e70c
 8011488:	2002eef4 	.word	0x2002eef4
 801148c:	ffd3d3d3 	.word	0xffd3d3d3
 8011490:	ff8080ff 	.word	0xff8080ff
 8011494:	20000040 	.word	0x20000040
 8011498:	2002ed4c 	.word	0x2002ed4c
 801149c:	2002f1ac 	.word	0x2002f1ac
 80114a0:	2002fa6c 	.word	0x2002fa6c
 80114a4:	2002fa4c 	.word	0x2002fa4c
		    	HAL_I2C_Master_Transmit(&hi2c1, 50, aTxBuffer,10,10); //Send to LOGO WS2812
 80114a8:	4c06      	ldr	r4, [pc, #24]	; (80114c4 <TOUCHUPDATE+0x58c>)
 80114aa:	230a      	movs	r3, #10
 80114ac:	9300      	str	r3, [sp, #0]
 80114ae:	4622      	mov	r2, r4
 80114b0:	2132      	movs	r1, #50	; 0x32
 80114b2:	4805      	ldr	r0, [pc, #20]	; (80114c8 <TOUCHUPDATE+0x590>)
 80114b4:	f003 f8a6 	bl	8014604 <HAL_I2C_Master_Transmit>
		    	BSP_Pointer_Update();
 80114b8:	f7ff fcf4 	bl	8010ea4 <BSP_Pointer_Update>
		     	count=1;
 80114bc:	2301      	movs	r3, #1
 80114be:	60e3      	str	r3, [r4, #12]
		        break;
 80114c0:	e554      	b.n	8010f6c <TOUCHUPDATE+0x34>
 80114c2:	bf00      	nop
 80114c4:	20000040 	.word	0x20000040
 80114c8:	2002f1ac 	.word	0x2002f1ac

080114cc <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80114cc:	4770      	bx	lr

080114ce <vApplicationStackOverflowHook>:
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80114ce:	4770      	bx	lr

080114d0 <vApplicationMallocFailedHook>:
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80114d0:	4770      	bx	lr
	...

080114d4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80114d4:	4b03      	ldr	r3, [pc, #12]	; (80114e4 <vApplicationGetIdleTaskMemory+0x10>)
 80114d6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80114d8:	3358      	adds	r3, #88	; 0x58
 80114da:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80114dc:	2380      	movs	r3, #128	; 0x80
 80114de:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 80114e0:	4770      	bx	lr
 80114e2:	bf00      	nop
 80114e4:	20000298 	.word	0x20000298

080114e8 <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80114e8:	4b05      	ldr	r3, [pc, #20]	; (8011500 <MX_SDIO_SD_Init+0x18>)
 80114ea:	4a06      	ldr	r2, [pc, #24]	; (8011504 <MX_SDIO_SD_Init+0x1c>)
 80114ec:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80114ee:	2200      	movs	r2, #0
 80114f0:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80114f2:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80114f4:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80114f6:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80114f8:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80114fa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80114fc:	4770      	bx	lr
 80114fe:	bf00      	nop
 8011500:	20030014 	.word	0x20030014
 8011504:	40012c00 	.word	0x40012c00

08011508 <VectorBase_Config>:
   * c-startup code.
   */
  extern const unsigned long g_pfnVectors[];

  /* Remap the vector table to where the vector table is located for this program. */
  SCB->VTOR = (unsigned long)&g_pfnVectors[0];
 8011508:	4a01      	ldr	r2, [pc, #4]	; (8011510 <VectorBase_Config+0x8>)
 801150a:	4b02      	ldr	r3, [pc, #8]	; (8011514 <VectorBase_Config+0xc>)
 801150c:	609a      	str	r2, [r3, #8]
}
 801150e:	4770      	bx	lr
 8011510:	08010000 	.word	0x08010000
 8011514:	e000ed00 	.word	0xe000ed00

08011518 <MX_GPIO_Init>:
{
 8011518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801151c:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801151e:	2400      	movs	r4, #0
 8011520:	940b      	str	r4, [sp, #44]	; 0x2c
 8011522:	940c      	str	r4, [sp, #48]	; 0x30
 8011524:	940d      	str	r4, [sp, #52]	; 0x34
 8011526:	940e      	str	r4, [sp, #56]	; 0x38
 8011528:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801152a:	9400      	str	r4, [sp, #0]
 801152c:	4b8c      	ldr	r3, [pc, #560]	; (8011760 <MX_GPIO_Init+0x248>)
 801152e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011530:	f042 0210 	orr.w	r2, r2, #16
 8011534:	631a      	str	r2, [r3, #48]	; 0x30
 8011536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011538:	f002 0210 	and.w	r2, r2, #16
 801153c:	9200      	str	r2, [sp, #0]
 801153e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8011540:	9401      	str	r4, [sp, #4]
 8011542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011548:	631a      	str	r2, [r3, #48]	; 0x30
 801154a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801154c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8011550:	9201      	str	r2, [sp, #4]
 8011552:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011554:	9402      	str	r4, [sp, #8]
 8011556:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011558:	f042 0202 	orr.w	r2, r2, #2
 801155c:	631a      	str	r2, [r3, #48]	; 0x30
 801155e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011560:	f002 0202 	and.w	r2, r2, #2
 8011564:	9202      	str	r2, [sp, #8]
 8011566:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8011568:	9403      	str	r4, [sp, #12]
 801156a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801156c:	f042 0204 	orr.w	r2, r2, #4
 8011570:	631a      	str	r2, [r3, #48]	; 0x30
 8011572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011574:	f002 0204 	and.w	r2, r2, #4
 8011578:	9203      	str	r2, [sp, #12]
 801157a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801157c:	9404      	str	r4, [sp, #16]
 801157e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011580:	f042 0201 	orr.w	r2, r2, #1
 8011584:	631a      	str	r2, [r3, #48]	; 0x30
 8011586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011588:	f002 0201 	and.w	r2, r2, #1
 801158c:	9204      	str	r2, [sp, #16]
 801158e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8011590:	9405      	str	r4, [sp, #20]
 8011592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011594:	f042 0208 	orr.w	r2, r2, #8
 8011598:	631a      	str	r2, [r3, #48]	; 0x30
 801159a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801159c:	f002 0208 	and.w	r2, r2, #8
 80115a0:	9205      	str	r2, [sp, #20]
 80115a2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80115a4:	9406      	str	r4, [sp, #24]
 80115a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80115a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80115ac:	631a      	str	r2, [r3, #48]	; 0x30
 80115ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80115b0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80115b4:	9206      	str	r2, [sp, #24]
 80115b6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80115b8:	9407      	str	r4, [sp, #28]
 80115ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80115bc:	f042 0220 	orr.w	r2, r2, #32
 80115c0:	631a      	str	r2, [r3, #48]	; 0x30
 80115c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80115c4:	f002 0220 	and.w	r2, r2, #32
 80115c8:	9207      	str	r2, [sp, #28]
 80115ca:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80115cc:	9408      	str	r4, [sp, #32]
 80115ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80115d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80115d4:	631a      	str	r2, [r3, #48]	; 0x30
 80115d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80115d8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80115dc:	9208      	str	r2, [sp, #32]
 80115de:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80115e0:	9409      	str	r4, [sp, #36]	; 0x24
 80115e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80115e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80115e8:	631a      	str	r2, [r3, #48]	; 0x30
 80115ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80115ec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80115f0:	9209      	str	r2, [sp, #36]	; 0x24
 80115f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80115f4:	940a      	str	r4, [sp, #40]	; 0x28
 80115f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80115f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80115fc:	631a      	str	r2, [r3, #48]	; 0x30
 80115fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011604:	930a      	str	r3, [sp, #40]	; 0x28
 8011606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 8011608:	4e56      	ldr	r6, [pc, #344]	; (8011764 <MX_GPIO_Init+0x24c>)
 801160a:	4622      	mov	r2, r4
 801160c:	210c      	movs	r1, #12
 801160e:	4630      	mov	r0, r6
 8011610:	f002 fbb7 	bl	8013d82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8011614:	4622      	mov	r2, r4
 8011616:	2130      	movs	r1, #48	; 0x30
 8011618:	4853      	ldr	r0, [pc, #332]	; (8011768 <MX_GPIO_Init+0x250>)
 801161a:	f002 fbb2 	bl	8013d82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 801161e:	4622      	mov	r2, r4
 8011620:	2108      	movs	r1, #8
 8011622:	4852      	ldr	r0, [pc, #328]	; (801176c <MX_GPIO_Init+0x254>)
 8011624:	f002 fbad 	bl	8013d82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8011628:	4622      	mov	r2, r4
 801162a:	2140      	movs	r1, #64	; 0x40
 801162c:	4850      	ldr	r0, [pc, #320]	; (8011770 <MX_GPIO_Init+0x258>)
 801162e:	f002 fba8 	bl	8013d82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8011632:	4622      	mov	r2, r4
 8011634:	2105      	movs	r1, #5
 8011636:	484f      	ldr	r0, [pc, #316]	; (8011774 <MX_GPIO_Init+0x25c>)
 8011638:	f002 fba3 	bl	8013d82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 801163c:	4622      	mov	r2, r4
 801163e:	2180      	movs	r1, #128	; 0x80
 8011640:	484d      	ldr	r0, [pc, #308]	; (8011778 <MX_GPIO_Init+0x260>)
 8011642:	f002 fb9e 	bl	8013d82 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8011646:	f8df b138 	ldr.w	fp, [pc, #312]	; 8011780 <MX_GPIO_Init+0x268>
 801164a:	4622      	mov	r2, r4
 801164c:	2108      	movs	r1, #8
 801164e:	4658      	mov	r0, fp
 8011650:	f002 fb97 	bl	8013d82 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8011654:	230c      	movs	r3, #12
 8011656:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011658:	2501      	movs	r5, #1
 801165a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801165c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801165e:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8011660:	a90b      	add	r1, sp, #44	; 0x2c
 8011662:	4630      	mov	r0, r6
 8011664:	f002 f9f6 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8011668:	2608      	movs	r6, #8
 801166a:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801166c:	f04f 0802 	mov.w	r8, #2
 8011670:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011674:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011676:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8011678:	2306      	movs	r3, #6
 801167a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 801167c:	a90b      	add	r1, sp, #44	; 0x2c
 801167e:	483d      	ldr	r0, [pc, #244]	; (8011774 <MX_GPIO_Init+0x25c>)
 8011680:	f002 f9e8 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8011684:	f04f 0980 	mov.w	r9, #128	; 0x80
 8011688:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801168c:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8011784 <MX_GPIO_Init+0x26c>
 8011690:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011694:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8011696:	a90b      	add	r1, sp, #44	; 0x2c
 8011698:	4836      	ldr	r0, [pc, #216]	; (8011774 <MX_GPIO_Init+0x25c>)
 801169a:	f002 f9db 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 801169e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80116a2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80116a4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80116a8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80116aa:	2303      	movs	r3, #3
 80116ac:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80116ae:	230a      	movs	r3, #10
 80116b0:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80116b2:	a90b      	add	r1, sp, #44	; 0x2c
 80116b4:	4658      	mov	r0, fp
 80116b6:	f002 f9cd 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80116ba:	2330      	movs	r3, #48	; 0x30
 80116bc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80116be:	2711      	movs	r7, #17
 80116c0:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80116c2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80116c4:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80116c6:	a90b      	add	r1, sp, #44	; 0x2c
 80116c8:	4827      	ldr	r0, [pc, #156]	; (8011768 <MX_GPIO_Init+0x250>)
 80116ca:	f002 f9c3 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED4_Pin;
 80116ce:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80116d0:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80116d2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80116d4:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80116d6:	a90b      	add	r1, sp, #44	; 0x2c
 80116d8:	4824      	ldr	r0, [pc, #144]	; (801176c <MX_GPIO_Init+0x254>)
 80116da:	f002 f9bb 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 80116de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80116e2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80116e4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80116e8:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 80116ea:	a90b      	add	r1, sp, #44	; 0x2c
 80116ec:	4658      	mov	r0, fp
 80116ee:	f002 f9b1 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED1_Pin;
 80116f2:	2340      	movs	r3, #64	; 0x40
 80116f4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80116f6:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80116f8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80116fa:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80116fc:	a90b      	add	r1, sp, #44	; 0x2c
 80116fe:	481c      	ldr	r0, [pc, #112]	; (8011770 <MX_GPIO_Init+0x258>)
 8011700:	f002 f9a8 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 8011704:	2305      	movs	r3, #5
 8011706:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8011708:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801170a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801170c:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801170e:	a90b      	add	r1, sp, #44	; 0x2c
 8011710:	4818      	ldr	r0, [pc, #96]	; (8011774 <MX_GPIO_Init+0x25c>)
 8011712:	f002 f99f 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8011716:	2304      	movs	r3, #4
 8011718:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801171a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801171c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 801171e:	a90b      	add	r1, sp, #44	; 0x2c
 8011720:	4813      	ldr	r0, [pc, #76]	; (8011770 <MX_GPIO_Init+0x258>)
 8011722:	f002 f997 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8011726:	2320      	movs	r3, #32
 8011728:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801172a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801172e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8011730:	a90b      	add	r1, sp, #44	; 0x2c
 8011732:	4812      	ldr	r0, [pc, #72]	; (801177c <MX_GPIO_Init+0x264>)
 8011734:	f002 f98e 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8011738:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801173c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801173e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011740:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8011742:	a90b      	add	r1, sp, #44	; 0x2c
 8011744:	480c      	ldr	r0, [pc, #48]	; (8011778 <MX_GPIO_Init+0x260>)
 8011746:	f002 f985 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 801174a:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801174c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801174e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011750:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8011752:	a90b      	add	r1, sp, #44	; 0x2c
 8011754:	4658      	mov	r0, fp
 8011756:	f002 f97d 	bl	8013a54 <HAL_GPIO_Init>
}
 801175a:	b011      	add	sp, #68	; 0x44
 801175c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011760:	40023800 	.word	0x40023800
 8011764:	40021000 	.word	0x40021000
 8011768:	40020c00 	.word	0x40020c00
 801176c:	40022800 	.word	0x40022800
 8011770:	40021800 	.word	0x40021800
 8011774:	40020400 	.word	0x40020400
 8011778:	40021c00 	.word	0x40021c00
 801177c:	40022400 	.word	0x40022400
 8011780:	40020000 	.word	0x40020000
 8011784:	10110000 	.word	0x10110000

08011788 <MX_DMA_Init>:
{
 8011788:	b510      	push	{r4, lr}
 801178a:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 801178c:	2400      	movs	r4, #0
 801178e:	9401      	str	r4, [sp, #4]
 8011790:	4b0d      	ldr	r3, [pc, #52]	; (80117c8 <MX_DMA_Init+0x40>)
 8011792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011794:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8011798:	631a      	str	r2, [r3, #48]	; 0x30
 801179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801179c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80117a0:	9301      	str	r3, [sp, #4]
 80117a2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80117a4:	4622      	mov	r2, r4
 80117a6:	2105      	movs	r1, #5
 80117a8:	2039      	movs	r0, #57	; 0x39
 80117aa:	f001 f967 	bl	8012a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80117ae:	2039      	movs	r0, #57	; 0x39
 80117b0:	f001 f998 	bl	8012ae4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80117b4:	4622      	mov	r2, r4
 80117b6:	2105      	movs	r1, #5
 80117b8:	2045      	movs	r0, #69	; 0x45
 80117ba:	f001 f95f 	bl	8012a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80117be:	2045      	movs	r0, #69	; 0x45
 80117c0:	f001 f990 	bl	8012ae4 <HAL_NVIC_EnableIRQ>
}
 80117c4:	b002      	add	sp, #8
 80117c6:	bd10      	pop	{r4, pc}
 80117c8:	40023800 	.word	0x40023800

080117cc <MX_CRC_Init>:
{
 80117cc:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 80117ce:	4803      	ldr	r0, [pc, #12]	; (80117dc <MX_CRC_Init+0x10>)
 80117d0:	4b03      	ldr	r3, [pc, #12]	; (80117e0 <MX_CRC_Init+0x14>)
 80117d2:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80117d4:	f001 f9a6 	bl	8012b24 <HAL_CRC_Init>
}
 80117d8:	bd08      	pop	{r3, pc}
 80117da:	bf00      	nop
 80117dc:	2002febc 	.word	0x2002febc
 80117e0:	40023000 	.word	0x40023000

080117e4 <MX_I2C1_Init>:
{
 80117e4:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80117e6:	4809      	ldr	r0, [pc, #36]	; (801180c <MX_I2C1_Init+0x28>)
 80117e8:	4b09      	ldr	r3, [pc, #36]	; (8011810 <MX_I2C1_Init+0x2c>)
 80117ea:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80117ec:	4b09      	ldr	r3, [pc, #36]	; (8011814 <MX_I2C1_Init+0x30>)
 80117ee:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80117f0:	2300      	movs	r3, #0
 80117f2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80117f4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80117f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80117fa:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80117fc:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80117fe:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011800:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011802:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8011804:	f002 fe0a 	bl	801441c <HAL_I2C_Init>
}
 8011808:	bd08      	pop	{r3, pc}
 801180a:	bf00      	nop
 801180c:	2002f1ac 	.word	0x2002f1ac
 8011810:	40005400 	.word	0x40005400
 8011814:	000186a0 	.word	0x000186a0

08011818 <MX_I2C2_Init>:
{
 8011818:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 801181a:	4809      	ldr	r0, [pc, #36]	; (8011840 <MX_I2C2_Init+0x28>)
 801181c:	4b09      	ldr	r3, [pc, #36]	; (8011844 <MX_I2C2_Init+0x2c>)
 801181e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8011820:	4b09      	ldr	r3, [pc, #36]	; (8011848 <MX_I2C2_Init+0x30>)
 8011822:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8011824:	2300      	movs	r3, #0
 8011826:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8011828:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801182a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801182e:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011830:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8011832:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011834:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8011836:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8011838:	f002 fdf0 	bl	801441c <HAL_I2C_Init>
}
 801183c:	bd08      	pop	{r3, pc}
 801183e:	bf00      	nop
 8011840:	2002fec4 	.word	0x2002fec4
 8011844:	40005800 	.word	0x40005800
 8011848:	000186a0 	.word	0x000186a0

0801184c <MX_QUADSPI_Init>:
{
 801184c:	b508      	push	{r3, lr}
  hqspi.Instance = QUADSPI;
 801184e:	4808      	ldr	r0, [pc, #32]	; (8011870 <MX_QUADSPI_Init+0x24>)
 8011850:	4b08      	ldr	r3, [pc, #32]	; (8011874 <MX_QUADSPI_Init+0x28>)
 8011852:	6003      	str	r3, [r0, #0]
  hqspi.Init.ClockPrescaler = 255;
 8011854:	23ff      	movs	r3, #255	; 0xff
 8011856:	6043      	str	r3, [r0, #4]
  hqspi.Init.FifoThreshold = 1;
 8011858:	2201      	movs	r2, #1
 801185a:	6082      	str	r2, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 801185c:	2300      	movs	r3, #0
 801185e:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 1;
 8011860:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8011862:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8011864:	6183      	str	r3, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8011866:	61c3      	str	r3, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8011868:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 801186a:	f003 fe7f 	bl	801556c <HAL_QSPI_Init>
}
 801186e:	bd08      	pop	{r3, pc}
 8011870:	20030164 	.word	0x20030164
 8011874:	a0001000 	.word	0xa0001000

08011878 <MX_SAI1_Init>:
{
 8011878:	b508      	push	{r3, lr}
  hsai_BlockA1.Instance = SAI1_Block_A;
 801187a:	4811      	ldr	r0, [pc, #68]	; (80118c0 <MX_SAI1_Init+0x48>)
 801187c:	4b11      	ldr	r3, [pc, #68]	; (80118c4 <MX_SAI1_Init+0x4c>)
 801187e:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8011880:	2300      	movs	r3, #0
 8011882:	6343      	str	r3, [r0, #52]	; 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8011884:	6043      	str	r3, [r0, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8011886:	2240      	movs	r2, #64	; 0x40
 8011888:	6382      	str	r2, [r0, #56]	; 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 801188a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 801188c:	6403      	str	r3, [r0, #64]	; 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 801188e:	6083      	str	r3, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8011890:	6103      	str	r3, [r0, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8011892:	6143      	str	r3, [r0, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8011894:	6183      	str	r3, [r0, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8011896:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8011898:	4a0b      	ldr	r2, [pc, #44]	; (80118c8 <MX_SAI1_Init+0x50>)
 801189a:	6202      	str	r2, [r0, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 801189c:	60c3      	str	r3, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 801189e:	6283      	str	r3, [r0, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80118a0:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80118a2:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80118a4:	2208      	movs	r2, #8
 80118a6:	6442      	str	r2, [r0, #68]	; 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80118a8:	2201      	movs	r2, #1
 80118aa:	6482      	str	r2, [r0, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80118ac:	64c3      	str	r3, [r0, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80118ae:	6503      	str	r3, [r0, #80]	; 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80118b0:	6543      	str	r3, [r0, #84]	; 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80118b2:	6583      	str	r3, [r0, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80118b4:	65c3      	str	r3, [r0, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80118b6:	6602      	str	r2, [r0, #96]	; 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80118b8:	6643      	str	r3, [r0, #100]	; 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80118ba:	f004 fb87 	bl	8015fcc <HAL_SAI_Init>
}
 80118be:	bd08      	pop	{r3, pc}
 80118c0:	200300d8 	.word	0x200300d8
 80118c4:	40015804 	.word	0x40015804
 80118c8:	0002ee00 	.word	0x0002ee00

080118cc <MX_TIM1_Init>:
{
 80118cc:	b530      	push	{r4, r5, lr}
 80118ce:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80118d0:	2400      	movs	r4, #0
 80118d2:	9402      	str	r4, [sp, #8]
 80118d4:	9403      	str	r4, [sp, #12]
 80118d6:	9404      	str	r4, [sp, #16]
 80118d8:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80118da:	9400      	str	r4, [sp, #0]
 80118dc:	9401      	str	r4, [sp, #4]
  htim1.Instance = TIM1;
 80118de:	4d0e      	ldr	r5, [pc, #56]	; (8011918 <MX_TIM1_Init+0x4c>)
 80118e0:	4b0e      	ldr	r3, [pc, #56]	; (801191c <MX_TIM1_Init+0x50>)
 80118e2:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 89999;
 80118e4:	4b0e      	ldr	r3, [pc, #56]	; (8011920 <MX_TIM1_Init+0x54>)
 80118e6:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80118e8:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 100000;
 80118ea:	4b0e      	ldr	r3, [pc, #56]	; (8011924 <MX_TIM1_Init+0x58>)
 80118ec:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80118ee:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80118f0:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80118f2:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80118f4:	4628      	mov	r0, r5
 80118f6:	f005 fb8b 	bl	8017010 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80118fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80118fe:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8011900:	a902      	add	r1, sp, #8
 8011902:	4628      	mov	r0, r5
 8011904:	f005 fba9 	bl	801705a <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011908:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801190a:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 801190c:	4669      	mov	r1, sp
 801190e:	4628      	mov	r0, r5
 8011910:	f005 fc10 	bl	8017134 <HAL_TIMEx_MasterConfigSynchronization>
}
 8011914:	b007      	add	sp, #28
 8011916:	bd30      	pop	{r4, r5, pc}
 8011918:	2002ffd4 	.word	0x2002ffd4
 801191c:	40010000 	.word	0x40010000
 8011920:	00015f8f 	.word	0x00015f8f
 8011924:	000186a0 	.word	0x000186a0

08011928 <MX_TIM3_Init>:
{
 8011928:	b530      	push	{r4, r5, lr}
 801192a:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801192c:	2500      	movs	r5, #0
 801192e:	9500      	str	r5, [sp, #0]
 8011930:	9501      	str	r5, [sp, #4]
  htim3.Instance = TIM3;
 8011932:	4c0b      	ldr	r4, [pc, #44]	; (8011960 <MX_TIM3_Init+0x38>)
 8011934:	4b0b      	ldr	r3, [pc, #44]	; (8011964 <MX_TIM3_Init+0x3c>)
 8011936:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 8999;
 8011938:	f242 3327 	movw	r3, #8999	; 0x2327
 801193c:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 801193e:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 499;
 8011940:	f240 13f3 	movw	r3, #499	; 0x1f3
 8011944:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011946:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011948:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 801194a:	4620      	mov	r0, r4
 801194c:	f005 fb60 	bl	8017010 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011950:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011952:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8011954:	4669      	mov	r1, sp
 8011956:	4620      	mov	r0, r4
 8011958:	f005 fbec 	bl	8017134 <HAL_TIMEx_MasterConfigSynchronization>
}
 801195c:	b003      	add	sp, #12
 801195e:	bd30      	pop	{r4, r5, pc}
 8011960:	2002ff18 	.word	0x2002ff18
 8011964:	40000400 	.word	0x40000400

08011968 <MX_TIM4_Init>:
{
 8011968:	b530      	push	{r4, r5, lr}
 801196a:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801196c:	2400      	movs	r4, #0
 801196e:	9402      	str	r4, [sp, #8]
 8011970:	9403      	str	r4, [sp, #12]
 8011972:	9404      	str	r4, [sp, #16]
 8011974:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011976:	9400      	str	r4, [sp, #0]
 8011978:	9401      	str	r4, [sp, #4]
  htim4.Instance = TIM4;
 801197a:	4d0e      	ldr	r5, [pc, #56]	; (80119b4 <MX_TIM4_Init+0x4c>)
 801197c:	4b0e      	ldr	r3, [pc, #56]	; (80119b8 <MX_TIM4_Init+0x50>)
 801197e:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 10000;
 8011980:	f242 7310 	movw	r3, #10000	; 0x2710
 8011984:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011986:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 100000;
 8011988:	4b0c      	ldr	r3, [pc, #48]	; (80119bc <MX_TIM4_Init+0x54>)
 801198a:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801198c:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801198e:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8011990:	4628      	mov	r0, r5
 8011992:	f005 fb3d 	bl	8017010 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801199a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 801199c:	a902      	add	r1, sp, #8
 801199e:	4628      	mov	r0, r5
 80119a0:	f005 fb5b 	bl	801705a <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET  ;
 80119a4:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80119a6:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80119a8:	4669      	mov	r1, sp
 80119aa:	4628      	mov	r0, r5
 80119ac:	f005 fbc2 	bl	8017134 <HAL_TIMEx_MasterConfigSynchronization>
}
 80119b0:	b007      	add	sp, #28
 80119b2:	bd30      	pop	{r4, r5, pc}
 80119b4:	2002fe3c 	.word	0x2002fe3c
 80119b8:	40000800 	.word	0x40000800
 80119bc:	000186a0 	.word	0x000186a0

080119c0 <MX_USART3_UART_Init>:
{
 80119c0:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80119c2:	4808      	ldr	r0, [pc, #32]	; (80119e4 <MX_USART3_UART_Init+0x24>)
 80119c4:	4b08      	ldr	r3, [pc, #32]	; (80119e8 <MX_USART3_UART_Init+0x28>)
 80119c6:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80119c8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80119cc:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80119ce:	2300      	movs	r3, #0
 80119d0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80119d2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80119d4:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80119d6:	220c      	movs	r2, #12
 80119d8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80119da:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80119dc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80119de:	f005 fd13 	bl	8017408 <HAL_UART_Init>
}
 80119e2:	bd08      	pop	{r3, pc}
 80119e4:	2002fe7c 	.word	0x2002fe7c
 80119e8:	40004800 	.word	0x40004800

080119ec <MX_USART6_UART_Init>:
{
 80119ec:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 80119ee:	4808      	ldr	r0, [pc, #32]	; (8011a10 <MX_USART6_UART_Init+0x24>)
 80119f0:	4b08      	ldr	r3, [pc, #32]	; (8011a14 <MX_USART6_UART_Init+0x28>)
 80119f2:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 500000;
 80119f4:	4b08      	ldr	r3, [pc, #32]	; (8011a18 <MX_USART6_UART_Init+0x2c>)
 80119f6:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80119f8:	2300      	movs	r3, #0
 80119fa:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80119fc:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80119fe:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8011a00:	220c      	movs	r2, #12
 8011a02:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011a04:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8011a06:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8011a08:	f005 fcfe 	bl	8017408 <HAL_UART_Init>
}
 8011a0c:	bd08      	pop	{r3, pc}
 8011a0e:	bf00      	nop
 8011a10:	20030098 	.word	0x20030098
 8011a14:	40011400 	.word	0x40011400
 8011a18:	0007a120 	.word	0x0007a120

08011a1c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8011a1c:	b508      	push	{r3, lr}
  /* init code for FATFS */
  MX_FATFS_Init();
 8011a1e:	f006 fae7 	bl	8017ff0 <MX_FATFS_Init>

/* Graphic application */
  GRAPHICS_MainTask();
 8011a22:	f009 fa29 	bl	801ae78 <GRAPHICS_MainTask>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8011a26:	2001      	movs	r0, #1
 8011a28:	f006 fd87 	bl	801853a <osDelay>
 8011a2c:	e7fb      	b.n	8011a26 <StartDefaultTask+0xa>
	...

08011a30 <SystemClock_Config>:
{
 8011a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a34:	b0a4      	sub	sp, #144	; 0x90
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011a36:	2234      	movs	r2, #52	; 0x34
 8011a38:	2100      	movs	r1, #0
 8011a3a:	a817      	add	r0, sp, #92	; 0x5c
 8011a3c:	f01d f84b 	bl	802ead6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011a40:	2400      	movs	r4, #0
 8011a42:	9412      	str	r4, [sp, #72]	; 0x48
 8011a44:	9413      	str	r4, [sp, #76]	; 0x4c
 8011a46:	9414      	str	r4, [sp, #80]	; 0x50
 8011a48:	9415      	str	r4, [sp, #84]	; 0x54
 8011a4a:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011a4c:	223c      	movs	r2, #60	; 0x3c
 8011a4e:	4621      	mov	r1, r4
 8011a50:	a803      	add	r0, sp, #12
 8011a52:	f01d f840 	bl	802ead6 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8011a56:	9401      	str	r4, [sp, #4]
 8011a58:	4b28      	ldr	r3, [pc, #160]	; (8011afc <SystemClock_Config+0xcc>)
 8011a5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011a5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011a60:	641a      	str	r2, [r3, #64]	; 0x40
 8011a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011a68:	9301      	str	r3, [sp, #4]
 8011a6a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8011a6c:	9402      	str	r4, [sp, #8]
 8011a6e:	4b24      	ldr	r3, [pc, #144]	; (8011b00 <SystemClock_Config+0xd0>)
 8011a70:	681a      	ldr	r2, [r3, #0]
 8011a72:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8011a76:	601a      	str	r2, [r3, #0]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8011a7e:	9302      	str	r3, [sp, #8]
 8011a80:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8011a82:	f04f 0801 	mov.w	r8, #1
 8011a86:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8011a8a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8011a8e:	9718      	str	r7, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011a90:	2502      	movs	r5, #2
 8011a92:	951d      	str	r5, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011a94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011a98:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 4;
 8011a9a:	2304      	movs	r3, #4
 8011a9c:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8011a9e:	23b4      	movs	r3, #180	; 0xb4
 8011aa0:	9320      	str	r3, [sp, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8011aa2:	9521      	str	r5, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8011aa4:	2606      	movs	r6, #6
 8011aa6:	9622      	str	r6, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 6;
 8011aa8:	9623      	str	r6, [sp, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8011aaa:	a817      	add	r0, sp, #92	; 0x5c
 8011aac:	f004 f8a4 	bl	8015bf8 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8011ab0:	f003 fcf4 	bl	801549c <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8011ab4:	230f      	movs	r3, #15
 8011ab6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011ab8:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8011aba:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8011abc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8011ac0:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8011ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ac6:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8011ac8:	2105      	movs	r1, #5
 8011aca:	a812      	add	r0, sp, #72	; 0x48
 8011acc:	f003 fe14 	bl	80156f8 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 8011ad0:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8011ad4:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8011ad6:	2390      	movs	r3, #144	; 0x90
 8011ad8:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8011ada:	950a      	str	r5, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8011adc:	9509      	str	r5, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8011ade:	9608      	str	r6, [sp, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8011ae0:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8011ae4:	970d      	str	r7, [sp, #52]	; 0x34
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8011ae6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011aea:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8011aec:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011aee:	a803      	add	r0, sp, #12
 8011af0:	f003 fef6 	bl	80158e0 <HAL_RCCEx_PeriphCLKConfig>
}
 8011af4:	b024      	add	sp, #144	; 0x90
 8011af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011afa:	bf00      	nop
 8011afc:	40023800 	.word	0x40023800
 8011b00:	40007000 	.word	0x40007000

08011b04 <Encoder_Init>:
void Encoder_Init(){
 8011b04:	b510      	push	{r4, lr}
 8011b06:	b082      	sub	sp, #8
	for(int i=0; i<6;i++){
 8011b08:	2400      	movs	r4, #0
 8011b0a:	e00e      	b.n	8011b2a <Encoder_Init+0x26>
		i2c[0]= 0x00;
 8011b0c:	4a29      	ldr	r2, [pc, #164]	; (8011bb4 <Encoder_Init+0xb0>)
 8011b0e:	2300      	movs	r3, #0
 8011b10:	7013      	strb	r3, [r2, #0]
		i2c[1]= 0x80;
 8011b12:	2380      	movs	r3, #128	; 0x80
 8011b14:	7053      	strb	r3, [r2, #1]
		HAL_I2C_Master_Transmit(&hi2c1,EncoderAdr[i], i2c,2,10);
 8011b16:	4b28      	ldr	r3, [pc, #160]	; (8011bb8 <Encoder_Init+0xb4>)
 8011b18:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 8011b1c:	230a      	movs	r3, #10
 8011b1e:	9300      	str	r3, [sp, #0]
 8011b20:	2302      	movs	r3, #2
 8011b22:	4826      	ldr	r0, [pc, #152]	; (8011bbc <Encoder_Init+0xb8>)
 8011b24:	f002 fd6e 	bl	8014604 <HAL_I2C_Master_Transmit>
	for(int i=0; i<6;i++){
 8011b28:	3401      	adds	r4, #1
 8011b2a:	2c05      	cmp	r4, #5
 8011b2c:	ddee      	ble.n	8011b0c <Encoder_Init+0x8>
	for(int i=0; i<6;i++){
 8011b2e:	2400      	movs	r4, #0
 8011b30:	e012      	b.n	8011b58 <Encoder_Init+0x54>
		i2c[0]= 0x0C;
 8011b32:	4a20      	ldr	r2, [pc, #128]	; (8011bb4 <Encoder_Init+0xb0>)
 8011b34:	230c      	movs	r3, #12
 8011b36:	7013      	strb	r3, [r2, #0]
		i2c[1]= 0x00;
 8011b38:	2300      	movs	r3, #0
 8011b3a:	7053      	strb	r3, [r2, #1]
		i2c[2]= 0x00;
 8011b3c:	7093      	strb	r3, [r2, #2]
		i2c[3]= 0x10;
 8011b3e:	2310      	movs	r3, #16
 8011b40:	70d3      	strb	r3, [r2, #3]
		i2c[4]= 0x10;
 8011b42:	7113      	strb	r3, [r2, #4]
		HAL_I2C_Master_Transmit(&hi2c1,EncoderAdr[i], i2c,5,10);
 8011b44:	4b1c      	ldr	r3, [pc, #112]	; (8011bb8 <Encoder_Init+0xb4>)
 8011b46:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 8011b4a:	230a      	movs	r3, #10
 8011b4c:	9300      	str	r3, [sp, #0]
 8011b4e:	2305      	movs	r3, #5
 8011b50:	481a      	ldr	r0, [pc, #104]	; (8011bbc <Encoder_Init+0xb8>)
 8011b52:	f002 fd57 	bl	8014604 <HAL_I2C_Master_Transmit>
	for(int i=0; i<6;i++){
 8011b56:	3401      	adds	r4, #1
 8011b58:	2c05      	cmp	r4, #5
 8011b5a:	ddea      	ble.n	8011b32 <Encoder_Init+0x2e>
	for(int i=0; i<6;i++){
 8011b5c:	2400      	movs	r4, #0
 8011b5e:	e00e      	b.n	8011b7e <Encoder_Init+0x7a>
		i2c[0]= 0x00;
 8011b60:	4a14      	ldr	r2, [pc, #80]	; (8011bb4 <Encoder_Init+0xb0>)
 8011b62:	2300      	movs	r3, #0
 8011b64:	7013      	strb	r3, [r2, #0]
		i2c[1]= 0x10;
 8011b66:	2310      	movs	r3, #16
 8011b68:	7053      	strb	r3, [r2, #1]
		HAL_I2C_Master_Transmit(&hi2c1,EncoderAdr[i], i2c,2,10);
 8011b6a:	4b13      	ldr	r3, [pc, #76]	; (8011bb8 <Encoder_Init+0xb4>)
 8011b6c:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 8011b70:	230a      	movs	r3, #10
 8011b72:	9300      	str	r3, [sp, #0]
 8011b74:	2302      	movs	r3, #2
 8011b76:	4811      	ldr	r0, [pc, #68]	; (8011bbc <Encoder_Init+0xb8>)
 8011b78:	f002 fd44 	bl	8014604 <HAL_I2C_Master_Transmit>
	for(int i=0; i<6;i++){
 8011b7c:	3401      	adds	r4, #1
 8011b7e:	2c05      	cmp	r4, #5
 8011b80:	ddee      	ble.n	8011b60 <Encoder_Init+0x5c>
	for(int i=0; i<6;i++){
 8011b82:	2400      	movs	r4, #0
 8011b84:	e012      	b.n	8011bac <Encoder_Init+0xa8>
		i2c[0]= 0x14;
 8011b86:	4a0b      	ldr	r2, [pc, #44]	; (8011bb4 <Encoder_Init+0xb0>)
 8011b88:	2314      	movs	r3, #20
 8011b8a:	7013      	strb	r3, [r2, #0]
		i2c[1]= 0x00;
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	7053      	strb	r3, [r2, #1]
		i2c[2]= 0x00;
 8011b90:	7093      	strb	r3, [r2, #2]
		i2c[3]= 0x00;
 8011b92:	70d3      	strb	r3, [r2, #3]
		i2c[4]= 0x01;
 8011b94:	2301      	movs	r3, #1
 8011b96:	7113      	strb	r3, [r2, #4]
		HAL_I2C_Master_Transmit(&hi2c1,EncoderAdr[i], i2c,5,10);
 8011b98:	4b07      	ldr	r3, [pc, #28]	; (8011bb8 <Encoder_Init+0xb4>)
 8011b9a:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 8011b9e:	230a      	movs	r3, #10
 8011ba0:	9300      	str	r3, [sp, #0]
 8011ba2:	2305      	movs	r3, #5
 8011ba4:	4805      	ldr	r0, [pc, #20]	; (8011bbc <Encoder_Init+0xb8>)
 8011ba6:	f002 fd2d 	bl	8014604 <HAL_I2C_Master_Transmit>
	for(int i=0; i<6;i++){
 8011baa:	3401      	adds	r4, #1
 8011bac:	2c05      	cmp	r4, #5
 8011bae:	ddea      	ble.n	8011b86 <Encoder_Init+0x82>
}
 8011bb0:	b002      	add	sp, #8
 8011bb2:	bd10      	pop	{r4, pc}
 8011bb4:	2002ffbc 	.word	0x2002ffbc
 8011bb8:	20000050 	.word	0x20000050
 8011bbc:	2002f1ac 	.word	0x2002f1ac

08011bc0 <main>:
{
 8011bc0:	b500      	push	{lr}
 8011bc2:	b089      	sub	sp, #36	; 0x24
	VectorBase_Config();
 8011bc4:	f7ff fca0 	bl	8011508 <VectorBase_Config>
  HAL_Init();
 8011bc8:	f000 ff06 	bl	80129d8 <HAL_Init>
  SystemClock_Config();
 8011bcc:	f7ff ff30 	bl	8011a30 <SystemClock_Config>
  MX_GPIO_Init();
 8011bd0:	f7ff fca2 	bl	8011518 <MX_GPIO_Init>
  MX_DMA_Init();
 8011bd4:	f7ff fdd8 	bl	8011788 <MX_DMA_Init>
  MX_CRC_Init();
 8011bd8:	f7ff fdf8 	bl	80117cc <MX_CRC_Init>
  MX_I2C1_Init();
 8011bdc:	f7ff fe02 	bl	80117e4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8011be0:	f7ff fe1a 	bl	8011818 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8011be4:	f7ff fe32 	bl	801184c <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8011be8:	f7ff fe46 	bl	8011878 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 8011bec:	f7ff fc7c 	bl	80114e8 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 8011bf0:	f7ff fe6c 	bl	80118cc <MX_TIM1_Init>
  MX_TIM3_Init();
 8011bf4:	f7ff fe98 	bl	8011928 <MX_TIM3_Init>
  MX_TIM4_Init();
 8011bf8:	f7ff feb6 	bl	8011968 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8011bfc:	f7ff fee0 	bl	80119c0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8011c00:	f7ff fef4 	bl	80119ec <MX_USART6_UART_Init>
  Encoder_Init();
 8011c04:	f7ff ff7e 	bl	8011b04 <Encoder_Init>
  BSP_LED_Init(LED1);
 8011c08:	2000      	movs	r0, #0
 8011c0a:	f00c ff47 	bl	801ea9c <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8011c0e:	2001      	movs	r0, #1
 8011c10:	f00c ff44 	bl	801ea9c <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8011c14:	2002      	movs	r0, #2
 8011c16:	f00c ff41 	bl	801ea9c <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8011c1a:	2003      	movs	r0, #3
 8011c1c:	f00c ff3e 	bl	801ea9c <BSP_LED_Init>
  GRAPHICS_HW_Init();
 8011c20:	f00c fe56 	bl	801e8d0 <GRAPHICS_HW_Init>
  GRAPHICS_Init();
 8011c24:	f00c fe64 	bl	801e8f0 <GRAPHICS_Init>
  BSP_TS_Init(800, 480);
 8011c28:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8011c2c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8011c30:	f00c ffb6 	bl	801eba0 <BSP_TS_Init>
  HAL_UART_Receive_DMA(&huart6, UART_RECIVE,RX_IN_SIZE);
 8011c34:	4c0d      	ldr	r4, [pc, #52]	; (8011c6c <main+0xac>)
 8011c36:	22c8      	movs	r2, #200	; 0xc8
 8011c38:	490d      	ldr	r1, [pc, #52]	; (8011c70 <main+0xb0>)
 8011c3a:	4620      	mov	r0, r4
 8011c3c:	f005 fc5a 	bl	80174f4 <HAL_UART_Receive_DMA>
  HAL_UART_Transmit_DMA(&huart6, UART_TRANSFER,150);
 8011c40:	2296      	movs	r2, #150	; 0x96
 8011c42:	490c      	ldr	r1, [pc, #48]	; (8011c74 <main+0xb4>)
 8011c44:	4620      	mov	r0, r4
 8011c46:	f005 fc0f 	bl	8017468 <HAL_UART_Transmit_DMA>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal , 0, 6000);
 8011c4a:	ac01      	add	r4, sp, #4
 8011c4c:	4d0a      	ldr	r5, [pc, #40]	; (8011c78 <main+0xb8>)
 8011c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011c56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8011c5a:	2100      	movs	r1, #0
 8011c5c:	a801      	add	r0, sp, #4
 8011c5e:	f006 fc32 	bl	80184c6 <osThreadCreate>
 8011c62:	4b06      	ldr	r3, [pc, #24]	; (8011c7c <main+0xbc>)
 8011c64:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8011c66:	f006 fc16 	bl	8018496 <osKernelStart>
 8011c6a:	e7fe      	b.n	8011c6a <main+0xaa>
 8011c6c:	20030098 	.word	0x20030098
 8011c70:	2002e900 	.word	0x2002e900
 8011c74:	2002ed90 	.word	0x2002ed90
 8011c78:	0802ed18 	.word	0x0802ed18
 8011c7c:	2002fdd8 	.word	0x2002fdd8

08011c80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011c80:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8011c82:	6802      	ldr	r2, [r0, #0]
 8011c84:	4b03      	ldr	r3, [pc, #12]	; (8011c94 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d000      	beq.n	8011c8c <HAL_TIM_PeriodElapsedCallback+0xc>

  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8011c8a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8011c8c:	f000 febe 	bl	8012a0c <HAL_IncTick>
}
 8011c90:	e7fb      	b.n	8011c8a <HAL_TIM_PeriodElapsedCallback+0xa>
 8011c92:	bf00      	nop
 8011c94:	40001000 	.word	0x40001000

08011c98 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8011c98:	4770      	bx	lr
	...

08011c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011c9c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011c9e:	2100      	movs	r1, #0
 8011ca0:	9100      	str	r1, [sp, #0]
 8011ca2:	4b0b      	ldr	r3, [pc, #44]	; (8011cd0 <HAL_MspInit+0x34>)
 8011ca4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011ca6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011caa:	645a      	str	r2, [r3, #68]	; 0x44
 8011cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011cae:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8011cb2:	9200      	str	r2, [sp, #0]
 8011cb4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011cb6:	9101      	str	r1, [sp, #4]
 8011cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011cba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8011cbe:	641a      	str	r2, [r3, #64]	; 0x40
 8011cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011cc6:	9301      	str	r3, [sp, #4]
 8011cc8:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011cca:	b002      	add	sp, #8
 8011ccc:	4770      	bx	lr
 8011cce:	bf00      	nop
 8011cd0:	40023800 	.word	0x40023800

08011cd4 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8011cd4:	6802      	ldr	r2, [r0, #0]
 8011cd6:	4b09      	ldr	r3, [pc, #36]	; (8011cfc <HAL_CRC_MspInit+0x28>)
 8011cd8:	429a      	cmp	r2, r3
 8011cda:	d000      	beq.n	8011cde <HAL_CRC_MspInit+0xa>
 8011cdc:	4770      	bx	lr
{
 8011cde:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	9301      	str	r3, [sp, #4]
 8011ce4:	4b06      	ldr	r3, [pc, #24]	; (8011d00 <HAL_CRC_MspInit+0x2c>)
 8011ce6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011ce8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011cec:	631a      	str	r2, [r3, #48]	; 0x30
 8011cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8011cf4:	9301      	str	r3, [sp, #4]
 8011cf6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8011cf8:	b002      	add	sp, #8
 8011cfa:	4770      	bx	lr
 8011cfc:	40023000 	.word	0x40023000
 8011d00:	40023800 	.word	0x40023800

08011d04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8011d04:	b530      	push	{r4, r5, lr}
 8011d06:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d08:	2300      	movs	r3, #0
 8011d0a:	9305      	str	r3, [sp, #20]
 8011d0c:	9306      	str	r3, [sp, #24]
 8011d0e:	9307      	str	r3, [sp, #28]
 8011d10:	9308      	str	r3, [sp, #32]
 8011d12:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 8011d14:	6803      	ldr	r3, [r0, #0]
 8011d16:	4a29      	ldr	r2, [pc, #164]	; (8011dbc <HAL_I2C_MspInit+0xb8>)
 8011d18:	4293      	cmp	r3, r2
 8011d1a:	d004      	beq.n	8011d26 <HAL_I2C_MspInit+0x22>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8011d1c:	4a28      	ldr	r2, [pc, #160]	; (8011dc0 <HAL_I2C_MspInit+0xbc>)
 8011d1e:	4293      	cmp	r3, r2
 8011d20:	d027      	beq.n	8011d72 <HAL_I2C_MspInit+0x6e>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8011d22:	b00b      	add	sp, #44	; 0x2c
 8011d24:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011d26:	2500      	movs	r5, #0
 8011d28:	9501      	str	r5, [sp, #4]
 8011d2a:	4c26      	ldr	r4, [pc, #152]	; (8011dc4 <HAL_I2C_MspInit+0xc0>)
 8011d2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011d2e:	f043 0302 	orr.w	r3, r3, #2
 8011d32:	6323      	str	r3, [r4, #48]	; 0x30
 8011d34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011d36:	f003 0302 	and.w	r3, r3, #2
 8011d3a:	9301      	str	r3, [sp, #4]
 8011d3c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8011d3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011d42:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011d44:	2312      	movs	r3, #18
 8011d46:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011d48:	2301      	movs	r3, #1
 8011d4a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011d4c:	2303      	movs	r3, #3
 8011d4e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8011d50:	2304      	movs	r3, #4
 8011d52:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011d54:	a905      	add	r1, sp, #20
 8011d56:	481c      	ldr	r0, [pc, #112]	; (8011dc8 <HAL_I2C_MspInit+0xc4>)
 8011d58:	f001 fe7c 	bl	8013a54 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8011d5c:	9502      	str	r5, [sp, #8]
 8011d5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011d60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011d64:	6423      	str	r3, [r4, #64]	; 0x40
 8011d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011d6c:	9302      	str	r3, [sp, #8]
 8011d6e:	9b02      	ldr	r3, [sp, #8]
 8011d70:	e7d7      	b.n	8011d22 <HAL_I2C_MspInit+0x1e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8011d72:	2500      	movs	r5, #0
 8011d74:	9503      	str	r5, [sp, #12]
 8011d76:	4c13      	ldr	r4, [pc, #76]	; (8011dc4 <HAL_I2C_MspInit+0xc0>)
 8011d78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d7e:	6323      	str	r3, [r4, #48]	; 0x30
 8011d80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011d86:	9303      	str	r3, [sp, #12]
 8011d88:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8011d8a:	2330      	movs	r3, #48	; 0x30
 8011d8c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011d8e:	2312      	movs	r3, #18
 8011d90:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8011d92:	2301      	movs	r3, #1
 8011d94:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011d96:	2303      	movs	r3, #3
 8011d98:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8011d9a:	2304      	movs	r3, #4
 8011d9c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8011d9e:	a905      	add	r1, sp, #20
 8011da0:	480a      	ldr	r0, [pc, #40]	; (8011dcc <HAL_I2C_MspInit+0xc8>)
 8011da2:	f001 fe57 	bl	8013a54 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8011da6:	9504      	str	r5, [sp, #16]
 8011da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011daa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011dae:	6423      	str	r3, [r4, #64]	; 0x40
 8011db0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011db6:	9304      	str	r3, [sp, #16]
 8011db8:	9b04      	ldr	r3, [sp, #16]
}
 8011dba:	e7b2      	b.n	8011d22 <HAL_I2C_MspInit+0x1e>
 8011dbc:	40005400 	.word	0x40005400
 8011dc0:	40005800 	.word	0x40005800
 8011dc4:	40023800 	.word	0x40023800
 8011dc8:	40020400 	.word	0x40020400
 8011dcc:	40021c00 	.word	0x40021c00

08011dd0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8011dd0:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C1)
 8011dd2:	6803      	ldr	r3, [r0, #0]
 8011dd4:	4a0e      	ldr	r2, [pc, #56]	; (8011e10 <HAL_I2C_MspDeInit+0x40>)
 8011dd6:	4293      	cmp	r3, r2
 8011dd8:	d003      	beq.n	8011de2 <HAL_I2C_MspDeInit+0x12>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8011dda:	4a0e      	ldr	r2, [pc, #56]	; (8011e14 <HAL_I2C_MspDeInit+0x44>)
 8011ddc:	4293      	cmp	r3, r2
 8011dde:	d00c      	beq.n	8011dfa <HAL_I2C_MspDeInit+0x2a>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8011de0:	bd08      	pop	{r3, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 8011de2:	f502 32f2 	add.w	r2, r2, #123904	; 0x1e400
 8011de6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011de8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011dec:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, I2C1_SCL_Pin|I2C1_SDA_Pin);
 8011dee:	f44f 7140 	mov.w	r1, #768	; 0x300
 8011df2:	4809      	ldr	r0, [pc, #36]	; (8011e18 <HAL_I2C_MspDeInit+0x48>)
 8011df4:	f001 ff1e 	bl	8013c34 <HAL_GPIO_DeInit>
 8011df8:	e7f2      	b.n	8011de0 <HAL_I2C_MspDeInit+0x10>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8011dfa:	f502 32f0 	add.w	r2, r2, #122880	; 0x1e000
 8011dfe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8011e00:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8011e04:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, I2C2_SCL_Pin|I2C2_SDA_Pin);
 8011e06:	2130      	movs	r1, #48	; 0x30
 8011e08:	4804      	ldr	r0, [pc, #16]	; (8011e1c <HAL_I2C_MspDeInit+0x4c>)
 8011e0a:	f001 ff13 	bl	8013c34 <HAL_GPIO_DeInit>
}
 8011e0e:	e7e7      	b.n	8011de0 <HAL_I2C_MspDeInit+0x10>
 8011e10:	40005400 	.word	0x40005400
 8011e14:	40005800 	.word	0x40005800
 8011e18:	40020400 	.word	0x40020400
 8011e1c:	40021c00 	.word	0x40021c00

08011e20 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8011e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e24:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011e26:	2300      	movs	r3, #0
 8011e28:	9303      	str	r3, [sp, #12]
 8011e2a:	9304      	str	r3, [sp, #16]
 8011e2c:	9305      	str	r3, [sp, #20]
 8011e2e:	9306      	str	r3, [sp, #24]
 8011e30:	9307      	str	r3, [sp, #28]
  if(hqspi->Instance==QUADSPI)
 8011e32:	6802      	ldr	r2, [r0, #0]
 8011e34:	4b26      	ldr	r3, [pc, #152]	; (8011ed0 <HAL_QSPI_MspInit+0xb0>)
 8011e36:	429a      	cmp	r2, r3
 8011e38:	d002      	beq.n	8011e40 <HAL_QSPI_MspInit+0x20>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8011e3a:	b008      	add	sp, #32
 8011e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_QSPI_CLK_ENABLE();
 8011e40:	2400      	movs	r4, #0
 8011e42:	9400      	str	r4, [sp, #0]
 8011e44:	4b23      	ldr	r3, [pc, #140]	; (8011ed4 <HAL_QSPI_MspInit+0xb4>)
 8011e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e48:	f042 0202 	orr.w	r2, r2, #2
 8011e4c:	639a      	str	r2, [r3, #56]	; 0x38
 8011e4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e50:	f002 0202 	and.w	r2, r2, #2
 8011e54:	9200      	str	r2, [sp, #0]
 8011e56:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011e58:	9401      	str	r4, [sp, #4]
 8011e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e5c:	f042 0202 	orr.w	r2, r2, #2
 8011e60:	631a      	str	r2, [r3, #48]	; 0x30
 8011e62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e64:	f002 0202 	and.w	r2, r2, #2
 8011e68:	9201      	str	r2, [sp, #4]
 8011e6a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8011e6c:	9402      	str	r4, [sp, #8]
 8011e6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e70:	f042 0220 	orr.w	r2, r2, #32
 8011e74:	631a      	str	r2, [r3, #48]	; 0x30
 8011e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e78:	f003 0320 	and.w	r3, r3, #32
 8011e7c:	9302      	str	r3, [sp, #8]
 8011e7e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8011e80:	2340      	movs	r3, #64	; 0x40
 8011e82:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011e84:	2602      	movs	r6, #2
 8011e86:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011e88:	2503      	movs	r5, #3
 8011e8a:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8011e8c:	f04f 080a 	mov.w	r8, #10
 8011e90:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8011e94:	a903      	add	r1, sp, #12
 8011e96:	4810      	ldr	r0, [pc, #64]	; (8011ed8 <HAL_QSPI_MspInit+0xb8>)
 8011e98:	f001 fddc 	bl	8013a54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 8011e9c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8011ea0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ea2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ea4:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ea6:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8011ea8:	2309      	movs	r3, #9
 8011eaa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8011eac:	4f0b      	ldr	r7, [pc, #44]	; (8011edc <HAL_QSPI_MspInit+0xbc>)
 8011eae:	a903      	add	r1, sp, #12
 8011eb0:	4638      	mov	r0, r7
 8011eb2:	f001 fdcf 	bl	8013a54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8011eb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011eba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ebc:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ebe:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011ec0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8011ec2:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8011ec6:	a903      	add	r1, sp, #12
 8011ec8:	4638      	mov	r0, r7
 8011eca:	f001 fdc3 	bl	8013a54 <HAL_GPIO_Init>
}
 8011ece:	e7b4      	b.n	8011e3a <HAL_QSPI_MspInit+0x1a>
 8011ed0:	a0001000 	.word	0xa0001000
 8011ed4:	40023800 	.word	0x40023800
 8011ed8:	40020400 	.word	0x40020400
 8011edc:	40021400 	.word	0x40021400

08011ee0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8011ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ee2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	9303      	str	r3, [sp, #12]
 8011ee8:	9304      	str	r3, [sp, #16]
 8011eea:	9305      	str	r3, [sp, #20]
 8011eec:	9306      	str	r3, [sp, #24]
 8011eee:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDIO)
 8011ef0:	6802      	ldr	r2, [r0, #0]
 8011ef2:	4b20      	ldr	r3, [pc, #128]	; (8011f74 <HAL_SD_MspInit+0x94>)
 8011ef4:	429a      	cmp	r2, r3
 8011ef6:	d001      	beq.n	8011efc <HAL_SD_MspInit+0x1c>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8011ef8:	b009      	add	sp, #36	; 0x24
 8011efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDIO_CLK_ENABLE();
 8011efc:	2400      	movs	r4, #0
 8011efe:	9400      	str	r4, [sp, #0]
 8011f00:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8011f04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011f06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011f0a:	645a      	str	r2, [r3, #68]	; 0x44
 8011f0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011f0e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8011f12:	9200      	str	r2, [sp, #0]
 8011f14:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011f16:	9401      	str	r4, [sp, #4]
 8011f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f1a:	f042 0204 	orr.w	r2, r2, #4
 8011f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8011f20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f22:	f002 0204 	and.w	r2, r2, #4
 8011f26:	9201      	str	r2, [sp, #4]
 8011f28:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8011f2a:	9402      	str	r4, [sp, #8]
 8011f2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f2e:	f042 0208 	orr.w	r2, r2, #8
 8011f32:	631a      	str	r2, [r3, #48]	; 0x30
 8011f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f36:	f003 0308 	and.w	r3, r3, #8
 8011f3a:	9302      	str	r3, [sp, #8]
 8011f3c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin 
 8011f3e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8011f42:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f44:	2702      	movs	r7, #2
 8011f46:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011f48:	2603      	movs	r6, #3
 8011f4a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8011f4c:	250c      	movs	r5, #12
 8011f4e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011f50:	eb0d 0105 	add.w	r1, sp, r5
 8011f54:	4808      	ldr	r0, [pc, #32]	; (8011f78 <HAL_SD_MspInit+0x98>)
 8011f56:	f001 fd7d 	bl	8013a54 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8011f5a:	2304      	movs	r3, #4
 8011f5c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f5e:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f60:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011f62:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8011f64:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8011f66:	eb0d 0105 	add.w	r1, sp, r5
 8011f6a:	4804      	ldr	r0, [pc, #16]	; (8011f7c <HAL_SD_MspInit+0x9c>)
 8011f6c:	f001 fd72 	bl	8013a54 <HAL_GPIO_Init>
}
 8011f70:	e7c2      	b.n	8011ef8 <HAL_SD_MspInit+0x18>
 8011f72:	bf00      	nop
 8011f74:	40012c00 	.word	0x40012c00
 8011f78:	40020800 	.word	0x40020800
 8011f7c:	40020c00 	.word	0x40020c00

08011f80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8011f80:	b510      	push	{r4, lr}
 8011f82:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011f84:	2300      	movs	r3, #0
 8011f86:	9305      	str	r3, [sp, #20]
 8011f88:	9306      	str	r3, [sp, #24]
 8011f8a:	9307      	str	r3, [sp, #28]
 8011f8c:	9308      	str	r3, [sp, #32]
 8011f8e:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim_base->Instance==TIM1)
 8011f90:	6803      	ldr	r3, [r0, #0]
 8011f92:	4a2a      	ldr	r2, [pc, #168]	; (801203c <HAL_TIM_Base_MspInit+0xbc>)
 8011f94:	4293      	cmp	r3, r2
 8011f96:	d007      	beq.n	8011fa8 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8011f98:	4a29      	ldr	r2, [pc, #164]	; (8012040 <HAL_TIM_Base_MspInit+0xc0>)
 8011f9a:	4293      	cmp	r3, r2
 8011f9c:	d011      	beq.n	8011fc2 <HAL_TIM_Base_MspInit+0x42>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8011f9e:	4a29      	ldr	r2, [pc, #164]	; (8012044 <HAL_TIM_Base_MspInit+0xc4>)
 8011fa0:	4293      	cmp	r3, r2
 8011fa2:	d022      	beq.n	8011fea <HAL_TIM_Base_MspInit+0x6a>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8011fa4:	b00a      	add	sp, #40	; 0x28
 8011fa6:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8011fa8:	2300      	movs	r3, #0
 8011faa:	9301      	str	r3, [sp, #4]
 8011fac:	4b26      	ldr	r3, [pc, #152]	; (8012048 <HAL_TIM_Base_MspInit+0xc8>)
 8011fae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011fb0:	f042 0201 	orr.w	r2, r2, #1
 8011fb4:	645a      	str	r2, [r3, #68]	; 0x44
 8011fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fb8:	f003 0301 	and.w	r3, r3, #1
 8011fbc:	9301      	str	r3, [sp, #4]
 8011fbe:	9b01      	ldr	r3, [sp, #4]
 8011fc0:	e7f0      	b.n	8011fa4 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	9202      	str	r2, [sp, #8]
 8011fc6:	4b20      	ldr	r3, [pc, #128]	; (8012048 <HAL_TIM_Base_MspInit+0xc8>)
 8011fc8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8011fca:	f041 0102 	orr.w	r1, r1, #2
 8011fce:	6419      	str	r1, [r3, #64]	; 0x40
 8011fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fd2:	f003 0302 	and.w	r3, r3, #2
 8011fd6:	9302      	str	r3, [sp, #8]
 8011fd8:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8011fda:	2105      	movs	r1, #5
 8011fdc:	201d      	movs	r0, #29
 8011fde:	f000 fd4d 	bl	8012a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8011fe2:	201d      	movs	r0, #29
 8011fe4:	f000 fd7e 	bl	8012ae4 <HAL_NVIC_EnableIRQ>
 8011fe8:	e7dc      	b.n	8011fa4 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8011fea:	2400      	movs	r4, #0
 8011fec:	9403      	str	r4, [sp, #12]
 8011fee:	4b16      	ldr	r3, [pc, #88]	; (8012048 <HAL_TIM_Base_MspInit+0xc8>)
 8011ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011ff2:	f042 0204 	orr.w	r2, r2, #4
 8011ff6:	641a      	str	r2, [r3, #64]	; 0x40
 8011ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011ffa:	f002 0204 	and.w	r2, r2, #4
 8011ffe:	9203      	str	r2, [sp, #12]
 8012000:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8012002:	9404      	str	r4, [sp, #16]
 8012004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012006:	f042 0208 	orr.w	r2, r2, #8
 801200a:	631a      	str	r2, [r3, #48]	; 0x30
 801200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801200e:	f003 0308 	and.w	r3, r3, #8
 8012012:	9304      	str	r3, [sp, #16]
 8012014:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = MIC_CK_Pin;
 8012016:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801201a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801201c:	2302      	movs	r3, #2
 801201e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8012020:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 8012022:	a905      	add	r1, sp, #20
 8012024:	4809      	ldr	r0, [pc, #36]	; (801204c <HAL_TIM_Base_MspInit+0xcc>)
 8012026:	f001 fd15 	bl	8013a54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 801202a:	4622      	mov	r2, r4
 801202c:	2105      	movs	r1, #5
 801202e:	201e      	movs	r0, #30
 8012030:	f000 fd24 	bl	8012a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8012034:	201e      	movs	r0, #30
 8012036:	f000 fd55 	bl	8012ae4 <HAL_NVIC_EnableIRQ>
}
 801203a:	e7b3      	b.n	8011fa4 <HAL_TIM_Base_MspInit+0x24>
 801203c:	40010000 	.word	0x40010000
 8012040:	40000400 	.word	0x40000400
 8012044:	40000800 	.word	0x40000800
 8012048:	40023800 	.word	0x40023800
 801204c:	40020c00 	.word	0x40020c00

08012050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8012050:	b530      	push	{r4, r5, lr}
 8012052:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012054:	2300      	movs	r3, #0
 8012056:	9305      	str	r3, [sp, #20]
 8012058:	9306      	str	r3, [sp, #24]
 801205a:	9307      	str	r3, [sp, #28]
 801205c:	9308      	str	r3, [sp, #32]
 801205e:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART3)
 8012060:	6803      	ldr	r3, [r0, #0]
 8012062:	4a47      	ldr	r2, [pc, #284]	; (8012180 <HAL_UART_MspInit+0x130>)
 8012064:	4293      	cmp	r3, r2
 8012066:	d005      	beq.n	8012074 <HAL_UART_MspInit+0x24>
 8012068:	4604      	mov	r4, r0

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 801206a:	4a46      	ldr	r2, [pc, #280]	; (8012184 <HAL_UART_MspInit+0x134>)
 801206c:	4293      	cmp	r3, r2
 801206e:	d027      	beq.n	80120c0 <HAL_UART_MspInit+0x70>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8012070:	b00b      	add	sp, #44	; 0x2c
 8012072:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8012074:	2100      	movs	r1, #0
 8012076:	9101      	str	r1, [sp, #4]
 8012078:	4b43      	ldr	r3, [pc, #268]	; (8012188 <HAL_UART_MspInit+0x138>)
 801207a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801207c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8012080:	641a      	str	r2, [r3, #64]	; 0x40
 8012082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012084:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8012088:	9201      	str	r2, [sp, #4]
 801208a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801208c:	9102      	str	r1, [sp, #8]
 801208e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012090:	f042 0202 	orr.w	r2, r2, #2
 8012094:	631a      	str	r2, [r3, #48]	; 0x30
 8012096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012098:	f003 0302 	and.w	r3, r3, #2
 801209c:	9302      	str	r3, [sp, #8]
 801209e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80120a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80120a4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80120a6:	2302      	movs	r3, #2
 80120a8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80120aa:	2301      	movs	r3, #1
 80120ac:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80120ae:	2303      	movs	r3, #3
 80120b0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80120b2:	2307      	movs	r3, #7
 80120b4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80120b6:	a905      	add	r1, sp, #20
 80120b8:	4834      	ldr	r0, [pc, #208]	; (801218c <HAL_UART_MspInit+0x13c>)
 80120ba:	f001 fccb 	bl	8013a54 <HAL_GPIO_Init>
 80120be:	e7d7      	b.n	8012070 <HAL_UART_MspInit+0x20>
    __HAL_RCC_USART6_CLK_ENABLE();
 80120c0:	2500      	movs	r5, #0
 80120c2:	9503      	str	r5, [sp, #12]
 80120c4:	4b30      	ldr	r3, [pc, #192]	; (8012188 <HAL_UART_MspInit+0x138>)
 80120c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80120c8:	f042 0220 	orr.w	r2, r2, #32
 80120cc:	645a      	str	r2, [r3, #68]	; 0x44
 80120ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80120d0:	f002 0220 	and.w	r2, r2, #32
 80120d4:	9203      	str	r2, [sp, #12]
 80120d6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80120d8:	9504      	str	r5, [sp, #16]
 80120da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80120dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80120e0:	631a      	str	r2, [r3, #48]	; 0x30
 80120e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120e8:	9304      	str	r3, [sp, #16]
 80120ea:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 80120ec:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80120f0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80120f2:	2302      	movs	r3, #2
 80120f4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80120f6:	2303      	movs	r3, #3
 80120f8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80120fa:	2308      	movs	r3, #8
 80120fc:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80120fe:	a905      	add	r1, sp, #20
 8012100:	4823      	ldr	r0, [pc, #140]	; (8012190 <HAL_UART_MspInit+0x140>)
 8012102:	f001 fca7 	bl	8013a54 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8012106:	4823      	ldr	r0, [pc, #140]	; (8012194 <HAL_UART_MspInit+0x144>)
 8012108:	4b23      	ldr	r3, [pc, #140]	; (8012198 <HAL_UART_MspInit+0x148>)
 801210a:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 801210c:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8012110:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012112:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012114:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012116:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801211a:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 801211c:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801211e:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8012120:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012124:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8012126:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801212a:	6203      	str	r3, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 801212c:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 801212e:	f000 fd85 	bl	8012c3c <HAL_DMA_Init>
 8012132:	b9f8      	cbnz	r0, 8012174 <HAL_UART_MspInit+0x124>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8012134:	4b17      	ldr	r3, [pc, #92]	; (8012194 <HAL_UART_MspInit+0x144>)
 8012136:	6363      	str	r3, [r4, #52]	; 0x34
 8012138:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 801213a:	4818      	ldr	r0, [pc, #96]	; (801219c <HAL_UART_MspInit+0x14c>)
 801213c:	4b18      	ldr	r3, [pc, #96]	; (80121a0 <HAL_UART_MspInit+0x150>)
 801213e:	6003      	str	r3, [r0, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8012140:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8012144:	6043      	str	r3, [r0, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8012146:	2340      	movs	r3, #64	; 0x40
 8012148:	6083      	str	r3, [r0, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 801214a:	2300      	movs	r3, #0
 801214c:	60c3      	str	r3, [r0, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 801214e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8012152:	6102      	str	r2, [r0, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012154:	6143      	str	r3, [r0, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012156:	6183      	str	r3, [r0, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 8012158:	f44f 7280 	mov.w	r2, #256	; 0x100
 801215c:	61c2      	str	r2, [r0, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 801215e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012162:	6202      	str	r2, [r0, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8012164:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8012166:	f000 fd69 	bl	8012c3c <HAL_DMA_Init>
 801216a:	b930      	cbnz	r0, 801217a <HAL_UART_MspInit+0x12a>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 801216c:	4b0b      	ldr	r3, [pc, #44]	; (801219c <HAL_UART_MspInit+0x14c>)
 801216e:	6323      	str	r3, [r4, #48]	; 0x30
 8012170:	639c      	str	r4, [r3, #56]	; 0x38
}
 8012172:	e77d      	b.n	8012070 <HAL_UART_MspInit+0x20>
      Error_Handler();
 8012174:	f7ff fd90 	bl	8011c98 <Error_Handler>
 8012178:	e7dc      	b.n	8012134 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 801217a:	f7ff fd8d 	bl	8011c98 <Error_Handler>
 801217e:	e7f5      	b.n	801216c <HAL_UART_MspInit+0x11c>
 8012180:	40004800 	.word	0x40004800
 8012184:	40011400 	.word	0x40011400
 8012188:	40023800 	.word	0x40023800
 801218c:	40020400 	.word	0x40020400
 8012190:	40021800 	.word	0x40021800
 8012194:	2002fddc 	.word	0x2002fddc
 8012198:	40026428 	.word	0x40026428
 801219c:	2002ff58 	.word	0x2002ff58
 80121a0:	400264a0 	.word	0x400264a0

080121a4 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80121a4:	6802      	ldr	r2, [r0, #0]
 80121a6:	4b1d      	ldr	r3, [pc, #116]	; (801221c <HAL_SAI_MspInit+0x78>)
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d000      	beq.n	80121ae <HAL_SAI_MspInit+0xa>
 80121ac:	4770      	bx	lr
{
 80121ae:	b570      	push	{r4, r5, r6, lr}
 80121b0:	b086      	sub	sp, #24
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80121b2:	4b1b      	ldr	r3, [pc, #108]	; (8012220 <HAL_SAI_MspInit+0x7c>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	b95b      	cbnz	r3, 80121d0 <HAL_SAI_MspInit+0x2c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80121b8:	2200      	movs	r2, #0
 80121ba:	9200      	str	r2, [sp, #0]
 80121bc:	4a19      	ldr	r2, [pc, #100]	; (8012224 <HAL_SAI_MspInit+0x80>)
 80121be:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80121c0:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80121c4:	6451      	str	r1, [r2, #68]	; 0x44
 80121c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80121c8:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80121cc:	9200      	str	r2, [sp, #0]
 80121ce:	9a00      	ldr	r2, [sp, #0]
    }
    SAI1_client ++;
 80121d0:	3301      	adds	r3, #1
 80121d2:	4a13      	ldr	r2, [pc, #76]	; (8012220 <HAL_SAI_MspInit+0x7c>)
 80121d4:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 80121d6:	2330      	movs	r3, #48	; 0x30
 80121d8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80121da:	2602      	movs	r6, #2
 80121dc:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80121de:	2400      	movs	r4, #0
 80121e0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80121e2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80121e4:	2506      	movs	r5, #6
 80121e6:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80121e8:	a901      	add	r1, sp, #4
 80121ea:	480f      	ldr	r0, [pc, #60]	; (8012228 <HAL_SAI_MspInit+0x84>)
 80121ec:	f001 fc32 	bl	8013a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 80121f0:	2340      	movs	r3, #64	; 0x40
 80121f2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80121f4:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80121f6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80121f8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80121fa:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 80121fc:	a901      	add	r1, sp, #4
 80121fe:	480b      	ldr	r0, [pc, #44]	; (801222c <HAL_SAI_MspInit+0x88>)
 8012200:	f001 fc28 	bl	8013a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8012204:	2380      	movs	r3, #128	; 0x80
 8012206:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012208:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801220a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801220c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 801220e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8012210:	a901      	add	r1, sp, #4
 8012212:	4807      	ldr	r0, [pc, #28]	; (8012230 <HAL_SAI_MspInit+0x8c>)
 8012214:	f001 fc1e 	bl	8013a54 <HAL_GPIO_Init>

    }
}
 8012218:	b006      	add	sp, #24
 801221a:	bd70      	pop	{r4, r5, r6, pc}
 801221c:	40015804 	.word	0x40015804
 8012220:	200004f0 	.word	0x200004f0
 8012224:	40023800 	.word	0x40023800
 8012228:	40021000 	.word	0x40021000
 801222c:	40020c00 	.word	0x40020c00
 8012230:	40021800 	.word	0x40021800

08012234 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012234:	b510      	push	{r4, lr}
 8012236:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8012238:	2200      	movs	r2, #0
 801223a:	4601      	mov	r1, r0
 801223c:	2036      	movs	r0, #54	; 0x36
 801223e:	f000 fc1d 	bl	8012a7c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8012242:	2036      	movs	r0, #54	; 0x36
 8012244:	f000 fc4e 	bl	8012ae4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8012248:	2400      	movs	r4, #0
 801224a:	9401      	str	r4, [sp, #4]
 801224c:	4b14      	ldr	r3, [pc, #80]	; (80122a0 <HAL_InitTick+0x6c>)
 801224e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012250:	f042 0210 	orr.w	r2, r2, #16
 8012254:	641a      	str	r2, [r3, #64]	; 0x40
 8012256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012258:	f003 0310 	and.w	r3, r3, #16
 801225c:	9301      	str	r3, [sp, #4]
 801225e:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012260:	a902      	add	r1, sp, #8
 8012262:	a803      	add	r0, sp, #12
 8012264:	f003 fb1e 	bl	80158a4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8012268:	f003 fafc 	bl	8015864 <HAL_RCC_GetPCLK1Freq>
 801226c:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801226e:	480d      	ldr	r0, [pc, #52]	; (80122a4 <HAL_InitTick+0x70>)
 8012270:	fba0 2303 	umull	r2, r3, r0, r3
 8012274:	0c9b      	lsrs	r3, r3, #18
 8012276:	3b01      	subs	r3, #1
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8012278:	480b      	ldr	r0, [pc, #44]	; (80122a8 <HAL_InitTick+0x74>)
 801227a:	4a0c      	ldr	r2, [pc, #48]	; (80122ac <HAL_InitTick+0x78>)
 801227c:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 801227e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8012282:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8012284:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8012286:	6104      	str	r4, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012288:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 801228a:	f004 fec1 	bl	8017010 <HAL_TIM_Base_Init>
 801228e:	b110      	cbz	r0, 8012296 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8012290:	2001      	movs	r0, #1
}
 8012292:	b008      	add	sp, #32
 8012294:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8012296:	4804      	ldr	r0, [pc, #16]	; (80122a8 <HAL_InitTick+0x74>)
 8012298:	f004 fd83 	bl	8016da2 <HAL_TIM_Base_Start_IT>
 801229c:	e7f9      	b.n	8012292 <HAL_InitTick+0x5e>
 801229e:	bf00      	nop
 80122a0:	40023800 	.word	0x40023800
 80122a4:	431bde83 	.word	0x431bde83
 80122a8:	200301b0 	.word	0x200301b0
 80122ac:	40001000 	.word	0x40001000

080122b0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80122b0:	4770      	bx	lr

080122b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80122b2:	e7fe      	b.n	80122b2 <HardFault_Handler>

080122b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80122b4:	e7fe      	b.n	80122b4 <MemManage_Handler>

080122b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80122b6:	e7fe      	b.n	80122b6 <BusFault_Handler>

080122b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80122b8:	e7fe      	b.n	80122b8 <UsageFault_Handler>

080122ba <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80122ba:	4770      	bx	lr

080122bc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80122bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80122be:	4802      	ldr	r0, [pc, #8]	; (80122c8 <TIM3_IRQHandler+0xc>)
 80122c0:	f004 fd84 	bl	8016dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80122c4:	bd08      	pop	{r3, pc}
 80122c6:	bf00      	nop
 80122c8:	2002ff18 	.word	0x2002ff18

080122cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80122cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80122ce:	4802      	ldr	r0, [pc, #8]	; (80122d8 <TIM4_IRQHandler+0xc>)
 80122d0:	f004 fd7c 	bl	8016dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80122d4:	bd08      	pop	{r3, pc}
 80122d6:	bf00      	nop
 80122d8:	2002fe3c 	.word	0x2002fe3c

080122dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80122dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80122de:	4802      	ldr	r0, [pc, #8]	; (80122e8 <TIM6_DAC_IRQHandler+0xc>)
 80122e0:	f004 fd74 	bl	8016dcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80122e4:	bd08      	pop	{r3, pc}
 80122e6:	bf00      	nop
 80122e8:	200301b0 	.word	0x200301b0

080122ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80122ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80122ee:	4802      	ldr	r0, [pc, #8]	; (80122f8 <DMA2_Stream1_IRQHandler+0xc>)
 80122f0:	f000 fd40 	bl	8012d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80122f4:	bd08      	pop	{r3, pc}
 80122f6:	bf00      	nop
 80122f8:	2002fddc 	.word	0x2002fddc

080122fc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80122fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80122fe:	4802      	ldr	r0, [pc, #8]	; (8012308 <DMA2_Stream6_IRQHandler+0xc>)
 8012300:	f000 fd38 	bl	8012d74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8012304:	bd08      	pop	{r3, pc}
 8012306:	bf00      	nop
 8012308:	2002ff58 	.word	0x2002ff58

0801230c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 801230c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 801230e:	4802      	ldr	r0, [pc, #8]	; (8012318 <LTDC_IRQHandler+0xc>)
 8012310:	f002 ff0b 	bl	801512a <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8012314:	bd08      	pop	{r3, pc}
 8012316:	bf00      	nop
 8012318:	20030684 	.word	0x20030684

0801231c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 801231c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 801231e:	4802      	ldr	r0, [pc, #8]	; (8012328 <DMA2D_IRQHandler+0xc>)
 8012320:	f000 fe47 	bl	8012fb2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8012324:	bd08      	pop	{r3, pc}
 8012326:	bf00      	nop
 8012328:	2003072c 	.word	0x2003072c

0801232c <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 801232c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 801232e:	4802      	ldr	r0, [pc, #8]	; (8012338 <DSI_IRQHandler+0xc>)
 8012330:	f001 f8a9 	bl	8013486 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8012334:	bd08      	pop	{r3, pc}
 8012336:	bf00      	nop
 8012338:	20030668 	.word	0x20030668

0801233c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801233c:	4b05      	ldr	r3, [pc, #20]	; (8012354 <SystemInit+0x18>)
 801233e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8012342:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8012346:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801234a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801234e:	609a      	str	r2, [r3, #8]
#endif
}
 8012350:	4770      	bx	lr
 8012352:	bf00      	nop
 8012354:	e000ed00 	.word	0xe000ed00

08012358 <UARTRECIVER>:
 *      Author: christiansager
 */
#include "main.h"
#include "UART_IO.h"
UART_HandleTypeDef huart6;
UARTRECIVER(){
 8012358:	b510      	push	{r4, lr}

	HAL_UART_DMAPause(&huart6);
 801235a:	4836      	ldr	r0, [pc, #216]	; (8012434 <UARTRECIVER+0xdc>)
 801235c:	f005 f91e 	bl	801759c <HAL_UART_DMAPause>
	 for(int i = 0; i<RX_IN_SIZE;i++){
 8012360:	2300      	movs	r3, #0
 8012362:	e008      	b.n	8012376 <UARTRECIVER+0x1e>
		 UARTDATA[i]	= 0x00;
 8012364:	2100      	movs	r1, #0
 8012366:	4a34      	ldr	r2, [pc, #208]	; (8012438 <UARTRECIVER+0xe0>)
 8012368:	54d1      	strb	r1, [r2, r3]
		 UART_RECIVE_temp[i] = UART_RECIVE[i];
 801236a:	4a34      	ldr	r2, [pc, #208]	; (801243c <UARTRECIVER+0xe4>)
 801236c:	5cd4      	ldrb	r4, [r2, r3]
 801236e:	4834      	ldr	r0, [pc, #208]	; (8012440 <UARTRECIVER+0xe8>)
 8012370:	54c4      	strb	r4, [r0, r3]
		 UART_RECIVE[i]=0;
 8012372:	54d1      	strb	r1, [r2, r3]
	 for(int i = 0; i<RX_IN_SIZE;i++){
 8012374:	3301      	adds	r3, #1
 8012376:	2bc7      	cmp	r3, #199	; 0xc7
 8012378:	ddf4      	ble.n	8012364 <UARTRECIVER+0xc>
	 }

	 HAL_UART_DMAResume(&huart6);
 801237a:	482e      	ldr	r0, [pc, #184]	; (8012434 <UARTRECIVER+0xdc>)
 801237c:	f005 f946 	bl	801760c <HAL_UART_DMAResume>

	 int start = 0;
	 int offset = 0;
	   	    	     for(int i = 0; i<RX_IN_SIZE;i++){
 8012380:	2300      	movs	r3, #0
 8012382:	e02d      	b.n	80123e0 <UARTRECIVER+0x88>
	   	    	    	 if (UART_RECIVE_temp[i] == '#' && UART_RECIVE_temp[i+1] == 's'&& UART_RECIVE_temp[i+2] == 't' &&UART_RECIVE_temp[i+3] == 'a'){
 8012384:	1c59      	adds	r1, r3, #1
 8012386:	482e      	ldr	r0, [pc, #184]	; (8012440 <UARTRECIVER+0xe8>)
 8012388:	5c41      	ldrb	r1, [r0, r1]
 801238a:	2973      	cmp	r1, #115	; 0x73
 801238c:	d12e      	bne.n	80123ec <UARTRECIVER+0x94>
 801238e:	1c99      	adds	r1, r3, #2
 8012390:	5c41      	ldrb	r1, [r0, r1]
 8012392:	2974      	cmp	r1, #116	; 0x74
 8012394:	d12a      	bne.n	80123ec <UARTRECIVER+0x94>
 8012396:	1cd9      	adds	r1, r3, #3
 8012398:	5c41      	ldrb	r1, [r0, r1]
 801239a:	2961      	cmp	r1, #97	; 0x61
 801239c:	d126      	bne.n	80123ec <UARTRECIVER+0x94>
 801239e:	e03d      	b.n	801241c <UARTRECIVER+0xc4>
	   	    	    		   start = i; //found start index @start
	   	    	    		   break;
	   	    	    	 }
	   	    	    	 if (UART_RECIVE_temp[i] == '#' && UART_RECIVE_temp[i+1] == 's'&& UART_RECIVE_temp[i+2] == 't' &&UART_RECIVE_temp[i-RX_IN_SIZE+3] == 'a'){
 80123a0:	1c59      	adds	r1, r3, #1
 80123a2:	4827      	ldr	r0, [pc, #156]	; (8012440 <UARTRECIVER+0xe8>)
 80123a4:	5c41      	ldrb	r1, [r0, r1]
 80123a6:	2973      	cmp	r1, #115	; 0x73
 80123a8:	d122      	bne.n	80123f0 <UARTRECIVER+0x98>
 80123aa:	1c99      	adds	r1, r3, #2
 80123ac:	5c41      	ldrb	r1, [r0, r1]
 80123ae:	2974      	cmp	r1, #116	; 0x74
 80123b0:	d11e      	bne.n	80123f0 <UARTRECIVER+0x98>
 80123b2:	f1a3 01c5 	sub.w	r1, r3, #197	; 0xc5
 80123b6:	5c41      	ldrb	r1, [r0, r1]
 80123b8:	2961      	cmp	r1, #97	; 0x61
 80123ba:	d119      	bne.n	80123f0 <UARTRECIVER+0x98>
 80123bc:	e02e      	b.n	801241c <UARTRECIVER+0xc4>
	   	    	    		   start = i; //found start index @start
	   	    	    		   break;
	   	    	    	 }
	   	    	    	 if (UART_RECIVE_temp[i] == '#' && UART_RECIVE_temp[i+1] == 's'&& UART_RECIVE_temp[i-RX_IN_SIZE+2] == 't' &&UART_RECIVE_temp[i-RX_IN_SIZE+3] == 'a'){
 80123be:	1c59      	adds	r1, r3, #1
 80123c0:	481f      	ldr	r0, [pc, #124]	; (8012440 <UARTRECIVER+0xe8>)
 80123c2:	5c41      	ldrb	r1, [r0, r1]
 80123c4:	2973      	cmp	r1, #115	; 0x73
 80123c6:	d115      	bne.n	80123f4 <UARTRECIVER+0x9c>
 80123c8:	f1a3 01c6 	sub.w	r1, r3, #198	; 0xc6
 80123cc:	5c41      	ldrb	r1, [r0, r1]
 80123ce:	2974      	cmp	r1, #116	; 0x74
 80123d0:	d110      	bne.n	80123f4 <UARTRECIVER+0x9c>
 80123d2:	f1a3 01c5 	sub.w	r1, r3, #197	; 0xc5
 80123d6:	5c41      	ldrb	r1, [r0, r1]
 80123d8:	2961      	cmp	r1, #97	; 0x61
 80123da:	d10b      	bne.n	80123f4 <UARTRECIVER+0x9c>
 80123dc:	e01e      	b.n	801241c <UARTRECIVER+0xc4>
	   	    	     for(int i = 0; i<RX_IN_SIZE;i++){
 80123de:	3301      	adds	r3, #1
 80123e0:	2bc7      	cmp	r3, #199	; 0xc7
 80123e2:	dc1a      	bgt.n	801241a <UARTRECIVER+0xc2>
	   	    	    	 if (UART_RECIVE_temp[i] == '#' && UART_RECIVE_temp[i+1] == 's'&& UART_RECIVE_temp[i+2] == 't' &&UART_RECIVE_temp[i+3] == 'a'){
 80123e4:	4a16      	ldr	r2, [pc, #88]	; (8012440 <UARTRECIVER+0xe8>)
 80123e6:	5cd2      	ldrb	r2, [r2, r3]
 80123e8:	2a23      	cmp	r2, #35	; 0x23
 80123ea:	d0cb      	beq.n	8012384 <UARTRECIVER+0x2c>
	   	    	    	 if (UART_RECIVE_temp[i] == '#' && UART_RECIVE_temp[i+1] == 's'&& UART_RECIVE_temp[i+2] == 't' &&UART_RECIVE_temp[i-RX_IN_SIZE+3] == 'a'){
 80123ec:	2a23      	cmp	r2, #35	; 0x23
 80123ee:	d0d7      	beq.n	80123a0 <UARTRECIVER+0x48>
	   	    	    	 if (UART_RECIVE_temp[i] == '#' && UART_RECIVE_temp[i+1] == 's'&& UART_RECIVE_temp[i-RX_IN_SIZE+2] == 't' &&UART_RECIVE_temp[i-RX_IN_SIZE+3] == 'a'){
 80123f0:	2a23      	cmp	r2, #35	; 0x23
 80123f2:	d0e4      	beq.n	80123be <UARTRECIVER+0x66>
	   	    	    		   start = i; //found start index @start
	   	    	    		   break;
	   	    	    	 }
	   	    	    	 if (UART_RECIVE_temp[i] == '#' && UART_RECIVE_temp[i-RX_IN_SIZE+1] == 's'&& UART_RECIVE_temp[i-RX_IN_SIZE+2] == 't' &&UART_RECIVE_temp[i-RX_IN_SIZE+3] == 'a'){
 80123f4:	2a23      	cmp	r2, #35	; 0x23
 80123f6:	d1f2      	bne.n	80123de <UARTRECIVER+0x86>
 80123f8:	f1a3 02c7 	sub.w	r2, r3, #199	; 0xc7
 80123fc:	4910      	ldr	r1, [pc, #64]	; (8012440 <UARTRECIVER+0xe8>)
 80123fe:	5c8a      	ldrb	r2, [r1, r2]
 8012400:	2a73      	cmp	r2, #115	; 0x73
 8012402:	d1ec      	bne.n	80123de <UARTRECIVER+0x86>
 8012404:	f1a3 02c6 	sub.w	r2, r3, #198	; 0xc6
 8012408:	5c8a      	ldrb	r2, [r1, r2]
 801240a:	2a74      	cmp	r2, #116	; 0x74
 801240c:	d1e7      	bne.n	80123de <UARTRECIVER+0x86>
 801240e:	f1a3 02c5 	sub.w	r2, r3, #197	; 0xc5
 8012412:	5c8a      	ldrb	r2, [r1, r2]
 8012414:	2a61      	cmp	r2, #97	; 0x61
 8012416:	d1e2      	bne.n	80123de <UARTRECIVER+0x86>
 8012418:	e000      	b.n	801241c <UARTRECIVER+0xc4>
	 int start = 0;
 801241a:	2300      	movs	r3, #0
	   	    	    	 }

	   	    	     }


	   	    	    	 for (int i = 0; i< 100;i++){
 801241c:	2200      	movs	r2, #0
 801241e:	e005      	b.n	801242c <UARTRECIVER+0xd4>
	   	    	    		UARTDATA[i] = UART_RECIVE_temp[i+start];
 8012420:	1899      	adds	r1, r3, r2
 8012422:	4807      	ldr	r0, [pc, #28]	; (8012440 <UARTRECIVER+0xe8>)
 8012424:	5c40      	ldrb	r0, [r0, r1]
 8012426:	4904      	ldr	r1, [pc, #16]	; (8012438 <UARTRECIVER+0xe0>)
 8012428:	5488      	strb	r0, [r1, r2]
	   	    	    	 for (int i = 0; i< 100;i++){
 801242a:	3201      	adds	r2, #1
 801242c:	2a63      	cmp	r2, #99	; 0x63
 801242e:	ddf7      	ble.n	8012420 <UARTRECIVER+0xc8>
	   	    	    	 }

}
 8012430:	bd10      	pop	{r4, pc}
 8012432:	bf00      	nop
 8012434:	20030098 	.word	0x20030098
 8012438:	2002e80c 	.word	0x2002e80c
 801243c:	2002e900 	.word	0x2002e900
 8012440:	2002ef18 	.word	0x2002ef18

08012444 <UARTSENDER>:


UARTSENDER(){
 8012444:	b508      	push	{r3, lr}
	HAL_UART_DMAPause(&huart6);
 8012446:	480b      	ldr	r0, [pc, #44]	; (8012474 <UARTSENDER+0x30>)
 8012448:	f005 f8a8 	bl	801759c <HAL_UART_DMAPause>



	uint8_t checksum = 0;
	uint16_t checksum16 = 0;
	for(int i = 0; i < 98; i++) {
 801244c:	2200      	movs	r2, #0
	uint16_t checksum16 = 0;
 801244e:	4613      	mov	r3, r2
	for(int i = 0; i < 98; i++) {
 8012450:	e004      	b.n	801245c <UARTSENDER+0x18>
			checksum += UART_TRANSFER[i];
			checksum16 += UART_TRANSFER[i];
 8012452:	4909      	ldr	r1, [pc, #36]	; (8012478 <UARTSENDER+0x34>)
 8012454:	5c89      	ldrb	r1, [r1, r2]
 8012456:	440b      	add	r3, r1
 8012458:	b29b      	uxth	r3, r3
	for(int i = 0; i < 98; i++) {
 801245a:	3201      	adds	r2, #1
 801245c:	2a61      	cmp	r2, #97	; 0x61
 801245e:	ddf8      	ble.n	8012452 <UARTSENDER+0xe>
		  }
	  UART_TRANSFER[98]=checksum16 & 0x00FF; //low byte
 8012460:	4a05      	ldr	r2, [pc, #20]	; (8012478 <UARTSENDER+0x34>)
 8012462:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
	  UART_TRANSFER[99]=checksum16 >> 8; //high byte
 8012466:	0a1b      	lsrs	r3, r3, #8
 8012468:	f882 3063 	strb.w	r3, [r2, #99]	; 0x63



	HAL_UART_DMAResume(&huart6);
 801246c:	4801      	ldr	r0, [pc, #4]	; (8012474 <UARTSENDER+0x30>)
 801246e:	f005 f8cd 	bl	801760c <HAL_UART_DMAResume>

}
 8012472:	bd08      	pop	{r3, pc}
 8012474:	20030098 	.word	0x20030098
 8012478:	2002ed90 	.word	0x2002ed90

0801247c <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 801247c:	4770      	bx	lr

0801247e <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 801247e:	2000      	movs	r0, #0
 8012480:	4770      	bx	lr

08012482 <ft6x06_TS_ClearIT>:
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Nothing to be done here for FT6206 */
}
 8012482:	4770      	bx	lr

08012484 <ft6x06_GetInstance>:
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8012484:	2300      	movs	r3, #0
 8012486:	2b01      	cmp	r3, #1
 8012488:	d806      	bhi.n	8012498 <ft6x06_GetInstance+0x14>
  {
    if(ft6x06[idx] == DeviceAddr)
 801248a:	4a05      	ldr	r2, [pc, #20]	; (80124a0 <ft6x06_GetInstance+0x1c>)
 801248c:	5cd2      	ldrb	r2, [r2, r3]
 801248e:	4282      	cmp	r2, r0
 8012490:	d003      	beq.n	801249a <ft6x06_GetInstance+0x16>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8012492:	3301      	adds	r3, #1
 8012494:	b2db      	uxtb	r3, r3
 8012496:	e7f6      	b.n	8012486 <ft6x06_GetInstance+0x2>
    {
      return idx; 
    }
  }
  
  return 0xFF;
 8012498:	23ff      	movs	r3, #255	; 0xff
}
 801249a:	4618      	mov	r0, r3
 801249c:	4770      	bx	lr
 801249e:	bf00      	nop
 80124a0:	200004f4 	.word	0x200004f4

080124a4 <ft6x06_Init>:
{  
 80124a4:	b510      	push	{r4, lr}
 80124a6:	4604      	mov	r4, r0
  instance = ft6x06_GetInstance(DeviceAddr);
 80124a8:	f7ff ffec 	bl	8012484 <ft6x06_GetInstance>
  if(instance == 0xFF)
 80124ac:	28ff      	cmp	r0, #255	; 0xff
 80124ae:	d000      	beq.n	80124b2 <ft6x06_Init+0xe>
}
 80124b0:	bd10      	pop	{r4, pc}
    empty = ft6x06_GetInstance(0);
 80124b2:	2000      	movs	r0, #0
 80124b4:	f7ff ffe6 	bl	8012484 <ft6x06_GetInstance>
    if(empty < FT6x06_MAX_INSTANCE)
 80124b8:	2801      	cmp	r0, #1
 80124ba:	d8f9      	bhi.n	80124b0 <ft6x06_Init+0xc>
      ft6x06[empty] = DeviceAddr;
 80124bc:	4b02      	ldr	r3, [pc, #8]	; (80124c8 <ft6x06_Init+0x24>)
 80124be:	541c      	strb	r4, [r3, r0]
      TS_IO_Init(); 
 80124c0:	f00c fb58 	bl	801eb74 <TS_IO_Init>
}
 80124c4:	e7f4      	b.n	80124b0 <ft6x06_Init+0xc>
 80124c6:	bf00      	nop
 80124c8:	200004f4 	.word	0x200004f4

080124cc <ft6x06_ReadID>:
{
 80124cc:	b510      	push	{r4, lr}
 80124ce:	4604      	mov	r4, r0
  TS_IO_Init();
 80124d0:	f00c fb50 	bl	801eb74 <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 80124d4:	21a8      	movs	r1, #168	; 0xa8
 80124d6:	b2e0      	uxtb	r0, r4
 80124d8:	f00c fb54 	bl	801eb84 <TS_IO_Read>
}
 80124dc:	bd10      	pop	{r4, pc}
	...

080124e0 <ft6x06_TS_DetectTouch>:
{
 80124e0:	b500      	push	{lr}
 80124e2:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 80124e4:	2300      	movs	r3, #0
 80124e6:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80124ea:	2102      	movs	r1, #2
 80124ec:	b2c0      	uxtb	r0, r0
 80124ee:	f00c fb49 	bl	801eb84 <TS_IO_Read>
 80124f2:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 80124f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80124fa:	f003 030f 	and.w	r3, r3, #15
 80124fe:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 8012502:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012506:	b2db      	uxtb	r3, r3
 8012508:	2b02      	cmp	r3, #2
 801250a:	d902      	bls.n	8012512 <ft6x06_TS_DetectTouch+0x32>
    nbTouch = 0;
 801250c:	2300      	movs	r3, #0
 801250e:	f88d 3007 	strb.w	r3, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 8012512:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012516:	4b04      	ldr	r3, [pc, #16]	; (8012528 <ft6x06_TS_DetectTouch+0x48>)
 8012518:	715a      	strb	r2, [r3, #5]
  ft6x06_handle.currActiveTouchIdx = 0;
 801251a:	2200      	movs	r2, #0
 801251c:	719a      	strb	r2, [r3, #6]
  return(nbTouch);
 801251e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8012522:	b003      	add	sp, #12
 8012524:	f85d fb04 	ldr.w	pc, [sp], #4
 8012528:	200004f4 	.word	0x200004f4

0801252c <ft6x06_TS_GetXY>:
{
 801252c:	b570      	push	{r4, r5, r6, lr}
 801252e:	b082      	sub	sp, #8
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 8012530:	4b16      	ldr	r3, [pc, #88]	; (801258c <ft6x06_TS_GetXY+0x60>)
 8012532:	799d      	ldrb	r5, [r3, #6]
 8012534:	795b      	ldrb	r3, [r3, #5]
 8012536:	429d      	cmp	r5, r3
 8012538:	d222      	bcs.n	8012580 <ft6x06_TS_GetXY+0x54>
    switch(ft6x06_handle.currActiveTouchIdx)
 801253a:	b32d      	cbz	r5, 8012588 <ft6x06_TS_GetXY+0x5c>
 801253c:	2d01      	cmp	r5, #1
 801253e:	d021      	beq.n	8012584 <ft6x06_TS_GetXY+0x58>
  uint8_t regAddress = 0;
 8012540:	2600      	movs	r6, #0
 8012542:	4614      	mov	r4, r2
 8012544:	460d      	mov	r5, r1
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8012546:	2304      	movs	r3, #4
 8012548:	eb0d 0203 	add.w	r2, sp, r3
 801254c:	4631      	mov	r1, r6
 801254e:	b2c0      	uxtb	r0, r0
 8012550:	f00c fb1c 	bl	801eb8c <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8012554:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012558:	021b      	lsls	r3, r3, #8
 801255a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801255e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8012562:	4313      	orrs	r3, r2
 8012564:	802b      	strh	r3, [r5, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8012566:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801256a:	021b      	lsls	r3, r3, #8
 801256c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8012570:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8012574:	4313      	orrs	r3, r2
 8012576:	8023      	strh	r3, [r4, #0]
    ft6x06_handle.currActiveTouchIdx++;
 8012578:	4a04      	ldr	r2, [pc, #16]	; (801258c <ft6x06_TS_GetXY+0x60>)
 801257a:	7993      	ldrb	r3, [r2, #6]
 801257c:	3301      	adds	r3, #1
 801257e:	7193      	strb	r3, [r2, #6]
}
 8012580:	b002      	add	sp, #8
 8012582:	bd70      	pop	{r4, r5, r6, pc}
      regAddress = FT6206_P2_XH_REG; 
 8012584:	2609      	movs	r6, #9
      break;
 8012586:	e7dc      	b.n	8012542 <ft6x06_TS_GetXY+0x16>
      regAddress = FT6206_P1_XH_REG; 
 8012588:	2603      	movs	r6, #3
 801258a:	e7da      	b.n	8012542 <ft6x06_TS_GetXY+0x16>
 801258c:	200004f4 	.word	0x200004f4

08012590 <ft6x06_TS_EnableIT>:
{
 8012590:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 8012592:	2201      	movs	r2, #1
 8012594:	21a4      	movs	r1, #164	; 0xa4
 8012596:	b2c0      	uxtb	r0, r0
 8012598:	f00c faf0 	bl	801eb7c <TS_IO_Write>
}
 801259c:	bd08      	pop	{r3, pc}

0801259e <ft6x06_TS_DisableIT>:
{
 801259e:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 80125a0:	2200      	movs	r2, #0
 80125a2:	21a4      	movs	r1, #164	; 0xa4
 80125a4:	b2c0      	uxtb	r0, r0
 80125a6:	f00c fae9 	bl	801eb7c <TS_IO_Write>
}
 80125aa:	bd08      	pop	{r3, pc}

080125ac <ft6x06_TS_Start>:
{
 80125ac:	b508      	push	{r3, lr}
  ft6x06_TS_DisableIT(DeviceAddr);
 80125ae:	f7ff fff6 	bl	801259e <ft6x06_TS_DisableIT>
}
 80125b2:	bd08      	pop	{r3, pc}

080125b4 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80125b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125b8:	b083      	sub	sp, #12
 80125ba:	4683      	mov	fp, r0
 80125bc:	9101      	str	r1, [sp, #4]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80125be:	4cf8      	ldr	r4, [pc, #992]	; (80129a0 <OTM8009A_Init+0x3ec>)
 80125c0:	4621      	mov	r1, r4
 80125c2:	2000      	movs	r0, #0
 80125c4:	f00b fe30 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 80125c8:	1d21      	adds	r1, r4, #4
 80125ca:	2003      	movs	r0, #3
 80125cc:	f00b fe2c 	bl	801e228 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 80125d0:	f104 0508 	add.w	r5, r4, #8
 80125d4:	4629      	mov	r1, r5
 80125d6:	2000      	movs	r0, #0
 80125d8:	f00b fe26 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 80125dc:	f104 010c 	add.w	r1, r4, #12
 80125e0:	2002      	movs	r0, #2
 80125e2:	f00b fe21 	bl	801e228 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80125e6:	4629      	mov	r1, r5
 80125e8:	2000      	movs	r0, #0
 80125ea:	f00b fe1d 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 80125ee:	f104 0110 	add.w	r1, r4, #16
 80125f2:	2000      	movs	r0, #0
 80125f4:	f00b fe18 	bl	801e228 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80125f8:	200a      	movs	r0, #10
 80125fa:	f00b fe31 	bl	801e260 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80125fe:	f104 0114 	add.w	r1, r4, #20
 8012602:	2000      	movs	r0, #0
 8012604:	f00b fe10 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 8012608:	f104 0118 	add.w	r1, r4, #24
 801260c:	2000      	movs	r0, #0
 801260e:	f00b fe0b 	bl	801e228 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 8012612:	200a      	movs	r0, #10
 8012614:	f00b fe24 	bl	801e260 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8012618:	f104 011c 	add.w	r1, r4, #28
 801261c:	2000      	movs	r0, #0
 801261e:	f00b fe03 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 8012622:	f104 0120 	add.w	r1, r4, #32
 8012626:	2000      	movs	r0, #0
 8012628:	f00b fdfe 	bl	801e228 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 801262c:	f104 0124 	add.w	r1, r4, #36	; 0x24
 8012630:	2000      	movs	r0, #0
 8012632:	f00b fdf9 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8012636:	f104 0728 	add.w	r7, r4, #40	; 0x28
 801263a:	4639      	mov	r1, r7
 801263c:	2000      	movs	r0, #0
 801263e:	f00b fdf3 	bl	801e228 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 8012642:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8012646:	2000      	movs	r0, #0
 8012648:	f00b fdee 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 801264c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012650:	2000      	movs	r0, #0
 8012652:	f00b fde9 	bl	801e228 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8012656:	4621      	mov	r1, r4
 8012658:	2000      	movs	r0, #0
 801265a:	f00b fde5 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 801265e:	f104 0134 	add.w	r1, r4, #52	; 0x34
 8012662:	2000      	movs	r0, #0
 8012664:	f00b fde0 	bl	801e228 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8012668:	f104 0a38 	add.w	sl, r4, #56	; 0x38
 801266c:	4651      	mov	r1, sl
 801266e:	2000      	movs	r0, #0
 8012670:	f00b fdda 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8012674:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8012678:	2000      	movs	r0, #0
 801267a:	f00b fdd5 	bl	801e228 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 801267e:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8012682:	4631      	mov	r1, r6
 8012684:	2000      	movs	r0, #0
 8012686:	f00b fdcf 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 801268a:	f104 0144 	add.w	r1, r4, #68	; 0x44
 801268e:	2000      	movs	r0, #0
 8012690:	f00b fdca 	bl	801e228 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8012694:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8012698:	2000      	movs	r0, #0
 801269a:	f00b fdc5 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 801269e:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 80126a2:	2000      	movs	r0, #0
 80126a4:	f00b fdc0 	bl	801e228 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 80126a8:	f104 0150 	add.w	r1, r4, #80	; 0x50
 80126ac:	2000      	movs	r0, #0
 80126ae:	f00b fdbb 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 80126b2:	4639      	mov	r1, r7
 80126b4:	2000      	movs	r0, #0
 80126b6:	f00b fdb7 	bl	801e228 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80126ba:	4621      	mov	r1, r4
 80126bc:	2000      	movs	r0, #0
 80126be:	f00b fdb3 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80126c2:	f104 0154 	add.w	r1, r4, #84	; 0x54
 80126c6:	2002      	movs	r0, #2
 80126c8:	f00b fdae 	bl	801e228 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80126cc:	f104 0158 	add.w	r1, r4, #88	; 0x58
 80126d0:	2000      	movs	r0, #0
 80126d2:	f00b fda9 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80126d6:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 80126da:	2000      	movs	r0, #0
 80126dc:	f00b fda4 	bl	801e228 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80126e0:	f104 0160 	add.w	r1, r4, #96	; 0x60
 80126e4:	2000      	movs	r0, #0
 80126e6:	f00b fd9f 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80126ea:	f104 0164 	add.w	r1, r4, #100	; 0x64
 80126ee:	2000      	movs	r0, #0
 80126f0:	f00b fd9a 	bl	801e228 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80126f4:	f104 0168 	add.w	r1, r4, #104	; 0x68
 80126f8:	2000      	movs	r0, #0
 80126fa:	f00b fd95 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 80126fe:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8012702:	2000      	movs	r0, #0
 8012704:	f00b fd90 	bl	801e228 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8012708:	4651      	mov	r1, sl
 801270a:	2000      	movs	r0, #0
 801270c:	f00b fd8c 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 8012710:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8012714:	2000      	movs	r0, #0
 8012716:	f00b fd87 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 801271a:	4631      	mov	r1, r6
 801271c:	2000      	movs	r0, #0
 801271e:	f00b fd83 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 8012722:	f104 0174 	add.w	r1, r4, #116	; 0x74
 8012726:	2000      	movs	r0, #0
 8012728:	f00b fd7e 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 801272c:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8012730:	2000      	movs	r0, #0
 8012732:	f00b fd79 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8012736:	f104 017c 	add.w	r1, r4, #124	; 0x7c
 801273a:	2002      	movs	r0, #2
 801273c:	f00b fd74 	bl	801e228 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8012740:	4629      	mov	r1, r5
 8012742:	2000      	movs	r0, #0
 8012744:	f00b fd70 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8012748:	f104 0180 	add.w	r1, r4, #128	; 0x80
 801274c:	2006      	movs	r0, #6
 801274e:	f00b fd6b 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8012752:	f104 0988 	add.w	r9, r4, #136	; 0x88
 8012756:	4649      	mov	r1, r9
 8012758:	2000      	movs	r0, #0
 801275a:	f00b fd65 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 801275e:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 8012762:	200e      	movs	r0, #14
 8012764:	f00b fd60 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8012768:	f104 089c 	add.w	r8, r4, #156	; 0x9c
 801276c:	4641      	mov	r1, r8
 801276e:	2000      	movs	r0, #0
 8012770:	f00b fd5a 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8012774:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 8012778:	200e      	movs	r0, #14
 801277a:	f00b fd55 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 801277e:	f104 07b0 	add.w	r7, r4, #176	; 0xb0
 8012782:	4639      	mov	r1, r7
 8012784:	2000      	movs	r0, #0
 8012786:	f00b fd4f 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 801278a:	f104 01b4 	add.w	r1, r4, #180	; 0xb4
 801278e:	200a      	movs	r0, #10
 8012790:	f00b fd4a 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8012794:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 8012798:	4631      	mov	r1, r6
 801279a:	2000      	movs	r0, #0
 801279c:	f00b fd44 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 80127a0:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 80127a4:	2000      	movs	r0, #0
 80127a6:	f00b fd3f 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80127aa:	4629      	mov	r1, r5
 80127ac:	2000      	movs	r0, #0
 80127ae:	f00b fd3b 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 80127b2:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 80127b6:	200a      	movs	r0, #10
 80127b8:	f00b fd36 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80127bc:	f104 01d4 	add.w	r1, r4, #212	; 0xd4
 80127c0:	2000      	movs	r0, #0
 80127c2:	f00b fd31 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80127c6:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
 80127ca:	200f      	movs	r0, #15
 80127cc:	f00b fd2c 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80127d0:	4649      	mov	r1, r9
 80127d2:	2000      	movs	r0, #0
 80127d4:	f00b fd28 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80127d8:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
 80127dc:	200f      	movs	r0, #15
 80127de:	f00b fd23 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80127e2:	4641      	mov	r1, r8
 80127e4:	2000      	movs	r0, #0
 80127e6:	f00b fd1f 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80127ea:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 80127ee:	200a      	movs	r0, #10
 80127f0:	f00b fd1a 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80127f4:	4639      	mov	r1, r7
 80127f6:	2000      	movs	r0, #0
 80127f8:	f00b fd16 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80127fc:	f504 7182 	add.w	r1, r4, #260	; 0x104
 8012800:	200f      	movs	r0, #15
 8012802:	f00b fd11 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8012806:	4631      	mov	r1, r6
 8012808:	2000      	movs	r0, #0
 801280a:	f00b fd0d 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 801280e:	f504 718a 	add.w	r1, r4, #276	; 0x114
 8012812:	200f      	movs	r0, #15
 8012814:	f00b fd08 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8012818:	f504 7192 	add.w	r1, r4, #292	; 0x124
 801281c:	2000      	movs	r0, #0
 801281e:	f00b fd03 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 8012822:	f504 7194 	add.w	r1, r4, #296	; 0x128
 8012826:	200a      	movs	r0, #10
 8012828:	f00b fcfe 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 801282c:	f504 719a 	add.w	r1, r4, #308	; 0x134
 8012830:	2000      	movs	r0, #0
 8012832:	f00b fcf9 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8012836:	f504 719c 	add.w	r1, r4, #312	; 0x138
 801283a:	200a      	movs	r0, #10
 801283c:	f00b fcf4 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8012840:	4629      	mov	r1, r5
 8012842:	2000      	movs	r0, #0
 8012844:	f00b fcf0 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8012848:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 801284c:	200a      	movs	r0, #10
 801284e:	f00b fceb 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 8012852:	f104 01d4 	add.w	r1, r4, #212	; 0xd4
 8012856:	2000      	movs	r0, #0
 8012858:	f00b fce6 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 801285c:	f504 71a8 	add.w	r1, r4, #336	; 0x150
 8012860:	200f      	movs	r0, #15
 8012862:	f00b fce1 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8012866:	4649      	mov	r1, r9
 8012868:	2000      	movs	r0, #0
 801286a:	f00b fcdd 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 801286e:	f504 71b0 	add.w	r1, r4, #352	; 0x160
 8012872:	200f      	movs	r0, #15
 8012874:	f00b fcd8 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8012878:	4641      	mov	r1, r8
 801287a:	2000      	movs	r0, #0
 801287c:	f00b fcd4 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 8012880:	f504 71b8 	add.w	r1, r4, #368	; 0x170
 8012884:	200a      	movs	r0, #10
 8012886:	f00b fccf 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 801288a:	4639      	mov	r1, r7
 801288c:	2000      	movs	r0, #0
 801288e:	f00b fccb 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 8012892:	f504 71be 	add.w	r1, r4, #380	; 0x17c
 8012896:	200f      	movs	r0, #15
 8012898:	f00b fcc6 	bl	801e228 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 801289c:	4631      	mov	r1, r6
 801289e:	2000      	movs	r0, #0
 80128a0:	f00b fcc2 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 80128a4:	f504 71c6 	add.w	r1, r4, #396	; 0x18c
 80128a8:	200f      	movs	r0, #15
 80128aa:	f00b fcbd 	bl	801e228 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80128ae:	4651      	mov	r1, sl
 80128b0:	2000      	movs	r0, #0
 80128b2:	f00b fcb9 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80128b6:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
 80128ba:	2000      	movs	r0, #0
 80128bc:	f00b fcb4 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80128c0:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
 80128c4:	2000      	movs	r0, #0
 80128c6:	f00b fcaf 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80128ca:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
 80128ce:	2000      	movs	r0, #0
 80128d0:	f00b fcaa 	bl	801e228 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 80128d4:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
 80128d8:	2000      	movs	r0, #0
 80128da:	f00b fca5 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 80128de:	f504 71d6 	add.w	r1, r4, #428	; 0x1ac
 80128e2:	2000      	movs	r0, #0
 80128e4:	f00b fca0 	bl	801e228 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80128e8:	4621      	mov	r1, r4
 80128ea:	2000      	movs	r0, #0
 80128ec:	f00b fc9c 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80128f0:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
 80128f4:	2003      	movs	r0, #3
 80128f6:	f00b fc97 	bl	801e228 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80128fa:	4621      	mov	r1, r4
 80128fc:	2000      	movs	r0, #0
 80128fe:	f00b fc93 	bl	801e228 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8012902:	4621      	mov	r1, r4
 8012904:	2000      	movs	r0, #0
 8012906:	f00b fc8f 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 801290a:	f504 71da 	add.w	r1, r4, #436	; 0x1b4
 801290e:	2010      	movs	r0, #16
 8012910:	f00b fc8a 	bl	801e228 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8012914:	4621      	mov	r1, r4
 8012916:	2000      	movs	r0, #0
 8012918:	f00b fc86 	bl	801e228 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 801291c:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
 8012920:	2010      	movs	r0, #16
 8012922:	f00b fc81 	bl	801e228 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8012926:	f504 71ee 	add.w	r1, r4, #476	; 0x1dc
 801292a:	2000      	movs	r0, #0
 801292c:	f00b fc7c 	bl	801e228 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 8012930:	2078      	movs	r0, #120	; 0x78
 8012932:	f00b fc95 	bl	801e260 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8012936:	f1bb 0f00 	cmp.w	fp, #0
 801293a:	d033      	beq.n	80129a4 <OTM8009A_Init+0x3f0>
 801293c:	f1bb 0f02 	cmp.w	fp, #2
 8012940:	d104      	bne.n	801294c <OTM8009A_Init+0x398>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 8012942:	f504 71f0 	add.w	r1, r4, #480	; 0x1e0
 8012946:	2000      	movs	r0, #0
 8012948:	f00b fc6e 	bl	801e228 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 801294c:	9b01      	ldr	r3, [sp, #4]
 801294e:	2b01      	cmp	r3, #1
 8012950:	d02d      	beq.n	80129ae <OTM8009A_Init+0x3fa>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 8012952:	4c13      	ldr	r4, [pc, #76]	; (80129a0 <OTM8009A_Init+0x3ec>)
 8012954:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
 8012958:	2000      	movs	r0, #0
 801295a:	f00b fc65 	bl	801e228 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 801295e:	f504 7100 	add.w	r1, r4, #512	; 0x200
 8012962:	2000      	movs	r0, #0
 8012964:	f00b fc60 	bl	801e228 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8012968:	f504 7101 	add.w	r1, r4, #516	; 0x204
 801296c:	2000      	movs	r0, #0
 801296e:	f00b fc5b 	bl	801e228 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 8012972:	f504 7102 	add.w	r1, r4, #520	; 0x208
 8012976:	2000      	movs	r0, #0
 8012978:	f00b fc56 	bl	801e228 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 801297c:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8012980:	2000      	movs	r0, #0
 8012982:	f00b fc51 	bl	801e228 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8012986:	4621      	mov	r1, r4
 8012988:	2000      	movs	r0, #0
 801298a:	f00b fc4d 	bl	801e228 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 801298e:	f504 7104 	add.w	r1, r4, #528	; 0x210
 8012992:	2000      	movs	r0, #0
 8012994:	f00b fc48 	bl	801e228 <DSI_IO_WriteCmd>

  return 0;
}
 8012998:	2000      	movs	r0, #0
 801299a:	b003      	add	sp, #12
 801299c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129a0:	0802ed4c 	.word	0x0802ed4c
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 80129a4:	490a      	ldr	r1, [pc, #40]	; (80129d0 <OTM8009A_Init+0x41c>)
 80129a6:	2000      	movs	r0, #0
 80129a8:	f00b fc3e 	bl	801e228 <DSI_IO_WriteCmd>
    break;
 80129ac:	e7ce      	b.n	801294c <OTM8009A_Init+0x398>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 80129ae:	4c09      	ldr	r4, [pc, #36]	; (80129d4 <OTM8009A_Init+0x420>)
 80129b0:	f504 71f4 	add.w	r1, r4, #488	; 0x1e8
 80129b4:	2000      	movs	r0, #0
 80129b6:	f00b fc37 	bl	801e228 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 80129ba:	f504 71f6 	add.w	r1, r4, #492	; 0x1ec
 80129be:	2004      	movs	r0, #4
 80129c0:	f00b fc32 	bl	801e228 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 80129c4:	f504 71fa 	add.w	r1, r4, #500	; 0x1f4
 80129c8:	2004      	movs	r0, #4
 80129ca:	f00b fc2d 	bl	801e228 <DSI_IO_WriteCmd>
 80129ce:	e7c0      	b.n	8012952 <OTM8009A_Init+0x39e>
 80129d0:	0802ef30 	.word	0x0802ef30
 80129d4:	0802ed4c 	.word	0x0802ed4c

080129d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80129d8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80129da:	4b0b      	ldr	r3, [pc, #44]	; (8012a08 <HAL_Init+0x30>)
 80129dc:	681a      	ldr	r2, [r3, #0]
 80129de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80129e2:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80129e4:	681a      	ldr	r2, [r3, #0]
 80129e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80129ea:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80129ec:	681a      	ldr	r2, [r3, #0]
 80129ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80129f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80129f4:	2003      	movs	r0, #3
 80129f6:	f000 f82f 	bl	8012a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80129fa:	2000      	movs	r0, #0
 80129fc:	f7ff fc1a 	bl	8012234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8012a00:	f7ff f94c 	bl	8011c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8012a04:	2000      	movs	r0, #0
 8012a06:	bd08      	pop	{r3, pc}
 8012a08:	40023c00 	.word	0x40023c00

08012a0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8012a0c:	4a03      	ldr	r2, [pc, #12]	; (8012a1c <HAL_IncTick+0x10>)
 8012a0e:	6811      	ldr	r1, [r2, #0]
 8012a10:	4b03      	ldr	r3, [pc, #12]	; (8012a20 <HAL_IncTick+0x14>)
 8012a12:	781b      	ldrb	r3, [r3, #0]
 8012a14:	440b      	add	r3, r1
 8012a16:	6013      	str	r3, [r2, #0]
}
 8012a18:	4770      	bx	lr
 8012a1a:	bf00      	nop
 8012a1c:	200301f0 	.word	0x200301f0
 8012a20:	20000088 	.word	0x20000088

08012a24 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8012a24:	4b01      	ldr	r3, [pc, #4]	; (8012a2c <HAL_GetTick+0x8>)
 8012a26:	6818      	ldr	r0, [r3, #0]
}
 8012a28:	4770      	bx	lr
 8012a2a:	bf00      	nop
 8012a2c:	200301f0 	.word	0x200301f0

08012a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012a30:	b538      	push	{r3, r4, r5, lr}
 8012a32:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8012a34:	f7ff fff6 	bl	8012a24 <HAL_GetTick>
 8012a38:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8012a3a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8012a3e:	d002      	beq.n	8012a46 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8012a40:	4b04      	ldr	r3, [pc, #16]	; (8012a54 <HAL_Delay+0x24>)
 8012a42:	781b      	ldrb	r3, [r3, #0]
 8012a44:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8012a46:	f7ff ffed 	bl	8012a24 <HAL_GetTick>
 8012a4a:	1b40      	subs	r0, r0, r5
 8012a4c:	42a0      	cmp	r0, r4
 8012a4e:	d3fa      	bcc.n	8012a46 <HAL_Delay+0x16>
  {
  }
}
 8012a50:	bd38      	pop	{r3, r4, r5, pc}
 8012a52:	bf00      	nop
 8012a54:	20000088 	.word	0x20000088

08012a58 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012a58:	4a07      	ldr	r2, [pc, #28]	; (8012a78 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8012a5a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012a5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8012a60:	041b      	lsls	r3, r3, #16
 8012a62:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012a64:	0200      	lsls	r0, r0, #8
 8012a66:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012a6a:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8012a6c:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8012a70:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8012a74:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8012a76:	4770      	bx	lr
 8012a78:	e000ed00 	.word	0xe000ed00

08012a7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8012a7c:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012a7e:	4b17      	ldr	r3, [pc, #92]	; (8012adc <HAL_NVIC_SetPriority+0x60>)
 8012a80:	68db      	ldr	r3, [r3, #12]
 8012a82:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012a86:	f1c3 0407 	rsb	r4, r3, #7
 8012a8a:	2c04      	cmp	r4, #4
 8012a8c:	bf28      	it	cs
 8012a8e:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012a90:	1d1d      	adds	r5, r3, #4
 8012a92:	2d06      	cmp	r5, #6
 8012a94:	d918      	bls.n	8012ac8 <HAL_NVIC_SetPriority+0x4c>
 8012a96:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012a98:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8012a9c:	fa05 f404 	lsl.w	r4, r5, r4
 8012aa0:	ea21 0104 	bic.w	r1, r1, r4
 8012aa4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012aa6:	fa05 f303 	lsl.w	r3, r5, r3
 8012aaa:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012aae:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8012ab0:	2800      	cmp	r0, #0
 8012ab2:	db0b      	blt.n	8012acc <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012ab4:	0109      	lsls	r1, r1, #4
 8012ab6:	b2c9      	uxtb	r1, r1
 8012ab8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8012abc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8012ac0:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8012ac4:	bc30      	pop	{r4, r5}
 8012ac6:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012ac8:	2300      	movs	r3, #0
 8012aca:	e7e5      	b.n	8012a98 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012acc:	f000 000f 	and.w	r0, r0, #15
 8012ad0:	0109      	lsls	r1, r1, #4
 8012ad2:	b2c9      	uxtb	r1, r1
 8012ad4:	4b02      	ldr	r3, [pc, #8]	; (8012ae0 <HAL_NVIC_SetPriority+0x64>)
 8012ad6:	5419      	strb	r1, [r3, r0]
 8012ad8:	e7f4      	b.n	8012ac4 <HAL_NVIC_SetPriority+0x48>
 8012ada:	bf00      	nop
 8012adc:	e000ed00 	.word	0xe000ed00
 8012ae0:	e000ed14 	.word	0xe000ed14

08012ae4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8012ae4:	2800      	cmp	r0, #0
 8012ae6:	db07      	blt.n	8012af8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012ae8:	f000 021f 	and.w	r2, r0, #31
 8012aec:	0940      	lsrs	r0, r0, #5
 8012aee:	2301      	movs	r3, #1
 8012af0:	4093      	lsls	r3, r2
 8012af2:	4a02      	ldr	r2, [pc, #8]	; (8012afc <HAL_NVIC_EnableIRQ+0x18>)
 8012af4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8012af8:	4770      	bx	lr
 8012afa:	bf00      	nop
 8012afc:	e000e100 	.word	0xe000e100

08012b00 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8012b00:	2800      	cmp	r0, #0
 8012b02:	db0c      	blt.n	8012b1e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012b04:	f000 021f 	and.w	r2, r0, #31
 8012b08:	0940      	lsrs	r0, r0, #5
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	4093      	lsls	r3, r2
 8012b0e:	3020      	adds	r0, #32
 8012b10:	4a03      	ldr	r2, [pc, #12]	; (8012b20 <HAL_NVIC_DisableIRQ+0x20>)
 8012b12:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8012b16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012b1a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8012b1e:	4770      	bx	lr
 8012b20:	e000e100 	.word	0xe000e100

08012b24 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8012b24:	b158      	cbz	r0, 8012b3e <HAL_CRC_Init+0x1a>
{
 8012b26:	b510      	push	{r4, lr}
 8012b28:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8012b2a:	7943      	ldrb	r3, [r0, #5]
 8012b2c:	b11b      	cbz	r3, 8012b36 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8012b2e:	2301      	movs	r3, #1
 8012b30:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8012b32:	2000      	movs	r0, #0
}
 8012b34:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8012b36:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8012b38:	f7ff f8cc 	bl	8011cd4 <HAL_CRC_MspInit>
 8012b3c:	e7f7      	b.n	8012b2e <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8012b3e:	2001      	movs	r0, #1
}
 8012b40:	4770      	bx	lr

08012b42 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8012b42:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8012b44:	6805      	ldr	r5, [r0, #0]
 8012b46:	682c      	ldr	r4, [r5, #0]
 8012b48:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8012b4c:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8012b4e:	6804      	ldr	r4, [r0, #0]
 8012b50:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012b52:	6883      	ldr	r3, [r0, #8]
 8012b54:	2b40      	cmp	r3, #64	; 0x40
 8012b56:	d005      	beq.n	8012b64 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8012b58:	6803      	ldr	r3, [r0, #0]
 8012b5a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8012b5c:	6803      	ldr	r3, [r0, #0]
 8012b5e:	60da      	str	r2, [r3, #12]
  }
}
 8012b60:	bc30      	pop	{r4, r5}
 8012b62:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8012b64:	6803      	ldr	r3, [r0, #0]
 8012b66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8012b68:	6803      	ldr	r3, [r0, #0]
 8012b6a:	60d9      	str	r1, [r3, #12]
 8012b6c:	e7f8      	b.n	8012b60 <DMA_SetConfig+0x1e>
	...

08012b70 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8012b70:	6802      	ldr	r2, [r0, #0]
 8012b72:	b2d3      	uxtb	r3, r2
 8012b74:	3b10      	subs	r3, #16
 8012b76:	490b      	ldr	r1, [pc, #44]	; (8012ba4 <DMA_CalcBaseAndBitshift+0x34>)
 8012b78:	fba1 1303 	umull	r1, r3, r1, r3
 8012b7c:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8012b7e:	490a      	ldr	r1, [pc, #40]	; (8012ba8 <DMA_CalcBaseAndBitshift+0x38>)
 8012b80:	5cc9      	ldrb	r1, [r1, r3]
 8012b82:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8012b84:	2b03      	cmp	r3, #3
 8012b86:	d806      	bhi.n	8012b96 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8012b88:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8012b8c:	f022 0203 	bic.w	r2, r2, #3
 8012b90:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8012b92:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8012b94:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8012b96:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8012b9a:	f022 0203 	bic.w	r2, r2, #3
 8012b9e:	3204      	adds	r2, #4
 8012ba0:	6582      	str	r2, [r0, #88]	; 0x58
 8012ba2:	e7f6      	b.n	8012b92 <DMA_CalcBaseAndBitshift+0x22>
 8012ba4:	aaaaaaab 	.word	0xaaaaaaab
 8012ba8:	0802ef60 	.word	0x0802ef60

08012bac <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8012bac:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8012bae:	6982      	ldr	r2, [r0, #24]
 8012bb0:	b992      	cbnz	r2, 8012bd8 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8012bb2:	2b01      	cmp	r3, #1
 8012bb4:	d00a      	beq.n	8012bcc <DMA_CheckFifoParam+0x20>
 8012bb6:	b11b      	cbz	r3, 8012bc0 <DMA_CheckFifoParam+0x14>
 8012bb8:	2b02      	cmp	r3, #2
 8012bba:	d001      	beq.n	8012bc0 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8012bbc:	2000      	movs	r0, #0
 8012bbe:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012bc0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8012bc2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8012bc6:	d12c      	bne.n	8012c22 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8012bc8:	2000      	movs	r0, #0
 8012bca:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012bcc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8012bce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8012bd2:	d028      	beq.n	8012c26 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8012bd4:	2000      	movs	r0, #0
 8012bd6:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8012bd8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8012bdc:	d005      	beq.n	8012bea <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8012bde:	2b02      	cmp	r3, #2
 8012be0:	d929      	bls.n	8012c36 <DMA_CheckFifoParam+0x8a>
 8012be2:	2b03      	cmp	r3, #3
 8012be4:	d015      	beq.n	8012c12 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8012be6:	2000      	movs	r0, #0
 8012be8:	4770      	bx	lr
    switch (tmp)
 8012bea:	2b03      	cmp	r3, #3
 8012bec:	d803      	bhi.n	8012bf6 <DMA_CheckFifoParam+0x4a>
 8012bee:	e8df f003 	tbb	[pc, r3]
 8012bf2:	041c      	.short	0x041c
 8012bf4:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8012bf6:	2000      	movs	r0, #0
 8012bf8:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012bfa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8012bfc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8012c00:	d115      	bne.n	8012c2e <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8012c02:	2000      	movs	r0, #0
 8012c04:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8012c06:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8012c08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8012c0c:	d011      	beq.n	8012c32 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8012c0e:	2000      	movs	r0, #0
 8012c10:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8012c12:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8012c14:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8012c18:	d001      	beq.n	8012c1e <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8012c1a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8012c1c:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8012c1e:	2000      	movs	r0, #0
 8012c20:	4770      	bx	lr
        status = HAL_ERROR;
 8012c22:	2001      	movs	r0, #1
 8012c24:	4770      	bx	lr
        status = HAL_ERROR;
 8012c26:	2001      	movs	r0, #1
 8012c28:	4770      	bx	lr
      status = HAL_ERROR;
 8012c2a:	2001      	movs	r0, #1
 8012c2c:	4770      	bx	lr
        status = HAL_ERROR;
 8012c2e:	2001      	movs	r0, #1
 8012c30:	4770      	bx	lr
        status = HAL_ERROR;
 8012c32:	2001      	movs	r0, #1
 8012c34:	4770      	bx	lr
      status = HAL_ERROR;
 8012c36:	2001      	movs	r0, #1
 8012c38:	4770      	bx	lr
	...

08012c3c <HAL_DMA_Init>:
{
 8012c3c:	b570      	push	{r4, r5, r6, lr}
 8012c3e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8012c40:	f7ff fef0 	bl	8012a24 <HAL_GetTick>
  if(hdma == NULL)
 8012c44:	2c00      	cmp	r4, #0
 8012c46:	d05b      	beq.n	8012d00 <HAL_DMA_Init+0xc4>
 8012c48:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8012c50:	2302      	movs	r3, #2
 8012c52:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8012c56:	6822      	ldr	r2, [r4, #0]
 8012c58:	6813      	ldr	r3, [r2, #0]
 8012c5a:	f023 0301 	bic.w	r3, r3, #1
 8012c5e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8012c60:	6823      	ldr	r3, [r4, #0]
 8012c62:	681a      	ldr	r2, [r3, #0]
 8012c64:	f012 0f01 	tst.w	r2, #1
 8012c68:	d00a      	beq.n	8012c80 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8012c6a:	f7ff fedb 	bl	8012a24 <HAL_GetTick>
 8012c6e:	1b40      	subs	r0, r0, r5
 8012c70:	2805      	cmp	r0, #5
 8012c72:	d9f5      	bls.n	8012c60 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012c74:	2320      	movs	r3, #32
 8012c76:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8012c78:	2003      	movs	r0, #3
 8012c7a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8012c7e:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8012c80:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8012c82:	4820      	ldr	r0, [pc, #128]	; (8012d04 <HAL_DMA_Init+0xc8>)
 8012c84:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8012c86:	6861      	ldr	r1, [r4, #4]
 8012c88:	68a2      	ldr	r2, [r4, #8]
 8012c8a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012c8c:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8012c8e:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012c90:	6921      	ldr	r1, [r4, #16]
 8012c92:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012c94:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012c96:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012c98:	69a1      	ldr	r1, [r4, #24]
 8012c9a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8012c9c:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012c9e:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8012ca0:	6a21      	ldr	r1, [r4, #32]
 8012ca2:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8012ca4:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012ca6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8012ca8:	2904      	cmp	r1, #4
 8012caa:	d01e      	beq.n	8012cea <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8012cac:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8012cae:	6826      	ldr	r6, [r4, #0]
 8012cb0:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8012cb2:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8012cb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012cb8:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012cba:	2b04      	cmp	r3, #4
 8012cbc:	d107      	bne.n	8012cce <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8012cbe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012cc0:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8012cc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012cc4:	b11b      	cbz	r3, 8012cce <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	f7ff ff70 	bl	8012bac <DMA_CheckFifoParam>
 8012ccc:	b990      	cbnz	r0, 8012cf4 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8012cce:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8012cd0:	4620      	mov	r0, r4
 8012cd2:	f7ff ff4d 	bl	8012b70 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012cd6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012cd8:	233f      	movs	r3, #63	; 0x3f
 8012cda:	4093      	lsls	r3, r2
 8012cdc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012cde:	2000      	movs	r0, #0
 8012ce0:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8012ce2:	2301      	movs	r3, #1
 8012ce4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8012ce8:	e7c9      	b.n	8012c7e <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8012cea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012cec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8012cee:	4301      	orrs	r1, r0
 8012cf0:	430a      	orrs	r2, r1
 8012cf2:	e7db      	b.n	8012cac <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8012cf4:	2340      	movs	r3, #64	; 0x40
 8012cf6:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8012cf8:	2001      	movs	r0, #1
 8012cfa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8012cfe:	e7be      	b.n	8012c7e <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8012d00:	2001      	movs	r0, #1
 8012d02:	e7bc      	b.n	8012c7e <HAL_DMA_Init+0x42>
 8012d04:	f010803f 	.word	0xf010803f

08012d08 <HAL_DMA_Start_IT>:
{
 8012d08:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012d0a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8012d0c:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8012d10:	2c01      	cmp	r4, #1
 8012d12:	d02c      	beq.n	8012d6e <HAL_DMA_Start_IT+0x66>
 8012d14:	2401      	movs	r4, #1
 8012d16:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8012d1a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8012d1e:	b2e4      	uxtb	r4, r4
 8012d20:	2c01      	cmp	r4, #1
 8012d22:	d004      	beq.n	8012d2e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8012d24:	2300      	movs	r3, #0
 8012d26:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8012d2a:	2002      	movs	r0, #2
}
 8012d2c:	bd38      	pop	{r3, r4, r5, pc}
 8012d2e:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8012d30:	2002      	movs	r0, #2
 8012d32:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8012d36:	2000      	movs	r0, #0
 8012d38:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	f7ff ff01 	bl	8012b42 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012d40:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012d42:	233f      	movs	r3, #63	; 0x3f
 8012d44:	4093      	lsls	r3, r2
 8012d46:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8012d48:	6822      	ldr	r2, [r4, #0]
 8012d4a:	6813      	ldr	r3, [r2, #0]
 8012d4c:	f043 0316 	orr.w	r3, r3, #22
 8012d50:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8012d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d54:	b123      	cbz	r3, 8012d60 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8012d56:	6822      	ldr	r2, [r4, #0]
 8012d58:	6813      	ldr	r3, [r2, #0]
 8012d5a:	f043 0308 	orr.w	r3, r3, #8
 8012d5e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8012d60:	6822      	ldr	r2, [r4, #0]
 8012d62:	6813      	ldr	r3, [r2, #0]
 8012d64:	f043 0301 	orr.w	r3, r3, #1
 8012d68:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012d6a:	2000      	movs	r0, #0
 8012d6c:	e7de      	b.n	8012d2c <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8012d6e:	2002      	movs	r0, #2
 8012d70:	e7dc      	b.n	8012d2c <HAL_DMA_Start_IT+0x24>
	...

08012d74 <HAL_DMA_IRQHandler>:
{
 8012d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d76:	b083      	sub	sp, #12
 8012d78:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8012d7e:	4b72      	ldr	r3, [pc, #456]	; (8012f48 <HAL_DMA_IRQHandler+0x1d4>)
 8012d80:	681d      	ldr	r5, [r3, #0]
 8012d82:	4b72      	ldr	r3, [pc, #456]	; (8012f4c <HAL_DMA_IRQHandler+0x1d8>)
 8012d84:	fba3 3505 	umull	r3, r5, r3, r5
 8012d88:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8012d8a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8012d8c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8012d8e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8012d90:	2308      	movs	r3, #8
 8012d92:	4093      	lsls	r3, r2
 8012d94:	4233      	tst	r3, r6
 8012d96:	d010      	beq.n	8012dba <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8012d98:	6803      	ldr	r3, [r0, #0]
 8012d9a:	681a      	ldr	r2, [r3, #0]
 8012d9c:	f012 0f04 	tst.w	r2, #4
 8012da0:	d00b      	beq.n	8012dba <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8012da2:	681a      	ldr	r2, [r3, #0]
 8012da4:	f022 0204 	bic.w	r2, r2, #4
 8012da8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8012daa:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8012dac:	2308      	movs	r3, #8
 8012dae:	4093      	lsls	r3, r2
 8012db0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8012db2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8012db4:	f043 0301 	orr.w	r3, r3, #1
 8012db8:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8012dba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	4093      	lsls	r3, r2
 8012dc0:	4233      	tst	r3, r6
 8012dc2:	d009      	beq.n	8012dd8 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8012dc4:	6822      	ldr	r2, [r4, #0]
 8012dc6:	6952      	ldr	r2, [r2, #20]
 8012dc8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8012dcc:	d004      	beq.n	8012dd8 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8012dce:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8012dd0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012dd2:	f043 0302 	orr.w	r3, r3, #2
 8012dd6:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8012dd8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012dda:	2304      	movs	r3, #4
 8012ddc:	4093      	lsls	r3, r2
 8012dde:	4233      	tst	r3, r6
 8012de0:	d009      	beq.n	8012df6 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8012de2:	6822      	ldr	r2, [r4, #0]
 8012de4:	6812      	ldr	r2, [r2, #0]
 8012de6:	f012 0f02 	tst.w	r2, #2
 8012dea:	d004      	beq.n	8012df6 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8012dec:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8012dee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012df0:	f043 0304 	orr.w	r3, r3, #4
 8012df4:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8012df6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012df8:	2310      	movs	r3, #16
 8012dfa:	4093      	lsls	r3, r2
 8012dfc:	4233      	tst	r3, r6
 8012dfe:	d024      	beq.n	8012e4a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8012e00:	6822      	ldr	r2, [r4, #0]
 8012e02:	6812      	ldr	r2, [r2, #0]
 8012e04:	f012 0f08 	tst.w	r2, #8
 8012e08:	d01f      	beq.n	8012e4a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8012e0a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8012e0c:	6823      	ldr	r3, [r4, #0]
 8012e0e:	681a      	ldr	r2, [r3, #0]
 8012e10:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8012e14:	d00d      	beq.n	8012e32 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8012e1c:	d104      	bne.n	8012e28 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8012e1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e20:	b19b      	cbz	r3, 8012e4a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8012e22:	4620      	mov	r0, r4
 8012e24:	4798      	blx	r3
 8012e26:	e010      	b.n	8012e4a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8012e28:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8012e2a:	b173      	cbz	r3, 8012e4a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8012e2c:	4620      	mov	r0, r4
 8012e2e:	4798      	blx	r3
 8012e30:	e00b      	b.n	8012e4a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8012e32:	681a      	ldr	r2, [r3, #0]
 8012e34:	f412 7f80 	tst.w	r2, #256	; 0x100
 8012e38:	d103      	bne.n	8012e42 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8012e3a:	681a      	ldr	r2, [r3, #0]
 8012e3c:	f022 0208 	bic.w	r2, r2, #8
 8012e40:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8012e42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e44:	b10b      	cbz	r3, 8012e4a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8012e46:	4620      	mov	r0, r4
 8012e48:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8012e4a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012e4c:	2320      	movs	r3, #32
 8012e4e:	4093      	lsls	r3, r2
 8012e50:	4233      	tst	r3, r6
 8012e52:	d055      	beq.n	8012f00 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8012e54:	6822      	ldr	r2, [r4, #0]
 8012e56:	6812      	ldr	r2, [r2, #0]
 8012e58:	f012 0f10 	tst.w	r2, #16
 8012e5c:	d050      	beq.n	8012f00 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8012e5e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8012e60:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8012e64:	b2db      	uxtb	r3, r3
 8012e66:	2b05      	cmp	r3, #5
 8012e68:	d00e      	beq.n	8012e88 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8012e6a:	6823      	ldr	r3, [r4, #0]
 8012e6c:	681a      	ldr	r2, [r3, #0]
 8012e6e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8012e72:	d033      	beq.n	8012edc <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8012e7a:	d12a      	bne.n	8012ed2 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8012e7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d03e      	beq.n	8012f00 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8012e82:	4620      	mov	r0, r4
 8012e84:	4798      	blx	r3
 8012e86:	e03b      	b.n	8012f00 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8012e88:	6822      	ldr	r2, [r4, #0]
 8012e8a:	6813      	ldr	r3, [r2, #0]
 8012e8c:	f023 0316 	bic.w	r3, r3, #22
 8012e90:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8012e92:	6822      	ldr	r2, [r4, #0]
 8012e94:	6953      	ldr	r3, [r2, #20]
 8012e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012e9a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8012e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012e9e:	b1a3      	cbz	r3, 8012eca <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8012ea0:	6822      	ldr	r2, [r4, #0]
 8012ea2:	6813      	ldr	r3, [r2, #0]
 8012ea4:	f023 0308 	bic.w	r3, r3, #8
 8012ea8:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012eaa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8012eac:	233f      	movs	r3, #63	; 0x3f
 8012eae:	4093      	lsls	r3, r2
 8012eb0:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8012eb8:	2301      	movs	r3, #1
 8012eba:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8012ebe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d03f      	beq.n	8012f44 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8012ec4:	4620      	mov	r0, r4
 8012ec6:	4798      	blx	r3
 8012ec8:	e03c      	b.n	8012f44 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8012eca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d1e7      	bne.n	8012ea0 <HAL_DMA_IRQHandler+0x12c>
 8012ed0:	e7eb      	b.n	8012eaa <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8012ed2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012ed4:	b1a3      	cbz	r3, 8012f00 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8012ed6:	4620      	mov	r0, r4
 8012ed8:	4798      	blx	r3
 8012eda:	e011      	b.n	8012f00 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8012edc:	681a      	ldr	r2, [r3, #0]
 8012ede:	f412 7f80 	tst.w	r2, #256	; 0x100
 8012ee2:	d109      	bne.n	8012ef8 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8012ee4:	681a      	ldr	r2, [r3, #0]
 8012ee6:	f022 0210 	bic.w	r2, r2, #16
 8012eea:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8012eec:	2300      	movs	r3, #0
 8012eee:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8012ef2:	2301      	movs	r3, #1
 8012ef4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8012ef8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8012efa:	b10b      	cbz	r3, 8012f00 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8012efc:	4620      	mov	r0, r4
 8012efe:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8012f00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012f02:	b1fb      	cbz	r3, 8012f44 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8012f04:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8012f06:	f013 0f01 	tst.w	r3, #1
 8012f0a:	d017      	beq.n	8012f3c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8012f0c:	2305      	movs	r3, #5
 8012f0e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8012f12:	6822      	ldr	r2, [r4, #0]
 8012f14:	6813      	ldr	r3, [r2, #0]
 8012f16:	f023 0301 	bic.w	r3, r3, #1
 8012f1a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8012f1c:	9b01      	ldr	r3, [sp, #4]
 8012f1e:	3301      	adds	r3, #1
 8012f20:	9301      	str	r3, [sp, #4]
 8012f22:	42ab      	cmp	r3, r5
 8012f24:	d804      	bhi.n	8012f30 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8012f26:	6823      	ldr	r3, [r4, #0]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	f013 0f01 	tst.w	r3, #1
 8012f2e:	d1f5      	bne.n	8012f1c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8012f30:	2300      	movs	r3, #0
 8012f32:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8012f36:	2301      	movs	r3, #1
 8012f38:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8012f3c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8012f3e:	b10b      	cbz	r3, 8012f44 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8012f40:	4620      	mov	r0, r4
 8012f42:	4798      	blx	r3
}
 8012f44:	b003      	add	sp, #12
 8012f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f48:	2000005c 	.word	0x2000005c
 8012f4c:	1b4e81b5 	.word	0x1b4e81b5

08012f50 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8012f50:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8012f52:	4770      	bx	lr

08012f54 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8012f54:	b348      	cbz	r0, 8012faa <HAL_DMA2D_Init+0x56>
{
 8012f56:	b510      	push	{r4, lr}
 8012f58:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8012f5a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8012f5e:	b1fb      	cbz	r3, 8012fa0 <HAL_DMA2D_Init+0x4c>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8012f60:	2302      	movs	r3, #2
 8012f62:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8012f66:	6822      	ldr	r2, [r4, #0]
 8012f68:	6813      	ldr	r3, [r2, #0]
 8012f6a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8012f6e:	6861      	ldr	r1, [r4, #4]
 8012f70:	430b      	orrs	r3, r1
 8012f72:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8012f74:	6822      	ldr	r2, [r4, #0]
 8012f76:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012f78:	f023 0307 	bic.w	r3, r3, #7
 8012f7c:	68a1      	ldr	r1, [r4, #8]
 8012f7e:	430b      	orrs	r3, r1
 8012f80:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8012f82:	6822      	ldr	r2, [r4, #0]
 8012f84:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8012f86:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8012f8a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8012f8e:	68e1      	ldr	r1, [r4, #12]
 8012f90:	430b      	orrs	r3, r1
 8012f92:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8012f94:	2000      	movs	r0, #0
 8012f96:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8012f98:	2301      	movs	r3, #1
 8012f9a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8012f9e:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8012fa0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8012fa4:	f00a fdd0 	bl	801db48 <HAL_DMA2D_MspInit>
 8012fa8:	e7da      	b.n	8012f60 <HAL_DMA2D_Init+0xc>
     return HAL_ERROR;
 8012faa:	2001      	movs	r0, #1
}
 8012fac:	4770      	bx	lr

08012fae <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8012fae:	4770      	bx	lr

08012fb0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8012fb0:	4770      	bx	lr

08012fb2 <HAL_DMA2D_IRQHandler>:
{
 8012fb2:	b570      	push	{r4, r5, r6, lr}
 8012fb4:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8012fb6:	6803      	ldr	r3, [r0, #0]
 8012fb8:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8012fba:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8012fbc:	f015 0f01 	tst.w	r5, #1
 8012fc0:	d016      	beq.n	8012ff0 <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8012fc2:	f416 7f80 	tst.w	r6, #256	; 0x100
 8012fc6:	d013      	beq.n	8012ff0 <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8012fc8:	681a      	ldr	r2, [r3, #0]
 8012fca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012fce:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8012fd0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8012fd2:	f043 0301 	orr.w	r3, r3, #1
 8012fd6:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8012fd8:	6803      	ldr	r3, [r0, #0]
 8012fda:	2201      	movs	r2, #1
 8012fdc:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8012fde:	2304      	movs	r3, #4
 8012fe0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8012fea:	6943      	ldr	r3, [r0, #20]
 8012fec:	b103      	cbz	r3, 8012ff0 <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8012fee:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8012ff0:	f015 0f20 	tst.w	r5, #32
 8012ff4:	d018      	beq.n	8013028 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8012ff6:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8012ffa:	d015      	beq.n	8013028 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8012ffc:	6822      	ldr	r2, [r4, #0]
 8012ffe:	6813      	ldr	r3, [r2, #0]
 8013000:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013004:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8013006:	6823      	ldr	r3, [r4, #0]
 8013008:	2220      	movs	r2, #32
 801300a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 801300c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801300e:	f043 0302 	orr.w	r3, r3, #2
 8013012:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8013014:	2304      	movs	r3, #4
 8013016:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 801301a:	2300      	movs	r3, #0
 801301c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8013020:	6963      	ldr	r3, [r4, #20]
 8013022:	b10b      	cbz	r3, 8013028 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8013024:	4620      	mov	r0, r4
 8013026:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8013028:	f015 0f08 	tst.w	r5, #8
 801302c:	d018      	beq.n	8013060 <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 801302e:	f416 6f00 	tst.w	r6, #2048	; 0x800
 8013032:	d015      	beq.n	8013060 <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8013034:	6822      	ldr	r2, [r4, #0]
 8013036:	6813      	ldr	r3, [r2, #0]
 8013038:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801303c:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 801303e:	6823      	ldr	r3, [r4, #0]
 8013040:	2208      	movs	r2, #8
 8013042:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8013044:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013046:	f043 0304 	orr.w	r3, r3, #4
 801304a:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 801304c:	2304      	movs	r3, #4
 801304e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8013052:	2300      	movs	r3, #0
 8013054:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8013058:	6963      	ldr	r3, [r4, #20]
 801305a:	b10b      	cbz	r3, 8013060 <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 801305c:	4620      	mov	r0, r4
 801305e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8013060:	f015 0f04 	tst.w	r5, #4
 8013064:	d002      	beq.n	801306c <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8013066:	f416 6f80 	tst.w	r6, #1024	; 0x400
 801306a:	d120      	bne.n	80130ae <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 801306c:	f015 0f02 	tst.w	r5, #2
 8013070:	d016      	beq.n	80130a0 <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8013072:	f416 7f00 	tst.w	r6, #512	; 0x200
 8013076:	d013      	beq.n	80130a0 <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8013078:	6822      	ldr	r2, [r4, #0]
 801307a:	6813      	ldr	r3, [r2, #0]
 801307c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013080:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8013082:	6823      	ldr	r3, [r4, #0]
 8013084:	2202      	movs	r2, #2
 8013086:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8013088:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801308a:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 801308c:	2301      	movs	r3, #1
 801308e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8013092:	2300      	movs	r3, #0
 8013094:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferCpltCallback != NULL)
 8013098:	6923      	ldr	r3, [r4, #16]
 801309a:	b10b      	cbz	r3, 80130a0 <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 801309c:	4620      	mov	r0, r4
 801309e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80130a0:	f015 0f10 	tst.w	r5, #16
 80130a4:	d002      	beq.n	80130ac <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80130a6:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 80130aa:	d10c      	bne.n	80130c6 <HAL_DMA2D_IRQHandler+0x114>
}
 80130ac:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80130ae:	6822      	ldr	r2, [r4, #0]
 80130b0:	6813      	ldr	r3, [r2, #0]
 80130b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80130b6:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80130b8:	6823      	ldr	r3, [r4, #0]
 80130ba:	2204      	movs	r2, #4
 80130bc:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80130be:	4620      	mov	r0, r4
 80130c0:	f7ff ff75 	bl	8012fae <HAL_DMA2D_LineEventCallback>
 80130c4:	e7d2      	b.n	801306c <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80130c6:	6822      	ldr	r2, [r4, #0]
 80130c8:	6813      	ldr	r3, [r2, #0]
 80130ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80130ce:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80130d0:	6823      	ldr	r3, [r4, #0]
 80130d2:	2210      	movs	r2, #16
 80130d4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80130d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80130d8:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80130da:	2301      	movs	r3, #1
 80130dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80130e0:	2300      	movs	r3, #0
 80130e2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80130e6:	4620      	mov	r0, r4
 80130e8:	f7ff ff62 	bl	8012fb0 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 80130ec:	e7de      	b.n	80130ac <HAL_DMA2D_IRQHandler+0xfa>
	...

080130f0 <HAL_DMA2D_ConfigLayer>:
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80130f0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80130f4:	2b01      	cmp	r3, #1
 80130f6:	d059      	beq.n	80131ac <HAL_DMA2D_ConfigLayer+0xbc>
{
 80130f8:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 80130fa:	2301      	movs	r3, #1
 80130fc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8013100:	2302      	movs	r3, #2
 8013102:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8013106:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 801310a:	69da      	ldr	r2, [r3, #28]
 801310c:	1c8b      	adds	r3, r1, #2
 801310e:	011b      	lsls	r3, r3, #4
 8013110:	58c3      	ldr	r3, [r0, r3]
 8013112:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8013116:	3a09      	subs	r2, #9
 8013118:	2a01      	cmp	r2, #1
 801311a:	d91e      	bls.n	801315a <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 801311c:	1c8a      	adds	r2, r1, #2
 801311e:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8013122:	6852      	ldr	r2, [r2, #4]
 8013124:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8013128:	bb41      	cbnz	r1, 801317c <HAL_DMA2D_ConfigLayer+0x8c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 801312a:	6804      	ldr	r4, [r0, #0]
 801312c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801312e:	4a20      	ldr	r2, [pc, #128]	; (80131b0 <HAL_DMA2D_ConfigLayer+0xc0>)
 8013130:	402a      	ands	r2, r5
 8013132:	4313      	orrs	r3, r2
 8013134:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8013136:	6802      	ldr	r2, [r0, #0]
 8013138:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 801313c:	699c      	ldr	r4, [r3, #24]
 801313e:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8013140:	69db      	ldr	r3, [r3, #28]
 8013142:	3b09      	subs	r3, #9
 8013144:	2b01      	cmp	r3, #1
 8013146:	d910      	bls.n	801316a <HAL_DMA2D_ConfigLayer+0x7a>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8013148:	2301      	movs	r3, #1
 801314a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 801314e:	2300      	movs	r3, #0
 8013150:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8013154:	4618      	mov	r0, r3
}
 8013156:	bc30      	pop	{r4, r5}
 8013158:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 801315a:	1c8a      	adds	r2, r1, #2
 801315c:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 8013160:	6852      	ldr	r2, [r2, #4]
 8013162:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8013166:	4313      	orrs	r3, r2
 8013168:	e7de      	b.n	8013128 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 801316a:	3102      	adds	r1, #2
 801316c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8013170:	684b      	ldr	r3, [r1, #4]
 8013172:	6802      	ldr	r2, [r0, #0]
 8013174:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013178:	6293      	str	r3, [r2, #40]	; 0x28
 801317a:	e7e5      	b.n	8013148 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 801317c:	6804      	ldr	r4, [r0, #0]
 801317e:	69e5      	ldr	r5, [r4, #28]
 8013180:	4a0b      	ldr	r2, [pc, #44]	; (80131b0 <HAL_DMA2D_ConfigLayer+0xc0>)
 8013182:	402a      	ands	r2, r5
 8013184:	4313      	orrs	r3, r2
 8013186:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8013188:	6802      	ldr	r2, [r0, #0]
 801318a:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 801318e:	699c      	ldr	r4, [r3, #24]
 8013190:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8013192:	69db      	ldr	r3, [r3, #28]
 8013194:	3b09      	subs	r3, #9
 8013196:	2b01      	cmp	r3, #1
 8013198:	d8d6      	bhi.n	8013148 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 801319a:	3102      	adds	r1, #2
 801319c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80131a0:	684b      	ldr	r3, [r1, #4]
 80131a2:	6802      	ldr	r2, [r0, #0]
 80131a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80131a8:	6213      	str	r3, [r2, #32]
 80131aa:	e7cd      	b.n	8013148 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 80131ac:	2002      	movs	r0, #2
}
 80131ae:	4770      	bx	lr
 80131b0:	00fcfff0 	.word	0x00fcfff0

080131b4 <DSI_ConfigPacketHeader>:
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80131b4:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80131b8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80131bc:	9a00      	ldr	r2, [sp, #0]
 80131be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80131c2:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 80131c4:	4770      	bx	lr

080131c6 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80131c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131ca:	4604      	mov	r4, r0
 80131cc:	4688      	mov	r8, r1
 80131ce:	4616      	mov	r6, r2
 80131d0:	461f      	mov	r7, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80131d2:	f7ff fc27 	bl	8012a24 <HAL_GetTick>
 80131d6:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80131d8:	6820      	ldr	r0, [r4, #0]
 80131da:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80131dc:	f013 0f01 	tst.w	r3, #1
 80131e0:	d107      	bne.n	80131f2 <DSI_ShortWrite+0x2c>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80131e2:	f7ff fc1f 	bl	8012a24 <HAL_GetTick>
 80131e6:	1b40      	subs	r0, r0, r5
 80131e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80131ec:	d9f4      	bls.n	80131d8 <DSI_ShortWrite+0x12>
    {
      return HAL_TIMEOUT;
 80131ee:	2003      	movs	r0, #3
 80131f0:	e008      	b.n	8013204 <DSI_ShortWrite+0x3e>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80131f2:	ea46 1688 	orr.w	r6, r6, r8, lsl #6
 80131f6:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
 80131fa:	9b06      	ldr	r3, [sp, #24]
 80131fc:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8013200:	66c6      	str	r6, [r0, #108]	; 0x6c

  return HAL_OK;
 8013202:	2000      	movs	r0, #0
}
 8013204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013208 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8013208:	7c03      	ldrb	r3, [r0, #16]
 801320a:	2b01      	cmp	r3, #1
 801320c:	d073      	beq.n	80132f6 <HAL_DSI_ConfigErrorMonitor+0xee>
 801320e:	2301      	movs	r3, #1
 8013210:	7403      	strb	r3, [r0, #16]

  hdsi->Instance->IER[0U] = 0U;
 8013212:	6802      	ldr	r2, [r0, #0]
 8013214:	2300      	movs	r3, #0
 8013216:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 801321a:	6802      	ldr	r2, [r0, #0]
 801321c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8013220:	6181      	str	r1, [r0, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8013222:	f011 0f01 	tst.w	r1, #1
 8013226:	d008      	beq.n	801323a <HAL_DSI_ConfigErrorMonitor+0x32>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8013228:	6802      	ldr	r2, [r0, #0]
 801322a:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 801322e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 8013232:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8013236:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 801323a:	f011 0f02 	tst.w	r1, #2
 801323e:	d006      	beq.n	801324e <HAL_DSI_ConfigErrorMonitor+0x46>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8013240:	6802      	ldr	r2, [r0, #0]
 8013242:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8013246:	f443 13f8 	orr.w	r3, r3, #2031616	; 0x1f0000
 801324a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 801324e:	f011 0f04 	tst.w	r1, #4
 8013252:	d006      	beq.n	8013262 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8013254:	6802      	ldr	r2, [r0, #0]
 8013256:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 801325a:	f043 0301 	orr.w	r3, r3, #1
 801325e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8013262:	f011 0f08 	tst.w	r1, #8
 8013266:	d006      	beq.n	8013276 <HAL_DSI_ConfigErrorMonitor+0x6e>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8013268:	6802      	ldr	r2, [r0, #0]
 801326a:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 801326e:	f043 0302 	orr.w	r3, r3, #2
 8013272:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8013276:	f011 0f10 	tst.w	r1, #16
 801327a:	d006      	beq.n	801328a <HAL_DSI_ConfigErrorMonitor+0x82>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 801327c:	6802      	ldr	r2, [r0, #0]
 801327e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8013282:	f043 030c 	orr.w	r3, r3, #12
 8013286:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 801328a:	f011 0f20 	tst.w	r1, #32
 801328e:	d006      	beq.n	801329e <HAL_DSI_ConfigErrorMonitor+0x96>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8013290:	6802      	ldr	r2, [r0, #0]
 8013292:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8013296:	f043 0310 	orr.w	r3, r3, #16
 801329a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 801329e:	f011 0f40 	tst.w	r1, #64	; 0x40
 80132a2:	d006      	beq.n	80132b2 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80132a4:	6802      	ldr	r2, [r0, #0]
 80132a6:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 80132aa:	f043 0320 	orr.w	r3, r3, #32
 80132ae:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80132b2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80132b6:	d006      	beq.n	80132c6 <HAL_DSI_ConfigErrorMonitor+0xbe>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80132b8:	6802      	ldr	r2, [r0, #0]
 80132ba:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 80132be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132c2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80132c6:	f411 7f80 	tst.w	r1, #256	; 0x100
 80132ca:	d006      	beq.n	80132da <HAL_DSI_ConfigErrorMonitor+0xd2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80132cc:	6802      	ldr	r2, [r0, #0]
 80132ce:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 80132d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132d6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80132da:	f411 7f00 	tst.w	r1, #512	; 0x200
 80132de:	d006      	beq.n	80132ee <HAL_DSI_ConfigErrorMonitor+0xe6>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80132e0:	6802      	ldr	r2, [r0, #0]
 80132e2:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 80132e6:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
 80132ea:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80132ee:	2300      	movs	r3, #0
 80132f0:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80132f2:	4618      	mov	r0, r3
 80132f4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80132f6:	2002      	movs	r0, #2
}
 80132f8:	4770      	bx	lr
	...

080132fc <HAL_DSI_Init>:
  if (hdsi == NULL)
 80132fc:	2800      	cmp	r0, #0
 80132fe:	f000 80bc 	beq.w	801347a <HAL_DSI_Init+0x17e>
{
 8013302:	b570      	push	{r4, r5, r6, lr}
 8013304:	b082      	sub	sp, #8
 8013306:	4604      	mov	r4, r0
 8013308:	460e      	mov	r6, r1
  if (hdsi->State == HAL_DSI_STATE_RESET)
 801330a:	7c43      	ldrb	r3, [r0, #17]
 801330c:	b31b      	cbz	r3, 8013356 <HAL_DSI_Init+0x5a>
  hdsi->State = HAL_DSI_STATE_BUSY;
 801330e:	2303      	movs	r3, #3
 8013310:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8013312:	2300      	movs	r3, #0
 8013314:	9300      	str	r3, [sp, #0]
 8013316:	6822      	ldr	r2, [r4, #0]
 8013318:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 801331c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8013320:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8013324:	6823      	ldr	r3, [r4, #0]
 8013326:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 801332a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801332e:	9300      	str	r3, [sp, #0]
 8013330:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8013332:	f7ff fb77 	bl	8012a24 <HAL_GetTick>
 8013336:	4605      	mov	r5, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8013338:	6823      	ldr	r3, [r4, #0]
 801333a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 801333e:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8013342:	d10b      	bne.n	801335c <HAL_DSI_Init+0x60>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8013344:	f7ff fb6e 	bl	8012a24 <HAL_GetTick>
 8013348:	1b40      	subs	r0, r0, r5
 801334a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801334e:	d9f3      	bls.n	8013338 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8013350:	2003      	movs	r0, #3
}
 8013352:	b002      	add	sp, #8
 8013354:	bd70      	pop	{r4, r5, r6, pc}
    HAL_DSI_MspInit(hdsi);
 8013356:	f00a fbb9 	bl	801dacc <HAL_DSI_MspInit>
 801335a:	e7d8      	b.n	801330e <HAL_DSI_Init+0x12>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 801335c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8013360:	f422 325e 	bic.w	r2, r2, #227328	; 0x37800
 8013364:	f422 72fe 	bic.w	r2, r2, #508	; 0x1fc
 8013368:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 801336c:	6821      	ldr	r1, [r4, #0]
 801336e:	f8d1 2430 	ldr.w	r2, [r1, #1072]	; 0x430
 8013372:	6830      	ldr	r0, [r6, #0]
 8013374:	6873      	ldr	r3, [r6, #4]
 8013376:	02db      	lsls	r3, r3, #11
 8013378:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 801337c:	68b0      	ldr	r0, [r6, #8]
 801337e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013382:	4313      	orrs	r3, r2
 8013384:	f8c1 3430 	str.w	r3, [r1, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8013388:	2300      	movs	r3, #0
 801338a:	9301      	str	r3, [sp, #4]
 801338c:	6822      	ldr	r2, [r4, #0]
 801338e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8013392:	f043 0301 	orr.w	r3, r3, #1
 8013396:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 801339a:	6823      	ldr	r3, [r4, #0]
 801339c:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 80133a0:	f003 0301 	and.w	r3, r3, #1
 80133a4:	9301      	str	r3, [sp, #4]
 80133a6:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 80133a8:	f7ff fb3c 	bl	8012a24 <HAL_GetTick>
 80133ac:	4605      	mov	r5, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80133ae:	6823      	ldr	r3, [r4, #0]
 80133b0:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80133b4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80133b8:	d107      	bne.n	80133ca <HAL_DSI_Init+0xce>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80133ba:	f7ff fb33 	bl	8012a24 <HAL_GetTick>
 80133be:	1b40      	subs	r0, r0, r5
 80133c0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80133c4:	d9f3      	bls.n	80133ae <HAL_DSI_Init+0xb2>
      return HAL_TIMEOUT;
 80133c6:	2003      	movs	r0, #3
 80133c8:	e7c3      	b.n	8013352 <HAL_DSI_Init+0x56>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80133ca:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80133ce:	f042 0206 	orr.w	r2, r2, #6
 80133d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80133d6:	6822      	ldr	r2, [r4, #0]
 80133d8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80133dc:	f023 0303 	bic.w	r3, r3, #3
 80133e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80133e4:	6822      	ldr	r2, [r4, #0]
 80133e6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80133ea:	6861      	ldr	r1, [r4, #4]
 80133ec:	430b      	orrs	r3, r1
 80133ee:	f043 0301 	orr.w	r3, r3, #1
 80133f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80133f6:	6822      	ldr	r2, [r4, #0]
 80133f8:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 80133fc:	f023 0303 	bic.w	r3, r3, #3
 8013400:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8013404:	6822      	ldr	r2, [r4, #0]
 8013406:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 801340a:	68e1      	ldr	r1, [r4, #12]
 801340c:	430b      	orrs	r3, r1
 801340e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8013412:	6822      	ldr	r2, [r4, #0]
 8013414:	6893      	ldr	r3, [r2, #8]
 8013416:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801341a:	6093      	str	r3, [r2, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 801341c:	6822      	ldr	r2, [r4, #0]
 801341e:	6893      	ldr	r3, [r2, #8]
 8013420:	68a1      	ldr	r1, [r4, #8]
 8013422:	430b      	orrs	r3, r1
 8013424:	6093      	str	r3, [r2, #8]
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8013426:	6872      	ldr	r2, [r6, #4]
 8013428:	b902      	cbnz	r2, 801342c <HAL_DSI_Init+0x130>
 801342a:	2201      	movs	r2, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 801342c:	4b14      	ldr	r3, [pc, #80]	; (8013480 <HAL_DSI_Init+0x184>)
 801342e:	fb03 f302 	mul.w	r3, r3, r2
 8013432:	68b2      	ldr	r2, [r6, #8]
 8013434:	f002 0203 	and.w	r2, r2, #3
 8013438:	4093      	lsls	r3, r2
 801343a:	6831      	ldr	r1, [r6, #0]
 801343c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8013440:	fb02 f201 	mul.w	r2, r2, r1
 8013444:	fbb3 f3f2 	udiv	r3, r3, r2
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8013448:	6821      	ldr	r1, [r4, #0]
 801344a:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 801344e:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8013452:	f8c1 2418 	str.w	r2, [r1, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8013456:	6821      	ldr	r1, [r4, #0]
 8013458:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 801345c:	4313      	orrs	r3, r2
 801345e:	f8c1 3418 	str.w	r3, [r1, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8013462:	6823      	ldr	r3, [r4, #0]
 8013464:	2000      	movs	r0, #0
 8013466:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 801346a:	6823      	ldr	r3, [r4, #0]
 801346c:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8013470:	61a0      	str	r0, [r4, #24]
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8013472:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8013474:	2301      	movs	r3, #1
 8013476:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8013478:	e76b      	b.n	8013352 <HAL_DSI_Init+0x56>
    return HAL_ERROR;
 801347a:	2001      	movs	r0, #1
}
 801347c:	4770      	bx	lr
 801347e:	bf00      	nop
 8013480:	003d0900 	.word	0x003d0900

08013484 <HAL_DSI_ErrorCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8013484:	4770      	bx	lr

08013486 <HAL_DSI_IRQHandler>:
{
 8013486:	b510      	push	{r4, lr}
 8013488:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 801348a:	6803      	ldr	r3, [r0, #0]
 801348c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8013490:	f012 0f01 	tst.w	r2, #1
 8013494:	d004      	beq.n	80134a0 <HAL_DSI_IRQHandler+0x1a>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8013496:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 801349a:	f012 0f01 	tst.w	r2, #1
 801349e:	d160      	bne.n	8013562 <HAL_DSI_IRQHandler+0xdc>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80134a0:	6823      	ldr	r3, [r4, #0]
 80134a2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80134a6:	f012 0f02 	tst.w	r2, #2
 80134aa:	d004      	beq.n	80134b6 <HAL_DSI_IRQHandler+0x30>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80134ac:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80134b0:	f012 0f02 	tst.w	r2, #2
 80134b4:	d15b      	bne.n	801356e <HAL_DSI_IRQHandler+0xe8>
  if (hdsi->ErrorMsk != 0U)
 80134b6:	69a3      	ldr	r3, [r4, #24]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d051      	beq.n	8013560 <HAL_DSI_IRQHandler+0xda>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80134bc:	6821      	ldr	r1, [r4, #0]
 80134be:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80134c2:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
 80134c6:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80134c8:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80134cc:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
 80134d0:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80134d2:	b291      	uxth	r1, r2
 80134d4:	b119      	cbz	r1, 80134de <HAL_DSI_IRQHandler+0x58>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80134d6:	6961      	ldr	r1, [r4, #20]
 80134d8:	f041 0101 	orr.w	r1, r1, #1
 80134dc:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80134de:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 80134e2:	d003      	beq.n	80134ec <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80134e4:	6962      	ldr	r2, [r4, #20]
 80134e6:	f042 0202 	orr.w	r2, r2, #2
 80134ea:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80134ec:	f013 0f01 	tst.w	r3, #1
 80134f0:	d003      	beq.n	80134fa <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80134f2:	6962      	ldr	r2, [r4, #20]
 80134f4:	f042 0204 	orr.w	r2, r2, #4
 80134f8:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80134fa:	f013 0f02 	tst.w	r3, #2
 80134fe:	d003      	beq.n	8013508 <HAL_DSI_IRQHandler+0x82>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8013500:	6962      	ldr	r2, [r4, #20]
 8013502:	f042 0208 	orr.w	r2, r2, #8
 8013506:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8013508:	f013 0f0c 	tst.w	r3, #12
 801350c:	d003      	beq.n	8013516 <HAL_DSI_IRQHandler+0x90>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 801350e:	6962      	ldr	r2, [r4, #20]
 8013510:	f042 0210 	orr.w	r2, r2, #16
 8013514:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8013516:	f013 0f10 	tst.w	r3, #16
 801351a:	d003      	beq.n	8013524 <HAL_DSI_IRQHandler+0x9e>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 801351c:	6962      	ldr	r2, [r4, #20]
 801351e:	f042 0220 	orr.w	r2, r2, #32
 8013522:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8013524:	f013 0f20 	tst.w	r3, #32
 8013528:	d003      	beq.n	8013532 <HAL_DSI_IRQHandler+0xac>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 801352a:	6962      	ldr	r2, [r4, #20]
 801352c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013530:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8013532:	f013 0f40 	tst.w	r3, #64	; 0x40
 8013536:	d003      	beq.n	8013540 <HAL_DSI_IRQHandler+0xba>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8013538:	6962      	ldr	r2, [r4, #20]
 801353a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801353e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8013540:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013544:	d003      	beq.n	801354e <HAL_DSI_IRQHandler+0xc8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8013546:	6962      	ldr	r2, [r4, #20]
 8013548:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801354c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 801354e:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 8013552:	d003      	beq.n	801355c <HAL_DSI_IRQHandler+0xd6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8013554:	6963      	ldr	r3, [r4, #20]
 8013556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801355a:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 801355c:	6963      	ldr	r3, [r4, #20]
 801355e:	b96b      	cbnz	r3, 801357c <HAL_DSI_IRQHandler+0xf6>
}
 8013560:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8013562:	2201      	movs	r2, #1
 8013564:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8013568:	f00a feac 	bl	801e2c4 <HAL_DSI_TearingEffectCallback>
 801356c:	e798      	b.n	80134a0 <HAL_DSI_IRQHandler+0x1a>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 801356e:	2202      	movs	r2, #2
 8013570:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8013574:	4620      	mov	r0, r4
 8013576:	f00a fed1 	bl	801e31c <HAL_DSI_EndOfRefreshCallback>
 801357a:	e79c      	b.n	80134b6 <HAL_DSI_IRQHandler+0x30>
      HAL_DSI_ErrorCallback(hdsi);
 801357c:	4620      	mov	r0, r4
 801357e:	f7ff ff81 	bl	8013484 <HAL_DSI_ErrorCallback>
}
 8013582:	e7ed      	b.n	8013560 <HAL_DSI_IRQHandler+0xda>

08013584 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8013584:	7c03      	ldrb	r3, [r0, #16]
 8013586:	2b01      	cmp	r3, #1
 8013588:	d00e      	beq.n	80135a8 <HAL_DSI_SetGenericVCID+0x24>
 801358a:	2301      	movs	r3, #1
 801358c:	7403      	strb	r3, [r0, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 801358e:	6802      	ldr	r2, [r0, #0]
 8013590:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8013592:	f023 0303 	bic.w	r3, r3, #3
 8013596:	6313      	str	r3, [r2, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8013598:	6802      	ldr	r2, [r0, #0]
 801359a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 801359c:	4319      	orrs	r1, r3
 801359e:	6311      	str	r1, [r2, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80135a0:	2300      	movs	r3, #0
 80135a2:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80135a4:	4618      	mov	r0, r3
 80135a6:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80135a8:	2002      	movs	r0, #2
}
 80135aa:	4770      	bx	lr

080135ac <HAL_DSI_ConfigAdaptedCommandMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80135ac:	7c03      	ldrb	r3, [r0, #16]
 80135ae:	2b01      	cmp	r3, #1
 80135b0:	f000 8082 	beq.w	80136b8 <HAL_DSI_ConfigAdaptedCommandMode+0x10c>
{
 80135b4:	b430      	push	{r4, r5}
  __HAL_LOCK(hdsi);
 80135b6:	2301      	movs	r3, #1
 80135b8:	7403      	strb	r3, [r0, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80135ba:	6802      	ldr	r2, [r0, #0]
 80135bc:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80135be:	f043 0301 	orr.w	r3, r3, #1
 80135c2:	6353      	str	r3, [r2, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80135c4:	6802      	ldr	r2, [r0, #0]
 80135c6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 80135ca:	f023 0301 	bic.w	r3, r3, #1
 80135ce:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80135d2:	6802      	ldr	r2, [r0, #0]
 80135d4:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 80135d8:	f043 0301 	orr.w	r3, r3, #1
 80135dc:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80135e0:	6802      	ldr	r2, [r0, #0]
 80135e2:	68d3      	ldr	r3, [r2, #12]
 80135e4:	f023 0303 	bic.w	r3, r3, #3
 80135e8:	60d3      	str	r3, [r2, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80135ea:	6802      	ldr	r2, [r0, #0]
 80135ec:	68d3      	ldr	r3, [r2, #12]
 80135ee:	680c      	ldr	r4, [r1, #0]
 80135f0:	4323      	orrs	r3, r4
 80135f2:	60d3      	str	r3, [r2, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80135f4:	6802      	ldr	r2, [r0, #0]
 80135f6:	6953      	ldr	r3, [r2, #20]
 80135f8:	f023 0307 	bic.w	r3, r3, #7
 80135fc:	6153      	str	r3, [r2, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80135fe:	6804      	ldr	r4, [r0, #0]
 8013600:	6962      	ldr	r2, [r4, #20]
 8013602:	69cb      	ldr	r3, [r1, #28]
 8013604:	698d      	ldr	r5, [r1, #24]
 8013606:	432b      	orrs	r3, r5
 8013608:	694d      	ldr	r5, [r1, #20]
 801360a:	432b      	orrs	r3, r5
 801360c:	4313      	orrs	r3, r2
 801360e:	6163      	str	r3, [r4, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8013610:	6802      	ldr	r2, [r0, #0]
 8013612:	6913      	ldr	r3, [r2, #16]
 8013614:	f023 030f 	bic.w	r3, r3, #15
 8013618:	6113      	str	r3, [r2, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 801361a:	6802      	ldr	r2, [r0, #0]
 801361c:	6913      	ldr	r3, [r2, #16]
 801361e:	684c      	ldr	r4, [r1, #4]
 8013620:	4323      	orrs	r3, r4
 8013622:	6113      	str	r3, [r2, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8013624:	6802      	ldr	r2, [r0, #0]
 8013626:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 801362a:	f023 030e 	bic.w	r3, r3, #14
 801362e:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8013632:	6802      	ldr	r2, [r0, #0]
 8013634:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8013638:	684c      	ldr	r4, [r1, #4]
 801363a:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 801363e:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8013642:	6802      	ldr	r2, [r0, #0]
 8013644:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8013646:	0c1b      	lsrs	r3, r3, #16
 8013648:	041b      	lsls	r3, r3, #16
 801364a:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 801364c:	6802      	ldr	r2, [r0, #0]
 801364e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8013650:	688c      	ldr	r4, [r1, #8]
 8013652:	4323      	orrs	r3, r4
 8013654:	6653      	str	r3, [r2, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8013656:	6802      	ldr	r2, [r0, #0]
 8013658:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 801365c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013660:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8013664:	6804      	ldr	r4, [r0, #0]
 8013666:	f8d4 2400 	ldr.w	r2, [r4, #1024]	; 0x400
 801366a:	68cb      	ldr	r3, [r1, #12]
 801366c:	690d      	ldr	r5, [r1, #16]
 801366e:	432b      	orrs	r3, r5
 8013670:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8013672:	432b      	orrs	r3, r5
                            CmdCfg->VSyncPol);
 8013674:	6a0d      	ldr	r5, [r1, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8013676:	432b      	orrs	r3, r5
 8013678:	4313      	orrs	r3, r2
 801367a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 801367e:	6802      	ldr	r2, [r0, #0]
 8013680:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8013682:	f023 0301 	bic.w	r3, r3, #1
 8013686:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8013688:	6802      	ldr	r2, [r0, #0]
 801368a:	6e93      	ldr	r3, [r2, #104]	; 0x68
 801368c:	6a89      	ldr	r1, [r1, #40]	; 0x28
 801368e:	430b      	orrs	r3, r1
 8013690:	6693      	str	r3, [r2, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8013692:	6802      	ldr	r2, [r0, #0]
 8013694:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 8013698:	f043 0301 	orr.w	r3, r3, #1
 801369c:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80136a0:	6802      	ldr	r2, [r0, #0]
 80136a2:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 80136a6:	f043 0302 	orr.w	r3, r3, #2
 80136aa:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80136ae:	2300      	movs	r3, #0
 80136b0:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80136b2:	4618      	mov	r0, r3
}
 80136b4:	bc30      	pop	{r4, r5}
 80136b6:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80136b8:	2002      	movs	r0, #2
}
 80136ba:	4770      	bx	lr

080136bc <HAL_DSI_ConfigCommand>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80136bc:	7c03      	ldrb	r3, [r0, #16]
 80136be:	2b01      	cmp	r3, #1
 80136c0:	d031      	beq.n	8013726 <HAL_DSI_ConfigCommand+0x6a>
{
 80136c2:	b430      	push	{r4, r5}
  __HAL_LOCK(hdsi);
 80136c4:	2301      	movs	r3, #1
 80136c6:	7403      	strb	r3, [r0, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80136c8:	6802      	ldr	r2, [r0, #0]
 80136ca:	6e94      	ldr	r4, [r2, #104]	; 0x68
 80136cc:	4b17      	ldr	r3, [pc, #92]	; (801372c <HAL_DSI_ConfigCommand+0x70>)
 80136ce:	4023      	ands	r3, r4
 80136d0:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80136d2:	6804      	ldr	r4, [r0, #0]
 80136d4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80136d6:	680b      	ldr	r3, [r1, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80136d8:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80136da:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 80136dc:	688d      	ldr	r5, [r1, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80136de:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 80136e0:	68cd      	ldr	r5, [r1, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80136e2:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 80136e4:	690d      	ldr	r5, [r1, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80136e6:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 80136e8:	694d      	ldr	r5, [r1, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80136ea:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 80136ec:	698d      	ldr	r5, [r1, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80136ee:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 80136f0:	69cd      	ldr	r5, [r1, #28]
                           LPCmd->LPGenLongWrite      | \
 80136f2:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 80136f4:	6a0d      	ldr	r5, [r1, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80136f6:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 80136f8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80136fa:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 80136fc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80136fe:	432b      	orrs	r3, r5
                           LPCmd->LPMaxReadPacket);
 8013700:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 8013702:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8013704:	4313      	orrs	r3, r2
 8013706:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8013708:	6802      	ldr	r2, [r0, #0]
 801370a:	6e93      	ldr	r3, [r2, #104]	; 0x68
 801370c:	f023 0302 	bic.w	r3, r3, #2
 8013710:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8013712:	6802      	ldr	r2, [r0, #0]
 8013714:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8013716:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8013718:	430b      	orrs	r3, r1
 801371a:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 801371c:	2300      	movs	r3, #0
 801371e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8013720:	4618      	mov	r0, r3
}
 8013722:	bc30      	pop	{r4, r5}
 8013724:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8013726:	2002      	movs	r0, #2
}
 8013728:	4770      	bx	lr
 801372a:	bf00      	nop
 801372c:	fef080ff 	.word	0xfef080ff

08013730 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8013730:	7c03      	ldrb	r3, [r0, #16]
 8013732:	2b01      	cmp	r3, #1
 8013734:	d00e      	beq.n	8013754 <HAL_DSI_ConfigFlowControl+0x24>
 8013736:	2301      	movs	r3, #1
 8013738:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 801373a:	6802      	ldr	r2, [r0, #0]
 801373c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 801373e:	f023 031f 	bic.w	r3, r3, #31
 8013742:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8013744:	6802      	ldr	r2, [r0, #0]
 8013746:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8013748:	4319      	orrs	r1, r3
 801374a:	62d1      	str	r1, [r2, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 801374c:	2300      	movs	r3, #0
 801374e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8013750:	4618      	mov	r0, r3
 8013752:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8013754:	2002      	movs	r0, #2
}
 8013756:	4770      	bx	lr

08013758 <HAL_DSI_ConfigPhyTimer>:
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8013758:	7c03      	ldrb	r3, [r0, #16]
 801375a:	2b01      	cmp	r3, #1
 801375c:	d03e      	beq.n	80137dc <HAL_DSI_ConfigPhyTimer+0x84>
{
 801375e:	b430      	push	{r4, r5}
  __HAL_LOCK(hdsi);
 8013760:	2301      	movs	r3, #1
 8013762:	7403      	strb	r3, [r0, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8013764:	680b      	ldr	r3, [r1, #0]
 8013766:	684a      	ldr	r2, [r1, #4]
 8013768:	4293      	cmp	r3, r2
 801376a:	bf38      	it	cc
 801376c:	4613      	movcc	r3, r2
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 801376e:	6804      	ldr	r4, [r0, #0]
 8013770:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8013774:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8013778:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 801377c:	6804      	ldr	r4, [r0, #0]
 801377e:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8013782:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8013786:	4313      	orrs	r3, r2
 8013788:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 801378c:	6802      	ldr	r2, [r0, #0]
 801378e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8013792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013796:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 801379a:	6804      	ldr	r4, [r0, #0]
 801379c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80137a0:	690b      	ldr	r3, [r1, #16]
 80137a2:	68cd      	ldr	r5, [r1, #12]
 80137a4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80137a8:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80137aa:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80137ae:	4313      	orrs	r3, r2
 80137b0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80137b4:	6802      	ldr	r2, [r0, #0]
 80137b6:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 80137ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80137be:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80137c2:	6802      	ldr	r2, [r0, #0]
 80137c4:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 80137c8:	6949      	ldr	r1, [r1, #20]
 80137ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80137ce:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80137d2:	2300      	movs	r3, #0
 80137d4:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80137d6:	4618      	mov	r0, r3
}
 80137d8:	bc30      	pop	{r4, r5}
 80137da:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80137dc:	2002      	movs	r0, #2
}
 80137de:	4770      	bx	lr

080137e0 <HAL_DSI_ConfigHostTimeouts>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80137e0:	7c03      	ldrb	r3, [r0, #16]
 80137e2:	2b01      	cmp	r3, #1
 80137e4:	d077      	beq.n	80138d6 <HAL_DSI_ConfigHostTimeouts+0xf6>
{
 80137e6:	b410      	push	{r4}
  __HAL_LOCK(hdsi);
 80137e8:	2301      	movs	r3, #1
 80137ea:	7403      	strb	r3, [r0, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80137ec:	6802      	ldr	r2, [r0, #0]
 80137ee:	6893      	ldr	r3, [r2, #8]
 80137f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80137f4:	6093      	str	r3, [r2, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80137f6:	6802      	ldr	r2, [r0, #0]
 80137f8:	6893      	ldr	r3, [r2, #8]
 80137fa:	680c      	ldr	r4, [r1, #0]
 80137fc:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8013800:	6093      	str	r3, [r2, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8013802:	6802      	ldr	r2, [r0, #0]
 8013804:	6f93      	ldr	r3, [r2, #120]	; 0x78
 8013806:	b29b      	uxth	r3, r3
 8013808:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 801380a:	6802      	ldr	r2, [r0, #0]
 801380c:	6f93      	ldr	r3, [r2, #120]	; 0x78
 801380e:	684c      	ldr	r4, [r1, #4]
 8013810:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013814:	6793      	str	r3, [r2, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8013816:	6802      	ldr	r2, [r0, #0]
 8013818:	6f93      	ldr	r3, [r2, #120]	; 0x78
 801381a:	0c1b      	lsrs	r3, r3, #16
 801381c:	041b      	lsls	r3, r3, #16
 801381e:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8013820:	6802      	ldr	r2, [r0, #0]
 8013822:	6f93      	ldr	r3, [r2, #120]	; 0x78
 8013824:	688c      	ldr	r4, [r1, #8]
 8013826:	4323      	orrs	r3, r4
 8013828:	6793      	str	r3, [r2, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 801382a:	6802      	ldr	r2, [r0, #0]
 801382c:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 801382e:	0c1b      	lsrs	r3, r3, #16
 8013830:	041b      	lsls	r3, r3, #16
 8013832:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8013834:	6802      	ldr	r2, [r0, #0]
 8013836:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8013838:	68cc      	ldr	r4, [r1, #12]
 801383a:	4323      	orrs	r3, r4
 801383c:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 801383e:	6802      	ldr	r2, [r0, #0]
 8013840:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8013844:	0c1b      	lsrs	r3, r3, #16
 8013846:	041b      	lsls	r3, r3, #16
 8013848:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 801384c:	6802      	ldr	r2, [r0, #0]
 801384e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8013852:	690c      	ldr	r4, [r1, #16]
 8013854:	4323      	orrs	r3, r4
 8013856:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 801385a:	6802      	ldr	r2, [r0, #0]
 801385c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8013860:	0c1b      	lsrs	r3, r3, #16
 8013862:	041b      	lsls	r3, r3, #16
 8013864:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8013868:	6802      	ldr	r2, [r0, #0]
 801386a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 801386e:	694c      	ldr	r4, [r1, #20]
 8013870:	4323      	orrs	r3, r4
 8013872:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8013876:	6802      	ldr	r2, [r0, #0]
 8013878:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 801387c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8013880:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8013884:	6802      	ldr	r2, [r0, #0]
 8013886:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 801388a:	698c      	ldr	r4, [r1, #24]
 801388c:	4323      	orrs	r3, r4
 801388e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8013892:	6802      	ldr	r2, [r0, #0]
 8013894:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8013898:	0c1b      	lsrs	r3, r3, #16
 801389a:	041b      	lsls	r3, r3, #16
 801389c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80138a0:	6802      	ldr	r2, [r0, #0]
 80138a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80138a6:	69cc      	ldr	r4, [r1, #28]
 80138a8:	4323      	orrs	r3, r4
 80138aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80138ae:	6802      	ldr	r2, [r0, #0]
 80138b0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80138b4:	0c1b      	lsrs	r3, r3, #16
 80138b6:	041b      	lsls	r3, r3, #16
 80138b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80138bc:	6802      	ldr	r2, [r0, #0]
 80138be:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80138c2:	6a09      	ldr	r1, [r1, #32]
 80138c4:	430b      	orrs	r3, r1
 80138c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80138ca:	2300      	movs	r3, #0
 80138cc:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80138ce:	4618      	mov	r0, r3
}
 80138d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80138d4:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80138d6:	2002      	movs	r0, #2
}
 80138d8:	4770      	bx	lr

080138da <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80138da:	7c03      	ldrb	r3, [r0, #16]
 80138dc:	2b01      	cmp	r3, #1
 80138de:	d021      	beq.n	8013924 <HAL_DSI_Start+0x4a>
{
 80138e0:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80138e2:	2301      	movs	r3, #1
 80138e4:	7403      	strb	r3, [r0, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80138e6:	2300      	movs	r3, #0
 80138e8:	9300      	str	r3, [sp, #0]
 80138ea:	6801      	ldr	r1, [r0, #0]
 80138ec:	684a      	ldr	r2, [r1, #4]
 80138ee:	f042 0201 	orr.w	r2, r2, #1
 80138f2:	604a      	str	r2, [r1, #4]
 80138f4:	6802      	ldr	r2, [r0, #0]
 80138f6:	6851      	ldr	r1, [r2, #4]
 80138f8:	f001 0101 	and.w	r1, r1, #1
 80138fc:	9100      	str	r1, [sp, #0]
 80138fe:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8013900:	9301      	str	r3, [sp, #4]
 8013902:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8013906:	f041 0108 	orr.w	r1, r1, #8
 801390a:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 801390e:	6802      	ldr	r2, [r0, #0]
 8013910:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8013914:	f002 0208 	and.w	r2, r2, #8
 8013918:	9201      	str	r2, [sp, #4]
 801391a:	9a01      	ldr	r2, [sp, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 801391c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 801391e:	4618      	mov	r0, r3
}
 8013920:	b002      	add	sp, #8
 8013922:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8013924:	2002      	movs	r0, #2
}
 8013926:	4770      	bx	lr

08013928 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8013928:	7c03      	ldrb	r3, [r0, #16]
 801392a:	2b01      	cmp	r3, #1
 801392c:	d00c      	beq.n	8013948 <HAL_DSI_Refresh+0x20>
 801392e:	2301      	movs	r3, #1
 8013930:	7403      	strb	r3, [r0, #16]

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8013932:	6802      	ldr	r2, [r0, #0]
 8013934:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 8013938:	f043 0304 	orr.w	r3, r3, #4
 801393c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8013940:	2300      	movs	r3, #0
 8013942:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8013944:	4618      	mov	r0, r3
 8013946:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8013948:	2002      	movs	r0, #2
}
 801394a:	4770      	bx	lr

0801394c <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 801394c:	b510      	push	{r4, lr}
 801394e:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8013950:	7c04      	ldrb	r4, [r0, #16]
 8013952:	2c01      	cmp	r4, #1
 8013954:	d00b      	beq.n	801396e <HAL_DSI_ShortWrite+0x22>
 8013956:	4604      	mov	r4, r0
 8013958:	2001      	movs	r0, #1
 801395a:	7420      	strb	r0, [r4, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 801395c:	9804      	ldr	r0, [sp, #16]
 801395e:	9000      	str	r0, [sp, #0]
 8013960:	4620      	mov	r0, r4
 8013962:	f7ff fc30 	bl	80131c6 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8013966:	2300      	movs	r3, #0
 8013968:	7423      	strb	r3, [r4, #16]

  return status;
}
 801396a:	b002      	add	sp, #8
 801396c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdsi);
 801396e:	2002      	movs	r0, #2
 8013970:	e7fb      	b.n	801396a <HAL_DSI_ShortWrite+0x1e>

08013972 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 8013972:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013976:	b082      	sub	sp, #8
 8013978:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801397a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 801397c:	7c06      	ldrb	r6, [r0, #16]
 801397e:	2e01      	cmp	r6, #1
 8013980:	d04c      	beq.n	8013a1c <HAL_DSI_LongWrite+0xaa>
 8013982:	4698      	mov	r8, r3
 8013984:	4692      	mov	sl, r2
 8013986:	4689      	mov	r9, r1
 8013988:	4607      	mov	r7, r0
 801398a:	2301      	movs	r3, #1
 801398c:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 801398e:	f7ff f849 	bl	8012a24 <HAL_GetTick>
 8013992:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8013994:	683a      	ldr	r2, [r7, #0]
 8013996:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8013998:	f013 0f01 	tst.w	r3, #1
 801399c:	d109      	bne.n	80139b2 <HAL_DSI_LongWrite+0x40>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 801399e:	f7ff f841 	bl	8012a24 <HAL_GetTick>
 80139a2:	1b80      	subs	r0, r0, r6
 80139a4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80139a8:	d9f4      	bls.n	8013994 <HAL_DSI_LongWrite+0x22>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80139aa:	2300      	movs	r3, #0
 80139ac:	743b      	strb	r3, [r7, #16]

      return HAL_TIMEOUT;
 80139ae:	2003      	movs	r0, #3
 80139b0:	e031      	b.n	8013a16 <HAL_DSI_LongWrite+0xa4>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80139b2:	4641      	mov	r1, r8
 80139b4:	2903      	cmp	r1, #3
 80139b6:	bf28      	it	cs
 80139b8:	2103      	movcs	r1, #3

  for (count = 0U; count < nbBytes; count++)
 80139ba:	2300      	movs	r3, #0
 80139bc:	e004      	b.n	80139c8 <HAL_DSI_LongWrite+0x56>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80139be:	5ce0      	ldrb	r0, [r4, r3]
 80139c0:	3301      	adds	r3, #1
 80139c2:	00de      	lsls	r6, r3, #3
 80139c4:	40b0      	lsls	r0, r6
 80139c6:	4305      	orrs	r5, r0
  for (count = 0U; count < nbBytes; count++)
 80139c8:	428b      	cmp	r3, r1
 80139ca:	d3f8      	bcc.n	80139be <HAL_DSI_LongWrite+0x4c>
  }
  hdsi->Instance->GPDR = fifoword;
 80139cc:	6715      	str	r5, [r2, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80139ce:	eba8 0001 	sub.w	r0, r8, r1
  pparams += nbBytes;
 80139d2:	4421      	add	r1, r4
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80139d4:	e00a      	b.n	80139ec <HAL_DSI_LongWrite+0x7a>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80139d6:	5d0d      	ldrb	r5, [r1, r4]
 80139d8:	00e3      	lsls	r3, r4, #3
 80139da:	409d      	lsls	r5, r3
 80139dc:	432e      	orrs	r6, r5
    for (count = 0U; count < nbBytes; count++)
 80139de:	3401      	adds	r4, #1
 80139e0:	4294      	cmp	r4, r2
 80139e2:	d3f8      	bcc.n	80139d6 <HAL_DSI_LongWrite+0x64>
    }
    hdsi->Instance->GPDR = fifoword;
 80139e4:	683b      	ldr	r3, [r7, #0]
 80139e6:	671e      	str	r6, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80139e8:	1a80      	subs	r0, r0, r2
    pparams += nbBytes;
 80139ea:	4411      	add	r1, r2
  while (uicounter != 0U)
 80139ec:	b130      	cbz	r0, 80139fc <HAL_DSI_LongWrite+0x8a>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80139ee:	4602      	mov	r2, r0
 80139f0:	2804      	cmp	r0, #4
 80139f2:	bf28      	it	cs
 80139f4:	2204      	movcs	r2, #4
    fifoword = 0U;
 80139f6:	2600      	movs	r6, #0
    for (count = 0U; count < nbBytes; count++)
 80139f8:	4634      	mov	r4, r6
 80139fa:	e7f1      	b.n	80139e0 <HAL_DSI_LongWrite+0x6e>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80139fc:	f108 0301 	add.w	r3, r8, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 8013a00:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8013a04:	9200      	str	r2, [sp, #0]
 8013a06:	b2db      	uxtb	r3, r3
 8013a08:	4652      	mov	r2, sl
 8013a0a:	4649      	mov	r1, r9
 8013a0c:	6838      	ldr	r0, [r7, #0]
 8013a0e:	f7ff fbd1 	bl	80131b4 <DSI_ConfigPacketHeader>
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8013a12:	2000      	movs	r0, #0
 8013a14:	7438      	strb	r0, [r7, #16]

  return HAL_OK;
}
 8013a16:	b002      	add	sp, #8
 8013a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8013a1c:	2002      	movs	r0, #2
 8013a1e:	e7fa      	b.n	8013a16 <HAL_DSI_LongWrite+0xa4>

08013a20 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8013a20:	7c03      	ldrb	r3, [r0, #16]
 8013a22:	2b01      	cmp	r3, #1
 8013a24:	d013      	beq.n	8013a4e <HAL_DSI_SetLowPowerRXFilter+0x2e>
 8013a26:	2301      	movs	r3, #1
 8013a28:	7403      	strb	r3, [r0, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8013a2a:	6802      	ldr	r2, [r0, #0]
 8013a2c:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 8013a30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8013a34:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8013a38:	6802      	ldr	r2, [r0, #0]
 8013a3a:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 8013a3e:	ea43 6141 	orr.w	r1, r3, r1, lsl #25
 8013a42:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8013a46:	2300      	movs	r3, #0
 8013a48:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8013a4e:	2002      	movs	r0, #2
}
 8013a50:	4770      	bx	lr
	...

08013a54 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013a54:	2300      	movs	r3, #0
 8013a56:	2b0f      	cmp	r3, #15
 8013a58:	f200 80e3 	bhi.w	8013c22 <HAL_GPIO_Init+0x1ce>
{
 8013a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a5e:	b083      	sub	sp, #12
 8013a60:	e039      	b.n	8013ad6 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8013a62:	2209      	movs	r2, #9
 8013a64:	e000      	b.n	8013a68 <HAL_GPIO_Init+0x14>
 8013a66:	2200      	movs	r2, #0
 8013a68:	40aa      	lsls	r2, r5
 8013a6a:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8013a6c:	3402      	adds	r4, #2
 8013a6e:	4d6d      	ldr	r5, [pc, #436]	; (8013c24 <HAL_GPIO_Init+0x1d0>)
 8013a70:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8013a74:	4a6c      	ldr	r2, [pc, #432]	; (8013c28 <HAL_GPIO_Init+0x1d4>)
 8013a76:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8013a78:	43f2      	mvns	r2, r6
 8013a7a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8013a7e:	684f      	ldr	r7, [r1, #4]
 8013a80:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8013a84:	d001      	beq.n	8013a8a <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8013a86:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8013a8a:	4c67      	ldr	r4, [pc, #412]	; (8013c28 <HAL_GPIO_Init+0x1d4>)
 8013a8c:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8013a8e:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8013a90:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8013a94:	684f      	ldr	r7, [r1, #4]
 8013a96:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8013a9a:	d001      	beq.n	8013aa0 <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8013a9c:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8013aa0:	4c61      	ldr	r4, [pc, #388]	; (8013c28 <HAL_GPIO_Init+0x1d4>)
 8013aa2:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8013aa4:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8013aa6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8013aaa:	684f      	ldr	r7, [r1, #4]
 8013aac:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8013ab0:	d001      	beq.n	8013ab6 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8013ab2:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8013ab6:	4c5c      	ldr	r4, [pc, #368]	; (8013c28 <HAL_GPIO_Init+0x1d4>)
 8013ab8:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8013aba:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8013abc:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8013abe:	684d      	ldr	r5, [r1, #4]
 8013ac0:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8013ac4:	d001      	beq.n	8013aca <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8013ac6:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8013aca:	4c57      	ldr	r4, [pc, #348]	; (8013c28 <HAL_GPIO_Init+0x1d4>)
 8013acc:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013ace:	3301      	adds	r3, #1
 8013ad0:	2b0f      	cmp	r3, #15
 8013ad2:	f200 80a4 	bhi.w	8013c1e <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8013ad6:	2201      	movs	r2, #1
 8013ad8:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8013ada:	680c      	ldr	r4, [r1, #0]
 8013adc:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8013ae0:	42b2      	cmp	r2, r6
 8013ae2:	d1f4      	bne.n	8013ace <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8013ae4:	684c      	ldr	r4, [r1, #4]
 8013ae6:	1e65      	subs	r5, r4, #1
 8013ae8:	2d01      	cmp	r5, #1
 8013aea:	d903      	bls.n	8013af4 <HAL_GPIO_Init+0xa0>
 8013aec:	2c11      	cmp	r4, #17
 8013aee:	d001      	beq.n	8013af4 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013af0:	2c12      	cmp	r4, #18
 8013af2:	d112      	bne.n	8013b1a <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8013af4:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8013af6:	005f      	lsls	r7, r3, #1
 8013af8:	2403      	movs	r4, #3
 8013afa:	40bc      	lsls	r4, r7
 8013afc:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8013b00:	68cc      	ldr	r4, [r1, #12]
 8013b02:	40bc      	lsls	r4, r7
 8013b04:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8013b06:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8013b08:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8013b0a:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8013b0e:	684c      	ldr	r4, [r1, #4]
 8013b10:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8013b14:	409a      	lsls	r2, r3
 8013b16:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8013b18:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8013b1a:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8013b1c:	005f      	lsls	r7, r3, #1
 8013b1e:	2203      	movs	r2, #3
 8013b20:	40ba      	lsls	r2, r7
 8013b22:	43d2      	mvns	r2, r2
 8013b24:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8013b26:	688d      	ldr	r5, [r1, #8]
 8013b28:	40bd      	lsls	r5, r7
 8013b2a:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8013b2c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013b2e:	684c      	ldr	r4, [r1, #4]
 8013b30:	2c02      	cmp	r4, #2
 8013b32:	d001      	beq.n	8013b38 <HAL_GPIO_Init+0xe4>
 8013b34:	2c12      	cmp	r4, #18
 8013b36:	d113      	bne.n	8013b60 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8013b38:	08dd      	lsrs	r5, r3, #3
 8013b3a:	3508      	adds	r5, #8
 8013b3c:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8013b40:	f003 0407 	and.w	r4, r3, #7
 8013b44:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8013b48:	240f      	movs	r4, #15
 8013b4a:	fa04 f40c 	lsl.w	r4, r4, ip
 8013b4e:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8013b52:	690c      	ldr	r4, [r1, #16]
 8013b54:	fa04 f40c 	lsl.w	r4, r4, ip
 8013b58:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8013b5c:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8013b60:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8013b62:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8013b64:	684c      	ldr	r4, [r1, #4]
 8013b66:	f004 0403 	and.w	r4, r4, #3
 8013b6a:	40bc      	lsls	r4, r7
 8013b6c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8013b6e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8013b70:	684a      	ldr	r2, [r1, #4]
 8013b72:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8013b76:	d0aa      	beq.n	8013ace <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013b78:	2200      	movs	r2, #0
 8013b7a:	9201      	str	r2, [sp, #4]
 8013b7c:	4a2b      	ldr	r2, [pc, #172]	; (8013c2c <HAL_GPIO_Init+0x1d8>)
 8013b7e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8013b80:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8013b84:	6454      	str	r4, [r2, #68]	; 0x44
 8013b86:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8013b88:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8013b8c:	9201      	str	r2, [sp, #4]
 8013b8e:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8013b90:	089c      	lsrs	r4, r3, #2
 8013b92:	1ca5      	adds	r5, r4, #2
 8013b94:	4a23      	ldr	r2, [pc, #140]	; (8013c24 <HAL_GPIO_Init+0x1d0>)
 8013b96:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8013b9a:	f003 0203 	and.w	r2, r3, #3
 8013b9e:	0095      	lsls	r5, r2, #2
 8013ba0:	220f      	movs	r2, #15
 8013ba2:	40aa      	lsls	r2, r5
 8013ba4:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8013ba8:	4a21      	ldr	r2, [pc, #132]	; (8013c30 <HAL_GPIO_Init+0x1dc>)
 8013baa:	4290      	cmp	r0, r2
 8013bac:	f43f af5b 	beq.w	8013a66 <HAL_GPIO_Init+0x12>
 8013bb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013bb4:	4290      	cmp	r0, r2
 8013bb6:	d022      	beq.n	8013bfe <HAL_GPIO_Init+0x1aa>
 8013bb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013bbc:	4290      	cmp	r0, r2
 8013bbe:	d020      	beq.n	8013c02 <HAL_GPIO_Init+0x1ae>
 8013bc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013bc4:	4290      	cmp	r0, r2
 8013bc6:	d01e      	beq.n	8013c06 <HAL_GPIO_Init+0x1b2>
 8013bc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013bcc:	4290      	cmp	r0, r2
 8013bce:	d01c      	beq.n	8013c0a <HAL_GPIO_Init+0x1b6>
 8013bd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013bd4:	4290      	cmp	r0, r2
 8013bd6:	d01a      	beq.n	8013c0e <HAL_GPIO_Init+0x1ba>
 8013bd8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013bdc:	4290      	cmp	r0, r2
 8013bde:	d018      	beq.n	8013c12 <HAL_GPIO_Init+0x1be>
 8013be0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013be4:	4290      	cmp	r0, r2
 8013be6:	d016      	beq.n	8013c16 <HAL_GPIO_Init+0x1c2>
 8013be8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013bec:	4290      	cmp	r0, r2
 8013bee:	d014      	beq.n	8013c1a <HAL_GPIO_Init+0x1c6>
 8013bf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8013bf4:	4290      	cmp	r0, r2
 8013bf6:	f43f af34 	beq.w	8013a62 <HAL_GPIO_Init+0xe>
 8013bfa:	220a      	movs	r2, #10
 8013bfc:	e734      	b.n	8013a68 <HAL_GPIO_Init+0x14>
 8013bfe:	2201      	movs	r2, #1
 8013c00:	e732      	b.n	8013a68 <HAL_GPIO_Init+0x14>
 8013c02:	2202      	movs	r2, #2
 8013c04:	e730      	b.n	8013a68 <HAL_GPIO_Init+0x14>
 8013c06:	2203      	movs	r2, #3
 8013c08:	e72e      	b.n	8013a68 <HAL_GPIO_Init+0x14>
 8013c0a:	2204      	movs	r2, #4
 8013c0c:	e72c      	b.n	8013a68 <HAL_GPIO_Init+0x14>
 8013c0e:	2205      	movs	r2, #5
 8013c10:	e72a      	b.n	8013a68 <HAL_GPIO_Init+0x14>
 8013c12:	2206      	movs	r2, #6
 8013c14:	e728      	b.n	8013a68 <HAL_GPIO_Init+0x14>
 8013c16:	2207      	movs	r2, #7
 8013c18:	e726      	b.n	8013a68 <HAL_GPIO_Init+0x14>
 8013c1a:	2208      	movs	r2, #8
 8013c1c:	e724      	b.n	8013a68 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8013c1e:	b003      	add	sp, #12
 8013c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c22:	4770      	bx	lr
 8013c24:	40013800 	.word	0x40013800
 8013c28:	40013c00 	.word	0x40013c00
 8013c2c:	40023800 	.word	0x40023800
 8013c30:	40020000 	.word	0x40020000

08013c34 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013c34:	2300      	movs	r3, #0
 8013c36:	2b0f      	cmp	r3, #15
 8013c38:	f200 8094 	bhi.w	8013d64 <HAL_GPIO_DeInit+0x130>
{
 8013c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c3e:	e029      	b.n	8013c94 <HAL_GPIO_DeInit+0x60>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8013c40:	2709      	movs	r7, #9
 8013c42:	e000      	b.n	8013c46 <HAL_GPIO_DeInit+0x12>
 8013c44:	2700      	movs	r7, #0
 8013c46:	fa07 f505 	lsl.w	r5, r7, r5
 8013c4a:	42b5      	cmp	r5, r6
 8013c4c:	d071      	beq.n	8013d32 <HAL_GPIO_DeInit+0xfe>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8013c4e:	6805      	ldr	r5, [r0, #0]
 8013c50:	005e      	lsls	r6, r3, #1
 8013c52:	2403      	movs	r4, #3
 8013c54:	40b4      	lsls	r4, r6
 8013c56:	43e4      	mvns	r4, r4
 8013c58:	4025      	ands	r5, r4
 8013c5a:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8013c5c:	08dd      	lsrs	r5, r3, #3
 8013c5e:	3508      	adds	r5, #8
 8013c60:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8013c64:	f003 0707 	and.w	r7, r3, #7
 8013c68:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8013c6c:	270f      	movs	r7, #15
 8013c6e:	fa07 f70c 	lsl.w	r7, r7, ip
 8013c72:	ea26 0607 	bic.w	r6, r6, r7
 8013c76:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8013c7a:	68c5      	ldr	r5, [r0, #12]
 8013c7c:	4025      	ands	r5, r4
 8013c7e:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8013c80:	6845      	ldr	r5, [r0, #4]
 8013c82:	ea25 0202 	bic.w	r2, r5, r2
 8013c86:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8013c88:	6882      	ldr	r2, [r0, #8]
 8013c8a:	4014      	ands	r4, r2
 8013c8c:	6084      	str	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8013c8e:	3301      	adds	r3, #1
 8013c90:	2b0f      	cmp	r3, #15
 8013c92:	d866      	bhi.n	8013d62 <HAL_GPIO_DeInit+0x12e>
    ioposition = 0x01U << position;
 8013c94:	2201      	movs	r2, #1
 8013c96:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8013c98:	ea02 0401 	and.w	r4, r2, r1
    if(iocurrent == ioposition)
 8013c9c:	42a2      	cmp	r2, r4
 8013c9e:	d1f6      	bne.n	8013c8e <HAL_GPIO_DeInit+0x5a>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8013ca0:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8013ca4:	f10e 0602 	add.w	r6, lr, #2
 8013ca8:	4d2f      	ldr	r5, [pc, #188]	; (8013d68 <HAL_GPIO_DeInit+0x134>)
 8013caa:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8013cae:	f003 0503 	and.w	r5, r3, #3
 8013cb2:	00ad      	lsls	r5, r5, #2
 8013cb4:	f04f 0c0f 	mov.w	ip, #15
 8013cb8:	fa0c fc05 	lsl.w	ip, ip, r5
 8013cbc:	ea0c 0606 	and.w	r6, ip, r6
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8013cc0:	4f2a      	ldr	r7, [pc, #168]	; (8013d6c <HAL_GPIO_DeInit+0x138>)
 8013cc2:	42b8      	cmp	r0, r7
 8013cc4:	d0be      	beq.n	8013c44 <HAL_GPIO_DeInit+0x10>
 8013cc6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8013cca:	42b8      	cmp	r0, r7
 8013ccc:	d021      	beq.n	8013d12 <HAL_GPIO_DeInit+0xde>
 8013cce:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8013cd2:	42b8      	cmp	r0, r7
 8013cd4:	d01f      	beq.n	8013d16 <HAL_GPIO_DeInit+0xe2>
 8013cd6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8013cda:	42b8      	cmp	r0, r7
 8013cdc:	d01d      	beq.n	8013d1a <HAL_GPIO_DeInit+0xe6>
 8013cde:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8013ce2:	42b8      	cmp	r0, r7
 8013ce4:	d01b      	beq.n	8013d1e <HAL_GPIO_DeInit+0xea>
 8013ce6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8013cea:	42b8      	cmp	r0, r7
 8013cec:	d019      	beq.n	8013d22 <HAL_GPIO_DeInit+0xee>
 8013cee:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8013cf2:	42b8      	cmp	r0, r7
 8013cf4:	d017      	beq.n	8013d26 <HAL_GPIO_DeInit+0xf2>
 8013cf6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8013cfa:	42b8      	cmp	r0, r7
 8013cfc:	d015      	beq.n	8013d2a <HAL_GPIO_DeInit+0xf6>
 8013cfe:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8013d02:	42b8      	cmp	r0, r7
 8013d04:	d013      	beq.n	8013d2e <HAL_GPIO_DeInit+0xfa>
 8013d06:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8013d0a:	42b8      	cmp	r0, r7
 8013d0c:	d098      	beq.n	8013c40 <HAL_GPIO_DeInit+0xc>
 8013d0e:	270a      	movs	r7, #10
 8013d10:	e799      	b.n	8013c46 <HAL_GPIO_DeInit+0x12>
 8013d12:	2701      	movs	r7, #1
 8013d14:	e797      	b.n	8013c46 <HAL_GPIO_DeInit+0x12>
 8013d16:	2702      	movs	r7, #2
 8013d18:	e795      	b.n	8013c46 <HAL_GPIO_DeInit+0x12>
 8013d1a:	2703      	movs	r7, #3
 8013d1c:	e793      	b.n	8013c46 <HAL_GPIO_DeInit+0x12>
 8013d1e:	2704      	movs	r7, #4
 8013d20:	e791      	b.n	8013c46 <HAL_GPIO_DeInit+0x12>
 8013d22:	2705      	movs	r7, #5
 8013d24:	e78f      	b.n	8013c46 <HAL_GPIO_DeInit+0x12>
 8013d26:	2706      	movs	r7, #6
 8013d28:	e78d      	b.n	8013c46 <HAL_GPIO_DeInit+0x12>
 8013d2a:	2707      	movs	r7, #7
 8013d2c:	e78b      	b.n	8013c46 <HAL_GPIO_DeInit+0x12>
 8013d2e:	2708      	movs	r7, #8
 8013d30:	e789      	b.n	8013c46 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8013d32:	4d0f      	ldr	r5, [pc, #60]	; (8013d70 <HAL_GPIO_DeInit+0x13c>)
 8013d34:	682e      	ldr	r6, [r5, #0]
 8013d36:	43e4      	mvns	r4, r4
 8013d38:	4026      	ands	r6, r4
 8013d3a:	602e      	str	r6, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8013d3c:	686e      	ldr	r6, [r5, #4]
 8013d3e:	4026      	ands	r6, r4
 8013d40:	606e      	str	r6, [r5, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8013d42:	68ae      	ldr	r6, [r5, #8]
 8013d44:	4026      	ands	r6, r4
 8013d46:	60ae      	str	r6, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8013d48:	68ee      	ldr	r6, [r5, #12]
 8013d4a:	4034      	ands	r4, r6
 8013d4c:	60ec      	str	r4, [r5, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8013d4e:	4e06      	ldr	r6, [pc, #24]	; (8013d68 <HAL_GPIO_DeInit+0x134>)
 8013d50:	f10e 0402 	add.w	r4, lr, #2
 8013d54:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8013d58:	ea25 050c 	bic.w	r5, r5, ip
 8013d5c:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 8013d60:	e775      	b.n	8013c4e <HAL_GPIO_DeInit+0x1a>
    }
  }
}
 8013d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d64:	4770      	bx	lr
 8013d66:	bf00      	nop
 8013d68:	40013800 	.word	0x40013800
 8013d6c:	40020000 	.word	0x40020000
 8013d70:	40013c00 	.word	0x40013c00

08013d74 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8013d74:	6903      	ldr	r3, [r0, #16]
 8013d76:	4219      	tst	r1, r3
 8013d78:	d101      	bne.n	8013d7e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8013d7a:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8013d7c:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8013d7e:	2001      	movs	r0, #1
 8013d80:	4770      	bx	lr

08013d82 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8013d82:	b912      	cbnz	r2, 8013d8a <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8013d84:	0409      	lsls	r1, r1, #16
 8013d86:	6181      	str	r1, [r0, #24]
  }
}
 8013d88:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8013d8a:	6181      	str	r1, [r0, #24]
 8013d8c:	4770      	bx	lr

08013d8e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8013d8e:	6943      	ldr	r3, [r0, #20]
 8013d90:	ea31 0303 	bics.w	r3, r1, r3
 8013d94:	d001      	beq.n	8013d9a <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8013d96:	6181      	str	r1, [r0, #24]
  }
}
 8013d98:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8013d9a:	0409      	lsls	r1, r1, #16
 8013d9c:	6181      	str	r1, [r0, #24]
 8013d9e:	4770      	bx	lr

08013da0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8013da0:	6803      	ldr	r3, [r0, #0]
 8013da2:	695a      	ldr	r2, [r3, #20]
 8013da4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8013da8:	d011      	beq.n	8013dce <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013daa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013dae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8013db0:	2300      	movs	r3, #0
 8013db2:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8013db4:	2220      	movs	r2, #32
 8013db6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013dba:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8013dbe:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013dc0:	f042 0204 	orr.w	r2, r2, #4
 8013dc4:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8013dc6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8013dca:	2001      	movs	r0, #1
 8013dcc:	4770      	bx	lr
  }
  return HAL_OK;
 8013dce:	2000      	movs	r0, #0
}
 8013dd0:	4770      	bx	lr

08013dd2 <I2C_WaitOnFlagUntilTimeout>:
{
 8013dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dd4:	4606      	mov	r6, r0
 8013dd6:	460c      	mov	r4, r1
 8013dd8:	4617      	mov	r7, r2
 8013dda:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013ddc:	e022      	b.n	8013e24 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013dde:	f7fe fe21 	bl	8012a24 <HAL_GetTick>
 8013de2:	9b06      	ldr	r3, [sp, #24]
 8013de4:	1ac0      	subs	r0, r0, r3
 8013de6:	42a8      	cmp	r0, r5
 8013de8:	d800      	bhi.n	8013dec <I2C_WaitOnFlagUntilTimeout+0x1a>
 8013dea:	b9dd      	cbnz	r5, 8013e24 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8013dec:	2300      	movs	r3, #0
 8013dee:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8013df0:	2220      	movs	r2, #32
 8013df2:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8013df6:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8013dfa:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8013dfc:	f042 0220 	orr.w	r2, r2, #32
 8013e00:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8013e02:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8013e06:	2001      	movs	r0, #1
 8013e08:	e01a      	b.n	8013e40 <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013e0a:	6833      	ldr	r3, [r6, #0]
 8013e0c:	695b      	ldr	r3, [r3, #20]
 8013e0e:	ea24 0303 	bic.w	r3, r4, r3
 8013e12:	b29b      	uxth	r3, r3
 8013e14:	fab3 f383 	clz	r3, r3
 8013e18:	095b      	lsrs	r3, r3, #5
 8013e1a:	429f      	cmp	r7, r3
 8013e1c:	d10f      	bne.n	8013e3e <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8013e1e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8013e22:	d1dc      	bne.n	8013dde <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8013e24:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8013e28:	2b01      	cmp	r3, #1
 8013e2a:	d0ee      	beq.n	8013e0a <I2C_WaitOnFlagUntilTimeout+0x38>
 8013e2c:	6833      	ldr	r3, [r6, #0]
 8013e2e:	699b      	ldr	r3, [r3, #24]
 8013e30:	ea24 0303 	bic.w	r3, r4, r3
 8013e34:	b29b      	uxth	r3, r3
 8013e36:	fab3 f383 	clz	r3, r3
 8013e3a:	095b      	lsrs	r3, r3, #5
 8013e3c:	e7ed      	b.n	8013e1a <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8013e3e:	2000      	movs	r0, #0
}
 8013e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8013e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e44:	4604      	mov	r4, r0
 8013e46:	460d      	mov	r5, r1
 8013e48:	4616      	mov	r6, r2
 8013e4a:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8013e4c:	e03c      	b.n	8013ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8013e4e:	681a      	ldr	r2, [r3, #0]
 8013e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013e54:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8013e56:	6823      	ldr	r3, [r4, #0]
 8013e58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8013e5c:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8013e5e:	2300      	movs	r3, #0
 8013e60:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8013e62:	2220      	movs	r2, #32
 8013e64:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013e68:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8013e6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013e6e:	f042 0204 	orr.w	r2, r2, #4
 8013e72:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8013e74:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8013e78:	2001      	movs	r0, #1
 8013e7a:	e033      	b.n	8013ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013e7c:	f7fe fdd2 	bl	8012a24 <HAL_GetTick>
 8013e80:	1bc0      	subs	r0, r0, r7
 8013e82:	42b0      	cmp	r0, r6
 8013e84:	d800      	bhi.n	8013e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8013e86:	b9fe      	cbnz	r6, 8013ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8013e8c:	2220      	movs	r2, #32
 8013e8e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8013e92:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8013e96:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8013e98:	f042 0220 	orr.w	r2, r2, #32
 8013e9c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8013e9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8013ea2:	2001      	movs	r0, #1
 8013ea4:	e01e      	b.n	8013ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8013ea6:	6823      	ldr	r3, [r4, #0]
 8013ea8:	695b      	ldr	r3, [r3, #20]
 8013eaa:	ea25 0303 	bic.w	r3, r5, r3
 8013eae:	b29b      	uxth	r3, r3
 8013eb0:	3300      	adds	r3, #0
 8013eb2:	bf18      	it	ne
 8013eb4:	2301      	movne	r3, #1
 8013eb6:	b1a3      	cbz	r3, 8013ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8013eb8:	6823      	ldr	r3, [r4, #0]
 8013eba:	695a      	ldr	r2, [r3, #20]
 8013ebc:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8013ec0:	d1c5      	bne.n	8013e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8013ec2:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8013ec6:	d1d9      	bne.n	8013e7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8013ec8:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8013ecc:	2b01      	cmp	r3, #1
 8013ece:	d0ea      	beq.n	8013ea6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8013ed0:	6823      	ldr	r3, [r4, #0]
 8013ed2:	699b      	ldr	r3, [r3, #24]
 8013ed4:	ea25 0303 	bic.w	r3, r5, r3
 8013ed8:	b29b      	uxth	r3, r3
 8013eda:	3300      	adds	r3, #0
 8013edc:	bf18      	it	ne
 8013ede:	2301      	movne	r3, #1
 8013ee0:	e7e9      	b.n	8013eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8013ee2:	2000      	movs	r0, #0
}
 8013ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013ee8 <I2C_MasterRequestWrite>:
{
 8013ee8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013eea:	b083      	sub	sp, #12
 8013eec:	4604      	mov	r4, r0
 8013eee:	460f      	mov	r7, r1
 8013ef0:	4615      	mov	r5, r2
 8013ef2:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8013ef4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8013ef6:	2b08      	cmp	r3, #8
 8013ef8:	d00d      	beq.n	8013f16 <I2C_MasterRequestWrite+0x2e>
 8013efa:	2b01      	cmp	r3, #1
 8013efc:	d00b      	beq.n	8013f16 <I2C_MasterRequestWrite+0x2e>
 8013efe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8013f02:	d008      	beq.n	8013f16 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8013f04:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013f06:	2b12      	cmp	r3, #18
 8013f08:	d10a      	bne.n	8013f20 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013f0a:	6802      	ldr	r2, [r0, #0]
 8013f0c:	6813      	ldr	r3, [r2, #0]
 8013f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f12:	6013      	str	r3, [r2, #0]
 8013f14:	e004      	b.n	8013f20 <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013f16:	6822      	ldr	r2, [r4, #0]
 8013f18:	6813      	ldr	r3, [r2, #0]
 8013f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013f1e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8013f20:	9600      	str	r6, [sp, #0]
 8013f22:	462b      	mov	r3, r5
 8013f24:	2200      	movs	r2, #0
 8013f26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013f2a:	4620      	mov	r0, r4
 8013f2c:	f7ff ff51 	bl	8013dd2 <I2C_WaitOnFlagUntilTimeout>
 8013f30:	b158      	cbz	r0, 8013f4a <I2C_MasterRequestWrite+0x62>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8013f32:	6823      	ldr	r3, [r4, #0]
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	f413 7f80 	tst.w	r3, #256	; 0x100
 8013f3a:	d02b      	beq.n	8013f94 <I2C_MasterRequestWrite+0xac>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8013f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013f40:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8013f42:	2303      	movs	r3, #3
}
 8013f44:	4618      	mov	r0, r3
 8013f46:	b003      	add	sp, #12
 8013f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8013f4a:	6923      	ldr	r3, [r4, #16]
 8013f4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013f50:	d10e      	bne.n	8013f70 <I2C_MasterRequestWrite+0x88>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8013f52:	6823      	ldr	r3, [r4, #0]
 8013f54:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8013f58:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8013f5a:	4633      	mov	r3, r6
 8013f5c:	462a      	mov	r2, r5
 8013f5e:	490f      	ldr	r1, [pc, #60]	; (8013f9c <I2C_MasterRequestWrite+0xb4>)
 8013f60:	4620      	mov	r0, r4
 8013f62:	f7ff ff6e 	bl	8013e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013f66:	4603      	mov	r3, r0
 8013f68:	2800      	cmp	r0, #0
 8013f6a:	d0eb      	beq.n	8013f44 <I2C_MasterRequestWrite+0x5c>
    return HAL_ERROR;
 8013f6c:	2301      	movs	r3, #1
 8013f6e:	e7e9      	b.n	8013f44 <I2C_MasterRequestWrite+0x5c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8013f70:	11fb      	asrs	r3, r7, #7
 8013f72:	6822      	ldr	r2, [r4, #0]
 8013f74:	f003 0306 	and.w	r3, r3, #6
 8013f78:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8013f7c:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8013f7e:	4633      	mov	r3, r6
 8013f80:	462a      	mov	r2, r5
 8013f82:	4907      	ldr	r1, [pc, #28]	; (8013fa0 <I2C_MasterRequestWrite+0xb8>)
 8013f84:	4620      	mov	r0, r4
 8013f86:	f7ff ff5c 	bl	8013e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8013f8a:	b928      	cbnz	r0, 8013f98 <I2C_MasterRequestWrite+0xb0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8013f8c:	6823      	ldr	r3, [r4, #0]
 8013f8e:	b2ff      	uxtb	r7, r7
 8013f90:	611f      	str	r7, [r3, #16]
 8013f92:	e7e2      	b.n	8013f5a <I2C_MasterRequestWrite+0x72>
    return HAL_TIMEOUT;
 8013f94:	2303      	movs	r3, #3
 8013f96:	e7d5      	b.n	8013f44 <I2C_MasterRequestWrite+0x5c>
      return HAL_ERROR;
 8013f98:	2301      	movs	r3, #1
 8013f9a:	e7d3      	b.n	8013f44 <I2C_MasterRequestWrite+0x5c>
 8013f9c:	00010002 	.word	0x00010002
 8013fa0:	00010008 	.word	0x00010008

08013fa4 <I2C_MasterRequestRead>:
{
 8013fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fa8:	b084      	sub	sp, #16
 8013faa:	4604      	mov	r4, r0
 8013fac:	460d      	mov	r5, r1
 8013fae:	4616      	mov	r6, r2
 8013fb0:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8013fb2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8013fb4:	6801      	ldr	r1, [r0, #0]
 8013fb6:	680b      	ldr	r3, [r1, #0]
 8013fb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013fbc:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8013fbe:	2a08      	cmp	r2, #8
 8013fc0:	d00d      	beq.n	8013fde <I2C_MasterRequestRead+0x3a>
 8013fc2:	2a01      	cmp	r2, #1
 8013fc4:	d00b      	beq.n	8013fde <I2C_MasterRequestRead+0x3a>
 8013fc6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8013fca:	d008      	beq.n	8013fde <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8013fcc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8013fce:	2b11      	cmp	r3, #17
 8013fd0:	d10a      	bne.n	8013fe8 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013fd2:	6802      	ldr	r2, [r0, #0]
 8013fd4:	6813      	ldr	r3, [r2, #0]
 8013fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013fda:	6013      	str	r3, [r2, #0]
 8013fdc:	e004      	b.n	8013fe8 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8013fde:	6822      	ldr	r2, [r4, #0]
 8013fe0:	6813      	ldr	r3, [r2, #0]
 8013fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013fe6:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8013fe8:	9700      	str	r7, [sp, #0]
 8013fea:	4633      	mov	r3, r6
 8013fec:	2200      	movs	r2, #0
 8013fee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8013ff2:	4620      	mov	r0, r4
 8013ff4:	f7ff feed 	bl	8013dd2 <I2C_WaitOnFlagUntilTimeout>
 8013ff8:	b160      	cbz	r0, 8014014 <I2C_MasterRequestRead+0x70>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8013ffa:	6823      	ldr	r3, [r4, #0]
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8014002:	d05b      	beq.n	80140bc <I2C_MasterRequestRead+0x118>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8014004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014008:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 801400a:	2303      	movs	r3, #3
}
 801400c:	4618      	mov	r0, r3
 801400e:	b004      	add	sp, #16
 8014010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8014014:	6923      	ldr	r3, [r4, #16]
 8014016:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801401a:	d10f      	bne.n	801403c <I2C_MasterRequestRead+0x98>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801401c:	6823      	ldr	r3, [r4, #0]
 801401e:	f045 0501 	orr.w	r5, r5, #1
 8014022:	b2ed      	uxtb	r5, r5
 8014024:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8014026:	463b      	mov	r3, r7
 8014028:	4632      	mov	r2, r6
 801402a:	4926      	ldr	r1, [pc, #152]	; (80140c4 <I2C_MasterRequestRead+0x120>)
 801402c:	4620      	mov	r0, r4
 801402e:	f7ff ff08 	bl	8013e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8014032:	4603      	mov	r3, r0
 8014034:	2800      	cmp	r0, #0
 8014036:	d0e9      	beq.n	801400c <I2C_MasterRequestRead+0x68>
    return HAL_ERROR;
 8014038:	2301      	movs	r3, #1
 801403a:	e7e7      	b.n	801400c <I2C_MasterRequestRead+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 801403c:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8014040:	f008 0806 	and.w	r8, r8, #6
 8014044:	6823      	ldr	r3, [r4, #0]
 8014046:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 801404a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 801404c:	463b      	mov	r3, r7
 801404e:	4632      	mov	r2, r6
 8014050:	491d      	ldr	r1, [pc, #116]	; (80140c8 <I2C_MasterRequestRead+0x124>)
 8014052:	4620      	mov	r0, r4
 8014054:	f7ff fef5 	bl	8013e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8014058:	b108      	cbz	r0, 801405e <I2C_MasterRequestRead+0xba>
      return HAL_ERROR;
 801405a:	2301      	movs	r3, #1
 801405c:	e7d6      	b.n	801400c <I2C_MasterRequestRead+0x68>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 801405e:	6823      	ldr	r3, [r4, #0]
 8014060:	b2ed      	uxtb	r5, r5
 8014062:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8014064:	463b      	mov	r3, r7
 8014066:	4632      	mov	r2, r6
 8014068:	4916      	ldr	r1, [pc, #88]	; (80140c4 <I2C_MasterRequestRead+0x120>)
 801406a:	4620      	mov	r0, r4
 801406c:	f7ff fee9 	bl	8013e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8014070:	b108      	cbz	r0, 8014076 <I2C_MasterRequestRead+0xd2>
      return HAL_ERROR;
 8014072:	2301      	movs	r3, #1
 8014074:	e7ca      	b.n	801400c <I2C_MasterRequestRead+0x68>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014076:	2200      	movs	r2, #0
 8014078:	9203      	str	r2, [sp, #12]
 801407a:	6823      	ldr	r3, [r4, #0]
 801407c:	6959      	ldr	r1, [r3, #20]
 801407e:	9103      	str	r1, [sp, #12]
 8014080:	6999      	ldr	r1, [r3, #24]
 8014082:	9103      	str	r1, [sp, #12]
 8014084:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8014086:	6819      	ldr	r1, [r3, #0]
 8014088:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 801408c:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801408e:	9700      	str	r7, [sp, #0]
 8014090:	4633      	mov	r3, r6
 8014092:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8014096:	4620      	mov	r0, r4
 8014098:	f7ff fe9b 	bl	8013dd2 <I2C_WaitOnFlagUntilTimeout>
 801409c:	b148      	cbz	r0, 80140b2 <I2C_MasterRequestRead+0x10e>
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 801409e:	6823      	ldr	r3, [r4, #0]
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80140a6:	d00b      	beq.n	80140c0 <I2C_MasterRequestRead+0x11c>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80140a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80140ac:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_TIMEOUT;
 80140ae:	2303      	movs	r3, #3
 80140b0:	e7ac      	b.n	801400c <I2C_MasterRequestRead+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80140b2:	6822      	ldr	r2, [r4, #0]
 80140b4:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80140b8:	6113      	str	r3, [r2, #16]
 80140ba:	e7b4      	b.n	8014026 <I2C_MasterRequestRead+0x82>
    return HAL_TIMEOUT;
 80140bc:	2303      	movs	r3, #3
 80140be:	e7a5      	b.n	801400c <I2C_MasterRequestRead+0x68>
      return HAL_TIMEOUT;
 80140c0:	2303      	movs	r3, #3
 80140c2:	e7a3      	b.n	801400c <I2C_MasterRequestRead+0x68>
 80140c4:	00010002 	.word	0x00010002
 80140c8:	00010008 	.word	0x00010008

080140cc <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80140cc:	b570      	push	{r4, r5, r6, lr}
 80140ce:	4604      	mov	r4, r0
 80140d0:	460d      	mov	r5, r1
 80140d2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80140d4:	6823      	ldr	r3, [r4, #0]
 80140d6:	695b      	ldr	r3, [r3, #20]
 80140d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80140dc:	d11c      	bne.n	8014118 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80140de:	4620      	mov	r0, r4
 80140e0:	f7ff fe5e 	bl	8013da0 <I2C_IsAcknowledgeFailed>
 80140e4:	b9d0      	cbnz	r0, 801411c <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80140e6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80140ea:	d0f3      	beq.n	80140d4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80140ec:	f7fe fc9a 	bl	8012a24 <HAL_GetTick>
 80140f0:	1b80      	subs	r0, r0, r6
 80140f2:	42a8      	cmp	r0, r5
 80140f4:	d801      	bhi.n	80140fa <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80140f6:	2d00      	cmp	r5, #0
 80140f8:	d1ec      	bne.n	80140d4 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80140fa:	2300      	movs	r3, #0
 80140fc:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80140fe:	2220      	movs	r2, #32
 8014100:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014104:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014108:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801410a:	f042 0220 	orr.w	r2, r2, #32
 801410e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8014110:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8014114:	2001      	movs	r0, #1
 8014116:	e000      	b.n	801411a <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8014118:	2000      	movs	r0, #0
}
 801411a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 801411c:	2001      	movs	r0, #1
 801411e:	e7fc      	b.n	801411a <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08014120 <I2C_RequestMemoryWrite>:
{
 8014120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014124:	b084      	sub	sp, #16
 8014126:	4604      	mov	r4, r0
 8014128:	4688      	mov	r8, r1
 801412a:	4616      	mov	r6, r2
 801412c:	461f      	mov	r7, r3
 801412e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8014130:	6802      	ldr	r2, [r0, #0]
 8014132:	6813      	ldr	r3, [r2, #0]
 8014134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014138:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 801413a:	9500      	str	r5, [sp, #0]
 801413c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801413e:	2200      	movs	r2, #0
 8014140:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8014144:	f7ff fe45 	bl	8013dd2 <I2C_WaitOnFlagUntilTimeout>
 8014148:	b160      	cbz	r0, 8014164 <I2C_RequestMemoryWrite+0x44>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 801414a:	6823      	ldr	r3, [r4, #0]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8014152:	d04f      	beq.n	80141f4 <I2C_RequestMemoryWrite+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8014154:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014158:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 801415a:	2303      	movs	r3, #3
}
 801415c:	4618      	mov	r0, r3
 801415e:	b004      	add	sp, #16
 8014160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8014164:	6822      	ldr	r2, [r4, #0]
 8014166:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 801416a:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 801416c:	462b      	mov	r3, r5
 801416e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014170:	4921      	ldr	r1, [pc, #132]	; (80141f8 <I2C_RequestMemoryWrite+0xd8>)
 8014172:	4620      	mov	r0, r4
 8014174:	f7ff fe65 	bl	8013e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8014178:	b108      	cbz	r0, 801417e <I2C_RequestMemoryWrite+0x5e>
    return HAL_ERROR;
 801417a:	2301      	movs	r3, #1
 801417c:	e7ee      	b.n	801415c <I2C_RequestMemoryWrite+0x3c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801417e:	2300      	movs	r3, #0
 8014180:	9303      	str	r3, [sp, #12]
 8014182:	6823      	ldr	r3, [r4, #0]
 8014184:	695a      	ldr	r2, [r3, #20]
 8014186:	9203      	str	r2, [sp, #12]
 8014188:	699b      	ldr	r3, [r3, #24]
 801418a:	9303      	str	r3, [sp, #12]
 801418c:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801418e:	462a      	mov	r2, r5
 8014190:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014192:	4620      	mov	r0, r4
 8014194:	f7ff ff9a 	bl	80140cc <I2C_WaitOnTXEFlagUntilTimeout>
 8014198:	4603      	mov	r3, r0
 801419a:	b158      	cbz	r0, 80141b4 <I2C_RequestMemoryWrite+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801419c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801419e:	2b04      	cmp	r3, #4
 80141a0:	d001      	beq.n	80141a6 <I2C_RequestMemoryWrite+0x86>
    return HAL_ERROR;
 80141a2:	2301      	movs	r3, #1
 80141a4:	e7da      	b.n	801415c <I2C_RequestMemoryWrite+0x3c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80141a6:	6822      	ldr	r2, [r4, #0]
 80141a8:	6813      	ldr	r3, [r2, #0]
 80141aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80141ae:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80141b0:	2301      	movs	r3, #1
 80141b2:	e7d3      	b.n	801415c <I2C_RequestMemoryWrite+0x3c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80141b4:	2f01      	cmp	r7, #1
 80141b6:	d00e      	beq.n	80141d6 <I2C_RequestMemoryWrite+0xb6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80141b8:	6823      	ldr	r3, [r4, #0]
 80141ba:	0a32      	lsrs	r2, r6, #8
 80141bc:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80141be:	462a      	mov	r2, r5
 80141c0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80141c2:	4620      	mov	r0, r4
 80141c4:	f7ff ff82 	bl	80140cc <I2C_WaitOnTXEFlagUntilTimeout>
 80141c8:	4603      	mov	r3, r0
 80141ca:	b178      	cbz	r0, 80141ec <I2C_RequestMemoryWrite+0xcc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80141cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80141ce:	2b04      	cmp	r3, #4
 80141d0:	d005      	beq.n	80141de <I2C_RequestMemoryWrite+0xbe>
      return HAL_ERROR;
 80141d2:	2301      	movs	r3, #1
 80141d4:	e7c2      	b.n	801415c <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80141d6:	6822      	ldr	r2, [r4, #0]
 80141d8:	b2f6      	uxtb	r6, r6
 80141da:	6116      	str	r6, [r2, #16]
 80141dc:	e7be      	b.n	801415c <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80141de:	6822      	ldr	r2, [r4, #0]
 80141e0:	6813      	ldr	r3, [r2, #0]
 80141e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80141e6:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80141e8:	2301      	movs	r3, #1
 80141ea:	e7b7      	b.n	801415c <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80141ec:	6822      	ldr	r2, [r4, #0]
 80141ee:	b2f6      	uxtb	r6, r6
 80141f0:	6116      	str	r6, [r2, #16]
 80141f2:	e7b3      	b.n	801415c <I2C_RequestMemoryWrite+0x3c>
    return HAL_TIMEOUT;
 80141f4:	2303      	movs	r3, #3
 80141f6:	e7b1      	b.n	801415c <I2C_RequestMemoryWrite+0x3c>
 80141f8:	00010002 	.word	0x00010002

080141fc <I2C_RequestMemoryRead>:
{
 80141fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014200:	b084      	sub	sp, #16
 8014202:	4604      	mov	r4, r0
 8014204:	460e      	mov	r6, r1
 8014206:	4617      	mov	r7, r2
 8014208:	4698      	mov	r8, r3
 801420a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 801420c:	6802      	ldr	r2, [r0, #0]
 801420e:	6813      	ldr	r3, [r2, #0]
 8014210:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8014214:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8014216:	6802      	ldr	r2, [r0, #0]
 8014218:	6813      	ldr	r3, [r2, #0]
 801421a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801421e:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8014220:	9500      	str	r5, [sp, #0]
 8014222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014224:	2200      	movs	r2, #0
 8014226:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 801422a:	f7ff fdd2 	bl	8013dd2 <I2C_WaitOnFlagUntilTimeout>
 801422e:	b168      	cbz	r0, 801424c <I2C_RequestMemoryRead+0x50>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8014230:	6823      	ldr	r3, [r4, #0]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	f413 7f80 	tst.w	r3, #256	; 0x100
 8014238:	f000 8089 	beq.w	801434e <I2C_RequestMemoryRead+0x152>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 801423c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014240:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8014242:	2303      	movs	r3, #3
}
 8014244:	4618      	mov	r0, r3
 8014246:	b004      	add	sp, #16
 8014248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 801424c:	b2f6      	uxtb	r6, r6
 801424e:	6823      	ldr	r3, [r4, #0]
 8014250:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 8014254:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8014256:	462b      	mov	r3, r5
 8014258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801425a:	493f      	ldr	r1, [pc, #252]	; (8014358 <I2C_RequestMemoryRead+0x15c>)
 801425c:	4620      	mov	r0, r4
 801425e:	f7ff fdf0 	bl	8013e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8014262:	b108      	cbz	r0, 8014268 <I2C_RequestMemoryRead+0x6c>
    return HAL_ERROR;
 8014264:	2301      	movs	r3, #1
 8014266:	e7ed      	b.n	8014244 <I2C_RequestMemoryRead+0x48>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014268:	2300      	movs	r3, #0
 801426a:	9303      	str	r3, [sp, #12]
 801426c:	6823      	ldr	r3, [r4, #0]
 801426e:	695a      	ldr	r2, [r3, #20]
 8014270:	9203      	str	r2, [sp, #12]
 8014272:	699b      	ldr	r3, [r3, #24]
 8014274:	9303      	str	r3, [sp, #12]
 8014276:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8014278:	462a      	mov	r2, r5
 801427a:	990a      	ldr	r1, [sp, #40]	; 0x28
 801427c:	4620      	mov	r0, r4
 801427e:	f7ff ff25 	bl	80140cc <I2C_WaitOnTXEFlagUntilTimeout>
 8014282:	b158      	cbz	r0, 801429c <I2C_RequestMemoryRead+0xa0>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8014284:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014286:	2b04      	cmp	r3, #4
 8014288:	d001      	beq.n	801428e <I2C_RequestMemoryRead+0x92>
    return HAL_ERROR;
 801428a:	2301      	movs	r3, #1
 801428c:	e7da      	b.n	8014244 <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801428e:	6822      	ldr	r2, [r4, #0]
 8014290:	6813      	ldr	r3, [r2, #0]
 8014292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014296:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8014298:	2301      	movs	r3, #1
 801429a:	e7d3      	b.n	8014244 <I2C_RequestMemoryRead+0x48>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801429c:	f1b8 0f01 	cmp.w	r8, #1
 80142a0:	d10d      	bne.n	80142be <I2C_RequestMemoryRead+0xc2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80142a2:	6823      	ldr	r3, [r4, #0]
 80142a4:	b2ff      	uxtb	r7, r7
 80142a6:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80142a8:	462a      	mov	r2, r5
 80142aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80142ac:	4620      	mov	r0, r4
 80142ae:	f7ff ff0d 	bl	80140cc <I2C_WaitOnTXEFlagUntilTimeout>
 80142b2:	b320      	cbz	r0, 80142fe <I2C_RequestMemoryRead+0x102>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80142b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80142b6:	2b04      	cmp	r3, #4
 80142b8:	d01a      	beq.n	80142f0 <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 80142ba:	2301      	movs	r3, #1
 80142bc:	e7c2      	b.n	8014244 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80142be:	6823      	ldr	r3, [r4, #0]
 80142c0:	0a3a      	lsrs	r2, r7, #8
 80142c2:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80142c4:	462a      	mov	r2, r5
 80142c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80142c8:	4620      	mov	r0, r4
 80142ca:	f7ff feff 	bl	80140cc <I2C_WaitOnTXEFlagUntilTimeout>
 80142ce:	b158      	cbz	r0, 80142e8 <I2C_RequestMemoryRead+0xec>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80142d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80142d2:	2b04      	cmp	r3, #4
 80142d4:	d001      	beq.n	80142da <I2C_RequestMemoryRead+0xde>
      return HAL_ERROR;
 80142d6:	2301      	movs	r3, #1
 80142d8:	e7b4      	b.n	8014244 <I2C_RequestMemoryRead+0x48>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80142da:	6822      	ldr	r2, [r4, #0]
 80142dc:	6813      	ldr	r3, [r2, #0]
 80142de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80142e2:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80142e4:	2301      	movs	r3, #1
 80142e6:	e7ad      	b.n	8014244 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80142e8:	6823      	ldr	r3, [r4, #0]
 80142ea:	b2ff      	uxtb	r7, r7
 80142ec:	611f      	str	r7, [r3, #16]
 80142ee:	e7db      	b.n	80142a8 <I2C_RequestMemoryRead+0xac>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80142f0:	6822      	ldr	r2, [r4, #0]
 80142f2:	6813      	ldr	r3, [r2, #0]
 80142f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80142f8:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80142fa:	2301      	movs	r3, #1
 80142fc:	e7a2      	b.n	8014244 <I2C_RequestMemoryRead+0x48>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80142fe:	6822      	ldr	r2, [r4, #0]
 8014300:	6813      	ldr	r3, [r2, #0]
 8014302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014306:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8014308:	9500      	str	r5, [sp, #0]
 801430a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801430c:	2200      	movs	r2, #0
 801430e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8014312:	4620      	mov	r0, r4
 8014314:	f7ff fd5d 	bl	8013dd2 <I2C_WaitOnFlagUntilTimeout>
 8014318:	b148      	cbz	r0, 801432e <I2C_RequestMemoryRead+0x132>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 801431a:	6823      	ldr	r3, [r4, #0]
 801431c:	681b      	ldr	r3, [r3, #0]
 801431e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8014322:	d016      	beq.n	8014352 <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8014324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014328:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 801432a:	2303      	movs	r3, #3
 801432c:	e78a      	b.n	8014244 <I2C_RequestMemoryRead+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 801432e:	6823      	ldr	r3, [r4, #0]
 8014330:	f046 0601 	orr.w	r6, r6, #1
 8014334:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8014336:	462b      	mov	r3, r5
 8014338:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801433a:	4907      	ldr	r1, [pc, #28]	; (8014358 <I2C_RequestMemoryRead+0x15c>)
 801433c:	4620      	mov	r0, r4
 801433e:	f7ff fd80 	bl	8013e42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8014342:	4603      	mov	r3, r0
 8014344:	2800      	cmp	r0, #0
 8014346:	f43f af7d 	beq.w	8014244 <I2C_RequestMemoryRead+0x48>
    return HAL_ERROR;
 801434a:	2301      	movs	r3, #1
 801434c:	e77a      	b.n	8014244 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 801434e:	2303      	movs	r3, #3
 8014350:	e778      	b.n	8014244 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 8014352:	2303      	movs	r3, #3
 8014354:	e776      	b.n	8014244 <I2C_RequestMemoryRead+0x48>
 8014356:	bf00      	nop
 8014358:	00010002 	.word	0x00010002

0801435c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 801435c:	b570      	push	{r4, r5, r6, lr}
 801435e:	4604      	mov	r4, r0
 8014360:	460d      	mov	r5, r1
 8014362:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8014364:	6823      	ldr	r3, [r4, #0]
 8014366:	695b      	ldr	r3, [r3, #20]
 8014368:	f013 0f04 	tst.w	r3, #4
 801436c:	d11c      	bne.n	80143a8 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 801436e:	4620      	mov	r0, r4
 8014370:	f7ff fd16 	bl	8013da0 <I2C_IsAcknowledgeFailed>
 8014374:	b9d0      	cbnz	r0, 80143ac <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8014376:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 801437a:	d0f3      	beq.n	8014364 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801437c:	f7fe fb52 	bl	8012a24 <HAL_GetTick>
 8014380:	1b80      	subs	r0, r0, r6
 8014382:	42a8      	cmp	r0, r5
 8014384:	d801      	bhi.n	801438a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8014386:	2d00      	cmp	r5, #0
 8014388:	d1ec      	bne.n	8014364 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 801438a:	2300      	movs	r3, #0
 801438c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 801438e:	2220      	movs	r2, #32
 8014390:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014394:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8014398:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801439a:	f042 0220 	orr.w	r2, r2, #32
 801439e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80143a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80143a4:	2001      	movs	r0, #1
 80143a6:	e000      	b.n	80143aa <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 80143a8:	2000      	movs	r0, #0
}
 80143aa:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80143ac:	2001      	movs	r0, #1
 80143ae:	e7fc      	b.n	80143aa <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

080143b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80143b0:	b570      	push	{r4, r5, r6, lr}
 80143b2:	4605      	mov	r5, r0
 80143b4:	460c      	mov	r4, r1
 80143b6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80143b8:	682b      	ldr	r3, [r5, #0]
 80143ba:	695a      	ldr	r2, [r3, #20]
 80143bc:	f012 0f40 	tst.w	r2, #64	; 0x40
 80143c0:	d129      	bne.n	8014416 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80143c2:	695a      	ldr	r2, [r3, #20]
 80143c4:	f012 0f10 	tst.w	r2, #16
 80143c8:	d115      	bne.n	80143f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80143ca:	f7fe fb2b 	bl	8012a24 <HAL_GetTick>
 80143ce:	1b80      	subs	r0, r0, r6
 80143d0:	42a0      	cmp	r0, r4
 80143d2:	d801      	bhi.n	80143d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 80143d4:	2c00      	cmp	r4, #0
 80143d6:	d1ef      	bne.n	80143b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80143d8:	2300      	movs	r3, #0
 80143da:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80143dc:	2220      	movs	r2, #32
 80143de:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80143e2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80143e6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80143e8:	f042 0220 	orr.w	r2, r2, #32
 80143ec:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80143ee:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80143f2:	2001      	movs	r0, #1
}
 80143f4:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80143f6:	f06f 0210 	mvn.w	r2, #16
 80143fa:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80143fc:	2300      	movs	r3, #0
 80143fe:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8014400:	2220      	movs	r2, #32
 8014402:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8014406:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 801440a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 801440c:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 801440e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 8014412:	2001      	movs	r0, #1
 8014414:	e7ee      	b.n	80143f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8014416:	2000      	movs	r0, #0
 8014418:	e7ec      	b.n	80143f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

0801441c <HAL_I2C_Init>:
  if (hi2c == NULL)
 801441c:	2800      	cmp	r0, #0
 801441e:	f000 80c8 	beq.w	80145b2 <HAL_I2C_Init+0x196>
{
 8014422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014424:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8014426:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 801442a:	2b00      	cmp	r3, #0
 801442c:	d075      	beq.n	801451a <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 801442e:	2324      	movs	r3, #36	; 0x24
 8014430:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8014434:	6822      	ldr	r2, [r4, #0]
 8014436:	6813      	ldr	r3, [r2, #0]
 8014438:	f023 0301 	bic.w	r3, r3, #1
 801443c:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801443e:	6822      	ldr	r2, [r4, #0]
 8014440:	6813      	ldr	r3, [r2, #0]
 8014442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014446:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8014448:	6822      	ldr	r2, [r4, #0]
 801444a:	6813      	ldr	r3, [r2, #0]
 801444c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8014450:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8014452:	f001 fa07 	bl	8015864 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8014456:	6862      	ldr	r2, [r4, #4]
 8014458:	4b58      	ldr	r3, [pc, #352]	; (80145bc <HAL_I2C_Init+0x1a0>)
 801445a:	429a      	cmp	r2, r3
 801445c:	d862      	bhi.n	8014524 <HAL_I2C_Init+0x108>
 801445e:	4b58      	ldr	r3, [pc, #352]	; (80145c0 <HAL_I2C_Init+0x1a4>)
 8014460:	4298      	cmp	r0, r3
 8014462:	bf8c      	ite	hi
 8014464:	2300      	movhi	r3, #0
 8014466:	2301      	movls	r3, #1
 8014468:	2b00      	cmp	r3, #0
 801446a:	f040 80a4 	bne.w	80145b6 <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 801446e:	4b55      	ldr	r3, [pc, #340]	; (80145c4 <HAL_I2C_Init+0x1a8>)
 8014470:	fba3 2300 	umull	r2, r3, r3, r0
 8014474:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8014476:	6821      	ldr	r1, [r4, #0]
 8014478:	684a      	ldr	r2, [r1, #4]
 801447a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 801447e:	431a      	orrs	r2, r3
 8014480:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8014482:	6825      	ldr	r5, [r4, #0]
 8014484:	6a2a      	ldr	r2, [r5, #32]
 8014486:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 801448a:	6866      	ldr	r6, [r4, #4]
 801448c:	494b      	ldr	r1, [pc, #300]	; (80145bc <HAL_I2C_Init+0x1a0>)
 801448e:	428e      	cmp	r6, r1
 8014490:	d84e      	bhi.n	8014530 <HAL_I2C_Init+0x114>
 8014492:	3301      	adds	r3, #1
 8014494:	4313      	orrs	r3, r2
 8014496:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8014498:	6825      	ldr	r5, [r4, #0]
 801449a:	69e9      	ldr	r1, [r5, #28]
 801449c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80144a0:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80144a4:	6863      	ldr	r3, [r4, #4]
 80144a6:	4a45      	ldr	r2, [pc, #276]	; (80145bc <HAL_I2C_Init+0x1a0>)
 80144a8:	4293      	cmp	r3, r2
 80144aa:	d84b      	bhi.n	8014544 <HAL_I2C_Init+0x128>
 80144ac:	3801      	subs	r0, #1
 80144ae:	005b      	lsls	r3, r3, #1
 80144b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80144b4:	3301      	adds	r3, #1
 80144b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80144ba:	2b04      	cmp	r3, #4
 80144bc:	bf38      	it	cc
 80144be:	2304      	movcc	r3, #4
 80144c0:	430b      	orrs	r3, r1
 80144c2:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80144c4:	6821      	ldr	r1, [r4, #0]
 80144c6:	680b      	ldr	r3, [r1, #0]
 80144c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80144cc:	69e2      	ldr	r2, [r4, #28]
 80144ce:	6a20      	ldr	r0, [r4, #32]
 80144d0:	4302      	orrs	r2, r0
 80144d2:	4313      	orrs	r3, r2
 80144d4:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80144d6:	6821      	ldr	r1, [r4, #0]
 80144d8:	688b      	ldr	r3, [r1, #8]
 80144da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80144de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80144e2:	6922      	ldr	r2, [r4, #16]
 80144e4:	68e0      	ldr	r0, [r4, #12]
 80144e6:	4302      	orrs	r2, r0
 80144e8:	4313      	orrs	r3, r2
 80144ea:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80144ec:	6821      	ldr	r1, [r4, #0]
 80144ee:	68cb      	ldr	r3, [r1, #12]
 80144f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80144f4:	6962      	ldr	r2, [r4, #20]
 80144f6:	69a0      	ldr	r0, [r4, #24]
 80144f8:	4302      	orrs	r2, r0
 80144fa:	4313      	orrs	r3, r2
 80144fc:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80144fe:	6822      	ldr	r2, [r4, #0]
 8014500:	6813      	ldr	r3, [r2, #0]
 8014502:	f043 0301 	orr.w	r3, r3, #1
 8014506:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014508:	2000      	movs	r0, #0
 801450a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801450c:	2320      	movs	r3, #32
 801450e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8014512:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8014514:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8014518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 801451a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 801451e:	f7fd fbf1 	bl	8011d04 <HAL_I2C_MspInit>
 8014522:	e784      	b.n	801442e <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8014524:	4b28      	ldr	r3, [pc, #160]	; (80145c8 <HAL_I2C_Init+0x1ac>)
 8014526:	4298      	cmp	r0, r3
 8014528:	bf8c      	ite	hi
 801452a:	2300      	movhi	r3, #0
 801452c:	2301      	movls	r3, #1
 801452e:	e79b      	b.n	8014468 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8014530:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8014534:	fb01 f303 	mul.w	r3, r1, r3
 8014538:	4924      	ldr	r1, [pc, #144]	; (80145cc <HAL_I2C_Init+0x1b0>)
 801453a:	fba1 1303 	umull	r1, r3, r1, r3
 801453e:	099b      	lsrs	r3, r3, #6
 8014540:	3301      	adds	r3, #1
 8014542:	e7a7      	b.n	8014494 <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8014544:	68a2      	ldr	r2, [r4, #8]
 8014546:	b9ba      	cbnz	r2, 8014578 <HAL_I2C_Init+0x15c>
 8014548:	1e46      	subs	r6, r0, #1
 801454a:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 801454e:	fbb6 f6f7 	udiv	r6, r6, r7
 8014552:	3601      	adds	r6, #1
 8014554:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8014558:	fab6 f686 	clz	r6, r6
 801455c:	0976      	lsrs	r6, r6, #5
 801455e:	bb36      	cbnz	r6, 80145ae <HAL_I2C_Init+0x192>
 8014560:	b9c2      	cbnz	r2, 8014594 <HAL_I2C_Init+0x178>
 8014562:	3801      	subs	r0, #1
 8014564:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8014568:	fbb0 f3f3 	udiv	r3, r0, r3
 801456c:	3301      	adds	r3, #1
 801456e:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8014572:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8014576:	e7a3      	b.n	80144c0 <HAL_I2C_Init+0xa4>
 8014578:	1e46      	subs	r6, r0, #1
 801457a:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 801457e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8014582:	fbb6 f6f7 	udiv	r6, r6, r7
 8014586:	3601      	adds	r6, #1
 8014588:	f3c6 060b 	ubfx	r6, r6, #0, #12
 801458c:	fab6 f686 	clz	r6, r6
 8014590:	0976      	lsrs	r6, r6, #5
 8014592:	e7e4      	b.n	801455e <HAL_I2C_Init+0x142>
 8014594:	3801      	subs	r0, #1
 8014596:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801459a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801459e:	fbb0 f2f3 	udiv	r2, r0, r3
 80145a2:	3201      	adds	r2, #1
 80145a4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80145a8:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 80145ac:	e788      	b.n	80144c0 <HAL_I2C_Init+0xa4>
 80145ae:	2301      	movs	r3, #1
 80145b0:	e786      	b.n	80144c0 <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 80145b2:	2001      	movs	r0, #1
}
 80145b4:	4770      	bx	lr
    return HAL_ERROR;
 80145b6:	2001      	movs	r0, #1
 80145b8:	e7ae      	b.n	8014518 <HAL_I2C_Init+0xfc>
 80145ba:	bf00      	nop
 80145bc:	000186a0 	.word	0x000186a0
 80145c0:	001e847f 	.word	0x001e847f
 80145c4:	431bde83 	.word	0x431bde83
 80145c8:	003d08ff 	.word	0x003d08ff
 80145cc:	10624dd3 	.word	0x10624dd3

080145d0 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80145d0:	b1a8      	cbz	r0, 80145fe <HAL_I2C_DeInit+0x2e>
{
 80145d2:	b510      	push	{r4, lr}
 80145d4:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80145d6:	2324      	movs	r3, #36	; 0x24
 80145d8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80145dc:	6802      	ldr	r2, [r0, #0]
 80145de:	6813      	ldr	r3, [r2, #0]
 80145e0:	f023 0301 	bic.w	r3, r3, #1
 80145e4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80145e6:	f7fd fbf3 	bl	8011dd0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80145ea:	2000      	movs	r0, #0
 80145ec:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80145ee:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80145f2:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80145f4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 80145f8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80145fc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80145fe:	2001      	movs	r0, #1
}
 8014600:	4770      	bx	lr
	...

08014604 <HAL_I2C_Master_Transmit>:
{
 8014604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014608:	b084      	sub	sp, #16
 801460a:	4604      	mov	r4, r0
 801460c:	460e      	mov	r6, r1
 801460e:	4690      	mov	r8, r2
 8014610:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8014612:	f7fe fa07 	bl	8012a24 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8014616:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801461a:	b2db      	uxtb	r3, r3
 801461c:	2b20      	cmp	r3, #32
 801461e:	d004      	beq.n	801462a <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 8014620:	2602      	movs	r6, #2
}
 8014622:	4630      	mov	r0, r6
 8014624:	b004      	add	sp, #16
 8014626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801462a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 801462c:	9000      	str	r0, [sp, #0]
 801462e:	2319      	movs	r3, #25
 8014630:	2201      	movs	r2, #1
 8014632:	494f      	ldr	r1, [pc, #316]	; (8014770 <HAL_I2C_Master_Transmit+0x16c>)
 8014634:	4620      	mov	r0, r4
 8014636:	f7ff fbcc 	bl	8013dd2 <I2C_WaitOnFlagUntilTimeout>
 801463a:	2800      	cmp	r0, #0
 801463c:	f040 8091 	bne.w	8014762 <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 8014640:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8014644:	2b01      	cmp	r3, #1
 8014646:	f000 808e 	beq.w	8014766 <HAL_I2C_Master_Transmit+0x162>
 801464a:	2301      	movs	r3, #1
 801464c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8014650:	6823      	ldr	r3, [r4, #0]
 8014652:	681a      	ldr	r2, [r3, #0]
 8014654:	f012 0f01 	tst.w	r2, #1
 8014658:	d103      	bne.n	8014662 <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 801465a:	681a      	ldr	r2, [r3, #0]
 801465c:	f042 0201 	orr.w	r2, r2, #1
 8014660:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014662:	6822      	ldr	r2, [r4, #0]
 8014664:	6813      	ldr	r3, [r2, #0]
 8014666:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801466a:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 801466c:	2321      	movs	r3, #33	; 0x21
 801466e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8014672:	2310      	movs	r3, #16
 8014674:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8014678:	2300      	movs	r3, #0
 801467a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 801467c:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8014680:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8014682:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014684:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014686:	4b3b      	ldr	r3, [pc, #236]	; (8014774 <HAL_I2C_Master_Transmit+0x170>)
 8014688:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 801468a:	462b      	mov	r3, r5
 801468c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801468e:	4631      	mov	r1, r6
 8014690:	4620      	mov	r0, r4
 8014692:	f7ff fc29 	bl	8013ee8 <I2C_MasterRequestWrite>
 8014696:	4606      	mov	r6, r0
 8014698:	2800      	cmp	r0, #0
 801469a:	d166      	bne.n	801476a <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801469c:	2300      	movs	r3, #0
 801469e:	9303      	str	r3, [sp, #12]
 80146a0:	6823      	ldr	r3, [r4, #0]
 80146a2:	695a      	ldr	r2, [r3, #20]
 80146a4:	9203      	str	r2, [sp, #12]
 80146a6:	699b      	ldr	r3, [r3, #24]
 80146a8:	9303      	str	r3, [sp, #12]
 80146aa:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80146ac:	e012      	b.n	80146d4 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80146ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80146b0:	2b04      	cmp	r3, #4
 80146b2:	d001      	beq.n	80146b8 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 80146b4:	2601      	movs	r6, #1
 80146b6:	e7b4      	b.n	8014622 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80146b8:	6822      	ldr	r2, [r4, #0]
 80146ba:	6813      	ldr	r3, [r2, #0]
 80146bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80146c0:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80146c2:	2601      	movs	r6, #1
 80146c4:	e7ad      	b.n	8014622 <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80146c6:	462a      	mov	r2, r5
 80146c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80146ca:	4620      	mov	r0, r4
 80146cc:	f7ff fe46 	bl	801435c <I2C_WaitOnBTFFlagUntilTimeout>
 80146d0:	2800      	cmp	r0, #0
 80146d2:	d12c      	bne.n	801472e <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 80146d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d035      	beq.n	8014746 <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80146da:	462a      	mov	r2, r5
 80146dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80146de:	4620      	mov	r0, r4
 80146e0:	f7ff fcf4 	bl	80140cc <I2C_WaitOnTXEFlagUntilTimeout>
 80146e4:	2800      	cmp	r0, #0
 80146e6:	d1e2      	bne.n	80146ae <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80146e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80146ea:	6823      	ldr	r3, [r4, #0]
 80146ec:	7812      	ldrb	r2, [r2, #0]
 80146ee:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80146f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80146f2:	1c4b      	adds	r3, r1, #1
 80146f4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80146f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80146f8:	3b01      	subs	r3, #1
 80146fa:	b29b      	uxth	r3, r3
 80146fc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80146fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014700:	3b01      	subs	r3, #1
 8014702:	b29b      	uxth	r3, r3
 8014704:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8014706:	6822      	ldr	r2, [r4, #0]
 8014708:	6950      	ldr	r0, [r2, #20]
 801470a:	f010 0f04 	tst.w	r0, #4
 801470e:	d0da      	beq.n	80146c6 <HAL_I2C_Master_Transmit+0xc2>
 8014710:	2b00      	cmp	r3, #0
 8014712:	d0d8      	beq.n	80146c6 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8014714:	784b      	ldrb	r3, [r1, #1]
 8014716:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8014718:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801471a:	3301      	adds	r3, #1
 801471c:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 801471e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014720:	3b01      	subs	r3, #1
 8014722:	b29b      	uxth	r3, r3
 8014724:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8014726:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014728:	3b01      	subs	r3, #1
 801472a:	8523      	strh	r3, [r4, #40]	; 0x28
 801472c:	e7cb      	b.n	80146c6 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 801472e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014730:	2b04      	cmp	r3, #4
 8014732:	d001      	beq.n	8014738 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 8014734:	2601      	movs	r6, #1
 8014736:	e774      	b.n	8014622 <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014738:	6822      	ldr	r2, [r4, #0]
 801473a:	6813      	ldr	r3, [r2, #0]
 801473c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014740:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8014742:	2601      	movs	r6, #1
 8014744:	e76d      	b.n	8014622 <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014746:	6822      	ldr	r2, [r4, #0]
 8014748:	6813      	ldr	r3, [r2, #0]
 801474a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801474e:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8014750:	2320      	movs	r3, #32
 8014752:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8014756:	2300      	movs	r3, #0
 8014758:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 801475c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8014760:	e75f      	b.n	8014622 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 8014762:	2602      	movs	r6, #2
 8014764:	e75d      	b.n	8014622 <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8014766:	2602      	movs	r6, #2
 8014768:	e75b      	b.n	8014622 <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 801476a:	2601      	movs	r6, #1
 801476c:	e759      	b.n	8014622 <HAL_I2C_Master_Transmit+0x1e>
 801476e:	bf00      	nop
 8014770:	00100002 	.word	0x00100002
 8014774:	ffff0000 	.word	0xffff0000

08014778 <HAL_I2C_Master_Receive>:
{
 8014778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801477c:	b086      	sub	sp, #24
 801477e:	4604      	mov	r4, r0
 8014780:	460e      	mov	r6, r1
 8014782:	4690      	mov	r8, r2
 8014784:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8014786:	f7fe f94d 	bl	8012a24 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 801478a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801478e:	b2db      	uxtb	r3, r3
 8014790:	2b20      	cmp	r3, #32
 8014792:	d004      	beq.n	801479e <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 8014794:	2602      	movs	r6, #2
}
 8014796:	4630      	mov	r0, r6
 8014798:	b006      	add	sp, #24
 801479a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801479e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80147a0:	9000      	str	r0, [sp, #0]
 80147a2:	2319      	movs	r3, #25
 80147a4:	2201      	movs	r2, #1
 80147a6:	499e      	ldr	r1, [pc, #632]	; (8014a20 <HAL_I2C_Master_Receive+0x2a8>)
 80147a8:	4620      	mov	r0, r4
 80147aa:	f7ff fb12 	bl	8013dd2 <I2C_WaitOnFlagUntilTimeout>
 80147ae:	2800      	cmp	r0, #0
 80147b0:	f040 8134 	bne.w	8014a1c <HAL_I2C_Master_Receive+0x2a4>
    __HAL_LOCK(hi2c);
 80147b4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80147b8:	2b01      	cmp	r3, #1
 80147ba:	f000 8137 	beq.w	8014a2c <HAL_I2C_Master_Receive+0x2b4>
 80147be:	2301      	movs	r3, #1
 80147c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80147c4:	6823      	ldr	r3, [r4, #0]
 80147c6:	681a      	ldr	r2, [r3, #0]
 80147c8:	f012 0f01 	tst.w	r2, #1
 80147cc:	d103      	bne.n	80147d6 <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80147ce:	681a      	ldr	r2, [r3, #0]
 80147d0:	f042 0201 	orr.w	r2, r2, #1
 80147d4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80147d6:	6822      	ldr	r2, [r4, #0]
 80147d8:	6813      	ldr	r3, [r2, #0]
 80147da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80147de:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80147e0:	2322      	movs	r3, #34	; 0x22
 80147e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80147e6:	2310      	movs	r3, #16
 80147e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80147ec:	2300      	movs	r3, #0
 80147ee:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80147f0:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80147f4:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80147f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80147f8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80147fa:	4b8a      	ldr	r3, [pc, #552]	; (8014a24 <HAL_I2C_Master_Receive+0x2ac>)
 80147fc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80147fe:	462b      	mov	r3, r5
 8014800:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014802:	4631      	mov	r1, r6
 8014804:	4620      	mov	r0, r4
 8014806:	f7ff fbcd 	bl	8013fa4 <I2C_MasterRequestRead>
 801480a:	4606      	mov	r6, r0
 801480c:	2800      	cmp	r0, #0
 801480e:	f040 810f 	bne.w	8014a30 <HAL_I2C_Master_Receive+0x2b8>
    if (hi2c->XferSize == 0U)
 8014812:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014814:	b95b      	cbnz	r3, 801482e <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014816:	9302      	str	r3, [sp, #8]
 8014818:	6823      	ldr	r3, [r4, #0]
 801481a:	695a      	ldr	r2, [r3, #20]
 801481c:	9202      	str	r2, [sp, #8]
 801481e:	699a      	ldr	r2, [r3, #24]
 8014820:	9202      	str	r2, [sp, #8]
 8014822:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014824:	681a      	ldr	r2, [r3, #0]
 8014826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801482a:	601a      	str	r2, [r3, #0]
 801482c:	e077      	b.n	801491e <HAL_I2C_Master_Receive+0x1a6>
    else if (hi2c->XferSize == 1U)
 801482e:	2b01      	cmp	r3, #1
 8014830:	d00f      	beq.n	8014852 <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 8014832:	2b02      	cmp	r3, #2
 8014834:	d01f      	beq.n	8014876 <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014836:	6822      	ldr	r2, [r4, #0]
 8014838:	6813      	ldr	r3, [r2, #0]
 801483a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801483e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014840:	2300      	movs	r3, #0
 8014842:	9305      	str	r3, [sp, #20]
 8014844:	6823      	ldr	r3, [r4, #0]
 8014846:	695a      	ldr	r2, [r3, #20]
 8014848:	9205      	str	r2, [sp, #20]
 801484a:	699b      	ldr	r3, [r3, #24]
 801484c:	9305      	str	r3, [sp, #20]
 801484e:	9b05      	ldr	r3, [sp, #20]
 8014850:	e065      	b.n	801491e <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014852:	6822      	ldr	r2, [r4, #0]
 8014854:	6813      	ldr	r3, [r2, #0]
 8014856:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801485a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801485c:	2300      	movs	r3, #0
 801485e:	9303      	str	r3, [sp, #12]
 8014860:	6823      	ldr	r3, [r4, #0]
 8014862:	695a      	ldr	r2, [r3, #20]
 8014864:	9203      	str	r2, [sp, #12]
 8014866:	699a      	ldr	r2, [r3, #24]
 8014868:	9203      	str	r2, [sp, #12]
 801486a:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801486c:	681a      	ldr	r2, [r3, #0]
 801486e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014872:	601a      	str	r2, [r3, #0]
 8014874:	e053      	b.n	801491e <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014876:	6822      	ldr	r2, [r4, #0]
 8014878:	6813      	ldr	r3, [r2, #0]
 801487a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801487e:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014880:	6822      	ldr	r2, [r4, #0]
 8014882:	6813      	ldr	r3, [r2, #0]
 8014884:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014888:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 801488a:	2300      	movs	r3, #0
 801488c:	9304      	str	r3, [sp, #16]
 801488e:	6823      	ldr	r3, [r4, #0]
 8014890:	695a      	ldr	r2, [r3, #20]
 8014892:	9204      	str	r2, [sp, #16]
 8014894:	699b      	ldr	r3, [r3, #24]
 8014896:	9304      	str	r3, [sp, #16]
 8014898:	9b04      	ldr	r3, [sp, #16]
 801489a:	e040      	b.n	801491e <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801489c:	462a      	mov	r2, r5
 801489e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80148a0:	4620      	mov	r0, r4
 80148a2:	f7ff fd85 	bl	80143b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80148a6:	2800      	cmp	r0, #0
 80148a8:	f040 80c4 	bne.w	8014a34 <HAL_I2C_Master_Receive+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80148ac:	6823      	ldr	r3, [r4, #0]
 80148ae:	691a      	ldr	r2, [r3, #16]
 80148b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80148b2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80148b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80148b6:	3301      	adds	r3, #1
 80148b8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80148ba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80148bc:	3b01      	subs	r3, #1
 80148be:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80148c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80148c2:	3b01      	subs	r3, #1
 80148c4:	b29b      	uxth	r3, r3
 80148c6:	8563      	strh	r3, [r4, #42]	; 0x2a
 80148c8:	e029      	b.n	801491e <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80148ca:	9500      	str	r5, [sp, #0]
 80148cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80148ce:	2200      	movs	r2, #0
 80148d0:	4955      	ldr	r1, [pc, #340]	; (8014a28 <HAL_I2C_Master_Receive+0x2b0>)
 80148d2:	4620      	mov	r0, r4
 80148d4:	f7ff fa7d 	bl	8013dd2 <I2C_WaitOnFlagUntilTimeout>
 80148d8:	2800      	cmp	r0, #0
 80148da:	f040 80ad 	bne.w	8014a38 <HAL_I2C_Master_Receive+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80148de:	6822      	ldr	r2, [r4, #0]
 80148e0:	6813      	ldr	r3, [r2, #0]
 80148e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80148e6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80148e8:	6823      	ldr	r3, [r4, #0]
 80148ea:	691a      	ldr	r2, [r3, #16]
 80148ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80148ee:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80148f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80148f2:	1c53      	adds	r3, r2, #1
 80148f4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80148f6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80148f8:	3b01      	subs	r3, #1
 80148fa:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80148fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80148fe:	3b01      	subs	r3, #1
 8014900:	b29b      	uxth	r3, r3
 8014902:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014904:	6823      	ldr	r3, [r4, #0]
 8014906:	691b      	ldr	r3, [r3, #16]
 8014908:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 801490a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801490c:	3301      	adds	r3, #1
 801490e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8014910:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014912:	3b01      	subs	r3, #1
 8014914:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8014916:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014918:	3b01      	subs	r3, #1
 801491a:	b29b      	uxth	r3, r3
 801491c:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 801491e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014920:	2b00      	cmp	r3, #0
 8014922:	d072      	beq.n	8014a0a <HAL_I2C_Master_Receive+0x292>
      if (hi2c->XferSize <= 3U)
 8014924:	2b03      	cmp	r3, #3
 8014926:	d849      	bhi.n	80149bc <HAL_I2C_Master_Receive+0x244>
        if (hi2c->XferSize == 1U)
 8014928:	2b01      	cmp	r3, #1
 801492a:	d0b7      	beq.n	801489c <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 801492c:	2b02      	cmp	r3, #2
 801492e:	d0cc      	beq.n	80148ca <HAL_I2C_Master_Receive+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8014930:	9500      	str	r5, [sp, #0]
 8014932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014934:	2200      	movs	r2, #0
 8014936:	493c      	ldr	r1, [pc, #240]	; (8014a28 <HAL_I2C_Master_Receive+0x2b0>)
 8014938:	4620      	mov	r0, r4
 801493a:	f7ff fa4a 	bl	8013dd2 <I2C_WaitOnFlagUntilTimeout>
 801493e:	2800      	cmp	r0, #0
 8014940:	d17c      	bne.n	8014a3c <HAL_I2C_Master_Receive+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014942:	6822      	ldr	r2, [r4, #0]
 8014944:	6813      	ldr	r3, [r2, #0]
 8014946:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801494a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 801494c:	6823      	ldr	r3, [r4, #0]
 801494e:	691a      	ldr	r2, [r3, #16]
 8014950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014952:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8014954:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014956:	3301      	adds	r3, #1
 8014958:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 801495a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801495c:	3b01      	subs	r3, #1
 801495e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8014960:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014962:	3b01      	subs	r3, #1
 8014964:	b29b      	uxth	r3, r3
 8014966:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8014968:	9500      	str	r5, [sp, #0]
 801496a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801496c:	2200      	movs	r2, #0
 801496e:	492e      	ldr	r1, [pc, #184]	; (8014a28 <HAL_I2C_Master_Receive+0x2b0>)
 8014970:	4620      	mov	r0, r4
 8014972:	f7ff fa2e 	bl	8013dd2 <I2C_WaitOnFlagUntilTimeout>
 8014976:	2800      	cmp	r0, #0
 8014978:	d162      	bne.n	8014a40 <HAL_I2C_Master_Receive+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 801497a:	6822      	ldr	r2, [r4, #0]
 801497c:	6813      	ldr	r3, [r2, #0]
 801497e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014982:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014984:	6823      	ldr	r3, [r4, #0]
 8014986:	691a      	ldr	r2, [r3, #16]
 8014988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801498a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 801498c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801498e:	1c53      	adds	r3, r2, #1
 8014990:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8014992:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014994:	3b01      	subs	r3, #1
 8014996:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8014998:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801499a:	3b01      	subs	r3, #1
 801499c:	b29b      	uxth	r3, r3
 801499e:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80149a0:	6823      	ldr	r3, [r4, #0]
 80149a2:	691b      	ldr	r3, [r3, #16]
 80149a4:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80149a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149a8:	3301      	adds	r3, #1
 80149aa:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80149ac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80149ae:	3b01      	subs	r3, #1
 80149b0:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80149b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80149b4:	3b01      	subs	r3, #1
 80149b6:	b29b      	uxth	r3, r3
 80149b8:	8563      	strh	r3, [r4, #42]	; 0x2a
 80149ba:	e7b0      	b.n	801491e <HAL_I2C_Master_Receive+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80149bc:	462a      	mov	r2, r5
 80149be:	990c      	ldr	r1, [sp, #48]	; 0x30
 80149c0:	4620      	mov	r0, r4
 80149c2:	f7ff fcf5 	bl	80143b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80149c6:	2800      	cmp	r0, #0
 80149c8:	d13c      	bne.n	8014a44 <HAL_I2C_Master_Receive+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80149ca:	6823      	ldr	r3, [r4, #0]
 80149cc:	691a      	ldr	r2, [r3, #16]
 80149ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149d0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80149d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80149d4:	1c53      	adds	r3, r2, #1
 80149d6:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80149d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80149da:	3b01      	subs	r3, #1
 80149dc:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80149de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80149e0:	3b01      	subs	r3, #1
 80149e2:	b29b      	uxth	r3, r3
 80149e4:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80149e6:	6823      	ldr	r3, [r4, #0]
 80149e8:	6959      	ldr	r1, [r3, #20]
 80149ea:	f011 0f04 	tst.w	r1, #4
 80149ee:	d096      	beq.n	801491e <HAL_I2C_Master_Receive+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80149f0:	691b      	ldr	r3, [r3, #16]
 80149f2:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80149f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80149f6:	3301      	adds	r3, #1
 80149f8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80149fa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80149fc:	3b01      	subs	r3, #1
 80149fe:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8014a00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014a02:	3b01      	subs	r3, #1
 8014a04:	b29b      	uxth	r3, r3
 8014a06:	8563      	strh	r3, [r4, #42]	; 0x2a
 8014a08:	e789      	b.n	801491e <HAL_I2C_Master_Receive+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8014a0a:	2320      	movs	r3, #32
 8014a0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8014a10:	2300      	movs	r3, #0
 8014a12:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8014a16:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8014a1a:	e6bc      	b.n	8014796 <HAL_I2C_Master_Receive+0x1e>
      return HAL_BUSY;
 8014a1c:	2602      	movs	r6, #2
 8014a1e:	e6ba      	b.n	8014796 <HAL_I2C_Master_Receive+0x1e>
 8014a20:	00100002 	.word	0x00100002
 8014a24:	ffff0000 	.word	0xffff0000
 8014a28:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 8014a2c:	2602      	movs	r6, #2
 8014a2e:	e6b2      	b.n	8014796 <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 8014a30:	2601      	movs	r6, #1
 8014a32:	e6b0      	b.n	8014796 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8014a34:	2601      	movs	r6, #1
 8014a36:	e6ae      	b.n	8014796 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8014a38:	2601      	movs	r6, #1
 8014a3a:	e6ac      	b.n	8014796 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8014a3c:	2601      	movs	r6, #1
 8014a3e:	e6aa      	b.n	8014796 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8014a40:	2601      	movs	r6, #1
 8014a42:	e6a8      	b.n	8014796 <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 8014a44:	2601      	movs	r6, #1
 8014a46:	e6a6      	b.n	8014796 <HAL_I2C_Master_Receive+0x1e>

08014a48 <HAL_I2C_Mem_Write>:
{
 8014a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a4c:	b082      	sub	sp, #8
 8014a4e:	4604      	mov	r4, r0
 8014a50:	460e      	mov	r6, r1
 8014a52:	4617      	mov	r7, r2
 8014a54:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8014a56:	f7fd ffe5 	bl	8012a24 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8014a5a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8014a5e:	b2db      	uxtb	r3, r3
 8014a60:	2b20      	cmp	r3, #32
 8014a62:	d004      	beq.n	8014a6e <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 8014a64:	2302      	movs	r3, #2
}
 8014a66:	4618      	mov	r0, r3
 8014a68:	b002      	add	sp, #8
 8014a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a6e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8014a70:	9000      	str	r0, [sp, #0]
 8014a72:	2319      	movs	r3, #25
 8014a74:	2201      	movs	r2, #1
 8014a76:	494c      	ldr	r1, [pc, #304]	; (8014ba8 <HAL_I2C_Mem_Write+0x160>)
 8014a78:	4620      	mov	r0, r4
 8014a7a:	f7ff f9aa 	bl	8013dd2 <I2C_WaitOnFlagUntilTimeout>
 8014a7e:	2800      	cmp	r0, #0
 8014a80:	f040 808b 	bne.w	8014b9a <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8014a84:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8014a88:	2b01      	cmp	r3, #1
 8014a8a:	f000 8088 	beq.w	8014b9e <HAL_I2C_Mem_Write+0x156>
 8014a8e:	2301      	movs	r3, #1
 8014a90:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8014a94:	6823      	ldr	r3, [r4, #0]
 8014a96:	681a      	ldr	r2, [r3, #0]
 8014a98:	f012 0f01 	tst.w	r2, #1
 8014a9c:	d103      	bne.n	8014aa6 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8014a9e:	681a      	ldr	r2, [r3, #0]
 8014aa0:	f042 0201 	orr.w	r2, r2, #1
 8014aa4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014aa6:	6822      	ldr	r2, [r4, #0]
 8014aa8:	6813      	ldr	r3, [r2, #0]
 8014aaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014aae:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8014ab0:	2321      	movs	r3, #33	; 0x21
 8014ab2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8014ab6:	2340      	movs	r3, #64	; 0x40
 8014ab8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014abc:	2300      	movs	r3, #0
 8014abe:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8014ac0:	9b08      	ldr	r3, [sp, #32]
 8014ac2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8014ac4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8014ac8:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8014aca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014acc:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014ace:	4b37      	ldr	r3, [pc, #220]	; (8014bac <HAL_I2C_Mem_Write+0x164>)
 8014ad0:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8014ad2:	9501      	str	r5, [sp, #4]
 8014ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ad6:	9300      	str	r3, [sp, #0]
 8014ad8:	4643      	mov	r3, r8
 8014ada:	463a      	mov	r2, r7
 8014adc:	4631      	mov	r1, r6
 8014ade:	4620      	mov	r0, r4
 8014ae0:	f7ff fb1e 	bl	8014120 <I2C_RequestMemoryWrite>
 8014ae4:	2800      	cmp	r0, #0
 8014ae6:	d15c      	bne.n	8014ba2 <HAL_I2C_Mem_Write+0x15a>
    while (hi2c->XferSize > 0U)
 8014ae8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d034      	beq.n	8014b58 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014aee:	462a      	mov	r2, r5
 8014af0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014af2:	4620      	mov	r0, r4
 8014af4:	f7ff faea 	bl	80140cc <I2C_WaitOnTXEFlagUntilTimeout>
 8014af8:	bb10      	cbnz	r0, 8014b40 <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8014afa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8014afc:	6823      	ldr	r3, [r4, #0]
 8014afe:	7812      	ldrb	r2, [r2, #0]
 8014b00:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8014b02:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014b04:	1c4b      	adds	r3, r1, #1
 8014b06:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8014b08:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014b0a:	3b01      	subs	r3, #1
 8014b0c:	b29b      	uxth	r3, r3
 8014b0e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8014b10:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8014b12:	3a01      	subs	r2, #1
 8014b14:	b292      	uxth	r2, r2
 8014b16:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8014b18:	6822      	ldr	r2, [r4, #0]
 8014b1a:	6950      	ldr	r0, [r2, #20]
 8014b1c:	f010 0f04 	tst.w	r0, #4
 8014b20:	d0e2      	beq.n	8014ae8 <HAL_I2C_Mem_Write+0xa0>
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d0e0      	beq.n	8014ae8 <HAL_I2C_Mem_Write+0xa0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8014b26:	784b      	ldrb	r3, [r1, #1]
 8014b28:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8014b2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b2c:	3301      	adds	r3, #1
 8014b2e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8014b30:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014b32:	3b01      	subs	r3, #1
 8014b34:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8014b36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014b38:	3b01      	subs	r3, #1
 8014b3a:	b29b      	uxth	r3, r3
 8014b3c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8014b3e:	e7d3      	b.n	8014ae8 <HAL_I2C_Mem_Write+0xa0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8014b40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014b42:	2b04      	cmp	r3, #4
 8014b44:	d001      	beq.n	8014b4a <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 8014b46:	2301      	movs	r3, #1
 8014b48:	e78d      	b.n	8014a66 <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014b4a:	6822      	ldr	r2, [r4, #0]
 8014b4c:	6813      	ldr	r3, [r2, #0]
 8014b4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014b52:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8014b54:	2301      	movs	r3, #1
 8014b56:	e786      	b.n	8014a66 <HAL_I2C_Mem_Write+0x1e>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014b58:	462a      	mov	r2, r5
 8014b5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014b5c:	4620      	mov	r0, r4
 8014b5e:	f7ff fbfd 	bl	801435c <I2C_WaitOnBTFFlagUntilTimeout>
 8014b62:	4603      	mov	r3, r0
 8014b64:	b158      	cbz	r0, 8014b7e <HAL_I2C_Mem_Write+0x136>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8014b66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014b68:	2b04      	cmp	r3, #4
 8014b6a:	d001      	beq.n	8014b70 <HAL_I2C_Mem_Write+0x128>
      return HAL_ERROR;
 8014b6c:	2301      	movs	r3, #1
 8014b6e:	e77a      	b.n	8014a66 <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014b70:	6822      	ldr	r2, [r4, #0]
 8014b72:	6813      	ldr	r3, [r2, #0]
 8014b74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014b78:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8014b7a:	2301      	movs	r3, #1
 8014b7c:	e773      	b.n	8014a66 <HAL_I2C_Mem_Write+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014b7e:	6821      	ldr	r1, [r4, #0]
 8014b80:	680a      	ldr	r2, [r1, #0]
 8014b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014b86:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8014b88:	2220      	movs	r2, #32
 8014b8a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8014b8e:	2200      	movs	r2, #0
 8014b90:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8014b94:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 8014b98:	e765      	b.n	8014a66 <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 8014b9a:	2302      	movs	r3, #2
 8014b9c:	e763      	b.n	8014a66 <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 8014b9e:	2302      	movs	r3, #2
 8014ba0:	e761      	b.n	8014a66 <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 8014ba2:	2301      	movs	r3, #1
 8014ba4:	e75f      	b.n	8014a66 <HAL_I2C_Mem_Write+0x1e>
 8014ba6:	bf00      	nop
 8014ba8:	00100002 	.word	0x00100002
 8014bac:	ffff0000 	.word	0xffff0000

08014bb0 <HAL_I2C_Mem_Read>:
{
 8014bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bb4:	b086      	sub	sp, #24
 8014bb6:	4604      	mov	r4, r0
 8014bb8:	460e      	mov	r6, r1
 8014bba:	4617      	mov	r7, r2
 8014bbc:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8014bbe:	f7fd ff31 	bl	8012a24 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8014bc2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8014bc6:	b2db      	uxtb	r3, r3
 8014bc8:	2b20      	cmp	r3, #32
 8014bca:	d004      	beq.n	8014bd6 <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8014bcc:	2602      	movs	r6, #2
}
 8014bce:	4630      	mov	r0, r6
 8014bd0:	b006      	add	sp, #24
 8014bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bd6:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8014bd8:	9000      	str	r0, [sp, #0]
 8014bda:	2319      	movs	r3, #25
 8014bdc:	2201      	movs	r2, #1
 8014bde:	499e      	ldr	r1, [pc, #632]	; (8014e58 <HAL_I2C_Mem_Read+0x2a8>)
 8014be0:	4620      	mov	r0, r4
 8014be2:	f7ff f8f6 	bl	8013dd2 <I2C_WaitOnFlagUntilTimeout>
 8014be6:	2800      	cmp	r0, #0
 8014be8:	f040 8134 	bne.w	8014e54 <HAL_I2C_Mem_Read+0x2a4>
    __HAL_LOCK(hi2c);
 8014bec:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8014bf0:	2b01      	cmp	r3, #1
 8014bf2:	f000 8137 	beq.w	8014e64 <HAL_I2C_Mem_Read+0x2b4>
 8014bf6:	2301      	movs	r3, #1
 8014bf8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8014bfc:	6823      	ldr	r3, [r4, #0]
 8014bfe:	681a      	ldr	r2, [r3, #0]
 8014c00:	f012 0f01 	tst.w	r2, #1
 8014c04:	d103      	bne.n	8014c0e <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8014c06:	681a      	ldr	r2, [r3, #0]
 8014c08:	f042 0201 	orr.w	r2, r2, #1
 8014c0c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014c0e:	6822      	ldr	r2, [r4, #0]
 8014c10:	6813      	ldr	r3, [r2, #0]
 8014c12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014c16:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8014c18:	2322      	movs	r3, #34	; 0x22
 8014c1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8014c1e:	2340      	movs	r3, #64	; 0x40
 8014c20:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8014c24:	2300      	movs	r3, #0
 8014c26:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8014c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c2a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8014c2c:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8014c30:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8014c32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014c34:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8014c36:	4b89      	ldr	r3, [pc, #548]	; (8014e5c <HAL_I2C_Mem_Read+0x2ac>)
 8014c38:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8014c3a:	9501      	str	r5, [sp, #4]
 8014c3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014c3e:	9300      	str	r3, [sp, #0]
 8014c40:	4643      	mov	r3, r8
 8014c42:	463a      	mov	r2, r7
 8014c44:	4631      	mov	r1, r6
 8014c46:	4620      	mov	r0, r4
 8014c48:	f7ff fad8 	bl	80141fc <I2C_RequestMemoryRead>
 8014c4c:	4606      	mov	r6, r0
 8014c4e:	2800      	cmp	r0, #0
 8014c50:	f040 810a 	bne.w	8014e68 <HAL_I2C_Mem_Read+0x2b8>
    if (hi2c->XferSize == 0U)
 8014c54:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014c56:	b95b      	cbnz	r3, 8014c70 <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014c58:	9302      	str	r3, [sp, #8]
 8014c5a:	6823      	ldr	r3, [r4, #0]
 8014c5c:	695a      	ldr	r2, [r3, #20]
 8014c5e:	9202      	str	r2, [sp, #8]
 8014c60:	699a      	ldr	r2, [r3, #24]
 8014c62:	9202      	str	r2, [sp, #8]
 8014c64:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014c66:	681a      	ldr	r2, [r3, #0]
 8014c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014c6c:	601a      	str	r2, [r3, #0]
 8014c6e:	e072      	b.n	8014d56 <HAL_I2C_Mem_Read+0x1a6>
    else if (hi2c->XferSize == 1U)
 8014c70:	2b01      	cmp	r3, #1
 8014c72:	d00a      	beq.n	8014c8a <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 8014c74:	2b02      	cmp	r3, #2
 8014c76:	d01a      	beq.n	8014cae <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014c78:	2300      	movs	r3, #0
 8014c7a:	9305      	str	r3, [sp, #20]
 8014c7c:	6823      	ldr	r3, [r4, #0]
 8014c7e:	695a      	ldr	r2, [r3, #20]
 8014c80:	9205      	str	r2, [sp, #20]
 8014c82:	699b      	ldr	r3, [r3, #24]
 8014c84:	9305      	str	r3, [sp, #20]
 8014c86:	9b05      	ldr	r3, [sp, #20]
 8014c88:	e065      	b.n	8014d56 <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014c8a:	6822      	ldr	r2, [r4, #0]
 8014c8c:	6813      	ldr	r3, [r2, #0]
 8014c8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014c92:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014c94:	2300      	movs	r3, #0
 8014c96:	9303      	str	r3, [sp, #12]
 8014c98:	6823      	ldr	r3, [r4, #0]
 8014c9a:	695a      	ldr	r2, [r3, #20]
 8014c9c:	9203      	str	r2, [sp, #12]
 8014c9e:	699a      	ldr	r2, [r3, #24]
 8014ca0:	9203      	str	r2, [sp, #12]
 8014ca2:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014ca4:	681a      	ldr	r2, [r3, #0]
 8014ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8014caa:	601a      	str	r2, [r3, #0]
 8014cac:	e053      	b.n	8014d56 <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014cae:	6822      	ldr	r2, [r4, #0]
 8014cb0:	6813      	ldr	r3, [r2, #0]
 8014cb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014cb6:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8014cb8:	6822      	ldr	r2, [r4, #0]
 8014cba:	6813      	ldr	r3, [r2, #0]
 8014cbc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014cc0:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	9304      	str	r3, [sp, #16]
 8014cc6:	6823      	ldr	r3, [r4, #0]
 8014cc8:	695a      	ldr	r2, [r3, #20]
 8014cca:	9204      	str	r2, [sp, #16]
 8014ccc:	699b      	ldr	r3, [r3, #24]
 8014cce:	9304      	str	r3, [sp, #16]
 8014cd0:	9b04      	ldr	r3, [sp, #16]
 8014cd2:	e040      	b.n	8014d56 <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014cd4:	462a      	mov	r2, r5
 8014cd6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014cd8:	4620      	mov	r0, r4
 8014cda:	f7ff fb69 	bl	80143b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8014cde:	2800      	cmp	r0, #0
 8014ce0:	f040 80c4 	bne.w	8014e6c <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014ce4:	6823      	ldr	r3, [r4, #0]
 8014ce6:	691a      	ldr	r2, [r3, #16]
 8014ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014cea:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8014cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014cee:	3301      	adds	r3, #1
 8014cf0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8014cf2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014cf4:	3b01      	subs	r3, #1
 8014cf6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8014cf8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014cfa:	3b01      	subs	r3, #1
 8014cfc:	b29b      	uxth	r3, r3
 8014cfe:	8563      	strh	r3, [r4, #42]	; 0x2a
 8014d00:	e029      	b.n	8014d56 <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8014d02:	9500      	str	r5, [sp, #0]
 8014d04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d06:	2200      	movs	r2, #0
 8014d08:	4955      	ldr	r1, [pc, #340]	; (8014e60 <HAL_I2C_Mem_Read+0x2b0>)
 8014d0a:	4620      	mov	r0, r4
 8014d0c:	f7ff f861 	bl	8013dd2 <I2C_WaitOnFlagUntilTimeout>
 8014d10:	2800      	cmp	r0, #0
 8014d12:	f040 80ad 	bne.w	8014e70 <HAL_I2C_Mem_Read+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014d16:	6822      	ldr	r2, [r4, #0]
 8014d18:	6813      	ldr	r3, [r2, #0]
 8014d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014d1e:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014d20:	6823      	ldr	r3, [r4, #0]
 8014d22:	691a      	ldr	r2, [r3, #16]
 8014d24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d26:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8014d28:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8014d2a:	1c53      	adds	r3, r2, #1
 8014d2c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8014d2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014d30:	3b01      	subs	r3, #1
 8014d32:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8014d34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014d36:	3b01      	subs	r3, #1
 8014d38:	b29b      	uxth	r3, r3
 8014d3a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014d3c:	6823      	ldr	r3, [r4, #0]
 8014d3e:	691b      	ldr	r3, [r3, #16]
 8014d40:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8014d42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d44:	3301      	adds	r3, #1
 8014d46:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8014d48:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014d4a:	3b01      	subs	r3, #1
 8014d4c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8014d4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014d50:	3b01      	subs	r3, #1
 8014d52:	b29b      	uxth	r3, r3
 8014d54:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8014d56:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d072      	beq.n	8014e42 <HAL_I2C_Mem_Read+0x292>
      if (hi2c->XferSize <= 3U)
 8014d5c:	2b03      	cmp	r3, #3
 8014d5e:	d849      	bhi.n	8014df4 <HAL_I2C_Mem_Read+0x244>
        if (hi2c->XferSize == 1U)
 8014d60:	2b01      	cmp	r3, #1
 8014d62:	d0b7      	beq.n	8014cd4 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8014d64:	2b02      	cmp	r3, #2
 8014d66:	d0cc      	beq.n	8014d02 <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8014d68:	9500      	str	r5, [sp, #0]
 8014d6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d6c:	2200      	movs	r2, #0
 8014d6e:	493c      	ldr	r1, [pc, #240]	; (8014e60 <HAL_I2C_Mem_Read+0x2b0>)
 8014d70:	4620      	mov	r0, r4
 8014d72:	f7ff f82e 	bl	8013dd2 <I2C_WaitOnFlagUntilTimeout>
 8014d76:	2800      	cmp	r0, #0
 8014d78:	d17c      	bne.n	8014e74 <HAL_I2C_Mem_Read+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8014d7a:	6822      	ldr	r2, [r4, #0]
 8014d7c:	6813      	ldr	r3, [r2, #0]
 8014d7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014d82:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014d84:	6823      	ldr	r3, [r4, #0]
 8014d86:	691a      	ldr	r2, [r3, #16]
 8014d88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d8a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8014d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d8e:	3301      	adds	r3, #1
 8014d90:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8014d92:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014d94:	3b01      	subs	r3, #1
 8014d96:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8014d98:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014d9a:	3b01      	subs	r3, #1
 8014d9c:	b29b      	uxth	r3, r3
 8014d9e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8014da0:	9500      	str	r5, [sp, #0]
 8014da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014da4:	2200      	movs	r2, #0
 8014da6:	492e      	ldr	r1, [pc, #184]	; (8014e60 <HAL_I2C_Mem_Read+0x2b0>)
 8014da8:	4620      	mov	r0, r4
 8014daa:	f7ff f812 	bl	8013dd2 <I2C_WaitOnFlagUntilTimeout>
 8014dae:	2800      	cmp	r0, #0
 8014db0:	d162      	bne.n	8014e78 <HAL_I2C_Mem_Read+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8014db2:	6822      	ldr	r2, [r4, #0]
 8014db4:	6813      	ldr	r3, [r2, #0]
 8014db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8014dba:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014dbc:	6823      	ldr	r3, [r4, #0]
 8014dbe:	691a      	ldr	r2, [r3, #16]
 8014dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014dc2:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8014dc4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8014dc6:	1c53      	adds	r3, r2, #1
 8014dc8:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8014dca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014dcc:	3b01      	subs	r3, #1
 8014dce:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8014dd0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014dd2:	3b01      	subs	r3, #1
 8014dd4:	b29b      	uxth	r3, r3
 8014dd6:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014dd8:	6823      	ldr	r3, [r4, #0]
 8014dda:	691b      	ldr	r3, [r3, #16]
 8014ddc:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8014dde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014de0:	3301      	adds	r3, #1
 8014de2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8014de4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014de6:	3b01      	subs	r3, #1
 8014de8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8014dea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014dec:	3b01      	subs	r3, #1
 8014dee:	b29b      	uxth	r3, r3
 8014df0:	8563      	strh	r3, [r4, #42]	; 0x2a
 8014df2:	e7b0      	b.n	8014d56 <HAL_I2C_Mem_Read+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8014df4:	462a      	mov	r2, r5
 8014df6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014df8:	4620      	mov	r0, r4
 8014dfa:	f7ff fad9 	bl	80143b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8014dfe:	2800      	cmp	r0, #0
 8014e00:	d13c      	bne.n	8014e7c <HAL_I2C_Mem_Read+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014e02:	6823      	ldr	r3, [r4, #0]
 8014e04:	691a      	ldr	r2, [r3, #16]
 8014e06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e08:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8014e0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8014e0c:	1c53      	adds	r3, r2, #1
 8014e0e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8014e10:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014e12:	3b01      	subs	r3, #1
 8014e14:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8014e16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014e18:	3b01      	subs	r3, #1
 8014e1a:	b29b      	uxth	r3, r3
 8014e1c:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8014e1e:	6823      	ldr	r3, [r4, #0]
 8014e20:	6959      	ldr	r1, [r3, #20]
 8014e22:	f011 0f04 	tst.w	r1, #4
 8014e26:	d096      	beq.n	8014d56 <HAL_I2C_Mem_Read+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8014e28:	691b      	ldr	r3, [r3, #16]
 8014e2a:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8014e2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014e2e:	3301      	adds	r3, #1
 8014e30:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8014e32:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8014e34:	3b01      	subs	r3, #1
 8014e36:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8014e38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8014e3a:	3b01      	subs	r3, #1
 8014e3c:	b29b      	uxth	r3, r3
 8014e3e:	8563      	strh	r3, [r4, #42]	; 0x2a
 8014e40:	e789      	b.n	8014d56 <HAL_I2C_Mem_Read+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8014e42:	2320      	movs	r3, #32
 8014e44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8014e48:	2300      	movs	r3, #0
 8014e4a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8014e4e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8014e52:	e6bc      	b.n	8014bce <HAL_I2C_Mem_Read+0x1e>
      return HAL_BUSY;
 8014e54:	2602      	movs	r6, #2
 8014e56:	e6ba      	b.n	8014bce <HAL_I2C_Mem_Read+0x1e>
 8014e58:	00100002 	.word	0x00100002
 8014e5c:	ffff0000 	.word	0xffff0000
 8014e60:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 8014e64:	2602      	movs	r6, #2
 8014e66:	e6b2      	b.n	8014bce <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 8014e68:	2601      	movs	r6, #1
 8014e6a:	e6b0      	b.n	8014bce <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8014e6c:	2601      	movs	r6, #1
 8014e6e:	e6ae      	b.n	8014bce <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8014e70:	2601      	movs	r6, #1
 8014e72:	e6ac      	b.n	8014bce <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8014e74:	2601      	movs	r6, #1
 8014e76:	e6aa      	b.n	8014bce <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8014e78:	2601      	movs	r6, #1
 8014e7a:	e6a8      	b.n	8014bce <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 8014e7c:	2601      	movs	r6, #1
 8014e7e:	e6a6      	b.n	8014bce <HAL_I2C_Mem_Read+0x1e>

08014e80 <HAL_I2C_GetState>:
  return hi2c->State;
 8014e80:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8014e84:	4770      	bx	lr

08014e86 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8014e86:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8014e88:	684d      	ldr	r5, [r1, #4]
 8014e8a:	6804      	ldr	r4, [r0, #0]
 8014e8c:	68e3      	ldr	r3, [r4, #12]
 8014e8e:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8014e92:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8014e94:	01d2      	lsls	r2, r2, #7
 8014e96:	4414      	add	r4, r2
 8014e98:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8014e9c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8014ea0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8014ea4:	680b      	ldr	r3, [r1, #0]
 8014ea6:	6804      	ldr	r4, [r0, #0]
 8014ea8:	68e6      	ldr	r6, [r4, #12]
 8014eaa:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8014eae:	4433      	add	r3, r6
 8014eb0:	3301      	adds	r3, #1
 8014eb2:	4414      	add	r4, r2
 8014eb4:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8014eb8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8014ebc:	68cd      	ldr	r5, [r1, #12]
 8014ebe:	6804      	ldr	r4, [r0, #0]
 8014ec0:	68e3      	ldr	r3, [r4, #12]
 8014ec2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014ec6:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8014ec8:	4414      	add	r4, r2
 8014eca:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8014ece:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8014ed2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8014ed6:	688b      	ldr	r3, [r1, #8]
 8014ed8:	6804      	ldr	r4, [r0, #0]
 8014eda:	68e6      	ldr	r6, [r4, #12]
 8014edc:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8014ee0:	4433      	add	r3, r6
 8014ee2:	3301      	adds	r3, #1
 8014ee4:	4414      	add	r4, r2
 8014ee6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8014eea:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8014eee:	6803      	ldr	r3, [r0, #0]
 8014ef0:	4413      	add	r3, r2
 8014ef2:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8014ef6:	f024 0407 	bic.w	r4, r4, #7
 8014efa:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8014efe:	6803      	ldr	r3, [r0, #0]
 8014f00:	4413      	add	r3, r2
 8014f02:	690c      	ldr	r4, [r1, #16]
 8014f04:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8014f08:	f891 c031 	ldrb.w	ip, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8014f0c:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8014f10:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8014f12:	6805      	ldr	r5, [r0, #0]
 8014f14:	4415      	add	r5, r2
 8014f16:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8014f1a:	2400      	movs	r4, #0
 8014f1c:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8014f20:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8014f24:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8014f28:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8014f2c:	6805      	ldr	r5, [r0, #0]
 8014f2e:	4415      	add	r5, r2
 8014f30:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8014f34:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8014f38:	6803      	ldr	r3, [r0, #0]
 8014f3a:	4413      	add	r3, r2
 8014f3c:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8014f40:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8014f44:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8014f48:	6803      	ldr	r3, [r0, #0]
 8014f4a:	4413      	add	r3, r2
 8014f4c:	694d      	ldr	r5, [r1, #20]
 8014f4e:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8014f52:	6803      	ldr	r3, [r0, #0]
 8014f54:	4413      	add	r3, r2
 8014f56:	f8d3 50a0 	ldr.w	r5, [r3, #160]	; 0xa0
 8014f5a:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8014f5e:	f025 0507 	bic.w	r5, r5, #7
 8014f62:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8014f66:	69cd      	ldr	r5, [r1, #28]
 8014f68:	6a0e      	ldr	r6, [r1, #32]
 8014f6a:	6803      	ldr	r3, [r0, #0]
 8014f6c:	4413      	add	r3, r2
 8014f6e:	4335      	orrs	r5, r6
 8014f70:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8014f74:	6803      	ldr	r3, [r0, #0]
 8014f76:	4413      	add	r3, r2
 8014f78:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8014f7c:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8014f80:	6803      	ldr	r3, [r0, #0]
 8014f82:	4413      	add	r3, r2
 8014f84:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8014f86:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8014f8a:	690b      	ldr	r3, [r1, #16]
 8014f8c:	b16b      	cbz	r3, 8014faa <LTDC_SetConfig+0x124>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8014f8e:	2b01      	cmp	r3, #1
 8014f90:	d03c      	beq.n	801500c <LTDC_SetConfig+0x186>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8014f92:	2b04      	cmp	r3, #4
 8014f94:	d03c      	beq.n	8015010 <LTDC_SetConfig+0x18a>
 8014f96:	2b02      	cmp	r3, #2
 8014f98:	d008      	beq.n	8014fac <LTDC_SetConfig+0x126>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8014f9a:	2b03      	cmp	r3, #3
 8014f9c:	d03a      	beq.n	8015014 <LTDC_SetConfig+0x18e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8014f9e:	2b07      	cmp	r3, #7
 8014fa0:	d001      	beq.n	8014fa6 <LTDC_SetConfig+0x120>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8014fa2:	2301      	movs	r3, #1
 8014fa4:	e002      	b.n	8014fac <LTDC_SetConfig+0x126>
    tmp = 2U;
 8014fa6:	2302      	movs	r3, #2
 8014fa8:	e000      	b.n	8014fac <LTDC_SetConfig+0x126>
    tmp = 4U;
 8014faa:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8014fac:	6804      	ldr	r4, [r0, #0]
 8014fae:	4414      	add	r4, r2
 8014fb0:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8014fb4:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8014fb8:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8014fbc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8014fbe:	fb03 f504 	mul.w	r5, r3, r4
 8014fc2:	684c      	ldr	r4, [r1, #4]
 8014fc4:	680e      	ldr	r6, [r1, #0]
 8014fc6:	1ba4      	subs	r4, r4, r6
 8014fc8:	fb03 f304 	mul.w	r3, r3, r4
 8014fcc:	3303      	adds	r3, #3
 8014fce:	6804      	ldr	r4, [r0, #0]
 8014fd0:	4414      	add	r4, r2
 8014fd2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8014fd6:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8014fda:	6803      	ldr	r3, [r0, #0]
 8014fdc:	4413      	add	r3, r2
 8014fde:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8014fe2:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8014fe6:	f024 0407 	bic.w	r4, r4, #7
 8014fea:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8014fee:	6803      	ldr	r3, [r0, #0]
 8014ff0:	4413      	add	r3, r2
 8014ff2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8014ff4:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8014ff8:	6803      	ldr	r3, [r0, #0]
 8014ffa:	441a      	add	r2, r3
 8014ffc:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8015000:	f043 0301 	orr.w	r3, r3, #1
 8015004:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 8015008:	bcf0      	pop	{r4, r5, r6, r7}
 801500a:	4770      	bx	lr
    tmp = 3U;
 801500c:	2303      	movs	r3, #3
 801500e:	e7cd      	b.n	8014fac <LTDC_SetConfig+0x126>
    tmp = 2U;
 8015010:	2302      	movs	r3, #2
 8015012:	e7cb      	b.n	8014fac <LTDC_SetConfig+0x126>
 8015014:	2302      	movs	r3, #2
 8015016:	e7c9      	b.n	8014fac <LTDC_SetConfig+0x126>

08015018 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8015018:	2800      	cmp	r0, #0
 801501a:	d072      	beq.n	8015102 <HAL_LTDC_Init+0xea>
{
 801501c:	b538      	push	{r3, r4, r5, lr}
 801501e:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8015020:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8015024:	2b00      	cmp	r3, #0
 8015026:	d067      	beq.n	80150f8 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8015028:	2302      	movs	r3, #2
 801502a:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 801502e:	6822      	ldr	r2, [r4, #0]
 8015030:	6993      	ldr	r3, [r2, #24]
 8015032:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015036:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8015038:	6821      	ldr	r1, [r4, #0]
 801503a:	698a      	ldr	r2, [r1, #24]
 801503c:	6863      	ldr	r3, [r4, #4]
 801503e:	68a0      	ldr	r0, [r4, #8]
 8015040:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8015042:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8015044:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8015046:	6920      	ldr	r0, [r4, #16]
 8015048:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 801504a:	4313      	orrs	r3, r2
 801504c:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 801504e:	6821      	ldr	r1, [r4, #0]
 8015050:	688a      	ldr	r2, [r1, #8]
 8015052:	4b2d      	ldr	r3, [pc, #180]	; (8015108 <HAL_LTDC_Init+0xf0>)
 8015054:	401a      	ands	r2, r3
 8015056:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8015058:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 801505a:	6820      	ldr	r0, [r4, #0]
 801505c:	6882      	ldr	r2, [r0, #8]
 801505e:	69a1      	ldr	r1, [r4, #24]
 8015060:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8015064:	430a      	orrs	r2, r1
 8015066:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8015068:	6821      	ldr	r1, [r4, #0]
 801506a:	68ca      	ldr	r2, [r1, #12]
 801506c:	401a      	ands	r2, r3
 801506e:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8015070:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8015072:	6820      	ldr	r0, [r4, #0]
 8015074:	68c2      	ldr	r2, [r0, #12]
 8015076:	6a21      	ldr	r1, [r4, #32]
 8015078:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 801507c:	430a      	orrs	r2, r1
 801507e:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8015080:	6821      	ldr	r1, [r4, #0]
 8015082:	690a      	ldr	r2, [r1, #16]
 8015084:	401a      	ands	r2, r3
 8015086:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8015088:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 801508a:	6820      	ldr	r0, [r4, #0]
 801508c:	6902      	ldr	r2, [r0, #16]
 801508e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015090:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8015094:	430a      	orrs	r2, r1
 8015096:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8015098:	6821      	ldr	r1, [r4, #0]
 801509a:	694a      	ldr	r2, [r1, #20]
 801509c:	4013      	ands	r3, r2
 801509e:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80150a0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80150a2:	6821      	ldr	r1, [r4, #0]
 80150a4:	694b      	ldr	r3, [r1, #20]
 80150a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80150a8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80150ac:	4313      	orrs	r3, r2
 80150ae:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80150b0:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80150b4:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80150b8:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80150ba:	6821      	ldr	r1, [r4, #0]
 80150bc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80150be:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80150c2:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80150c4:	6821      	ldr	r1, [r4, #0]
 80150c6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80150c8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80150cc:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80150d0:	4303      	orrs	r3, r0
 80150d2:	4313      	orrs	r3, r2
 80150d4:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80150d6:	6822      	ldr	r2, [r4, #0]
 80150d8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80150da:	f043 0306 	orr.w	r3, r3, #6
 80150de:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80150e0:	6822      	ldr	r2, [r4, #0]
 80150e2:	6993      	ldr	r3, [r2, #24]
 80150e4:	f043 0301 	orr.w	r3, r3, #1
 80150e8:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80150ea:	2000      	movs	r0, #0
 80150ec:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80150f0:	2301      	movs	r3, #1
 80150f2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80150f6:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80150f8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80150fc:	f008 fcb2 	bl	801da64 <HAL_LTDC_MspInit>
 8015100:	e792      	b.n	8015028 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8015102:	2001      	movs	r0, #1
}
 8015104:	4770      	bx	lr
 8015106:	bf00      	nop
 8015108:	f000f800 	.word	0xf000f800

0801510c <HAL_LTDC_DeInit>:
{
 801510c:	b510      	push	{r4, lr}
 801510e:	4604      	mov	r4, r0
  HAL_LTDC_MspDeInit(hltdc);
 8015110:	f008 fcc8 	bl	801daa4 <HAL_LTDC_MspDeInit>
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8015114:	2000      	movs	r0, #0
 8015116:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_RESET;
 801511a:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 801511e:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8015122:	bd10      	pop	{r4, pc}

08015124 <HAL_LTDC_ErrorCallback>:
}
 8015124:	4770      	bx	lr

08015126 <HAL_LTDC_LineEventCallback>:
}
 8015126:	4770      	bx	lr

08015128 <HAL_LTDC_ReloadEventCallback>:
}
 8015128:	4770      	bx	lr

0801512a <HAL_LTDC_IRQHandler>:
{
 801512a:	b570      	push	{r4, r5, r6, lr}
 801512c:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 801512e:	6803      	ldr	r3, [r0, #0]
 8015130:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8015132:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8015134:	f015 0f04 	tst.w	r5, #4
 8015138:	d002      	beq.n	8015140 <HAL_LTDC_IRQHandler+0x16>
 801513a:	f016 0f04 	tst.w	r6, #4
 801513e:	d112      	bne.n	8015166 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8015140:	f015 0f02 	tst.w	r5, #2
 8015144:	d002      	beq.n	801514c <HAL_LTDC_IRQHandler+0x22>
 8015146:	f016 0f02 	tst.w	r6, #2
 801514a:	d121      	bne.n	8015190 <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 801514c:	f015 0f01 	tst.w	r5, #1
 8015150:	d002      	beq.n	8015158 <HAL_LTDC_IRQHandler+0x2e>
 8015152:	f016 0f01 	tst.w	r6, #1
 8015156:	d132      	bne.n	80151be <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8015158:	f015 0f08 	tst.w	r5, #8
 801515c:	d002      	beq.n	8015164 <HAL_LTDC_IRQHandler+0x3a>
 801515e:	f016 0f08 	tst.w	r6, #8
 8015162:	d13d      	bne.n	80151e0 <HAL_LTDC_IRQHandler+0xb6>
}
 8015164:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8015166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015168:	f022 0204 	bic.w	r2, r2, #4
 801516c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 801516e:	6803      	ldr	r3, [r0, #0]
 8015170:	2204      	movs	r2, #4
 8015172:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8015174:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8015178:	f043 0301 	orr.w	r3, r3, #1
 801517c:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8015180:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8015184:	2300      	movs	r3, #0
 8015186:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 801518a:	f7ff ffcb 	bl	8015124 <HAL_LTDC_ErrorCallback>
 801518e:	e7d7      	b.n	8015140 <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8015190:	6822      	ldr	r2, [r4, #0]
 8015192:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8015194:	f023 0302 	bic.w	r3, r3, #2
 8015198:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 801519a:	6823      	ldr	r3, [r4, #0]
 801519c:	2202      	movs	r2, #2
 801519e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80151a0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 80151a4:	4313      	orrs	r3, r2
 80151a6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80151aa:	2304      	movs	r3, #4
 80151ac:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80151b0:	2300      	movs	r3, #0
 80151b2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80151b6:	4620      	mov	r0, r4
 80151b8:	f7ff ffb4 	bl	8015124 <HAL_LTDC_ErrorCallback>
 80151bc:	e7c6      	b.n	801514c <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80151be:	6822      	ldr	r2, [r4, #0]
 80151c0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80151c2:	f023 0301 	bic.w	r3, r3, #1
 80151c6:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80151c8:	6822      	ldr	r2, [r4, #0]
 80151ca:	2301      	movs	r3, #1
 80151cc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80151ce:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80151d2:	2300      	movs	r3, #0
 80151d4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80151d8:	4620      	mov	r0, r4
 80151da:	f7ff ffa4 	bl	8015126 <HAL_LTDC_LineEventCallback>
 80151de:	e7bb      	b.n	8015158 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80151e0:	6822      	ldr	r2, [r4, #0]
 80151e2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80151e4:	f023 0308 	bic.w	r3, r3, #8
 80151e8:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80151ea:	6823      	ldr	r3, [r4, #0]
 80151ec:	2208      	movs	r2, #8
 80151ee:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80151f0:	2301      	movs	r3, #1
 80151f2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80151f6:	2300      	movs	r3, #0
 80151f8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80151fc:	4620      	mov	r0, r4
 80151fe:	f7ff ff93 	bl	8015128 <HAL_LTDC_ReloadEventCallback>
}
 8015202:	e7af      	b.n	8015164 <HAL_LTDC_IRQHandler+0x3a>

08015204 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8015204:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8015208:	2b01      	cmp	r3, #1
 801520a:	d027      	beq.n	801525c <HAL_LTDC_ConfigLayer+0x58>
{
 801520c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015210:	4694      	mov	ip, r2
 8015212:	460f      	mov	r7, r1
 8015214:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8015216:	f04f 0801 	mov.w	r8, #1
 801521a:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 801521e:	2302      	movs	r3, #2
 8015220:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8015224:	2434      	movs	r4, #52	; 0x34
 8015226:	fb04 0402 	mla	r4, r4, r2, r0
 801522a:	3438      	adds	r4, #56	; 0x38
 801522c:	460d      	mov	r5, r1
 801522e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015236:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8015238:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801523a:	682b      	ldr	r3, [r5, #0]
 801523c:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 801523e:	4662      	mov	r2, ip
 8015240:	4639      	mov	r1, r7
 8015242:	4630      	mov	r0, r6
 8015244:	f7ff fe1f 	bl	8014e86 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8015248:	6833      	ldr	r3, [r6, #0]
 801524a:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 801524e:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8015252:	2000      	movs	r0, #0
 8015254:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8015258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 801525c:	2002      	movs	r0, #2
}
 801525e:	4770      	bx	lr

08015260 <HAL_LTDC_ConfigColorKeying>:
  __HAL_LOCK(hltdc);
 8015260:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8015264:	2b01      	cmp	r3, #1
 8015266:	d01d      	beq.n	80152a4 <HAL_LTDC_ConfigColorKeying+0x44>
{
 8015268:	b430      	push	{r4, r5}
  __HAL_LOCK(hltdc);
 801526a:	2401      	movs	r4, #1
 801526c:	f880 40a0 	strb.w	r4, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8015270:	2302      	movs	r3, #2
 8015272:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8015276:	6803      	ldr	r3, [r0, #0]
 8015278:	01d2      	lsls	r2, r2, #7
 801527a:	4413      	add	r3, r2
 801527c:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 8015280:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8015284:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8015288:	6803      	ldr	r3, [r0, #0]
 801528a:	441a      	add	r2, r3
 801528c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8015290:	6803      	ldr	r3, [r0, #0]
 8015292:	625c      	str	r4, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8015294:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8015298:	2300      	movs	r3, #0
 801529a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 801529e:	4618      	mov	r0, r3
}
 80152a0:	bc30      	pop	{r4, r5}
 80152a2:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 80152a4:	2002      	movs	r0, #2
}
 80152a6:	4770      	bx	lr

080152a8 <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 80152a8:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80152ac:	2b01      	cmp	r3, #1
 80152ae:	d017      	beq.n	80152e0 <HAL_LTDC_EnableColorKeying+0x38>
 80152b0:	2201      	movs	r2, #1
 80152b2:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80152b6:	2302      	movs	r3, #2
 80152b8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80152bc:	6803      	ldr	r3, [r0, #0]
 80152be:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 80152c2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 80152c6:	f043 0302 	orr.w	r3, r3, #2
 80152ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80152ce:	6803      	ldr	r3, [r0, #0]
 80152d0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80152d2:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80152d6:	2300      	movs	r3, #0
 80152d8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 80152dc:	4618      	mov	r0, r3
 80152de:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 80152e0:	2002      	movs	r0, #2
}
 80152e2:	4770      	bx	lr

080152e4 <HAL_LTDC_DisableColorKeying>:
  __HAL_LOCK(hltdc);
 80152e4:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80152e8:	2b01      	cmp	r3, #1
 80152ea:	d017      	beq.n	801531c <HAL_LTDC_DisableColorKeying+0x38>
 80152ec:	2201      	movs	r2, #1
 80152ee:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80152f2:	2302      	movs	r3, #2
 80152f4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 80152f8:	6803      	ldr	r3, [r0, #0]
 80152fa:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 80152fe:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8015302:	f023 0302 	bic.w	r3, r3, #2
 8015306:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 801530a:	6803      	ldr	r3, [r0, #0]
 801530c:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 801530e:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8015312:	2300      	movs	r3, #0
 8015314:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 8015318:	4618      	mov	r0, r3
 801531a:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 801531c:	2002      	movs	r0, #2
}
 801531e:	4770      	bx	lr

08015320 <HAL_LTDC_SetWindowPosition>:
{
 8015320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8015322:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
 8015326:	2c01      	cmp	r4, #1
 8015328:	d021      	beq.n	801536e <HAL_LTDC_SetWindowPosition+0x4e>
 801532a:	4604      	mov	r4, r0
 801532c:	2501      	movs	r5, #1
 801532e:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8015332:	2002      	movs	r0, #2
 8015334:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8015338:	2034      	movs	r0, #52	; 0x34
 801533a:	fb00 f003 	mul.w	r0, r0, r3
 801533e:	f100 0738 	add.w	r7, r0, #56	; 0x38
  pLayerCfg->WindowX0 = X0;
 8015342:	4420      	add	r0, r4
 8015344:	6381      	str	r1, [r0, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8015346:	6e06      	ldr	r6, [r0, #96]	; 0x60
 8015348:	440e      	add	r6, r1
 801534a:	63c6      	str	r6, [r0, #60]	; 0x3c
  pLayerCfg->WindowY0 = Y0;
 801534c:	6402      	str	r2, [r0, #64]	; 0x40
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 801534e:	6e46      	ldr	r6, [r0, #100]	; 0x64
 8015350:	4432      	add	r2, r6
 8015352:	6442      	str	r2, [r0, #68]	; 0x44
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8015354:	461a      	mov	r2, r3
 8015356:	19e1      	adds	r1, r4, r7
 8015358:	4620      	mov	r0, r4
 801535a:	f7ff fd94 	bl	8014e86 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 801535e:	6823      	ldr	r3, [r4, #0]
 8015360:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8015362:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8015366:	2000      	movs	r0, #0
 8015368:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 801536c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 801536e:	2002      	movs	r0, #2
 8015370:	e7fc      	b.n	801536c <HAL_LTDC_SetWindowPosition+0x4c>

08015372 <HAL_LTDC_SetAlpha>:
{
 8015372:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 8015374:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8015378:	2b01      	cmp	r3, #1
 801537a:	d019      	beq.n	80153b0 <HAL_LTDC_SetAlpha+0x3e>
 801537c:	4604      	mov	r4, r0
 801537e:	2501      	movs	r5, #1
 8015380:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8015384:	2302      	movs	r3, #2
 8015386:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 801538a:	2334      	movs	r3, #52	; 0x34
 801538c:	fb03 f302 	mul.w	r3, r3, r2
 8015390:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->Alpha = Alpha;
 8015394:	4423      	add	r3, r4
 8015396:	64d9      	str	r1, [r3, #76]	; 0x4c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8015398:	1821      	adds	r1, r4, r0
 801539a:	4620      	mov	r0, r4
 801539c:	f7ff fd73 	bl	8014e86 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80153a0:	6823      	ldr	r3, [r4, #0]
 80153a2:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80153a4:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80153a8:	2000      	movs	r0, #0
 80153aa:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 80153ae:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hltdc);
 80153b0:	2002      	movs	r0, #2
 80153b2:	e7fc      	b.n	80153ae <HAL_LTDC_SetAlpha+0x3c>

080153b4 <HAL_LTDC_SetAddress>:
{
 80153b4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 80153b6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80153ba:	2b01      	cmp	r3, #1
 80153bc:	d019      	beq.n	80153f2 <HAL_LTDC_SetAddress+0x3e>
 80153be:	4604      	mov	r4, r0
 80153c0:	2501      	movs	r5, #1
 80153c2:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80153c6:	2302      	movs	r3, #2
 80153c8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80153cc:	2334      	movs	r3, #52	; 0x34
 80153ce:	fb03 f302 	mul.w	r3, r3, r2
 80153d2:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 80153d6:	4423      	add	r3, r4
 80153d8:	65d9      	str	r1, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80153da:	1821      	adds	r1, r4, r0
 80153dc:	4620      	mov	r0, r4
 80153de:	f7ff fd52 	bl	8014e86 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80153e2:	6823      	ldr	r3, [r4, #0]
 80153e4:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80153e6:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80153ea:	2000      	movs	r0, #0
 80153ec:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 80153f0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hltdc);
 80153f2:	2002      	movs	r0, #2
 80153f4:	e7fc      	b.n	80153f0 <HAL_LTDC_SetAddress+0x3c>
	...

080153f8 <HAL_LTDC_SetPitch>:
{
 80153f8:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 80153fa:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
 80153fe:	2c01      	cmp	r4, #1
 8015400:	d047      	beq.n	8015492 <HAL_LTDC_SetPitch+0x9a>
 8015402:	2301      	movs	r3, #1
 8015404:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8015408:	2302      	movs	r3, #2
 801540a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 801540e:	2434      	movs	r4, #52	; 0x34
 8015410:	fb04 0402 	mla	r4, r4, r2, r0
 8015414:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8015416:	b16b      	cbz	r3, 8015434 <HAL_LTDC_SetPitch+0x3c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8015418:	2b01      	cmp	r3, #1
 801541a:	d034      	beq.n	8015486 <HAL_LTDC_SetPitch+0x8e>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 801541c:	2b04      	cmp	r3, #4
 801541e:	d034      	beq.n	801548a <HAL_LTDC_SetPitch+0x92>
 8015420:	2b02      	cmp	r3, #2
 8015422:	d008      	beq.n	8015436 <HAL_LTDC_SetPitch+0x3e>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8015424:	2b03      	cmp	r3, #3
 8015426:	d032      	beq.n	801548e <HAL_LTDC_SetPitch+0x96>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8015428:	2b07      	cmp	r3, #7
 801542a:	d001      	beq.n	8015430 <HAL_LTDC_SetPitch+0x38>
    tmp = 1U;
 801542c:	2301      	movs	r3, #1
 801542e:	e002      	b.n	8015436 <HAL_LTDC_SetPitch+0x3e>
    tmp = 2U;
 8015430:	2302      	movs	r3, #2
 8015432:	e000      	b.n	8015436 <HAL_LTDC_SetPitch+0x3e>
    tmp = 4U;
 8015434:	2304      	movs	r3, #4
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8015436:	fb01 f103 	mul.w	r1, r1, r3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 801543a:	6804      	ldr	r4, [r0, #0]
 801543c:	01d2      	lsls	r2, r2, #7
 801543e:	4414      	add	r4, r2
 8015440:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8015444:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8015448:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801544c:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8015450:	4c11      	ldr	r4, [pc, #68]	; (8015498 <HAL_LTDC_SetPitch+0xa0>)
 8015452:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015454:	f043 0301 	orr.w	r3, r3, #1
 8015458:	6263      	str	r3, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 801545a:	6803      	ldr	r3, [r0, #0]
 801545c:	441a      	add	r2, r3
 801545e:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
 8015462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8015466:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
  LTDC->SRCR |= LTDC_SRCR_IMR;
 801546a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801546c:	f043 0301 	orr.w	r3, r3, #1
 8015470:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8015472:	2301      	movs	r3, #1
 8015474:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8015478:	2300      	movs	r3, #0
 801547a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 801547e:	4618      	mov	r0, r3
}
 8015480:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015484:	4770      	bx	lr
    tmp = 3U;
 8015486:	2303      	movs	r3, #3
 8015488:	e7d5      	b.n	8015436 <HAL_LTDC_SetPitch+0x3e>
    tmp = 2U;
 801548a:	2302      	movs	r3, #2
 801548c:	e7d3      	b.n	8015436 <HAL_LTDC_SetPitch+0x3e>
 801548e:	2302      	movs	r3, #2
 8015490:	e7d1      	b.n	8015436 <HAL_LTDC_SetPitch+0x3e>
  __HAL_LOCK(hltdc);
 8015492:	2002      	movs	r0, #2
 8015494:	e7f4      	b.n	8015480 <HAL_LTDC_SetPitch+0x88>
 8015496:	bf00      	nop
 8015498:	40016800 	.word	0x40016800

0801549c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 801549c:	b510      	push	{r4, lr}
 801549e:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80154a0:	2300      	movs	r3, #0
 80154a2:	9301      	str	r3, [sp, #4]
 80154a4:	4b19      	ldr	r3, [pc, #100]	; (801550c <HAL_PWREx_EnableOverDrive+0x70>)
 80154a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80154a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80154ac:	641a      	str	r2, [r3, #64]	; 0x40
 80154ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80154b4:	9301      	str	r3, [sp, #4]
 80154b6:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80154b8:	4b15      	ldr	r3, [pc, #84]	; (8015510 <HAL_PWREx_EnableOverDrive+0x74>)
 80154ba:	2201      	movs	r2, #1
 80154bc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80154be:	f7fd fab1 	bl	8012a24 <HAL_GetTick>
 80154c2:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80154c4:	4b13      	ldr	r3, [pc, #76]	; (8015514 <HAL_PWREx_EnableOverDrive+0x78>)
 80154c6:	685b      	ldr	r3, [r3, #4]
 80154c8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80154cc:	d108      	bne.n	80154e0 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80154ce:	f7fd faa9 	bl	8012a24 <HAL_GetTick>
 80154d2:	1b00      	subs	r0, r0, r4
 80154d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80154d8:	d9f4      	bls.n	80154c4 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80154da:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80154dc:	b002      	add	sp, #8
 80154de:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80154e0:	4b0d      	ldr	r3, [pc, #52]	; (8015518 <HAL_PWREx_EnableOverDrive+0x7c>)
 80154e2:	2201      	movs	r2, #1
 80154e4:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80154e6:	f7fd fa9d 	bl	8012a24 <HAL_GetTick>
 80154ea:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80154ec:	4b09      	ldr	r3, [pc, #36]	; (8015514 <HAL_PWREx_EnableOverDrive+0x78>)
 80154ee:	685b      	ldr	r3, [r3, #4]
 80154f0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80154f4:	d107      	bne.n	8015506 <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80154f6:	f7fd fa95 	bl	8012a24 <HAL_GetTick>
 80154fa:	1b00      	subs	r0, r0, r4
 80154fc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8015500:	d9f4      	bls.n	80154ec <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 8015502:	2003      	movs	r0, #3
 8015504:	e7ea      	b.n	80154dc <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8015506:	2000      	movs	r0, #0
 8015508:	e7e8      	b.n	80154dc <HAL_PWREx_EnableOverDrive+0x40>
 801550a:	bf00      	nop
 801550c:	40023800 	.word	0x40023800
 8015510:	420e0040 	.word	0x420e0040
 8015514:	40007000 	.word	0x40007000
 8015518:	420e0044 	.word	0x420e0044

0801551c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 801551c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015520:	4605      	mov	r5, r0
 8015522:	460f      	mov	r7, r1
 8015524:	4616      	mov	r6, r2
 8015526:	4698      	mov	r8, r3
 8015528:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 801552a:	682b      	ldr	r3, [r5, #0]
 801552c:	689b      	ldr	r3, [r3, #8]
 801552e:	423b      	tst	r3, r7
 8015530:	bf14      	ite	ne
 8015532:	2301      	movne	r3, #1
 8015534:	2300      	moveq	r3, #0
 8015536:	42b3      	cmp	r3, r6
 8015538:	d012      	beq.n	8015560 <QSPI_WaitFlagStateUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801553a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 801553e:	d0f4      	beq.n	801552a <QSPI_WaitFlagStateUntilTimeout+0xe>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8015540:	b12c      	cbz	r4, 801554e <QSPI_WaitFlagStateUntilTimeout+0x32>
 8015542:	f7fd fa6f 	bl	8012a24 <HAL_GetTick>
 8015546:	eba0 0008 	sub.w	r0, r0, r8
 801554a:	42a0      	cmp	r0, r4
 801554c:	d9ed      	bls.n	801552a <QSPI_WaitFlagStateUntilTimeout+0xe>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 801554e:	2304      	movs	r3, #4
 8015550:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8015554:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8015556:	f043 0301 	orr.w	r3, r3, #1
 801555a:	646b      	str	r3, [r5, #68]	; 0x44
        
        return HAL_ERROR;
 801555c:	2001      	movs	r0, #1
 801555e:	e000      	b.n	8015562 <QSPI_WaitFlagStateUntilTimeout+0x46>
      }
    }
  }
  return HAL_OK;
 8015560:	2000      	movs	r0, #0
}
 8015562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015566 <HAL_QSPI_SetTimeout>:
  hqspi->Timeout = Timeout;
 8015566:	6481      	str	r1, [r0, #72]	; 0x48
}
 8015568:	4770      	bx	lr
	...

0801556c <HAL_QSPI_Init>:
{
 801556c:	b530      	push	{r4, r5, lr}
 801556e:	b083      	sub	sp, #12
 8015570:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8015572:	f7fd fa57 	bl	8012a24 <HAL_GetTick>
  if(hqspi == NULL)
 8015576:	2c00      	cmp	r4, #0
 8015578:	d04e      	beq.n	8015618 <HAL_QSPI_Init+0xac>
 801557a:	4605      	mov	r5, r0
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 801557c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8015580:	2b00      	cmp	r3, #0
 8015582:	d03e      	beq.n	8015602 <HAL_QSPI_Init+0x96>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1U) << 8U));
 8015584:	6821      	ldr	r1, [r4, #0]
 8015586:	680b      	ldr	r3, [r1, #0]
 8015588:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 801558c:	68a2      	ldr	r2, [r4, #8]
 801558e:	3a01      	subs	r2, #1
 8015590:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8015594:	600b      	str	r3, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8015596:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8015598:	9300      	str	r3, [sp, #0]
 801559a:	462b      	mov	r3, r5
 801559c:	2200      	movs	r2, #0
 801559e:	2120      	movs	r1, #32
 80155a0:	4620      	mov	r0, r4
 80155a2:	f7ff ffbb 	bl	801551c <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80155a6:	4601      	mov	r1, r0
 80155a8:	bb28      	cbnz	r0, 80155f6 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24U)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 80155aa:	6820      	ldr	r0, [r4, #0]
 80155ac:	6803      	ldr	r3, [r0, #0]
 80155ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80155b2:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80155b6:	6865      	ldr	r5, [r4, #4]
 80155b8:	68e2      	ldr	r2, [r4, #12]
 80155ba:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 80155be:	69e5      	ldr	r5, [r4, #28]
 80155c0:	432a      	orrs	r2, r5
 80155c2:	6a25      	ldr	r5, [r4, #32]
 80155c4:	432a      	orrs	r2, r5
 80155c6:	4313      	orrs	r3, r2
 80155c8:	6003      	str	r3, [r0, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 80155ca:	6820      	ldr	r0, [r4, #0]
 80155cc:	6842      	ldr	r2, [r0, #4]
 80155ce:	4b13      	ldr	r3, [pc, #76]	; (801561c <HAL_QSPI_Init+0xb0>)
 80155d0:	4013      	ands	r3, r2
 80155d2:	6925      	ldr	r5, [r4, #16]
 80155d4:	6962      	ldr	r2, [r4, #20]
 80155d6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80155da:	69a5      	ldr	r5, [r4, #24]
 80155dc:	432a      	orrs	r2, r5
 80155de:	4313      	orrs	r3, r2
 80155e0:	6043      	str	r3, [r0, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80155e2:	6822      	ldr	r2, [r4, #0]
 80155e4:	6813      	ldr	r3, [r2, #0]
 80155e6:	f043 0301 	orr.w	r3, r3, #1
 80155ea:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 80155ec:	2300      	movs	r3, #0
 80155ee:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80155f0:	2301      	movs	r3, #1
 80155f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80155f6:	2300      	movs	r3, #0
 80155f8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80155fc:	4608      	mov	r0, r1
 80155fe:	b003      	add	sp, #12
 8015600:	bd30      	pop	{r4, r5, pc}
    hqspi->Lock = HAL_UNLOCKED;
 8015602:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 8015606:	4620      	mov	r0, r4
 8015608:	f7fc fc0a 	bl	8011e20 <HAL_QSPI_MspInit>
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 801560c:	f241 3188 	movw	r1, #5000	; 0x1388
 8015610:	4620      	mov	r0, r4
 8015612:	f7ff ffa8 	bl	8015566 <HAL_QSPI_SetTimeout>
 8015616:	e7b5      	b.n	8015584 <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
 8015618:	2101      	movs	r1, #1
 801561a:	e7ef      	b.n	80155fc <HAL_QSPI_Init+0x90>
 801561c:	ffe0f8fe 	.word	0xffe0f8fe

08015620 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8015620:	4b32      	ldr	r3, [pc, #200]	; (80156ec <HAL_RCC_GetSysClockFreq+0xcc>)
 8015622:	689b      	ldr	r3, [r3, #8]
 8015624:	f003 030c 	and.w	r3, r3, #12
 8015628:	2b04      	cmp	r3, #4
 801562a:	d05c      	beq.n	80156e6 <HAL_RCC_GetSysClockFreq+0xc6>
 801562c:	2b08      	cmp	r3, #8
 801562e:	d001      	beq.n	8015634 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8015630:	482f      	ldr	r0, [pc, #188]	; (80156f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8015632:	4770      	bx	lr
{
 8015634:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8015638:	4b2c      	ldr	r3, [pc, #176]	; (80156ec <HAL_RCC_GetSysClockFreq+0xcc>)
 801563a:	685a      	ldr	r2, [r3, #4]
 801563c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8015640:	685b      	ldr	r3, [r3, #4]
 8015642:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8015646:	d02b      	beq.n	80156a0 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8015648:	4b28      	ldr	r3, [pc, #160]	; (80156ec <HAL_RCC_GetSysClockFreq+0xcc>)
 801564a:	685b      	ldr	r3, [r3, #4]
 801564c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8015650:	461e      	mov	r6, r3
 8015652:	2700      	movs	r7, #0
 8015654:	015c      	lsls	r4, r3, #5
 8015656:	2500      	movs	r5, #0
 8015658:	1ae4      	subs	r4, r4, r3
 801565a:	eb65 0507 	sbc.w	r5, r5, r7
 801565e:	01a9      	lsls	r1, r5, #6
 8015660:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8015664:	01a0      	lsls	r0, r4, #6
 8015666:	1b00      	subs	r0, r0, r4
 8015668:	eb61 0105 	sbc.w	r1, r1, r5
 801566c:	00cb      	lsls	r3, r1, #3
 801566e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8015672:	00c4      	lsls	r4, r0, #3
 8015674:	19a0      	adds	r0, r4, r6
 8015676:	eb43 0107 	adc.w	r1, r3, r7
 801567a:	024b      	lsls	r3, r1, #9
 801567c:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8015680:	0244      	lsls	r4, r0, #9
 8015682:	4620      	mov	r0, r4
 8015684:	4619      	mov	r1, r3
 8015686:	2300      	movs	r3, #0
 8015688:	f7fb fa68 	bl	8010b5c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 801568c:	4b17      	ldr	r3, [pc, #92]	; (80156ec <HAL_RCC_GetSysClockFreq+0xcc>)
 801568e:	685b      	ldr	r3, [r3, #4]
 8015690:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8015694:	3301      	adds	r3, #1
 8015696:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8015698:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 801569c:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80156a0:	4b12      	ldr	r3, [pc, #72]	; (80156ec <HAL_RCC_GetSysClockFreq+0xcc>)
 80156a2:	685b      	ldr	r3, [r3, #4]
 80156a4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80156a8:	461e      	mov	r6, r3
 80156aa:	2700      	movs	r7, #0
 80156ac:	015c      	lsls	r4, r3, #5
 80156ae:	2500      	movs	r5, #0
 80156b0:	1ae4      	subs	r4, r4, r3
 80156b2:	eb65 0507 	sbc.w	r5, r5, r7
 80156b6:	01a9      	lsls	r1, r5, #6
 80156b8:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80156bc:	01a0      	lsls	r0, r4, #6
 80156be:	1b00      	subs	r0, r0, r4
 80156c0:	eb61 0105 	sbc.w	r1, r1, r5
 80156c4:	00cb      	lsls	r3, r1, #3
 80156c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80156ca:	00c4      	lsls	r4, r0, #3
 80156cc:	19a0      	adds	r0, r4, r6
 80156ce:	eb43 0107 	adc.w	r1, r3, r7
 80156d2:	028b      	lsls	r3, r1, #10
 80156d4:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80156d8:	0284      	lsls	r4, r0, #10
 80156da:	4620      	mov	r0, r4
 80156dc:	4619      	mov	r1, r3
 80156de:	2300      	movs	r3, #0
 80156e0:	f7fb fa3c 	bl	8010b5c <__aeabi_uldivmod>
 80156e4:	e7d2      	b.n	801568c <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 80156e6:	4803      	ldr	r0, [pc, #12]	; (80156f4 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 80156e8:	4770      	bx	lr
 80156ea:	bf00      	nop
 80156ec:	40023800 	.word	0x40023800
 80156f0:	00f42400 	.word	0x00f42400
 80156f4:	007a1200 	.word	0x007a1200

080156f8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80156f8:	2800      	cmp	r0, #0
 80156fa:	f000 809e 	beq.w	801583a <HAL_RCC_ClockConfig+0x142>
{
 80156fe:	b570      	push	{r4, r5, r6, lr}
 8015700:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8015702:	4b50      	ldr	r3, [pc, #320]	; (8015844 <HAL_RCC_ClockConfig+0x14c>)
 8015704:	681b      	ldr	r3, [r3, #0]
 8015706:	f003 030f 	and.w	r3, r3, #15
 801570a:	428b      	cmp	r3, r1
 801570c:	d209      	bcs.n	8015722 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 801570e:	b2cb      	uxtb	r3, r1
 8015710:	4a4c      	ldr	r2, [pc, #304]	; (8015844 <HAL_RCC_ClockConfig+0x14c>)
 8015712:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8015714:	6813      	ldr	r3, [r2, #0]
 8015716:	f003 030f 	and.w	r3, r3, #15
 801571a:	428b      	cmp	r3, r1
 801571c:	d001      	beq.n	8015722 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 801571e:	2001      	movs	r0, #1
}
 8015720:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015722:	6823      	ldr	r3, [r4, #0]
 8015724:	f013 0f02 	tst.w	r3, #2
 8015728:	d017      	beq.n	801575a <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801572a:	f013 0f04 	tst.w	r3, #4
 801572e:	d004      	beq.n	801573a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8015730:	4a45      	ldr	r2, [pc, #276]	; (8015848 <HAL_RCC_ClockConfig+0x150>)
 8015732:	6893      	ldr	r3, [r2, #8]
 8015734:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8015738:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801573a:	6823      	ldr	r3, [r4, #0]
 801573c:	f013 0f08 	tst.w	r3, #8
 8015740:	d004      	beq.n	801574c <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8015742:	4a41      	ldr	r2, [pc, #260]	; (8015848 <HAL_RCC_ClockConfig+0x150>)
 8015744:	6893      	ldr	r3, [r2, #8]
 8015746:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801574a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801574c:	4a3e      	ldr	r2, [pc, #248]	; (8015848 <HAL_RCC_ClockConfig+0x150>)
 801574e:	6893      	ldr	r3, [r2, #8]
 8015750:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015754:	68a0      	ldr	r0, [r4, #8]
 8015756:	4303      	orrs	r3, r0
 8015758:	6093      	str	r3, [r2, #8]
 801575a:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801575c:	6823      	ldr	r3, [r4, #0]
 801575e:	f013 0f01 	tst.w	r3, #1
 8015762:	d032      	beq.n	80157ca <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015764:	6863      	ldr	r3, [r4, #4]
 8015766:	2b01      	cmp	r3, #1
 8015768:	d021      	beq.n	80157ae <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801576a:	1e9a      	subs	r2, r3, #2
 801576c:	2a01      	cmp	r2, #1
 801576e:	d925      	bls.n	80157bc <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015770:	4a35      	ldr	r2, [pc, #212]	; (8015848 <HAL_RCC_ClockConfig+0x150>)
 8015772:	6812      	ldr	r2, [r2, #0]
 8015774:	f012 0f02 	tst.w	r2, #2
 8015778:	d061      	beq.n	801583e <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801577a:	4933      	ldr	r1, [pc, #204]	; (8015848 <HAL_RCC_ClockConfig+0x150>)
 801577c:	688a      	ldr	r2, [r1, #8]
 801577e:	f022 0203 	bic.w	r2, r2, #3
 8015782:	4313      	orrs	r3, r2
 8015784:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8015786:	f7fd f94d 	bl	8012a24 <HAL_GetTick>
 801578a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801578c:	4b2e      	ldr	r3, [pc, #184]	; (8015848 <HAL_RCC_ClockConfig+0x150>)
 801578e:	689b      	ldr	r3, [r3, #8]
 8015790:	f003 030c 	and.w	r3, r3, #12
 8015794:	6862      	ldr	r2, [r4, #4]
 8015796:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 801579a:	d016      	beq.n	80157ca <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801579c:	f7fd f942 	bl	8012a24 <HAL_GetTick>
 80157a0:	1b80      	subs	r0, r0, r6
 80157a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80157a6:	4298      	cmp	r0, r3
 80157a8:	d9f0      	bls.n	801578c <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 80157aa:	2003      	movs	r0, #3
 80157ac:	e7b8      	b.n	8015720 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80157ae:	4a26      	ldr	r2, [pc, #152]	; (8015848 <HAL_RCC_ClockConfig+0x150>)
 80157b0:	6812      	ldr	r2, [r2, #0]
 80157b2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80157b6:	d1e0      	bne.n	801577a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80157b8:	2001      	movs	r0, #1
 80157ba:	e7b1      	b.n	8015720 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80157bc:	4a22      	ldr	r2, [pc, #136]	; (8015848 <HAL_RCC_ClockConfig+0x150>)
 80157be:	6812      	ldr	r2, [r2, #0]
 80157c0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80157c4:	d1d9      	bne.n	801577a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80157c6:	2001      	movs	r0, #1
 80157c8:	e7aa      	b.n	8015720 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80157ca:	4b1e      	ldr	r3, [pc, #120]	; (8015844 <HAL_RCC_ClockConfig+0x14c>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	f003 030f 	and.w	r3, r3, #15
 80157d2:	42ab      	cmp	r3, r5
 80157d4:	d909      	bls.n	80157ea <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80157d6:	b2ea      	uxtb	r2, r5
 80157d8:	4b1a      	ldr	r3, [pc, #104]	; (8015844 <HAL_RCC_ClockConfig+0x14c>)
 80157da:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	f003 030f 	and.w	r3, r3, #15
 80157e2:	42ab      	cmp	r3, r5
 80157e4:	d001      	beq.n	80157ea <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 80157e6:	2001      	movs	r0, #1
 80157e8:	e79a      	b.n	8015720 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80157ea:	6823      	ldr	r3, [r4, #0]
 80157ec:	f013 0f04 	tst.w	r3, #4
 80157f0:	d006      	beq.n	8015800 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80157f2:	4a15      	ldr	r2, [pc, #84]	; (8015848 <HAL_RCC_ClockConfig+0x150>)
 80157f4:	6893      	ldr	r3, [r2, #8]
 80157f6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80157fa:	68e1      	ldr	r1, [r4, #12]
 80157fc:	430b      	orrs	r3, r1
 80157fe:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015800:	6823      	ldr	r3, [r4, #0]
 8015802:	f013 0f08 	tst.w	r3, #8
 8015806:	d007      	beq.n	8015818 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8015808:	4a0f      	ldr	r2, [pc, #60]	; (8015848 <HAL_RCC_ClockConfig+0x150>)
 801580a:	6893      	ldr	r3, [r2, #8]
 801580c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8015810:	6921      	ldr	r1, [r4, #16]
 8015812:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8015816:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8015818:	f7ff ff02 	bl	8015620 <HAL_RCC_GetSysClockFreq>
 801581c:	4b0a      	ldr	r3, [pc, #40]	; (8015848 <HAL_RCC_ClockConfig+0x150>)
 801581e:	689b      	ldr	r3, [r3, #8]
 8015820:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8015824:	4a09      	ldr	r2, [pc, #36]	; (801584c <HAL_RCC_ClockConfig+0x154>)
 8015826:	5cd3      	ldrb	r3, [r2, r3]
 8015828:	40d8      	lsrs	r0, r3
 801582a:	4b09      	ldr	r3, [pc, #36]	; (8015850 <HAL_RCC_ClockConfig+0x158>)
 801582c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 801582e:	4b09      	ldr	r3, [pc, #36]	; (8015854 <HAL_RCC_ClockConfig+0x15c>)
 8015830:	6818      	ldr	r0, [r3, #0]
 8015832:	f7fc fcff 	bl	8012234 <HAL_InitTick>
  return HAL_OK;
 8015836:	2000      	movs	r0, #0
 8015838:	e772      	b.n	8015720 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 801583a:	2001      	movs	r0, #1
}
 801583c:	4770      	bx	lr
        return HAL_ERROR;
 801583e:	2001      	movs	r0, #1
 8015840:	e76e      	b.n	8015720 <HAL_RCC_ClockConfig+0x28>
 8015842:	bf00      	nop
 8015844:	40023c00 	.word	0x40023c00
 8015848:	40023800 	.word	0x40023800
 801584c:	0802ed34 	.word	0x0802ed34
 8015850:	2000005c 	.word	0x2000005c
 8015854:	2000008c 	.word	0x2000008c

08015858 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8015858:	4b01      	ldr	r3, [pc, #4]	; (8015860 <HAL_RCC_GetHCLKFreq+0x8>)
 801585a:	6818      	ldr	r0, [r3, #0]
 801585c:	4770      	bx	lr
 801585e:	bf00      	nop
 8015860:	2000005c 	.word	0x2000005c

08015864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015864:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8015866:	f7ff fff7 	bl	8015858 <HAL_RCC_GetHCLKFreq>
 801586a:	4b04      	ldr	r3, [pc, #16]	; (801587c <HAL_RCC_GetPCLK1Freq+0x18>)
 801586c:	689b      	ldr	r3, [r3, #8]
 801586e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8015872:	4a03      	ldr	r2, [pc, #12]	; (8015880 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8015874:	5cd3      	ldrb	r3, [r2, r3]
}
 8015876:	40d8      	lsrs	r0, r3
 8015878:	bd08      	pop	{r3, pc}
 801587a:	bf00      	nop
 801587c:	40023800 	.word	0x40023800
 8015880:	0802ed44 	.word	0x0802ed44

08015884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015884:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8015886:	f7ff ffe7 	bl	8015858 <HAL_RCC_GetHCLKFreq>
 801588a:	4b04      	ldr	r3, [pc, #16]	; (801589c <HAL_RCC_GetPCLK2Freq+0x18>)
 801588c:	689b      	ldr	r3, [r3, #8]
 801588e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8015892:	4a03      	ldr	r2, [pc, #12]	; (80158a0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8015894:	5cd3      	ldrb	r3, [r2, r3]
}
 8015896:	40d8      	lsrs	r0, r3
 8015898:	bd08      	pop	{r3, pc}
 801589a:	bf00      	nop
 801589c:	40023800 	.word	0x40023800
 80158a0:	0802ed44 	.word	0x0802ed44

080158a4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80158a4:	230f      	movs	r3, #15
 80158a6:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80158a8:	4b0b      	ldr	r3, [pc, #44]	; (80158d8 <HAL_RCC_GetClockConfig+0x34>)
 80158aa:	689a      	ldr	r2, [r3, #8]
 80158ac:	f002 0203 	and.w	r2, r2, #3
 80158b0:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80158b2:	689a      	ldr	r2, [r3, #8]
 80158b4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80158b8:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80158ba:	689a      	ldr	r2, [r3, #8]
 80158bc:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80158c0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80158c2:	689b      	ldr	r3, [r3, #8]
 80158c4:	08db      	lsrs	r3, r3, #3
 80158c6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80158ca:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80158cc:	4b03      	ldr	r3, [pc, #12]	; (80158dc <HAL_RCC_GetClockConfig+0x38>)
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	f003 030f 	and.w	r3, r3, #15
 80158d4:	600b      	str	r3, [r1, #0]
}
 80158d6:	4770      	bx	lr
 80158d8:	40023800 	.word	0x40023800
 80158dc:	40023c00 	.word	0x40023c00

080158e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80158e0:	b530      	push	{r4, r5, lr}
 80158e2:	b083      	sub	sp, #12
 80158e4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80158e6:	6803      	ldr	r3, [r0, #0]
 80158e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80158ec:	d008      	beq.n	8015900 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80158ee:	4abc      	ldr	r2, [pc, #752]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80158f0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80158f4:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80158f8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80158fa:	430b      	orrs	r3, r1
 80158fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8015900:	6823      	ldr	r3, [r4, #0]
 8015902:	f413 7f80 	tst.w	r3, #256	; 0x100
 8015906:	d008      	beq.n	801591a <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8015908:	4ab5      	ldr	r2, [pc, #724]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801590a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 801590e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015912:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015914:	430b      	orrs	r3, r1
 8015916:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 801591a:	6823      	ldr	r3, [r4, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 801591c:	f013 0f43 	tst.w	r3, #67	; 0x43
 8015920:	d11b      	bne.n	801595a <HAL_RCCEx_PeriphCLKConfig+0x7a>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8015922:	6823      	ldr	r3, [r4, #0]
 8015924:	f013 0f0c 	tst.w	r3, #12
 8015928:	d170      	bne.n	8015a0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 801592a:	f013 0f80 	tst.w	r3, #128	; 0x80
 801592e:	d003      	beq.n	8015938 <HAL_RCCEx_PeriphCLKConfig+0x58>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8015930:	6b63      	ldr	r3, [r4, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8015932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8015936:	d069      	beq.n	8015a0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8015938:	6823      	ldr	r3, [r4, #0]
 801593a:	f013 0f20 	tst.w	r3, #32
 801593e:	f040 80e5 	bne.w	8015b0c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8015942:	6823      	ldr	r3, [r4, #0]
 8015944:	f013 0f10 	tst.w	r3, #16
 8015948:	f000 8147 	beq.w	8015bda <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801594c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8015950:	4ba4      	ldr	r3, [pc, #656]	; (8015be4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8015952:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8015954:	2000      	movs	r0, #0
}
 8015956:	b003      	add	sp, #12
 8015958:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 801595a:	4ba3      	ldr	r3, [pc, #652]	; (8015be8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 801595c:	2200      	movs	r2, #0
 801595e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8015960:	f7fd f860 	bl	8012a24 <HAL_GetTick>
 8015964:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8015966:	4b9e      	ldr	r3, [pc, #632]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 801596e:	d006      	beq.n	801597e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8015970:	f7fd f858 	bl	8012a24 <HAL_GetTick>
 8015974:	1b40      	subs	r0, r0, r5
 8015976:	2802      	cmp	r0, #2
 8015978:	d9f5      	bls.n	8015966 <HAL_RCCEx_PeriphCLKConfig+0x86>
        return HAL_TIMEOUT;
 801597a:	2003      	movs	r0, #3
 801597c:	e7eb      	b.n	8015956 <HAL_RCCEx_PeriphCLKConfig+0x76>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 801597e:	6823      	ldr	r3, [r4, #0]
 8015980:	f013 0f01 	tst.w	r3, #1
 8015984:	d007      	beq.n	8015996 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8015986:	6862      	ldr	r2, [r4, #4]
 8015988:	68a3      	ldr	r3, [r4, #8]
 801598a:	071b      	lsls	r3, r3, #28
 801598c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8015990:	4a93      	ldr	r2, [pc, #588]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015992:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8015996:	6823      	ldr	r3, [r4, #0]
 8015998:	f013 0f02 	tst.w	r3, #2
 801599c:	d015      	beq.n	80159ca <HAL_RCCEx_PeriphCLKConfig+0xea>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801599e:	4a90      	ldr	r2, [pc, #576]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80159a0:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80159a4:	6860      	ldr	r0, [r4, #4]
 80159a6:	68e3      	ldr	r3, [r4, #12]
 80159a8:	061b      	lsls	r3, r3, #24
 80159aa:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80159ae:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 80159b2:	430b      	orrs	r3, r1
 80159b4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80159b8:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80159bc:	f023 031f 	bic.w	r3, r3, #31
 80159c0:	6a21      	ldr	r1, [r4, #32]
 80159c2:	3901      	subs	r1, #1
 80159c4:	430b      	orrs	r3, r1
 80159c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80159ca:	6823      	ldr	r3, [r4, #0]
 80159cc:	f013 0f40 	tst.w	r3, #64	; 0x40
 80159d0:	d00a      	beq.n	80159e8 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80159d2:	6862      	ldr	r2, [r4, #4]
 80159d4:	68e3      	ldr	r3, [r4, #12]
 80159d6:	061b      	lsls	r3, r3, #24
 80159d8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80159dc:	68a2      	ldr	r2, [r4, #8]
 80159de:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80159e2:	4a7f      	ldr	r2, [pc, #508]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80159e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80159e8:	4b7f      	ldr	r3, [pc, #508]	; (8015be8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80159ea:	2201      	movs	r2, #1
 80159ec:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80159ee:	f7fd f819 	bl	8012a24 <HAL_GetTick>
 80159f2:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80159f4:	4b7a      	ldr	r3, [pc, #488]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80159fc:	d191      	bne.n	8015922 <HAL_RCCEx_PeriphCLKConfig+0x42>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80159fe:	f7fd f811 	bl	8012a24 <HAL_GetTick>
 8015a02:	1b40      	subs	r0, r0, r5
 8015a04:	2802      	cmp	r0, #2
 8015a06:	d9f5      	bls.n	80159f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        return HAL_TIMEOUT;
 8015a08:	2003      	movs	r0, #3
 8015a0a:	e7a4      	b.n	8015956 <HAL_RCCEx_PeriphCLKConfig+0x76>
    __HAL_RCC_PLLSAI_DISABLE();
 8015a0c:	4b77      	ldr	r3, [pc, #476]	; (8015bec <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8015a0e:	2200      	movs	r2, #0
 8015a10:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8015a12:	f7fd f807 	bl	8012a24 <HAL_GetTick>
 8015a16:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8015a18:	4b71      	ldr	r3, [pc, #452]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8015a20:	d006      	beq.n	8015a30 <HAL_RCCEx_PeriphCLKConfig+0x150>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8015a22:	f7fc ffff 	bl	8012a24 <HAL_GetTick>
 8015a26:	1b40      	subs	r0, r0, r5
 8015a28:	2802      	cmp	r0, #2
 8015a2a:	d9f5      	bls.n	8015a18 <HAL_RCCEx_PeriphCLKConfig+0x138>
        return HAL_TIMEOUT;
 8015a2c:	2003      	movs	r0, #3
 8015a2e:	e792      	b.n	8015956 <HAL_RCCEx_PeriphCLKConfig+0x76>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8015a30:	6823      	ldr	r3, [r4, #0]
 8015a32:	f013 0f04 	tst.w	r3, #4
 8015a36:	d01b      	beq.n	8015a70 <HAL_RCCEx_PeriphCLKConfig+0x190>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8015a38:	4a69      	ldr	r2, [pc, #420]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015a3a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8015a3e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8015a42:	6920      	ldr	r0, [r4, #16]
 8015a44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015a48:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8015a4c:	69a0      	ldr	r0, [r4, #24]
 8015a4e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8015a52:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8015a56:	430b      	orrs	r3, r1
 8015a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8015a5c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8015a60:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8015a64:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015a66:	3901      	subs	r1, #1
 8015a68:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8015a6c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8015a70:	6823      	ldr	r3, [r4, #0]
 8015a72:	f013 0f08 	tst.w	r3, #8
 8015a76:	d019      	beq.n	8015aac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8015a78:	4a59      	ldr	r2, [pc, #356]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015a7a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8015a7e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8015a82:	6920      	ldr	r0, [r4, #16]
 8015a84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8015a88:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8015a8c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8015a90:	430b      	orrs	r3, r1
 8015a92:	69e1      	ldr	r1, [r4, #28]
 8015a94:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8015a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8015a9c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8015aa0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8015aa4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015aa6:	430b      	orrs	r3, r1
 8015aa8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8015aac:	6823      	ldr	r3, [r4, #0]
 8015aae:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015ab2:	d003      	beq.n	8015abc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8015ab4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8015ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8015aba:	d012      	beq.n	8015ae2 <HAL_RCCEx_PeriphCLKConfig+0x202>
    __HAL_RCC_PLLSAI_ENABLE();
 8015abc:	4b4b      	ldr	r3, [pc, #300]	; (8015bec <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8015abe:	2201      	movs	r2, #1
 8015ac0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8015ac2:	f7fc ffaf 	bl	8012a24 <HAL_GetTick>
 8015ac6:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8015ac8:	4b45      	ldr	r3, [pc, #276]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8015ad0:	f47f af32 	bne.w	8015938 <HAL_RCCEx_PeriphCLKConfig+0x58>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8015ad4:	f7fc ffa6 	bl	8012a24 <HAL_GetTick>
 8015ad8:	1b40      	subs	r0, r0, r5
 8015ada:	2802      	cmp	r0, #2
 8015adc:	d9f4      	bls.n	8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        return HAL_TIMEOUT;
 8015ade:	2003      	movs	r0, #3
 8015ae0:	e739      	b.n	8015956 <HAL_RCCEx_PeriphCLKConfig+0x76>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8015ae2:	4a3f      	ldr	r2, [pc, #252]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015ae4:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8015ae8:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8015aec:	6925      	ldr	r5, [r4, #16]
 8015aee:	6963      	ldr	r3, [r4, #20]
 8015af0:	085b      	lsrs	r3, r3, #1
 8015af2:	3b01      	subs	r3, #1
 8015af4:	041b      	lsls	r3, r3, #16
 8015af6:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8015afa:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8015afe:	4303      	orrs	r3, r0
 8015b00:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8015b04:	430b      	orrs	r3, r1
 8015b06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8015b0a:	e7d7      	b.n	8015abc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    __HAL_RCC_PWR_CLK_ENABLE();
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	9301      	str	r3, [sp, #4]
 8015b10:	4b33      	ldr	r3, [pc, #204]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015b12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015b14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8015b18:	641a      	str	r2, [r3, #64]	; 0x40
 8015b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015b20:	9301      	str	r3, [sp, #4]
 8015b22:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8015b24:	4a32      	ldr	r2, [pc, #200]	; (8015bf0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8015b26:	6813      	ldr	r3, [r2, #0]
 8015b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015b2c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8015b2e:	f7fc ff79 	bl	8012a24 <HAL_GetTick>
 8015b32:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8015b34:	4b2e      	ldr	r3, [pc, #184]	; (8015bf0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	f413 7f80 	tst.w	r3, #256	; 0x100
 8015b3c:	d106      	bne.n	8015b4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8015b3e:	f7fc ff71 	bl	8012a24 <HAL_GetTick>
 8015b42:	1b40      	subs	r0, r0, r5
 8015b44:	2802      	cmp	r0, #2
 8015b46:	d9f5      	bls.n	8015b34 <HAL_RCCEx_PeriphCLKConfig+0x254>
        return HAL_TIMEOUT;
 8015b48:	2003      	movs	r0, #3
 8015b4a:	e704      	b.n	8015956 <HAL_RCCEx_PeriphCLKConfig+0x76>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8015b4c:	4b24      	ldr	r3, [pc, #144]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015b4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8015b50:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8015b54:	d012      	beq.n	8015b7c <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8015b56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015b58:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8015b5c:	429a      	cmp	r2, r3
 8015b5e:	d00d      	beq.n	8015b7c <HAL_RCCEx_PeriphCLKConfig+0x29c>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8015b60:	4b1f      	ldr	r3, [pc, #124]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015b62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015b64:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8015b68:	4922      	ldr	r1, [pc, #136]	; (8015bf4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8015b6a:	2001      	movs	r0, #1
 8015b6c:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8015b6e:	2000      	movs	r0, #0
 8015b70:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8015b72:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8015b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b76:	f013 0f01 	tst.w	r3, #1
 8015b7a:	d112      	bne.n	8015ba2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015b7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015b7e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8015b82:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8015b86:	d01d      	beq.n	8015bc4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8015b88:	4a15      	ldr	r2, [pc, #84]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015b8a:	6893      	ldr	r3, [r2, #8]
 8015b8c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8015b90:	6093      	str	r3, [r2, #8]
 8015b92:	4913      	ldr	r1, [pc, #76]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015b94:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8015b96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015b98:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8015b9c:	4313      	orrs	r3, r2
 8015b9e:	670b      	str	r3, [r1, #112]	; 0x70
 8015ba0:	e6cf      	b.n	8015942 <HAL_RCCEx_PeriphCLKConfig+0x62>
        tickstart = HAL_GetTick();
 8015ba2:	f7fc ff3f 	bl	8012a24 <HAL_GetTick>
 8015ba6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015ba8:	4b0d      	ldr	r3, [pc, #52]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015bac:	f013 0f02 	tst.w	r3, #2
 8015bb0:	d1e4      	bne.n	8015b7c <HAL_RCCEx_PeriphCLKConfig+0x29c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015bb2:	f7fc ff37 	bl	8012a24 <HAL_GetTick>
 8015bb6:	1b40      	subs	r0, r0, r5
 8015bb8:	f241 3388 	movw	r3, #5000	; 0x1388
 8015bbc:	4298      	cmp	r0, r3
 8015bbe:	d9f3      	bls.n	8015ba8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
            return HAL_TIMEOUT;
 8015bc0:	2003      	movs	r0, #3
 8015bc2:	e6c8      	b.n	8015956 <HAL_RCCEx_PeriphCLKConfig+0x76>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015bc4:	4906      	ldr	r1, [pc, #24]	; (8015be0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015bc6:	688a      	ldr	r2, [r1, #8]
 8015bc8:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8015bcc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015bd4:	4313      	orrs	r3, r2
 8015bd6:	608b      	str	r3, [r1, #8]
 8015bd8:	e7db      	b.n	8015b92 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
  return HAL_OK;
 8015bda:	2000      	movs	r0, #0
 8015bdc:	e6bb      	b.n	8015956 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8015bde:	bf00      	nop
 8015be0:	40023800 	.word	0x40023800
 8015be4:	424711e0 	.word	0x424711e0
 8015be8:	42470068 	.word	0x42470068
 8015bec:	42470070 	.word	0x42470070
 8015bf0:	40007000 	.word	0x40007000
 8015bf4:	42470e40 	.word	0x42470e40

08015bf8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8015bf8:	b570      	push	{r4, r5, r6, lr}
 8015bfa:	b082      	sub	sp, #8
 8015bfc:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8015bfe:	6803      	ldr	r3, [r0, #0]
 8015c00:	f013 0f01 	tst.w	r3, #1
 8015c04:	d03b      	beq.n	8015c7e <HAL_RCC_OscConfig+0x86>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8015c06:	4ba7      	ldr	r3, [pc, #668]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015c08:	689b      	ldr	r3, [r3, #8]
 8015c0a:	f003 030c 	and.w	r3, r3, #12
 8015c0e:	2b04      	cmp	r3, #4
 8015c10:	d02c      	beq.n	8015c6c <HAL_RCC_OscConfig+0x74>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015c12:	4ba4      	ldr	r3, [pc, #656]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015c14:	689b      	ldr	r3, [r3, #8]
 8015c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8015c1a:	2b08      	cmp	r3, #8
 8015c1c:	d021      	beq.n	8015c62 <HAL_RCC_OscConfig+0x6a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015c1e:	6863      	ldr	r3, [r4, #4]
 8015c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015c24:	d04f      	beq.n	8015cc6 <HAL_RCC_OscConfig+0xce>
 8015c26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015c2a:	d052      	beq.n	8015cd2 <HAL_RCC_OscConfig+0xda>
 8015c2c:	4b9d      	ldr	r3, [pc, #628]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015c2e:	681a      	ldr	r2, [r3, #0]
 8015c30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8015c34:	601a      	str	r2, [r3, #0]
 8015c36:	681a      	ldr	r2, [r3, #0]
 8015c38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8015c3c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8015c3e:	6863      	ldr	r3, [r4, #4]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d050      	beq.n	8015ce6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015c44:	f7fc feee 	bl	8012a24 <HAL_GetTick>
 8015c48:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8015c4a:	4b96      	ldr	r3, [pc, #600]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8015c52:	d114      	bne.n	8015c7e <HAL_RCC_OscConfig+0x86>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015c54:	f7fc fee6 	bl	8012a24 <HAL_GetTick>
 8015c58:	1b40      	subs	r0, r0, r5
 8015c5a:	2864      	cmp	r0, #100	; 0x64
 8015c5c:	d9f5      	bls.n	8015c4a <HAL_RCC_OscConfig+0x52>
          {
            return HAL_TIMEOUT;
 8015c5e:	2003      	movs	r0, #3
 8015c60:	e18a      	b.n	8015f78 <HAL_RCC_OscConfig+0x380>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8015c62:	4b90      	ldr	r3, [pc, #576]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015c64:	685b      	ldr	r3, [r3, #4]
 8015c66:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8015c6a:	d0d8      	beq.n	8015c1e <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8015c6c:	4b8d      	ldr	r3, [pc, #564]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015c6e:	681b      	ldr	r3, [r3, #0]
 8015c70:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8015c74:	d003      	beq.n	8015c7e <HAL_RCC_OscConfig+0x86>
 8015c76:	6863      	ldr	r3, [r4, #4]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	f000 817a 	beq.w	8015f72 <HAL_RCC_OscConfig+0x37a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8015c7e:	6823      	ldr	r3, [r4, #0]
 8015c80:	f013 0f02 	tst.w	r3, #2
 8015c84:	d055      	beq.n	8015d32 <HAL_RCC_OscConfig+0x13a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8015c86:	4b87      	ldr	r3, [pc, #540]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015c88:	689b      	ldr	r3, [r3, #8]
 8015c8a:	f013 0f0c 	tst.w	r3, #12
 8015c8e:	d03e      	beq.n	8015d0e <HAL_RCC_OscConfig+0x116>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8015c90:	4b84      	ldr	r3, [pc, #528]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015c92:	689b      	ldr	r3, [r3, #8]
 8015c94:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8015c98:	2b08      	cmp	r3, #8
 8015c9a:	d033      	beq.n	8015d04 <HAL_RCC_OscConfig+0x10c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8015c9c:	68e3      	ldr	r3, [r4, #12]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d068      	beq.n	8015d74 <HAL_RCC_OscConfig+0x17c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8015ca2:	4b81      	ldr	r3, [pc, #516]	; (8015ea8 <HAL_RCC_OscConfig+0x2b0>)
 8015ca4:	2201      	movs	r2, #1
 8015ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015ca8:	f7fc febc 	bl	8012a24 <HAL_GetTick>
 8015cac:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8015cae:	4b7d      	ldr	r3, [pc, #500]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	f013 0f02 	tst.w	r3, #2
 8015cb6:	d154      	bne.n	8015d62 <HAL_RCC_OscConfig+0x16a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015cb8:	f7fc feb4 	bl	8012a24 <HAL_GetTick>
 8015cbc:	1b40      	subs	r0, r0, r5
 8015cbe:	2802      	cmp	r0, #2
 8015cc0:	d9f5      	bls.n	8015cae <HAL_RCC_OscConfig+0xb6>
          {
            return HAL_TIMEOUT;
 8015cc2:	2003      	movs	r0, #3
 8015cc4:	e158      	b.n	8015f78 <HAL_RCC_OscConfig+0x380>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8015cc6:	4a77      	ldr	r2, [pc, #476]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015cc8:	6813      	ldr	r3, [r2, #0]
 8015cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015cce:	6013      	str	r3, [r2, #0]
 8015cd0:	e7b5      	b.n	8015c3e <HAL_RCC_OscConfig+0x46>
 8015cd2:	4b74      	ldr	r3, [pc, #464]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015cd4:	681a      	ldr	r2, [r3, #0]
 8015cd6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8015cda:	601a      	str	r2, [r3, #0]
 8015cdc:	681a      	ldr	r2, [r3, #0]
 8015cde:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8015ce2:	601a      	str	r2, [r3, #0]
 8015ce4:	e7ab      	b.n	8015c3e <HAL_RCC_OscConfig+0x46>
        tickstart = HAL_GetTick();
 8015ce6:	f7fc fe9d 	bl	8012a24 <HAL_GetTick>
 8015cea:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8015cec:	4b6d      	ldr	r3, [pc, #436]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8015cf4:	d0c3      	beq.n	8015c7e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8015cf6:	f7fc fe95 	bl	8012a24 <HAL_GetTick>
 8015cfa:	1b40      	subs	r0, r0, r5
 8015cfc:	2864      	cmp	r0, #100	; 0x64
 8015cfe:	d9f5      	bls.n	8015cec <HAL_RCC_OscConfig+0xf4>
            return HAL_TIMEOUT;
 8015d00:	2003      	movs	r0, #3
 8015d02:	e139      	b.n	8015f78 <HAL_RCC_OscConfig+0x380>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8015d04:	4b67      	ldr	r3, [pc, #412]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015d06:	685b      	ldr	r3, [r3, #4]
 8015d08:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8015d0c:	d1c6      	bne.n	8015c9c <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8015d0e:	4b65      	ldr	r3, [pc, #404]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	f013 0f02 	tst.w	r3, #2
 8015d16:	d004      	beq.n	8015d22 <HAL_RCC_OscConfig+0x12a>
 8015d18:	68e3      	ldr	r3, [r4, #12]
 8015d1a:	2b01      	cmp	r3, #1
 8015d1c:	d001      	beq.n	8015d22 <HAL_RCC_OscConfig+0x12a>
        return HAL_ERROR;
 8015d1e:	2001      	movs	r0, #1
 8015d20:	e12a      	b.n	8015f78 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015d22:	4a60      	ldr	r2, [pc, #384]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015d24:	6813      	ldr	r3, [r2, #0]
 8015d26:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8015d2a:	6921      	ldr	r1, [r4, #16]
 8015d2c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8015d30:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015d32:	6823      	ldr	r3, [r4, #0]
 8015d34:	f013 0f08 	tst.w	r3, #8
 8015d38:	d040      	beq.n	8015dbc <HAL_RCC_OscConfig+0x1c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8015d3a:	6963      	ldr	r3, [r4, #20]
 8015d3c:	b363      	cbz	r3, 8015d98 <HAL_RCC_OscConfig+0x1a0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8015d3e:	4b5b      	ldr	r3, [pc, #364]	; (8015eac <HAL_RCC_OscConfig+0x2b4>)
 8015d40:	2201      	movs	r2, #1
 8015d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015d44:	f7fc fe6e 	bl	8012a24 <HAL_GetTick>
 8015d48:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8015d4a:	4b56      	ldr	r3, [pc, #344]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d4e:	f013 0f02 	tst.w	r3, #2
 8015d52:	d133      	bne.n	8015dbc <HAL_RCC_OscConfig+0x1c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015d54:	f7fc fe66 	bl	8012a24 <HAL_GetTick>
 8015d58:	1b40      	subs	r0, r0, r5
 8015d5a:	2802      	cmp	r0, #2
 8015d5c:	d9f5      	bls.n	8015d4a <HAL_RCC_OscConfig+0x152>
        {
          return HAL_TIMEOUT;
 8015d5e:	2003      	movs	r0, #3
 8015d60:	e10a      	b.n	8015f78 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8015d62:	4a50      	ldr	r2, [pc, #320]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015d64:	6813      	ldr	r3, [r2, #0]
 8015d66:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8015d6a:	6921      	ldr	r1, [r4, #16]
 8015d6c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8015d70:	6013      	str	r3, [r2, #0]
 8015d72:	e7de      	b.n	8015d32 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8015d74:	4b4c      	ldr	r3, [pc, #304]	; (8015ea8 <HAL_RCC_OscConfig+0x2b0>)
 8015d76:	2200      	movs	r2, #0
 8015d78:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8015d7a:	f7fc fe53 	bl	8012a24 <HAL_GetTick>
 8015d7e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8015d80:	4b48      	ldr	r3, [pc, #288]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015d82:	681b      	ldr	r3, [r3, #0]
 8015d84:	f013 0f02 	tst.w	r3, #2
 8015d88:	d0d3      	beq.n	8015d32 <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015d8a:	f7fc fe4b 	bl	8012a24 <HAL_GetTick>
 8015d8e:	1b40      	subs	r0, r0, r5
 8015d90:	2802      	cmp	r0, #2
 8015d92:	d9f5      	bls.n	8015d80 <HAL_RCC_OscConfig+0x188>
            return HAL_TIMEOUT;
 8015d94:	2003      	movs	r0, #3
 8015d96:	e0ef      	b.n	8015f78 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8015d98:	4b44      	ldr	r3, [pc, #272]	; (8015eac <HAL_RCC_OscConfig+0x2b4>)
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015d9e:	f7fc fe41 	bl	8012a24 <HAL_GetTick>
 8015da2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8015da4:	4b3f      	ldr	r3, [pc, #252]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015da8:	f013 0f02 	tst.w	r3, #2
 8015dac:	d006      	beq.n	8015dbc <HAL_RCC_OscConfig+0x1c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8015dae:	f7fc fe39 	bl	8012a24 <HAL_GetTick>
 8015db2:	1b40      	subs	r0, r0, r5
 8015db4:	2802      	cmp	r0, #2
 8015db6:	d9f5      	bls.n	8015da4 <HAL_RCC_OscConfig+0x1ac>
        {
          return HAL_TIMEOUT;
 8015db8:	2003      	movs	r0, #3
 8015dba:	e0dd      	b.n	8015f78 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015dbc:	6823      	ldr	r3, [r4, #0]
 8015dbe:	f013 0f04 	tst.w	r3, #4
 8015dc2:	d078      	beq.n	8015eb6 <HAL_RCC_OscConfig+0x2be>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8015dc4:	4b37      	ldr	r3, [pc, #220]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015dc8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8015dcc:	d133      	bne.n	8015e36 <HAL_RCC_OscConfig+0x23e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8015dce:	2300      	movs	r3, #0
 8015dd0:	9301      	str	r3, [sp, #4]
 8015dd2:	4b34      	ldr	r3, [pc, #208]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015dd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015dd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8015dda:	641a      	str	r2, [r3, #64]	; 0x40
 8015ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015de2:	9301      	str	r3, [sp, #4]
 8015de4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8015de6:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015de8:	4b31      	ldr	r3, [pc, #196]	; (8015eb0 <HAL_RCC_OscConfig+0x2b8>)
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	f413 7f80 	tst.w	r3, #256	; 0x100
 8015df0:	d023      	beq.n	8015e3a <HAL_RCC_OscConfig+0x242>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015df2:	68a3      	ldr	r3, [r4, #8]
 8015df4:	2b01      	cmp	r3, #1
 8015df6:	d034      	beq.n	8015e62 <HAL_RCC_OscConfig+0x26a>
 8015df8:	2b05      	cmp	r3, #5
 8015dfa:	d038      	beq.n	8015e6e <HAL_RCC_OscConfig+0x276>
 8015dfc:	4b29      	ldr	r3, [pc, #164]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015dfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015e00:	f022 0201 	bic.w	r2, r2, #1
 8015e04:	671a      	str	r2, [r3, #112]	; 0x70
 8015e06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015e08:	f022 0204 	bic.w	r2, r2, #4
 8015e0c:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8015e0e:	68a3      	ldr	r3, [r4, #8]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d036      	beq.n	8015e82 <HAL_RCC_OscConfig+0x28a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015e14:	f7fc fe06 	bl	8012a24 <HAL_GetTick>
 8015e18:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8015e1a:	4b22      	ldr	r3, [pc, #136]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e1e:	f013 0f02 	tst.w	r3, #2
 8015e22:	d147      	bne.n	8015eb4 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015e24:	f7fc fdfe 	bl	8012a24 <HAL_GetTick>
 8015e28:	1b80      	subs	r0, r0, r6
 8015e2a:	f241 3388 	movw	r3, #5000	; 0x1388
 8015e2e:	4298      	cmp	r0, r3
 8015e30:	d9f3      	bls.n	8015e1a <HAL_RCC_OscConfig+0x222>
        {
          return HAL_TIMEOUT;
 8015e32:	2003      	movs	r0, #3
 8015e34:	e0a0      	b.n	8015f78 <HAL_RCC_OscConfig+0x380>
    FlagStatus       pwrclkchanged = RESET;
 8015e36:	2500      	movs	r5, #0
 8015e38:	e7d6      	b.n	8015de8 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8015e3a:	4a1d      	ldr	r2, [pc, #116]	; (8015eb0 <HAL_RCC_OscConfig+0x2b8>)
 8015e3c:	6813      	ldr	r3, [r2, #0]
 8015e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015e42:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8015e44:	f7fc fdee 	bl	8012a24 <HAL_GetTick>
 8015e48:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8015e4a:	4b19      	ldr	r3, [pc, #100]	; (8015eb0 <HAL_RCC_OscConfig+0x2b8>)
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8015e52:	d1ce      	bne.n	8015df2 <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015e54:	f7fc fde6 	bl	8012a24 <HAL_GetTick>
 8015e58:	1b80      	subs	r0, r0, r6
 8015e5a:	2802      	cmp	r0, #2
 8015e5c:	d9f5      	bls.n	8015e4a <HAL_RCC_OscConfig+0x252>
          return HAL_TIMEOUT;
 8015e5e:	2003      	movs	r0, #3
 8015e60:	e08a      	b.n	8015f78 <HAL_RCC_OscConfig+0x380>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8015e62:	4a10      	ldr	r2, [pc, #64]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015e64:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8015e66:	f043 0301 	orr.w	r3, r3, #1
 8015e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8015e6c:	e7cf      	b.n	8015e0e <HAL_RCC_OscConfig+0x216>
 8015e6e:	4b0d      	ldr	r3, [pc, #52]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015e70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015e72:	f042 0204 	orr.w	r2, r2, #4
 8015e76:	671a      	str	r2, [r3, #112]	; 0x70
 8015e78:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015e7a:	f042 0201 	orr.w	r2, r2, #1
 8015e7e:	671a      	str	r2, [r3, #112]	; 0x70
 8015e80:	e7c5      	b.n	8015e0e <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015e82:	f7fc fdcf 	bl	8012a24 <HAL_GetTick>
 8015e86:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8015e88:	4b06      	ldr	r3, [pc, #24]	; (8015ea4 <HAL_RCC_OscConfig+0x2ac>)
 8015e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015e8c:	f013 0f02 	tst.w	r3, #2
 8015e90:	d010      	beq.n	8015eb4 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015e92:	f7fc fdc7 	bl	8012a24 <HAL_GetTick>
 8015e96:	1b80      	subs	r0, r0, r6
 8015e98:	f241 3388 	movw	r3, #5000	; 0x1388
 8015e9c:	4298      	cmp	r0, r3
 8015e9e:	d9f3      	bls.n	8015e88 <HAL_RCC_OscConfig+0x290>
        {
          return HAL_TIMEOUT;
 8015ea0:	2003      	movs	r0, #3
 8015ea2:	e069      	b.n	8015f78 <HAL_RCC_OscConfig+0x380>
 8015ea4:	40023800 	.word	0x40023800
 8015ea8:	42470000 	.word	0x42470000
 8015eac:	42470e80 	.word	0x42470e80
 8015eb0:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8015eb4:	b9e5      	cbnz	r5, 8015ef0 <HAL_RCC_OscConfig+0x2f8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8015eb6:	69a3      	ldr	r3, [r4, #24]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d05c      	beq.n	8015f76 <HAL_RCC_OscConfig+0x37e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8015ebc:	4a30      	ldr	r2, [pc, #192]	; (8015f80 <HAL_RCC_OscConfig+0x388>)
 8015ebe:	6892      	ldr	r2, [r2, #8]
 8015ec0:	f002 020c 	and.w	r2, r2, #12
 8015ec4:	2a08      	cmp	r2, #8
 8015ec6:	d059      	beq.n	8015f7c <HAL_RCC_OscConfig+0x384>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8015ec8:	2b02      	cmp	r3, #2
 8015eca:	d017      	beq.n	8015efc <HAL_RCC_OscConfig+0x304>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8015ecc:	4b2d      	ldr	r3, [pc, #180]	; (8015f84 <HAL_RCC_OscConfig+0x38c>)
 8015ece:	2200      	movs	r2, #0
 8015ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015ed2:	f7fc fda7 	bl	8012a24 <HAL_GetTick>
 8015ed6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015ed8:	4b29      	ldr	r3, [pc, #164]	; (8015f80 <HAL_RCC_OscConfig+0x388>)
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8015ee0:	d045      	beq.n	8015f6e <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015ee2:	f7fc fd9f 	bl	8012a24 <HAL_GetTick>
 8015ee6:	1b00      	subs	r0, r0, r4
 8015ee8:	2802      	cmp	r0, #2
 8015eea:	d9f5      	bls.n	8015ed8 <HAL_RCC_OscConfig+0x2e0>
          {
            return HAL_TIMEOUT;
 8015eec:	2003      	movs	r0, #3
 8015eee:	e043      	b.n	8015f78 <HAL_RCC_OscConfig+0x380>
      __HAL_RCC_PWR_CLK_DISABLE();
 8015ef0:	4a23      	ldr	r2, [pc, #140]	; (8015f80 <HAL_RCC_OscConfig+0x388>)
 8015ef2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8015ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8015ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8015efa:	e7dc      	b.n	8015eb6 <HAL_RCC_OscConfig+0x2be>
        __HAL_RCC_PLL_DISABLE();
 8015efc:	4b21      	ldr	r3, [pc, #132]	; (8015f84 <HAL_RCC_OscConfig+0x38c>)
 8015efe:	2200      	movs	r2, #0
 8015f00:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8015f02:	f7fc fd8f 	bl	8012a24 <HAL_GetTick>
 8015f06:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8015f08:	4b1d      	ldr	r3, [pc, #116]	; (8015f80 <HAL_RCC_OscConfig+0x388>)
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8015f10:	d006      	beq.n	8015f20 <HAL_RCC_OscConfig+0x328>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015f12:	f7fc fd87 	bl	8012a24 <HAL_GetTick>
 8015f16:	1b40      	subs	r0, r0, r5
 8015f18:	2802      	cmp	r0, #2
 8015f1a:	d9f5      	bls.n	8015f08 <HAL_RCC_OscConfig+0x310>
            return HAL_TIMEOUT;
 8015f1c:	2003      	movs	r0, #3
 8015f1e:	e02b      	b.n	8015f78 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8015f20:	69e3      	ldr	r3, [r4, #28]
 8015f22:	6a22      	ldr	r2, [r4, #32]
 8015f24:	4313      	orrs	r3, r2
 8015f26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8015f28:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8015f2c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8015f2e:	0852      	lsrs	r2, r2, #1
 8015f30:	3a01      	subs	r2, #1
 8015f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015f36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015f38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8015f3c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8015f3e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8015f42:	4a0f      	ldr	r2, [pc, #60]	; (8015f80 <HAL_RCC_OscConfig+0x388>)
 8015f44:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8015f46:	4b0f      	ldr	r3, [pc, #60]	; (8015f84 <HAL_RCC_OscConfig+0x38c>)
 8015f48:	2201      	movs	r2, #1
 8015f4a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8015f4c:	f7fc fd6a 	bl	8012a24 <HAL_GetTick>
 8015f50:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8015f52:	4b0b      	ldr	r3, [pc, #44]	; (8015f80 <HAL_RCC_OscConfig+0x388>)
 8015f54:	681b      	ldr	r3, [r3, #0]
 8015f56:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8015f5a:	d106      	bne.n	8015f6a <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8015f5c:	f7fc fd62 	bl	8012a24 <HAL_GetTick>
 8015f60:	1b00      	subs	r0, r0, r4
 8015f62:	2802      	cmp	r0, #2
 8015f64:	d9f5      	bls.n	8015f52 <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8015f66:	2003      	movs	r0, #3
 8015f68:	e006      	b.n	8015f78 <HAL_RCC_OscConfig+0x380>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8015f6a:	2000      	movs	r0, #0
 8015f6c:	e004      	b.n	8015f78 <HAL_RCC_OscConfig+0x380>
 8015f6e:	2000      	movs	r0, #0
 8015f70:	e002      	b.n	8015f78 <HAL_RCC_OscConfig+0x380>
        return HAL_ERROR;
 8015f72:	2001      	movs	r0, #1
 8015f74:	e000      	b.n	8015f78 <HAL_RCC_OscConfig+0x380>
  return HAL_OK;
 8015f76:	2000      	movs	r0, #0
}
 8015f78:	b002      	add	sp, #8
 8015f7a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8015f7c:	2001      	movs	r0, #1
 8015f7e:	e7fb      	b.n	8015f78 <HAL_RCC_OscConfig+0x380>
 8015f80:	40023800 	.word	0x40023800
 8015f84:	42470060 	.word	0x42470060

08015f88 <SAI_Disable>:
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7U/1000U);
 8015f88:	4b0e      	ldr	r3, [pc, #56]	; (8015fc4 <SAI_Disable+0x3c>)
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	4a0e      	ldr	r2, [pc, #56]	; (8015fc8 <SAI_Disable+0x40>)
 8015f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8015f92:	0b1b      	lsrs	r3, r3, #12
 8015f94:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8015f96:	6801      	ldr	r1, [r0, #0]
 8015f98:	680a      	ldr	r2, [r1, #0]
 8015f9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8015f9e:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8015fa0:	1e5a      	subs	r2, r3, #1
 8015fa2:	b13b      	cbz	r3, 8015fb4 <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8015fa4:	6803      	ldr	r3, [r0, #0]
 8015fa6:	6819      	ldr	r1, [r3, #0]
    if (count-- == 0U)
 8015fa8:	4613      	mov	r3, r2
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8015faa:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8015fae:	d1f7      	bne.n	8015fa0 <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8015fb0:	2000      	movs	r0, #0

  return status;
}
 8015fb2:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8015fb4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8015fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015fbc:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
      status = HAL_TIMEOUT;
 8015fc0:	2003      	movs	r0, #3
      break;
 8015fc2:	4770      	bx	lr
 8015fc4:	2000005c 	.word	0x2000005c
 8015fc8:	95cbec1b 	.word	0x95cbec1b

08015fcc <HAL_SAI_Init>:
  if(hsai == NULL)
 8015fcc:	2800      	cmp	r0, #0
 8015fce:	f000 80ad 	beq.w	801612c <HAL_SAI_Init+0x160>
{
 8015fd2:	b570      	push	{r4, r5, r6, lr}
 8015fd4:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_RESET)
 8015fd6:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8015fda:	b19b      	cbz	r3, 8016004 <HAL_SAI_Init+0x38>
  hsai->State = HAL_SAI_STATE_BUSY;
 8015fdc:	2302      	movs	r3, #2
 8015fde:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  SAI_Disable(hsai);
 8015fe2:	4620      	mov	r0, r4
 8015fe4:	f7ff ffd0 	bl	8015f88 <SAI_Disable>
  SAI_BlockSynchroConfig(hsai);
 8015fe8:	4620      	mov	r0, r4
 8015fea:	f000 f8a7 	bl	801613c <SAI_BlockSynchroConfig>
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8015fee:	6a23      	ldr	r3, [r4, #32]
 8015ff0:	b96b      	cbnz	r3, 801600e <HAL_SAI_Init+0x42>
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8015ff2:	6863      	ldr	r3, [r4, #4]
 8015ff4:	b31b      	cbz	r3, 801603e <HAL_SAI_Init+0x72>
 8015ff6:	2b02      	cmp	r3, #2
 8015ff8:	d021      	beq.n	801603e <HAL_SAI_Init+0x72>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR: 0U;
 8015ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015ffc:	2b01      	cmp	r3, #1
 8015ffe:	d02e      	beq.n	801605e <HAL_SAI_Init+0x92>
 8016000:	2600      	movs	r6, #0
 8016002:	e021      	b.n	8016048 <HAL_SAI_Init+0x7c>
    hsai->Lock = HAL_UNLOCKED;
 8016004:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_SAI_MspInit(hsai);
 8016008:	f7fc f8cc 	bl	80121a4 <HAL_SAI_MspInit>
 801600c:	e7e6      	b.n	8015fdc <HAL_SAI_Init+0x10>
    freq = SAI_GetInputClock(hsai);
 801600e:	4620      	mov	r0, r4
 8016010:	f000 f8a4 	bl	801615c <SAI_GetInputClock>
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8016014:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016018:	0041      	lsls	r1, r0, #1
 801601a:	6a23      	ldr	r3, [r4, #32]
 801601c:	025b      	lsls	r3, r3, #9
 801601e:	fbb1 f1f3 	udiv	r1, r1, r3
    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8016022:	4b43      	ldr	r3, [pc, #268]	; (8016130 <HAL_SAI_Init+0x164>)
 8016024:	fba3 2301 	umull	r2, r3, r3, r1
 8016028:	08db      	lsrs	r3, r3, #3
 801602a:	6263      	str	r3, [r4, #36]	; 0x24
    if((tmpregisterGCR % 10U) > 8U)
 801602c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8016030:	0042      	lsls	r2, r0, #1
 8016032:	1a8a      	subs	r2, r1, r2
 8016034:	2a08      	cmp	r2, #8
 8016036:	d9dc      	bls.n	8015ff2 <HAL_SAI_Init+0x26>
      hsai->Init.Mckdiv+= 1U;
 8016038:	3301      	adds	r3, #1
 801603a:	6263      	str	r3, [r4, #36]	; 0x24
 801603c:	e7d9      	b.n	8015ff2 <HAL_SAI_Init+0x26>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U: SAI_xCR1_CKSTR;
 801603e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016040:	2b01      	cmp	r3, #1
 8016042:	d00a      	beq.n	801605a <HAL_SAI_Init+0x8e>
 8016044:	f44f 7600 	mov.w	r6, #512	; 0x200
  switch(hsai->Init.Synchro)
 8016048:	68a2      	ldr	r2, [r4, #8]
 801604a:	2a01      	cmp	r2, #1
 801604c:	d06b      	beq.n	8016126 <HAL_SAI_Init+0x15a>
 801604e:	b14a      	cbz	r2, 8016064 <HAL_SAI_Init+0x98>
 8016050:	2a03      	cmp	r2, #3
 8016052:	d807      	bhi.n	8016064 <HAL_SAI_Init+0x98>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8016054:	f44f 6000 	mov.w	r0, #2048	; 0x800
    break;
 8016058:	e005      	b.n	8016066 <HAL_SAI_Init+0x9a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U: SAI_xCR1_CKSTR;
 801605a:	2600      	movs	r6, #0
 801605c:	e7f4      	b.n	8016048 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR: 0U;
 801605e:	f44f 7600 	mov.w	r6, #512	; 0x200
 8016062:	e7f1      	b.n	8016048 <HAL_SAI_Init+0x7c>
  uint32_t syncen_bits = 0U;
 8016064:	2000      	movs	r0, #0
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8016066:	6821      	ldr	r1, [r4, #0]
 8016068:	680b      	ldr	r3, [r1, #0]
 801606a:	4a32      	ldr	r2, [pc, #200]	; (8016134 <HAL_SAI_Init+0x168>)
 801606c:	401a      	ands	r2, r3
 801606e:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8016070:	6821      	ldr	r1, [r4, #0]
 8016072:	680a      	ldr	r2, [r1, #0]
 8016074:	6863      	ldr	r3, [r4, #4]
 8016076:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8016078:	432b      	orrs	r3, r5
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 801607a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801607c:	432b      	orrs	r3, r5
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 801607e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8016080:	432b      	orrs	r3, r5
 8016082:	4333      	orrs	r3, r6
                          ckstr_bits | syncen_bits |                             \
 8016084:	4303      	orrs	r3, r0
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8016086:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8016088:	4303      	orrs	r3, r0
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 801608a:	6920      	ldr	r0, [r4, #16]
 801608c:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 801608e:	6960      	ldr	r0, [r4, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8016090:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8016092:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016094:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8016098:	4313      	orrs	r3, r2
 801609a:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 801609c:	6822      	ldr	r2, [r4, #0]
 801609e:	6853      	ldr	r3, [r2, #4]
 80160a0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80160a4:	f023 030f 	bic.w	r3, r3, #15
 80160a8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80160aa:	6821      	ldr	r1, [r4, #0]
 80160ac:	684a      	ldr	r2, [r1, #4]
 80160ae:	69a3      	ldr	r3, [r4, #24]
 80160b0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80160b2:	4303      	orrs	r3, r0
 80160b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80160b6:	4303      	orrs	r3, r0
 80160b8:	4313      	orrs	r3, r2
 80160ba:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80160bc:	6822      	ldr	r2, [r4, #0]
 80160be:	6891      	ldr	r1, [r2, #8]
 80160c0:	4b1d      	ldr	r3, [pc, #116]	; (8016138 <HAL_SAI_Init+0x16c>)
 80160c2:	400b      	ands	r3, r1
 80160c4:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 80160c6:	6820      	ldr	r0, [r4, #0]
 80160c8:	6882      	ldr	r2, [r0, #8]
 80160ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80160cc:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset     |
 80160ce:	6d61      	ldr	r1, [r4, #84]	; 0x54
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 80160d0:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 80160d2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                          hsai->FrameInit.FSOffset     |
 80160d4:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 80160d6:	6d21      	ldr	r1, [r4, #80]	; 0x50
                          hsai->FrameInit.FSDefinition |
 80160d8:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 80160da:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80160dc:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 80160de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 80160e2:	4313      	orrs	r3, r2
 80160e4:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 80160e6:	6822      	ldr	r2, [r4, #0]
 80160e8:	68d3      	ldr	r3, [r2, #12]
 80160ea:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 80160ee:	f023 030f 	bic.w	r3, r3, #15
 80160f2:	041b      	lsls	r3, r3, #16
 80160f4:	0c1b      	lsrs	r3, r3, #16
 80160f6:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80160f8:	6820      	ldr	r0, [r4, #0]
 80160fa:	68c2      	ldr	r2, [r0, #12]
 80160fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80160fe:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8016100:	430b      	orrs	r3, r1
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8016102:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8016104:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8016108:	6e21      	ldr	r1, [r4, #96]	; 0x60
 801610a:	3901      	subs	r1, #1
 801610c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8016110:	4313      	orrs	r3, r2
 8016112:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8016114:	2000      	movs	r0, #0
 8016116:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hsai->State= HAL_SAI_STATE_READY;
 801611a:	2301      	movs	r3, #1
 801611c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UNLOCK(hsai);
 8016120:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8016124:	bd70      	pop	{r4, r5, r6, pc}
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8016126:	f44f 6080 	mov.w	r0, #1024	; 0x400
 801612a:	e79c      	b.n	8016066 <HAL_SAI_Init+0x9a>
    return HAL_ERROR;
 801612c:	2001      	movs	r0, #1
}
 801612e:	4770      	bx	lr
 8016130:	cccccccd 	.word	0xcccccccd
 8016134:	ff05c010 	.word	0xff05c010
 8016138:	fff88000 	.word	0xfff88000

0801613c <SAI_BlockSynchroConfig>:
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 801613c:	68c3      	ldr	r3, [r0, #12]
 801613e:	2b01      	cmp	r3, #1
 8016140:	d007      	beq.n	8016152 <SAI_BlockSynchroConfig+0x16>
 8016142:	2b02      	cmp	r3, #2
 8016144:	d003      	beq.n	801614e <SAI_BlockSynchroConfig+0x12>
  {
  case SAI_SYNCEXT_DISABLE :
    tmpregisterGCR = 0U;
 8016146:	2200      	movs	r2, #0
    break;
  default:
    tmpregisterGCR = 0U;
    break;
  }
  SAI1->GCR = tmpregisterGCR;
 8016148:	4b03      	ldr	r3, [pc, #12]	; (8016158 <SAI_BlockSynchroConfig+0x1c>)
 801614a:	601a      	str	r2, [r3, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */ 
}
 801614c:	4770      	bx	lr
    tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 801614e:	2220      	movs	r2, #32
    break;
 8016150:	e7fa      	b.n	8016148 <SAI_BlockSynchroConfig+0xc>
    tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8016152:	2210      	movs	r2, #16
 8016154:	e7f8      	b.n	8016148 <SAI_BlockSynchroConfig+0xc>
 8016156:	bf00      	nop
 8016158:	40015800 	.word	0x40015800

0801615c <SAI_GetInputClock>:
  
  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));
 
  /* SAI Block clock source selection */
  if(hsai->Instance == SAI1_Block_A)
 801615c:	6802      	ldr	r2, [r0, #0]
 801615e:	4b2f      	ldr	r3, [pc, #188]	; (801621c <SAI_GetInputClock+0xc0>)
 8016160:	429a      	cmp	r2, r3
 8016162:	d02f      	beq.n	80161c4 <SAI_GetInputClock+0x68>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8016164:	4a2e      	ldr	r2, [pc, #184]	; (8016220 <SAI_GetInputClock+0xc4>)
 8016166:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 801616a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 801616e:	69c1      	ldr	r1, [r0, #28]
 8016170:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8016174:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  
  /* VCO Input Clock value calculation */
  if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8016178:	4b29      	ldr	r3, [pc, #164]	; (8016220 <SAI_GetInputClock+0xc4>)
 801617a:	685b      	ldr	r3, [r3, #4]
 801617c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8016180:	d12a      	bne.n	80161d8 <SAI_GetInputClock+0x7c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8016182:	4b27      	ldr	r3, [pc, #156]	; (8016220 <SAI_GetInputClock+0xc4>)
 8016184:	685a      	ldr	r2, [r3, #4]
 8016186:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801618a:	4b26      	ldr	r3, [pc, #152]	; (8016224 <SAI_GetInputClock+0xc8>)
 801618c:	fbb3 f3f2 	udiv	r3, r3, r2
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if(hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 8016190:	69c2      	ldr	r2, [r0, #28]
 8016192:	b34a      	cbz	r2, 80161e8 <SAI_GetInputClock+0x8c>
    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
    saiclocksource = saiclocksource/(tmpreg); 

  }
  else if(hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8016194:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8016198:	d13b      	bne.n	8016212 <SAI_GetInputClock+0xb6>
  {        
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 801619a:	4a21      	ldr	r2, [pc, #132]	; (8016220 <SAI_GetInputClock+0xc4>)
 801619c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 80161a0:	f3c1 6103 	ubfx	r1, r1, #24, #4
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg);
 80161a4:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 80161a8:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80161ac:	fb03 f000 	mul.w	r0, r3, r0
 80161b0:	fbb0 f0f1 	udiv	r0, r0, r1
    
    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U); 
 80161b4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80161b8:	f003 031f 	and.w	r3, r3, #31
 80161bc:	3301      	adds	r3, #1
    saiclocksource = saiclocksource/(tmpreg);
 80161be:	fbb0 f0f3 	udiv	r0, r0, r3
 80161c2:	4770      	bx	lr
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 80161c4:	4a16      	ldr	r2, [pc, #88]	; (8016220 <SAI_GetInputClock+0xc4>)
 80161c6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80161ca:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80161ce:	69c1      	ldr	r1, [r0, #28]
 80161d0:	430b      	orrs	r3, r1
 80161d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80161d6:	e7cf      	b.n	8016178 <SAI_GetInputClock+0x1c>
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80161d8:	4b11      	ldr	r3, [pc, #68]	; (8016220 <SAI_GetInputClock+0xc4>)
 80161da:	685a      	ldr	r2, [r3, #4]
 80161dc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80161e0:	4b11      	ldr	r3, [pc, #68]	; (8016228 <SAI_GetInputClock+0xcc>)
 80161e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80161e6:	e7d3      	b.n	8016190 <SAI_GetInputClock+0x34>
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80161e8:	4a0d      	ldr	r2, [pc, #52]	; (8016220 <SAI_GetInputClock+0xc4>)
 80161ea:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80161ee:	f3c1 6103 	ubfx	r1, r1, #24, #4
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg);
 80161f2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 80161f6:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80161fa:	fb03 f000 	mul.w	r0, r3, r0
 80161fe:	fbb0 f0f1 	udiv	r0, r0, r1
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8016202:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8016206:	f3c3 2304 	ubfx	r3, r3, #8, #5
 801620a:	3301      	adds	r3, #1
    saiclocksource = saiclocksource/(tmpreg); 
 801620c:	fbb0 f0f3 	udiv	r0, r0, r3
 8016210:	4770      	bx	lr
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 8016212:	4b06      	ldr	r3, [pc, #24]	; (801622c <SAI_GetInputClock+0xd0>)
 8016214:	2201      	movs	r2, #1
 8016216:	601a      	str	r2, [r3, #0]
    
    saiclocksource = EXTERNAL_CLOCK_VALUE;
 8016218:	4805      	ldr	r0, [pc, #20]	; (8016230 <SAI_GetInputClock+0xd4>)
  }
#endif /* STM32F413xx || STM32F423xx */  
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
       /* the return result is the value of SAI clock */
  return saiclocksource;
}
 801621a:	4770      	bx	lr
 801621c:	40015804 	.word	0x40015804
 8016220:	40023800 	.word	0x40023800
 8016224:	00f42400 	.word	0x00f42400
 8016228:	007a1200 	.word	0x007a1200
 801622c:	4247015c 	.word	0x4247015c
 8016230:	00bb8000 	.word	0x00bb8000

08016234 <SD_DMATransmitCplt>:
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8016234:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8016236:	681a      	ldr	r2, [r3, #0]
 8016238:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 801623a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801623e:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8016240:	4770      	bx	lr
	...

08016244 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8016244:	b570      	push	{r4, r5, r6, lr}
 8016246:	b082      	sub	sp, #8
 8016248:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 801624a:	2300      	movs	r3, #0
 801624c:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801624e:	6800      	ldr	r0, [r0, #0]
 8016250:	f001 fde8 	bl	8017e24 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8016254:	4606      	mov	r6, r0
 8016256:	b110      	cbz	r0, 801625e <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8016258:	4630      	mov	r0, r6
 801625a:	b002      	add	sp, #8
 801625c:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 801625e:	6820      	ldr	r0, [r4, #0]
 8016260:	f001 fdf3 	bl	8017e4a <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8016264:	b938      	cbnz	r0, 8016276 <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8016266:	2301      	movs	r3, #1
 8016268:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 801626a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801626c:	2b01      	cmp	r3, #1
 801626e:	d00b      	beq.n	8016288 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8016270:	4635      	mov	r5, r6
 8016272:	4630      	mov	r0, r6
 8016274:	e014      	b.n	80162a0 <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8016276:	2300      	movs	r3, #0
 8016278:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801627a:	6820      	ldr	r0, [r4, #0]
 801627c:	f001 fdd2 	bl	8017e24 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 8016280:	2800      	cmp	r0, #0
 8016282:	d0f2      	beq.n	801626a <SD_PowerON+0x26>
      return errorstate;
 8016284:	4606      	mov	r6, r0
 8016286:	e7e7      	b.n	8016258 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8016288:	2100      	movs	r1, #0
 801628a:	6820      	ldr	r0, [r4, #0]
 801628c:	f001 fdf4 	bl	8017e78 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8016290:	2800      	cmp	r0, #0
 8016292:	d0ed      	beq.n	8016270 <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8016294:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8016298:	e7de      	b.n	8016258 <SD_PowerON+0x14>
    count++;
 801629a:	9b01      	ldr	r3, [sp, #4]
 801629c:	3301      	adds	r3, #1
 801629e:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80162a0:	9a01      	ldr	r2, [sp, #4]
 80162a2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80162a6:	429a      	cmp	r2, r3
 80162a8:	d813      	bhi.n	80162d2 <SD_PowerON+0x8e>
 80162aa:	b995      	cbnz	r5, 80162d2 <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80162ac:	2100      	movs	r1, #0
 80162ae:	6820      	ldr	r0, [r4, #0]
 80162b0:	f001 fde2 	bl	8017e78 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80162b4:	b9d8      	cbnz	r0, 80162ee <SD_PowerON+0xaa>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80162b6:	4912      	ldr	r1, [pc, #72]	; (8016300 <SD_PowerON+0xbc>)
 80162b8:	6820      	ldr	r0, [r4, #0]
 80162ba:	f001 fdf5 	bl	8017ea8 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80162be:	4605      	mov	r5, r0
 80162c0:	b9b8      	cbnz	r0, 80162f2 <SD_PowerON+0xae>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80162c2:	2100      	movs	r1, #0
 80162c4:	6820      	ldr	r0, [r4, #0]
 80162c6:	f001 fbef 	bl	8017aa8 <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80162ca:	0fc3      	lsrs	r3, r0, #31
 80162cc:	d0e5      	beq.n	801629a <SD_PowerON+0x56>
 80162ce:	461d      	mov	r5, r3
 80162d0:	e7e3      	b.n	801629a <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80162d2:	9a01      	ldr	r2, [sp, #4]
 80162d4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80162d8:	429a      	cmp	r2, r3
 80162da:	d80d      	bhi.n	80162f8 <SD_PowerON+0xb4>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80162dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80162e0:	d102      	bne.n	80162e8 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDSC;
 80162e2:	2300      	movs	r3, #0
 80162e4:	6463      	str	r3, [r4, #68]	; 0x44
 80162e6:	e7b7      	b.n	8016258 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80162e8:	2301      	movs	r3, #1
 80162ea:	6463      	str	r3, [r4, #68]	; 0x44
 80162ec:	e7b4      	b.n	8016258 <SD_PowerON+0x14>
      return errorstate;
 80162ee:	4606      	mov	r6, r0
 80162f0:	e7b2      	b.n	8016258 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80162f2:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80162f6:	e7af      	b.n	8016258 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80162f8:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 80162fc:	e7ac      	b.n	8016258 <SD_PowerON+0x14>
 80162fe:	bf00      	nop
 8016300:	c1100000 	.word	0xc1100000

08016304 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8016304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016308:	b088      	sub	sp, #32
 801630a:	4604      	mov	r4, r0
 801630c:	460f      	mov	r7, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801630e:	f7fc fb89 	bl	8012a24 <HAL_GetTick>
 8016312:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8016314:	2300      	movs	r3, #0
 8016316:	9300      	str	r3, [sp, #0]
 8016318:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 801631a:	2108      	movs	r1, #8
 801631c:	6820      	ldr	r0, [r4, #0]
 801631e:	f001 fcd7 	bl	8017cd0 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 8016322:	4605      	mov	r5, r0
 8016324:	b118      	cbz	r0, 801632e <SD_FindSCR+0x2a>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8016326:	4628      	mov	r0, r5
 8016328:	b008      	add	sp, #32
 801632a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 801632e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8016330:	0409      	lsls	r1, r1, #16
 8016332:	6820      	ldr	r0, [r4, #0]
 8016334:	f001 fda0 	bl	8017e78 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8016338:	4605      	mov	r5, r0
 801633a:	2800      	cmp	r0, #0
 801633c:	d1f3      	bne.n	8016326 <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801633e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016342:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8016344:	2308      	movs	r3, #8
 8016346:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8016348:	2330      	movs	r3, #48	; 0x30
 801634a:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 801634c:	2302      	movs	r3, #2
 801634e:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8016350:	2300      	movs	r3, #0
 8016352:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8016354:	2301      	movs	r3, #1
 8016356:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8016358:	a902      	add	r1, sp, #8
 801635a:	6820      	ldr	r0, [r4, #0]
 801635c:	f001 fca6 	bl	8017cac <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8016360:	6820      	ldr	r0, [r4, #0]
 8016362:	f001 fdd2 	bl	8017f0a <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8016366:	4605      	mov	r5, r0
 8016368:	2800      	cmp	r0, #0
 801636a:	d1dc      	bne.n	8016326 <SD_FindSCR+0x22>
  uint32_t index = 0U;
 801636c:	4680      	mov	r8, r0
 801636e:	e005      	b.n	801637c <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8016370:	f7fc fb58 	bl	8012a24 <HAL_GetTick>
 8016374:	1b80      	subs	r0, r0, r6
 8016376:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801637a:	d043      	beq.n	8016404 <SD_FindSCR+0x100>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 801637c:	6820      	ldr	r0, [r4, #0]
 801637e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8016380:	f240 432a 	movw	r3, #1066	; 0x42a
 8016384:	421a      	tst	r2, r3
 8016386:	d10a      	bne.n	801639e <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8016388:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801638a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 801638e:	d0ef      	beq.n	8016370 <SD_FindSCR+0x6c>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8016390:	f001 fb66 	bl	8017a60 <SDIO_ReadFIFO>
 8016394:	f84d 0028 	str.w	r0, [sp, r8, lsl #2]
      index++;
 8016398:	f108 0801 	add.w	r8, r8, #1
 801639c:	e7e8      	b.n	8016370 <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 801639e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80163a0:	f013 0f08 	tst.w	r3, #8
 80163a4:	d125      	bne.n	80163f2 <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80163a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80163a8:	f013 0f02 	tst.w	r3, #2
 80163ac:	d124      	bne.n	80163f8 <SD_FindSCR+0xf4>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80163ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80163b0:	f013 0f20 	tst.w	r3, #32
 80163b4:	d123      	bne.n	80163fe <SD_FindSCR+0xfa>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80163b6:	f240 533a 	movw	r3, #1338	; 0x53a
 80163ba:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80163bc:	9a01      	ldr	r2, [sp, #4]
 80163be:	0213      	lsls	r3, r2, #8
 80163c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80163c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80163c8:	0a11      	lsrs	r1, r2, #8
 80163ca:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80163ce:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80163d0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80163d4:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80163d6:	9a00      	ldr	r2, [sp, #0]
 80163d8:	0213      	lsls	r3, r2, #8
 80163da:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80163de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80163e2:	0a11      	lsrs	r1, r2, #8
 80163e4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80163e8:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80163ea:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80163ee:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 80163f0:	e799      	b.n	8016326 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80163f2:	2508      	movs	r5, #8
 80163f4:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80163f6:	e796      	b.n	8016326 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80163f8:	2502      	movs	r5, #2
 80163fa:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80163fc:	e793      	b.n	8016326 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80163fe:	2520      	movs	r5, #32
 8016400:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8016402:	e790      	b.n	8016326 <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 8016404:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8016408:	e78d      	b.n	8016326 <SD_FindSCR+0x22>

0801640a <SD_WideBus_Enable>:
{
 801640a:	b510      	push	{r4, lr}
 801640c:	b082      	sub	sp, #8
 801640e:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8016410:	2100      	movs	r1, #0
 8016412:	9100      	str	r1, [sp, #0]
 8016414:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8016416:	6800      	ldr	r0, [r0, #0]
 8016418:	f001 fb46 	bl	8017aa8 <SDIO_GetResponse>
 801641c:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8016420:	d116      	bne.n	8016450 <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8016422:	4669      	mov	r1, sp
 8016424:	4620      	mov	r0, r4
 8016426:	f7ff ff6d 	bl	8016304 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 801642a:	4603      	mov	r3, r0
 801642c:	b990      	cbnz	r0, 8016454 <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 801642e:	9b01      	ldr	r3, [sp, #4]
 8016430:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8016434:	d011      	beq.n	801645a <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8016436:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8016438:	0409      	lsls	r1, r1, #16
 801643a:	6820      	ldr	r0, [r4, #0]
 801643c:	f001 fd1c 	bl	8017e78 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8016440:	4603      	mov	r3, r0
 8016442:	b938      	cbnz	r0, 8016454 <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8016444:	2102      	movs	r1, #2
 8016446:	6820      	ldr	r0, [r4, #0]
 8016448:	f001 fd47 	bl	8017eda <SDMMC_CmdBusWidth>
 801644c:	4603      	mov	r3, r0
 801644e:	e001      	b.n	8016454 <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8016450:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8016454:	4618      	mov	r0, r3
 8016456:	b002      	add	sp, #8
 8016458:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801645a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801645e:	e7f9      	b.n	8016454 <SD_WideBus_Enable+0x4a>

08016460 <SD_WideBus_Disable>:
{
 8016460:	b510      	push	{r4, lr}
 8016462:	b082      	sub	sp, #8
 8016464:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8016466:	2100      	movs	r1, #0
 8016468:	9100      	str	r1, [sp, #0]
 801646a:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801646c:	6800      	ldr	r0, [r0, #0]
 801646e:	f001 fb1b 	bl	8017aa8 <SDIO_GetResponse>
 8016472:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8016476:	d116      	bne.n	80164a6 <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8016478:	4669      	mov	r1, sp
 801647a:	4620      	mov	r0, r4
 801647c:	f7ff ff42 	bl	8016304 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8016480:	4603      	mov	r3, r0
 8016482:	b990      	cbnz	r0, 80164aa <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8016484:	9b01      	ldr	r3, [sp, #4]
 8016486:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 801648a:	d011      	beq.n	80164b0 <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801648c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801648e:	0409      	lsls	r1, r1, #16
 8016490:	6820      	ldr	r0, [r4, #0]
 8016492:	f001 fcf1 	bl	8017e78 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8016496:	4603      	mov	r3, r0
 8016498:	b938      	cbnz	r0, 80164aa <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 801649a:	2100      	movs	r1, #0
 801649c:	6820      	ldr	r0, [r4, #0]
 801649e:	f001 fd1c 	bl	8017eda <SDMMC_CmdBusWidth>
 80164a2:	4603      	mov	r3, r0
 80164a4:	e001      	b.n	80164aa <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80164a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 80164aa:	4618      	mov	r0, r3
 80164ac:	b002      	add	sp, #8
 80164ae:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80164b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80164b4:	e7f9      	b.n	80164aa <SD_WideBus_Disable+0x4a>

080164b6 <SD_SendStatus>:
{
 80164b6:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 80164b8:	b181      	cbz	r1, 80164dc <SD_SendStatus+0x26>
 80164ba:	460d      	mov	r5, r1
 80164bc:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80164be:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80164c0:	0409      	lsls	r1, r1, #16
 80164c2:	6800      	ldr	r0, [r0, #0]
 80164c4:	f001 fd7b 	bl	8017fbe <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80164c8:	4606      	mov	r6, r0
 80164ca:	b108      	cbz	r0, 80164d0 <SD_SendStatus+0x1a>
}
 80164cc:	4630      	mov	r0, r6
 80164ce:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80164d0:	2100      	movs	r1, #0
 80164d2:	6820      	ldr	r0, [r4, #0]
 80164d4:	f001 fae8 	bl	8017aa8 <SDIO_GetResponse>
 80164d8:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 80164da:	e7f7      	b.n	80164cc <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 80164dc:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 80164e0:	e7f4      	b.n	80164cc <SD_SendStatus+0x16>
	...

080164e4 <HAL_SD_ReadBlocks_DMA>:
{
 80164e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164e8:	b086      	sub	sp, #24
 80164ea:	4604      	mov	r4, r0
  if(NULL == pData)
 80164ec:	b1a1      	cbz	r1, 8016518 <HAL_SD_ReadBlocks_DMA+0x34>
 80164ee:	4617      	mov	r7, r2
 80164f0:	461e      	mov	r6, r3
 80164f2:	460a      	mov	r2, r1
  if(hsd->State == HAL_SD_STATE_READY)
 80164f4:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80164f8:	b2db      	uxtb	r3, r3
 80164fa:	2b01      	cmp	r3, #1
 80164fc:	f040 8085 	bne.w	801660a <HAL_SD_ReadBlocks_DMA+0x126>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8016500:	2300      	movs	r3, #0
 8016502:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8016504:	19bb      	adds	r3, r7, r6
 8016506:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8016508:	428b      	cmp	r3, r1
 801650a:	d90b      	bls.n	8016524 <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801650c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801650e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016512:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 8016514:	2501      	movs	r5, #1
 8016516:	e079      	b.n	801660c <HAL_SD_ReadBlocks_DMA+0x128>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8016518:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801651a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801651e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8016520:	2501      	movs	r5, #1
 8016522:	e073      	b.n	801660c <HAL_SD_ReadBlocks_DMA+0x128>
    hsd->State = HAL_SD_STATE_BUSY;
 8016524:	2303      	movs	r3, #3
 8016526:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 801652a:	6803      	ldr	r3, [r0, #0]
 801652c:	2100      	movs	r1, #0
 801652e:	62d9      	str	r1, [r3, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8016530:	6800      	ldr	r0, [r0, #0]
 8016532:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8016534:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 8016538:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 801653a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801653c:	4835      	ldr	r0, [pc, #212]	; (8016614 <HAL_SD_ReadBlocks_DMA+0x130>)
 801653e:	63d8      	str	r0, [r3, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8016540:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016542:	4835      	ldr	r0, [pc, #212]	; (8016618 <HAL_SD_ReadBlocks_DMA+0x134>)
 8016544:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 8016546:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016548:	6519      	str	r1, [r3, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 801654a:	6821      	ldr	r1, [r4, #0]
 801654c:	ea4f 2846 	mov.w	r8, r6, lsl #9
 8016550:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8016554:	3180      	adds	r1, #128	; 0x80
 8016556:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016558:	f7fc fbd6 	bl	8012d08 <HAL_DMA_Start_IT>
 801655c:	4605      	mov	r5, r0
 801655e:	b9b8      	cbnz	r0, 8016590 <HAL_SD_ReadBlocks_DMA+0xac>
      __HAL_SD_DMA_ENABLE(hsd);
 8016560:	4b2e      	ldr	r3, [pc, #184]	; (801661c <HAL_SD_ReadBlocks_DMA+0x138>)
 8016562:	2201      	movs	r2, #1
 8016564:	601a      	str	r2, [r3, #0]
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8016566:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016568:	4293      	cmp	r3, r2
 801656a:	d000      	beq.n	801656e <HAL_SD_ReadBlocks_DMA+0x8a>
        add *= 512U;
 801656c:	027f      	lsls	r7, r7, #9
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801656e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016572:	6820      	ldr	r0, [r4, #0]
 8016574:	f001 fbac 	bl	8017cd0 <SDMMC_CmdBlockLength>
      if(errorstate != HAL_SD_ERROR_NONE)
 8016578:	4603      	mov	r3, r0
 801657a:	b1c8      	cbz	r0, 80165b0 <HAL_SD_ReadBlocks_DMA+0xcc>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801657c:	6822      	ldr	r2, [r4, #0]
 801657e:	4928      	ldr	r1, [pc, #160]	; (8016620 <HAL_SD_ReadBlocks_DMA+0x13c>)
 8016580:	6391      	str	r1, [r2, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8016582:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8016584:	4318      	orrs	r0, r3
 8016586:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8016588:	2501      	movs	r5, #1
 801658a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        return HAL_ERROR;
 801658e:	e03d      	b.n	801660c <HAL_SD_ReadBlocks_DMA+0x128>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8016590:	6822      	ldr	r2, [r4, #0]
 8016592:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8016594:	f423 7395 	bic.w	r3, r3, #298	; 0x12a
 8016598:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801659a:	6823      	ldr	r3, [r4, #0]
 801659c:	4a20      	ldr	r2, [pc, #128]	; (8016620 <HAL_SD_ReadBlocks_DMA+0x13c>)
 801659e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80165a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80165a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80165a6:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80165a8:	2501      	movs	r5, #1
 80165aa:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      return HAL_ERROR;
 80165ae:	e02d      	b.n	801660c <HAL_SD_ReadBlocks_DMA+0x128>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80165b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80165b4:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80165b6:	f8cd 8004 	str.w	r8, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80165ba:	2390      	movs	r3, #144	; 0x90
 80165bc:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80165be:	2302      	movs	r3, #2
 80165c0:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80165c2:	2300      	movs	r3, #0
 80165c4:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80165c6:	2301      	movs	r3, #1
 80165c8:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80165ca:	4669      	mov	r1, sp
 80165cc:	6820      	ldr	r0, [r4, #0]
 80165ce:	f001 fb6d 	bl	8017cac <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 80165d2:	2e01      	cmp	r6, #1
 80165d4:	d912      	bls.n	80165fc <HAL_SD_ReadBlocks_DMA+0x118>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80165d6:	2382      	movs	r3, #130	; 0x82
 80165d8:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80165da:	4639      	mov	r1, r7
 80165dc:	6820      	ldr	r0, [r4, #0]
 80165de:	f001 fba7 	bl	8017d30 <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 80165e2:	b198      	cbz	r0, 801660c <HAL_SD_ReadBlocks_DMA+0x128>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80165e4:	6823      	ldr	r3, [r4, #0]
 80165e6:	4a0e      	ldr	r2, [pc, #56]	; (8016620 <HAL_SD_ReadBlocks_DMA+0x13c>)
 80165e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80165ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80165ec:	4318      	orrs	r0, r3
 80165ee:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80165f0:	2501      	movs	r5, #1
 80165f2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80165f6:	2300      	movs	r3, #0
 80165f8:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 80165fa:	e007      	b.n	801660c <HAL_SD_ReadBlocks_DMA+0x128>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80165fc:	2381      	movs	r3, #129	; 0x81
 80165fe:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8016600:	4639      	mov	r1, r7
 8016602:	6820      	ldr	r0, [r4, #0]
 8016604:	f001 fb7c 	bl	8017d00 <SDMMC_CmdReadSingleBlock>
 8016608:	e7eb      	b.n	80165e2 <HAL_SD_ReadBlocks_DMA+0xfe>
    return HAL_BUSY;
 801660a:	2502      	movs	r5, #2
}
 801660c:	4628      	mov	r0, r5
 801660e:	b006      	add	sp, #24
 8016610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016614:	08016767 	.word	0x08016767
 8016618:	08016c19 	.word	0x08016c19
 801661c:	4225858c 	.word	0x4225858c
 8016620:	004005ff 	.word	0x004005ff

08016624 <HAL_SD_WriteBlocks_DMA>:
{
 8016624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016626:	b087      	sub	sp, #28
 8016628:	4604      	mov	r4, r0
  if(NULL == pData)
 801662a:	2900      	cmp	r1, #0
 801662c:	d041      	beq.n	80166b2 <HAL_SD_WriteBlocks_DMA+0x8e>
 801662e:	4615      	mov	r5, r2
 8016630:	461e      	mov	r6, r3
 8016632:	460f      	mov	r7, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8016634:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8016638:	b2db      	uxtb	r3, r3
 801663a:	2b01      	cmp	r3, #1
 801663c:	f040 8085 	bne.w	801674a <HAL_SD_WriteBlocks_DMA+0x126>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8016640:	2300      	movs	r3, #0
 8016642:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8016644:	1993      	adds	r3, r2, r6
 8016646:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8016648:	4293      	cmp	r3, r2
 801664a:	d838      	bhi.n	80166be <HAL_SD_WriteBlocks_DMA+0x9a>
    hsd->State = HAL_SD_STATE_BUSY;
 801664c:	2303      	movs	r3, #3
 801664e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8016652:	6803      	ldr	r3, [r0, #0]
 8016654:	2200      	movs	r2, #0
 8016656:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8016658:	6801      	ldr	r1, [r0, #0]
 801665a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 801665c:	f043 031a 	orr.w	r3, r3, #26
 8016660:	63cb      	str	r3, [r1, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8016662:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8016664:	493b      	ldr	r1, [pc, #236]	; (8016754 <HAL_SD_WriteBlocks_DMA+0x130>)
 8016666:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8016668:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801666a:	493b      	ldr	r1, [pc, #236]	; (8016758 <HAL_SD_WriteBlocks_DMA+0x134>)
 801666c:	64d9      	str	r1, [r3, #76]	; 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 801666e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8016670:	651a      	str	r2, [r3, #80]	; 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8016672:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8016674:	2b01      	cmp	r3, #1
 8016676:	d000      	beq.n	801667a <HAL_SD_WriteBlocks_DMA+0x56>
      add *= 512U;
 8016678:	026d      	lsls	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801667a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801667e:	6820      	ldr	r0, [r4, #0]
 8016680:	f001 fb26 	bl	8017cd0 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8016684:	4603      	mov	r3, r0
 8016686:	bb00      	cbnz	r0, 80166ca <HAL_SD_WriteBlocks_DMA+0xa6>
    if(NumberOfBlocks > 1U)
 8016688:	2e01      	cmp	r6, #1
 801668a:	d928      	bls.n	80166de <HAL_SD_WriteBlocks_DMA+0xba>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801668c:	23a0      	movs	r3, #160	; 0xa0
 801668e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8016690:	4629      	mov	r1, r5
 8016692:	6820      	ldr	r0, [r4, #0]
 8016694:	f001 fb7c 	bl	8017d90 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8016698:	b340      	cbz	r0, 80166ec <HAL_SD_WriteBlocks_DMA+0xc8>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801669a:	6823      	ldr	r3, [r4, #0]
 801669c:	4a2f      	ldr	r2, [pc, #188]	; (801675c <HAL_SD_WriteBlocks_DMA+0x138>)
 801669e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80166a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80166a2:	4318      	orrs	r0, r3
 80166a4:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80166a6:	2501      	movs	r5, #1
 80166a8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80166ac:	2300      	movs	r3, #0
 80166ae:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 80166b0:	e04c      	b.n	801674c <HAL_SD_WriteBlocks_DMA+0x128>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80166b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80166b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80166b8:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80166ba:	2501      	movs	r5, #1
 80166bc:	e046      	b.n	801674c <HAL_SD_WriteBlocks_DMA+0x128>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80166be:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80166c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80166c4:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 80166c6:	2501      	movs	r5, #1
 80166c8:	e040      	b.n	801674c <HAL_SD_WriteBlocks_DMA+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80166ca:	6822      	ldr	r2, [r4, #0]
 80166cc:	4923      	ldr	r1, [pc, #140]	; (801675c <HAL_SD_WriteBlocks_DMA+0x138>)
 80166ce:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80166d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80166d2:	4318      	orrs	r0, r3
 80166d4:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80166d6:	2501      	movs	r5, #1
 80166d8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      return HAL_ERROR;
 80166dc:	e036      	b.n	801674c <HAL_SD_WriteBlocks_DMA+0x128>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80166de:	2390      	movs	r3, #144	; 0x90
 80166e0:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80166e2:	4629      	mov	r1, r5
 80166e4:	6820      	ldr	r0, [r4, #0]
 80166e6:	f001 fb3b 	bl	8017d60 <SDMMC_CmdWriteSingleBlock>
 80166ea:	e7d5      	b.n	8016698 <HAL_SD_WriteBlocks_DMA+0x74>
    __HAL_SD_DMA_ENABLE(hsd);
 80166ec:	4b1c      	ldr	r3, [pc, #112]	; (8016760 <HAL_SD_WriteBlocks_DMA+0x13c>)
 80166ee:	2201      	movs	r2, #1
 80166f0:	601a      	str	r2, [r3, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80166f2:	6822      	ldr	r2, [r4, #0]
 80166f4:	0276      	lsls	r6, r6, #9
 80166f6:	08b3      	lsrs	r3, r6, #2
 80166f8:	3280      	adds	r2, #128	; 0x80
 80166fa:	4639      	mov	r1, r7
 80166fc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80166fe:	f7fc fb03 	bl	8012d08 <HAL_DMA_Start_IT>
 8016702:	4605      	mov	r5, r0
 8016704:	b188      	cbz	r0, 801672a <HAL_SD_WriteBlocks_DMA+0x106>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8016706:	6822      	ldr	r2, [r4, #0]
 8016708:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 801670a:	f023 031a 	bic.w	r3, r3, #26
 801670e:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8016710:	6823      	ldr	r3, [r4, #0]
 8016712:	4a12      	ldr	r2, [pc, #72]	; (801675c <HAL_SD_WriteBlocks_DMA+0x138>)
 8016714:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8016716:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016718:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801671c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801671e:	2501      	movs	r5, #1
 8016720:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8016724:	2300      	movs	r3, #0
 8016726:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8016728:	e010      	b.n	801674c <HAL_SD_WriteBlocks_DMA+0x128>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801672a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801672e:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8016730:	9601      	str	r6, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8016732:	2390      	movs	r3, #144	; 0x90
 8016734:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8016736:	2300      	movs	r3, #0
 8016738:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 801673a:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 801673c:	2301      	movs	r3, #1
 801673e:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8016740:	4669      	mov	r1, sp
 8016742:	6820      	ldr	r0, [r4, #0]
 8016744:	f001 fab2 	bl	8017cac <SDIO_ConfigData>
      return HAL_OK;
 8016748:	e000      	b.n	801674c <HAL_SD_WriteBlocks_DMA+0x128>
    return HAL_BUSY;
 801674a:	2502      	movs	r5, #2
}
 801674c:	4628      	mov	r0, r5
 801674e:	b007      	add	sp, #28
 8016750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016752:	bf00      	nop
 8016754:	08016235 	.word	0x08016235
 8016758:	08016c19 	.word	0x08016c19
 801675c:	004005ff 	.word	0x004005ff
 8016760:	4225858c 	.word	0x4225858c

08016764 <HAL_SD_ErrorCallback>:
}
 8016764:	4770      	bx	lr

08016766 <SD_DMAReceiveCplt>:
{
 8016766:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8016768:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 801676a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801676c:	2b82      	cmp	r3, #130	; 0x82
 801676e:	d011      	beq.n	8016794 <SD_DMAReceiveCplt+0x2e>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8016770:	6822      	ldr	r2, [r4, #0]
 8016772:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8016774:	f023 0308 	bic.w	r3, r3, #8
 8016778:	62d3      	str	r3, [r2, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 801677a:	6823      	ldr	r3, [r4, #0]
 801677c:	f240 523a 	movw	r2, #1338	; 0x53a
 8016780:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8016782:	2301      	movs	r3, #1
 8016784:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8016788:	2300      	movs	r3, #0
 801678a:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 801678c:	4620      	mov	r0, r4
 801678e:	f001 fc67 	bl	8018060 <HAL_SD_RxCpltCallback>
}
 8016792:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8016794:	6820      	ldr	r0, [r4, #0]
 8016796:	f001 fb13 	bl	8017dc0 <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 801679a:	4603      	mov	r3, r0
 801679c:	2800      	cmp	r0, #0
 801679e:	d0e7      	beq.n	8016770 <SD_DMAReceiveCplt+0xa>
      hsd->ErrorCode |= errorstate;
 80167a0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80167a2:	4318      	orrs	r0, r3
 80167a4:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 80167a6:	4620      	mov	r0, r4
 80167a8:	f7ff ffdc 	bl	8016764 <HAL_SD_ErrorCallback>
 80167ac:	e7e0      	b.n	8016770 <SD_DMAReceiveCplt+0xa>
	...

080167b0 <HAL_SD_GetCardCSD>:
{
 80167b0:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80167b2:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80167b4:	0f9b      	lsrs	r3, r3, #30
 80167b6:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80167b8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80167ba:	f3c3 6383 	ubfx	r3, r3, #26, #4
 80167be:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80167c0:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 80167c4:	f003 0303 	and.w	r3, r3, #3
 80167c8:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80167ca:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 80167ce:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80167d0:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 80167d4:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80167d6:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80167da:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80167dc:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80167de:	0d1b      	lsrs	r3, r3, #20
 80167e0:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80167e2:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80167e6:	f003 030f 	and.w	r3, r3, #15
 80167ea:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80167ec:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80167ee:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80167f2:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80167f4:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80167f6:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80167fa:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80167fc:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80167fe:	f3c3 3340 	ubfx	r3, r3, #13, #1
 8016802:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8016804:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8016806:	f3c3 3300 	ubfx	r3, r3, #12, #1
 801680a:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 801680c:	2300      	movs	r3, #0
 801680e:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8016810:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8016812:	2b00      	cmp	r3, #0
 8016814:	f040 8088 	bne.w	8016928 <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8016818:	6e82      	ldr	r2, [r0, #104]	; 0x68
 801681a:	f640 73fc 	movw	r3, #4092	; 0xffc
 801681e:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 8016822:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8016824:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8016828:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 801682a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801682c:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 8016830:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8016832:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8016836:	f003 0307 	and.w	r3, r3, #7
 801683a:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 801683c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801683e:	f3c3 5342 	ubfx	r3, r3, #21, #3
 8016842:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8016844:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8016846:	f3c3 4382 	ubfx	r3, r3, #18, #3
 801684a:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 801684c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801684e:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 8016852:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8016854:	690b      	ldr	r3, [r1, #16]
 8016856:	3301      	adds	r3, #1
 8016858:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 801685a:	7e0a      	ldrb	r2, [r1, #24]
 801685c:	f002 0207 	and.w	r2, r2, #7
 8016860:	3202      	adds	r2, #2
 8016862:	fa03 f202 	lsl.w	r2, r3, r2
 8016866:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8016868:	7a0b      	ldrb	r3, [r1, #8]
 801686a:	f003 040f 	and.w	r4, r3, #15
 801686e:	2301      	movs	r3, #1
 8016870:	40a3      	lsls	r3, r4
 8016872:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8016874:	0a5b      	lsrs	r3, r3, #9
 8016876:	fb03 f302 	mul.w	r3, r3, r2
 801687a:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 801687c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016880:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8016882:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8016884:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8016888:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 801688a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 801688c:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 8016890:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8016892:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8016894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016898:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 801689a:	6f03      	ldr	r3, [r0, #112]	; 0x70
 801689c:	0fdb      	lsrs	r3, r3, #31
 801689e:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80168a0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80168a2:	f3c3 7341 	ubfx	r3, r3, #29, #2
 80168a6:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80168a8:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80168aa:	f3c3 6382 	ubfx	r3, r3, #26, #3
 80168ae:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80168b0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80168b2:	f3c3 5383 	ubfx	r3, r3, #22, #4
 80168b6:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80168b8:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80168ba:	f3c3 5340 	ubfx	r3, r3, #21, #1
 80168be:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 80168c2:	2300      	movs	r3, #0
 80168c4:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80168c8:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 80168cc:	f002 0201 	and.w	r2, r2, #1
 80168d0:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80168d4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80168d6:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80168da:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80168de:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80168e0:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80168e4:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80168e8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80168ea:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80168ee:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80168f2:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80168f4:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80168f8:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80168fc:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80168fe:	f3c2 2281 	ubfx	r2, r2, #10, #2
 8016902:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8016906:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8016908:	f3c2 2201 	ubfx	r2, r2, #8, #2
 801690c:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8016910:	6f02      	ldr	r2, [r0, #112]	; 0x70
 8016912:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8016916:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 801691a:	2201      	movs	r2, #1
 801691c:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 8016920:	4618      	mov	r0, r3
}
 8016922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016926:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8016928:	2b01      	cmp	r3, #1
 801692a:	d00b      	beq.n	8016944 <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801692c:	6803      	ldr	r3, [r0, #0]
 801692e:	4a0e      	ldr	r2, [pc, #56]	; (8016968 <HAL_SD_GetCardCSD+0x1b8>)
 8016930:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8016932:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016938:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801693a:	2301      	movs	r3, #1
 801693c:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 8016940:	4618      	mov	r0, r3
 8016942:	e7ee      	b.n	8016922 <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8016944:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8016946:	041b      	lsls	r3, r3, #16
 8016948:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 801694c:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 8016950:	4313      	orrs	r3, r2
 8016952:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8016954:	690b      	ldr	r3, [r1, #16]
 8016956:	3301      	adds	r3, #1
 8016958:	029b      	lsls	r3, r3, #10
 801695a:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 801695c:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 801695e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016962:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8016964:	6603      	str	r3, [r0, #96]	; 0x60
 8016966:	e78c      	b.n	8016882 <HAL_SD_GetCardCSD+0xd2>
 8016968:	004005ff 	.word	0x004005ff

0801696c <SD_InitCard>:
{
 801696c:	b570      	push	{r4, r5, r6, lr}
 801696e:	b090      	sub	sp, #64	; 0x40
 8016970:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 8016972:	2301      	movs	r3, #1
 8016974:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8016978:	6800      	ldr	r0, [r0, #0]
 801697a:	f001 f87c 	bl	8017a76 <SDIO_GetPowerState>
 801697e:	2800      	cmp	r0, #0
 8016980:	d06c      	beq.n	8016a5c <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8016982:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016984:	2b03      	cmp	r3, #3
 8016986:	d145      	bne.n	8016a14 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8016988:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801698a:	2b03      	cmp	r3, #3
 801698c:	d15d      	bne.n	8016a4a <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 801698e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8016990:	2b03      	cmp	r3, #3
 8016992:	d01d      	beq.n	80169d0 <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8016994:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8016998:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801699a:	0409      	lsls	r1, r1, #16
 801699c:	6820      	ldr	r0, [r4, #0]
 801699e:	f001 fae1 	bl	8017f64 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80169a2:	4605      	mov	r5, r0
 80169a4:	2800      	cmp	r0, #0
 80169a6:	d15b      	bne.n	8016a60 <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80169a8:	2100      	movs	r1, #0
 80169aa:	6820      	ldr	r0, [r4, #0]
 80169ac:	f001 f87c 	bl	8017aa8 <SDIO_GetResponse>
 80169b0:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80169b2:	2104      	movs	r1, #4
 80169b4:	6820      	ldr	r0, [r4, #0]
 80169b6:	f001 f877 	bl	8017aa8 <SDIO_GetResponse>
 80169ba:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80169bc:	2108      	movs	r1, #8
 80169be:	6820      	ldr	r0, [r4, #0]
 80169c0:	f001 f872 	bl	8017aa8 <SDIO_GetResponse>
 80169c4:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80169c6:	210c      	movs	r1, #12
 80169c8:	6820      	ldr	r0, [r4, #0]
 80169ca:	f001 f86d 	bl	8017aa8 <SDIO_GetResponse>
 80169ce:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80169d0:	2104      	movs	r1, #4
 80169d2:	6820      	ldr	r0, [r4, #0]
 80169d4:	f001 f868 	bl	8017aa8 <SDIO_GetResponse>
 80169d8:	0d00      	lsrs	r0, r0, #20
 80169da:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80169dc:	a905      	add	r1, sp, #20
 80169de:	4620      	mov	r0, r4
 80169e0:	f7ff fee6 	bl	80167b0 <HAL_SD_GetCardCSD>
 80169e4:	2800      	cmp	r0, #0
 80169e6:	d13e      	bne.n	8016a66 <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80169e8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80169ea:	0412      	lsls	r2, r2, #16
 80169ec:	2300      	movs	r3, #0
 80169ee:	6820      	ldr	r0, [r4, #0]
 80169f0:	f001 fa00 	bl	8017df4 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80169f4:	4605      	mov	r5, r0
 80169f6:	bb98      	cbnz	r0, 8016a60 <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80169f8:	4623      	mov	r3, r4
 80169fa:	f853 6b10 	ldr.w	r6, [r3], #16
 80169fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016a02:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016a06:	3404      	adds	r4, #4
 8016a08:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016a0c:	4630      	mov	r0, r6
 8016a0e:	f001 f80b 	bl	8017a28 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 8016a12:	e025      	b.n	8016a60 <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8016a14:	6820      	ldr	r0, [r4, #0]
 8016a16:	f001 fa90 	bl	8017f3a <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8016a1a:	4605      	mov	r5, r0
 8016a1c:	bb00      	cbnz	r0, 8016a60 <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8016a1e:	2100      	movs	r1, #0
 8016a20:	6820      	ldr	r0, [r4, #0]
 8016a22:	f001 f841 	bl	8017aa8 <SDIO_GetResponse>
 8016a26:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8016a28:	2104      	movs	r1, #4
 8016a2a:	6820      	ldr	r0, [r4, #0]
 8016a2c:	f001 f83c 	bl	8017aa8 <SDIO_GetResponse>
 8016a30:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8016a32:	2108      	movs	r1, #8
 8016a34:	6820      	ldr	r0, [r4, #0]
 8016a36:	f001 f837 	bl	8017aa8 <SDIO_GetResponse>
 8016a3a:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8016a3c:	210c      	movs	r1, #12
 8016a3e:	6820      	ldr	r0, [r4, #0]
 8016a40:	f001 f832 	bl	8017aa8 <SDIO_GetResponse>
 8016a44:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8016a48:	e79e      	b.n	8016988 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8016a4a:	f10d 0112 	add.w	r1, sp, #18
 8016a4e:	6820      	ldr	r0, [r4, #0]
 8016a50:	f001 fa9d 	bl	8017f8e <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8016a54:	4605      	mov	r5, r0
 8016a56:	2800      	cmp	r0, #0
 8016a58:	d099      	beq.n	801698e <SD_InitCard+0x22>
 8016a5a:	e001      	b.n	8016a60 <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8016a5c:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8016a60:	4628      	mov	r0, r5
 8016a62:	b010      	add	sp, #64	; 0x40
 8016a64:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8016a66:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8016a6a:	e7f9      	b.n	8016a60 <SD_InitCard+0xf4>

08016a6c <HAL_SD_InitCard>:
{
 8016a6c:	b570      	push	{r4, r5, r6, lr}
 8016a6e:	b08a      	sub	sp, #40	; 0x28
 8016a70:	4605      	mov	r5, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8016a72:	2300      	movs	r3, #0
 8016a74:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8016a76:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8016a78:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8016a7a:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8016a7c:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8016a7e:	2376      	movs	r3, #118	; 0x76
 8016a80:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDIO_Init(hsd->Instance, Init);
 8016a82:	ab0a      	add	r3, sp, #40	; 0x28
 8016a84:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016a88:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016a8c:	ab04      	add	r3, sp, #16
 8016a8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016a90:	6828      	ldr	r0, [r5, #0]
 8016a92:	f000 ffc9 	bl	8017a28 <SDIO_Init>
  if(status != HAL_OK)
 8016a96:	b118      	cbz	r0, 8016aa0 <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8016a98:	2401      	movs	r4, #1
}
 8016a9a:	4620      	mov	r0, r4
 8016a9c:	b00a      	add	sp, #40	; 0x28
 8016a9e:	bd70      	pop	{r4, r5, r6, pc}
 8016aa0:	4604      	mov	r4, r0
  __HAL_SD_DISABLE(hsd);
 8016aa2:	4e10      	ldr	r6, [pc, #64]	; (8016ae4 <HAL_SD_InitCard+0x78>)
 8016aa4:	2300      	movs	r3, #0
 8016aa6:	6033      	str	r3, [r6, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 8016aa8:	6828      	ldr	r0, [r5, #0]
 8016aaa:	f000 ffdc 	bl	8017a66 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8016aae:	2301      	movs	r3, #1
 8016ab0:	6033      	str	r3, [r6, #0]
  errorstate = SD_PowerON(hsd);
 8016ab2:	4628      	mov	r0, r5
 8016ab4:	f7ff fbc6 	bl	8016244 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8016ab8:	4603      	mov	r3, r0
 8016aba:	b130      	cbz	r0, 8016aca <HAL_SD_InitCard+0x5e>
    hsd->State = HAL_SD_STATE_READY;
 8016abc:	2401      	movs	r4, #1
 8016abe:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8016ac2:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8016ac4:	4318      	orrs	r0, r3
 8016ac6:	63a8      	str	r0, [r5, #56]	; 0x38
    return HAL_ERROR;
 8016ac8:	e7e7      	b.n	8016a9a <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 8016aca:	4628      	mov	r0, r5
 8016acc:	f7ff ff4e 	bl	801696c <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	2800      	cmp	r0, #0
 8016ad4:	d0e1      	beq.n	8016a9a <HAL_SD_InitCard+0x2e>
    hsd->State = HAL_SD_STATE_READY;
 8016ad6:	2401      	movs	r4, #1
 8016ad8:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8016adc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8016ade:	4318      	orrs	r0, r3
 8016ae0:	63a8      	str	r0, [r5, #56]	; 0x38
    return HAL_ERROR;
 8016ae2:	e7da      	b.n	8016a9a <HAL_SD_InitCard+0x2e>
 8016ae4:	422580a0 	.word	0x422580a0

08016ae8 <HAL_SD_Init>:
  if(hsd == NULL)
 8016ae8:	b1c0      	cbz	r0, 8016b1c <HAL_SD_Init+0x34>
{
 8016aea:	b510      	push	{r4, lr}
 8016aec:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8016aee:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8016af2:	b17b      	cbz	r3, 8016b14 <HAL_SD_Init+0x2c>
  hsd->State = HAL_SD_STATE_BUSY;
 8016af4:	2303      	movs	r3, #3
 8016af6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8016afa:	4620      	mov	r0, r4
 8016afc:	f7ff ffb6 	bl	8016a6c <HAL_SD_InitCard>
 8016b00:	4603      	mov	r3, r0
 8016b02:	b970      	cbnz	r0, 8016b22 <HAL_SD_Init+0x3a>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8016b04:	2200      	movs	r2, #0
 8016b06:	63a2      	str	r2, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8016b08:	6322      	str	r2, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8016b0a:	2201      	movs	r2, #1
 8016b0c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8016b10:	4618      	mov	r0, r3
 8016b12:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8016b14:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8016b16:	f7fb f9e3 	bl	8011ee0 <HAL_SD_MspInit>
 8016b1a:	e7eb      	b.n	8016af4 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8016b1c:	2301      	movs	r3, #1
}
 8016b1e:	4618      	mov	r0, r3
 8016b20:	4770      	bx	lr
    return HAL_ERROR;
 8016b22:	2301      	movs	r3, #1
 8016b24:	e7f4      	b.n	8016b10 <HAL_SD_Init+0x28>

08016b26 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8016b26:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8016b28:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8016b2a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8016b2c:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8016b2e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8016b30:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8016b32:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8016b34:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8016b36:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8016b38:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8016b3a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8016b3c:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8016b3e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8016b40:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8016b42:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8016b44:	61cb      	str	r3, [r1, #28]
}
 8016b46:	2000      	movs	r0, #0
 8016b48:	4770      	bx	lr
	...

08016b4c <HAL_SD_ConfigWideBusOperation>:
{
 8016b4c:	b530      	push	{r4, r5, lr}
 8016b4e:	b08b      	sub	sp, #44	; 0x2c
 8016b50:	4604      	mov	r4, r0
 8016b52:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8016b54:	2303      	movs	r3, #3
 8016b56:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8016b5a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8016b5c:	2b03      	cmp	r3, #3
 8016b5e:	d01c      	beq.n	8016b9a <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8016b60:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8016b64:	d008      	beq.n	8016b78 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8016b66:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8016b6a:	d00a      	beq.n	8016b82 <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8016b6c:	b179      	cbz	r1, 8016b8e <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8016b6e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016b70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016b74:	6383      	str	r3, [r0, #56]	; 0x38
 8016b76:	e014      	b.n	8016ba2 <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8016b78:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016b7e:	6383      	str	r3, [r0, #56]	; 0x38
 8016b80:	e00f      	b.n	8016ba2 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8016b82:	f7ff fc42 	bl	801640a <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8016b86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016b88:	4318      	orrs	r0, r3
 8016b8a:	63a0      	str	r0, [r4, #56]	; 0x38
 8016b8c:	e009      	b.n	8016ba2 <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8016b8e:	f7ff fc67 	bl	8016460 <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8016b92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016b94:	4318      	orrs	r0, r3
 8016b96:	63a0      	str	r0, [r4, #56]	; 0x38
 8016b98:	e003      	b.n	8016ba2 <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8016b9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016ba0:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8016ba2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016ba4:	b13b      	cbz	r3, 8016bb6 <HAL_SD_ConfigWideBusOperation+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8016ba6:	6823      	ldr	r3, [r4, #0]
 8016ba8:	4a10      	ldr	r2, [pc, #64]	; (8016bec <HAL_SD_ConfigWideBusOperation+0xa0>)
 8016baa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8016bac:	2001      	movs	r0, #1
 8016bae:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8016bb2:	b00b      	add	sp, #44	; 0x2c
 8016bb4:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8016bb6:	6863      	ldr	r3, [r4, #4]
 8016bb8:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8016bba:	68a3      	ldr	r3, [r4, #8]
 8016bbc:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8016bbe:	68e3      	ldr	r3, [r4, #12]
 8016bc0:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8016bc2:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8016bc4:	6963      	ldr	r3, [r4, #20]
 8016bc6:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8016bc8:	69a3      	ldr	r3, [r4, #24]
 8016bca:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 8016bcc:	ab0a      	add	r3, sp, #40	; 0x28
 8016bce:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016bd2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016bd6:	ab04      	add	r3, sp, #16
 8016bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016bda:	6820      	ldr	r0, [r4, #0]
 8016bdc:	f000 ff24 	bl	8017a28 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8016be0:	2301      	movs	r3, #1
 8016be2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8016be6:	2000      	movs	r0, #0
 8016be8:	e7e3      	b.n	8016bb2 <HAL_SD_ConfigWideBusOperation+0x66>
 8016bea:	bf00      	nop
 8016bec:	004005ff 	.word	0x004005ff

08016bf0 <HAL_SD_GetCardState>:
{
 8016bf0:	b510      	push	{r4, lr}
 8016bf2:	b082      	sub	sp, #8
 8016bf4:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8016bf6:	a902      	add	r1, sp, #8
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 8016bfe:	f7ff fc5a 	bl	80164b6 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8016c02:	b118      	cbz	r0, 8016c0c <HAL_SD_GetCardState+0x1c>
 8016c04:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 8016c06:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8016c08:	4318      	orrs	r0, r3
 8016c0a:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8016c0c:	9801      	ldr	r0, [sp, #4]
 8016c0e:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8016c12:	b002      	add	sp, #8
 8016c14:	bd10      	pop	{r4, pc}
	...

08016c18 <SD_DMAError>:
{
 8016c18:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8016c1a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8016c1c:	f7fc f998 	bl	8012f50 <HAL_DMA_GetError>
 8016c20:	2802      	cmp	r0, #2
 8016c22:	d00a      	beq.n	8016c3a <SD_DMAError+0x22>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8016c24:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8016c28:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8016c2a:	6d52      	ldr	r2, [r2, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8016c2c:	2b01      	cmp	r3, #1
 8016c2e:	d005      	beq.n	8016c3c <SD_DMAError+0x24>
 8016c30:	2a01      	cmp	r2, #1
 8016c32:	d003      	beq.n	8016c3c <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 8016c34:	4620      	mov	r0, r4
 8016c36:	f7ff fd95 	bl	8016764 <HAL_SD_ErrorCallback>
}
 8016c3a:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8016c3c:	6823      	ldr	r3, [r4, #0]
 8016c3e:	4a0f      	ldr	r2, [pc, #60]	; (8016c7c <SD_DMAError+0x64>)
 8016c40:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8016c42:	6822      	ldr	r2, [r4, #0]
 8016c44:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8016c46:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8016c4a:	63d3      	str	r3, [r2, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8016c4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016c4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8016c52:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8016c54:	4620      	mov	r0, r4
 8016c56:	f7ff ffcb 	bl	8016bf0 <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8016c5a:	3805      	subs	r0, #5
 8016c5c:	2801      	cmp	r0, #1
 8016c5e:	d905      	bls.n	8016c6c <SD_DMAError+0x54>
      hsd->State= HAL_SD_STATE_READY;
 8016c60:	2301      	movs	r3, #1
 8016c62:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8016c66:	2300      	movs	r3, #0
 8016c68:	6323      	str	r3, [r4, #48]	; 0x30
 8016c6a:	e7e3      	b.n	8016c34 <SD_DMAError+0x1c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8016c6c:	6820      	ldr	r0, [r4, #0]
 8016c6e:	f001 f8a7 	bl	8017dc0 <SDMMC_CmdStopTransfer>
 8016c72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016c74:	4318      	orrs	r0, r3
 8016c76:	63a0      	str	r0, [r4, #56]	; 0x38
 8016c78:	e7f2      	b.n	8016c60 <SD_DMAError+0x48>
 8016c7a:	bf00      	nop
 8016c7c:	004005ff 	.word	0x004005ff

08016c80 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8016c80:	b1d8      	cbz	r0, 8016cba <HAL_SDRAM_Init+0x3a>
{   
 8016c82:	b538      	push	{r3, r4, r5, lr}
 8016c84:	4604      	mov	r4, r0
 8016c86:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8016c88:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8016c8c:	b183      	cbz	r3, 8016cb0 <HAL_SDRAM_Init+0x30>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8016c8e:	2302      	movs	r3, #2
 8016c90:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8016c94:	1d21      	adds	r1, r4, #4
 8016c96:	6820      	ldr	r0, [r4, #0]
 8016c98:	f000 fd64 	bl	8017764 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8016c9c:	6862      	ldr	r2, [r4, #4]
 8016c9e:	4629      	mov	r1, r5
 8016ca0:	6820      	ldr	r0, [r4, #0]
 8016ca2:	f000 fd9b 	bl	80177dc <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8016ca6:	2301      	movs	r3, #1
 8016ca8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8016cac:	2000      	movs	r0, #0
}
 8016cae:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8016cb0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8016cb4:	f006 ff68 	bl	801db88 <HAL_SDRAM_MspInit>
 8016cb8:	e7e9      	b.n	8016c8e <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8016cba:	2001      	movs	r0, #1
}
 8016cbc:	4770      	bx	lr

08016cbe <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8016cbe:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8016cc0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8016cc4:	b2db      	uxtb	r3, r3
 8016cc6:	2b02      	cmp	r3, #2
 8016cc8:	d014      	beq.n	8016cf4 <HAL_SDRAM_SendCommand+0x36>
 8016cca:	460d      	mov	r5, r1
 8016ccc:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8016cce:	2302      	movs	r3, #2
 8016cd0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8016cd4:	6800      	ldr	r0, [r0, #0]
 8016cd6:	f000 fdcc 	bl	8017872 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8016cda:	682b      	ldr	r3, [r5, #0]
 8016cdc:	2b02      	cmp	r3, #2
 8016cde:	d004      	beq.n	8016cea <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8016ce0:	2301      	movs	r3, #1
 8016ce2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8016ce6:	2000      	movs	r0, #0
}
 8016ce8:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8016cea:	2305      	movs	r3, #5
 8016cec:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 8016cf0:	2000      	movs	r0, #0
 8016cf2:	e7f9      	b.n	8016ce8 <HAL_SDRAM_SendCommand+0x2a>
    return HAL_BUSY;
 8016cf4:	2002      	movs	r0, #2
 8016cf6:	e7f7      	b.n	8016ce8 <HAL_SDRAM_SendCommand+0x2a>

08016cf8 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8016cf8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8016cfc:	b2db      	uxtb	r3, r3
 8016cfe:	2b02      	cmp	r3, #2
 8016d00:	d00c      	beq.n	8016d1c <HAL_SDRAM_ProgramRefreshRate+0x24>
{
 8016d02:	b510      	push	{r4, lr}
 8016d04:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8016d06:	2302      	movs	r3, #2
 8016d08:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8016d0c:	6800      	ldr	r0, [r0, #0]
 8016d0e:	f000 fdda 	bl	80178c6 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8016d12:	2301      	movs	r3, #1
 8016d14:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8016d18:	2000      	movs	r0, #0
}
 8016d1a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8016d1c:	2002      	movs	r0, #2
}
 8016d1e:	4770      	bx	lr

08016d20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016d20:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8016d22:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8016d24:	6a04      	ldr	r4, [r0, #32]
 8016d26:	f024 0401 	bic.w	r4, r4, #1
 8016d2a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016d2c:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8016d2e:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8016d32:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8016d36:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8016d3a:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8016d3c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8016d3e:	6203      	str	r3, [r0, #32]
}
 8016d40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d44:	4770      	bx	lr

08016d46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8016d46:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8016d48:	6a03      	ldr	r3, [r0, #32]
 8016d4a:	f023 0310 	bic.w	r3, r3, #16
 8016d4e:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8016d50:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8016d52:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8016d54:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8016d58:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8016d5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8016d60:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8016d64:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8016d66:	6203      	str	r3, [r0, #32]
}
 8016d68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d6c:	4770      	bx	lr

08016d6e <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8016d6e:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8016d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8016d74:	4319      	orrs	r1, r3
 8016d76:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8016d7a:	6081      	str	r1, [r0, #8]
}
 8016d7c:	4770      	bx	lr

08016d7e <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8016d7e:	2302      	movs	r3, #2
 8016d80:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016d84:	6802      	ldr	r2, [r0, #0]
 8016d86:	6893      	ldr	r3, [r2, #8]
 8016d88:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016d8c:	2b06      	cmp	r3, #6
 8016d8e:	d003      	beq.n	8016d98 <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 8016d90:	6813      	ldr	r3, [r2, #0]
 8016d92:	f043 0301 	orr.w	r3, r3, #1
 8016d96:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8016d98:	2301      	movs	r3, #1
 8016d9a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8016d9e:	2000      	movs	r0, #0
 8016da0:	4770      	bx	lr

08016da2 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016da2:	6802      	ldr	r2, [r0, #0]
 8016da4:	68d3      	ldr	r3, [r2, #12]
 8016da6:	f043 0301 	orr.w	r3, r3, #1
 8016daa:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016dac:	6802      	ldr	r2, [r0, #0]
 8016dae:	6893      	ldr	r3, [r2, #8]
 8016db0:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016db4:	2b06      	cmp	r3, #6
 8016db6:	d003      	beq.n	8016dc0 <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8016db8:	6813      	ldr	r3, [r2, #0]
 8016dba:	f043 0301 	orr.w	r3, r3, #1
 8016dbe:	6013      	str	r3, [r2, #0]
}
 8016dc0:	2000      	movs	r0, #0
 8016dc2:	4770      	bx	lr

08016dc4 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8016dc4:	4770      	bx	lr

08016dc6 <HAL_TIM_IC_CaptureCallback>:
}
 8016dc6:	4770      	bx	lr

08016dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8016dc8:	4770      	bx	lr

08016dca <HAL_TIM_TriggerCallback>:
}
 8016dca:	4770      	bx	lr

08016dcc <HAL_TIM_IRQHandler>:
{
 8016dcc:	b510      	push	{r4, lr}
 8016dce:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8016dd0:	6803      	ldr	r3, [r0, #0]
 8016dd2:	691a      	ldr	r2, [r3, #16]
 8016dd4:	f012 0f02 	tst.w	r2, #2
 8016dd8:	d011      	beq.n	8016dfe <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8016dda:	68da      	ldr	r2, [r3, #12]
 8016ddc:	f012 0f02 	tst.w	r2, #2
 8016de0:	d00d      	beq.n	8016dfe <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8016de2:	f06f 0202 	mvn.w	r2, #2
 8016de6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016de8:	2301      	movs	r3, #1
 8016dea:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016dec:	6803      	ldr	r3, [r0, #0]
 8016dee:	699b      	ldr	r3, [r3, #24]
 8016df0:	f013 0f03 	tst.w	r3, #3
 8016df4:	d070      	beq.n	8016ed8 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8016df6:	f7ff ffe6 	bl	8016dc6 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8016dfe:	6823      	ldr	r3, [r4, #0]
 8016e00:	691a      	ldr	r2, [r3, #16]
 8016e02:	f012 0f04 	tst.w	r2, #4
 8016e06:	d012      	beq.n	8016e2e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8016e08:	68da      	ldr	r2, [r3, #12]
 8016e0a:	f012 0f04 	tst.w	r2, #4
 8016e0e:	d00e      	beq.n	8016e2e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8016e10:	f06f 0204 	mvn.w	r2, #4
 8016e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016e16:	2302      	movs	r3, #2
 8016e18:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016e1a:	6823      	ldr	r3, [r4, #0]
 8016e1c:	699b      	ldr	r3, [r3, #24]
 8016e1e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8016e22:	d05f      	beq.n	8016ee4 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8016e24:	4620      	mov	r0, r4
 8016e26:	f7ff ffce 	bl	8016dc6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016e2a:	2300      	movs	r3, #0
 8016e2c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8016e2e:	6823      	ldr	r3, [r4, #0]
 8016e30:	691a      	ldr	r2, [r3, #16]
 8016e32:	f012 0f08 	tst.w	r2, #8
 8016e36:	d012      	beq.n	8016e5e <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8016e38:	68da      	ldr	r2, [r3, #12]
 8016e3a:	f012 0f08 	tst.w	r2, #8
 8016e3e:	d00e      	beq.n	8016e5e <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8016e40:	f06f 0208 	mvn.w	r2, #8
 8016e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016e46:	2304      	movs	r3, #4
 8016e48:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016e4a:	6823      	ldr	r3, [r4, #0]
 8016e4c:	69db      	ldr	r3, [r3, #28]
 8016e4e:	f013 0f03 	tst.w	r3, #3
 8016e52:	d04e      	beq.n	8016ef2 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8016e54:	4620      	mov	r0, r4
 8016e56:	f7ff ffb6 	bl	8016dc6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8016e5e:	6823      	ldr	r3, [r4, #0]
 8016e60:	691a      	ldr	r2, [r3, #16]
 8016e62:	f012 0f10 	tst.w	r2, #16
 8016e66:	d012      	beq.n	8016e8e <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8016e68:	68da      	ldr	r2, [r3, #12]
 8016e6a:	f012 0f10 	tst.w	r2, #16
 8016e6e:	d00e      	beq.n	8016e8e <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8016e70:	f06f 0210 	mvn.w	r2, #16
 8016e74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016e76:	2308      	movs	r3, #8
 8016e78:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016e7a:	6823      	ldr	r3, [r4, #0]
 8016e7c:	69db      	ldr	r3, [r3, #28]
 8016e7e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8016e82:	d03d      	beq.n	8016f00 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8016e84:	4620      	mov	r0, r4
 8016e86:	f7ff ff9e 	bl	8016dc6 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016e8a:	2300      	movs	r3, #0
 8016e8c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8016e8e:	6823      	ldr	r3, [r4, #0]
 8016e90:	691a      	ldr	r2, [r3, #16]
 8016e92:	f012 0f01 	tst.w	r2, #1
 8016e96:	d003      	beq.n	8016ea0 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8016e98:	68da      	ldr	r2, [r3, #12]
 8016e9a:	f012 0f01 	tst.w	r2, #1
 8016e9e:	d136      	bne.n	8016f0e <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8016ea0:	6823      	ldr	r3, [r4, #0]
 8016ea2:	691a      	ldr	r2, [r3, #16]
 8016ea4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8016ea8:	d003      	beq.n	8016eb2 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016eaa:	68da      	ldr	r2, [r3, #12]
 8016eac:	f012 0f80 	tst.w	r2, #128	; 0x80
 8016eb0:	d134      	bne.n	8016f1c <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8016eb2:	6823      	ldr	r3, [r4, #0]
 8016eb4:	691a      	ldr	r2, [r3, #16]
 8016eb6:	f012 0f40 	tst.w	r2, #64	; 0x40
 8016eba:	d003      	beq.n	8016ec4 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8016ebc:	68da      	ldr	r2, [r3, #12]
 8016ebe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8016ec2:	d132      	bne.n	8016f2a <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8016ec4:	6823      	ldr	r3, [r4, #0]
 8016ec6:	691a      	ldr	r2, [r3, #16]
 8016ec8:	f012 0f20 	tst.w	r2, #32
 8016ecc:	d003      	beq.n	8016ed6 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8016ece:	68da      	ldr	r2, [r3, #12]
 8016ed0:	f012 0f20 	tst.w	r2, #32
 8016ed4:	d130      	bne.n	8016f38 <HAL_TIM_IRQHandler+0x16c>
}
 8016ed6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016ed8:	f7ff ff74 	bl	8016dc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016edc:	4620      	mov	r0, r4
 8016ede:	f7ff ff73 	bl	8016dc8 <HAL_TIM_PWM_PulseFinishedCallback>
 8016ee2:	e78a      	b.n	8016dfa <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016ee4:	4620      	mov	r0, r4
 8016ee6:	f7ff ff6d 	bl	8016dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016eea:	4620      	mov	r0, r4
 8016eec:	f7ff ff6c 	bl	8016dc8 <HAL_TIM_PWM_PulseFinishedCallback>
 8016ef0:	e79b      	b.n	8016e2a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016ef2:	4620      	mov	r0, r4
 8016ef4:	f7ff ff66 	bl	8016dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016ef8:	4620      	mov	r0, r4
 8016efa:	f7ff ff65 	bl	8016dc8 <HAL_TIM_PWM_PulseFinishedCallback>
 8016efe:	e7ac      	b.n	8016e5a <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016f00:	4620      	mov	r0, r4
 8016f02:	f7ff ff5f 	bl	8016dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016f06:	4620      	mov	r0, r4
 8016f08:	f7ff ff5e 	bl	8016dc8 <HAL_TIM_PWM_PulseFinishedCallback>
 8016f0c:	e7bd      	b.n	8016e8a <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8016f0e:	f06f 0201 	mvn.w	r2, #1
 8016f12:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8016f14:	4620      	mov	r0, r4
 8016f16:	f7fa feb3 	bl	8011c80 <HAL_TIM_PeriodElapsedCallback>
 8016f1a:	e7c1      	b.n	8016ea0 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8016f1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8016f20:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8016f22:	4620      	mov	r0, r4
 8016f24:	f000 f94b 	bl	80171be <HAL_TIMEx_BreakCallback>
 8016f28:	e7c3      	b.n	8016eb2 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8016f2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8016f2e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8016f30:	4620      	mov	r0, r4
 8016f32:	f7ff ff4a 	bl	8016dca <HAL_TIM_TriggerCallback>
 8016f36:	e7c5      	b.n	8016ec4 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8016f38:	f06f 0220 	mvn.w	r2, #32
 8016f3c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8016f3e:	4620      	mov	r0, r4
 8016f40:	f000 f93c 	bl	80171bc <HAL_TIMEx_CommutCallback>
}
 8016f44:	e7c7      	b.n	8016ed6 <HAL_TIM_IRQHandler+0x10a>
	...

08016f48 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8016f48:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8016f4a:	4a30      	ldr	r2, [pc, #192]	; (801700c <TIM_Base_SetConfig+0xc4>)
 8016f4c:	4290      	cmp	r0, r2
 8016f4e:	d012      	beq.n	8016f76 <TIM_Base_SetConfig+0x2e>
 8016f50:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8016f54:	d00f      	beq.n	8016f76 <TIM_Base_SetConfig+0x2e>
 8016f56:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8016f5a:	4290      	cmp	r0, r2
 8016f5c:	d00b      	beq.n	8016f76 <TIM_Base_SetConfig+0x2e>
 8016f5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8016f62:	4290      	cmp	r0, r2
 8016f64:	d007      	beq.n	8016f76 <TIM_Base_SetConfig+0x2e>
 8016f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8016f6a:	4290      	cmp	r0, r2
 8016f6c:	d003      	beq.n	8016f76 <TIM_Base_SetConfig+0x2e>
 8016f6e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8016f72:	4290      	cmp	r0, r2
 8016f74:	d103      	bne.n	8016f7e <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8016f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8016f7a:	684a      	ldr	r2, [r1, #4]
 8016f7c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8016f7e:	4a23      	ldr	r2, [pc, #140]	; (801700c <TIM_Base_SetConfig+0xc4>)
 8016f80:	4290      	cmp	r0, r2
 8016f82:	d02a      	beq.n	8016fda <TIM_Base_SetConfig+0x92>
 8016f84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8016f88:	d027      	beq.n	8016fda <TIM_Base_SetConfig+0x92>
 8016f8a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8016f8e:	4290      	cmp	r0, r2
 8016f90:	d023      	beq.n	8016fda <TIM_Base_SetConfig+0x92>
 8016f92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8016f96:	4290      	cmp	r0, r2
 8016f98:	d01f      	beq.n	8016fda <TIM_Base_SetConfig+0x92>
 8016f9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8016f9e:	4290      	cmp	r0, r2
 8016fa0:	d01b      	beq.n	8016fda <TIM_Base_SetConfig+0x92>
 8016fa2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8016fa6:	4290      	cmp	r0, r2
 8016fa8:	d017      	beq.n	8016fda <TIM_Base_SetConfig+0x92>
 8016faa:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8016fae:	4290      	cmp	r0, r2
 8016fb0:	d013      	beq.n	8016fda <TIM_Base_SetConfig+0x92>
 8016fb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8016fb6:	4290      	cmp	r0, r2
 8016fb8:	d00f      	beq.n	8016fda <TIM_Base_SetConfig+0x92>
 8016fba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8016fbe:	4290      	cmp	r0, r2
 8016fc0:	d00b      	beq.n	8016fda <TIM_Base_SetConfig+0x92>
 8016fc2:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8016fc6:	4290      	cmp	r0, r2
 8016fc8:	d007      	beq.n	8016fda <TIM_Base_SetConfig+0x92>
 8016fca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8016fce:	4290      	cmp	r0, r2
 8016fd0:	d003      	beq.n	8016fda <TIM_Base_SetConfig+0x92>
 8016fd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8016fd6:	4290      	cmp	r0, r2
 8016fd8:	d103      	bne.n	8016fe2 <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8016fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8016fde:	68ca      	ldr	r2, [r1, #12]
 8016fe0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8016fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016fe6:	694a      	ldr	r2, [r1, #20]
 8016fe8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8016fea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8016fec:	688b      	ldr	r3, [r1, #8]
 8016fee:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8016ff0:	680b      	ldr	r3, [r1, #0]
 8016ff2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8016ff4:	4b05      	ldr	r3, [pc, #20]	; (801700c <TIM_Base_SetConfig+0xc4>)
 8016ff6:	4298      	cmp	r0, r3
 8016ff8:	d003      	beq.n	8017002 <TIM_Base_SetConfig+0xba>
 8016ffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016ffe:	4298      	cmp	r0, r3
 8017000:	d101      	bne.n	8017006 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8017002:	690b      	ldr	r3, [r1, #16]
 8017004:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8017006:	2301      	movs	r3, #1
 8017008:	6143      	str	r3, [r0, #20]
}
 801700a:	4770      	bx	lr
 801700c:	40010000 	.word	0x40010000

08017010 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8017010:	b1a8      	cbz	r0, 801703e <HAL_TIM_Base_Init+0x2e>
{
 8017012:	b510      	push	{r4, lr}
 8017014:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8017016:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 801701a:	b15b      	cbz	r3, 8017034 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 801701c:	2302      	movs	r3, #2
 801701e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017022:	1d21      	adds	r1, r4, #4
 8017024:	6820      	ldr	r0, [r4, #0]
 8017026:	f7ff ff8f 	bl	8016f48 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 801702a:	2301      	movs	r3, #1
 801702c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8017030:	2000      	movs	r0, #0
}
 8017032:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8017034:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8017038:	f7fa ffa2 	bl	8011f80 <HAL_TIM_Base_MspInit>
 801703c:	e7ee      	b.n	801701c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 801703e:	2001      	movs	r0, #1
}
 8017040:	4770      	bx	lr

08017042 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8017042:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8017044:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017046:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801704a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 801704e:	430b      	orrs	r3, r1
 8017050:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8017052:	6083      	str	r3, [r0, #8]
}
 8017054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017058:	4770      	bx	lr

0801705a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 801705a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 801705e:	2b01      	cmp	r3, #1
 8017060:	d066      	beq.n	8017130 <HAL_TIM_ConfigClockSource+0xd6>
{
 8017062:	b510      	push	{r4, lr}
 8017064:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8017066:	2301      	movs	r3, #1
 8017068:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 801706c:	2302      	movs	r3, #2
 801706e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8017072:	6802      	ldr	r2, [r0, #0]
 8017074:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8017076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801707a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 801707e:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8017080:	680b      	ldr	r3, [r1, #0]
 8017082:	2b40      	cmp	r3, #64	; 0x40
 8017084:	d04a      	beq.n	801711c <HAL_TIM_ConfigClockSource+0xc2>
 8017086:	d913      	bls.n	80170b0 <HAL_TIM_ConfigClockSource+0x56>
 8017088:	2b60      	cmp	r3, #96	; 0x60
 801708a:	d03d      	beq.n	8017108 <HAL_TIM_ConfigClockSource+0xae>
 801708c:	d91e      	bls.n	80170cc <HAL_TIM_ConfigClockSource+0x72>
 801708e:	2b70      	cmp	r3, #112	; 0x70
 8017090:	d028      	beq.n	80170e4 <HAL_TIM_ConfigClockSource+0x8a>
 8017092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017096:	d130      	bne.n	80170fa <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8017098:	68cb      	ldr	r3, [r1, #12]
 801709a:	684a      	ldr	r2, [r1, #4]
 801709c:	6889      	ldr	r1, [r1, #8]
 801709e:	6800      	ldr	r0, [r0, #0]
 80170a0:	f7ff ffcf 	bl	8017042 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80170a4:	6822      	ldr	r2, [r4, #0]
 80170a6:	6893      	ldr	r3, [r2, #8]
 80170a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80170ac:	6093      	str	r3, [r2, #8]
      break;
 80170ae:	e024      	b.n	80170fa <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80170b0:	2b10      	cmp	r3, #16
 80170b2:	d006      	beq.n	80170c2 <HAL_TIM_ConfigClockSource+0x68>
 80170b4:	d904      	bls.n	80170c0 <HAL_TIM_ConfigClockSource+0x66>
 80170b6:	2b20      	cmp	r3, #32
 80170b8:	d003      	beq.n	80170c2 <HAL_TIM_ConfigClockSource+0x68>
 80170ba:	2b30      	cmp	r3, #48	; 0x30
 80170bc:	d001      	beq.n	80170c2 <HAL_TIM_ConfigClockSource+0x68>
 80170be:	e01c      	b.n	80170fa <HAL_TIM_ConfigClockSource+0xa0>
 80170c0:	b9db      	cbnz	r3, 80170fa <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80170c2:	4619      	mov	r1, r3
 80170c4:	6820      	ldr	r0, [r4, #0]
 80170c6:	f7ff fe52 	bl	8016d6e <TIM_ITRx_SetConfig>
      break;
 80170ca:	e016      	b.n	80170fa <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80170cc:	2b50      	cmp	r3, #80	; 0x50
 80170ce:	d114      	bne.n	80170fa <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80170d0:	68ca      	ldr	r2, [r1, #12]
 80170d2:	6849      	ldr	r1, [r1, #4]
 80170d4:	6800      	ldr	r0, [r0, #0]
 80170d6:	f7ff fe23 	bl	8016d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80170da:	2150      	movs	r1, #80	; 0x50
 80170dc:	6820      	ldr	r0, [r4, #0]
 80170de:	f7ff fe46 	bl	8016d6e <TIM_ITRx_SetConfig>
      break;
 80170e2:	e00a      	b.n	80170fa <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80170e4:	68cb      	ldr	r3, [r1, #12]
 80170e6:	684a      	ldr	r2, [r1, #4]
 80170e8:	6889      	ldr	r1, [r1, #8]
 80170ea:	6800      	ldr	r0, [r0, #0]
 80170ec:	f7ff ffa9 	bl	8017042 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80170f0:	6822      	ldr	r2, [r4, #0]
 80170f2:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80170f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80170f8:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80170fa:	2301      	movs	r3, #1
 80170fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8017100:	2000      	movs	r0, #0
 8017102:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8017106:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8017108:	68ca      	ldr	r2, [r1, #12]
 801710a:	6849      	ldr	r1, [r1, #4]
 801710c:	6800      	ldr	r0, [r0, #0]
 801710e:	f7ff fe1a 	bl	8016d46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8017112:	2160      	movs	r1, #96	; 0x60
 8017114:	6820      	ldr	r0, [r4, #0]
 8017116:	f7ff fe2a 	bl	8016d6e <TIM_ITRx_SetConfig>
      break;
 801711a:	e7ee      	b.n	80170fa <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 801711c:	68ca      	ldr	r2, [r1, #12]
 801711e:	6849      	ldr	r1, [r1, #4]
 8017120:	6800      	ldr	r0, [r0, #0]
 8017122:	f7ff fdfd 	bl	8016d20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8017126:	2140      	movs	r1, #64	; 0x40
 8017128:	6820      	ldr	r0, [r4, #0]
 801712a:	f7ff fe20 	bl	8016d6e <TIM_ITRx_SetConfig>
      break;
 801712e:	e7e4      	b.n	80170fa <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 8017130:	2002      	movs	r0, #2
}
 8017132:	4770      	bx	lr

08017134 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017134:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8017138:	2b01      	cmp	r3, #1
 801713a:	d03b      	beq.n	80171b4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 801713c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 801713e:	2301      	movs	r3, #1
 8017140:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017144:	2302      	movs	r3, #2
 8017146:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801714a:	6803      	ldr	r3, [r0, #0]
 801714c:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801714e:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017150:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017154:	680a      	ldr	r2, [r1, #0]
 8017156:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017158:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801715a:	6803      	ldr	r3, [r0, #0]
 801715c:	4a16      	ldr	r2, [pc, #88]	; (80171b8 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 801715e:	4293      	cmp	r3, r2
 8017160:	d01a      	beq.n	8017198 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8017162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017166:	d017      	beq.n	8017198 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8017168:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 801716c:	4293      	cmp	r3, r2
 801716e:	d013      	beq.n	8017198 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8017170:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8017174:	4293      	cmp	r3, r2
 8017176:	d00f      	beq.n	8017198 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8017178:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801717c:	4293      	cmp	r3, r2
 801717e:	d00b      	beq.n	8017198 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8017180:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8017184:	4293      	cmp	r3, r2
 8017186:	d007      	beq.n	8017198 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8017188:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 801718c:	4293      	cmp	r3, r2
 801718e:	d003      	beq.n	8017198 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8017190:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8017194:	4293      	cmp	r3, r2
 8017196:	d104      	bne.n	80171a2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017198:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801719c:	684a      	ldr	r2, [r1, #4]
 801719e:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80171a0:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80171a2:	2301      	movs	r3, #1
 80171a4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80171a8:	2300      	movs	r3, #0
 80171aa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80171ae:	4618      	mov	r0, r3
}
 80171b0:	bc30      	pop	{r4, r5}
 80171b2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80171b4:	2002      	movs	r0, #2
}
 80171b6:	4770      	bx	lr
 80171b8:	40010000 	.word	0x40010000

080171bc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80171bc:	4770      	bx	lr

080171be <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80171be:	4770      	bx	lr

080171c0 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80171c0:	6802      	ldr	r2, [r0, #0]
 80171c2:	68d3      	ldr	r3, [r2, #12]
 80171c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80171c8:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80171ca:	2320      	movs	r3, #32
 80171cc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 80171d0:	4770      	bx	lr

080171d2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80171d2:	6802      	ldr	r2, [r0, #0]
 80171d4:	68d3      	ldr	r3, [r2, #12]
 80171d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80171da:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80171dc:	6802      	ldr	r2, [r0, #0]
 80171de:	6953      	ldr	r3, [r2, #20]
 80171e0:	f023 0301 	bic.w	r3, r3, #1
 80171e4:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80171e6:	2320      	movs	r3, #32
 80171e8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80171ec:	4770      	bx	lr
	...

080171f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80171f0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80171f4:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80171f6:	6802      	ldr	r2, [r0, #0]
 80171f8:	6913      	ldr	r3, [r2, #16]
 80171fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80171fe:	68c1      	ldr	r1, [r0, #12]
 8017200:	430b      	orrs	r3, r1
 8017202:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8017204:	6883      	ldr	r3, [r0, #8]
 8017206:	6902      	ldr	r2, [r0, #16]
 8017208:	4313      	orrs	r3, r2
 801720a:	6942      	ldr	r2, [r0, #20]
 801720c:	4313      	orrs	r3, r2
 801720e:	69c2      	ldr	r2, [r0, #28]
 8017210:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8017212:	6801      	ldr	r1, [r0, #0]
 8017214:	68cb      	ldr	r3, [r1, #12]
 8017216:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 801721a:	f023 030c 	bic.w	r3, r3, #12
 801721e:	4313      	orrs	r3, r2
 8017220:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8017222:	6802      	ldr	r2, [r0, #0]
 8017224:	6953      	ldr	r3, [r2, #20]
 8017226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801722a:	6981      	ldr	r1, [r0, #24]
 801722c:	430b      	orrs	r3, r1
 801722e:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8017230:	69c3      	ldr	r3, [r0, #28]
 8017232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017236:	d03b      	beq.n	80172b0 <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8017238:	6803      	ldr	r3, [r0, #0]
 801723a:	4a71      	ldr	r2, [pc, #452]	; (8017400 <UART_SetConfig+0x210>)
 801723c:	4293      	cmp	r3, r2
 801723e:	f000 80ab 	beq.w	8017398 <UART_SetConfig+0x1a8>
 8017242:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8017246:	4293      	cmp	r3, r2
 8017248:	f000 80a6 	beq.w	8017398 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 801724c:	f7fe fb0a 	bl	8015864 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8017250:	f04f 0900 	mov.w	r9, #0
 8017254:	1806      	adds	r6, r0, r0
 8017256:	eb49 0709 	adc.w	r7, r9, r9
 801725a:	eb16 0b00 	adds.w	fp, r6, r0
 801725e:	eb47 0c09 	adc.w	ip, r7, r9
 8017262:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8017266:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 801726a:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 801726e:	4693      	mov	fp, r2
 8017270:	469c      	mov	ip, r3
 8017272:	6863      	ldr	r3, [r4, #4]
 8017274:	009a      	lsls	r2, r3, #2
 8017276:	0f9b      	lsrs	r3, r3, #30
 8017278:	eb10 000b 	adds.w	r0, r0, fp
 801727c:	eb49 010c 	adc.w	r1, r9, ip
 8017280:	f7f9 fc6c 	bl	8010b5c <__aeabi_uldivmod>
 8017284:	4d5f      	ldr	r5, [pc, #380]	; (8017404 <UART_SetConfig+0x214>)
 8017286:	fba5 3200 	umull	r3, r2, r5, r0
 801728a:	0951      	lsrs	r1, r2, #5
 801728c:	2264      	movs	r2, #100	; 0x64
 801728e:	fb02 0211 	mls	r2, r2, r1, r0
 8017292:	0113      	lsls	r3, r2, #4
 8017294:	3332      	adds	r3, #50	; 0x32
 8017296:	fba5 2303 	umull	r2, r3, r5, r3
 801729a:	095b      	lsrs	r3, r3, #5
 801729c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80172a0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80172a4:	f003 030f 	and.w	r3, r3, #15
 80172a8:	6821      	ldr	r1, [r4, #0]
 80172aa:	4413      	add	r3, r2
 80172ac:	608b      	str	r3, [r1, #8]
    }
  }
}
 80172ae:	e0a4      	b.n	80173fa <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80172b0:	6803      	ldr	r3, [r0, #0]
 80172b2:	4a53      	ldr	r2, [pc, #332]	; (8017400 <UART_SetConfig+0x210>)
 80172b4:	4293      	cmp	r3, r2
 80172b6:	d039      	beq.n	801732c <UART_SetConfig+0x13c>
 80172b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80172bc:	4293      	cmp	r3, r2
 80172be:	d035      	beq.n	801732c <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80172c0:	f7fe fad0 	bl	8015864 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80172c4:	4683      	mov	fp, r0
 80172c6:	f04f 0c00 	mov.w	ip, #0
 80172ca:	1806      	adds	r6, r0, r0
 80172cc:	eb4c 070c 	adc.w	r7, ip, ip
 80172d0:	eb16 0800 	adds.w	r8, r6, r0
 80172d4:	eb47 090c 	adc.w	r9, r7, ip
 80172d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80172dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80172e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80172e4:	4690      	mov	r8, r2
 80172e6:	4699      	mov	r9, r3
 80172e8:	6862      	ldr	r2, [r4, #4]
 80172ea:	2100      	movs	r1, #0
 80172ec:	1892      	adds	r2, r2, r2
 80172ee:	eb41 0301 	adc.w	r3, r1, r1
 80172f2:	eb1b 0008 	adds.w	r0, fp, r8
 80172f6:	eb4c 0109 	adc.w	r1, ip, r9
 80172fa:	f7f9 fc2f 	bl	8010b5c <__aeabi_uldivmod>
 80172fe:	4d41      	ldr	r5, [pc, #260]	; (8017404 <UART_SetConfig+0x214>)
 8017300:	fba5 3200 	umull	r3, r2, r5, r0
 8017304:	0951      	lsrs	r1, r2, #5
 8017306:	2264      	movs	r2, #100	; 0x64
 8017308:	fb02 0211 	mls	r2, r2, r1, r0
 801730c:	00d3      	lsls	r3, r2, #3
 801730e:	3332      	adds	r3, #50	; 0x32
 8017310:	fba5 2303 	umull	r2, r3, r5, r3
 8017314:	095b      	lsrs	r3, r3, #5
 8017316:	005a      	lsls	r2, r3, #1
 8017318:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 801731c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8017320:	f003 0307 	and.w	r3, r3, #7
 8017324:	6821      	ldr	r1, [r4, #0]
 8017326:	4413      	add	r3, r2
 8017328:	608b      	str	r3, [r1, #8]
 801732a:	e066      	b.n	80173fa <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 801732c:	f7fe faaa 	bl	8015884 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8017330:	4680      	mov	r8, r0
 8017332:	f04f 0900 	mov.w	r9, #0
 8017336:	1806      	adds	r6, r0, r0
 8017338:	eb49 0709 	adc.w	r7, r9, r9
 801733c:	eb16 0b00 	adds.w	fp, r6, r0
 8017340:	eb47 0c09 	adc.w	ip, r7, r9
 8017344:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8017348:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 801734c:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 8017350:	4693      	mov	fp, r2
 8017352:	469c      	mov	ip, r3
 8017354:	6862      	ldr	r2, [r4, #4]
 8017356:	2100      	movs	r1, #0
 8017358:	1892      	adds	r2, r2, r2
 801735a:	eb41 0301 	adc.w	r3, r1, r1
 801735e:	eb18 000b 	adds.w	r0, r8, fp
 8017362:	eb49 010c 	adc.w	r1, r9, ip
 8017366:	f7f9 fbf9 	bl	8010b5c <__aeabi_uldivmod>
 801736a:	4d26      	ldr	r5, [pc, #152]	; (8017404 <UART_SetConfig+0x214>)
 801736c:	fba5 3200 	umull	r3, r2, r5, r0
 8017370:	0951      	lsrs	r1, r2, #5
 8017372:	2264      	movs	r2, #100	; 0x64
 8017374:	fb02 0211 	mls	r2, r2, r1, r0
 8017378:	00d3      	lsls	r3, r2, #3
 801737a:	3332      	adds	r3, #50	; 0x32
 801737c:	fba5 2303 	umull	r2, r3, r5, r3
 8017380:	095b      	lsrs	r3, r3, #5
 8017382:	005a      	lsls	r2, r3, #1
 8017384:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8017388:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801738c:	f003 0307 	and.w	r3, r3, #7
 8017390:	6821      	ldr	r1, [r4, #0]
 8017392:	4413      	add	r3, r2
 8017394:	608b      	str	r3, [r1, #8]
 8017396:	e030      	b.n	80173fa <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8017398:	f7fe fa74 	bl	8015884 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801739c:	f04f 0900 	mov.w	r9, #0
 80173a0:	1806      	adds	r6, r0, r0
 80173a2:	eb49 0709 	adc.w	r7, r9, r9
 80173a6:	eb16 0b00 	adds.w	fp, r6, r0
 80173aa:	eb47 0c09 	adc.w	ip, r7, r9
 80173ae:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80173b2:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 80173b6:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 80173ba:	4693      	mov	fp, r2
 80173bc:	469c      	mov	ip, r3
 80173be:	6863      	ldr	r3, [r4, #4]
 80173c0:	009a      	lsls	r2, r3, #2
 80173c2:	0f9b      	lsrs	r3, r3, #30
 80173c4:	eb10 000b 	adds.w	r0, r0, fp
 80173c8:	eb49 010c 	adc.w	r1, r9, ip
 80173cc:	f7f9 fbc6 	bl	8010b5c <__aeabi_uldivmod>
 80173d0:	4d0c      	ldr	r5, [pc, #48]	; (8017404 <UART_SetConfig+0x214>)
 80173d2:	fba5 3200 	umull	r3, r2, r5, r0
 80173d6:	0951      	lsrs	r1, r2, #5
 80173d8:	2264      	movs	r2, #100	; 0x64
 80173da:	fb02 0211 	mls	r2, r2, r1, r0
 80173de:	0113      	lsls	r3, r2, #4
 80173e0:	3332      	adds	r3, #50	; 0x32
 80173e2:	fba5 2303 	umull	r2, r3, r5, r3
 80173e6:	095b      	lsrs	r3, r3, #5
 80173e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80173ec:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80173f0:	f003 030f 	and.w	r3, r3, #15
 80173f4:	6821      	ldr	r1, [r4, #0]
 80173f6:	4413      	add	r3, r2
 80173f8:	608b      	str	r3, [r1, #8]
}
 80173fa:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80173fe:	bf00      	nop
 8017400:	40011000 	.word	0x40011000
 8017404:	51eb851f 	.word	0x51eb851f

08017408 <HAL_UART_Init>:
  if (huart == NULL)
 8017408:	b358      	cbz	r0, 8017462 <HAL_UART_Init+0x5a>
{
 801740a:	b510      	push	{r4, lr}
 801740c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 801740e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8017412:	b30b      	cbz	r3, 8017458 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8017414:	2324      	movs	r3, #36	; 0x24
 8017416:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 801741a:	6822      	ldr	r2, [r4, #0]
 801741c:	68d3      	ldr	r3, [r2, #12]
 801741e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017422:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8017424:	4620      	mov	r0, r4
 8017426:	f7ff fee3 	bl	80171f0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801742a:	6822      	ldr	r2, [r4, #0]
 801742c:	6913      	ldr	r3, [r2, #16]
 801742e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8017432:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017434:	6822      	ldr	r2, [r4, #0]
 8017436:	6953      	ldr	r3, [r2, #20]
 8017438:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 801743c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 801743e:	6822      	ldr	r2, [r4, #0]
 8017440:	68d3      	ldr	r3, [r2, #12]
 8017442:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017446:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017448:	2000      	movs	r0, #0
 801744a:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 801744c:	2320      	movs	r3, #32
 801744e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8017452:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8017456:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8017458:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 801745c:	f7fa fdf8 	bl	8012050 <HAL_UART_MspInit>
 8017460:	e7d8      	b.n	8017414 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8017462:	2001      	movs	r0, #1
}
 8017464:	4770      	bx	lr
	...

08017468 <HAL_UART_Transmit_DMA>:
{
 8017468:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 801746a:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 801746e:	b2e4      	uxtb	r4, r4
 8017470:	2c20      	cmp	r4, #32
 8017472:	d131      	bne.n	80174d8 <HAL_UART_Transmit_DMA+0x70>
    if ((pData == NULL) || (Size == 0U))
 8017474:	2900      	cmp	r1, #0
 8017476:	d031      	beq.n	80174dc <HAL_UART_Transmit_DMA+0x74>
 8017478:	2a00      	cmp	r2, #0
 801747a:	d031      	beq.n	80174e0 <HAL_UART_Transmit_DMA+0x78>
    __HAL_LOCK(huart);
 801747c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8017480:	2b01      	cmp	r3, #1
 8017482:	d02f      	beq.n	80174e4 <HAL_UART_Transmit_DMA+0x7c>
 8017484:	4613      	mov	r3, r2
 8017486:	4604      	mov	r4, r0
 8017488:	2201      	movs	r2, #1
 801748a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 801748e:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8017490:	8483      	strh	r3, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 8017492:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017494:	2500      	movs	r5, #0
 8017496:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8017498:	2221      	movs	r2, #33	; 0x21
 801749a:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801749e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80174a0:	4811      	ldr	r0, [pc, #68]	; (80174e8 <HAL_UART_Transmit_DMA+0x80>)
 80174a2:	63d0      	str	r0, [r2, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80174a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80174a6:	4811      	ldr	r0, [pc, #68]	; (80174ec <HAL_UART_Transmit_DMA+0x84>)
 80174a8:	6410      	str	r0, [r2, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80174aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80174ac:	4810      	ldr	r0, [pc, #64]	; (80174f0 <HAL_UART_Transmit_DMA+0x88>)
 80174ae:	64d0      	str	r0, [r2, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 80174b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80174b2:	6515      	str	r5, [r2, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80174b4:	6822      	ldr	r2, [r4, #0]
 80174b6:	3204      	adds	r2, #4
 80174b8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80174ba:	f7fb fc25 	bl	8012d08 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80174be:	6823      	ldr	r3, [r4, #0]
 80174c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80174c4:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 80174c6:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80174ca:	6822      	ldr	r2, [r4, #0]
 80174cc:	6953      	ldr	r3, [r2, #20]
 80174ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174d2:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80174d4:	4628      	mov	r0, r5
 80174d6:	e000      	b.n	80174da <HAL_UART_Transmit_DMA+0x72>
    return HAL_BUSY;
 80174d8:	2002      	movs	r0, #2
}
 80174da:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80174dc:	2001      	movs	r0, #1
 80174de:	e7fc      	b.n	80174da <HAL_UART_Transmit_DMA+0x72>
 80174e0:	2001      	movs	r0, #1
 80174e2:	e7fa      	b.n	80174da <HAL_UART_Transmit_DMA+0x72>
    __HAL_LOCK(huart);
 80174e4:	2002      	movs	r0, #2
 80174e6:	e7f8      	b.n	80174da <HAL_UART_Transmit_DMA+0x72>
 80174e8:	08017685 	.word	0x08017685
 80174ec:	080176b7 	.word	0x080176b7
 80174f0:	0801770d 	.word	0x0801770d

080174f4 <HAL_UART_Receive_DMA>:
{
 80174f4:	b530      	push	{r4, r5, lr}
 80174f6:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 80174f8:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 80174fc:	b2e4      	uxtb	r4, r4
 80174fe:	2c20      	cmp	r4, #32
 8017500:	d13d      	bne.n	801757e <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 8017502:	2900      	cmp	r1, #0
 8017504:	d03e      	beq.n	8017584 <HAL_UART_Receive_DMA+0x90>
 8017506:	2a00      	cmp	r2, #0
 8017508:	d03e      	beq.n	8017588 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 801750a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801750e:	2b01      	cmp	r3, #1
 8017510:	d03c      	beq.n	801758c <HAL_UART_Receive_DMA+0x98>
 8017512:	4613      	mov	r3, r2
 8017514:	460a      	mov	r2, r1
 8017516:	4604      	mov	r4, r0
 8017518:	2101      	movs	r1, #1
 801751a:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 801751e:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8017520:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017522:	2500      	movs	r5, #0
 8017524:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8017526:	2122      	movs	r1, #34	; 0x22
 8017528:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801752c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 801752e:	4818      	ldr	r0, [pc, #96]	; (8017590 <HAL_UART_Receive_DMA+0x9c>)
 8017530:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8017532:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017534:	4817      	ldr	r0, [pc, #92]	; (8017594 <HAL_UART_Receive_DMA+0xa0>)
 8017536:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8017538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801753a:	4817      	ldr	r0, [pc, #92]	; (8017598 <HAL_UART_Receive_DMA+0xa4>)
 801753c:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 801753e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017540:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8017542:	6821      	ldr	r1, [r4, #0]
 8017544:	3104      	adds	r1, #4
 8017546:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8017548:	f7fb fbde 	bl	8012d08 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 801754c:	9501      	str	r5, [sp, #4]
 801754e:	6823      	ldr	r3, [r4, #0]
 8017550:	681a      	ldr	r2, [r3, #0]
 8017552:	9201      	str	r2, [sp, #4]
 8017554:	685a      	ldr	r2, [r3, #4]
 8017556:	9201      	str	r2, [sp, #4]
 8017558:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 801755a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801755e:	68da      	ldr	r2, [r3, #12]
 8017560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017564:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017566:	6822      	ldr	r2, [r4, #0]
 8017568:	6953      	ldr	r3, [r2, #20]
 801756a:	f043 0301 	orr.w	r3, r3, #1
 801756e:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017570:	6822      	ldr	r2, [r4, #0]
 8017572:	6953      	ldr	r3, [r2, #20]
 8017574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017578:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 801757a:	4628      	mov	r0, r5
 801757c:	e000      	b.n	8017580 <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 801757e:	2002      	movs	r0, #2
}
 8017580:	b003      	add	sp, #12
 8017582:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8017584:	2001      	movs	r0, #1
 8017586:	e7fb      	b.n	8017580 <HAL_UART_Receive_DMA+0x8c>
 8017588:	2001      	movs	r0, #1
 801758a:	e7f9      	b.n	8017580 <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 801758c:	2002      	movs	r0, #2
 801758e:	e7f7      	b.n	8017580 <HAL_UART_Receive_DMA+0x8c>
 8017590:	080176c1 	.word	0x080176c1
 8017594:	08017701 	.word	0x08017701
 8017598:	0801770d 	.word	0x0801770d

0801759c <HAL_UART_DMAPause>:
  __HAL_LOCK(huart);
 801759c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80175a0:	2b01      	cmp	r3, #1
 80175a2:	d031      	beq.n	8017608 <HAL_UART_DMAPause+0x6c>
 80175a4:	2301      	movs	r3, #1
 80175a6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80175aa:	6801      	ldr	r1, [r0, #0]
 80175ac:	694a      	ldr	r2, [r1, #20]
 80175ae:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80175b2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80175b6:	b2db      	uxtb	r3, r3
 80175b8:	2b21      	cmp	r3, #33	; 0x21
 80175ba:	d00d      	beq.n	80175d8 <HAL_UART_DMAPause+0x3c>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80175bc:	6801      	ldr	r1, [r0, #0]
 80175be:	694a      	ldr	r2, [r1, #20]
 80175c0:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80175c4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80175c8:	b2db      	uxtb	r3, r3
 80175ca:	2b22      	cmp	r3, #34	; 0x22
 80175cc:	d00b      	beq.n	80175e6 <HAL_UART_DMAPause+0x4a>
  __HAL_UNLOCK(huart);
 80175ce:	2300      	movs	r3, #0
 80175d0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 80175d4:	4618      	mov	r0, r3
 80175d6:	4770      	bx	lr
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80175d8:	2a00      	cmp	r2, #0
 80175da:	d0ef      	beq.n	80175bc <HAL_UART_DMAPause+0x20>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80175dc:	694b      	ldr	r3, [r1, #20]
 80175de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80175e2:	614b      	str	r3, [r1, #20]
 80175e4:	e7ea      	b.n	80175bc <HAL_UART_DMAPause+0x20>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80175e6:	2a00      	cmp	r2, #0
 80175e8:	d0f1      	beq.n	80175ce <HAL_UART_DMAPause+0x32>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80175ea:	68cb      	ldr	r3, [r1, #12]
 80175ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80175f0:	60cb      	str	r3, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80175f2:	6802      	ldr	r2, [r0, #0]
 80175f4:	6953      	ldr	r3, [r2, #20]
 80175f6:	f023 0301 	bic.w	r3, r3, #1
 80175fa:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80175fc:	6802      	ldr	r2, [r0, #0]
 80175fe:	6953      	ldr	r3, [r2, #20]
 8017600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017604:	6153      	str	r3, [r2, #20]
 8017606:	e7e2      	b.n	80175ce <HAL_UART_DMAPause+0x32>
  __HAL_LOCK(huart);
 8017608:	2002      	movs	r0, #2
}
 801760a:	4770      	bx	lr

0801760c <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 801760c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8017610:	2b01      	cmp	r3, #1
 8017612:	d034      	beq.n	801767e <HAL_UART_DMAResume+0x72>
 8017614:	2301      	movs	r3, #1
 8017616:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801761a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 801761e:	b2db      	uxtb	r3, r3
 8017620:	2b21      	cmp	r3, #33	; 0x21
 8017622:	d009      	beq.n	8017638 <HAL_UART_DMAResume+0x2c>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017624:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8017628:	b2db      	uxtb	r3, r3
 801762a:	2b22      	cmp	r3, #34	; 0x22
 801762c:	d00a      	beq.n	8017644 <HAL_UART_DMAResume+0x38>
  __HAL_UNLOCK(huart);
 801762e:	2300      	movs	r3, #0
 8017630:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8017634:	4618      	mov	r0, r3
}
 8017636:	4770      	bx	lr
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017638:	6802      	ldr	r2, [r0, #0]
 801763a:	6953      	ldr	r3, [r2, #20]
 801763c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017640:	6153      	str	r3, [r2, #20]
 8017642:	e7ef      	b.n	8017624 <HAL_UART_DMAResume+0x18>
{
 8017644:	b082      	sub	sp, #8
    __HAL_UART_CLEAR_OREFLAG(huart);
 8017646:	2300      	movs	r3, #0
 8017648:	9301      	str	r3, [sp, #4]
 801764a:	6803      	ldr	r3, [r0, #0]
 801764c:	681a      	ldr	r2, [r3, #0]
 801764e:	9201      	str	r2, [sp, #4]
 8017650:	685a      	ldr	r2, [r3, #4]
 8017652:	9201      	str	r2, [sp, #4]
 8017654:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017656:	68da      	ldr	r2, [r3, #12]
 8017658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801765c:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801765e:	6802      	ldr	r2, [r0, #0]
 8017660:	6953      	ldr	r3, [r2, #20]
 8017662:	f043 0301 	orr.w	r3, r3, #1
 8017666:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017668:	6802      	ldr	r2, [r0, #0]
 801766a:	6953      	ldr	r3, [r2, #20]
 801766c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017670:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(huart);
 8017672:	2300      	movs	r3, #0
 8017674:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8017678:	4618      	mov	r0, r3
}
 801767a:	b002      	add	sp, #8
 801767c:	4770      	bx	lr
  __HAL_LOCK(huart);
 801767e:	2002      	movs	r0, #2
 8017680:	4770      	bx	lr

08017682 <HAL_UART_TxCpltCallback>:
}
 8017682:	4770      	bx	lr

08017684 <UART_DMATransmitCplt>:
{
 8017684:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8017686:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8017688:	6802      	ldr	r2, [r0, #0]
 801768a:	6812      	ldr	r2, [r2, #0]
 801768c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8017690:	d10c      	bne.n	80176ac <UART_DMATransmitCplt+0x28>
    huart->TxXferCount = 0x00U;
 8017692:	2200      	movs	r2, #0
 8017694:	84da      	strh	r2, [r3, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8017696:	6819      	ldr	r1, [r3, #0]
 8017698:	694a      	ldr	r2, [r1, #20]
 801769a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801769e:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80176a0:	681a      	ldr	r2, [r3, #0]
 80176a2:	68d3      	ldr	r3, [r2, #12]
 80176a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80176a8:	60d3      	str	r3, [r2, #12]
}
 80176aa:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80176ac:	4618      	mov	r0, r3
 80176ae:	f7ff ffe8 	bl	8017682 <HAL_UART_TxCpltCallback>
}
 80176b2:	e7fa      	b.n	80176aa <UART_DMATransmitCplt+0x26>

080176b4 <HAL_UART_TxHalfCpltCallback>:
}
 80176b4:	4770      	bx	lr

080176b6 <UART_DMATxHalfCplt>:
{
 80176b6:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80176b8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80176ba:	f7ff fffb 	bl	80176b4 <HAL_UART_TxHalfCpltCallback>
}
 80176be:	bd08      	pop	{r3, pc}

080176c0 <UART_DMAReceiveCplt>:
{
 80176c0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80176c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80176c4:	6802      	ldr	r2, [r0, #0]
 80176c6:	6812      	ldr	r2, [r2, #0]
 80176c8:	f412 7f80 	tst.w	r2, #256	; 0x100
 80176cc:	d113      	bne.n	80176f6 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 80176ce:	2200      	movs	r2, #0
 80176d0:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80176d2:	6819      	ldr	r1, [r3, #0]
 80176d4:	68ca      	ldr	r2, [r1, #12]
 80176d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80176da:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80176dc:	6819      	ldr	r1, [r3, #0]
 80176de:	694a      	ldr	r2, [r1, #20]
 80176e0:	f022 0201 	bic.w	r2, r2, #1
 80176e4:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80176e6:	6819      	ldr	r1, [r3, #0]
 80176e8:	694a      	ldr	r2, [r1, #20]
 80176ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80176ee:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80176f0:	2220      	movs	r2, #32
 80176f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 80176f6:	4618      	mov	r0, r3
 80176f8:	f003 fdc8 	bl	801b28c <HAL_UART_RxCpltCallback>
}
 80176fc:	bd08      	pop	{r3, pc}

080176fe <HAL_UART_RxHalfCpltCallback>:
}
 80176fe:	4770      	bx	lr

08017700 <UART_DMARxHalfCplt>:
{
 8017700:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8017702:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8017704:	f7ff fffb 	bl	80176fe <HAL_UART_RxHalfCpltCallback>
}
 8017708:	bd08      	pop	{r3, pc}

0801770a <HAL_UART_ErrorCallback>:
}
 801770a:	4770      	bx	lr

0801770c <UART_DMAError>:
{
 801770c:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801770e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8017710:	6823      	ldr	r3, [r4, #0]
 8017712:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8017714:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8017718:	b2db      	uxtb	r3, r3
 801771a:	2b21      	cmp	r3, #33	; 0x21
 801771c:	d010      	beq.n	8017740 <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 801771e:	6823      	ldr	r3, [r4, #0]
 8017720:	695a      	ldr	r2, [r3, #20]
 8017722:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8017726:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 801772a:	b2db      	uxtb	r3, r3
 801772c:	2b22      	cmp	r3, #34	; 0x22
 801772e:	d011      	beq.n	8017754 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8017730:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017732:	f043 0310 	orr.w	r3, r3, #16
 8017736:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8017738:	4620      	mov	r0, r4
 801773a:	f7ff ffe6 	bl	801770a <HAL_UART_ErrorCallback>
}
 801773e:	bd10      	pop	{r4, pc}
 8017740:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8017744:	2a00      	cmp	r2, #0
 8017746:	d0ea      	beq.n	801771e <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8017748:	2300      	movs	r3, #0
 801774a:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 801774c:	4620      	mov	r0, r4
 801774e:	f7ff fd37 	bl	80171c0 <UART_EndTxTransfer>
 8017752:	e7e4      	b.n	801771e <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8017754:	2a00      	cmp	r2, #0
 8017756:	d0eb      	beq.n	8017730 <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8017758:	2300      	movs	r3, #0
 801775a:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 801775c:	4620      	mov	r0, r4
 801775e:	f7ff fd38 	bl	80171d2 <UART_EndRxTransfer>
 8017762:	e7e5      	b.n	8017730 <UART_DMAError+0x24>

08017764 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8017764:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8017766:	680b      	ldr	r3, [r1, #0]
 8017768:	2b01      	cmp	r3, #1
 801776a:	d01a      	beq.n	80177a2 <FMC_SDRAM_Init+0x3e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 801776c:	6802      	ldr	r2, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 801776e:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8017772:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8017776:	684b      	ldr	r3, [r1, #4]
                                               Init->RowBitsNumber      |\
 8017778:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 801777a:	4323      	orrs	r3, r4
                                               Init->MemoryDataWidth    |\
 801777c:	68cc      	ldr	r4, [r1, #12]
                                               Init->RowBitsNumber      |\
 801777e:	4323      	orrs	r3, r4
                                               Init->InternalBankNumber |\
 8017780:	690c      	ldr	r4, [r1, #16]
                                               Init->MemoryDataWidth    |\
 8017782:	4323      	orrs	r3, r4
                                               Init->CASLatency         |\
 8017784:	694c      	ldr	r4, [r1, #20]
                                               Init->InternalBankNumber |\
 8017786:	4323      	orrs	r3, r4
                                               Init->WriteProtection    |\
 8017788:	698c      	ldr	r4, [r1, #24]
                                               Init->CASLatency         |\
 801778a:	4323      	orrs	r3, r4
                                               Init->SDClockPeriod      |\
 801778c:	69cc      	ldr	r4, [r1, #28]
                                               Init->WriteProtection    |\
 801778e:	4323      	orrs	r3, r4
                                               Init->ReadBurst          |\
 8017790:	6a0c      	ldr	r4, [r1, #32]
                                               Init->SDClockPeriod      |\
 8017792:	4323      	orrs	r3, r4
                                               Init->ReadPipeDelay
 8017794:	6a49      	ldr	r1, [r1, #36]	; 0x24
                                               Init->ReadBurst          |\
 8017796:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8017798:	4313      	orrs	r3, r2
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 801779a:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 801779c:	2000      	movs	r0, #0
 801779e:	bc30      	pop	{r4, r5}
 80177a0:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80177a2:	6802      	ldr	r2, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80177a4:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80177a8:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 80177aa:	6a0c      	ldr	r4, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80177ac:	431c      	orrs	r4, r3
                        Init->ReadPipeDelay);  
 80177ae:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 80177b0:	431c      	orrs	r4, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80177b2:	4314      	orrs	r4, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80177b4:	6842      	ldr	r2, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80177b6:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80177ba:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80177be:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber      |\
 80177c0:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80177c2:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth    |\
 80177c4:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber      |\
 80177c6:	432b      	orrs	r3, r5
                       Init->InternalBankNumber |\
 80177c8:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth    |\
 80177ca:	432b      	orrs	r3, r5
                       Init->CASLatency         |\
 80177cc:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber |\
 80177ce:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 80177d0:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency         |\
 80177d2:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80177d4:	4313      	orrs	r3, r2
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80177d6:	6004      	str	r4, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80177d8:	6043      	str	r3, [r0, #4]
 80177da:	e7df      	b.n	801779c <FMC_SDRAM_Init+0x38>

080177dc <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80177dc:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80177de:	2a01      	cmp	r2, #1
 80177e0:	d021      	beq.n	8017826 <FMC_SDRAM_Timing_Init+0x4a>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80177e2:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80177e4:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80177e8:	680b      	ldr	r3, [r1, #0]
 80177ea:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80177ec:	684c      	ldr	r4, [r1, #4]
 80177ee:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80177f0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80177f4:	688c      	ldr	r4, [r1, #8]
 80177f6:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80177f8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80177fc:	68cc      	ldr	r4, [r1, #12]
 80177fe:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8017800:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8017804:	690c      	ldr	r4, [r1, #16]
 8017806:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8017808:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1U) << 20U)             |\
 801780c:	694c      	ldr	r4, [r1, #20]
 801780e:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8017810:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1U) << 24U));
 8017814:	6989      	ldr	r1, [r1, #24]
 8017816:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8017818:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801781c:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 801781e:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 8017820:	2000      	movs	r0, #0
 8017822:	bc30      	pop	{r4, r5}
 8017824:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8017826:	6884      	ldr	r4, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8017828:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
 801782c:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8017830:	68ca      	ldr	r2, [r1, #12]
 8017832:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1U) << 20U)); 
 8017834:	694b      	ldr	r3, [r1, #20]
 8017836:	1e5a      	subs	r2, r3, #1
 8017838:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 801783a:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 801783e:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8017840:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8017842:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8017846:	680b      	ldr	r3, [r1, #0]
 8017848:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 801784a:	684d      	ldr	r5, [r1, #4]
 801784c:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 801784e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8017852:	688d      	ldr	r5, [r1, #8]
 8017854:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8017856:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 801785a:	690d      	ldr	r5, [r1, #16]
 801785c:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 801785e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8017862:	6989      	ldr	r1, [r1, #24]
 8017864:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8017866:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 801786a:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 801786c:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 801786e:	60c3      	str	r3, [r0, #12]
 8017870:	e7d6      	b.n	8017820 <FMC_SDRAM_Timing_Init+0x44>

08017872 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8017872:	b570      	push	{r4, r5, r6, lr}
 8017874:	b082      	sub	sp, #8
 8017876:	4604      	mov	r4, r0
 8017878:	4615      	mov	r5, r2
  __IO uint32_t tmpr = 0U;
 801787a:	2300      	movs	r3, #0
 801787c:	9301      	str	r3, [sp, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 801787e:	680b      	ldr	r3, [r1, #0]
                    (Command->CommandTarget)                |\
 8017880:	684a      	ldr	r2, [r1, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8017882:	4313      	orrs	r3, r2
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8017884:	688a      	ldr	r2, [r1, #8]
 8017886:	3a01      	subs	r2, #1
                    (Command->CommandTarget)                |\
 8017888:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                    ((Command->ModeRegisterDefinition) << 9U)
 801788c:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 801788e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 8017892:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8017894:	9b01      	ldr	r3, [sp, #4]
 8017896:	6103      	str	r3, [r0, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8017898:	f7fb f8c4 	bl	8012a24 <HAL_GetTick>
 801789c:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 801789e:	69a3      	ldr	r3, [r4, #24]
 80178a0:	f013 0f20 	tst.w	r3, #32
 80178a4:	d00a      	beq.n	80178bc <FMC_SDRAM_SendCommand+0x4a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80178a6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80178aa:	d0f8      	beq.n	801789e <FMC_SDRAM_SendCommand+0x2c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80178ac:	b14d      	cbz	r5, 80178c2 <FMC_SDRAM_SendCommand+0x50>
 80178ae:	f7fb f8b9 	bl	8012a24 <HAL_GetTick>
 80178b2:	1b80      	subs	r0, r0, r6
 80178b4:	42a8      	cmp	r0, r5
 80178b6:	d9f2      	bls.n	801789e <FMC_SDRAM_SendCommand+0x2c>
      {
        return HAL_TIMEOUT;
 80178b8:	2003      	movs	r0, #3
 80178ba:	e000      	b.n	80178be <FMC_SDRAM_SendCommand+0x4c>
      }
    }
  }

  return HAL_OK;
 80178bc:	2000      	movs	r0, #0
}
 80178be:	b002      	add	sp, #8
 80178c0:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 80178c2:	2003      	movs	r0, #3
 80178c4:	e7fb      	b.n	80178be <FMC_SDRAM_SendCommand+0x4c>

080178c6 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80178c6:	6943      	ldr	r3, [r0, #20]
 80178c8:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80178cc:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 80178ce:	2000      	movs	r0, #0
 80178d0:	4770      	bx	lr
	...

080178d4 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80178d4:	4b0b      	ldr	r3, [pc, #44]	; (8017904 <SDMMC_GetCmdError+0x30>)
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	4a0b      	ldr	r2, [pc, #44]	; (8017908 <SDMMC_GetCmdError+0x34>)
 80178da:	fba2 2303 	umull	r2, r3, r2, r3
 80178de:	0a5a      	lsrs	r2, r3, #9
 80178e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80178e4:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80178e8:	1e5a      	subs	r2, r3, #1
 80178ea:	b143      	cbz	r3, 80178fe <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80178ec:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 80178ee:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80178f0:	f011 0f80 	tst.w	r1, #128	; 0x80
 80178f4:	d0f8      	beq.n	80178e8 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80178f6:	23c5      	movs	r3, #197	; 0xc5
 80178f8:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80178fa:	2000      	movs	r0, #0
 80178fc:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80178fe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8017902:	4770      	bx	lr
 8017904:	2000005c 	.word	0x2000005c
 8017908:	10624dd3 	.word	0x10624dd3

0801790c <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801790c:	4b15      	ldr	r3, [pc, #84]	; (8017964 <SDMMC_GetCmdResp2+0x58>)
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	4a15      	ldr	r2, [pc, #84]	; (8017968 <SDMMC_GetCmdResp2+0x5c>)
 8017912:	fba2 2303 	umull	r2, r3, r2, r3
 8017916:	0a5a      	lsrs	r2, r3, #9
 8017918:	f241 3388 	movw	r3, #5000	; 0x1388
 801791c:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8017920:	1e5a      	subs	r2, r3, #1
 8017922:	b1db      	cbz	r3, 801795c <SDMMC_GetCmdResp2+0x50>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8017924:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8017926:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8017928:	f011 0f45 	tst.w	r1, #69	; 0x45
 801792c:	d0f8      	beq.n	8017920 <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801792e:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8017932:	d1f5      	bne.n	8017920 <SDMMC_GetCmdResp2+0x14>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8017934:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017936:	f013 0f04 	tst.w	r3, #4
 801793a:	d107      	bne.n	801794c <SDMMC_GetCmdResp2+0x40>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801793c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801793e:	f013 0f01 	tst.w	r3, #1
 8017942:	d107      	bne.n	8017954 <SDMMC_GetCmdResp2+0x48>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8017944:	23c5      	movs	r3, #197	; 0xc5
 8017946:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8017948:	2000      	movs	r0, #0
 801794a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801794c:	2304      	movs	r3, #4
 801794e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017950:	4618      	mov	r0, r3
 8017952:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8017954:	2301      	movs	r3, #1
 8017956:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017958:	4618      	mov	r0, r3
 801795a:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 801795c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8017960:	4770      	bx	lr
 8017962:	bf00      	nop
 8017964:	2000005c 	.word	0x2000005c
 8017968:	10624dd3 	.word	0x10624dd3

0801796c <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801796c:	4b11      	ldr	r3, [pc, #68]	; (80179b4 <SDMMC_GetCmdResp3+0x48>)
 801796e:	681b      	ldr	r3, [r3, #0]
 8017970:	4a11      	ldr	r2, [pc, #68]	; (80179b8 <SDMMC_GetCmdResp3+0x4c>)
 8017972:	fba2 2303 	umull	r2, r3, r2, r3
 8017976:	0a5a      	lsrs	r2, r3, #9
 8017978:	f241 3388 	movw	r3, #5000	; 0x1388
 801797c:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 8017980:	1e5a      	subs	r2, r3, #1
 8017982:	b19b      	cbz	r3, 80179ac <SDMMC_GetCmdResp3+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8017984:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8017986:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8017988:	f011 0f45 	tst.w	r1, #69	; 0x45
 801798c:	d0f8      	beq.n	8017980 <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801798e:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8017992:	d1f5      	bne.n	8017980 <SDMMC_GetCmdResp3+0x14>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8017994:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017996:	f013 0f04 	tst.w	r3, #4
 801799a:	d103      	bne.n	80179a4 <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801799c:	23c5      	movs	r3, #197	; 0xc5
 801799e:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80179a0:	2000      	movs	r0, #0
 80179a2:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80179a4:	2304      	movs	r3, #4
 80179a6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80179a8:	4618      	mov	r0, r3
 80179aa:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80179ac:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80179b0:	4770      	bx	lr
 80179b2:	bf00      	nop
 80179b4:	2000005c 	.word	0x2000005c
 80179b8:	10624dd3 	.word	0x10624dd3

080179bc <SDMMC_GetCmdResp7>:
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80179bc:	4b18      	ldr	r3, [pc, #96]	; (8017a20 <SDMMC_GetCmdResp7+0x64>)
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	4a18      	ldr	r2, [pc, #96]	; (8017a24 <SDMMC_GetCmdResp7+0x68>)
 80179c2:	fba2 2303 	umull	r2, r3, r2, r3
 80179c6:	0a5a      	lsrs	r2, r3, #9
 80179c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80179cc:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80179d0:	1e5a      	subs	r2, r3, #1
 80179d2:	b1fb      	cbz	r3, 8017a14 <SDMMC_GetCmdResp7+0x58>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 80179d4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80179d6:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80179d8:	f011 0f45 	tst.w	r1, #69	; 0x45
 80179dc:	d0f8      	beq.n	80179d0 <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80179de:	f411 6f00 	tst.w	r1, #2048	; 0x800
 80179e2:	d1f5      	bne.n	80179d0 <SDMMC_GetCmdResp7+0x14>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80179e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80179e6:	f013 0f04 	tst.w	r3, #4
 80179ea:	d10b      	bne.n	8017a04 <SDMMC_GetCmdResp7+0x48>
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80179ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80179ee:	f013 0f01 	tst.w	r3, #1
 80179f2:	d10b      	bne.n	8017a0c <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80179f4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80179f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80179fa:	d00e      	beq.n	8017a1a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80179fc:	2340      	movs	r3, #64	; 0x40
 80179fe:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8017a00:	2000      	movs	r0, #0
 8017a02:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8017a04:	2304      	movs	r3, #4
 8017a06:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017a08:	4618      	mov	r0, r3
 8017a0a:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8017a0c:	2301      	movs	r3, #1
 8017a0e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017a10:	4618      	mov	r0, r3
 8017a12:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8017a14:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8017a18:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 8017a1a:	2000      	movs	r0, #0
  
}
 8017a1c:	4770      	bx	lr
 8017a1e:	bf00      	nop
 8017a20:	2000005c 	.word	0x2000005c
 8017a24:	10624dd3 	.word	0x10624dd3

08017a28 <SDIO_Init>:
{
 8017a28:	b084      	sub	sp, #16
 8017a2a:	b410      	push	{r4}
 8017a2c:	ac02      	add	r4, sp, #8
 8017a2e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8017a32:	460b      	mov	r3, r1
 8017a34:	9a03      	ldr	r2, [sp, #12]
 8017a36:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 8017a38:	9a04      	ldr	r2, [sp, #16]
             Init.ClockBypass         |\
 8017a3a:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8017a3c:	9a05      	ldr	r2, [sp, #20]
             Init.ClockPowerSave      |\
 8017a3e:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8017a40:	9a06      	ldr	r2, [sp, #24]
             Init.BusWide             |\
 8017a42:	4313      	orrs	r3, r2
             Init.ClockDiv
 8017a44:	9a07      	ldr	r2, [sp, #28]
             Init.HardwareFlowControl |\
 8017a46:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8017a48:	6842      	ldr	r2, [r0, #4]
 8017a4a:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8017a4e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8017a52:	4313      	orrs	r3, r2
 8017a54:	6043      	str	r3, [r0, #4]
}
 8017a56:	2000      	movs	r0, #0
 8017a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a5c:	b004      	add	sp, #16
 8017a5e:	4770      	bx	lr

08017a60 <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 8017a60:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8017a64:	4770      	bx	lr

08017a66 <SDIO_PowerState_ON>:
{  
 8017a66:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8017a68:	2303      	movs	r3, #3
 8017a6a:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8017a6c:	2002      	movs	r0, #2
 8017a6e:	f7fa ffdf 	bl	8012a30 <HAL_Delay>
}
 8017a72:	2000      	movs	r0, #0
 8017a74:	bd08      	pop	{r3, pc}

08017a76 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8017a76:	6800      	ldr	r0, [r0, #0]
}
 8017a78:	f000 0003 	and.w	r0, r0, #3
 8017a7c:	4770      	bx	lr

08017a7e <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8017a7e:	680b      	ldr	r3, [r1, #0]
 8017a80:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8017a82:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 8017a84:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8017a86:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8017a88:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8017a8a:	4313      	orrs	r3, r2
                       Command->CPSM);
 8017a8c:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8017a8e:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8017a90:	68c2      	ldr	r2, [r0, #12]
 8017a92:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8017a96:	f022 020f 	bic.w	r2, r2, #15
 8017a9a:	4313      	orrs	r3, r2
 8017a9c:	60c3      	str	r3, [r0, #12]
}
 8017a9e:	2000      	movs	r0, #0
 8017aa0:	4770      	bx	lr

08017aa2 <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 8017aa2:	6900      	ldr	r0, [r0, #16]
}
 8017aa4:	b2c0      	uxtb	r0, r0
 8017aa6:	4770      	bx	lr

08017aa8 <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8017aa8:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8017aaa:	5840      	ldr	r0, [r0, r1]
}  
 8017aac:	4770      	bx	lr
	...

08017ab0 <SDMMC_GetCmdResp1>:
{
 8017ab0:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8017ab2:	4b52      	ldr	r3, [pc, #328]	; (8017bfc <SDMMC_GetCmdResp1+0x14c>)
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	4c52      	ldr	r4, [pc, #328]	; (8017c00 <SDMMC_GetCmdResp1+0x150>)
 8017ab8:	fba4 4303 	umull	r4, r3, r4, r3
 8017abc:	0a5b      	lsrs	r3, r3, #9
 8017abe:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 8017ac2:	1e53      	subs	r3, r2, #1
 8017ac4:	2a00      	cmp	r2, #0
 8017ac6:	d060      	beq.n	8017b8a <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 8017ac8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8017aca:	461a      	mov	r2, r3
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8017acc:	f014 0f45 	tst.w	r4, #69	; 0x45
 8017ad0:	d0f7      	beq.n	8017ac2 <SDMMC_GetCmdResp1+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8017ad2:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8017ad6:	d1f4      	bne.n	8017ac2 <SDMMC_GetCmdResp1+0x12>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8017ad8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017ada:	f013 0f04 	tst.w	r3, #4
 8017ade:	d107      	bne.n	8017af0 <SDMMC_GetCmdResp1+0x40>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8017ae0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017ae2:	f013 0f01 	tst.w	r3, #1
 8017ae6:	d007      	beq.n	8017af8 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8017ae8:	2301      	movs	r3, #1
 8017aea:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017aec:	4618      	mov	r0, r3
 8017aee:	e04e      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8017af0:	2304      	movs	r3, #4
 8017af2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017af4:	4618      	mov	r0, r3
 8017af6:	e04a      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
 8017af8:	460d      	mov	r5, r1
 8017afa:	4604      	mov	r4, r0
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8017afc:	23c5      	movs	r3, #197	; 0xc5
 8017afe:	6383      	str	r3, [r0, #56]	; 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8017b00:	f7ff ffcf 	bl	8017aa2 <SDIO_GetCommandResponse>
 8017b04:	42a8      	cmp	r0, r5
 8017b06:	d001      	beq.n	8017b0c <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017b08:	2001      	movs	r0, #1
 8017b0a:	e040      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8017b0c:	2100      	movs	r1, #0
 8017b0e:	4620      	mov	r0, r4
 8017b10:	f7ff ffca 	bl	8017aa8 <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8017b14:	4b3b      	ldr	r3, [pc, #236]	; (8017c04 <SDMMC_GetCmdResp1+0x154>)
 8017b16:	4003      	ands	r3, r0
 8017b18:	b3d3      	cbz	r3, 8017b90 <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8017b1a:	2800      	cmp	r0, #0
 8017b1c:	db3a      	blt.n	8017b94 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8017b1e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017b22:	d13a      	bne.n	8017b9a <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8017b24:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8017b28:	d139      	bne.n	8017b9e <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8017b2a:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8017b2e:	d138      	bne.n	8017ba2 <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8017b30:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8017b34:	d138      	bne.n	8017ba8 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8017b36:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8017b3a:	d138      	bne.n	8017bae <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8017b3c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8017b40:	d138      	bne.n	8017bb4 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8017b42:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8017b46:	d138      	bne.n	8017bba <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8017b48:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8017b4c:	d138      	bne.n	8017bc0 <SDMMC_GetCmdResp1+0x110>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8017b4e:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8017b52:	d138      	bne.n	8017bc6 <SDMMC_GetCmdResp1+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8017b54:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8017b58:	d138      	bne.n	8017bcc <SDMMC_GetCmdResp1+0x11c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8017b5a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8017b5e:	d138      	bne.n	8017bd2 <SDMMC_GetCmdResp1+0x122>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8017b60:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8017b64:	d138      	bne.n	8017bd8 <SDMMC_GetCmdResp1+0x128>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8017b66:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8017b6a:	d138      	bne.n	8017bde <SDMMC_GetCmdResp1+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8017b6c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8017b70:	d138      	bne.n	8017be4 <SDMMC_GetCmdResp1+0x134>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8017b72:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8017b76:	d138      	bne.n	8017bea <SDMMC_GetCmdResp1+0x13a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8017b78:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8017b7c:	d138      	bne.n	8017bf0 <SDMMC_GetCmdResp1+0x140>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8017b7e:	f010 0f08 	tst.w	r0, #8
 8017b82:	d038      	beq.n	8017bf6 <SDMMC_GetCmdResp1+0x146>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8017b84:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8017b88:	e001      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 8017b8a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8017b8e:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 8017b90:	2000      	movs	r0, #0
 8017b92:	e7fc      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8017b94:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8017b98:	e7f9      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8017b9a:	2040      	movs	r0, #64	; 0x40
 8017b9c:	e7f7      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8017b9e:	2080      	movs	r0, #128	; 0x80
 8017ba0:	e7f5      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8017ba2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8017ba6:	e7f2      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8017ba8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8017bac:	e7ef      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8017bae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8017bb2:	e7ec      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8017bb4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8017bb8:	e7e9      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8017bba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8017bbe:	e7e6      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8017bc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8017bc4:	e7e3      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8017bc6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8017bca:	e7e0      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 8017bcc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8017bd0:	e7dd      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8017bd2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8017bd6:	e7da      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8017bd8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8017bdc:	e7d7      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8017bde:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8017be2:	e7d4      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8017be4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8017be8:	e7d1      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8017bea:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8017bee:	e7ce      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 8017bf0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8017bf4:	e7cb      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8017bf6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8017bfa:	e7c8      	b.n	8017b8e <SDMMC_GetCmdResp1+0xde>
 8017bfc:	2000005c 	.word	0x2000005c
 8017c00:	10624dd3 	.word	0x10624dd3
 8017c04:	fdffe008 	.word	0xfdffe008

08017c08 <SDMMC_GetCmdResp6>:
{
 8017c08:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8017c0a:	4b26      	ldr	r3, [pc, #152]	; (8017ca4 <SDMMC_GetCmdResp6+0x9c>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	4c26      	ldr	r4, [pc, #152]	; (8017ca8 <SDMMC_GetCmdResp6+0xa0>)
 8017c10:	fba4 4303 	umull	r4, r3, r4, r3
 8017c14:	0a5c      	lsrs	r4, r3, #9
 8017c16:	f241 3388 	movw	r3, #5000	; 0x1388
 8017c1a:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 8017c1e:	1e5c      	subs	r4, r3, #1
 8017c20:	b3b3      	cbz	r3, 8017c90 <SDMMC_GetCmdResp6+0x88>
    sta_reg = SDIOx->STA;
 8017c22:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8017c24:	4623      	mov	r3, r4
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8017c26:	f015 0f45 	tst.w	r5, #69	; 0x45
 8017c2a:	d0f8      	beq.n	8017c1e <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8017c2c:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8017c30:	d1f5      	bne.n	8017c1e <SDMMC_GetCmdResp6+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8017c32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017c34:	f013 0f04 	tst.w	r3, #4
 8017c38:	d107      	bne.n	8017c4a <SDMMC_GetCmdResp6+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8017c3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017c3c:	f013 0f01 	tst.w	r3, #1
 8017c40:	d007      	beq.n	8017c52 <SDMMC_GetCmdResp6+0x4a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8017c42:	2301      	movs	r3, #1
 8017c44:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017c46:	4618      	mov	r0, r3
 8017c48:	e024      	b.n	8017c94 <SDMMC_GetCmdResp6+0x8c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8017c4a:	2304      	movs	r3, #4
 8017c4c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8017c4e:	4618      	mov	r0, r3
 8017c50:	e020      	b.n	8017c94 <SDMMC_GetCmdResp6+0x8c>
 8017c52:	4616      	mov	r6, r2
 8017c54:	460d      	mov	r5, r1
 8017c56:	4604      	mov	r4, r0
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8017c58:	f7ff ff23 	bl	8017aa2 <SDIO_GetCommandResponse>
 8017c5c:	42a8      	cmp	r0, r5
 8017c5e:	d001      	beq.n	8017c64 <SDMMC_GetCmdResp6+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8017c60:	2001      	movs	r0, #1
 8017c62:	e017      	b.n	8017c94 <SDMMC_GetCmdResp6+0x8c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8017c64:	23c5      	movs	r3, #197	; 0xc5
 8017c66:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8017c68:	2100      	movs	r1, #0
 8017c6a:	4620      	mov	r0, r4
 8017c6c:	f7ff ff1c 	bl	8017aa8 <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8017c70:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8017c74:	d008      	beq.n	8017c88 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8017c76:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8017c7a:	d10c      	bne.n	8017c96 <SDMMC_GetCmdResp6+0x8e>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8017c7c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8017c80:	d00c      	beq.n	8017c9c <SDMMC_GetCmdResp6+0x94>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8017c82:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8017c86:	e005      	b.n	8017c94 <SDMMC_GetCmdResp6+0x8c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8017c88:	0c00      	lsrs	r0, r0, #16
 8017c8a:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 8017c8c:	2000      	movs	r0, #0
 8017c8e:	e001      	b.n	8017c94 <SDMMC_GetCmdResp6+0x8c>
      return SDMMC_ERROR_TIMEOUT;
 8017c90:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8017c94:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8017c96:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8017c9a:	e7fb      	b.n	8017c94 <SDMMC_GetCmdResp6+0x8c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8017c9c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8017ca0:	e7f8      	b.n	8017c94 <SDMMC_GetCmdResp6+0x8c>
 8017ca2:	bf00      	nop
 8017ca4:	2000005c 	.word	0x2000005c
 8017ca8:	10624dd3 	.word	0x10624dd3

08017cac <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8017cac:	680b      	ldr	r3, [r1, #0]
 8017cae:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8017cb0:	684b      	ldr	r3, [r1, #4]
 8017cb2:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8017cb4:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8017cb6:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8017cb8:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8017cba:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8017cbc:	4313      	orrs	r3, r2
                       Data->DPSM);
 8017cbe:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8017cc0:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8017cc2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8017cc4:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8017cc8:	4313      	orrs	r3, r2
 8017cca:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8017ccc:	2000      	movs	r0, #0
 8017cce:	4770      	bx	lr

08017cd0 <SDMMC_CmdBlockLength>:
{
 8017cd0:	b530      	push	{r4, r5, lr}
 8017cd2:	b087      	sub	sp, #28
 8017cd4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8017cd6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8017cd8:	2410      	movs	r4, #16
 8017cda:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8017cdc:	2340      	movs	r3, #64	; 0x40
 8017cde:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8017ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017ce8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8017cea:	a901      	add	r1, sp, #4
 8017cec:	f7ff fec7 	bl	8017a7e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8017cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8017cf4:	4621      	mov	r1, r4
 8017cf6:	4628      	mov	r0, r5
 8017cf8:	f7ff feda 	bl	8017ab0 <SDMMC_GetCmdResp1>
}
 8017cfc:	b007      	add	sp, #28
 8017cfe:	bd30      	pop	{r4, r5, pc}

08017d00 <SDMMC_CmdReadSingleBlock>:
{
 8017d00:	b530      	push	{r4, r5, lr}
 8017d02:	b087      	sub	sp, #28
 8017d04:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8017d06:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8017d08:	2411      	movs	r4, #17
 8017d0a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8017d0c:	2340      	movs	r3, #64	; 0x40
 8017d0e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8017d10:	2300      	movs	r3, #0
 8017d12:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8017d14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017d18:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8017d1a:	a901      	add	r1, sp, #4
 8017d1c:	f7ff feaf 	bl	8017a7e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8017d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8017d24:	4621      	mov	r1, r4
 8017d26:	4628      	mov	r0, r5
 8017d28:	f7ff fec2 	bl	8017ab0 <SDMMC_GetCmdResp1>
}
 8017d2c:	b007      	add	sp, #28
 8017d2e:	bd30      	pop	{r4, r5, pc}

08017d30 <SDMMC_CmdReadMultiBlock>:
{
 8017d30:	b530      	push	{r4, r5, lr}
 8017d32:	b087      	sub	sp, #28
 8017d34:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8017d36:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8017d38:	2412      	movs	r4, #18
 8017d3a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8017d3c:	2340      	movs	r3, #64	; 0x40
 8017d3e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8017d40:	2300      	movs	r3, #0
 8017d42:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8017d44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017d48:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8017d4a:	a901      	add	r1, sp, #4
 8017d4c:	f7ff fe97 	bl	8017a7e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8017d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8017d54:	4621      	mov	r1, r4
 8017d56:	4628      	mov	r0, r5
 8017d58:	f7ff feaa 	bl	8017ab0 <SDMMC_GetCmdResp1>
}
 8017d5c:	b007      	add	sp, #28
 8017d5e:	bd30      	pop	{r4, r5, pc}

08017d60 <SDMMC_CmdWriteSingleBlock>:
{
 8017d60:	b530      	push	{r4, r5, lr}
 8017d62:	b087      	sub	sp, #28
 8017d64:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8017d66:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8017d68:	2418      	movs	r4, #24
 8017d6a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8017d6c:	2340      	movs	r3, #64	; 0x40
 8017d6e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8017d70:	2300      	movs	r3, #0
 8017d72:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8017d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017d78:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8017d7a:	a901      	add	r1, sp, #4
 8017d7c:	f7ff fe7f 	bl	8017a7e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8017d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8017d84:	4621      	mov	r1, r4
 8017d86:	4628      	mov	r0, r5
 8017d88:	f7ff fe92 	bl	8017ab0 <SDMMC_GetCmdResp1>
}
 8017d8c:	b007      	add	sp, #28
 8017d8e:	bd30      	pop	{r4, r5, pc}

08017d90 <SDMMC_CmdWriteMultiBlock>:
{
 8017d90:	b530      	push	{r4, r5, lr}
 8017d92:	b087      	sub	sp, #28
 8017d94:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8017d96:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8017d98:	2419      	movs	r4, #25
 8017d9a:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8017d9c:	2340      	movs	r3, #64	; 0x40
 8017d9e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8017da0:	2300      	movs	r3, #0
 8017da2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8017da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017da8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8017daa:	a901      	add	r1, sp, #4
 8017dac:	f7ff fe67 	bl	8017a7e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8017db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8017db4:	4621      	mov	r1, r4
 8017db6:	4628      	mov	r0, r5
 8017db8:	f7ff fe7a 	bl	8017ab0 <SDMMC_GetCmdResp1>
}
 8017dbc:	b007      	add	sp, #28
 8017dbe:	bd30      	pop	{r4, r5, pc}

08017dc0 <SDMMC_CmdStopTransfer>:
{
 8017dc0:	b530      	push	{r4, r5, lr}
 8017dc2:	b087      	sub	sp, #28
 8017dc4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8017dca:	240c      	movs	r4, #12
 8017dcc:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8017dce:	2240      	movs	r2, #64	; 0x40
 8017dd0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8017dd2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8017dd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017dd8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8017dda:	a901      	add	r1, sp, #4
 8017ddc:	f7ff fe4f 	bl	8017a7e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8017de0:	4a03      	ldr	r2, [pc, #12]	; (8017df0 <SDMMC_CmdStopTransfer+0x30>)
 8017de2:	4621      	mov	r1, r4
 8017de4:	4628      	mov	r0, r5
 8017de6:	f7ff fe63 	bl	8017ab0 <SDMMC_GetCmdResp1>
}
 8017dea:	b007      	add	sp, #28
 8017dec:	bd30      	pop	{r4, r5, pc}
 8017dee:	bf00      	nop
 8017df0:	05f5e100 	.word	0x05f5e100

08017df4 <SDMMC_CmdSelDesel>:
{
 8017df4:	b530      	push	{r4, r5, lr}
 8017df6:	b087      	sub	sp, #28
 8017df8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8017dfa:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8017dfc:	2407      	movs	r4, #7
 8017dfe:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8017e00:	2340      	movs	r3, #64	; 0x40
 8017e02:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8017e04:	2300      	movs	r3, #0
 8017e06:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8017e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e0c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8017e0e:	a901      	add	r1, sp, #4
 8017e10:	f7ff fe35 	bl	8017a7e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8017e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8017e18:	4621      	mov	r1, r4
 8017e1a:	4628      	mov	r0, r5
 8017e1c:	f7ff fe48 	bl	8017ab0 <SDMMC_GetCmdResp1>
}
 8017e20:	b007      	add	sp, #28
 8017e22:	bd30      	pop	{r4, r5, pc}

08017e24 <SDMMC_CmdGoIdleState>:
{
 8017e24:	b510      	push	{r4, lr}
 8017e26:	b086      	sub	sp, #24
 8017e28:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8017e2a:	2300      	movs	r3, #0
 8017e2c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8017e2e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8017e30:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8017e32:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8017e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e38:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8017e3a:	a901      	add	r1, sp, #4
 8017e3c:	f7ff fe1f 	bl	8017a7e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 8017e40:	4620      	mov	r0, r4
 8017e42:	f7ff fd47 	bl	80178d4 <SDMMC_GetCmdError>
}
 8017e46:	b006      	add	sp, #24
 8017e48:	bd10      	pop	{r4, pc}

08017e4a <SDMMC_CmdOperCond>:
{
 8017e4a:	b510      	push	{r4, lr}
 8017e4c:	b086      	sub	sp, #24
 8017e4e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8017e50:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8017e54:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8017e56:	2308      	movs	r3, #8
 8017e58:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8017e5a:	2340      	movs	r3, #64	; 0x40
 8017e5c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8017e5e:	2300      	movs	r3, #0
 8017e60:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8017e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e66:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8017e68:	a901      	add	r1, sp, #4
 8017e6a:	f7ff fe08 	bl	8017a7e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8017e6e:	4620      	mov	r0, r4
 8017e70:	f7ff fda4 	bl	80179bc <SDMMC_GetCmdResp7>
}
 8017e74:	b006      	add	sp, #24
 8017e76:	bd10      	pop	{r4, pc}

08017e78 <SDMMC_CmdAppCommand>:
{
 8017e78:	b530      	push	{r4, r5, lr}
 8017e7a:	b087      	sub	sp, #28
 8017e7c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8017e7e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8017e80:	2437      	movs	r4, #55	; 0x37
 8017e82:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8017e84:	2340      	movs	r3, #64	; 0x40
 8017e86:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8017e88:	2300      	movs	r3, #0
 8017e8a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8017e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e90:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8017e92:	a901      	add	r1, sp, #4
 8017e94:	f7ff fdf3 	bl	8017a7e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8017e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8017e9c:	4621      	mov	r1, r4
 8017e9e:	4628      	mov	r0, r5
 8017ea0:	f7ff fe06 	bl	8017ab0 <SDMMC_GetCmdResp1>
}
 8017ea4:	b007      	add	sp, #28
 8017ea6:	bd30      	pop	{r4, r5, pc}

08017ea8 <SDMMC_CmdAppOperCommand>:
{
 8017ea8:	b510      	push	{r4, lr}
 8017eaa:	b086      	sub	sp, #24
 8017eac:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8017eae:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8017eb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8017eb6:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8017eb8:	2329      	movs	r3, #41	; 0x29
 8017eba:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8017ebc:	2340      	movs	r3, #64	; 0x40
 8017ebe:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8017ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017ec8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8017eca:	a901      	add	r1, sp, #4
 8017ecc:	f7ff fdd7 	bl	8017a7e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8017ed0:	4620      	mov	r0, r4
 8017ed2:	f7ff fd4b 	bl	801796c <SDMMC_GetCmdResp3>
}
 8017ed6:	b006      	add	sp, #24
 8017ed8:	bd10      	pop	{r4, pc}

08017eda <SDMMC_CmdBusWidth>:
{
 8017eda:	b530      	push	{r4, r5, lr}
 8017edc:	b087      	sub	sp, #28
 8017ede:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8017ee0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8017ee2:	2406      	movs	r4, #6
 8017ee4:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8017ee6:	2340      	movs	r3, #64	; 0x40
 8017ee8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8017eea:	2300      	movs	r3, #0
 8017eec:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8017eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017ef2:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8017ef4:	a901      	add	r1, sp, #4
 8017ef6:	f7ff fdc2 	bl	8017a7e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8017efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8017efe:	4621      	mov	r1, r4
 8017f00:	4628      	mov	r0, r5
 8017f02:	f7ff fdd5 	bl	8017ab0 <SDMMC_GetCmdResp1>
}
 8017f06:	b007      	add	sp, #28
 8017f08:	bd30      	pop	{r4, r5, pc}

08017f0a <SDMMC_CmdSendSCR>:
{
 8017f0a:	b530      	push	{r4, r5, lr}
 8017f0c:	b087      	sub	sp, #28
 8017f0e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8017f10:	2300      	movs	r3, #0
 8017f12:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8017f14:	2433      	movs	r4, #51	; 0x33
 8017f16:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8017f18:	2240      	movs	r2, #64	; 0x40
 8017f1a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8017f1c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8017f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017f22:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8017f24:	a901      	add	r1, sp, #4
 8017f26:	f7ff fdaa 	bl	8017a7e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8017f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8017f2e:	4621      	mov	r1, r4
 8017f30:	4628      	mov	r0, r5
 8017f32:	f7ff fdbd 	bl	8017ab0 <SDMMC_GetCmdResp1>
}
 8017f36:	b007      	add	sp, #28
 8017f38:	bd30      	pop	{r4, r5, pc}

08017f3a <SDMMC_CmdSendCID>:
{
 8017f3a:	b510      	push	{r4, lr}
 8017f3c:	b086      	sub	sp, #24
 8017f3e:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8017f40:	2300      	movs	r3, #0
 8017f42:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8017f44:	2202      	movs	r2, #2
 8017f46:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8017f48:	22c0      	movs	r2, #192	; 0xc0
 8017f4a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8017f4c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8017f4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017f52:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8017f54:	a901      	add	r1, sp, #4
 8017f56:	f7ff fd92 	bl	8017a7e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8017f5a:	4620      	mov	r0, r4
 8017f5c:	f7ff fcd6 	bl	801790c <SDMMC_GetCmdResp2>
}
 8017f60:	b006      	add	sp, #24
 8017f62:	bd10      	pop	{r4, pc}

08017f64 <SDMMC_CmdSendCSD>:
{
 8017f64:	b510      	push	{r4, lr}
 8017f66:	b086      	sub	sp, #24
 8017f68:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8017f6a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8017f6c:	2309      	movs	r3, #9
 8017f6e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8017f70:	23c0      	movs	r3, #192	; 0xc0
 8017f72:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8017f74:	2300      	movs	r3, #0
 8017f76:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8017f78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017f7c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8017f7e:	a901      	add	r1, sp, #4
 8017f80:	f7ff fd7d 	bl	8017a7e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8017f84:	4620      	mov	r0, r4
 8017f86:	f7ff fcc1 	bl	801790c <SDMMC_GetCmdResp2>
}
 8017f8a:	b006      	add	sp, #24
 8017f8c:	bd10      	pop	{r4, pc}

08017f8e <SDMMC_CmdSetRelAdd>:
{
 8017f8e:	b570      	push	{r4, r5, r6, lr}
 8017f90:	b086      	sub	sp, #24
 8017f92:	4605      	mov	r5, r0
 8017f94:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 8017f96:	2300      	movs	r3, #0
 8017f98:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8017f9a:	2403      	movs	r4, #3
 8017f9c:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8017f9e:	2240      	movs	r2, #64	; 0x40
 8017fa0:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8017fa2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8017fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017fa8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8017faa:	a901      	add	r1, sp, #4
 8017fac:	f7ff fd67 	bl	8017a7e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8017fb0:	4632      	mov	r2, r6
 8017fb2:	4621      	mov	r1, r4
 8017fb4:	4628      	mov	r0, r5
 8017fb6:	f7ff fe27 	bl	8017c08 <SDMMC_GetCmdResp6>
}
 8017fba:	b006      	add	sp, #24
 8017fbc:	bd70      	pop	{r4, r5, r6, pc}

08017fbe <SDMMC_CmdSendStatus>:
{
 8017fbe:	b530      	push	{r4, r5, lr}
 8017fc0:	b087      	sub	sp, #28
 8017fc2:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8017fc4:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8017fc6:	240d      	movs	r4, #13
 8017fc8:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8017fca:	2340      	movs	r3, #64	; 0x40
 8017fcc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8017fce:	2300      	movs	r3, #0
 8017fd0:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8017fd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017fd6:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8017fd8:	a901      	add	r1, sp, #4
 8017fda:	f7ff fd50 	bl	8017a7e <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8017fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8017fe2:	4621      	mov	r1, r4
 8017fe4:	4628      	mov	r0, r5
 8017fe6:	f7ff fd63 	bl	8017ab0 <SDMMC_GetCmdResp1>
}
 8017fea:	b007      	add	sp, #28
 8017fec:	bd30      	pop	{r4, r5, pc}
	...

08017ff0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8017ff0:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8017ff2:	4903      	ldr	r1, [pc, #12]	; (8018000 <MX_FATFS_Init+0x10>)
 8017ff4:	4803      	ldr	r0, [pc, #12]	; (8018004 <MX_FATFS_Init+0x14>)
 8017ff6:	f000 fa3d 	bl	8018474 <FATFS_LinkDriver>
 8017ffa:	4b03      	ldr	r3, [pc, #12]	; (8018008 <MX_FATFS_Init+0x18>)
 8017ffc:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8017ffe:	bd08      	pop	{r3, pc}
 8018000:	200301f8 	.word	0x200301f8
 8018004:	0802ef78 	.word	0x0802ef78
 8018008:	200301f4 	.word	0x200301f4

0801800c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801800c:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801800e:	4613      	mov	r3, r2
 8018010:	460a      	mov	r2, r1
 8018012:	4601      	mov	r1, r0
 8018014:	4802      	ldr	r0, [pc, #8]	; (8018020 <BSP_SD_ReadBlocks_DMA+0x14>)
 8018016:	f7fe fa65 	bl	80164e4 <HAL_SD_ReadBlocks_DMA>
 801801a:	b100      	cbz	r0, 801801e <BSP_SD_ReadBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 801801c:	2001      	movs	r0, #1
  }
  
  return sd_state; 
}
 801801e:	bd08      	pop	{r3, pc}
 8018020:	20030014 	.word	0x20030014

08018024 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8018024:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8018026:	4613      	mov	r3, r2
 8018028:	460a      	mov	r2, r1
 801802a:	4601      	mov	r1, r0
 801802c:	4802      	ldr	r0, [pc, #8]	; (8018038 <BSP_SD_WriteBlocks_DMA+0x14>)
 801802e:	f7fe faf9 	bl	8016624 <HAL_SD_WriteBlocks_DMA>
 8018032:	b100      	cbz	r0, 8018036 <BSP_SD_WriteBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 8018034:	2001      	movs	r0, #1
  }
  
  return sd_state; 
}
 8018036:	bd08      	pop	{r3, pc}
 8018038:	20030014 	.word	0x20030014

0801803c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 801803c:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801803e:	4803      	ldr	r0, [pc, #12]	; (801804c <BSP_SD_GetCardState+0x10>)
 8018040:	f7fe fdd6 	bl	8016bf0 <HAL_SD_GetCardState>
}
 8018044:	3804      	subs	r0, #4
 8018046:	bf18      	it	ne
 8018048:	2001      	movne	r0, #1
 801804a:	bd08      	pop	{r3, pc}
 801804c:	20030014 	.word	0x20030014

08018050 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8018050:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8018052:	4601      	mov	r1, r0
 8018054:	4801      	ldr	r0, [pc, #4]	; (801805c <BSP_SD_GetCardInfo+0xc>)
 8018056:	f7fe fd66 	bl	8016b26 <HAL_SD_GetCardInfo>
}
 801805a:	bd08      	pop	{r3, pc}
 801805c:	20030014 	.word	0x20030014

08018060 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8018060:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8018062:	f000 f9a1 	bl	80183a8 <BSP_SD_ReadCpltCallback>
}
 8018066:	bd08      	pop	{r3, pc}

08018068 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8018068:	b500      	push	{lr}
 801806a:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 801806c:	2301      	movs	r3, #1
 801806e:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8018072:	f000 f823 	bl	80180bc <BSP_PlatformIsDetected>
 8018076:	b910      	cbnz	r0, 801807e <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8018078:	2300      	movs	r3, #0
 801807a:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 801807e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8018082:	b003      	add	sp, #12
 8018084:	f85d fb04 	ldr.w	pc, [sp], #4

08018088 <BSP_SD_Init>:
{
 8018088:	b510      	push	{r4, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801808a:	f7ff ffed 	bl	8018068 <BSP_SD_IsDetected>
 801808e:	2801      	cmp	r0, #1
 8018090:	d002      	beq.n	8018098 <BSP_SD_Init+0x10>
    return MSD_ERROR;
 8018092:	2401      	movs	r4, #1
}
 8018094:	4620      	mov	r0, r4
 8018096:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd);
 8018098:	4807      	ldr	r0, [pc, #28]	; (80180b8 <BSP_SD_Init+0x30>)
 801809a:	f7fe fd25 	bl	8016ae8 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 801809e:	4604      	mov	r4, r0
 80180a0:	2800      	cmp	r0, #0
 80180a2:	d1f7      	bne.n	8018094 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80180a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80180a8:	4803      	ldr	r0, [pc, #12]	; (80180b8 <BSP_SD_Init+0x30>)
 80180aa:	f7fe fd4f 	bl	8016b4c <HAL_SD_ConfigWideBusOperation>
 80180ae:	2800      	cmp	r0, #0
 80180b0:	d0f0      	beq.n	8018094 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 80180b2:	2401      	movs	r4, #1
 80180b4:	e7ee      	b.n	8018094 <BSP_SD_Init+0xc>
 80180b6:	bf00      	nop
 80180b8:	20030014 	.word	0x20030014

080180bc <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80180bc:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80180be:	2104      	movs	r1, #4
 80180c0:	4803      	ldr	r0, [pc, #12]	; (80180d0 <BSP_PlatformIsDetected+0x14>)
 80180c2:	f7fb fe57 	bl	8013d74 <HAL_GPIO_ReadPin>
 80180c6:	b108      	cbz	r0, 80180cc <BSP_PlatformIsDetected+0x10>
    {
        status = SD_NOT_PRESENT;
 80180c8:	2000      	movs	r0, #0
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 80180ca:	bd08      	pop	{r3, pc}
    uint8_t status = SD_PRESENT;
 80180cc:	2001      	movs	r0, #1
 80180ce:	e7fc      	b.n	80180ca <BSP_PlatformIsDetected+0xe>
 80180d0:	40021800 	.word	0x40021800

080180d4 <SD_CheckStatus>:

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80180d4:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 80180d6:	4b07      	ldr	r3, [pc, #28]	; (80180f4 <SD_CheckStatus+0x20>)
 80180d8:	2201      	movs	r2, #1
 80180da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80180dc:	f7ff ffae 	bl	801803c <BSP_SD_GetCardState>
 80180e0:	b920      	cbnz	r0, 80180ec <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 80180e2:	4a04      	ldr	r2, [pc, #16]	; (80180f4 <SD_CheckStatus+0x20>)
 80180e4:	7813      	ldrb	r3, [r2, #0]
 80180e6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80180ea:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 80180ec:	4b01      	ldr	r3, [pc, #4]	; (80180f4 <SD_CheckStatus+0x20>)
 80180ee:	7818      	ldrb	r0, [r3, #0]
}
 80180f0:	bd08      	pop	{r3, pc}
 80180f2:	bf00      	nop
 80180f4:	20000090 	.word	0x20000090

080180f8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80180f8:	b510      	push	{r4, lr}
 80180fa:	b084      	sub	sp, #16
 80180fc:	4604      	mov	r4, r0
Stat = STA_NOINIT; 
 80180fe:	4b14      	ldr	r3, [pc, #80]	; (8018150 <SD_initialize+0x58>)
 8018100:	2201      	movs	r2, #1
 8018102:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 8018104:	f000 f9cc 	bl	80184a0 <osKernelRunning>
 8018108:	b918      	cbnz	r0, 8018112 <SD_initialize+0x1a>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
    }
  }
  return Stat;
 801810a:	4b11      	ldr	r3, [pc, #68]	; (8018150 <SD_initialize+0x58>)
 801810c:	7818      	ldrb	r0, [r3, #0]
}
 801810e:	b004      	add	sp, #16
 8018110:	bd10      	pop	{r4, pc}
    if(BSP_SD_Init() == MSD_OK)
 8018112:	f7ff ffb9 	bl	8018088 <BSP_SD_Init>
 8018116:	b1a0      	cbz	r0, 8018142 <SD_initialize+0x4a>
    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 8018118:	4b0d      	ldr	r3, [pc, #52]	; (8018150 <SD_initialize+0x58>)
 801811a:	781b      	ldrb	r3, [r3, #0]
 801811c:	b2db      	uxtb	r3, r3
 801811e:	2b01      	cmp	r3, #1
 8018120:	d0f3      	beq.n	801810a <SD_initialize+0x12>
 8018122:	4b0c      	ldr	r3, [pc, #48]	; (8018154 <SD_initialize+0x5c>)
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d1ef      	bne.n	801810a <SD_initialize+0x12>
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 801812a:	4b0b      	ldr	r3, [pc, #44]	; (8018158 <SD_initialize+0x60>)
 801812c:	466c      	mov	r4, sp
 801812e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018130:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8018134:	2100      	movs	r1, #0
 8018136:	4620      	mov	r0, r4
 8018138:	f000 faa6 	bl	8018688 <osMessageCreate>
 801813c:	4b05      	ldr	r3, [pc, #20]	; (8018154 <SD_initialize+0x5c>)
 801813e:	6018      	str	r0, [r3, #0]
 8018140:	e7e3      	b.n	801810a <SD_initialize+0x12>
      Stat = SD_CheckStatus(lun);
 8018142:	4620      	mov	r0, r4
 8018144:	f7ff ffc6 	bl	80180d4 <SD_CheckStatus>
 8018148:	4b01      	ldr	r3, [pc, #4]	; (8018150 <SD_initialize+0x58>)
 801814a:	7018      	strb	r0, [r3, #0]
 801814c:	e7e4      	b.n	8018118 <SD_initialize+0x20>
 801814e:	bf00      	nop
 8018150:	20000090 	.word	0x20000090
 8018154:	200004fc 	.word	0x200004fc
 8018158:	0802ef68 	.word	0x0802ef68

0801815c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801815c:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 801815e:	f7ff ffb9 	bl	80180d4 <SD_CheckStatus>
}
 8018162:	bd08      	pop	{r3, pc}

08018164 <SD_CheckStatusWithTimeout>:
{
 8018164:	b538      	push	{r3, r4, r5, lr}
 8018166:	4605      	mov	r5, r0
  uint32_t timer = osKernelSysTick();
 8018168:	f000 f9a3 	bl	80184b2 <osKernelSysTick>
 801816c:	4604      	mov	r4, r0
  while( osKernelSysTick() - timer < timeout)
 801816e:	f000 f9a0 	bl	80184b2 <osKernelSysTick>
 8018172:	1b00      	subs	r0, r0, r4
 8018174:	42a8      	cmp	r0, r5
 8018176:	d205      	bcs.n	8018184 <SD_CheckStatusWithTimeout+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8018178:	f7ff ff60 	bl	801803c <BSP_SD_GetCardState>
 801817c:	2800      	cmp	r0, #0
 801817e:	d1f6      	bne.n	801816e <SD_CheckStatusWithTimeout+0xa>
      return 0;
 8018180:	2000      	movs	r0, #0
 8018182:	e001      	b.n	8018188 <SD_CheckStatusWithTimeout+0x24>
  return -1;
 8018184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8018188:	bd38      	pop	{r3, r4, r5, pc}
	...

0801818c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801818c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018190:	b088      	sub	sp, #32
 8018192:	4689      	mov	r9, r1
 8018194:	4614      	mov	r4, r2
 8018196:	461f      	mov	r7, r3
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8018198:	f247 5030 	movw	r0, #30000	; 0x7530
 801819c:	f7ff ffe2 	bl	8018164 <SD_CheckStatusWithTimeout>
 80181a0:	2800      	cmp	r0, #0
 80181a2:	db51      	blt.n	8018248 <SD_read+0xbc>
  {
    return res;
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80181a4:	f019 0f03 	tst.w	r9, #3
 80181a8:	d001      	beq.n	80181ae <SD_read+0x22>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 80181aa:	2500      	movs	r5, #0
 80181ac:	e01a      	b.n	80181e4 <SD_read+0x58>
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80181ae:	463a      	mov	r2, r7
 80181b0:	4621      	mov	r1, r4
 80181b2:	4648      	mov	r0, r9
 80181b4:	f7ff ff2a 	bl	801800c <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 80181b8:	b108      	cbz	r0, 80181be <SD_read+0x32>
  DRESULT res = RES_ERROR;
 80181ba:	2001      	movs	r0, #1
 80181bc:	e045      	b.n	801824a <SD_read+0xbe>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80181be:	f247 5230 	movw	r2, #30000	; 0x7530
 80181c2:	4b24      	ldr	r3, [pc, #144]	; (8018254 <SD_read+0xc8>)
 80181c4:	6819      	ldr	r1, [r3, #0]
 80181c6:	a805      	add	r0, sp, #20
 80181c8:	f000 faa6 	bl	8018718 <osMessageGet>
      if (event.status == osEventMessage) {
 80181cc:	9b05      	ldr	r3, [sp, #20]
 80181ce:	2b10      	cmp	r3, #16
 80181d0:	d001      	beq.n	80181d6 <SD_read+0x4a>
  DRESULT res = RES_ERROR;
 80181d2:	2001      	movs	r0, #1
 80181d4:	e039      	b.n	801824a <SD_read+0xbe>
        if (event.value.v == READ_CPLT_MSG) {
 80181d6:	9b06      	ldr	r3, [sp, #24]
 80181d8:	2b01      	cmp	r3, #1
 80181da:	d039      	beq.n	8018250 <SD_read+0xc4>
  DRESULT res = RES_ERROR;
 80181dc:	2001      	movs	r0, #1
 80181de:	e034      	b.n	801824a <SD_read+0xbe>
    for (i = 0; i < count; i++) {
 80181e0:	3501      	adds	r5, #1
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80181e2:	4634      	mov	r4, r6
    for (i = 0; i < count; i++) {
 80181e4:	46aa      	mov	sl, r5
 80181e6:	42bd      	cmp	r5, r7
 80181e8:	d223      	bcs.n	8018232 <SD_read+0xa6>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80181ea:	1c66      	adds	r6, r4, #1
 80181ec:	2201      	movs	r2, #1
 80181ee:	4621      	mov	r1, r4
 80181f0:	4819      	ldr	r0, [pc, #100]	; (8018258 <SD_read+0xcc>)
 80181f2:	f7ff ff0b 	bl	801800c <BSP_SD_ReadBlocks_DMA>
      if (ret == MSD_OK) {
 80181f6:	4680      	mov	r8, r0
 80181f8:	b9d8      	cbnz	r0, 8018232 <SD_read+0xa6>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80181fa:	466c      	mov	r4, sp
 80181fc:	f247 5230 	movw	r2, #30000	; 0x7530
 8018200:	4b14      	ldr	r3, [pc, #80]	; (8018254 <SD_read+0xc8>)
 8018202:	6819      	ldr	r1, [r3, #0]
 8018204:	4620      	mov	r0, r4
 8018206:	f000 fa87 	bl	8018718 <osMessageGet>
 801820a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801820e:	ab08      	add	r3, sp, #32
 8018210:	e903 0007 	stmdb	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8018214:	9b05      	ldr	r3, [sp, #20]
 8018216:	2b10      	cmp	r3, #16
 8018218:	d1e2      	bne.n	80181e0 <SD_read+0x54>
          if (event.value.v == READ_CPLT_MSG) {
 801821a:	9b06      	ldr	r3, [sp, #24]
 801821c:	2b01      	cmp	r3, #1
 801821e:	d1df      	bne.n	80181e0 <SD_read+0x54>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 8018220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018224:	490c      	ldr	r1, [pc, #48]	; (8018258 <SD_read+0xcc>)
 8018226:	4648      	mov	r0, r9
 8018228:	f016 fc31 	bl	802ea8e <memcpy>
            buff += BLOCKSIZE;
 801822c:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8018230:	e7d6      	b.n	80181e0 <SD_read+0x54>
      {
        break;
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8018232:	45ba      	cmp	sl, r7
 8018234:	d001      	beq.n	801823a <SD_read+0xae>
  DRESULT res = RES_ERROR;
 8018236:	2001      	movs	r0, #1
 8018238:	e007      	b.n	801824a <SD_read+0xbe>
    if ((i == count) && (ret == MSD_OK))
 801823a:	f1b8 0f00 	cmp.w	r8, #0
 801823e:	d101      	bne.n	8018244 <SD_read+0xb8>
      res = RES_OK;
 8018240:	2000      	movs	r0, #0
 8018242:	e002      	b.n	801824a <SD_read+0xbe>
  DRESULT res = RES_ERROR;
 8018244:	2001      	movs	r0, #1
 8018246:	e000      	b.n	801824a <SD_read+0xbe>
    return res;
 8018248:	2001      	movs	r0, #1
  }

#endif

  return res;
} 
 801824a:	b008      	add	sp, #32
 801824c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          res = RES_OK;
 8018250:	2000      	movs	r0, #0
 8018252:	e7fa      	b.n	801824a <SD_read+0xbe>
 8018254:	200004fc 	.word	0x200004fc
 8018258:	20000500 	.word	0x20000500

0801825c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801825c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018260:	b088      	sub	sp, #32
 8018262:	4689      	mov	r9, r1
 8018264:	4614      	mov	r4, r2
 8018266:	461f      	mov	r7, r3

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8018268:	f247 5030 	movw	r0, #30000	; 0x7530
 801826c:	f7ff ff7a 	bl	8018164 <SD_CheckStatusWithTimeout>
 8018270:	2800      	cmp	r0, #0
 8018272:	db62      	blt.n	801833a <SD_write+0xde>
  {
    return res;
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8018274:	f019 0f03 	tst.w	r9, #3
 8018278:	d001      	beq.n	801827e <SD_write+0x22>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 801827a:	2500      	movs	r5, #0
 801827c:	e02b      	b.n	80182d6 <SD_write+0x7a>
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801827e:	463a      	mov	r2, r7
 8018280:	4621      	mov	r1, r4
 8018282:	4648      	mov	r0, r9
 8018284:	f7ff fece 	bl	8018024 <BSP_SD_WriteBlocks_DMA>
 8018288:	b108      	cbz	r0, 801828e <SD_write+0x32>
  DRESULT res = RES_ERROR;
 801828a:	2001      	movs	r0, #1
 801828c:	e056      	b.n	801833c <SD_write+0xe0>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801828e:	f247 5230 	movw	r2, #30000	; 0x7530
 8018292:	4b2c      	ldr	r3, [pc, #176]	; (8018344 <SD_write+0xe8>)
 8018294:	6819      	ldr	r1, [r3, #0]
 8018296:	a805      	add	r0, sp, #20
 8018298:	f000 fa3e 	bl	8018718 <osMessageGet>
      if (event.status == osEventMessage)
 801829c:	9b05      	ldr	r3, [sp, #20]
 801829e:	2b10      	cmp	r3, #16
 80182a0:	d001      	beq.n	80182a6 <SD_write+0x4a>
  DRESULT res = RES_ERROR;
 80182a2:	2001      	movs	r0, #1
 80182a4:	e04a      	b.n	801833c <SD_write+0xe0>
        if (event.value.v == WRITE_CPLT_MSG)
 80182a6:	9b06      	ldr	r3, [sp, #24]
 80182a8:	2b02      	cmp	r3, #2
 80182aa:	d001      	beq.n	80182b0 <SD_write+0x54>
  DRESULT res = RES_ERROR;
 80182ac:	2001      	movs	r0, #1
 80182ae:	e045      	b.n	801833c <SD_write+0xe0>
          timer = osKernelSysTick() + SD_TIMEOUT;
 80182b0:	f000 f8ff 	bl	80184b2 <osKernelSysTick>
 80182b4:	f500 44ea 	add.w	r4, r0, #29952	; 0x7500
 80182b8:	3430      	adds	r4, #48	; 0x30
          while(timer > osKernelSysTick())
 80182ba:	f000 f8fa 	bl	80184b2 <osKernelSysTick>
 80182be:	42a0      	cmp	r0, r4
 80182c0:	d205      	bcs.n	80182ce <SD_write+0x72>
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80182c2:	f7ff febb 	bl	801803c <BSP_SD_GetCardState>
 80182c6:	2800      	cmp	r0, #0
 80182c8:	d1f7      	bne.n	80182ba <SD_write+0x5e>
              res = RES_OK;
 80182ca:	2000      	movs	r0, #0
 80182cc:	e036      	b.n	801833c <SD_write+0xe0>
  DRESULT res = RES_ERROR;
 80182ce:	2001      	movs	r0, #1
 80182d0:	e034      	b.n	801833c <SD_write+0xe0>
    for (i = 0; i < count; i++) {
 80182d2:	3501      	adds	r5, #1
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80182d4:	4634      	mov	r4, r6
    for (i = 0; i < count; i++) {
 80182d6:	46aa      	mov	sl, r5
 80182d8:	42bd      	cmp	r5, r7
 80182da:	d223      	bcs.n	8018324 <SD_write+0xc8>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80182dc:	1c66      	adds	r6, r4, #1
 80182de:	2201      	movs	r2, #1
 80182e0:	4621      	mov	r1, r4
 80182e2:	4819      	ldr	r0, [pc, #100]	; (8018348 <SD_write+0xec>)
 80182e4:	f7ff fe9e 	bl	8018024 <BSP_SD_WriteBlocks_DMA>
      if (ret == MSD_OK) {
 80182e8:	4680      	mov	r8, r0
 80182ea:	b9d8      	cbnz	r0, 8018324 <SD_write+0xc8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80182ec:	466c      	mov	r4, sp
 80182ee:	f247 5230 	movw	r2, #30000	; 0x7530
 80182f2:	4b14      	ldr	r3, [pc, #80]	; (8018344 <SD_write+0xe8>)
 80182f4:	6819      	ldr	r1, [r3, #0]
 80182f6:	4620      	mov	r0, r4
 80182f8:	f000 fa0e 	bl	8018718 <osMessageGet>
 80182fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8018300:	ab08      	add	r3, sp, #32
 8018302:	e903 0007 	stmdb	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8018306:	9b05      	ldr	r3, [sp, #20]
 8018308:	2b10      	cmp	r3, #16
 801830a:	d1e2      	bne.n	80182d2 <SD_write+0x76>
          if (event.value.v == WRITE_CPLT_MSG) {
 801830c:	9b06      	ldr	r3, [sp, #24]
 801830e:	2b02      	cmp	r3, #2
 8018310:	d1df      	bne.n	80182d2 <SD_write+0x76>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8018312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018316:	490c      	ldr	r1, [pc, #48]	; (8018348 <SD_write+0xec>)
 8018318:	4648      	mov	r0, r9
 801831a:	f016 fbb8 	bl	802ea8e <memcpy>
            buff += BLOCKSIZE;
 801831e:	f509 7900 	add.w	r9, r9, #512	; 0x200
 8018322:	e7d6      	b.n	80182d2 <SD_write+0x76>
      {
        break;
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8018324:	45ba      	cmp	sl, r7
 8018326:	d001      	beq.n	801832c <SD_write+0xd0>
  DRESULT res = RES_ERROR;
 8018328:	2001      	movs	r0, #1
 801832a:	e007      	b.n	801833c <SD_write+0xe0>
    if ((i == count) && (ret == MSD_OK))
 801832c:	f1b8 0f00 	cmp.w	r8, #0
 8018330:	d101      	bne.n	8018336 <SD_write+0xda>
      res = RES_OK;
 8018332:	2000      	movs	r0, #0
 8018334:	e002      	b.n	801833c <SD_write+0xe0>
  DRESULT res = RES_ERROR;
 8018336:	2001      	movs	r0, #1
 8018338:	e000      	b.n	801833c <SD_write+0xe0>
    return res;
 801833a:	2001      	movs	r0, #1
  }
#endif
  return res;
} 
 801833c:	b008      	add	sp, #32
 801833e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018342:	bf00      	nop
 8018344:	200004fc 	.word	0x200004fc
 8018348:	20000500 	.word	0x20000500

0801834c <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801834c:	4b15      	ldr	r3, [pc, #84]	; (80183a4 <SD_ioctl+0x58>)
 801834e:	781b      	ldrb	r3, [r3, #0]
 8018350:	f013 0f01 	tst.w	r3, #1
 8018354:	d121      	bne.n	801839a <SD_ioctl+0x4e>
{
 8018356:	b510      	push	{r4, lr}
 8018358:	b088      	sub	sp, #32
 801835a:	4614      	mov	r4, r2

  switch (cmd)
 801835c:	2903      	cmp	r1, #3
 801835e:	d81e      	bhi.n	801839e <SD_ioctl+0x52>
 8018360:	e8df f001 	tbb	[pc, r1]
 8018364:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8018368:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 801836a:	b008      	add	sp, #32
 801836c:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 801836e:	4668      	mov	r0, sp
 8018370:	f7ff fe6e 	bl	8018050 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8018374:	9b06      	ldr	r3, [sp, #24]
 8018376:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8018378:	2000      	movs	r0, #0
    break;
 801837a:	e7f6      	b.n	801836a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 801837c:	4668      	mov	r0, sp
 801837e:	f7ff fe67 	bl	8018050 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8018382:	9b07      	ldr	r3, [sp, #28]
 8018384:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8018386:	2000      	movs	r0, #0
    break;
 8018388:	e7ef      	b.n	801836a <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 801838a:	4668      	mov	r0, sp
 801838c:	f7ff fe60 	bl	8018050 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8018390:	9b07      	ldr	r3, [sp, #28]
 8018392:	0a5b      	lsrs	r3, r3, #9
 8018394:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8018396:	2000      	movs	r0, #0
    break;
 8018398:	e7e7      	b.n	801836a <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801839a:	2003      	movs	r0, #3
}
 801839c:	4770      	bx	lr
    res = RES_PARERR;
 801839e:	2004      	movs	r0, #4
 80183a0:	e7e3      	b.n	801836a <SD_ioctl+0x1e>
 80183a2:	bf00      	nop
 80183a4:	20000090 	.word	0x20000090

080183a8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80183a8:	b508      	push	{r3, lr}
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 80183aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80183ae:	2101      	movs	r1, #1
 80183b0:	4b02      	ldr	r3, [pc, #8]	; (80183bc <BSP_SD_ReadCpltCallback+0x14>)
 80183b2:	6818      	ldr	r0, [r3, #0]
 80183b4:	f000 f97c 	bl	80186b0 <osMessagePut>
}
 80183b8:	bd08      	pop	{r3, pc}
 80183ba:	bf00      	nop
 80183bc:	200004fc 	.word	0x200004fc

080183c0 <GUI_X_GetTime>:
and delay function. Default time unit (tick), normally is
1 ms.
*/

int GUI_X_GetTime(void)
{
 80183c0:	b508      	push	{r3, lr}
  return ((int) osKernelSysTick());
 80183c2:	f000 f876 	bl	80184b2 <osKernelSysTick>
}
 80183c6:	bd08      	pop	{r3, pc}

080183c8 <GUI_X_Delay>:

void GUI_X_Delay(int ms)
{
 80183c8:	b508      	push	{r3, lr}
  osDelay( ms );
 80183ca:	f000 f8b6 	bl	801853a <osDelay>
}
 80183ce:	bd08      	pop	{r3, pc}

080183d0 <GUI_X_Init>:
* some hardware which needs to be up and running before the GUI.
* If not required, leave this routine blank.
*/

void GUI_X_Init(void) {
}
 80183d0:	4770      	bx	lr
	...

080183d4 <GUI_X_InitOS>:
* needs to be in GUIConf.h
*/

/* Init OS */
void GUI_X_InitOS(void)
{ 
 80183d4:	b530      	push	{r4, r5, lr}
 80183d6:	b085      	sub	sp, #20
  /* Create Mutex lock */
  osMutexDef(MUTEX);
 80183d8:	2400      	movs	r4, #0
 80183da:	9402      	str	r4, [sp, #8]
 80183dc:	9403      	str	r4, [sp, #12]
  
  /* Create the Mutex used by the two threads */
  osMutex = osMutexCreate(osMutex(MUTEX));
 80183de:	a802      	add	r0, sp, #8
 80183e0:	f000 f8b4 	bl	801854c <osMutexCreate>
 80183e4:	4d05      	ldr	r5, [pc, #20]	; (80183fc <GUI_X_InitOS+0x28>)
 80183e6:	6028      	str	r0, [r5, #0]
  
  /* Create Semaphore lock */
  osSemaphoreDef(SEM);
 80183e8:	9400      	str	r4, [sp, #0]
 80183ea:	9401      	str	r4, [sp, #4]
  
  /* Create the Semaphore used by the two threads */
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 80183ec:	2101      	movs	r1, #1
 80183ee:	4668      	mov	r0, sp
 80183f0:	f000 f91e 	bl	8018630 <osSemaphoreCreate>
 80183f4:	6068      	str	r0, [r5, #4]
}
 80183f6:	b005      	add	sp, #20
 80183f8:	bd30      	pop	{r4, r5, pc}
 80183fa:	bf00      	nop
 80183fc:	20000700 	.word	0x20000700

08018400 <GUI_X_Unlock>:

void GUI_X_Unlock(void)
{ 
 8018400:	b508      	push	{r3, lr}
  osMutexRelease(osMutex);
 8018402:	4b02      	ldr	r3, [pc, #8]	; (801840c <GUI_X_Unlock+0xc>)
 8018404:	6818      	ldr	r0, [r3, #0]
 8018406:	f000 f8e5 	bl	80185d4 <osMutexRelease>
}
 801840a:	bd08      	pop	{r3, pc}
 801840c:	20000700 	.word	0x20000700

08018410 <GUI_X_Lock>:

void GUI_X_Lock(void)
{
 8018410:	b508      	push	{r3, lr}
  osMutexWait(osMutex , osWaitForever) ;
 8018412:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018416:	4b02      	ldr	r3, [pc, #8]	; (8018420 <GUI_X_Lock+0x10>)
 8018418:	6818      	ldr	r0, [r3, #0]
 801841a:	f000 f8a3 	bl	8018564 <osMutexWait>
}
 801841e:	bd08      	pop	{r3, pc}
 8018420:	20000700 	.word	0x20000700

08018424 <GUI_X_GetTaskId>:

/* Get Task handle */
U32 GUI_X_GetTaskId(void) 
{ 
 8018424:	b508      	push	{r3, lr}
  return ((U32) osThreadGetId());
 8018426:	f000 f884 	bl	8018532 <osThreadGetId>
}
 801842a:	bd08      	pop	{r3, pc}

0801842c <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 801842c:	4b10      	ldr	r3, [pc, #64]	; (8018470 <FATFS_LinkDriverEx+0x44>)
 801842e:	7a5b      	ldrb	r3, [r3, #9]
 8018430:	b9db      	cbnz	r3, 801846a <FATFS_LinkDriverEx+0x3e>
{
 8018432:	b430      	push	{r4, r5}
  {
    disk.is_initialized[disk.nbr] = 0;
 8018434:	4b0e      	ldr	r3, [pc, #56]	; (8018470 <FATFS_LinkDriverEx+0x44>)
 8018436:	7a5d      	ldrb	r5, [r3, #9]
 8018438:	b2ed      	uxtb	r5, r5
 801843a:	2400      	movs	r4, #0
 801843c:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 801843e:	7a5d      	ldrb	r5, [r3, #9]
 8018440:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8018444:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8018446:	7a58      	ldrb	r0, [r3, #9]
 8018448:	4418      	add	r0, r3
 801844a:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 801844c:	7a5a      	ldrb	r2, [r3, #9]
 801844e:	b2d2      	uxtb	r2, r2
 8018450:	1c50      	adds	r0, r2, #1
 8018452:	b2c0      	uxtb	r0, r0
 8018454:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
 8018456:	3230      	adds	r2, #48	; 0x30
 8018458:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 801845a:	233a      	movs	r3, #58	; 0x3a
 801845c:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 801845e:	232f      	movs	r3, #47	; 0x2f
 8018460:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8018462:	70cc      	strb	r4, [r1, #3]
    ret = 0;
 8018464:	4620      	mov	r0, r4
  }

  return ret;
}
 8018466:	bc30      	pop	{r4, r5}
 8018468:	4770      	bx	lr
  uint8_t ret = 1;
 801846a:	2001      	movs	r0, #1
}
 801846c:	4770      	bx	lr
 801846e:	bf00      	nop
 8018470:	20000708 	.word	0x20000708

08018474 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018474:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8018476:	2200      	movs	r2, #0
 8018478:	f7ff ffd8 	bl	801842c <FATFS_LinkDriverEx>
}
 801847c:	bd08      	pop	{r3, pc}

0801847e <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 801847e:	2884      	cmp	r0, #132	; 0x84
 8018480:	d001      	beq.n	8018486 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 8018482:	3003      	adds	r0, #3
 8018484:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8018486:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8018488:	4770      	bx	lr

0801848a <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801848a:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 801848e:	3000      	adds	r0, #0
 8018490:	bf18      	it	ne
 8018492:	2001      	movne	r0, #1
 8018494:	4770      	bx	lr

08018496 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8018496:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8018498:	f001 f8dc 	bl	8019654 <vTaskStartScheduler>
  
  return osOK;
}
 801849c:	2000      	movs	r0, #0
 801849e:	bd08      	pop	{r3, pc}

080184a0 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 80184a0:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 80184a2:	f001 fb5f 	bl	8019b64 <xTaskGetSchedulerState>
 80184a6:	2801      	cmp	r0, #1
 80184a8:	d001      	beq.n	80184ae <osKernelRunning+0xe>
    return 0;
  else
    return 1;
 80184aa:	2001      	movs	r0, #1
#else
	return (-1);
#endif	
}
 80184ac:	bd08      	pop	{r3, pc}
    return 0;
 80184ae:	2000      	movs	r0, #0
 80184b0:	e7fc      	b.n	80184ac <osKernelRunning+0xc>

080184b2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80184b2:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 80184b4:	f7ff ffe9 	bl	801848a <inHandlerMode>
 80184b8:	b910      	cbnz	r0, 80184c0 <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 80184ba:	f001 f907 	bl	80196cc <xTaskGetTickCount>
  }
}
 80184be:	bd08      	pop	{r3, pc}
    return xTaskGetTickCountFromISR();
 80184c0:	f001 f90a 	bl	80196d8 <xTaskGetTickCountFromISR>
 80184c4:	e7fb      	b.n	80184be <osKernelSysTick+0xc>

080184c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80184c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80184ca:	b087      	sub	sp, #28
 80184cc:	4604      	mov	r4, r0
 80184ce:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80184d0:	6945      	ldr	r5, [r0, #20]
 80184d2:	b1a5      	cbz	r5, 80184fe <osThreadCreate+0x38>
 80184d4:	6986      	ldr	r6, [r0, #24]
 80184d6:	b196      	cbz	r6, 80184fe <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80184d8:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80184dc:	f8d0 9000 	ldr.w	r9, [r0]
 80184e0:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80184e4:	f7ff ffcb 	bl	801847e <makeFreeRtosPriority>
 80184e8:	6922      	ldr	r2, [r4, #16]
 80184ea:	9602      	str	r6, [sp, #8]
 80184ec:	9501      	str	r5, [sp, #4]
 80184ee:	9000      	str	r0, [sp, #0]
 80184f0:	463b      	mov	r3, r7
 80184f2:	4649      	mov	r1, r9
 80184f4:	4640      	mov	r0, r8
 80184f6:	f001 f841 	bl	801957c <xTaskCreateStatic>
 80184fa:	9005      	str	r0, [sp, #20]
 80184fc:	e013      	b.n	8018526 <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80184fe:	6865      	ldr	r5, [r4, #4]
 8018500:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8018502:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018506:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 801850a:	f7ff ffb8 	bl	801847e <makeFreeRtosPriority>
 801850e:	ab05      	add	r3, sp, #20
 8018510:	9301      	str	r3, [sp, #4]
 8018512:	9000      	str	r0, [sp, #0]
 8018514:	463b      	mov	r3, r7
 8018516:	fa1f f288 	uxth.w	r2, r8
 801851a:	4631      	mov	r1, r6
 801851c:	4628      	mov	r0, r5
 801851e:	f001 f866 	bl	80195ee <xTaskCreate>
 8018522:	2801      	cmp	r0, #1
 8018524:	d103      	bne.n	801852e <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8018526:	9805      	ldr	r0, [sp, #20]
}
 8018528:	b007      	add	sp, #28
 801852a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 801852e:	2000      	movs	r0, #0
 8018530:	e7fa      	b.n	8018528 <osThreadCreate+0x62>

08018532 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 8018532:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 8018534:	f001 fb10 	bl	8019b58 <xTaskGetCurrentTaskHandle>
#else
	return NULL;
#endif
}
 8018538:	bd08      	pop	{r3, pc}

0801853a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801853a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801853c:	4603      	mov	r3, r0
 801853e:	b900      	cbnz	r0, 8018542 <osDelay+0x8>
 8018540:	2301      	movs	r3, #1
 8018542:	4618      	mov	r0, r3
 8018544:	f001 f9d0 	bl	80198e8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8018548:	2000      	movs	r0, #0
 801854a:	bd08      	pop	{r3, pc}

0801854c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 801854c:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 801854e:	6841      	ldr	r1, [r0, #4]
 8018550:	b119      	cbz	r1, 801855a <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8018552:	2001      	movs	r0, #1
 8018554:	f000 fbfb 	bl	8018d4e <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8018558:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 801855a:	2001      	movs	r0, #1
 801855c:	f000 fbec 	bl	8018d38 <xQueueCreateMutex>
 8018560:	e7fa      	b.n	8018558 <osMutexCreate+0xc>
	...

08018564 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8018564:	b530      	push	{r4, r5, lr}
 8018566:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8018568:	2300      	movs	r3, #0
 801856a:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 801856c:	b350      	cbz	r0, 80185c4 <osMutexWait+0x60>
 801856e:	460c      	mov	r4, r1
 8018570:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 8018572:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8018576:	d002      	beq.n	801857e <osMutexWait+0x1a>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8018578:	b919      	cbnz	r1, 8018582 <osMutexWait+0x1e>
  ticks = 0;
 801857a:	461c      	mov	r4, r3
 801857c:	e001      	b.n	8018582 <osMutexWait+0x1e>
    ticks = portMAX_DELAY;
 801857e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8018582:	f7ff ff82 	bl	801848a <inHandlerMode>
 8018586:	b190      	cbz	r0, 80185ae <osMutexWait+0x4a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8018588:	aa01      	add	r2, sp, #4
 801858a:	2100      	movs	r1, #0
 801858c:	4628      	mov	r0, r5
 801858e:	f000 fe27 	bl	80191e0 <xQueueReceiveFromISR>
 8018592:	2801      	cmp	r0, #1
 8018594:	d118      	bne.n	80185c8 <osMutexWait+0x64>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8018596:	9b01      	ldr	r3, [sp, #4]
 8018598:	b1c3      	cbz	r3, 80185cc <osMutexWait+0x68>
 801859a:	4b0d      	ldr	r3, [pc, #52]	; (80185d0 <osMutexWait+0x6c>)
 801859c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80185a0:	601a      	str	r2, [r3, #0]
 80185a2:	f3bf 8f4f 	dsb	sy
 80185a6:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80185aa:	2000      	movs	r0, #0
 80185ac:	e006      	b.n	80185bc <osMutexWait+0x58>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80185ae:	4621      	mov	r1, r4
 80185b0:	4628      	mov	r0, r5
 80185b2:	f000 fd47 	bl	8019044 <xQueueSemaphoreTake>
 80185b6:	2801      	cmp	r0, #1
 80185b8:	d102      	bne.n	80185c0 <osMutexWait+0x5c>
  return osOK;
 80185ba:	2000      	movs	r0, #0
}
 80185bc:	b003      	add	sp, #12
 80185be:	bd30      	pop	{r4, r5, pc}
    return osErrorOS;
 80185c0:	20ff      	movs	r0, #255	; 0xff
 80185c2:	e7fb      	b.n	80185bc <osMutexWait+0x58>
    return osErrorParameter;
 80185c4:	2080      	movs	r0, #128	; 0x80
 80185c6:	e7f9      	b.n	80185bc <osMutexWait+0x58>
      return osErrorOS;
 80185c8:	20ff      	movs	r0, #255	; 0xff
 80185ca:	e7f7      	b.n	80185bc <osMutexWait+0x58>
  return osOK;
 80185cc:	2000      	movs	r0, #0
 80185ce:	e7f5      	b.n	80185bc <osMutexWait+0x58>
 80185d0:	e000ed04 	.word	0xe000ed04

080185d4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80185d4:	b510      	push	{r4, lr}
 80185d6:	b082      	sub	sp, #8
 80185d8:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80185da:	2300      	movs	r3, #0
 80185dc:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 80185de:	f7ff ff54 	bl	801848a <inHandlerMode>
 80185e2:	b188      	cbz	r0, 8018608 <osMutexRelease+0x34>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80185e4:	a901      	add	r1, sp, #4
 80185e6:	4620      	mov	r0, r4
 80185e8:	f000 fc26 	bl	8018e38 <xQueueGiveFromISR>
 80185ec:	2801      	cmp	r0, #1
 80185ee:	d116      	bne.n	801861e <osMutexRelease+0x4a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80185f0:	9b01      	ldr	r3, [sp, #4]
 80185f2:	b1b3      	cbz	r3, 8018622 <osMutexRelease+0x4e>
 80185f4:	4b0d      	ldr	r3, [pc, #52]	; (801862c <osMutexRelease+0x58>)
 80185f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80185fa:	601a      	str	r2, [r3, #0]
 80185fc:	f3bf 8f4f 	dsb	sy
 8018600:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8018604:	2000      	movs	r0, #0
 8018606:	e008      	b.n	801861a <osMutexRelease+0x46>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8018608:	2300      	movs	r3, #0
 801860a:	461a      	mov	r2, r3
 801860c:	4619      	mov	r1, r3
 801860e:	4620      	mov	r0, r4
 8018610:	f000 fac8 	bl	8018ba4 <xQueueGenericSend>
 8018614:	2801      	cmp	r0, #1
 8018616:	d106      	bne.n	8018626 <osMutexRelease+0x52>
  osStatus result = osOK;
 8018618:	2000      	movs	r0, #0
  {
    result = osErrorOS;
  }
  return result;
}
 801861a:	b002      	add	sp, #8
 801861c:	bd10      	pop	{r4, pc}
      return osErrorOS;
 801861e:	20ff      	movs	r0, #255	; 0xff
 8018620:	e7fb      	b.n	801861a <osMutexRelease+0x46>
  osStatus result = osOK;
 8018622:	2000      	movs	r0, #0
 8018624:	e7f9      	b.n	801861a <osMutexRelease+0x46>
    result = osErrorOS;
 8018626:	20ff      	movs	r0, #255	; 0xff
 8018628:	e7f7      	b.n	801861a <osMutexRelease+0x46>
 801862a:	bf00      	nop
 801862c:	e000ed04 	.word	0xe000ed04

08018630 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8018630:	b510      	push	{r4, lr}
 8018632:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8018634:	6842      	ldr	r2, [r0, #4]
 8018636:	b192      	cbz	r2, 801865e <osSemaphoreCreate+0x2e>
    if (count == 1) {
 8018638:	2901      	cmp	r1, #1
 801863a:	d006      	beq.n	801864a <osSemaphoreCreate+0x1a>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 801863c:	4608      	mov	r0, r1
 801863e:	f000 fa6c 	bl	8018b1a <xQueueCreateCountingSemaphoreStatic>
 8018642:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8018644:	4620      	mov	r0, r4
 8018646:	b002      	add	sp, #8
 8018648:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801864a:	2303      	movs	r3, #3
 801864c:	9300      	str	r3, [sp, #0]
 801864e:	4613      	mov	r3, r2
 8018650:	2200      	movs	r2, #0
 8018652:	4611      	mov	r1, r2
 8018654:	2001      	movs	r0, #1
 8018656:	f000 f9f1 	bl	8018a3c <xQueueGenericCreateStatic>
 801865a:	4604      	mov	r4, r0
 801865c:	e7f2      	b.n	8018644 <osSemaphoreCreate+0x14>
    if (count == 1) {
 801865e:	2901      	cmp	r1, #1
 8018660:	d004      	beq.n	801866c <osSemaphoreCreate+0x3c>
      return xSemaphoreCreateCounting(count, count);
 8018662:	4608      	mov	r0, r1
 8018664:	f000 fa7e 	bl	8018b64 <xQueueCreateCountingSemaphore>
 8018668:	4604      	mov	r4, r0
 801866a:	e7eb      	b.n	8018644 <osSemaphoreCreate+0x14>
      vSemaphoreCreateBinary(sema);
 801866c:	2203      	movs	r2, #3
 801866e:	2100      	movs	r1, #0
 8018670:	2001      	movs	r0, #1
 8018672:	f000 fa2b 	bl	8018acc <xQueueGenericCreate>
 8018676:	4604      	mov	r4, r0
 8018678:	2800      	cmp	r0, #0
 801867a:	d0e3      	beq.n	8018644 <osSemaphoreCreate+0x14>
 801867c:	2300      	movs	r3, #0
 801867e:	461a      	mov	r2, r3
 8018680:	4619      	mov	r1, r3
 8018682:	f000 fa8f 	bl	8018ba4 <xQueueGenericSend>
 8018686:	e7dd      	b.n	8018644 <osSemaphoreCreate+0x14>

08018688 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8018688:	b510      	push	{r4, lr}
 801868a:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801868c:	6882      	ldr	r2, [r0, #8]
 801868e:	b10a      	cbz	r2, 8018694 <osMessageCreate+0xc>
 8018690:	68c3      	ldr	r3, [r0, #12]
 8018692:	b933      	cbnz	r3, 80186a2 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8018694:	2200      	movs	r2, #0
 8018696:	6841      	ldr	r1, [r0, #4]
 8018698:	6800      	ldr	r0, [r0, #0]
 801869a:	f000 fa17 	bl	8018acc <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801869e:	b002      	add	sp, #8
 80186a0:	bd10      	pop	{r4, pc}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80186a2:	6841      	ldr	r1, [r0, #4]
 80186a4:	6800      	ldr	r0, [r0, #0]
 80186a6:	2400      	movs	r4, #0
 80186a8:	9400      	str	r4, [sp, #0]
 80186aa:	f000 f9c7 	bl	8018a3c <xQueueGenericCreateStatic>
 80186ae:	e7f6      	b.n	801869e <osMessageCreate+0x16>

080186b0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80186b0:	b530      	push	{r4, r5, lr}
 80186b2:	b085      	sub	sp, #20
 80186b4:	4604      	mov	r4, r0
 80186b6:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80186b8:	2300      	movs	r3, #0
 80186ba:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 80186bc:	4615      	mov	r5, r2
 80186be:	b902      	cbnz	r2, 80186c2 <osMessagePut+0x12>
    ticks = 1;
 80186c0:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 80186c2:	f7ff fee2 	bl	801848a <inHandlerMode>
 80186c6:	b198      	cbz	r0, 80186f0 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80186c8:	2300      	movs	r3, #0
 80186ca:	aa03      	add	r2, sp, #12
 80186cc:	a901      	add	r1, sp, #4
 80186ce:	4620      	mov	r0, r4
 80186d0:	f000 fb4c 	bl	8018d6c <xQueueGenericSendFromISR>
 80186d4:	2801      	cmp	r0, #1
 80186d6:	d118      	bne.n	801870a <osMessagePut+0x5a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80186d8:	9b03      	ldr	r3, [sp, #12]
 80186da:	b1c3      	cbz	r3, 801870e <osMessagePut+0x5e>
 80186dc:	4b0d      	ldr	r3, [pc, #52]	; (8018714 <osMessagePut+0x64>)
 80186de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80186e2:	601a      	str	r2, [r3, #0]
 80186e4:	f3bf 8f4f 	dsb	sy
 80186e8:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80186ec:	2000      	movs	r0, #0
 80186ee:	e008      	b.n	8018702 <osMessagePut+0x52>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80186f0:	2300      	movs	r3, #0
 80186f2:	462a      	mov	r2, r5
 80186f4:	a901      	add	r1, sp, #4
 80186f6:	4620      	mov	r0, r4
 80186f8:	f000 fa54 	bl	8018ba4 <xQueueGenericSend>
 80186fc:	2801      	cmp	r0, #1
 80186fe:	d102      	bne.n	8018706 <osMessagePut+0x56>
  return osOK;
 8018700:	2000      	movs	r0, #0
}
 8018702:	b005      	add	sp, #20
 8018704:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 8018706:	20ff      	movs	r0, #255	; 0xff
 8018708:	e7fb      	b.n	8018702 <osMessagePut+0x52>
      return osErrorOS;
 801870a:	20ff      	movs	r0, #255	; 0xff
 801870c:	e7f9      	b.n	8018702 <osMessagePut+0x52>
  return osOK;
 801870e:	2000      	movs	r0, #0
 8018710:	e7f7      	b.n	8018702 <osMessagePut+0x52>
 8018712:	bf00      	nop
 8018714:	e000ed04 	.word	0xe000ed04

08018718 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8018718:	b570      	push	{r4, r5, r6, lr}
 801871a:	b084      	sub	sp, #16
 801871c:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801871e:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 8018720:	2300      	movs	r3, #0
 8018722:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8018724:	b149      	cbz	r1, 801873a <osMessageGet+0x22>
 8018726:	460d      	mov	r5, r1
 8018728:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 801872a:	2300      	movs	r3, #0
 801872c:	9303      	str	r3, [sp, #12]
  
  ticks = 0;
  if (millisec == osWaitForever) {
 801872e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8018732:	d00b      	beq.n	801874c <osMessageGet+0x34>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8018734:	b962      	cbnz	r2, 8018750 <osMessageGet+0x38>
  ticks = 0;
 8018736:	461e      	mov	r6, r3
 8018738:	e00a      	b.n	8018750 <osMessageGet+0x38>
    event.status = osErrorParameter;
 801873a:	ab04      	add	r3, sp, #16
 801873c:	2280      	movs	r2, #128	; 0x80
 801873e:	f843 2d10 	str.w	r2, [r3, #-16]!
    return event;
 8018742:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018746:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801874a:	e02a      	b.n	80187a2 <osMessageGet+0x8a>
    ticks = portMAX_DELAY;
 801874c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8018750:	f7ff fe9b 	bl	801848a <inHandlerMode>
 8018754:	b1b0      	cbz	r0, 8018784 <osMessageGet+0x6c>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8018756:	aa03      	add	r2, sp, #12
 8018758:	a901      	add	r1, sp, #4
 801875a:	4628      	mov	r0, r5
 801875c:	f000 fd40 	bl	80191e0 <xQueueReceiveFromISR>
 8018760:	2801      	cmp	r0, #1
 8018762:	d00c      	beq.n	801877e <osMessageGet+0x66>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8018764:	2300      	movs	r3, #0
 8018766:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8018768:	9b03      	ldr	r3, [sp, #12]
 801876a:	b1ab      	cbz	r3, 8018798 <osMessageGet+0x80>
 801876c:	4b11      	ldr	r3, [pc, #68]	; (80187b4 <osMessageGet+0x9c>)
 801876e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018772:	601a      	str	r2, [r3, #0]
 8018774:	f3bf 8f4f 	dsb	sy
 8018778:	f3bf 8f6f 	isb	sy
 801877c:	e00c      	b.n	8018798 <osMessageGet+0x80>
      event.status = osEventMessage;
 801877e:	2310      	movs	r3, #16
 8018780:	9300      	str	r3, [sp, #0]
 8018782:	e7f1      	b.n	8018768 <osMessageGet+0x50>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8018784:	4632      	mov	r2, r6
 8018786:	a901      	add	r1, sp, #4
 8018788:	4628      	mov	r0, r5
 801878a:	f000 fbaf 	bl	8018eec <xQueueReceive>
 801878e:	2801      	cmp	r0, #1
 8018790:	d00a      	beq.n	80187a8 <osMessageGet+0x90>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8018792:	b966      	cbnz	r6, 80187ae <osMessageGet+0x96>
 8018794:	2300      	movs	r3, #0
 8018796:	9300      	str	r3, [sp, #0]
    }
  }
  
  return event;
 8018798:	466b      	mov	r3, sp
 801879a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801879e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80187a2:	4620      	mov	r0, r4
 80187a4:	b004      	add	sp, #16
 80187a6:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 80187a8:	2310      	movs	r3, #16
 80187aa:	9300      	str	r3, [sp, #0]
 80187ac:	e7f4      	b.n	8018798 <osMessageGet+0x80>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80187ae:	2340      	movs	r3, #64	; 0x40
 80187b0:	e7f1      	b.n	8018796 <osMessageGet+0x7e>
 80187b2:	bf00      	nop
 80187b4:	e000ed04 	.word	0xe000ed04

080187b8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80187b8:	f100 0308 	add.w	r3, r0, #8
 80187bc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80187be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80187c2:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80187c4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80187c6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80187c8:	2300      	movs	r3, #0
 80187ca:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80187cc:	4770      	bx	lr

080187ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80187ce:	2300      	movs	r3, #0
 80187d0:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80187d2:	4770      	bx	lr

080187d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80187d4:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80187d6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80187d8:	689a      	ldr	r2, [r3, #8]
 80187da:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80187dc:	689a      	ldr	r2, [r3, #8]
 80187de:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80187e0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80187e2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80187e4:	6803      	ldr	r3, [r0, #0]
 80187e6:	3301      	adds	r3, #1
 80187e8:	6003      	str	r3, [r0, #0]
}
 80187ea:	4770      	bx	lr

080187ec <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80187ec:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80187ee:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80187f0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80187f4:	d002      	beq.n	80187fc <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80187f6:	f100 0208 	add.w	r2, r0, #8
 80187fa:	e002      	b.n	8018802 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 80187fc:	6902      	ldr	r2, [r0, #16]
 80187fe:	e004      	b.n	801880a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018800:	461a      	mov	r2, r3
 8018802:	6853      	ldr	r3, [r2, #4]
 8018804:	681c      	ldr	r4, [r3, #0]
 8018806:	42ac      	cmp	r4, r5
 8018808:	d9fa      	bls.n	8018800 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801880a:	6853      	ldr	r3, [r2, #4]
 801880c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801880e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018810:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8018812:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8018814:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8018816:	6803      	ldr	r3, [r0, #0]
 8018818:	3301      	adds	r3, #1
 801881a:	6003      	str	r3, [r0, #0]
}
 801881c:	bc30      	pop	{r4, r5}
 801881e:	4770      	bx	lr

08018820 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8018820:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018822:	6842      	ldr	r2, [r0, #4]
 8018824:	6881      	ldr	r1, [r0, #8]
 8018826:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018828:	6882      	ldr	r2, [r0, #8]
 801882a:	6841      	ldr	r1, [r0, #4]
 801882c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801882e:	685a      	ldr	r2, [r3, #4]
 8018830:	4282      	cmp	r2, r0
 8018832:	d006      	beq.n	8018842 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8018834:	2200      	movs	r2, #0
 8018836:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8018838:	681a      	ldr	r2, [r3, #0]
 801883a:	3a01      	subs	r2, #1
 801883c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801883e:	6818      	ldr	r0, [r3, #0]
}
 8018840:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018842:	6882      	ldr	r2, [r0, #8]
 8018844:	605a      	str	r2, [r3, #4]
 8018846:	e7f5      	b.n	8018834 <uxListRemove+0x14>

08018848 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8018848:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801884a:	b123      	cbz	r3, 8018856 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801884c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801884e:	6818      	ldr	r0, [r3, #0]
 8018850:	f1c0 0007 	rsb	r0, r0, #7
 8018854:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8018856:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8018858:	4770      	bx	lr

0801885a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801885a:	b510      	push	{r4, lr}
 801885c:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801885e:	f001 fb29 	bl	8019eb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018862:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018864:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018866:	429a      	cmp	r2, r3
 8018868:	d004      	beq.n	8018874 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 801886a:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 801886c:	f001 fb44 	bl	8019ef8 <vPortExitCritical>

	return xReturn;
}
 8018870:	4620      	mov	r0, r4
 8018872:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8018874:	2401      	movs	r4, #1
 8018876:	e7f9      	b.n	801886c <prvIsQueueFull+0x12>

08018878 <prvIsQueueEmpty>:
{
 8018878:	b510      	push	{r4, lr}
 801887a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801887c:	f001 fb1a 	bl	8019eb4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018880:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018882:	b123      	cbz	r3, 801888e <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8018884:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8018886:	f001 fb37 	bl	8019ef8 <vPortExitCritical>
}
 801888a:	4620      	mov	r0, r4
 801888c:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 801888e:	2401      	movs	r4, #1
 8018890:	e7f9      	b.n	8018886 <prvIsQueueEmpty+0xe>

08018892 <prvCopyDataToQueue>:
{
 8018892:	b570      	push	{r4, r5, r6, lr}
 8018894:	4604      	mov	r4, r0
 8018896:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018898:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801889a:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801889c:	b95a      	cbnz	r2, 80188b6 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801889e:	6803      	ldr	r3, [r0, #0]
 80188a0:	b11b      	cbz	r3, 80188aa <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80188a2:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80188a4:	3501      	adds	r5, #1
 80188a6:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80188a8:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80188aa:	6840      	ldr	r0, [r0, #4]
 80188ac:	f001 f9cc 	bl	8019c48 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80188b0:	2300      	movs	r3, #0
 80188b2:	6063      	str	r3, [r4, #4]
 80188b4:	e7f6      	b.n	80188a4 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80188b6:	b96e      	cbnz	r6, 80188d4 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80188b8:	6880      	ldr	r0, [r0, #8]
 80188ba:	f016 f8e8 	bl	802ea8e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80188be:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80188c0:	68a3      	ldr	r3, [r4, #8]
 80188c2:	4413      	add	r3, r2
 80188c4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80188c6:	6862      	ldr	r2, [r4, #4]
 80188c8:	4293      	cmp	r3, r2
 80188ca:	d319      	bcc.n	8018900 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80188cc:	6823      	ldr	r3, [r4, #0]
 80188ce:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80188d0:	2000      	movs	r0, #0
 80188d2:	e7e7      	b.n	80188a4 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80188d4:	68c0      	ldr	r0, [r0, #12]
 80188d6:	f016 f8da 	bl	802ea8e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80188da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80188dc:	4252      	negs	r2, r2
 80188de:	68e3      	ldr	r3, [r4, #12]
 80188e0:	4413      	add	r3, r2
 80188e2:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80188e4:	6821      	ldr	r1, [r4, #0]
 80188e6:	428b      	cmp	r3, r1
 80188e8:	d202      	bcs.n	80188f0 <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80188ea:	6863      	ldr	r3, [r4, #4]
 80188ec:	441a      	add	r2, r3
 80188ee:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80188f0:	2e02      	cmp	r6, #2
 80188f2:	d001      	beq.n	80188f8 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80188f4:	2000      	movs	r0, #0
 80188f6:	e7d5      	b.n	80188a4 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80188f8:	b125      	cbz	r5, 8018904 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80188fa:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 80188fc:	2000      	movs	r0, #0
 80188fe:	e7d1      	b.n	80188a4 <prvCopyDataToQueue+0x12>
 8018900:	2000      	movs	r0, #0
 8018902:	e7cf      	b.n	80188a4 <prvCopyDataToQueue+0x12>
 8018904:	2000      	movs	r0, #0
 8018906:	e7cd      	b.n	80188a4 <prvCopyDataToQueue+0x12>

08018908 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018908:	6c02      	ldr	r2, [r0, #64]	; 0x40
 801890a:	b172      	cbz	r2, 801892a <prvCopyDataFromQueue+0x22>
{
 801890c:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 801890e:	68c3      	ldr	r3, [r0, #12]
 8018910:	4413      	add	r3, r2
 8018912:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018914:	6844      	ldr	r4, [r0, #4]
 8018916:	42a3      	cmp	r3, r4
 8018918:	d301      	bcc.n	801891e <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 801891a:	6803      	ldr	r3, [r0, #0]
 801891c:	60c3      	str	r3, [r0, #12]
 801891e:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8018920:	68c1      	ldr	r1, [r0, #12]
 8018922:	4620      	mov	r0, r4
 8018924:	f016 f8b3 	bl	802ea8e <memcpy>
}
 8018928:	bd10      	pop	{r4, pc}
 801892a:	4770      	bx	lr

0801892c <prvUnlockQueue>:
{
 801892c:	b538      	push	{r3, r4, r5, lr}
 801892e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8018930:	f001 fac0 	bl	8019eb4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8018934:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8018938:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801893a:	e003      	b.n	8018944 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 801893c:	f001 f904 	bl	8019b48 <vTaskMissedYield>
			--cTxLock;
 8018940:	3c01      	subs	r4, #1
 8018942:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018944:	2c00      	cmp	r4, #0
 8018946:	dd08      	ble.n	801895a <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018948:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801894a:	b133      	cbz	r3, 801895a <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801894c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8018950:	f001 f86e 	bl	8019a30 <xTaskRemoveFromEventList>
 8018954:	2800      	cmp	r0, #0
 8018956:	d0f3      	beq.n	8018940 <prvUnlockQueue+0x14>
 8018958:	e7f0      	b.n	801893c <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 801895a:	23ff      	movs	r3, #255	; 0xff
 801895c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8018960:	f001 faca 	bl	8019ef8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8018964:	f001 faa6 	bl	8019eb4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8018968:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 801896c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801896e:	e003      	b.n	8018978 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 8018970:	f001 f8ea 	bl	8019b48 <vTaskMissedYield>
				--cRxLock;
 8018974:	3c01      	subs	r4, #1
 8018976:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018978:	2c00      	cmp	r4, #0
 801897a:	dd08      	ble.n	801898e <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801897c:	692b      	ldr	r3, [r5, #16]
 801897e:	b133      	cbz	r3, 801898e <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018980:	f105 0010 	add.w	r0, r5, #16
 8018984:	f001 f854 	bl	8019a30 <xTaskRemoveFromEventList>
 8018988:	2800      	cmp	r0, #0
 801898a:	d0f3      	beq.n	8018974 <prvUnlockQueue+0x48>
 801898c:	e7f0      	b.n	8018970 <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 801898e:	23ff      	movs	r3, #255	; 0xff
 8018990:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8018994:	f001 fab0 	bl	8019ef8 <vPortExitCritical>
}
 8018998:	bd38      	pop	{r3, r4, r5, pc}
	...

0801899c <xQueueGenericReset>:
{
 801899c:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 801899e:	b940      	cbnz	r0, 80189b2 <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80189a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189a4:	f383 8811 	msr	BASEPRI, r3
 80189a8:	f3bf 8f6f 	isb	sy
 80189ac:	f3bf 8f4f 	dsb	sy
 80189b0:	e7fe      	b.n	80189b0 <xQueueGenericReset+0x14>
 80189b2:	4604      	mov	r4, r0
 80189b4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80189b6:	f001 fa7d 	bl	8019eb4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80189ba:	6821      	ldr	r1, [r4, #0]
 80189bc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80189be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80189c0:	fb03 1002 	mla	r0, r3, r2, r1
 80189c4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80189c6:	2000      	movs	r0, #0
 80189c8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80189ca:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80189cc:	3a01      	subs	r2, #1
 80189ce:	fb02 1303 	mla	r3, r2, r3, r1
 80189d2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80189d4:	23ff      	movs	r3, #255	; 0xff
 80189d6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80189da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80189de:	b9a5      	cbnz	r5, 8018a0a <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80189e0:	6923      	ldr	r3, [r4, #16]
 80189e2:	b91b      	cbnz	r3, 80189ec <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80189e4:	f001 fa88 	bl	8019ef8 <vPortExitCritical>
}
 80189e8:	2001      	movs	r0, #1
 80189ea:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80189ec:	f104 0010 	add.w	r0, r4, #16
 80189f0:	f001 f81e 	bl	8019a30 <xTaskRemoveFromEventList>
 80189f4:	2800      	cmp	r0, #0
 80189f6:	d0f5      	beq.n	80189e4 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 80189f8:	4b08      	ldr	r3, [pc, #32]	; (8018a1c <xQueueGenericReset+0x80>)
 80189fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80189fe:	601a      	str	r2, [r3, #0]
 8018a00:	f3bf 8f4f 	dsb	sy
 8018a04:	f3bf 8f6f 	isb	sy
 8018a08:	e7ec      	b.n	80189e4 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018a0a:	f104 0010 	add.w	r0, r4, #16
 8018a0e:	f7ff fed3 	bl	80187b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018a12:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8018a16:	f7ff fecf 	bl	80187b8 <vListInitialise>
 8018a1a:	e7e3      	b.n	80189e4 <xQueueGenericReset+0x48>
 8018a1c:	e000ed04 	.word	0xe000ed04

08018a20 <prvInitialiseNewQueue>:
{
 8018a20:	b510      	push	{r4, lr}
 8018a22:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8018a24:	460c      	mov	r4, r1
 8018a26:	b139      	cbz	r1, 8018a38 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018a28:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8018a2a:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018a2c:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018a2e:	2101      	movs	r1, #1
 8018a30:	4618      	mov	r0, r3
 8018a32:	f7ff ffb3 	bl	801899c <xQueueGenericReset>
}
 8018a36:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018a38:	601b      	str	r3, [r3, #0]
 8018a3a:	e7f6      	b.n	8018a2a <prvInitialiseNewQueue+0xa>

08018a3c <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018a3c:	b940      	cbnz	r0, 8018a50 <xQueueGenericCreateStatic+0x14>
 8018a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a42:	f383 8811 	msr	BASEPRI, r3
 8018a46:	f3bf 8f6f 	isb	sy
 8018a4a:	f3bf 8f4f 	dsb	sy
 8018a4e:	e7fe      	b.n	8018a4e <xQueueGenericCreateStatic+0x12>
	{
 8018a50:	b510      	push	{r4, lr}
 8018a52:	b084      	sub	sp, #16
 8018a54:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8018a56:	b153      	cbz	r3, 8018a6e <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018a58:	b192      	cbz	r2, 8018a80 <xQueueGenericCreateStatic+0x44>
 8018a5a:	b989      	cbnz	r1, 8018a80 <xQueueGenericCreateStatic+0x44>
 8018a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a60:	f383 8811 	msr	BASEPRI, r3
 8018a64:	f3bf 8f6f 	isb	sy
 8018a68:	f3bf 8f4f 	dsb	sy
 8018a6c:	e7fe      	b.n	8018a6c <xQueueGenericCreateStatic+0x30>
 8018a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a72:	f383 8811 	msr	BASEPRI, r3
 8018a76:	f3bf 8f6f 	isb	sy
 8018a7a:	f3bf 8f4f 	dsb	sy
 8018a7e:	e7fe      	b.n	8018a7e <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018a80:	b94a      	cbnz	r2, 8018a96 <xQueueGenericCreateStatic+0x5a>
 8018a82:	b141      	cbz	r1, 8018a96 <xQueueGenericCreateStatic+0x5a>
 8018a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a88:	f383 8811 	msr	BASEPRI, r3
 8018a8c:	f3bf 8f6f 	isb	sy
 8018a90:	f3bf 8f4f 	dsb	sy
 8018a94:	e7fe      	b.n	8018a94 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018a96:	2048      	movs	r0, #72	; 0x48
 8018a98:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018a9a:	9803      	ldr	r0, [sp, #12]
 8018a9c:	2848      	cmp	r0, #72	; 0x48
 8018a9e:	d008      	beq.n	8018ab2 <xQueueGenericCreateStatic+0x76>
 8018aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aa4:	f383 8811 	msr	BASEPRI, r3
 8018aa8:	f3bf 8f6f 	isb	sy
 8018aac:	f3bf 8f4f 	dsb	sy
 8018ab0:	e7fe      	b.n	8018ab0 <xQueueGenericCreateStatic+0x74>
 8018ab2:	4620      	mov	r0, r4
 8018ab4:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018ab6:	2301      	movs	r3, #1
 8018ab8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018abc:	9400      	str	r4, [sp, #0]
 8018abe:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8018ac2:	f7ff ffad 	bl	8018a20 <prvInitialiseNewQueue>
	}
 8018ac6:	4620      	mov	r0, r4
 8018ac8:	b004      	add	sp, #16
 8018aca:	bd10      	pop	{r4, pc}

08018acc <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018acc:	b940      	cbnz	r0, 8018ae0 <xQueueGenericCreate+0x14>
 8018ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ad2:	f383 8811 	msr	BASEPRI, r3
 8018ad6:	f3bf 8f6f 	isb	sy
 8018ada:	f3bf 8f4f 	dsb	sy
 8018ade:	e7fe      	b.n	8018ade <xQueueGenericCreate+0x12>
	{
 8018ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ae2:	b083      	sub	sp, #12
 8018ae4:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8018ae6:	b111      	cbz	r1, 8018aee <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018ae8:	fb01 f000 	mul.w	r0, r1, r0
 8018aec:	e000      	b.n	8018af0 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8018aee:	2000      	movs	r0, #0
 8018af0:	4617      	mov	r7, r2
 8018af2:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8018af4:	3048      	adds	r0, #72	; 0x48
 8018af6:	f001 fb7f 	bl	801a1f8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8018afa:	4605      	mov	r5, r0
 8018afc:	b150      	cbz	r0, 8018b14 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8018afe:	2300      	movs	r3, #0
 8018b00:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018b04:	9000      	str	r0, [sp, #0]
 8018b06:	463b      	mov	r3, r7
 8018b08:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8018b0c:	4621      	mov	r1, r4
 8018b0e:	4630      	mov	r0, r6
 8018b10:	f7ff ff86 	bl	8018a20 <prvInitialiseNewQueue>
	}
 8018b14:	4628      	mov	r0, r5
 8018b16:	b003      	add	sp, #12
 8018b18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018b1a <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8018b1a:	b940      	cbnz	r0, 8018b2e <xQueueCreateCountingSemaphoreStatic+0x14>
 8018b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b20:	f383 8811 	msr	BASEPRI, r3
 8018b24:	f3bf 8f6f 	isb	sy
 8018b28:	f3bf 8f4f 	dsb	sy
 8018b2c:	e7fe      	b.n	8018b2c <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8018b2e:	4288      	cmp	r0, r1
 8018b30:	d208      	bcs.n	8018b44 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8018b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b36:	f383 8811 	msr	BASEPRI, r3
 8018b3a:	f3bf 8f6f 	isb	sy
 8018b3e:	f3bf 8f4f 	dsb	sy
 8018b42:	e7fe      	b.n	8018b42 <xQueueCreateCountingSemaphoreStatic+0x28>
	{
 8018b44:	b510      	push	{r4, lr}
 8018b46:	b082      	sub	sp, #8
 8018b48:	4613      	mov	r3, r2
 8018b4a:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8018b4c:	2202      	movs	r2, #2
 8018b4e:	9200      	str	r2, [sp, #0]
 8018b50:	2200      	movs	r2, #0
 8018b52:	4611      	mov	r1, r2
 8018b54:	f7ff ff72 	bl	8018a3c <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8018b58:	4603      	mov	r3, r0
 8018b5a:	b100      	cbz	r0, 8018b5e <xQueueCreateCountingSemaphoreStatic+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8018b5c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8018b5e:	4618      	mov	r0, r3
 8018b60:	b002      	add	sp, #8
 8018b62:	bd10      	pop	{r4, pc}

08018b64 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8018b64:	b940      	cbnz	r0, 8018b78 <xQueueCreateCountingSemaphore+0x14>
 8018b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b6a:	f383 8811 	msr	BASEPRI, r3
 8018b6e:	f3bf 8f6f 	isb	sy
 8018b72:	f3bf 8f4f 	dsb	sy
 8018b76:	e7fe      	b.n	8018b76 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8018b78:	4288      	cmp	r0, r1
 8018b7a:	d208      	bcs.n	8018b8e <xQueueCreateCountingSemaphore+0x2a>
 8018b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b80:	f383 8811 	msr	BASEPRI, r3
 8018b84:	f3bf 8f6f 	isb	sy
 8018b88:	f3bf 8f4f 	dsb	sy
 8018b8c:	e7fe      	b.n	8018b8c <xQueueCreateCountingSemaphore+0x28>
	{
 8018b8e:	b510      	push	{r4, lr}
 8018b90:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8018b92:	2202      	movs	r2, #2
 8018b94:	2100      	movs	r1, #0
 8018b96:	f7ff ff99 	bl	8018acc <xQueueGenericCreate>
		if( xHandle != NULL )
 8018b9a:	4603      	mov	r3, r0
 8018b9c:	b100      	cbz	r0, 8018ba0 <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8018b9e:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	bd10      	pop	{r4, pc}

08018ba4 <xQueueGenericSend>:
{
 8018ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018ba6:	b085      	sub	sp, #20
 8018ba8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8018baa:	b160      	cbz	r0, 8018bc6 <xQueueGenericSend+0x22>
 8018bac:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018bae:	b999      	cbnz	r1, 8018bd8 <xQueueGenericSend+0x34>
 8018bb0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8018bb2:	b18a      	cbz	r2, 8018bd8 <xQueueGenericSend+0x34>
 8018bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bb8:	f383 8811 	msr	BASEPRI, r3
 8018bbc:	f3bf 8f6f 	isb	sy
 8018bc0:	f3bf 8f4f 	dsb	sy
 8018bc4:	e7fe      	b.n	8018bc4 <xQueueGenericSend+0x20>
 8018bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bca:	f383 8811 	msr	BASEPRI, r3
 8018bce:	f3bf 8f6f 	isb	sy
 8018bd2:	f3bf 8f4f 	dsb	sy
 8018bd6:	e7fe      	b.n	8018bd6 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018bd8:	2b02      	cmp	r3, #2
 8018bda:	d10b      	bne.n	8018bf4 <xQueueGenericSend+0x50>
 8018bdc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8018bde:	2a01      	cmp	r2, #1
 8018be0:	d008      	beq.n	8018bf4 <xQueueGenericSend+0x50>
 8018be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018be6:	f383 8811 	msr	BASEPRI, r3
 8018bea:	f3bf 8f6f 	isb	sy
 8018bee:	f3bf 8f4f 	dsb	sy
 8018bf2:	e7fe      	b.n	8018bf2 <xQueueGenericSend+0x4e>
 8018bf4:	461e      	mov	r6, r3
 8018bf6:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018bf8:	f000 ffb4 	bl	8019b64 <xTaskGetSchedulerState>
 8018bfc:	b950      	cbnz	r0, 8018c14 <xQueueGenericSend+0x70>
 8018bfe:	9b01      	ldr	r3, [sp, #4]
 8018c00:	b153      	cbz	r3, 8018c18 <xQueueGenericSend+0x74>
 8018c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c06:	f383 8811 	msr	BASEPRI, r3
 8018c0a:	f3bf 8f6f 	isb	sy
 8018c0e:	f3bf 8f4f 	dsb	sy
 8018c12:	e7fe      	b.n	8018c12 <xQueueGenericSend+0x6e>
 8018c14:	2500      	movs	r5, #0
 8018c16:	e03a      	b.n	8018c8e <xQueueGenericSend+0xea>
 8018c18:	2500      	movs	r5, #0
 8018c1a:	e038      	b.n	8018c8e <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018c1c:	4632      	mov	r2, r6
 8018c1e:	4639      	mov	r1, r7
 8018c20:	4620      	mov	r0, r4
 8018c22:	f7ff fe36 	bl	8018892 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018c28:	b94b      	cbnz	r3, 8018c3e <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 8018c2a:	b1a8      	cbz	r0, 8018c58 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8018c2c:	4b3b      	ldr	r3, [pc, #236]	; (8018d1c <xQueueGenericSend+0x178>)
 8018c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018c32:	601a      	str	r2, [r3, #0]
 8018c34:	f3bf 8f4f 	dsb	sy
 8018c38:	f3bf 8f6f 	isb	sy
 8018c3c:	e00c      	b.n	8018c58 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018c3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8018c42:	f000 fef5 	bl	8019a30 <xTaskRemoveFromEventList>
 8018c46:	b138      	cbz	r0, 8018c58 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8018c48:	4b34      	ldr	r3, [pc, #208]	; (8018d1c <xQueueGenericSend+0x178>)
 8018c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018c4e:	601a      	str	r2, [r3, #0]
 8018c50:	f3bf 8f4f 	dsb	sy
 8018c54:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8018c58:	f001 f94e 	bl	8019ef8 <vPortExitCritical>
				return pdPASS;
 8018c5c:	2001      	movs	r0, #1
}
 8018c5e:	b005      	add	sp, #20
 8018c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8018c62:	f001 f949 	bl	8019ef8 <vPortExitCritical>
					return errQUEUE_FULL;
 8018c66:	2000      	movs	r0, #0
 8018c68:	e7f9      	b.n	8018c5e <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018c6a:	a802      	add	r0, sp, #8
 8018c6c:	f000 ff22 	bl	8019ab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018c70:	2501      	movs	r5, #1
 8018c72:	e019      	b.n	8018ca8 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8018c74:	2300      	movs	r3, #0
 8018c76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8018c7a:	e021      	b.n	8018cc0 <xQueueGenericSend+0x11c>
 8018c7c:	2300      	movs	r3, #0
 8018c7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018c82:	e023      	b.n	8018ccc <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8018c84:	4620      	mov	r0, r4
 8018c86:	f7ff fe51 	bl	801892c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018c8a:	f000 fdb5 	bl	80197f8 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8018c8e:	f001 f911 	bl	8019eb4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018c92:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018c94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018c96:	429a      	cmp	r2, r3
 8018c98:	d3c0      	bcc.n	8018c1c <xQueueGenericSend+0x78>
 8018c9a:	2e02      	cmp	r6, #2
 8018c9c:	d0be      	beq.n	8018c1c <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 8018c9e:	9b01      	ldr	r3, [sp, #4]
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d0de      	beq.n	8018c62 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 8018ca4:	2d00      	cmp	r5, #0
 8018ca6:	d0e0      	beq.n	8018c6a <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 8018ca8:	f001 f926 	bl	8019ef8 <vPortExitCritical>
		vTaskSuspendAll();
 8018cac:	f000 fd04 	bl	80196b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018cb0:	f001 f900 	bl	8019eb4 <vPortEnterCritical>
 8018cb4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018cb8:	b25b      	sxtb	r3, r3
 8018cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018cbe:	d0d9      	beq.n	8018c74 <xQueueGenericSend+0xd0>
 8018cc0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018cc4:	b25b      	sxtb	r3, r3
 8018cc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018cca:	d0d7      	beq.n	8018c7c <xQueueGenericSend+0xd8>
 8018ccc:	f001 f914 	bl	8019ef8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018cd0:	a901      	add	r1, sp, #4
 8018cd2:	a802      	add	r0, sp, #8
 8018cd4:	f000 fef8 	bl	8019ac8 <xTaskCheckForTimeOut>
 8018cd8:	b9c8      	cbnz	r0, 8018d0e <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8018cda:	4620      	mov	r0, r4
 8018cdc:	f7ff fdbd 	bl	801885a <prvIsQueueFull>
 8018ce0:	2800      	cmp	r0, #0
 8018ce2:	d0cf      	beq.n	8018c84 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8018ce4:	9901      	ldr	r1, [sp, #4]
 8018ce6:	f104 0010 	add.w	r0, r4, #16
 8018cea:	f000 fe87 	bl	80199fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8018cee:	4620      	mov	r0, r4
 8018cf0:	f7ff fe1c 	bl	801892c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8018cf4:	f000 fd80 	bl	80197f8 <xTaskResumeAll>
 8018cf8:	2800      	cmp	r0, #0
 8018cfa:	d1c8      	bne.n	8018c8e <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8018cfc:	4b07      	ldr	r3, [pc, #28]	; (8018d1c <xQueueGenericSend+0x178>)
 8018cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018d02:	601a      	str	r2, [r3, #0]
 8018d04:	f3bf 8f4f 	dsb	sy
 8018d08:	f3bf 8f6f 	isb	sy
 8018d0c:	e7bf      	b.n	8018c8e <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8018d0e:	4620      	mov	r0, r4
 8018d10:	f7ff fe0c 	bl	801892c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018d14:	f000 fd70 	bl	80197f8 <xTaskResumeAll>
			return errQUEUE_FULL;
 8018d18:	2000      	movs	r0, #0
 8018d1a:	e7a0      	b.n	8018c5e <xQueueGenericSend+0xba>
 8018d1c:	e000ed04 	.word	0xe000ed04

08018d20 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8018d20:	b148      	cbz	r0, 8018d36 <prvInitialiseMutex+0x16>
	{
 8018d22:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8018d24:	2100      	movs	r1, #0
 8018d26:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8018d28:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8018d2a:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8018d2c:	460b      	mov	r3, r1
 8018d2e:	460a      	mov	r2, r1
 8018d30:	f7ff ff38 	bl	8018ba4 <xQueueGenericSend>
	}
 8018d34:	bd08      	pop	{r3, pc}
 8018d36:	4770      	bx	lr

08018d38 <xQueueCreateMutex>:
	{
 8018d38:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8018d3a:	4602      	mov	r2, r0
 8018d3c:	2100      	movs	r1, #0
 8018d3e:	2001      	movs	r0, #1
 8018d40:	f7ff fec4 	bl	8018acc <xQueueGenericCreate>
 8018d44:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8018d46:	f7ff ffeb 	bl	8018d20 <prvInitialiseMutex>
	}
 8018d4a:	4620      	mov	r0, r4
 8018d4c:	bd10      	pop	{r4, pc}

08018d4e <xQueueCreateMutexStatic>:
	{
 8018d4e:	b510      	push	{r4, lr}
 8018d50:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8018d52:	9000      	str	r0, [sp, #0]
 8018d54:	460b      	mov	r3, r1
 8018d56:	2200      	movs	r2, #0
 8018d58:	4611      	mov	r1, r2
 8018d5a:	2001      	movs	r0, #1
 8018d5c:	f7ff fe6e 	bl	8018a3c <xQueueGenericCreateStatic>
 8018d60:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8018d62:	f7ff ffdd 	bl	8018d20 <prvInitialiseMutex>
	}
 8018d66:	4620      	mov	r0, r4
 8018d68:	b002      	add	sp, #8
 8018d6a:	bd10      	pop	{r4, pc}

08018d6c <xQueueGenericSendFromISR>:
{
 8018d6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8018d70:	b160      	cbz	r0, 8018d8c <xQueueGenericSendFromISR+0x20>
 8018d72:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018d74:	b999      	cbnz	r1, 8018d9e <xQueueGenericSendFromISR+0x32>
 8018d76:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8018d78:	b188      	cbz	r0, 8018d9e <xQueueGenericSendFromISR+0x32>
 8018d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d7e:	f383 8811 	msr	BASEPRI, r3
 8018d82:	f3bf 8f6f 	isb	sy
 8018d86:	f3bf 8f4f 	dsb	sy
 8018d8a:	e7fe      	b.n	8018d8a <xQueueGenericSendFromISR+0x1e>
 8018d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d90:	f383 8811 	msr	BASEPRI, r3
 8018d94:	f3bf 8f6f 	isb	sy
 8018d98:	f3bf 8f4f 	dsb	sy
 8018d9c:	e7fe      	b.n	8018d9c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018d9e:	2b02      	cmp	r3, #2
 8018da0:	d10b      	bne.n	8018dba <xQueueGenericSendFromISR+0x4e>
 8018da2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8018da4:	2801      	cmp	r0, #1
 8018da6:	d008      	beq.n	8018dba <xQueueGenericSendFromISR+0x4e>
 8018da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dac:	f383 8811 	msr	BASEPRI, r3
 8018db0:	f3bf 8f6f 	isb	sy
 8018db4:	f3bf 8f4f 	dsb	sy
 8018db8:	e7fe      	b.n	8018db8 <xQueueGenericSendFromISR+0x4c>
 8018dba:	461f      	mov	r7, r3
 8018dbc:	4690      	mov	r8, r2
 8018dbe:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018dc0:	f001 f99e 	bl	801a100 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8018dc4:	f3ef 8611 	mrs	r6, BASEPRI
 8018dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dcc:	f383 8811 	msr	BASEPRI, r3
 8018dd0:	f3bf 8f6f 	isb	sy
 8018dd4:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018dd8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8018dda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018ddc:	429a      	cmp	r2, r3
 8018dde:	d303      	bcc.n	8018de8 <xQueueGenericSendFromISR+0x7c>
 8018de0:	2f02      	cmp	r7, #2
 8018de2:	d001      	beq.n	8018de8 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8018de4:	2000      	movs	r0, #0
 8018de6:	e00f      	b.n	8018e08 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8018de8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8018dec:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018dee:	463a      	mov	r2, r7
 8018df0:	4649      	mov	r1, r9
 8018df2:	4620      	mov	r0, r4
 8018df4:	f7ff fd4d 	bl	8018892 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8018df8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8018dfc:	d008      	beq.n	8018e10 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018dfe:	1c6b      	adds	r3, r5, #1
 8018e00:	b25b      	sxtb	r3, r3
 8018e02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8018e06:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8018e08:	f386 8811 	msr	BASEPRI, r6
}
 8018e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018e10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e12:	b15b      	cbz	r3, 8018e2c <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018e14:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8018e18:	f000 fe0a 	bl	8019a30 <xTaskRemoveFromEventList>
 8018e1c:	b140      	cbz	r0, 8018e30 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8018e1e:	f1b8 0f00 	cmp.w	r8, #0
 8018e22:	d007      	beq.n	8018e34 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018e24:	2001      	movs	r0, #1
 8018e26:	f8c8 0000 	str.w	r0, [r8]
 8018e2a:	e7ed      	b.n	8018e08 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 8018e2c:	2001      	movs	r0, #1
 8018e2e:	e7eb      	b.n	8018e08 <xQueueGenericSendFromISR+0x9c>
 8018e30:	2001      	movs	r0, #1
 8018e32:	e7e9      	b.n	8018e08 <xQueueGenericSendFromISR+0x9c>
 8018e34:	2001      	movs	r0, #1
 8018e36:	e7e7      	b.n	8018e08 <xQueueGenericSendFromISR+0x9c>

08018e38 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8018e38:	b160      	cbz	r0, 8018e54 <xQueueGiveFromISR+0x1c>
{
 8018e3a:	b570      	push	{r4, r5, r6, lr}
 8018e3c:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8018e3e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8018e40:	b18b      	cbz	r3, 8018e66 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8018e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e46:	f383 8811 	msr	BASEPRI, r3
 8018e4a:	f3bf 8f6f 	isb	sy
 8018e4e:	f3bf 8f4f 	dsb	sy
 8018e52:	e7fe      	b.n	8018e52 <xQueueGiveFromISR+0x1a>
 8018e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e58:	f383 8811 	msr	BASEPRI, r3
 8018e5c:	f3bf 8f6f 	isb	sy
 8018e60:	f3bf 8f4f 	dsb	sy
 8018e64:	e7fe      	b.n	8018e64 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8018e66:	6803      	ldr	r3, [r0, #0]
 8018e68:	b32b      	cbz	r3, 8018eb6 <xQueueGiveFromISR+0x7e>
 8018e6a:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018e6c:	f001 f948 	bl	801a100 <vPortValidateInterruptPriority>
	__asm volatile
 8018e70:	f3ef 8511 	mrs	r5, BASEPRI
 8018e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e78:	f383 8811 	msr	BASEPRI, r3
 8018e7c:	f3bf 8f6f 	isb	sy
 8018e80:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018e84:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8018e86:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018e88:	4293      	cmp	r3, r2
 8018e8a:	d926      	bls.n	8018eda <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8018e8c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018e90:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018e92:	3201      	adds	r2, #1
 8018e94:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8018e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018e9a:	d118      	bne.n	8018ece <xQueueGiveFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018e9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e9e:	b1f3      	cbz	r3, 8018ede <xQueueGiveFromISR+0xa6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018ea0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8018ea4:	f000 fdc4 	bl	8019a30 <xTaskRemoveFromEventList>
 8018ea8:	b1d8      	cbz	r0, 8018ee2 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8018eaa:	b1e6      	cbz	r6, 8018ee6 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018eac:	2001      	movs	r0, #1
 8018eae:	6030      	str	r0, [r6, #0]
	__asm volatile
 8018eb0:	f385 8811 	msr	BASEPRI, r5
}
 8018eb4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8018eb6:	6843      	ldr	r3, [r0, #4]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d0d6      	beq.n	8018e6a <xQueueGiveFromISR+0x32>
	__asm volatile
 8018ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ec0:	f383 8811 	msr	BASEPRI, r3
 8018ec4:	f3bf 8f6f 	isb	sy
 8018ec8:	f3bf 8f4f 	dsb	sy
 8018ecc:	e7fe      	b.n	8018ecc <xQueueGiveFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018ece:	3301      	adds	r3, #1
 8018ed0:	b25b      	sxtb	r3, r3
 8018ed2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8018ed6:	2001      	movs	r0, #1
 8018ed8:	e7ea      	b.n	8018eb0 <xQueueGiveFromISR+0x78>
			xReturn = errQUEUE_FULL;
 8018eda:	2000      	movs	r0, #0
 8018edc:	e7e8      	b.n	8018eb0 <xQueueGiveFromISR+0x78>
			xReturn = pdPASS;
 8018ede:	2001      	movs	r0, #1
 8018ee0:	e7e6      	b.n	8018eb0 <xQueueGiveFromISR+0x78>
 8018ee2:	2001      	movs	r0, #1
 8018ee4:	e7e4      	b.n	8018eb0 <xQueueGiveFromISR+0x78>
 8018ee6:	2001      	movs	r0, #1
 8018ee8:	e7e2      	b.n	8018eb0 <xQueueGiveFromISR+0x78>
	...

08018eec <xQueueReceive>:
{
 8018eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018eee:	b085      	sub	sp, #20
 8018ef0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8018ef2:	b160      	cbz	r0, 8018f0e <xQueueReceive+0x22>
 8018ef4:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018ef6:	b999      	cbnz	r1, 8018f20 <xQueueReceive+0x34>
 8018ef8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8018efa:	b18b      	cbz	r3, 8018f20 <xQueueReceive+0x34>
 8018efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f00:	f383 8811 	msr	BASEPRI, r3
 8018f04:	f3bf 8f6f 	isb	sy
 8018f08:	f3bf 8f4f 	dsb	sy
 8018f0c:	e7fe      	b.n	8018f0c <xQueueReceive+0x20>
 8018f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f12:	f383 8811 	msr	BASEPRI, r3
 8018f16:	f3bf 8f6f 	isb	sy
 8018f1a:	f3bf 8f4f 	dsb	sy
 8018f1e:	e7fe      	b.n	8018f1e <xQueueReceive+0x32>
 8018f20:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018f22:	f000 fe1f 	bl	8019b64 <xTaskGetSchedulerState>
 8018f26:	b950      	cbnz	r0, 8018f3e <xQueueReceive+0x52>
 8018f28:	9b01      	ldr	r3, [sp, #4]
 8018f2a:	b153      	cbz	r3, 8018f42 <xQueueReceive+0x56>
 8018f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f30:	f383 8811 	msr	BASEPRI, r3
 8018f34:	f3bf 8f6f 	isb	sy
 8018f38:	f3bf 8f4f 	dsb	sy
 8018f3c:	e7fe      	b.n	8018f3c <xQueueReceive+0x50>
 8018f3e:	2600      	movs	r6, #0
 8018f40:	e03e      	b.n	8018fc0 <xQueueReceive+0xd4>
 8018f42:	2600      	movs	r6, #0
 8018f44:	e03c      	b.n	8018fc0 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8018f46:	4639      	mov	r1, r7
 8018f48:	4620      	mov	r0, r4
 8018f4a:	f7ff fcdd 	bl	8018908 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8018f4e:	3d01      	subs	r5, #1
 8018f50:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018f52:	6923      	ldr	r3, [r4, #16]
 8018f54:	b923      	cbnz	r3, 8018f60 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 8018f56:	f000 ffcf 	bl	8019ef8 <vPortExitCritical>
				return pdPASS;
 8018f5a:	2001      	movs	r0, #1
}
 8018f5c:	b005      	add	sp, #20
 8018f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018f60:	f104 0010 	add.w	r0, r4, #16
 8018f64:	f000 fd64 	bl	8019a30 <xTaskRemoveFromEventList>
 8018f68:	2800      	cmp	r0, #0
 8018f6a:	d0f4      	beq.n	8018f56 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 8018f6c:	4b34      	ldr	r3, [pc, #208]	; (8019040 <xQueueReceive+0x154>)
 8018f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f72:	601a      	str	r2, [r3, #0]
 8018f74:	f3bf 8f4f 	dsb	sy
 8018f78:	f3bf 8f6f 	isb	sy
 8018f7c:	e7eb      	b.n	8018f56 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 8018f7e:	f000 ffbb 	bl	8019ef8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8018f82:	2000      	movs	r0, #0
 8018f84:	e7ea      	b.n	8018f5c <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018f86:	a802      	add	r0, sp, #8
 8018f88:	f000 fd94 	bl	8019ab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018f8c:	2601      	movs	r6, #1
 8018f8e:	e021      	b.n	8018fd4 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 8018f90:	2300      	movs	r3, #0
 8018f92:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8018f96:	e029      	b.n	8018fec <xQueueReceive+0x100>
 8018f98:	2300      	movs	r3, #0
 8018f9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018f9e:	e02b      	b.n	8018ff8 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 8018fa0:	4620      	mov	r0, r4
 8018fa2:	f7ff fcc3 	bl	801892c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8018fa6:	f000 fc27 	bl	80197f8 <xTaskResumeAll>
 8018faa:	e009      	b.n	8018fc0 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8018fac:	4620      	mov	r0, r4
 8018fae:	f7ff fcbd 	bl	801892c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8018fb2:	f000 fc21 	bl	80197f8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8018fb6:	4620      	mov	r0, r4
 8018fb8:	f7ff fc5e 	bl	8018878 <prvIsQueueEmpty>
 8018fbc:	2800      	cmp	r0, #0
 8018fbe:	d13d      	bne.n	801903c <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 8018fc0:	f000 ff78 	bl	8019eb4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018fc4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018fc6:	2d00      	cmp	r5, #0
 8018fc8:	d1bd      	bne.n	8018f46 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8018fca:	9b01      	ldr	r3, [sp, #4]
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d0d6      	beq.n	8018f7e <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8018fd0:	2e00      	cmp	r6, #0
 8018fd2:	d0d8      	beq.n	8018f86 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 8018fd4:	f000 ff90 	bl	8019ef8 <vPortExitCritical>
		vTaskSuspendAll();
 8018fd8:	f000 fb6e 	bl	80196b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018fdc:	f000 ff6a 	bl	8019eb4 <vPortEnterCritical>
 8018fe0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018fe4:	b25b      	sxtb	r3, r3
 8018fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018fea:	d0d1      	beq.n	8018f90 <xQueueReceive+0xa4>
 8018fec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018ff0:	b25b      	sxtb	r3, r3
 8018ff2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018ff6:	d0cf      	beq.n	8018f98 <xQueueReceive+0xac>
 8018ff8:	f000 ff7e 	bl	8019ef8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018ffc:	a901      	add	r1, sp, #4
 8018ffe:	a802      	add	r0, sp, #8
 8019000:	f000 fd62 	bl	8019ac8 <xTaskCheckForTimeOut>
 8019004:	2800      	cmp	r0, #0
 8019006:	d1d1      	bne.n	8018fac <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019008:	4620      	mov	r0, r4
 801900a:	f7ff fc35 	bl	8018878 <prvIsQueueEmpty>
 801900e:	2800      	cmp	r0, #0
 8019010:	d0c6      	beq.n	8018fa0 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019012:	9901      	ldr	r1, [sp, #4]
 8019014:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8019018:	f000 fcf0 	bl	80199fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801901c:	4620      	mov	r0, r4
 801901e:	f7ff fc85 	bl	801892c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8019022:	f000 fbe9 	bl	80197f8 <xTaskResumeAll>
 8019026:	2800      	cmp	r0, #0
 8019028:	d1ca      	bne.n	8018fc0 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 801902a:	4b05      	ldr	r3, [pc, #20]	; (8019040 <xQueueReceive+0x154>)
 801902c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019030:	601a      	str	r2, [r3, #0]
 8019032:	f3bf 8f4f 	dsb	sy
 8019036:	f3bf 8f6f 	isb	sy
 801903a:	e7c1      	b.n	8018fc0 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 801903c:	2000      	movs	r0, #0
 801903e:	e78d      	b.n	8018f5c <xQueueReceive+0x70>
 8019040:	e000ed04 	.word	0xe000ed04

08019044 <xQueueSemaphoreTake>:
{
 8019044:	b570      	push	{r4, r5, r6, lr}
 8019046:	b084      	sub	sp, #16
 8019048:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 801904a:	b940      	cbnz	r0, 801905e <xQueueSemaphoreTake+0x1a>
 801904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019050:	f383 8811 	msr	BASEPRI, r3
 8019054:	f3bf 8f6f 	isb	sy
 8019058:	f3bf 8f4f 	dsb	sy
 801905c:	e7fe      	b.n	801905c <xQueueSemaphoreTake+0x18>
 801905e:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8019060:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8019062:	b143      	cbz	r3, 8019076 <xQueueSemaphoreTake+0x32>
 8019064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019068:	f383 8811 	msr	BASEPRI, r3
 801906c:	f3bf 8f6f 	isb	sy
 8019070:	f3bf 8f4f 	dsb	sy
 8019074:	e7fe      	b.n	8019074 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8019076:	f000 fd75 	bl	8019b64 <xTaskGetSchedulerState>
 801907a:	b950      	cbnz	r0, 8019092 <xQueueSemaphoreTake+0x4e>
 801907c:	9b01      	ldr	r3, [sp, #4]
 801907e:	b15b      	cbz	r3, 8019098 <xQueueSemaphoreTake+0x54>
 8019080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019084:	f383 8811 	msr	BASEPRI, r3
 8019088:	f3bf 8f6f 	isb	sy
 801908c:	f3bf 8f4f 	dsb	sy
 8019090:	e7fe      	b.n	8019090 <xQueueSemaphoreTake+0x4c>
 8019092:	2500      	movs	r5, #0
 8019094:	462e      	mov	r6, r5
 8019096:	e051      	b.n	801913c <xQueueSemaphoreTake+0xf8>
 8019098:	2500      	movs	r5, #0
 801909a:	462e      	mov	r6, r5
 801909c:	e04e      	b.n	801913c <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801909e:	3b01      	subs	r3, #1
 80190a0:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80190a2:	6823      	ldr	r3, [r4, #0]
 80190a4:	b913      	cbnz	r3, 80190ac <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80190a6:	f000 fe89 	bl	8019dbc <pvTaskIncrementMutexHeldCount>
 80190aa:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80190ac:	6923      	ldr	r3, [r4, #16]
 80190ae:	b163      	cbz	r3, 80190ca <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80190b0:	f104 0010 	add.w	r0, r4, #16
 80190b4:	f000 fcbc 	bl	8019a30 <xTaskRemoveFromEventList>
 80190b8:	b138      	cbz	r0, 80190ca <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
 80190ba:	4b48      	ldr	r3, [pc, #288]	; (80191dc <xQueueSemaphoreTake+0x198>)
 80190bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80190c0:	601a      	str	r2, [r3, #0]
 80190c2:	f3bf 8f4f 	dsb	sy
 80190c6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80190ca:	f000 ff15 	bl	8019ef8 <vPortExitCritical>
				return pdPASS;
 80190ce:	2501      	movs	r5, #1
}
 80190d0:	4628      	mov	r0, r5
 80190d2:	b004      	add	sp, #16
 80190d4:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 80190d6:	b145      	cbz	r5, 80190ea <xQueueSemaphoreTake+0xa6>
 80190d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190dc:	f383 8811 	msr	BASEPRI, r3
 80190e0:	f3bf 8f6f 	isb	sy
 80190e4:	f3bf 8f4f 	dsb	sy
 80190e8:	e7fe      	b.n	80190e8 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
 80190ea:	f000 ff05 	bl	8019ef8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80190ee:	e7ef      	b.n	80190d0 <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80190f0:	a802      	add	r0, sp, #8
 80190f2:	f000 fcdf 	bl	8019ab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80190f6:	2601      	movs	r6, #1
 80190f8:	e02a      	b.n	8019150 <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
 80190fa:	2300      	movs	r3, #0
 80190fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8019100:	e032      	b.n	8019168 <xQueueSemaphoreTake+0x124>
 8019102:	2300      	movs	r3, #0
 8019104:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019108:	e034      	b.n	8019174 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
 801910a:	f000 fed3 	bl	8019eb4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 801910e:	6860      	ldr	r0, [r4, #4]
 8019110:	f000 fd38 	bl	8019b84 <xTaskPriorityInherit>
 8019114:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8019116:	f000 feef 	bl	8019ef8 <vPortExitCritical>
 801911a:	e03b      	b.n	8019194 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
 801911c:	4620      	mov	r0, r4
 801911e:	f7ff fc05 	bl	801892c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019122:	f000 fb69 	bl	80197f8 <xTaskResumeAll>
 8019126:	e009      	b.n	801913c <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
 8019128:	4620      	mov	r0, r4
 801912a:	f7ff fbff 	bl	801892c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801912e:	f000 fb63 	bl	80197f8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019132:	4620      	mov	r0, r4
 8019134:	f7ff fba0 	bl	8018878 <prvIsQueueEmpty>
 8019138:	2800      	cmp	r0, #0
 801913a:	d140      	bne.n	80191be <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
 801913c:	f000 feba 	bl	8019eb4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8019140:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8019142:	2b00      	cmp	r3, #0
 8019144:	d1ab      	bne.n	801909e <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8019146:	9b01      	ldr	r3, [sp, #4]
 8019148:	2b00      	cmp	r3, #0
 801914a:	d0c4      	beq.n	80190d6 <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
 801914c:	2e00      	cmp	r6, #0
 801914e:	d0cf      	beq.n	80190f0 <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
 8019150:	f000 fed2 	bl	8019ef8 <vPortExitCritical>
		vTaskSuspendAll();
 8019154:	f000 fab0 	bl	80196b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019158:	f000 feac 	bl	8019eb4 <vPortEnterCritical>
 801915c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019160:	b25b      	sxtb	r3, r3
 8019162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019166:	d0c8      	beq.n	80190fa <xQueueSemaphoreTake+0xb6>
 8019168:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801916c:	b25b      	sxtb	r3, r3
 801916e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019172:	d0c6      	beq.n	8019102 <xQueueSemaphoreTake+0xbe>
 8019174:	f000 fec0 	bl	8019ef8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019178:	a901      	add	r1, sp, #4
 801917a:	a802      	add	r0, sp, #8
 801917c:	f000 fca4 	bl	8019ac8 <xTaskCheckForTimeOut>
 8019180:	2800      	cmp	r0, #0
 8019182:	d1d1      	bne.n	8019128 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8019184:	4620      	mov	r0, r4
 8019186:	f7ff fb77 	bl	8018878 <prvIsQueueEmpty>
 801918a:	2800      	cmp	r0, #0
 801918c:	d0c6      	beq.n	801911c <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801918e:	6823      	ldr	r3, [r4, #0]
 8019190:	2b00      	cmp	r3, #0
 8019192:	d0ba      	beq.n	801910a <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8019194:	9901      	ldr	r1, [sp, #4]
 8019196:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801919a:	f000 fc2f 	bl	80199fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801919e:	4620      	mov	r0, r4
 80191a0:	f7ff fbc4 	bl	801892c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80191a4:	f000 fb28 	bl	80197f8 <xTaskResumeAll>
 80191a8:	2800      	cmp	r0, #0
 80191aa:	d1c7      	bne.n	801913c <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
 80191ac:	4b0b      	ldr	r3, [pc, #44]	; (80191dc <xQueueSemaphoreTake+0x198>)
 80191ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80191b2:	601a      	str	r2, [r3, #0]
 80191b4:	f3bf 8f4f 	dsb	sy
 80191b8:	f3bf 8f6f 	isb	sy
 80191bc:	e7be      	b.n	801913c <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
 80191be:	2d00      	cmp	r5, #0
 80191c0:	d086      	beq.n	80190d0 <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
 80191c2:	f000 fe77 	bl	8019eb4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80191c6:	4620      	mov	r0, r4
 80191c8:	f7ff fb3e 	bl	8018848 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80191cc:	4601      	mov	r1, r0
 80191ce:	6860      	ldr	r0, [r4, #4]
 80191d0:	f000 fd92 	bl	8019cf8 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80191d4:	f000 fe90 	bl	8019ef8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80191d8:	2500      	movs	r5, #0
 80191da:	e779      	b.n	80190d0 <xQueueSemaphoreTake+0x8c>
 80191dc:	e000ed04 	.word	0xe000ed04

080191e0 <xQueueReceiveFromISR>:
{
 80191e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80191e4:	b160      	cbz	r0, 8019200 <xQueueReceiveFromISR+0x20>
 80191e6:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80191e8:	b999      	cbnz	r1, 8019212 <xQueueReceiveFromISR+0x32>
 80191ea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80191ec:	b18b      	cbz	r3, 8019212 <xQueueReceiveFromISR+0x32>
 80191ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191f2:	f383 8811 	msr	BASEPRI, r3
 80191f6:	f3bf 8f6f 	isb	sy
 80191fa:	f3bf 8f4f 	dsb	sy
 80191fe:	e7fe      	b.n	80191fe <xQueueReceiveFromISR+0x1e>
 8019200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019204:	f383 8811 	msr	BASEPRI, r3
 8019208:	f3bf 8f6f 	isb	sy
 801920c:	f3bf 8f4f 	dsb	sy
 8019210:	e7fe      	b.n	8019210 <xQueueReceiveFromISR+0x30>
 8019212:	4617      	mov	r7, r2
 8019214:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8019216:	f000 ff73 	bl	801a100 <vPortValidateInterruptPriority>
	__asm volatile
 801921a:	f3ef 8611 	mrs	r6, BASEPRI
 801921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019222:	f383 8811 	msr	BASEPRI, r3
 8019226:	f3bf 8f6f 	isb	sy
 801922a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801922e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8019232:	f1b8 0f00 	cmp.w	r8, #0
 8019236:	d01d      	beq.n	8019274 <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
 8019238:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 801923c:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801923e:	4649      	mov	r1, r9
 8019240:	4620      	mov	r0, r4
 8019242:	f7ff fb61 	bl	8018908 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019246:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 801924a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 801924c:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8019250:	d005      	beq.n	801925e <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8019252:	1c6b      	adds	r3, r5, #1
 8019254:	b25b      	sxtb	r3, r3
 8019256:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 801925a:	2001      	movs	r0, #1
 801925c:	e00b      	b.n	8019276 <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801925e:	6923      	ldr	r3, [r4, #16]
 8019260:	b16b      	cbz	r3, 801927e <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019262:	f104 0010 	add.w	r0, r4, #16
 8019266:	f000 fbe3 	bl	8019a30 <xTaskRemoveFromEventList>
 801926a:	b150      	cbz	r0, 8019282 <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
 801926c:	b15f      	cbz	r7, 8019286 <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 801926e:	2001      	movs	r0, #1
 8019270:	6038      	str	r0, [r7, #0]
 8019272:	e000      	b.n	8019276 <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
 8019274:	2000      	movs	r0, #0
	__asm volatile
 8019276:	f386 8811 	msr	BASEPRI, r6
}
 801927a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
 801927e:	2001      	movs	r0, #1
 8019280:	e7f9      	b.n	8019276 <xQueueReceiveFromISR+0x96>
 8019282:	2001      	movs	r0, #1
 8019284:	e7f7      	b.n	8019276 <xQueueReceiveFromISR+0x96>
 8019286:	2001      	movs	r0, #1
 8019288:	e7f5      	b.n	8019276 <xQueueReceiveFromISR+0x96>
	...

0801928c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801928c:	4b07      	ldr	r3, [pc, #28]	; (80192ac <prvResetNextTaskUnblockTime+0x20>)
 801928e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019290:	681b      	ldr	r3, [r3, #0]
 8019292:	b133      	cbz	r3, 80192a2 <prvResetNextTaskUnblockTime+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8019294:	4b05      	ldr	r3, [pc, #20]	; (80192ac <prvResetNextTaskUnblockTime+0x20>)
 8019296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019298:	68d2      	ldr	r2, [r2, #12]
 801929a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801929c:	6852      	ldr	r2, [r2, #4]
 801929e:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 80192a0:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 80192a2:	4b02      	ldr	r3, [pc, #8]	; (80192ac <prvResetNextTaskUnblockTime+0x20>)
 80192a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80192a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80192aa:	4770      	bx	lr
 80192ac:	20000714 	.word	0x20000714

080192b0 <prvInitialiseNewTask>:
{
 80192b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80192b4:	4681      	mov	r9, r0
 80192b6:	460d      	mov	r5, r1
 80192b8:	4617      	mov	r7, r2
 80192ba:	469a      	mov	sl, r3
 80192bc:	9e08      	ldr	r6, [sp, #32]
 80192be:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80192c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80192c4:	0092      	lsls	r2, r2, #2
 80192c6:	21a5      	movs	r1, #165	; 0xa5
 80192c8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80192ca:	f015 fc04 	bl	802ead6 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80192ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80192d0:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 80192d4:	3a01      	subs	r2, #1
 80192d6:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80192da:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80192de:	2300      	movs	r3, #0
 80192e0:	2b0f      	cmp	r3, #15
 80192e2:	d807      	bhi.n	80192f4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80192e4:	5ce9      	ldrb	r1, [r5, r3]
 80192e6:	18e2      	adds	r2, r4, r3
 80192e8:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80192ec:	5cea      	ldrb	r2, [r5, r3]
 80192ee:	b10a      	cbz	r2, 80192f4 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80192f0:	3301      	adds	r3, #1
 80192f2:	e7f5      	b.n	80192e0 <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80192f4:	2300      	movs	r3, #0
 80192f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80192fa:	2e06      	cmp	r6, #6
 80192fc:	d900      	bls.n	8019300 <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80192fe:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 8019300:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8019302:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8019304:	2500      	movs	r5, #0
 8019306:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8019308:	1d20      	adds	r0, r4, #4
 801930a:	f7ff fa60 	bl	80187ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801930e:	f104 0018 	add.w	r0, r4, #24
 8019312:	f7ff fa5c 	bl	80187ce <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019316:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019318:	f1c6 0607 	rsb	r6, r6, #7
 801931c:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801931e:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 8019320:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 8019322:	6525      	str	r5, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019324:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019328:	4652      	mov	r2, sl
 801932a:	4649      	mov	r1, r9
 801932c:	4638      	mov	r0, r7
 801932e:	f000 fd93 	bl	8019e58 <pxPortInitialiseStack>
 8019332:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8019334:	f1b8 0f00 	cmp.w	r8, #0
 8019338:	d001      	beq.n	801933e <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801933a:	f8c8 4000 	str.w	r4, [r8]
}
 801933e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08019344 <prvInitialiseTaskLists>:
{
 8019344:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019346:	2400      	movs	r4, #0
 8019348:	e007      	b.n	801935a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801934a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801934e:	0093      	lsls	r3, r2, #2
 8019350:	4810      	ldr	r0, [pc, #64]	; (8019394 <prvInitialiseTaskLists+0x50>)
 8019352:	4418      	add	r0, r3
 8019354:	f7ff fa30 	bl	80187b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8019358:	3401      	adds	r4, #1
 801935a:	2c06      	cmp	r4, #6
 801935c:	d9f5      	bls.n	801934a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 801935e:	4c0e      	ldr	r4, [pc, #56]	; (8019398 <prvInitialiseTaskLists+0x54>)
 8019360:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
 8019364:	4630      	mov	r0, r6
 8019366:	f7ff fa27 	bl	80187b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801936a:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
 801936e:	4628      	mov	r0, r5
 8019370:	f7ff fa22 	bl	80187b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8019374:	f104 0014 	add.w	r0, r4, #20
 8019378:	f7ff fa1e 	bl	80187b8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 801937c:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 8019380:	f7ff fa1a 	bl	80187b8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8019384:	4620      	mov	r0, r4
 8019386:	f7ff fa17 	bl	80187b8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 801938a:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801938c:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
}
 8019390:	bd70      	pop	{r4, r5, r6, pc}
 8019392:	bf00      	nop
 8019394:	20000744 	.word	0x20000744
 8019398:	20000714 	.word	0x20000714

0801939c <prvAddNewTaskToReadyList>:
{
 801939c:	b538      	push	{r3, r4, r5, lr}
 801939e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80193a0:	f000 fd88 	bl	8019eb4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80193a4:	4b26      	ldr	r3, [pc, #152]	; (8019440 <prvAddNewTaskToReadyList+0xa4>)
 80193a6:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80193aa:	3201      	adds	r2, #1
 80193ac:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		if( pxCurrentTCB == NULL )
 80193b0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80193b4:	b173      	cbz	r3, 80193d4 <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 80193b6:	4b22      	ldr	r3, [pc, #136]	; (8019440 <prvAddNewTaskToReadyList+0xa4>)
 80193b8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80193bc:	b98b      	cbnz	r3, 80193e2 <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80193be:	4b20      	ldr	r3, [pc, #128]	; (8019440 <prvAddNewTaskToReadyList+0xa4>)
 80193c0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80193c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80193c6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80193c8:	429a      	cmp	r2, r3
 80193ca:	d80a      	bhi.n	80193e2 <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 80193cc:	4b1c      	ldr	r3, [pc, #112]	; (8019440 <prvAddNewTaskToReadyList+0xa4>)
 80193ce:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
 80193d2:	e006      	b.n	80193e2 <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 80193d4:	4b1a      	ldr	r3, [pc, #104]	; (8019440 <prvAddNewTaskToReadyList+0xa4>)
 80193d6:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80193da:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80193de:	2b01      	cmp	r3, #1
 80193e0:	d02a      	beq.n	8019438 <prvAddNewTaskToReadyList+0x9c>
		uxTaskNumber++;
 80193e2:	4c17      	ldr	r4, [pc, #92]	; (8019440 <prvAddNewTaskToReadyList+0xa4>)
 80193e4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80193e8:	3301      	adds	r3, #1
 80193ea:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		prvAddTaskToReadyList( pxNewTCB );
 80193ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80193f0:	2201      	movs	r2, #1
 80193f2:	409a      	lsls	r2, r3
 80193f4:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 80193f8:	430a      	orrs	r2, r1
 80193fa:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 80193fe:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8019402:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019406:	009a      	lsls	r2, r3, #2
 8019408:	1d29      	adds	r1, r5, #4
 801940a:	4410      	add	r0, r2
 801940c:	f7ff f9e2 	bl	80187d4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8019410:	f000 fd72 	bl	8019ef8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8019414:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8019418:	b16b      	cbz	r3, 8019436 <prvAddNewTaskToReadyList+0x9a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801941a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 801941e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019420:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8019422:	429a      	cmp	r2, r3
 8019424:	d207      	bcs.n	8019436 <prvAddNewTaskToReadyList+0x9a>
			taskYIELD_IF_USING_PREEMPTION();
 8019426:	4b07      	ldr	r3, [pc, #28]	; (8019444 <prvAddNewTaskToReadyList+0xa8>)
 8019428:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801942c:	601a      	str	r2, [r3, #0]
 801942e:	f3bf 8f4f 	dsb	sy
 8019432:	f3bf 8f6f 	isb	sy
}
 8019436:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 8019438:	f7ff ff84 	bl	8019344 <prvInitialiseTaskLists>
 801943c:	e7d1      	b.n	80193e2 <prvAddNewTaskToReadyList+0x46>
 801943e:	bf00      	nop
 8019440:	20000714 	.word	0x20000714
 8019444:	e000ed04 	.word	0xe000ed04

08019448 <prvDeleteTCB>:
	{
 8019448:	b510      	push	{r4, lr}
 801944a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801944c:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 8019450:	b933      	cbnz	r3, 8019460 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 8019452:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8019454:	f000 ff56 	bl	801a304 <vPortFree>
				vPortFree( pxTCB );
 8019458:	4620      	mov	r0, r4
 801945a:	f000 ff53 	bl	801a304 <vPortFree>
	}
 801945e:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8019460:	2b01      	cmp	r3, #1
 8019462:	d00a      	beq.n	801947a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8019464:	2b02      	cmp	r3, #2
 8019466:	d0fa      	beq.n	801945e <prvDeleteTCB+0x16>
	__asm volatile
 8019468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801946c:	f383 8811 	msr	BASEPRI, r3
 8019470:	f3bf 8f6f 	isb	sy
 8019474:	f3bf 8f4f 	dsb	sy
 8019478:	e7fe      	b.n	8019478 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 801947a:	f000 ff43 	bl	801a304 <vPortFree>
 801947e:	e7ee      	b.n	801945e <prvDeleteTCB+0x16>

08019480 <prvCheckTasksWaitingTermination>:
{
 8019480:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8019482:	e017      	b.n	80194b4 <prvCheckTasksWaitingTermination+0x34>
			taskENTER_CRITICAL();
 8019484:	f000 fd16 	bl	8019eb4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8019488:	4c0d      	ldr	r4, [pc, #52]	; (80194c0 <prvCheckTasksWaitingTermination+0x40>)
 801948a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 801948e:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019490:	1d28      	adds	r0, r5, #4
 8019492:	f7ff f9c5 	bl	8018820 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8019496:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 801949a:	3b01      	subs	r3, #1
 801949c:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
				--uxDeletedTasksWaitingCleanUp;
 80194a0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80194a4:	3b01      	subs	r3, #1
 80194a6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
			taskEXIT_CRITICAL();
 80194aa:	f000 fd25 	bl	8019ef8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80194ae:	4628      	mov	r0, r5
 80194b0:	f7ff ffca 	bl	8019448 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80194b4:	4b02      	ldr	r3, [pc, #8]	; (80194c0 <prvCheckTasksWaitingTermination+0x40>)
 80194b6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80194ba:	2b00      	cmp	r3, #0
 80194bc:	d1e2      	bne.n	8019484 <prvCheckTasksWaitingTermination+0x4>
}
 80194be:	bd38      	pop	{r3, r4, r5, pc}
 80194c0:	20000714 	.word	0x20000714

080194c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80194c4:	b570      	push	{r4, r5, r6, lr}
 80194c6:	4604      	mov	r4, r0
 80194c8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80194ca:	4b1f      	ldr	r3, [pc, #124]	; (8019548 <prvAddCurrentTaskToDelayedList+0x84>)
 80194cc:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80194d0:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 80194d4:	3004      	adds	r0, #4
 80194d6:	f7ff f9a3 	bl	8018820 <uxListRemove>
 80194da:	b960      	cbnz	r0, 80194f6 <prvAddCurrentTaskToDelayedList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80194dc:	4b1a      	ldr	r3, [pc, #104]	; (8019548 <prvAddCurrentTaskToDelayedList+0x84>)
 80194de:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80194e2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80194e4:	2201      	movs	r2, #1
 80194e6:	fa02 f101 	lsl.w	r1, r2, r1
 80194ea:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80194ee:	ea22 0201 	bic.w	r2, r2, r1
 80194f2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80194f6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80194fa:	d012      	beq.n	8019522 <prvAddCurrentTaskToDelayedList+0x5e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80194fc:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80194fe:	4b12      	ldr	r3, [pc, #72]	; (8019548 <prvAddCurrentTaskToDelayedList+0x84>)
 8019500:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8019504:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8019506:	42a5      	cmp	r5, r4
 8019508:	d814      	bhi.n	8019534 <prvAddCurrentTaskToDelayedList+0x70>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801950a:	4d0f      	ldr	r5, [pc, #60]	; (8019548 <prvAddCurrentTaskToDelayedList+0x84>)
 801950c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801950e:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8019512:	3104      	adds	r1, #4
 8019514:	f7ff f96a 	bl	80187ec <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8019518:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801951a:	42a3      	cmp	r3, r4
 801951c:	d912      	bls.n	8019544 <prvAddCurrentTaskToDelayedList+0x80>
				{
					xNextTaskUnblockTime = xTimeToWake;
 801951e:	62ec      	str	r4, [r5, #44]	; 0x2c

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8019520:	e010      	b.n	8019544 <prvAddCurrentTaskToDelayedList+0x80>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8019522:	2e00      	cmp	r6, #0
 8019524:	d0ea      	beq.n	80194fc <prvAddCurrentTaskToDelayedList+0x38>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019526:	4808      	ldr	r0, [pc, #32]	; (8019548 <prvAddCurrentTaskToDelayedList+0x84>)
 8019528:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 801952c:	3104      	adds	r1, #4
 801952e:	f7ff f951 	bl	80187d4 <vListInsertEnd>
 8019532:	e007      	b.n	8019544 <prvAddCurrentTaskToDelayedList+0x80>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8019534:	4b04      	ldr	r3, [pc, #16]	; (8019548 <prvAddCurrentTaskToDelayedList+0x84>)
 8019536:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 801953a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 801953e:	3104      	adds	r1, #4
 8019540:	f7ff f954 	bl	80187ec <vListInsert>
}
 8019544:	bd70      	pop	{r4, r5, r6, pc}
 8019546:	bf00      	nop
 8019548:	20000714 	.word	0x20000714

0801954c <prvIdleTask>:
{
 801954c:	b508      	push	{r3, lr}
 801954e:	e001      	b.n	8019554 <prvIdleTask+0x8>
			vApplicationIdleHook();
 8019550:	f7f7 ffbc 	bl	80114cc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8019554:	f7ff ff94 	bl	8019480 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019558:	4b06      	ldr	r3, [pc, #24]	; (8019574 <prvIdleTask+0x28>)
 801955a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801955c:	2b01      	cmp	r3, #1
 801955e:	d9f7      	bls.n	8019550 <prvIdleTask+0x4>
				taskYIELD();
 8019560:	4b05      	ldr	r3, [pc, #20]	; (8019578 <prvIdleTask+0x2c>)
 8019562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019566:	601a      	str	r2, [r3, #0]
 8019568:	f3bf 8f4f 	dsb	sy
 801956c:	f3bf 8f6f 	isb	sy
 8019570:	e7ee      	b.n	8019550 <prvIdleTask+0x4>
 8019572:	bf00      	nop
 8019574:	20000714 	.word	0x20000714
 8019578:	e000ed04 	.word	0xe000ed04

0801957c <xTaskCreateStatic>:
	{
 801957c:	b570      	push	{r4, r5, r6, lr}
 801957e:	b086      	sub	sp, #24
 8019580:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8019582:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8019584:	b945      	cbnz	r5, 8019598 <xTaskCreateStatic+0x1c>
 8019586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801958a:	f383 8811 	msr	BASEPRI, r3
 801958e:	f3bf 8f6f 	isb	sy
 8019592:	f3bf 8f4f 	dsb	sy
 8019596:	e7fe      	b.n	8019596 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8019598:	b944      	cbnz	r4, 80195ac <xTaskCreateStatic+0x30>
 801959a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801959e:	f383 8811 	msr	BASEPRI, r3
 80195a2:	f3bf 8f6f 	isb	sy
 80195a6:	f3bf 8f4f 	dsb	sy
 80195aa:	e7fe      	b.n	80195aa <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80195ac:	2658      	movs	r6, #88	; 0x58
 80195ae:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80195b0:	9e04      	ldr	r6, [sp, #16]
 80195b2:	2e58      	cmp	r6, #88	; 0x58
 80195b4:	d008      	beq.n	80195c8 <xTaskCreateStatic+0x4c>
 80195b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195ba:	f383 8811 	msr	BASEPRI, r3
 80195be:	f3bf 8f6f 	isb	sy
 80195c2:	f3bf 8f4f 	dsb	sy
 80195c6:	e7fe      	b.n	80195c6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80195c8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80195ca:	2502      	movs	r5, #2
 80195cc:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80195d0:	2500      	movs	r5, #0
 80195d2:	9503      	str	r5, [sp, #12]
 80195d4:	9402      	str	r4, [sp, #8]
 80195d6:	ad05      	add	r5, sp, #20
 80195d8:	9501      	str	r5, [sp, #4]
 80195da:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80195dc:	9500      	str	r5, [sp, #0]
 80195de:	f7ff fe67 	bl	80192b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80195e2:	4620      	mov	r0, r4
 80195e4:	f7ff feda 	bl	801939c <prvAddNewTaskToReadyList>
	}
 80195e8:	9805      	ldr	r0, [sp, #20]
 80195ea:	b006      	add	sp, #24
 80195ec:	bd70      	pop	{r4, r5, r6, pc}

080195ee <xTaskCreate>:
	{
 80195ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80195f2:	b085      	sub	sp, #20
 80195f4:	4607      	mov	r7, r0
 80195f6:	4688      	mov	r8, r1
 80195f8:	4615      	mov	r5, r2
 80195fa:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80195fc:	0090      	lsls	r0, r2, #2
 80195fe:	f000 fdfb 	bl	801a1f8 <pvPortMalloc>
			if( pxStack != NULL )
 8019602:	b308      	cbz	r0, 8019648 <xTaskCreate+0x5a>
 8019604:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8019606:	2058      	movs	r0, #88	; 0x58
 8019608:	f000 fdf6 	bl	801a1f8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801960c:	4604      	mov	r4, r0
 801960e:	b1b8      	cbz	r0, 8019640 <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 8019610:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 8019612:	b1e4      	cbz	r4, 801964e <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8019614:	2300      	movs	r3, #0
 8019616:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801961a:	9303      	str	r3, [sp, #12]
 801961c:	9402      	str	r4, [sp, #8]
 801961e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019620:	9301      	str	r3, [sp, #4]
 8019622:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019624:	9300      	str	r3, [sp, #0]
 8019626:	464b      	mov	r3, r9
 8019628:	462a      	mov	r2, r5
 801962a:	4641      	mov	r1, r8
 801962c:	4638      	mov	r0, r7
 801962e:	f7ff fe3f 	bl	80192b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019632:	4620      	mov	r0, r4
 8019634:	f7ff feb2 	bl	801939c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019638:	2001      	movs	r0, #1
	}
 801963a:	b005      	add	sp, #20
 801963c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8019640:	4630      	mov	r0, r6
 8019642:	f000 fe5f 	bl	801a304 <vPortFree>
 8019646:	e7e4      	b.n	8019612 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8019648:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801964c:	e7f5      	b.n	801963a <xTaskCreate+0x4c>
 801964e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 8019652:	e7f2      	b.n	801963a <xTaskCreate+0x4c>

08019654 <vTaskStartScheduler>:
{
 8019654:	b510      	push	{r4, lr}
 8019656:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019658:	2400      	movs	r4, #0
 801965a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801965c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801965e:	aa07      	add	r2, sp, #28
 8019660:	a906      	add	r1, sp, #24
 8019662:	a805      	add	r0, sp, #20
 8019664:	f7f7 ff36 	bl	80114d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019668:	9b05      	ldr	r3, [sp, #20]
 801966a:	9302      	str	r3, [sp, #8]
 801966c:	9b06      	ldr	r3, [sp, #24]
 801966e:	9301      	str	r3, [sp, #4]
 8019670:	9400      	str	r4, [sp, #0]
 8019672:	4623      	mov	r3, r4
 8019674:	9a07      	ldr	r2, [sp, #28]
 8019676:	490d      	ldr	r1, [pc, #52]	; (80196ac <vTaskStartScheduler+0x58>)
 8019678:	480d      	ldr	r0, [pc, #52]	; (80196b0 <vTaskStartScheduler+0x5c>)
 801967a:	f7ff ff7f 	bl	801957c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 801967e:	b908      	cbnz	r0, 8019684 <vTaskStartScheduler+0x30>
}
 8019680:	b008      	add	sp, #32
 8019682:	bd10      	pop	{r4, pc}
 8019684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019688:	f383 8811 	msr	BASEPRI, r3
 801968c:	f3bf 8f6f 	isb	sy
 8019690:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8019694:	4b07      	ldr	r3, [pc, #28]	; (80196b4 <vTaskStartScheduler+0x60>)
 8019696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801969a:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 801969c:	2201      	movs	r2, #1
 801969e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		xTickCount = ( TickType_t ) 0U;
 80196a2:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
		if( xPortStartScheduler() != pdFALSE )
 80196a6:	f000 fca7 	bl	8019ff8 <xPortStartScheduler>
 80196aa:	e7e9      	b.n	8019680 <vTaskStartScheduler+0x2c>
 80196ac:	08042918 	.word	0x08042918
 80196b0:	0801954d 	.word	0x0801954d
 80196b4:	20000714 	.word	0x20000714

080196b8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80196b8:	4a03      	ldr	r2, [pc, #12]	; (80196c8 <vTaskSuspendAll+0x10>)
 80196ba:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 80196be:	3301      	adds	r3, #1
 80196c0:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
}
 80196c4:	4770      	bx	lr
 80196c6:	bf00      	nop
 80196c8:	20000714 	.word	0x20000714

080196cc <xTaskGetTickCount>:
		xTicks = xTickCount;
 80196cc:	4b01      	ldr	r3, [pc, #4]	; (80196d4 <xTaskGetTickCount+0x8>)
 80196ce:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
 80196d2:	4770      	bx	lr
 80196d4:	20000714 	.word	0x20000714

080196d8 <xTaskGetTickCountFromISR>:
{
 80196d8:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80196da:	f000 fd11 	bl	801a100 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80196de:	4b02      	ldr	r3, [pc, #8]	; (80196e8 <xTaskGetTickCountFromISR+0x10>)
 80196e0:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
 80196e4:	bd08      	pop	{r3, pc}
 80196e6:	bf00      	nop
 80196e8:	20000714 	.word	0x20000714

080196ec <xTaskIncrementTick>:
{
 80196ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80196f0:	4b40      	ldr	r3, [pc, #256]	; (80197f4 <xTaskIncrementTick+0x108>)
 80196f2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d16c      	bne.n	80197d4 <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80196fa:	4b3e      	ldr	r3, [pc, #248]	; (80197f4 <xTaskIncrementTick+0x108>)
 80196fc:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
 8019700:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8019702:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019706:	b9cd      	cbnz	r5, 801973c <xTaskIncrementTick+0x50>
			taskSWITCH_DELAYED_LISTS();
 8019708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	b143      	cbz	r3, 8019720 <xTaskIncrementTick+0x34>
 801970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019712:	f383 8811 	msr	BASEPRI, r3
 8019716:	f3bf 8f6f 	isb	sy
 801971a:	f3bf 8f4f 	dsb	sy
 801971e:	e7fe      	b.n	801971e <xTaskIncrementTick+0x32>
 8019720:	4b34      	ldr	r3, [pc, #208]	; (80197f4 <xTaskIncrementTick+0x108>)
 8019722:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019724:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 8019728:	6299      	str	r1, [r3, #40]	; 0x28
 801972a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 801972e:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8019732:	3201      	adds	r2, #1
 8019734:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8019738:	f7ff fda8 	bl	801928c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 801973c:	4b2d      	ldr	r3, [pc, #180]	; (80197f4 <xTaskIncrementTick+0x108>)
 801973e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019740:	42ab      	cmp	r3, r5
 8019742:	d93d      	bls.n	80197c0 <xTaskIncrementTick+0xd4>
BaseType_t xSwitchRequired = pdFALSE;
 8019744:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019746:	4a2b      	ldr	r2, [pc, #172]	; (80197f4 <xTaskIncrementTick+0x108>)
 8019748:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 801974c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801974e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019752:	0099      	lsls	r1, r3, #2
 8019754:	440a      	add	r2, r1
 8019756:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8019758:	2b01      	cmp	r3, #1
 801975a:	d942      	bls.n	80197e2 <xTaskIncrementTick+0xf6>
				xSwitchRequired = pdTRUE;
 801975c:	2401      	movs	r4, #1
 801975e:	e040      	b.n	80197e2 <xTaskIncrementTick+0xf6>
							xSwitchRequired = pdTRUE;
 8019760:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019762:	4b24      	ldr	r3, [pc, #144]	; (80197f4 <xTaskIncrementTick+0x108>)
 8019764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	b363      	cbz	r3, 80197c4 <xTaskIncrementTick+0xd8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801976a:	4b22      	ldr	r3, [pc, #136]	; (80197f4 <xTaskIncrementTick+0x108>)
 801976c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801976e:	68db      	ldr	r3, [r3, #12]
 8019770:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019772:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8019774:	429d      	cmp	r5, r3
 8019776:	d32a      	bcc.n	80197ce <xTaskIncrementTick+0xe2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019778:	f106 0804 	add.w	r8, r6, #4
 801977c:	4640      	mov	r0, r8
 801977e:	f7ff f84f 	bl	8018820 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019782:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8019784:	b11b      	cbz	r3, 801978e <xTaskIncrementTick+0xa2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019786:	f106 0018 	add.w	r0, r6, #24
 801978a:	f7ff f849 	bl	8018820 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801978e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8019790:	2201      	movs	r2, #1
 8019792:	409a      	lsls	r2, r3
 8019794:	4f17      	ldr	r7, [pc, #92]	; (80197f4 <xTaskIncrementTick+0x108>)
 8019796:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 801979a:	430a      	orrs	r2, r1
 801979c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80197a0:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80197a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80197a8:	009a      	lsls	r2, r3, #2
 80197aa:	4641      	mov	r1, r8
 80197ac:	4410      	add	r0, r2
 80197ae:	f7ff f811 	bl	80187d4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80197b2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80197b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80197b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197ba:	429a      	cmp	r2, r3
 80197bc:	d2d0      	bcs.n	8019760 <xTaskIncrementTick+0x74>
 80197be:	e7d0      	b.n	8019762 <xTaskIncrementTick+0x76>
BaseType_t xSwitchRequired = pdFALSE;
 80197c0:	2400      	movs	r4, #0
 80197c2:	e7ce      	b.n	8019762 <xTaskIncrementTick+0x76>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80197c4:	4b0b      	ldr	r3, [pc, #44]	; (80197f4 <xTaskIncrementTick+0x108>)
 80197c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80197ca:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 80197cc:	e7bb      	b.n	8019746 <xTaskIncrementTick+0x5a>
						xNextTaskUnblockTime = xItemValue;
 80197ce:	4a09      	ldr	r2, [pc, #36]	; (80197f4 <xTaskIncrementTick+0x108>)
 80197d0:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
 80197d2:	e7b8      	b.n	8019746 <xTaskIncrementTick+0x5a>
		++uxPendedTicks;
 80197d4:	4a07      	ldr	r2, [pc, #28]	; (80197f4 <xTaskIncrementTick+0x108>)
 80197d6:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
 80197da:	3301      	adds	r3, #1
 80197dc:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
BaseType_t xSwitchRequired = pdFALSE;
 80197e0:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 80197e2:	4b04      	ldr	r3, [pc, #16]	; (80197f4 <xTaskIncrementTick+0x108>)
 80197e4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80197e8:	b103      	cbz	r3, 80197ec <xTaskIncrementTick+0x100>
			xSwitchRequired = pdTRUE;
 80197ea:	2401      	movs	r4, #1
}
 80197ec:	4620      	mov	r0, r4
 80197ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80197f2:	bf00      	nop
 80197f4:	20000714 	.word	0x20000714

080197f8 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80197f8:	4b39      	ldr	r3, [pc, #228]	; (80198e0 <xTaskResumeAll+0xe8>)
 80197fa:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80197fe:	b943      	cbnz	r3, 8019812 <xTaskResumeAll+0x1a>
 8019800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019804:	f383 8811 	msr	BASEPRI, r3
 8019808:	f3bf 8f6f 	isb	sy
 801980c:	f3bf 8f4f 	dsb	sy
 8019810:	e7fe      	b.n	8019810 <xTaskResumeAll+0x18>
{
 8019812:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 8019814:	f000 fb4e 	bl	8019eb4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8019818:	4b31      	ldr	r3, [pc, #196]	; (80198e0 <xTaskResumeAll+0xe8>)
 801981a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 801981e:	3a01      	subs	r2, #1
 8019820:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019824:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8019828:	2b00      	cmp	r3, #0
 801982a:	d154      	bne.n	80198d6 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801982c:	4b2c      	ldr	r3, [pc, #176]	; (80198e0 <xTaskResumeAll+0xe8>)
 801982e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8019832:	b923      	cbnz	r3, 801983e <xTaskResumeAll+0x46>
BaseType_t xAlreadyYielded = pdFALSE;
 8019834:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8019836:	f000 fb5f 	bl	8019ef8 <vPortExitCritical>
}
 801983a:	4620      	mov	r0, r4
 801983c:	bd70      	pop	{r4, r5, r6, pc}
TCB_t *pxTCB = NULL;
 801983e:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019840:	4b27      	ldr	r3, [pc, #156]	; (80198e0 <xTaskResumeAll+0xe8>)
 8019842:	695b      	ldr	r3, [r3, #20]
 8019844:	b32b      	cbz	r3, 8019892 <xTaskResumeAll+0x9a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8019846:	4d26      	ldr	r5, [pc, #152]	; (80198e0 <xTaskResumeAll+0xe8>)
 8019848:	6a2b      	ldr	r3, [r5, #32]
 801984a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801984c:	f104 0018 	add.w	r0, r4, #24
 8019850:	f7fe ffe6 	bl	8018820 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019854:	1d26      	adds	r6, r4, #4
 8019856:	4630      	mov	r0, r6
 8019858:	f7fe ffe2 	bl	8018820 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801985c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801985e:	2201      	movs	r2, #1
 8019860:	409a      	lsls	r2, r3
 8019862:	f8d5 110c 	ldr.w	r1, [r5, #268]	; 0x10c
 8019866:	430a      	orrs	r2, r1
 8019868:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
 801986c:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8019870:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019874:	009a      	lsls	r2, r3, #2
 8019876:	4631      	mov	r1, r6
 8019878:	4410      	add	r0, r2
 801987a:	f7fe ffab 	bl	80187d4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801987e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019880:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8019884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019886:	429a      	cmp	r2, r3
 8019888:	d3da      	bcc.n	8019840 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 801988a:	2201      	movs	r2, #1
 801988c:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
 8019890:	e7d6      	b.n	8019840 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8019892:	b10c      	cbz	r4, 8019898 <xTaskResumeAll+0xa0>
					prvResetNextTaskUnblockTime();
 8019894:	f7ff fcfa 	bl	801928c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8019898:	4b11      	ldr	r3, [pc, #68]	; (80198e0 <xTaskResumeAll+0xe8>)
 801989a:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801989e:	b164      	cbz	r4, 80198ba <xTaskResumeAll+0xc2>
							if( xTaskIncrementTick() != pdFALSE )
 80198a0:	f7ff ff24 	bl	80196ec <xTaskIncrementTick>
 80198a4:	b118      	cbz	r0, 80198ae <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 80198a6:	4b0e      	ldr	r3, [pc, #56]	; (80198e0 <xTaskResumeAll+0xe8>)
 80198a8:	2201      	movs	r2, #1
 80198aa:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80198ae:	3c01      	subs	r4, #1
 80198b0:	d1f6      	bne.n	80198a0 <xTaskResumeAll+0xa8>
						uxPendedTicks = 0;
 80198b2:	4b0b      	ldr	r3, [pc, #44]	; (80198e0 <xTaskResumeAll+0xe8>)
 80198b4:	2200      	movs	r2, #0
 80198b6:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				if( xYieldPending != pdFALSE )
 80198ba:	4b09      	ldr	r3, [pc, #36]	; (80198e0 <xTaskResumeAll+0xe8>)
 80198bc:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80198c0:	b15b      	cbz	r3, 80198da <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
 80198c2:	4b08      	ldr	r3, [pc, #32]	; (80198e4 <xTaskResumeAll+0xec>)
 80198c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80198c8:	601a      	str	r2, [r3, #0]
 80198ca:	f3bf 8f4f 	dsb	sy
 80198ce:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80198d2:	2401      	movs	r4, #1
 80198d4:	e7af      	b.n	8019836 <xTaskResumeAll+0x3e>
BaseType_t xAlreadyYielded = pdFALSE;
 80198d6:	2400      	movs	r4, #0
 80198d8:	e7ad      	b.n	8019836 <xTaskResumeAll+0x3e>
 80198da:	2400      	movs	r4, #0
 80198dc:	e7ab      	b.n	8019836 <xTaskResumeAll+0x3e>
 80198de:	bf00      	nop
 80198e0:	20000714 	.word	0x20000714
 80198e4:	e000ed04 	.word	0xe000ed04

080198e8 <vTaskDelay>:
	{
 80198e8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80198ea:	b1b0      	cbz	r0, 801991a <vTaskDelay+0x32>
 80198ec:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80198ee:	4b0f      	ldr	r3, [pc, #60]	; (801992c <vTaskDelay+0x44>)
 80198f0:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80198f4:	b143      	cbz	r3, 8019908 <vTaskDelay+0x20>
 80198f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198fa:	f383 8811 	msr	BASEPRI, r3
 80198fe:	f3bf 8f6f 	isb	sy
 8019902:	f3bf 8f4f 	dsb	sy
 8019906:	e7fe      	b.n	8019906 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8019908:	f7ff fed6 	bl	80196b8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801990c:	2100      	movs	r1, #0
 801990e:	4620      	mov	r0, r4
 8019910:	f7ff fdd8 	bl	80194c4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8019914:	f7ff ff70 	bl	80197f8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8019918:	b938      	cbnz	r0, 801992a <vTaskDelay+0x42>
			portYIELD_WITHIN_API();
 801991a:	4b05      	ldr	r3, [pc, #20]	; (8019930 <vTaskDelay+0x48>)
 801991c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019920:	601a      	str	r2, [r3, #0]
 8019922:	f3bf 8f4f 	dsb	sy
 8019926:	f3bf 8f6f 	isb	sy
	}
 801992a:	bd10      	pop	{r4, pc}
 801992c:	20000714 	.word	0x20000714
 8019930:	e000ed04 	.word	0xe000ed04

08019934 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8019934:	4b30      	ldr	r3, [pc, #192]	; (80199f8 <vTaskSwitchContext+0xc4>)
 8019936:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 801993a:	b123      	cbz	r3, 8019946 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 801993c:	4b2e      	ldr	r3, [pc, #184]	; (80199f8 <vTaskSwitchContext+0xc4>)
 801993e:	2201      	movs	r2, #1
 8019940:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8019944:	4770      	bx	lr
{
 8019946:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 8019948:	4b2b      	ldr	r3, [pc, #172]	; (80199f8 <vTaskSwitchContext+0xc4>)
 801994a:	2200      	movs	r2, #0
 801994c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		taskCHECK_FOR_STACK_OVERFLOW();
 8019950:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8019954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019956:	681a      	ldr	r2, [r3, #0]
 8019958:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 801995c:	d103      	bne.n	8019966 <vTaskSwitchContext+0x32>
 801995e:	685a      	ldr	r2, [r3, #4]
 8019960:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8019964:	d01e      	beq.n	80199a4 <vTaskSwitchContext+0x70>
 8019966:	4b24      	ldr	r3, [pc, #144]	; (80199f8 <vTaskSwitchContext+0xc4>)
 8019968:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 801996c:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8019970:	3134      	adds	r1, #52	; 0x34
 8019972:	f7f7 fdac 	bl	80114ce <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8019976:	4a20      	ldr	r2, [pc, #128]	; (80199f8 <vTaskSwitchContext+0xc4>)
 8019978:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801997c:	fab3 f383 	clz	r3, r3
 8019980:	b2db      	uxtb	r3, r3
 8019982:	f1c3 031f 	rsb	r3, r3, #31
 8019986:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 801998a:	0081      	lsls	r1, r0, #2
 801998c:	440a      	add	r2, r1
 801998e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8019990:	b98a      	cbnz	r2, 80199b6 <vTaskSwitchContext+0x82>
	__asm volatile
 8019992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019996:	f383 8811 	msr	BASEPRI, r3
 801999a:	f3bf 8f6f 	isb	sy
 801999e:	f3bf 8f4f 	dsb	sy
 80199a2:	e7fe      	b.n	80199a2 <vTaskSwitchContext+0x6e>
		taskCHECK_FOR_STACK_OVERFLOW();
 80199a4:	689a      	ldr	r2, [r3, #8]
 80199a6:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 80199aa:	d1dc      	bne.n	8019966 <vTaskSwitchContext+0x32>
 80199ac:	68db      	ldr	r3, [r3, #12]
 80199ae:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 80199b2:	d1d8      	bne.n	8019966 <vTaskSwitchContext+0x32>
 80199b4:	e7df      	b.n	8019976 <vTaskSwitchContext+0x42>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80199b6:	4a10      	ldr	r2, [pc, #64]	; (80199f8 <vTaskSwitchContext+0xc4>)
 80199b8:	0099      	lsls	r1, r3, #2
 80199ba:	18cc      	adds	r4, r1, r3
 80199bc:	00a0      	lsls	r0, r4, #2
 80199be:	4410      	add	r0, r2
 80199c0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80199c2:	6864      	ldr	r4, [r4, #4]
 80199c4:	6344      	str	r4, [r0, #52]	; 0x34
 80199c6:	3230      	adds	r2, #48	; 0x30
 80199c8:	4419      	add	r1, r3
 80199ca:	0088      	lsls	r0, r1, #2
 80199cc:	3008      	adds	r0, #8
 80199ce:	4402      	add	r2, r0
 80199d0:	4294      	cmp	r4, r2
 80199d2:	d009      	beq.n	80199e8 <vTaskSwitchContext+0xb4>
 80199d4:	4908      	ldr	r1, [pc, #32]	; (80199f8 <vTaskSwitchContext+0xc4>)
 80199d6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80199da:	009a      	lsls	r2, r3, #2
 80199dc:	440a      	add	r2, r1
 80199de:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80199e0:	68db      	ldr	r3, [r3, #12]
 80199e2:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 80199e6:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80199e8:	6861      	ldr	r1, [r4, #4]
 80199ea:	4803      	ldr	r0, [pc, #12]	; (80199f8 <vTaskSwitchContext+0xc4>)
 80199ec:	2214      	movs	r2, #20
 80199ee:	fb02 0203 	mla	r2, r2, r3, r0
 80199f2:	6351      	str	r1, [r2, #52]	; 0x34
 80199f4:	e7ee      	b.n	80199d4 <vTaskSwitchContext+0xa0>
 80199f6:	bf00      	nop
 80199f8:	20000714 	.word	0x20000714

080199fc <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80199fc:	b940      	cbnz	r0, 8019a10 <vTaskPlaceOnEventList+0x14>
 80199fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a02:	f383 8811 	msr	BASEPRI, r3
 8019a06:	f3bf 8f6f 	isb	sy
 8019a0a:	f3bf 8f4f 	dsb	sy
 8019a0e:	e7fe      	b.n	8019a0e <vTaskPlaceOnEventList+0x12>
{
 8019a10:	b510      	push	{r4, lr}
 8019a12:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019a14:	4b05      	ldr	r3, [pc, #20]	; (8019a2c <vTaskPlaceOnEventList+0x30>)
 8019a16:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8019a1a:	3118      	adds	r1, #24
 8019a1c:	f7fe fee6 	bl	80187ec <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019a20:	2101      	movs	r1, #1
 8019a22:	4620      	mov	r0, r4
 8019a24:	f7ff fd4e 	bl	80194c4 <prvAddCurrentTaskToDelayedList>
}
 8019a28:	bd10      	pop	{r4, pc}
 8019a2a:	bf00      	nop
 8019a2c:	20000714 	.word	0x20000714

08019a30 <xTaskRemoveFromEventList>:
{
 8019a30:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8019a32:	68c3      	ldr	r3, [r0, #12]
 8019a34:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8019a36:	b944      	cbnz	r4, 8019a4a <xTaskRemoveFromEventList+0x1a>
 8019a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a3c:	f383 8811 	msr	BASEPRI, r3
 8019a40:	f3bf 8f6f 	isb	sy
 8019a44:	f3bf 8f4f 	dsb	sy
 8019a48:	e7fe      	b.n	8019a48 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019a4a:	f104 0518 	add.w	r5, r4, #24
 8019a4e:	4628      	mov	r0, r5
 8019a50:	f7fe fee6 	bl	8018820 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019a54:	4b15      	ldr	r3, [pc, #84]	; (8019aac <xTaskRemoveFromEventList+0x7c>)
 8019a56:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8019a5a:	bb03      	cbnz	r3, 8019a9e <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019a5c:	1d25      	adds	r5, r4, #4
 8019a5e:	4628      	mov	r0, r5
 8019a60:	f7fe fede 	bl	8018820 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019a64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019a66:	2101      	movs	r1, #1
 8019a68:	4099      	lsls	r1, r3
 8019a6a:	4a10      	ldr	r2, [pc, #64]	; (8019aac <xTaskRemoveFromEventList+0x7c>)
 8019a6c:	f8d2 010c 	ldr.w	r0, [r2, #268]	; 0x10c
 8019a70:	4301      	orrs	r1, r0
 8019a72:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
 8019a76:	3230      	adds	r2, #48	; 0x30
 8019a78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019a7c:	0098      	lsls	r0, r3, #2
 8019a7e:	4629      	mov	r1, r5
 8019a80:	4410      	add	r0, r2
 8019a82:	f7fe fea7 	bl	80187d4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019a86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019a88:	4b08      	ldr	r3, [pc, #32]	; (8019aac <xTaskRemoveFromEventList+0x7c>)
 8019a8a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8019a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a90:	429a      	cmp	r2, r3
 8019a92:	d909      	bls.n	8019aa8 <xTaskRemoveFromEventList+0x78>
		xYieldPending = pdTRUE;
 8019a94:	2001      	movs	r0, #1
 8019a96:	4b05      	ldr	r3, [pc, #20]	; (8019aac <xTaskRemoveFromEventList+0x7c>)
 8019a98:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
}
 8019a9c:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019a9e:	4629      	mov	r1, r5
 8019aa0:	4803      	ldr	r0, [pc, #12]	; (8019ab0 <xTaskRemoveFromEventList+0x80>)
 8019aa2:	f7fe fe97 	bl	80187d4 <vListInsertEnd>
 8019aa6:	e7ee      	b.n	8019a86 <xTaskRemoveFromEventList+0x56>
		xReturn = pdFALSE;
 8019aa8:	2000      	movs	r0, #0
	return xReturn;
 8019aaa:	e7f7      	b.n	8019a9c <xTaskRemoveFromEventList+0x6c>
 8019aac:	20000714 	.word	0x20000714
 8019ab0:	20000728 	.word	0x20000728

08019ab4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019ab4:	4b03      	ldr	r3, [pc, #12]	; (8019ac4 <vTaskInternalSetTimeOutState+0x10>)
 8019ab6:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8019aba:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019abc:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8019ac0:	6043      	str	r3, [r0, #4]
}
 8019ac2:	4770      	bx	lr
 8019ac4:	20000714 	.word	0x20000714

08019ac8 <xTaskCheckForTimeOut>:
{
 8019ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8019aca:	b150      	cbz	r0, 8019ae2 <xTaskCheckForTimeOut+0x1a>
 8019acc:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8019ace:	b989      	cbnz	r1, 8019af4 <xTaskCheckForTimeOut+0x2c>
 8019ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ad4:	f383 8811 	msr	BASEPRI, r3
 8019ad8:	f3bf 8f6f 	isb	sy
 8019adc:	f3bf 8f4f 	dsb	sy
 8019ae0:	e7fe      	b.n	8019ae0 <xTaskCheckForTimeOut+0x18>
 8019ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ae6:	f383 8811 	msr	BASEPRI, r3
 8019aea:	f3bf 8f6f 	isb	sy
 8019aee:	f3bf 8f4f 	dsb	sy
 8019af2:	e7fe      	b.n	8019af2 <xTaskCheckForTimeOut+0x2a>
 8019af4:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8019af6:	f000 f9dd 	bl	8019eb4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8019afa:	4b12      	ldr	r3, [pc, #72]	; (8019b44 <xTaskCheckForTimeOut+0x7c>)
 8019afc:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019b00:	6868      	ldr	r0, [r5, #4]
 8019b02:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8019b04:	6823      	ldr	r3, [r4, #0]
 8019b06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019b0a:	d017      	beq.n	8019b3c <xTaskCheckForTimeOut+0x74>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019b0c:	682f      	ldr	r7, [r5, #0]
 8019b0e:	4e0d      	ldr	r6, [pc, #52]	; (8019b44 <xTaskCheckForTimeOut+0x7c>)
 8019b10:	f8d6 611c 	ldr.w	r6, [r6, #284]	; 0x11c
 8019b14:	42b7      	cmp	r7, r6
 8019b16:	d001      	beq.n	8019b1c <xTaskCheckForTimeOut+0x54>
 8019b18:	4288      	cmp	r0, r1
 8019b1a:	d911      	bls.n	8019b40 <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8019b1c:	4293      	cmp	r3, r2
 8019b1e:	d803      	bhi.n	8019b28 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 8019b20:	2300      	movs	r3, #0
 8019b22:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8019b24:	2401      	movs	r4, #1
 8019b26:	e005      	b.n	8019b34 <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait -= xElapsedTime;
 8019b28:	1a9b      	subs	r3, r3, r2
 8019b2a:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019b2c:	4628      	mov	r0, r5
 8019b2e:	f7ff ffc1 	bl	8019ab4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8019b32:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8019b34:	f000 f9e0 	bl	8019ef8 <vPortExitCritical>
}
 8019b38:	4620      	mov	r0, r4
 8019b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8019b3c:	2400      	movs	r4, #0
 8019b3e:	e7f9      	b.n	8019b34 <xTaskCheckForTimeOut+0x6c>
			xReturn = pdTRUE;
 8019b40:	2401      	movs	r4, #1
 8019b42:	e7f7      	b.n	8019b34 <xTaskCheckForTimeOut+0x6c>
 8019b44:	20000714 	.word	0x20000714

08019b48 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8019b48:	4b02      	ldr	r3, [pc, #8]	; (8019b54 <vTaskMissedYield+0xc>)
 8019b4a:	2201      	movs	r2, #1
 8019b4c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
 8019b50:	4770      	bx	lr
 8019b52:	bf00      	nop
 8019b54:	20000714 	.word	0x20000714

08019b58 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8019b58:	4b01      	ldr	r3, [pc, #4]	; (8019b60 <xTaskGetCurrentTaskHandle+0x8>)
 8019b5a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	}
 8019b5e:	4770      	bx	lr
 8019b60:	20000714 	.word	0x20000714

08019b64 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8019b64:	4b06      	ldr	r3, [pc, #24]	; (8019b80 <xTaskGetSchedulerState+0x1c>)
 8019b66:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8019b6a:	b13b      	cbz	r3, 8019b7c <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019b6c:	4b04      	ldr	r3, [pc, #16]	; (8019b80 <xTaskGetSchedulerState+0x1c>)
 8019b6e:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8019b72:	b10b      	cbz	r3, 8019b78 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 8019b74:	2000      	movs	r0, #0
	}
 8019b76:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8019b78:	2002      	movs	r0, #2
 8019b7a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8019b7c:	2001      	movs	r0, #1
 8019b7e:	4770      	bx	lr
 8019b80:	20000714 	.word	0x20000714

08019b84 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8019b84:	2800      	cmp	r0, #0
 8019b86:	d059      	beq.n	8019c3c <xTaskPriorityInherit+0xb8>
	{
 8019b88:	b538      	push	{r3, r4, r5, lr}
 8019b8a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8019b8c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8019b8e:	492c      	ldr	r1, [pc, #176]	; (8019c40 <xTaskPriorityInherit+0xbc>)
 8019b90:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
 8019b94:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8019b96:	428a      	cmp	r2, r1
 8019b98:	d245      	bcs.n	8019c26 <xTaskPriorityInherit+0xa2>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019b9a:	6981      	ldr	r1, [r0, #24]
 8019b9c:	2900      	cmp	r1, #0
 8019b9e:	db06      	blt.n	8019bae <xTaskPriorityInherit+0x2a>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019ba0:	4927      	ldr	r1, [pc, #156]	; (8019c40 <xTaskPriorityInherit+0xbc>)
 8019ba2:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
 8019ba6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8019ba8:	f1c1 0107 	rsb	r1, r1, #7
 8019bac:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8019bae:	6960      	ldr	r0, [r4, #20]
 8019bb0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8019bb4:	0091      	lsls	r1, r2, #2
 8019bb6:	4a23      	ldr	r2, [pc, #140]	; (8019c44 <xTaskPriorityInherit+0xc0>)
 8019bb8:	440a      	add	r2, r1
 8019bba:	4290      	cmp	r0, r2
 8019bbc:	d006      	beq.n	8019bcc <xTaskPriorityInherit+0x48>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019bbe:	4a20      	ldr	r2, [pc, #128]	; (8019c40 <xTaskPriorityInherit+0xbc>)
 8019bc0:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 8019bc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8019bc6:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8019bc8:	2001      	movs	r0, #1
	}
 8019bca:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019bcc:	1d25      	adds	r5, r4, #4
 8019bce:	4628      	mov	r0, r5
 8019bd0:	f7fe fe26 	bl	8018820 <uxListRemove>
 8019bd4:	b980      	cbnz	r0, 8019bf8 <xTaskPriorityInherit+0x74>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8019bd6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019bd8:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8019bdc:	0099      	lsls	r1, r3, #2
 8019bde:	4b18      	ldr	r3, [pc, #96]	; (8019c40 <xTaskPriorityInherit+0xbc>)
 8019be0:	440b      	add	r3, r1
 8019be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019be4:	b943      	cbnz	r3, 8019bf8 <xTaskPriorityInherit+0x74>
 8019be6:	2301      	movs	r3, #1
 8019be8:	4093      	lsls	r3, r2
 8019bea:	4915      	ldr	r1, [pc, #84]	; (8019c40 <xTaskPriorityInherit+0xbc>)
 8019bec:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
 8019bf0:	ea22 0203 	bic.w	r2, r2, r3
 8019bf4:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8019bf8:	4811      	ldr	r0, [pc, #68]	; (8019c40 <xTaskPriorityInherit+0xbc>)
 8019bfa:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8019bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c00:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8019c02:	2401      	movs	r4, #1
 8019c04:	fa04 f203 	lsl.w	r2, r4, r3
 8019c08:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8019c0c:	430a      	orrs	r2, r1
 8019c0e:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 8019c12:	3030      	adds	r0, #48	; 0x30
 8019c14:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019c18:	009a      	lsls	r2, r3, #2
 8019c1a:	4629      	mov	r1, r5
 8019c1c:	4410      	add	r0, r2
 8019c1e:	f7fe fdd9 	bl	80187d4 <vListInsertEnd>
				xReturn = pdTRUE;
 8019c22:	4620      	mov	r0, r4
 8019c24:	e7d1      	b.n	8019bca <xTaskPriorityInherit+0x46>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8019c26:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019c28:	4b05      	ldr	r3, [pc, #20]	; (8019c40 <xTaskPriorityInherit+0xbc>)
 8019c2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8019c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c30:	429a      	cmp	r2, r3
 8019c32:	d201      	bcs.n	8019c38 <xTaskPriorityInherit+0xb4>
					xReturn = pdTRUE;
 8019c34:	2001      	movs	r0, #1
		return xReturn;
 8019c36:	e7c8      	b.n	8019bca <xTaskPriorityInherit+0x46>
	BaseType_t xReturn = pdFALSE;
 8019c38:	2000      	movs	r0, #0
 8019c3a:	e7c6      	b.n	8019bca <xTaskPriorityInherit+0x46>
 8019c3c:	2000      	movs	r0, #0
	}
 8019c3e:	4770      	bx	lr
 8019c40:	20000714 	.word	0x20000714
 8019c44:	20000744 	.word	0x20000744

08019c48 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8019c48:	2800      	cmp	r0, #0
 8019c4a:	d04d      	beq.n	8019ce8 <xTaskPriorityDisinherit+0xa0>
	{
 8019c4c:	b538      	push	{r3, r4, r5, lr}
 8019c4e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8019c50:	4a28      	ldr	r2, [pc, #160]	; (8019cf4 <xTaskPriorityDisinherit+0xac>)
 8019c52:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 8019c56:	4282      	cmp	r2, r0
 8019c58:	d008      	beq.n	8019c6c <xTaskPriorityDisinherit+0x24>
 8019c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c5e:	f383 8811 	msr	BASEPRI, r3
 8019c62:	f3bf 8f6f 	isb	sy
 8019c66:	f3bf 8f4f 	dsb	sy
 8019c6a:	e7fe      	b.n	8019c6a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8019c6c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8019c6e:	b942      	cbnz	r2, 8019c82 <xTaskPriorityDisinherit+0x3a>
 8019c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c74:	f383 8811 	msr	BASEPRI, r3
 8019c78:	f3bf 8f6f 	isb	sy
 8019c7c:	f3bf 8f4f 	dsb	sy
 8019c80:	e7fe      	b.n	8019c80 <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;
 8019c82:	3a01      	subs	r2, #1
 8019c84:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8019c86:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8019c88:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8019c8a:	4288      	cmp	r0, r1
 8019c8c:	d02e      	beq.n	8019cec <xTaskPriorityDisinherit+0xa4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8019c8e:	bb7a      	cbnz	r2, 8019cf0 <xTaskPriorityDisinherit+0xa8>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019c90:	1d25      	adds	r5, r4, #4
 8019c92:	4628      	mov	r0, r5
 8019c94:	f7fe fdc4 	bl	8018820 <uxListRemove>
 8019c98:	b978      	cbnz	r0, 8019cba <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8019c9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019c9c:	4915      	ldr	r1, [pc, #84]	; (8019cf4 <xTaskPriorityDisinherit+0xac>)
 8019c9e:	2314      	movs	r3, #20
 8019ca0:	fb03 1302 	mla	r3, r3, r2, r1
 8019ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ca6:	b943      	cbnz	r3, 8019cba <xTaskPriorityDisinherit+0x72>
 8019ca8:	2301      	movs	r3, #1
 8019caa:	fa03 f202 	lsl.w	r2, r3, r2
 8019cae:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 8019cb2:	ea23 0302 	bic.w	r3, r3, r2
 8019cb6:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8019cba:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8019cbc:	62e2      	str	r2, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019cbe:	f1c2 0307 	rsb	r3, r2, #7
 8019cc2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8019cc4:	2401      	movs	r4, #1
 8019cc6:	fa04 f102 	lsl.w	r1, r4, r2
 8019cca:	4b0a      	ldr	r3, [pc, #40]	; (8019cf4 <xTaskPriorityDisinherit+0xac>)
 8019ccc:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8019cd0:	4301      	orrs	r1, r0
 8019cd2:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
 8019cd6:	3330      	adds	r3, #48	; 0x30
 8019cd8:	4629      	mov	r1, r5
 8019cda:	2014      	movs	r0, #20
 8019cdc:	fb00 3002 	mla	r0, r0, r2, r3
 8019ce0:	f7fe fd78 	bl	80187d4 <vListInsertEnd>
					xReturn = pdTRUE;
 8019ce4:	4620      	mov	r0, r4
	}
 8019ce6:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8019ce8:	2000      	movs	r0, #0
	}
 8019cea:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8019cec:	2000      	movs	r0, #0
 8019cee:	e7fa      	b.n	8019ce6 <xTaskPriorityDisinherit+0x9e>
 8019cf0:	2000      	movs	r0, #0
		return xReturn;
 8019cf2:	e7f8      	b.n	8019ce6 <xTaskPriorityDisinherit+0x9e>
 8019cf4:	20000714 	.word	0x20000714

08019cf8 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8019cf8:	2800      	cmp	r0, #0
 8019cfa:	d059      	beq.n	8019db0 <vTaskPriorityDisinheritAfterTimeout+0xb8>
	{
 8019cfc:	b538      	push	{r3, r4, r5, lr}
 8019cfe:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8019d00:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8019d02:	b940      	cbnz	r0, 8019d16 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8019d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d08:	f383 8811 	msr	BASEPRI, r3
 8019d0c:	f3bf 8f6f 	isb	sy
 8019d10:	f3bf 8f4f 	dsb	sy
 8019d14:	e7fe      	b.n	8019d14 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8019d16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8019d18:	428a      	cmp	r2, r1
 8019d1a:	d200      	bcs.n	8019d1e <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8019d1c:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8019d1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8019d20:	4291      	cmp	r1, r2
 8019d22:	d001      	beq.n	8019d28 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8019d24:	2801      	cmp	r0, #1
 8019d26:	d000      	beq.n	8019d2a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8019d28:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8019d2a:	4822      	ldr	r0, [pc, #136]	; (8019db4 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8019d2c:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8019d30:	4298      	cmp	r0, r3
 8019d32:	d108      	bne.n	8019d46 <vTaskPriorityDisinheritAfterTimeout+0x4e>
 8019d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d38:	f383 8811 	msr	BASEPRI, r3
 8019d3c:	f3bf 8f6f 	isb	sy
 8019d40:	f3bf 8f4f 	dsb	sy
 8019d44:	e7fe      	b.n	8019d44 <vTaskPriorityDisinheritAfterTimeout+0x4c>
					pxTCB->uxPriority = uxPriorityToUse;
 8019d46:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8019d48:	6998      	ldr	r0, [r3, #24]
 8019d4a:	2800      	cmp	r0, #0
 8019d4c:	db02      	blt.n	8019d54 <vTaskPriorityDisinheritAfterTimeout+0x5c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019d4e:	f1c2 0207 	rsb	r2, r2, #7
 8019d52:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8019d54:	695a      	ldr	r2, [r3, #20]
 8019d56:	4818      	ldr	r0, [pc, #96]	; (8019db8 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8019d58:	2414      	movs	r4, #20
 8019d5a:	fb04 0101 	mla	r1, r4, r1, r0
 8019d5e:	428a      	cmp	r2, r1
 8019d60:	d1e2      	bne.n	8019d28 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8019d62:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019d64:	1d1d      	adds	r5, r3, #4
 8019d66:	4628      	mov	r0, r5
 8019d68:	f7fe fd5a 	bl	8018820 <uxListRemove>
 8019d6c:	b978      	cbnz	r0, 8019d8e <vTaskPriorityDisinheritAfterTimeout+0x96>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8019d6e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019d70:	4910      	ldr	r1, [pc, #64]	; (8019db4 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8019d72:	2314      	movs	r3, #20
 8019d74:	fb03 1302 	mla	r3, r3, r2, r1
 8019d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d7a:	b943      	cbnz	r3, 8019d8e <vTaskPriorityDisinheritAfterTimeout+0x96>
 8019d7c:	2301      	movs	r3, #1
 8019d7e:	fa03 f202 	lsl.w	r2, r3, r2
 8019d82:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 8019d86:	ea23 0302 	bic.w	r3, r3, r2
 8019d8a:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
						prvAddTaskToReadyList( pxTCB );
 8019d8e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8019d90:	2201      	movs	r2, #1
 8019d92:	4082      	lsls	r2, r0
 8019d94:	4b07      	ldr	r3, [pc, #28]	; (8019db4 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8019d96:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8019d9a:	430a      	orrs	r2, r1
 8019d9c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8019da0:	3330      	adds	r3, #48	; 0x30
 8019da2:	4629      	mov	r1, r5
 8019da4:	2214      	movs	r2, #20
 8019da6:	fb02 3000 	mla	r0, r2, r0, r3
 8019daa:	f7fe fd13 	bl	80187d4 <vListInsertEnd>
	}
 8019dae:	e7bb      	b.n	8019d28 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8019db0:	4770      	bx	lr
 8019db2:	bf00      	nop
 8019db4:	20000714 	.word	0x20000714
 8019db8:	20000744 	.word	0x20000744

08019dbc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8019dbc:	4b06      	ldr	r3, [pc, #24]	; (8019dd8 <pvTaskIncrementMutexHeldCount+0x1c>)
 8019dbe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8019dc2:	b12b      	cbz	r3, 8019dd0 <pvTaskIncrementMutexHeldCount+0x14>
			( pxCurrentTCB->uxMutexesHeld )++;
 8019dc4:	4b04      	ldr	r3, [pc, #16]	; (8019dd8 <pvTaskIncrementMutexHeldCount+0x1c>)
 8019dc6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8019dca:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8019dcc:	3301      	adds	r3, #1
 8019dce:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8019dd0:	4b01      	ldr	r3, [pc, #4]	; (8019dd8 <pvTaskIncrementMutexHeldCount+0x1c>)
 8019dd2:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	}
 8019dd6:	4770      	bx	lr
 8019dd8:	20000714 	.word	0x20000714

08019ddc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019ddc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8019dde:	2300      	movs	r3, #0
 8019de0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019de2:	4b0d      	ldr	r3, [pc, #52]	; (8019e18 <prvTaskExitError+0x3c>)
 8019de4:	681b      	ldr	r3, [r3, #0]
 8019de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019dea:	d008      	beq.n	8019dfe <prvTaskExitError+0x22>
 8019dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019df0:	f383 8811 	msr	BASEPRI, r3
 8019df4:	f3bf 8f6f 	isb	sy
 8019df8:	f3bf 8f4f 	dsb	sy
 8019dfc:	e7fe      	b.n	8019dfc <prvTaskExitError+0x20>
 8019dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e02:	f383 8811 	msr	BASEPRI, r3
 8019e06:	f3bf 8f6f 	isb	sy
 8019e0a:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8019e0e:	9b01      	ldr	r3, [sp, #4]
 8019e10:	2b00      	cmp	r3, #0
 8019e12:	d0fc      	beq.n	8019e0e <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8019e14:	b002      	add	sp, #8
 8019e16:	4770      	bx	lr
 8019e18:	20000094 	.word	0x20000094

08019e1c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019e1c:	4808      	ldr	r0, [pc, #32]	; (8019e40 <prvPortStartFirstTask+0x24>)
 8019e1e:	6800      	ldr	r0, [r0, #0]
 8019e20:	6800      	ldr	r0, [r0, #0]
 8019e22:	f380 8808 	msr	MSP, r0
 8019e26:	f04f 0000 	mov.w	r0, #0
 8019e2a:	f380 8814 	msr	CONTROL, r0
 8019e2e:	b662      	cpsie	i
 8019e30:	b661      	cpsie	f
 8019e32:	f3bf 8f4f 	dsb	sy
 8019e36:	f3bf 8f6f 	isb	sy
 8019e3a:	df00      	svc	0
 8019e3c:	bf00      	nop
 8019e3e:	0000      	.short	0x0000
 8019e40:	e000ed08 	.word	0xe000ed08

08019e44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019e44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019e54 <vPortEnableVFP+0x10>
 8019e48:	6801      	ldr	r1, [r0, #0]
 8019e4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8019e4e:	6001      	str	r1, [r0, #0]
 8019e50:	4770      	bx	lr
 8019e52:	0000      	.short	0x0000
 8019e54:	e000ed88 	.word	0xe000ed88

08019e58 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8019e5c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019e60:	f021 0101 	bic.w	r1, r1, #1
 8019e64:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019e68:	4b05      	ldr	r3, [pc, #20]	; (8019e80 <pxPortInitialiseStack+0x28>)
 8019e6a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019e6e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019e72:	f06f 0302 	mvn.w	r3, #2
 8019e76:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8019e7a:	3844      	subs	r0, #68	; 0x44
 8019e7c:	4770      	bx	lr
 8019e7e:	bf00      	nop
 8019e80:	08019ddd 	.word	0x08019ddd
	...

08019e90 <SVC_Handler>:
	__asm volatile (
 8019e90:	4b07      	ldr	r3, [pc, #28]	; (8019eb0 <pxCurrentTCBConst2>)
 8019e92:	6819      	ldr	r1, [r3, #0]
 8019e94:	6808      	ldr	r0, [r1, #0]
 8019e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e9a:	f380 8809 	msr	PSP, r0
 8019e9e:	f3bf 8f6f 	isb	sy
 8019ea2:	f04f 0000 	mov.w	r0, #0
 8019ea6:	f380 8811 	msr	BASEPRI, r0
 8019eaa:	4770      	bx	lr
 8019eac:	f3af 8000 	nop.w

08019eb0 <pxCurrentTCBConst2>:
 8019eb0:	20000814 	.word	0x20000814

08019eb4 <vPortEnterCritical>:
 8019eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019eb8:	f383 8811 	msr	BASEPRI, r3
 8019ebc:	f3bf 8f6f 	isb	sy
 8019ec0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8019ec4:	4a0a      	ldr	r2, [pc, #40]	; (8019ef0 <vPortEnterCritical+0x3c>)
 8019ec6:	6813      	ldr	r3, [r2, #0]
 8019ec8:	3301      	adds	r3, #1
 8019eca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8019ecc:	2b01      	cmp	r3, #1
 8019ece:	d000      	beq.n	8019ed2 <vPortEnterCritical+0x1e>
}
 8019ed0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019ed2:	4b08      	ldr	r3, [pc, #32]	; (8019ef4 <vPortEnterCritical+0x40>)
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019eda:	d0f9      	beq.n	8019ed0 <vPortEnterCritical+0x1c>
 8019edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ee0:	f383 8811 	msr	BASEPRI, r3
 8019ee4:	f3bf 8f6f 	isb	sy
 8019ee8:	f3bf 8f4f 	dsb	sy
 8019eec:	e7fe      	b.n	8019eec <vPortEnterCritical+0x38>
 8019eee:	bf00      	nop
 8019ef0:	20000094 	.word	0x20000094
 8019ef4:	e000ed04 	.word	0xe000ed04

08019ef8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8019ef8:	4b09      	ldr	r3, [pc, #36]	; (8019f20 <vPortExitCritical+0x28>)
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	b943      	cbnz	r3, 8019f10 <vPortExitCritical+0x18>
 8019efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f02:	f383 8811 	msr	BASEPRI, r3
 8019f06:	f3bf 8f6f 	isb	sy
 8019f0a:	f3bf 8f4f 	dsb	sy
 8019f0e:	e7fe      	b.n	8019f0e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8019f10:	3b01      	subs	r3, #1
 8019f12:	4a03      	ldr	r2, [pc, #12]	; (8019f20 <vPortExitCritical+0x28>)
 8019f14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8019f16:	b90b      	cbnz	r3, 8019f1c <vPortExitCritical+0x24>
	__asm volatile
 8019f18:	f383 8811 	msr	BASEPRI, r3
}
 8019f1c:	4770      	bx	lr
 8019f1e:	bf00      	nop
 8019f20:	20000094 	.word	0x20000094
	...

08019f30 <PendSV_Handler>:
	__asm volatile
 8019f30:	f3ef 8009 	mrs	r0, PSP
 8019f34:	f3bf 8f6f 	isb	sy
 8019f38:	4b15      	ldr	r3, [pc, #84]	; (8019f90 <pxCurrentTCBConst>)
 8019f3a:	681a      	ldr	r2, [r3, #0]
 8019f3c:	f01e 0f10 	tst.w	lr, #16
 8019f40:	bf08      	it	eq
 8019f42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019f46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f4a:	6010      	str	r0, [r2, #0]
 8019f4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019f50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019f54:	f380 8811 	msr	BASEPRI, r0
 8019f58:	f3bf 8f4f 	dsb	sy
 8019f5c:	f3bf 8f6f 	isb	sy
 8019f60:	f7ff fce8 	bl	8019934 <vTaskSwitchContext>
 8019f64:	f04f 0000 	mov.w	r0, #0
 8019f68:	f380 8811 	msr	BASEPRI, r0
 8019f6c:	bc09      	pop	{r0, r3}
 8019f6e:	6819      	ldr	r1, [r3, #0]
 8019f70:	6808      	ldr	r0, [r1, #0]
 8019f72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f76:	f01e 0f10 	tst.w	lr, #16
 8019f7a:	bf08      	it	eq
 8019f7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019f80:	f380 8809 	msr	PSP, r0
 8019f84:	f3bf 8f6f 	isb	sy
 8019f88:	4770      	bx	lr
 8019f8a:	bf00      	nop
 8019f8c:	f3af 8000 	nop.w

08019f90 <pxCurrentTCBConst>:
 8019f90:	20000814 	.word	0x20000814

08019f94 <SysTick_Handler>:
{
 8019f94:	b508      	push	{r3, lr}
	__asm volatile
 8019f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f9a:	f383 8811 	msr	BASEPRI, r3
 8019f9e:	f3bf 8f6f 	isb	sy
 8019fa2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8019fa6:	f7ff fba1 	bl	80196ec <xTaskIncrementTick>
 8019faa:	b118      	cbz	r0, 8019fb4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8019fac:	4b03      	ldr	r3, [pc, #12]	; (8019fbc <SysTick_Handler+0x28>)
 8019fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019fb2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	f383 8811 	msr	BASEPRI, r3
}
 8019fba:	bd08      	pop	{r3, pc}
 8019fbc:	e000ed04 	.word	0xe000ed04

08019fc0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019fc0:	4a08      	ldr	r2, [pc, #32]	; (8019fe4 <vPortSetupTimerInterrupt+0x24>)
 8019fc2:	2300      	movs	r3, #0
 8019fc4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019fc6:	4908      	ldr	r1, [pc, #32]	; (8019fe8 <vPortSetupTimerInterrupt+0x28>)
 8019fc8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8019fca:	4b08      	ldr	r3, [pc, #32]	; (8019fec <vPortSetupTimerInterrupt+0x2c>)
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	4908      	ldr	r1, [pc, #32]	; (8019ff0 <vPortSetupTimerInterrupt+0x30>)
 8019fd0:	fba1 1303 	umull	r1, r3, r1, r3
 8019fd4:	099b      	lsrs	r3, r3, #6
 8019fd6:	3b01      	subs	r3, #1
 8019fd8:	4906      	ldr	r1, [pc, #24]	; (8019ff4 <vPortSetupTimerInterrupt+0x34>)
 8019fda:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8019fdc:	2307      	movs	r3, #7
 8019fde:	6013      	str	r3, [r2, #0]
}
 8019fe0:	4770      	bx	lr
 8019fe2:	bf00      	nop
 8019fe4:	e000e010 	.word	0xe000e010
 8019fe8:	e000e018 	.word	0xe000e018
 8019fec:	2000005c 	.word	0x2000005c
 8019ff0:	10624dd3 	.word	0x10624dd3
 8019ff4:	e000e014 	.word	0xe000e014

08019ff8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8019ff8:	4b39      	ldr	r3, [pc, #228]	; (801a0e0 <xPortStartScheduler+0xe8>)
 8019ffa:	681a      	ldr	r2, [r3, #0]
 8019ffc:	4b39      	ldr	r3, [pc, #228]	; (801a0e4 <xPortStartScheduler+0xec>)
 8019ffe:	429a      	cmp	r2, r3
 801a000:	d00d      	beq.n	801a01e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801a002:	4b37      	ldr	r3, [pc, #220]	; (801a0e0 <xPortStartScheduler+0xe8>)
 801a004:	681a      	ldr	r2, [r3, #0]
 801a006:	4b38      	ldr	r3, [pc, #224]	; (801a0e8 <xPortStartScheduler+0xf0>)
 801a008:	429a      	cmp	r2, r3
 801a00a:	d111      	bne.n	801a030 <xPortStartScheduler+0x38>
	__asm volatile
 801a00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a010:	f383 8811 	msr	BASEPRI, r3
 801a014:	f3bf 8f6f 	isb	sy
 801a018:	f3bf 8f4f 	dsb	sy
 801a01c:	e7fe      	b.n	801a01c <xPortStartScheduler+0x24>
 801a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a022:	f383 8811 	msr	BASEPRI, r3
 801a026:	f3bf 8f6f 	isb	sy
 801a02a:	f3bf 8f4f 	dsb	sy
 801a02e:	e7fe      	b.n	801a02e <xPortStartScheduler+0x36>
{
 801a030:	b510      	push	{r4, lr}
 801a032:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801a034:	4b2d      	ldr	r3, [pc, #180]	; (801a0ec <xPortStartScheduler+0xf4>)
 801a036:	781a      	ldrb	r2, [r3, #0]
 801a038:	b2d2      	uxtb	r2, r2
 801a03a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801a03c:	22ff      	movs	r2, #255	; 0xff
 801a03e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801a040:	781b      	ldrb	r3, [r3, #0]
 801a042:	b2db      	uxtb	r3, r3
 801a044:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801a048:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a04c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801a050:	4a27      	ldr	r2, [pc, #156]	; (801a0f0 <xPortStartScheduler+0xf8>)
 801a052:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801a054:	2307      	movs	r3, #7
 801a056:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a058:	e009      	b.n	801a06e <xPortStartScheduler+0x76>
			ulMaxPRIGROUPValue--;
 801a05a:	4a25      	ldr	r2, [pc, #148]	; (801a0f0 <xPortStartScheduler+0xf8>)
 801a05c:	6853      	ldr	r3, [r2, #4]
 801a05e:	3b01      	subs	r3, #1
 801a060:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801a062:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a066:	005b      	lsls	r3, r3, #1
 801a068:	b2db      	uxtb	r3, r3
 801a06a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801a06e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 801a072:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a076:	d1f0      	bne.n	801a05a <xPortStartScheduler+0x62>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801a078:	4b1d      	ldr	r3, [pc, #116]	; (801a0f0 <xPortStartScheduler+0xf8>)
 801a07a:	685b      	ldr	r3, [r3, #4]
 801a07c:	2b03      	cmp	r3, #3
 801a07e:	d008      	beq.n	801a092 <xPortStartScheduler+0x9a>
 801a080:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a084:	f383 8811 	msr	BASEPRI, r3
 801a088:	f3bf 8f6f 	isb	sy
 801a08c:	f3bf 8f4f 	dsb	sy
 801a090:	e7fe      	b.n	801a090 <xPortStartScheduler+0x98>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801a092:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801a094:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a098:	4a15      	ldr	r2, [pc, #84]	; (801a0f0 <xPortStartScheduler+0xf8>)
 801a09a:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801a09c:	9b01      	ldr	r3, [sp, #4]
 801a09e:	b2db      	uxtb	r3, r3
 801a0a0:	4a12      	ldr	r2, [pc, #72]	; (801a0ec <xPortStartScheduler+0xf4>)
 801a0a2:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801a0a4:	4b13      	ldr	r3, [pc, #76]	; (801a0f4 <xPortStartScheduler+0xfc>)
 801a0a6:	681a      	ldr	r2, [r3, #0]
 801a0a8:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 801a0ac:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801a0ae:	681a      	ldr	r2, [r3, #0]
 801a0b0:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 801a0b4:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 801a0b6:	f7ff ff83 	bl	8019fc0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 801a0ba:	2400      	movs	r4, #0
 801a0bc:	4b0e      	ldr	r3, [pc, #56]	; (801a0f8 <xPortStartScheduler+0x100>)
 801a0be:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 801a0c0:	f7ff fec0 	bl	8019e44 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801a0c4:	4a0d      	ldr	r2, [pc, #52]	; (801a0fc <xPortStartScheduler+0x104>)
 801a0c6:	6813      	ldr	r3, [r2, #0]
 801a0c8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801a0cc:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 801a0ce:	f7ff fea5 	bl	8019e1c <prvPortStartFirstTask>
	vTaskSwitchContext();
 801a0d2:	f7ff fc2f 	bl	8019934 <vTaskSwitchContext>
	prvTaskExitError();
 801a0d6:	f7ff fe81 	bl	8019ddc <prvTaskExitError>
}
 801a0da:	4620      	mov	r0, r4
 801a0dc:	b002      	add	sp, #8
 801a0de:	bd10      	pop	{r4, pc}
 801a0e0:	e000ed00 	.word	0xe000ed00
 801a0e4:	410fc271 	.word	0x410fc271
 801a0e8:	410fc270 	.word	0x410fc270
 801a0ec:	e000e400 	.word	0xe000e400
 801a0f0:	2000083c 	.word	0x2000083c
 801a0f4:	e000ed20 	.word	0xe000ed20
 801a0f8:	20000094 	.word	0x20000094
 801a0fc:	e000ef34 	.word	0xe000ef34

0801a100 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801a100:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801a104:	2b0f      	cmp	r3, #15
 801a106:	d90f      	bls.n	801a128 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801a108:	4a10      	ldr	r2, [pc, #64]	; (801a14c <vPortValidateInterruptPriority+0x4c>)
 801a10a:	5c9b      	ldrb	r3, [r3, r2]
 801a10c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801a10e:	4a10      	ldr	r2, [pc, #64]	; (801a150 <vPortValidateInterruptPriority+0x50>)
 801a110:	7812      	ldrb	r2, [r2, #0]
 801a112:	429a      	cmp	r2, r3
 801a114:	d908      	bls.n	801a128 <vPortValidateInterruptPriority+0x28>
 801a116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a11a:	f383 8811 	msr	BASEPRI, r3
 801a11e:	f3bf 8f6f 	isb	sy
 801a122:	f3bf 8f4f 	dsb	sy
 801a126:	e7fe      	b.n	801a126 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801a128:	4b0a      	ldr	r3, [pc, #40]	; (801a154 <vPortValidateInterruptPriority+0x54>)
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801a130:	4a07      	ldr	r2, [pc, #28]	; (801a150 <vPortValidateInterruptPriority+0x50>)
 801a132:	6852      	ldr	r2, [r2, #4]
 801a134:	4293      	cmp	r3, r2
 801a136:	d908      	bls.n	801a14a <vPortValidateInterruptPriority+0x4a>
 801a138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a13c:	f383 8811 	msr	BASEPRI, r3
 801a140:	f3bf 8f6f 	isb	sy
 801a144:	f3bf 8f4f 	dsb	sy
 801a148:	e7fe      	b.n	801a148 <vPortValidateInterruptPriority+0x48>
	}
 801a14a:	4770      	bx	lr
 801a14c:	e000e3f0 	.word	0xe000e3f0
 801a150:	2000083c 	.word	0x2000083c
 801a154:	e000ed0c 	.word	0xe000ed0c

0801a158 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801a158:	4a10      	ldr	r2, [pc, #64]	; (801a19c <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801a15a:	f012 0f07 	tst.w	r2, #7
 801a15e:	d01a      	beq.n	801a196 <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801a160:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a162:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801a166:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 801a16a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a16c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801a16e:	490c      	ldr	r1, [pc, #48]	; (801a1a0 <prvHeapInit+0x48>)
 801a170:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801a172:	2000      	movs	r0, #0
 801a174:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801a176:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 801a178:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801a17a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 801a17e:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 801a180:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801a182:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801a184:	1a98      	subs	r0, r3, r2
 801a186:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801a188:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a18a:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801a18c:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801a18e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801a192:	614b      	str	r3, [r1, #20]
}
 801a194:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801a196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a19a:	e7e8      	b.n	801a16e <prvHeapInit+0x16>
 801a19c:	2000085c 	.word	0x2000085c
 801a1a0:	20000844 	.word	0x20000844

0801a1a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801a1a4:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a1a6:	4b13      	ldr	r3, [pc, #76]	; (801a1f4 <prvInsertBlockIntoFreeList+0x50>)
 801a1a8:	681a      	ldr	r2, [r3, #0]
 801a1aa:	4282      	cmp	r2, r0
 801a1ac:	d31b      	bcc.n	801a1e6 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801a1ae:	6859      	ldr	r1, [r3, #4]
 801a1b0:	185c      	adds	r4, r3, r1
 801a1b2:	4284      	cmp	r4, r0
 801a1b4:	d103      	bne.n	801a1be <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801a1b6:	6840      	ldr	r0, [r0, #4]
 801a1b8:	4401      	add	r1, r0
 801a1ba:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 801a1bc:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801a1be:	6841      	ldr	r1, [r0, #4]
 801a1c0:	1844      	adds	r4, r0, r1
 801a1c2:	42a2      	cmp	r2, r4
 801a1c4:	d113      	bne.n	801a1ee <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801a1c6:	4c0b      	ldr	r4, [pc, #44]	; (801a1f4 <prvInsertBlockIntoFreeList+0x50>)
 801a1c8:	68a4      	ldr	r4, [r4, #8]
 801a1ca:	42a2      	cmp	r2, r4
 801a1cc:	d00d      	beq.n	801a1ea <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801a1ce:	6852      	ldr	r2, [r2, #4]
 801a1d0:	4411      	add	r1, r2
 801a1d2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801a1d4:	681a      	ldr	r2, [r3, #0]
 801a1d6:	6812      	ldr	r2, [r2, #0]
 801a1d8:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801a1da:	4298      	cmp	r0, r3
 801a1dc:	d000      	beq.n	801a1e0 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801a1de:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801a1e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1e4:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801a1e6:	4613      	mov	r3, r2
 801a1e8:	e7de      	b.n	801a1a8 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801a1ea:	6004      	str	r4, [r0, #0]
 801a1ec:	e7f5      	b.n	801a1da <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801a1ee:	6002      	str	r2, [r0, #0]
 801a1f0:	e7f3      	b.n	801a1da <prvInsertBlockIntoFreeList+0x36>
 801a1f2:	bf00      	nop
 801a1f4:	20000844 	.word	0x20000844

0801a1f8 <pvPortMalloc>:
{
 801a1f8:	b570      	push	{r4, r5, r6, lr}
 801a1fa:	4604      	mov	r4, r0
	vTaskSuspendAll();
 801a1fc:	f7ff fa5c 	bl	80196b8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 801a200:	4b3f      	ldr	r3, [pc, #252]	; (801a300 <pvPortMalloc+0x108>)
 801a202:	689b      	ldr	r3, [r3, #8]
 801a204:	b1a3      	cbz	r3, 801a230 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801a206:	4b3e      	ldr	r3, [pc, #248]	; (801a300 <pvPortMalloc+0x108>)
 801a208:	695b      	ldr	r3, [r3, #20]
 801a20a:	421c      	tst	r4, r3
 801a20c:	d013      	beq.n	801a236 <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
 801a20e:	f7ff faf3 	bl	80197f8 <xTaskResumeAll>
void *pvReturn = NULL;
 801a212:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 801a214:	f7f7 f95c 	bl	80114d0 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801a218:	f016 0f07 	tst.w	r6, #7
 801a21c:	d06d      	beq.n	801a2fa <pvPortMalloc+0x102>
 801a21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a222:	f383 8811 	msr	BASEPRI, r3
 801a226:	f3bf 8f6f 	isb	sy
 801a22a:	f3bf 8f4f 	dsb	sy
 801a22e:	e7fe      	b.n	801a22e <pvPortMalloc+0x36>
			prvHeapInit();
 801a230:	f7ff ff92 	bl	801a158 <prvHeapInit>
 801a234:	e7e7      	b.n	801a206 <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
 801a236:	b194      	cbz	r4, 801a25e <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
 801a238:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801a23a:	f014 0f07 	tst.w	r4, #7
 801a23e:	d00e      	beq.n	801a25e <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801a240:	f024 0407 	bic.w	r4, r4, #7
 801a244:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a246:	f004 0307 	and.w	r3, r4, #7
 801a24a:	b143      	cbz	r3, 801a25e <pvPortMalloc+0x66>
 801a24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a250:	f383 8811 	msr	BASEPRI, r3
 801a254:	f3bf 8f6f 	isb	sy
 801a258:	f3bf 8f4f 	dsb	sy
 801a25c:	e7fe      	b.n	801a25c <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801a25e:	b134      	cbz	r4, 801a26e <pvPortMalloc+0x76>
 801a260:	4b27      	ldr	r3, [pc, #156]	; (801a300 <pvPortMalloc+0x108>)
 801a262:	691b      	ldr	r3, [r3, #16]
 801a264:	42a3      	cmp	r3, r4
 801a266:	d306      	bcc.n	801a276 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
 801a268:	4b25      	ldr	r3, [pc, #148]	; (801a300 <pvPortMalloc+0x108>)
 801a26a:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a26c:	e009      	b.n	801a282 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 801a26e:	f7ff fac3 	bl	80197f8 <xTaskResumeAll>
void *pvReturn = NULL;
 801a272:	2600      	movs	r6, #0
 801a274:	e7ce      	b.n	801a214 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
 801a276:	f7ff fabf 	bl	80197f8 <xTaskResumeAll>
void *pvReturn = NULL;
 801a27a:	2600      	movs	r6, #0
 801a27c:	e7ca      	b.n	801a214 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
 801a27e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 801a280:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801a282:	686a      	ldr	r2, [r5, #4]
 801a284:	42a2      	cmp	r2, r4
 801a286:	d202      	bcs.n	801a28e <pvPortMalloc+0x96>
 801a288:	682a      	ldr	r2, [r5, #0]
 801a28a:	2a00      	cmp	r2, #0
 801a28c:	d1f7      	bne.n	801a27e <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
 801a28e:	4a1c      	ldr	r2, [pc, #112]	; (801a300 <pvPortMalloc+0x108>)
 801a290:	6892      	ldr	r2, [r2, #8]
 801a292:	42aa      	cmp	r2, r5
 801a294:	d014      	beq.n	801a2c0 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801a296:	681e      	ldr	r6, [r3, #0]
 801a298:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801a29a:	682a      	ldr	r2, [r5, #0]
 801a29c:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801a29e:	686b      	ldr	r3, [r5, #4]
 801a2a0:	1b1b      	subs	r3, r3, r4
 801a2a2:	2b10      	cmp	r3, #16
 801a2a4:	d914      	bls.n	801a2d0 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801a2a6:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801a2a8:	f010 0f07 	tst.w	r0, #7
 801a2ac:	d00c      	beq.n	801a2c8 <pvPortMalloc+0xd0>
 801a2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2b2:	f383 8811 	msr	BASEPRI, r3
 801a2b6:	f3bf 8f6f 	isb	sy
 801a2ba:	f3bf 8f4f 	dsb	sy
 801a2be:	e7fe      	b.n	801a2be <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
 801a2c0:	f7ff fa9a 	bl	80197f8 <xTaskResumeAll>
void *pvReturn = NULL;
 801a2c4:	2600      	movs	r6, #0
 801a2c6:	e7a5      	b.n	801a214 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801a2c8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801a2ca:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801a2cc:	f7ff ff6a 	bl	801a1a4 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801a2d0:	6869      	ldr	r1, [r5, #4]
 801a2d2:	4a0b      	ldr	r2, [pc, #44]	; (801a300 <pvPortMalloc+0x108>)
 801a2d4:	6913      	ldr	r3, [r2, #16]
 801a2d6:	1a5b      	subs	r3, r3, r1
 801a2d8:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801a2da:	68d2      	ldr	r2, [r2, #12]
 801a2dc:	4293      	cmp	r3, r2
 801a2de:	d201      	bcs.n	801a2e4 <pvPortMalloc+0xec>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801a2e0:	4a07      	ldr	r2, [pc, #28]	; (801a300 <pvPortMalloc+0x108>)
 801a2e2:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801a2e4:	4b06      	ldr	r3, [pc, #24]	; (801a300 <pvPortMalloc+0x108>)
 801a2e6:	695b      	ldr	r3, [r3, #20]
 801a2e8:	430b      	orrs	r3, r1
 801a2ea:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801a2ec:	2300      	movs	r3, #0
 801a2ee:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 801a2f0:	f7ff fa82 	bl	80197f8 <xTaskResumeAll>
		if( pvReturn == NULL )
 801a2f4:	2e00      	cmp	r6, #0
 801a2f6:	d18f      	bne.n	801a218 <pvPortMalloc+0x20>
 801a2f8:	e78c      	b.n	801a214 <pvPortMalloc+0x1c>
}
 801a2fa:	4630      	mov	r0, r6
 801a2fc:	bd70      	pop	{r4, r5, r6, pc}
 801a2fe:	bf00      	nop
 801a300:	20000844 	.word	0x20000844

0801a304 <vPortFree>:
	if( pv != NULL )
 801a304:	b380      	cbz	r0, 801a368 <vPortFree+0x64>
{
 801a306:	b538      	push	{r3, r4, r5, lr}
 801a308:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 801a30a:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801a30e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801a312:	4916      	ldr	r1, [pc, #88]	; (801a36c <vPortFree+0x68>)
 801a314:	6949      	ldr	r1, [r1, #20]
 801a316:	420a      	tst	r2, r1
 801a318:	d108      	bne.n	801a32c <vPortFree+0x28>
 801a31a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a31e:	f383 8811 	msr	BASEPRI, r3
 801a322:	f3bf 8f6f 	isb	sy
 801a326:	f3bf 8f4f 	dsb	sy
 801a32a:	e7fe      	b.n	801a32a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801a32c:	f850 0c08 	ldr.w	r0, [r0, #-8]
 801a330:	b140      	cbz	r0, 801a344 <vPortFree+0x40>
 801a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a336:	f383 8811 	msr	BASEPRI, r3
 801a33a:	f3bf 8f6f 	isb	sy
 801a33e:	f3bf 8f4f 	dsb	sy
 801a342:	e7fe      	b.n	801a342 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801a344:	ea22 0201 	bic.w	r2, r2, r1
 801a348:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 801a34c:	f7ff f9b4 	bl	80196b8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 801a350:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801a354:	4a05      	ldr	r2, [pc, #20]	; (801a36c <vPortFree+0x68>)
 801a356:	6913      	ldr	r3, [r2, #16]
 801a358:	440b      	add	r3, r1
 801a35a:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801a35c:	4628      	mov	r0, r5
 801a35e:	f7ff ff21 	bl	801a1a4 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 801a362:	f7ff fa49 	bl	80197f8 <xTaskResumeAll>
}
 801a366:	bd38      	pop	{r3, r4, r5, pc}
 801a368:	4770      	bx	lr
 801a36a:	bf00      	nop
 801a36c:	20000844 	.word	0x20000844

0801a370 <BUFFERVALUEUPDATE>:

#include "valueTable.h"

#include "../tasks/SerialHandleTask/UART_IO.h"

void BUFFERVALUEUPDATE(){
 801a370:	b538      	push	{r3, r4, r5, lr}
 801a372:	ed2d 8b02 	vpush	{d8}


	  if (i_inputLeft_Indicator > i_inputLeft_Indicator_bufferd){i_inputLeft_Indicator_bufferd = i_inputLeft_Indicator;}
 801a376:	4be0      	ldr	r3, [pc, #896]	; (801a6f8 <BUFFERVALUEUPDATE+0x388>)
 801a378:	ed93 8a00 	vldr	s16, [r3]
 801a37c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801a380:	4bde      	ldr	r3, [pc, #888]	; (801a6fc <BUFFERVALUEUPDATE+0x38c>)
 801a382:	edd3 8a00 	vldr	s17, [r3]
 801a386:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a38e:	f340 82b4 	ble.w	801a8fa <BUFFERVALUEUPDATE+0x58a>
 801a392:	ed83 8a00 	vstr	s16, [r3]
	  else {i_inputLeft_Indicator_bufferd -=0.01*(i_inputLeft_Indicator_bufferd-i_inputLeft_Indicator);}

	  if (i_inputLeft_Waveform > i_inputLeft_Indicator_MAXbufferd){i_inputLeft_Indicator_MAXbufferd = i_inputLeft_Indicator;}
 801a396:	4bda      	ldr	r3, [pc, #872]	; (801a700 <BUFFERVALUEUPDATE+0x390>)
 801a398:	edd3 7a00 	vldr	s15, [r3]
 801a39c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a3a0:	4bd8      	ldr	r3, [pc, #864]	; (801a704 <BUFFERVALUEUPDATE+0x394>)
 801a3a2:	edd3 8a00 	vldr	s17, [r3]
 801a3a6:	eef4 7ae8 	vcmpe.f32	s15, s17
 801a3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3ae:	f340 82be 	ble.w	801a92e <BUFFERVALUEUPDATE+0x5be>
 801a3b2:	ed83 8a00 	vstr	s16, [r3]
	  else {i_inputLeft_Indicator_MAXbufferd -=0.001*(i_inputLeft_Indicator_MAXbufferd-i_inputLeft_Indicator);}


	  if (i_inputRight_Indicator > i_inputRight_Indicator_bufferd){i_inputRight_Indicator_bufferd = i_inputRight_Indicator;}
 801a3b6:	4bd4      	ldr	r3, [pc, #848]	; (801a708 <BUFFERVALUEUPDATE+0x398>)
 801a3b8:	ed93 8a00 	vldr	s16, [r3]
 801a3bc:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801a3c0:	4bd2      	ldr	r3, [pc, #840]	; (801a70c <BUFFERVALUEUPDATE+0x39c>)
 801a3c2:	edd3 8a00 	vldr	s17, [r3]
 801a3c6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3ce:	f340 82c8 	ble.w	801a962 <BUFFERVALUEUPDATE+0x5f2>
 801a3d2:	ed83 8a00 	vstr	s16, [r3]
	  else {i_inputRight_Indicator_bufferd -=0.01*(i_inputRight_Indicator_bufferd-i_inputRight_Indicator);}

	  if (i_inputRight_Indicator > i_inputRight_Indicator_MAXbufferd){i_inputRight_Indicator_MAXbufferd = i_inputRight_Indicator;}
 801a3d6:	4bce      	ldr	r3, [pc, #824]	; (801a710 <BUFFERVALUEUPDATE+0x3a0>)
 801a3d8:	edd3 8a00 	vldr	s17, [r3]
 801a3dc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a3e4:	f340 82d7 	ble.w	801a996 <BUFFERVALUEUPDATE+0x626>
 801a3e8:	ed83 8a00 	vstr	s16, [r3]
	  else {i_inputRight_Indicator_MAXbufferd -=0.001*(i_inputRight_Indicator_MAXbufferd-i_inputRight_Indicator);}


	  if (i_outputLeft_Indicator > i_outputLeft_Indicator_bufferd){i_outputLeft_Indicator_bufferd = i_outputLeft_Indicator;}
 801a3ec:	4bc9      	ldr	r3, [pc, #804]	; (801a714 <BUFFERVALUEUPDATE+0x3a4>)
 801a3ee:	ed93 8a00 	vldr	s16, [r3]
 801a3f2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801a3f6:	4bc8      	ldr	r3, [pc, #800]	; (801a718 <BUFFERVALUEUPDATE+0x3a8>)
 801a3f8:	edd3 8a00 	vldr	s17, [r3]
 801a3fc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a404:	f340 82e1 	ble.w	801a9ca <BUFFERVALUEUPDATE+0x65a>
 801a408:	ed83 8a00 	vstr	s16, [r3]
	  else {i_outputLeft_Indicator_bufferd -=0.01*(i_outputLeft_Indicator_bufferd-i_outputLeft_Indicator);}

	  if (i_outputLeft_Indicator> i_outputLeft_Indicator_MAXbufferd){i_outputLeft_Indicator_MAXbufferd = i_outputLeft_Indicator;}
 801a40c:	4bc3      	ldr	r3, [pc, #780]	; (801a71c <BUFFERVALUEUPDATE+0x3ac>)
 801a40e:	edd3 8a00 	vldr	s17, [r3]
 801a412:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a41a:	f340 82f0 	ble.w	801a9fe <BUFFERVALUEUPDATE+0x68e>
 801a41e:	ed83 8a00 	vstr	s16, [r3]
	  else {i_outputLeft_Indicator_MAXbufferd -=0.001*(i_outputLeft_Indicator_MAXbufferd-i_outputLeft_Indicator);}


	  if (i_outputRight_Indicator > i_outputRight_Indicator_bufferd){i_outputRight_Indicator_bufferd = i_outputRight_Indicator;}
 801a422:	4bbf      	ldr	r3, [pc, #764]	; (801a720 <BUFFERVALUEUPDATE+0x3b0>)
 801a424:	ed93 8a00 	vldr	s16, [r3]
 801a428:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801a42c:	4bbd      	ldr	r3, [pc, #756]	; (801a724 <BUFFERVALUEUPDATE+0x3b4>)
 801a42e:	edd3 8a00 	vldr	s17, [r3]
 801a432:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a43a:	f340 82fa 	ble.w	801aa32 <BUFFERVALUEUPDATE+0x6c2>
 801a43e:	ed83 8a00 	vstr	s16, [r3]
	  else {i_outputRight_Indicator_bufferd -=0.01*(i_outputRight_Indicator_bufferd-i_outputRight_Indicator);}

	  if (i_outputRight_Indicator > i_outputRight_Indicator_MAXbufferd){i_outputRight_Indicator_MAXbufferd = i_outputRight_Indicator;}
 801a442:	4bb9      	ldr	r3, [pc, #740]	; (801a728 <BUFFERVALUEUPDATE+0x3b8>)
 801a444:	edd3 8a00 	vldr	s17, [r3]
 801a448:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a450:	f340 8309 	ble.w	801aa66 <BUFFERVALUEUPDATE+0x6f6>
 801a454:	ed83 8a00 	vstr	s16, [r3]
//*****************************************************************************************************************//


/////////INPUT LEFT
	  float diff1=0;
	  diff1 = (f_inputLeft_DB_bufferd-f_inputLeft_DB);
 801a458:	4bb4      	ldr	r3, [pc, #720]	; (801a72c <BUFFERVALUEUPDATE+0x3bc>)
 801a45a:	ed93 7a00 	vldr	s14, [r3]
 801a45e:	4bb4      	ldr	r3, [pc, #720]	; (801a730 <BUFFERVALUEUPDATE+0x3c0>)
 801a460:	edd3 7a00 	vldr	s15, [r3]
 801a464:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff1<0){diff1=(-1)*diff1;}
 801a468:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a470:	f100 8313 	bmi.w	801aa9a <BUFFERVALUEUPDATE+0x72a>
	  if (f_inputLeft_DB > f_inputLeft_DB_bufferd){f_inputLeft_DB_bufferd = f_inputLeft_DB;}
 801a474:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a47c:	f140 8310 	bpl.w	801aaa0 <BUFFERVALUEUPDATE+0x730>
 801a480:	4baa      	ldr	r3, [pc, #680]	; (801a72c <BUFFERVALUEUPDATE+0x3bc>)
 801a482:	edc3 7a00 	vstr	s15, [r3]
	  else {f_inputLeft_DB_bufferd -=p_Bufferd*diff1;}

	  float diff2=0;
	  diff2 = (f_inputLeft_DB_MAXbufferd-f_inputLeft_DB);
 801a486:	4bab      	ldr	r3, [pc, #684]	; (801a734 <BUFFERVALUEUPDATE+0x3c4>)
 801a488:	ed93 7a00 	vldr	s14, [r3]
 801a48c:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff2<0){diff2=(-1)*diff2;}
 801a490:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a498:	f100 830d 	bmi.w	801aab6 <BUFFERVALUEUPDATE+0x746>
	  if (f_inputLeft_DB > f_inputLeft_DB_MAXbufferd){f_inputLeft_DB_MAXbufferd = f_inputLeft_DB;}
 801a49c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4a4:	f340 830a 	ble.w	801aabc <BUFFERVALUEUPDATE+0x74c>
 801a4a8:	4ba2      	ldr	r3, [pc, #648]	; (801a734 <BUFFERVALUEUPDATE+0x3c4>)
 801a4aa:	edc3 7a00 	vstr	s15, [r3]
	  else {f_inputLeft_DB_MAXbufferd -=p_MAXBufferd*diff2;}
/////////INPUT RIGHT
	  float diff3=0;
	  diff3 = (f_inputRight_DB_bufferd-f_inputRight_DB);
 801a4ae:	4ba2      	ldr	r3, [pc, #648]	; (801a738 <BUFFERVALUEUPDATE+0x3c8>)
 801a4b0:	ed93 7a00 	vldr	s14, [r3]
 801a4b4:	4ba1      	ldr	r3, [pc, #644]	; (801a73c <BUFFERVALUEUPDATE+0x3cc>)
 801a4b6:	edd3 7a00 	vldr	s15, [r3]
 801a4ba:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff3<0){diff3=(-1)*diff3;}
 801a4be:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4c6:	f100 8304 	bmi.w	801aad2 <BUFFERVALUEUPDATE+0x762>
	  if (f_inputRight_DB > f_inputRight_DB_bufferd){f_inputRight_DB_bufferd = f_inputRight_DB;}
 801a4ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4d2:	f140 8301 	bpl.w	801aad8 <BUFFERVALUEUPDATE+0x768>
 801a4d6:	4b98      	ldr	r3, [pc, #608]	; (801a738 <BUFFERVALUEUPDATE+0x3c8>)
 801a4d8:	edc3 7a00 	vstr	s15, [r3]
	  else {f_inputRight_DB_bufferd -=p_Bufferd*diff3;}

	  float diff4=0;
	  diff4 = (f_inputRight_DB_MAXbufferd-f_inputRight_DB);
 801a4dc:	4b98      	ldr	r3, [pc, #608]	; (801a740 <BUFFERVALUEUPDATE+0x3d0>)
 801a4de:	ed93 7a00 	vldr	s14, [r3]
 801a4e2:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff4<0){diff4=(-1)*diff4;}
 801a4e6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a4ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4ee:	f100 82fe 	bmi.w	801aaee <BUFFERVALUEUPDATE+0x77e>
	  if (f_inputRight_DB > f_inputRight_DB_MAXbufferd){f_inputRight_DB_MAXbufferd = f_inputRight_DB;}
 801a4f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a4f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4fa:	f340 8339 	ble.w	801ab70 <BUFFERVALUEUPDATE+0x800>
 801a4fe:	4b90      	ldr	r3, [pc, #576]	; (801a740 <BUFFERVALUEUPDATE+0x3d0>)
 801a500:	edc3 7a00 	vstr	s15, [r3]
	  else {f_inputRight_DB_MAXbufferd -=p_MAXBufferd*diff4;}

/////////INPUT LEFT_RMS
	  float diff5=0;
	  diff5 = (f_inputLeft_DB_RMS_bufferd-f_inputLeft_DB_RMS);
 801a504:	4b8f      	ldr	r3, [pc, #572]	; (801a744 <BUFFERVALUEUPDATE+0x3d4>)
 801a506:	ed93 7a00 	vldr	s14, [r3]
 801a50a:	4b8f      	ldr	r3, [pc, #572]	; (801a748 <BUFFERVALUEUPDATE+0x3d8>)
 801a50c:	edd3 7a00 	vldr	s15, [r3]
 801a510:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff5<0){diff5=(-1)*diff5;}
 801a514:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a51c:	f100 8333 	bmi.w	801ab86 <BUFFERVALUEUPDATE+0x816>
	  if (f_inputLeft_DB_RMS > f_inputLeft_DB_RMS_bufferd){f_inputLeft_DB_RMS_bufferd = f_inputLeft_DB_RMS;}
 801a520:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a528:	f140 8330 	bpl.w	801ab8c <BUFFERVALUEUPDATE+0x81c>
 801a52c:	4b85      	ldr	r3, [pc, #532]	; (801a744 <BUFFERVALUEUPDATE+0x3d4>)
 801a52e:	edc3 7a00 	vstr	s15, [r3]
	  else {f_inputLeft_DB_RMS_bufferd -=p_Bufferd*diff5;}

	  float diff6=0;
	  diff6 = (f_inputLeft_DB_RMS_MAXbufferd-f_inputLeft_DB_RMS);
 801a532:	4b86      	ldr	r3, [pc, #536]	; (801a74c <BUFFERVALUEUPDATE+0x3dc>)
 801a534:	ed93 7a00 	vldr	s14, [r3]
 801a538:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff6<0){diff6=(-1)*diff6;}
 801a53c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a544:	f100 832d 	bmi.w	801aba2 <BUFFERVALUEUPDATE+0x832>
	  if (f_inputLeft_DB_RMS > f_inputLeft_DB_RMS_MAXbufferd){f_inputLeft_DB_RMS_MAXbufferd = f_inputLeft_DB_RMS;}
 801a548:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a550:	f340 832a 	ble.w	801aba8 <BUFFERVALUEUPDATE+0x838>
 801a554:	4b7d      	ldr	r3, [pc, #500]	; (801a74c <BUFFERVALUEUPDATE+0x3dc>)
 801a556:	edc3 7a00 	vstr	s15, [r3]
	  else {f_inputLeft_DB_RMS_MAXbufferd -=p_MAXBufferd*diff6;}
/////////INPUT RIGHT_RMS
	  float diff7=0;
	  diff7 = (f_inputRight_DB_RMS_bufferd-f_inputRight_DB_RMS);
 801a55a:	4b7d      	ldr	r3, [pc, #500]	; (801a750 <BUFFERVALUEUPDATE+0x3e0>)
 801a55c:	ed93 7a00 	vldr	s14, [r3]
 801a560:	4b7c      	ldr	r3, [pc, #496]	; (801a754 <BUFFERVALUEUPDATE+0x3e4>)
 801a562:	edd3 7a00 	vldr	s15, [r3]
 801a566:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff7<0){diff7=(-1)*diff7;}
 801a56a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a56e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a572:	f100 8324 	bmi.w	801abbe <BUFFERVALUEUPDATE+0x84e>
	  if (f_inputRight_DB_RMS > f_inputRight_DB_RMS_bufferd){f_inputRight_DB_RMS_bufferd = f_inputRight_DB_RMS;}
 801a576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a57a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a57e:	f140 8321 	bpl.w	801abc4 <BUFFERVALUEUPDATE+0x854>
 801a582:	4b73      	ldr	r3, [pc, #460]	; (801a750 <BUFFERVALUEUPDATE+0x3e0>)
 801a584:	edc3 7a00 	vstr	s15, [r3]
	  else {f_inputRight_DB_RMS_bufferd -=p_Bufferd*diff7;}

	  float diff8=0;
	  diff8 = (f_inputRight_DB_RMS_MAXbufferd-f_inputRight_DB_RMS);
 801a588:	4b73      	ldr	r3, [pc, #460]	; (801a758 <BUFFERVALUEUPDATE+0x3e8>)
 801a58a:	ed93 7a00 	vldr	s14, [r3]
 801a58e:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff8<0){diff8=(-1)*diff8;}
 801a592:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a59a:	f100 831e 	bmi.w	801abda <BUFFERVALUEUPDATE+0x86a>
	  if (f_inputRight_DB_RMS > f_inputRight_DB_RMS_MAXbufferd){f_inputRight_DB_RMS_MAXbufferd = f_inputRight_DB_RMS;}
 801a59e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5a6:	f340 831b 	ble.w	801abe0 <BUFFERVALUEUPDATE+0x870>
 801a5aa:	4b6b      	ldr	r3, [pc, #428]	; (801a758 <BUFFERVALUEUPDATE+0x3e8>)
 801a5ac:	edc3 7a00 	vstr	s15, [r3]
//*****************************************************************************************************************//
//*****************************************************************************************************************//

/////////VCA LEFT
	  float diff9=0;
	  diff9 = (f_VCALeft_DB_bufferd-f_VCALeft_DB);
 801a5b0:	4b6a      	ldr	r3, [pc, #424]	; (801a75c <BUFFERVALUEUPDATE+0x3ec>)
 801a5b2:	ed93 7a00 	vldr	s14, [r3]
 801a5b6:	4b6a      	ldr	r3, [pc, #424]	; (801a760 <BUFFERVALUEUPDATE+0x3f0>)
 801a5b8:	edd3 7a00 	vldr	s15, [r3]
 801a5bc:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff9<0){diff9=(-1)*diff9;}
 801a5c0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a5c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5c8:	f100 8315 	bmi.w	801abf6 <BUFFERVALUEUPDATE+0x886>
	  if (f_VCALeft_DB > f_VCALeft_DB_bufferd){f_VCALeft_DB_bufferd = f_VCALeft_DB;}
 801a5cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a5d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5d4:	f140 8312 	bpl.w	801abfc <BUFFERVALUEUPDATE+0x88c>
 801a5d8:	4b60      	ldr	r3, [pc, #384]	; (801a75c <BUFFERVALUEUPDATE+0x3ec>)
 801a5da:	edc3 7a00 	vstr	s15, [r3]
	  else {f_VCALeft_DB_bufferd -=p_Bufferd*diff9;}

	  float diff10=0;
	  diff10 = (f_VCALeft_DB_MAXbufferd-f_VCALeft_DB);
 801a5de:	4b61      	ldr	r3, [pc, #388]	; (801a764 <BUFFERVALUEUPDATE+0x3f4>)
 801a5e0:	ed93 7a00 	vldr	s14, [r3]
 801a5e4:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff10<0){diff10=(-1)*diff10;}
 801a5e8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a5ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5f0:	f100 830f 	bmi.w	801ac12 <BUFFERVALUEUPDATE+0x8a2>
	  if (f_VCALeft_DB > f_VCALeft_DB_MAXbufferd){f_VCALeft_DB_MAXbufferd = f_VCALeft_DB;}
 801a5f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a5fc:	f340 830c 	ble.w	801ac18 <BUFFERVALUEUPDATE+0x8a8>
 801a600:	4b58      	ldr	r3, [pc, #352]	; (801a764 <BUFFERVALUEUPDATE+0x3f4>)
 801a602:	edc3 7a00 	vstr	s15, [r3]
	  else {f_VCALeft_DB_MAXbufferd -=p_MAXBufferd*diff10;}
/////////VCA RIGHT
	  float diff11=0;
	  diff11 = (f_VCARight_DB_bufferd-f_VCARight_DB);
 801a606:	4b58      	ldr	r3, [pc, #352]	; (801a768 <BUFFERVALUEUPDATE+0x3f8>)
 801a608:	ed93 7a00 	vldr	s14, [r3]
 801a60c:	4b57      	ldr	r3, [pc, #348]	; (801a76c <BUFFERVALUEUPDATE+0x3fc>)
 801a60e:	edd3 7a00 	vldr	s15, [r3]
 801a612:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff11<0){diff11=(-1)*diff11;}
 801a616:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a61a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a61e:	f100 8306 	bmi.w	801ac2e <BUFFERVALUEUPDATE+0x8be>
	  if (f_VCARight_DB > f_VCARight_DB_bufferd){f_VCARight_DB_bufferd = f_VCARight_DB;}
 801a622:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a62a:	f140 8303 	bpl.w	801ac34 <BUFFERVALUEUPDATE+0x8c4>
 801a62e:	4b4e      	ldr	r3, [pc, #312]	; (801a768 <BUFFERVALUEUPDATE+0x3f8>)
 801a630:	edc3 7a00 	vstr	s15, [r3]
	  else {f_VCARight_DB_bufferd -=p_Bufferd*diff11;}

	  float diff12=0;
	  diff12 = (f_VCARight_DB_MAXbufferd-f_VCARight_DB);
 801a634:	4b4e      	ldr	r3, [pc, #312]	; (801a770 <BUFFERVALUEUPDATE+0x400>)
 801a636:	ed93 7a00 	vldr	s14, [r3]
 801a63a:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff12<0){diff12=(-1)*diff12;}
 801a63e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a646:	f100 8300 	bmi.w	801ac4a <BUFFERVALUEUPDATE+0x8da>
	  if (f_VCARight_DB > f_VCARight_DB_MAXbufferd){f_VCARight_DB_MAXbufferd = f_VCARight_DB;}
 801a64a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a652:	f340 82fd 	ble.w	801ac50 <BUFFERVALUEUPDATE+0x8e0>
 801a656:	4b46      	ldr	r3, [pc, #280]	; (801a770 <BUFFERVALUEUPDATE+0x400>)
 801a658:	edc3 7a00 	vstr	s15, [r3]
	  else {f_VCARight_DB_MAXbufferd -=p_MAXBufferd*diff12;}

/////////VCA LEFT RMS
	  float diff13=0;
	  diff13 = (f_VCALeft_DB_RMS_bufferd-f_VCALeft_DB_RMS);
 801a65c:	4b45      	ldr	r3, [pc, #276]	; (801a774 <BUFFERVALUEUPDATE+0x404>)
 801a65e:	ed93 7a00 	vldr	s14, [r3]
 801a662:	4b45      	ldr	r3, [pc, #276]	; (801a778 <BUFFERVALUEUPDATE+0x408>)
 801a664:	edd3 7a00 	vldr	s15, [r3]
 801a668:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff13<0){diff13=(-1)*diff13;}
 801a66c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a674:	f100 82f7 	bmi.w	801ac66 <BUFFERVALUEUPDATE+0x8f6>
	  if (f_VCALeft_DB_RMS > f_VCALeft_DB_RMS_bufferd){f_VCALeft_DB_RMS_bufferd = f_VCALeft_DB_RMS;}
 801a678:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a67c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a680:	f140 82f4 	bpl.w	801ac6c <BUFFERVALUEUPDATE+0x8fc>
 801a684:	4b3b      	ldr	r3, [pc, #236]	; (801a774 <BUFFERVALUEUPDATE+0x404>)
 801a686:	edc3 7a00 	vstr	s15, [r3]
	  else {f_VCALeft_DB_RMS_bufferd -=p_Bufferd*diff13;}

	  float diff14=0;
	  diff14 = (f_VCALeft_DB_RMS_MAXbufferd-f_VCALeft_DB_RMS);
 801a68a:	4b3c      	ldr	r3, [pc, #240]	; (801a77c <BUFFERVALUEUPDATE+0x40c>)
 801a68c:	ed93 7a00 	vldr	s14, [r3]
 801a690:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff14<0){diff14=(-1)*diff14;}
 801a694:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a69c:	f100 82f1 	bmi.w	801ac82 <BUFFERVALUEUPDATE+0x912>
	  if (f_VCALeft_DB_RMS > f_VCALeft_DB_RMS_MAXbufferd){f_VCALeft_DB_RMS_MAXbufferd = f_VCALeft_DB_RMS;}
 801a6a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a6a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6a8:	f340 82ee 	ble.w	801ac88 <BUFFERVALUEUPDATE+0x918>
 801a6ac:	4b33      	ldr	r3, [pc, #204]	; (801a77c <BUFFERVALUEUPDATE+0x40c>)
 801a6ae:	edc3 7a00 	vstr	s15, [r3]
	  else {f_VCALeft_DB_RMS_MAXbufferd -=p_MAXBufferd*diff14;}
/////////VCA RIGHT RMS
	  float diff15=0;
	  diff15 = (f_VCARight_DB_RMS_bufferd-f_VCARight_DB_RMS);
 801a6b2:	4b33      	ldr	r3, [pc, #204]	; (801a780 <BUFFERVALUEUPDATE+0x410>)
 801a6b4:	ed93 7a00 	vldr	s14, [r3]
 801a6b8:	4b32      	ldr	r3, [pc, #200]	; (801a784 <BUFFERVALUEUPDATE+0x414>)
 801a6ba:	edd3 7a00 	vldr	s15, [r3]
 801a6be:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff15<0){diff15=(-1)*diff15;}
 801a6c2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6ca:	f100 82e8 	bmi.w	801ac9e <BUFFERVALUEUPDATE+0x92e>
	  if (f_VCARight_DB_RMS > f_VCARight_DB_RMS_bufferd){f_VCARight_DB_RMS_bufferd = f_VCARight_DB_RMS;}
 801a6ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a6d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6d6:	f140 82e5 	bpl.w	801aca4 <BUFFERVALUEUPDATE+0x934>
 801a6da:	4b29      	ldr	r3, [pc, #164]	; (801a780 <BUFFERVALUEUPDATE+0x410>)
 801a6dc:	edc3 7a00 	vstr	s15, [r3]
	  else {f_VCARight_DB_RMS_bufferd -=p_Bufferd*diff15;}

	  float diff16=0;
	  diff16 = (f_VCARight_DB_RMS_MAXbufferd-f_VCARight_DB_RMS);
 801a6e0:	4b29      	ldr	r3, [pc, #164]	; (801a788 <BUFFERVALUEUPDATE+0x418>)
 801a6e2:	ed93 7a00 	vldr	s14, [r3]
 801a6e6:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff16<0){diff16=(-1)*diff16;}
 801a6ea:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6f2:	f100 82e2 	bmi.w	801acba <BUFFERVALUEUPDATE+0x94a>
 801a6f6:	e049      	b.n	801a78c <BUFFERVALUEUPDATE+0x41c>
 801a6f8:	2002f188 	.word	0x2002f188
 801a6fc:	2002f8a0 	.word	0x2002f8a0
 801a700:	2002fa5c 	.word	0x2002fa5c
 801a704:	2002fb6c 	.word	0x2002fb6c
 801a708:	2002f8a8 	.word	0x2002f8a8
 801a70c:	2002f18c 	.word	0x2002f18c
 801a710:	2002f3a0 	.word	0x2002f3a0
 801a714:	2002f194 	.word	0x2002f194
 801a718:	2002f884 	.word	0x2002f884
 801a71c:	2002f3ac 	.word	0x2002f3ac
 801a720:	2002fb58 	.word	0x2002fb58
 801a724:	2002f1a8 	.word	0x2002f1a8
 801a728:	2002fa64 	.word	0x2002fa64
 801a72c:	2002f3a8 	.word	0x2002f3a8
 801a730:	2002fa60 	.word	0x2002fa60
 801a734:	2002f184 	.word	0x2002f184
 801a738:	2002fdd0 	.word	0x2002fdd0
 801a73c:	2002fa7c 	.word	0x2002fa7c
 801a740:	2002f55c 	.word	0x2002f55c
 801a744:	2002fb5c 	.word	0x2002fb5c
 801a748:	2002f8a4 	.word	0x2002f8a4
 801a74c:	2002f1a0 	.word	0x2002f1a0
 801a750:	2002f19c 	.word	0x2002f19c
 801a754:	2002f8b0 	.word	0x2002f8b0
 801a758:	2002f888 	.word	0x2002f888
 801a75c:	2002fa78 	.word	0x2002fa78
 801a760:	2002f898 	.word	0x2002f898
 801a764:	2002fb74 	.word	0x2002fb74
 801a768:	2002fa50 	.word	0x2002fa50
 801a76c:	2002fb50 	.word	0x2002fb50
 801a770:	2002fb48 	.word	0x2002fb48
 801a774:	2002f554 	.word	0x2002f554
 801a778:	2002fb4c 	.word	0x2002fb4c
 801a77c:	2002f890 	.word	0x2002f890
 801a780:	2002f39c 	.word	0x2002f39c
 801a784:	2002f190 	.word	0x2002f190
 801a788:	2002fb70 	.word	0x2002fb70
	  if (f_VCARight_DB_RMS > f_VCARight_DB_RMS_MAXbufferd){f_VCARight_DB_RMS_MAXbufferd = f_VCARight_DB_RMS;}
 801a78c:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a794:	f340 8294 	ble.w	801acc0 <BUFFERVALUEUPDATE+0x950>
 801a798:	4bdb      	ldr	r3, [pc, #876]	; (801ab08 <BUFFERVALUEUPDATE+0x798>)
 801a79a:	edc3 7a00 	vstr	s15, [r3]
//*****************************************************************************************************************//

	  float diff=0;
/////////OUTPUT LEFT
	  diff=0;
	  diff = (f_outputLeft_DB_bufferd-f_outputLeft_DB);
 801a79e:	4bdb      	ldr	r3, [pc, #876]	; (801ab0c <BUFFERVALUEUPDATE+0x79c>)
 801a7a0:	ed93 7a00 	vldr	s14, [r3]
 801a7a4:	4bda      	ldr	r3, [pc, #872]	; (801ab10 <BUFFERVALUEUPDATE+0x7a0>)
 801a7a6:	edd3 7a00 	vldr	s15, [r3]
 801a7aa:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff<0){diff=(-1)*diff;}
 801a7ae:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7b6:	f100 828e 	bmi.w	801acd6 <BUFFERVALUEUPDATE+0x966>
	  if (f_outputLeft_DB > f_outputLeft_DB_bufferd){f_outputLeft_DB_bufferd = f_outputLeft_DB;}
 801a7ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a7be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7c2:	f140 828b 	bpl.w	801acdc <BUFFERVALUEUPDATE+0x96c>
 801a7c6:	4bd1      	ldr	r3, [pc, #836]	; (801ab0c <BUFFERVALUEUPDATE+0x79c>)
 801a7c8:	edc3 7a00 	vstr	s15, [r3]
	  else {f_outputLeft_DB_bufferd -=p_Bufferd*diff;}

	  diff=0;
	  diff = (f_outputLeft_DB_MAXbufferd-f_outputLeft_DB);
 801a7cc:	4bd1      	ldr	r3, [pc, #836]	; (801ab14 <BUFFERVALUEUPDATE+0x7a4>)
 801a7ce:	ed93 7a00 	vldr	s14, [r3]
 801a7d2:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff<0){diff=(-1)*diff;}
 801a7d6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a7da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7de:	f100 8288 	bmi.w	801acf2 <BUFFERVALUEUPDATE+0x982>
	  if (f_outputLeft_DB > f_outputLeft_DB_MAXbufferd){f_outputLeft_DB_MAXbufferd = f_outputLeft_DB;}
 801a7e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7ea:	f340 8285 	ble.w	801acf8 <BUFFERVALUEUPDATE+0x988>
 801a7ee:	4bc9      	ldr	r3, [pc, #804]	; (801ab14 <BUFFERVALUEUPDATE+0x7a4>)
 801a7f0:	edc3 7a00 	vstr	s15, [r3]
	  else {f_outputLeft_DB_MAXbufferd -=p_MAXBufferd*diff;}
/////////OUTPUT RIGHT
	  diff=0;
	  diff = (f_outputRight_DB_bufferd-f_outputRight_DB);
 801a7f4:	4bc8      	ldr	r3, [pc, #800]	; (801ab18 <BUFFERVALUEUPDATE+0x7a8>)
 801a7f6:	ed93 7a00 	vldr	s14, [r3]
 801a7fa:	4bc8      	ldr	r3, [pc, #800]	; (801ab1c <BUFFERVALUEUPDATE+0x7ac>)
 801a7fc:	edd3 7a00 	vldr	s15, [r3]
 801a800:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff<0){diff=(-1)*diff;}
 801a804:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a80c:	f100 827f 	bmi.w	801ad0e <BUFFERVALUEUPDATE+0x99e>
	  if (f_outputRight_DB > f_outputRight_DB_bufferd){f_outputRight_DB_bufferd = f_outputRight_DB;}
 801a810:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a818:	f140 827c 	bpl.w	801ad14 <BUFFERVALUEUPDATE+0x9a4>
 801a81c:	4bbe      	ldr	r3, [pc, #760]	; (801ab18 <BUFFERVALUEUPDATE+0x7a8>)
 801a81e:	edc3 7a00 	vstr	s15, [r3]
	  else {f_outputRight_DB_bufferd -=p_Bufferd*diff;}

	  diff=0;
	  diff = (f_outputRight_DB_MAXbufferd-f_outputRight_DB);
 801a822:	4bbf      	ldr	r3, [pc, #764]	; (801ab20 <BUFFERVALUEUPDATE+0x7b0>)
 801a824:	ed93 7a00 	vldr	s14, [r3]
 801a828:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff<0){diff=(-1)*diff;}
 801a82c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a834:	f100 8279 	bmi.w	801ad2a <BUFFERVALUEUPDATE+0x9ba>
	  if (f_outputRight_DB > f_outputRight_DB_MAXbufferd){f_outputRight_DB_MAXbufferd = f_outputRight_DB;}
 801a838:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a840:	f340 8276 	ble.w	801ad30 <BUFFERVALUEUPDATE+0x9c0>
 801a844:	4bb6      	ldr	r3, [pc, #728]	; (801ab20 <BUFFERVALUEUPDATE+0x7b0>)
 801a846:	edc3 7a00 	vstr	s15, [r3]
	  else {f_outputRight_DB_MAXbufferd -=p_MAXBufferd*diff;}

/////////OUTPUT LEFT RMS
	  diff=0;
	  diff = (f_outputLeft_DB_RMS_bufferd-f_outputLeft_DB_RMS);
 801a84a:	4bb6      	ldr	r3, [pc, #728]	; (801ab24 <BUFFERVALUEUPDATE+0x7b4>)
 801a84c:	ed93 7a00 	vldr	s14, [r3]
 801a850:	4bb5      	ldr	r3, [pc, #724]	; (801ab28 <BUFFERVALUEUPDATE+0x7b8>)
 801a852:	edd3 7a00 	vldr	s15, [r3]
 801a856:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff<0){diff=(-1)*diff;}
 801a85a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a862:	f100 8270 	bmi.w	801ad46 <BUFFERVALUEUPDATE+0x9d6>
	  if (f_outputLeft_DB_RMS > f_outputLeft_DB_RMS_bufferd){f_outputLeft_DB_RMS_bufferd = f_outputLeft_DB_RMS;}
 801a866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a86a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a86e:	f140 826d 	bpl.w	801ad4c <BUFFERVALUEUPDATE+0x9dc>
 801a872:	4bac      	ldr	r3, [pc, #688]	; (801ab24 <BUFFERVALUEUPDATE+0x7b4>)
 801a874:	edc3 7a00 	vstr	s15, [r3]
	  else {f_outputLeft_DB_RMS_bufferd -=p_Bufferd*diff;}

	  diff=0;
	  diff = (f_outputLeft_DB_RMS_MAXbufferd-f_outputLeft_DB_RMS);
 801a878:	4bac      	ldr	r3, [pc, #688]	; (801ab2c <BUFFERVALUEUPDATE+0x7bc>)
 801a87a:	ed93 7a00 	vldr	s14, [r3]
 801a87e:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff<0){diff=(-1)*diff;}
 801a882:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a88a:	f100 826a 	bmi.w	801ad62 <BUFFERVALUEUPDATE+0x9f2>
	  if (f_outputLeft_DB_RMS > f_outputLeft_DB_RMS_MAXbufferd){f_outputLeft_DB_RMS_MAXbufferd = f_outputLeft_DB_RMS;}
 801a88e:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a896:	f340 8267 	ble.w	801ad68 <BUFFERVALUEUPDATE+0x9f8>
 801a89a:	4ba4      	ldr	r3, [pc, #656]	; (801ab2c <BUFFERVALUEUPDATE+0x7bc>)
 801a89c:	edc3 7a00 	vstr	s15, [r3]
	  else {f_outputLeft_DB_RMS_MAXbufferd -=p_MAXBufferd*diff;}
/////////OUTPUT RIGHT RMS
	  diff=0;
	  diff = (f_outputRight_DB_RMS_bufferd-f_outputRight_DB_RMS);
 801a8a0:	4ba3      	ldr	r3, [pc, #652]	; (801ab30 <BUFFERVALUEUPDATE+0x7c0>)
 801a8a2:	ed93 7a00 	vldr	s14, [r3]
 801a8a6:	4ba3      	ldr	r3, [pc, #652]	; (801ab34 <BUFFERVALUEUPDATE+0x7c4>)
 801a8a8:	edd3 7a00 	vldr	s15, [r3]
 801a8ac:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff<0){diff=(-1)*diff;}
 801a8b0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8b8:	f100 8261 	bmi.w	801ad7e <BUFFERVALUEUPDATE+0xa0e>
	  if (f_outputRight_DB_RMS > f_outputRight_DB_RMS_bufferd){f_outputRight_DB_RMS_bufferd = f_outputRight_DB_RMS;}
 801a8bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801a8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8c4:	f140 825e 	bpl.w	801ad84 <BUFFERVALUEUPDATE+0xa14>
 801a8c8:	4b99      	ldr	r3, [pc, #612]	; (801ab30 <BUFFERVALUEUPDATE+0x7c0>)
 801a8ca:	edc3 7a00 	vstr	s15, [r3]
	  else {f_outputRight_DB_RMS_bufferd -=p_Bufferd*diff;}

	  diff=0;
	  diff = (f_outputRight_DB_RMS_MAXbufferd-f_outputRight_DB_RMS);
 801a8ce:	4b9a      	ldr	r3, [pc, #616]	; (801ab38 <BUFFERVALUEUPDATE+0x7c8>)
 801a8d0:	ed93 7a00 	vldr	s14, [r3]
 801a8d4:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff<0){diff=(-1)*diff;}
 801a8d8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8e0:	f100 825b 	bmi.w	801ad9a <BUFFERVALUEUPDATE+0xa2a>
	  if (f_outputRight_DB_RMS > f_outputRight_DB_RMS_MAXbufferd){f_outputRight_DB_RMS_MAXbufferd = f_outputRight_DB_RMS;}
 801a8e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 801a8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8ec:	f340 8258 	ble.w	801ada0 <BUFFERVALUEUPDATE+0xa30>
 801a8f0:	4b91      	ldr	r3, [pc, #580]	; (801ab38 <BUFFERVALUEUPDATE+0x7c8>)
 801a8f2:	edc3 7a00 	vstr	s15, [r3]
void BUFFERVALUEUPDATE(){
 801a8f6:	2300      	movs	r3, #0
 801a8f8:	e26c      	b.n	801add4 <BUFFERVALUEUPDATE+0xa64>
	  else {i_inputLeft_Indicator_bufferd -=0.01*(i_inputLeft_Indicator_bufferd-i_inputLeft_Indicator);}
 801a8fa:	ee78 7ac8 	vsub.f32	s15, s17, s16
 801a8fe:	ee17 0a90 	vmov	r0, s15
 801a902:	f7f5 fde9 	bl	80104d8 <__aeabi_f2d>
 801a906:	a37c      	add	r3, pc, #496	; (adr r3, 801aaf8 <BUFFERVALUEUPDATE+0x788>)
 801a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a90c:	f7f5 fe3c 	bl	8010588 <__aeabi_dmul>
 801a910:	4604      	mov	r4, r0
 801a912:	460d      	mov	r5, r1
 801a914:	ee18 0a90 	vmov	r0, s17
 801a918:	f7f5 fdde 	bl	80104d8 <__aeabi_f2d>
 801a91c:	4622      	mov	r2, r4
 801a91e:	462b      	mov	r3, r5
 801a920:	f7f5 fc7a 	bl	8010218 <__aeabi_dsub>
 801a924:	f7f6 f8ca 	bl	8010abc <__aeabi_d2f>
 801a928:	4b84      	ldr	r3, [pc, #528]	; (801ab3c <BUFFERVALUEUPDATE+0x7cc>)
 801a92a:	6018      	str	r0, [r3, #0]
 801a92c:	e533      	b.n	801a396 <BUFFERVALUEUPDATE+0x26>
	  else {i_inputLeft_Indicator_MAXbufferd -=0.001*(i_inputLeft_Indicator_MAXbufferd-i_inputLeft_Indicator);}
 801a92e:	ee78 7ac8 	vsub.f32	s15, s17, s16
 801a932:	ee17 0a90 	vmov	r0, s15
 801a936:	f7f5 fdcf 	bl	80104d8 <__aeabi_f2d>
 801a93a:	a371      	add	r3, pc, #452	; (adr r3, 801ab00 <BUFFERVALUEUPDATE+0x790>)
 801a93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a940:	f7f5 fe22 	bl	8010588 <__aeabi_dmul>
 801a944:	4604      	mov	r4, r0
 801a946:	460d      	mov	r5, r1
 801a948:	ee18 0a90 	vmov	r0, s17
 801a94c:	f7f5 fdc4 	bl	80104d8 <__aeabi_f2d>
 801a950:	4622      	mov	r2, r4
 801a952:	462b      	mov	r3, r5
 801a954:	f7f5 fc60 	bl	8010218 <__aeabi_dsub>
 801a958:	f7f6 f8b0 	bl	8010abc <__aeabi_d2f>
 801a95c:	4b78      	ldr	r3, [pc, #480]	; (801ab40 <BUFFERVALUEUPDATE+0x7d0>)
 801a95e:	6018      	str	r0, [r3, #0]
 801a960:	e529      	b.n	801a3b6 <BUFFERVALUEUPDATE+0x46>
	  else {i_inputRight_Indicator_bufferd -=0.01*(i_inputRight_Indicator_bufferd-i_inputRight_Indicator);}
 801a962:	ee78 7ac8 	vsub.f32	s15, s17, s16
 801a966:	ee17 0a90 	vmov	r0, s15
 801a96a:	f7f5 fdb5 	bl	80104d8 <__aeabi_f2d>
 801a96e:	a362      	add	r3, pc, #392	; (adr r3, 801aaf8 <BUFFERVALUEUPDATE+0x788>)
 801a970:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a974:	f7f5 fe08 	bl	8010588 <__aeabi_dmul>
 801a978:	4604      	mov	r4, r0
 801a97a:	460d      	mov	r5, r1
 801a97c:	ee18 0a90 	vmov	r0, s17
 801a980:	f7f5 fdaa 	bl	80104d8 <__aeabi_f2d>
 801a984:	4622      	mov	r2, r4
 801a986:	462b      	mov	r3, r5
 801a988:	f7f5 fc46 	bl	8010218 <__aeabi_dsub>
 801a98c:	f7f6 f896 	bl	8010abc <__aeabi_d2f>
 801a990:	4b6c      	ldr	r3, [pc, #432]	; (801ab44 <BUFFERVALUEUPDATE+0x7d4>)
 801a992:	6018      	str	r0, [r3, #0]
 801a994:	e51f      	b.n	801a3d6 <BUFFERVALUEUPDATE+0x66>
	  else {i_inputRight_Indicator_MAXbufferd -=0.001*(i_inputRight_Indicator_MAXbufferd-i_inputRight_Indicator);}
 801a996:	ee78 7ac8 	vsub.f32	s15, s17, s16
 801a99a:	ee17 0a90 	vmov	r0, s15
 801a99e:	f7f5 fd9b 	bl	80104d8 <__aeabi_f2d>
 801a9a2:	a357      	add	r3, pc, #348	; (adr r3, 801ab00 <BUFFERVALUEUPDATE+0x790>)
 801a9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9a8:	f7f5 fdee 	bl	8010588 <__aeabi_dmul>
 801a9ac:	4604      	mov	r4, r0
 801a9ae:	460d      	mov	r5, r1
 801a9b0:	ee18 0a90 	vmov	r0, s17
 801a9b4:	f7f5 fd90 	bl	80104d8 <__aeabi_f2d>
 801a9b8:	4622      	mov	r2, r4
 801a9ba:	462b      	mov	r3, r5
 801a9bc:	f7f5 fc2c 	bl	8010218 <__aeabi_dsub>
 801a9c0:	f7f6 f87c 	bl	8010abc <__aeabi_d2f>
 801a9c4:	4b60      	ldr	r3, [pc, #384]	; (801ab48 <BUFFERVALUEUPDATE+0x7d8>)
 801a9c6:	6018      	str	r0, [r3, #0]
 801a9c8:	e510      	b.n	801a3ec <BUFFERVALUEUPDATE+0x7c>
	  else {i_outputLeft_Indicator_bufferd -=0.01*(i_outputLeft_Indicator_bufferd-i_outputLeft_Indicator);}
 801a9ca:	ee78 7ac8 	vsub.f32	s15, s17, s16
 801a9ce:	ee17 0a90 	vmov	r0, s15
 801a9d2:	f7f5 fd81 	bl	80104d8 <__aeabi_f2d>
 801a9d6:	a348      	add	r3, pc, #288	; (adr r3, 801aaf8 <BUFFERVALUEUPDATE+0x788>)
 801a9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9dc:	f7f5 fdd4 	bl	8010588 <__aeabi_dmul>
 801a9e0:	4604      	mov	r4, r0
 801a9e2:	460d      	mov	r5, r1
 801a9e4:	ee18 0a90 	vmov	r0, s17
 801a9e8:	f7f5 fd76 	bl	80104d8 <__aeabi_f2d>
 801a9ec:	4622      	mov	r2, r4
 801a9ee:	462b      	mov	r3, r5
 801a9f0:	f7f5 fc12 	bl	8010218 <__aeabi_dsub>
 801a9f4:	f7f6 f862 	bl	8010abc <__aeabi_d2f>
 801a9f8:	4b54      	ldr	r3, [pc, #336]	; (801ab4c <BUFFERVALUEUPDATE+0x7dc>)
 801a9fa:	6018      	str	r0, [r3, #0]
 801a9fc:	e506      	b.n	801a40c <BUFFERVALUEUPDATE+0x9c>
	  else {i_outputLeft_Indicator_MAXbufferd -=0.001*(i_outputLeft_Indicator_MAXbufferd-i_outputLeft_Indicator);}
 801a9fe:	ee78 7ac8 	vsub.f32	s15, s17, s16
 801aa02:	ee17 0a90 	vmov	r0, s15
 801aa06:	f7f5 fd67 	bl	80104d8 <__aeabi_f2d>
 801aa0a:	a33d      	add	r3, pc, #244	; (adr r3, 801ab00 <BUFFERVALUEUPDATE+0x790>)
 801aa0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa10:	f7f5 fdba 	bl	8010588 <__aeabi_dmul>
 801aa14:	4604      	mov	r4, r0
 801aa16:	460d      	mov	r5, r1
 801aa18:	ee18 0a90 	vmov	r0, s17
 801aa1c:	f7f5 fd5c 	bl	80104d8 <__aeabi_f2d>
 801aa20:	4622      	mov	r2, r4
 801aa22:	462b      	mov	r3, r5
 801aa24:	f7f5 fbf8 	bl	8010218 <__aeabi_dsub>
 801aa28:	f7f6 f848 	bl	8010abc <__aeabi_d2f>
 801aa2c:	4b48      	ldr	r3, [pc, #288]	; (801ab50 <BUFFERVALUEUPDATE+0x7e0>)
 801aa2e:	6018      	str	r0, [r3, #0]
 801aa30:	e4f7      	b.n	801a422 <BUFFERVALUEUPDATE+0xb2>
	  else {i_outputRight_Indicator_bufferd -=0.01*(i_outputRight_Indicator_bufferd-i_outputRight_Indicator);}
 801aa32:	ee78 7ac8 	vsub.f32	s15, s17, s16
 801aa36:	ee17 0a90 	vmov	r0, s15
 801aa3a:	f7f5 fd4d 	bl	80104d8 <__aeabi_f2d>
 801aa3e:	a32e      	add	r3, pc, #184	; (adr r3, 801aaf8 <BUFFERVALUEUPDATE+0x788>)
 801aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa44:	f7f5 fda0 	bl	8010588 <__aeabi_dmul>
 801aa48:	4604      	mov	r4, r0
 801aa4a:	460d      	mov	r5, r1
 801aa4c:	ee18 0a90 	vmov	r0, s17
 801aa50:	f7f5 fd42 	bl	80104d8 <__aeabi_f2d>
 801aa54:	4622      	mov	r2, r4
 801aa56:	462b      	mov	r3, r5
 801aa58:	f7f5 fbde 	bl	8010218 <__aeabi_dsub>
 801aa5c:	f7f6 f82e 	bl	8010abc <__aeabi_d2f>
 801aa60:	4b3c      	ldr	r3, [pc, #240]	; (801ab54 <BUFFERVALUEUPDATE+0x7e4>)
 801aa62:	6018      	str	r0, [r3, #0]
 801aa64:	e4ed      	b.n	801a442 <BUFFERVALUEUPDATE+0xd2>
	  else {i_outputRight_Indicator_MAXbufferd -=0.001*(i_outputRight_Indicator_MAXbufferd-i_outputRight_Indicator);}
 801aa66:	ee78 7ac8 	vsub.f32	s15, s17, s16
 801aa6a:	ee17 0a90 	vmov	r0, s15
 801aa6e:	f7f5 fd33 	bl	80104d8 <__aeabi_f2d>
 801aa72:	a323      	add	r3, pc, #140	; (adr r3, 801ab00 <BUFFERVALUEUPDATE+0x790>)
 801aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa78:	f7f5 fd86 	bl	8010588 <__aeabi_dmul>
 801aa7c:	4604      	mov	r4, r0
 801aa7e:	460d      	mov	r5, r1
 801aa80:	ee18 0a90 	vmov	r0, s17
 801aa84:	f7f5 fd28 	bl	80104d8 <__aeabi_f2d>
 801aa88:	4622      	mov	r2, r4
 801aa8a:	462b      	mov	r3, r5
 801aa8c:	f7f5 fbc4 	bl	8010218 <__aeabi_dsub>
 801aa90:	f7f6 f814 	bl	8010abc <__aeabi_d2f>
 801aa94:	4b30      	ldr	r3, [pc, #192]	; (801ab58 <BUFFERVALUEUPDATE+0x7e8>)
 801aa96:	6018      	str	r0, [r3, #0]
 801aa98:	e4de      	b.n	801a458 <BUFFERVALUEUPDATE+0xe8>
	  if(diff1<0){diff1=(-1)*diff1;}
 801aa9a:	eef1 6a66 	vneg.f32	s13, s13
 801aa9e:	e4e9      	b.n	801a474 <BUFFERVALUEUPDATE+0x104>
	  else {f_inputLeft_DB_bufferd -=p_Bufferd*diff1;}
 801aaa0:	4b2e      	ldr	r3, [pc, #184]	; (801ab5c <BUFFERVALUEUPDATE+0x7ec>)
 801aaa2:	ed93 6a00 	vldr	s12, [r3]
 801aaa6:	ee66 6a86 	vmul.f32	s13, s13, s12
 801aaaa:	ee37 7a66 	vsub.f32	s14, s14, s13
 801aaae:	4b2c      	ldr	r3, [pc, #176]	; (801ab60 <BUFFERVALUEUPDATE+0x7f0>)
 801aab0:	ed83 7a00 	vstr	s14, [r3]
 801aab4:	e4e7      	b.n	801a486 <BUFFERVALUEUPDATE+0x116>
	  if(diff2<0){diff2=(-1)*diff2;}
 801aab6:	eef1 6a66 	vneg.f32	s13, s13
 801aaba:	e4ef      	b.n	801a49c <BUFFERVALUEUPDATE+0x12c>
	  else {f_inputLeft_DB_MAXbufferd -=p_MAXBufferd*diff2;}
 801aabc:	4b29      	ldr	r3, [pc, #164]	; (801ab64 <BUFFERVALUEUPDATE+0x7f4>)
 801aabe:	edd3 7a00 	vldr	s15, [r3]
 801aac2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801aac6:	ee37 7a66 	vsub.f32	s14, s14, s13
 801aaca:	4b27      	ldr	r3, [pc, #156]	; (801ab68 <BUFFERVALUEUPDATE+0x7f8>)
 801aacc:	ed83 7a00 	vstr	s14, [r3]
 801aad0:	e4ed      	b.n	801a4ae <BUFFERVALUEUPDATE+0x13e>
	  if(diff3<0){diff3=(-1)*diff3;}
 801aad2:	eef1 6a66 	vneg.f32	s13, s13
 801aad6:	e4f8      	b.n	801a4ca <BUFFERVALUEUPDATE+0x15a>
	  else {f_inputRight_DB_bufferd -=p_Bufferd*diff3;}
 801aad8:	4b20      	ldr	r3, [pc, #128]	; (801ab5c <BUFFERVALUEUPDATE+0x7ec>)
 801aada:	ed93 6a00 	vldr	s12, [r3]
 801aade:	ee66 6a86 	vmul.f32	s13, s13, s12
 801aae2:	ee37 7a66 	vsub.f32	s14, s14, s13
 801aae6:	4b21      	ldr	r3, [pc, #132]	; (801ab6c <BUFFERVALUEUPDATE+0x7fc>)
 801aae8:	ed83 7a00 	vstr	s14, [r3]
 801aaec:	e4f6      	b.n	801a4dc <BUFFERVALUEUPDATE+0x16c>
	  if(diff4<0){diff4=(-1)*diff4;}
 801aaee:	eef1 6a66 	vneg.f32	s13, s13
 801aaf2:	e4fe      	b.n	801a4f2 <BUFFERVALUEUPDATE+0x182>
 801aaf4:	f3af 8000 	nop.w
 801aaf8:	47ae147b 	.word	0x47ae147b
 801aafc:	3f847ae1 	.word	0x3f847ae1
 801ab00:	d2f1a9fc 	.word	0xd2f1a9fc
 801ab04:	3f50624d 	.word	0x3f50624d
 801ab08:	2002fb70 	.word	0x2002fb70
 801ab0c:	2002f88c 	.word	0x2002f88c
 801ab10:	2002f89c 	.word	0x2002f89c
 801ab14:	2002fa58 	.word	0x2002fa58
 801ab18:	2002fb64 	.word	0x2002fb64
 801ab1c:	2002fa54 	.word	0x2002fa54
 801ab20:	2002fa48 	.word	0x2002fa48
 801ab24:	2002f3b0 	.word	0x2002f3b0
 801ab28:	2002f548 	.word	0x2002f548
 801ab2c:	2002f6f0 	.word	0x2002f6f0
 801ab30:	2002f550 	.word	0x2002f550
 801ab34:	2002f1a4 	.word	0x2002f1a4
 801ab38:	2002fdd4 	.word	0x2002fdd4
 801ab3c:	2002f8a0 	.word	0x2002f8a0
 801ab40:	2002fb6c 	.word	0x2002fb6c
 801ab44:	2002f18c 	.word	0x2002f18c
 801ab48:	2002f3a0 	.word	0x2002f3a0
 801ab4c:	2002f884 	.word	0x2002f884
 801ab50:	2002f3ac 	.word	0x2002f3ac
 801ab54:	2002f1a8 	.word	0x2002f1a8
 801ab58:	2002fa64 	.word	0x2002fa64
 801ab5c:	2002e5e0 	.word	0x2002e5e0
 801ab60:	2002f3a8 	.word	0x2002f3a8
 801ab64:	2002f170 	.word	0x2002f170
 801ab68:	2002f184 	.word	0x2002f184
 801ab6c:	2002fdd0 	.word	0x2002fdd0
	  else {f_inputRight_DB_MAXbufferd -=p_MAXBufferd*diff4;}
 801ab70:	4ba8      	ldr	r3, [pc, #672]	; (801ae14 <BUFFERVALUEUPDATE+0xaa4>)
 801ab72:	edd3 7a00 	vldr	s15, [r3]
 801ab76:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801ab7a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ab7e:	4ba6      	ldr	r3, [pc, #664]	; (801ae18 <BUFFERVALUEUPDATE+0xaa8>)
 801ab80:	ed83 7a00 	vstr	s14, [r3]
 801ab84:	e4be      	b.n	801a504 <BUFFERVALUEUPDATE+0x194>
	  if(diff5<0){diff5=(-1)*diff5;}
 801ab86:	eef1 6a66 	vneg.f32	s13, s13
 801ab8a:	e4c9      	b.n	801a520 <BUFFERVALUEUPDATE+0x1b0>
	  else {f_inputLeft_DB_RMS_bufferd -=p_Bufferd*diff5;}
 801ab8c:	4ba3      	ldr	r3, [pc, #652]	; (801ae1c <BUFFERVALUEUPDATE+0xaac>)
 801ab8e:	ed93 6a00 	vldr	s12, [r3]
 801ab92:	ee66 6a86 	vmul.f32	s13, s13, s12
 801ab96:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ab9a:	4ba1      	ldr	r3, [pc, #644]	; (801ae20 <BUFFERVALUEUPDATE+0xab0>)
 801ab9c:	ed83 7a00 	vstr	s14, [r3]
 801aba0:	e4c7      	b.n	801a532 <BUFFERVALUEUPDATE+0x1c2>
	  if(diff6<0){diff6=(-1)*diff6;}
 801aba2:	eef1 6a66 	vneg.f32	s13, s13
 801aba6:	e4cf      	b.n	801a548 <BUFFERVALUEUPDATE+0x1d8>
	  else {f_inputLeft_DB_RMS_MAXbufferd -=p_MAXBufferd*diff6;}
 801aba8:	4b9a      	ldr	r3, [pc, #616]	; (801ae14 <BUFFERVALUEUPDATE+0xaa4>)
 801abaa:	edd3 7a00 	vldr	s15, [r3]
 801abae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801abb2:	ee37 7a66 	vsub.f32	s14, s14, s13
 801abb6:	4b9b      	ldr	r3, [pc, #620]	; (801ae24 <BUFFERVALUEUPDATE+0xab4>)
 801abb8:	ed83 7a00 	vstr	s14, [r3]
 801abbc:	e4cd      	b.n	801a55a <BUFFERVALUEUPDATE+0x1ea>
	  if(diff7<0){diff7=(-1)*diff7;}
 801abbe:	eef1 6a66 	vneg.f32	s13, s13
 801abc2:	e4d8      	b.n	801a576 <BUFFERVALUEUPDATE+0x206>
	  else {f_inputRight_DB_RMS_bufferd -=p_Bufferd*diff7;}
 801abc4:	4b95      	ldr	r3, [pc, #596]	; (801ae1c <BUFFERVALUEUPDATE+0xaac>)
 801abc6:	ed93 6a00 	vldr	s12, [r3]
 801abca:	ee66 6a86 	vmul.f32	s13, s13, s12
 801abce:	ee37 7a66 	vsub.f32	s14, s14, s13
 801abd2:	4b95      	ldr	r3, [pc, #596]	; (801ae28 <BUFFERVALUEUPDATE+0xab8>)
 801abd4:	ed83 7a00 	vstr	s14, [r3]
 801abd8:	e4d6      	b.n	801a588 <BUFFERVALUEUPDATE+0x218>
	  if(diff8<0){diff8=(-1)*diff8;}
 801abda:	eef1 6a66 	vneg.f32	s13, s13
 801abde:	e4de      	b.n	801a59e <BUFFERVALUEUPDATE+0x22e>
	  else {f_inputRight_DB_RMS_MAXbufferd -=p_MAXBufferd*diff8;}
 801abe0:	4b8c      	ldr	r3, [pc, #560]	; (801ae14 <BUFFERVALUEUPDATE+0xaa4>)
 801abe2:	edd3 7a00 	vldr	s15, [r3]
 801abe6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801abea:	ee37 7a66 	vsub.f32	s14, s14, s13
 801abee:	4b8f      	ldr	r3, [pc, #572]	; (801ae2c <BUFFERVALUEUPDATE+0xabc>)
 801abf0:	ed83 7a00 	vstr	s14, [r3]
 801abf4:	e4dc      	b.n	801a5b0 <BUFFERVALUEUPDATE+0x240>
	  if(diff9<0){diff9=(-1)*diff9;}
 801abf6:	eef1 6a66 	vneg.f32	s13, s13
 801abfa:	e4e7      	b.n	801a5cc <BUFFERVALUEUPDATE+0x25c>
	  else {f_VCALeft_DB_bufferd -=p_Bufferd*diff9;}
 801abfc:	4b87      	ldr	r3, [pc, #540]	; (801ae1c <BUFFERVALUEUPDATE+0xaac>)
 801abfe:	ed93 6a00 	vldr	s12, [r3]
 801ac02:	ee66 6a86 	vmul.f32	s13, s13, s12
 801ac06:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ac0a:	4b89      	ldr	r3, [pc, #548]	; (801ae30 <BUFFERVALUEUPDATE+0xac0>)
 801ac0c:	ed83 7a00 	vstr	s14, [r3]
 801ac10:	e4e5      	b.n	801a5de <BUFFERVALUEUPDATE+0x26e>
	  if(diff10<0){diff10=(-1)*diff10;}
 801ac12:	eef1 6a66 	vneg.f32	s13, s13
 801ac16:	e4ed      	b.n	801a5f4 <BUFFERVALUEUPDATE+0x284>
	  else {f_VCALeft_DB_MAXbufferd -=p_MAXBufferd*diff10;}
 801ac18:	4b7e      	ldr	r3, [pc, #504]	; (801ae14 <BUFFERVALUEUPDATE+0xaa4>)
 801ac1a:	edd3 7a00 	vldr	s15, [r3]
 801ac1e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801ac22:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ac26:	4b83      	ldr	r3, [pc, #524]	; (801ae34 <BUFFERVALUEUPDATE+0xac4>)
 801ac28:	ed83 7a00 	vstr	s14, [r3]
 801ac2c:	e4eb      	b.n	801a606 <BUFFERVALUEUPDATE+0x296>
	  if(diff11<0){diff11=(-1)*diff11;}
 801ac2e:	eef1 6a66 	vneg.f32	s13, s13
 801ac32:	e4f6      	b.n	801a622 <BUFFERVALUEUPDATE+0x2b2>
	  else {f_VCARight_DB_bufferd -=p_Bufferd*diff11;}
 801ac34:	4b79      	ldr	r3, [pc, #484]	; (801ae1c <BUFFERVALUEUPDATE+0xaac>)
 801ac36:	ed93 6a00 	vldr	s12, [r3]
 801ac3a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801ac3e:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ac42:	4b7d      	ldr	r3, [pc, #500]	; (801ae38 <BUFFERVALUEUPDATE+0xac8>)
 801ac44:	ed83 7a00 	vstr	s14, [r3]
 801ac48:	e4f4      	b.n	801a634 <BUFFERVALUEUPDATE+0x2c4>
	  if(diff12<0){diff12=(-1)*diff12;}
 801ac4a:	eef1 6a66 	vneg.f32	s13, s13
 801ac4e:	e4fc      	b.n	801a64a <BUFFERVALUEUPDATE+0x2da>
	  else {f_VCARight_DB_MAXbufferd -=p_MAXBufferd*diff12;}
 801ac50:	4b70      	ldr	r3, [pc, #448]	; (801ae14 <BUFFERVALUEUPDATE+0xaa4>)
 801ac52:	edd3 7a00 	vldr	s15, [r3]
 801ac56:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801ac5a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ac5e:	4b77      	ldr	r3, [pc, #476]	; (801ae3c <BUFFERVALUEUPDATE+0xacc>)
 801ac60:	ed83 7a00 	vstr	s14, [r3]
 801ac64:	e4fa      	b.n	801a65c <BUFFERVALUEUPDATE+0x2ec>
	  if(diff13<0){diff13=(-1)*diff13;}
 801ac66:	eef1 6a66 	vneg.f32	s13, s13
 801ac6a:	e505      	b.n	801a678 <BUFFERVALUEUPDATE+0x308>
	  else {f_VCALeft_DB_RMS_bufferd -=p_Bufferd*diff13;}
 801ac6c:	4b6b      	ldr	r3, [pc, #428]	; (801ae1c <BUFFERVALUEUPDATE+0xaac>)
 801ac6e:	ed93 6a00 	vldr	s12, [r3]
 801ac72:	ee66 6a86 	vmul.f32	s13, s13, s12
 801ac76:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ac7a:	4b71      	ldr	r3, [pc, #452]	; (801ae40 <BUFFERVALUEUPDATE+0xad0>)
 801ac7c:	ed83 7a00 	vstr	s14, [r3]
 801ac80:	e503      	b.n	801a68a <BUFFERVALUEUPDATE+0x31a>
	  if(diff14<0){diff14=(-1)*diff14;}
 801ac82:	eef1 6a66 	vneg.f32	s13, s13
 801ac86:	e50b      	b.n	801a6a0 <BUFFERVALUEUPDATE+0x330>
	  else {f_VCALeft_DB_RMS_MAXbufferd -=p_MAXBufferd*diff14;}
 801ac88:	4b62      	ldr	r3, [pc, #392]	; (801ae14 <BUFFERVALUEUPDATE+0xaa4>)
 801ac8a:	edd3 7a00 	vldr	s15, [r3]
 801ac8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801ac92:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ac96:	4b6b      	ldr	r3, [pc, #428]	; (801ae44 <BUFFERVALUEUPDATE+0xad4>)
 801ac98:	ed83 7a00 	vstr	s14, [r3]
 801ac9c:	e509      	b.n	801a6b2 <BUFFERVALUEUPDATE+0x342>
	  if(diff15<0){diff15=(-1)*diff15;}
 801ac9e:	eef1 6a66 	vneg.f32	s13, s13
 801aca2:	e514      	b.n	801a6ce <BUFFERVALUEUPDATE+0x35e>
	  else {f_VCARight_DB_RMS_bufferd -=p_Bufferd*diff15;}
 801aca4:	4b5d      	ldr	r3, [pc, #372]	; (801ae1c <BUFFERVALUEUPDATE+0xaac>)
 801aca6:	ed93 6a00 	vldr	s12, [r3]
 801acaa:	ee66 6a86 	vmul.f32	s13, s13, s12
 801acae:	ee37 7a66 	vsub.f32	s14, s14, s13
 801acb2:	4b65      	ldr	r3, [pc, #404]	; (801ae48 <BUFFERVALUEUPDATE+0xad8>)
 801acb4:	ed83 7a00 	vstr	s14, [r3]
 801acb8:	e512      	b.n	801a6e0 <BUFFERVALUEUPDATE+0x370>
	  if(diff16<0){diff16=(-1)*diff16;}
 801acba:	eef1 6a66 	vneg.f32	s13, s13
 801acbe:	e565      	b.n	801a78c <BUFFERVALUEUPDATE+0x41c>
	  else {f_VCARight_DB_RMS_MAXbufferd -=p_MAXBufferd*diff16;}
 801acc0:	4b54      	ldr	r3, [pc, #336]	; (801ae14 <BUFFERVALUEUPDATE+0xaa4>)
 801acc2:	edd3 7a00 	vldr	s15, [r3]
 801acc6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801acca:	ee37 7a66 	vsub.f32	s14, s14, s13
 801acce:	4b5f      	ldr	r3, [pc, #380]	; (801ae4c <BUFFERVALUEUPDATE+0xadc>)
 801acd0:	ed83 7a00 	vstr	s14, [r3]
 801acd4:	e563      	b.n	801a79e <BUFFERVALUEUPDATE+0x42e>
	  if(diff<0){diff=(-1)*diff;}
 801acd6:	eef1 6a66 	vneg.f32	s13, s13
 801acda:	e56e      	b.n	801a7ba <BUFFERVALUEUPDATE+0x44a>
	  else {f_outputLeft_DB_bufferd -=p_Bufferd*diff;}
 801acdc:	4b4f      	ldr	r3, [pc, #316]	; (801ae1c <BUFFERVALUEUPDATE+0xaac>)
 801acde:	ed93 6a00 	vldr	s12, [r3]
 801ace2:	ee66 6a86 	vmul.f32	s13, s13, s12
 801ace6:	ee37 7a66 	vsub.f32	s14, s14, s13
 801acea:	4b59      	ldr	r3, [pc, #356]	; (801ae50 <BUFFERVALUEUPDATE+0xae0>)
 801acec:	ed83 7a00 	vstr	s14, [r3]
 801acf0:	e56c      	b.n	801a7cc <BUFFERVALUEUPDATE+0x45c>
	  if(diff<0){diff=(-1)*diff;}
 801acf2:	eef1 6a66 	vneg.f32	s13, s13
 801acf6:	e574      	b.n	801a7e2 <BUFFERVALUEUPDATE+0x472>
	  else {f_outputLeft_DB_MAXbufferd -=p_MAXBufferd*diff;}
 801acf8:	4b46      	ldr	r3, [pc, #280]	; (801ae14 <BUFFERVALUEUPDATE+0xaa4>)
 801acfa:	edd3 7a00 	vldr	s15, [r3]
 801acfe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801ad02:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ad06:	4b53      	ldr	r3, [pc, #332]	; (801ae54 <BUFFERVALUEUPDATE+0xae4>)
 801ad08:	ed83 7a00 	vstr	s14, [r3]
 801ad0c:	e572      	b.n	801a7f4 <BUFFERVALUEUPDATE+0x484>
	  if(diff<0){diff=(-1)*diff;}
 801ad0e:	eef1 6a66 	vneg.f32	s13, s13
 801ad12:	e57d      	b.n	801a810 <BUFFERVALUEUPDATE+0x4a0>
	  else {f_outputRight_DB_bufferd -=p_Bufferd*diff;}
 801ad14:	4b41      	ldr	r3, [pc, #260]	; (801ae1c <BUFFERVALUEUPDATE+0xaac>)
 801ad16:	ed93 6a00 	vldr	s12, [r3]
 801ad1a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801ad1e:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ad22:	4b4d      	ldr	r3, [pc, #308]	; (801ae58 <BUFFERVALUEUPDATE+0xae8>)
 801ad24:	ed83 7a00 	vstr	s14, [r3]
 801ad28:	e57b      	b.n	801a822 <BUFFERVALUEUPDATE+0x4b2>
	  if(diff<0){diff=(-1)*diff;}
 801ad2a:	eef1 6a66 	vneg.f32	s13, s13
 801ad2e:	e583      	b.n	801a838 <BUFFERVALUEUPDATE+0x4c8>
	  else {f_outputRight_DB_MAXbufferd -=p_MAXBufferd*diff;}
 801ad30:	4b38      	ldr	r3, [pc, #224]	; (801ae14 <BUFFERVALUEUPDATE+0xaa4>)
 801ad32:	edd3 7a00 	vldr	s15, [r3]
 801ad36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801ad3a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ad3e:	4b47      	ldr	r3, [pc, #284]	; (801ae5c <BUFFERVALUEUPDATE+0xaec>)
 801ad40:	ed83 7a00 	vstr	s14, [r3]
 801ad44:	e581      	b.n	801a84a <BUFFERVALUEUPDATE+0x4da>
	  if(diff<0){diff=(-1)*diff;}
 801ad46:	eef1 6a66 	vneg.f32	s13, s13
 801ad4a:	e58c      	b.n	801a866 <BUFFERVALUEUPDATE+0x4f6>
	  else {f_outputLeft_DB_RMS_bufferd -=p_Bufferd*diff;}
 801ad4c:	4b33      	ldr	r3, [pc, #204]	; (801ae1c <BUFFERVALUEUPDATE+0xaac>)
 801ad4e:	ed93 6a00 	vldr	s12, [r3]
 801ad52:	ee66 6a86 	vmul.f32	s13, s13, s12
 801ad56:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ad5a:	4b41      	ldr	r3, [pc, #260]	; (801ae60 <BUFFERVALUEUPDATE+0xaf0>)
 801ad5c:	ed83 7a00 	vstr	s14, [r3]
 801ad60:	e58a      	b.n	801a878 <BUFFERVALUEUPDATE+0x508>
	  if(diff<0){diff=(-1)*diff;}
 801ad62:	eef1 6a66 	vneg.f32	s13, s13
 801ad66:	e592      	b.n	801a88e <BUFFERVALUEUPDATE+0x51e>
	  else {f_outputLeft_DB_RMS_MAXbufferd -=p_MAXBufferd*diff;}
 801ad68:	4b2a      	ldr	r3, [pc, #168]	; (801ae14 <BUFFERVALUEUPDATE+0xaa4>)
 801ad6a:	edd3 7a00 	vldr	s15, [r3]
 801ad6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801ad72:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ad76:	4b3b      	ldr	r3, [pc, #236]	; (801ae64 <BUFFERVALUEUPDATE+0xaf4>)
 801ad78:	ed83 7a00 	vstr	s14, [r3]
 801ad7c:	e590      	b.n	801a8a0 <BUFFERVALUEUPDATE+0x530>
	  if(diff<0){diff=(-1)*diff;}
 801ad7e:	eef1 6a66 	vneg.f32	s13, s13
 801ad82:	e59b      	b.n	801a8bc <BUFFERVALUEUPDATE+0x54c>
	  else {f_outputRight_DB_RMS_bufferd -=p_Bufferd*diff;}
 801ad84:	4b25      	ldr	r3, [pc, #148]	; (801ae1c <BUFFERVALUEUPDATE+0xaac>)
 801ad86:	ed93 6a00 	vldr	s12, [r3]
 801ad8a:	ee66 6a86 	vmul.f32	s13, s13, s12
 801ad8e:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ad92:	4b35      	ldr	r3, [pc, #212]	; (801ae68 <BUFFERVALUEUPDATE+0xaf8>)
 801ad94:	ed83 7a00 	vstr	s14, [r3]
 801ad98:	e599      	b.n	801a8ce <BUFFERVALUEUPDATE+0x55e>
	  if(diff<0){diff=(-1)*diff;}
 801ad9a:	eef1 6a66 	vneg.f32	s13, s13
 801ad9e:	e5a1      	b.n	801a8e4 <BUFFERVALUEUPDATE+0x574>
	  else {f_outputRight_DB_RMS_MAXbufferd -=p_MAXBufferd*diff;}
 801ada0:	4b1c      	ldr	r3, [pc, #112]	; (801ae14 <BUFFERVALUEUPDATE+0xaa4>)
 801ada2:	edd3 7a00 	vldr	s15, [r3]
 801ada6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801adaa:	ee37 7a66 	vsub.f32	s14, s14, s13
 801adae:	4b2f      	ldr	r3, [pc, #188]	; (801ae6c <BUFFERVALUEUPDATE+0xafc>)
 801adb0:	ed83 7a00 	vstr	s14, [r3]
 801adb4:	e59f      	b.n	801a8f6 <BUFFERVALUEUPDATE+0x586>



		for(int i=0; i<50; i++){
			if (f_spectrumLeft_bufferd[i]<UARTDATA[i+50]){f_spectrumLeft_bufferd[i] = UARTDATA[i+50];}
			else {f_spectrumLeft_bufferd[i] -=p_Bufferd*(f_spectrumLeft_bufferd[i]-UARTDATA[i+50]);}
 801adb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801adba:	4a18      	ldr	r2, [pc, #96]	; (801ae1c <BUFFERVALUEUPDATE+0xaac>)
 801adbc:	edd2 6a00 	vldr	s13, [r2]
 801adc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801adc4:	4a2a      	ldr	r2, [pc, #168]	; (801ae70 <BUFFERVALUEUPDATE+0xb00>)
 801adc6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801adca:	ee77 7a67 	vsub.f32	s15, s14, s15
 801adce:	edc2 7a00 	vstr	s15, [r2]
		for(int i=0; i<50; i++){
 801add2:	3301      	adds	r3, #1
 801add4:	2b31      	cmp	r3, #49	; 0x31
 801add6:	dc19      	bgt.n	801ae0c <BUFFERVALUEUPDATE+0xa9c>
			if (f_spectrumLeft_bufferd[i]<UARTDATA[i+50]){f_spectrumLeft_bufferd[i] = UARTDATA[i+50];}
 801add8:	4a25      	ldr	r2, [pc, #148]	; (801ae70 <BUFFERVALUEUPDATE+0xb00>)
 801adda:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801adde:	ed92 7a00 	vldr	s14, [r2]
 801ade2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801ade6:	4923      	ldr	r1, [pc, #140]	; (801ae74 <BUFFERVALUEUPDATE+0xb04>)
 801ade8:	5c8a      	ldrb	r2, [r1, r2]
 801adea:	ee06 2a90 	vmov	s13, r2
 801adee:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 801adf2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801adf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adfa:	d5dc      	bpl.n	801adb6 <BUFFERVALUEUPDATE+0xa46>
 801adfc:	4a1c      	ldr	r2, [pc, #112]	; (801ae70 <BUFFERVALUEUPDATE+0xb00>)
 801adfe:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801ae02:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801ae06:	edc2 6a00 	vstr	s13, [r2]
 801ae0a:	e7e2      	b.n	801add2 <BUFFERVALUEUPDATE+0xa62>
		}
}
 801ae0c:	ecbd 8b02 	vpop	{d8}
 801ae10:	bd38      	pop	{r3, r4, r5, pc}
 801ae12:	bf00      	nop
 801ae14:	2002f170 	.word	0x2002f170
 801ae18:	2002f55c 	.word	0x2002f55c
 801ae1c:	2002e5e0 	.word	0x2002e5e0
 801ae20:	2002fb5c 	.word	0x2002fb5c
 801ae24:	2002f1a0 	.word	0x2002f1a0
 801ae28:	2002f19c 	.word	0x2002f19c
 801ae2c:	2002f888 	.word	0x2002f888
 801ae30:	2002fa78 	.word	0x2002fa78
 801ae34:	2002fb74 	.word	0x2002fb74
 801ae38:	2002fa50 	.word	0x2002fa50
 801ae3c:	2002fb48 	.word	0x2002fb48
 801ae40:	2002f554 	.word	0x2002f554
 801ae44:	2002f890 	.word	0x2002f890
 801ae48:	2002f39c 	.word	0x2002f39c
 801ae4c:	2002fb70 	.word	0x2002fb70
 801ae50:	2002f88c 	.word	0x2002f88c
 801ae54:	2002fa58 	.word	0x2002fa58
 801ae58:	2002fb64 	.word	0x2002fb64
 801ae5c:	2002fa48 	.word	0x2002fa48
 801ae60:	2002f3b0 	.word	0x2002f3b0
 801ae64:	2002f6f0 	.word	0x2002f6f0
 801ae68:	2002f550 	.word	0x2002f550
 801ae6c:	2002fdd4 	.word	0x2002fdd4
 801ae70:	2002fd08 	.word	0x2002fd08
 801ae74:	2002e80c 	.word	0x2002e80c

0801ae78 <GRAPHICS_MainTask>:
char checksum;
uint16_t checksum16;
int CheckSumOK = 0;


void GRAPHICS_MainTask(void) {
 801ae78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//GUI_Clear();
	//GUI_SetBkColor(GUI_DARKGRAY);

/////////////////////////////////////////////////////////////////////////
////////CREATION OF ALL WINDOWS//////////////////////////////////////////
	InfoWindow = CreateInfoWindow();
 801ae7a:	f000 fb8d 	bl	801b598 <CreateInfoWindow>
 801ae7e:	4ca0      	ldr	r4, [pc, #640]	; (801b100 <GRAPHICS_MainTask+0x288>)
 801ae80:	6020      	str	r0, [r4, #0]
	SettingsButtonWindow = CreateSettingsButtonWindow();
 801ae82:	f001 f987 	bl	801c194 <CreateSettingsButtonWindow>
 801ae86:	4b9f      	ldr	r3, [pc, #636]	; (801b104 <GRAPHICS_MainTask+0x28c>)
 801ae88:	6018      	str	r0, [r3, #0]
	IndicatorWindow1 = CreateIndicatorWindow1();
 801ae8a:	f002 fa5f 	bl	801d34c <CreateIndicatorWindow1>
 801ae8e:	4b9e      	ldr	r3, [pc, #632]	; (801b108 <GRAPHICS_MainTask+0x290>)
 801ae90:	6018      	str	r0, [r3, #0]
	IndicatorWindow2 = CreateIndicatorWindow2();
 801ae92:	f002 fadf 	bl	801d454 <CreateIndicatorWindow2>
 801ae96:	4b9d      	ldr	r3, [pc, #628]	; (801b10c <GRAPHICS_MainTask+0x294>)
 801ae98:	6018      	str	r0, [r3, #0]
	IndicatorWindow3 = CreateIndicatorWindow3();
 801ae9a:	f002 fb5f 	bl	801d55c <CreateIndicatorWindow3>
 801ae9e:	4b9c      	ldr	r3, [pc, #624]	; (801b110 <GRAPHICS_MainTask+0x298>)
 801aea0:	6018      	str	r0, [r3, #0]

	Enc_InputWindow = CreateEnc_InputWindow();
 801aea2:	f001 fcff 	bl	801c8a4 <CreateEnc_InputWindow>
 801aea6:	4b9b      	ldr	r3, [pc, #620]	; (801b114 <GRAPHICS_MainTask+0x29c>)
 801aea8:	6018      	str	r0, [r3, #0]
	Enc_AttackWindow = CreateEnc_AttackWindow();
 801aeaa:	f001 faa3 	bl	801c3f4 <CreateEnc_AttackWindow>
 801aeae:	4b9a      	ldr	r3, [pc, #616]	; (801b118 <GRAPHICS_MainTask+0x2a0>)
 801aeb0:	6018      	str	r0, [r3, #0]
	Enc_OutputWindow = CreateEnc_OutputWindow();
 801aeb2:	f001 ff53 	bl	801cd5c <CreateEnc_OutputWindow>
 801aeb6:	4b99      	ldr	r3, [pc, #612]	; (801b11c <GRAPHICS_MainTask+0x2a4>)
 801aeb8:	6018      	str	r0, [r3, #0]
	Enc_DistortionWindow = CreateEnc_DistortionWindow();
 801aeba:	f001 fbc7 	bl	801c64c <CreateEnc_DistortionWindow>
 801aebe:	4b98      	ldr	r3, [pc, #608]	; (801b120 <GRAPHICS_MainTask+0x2a8>)
 801aec0:	6018      	str	r0, [r3, #0]
	Enc_MakeUpGainWindow = CreateEnc_MakeUpGainWindow();
 801aec2:	f001 fe1f 	bl	801cb04 <CreateEnc_MakeUpGainWindow>
 801aec6:	4b97      	ldr	r3, [pc, #604]	; (801b124 <GRAPHICS_MainTask+0x2ac>)
 801aec8:	6018      	str	r0, [r3, #0]
	Enc_RatioWindow = CreateEnc_RatioWindow();
 801aeca:	f002 f875 	bl	801cfb8 <CreateEnc_RatioWindow>
 801aece:	4b96      	ldr	r3, [pc, #600]	; (801b128 <GRAPHICS_MainTask+0x2b0>)
 801aed0:	6018      	str	r0, [r3, #0]
	Enc_ReleaseWindow = CreateEnc_ReleaseWindow();
 801aed2:	f002 f9a1 	bl	801d218 <CreateEnc_ReleaseWindow>
 801aed6:	4b95      	ldr	r3, [pc, #596]	; (801b12c <GRAPHICS_MainTask+0x2b4>)
 801aed8:	6018      	str	r0, [r3, #0]

	MainWindow = CreateMainWindow();
 801aeda:	f000 feb7 	bl	801bc4c <CreateMainWindow>
 801aede:	4b94      	ldr	r3, [pc, #592]	; (801b130 <GRAPHICS_MainTask+0x2b8>)
 801aee0:	6018      	str	r0, [r3, #0]

////////////////////////////////////////////////////////////////////////
///////////Show InfoWindow on Startup///////////////////////////////////
	WM_ShowWindow (InfoWindow);
 801aee2:	6820      	ldr	r0, [r4, #0]
 801aee4:	f00e fa52 	bl	802938c <WM_ShowWindow>
////////////////////////////////////////////////////////////////////////

	int timer = 0;

	HAL_TIM_Base_Start(&htim1);
 801aee8:	4892      	ldr	r0, [pc, #584]	; (801b134 <GRAPHICS_MainTask+0x2bc>)
 801aeea:	f7fb ff48 	bl	8016d7e <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 801aeee:	4892      	ldr	r0, [pc, #584]	; (801b138 <GRAPHICS_MainTask+0x2c0>)
 801aef0:	f7fb ff45 	bl	8016d7e <HAL_TIM_Base_Start>

	strcpy( gain.name, "input");
 801aef4:	4b91      	ldr	r3, [pc, #580]	; (801b13c <GRAPHICS_MainTask+0x2c4>)
 801aef6:	4a92      	ldr	r2, [pc, #584]	; (801b140 <GRAPHICS_MainTask+0x2c8>)
 801aef8:	e892 0003 	ldmia.w	r2, {r0, r1}
 801aefc:	6018      	str	r0, [r3, #0]
 801aefe:	8099      	strh	r1, [r3, #4]
	input.value = 0;
 801af00:	4b90      	ldr	r3, [pc, #576]	; (801b144 <GRAPHICS_MainTask+0x2cc>)
 801af02:	2400      	movs	r4, #0
 801af04:	601c      	str	r4, [r3, #0]
	input.Color = GUI_LIGHTGREEN;
 801af06:	f06f 127f 	mvn.w	r2, #8323199	; 0x7f007f
 801af0a:	625a      	str	r2, [r3, #36]	; 0x24
	input.assignedPot = 1;
 801af0c:	2101      	movs	r1, #1
 801af0e:	6199      	str	r1, [r3, #24]
	Encoder1.Color = GUI_LIGHTGREEN;
 801af10:	4b8d      	ldr	r3, [pc, #564]	; (801b148 <GRAPHICS_MainTask+0x2d0>)
 801af12:	611a      	str	r2, [r3, #16]

	strcpy( attack.name, "attack");
 801af14:	4b8d      	ldr	r3, [pc, #564]	; (801b14c <GRAPHICS_MainTask+0x2d4>)
 801af16:	4a8e      	ldr	r2, [pc, #568]	; (801b150 <GRAPHICS_MainTask+0x2d8>)
 801af18:	e892 0003 	ldmia.w	r2, {r0, r1}
 801af1c:	6018      	str	r0, [r3, #0]
 801af1e:	8099      	strh	r1, [r3, #4]
 801af20:	0c09      	lsrs	r1, r1, #16
 801af22:	7199      	strb	r1, [r3, #6]
	attack.value = 0;
 801af24:	1f1a      	subs	r2, r3, #4
 801af26:	f843 4c04 	str.w	r4, [r3, #-4]
	attack.Color = GUI_LIGHTGRAY;
 801af2a:	4e8a      	ldr	r6, [pc, #552]	; (801b154 <GRAPHICS_MainTask+0x2dc>)
 801af2c:	621e      	str	r6, [r3, #32]
	attack.assignedPot = 0;
 801af2e:	2300      	movs	r3, #0
 801af30:	6193      	str	r3, [r2, #24]

	strcpy( makeUpGain.name, "makeUpGain");
 801af32:	4f89      	ldr	r7, [pc, #548]	; (801b158 <GRAPHICS_MainTask+0x2e0>)
 801af34:	4a89      	ldr	r2, [pc, #548]	; (801b15c <GRAPHICS_MainTask+0x2e4>)
 801af36:	463d      	mov	r5, r7
 801af38:	ca07      	ldmia	r2, {r0, r1, r2}
 801af3a:	c503      	stmia	r5!, {r0, r1}
 801af3c:	f825 2b02 	strh.w	r2, [r5], #2
 801af40:	0c12      	lsrs	r2, r2, #16
 801af42:	702a      	strb	r2, [r5, #0]
	makeUpGain.value = 0;
 801af44:	f847 4c04 	str.w	r4, [r7, #-4]
	makeUpGain.Color = GUI_MAGENTA;
 801af48:	f46f 427f 	mvn.w	r2, #65280	; 0xff00
 801af4c:	623a      	str	r2, [r7, #32]
	makeUpGain.assignedPot = 3 ;
 801af4e:	2003      	movs	r0, #3
 801af50:	6178      	str	r0, [r7, #20]
	Encoder3.Color = GUI_MAGENTA;
 801af52:	4983      	ldr	r1, [pc, #524]	; (801b160 <GRAPHICS_MainTask+0x2e8>)
 801af54:	610a      	str	r2, [r1, #16]

	strcpy( release.name, "release");
 801af56:	4a83      	ldr	r2, [pc, #524]	; (801b164 <GRAPHICS_MainTask+0x2ec>)
 801af58:	4983      	ldr	r1, [pc, #524]	; (801b168 <GRAPHICS_MainTask+0x2f0>)
 801af5a:	c903      	ldmia	r1, {r0, r1}
 801af5c:	e882 0003 	stmia.w	r2, {r0, r1}
	release.value = 0;
 801af60:	1f11      	subs	r1, r2, #4
 801af62:	f842 4c04 	str.w	r4, [r2, #-4]
	release.Color = GUI_CYAN;
 801af66:	f46f 027f 	mvn.w	r2, #16711680	; 0xff0000
 801af6a:	624a      	str	r2, [r1, #36]	; 0x24
	release.assignedPot = 2;
 801af6c:	2002      	movs	r0, #2
 801af6e:	6188      	str	r0, [r1, #24]
	Encoder2.Color = GUI_CYAN;
 801af70:	497e      	ldr	r1, [pc, #504]	; (801b16c <GRAPHICS_MainTask+0x2f4>)
 801af72:	610a      	str	r2, [r1, #16]

	strcpy( ratio.name, "ratio");
 801af74:	4a7e      	ldr	r2, [pc, #504]	; (801b170 <GRAPHICS_MainTask+0x2f8>)
 801af76:	497f      	ldr	r1, [pc, #508]	; (801b174 <GRAPHICS_MainTask+0x2fc>)
 801af78:	c903      	ldmia	r1, {r0, r1}
 801af7a:	6010      	str	r0, [r2, #0]
 801af7c:	8091      	strh	r1, [r2, #4]
	ratio.value = 0;
 801af7e:	1f11      	subs	r1, r2, #4
 801af80:	f842 4c04 	str.w	r4, [r2, #-4]
	ratio.Color = GUI_ORANGE;
 801af84:	4a7c      	ldr	r2, [pc, #496]	; (801b178 <GRAPHICS_MainTask+0x300>)
 801af86:	624a      	str	r2, [r1, #36]	; 0x24
	ratio.assignedPot = 4;
 801af88:	2004      	movs	r0, #4
 801af8a:	6188      	str	r0, [r1, #24]
	Encoder4.Color = GUI_ORANGE;
 801af8c:	497b      	ldr	r1, [pc, #492]	; (801b17c <GRAPHICS_MainTask+0x304>)
 801af8e:	610a      	str	r2, [r1, #16]

	strcpy( distortion.name, "distortion");
 801af90:	4f7b      	ldr	r7, [pc, #492]	; (801b180 <GRAPHICS_MainTask+0x308>)
 801af92:	4a7c      	ldr	r2, [pc, #496]	; (801b184 <GRAPHICS_MainTask+0x30c>)
 801af94:	463d      	mov	r5, r7
 801af96:	ca07      	ldmia	r2, {r0, r1, r2}
 801af98:	c503      	stmia	r5!, {r0, r1}
 801af9a:	f825 2b02 	strh.w	r2, [r5], #2
 801af9e:	0c12      	lsrs	r2, r2, #16
 801afa0:	702a      	strb	r2, [r5, #0]
	distortion.value = 0;
 801afa2:	f847 4c04 	str.w	r4, [r7, #-4]
	distortion.Color = GUI_LIGHTGRAY;
 801afa6:	623e      	str	r6, [r7, #32]
	distortion.assignedPot = 0;
 801afa8:	617b      	str	r3, [r7, #20]

	strcpy( threshold.name, "threshold");
 801afaa:	4f77      	ldr	r7, [pc, #476]	; (801b188 <GRAPHICS_MainTask+0x310>)
 801afac:	4a77      	ldr	r2, [pc, #476]	; (801b18c <GRAPHICS_MainTask+0x314>)
 801afae:	463d      	mov	r5, r7
 801afb0:	ca07      	ldmia	r2, {r0, r1, r2}
 801afb2:	c503      	stmia	r5!, {r0, r1}
 801afb4:	802a      	strh	r2, [r5, #0]
	threshold.value = 0;
 801afb6:	f847 4c04 	str.w	r4, [r7, #-4]
	threshold.Color = GUI_LIGHTGRAY;
 801afba:	623e      	str	r6, [r7, #32]
	threshold.assignedPot = 0;
 801afbc:	617b      	str	r3, [r7, #20]

	strcpy( outputgain.name, "outgain");
 801afbe:	4a74      	ldr	r2, [pc, #464]	; (801b190 <GRAPHICS_MainTask+0x318>)
 801afc0:	4974      	ldr	r1, [pc, #464]	; (801b194 <GRAPHICS_MainTask+0x31c>)
 801afc2:	c903      	ldmia	r1, {r0, r1}
 801afc4:	e882 0003 	stmia.w	r2, {r0, r1}
	outputgain.value = 0;
 801afc8:	f842 4c04 	str.w	r4, [r2, #-4]
	outputgain.Color = GUI_LIGHTGRAY;
 801afcc:	6216      	str	r6, [r2, #32]
	outputgain.assignedPot = 0;
 801afce:	6153      	str	r3, [r2, #20]
	int timer = 0;
 801afd0:	461c      	mov	r4, r3
 801afd2:	e052      	b.n	801b07a <GRAPHICS_MainTask+0x202>


	  reset = 1; //Reset Input Buffer collection

	  for (int i=0; i<100;i++){
		  UART_TRANSFER[i]=0x00;
 801afd4:	4a70      	ldr	r2, [pc, #448]	; (801b198 <GRAPHICS_MainTask+0x320>)
 801afd6:	2100      	movs	r1, #0
 801afd8:	54d1      	strb	r1, [r2, r3]
	  for (int i=0; i<100;i++){
 801afda:	3301      	adds	r3, #1
 801afdc:	2b63      	cmp	r3, #99	; 0x63
 801afde:	ddf9      	ble.n	801afd4 <GRAPHICS_MainTask+0x15c>
	  }


      UART_TRANSFER[0]='#';
 801afe0:	4b6d      	ldr	r3, [pc, #436]	; (801b198 <GRAPHICS_MainTask+0x320>)
 801afe2:	2223      	movs	r2, #35	; 0x23
 801afe4:	701a      	strb	r2, [r3, #0]
      UART_TRANSFER[1]='s';
 801afe6:	2273      	movs	r2, #115	; 0x73
 801afe8:	705a      	strb	r2, [r3, #1]
      UART_TRANSFER[2]='t';
 801afea:	2274      	movs	r2, #116	; 0x74
 801afec:	709a      	strb	r2, [r3, #2]
      UART_TRANSFER[3]='a';
 801afee:	2261      	movs	r2, #97	; 0x61
 801aff0:	70da      	strb	r2, [r3, #3]
      UART_TRANSFER[4]=0xFF;//0
 801aff2:	22ff      	movs	r2, #255	; 0xff
 801aff4:	711a      	strb	r2, [r3, #4]
      UART_TRANSFER[5]=0x00;
 801aff6:	2100      	movs	r1, #0
 801aff8:	7159      	strb	r1, [r3, #5]
      UART_TRANSFER[6]=pots[1];//2
 801affa:	4a68      	ldr	r2, [pc, #416]	; (801b19c <GRAPHICS_MainTask+0x324>)
 801affc:	6850      	ldr	r0, [r2, #4]
 801affe:	7198      	strb	r0, [r3, #6]
      UART_TRANSFER[7]=pots[2];//3
 801b000:	6890      	ldr	r0, [r2, #8]
 801b002:	71d8      	strb	r0, [r3, #7]
      UART_TRANSFER[8]=pots[3];//4
 801b004:	68d0      	ldr	r0, [r2, #12]
 801b006:	7218      	strb	r0, [r3, #8]
      UART_TRANSFER[9]=pots[4];//5
 801b008:	6912      	ldr	r2, [r2, #16]
 801b00a:	725a      	strb	r2, [r3, #9]
      UART_TRANSFER[10]=Button_okState;
 801b00c:	4a64      	ldr	r2, [pc, #400]	; (801b1a0 <GRAPHICS_MainTask+0x328>)
 801b00e:	6812      	ldr	r2, [r2, #0]
 801b010:	729a      	strb	r2, [r3, #10]
      UART_TRANSFER[11]=0x00;
 801b012:	72d9      	strb	r1, [r3, #11]
      UART_TRANSFER[12]=0x02;//8
 801b014:	2202      	movs	r2, #2
 801b016:	731a      	strb	r2, [r3, #12]
	  UART_TRANSFER[13]=0x03;//9
 801b018:	2203      	movs	r2, #3
 801b01a:	735a      	strb	r2, [r3, #13]

///////////////INFO-WINDOW SHOW HANDLER//////////////////////////////
	    if(TouchDetected){touch++;}
 801b01c:	4b61      	ldr	r3, [pc, #388]	; (801b1a4 <GRAPHICS_MainTask+0x32c>)
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	2b00      	cmp	r3, #0
 801b022:	d02f      	beq.n	801b084 <GRAPHICS_MainTask+0x20c>
 801b024:	4a60      	ldr	r2, [pc, #384]	; (801b1a8 <GRAPHICS_MainTask+0x330>)
 801b026:	6813      	ldr	r3, [r2, #0]
 801b028:	3301      	adds	r3, #1
 801b02a:	6013      	str	r3, [r2, #0]
	    else{touch=0;}




	    if (touch>50){
 801b02c:	4b5e      	ldr	r3, [pc, #376]	; (801b1a8 <GRAPHICS_MainTask+0x330>)
 801b02e:	681b      	ldr	r3, [r3, #0]
 801b030:	2b32      	cmp	r3, #50	; 0x32
 801b032:	dc2b      	bgt.n	801b08c <GRAPHICS_MainTask+0x214>
	    	WM_ShowWindow(InfoWindow);
	    	touch = 0;
	    	timer = 0;
	    }

	    if (timer==50){
 801b034:	2c32      	cmp	r4, #50	; 0x32
 801b036:	f000 80c9 	beq.w	801b1cc <GRAPHICS_MainTask+0x354>
	    	WM_HideWindow(InfoWindow);


	    }

	    timer++;
 801b03a:	3401      	adds	r4, #1



	    if (UARTDATA[70] == 1){
 801b03c:	4b5b      	ldr	r3, [pc, #364]	; (801b1ac <GRAPHICS_MainTask+0x334>)
 801b03e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801b042:	2b01      	cmp	r3, #1
 801b044:	f000 80f9 	beq.w	801b23a <GRAPHICS_MainTask+0x3c2>
	    	HAL_Delay(1);

	    }

///////////////////////////////////////////////////////////////////
	    p_Bufferd = 0.01;
 801b048:	4b59      	ldr	r3, [pc, #356]	; (801b1b0 <GRAPHICS_MainTask+0x338>)
 801b04a:	4a5a      	ldr	r2, [pc, #360]	; (801b1b4 <GRAPHICS_MainTask+0x33c>)
 801b04c:	601a      	str	r2, [r3, #0]
	    p_MAXBufferd = 0.001;
 801b04e:	4b5a      	ldr	r3, [pc, #360]	; (801b1b8 <GRAPHICS_MainTask+0x340>)
 801b050:	4a5a      	ldr	r2, [pc, #360]	; (801b1bc <GRAPHICS_MainTask+0x344>)
 801b052:	601a      	str	r2, [r3, #0]

///////////////////ALWAYS Update Main Window///////////////////////
	   WM_Invalidate(MainWindow);
 801b054:	4d36      	ldr	r5, [pc, #216]	; (801b130 <GRAPHICS_MainTask+0x2b8>)
 801b056:	6828      	ldr	r0, [r5, #0]
 801b058:	f00c fc4e 	bl	80278f8 <WM_InvalidateWindow>
	   WM_SendMessageNoPara(MainWindow, WM_Paint);
 801b05c:	4958      	ldr	r1, [pc, #352]	; (801b1c0 <GRAPHICS_MainTask+0x348>)
 801b05e:	6828      	ldr	r0, [r5, #0]
 801b060:	f00d ffa8 	bl	8028fb4 <WM_SendMessageNoPara>

	   UARTSENDER();
 801b064:	f7f7 f9ee 	bl	8012444 <UARTSENDER>

	   GUI_Delay(1);
 801b068:	2001      	movs	r0, #1
 801b06a:	f006 fc09 	bl	8021880 <GUI_Delay>
	   HAL_UART_DMAResume(&huart6);
 801b06e:	4855      	ldr	r0, [pc, #340]	; (801b1c4 <GRAPHICS_MainTask+0x34c>)
 801b070:	f7fc facc 	bl	801760c <HAL_UART_DMAResume>
	   GUI_SetTimeSlice(1);
 801b074:	2001      	movs	r0, #1
 801b076:	f006 fbfd 	bl	8021874 <GUI_SetTimeSlice>
	  reset = 1; //Reset Input Buffer collection
 801b07a:	4b53      	ldr	r3, [pc, #332]	; (801b1c8 <GRAPHICS_MainTask+0x350>)
 801b07c:	2201      	movs	r2, #1
 801b07e:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<100;i++){
 801b080:	2300      	movs	r3, #0
 801b082:	e7ab      	b.n	801afdc <GRAPHICS_MainTask+0x164>
	    else{touch=0;}
 801b084:	4b48      	ldr	r3, [pc, #288]	; (801b1a8 <GRAPHICS_MainTask+0x330>)
 801b086:	2200      	movs	r2, #0
 801b088:	601a      	str	r2, [r3, #0]
 801b08a:	e7cf      	b.n	801b02c <GRAPHICS_MainTask+0x1b4>
	    	GUI_Clear();
 801b08c:	f005 fa66 	bl	802055c <GUI_Clear>
	    	GUI_SetBkColor(GUI_WHITE);
 801b090:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b094:	f005 f952 	bl	802033c <GUI_SetBkColor>
	    	WM_HideWindow (IndicatorWindow1);
 801b098:	4b1b      	ldr	r3, [pc, #108]	; (801b108 <GRAPHICS_MainTask+0x290>)
 801b09a:	6818      	ldr	r0, [r3, #0]
 801b09c:	f00d fbcc 	bl	8028838 <WM_HideWindow>
	    	WM_HideWindow (IndicatorWindow2);
 801b0a0:	4b1a      	ldr	r3, [pc, #104]	; (801b10c <GRAPHICS_MainTask+0x294>)
 801b0a2:	6818      	ldr	r0, [r3, #0]
 801b0a4:	f00d fbc8 	bl	8028838 <WM_HideWindow>
	    	WM_HideWindow (IndicatorWindow3);
 801b0a8:	4b19      	ldr	r3, [pc, #100]	; (801b110 <GRAPHICS_MainTask+0x298>)
 801b0aa:	6818      	ldr	r0, [r3, #0]
 801b0ac:	f00d fbc4 	bl	8028838 <WM_HideWindow>
	    	WM_HideWindow (SettingsButtonWindow);
 801b0b0:	4b14      	ldr	r3, [pc, #80]	; (801b104 <GRAPHICS_MainTask+0x28c>)
 801b0b2:	6818      	ldr	r0, [r3, #0]
 801b0b4:	f00d fbc0 	bl	8028838 <WM_HideWindow>
	    	WM_HideWindow(Enc_InputWindow);
 801b0b8:	4b16      	ldr	r3, [pc, #88]	; (801b114 <GRAPHICS_MainTask+0x29c>)
 801b0ba:	6818      	ldr	r0, [r3, #0]
 801b0bc:	f00d fbbc 	bl	8028838 <WM_HideWindow>
	    	WM_HideWindow(Enc_AttackWindow);
 801b0c0:	4b15      	ldr	r3, [pc, #84]	; (801b118 <GRAPHICS_MainTask+0x2a0>)
 801b0c2:	6818      	ldr	r0, [r3, #0]
 801b0c4:	f00d fbb8 	bl	8028838 <WM_HideWindow>
	    	WM_HideWindow(Enc_ReleaseWindow);
 801b0c8:	4b18      	ldr	r3, [pc, #96]	; (801b12c <GRAPHICS_MainTask+0x2b4>)
 801b0ca:	6818      	ldr	r0, [r3, #0]
 801b0cc:	f00d fbb4 	bl	8028838 <WM_HideWindow>
	    	WM_HideWindow(Enc_OutputWindow);
 801b0d0:	4b12      	ldr	r3, [pc, #72]	; (801b11c <GRAPHICS_MainTask+0x2a4>)
 801b0d2:	6818      	ldr	r0, [r3, #0]
 801b0d4:	f00d fbb0 	bl	8028838 <WM_HideWindow>
	    	WM_HideWindow(Enc_DistortionWindow);
 801b0d8:	4b11      	ldr	r3, [pc, #68]	; (801b120 <GRAPHICS_MainTask+0x2a8>)
 801b0da:	6818      	ldr	r0, [r3, #0]
 801b0dc:	f00d fbac 	bl	8028838 <WM_HideWindow>
	    	WM_HideWindow(Enc_MakeUpGainWindow);
 801b0e0:	4b10      	ldr	r3, [pc, #64]	; (801b124 <GRAPHICS_MainTask+0x2ac>)
 801b0e2:	6818      	ldr	r0, [r3, #0]
 801b0e4:	f00d fba8 	bl	8028838 <WM_HideWindow>
	    	WM_HideWindow(Enc_RatioWindow);
 801b0e8:	4b0f      	ldr	r3, [pc, #60]	; (801b128 <GRAPHICS_MainTask+0x2b0>)
 801b0ea:	6818      	ldr	r0, [r3, #0]
 801b0ec:	f00d fba4 	bl	8028838 <WM_HideWindow>
	    	WM_ShowWindow(InfoWindow);
 801b0f0:	4b03      	ldr	r3, [pc, #12]	; (801b100 <GRAPHICS_MainTask+0x288>)
 801b0f2:	6818      	ldr	r0, [r3, #0]
 801b0f4:	f00e f94a 	bl	802938c <WM_ShowWindow>
	    	touch = 0;
 801b0f8:	2400      	movs	r4, #0
 801b0fa:	4a2b      	ldr	r2, [pc, #172]	; (801b1a8 <GRAPHICS_MainTask+0x330>)
 801b0fc:	6014      	str	r4, [r2, #0]
 801b0fe:	e79c      	b.n	801b03a <GRAPHICS_MainTask+0x1c2>
 801b100:	2002e638 	.word	0x2002e638
 801b104:	2002e5d4 	.word	0x2002e5d4
 801b108:	2002e554 	.word	0x2002e554
 801b10c:	2002e558 	.word	0x2002e558
 801b110:	2002e708 	.word	0x2002e708
 801b114:	2002e724 	.word	0x2002e724
 801b118:	2002ef0c 	.word	0x2002ef0c
 801b11c:	2002e55c 	.word	0x2002e55c
 801b120:	2002ee28 	.word	0x2002ee28
 801b124:	2002e8d4 	.word	0x2002e8d4
 801b128:	2002e5d8 	.word	0x2002e5d8
 801b12c:	2002f178 	.word	0x2002f178
 801b130:	2002e9c8 	.word	0x2002e9c8
 801b134:	2002ffd4 	.word	0x2002ffd4
 801b138:	2002fe3c 	.word	0x2002fe3c
 801b13c:	2002ed64 	.word	0x2002ed64
 801b140:	08042920 	.word	0x08042920
 801b144:	2002e5e4 	.word	0x2002e5e4
 801b148:	2002eef4 	.word	0x2002eef4
 801b14c:	2002e614 	.word	0x2002e614
 801b150:	08042928 	.word	0x08042928
 801b154:	ffd3d3d3 	.word	0xffd3d3d3
 801b158:	2002e530 	.word	0x2002e530
 801b15c:	08042930 	.word	0x08042930
 801b160:	2002e560 	.word	0x2002e560
 801b164:	2002e8dc 	.word	0x2002e8dc
 801b168:	0804293c 	.word	0x0804293c
 801b16c:	2002ed4c 	.word	0x2002ed4c
 801b170:	2002ed28 	.word	0x2002ed28
 801b174:	08042944 	.word	0x08042944
 801b178:	ffffa500 	.word	0xffffa500
 801b17c:	2002e70c 	.word	0x2002e70c
 801b180:	2002eb68 	.word	0x2002eb68
 801b184:	0804294c 	.word	0x0804294c
 801b188:	2002e57c 	.word	0x2002e57c
 801b18c:	08042958 	.word	0x08042958
 801b190:	2002e5a8 	.word	0x2002e5a8
 801b194:	08042964 	.word	0x08042964
 801b198:	2002ed90 	.word	0x2002ed90
 801b19c:	2002e7f0 	.word	0x2002e7f0
 801b1a0:	2002ef08 	.word	0x2002ef08
 801b1a4:	2002e5d0 	.word	0x2002e5d0
 801b1a8:	2002e5a0 	.word	0x2002e5a0
 801b1ac:	2002e80c 	.word	0x2002e80c
 801b1b0:	2002e5e0 	.word	0x2002e5e0
 801b1b4:	3c23d70a 	.word	0x3c23d70a
 801b1b8:	2002f170 	.word	0x2002f170
 801b1bc:	3a83126f 	.word	0x3a83126f
 801b1c0:	08028f65 	.word	0x08028f65
 801b1c4:	20030098 	.word	0x20030098
 801b1c8:	2002e5cc 	.word	0x2002e5cc
	    	GUI_Clear();
 801b1cc:	f005 f9c6 	bl	802055c <GUI_Clear>
	    	GUI_SetBkColor(GUI_BLACK);
 801b1d0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801b1d4:	f005 f8b2 	bl	802033c <GUI_SetBkColor>
	    	WM_ShowWindow(SettingsButtonWindow);
 801b1d8:	4b1e      	ldr	r3, [pc, #120]	; (801b254 <GRAPHICS_MainTask+0x3dc>)
 801b1da:	6818      	ldr	r0, [r3, #0]
 801b1dc:	f00e f8d6 	bl	802938c <WM_ShowWindow>
	    	WM_ShowWindow(IndicatorWindow1);
 801b1e0:	4b1d      	ldr	r3, [pc, #116]	; (801b258 <GRAPHICS_MainTask+0x3e0>)
 801b1e2:	6818      	ldr	r0, [r3, #0]
 801b1e4:	f00e f8d2 	bl	802938c <WM_ShowWindow>
	    	WM_ShowWindow(IndicatorWindow2);
 801b1e8:	4b1c      	ldr	r3, [pc, #112]	; (801b25c <GRAPHICS_MainTask+0x3e4>)
 801b1ea:	6818      	ldr	r0, [r3, #0]
 801b1ec:	f00e f8ce 	bl	802938c <WM_ShowWindow>
	    	WM_ShowWindow(IndicatorWindow3);
 801b1f0:	4b1b      	ldr	r3, [pc, #108]	; (801b260 <GRAPHICS_MainTask+0x3e8>)
 801b1f2:	6818      	ldr	r0, [r3, #0]
 801b1f4:	f00e f8ca 	bl	802938c <WM_ShowWindow>
	    	WM_ShowWindow(Enc_InputWindow);
 801b1f8:	4b1a      	ldr	r3, [pc, #104]	; (801b264 <GRAPHICS_MainTask+0x3ec>)
 801b1fa:	6818      	ldr	r0, [r3, #0]
 801b1fc:	f00e f8c6 	bl	802938c <WM_ShowWindow>
	    	WM_ShowWindow(Enc_AttackWindow);
 801b200:	4b19      	ldr	r3, [pc, #100]	; (801b268 <GRAPHICS_MainTask+0x3f0>)
 801b202:	6818      	ldr	r0, [r3, #0]
 801b204:	f00e f8c2 	bl	802938c <WM_ShowWindow>
	    	WM_ShowWindow(Enc_OutputWindow);
 801b208:	4b18      	ldr	r3, [pc, #96]	; (801b26c <GRAPHICS_MainTask+0x3f4>)
 801b20a:	6818      	ldr	r0, [r3, #0]
 801b20c:	f00e f8be 	bl	802938c <WM_ShowWindow>
	    	WM_ShowWindow(Enc_DistortionWindow);
 801b210:	4b17      	ldr	r3, [pc, #92]	; (801b270 <GRAPHICS_MainTask+0x3f8>)
 801b212:	6818      	ldr	r0, [r3, #0]
 801b214:	f00e f8ba 	bl	802938c <WM_ShowWindow>
	    	WM_ShowWindow(Enc_MakeUpGainWindow);
 801b218:	4b16      	ldr	r3, [pc, #88]	; (801b274 <GRAPHICS_MainTask+0x3fc>)
 801b21a:	6818      	ldr	r0, [r3, #0]
 801b21c:	f00e f8b6 	bl	802938c <WM_ShowWindow>
	    	WM_ShowWindow(Enc_RatioWindow);
 801b220:	4b15      	ldr	r3, [pc, #84]	; (801b278 <GRAPHICS_MainTask+0x400>)
 801b222:	6818      	ldr	r0, [r3, #0]
 801b224:	f00e f8b2 	bl	802938c <WM_ShowWindow>
	    	WM_ShowWindow(Enc_ReleaseWindow);
 801b228:	4b14      	ldr	r3, [pc, #80]	; (801b27c <GRAPHICS_MainTask+0x404>)
 801b22a:	6818      	ldr	r0, [r3, #0]
 801b22c:	f00e f8ae 	bl	802938c <WM_ShowWindow>
	    	WM_HideWindow(InfoWindow);
 801b230:	4b13      	ldr	r3, [pc, #76]	; (801b280 <GRAPHICS_MainTask+0x408>)
 801b232:	6818      	ldr	r0, [r3, #0]
 801b234:	f00d fb00 	bl	8028838 <WM_HideWindow>
 801b238:	e6ff      	b.n	801b03a <GRAPHICS_MainTask+0x1c2>
  __ASM volatile ("dsb 0xF":::"memory");
 801b23a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801b23e:	4911      	ldr	r1, [pc, #68]	; (801b284 <GRAPHICS_MainTask+0x40c>)
 801b240:	68ca      	ldr	r2, [r1, #12]
 801b242:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801b246:	4b10      	ldr	r3, [pc, #64]	; (801b288 <GRAPHICS_MainTask+0x410>)
 801b248:	4313      	orrs	r3, r2
 801b24a:	60cb      	str	r3, [r1, #12]
 801b24c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 801b250:	bf00      	nop
 801b252:	e7fd      	b.n	801b250 <GRAPHICS_MainTask+0x3d8>
 801b254:	2002e5d4 	.word	0x2002e5d4
 801b258:	2002e554 	.word	0x2002e554
 801b25c:	2002e558 	.word	0x2002e558
 801b260:	2002e708 	.word	0x2002e708
 801b264:	2002e724 	.word	0x2002e724
 801b268:	2002ef0c 	.word	0x2002ef0c
 801b26c:	2002e55c 	.word	0x2002e55c
 801b270:	2002ee28 	.word	0x2002ee28
 801b274:	2002e8d4 	.word	0x2002e8d4
 801b278:	2002e5d8 	.word	0x2002e5d8
 801b27c:	2002f178 	.word	0x2002f178
 801b280:	2002e638 	.word	0x2002e638
 801b284:	e000ed00 	.word	0xe000ed00
 801b288:	05fa0004 	.word	0x05fa0004

0801b28c <HAL_UART_RxCpltCallback>:





void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart6){
 801b28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


	UARTRECIVER(); //Recive Data from UART --> UARTDATA
 801b28e:	f7f7 f863 	bl	8012358 <UARTRECIVER>

	BSP_LED_Toggle(LED1);
 801b292:	2000      	movs	r0, #0
 801b294:	f003 fc5e 	bl	801eb54 <BSP_LED_Toggle>
	TOUCHUPDATE(); //Recive Data from Touchpanel and Encoder
 801b298:	f7f5 fe4e 	bl	8010f38 <TOUCHUPDATE>
	BUFFERVALUEUPDATE(); //create Buffered Values
 801b29c:	f7ff f868 	bl	801a370 <BUFFERVALUEUPDATE>


	//Temporary assign pot to variabale

	pots[1] = Encoder1.value;
 801b2a0:	4b79      	ldr	r3, [pc, #484]	; (801b488 <HAL_UART_RxCpltCallback+0x1fc>)
 801b2a2:	ed93 6a00 	vldr	s12, [r3]
 801b2a6:	4b79      	ldr	r3, [pc, #484]	; (801b48c <HAL_UART_RxCpltCallback+0x200>)
 801b2a8:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 801b2ac:	edc3 7a01 	vstr	s15, [r3, #4]
	pots[2] = Encoder2.value;
 801b2b0:	4a77      	ldr	r2, [pc, #476]	; (801b490 <HAL_UART_RxCpltCallback+0x204>)
 801b2b2:	edd2 6a00 	vldr	s13, [r2]
 801b2b6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801b2ba:	edc3 7a02 	vstr	s15, [r3, #8]
	pots[3] = Encoder3.value;
 801b2be:	4a75      	ldr	r2, [pc, #468]	; (801b494 <HAL_UART_RxCpltCallback+0x208>)
 801b2c0:	ed92 7a00 	vldr	s14, [r2]
 801b2c4:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801b2c8:	edc3 7a03 	vstr	s15, [r3, #12]
	pots[4] = Encoder4.value;
 801b2cc:	4a72      	ldr	r2, [pc, #456]	; (801b498 <HAL_UART_RxCpltCallback+0x20c>)
 801b2ce:	edd2 7a00 	vldr	s15, [r2]
 801b2d2:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 801b2d6:	edc3 5a04 	vstr	s11, [r3, #16]



	input.value = Encoder1.value;
 801b2da:	4b70      	ldr	r3, [pc, #448]	; (801b49c <HAL_UART_RxCpltCallback+0x210>)
 801b2dc:	ed83 6a00 	vstr	s12, [r3]
	attack.value = 0;
 801b2e0:	2300      	movs	r3, #0
 801b2e2:	4a6f      	ldr	r2, [pc, #444]	; (801b4a0 <HAL_UART_RxCpltCallback+0x214>)
 801b2e4:	6013      	str	r3, [r2, #0]
	release.value = Encoder2.value;
 801b2e6:	4a6f      	ldr	r2, [pc, #444]	; (801b4a4 <HAL_UART_RxCpltCallback+0x218>)
 801b2e8:	edc2 6a00 	vstr	s13, [r2]

	distortion.value = 0;
 801b2ec:	4a6e      	ldr	r2, [pc, #440]	; (801b4a8 <HAL_UART_RxCpltCallback+0x21c>)
 801b2ee:	6013      	str	r3, [r2, #0]
	makeUpGain.value = Encoder3.value;
 801b2f0:	4a6e      	ldr	r2, [pc, #440]	; (801b4ac <HAL_UART_RxCpltCallback+0x220>)
 801b2f2:	ed82 7a00 	vstr	s14, [r2]
	ratio.value = Encoder4.value;
 801b2f6:	4a6e      	ldr	r2, [pc, #440]	; (801b4b0 <HAL_UART_RxCpltCallback+0x224>)
 801b2f8:	edc2 7a00 	vstr	s15, [r2]
	outputgain.value = 0;
 801b2fc:	4a6d      	ldr	r2, [pc, #436]	; (801b4b4 <HAL_UART_RxCpltCallback+0x228>)
 801b2fe:	6013      	str	r3, [r2, #0]



	gain.value = 0;
 801b300:	4a6d      	ldr	r2, [pc, #436]	; (801b4b8 <HAL_UART_RxCpltCallback+0x22c>)
 801b302:	6013      	str	r3, [r2, #0]
	threshold.value = 0;
 801b304:	4a6d      	ldr	r2, [pc, #436]	; (801b4bc <HAL_UART_RxCpltCallback+0x230>)
 801b306:	6013      	str	r3, [r2, #0]





    upcounter = UARTDATA[4]; //Watchdog coming from the MotherEngine is used to identify new Value
 801b308:	4b6d      	ldr	r3, [pc, #436]	; (801b4c0 <HAL_UART_RxCpltCallback+0x234>)
 801b30a:	791c      	ldrb	r4, [r3, #4]
 801b30c:	4b6d      	ldr	r3, [pc, #436]	; (801b4c4 <HAL_UART_RxCpltCallback+0x238>)
 801b30e:	701c      	strb	r4, [r3, #0]

    //CheckSum check
    checksum = 0;
 801b310:	2200      	movs	r2, #0
 801b312:	4b6d      	ldr	r3, [pc, #436]	; (801b4c8 <HAL_UART_RxCpltCallback+0x23c>)
 801b314:	701a      	strb	r2, [r3, #0]
    checksum16 = 0;
 801b316:	4b6d      	ldr	r3, [pc, #436]	; (801b4cc <HAL_UART_RxCpltCallback+0x240>)
 801b318:	801a      	strh	r2, [r3, #0]
    CheckSumOK = 0;
 801b31a:	4b6d      	ldr	r3, [pc, #436]	; (801b4d0 <HAL_UART_RxCpltCallback+0x244>)
 801b31c:	601a      	str	r2, [r3, #0]

    for(int i = 0; i < 98; i++) {
 801b31e:	e00a      	b.n	801b336 <HAL_UART_RxCpltCallback+0xaa>
    	checksum += UARTDATA[i];
 801b320:	4b67      	ldr	r3, [pc, #412]	; (801b4c0 <HAL_UART_RxCpltCallback+0x234>)
 801b322:	5c9b      	ldrb	r3, [r3, r2]
 801b324:	4868      	ldr	r0, [pc, #416]	; (801b4c8 <HAL_UART_RxCpltCallback+0x23c>)
 801b326:	7801      	ldrb	r1, [r0, #0]
 801b328:	4419      	add	r1, r3
 801b32a:	7001      	strb	r1, [r0, #0]
    	checksum16 += UARTDATA[i];
 801b32c:	4967      	ldr	r1, [pc, #412]	; (801b4cc <HAL_UART_RxCpltCallback+0x240>)
 801b32e:	8808      	ldrh	r0, [r1, #0]
 801b330:	4403      	add	r3, r0
 801b332:	800b      	strh	r3, [r1, #0]
    for(int i = 0; i < 98; i++) {
 801b334:	3201      	adds	r2, #1
 801b336:	2a61      	cmp	r2, #97	; 0x61
 801b338:	ddf2      	ble.n	801b320 <HAL_UART_RxCpltCallback+0x94>
    }

    if(((checksum16 & 0x00FF) == UARTDATA[98]) && ((checksum16 >> 8) == UARTDATA[99])){
 801b33a:	4b64      	ldr	r3, [pc, #400]	; (801b4cc <HAL_UART_RxCpltCallback+0x240>)
 801b33c:	881b      	ldrh	r3, [r3, #0]
 801b33e:	b2d9      	uxtb	r1, r3
 801b340:	4a5f      	ldr	r2, [pc, #380]	; (801b4c0 <HAL_UART_RxCpltCallback+0x234>)
 801b342:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 801b346:	4291      	cmp	r1, r2
 801b348:	d007      	beq.n	801b35a <HAL_UART_RxCpltCallback+0xce>

    }


    //if((upcounter != upcounterLast)){
	if((upcounter != upcounterLast)&&CheckSumOK){
 801b34a:	4b62      	ldr	r3, [pc, #392]	; (801b4d4 <HAL_UART_RxCpltCallback+0x248>)
 801b34c:	781b      	ldrb	r3, [r3, #0]
 801b34e:	429c      	cmp	r4, r3
 801b350:	d002      	beq.n	801b358 <HAL_UART_RxCpltCallback+0xcc>
 801b352:	4b5f      	ldr	r3, [pc, #380]	; (801b4d0 <HAL_UART_RxCpltCallback+0x244>)
 801b354:	681b      	ldr	r3, [r3, #0]
 801b356:	b953      	cbnz	r3, 801b36e <HAL_UART_RxCpltCallback+0xe2>





}
 801b358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((checksum16 & 0x00FF) == UARTDATA[98]) && ((checksum16 >> 8) == UARTDATA[99])){
 801b35a:	4a59      	ldr	r2, [pc, #356]	; (801b4c0 <HAL_UART_RxCpltCallback+0x234>)
 801b35c:	f892 2063 	ldrb.w	r2, [r2, #99]	; 0x63
 801b360:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
 801b364:	d1f1      	bne.n	801b34a <HAL_UART_RxCpltCallback+0xbe>
    	CheckSumOK = 1;
 801b366:	4b5a      	ldr	r3, [pc, #360]	; (801b4d0 <HAL_UART_RxCpltCallback+0x244>)
 801b368:	2201      	movs	r2, #1
 801b36a:	601a      	str	r2, [r3, #0]
 801b36c:	e7ed      	b.n	801b34a <HAL_UART_RxCpltCallback+0xbe>
       	 	f_inputLeft_DB = createFloat(12);
 801b36e:	200c      	movs	r0, #12
 801b370:	f7f5 fd74 	bl	8010e5c <createFloat>
 801b374:	4b58      	ldr	r3, [pc, #352]	; (801b4d8 <HAL_UART_RxCpltCallback+0x24c>)
 801b376:	ed83 0a00 	vstr	s0, [r3]
			f_inputRight_DB = createFloat(16);
 801b37a:	2010      	movs	r0, #16
 801b37c:	f7f5 fd6e 	bl	8010e5c <createFloat>
 801b380:	4b56      	ldr	r3, [pc, #344]	; (801b4dc <HAL_UART_RxCpltCallback+0x250>)
 801b382:	ed83 0a00 	vstr	s0, [r3]
			f_VCALeft_DB = createFloat(20);
 801b386:	2014      	movs	r0, #20
 801b388:	f7f5 fd68 	bl	8010e5c <createFloat>
 801b38c:	4b54      	ldr	r3, [pc, #336]	; (801b4e0 <HAL_UART_RxCpltCallback+0x254>)
 801b38e:	ed83 0a00 	vstr	s0, [r3]
			f_VCARight_DB = createFloat(24);
 801b392:	2018      	movs	r0, #24
 801b394:	f7f5 fd62 	bl	8010e5c <createFloat>
 801b398:	4b52      	ldr	r3, [pc, #328]	; (801b4e4 <HAL_UART_RxCpltCallback+0x258>)
 801b39a:	ed83 0a00 	vstr	s0, [r3]
			f_outputLeft_DB = createFloat(28);
 801b39e:	201c      	movs	r0, #28
 801b3a0:	f7f5 fd5c 	bl	8010e5c <createFloat>
 801b3a4:	4b50      	ldr	r3, [pc, #320]	; (801b4e8 <HAL_UART_RxCpltCallback+0x25c>)
 801b3a6:	ed83 0a00 	vstr	s0, [r3]
			f_outputRight_DB = createFloat(32);
 801b3aa:	2020      	movs	r0, #32
 801b3ac:	f7f5 fd56 	bl	8010e5c <createFloat>
 801b3b0:	4b4e      	ldr	r3, [pc, #312]	; (801b4ec <HAL_UART_RxCpltCallback+0x260>)
 801b3b2:	ed83 0a00 	vstr	s0, [r3]
			f_inputLeft_DB_RMS = createFloat(36);
 801b3b6:	2024      	movs	r0, #36	; 0x24
 801b3b8:	f7f5 fd50 	bl	8010e5c <createFloat>
 801b3bc:	4b4c      	ldr	r3, [pc, #304]	; (801b4f0 <HAL_UART_RxCpltCallback+0x264>)
 801b3be:	ed83 0a00 	vstr	s0, [r3]
			f_inputRight_DB_RMS = createFloat(40);
 801b3c2:	2028      	movs	r0, #40	; 0x28
 801b3c4:	f7f5 fd4a 	bl	8010e5c <createFloat>
 801b3c8:	4b4a      	ldr	r3, [pc, #296]	; (801b4f4 <HAL_UART_RxCpltCallback+0x268>)
 801b3ca:	ed83 0a00 	vstr	s0, [r3]
			f_VCALeft_DB_RMS = createFloat(44);
 801b3ce:	202c      	movs	r0, #44	; 0x2c
 801b3d0:	f7f5 fd44 	bl	8010e5c <createFloat>
 801b3d4:	4b48      	ldr	r3, [pc, #288]	; (801b4f8 <HAL_UART_RxCpltCallback+0x26c>)
 801b3d6:	ed83 0a00 	vstr	s0, [r3]
			f_VCARight_DB_RMS = createFloat(48);
 801b3da:	2030      	movs	r0, #48	; 0x30
 801b3dc:	f7f5 fd3e 	bl	8010e5c <createFloat>
 801b3e0:	4b46      	ldr	r3, [pc, #280]	; (801b4fc <HAL_UART_RxCpltCallback+0x270>)
 801b3e2:	ed83 0a00 	vstr	s0, [r3]
			f_outputLeft_DB_RMS = createFloat(52);
 801b3e6:	2034      	movs	r0, #52	; 0x34
 801b3e8:	f7f5 fd38 	bl	8010e5c <createFloat>
 801b3ec:	4b44      	ldr	r3, [pc, #272]	; (801b500 <HAL_UART_RxCpltCallback+0x274>)
 801b3ee:	ed83 0a00 	vstr	s0, [r3]
			f_outputRight_DB_RMS = createFloat(56);
 801b3f2:	2038      	movs	r0, #56	; 0x38
 801b3f4:	f7f5 fd32 	bl	8010e5c <createFloat>
 801b3f8:	4b42      	ldr	r3, [pc, #264]	; (801b504 <HAL_UART_RxCpltCallback+0x278>)
 801b3fa:	ed83 0a00 	vstr	s0, [r3]
		i_inputLeft_Waveform = UARTDATA[6];
 801b3fe:	4b30      	ldr	r3, [pc, #192]	; (801b4c0 <HAL_UART_RxCpltCallback+0x234>)
 801b400:	799d      	ldrb	r5, [r3, #6]
 801b402:	4a41      	ldr	r2, [pc, #260]	; (801b508 <HAL_UART_RxCpltCallback+0x27c>)
 801b404:	6015      	str	r5, [r2, #0]
		i_inputRight_Waveform = UARTDATA[7];
 801b406:	79dc      	ldrb	r4, [r3, #7]
 801b408:	4a40      	ldr	r2, [pc, #256]	; (801b50c <HAL_UART_RxCpltCallback+0x280>)
 801b40a:	6014      	str	r4, [r2, #0]
		i_VCALeft_Waveform = UARTDATA[8];
 801b40c:	f893 c008 	ldrb.w	ip, [r3, #8]
		i_VCALeft_Waveform = UARTDATA[9];
 801b410:	7a5f      	ldrb	r7, [r3, #9]
 801b412:	4a3f      	ldr	r2, [pc, #252]	; (801b510 <HAL_UART_RxCpltCallback+0x284>)
 801b414:	6017      	str	r7, [r2, #0]
		i_outputLeft_Waveform = UARTDATA[10];
 801b416:	7a9e      	ldrb	r6, [r3, #10]
 801b418:	4a3e      	ldr	r2, [pc, #248]	; (801b514 <HAL_UART_RxCpltCallback+0x288>)
 801b41a:	6016      	str	r6, [r2, #0]
		i_outputRight_Waveform = UARTDATA[11];
 801b41c:	f893 e00b 	ldrb.w	lr, [r3, #11]
 801b420:	4b3d      	ldr	r3, [pc, #244]	; (801b518 <HAL_UART_RxCpltCallback+0x28c>)
 801b422:	f8c3 e000 	str.w	lr, [r3]
		inputLeftStream[399] = i_inputLeft_Waveform;
 801b426:	4b3d      	ldr	r3, [pc, #244]	; (801b51c <HAL_UART_RxCpltCallback+0x290>)
 801b428:	f883 518f 	strb.w	r5, [r3, #399]	; 0x18f
		for(int i=0; i<399;i++){inputLeftStream[i] = inputLeftStream[i+1];}
 801b42c:	2300      	movs	r3, #0
 801b42e:	e004      	b.n	801b43a <HAL_UART_RxCpltCallback+0x1ae>
 801b430:	1c5a      	adds	r2, r3, #1
 801b432:	493a      	ldr	r1, [pc, #232]	; (801b51c <HAL_UART_RxCpltCallback+0x290>)
 801b434:	5c88      	ldrb	r0, [r1, r2]
 801b436:	54c8      	strb	r0, [r1, r3]
 801b438:	4613      	mov	r3, r2
 801b43a:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 801b43e:	ddf7      	ble.n	801b430 <HAL_UART_RxCpltCallback+0x1a4>
		inputRightStream[399] = i_inputRight_Waveform;
 801b440:	4b37      	ldr	r3, [pc, #220]	; (801b520 <HAL_UART_RxCpltCallback+0x294>)
 801b442:	f883 418f 	strb.w	r4, [r3, #399]	; 0x18f
		for(int i=0; i<399;i++){inputRightStream[i] = inputRightStream[i+1];}
 801b446:	2300      	movs	r3, #0
 801b448:	e004      	b.n	801b454 <HAL_UART_RxCpltCallback+0x1c8>
 801b44a:	1c5a      	adds	r2, r3, #1
 801b44c:	4934      	ldr	r1, [pc, #208]	; (801b520 <HAL_UART_RxCpltCallback+0x294>)
 801b44e:	5c88      	ldrb	r0, [r1, r2]
 801b450:	54c8      	strb	r0, [r1, r3]
 801b452:	4613      	mov	r3, r2
 801b454:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 801b458:	ddf7      	ble.n	801b44a <HAL_UART_RxCpltCallback+0x1be>
		i_inputLeft_Indicator = UARTDATA[6];
 801b45a:	4b32      	ldr	r3, [pc, #200]	; (801b524 <HAL_UART_RxCpltCallback+0x298>)
 801b45c:	601d      	str	r5, [r3, #0]
		i_inputRight_Indicator = UARTDATA[7];
 801b45e:	4b32      	ldr	r3, [pc, #200]	; (801b528 <HAL_UART_RxCpltCallback+0x29c>)
 801b460:	601c      	str	r4, [r3, #0]
		i_VCALeft_Indicator = UARTDATA[8];
 801b462:	4b32      	ldr	r3, [pc, #200]	; (801b52c <HAL_UART_RxCpltCallback+0x2a0>)
 801b464:	f8c3 c000 	str.w	ip, [r3]
		i_VCARight_Indicator = UARTDATA[9];
 801b468:	4b31      	ldr	r3, [pc, #196]	; (801b530 <HAL_UART_RxCpltCallback+0x2a4>)
 801b46a:	601f      	str	r7, [r3, #0]
		i_outputLeft_Indicator = UARTDATA[10];
 801b46c:	4b31      	ldr	r3, [pc, #196]	; (801b534 <HAL_UART_RxCpltCallback+0x2a8>)
 801b46e:	601e      	str	r6, [r3, #0]
		i_outputRight_Indicator = UARTDATA[11];
 801b470:	4b31      	ldr	r3, [pc, #196]	; (801b538 <HAL_UART_RxCpltCallback+0x2ac>)
 801b472:	f8c3 e000 	str.w	lr, [r3]
	reset = 0;
 801b476:	4b31      	ldr	r3, [pc, #196]	; (801b53c <HAL_UART_RxCpltCallback+0x2b0>)
 801b478:	2200      	movs	r2, #0
 801b47a:	601a      	str	r2, [r3, #0]
	upcounterLast = upcounter;
 801b47c:	4b11      	ldr	r3, [pc, #68]	; (801b4c4 <HAL_UART_RxCpltCallback+0x238>)
 801b47e:	781a      	ldrb	r2, [r3, #0]
 801b480:	4b14      	ldr	r3, [pc, #80]	; (801b4d4 <HAL_UART_RxCpltCallback+0x248>)
 801b482:	701a      	strb	r2, [r3, #0]
}
 801b484:	e768      	b.n	801b358 <HAL_UART_RxCpltCallback+0xcc>
 801b486:	bf00      	nop
 801b488:	2002eef4 	.word	0x2002eef4
 801b48c:	2002e7f0 	.word	0x2002e7f0
 801b490:	2002ed4c 	.word	0x2002ed4c
 801b494:	2002e560 	.word	0x2002e560
 801b498:	2002e70c 	.word	0x2002e70c
 801b49c:	2002e5e4 	.word	0x2002e5e4
 801b4a0:	2002e610 	.word	0x2002e610
 801b4a4:	2002e8d8 	.word	0x2002e8d8
 801b4a8:	2002eb64 	.word	0x2002eb64
 801b4ac:	2002e52c 	.word	0x2002e52c
 801b4b0:	2002ed24 	.word	0x2002ed24
 801b4b4:	2002e5a4 	.word	0x2002e5a4
 801b4b8:	2002ed60 	.word	0x2002ed60
 801b4bc:	2002e578 	.word	0x2002e578
 801b4c0:	2002e80c 	.word	0x2002e80c
 801b4c4:	2002eb8c 	.word	0x2002eb8c
 801b4c8:	20030662 	.word	0x20030662
 801b4cc:	20030660 	.word	0x20030660
 801b4d0:	2000885c 	.word	0x2000885c
 801b4d4:	2002e5dc 	.word	0x2002e5dc
 801b4d8:	2002fa60 	.word	0x2002fa60
 801b4dc:	2002fa7c 	.word	0x2002fa7c
 801b4e0:	2002f898 	.word	0x2002f898
 801b4e4:	2002fb50 	.word	0x2002fb50
 801b4e8:	2002f89c 	.word	0x2002f89c
 801b4ec:	2002fa54 	.word	0x2002fa54
 801b4f0:	2002f8a4 	.word	0x2002f8a4
 801b4f4:	2002f8b0 	.word	0x2002f8b0
 801b4f8:	2002fb4c 	.word	0x2002fb4c
 801b4fc:	2002f190 	.word	0x2002f190
 801b500:	2002f548 	.word	0x2002f548
 801b504:	2002f1a4 	.word	0x2002f1a4
 801b508:	2002fa5c 	.word	0x2002fa5c
 801b50c:	2002f894 	.word	0x2002f894
 801b510:	2002f198 	.word	0x2002f198
 801b514:	2002f3a4 	.word	0x2002f3a4
 801b518:	2002f54c 	.word	0x2002f54c
 801b51c:	2002f560 	.word	0x2002f560
 801b520:	2002f200 	.word	0x2002f200
 801b524:	2002f188 	.word	0x2002f188
 801b528:	2002f8a8 	.word	0x2002f8a8
 801b52c:	2002fb68 	.word	0x2002fb68
 801b530:	2002f544 	.word	0x2002f544
 801b534:	2002f194 	.word	0x2002f194
 801b538:	2002fb58 	.word	0x2002fb58
 801b53c:	2002e5cc 	.word	0x2002e5cc

0801b540 <_cbDialog>:
#include "GuiElements/AudioMeter.h"
#include "GuiElements/Controlls.h"

static int i = 0;

static void _cbDialog(WM_MESSAGE * pMsg) {
 801b540:	b508      	push	{r3, lr}


  switch (pMsg->MsgId) {
 801b542:	6803      	ldr	r3, [r0, #0]
 801b544:	2b0f      	cmp	r3, #15
 801b546:	d002      	beq.n	801b54e <_cbDialog+0xe>
	  	GUI_SetFont(&GUI_Font32B_1);
	  	GUI_DispStringAt("Version: 1.2",250,350);
	  	GUI_DispStringAt("IP Adress: 192.168.1.70",250,380);
    break;
  default:
    WM_DefaultProc(pMsg);
 801b548:	f00d f898 	bl	802867c <WM_DefaultProc>
  }



}
 801b54c:	bd08      	pop	{r3, pc}
	  	GUI_SetBkColor(GUI_WHITE);
 801b54e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b552:	f004 fef3 	bl	802033c <GUI_SetBkColor>
	  	GUI_DrawBitmap(&bmAURORA_BACKSCREEN, 0, 0);
 801b556:	2200      	movs	r2, #0
 801b558:	4611      	mov	r1, r2
 801b55a:	480b      	ldr	r0, [pc, #44]	; (801b588 <_cbDialog+0x48>)
 801b55c:	f005 fd2e 	bl	8020fbc <GUI_DrawBitmap>
	  	GUI_SetColor( GUI_BLACK );
 801b560:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801b564:	f004 fef6 	bl	8020354 <GUI_SetColor>
	  	GUI_SetFont(&GUI_Font32B_1);
 801b568:	4808      	ldr	r0, [pc, #32]	; (801b58c <_cbDialog+0x4c>)
 801b56a:	f004 ff55 	bl	8020418 <GUI_SetFont>
	  	GUI_DispStringAt("Version: 1.2",250,350);
 801b56e:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801b572:	21fa      	movs	r1, #250	; 0xfa
 801b574:	4806      	ldr	r0, [pc, #24]	; (801b590 <_cbDialog+0x50>)
 801b576:	f005 fc19 	bl	8020dac <GUI_DispStringAt>
	  	GUI_DispStringAt("IP Adress: 192.168.1.70",250,380);
 801b57a:	f44f 72be 	mov.w	r2, #380	; 0x17c
 801b57e:	21fa      	movs	r1, #250	; 0xfa
 801b580:	4804      	ldr	r0, [pc, #16]	; (801b594 <_cbDialog+0x54>)
 801b582:	f005 fc13 	bl	8020dac <GUI_DispStringAt>
    break;
 801b586:	e7e1      	b.n	801b54c <_cbDialog+0xc>
 801b588:	0802ef8c 	.word	0x0802ef8c
 801b58c:	08038488 	.word	0x08038488
 801b590:	0804296c 	.word	0x0804296c
 801b594:	0804297c 	.word	0x0804297c

0801b598 <CreateInfoWindow>:


WM_HWIN CreateInfoWindow(void) {
 801b598:	b510      	push	{r4, lr}
 801b59a:	b084      	sub	sp, #16

  WM_HWIN Window;

  Window = WM_CreateWindow(0, 0, 800, 480,WM_CF_SHOW , _cbDialog, 0);
 801b59c:	2000      	movs	r0, #0
 801b59e:	9002      	str	r0, [sp, #8]
 801b5a0:	4b08      	ldr	r3, [pc, #32]	; (801b5c4 <CreateInfoWindow+0x2c>)
 801b5a2:	9301      	str	r3, [sp, #4]
 801b5a4:	2302      	movs	r3, #2
 801b5a6:	9300      	str	r3, [sp, #0]
 801b5a8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801b5ac:	f44f 7248 	mov.w	r2, #800	; 0x320
 801b5b0:	4601      	mov	r1, r0
 801b5b2:	f00c faeb 	bl	8027b8c <WM_CreateWindow>
 801b5b6:	4604      	mov	r4, r0

  WM_MULTIBUF_Enable(1);
 801b5b8:	2001      	movs	r0, #1
 801b5ba:	f00d ff59 	bl	8029470 <WM_MULTIBUF_Enable>

  return Window;
}
 801b5be:	4620      	mov	r0, r4
 801b5c0:	b004      	add	sp, #16
 801b5c2:	bd10      	pop	{r4, pc}
 801b5c4:	0801b541 	.word	0x0801b541

0801b5c8 <_cbDialog>:
int y=-348;
//int y=-52;



static void _cbDialog(WM_MESSAGE * pMsg) {
 801b5c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5cc:	ed2d 8b02 	vpush	{d8}
 801b5d0:	4604      	mov	r4, r0

if(Enc_AttackSelected+
 801b5d2:	4bd2      	ldr	r3, [pc, #840]	; (801b91c <_cbDialog+0x354>)
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	4ad2      	ldr	r2, [pc, #840]	; (801b920 <_cbDialog+0x358>)
 801b5d8:	6812      	ldr	r2, [r2, #0]
 801b5da:	4413      	add	r3, r2
	Enc_ReleaseSelected+
 801b5dc:	4ad1      	ldr	r2, [pc, #836]	; (801b924 <_cbDialog+0x35c>)
 801b5de:	6812      	ldr	r2, [r2, #0]
 801b5e0:	4413      	add	r3, r2
	Enc_InputSelected+
 801b5e2:	4ad1      	ldr	r2, [pc, #836]	; (801b928 <_cbDialog+0x360>)
 801b5e4:	6812      	ldr	r2, [r2, #0]
 801b5e6:	4413      	add	r3, r2
	Enc_DistortionSelected+
 801b5e8:	4ad0      	ldr	r2, [pc, #832]	; (801b92c <_cbDialog+0x364>)
 801b5ea:	6812      	ldr	r2, [r2, #0]
 801b5ec:	4413      	add	r3, r2
	Enc_MakeUpGainSelected+
 801b5ee:	4ad0      	ldr	r2, [pc, #832]	; (801b930 <_cbDialog+0x368>)
 801b5f0:	6812      	ldr	r2, [r2, #0]
 801b5f2:	4413      	add	r3, r2
	Enc_OutputSelected+
 801b5f4:	4acf      	ldr	r2, [pc, #828]	; (801b934 <_cbDialog+0x36c>)
 801b5f6:	6812      	ldr	r2, [r2, #0]
if(Enc_AttackSelected+
 801b5f8:	42d3      	cmn	r3, r2
 801b5fa:	f040 82cc 	bne.w	801bb96 <_cbDialog+0x5ce>
	Enc_RatioSelected == 0){
	nothingSelected = 1;
 801b5fe:	4bce      	ldr	r3, [pc, #824]	; (801b938 <_cbDialog+0x370>)
 801b600:	2201      	movs	r2, #1
 801b602:	601a      	str	r2, [r3, #0]



//############################################################//

	WM_Invalidate(Enc_InputWindow);
 801b604:	f8df b380 	ldr.w	fp, [pc, #896]	; 801b988 <_cbDialog+0x3c0>
 801b608:	f8db 0000 	ldr.w	r0, [fp]
 801b60c:	f00c f974 	bl	80278f8 <WM_InvalidateWindow>
	WM_Invalidate(Enc_AttackWindow);
 801b610:	f8df a378 	ldr.w	sl, [pc, #888]	; 801b98c <_cbDialog+0x3c4>
 801b614:	f8da 0000 	ldr.w	r0, [sl]
 801b618:	f00c f96e 	bl	80278f8 <WM_InvalidateWindow>
	WM_Invalidate(Enc_OutputWindow);
 801b61c:	f8df 9370 	ldr.w	r9, [pc, #880]	; 801b990 <_cbDialog+0x3c8>
 801b620:	f8d9 0000 	ldr.w	r0, [r9]
 801b624:	f00c f968 	bl	80278f8 <WM_InvalidateWindow>
	WM_Invalidate(Enc_DistortionWindow);
 801b628:	f8df 8368 	ldr.w	r8, [pc, #872]	; 801b994 <_cbDialog+0x3cc>
 801b62c:	f8d8 0000 	ldr.w	r0, [r8]
 801b630:	f00c f962 	bl	80278f8 <WM_InvalidateWindow>
	WM_Invalidate(Enc_MakeUpGainWindow);
 801b634:	4fc1      	ldr	r7, [pc, #772]	; (801b93c <_cbDialog+0x374>)
 801b636:	6838      	ldr	r0, [r7, #0]
 801b638:	f00c f95e 	bl	80278f8 <WM_InvalidateWindow>
	WM_Invalidate(Enc_RatioWindow);
 801b63c:	4bc0      	ldr	r3, [pc, #768]	; (801b940 <_cbDialog+0x378>)
 801b63e:	6818      	ldr	r0, [r3, #0]
 801b640:	f00c f95a 	bl	80278f8 <WM_InvalidateWindow>
	WM_Invalidate(Enc_ReleaseWindow);
 801b644:	4abf      	ldr	r2, [pc, #764]	; (801b944 <_cbDialog+0x37c>)
 801b646:	6810      	ldr	r0, [r2, #0]
 801b648:	f00c f956 	bl	80278f8 <WM_InvalidateWindow>

//############################################################//
	pMsg->MsgId = WM_USER;
 801b64c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 801b650:	6026      	str	r6, [r4, #0]
	pMsg->Data.v = 0; //MEANS update color & value
 801b652:	2500      	movs	r5, #0
 801b654:	60e5      	str	r5, [r4, #12]
 	WM_SendMessage (Enc_InputWindow, pMsg);
 801b656:	4621      	mov	r1, r4
 801b658:	f8db 0000 	ldr.w	r0, [fp]
 801b65c:	f00c f922 	bl	80278a4 <WM_SendMessage>
//############################################################//
 	pMsg->MsgId = WM_USER;
 801b660:	6026      	str	r6, [r4, #0]
 	pMsg->Data.v = 0; //MEANS update color & value
 801b662:	60e5      	str	r5, [r4, #12]
 	WM_SendMessage (Enc_AttackWindow, pMsg);
 801b664:	4621      	mov	r1, r4
 801b666:	f8da 0000 	ldr.w	r0, [sl]
 801b66a:	f00c f91b 	bl	80278a4 <WM_SendMessage>
//############################################################//
 	pMsg->MsgId = WM_USER;
 801b66e:	6026      	str	r6, [r4, #0]
 	pMsg->Data.v = 0; //MEANS update color & value
 801b670:	60e5      	str	r5, [r4, #12]
 	WM_SendMessage (Enc_OutputWindow, pMsg);
 801b672:	4621      	mov	r1, r4
 801b674:	f8d9 0000 	ldr.w	r0, [r9]
 801b678:	f00c f914 	bl	80278a4 <WM_SendMessage>
//############################################################//
 	pMsg->MsgId = WM_USER;
 801b67c:	6026      	str	r6, [r4, #0]
 	pMsg->Data.v = 0; //MEANS update color & value
 801b67e:	60e5      	str	r5, [r4, #12]
 	WM_SendMessage (Enc_DistortionWindow, pMsg);
 801b680:	4621      	mov	r1, r4
 801b682:	f8d8 0000 	ldr.w	r0, [r8]
 801b686:	f00c f90d 	bl	80278a4 <WM_SendMessage>
//############################################################//
 	pMsg->MsgId = WM_USER;
 801b68a:	6026      	str	r6, [r4, #0]
 	pMsg->Data.v = 0; //MEANS update color & value
 801b68c:	60e5      	str	r5, [r4, #12]
 	WM_SendMessage (Enc_MakeUpGainWindow, pMsg);
 801b68e:	4621      	mov	r1, r4
 801b690:	6838      	ldr	r0, [r7, #0]
 801b692:	f00c f907 	bl	80278a4 <WM_SendMessage>
//############################################################//
 	pMsg->MsgId = WM_USER;
 801b696:	6026      	str	r6, [r4, #0]
 	pMsg->Data.v = 0; //MEANS update color & value
 801b698:	60e5      	str	r5, [r4, #12]
 	WM_SendMessage (Enc_RatioWindow, pMsg);
 801b69a:	4621      	mov	r1, r4
 801b69c:	4ba8      	ldr	r3, [pc, #672]	; (801b940 <_cbDialog+0x378>)
 801b69e:	6818      	ldr	r0, [r3, #0]
 801b6a0:	f00c f900 	bl	80278a4 <WM_SendMessage>
//############################################################//
 	pMsg->MsgId = WM_USER;
 801b6a4:	6026      	str	r6, [r4, #0]
 	pMsg->Data.v = 0; //MEANS update color & value
 801b6a6:	60e5      	str	r5, [r4, #12]
 	WM_SendMessage (Enc_ReleaseWindow, pMsg);
 801b6a8:	4621      	mov	r1, r4
 801b6aa:	4aa6      	ldr	r2, [pc, #664]	; (801b944 <_cbDialog+0x37c>)
 801b6ac:	6810      	ldr	r0, [r2, #0]
 801b6ae:	f00c f8f9 	bl	80278a4 <WM_SendMessage>
//############################################################//

	  GUI_DCACHE_Clear(1);
 801b6b2:	2001      	movs	r0, #1
 801b6b4:	f005 f862 	bl	802077c <GUI_DCACHE_Clear>
	  GUI_Clear();
 801b6b8:	f004 ff50 	bl	802055c <GUI_Clear>
	  GUI_SetColor( GUI_LIGHTGRAY );
 801b6bc:	48a2      	ldr	r0, [pc, #648]	; (801b948 <_cbDialog+0x380>)
 801b6be:	f004 fe49 	bl	8020354 <GUI_SetColor>



	  switch (pMsg->MsgId) {
 801b6c2:	6823      	ldr	r3, [r4, #0]
 801b6c4:	2b0f      	cmp	r3, #15
 801b6c6:	f040 826a 	bne.w	801bb9e <_cbDialog+0x5d6>





	  	GUI_SetPenSize   (25);
 801b6ca:	2019      	movs	r0, #25
 801b6cc:	f004 fde8 	bl	80202a0 <GUI_SetPenSize>
	  	GUI_SetColor(Encoder1.Color);
 801b6d0:	4c9e      	ldr	r4, [pc, #632]	; (801b94c <_cbDialog+0x384>)
 801b6d2:	6920      	ldr	r0, [r4, #16]
 801b6d4:	f004 fe3e 	bl	8020354 <GUI_SetColor>
	  	if(Encoder1.buttonState){GUI_DrawPoint(50, 440);}
 801b6d8:	68a3      	ldr	r3, [r4, #8]
 801b6da:	2b00      	cmp	r3, #0
 801b6dc:	f040 8263 	bne.w	801bba6 <_cbDialog+0x5de>
	  	GUI_SetColor(Encoder2.Color);
 801b6e0:	4c9b      	ldr	r4, [pc, #620]	; (801b950 <_cbDialog+0x388>)
 801b6e2:	6920      	ldr	r0, [r4, #16]
 801b6e4:	f004 fe36 	bl	8020354 <GUI_SetColor>
	  	if(Encoder2.buttonState){GUI_DrawPoint(80, 440);}
 801b6e8:	68a3      	ldr	r3, [r4, #8]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	f040 8261 	bne.w	801bbb2 <_cbDialog+0x5ea>
	  	GUI_SetColor(Encoder3.Color);
 801b6f0:	4c98      	ldr	r4, [pc, #608]	; (801b954 <_cbDialog+0x38c>)
 801b6f2:	6920      	ldr	r0, [r4, #16]
 801b6f4:	f004 fe2e 	bl	8020354 <GUI_SetColor>
	  	if(Encoder3.buttonState){GUI_DrawPoint(110, 440);}
 801b6f8:	68a3      	ldr	r3, [r4, #8]
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	f040 825f 	bne.w	801bbbe <_cbDialog+0x5f6>
	  	GUI_SetColor(Encoder4.Color);
 801b700:	4c95      	ldr	r4, [pc, #596]	; (801b958 <_cbDialog+0x390>)
 801b702:	6920      	ldr	r0, [r4, #16]
 801b704:	f004 fe26 	bl	8020354 <GUI_SetColor>
	  	if(Encoder4.buttonState){GUI_DrawPoint(140, 440);}
 801b708:	68a3      	ldr	r3, [r4, #8]
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	f040 825d 	bne.w	801bbca <_cbDialog+0x602>

	  	GUI_SetColor(Encoder1.Color);
 801b710:	4c8e      	ldr	r4, [pc, #568]	; (801b94c <_cbDialog+0x384>)
 801b712:	6920      	ldr	r0, [r4, #16]
 801b714:	f004 fe1e 	bl	8020354 <GUI_SetColor>
	  	if(Encoder1.doubleclickEvent){GUI_DrawPoint(650, 450);}
 801b718:	68e3      	ldr	r3, [r4, #12]
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	f040 825b 	bne.w	801bbd6 <_cbDialog+0x60e>
	  	GUI_SetColor(Encoder2.Color);
 801b720:	4c8b      	ldr	r4, [pc, #556]	; (801b950 <_cbDialog+0x388>)
 801b722:	6920      	ldr	r0, [r4, #16]
 801b724:	f004 fe16 	bl	8020354 <GUI_SetColor>
	  	if(Encoder2.doubleclickEvent){GUI_DrawPoint(680, 450);}
 801b728:	68e3      	ldr	r3, [r4, #12]
 801b72a:	2b00      	cmp	r3, #0
 801b72c:	f040 825a 	bne.w	801bbe4 <_cbDialog+0x61c>
		GUI_SetColor(Encoder3.Color);
 801b730:	4c88      	ldr	r4, [pc, #544]	; (801b954 <_cbDialog+0x38c>)
 801b732:	6920      	ldr	r0, [r4, #16]
 801b734:	f004 fe0e 	bl	8020354 <GUI_SetColor>
		if(Encoder3.doubleclickEvent){GUI_DrawPoint(710, 450);}
 801b738:	68e3      	ldr	r3, [r4, #12]
 801b73a:	2b00      	cmp	r3, #0
 801b73c:	f040 8259 	bne.w	801bbf2 <_cbDialog+0x62a>
	  	GUI_SetColor(Encoder4.Color);
 801b740:	4c85      	ldr	r4, [pc, #532]	; (801b958 <_cbDialog+0x390>)
 801b742:	6920      	ldr	r0, [r4, #16]
 801b744:	f004 fe06 	bl	8020354 <GUI_SetColor>
	  	if(Encoder4.doubleclickEvent){GUI_DrawPoint(740, 450);}
 801b748:	68e3      	ldr	r3, [r4, #12]
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	f040 8258 	bne.w	801bc00 <_cbDialog+0x638>



//INPUT INDICATOR///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GUI_SetColor(GUI_LIGHTGRAY);
 801b750:	4c7d      	ldr	r4, [pc, #500]	; (801b948 <_cbDialog+0x380>)
 801b752:	4620      	mov	r0, r4
 801b754:	f004 fdfe 	bl	8020354 <GUI_SetColor>
GUI_SetFont(&GUI_Font32_1);
 801b758:	4f80      	ldr	r7, [pc, #512]	; (801b95c <_cbDialog+0x394>)
 801b75a:	4638      	mov	r0, r7
 801b75c:	f004 fe5c 	bl	8020418 <GUI_SetFont>
GUI_DispStringAt("input", 222, 440);
 801b760:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801b764:	21de      	movs	r1, #222	; 0xde
 801b766:	487e      	ldr	r0, [pc, #504]	; (801b960 <_cbDialog+0x398>)
 801b768:	f005 fb20 	bl	8020dac <GUI_DispStringAt>

GUI_SetFont(&GUI_Font20_1);
 801b76c:	4e7d      	ldr	r6, [pc, #500]	; (801b964 <_cbDialog+0x39c>)
 801b76e:	4630      	mov	r0, r6
 801b770:	f004 fe52 	bl	8020418 <GUI_SetFont>

GUI_SetColor(GUI_GRAY);
 801b774:	487c      	ldr	r0, [pc, #496]	; (801b968 <_cbDialog+0x3a0>)
 801b776:	f004 fded 	bl	8020354 <GUI_SetColor>
GUI_GotoXY(210,20);
 801b77a:	2114      	movs	r1, #20
 801b77c:	20d2      	movs	r0, #210	; 0xd2
 801b77e:	f004 fd7f 	bl	8020280 <GUI_GotoXY>
GUI_DispFloatMin(f_inputLeft_DB_MAXbufferd, 1);
 801b782:	4d7a      	ldr	r5, [pc, #488]	; (801b96c <_cbDialog+0x3a4>)
 801b784:	2001      	movs	r0, #1
 801b786:	ed95 0a00 	vldr	s0, [r5]
 801b78a:	f006 f8eb 	bl	8021964 <GUI_DispFloatMin>
GUI_GotoXY(260,20);
 801b78e:	2114      	movs	r1, #20
 801b790:	f44f 7082 	mov.w	r0, #260	; 0x104
 801b794:	f004 fd74 	bl	8020280 <GUI_GotoXY>
GUI_DispFloatMin(f_inputRight_DB_MAXbufferd, 1);
 801b798:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 801b998 <_cbDialog+0x3d0>
 801b79c:	2001      	movs	r0, #1
 801b79e:	ed9a 0a00 	vldr	s0, [sl]
 801b7a2:	f006 f8df 	bl	8021964 <GUI_DispFloatMin>

GUI_SetColor(GUI_LIGHTGRAY);
 801b7a6:	4620      	mov	r0, r4
 801b7a8:	f004 fdd4 	bl	8020354 <GUI_SetColor>
GUI_GotoXY(210,40);
 801b7ac:	2128      	movs	r1, #40	; 0x28
 801b7ae:	20d2      	movs	r0, #210	; 0xd2
 801b7b0:	f004 fd66 	bl	8020280 <GUI_GotoXY>
GUI_DispFloatMin(f_inputLeft_DB_RMS_MAXbufferd, 1);
 801b7b4:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 801b99c <_cbDialog+0x3d4>
 801b7b8:	2001      	movs	r0, #1
 801b7ba:	ed99 0a00 	vldr	s0, [r9]
 801b7be:	f006 f8d1 	bl	8021964 <GUI_DispFloatMin>
GUI_GotoXY(260,40);
 801b7c2:	2128      	movs	r1, #40	; 0x28
 801b7c4:	f44f 7082 	mov.w	r0, #260	; 0x104
 801b7c8:	f004 fd5a 	bl	8020280 <GUI_GotoXY>
GUI_DispFloatMin(f_inputRight_DB_RMS_MAXbufferd, 1);
 801b7cc:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 801b9a0 <_cbDialog+0x3d8>
 801b7d0:	2001      	movs	r0, #1
 801b7d2:	ed98 0a00 	vldr	s0, [r8]
 801b7d6:	f006 f8c5 	bl	8021964 <GUI_DispFloatMin>


drawBarDottedVertical (222, 440,(f_inputLeft_DB_MAXbufferd+30)*10,(f_inputLeft_DB_bufferd+30)*10,GUI_GRAY_AA,30);
 801b7da:	ed95 0a00 	vldr	s0, [r5]
 801b7de:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
 801b7e2:	ee30 0a28 	vadd.f32	s0, s0, s17
 801b7e6:	4b62      	ldr	r3, [pc, #392]	; (801b970 <_cbDialog+0x3a8>)
 801b7e8:	edd3 0a00 	vldr	s1, [r3]
 801b7ec:	ee70 0aa8 	vadd.f32	s1, s1, s17
 801b7f0:	4d60      	ldr	r5, [pc, #384]	; (801b974 <_cbDialog+0x3ac>)
 801b7f2:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
 801b7f6:	231e      	movs	r3, #30
 801b7f8:	462a      	mov	r2, r5
 801b7fa:	ee60 0a88 	vmul.f32	s1, s1, s16
 801b7fe:	ee20 0a08 	vmul.f32	s0, s0, s16
 801b802:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 801b806:	20de      	movs	r0, #222	; 0xde
 801b808:	f001 fd20 	bl	801d24c <drawBarDottedVertical>
drawBarDottedVertical (256, 440,(f_inputRight_DB_MAXbufferd+30)*10,(f_inputRight_DB_bufferd+30)*10,GUI_GRAY_AA,30);
 801b80c:	ed9a 0a00 	vldr	s0, [sl]
 801b810:	ee30 0a28 	vadd.f32	s0, s0, s17
 801b814:	4b58      	ldr	r3, [pc, #352]	; (801b978 <_cbDialog+0x3b0>)
 801b816:	edd3 0a00 	vldr	s1, [r3]
 801b81a:	ee70 0aa8 	vadd.f32	s1, s1, s17
 801b81e:	231e      	movs	r3, #30
 801b820:	462a      	mov	r2, r5
 801b822:	ee60 0a88 	vmul.f32	s1, s1, s16
 801b826:	ee20 0a08 	vmul.f32	s0, s0, s16
 801b82a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 801b82e:	f44f 7080 	mov.w	r0, #256	; 0x100
 801b832:	f001 fd0b 	bl	801d24c <drawBarDottedVertical>

drawBarDottedVertical (222, 440,(f_inputLeft_DB_RMS_MAXbufferd+30)*10,(f_inputLeft_DB_RMS_bufferd+30)*10,GUI_LIGHTGRAY,30);
 801b836:	ed99 0a00 	vldr	s0, [r9]
 801b83a:	ee30 0a28 	vadd.f32	s0, s0, s17
 801b83e:	4b4f      	ldr	r3, [pc, #316]	; (801b97c <_cbDialog+0x3b4>)
 801b840:	edd3 0a00 	vldr	s1, [r3]
 801b844:	ee70 0aa8 	vadd.f32	s1, s1, s17
 801b848:	231e      	movs	r3, #30
 801b84a:	4622      	mov	r2, r4
 801b84c:	ee60 0a88 	vmul.f32	s1, s1, s16
 801b850:	ee20 0a08 	vmul.f32	s0, s0, s16
 801b854:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 801b858:	20de      	movs	r0, #222	; 0xde
 801b85a:	f001 fcf7 	bl	801d24c <drawBarDottedVertical>
drawBarDottedVertical (256, 440,(f_inputRight_DB_RMS_MAXbufferd+30)*10,(f_inputRight_DB_RMS_bufferd+30)*10,GUI_LIGHTGRAY,30);
 801b85e:	ed98 0a00 	vldr	s0, [r8]
 801b862:	ee30 0a28 	vadd.f32	s0, s0, s17
 801b866:	4b46      	ldr	r3, [pc, #280]	; (801b980 <_cbDialog+0x3b8>)
 801b868:	edd3 0a00 	vldr	s1, [r3]
 801b86c:	ee70 0aa8 	vadd.f32	s1, s1, s17
 801b870:	231e      	movs	r3, #30
 801b872:	4622      	mov	r2, r4
 801b874:	ee60 0a88 	vmul.f32	s1, s1, s16
 801b878:	ee20 0a08 	vmul.f32	s0, s0, s16
 801b87c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 801b880:	f44f 7080 	mov.w	r0, #256	; 0x100
 801b884:	f001 fce2 	bl	801d24c <drawBarDottedVertical>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//AFTER VCA INDICATOR/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
GUI_SetColor(GUI_LIGHTGRAY);
 801b888:	4620      	mov	r0, r4
 801b88a:	f004 fd63 	bl	8020354 <GUI_SetColor>
GUI_SetFont(&GUI_Font32_1);
 801b88e:	4638      	mov	r0, r7
 801b890:	f004 fdc2 	bl	8020418 <GUI_SetFont>
GUI_DispStringAt("VCA", 348, 440);
 801b894:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801b898:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 801b89c:	4839      	ldr	r0, [pc, #228]	; (801b984 <_cbDialog+0x3bc>)
 801b89e:	f005 fa85 	bl	8020dac <GUI_DispStringAt>

GUI_SetFont(&GUI_Font20_1);
 801b8a2:	4630      	mov	r0, r6
 801b8a4:	f004 fdb8 	bl	8020418 <GUI_SetFont>

GUI_SetColor(GUI_GRAY);
 801b8a8:	482f      	ldr	r0, [pc, #188]	; (801b968 <_cbDialog+0x3a0>)
 801b8aa:	f004 fd53 	bl	8020354 <GUI_SetColor>
GUI_GotoXY(336,20);
 801b8ae:	2114      	movs	r1, #20
 801b8b0:	f44f 70a8 	mov.w	r0, #336	; 0x150
 801b8b4:	f004 fce4 	bl	8020280 <GUI_GotoXY>
GUI_DispFloatMin(f_VCALeft_DB_MAXbufferd, 1);
 801b8b8:	f8df b0e8 	ldr.w	fp, [pc, #232]	; 801b9a4 <_cbDialog+0x3dc>
 801b8bc:	2001      	movs	r0, #1
 801b8be:	ed9b 0a00 	vldr	s0, [fp]
 801b8c2:	f006 f84f 	bl	8021964 <GUI_DispFloatMin>
GUI_GotoXY(386,20);
 801b8c6:	2114      	movs	r1, #20
 801b8c8:	f44f 70c1 	mov.w	r0, #386	; 0x182
 801b8cc:	f004 fcd8 	bl	8020280 <GUI_GotoXY>
GUI_DispFloatMin(f_VCARight_DB_MAXbufferd, 1);
 801b8d0:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801b9a8 <_cbDialog+0x3e0>
 801b8d4:	2001      	movs	r0, #1
 801b8d6:	ed9a 0a00 	vldr	s0, [sl]
 801b8da:	f006 f843 	bl	8021964 <GUI_DispFloatMin>

GUI_SetColor(GUI_LIGHTGRAY);
 801b8de:	4620      	mov	r0, r4
 801b8e0:	f004 fd38 	bl	8020354 <GUI_SetColor>
GUI_GotoXY(336,40);
 801b8e4:	2128      	movs	r1, #40	; 0x28
 801b8e6:	f44f 70a8 	mov.w	r0, #336	; 0x150
 801b8ea:	f004 fcc9 	bl	8020280 <GUI_GotoXY>
GUI_DispFloatMin(f_VCALeft_DB_RMS_MAXbufferd, 1);
 801b8ee:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 801b9ac <_cbDialog+0x3e4>
 801b8f2:	2001      	movs	r0, #1
 801b8f4:	ed99 0a00 	vldr	s0, [r9]
 801b8f8:	f006 f834 	bl	8021964 <GUI_DispFloatMin>
GUI_GotoXY(386,40);
 801b8fc:	2128      	movs	r1, #40	; 0x28
 801b8fe:	f44f 70c1 	mov.w	r0, #386	; 0x182
 801b902:	f004 fcbd 	bl	8020280 <GUI_GotoXY>
GUI_DispFloatMin(f_VCARight_DB_RMS_MAXbufferd, 1);
 801b906:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 801b9b0 <_cbDialog+0x3e8>
 801b90a:	2001      	movs	r0, #1
 801b90c:	ed98 0a00 	vldr	s0, [r8]
 801b910:	f006 f828 	bl	8021964 <GUI_DispFloatMin>

 drawBarDottedVertical (348, 440,(f_VCALeft_DB_MAXbufferd+30)*10,(f_VCALeft_DB_bufferd+30)*10,GUI_GRAY_AA,30);
 801b914:	ed9b 0a00 	vldr	s0, [fp]
 801b918:	e04c      	b.n	801b9b4 <_cbDialog+0x3ec>
 801b91a:	bf00      	nop
 801b91c:	2000887c 	.word	0x2000887c
 801b920:	200088ec 	.word	0x200088ec
 801b924:	200088a4 	.word	0x200088a4
 801b928:	20008890 	.word	0x20008890
 801b92c:	200088b4 	.word	0x200088b4
 801b930:	200088c8 	.word	0x200088c8
 801b934:	200088dc 	.word	0x200088dc
 801b938:	2002e574 	.word	0x2002e574
 801b93c:	2002e8d4 	.word	0x2002e8d4
 801b940:	2002e5d8 	.word	0x2002e5d8
 801b944:	2002f178 	.word	0x2002f178
 801b948:	ffd3d3d3 	.word	0xffd3d3d3
 801b94c:	2002eef4 	.word	0x2002eef4
 801b950:	2002ed4c 	.word	0x2002ed4c
 801b954:	2002e560 	.word	0x2002e560
 801b958:	2002e70c 	.word	0x2002e70c
 801b95c:	0803c2e0 	.word	0x0803c2e0
 801b960:	08042920 	.word	0x08042920
 801b964:	0803642c 	.word	0x0803642c
 801b968:	ff808080 	.word	0xff808080
 801b96c:	2002f184 	.word	0x2002f184
 801b970:	2002f3a8 	.word	0x2002f3a8
 801b974:	ffaaaaaa 	.word	0xffaaaaaa
 801b978:	2002fdd0 	.word	0x2002fdd0
 801b97c:	2002fb5c 	.word	0x2002fb5c
 801b980:	2002f19c 	.word	0x2002f19c
 801b984:	08042994 	.word	0x08042994
 801b988:	2002e724 	.word	0x2002e724
 801b98c:	2002ef0c 	.word	0x2002ef0c
 801b990:	2002e55c 	.word	0x2002e55c
 801b994:	2002ee28 	.word	0x2002ee28
 801b998:	2002f55c 	.word	0x2002f55c
 801b99c:	2002f1a0 	.word	0x2002f1a0
 801b9a0:	2002f888 	.word	0x2002f888
 801b9a4:	2002fb74 	.word	0x2002fb74
 801b9a8:	2002fb48 	.word	0x2002fb48
 801b9ac:	2002f890 	.word	0x2002f890
 801b9b0:	2002fb70 	.word	0x2002fb70
 801b9b4:	ee30 0a28 	vadd.f32	s0, s0, s17
 801b9b8:	4b95      	ldr	r3, [pc, #596]	; (801bc10 <_cbDialog+0x648>)
 801b9ba:	edd3 0a00 	vldr	s1, [r3]
 801b9be:	ee70 0aa8 	vadd.f32	s1, s1, s17
 801b9c2:	231e      	movs	r3, #30
 801b9c4:	462a      	mov	r2, r5
 801b9c6:	ee60 0a88 	vmul.f32	s1, s1, s16
 801b9ca:	ee20 0a08 	vmul.f32	s0, s0, s16
 801b9ce:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 801b9d2:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 801b9d6:	f001 fc39 	bl	801d24c <drawBarDottedVertical>
 drawBarDottedVertical (382, 440,(f_VCARight_DB_MAXbufferd+30)*10,(f_VCARight_DB_bufferd+30)*10,GUI_GRAY_AA,30);
 801b9da:	ed9a 0a00 	vldr	s0, [sl]
 801b9de:	ee30 0a28 	vadd.f32	s0, s0, s17
 801b9e2:	4b8c      	ldr	r3, [pc, #560]	; (801bc14 <_cbDialog+0x64c>)
 801b9e4:	edd3 0a00 	vldr	s1, [r3]
 801b9e8:	ee70 0aa8 	vadd.f32	s1, s1, s17
 801b9ec:	231e      	movs	r3, #30
 801b9ee:	462a      	mov	r2, r5
 801b9f0:	ee60 0a88 	vmul.f32	s1, s1, s16
 801b9f4:	ee20 0a08 	vmul.f32	s0, s0, s16
 801b9f8:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 801b9fc:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 801ba00:	f001 fc24 	bl	801d24c <drawBarDottedVertical>

 drawBarDottedVertical (348, 440,(f_VCALeft_DB_RMS_MAXbufferd+30)*10,(f_VCALeft_DB_RMS_bufferd+30)*10,GUI_LIGHTGRAY,30);
 801ba04:	ed99 0a00 	vldr	s0, [r9]
 801ba08:	ee30 0a28 	vadd.f32	s0, s0, s17
 801ba0c:	4b82      	ldr	r3, [pc, #520]	; (801bc18 <_cbDialog+0x650>)
 801ba0e:	edd3 0a00 	vldr	s1, [r3]
 801ba12:	ee70 0aa8 	vadd.f32	s1, s1, s17
 801ba16:	231e      	movs	r3, #30
 801ba18:	4622      	mov	r2, r4
 801ba1a:	ee60 0a88 	vmul.f32	s1, s1, s16
 801ba1e:	ee20 0a08 	vmul.f32	s0, s0, s16
 801ba22:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 801ba26:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 801ba2a:	f001 fc0f 	bl	801d24c <drawBarDottedVertical>
 drawBarDottedVertical (382, 440,(f_VCARight_DB_RMS_MAXbufferd+30)*10,(f_VCARight_DB_RMS_bufferd+30)*10,GUI_LIGHTGRAY,30);
 801ba2e:	ed98 0a00 	vldr	s0, [r8]
 801ba32:	ee30 0a28 	vadd.f32	s0, s0, s17
 801ba36:	4b79      	ldr	r3, [pc, #484]	; (801bc1c <_cbDialog+0x654>)
 801ba38:	edd3 0a00 	vldr	s1, [r3]
 801ba3c:	ee70 0aa8 	vadd.f32	s1, s1, s17
 801ba40:	231e      	movs	r3, #30
 801ba42:	4622      	mov	r2, r4
 801ba44:	ee60 0a88 	vmul.f32	s1, s1, s16
 801ba48:	ee20 0a08 	vmul.f32	s0, s0, s16
 801ba4c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 801ba50:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 801ba54:	f001 fbfa 	bl	801d24c <drawBarDottedVertical>
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//OUTPUT INDICATOR///////////////////////////////////////////////////////////////////////////////////////////////////////////////////

 GUI_SetColor(GUI_LIGHTGRAY);
 801ba58:	4620      	mov	r0, r4
 801ba5a:	f004 fc7b 	bl	8020354 <GUI_SetColor>
 GUI_SetFont(&GUI_Font32_1);
 801ba5e:	4638      	mov	r0, r7
 801ba60:	f004 fcda 	bl	8020418 <GUI_SetFont>
 GUI_DispStringAt("output", 480, 440);
 801ba64:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801ba68:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801ba6c:	486c      	ldr	r0, [pc, #432]	; (801bc20 <_cbDialog+0x658>)
 801ba6e:	f005 f99d 	bl	8020dac <GUI_DispStringAt>

 GUI_SetFont(&GUI_Font20_1);
 801ba72:	4630      	mov	r0, r6
 801ba74:	f004 fcd0 	bl	8020418 <GUI_SetFont>

 GUI_SetColor(GUI_GRAY);
 801ba78:	486a      	ldr	r0, [pc, #424]	; (801bc24 <_cbDialog+0x65c>)
 801ba7a:	f004 fc6b 	bl	8020354 <GUI_SetColor>
 GUI_GotoXY(468,20);
 801ba7e:	2114      	movs	r1, #20
 801ba80:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 801ba84:	f004 fbfc 	bl	8020280 <GUI_GotoXY>
 GUI_DispFloatMin(f_outputLeft_DB_MAXbufferd, 1);
 801ba88:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 801bc44 <_cbDialog+0x67c>
 801ba8c:	2001      	movs	r0, #1
 801ba8e:	ed99 0a00 	vldr	s0, [r9]
 801ba92:	f005 ff67 	bl	8021964 <GUI_DispFloatMin>
 GUI_GotoXY(518,20);
 801ba96:	2114      	movs	r1, #20
 801ba98:	f240 2006 	movw	r0, #518	; 0x206
 801ba9c:	f004 fbf0 	bl	8020280 <GUI_GotoXY>
 GUI_DispFloatMin(f_outputRight_DB_MAXbufferd, 1);
 801baa0:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801bc48 <_cbDialog+0x680>
 801baa4:	2001      	movs	r0, #1
 801baa6:	ed98 0a00 	vldr	s0, [r8]
 801baaa:	f005 ff5b 	bl	8021964 <GUI_DispFloatMin>

 GUI_SetColor(GUI_LIGHTGRAY);
 801baae:	4620      	mov	r0, r4
 801bab0:	f004 fc50 	bl	8020354 <GUI_SetColor>
 GUI_GotoXY(468,40);
 801bab4:	2128      	movs	r1, #40	; 0x28
 801bab6:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 801baba:	f004 fbe1 	bl	8020280 <GUI_GotoXY>
 GUI_DispFloatMin(f_outputLeft_DB_RMS_MAXbufferd, 1);
 801babe:	4f5a      	ldr	r7, [pc, #360]	; (801bc28 <_cbDialog+0x660>)
 801bac0:	2001      	movs	r0, #1
 801bac2:	ed97 0a00 	vldr	s0, [r7]
 801bac6:	f005 ff4d 	bl	8021964 <GUI_DispFloatMin>
 GUI_GotoXY(518,40);
 801baca:	2128      	movs	r1, #40	; 0x28
 801bacc:	f240 2006 	movw	r0, #518	; 0x206
 801bad0:	f004 fbd6 	bl	8020280 <GUI_GotoXY>
 GUI_DispFloatMin(f_outputRight_DB_RMS_MAXbufferd, 1);
 801bad4:	4e55      	ldr	r6, [pc, #340]	; (801bc2c <_cbDialog+0x664>)
 801bad6:	2001      	movs	r0, #1
 801bad8:	ed96 0a00 	vldr	s0, [r6]
 801badc:	f005 ff42 	bl	8021964 <GUI_DispFloatMin>

 drawBarDottedVertical (480, 440,(f_outputLeft_DB_MAXbufferd+30)*10,(f_outputLeft_DB_bufferd+30)*10,GUI_GRAY_AA,30);
 801bae0:	ed99 0a00 	vldr	s0, [r9]
 801bae4:	ee30 0a28 	vadd.f32	s0, s0, s17
 801bae8:	4b51      	ldr	r3, [pc, #324]	; (801bc30 <_cbDialog+0x668>)
 801baea:	edd3 0a00 	vldr	s1, [r3]
 801baee:	ee70 0aa8 	vadd.f32	s1, s1, s17
 801baf2:	231e      	movs	r3, #30
 801baf4:	462a      	mov	r2, r5
 801baf6:	ee60 0a88 	vmul.f32	s1, s1, s16
 801bafa:	ee20 0a08 	vmul.f32	s0, s0, s16
 801bafe:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 801bb02:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 801bb06:	f001 fba1 	bl	801d24c <drawBarDottedVertical>
 drawBarDottedVertical (514, 440,(f_outputRight_DB_MAXbufferd+30)*10,(f_outputRight_DB_bufferd+30)*10,GUI_GRAY_AA,30);
 801bb0a:	ed98 0a00 	vldr	s0, [r8]
 801bb0e:	ee30 0a28 	vadd.f32	s0, s0, s17
 801bb12:	4b48      	ldr	r3, [pc, #288]	; (801bc34 <_cbDialog+0x66c>)
 801bb14:	edd3 0a00 	vldr	s1, [r3]
 801bb18:	ee70 0aa8 	vadd.f32	s1, s1, s17
 801bb1c:	231e      	movs	r3, #30
 801bb1e:	462a      	mov	r2, r5
 801bb20:	ee60 0a88 	vmul.f32	s1, s1, s16
 801bb24:	ee20 0a08 	vmul.f32	s0, s0, s16
 801bb28:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 801bb2c:	f240 2002 	movw	r0, #514	; 0x202
 801bb30:	f001 fb8c 	bl	801d24c <drawBarDottedVertical>

 drawBarDottedVertical (480, 440,(f_outputLeft_DB_RMS_MAXbufferd+30)*10,(f_outputLeft_DB_RMS_bufferd+30)*10,GUI_LIGHTGRAY,30);
 801bb34:	ed97 0a00 	vldr	s0, [r7]
 801bb38:	ee30 0a28 	vadd.f32	s0, s0, s17
 801bb3c:	4b3e      	ldr	r3, [pc, #248]	; (801bc38 <_cbDialog+0x670>)
 801bb3e:	edd3 0a00 	vldr	s1, [r3]
 801bb42:	ee70 0aa8 	vadd.f32	s1, s1, s17
 801bb46:	231e      	movs	r3, #30
 801bb48:	4622      	mov	r2, r4
 801bb4a:	ee60 0a88 	vmul.f32	s1, s1, s16
 801bb4e:	ee20 0a08 	vmul.f32	s0, s0, s16
 801bb52:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 801bb56:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 801bb5a:	f001 fb77 	bl	801d24c <drawBarDottedVertical>
 drawBarDottedVertical (514, 440,(f_outputRight_DB_RMS_MAXbufferd+30)*10,(f_outputRight_DB_RMS_bufferd+30)*10,GUI_LIGHTGRAY,30);
 801bb5e:	ed96 0a00 	vldr	s0, [r6]
 801bb62:	ee30 0a28 	vadd.f32	s0, s0, s17
 801bb66:	4b35      	ldr	r3, [pc, #212]	; (801bc3c <_cbDialog+0x674>)
 801bb68:	edd3 0a00 	vldr	s1, [r3]
 801bb6c:	ee70 0aa8 	vadd.f32	s1, s1, s17
 801bb70:	231e      	movs	r3, #30
 801bb72:	4622      	mov	r2, r4
 801bb74:	ee60 0a88 	vmul.f32	s1, s1, s16
 801bb78:	ee20 0a08 	vmul.f32	s0, s0, s16
 801bb7c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 801bb80:	f240 2002 	movw	r0, #514	; 0x202
 801bb84:	f001 fb62 	bl	801d24c <drawBarDottedVertical>


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


 BSP_LED_Toggle(LED3); //Toggle LED to check Performance
 801bb88:	2002      	movs	r0, #2
 801bb8a:	f002 ffe3 	bl	801eb54 <BSP_LED_Toggle>

}
 801bb8e:	ecbd 8b02 	vpop	{d8}
 801bb92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	nothingSelected = 0;
 801bb96:	4b2a      	ldr	r3, [pc, #168]	; (801bc40 <_cbDialog+0x678>)
 801bb98:	2200      	movs	r2, #0
 801bb9a:	601a      	str	r2, [r3, #0]
 801bb9c:	e532      	b.n	801b604 <_cbDialog+0x3c>
	  		  WM_DefaultProc(pMsg);
 801bb9e:	4620      	mov	r0, r4
 801bba0:	f00c fd6c 	bl	802867c <WM_DefaultProc>
 801bba4:	e591      	b.n	801b6ca <_cbDialog+0x102>
	  	if(Encoder1.buttonState){GUI_DrawPoint(50, 440);}
 801bba6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 801bbaa:	2032      	movs	r0, #50	; 0x32
 801bbac:	f005 fb88 	bl	80212c0 <GUI_DrawPoint>
 801bbb0:	e596      	b.n	801b6e0 <_cbDialog+0x118>
	  	if(Encoder2.buttonState){GUI_DrawPoint(80, 440);}
 801bbb2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 801bbb6:	2050      	movs	r0, #80	; 0x50
 801bbb8:	f005 fb82 	bl	80212c0 <GUI_DrawPoint>
 801bbbc:	e598      	b.n	801b6f0 <_cbDialog+0x128>
	  	if(Encoder3.buttonState){GUI_DrawPoint(110, 440);}
 801bbbe:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 801bbc2:	206e      	movs	r0, #110	; 0x6e
 801bbc4:	f005 fb7c 	bl	80212c0 <GUI_DrawPoint>
 801bbc8:	e59a      	b.n	801b700 <_cbDialog+0x138>
	  	if(Encoder4.buttonState){GUI_DrawPoint(140, 440);}
 801bbca:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 801bbce:	208c      	movs	r0, #140	; 0x8c
 801bbd0:	f005 fb76 	bl	80212c0 <GUI_DrawPoint>
 801bbd4:	e59c      	b.n	801b710 <_cbDialog+0x148>
	  	if(Encoder1.doubleclickEvent){GUI_DrawPoint(650, 450);}
 801bbd6:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 801bbda:	f240 208a 	movw	r0, #650	; 0x28a
 801bbde:	f005 fb6f 	bl	80212c0 <GUI_DrawPoint>
 801bbe2:	e59d      	b.n	801b720 <_cbDialog+0x158>
	  	if(Encoder2.doubleclickEvent){GUI_DrawPoint(680, 450);}
 801bbe4:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 801bbe8:	f44f 702a 	mov.w	r0, #680	; 0x2a8
 801bbec:	f005 fb68 	bl	80212c0 <GUI_DrawPoint>
 801bbf0:	e59e      	b.n	801b730 <_cbDialog+0x168>
		if(Encoder3.doubleclickEvent){GUI_DrawPoint(710, 450);}
 801bbf2:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 801bbf6:	f240 20c6 	movw	r0, #710	; 0x2c6
 801bbfa:	f005 fb61 	bl	80212c0 <GUI_DrawPoint>
 801bbfe:	e59f      	b.n	801b740 <_cbDialog+0x178>
	  	if(Encoder4.doubleclickEvent){GUI_DrawPoint(740, 450);}
 801bc00:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 801bc04:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 801bc08:	f005 fb5a 	bl	80212c0 <GUI_DrawPoint>
 801bc0c:	e5a0      	b.n	801b750 <_cbDialog+0x188>
 801bc0e:	bf00      	nop
 801bc10:	2002fa78 	.word	0x2002fa78
 801bc14:	2002fa50 	.word	0x2002fa50
 801bc18:	2002f554 	.word	0x2002f554
 801bc1c:	2002f39c 	.word	0x2002f39c
 801bc20:	08042998 	.word	0x08042998
 801bc24:	ff808080 	.word	0xff808080
 801bc28:	2002f6f0 	.word	0x2002f6f0
 801bc2c:	2002fdd4 	.word	0x2002fdd4
 801bc30:	2002f88c 	.word	0x2002f88c
 801bc34:	2002fb64 	.word	0x2002fb64
 801bc38:	2002f3b0 	.word	0x2002f3b0
 801bc3c:	2002f550 	.word	0x2002f550
 801bc40:	2002e574 	.word	0x2002e574
 801bc44:	2002fa58 	.word	0x2002fa58
 801bc48:	2002fa48 	.word	0x2002fa48

0801bc4c <CreateMainWindow>:



WM_HWIN CreateMainWindow(void) {
 801bc4c:	b510      	push	{r4, lr}
 801bc4e:	b084      	sub	sp, #16

  WM_HWIN Window;

  Window = WM_CreateWindow(0, 0, 1, 1,WM_CF_SHOW, _cbDialog, 0);
 801bc50:	2000      	movs	r0, #0
 801bc52:	9002      	str	r0, [sp, #8]
 801bc54:	4b07      	ldr	r3, [pc, #28]	; (801bc74 <CreateMainWindow+0x28>)
 801bc56:	9301      	str	r3, [sp, #4]
 801bc58:	2302      	movs	r3, #2
 801bc5a:	9300      	str	r3, [sp, #0]
 801bc5c:	2301      	movs	r3, #1
 801bc5e:	461a      	mov	r2, r3
 801bc60:	4601      	mov	r1, r0
 801bc62:	f00b ff93 	bl	8027b8c <WM_CreateWindow>
 801bc66:	4604      	mov	r4, r0

  WM_MULTIBUF_Enable(1);
 801bc68:	2001      	movs	r0, #1
 801bc6a:	f00d fc01 	bl	8029470 <WM_MULTIBUF_Enable>

  return Window;
}
 801bc6e:	4620      	mov	r0, r4
 801bc70:	b004      	add	sp, #16
 801bc72:	bd10      	pop	{r4, pc}
 801bc74:	0801b5c9 	.word	0x0801b5c9

0801bc78 <_cbDialog>:





static void _cbDialog(WM_MESSAGE * pMsg) {
 801bc78:	b570      	push	{r4, r5, r6, lr}
 801bc7a:	4604      	mov	r4, r0

  WM_HWIN      hItem;
  int          NCode;
  int          Id;

  switch (pMsg->MsgId) {
 801bc7c:	6803      	ldr	r3, [r0, #0]
 801bc7e:	2b1d      	cmp	r3, #29
 801bc80:	d008      	beq.n	801bc94 <_cbDialog+0x1c>
 801bc82:	2b26      	cmp	r3, #38	; 0x26
 801bc84:	f000 80ba 	beq.w	801bdfc <_cbDialog+0x184>
 801bc88:	2b0f      	cmp	r3, #15
 801bc8a:	f000 80b0 	beq.w	801bdee <_cbDialog+0x176>
      break;
//////////////////////////////////////////////////////////////////
    }
    break;
  default:
    WM_DefaultProc(pMsg);
 801bc8e:	f00c fcf5 	bl	802867c <WM_DefaultProc>
    break;
  }
}
 801bc92:	e0b2      	b.n	801bdfa <_cbDialog+0x182>
	hItem = WM_GetDialogItem(pMsg->hWin, ID_SpectrumButton);
 801bc94:	f640 0104 	movw	r1, #2052	; 0x804
 801bc98:	6840      	ldr	r0, [r0, #4]
 801bc9a:	f00d f837 	bl	8028d0c <WM_GetDialogItem>
	WM_SetCallback(hItem, _cbButton_spectrum);
 801bc9e:	499a      	ldr	r1, [pc, #616]	; (801bf08 <_cbDialog+0x290>)
 801bca0:	f00d f9b6 	bl	8029010 <WM_SetCallback>
	hItem = WM_GetDialogItem(pMsg->hWin, ID_NetworkButton);
 801bca4:	f640 0105 	movw	r1, #2053	; 0x805
 801bca8:	6860      	ldr	r0, [r4, #4]
 801bcaa:	f00d f82f 	bl	8028d0c <WM_GetDialogItem>
	WM_SetCallback(hItem, _cbButtonNetwork);
 801bcae:	4997      	ldr	r1, [pc, #604]	; (801bf0c <_cbDialog+0x294>)
 801bcb0:	f00d f9ae 	bl	8029010 <WM_SetCallback>
	hItem = WM_GetDialogItem(pMsg->hWin, ID_addButton);
 801bcb4:	f640 0106 	movw	r1, #2054	; 0x806
 801bcb8:	6860      	ldr	r0, [r4, #4]
 801bcba:	f00d f827 	bl	8028d0c <WM_GetDialogItem>
	WM_SetCallback(hItem, _cbButton_add);
 801bcbe:	4994      	ldr	r1, [pc, #592]	; (801bf10 <_cbDialog+0x298>)
 801bcc0:	f00d f9a6 	bl	8029010 <WM_SetCallback>
	hItem = WM_GetDialogItem(pMsg->hWin, ID_okButton);
 801bcc4:	f640 0107 	movw	r1, #2055	; 0x807
 801bcc8:	6860      	ldr	r0, [r4, #4]
 801bcca:	f00d f81f 	bl	8028d0c <WM_GetDialogItem>
	WM_SetCallback(hItem, _cbButton_ok);
 801bcce:	4991      	ldr	r1, [pc, #580]	; (801bf14 <_cbDialog+0x29c>)
 801bcd0:	f00d f99e 	bl	8029010 <WM_SetCallback>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
 801bcd4:	f640 0108 	movw	r1, #2056	; 0x808
 801bcd8:	6860      	ldr	r0, [r4, #4]
 801bcda:	f00d f817 	bl	8028d0c <WM_GetDialogItem>
 801bcde:	4605      	mov	r5, r0
    TEXT_SetText(hItem, "MODE");
 801bce0:	498d      	ldr	r1, [pc, #564]	; (801bf18 <_cbDialog+0x2a0>)
 801bce2:	f00e ff77 	bl	802abd4 <TEXT_SetText>
    TEXT_SetTextAlign(hItem, GUI_TA_VCENTER|GUI_TA_HCENTER);
 801bce6:	210e      	movs	r1, #14
 801bce8:	4628      	mov	r0, r5
 801bcea:	f00e ffa5 	bl	802ac38 <TEXT_SetTextAlign>
    TEXT_SetFont(hItem, GUI_FONT_32B_1);
 801bcee:	4e8b      	ldr	r6, [pc, #556]	; (801bf1c <_cbDialog+0x2a4>)
 801bcf0:	4631      	mov	r1, r6
 801bcf2:	4628      	mov	r0, r5
 801bcf4:	f00e ff54 	bl	802aba0 <TEXT_SetFont>
    TEXT_SetTextColor(hItem,GUI_LIGHTGRAY);
 801bcf8:	4989      	ldr	r1, [pc, #548]	; (801bf20 <_cbDialog+0x2a8>)
 801bcfa:	4628      	mov	r0, r5
 801bcfc:	f00e ffb6 	bl	802ac6c <TEXT_SetTextColor>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1);
 801bd00:	f640 0109 	movw	r1, #2057	; 0x809
 801bd04:	6860      	ldr	r0, [r4, #4]
 801bd06:	f00d f801 	bl	8028d0c <WM_GetDialogItem>
 801bd0a:	4605      	mov	r5, r0
    TEXT_SetText(hItem, "M/S");
 801bd0c:	4985      	ldr	r1, [pc, #532]	; (801bf24 <_cbDialog+0x2ac>)
 801bd0e:	f00e ff61 	bl	802abd4 <TEXT_SetText>
    TEXT_SetTextAlign(hItem, GUI_TA_VCENTER|GUI_TA_HCENTER);
 801bd12:	210e      	movs	r1, #14
 801bd14:	4628      	mov	r0, r5
 801bd16:	f00e ff8f 	bl	802ac38 <TEXT_SetTextAlign>
    TEXT_SetFont(hItem, GUI_FONT_32B_1);
 801bd1a:	4631      	mov	r1, r6
 801bd1c:	4628      	mov	r0, r5
 801bd1e:	f00e ff3f 	bl	802aba0 <TEXT_SetFont>
 	 if (Button_spectrumState){TEXT_SetTextColor(hItem,GUI_ORANGE);}
 801bd22:	4b81      	ldr	r3, [pc, #516]	; (801bf28 <_cbDialog+0x2b0>)
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d04d      	beq.n	801bdc6 <_cbDialog+0x14e>
 801bd2a:	4980      	ldr	r1, [pc, #512]	; (801bf2c <_cbDialog+0x2b4>)
 801bd2c:	4628      	mov	r0, r5
 801bd2e:	f00e ff9d 	bl	802ac6c <TEXT_SetTextColor>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
 801bd32:	f640 010a 	movw	r1, #2058	; 0x80a
 801bd36:	6860      	ldr	r0, [r4, #4]
 801bd38:	f00c ffe8 	bl	8028d0c <WM_GetDialogItem>
 801bd3c:	4605      	mov	r5, r0
    TEXT_SetText(hItem, "Stereo");
 801bd3e:	497c      	ldr	r1, [pc, #496]	; (801bf30 <_cbDialog+0x2b8>)
 801bd40:	f00e ff48 	bl	802abd4 <TEXT_SetText>
    TEXT_SetTextAlign(hItem, GUI_TA_VCENTER|GUI_TA_HCENTER);
 801bd44:	210e      	movs	r1, #14
 801bd46:	4628      	mov	r0, r5
 801bd48:	f00e ff76 	bl	802ac38 <TEXT_SetTextAlign>
    TEXT_SetFont(hItem, GUI_FONT_32B_1);
 801bd4c:	4973      	ldr	r1, [pc, #460]	; (801bf1c <_cbDialog+0x2a4>)
 801bd4e:	4628      	mov	r0, r5
 801bd50:	f00e ff26 	bl	802aba0 <TEXT_SetFont>
 	 if (Button_NetworkState){TEXT_SetTextColor(hItem,GUI_ORANGE);}
 801bd54:	4b74      	ldr	r3, [pc, #464]	; (801bf28 <_cbDialog+0x2b0>)
 801bd56:	685b      	ldr	r3, [r3, #4]
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d039      	beq.n	801bdd0 <_cbDialog+0x158>
 801bd5c:	4973      	ldr	r1, [pc, #460]	; (801bf2c <_cbDialog+0x2b4>)
 801bd5e:	4628      	mov	r0, r5
 801bd60:	f00e ff84 	bl	802ac6c <TEXT_SetTextColor>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_3);
 801bd64:	f640 010c 	movw	r1, #2060	; 0x80c
 801bd68:	6860      	ldr	r0, [r4, #4]
 801bd6a:	f00c ffcf 	bl	8028d0c <WM_GetDialogItem>
 801bd6e:	4605      	mov	r5, r0
    TEXT_SetText(hItem, "DualMono");
 801bd70:	4970      	ldr	r1, [pc, #448]	; (801bf34 <_cbDialog+0x2bc>)
 801bd72:	f00e ff2f 	bl	802abd4 <TEXT_SetText>
    TEXT_SetTextAlign(hItem, GUI_TA_VCENTER|GUI_TA_HCENTER);
 801bd76:	210e      	movs	r1, #14
 801bd78:	4628      	mov	r0, r5
 801bd7a:	f00e ff5d 	bl	802ac38 <TEXT_SetTextAlign>
    TEXT_SetFont(hItem, GUI_FONT_32B_1);
 801bd7e:	4967      	ldr	r1, [pc, #412]	; (801bf1c <_cbDialog+0x2a4>)
 801bd80:	4628      	mov	r0, r5
 801bd82:	f00e ff0d 	bl	802aba0 <TEXT_SetFont>
  	 if (Button_addState){TEXT_SetTextColor(hItem,GUI_ORANGE);}
 801bd86:	4b68      	ldr	r3, [pc, #416]	; (801bf28 <_cbDialog+0x2b0>)
 801bd88:	689b      	ldr	r3, [r3, #8]
 801bd8a:	b333      	cbz	r3, 801bdda <_cbDialog+0x162>
 801bd8c:	4967      	ldr	r1, [pc, #412]	; (801bf2c <_cbDialog+0x2b4>)
 801bd8e:	4628      	mov	r0, r5
 801bd90:	f00e ff6c 	bl	802ac6c <TEXT_SetTextColor>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
 801bd94:	f640 010b 	movw	r1, #2059	; 0x80b
 801bd98:	6860      	ldr	r0, [r4, #4]
 801bd9a:	f00c ffb7 	bl	8028d0c <WM_GetDialogItem>
 801bd9e:	4604      	mov	r4, r0
    TEXT_SetText(hItem, "Bypass");
 801bda0:	4965      	ldr	r1, [pc, #404]	; (801bf38 <_cbDialog+0x2c0>)
 801bda2:	f00e ff17 	bl	802abd4 <TEXT_SetText>
    TEXT_SetTextAlign(hItem, GUI_TA_VCENTER|GUI_TA_HCENTER);
 801bda6:	210e      	movs	r1, #14
 801bda8:	4620      	mov	r0, r4
 801bdaa:	f00e ff45 	bl	802ac38 <TEXT_SetTextAlign>
    TEXT_SetFont(hItem, GUI_FONT_32B_1);
 801bdae:	495b      	ldr	r1, [pc, #364]	; (801bf1c <_cbDialog+0x2a4>)
 801bdb0:	4620      	mov	r0, r4
 801bdb2:	f00e fef5 	bl	802aba0 <TEXT_SetFont>
 	 if (Button_okState){TEXT_SetTextColor(hItem,GUI_ORANGE);}
 801bdb6:	4b61      	ldr	r3, [pc, #388]	; (801bf3c <_cbDialog+0x2c4>)
 801bdb8:	681b      	ldr	r3, [r3, #0]
 801bdba:	b19b      	cbz	r3, 801bde4 <_cbDialog+0x16c>
 801bdbc:	495b      	ldr	r1, [pc, #364]	; (801bf2c <_cbDialog+0x2b4>)
 801bdbe:	4620      	mov	r0, r4
 801bdc0:	f00e ff54 	bl	802ac6c <TEXT_SetTextColor>
 801bdc4:	e019      	b.n	801bdfa <_cbDialog+0x182>
 	 else{TEXT_SetTextColor(hItem,GUI_LIGHTGRAY);}
 801bdc6:	4956      	ldr	r1, [pc, #344]	; (801bf20 <_cbDialog+0x2a8>)
 801bdc8:	4628      	mov	r0, r5
 801bdca:	f00e ff4f 	bl	802ac6c <TEXT_SetTextColor>
 801bdce:	e7b0      	b.n	801bd32 <_cbDialog+0xba>
 	 else{TEXT_SetTextColor(hItem,GUI_LIGHTGRAY);}
 801bdd0:	4953      	ldr	r1, [pc, #332]	; (801bf20 <_cbDialog+0x2a8>)
 801bdd2:	4628      	mov	r0, r5
 801bdd4:	f00e ff4a 	bl	802ac6c <TEXT_SetTextColor>
 801bdd8:	e7c4      	b.n	801bd64 <_cbDialog+0xec>
  	 else{TEXT_SetTextColor(hItem,GUI_LIGHTGRAY);}
 801bdda:	4951      	ldr	r1, [pc, #324]	; (801bf20 <_cbDialog+0x2a8>)
 801bddc:	4628      	mov	r0, r5
 801bdde:	f00e ff45 	bl	802ac6c <TEXT_SetTextColor>
 801bde2:	e7d7      	b.n	801bd94 <_cbDialog+0x11c>
 	 else{TEXT_SetTextColor(hItem,GUI_LIGHTGRAY);}
 801bde4:	494e      	ldr	r1, [pc, #312]	; (801bf20 <_cbDialog+0x2a8>)
 801bde6:	4620      	mov	r0, r4
 801bde8:	f00e ff40 	bl	802ac6c <TEXT_SetTextColor>
 801bdec:	e005      	b.n	801bdfa <_cbDialog+0x182>
		GUI_SetBkColor(GUI_BLACK);
 801bdee:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801bdf2:	f004 faa3 	bl	802033c <GUI_SetBkColor>
		GUI_Clear();
 801bdf6:	f004 fbb1 	bl	802055c <GUI_Clear>
}
 801bdfa:	bd70      	pop	{r4, r5, r6, pc}
    Id    = WM_GetId(pMsg->hWinSrc);
 801bdfc:	6880      	ldr	r0, [r0, #8]
 801bdfe:	f00d f805 	bl	8028e0c <WM_GetId>
    NCode = pMsg->Data.v;
 801be02:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 801be04:	f6a0 0004 	subw	r0, r0, #2052	; 0x804
 801be08:	2803      	cmp	r0, #3
 801be0a:	d8f6      	bhi.n	801bdfa <_cbDialog+0x182>
 801be0c:	e8df f000 	tbb	[pc, r0]
 801be10:	53381d02 	.word	0x53381d02
      switch(NCode) {
 801be14:	2b01      	cmp	r3, #1
 801be16:	d1f0      	bne.n	801bdfa <_cbDialog+0x182>
    	  Button_spectrumState = !Button_spectrumState;
 801be18:	4a43      	ldr	r2, [pc, #268]	; (801bf28 <_cbDialog+0x2b0>)
 801be1a:	6813      	ldr	r3, [r2, #0]
 801be1c:	fab3 f383 	clz	r3, r3
 801be20:	095b      	lsrs	r3, r3, #5
 801be22:	6013      	str	r3, [r2, #0]
    	  if (Button_spectrumState){TEXT_SetTextColor(WM_GetDialogItem(pMsg->hWin, ID_TEXT_1),GUI_ORANGE);}
 801be24:	b143      	cbz	r3, 801be38 <_cbDialog+0x1c0>
 801be26:	f640 0109 	movw	r1, #2057	; 0x809
 801be2a:	6860      	ldr	r0, [r4, #4]
 801be2c:	f00c ff6e 	bl	8028d0c <WM_GetDialogItem>
 801be30:	493e      	ldr	r1, [pc, #248]	; (801bf2c <_cbDialog+0x2b4>)
 801be32:	f00e ff1b 	bl	802ac6c <TEXT_SetTextColor>
 801be36:	e7e0      	b.n	801bdfa <_cbDialog+0x182>
          else{TEXT_SetTextColor(WM_GetDialogItem(pMsg->hWin, ID_TEXT_1),GUI_LIGHTGRAY);}
 801be38:	f640 0109 	movw	r1, #2057	; 0x809
 801be3c:	6860      	ldr	r0, [r4, #4]
 801be3e:	f00c ff65 	bl	8028d0c <WM_GetDialogItem>
 801be42:	4937      	ldr	r1, [pc, #220]	; (801bf20 <_cbDialog+0x2a8>)
 801be44:	f00e ff12 	bl	802ac6c <TEXT_SetTextColor>
 801be48:	e7d7      	b.n	801bdfa <_cbDialog+0x182>
      switch(NCode) {
 801be4a:	2b01      	cmp	r3, #1
 801be4c:	d1d5      	bne.n	801bdfa <_cbDialog+0x182>
    	  Button_NetworkState = !Button_NetworkState;
 801be4e:	4a36      	ldr	r2, [pc, #216]	; (801bf28 <_cbDialog+0x2b0>)
 801be50:	6853      	ldr	r3, [r2, #4]
 801be52:	fab3 f383 	clz	r3, r3
 801be56:	095b      	lsrs	r3, r3, #5
 801be58:	6053      	str	r3, [r2, #4]
    	  if (Button_NetworkState){TEXT_SetTextColor(WM_GetDialogItem(pMsg->hWin, ID_TEXT_2),GUI_ORANGE);}
 801be5a:	b143      	cbz	r3, 801be6e <_cbDialog+0x1f6>
 801be5c:	f640 010a 	movw	r1, #2058	; 0x80a
 801be60:	6860      	ldr	r0, [r4, #4]
 801be62:	f00c ff53 	bl	8028d0c <WM_GetDialogItem>
 801be66:	4931      	ldr	r1, [pc, #196]	; (801bf2c <_cbDialog+0x2b4>)
 801be68:	f00e ff00 	bl	802ac6c <TEXT_SetTextColor>
 801be6c:	e7c5      	b.n	801bdfa <_cbDialog+0x182>
          else{TEXT_SetTextColor(WM_GetDialogItem(pMsg->hWin, ID_TEXT_2),GUI_LIGHTGRAY);}
 801be6e:	f640 010a 	movw	r1, #2058	; 0x80a
 801be72:	6860      	ldr	r0, [r4, #4]
 801be74:	f00c ff4a 	bl	8028d0c <WM_GetDialogItem>
 801be78:	4929      	ldr	r1, [pc, #164]	; (801bf20 <_cbDialog+0x2a8>)
 801be7a:	f00e fef7 	bl	802ac6c <TEXT_SetTextColor>
 801be7e:	e7bc      	b.n	801bdfa <_cbDialog+0x182>
      switch(NCode) {
 801be80:	2b01      	cmp	r3, #1
 801be82:	d1ba      	bne.n	801bdfa <_cbDialog+0x182>
    	  Button_addState = !Button_addState;
 801be84:	4a28      	ldr	r2, [pc, #160]	; (801bf28 <_cbDialog+0x2b0>)
 801be86:	6893      	ldr	r3, [r2, #8]
 801be88:	fab3 f383 	clz	r3, r3
 801be8c:	095b      	lsrs	r3, r3, #5
 801be8e:	6093      	str	r3, [r2, #8]
    	  if (Button_addState){TEXT_SetTextColor(WM_GetDialogItem(pMsg->hWin, ID_TEXT_3),GUI_ORANGE);}
 801be90:	b143      	cbz	r3, 801bea4 <_cbDialog+0x22c>
 801be92:	f640 010c 	movw	r1, #2060	; 0x80c
 801be96:	6860      	ldr	r0, [r4, #4]
 801be98:	f00c ff38 	bl	8028d0c <WM_GetDialogItem>
 801be9c:	4923      	ldr	r1, [pc, #140]	; (801bf2c <_cbDialog+0x2b4>)
 801be9e:	f00e fee5 	bl	802ac6c <TEXT_SetTextColor>
 801bea2:	e7aa      	b.n	801bdfa <_cbDialog+0x182>
          else{TEXT_SetTextColor(WM_GetDialogItem(pMsg->hWin, ID_TEXT_3),GUI_LIGHTGRAY);}
 801bea4:	f640 010c 	movw	r1, #2060	; 0x80c
 801bea8:	6860      	ldr	r0, [r4, #4]
 801beaa:	f00c ff2f 	bl	8028d0c <WM_GetDialogItem>
 801beae:	491c      	ldr	r1, [pc, #112]	; (801bf20 <_cbDialog+0x2a8>)
 801beb0:	f00e fedc 	bl	802ac6c <TEXT_SetTextColor>
 801beb4:	e7a1      	b.n	801bdfa <_cbDialog+0x182>
      switch(NCode) {
 801beb6:	2b01      	cmp	r3, #1
 801beb8:	d19f      	bne.n	801bdfa <_cbDialog+0x182>
       	  Button_okState =!Button_okState;
 801beba:	4a20      	ldr	r2, [pc, #128]	; (801bf3c <_cbDialog+0x2c4>)
 801bebc:	6813      	ldr	r3, [r2, #0]
 801bebe:	fab3 f383 	clz	r3, r3
 801bec2:	095b      	lsrs	r3, r3, #5
 801bec4:	6013      	str	r3, [r2, #0]
      	 if (Button_okState){TEXT_SetTextColor(WM_GetDialogItem(pMsg->hWin, ID_TEXT_4),GUI_ORANGE);}
 801bec6:	b1ab      	cbz	r3, 801bef4 <_cbDialog+0x27c>
 801bec8:	f640 010b 	movw	r1, #2059	; 0x80b
 801becc:	6860      	ldr	r0, [r4, #4]
 801bece:	f00c ff1d 	bl	8028d0c <WM_GetDialogItem>
 801bed2:	4916      	ldr	r1, [pc, #88]	; (801bf2c <_cbDialog+0x2b4>)
 801bed4:	f00e feca 	bl	802ac6c <TEXT_SetTextColor>
       	  pMsg->Data.v = 5; //Payload: Maybe used to select right Widget
 801bed8:	2305      	movs	r3, #5
 801beda:	60e3      	str	r3, [r4, #12]
       	  pMsg->MsgId = WM_USER; //Message
 801bedc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bee0:	6023      	str	r3, [r4, #0]
       	  WM_SendMessage (SettingsButtonWindow, pMsg);
 801bee2:	4d17      	ldr	r5, [pc, #92]	; (801bf40 <_cbDialog+0x2c8>)
 801bee4:	4621      	mov	r1, r4
 801bee6:	6828      	ldr	r0, [r5, #0]
 801bee8:	f00b fcdc 	bl	80278a4 <WM_SendMessage>
       	  WM_Invalidate(SettingsButtonWindow);
 801beec:	6828      	ldr	r0, [r5, #0]
 801beee:	f00b fd03 	bl	80278f8 <WM_InvalidateWindow>
        break;
 801bef2:	e782      	b.n	801bdfa <_cbDialog+0x182>
         else{TEXT_SetTextColor(WM_GetDialogItem(pMsg->hWin, ID_TEXT_4),GUI_LIGHTGRAY);}
 801bef4:	f640 010b 	movw	r1, #2059	; 0x80b
 801bef8:	6860      	ldr	r0, [r4, #4]
 801befa:	f00c ff07 	bl	8028d0c <WM_GetDialogItem>
 801befe:	4908      	ldr	r1, [pc, #32]	; (801bf20 <_cbDialog+0x2a8>)
 801bf00:	f00e feb4 	bl	802ac6c <TEXT_SetTextColor>
 801bf04:	e7e8      	b.n	801bed8 <_cbDialog+0x260>
 801bf06:	bf00      	nop
 801bf08:	0801c005 	.word	0x0801c005
 801bf0c:	0801bfc5 	.word	0x0801bfc5
 801bf10:	0801bf85 	.word	0x0801bf85
 801bf14:	0801bf45 	.word	0x0801bf45
 801bf18:	080429a0 	.word	0x080429a0
 801bf1c:	08038488 	.word	0x08038488
 801bf20:	ffd3d3d3 	.word	0xffd3d3d3
 801bf24:	080429a8 	.word	0x080429a8
 801bf28:	20008860 	.word	0x20008860
 801bf2c:	ffffa500 	.word	0xffffa500
 801bf30:	080429ac 	.word	0x080429ac
 801bf34:	080429b4 	.word	0x080429b4
 801bf38:	080429c0 	.word	0x080429c0
 801bf3c:	2002ef08 	.word	0x2002ef08
 801bf40:	2002e5d4 	.word	0x2002e5d4

0801bf44 <_cbButton_ok>:
{
 801bf44:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 801bf46:	6803      	ldr	r3, [r0, #0]
 801bf48:	2b0f      	cmp	r3, #15
 801bf4a:	d10f      	bne.n	801bf6c <_cbButton_ok+0x28>
    	if(!Button_okState){
 801bf4c:	4b09      	ldr	r3, [pc, #36]	; (801bf74 <_cbButton_ok+0x30>)
 801bf4e:	681b      	ldr	r3, [r3, #0]
 801bf50:	b943      	cbnz	r3, 801bf64 <_cbButton_ok+0x20>
    		GUI_SetColor( GUI_LIGHTGRAY );
 801bf52:	4809      	ldr	r0, [pc, #36]	; (801bf78 <_cbButton_ok+0x34>)
 801bf54:	f004 f9fe 	bl	8020354 <GUI_SetColor>
      GUI_DrawBitmap(&bmOK, 35, 0);
 801bf58:	2200      	movs	r2, #0
 801bf5a:	2123      	movs	r1, #35	; 0x23
 801bf5c:	4807      	ldr	r0, [pc, #28]	; (801bf7c <_cbButton_ok+0x38>)
 801bf5e:	f005 f82d 	bl	8020fbc <GUI_DrawBitmap>
}
 801bf62:	bd08      	pop	{r3, pc}
    		GUI_SetColor( GUI_ORANGE );
 801bf64:	4806      	ldr	r0, [pc, #24]	; (801bf80 <_cbButton_ok+0x3c>)
 801bf66:	f004 f9f5 	bl	8020354 <GUI_SetColor>
 801bf6a:	e7f5      	b.n	801bf58 <_cbButton_ok+0x14>
      BUTTON_Callback(pMsg);
 801bf6c:	f00e f9c6 	bl	802a2fc <BUTTON_Callback>
}
 801bf70:	e7f7      	b.n	801bf62 <_cbButton_ok+0x1e>
 801bf72:	bf00      	nop
 801bf74:	2002ef08 	.word	0x2002ef08
 801bf78:	ffd3d3d3 	.word	0xffd3d3d3
 801bf7c:	08032e80 	.word	0x08032e80
 801bf80:	ffffa500 	.word	0xffffa500

0801bf84 <_cbButton_add>:
{
 801bf84:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 801bf86:	6803      	ldr	r3, [r0, #0]
 801bf88:	2b0f      	cmp	r3, #15
 801bf8a:	d10f      	bne.n	801bfac <_cbButton_add+0x28>
    	if(!Button_addState){
 801bf8c:	4b09      	ldr	r3, [pc, #36]	; (801bfb4 <_cbButton_add+0x30>)
 801bf8e:	689b      	ldr	r3, [r3, #8]
 801bf90:	b943      	cbnz	r3, 801bfa4 <_cbButton_add+0x20>
    		GUI_SetColor( GUI_LIGHTGRAY );
 801bf92:	4809      	ldr	r0, [pc, #36]	; (801bfb8 <_cbButton_add+0x34>)
 801bf94:	f004 f9de 	bl	8020354 <GUI_SetColor>
      GUI_DrawBitmap(&bmadd, 35, 0);
 801bf98:	2200      	movs	r2, #0
 801bf9a:	2123      	movs	r1, #35	; 0x23
 801bf9c:	4807      	ldr	r0, [pc, #28]	; (801bfbc <_cbButton_add+0x38>)
 801bf9e:	f005 f80d 	bl	8020fbc <GUI_DrawBitmap>
}
 801bfa2:	bd08      	pop	{r3, pc}
    		GUI_SetColor( GUI_ORANGE );
 801bfa4:	4806      	ldr	r0, [pc, #24]	; (801bfc0 <_cbButton_add+0x3c>)
 801bfa6:	f004 f9d5 	bl	8020354 <GUI_SetColor>
 801bfaa:	e7f5      	b.n	801bf98 <_cbButton_add+0x14>
      BUTTON_Callback(pMsg);
 801bfac:	f00e f9a6 	bl	802a2fc <BUTTON_Callback>
}
 801bfb0:	e7f7      	b.n	801bfa2 <_cbButton_add+0x1e>
 801bfb2:	bf00      	nop
 801bfb4:	20008860 	.word	0x20008860
 801bfb8:	ffd3d3d3 	.word	0xffd3d3d3
 801bfbc:	08032e94 	.word	0x08032e94
 801bfc0:	ffffa500 	.word	0xffffa500

0801bfc4 <_cbButtonNetwork>:
{
 801bfc4:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 801bfc6:	6803      	ldr	r3, [r0, #0]
 801bfc8:	2b0f      	cmp	r3, #15
 801bfca:	d10f      	bne.n	801bfec <_cbButtonNetwork+0x28>
    	if(!Button_NetworkState){
 801bfcc:	4b09      	ldr	r3, [pc, #36]	; (801bff4 <_cbButtonNetwork+0x30>)
 801bfce:	685b      	ldr	r3, [r3, #4]
 801bfd0:	b943      	cbnz	r3, 801bfe4 <_cbButtonNetwork+0x20>
    		GUI_SetColor( GUI_LIGHTGRAY );
 801bfd2:	4809      	ldr	r0, [pc, #36]	; (801bff8 <_cbButtonNetwork+0x34>)
 801bfd4:	f004 f9be 	bl	8020354 <GUI_SetColor>
      GUI_DrawBitmap(&bmnetwork, 35, 0);
 801bfd8:	2200      	movs	r2, #0
 801bfda:	2123      	movs	r1, #35	; 0x23
 801bfdc:	4807      	ldr	r0, [pc, #28]	; (801bffc <_cbButtonNetwork+0x38>)
 801bfde:	f004 ffed 	bl	8020fbc <GUI_DrawBitmap>
}
 801bfe2:	bd08      	pop	{r3, pc}
    		GUI_SetColor( GUI_ORANGE );
 801bfe4:	4806      	ldr	r0, [pc, #24]	; (801c000 <_cbButtonNetwork+0x3c>)
 801bfe6:	f004 f9b5 	bl	8020354 <GUI_SetColor>
 801bfea:	e7f5      	b.n	801bfd8 <_cbButtonNetwork+0x14>
      BUTTON_Callback(pMsg);
 801bfec:	f00e f986 	bl	802a2fc <BUTTON_Callback>
}
 801bff0:	e7f7      	b.n	801bfe2 <_cbButtonNetwork+0x1e>
 801bff2:	bf00      	nop
 801bff4:	20008860 	.word	0x20008860
 801bff8:	ffd3d3d3 	.word	0xffd3d3d3
 801bffc:	08032ea8 	.word	0x08032ea8
 801c000:	ffffa500 	.word	0xffffa500

0801c004 <_cbButton_spectrum>:
{
 801c004:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 801c006:	6803      	ldr	r3, [r0, #0]
 801c008:	2b0f      	cmp	r3, #15
 801c00a:	d10f      	bne.n	801c02c <_cbButton_spectrum+0x28>
    	if(!Button_spectrumState){
 801c00c:	4b09      	ldr	r3, [pc, #36]	; (801c034 <_cbButton_spectrum+0x30>)
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	b943      	cbnz	r3, 801c024 <_cbButton_spectrum+0x20>
    		GUI_SetColor( GUI_LIGHTGRAY );
 801c012:	4809      	ldr	r0, [pc, #36]	; (801c038 <_cbButton_spectrum+0x34>)
 801c014:	f004 f99e 	bl	8020354 <GUI_SetColor>
      GUI_DrawBitmap(&bmspectrum, 35, 0);
 801c018:	2200      	movs	r2, #0
 801c01a:	2123      	movs	r1, #35	; 0x23
 801c01c:	4807      	ldr	r0, [pc, #28]	; (801c03c <_cbButton_spectrum+0x38>)
 801c01e:	f004 ffcd 	bl	8020fbc <GUI_DrawBitmap>
}
 801c022:	bd08      	pop	{r3, pc}
    		GUI_SetColor( GUI_ORANGE );
 801c024:	4806      	ldr	r0, [pc, #24]	; (801c040 <_cbButton_spectrum+0x3c>)
 801c026:	f004 f995 	bl	8020354 <GUI_SetColor>
 801c02a:	e7f5      	b.n	801c018 <_cbButton_spectrum+0x14>
      BUTTON_Callback(pMsg);
 801c02c:	f00e f966 	bl	802a2fc <BUTTON_Callback>
}
 801c030:	e7f7      	b.n	801c022 <_cbButton_spectrum+0x1e>
 801c032:	bf00      	nop
 801c034:	20008860 	.word	0x20008860
 801c038:	ffd3d3d3 	.word	0xffd3d3d3
 801c03c:	08032ebc 	.word	0x08032ebc
 801c040:	ffffa500 	.word	0xffffa500

0801c044 <CreateSettingsDialog>:
*/




WM_HWIN CreateSettingsDialog(void) {
 801c044:	b510      	push	{r4, lr}
 801c046:	b082      	sub	sp, #8
  //SettingsButtonParent = parentRef;
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 801c048:	f00c fdf6 	bl	8028c38 <WM_GetDesktopWindow>
 801c04c:	2300      	movs	r3, #0
 801c04e:	9301      	str	r3, [sp, #4]
 801c050:	9300      	str	r3, [sp, #0]
 801c052:	4603      	mov	r3, r0
 801c054:	4a05      	ldr	r2, [pc, #20]	; (801c06c <CreateSettingsDialog+0x28>)
 801c056:	210a      	movs	r1, #10
 801c058:	4805      	ldr	r0, [pc, #20]	; (801c070 <CreateSettingsDialog+0x2c>)
 801c05a:	f00e fc59 	bl	802a910 <GUI_CreateDialogBox>
 801c05e:	4604      	mov	r4, r0

  WM_Paint(hWin);
 801c060:	f00c ff80 	bl	8028f64 <WM_Paint>
  return hWin;
}
 801c064:	4620      	mov	r0, r4
 801c066:	b002      	add	sp, #8
 801c068:	bd10      	pop	{r4, pc}
 801c06a:	bf00      	nop
 801c06c:	0801bc79 	.word	0x0801bc79
 801c070:	08032ed0 	.word	0x08032ed0

0801c074 <_cbSettingsButtonDialog>:
  }
}


BUTTON_Handle hButton;
static void _cbSettingsButtonDialog(WM_MESSAGE * pMsg) {
 801c074:	b510      	push	{r4, lr}
 801c076:	b084      	sub	sp, #16
  int           Id, NotificationCode;


  switch(pMsg->MsgId) {
 801c078:	6803      	ldr	r3, [r0, #0]
 801c07a:	2b0f      	cmp	r3, #15
 801c07c:	d02f      	beq.n	801c0de <_cbSettingsButtonDialog+0x6a>
 801c07e:	4604      	mov	r4, r0
 801c080:	dd17      	ble.n	801c0b2 <_cbSettingsButtonDialog+0x3e>
 801c082:	2b26      	cmp	r3, #38	; 0x26
 801c084:	d032      	beq.n	801c0ec <_cbSettingsButtonDialog+0x78>
 801c086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c08a:	d157      	bne.n	801c13c <_cbSettingsButtonDialog+0xc8>
    }
    break;
//////////////////////////////////////////////////////////////////
    case WM_USER:
    	//NotificationCode = pMsg->Data.v;
    	WM_DeleteWindow(SettingsDialog);
 801c08c:	4b2d      	ldr	r3, [pc, #180]	; (801c144 <_cbSettingsButtonDialog+0xd0>)
 801c08e:	6818      	ldr	r0, [r3, #0]
 801c090:	f00b fe66 	bl	8027d60 <WM_DeleteWindow>
    	SettingsButtonState = !SettingsButtonState;
 801c094:	4a2c      	ldr	r2, [pc, #176]	; (801c148 <_cbSettingsButtonDialog+0xd4>)
 801c096:	6813      	ldr	r3, [r2, #0]
 801c098:	fab3 f383 	clz	r3, r3
 801c09c:	095b      	lsrs	r3, r3, #5
 801c09e:	6013      	str	r3, [r2, #0]
    	if(SettingsButtonState){SettingsDialog = CreateSettingsDialog();}
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d146      	bne.n	801c132 <_cbSettingsButtonDialog+0xbe>
    	BUTTON_SetState(hButton, SettingsButtonState);
 801c0a4:	4b28      	ldr	r3, [pc, #160]	; (801c148 <_cbSettingsButtonDialog+0xd4>)
 801c0a6:	6819      	ldr	r1, [r3, #0]
 801c0a8:	4b28      	ldr	r3, [pc, #160]	; (801c14c <_cbSettingsButtonDialog+0xd8>)
 801c0aa:	6818      	ldr	r0, [r3, #0]
 801c0ac:	f00e faa0 	bl	802a5f0 <BUTTON_SetState>

    break;
 801c0b0:	e013      	b.n	801c0da <_cbSettingsButtonDialog+0x66>
  switch(pMsg->MsgId) {
 801c0b2:	2b01      	cmp	r3, #1
 801c0b4:	d142      	bne.n	801c13c <_cbSettingsButtonDialog+0xc8>
    hButton = BUTTON_CreateEx(0, 0, 80, 80, pMsg->hWin, WM_CF_SHOW, 0, ID_SettingsButton);
 801c0b6:	2301      	movs	r3, #1
 801c0b8:	9303      	str	r3, [sp, #12]
 801c0ba:	2000      	movs	r0, #0
 801c0bc:	9002      	str	r0, [sp, #8]
 801c0be:	2302      	movs	r3, #2
 801c0c0:	9301      	str	r3, [sp, #4]
 801c0c2:	6863      	ldr	r3, [r4, #4]
 801c0c4:	9300      	str	r3, [sp, #0]
 801c0c6:	2350      	movs	r3, #80	; 0x50
 801c0c8:	461a      	mov	r2, r3
 801c0ca:	4601      	mov	r1, r0
 801c0cc:	f00e f9ce 	bl	802a46c <BUTTON_CreateEx>
 801c0d0:	4b1e      	ldr	r3, [pc, #120]	; (801c14c <_cbSettingsButtonDialog+0xd8>)
 801c0d2:	6018      	str	r0, [r3, #0]
    WM_SetCallback(hButton, _cbButton_spectrum);
 801c0d4:	491e      	ldr	r1, [pc, #120]	; (801c150 <_cbSettingsButtonDialog+0xdc>)
 801c0d6:	f00c ff9b 	bl	8029010 <WM_SetCallback>
/////////////////////////////////////////////////////////////////
   default:
    WM_DefaultProc(pMsg);
  }

}
 801c0da:	b004      	add	sp, #16
 801c0dc:	bd10      	pop	{r4, pc}
    GUI_SetBkColor(GUI_BLACK);
 801c0de:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801c0e2:	f004 f92b 	bl	802033c <GUI_SetBkColor>
    GUI_Clear();
 801c0e6:	f004 fa39 	bl	802055c <GUI_Clear>
    break;
 801c0ea:	e7f6      	b.n	801c0da <_cbSettingsButtonDialog+0x66>
    Id    = WM_GetId(pMsg->hWinSrc);
 801c0ec:	6880      	ldr	r0, [r0, #8]
 801c0ee:	f00c fe8d 	bl	8028e0c <WM_GetId>
    NotificationCode = pMsg->Data.v;
 801c0f2:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 801c0f4:	2801      	cmp	r0, #1
 801c0f6:	d1f0      	bne.n	801c0da <_cbSettingsButtonDialog+0x66>
      switch(NotificationCode) {
 801c0f8:	2b01      	cmp	r3, #1
 801c0fa:	d1ee      	bne.n	801c0da <_cbSettingsButtonDialog+0x66>
    	  SettingsButtonState = !SettingsButtonState;
 801c0fc:	4a12      	ldr	r2, [pc, #72]	; (801c148 <_cbSettingsButtonDialog+0xd4>)
 801c0fe:	6813      	ldr	r3, [r2, #0]
 801c100:	fab3 f383 	clz	r3, r3
 801c104:	095b      	lsrs	r3, r3, #5
 801c106:	6013      	str	r3, [r2, #0]
    	  if(SettingsButtonState){
 801c108:	b14b      	cbz	r3, 801c11e <_cbSettingsButtonDialog+0xaa>
    	      SettingsDialog = CreateSettingsDialog();
 801c10a:	f7ff ff9b 	bl	801c044 <CreateSettingsDialog>
 801c10e:	4b0d      	ldr	r3, [pc, #52]	; (801c144 <_cbSettingsButtonDialog+0xd0>)
 801c110:	6018      	str	r0, [r3, #0]
    	      BUTTON_SetState(hButton, 1);
 801c112:	2101      	movs	r1, #1
 801c114:	4b0d      	ldr	r3, [pc, #52]	; (801c14c <_cbSettingsButtonDialog+0xd8>)
 801c116:	6818      	ldr	r0, [r3, #0]
 801c118:	f00e fa6a 	bl	802a5f0 <BUTTON_SetState>
 801c11c:	e7dd      	b.n	801c0da <_cbSettingsButtonDialog+0x66>
    	      WM_DeleteWindow(SettingsDialog);
 801c11e:	4b09      	ldr	r3, [pc, #36]	; (801c144 <_cbSettingsButtonDialog+0xd0>)
 801c120:	6818      	ldr	r0, [r3, #0]
 801c122:	f00b fe1d 	bl	8027d60 <WM_DeleteWindow>
    	      BUTTON_SetState(hButton, 0);
 801c126:	2100      	movs	r1, #0
 801c128:	4b08      	ldr	r3, [pc, #32]	; (801c14c <_cbSettingsButtonDialog+0xd8>)
 801c12a:	6818      	ldr	r0, [r3, #0]
 801c12c:	f00e fa60 	bl	802a5f0 <BUTTON_SetState>
 801c130:	e7d3      	b.n	801c0da <_cbSettingsButtonDialog+0x66>
    	if(SettingsButtonState){SettingsDialog = CreateSettingsDialog();}
 801c132:	f7ff ff87 	bl	801c044 <CreateSettingsDialog>
 801c136:	4b03      	ldr	r3, [pc, #12]	; (801c144 <_cbSettingsButtonDialog+0xd0>)
 801c138:	6018      	str	r0, [r3, #0]
 801c13a:	e7b3      	b.n	801c0a4 <_cbSettingsButtonDialog+0x30>
    WM_DefaultProc(pMsg);
 801c13c:	4620      	mov	r0, r4
 801c13e:	f00c fa9d 	bl	802867c <WM_DefaultProc>
}
 801c142:	e7ca      	b.n	801c0da <_cbSettingsButtonDialog+0x66>
 801c144:	2002e60c 	.word	0x2002e60c
 801c148:	2000886c 	.word	0x2000886c
 801c14c:	20030664 	.word	0x20030664
 801c150:	0801c155 	.word	0x0801c155

0801c154 <_cbButton_spectrum>:
{
 801c154:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 801c156:	6803      	ldr	r3, [r0, #0]
 801c158:	2b0f      	cmp	r3, #15
 801c15a:	d110      	bne.n	801c17e <_cbButton_spectrum+0x2a>
    	if(SettingsButtonState == 1){
 801c15c:	4b09      	ldr	r3, [pc, #36]	; (801c184 <_cbButton_spectrum+0x30>)
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	2b01      	cmp	r3, #1
 801c162:	d008      	beq.n	801c176 <_cbButton_spectrum+0x22>
    		GUI_SetColor( GUI_GRAY );
 801c164:	4808      	ldr	r0, [pc, #32]	; (801c188 <_cbButton_spectrum+0x34>)
 801c166:	f004 f8f5 	bl	8020354 <GUI_SetColor>
      GUI_DrawBitmap(&bmmenu, 0, 0);
 801c16a:	2200      	movs	r2, #0
 801c16c:	4611      	mov	r1, r2
 801c16e:	4807      	ldr	r0, [pc, #28]	; (801c18c <_cbButton_spectrum+0x38>)
 801c170:	f004 ff24 	bl	8020fbc <GUI_DrawBitmap>
}
 801c174:	bd08      	pop	{r3, pc}
    		GUI_SetColor( GUI_ORANGE );
 801c176:	4806      	ldr	r0, [pc, #24]	; (801c190 <_cbButton_spectrum+0x3c>)
 801c178:	f004 f8ec 	bl	8020354 <GUI_SetColor>
 801c17c:	e7f5      	b.n	801c16a <_cbButton_spectrum+0x16>
      BUTTON_Callback(pMsg);
 801c17e:	f00e f8bd 	bl	802a2fc <BUTTON_Callback>
}
 801c182:	e7f7      	b.n	801c174 <_cbButton_spectrum+0x20>
 801c184:	2000886c 	.word	0x2000886c
 801c188:	ff808080 	.word	0xff808080
 801c18c:	08035e50 	.word	0x08035e50
 801c190:	ffffa500 	.word	0xffffa500

0801c194 <CreateSettingsButtonWindow>:


WM_HWIN CreateSettingsButtonWindow(void) {
 801c194:	b510      	push	{r4, lr}
 801c196:	b084      	sub	sp, #16



  SettingsButtonWindow = WM_CreateWindow(50, 350, 80, 80, WM_CF_HIDE, _cbSettingsButtonDialog, 0);
 801c198:	2300      	movs	r3, #0
 801c19a:	9302      	str	r3, [sp, #8]
 801c19c:	4a08      	ldr	r2, [pc, #32]	; (801c1c0 <CreateSettingsButtonWindow+0x2c>)
 801c19e:	9201      	str	r2, [sp, #4]
 801c1a0:	9300      	str	r3, [sp, #0]
 801c1a2:	2350      	movs	r3, #80	; 0x50
 801c1a4:	461a      	mov	r2, r3
 801c1a6:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801c1aa:	2032      	movs	r0, #50	; 0x32
 801c1ac:	f00b fcee 	bl	8027b8c <WM_CreateWindow>
 801c1b0:	4c04      	ldr	r4, [pc, #16]	; (801c1c4 <CreateSettingsButtonWindow+0x30>)
 801c1b2:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 801c1b4:	2001      	movs	r0, #1
 801c1b6:	f00d f95b 	bl	8029470 <WM_MULTIBUF_Enable>

  return SettingsButtonWindow;
}
 801c1ba:	6820      	ldr	r0, [r4, #0]
 801c1bc:	b004      	add	sp, #16
 801c1be:	bd10      	pop	{r4, pc}
 801c1c0:	0801c075 	.word	0x0801c075
 801c1c4:	2002e5d4 	.word	0x2002e5d4

0801c1c8 <_cbDialog>:
}




static void _cbDialog(WM_MESSAGE * pMsg) {
 801c1c8:	b510      	push	{r4, lr}
 801c1ca:	b084      	sub	sp, #16
  int           Id, NotificationCode;


  switch(pMsg->MsgId) {
 801c1cc:	6803      	ldr	r3, [r0, #0]
 801c1ce:	2b0f      	cmp	r3, #15
 801c1d0:	d02f      	beq.n	801c232 <_cbDialog+0x6a>
 801c1d2:	4604      	mov	r4, r0
 801c1d4:	dd16      	ble.n	801c204 <_cbDialog+0x3c>
 801c1d6:	2b26      	cmp	r3, #38	; 0x26
 801c1d8:	d04b      	beq.n	801c272 <_cbDialog+0xaa>
 801c1da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c1de:	f040 80c6 	bne.w	801c36e <_cbDialog+0x1a6>
    }
    break;
//////////////////////////////////////////////////////////////////
    case WM_USER:
    	//#########UPDATE Color & value#############//
		if(pMsg->Data.v==0){
 801c1e2:	68c3      	ldr	r3, [r0, #12]
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	f000 80b7 	beq.w	801c358 <_cbDialog+0x190>
		    value = attack.value;
		}
		//#########################################//

		//#########Remote unselect#################//
		else if(pMsg->Data.v==1){
 801c1ea:	2b01      	cmp	r3, #1
 801c1ec:	d11f      	bne.n	801c22e <_cbDialog+0x66>
			Enc_AttackSelected = !Enc_AttackSelected;
 801c1ee:	4b62      	ldr	r3, [pc, #392]	; (801c378 <_cbDialog+0x1b0>)
 801c1f0:	68d9      	ldr	r1, [r3, #12]
 801c1f2:	fab1 f181 	clz	r1, r1
 801c1f6:	0949      	lsrs	r1, r1, #5
 801c1f8:	60d9      	str	r1, [r3, #12]
			BUTTON_SetState(hButton, Enc_AttackSelected);
 801c1fa:	4b60      	ldr	r3, [pc, #384]	; (801c37c <_cbDialog+0x1b4>)
 801c1fc:	6818      	ldr	r0, [r3, #0]
 801c1fe:	f00e f9f7 	bl	802a5f0 <BUTTON_SetState>
 801c202:	e014      	b.n	801c22e <_cbDialog+0x66>
  switch(pMsg->MsgId) {
 801c204:	2b01      	cmp	r3, #1
 801c206:	f040 80b2 	bne.w	801c36e <_cbDialog+0x1a6>
   hButton = BUTTON_CreateEx(0, 0, 140, 100, pMsg->hWin, WM_CF_SHOW, 0, ID_ENC_Button);
 801c20a:	2301      	movs	r3, #1
 801c20c:	9303      	str	r3, [sp, #12]
 801c20e:	2000      	movs	r0, #0
 801c210:	9002      	str	r0, [sp, #8]
 801c212:	2302      	movs	r3, #2
 801c214:	9301      	str	r3, [sp, #4]
 801c216:	6863      	ldr	r3, [r4, #4]
 801c218:	9300      	str	r3, [sp, #0]
 801c21a:	2364      	movs	r3, #100	; 0x64
 801c21c:	228c      	movs	r2, #140	; 0x8c
 801c21e:	4601      	mov	r1, r0
 801c220:	f00e f924 	bl	802a46c <BUTTON_CreateEx>
 801c224:	4b55      	ldr	r3, [pc, #340]	; (801c37c <_cbDialog+0x1b4>)
 801c226:	6018      	str	r0, [r3, #0]
   WM_SetCallback(hButton, _cbENC_Button);
 801c228:	4955      	ldr	r1, [pc, #340]	; (801c380 <_cbDialog+0x1b8>)
 801c22a:	f00c fef1 	bl	8029010 <WM_SetCallback>
    break;
/////////////////////////////////////////////////////////////////
   default:
    WM_DefaultProc(pMsg);
  }
}
 801c22e:	b004      	add	sp, #16
 801c230:	bd10      	pop	{r4, pc}
  	GUI_SetBkColor(COLOR);
 801c232:	4c51      	ldr	r4, [pc, #324]	; (801c378 <_cbDialog+0x1b0>)
 801c234:	6820      	ldr	r0, [r4, #0]
 801c236:	f004 f881 	bl	802033c <GUI_SetBkColor>
  	GUI_Clear();
 801c23a:	f004 f98f 	bl	802055c <GUI_Clear>
    GUI_SetColor(TEXTCOLOR);
 801c23e:	6860      	ldr	r0, [r4, #4]
 801c240:	f004 f888 	bl	8020354 <GUI_SetColor>
    GUI_SetFont(&GUI_Font32B_1);
 801c244:	484f      	ldr	r0, [pc, #316]	; (801c384 <_cbDialog+0x1bc>)
 801c246:	f004 f8e7 	bl	8020418 <GUI_SetFont>
    GUI_DispStringAt("attack", 0, 0);
 801c24a:	2200      	movs	r2, #0
 801c24c:	4611      	mov	r1, r2
 801c24e:	484e      	ldr	r0, [pc, #312]	; (801c388 <_cbDialog+0x1c0>)
 801c250:	f004 fdac 	bl	8020dac <GUI_DispStringAt>
    GUI_SetFont(&GUI_FontD36x48);
 801c254:	484d      	ldr	r0, [pc, #308]	; (801c38c <_cbDialog+0x1c4>)
 801c256:	f004 f8df 	bl	8020418 <GUI_SetFont>
    GUI_GotoXY(0,30);
 801c25a:	211e      	movs	r1, #30
 801c25c:	2000      	movs	r0, #0
 801c25e:	f004 f80f 	bl	8020280 <GUI_GotoXY>
    GUI_DispFloatMin(value, 1);
 801c262:	ed94 0a02 	vldr	s0, [r4, #8]
 801c266:	2001      	movs	r0, #1
 801c268:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801c26c:	f005 fb7a 	bl	8021964 <GUI_DispFloatMin>
    break;
 801c270:	e7dd      	b.n	801c22e <_cbDialog+0x66>
    Id    = WM_GetId(pMsg->hWinSrc);
 801c272:	6880      	ldr	r0, [r0, #8]
 801c274:	f00c fdca 	bl	8028e0c <WM_GetId>
    NotificationCode = pMsg->Data.v;
 801c278:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 801c27a:	2801      	cmp	r0, #1
 801c27c:	d1d7      	bne.n	801c22e <_cbDialog+0x66>
      switch(NotificationCode) {
 801c27e:	2b01      	cmp	r3, #1
 801c280:	d1d5      	bne.n	801c22e <_cbDialog+0x66>
		  if 	  (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 801c282:	4b43      	ldr	r3, [pc, #268]	; (801c390 <_cbDialog+0x1c8>)
 801c284:	681b      	ldr	r3, [r3, #0]
 801c286:	b9eb      	cbnz	r3, 801c2c4 <_cbDialog+0xfc>
		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 801c288:	4b42      	ldr	r3, [pc, #264]	; (801c394 <_cbDialog+0x1cc>)
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d131      	bne.n	801c2f4 <_cbDialog+0x12c>
		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 801c290:	4b41      	ldr	r3, [pc, #260]	; (801c398 <_cbDialog+0x1d0>)
 801c292:	681b      	ldr	r3, [r3, #0]
 801c294:	2b00      	cmp	r3, #0
 801c296:	d138      	bne.n	801c30a <_cbDialog+0x142>
		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 801c298:	4b40      	ldr	r3, [pc, #256]	; (801c39c <_cbDialog+0x1d4>)
 801c29a:	681b      	ldr	r3, [r3, #0]
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	d13f      	bne.n	801c320 <_cbDialog+0x158>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 801c2a0:	4b3f      	ldr	r3, [pc, #252]	; (801c3a0 <_cbDialog+0x1d8>)
 801c2a2:	681b      	ldr	r3, [r3, #0]
 801c2a4:	2b00      	cmp	r3, #0
 801c2a6:	d146      	bne.n	801c336 <_cbDialog+0x16e>
		  else if (Enc_InputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_InputWindow, pMsg);}
 801c2a8:	4b3e      	ldr	r3, [pc, #248]	; (801c3a4 <_cbDialog+0x1dc>)
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	b1a3      	cbz	r3, 801c2d8 <_cbDialog+0x110>
 801c2ae:	2301      	movs	r3, #1
 801c2b0:	60e3      	str	r3, [r4, #12]
 801c2b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c2b6:	6023      	str	r3, [r4, #0]
 801c2b8:	4621      	mov	r1, r4
 801c2ba:	4b3b      	ldr	r3, [pc, #236]	; (801c3a8 <_cbDialog+0x1e0>)
 801c2bc:	6818      	ldr	r0, [r3, #0]
 801c2be:	f00b faf1 	bl	80278a4 <WM_SendMessage>
 801c2c2:	e009      	b.n	801c2d8 <_cbDialog+0x110>
		  if 	  (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 801c2c4:	2301      	movs	r3, #1
 801c2c6:	60e3      	str	r3, [r4, #12]
 801c2c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c2cc:	6023      	str	r3, [r4, #0]
 801c2ce:	4621      	mov	r1, r4
 801c2d0:	4b36      	ldr	r3, [pc, #216]	; (801c3ac <_cbDialog+0x1e4>)
 801c2d2:	6818      	ldr	r0, [r3, #0]
 801c2d4:	f00b fae6 	bl	80278a4 <WM_SendMessage>
    	  Enc_AttackSelected = !Enc_AttackSelected;
 801c2d8:	4a27      	ldr	r2, [pc, #156]	; (801c378 <_cbDialog+0x1b0>)
 801c2da:	68d3      	ldr	r3, [r2, #12]
 801c2dc:	fab3 f383 	clz	r3, r3
 801c2e0:	095b      	lsrs	r3, r3, #5
 801c2e2:	60d3      	str	r3, [r2, #12]
    	  if(Enc_AttackSelected){
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	d031      	beq.n	801c34c <_cbDialog+0x184>
    	      BUTTON_SetState(hButton, 1);
 801c2e8:	2101      	movs	r1, #1
 801c2ea:	4b24      	ldr	r3, [pc, #144]	; (801c37c <_cbDialog+0x1b4>)
 801c2ec:	6818      	ldr	r0, [r3, #0]
 801c2ee:	f00e f97f 	bl	802a5f0 <BUTTON_SetState>
 801c2f2:	e79c      	b.n	801c22e <_cbDialog+0x66>
		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 801c2f4:	2301      	movs	r3, #1
 801c2f6:	60e3      	str	r3, [r4, #12]
 801c2f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c2fc:	6023      	str	r3, [r4, #0]
 801c2fe:	4621      	mov	r1, r4
 801c300:	4b2b      	ldr	r3, [pc, #172]	; (801c3b0 <_cbDialog+0x1e8>)
 801c302:	6818      	ldr	r0, [r3, #0]
 801c304:	f00b face 	bl	80278a4 <WM_SendMessage>
 801c308:	e7e6      	b.n	801c2d8 <_cbDialog+0x110>
		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 801c30a:	2301      	movs	r3, #1
 801c30c:	60e3      	str	r3, [r4, #12]
 801c30e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c312:	6023      	str	r3, [r4, #0]
 801c314:	4621      	mov	r1, r4
 801c316:	4b27      	ldr	r3, [pc, #156]	; (801c3b4 <_cbDialog+0x1ec>)
 801c318:	6818      	ldr	r0, [r3, #0]
 801c31a:	f00b fac3 	bl	80278a4 <WM_SendMessage>
 801c31e:	e7db      	b.n	801c2d8 <_cbDialog+0x110>
		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 801c320:	2301      	movs	r3, #1
 801c322:	60e3      	str	r3, [r4, #12]
 801c324:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c328:	6023      	str	r3, [r4, #0]
 801c32a:	4621      	mov	r1, r4
 801c32c:	4b22      	ldr	r3, [pc, #136]	; (801c3b8 <_cbDialog+0x1f0>)
 801c32e:	6818      	ldr	r0, [r3, #0]
 801c330:	f00b fab8 	bl	80278a4 <WM_SendMessage>
 801c334:	e7d0      	b.n	801c2d8 <_cbDialog+0x110>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 801c336:	2301      	movs	r3, #1
 801c338:	60e3      	str	r3, [r4, #12]
 801c33a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c33e:	6023      	str	r3, [r4, #0]
 801c340:	4621      	mov	r1, r4
 801c342:	4b1e      	ldr	r3, [pc, #120]	; (801c3bc <_cbDialog+0x1f4>)
 801c344:	6818      	ldr	r0, [r3, #0]
 801c346:	f00b faad 	bl	80278a4 <WM_SendMessage>
 801c34a:	e7c5      	b.n	801c2d8 <_cbDialog+0x110>
    	      BUTTON_SetState(hButton, 0);
 801c34c:	2100      	movs	r1, #0
 801c34e:	4b0b      	ldr	r3, [pc, #44]	; (801c37c <_cbDialog+0x1b4>)
 801c350:	6818      	ldr	r0, [r3, #0]
 801c352:	f00e f94d 	bl	802a5f0 <BUTTON_SetState>
 801c356:	e76a      	b.n	801c22e <_cbDialog+0x66>
			TEXTCOLOR = attack.Color;
 801c358:	4a19      	ldr	r2, [pc, #100]	; (801c3c0 <_cbDialog+0x1f8>)
 801c35a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 801c35c:	4b06      	ldr	r3, [pc, #24]	; (801c378 <_cbDialog+0x1b0>)
 801c35e:	6059      	str	r1, [r3, #4]
		    value = attack.value;
 801c360:	edd2 7a00 	vldr	s15, [r2]
 801c364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c368:	edc3 7a02 	vstr	s15, [r3, #8]
 801c36c:	e75f      	b.n	801c22e <_cbDialog+0x66>
    WM_DefaultProc(pMsg);
 801c36e:	4620      	mov	r0, r4
 801c370:	f00c f984 	bl	802867c <WM_DefaultProc>
}
 801c374:	e75b      	b.n	801c22e <_cbDialog+0x66>
 801c376:	bf00      	nop
 801c378:	20008870 	.word	0x20008870
 801c37c:	20030664 	.word	0x20030664
 801c380:	0801c3c5 	.word	0x0801c3c5
 801c384:	08038488 	.word	0x08038488
 801c388:	08042928 	.word	0x08042928
 801c38c:	08040494 	.word	0x08040494
 801c390:	20008890 	.word	0x20008890
 801c394:	200088b4 	.word	0x200088b4
 801c398:	200088c8 	.word	0x200088c8
 801c39c:	200088dc 	.word	0x200088dc
 801c3a0:	200088ec 	.word	0x200088ec
 801c3a4:	200088a4 	.word	0x200088a4
 801c3a8:	2002e724 	.word	0x2002e724
 801c3ac:	2002ee28 	.word	0x2002ee28
 801c3b0:	2002e8d4 	.word	0x2002e8d4
 801c3b4:	2002e55c 	.word	0x2002e55c
 801c3b8:	2002e5d8 	.word	0x2002e5d8
 801c3bc:	2002f178 	.word	0x2002f178
 801c3c0:	2002e610 	.word	0x2002e610

0801c3c4 <_cbENC_Button>:
{
 801c3c4:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 801c3c6:	6803      	ldr	r3, [r0, #0]
 801c3c8:	2b0f      	cmp	r3, #15
 801c3ca:	d10c      	bne.n	801c3e6 <_cbENC_Button+0x22>
    	if(Enc_AttackSelected == 1){
 801c3cc:	4b07      	ldr	r3, [pc, #28]	; (801c3ec <_cbENC_Button+0x28>)
 801c3ce:	68db      	ldr	r3, [r3, #12]
 801c3d0:	2b01      	cmp	r3, #1
 801c3d2:	d004      	beq.n	801c3de <_cbENC_Button+0x1a>
    	    	COLOR = GUI_BLACK;
 801c3d4:	4b05      	ldr	r3, [pc, #20]	; (801c3ec <_cbENC_Button+0x28>)
 801c3d6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 801c3da:	601a      	str	r2, [r3, #0]
}
 801c3dc:	bd08      	pop	{r3, pc}
    			COLOR = GUI_GRAY;
 801c3de:	4b03      	ldr	r3, [pc, #12]	; (801c3ec <_cbENC_Button+0x28>)
 801c3e0:	4a03      	ldr	r2, [pc, #12]	; (801c3f0 <_cbENC_Button+0x2c>)
 801c3e2:	601a      	str	r2, [r3, #0]
 801c3e4:	e7fa      	b.n	801c3dc <_cbENC_Button+0x18>
      BUTTON_Callback(pMsg);
 801c3e6:	f00d ff89 	bl	802a2fc <BUTTON_Callback>
}
 801c3ea:	e7f7      	b.n	801c3dc <_cbENC_Button+0x18>
 801c3ec:	20008870 	.word	0x20008870
 801c3f0:	ff808080 	.word	0xff808080

0801c3f4 <CreateEnc_AttackWindow>:


WM_HWIN CreateEnc_AttackWindow(void) {
 801c3f4:	b510      	push	{r4, lr}
 801c3f6:	b084      	sub	sp, #16

	Enc_AttackWindow = WM_CreateWindow(20, 130, 180, 100, WM_CF_HIDE, _cbDialog, 0);
 801c3f8:	2300      	movs	r3, #0
 801c3fa:	9302      	str	r3, [sp, #8]
 801c3fc:	4a08      	ldr	r2, [pc, #32]	; (801c420 <CreateEnc_AttackWindow+0x2c>)
 801c3fe:	9201      	str	r2, [sp, #4]
 801c400:	9300      	str	r3, [sp, #0]
 801c402:	2364      	movs	r3, #100	; 0x64
 801c404:	22b4      	movs	r2, #180	; 0xb4
 801c406:	2182      	movs	r1, #130	; 0x82
 801c408:	2014      	movs	r0, #20
 801c40a:	f00b fbbf 	bl	8027b8c <WM_CreateWindow>
 801c40e:	4c05      	ldr	r4, [pc, #20]	; (801c424 <CreateEnc_AttackWindow+0x30>)
 801c410:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 801c412:	2001      	movs	r0, #1
 801c414:	f00d f82c 	bl	8029470 <WM_MULTIBUF_Enable>

  return Enc_AttackWindow;
}
 801c418:	6820      	ldr	r0, [r4, #0]
 801c41a:	b004      	add	sp, #16
 801c41c:	bd10      	pop	{r4, pc}
 801c41e:	bf00      	nop
 801c420:	0801c1c9 	.word	0x0801c1c9
 801c424:	2002ef0c 	.word	0x2002ef0c

0801c428 <_cbDialog>:
}




static void _cbDialog(WM_MESSAGE * pMsg) {
 801c428:	b510      	push	{r4, lr}
 801c42a:	b084      	sub	sp, #16
  int           Id, NotificationCode;


  switch(pMsg->MsgId) {
 801c42c:	6803      	ldr	r3, [r0, #0]
 801c42e:	2b0f      	cmp	r3, #15
 801c430:	d02e      	beq.n	801c490 <_cbDialog+0x68>
 801c432:	4604      	mov	r4, r0
 801c434:	dd15      	ble.n	801c462 <_cbDialog+0x3a>
 801c436:	2b26      	cmp	r3, #38	; 0x26
 801c438:	d04a      	beq.n	801c4d0 <_cbDialog+0xa8>
 801c43a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c43e:	f040 80c4 	bne.w	801c5ca <_cbDialog+0x1a2>
    }
    break;
//////////////////////////////////////////////////////////////////
    case WM_USER:
    	//#########UPDATE Color & value#############//
    		if(pMsg->Data.v==0){
 801c442:	68c3      	ldr	r3, [r0, #12]
 801c444:	2b00      	cmp	r3, #0
 801c446:	f000 80b5 	beq.w	801c5b4 <_cbDialog+0x18c>
    			 value = distortion.value;
    		}
    		//#########################################//

    		//#########Remote unselect#################//
    		else if(pMsg->Data.v==1){
 801c44a:	2b01      	cmp	r3, #1
 801c44c:	d11e      	bne.n	801c48c <_cbDialog+0x64>
    			Enc_DistortionSelected = !Enc_DistortionSelected;
 801c44e:	4b61      	ldr	r3, [pc, #388]	; (801c5d4 <_cbDialog+0x1ac>)
 801c450:	6919      	ldr	r1, [r3, #16]
 801c452:	fab1 f181 	clz	r1, r1
 801c456:	0949      	lsrs	r1, r1, #5
 801c458:	6119      	str	r1, [r3, #16]
    			BUTTON_SetState(hButton, Enc_DistortionSelected);
 801c45a:	6818      	ldr	r0, [r3, #0]
 801c45c:	f00e f8c8 	bl	802a5f0 <BUTTON_SetState>
 801c460:	e014      	b.n	801c48c <_cbDialog+0x64>
  switch(pMsg->MsgId) {
 801c462:	2b01      	cmp	r3, #1
 801c464:	f040 80b1 	bne.w	801c5ca <_cbDialog+0x1a2>
   hButton = BUTTON_CreateEx(0, 0, 200, 100, pMsg->hWin, WM_CF_SHOW, 0, ID_ENC_Button);
 801c468:	2301      	movs	r3, #1
 801c46a:	9303      	str	r3, [sp, #12]
 801c46c:	2000      	movs	r0, #0
 801c46e:	9002      	str	r0, [sp, #8]
 801c470:	2302      	movs	r3, #2
 801c472:	9301      	str	r3, [sp, #4]
 801c474:	6863      	ldr	r3, [r4, #4]
 801c476:	9300      	str	r3, [sp, #0]
 801c478:	2364      	movs	r3, #100	; 0x64
 801c47a:	22c8      	movs	r2, #200	; 0xc8
 801c47c:	4601      	mov	r1, r0
 801c47e:	f00d fff5 	bl	802a46c <BUTTON_CreateEx>
 801c482:	4b54      	ldr	r3, [pc, #336]	; (801c5d4 <_cbDialog+0x1ac>)
 801c484:	6018      	str	r0, [r3, #0]
   WM_SetCallback(hButton, _cbENC_Button);
 801c486:	4954      	ldr	r1, [pc, #336]	; (801c5d8 <_cbDialog+0x1b0>)
 801c488:	f00c fdc2 	bl	8029010 <WM_SetCallback>
    break;
/////////////////////////////////////////////////////////////////
   default:
    WM_DefaultProc(pMsg);
  }
}
 801c48c:	b004      	add	sp, #16
 801c48e:	bd10      	pop	{r4, pc}
  	GUI_SetBkColor(COLOR);
 801c490:	4c50      	ldr	r4, [pc, #320]	; (801c5d4 <_cbDialog+0x1ac>)
 801c492:	6860      	ldr	r0, [r4, #4]
 801c494:	f003 ff52 	bl	802033c <GUI_SetBkColor>
  	GUI_Clear();
 801c498:	f004 f860 	bl	802055c <GUI_Clear>
      GUI_SetColor(TEXTCOLOR);
 801c49c:	68a0      	ldr	r0, [r4, #8]
 801c49e:	f003 ff59 	bl	8020354 <GUI_SetColor>
      GUI_SetFont(&GUI_Font32B_1);
 801c4a2:	484e      	ldr	r0, [pc, #312]	; (801c5dc <_cbDialog+0x1b4>)
 801c4a4:	f003 ffb8 	bl	8020418 <GUI_SetFont>
      GUI_DispStringAt("distortion", 0, 0);
 801c4a8:	2200      	movs	r2, #0
 801c4aa:	4611      	mov	r1, r2
 801c4ac:	484c      	ldr	r0, [pc, #304]	; (801c5e0 <_cbDialog+0x1b8>)
 801c4ae:	f004 fc7d 	bl	8020dac <GUI_DispStringAt>
      GUI_SetFont(&GUI_FontD36x48);
 801c4b2:	484c      	ldr	r0, [pc, #304]	; (801c5e4 <_cbDialog+0x1bc>)
 801c4b4:	f003 ffb0 	bl	8020418 <GUI_SetFont>
      GUI_GotoXY(0,30);
 801c4b8:	211e      	movs	r1, #30
 801c4ba:	2000      	movs	r0, #0
 801c4bc:	f003 fee0 	bl	8020280 <GUI_GotoXY>
      GUI_DispFloatMin(value, 1);
 801c4c0:	ed94 0a03 	vldr	s0, [r4, #12]
 801c4c4:	2001      	movs	r0, #1
 801c4c6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801c4ca:	f005 fa4b 	bl	8021964 <GUI_DispFloatMin>
    break;
 801c4ce:	e7dd      	b.n	801c48c <_cbDialog+0x64>
    Id    = WM_GetId(pMsg->hWinSrc);
 801c4d0:	6880      	ldr	r0, [r0, #8]
 801c4d2:	f00c fc9b 	bl	8028e0c <WM_GetId>
    NotificationCode = pMsg->Data.v;
 801c4d6:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 801c4d8:	2801      	cmp	r0, #1
 801c4da:	d1d7      	bne.n	801c48c <_cbDialog+0x64>
      switch(NotificationCode) {
 801c4dc:	2b01      	cmp	r3, #1
 801c4de:	d1d5      	bne.n	801c48c <_cbDialog+0x64>
		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 801c4e0:	4b41      	ldr	r3, [pc, #260]	; (801c5e8 <_cbDialog+0x1c0>)
 801c4e2:	681b      	ldr	r3, [r3, #0]
 801c4e4:	b9eb      	cbnz	r3, 801c522 <_cbDialog+0xfa>
		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 801c4e6:	4b41      	ldr	r3, [pc, #260]	; (801c5ec <_cbDialog+0x1c4>)
 801c4e8:	681b      	ldr	r3, [r3, #0]
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d130      	bne.n	801c550 <_cbDialog+0x128>
		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 801c4ee:	4b40      	ldr	r3, [pc, #256]	; (801c5f0 <_cbDialog+0x1c8>)
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d137      	bne.n	801c566 <_cbDialog+0x13e>
		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 801c4f6:	4b3f      	ldr	r3, [pc, #252]	; (801c5f4 <_cbDialog+0x1cc>)
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	d13e      	bne.n	801c57c <_cbDialog+0x154>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 801c4fe:	4b3e      	ldr	r3, [pc, #248]	; (801c5f8 <_cbDialog+0x1d0>)
 801c500:	681b      	ldr	r3, [r3, #0]
 801c502:	2b00      	cmp	r3, #0
 801c504:	d145      	bne.n	801c592 <_cbDialog+0x16a>
		  else if (Enc_InputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_InputWindow, pMsg);}
 801c506:	4b3d      	ldr	r3, [pc, #244]	; (801c5fc <_cbDialog+0x1d4>)
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	b1a3      	cbz	r3, 801c536 <_cbDialog+0x10e>
 801c50c:	2301      	movs	r3, #1
 801c50e:	60e3      	str	r3, [r4, #12]
 801c510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c514:	6023      	str	r3, [r4, #0]
 801c516:	4621      	mov	r1, r4
 801c518:	4b39      	ldr	r3, [pc, #228]	; (801c600 <_cbDialog+0x1d8>)
 801c51a:	6818      	ldr	r0, [r3, #0]
 801c51c:	f00b f9c2 	bl	80278a4 <WM_SendMessage>
 801c520:	e009      	b.n	801c536 <_cbDialog+0x10e>
		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 801c522:	2301      	movs	r3, #1
 801c524:	60e3      	str	r3, [r4, #12]
 801c526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c52a:	6023      	str	r3, [r4, #0]
 801c52c:	4621      	mov	r1, r4
 801c52e:	4b35      	ldr	r3, [pc, #212]	; (801c604 <_cbDialog+0x1dc>)
 801c530:	6818      	ldr	r0, [r3, #0]
 801c532:	f00b f9b7 	bl	80278a4 <WM_SendMessage>
    	  Enc_DistortionSelected = !Enc_DistortionSelected;
 801c536:	4a27      	ldr	r2, [pc, #156]	; (801c5d4 <_cbDialog+0x1ac>)
 801c538:	6913      	ldr	r3, [r2, #16]
 801c53a:	fab3 f383 	clz	r3, r3
 801c53e:	095b      	lsrs	r3, r3, #5
 801c540:	6113      	str	r3, [r2, #16]
    	  if(Enc_DistortionSelected){
 801c542:	2b00      	cmp	r3, #0
 801c544:	d030      	beq.n	801c5a8 <_cbDialog+0x180>
    	      BUTTON_SetState(hButton, 1);
 801c546:	2101      	movs	r1, #1
 801c548:	6810      	ldr	r0, [r2, #0]
 801c54a:	f00e f851 	bl	802a5f0 <BUTTON_SetState>
 801c54e:	e79d      	b.n	801c48c <_cbDialog+0x64>
		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 801c550:	2301      	movs	r3, #1
 801c552:	60e3      	str	r3, [r4, #12]
 801c554:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c558:	6023      	str	r3, [r4, #0]
 801c55a:	4621      	mov	r1, r4
 801c55c:	4b2a      	ldr	r3, [pc, #168]	; (801c608 <_cbDialog+0x1e0>)
 801c55e:	6818      	ldr	r0, [r3, #0]
 801c560:	f00b f9a0 	bl	80278a4 <WM_SendMessage>
 801c564:	e7e7      	b.n	801c536 <_cbDialog+0x10e>
		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 801c566:	2301      	movs	r3, #1
 801c568:	60e3      	str	r3, [r4, #12]
 801c56a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c56e:	6023      	str	r3, [r4, #0]
 801c570:	4621      	mov	r1, r4
 801c572:	4b26      	ldr	r3, [pc, #152]	; (801c60c <_cbDialog+0x1e4>)
 801c574:	6818      	ldr	r0, [r3, #0]
 801c576:	f00b f995 	bl	80278a4 <WM_SendMessage>
 801c57a:	e7dc      	b.n	801c536 <_cbDialog+0x10e>
		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 801c57c:	2301      	movs	r3, #1
 801c57e:	60e3      	str	r3, [r4, #12]
 801c580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c584:	6023      	str	r3, [r4, #0]
 801c586:	4621      	mov	r1, r4
 801c588:	4b21      	ldr	r3, [pc, #132]	; (801c610 <_cbDialog+0x1e8>)
 801c58a:	6818      	ldr	r0, [r3, #0]
 801c58c:	f00b f98a 	bl	80278a4 <WM_SendMessage>
 801c590:	e7d1      	b.n	801c536 <_cbDialog+0x10e>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 801c592:	2301      	movs	r3, #1
 801c594:	60e3      	str	r3, [r4, #12]
 801c596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c59a:	6023      	str	r3, [r4, #0]
 801c59c:	4621      	mov	r1, r4
 801c59e:	4b1d      	ldr	r3, [pc, #116]	; (801c614 <_cbDialog+0x1ec>)
 801c5a0:	6818      	ldr	r0, [r3, #0]
 801c5a2:	f00b f97f 	bl	80278a4 <WM_SendMessage>
 801c5a6:	e7c6      	b.n	801c536 <_cbDialog+0x10e>
    	      BUTTON_SetState(hButton, 0);
 801c5a8:	2100      	movs	r1, #0
 801c5aa:	4b0a      	ldr	r3, [pc, #40]	; (801c5d4 <_cbDialog+0x1ac>)
 801c5ac:	6818      	ldr	r0, [r3, #0]
 801c5ae:	f00e f81f 	bl	802a5f0 <BUTTON_SetState>
 801c5b2:	e76b      	b.n	801c48c <_cbDialog+0x64>
    			TEXTCOLOR = distortion.Color;
 801c5b4:	4a18      	ldr	r2, [pc, #96]	; (801c618 <_cbDialog+0x1f0>)
 801c5b6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 801c5b8:	4b06      	ldr	r3, [pc, #24]	; (801c5d4 <_cbDialog+0x1ac>)
 801c5ba:	6099      	str	r1, [r3, #8]
    			 value = distortion.value;
 801c5bc:	edd2 7a00 	vldr	s15, [r2]
 801c5c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c5c4:	edc3 7a03 	vstr	s15, [r3, #12]
 801c5c8:	e760      	b.n	801c48c <_cbDialog+0x64>
    WM_DefaultProc(pMsg);
 801c5ca:	4620      	mov	r0, r4
 801c5cc:	f00c f856 	bl	802867c <WM_DefaultProc>
}
 801c5d0:	e75c      	b.n	801c48c <_cbDialog+0x64>
 801c5d2:	bf00      	nop
 801c5d4:	20008880 	.word	0x20008880
 801c5d8:	0801c61d 	.word	0x0801c61d
 801c5dc:	08038488 	.word	0x08038488
 801c5e0:	0804294c 	.word	0x0804294c
 801c5e4:	08040494 	.word	0x08040494
 801c5e8:	2000887c 	.word	0x2000887c
 801c5ec:	200088b4 	.word	0x200088b4
 801c5f0:	200088c8 	.word	0x200088c8
 801c5f4:	200088dc 	.word	0x200088dc
 801c5f8:	200088ec 	.word	0x200088ec
 801c5fc:	200088a4 	.word	0x200088a4
 801c600:	2002e724 	.word	0x2002e724
 801c604:	2002ef0c 	.word	0x2002ef0c
 801c608:	2002e8d4 	.word	0x2002e8d4
 801c60c:	2002e55c 	.word	0x2002e55c
 801c610:	2002e5d8 	.word	0x2002e5d8
 801c614:	2002f178 	.word	0x2002f178
 801c618:	2002eb64 	.word	0x2002eb64

0801c61c <_cbENC_Button>:
{
 801c61c:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 801c61e:	6803      	ldr	r3, [r0, #0]
 801c620:	2b0f      	cmp	r3, #15
 801c622:	d10c      	bne.n	801c63e <_cbENC_Button+0x22>
    	if(Enc_DistortionSelected == 1){
 801c624:	4b07      	ldr	r3, [pc, #28]	; (801c644 <_cbENC_Button+0x28>)
 801c626:	691b      	ldr	r3, [r3, #16]
 801c628:	2b01      	cmp	r3, #1
 801c62a:	d004      	beq.n	801c636 <_cbENC_Button+0x1a>
    	    	COLOR = GUI_BLACK;
 801c62c:	4b05      	ldr	r3, [pc, #20]	; (801c644 <_cbENC_Button+0x28>)
 801c62e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 801c632:	605a      	str	r2, [r3, #4]
}
 801c634:	bd08      	pop	{r3, pc}
    			COLOR = GUI_GRAY;
 801c636:	4b03      	ldr	r3, [pc, #12]	; (801c644 <_cbENC_Button+0x28>)
 801c638:	4a03      	ldr	r2, [pc, #12]	; (801c648 <_cbENC_Button+0x2c>)
 801c63a:	605a      	str	r2, [r3, #4]
 801c63c:	e7fa      	b.n	801c634 <_cbENC_Button+0x18>
      BUTTON_Callback(pMsg);
 801c63e:	f00d fe5d 	bl	802a2fc <BUTTON_Callback>
}
 801c642:	e7f7      	b.n	801c634 <_cbENC_Button+0x18>
 801c644:	20008880 	.word	0x20008880
 801c648:	ff808080 	.word	0xff808080

0801c64c <CreateEnc_DistortionWindow>:


WM_HWIN CreateEnc_DistortionWindow(void) {
 801c64c:	b510      	push	{r4, lr}
 801c64e:	b084      	sub	sp, #16

  Enc_DistortionWindow = WM_CreateWindow(600, 20, 180, 100, WM_CF_HIDE, _cbDialog, 0);
 801c650:	2300      	movs	r3, #0
 801c652:	9302      	str	r3, [sp, #8]
 801c654:	4a08      	ldr	r2, [pc, #32]	; (801c678 <CreateEnc_DistortionWindow+0x2c>)
 801c656:	9201      	str	r2, [sp, #4]
 801c658:	9300      	str	r3, [sp, #0]
 801c65a:	2364      	movs	r3, #100	; 0x64
 801c65c:	22b4      	movs	r2, #180	; 0xb4
 801c65e:	2114      	movs	r1, #20
 801c660:	f44f 7016 	mov.w	r0, #600	; 0x258
 801c664:	f00b fa92 	bl	8027b8c <WM_CreateWindow>
 801c668:	4c04      	ldr	r4, [pc, #16]	; (801c67c <CreateEnc_DistortionWindow+0x30>)
 801c66a:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 801c66c:	2001      	movs	r0, #1
 801c66e:	f00c feff 	bl	8029470 <WM_MULTIBUF_Enable>

  return Enc_DistortionWindow;
}
 801c672:	6820      	ldr	r0, [r4, #0]
 801c674:	b004      	add	sp, #16
 801c676:	bd10      	pop	{r4, pc}
 801c678:	0801c429 	.word	0x0801c429
 801c67c:	2002ee28 	.word	0x2002ee28

0801c680 <_cbDialog>:
}




static void _cbDialog(WM_MESSAGE * pMsg) {
 801c680:	b510      	push	{r4, lr}
 801c682:	b084      	sub	sp, #16
  int           Id, NotificationCode;


  switch(pMsg->MsgId) {
 801c684:	6803      	ldr	r3, [r0, #0]
 801c686:	2b0f      	cmp	r3, #15
 801c688:	d02e      	beq.n	801c6e8 <_cbDialog+0x68>
 801c68a:	4604      	mov	r4, r0
 801c68c:	dd15      	ble.n	801c6ba <_cbDialog+0x3a>
 801c68e:	2b26      	cmp	r3, #38	; 0x26
 801c690:	d04a      	beq.n	801c728 <_cbDialog+0xa8>
 801c692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c696:	f040 80c4 	bne.w	801c822 <_cbDialog+0x1a2>
    }
    break;
//////////////////////////////////////////////////////////////////
    case WM_USER:
    	//#########UPDATE Color & value#############//
		if(pMsg->Data.v==0){
 801c69a:	68c3      	ldr	r3, [r0, #12]
 801c69c:	2b00      	cmp	r3, #0
 801c69e:	f000 80b5 	beq.w	801c80c <_cbDialog+0x18c>
		    value = input.value;
		}
		//#########################################//

		//#########Remote unselect#################//
		else if(pMsg->Data.v==1){
 801c6a2:	2b01      	cmp	r3, #1
 801c6a4:	d11e      	bne.n	801c6e4 <_cbDialog+0x64>
			Enc_InputSelected = !Enc_InputSelected;
 801c6a6:	4b61      	ldr	r3, [pc, #388]	; (801c82c <_cbDialog+0x1ac>)
 801c6a8:	6919      	ldr	r1, [r3, #16]
 801c6aa:	fab1 f181 	clz	r1, r1
 801c6ae:	0949      	lsrs	r1, r1, #5
 801c6b0:	6119      	str	r1, [r3, #16]
			BUTTON_SetState(hButton, Enc_InputSelected);
 801c6b2:	6818      	ldr	r0, [r3, #0]
 801c6b4:	f00d ff9c 	bl	802a5f0 <BUTTON_SetState>
 801c6b8:	e014      	b.n	801c6e4 <_cbDialog+0x64>
  switch(pMsg->MsgId) {
 801c6ba:	2b01      	cmp	r3, #1
 801c6bc:	f040 80b1 	bne.w	801c822 <_cbDialog+0x1a2>
   hButton = BUTTON_CreateEx(0, 0, 180, 100, pMsg->hWin, WM_CF_SHOW, 0, ID_ENC_Button);
 801c6c0:	2301      	movs	r3, #1
 801c6c2:	9303      	str	r3, [sp, #12]
 801c6c4:	2000      	movs	r0, #0
 801c6c6:	9002      	str	r0, [sp, #8]
 801c6c8:	2302      	movs	r3, #2
 801c6ca:	9301      	str	r3, [sp, #4]
 801c6cc:	6863      	ldr	r3, [r4, #4]
 801c6ce:	9300      	str	r3, [sp, #0]
 801c6d0:	2364      	movs	r3, #100	; 0x64
 801c6d2:	22b4      	movs	r2, #180	; 0xb4
 801c6d4:	4601      	mov	r1, r0
 801c6d6:	f00d fec9 	bl	802a46c <BUTTON_CreateEx>
 801c6da:	4b54      	ldr	r3, [pc, #336]	; (801c82c <_cbDialog+0x1ac>)
 801c6dc:	6018      	str	r0, [r3, #0]
   WM_SetCallback(hButton, _cbENC_Button);
 801c6de:	4954      	ldr	r1, [pc, #336]	; (801c830 <_cbDialog+0x1b0>)
 801c6e0:	f00c fc96 	bl	8029010 <WM_SetCallback>
    break;
/////////////////////////////////////////////////////////////////
   default:
    WM_DefaultProc(pMsg);
  }
}
 801c6e4:	b004      	add	sp, #16
 801c6e6:	bd10      	pop	{r4, pc}
  	GUI_SetBkColor(COLOR);
 801c6e8:	4c50      	ldr	r4, [pc, #320]	; (801c82c <_cbDialog+0x1ac>)
 801c6ea:	6860      	ldr	r0, [r4, #4]
 801c6ec:	f003 fe26 	bl	802033c <GUI_SetBkColor>
  	GUI_Clear();
 801c6f0:	f003 ff34 	bl	802055c <GUI_Clear>
      GUI_SetColor(TEXTCOLOR);
 801c6f4:	68a0      	ldr	r0, [r4, #8]
 801c6f6:	f003 fe2d 	bl	8020354 <GUI_SetColor>
      GUI_SetFont(&GUI_Font32B_1);
 801c6fa:	484e      	ldr	r0, [pc, #312]	; (801c834 <_cbDialog+0x1b4>)
 801c6fc:	f003 fe8c 	bl	8020418 <GUI_SetFont>
      GUI_DispStringAt("input", 0, 0);
 801c700:	2200      	movs	r2, #0
 801c702:	4611      	mov	r1, r2
 801c704:	484c      	ldr	r0, [pc, #304]	; (801c838 <_cbDialog+0x1b8>)
 801c706:	f004 fb51 	bl	8020dac <GUI_DispStringAt>
      GUI_SetFont(&GUI_FontD36x48);
 801c70a:	484c      	ldr	r0, [pc, #304]	; (801c83c <_cbDialog+0x1bc>)
 801c70c:	f003 fe84 	bl	8020418 <GUI_SetFont>
      GUI_GotoXY(0,30);
 801c710:	211e      	movs	r1, #30
 801c712:	2000      	movs	r0, #0
 801c714:	f003 fdb4 	bl	8020280 <GUI_GotoXY>
      GUI_DispFloatMin(value, 1);
 801c718:	ed94 0a03 	vldr	s0, [r4, #12]
 801c71c:	2001      	movs	r0, #1
 801c71e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801c722:	f005 f91f 	bl	8021964 <GUI_DispFloatMin>
    break;
 801c726:	e7dd      	b.n	801c6e4 <_cbDialog+0x64>
    Id    = WM_GetId(pMsg->hWinSrc);
 801c728:	6880      	ldr	r0, [r0, #8]
 801c72a:	f00c fb6f 	bl	8028e0c <WM_GetId>
    NotificationCode = pMsg->Data.v;
 801c72e:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 801c730:	2801      	cmp	r0, #1
 801c732:	d1d7      	bne.n	801c6e4 <_cbDialog+0x64>
      switch(NotificationCode) {
 801c734:	2b01      	cmp	r3, #1
 801c736:	d1d5      	bne.n	801c6e4 <_cbDialog+0x64>
    		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 801c738:	4b41      	ldr	r3, [pc, #260]	; (801c840 <_cbDialog+0x1c0>)
 801c73a:	681b      	ldr	r3, [r3, #0]
 801c73c:	b9eb      	cbnz	r3, 801c77a <_cbDialog+0xfa>
    		  else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 801c73e:	4b41      	ldr	r3, [pc, #260]	; (801c844 <_cbDialog+0x1c4>)
 801c740:	681b      	ldr	r3, [r3, #0]
 801c742:	2b00      	cmp	r3, #0
 801c744:	d130      	bne.n	801c7a8 <_cbDialog+0x128>
    		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 801c746:	4b40      	ldr	r3, [pc, #256]	; (801c848 <_cbDialog+0x1c8>)
 801c748:	681b      	ldr	r3, [r3, #0]
 801c74a:	2b00      	cmp	r3, #0
 801c74c:	d137      	bne.n	801c7be <_cbDialog+0x13e>
    		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 801c74e:	4b3f      	ldr	r3, [pc, #252]	; (801c84c <_cbDialog+0x1cc>)
 801c750:	681b      	ldr	r3, [r3, #0]
 801c752:	2b00      	cmp	r3, #0
 801c754:	d13e      	bne.n	801c7d4 <_cbDialog+0x154>
    		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 801c756:	4b3e      	ldr	r3, [pc, #248]	; (801c850 <_cbDialog+0x1d0>)
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d145      	bne.n	801c7ea <_cbDialog+0x16a>
    		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 801c75e:	4b3d      	ldr	r3, [pc, #244]	; (801c854 <_cbDialog+0x1d4>)
 801c760:	681b      	ldr	r3, [r3, #0]
 801c762:	b1a3      	cbz	r3, 801c78e <_cbDialog+0x10e>
 801c764:	2301      	movs	r3, #1
 801c766:	60e3      	str	r3, [r4, #12]
 801c768:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c76c:	6023      	str	r3, [r4, #0]
 801c76e:	4621      	mov	r1, r4
 801c770:	4b39      	ldr	r3, [pc, #228]	; (801c858 <_cbDialog+0x1d8>)
 801c772:	6818      	ldr	r0, [r3, #0]
 801c774:	f00b f896 	bl	80278a4 <WM_SendMessage>
 801c778:	e009      	b.n	801c78e <_cbDialog+0x10e>
    		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 801c77a:	2301      	movs	r3, #1
 801c77c:	60e3      	str	r3, [r4, #12]
 801c77e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c782:	6023      	str	r3, [r4, #0]
 801c784:	4621      	mov	r1, r4
 801c786:	4b35      	ldr	r3, [pc, #212]	; (801c85c <_cbDialog+0x1dc>)
 801c788:	6818      	ldr	r0, [r3, #0]
 801c78a:	f00b f88b 	bl	80278a4 <WM_SendMessage>
        	  Enc_InputSelected = !Enc_InputSelected;
 801c78e:	4a27      	ldr	r2, [pc, #156]	; (801c82c <_cbDialog+0x1ac>)
 801c790:	6913      	ldr	r3, [r2, #16]
 801c792:	fab3 f383 	clz	r3, r3
 801c796:	095b      	lsrs	r3, r3, #5
 801c798:	6113      	str	r3, [r2, #16]
        	  if(Enc_InputSelected){
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	d030      	beq.n	801c800 <_cbDialog+0x180>
        	      BUTTON_SetState(hButton, 1);
 801c79e:	2101      	movs	r1, #1
 801c7a0:	6810      	ldr	r0, [r2, #0]
 801c7a2:	f00d ff25 	bl	802a5f0 <BUTTON_SetState>
 801c7a6:	e79d      	b.n	801c6e4 <_cbDialog+0x64>
    		  else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 801c7a8:	2301      	movs	r3, #1
 801c7aa:	60e3      	str	r3, [r4, #12]
 801c7ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c7b0:	6023      	str	r3, [r4, #0]
 801c7b2:	4621      	mov	r1, r4
 801c7b4:	4b2a      	ldr	r3, [pc, #168]	; (801c860 <_cbDialog+0x1e0>)
 801c7b6:	6818      	ldr	r0, [r3, #0]
 801c7b8:	f00b f874 	bl	80278a4 <WM_SendMessage>
 801c7bc:	e7e7      	b.n	801c78e <_cbDialog+0x10e>
    		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 801c7be:	2301      	movs	r3, #1
 801c7c0:	60e3      	str	r3, [r4, #12]
 801c7c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c7c6:	6023      	str	r3, [r4, #0]
 801c7c8:	4621      	mov	r1, r4
 801c7ca:	4b26      	ldr	r3, [pc, #152]	; (801c864 <_cbDialog+0x1e4>)
 801c7cc:	6818      	ldr	r0, [r3, #0]
 801c7ce:	f00b f869 	bl	80278a4 <WM_SendMessage>
 801c7d2:	e7dc      	b.n	801c78e <_cbDialog+0x10e>
    		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 801c7d4:	2301      	movs	r3, #1
 801c7d6:	60e3      	str	r3, [r4, #12]
 801c7d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c7dc:	6023      	str	r3, [r4, #0]
 801c7de:	4621      	mov	r1, r4
 801c7e0:	4b21      	ldr	r3, [pc, #132]	; (801c868 <_cbDialog+0x1e8>)
 801c7e2:	6818      	ldr	r0, [r3, #0]
 801c7e4:	f00b f85e 	bl	80278a4 <WM_SendMessage>
 801c7e8:	e7d1      	b.n	801c78e <_cbDialog+0x10e>
    		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 801c7ea:	2301      	movs	r3, #1
 801c7ec:	60e3      	str	r3, [r4, #12]
 801c7ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c7f2:	6023      	str	r3, [r4, #0]
 801c7f4:	4621      	mov	r1, r4
 801c7f6:	4b1d      	ldr	r3, [pc, #116]	; (801c86c <_cbDialog+0x1ec>)
 801c7f8:	6818      	ldr	r0, [r3, #0]
 801c7fa:	f00b f853 	bl	80278a4 <WM_SendMessage>
 801c7fe:	e7c6      	b.n	801c78e <_cbDialog+0x10e>
        	      BUTTON_SetState(hButton, 0);
 801c800:	2100      	movs	r1, #0
 801c802:	4b0a      	ldr	r3, [pc, #40]	; (801c82c <_cbDialog+0x1ac>)
 801c804:	6818      	ldr	r0, [r3, #0]
 801c806:	f00d fef3 	bl	802a5f0 <BUTTON_SetState>
 801c80a:	e76b      	b.n	801c6e4 <_cbDialog+0x64>
			TEXTCOLOR = input.Color;
 801c80c:	4a18      	ldr	r2, [pc, #96]	; (801c870 <_cbDialog+0x1f0>)
 801c80e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 801c810:	4b06      	ldr	r3, [pc, #24]	; (801c82c <_cbDialog+0x1ac>)
 801c812:	6099      	str	r1, [r3, #8]
		    value = input.value;
 801c814:	edd2 7a00 	vldr	s15, [r2]
 801c818:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c81c:	edc3 7a03 	vstr	s15, [r3, #12]
 801c820:	e760      	b.n	801c6e4 <_cbDialog+0x64>
    WM_DefaultProc(pMsg);
 801c822:	4620      	mov	r0, r4
 801c824:	f00b ff2a 	bl	802867c <WM_DefaultProc>
}
 801c828:	e75c      	b.n	801c6e4 <_cbDialog+0x64>
 801c82a:	bf00      	nop
 801c82c:	20008894 	.word	0x20008894
 801c830:	0801c875 	.word	0x0801c875
 801c834:	08038488 	.word	0x08038488
 801c838:	08042920 	.word	0x08042920
 801c83c:	08040494 	.word	0x08040494
 801c840:	2000887c 	.word	0x2000887c
 801c844:	20008890 	.word	0x20008890
 801c848:	200088b4 	.word	0x200088b4
 801c84c:	200088c8 	.word	0x200088c8
 801c850:	200088dc 	.word	0x200088dc
 801c854:	200088ec 	.word	0x200088ec
 801c858:	2002f178 	.word	0x2002f178
 801c85c:	2002ef0c 	.word	0x2002ef0c
 801c860:	2002ee28 	.word	0x2002ee28
 801c864:	2002e8d4 	.word	0x2002e8d4
 801c868:	2002e55c 	.word	0x2002e55c
 801c86c:	2002e5d8 	.word	0x2002e5d8
 801c870:	2002e5e4 	.word	0x2002e5e4

0801c874 <_cbENC_Button>:
{
 801c874:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 801c876:	6803      	ldr	r3, [r0, #0]
 801c878:	2b0f      	cmp	r3, #15
 801c87a:	d10c      	bne.n	801c896 <_cbENC_Button+0x22>
    	if(Enc_InputSelected == 1){
 801c87c:	4b07      	ldr	r3, [pc, #28]	; (801c89c <_cbENC_Button+0x28>)
 801c87e:	691b      	ldr	r3, [r3, #16]
 801c880:	2b01      	cmp	r3, #1
 801c882:	d004      	beq.n	801c88e <_cbENC_Button+0x1a>
    	    	COLOR = GUI_BLACK;
 801c884:	4b05      	ldr	r3, [pc, #20]	; (801c89c <_cbENC_Button+0x28>)
 801c886:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 801c88a:	605a      	str	r2, [r3, #4]
}
 801c88c:	bd08      	pop	{r3, pc}
    			COLOR = GUI_GRAY;
 801c88e:	4b03      	ldr	r3, [pc, #12]	; (801c89c <_cbENC_Button+0x28>)
 801c890:	4a03      	ldr	r2, [pc, #12]	; (801c8a0 <_cbENC_Button+0x2c>)
 801c892:	605a      	str	r2, [r3, #4]
 801c894:	e7fa      	b.n	801c88c <_cbENC_Button+0x18>
      BUTTON_Callback(pMsg);
 801c896:	f00d fd31 	bl	802a2fc <BUTTON_Callback>
}
 801c89a:	e7f7      	b.n	801c88c <_cbENC_Button+0x18>
 801c89c:	20008894 	.word	0x20008894
 801c8a0:	ff808080 	.word	0xff808080

0801c8a4 <CreateEnc_InputWindow>:


WM_HWIN CreateEnc_InputWindow(void) {
 801c8a4:	b510      	push	{r4, lr}
 801c8a6:	b084      	sub	sp, #16

  Enc_InputWindow = WM_CreateWindow(20, 20, 180, 100, WM_CF_HIDE, _cbDialog, 0);
 801c8a8:	2300      	movs	r3, #0
 801c8aa:	9302      	str	r3, [sp, #8]
 801c8ac:	4a08      	ldr	r2, [pc, #32]	; (801c8d0 <CreateEnc_InputWindow+0x2c>)
 801c8ae:	9201      	str	r2, [sp, #4]
 801c8b0:	9300      	str	r3, [sp, #0]
 801c8b2:	2364      	movs	r3, #100	; 0x64
 801c8b4:	22b4      	movs	r2, #180	; 0xb4
 801c8b6:	2114      	movs	r1, #20
 801c8b8:	4608      	mov	r0, r1
 801c8ba:	f00b f967 	bl	8027b8c <WM_CreateWindow>
 801c8be:	4c05      	ldr	r4, [pc, #20]	; (801c8d4 <CreateEnc_InputWindow+0x30>)
 801c8c0:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 801c8c2:	2001      	movs	r0, #1
 801c8c4:	f00c fdd4 	bl	8029470 <WM_MULTIBUF_Enable>

  return Enc_InputWindow;
}
 801c8c8:	6820      	ldr	r0, [r4, #0]
 801c8ca:	b004      	add	sp, #16
 801c8cc:	bd10      	pop	{r4, pc}
 801c8ce:	bf00      	nop
 801c8d0:	0801c681 	.word	0x0801c681
 801c8d4:	2002e724 	.word	0x2002e724

0801c8d8 <_cbDialog>:
}




static void _cbDialog(WM_MESSAGE * pMsg) {
 801c8d8:	b510      	push	{r4, lr}
 801c8da:	b084      	sub	sp, #16
  int           Id, NotificationCode;


  switch(pMsg->MsgId) {
 801c8dc:	6803      	ldr	r3, [r0, #0]
 801c8de:	2b0f      	cmp	r3, #15
 801c8e0:	d02f      	beq.n	801c942 <_cbDialog+0x6a>
 801c8e2:	4604      	mov	r4, r0
 801c8e4:	dd16      	ble.n	801c914 <_cbDialog+0x3c>
 801c8e6:	2b26      	cmp	r3, #38	; 0x26
 801c8e8:	d04b      	beq.n	801c982 <_cbDialog+0xaa>
 801c8ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c8ee:	f040 80c6 	bne.w	801ca7e <_cbDialog+0x1a6>
    }
    break;
//////////////////////////////////////////////////////////////////
    case WM_USER:
    	//#########UPDATE Color & value#############//
		if(pMsg->Data.v==0){
 801c8f2:	68c3      	ldr	r3, [r0, #12]
 801c8f4:	2b00      	cmp	r3, #0
 801c8f6:	f000 80b7 	beq.w	801ca68 <_cbDialog+0x190>
		    value = makeUpGain.value;
		}
		//#########################################//

		//#########Remote unselect#################//
		else if(pMsg->Data.v==1){
 801c8fa:	2b01      	cmp	r3, #1
 801c8fc:	d11f      	bne.n	801c93e <_cbDialog+0x66>
			Enc_MakeUpGainSelected = !Enc_MakeUpGainSelected;
 801c8fe:	4b62      	ldr	r3, [pc, #392]	; (801ca88 <_cbDialog+0x1b0>)
 801c900:	68d9      	ldr	r1, [r3, #12]
 801c902:	fab1 f181 	clz	r1, r1
 801c906:	0949      	lsrs	r1, r1, #5
 801c908:	60d9      	str	r1, [r3, #12]
			BUTTON_SetState(hButton, Enc_MakeUpGainSelected);
 801c90a:	4b60      	ldr	r3, [pc, #384]	; (801ca8c <_cbDialog+0x1b4>)
 801c90c:	6818      	ldr	r0, [r3, #0]
 801c90e:	f00d fe6f 	bl	802a5f0 <BUTTON_SetState>
 801c912:	e014      	b.n	801c93e <_cbDialog+0x66>
  switch(pMsg->MsgId) {
 801c914:	2b01      	cmp	r3, #1
 801c916:	f040 80b2 	bne.w	801ca7e <_cbDialog+0x1a6>
   hButton = BUTTON_CreateEx(0, 0, 180, 100, pMsg->hWin, WM_CF_SHOW, 0, ID_ENC_Button);
 801c91a:	2301      	movs	r3, #1
 801c91c:	9303      	str	r3, [sp, #12]
 801c91e:	2000      	movs	r0, #0
 801c920:	9002      	str	r0, [sp, #8]
 801c922:	2302      	movs	r3, #2
 801c924:	9301      	str	r3, [sp, #4]
 801c926:	6863      	ldr	r3, [r4, #4]
 801c928:	9300      	str	r3, [sp, #0]
 801c92a:	2364      	movs	r3, #100	; 0x64
 801c92c:	22b4      	movs	r2, #180	; 0xb4
 801c92e:	4601      	mov	r1, r0
 801c930:	f00d fd9c 	bl	802a46c <BUTTON_CreateEx>
 801c934:	4b55      	ldr	r3, [pc, #340]	; (801ca8c <_cbDialog+0x1b4>)
 801c936:	6018      	str	r0, [r3, #0]
   WM_SetCallback(hButton, _cbENC_Button);
 801c938:	4955      	ldr	r1, [pc, #340]	; (801ca90 <_cbDialog+0x1b8>)
 801c93a:	f00c fb69 	bl	8029010 <WM_SetCallback>
    break;
/////////////////////////////////////////////////////////////////
   default:
    WM_DefaultProc(pMsg);
  }
}
 801c93e:	b004      	add	sp, #16
 801c940:	bd10      	pop	{r4, pc}
  	GUI_SetBkColor(COLOR);
 801c942:	4c51      	ldr	r4, [pc, #324]	; (801ca88 <_cbDialog+0x1b0>)
 801c944:	6820      	ldr	r0, [r4, #0]
 801c946:	f003 fcf9 	bl	802033c <GUI_SetBkColor>
  	GUI_Clear();
 801c94a:	f003 fe07 	bl	802055c <GUI_Clear>
    GUI_SetColor(TEXTCOLOR);
 801c94e:	6860      	ldr	r0, [r4, #4]
 801c950:	f003 fd00 	bl	8020354 <GUI_SetColor>
    GUI_SetFont(&GUI_Font32B_1);
 801c954:	484f      	ldr	r0, [pc, #316]	; (801ca94 <_cbDialog+0x1bc>)
 801c956:	f003 fd5f 	bl	8020418 <GUI_SetFont>
    GUI_DispStringAt("make up gain", 0, 0);
 801c95a:	2200      	movs	r2, #0
 801c95c:	4611      	mov	r1, r2
 801c95e:	484e      	ldr	r0, [pc, #312]	; (801ca98 <_cbDialog+0x1c0>)
 801c960:	f004 fa24 	bl	8020dac <GUI_DispStringAt>
    GUI_SetFont(&GUI_FontD36x48);
 801c964:	484d      	ldr	r0, [pc, #308]	; (801ca9c <_cbDialog+0x1c4>)
 801c966:	f003 fd57 	bl	8020418 <GUI_SetFont>
    GUI_GotoXY(0,30);
 801c96a:	211e      	movs	r1, #30
 801c96c:	2000      	movs	r0, #0
 801c96e:	f003 fc87 	bl	8020280 <GUI_GotoXY>
    GUI_DispFloatMin(value, 1);
 801c972:	ed94 0a02 	vldr	s0, [r4, #8]
 801c976:	2001      	movs	r0, #1
 801c978:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801c97c:	f004 fff2 	bl	8021964 <GUI_DispFloatMin>
    break;
 801c980:	e7dd      	b.n	801c93e <_cbDialog+0x66>
    Id    = WM_GetId(pMsg->hWinSrc);
 801c982:	6880      	ldr	r0, [r0, #8]
 801c984:	f00c fa42 	bl	8028e0c <WM_GetId>
    NotificationCode = pMsg->Data.v;
 801c988:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 801c98a:	2801      	cmp	r0, #1
 801c98c:	d1d7      	bne.n	801c93e <_cbDialog+0x66>
      switch(NotificationCode) {
 801c98e:	2b01      	cmp	r3, #1
 801c990:	d1d5      	bne.n	801c93e <_cbDialog+0x66>
		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 801c992:	4b43      	ldr	r3, [pc, #268]	; (801caa0 <_cbDialog+0x1c8>)
 801c994:	681b      	ldr	r3, [r3, #0]
 801c996:	b9eb      	cbnz	r3, 801c9d4 <_cbDialog+0xfc>
		  else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 801c998:	4b42      	ldr	r3, [pc, #264]	; (801caa4 <_cbDialog+0x1cc>)
 801c99a:	681b      	ldr	r3, [r3, #0]
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d131      	bne.n	801ca04 <_cbDialog+0x12c>
		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 801c9a0:	4b41      	ldr	r3, [pc, #260]	; (801caa8 <_cbDialog+0x1d0>)
 801c9a2:	681b      	ldr	r3, [r3, #0]
 801c9a4:	2b00      	cmp	r3, #0
 801c9a6:	d138      	bne.n	801ca1a <_cbDialog+0x142>
		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 801c9a8:	4b40      	ldr	r3, [pc, #256]	; (801caac <_cbDialog+0x1d4>)
 801c9aa:	681b      	ldr	r3, [r3, #0]
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d13f      	bne.n	801ca30 <_cbDialog+0x158>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 801c9b0:	4b3f      	ldr	r3, [pc, #252]	; (801cab0 <_cbDialog+0x1d8>)
 801c9b2:	681b      	ldr	r3, [r3, #0]
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d146      	bne.n	801ca46 <_cbDialog+0x16e>
		  else if (Enc_InputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_InputWindow, pMsg);}
 801c9b8:	4b3e      	ldr	r3, [pc, #248]	; (801cab4 <_cbDialog+0x1dc>)
 801c9ba:	681b      	ldr	r3, [r3, #0]
 801c9bc:	b1a3      	cbz	r3, 801c9e8 <_cbDialog+0x110>
 801c9be:	2301      	movs	r3, #1
 801c9c0:	60e3      	str	r3, [r4, #12]
 801c9c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c9c6:	6023      	str	r3, [r4, #0]
 801c9c8:	4621      	mov	r1, r4
 801c9ca:	4b3b      	ldr	r3, [pc, #236]	; (801cab8 <_cbDialog+0x1e0>)
 801c9cc:	6818      	ldr	r0, [r3, #0]
 801c9ce:	f00a ff69 	bl	80278a4 <WM_SendMessage>
 801c9d2:	e009      	b.n	801c9e8 <_cbDialog+0x110>
		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 801c9d4:	2301      	movs	r3, #1
 801c9d6:	60e3      	str	r3, [r4, #12]
 801c9d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c9dc:	6023      	str	r3, [r4, #0]
 801c9de:	4621      	mov	r1, r4
 801c9e0:	4b36      	ldr	r3, [pc, #216]	; (801cabc <_cbDialog+0x1e4>)
 801c9e2:	6818      	ldr	r0, [r3, #0]
 801c9e4:	f00a ff5e 	bl	80278a4 <WM_SendMessage>
    	  Enc_MakeUpGainSelected = !Enc_MakeUpGainSelected;
 801c9e8:	4a27      	ldr	r2, [pc, #156]	; (801ca88 <_cbDialog+0x1b0>)
 801c9ea:	68d3      	ldr	r3, [r2, #12]
 801c9ec:	fab3 f383 	clz	r3, r3
 801c9f0:	095b      	lsrs	r3, r3, #5
 801c9f2:	60d3      	str	r3, [r2, #12]
    	  if(Enc_MakeUpGainSelected){
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d031      	beq.n	801ca5c <_cbDialog+0x184>
    	      BUTTON_SetState(hButton, 1);
 801c9f8:	2101      	movs	r1, #1
 801c9fa:	4b24      	ldr	r3, [pc, #144]	; (801ca8c <_cbDialog+0x1b4>)
 801c9fc:	6818      	ldr	r0, [r3, #0]
 801c9fe:	f00d fdf7 	bl	802a5f0 <BUTTON_SetState>
 801ca02:	e79c      	b.n	801c93e <_cbDialog+0x66>
		  else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 801ca04:	2301      	movs	r3, #1
 801ca06:	60e3      	str	r3, [r4, #12]
 801ca08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ca0c:	6023      	str	r3, [r4, #0]
 801ca0e:	4621      	mov	r1, r4
 801ca10:	4b2b      	ldr	r3, [pc, #172]	; (801cac0 <_cbDialog+0x1e8>)
 801ca12:	6818      	ldr	r0, [r3, #0]
 801ca14:	f00a ff46 	bl	80278a4 <WM_SendMessage>
 801ca18:	e7e6      	b.n	801c9e8 <_cbDialog+0x110>
		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 801ca1a:	2301      	movs	r3, #1
 801ca1c:	60e3      	str	r3, [r4, #12]
 801ca1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ca22:	6023      	str	r3, [r4, #0]
 801ca24:	4621      	mov	r1, r4
 801ca26:	4b27      	ldr	r3, [pc, #156]	; (801cac4 <_cbDialog+0x1ec>)
 801ca28:	6818      	ldr	r0, [r3, #0]
 801ca2a:	f00a ff3b 	bl	80278a4 <WM_SendMessage>
 801ca2e:	e7db      	b.n	801c9e8 <_cbDialog+0x110>
		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 801ca30:	2301      	movs	r3, #1
 801ca32:	60e3      	str	r3, [r4, #12]
 801ca34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ca38:	6023      	str	r3, [r4, #0]
 801ca3a:	4621      	mov	r1, r4
 801ca3c:	4b22      	ldr	r3, [pc, #136]	; (801cac8 <_cbDialog+0x1f0>)
 801ca3e:	6818      	ldr	r0, [r3, #0]
 801ca40:	f00a ff30 	bl	80278a4 <WM_SendMessage>
 801ca44:	e7d0      	b.n	801c9e8 <_cbDialog+0x110>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 801ca46:	2301      	movs	r3, #1
 801ca48:	60e3      	str	r3, [r4, #12]
 801ca4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ca4e:	6023      	str	r3, [r4, #0]
 801ca50:	4621      	mov	r1, r4
 801ca52:	4b1e      	ldr	r3, [pc, #120]	; (801cacc <_cbDialog+0x1f4>)
 801ca54:	6818      	ldr	r0, [r3, #0]
 801ca56:	f00a ff25 	bl	80278a4 <WM_SendMessage>
 801ca5a:	e7c5      	b.n	801c9e8 <_cbDialog+0x110>
    	      BUTTON_SetState(hButton, 0);
 801ca5c:	2100      	movs	r1, #0
 801ca5e:	4b0b      	ldr	r3, [pc, #44]	; (801ca8c <_cbDialog+0x1b4>)
 801ca60:	6818      	ldr	r0, [r3, #0]
 801ca62:	f00d fdc5 	bl	802a5f0 <BUTTON_SetState>
 801ca66:	e76a      	b.n	801c93e <_cbDialog+0x66>
			TEXTCOLOR = makeUpGain.Color;
 801ca68:	4a19      	ldr	r2, [pc, #100]	; (801cad0 <_cbDialog+0x1f8>)
 801ca6a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 801ca6c:	4b06      	ldr	r3, [pc, #24]	; (801ca88 <_cbDialog+0x1b0>)
 801ca6e:	6059      	str	r1, [r3, #4]
		    value = makeUpGain.value;
 801ca70:	edd2 7a00 	vldr	s15, [r2]
 801ca74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ca78:	edc3 7a02 	vstr	s15, [r3, #8]
 801ca7c:	e75f      	b.n	801c93e <_cbDialog+0x66>
    WM_DefaultProc(pMsg);
 801ca7e:	4620      	mov	r0, r4
 801ca80:	f00b fdfc 	bl	802867c <WM_DefaultProc>
}
 801ca84:	e75b      	b.n	801c93e <_cbDialog+0x66>
 801ca86:	bf00      	nop
 801ca88:	200088a8 	.word	0x200088a8
 801ca8c:	20030664 	.word	0x20030664
 801ca90:	0801cad5 	.word	0x0801cad5
 801ca94:	08038488 	.word	0x08038488
 801ca98:	08042a10 	.word	0x08042a10
 801ca9c:	08040494 	.word	0x08040494
 801caa0:	2000887c 	.word	0x2000887c
 801caa4:	20008890 	.word	0x20008890
 801caa8:	200088c8 	.word	0x200088c8
 801caac:	200088dc 	.word	0x200088dc
 801cab0:	200088ec 	.word	0x200088ec
 801cab4:	200088a4 	.word	0x200088a4
 801cab8:	2002e724 	.word	0x2002e724
 801cabc:	2002ef0c 	.word	0x2002ef0c
 801cac0:	2002ee28 	.word	0x2002ee28
 801cac4:	2002e55c 	.word	0x2002e55c
 801cac8:	2002e5d8 	.word	0x2002e5d8
 801cacc:	2002f178 	.word	0x2002f178
 801cad0:	2002e52c 	.word	0x2002e52c

0801cad4 <_cbENC_Button>:
{
 801cad4:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 801cad6:	6803      	ldr	r3, [r0, #0]
 801cad8:	2b0f      	cmp	r3, #15
 801cada:	d10c      	bne.n	801caf6 <_cbENC_Button+0x22>
    	if(Enc_MakeUpGainSelected == 1){
 801cadc:	4b07      	ldr	r3, [pc, #28]	; (801cafc <_cbENC_Button+0x28>)
 801cade:	68db      	ldr	r3, [r3, #12]
 801cae0:	2b01      	cmp	r3, #1
 801cae2:	d004      	beq.n	801caee <_cbENC_Button+0x1a>
    	    	COLOR = GUI_BLACK;
 801cae4:	4b05      	ldr	r3, [pc, #20]	; (801cafc <_cbENC_Button+0x28>)
 801cae6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 801caea:	601a      	str	r2, [r3, #0]
}
 801caec:	bd08      	pop	{r3, pc}
    			COLOR = GUI_GRAY;
 801caee:	4b03      	ldr	r3, [pc, #12]	; (801cafc <_cbENC_Button+0x28>)
 801caf0:	4a03      	ldr	r2, [pc, #12]	; (801cb00 <_cbENC_Button+0x2c>)
 801caf2:	601a      	str	r2, [r3, #0]
 801caf4:	e7fa      	b.n	801caec <_cbENC_Button+0x18>
      BUTTON_Callback(pMsg);
 801caf6:	f00d fc01 	bl	802a2fc <BUTTON_Callback>
}
 801cafa:	e7f7      	b.n	801caec <_cbENC_Button+0x18>
 801cafc:	200088a8 	.word	0x200088a8
 801cb00:	ff808080 	.word	0xff808080

0801cb04 <CreateEnc_MakeUpGainWindow>:


WM_HWIN CreateEnc_MakeUpGainWindow(void) {
 801cb04:	b510      	push	{r4, lr}
 801cb06:	b084      	sub	sp, #16

	Enc_MakeUpGainWindow = WM_CreateWindow(600, 130, 180, 100, WM_CF_HIDE, _cbDialog, 0);
 801cb08:	2300      	movs	r3, #0
 801cb0a:	9302      	str	r3, [sp, #8]
 801cb0c:	4a08      	ldr	r2, [pc, #32]	; (801cb30 <CreateEnc_MakeUpGainWindow+0x2c>)
 801cb0e:	9201      	str	r2, [sp, #4]
 801cb10:	9300      	str	r3, [sp, #0]
 801cb12:	2364      	movs	r3, #100	; 0x64
 801cb14:	22b4      	movs	r2, #180	; 0xb4
 801cb16:	2182      	movs	r1, #130	; 0x82
 801cb18:	f44f 7016 	mov.w	r0, #600	; 0x258
 801cb1c:	f00b f836 	bl	8027b8c <WM_CreateWindow>
 801cb20:	4c04      	ldr	r4, [pc, #16]	; (801cb34 <CreateEnc_MakeUpGainWindow+0x30>)
 801cb22:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 801cb24:	2001      	movs	r0, #1
 801cb26:	f00c fca3 	bl	8029470 <WM_MULTIBUF_Enable>

  return Enc_MakeUpGainWindow;
}
 801cb2a:	6820      	ldr	r0, [r4, #0]
 801cb2c:	b004      	add	sp, #16
 801cb2e:	bd10      	pop	{r4, pc}
 801cb30:	0801c8d9 	.word	0x0801c8d9
 801cb34:	2002e8d4 	.word	0x2002e8d4

0801cb38 <_cbDialog>:
}




static void _cbDialog(WM_MESSAGE * pMsg) {
 801cb38:	b510      	push	{r4, lr}
 801cb3a:	b084      	sub	sp, #16
  int           Id, NotificationCode;


  switch(pMsg->MsgId) {
 801cb3c:	6803      	ldr	r3, [r0, #0]
 801cb3e:	2b0f      	cmp	r3, #15
 801cb40:	d02e      	beq.n	801cba0 <_cbDialog+0x68>
 801cb42:	4604      	mov	r4, r0
 801cb44:	dd15      	ble.n	801cb72 <_cbDialog+0x3a>
 801cb46:	2b26      	cmp	r3, #38	; 0x26
 801cb48:	d04a      	beq.n	801cbe0 <_cbDialog+0xa8>
 801cb4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cb4e:	f040 80c4 	bne.w	801ccda <_cbDialog+0x1a2>
    }
    break;
//////////////////////////////////////////////////////////////////
    case WM_USER:
    	//#########UPDATE Color & value#############//
		if(pMsg->Data.v==0){
 801cb52:	68c3      	ldr	r3, [r0, #12]
 801cb54:	2b00      	cmp	r3, #0
 801cb56:	f000 80b5 	beq.w	801ccc4 <_cbDialog+0x18c>
		    value = outputgain.value;
		}
		//#########################################//

		//#########Remote unselect#################//
		else if(pMsg->Data.v==1){
 801cb5a:	2b01      	cmp	r3, #1
 801cb5c:	d11e      	bne.n	801cb9c <_cbDialog+0x64>
			Enc_OutputSelected = !Enc_OutputSelected;
 801cb5e:	4b61      	ldr	r3, [pc, #388]	; (801cce4 <_cbDialog+0x1ac>)
 801cb60:	6919      	ldr	r1, [r3, #16]
 801cb62:	fab1 f181 	clz	r1, r1
 801cb66:	0949      	lsrs	r1, r1, #5
 801cb68:	6119      	str	r1, [r3, #16]
			BUTTON_SetState(hButton, Enc_OutputSelected);
 801cb6a:	6818      	ldr	r0, [r3, #0]
 801cb6c:	f00d fd40 	bl	802a5f0 <BUTTON_SetState>
 801cb70:	e014      	b.n	801cb9c <_cbDialog+0x64>
  switch(pMsg->MsgId) {
 801cb72:	2b01      	cmp	r3, #1
 801cb74:	f040 80b1 	bne.w	801ccda <_cbDialog+0x1a2>
   hButton = BUTTON_CreateEx(0, 0, 180, 100, pMsg->hWin, WM_CF_SHOW, 0, ID_ENC_Button);
 801cb78:	2301      	movs	r3, #1
 801cb7a:	9303      	str	r3, [sp, #12]
 801cb7c:	2000      	movs	r0, #0
 801cb7e:	9002      	str	r0, [sp, #8]
 801cb80:	2302      	movs	r3, #2
 801cb82:	9301      	str	r3, [sp, #4]
 801cb84:	6863      	ldr	r3, [r4, #4]
 801cb86:	9300      	str	r3, [sp, #0]
 801cb88:	2364      	movs	r3, #100	; 0x64
 801cb8a:	22b4      	movs	r2, #180	; 0xb4
 801cb8c:	4601      	mov	r1, r0
 801cb8e:	f00d fc6d 	bl	802a46c <BUTTON_CreateEx>
 801cb92:	4b54      	ldr	r3, [pc, #336]	; (801cce4 <_cbDialog+0x1ac>)
 801cb94:	6018      	str	r0, [r3, #0]
   WM_SetCallback(hButton, _cbENC_Button);
 801cb96:	4954      	ldr	r1, [pc, #336]	; (801cce8 <_cbDialog+0x1b0>)
 801cb98:	f00c fa3a 	bl	8029010 <WM_SetCallback>
    break;
/////////////////////////////////////////////////////////////////
   default:
    WM_DefaultProc(pMsg);
  }
}
 801cb9c:	b004      	add	sp, #16
 801cb9e:	bd10      	pop	{r4, pc}
  	GUI_SetBkColor(COLOR);
 801cba0:	4c50      	ldr	r4, [pc, #320]	; (801cce4 <_cbDialog+0x1ac>)
 801cba2:	6860      	ldr	r0, [r4, #4]
 801cba4:	f003 fbca 	bl	802033c <GUI_SetBkColor>
  	GUI_Clear();
 801cba8:	f003 fcd8 	bl	802055c <GUI_Clear>
      GUI_SetColor(TEXTCOLOR);
 801cbac:	68a0      	ldr	r0, [r4, #8]
 801cbae:	f003 fbd1 	bl	8020354 <GUI_SetColor>
      GUI_SetFont(&GUI_Font32B_1);
 801cbb2:	484e      	ldr	r0, [pc, #312]	; (801ccec <_cbDialog+0x1b4>)
 801cbb4:	f003 fc30 	bl	8020418 <GUI_SetFont>
      GUI_DispStringAt("output gain", 0, 0);
 801cbb8:	2200      	movs	r2, #0
 801cbba:	4611      	mov	r1, r2
 801cbbc:	484c      	ldr	r0, [pc, #304]	; (801ccf0 <_cbDialog+0x1b8>)
 801cbbe:	f004 f8f5 	bl	8020dac <GUI_DispStringAt>
      GUI_SetFont(&GUI_FontD36x48);
 801cbc2:	484c      	ldr	r0, [pc, #304]	; (801ccf4 <_cbDialog+0x1bc>)
 801cbc4:	f003 fc28 	bl	8020418 <GUI_SetFont>
      GUI_GotoXY(0,30);
 801cbc8:	211e      	movs	r1, #30
 801cbca:	2000      	movs	r0, #0
 801cbcc:	f003 fb58 	bl	8020280 <GUI_GotoXY>
      GUI_DispFloatMin(value, 1);
 801cbd0:	ed94 0a03 	vldr	s0, [r4, #12]
 801cbd4:	2001      	movs	r0, #1
 801cbd6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801cbda:	f004 fec3 	bl	8021964 <GUI_DispFloatMin>
    break;
 801cbde:	e7dd      	b.n	801cb9c <_cbDialog+0x64>
    Id    = WM_GetId(pMsg->hWinSrc);
 801cbe0:	6880      	ldr	r0, [r0, #8]
 801cbe2:	f00c f913 	bl	8028e0c <WM_GetId>
    NotificationCode = pMsg->Data.v;
 801cbe6:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 801cbe8:	2801      	cmp	r0, #1
 801cbea:	d1d7      	bne.n	801cb9c <_cbDialog+0x64>
      switch(NotificationCode) {
 801cbec:	2b01      	cmp	r3, #1
 801cbee:	d1d5      	bne.n	801cb9c <_cbDialog+0x64>
		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 801cbf0:	4b41      	ldr	r3, [pc, #260]	; (801ccf8 <_cbDialog+0x1c0>)
 801cbf2:	681b      	ldr	r3, [r3, #0]
 801cbf4:	b9eb      	cbnz	r3, 801cc32 <_cbDialog+0xfa>
		  else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 801cbf6:	4b41      	ldr	r3, [pc, #260]	; (801ccfc <_cbDialog+0x1c4>)
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	2b00      	cmp	r3, #0
 801cbfc:	d130      	bne.n	801cc60 <_cbDialog+0x128>
		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 801cbfe:	4b40      	ldr	r3, [pc, #256]	; (801cd00 <_cbDialog+0x1c8>)
 801cc00:	681b      	ldr	r3, [r3, #0]
 801cc02:	2b00      	cmp	r3, #0
 801cc04:	d137      	bne.n	801cc76 <_cbDialog+0x13e>
		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 801cc06:	4b3f      	ldr	r3, [pc, #252]	; (801cd04 <_cbDialog+0x1cc>)
 801cc08:	681b      	ldr	r3, [r3, #0]
 801cc0a:	2b00      	cmp	r3, #0
 801cc0c:	d13e      	bne.n	801cc8c <_cbDialog+0x154>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 801cc0e:	4b3e      	ldr	r3, [pc, #248]	; (801cd08 <_cbDialog+0x1d0>)
 801cc10:	681b      	ldr	r3, [r3, #0]
 801cc12:	2b00      	cmp	r3, #0
 801cc14:	d145      	bne.n	801cca2 <_cbDialog+0x16a>
		  else if (Enc_InputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_InputWindow, pMsg);}
 801cc16:	4b3d      	ldr	r3, [pc, #244]	; (801cd0c <_cbDialog+0x1d4>)
 801cc18:	681b      	ldr	r3, [r3, #0]
 801cc1a:	b1a3      	cbz	r3, 801cc46 <_cbDialog+0x10e>
 801cc1c:	2301      	movs	r3, #1
 801cc1e:	60e3      	str	r3, [r4, #12]
 801cc20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cc24:	6023      	str	r3, [r4, #0]
 801cc26:	4621      	mov	r1, r4
 801cc28:	4b39      	ldr	r3, [pc, #228]	; (801cd10 <_cbDialog+0x1d8>)
 801cc2a:	6818      	ldr	r0, [r3, #0]
 801cc2c:	f00a fe3a 	bl	80278a4 <WM_SendMessage>
 801cc30:	e009      	b.n	801cc46 <_cbDialog+0x10e>
		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 801cc32:	2301      	movs	r3, #1
 801cc34:	60e3      	str	r3, [r4, #12]
 801cc36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cc3a:	6023      	str	r3, [r4, #0]
 801cc3c:	4621      	mov	r1, r4
 801cc3e:	4b35      	ldr	r3, [pc, #212]	; (801cd14 <_cbDialog+0x1dc>)
 801cc40:	6818      	ldr	r0, [r3, #0]
 801cc42:	f00a fe2f 	bl	80278a4 <WM_SendMessage>
    	  Enc_OutputSelected = !Enc_OutputSelected;
 801cc46:	4a27      	ldr	r2, [pc, #156]	; (801cce4 <_cbDialog+0x1ac>)
 801cc48:	6913      	ldr	r3, [r2, #16]
 801cc4a:	fab3 f383 	clz	r3, r3
 801cc4e:	095b      	lsrs	r3, r3, #5
 801cc50:	6113      	str	r3, [r2, #16]
    	  if(Enc_OutputSelected){
 801cc52:	2b00      	cmp	r3, #0
 801cc54:	d030      	beq.n	801ccb8 <_cbDialog+0x180>
    	      BUTTON_SetState(hButton, 1);
 801cc56:	2101      	movs	r1, #1
 801cc58:	6810      	ldr	r0, [r2, #0]
 801cc5a:	f00d fcc9 	bl	802a5f0 <BUTTON_SetState>
 801cc5e:	e79d      	b.n	801cb9c <_cbDialog+0x64>
		  else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 801cc60:	2301      	movs	r3, #1
 801cc62:	60e3      	str	r3, [r4, #12]
 801cc64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cc68:	6023      	str	r3, [r4, #0]
 801cc6a:	4621      	mov	r1, r4
 801cc6c:	4b2a      	ldr	r3, [pc, #168]	; (801cd18 <_cbDialog+0x1e0>)
 801cc6e:	6818      	ldr	r0, [r3, #0]
 801cc70:	f00a fe18 	bl	80278a4 <WM_SendMessage>
 801cc74:	e7e7      	b.n	801cc46 <_cbDialog+0x10e>
		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 801cc76:	2301      	movs	r3, #1
 801cc78:	60e3      	str	r3, [r4, #12]
 801cc7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cc7e:	6023      	str	r3, [r4, #0]
 801cc80:	4621      	mov	r1, r4
 801cc82:	4b26      	ldr	r3, [pc, #152]	; (801cd1c <_cbDialog+0x1e4>)
 801cc84:	6818      	ldr	r0, [r3, #0]
 801cc86:	f00a fe0d 	bl	80278a4 <WM_SendMessage>
 801cc8a:	e7dc      	b.n	801cc46 <_cbDialog+0x10e>
		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 801cc8c:	2301      	movs	r3, #1
 801cc8e:	60e3      	str	r3, [r4, #12]
 801cc90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cc94:	6023      	str	r3, [r4, #0]
 801cc96:	4621      	mov	r1, r4
 801cc98:	4b21      	ldr	r3, [pc, #132]	; (801cd20 <_cbDialog+0x1e8>)
 801cc9a:	6818      	ldr	r0, [r3, #0]
 801cc9c:	f00a fe02 	bl	80278a4 <WM_SendMessage>
 801cca0:	e7d1      	b.n	801cc46 <_cbDialog+0x10e>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 801cca2:	2301      	movs	r3, #1
 801cca4:	60e3      	str	r3, [r4, #12]
 801cca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ccaa:	6023      	str	r3, [r4, #0]
 801ccac:	4621      	mov	r1, r4
 801ccae:	4b1d      	ldr	r3, [pc, #116]	; (801cd24 <_cbDialog+0x1ec>)
 801ccb0:	6818      	ldr	r0, [r3, #0]
 801ccb2:	f00a fdf7 	bl	80278a4 <WM_SendMessage>
 801ccb6:	e7c6      	b.n	801cc46 <_cbDialog+0x10e>
    	      BUTTON_SetState(hButton, 0);
 801ccb8:	2100      	movs	r1, #0
 801ccba:	4b0a      	ldr	r3, [pc, #40]	; (801cce4 <_cbDialog+0x1ac>)
 801ccbc:	6818      	ldr	r0, [r3, #0]
 801ccbe:	f00d fc97 	bl	802a5f0 <BUTTON_SetState>
 801ccc2:	e76b      	b.n	801cb9c <_cbDialog+0x64>
			TEXTCOLOR = outputgain.Color;
 801ccc4:	4a18      	ldr	r2, [pc, #96]	; (801cd28 <_cbDialog+0x1f0>)
 801ccc6:	6a51      	ldr	r1, [r2, #36]	; 0x24
 801ccc8:	4b06      	ldr	r3, [pc, #24]	; (801cce4 <_cbDialog+0x1ac>)
 801ccca:	6099      	str	r1, [r3, #8]
		    value = outputgain.value;
 801cccc:	edd2 7a00 	vldr	s15, [r2]
 801ccd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ccd4:	edc3 7a03 	vstr	s15, [r3, #12]
 801ccd8:	e760      	b.n	801cb9c <_cbDialog+0x64>
    WM_DefaultProc(pMsg);
 801ccda:	4620      	mov	r0, r4
 801ccdc:	f00b fcce 	bl	802867c <WM_DefaultProc>
}
 801cce0:	e75c      	b.n	801cb9c <_cbDialog+0x64>
 801cce2:	bf00      	nop
 801cce4:	200088b8 	.word	0x200088b8
 801cce8:	0801cd2d 	.word	0x0801cd2d
 801ccec:	08038488 	.word	0x08038488
 801ccf0:	08042a20 	.word	0x08042a20
 801ccf4:	08040494 	.word	0x08040494
 801ccf8:	2000887c 	.word	0x2000887c
 801ccfc:	20008890 	.word	0x20008890
 801cd00:	200088b4 	.word	0x200088b4
 801cd04:	200088dc 	.word	0x200088dc
 801cd08:	200088ec 	.word	0x200088ec
 801cd0c:	200088a4 	.word	0x200088a4
 801cd10:	2002e724 	.word	0x2002e724
 801cd14:	2002ef0c 	.word	0x2002ef0c
 801cd18:	2002ee28 	.word	0x2002ee28
 801cd1c:	2002e8d4 	.word	0x2002e8d4
 801cd20:	2002e5d8 	.word	0x2002e5d8
 801cd24:	2002f178 	.word	0x2002f178
 801cd28:	2002e5a4 	.word	0x2002e5a4

0801cd2c <_cbENC_Button>:
{
 801cd2c:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 801cd2e:	6803      	ldr	r3, [r0, #0]
 801cd30:	2b0f      	cmp	r3, #15
 801cd32:	d10c      	bne.n	801cd4e <_cbENC_Button+0x22>
    	if(Enc_OutputSelected == 1){
 801cd34:	4b07      	ldr	r3, [pc, #28]	; (801cd54 <_cbENC_Button+0x28>)
 801cd36:	691b      	ldr	r3, [r3, #16]
 801cd38:	2b01      	cmp	r3, #1
 801cd3a:	d004      	beq.n	801cd46 <_cbENC_Button+0x1a>
    	    	COLOR = GUI_BLACK;
 801cd3c:	4b05      	ldr	r3, [pc, #20]	; (801cd54 <_cbENC_Button+0x28>)
 801cd3e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 801cd42:	605a      	str	r2, [r3, #4]
}
 801cd44:	bd08      	pop	{r3, pc}
    			COLOR = GUI_GRAY;
 801cd46:	4b03      	ldr	r3, [pc, #12]	; (801cd54 <_cbENC_Button+0x28>)
 801cd48:	4a03      	ldr	r2, [pc, #12]	; (801cd58 <_cbENC_Button+0x2c>)
 801cd4a:	605a      	str	r2, [r3, #4]
 801cd4c:	e7fa      	b.n	801cd44 <_cbENC_Button+0x18>
      BUTTON_Callback(pMsg);
 801cd4e:	f00d fad5 	bl	802a2fc <BUTTON_Callback>
}
 801cd52:	e7f7      	b.n	801cd44 <_cbENC_Button+0x18>
 801cd54:	200088b8 	.word	0x200088b8
 801cd58:	ff808080 	.word	0xff808080

0801cd5c <CreateEnc_OutputWindow>:


WM_HWIN CreateEnc_OutputWindow(void) {
 801cd5c:	b510      	push	{r4, lr}
 801cd5e:	b084      	sub	sp, #16

  Enc_OutputWindow = WM_CreateWindow(600, 350, 180, 100, WM_CF_HIDE, _cbDialog, 0);
 801cd60:	2300      	movs	r3, #0
 801cd62:	9302      	str	r3, [sp, #8]
 801cd64:	4a09      	ldr	r2, [pc, #36]	; (801cd8c <CreateEnc_OutputWindow+0x30>)
 801cd66:	9201      	str	r2, [sp, #4]
 801cd68:	9300      	str	r3, [sp, #0]
 801cd6a:	2364      	movs	r3, #100	; 0x64
 801cd6c:	22b4      	movs	r2, #180	; 0xb4
 801cd6e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801cd72:	f44f 7016 	mov.w	r0, #600	; 0x258
 801cd76:	f00a ff09 	bl	8027b8c <WM_CreateWindow>
 801cd7a:	4c05      	ldr	r4, [pc, #20]	; (801cd90 <CreateEnc_OutputWindow+0x34>)
 801cd7c:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 801cd7e:	2001      	movs	r0, #1
 801cd80:	f00c fb76 	bl	8029470 <WM_MULTIBUF_Enable>

  return Enc_OutputWindow;
}
 801cd84:	6820      	ldr	r0, [r4, #0]
 801cd86:	b004      	add	sp, #16
 801cd88:	bd10      	pop	{r4, pc}
 801cd8a:	bf00      	nop
 801cd8c:	0801cb39 	.word	0x0801cb39
 801cd90:	2002e55c 	.word	0x2002e55c

0801cd94 <_cbDialog>:
}




static void _cbDialog(WM_MESSAGE * pMsg) {
 801cd94:	b510      	push	{r4, lr}
 801cd96:	b084      	sub	sp, #16
  int           Id, NotificationCode;


  switch(pMsg->MsgId) {
 801cd98:	6803      	ldr	r3, [r0, #0]
 801cd9a:	2b0f      	cmp	r3, #15
 801cd9c:	d02e      	beq.n	801cdfc <_cbDialog+0x68>
 801cd9e:	4604      	mov	r4, r0
 801cda0:	dd15      	ble.n	801cdce <_cbDialog+0x3a>
 801cda2:	2b26      	cmp	r3, #38	; 0x26
 801cda4:	d04a      	beq.n	801ce3c <_cbDialog+0xa8>
 801cda6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cdaa:	f040 80c4 	bne.w	801cf36 <_cbDialog+0x1a2>
    }
    break;
//////////////////////////////////////////////////////////////////
    case WM_USER:
    	//#########UPDATE Color & value#############//
		if(pMsg->Data.v==0){
 801cdae:	68c3      	ldr	r3, [r0, #12]
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	f000 80b5 	beq.w	801cf20 <_cbDialog+0x18c>
		    value = ratio.value;
		}
		//#########################################//

		//#########Remote unselect#################//
		else if(pMsg->Data.v==1){
 801cdb6:	2b01      	cmp	r3, #1
 801cdb8:	d11e      	bne.n	801cdf8 <_cbDialog+0x64>
			Enc_RatioSelected = !Enc_RatioSelected;
 801cdba:	4b61      	ldr	r3, [pc, #388]	; (801cf40 <_cbDialog+0x1ac>)
 801cdbc:	6919      	ldr	r1, [r3, #16]
 801cdbe:	fab1 f181 	clz	r1, r1
 801cdc2:	0949      	lsrs	r1, r1, #5
 801cdc4:	6119      	str	r1, [r3, #16]
			BUTTON_SetState(hButton, Enc_RatioSelected);
 801cdc6:	6818      	ldr	r0, [r3, #0]
 801cdc8:	f00d fc12 	bl	802a5f0 <BUTTON_SetState>
 801cdcc:	e014      	b.n	801cdf8 <_cbDialog+0x64>
  switch(pMsg->MsgId) {
 801cdce:	2b01      	cmp	r3, #1
 801cdd0:	f040 80b1 	bne.w	801cf36 <_cbDialog+0x1a2>
   hButton = BUTTON_CreateEx(0, 0, 180, 100, pMsg->hWin, WM_CF_SHOW, 0, ID_ENC_Button);
 801cdd4:	2301      	movs	r3, #1
 801cdd6:	9303      	str	r3, [sp, #12]
 801cdd8:	2000      	movs	r0, #0
 801cdda:	9002      	str	r0, [sp, #8]
 801cddc:	2302      	movs	r3, #2
 801cdde:	9301      	str	r3, [sp, #4]
 801cde0:	6863      	ldr	r3, [r4, #4]
 801cde2:	9300      	str	r3, [sp, #0]
 801cde4:	2364      	movs	r3, #100	; 0x64
 801cde6:	22b4      	movs	r2, #180	; 0xb4
 801cde8:	4601      	mov	r1, r0
 801cdea:	f00d fb3f 	bl	802a46c <BUTTON_CreateEx>
 801cdee:	4b54      	ldr	r3, [pc, #336]	; (801cf40 <_cbDialog+0x1ac>)
 801cdf0:	6018      	str	r0, [r3, #0]
   WM_SetCallback(hButton, _cbENC_Button);
 801cdf2:	4954      	ldr	r1, [pc, #336]	; (801cf44 <_cbDialog+0x1b0>)
 801cdf4:	f00c f90c 	bl	8029010 <WM_SetCallback>
    break;
/////////////////////////////////////////////////////////////////
   default:
    WM_DefaultProc(pMsg);
  }
}
 801cdf8:	b004      	add	sp, #16
 801cdfa:	bd10      	pop	{r4, pc}
  	GUI_SetBkColor(COLOR);
 801cdfc:	4c50      	ldr	r4, [pc, #320]	; (801cf40 <_cbDialog+0x1ac>)
 801cdfe:	6860      	ldr	r0, [r4, #4]
 801ce00:	f003 fa9c 	bl	802033c <GUI_SetBkColor>
  	GUI_Clear();
 801ce04:	f003 fbaa 	bl	802055c <GUI_Clear>
      GUI_SetColor(TEXTCOLOR);
 801ce08:	68a0      	ldr	r0, [r4, #8]
 801ce0a:	f003 faa3 	bl	8020354 <GUI_SetColor>
      GUI_SetFont(&GUI_Font32B_1);
 801ce0e:	484e      	ldr	r0, [pc, #312]	; (801cf48 <_cbDialog+0x1b4>)
 801ce10:	f003 fb02 	bl	8020418 <GUI_SetFont>
      GUI_DispStringAt("ratio", 0, 0);
 801ce14:	2200      	movs	r2, #0
 801ce16:	4611      	mov	r1, r2
 801ce18:	484c      	ldr	r0, [pc, #304]	; (801cf4c <_cbDialog+0x1b8>)
 801ce1a:	f003 ffc7 	bl	8020dac <GUI_DispStringAt>
      GUI_SetFont(&GUI_FontD36x48);
 801ce1e:	484c      	ldr	r0, [pc, #304]	; (801cf50 <_cbDialog+0x1bc>)
 801ce20:	f003 fafa 	bl	8020418 <GUI_SetFont>
      GUI_GotoXY(0,30);
 801ce24:	211e      	movs	r1, #30
 801ce26:	2000      	movs	r0, #0
 801ce28:	f003 fa2a 	bl	8020280 <GUI_GotoXY>
      GUI_DispFloatMin(value, 1);
 801ce2c:	ed94 0a03 	vldr	s0, [r4, #12]
 801ce30:	2001      	movs	r0, #1
 801ce32:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801ce36:	f004 fd95 	bl	8021964 <GUI_DispFloatMin>
    break;
 801ce3a:	e7dd      	b.n	801cdf8 <_cbDialog+0x64>
    Id    = WM_GetId(pMsg->hWinSrc);
 801ce3c:	6880      	ldr	r0, [r0, #8]
 801ce3e:	f00b ffe5 	bl	8028e0c <WM_GetId>
    NotificationCode = pMsg->Data.v;
 801ce42:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 801ce44:	2801      	cmp	r0, #1
 801ce46:	d1d7      	bne.n	801cdf8 <_cbDialog+0x64>
      switch(NotificationCode) {
 801ce48:	2b01      	cmp	r3, #1
 801ce4a:	d1d5      	bne.n	801cdf8 <_cbDialog+0x64>
		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 801ce4c:	4b41      	ldr	r3, [pc, #260]	; (801cf54 <_cbDialog+0x1c0>)
 801ce4e:	681b      	ldr	r3, [r3, #0]
 801ce50:	b9eb      	cbnz	r3, 801ce8e <_cbDialog+0xfa>
		  else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 801ce52:	4b41      	ldr	r3, [pc, #260]	; (801cf58 <_cbDialog+0x1c4>)
 801ce54:	681b      	ldr	r3, [r3, #0]
 801ce56:	2b00      	cmp	r3, #0
 801ce58:	d130      	bne.n	801cebc <_cbDialog+0x128>
		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 801ce5a:	4b40      	ldr	r3, [pc, #256]	; (801cf5c <_cbDialog+0x1c8>)
 801ce5c:	681b      	ldr	r3, [r3, #0]
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	d137      	bne.n	801ced2 <_cbDialog+0x13e>
		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 801ce62:	4b3f      	ldr	r3, [pc, #252]	; (801cf60 <_cbDialog+0x1cc>)
 801ce64:	681b      	ldr	r3, [r3, #0]
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d13e      	bne.n	801cee8 <_cbDialog+0x154>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 801ce6a:	4b3e      	ldr	r3, [pc, #248]	; (801cf64 <_cbDialog+0x1d0>)
 801ce6c:	681b      	ldr	r3, [r3, #0]
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d145      	bne.n	801cefe <_cbDialog+0x16a>
		  else if (Enc_InputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_InputWindow, pMsg);}
 801ce72:	4b3d      	ldr	r3, [pc, #244]	; (801cf68 <_cbDialog+0x1d4>)
 801ce74:	681b      	ldr	r3, [r3, #0]
 801ce76:	b1a3      	cbz	r3, 801cea2 <_cbDialog+0x10e>
 801ce78:	2301      	movs	r3, #1
 801ce7a:	60e3      	str	r3, [r4, #12]
 801ce7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ce80:	6023      	str	r3, [r4, #0]
 801ce82:	4621      	mov	r1, r4
 801ce84:	4b39      	ldr	r3, [pc, #228]	; (801cf6c <_cbDialog+0x1d8>)
 801ce86:	6818      	ldr	r0, [r3, #0]
 801ce88:	f00a fd0c 	bl	80278a4 <WM_SendMessage>
 801ce8c:	e009      	b.n	801cea2 <_cbDialog+0x10e>
		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 801ce8e:	2301      	movs	r3, #1
 801ce90:	60e3      	str	r3, [r4, #12]
 801ce92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ce96:	6023      	str	r3, [r4, #0]
 801ce98:	4621      	mov	r1, r4
 801ce9a:	4b35      	ldr	r3, [pc, #212]	; (801cf70 <_cbDialog+0x1dc>)
 801ce9c:	6818      	ldr	r0, [r3, #0]
 801ce9e:	f00a fd01 	bl	80278a4 <WM_SendMessage>
    	  Enc_RatioSelected = !Enc_RatioSelected;
 801cea2:	4a27      	ldr	r2, [pc, #156]	; (801cf40 <_cbDialog+0x1ac>)
 801cea4:	6913      	ldr	r3, [r2, #16]
 801cea6:	fab3 f383 	clz	r3, r3
 801ceaa:	095b      	lsrs	r3, r3, #5
 801ceac:	6113      	str	r3, [r2, #16]
    	  if(Enc_RatioSelected){
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	d030      	beq.n	801cf14 <_cbDialog+0x180>
    	      BUTTON_SetState(hButton, 1);
 801ceb2:	2101      	movs	r1, #1
 801ceb4:	6810      	ldr	r0, [r2, #0]
 801ceb6:	f00d fb9b 	bl	802a5f0 <BUTTON_SetState>
 801ceba:	e79d      	b.n	801cdf8 <_cbDialog+0x64>
		  else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 801cebc:	2301      	movs	r3, #1
 801cebe:	60e3      	str	r3, [r4, #12]
 801cec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cec4:	6023      	str	r3, [r4, #0]
 801cec6:	4621      	mov	r1, r4
 801cec8:	4b2a      	ldr	r3, [pc, #168]	; (801cf74 <_cbDialog+0x1e0>)
 801ceca:	6818      	ldr	r0, [r3, #0]
 801cecc:	f00a fcea 	bl	80278a4 <WM_SendMessage>
 801ced0:	e7e7      	b.n	801cea2 <_cbDialog+0x10e>
		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 801ced2:	2301      	movs	r3, #1
 801ced4:	60e3      	str	r3, [r4, #12]
 801ced6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ceda:	6023      	str	r3, [r4, #0]
 801cedc:	4621      	mov	r1, r4
 801cede:	4b26      	ldr	r3, [pc, #152]	; (801cf78 <_cbDialog+0x1e4>)
 801cee0:	6818      	ldr	r0, [r3, #0]
 801cee2:	f00a fcdf 	bl	80278a4 <WM_SendMessage>
 801cee6:	e7dc      	b.n	801cea2 <_cbDialog+0x10e>
		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 801cee8:	2301      	movs	r3, #1
 801ceea:	60e3      	str	r3, [r4, #12]
 801ceec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cef0:	6023      	str	r3, [r4, #0]
 801cef2:	4621      	mov	r1, r4
 801cef4:	4b21      	ldr	r3, [pc, #132]	; (801cf7c <_cbDialog+0x1e8>)
 801cef6:	6818      	ldr	r0, [r3, #0]
 801cef8:	f00a fcd4 	bl	80278a4 <WM_SendMessage>
 801cefc:	e7d1      	b.n	801cea2 <_cbDialog+0x10e>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 801cefe:	2301      	movs	r3, #1
 801cf00:	60e3      	str	r3, [r4, #12]
 801cf02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cf06:	6023      	str	r3, [r4, #0]
 801cf08:	4621      	mov	r1, r4
 801cf0a:	4b1d      	ldr	r3, [pc, #116]	; (801cf80 <_cbDialog+0x1ec>)
 801cf0c:	6818      	ldr	r0, [r3, #0]
 801cf0e:	f00a fcc9 	bl	80278a4 <WM_SendMessage>
 801cf12:	e7c6      	b.n	801cea2 <_cbDialog+0x10e>
    	      BUTTON_SetState(hButton, 0);
 801cf14:	2100      	movs	r1, #0
 801cf16:	4b0a      	ldr	r3, [pc, #40]	; (801cf40 <_cbDialog+0x1ac>)
 801cf18:	6818      	ldr	r0, [r3, #0]
 801cf1a:	f00d fb69 	bl	802a5f0 <BUTTON_SetState>
 801cf1e:	e76b      	b.n	801cdf8 <_cbDialog+0x64>
			TEXTCOLOR = ratio.Color;
 801cf20:	4a18      	ldr	r2, [pc, #96]	; (801cf84 <_cbDialog+0x1f0>)
 801cf22:	6a51      	ldr	r1, [r2, #36]	; 0x24
 801cf24:	4b06      	ldr	r3, [pc, #24]	; (801cf40 <_cbDialog+0x1ac>)
 801cf26:	6099      	str	r1, [r3, #8]
		    value = ratio.value;
 801cf28:	edd2 7a00 	vldr	s15, [r2]
 801cf2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801cf30:	edc3 7a03 	vstr	s15, [r3, #12]
 801cf34:	e760      	b.n	801cdf8 <_cbDialog+0x64>
    WM_DefaultProc(pMsg);
 801cf36:	4620      	mov	r0, r4
 801cf38:	f00b fba0 	bl	802867c <WM_DefaultProc>
}
 801cf3c:	e75c      	b.n	801cdf8 <_cbDialog+0x64>
 801cf3e:	bf00      	nop
 801cf40:	200088cc 	.word	0x200088cc
 801cf44:	0801cf89 	.word	0x0801cf89
 801cf48:	08038488 	.word	0x08038488
 801cf4c:	08042944 	.word	0x08042944
 801cf50:	08040494 	.word	0x08040494
 801cf54:	2000887c 	.word	0x2000887c
 801cf58:	20008890 	.word	0x20008890
 801cf5c:	200088b4 	.word	0x200088b4
 801cf60:	200088c8 	.word	0x200088c8
 801cf64:	200088ec 	.word	0x200088ec
 801cf68:	200088a4 	.word	0x200088a4
 801cf6c:	2002e724 	.word	0x2002e724
 801cf70:	2002ef0c 	.word	0x2002ef0c
 801cf74:	2002ee28 	.word	0x2002ee28
 801cf78:	2002e8d4 	.word	0x2002e8d4
 801cf7c:	2002e55c 	.word	0x2002e55c
 801cf80:	2002f178 	.word	0x2002f178
 801cf84:	2002ed24 	.word	0x2002ed24

0801cf88 <_cbENC_Button>:
{
 801cf88:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 801cf8a:	6803      	ldr	r3, [r0, #0]
 801cf8c:	2b0f      	cmp	r3, #15
 801cf8e:	d10c      	bne.n	801cfaa <_cbENC_Button+0x22>
    	if(Enc_RatioSelected == 1){
 801cf90:	4b07      	ldr	r3, [pc, #28]	; (801cfb0 <_cbENC_Button+0x28>)
 801cf92:	691b      	ldr	r3, [r3, #16]
 801cf94:	2b01      	cmp	r3, #1
 801cf96:	d004      	beq.n	801cfa2 <_cbENC_Button+0x1a>
    	    	COLOR = GUI_BLACK;
 801cf98:	4b05      	ldr	r3, [pc, #20]	; (801cfb0 <_cbENC_Button+0x28>)
 801cf9a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 801cf9e:	605a      	str	r2, [r3, #4]
}
 801cfa0:	bd08      	pop	{r3, pc}
    			COLOR = GUI_GRAY;
 801cfa2:	4b03      	ldr	r3, [pc, #12]	; (801cfb0 <_cbENC_Button+0x28>)
 801cfa4:	4a03      	ldr	r2, [pc, #12]	; (801cfb4 <_cbENC_Button+0x2c>)
 801cfa6:	605a      	str	r2, [r3, #4]
 801cfa8:	e7fa      	b.n	801cfa0 <_cbENC_Button+0x18>
      BUTTON_Callback(pMsg);
 801cfaa:	f00d f9a7 	bl	802a2fc <BUTTON_Callback>
}
 801cfae:	e7f7      	b.n	801cfa0 <_cbENC_Button+0x18>
 801cfb0:	200088cc 	.word	0x200088cc
 801cfb4:	ff808080 	.word	0xff808080

0801cfb8 <CreateEnc_RatioWindow>:


WM_HWIN CreateEnc_RatioWindow(void) {
 801cfb8:	b510      	push	{r4, lr}
 801cfba:	b084      	sub	sp, #16

	Enc_RatioWindow = WM_CreateWindow(600, 240, 180, 100, WM_CF_HIDE, _cbDialog, 0);
 801cfbc:	2300      	movs	r3, #0
 801cfbe:	9302      	str	r3, [sp, #8]
 801cfc0:	4a08      	ldr	r2, [pc, #32]	; (801cfe4 <CreateEnc_RatioWindow+0x2c>)
 801cfc2:	9201      	str	r2, [sp, #4]
 801cfc4:	9300      	str	r3, [sp, #0]
 801cfc6:	2364      	movs	r3, #100	; 0x64
 801cfc8:	22b4      	movs	r2, #180	; 0xb4
 801cfca:	21f0      	movs	r1, #240	; 0xf0
 801cfcc:	f44f 7016 	mov.w	r0, #600	; 0x258
 801cfd0:	f00a fddc 	bl	8027b8c <WM_CreateWindow>
 801cfd4:	4c04      	ldr	r4, [pc, #16]	; (801cfe8 <CreateEnc_RatioWindow+0x30>)
 801cfd6:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 801cfd8:	2001      	movs	r0, #1
 801cfda:	f00c fa49 	bl	8029470 <WM_MULTIBUF_Enable>

  return Enc_RatioWindow;
}
 801cfde:	6820      	ldr	r0, [r4, #0]
 801cfe0:	b004      	add	sp, #16
 801cfe2:	bd10      	pop	{r4, pc}
 801cfe4:	0801cd95 	.word	0x0801cd95
 801cfe8:	2002e5d8 	.word	0x2002e5d8

0801cfec <_cbDialog>:
}




static void _cbDialog(WM_MESSAGE * pMsg) {
 801cfec:	b510      	push	{r4, lr}
 801cfee:	b084      	sub	sp, #16
  int           Id, NotificationCode;


  switch(pMsg->MsgId) {
 801cff0:	6803      	ldr	r3, [r0, #0]
 801cff2:	2b0f      	cmp	r3, #15
 801cff4:	d02f      	beq.n	801d056 <_cbDialog+0x6a>
 801cff6:	4604      	mov	r4, r0
 801cff8:	dd16      	ble.n	801d028 <_cbDialog+0x3c>
 801cffa:	2b26      	cmp	r3, #38	; 0x26
 801cffc:	d04b      	beq.n	801d096 <_cbDialog+0xaa>
 801cffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801d002:	f040 80c6 	bne.w	801d192 <_cbDialog+0x1a6>
    }
    break;
//////////////////////////////////////////////////////////////////
    case WM_USER:
    	//#########UPDATE Color & value#############//
		if(pMsg->Data.v==0){
 801d006:	68c3      	ldr	r3, [r0, #12]
 801d008:	2b00      	cmp	r3, #0
 801d00a:	f000 80b7 	beq.w	801d17c <_cbDialog+0x190>
		    value = release.value;
		}
		//#########################################//

		//#########Remote unselect#################//
		else if(pMsg->Data.v==1){
 801d00e:	2b01      	cmp	r3, #1
 801d010:	d11f      	bne.n	801d052 <_cbDialog+0x66>
			Enc_ReleaseSelected = !Enc_ReleaseSelected;
 801d012:	4b62      	ldr	r3, [pc, #392]	; (801d19c <_cbDialog+0x1b0>)
 801d014:	68d9      	ldr	r1, [r3, #12]
 801d016:	fab1 f181 	clz	r1, r1
 801d01a:	0949      	lsrs	r1, r1, #5
 801d01c:	60d9      	str	r1, [r3, #12]
			BUTTON_SetState(hButton, Enc_ReleaseSelected);
 801d01e:	4b60      	ldr	r3, [pc, #384]	; (801d1a0 <_cbDialog+0x1b4>)
 801d020:	6818      	ldr	r0, [r3, #0]
 801d022:	f00d fae5 	bl	802a5f0 <BUTTON_SetState>
 801d026:	e014      	b.n	801d052 <_cbDialog+0x66>
  switch(pMsg->MsgId) {
 801d028:	2b01      	cmp	r3, #1
 801d02a:	f040 80b2 	bne.w	801d192 <_cbDialog+0x1a6>
   hButton = BUTTON_CreateEx(0, 0, 180, 100, pMsg->hWin, WM_CF_SHOW, 0, ID_ENC_Button);
 801d02e:	2301      	movs	r3, #1
 801d030:	9303      	str	r3, [sp, #12]
 801d032:	2000      	movs	r0, #0
 801d034:	9002      	str	r0, [sp, #8]
 801d036:	2302      	movs	r3, #2
 801d038:	9301      	str	r3, [sp, #4]
 801d03a:	6863      	ldr	r3, [r4, #4]
 801d03c:	9300      	str	r3, [sp, #0]
 801d03e:	2364      	movs	r3, #100	; 0x64
 801d040:	22b4      	movs	r2, #180	; 0xb4
 801d042:	4601      	mov	r1, r0
 801d044:	f00d fa12 	bl	802a46c <BUTTON_CreateEx>
 801d048:	4b55      	ldr	r3, [pc, #340]	; (801d1a0 <_cbDialog+0x1b4>)
 801d04a:	6018      	str	r0, [r3, #0]
   WM_SetCallback(hButton, _cbENC_Button);
 801d04c:	4955      	ldr	r1, [pc, #340]	; (801d1a4 <_cbDialog+0x1b8>)
 801d04e:	f00b ffdf 	bl	8029010 <WM_SetCallback>
    break;
/////////////////////////////////////////////////////////////////
   default:
    WM_DefaultProc(pMsg);
  }
}
 801d052:	b004      	add	sp, #16
 801d054:	bd10      	pop	{r4, pc}
  	GUI_SetBkColor(COLOR);
 801d056:	4c51      	ldr	r4, [pc, #324]	; (801d19c <_cbDialog+0x1b0>)
 801d058:	6820      	ldr	r0, [r4, #0]
 801d05a:	f003 f96f 	bl	802033c <GUI_SetBkColor>
  	GUI_Clear();
 801d05e:	f003 fa7d 	bl	802055c <GUI_Clear>
    GUI_SetColor(TEXTCOLOR);
 801d062:	6860      	ldr	r0, [r4, #4]
 801d064:	f003 f976 	bl	8020354 <GUI_SetColor>
    GUI_SetFont(&GUI_Font32B_1);
 801d068:	484f      	ldr	r0, [pc, #316]	; (801d1a8 <_cbDialog+0x1bc>)
 801d06a:	f003 f9d5 	bl	8020418 <GUI_SetFont>
    GUI_DispStringAt("release", 0, 0);
 801d06e:	2200      	movs	r2, #0
 801d070:	4611      	mov	r1, r2
 801d072:	484e      	ldr	r0, [pc, #312]	; (801d1ac <_cbDialog+0x1c0>)
 801d074:	f003 fe9a 	bl	8020dac <GUI_DispStringAt>
    GUI_SetFont(&GUI_FontD36x48);
 801d078:	484d      	ldr	r0, [pc, #308]	; (801d1b0 <_cbDialog+0x1c4>)
 801d07a:	f003 f9cd 	bl	8020418 <GUI_SetFont>
    GUI_GotoXY(0,30);
 801d07e:	211e      	movs	r1, #30
 801d080:	2000      	movs	r0, #0
 801d082:	f003 f8fd 	bl	8020280 <GUI_GotoXY>
    GUI_DispFloatMin(value, 1);
 801d086:	ed94 0a02 	vldr	s0, [r4, #8]
 801d08a:	2001      	movs	r0, #1
 801d08c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801d090:	f004 fc68 	bl	8021964 <GUI_DispFloatMin>
    break;
 801d094:	e7dd      	b.n	801d052 <_cbDialog+0x66>
    Id    = WM_GetId(pMsg->hWinSrc);
 801d096:	6880      	ldr	r0, [r0, #8]
 801d098:	f00b feb8 	bl	8028e0c <WM_GetId>
    NotificationCode = pMsg->Data.v;
 801d09c:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 801d09e:	2801      	cmp	r0, #1
 801d0a0:	d1d7      	bne.n	801d052 <_cbDialog+0x66>
      switch(NotificationCode) {
 801d0a2:	2b01      	cmp	r3, #1
 801d0a4:	d1d5      	bne.n	801d052 <_cbDialog+0x66>
    	 if 	 (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 801d0a6:	4b43      	ldr	r3, [pc, #268]	; (801d1b4 <_cbDialog+0x1c8>)
 801d0a8:	681b      	ldr	r3, [r3, #0]
 801d0aa:	b9eb      	cbnz	r3, 801d0e8 <_cbDialog+0xfc>
    	 else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 801d0ac:	4b42      	ldr	r3, [pc, #264]	; (801d1b8 <_cbDialog+0x1cc>)
 801d0ae:	681b      	ldr	r3, [r3, #0]
 801d0b0:	2b00      	cmp	r3, #0
 801d0b2:	d131      	bne.n	801d118 <_cbDialog+0x12c>
    	 else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 801d0b4:	4b41      	ldr	r3, [pc, #260]	; (801d1bc <_cbDialog+0x1d0>)
 801d0b6:	681b      	ldr	r3, [r3, #0]
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	d138      	bne.n	801d12e <_cbDialog+0x142>
    	 else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 801d0bc:	4b40      	ldr	r3, [pc, #256]	; (801d1c0 <_cbDialog+0x1d4>)
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	d13f      	bne.n	801d144 <_cbDialog+0x158>
    	 else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 801d0c4:	4b3f      	ldr	r3, [pc, #252]	; (801d1c4 <_cbDialog+0x1d8>)
 801d0c6:	681b      	ldr	r3, [r3, #0]
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	d146      	bne.n	801d15a <_cbDialog+0x16e>
    	 else if (Enc_InputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_InputWindow, pMsg);}
 801d0cc:	4b3e      	ldr	r3, [pc, #248]	; (801d1c8 <_cbDialog+0x1dc>)
 801d0ce:	681b      	ldr	r3, [r3, #0]
 801d0d0:	b1a3      	cbz	r3, 801d0fc <_cbDialog+0x110>
 801d0d2:	2301      	movs	r3, #1
 801d0d4:	60e3      	str	r3, [r4, #12]
 801d0d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d0da:	6023      	str	r3, [r4, #0]
 801d0dc:	4621      	mov	r1, r4
 801d0de:	4b3b      	ldr	r3, [pc, #236]	; (801d1cc <_cbDialog+0x1e0>)
 801d0e0:	6818      	ldr	r0, [r3, #0]
 801d0e2:	f00a fbdf 	bl	80278a4 <WM_SendMessage>
 801d0e6:	e009      	b.n	801d0fc <_cbDialog+0x110>
    	 if 	 (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 801d0e8:	2301      	movs	r3, #1
 801d0ea:	60e3      	str	r3, [r4, #12]
 801d0ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d0f0:	6023      	str	r3, [r4, #0]
 801d0f2:	4621      	mov	r1, r4
 801d0f4:	4b36      	ldr	r3, [pc, #216]	; (801d1d0 <_cbDialog+0x1e4>)
 801d0f6:	6818      	ldr	r0, [r3, #0]
 801d0f8:	f00a fbd4 	bl	80278a4 <WM_SendMessage>
    	  Enc_ReleaseSelected = !Enc_ReleaseSelected;
 801d0fc:	4a27      	ldr	r2, [pc, #156]	; (801d19c <_cbDialog+0x1b0>)
 801d0fe:	68d3      	ldr	r3, [r2, #12]
 801d100:	fab3 f383 	clz	r3, r3
 801d104:	095b      	lsrs	r3, r3, #5
 801d106:	60d3      	str	r3, [r2, #12]
    	  if(Enc_ReleaseSelected){
 801d108:	2b00      	cmp	r3, #0
 801d10a:	d031      	beq.n	801d170 <_cbDialog+0x184>
    	      BUTTON_SetState(hButton, 1);
 801d10c:	2101      	movs	r1, #1
 801d10e:	4b24      	ldr	r3, [pc, #144]	; (801d1a0 <_cbDialog+0x1b4>)
 801d110:	6818      	ldr	r0, [r3, #0]
 801d112:	f00d fa6d 	bl	802a5f0 <BUTTON_SetState>
 801d116:	e79c      	b.n	801d052 <_cbDialog+0x66>
    	 else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 801d118:	2301      	movs	r3, #1
 801d11a:	60e3      	str	r3, [r4, #12]
 801d11c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d120:	6023      	str	r3, [r4, #0]
 801d122:	4621      	mov	r1, r4
 801d124:	4b2b      	ldr	r3, [pc, #172]	; (801d1d4 <_cbDialog+0x1e8>)
 801d126:	6818      	ldr	r0, [r3, #0]
 801d128:	f00a fbbc 	bl	80278a4 <WM_SendMessage>
 801d12c:	e7e6      	b.n	801d0fc <_cbDialog+0x110>
    	 else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 801d12e:	2301      	movs	r3, #1
 801d130:	60e3      	str	r3, [r4, #12]
 801d132:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d136:	6023      	str	r3, [r4, #0]
 801d138:	4621      	mov	r1, r4
 801d13a:	4b27      	ldr	r3, [pc, #156]	; (801d1d8 <_cbDialog+0x1ec>)
 801d13c:	6818      	ldr	r0, [r3, #0]
 801d13e:	f00a fbb1 	bl	80278a4 <WM_SendMessage>
 801d142:	e7db      	b.n	801d0fc <_cbDialog+0x110>
    	 else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 801d144:	2301      	movs	r3, #1
 801d146:	60e3      	str	r3, [r4, #12]
 801d148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d14c:	6023      	str	r3, [r4, #0]
 801d14e:	4621      	mov	r1, r4
 801d150:	4b22      	ldr	r3, [pc, #136]	; (801d1dc <_cbDialog+0x1f0>)
 801d152:	6818      	ldr	r0, [r3, #0]
 801d154:	f00a fba6 	bl	80278a4 <WM_SendMessage>
 801d158:	e7d0      	b.n	801d0fc <_cbDialog+0x110>
    	 else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 801d15a:	2301      	movs	r3, #1
 801d15c:	60e3      	str	r3, [r4, #12]
 801d15e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d162:	6023      	str	r3, [r4, #0]
 801d164:	4621      	mov	r1, r4
 801d166:	4b1e      	ldr	r3, [pc, #120]	; (801d1e0 <_cbDialog+0x1f4>)
 801d168:	6818      	ldr	r0, [r3, #0]
 801d16a:	f00a fb9b 	bl	80278a4 <WM_SendMessage>
 801d16e:	e7c5      	b.n	801d0fc <_cbDialog+0x110>
    	      BUTTON_SetState(hButton, 0);
 801d170:	2100      	movs	r1, #0
 801d172:	4b0b      	ldr	r3, [pc, #44]	; (801d1a0 <_cbDialog+0x1b4>)
 801d174:	6818      	ldr	r0, [r3, #0]
 801d176:	f00d fa3b 	bl	802a5f0 <BUTTON_SetState>
 801d17a:	e76a      	b.n	801d052 <_cbDialog+0x66>
			TEXTCOLOR = release.Color;
 801d17c:	4a19      	ldr	r2, [pc, #100]	; (801d1e4 <_cbDialog+0x1f8>)
 801d17e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 801d180:	4b06      	ldr	r3, [pc, #24]	; (801d19c <_cbDialog+0x1b0>)
 801d182:	6059      	str	r1, [r3, #4]
		    value = release.value;
 801d184:	edd2 7a00 	vldr	s15, [r2]
 801d188:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d18c:	edc3 7a02 	vstr	s15, [r3, #8]
 801d190:	e75f      	b.n	801d052 <_cbDialog+0x66>
    WM_DefaultProc(pMsg);
 801d192:	4620      	mov	r0, r4
 801d194:	f00b fa72 	bl	802867c <WM_DefaultProc>
}
 801d198:	e75b      	b.n	801d052 <_cbDialog+0x66>
 801d19a:	bf00      	nop
 801d19c:	200088e0 	.word	0x200088e0
 801d1a0:	20030664 	.word	0x20030664
 801d1a4:	0801d1e9 	.word	0x0801d1e9
 801d1a8:	08038488 	.word	0x08038488
 801d1ac:	0804293c 	.word	0x0804293c
 801d1b0:	08040494 	.word	0x08040494
 801d1b4:	2000887c 	.word	0x2000887c
 801d1b8:	20008890 	.word	0x20008890
 801d1bc:	200088b4 	.word	0x200088b4
 801d1c0:	200088c8 	.word	0x200088c8
 801d1c4:	200088dc 	.word	0x200088dc
 801d1c8:	200088a4 	.word	0x200088a4
 801d1cc:	2002e724 	.word	0x2002e724
 801d1d0:	2002ef0c 	.word	0x2002ef0c
 801d1d4:	2002ee28 	.word	0x2002ee28
 801d1d8:	2002e8d4 	.word	0x2002e8d4
 801d1dc:	2002e55c 	.word	0x2002e55c
 801d1e0:	2002e5d8 	.word	0x2002e5d8
 801d1e4:	2002e8d8 	.word	0x2002e8d8

0801d1e8 <_cbENC_Button>:
{
 801d1e8:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 801d1ea:	6803      	ldr	r3, [r0, #0]
 801d1ec:	2b0f      	cmp	r3, #15
 801d1ee:	d10c      	bne.n	801d20a <_cbENC_Button+0x22>
    	if(Enc_ReleaseSelected == 1){
 801d1f0:	4b07      	ldr	r3, [pc, #28]	; (801d210 <_cbENC_Button+0x28>)
 801d1f2:	68db      	ldr	r3, [r3, #12]
 801d1f4:	2b01      	cmp	r3, #1
 801d1f6:	d004      	beq.n	801d202 <_cbENC_Button+0x1a>
    	    	COLOR = GUI_BLACK;
 801d1f8:	4b05      	ldr	r3, [pc, #20]	; (801d210 <_cbENC_Button+0x28>)
 801d1fa:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 801d1fe:	601a      	str	r2, [r3, #0]
}
 801d200:	bd08      	pop	{r3, pc}
    			COLOR = GUI_GRAY;
 801d202:	4b03      	ldr	r3, [pc, #12]	; (801d210 <_cbENC_Button+0x28>)
 801d204:	4a03      	ldr	r2, [pc, #12]	; (801d214 <_cbENC_Button+0x2c>)
 801d206:	601a      	str	r2, [r3, #0]
 801d208:	e7fa      	b.n	801d200 <_cbENC_Button+0x18>
      BUTTON_Callback(pMsg);
 801d20a:	f00d f877 	bl	802a2fc <BUTTON_Callback>
}
 801d20e:	e7f7      	b.n	801d200 <_cbENC_Button+0x18>
 801d210:	200088e0 	.word	0x200088e0
 801d214:	ff808080 	.word	0xff808080

0801d218 <CreateEnc_ReleaseWindow>:


WM_HWIN CreateEnc_ReleaseWindow(void) {
 801d218:	b510      	push	{r4, lr}
 801d21a:	b084      	sub	sp, #16

	Enc_ReleaseWindow = WM_CreateWindow(20, 240, 180, 100, WM_CF_HIDE, _cbDialog, 0);
 801d21c:	2300      	movs	r3, #0
 801d21e:	9302      	str	r3, [sp, #8]
 801d220:	4a08      	ldr	r2, [pc, #32]	; (801d244 <CreateEnc_ReleaseWindow+0x2c>)
 801d222:	9201      	str	r2, [sp, #4]
 801d224:	9300      	str	r3, [sp, #0]
 801d226:	2364      	movs	r3, #100	; 0x64
 801d228:	22b4      	movs	r2, #180	; 0xb4
 801d22a:	21f0      	movs	r1, #240	; 0xf0
 801d22c:	2014      	movs	r0, #20
 801d22e:	f00a fcad 	bl	8027b8c <WM_CreateWindow>
 801d232:	4c05      	ldr	r4, [pc, #20]	; (801d248 <CreateEnc_ReleaseWindow+0x30>)
 801d234:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 801d236:	2001      	movs	r0, #1
 801d238:	f00c f91a 	bl	8029470 <WM_MULTIBUF_Enable>

  return Enc_ReleaseWindow;
}
 801d23c:	6820      	ldr	r0, [r4, #0]
 801d23e:	b004      	add	sp, #16
 801d240:	bd10      	pop	{r4, pc}
 801d242:	bf00      	nop
 801d244:	0801cfed 	.word	0x0801cfed
 801d248:	2002f178 	.word	0x2002f178

0801d24c <drawBarDottedVertical>:



}

void drawBarDottedVertical (int pos_x, int pos_y, float PeakVal,float AvVal, GUI_COLOR color, int width){
 801d24c:	b500      	push	{lr}
 801d24e:	b085      	sub	sp, #20
 801d250:	9103      	str	r1, [sp, #12]

	GUI_DrawGradientV(pos_x,pos_y-AvVal,pos_x+width,pos_y, color,color);
 801d252:	ee07 1a90 	vmov	s15, r1
 801d256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d25a:	ee77 0ae0 	vsub.f32	s1, s15, s1
 801d25e:	18c1      	adds	r1, r0, r3
 801d260:	9201      	str	r2, [sp, #4]
 801d262:	9200      	str	r2, [sp, #0]
 801d264:	9b03      	ldr	r3, [sp, #12]
 801d266:	460a      	mov	r2, r1
 801d268:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 801d26c:	ee17 1a90 	vmov	r1, s15
 801d270:	f003 ff26 	bl	80210c0 <GUI_DrawGradientV>


}
 801d274:	b005      	add	sp, #20
 801d276:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0801d27c <_cbDialog>:
#include "stm32f4xx_hal.h"


static void _cbDialog(WM_MESSAGE * pMsg) {

  switch (pMsg->MsgId) {
 801d27c:	6803      	ldr	r3, [r0, #0]
 801d27e:	2b01      	cmp	r3, #1
 801d280:	d05d      	beq.n	801d33e <_cbDialog+0xc2>
static void _cbDialog(WM_MESSAGE * pMsg) {
 801d282:	b510      	push	{r4, lr}
  switch (pMsg->MsgId) {
 801d284:	2b0f      	cmp	r3, #15
 801d286:	d157      	bne.n	801d338 <_cbDialog+0xbc>
  case WM_CREATE:

    break;
  case WM_PAINT:
	  GUI_SetBkColor(GUI_BLACK);
 801d288:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801d28c:	f003 f856 	bl	802033c <GUI_SetBkColor>

	  GUI_Clear();
 801d290:	f003 f964 	bl	802055c <GUI_Clear>
		for(int i=0; i<400;i++){
 801d294:	2400      	movs	r4, #0
 801d296:	e007      	b.n	801d2a8 <_cbDialog+0x2c>
			GUI_SetColor(GUI_LIGHTGRAY);
			if(i % 25 == 0){
				GUI_DrawHLine(400-i-20,2,+12);
 801d298:	220c      	movs	r2, #12
 801d29a:	2102      	movs	r1, #2
 801d29c:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 801d2a0:	f003 ffe2 	bl	8021268 <GUI_DrawHLine>
 801d2a4:	e012      	b.n	801d2cc <_cbDialog+0x50>
		for(int i=0; i<400;i++){
 801d2a6:	3401      	adds	r4, #1
 801d2a8:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 801d2ac:	da46      	bge.n	801d33c <_cbDialog+0xc0>
			GUI_SetColor(GUI_LIGHTGRAY);
 801d2ae:	4824      	ldr	r0, [pc, #144]	; (801d340 <_cbDialog+0xc4>)
 801d2b0:	f003 f850 	bl	8020354 <GUI_SetColor>
			if(i % 25 == 0){
 801d2b4:	4a23      	ldr	r2, [pc, #140]	; (801d344 <_cbDialog+0xc8>)
 801d2b6:	fb82 3204 	smull	r3, r2, r2, r4
 801d2ba:	17e3      	asrs	r3, r4, #31
 801d2bc:	ebc3 03e2 	rsb	r3, r3, r2, asr #3
 801d2c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d2c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d2c8:	429c      	cmp	r4, r3
 801d2ca:	d0e5      	beq.n	801d298 <_cbDialog+0x1c>
			}
			if(i % 50 == 0){
 801d2cc:	4a1d      	ldr	r2, [pc, #116]	; (801d344 <_cbDialog+0xc8>)
 801d2ce:	fb82 3204 	smull	r3, r2, r2, r4
 801d2d2:	17e3      	asrs	r3, r4, #31
 801d2d4:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 801d2d8:	2232      	movs	r2, #50	; 0x32
 801d2da:	fb02 4313 	mls	r3, r2, r3, r4
 801d2de:	2b00      	cmp	r3, #0
 801d2e0:	d1e1      	bne.n	801d2a6 <_cbDialog+0x2a>
				GUI_DrawHLine(400-i-20+1,2,+12);
 801d2e2:	220c      	movs	r2, #12
 801d2e4:	2102      	movs	r1, #2
 801d2e6:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 801d2ea:	3001      	adds	r0, #1
 801d2ec:	f003 ffbc 	bl	8021268 <GUI_DrawHLine>
				GUI_DrawHLine(400-i-20,2,+12);
 801d2f0:	220c      	movs	r2, #12
 801d2f2:	2102      	movs	r1, #2
 801d2f4:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 801d2f8:	f003 ffb6 	bl	8021268 <GUI_DrawHLine>
				GUI_DrawHLine(400-i-20-1,2,+12);
 801d2fc:	220c      	movs	r2, #12
 801d2fe:	2102      	movs	r1, #2
 801d300:	f5c4 70bd 	rsb	r0, r4, #378	; 0x17a
 801d304:	3001      	adds	r0, #1
 801d306:	f003 ffaf 	bl	8021268 <GUI_DrawHLine>

				GUI_GotoXY(20,400-i-20-5);
 801d30a:	f5c4 71bb 	rsb	r1, r4, #374	; 0x176
 801d30e:	3101      	adds	r1, #1
 801d310:	2014      	movs	r0, #20
 801d312:	f002 ffb5 	bl	8020280 <GUI_GotoXY>
				GUI_DispFloatMin(((i-400-20+100)/10)+2, 1);
 801d316:	f5a4 73a0 	sub.w	r3, r4, #320	; 0x140
 801d31a:	4a0b      	ldr	r2, [pc, #44]	; (801d348 <_cbDialog+0xcc>)
 801d31c:	fb82 1203 	smull	r1, r2, r2, r3
 801d320:	17db      	asrs	r3, r3, #31
 801d322:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 801d326:	3302      	adds	r3, #2
 801d328:	ee00 3a10 	vmov	s0, r3
 801d32c:	2001      	movs	r0, #1
 801d32e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801d332:	f004 fb17 	bl	8021964 <GUI_DispFloatMin>
 801d336:	e7b6      	b.n	801d2a6 <_cbDialog+0x2a>
			}
		}

    break;
  default:
    WM_DefaultProc(pMsg);
 801d338:	f00b f9a0 	bl	802867c <WM_DefaultProc>

	}

}
 801d33c:	bd10      	pop	{r4, pc}
 801d33e:	4770      	bx	lr
 801d340:	ffd3d3d3 	.word	0xffd3d3d3
 801d344:	51eb851f 	.word	0x51eb851f
 801d348:	66666667 	.word	0x66666667

0801d34c <CreateIndicatorWindow1>:


WM_HWIN CreateIndicatorWindow1(void) {
 801d34c:	b510      	push	{r4, lr}
 801d34e:	b084      	sub	sp, #16



  IndicatorWindow1 = WM_CreateWindow(290, 60, 50, 390,WM_CF_HIDE , _cbDialog, 0);
 801d350:	2300      	movs	r3, #0
 801d352:	9302      	str	r3, [sp, #8]
 801d354:	4a09      	ldr	r2, [pc, #36]	; (801d37c <CreateIndicatorWindow1+0x30>)
 801d356:	9201      	str	r2, [sp, #4]
 801d358:	9300      	str	r3, [sp, #0]
 801d35a:	f44f 73c3 	mov.w	r3, #390	; 0x186
 801d35e:	2232      	movs	r2, #50	; 0x32
 801d360:	213c      	movs	r1, #60	; 0x3c
 801d362:	f44f 7091 	mov.w	r0, #290	; 0x122
 801d366:	f00a fc11 	bl	8027b8c <WM_CreateWindow>
 801d36a:	4c05      	ldr	r4, [pc, #20]	; (801d380 <CreateIndicatorWindow1+0x34>)
 801d36c:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 801d36e:	2001      	movs	r0, #1
 801d370:	f00c f87e 	bl	8029470 <WM_MULTIBUF_Enable>

  return IndicatorWindow1;
}
 801d374:	6820      	ldr	r0, [r4, #0]
 801d376:	b004      	add	sp, #16
 801d378:	bd10      	pop	{r4, pc}
 801d37a:	bf00      	nop
 801d37c:	0801d27d 	.word	0x0801d27d
 801d380:	2002e554 	.word	0x2002e554

0801d384 <_cbDialog>:
#include "stm32f4xx_hal.h"


static void _cbDialog(WM_MESSAGE * pMsg) {

  switch (pMsg->MsgId) {
 801d384:	6803      	ldr	r3, [r0, #0]
 801d386:	2b01      	cmp	r3, #1
 801d388:	d05d      	beq.n	801d446 <_cbDialog+0xc2>
static void _cbDialog(WM_MESSAGE * pMsg) {
 801d38a:	b510      	push	{r4, lr}
  switch (pMsg->MsgId) {
 801d38c:	2b0f      	cmp	r3, #15
 801d38e:	d157      	bne.n	801d440 <_cbDialog+0xbc>
  case WM_CREATE:

    break;
  case WM_PAINT:
	  GUI_SetBkColor(GUI_BLACK);
 801d390:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801d394:	f002 ffd2 	bl	802033c <GUI_SetBkColor>

	  GUI_Clear();
 801d398:	f003 f8e0 	bl	802055c <GUI_Clear>
	  		for(int i=0; i<400;i++){
 801d39c:	2400      	movs	r4, #0
 801d39e:	e007      	b.n	801d3b0 <_cbDialog+0x2c>
	  			GUI_SetColor(GUI_LIGHTGRAY);
	  			if(i % 25 == 0){
	  				GUI_DrawHLine(400-i-20,2,+12);
 801d3a0:	220c      	movs	r2, #12
 801d3a2:	2102      	movs	r1, #2
 801d3a4:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 801d3a8:	f003 ff5e 	bl	8021268 <GUI_DrawHLine>
 801d3ac:	e012      	b.n	801d3d4 <_cbDialog+0x50>
	  		for(int i=0; i<400;i++){
 801d3ae:	3401      	adds	r4, #1
 801d3b0:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 801d3b4:	da46      	bge.n	801d444 <_cbDialog+0xc0>
	  			GUI_SetColor(GUI_LIGHTGRAY);
 801d3b6:	4824      	ldr	r0, [pc, #144]	; (801d448 <_cbDialog+0xc4>)
 801d3b8:	f002 ffcc 	bl	8020354 <GUI_SetColor>
	  			if(i % 25 == 0){
 801d3bc:	4a23      	ldr	r2, [pc, #140]	; (801d44c <_cbDialog+0xc8>)
 801d3be:	fb82 3204 	smull	r3, r2, r2, r4
 801d3c2:	17e3      	asrs	r3, r4, #31
 801d3c4:	ebc3 03e2 	rsb	r3, r3, r2, asr #3
 801d3c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d3cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d3d0:	429c      	cmp	r4, r3
 801d3d2:	d0e5      	beq.n	801d3a0 <_cbDialog+0x1c>
	  			}
	  			if(i % 50 == 0){
 801d3d4:	4a1d      	ldr	r2, [pc, #116]	; (801d44c <_cbDialog+0xc8>)
 801d3d6:	fb82 3204 	smull	r3, r2, r2, r4
 801d3da:	17e3      	asrs	r3, r4, #31
 801d3dc:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 801d3e0:	2232      	movs	r2, #50	; 0x32
 801d3e2:	fb02 4313 	mls	r3, r2, r3, r4
 801d3e6:	2b00      	cmp	r3, #0
 801d3e8:	d1e1      	bne.n	801d3ae <_cbDialog+0x2a>
	  				GUI_DrawHLine(400-i-20+1,2,+12);
 801d3ea:	220c      	movs	r2, #12
 801d3ec:	2102      	movs	r1, #2
 801d3ee:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 801d3f2:	3001      	adds	r0, #1
 801d3f4:	f003 ff38 	bl	8021268 <GUI_DrawHLine>
	  				GUI_DrawHLine(400-i-20,2,+12);
 801d3f8:	220c      	movs	r2, #12
 801d3fa:	2102      	movs	r1, #2
 801d3fc:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 801d400:	f003 ff32 	bl	8021268 <GUI_DrawHLine>
	  				GUI_DrawHLine(400-i-20-1,2,+12);
 801d404:	220c      	movs	r2, #12
 801d406:	2102      	movs	r1, #2
 801d408:	f5c4 70bd 	rsb	r0, r4, #378	; 0x17a
 801d40c:	3001      	adds	r0, #1
 801d40e:	f003 ff2b 	bl	8021268 <GUI_DrawHLine>

	  				GUI_GotoXY(20,400-i-20-5);
 801d412:	f5c4 71bb 	rsb	r1, r4, #374	; 0x176
 801d416:	3101      	adds	r1, #1
 801d418:	2014      	movs	r0, #20
 801d41a:	f002 ff31 	bl	8020280 <GUI_GotoXY>
	  				GUI_DispFloatMin(((i-400-20+100)/10)+2, 1);
 801d41e:	f5a4 73a0 	sub.w	r3, r4, #320	; 0x140
 801d422:	4a0b      	ldr	r2, [pc, #44]	; (801d450 <_cbDialog+0xcc>)
 801d424:	fb82 1203 	smull	r1, r2, r2, r3
 801d428:	17db      	asrs	r3, r3, #31
 801d42a:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 801d42e:	3302      	adds	r3, #2
 801d430:	ee00 3a10 	vmov	s0, r3
 801d434:	2001      	movs	r0, #1
 801d436:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801d43a:	f004 fa93 	bl	8021964 <GUI_DispFloatMin>
 801d43e:	e7b6      	b.n	801d3ae <_cbDialog+0x2a>
	  			}
	  		}

    break;
  default:
    WM_DefaultProc(pMsg);
 801d440:	f00b f91c 	bl	802867c <WM_DefaultProc>

	}

}
 801d444:	bd10      	pop	{r4, pc}
 801d446:	4770      	bx	lr
 801d448:	ffd3d3d3 	.word	0xffd3d3d3
 801d44c:	51eb851f 	.word	0x51eb851f
 801d450:	66666667 	.word	0x66666667

0801d454 <CreateIndicatorWindow2>:


WM_HWIN CreateIndicatorWindow2(void) {
 801d454:	b510      	push	{r4, lr}
 801d456:	b084      	sub	sp, #16



  IndicatorWindow2 = WM_CreateWindow(415, 60, 50, 390,WM_CF_HIDE , _cbDialog, 0);
 801d458:	2300      	movs	r3, #0
 801d45a:	9302      	str	r3, [sp, #8]
 801d45c:	4a09      	ldr	r2, [pc, #36]	; (801d484 <CreateIndicatorWindow2+0x30>)
 801d45e:	9201      	str	r2, [sp, #4]
 801d460:	9300      	str	r3, [sp, #0]
 801d462:	f44f 73c3 	mov.w	r3, #390	; 0x186
 801d466:	2232      	movs	r2, #50	; 0x32
 801d468:	213c      	movs	r1, #60	; 0x3c
 801d46a:	f240 109f 	movw	r0, #415	; 0x19f
 801d46e:	f00a fb8d 	bl	8027b8c <WM_CreateWindow>
 801d472:	4c05      	ldr	r4, [pc, #20]	; (801d488 <CreateIndicatorWindow2+0x34>)
 801d474:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 801d476:	2001      	movs	r0, #1
 801d478:	f00b fffa 	bl	8029470 <WM_MULTIBUF_Enable>

  return IndicatorWindow2;
}
 801d47c:	6820      	ldr	r0, [r4, #0]
 801d47e:	b004      	add	sp, #16
 801d480:	bd10      	pop	{r4, pc}
 801d482:	bf00      	nop
 801d484:	0801d385 	.word	0x0801d385
 801d488:	2002e558 	.word	0x2002e558

0801d48c <_cbDialog>:
#include "stm32f4xx_hal.h"


static void _cbDialog(WM_MESSAGE * pMsg) {

  switch (pMsg->MsgId) {
 801d48c:	6803      	ldr	r3, [r0, #0]
 801d48e:	2b01      	cmp	r3, #1
 801d490:	d05d      	beq.n	801d54e <_cbDialog+0xc2>
static void _cbDialog(WM_MESSAGE * pMsg) {
 801d492:	b510      	push	{r4, lr}
  switch (pMsg->MsgId) {
 801d494:	2b0f      	cmp	r3, #15
 801d496:	d157      	bne.n	801d548 <_cbDialog+0xbc>
  case WM_CREATE:

    break;
  case WM_PAINT:
	  GUI_SetBkColor(GUI_BLACK);
 801d498:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801d49c:	f002 ff4e 	bl	802033c <GUI_SetBkColor>

	  GUI_Clear();
 801d4a0:	f003 f85c 	bl	802055c <GUI_Clear>
	  		for(int i=0; i<400;i++){
 801d4a4:	2400      	movs	r4, #0
 801d4a6:	e007      	b.n	801d4b8 <_cbDialog+0x2c>
	  			GUI_SetColor(GUI_LIGHTGRAY);
	  			if(i % 25 == 0){
	  				GUI_DrawHLine(400-i-20,2,+12);
 801d4a8:	220c      	movs	r2, #12
 801d4aa:	2102      	movs	r1, #2
 801d4ac:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 801d4b0:	f003 feda 	bl	8021268 <GUI_DrawHLine>
 801d4b4:	e012      	b.n	801d4dc <_cbDialog+0x50>
	  		for(int i=0; i<400;i++){
 801d4b6:	3401      	adds	r4, #1
 801d4b8:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 801d4bc:	da46      	bge.n	801d54c <_cbDialog+0xc0>
	  			GUI_SetColor(GUI_LIGHTGRAY);
 801d4be:	4824      	ldr	r0, [pc, #144]	; (801d550 <_cbDialog+0xc4>)
 801d4c0:	f002 ff48 	bl	8020354 <GUI_SetColor>
	  			if(i % 25 == 0){
 801d4c4:	4a23      	ldr	r2, [pc, #140]	; (801d554 <_cbDialog+0xc8>)
 801d4c6:	fb82 3204 	smull	r3, r2, r2, r4
 801d4ca:	17e3      	asrs	r3, r4, #31
 801d4cc:	ebc3 03e2 	rsb	r3, r3, r2, asr #3
 801d4d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d4d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d4d8:	429c      	cmp	r4, r3
 801d4da:	d0e5      	beq.n	801d4a8 <_cbDialog+0x1c>
	  			}
	  			if(i % 50 == 0){
 801d4dc:	4a1d      	ldr	r2, [pc, #116]	; (801d554 <_cbDialog+0xc8>)
 801d4de:	fb82 3204 	smull	r3, r2, r2, r4
 801d4e2:	17e3      	asrs	r3, r4, #31
 801d4e4:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 801d4e8:	2232      	movs	r2, #50	; 0x32
 801d4ea:	fb02 4313 	mls	r3, r2, r3, r4
 801d4ee:	2b00      	cmp	r3, #0
 801d4f0:	d1e1      	bne.n	801d4b6 <_cbDialog+0x2a>
	  				GUI_DrawHLine(400-i-20+1,2,+12);
 801d4f2:	220c      	movs	r2, #12
 801d4f4:	2102      	movs	r1, #2
 801d4f6:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 801d4fa:	3001      	adds	r0, #1
 801d4fc:	f003 feb4 	bl	8021268 <GUI_DrawHLine>
	  				GUI_DrawHLine(400-i-20,2,+12);
 801d500:	220c      	movs	r2, #12
 801d502:	2102      	movs	r1, #2
 801d504:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 801d508:	f003 feae 	bl	8021268 <GUI_DrawHLine>
	  				GUI_DrawHLine(400-i-20-1,2,+12);
 801d50c:	220c      	movs	r2, #12
 801d50e:	2102      	movs	r1, #2
 801d510:	f5c4 70bd 	rsb	r0, r4, #378	; 0x17a
 801d514:	3001      	adds	r0, #1
 801d516:	f003 fea7 	bl	8021268 <GUI_DrawHLine>

	  				GUI_GotoXY(20,400-i-20-5);
 801d51a:	f5c4 71bb 	rsb	r1, r4, #374	; 0x176
 801d51e:	3101      	adds	r1, #1
 801d520:	2014      	movs	r0, #20
 801d522:	f002 fead 	bl	8020280 <GUI_GotoXY>
	  				GUI_DispFloatMin(((i-400-20+100)/10)+2, 1);
 801d526:	f5a4 73a0 	sub.w	r3, r4, #320	; 0x140
 801d52a:	4a0b      	ldr	r2, [pc, #44]	; (801d558 <_cbDialog+0xcc>)
 801d52c:	fb82 1203 	smull	r1, r2, r2, r3
 801d530:	17db      	asrs	r3, r3, #31
 801d532:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 801d536:	3302      	adds	r3, #2
 801d538:	ee00 3a10 	vmov	s0, r3
 801d53c:	2001      	movs	r0, #1
 801d53e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 801d542:	f004 fa0f 	bl	8021964 <GUI_DispFloatMin>
 801d546:	e7b6      	b.n	801d4b6 <_cbDialog+0x2a>
	  			}
	  		}

    break;
  default:
    WM_DefaultProc(pMsg);
 801d548:	f00b f898 	bl	802867c <WM_DefaultProc>

	}

}
 801d54c:	bd10      	pop	{r4, pc}
 801d54e:	4770      	bx	lr
 801d550:	ffd3d3d3 	.word	0xffd3d3d3
 801d554:	51eb851f 	.word	0x51eb851f
 801d558:	66666667 	.word	0x66666667

0801d55c <CreateIndicatorWindow3>:


WM_HWIN CreateIndicatorWindow3(void) {
 801d55c:	b510      	push	{r4, lr}
 801d55e:	b084      	sub	sp, #16



  IndicatorWindow3 = WM_CreateWindow(545, 60, 50, 390,WM_CF_HIDE , _cbDialog, 0);
 801d560:	2300      	movs	r3, #0
 801d562:	9302      	str	r3, [sp, #8]
 801d564:	4a09      	ldr	r2, [pc, #36]	; (801d58c <CreateIndicatorWindow3+0x30>)
 801d566:	9201      	str	r2, [sp, #4]
 801d568:	9300      	str	r3, [sp, #0]
 801d56a:	f44f 73c3 	mov.w	r3, #390	; 0x186
 801d56e:	2232      	movs	r2, #50	; 0x32
 801d570:	213c      	movs	r1, #60	; 0x3c
 801d572:	f240 2021 	movw	r0, #545	; 0x221
 801d576:	f00a fb09 	bl	8027b8c <WM_CreateWindow>
 801d57a:	4c05      	ldr	r4, [pc, #20]	; (801d590 <CreateIndicatorWindow3+0x34>)
 801d57c:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 801d57e:	2001      	movs	r0, #1
 801d580:	f00b ff76 	bl	8029470 <WM_MULTIBUF_Enable>

  return IndicatorWindow3;
}
 801d584:	6820      	ldr	r0, [r4, #0]
 801d586:	b004      	add	sp, #16
 801d588:	bd10      	pop	{r4, pc}
 801d58a:	bf00      	nop
 801d58c:	0801d48d 	.word	0x0801d48d
 801d590:	2002e708 	.word	0x2002e708

0801d594 <GUI_X_Config>:
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void)
{
 801d594:	b508      	push	{r3, lr}

  GUI_ALLOC_AssignMemory(extMem, GUI_NUMBYTES);
 801d596:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 801d59a:	4802      	ldr	r0, [pc, #8]	; (801d5a4 <GUI_X_Config+0x10>)
 801d59c:	f002 fb92 	bl	801fcc4 <GUI_ALLOC_AssignMemory>

}
 801d5a0:	bd08      	pop	{r3, pc}
 801d5a2:	bf00      	nop
 801d5a4:	200088f0 	.word	0x200088f0

0801d5a8 <HAL_FMC_MspInit>:
  }
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 801d5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5ac:	b086      	sub	sp, #24
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 801d5ae:	2300      	movs	r3, #0
 801d5b0:	9301      	str	r3, [sp, #4]
 801d5b2:	9302      	str	r3, [sp, #8]
 801d5b4:	9303      	str	r3, [sp, #12]
 801d5b6:	9304      	str	r3, [sp, #16]
 801d5b8:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 801d5ba:	4b33      	ldr	r3, [pc, #204]	; (801d688 <HAL_FMC_MspInit+0xe0>)
 801d5bc:	681b      	ldr	r3, [r3, #0]
 801d5be:	b113      	cbz	r3, 801d5c6 <HAL_FMC_MspInit+0x1e>
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 801d5c0:	b006      	add	sp, #24
 801d5c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  FMC_Initialized = 1;
 801d5c6:	f04f 0801 	mov.w	r8, #1
 801d5ca:	4b2f      	ldr	r3, [pc, #188]	; (801d688 <HAL_FMC_MspInit+0xe0>)
 801d5cc:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 801d5d0:	2600      	movs	r6, #0
 801d5d2:	9600      	str	r6, [sp, #0]
 801d5d4:	4b2d      	ldr	r3, [pc, #180]	; (801d68c <HAL_FMC_MspInit+0xe4>)
 801d5d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d5d8:	ea42 0208 	orr.w	r2, r2, r8
 801d5dc:	639a      	str	r2, [r3, #56]	; 0x38
 801d5de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d5e0:	ea03 0308 	and.w	r3, r3, r8
 801d5e4:	9300      	str	r3, [sp, #0]
 801d5e6:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin 
 801d5e8:	f64f 7383 	movw	r3, #65411	; 0xff83
 801d5ec:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d5ee:	2702      	movs	r7, #2
 801d5f0:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d5f2:	2503      	movs	r5, #3
 801d5f4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801d5f6:	240c      	movs	r4, #12
 801d5f8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801d5fa:	a901      	add	r1, sp, #4
 801d5fc:	4824      	ldr	r0, [pc, #144]	; (801d690 <HAL_FMC_MspInit+0xe8>)
 801d5fe:	f7f6 fa29 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin 
 801d602:	f248 1333 	movw	r3, #33075	; 0x8133
 801d606:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d608:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d60a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d60c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801d60e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801d610:	a901      	add	r1, sp, #4
 801d612:	4820      	ldr	r0, [pc, #128]	; (801d694 <HAL_FMC_MspInit+0xec>)
 801d614:	f7f6 fa1e 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin 
 801d618:	f24c 7303 	movw	r3, #50947	; 0xc703
 801d61c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d61e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d620:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d622:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801d624:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801d626:	a901      	add	r1, sp, #4
 801d628:	481b      	ldr	r0, [pc, #108]	; (801d698 <HAL_FMC_MspInit+0xf0>)
 801d62a:	f7f6 fa13 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 801d62e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 801d632:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d634:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d636:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d638:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801d63a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801d63c:	a901      	add	r1, sp, #4
 801d63e:	4817      	ldr	r0, [pc, #92]	; (801d69c <HAL_FMC_MspInit+0xf4>)
 801d640:	f7f6 fa08 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 801d644:	f64f 033f 	movw	r3, #63551	; 0xf83f
 801d648:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d64a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d64c:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d64e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801d650:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801d652:	a901      	add	r1, sp, #4
 801d654:	4812      	ldr	r0, [pc, #72]	; (801d6a0 <HAL_FMC_MspInit+0xf8>)
 801d656:	f7f6 f9fd 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin 
 801d65a:	f64f 730c 	movw	r3, #65292	; 0xff0c
 801d65e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d660:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d662:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d664:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801d666:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801d668:	a901      	add	r1, sp, #4
 801d66a:	480e      	ldr	r0, [pc, #56]	; (801d6a4 <HAL_FMC_MspInit+0xfc>)
 801d66c:	f7f6 f9f2 	bl	8013a54 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDNWE_Pin;
 801d670:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d674:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d676:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d678:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 801d67a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 801d67c:	a901      	add	r1, sp, #4
 801d67e:	480a      	ldr	r0, [pc, #40]	; (801d6a8 <HAL_FMC_MspInit+0x100>)
 801d680:	f7f6 f9e8 	bl	8013a54 <HAL_GPIO_Init>
 801d684:	e79c      	b.n	801d5c0 <HAL_FMC_MspInit+0x18>
 801d686:	bf00      	nop
 801d688:	2002e0f0 	.word	0x2002e0f0
 801d68c:	40023800 	.word	0x40023800
 801d690:	40021000 	.word	0x40021000
 801d694:	40021800 	.word	0x40021800
 801d698:	40020c00 	.word	0x40020c00
 801d69c:	40022000 	.word	0x40022000
 801d6a0:	40021400 	.word	0x40021400
 801d6a4:	40021c00 	.word	0x40021c00
 801d6a8:	40020800 	.word	0x40020800

0801d6ac <MX_DMA2D_Init>:
{
 801d6ac:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 801d6ae:	480d      	ldr	r0, [pc, #52]	; (801d6e4 <MX_DMA2D_Init+0x38>)
 801d6b0:	4b0d      	ldr	r3, [pc, #52]	; (801d6e8 <MX_DMA2D_Init+0x3c>)
 801d6b2:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 801d6b4:	2300      	movs	r3, #0
 801d6b6:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 801d6b8:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 801d6ba:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 801d6bc:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 801d6be:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801d6c0:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 801d6c2:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801d6c4:	f7f5 fc46 	bl	8012f54 <HAL_DMA2D_Init>
 801d6c8:	b928      	cbnz	r0, 801d6d6 <MX_DMA2D_Init+0x2a>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 801d6ca:	2101      	movs	r1, #1
 801d6cc:	4805      	ldr	r0, [pc, #20]	; (801d6e4 <MX_DMA2D_Init+0x38>)
 801d6ce:	f7f5 fd0f 	bl	80130f0 <HAL_DMA2D_ConfigLayer>
 801d6d2:	b918      	cbnz	r0, 801d6dc <MX_DMA2D_Init+0x30>
}
 801d6d4:	bd08      	pop	{r3, pc}
    Error_Handler( );
 801d6d6:	f7f4 fadf 	bl	8011c98 <Error_Handler>
 801d6da:	e7f6      	b.n	801d6ca <MX_DMA2D_Init+0x1e>
    Error_Handler( );
 801d6dc:	f7f4 fadc 	bl	8011c98 <Error_Handler>
}
 801d6e0:	e7f8      	b.n	801d6d4 <MX_DMA2D_Init+0x28>
 801d6e2:	bf00      	nop
 801d6e4:	2003072c 	.word	0x2003072c
 801d6e8:	4002b000 	.word	0x4002b000

0801d6ec <MX_LCD_Init>:
{
 801d6ec:	b510      	push	{r4, lr}
 801d6ee:	b08e      	sub	sp, #56	; 0x38
  HAL_LTDC_DeInit(&hltdc);
 801d6f0:	4c27      	ldr	r4, [pc, #156]	; (801d790 <MX_LCD_Init+0xa4>)
 801d6f2:	4620      	mov	r0, r4
 801d6f4:	f7f7 fd0a 	bl	801510c <HAL_LTDC_DeInit>
  hltdc.Instance = LTDC;
 801d6f8:	4b26      	ldr	r3, [pc, #152]	; (801d794 <MX_LCD_Init+0xa8>)
 801d6fa:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 801d6fc:	2300      	movs	r3, #0
 801d6fe:	6063      	str	r3, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 801d700:	60a3      	str	r3, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 801d702:	60e3      	str	r3, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 801d704:	6123      	str	r3, [r4, #16]
  hltdc.Init.HorizontalSync = 0;
 801d706:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 0;
 801d708:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 1;
 801d70a:	2201      	movs	r2, #1
 801d70c:	61e2      	str	r2, [r4, #28]
  hltdc.Init.AccumulatedVBP = 1;
 801d70e:	6222      	str	r2, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 401;
 801d710:	f240 1291 	movw	r2, #401	; 0x191
 801d714:	6262      	str	r2, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 801d716:	f240 12e1 	movw	r2, #481	; 0x1e1
 801d71a:	62a2      	str	r2, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 402;
 801d71c:	f44f 72c9 	mov.w	r2, #402	; 0x192
 801d720:	62e2      	str	r2, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 801d722:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801d726:	6322      	str	r2, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 801d728:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 801d72c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 801d730:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801d734:	4620      	mov	r0, r4
 801d736:	f7f7 fc6f 	bl	8015018 <HAL_LTDC_Init>
 801d73a:	bb18      	cbnz	r0, 801d784 <MX_LCD_Init+0x98>
  pLayerCfg.WindowX0 = 0;
 801d73c:	2200      	movs	r2, #0
 801d73e:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 400;
 801d740:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801d744:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 801d746:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 480;
 801d748:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801d74c:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 801d74e:	9205      	str	r2, [sp, #20]
  pLayerCfg.Alpha = 255;
 801d750:	20ff      	movs	r0, #255	; 0xff
 801d752:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 801d754:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 801d756:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 801d75a:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801d75c:	2007      	movs	r0, #7
 801d75e:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 801d760:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 801d764:	900a      	str	r0, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 400;
 801d766:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 801d768:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 801d76a:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 801d76e:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 801d772:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801d776:	a901      	add	r1, sp, #4
 801d778:	4805      	ldr	r0, [pc, #20]	; (801d790 <MX_LCD_Init+0xa4>)
 801d77a:	f7f7 fd43 	bl	8015204 <HAL_LTDC_ConfigLayer>
 801d77e:	b920      	cbnz	r0, 801d78a <MX_LCD_Init+0x9e>
}
 801d780:	b00e      	add	sp, #56	; 0x38
 801d782:	bd10      	pop	{r4, pc}
    Error_Handler( );
 801d784:	f7f4 fa88 	bl	8011c98 <Error_Handler>
 801d788:	e7d8      	b.n	801d73c <MX_LCD_Init+0x50>
    Error_Handler( );
 801d78a:	f7f4 fa85 	bl	8011c98 <Error_Handler>
}
 801d78e:	e7f7      	b.n	801d780 <MX_LCD_Init+0x94>
 801d790:	20030684 	.word	0x20030684
 801d794:	40016800 	.word	0x40016800

0801d798 <MX_FMC_Init>:
{  
 801d798:	b500      	push	{lr}
 801d79a:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 801d79c:	4815      	ldr	r0, [pc, #84]	; (801d7f4 <MX_FMC_Init+0x5c>)
 801d79e:	4b16      	ldr	r3, [pc, #88]	; (801d7f8 <MX_FMC_Init+0x60>)
 801d7a0:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 801d7a2:	2300      	movs	r3, #0
 801d7a4:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 801d7a6:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 801d7a8:	2104      	movs	r1, #4
 801d7aa:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 801d7ac:	2220      	movs	r2, #32
 801d7ae:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 801d7b0:	2240      	movs	r2, #64	; 0x40
 801d7b2:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 801d7b4:	f44f 72c0 	mov.w	r2, #384	; 0x180
 801d7b8:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 801d7ba:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 801d7bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801d7c0:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 801d7c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801d7c6:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 801d7c8:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 801d7ca:	2302      	movs	r3, #2
 801d7cc:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 801d7ce:	2207      	movs	r2, #7
 801d7d0:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 801d7d2:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 7;
 801d7d4:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 801d7d6:	2203      	movs	r2, #3
 801d7d8:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 801d7da:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 801d7dc:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 801d7de:	4469      	add	r1, sp
 801d7e0:	f7f9 fa4e 	bl	8016c80 <HAL_SDRAM_Init>
 801d7e4:	b910      	cbnz	r0, 801d7ec <MX_FMC_Init+0x54>
}
 801d7e6:	b009      	add	sp, #36	; 0x24
 801d7e8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 801d7ec:	f7f4 fa54 	bl	8011c98 <Error_Handler>
}
 801d7f0:	e7f9      	b.n	801d7e6 <MX_FMC_Init+0x4e>
 801d7f2:	bf00      	nop
 801d7f4:	2003076c 	.word	0x2003076c
 801d7f8:	a0000140 	.word	0xa0000140

0801d7fc <MX_SDRAM_InitEx>:
{
 801d7fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d800:	b083      	sub	sp, #12
  __IO uint32_t tmpmrd = 0;
 801d802:	f04f 0900 	mov.w	r9, #0
 801d806:	f8cd 9004 	str.w	r9, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 801d80a:	4c24      	ldr	r4, [pc, #144]	; (801d89c <MX_SDRAM_InitEx+0xa0>)
 801d80c:	2601      	movs	r6, #1
 801d80e:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 801d810:	f04f 0810 	mov.w	r8, #16
 801d814:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.AutoRefreshNumber      = 1;
 801d818:	6126      	str	r6, [r4, #16]
  Command.ModeRegisterDefinition = 0;
 801d81a:	f8c4 9014 	str.w	r9, [r4, #20]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801d81e:	f104 0708 	add.w	r7, r4, #8
 801d822:	4d1f      	ldr	r5, [pc, #124]	; (801d8a0 <MX_SDRAM_InitEx+0xa4>)
 801d824:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d828:	4639      	mov	r1, r7
 801d82a:	4628      	mov	r0, r5
 801d82c:	f7f9 fa47 	bl	8016cbe <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 801d830:	4630      	mov	r0, r6
 801d832:	f7f5 f8fd 	bl	8012a30 <HAL_Delay>
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 801d836:	2302      	movs	r3, #2
 801d838:	60a3      	str	r3, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 801d83a:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.AutoRefreshNumber      = 1;
 801d83e:	6126      	str	r6, [r4, #16]
  Command.ModeRegisterDefinition = 0;
 801d840:	f8c4 9014 	str.w	r9, [r4, #20]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 801d844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d848:	4639      	mov	r1, r7
 801d84a:	4628      	mov	r0, r5
 801d84c:	f7f9 fa37 	bl	8016cbe <HAL_SDRAM_SendCommand>
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 801d850:	2303      	movs	r3, #3
 801d852:	60a3      	str	r3, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 801d854:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.AutoRefreshNumber      = 8;
 801d858:	2308      	movs	r3, #8
 801d85a:	6123      	str	r3, [r4, #16]
  Command.ModeRegisterDefinition = 0;
 801d85c:	f8c4 9014 	str.w	r9, [r4, #20]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801d860:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d864:	4639      	mov	r1, r7
 801d866:	4628      	mov	r0, r5
 801d868:	f7f9 fa29 	bl	8016cbe <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 801d86c:	f44f 730c 	mov.w	r3, #560	; 0x230
 801d870:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 801d872:	2304      	movs	r3, #4
 801d874:	60a3      	str	r3, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 801d876:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.AutoRefreshNumber      = 1;
 801d87a:	6126      	str	r6, [r4, #16]
  Command.ModeRegisterDefinition = tmpmrd;
 801d87c:	9b01      	ldr	r3, [sp, #4]
 801d87e:	6163      	str	r3, [r4, #20]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 801d880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801d884:	4639      	mov	r1, r7
 801d886:	4628      	mov	r0, r5
 801d888:	f7f9 fa19 	bl	8016cbe <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 801d88c:	f240 617d 	movw	r1, #1661	; 0x67d
 801d890:	4628      	mov	r0, r5
 801d892:	f7f9 fa31 	bl	8016cf8 <HAL_SDRAM_ProgramRefreshRate>
}
 801d896:	b003      	add	sp, #12
 801d898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d89c:	2002e0f0 	.word	0x2002e0f0
 801d8a0:	2003076c 	.word	0x2003076c

0801d8a4 <MX_DSI_Init>:
{
 801d8a4:	b530      	push	{r4, r5, lr}
 801d8a6:	b0ad      	sub	sp, #180	; 0xb4
  hdsi.Instance = DSI;
 801d8a8:	486c      	ldr	r0, [pc, #432]	; (801da5c <MX_DSI_Init+0x1b8>)
 801d8aa:	4b6d      	ldr	r3, [pc, #436]	; (801da60 <MX_DSI_Init+0x1bc>)
 801d8ac:	6003      	str	r3, [r0, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 801d8ae:	2300      	movs	r3, #0
 801d8b0:	6043      	str	r3, [r0, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 801d8b2:	2204      	movs	r2, #4
 801d8b4:	6082      	str	r2, [r0, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 801d8b6:	2201      	movs	r2, #1
 801d8b8:	60c2      	str	r2, [r0, #12]
  PLLInit.PLLNDIV = 125;
 801d8ba:	227d      	movs	r2, #125	; 0x7d
 801d8bc:	9202      	str	r2, [sp, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 801d8be:	2202      	movs	r2, #2
 801d8c0:	9203      	str	r2, [sp, #12]
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 801d8c2:	9304      	str	r3, [sp, #16]
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 801d8c4:	a902      	add	r1, sp, #8
 801d8c6:	f7f5 fd19 	bl	80132fc <HAL_DSI_Init>
 801d8ca:	2800      	cmp	r0, #0
 801d8cc:	f040 80aa 	bne.w	801da24 <MX_DSI_Init+0x180>
  HostTimeouts.TimeoutCkdiv = 1;
 801d8d0:	2301      	movs	r3, #1
 801d8d2:	931d      	str	r3, [sp, #116]	; 0x74
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 801d8d4:	2300      	movs	r3, #0
 801d8d6:	931e      	str	r3, [sp, #120]	; 0x78
  HostTimeouts.LowPowerReceptionTimeout = 0;
 801d8d8:	931f      	str	r3, [sp, #124]	; 0x7c
  HostTimeouts.HighSpeedReadTimeout = 0;
 801d8da:	9320      	str	r3, [sp, #128]	; 0x80
  HostTimeouts.LowPowerReadTimeout = 0;
 801d8dc:	9321      	str	r3, [sp, #132]	; 0x84
  HostTimeouts.HighSpeedWriteTimeout = 0;
 801d8de:	9322      	str	r3, [sp, #136]	; 0x88
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 801d8e0:	9323      	str	r3, [sp, #140]	; 0x8c
  HostTimeouts.LowPowerWriteTimeout = 0;
 801d8e2:	9324      	str	r3, [sp, #144]	; 0x90
  HostTimeouts.BTATimeout = 0;
 801d8e4:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 801d8e6:	a91d      	add	r1, sp, #116	; 0x74
 801d8e8:	485c      	ldr	r0, [pc, #368]	; (801da5c <MX_DSI_Init+0x1b8>)
 801d8ea:	f7f5 ff79 	bl	80137e0 <HAL_DSI_ConfigHostTimeouts>
 801d8ee:	2800      	cmp	r0, #0
 801d8f0:	f040 809b 	bne.w	801da2a <MX_DSI_Init+0x186>
  PhyTimings.ClockLaneHS2LPTime = 28;
 801d8f4:	231c      	movs	r3, #28
 801d8f6:	9326      	str	r3, [sp, #152]	; 0x98
  PhyTimings.ClockLaneLP2HSTime = 33;
 801d8f8:	2321      	movs	r3, #33	; 0x21
 801d8fa:	9327      	str	r3, [sp, #156]	; 0x9c
  PhyTimings.DataLaneHS2LPTime = 15;
 801d8fc:	230f      	movs	r3, #15
 801d8fe:	9328      	str	r3, [sp, #160]	; 0xa0
  PhyTimings.DataLaneLP2HSTime = 25;
 801d900:	2319      	movs	r3, #25
 801d902:	9329      	str	r3, [sp, #164]	; 0xa4
  PhyTimings.DataLaneMaxReadTime = 0;
 801d904:	2300      	movs	r3, #0
 801d906:	932a      	str	r3, [sp, #168]	; 0xa8
  PhyTimings.StopWaitTime = 10;
 801d908:	230a      	movs	r3, #10
 801d90a:	932b      	str	r3, [sp, #172]	; 0xac
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 801d90c:	a926      	add	r1, sp, #152	; 0x98
 801d90e:	4853      	ldr	r0, [pc, #332]	; (801da5c <MX_DSI_Init+0x1b8>)
 801d910:	f7f5 ff22 	bl	8013758 <HAL_DSI_ConfigPhyTimer>
 801d914:	2800      	cmp	r0, #0
 801d916:	f040 808b 	bne.w	801da30 <MX_DSI_Init+0x18c>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 801d91a:	2104      	movs	r1, #4
 801d91c:	484f      	ldr	r0, [pc, #316]	; (801da5c <MX_DSI_Init+0x1b8>)
 801d91e:	f7f5 ff07 	bl	8013730 <HAL_DSI_ConfigFlowControl>
 801d922:	2800      	cmp	r0, #0
 801d924:	f040 8087 	bne.w	801da36 <MX_DSI_Init+0x192>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 801d928:	f242 7110 	movw	r1, #10000	; 0x2710
 801d92c:	484b      	ldr	r0, [pc, #300]	; (801da5c <MX_DSI_Init+0x1b8>)
 801d92e:	f7f6 f877 	bl	8013a20 <HAL_DSI_SetLowPowerRXFilter>
 801d932:	2800      	cmp	r0, #0
 801d934:	f040 8082 	bne.w	801da3c <MX_DSI_Init+0x198>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 801d938:	2100      	movs	r1, #0
 801d93a:	4848      	ldr	r0, [pc, #288]	; (801da5c <MX_DSI_Init+0x1b8>)
 801d93c:	f7f5 fc64 	bl	8013208 <HAL_DSI_ConfigErrorMonitor>
 801d940:	2800      	cmp	r0, #0
 801d942:	d17e      	bne.n	801da42 <MX_DSI_Init+0x19e>
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 801d944:	f44f 7380 	mov.w	r3, #256	; 0x100
 801d948:	9305      	str	r3, [sp, #20]
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 801d94a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801d94e:	9306      	str	r3, [sp, #24]
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 801d950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d954:	9307      	str	r3, [sp, #28]
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 801d956:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d95a:	9308      	str	r3, [sp, #32]
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 801d95c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d960:	9309      	str	r3, [sp, #36]	; 0x24
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 801d962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801d966:	930a      	str	r3, [sp, #40]	; 0x28
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 801d968:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801d96c:	930b      	str	r3, [sp, #44]	; 0x2c
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 801d96e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801d972:	930c      	str	r3, [sp, #48]	; 0x30
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 801d974:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801d978:	930d      	str	r3, [sp, #52]	; 0x34
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 801d97a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801d97e:	930e      	str	r3, [sp, #56]	; 0x38
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 801d980:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801d984:	930f      	str	r3, [sp, #60]	; 0x3c
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 801d986:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801d98a:	9310      	str	r3, [sp, #64]	; 0x40
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 801d98c:	2300      	movs	r3, #0
 801d98e:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 801d990:	a905      	add	r1, sp, #20
 801d992:	4832      	ldr	r0, [pc, #200]	; (801da5c <MX_DSI_Init+0x1b8>)
 801d994:	f7f5 fe92 	bl	80136bc <HAL_DSI_ConfigCommand>
 801d998:	2800      	cmp	r0, #0
 801d99a:	d155      	bne.n	801da48 <MX_DSI_Init+0x1a4>
  CmdCfg.VirtualChannelID = 0;
 801d99c:	2300      	movs	r3, #0
 801d99e:	9312      	str	r3, [sp, #72]	; 0x48
  CmdCfg.ColorCoding = DSI_RGB888;
 801d9a0:	2205      	movs	r2, #5
 801d9a2:	9213      	str	r2, [sp, #76]	; 0x4c
  CmdCfg.CommandSize = 400;
 801d9a4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801d9a8:	9214      	str	r2, [sp, #80]	; 0x50
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 801d9aa:	2210      	movs	r2, #16
 801d9ac:	9215      	str	r2, [sp, #84]	; 0x54
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 801d9ae:	9316      	str	r3, [sp, #88]	; 0x58
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 801d9b0:	2204      	movs	r2, #4
 801d9b2:	9217      	str	r2, [sp, #92]	; 0x5c
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 801d9b4:	2202      	movs	r2, #2
 801d9b6:	9218      	str	r2, [sp, #96]	; 0x60
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 801d9b8:	9319      	str	r3, [sp, #100]	; 0x64
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 801d9ba:	931a      	str	r3, [sp, #104]	; 0x68
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 801d9bc:	2340      	movs	r3, #64	; 0x40
 801d9be:	931b      	str	r3, [sp, #108]	; 0x6c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 801d9c0:	2301      	movs	r3, #1
 801d9c2:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 801d9c4:	a912      	add	r1, sp, #72	; 0x48
 801d9c6:	4825      	ldr	r0, [pc, #148]	; (801da5c <MX_DSI_Init+0x1b8>)
 801d9c8:	f7f5 fdf0 	bl	80135ac <HAL_DSI_ConfigAdaptedCommandMode>
 801d9cc:	2800      	cmp	r0, #0
 801d9ce:	d13e      	bne.n	801da4e <MX_DSI_Init+0x1aa>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 801d9d0:	2100      	movs	r1, #0
 801d9d2:	4822      	ldr	r0, [pc, #136]	; (801da5c <MX_DSI_Init+0x1b8>)
 801d9d4:	f7f5 fdd6 	bl	8013584 <HAL_DSI_SetGenericVCID>
 801d9d8:	2800      	cmp	r0, #0
 801d9da:	d13b      	bne.n	801da54 <MX_DSI_Init+0x1b0>
  HAL_DSI_Start(&(hdsi));
 801d9dc:	4d1f      	ldr	r5, [pc, #124]	; (801da5c <MX_DSI_Init+0x1b8>)
 801d9de:	4628      	mov	r0, r5
 801d9e0:	f7f5 ff7b 	bl	80138da <HAL_DSI_Start>
  HAL_DSI_ShortWrite(&(hdsi),
 801d9e4:	2400      	movs	r4, #0
 801d9e6:	9400      	str	r4, [sp, #0]
 801d9e8:	2328      	movs	r3, #40	; 0x28
 801d9ea:	2215      	movs	r2, #21
 801d9ec:	4621      	mov	r1, r4
 801d9ee:	4628      	mov	r0, r5
 801d9f0:	f7f5 ffac 	bl	801394c <HAL_DSI_ShortWrite>
  OTM8009A_Init(OTM8009A_FORMAT, OTM8009A_ORIENTATION_LANDSCAPE);
 801d9f4:	2101      	movs	r1, #1
 801d9f6:	4620      	mov	r0, r4
 801d9f8:	f7f4 fddc 	bl	80125b4 <OTM8009A_Init>
  LPCmd.LPGenShortWriteNoP    = DSI_LP_GSW0P_DISABLE;
 801d9fc:	9405      	str	r4, [sp, #20]
  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_DISABLE;
 801d9fe:	9406      	str	r4, [sp, #24]
  LPCmd.LPGenShortWriteTwoP   = DSI_LP_GSW2P_DISABLE;
 801da00:	9407      	str	r4, [sp, #28]
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_DISABLE;
 801da02:	9408      	str	r4, [sp, #32]
  LPCmd.LPGenShortReadOneP    = DSI_LP_GSR1P_DISABLE;
 801da04:	9409      	str	r4, [sp, #36]	; 0x24
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_DISABLE;
 801da06:	940a      	str	r4, [sp, #40]	; 0x28
  LPCmd.LPGenLongWrite        = DSI_LP_GLW_DISABLE;
 801da08:	940b      	str	r4, [sp, #44]	; 0x2c
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_DISABLE;
 801da0a:	940c      	str	r4, [sp, #48]	; 0x30
  LPCmd.LPDcsShortWriteOneP   = DSI_LP_DSW1P_DISABLE;
 801da0c:	940d      	str	r4, [sp, #52]	; 0x34
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_DISABLE;
 801da0e:	940e      	str	r4, [sp, #56]	; 0x38
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_DISABLE;
 801da10:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 801da12:	a905      	add	r1, sp, #20
 801da14:	4628      	mov	r0, r5
 801da16:	f7f5 fe51 	bl	80136bc <HAL_DSI_ConfigCommand>
  HAL_DSI_Refresh(&hdsi);
 801da1a:	4628      	mov	r0, r5
 801da1c:	f7f5 ff84 	bl	8013928 <HAL_DSI_Refresh>
  }
 801da20:	b02d      	add	sp, #180	; 0xb4
 801da22:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 801da24:	f7f4 f938 	bl	8011c98 <Error_Handler>
 801da28:	e752      	b.n	801d8d0 <MX_DSI_Init+0x2c>
    Error_Handler();
 801da2a:	f7f4 f935 	bl	8011c98 <Error_Handler>
 801da2e:	e761      	b.n	801d8f4 <MX_DSI_Init+0x50>
    Error_Handler();
 801da30:	f7f4 f932 	bl	8011c98 <Error_Handler>
 801da34:	e771      	b.n	801d91a <MX_DSI_Init+0x76>
    Error_Handler();
 801da36:	f7f4 f92f 	bl	8011c98 <Error_Handler>
 801da3a:	e775      	b.n	801d928 <MX_DSI_Init+0x84>
    Error_Handler();
 801da3c:	f7f4 f92c 	bl	8011c98 <Error_Handler>
 801da40:	e77a      	b.n	801d938 <MX_DSI_Init+0x94>
    Error_Handler();
 801da42:	f7f4 f929 	bl	8011c98 <Error_Handler>
 801da46:	e77d      	b.n	801d944 <MX_DSI_Init+0xa0>
    Error_Handler();
 801da48:	f7f4 f926 	bl	8011c98 <Error_Handler>
 801da4c:	e7a6      	b.n	801d99c <MX_DSI_Init+0xf8>
    Error_Handler();
 801da4e:	f7f4 f923 	bl	8011c98 <Error_Handler>
 801da52:	e7bd      	b.n	801d9d0 <MX_DSI_Init+0x12c>
    Error_Handler();
 801da54:	f7f4 f920 	bl	8011c98 <Error_Handler>
 801da58:	e7c0      	b.n	801d9dc <MX_DSI_Init+0x138>
 801da5a:	bf00      	nop
 801da5c:	20030668 	.word	0x20030668
 801da60:	40016c00 	.word	0x40016c00

0801da64 <HAL_LTDC_MspInit>:
  if(ltdcHandle->Instance==LTDC)
 801da64:	6802      	ldr	r2, [r0, #0]
 801da66:	4b0e      	ldr	r3, [pc, #56]	; (801daa0 <HAL_LTDC_MspInit+0x3c>)
 801da68:	429a      	cmp	r2, r3
 801da6a:	d000      	beq.n	801da6e <HAL_LTDC_MspInit+0xa>
 801da6c:	4770      	bx	lr
{
 801da6e:	b500      	push	{lr}
 801da70:	b083      	sub	sp, #12
    __HAL_RCC_LTDC_CLK_ENABLE();
 801da72:	2200      	movs	r2, #0
 801da74:	9201      	str	r2, [sp, #4]
 801da76:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 801da7a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 801da7c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 801da80:	6459      	str	r1, [r3, #68]	; 0x44
 801da82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801da84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801da88:	9301      	str	r3, [sp, #4]
 801da8a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 801da8c:	2105      	movs	r1, #5
 801da8e:	2058      	movs	r0, #88	; 0x58
 801da90:	f7f4 fff4 	bl	8012a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 801da94:	2058      	movs	r0, #88	; 0x58
 801da96:	f7f5 f825 	bl	8012ae4 <HAL_NVIC_EnableIRQ>
}
 801da9a:	b003      	add	sp, #12
 801da9c:	f85d fb04 	ldr.w	pc, [sp], #4
 801daa0:	40016800 	.word	0x40016800

0801daa4 <HAL_LTDC_MspDeInit>:
{
 801daa4:	b508      	push	{r3, lr}
  if(ltdcHandle->Instance==LTDC)
 801daa6:	6802      	ldr	r2, [r0, #0]
 801daa8:	4b06      	ldr	r3, [pc, #24]	; (801dac4 <HAL_LTDC_MspDeInit+0x20>)
 801daaa:	429a      	cmp	r2, r3
 801daac:	d000      	beq.n	801dab0 <HAL_LTDC_MspDeInit+0xc>
}
 801daae:	bd08      	pop	{r3, pc}
    __HAL_RCC_LTDC_CLK_DISABLE();
 801dab0:	4a05      	ldr	r2, [pc, #20]	; (801dac8 <HAL_LTDC_MspDeInit+0x24>)
 801dab2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801dab4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801dab8:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 801daba:	2058      	movs	r0, #88	; 0x58
 801dabc:	f7f5 f820 	bl	8012b00 <HAL_NVIC_DisableIRQ>
}
 801dac0:	e7f5      	b.n	801daae <HAL_LTDC_MspDeInit+0xa>
 801dac2:	bf00      	nop
 801dac4:	40016800 	.word	0x40016800
 801dac8:	40023800 	.word	0x40023800

0801dacc <HAL_DSI_MspInit>:
{
 801dacc:	b510      	push	{r4, lr}
 801dace:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801dad0:	2300      	movs	r3, #0
 801dad2:	9303      	str	r3, [sp, #12]
 801dad4:	9304      	str	r3, [sp, #16]
 801dad6:	9305      	str	r3, [sp, #20]
 801dad8:	9306      	str	r3, [sp, #24]
 801dada:	9307      	str	r3, [sp, #28]
  if(dsiHandle->Instance==DSI)
 801dadc:	6802      	ldr	r2, [r0, #0]
 801dade:	4b18      	ldr	r3, [pc, #96]	; (801db40 <HAL_DSI_MspInit+0x74>)
 801dae0:	429a      	cmp	r2, r3
 801dae2:	d001      	beq.n	801dae8 <HAL_DSI_MspInit+0x1c>
}
 801dae4:	b008      	add	sp, #32
 801dae6:	bd10      	pop	{r4, pc}
    __HAL_RCC_DSI_CLK_ENABLE();
 801dae8:	2400      	movs	r4, #0
 801daea:	9401      	str	r4, [sp, #4]
 801daec:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
 801daf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801daf2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 801daf6:	645a      	str	r2, [r3, #68]	; 0x44
 801daf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801dafa:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 801dafe:	9201      	str	r2, [sp, #4]
 801db00:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 801db02:	9402      	str	r4, [sp, #8]
 801db04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801db06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801db0a:	631a      	str	r2, [r3, #48]	; 0x30
 801db0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801db0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801db12:	9302      	str	r3, [sp, #8]
 801db14:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 801db16:	2304      	movs	r3, #4
 801db18:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801db1a:	2302      	movs	r3, #2
 801db1c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801db1e:	2303      	movs	r3, #3
 801db20:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 801db22:	230d      	movs	r3, #13
 801db24:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 801db26:	a903      	add	r1, sp, #12
 801db28:	4806      	ldr	r0, [pc, #24]	; (801db44 <HAL_DSI_MspInit+0x78>)
 801db2a:	f7f5 ff93 	bl	8013a54 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 801db2e:	4622      	mov	r2, r4
 801db30:	2105      	movs	r1, #5
 801db32:	205c      	movs	r0, #92	; 0x5c
 801db34:	f7f4 ffa2 	bl	8012a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 801db38:	205c      	movs	r0, #92	; 0x5c
 801db3a:	f7f4 ffd3 	bl	8012ae4 <HAL_NVIC_EnableIRQ>
}
 801db3e:	e7d1      	b.n	801dae4 <HAL_DSI_MspInit+0x18>
 801db40:	40016c00 	.word	0x40016c00
 801db44:	40022400 	.word	0x40022400

0801db48 <HAL_DMA2D_MspInit>:
  if(dma2dHandle->Instance==DMA2D)
 801db48:	6802      	ldr	r2, [r0, #0]
 801db4a:	4b0e      	ldr	r3, [pc, #56]	; (801db84 <HAL_DMA2D_MspInit+0x3c>)
 801db4c:	429a      	cmp	r2, r3
 801db4e:	d000      	beq.n	801db52 <HAL_DMA2D_MspInit+0xa>
 801db50:	4770      	bx	lr
{
 801db52:	b500      	push	{lr}
 801db54:	b083      	sub	sp, #12
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801db56:	2200      	movs	r2, #0
 801db58:	9201      	str	r2, [sp, #4]
 801db5a:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 801db5e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801db60:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 801db64:	6319      	str	r1, [r3, #48]	; 0x30
 801db66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801db68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801db6c:	9301      	str	r3, [sp, #4]
 801db6e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 801db70:	2105      	movs	r1, #5
 801db72:	205a      	movs	r0, #90	; 0x5a
 801db74:	f7f4 ff82 	bl	8012a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 801db78:	205a      	movs	r0, #90	; 0x5a
 801db7a:	f7f4 ffb3 	bl	8012ae4 <HAL_NVIC_EnableIRQ>
}
 801db7e:	b003      	add	sp, #12
 801db80:	f85d fb04 	ldr.w	pc, [sp], #4
 801db84:	4002b000 	.word	0x4002b000

0801db88 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 801db88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 801db8a:	f7ff fd0d 	bl	801d5a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 801db8e:	bd08      	pop	{r3, pc}

0801db90 <_DMA_ExecOperation>:
*       _DMA_ExecOperation
*/
static void _DMA_ExecOperation(void) {

  /* Wait until transfer is done */
  if ( TransferInProgress == 0 )
 801db90:	4b03      	ldr	r3, [pc, #12]	; (801dba0 <_DMA_ExecOperation+0x10>)
 801db92:	781b      	ldrb	r3, [r3, #0]
 801db94:	b11b      	cbz	r3, 801db9e <_DMA_ExecOperation+0xe>
    return;
  
  while(TransferInProgress) {
 801db96:	4b02      	ldr	r3, [pc, #8]	; (801dba0 <_DMA_ExecOperation+0x10>)
 801db98:	781b      	ldrb	r3, [r3, #0]
 801db9a:	2b00      	cmp	r3, #0
 801db9c:	d1fb      	bne.n	801db96 <_DMA_ExecOperation+0x6>
  }
}
 801db9e:	4770      	bx	lr
 801dba0:	2002e108 	.word	0x2002e108

0801dba4 <GetPixelformat>:
    return LTDC_PIXEL_FORMAT_AL44;
  } else if (apColorConvAPI[LayerIndex] == GUICC_88666I) {
    return LTDC_PIXEL_FORMAT_AL88;
  }
  while (1); // Error
} 
 801dba4:	2000      	movs	r0, #0
 801dba6:	4770      	bx	lr

0801dba8 <TransferComplete>:
  *         you can add your own implementation.
  * @retval None
  */
static void TransferComplete(DMA2D_HandleTypeDef *hdma2d)
{
  TransferInProgress = 0; 
 801dba8:	4b01      	ldr	r3, [pc, #4]	; (801dbb0 <TransferComplete+0x8>)
 801dbaa:	2200      	movs	r2, #0
 801dbac:	701a      	strb	r2, [r3, #0]
}
 801dbae:	4770      	bx	lr
 801dbb0:	2002e108 	.word	0x2002e108

0801dbb4 <DMA2D_CopyBuffer>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 801dbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dbb6:	4607      	mov	r7, r0
 801dbb8:	460e      	mov	r6, r1
 801dbba:	4615      	mov	r5, r2
 801dbbc:	461c      	mov	r4, r3
  U32 PixelFormat;

  _DMA_ExecOperation();
 801dbbe:	f7ff ffe7 	bl	801db90 <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 801dbc2:	4b0e      	ldr	r3, [pc, #56]	; (801dbfc <DMA2D_CopyBuffer+0x48>)
 801dbc4:	2201      	movs	r2, #1
 801dbc6:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 801dbc8:	4638      	mov	r0, r7
 801dbca:	f7ff ffeb 	bl	801dba4 <GetPixelformat>
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 801dbce:	4a0c      	ldr	r2, [pc, #48]	; (801dc00 <DMA2D_CopyBuffer+0x4c>)
 801dbd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 801dbd4:	6013      	str	r3, [r2, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 801dbd6:	60d6      	str	r6, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 801dbd8:	63d5      	str	r5, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 801dbda:	9b07      	ldr	r3, [sp, #28]
 801dbdc:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 801dbde:	9b08      	ldr	r3, [sp, #32]
 801dbe0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */  
  DMA2D->FGPFCCR = PixelFormat;  
 801dbe2:	61d0      	str	r0, [r2, #28]

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 801dbe4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801dbe8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801dbec:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 801dbee:	6813      	ldr	r3, [r2, #0]
 801dbf0:	f043 0301 	orr.w	r3, r3, #1
 801dbf4:	6013      	str	r3, [r2, #0]

_DMA_ExecOperation();
 801dbf6:	f7ff ffcb 	bl	801db90 <_DMA_ExecOperation>

}
 801dbfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dbfc:	2002e108 	.word	0x2002e108
 801dc00:	4002b000 	.word	0x4002b000

0801dc04 <DMA2D_CopyBufferWithAlpha>:
/*********************************************************************
*
*       CopyBuffer
*/
static void DMA2D_CopyBufferWithAlpha(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 801dc04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc08:	4680      	mov	r8, r0
 801dc0a:	460f      	mov	r7, r1
 801dc0c:	4615      	mov	r5, r2
 801dc0e:	461e      	mov	r6, r3
 801dc10:	9c08      	ldr	r4, [sp, #32]
  uint32_t PixelFormat;

  _DMA_ExecOperation();
 801dc12:	f7ff ffbd 	bl	801db90 <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 801dc16:	4b10      	ldr	r3, [pc, #64]	; (801dc58 <DMA2D_CopyBufferWithAlpha+0x54>)
 801dc18:	2201      	movs	r2, #1
 801dc1a:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 801dc1c:	4640      	mov	r0, r8
 801dc1e:	f7ff ffc1 	bl	801dba4 <GetPixelformat>
  DMA2D->CR      = 0x00000000UL | (1 << 9) | (0x2 << 16);   
 801dc22:	4a0e      	ldr	r2, [pc, #56]	; (801dc5c <DMA2D_CopyBufferWithAlpha+0x58>)
 801dc24:	4b0e      	ldr	r3, [pc, #56]	; (801dc60 <DMA2D_CopyBufferWithAlpha+0x5c>)
 801dc26:	6013      	str	r3, [r2, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 801dc28:	60d7      	str	r7, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 801dc2a:	63d5      	str	r5, [r2, #60]	; 0x3c
  DMA2D->BGMAR   = (U32)pDst; 
 801dc2c:	6155      	str	r5, [r2, #20]
  DMA2D->FGOR    = OffLineSrc;                      
 801dc2e:	9b07      	ldr	r3, [sp, #28]
 801dc30:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 801dc32:	6414      	str	r4, [r2, #64]	; 0x40
  DMA2D->BGOR     = OffLineDst; 
 801dc34:	6194      	str	r4, [r2, #24]

  /* Set up pixel format */  
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;  
 801dc36:	2300      	movs	r3, #0
 801dc38:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = PixelFormat;
 801dc3a:	6250      	str	r0, [r2, #36]	; 0x24
  DMA2D->OPFCCR = PixelFormat;
 801dc3c:	6350      	str	r0, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 801dc3e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801dc42:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 801dc46:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 801dc48:	6813      	ldr	r3, [r2, #0]
 801dc4a:	f043 0301 	orr.w	r3, r3, #1
 801dc4e:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();
 801dc50:	f7ff ff9e 	bl	801db90 <_DMA_ExecOperation>
}
 801dc54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc58:	2002e108 	.word	0x2002e108
 801dc5c:	4002b000 	.word	0x4002b000
 801dc60:	00020200 	.word	0x00020200

0801dc64 <DMA2D_FillBuffer>:
  * @param  OffLine:     offset after each line
  * @param  ColorIndex:  color to be used.           
  * @retval None.
  */
static void DMA2D_FillBuffer(U32 LayerIndex, void * pDst, U32 xSize, U32 ySize, U32 OffLine, U32 ColorIndex) 
{
 801dc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc66:	4607      	mov	r7, r0
 801dc68:	460e      	mov	r6, r1
 801dc6a:	4615      	mov	r5, r2
 801dc6c:	461c      	mov	r4, r3
  U32 PixelFormat;

  _DMA_ExecOperation();
 801dc6e:	f7ff ff8f 	bl	801db90 <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 801dc72:	4b0e      	ldr	r3, [pc, #56]	; (801dcac <DMA2D_FillBuffer+0x48>)
 801dc74:	2201      	movs	r2, #1
 801dc76:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 801dc78:	4638      	mov	r0, r7
 801dc7a:	f7ff ff93 	bl	801dba4 <GetPixelformat>

  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 801dc7e:	490c      	ldr	r1, [pc, #48]	; (801dcb0 <DMA2D_FillBuffer+0x4c>)
 801dc80:	4b0c      	ldr	r3, [pc, #48]	; (801dcb4 <DMA2D_FillBuffer+0x50>)
 801dc82:	600b      	str	r3, [r1, #0]
  DMA2D->OCOLR   = ColorIndex;                     
 801dc84:	9b07      	ldr	r3, [sp, #28]
 801dc86:	638b      	str	r3, [r1, #56]	; 0x38

  /* Set up pointers */
  DMA2D->OMAR    = (U32)pDst;                      
 801dc88:	63ce      	str	r6, [r1, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->OOR     = OffLine;                        
 801dc8a:	9b06      	ldr	r3, [sp, #24]
 801dc8c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;                    
 801dc8e:	6348      	str	r0, [r1, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 801dc90:	b2a4      	uxth	r4, r4
 801dc92:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 801dc96:	644c      	str	r4, [r1, #68]	; 0x44

  DMA2D->CR     |= (DMA2D_CR_START | DMA2D_IT_TC); 
 801dc98:	680b      	ldr	r3, [r1, #0]
 801dc9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801dc9e:	f043 0301 	orr.w	r3, r3, #1
 801dca2:	600b      	str	r3, [r1, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();
 801dca4:	f7ff ff74 	bl	801db90 <_DMA_ExecOperation>
}
 801dca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dcaa:	bf00      	nop
 801dcac:	2002e108 	.word	0x2002e108
 801dcb0:	4002b000 	.word	0x4002b000
 801dcb4:	00030200 	.word	0x00030200

0801dcb8 <_DMA_ConvertColor>:

/*********************************************************************
*
*       _DMA_ConvertColor
*/
static void _DMA_ConvertColor(void * pSrc, void * pDst,  U32 PixelFormatSrc, U32 PixelFormatDst, U32 NumItems) {
 801dcb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcba:	4607      	mov	r7, r0
 801dcbc:	460e      	mov	r6, r1
 801dcbe:	4615      	mov	r5, r2
 801dcc0:	461c      	mov	r4, r3

  /* Set up mode */
  _DMA_ExecOperation();
 801dcc2:	f7ff ff65 	bl	801db90 <_DMA_ExecOperation>
  
  TransferInProgress = 1;
 801dcc6:	4b0e      	ldr	r3, [pc, #56]	; (801dd00 <_DMA_ConvertColor+0x48>)
 801dcc8:	2201      	movs	r2, #1
 801dcca:	701a      	strb	r2, [r3, #0]

  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 801dccc:	4b0d      	ldr	r3, [pc, #52]	; (801dd04 <_DMA_ConvertColor+0x4c>)
 801dcce:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 801dcd2:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)  */
 801dcd4:	60df      	str	r7, [r3, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 801dcd6:	63de      	str	r6, [r3, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register (Source line offset)  */
 801dcd8:	2200      	movs	r2, #0
 801dcda:	611a      	str	r2, [r3, #16]
  DMA2D->OOR     = 0;                               /* Output Offset Register (Destination line offset) */
 801dcdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormatSrc;                  /* Foreground PFC Control Register (Defines the input pixel format) */
 801dcde:	61dd      	str	r5, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format)    */
 801dce0:	635c      	str	r4, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 801dce2:	9a06      	ldr	r2, [sp, #24]
 801dce4:	0412      	lsls	r2, r2, #16
 801dce6:	f042 0201 	orr.w	r2, r2, #1
 801dcea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 801dcec:	681a      	ldr	r2, [r3, #0]
 801dcee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801dcf2:	f042 0201 	orr.w	r2, r2, #1
 801dcf6:	601a      	str	r2, [r3, #0]
  
  _DMA_ExecOperation();
 801dcf8:	f7ff ff4a 	bl	801db90 <_DMA_ExecOperation>
}
 801dcfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dcfe:	bf00      	nop
 801dd00:	2002e108 	.word	0x2002e108
 801dd04:	4002b000 	.word	0x4002b000

0801dd08 <_DMA_Index2ColorBulk>:
*   This routine is used by the emWin color conversion routines to use DMA2D for
*   color conversion. It converts the given index values to 32 bit colors.
*   Because emWin uses ABGR internally and 0x00 and 0xFF for opaque and fully
*   transparent the color array needs to be converted after DMA2D has been used.
*/
static void _DMA_Index2ColorBulk(void * pIndex, LCD_COLOR * pColor, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 801dd08:	b500      	push	{lr}
 801dd0a:	b083      	sub	sp, #12
#if (GUI_USE_ARGB)

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 801dd0c:	9200      	str	r2, [sp, #0]
 801dd0e:	2300      	movs	r3, #0
 801dd10:	9a04      	ldr	r2, [sp, #16]
 801dd12:	f7ff ffd1 	bl	801dcb8 <_DMA_ConvertColor>
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);

  /* Convert colors from ARGB to ABGR and invert alpha values */
  _InvertAlpha_SwapRB_MOD(pColor, NumItems);
#endif
}
 801dd16:	b003      	add	sp, #12
 801dd18:	f85d fb04 	ldr.w	pc, [sp], #4

0801dd1c <_Index2ColorBulk_M8888I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 801dd1c:	b510      	push	{r4, lr}
 801dd1e:	b082      	sub	sp, #8
 801dd20:	2400      	movs	r4, #0
 801dd22:	9400      	str	r4, [sp, #0]
 801dd24:	f7ff fff0 	bl	801dd08 <_DMA_Index2ColorBulk>
 801dd28:	b002      	add	sp, #8
 801dd2a:	bd10      	pop	{r4, pc}

0801dd2c <_Index2ColorBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 801dd2c:	b510      	push	{r4, lr}
 801dd2e:	b082      	sub	sp, #8
 801dd30:	2400      	movs	r4, #0
 801dd32:	9400      	str	r4, [sp, #0]
 801dd34:	f7ff ffe8 	bl	801dd08 <_DMA_Index2ColorBulk>
 801dd38:	b002      	add	sp, #8
 801dd3a:	bd10      	pop	{r4, pc}

0801dd3c <_Index2ColorBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 801dd3c:	b510      	push	{r4, lr}
 801dd3e:	b082      	sub	sp, #8
 801dd40:	2404      	movs	r4, #4
 801dd42:	9400      	str	r4, [sp, #0]
 801dd44:	f7ff ffe0 	bl	801dd08 <_DMA_Index2ColorBulk>
 801dd48:	b002      	add	sp, #8
 801dd4a:	bd10      	pop	{r4, pc}

0801dd4c <_Index2ColorBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 801dd4c:	b510      	push	{r4, lr}
 801dd4e:	b082      	sub	sp, #8
 801dd50:	2402      	movs	r4, #2
 801dd52:	9400      	str	r4, [sp, #0]
 801dd54:	f7ff ffd8 	bl	801dd08 <_DMA_Index2ColorBulk>
 801dd58:	b002      	add	sp, #8
 801dd5a:	bd10      	pop	{r4, pc}

0801dd5c <_Index2ColorBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 801dd5c:	b510      	push	{r4, lr}
 801dd5e:	b082      	sub	sp, #8
 801dd60:	2403      	movs	r4, #3
 801dd62:	9400      	str	r4, [sp, #0]
 801dd64:	f7ff ffd0 	bl	801dd08 <_DMA_Index2ColorBulk>
 801dd68:	b002      	add	sp, #8
 801dd6a:	bd10      	pop	{r4, pc}

0801dd6c <_DMA_Color2IndexBulk>:
*   This routine is used by the emWin color conversion routines to use DMA2D for
*   color conversion. It converts the given 32 bit color array to index values.
*   Because emWin uses ABGR internally and 0x00 and 0xFF for opaque and fully
*   transparent the given color array needs to be converted before DMA2D can be used.
*/
static void _DMA_Color2IndexBulk(LCD_COLOR * pColor, void * pIndex, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 801dd6c:	b500      	push	{lr}
 801dd6e:	b083      	sub	sp, #12
#if (GUI_USE_ARGB)

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(pColor, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 801dd70:	9200      	str	r2, [sp, #0]
 801dd72:	9b04      	ldr	r3, [sp, #16]
 801dd74:	2200      	movs	r2, #0
 801dd76:	f7ff ff9f 	bl	801dcb8 <_DMA_ConvertColor>
  _InvertAlpha_SwapRB_CPY(pColor, _pBuffer_DMA2D, NumItems);

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(_pBuffer_DMA2D, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
#endif
}
 801dd7a:	b003      	add	sp, #12
 801dd7c:	f85d fb04 	ldr.w	pc, [sp], #4

0801dd80 <_Color2IndexBulk_M8888I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 801dd80:	b510      	push	{r4, lr}
 801dd82:	b082      	sub	sp, #8
 801dd84:	2400      	movs	r4, #0
 801dd86:	9400      	str	r4, [sp, #0]
 801dd88:	f7ff fff0 	bl	801dd6c <_DMA_Color2IndexBulk>
 801dd8c:	b002      	add	sp, #8
 801dd8e:	bd10      	pop	{r4, pc}

0801dd90 <_Color2IndexBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 801dd90:	b510      	push	{r4, lr}
 801dd92:	b082      	sub	sp, #8
 801dd94:	2400      	movs	r4, #0
 801dd96:	9400      	str	r4, [sp, #0]
 801dd98:	f7ff ffe8 	bl	801dd6c <_DMA_Color2IndexBulk>
 801dd9c:	b002      	add	sp, #8
 801dd9e:	bd10      	pop	{r4, pc}

0801dda0 <_Color2IndexBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 801dda0:	b510      	push	{r4, lr}
 801dda2:	b082      	sub	sp, #8
 801dda4:	2404      	movs	r4, #4
 801dda6:	9400      	str	r4, [sp, #0]
 801dda8:	f7ff ffe0 	bl	801dd6c <_DMA_Color2IndexBulk>
 801ddac:	b002      	add	sp, #8
 801ddae:	bd10      	pop	{r4, pc}

0801ddb0 <_Color2IndexBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 801ddb0:	b510      	push	{r4, lr}
 801ddb2:	b082      	sub	sp, #8
 801ddb4:	2402      	movs	r4, #2
 801ddb6:	9400      	str	r4, [sp, #0]
 801ddb8:	f7ff ffd8 	bl	801dd6c <_DMA_Color2IndexBulk>
 801ddbc:	b002      	add	sp, #8
 801ddbe:	bd10      	pop	{r4, pc}

0801ddc0 <_Color2IndexBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 801ddc0:	b510      	push	{r4, lr}
 801ddc2:	b082      	sub	sp, #8
 801ddc4:	2403      	movs	r4, #3
 801ddc6:	9400      	str	r4, [sp, #0]
 801ddc8:	f7ff ffd0 	bl	801dd6c <_DMA_Color2IndexBulk>
 801ddcc:	b002      	add	sp, #8
 801ddce:	bd10      	pop	{r4, pc}

0801ddd0 <GetBufferSize>:
  * @brief  Get buffer size
  * @param  LayerIndex : Layer Index           
  * @retval None.
  */
static U32 GetBufferSize(U32 LayerIndex) 
{
 801ddd0:	b410      	push	{r4}
  return (layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel);
 801ddd2:	4909      	ldr	r1, [pc, #36]	; (801ddf8 <GetBufferSize+0x28>)
 801ddd4:	00c3      	lsls	r3, r0, #3
 801ddd6:	1a1c      	subs	r4, r3, r0
 801ddd8:	00a2      	lsls	r2, r4, #2
 801ddda:	440a      	add	r2, r1
 801dddc:	6914      	ldr	r4, [r2, #16]
 801ddde:	6952      	ldr	r2, [r2, #20]
 801dde0:	fb02 f204 	mul.w	r2, r2, r4
 801dde4:	1a1b      	subs	r3, r3, r0
 801dde6:	0098      	lsls	r0, r3, #2
 801dde8:	4401      	add	r1, r0
 801ddea:	6988      	ldr	r0, [r1, #24]
}
 801ddec:	fb00 f002 	mul.w	r0, r0, r2
 801ddf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ddf4:	4770      	bx	lr
 801ddf6:	bf00      	nop
 801ddf8:	2002e108 	.word	0x2002e108

0801ddfc <LCD_LL_CopyBuffer>:
  * @param  IndexSrc:    index source
  * @param  IndexDst:    index destination           
  * @retval None.
  */
static void LCD_LL_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) 
{
 801ddfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de00:	b084      	sub	sp, #16
 801de02:	4606      	mov	r6, r0
 801de04:	4688      	mov	r8, r1
 801de06:	4617      	mov	r7, r2
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 801de08:	f7ff ffe2 	bl	801ddd0 <GetBufferSize>
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 801de0c:	4d0c      	ldr	r5, [pc, #48]	; (801de40 <LCD_LL_CopyBuffer+0x44>)
 801de0e:	00f4      	lsls	r4, r6, #3
 801de10:	1ba3      	subs	r3, r4, r6
 801de12:	009a      	lsls	r2, r3, #2
 801de14:	442a      	add	r2, r5
 801de16:	6851      	ldr	r1, [r2, #4]
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 801de18:	6913      	ldr	r3, [r2, #16]
 801de1a:	6952      	ldr	r2, [r2, #20]
 801de1c:	9200      	str	r2, [sp, #0]
 801de1e:	2200      	movs	r2, #0
 801de20:	9202      	str	r2, [sp, #8]
 801de22:	9201      	str	r2, [sp, #4]
 801de24:	fb00 1207 	mla	r2, r0, r7, r1
 801de28:	fb00 1108 	mla	r1, r0, r8, r1
 801de2c:	4630      	mov	r0, r6
 801de2e:	f7ff fec1 	bl	801dbb4 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 801de32:	1ba4      	subs	r4, r4, r6
 801de34:	00a3      	lsls	r3, r4, #2
 801de36:	441d      	add	r5, r3
 801de38:	60ef      	str	r7, [r5, #12]
}
 801de3a:	b004      	add	sp, #16
 801de3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801de40:	2002e108 	.word	0x2002e108

0801de44 <LCD_LL_CopyRect>:
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None.
  */
static void LCD_LL_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
 801de44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801de48:	b085      	sub	sp, #20
 801de4a:	4607      	mov	r7, r0
 801de4c:	460c      	mov	r4, r1
 801de4e:	4691      	mov	r9, r2
 801de50:	4698      	mov	r8, r3
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 801de52:	f7ff ffbd 	bl	801ddd0 <GetBufferSize>
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 801de56:	4d16      	ldr	r5, [pc, #88]	; (801deb0 <LCD_LL_CopyRect+0x6c>)
 801de58:	ea4f 0cc7 	mov.w	ip, r7, lsl #3
 801de5c:	ebac 0207 	sub.w	r2, ip, r7
 801de60:	0093      	lsls	r3, r2, #2
 801de62:	442b      	add	r3, r5
 801de64:	6859      	ldr	r1, [r3, #4]
 801de66:	691e      	ldr	r6, [r3, #16]
 801de68:	fb09 4406 	mla	r4, r9, r6, r4
 801de6c:	699a      	ldr	r2, [r3, #24]
 801de6e:	ebac 0307 	sub.w	r3, ip, r7
 801de72:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801de76:	eb05 0e0c 	add.w	lr, r5, ip
 801de7a:	f8de 3008 	ldr.w	r3, [lr, #8]
 801de7e:	fb00 f003 	mul.w	r0, r0, r3
 801de82:	fb02 0404 	mla	r4, r2, r4, r0
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 801de86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801de88:	fb03 8806 	mla	r8, r3, r6, r8
 801de8c:	fb08 0202 	mla	r2, r8, r2, r0
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 801de90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801de92:	1af6      	subs	r6, r6, r3
 801de94:	2300      	movs	r3, #0
 801de96:	9302      	str	r3, [sp, #8]
 801de98:	9601      	str	r6, [sp, #4]
 801de9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de9c:	9300      	str	r3, [sp, #0]
 801de9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dea0:	440a      	add	r2, r1
 801dea2:	4421      	add	r1, r4
 801dea4:	4638      	mov	r0, r7
 801dea6:	f7ff fe85 	bl	801dbb4 <DMA2D_CopyBuffer>
}
 801deaa:	b005      	add	sp, #20
 801deac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801deb0:	2002e108 	.word	0x2002e108

0801deb4 <DMA2D_DrawBitmapL8>:
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void DMA2D_DrawBitmapL8(void * pSrc, void * pDst,  U32 OffSrc, U32 OffDst, U32 PixelFormatDst, U32 xSize, U32 ySize)
{	
 801deb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801deb6:	4607      	mov	r7, r0
 801deb8:	460e      	mov	r6, r1
 801deba:	4615      	mov	r5, r2
 801debc:	461c      	mov	r4, r3
	
  _DMA_ExecOperation();
 801debe:	f7ff fe67 	bl	801db90 <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 801dec2:	4b0d      	ldr	r3, [pc, #52]	; (801def8 <DMA2D_DrawBitmapL8+0x44>)
 801dec4:	2201      	movs	r2, #1
 801dec6:	701a      	strb	r2, [r3, #0]
	
  /* Set up mode */
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 801dec8:	4b0c      	ldr	r3, [pc, #48]	; (801defc <DMA2D_DrawBitmapL8+0x48>)
 801deca:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 801dece:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address) */
 801ded0:	60df      	str	r7, [r3, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 801ded2:	63de      	str	r6, [r3, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 801ded4:	611d      	str	r5, [r3, #16]
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 801ded6:	641c      	str	r4, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 801ded8:	2205      	movs	r2, #5
 801deda:	61da      	str	r2, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                   /* Output PFC Control Register (Defines the output pixel format) */
 801dedc:	9a06      	ldr	r2, [sp, #24]
 801dede:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transfered) */
 801dee0:	9907      	ldr	r1, [sp, #28]
 801dee2:	9a08      	ldr	r2, [sp, #32]
 801dee4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801dee8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                   /* Start operation */
 801deea:	681a      	ldr	r2, [r3, #0]
 801deec:	f042 0201 	orr.w	r2, r2, #1
 801def0:	601a      	str	r2, [r3, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();	
 801def2:	f7ff fe4d 	bl	801db90 <_DMA_ExecOperation>
}
 801def6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801def8:	2002e108 	.word	0x2002e108
 801defc:	4002b000 	.word	0x4002b000

0801df00 <_DMA_DrawAlphaBitmap>:
/*********************************************************************
*
*       _DMA_DrawAlphaBitmap
*/
/**/
static void _DMA_DrawAlphaBitmap(void * pDst, const void * pSrc, int xSize, int ySize, int OffLineSrc, int OffLineDst, int PixelFormat) {
 801df00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801df04:	4607      	mov	r7, r0
 801df06:	4689      	mov	r9, r1
 801df08:	4690      	mov	r8, r2
 801df0a:	461c      	mov	r4, r3
 801df0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801df0e:	9d0a      	ldr	r5, [sp, #40]	; 0x28

  _DMA_ExecOperation();
 801df10:	f7ff fe3e 	bl	801db90 <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 801df14:	4b0f      	ldr	r3, [pc, #60]	; (801df54 <_DMA_DrawAlphaBitmap+0x54>)
 801df16:	2201      	movs	r2, #1
 801df18:	701a      	strb	r2, [r3, #0]
	
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 801df1a:	490f      	ldr	r1, [pc, #60]	; (801df58 <_DMA_DrawAlphaBitmap+0x58>)
 801df1c:	4b0f      	ldr	r3, [pc, #60]	; (801df5c <_DMA_DrawAlphaBitmap+0x5c>)
 801df1e:	600b      	str	r3, [r1, #0]
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)                     */
 801df20:	f8c1 900c 	str.w	r9, [r1, #12]
  DMA2D->BGMAR   = (U32)pDst;                       /* Background Memory Address Register (Destination address)                */
 801df24:	614f      	str	r7, [r1, #20]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address)                    */
 801df26:	63cf      	str	r7, [r1, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      /* Foreground Offset Register (Source line offset)                         */
 801df28:	9b08      	ldr	r3, [sp, #32]
 801df2a:	610b      	str	r3, [r1, #16]
  DMA2D->BGOR    = OffLineDst;                      /* Background Offset Register (Destination line offset)                    */
 801df2c:	618e      	str	r6, [r1, #24]
  DMA2D->OOR     = OffLineDst;                      /* Output Offset Register (Destination line offset)                        */
 801df2e:	640e      	str	r6, [r1, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;      /* Foreground PFC Control Register (Defines the input pixel format)        */
 801df30:	2300      	movs	r3, #0
 801df32:	61cb      	str	r3, [r1, #28]
  DMA2D->BGPFCCR = PixelFormat;                     /* Background PFC Control Register (Defines the destination pixel format)  */
 801df34:	624d      	str	r5, [r1, #36]	; 0x24
  DMA2D->OPFCCR  = PixelFormat;                     /* Output     PFC Control Register (Defines the output pixel format)       */
 801df36:	634d      	str	r5, [r1, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; /* Number of Line Register (Size configuration of area to be transfered)   */
 801df38:	b2a4      	uxth	r4, r4
 801df3a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 801df3e:	644c      	str	r4, [r1, #68]	; 0x44
  
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 801df40:	680b      	ldr	r3, [r1, #0]
 801df42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801df46:	4313      	orrs	r3, r2
 801df48:	600b      	str	r3, [r1, #0]

_DMA_ExecOperation();  
 801df4a:	f7ff fe21 	bl	801db90 <_DMA_ExecOperation>
}
 801df4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801df52:	bf00      	nop
 801df54:	2002e108 	.word	0x2002e108
 801df58:	4002b000 	.word	0x4002b000
 801df5c:	00020200 	.word	0x00020200

0801df60 <_LCD_DrawBitmapAlpha>:

/*********************************************************************
*
*       _LCD_DrawBitmapAlpha
*/
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 801df60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801df64:	b084      	sub	sp, #16
 801df66:	4605      	mov	r5, r0
 801df68:	460c      	mov	r4, r1
 801df6a:	4692      	mov	sl, r2
 801df6c:	4698      	mov	r8, r3
 801df6e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801df70:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  PixelFormat = GetPixelformat(LayerIndex);
 801df72:	f7ff fe17 	bl	801dba4 <GetPixelformat>
 801df76:	4681      	mov	r9, r0
  BufferSize = GetBufferSize(LayerIndex);
 801df78:	4628      	mov	r0, r5
 801df7a:	f7ff ff29 	bl	801ddd0 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 801df7e:	f8df c054 	ldr.w	ip, [pc, #84]	; 801dfd4 <_LCD_DrawBitmapAlpha+0x74>
 801df82:	00ea      	lsls	r2, r5, #3
 801df84:	1b51      	subs	r1, r2, r5
 801df86:	008b      	lsls	r3, r1, #2
 801df88:	4463      	add	r3, ip
 801df8a:	f8d3 e004 	ldr.w	lr, [r3, #4]
 801df8e:	6919      	ldr	r1, [r3, #16]
 801df90:	fb0a 4401 	mla	r4, sl, r1, r4
 801df94:	699b      	ldr	r3, [r3, #24]
 801df96:	1b55      	subs	r5, r2, r5
 801df98:	00aa      	lsls	r2, r5, #2
 801df9a:	4494      	add	ip, r2
 801df9c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801dfa0:	fb00 f002 	mul.w	r0, r0, r2
 801dfa4:	fb03 0404 	mla	r4, r3, r4, r0
 801dfa8:	eb0e 0004 	add.w	r0, lr, r4
  OffLineSrc = (BytesPerLine / 4) - xSize;
 801dfac:	463b      	mov	r3, r7
 801dfae:	2f00      	cmp	r7, #0
 801dfb0:	db0e      	blt.n	801dfd0 <_LCD_DrawBitmapAlpha+0x70>
 801dfb2:	ebc6 03a3 	rsb	r3, r6, r3, asr #2
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 801dfb6:	1b89      	subs	r1, r1, r6
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 801dfb8:	f8cd 9008 	str.w	r9, [sp, #8]
 801dfbc:	9101      	str	r1, [sp, #4]
 801dfbe:	9300      	str	r3, [sp, #0]
 801dfc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dfc2:	4632      	mov	r2, r6
 801dfc4:	4641      	mov	r1, r8
 801dfc6:	f7ff ff9b 	bl	801df00 <_DMA_DrawAlphaBitmap>
}
 801dfca:	b004      	add	sp, #16
 801dfcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  OffLineSrc = (BytesPerLine / 4) - xSize;
 801dfd0:	1cfb      	adds	r3, r7, #3
 801dfd2:	e7ee      	b.n	801dfb2 <_LCD_DrawBitmapAlpha+0x52>
 801dfd4:	2002e108 	.word	0x2002e108

0801dfd8 <_LCD_DrawMemdevAlpha>:

/*********************************************************************
*
*       _LCD_DrawMemdevAlpha
*/
static void _LCD_DrawMemdevAlpha(void * pDst, const void * pSrc, int xSize, int ySize, int BytesPerLineDst, int BytesPerLineSrc) {
 801dfd8:	b570      	push	{r4, r5, r6, lr}
 801dfda:	b084      	sub	sp, #16
 801dfdc:	9e08      	ldr	r6, [sp, #32]
 801dfde:	9d09      	ldr	r5, [sp, #36]	; 0x24
  int OffLineSrc, OffLineDst;

  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 801dfe0:	462c      	mov	r4, r5
 801dfe2:	2d00      	cmp	r5, #0
 801dfe4:	db0e      	blt.n	801e004 <_LCD_DrawMemdevAlpha+0x2c>
 801dfe6:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 801dfea:	4635      	mov	r5, r6
 801dfec:	2e00      	cmp	r6, #0
 801dfee:	db0b      	blt.n	801e008 <_LCD_DrawMemdevAlpha+0x30>
 801dff0:	ebc2 05a5 	rsb	r5, r2, r5, asr #2
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 801dff4:	2600      	movs	r6, #0
 801dff6:	9602      	str	r6, [sp, #8]
 801dff8:	9501      	str	r5, [sp, #4]
 801dffa:	9400      	str	r4, [sp, #0]
 801dffc:	f7ff ff80 	bl	801df00 <_DMA_DrawAlphaBitmap>
}
 801e000:	b004      	add	sp, #16
 801e002:	bd70      	pop	{r4, r5, r6, pc}
  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 801e004:	1cec      	adds	r4, r5, #3
 801e006:	e7ee      	b.n	801dfe6 <_LCD_DrawMemdevAlpha+0xe>
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 801e008:	1cf5      	adds	r5, r6, #3
 801e00a:	e7f1      	b.n	801dff0 <_LCD_DrawMemdevAlpha+0x18>

0801e00c <LCD_LL_DrawBitmap16bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
void LCD_LL_DrawBitmap16bpp(int LayerIndex, int x, int y, U16 const * p, int xSize, int ySize, int BytesPerLine)
{
 801e00c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e010:	b085      	sub	sp, #20
 801e012:	4605      	mov	r5, r0
 801e014:	4688      	mov	r8, r1
 801e016:	4691      	mov	r9, r2
 801e018:	461f      	mov	r7, r3
 801e01a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e01c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 801e01e:	f7ff fed7 	bl	801ddd0 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 801e022:	f8df e050 	ldr.w	lr, [pc, #80]	; 801e074 <LCD_LL_DrawBitmap16bpp+0x68>
 801e026:	00e9      	lsls	r1, r5, #3
 801e028:	1b4a      	subs	r2, r1, r5
 801e02a:	0093      	lsls	r3, r2, #2
 801e02c:	4473      	add	r3, lr
 801e02e:	685a      	ldr	r2, [r3, #4]
 801e030:	f8d3 c010 	ldr.w	ip, [r3, #16]
 801e034:	fb09 880c 	mla	r8, r9, ip, r8
 801e038:	f8d3 9018 	ldr.w	r9, [r3, #24]
 801e03c:	1b4b      	subs	r3, r1, r5
 801e03e:	0099      	lsls	r1, r3, #2
 801e040:	448e      	add	lr, r1
 801e042:	f8de 300c 	ldr.w	r3, [lr, #12]
 801e046:	fb00 f003 	mul.w	r0, r0, r3
 801e04a:	fb09 0808 	mla	r8, r9, r8, r0
  OffLineSrc = (BytesPerLine / 2) - xSize;
 801e04e:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 801e052:	ebc6 0464 	rsb	r4, r6, r4, asr #1
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 801e056:	ebac 0306 	sub.w	r3, ip, r6
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 801e05a:	9302      	str	r3, [sp, #8]
 801e05c:	9401      	str	r4, [sp, #4]
 801e05e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e060:	9300      	str	r3, [sp, #0]
 801e062:	4633      	mov	r3, r6
 801e064:	4442      	add	r2, r8
 801e066:	4639      	mov	r1, r7
 801e068:	4628      	mov	r0, r5
 801e06a:	f7ff fda3 	bl	801dbb4 <DMA2D_CopyBuffer>
}
 801e06e:	b005      	add	sp, #20
 801e070:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e074:	2002e108 	.word	0x2002e108

0801e078 <LCD_LL_DrawBitmap32bpp>:

static void LCD_LL_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 801e078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e07c:	b085      	sub	sp, #20
 801e07e:	4605      	mov	r5, r0
 801e080:	460c      	mov	r4, r1
 801e082:	4691      	mov	r9, r2
 801e084:	4698      	mov	r8, r3
 801e086:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801e088:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 801e08a:	f7ff fea1 	bl	801ddd0 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 801e08e:	4a17      	ldr	r2, [pc, #92]	; (801e0ec <LCD_LL_DrawBitmap32bpp+0x74>)
 801e090:	00e9      	lsls	r1, r5, #3
 801e092:	eba1 0c05 	sub.w	ip, r1, r5
 801e096:	ea4f 038c 	mov.w	r3, ip, lsl #2
 801e09a:	4413      	add	r3, r2
 801e09c:	f8d3 e004 	ldr.w	lr, [r3, #4]
 801e0a0:	f8d3 c010 	ldr.w	ip, [r3, #16]
 801e0a4:	fb09 440c 	mla	r4, r9, ip, r4
 801e0a8:	f8d3 9018 	ldr.w	r9, [r3, #24]
 801e0ac:	1b4b      	subs	r3, r1, r5
 801e0ae:	0099      	lsls	r1, r3, #2
 801e0b0:	440a      	add	r2, r1
 801e0b2:	68d3      	ldr	r3, [r2, #12]
 801e0b4:	fb00 f303 	mul.w	r3, r0, r3
 801e0b8:	fb09 3404 	mla	r4, r9, r4, r3
 801e0bc:	eb0e 0204 	add.w	r2, lr, r4
  OffLineSrc = (BytesPerLine / 4) - xSize;
 801e0c0:	463b      	mov	r3, r7
 801e0c2:	2f00      	cmp	r7, #0
 801e0c4:	db0f      	blt.n	801e0e6 <LCD_LL_DrawBitmap32bpp+0x6e>
 801e0c6:	ebc6 01a3 	rsb	r1, r6, r3, asr #2
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 801e0ca:	ebac 0306 	sub.w	r3, ip, r6
  DMA2D_CopyBufferWithAlpha(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 801e0ce:	9302      	str	r3, [sp, #8]
 801e0d0:	9101      	str	r1, [sp, #4]
 801e0d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e0d4:	9300      	str	r3, [sp, #0]
 801e0d6:	4633      	mov	r3, r6
 801e0d8:	4641      	mov	r1, r8
 801e0da:	4628      	mov	r0, r5
 801e0dc:	f7ff fd92 	bl	801dc04 <DMA2D_CopyBufferWithAlpha>
}
 801e0e0:	b005      	add	sp, #20
 801e0e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  OffLineSrc = (BytesPerLine / 4) - xSize;
 801e0e6:	1cfb      	adds	r3, r7, #3
 801e0e8:	e7ed      	b.n	801e0c6 <LCD_LL_DrawBitmap32bpp+0x4e>
 801e0ea:	bf00      	nop
 801e0ec:	2002e108 	.word	0x2002e108

0801e0f0 <LCD_LL_DrawBitmap8bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
static void LCD_LL_DrawBitmap8bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 801e0f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e0f4:	b085      	sub	sp, #20
 801e0f6:	4606      	mov	r6, r0
 801e0f8:	460d      	mov	r5, r1
 801e0fa:	4691      	mov	r9, r2
 801e0fc:	4698      	mov	r8, r3
 801e0fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
 801e100:	f7ff fe66 	bl	801ddd0 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 801e104:	4b14      	ldr	r3, [pc, #80]	; (801e158 <LCD_LL_DrawBitmap8bpp+0x68>)
 801e106:	00f2      	lsls	r2, r6, #3
 801e108:	1b91      	subs	r1, r2, r6
 801e10a:	008c      	lsls	r4, r1, #2
 801e10c:	441c      	add	r4, r3
 801e10e:	f8d4 c004 	ldr.w	ip, [r4, #4]
 801e112:	6921      	ldr	r1, [r4, #16]
 801e114:	fb09 5501 	mla	r5, r9, r1, r5
 801e118:	69a4      	ldr	r4, [r4, #24]
 801e11a:	1b92      	subs	r2, r2, r6
 801e11c:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 801e120:	4473      	add	r3, lr
 801e122:	68db      	ldr	r3, [r3, #12]
 801e124:	fb00 f003 	mul.w	r0, r0, r3
 801e128:	fb04 0505 	mla	r5, r4, r5, r0
 801e12c:	eb0c 0405 	add.w	r4, ip, r5
  OffLineSrc = BytesPerLine - xSize;
 801e130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e132:	eba3 0907 	sub.w	r9, r3, r7
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 801e136:	1bcd      	subs	r5, r1, r7
  PixelFormat = GetPixelformat(LayerIndex);
 801e138:	4630      	mov	r0, r6
 801e13a:	f7ff fd33 	bl	801dba4 <GetPixelformat>
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
 801e13e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e140:	9302      	str	r3, [sp, #8]
 801e142:	9701      	str	r7, [sp, #4]
 801e144:	9000      	str	r0, [sp, #0]
 801e146:	462b      	mov	r3, r5
 801e148:	464a      	mov	r2, r9
 801e14a:	4621      	mov	r1, r4
 801e14c:	4640      	mov	r0, r8
 801e14e:	f7ff feb1 	bl	801deb4 <DMA2D_DrawBitmapL8>
}
 801e152:	b005      	add	sp, #20
 801e154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e158:	2002e108 	.word	0x2002e108

0801e15c <LCD_LL_FillRect>:
{
 801e15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e160:	b082      	sub	sp, #8
 801e162:	4606      	mov	r6, r0
 801e164:	460c      	mov	r4, r1
 801e166:	4690      	mov	r8, r2
 801e168:	461d      	mov	r5, r3
  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 801e16a:	f001 ff99 	bl	80200a0 <GUI_GetDrawMode>
 801e16e:	2801      	cmp	r0, #1
 801e170:	d02e      	beq.n	801e1d0 <LCD_LL_FillRect+0x74>
    xSize = x1 - x0 + 1;
 801e172:	1b2d      	subs	r5, r5, r4
 801e174:	3501      	adds	r5, #1
    ySize = y1 - y0 + 1;
 801e176:	9b08      	ldr	r3, [sp, #32]
 801e178:	eba3 0708 	sub.w	r7, r3, r8
 801e17c:	3701      	adds	r7, #1
    BufferSize = GetBufferSize(LayerIndex);
 801e17e:	4630      	mov	r0, r6
 801e180:	f7ff fe26 	bl	801ddd0 <GetBufferSize>
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 801e184:	f8df e070 	ldr.w	lr, [pc, #112]	; 801e1f8 <LCD_LL_FillRect+0x9c>
 801e188:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 801e18c:	ebac 0206 	sub.w	r2, ip, r6
 801e190:	0093      	lsls	r3, r2, #2
 801e192:	4473      	add	r3, lr
 801e194:	6859      	ldr	r1, [r3, #4]
 801e196:	691a      	ldr	r2, [r3, #16]
 801e198:	fb08 4402 	mla	r4, r8, r2, r4
 801e19c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801e1a0:	ebac 0306 	sub.w	r3, ip, r6
 801e1a4:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801e1a8:	44e6      	add	lr, ip
 801e1aa:	f8de 300c 	ldr.w	r3, [lr, #12]
 801e1ae:	fb00 f003 	mul.w	r0, r0, r3
 801e1b2:	fb08 0404 	mla	r4, r8, r4, r0
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 801e1b6:	1b52      	subs	r2, r2, r5
 801e1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e1ba:	9301      	str	r3, [sp, #4]
 801e1bc:	9200      	str	r2, [sp, #0]
 801e1be:	463b      	mov	r3, r7
 801e1c0:	462a      	mov	r2, r5
 801e1c2:	4421      	add	r1, r4
 801e1c4:	4630      	mov	r0, r6
 801e1c6:	f7ff fd4d 	bl	801dc64 <DMA2D_FillBuffer>
}
 801e1ca:	b002      	add	sp, #8
 801e1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 801e1d0:	2200      	movs	r2, #0
 801e1d2:	2119      	movs	r1, #25
 801e1d4:	4630      	mov	r0, r6
 801e1d6:	f005 ff19 	bl	802400c <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 801e1da:	9b08      	ldr	r3, [sp, #32]
 801e1dc:	462a      	mov	r2, r5
 801e1de:	4641      	mov	r1, r8
 801e1e0:	4620      	mov	r0, r4
 801e1e2:	f004 fbef 	bl	80229c4 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 801e1e6:	4a03      	ldr	r2, [pc, #12]	; (801e1f4 <LCD_LL_FillRect+0x98>)
 801e1e8:	2119      	movs	r1, #25
 801e1ea:	4630      	mov	r0, r6
 801e1ec:	f005 ff0e 	bl	802400c <LCD_SetDevFunc>
 801e1f0:	e7eb      	b.n	801e1ca <LCD_LL_FillRect+0x6e>
 801e1f2:	bf00      	nop
 801e1f4:	0801e15d 	.word	0x0801e15d
 801e1f8:	2002e108 	.word	0x2002e108

0801e1fc <LCD_LL_Reset>:
{
 801e1fc:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 801e1fe:	4c09      	ldr	r4, [pc, #36]	; (801e224 <LCD_LL_Reset+0x28>)
 801e200:	2200      	movs	r2, #0
 801e202:	2180      	movs	r1, #128	; 0x80
 801e204:	4620      	mov	r0, r4
 801e206:	f7f5 fdbc 	bl	8013d82 <HAL_GPIO_WritePin>
    HAL_Delay(20); /* wait 20 ms */
 801e20a:	2014      	movs	r0, #20
 801e20c:	f7f4 fc10 	bl	8012a30 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 801e210:	2201      	movs	r2, #1
 801e212:	2180      	movs	r1, #128	; 0x80
 801e214:	4620      	mov	r0, r4
 801e216:	f7f5 fdb4 	bl	8013d82 <HAL_GPIO_WritePin>
    HAL_Delay(10); 
 801e21a:	200a      	movs	r0, #10
 801e21c:	f7f4 fc08 	bl	8012a30 <HAL_Delay>
}
 801e220:	bd10      	pop	{r4, pc}
 801e222:	bf00      	nop
 801e224:	40021c00 	.word	0x40021c00

0801e228 <DSI_IO_WriteCmd>:
{
 801e228:	b500      	push	{lr}
 801e22a:	b083      	sub	sp, #12
  if(NbrParams <= 1)
 801e22c:	2801      	cmp	r0, #1
 801e22e:	d90b      	bls.n	801e248 <DSI_IO_WriteCmd+0x20>
    HAL_DSI_LongWrite(&hdsi,  0, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 801e230:	5c0b      	ldrb	r3, [r1, r0]
 801e232:	9101      	str	r1, [sp, #4]
 801e234:	9300      	str	r3, [sp, #0]
 801e236:	4603      	mov	r3, r0
 801e238:	2239      	movs	r2, #57	; 0x39
 801e23a:	2100      	movs	r1, #0
 801e23c:	4807      	ldr	r0, [pc, #28]	; (801e25c <DSI_IO_WriteCmd+0x34>)
 801e23e:	f7f5 fb98 	bl	8013972 <HAL_DSI_LongWrite>
} 
 801e242:	b003      	add	sp, #12
 801e244:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 801e248:	780b      	ldrb	r3, [r1, #0]
 801e24a:	784a      	ldrb	r2, [r1, #1]
 801e24c:	9200      	str	r2, [sp, #0]
 801e24e:	2215      	movs	r2, #21
 801e250:	2100      	movs	r1, #0
 801e252:	4802      	ldr	r0, [pc, #8]	; (801e25c <DSI_IO_WriteCmd+0x34>)
 801e254:	f7f5 fb7a 	bl	801394c <HAL_DSI_ShortWrite>
 801e258:	e7f3      	b.n	801e242 <DSI_IO_WriteCmd+0x1a>
 801e25a:	bf00      	nop
 801e25c:	20030668 	.word	0x20030668

0801e260 <OTM8009A_IO_Delay>:
{
 801e260:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 801e262:	f7f4 fbe5 	bl	8012a30 <HAL_Delay>
}
 801e266:	bd08      	pop	{r3, pc}

0801e268 <DMA2D_Init>:
{
 801e268:	b508      	push	{r3, lr}
	hdma2d.XferCpltCallback  = TransferComplete;	
 801e26a:	4809      	ldr	r0, [pc, #36]	; (801e290 <DMA2D_Init+0x28>)
 801e26c:	4b09      	ldr	r3, [pc, #36]	; (801e294 <DMA2D_Init+0x2c>)
 801e26e:	6103      	str	r3, [r0, #16]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801e270:	f7f4 fe70 	bl	8012f54 <HAL_DMA2D_Init>
 801e274:	b928      	cbnz	r0, 801e282 <DMA2D_Init+0x1a>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 801e276:	2101      	movs	r1, #1
 801e278:	4805      	ldr	r0, [pc, #20]	; (801e290 <DMA2D_Init+0x28>)
 801e27a:	f7f4 ff39 	bl	80130f0 <HAL_DMA2D_ConfigLayer>
 801e27e:	b918      	cbnz	r0, 801e288 <DMA2D_Init+0x20>
}
 801e280:	bd08      	pop	{r3, pc}
    Error_Handler( );
 801e282:	f7f3 fd09 	bl	8011c98 <Error_Handler>
 801e286:	e7f6      	b.n	801e276 <DMA2D_Init+0xe>
    Error_Handler( );
 801e288:	f7f3 fd06 	bl	8011c98 <Error_Handler>
}
 801e28c:	e7f8      	b.n	801e280 <DMA2D_Init+0x18>
 801e28e:	bf00      	nop
 801e290:	2003072c 	.word	0x2003072c
 801e294:	0801dba9 	.word	0x0801dba9

0801e298 <LCD_SetUpdateRegion>:
  * @brief  Set LCD updated region.
  * @param  idx: active region index.
  * @retval None
  */
void LCD_SetUpdateRegion(int idx)
{
 801e298:	b500      	push	{lr}
 801e29a:	b083      	sub	sp, #12
  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 801e29c:	4b07      	ldr	r3, [pc, #28]	; (801e2bc <LCD_SetUpdateRegion+0x24>)
 801e29e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801e2a2:	9001      	str	r0, [sp, #4]
 801e2a4:	232a      	movs	r3, #42	; 0x2a
 801e2a6:	9300      	str	r3, [sp, #0]
 801e2a8:	2304      	movs	r3, #4
 801e2aa:	2239      	movs	r2, #57	; 0x39
 801e2ac:	2100      	movs	r1, #0
 801e2ae:	4804      	ldr	r0, [pc, #16]	; (801e2c0 <LCD_SetUpdateRegion+0x28>)
 801e2b0:	f7f5 fb5f 	bl	8013972 <HAL_DSI_LongWrite>
}
 801e2b4:	b003      	add	sp, #12
 801e2b6:	f85d fb04 	ldr.w	pc, [sp], #4
 801e2ba:	bf00      	nop
 801e2bc:	20000098 	.word	0x20000098
 801e2c0:	20030668 	.word	0x20030668

0801e2c4 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi: pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 801e2c4:	b538      	push	{r3, r4, r5, lr}
 801e2c6:	4605      	mov	r5, r0
  uint32_t index = 0;

	__DSI_MASK_TE();
 801e2c8:	4a11      	ldr	r2, [pc, #68]	; (801e310 <HAL_DSI_TearingEffectCallback+0x4c>)
 801e2ca:	6a13      	ldr	r3, [r2, #32]
 801e2cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801e2d0:	6213      	str	r3, [r2, #32]
	
  for(index = 0; index < GUI_NUM_LAYERS; index ++)
 801e2d2:	2400      	movs	r4, #0
 801e2d4:	b104      	cbz	r4, 801e2d8 <HAL_DSI_TearingEffectCallback+0x14>
    }    
			
    LCD_ActiveRegion = 1;
    HAL_DSI_Refresh(hdsi); 
  }
}  
 801e2d6:	bd38      	pop	{r3, r4, r5, pc}
    if(layer_prop[index].pending_buffer >= 0)
 801e2d8:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 801e2dc:	009a      	lsls	r2, r3, #2
 801e2de:	4b0d      	ldr	r3, [pc, #52]	; (801e314 <HAL_DSI_TearingEffectCallback+0x50>)
 801e2e0:	4413      	add	r3, r2
 801e2e2:	6899      	ldr	r1, [r3, #8]
 801e2e4:	2900      	cmp	r1, #0
 801e2e6:	da07      	bge.n	801e2f8 <HAL_DSI_TearingEffectCallback+0x34>
    LCD_ActiveRegion = 1;
 801e2e8:	4b0b      	ldr	r3, [pc, #44]	; (801e318 <HAL_DSI_TearingEffectCallback+0x54>)
 801e2ea:	2201      	movs	r2, #1
 801e2ec:	609a      	str	r2, [r3, #8]
    HAL_DSI_Refresh(hdsi); 
 801e2ee:	4628      	mov	r0, r5
 801e2f0:	f7f5 fb1a 	bl	8013928 <HAL_DSI_Refresh>
  for(index = 0; index < GUI_NUM_LAYERS; index ++)
 801e2f4:	3401      	adds	r4, #1
 801e2f6:	e7ed      	b.n	801e2d4 <HAL_DSI_TearingEffectCallback+0x10>
      GUI_MULTIBUF_ConfirmEx(index,  layer_prop[index].pending_buffer);
 801e2f8:	4620      	mov	r0, r4
 801e2fa:	f003 f8f3 	bl	80214e4 <GUI_MULTIBUF_ConfirmEx>
      layer_prop[index].pending_buffer = -1;
 801e2fe:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 801e302:	009a      	lsls	r2, r3, #2
 801e304:	4b03      	ldr	r3, [pc, #12]	; (801e314 <HAL_DSI_TearingEffectCallback+0x50>)
 801e306:	4413      	add	r3, r2
 801e308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801e30c:	609a      	str	r2, [r3, #8]
 801e30e:	e7eb      	b.n	801e2e8 <HAL_DSI_TearingEffectCallback+0x24>
 801e310:	40022400 	.word	0x40022400
 801e314:	2002e108 	.word	0x2002e108
 801e318:	20000098 	.word	0x20000098

0801e31c <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi: pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 801e31c:	b530      	push	{r4, r5, lr}
 801e31e:	b085      	sub	sp, #20
 801e320:	4604      	mov	r4, r0
  uint32_t index = 0;

  if(LCD_ActiveRegion < ZONES )
 801e322:	4b43      	ldr	r3, [pc, #268]	; (801e430 <HAL_DSI_EndOfRefreshCallback+0x114>)
 801e324:	689b      	ldr	r3, [r3, #8]
 801e326:	2b01      	cmp	r3, #1
 801e328:	dd2e      	ble.n	801e388 <HAL_DSI_EndOfRefreshCallback+0x6c>
    /* Refresh the right part of the display */
    HAL_DSI_Refresh(hdsi);
  }
  else
  {
    __HAL_DSI_WRAPPER_DISABLE(hdsi);
 801e32a:	2300      	movs	r3, #0
 801e32c:	9302      	str	r3, [sp, #8]
 801e32e:	6801      	ldr	r1, [r0, #0]
 801e330:	f8d1 2404 	ldr.w	r2, [r1, #1028]	; 0x404
 801e334:	f022 0208 	bic.w	r2, r2, #8
 801e338:	f8c1 2404 	str.w	r2, [r1, #1028]	; 0x404
 801e33c:	6802      	ldr	r2, [r0, #0]
 801e33e:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 801e342:	f002 0208 	and.w	r2, r2, #8
 801e346:	9202      	str	r2, [sp, #8]
 801e348:	9a02      	ldr	r2, [sp, #8]
    for(index = 0; index < GUI_NUM_LAYERS; index ++)
 801e34a:	2b00      	cmp	r3, #0
 801e34c:	d064      	beq.n	801e418 <HAL_DSI_EndOfRefreshCallback+0xfc>
    {
      LTDC_LAYER(&hltdc, index)->CFBAR  = LCD_Addr[index];
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 801e34e:	4b39      	ldr	r3, [pc, #228]	; (801e434 <HAL_DSI_EndOfRefreshCallback+0x118>)
 801e350:	681a      	ldr	r2, [r3, #0]
 801e352:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801e354:	f043 0301 	orr.w	r3, r3, #1
 801e358:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_DSI_WRAPPER_ENABLE(hdsi); 
 801e35a:	2500      	movs	r5, #0
 801e35c:	9503      	str	r5, [sp, #12]
 801e35e:	6822      	ldr	r2, [r4, #0]
 801e360:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 801e364:	f043 0308 	orr.w	r3, r3, #8
 801e368:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 801e36c:	6823      	ldr	r3, [r4, #0]
 801e36e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e372:	f003 0308 	and.w	r3, r3, #8
 801e376:	9303      	str	r3, [sp, #12]
 801e378:	9b03      	ldr	r3, [sp, #12]
    LCD_SetUpdateRegion(0);
 801e37a:	4628      	mov	r0, r5
 801e37c:	f7ff ff8c 	bl	801e298 <LCD_SetUpdateRegion>
LCD_Refershing = 0;		
 801e380:	4b2d      	ldr	r3, [pc, #180]	; (801e438 <HAL_DSI_EndOfRefreshCallback+0x11c>)
 801e382:	621d      	str	r5, [r3, #32]
  }
}
 801e384:	b005      	add	sp, #20
 801e386:	bd30      	pop	{r4, r5, pc}
    __HAL_DSI_WRAPPER_DISABLE(hdsi);
 801e388:	2300      	movs	r3, #0
 801e38a:	9300      	str	r3, [sp, #0]
 801e38c:	6801      	ldr	r1, [r0, #0]
 801e38e:	f8d1 2404 	ldr.w	r2, [r1, #1028]	; 0x404
 801e392:	f022 0208 	bic.w	r2, r2, #8
 801e396:	f8c1 2404 	str.w	r2, [r1, #1028]	; 0x404
 801e39a:	6802      	ldr	r2, [r0, #0]
 801e39c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 801e3a0:	f002 0208 	and.w	r2, r2, #8
 801e3a4:	9200      	str	r2, [sp, #0]
 801e3a6:	9a00      	ldr	r2, [sp, #0]
    for(index = 0; index < GUI_NUM_LAYERS; index ++)
 801e3a8:	b1fb      	cbz	r3, 801e3ea <HAL_DSI_EndOfRefreshCallback+0xce>
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 801e3aa:	4b22      	ldr	r3, [pc, #136]	; (801e434 <HAL_DSI_EndOfRefreshCallback+0x118>)
 801e3ac:	681a      	ldr	r2, [r3, #0]
 801e3ae:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801e3b0:	f043 0301 	orr.w	r3, r3, #1
 801e3b4:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_DSI_WRAPPER_ENABLE(hdsi);
 801e3b6:	2300      	movs	r3, #0
 801e3b8:	9301      	str	r3, [sp, #4]
 801e3ba:	6822      	ldr	r2, [r4, #0]
 801e3bc:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 801e3c0:	f043 0308 	orr.w	r3, r3, #8
 801e3c4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 801e3c8:	6823      	ldr	r3, [r4, #0]
 801e3ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e3ce:	f003 0308 	and.w	r3, r3, #8
 801e3d2:	9301      	str	r3, [sp, #4]
 801e3d4:	9b01      	ldr	r3, [sp, #4]
    LCD_SetUpdateRegion(LCD_ActiveRegion++);
 801e3d6:	4b16      	ldr	r3, [pc, #88]	; (801e430 <HAL_DSI_EndOfRefreshCallback+0x114>)
 801e3d8:	6898      	ldr	r0, [r3, #8]
 801e3da:	1c42      	adds	r2, r0, #1
 801e3dc:	609a      	str	r2, [r3, #8]
 801e3de:	f7ff ff5b 	bl	801e298 <LCD_SetUpdateRegion>
    HAL_DSI_Refresh(hdsi);
 801e3e2:	4620      	mov	r0, r4
 801e3e4:	f7f5 faa0 	bl	8013928 <HAL_DSI_Refresh>
 801e3e8:	e7cc      	b.n	801e384 <HAL_DSI_EndOfRefreshCallback+0x68>
      LTDC_LAYER(&hltdc, index)->CFBAR  = LCD_Addr[index] + LCD_ActiveRegion  * (layer_prop[0].xSize/ZONES) * layer_prop[0].BytesPerPixel;
 801e3ea:	4911      	ldr	r1, [pc, #68]	; (801e430 <HAL_DSI_EndOfRefreshCallback+0x114>)
 801e3ec:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 801e3f0:	68d5      	ldr	r5, [r2, #12]
 801e3f2:	4811      	ldr	r0, [pc, #68]	; (801e438 <HAL_DSI_EndOfRefreshCallback+0x11c>)
 801e3f4:	6902      	ldr	r2, [r0, #16]
 801e3f6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 801e3fa:	1052      	asrs	r2, r2, #1
 801e3fc:	6889      	ldr	r1, [r1, #8]
 801e3fe:	fb01 f202 	mul.w	r2, r1, r2
 801e402:	6980      	ldr	r0, [r0, #24]
 801e404:	490b      	ldr	r1, [pc, #44]	; (801e434 <HAL_DSI_EndOfRefreshCallback+0x118>)
 801e406:	6809      	ldr	r1, [r1, #0]
 801e408:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
 801e40c:	fb00 5202 	mla	r2, r0, r2, r5
 801e410:	f8c1 20ac 	str.w	r2, [r1, #172]	; 0xac
    for(index = 0; index < GUI_NUM_LAYERS; index ++)
 801e414:	3301      	adds	r3, #1
 801e416:	e7c7      	b.n	801e3a8 <HAL_DSI_EndOfRefreshCallback+0x8c>
      LTDC_LAYER(&hltdc, index)->CFBAR  = LCD_Addr[index];
 801e418:	4a06      	ldr	r2, [pc, #24]	; (801e434 <HAL_DSI_EndOfRefreshCallback+0x118>)
 801e41a:	6812      	ldr	r2, [r2, #0]
 801e41c:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
 801e420:	4903      	ldr	r1, [pc, #12]	; (801e430 <HAL_DSI_EndOfRefreshCallback+0x114>)
 801e422:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801e426:	68c9      	ldr	r1, [r1, #12]
 801e428:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
    for(index = 0; index < GUI_NUM_LAYERS; index ++)
 801e42c:	3301      	adds	r3, #1
 801e42e:	e78c      	b.n	801e34a <HAL_DSI_EndOfRefreshCallback+0x2e>
 801e430:	20000098 	.word	0x20000098
 801e434:	20030684 	.word	0x20030684
 801e438:	2002e108 	.word	0x2002e108

0801e43c <LCD_ReqTear>:
  * @brief  Request TE at scanline.
  * @param  None
  * @retval None
  */
void LCD_ReqTear(void)
{
 801e43c:	b530      	push	{r4, r5, lr}
 801e43e:	b083      	sub	sp, #12
  static uint8_t ScanLineParams[2];

  ScanLineParams[0] = 0x02;
 801e440:	4a0c      	ldr	r2, [pc, #48]	; (801e474 <LCD_ReqTear+0x38>)
 801e442:	2302      	movs	r3, #2
 801e444:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  ScanLineParams[1] = 0x15;
 801e448:	2515      	movs	r5, #21
 801e44a:	f882 5025 	strb.w	r5, [r2, #37]	; 0x25
  
  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);     
 801e44e:	4c0a      	ldr	r4, [pc, #40]	; (801e478 <LCD_ReqTear+0x3c>)
 801e450:	3224      	adds	r2, #36	; 0x24
 801e452:	9201      	str	r2, [sp, #4]
 801e454:	2244      	movs	r2, #68	; 0x44
 801e456:	9200      	str	r2, [sp, #0]
 801e458:	2239      	movs	r2, #57	; 0x39
 801e45a:	2100      	movs	r1, #0
 801e45c:	4620      	mov	r0, r4
 801e45e:	f7f5 fa88 	bl	8013972 <HAL_DSI_LongWrite>
  /* set_tear_on */
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);	
 801e462:	2100      	movs	r1, #0
 801e464:	9100      	str	r1, [sp, #0]
 801e466:	2335      	movs	r3, #53	; 0x35
 801e468:	462a      	mov	r2, r5
 801e46a:	4620      	mov	r0, r4
 801e46c:	f7f5 fa6e 	bl	801394c <HAL_DSI_ShortWrite>
	
}
 801e470:	b003      	add	sp, #12
 801e472:	bd30      	pop	{r4, r5, pc}
 801e474:	2002e108 	.word	0x2002e108
 801e478:	20030668 	.word	0x20030668

0801e47c <LCD_X_Config>:
  *         display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void) 
{
 801e47c:	b570      	push	{r4, r5, r6, lr}
 801e47e:	b084      	sub	sp, #16
  U32 i;

  /* At first initialize use of multiple buffers on demand */
#if (NUM_BUFFERS > 1)
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 801e480:	2400      	movs	r4, #0
 801e482:	2c00      	cmp	r4, #0
 801e484:	d07d      	beq.n	801e582 <LCD_X_Config+0x106>
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
  }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 801e486:	2300      	movs	r3, #0
 801e488:	461a      	mov	r2, r3
 801e48a:	4962      	ldr	r1, [pc, #392]	; (801e614 <LCD_X_Config+0x198>)
 801e48c:	4862      	ldr	r0, [pc, #392]	; (801e618 <LCD_X_Config+0x19c>)
 801e48e:	f002 fa35 	bl	80208fc <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 801e492:	2000      	movs	r0, #0
 801e494:	f004 ffce 	bl	8023434 <LCD_GetSwapXYEx>
 801e498:	2800      	cmp	r0, #0
 801e49a:	d078      	beq.n	801e58e <LCD_X_Config+0x112>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 801e49c:	f44f 7248 	mov.w	r2, #800	; 0x320
 801e4a0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801e4a4:	2000      	movs	r0, #0
 801e4a6:	f005 fdff 	bl	80240a8 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 801e4aa:	f44f 7248 	mov.w	r2, #800	; 0x320
 801e4ae:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 801e4b2:	2000      	movs	r0, #0
 801e4b4:	f005 fe2a 	bl	802410c <LCD_SetVSizeEx>
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
  }
#endif

  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 801e4b8:	4b58      	ldr	r3, [pc, #352]	; (801e61c <LCD_X_Config+0x1a0>)
 801e4ba:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 801e4be:	605a      	str	r2, [r3, #4]
#if (GUI_NUM_LAYERS > 1)    
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
#endif

  /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 801e4c0:	2400      	movs	r4, #0
 801e4c2:	2c00      	cmp	r4, #0
 801e4c4:	d072      	beq.n	801e5ac <LCD_X_Config+0x130>
    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
  }
  // Set up custom color conversion using DMA2D, works only for direct color modes because of missing LUT for DMA2D destination
  
  GUICC_M1555I_SetCustColorConv(_Color2IndexBulk_M1555I_DMA2D, _Index2ColorBulk_M1555I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB1555
 801e4c6:	4956      	ldr	r1, [pc, #344]	; (801e620 <LCD_X_Config+0x1a4>)
 801e4c8:	4856      	ldr	r0, [pc, #344]	; (801e624 <LCD_X_Config+0x1a8>)
 801e4ca:	f000 fc4f 	bl	801ed6c <GUICC_M1555I_SetCustColorConv>
  GUICC_M565_SetCustColorConv  (_Color2IndexBulk_M565_DMA2D,   _Index2ColorBulk_M565_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB565 (does not speed up conversion, default method is slightly faster!)
 801e4ce:	4956      	ldr	r1, [pc, #344]	; (801e628 <LCD_X_Config+0x1ac>)
 801e4d0:	4856      	ldr	r0, [pc, #344]	; (801e62c <LCD_X_Config+0x1b0>)
 801e4d2:	f000 fc73 	bl	801edbc <GUICC_M565_SetCustColorConv>
  GUICC_M4444I_SetCustColorConv(_Color2IndexBulk_M4444I_DMA2D, _Index2ColorBulk_M4444I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB4444
 801e4d6:	4956      	ldr	r1, [pc, #344]	; (801e630 <LCD_X_Config+0x1b4>)
 801e4d8:	4856      	ldr	r0, [pc, #344]	; (801e634 <LCD_X_Config+0x1b8>)
 801e4da:	f000 fc4d 	bl	801ed78 <GUICC_M4444I_SetCustColorConv>
  GUICC_M888_SetCustColorConv  (_Color2IndexBulk_M888_DMA2D,   _Index2ColorBulk_M888_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB888
 801e4de:	4956      	ldr	r1, [pc, #344]	; (801e638 <LCD_X_Config+0x1bc>)
 801e4e0:	4856      	ldr	r0, [pc, #344]	; (801e63c <LCD_X_Config+0x1c0>)
 801e4e2:	f000 fc71 	bl	801edc8 <GUICC_M888_SetCustColorConv>
  GUICC_M8888I_SetCustColorConv(_Color2IndexBulk_M8888I_DMA2D, _Index2ColorBulk_M8888I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB8888
 801e4e6:	4956      	ldr	r1, [pc, #344]	; (801e640 <LCD_X_Config+0x1c4>)
 801e4e8:	4856      	ldr	r0, [pc, #344]	; (801e644 <LCD_X_Config+0x1c8>)
 801e4ea:	f000 fc65 	bl	801edb8 <GUICC_M8888I_SetCustColorConv>
 	
	GUI_SetFuncDrawAlpha(_LCD_DrawMemdevAlpha, _LCD_DrawBitmapAlpha);
 801e4ee:	4956      	ldr	r1, [pc, #344]	; (801e648 <LCD_X_Config+0x1cc>)
 801e4f0:	4856      	ldr	r0, [pc, #344]	; (801e64c <LCD_X_Config+0x1d0>)
 801e4f2:	f003 fdcd 	bl	8022090 <GUI_SetFuncDrawAlpha>
	__HAL_DSI_WRAPPER_DISABLE(&hdsi);
 801e4f6:	2400      	movs	r4, #0
 801e4f8:	9402      	str	r4, [sp, #8]
 801e4fa:	4d55      	ldr	r5, [pc, #340]	; (801e650 <LCD_X_Config+0x1d4>)
 801e4fc:	682b      	ldr	r3, [r5, #0]
 801e4fe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801e502:	f022 0208 	bic.w	r2, r2, #8
 801e506:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 801e50a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e50e:	f003 0308 	and.w	r3, r3, #8
 801e512:	9302      	str	r3, [sp, #8]
 801e514:	9b02      	ldr	r3, [sp, #8]
  /* Update pitch : the draw is done on the whole physical X Size */
  HAL_LTDC_SetPitch(&hltdc, XSIZE_PHYS, 0);
 801e516:	4622      	mov	r2, r4
 801e518:	f44f 7148 	mov.w	r1, #800	; 0x320
 801e51c:	484d      	ldr	r0, [pc, #308]	; (801e654 <LCD_X_Config+0x1d8>)
 801e51e:	f7f6 ff6b 	bl	80153f8 <HAL_LTDC_SetPitch>
#if (GUI_NUM_LAYERS > 1)    
  HAL_LTDC_SetPitch(&hltdc, XSIZE_PHYS, 1);
#endif
__HAL_DSI_WRAPPER_ENABLE(&hdsi); 
 801e522:	9403      	str	r4, [sp, #12]
 801e524:	682b      	ldr	r3, [r5, #0]
 801e526:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801e52a:	f042 0208 	orr.w	r2, r2, #8
 801e52e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 801e532:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e536:	f003 0308 	and.w	r3, r3, #8
 801e53a:	9303      	str	r3, [sp, #12]
 801e53c:	9b03      	ldr	r3, [sp, #12]
  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[0]);
 801e53e:	4e46      	ldr	r6, [pc, #280]	; (801e658 <LCD_X_Config+0x1dc>)
 801e540:	9601      	str	r6, [sp, #4]
 801e542:	232a      	movs	r3, #42	; 0x2a
 801e544:	9300      	str	r3, [sp, #0]
 801e546:	2304      	movs	r3, #4
 801e548:	2239      	movs	r2, #57	; 0x39
 801e54a:	4621      	mov	r1, r4
 801e54c:	4628      	mov	r0, r5
 801e54e:	f7f5 fa10 	bl	8013972 <HAL_DSI_LongWrite>
  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_PASET, pPage);
 801e552:	3610      	adds	r6, #16
 801e554:	9601      	str	r6, [sp, #4]
 801e556:	232b      	movs	r3, #43	; 0x2b
 801e558:	9300      	str	r3, [sp, #0]
 801e55a:	2304      	movs	r3, #4
 801e55c:	2239      	movs	r2, #57	; 0x39
 801e55e:	4621      	mov	r1, r4
 801e560:	4628      	mov	r0, r5
 801e562:	f7f5 fa06 	bl	8013972 <HAL_DSI_LongWrite>
  HAL_Delay(20);
 801e566:	2014      	movs	r0, #20
 801e568:	f7f4 fa62 	bl	8012a30 <HAL_Delay>
  LCD_ReqTear();
 801e56c:	f7ff ff66 	bl	801e43c <LCD_ReqTear>
  /* Send Display off DCS Command to display */
  HAL_DSI_ShortWrite(&(hdsi),
 801e570:	9400      	str	r4, [sp, #0]
 801e572:	2329      	movs	r3, #41	; 0x29
 801e574:	2215      	movs	r2, #21
 801e576:	4621      	mov	r1, r4
 801e578:	4628      	mov	r0, r5
 801e57a:	f7f5 f9e7 	bl	801394c <HAL_DSI_ShortWrite>
                     0,
                     DSI_DCS_SHORT_PKT_WRITE_P1,
                     OTM8009A_CMD_DISPON,
                     0x00);
}
 801e57e:	b004      	add	sp, #16
 801e580:	bd70      	pop	{r4, r5, r6, pc}
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
 801e582:	2102      	movs	r1, #2
 801e584:	4620      	mov	r0, r4
 801e586:	f002 ffc3 	bl	8021510 <GUI_MULTIBUF_ConfigEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 801e58a:	3401      	adds	r4, #1
 801e58c:	e779      	b.n	801e482 <LCD_X_Config+0x6>
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 801e58e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801e592:	f44f 7148 	mov.w	r1, #800	; 0x320
 801e596:	2000      	movs	r0, #0
 801e598:	f005 fd86 	bl	80240a8 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 801e59c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801e5a0:	f44f 7148 	mov.w	r1, #800	; 0x320
 801e5a4:	2000      	movs	r0, #0
 801e5a6:	f005 fdb1 	bl	802410c <LCD_SetVSizeEx>
 801e5aa:	e785      	b.n	801e4b8 <LCD_X_Config+0x3c>
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 801e5ac:	00e3      	lsls	r3, r4, #3
 801e5ae:	1b1b      	subs	r3, r3, r4
 801e5b0:	009a      	lsls	r2, r3, #2
 801e5b2:	4d1a      	ldr	r5, [pc, #104]	; (801e61c <LCD_X_Config+0x1a0>)
 801e5b4:	4415      	add	r5, r2
 801e5b6:	4b17      	ldr	r3, [pc, #92]	; (801e614 <LCD_X_Config+0x198>)
 801e5b8:	61eb      	str	r3, [r5, #28]
    layer_prop[i].pending_buffer = -1;
 801e5ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e5be:	60ab      	str	r3, [r5, #8]
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 801e5c0:	4620      	mov	r0, r4
 801e5c2:	f004 fef7 	bl	80233b4 <LCD_GetBitsPerPixelEx>
 801e5c6:	10c0      	asrs	r0, r0, #3
 801e5c8:	61a8      	str	r0, [r5, #24]
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 801e5ca:	4a24      	ldr	r2, [pc, #144]	; (801e65c <LCD_X_Config+0x1e0>)
 801e5cc:	2121      	movs	r1, #33	; 0x21
 801e5ce:	4620      	mov	r0, r4
 801e5d0:	f005 fd1c 	bl	802400c <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 801e5d4:	4a22      	ldr	r2, [pc, #136]	; (801e660 <LCD_X_Config+0x1e4>)
 801e5d6:	2123      	movs	r1, #35	; 0x23
 801e5d8:	4620      	mov	r0, r4
 801e5da:	f005 fd17 	bl	802400c <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 801e5de:	4a21      	ldr	r2, [pc, #132]	; (801e664 <LCD_X_Config+0x1e8>)
 801e5e0:	2119      	movs	r1, #25
 801e5e2:	4620      	mov	r0, r4
 801e5e4:	f005 fd12 	bl	802400c <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))LCD_LL_DrawBitmap8bpp);
 801e5e8:	4a1f      	ldr	r2, [pc, #124]	; (801e668 <LCD_X_Config+0x1ec>)
 801e5ea:	2125      	movs	r1, #37	; 0x25
 801e5ec:	4620      	mov	r0, r4
 801e5ee:	f005 fd0d 	bl	802400c <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))LCD_LL_DrawBitmap16bpp);  
 801e5f2:	4a1e      	ldr	r2, [pc, #120]	; (801e66c <LCD_X_Config+0x1f0>)
 801e5f4:	2124      	movs	r1, #36	; 0x24
 801e5f6:	4620      	mov	r0, r4
 801e5f8:	f005 fd08 	bl	802400c <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))LCD_LL_DrawBitmap32bpp);
 801e5fc:	4a1c      	ldr	r2, [pc, #112]	; (801e670 <LCD_X_Config+0x1f4>)
 801e5fe:	2128      	movs	r1, #40	; 0x28
 801e600:	4620      	mov	r0, r4
 801e602:	f005 fd03 	bl	802400c <LCD_SetDevFunc>
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 801e606:	6869      	ldr	r1, [r5, #4]
 801e608:	4620      	mov	r0, r4
 801e60a:	f005 fd67 	bl	80240dc <LCD_SetVRAMAddrEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 801e60e:	3401      	adds	r4, #1
 801e610:	e757      	b.n	801e4c2 <LCD_X_Config+0x46>
 801e612:	bf00      	nop
 801e614:	08036344 	.word	0x08036344
 801e618:	080363f8 	.word	0x080363f8
 801e61c:	2002e108 	.word	0x2002e108
 801e620:	0801dd5d 	.word	0x0801dd5d
 801e624:	0801ddc1 	.word	0x0801ddc1
 801e628:	0801dd4d 	.word	0x0801dd4d
 801e62c:	0801ddb1 	.word	0x0801ddb1
 801e630:	0801dd3d 	.word	0x0801dd3d
 801e634:	0801dda1 	.word	0x0801dda1
 801e638:	0801dd2d 	.word	0x0801dd2d
 801e63c:	0801dd91 	.word	0x0801dd91
 801e640:	0801dd1d 	.word	0x0801dd1d
 801e644:	0801dd81 	.word	0x0801dd81
 801e648:	0801df61 	.word	0x0801df61
 801e64c:	0801dfd9 	.word	0x0801dfd9
 801e650:	20030668 	.word	0x20030668
 801e654:	20030684 	.word	0x20030684
 801e658:	20000098 	.word	0x20000098
 801e65c:	0801ddfd 	.word	0x0801ddfd
 801e660:	0801de45 	.word	0x0801de45
 801e664:	0801e15d 	.word	0x0801e15d
 801e668:	0801e0f1 	.word	0x0801e0f1
 801e66c:	0801e00d 	.word	0x0801e00d
 801e670:	0801e079 	.word	0x0801e079

0801e674 <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
{
 801e674:	b570      	push	{r4, r5, r6, lr}
 801e676:	b088      	sub	sp, #32
 801e678:	4604      	mov	r4, r0
 801e67a:	4615      	mov	r5, r2
  U32 addr;
  int xPos, yPos;
  U32 Color;

  //LCD_X_SHOWBUFFER_INFO * p;  
  switch (Cmd) 
 801e67c:	3903      	subs	r1, #3
 801e67e:	290b      	cmp	r1, #11
 801e680:	f200 8119 	bhi.w	801e8b6 <LCD_X_DisplayDriver+0x242>
 801e684:	e8df f011 	tbh	[pc, r1, lsl #1]
 801e688:	0117000c 	.word	0x0117000c
 801e68c:	0073006b 	.word	0x0073006b
 801e690:	00d600de 	.word	0x00d600de
 801e694:	00f3007b 	.word	0x00f3007b
 801e698:	00fa0117 	.word	0x00fa0117
 801e69c:	00210107 	.word	0x00210107
  {   
  case LCD_X_SETORG: 
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 801e6a0:	00c2      	lsls	r2, r0, #3
 801e6a2:	1a12      	subs	r2, r2, r0
 801e6a4:	0091      	lsls	r1, r2, #2
 801e6a6:	4b85      	ldr	r3, [pc, #532]	; (801e8bc <LCD_X_DisplayDriver+0x248>)
 801e6a8:	440b      	add	r3, r1
 801e6aa:	685e      	ldr	r6, [r3, #4]
 801e6ac:	6868      	ldr	r0, [r5, #4]
 801e6ae:	691a      	ldr	r2, [r3, #16]
 801e6b0:	fb02 f000 	mul.w	r0, r2, r0
 801e6b4:	6999      	ldr	r1, [r3, #24]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 801e6b6:	4622      	mov	r2, r4
 801e6b8:	fb01 6100 	mla	r1, r1, r0, r6
 801e6bc:	4880      	ldr	r0, [pc, #512]	; (801e8c0 <LCD_X_DisplayDriver+0x24c>)
 801e6be:	f7f6 fe79 	bl	80153b4 <HAL_LTDC_SetAddress>
  int r = 0;
 801e6c2:	2500      	movs	r5, #0

  default:
    r = -1;
  }
  return r;
}
 801e6c4:	4628      	mov	r0, r5
 801e6c6:	b008      	add	sp, #32
 801e6c8:	bd70      	pop	{r4, r5, r6, pc}
             __DSI_UNMASK_TE();
 801e6ca:	4a7e      	ldr	r2, [pc, #504]	; (801e8c4 <LCD_X_DisplayDriver+0x250>)
 801e6cc:	6a13      	ldr	r3, [r2, #32]
 801e6ce:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801e6d2:	6213      	str	r3, [r2, #32]
       LCD_Refershing = 1;
 801e6d4:	4b79      	ldr	r3, [pc, #484]	; (801e8bc <LCD_X_DisplayDriver+0x248>)
 801e6d6:	2201      	movs	r2, #1
 801e6d8:	621a      	str	r2, [r3, #32]
       while(LCD_Refershing);
 801e6da:	4b78      	ldr	r3, [pc, #480]	; (801e8bc <LCD_X_DisplayDriver+0x248>)
 801e6dc:	6a1b      	ldr	r3, [r3, #32]
 801e6de:	2b00      	cmp	r3, #0
 801e6e0:	d1fb      	bne.n	801e6da <LCD_X_DisplayDriver+0x66>
      LCD_Addr[LayerIndex] = layer_prop[LayerIndex].address + layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel * p->Index;
 801e6e2:	00e2      	lsls	r2, r4, #3
 801e6e4:	1b12      	subs	r2, r2, r4
 801e6e6:	0091      	lsls	r1, r2, #2
 801e6e8:	4b74      	ldr	r3, [pc, #464]	; (801e8bc <LCD_X_DisplayDriver+0x248>)
 801e6ea:	440b      	add	r3, r1
 801e6ec:	6858      	ldr	r0, [r3, #4]
 801e6ee:	691a      	ldr	r2, [r3, #16]
 801e6f0:	6959      	ldr	r1, [r3, #20]
 801e6f2:	fb01 f202 	mul.w	r2, r1, r2
 801e6f6:	6999      	ldr	r1, [r3, #24]
 801e6f8:	fb01 f102 	mul.w	r1, r1, r2
 801e6fc:	682a      	ldr	r2, [r5, #0]
 801e6fe:	fb02 0201 	mla	r2, r2, r1, r0
 801e702:	4971      	ldr	r1, [pc, #452]	; (801e8c8 <LCD_X_DisplayDriver+0x254>)
 801e704:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e708:	60ca      	str	r2, [r1, #12]
      layer_prop[LayerIndex].pending_buffer = p->Index;
 801e70a:	6829      	ldr	r1, [r5, #0]
 801e70c:	6099      	str	r1, [r3, #8]
     __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 801e70e:	2500      	movs	r5, #0
 801e710:	9500      	str	r5, [sp, #0]
 801e712:	4b6e      	ldr	r3, [pc, #440]	; (801e8cc <LCD_X_DisplayDriver+0x258>)
 801e714:	681b      	ldr	r3, [r3, #0]
 801e716:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 801e71a:	f021 0108 	bic.w	r1, r1, #8
 801e71e:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
 801e722:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 801e726:	f001 0108 	and.w	r1, r1, #8
 801e72a:	9100      	str	r1, [sp, #0]
 801e72c:	9900      	ldr	r1, [sp, #0]
      LTDC_LAYER(&hltdc, LayerIndex)->CFBAR  = LCD_Addr[LayerIndex];
 801e72e:	4964      	ldr	r1, [pc, #400]	; (801e8c0 <LCD_X_DisplayDriver+0x24c>)
 801e730:	6809      	ldr	r1, [r1, #0]
 801e732:	eb01 14c4 	add.w	r4, r1, r4, lsl #7
 801e736:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 801e73a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801e73c:	f042 0201 	orr.w	r2, r2, #1
 801e740:	624a      	str	r2, [r1, #36]	; 0x24
    __HAL_DSI_WRAPPER_ENABLE(&hdsi);  	
 801e742:	9501      	str	r5, [sp, #4]
 801e744:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801e748:	f042 0208 	orr.w	r2, r2, #8
 801e74c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 801e750:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e754:	f003 0308 	and.w	r3, r3, #8
 801e758:	9301      	str	r3, [sp, #4]
 801e75a:	9b01      	ldr	r3, [sp, #4]
    break;
 801e75c:	e7b2      	b.n	801e6c4 <LCD_X_DisplayDriver+0x50>
    __HAL_LTDC_ENABLE(&hltdc);
 801e75e:	4b58      	ldr	r3, [pc, #352]	; (801e8c0 <LCD_X_DisplayDriver+0x24c>)
 801e760:	681a      	ldr	r2, [r3, #0]
 801e762:	6993      	ldr	r3, [r2, #24]
 801e764:	f043 0301 	orr.w	r3, r3, #1
 801e768:	6193      	str	r3, [r2, #24]
  int r = 0;
 801e76a:	2500      	movs	r5, #0
    break;
 801e76c:	e7aa      	b.n	801e6c4 <LCD_X_DisplayDriver+0x50>
    __HAL_LTDC_DISABLE(&hltdc);
 801e76e:	4b54      	ldr	r3, [pc, #336]	; (801e8c0 <LCD_X_DisplayDriver+0x24c>)
 801e770:	681a      	ldr	r2, [r3, #0]
 801e772:	6993      	ldr	r3, [r2, #24]
 801e774:	f023 0301 	bic.w	r3, r3, #1
 801e778:	6193      	str	r3, [r2, #24]
  int r = 0;
 801e77a:	2500      	movs	r5, #0
    break;
 801e77c:	e7a2      	b.n	801e6c4 <LCD_X_DisplayDriver+0x50>
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 801e77e:	6813      	ldr	r3, [r2, #0]
 801e780:	2b01      	cmp	r3, #1
 801e782:	d030      	beq.n	801e7e6 <LCD_X_DisplayDriver+0x172>
      __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 801e784:	2000      	movs	r0, #0
 801e786:	9004      	str	r0, [sp, #16]
 801e788:	4950      	ldr	r1, [pc, #320]	; (801e8cc <LCD_X_DisplayDriver+0x258>)
 801e78a:	680b      	ldr	r3, [r1, #0]
 801e78c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801e790:	f022 0208 	bic.w	r2, r2, #8
 801e794:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 801e798:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801e79c:	f002 0208 	and.w	r2, r2, #8
 801e7a0:	9204      	str	r2, [sp, #16]
 801e7a2:	9a04      	ldr	r2, [sp, #16]
      __HAL_LTDC_LAYER_DISABLE(&hdsi, LayerIndex); 
 801e7a4:	eb03 14c4 	add.w	r4, r3, r4, lsl #7
 801e7a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801e7ac:	f023 0301 	bic.w	r3, r3, #1
 801e7b0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 801e7b4:	9005      	str	r0, [sp, #20]
 801e7b6:	680b      	ldr	r3, [r1, #0]
 801e7b8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801e7bc:	f042 0208 	orr.w	r2, r2, #8
 801e7c0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 801e7c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e7c8:	f003 0308 	and.w	r3, r3, #8
 801e7cc:	9305      	str	r3, [sp, #20]
 801e7ce:	9b05      	ldr	r3, [sp, #20]
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);  
 801e7d0:	4b3b      	ldr	r3, [pc, #236]	; (801e8c0 <LCD_X_DisplayDriver+0x24c>)
 801e7d2:	681a      	ldr	r2, [r3, #0]
 801e7d4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801e7d6:	f043 0301 	orr.w	r3, r3, #1
 801e7da:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_DSI_Refresh(&hdsi); 
 801e7dc:	483b      	ldr	r0, [pc, #236]	; (801e8cc <LCD_X_DisplayDriver+0x258>)
 801e7de:	f7f5 f8a3 	bl	8013928 <HAL_DSI_Refresh>
  int r = 0;
 801e7e2:	2500      	movs	r5, #0
    break;
 801e7e4:	e76e      	b.n	801e6c4 <LCD_X_DisplayDriver+0x50>
      __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 801e7e6:	2000      	movs	r0, #0
 801e7e8:	9002      	str	r0, [sp, #8]
 801e7ea:	4938      	ldr	r1, [pc, #224]	; (801e8cc <LCD_X_DisplayDriver+0x258>)
 801e7ec:	680b      	ldr	r3, [r1, #0]
 801e7ee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801e7f2:	f022 0208 	bic.w	r2, r2, #8
 801e7f6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 801e7fa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801e7fe:	f002 0208 	and.w	r2, r2, #8
 801e802:	9202      	str	r2, [sp, #8]
 801e804:	9a02      	ldr	r2, [sp, #8]
      __HAL_LTDC_LAYER_ENABLE(&hdsi, LayerIndex); 
 801e806:	eb03 14c4 	add.w	r4, r3, r4, lsl #7
 801e80a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 801e80e:	f043 0301 	orr.w	r3, r3, #1
 801e812:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 801e816:	9003      	str	r0, [sp, #12]
 801e818:	680b      	ldr	r3, [r1, #0]
 801e81a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801e81e:	f042 0208 	orr.w	r2, r2, #8
 801e822:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 801e826:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e82a:	f003 0308 	and.w	r3, r3, #8
 801e82e:	9303      	str	r3, [sp, #12]
 801e830:	9b03      	ldr	r3, [sp, #12]
 801e832:	e7cd      	b.n	801e7d0 <LCD_X_DisplayDriver+0x15c>
    HAL_LTDC_SetWindowPosition(&hltdc, 
 801e834:	4603      	mov	r3, r0
 801e836:	6852      	ldr	r2, [r2, #4]
 801e838:	6829      	ldr	r1, [r5, #0]
 801e83a:	4821      	ldr	r0, [pc, #132]	; (801e8c0 <LCD_X_DisplayDriver+0x24c>)
 801e83c:	f7f6 fd70 	bl	8015320 <HAL_LTDC_SetWindowPosition>
  int r = 0;
 801e840:	2500      	movs	r5, #0
    break;
 801e842:	e73f      	b.n	801e6c4 <LCD_X_DisplayDriver+0x50>
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 801e844:	aa06      	add	r2, sp, #24
 801e846:	a907      	add	r1, sp, #28
 801e848:	f002 feb6 	bl	80215b8 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 801e84c:	6828      	ldr	r0, [r5, #0]
 801e84e:	00e2      	lsls	r2, r4, #3
 801e850:	1b12      	subs	r2, r2, r4
 801e852:	0091      	lsls	r1, r2, #2
 801e854:	4b19      	ldr	r3, [pc, #100]	; (801e8bc <LCD_X_DisplayDriver+0x248>)
 801e856:	440b      	add	r3, r1
 801e858:	6118      	str	r0, [r3, #16]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 801e85a:	686a      	ldr	r2, [r5, #4]
 801e85c:	615a      	str	r2, [r3, #20]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 801e85e:	4623      	mov	r3, r4
 801e860:	9a06      	ldr	r2, [sp, #24]
 801e862:	9907      	ldr	r1, [sp, #28]
 801e864:	4816      	ldr	r0, [pc, #88]	; (801e8c0 <LCD_X_DisplayDriver+0x24c>)
 801e866:	f7f6 fd5b 	bl	8015320 <HAL_LTDC_SetWindowPosition>
  int r = 0;
 801e86a:	2500      	movs	r5, #0
    break;
 801e86c:	e72a      	b.n	801e6c4 <LCD_X_DisplayDriver+0x50>
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 801e86e:	4602      	mov	r2, r0
 801e870:	6829      	ldr	r1, [r5, #0]
 801e872:	4813      	ldr	r0, [pc, #76]	; (801e8c0 <LCD_X_DisplayDriver+0x24c>)
 801e874:	f7f6 fd7d 	bl	8015372 <HAL_LTDC_SetAlpha>
  int r = 0;
 801e878:	2500      	movs	r5, #0
    break;
 801e87a:	e723      	b.n	801e6c4 <LCD_X_DisplayDriver+0x50>
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 801e87c:	6815      	ldr	r5, [r2, #0]
 801e87e:	b12d      	cbz	r5, 801e88c <LCD_X_DisplayDriver+0x218>
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 801e880:	4601      	mov	r1, r0
 801e882:	480f      	ldr	r0, [pc, #60]	; (801e8c0 <LCD_X_DisplayDriver+0x24c>)
 801e884:	f7f6 fd10 	bl	80152a8 <HAL_LTDC_EnableColorKeying>
  int r = 0;
 801e888:	2500      	movs	r5, #0
 801e88a:	e71b      	b.n	801e6c4 <LCD_X_DisplayDriver+0x50>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
 801e88c:	4601      	mov	r1, r0
 801e88e:	480c      	ldr	r0, [pc, #48]	; (801e8c0 <LCD_X_DisplayDriver+0x24c>)
 801e890:	f7f6 fd28 	bl	80152e4 <HAL_LTDC_DisableColorKeying>
 801e894:	e716      	b.n	801e6c4 <LCD_X_DisplayDriver+0x50>
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 801e896:	6813      	ldr	r3, [r2, #0]
 801e898:	f3c3 4107 	ubfx	r1, r3, #16, #8
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 801e89c:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 801e8a0:	4311      	orrs	r1, r2
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 801e8a2:	041b      	lsls	r3, r3, #16
 801e8a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 801e8a8:	4602      	mov	r2, r0
 801e8aa:	4319      	orrs	r1, r3
 801e8ac:	4804      	ldr	r0, [pc, #16]	; (801e8c0 <LCD_X_DisplayDriver+0x24c>)
 801e8ae:	f7f6 fcd7 	bl	8015260 <HAL_LTDC_ConfigColorKeying>
  int r = 0;
 801e8b2:	2500      	movs	r5, #0
    break;
 801e8b4:	e706      	b.n	801e6c4 <LCD_X_DisplayDriver+0x50>
    r = -1;
 801e8b6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  return r;
 801e8ba:	e703      	b.n	801e6c4 <LCD_X_DisplayDriver+0x50>
 801e8bc:	2002e108 	.word	0x2002e108
 801e8c0:	20030684 	.word	0x20030684
 801e8c4:	40022400 	.word	0x40022400
 801e8c8:	20000098 	.word	0x20000098
 801e8cc:	20030668 	.word	0x20030668

0801e8d0 <GRAPHICS_HW_Init>:

void GRAPHICS_HW_Init(void)
{ 
 801e8d0:	b508      	push	{r3, lr}
  MX_FMC_Init(); 
 801e8d2:	f7fe ff61 	bl	801d798 <MX_FMC_Init>
  MX_SDRAM_InitEx();
 801e8d6:	f7fe ff91 	bl	801d7fc <MX_SDRAM_InitEx>
  LCD_LL_Reset();
 801e8da:	f7ff fc8f 	bl	801e1fc <LCD_LL_Reset>
  MX_LCD_Init();      /* LTDC struc, layer struct */
 801e8de:	f7fe ff05 	bl	801d6ec <MX_LCD_Init>
  MX_DMA2D_Init();
 801e8e2:	f7fe fee3 	bl	801d6ac <MX_DMA2D_Init>
  DMA2D_Init();
 801e8e6:	f7ff fcbf 	bl	801e268 <DMA2D_Init>
  MX_DSI_Init();
 801e8ea:	f7fe ffdb 	bl	801d8a4 <MX_DSI_Init>
}
 801e8ee:	bd08      	pop	{r3, pc}

0801e8f0 <GRAPHICS_Init>:

void GRAPHICS_Init(void)
{
 801e8f0:	b508      	push	{r3, lr}
  /* Initialize the GUI */
  GUI_Init();
 801e8f2:	f001 feb1 	bl	8020658 <GUI_Init>

   WM_MULTIBUF_Enable(1);
 801e8f6:	2001      	movs	r0, #1
 801e8f8:	f00a fdba 	bl	8029470 <WM_MULTIBUF_Enable>

  /* Activate the use of memory device feature */
   /* USER CODE BEGIN WM_SetCreateFlags */
     //WM_SetCreateFlags(WM_CF_MEMDEV);
  /* USER CODE END WM_SetCreateFlags */
}
 801e8fc:	bd08      	pop	{r3, pc}
	...

0801e900 <I2C1_MspInit>:
/******************************* I2C Routines *********************************/
/**
  * @brief  Initializes I2C MSP.
  */
static void I2C1_MspInit(void)
{
 801e900:	b570      	push	{r4, r5, r6, lr}
 801e902:	b088      	sub	sp, #32
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 801e904:	2500      	movs	r5, #0
 801e906:	9501      	str	r5, [sp, #4]
 801e908:	4c21      	ldr	r4, [pc, #132]	; (801e990 <I2C1_MspInit+0x90>)
 801e90a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801e90c:	f043 0302 	orr.w	r3, r3, #2
 801e910:	6323      	str	r3, [r4, #48]	; 0x30
 801e912:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801e914:	f003 0302 	and.w	r3, r3, #2
 801e918:	9301      	str	r3, [sp, #4]
 801e91a:	9b01      	ldr	r3, [sp, #4]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C1_SCL_PIN;
 801e91c:	f44f 7380 	mov.w	r3, #256	; 0x100
 801e920:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 801e922:	2312      	movs	r3, #18
 801e924:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 801e926:	9505      	str	r5, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 801e928:	2302      	movs	r3, #2
 801e92a:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Alternate = DISCO_I2C1_SCL_SDA_AF;
 801e92c:	2304      	movs	r3, #4
 801e92e:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 801e930:	4e18      	ldr	r6, [pc, #96]	; (801e994 <I2C1_MspInit+0x94>)
 801e932:	a903      	add	r1, sp, #12
 801e934:	4630      	mov	r0, r6
 801e936:	f7f5 f88d 	bl	8013a54 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C1_SDA_PIN;
 801e93a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801e93e:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 801e940:	a903      	add	r1, sp, #12
 801e942:	4630      	mov	r0, r6
 801e944:	f7f5 f886 	bl	8013a54 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCO_I2C1_CLK_ENABLE();
 801e948:	9502      	str	r5, [sp, #8]
 801e94a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e94c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801e950:	6423      	str	r3, [r4, #64]	; 0x40
 801e952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e958:	9302      	str	r3, [sp, #8]
 801e95a:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  DISCO_I2C1_FORCE_RESET();
 801e95c:	6a23      	ldr	r3, [r4, #32]
 801e95e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801e962:	6223      	str	r3, [r4, #32]

  /* Release the I2C peripheral clock reset */
  DISCO_I2C1_RELEASE_RESET();
 801e964:	6a23      	ldr	r3, [r4, #32]
 801e966:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801e96a:	6223      	str	r3, [r4, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C1_EV_IRQn, 0x05, 0);
 801e96c:	462a      	mov	r2, r5
 801e96e:	2105      	movs	r1, #5
 801e970:	201f      	movs	r0, #31
 801e972:	f7f4 f883 	bl	8012a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_EV_IRQn);
 801e976:	201f      	movs	r0, #31
 801e978:	f7f4 f8b4 	bl	8012ae4 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C1_ER_IRQn, 0x05, 0);
 801e97c:	462a      	mov	r2, r5
 801e97e:	2105      	movs	r1, #5
 801e980:	2020      	movs	r0, #32
 801e982:	f7f4 f87b 	bl	8012a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_ER_IRQn);
 801e986:	2020      	movs	r0, #32
 801e988:	f7f4 f8ac 	bl	8012ae4 <HAL_NVIC_EnableIRQ>
}
 801e98c:	b008      	add	sp, #32
 801e98e:	bd70      	pop	{r4, r5, r6, pc}
 801e990:	40023800 	.word	0x40023800
 801e994:	40020400 	.word	0x40020400

0801e998 <I2C1_Init>:

/**
  * @brief  Initializes I2C HAL.
  */
static void I2C1_Init(void)
{
 801e998:	b510      	push	{r4, lr}
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 801e99a:	480d      	ldr	r0, [pc, #52]	; (801e9d0 <I2C1_Init+0x38>)
 801e99c:	f7f6 fa70 	bl	8014e80 <HAL_I2C_GetState>
 801e9a0:	b100      	cbz	r0, 801e9a4 <I2C1_Init+0xc>

    /* Init the I2C */
    I2C1_MspInit();
    HAL_I2C_Init(&heval_I2c1);
  }
}
 801e9a2:	bd10      	pop	{r4, pc}
    heval_I2c1.Instance = I2C1;
 801e9a4:	4c0b      	ldr	r4, [pc, #44]	; (801e9d4 <I2C1_Init+0x3c>)
 801e9a6:	4b0c      	ldr	r3, [pc, #48]	; (801e9d8 <I2C1_Init+0x40>)
 801e9a8:	6563      	str	r3, [r4, #84]	; 0x54
    heval_I2c1.Init.ClockSpeed      = I2C1_SCL_FREQ_KHZ;
 801e9aa:	4b0c      	ldr	r3, [pc, #48]	; (801e9dc <I2C1_Init+0x44>)
 801e9ac:	65a3      	str	r3, [r4, #88]	; 0x58
    heval_I2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 801e9ae:	2300      	movs	r3, #0
 801e9b0:	65e3      	str	r3, [r4, #92]	; 0x5c
    heval_I2c1.Init.OwnAddress1     = 0;
 801e9b2:	6623      	str	r3, [r4, #96]	; 0x60
    heval_I2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 801e9b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801e9b8:	6662      	str	r2, [r4, #100]	; 0x64
    heval_I2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801e9ba:	66a3      	str	r3, [r4, #104]	; 0x68
    heval_I2c1.Init.OwnAddress2     = 0;
 801e9bc:	66e3      	str	r3, [r4, #108]	; 0x6c
    heval_I2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801e9be:	6723      	str	r3, [r4, #112]	; 0x70
    heval_I2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 801e9c0:	6763      	str	r3, [r4, #116]	; 0x74
    I2C1_MspInit();
 801e9c2:	f7ff ff9d 	bl	801e900 <I2C1_MspInit>
    HAL_I2C_Init(&heval_I2c1);
 801e9c6:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801e9ca:	f7f5 fd27 	bl	801441c <HAL_I2C_Init>
}
 801e9ce:	e7e8      	b.n	801e9a2 <I2C1_Init+0xa>
 801e9d0:	2002e184 	.word	0x2002e184
 801e9d4:	2002e130 	.word	0x2002e130
 801e9d8:	40005400 	.word	0x40005400
 801e9dc:	00061a80 	.word	0x00061a80

0801e9e0 <I2C1_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address
  */
static void I2C1_Error(uint8_t Addr)
{
 801e9e0:	b508      	push	{r3, lr}
  /* De-initialize the I2C comunication bus */
  HAL_I2C_DeInit(&heval_I2c1);
 801e9e2:	4803      	ldr	r0, [pc, #12]	; (801e9f0 <I2C1_Error+0x10>)
 801e9e4:	f7f5 fdf4 	bl	80145d0 <HAL_I2C_DeInit>

  /* Re-Initiaize the I2C comunication bus */
  I2C1_Init();
 801e9e8:	f7ff ffd6 	bl	801e998 <I2C1_Init>
}
 801e9ec:	bd08      	pop	{r3, pc}
 801e9ee:	bf00      	nop
 801e9f0:	2002e184 	.word	0x2002e184

0801e9f4 <I2C1_Write>:
{
 801e9f4:	b510      	push	{r4, lr}
 801e9f6:	b086      	sub	sp, #24
 801e9f8:	4604      	mov	r4, r0
 801e9fa:	a806      	add	r0, sp, #24
 801e9fc:	f800 2d01 	strb.w	r2, [r0, #-1]!
  status = HAL_I2C_Mem_Write(&heval_I2c1,
 801ea00:	2364      	movs	r3, #100	; 0x64
 801ea02:	9302      	str	r3, [sp, #8]
 801ea04:	2301      	movs	r3, #1
 801ea06:	9301      	str	r3, [sp, #4]
 801ea08:	9000      	str	r0, [sp, #0]
 801ea0a:	460a      	mov	r2, r1
 801ea0c:	4621      	mov	r1, r4
 801ea0e:	4805      	ldr	r0, [pc, #20]	; (801ea24 <I2C1_Write+0x30>)
 801ea10:	f7f6 f81a 	bl	8014a48 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 801ea14:	b908      	cbnz	r0, 801ea1a <I2C1_Write+0x26>
}
 801ea16:	b006      	add	sp, #24
 801ea18:	bd10      	pop	{r4, pc}
    I2C1_Error(Addr);
 801ea1a:	4620      	mov	r0, r4
 801ea1c:	f7ff ffe0 	bl	801e9e0 <I2C1_Error>
}
 801ea20:	e7f9      	b.n	801ea16 <I2C1_Write+0x22>
 801ea22:	bf00      	nop
 801ea24:	2002e184 	.word	0x2002e184

0801ea28 <I2C1_ReadMultiple>:
{
 801ea28:	b530      	push	{r4, r5, lr}
 801ea2a:	b085      	sub	sp, #20
 801ea2c:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read(&heval_I2c1,
 801ea2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801ea32:	9002      	str	r0, [sp, #8]
 801ea34:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 801ea38:	9001      	str	r0, [sp, #4]
 801ea3a:	9300      	str	r3, [sp, #0]
 801ea3c:	4613      	mov	r3, r2
 801ea3e:	460a      	mov	r2, r1
 801ea40:	4621      	mov	r1, r4
 801ea42:	4806      	ldr	r0, [pc, #24]	; (801ea5c <I2C1_ReadMultiple+0x34>)
 801ea44:	f7f6 f8b4 	bl	8014bb0 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 801ea48:	4605      	mov	r5, r0
 801ea4a:	b910      	cbnz	r0, 801ea52 <I2C1_ReadMultiple+0x2a>
}
 801ea4c:	4628      	mov	r0, r5
 801ea4e:	b005      	add	sp, #20
 801ea50:	bd30      	pop	{r4, r5, pc}
    I2C1_Error(Addr);
 801ea52:	4620      	mov	r0, r4
 801ea54:	f7ff ffc4 	bl	801e9e0 <I2C1_Error>
 801ea58:	e7f8      	b.n	801ea4c <I2C1_ReadMultiple+0x24>
 801ea5a:	bf00      	nop
 801ea5c:	2002e184 	.word	0x2002e184

0801ea60 <I2C1_Read>:
{
 801ea60:	b510      	push	{r4, lr}
 801ea62:	b086      	sub	sp, #24
 801ea64:	4604      	mov	r4, r0
  uint8_t Value = 0;
 801ea66:	aa06      	add	r2, sp, #24
 801ea68:	2300      	movs	r3, #0
 801ea6a:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(&heval_I2c1,
 801ea6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801ea72:	9302      	str	r3, [sp, #8]
 801ea74:	2301      	movs	r3, #1
 801ea76:	9301      	str	r3, [sp, #4]
 801ea78:	9200      	str	r2, [sp, #0]
 801ea7a:	460a      	mov	r2, r1
 801ea7c:	4601      	mov	r1, r0
 801ea7e:	4806      	ldr	r0, [pc, #24]	; (801ea98 <I2C1_Read+0x38>)
 801ea80:	f7f6 f896 	bl	8014bb0 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 801ea84:	b918      	cbnz	r0, 801ea8e <I2C1_Read+0x2e>
}
 801ea86:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801ea8a:	b006      	add	sp, #24
 801ea8c:	bd10      	pop	{r4, pc}
    I2C1_Error(Addr);
 801ea8e:	4620      	mov	r0, r4
 801ea90:	f7ff ffa6 	bl	801e9e0 <I2C1_Error>
 801ea94:	e7f7      	b.n	801ea86 <I2C1_Read+0x26>
 801ea96:	bf00      	nop
 801ea98:	2002e184 	.word	0x2002e184

0801ea9c <BSP_LED_Init>:
  if (Led <= LED4)
 801ea9c:	2803      	cmp	r0, #3
 801ea9e:	d853      	bhi.n	801eb48 <BSP_LED_Init+0xac>
{
 801eaa0:	b570      	push	{r4, r5, r6, lr}
 801eaa2:	b08a      	sub	sp, #40	; 0x28
    gpio_init_structure.Pin   = GPIO_PIN[Led];
 801eaa4:	4b29      	ldr	r3, [pc, #164]	; (801eb4c <BSP_LED_Init+0xb0>)
 801eaa6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801eaaa:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 801eaac:	2301      	movs	r3, #1
 801eaae:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 801eab0:	9307      	str	r3, [sp, #28]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 801eab2:	2303      	movs	r3, #3
 801eab4:	9308      	str	r3, [sp, #32]
    switch(Led)
 801eab6:	2803      	cmp	r0, #3
 801eab8:	d80f      	bhi.n	801eada <BSP_LED_Init+0x3e>
 801eaba:	e8df f000 	tbb	[pc, r0]
 801eabe:	1e02      	.short	0x1e02
 801eac0:	382b      	.short	0x382b
      LED1_GPIO_CLK_ENABLE();
 801eac2:	2300      	movs	r3, #0
 801eac4:	9301      	str	r3, [sp, #4]
 801eac6:	4b22      	ldr	r3, [pc, #136]	; (801eb50 <BSP_LED_Init+0xb4>)
 801eac8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801eaca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801eace:	631a      	str	r2, [r3, #48]	; 0x30
 801ead0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ead2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ead6:	9301      	str	r3, [sp, #4]
 801ead8:	9b01      	ldr	r3, [sp, #4]
 801eada:	4604      	mov	r4, r0
    HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 801eadc:	4e1b      	ldr	r6, [pc, #108]	; (801eb4c <BSP_LED_Init+0xb0>)
 801eade:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 801eae2:	a905      	add	r1, sp, #20
 801eae4:	6928      	ldr	r0, [r5, #16]
 801eae6:	f7f4 ffb5 	bl	8013a54 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 801eaea:	2201      	movs	r2, #1
 801eaec:	f836 1024 	ldrh.w	r1, [r6, r4, lsl #2]
 801eaf0:	6928      	ldr	r0, [r5, #16]
 801eaf2:	f7f5 f946 	bl	8013d82 <HAL_GPIO_WritePin>
}
 801eaf6:	b00a      	add	sp, #40	; 0x28
 801eaf8:	bd70      	pop	{r4, r5, r6, pc}
      LED2_GPIO_CLK_ENABLE();
 801eafa:	2300      	movs	r3, #0
 801eafc:	9302      	str	r3, [sp, #8]
 801eafe:	4b14      	ldr	r3, [pc, #80]	; (801eb50 <BSP_LED_Init+0xb4>)
 801eb00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801eb02:	f042 0208 	orr.w	r2, r2, #8
 801eb06:	631a      	str	r2, [r3, #48]	; 0x30
 801eb08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eb0a:	f003 0308 	and.w	r3, r3, #8
 801eb0e:	9302      	str	r3, [sp, #8]
 801eb10:	9b02      	ldr	r3, [sp, #8]
      break;
 801eb12:	e7e2      	b.n	801eada <BSP_LED_Init+0x3e>
      LED3_GPIO_CLK_ENABLE();
 801eb14:	2300      	movs	r3, #0
 801eb16:	9303      	str	r3, [sp, #12]
 801eb18:	4b0d      	ldr	r3, [pc, #52]	; (801eb50 <BSP_LED_Init+0xb4>)
 801eb1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801eb1c:	f042 0208 	orr.w	r2, r2, #8
 801eb20:	631a      	str	r2, [r3, #48]	; 0x30
 801eb22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eb24:	f003 0308 	and.w	r3, r3, #8
 801eb28:	9303      	str	r3, [sp, #12]
 801eb2a:	9b03      	ldr	r3, [sp, #12]
      break;
 801eb2c:	e7d5      	b.n	801eada <BSP_LED_Init+0x3e>
      LED4_GPIO_CLK_ENABLE();
 801eb2e:	2300      	movs	r3, #0
 801eb30:	9304      	str	r3, [sp, #16]
 801eb32:	4b07      	ldr	r3, [pc, #28]	; (801eb50 <BSP_LED_Init+0xb4>)
 801eb34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801eb36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801eb3a:	631a      	str	r2, [r3, #48]	; 0x30
 801eb3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801eb3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801eb42:	9304      	str	r3, [sp, #16]
 801eb44:	9b04      	ldr	r3, [sp, #16]
      break;
 801eb46:	e7c8      	b.n	801eada <BSP_LED_Init+0x3e>
 801eb48:	4770      	bx	lr
 801eb4a:	bf00      	nop
 801eb4c:	200000ac 	.word	0x200000ac
 801eb50:	40023800 	.word	0x40023800

0801eb54 <BSP_LED_Toggle>:
  if (Led <= LED4)
 801eb54:	2803      	cmp	r0, #3
 801eb56:	d900      	bls.n	801eb5a <BSP_LED_Toggle+0x6>
 801eb58:	4770      	bx	lr
{
 801eb5a:	b508      	push	{r3, lr}
     HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 801eb5c:	4b04      	ldr	r3, [pc, #16]	; (801eb70 <BSP_LED_Toggle+0x1c>)
 801eb5e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 801eb62:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 801eb66:	6910      	ldr	r0, [r2, #16]
 801eb68:	f7f5 f911 	bl	8013d8e <HAL_GPIO_TogglePin>
}
 801eb6c:	bd08      	pop	{r3, pc}
 801eb6e:	bf00      	nop
 801eb70:	200000ac 	.word	0x200000ac

0801eb74 <TS_IO_Init>:
/**
  * @brief  Initialize I2C communication
  *         channel from MCU to TouchScreen (TS).
  */
void TS_IO_Init(void)
{
 801eb74:	b508      	push	{r3, lr}
  I2C1_Init();
 801eb76:	f7ff ff0f 	bl	801e998 <I2C1_Init>
}
 801eb7a:	bd08      	pop	{r3, pc}

0801eb7c <TS_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 801eb7c:	b508      	push	{r3, lr}
  I2C1_Write(Addr, Reg, Value);
 801eb7e:	f7ff ff39 	bl	801e9f4 <I2C1_Write>
}
 801eb82:	bd08      	pop	{r3, pc}

0801eb84 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 801eb84:	b508      	push	{r3, lr}
  return I2C1_Read(Addr, Reg);
 801eb86:	f7ff ff6b 	bl	801ea60 <I2C1_Read>
}
 801eb8a:	bd08      	pop	{r3, pc}

0801eb8c <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 801eb8c:	b500      	push	{lr}
 801eb8e:	b083      	sub	sp, #12
 return I2C1_ReadMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 801eb90:	9300      	str	r3, [sp, #0]
 801eb92:	4613      	mov	r3, r2
 801eb94:	2201      	movs	r2, #1
 801eb96:	f7ff ff47 	bl	801ea28 <I2C1_ReadMultiple>
}
 801eb9a:	b003      	add	sp, #12
 801eb9c:	f85d fb04 	ldr.w	pc, [sp], #4

0801eba0 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 801eba0:	b570      	push	{r4, r5, r6, lr}
 801eba2:	4606      	mov	r6, r0
 801eba4:	460d      	mov	r5, r1
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 801eba6:	4c1a      	ldr	r4, [pc, #104]	; (801ec10 <BSP_TS_Init+0x70>)
 801eba8:	6823      	ldr	r3, [r4, #0]
 801ebaa:	4a1a      	ldr	r2, [pc, #104]	; (801ec14 <BSP_TS_Init+0x74>)
 801ebac:	7810      	ldrb	r0, [r2, #0]
 801ebae:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 801ebb0:	6863      	ldr	r3, [r4, #4]
 801ebb2:	2054      	movs	r0, #84	; 0x54
 801ebb4:	4798      	blx	r3
 801ebb6:	b2c4      	uxtb	r4, r0
  if(ts_id1 != FT6206_ID_VALUE)
 801ebb8:	2c11      	cmp	r4, #17
 801ebba:	d01d      	beq.n	801ebf8 <BSP_TS_Init+0x58>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 801ebbc:	4b14      	ldr	r3, [pc, #80]	; (801ec10 <BSP_TS_Init+0x70>)
 801ebbe:	685b      	ldr	r3, [r3, #4]
 801ebc0:	2070      	movs	r0, #112	; 0x70
 801ebc2:	4798      	blx	r3
 801ebc4:	b2c0      	uxtb	r0, r0
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 801ebc6:	4b13      	ldr	r3, [pc, #76]	; (801ec14 <BSP_TS_Init+0x74>)
 801ebc8:	2270      	movs	r2, #112	; 0x70
 801ebca:	701a      	strb	r2, [r3, #0]
    I2C_Address    = TS_I2C_ADDRESS;    
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 801ebcc:	2c11      	cmp	r4, #17
 801ebce:	d001      	beq.n	801ebd4 <BSP_TS_Init+0x34>
 801ebd0:	2811      	cmp	r0, #17
 801ebd2:	d11a      	bne.n	801ec0a <BSP_TS_Init+0x6a>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 801ebd4:	4b0f      	ldr	r3, [pc, #60]	; (801ec14 <BSP_TS_Init+0x74>)
 801ebd6:	4a0e      	ldr	r2, [pc, #56]	; (801ec10 <BSP_TS_Init+0x70>)
 801ebd8:	605a      	str	r2, [r3, #4]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 801ebda:	42ae      	cmp	r6, r5
 801ebdc:	d211      	bcs.n	801ec02 <BSP_TS_Init+0x62>
    {
      ts_orientation = TS_SWAP_NONE;                
 801ebde:	2201      	movs	r2, #1
 801ebe0:	721a      	strb	r2, [r3, #8]
    }

    if(ts_status == TS_OK)
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 801ebe2:	4b0b      	ldr	r3, [pc, #44]	; (801ec10 <BSP_TS_Init+0x70>)
 801ebe4:	689b      	ldr	r3, [r3, #8]
 801ebe6:	4c0b      	ldr	r4, [pc, #44]	; (801ec14 <BSP_TS_Init+0x74>)
 801ebe8:	7820      	ldrb	r0, [r4, #0]
 801ebea:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 801ebec:	6863      	ldr	r3, [r4, #4]
 801ebee:	68db      	ldr	r3, [r3, #12]
 801ebf0:	7820      	ldrb	r0, [r4, #0]
 801ebf2:	4798      	blx	r3
  uint8_t ts_status = TS_OK;
 801ebf4:	2000      	movs	r0, #0
  {
    ts_status = TS_DEVICE_NOT_FOUND;
  }

  return (ts_status);
}
 801ebf6:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Address    = TS_I2C_ADDRESS;    
 801ebf8:	4b06      	ldr	r3, [pc, #24]	; (801ec14 <BSP_TS_Init+0x74>)
 801ebfa:	2254      	movs	r2, #84	; 0x54
 801ebfc:	701a      	strb	r2, [r3, #0]
  uint8_t ts_id1, ts_id2 = 0;
 801ebfe:	2000      	movs	r0, #0
 801ec00:	e7e4      	b.n	801ebcc <BSP_TS_Init+0x2c>
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 801ec02:	4b04      	ldr	r3, [pc, #16]	; (801ec14 <BSP_TS_Init+0x74>)
 801ec04:	220c      	movs	r2, #12
 801ec06:	721a      	strb	r2, [r3, #8]
 801ec08:	e7eb      	b.n	801ebe2 <BSP_TS_Init+0x42>
    ts_status = TS_DEVICE_NOT_FOUND;
 801ec0a:	2003      	movs	r0, #3
 801ec0c:	e7f3      	b.n	801ebf6 <BSP_TS_Init+0x56>
 801ec0e:	bf00      	nop
 801ec10:	20000060 	.word	0x20000060
 801ec14:	2002e1d8 	.word	0x2002e1d8

0801ec18 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 801ec18:	b570      	push	{r4, r5, r6, lr}
 801ec1a:	b082      	sub	sp, #8
 801ec1c:	4605      	mov	r5, r0
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 801ec1e:	4b3d      	ldr	r3, [pc, #244]	; (801ed14 <BSP_TS_GetState+0xfc>)
 801ec20:	685a      	ldr	r2, [r3, #4]
 801ec22:	6912      	ldr	r2, [r2, #16]
 801ec24:	7818      	ldrb	r0, [r3, #0]
 801ec26:	4790      	blx	r2
 801ec28:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
 801ec2a:	2800      	cmp	r0, #0
 801ec2c:	d06e      	beq.n	801ed0c <BSP_TS_GetState+0xf4>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 801ec2e:	2400      	movs	r4, #0
 801ec30:	e011      	b.n	801ec56 <BSP_TS_GetState+0x3e>
      if(ts_orientation & TS_SWAP_Y)
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 801ec32:	b29b      	uxth	r3, r3
 801ec34:	1a5b      	subs	r3, r3, r1
 801ec36:	b29b      	uxth	r3, r3
 801ec38:	e051      	b.n	801ecde <BSP_TS_GetState+0xc6>
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 801ec3a:	b292      	uxth	r2, r2
 801ec3c:	1a12      	subs	r2, r2, r0
 801ec3e:	b292      	uxth	r2, r2
 801ec40:	e05b      	b.n	801ecfa <BSP_TS_GetState+0xe2>
        _x[index] = Raw_x[index];
        _y[index] = Raw_y[index];
      }


      TS_State->touchX[index] = _x[index];
 801ec42:	4b34      	ldr	r3, [pc, #208]	; (801ed14 <BSP_TS_GetState+0xfc>)
 801ec44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801ec48:	68d9      	ldr	r1, [r3, #12]
 801ec4a:	eb05 0244 	add.w	r2, r5, r4, lsl #1
 801ec4e:	8051      	strh	r1, [r2, #2]
      TS_State->touchY[index] = _y[index];
 801ec50:	695b      	ldr	r3, [r3, #20]
 801ec52:	80d3      	strh	r3, [r2, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 801ec54:	3401      	adds	r4, #1
 801ec56:	782b      	ldrb	r3, [r5, #0]
 801ec58:	42a3      	cmp	r3, r4
 801ec5a:	d957      	bls.n	801ed0c <BSP_TS_GetState+0xf4>
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 801ec5c:	4e2d      	ldr	r6, [pc, #180]	; (801ed14 <BSP_TS_GetState+0xfc>)
 801ec5e:	6873      	ldr	r3, [r6, #4]
 801ec60:	695b      	ldr	r3, [r3, #20]
 801ec62:	0061      	lsls	r1, r4, #1
 801ec64:	eb0d 0201 	add.w	r2, sp, r1
 801ec68:	a801      	add	r0, sp, #4
 801ec6a:	4401      	add	r1, r0
 801ec6c:	7830      	ldrb	r0, [r6, #0]
 801ec6e:	4798      	blx	r3
      if(ts_orientation & TS_SWAP_XY)
 801ec70:	7a33      	ldrb	r3, [r6, #8]
 801ec72:	f013 0f08 	tst.w	r3, #8
 801ec76:	d00a      	beq.n	801ec8e <BSP_TS_GetState+0x76>
        tmp = Raw_x[index];
 801ec78:	aa02      	add	r2, sp, #8
 801ec7a:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 801ec7e:	f832 1c04 	ldrh.w	r1, [r2, #-4]
        Raw_x[index] = Raw_y[index]; 
 801ec82:	f832 0c08 	ldrh.w	r0, [r2, #-8]
 801ec86:	f822 0c04 	strh.w	r0, [r2, #-4]
        Raw_y[index] = tmp;
 801ec8a:	f822 1c08 	strh.w	r1, [r2, #-8]
      if(ts_orientation & TS_SWAP_X)
 801ec8e:	f013 0f02 	tst.w	r3, #2
 801ec92:	d009      	beq.n	801eca8 <BSP_TS_GetState+0x90>
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 801ec94:	aa02      	add	r2, sp, #8
 801ec96:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 801ec9a:	f831 2c04 	ldrh.w	r2, [r1, #-4]
 801ec9e:	f5c2 7247 	rsb	r2, r2, #796	; 0x31c
 801eca2:	3203      	adds	r2, #3
 801eca4:	f821 2c04 	strh.w	r2, [r1, #-4]
      if(ts_orientation & TS_SWAP_Y)
 801eca8:	f013 0f04 	tst.w	r3, #4
 801ecac:	d009      	beq.n	801ecc2 <BSP_TS_GetState+0xaa>
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 801ecae:	ab02      	add	r3, sp, #8
 801ecb0:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 801ecb4:	f832 3c08 	ldrh.w	r3, [r2, #-8]
 801ecb8:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 801ecbc:	3301      	adds	r3, #1
 801ecbe:	f822 3c08 	strh.w	r3, [r2, #-8]
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 801ecc2:	ab02      	add	r3, sp, #8
 801ecc4:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801ecc8:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801eccc:	4b11      	ldr	r3, [pc, #68]	; (801ed14 <BSP_TS_GetState+0xfc>)
 801ecce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801ecd2:	68db      	ldr	r3, [r3, #12]
 801ecd4:	4299      	cmp	r1, r3
 801ecd6:	d9ac      	bls.n	801ec32 <BSP_TS_GetState+0x1a>
 801ecd8:	b29b      	uxth	r3, r3
 801ecda:	1acb      	subs	r3, r1, r3
 801ecdc:	b29b      	uxth	r3, r3
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 801ecde:	aa02      	add	r2, sp, #8
 801ece0:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 801ece4:	f832 0c08 	ldrh.w	r0, [r2, #-8]
 801ece8:	4a0a      	ldr	r2, [pc, #40]	; (801ed14 <BSP_TS_GetState+0xfc>)
 801ecea:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801ecee:	6952      	ldr	r2, [r2, #20]
 801ecf0:	4290      	cmp	r0, r2
 801ecf2:	d9a2      	bls.n	801ec3a <BSP_TS_GetState+0x22>
 801ecf4:	b292      	uxth	r2, r2
 801ecf6:	1a82      	subs	r2, r0, r2
 801ecf8:	b292      	uxth	r2, r2
      if ((xDiff + yDiff) > 5)
 801ecfa:	4413      	add	r3, r2
 801ecfc:	2b05      	cmp	r3, #5
 801ecfe:	dda0      	ble.n	801ec42 <BSP_TS_GetState+0x2a>
        _x[index] = Raw_x[index];
 801ed00:	4b04      	ldr	r3, [pc, #16]	; (801ed14 <BSP_TS_GetState+0xfc>)
 801ed02:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801ed06:	60d9      	str	r1, [r3, #12]
        _y[index] = Raw_y[index];
 801ed08:	6158      	str	r0, [r3, #20]
 801ed0a:	e79a      	b.n	801ec42 <BSP_TS_GetState+0x2a>
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
}
 801ed0c:	2000      	movs	r0, #0
 801ed0e:	b002      	add	sp, #8
 801ed10:	bd70      	pop	{r4, r5, r6, pc}
 801ed12:	bf00      	nop
 801ed14:	2002e1d8 	.word	0x2002e1d8

0801ed18 <Reset_Handler>:
 801ed18:	f8df d034 	ldr.w	sp, [pc, #52]	; 801ed50 <LoopFillZerobss+0x14>
 801ed1c:	2100      	movs	r1, #0
 801ed1e:	e003      	b.n	801ed28 <LoopCopyDataInit>

0801ed20 <CopyDataInit>:
 801ed20:	4b0c      	ldr	r3, [pc, #48]	; (801ed54 <LoopFillZerobss+0x18>)
 801ed22:	585b      	ldr	r3, [r3, r1]
 801ed24:	5043      	str	r3, [r0, r1]
 801ed26:	3104      	adds	r1, #4

0801ed28 <LoopCopyDataInit>:
 801ed28:	480b      	ldr	r0, [pc, #44]	; (801ed58 <LoopFillZerobss+0x1c>)
 801ed2a:	4b0c      	ldr	r3, [pc, #48]	; (801ed5c <LoopFillZerobss+0x20>)
 801ed2c:	1842      	adds	r2, r0, r1
 801ed2e:	429a      	cmp	r2, r3
 801ed30:	d3f6      	bcc.n	801ed20 <CopyDataInit>
 801ed32:	4a0b      	ldr	r2, [pc, #44]	; (801ed60 <LoopFillZerobss+0x24>)
 801ed34:	e002      	b.n	801ed3c <LoopFillZerobss>

0801ed36 <FillZerobss>:
 801ed36:	2300      	movs	r3, #0
 801ed38:	f842 3b04 	str.w	r3, [r2], #4

0801ed3c <LoopFillZerobss>:
 801ed3c:	4b09      	ldr	r3, [pc, #36]	; (801ed64 <LoopFillZerobss+0x28>)
 801ed3e:	429a      	cmp	r2, r3
 801ed40:	d3f9      	bcc.n	801ed36 <FillZerobss>
 801ed42:	f7f3 fafb 	bl	801233c <SystemInit>
 801ed46:	f00f fe6f 	bl	802ea28 <__libc_init_array>
 801ed4a:	f7f2 ff39 	bl	8011bc0 <main>
 801ed4e:	4770      	bx	lr
 801ed50:	20050000 	.word	0x20050000
 801ed54:	08042a3c 	.word	0x08042a3c
 801ed58:	20000040 	.word	0x20000040
 801ed5c:	20000228 	.word	0x20000228
 801ed60:	20000228 	.word	0x20000228
 801ed64:	20030958 	.word	0x20030958

0801ed68 <ADC_IRQHandler>:
 801ed68:	e7fe      	b.n	801ed68 <ADC_IRQHandler>
	...

0801ed6c <GUICC_M1555I_SetCustColorConv>:
 801ed6c:	4b01      	ldr	r3, [pc, #4]	; (801ed74 <GUICC_M1555I_SetCustColorConv+0x8>)
 801ed6e:	e883 0003 	stmia.w	r3, {r0, r1}
 801ed72:	4770      	bx	lr
 801ed74:	2002e1f4 	.word	0x2002e1f4

0801ed78 <GUICC_M4444I_SetCustColorConv>:
 801ed78:	4b01      	ldr	r3, [pc, #4]	; (801ed80 <GUICC_M4444I_SetCustColorConv+0x8>)
 801ed7a:	e883 0003 	stmia.w	r3, {r0, r1}
 801ed7e:	4770      	bx	lr
 801ed80:	2002e1fc 	.word	0x2002e1fc

0801ed84 <_Color2Index_M8888I>:
 801ed84:	4770      	bx	lr
 801ed86:	bf00      	nop

0801ed88 <_GetIndexMask_M8888I>:
 801ed88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ed8c:	4770      	bx	lr
 801ed8e:	bf00      	nop

0801ed90 <_Color2IndexBulk_M8888I>:
 801ed90:	b410      	push	{r4}
 801ed92:	f850 4b04 	ldr.w	r4, [r0], #4
 801ed96:	600c      	str	r4, [r1, #0]
 801ed98:	3a01      	subs	r2, #1
 801ed9a:	4419      	add	r1, r3
 801ed9c:	d1f9      	bne.n	801ed92 <_Color2IndexBulk_M8888I+0x2>
 801ed9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eda2:	4770      	bx	lr

0801eda4 <_Index2ColorBulk_M8888I>:
 801eda4:	b410      	push	{r4}
 801eda6:	6804      	ldr	r4, [r0, #0]
 801eda8:	f841 4b04 	str.w	r4, [r1], #4
 801edac:	3a01      	subs	r2, #1
 801edae:	4418      	add	r0, r3
 801edb0:	d1f9      	bne.n	801eda6 <_Index2ColorBulk_M8888I+0x2>
 801edb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801edb6:	4770      	bx	lr

0801edb8 <GUICC_M8888I_SetCustColorConv>:
 801edb8:	4770      	bx	lr
 801edba:	bf00      	nop

0801edbc <GUICC_M565_SetCustColorConv>:
 801edbc:	4b01      	ldr	r3, [pc, #4]	; (801edc4 <GUICC_M565_SetCustColorConv+0x8>)
 801edbe:	e883 0003 	stmia.w	r3, {r0, r1}
 801edc2:	4770      	bx	lr
 801edc4:	2002e204 	.word	0x2002e204

0801edc8 <GUICC_M888_SetCustColorConv>:
 801edc8:	4770      	bx	lr
 801edca:	bf00      	nop

0801edcc <LCD_Index2Color_M8888I>:
 801edcc:	4770      	bx	lr
 801edce:	bf00      	nop

0801edd0 <LCD_Index2Color_M888>:
 801edd0:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801edd4:	4770      	bx	lr
 801edd6:	bf00      	nop

0801edd8 <_AddFreeMemory>:
 801edd8:	4bc0      	ldr	r3, [pc, #768]	; (801f0dc <_AddFreeMemory+0x304>)
 801edda:	68da      	ldr	r2, [r3, #12]
 801eddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801edde:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 801ede0:	3a01      	subs	r2, #1
 801ede2:	4422      	add	r2, r4
 801ede4:	180d      	adds	r5, r1, r0
 801ede6:	42aa      	cmp	r2, r5
 801ede8:	d303      	bcc.n	801edf2 <_AddFreeMemory+0x1a>
 801edea:	580a      	ldr	r2, [r1, r0]
 801edec:	2a00      	cmp	r2, #0
 801edee:	f000 80a1 	beq.w	801ef34 <_AddFreeMemory+0x15c>
 801edf2:	428c      	cmp	r4, r1
 801edf4:	d205      	bcs.n	801ee02 <_AddFreeMemory+0x2a>
 801edf6:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801edfa:	1a8a      	subs	r2, r1, r2
 801edfc:	6814      	ldr	r4, [r2, #0]
 801edfe:	2c00      	cmp	r4, #0
 801ee00:	d04a      	beq.n	801ee98 <_AddFreeMemory+0xc0>
 801ee02:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 801ee06:	4ab5      	ldr	r2, [pc, #724]	; (801f0dc <_AddFreeMemory+0x304>)
 801ee08:	42a0      	cmp	r0, r4
 801ee0a:	f080 811e 	bcs.w	801f04a <_AddFreeMemory+0x272>
 801ee0e:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 801ee12:	42a0      	cmp	r0, r4
 801ee14:	f080 811b 	bcs.w	801f04e <_AddFreeMemory+0x276>
 801ee18:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 801ee1c:	42a0      	cmp	r0, r4
 801ee1e:	f080 8118 	bcs.w	801f052 <_AddFreeMemory+0x27a>
 801ee22:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
 801ee26:	42a0      	cmp	r0, r4
 801ee28:	f080 8115 	bcs.w	801f056 <_AddFreeMemory+0x27e>
 801ee2c:	f8d2 4098 	ldr.w	r4, [r2, #152]	; 0x98
 801ee30:	42a0      	cmp	r0, r4
 801ee32:	f080 8112 	bcs.w	801f05a <_AddFreeMemory+0x282>
 801ee36:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
 801ee3a:	42a0      	cmp	r0, r4
 801ee3c:	f080 810f 	bcs.w	801f05e <_AddFreeMemory+0x286>
 801ee40:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 801ee44:	42a0      	cmp	r0, r4
 801ee46:	f080 810c 	bcs.w	801f062 <_AddFreeMemory+0x28a>
 801ee4a:	f8d2 4080 	ldr.w	r4, [r2, #128]	; 0x80
 801ee4e:	42a0      	cmp	r0, r4
 801ee50:	f080 8109 	bcs.w	801f066 <_AddFreeMemory+0x28e>
 801ee54:	6f94      	ldr	r4, [r2, #120]	; 0x78
 801ee56:	42a0      	cmp	r0, r4
 801ee58:	f080 8107 	bcs.w	801f06a <_AddFreeMemory+0x292>
 801ee5c:	6f12      	ldr	r2, [r2, #112]	; 0x70
 801ee5e:	4290      	cmp	r0, r2
 801ee60:	f080 8105 	bcs.w	801f06e <_AddFreeMemory+0x296>
 801ee64:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 801ee66:	4a9d      	ldr	r2, [pc, #628]	; (801f0dc <_AddFreeMemory+0x304>)
 801ee68:	42a0      	cmp	r0, r4
 801ee6a:	f080 8102 	bcs.w	801f072 <_AddFreeMemory+0x29a>
 801ee6e:	6e14      	ldr	r4, [r2, #96]	; 0x60
 801ee70:	42a0      	cmp	r0, r4
 801ee72:	f080 8100 	bcs.w	801f076 <_AddFreeMemory+0x29e>
 801ee76:	6d94      	ldr	r4, [r2, #88]	; 0x58
 801ee78:	42a0      	cmp	r0, r4
 801ee7a:	f080 80fe 	bcs.w	801f07a <_AddFreeMemory+0x2a2>
 801ee7e:	6d14      	ldr	r4, [r2, #80]	; 0x50
 801ee80:	42a0      	cmp	r0, r4
 801ee82:	f080 80fc 	bcs.w	801f07e <_AddFreeMemory+0x2a6>
 801ee86:	6c94      	ldr	r4, [r2, #72]	; 0x48
 801ee88:	42a0      	cmp	r0, r4
 801ee8a:	f080 80fa 	bcs.w	801f082 <_AddFreeMemory+0x2aa>
 801ee8e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801ee90:	4290      	cmp	r0, r2
 801ee92:	f080 80a6 	bcs.w	801efe2 <_AddFreeMemory+0x20a>
 801ee96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ee98:	6851      	ldr	r1, [r2, #4]
 801ee9a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 801ee9e:	4c8f      	ldr	r4, [pc, #572]	; (801f0dc <_AddFreeMemory+0x304>)
 801eea0:	42a9      	cmp	r1, r5
 801eea2:	4408      	add	r0, r1
 801eea4:	f080 80f9 	bcs.w	801f09a <_AddFreeMemory+0x2c2>
 801eea8:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 801eeac:	42a9      	cmp	r1, r5
 801eeae:	f080 8106 	bcs.w	801f0be <_AddFreeMemory+0x2e6>
 801eeb2:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 801eeb6:	42a9      	cmp	r1, r5
 801eeb8:	f080 80ff 	bcs.w	801f0ba <_AddFreeMemory+0x2e2>
 801eebc:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 801eec0:	42a9      	cmp	r1, r5
 801eec2:	f080 80f8 	bcs.w	801f0b6 <_AddFreeMemory+0x2de>
 801eec6:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 801eeca:	42a9      	cmp	r1, r5
 801eecc:	f080 80fc 	bcs.w	801f0c8 <_AddFreeMemory+0x2f0>
 801eed0:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 801eed4:	42a9      	cmp	r1, r5
 801eed6:	f080 80ff 	bcs.w	801f0d8 <_AddFreeMemory+0x300>
 801eeda:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 801eede:	42a9      	cmp	r1, r5
 801eee0:	f080 80f8 	bcs.w	801f0d4 <_AddFreeMemory+0x2fc>
 801eee4:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 801eee8:	42a1      	cmp	r1, r4
 801eeea:	f080 80f1 	bcs.w	801f0d0 <_AddFreeMemory+0x2f8>
 801eeee:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 801eef0:	4c7a      	ldr	r4, [pc, #488]	; (801f0dc <_AddFreeMemory+0x304>)
 801eef2:	42a9      	cmp	r1, r5
 801eef4:	f080 80ea 	bcs.w	801f0cc <_AddFreeMemory+0x2f4>
 801eef8:	6f25      	ldr	r5, [r4, #112]	; 0x70
 801eefa:	42a9      	cmp	r1, r5
 801eefc:	f080 8113 	bcs.w	801f126 <_AddFreeMemory+0x34e>
 801ef00:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 801ef02:	42a9      	cmp	r1, r5
 801ef04:	f080 810d 	bcs.w	801f122 <_AddFreeMemory+0x34a>
 801ef08:	6e25      	ldr	r5, [r4, #96]	; 0x60
 801ef0a:	42a9      	cmp	r1, r5
 801ef0c:	f080 8107 	bcs.w	801f11e <_AddFreeMemory+0x346>
 801ef10:	6da5      	ldr	r5, [r4, #88]	; 0x58
 801ef12:	42a9      	cmp	r1, r5
 801ef14:	f080 8101 	bcs.w	801f11a <_AddFreeMemory+0x342>
 801ef18:	6d25      	ldr	r5, [r4, #80]	; 0x50
 801ef1a:	42a9      	cmp	r1, r5
 801ef1c:	f080 80fb 	bcs.w	801f116 <_AddFreeMemory+0x33e>
 801ef20:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 801ef22:	42a9      	cmp	r1, r5
 801ef24:	f080 8104 	bcs.w	801f130 <_AddFreeMemory+0x358>
 801ef28:	6c24      	ldr	r4, [r4, #64]	; 0x40
 801ef2a:	42a1      	cmp	r1, r4
 801ef2c:	f080 8081 	bcs.w	801f032 <_AddFreeMemory+0x25a>
 801ef30:	4611      	mov	r1, r2
 801ef32:	e766      	b.n	801ee02 <_AddFreeMemory+0x2a>
 801ef34:	686a      	ldr	r2, [r5, #4]
 801ef36:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
 801ef3a:	42b2      	cmp	r2, r6
 801ef3c:	4410      	add	r0, r2
 801ef3e:	f080 80ae 	bcs.w	801f09e <_AddFreeMemory+0x2c6>
 801ef42:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 801ef46:	42b2      	cmp	r2, r6
 801ef48:	f080 80b2 	bcs.w	801f0b0 <_AddFreeMemory+0x2d8>
 801ef4c:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 801ef50:	42b2      	cmp	r2, r6
 801ef52:	f080 80aa 	bcs.w	801f0aa <_AddFreeMemory+0x2d2>
 801ef56:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 801ef5a:	42b2      	cmp	r2, r6
 801ef5c:	f080 80a2 	bcs.w	801f0a4 <_AddFreeMemory+0x2cc>
 801ef60:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 801ef64:	42b2      	cmp	r2, r6
 801ef66:	f080 80ac 	bcs.w	801f0c2 <_AddFreeMemory+0x2ea>
 801ef6a:	f8d3 6090 	ldr.w	r6, [r3, #144]	; 0x90
 801ef6e:	42b2      	cmp	r2, r6
 801ef70:	f080 80bf 	bcs.w	801f0f2 <_AddFreeMemory+0x31a>
 801ef74:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 801ef78:	42b2      	cmp	r2, r6
 801ef7a:	f080 80b7 	bcs.w	801f0ec <_AddFreeMemory+0x314>
 801ef7e:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
 801ef82:	42b2      	cmp	r2, r6
 801ef84:	f080 80af 	bcs.w	801f0e6 <_AddFreeMemory+0x30e>
 801ef88:	6f9f      	ldr	r7, [r3, #120]	; 0x78
 801ef8a:	42ba      	cmp	r2, r7
 801ef8c:	f080 80a8 	bcs.w	801f0e0 <_AddFreeMemory+0x308>
 801ef90:	6f1f      	ldr	r7, [r3, #112]	; 0x70
 801ef92:	42ba      	cmp	r2, r7
 801ef94:	f080 80b9 	bcs.w	801f10a <_AddFreeMemory+0x332>
 801ef98:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 801ef9a:	42ba      	cmp	r2, r7
 801ef9c:	f080 80b2 	bcs.w	801f104 <_AddFreeMemory+0x32c>
 801efa0:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 801efa2:	42ba      	cmp	r2, r7
 801efa4:	f080 80ab 	bcs.w	801f0fe <_AddFreeMemory+0x326>
 801efa8:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 801efaa:	42ba      	cmp	r2, r7
 801efac:	f080 80a4 	bcs.w	801f0f8 <_AddFreeMemory+0x320>
 801efb0:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 801efb2:	42ba      	cmp	r2, r7
 801efb4:	f080 80ac 	bcs.w	801f110 <_AddFreeMemory+0x338>
 801efb8:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 801efba:	42ba      	cmp	r2, r7
 801efbc:	f080 80b5 	bcs.w	801f12a <_AddFreeMemory+0x352>
 801efc0:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 801efc2:	42b2      	cmp	r2, r6
 801efc4:	f4ff af15 	bcc.w	801edf2 <_AddFreeMemory+0x1a>
 801efc8:	f04f 0e00 	mov.w	lr, #0
 801efcc:	681e      	ldr	r6, [r3, #0]
 801efce:	68af      	ldr	r7, [r5, #8]
 801efd0:	68ed      	ldr	r5, [r5, #12]
 801efd2:	1ab2      	subs	r2, r6, r2
 801efd4:	601a      	str	r2, [r3, #0]
 801efd6:	b107      	cbz	r7, 801efda <_AddFreeMemory+0x202>
 801efd8:	607d      	str	r5, [r7, #4]
 801efda:	2d00      	cmp	r5, #0
 801efdc:	d058      	beq.n	801f090 <_AddFreeMemory+0x2b8>
 801efde:	602f      	str	r7, [r5, #0]
 801efe0:	e707      	b.n	801edf2 <_AddFreeMemory+0x1a>
 801efe2:	2200      	movs	r2, #0
 801efe4:	3208      	adds	r2, #8
 801efe6:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 801efea:	180d      	adds	r5, r1, r0
 801efec:	6864      	ldr	r4, [r4, #4]
 801efee:	608c      	str	r4, [r1, #8]
 801eff0:	2600      	movs	r6, #0
 801eff2:	600e      	str	r6, [r1, #0]
 801eff4:	6048      	str	r0, [r1, #4]
 801eff6:	6109      	str	r1, [r1, #16]
 801eff8:	f101 0608 	add.w	r6, r1, #8
 801effc:	f845 0c04 	str.w	r0, [r5, #-4]
 801f000:	b104      	cbz	r4, 801f004 <_AddFreeMemory+0x22c>
 801f002:	6066      	str	r6, [r4, #4]
 801f004:	2500      	movs	r5, #0
 801f006:	608c      	str	r4, [r1, #8]
 801f008:	60cd      	str	r5, [r1, #12]
 801f00a:	6819      	ldr	r1, [r3, #0]
 801f00c:	f893 5029 	ldrb.w	r5, [r3, #41]	; 0x29
 801f010:	4c32      	ldr	r4, [pc, #200]	; (801f0dc <_AddFreeMemory+0x304>)
 801f012:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801f016:	4401      	add	r1, r0
 801f018:	6056      	str	r6, [r2, #4]
 801f01a:	6019      	str	r1, [r3, #0]
 801f01c:	2d00      	cmp	r5, #0
 801f01e:	f47f af3a 	bne.w	801ee96 <_AddFreeMemory+0xbe>
 801f022:	68e3      	ldr	r3, [r4, #12]
 801f024:	68a2      	ldr	r2, [r4, #8]
 801f026:	1a59      	subs	r1, r3, r1
 801f028:	4291      	cmp	r1, r2
 801f02a:	f67f af34 	bls.w	801ee96 <_AddFreeMemory+0xbe>
 801f02e:	60a1      	str	r1, [r4, #8]
 801f030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f032:	2700      	movs	r7, #0
 801f034:	681c      	ldr	r4, [r3, #0]
 801f036:	6895      	ldr	r5, [r2, #8]
 801f038:	68d6      	ldr	r6, [r2, #12]
 801f03a:	1a61      	subs	r1, r4, r1
 801f03c:	6019      	str	r1, [r3, #0]
 801f03e:	b105      	cbz	r5, 801f042 <_AddFreeMemory+0x26a>
 801f040:	606e      	str	r6, [r5, #4]
 801f042:	b306      	cbz	r6, 801f086 <_AddFreeMemory+0x2ae>
 801f044:	6035      	str	r5, [r6, #0]
 801f046:	4611      	mov	r1, r2
 801f048:	e6db      	b.n	801ee02 <_AddFreeMemory+0x2a>
 801f04a:	220f      	movs	r2, #15
 801f04c:	e7ca      	b.n	801efe4 <_AddFreeMemory+0x20c>
 801f04e:	220e      	movs	r2, #14
 801f050:	e7c8      	b.n	801efe4 <_AddFreeMemory+0x20c>
 801f052:	220d      	movs	r2, #13
 801f054:	e7c6      	b.n	801efe4 <_AddFreeMemory+0x20c>
 801f056:	220c      	movs	r2, #12
 801f058:	e7c4      	b.n	801efe4 <_AddFreeMemory+0x20c>
 801f05a:	220b      	movs	r2, #11
 801f05c:	e7c2      	b.n	801efe4 <_AddFreeMemory+0x20c>
 801f05e:	220a      	movs	r2, #10
 801f060:	e7c0      	b.n	801efe4 <_AddFreeMemory+0x20c>
 801f062:	2209      	movs	r2, #9
 801f064:	e7be      	b.n	801efe4 <_AddFreeMemory+0x20c>
 801f066:	2208      	movs	r2, #8
 801f068:	e7bc      	b.n	801efe4 <_AddFreeMemory+0x20c>
 801f06a:	2207      	movs	r2, #7
 801f06c:	e7ba      	b.n	801efe4 <_AddFreeMemory+0x20c>
 801f06e:	2206      	movs	r2, #6
 801f070:	e7b8      	b.n	801efe4 <_AddFreeMemory+0x20c>
 801f072:	2205      	movs	r2, #5
 801f074:	e7b6      	b.n	801efe4 <_AddFreeMemory+0x20c>
 801f076:	2204      	movs	r2, #4
 801f078:	e7b4      	b.n	801efe4 <_AddFreeMemory+0x20c>
 801f07a:	2203      	movs	r2, #3
 801f07c:	e7b2      	b.n	801efe4 <_AddFreeMemory+0x20c>
 801f07e:	2202      	movs	r2, #2
 801f080:	e7b0      	b.n	801efe4 <_AddFreeMemory+0x20c>
 801f082:	2201      	movs	r2, #1
 801f084:	e7ae      	b.n	801efe4 <_AddFreeMemory+0x20c>
 801f086:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 801f08a:	4611      	mov	r1, r2
 801f08c:	647d      	str	r5, [r7, #68]	; 0x44
 801f08e:	e6b8      	b.n	801ee02 <_AddFreeMemory+0x2a>
 801f090:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 801f094:	f8ce 7044 	str.w	r7, [lr, #68]	; 0x44
 801f098:	e6ab      	b.n	801edf2 <_AddFreeMemory+0x1a>
 801f09a:	270f      	movs	r7, #15
 801f09c:	e7ca      	b.n	801f034 <_AddFreeMemory+0x25c>
 801f09e:	f04f 0e0f 	mov.w	lr, #15
 801f0a2:	e793      	b.n	801efcc <_AddFreeMemory+0x1f4>
 801f0a4:	f04f 0e0c 	mov.w	lr, #12
 801f0a8:	e790      	b.n	801efcc <_AddFreeMemory+0x1f4>
 801f0aa:	f04f 0e0d 	mov.w	lr, #13
 801f0ae:	e78d      	b.n	801efcc <_AddFreeMemory+0x1f4>
 801f0b0:	f04f 0e0e 	mov.w	lr, #14
 801f0b4:	e78a      	b.n	801efcc <_AddFreeMemory+0x1f4>
 801f0b6:	270c      	movs	r7, #12
 801f0b8:	e7bc      	b.n	801f034 <_AddFreeMemory+0x25c>
 801f0ba:	270d      	movs	r7, #13
 801f0bc:	e7ba      	b.n	801f034 <_AddFreeMemory+0x25c>
 801f0be:	270e      	movs	r7, #14
 801f0c0:	e7b8      	b.n	801f034 <_AddFreeMemory+0x25c>
 801f0c2:	f04f 0e0b 	mov.w	lr, #11
 801f0c6:	e781      	b.n	801efcc <_AddFreeMemory+0x1f4>
 801f0c8:	270b      	movs	r7, #11
 801f0ca:	e7b3      	b.n	801f034 <_AddFreeMemory+0x25c>
 801f0cc:	2707      	movs	r7, #7
 801f0ce:	e7b1      	b.n	801f034 <_AddFreeMemory+0x25c>
 801f0d0:	2708      	movs	r7, #8
 801f0d2:	e7af      	b.n	801f034 <_AddFreeMemory+0x25c>
 801f0d4:	2709      	movs	r7, #9
 801f0d6:	e7ad      	b.n	801f034 <_AddFreeMemory+0x25c>
 801f0d8:	270a      	movs	r7, #10
 801f0da:	e7ab      	b.n	801f034 <_AddFreeMemory+0x25c>
 801f0dc:	200307a0 	.word	0x200307a0
 801f0e0:	f04f 0e07 	mov.w	lr, #7
 801f0e4:	e772      	b.n	801efcc <_AddFreeMemory+0x1f4>
 801f0e6:	f04f 0e08 	mov.w	lr, #8
 801f0ea:	e76f      	b.n	801efcc <_AddFreeMemory+0x1f4>
 801f0ec:	f04f 0e09 	mov.w	lr, #9
 801f0f0:	e76c      	b.n	801efcc <_AddFreeMemory+0x1f4>
 801f0f2:	f04f 0e0a 	mov.w	lr, #10
 801f0f6:	e769      	b.n	801efcc <_AddFreeMemory+0x1f4>
 801f0f8:	f04f 0e03 	mov.w	lr, #3
 801f0fc:	e766      	b.n	801efcc <_AddFreeMemory+0x1f4>
 801f0fe:	f04f 0e04 	mov.w	lr, #4
 801f102:	e763      	b.n	801efcc <_AddFreeMemory+0x1f4>
 801f104:	f04f 0e05 	mov.w	lr, #5
 801f108:	e760      	b.n	801efcc <_AddFreeMemory+0x1f4>
 801f10a:	f04f 0e06 	mov.w	lr, #6
 801f10e:	e75d      	b.n	801efcc <_AddFreeMemory+0x1f4>
 801f110:	f04f 0e02 	mov.w	lr, #2
 801f114:	e75a      	b.n	801efcc <_AddFreeMemory+0x1f4>
 801f116:	2702      	movs	r7, #2
 801f118:	e78c      	b.n	801f034 <_AddFreeMemory+0x25c>
 801f11a:	2703      	movs	r7, #3
 801f11c:	e78a      	b.n	801f034 <_AddFreeMemory+0x25c>
 801f11e:	2704      	movs	r7, #4
 801f120:	e788      	b.n	801f034 <_AddFreeMemory+0x25c>
 801f122:	2705      	movs	r7, #5
 801f124:	e786      	b.n	801f034 <_AddFreeMemory+0x25c>
 801f126:	2706      	movs	r7, #6
 801f128:	e784      	b.n	801f034 <_AddFreeMemory+0x25c>
 801f12a:	f04f 0e01 	mov.w	lr, #1
 801f12e:	e74d      	b.n	801efcc <_AddFreeMemory+0x1f4>
 801f130:	2701      	movs	r7, #1
 801f132:	e77f      	b.n	801f034 <_AddFreeMemory+0x25c>

0801f134 <_RemoveHoles>:
 801f134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f138:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801f2e0 <_RemoveHoles+0x1ac>
 801f13c:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 801f140:	f8d8 700c 	ldr.w	r7, [r8, #12]
 801f144:	e893 0060 	ldmia.w	r3, {r5, r6}
 801f148:	3f01      	subs	r7, #1
 801f14a:	b083      	sub	sp, #12
 801f14c:	4683      	mov	fp, r0
 801f14e:	441f      	add	r7, r3
 801f150:	46c1      	mov	r9, r8
 801f152:	b135      	cbz	r5, 801f162 <_RemoveHoles+0x2e>
 801f154:	4433      	add	r3, r6
 801f156:	429f      	cmp	r7, r3
 801f158:	d906      	bls.n	801f168 <_RemoveHoles+0x34>
 801f15a:	e893 0060 	ldmia.w	r3, {r5, r6}
 801f15e:	2d00      	cmp	r5, #0
 801f160:	d1f8      	bne.n	801f154 <_RemoveHoles+0x20>
 801f162:	1999      	adds	r1, r3, r6
 801f164:	428f      	cmp	r7, r1
 801f166:	d803      	bhi.n	801f170 <_RemoveHoles+0x3c>
 801f168:	2001      	movs	r0, #1
 801f16a:	b003      	add	sp, #12
 801f16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f170:	599d      	ldr	r5, [r3, r6]
 801f172:	684c      	ldr	r4, [r1, #4]
 801f174:	b155      	cbz	r5, 801f18c <_RemoveHoles+0x58>
 801f176:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 801f17a:	f812 0035 	ldrb.w	r0, [r2, r5, lsl #3]
 801f17e:	2801      	cmp	r0, #1
 801f180:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 801f184:	d005      	beq.n	801f192 <_RemoveHoles+0x5e>
 801f186:	4626      	mov	r6, r4
 801f188:	460b      	mov	r3, r1
 801f18a:	e7e2      	b.n	801f152 <_RemoveHoles+0x1e>
 801f18c:	4626      	mov	r6, r4
 801f18e:	460b      	mov	r3, r1
 801f190:	e7e7      	b.n	801f162 <_RemoveHoles+0x2e>
 801f192:	f8d9 00b8 	ldr.w	r0, [r9, #184]	; 0xb8
 801f196:	f8d9 a02c 	ldr.w	sl, [r9, #44]	; 0x2c
 801f19a:	42b0      	cmp	r0, r6
 801f19c:	d976      	bls.n	801f28c <_RemoveHoles+0x158>
 801f19e:	f8d9 00b0 	ldr.w	r0, [r9, #176]	; 0xb0
 801f1a2:	42b0      	cmp	r0, r6
 801f1a4:	d975      	bls.n	801f292 <_RemoveHoles+0x15e>
 801f1a6:	f8d9 00a8 	ldr.w	r0, [r9, #168]	; 0xa8
 801f1aa:	42b0      	cmp	r0, r6
 801f1ac:	d974      	bls.n	801f298 <_RemoveHoles+0x164>
 801f1ae:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 801f1b2:	42b0      	cmp	r0, r6
 801f1b4:	d973      	bls.n	801f29e <_RemoveHoles+0x16a>
 801f1b6:	f8d9 0098 	ldr.w	r0, [r9, #152]	; 0x98
 801f1ba:	4286      	cmp	r6, r0
 801f1bc:	d278      	bcs.n	801f2b0 <_RemoveHoles+0x17c>
 801f1be:	f8d9 0090 	ldr.w	r0, [r9, #144]	; 0x90
 801f1c2:	4286      	cmp	r6, r0
 801f1c4:	d277      	bcs.n	801f2b6 <_RemoveHoles+0x182>
 801f1c6:	f8d8 0088 	ldr.w	r0, [r8, #136]	; 0x88
 801f1ca:	4286      	cmp	r6, r0
 801f1cc:	d26a      	bcs.n	801f2a4 <_RemoveHoles+0x170>
 801f1ce:	f8d9 0080 	ldr.w	r0, [r9, #128]	; 0x80
 801f1d2:	4286      	cmp	r6, r0
 801f1d4:	d269      	bcs.n	801f2aa <_RemoveHoles+0x176>
 801f1d6:	f8d9 0078 	ldr.w	r0, [r9, #120]	; 0x78
 801f1da:	4286      	cmp	r6, r0
 801f1dc:	d274      	bcs.n	801f2c8 <_RemoveHoles+0x194>
 801f1de:	f8d9 0070 	ldr.w	r0, [r9, #112]	; 0x70
 801f1e2:	4286      	cmp	r6, r0
 801f1e4:	d273      	bcs.n	801f2ce <_RemoveHoles+0x19a>
 801f1e6:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
 801f1ea:	4286      	cmp	r6, r0
 801f1ec:	d272      	bcs.n	801f2d4 <_RemoveHoles+0x1a0>
 801f1ee:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 801f1f2:	4286      	cmp	r6, r0
 801f1f4:	d262      	bcs.n	801f2bc <_RemoveHoles+0x188>
 801f1f6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 801f1fa:	4286      	cmp	r6, r0
 801f1fc:	d261      	bcs.n	801f2c2 <_RemoveHoles+0x18e>
 801f1fe:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 801f202:	4286      	cmp	r6, r0
 801f204:	d269      	bcs.n	801f2da <_RemoveHoles+0x1a6>
 801f206:	f8d9 0048 	ldr.w	r0, [r9, #72]	; 0x48
 801f20a:	4286      	cmp	r6, r0
 801f20c:	d21f      	bcs.n	801f24e <_RemoveHoles+0x11a>
 801f20e:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 801f212:	4286      	cmp	r6, r0
 801f214:	d231      	bcs.n	801f27a <_RemoveHoles+0x146>
 801f216:	6053      	str	r3, [r2, #4]
 801f218:	4618      	mov	r0, r3
 801f21a:	4622      	mov	r2, r4
 801f21c:	f00f fc42 	bl	802eaa4 <memmove>
 801f220:	4555      	cmp	r5, sl
 801f222:	4603      	mov	r3, r0
 801f224:	d00b      	beq.n	801f23e <_RemoveHoles+0x10a>
 801f226:	441c      	add	r4, r3
 801f228:	4630      	mov	r0, r6
 801f22a:	4621      	mov	r1, r4
 801f22c:	f7ff fdd4 	bl	801edd8 <_AddFreeMemory>
 801f230:	f1bb 0f00 	cmp.w	fp, #0
 801f234:	d001      	beq.n	801f23a <_RemoveHoles+0x106>
 801f236:	4558      	cmp	r0, fp
 801f238:	d207      	bcs.n	801f24a <_RemoveHoles+0x116>
 801f23a:	4623      	mov	r3, r4
 801f23c:	e78b      	b.n	801f156 <_RemoveHoles+0x22>
 801f23e:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 801f242:	1b92      	subs	r2, r2, r6
 801f244:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
 801f248:	e7ed      	b.n	801f226 <_RemoveHoles+0xf2>
 801f24a:	2000      	movs	r0, #0
 801f24c:	e78d      	b.n	801f16a <_RemoveHoles+0x36>
 801f24e:	2001      	movs	r0, #1
 801f250:	9001      	str	r0, [sp, #4]
 801f252:	f8d8 0000 	ldr.w	r0, [r8]
 801f256:	f8d3 e008 	ldr.w	lr, [r3, #8]
 801f25a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 801f25e:	1b80      	subs	r0, r0, r6
 801f260:	f8c8 0000 	str.w	r0, [r8]
 801f264:	f1be 0f00 	cmp.w	lr, #0
 801f268:	d001      	beq.n	801f26e <_RemoveHoles+0x13a>
 801f26a:	f8ce c004 	str.w	ip, [lr, #4]
 801f26e:	f1bc 0f00 	cmp.w	ip, #0
 801f272:	d005      	beq.n	801f280 <_RemoveHoles+0x14c>
 801f274:	f8cc e000 	str.w	lr, [ip]
 801f278:	e7cd      	b.n	801f216 <_RemoveHoles+0xe2>
 801f27a:	2000      	movs	r0, #0
 801f27c:	9001      	str	r0, [sp, #4]
 801f27e:	e7e8      	b.n	801f252 <_RemoveHoles+0x11e>
 801f280:	9801      	ldr	r0, [sp, #4]
 801f282:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 801f286:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
 801f28a:	e7c4      	b.n	801f216 <_RemoveHoles+0xe2>
 801f28c:	200f      	movs	r0, #15
 801f28e:	9001      	str	r0, [sp, #4]
 801f290:	e7df      	b.n	801f252 <_RemoveHoles+0x11e>
 801f292:	200e      	movs	r0, #14
 801f294:	9001      	str	r0, [sp, #4]
 801f296:	e7dc      	b.n	801f252 <_RemoveHoles+0x11e>
 801f298:	200d      	movs	r0, #13
 801f29a:	9001      	str	r0, [sp, #4]
 801f29c:	e7d9      	b.n	801f252 <_RemoveHoles+0x11e>
 801f29e:	200c      	movs	r0, #12
 801f2a0:	9001      	str	r0, [sp, #4]
 801f2a2:	e7d6      	b.n	801f252 <_RemoveHoles+0x11e>
 801f2a4:	2009      	movs	r0, #9
 801f2a6:	9001      	str	r0, [sp, #4]
 801f2a8:	e7d3      	b.n	801f252 <_RemoveHoles+0x11e>
 801f2aa:	2008      	movs	r0, #8
 801f2ac:	9001      	str	r0, [sp, #4]
 801f2ae:	e7d0      	b.n	801f252 <_RemoveHoles+0x11e>
 801f2b0:	200b      	movs	r0, #11
 801f2b2:	9001      	str	r0, [sp, #4]
 801f2b4:	e7cd      	b.n	801f252 <_RemoveHoles+0x11e>
 801f2b6:	200a      	movs	r0, #10
 801f2b8:	9001      	str	r0, [sp, #4]
 801f2ba:	e7ca      	b.n	801f252 <_RemoveHoles+0x11e>
 801f2bc:	2004      	movs	r0, #4
 801f2be:	9001      	str	r0, [sp, #4]
 801f2c0:	e7c7      	b.n	801f252 <_RemoveHoles+0x11e>
 801f2c2:	2003      	movs	r0, #3
 801f2c4:	9001      	str	r0, [sp, #4]
 801f2c6:	e7c4      	b.n	801f252 <_RemoveHoles+0x11e>
 801f2c8:	2007      	movs	r0, #7
 801f2ca:	9001      	str	r0, [sp, #4]
 801f2cc:	e7c1      	b.n	801f252 <_RemoveHoles+0x11e>
 801f2ce:	2006      	movs	r0, #6
 801f2d0:	9001      	str	r0, [sp, #4]
 801f2d2:	e7be      	b.n	801f252 <_RemoveHoles+0x11e>
 801f2d4:	2005      	movs	r0, #5
 801f2d6:	9001      	str	r0, [sp, #4]
 801f2d8:	e7bb      	b.n	801f252 <_RemoveHoles+0x11e>
 801f2da:	2002      	movs	r0, #2
 801f2dc:	9001      	str	r0, [sp, #4]
 801f2de:	e7b8      	b.n	801f252 <_RemoveHoles+0x11e>
 801f2e0:	200307a0 	.word	0x200307a0

0801f2e4 <_EnlargeBlocks>:
 801f2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f2e8:	4c32      	ldr	r4, [pc, #200]	; (801f3b4 <_EnlargeBlocks+0xd0>)
 801f2ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801f2ec:	b973      	cbnz	r3, 801f30c <_EnlargeBlocks+0x28>
 801f2ee:	4b32      	ldr	r3, [pc, #200]	; (801f3b8 <_EnlargeBlocks+0xd4>)
 801f2f0:	689d      	ldr	r5, [r3, #8]
 801f2f2:	685b      	ldr	r3, [r3, #4]
 801f2f4:	3508      	adds	r5, #8
 801f2f6:	fbb3 f5f5 	udiv	r5, r3, r5
 801f2fa:	3502      	adds	r5, #2
 801f2fc:	00e8      	lsls	r0, r5, #3
 801f2fe:	f000 f85f 	bl	801f3c0 <_Alloc>
 801f302:	4607      	mov	r7, r0
 801f304:	b960      	cbnz	r0, 801f320 <_EnlargeBlocks+0x3c>
 801f306:	2001      	movs	r0, #1
 801f308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f30c:	6923      	ldr	r3, [r4, #16]
 801f30e:	1d1d      	adds	r5, r3, #4
 801f310:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 801f314:	00e8      	lsls	r0, r5, #3
 801f316:	f000 f853 	bl	801f3c0 <_Alloc>
 801f31a:	4607      	mov	r7, r0
 801f31c:	2800      	cmp	r0, #0
 801f31e:	d0f2      	beq.n	801f306 <_EnlargeBlocks+0x22>
 801f320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f322:	6922      	ldr	r2, [r4, #16]
 801f324:	4b25      	ldr	r3, [pc, #148]	; (801f3bc <_EnlargeBlocks+0xd8>)
 801f326:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 801f32a:	681b      	ldr	r3, [r3, #0]
 801f32c:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801f330:	00d2      	lsls	r2, r2, #3
 801f332:	6846      	ldr	r6, [r0, #4]
 801f334:	3608      	adds	r6, #8
 801f336:	4630      	mov	r0, r6
 801f338:	4798      	blx	r3
 801f33a:	6920      	ldr	r0, [r4, #16]
 801f33c:	6366      	str	r6, [r4, #52]	; 0x34
 801f33e:	1e69      	subs	r1, r5, #1
 801f340:	4288      	cmp	r0, r1
 801f342:	62e7      	str	r7, [r4, #44]	; 0x2c
 801f344:	d233      	bcs.n	801f3ae <_EnlargeBlocks+0xca>
 801f346:	eb06 02c0 	add.w	r2, r6, r0, lsl #3
 801f34a:	4603      	mov	r3, r0
 801f34c:	3301      	adds	r3, #1
 801f34e:	428b      	cmp	r3, r1
 801f350:	6053      	str	r3, [r2, #4]
 801f352:	f102 0208 	add.w	r2, r2, #8
 801f356:	d1f9      	bne.n	801f34c <_EnlargeBlocks+0x68>
 801f358:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 801f35c:	2600      	movs	r6, #0
 801f35e:	604e      	str	r6, [r1, #4]
 801f360:	6863      	ldr	r3, [r4, #4]
 801f362:	6260      	str	r0, [r4, #36]	; 0x24
 801f364:	1a1b      	subs	r3, r3, r0
 801f366:	442b      	add	r3, r5
 801f368:	6125      	str	r5, [r4, #16]
 801f36a:	6063      	str	r3, [r4, #4]
 801f36c:	4c11      	ldr	r4, [pc, #68]	; (801f3b4 <_EnlargeBlocks+0xd0>)
 801f36e:	f1b8 0f00 	cmp.w	r8, #0
 801f372:	d019      	beq.n	801f3a8 <_EnlargeBlocks+0xc4>
 801f374:	f002 f9a2 	bl	80216bc <GUI_Lock>
 801f378:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f37a:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 801f37e:	442b      	add	r3, r5
 801f380:	6859      	ldr	r1, [r3, #4]
 801f382:	6848      	ldr	r0, [r1, #4]
 801f384:	f7ff fd28 	bl	801edd8 <_AddFreeMemory>
 801f388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f38a:	6863      	ldr	r3, [r4, #4]
 801f38c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801f38e:	440d      	add	r5, r1
 801f390:	3301      	adds	r3, #1
 801f392:	6063      	str	r3, [r4, #4]
 801f394:	606a      	str	r2, [r5, #4]
 801f396:	f801 6038 	strb.w	r6, [r1, r8, lsl #3]
 801f39a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
 801f39e:	f002 f983 	bl	80216a8 <GUI_Unlock>
 801f3a2:	4630      	mov	r0, r6
 801f3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f3a8:	4640      	mov	r0, r8
 801f3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f3ae:	4601      	mov	r1, r0
 801f3b0:	e7d2      	b.n	801f358 <_EnlargeBlocks+0x74>
 801f3b2:	bf00      	nop
 801f3b4:	200307a0 	.word	0x200307a0
 801f3b8:	2002e20c 	.word	0x2002e20c
 801f3bc:	20000108 	.word	0x20000108

0801f3c0 <_Alloc>:
 801f3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f3c4:	4cc0      	ldr	r4, [pc, #768]	; (801f6c8 <_Alloc+0x308>)
 801f3c6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801f3ca:	4605      	mov	r5, r0
 801f3cc:	2b00      	cmp	r3, #0
 801f3ce:	f000 80f8 	beq.w	801f5c2 <_Alloc+0x202>
 801f3d2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801f3d4:	6823      	ldr	r3, [r4, #0]
 801f3d6:	4285      	cmp	r5, r0
 801f3d8:	bf24      	itt	cs
 801f3da:	1ce8      	addcs	r0, r5, #3
 801f3dc:	f020 0003 	biccs.w	r0, r0, #3
 801f3e0:	f100 060c 	add.w	r6, r0, #12
 801f3e4:	42b3      	cmp	r3, r6
 801f3e6:	4db8      	ldr	r5, [pc, #736]	; (801f6c8 <_Alloc+0x308>)
 801f3e8:	d202      	bcs.n	801f3f0 <_Alloc+0x30>
 801f3ea:	2000      	movs	r0, #0
 801f3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f3f0:	686b      	ldr	r3, [r5, #4]
 801f3f2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 801f3f4:	4293      	cmp	r3, r2
 801f3f6:	f240 8154 	bls.w	801f6a2 <_Alloc+0x2e2>
 801f3fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801f3fc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801f3fe:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 801f402:	3b01      	subs	r3, #1
 801f404:	eb02 0108 	add.w	r1, r2, r8
 801f408:	6063      	str	r3, [r4, #4]
 801f40a:	684b      	ldr	r3, [r1, #4]
 801f40c:	6263      	str	r3, [r4, #36]	; 0x24
 801f40e:	2301      	movs	r3, #1
 801f410:	f802 3035 	strb.w	r3, [r2, r5, lsl #3]
 801f414:	2d00      	cmp	r5, #0
 801f416:	d0e8      	beq.n	801f3ea <_Alloc+0x2a>
 801f418:	4fab      	ldr	r7, [pc, #684]	; (801f6c8 <_Alloc+0x308>)
 801f41a:	f8d4 e0b8 	ldr.w	lr, [r4, #184]	; 0xb8
 801f41e:	4576      	cmp	r6, lr
 801f420:	f080 8121 	bcs.w	801f666 <_Alloc+0x2a6>
 801f424:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801f428:	429e      	cmp	r6, r3
 801f42a:	f080 811e 	bcs.w	801f66a <_Alloc+0x2aa>
 801f42e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801f432:	429e      	cmp	r6, r3
 801f434:	f080 811b 	bcs.w	801f66e <_Alloc+0x2ae>
 801f438:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801f43c:	429e      	cmp	r6, r3
 801f43e:	f080 811a 	bcs.w	801f676 <_Alloc+0x2b6>
 801f442:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801f446:	429e      	cmp	r6, r3
 801f448:	f080 8113 	bcs.w	801f672 <_Alloc+0x2b2>
 801f44c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801f450:	429e      	cmp	r6, r3
 801f452:	f080 8114 	bcs.w	801f67e <_Alloc+0x2be>
 801f456:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801f45a:	429e      	cmp	r6, r3
 801f45c:	f080 810d 	bcs.w	801f67a <_Alloc+0x2ba>
 801f460:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801f464:	429e      	cmp	r6, r3
 801f466:	f080 810e 	bcs.w	801f686 <_Alloc+0x2c6>
 801f46a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f46c:	429e      	cmp	r6, r3
 801f46e:	f080 8108 	bcs.w	801f682 <_Alloc+0x2c2>
 801f472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801f474:	429e      	cmp	r6, r3
 801f476:	f080 810a 	bcs.w	801f68e <_Alloc+0x2ce>
 801f47a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801f47c:	429e      	cmp	r6, r3
 801f47e:	f080 8104 	bcs.w	801f68a <_Alloc+0x2ca>
 801f482:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801f484:	429e      	cmp	r6, r3
 801f486:	f080 8104 	bcs.w	801f692 <_Alloc+0x2d2>
 801f48a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801f48c:	429e      	cmp	r6, r3
 801f48e:	f080 8102 	bcs.w	801f696 <_Alloc+0x2d6>
 801f492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f494:	429e      	cmp	r6, r3
 801f496:	f080 8102 	bcs.w	801f69e <_Alloc+0x2de>
 801f49a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f49c:	429e      	cmp	r6, r3
 801f49e:	f080 80fc 	bcs.w	801f69a <_Alloc+0x2da>
 801f4a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f4a4:	429e      	cmp	r6, r3
 801f4a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f4aa:	bf28      	it	cs
 801f4ac:	2300      	movcs	r3, #0
 801f4ae:	2b0f      	cmp	r3, #15
 801f4b0:	d812      	bhi.n	801f4d8 <_Alloc+0x118>
 801f4b2:	2100      	movs	r1, #0
 801f4b4:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 801f4b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801f4ba:	b92b      	cbnz	r3, 801f4c8 <_Alloc+0x108>
 801f4bc:	e007      	b.n	801f4ce <_Alloc+0x10e>
 801f4be:	685a      	ldr	r2, [r3, #4]
 801f4c0:	4296      	cmp	r6, r2
 801f4c2:	d91d      	bls.n	801f500 <_Alloc+0x140>
 801f4c4:	689b      	ldr	r3, [r3, #8]
 801f4c6:	b113      	cbz	r3, 801f4ce <_Alloc+0x10e>
 801f4c8:	689b      	ldr	r3, [r3, #8]
 801f4ca:	2b00      	cmp	r3, #0
 801f4cc:	d1f7      	bne.n	801f4be <_Alloc+0xfe>
 801f4ce:	3101      	adds	r1, #1
 801f4d0:	2910      	cmp	r1, #16
 801f4d2:	f100 0008 	add.w	r0, r0, #8
 801f4d6:	d1ef      	bne.n	801f4b8 <_Alloc+0xf8>
 801f4d8:	4630      	mov	r0, r6
 801f4da:	f7ff fe2b 	bl	801f134 <_RemoveHoles>
 801f4de:	2800      	cmp	r0, #0
 801f4e0:	d09b      	beq.n	801f41a <_Alloc+0x5a>
 801f4e2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801f4e4:	6863      	ldr	r3, [r4, #4]
 801f4e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801f4e8:	4490      	add	r8, r2
 801f4ea:	2600      	movs	r6, #0
 801f4ec:	3301      	adds	r3, #1
 801f4ee:	6063      	str	r3, [r4, #4]
 801f4f0:	f8c8 1004 	str.w	r1, [r8, #4]
 801f4f4:	f802 6035 	strb.w	r6, [r2, r5, lsl #3]
 801f4f8:	4630      	mov	r0, r6
 801f4fa:	6265      	str	r5, [r4, #36]	; 0x24
 801f4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f500:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f502:	1b97      	subs	r7, r2, r6
 801f504:	f101 000c 	add.w	r0, r1, #12
 801f508:	4287      	cmp	r7, r0
 801f50a:	bf2c      	ite	cs
 801f50c:	4630      	movcs	r0, r6
 801f50e:	4610      	movcc	r0, r2
 801f510:	4596      	cmp	lr, r2
 801f512:	f240 80f5 	bls.w	801f700 <_Alloc+0x340>
 801f516:	f8d4 70b0 	ldr.w	r7, [r4, #176]	; 0xb0
 801f51a:	4e6b      	ldr	r6, [pc, #428]	; (801f6c8 <_Alloc+0x308>)
 801f51c:	42ba      	cmp	r2, r7
 801f51e:	f080 80f1 	bcs.w	801f704 <_Alloc+0x344>
 801f522:	f8d6 70a8 	ldr.w	r7, [r6, #168]	; 0xa8
 801f526:	42ba      	cmp	r2, r7
 801f528:	f080 80e8 	bcs.w	801f6fc <_Alloc+0x33c>
 801f52c:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 801f530:	42ba      	cmp	r2, r7
 801f532:	f080 80cd 	bcs.w	801f6d0 <_Alloc+0x310>
 801f536:	f8d6 7098 	ldr.w	r7, [r6, #152]	; 0x98
 801f53a:	42ba      	cmp	r2, r7
 801f53c:	f080 80d8 	bcs.w	801f6f0 <_Alloc+0x330>
 801f540:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 801f544:	4297      	cmp	r7, r2
 801f546:	f240 80df 	bls.w	801f708 <_Alloc+0x348>
 801f54a:	f8d6 7088 	ldr.w	r7, [r6, #136]	; 0x88
 801f54e:	4297      	cmp	r7, r2
 801f550:	f240 80de 	bls.w	801f710 <_Alloc+0x350>
 801f554:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 801f558:	4297      	cmp	r7, r2
 801f55a:	f240 80d7 	bls.w	801f70c <_Alloc+0x34c>
 801f55e:	6fb7      	ldr	r7, [r6, #120]	; 0x78
 801f560:	4297      	cmp	r7, r2
 801f562:	f240 80e5 	bls.w	801f730 <_Alloc+0x370>
 801f566:	6f36      	ldr	r6, [r6, #112]	; 0x70
 801f568:	4296      	cmp	r6, r2
 801f56a:	f240 80df 	bls.w	801f72c <_Alloc+0x36c>
 801f56e:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 801f570:	4f55      	ldr	r7, [pc, #340]	; (801f6c8 <_Alloc+0x308>)
 801f572:	4296      	cmp	r6, r2
 801f574:	f240 80d8 	bls.w	801f728 <_Alloc+0x368>
 801f578:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 801f57a:	4296      	cmp	r6, r2
 801f57c:	f240 80d2 	bls.w	801f724 <_Alloc+0x364>
 801f580:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 801f582:	42b2      	cmp	r2, r6
 801f584:	f080 80cc 	bcs.w	801f720 <_Alloc+0x360>
 801f588:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 801f58a:	4296      	cmp	r6, r2
 801f58c:	f240 80c6 	bls.w	801f71c <_Alloc+0x35c>
 801f590:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 801f592:	42b2      	cmp	r2, r6
 801f594:	f080 80c0 	bcs.w	801f718 <_Alloc+0x358>
 801f598:	4291      	cmp	r1, r2
 801f59a:	f240 80bb 	bls.w	801f714 <_Alloc+0x354>
 801f59e:	6b64      	ldr	r4, [r4, #52]	; 0x34
 801f5a0:	1819      	adds	r1, r3, r0
 801f5a2:	44a0      	add	r8, r4
 801f5a4:	4290      	cmp	r0, r2
 801f5a6:	f04f 0400 	mov.w	r4, #0
 801f5aa:	f8c8 3004 	str.w	r3, [r8, #4]
 801f5ae:	601d      	str	r5, [r3, #0]
 801f5b0:	6058      	str	r0, [r3, #4]
 801f5b2:	611b      	str	r3, [r3, #16]
 801f5b4:	609c      	str	r4, [r3, #8]
 801f5b6:	f841 0c04 	str.w	r0, [r1, #-4]
 801f5ba:	db7e      	blt.n	801f6ba <_Alloc+0x2fa>
 801f5bc:	4628      	mov	r0, r5
 801f5be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f5c2:	4b42      	ldr	r3, [pc, #264]	; (801f6cc <_Alloc+0x30c>)
 801f5c4:	689a      	ldr	r2, [r3, #8]
 801f5c6:	6858      	ldr	r0, [r3, #4]
 801f5c8:	2101      	movs	r1, #1
 801f5ca:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 801f5ce:	b90a      	cbnz	r2, 801f5d4 <_Alloc+0x214>
 801f5d0:	0882      	lsrs	r2, r0, #2
 801f5d2:	609a      	str	r2, [r3, #8]
 801f5d4:	265a      	movs	r6, #90	; 0x5a
 801f5d6:	6226      	str	r6, [r4, #32]
 801f5d8:	2710      	movs	r7, #16
 801f5da:	2220      	movs	r2, #32
 801f5dc:	2640      	movs	r6, #64	; 0x40
 801f5de:	6819      	ldr	r1, [r3, #0]
 801f5e0:	6427      	str	r7, [r4, #64]	; 0x40
 801f5e2:	64a2      	str	r2, [r4, #72]	; 0x48
 801f5e4:	6526      	str	r6, [r4, #80]	; 0x50
 801f5e6:	2780      	movs	r7, #128	; 0x80
 801f5e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 801f5ec:	f44f 7600 	mov.w	r6, #512	; 0x200
 801f5f0:	65a7      	str	r7, [r4, #88]	; 0x58
 801f5f2:	6622      	str	r2, [r4, #96]	; 0x60
 801f5f4:	66a6      	str	r6, [r4, #104]	; 0x68
 801f5f6:	f44f 6780 	mov.w	r7, #1024	; 0x400
 801f5fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f5fe:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 801f602:	f1a1 0314 	sub.w	r3, r1, #20
 801f606:	6727      	str	r7, [r4, #112]	; 0x70
 801f608:	67a2      	str	r2, [r4, #120]	; 0x78
 801f60a:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 801f60e:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 801f612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801f616:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 801f61a:	4403      	add	r3, r0
 801f61c:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
 801f620:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 801f624:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 801f628:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 801f62c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801f630:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 801f634:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
 801f638:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
 801f63c:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
 801f640:	2202      	movs	r2, #2
 801f642:	2601      	movs	r6, #1
 801f644:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 801f648:	63a1      	str	r1, [r4, #56]	; 0x38
 801f64a:	6363      	str	r3, [r4, #52]	; 0x34
 801f64c:	6122      	str	r2, [r4, #16]
 801f64e:	60e0      	str	r0, [r4, #12]
 801f650:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
 801f654:	605e      	str	r6, [r3, #4]
 801f656:	6266      	str	r6, [r4, #36]	; 0x24
 801f658:	6066      	str	r6, [r4, #4]
 801f65a:	f7ff fbbd 	bl	801edd8 <_AddFreeMemory>
 801f65e:	f7ff fe41 	bl	801f2e4 <_EnlargeBlocks>
 801f662:	6326      	str	r6, [r4, #48]	; 0x30
 801f664:	e6b5      	b.n	801f3d2 <_Alloc+0x12>
 801f666:	210f      	movs	r1, #15
 801f668:	e724      	b.n	801f4b4 <_Alloc+0xf4>
 801f66a:	210e      	movs	r1, #14
 801f66c:	e722      	b.n	801f4b4 <_Alloc+0xf4>
 801f66e:	210d      	movs	r1, #13
 801f670:	e720      	b.n	801f4b4 <_Alloc+0xf4>
 801f672:	210b      	movs	r1, #11
 801f674:	e71e      	b.n	801f4b4 <_Alloc+0xf4>
 801f676:	210c      	movs	r1, #12
 801f678:	e71c      	b.n	801f4b4 <_Alloc+0xf4>
 801f67a:	2109      	movs	r1, #9
 801f67c:	e71a      	b.n	801f4b4 <_Alloc+0xf4>
 801f67e:	210a      	movs	r1, #10
 801f680:	e718      	b.n	801f4b4 <_Alloc+0xf4>
 801f682:	2107      	movs	r1, #7
 801f684:	e716      	b.n	801f4b4 <_Alloc+0xf4>
 801f686:	2108      	movs	r1, #8
 801f688:	e714      	b.n	801f4b4 <_Alloc+0xf4>
 801f68a:	2105      	movs	r1, #5
 801f68c:	e712      	b.n	801f4b4 <_Alloc+0xf4>
 801f68e:	2106      	movs	r1, #6
 801f690:	e710      	b.n	801f4b4 <_Alloc+0xf4>
 801f692:	2104      	movs	r1, #4
 801f694:	e70e      	b.n	801f4b4 <_Alloc+0xf4>
 801f696:	2103      	movs	r1, #3
 801f698:	e70c      	b.n	801f4b4 <_Alloc+0xf4>
 801f69a:	2101      	movs	r1, #1
 801f69c:	e70a      	b.n	801f4b4 <_Alloc+0xf4>
 801f69e:	2102      	movs	r1, #2
 801f6a0:	e708      	b.n	801f4b4 <_Alloc+0xf4>
 801f6a2:	3a01      	subs	r2, #1
 801f6a4:	632a      	str	r2, [r5, #48]	; 0x30
 801f6a6:	f7ff fe1d 	bl	801f2e4 <_EnlargeBlocks>
 801f6aa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801f6ac:	3301      	adds	r3, #1
 801f6ae:	632b      	str	r3, [r5, #48]	; 0x30
 801f6b0:	2800      	cmp	r0, #0
 801f6b2:	f47f ae9a 	bne.w	801f3ea <_Alloc+0x2a>
 801f6b6:	686b      	ldr	r3, [r5, #4]
 801f6b8:	e69f      	b.n	801f3fa <_Alloc+0x3a>
 801f6ba:	1a10      	subs	r0, r2, r0
 801f6bc:	f7ff fb8c 	bl	801edd8 <_AddFreeMemory>
 801f6c0:	4628      	mov	r0, r5
 801f6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f6c6:	bf00      	nop
 801f6c8:	200307a0 	.word	0x200307a0
 801f6cc:	2002e20c 	.word	0x2002e20c
 801f6d0:	210c      	movs	r1, #12
 801f6d2:	6826      	ldr	r6, [r4, #0]
 801f6d4:	689f      	ldr	r7, [r3, #8]
 801f6d6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 801f6da:	1ab6      	subs	r6, r6, r2
 801f6dc:	6026      	str	r6, [r4, #0]
 801f6de:	b10f      	cbz	r7, 801f6e4 <_Alloc+0x324>
 801f6e0:	f8c7 e004 	str.w	lr, [r7, #4]
 801f6e4:	f1be 0f00 	cmp.w	lr, #0
 801f6e8:	d004      	beq.n	801f6f4 <_Alloc+0x334>
 801f6ea:	f8ce 7000 	str.w	r7, [lr]
 801f6ee:	e756      	b.n	801f59e <_Alloc+0x1de>
 801f6f0:	210b      	movs	r1, #11
 801f6f2:	e7ee      	b.n	801f6d2 <_Alloc+0x312>
 801f6f4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 801f6f8:	644f      	str	r7, [r1, #68]	; 0x44
 801f6fa:	e750      	b.n	801f59e <_Alloc+0x1de>
 801f6fc:	210d      	movs	r1, #13
 801f6fe:	e7e8      	b.n	801f6d2 <_Alloc+0x312>
 801f700:	210f      	movs	r1, #15
 801f702:	e7e6      	b.n	801f6d2 <_Alloc+0x312>
 801f704:	210e      	movs	r1, #14
 801f706:	e7e4      	b.n	801f6d2 <_Alloc+0x312>
 801f708:	210a      	movs	r1, #10
 801f70a:	e7e2      	b.n	801f6d2 <_Alloc+0x312>
 801f70c:	2108      	movs	r1, #8
 801f70e:	e7e0      	b.n	801f6d2 <_Alloc+0x312>
 801f710:	2109      	movs	r1, #9
 801f712:	e7de      	b.n	801f6d2 <_Alloc+0x312>
 801f714:	2100      	movs	r1, #0
 801f716:	e7dc      	b.n	801f6d2 <_Alloc+0x312>
 801f718:	2101      	movs	r1, #1
 801f71a:	e7da      	b.n	801f6d2 <_Alloc+0x312>
 801f71c:	2102      	movs	r1, #2
 801f71e:	e7d8      	b.n	801f6d2 <_Alloc+0x312>
 801f720:	2103      	movs	r1, #3
 801f722:	e7d6      	b.n	801f6d2 <_Alloc+0x312>
 801f724:	2104      	movs	r1, #4
 801f726:	e7d4      	b.n	801f6d2 <_Alloc+0x312>
 801f728:	2105      	movs	r1, #5
 801f72a:	e7d2      	b.n	801f6d2 <_Alloc+0x312>
 801f72c:	2106      	movs	r1, #6
 801f72e:	e7d0      	b.n	801f6d2 <_Alloc+0x312>
 801f730:	2107      	movs	r1, #7
 801f732:	e7ce      	b.n	801f6d2 <_Alloc+0x312>

0801f734 <GUI_ALLOC_FreeFixedBlock>:
 801f734:	b128      	cbz	r0, 801f742 <GUI_ALLOC_FreeFixedBlock+0xe>
 801f736:	4a03      	ldr	r2, [pc, #12]	; (801f744 <GUI_ALLOC_FreeFixedBlock+0x10>)
 801f738:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 801f73a:	6003      	str	r3, [r0, #0]
 801f73c:	b103      	cbz	r3, 801f740 <GUI_ALLOC_FreeFixedBlock+0xc>
 801f73e:	6058      	str	r0, [r3, #4]
 801f740:	63d0      	str	r0, [r2, #60]	; 0x3c
 801f742:	4770      	bx	lr
 801f744:	200307a0 	.word	0x200307a0

0801f748 <GUI_ALLOC_GetFixedBlock>:
 801f748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f74a:	4e89      	ldr	r6, [pc, #548]	; (801f970 <GUI_ALLOC_GetFixedBlock+0x228>)
 801f74c:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 801f750:	4604      	mov	r4, r0
 801f752:	2b00      	cmp	r3, #0
 801f754:	d02f      	beq.n	801f7b6 <GUI_ALLOC_GetFixedBlock+0x6e>
 801f756:	3403      	adds	r4, #3
 801f758:	6c35      	ldr	r5, [r6, #64]	; 0x40
 801f75a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801f75c:	f024 0403 	bic.w	r4, r4, #3
 801f760:	3404      	adds	r4, #4
 801f762:	42a5      	cmp	r5, r4
 801f764:	bf38      	it	cc
 801f766:	4625      	movcc	r5, r4
 801f768:	b162      	cbz	r2, 801f784 <GUI_ALLOC_GetFixedBlock+0x3c>
 801f76a:	f852 3c04 	ldr.w	r3, [r2, #-4]
 801f76e:	429d      	cmp	r5, r3
 801f770:	4614      	mov	r4, r2
 801f772:	d104      	bne.n	801f77e <GUI_ALLOC_GetFixedBlock+0x36>
 801f774:	e014      	b.n	801f7a0 <GUI_ALLOC_GetFixedBlock+0x58>
 801f776:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801f77a:	429d      	cmp	r5, r3
 801f77c:	d010      	beq.n	801f7a0 <GUI_ALLOC_GetFixedBlock+0x58>
 801f77e:	6824      	ldr	r4, [r4, #0]
 801f780:	2c00      	cmp	r4, #0
 801f782:	d1f8      	bne.n	801f776 <GUI_ALLOC_GetFixedBlock+0x2e>
 801f784:	68f3      	ldr	r3, [r6, #12]
 801f786:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 801f788:	441c      	add	r4, r3
 801f78a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801f78e:	1a61      	subs	r1, r4, r1
 801f790:	680b      	ldr	r3, [r1, #0]
 801f792:	2b00      	cmp	r3, #0
 801f794:	d165      	bne.n	801f862 <GUI_ALLOC_GetFixedBlock+0x11a>
 801f796:	684b      	ldr	r3, [r1, #4]
 801f798:	429d      	cmp	r5, r3
 801f79a:	dd6c      	ble.n	801f876 <GUI_ALLOC_GetFixedBlock+0x12e>
 801f79c:	2400      	movs	r4, #0
 801f79e:	e008      	b.n	801f7b2 <GUI_ALLOC_GetFixedBlock+0x6a>
 801f7a0:	6823      	ldr	r3, [r4, #0]
 801f7a2:	b10b      	cbz	r3, 801f7a8 <GUI_ALLOC_GetFixedBlock+0x60>
 801f7a4:	6861      	ldr	r1, [r4, #4]
 801f7a6:	6059      	str	r1, [r3, #4]
 801f7a8:	6861      	ldr	r1, [r4, #4]
 801f7aa:	b101      	cbz	r1, 801f7ae <GUI_ALLOC_GetFixedBlock+0x66>
 801f7ac:	600b      	str	r3, [r1, #0]
 801f7ae:	42a2      	cmp	r2, r4
 801f7b0:	d053      	beq.n	801f85a <GUI_ALLOC_GetFixedBlock+0x112>
 801f7b2:	4620      	mov	r0, r4
 801f7b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f7b6:	4b6f      	ldr	r3, [pc, #444]	; (801f974 <GUI_ALLOC_GetFixedBlock+0x22c>)
 801f7b8:	689a      	ldr	r2, [r3, #8]
 801f7ba:	6858      	ldr	r0, [r3, #4]
 801f7bc:	2101      	movs	r1, #1
 801f7be:	f886 1028 	strb.w	r1, [r6, #40]	; 0x28
 801f7c2:	b90a      	cbnz	r2, 801f7c8 <GUI_ALLOC_GetFixedBlock+0x80>
 801f7c4:	0882      	lsrs	r2, r0, #2
 801f7c6:	609a      	str	r2, [r3, #8]
 801f7c8:	255a      	movs	r5, #90	; 0x5a
 801f7ca:	6235      	str	r5, [r6, #32]
 801f7cc:	2710      	movs	r7, #16
 801f7ce:	2220      	movs	r2, #32
 801f7d0:	2540      	movs	r5, #64	; 0x40
 801f7d2:	6819      	ldr	r1, [r3, #0]
 801f7d4:	6437      	str	r7, [r6, #64]	; 0x40
 801f7d6:	64b2      	str	r2, [r6, #72]	; 0x48
 801f7d8:	6535      	str	r5, [r6, #80]	; 0x50
 801f7da:	2780      	movs	r7, #128	; 0x80
 801f7dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 801f7e0:	f44f 7500 	mov.w	r5, #512	; 0x200
 801f7e4:	65b7      	str	r7, [r6, #88]	; 0x58
 801f7e6:	6632      	str	r2, [r6, #96]	; 0x60
 801f7e8:	66b5      	str	r5, [r6, #104]	; 0x68
 801f7ea:	f44f 6780 	mov.w	r7, #1024	; 0x400
 801f7ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f7f2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 801f7f6:	f1a1 0314 	sub.w	r3, r1, #20
 801f7fa:	6737      	str	r7, [r6, #112]	; 0x70
 801f7fc:	67b2      	str	r2, [r6, #120]	; 0x78
 801f7fe:	f8c6 5080 	str.w	r5, [r6, #128]	; 0x80
 801f802:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 801f806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801f80a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 801f80e:	4403      	add	r3, r0
 801f810:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
 801f814:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 801f818:	f8c6 5098 	str.w	r5, [r6, #152]	; 0x98
 801f81c:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 801f820:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801f824:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 801f828:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
 801f82c:	f8c6 20a8 	str.w	r2, [r6, #168]	; 0xa8
 801f830:	f8c6 50b0 	str.w	r5, [r6, #176]	; 0xb0
 801f834:	2202      	movs	r2, #2
 801f836:	2501      	movs	r5, #1
 801f838:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 801f83c:	63b1      	str	r1, [r6, #56]	; 0x38
 801f83e:	6373      	str	r3, [r6, #52]	; 0x34
 801f840:	6132      	str	r2, [r6, #16]
 801f842:	60f0      	str	r0, [r6, #12]
 801f844:	f8c6 70b8 	str.w	r7, [r6, #184]	; 0xb8
 801f848:	605d      	str	r5, [r3, #4]
 801f84a:	6275      	str	r5, [r6, #36]	; 0x24
 801f84c:	6075      	str	r5, [r6, #4]
 801f84e:	f7ff fac3 	bl	801edd8 <_AddFreeMemory>
 801f852:	f7ff fd47 	bl	801f2e4 <_EnlargeBlocks>
 801f856:	6335      	str	r5, [r6, #48]	; 0x30
 801f858:	e77d      	b.n	801f756 <GUI_ALLOC_GetFixedBlock+0xe>
 801f85a:	6823      	ldr	r3, [r4, #0]
 801f85c:	63f3      	str	r3, [r6, #60]	; 0x3c
 801f85e:	4620      	mov	r0, r4
 801f860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f862:	2000      	movs	r0, #0
 801f864:	f7ff fc66 	bl	801f134 <_RemoveHoles>
 801f868:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801f86c:	1a61      	subs	r1, r4, r1
 801f86e:	680b      	ldr	r3, [r1, #0]
 801f870:	2b00      	cmp	r3, #0
 801f872:	d193      	bne.n	801f79c <GUI_ALLOC_GetFixedBlock+0x54>
 801f874:	e78f      	b.n	801f796 <GUI_ALLOC_GetFixedBlock+0x4e>
 801f876:	f8d6 70b8 	ldr.w	r7, [r6, #184]	; 0xb8
 801f87a:	4a3d      	ldr	r2, [pc, #244]	; (801f970 <GUI_ALLOC_GetFixedBlock+0x228>)
 801f87c:	1b58      	subs	r0, r3, r5
 801f87e:	1d04      	adds	r4, r0, #4
 801f880:	42bb      	cmp	r3, r7
 801f882:	440c      	add	r4, r1
 801f884:	d272      	bcs.n	801f96c <GUI_ALLOC_GetFixedBlock+0x224>
 801f886:	f8d2 70b0 	ldr.w	r7, [r2, #176]	; 0xb0
 801f88a:	42bb      	cmp	r3, r7
 801f88c:	d26c      	bcs.n	801f968 <GUI_ALLOC_GetFixedBlock+0x220>
 801f88e:	f8d2 70a8 	ldr.w	r7, [r2, #168]	; 0xa8
 801f892:	42bb      	cmp	r3, r7
 801f894:	d266      	bcs.n	801f964 <GUI_ALLOC_GetFixedBlock+0x21c>
 801f896:	f8d2 70a0 	ldr.w	r7, [r2, #160]	; 0xa0
 801f89a:	42bb      	cmp	r3, r7
 801f89c:	d260      	bcs.n	801f960 <GUI_ALLOC_GetFixedBlock+0x218>
 801f89e:	f8d2 7098 	ldr.w	r7, [r2, #152]	; 0x98
 801f8a2:	429f      	cmp	r7, r3
 801f8a4:	d95a      	bls.n	801f95c <GUI_ALLOC_GetFixedBlock+0x214>
 801f8a6:	f8d2 7090 	ldr.w	r7, [r2, #144]	; 0x90
 801f8aa:	42bb      	cmp	r3, r7
 801f8ac:	d254      	bcs.n	801f958 <GUI_ALLOC_GetFixedBlock+0x210>
 801f8ae:	f8d2 7088 	ldr.w	r7, [r2, #136]	; 0x88
 801f8b2:	42bb      	cmp	r3, r7
 801f8b4:	d24e      	bcs.n	801f954 <GUI_ALLOC_GetFixedBlock+0x20c>
 801f8b6:	f8d2 7080 	ldr.w	r7, [r2, #128]	; 0x80
 801f8ba:	42bb      	cmp	r3, r7
 801f8bc:	d248      	bcs.n	801f950 <GUI_ALLOC_GetFixedBlock+0x208>
 801f8be:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801f8c0:	4293      	cmp	r3, r2
 801f8c2:	d243      	bcs.n	801f94c <GUI_ALLOC_GetFixedBlock+0x204>
 801f8c4:	6f37      	ldr	r7, [r6, #112]	; 0x70
 801f8c6:	4a2a      	ldr	r2, [pc, #168]	; (801f970 <GUI_ALLOC_GetFixedBlock+0x228>)
 801f8c8:	42bb      	cmp	r3, r7
 801f8ca:	d23d      	bcs.n	801f948 <GUI_ALLOC_GetFixedBlock+0x200>
 801f8cc:	6e97      	ldr	r7, [r2, #104]	; 0x68
 801f8ce:	42bb      	cmp	r3, r7
 801f8d0:	d238      	bcs.n	801f944 <GUI_ALLOC_GetFixedBlock+0x1fc>
 801f8d2:	6e17      	ldr	r7, [r2, #96]	; 0x60
 801f8d4:	42bb      	cmp	r3, r7
 801f8d6:	d233      	bcs.n	801f940 <GUI_ALLOC_GetFixedBlock+0x1f8>
 801f8d8:	6d97      	ldr	r7, [r2, #88]	; 0x58
 801f8da:	42bb      	cmp	r3, r7
 801f8dc:	d22e      	bcs.n	801f93c <GUI_ALLOC_GetFixedBlock+0x1f4>
 801f8de:	6d17      	ldr	r7, [r2, #80]	; 0x50
 801f8e0:	42bb      	cmp	r3, r7
 801f8e2:	d229      	bcs.n	801f938 <GUI_ALLOC_GetFixedBlock+0x1f0>
 801f8e4:	6c97      	ldr	r7, [r2, #72]	; 0x48
 801f8e6:	42bb      	cmp	r3, r7
 801f8e8:	d224      	bcs.n	801f934 <GUI_ALLOC_GetFixedBlock+0x1ec>
 801f8ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 801f8ec:	4293      	cmp	r3, r2
 801f8ee:	d20c      	bcs.n	801f90a <GUI_ALLOC_GetFixedBlock+0x1c2>
 801f8f0:	68f2      	ldr	r2, [r6, #12]
 801f8f2:	6973      	ldr	r3, [r6, #20]
 801f8f4:	1b52      	subs	r2, r2, r5
 801f8f6:	442b      	add	r3, r5
 801f8f8:	60f2      	str	r2, [r6, #12]
 801f8fa:	6173      	str	r3, [r6, #20]
 801f8fc:	b910      	cbnz	r0, 801f904 <GUI_ALLOC_GetFixedBlock+0x1bc>
 801f8fe:	f844 5c04 	str.w	r5, [r4, #-4]
 801f902:	e756      	b.n	801f7b2 <GUI_ALLOC_GetFixedBlock+0x6a>
 801f904:	f7ff fa68 	bl	801edd8 <_AddFreeMemory>
 801f908:	e7f9      	b.n	801f8fe <GUI_ALLOC_GetFixedBlock+0x1b6>
 801f90a:	2200      	movs	r2, #0
 801f90c:	6837      	ldr	r7, [r6, #0]
 801f90e:	f8d1 e008 	ldr.w	lr, [r1, #8]
 801f912:	1afb      	subs	r3, r7, r3
 801f914:	6033      	str	r3, [r6, #0]
 801f916:	68cb      	ldr	r3, [r1, #12]
 801f918:	f1be 0f00 	cmp.w	lr, #0
 801f91c:	d001      	beq.n	801f922 <GUI_ALLOC_GetFixedBlock+0x1da>
 801f91e:	f8ce 3004 	str.w	r3, [lr, #4]
 801f922:	b113      	cbz	r3, 801f92a <GUI_ALLOC_GetFixedBlock+0x1e2>
 801f924:	f8c3 e000 	str.w	lr, [r3]
 801f928:	e7e2      	b.n	801f8f0 <GUI_ALLOC_GetFixedBlock+0x1a8>
 801f92a:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 801f92e:	f8c2 e044 	str.w	lr, [r2, #68]	; 0x44
 801f932:	e7dd      	b.n	801f8f0 <GUI_ALLOC_GetFixedBlock+0x1a8>
 801f934:	2201      	movs	r2, #1
 801f936:	e7e9      	b.n	801f90c <GUI_ALLOC_GetFixedBlock+0x1c4>
 801f938:	2202      	movs	r2, #2
 801f93a:	e7e7      	b.n	801f90c <GUI_ALLOC_GetFixedBlock+0x1c4>
 801f93c:	2203      	movs	r2, #3
 801f93e:	e7e5      	b.n	801f90c <GUI_ALLOC_GetFixedBlock+0x1c4>
 801f940:	2204      	movs	r2, #4
 801f942:	e7e3      	b.n	801f90c <GUI_ALLOC_GetFixedBlock+0x1c4>
 801f944:	2205      	movs	r2, #5
 801f946:	e7e1      	b.n	801f90c <GUI_ALLOC_GetFixedBlock+0x1c4>
 801f948:	2206      	movs	r2, #6
 801f94a:	e7df      	b.n	801f90c <GUI_ALLOC_GetFixedBlock+0x1c4>
 801f94c:	2207      	movs	r2, #7
 801f94e:	e7dd      	b.n	801f90c <GUI_ALLOC_GetFixedBlock+0x1c4>
 801f950:	2208      	movs	r2, #8
 801f952:	e7db      	b.n	801f90c <GUI_ALLOC_GetFixedBlock+0x1c4>
 801f954:	2209      	movs	r2, #9
 801f956:	e7d9      	b.n	801f90c <GUI_ALLOC_GetFixedBlock+0x1c4>
 801f958:	220a      	movs	r2, #10
 801f95a:	e7d7      	b.n	801f90c <GUI_ALLOC_GetFixedBlock+0x1c4>
 801f95c:	220b      	movs	r2, #11
 801f95e:	e7d5      	b.n	801f90c <GUI_ALLOC_GetFixedBlock+0x1c4>
 801f960:	220c      	movs	r2, #12
 801f962:	e7d3      	b.n	801f90c <GUI_ALLOC_GetFixedBlock+0x1c4>
 801f964:	220d      	movs	r2, #13
 801f966:	e7d1      	b.n	801f90c <GUI_ALLOC_GetFixedBlock+0x1c4>
 801f968:	220e      	movs	r2, #14
 801f96a:	e7cf      	b.n	801f90c <GUI_ALLOC_GetFixedBlock+0x1c4>
 801f96c:	220f      	movs	r2, #15
 801f96e:	e7cd      	b.n	801f90c <GUI_ALLOC_GetFixedBlock+0x1c4>
 801f970:	200307a0 	.word	0x200307a0
 801f974:	2002e20c 	.word	0x2002e20c

0801f978 <GUI_ALLOC_AllocNoInit>:
 801f978:	b900      	cbnz	r0, 801f97c <GUI_ALLOC_AllocNoInit+0x4>
 801f97a:	4770      	bx	lr
 801f97c:	b510      	push	{r4, lr}
 801f97e:	4604      	mov	r4, r0
 801f980:	f001 fe9c 	bl	80216bc <GUI_Lock>
 801f984:	4620      	mov	r0, r4
 801f986:	f7ff fd1b 	bl	801f3c0 <_Alloc>
 801f98a:	4604      	mov	r4, r0
 801f98c:	f001 fe8c 	bl	80216a8 <GUI_Unlock>
 801f990:	4620      	mov	r0, r4
 801f992:	bd10      	pop	{r4, pc}

0801f994 <GUI_ALLOC_h2p>:
 801f994:	4b03      	ldr	r3, [pc, #12]	; (801f9a4 <GUI_ALLOC_h2p+0x10>)
 801f996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f998:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801f99c:	6840      	ldr	r0, [r0, #4]
 801f99e:	3008      	adds	r0, #8
 801f9a0:	4770      	bx	lr
 801f9a2:	bf00      	nop
 801f9a4:	200307a0 	.word	0x200307a0

0801f9a8 <GUI_ALLOC_LockH>:
 801f9a8:	4a07      	ldr	r2, [pc, #28]	; (801f9c8 <GUI_ALLOC_LockH+0x20>)
 801f9aa:	69d1      	ldr	r1, [r2, #28]
 801f9ac:	6b53      	ldr	r3, [r2, #52]	; 0x34
 801f9ae:	3101      	adds	r1, #1
 801f9b0:	61d1      	str	r1, [r2, #28]
 801f9b2:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
 801f9b6:	3201      	adds	r2, #1
 801f9b8:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
 801f9bc:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 801f9c0:	6858      	ldr	r0, [r3, #4]
 801f9c2:	3008      	adds	r0, #8
 801f9c4:	4770      	bx	lr
 801f9c6:	bf00      	nop
 801f9c8:	200307a0 	.word	0x200307a0

0801f9cc <GUI_ALLOC_UnlockH>:
 801f9cc:	b430      	push	{r4, r5}
 801f9ce:	6803      	ldr	r3, [r0, #0]
 801f9d0:	4a0a      	ldr	r2, [pc, #40]	; (801f9fc <GUI_ALLOC_UnlockH+0x30>)
 801f9d2:	f853 5c08 	ldr.w	r5, [r3, #-8]
 801f9d6:	4604      	mov	r4, r0
 801f9d8:	6b50      	ldr	r0, [r2, #52]	; 0x34
 801f9da:	f810 3035 	ldrb.w	r3, [r0, r5, lsl #3]
 801f9de:	2b01      	cmp	r3, #1
 801f9e0:	d903      	bls.n	801f9ea <GUI_ALLOC_UnlockH+0x1e>
 801f9e2:	69d1      	ldr	r1, [r2, #28]
 801f9e4:	b109      	cbz	r1, 801f9ea <GUI_ALLOC_UnlockH+0x1e>
 801f9e6:	3901      	subs	r1, #1
 801f9e8:	61d1      	str	r1, [r2, #28]
 801f9ea:	3b01      	subs	r3, #1
 801f9ec:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
 801f9f0:	2200      	movs	r2, #0
 801f9f2:	4610      	mov	r0, r2
 801f9f4:	6022      	str	r2, [r4, #0]
 801f9f6:	bc30      	pop	{r4, r5}
 801f9f8:	4770      	bx	lr
 801f9fa:	bf00      	nop
 801f9fc:	200307a0 	.word	0x200307a0

0801fa00 <GUI_ALLOC_GetMaxSize>:
 801fa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa02:	4c4a      	ldr	r4, [pc, #296]	; (801fb2c <GUI_ALLOC_GetMaxSize+0x12c>)
 801fa04:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801fa08:	2b00      	cmp	r3, #0
 801fa0a:	d03d      	beq.n	801fa88 <GUI_ALLOC_GetMaxSize+0x88>
 801fa0c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801fa10:	4a46      	ldr	r2, [pc, #280]	; (801fb2c <GUI_ALLOC_GetMaxSize+0x12c>)
 801fa12:	bb3b      	cbnz	r3, 801fa64 <GUI_ALLOC_GetMaxSize+0x64>
 801fa14:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 801fa18:	bb23      	cbnz	r3, 801fa64 <GUI_ALLOC_GetMaxSize+0x64>
 801fa1a:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 801fa1e:	bb0b      	cbnz	r3, 801fa64 <GUI_ALLOC_GetMaxSize+0x64>
 801fa20:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 801fa24:	b9f3      	cbnz	r3, 801fa64 <GUI_ALLOC_GetMaxSize+0x64>
 801fa26:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 801fa2a:	b9db      	cbnz	r3, 801fa64 <GUI_ALLOC_GetMaxSize+0x64>
 801fa2c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801fa30:	b9c3      	cbnz	r3, 801fa64 <GUI_ALLOC_GetMaxSize+0x64>
 801fa32:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 801fa36:	b9ab      	cbnz	r3, 801fa64 <GUI_ALLOC_GetMaxSize+0x64>
 801fa38:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 801fa3c:	b993      	cbnz	r3, 801fa64 <GUI_ALLOC_GetMaxSize+0x64>
 801fa3e:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 801fa40:	b983      	cbnz	r3, 801fa64 <GUI_ALLOC_GetMaxSize+0x64>
 801fa42:	6f53      	ldr	r3, [r2, #116]	; 0x74
 801fa44:	b973      	cbnz	r3, 801fa64 <GUI_ALLOC_GetMaxSize+0x64>
 801fa46:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801fa48:	b963      	cbnz	r3, 801fa64 <GUI_ALLOC_GetMaxSize+0x64>
 801fa4a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801fa4c:	b953      	cbnz	r3, 801fa64 <GUI_ALLOC_GetMaxSize+0x64>
 801fa4e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801fa50:	b943      	cbnz	r3, 801fa64 <GUI_ALLOC_GetMaxSize+0x64>
 801fa52:	6d53      	ldr	r3, [r2, #84]	; 0x54
 801fa54:	b933      	cbnz	r3, 801fa64 <GUI_ALLOC_GetMaxSize+0x64>
 801fa56:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801fa58:	b923      	cbnz	r3, 801fa64 <GUI_ALLOC_GetMaxSize+0x64>
 801fa5a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801fa5c:	b913      	cbnz	r3, 801fa64 <GUI_ALLOC_GetMaxSize+0x64>
 801fa5e:	f06f 000b 	mvn.w	r0, #11
 801fa62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa64:	689b      	ldr	r3, [r3, #8]
 801fa66:	2b00      	cmp	r3, #0
 801fa68:	d0f9      	beq.n	801fa5e <GUI_ALLOC_GetMaxSize+0x5e>
 801fa6a:	2200      	movs	r2, #0
 801fa6c:	e001      	b.n	801fa72 <GUI_ALLOC_GetMaxSize+0x72>
 801fa6e:	689b      	ldr	r3, [r3, #8]
 801fa70:	b143      	cbz	r3, 801fa84 <GUI_ALLOC_GetMaxSize+0x84>
 801fa72:	6859      	ldr	r1, [r3, #4]
 801fa74:	689b      	ldr	r3, [r3, #8]
 801fa76:	4291      	cmp	r1, r2
 801fa78:	4610      	mov	r0, r2
 801fa7a:	bf84      	itt	hi
 801fa7c:	460a      	movhi	r2, r1
 801fa7e:	4610      	movhi	r0, r2
 801fa80:	2b00      	cmp	r3, #0
 801fa82:	d1f4      	bne.n	801fa6e <GUI_ALLOC_GetMaxSize+0x6e>
 801fa84:	380c      	subs	r0, #12
 801fa86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fa88:	4b29      	ldr	r3, [pc, #164]	; (801fb30 <GUI_ALLOC_GetMaxSize+0x130>)
 801fa8a:	689a      	ldr	r2, [r3, #8]
 801fa8c:	6858      	ldr	r0, [r3, #4]
 801fa8e:	2101      	movs	r1, #1
 801fa90:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 801fa94:	b90a      	cbnz	r2, 801fa9a <GUI_ALLOC_GetMaxSize+0x9a>
 801fa96:	0882      	lsrs	r2, r0, #2
 801fa98:	609a      	str	r2, [r3, #8]
 801fa9a:	6819      	ldr	r1, [r3, #0]
 801fa9c:	63a1      	str	r1, [r4, #56]	; 0x38
 801fa9e:	265a      	movs	r6, #90	; 0x5a
 801faa0:	2210      	movs	r2, #16
 801faa2:	2520      	movs	r5, #32
 801faa4:	6226      	str	r6, [r4, #32]
 801faa6:	6422      	str	r2, [r4, #64]	; 0x40
 801faa8:	64a5      	str	r5, [r4, #72]	; 0x48
 801faaa:	2740      	movs	r7, #64	; 0x40
 801faac:	2680      	movs	r6, #128	; 0x80
 801faae:	f44f 7280 	mov.w	r2, #256	; 0x100
 801fab2:	f44f 7500 	mov.w	r5, #512	; 0x200
 801fab6:	f1a1 0314 	sub.w	r3, r1, #20
 801faba:	6527      	str	r7, [r4, #80]	; 0x50
 801fabc:	65a6      	str	r6, [r4, #88]	; 0x58
 801fabe:	6622      	str	r2, [r4, #96]	; 0x60
 801fac0:	66a5      	str	r5, [r4, #104]	; 0x68
 801fac2:	f44f 6780 	mov.w	r7, #1024	; 0x400
 801fac6:	f44f 6600 	mov.w	r6, #2048	; 0x800
 801faca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801face:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 801fad2:	4403      	add	r3, r0
 801fad4:	6727      	str	r7, [r4, #112]	; 0x70
 801fad6:	67a6      	str	r6, [r4, #120]	; 0x78
 801fad8:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 801fadc:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 801fae0:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 801fae4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 801fae8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801faec:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 801faf0:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 801faf4:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 801faf8:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 801fafc:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 801fb00:	2202      	movs	r2, #2
 801fb02:	2501      	movs	r5, #1
 801fb04:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 801fb08:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 801fb0c:	6363      	str	r3, [r4, #52]	; 0x34
 801fb0e:	6122      	str	r2, [r4, #16]
 801fb10:	60e0      	str	r0, [r4, #12]
 801fb12:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 801fb16:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 801fb1a:	605d      	str	r5, [r3, #4]
 801fb1c:	6265      	str	r5, [r4, #36]	; 0x24
 801fb1e:	6065      	str	r5, [r4, #4]
 801fb20:	f7ff f95a 	bl	801edd8 <_AddFreeMemory>
 801fb24:	f7ff fbde 	bl	801f2e4 <_EnlargeBlocks>
 801fb28:	6325      	str	r5, [r4, #48]	; 0x30
 801fb2a:	e76f      	b.n	801fa0c <GUI_ALLOC_GetMaxSize+0xc>
 801fb2c:	200307a0 	.word	0x200307a0
 801fb30:	2002e20c 	.word	0x2002e20c

0801fb34 <GUI_ALLOC_RequestSize>:
 801fb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb36:	4c58      	ldr	r4, [pc, #352]	; (801fc98 <GUI_ALLOC_RequestSize+0x164>)
 801fb38:	f001 fdc0 	bl	80216bc <GUI_Lock>
 801fb3c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	d057      	beq.n	801fbf4 <GUI_ALLOC_RequestSize+0xc0>
 801fb44:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 801fb48:	4a53      	ldr	r2, [pc, #332]	; (801fc98 <GUI_ALLOC_RequestSize+0x164>)
 801fb4a:	bb9b      	cbnz	r3, 801fbb4 <GUI_ALLOC_RequestSize+0x80>
 801fb4c:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 801fb50:	bb83      	cbnz	r3, 801fbb4 <GUI_ALLOC_RequestSize+0x80>
 801fb52:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 801fb56:	bb6b      	cbnz	r3, 801fbb4 <GUI_ALLOC_RequestSize+0x80>
 801fb58:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 801fb5c:	bb53      	cbnz	r3, 801fbb4 <GUI_ALLOC_RequestSize+0x80>
 801fb5e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 801fb62:	bb3b      	cbnz	r3, 801fbb4 <GUI_ALLOC_RequestSize+0x80>
 801fb64:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 801fb68:	bb23      	cbnz	r3, 801fbb4 <GUI_ALLOC_RequestSize+0x80>
 801fb6a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 801fb6e:	bb0b      	cbnz	r3, 801fbb4 <GUI_ALLOC_RequestSize+0x80>
 801fb70:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 801fb74:	b9f3      	cbnz	r3, 801fbb4 <GUI_ALLOC_RequestSize+0x80>
 801fb76:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 801fb78:	b9e3      	cbnz	r3, 801fbb4 <GUI_ALLOC_RequestSize+0x80>
 801fb7a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 801fb7c:	b9d3      	cbnz	r3, 801fbb4 <GUI_ALLOC_RequestSize+0x80>
 801fb7e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801fb80:	b9c3      	cbnz	r3, 801fbb4 <GUI_ALLOC_RequestSize+0x80>
 801fb82:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801fb84:	b9b3      	cbnz	r3, 801fbb4 <GUI_ALLOC_RequestSize+0x80>
 801fb86:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801fb88:	b9a3      	cbnz	r3, 801fbb4 <GUI_ALLOC_RequestSize+0x80>
 801fb8a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 801fb8c:	b993      	cbnz	r3, 801fbb4 <GUI_ALLOC_RequestSize+0x80>
 801fb8e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801fb90:	b983      	cbnz	r3, 801fbb4 <GUI_ALLOC_RequestSize+0x80>
 801fb92:	6c53      	ldr	r3, [r2, #68]	; 0x44
 801fb94:	b973      	cbnz	r3, 801fbb4 <GUI_ALLOC_RequestSize+0x80>
 801fb96:	f06f 030b 	mvn.w	r3, #11
 801fb9a:	4940      	ldr	r1, [pc, #256]	; (801fc9c <GUI_ALLOC_RequestSize+0x168>)
 801fb9c:	17da      	asrs	r2, r3, #31
 801fb9e:	fb81 1303 	smull	r1, r3, r1, r3
 801fba2:	ebc2 1363 	rsb	r3, r2, r3, asr #5
 801fba6:	6a24      	ldr	r4, [r4, #32]
 801fba8:	fb04 f403 	mul.w	r4, r4, r3
 801fbac:	f001 fd7c 	bl	80216a8 <GUI_Unlock>
 801fbb0:	4620      	mov	r0, r4
 801fbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fbb4:	689b      	ldr	r3, [r3, #8]
 801fbb6:	2b00      	cmp	r3, #0
 801fbb8:	d0f5      	beq.n	801fba6 <GUI_ALLOC_RequestSize+0x72>
 801fbba:	2200      	movs	r2, #0
 801fbbc:	e001      	b.n	801fbc2 <GUI_ALLOC_RequestSize+0x8e>
 801fbbe:	689b      	ldr	r3, [r3, #8]
 801fbc0:	b143      	cbz	r3, 801fbd4 <GUI_ALLOC_RequestSize+0xa0>
 801fbc2:	6859      	ldr	r1, [r3, #4]
 801fbc4:	689b      	ldr	r3, [r3, #8]
 801fbc6:	4291      	cmp	r1, r2
 801fbc8:	4610      	mov	r0, r2
 801fbca:	bf84      	itt	hi
 801fbcc:	460a      	movhi	r2, r1
 801fbce:	4610      	movhi	r0, r2
 801fbd0:	2b00      	cmp	r3, #0
 801fbd2:	d1f4      	bne.n	801fbbe <GUI_ALLOC_RequestSize+0x8a>
 801fbd4:	380c      	subs	r0, #12
 801fbd6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 801fbda:	4603      	mov	r3, r0
 801fbdc:	d8dd      	bhi.n	801fb9a <GUI_ALLOC_RequestSize+0x66>
 801fbde:	6a22      	ldr	r2, [r4, #32]
 801fbe0:	4b2e      	ldr	r3, [pc, #184]	; (801fc9c <GUI_ALLOC_RequestSize+0x168>)
 801fbe2:	fb02 f000 	mul.w	r0, r2, r0
 801fbe6:	fba3 2300 	umull	r2, r3, r3, r0
 801fbea:	095c      	lsrs	r4, r3, #5
 801fbec:	f001 fd5c 	bl	80216a8 <GUI_Unlock>
 801fbf0:	4620      	mov	r0, r4
 801fbf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fbf4:	4b2a      	ldr	r3, [pc, #168]	; (801fca0 <GUI_ALLOC_RequestSize+0x16c>)
 801fbf6:	689a      	ldr	r2, [r3, #8]
 801fbf8:	6858      	ldr	r0, [r3, #4]
 801fbfa:	2101      	movs	r1, #1
 801fbfc:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 801fc00:	b90a      	cbnz	r2, 801fc06 <GUI_ALLOC_RequestSize+0xd2>
 801fc02:	0882      	lsrs	r2, r0, #2
 801fc04:	609a      	str	r2, [r3, #8]
 801fc06:	6819      	ldr	r1, [r3, #0]
 801fc08:	63a1      	str	r1, [r4, #56]	; 0x38
 801fc0a:	265a      	movs	r6, #90	; 0x5a
 801fc0c:	2210      	movs	r2, #16
 801fc0e:	2520      	movs	r5, #32
 801fc10:	6226      	str	r6, [r4, #32]
 801fc12:	6422      	str	r2, [r4, #64]	; 0x40
 801fc14:	64a5      	str	r5, [r4, #72]	; 0x48
 801fc16:	2740      	movs	r7, #64	; 0x40
 801fc18:	2680      	movs	r6, #128	; 0x80
 801fc1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801fc1e:	f44f 7500 	mov.w	r5, #512	; 0x200
 801fc22:	f1a1 0314 	sub.w	r3, r1, #20
 801fc26:	6527      	str	r7, [r4, #80]	; 0x50
 801fc28:	65a6      	str	r6, [r4, #88]	; 0x58
 801fc2a:	6622      	str	r2, [r4, #96]	; 0x60
 801fc2c:	66a5      	str	r5, [r4, #104]	; 0x68
 801fc2e:	f44f 6780 	mov.w	r7, #1024	; 0x400
 801fc32:	f44f 6600 	mov.w	r6, #2048	; 0x800
 801fc36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801fc3a:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 801fc3e:	4403      	add	r3, r0
 801fc40:	6727      	str	r7, [r4, #112]	; 0x70
 801fc42:	67a6      	str	r6, [r4, #120]	; 0x78
 801fc44:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 801fc48:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 801fc4c:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 801fc50:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 801fc54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801fc58:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 801fc5c:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 801fc60:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 801fc64:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 801fc68:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 801fc6c:	2202      	movs	r2, #2
 801fc6e:	2501      	movs	r5, #1
 801fc70:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 801fc74:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 801fc78:	6363      	str	r3, [r4, #52]	; 0x34
 801fc7a:	6122      	str	r2, [r4, #16]
 801fc7c:	60e0      	str	r0, [r4, #12]
 801fc7e:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 801fc82:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 801fc86:	605d      	str	r5, [r3, #4]
 801fc88:	6265      	str	r5, [r4, #36]	; 0x24
 801fc8a:	6065      	str	r5, [r4, #4]
 801fc8c:	f7ff f8a4 	bl	801edd8 <_AddFreeMemory>
 801fc90:	f7ff fb28 	bl	801f2e4 <_EnlargeBlocks>
 801fc94:	6325      	str	r5, [r4, #48]	; 0x30
 801fc96:	e755      	b.n	801fb44 <GUI_ALLOC_RequestSize+0x10>
 801fc98:	200307a0 	.word	0x200307a0
 801fc9c:	51eb851f 	.word	0x51eb851f
 801fca0:	2002e20c 	.word	0x2002e20c

0801fca4 <GUI_ALLOC_Lock>:
 801fca4:	4a02      	ldr	r2, [pc, #8]	; (801fcb0 <GUI_ALLOC_Lock+0xc>)
 801fca6:	6993      	ldr	r3, [r2, #24]
 801fca8:	3301      	adds	r3, #1
 801fcaa:	6193      	str	r3, [r2, #24]
 801fcac:	4770      	bx	lr
 801fcae:	bf00      	nop
 801fcb0:	200307a0 	.word	0x200307a0

0801fcb4 <GUI_ALLOC_Unlock>:
 801fcb4:	4a02      	ldr	r2, [pc, #8]	; (801fcc0 <GUI_ALLOC_Unlock+0xc>)
 801fcb6:	6993      	ldr	r3, [r2, #24]
 801fcb8:	3b01      	subs	r3, #1
 801fcba:	6193      	str	r3, [r2, #24]
 801fcbc:	4770      	bx	lr
 801fcbe:	bf00      	nop
 801fcc0:	200307a0 	.word	0x200307a0

0801fcc4 <GUI_ALLOC_AssignMemory>:
 801fcc4:	4b02      	ldr	r3, [pc, #8]	; (801fcd0 <GUI_ALLOC_AssignMemory+0xc>)
 801fcc6:	f021 0103 	bic.w	r1, r1, #3
 801fcca:	e883 0003 	stmia.w	r3, {r0, r1}
 801fcce:	4770      	bx	lr
 801fcd0:	2002e20c 	.word	0x2002e20c

0801fcd4 <GUI_ALLOC_GetSize>:
 801fcd4:	b130      	cbz	r0, 801fce4 <GUI_ALLOC_GetSize+0x10>
 801fcd6:	4b04      	ldr	r3, [pc, #16]	; (801fce8 <GUI_ALLOC_GetSize+0x14>)
 801fcd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801fcda:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801fcde:	6843      	ldr	r3, [r0, #4]
 801fce0:	6858      	ldr	r0, [r3, #4]
 801fce2:	380c      	subs	r0, #12
 801fce4:	4770      	bx	lr
 801fce6:	bf00      	nop
 801fce8:	200307a0 	.word	0x200307a0

0801fcec <GUI_ALLOC_Free>:
 801fcec:	b900      	cbnz	r0, 801fcf0 <GUI_ALLOC_Free+0x4>
 801fcee:	4770      	bx	lr
 801fcf0:	b570      	push	{r4, r5, r6, lr}
 801fcf2:	4c0d      	ldr	r4, [pc, #52]	; (801fd28 <GUI_ALLOC_Free+0x3c>)
 801fcf4:	4605      	mov	r5, r0
 801fcf6:	f001 fce1 	bl	80216bc <GUI_Lock>
 801fcfa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801fcfc:	00ee      	lsls	r6, r5, #3
 801fcfe:	4433      	add	r3, r6
 801fd00:	6859      	ldr	r1, [r3, #4]
 801fd02:	6848      	ldr	r0, [r1, #4]
 801fd04:	f7ff f868 	bl	801edd8 <_AddFreeMemory>
 801fd08:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801fd0a:	6863      	ldr	r3, [r4, #4]
 801fd0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801fd0e:	4416      	add	r6, r2
 801fd10:	3301      	adds	r3, #1
 801fd12:	2000      	movs	r0, #0
 801fd14:	6063      	str	r3, [r4, #4]
 801fd16:	6071      	str	r1, [r6, #4]
 801fd18:	f802 0035 	strb.w	r0, [r2, r5, lsl #3]
 801fd1c:	6265      	str	r5, [r4, #36]	; 0x24
 801fd1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fd22:	f001 bcc1 	b.w	80216a8 <GUI_Unlock>
 801fd26:	bf00      	nop
 801fd28:	200307a0 	.word	0x200307a0

0801fd2c <GUI_ALLOC_FreePtr>:
 801fd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fd2e:	4605      	mov	r5, r0
 801fd30:	f001 fcc4 	bl	80216bc <GUI_Lock>
 801fd34:	682c      	ldr	r4, [r5, #0]
 801fd36:	b1b4      	cbz	r4, 801fd66 <GUI_ALLOC_FreePtr+0x3a>
 801fd38:	4e0e      	ldr	r6, [pc, #56]	; (801fd74 <GUI_ALLOC_FreePtr+0x48>)
 801fd3a:	f001 fcbf 	bl	80216bc <GUI_Lock>
 801fd3e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801fd40:	00e7      	lsls	r7, r4, #3
 801fd42:	443b      	add	r3, r7
 801fd44:	6859      	ldr	r1, [r3, #4]
 801fd46:	6848      	ldr	r0, [r1, #4]
 801fd48:	f7ff f846 	bl	801edd8 <_AddFreeMemory>
 801fd4c:	6b71      	ldr	r1, [r6, #52]	; 0x34
 801fd4e:	6873      	ldr	r3, [r6, #4]
 801fd50:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801fd52:	440f      	add	r7, r1
 801fd54:	3301      	adds	r3, #1
 801fd56:	2000      	movs	r0, #0
 801fd58:	6073      	str	r3, [r6, #4]
 801fd5a:	607a      	str	r2, [r7, #4]
 801fd5c:	f801 0034 	strb.w	r0, [r1, r4, lsl #3]
 801fd60:	6274      	str	r4, [r6, #36]	; 0x24
 801fd62:	f001 fca1 	bl	80216a8 <GUI_Unlock>
 801fd66:	2300      	movs	r3, #0
 801fd68:	602b      	str	r3, [r5, #0]
 801fd6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801fd6e:	f001 bc9b 	b.w	80216a8 <GUI_Unlock>
 801fd72:	bf00      	nop
 801fd74:	200307a0 	.word	0x200307a0

0801fd78 <GUI_ALLOC_FreePtrArray>:
 801fd78:	2900      	cmp	r1, #0
 801fd7a:	dd2b      	ble.n	801fdd4 <GUI_ALLOC_FreePtrArray+0x5c>
 801fd7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fd80:	2500      	movs	r5, #0
 801fd82:	4f15      	ldr	r7, [pc, #84]	; (801fdd8 <GUI_ALLOC_FreePtrArray+0x60>)
 801fd84:	468a      	mov	sl, r1
 801fd86:	1f04      	subs	r4, r0, #4
 801fd88:	46a9      	mov	r9, r5
 801fd8a:	f001 fc97 	bl	80216bc <GUI_Lock>
 801fd8e:	f854 6f04 	ldr.w	r6, [r4, #4]!
 801fd92:	3501      	adds	r5, #1
 801fd94:	b1b6      	cbz	r6, 801fdc4 <GUI_ALLOC_FreePtrArray+0x4c>
 801fd96:	f001 fc91 	bl	80216bc <GUI_Lock>
 801fd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fd9c:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 801fda0:	4443      	add	r3, r8
 801fda2:	6859      	ldr	r1, [r3, #4]
 801fda4:	6848      	ldr	r0, [r1, #4]
 801fda6:	f7ff f817 	bl	801edd8 <_AddFreeMemory>
 801fdaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801fdac:	687b      	ldr	r3, [r7, #4]
 801fdae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fdb0:	4488      	add	r8, r1
 801fdb2:	3301      	adds	r3, #1
 801fdb4:	607b      	str	r3, [r7, #4]
 801fdb6:	f8c8 2004 	str.w	r2, [r8, #4]
 801fdba:	f801 9036 	strb.w	r9, [r1, r6, lsl #3]
 801fdbe:	627e      	str	r6, [r7, #36]	; 0x24
 801fdc0:	f001 fc72 	bl	80216a8 <GUI_Unlock>
 801fdc4:	f8c4 9000 	str.w	r9, [r4]
 801fdc8:	f001 fc6e 	bl	80216a8 <GUI_Unlock>
 801fdcc:	45aa      	cmp	sl, r5
 801fdce:	d1dc      	bne.n	801fd8a <GUI_ALLOC_FreePtrArray+0x12>
 801fdd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fdd4:	4770      	bx	lr
 801fdd6:	bf00      	nop
 801fdd8:	200307a0 	.word	0x200307a0

0801fddc <GUI_ALLOC_AllocZero>:
 801fddc:	b570      	push	{r4, r5, r6, lr}
 801fdde:	4605      	mov	r5, r0
 801fde0:	f001 fc6c 	bl	80216bc <GUI_Lock>
 801fde4:	b925      	cbnz	r5, 801fdf0 <GUI_ALLOC_AllocZero+0x14>
 801fde6:	2400      	movs	r4, #0
 801fde8:	f001 fc5e 	bl	80216a8 <GUI_Unlock>
 801fdec:	4620      	mov	r0, r4
 801fdee:	bd70      	pop	{r4, r5, r6, pc}
 801fdf0:	f001 fc64 	bl	80216bc <GUI_Lock>
 801fdf4:	4628      	mov	r0, r5
 801fdf6:	f7ff fae3 	bl	801f3c0 <_Alloc>
 801fdfa:	4604      	mov	r4, r0
 801fdfc:	f001 fc54 	bl	80216a8 <GUI_Unlock>
 801fe00:	2c00      	cmp	r4, #0
 801fe02:	d0f0      	beq.n	801fde6 <GUI_ALLOC_AllocZero+0xa>
 801fe04:	4e14      	ldr	r6, [pc, #80]	; (801fe58 <GUI_ALLOC_AllocZero+0x7c>)
 801fe06:	4915      	ldr	r1, [pc, #84]	; (801fe5c <GUI_ALLOC_AllocZero+0x80>)
 801fe08:	69f2      	ldr	r2, [r6, #28]
 801fe0a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 801fe0c:	3201      	adds	r2, #1
 801fe0e:	61f2      	str	r2, [r6, #28]
 801fe10:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
 801fe14:	3201      	adds	r2, #1
 801fe16:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 801fe1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801fe1e:	462a      	mov	r2, r5
 801fe20:	685d      	ldr	r5, [r3, #4]
 801fe22:	680b      	ldr	r3, [r1, #0]
 801fe24:	f105 0008 	add.w	r0, r5, #8
 801fe28:	2100      	movs	r1, #0
 801fe2a:	4798      	blx	r3
 801fe2c:	6829      	ldr	r1, [r5, #0]
 801fe2e:	6b72      	ldr	r2, [r6, #52]	; 0x34
 801fe30:	f812 3031 	ldrb.w	r3, [r2, r1, lsl #3]
 801fe34:	2b01      	cmp	r3, #1
 801fe36:	d901      	bls.n	801fe3c <GUI_ALLOC_AllocZero+0x60>
 801fe38:	69f0      	ldr	r0, [r6, #28]
 801fe3a:	b930      	cbnz	r0, 801fe4a <GUI_ALLOC_AllocZero+0x6e>
 801fe3c:	3b01      	subs	r3, #1
 801fe3e:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
 801fe42:	f001 fc31 	bl	80216a8 <GUI_Unlock>
 801fe46:	4620      	mov	r0, r4
 801fe48:	bd70      	pop	{r4, r5, r6, pc}
 801fe4a:	3801      	subs	r0, #1
 801fe4c:	3b01      	subs	r3, #1
 801fe4e:	61f0      	str	r0, [r6, #28]
 801fe50:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
 801fe54:	e7f5      	b.n	801fe42 <GUI_ALLOC_AllocZero+0x66>
 801fe56:	bf00      	nop
 801fe58:	200307a0 	.word	0x200307a0
 801fe5c:	2000010c 	.word	0x2000010c

0801fe60 <GUI_Long2Len>:
 801fe60:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 801fe64:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 801fe68:	2b09      	cmp	r3, #9
 801fe6a:	4602      	mov	r2, r0
 801fe6c:	dd1f      	ble.n	801feae <GUI_Long2Len+0x4e>
 801fe6e:	2b63      	cmp	r3, #99	; 0x63
 801fe70:	d920      	bls.n	801feb4 <GUI_Long2Len+0x54>
 801fe72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801fe76:	d320      	bcc.n	801feba <GUI_Long2Len+0x5a>
 801fe78:	f242 710f 	movw	r1, #9999	; 0x270f
 801fe7c:	428b      	cmp	r3, r1
 801fe7e:	d91f      	bls.n	801fec0 <GUI_Long2Len+0x60>
 801fe80:	4917      	ldr	r1, [pc, #92]	; (801fee0 <GUI_Long2Len+0x80>)
 801fe82:	428b      	cmp	r3, r1
 801fe84:	d91f      	bls.n	801fec6 <GUI_Long2Len+0x66>
 801fe86:	4917      	ldr	r1, [pc, #92]	; (801fee4 <GUI_Long2Len+0x84>)
 801fe88:	428b      	cmp	r3, r1
 801fe8a:	d91f      	bls.n	801fecc <GUI_Long2Len+0x6c>
 801fe8c:	4916      	ldr	r1, [pc, #88]	; (801fee8 <GUI_Long2Len+0x88>)
 801fe8e:	428b      	cmp	r3, r1
 801fe90:	d91f      	bls.n	801fed2 <GUI_Long2Len+0x72>
 801fe92:	4916      	ldr	r1, [pc, #88]	; (801feec <GUI_Long2Len+0x8c>)
 801fe94:	428b      	cmp	r3, r1
 801fe96:	d91f      	bls.n	801fed8 <GUI_Long2Len+0x78>
 801fe98:	4915      	ldr	r1, [pc, #84]	; (801fef0 <GUI_Long2Len+0x90>)
 801fe9a:	428b      	cmp	r3, r1
 801fe9c:	bf8b      	itete	hi
 801fe9e:	200a      	movhi	r0, #10
 801fea0:	2009      	movls	r0, #9
 801fea2:	2309      	movhi	r3, #9
 801fea4:	2308      	movls	r3, #8
 801fea6:	2a00      	cmp	r2, #0
 801fea8:	bfb8      	it	lt
 801feaa:	1c98      	addlt	r0, r3, #2
 801feac:	4770      	bx	lr
 801feae:	2001      	movs	r0, #1
 801feb0:	2300      	movs	r3, #0
 801feb2:	e7f8      	b.n	801fea6 <GUI_Long2Len+0x46>
 801feb4:	2002      	movs	r0, #2
 801feb6:	2301      	movs	r3, #1
 801feb8:	e7f5      	b.n	801fea6 <GUI_Long2Len+0x46>
 801feba:	2003      	movs	r0, #3
 801febc:	2302      	movs	r3, #2
 801febe:	e7f2      	b.n	801fea6 <GUI_Long2Len+0x46>
 801fec0:	2004      	movs	r0, #4
 801fec2:	2303      	movs	r3, #3
 801fec4:	e7ef      	b.n	801fea6 <GUI_Long2Len+0x46>
 801fec6:	2005      	movs	r0, #5
 801fec8:	2304      	movs	r3, #4
 801feca:	e7ec      	b.n	801fea6 <GUI_Long2Len+0x46>
 801fecc:	2006      	movs	r0, #6
 801fece:	2305      	movs	r3, #5
 801fed0:	e7e9      	b.n	801fea6 <GUI_Long2Len+0x46>
 801fed2:	2007      	movs	r0, #7
 801fed4:	2306      	movs	r3, #6
 801fed6:	e7e6      	b.n	801fea6 <GUI_Long2Len+0x46>
 801fed8:	2008      	movs	r0, #8
 801feda:	2307      	movs	r3, #7
 801fedc:	e7e3      	b.n	801fea6 <GUI_Long2Len+0x46>
 801fede:	bf00      	nop
 801fee0:	0001869f 	.word	0x0001869f
 801fee4:	000f423f 	.word	0x000f423f
 801fee8:	0098967f 	.word	0x0098967f
 801feec:	05f5e0ff 	.word	0x05f5e0ff
 801fef0:	3b9ac9ff 	.word	0x3b9ac9ff

0801fef4 <GUI_AddDecShift>:
 801fef4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801fef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fefc:	d075      	beq.n	801ffea <GUI_AddDecShift+0xf6>
 801fefe:	2800      	cmp	r0, #0
 801ff00:	db7e      	blt.n	8020000 <GUI_AddDecShift+0x10c>
 801ff02:	2400      	movs	r4, #0
 801ff04:	1b0c      	subs	r4, r1, r4
 801ff06:	b2e4      	uxtb	r4, r4
 801ff08:	2100      	movs	r1, #0
 801ff0a:	b10a      	cbz	r2, 801ff10 <GUI_AddDecShift+0x1c>
 801ff0c:	3c01      	subs	r4, #1
 801ff0e:	b2e4      	uxtb	r4, r4
 801ff10:	b384      	cbz	r4, 801ff74 <GUI_AddDecShift+0x80>
 801ff12:	4f3f      	ldr	r7, [pc, #252]	; (8020010 <GUI_AddDecShift+0x11c>)
 801ff14:	b399      	cbz	r1, 801ff7e <GUI_AddDecShift+0x8a>
 801ff16:	1e65      	subs	r5, r4, #1
 801ff18:	4294      	cmp	r4, r2
 801ff1a:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8020014 <GUI_AddDecShift+0x120>
 801ff1e:	f04f 0c31 	mov.w	ip, #49	; 0x31
 801ff22:	b2ed      	uxtb	r5, r5
 801ff24:	d019      	beq.n	801ff5a <GUI_AddDecShift+0x66>
 801ff26:	f857 6025 	ldr.w	r6, [r7, r5, lsl #2]
 801ff2a:	fb90 f1f6 	sdiv	r1, r0, r6
 801ff2e:	b2c9      	uxtb	r1, r1
 801ff30:	290a      	cmp	r1, #10
 801ff32:	d81f      	bhi.n	801ff74 <GUI_AddDecShift+0x80>
 801ff34:	fb06 0011 	mls	r0, r6, r1, r0
 801ff38:	b90d      	cbnz	r5, 801ff3e <GUI_AddDecShift+0x4a>
 801ff3a:	3101      	adds	r1, #1
 801ff3c:	b2c9      	uxtb	r1, r1
 801ff3e:	290a      	cmp	r1, #10
 801ff40:	f101 0130 	add.w	r1, r1, #48	; 0x30
 801ff44:	d049      	beq.n	801ffda <GUI_AddDecShift+0xe6>
 801ff46:	681c      	ldr	r4, [r3, #0]
 801ff48:	1c66      	adds	r6, r4, #1
 801ff4a:	601e      	str	r6, [r3, #0]
 801ff4c:	7021      	strb	r1, [r4, #0]
 801ff4e:	b18d      	cbz	r5, 801ff74 <GUI_AddDecShift+0x80>
 801ff50:	462c      	mov	r4, r5
 801ff52:	1e65      	subs	r5, r4, #1
 801ff54:	4294      	cmp	r4, r2
 801ff56:	b2ed      	uxtb	r5, r5
 801ff58:	d1e5      	bne.n	801ff26 <GUI_AddDecShift+0x32>
 801ff5a:	6819      	ldr	r1, [r3, #0]
 801ff5c:	1c4e      	adds	r6, r1, #1
 801ff5e:	601e      	str	r6, [r3, #0]
 801ff60:	f89e 6000 	ldrb.w	r6, [lr]
 801ff64:	700e      	strb	r6, [r1, #0]
 801ff66:	f857 6025 	ldr.w	r6, [r7, r5, lsl #2]
 801ff6a:	fb90 f1f6 	sdiv	r1, r0, r6
 801ff6e:	b2c9      	uxtb	r1, r1
 801ff70:	290a      	cmp	r1, #10
 801ff72:	d9df      	bls.n	801ff34 <GUI_AddDecShift+0x40>
 801ff74:	681b      	ldr	r3, [r3, #0]
 801ff76:	2200      	movs	r2, #0
 801ff78:	701a      	strb	r2, [r3, #0]
 801ff7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ff7e:	1e65      	subs	r5, r4, #1
 801ff80:	4294      	cmp	r4, r2
 801ff82:	f8df c090 	ldr.w	ip, [pc, #144]	; 8020014 <GUI_AddDecShift+0x120>
 801ff86:	f04f 0831 	mov.w	r8, #49	; 0x31
 801ff8a:	b2ed      	uxtb	r5, r5
 801ff8c:	d017      	beq.n	801ffbe <GUI_AddDecShift+0xca>
 801ff8e:	f857 6025 	ldr.w	r6, [r7, r5, lsl #2]
 801ff92:	fb90 f1f6 	sdiv	r1, r0, r6
 801ff96:	b2c9      	uxtb	r1, r1
 801ff98:	290a      	cmp	r1, #10
 801ff9a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 801ff9e:	d8e9      	bhi.n	801ff74 <GUI_AddDecShift+0x80>
 801ffa0:	fb06 0011 	mls	r0, r6, r1, r0
 801ffa4:	6819      	ldr	r1, [r3, #0]
 801ffa6:	d011      	beq.n	801ffcc <GUI_AddDecShift+0xd8>
 801ffa8:	1c4c      	adds	r4, r1, #1
 801ffaa:	601c      	str	r4, [r3, #0]
 801ffac:	f881 e000 	strb.w	lr, [r1]
 801ffb0:	2d00      	cmp	r5, #0
 801ffb2:	d0df      	beq.n	801ff74 <GUI_AddDecShift+0x80>
 801ffb4:	462c      	mov	r4, r5
 801ffb6:	1e65      	subs	r5, r4, #1
 801ffb8:	4294      	cmp	r4, r2
 801ffba:	b2ed      	uxtb	r5, r5
 801ffbc:	d1e7      	bne.n	801ff8e <GUI_AddDecShift+0x9a>
 801ffbe:	6819      	ldr	r1, [r3, #0]
 801ffc0:	1c4e      	adds	r6, r1, #1
 801ffc2:	601e      	str	r6, [r3, #0]
 801ffc4:	f89c 6000 	ldrb.w	r6, [ip]
 801ffc8:	700e      	strb	r6, [r1, #0]
 801ffca:	e7e0      	b.n	801ff8e <GUI_AddDecShift+0x9a>
 801ffcc:	1c4e      	adds	r6, r1, #1
 801ffce:	4625      	mov	r5, r4
 801ffd0:	601e      	str	r6, [r3, #0]
 801ffd2:	462c      	mov	r4, r5
 801ffd4:	f881 8000 	strb.w	r8, [r1]
 801ffd8:	e7ed      	b.n	801ffb6 <GUI_AddDecShift+0xc2>
 801ffda:	6819      	ldr	r1, [r3, #0]
 801ffdc:	4625      	mov	r5, r4
 801ffde:	1c4e      	adds	r6, r1, #1
 801ffe0:	601e      	str	r6, [r3, #0]
 801ffe2:	462c      	mov	r4, r5
 801ffe4:	f881 c000 	strb.w	ip, [r1]
 801ffe8:	e7b3      	b.n	801ff52 <GUI_AddDecShift+0x5e>
 801ffea:	681d      	ldr	r5, [r3, #0]
 801ffec:	1e4c      	subs	r4, r1, #1
 801ffee:	1c68      	adds	r0, r5, #1
 801fff0:	212d      	movs	r1, #45	; 0x2d
 801fff2:	6018      	str	r0, [r3, #0]
 801fff4:	b2e4      	uxtb	r4, r4
 801fff6:	7029      	strb	r1, [r5, #0]
 801fff8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801fffc:	2101      	movs	r1, #1
 801fffe:	e784      	b.n	801ff0a <GUI_AddDecShift+0x16>
 8020000:	681d      	ldr	r5, [r3, #0]
 8020002:	262d      	movs	r6, #45	; 0x2d
 8020004:	1c6c      	adds	r4, r5, #1
 8020006:	601c      	str	r4, [r3, #0]
 8020008:	4240      	negs	r0, r0
 802000a:	2401      	movs	r4, #1
 802000c:	702e      	strb	r6, [r5, #0]
 802000e:	e779      	b.n	801ff04 <GUI_AddDecShift+0x10>
 8020010:	0803635c 	.word	0x0803635c
 8020014:	20030868 	.word	0x20030868

08020018 <GUI_CalcColorDist>:
 8020018:	b2c3      	uxtb	r3, r0
 802001a:	b2ca      	uxtb	r2, r1
 802001c:	1a9a      	subs	r2, r3, r2
 802001e:	b292      	uxth	r2, r2
 8020020:	b430      	push	{r4, r5}
 8020022:	b215      	sxth	r5, r2
 8020024:	2d00      	cmp	r5, #0
 8020026:	bfbc      	itt	lt
 8020028:	4252      	neglt	r2, r2
 802002a:	b215      	sxthlt	r5, r2
 802002c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8020030:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8020034:	1a9b      	subs	r3, r3, r2
 8020036:	b29b      	uxth	r3, r3
 8020038:	0c09      	lsrs	r1, r1, #16
 802003a:	b21a      	sxth	r2, r3
 802003c:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8020040:	2a00      	cmp	r2, #0
 8020042:	b289      	uxth	r1, r1
 8020044:	b20c      	sxth	r4, r1
 8020046:	bfbc      	itt	lt
 8020048:	425b      	neglt	r3, r3
 802004a:	b21a      	sxthlt	r2, r3
 802004c:	2c00      	cmp	r4, #0
 802004e:	bfbc      	itt	lt
 8020050:	4249      	neglt	r1, r1
 8020052:	b20c      	sxthlt	r4, r1
 8020054:	fb02 f202 	mul.w	r2, r2, r2
 8020058:	fb05 2005 	mla	r0, r5, r5, r2
 802005c:	b2a1      	uxth	r1, r4
 802005e:	fb01 0001 	mla	r0, r1, r1, r0
 8020062:	bc30      	pop	{r4, r5}
 8020064:	4770      	bx	lr
 8020066:	bf00      	nop

08020068 <GUI_GetClientRect>:
 8020068:	b108      	cbz	r0, 802006e <GUI_GetClientRect+0x6>
 802006a:	f008 bdbd 	b.w	8028be8 <WM_GetClientRect>
 802006e:	4770      	bx	lr

08020070 <GUI_GetBkColor>:
 8020070:	b510      	push	{r4, lr}
 8020072:	f001 fb23 	bl	80216bc <GUI_Lock>
 8020076:	f003 f94d 	bl	8023314 <LCD_GetBkColorIndex>
 802007a:	f003 f80b 	bl	8023094 <LCD_Index2Color>
 802007e:	4604      	mov	r4, r0
 8020080:	f001 fb12 	bl	80216a8 <GUI_Unlock>
 8020084:	4620      	mov	r0, r4
 8020086:	bd10      	pop	{r4, pc}

08020088 <GUI_GetColor>:
 8020088:	b510      	push	{r4, lr}
 802008a:	f001 fb17 	bl	80216bc <GUI_Lock>
 802008e:	f003 f949 	bl	8023324 <LCD_GetColorIndex>
 8020092:	f002 ffff 	bl	8023094 <LCD_Index2Color>
 8020096:	4604      	mov	r4, r0
 8020098:	f001 fb06 	bl	80216a8 <GUI_Unlock>
 802009c:	4620      	mov	r0, r4
 802009e:	bd10      	pop	{r4, pc}

080200a0 <GUI_GetDrawMode>:
 80200a0:	b510      	push	{r4, lr}
 80200a2:	f001 fb0b 	bl	80216bc <GUI_Lock>
 80200a6:	4b03      	ldr	r3, [pc, #12]	; (80200b4 <GUI_GetDrawMode+0x14>)
 80200a8:	681b      	ldr	r3, [r3, #0]
 80200aa:	7c1c      	ldrb	r4, [r3, #16]
 80200ac:	f001 fafc 	bl	80216a8 <GUI_Unlock>
 80200b0:	4620      	mov	r0, r4
 80200b2:	bd10      	pop	{r4, pc}
 80200b4:	200000e8 	.word	0x200000e8

080200b8 <GUI_GetOrg>:
 80200b8:	b538      	push	{r3, r4, r5, lr}
 80200ba:	4605      	mov	r5, r0
 80200bc:	460c      	mov	r4, r1
 80200be:	f001 fafd 	bl	80216bc <GUI_Lock>
 80200c2:	4a06      	ldr	r2, [pc, #24]	; (80200dc <GUI_GetOrg+0x24>)
 80200c4:	4b06      	ldr	r3, [pc, #24]	; (80200e0 <GUI_GetOrg+0x28>)
 80200c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80200ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80200ce:	602a      	str	r2, [r5, #0]
 80200d0:	6023      	str	r3, [r4, #0]
 80200d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80200d6:	f001 bae7 	b.w	80216a8 <GUI_Unlock>
 80200da:	bf00      	nop
 80200dc:	20030888 	.word	0x20030888
 80200e0:	20030878 	.word	0x20030878

080200e4 <GUI_GetVersionString>:
 80200e4:	4804      	ldr	r0, [pc, #16]	; (80200f8 <GUI_GetVersionString+0x14>)
 80200e6:	2334      	movs	r3, #52	; 0x34
 80200e8:	2135      	movs	r1, #53	; 0x35
 80200ea:	2261      	movs	r2, #97	; 0x61
 80200ec:	7001      	strb	r1, [r0, #0]
 80200ee:	7102      	strb	r2, [r0, #4]
 80200f0:	7083      	strb	r3, [r0, #2]
 80200f2:	70c3      	strb	r3, [r0, #3]
 80200f4:	4770      	bx	lr
 80200f6:	bf00      	nop
 80200f8:	200000d0 	.word	0x200000d0

080200fc <GUI_MergeRect>:
 80200fc:	b320      	cbz	r0, 8020148 <GUI_MergeRect+0x4c>
 80200fe:	b321      	cbz	r1, 802014a <GUI_MergeRect+0x4e>
 8020100:	b322      	cbz	r2, 802014c <GUI_MergeRect+0x50>
 8020102:	f9b2 c000 	ldrsh.w	ip, [r2]
 8020106:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 802010a:	b5f0      	push	{r4, r5, r6, r7, lr}
 802010c:	f9b1 5000 	ldrsh.w	r5, [r1]
 8020110:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8020114:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8020118:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 802011c:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8020120:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 8020124:	4565      	cmp	r5, ip
 8020126:	bfa8      	it	ge
 8020128:	4665      	movge	r5, ip
 802012a:	45a6      	cmp	lr, r4
 802012c:	4671      	mov	r1, lr
 802012e:	bfa8      	it	ge
 8020130:	4621      	movge	r1, r4
 8020132:	42ba      	cmp	r2, r7
 8020134:	bfb8      	it	lt
 8020136:	463a      	movlt	r2, r7
 8020138:	42b3      	cmp	r3, r6
 802013a:	bfb8      	it	lt
 802013c:	4633      	movlt	r3, r6
 802013e:	8005      	strh	r5, [r0, #0]
 8020140:	8041      	strh	r1, [r0, #2]
 8020142:	8082      	strh	r2, [r0, #4]
 8020144:	80c3      	strh	r3, [r0, #6]
 8020146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020148:	4770      	bx	lr
 802014a:	4611      	mov	r1, r2
 802014c:	680b      	ldr	r3, [r1, #0]
 802014e:	684a      	ldr	r2, [r1, #4]
 8020150:	6042      	str	r2, [r0, #4]
 8020152:	6003      	str	r3, [r0, #0]
 8020154:	4770      	bx	lr
 8020156:	bf00      	nop

08020158 <GUI_MoveRect>:
 8020158:	b178      	cbz	r0, 802017a <GUI_MoveRect+0x22>
 802015a:	b470      	push	{r4, r5, r6}
 802015c:	8806      	ldrh	r6, [r0, #0]
 802015e:	8844      	ldrh	r4, [r0, #2]
 8020160:	8885      	ldrh	r5, [r0, #4]
 8020162:	88c3      	ldrh	r3, [r0, #6]
 8020164:	b289      	uxth	r1, r1
 8020166:	b292      	uxth	r2, r2
 8020168:	440e      	add	r6, r1
 802016a:	4414      	add	r4, r2
 802016c:	4429      	add	r1, r5
 802016e:	8006      	strh	r6, [r0, #0]
 8020170:	8044      	strh	r4, [r0, #2]
 8020172:	bc70      	pop	{r4, r5, r6}
 8020174:	441a      	add	r2, r3
 8020176:	8081      	strh	r1, [r0, #4]
 8020178:	80c2      	strh	r2, [r0, #6]
 802017a:	4770      	bx	lr

0802017c <GUI_Exec>:
 802017c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020180:	4f12      	ldr	r7, [pc, #72]	; (80201cc <GUI_Exec+0x50>)
 8020182:	4e13      	ldr	r6, [pc, #76]	; (80201d0 <GUI_Exec+0x54>)
 8020184:	f8df 804c 	ldr.w	r8, [pc, #76]	; 80201d4 <GUI_Exec+0x58>
 8020188:	2500      	movs	r5, #0
 802018a:	683c      	ldr	r4, [r7, #0]
 802018c:	b11c      	cbz	r4, 8020196 <GUI_Exec+0x1a>
 802018e:	47a0      	blx	r4
 8020190:	1c04      	adds	r4, r0, #0
 8020192:	bf18      	it	ne
 8020194:	2401      	movne	r4, #1
 8020196:	f008 f90b 	bl	80283b0 <WM_Exec>
 802019a:	6833      	ldr	r3, [r6, #0]
 802019c:	2800      	cmp	r0, #0
 802019e:	bf18      	it	ne
 80201a0:	2401      	movne	r4, #1
 80201a2:	b14b      	cbz	r3, 80201b8 <GUI_Exec+0x3c>
 80201a4:	4798      	blx	r3
 80201a6:	b138      	cbz	r0, 80201b8 <GUI_Exec+0x3c>
 80201a8:	f8d8 3000 	ldr.w	r3, [r8]
 80201ac:	b113      	cbz	r3, 80201b4 <GUI_Exec+0x38>
 80201ae:	2401      	movs	r4, #1
 80201b0:	4798      	blx	r3
 80201b2:	b13c      	cbz	r4, 80201c4 <GUI_Exec+0x48>
 80201b4:	2501      	movs	r5, #1
 80201b6:	e7e8      	b.n	802018a <GUI_Exec+0xe>
 80201b8:	f8d8 3000 	ldr.w	r3, [r8]
 80201bc:	2b00      	cmp	r3, #0
 80201be:	d1f7      	bne.n	80201b0 <GUI_Exec+0x34>
 80201c0:	2c00      	cmp	r4, #0
 80201c2:	d1f7      	bne.n	80201b4 <GUI_Exec+0x38>
 80201c4:	4628      	mov	r0, r5
 80201c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80201ca:	bf00      	nop
 80201cc:	20030884 	.word	0x20030884
 80201d0:	200308ac 	.word	0x200308ac
 80201d4:	200308a4 	.word	0x200308a4

080201d8 <GUI_GetBitmapPixelIndex>:
 80201d8:	2800      	cmp	r0, #0
 80201da:	d050      	beq.n	802027e <GUI_GetBitmapPixelIndex+0xa6>
 80201dc:	88c3      	ldrh	r3, [r0, #6]
 80201de:	3b01      	subs	r3, #1
 80201e0:	b510      	push	{r4, lr}
 80201e2:	8884      	ldrh	r4, [r0, #4]
 80201e4:	6880      	ldr	r0, [r0, #8]
 80201e6:	2b1f      	cmp	r3, #31
 80201e8:	d847      	bhi.n	802027a <GUI_GetBitmapPixelIndex+0xa2>
 80201ea:	e8df f003 	tbb	[pc, r3]
 80201ee:	2316      	.short	0x2316
 80201f0:	46463146 	.word	0x46463146
 80201f4:	46463c46 	.word	0x46463c46
 80201f8:	46464646 	.word	0x46464646
 80201fc:	46464046 	.word	0x46464046
 8020200:	46464646 	.word	0x46464646
 8020204:	46464646 	.word	0x46464646
 8020208:	46464646 	.word	0x46464646
 802020c:	1046      	.short	0x1046
 802020e:	10a3      	asrs	r3, r4, #2
 8020210:	fb02 1103 	mla	r1, r2, r3, r1
 8020214:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8020218:	bd10      	pop	{r4, pc}
 802021a:	fb02 f204 	mul.w	r2, r2, r4
 802021e:	eb00 04d1 	add.w	r4, r0, r1, lsr #3
 8020222:	43c8      	mvns	r0, r1
 8020224:	5ca3      	ldrb	r3, [r4, r2]
 8020226:	f000 0007 	and.w	r0, r0, #7
 802022a:	fa23 f000 	lsr.w	r0, r3, r0
 802022e:	f000 0001 	and.w	r0, r0, #1
 8020232:	bd10      	pop	{r4, pc}
 8020234:	fb02 f204 	mul.w	r2, r2, r4
 8020238:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 802023c:	ea6f 0041 	mvn.w	r0, r1, lsl #1
 8020240:	5ca3      	ldrb	r3, [r4, r2]
 8020242:	f000 0006 	and.w	r0, r0, #6
 8020246:	fa23 f000 	lsr.w	r0, r3, r0
 802024a:	f000 0003 	and.w	r0, r0, #3
 802024e:	bd10      	pop	{r4, pc}
 8020250:	fb02 f204 	mul.w	r2, r2, r4
 8020254:	eb00 0451 	add.w	r4, r0, r1, lsr #1
 8020258:	07cb      	lsls	r3, r1, #31
 802025a:	5ca0      	ldrb	r0, [r4, r2]
 802025c:	bf4c      	ite	mi
 802025e:	f000 000f 	andmi.w	r0, r0, #15
 8020262:	0900      	lsrpl	r0, r0, #4
 8020264:	bd10      	pop	{r4, pc}
 8020266:	fb02 0404 	mla	r4, r2, r4, r0
 802026a:	5c60      	ldrb	r0, [r4, r1]
 802026c:	bd10      	pop	{r4, pc}
 802026e:	1063      	asrs	r3, r4, #1
 8020270:	fb02 1103 	mla	r1, r2, r3, r1
 8020274:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8020278:	bd10      	pop	{r4, pc}
 802027a:	2000      	movs	r0, #0
 802027c:	bd10      	pop	{r4, pc}
 802027e:	4770      	bx	lr

08020280 <GUI_GotoXY>:
 8020280:	b538      	push	{r3, r4, r5, lr}
 8020282:	4605      	mov	r5, r0
 8020284:	460c      	mov	r4, r1
 8020286:	f001 fa19 	bl	80216bc <GUI_Lock>
 802028a:	4b04      	ldr	r3, [pc, #16]	; (802029c <GUI_GotoXY+0x1c>)
 802028c:	681b      	ldr	r3, [r3, #0]
 802028e:	845d      	strh	r5, [r3, #34]	; 0x22
 8020290:	849c      	strh	r4, [r3, #36]	; 0x24
 8020292:	f001 fa09 	bl	80216a8 <GUI_Unlock>
 8020296:	2000      	movs	r0, #0
 8020298:	bd38      	pop	{r3, r4, r5, pc}
 802029a:	bf00      	nop
 802029c:	200000e8 	.word	0x200000e8

080202a0 <GUI_SetPenSize>:
 80202a0:	b538      	push	{r3, r4, r5, lr}
 80202a2:	4605      	mov	r5, r0
 80202a4:	f001 fa0a 	bl	80216bc <GUI_Lock>
 80202a8:	4b03      	ldr	r3, [pc, #12]	; (80202b8 <GUI_SetPenSize+0x18>)
 80202aa:	681b      	ldr	r3, [r3, #0]
 80202ac:	7e1c      	ldrb	r4, [r3, #24]
 80202ae:	761d      	strb	r5, [r3, #24]
 80202b0:	f001 f9fa 	bl	80216a8 <GUI_Unlock>
 80202b4:	4620      	mov	r0, r4
 80202b6:	bd38      	pop	{r3, r4, r5, pc}
 80202b8:	200000e8 	.word	0x200000e8

080202bc <GUI_RectsIntersect>:
 80202bc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80202c0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80202c4:	429a      	cmp	r2, r3
 80202c6:	dc14      	bgt.n	80202f2 <GUI_RectsIntersect+0x36>
 80202c8:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 80202cc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80202d0:	429a      	cmp	r2, r3
 80202d2:	dc0e      	bgt.n	80202f2 <GUI_RectsIntersect+0x36>
 80202d4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80202d8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80202dc:	429a      	cmp	r2, r3
 80202de:	dc08      	bgt.n	80202f2 <GUI_RectsIntersect+0x36>
 80202e0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80202e4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80202e8:	4283      	cmp	r3, r0
 80202ea:	bfcc      	ite	gt
 80202ec:	2000      	movgt	r0, #0
 80202ee:	2001      	movle	r0, #1
 80202f0:	4770      	bx	lr
 80202f2:	2000      	movs	r0, #0
 80202f4:	4770      	bx	lr
 80202f6:	bf00      	nop

080202f8 <GUI_SaveContext_W>:
 80202f8:	b508      	push	{r3, lr}
 80202fa:	4b03      	ldr	r3, [pc, #12]	; (8020308 <GUI_SaveContext_W+0x10>)
 80202fc:	2274      	movs	r2, #116	; 0x74
 80202fe:	6819      	ldr	r1, [r3, #0]
 8020300:	f00e fbc5 	bl	802ea8e <memcpy>
 8020304:	bd08      	pop	{r3, pc}
 8020306:	bf00      	nop
 8020308:	200000e8 	.word	0x200000e8

0802030c <GUI_RestoreContext>:
 802030c:	b508      	push	{r3, lr}
 802030e:	4b03      	ldr	r3, [pc, #12]	; (802031c <GUI_RestoreContext+0x10>)
 8020310:	4601      	mov	r1, r0
 8020312:	2274      	movs	r2, #116	; 0x74
 8020314:	6818      	ldr	r0, [r3, #0]
 8020316:	f00e fbba 	bl	802ea8e <memcpy>
 802031a:	bd08      	pop	{r3, pc}
 802031c:	200000e8 	.word	0x200000e8

08020320 <GUI_SelectLCD>:
 8020320:	b508      	push	{r3, lr}
 8020322:	f001 f9cb 	bl	80216bc <GUI_Lock>
 8020326:	f003 fe35 	bl	8023f94 <LCD_SelectLCD>
 802032a:	f003 ff09 	bl	8024140 <LCD_UpdateColorIndices>
 802032e:	f008 f98d 	bl	802864c <WM_Activate>
 8020332:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8020336:	f001 b9b7 	b.w	80216a8 <GUI_Unlock>
 802033a:	bf00      	nop

0802033c <GUI_SetBkColor>:
 802033c:	b510      	push	{r4, lr}
 802033e:	4604      	mov	r4, r0
 8020340:	f001 f9bc 	bl	80216bc <GUI_Lock>
 8020344:	4620      	mov	r0, r4
 8020346:	f002 fecb 	bl	80230e0 <LCD_SetBkColor>
 802034a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802034e:	f001 b9ab 	b.w	80216a8 <GUI_Unlock>
 8020352:	bf00      	nop

08020354 <GUI_SetColor>:
 8020354:	b510      	push	{r4, lr}
 8020356:	4604      	mov	r4, r0
 8020358:	f001 f9b0 	bl	80216bc <GUI_Lock>
 802035c:	4620      	mov	r0, r4
 802035e:	f002 fec5 	bl	80230ec <LCD_SetColor>
 8020362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020366:	f001 b99f 	b.w	80216a8 <GUI_Unlock>
 802036a:	bf00      	nop

0802036c <GL_SetDefault>:
 802036c:	b538      	push	{r3, r4, r5, lr}
 802036e:	4b20      	ldr	r3, [pc, #128]	; (80203f0 <GL_SetDefault+0x84>)
 8020370:	4c20      	ldr	r4, [pc, #128]	; (80203f4 <GL_SetDefault+0x88>)
 8020372:	681d      	ldr	r5, [r3, #0]
 8020374:	f001 f9a2 	bl	80216bc <GUI_Lock>
 8020378:	4628      	mov	r0, r5
 802037a:	f002 feb1 	bl	80230e0 <LCD_SetBkColor>
 802037e:	f001 f993 	bl	80216a8 <GUI_Unlock>
 8020382:	4b1d      	ldr	r3, [pc, #116]	; (80203f8 <GL_SetDefault+0x8c>)
 8020384:	681d      	ldr	r5, [r3, #0]
 8020386:	f001 f999 	bl	80216bc <GUI_Lock>
 802038a:	4628      	mov	r0, r5
 802038c:	f002 feae 	bl	80230ec <LCD_SetColor>
 8020390:	f001 f98a 	bl	80216a8 <GUI_Unlock>
 8020394:	f001 f992 	bl	80216bc <GUI_Lock>
 8020398:	6823      	ldr	r3, [r4, #0]
 802039a:	2201      	movs	r2, #1
 802039c:	761a      	strb	r2, [r3, #24]
 802039e:	f001 f983 	bl	80216a8 <GUI_Unlock>
 80203a2:	f001 f98b 	bl	80216bc <GUI_Lock>
 80203a6:	6823      	ldr	r3, [r4, #0]
 80203a8:	2500      	movs	r5, #0
 80203aa:	859d      	strh	r5, [r3, #44]	; 0x2c
 80203ac:	f001 f97c 	bl	80216a8 <GUI_Unlock>
 80203b0:	f001 f984 	bl	80216bc <GUI_Lock>
 80203b4:	6823      	ldr	r3, [r4, #0]
 80203b6:	855d      	strh	r5, [r3, #42]	; 0x2a
 80203b8:	f001 f976 	bl	80216a8 <GUI_Unlock>
 80203bc:	f001 f97e 	bl	80216bc <GUI_Lock>
 80203c0:	4628      	mov	r0, r5
 80203c2:	f002 fa6f 	bl	80228a4 <LCD_SetDrawMode>
 80203c6:	f001 f96f 	bl	80216a8 <GUI_Unlock>
 80203ca:	4b0c      	ldr	r3, [pc, #48]	; (80203fc <GL_SetDefault+0x90>)
 80203cc:	681d      	ldr	r5, [r3, #0]
 80203ce:	f001 f975 	bl	80216bc <GUI_Lock>
 80203d2:	6823      	ldr	r3, [r4, #0]
 80203d4:	b105      	cbz	r5, 80203d8 <GL_SetDefault+0x6c>
 80203d6:	61dd      	str	r5, [r3, #28]
 80203d8:	f001 f966 	bl	80216a8 <GUI_Unlock>
 80203dc:	f001 f96e 	bl	80216bc <GUI_Lock>
 80203e0:	6823      	ldr	r3, [r4, #0]
 80203e2:	2200      	movs	r2, #0
 80203e4:	769a      	strb	r2, [r3, #26]
 80203e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80203ea:	f001 b95d 	b.w	80216a8 <GUI_Unlock>
 80203ee:	bf00      	nop
 80203f0:	200000e4 	.word	0x200000e4
 80203f4:	200000e8 	.word	0x200000e8
 80203f8:	200000e0 	.word	0x200000e0
 80203fc:	200000dc 	.word	0x200000dc

08020400 <GUI_SetDrawMode>:
 8020400:	b510      	push	{r4, lr}
 8020402:	4604      	mov	r4, r0
 8020404:	f001 f95a 	bl	80216bc <GUI_Lock>
 8020408:	4620      	mov	r0, r4
 802040a:	f002 fa4b 	bl	80228a4 <LCD_SetDrawMode>
 802040e:	4604      	mov	r4, r0
 8020410:	f001 f94a 	bl	80216a8 <GUI_Unlock>
 8020414:	4620      	mov	r0, r4
 8020416:	bd10      	pop	{r4, pc}

08020418 <GUI_SetFont>:
 8020418:	b538      	push	{r3, r4, r5, lr}
 802041a:	4604      	mov	r4, r0
 802041c:	f001 f94e 	bl	80216bc <GUI_Lock>
 8020420:	4b04      	ldr	r3, [pc, #16]	; (8020434 <GUI_SetFont+0x1c>)
 8020422:	681b      	ldr	r3, [r3, #0]
 8020424:	69dd      	ldr	r5, [r3, #28]
 8020426:	b104      	cbz	r4, 802042a <GUI_SetFont+0x12>
 8020428:	61dc      	str	r4, [r3, #28]
 802042a:	f001 f93d 	bl	80216a8 <GUI_Unlock>
 802042e:	4628      	mov	r0, r5
 8020430:	bd38      	pop	{r3, r4, r5, pc}
 8020432:	bf00      	nop
 8020434:	200000e8 	.word	0x200000e8

08020438 <GUI_SetOrg>:
 8020438:	b538      	push	{r3, r4, r5, lr}
 802043a:	4605      	mov	r5, r0
 802043c:	460c      	mov	r4, r1
 802043e:	f001 f93d 	bl	80216bc <GUI_Lock>
 8020442:	4a09      	ldr	r2, [pc, #36]	; (8020468 <GUI_SetOrg+0x30>)
 8020444:	4b09      	ldr	r3, [pc, #36]	; (802046c <GUI_SetOrg+0x34>)
 8020446:	6812      	ldr	r2, [r2, #0]
 8020448:	4909      	ldr	r1, [pc, #36]	; (8020470 <GUI_SetOrg+0x38>)
 802044a:	7c50      	ldrb	r0, [r2, #17]
 802044c:	4a09      	ldr	r2, [pc, #36]	; (8020474 <GUI_SetOrg+0x3c>)
 802044e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8020452:	800d      	strh	r5, [r1, #0]
 8020454:	68c3      	ldr	r3, [r0, #12]
 8020456:	8014      	strh	r4, [r2, #0]
 8020458:	4629      	mov	r1, r5
 802045a:	4622      	mov	r2, r4
 802045c:	6a1c      	ldr	r4, [r3, #32]
 802045e:	47a0      	blx	r4
 8020460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020464:	f001 b920 	b.w	80216a8 <GUI_Unlock>
 8020468:	200000e8 	.word	0x200000e8
 802046c:	200308b0 	.word	0x200308b0
 8020470:	20030888 	.word	0x20030888
 8020474:	20030878 	.word	0x20030878

08020478 <GUI_SetTextMode>:
 8020478:	b538      	push	{r3, r4, r5, lr}
 802047a:	4605      	mov	r5, r0
 802047c:	f001 f91e 	bl	80216bc <GUI_Lock>
 8020480:	4b04      	ldr	r3, [pc, #16]	; (8020494 <GUI_SetTextMode+0x1c>)
 8020482:	681b      	ldr	r3, [r3, #0]
 8020484:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
 8020488:	855d      	strh	r5, [r3, #42]	; 0x2a
 802048a:	f001 f90d 	bl	80216a8 <GUI_Unlock>
 802048e:	4620      	mov	r0, r4
 8020490:	bd38      	pop	{r3, r4, r5, pc}
 8020492:	bf00      	nop
 8020494:	200000e8 	.word	0x200000e8

08020498 <_InitContext>:
 8020498:	b570      	push	{r4, r5, r6, lr}
 802049a:	4d19      	ldr	r5, [pc, #100]	; (8020500 <_InitContext+0x68>)
 802049c:	4e19      	ldr	r6, [pc, #100]	; (8020504 <_InitContext+0x6c>)
 802049e:	692b      	ldr	r3, [r5, #16]
 80204a0:	4a19      	ldr	r2, [pc, #100]	; (8020508 <_InitContext+0x70>)
 80204a2:	4604      	mov	r4, r0
 80204a4:	f103 0108 	add.w	r1, r3, #8
 80204a8:	1d18      	adds	r0, r3, #4
 80204aa:	6726      	str	r6, [r4, #112]	; 0x70
 80204ac:	63d8      	str	r0, [r3, #60]	; 0x3c
 80204ae:	639b      	str	r3, [r3, #56]	; 0x38
 80204b0:	641b      	str	r3, [r3, #64]	; 0x40
 80204b2:	6161      	str	r1, [r4, #20]
 80204b4:	7c5b      	ldrb	r3, [r3, #17]
 80204b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80204ba:	68c3      	ldr	r3, [r0, #12]
 80204bc:	f104 0108 	add.w	r1, r4, #8
 80204c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80204c2:	4798      	blx	r3
 80204c4:	692b      	ldr	r3, [r5, #16]
 80204c6:	4a11      	ldr	r2, [pc, #68]	; (802050c <_InitContext+0x74>)
 80204c8:	6869      	ldr	r1, [r5, #4]
 80204ca:	6662      	str	r2, [r4, #100]	; 0x64
 80204cc:	3308      	adds	r3, #8
 80204ce:	2201      	movs	r2, #1
 80204d0:	61e1      	str	r1, [r4, #28]
 80204d2:	6163      	str	r3, [r4, #20]
 80204d4:	7622      	strb	r2, [r4, #24]
 80204d6:	76e2      	strb	r2, [r4, #27]
 80204d8:	f008 fbae 	bl	8028c38 <WM_GetDesktopWindow>
 80204dc:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80204e0:	2203      	movs	r2, #3
 80204e2:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
 80204e6:	6323      	str	r3, [r4, #48]	; 0x30
 80204e8:	6363      	str	r3, [r4, #52]	; 0x34
 80204ea:	64a0      	str	r0, [r4, #72]	; 0x48
 80204ec:	68e8      	ldr	r0, [r5, #12]
 80204ee:	f002 fdf7 	bl	80230e0 <LCD_SetBkColor>
 80204f2:	68a8      	ldr	r0, [r5, #8]
 80204f4:	f002 fdfa 	bl	80230ec <LCD_SetColor>
 80204f8:	4b05      	ldr	r3, [pc, #20]	; (8020510 <_InitContext+0x78>)
 80204fa:	4a06      	ldr	r2, [pc, #24]	; (8020514 <_InitContext+0x7c>)
 80204fc:	601a      	str	r2, [r3, #0]
 80204fe:	bd70      	pop	{r4, r5, r6, pc}
 8020500:	200000d8 	.word	0x200000d8
 8020504:	2002e2a0 	.word	0x2002e2a0
 8020508:	200308b0 	.word	0x200308b0
 802050c:	08036394 	.word	0x08036394
 8020510:	200308a8 	.word	0x200308a8
 8020514:	080363ac 	.word	0x080363ac

08020518 <_OnExit>:
 8020518:	b570      	push	{r4, r5, r6, lr}
 802051a:	4d0a      	ldr	r5, [pc, #40]	; (8020544 <_OnExit+0x2c>)
 802051c:	4e0a      	ldr	r6, [pc, #40]	; (8020548 <_OnExit+0x30>)
 802051e:	2400      	movs	r4, #0
 8020520:	4621      	mov	r1, r4
 8020522:	6833      	ldr	r3, [r6, #0]
 8020524:	67ec      	str	r4, [r5, #124]	; 0x7c
 8020526:	2274      	movs	r2, #116	; 0x74
 8020528:	4628      	mov	r0, r5
 802052a:	4798      	blx	r3
 802052c:	6833      	ldr	r3, [r6, #0]
 802052e:	4807      	ldr	r0, [pc, #28]	; (802054c <_OnExit+0x34>)
 8020530:	4621      	mov	r1, r4
 8020532:	2208      	movs	r2, #8
 8020534:	4798      	blx	r3
 8020536:	4a06      	ldr	r2, [pc, #24]	; (8020550 <_OnExit+0x38>)
 8020538:	4906      	ldr	r1, [pc, #24]	; (8020554 <_OnExit+0x3c>)
 802053a:	4b07      	ldr	r3, [pc, #28]	; (8020558 <_OnExit+0x40>)
 802053c:	7014      	strb	r4, [r2, #0]
 802053e:	610d      	str	r5, [r1, #16]
 8020540:	601c      	str	r4, [r3, #0]
 8020542:	bd70      	pop	{r4, r5, r6, pc}
 8020544:	2002e220 	.word	0x2002e220
 8020548:	2000010c 	.word	0x2000010c
 802054c:	200308b0 	.word	0x200308b0
 8020550:	20030898 	.word	0x20030898
 8020554:	200000d8 	.word	0x200000d8
 8020558:	20030874 	.word	0x20030874

0802055c <GUI_Clear>:
 802055c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020560:	2100      	movs	r1, #0
 8020562:	b082      	sub	sp, #8
 8020564:	4608      	mov	r0, r1
 8020566:	f7ff fe8b 	bl	8020280 <GUI_GotoXY>
 802056a:	f001 f8a7 	bl	80216bc <GUI_Lock>
 802056e:	2004      	movs	r0, #4
 8020570:	f002 f998 	bl	80228a4 <LCD_SetDrawMode>
 8020574:	4b17      	ldr	r3, [pc, #92]	; (80205d4 <GUI_Clear+0x78>)
 8020576:	691b      	ldr	r3, [r3, #16]
 8020578:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 802057a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 802057c:	f5a5 577f 	sub.w	r7, r5, #16320	; 0x3fc0
 8020580:	f5a4 567f 	sub.w	r6, r4, #16320	; 0x3fc0
 8020584:	f505 557f 	add.w	r5, r5, #16320	; 0x3fc0
 8020588:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
 802058c:	4680      	mov	r8, r0
 802058e:	3f3f      	subs	r7, #63	; 0x3f
 8020590:	353f      	adds	r5, #63	; 0x3f
 8020592:	3e3f      	subs	r6, #63	; 0x3f
 8020594:	343f      	adds	r4, #63	; 0x3f
 8020596:	4668      	mov	r0, sp
 8020598:	f8ad 7000 	strh.w	r7, [sp]
 802059c:	f8ad 5004 	strh.w	r5, [sp, #4]
 80205a0:	f8ad 6002 	strh.w	r6, [sp, #2]
 80205a4:	f8ad 4006 	strh.w	r4, [sp, #6]
 80205a8:	f007 fd24 	bl	8027ff4 <WM__InitIVRSearch>
 80205ac:	b148      	cbz	r0, 80205c2 <GUI_Clear+0x66>
 80205ae:	4623      	mov	r3, r4
 80205b0:	462a      	mov	r2, r5
 80205b2:	4631      	mov	r1, r6
 80205b4:	4638      	mov	r0, r7
 80205b6:	f002 fa05 	bl	80229c4 <LCD_FillRect>
 80205ba:	f007 fbf5 	bl	8027da8 <WM__GetNextIVR>
 80205be:	2800      	cmp	r0, #0
 80205c0:	d1f5      	bne.n	80205ae <GUI_Clear+0x52>
 80205c2:	4640      	mov	r0, r8
 80205c4:	f002 f96e 	bl	80228a4 <LCD_SetDrawMode>
 80205c8:	f001 f86e 	bl	80216a8 <GUI_Unlock>
 80205cc:	b002      	add	sp, #8
 80205ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80205d2:	bf00      	nop
 80205d4:	200000d8 	.word	0x200000d8

080205d8 <GUI__Config>:
 80205d8:	b530      	push	{r4, r5, lr}
 80205da:	4d1b      	ldr	r5, [pc, #108]	; (8020648 <GUI__Config+0x70>)
 80205dc:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80205de:	b085      	sub	sp, #20
 80205e0:	b10b      	cbz	r3, 80205e6 <GUI__Config+0xe>
 80205e2:	b005      	add	sp, #20
 80205e4:	bd30      	pop	{r4, r5, pc}
 80205e6:	4b19      	ldr	r3, [pc, #100]	; (802064c <GUI__Config+0x74>)
 80205e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80205ea:	466c      	mov	r4, sp
 80205ec:	c407      	stmia	r4!, {r0, r1, r2}
 80205ee:	a904      	add	r1, sp, #16
 80205f0:	f824 3b02 	strh.w	r3, [r4], #2
 80205f4:	0c1b      	lsrs	r3, r3, #16
 80205f6:	7023      	strb	r3, [r4, #0]
 80205f8:	f811 2d10 	ldrb.w	r2, [r1, #-16]!
 80205fc:	2301      	movs	r3, #1
 80205fe:	67eb      	str	r3, [r5, #124]	; 0x7c
 8020600:	f105 0480 	add.w	r4, r5, #128	; 0x80
 8020604:	f804 2b01 	strb.w	r2, [r4], #1
 8020608:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802060c:	2a00      	cmp	r2, #0
 802060e:	d1f9      	bne.n	8020604 <GUI__Config+0x2c>
 8020610:	f7ff fd68 	bl	80200e4 <GUI_GetVersionString>
 8020614:	4623      	mov	r3, r4
 8020616:	f810 2b01 	ldrb.w	r2, [r0], #1
 802061a:	4619      	mov	r1, r3
 802061c:	f803 2b01 	strb.w	r2, [r3], #1
 8020620:	7802      	ldrb	r2, [r0, #0]
 8020622:	2a00      	cmp	r2, #0
 8020624:	d1f7      	bne.n	8020616 <GUI__Config+0x3e>
 8020626:	704a      	strb	r2, [r1, #1]
 8020628:	f7fc ffb4 	bl	801d594 <GUI_X_Config>
 802062c:	f001 f896 	bl	802175c <GUITASK_Init>
 8020630:	f7fd ff24 	bl	801e47c <LCD_X_Config>
 8020634:	4b06      	ldr	r3, [pc, #24]	; (8020650 <GUI__Config+0x78>)
 8020636:	4807      	ldr	r0, [pc, #28]	; (8020654 <GUI__Config+0x7c>)
 8020638:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 802063c:	b005      	add	sp, #20
 802063e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020642:	f000 b887 	b.w	8020754 <GUI__RegisterExit>
 8020646:	bf00      	nop
 8020648:	2002e220 	.word	0x2002e220
 802064c:	0803639c 	.word	0x0803639c
 8020650:	08020519 	.word	0x08020519
 8020654:	2002e2b4 	.word	0x2002e2b4

08020658 <GUI_Init>:
 8020658:	b590      	push	{r4, r7, lr}
 802065a:	b083      	sub	sp, #12
 802065c:	af00      	add	r7, sp, #0
 802065e:	4a34      	ldr	r2, [pc, #208]	; (8020730 <GUI_Init+0xd8>)
 8020660:	4b33      	ldr	r3, [pc, #204]	; (8020730 <GUI_Init+0xd8>)
 8020662:	681b      	ldr	r3, [r3, #0]
 8020664:	f023 0301 	bic.w	r3, r3, #1
 8020668:	6013      	str	r3, [r2, #0]
 802066a:	4b32      	ldr	r3, [pc, #200]	; (8020734 <GUI_Init+0xdc>)
 802066c:	2201      	movs	r2, #1
 802066e:	601a      	str	r2, [r3, #0]
 8020670:	bf00      	nop
 8020672:	4b30      	ldr	r3, [pc, #192]	; (8020734 <GUI_Init+0xdc>)
 8020674:	681b      	ldr	r3, [r3, #0]
 8020676:	2b00      	cmp	r3, #0
 8020678:	d1fb      	bne.n	8020672 <GUI_Init+0x1a>
 802067a:	4b2f      	ldr	r3, [pc, #188]	; (8020738 <GUI_Init+0xe0>)
 802067c:	4a2f      	ldr	r2, [pc, #188]	; (802073c <GUI_Init+0xe4>)
 802067e:	601a      	str	r2, [r3, #0]
 8020680:	4b2d      	ldr	r3, [pc, #180]	; (8020738 <GUI_Init+0xe0>)
 8020682:	681b      	ldr	r3, [r3, #0]
 8020684:	4a2e      	ldr	r2, [pc, #184]	; (8020740 <GUI_Init+0xe8>)
 8020686:	4293      	cmp	r3, r2
 8020688:	d000      	beq.n	802068c <GUI_Init+0x34>
 802068a:	e7fe      	b.n	802068a <GUI_Init+0x32>
 802068c:	f7ff ffa4 	bl	80205d8 <GUI__Config>
 8020690:	4b2c      	ldr	r3, [pc, #176]	; (8020744 <GUI_Init+0xec>)
 8020692:	222e      	movs	r2, #46	; 0x2e
 8020694:	701a      	strb	r2, [r3, #0]
 8020696:	f7f7 fe9b 	bl	80183d0 <GUI_X_Init>
 802069a:	482b      	ldr	r0, [pc, #172]	; (8020748 <GUI_Init+0xf0>)
 802069c:	f7ff fefc 	bl	8020498 <_InitContext>
 80206a0:	f002 fc62 	bl	8022f68 <emWin_LCD_Init>
 80206a4:	6078      	str	r0, [r7, #4]
 80206a6:	f002 ff95 	bl	80235d4 <LCD_GetXSizeDisplay>
 80206aa:	4603      	mov	r3, r0
 80206ac:	2b00      	cmp	r3, #0
 80206ae:	bf0c      	ite	eq
 80206b0:	2301      	moveq	r3, #1
 80206b2:	2300      	movne	r3, #0
 80206b4:	b2dc      	uxtb	r4, r3
 80206b6:	f002 ff93 	bl	80235e0 <LCD_GetYSizeDisplay>
 80206ba:	4603      	mov	r3, r0
 80206bc:	2b00      	cmp	r3, #0
 80206be:	bf0c      	ite	eq
 80206c0:	2301      	moveq	r3, #1
 80206c2:	2300      	movne	r3, #0
 80206c4:	b2db      	uxtb	r3, r3
 80206c6:	4323      	orrs	r3, r4
 80206c8:	b2db      	uxtb	r3, r3
 80206ca:	2b00      	cmp	r3, #0
 80206cc:	d009      	beq.n	80206e2 <GUI_Init+0x8a>
 80206ce:	f002 ff2d 	bl	802352c <LCD_GetXSizeMax>
 80206d2:	4604      	mov	r4, r0
 80206d4:	f002 ff44 	bl	8023560 <LCD_GetYSizeMax>
 80206d8:	4603      	mov	r3, r0
 80206da:	4619      	mov	r1, r3
 80206dc:	4620      	mov	r0, r4
 80206de:	f002 ff73 	bl	80235c8 <LCD_SetDisplaySize>
 80206e2:	2100      	movs	r1, #0
 80206e4:	2000      	movs	r0, #0
 80206e6:	f7ff fea7 	bl	8020438 <GUI_SetOrg>
 80206ea:	f007 fff7 	bl	80286dc <WM_Init>
 80206ee:	f001 f871 	bl	80217d4 <GUITASK_CopyContext>
 80206f2:	4b16      	ldr	r3, [pc, #88]	; (802074c <GUI_Init+0xf4>)
 80206f4:	681b      	ldr	r3, [r3, #0]
 80206f6:	2b00      	cmp	r3, #0
 80206f8:	d012      	beq.n	8020720 <GUI_Init+0xc8>
 80206fa:	e00d      	b.n	8020718 <GUI_Init+0xc0>
 80206fc:	4b13      	ldr	r3, [pc, #76]	; (802074c <GUI_Init+0xf4>)
 80206fe:	681b      	ldr	r3, [r3, #0]
 8020700:	681b      	ldr	r3, [r3, #0]
 8020702:	2b00      	cmp	r3, #0
 8020704:	d003      	beq.n	802070e <GUI_Init+0xb6>
 8020706:	4b11      	ldr	r3, [pc, #68]	; (802074c <GUI_Init+0xf4>)
 8020708:	681b      	ldr	r3, [r3, #0]
 802070a:	681b      	ldr	r3, [r3, #0]
 802070c:	4798      	blx	r3
 802070e:	4b0f      	ldr	r3, [pc, #60]	; (802074c <GUI_Init+0xf4>)
 8020710:	681b      	ldr	r3, [r3, #0]
 8020712:	685b      	ldr	r3, [r3, #4]
 8020714:	4a0d      	ldr	r2, [pc, #52]	; (802074c <GUI_Init+0xf4>)
 8020716:	6013      	str	r3, [r2, #0]
 8020718:	4b0c      	ldr	r3, [pc, #48]	; (802074c <GUI_Init+0xf4>)
 802071a:	681b      	ldr	r3, [r3, #0]
 802071c:	2b00      	cmp	r3, #0
 802071e:	d1ed      	bne.n	80206fc <GUI_Init+0xa4>
 8020720:	4b0b      	ldr	r3, [pc, #44]	; (8020750 <GUI_Init+0xf8>)
 8020722:	2201      	movs	r2, #1
 8020724:	701a      	strb	r2, [r3, #0]
 8020726:	687b      	ldr	r3, [r7, #4]
 8020728:	4618      	mov	r0, r3
 802072a:	370c      	adds	r7, #12
 802072c:	46bd      	mov	sp, r7
 802072e:	bd90      	pop	{r4, r7, pc}
 8020730:	e0002000 	.word	0xe0002000
 8020734:	40023008 	.word	0x40023008
 8020738:	40023000 	.word	0x40023000
 802073c:	f407a5c2 	.word	0xf407a5c2
 8020740:	b5e8b5cd 	.word	0xb5e8b5cd
 8020744:	20030868 	.word	0x20030868
 8020748:	2002e220 	.word	0x2002e220
 802074c:	2002e298 	.word	0x2002e298
 8020750:	20030890 	.word	0x20030890

08020754 <GUI__RegisterExit>:
 8020754:	b480      	push	{r7}
 8020756:	b083      	sub	sp, #12
 8020758:	af00      	add	r7, sp, #0
 802075a:	6078      	str	r0, [r7, #4]
 802075c:	4b06      	ldr	r3, [pc, #24]	; (8020778 <GUI__RegisterExit+0x24>)
 802075e:	681a      	ldr	r2, [r3, #0]
 8020760:	687b      	ldr	r3, [r7, #4]
 8020762:	605a      	str	r2, [r3, #4]
 8020764:	4a04      	ldr	r2, [pc, #16]	; (8020778 <GUI__RegisterExit+0x24>)
 8020766:	687b      	ldr	r3, [r7, #4]
 8020768:	6013      	str	r3, [r2, #0]
 802076a:	bf00      	nop
 802076c:	370c      	adds	r7, #12
 802076e:	46bd      	mov	sp, r7
 8020770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020774:	4770      	bx	lr
 8020776:	bf00      	nop
 8020778:	2002e294 	.word	0x2002e294

0802077c <GUI_DCACHE_Clear>:
 802077c:	b580      	push	{r7, lr}
 802077e:	b082      	sub	sp, #8
 8020780:	af00      	add	r7, sp, #0
 8020782:	6078      	str	r0, [r7, #4]
 8020784:	4b05      	ldr	r3, [pc, #20]	; (802079c <GUI_DCACHE_Clear+0x20>)
 8020786:	681b      	ldr	r3, [r3, #0]
 8020788:	2b00      	cmp	r3, #0
 802078a:	d003      	beq.n	8020794 <GUI_DCACHE_Clear+0x18>
 802078c:	4b03      	ldr	r3, [pc, #12]	; (802079c <GUI_DCACHE_Clear+0x20>)
 802078e:	681b      	ldr	r3, [r3, #0]
 8020790:	6878      	ldr	r0, [r7, #4]
 8020792:	4798      	blx	r3
 8020794:	bf00      	nop
 8020796:	3708      	adds	r7, #8
 8020798:	46bd      	mov	sp, r7
 802079a:	bd80      	pop	{r7, pc}
 802079c:	20030874 	.word	0x20030874

080207a0 <GUI_DEVICE__GetpDriver>:
 80207a0:	2801      	cmp	r0, #1
 80207a2:	dc0e      	bgt.n	80207c2 <GUI_DEVICE__GetpDriver+0x22>
 80207a4:	4b08      	ldr	r3, [pc, #32]	; (80207c8 <GUI_DEVICE__GetpDriver+0x28>)
 80207a6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80207aa:	b158      	cbz	r0, 80207c4 <GUI_DEVICE__GetpDriver+0x24>
 80207ac:	68c3      	ldr	r3, [r0, #12]
 80207ae:	681b      	ldr	r3, [r3, #0]
 80207b0:	b91b      	cbnz	r3, 80207ba <GUI_DEVICE__GetpDriver+0x1a>
 80207b2:	e008      	b.n	80207c6 <GUI_DEVICE__GetpDriver+0x26>
 80207b4:	68c3      	ldr	r3, [r0, #12]
 80207b6:	681b      	ldr	r3, [r3, #0]
 80207b8:	b123      	cbz	r3, 80207c4 <GUI_DEVICE__GetpDriver+0x24>
 80207ba:	6800      	ldr	r0, [r0, #0]
 80207bc:	2800      	cmp	r0, #0
 80207be:	d1f9      	bne.n	80207b4 <GUI_DEVICE__GetpDriver+0x14>
 80207c0:	4770      	bx	lr
 80207c2:	2000      	movs	r0, #0
 80207c4:	4770      	bx	lr
 80207c6:	4770      	bx	lr
 80207c8:	200308b0 	.word	0x200308b0

080207cc <GUI_DEVICE_Delete>:
 80207cc:	f7fe bfb2 	b.w	801f734 <GUI_ALLOC_FreeFixedBlock>

080207d0 <GUI_DEVICE_Create>:
 80207d0:	2b01      	cmp	r3, #1
 80207d2:	dc12      	bgt.n	80207fa <GUI_DEVICE_Create+0x2a>
 80207d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80207d6:	4606      	mov	r6, r0
 80207d8:	201c      	movs	r0, #28
 80207da:	4617      	mov	r7, r2
 80207dc:	460c      	mov	r4, r1
 80207de:	461d      	mov	r5, r3
 80207e0:	f7fe ffb2 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 80207e4:	b1b8      	cbz	r0, 8020816 <GUI_DEVICE_Create+0x46>
 80207e6:	b154      	cbz	r4, 80207fe <GUI_DEVICE_Create+0x2e>
 80207e8:	6104      	str	r4, [r0, #16]
 80207ea:	2300      	movs	r3, #0
 80207ec:	6083      	str	r3, [r0, #8]
 80207ee:	6185      	str	r5, [r0, #24]
 80207f0:	8287      	strh	r7, [r0, #20]
 80207f2:	60c6      	str	r6, [r0, #12]
 80207f4:	6003      	str	r3, [r0, #0]
 80207f6:	6043      	str	r3, [r0, #4]
 80207f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80207fa:	2000      	movs	r0, #0
 80207fc:	4770      	bx	lr
 80207fe:	4b07      	ldr	r3, [pc, #28]	; (802081c <GUI_DEVICE_Create+0x4c>)
 8020800:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8020804:	b90a      	cbnz	r2, 802080a <GUI_DEVICE_Create+0x3a>
 8020806:	e7f0      	b.n	80207ea <GUI_DEVICE_Create+0x1a>
 8020808:	461a      	mov	r2, r3
 802080a:	6813      	ldr	r3, [r2, #0]
 802080c:	2b00      	cmp	r3, #0
 802080e:	d1fb      	bne.n	8020808 <GUI_DEVICE_Create+0x38>
 8020810:	6913      	ldr	r3, [r2, #16]
 8020812:	6103      	str	r3, [r0, #16]
 8020814:	e7e9      	b.n	80207ea <GUI_DEVICE_Create+0x1a>
 8020816:	2000      	movs	r0, #0
 8020818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802081a:	bf00      	nop
 802081c:	200308b0 	.word	0x200308b0

08020820 <GUI_DEVICE_Unlink>:
 8020820:	4a0f      	ldr	r2, [pc, #60]	; (8020860 <GUI_DEVICE_Unlink+0x40>)
 8020822:	6981      	ldr	r1, [r0, #24]
 8020824:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020828:	4298      	cmp	r0, r3
 802082a:	d00a      	beq.n	8020842 <GUI_DEVICE_Unlink+0x22>
 802082c:	6842      	ldr	r2, [r0, #4]
 802082e:	b10a      	cbz	r2, 8020834 <GUI_DEVICE_Unlink+0x14>
 8020830:	6803      	ldr	r3, [r0, #0]
 8020832:	6013      	str	r3, [r2, #0]
 8020834:	6803      	ldr	r3, [r0, #0]
 8020836:	b103      	cbz	r3, 802083a <GUI_DEVICE_Unlink+0x1a>
 8020838:	605a      	str	r2, [r3, #4]
 802083a:	2300      	movs	r3, #0
 802083c:	6003      	str	r3, [r0, #0]
 802083e:	6043      	str	r3, [r0, #4]
 8020840:	4770      	bx	lr
 8020842:	6803      	ldr	r3, [r0, #0]
 8020844:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8020848:	b12b      	cbz	r3, 8020856 <GUI_DEVICE_Unlink+0x36>
 802084a:	2200      	movs	r2, #0
 802084c:	605a      	str	r2, [r3, #4]
 802084e:	6842      	ldr	r2, [r0, #4]
 8020850:	2a00      	cmp	r2, #0
 8020852:	d1ee      	bne.n	8020832 <GUI_DEVICE_Unlink+0x12>
 8020854:	e7f0      	b.n	8020838 <GUI_DEVICE_Unlink+0x18>
 8020856:	6842      	ldr	r2, [r0, #4]
 8020858:	2a00      	cmp	r2, #0
 802085a:	d1ea      	bne.n	8020832 <GUI_DEVICE_Unlink+0x12>
 802085c:	e7ed      	b.n	802083a <GUI_DEVICE_Unlink+0x1a>
 802085e:	bf00      	nop
 8020860:	200308b0 	.word	0x200308b0

08020864 <GUI_DEVICE_Link>:
 8020864:	2800      	cmp	r0, #0
 8020866:	d03c      	beq.n	80208e2 <GUI_DEVICE_Link+0x7e>
 8020868:	b470      	push	{r4, r5, r6}
 802086a:	6984      	ldr	r4, [r0, #24]
 802086c:	2c01      	cmp	r4, #1
 802086e:	dd03      	ble.n	8020878 <GUI_DEVICE_Link+0x14>
 8020870:	2301      	movs	r3, #1
 8020872:	4618      	mov	r0, r3
 8020874:	bc70      	pop	{r4, r5, r6}
 8020876:	4770      	bx	lr
 8020878:	4b1e      	ldr	r3, [pc, #120]	; (80208f4 <GUI_DEVICE_Link+0x90>)
 802087a:	4d1f      	ldr	r5, [pc, #124]	; (80208f8 <GUI_DEVICE_Link+0x94>)
 802087c:	781a      	ldrb	r2, [r3, #0]
 802087e:	4294      	cmp	r4, r2
 8020880:	bfa4      	itt	ge
 8020882:	1c62      	addge	r2, r4, #1
 8020884:	701a      	strbge	r2, [r3, #0]
 8020886:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 802088a:	b90b      	cbnz	r3, 8020890 <GUI_DEVICE_Link+0x2c>
 802088c:	e02f      	b.n	80208ee <GUI_DEVICE_Link+0x8a>
 802088e:	4613      	mov	r3, r2
 8020890:	685a      	ldr	r2, [r3, #4]
 8020892:	2a00      	cmp	r2, #0
 8020894:	d1fb      	bne.n	802088e <GUI_DEVICE_Link+0x2a>
 8020896:	68c2      	ldr	r2, [r0, #12]
 8020898:	6811      	ldr	r1, [r2, #0]
 802089a:	e002      	b.n	80208a2 <GUI_DEVICE_Link+0x3e>
 802089c:	681b      	ldr	r3, [r3, #0]
 802089e:	2b00      	cmp	r3, #0
 80208a0:	d0e6      	beq.n	8020870 <GUI_DEVICE_Link+0xc>
 80208a2:	68da      	ldr	r2, [r3, #12]
 80208a4:	6812      	ldr	r2, [r2, #0]
 80208a6:	4291      	cmp	r1, r2
 80208a8:	dbf8      	blt.n	802089c <GUI_DEVICE_Link+0x38>
 80208aa:	d00d      	beq.n	80208c8 <GUI_DEVICE_Link+0x64>
 80208ac:	685a      	ldr	r2, [r3, #4]
 80208ae:	b1da      	cbz	r2, 80208e8 <GUI_DEVICE_Link+0x84>
 80208b0:	6010      	str	r0, [r2, #0]
 80208b2:	6042      	str	r2, [r0, #4]
 80208b4:	4298      	cmp	r0, r3
 80208b6:	bf14      	ite	ne
 80208b8:	461a      	movne	r2, r3
 80208ba:	2200      	moveq	r2, #0
 80208bc:	6058      	str	r0, [r3, #4]
 80208be:	2300      	movs	r3, #0
 80208c0:	6002      	str	r2, [r0, #0]
 80208c2:	bc70      	pop	{r4, r5, r6}
 80208c4:	4618      	mov	r0, r3
 80208c6:	4770      	bx	lr
 80208c8:	8a82      	ldrh	r2, [r0, #20]
 80208ca:	2a01      	cmp	r2, #1
 80208cc:	d1ee      	bne.n	80208ac <GUI_DEVICE_Link+0x48>
 80208ce:	e004      	b.n	80208da <GUI_DEVICE_Link+0x76>
 80208d0:	68d3      	ldr	r3, [r2, #12]
 80208d2:	681e      	ldr	r6, [r3, #0]
 80208d4:	42b1      	cmp	r1, r6
 80208d6:	4613      	mov	r3, r2
 80208d8:	dce8      	bgt.n	80208ac <GUI_DEVICE_Link+0x48>
 80208da:	681a      	ldr	r2, [r3, #0]
 80208dc:	2a00      	cmp	r2, #0
 80208de:	d1f7      	bne.n	80208d0 <GUI_DEVICE_Link+0x6c>
 80208e0:	e7e4      	b.n	80208ac <GUI_DEVICE_Link+0x48>
 80208e2:	2301      	movs	r3, #1
 80208e4:	4618      	mov	r0, r3
 80208e6:	4770      	bx	lr
 80208e8:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 80208ec:	e7e2      	b.n	80208b4 <GUI_DEVICE_Link+0x50>
 80208ee:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 80208f2:	e7be      	b.n	8020872 <GUI_DEVICE_Link+0xe>
 80208f4:	20030862 	.word	0x20030862
 80208f8:	200308b0 	.word	0x200308b0

080208fc <GUI_DEVICE_CreateAndLink>:
 80208fc:	2b01      	cmp	r3, #1
 80208fe:	dc3b      	bgt.n	8020978 <GUI_DEVICE_CreateAndLink+0x7c>
 8020900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020904:	4681      	mov	r9, r0
 8020906:	201c      	movs	r0, #28
 8020908:	4690      	mov	r8, r2
 802090a:	460f      	mov	r7, r1
 802090c:	461e      	mov	r6, r3
 802090e:	f7fe ff1b 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8020912:	4605      	mov	r5, r0
 8020914:	2800      	cmp	r0, #0
 8020916:	d07f      	beq.n	8020a18 <GUI_DEVICE_CreateAndLink+0x11c>
 8020918:	4a41      	ldr	r2, [pc, #260]	; (8020a20 <GUI_DEVICE_CreateAndLink+0x124>)
 802091a:	2f00      	cmp	r7, #0
 802091c:	d031      	beq.n	8020982 <GUI_DEVICE_CreateAndLink+0x86>
 802091e:	2300      	movs	r3, #0
 8020920:	f8df e104 	ldr.w	lr, [pc, #260]	; 8020a28 <GUI_DEVICE_CreateAndLink+0x12c>
 8020924:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
 8020928:	6003      	str	r3, [r0, #0]
 802092a:	f89e 1000 	ldrb.w	r1, [lr]
 802092e:	6107      	str	r7, [r0, #16]
 8020930:	428e      	cmp	r6, r1
 8020932:	6186      	str	r6, [r0, #24]
 8020934:	f8a0 8014 	strh.w	r8, [r0, #20]
 8020938:	f8c0 900c 	str.w	r9, [r0, #12]
 802093c:	6043      	str	r3, [r0, #4]
 802093e:	6083      	str	r3, [r0, #8]
 8020940:	db02      	blt.n	8020948 <GUI_DEVICE_CreateAndLink+0x4c>
 8020942:	1c73      	adds	r3, r6, #1
 8020944:	f88e 3000 	strb.w	r3, [lr]
 8020948:	2c00      	cmp	r4, #0
 802094a:	d05d      	beq.n	8020a08 <GUI_DEVICE_CreateAndLink+0x10c>
 802094c:	4621      	mov	r1, r4
 802094e:	684c      	ldr	r4, [r1, #4]
 8020950:	2c00      	cmp	r4, #0
 8020952:	d1fb      	bne.n	802094c <GUI_DEVICE_CreateAndLink+0x50>
 8020954:	f8d9 0000 	ldr.w	r0, [r9]
 8020958:	68cb      	ldr	r3, [r1, #12]
 802095a:	681b      	ldr	r3, [r3, #0]
 802095c:	4283      	cmp	r3, r0
 802095e:	dd2c      	ble.n	80209ba <GUI_DEVICE_CreateAndLink+0xbe>
 8020960:	6809      	ldr	r1, [r1, #0]
 8020962:	2900      	cmp	r1, #0
 8020964:	d1f8      	bne.n	8020958 <GUI_DEVICE_CreateAndLink+0x5c>
 8020966:	b948      	cbnz	r0, 802097c <GUI_DEVICE_CreateAndLink+0x80>
 8020968:	4b2e      	ldr	r3, [pc, #184]	; (8020a24 <GUI_DEVICE_CreateAndLink+0x128>)
 802096a:	3616      	adds	r6, #22
 802096c:	681a      	ldr	r2, [r3, #0]
 802096e:	4628      	mov	r0, r5
 8020970:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8020974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020978:	2000      	movs	r0, #0
 802097a:	4770      	bx	lr
 802097c:	4628      	mov	r0, r5
 802097e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020982:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 8020986:	2900      	cmp	r1, #0
 8020988:	d030      	beq.n	80209ec <GUI_DEVICE_CreateAndLink+0xf0>
 802098a:	4608      	mov	r0, r1
 802098c:	e000      	b.n	8020990 <GUI_DEVICE_CreateAndLink+0x94>
 802098e:	4618      	mov	r0, r3
 8020990:	6803      	ldr	r3, [r0, #0]
 8020992:	2b00      	cmp	r3, #0
 8020994:	d1fb      	bne.n	802098e <GUI_DEVICE_CreateAndLink+0x92>
 8020996:	f8df e090 	ldr.w	lr, [pc, #144]	; 8020a28 <GUI_DEVICE_CreateAndLink+0x12c>
 802099a:	6900      	ldr	r0, [r0, #16]
 802099c:	602b      	str	r3, [r5, #0]
 802099e:	6128      	str	r0, [r5, #16]
 80209a0:	f89e 0000 	ldrb.w	r0, [lr]
 80209a4:	61ae      	str	r6, [r5, #24]
 80209a6:	4286      	cmp	r6, r0
 80209a8:	f8a5 8014 	strh.w	r8, [r5, #20]
 80209ac:	f8c5 900c 	str.w	r9, [r5, #12]
 80209b0:	606b      	str	r3, [r5, #4]
 80209b2:	60ab      	str	r3, [r5, #8]
 80209b4:	dbcb      	blt.n	802094e <GUI_DEVICE_CreateAndLink+0x52>
 80209b6:	460c      	mov	r4, r1
 80209b8:	e7c3      	b.n	8020942 <GUI_DEVICE_CreateAndLink+0x46>
 80209ba:	d00a      	beq.n	80209d2 <GUI_DEVICE_CreateAndLink+0xd6>
 80209bc:	684b      	ldr	r3, [r1, #4]
 80209be:	b343      	cbz	r3, 8020a12 <GUI_DEVICE_CreateAndLink+0x116>
 80209c0:	601d      	str	r5, [r3, #0]
 80209c2:	606b      	str	r3, [r5, #4]
 80209c4:	428d      	cmp	r5, r1
 80209c6:	bf14      	ite	ne
 80209c8:	460b      	movne	r3, r1
 80209ca:	2300      	moveq	r3, #0
 80209cc:	604d      	str	r5, [r1, #4]
 80209ce:	602b      	str	r3, [r5, #0]
 80209d0:	e7c9      	b.n	8020966 <GUI_DEVICE_CreateAndLink+0x6a>
 80209d2:	f1b8 0f01 	cmp.w	r8, #1
 80209d6:	d1f1      	bne.n	80209bc <GUI_DEVICE_CreateAndLink+0xc0>
 80209d8:	e004      	b.n	80209e4 <GUI_DEVICE_CreateAndLink+0xe8>
 80209da:	68d9      	ldr	r1, [r3, #12]
 80209dc:	680c      	ldr	r4, [r1, #0]
 80209de:	4284      	cmp	r4, r0
 80209e0:	4619      	mov	r1, r3
 80209e2:	dbeb      	blt.n	80209bc <GUI_DEVICE_CreateAndLink+0xc0>
 80209e4:	680b      	ldr	r3, [r1, #0]
 80209e6:	2b00      	cmp	r3, #0
 80209e8:	d1f7      	bne.n	80209da <GUI_DEVICE_CreateAndLink+0xde>
 80209ea:	e7e7      	b.n	80209bc <GUI_DEVICE_CreateAndLink+0xc0>
 80209ec:	f8df e038 	ldr.w	lr, [pc, #56]	; 8020a28 <GUI_DEVICE_CreateAndLink+0x12c>
 80209f0:	6001      	str	r1, [r0, #0]
 80209f2:	f89e 3000 	ldrb.w	r3, [lr]
 80209f6:	6186      	str	r6, [r0, #24]
 80209f8:	429e      	cmp	r6, r3
 80209fa:	f8a0 8014 	strh.w	r8, [r0, #20]
 80209fe:	f8c0 900c 	str.w	r9, [r0, #12]
 8020a02:	6041      	str	r1, [r0, #4]
 8020a04:	6081      	str	r1, [r0, #8]
 8020a06:	dad6      	bge.n	80209b6 <GUI_DEVICE_CreateAndLink+0xba>
 8020a08:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8020a0c:	f8d9 0000 	ldr.w	r0, [r9]
 8020a10:	e7a9      	b.n	8020966 <GUI_DEVICE_CreateAndLink+0x6a>
 8020a12:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8020a16:	e7d5      	b.n	80209c4 <GUI_DEVICE_CreateAndLink+0xc8>
 8020a18:	2000      	movs	r0, #0
 8020a1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020a1e:	bf00      	nop
 8020a20:	200308b0 	.word	0x200308b0
 8020a24:	200000e8 	.word	0x200000e8
 8020a28:	20030862 	.word	0x20030862

08020a2c <GUI_DEVICE_UnlinkTaskDevices>:
 8020a2c:	2000      	movs	r0, #0
 8020a2e:	4770      	bx	lr

08020a30 <GUI_DEVICE_LinkDevices>:
 8020a30:	2800      	cmp	r0, #0
 8020a32:	d04d      	beq.n	8020ad0 <GUI_DEVICE_LinkDevices+0xa0>
 8020a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a38:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8020ad8 <GUI_DEVICE_LinkDevices+0xa8>
 8020a3c:	4f25      	ldr	r7, [pc, #148]	; (8020ad4 <GUI_DEVICE_LinkDevices+0xa4>)
 8020a3e:	f89e 6000 	ldrb.w	r6, [lr]
 8020a42:	46bc      	mov	ip, r7
 8020a44:	e002      	b.n	8020a4c <GUI_DEVICE_LinkDevices+0x1c>
 8020a46:	4628      	mov	r0, r5
 8020a48:	2d00      	cmp	r5, #0
 8020a4a:	d027      	beq.n	8020a9c <GUI_DEVICE_LinkDevices+0x6c>
 8020a4c:	6984      	ldr	r4, [r0, #24]
 8020a4e:	6805      	ldr	r5, [r0, #0]
 8020a50:	2c01      	cmp	r4, #1
 8020a52:	dcf8      	bgt.n	8020a46 <GUI_DEVICE_LinkDevices+0x16>
 8020a54:	42b4      	cmp	r4, r6
 8020a56:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8020a5a:	bfa4      	itt	ge
 8020a5c:	1c66      	addge	r6, r4, #1
 8020a5e:	b2f6      	uxtbge	r6, r6
 8020a60:	b90b      	cbnz	r3, 8020a66 <GUI_DEVICE_LinkDevices+0x36>
 8020a62:	e032      	b.n	8020aca <GUI_DEVICE_LinkDevices+0x9a>
 8020a64:	4613      	mov	r3, r2
 8020a66:	685a      	ldr	r2, [r3, #4]
 8020a68:	2a00      	cmp	r2, #0
 8020a6a:	d1fb      	bne.n	8020a64 <GUI_DEVICE_LinkDevices+0x34>
 8020a6c:	68c2      	ldr	r2, [r0, #12]
 8020a6e:	6811      	ldr	r1, [r2, #0]
 8020a70:	e002      	b.n	8020a78 <GUI_DEVICE_LinkDevices+0x48>
 8020a72:	681b      	ldr	r3, [r3, #0]
 8020a74:	2b00      	cmp	r3, #0
 8020a76:	d0e6      	beq.n	8020a46 <GUI_DEVICE_LinkDevices+0x16>
 8020a78:	68da      	ldr	r2, [r3, #12]
 8020a7a:	6812      	ldr	r2, [r2, #0]
 8020a7c:	428a      	cmp	r2, r1
 8020a7e:	dcf8      	bgt.n	8020a72 <GUI_DEVICE_LinkDevices+0x42>
 8020a80:	d010      	beq.n	8020aa4 <GUI_DEVICE_LinkDevices+0x74>
 8020a82:	685a      	ldr	r2, [r3, #4]
 8020a84:	b1a2      	cbz	r2, 8020ab0 <GUI_DEVICE_LinkDevices+0x80>
 8020a86:	6010      	str	r0, [r2, #0]
 8020a88:	6042      	str	r2, [r0, #4]
 8020a8a:	4298      	cmp	r0, r3
 8020a8c:	bf14      	ite	ne
 8020a8e:	461a      	movne	r2, r3
 8020a90:	2200      	moveq	r2, #0
 8020a92:	6058      	str	r0, [r3, #4]
 8020a94:	6002      	str	r2, [r0, #0]
 8020a96:	4628      	mov	r0, r5
 8020a98:	2d00      	cmp	r5, #0
 8020a9a:	d1d7      	bne.n	8020a4c <GUI_DEVICE_LinkDevices+0x1c>
 8020a9c:	f88e 6000 	strb.w	r6, [lr]
 8020aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020aa4:	8a82      	ldrh	r2, [r0, #20]
 8020aa6:	2a01      	cmp	r2, #1
 8020aa8:	d00b      	beq.n	8020ac2 <GUI_DEVICE_LinkDevices+0x92>
 8020aaa:	685a      	ldr	r2, [r3, #4]
 8020aac:	2a00      	cmp	r2, #0
 8020aae:	d1ea      	bne.n	8020a86 <GUI_DEVICE_LinkDevices+0x56>
 8020ab0:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8020ab4:	e7e9      	b.n	8020a8a <GUI_DEVICE_LinkDevices+0x5a>
 8020ab6:	68d3      	ldr	r3, [r2, #12]
 8020ab8:	f8d3 8000 	ldr.w	r8, [r3]
 8020abc:	4588      	cmp	r8, r1
 8020abe:	4613      	mov	r3, r2
 8020ac0:	dbdf      	blt.n	8020a82 <GUI_DEVICE_LinkDevices+0x52>
 8020ac2:	681a      	ldr	r2, [r3, #0]
 8020ac4:	2a00      	cmp	r2, #0
 8020ac6:	d1f6      	bne.n	8020ab6 <GUI_DEVICE_LinkDevices+0x86>
 8020ac8:	e7db      	b.n	8020a82 <GUI_DEVICE_LinkDevices+0x52>
 8020aca:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8020ace:	e7ba      	b.n	8020a46 <GUI_DEVICE_LinkDevices+0x16>
 8020ad0:	4770      	bx	lr
 8020ad2:	bf00      	nop
 8020ad4:	200308b0 	.word	0x200308b0
 8020ad8:	20030862 	.word	0x20030862

08020adc <GUI_DispString.part.0>:
 8020adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ae0:	4e47      	ldr	r6, [pc, #284]	; (8020c00 <GUI_DispString.part.0+0x124>)
 8020ae2:	b083      	sub	sp, #12
 8020ae4:	4604      	mov	r4, r0
 8020ae6:	f000 fde9 	bl	80216bc <GUI_Lock>
 8020aea:	f00a fc91 	bl	802b410 <GUI_GetFontDistY>
 8020aee:	6833      	ldr	r3, [r6, #0]
 8020af0:	4607      	mov	r7, r0
 8020af2:	f9b3 9022 	ldrsh.w	r9, [r3, #34]	; 0x22
 8020af6:	f00a fc67 	bl	802b3c8 <GUI_GetYAdjust>
 8020afa:	6832      	ldr	r2, [r6, #0]
 8020afc:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8020afe:	fa1f fa80 	uxth.w	sl, r0
 8020b02:	ebca 0303 	rsb	r3, sl, r3
 8020b06:	b21b      	sxth	r3, r3
 8020b08:	8493      	strh	r3, [r2, #36]	; 0x24
 8020b0a:	7821      	ldrb	r1, [r4, #0]
 8020b0c:	2900      	cmp	r1, #0
 8020b0e:	d04d      	beq.n	8020bac <GUI_DispString.part.0+0xd0>
 8020b10:	b2bf      	uxth	r7, r7
 8020b12:	46b0      	mov	r8, r6
 8020b14:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8020b18:	4620      	mov	r0, r4
 8020b1a:	f00a fcfd 	bl	802b518 <GUI__GetLineNumChars>
 8020b1e:	4601      	mov	r1, r0
 8020b20:	4683      	mov	fp, r0
 8020b22:	4620      	mov	r0, r4
 8020b24:	f00a fd22 	bl	802b56c <GUI__GetLineDistX>
 8020b28:	6831      	ldr	r1, [r6, #0]
 8020b2a:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
 8020b2c:	f003 0303 	and.w	r3, r3, #3
 8020b30:	2b01      	cmp	r3, #1
 8020b32:	d05a      	beq.n	8020bea <GUI_DispString.part.0+0x10e>
 8020b34:	2b02      	cmp	r3, #2
 8020b36:	d05c      	beq.n	8020bf2 <GUI_DispString.part.0+0x116>
 8020b38:	b285      	uxth	r5, r0
 8020b3a:	f04f 0e00 	mov.w	lr, #0
 8020b3e:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
 8020b40:	f9b1 3024 	ldrsh.w	r3, [r1, #36]	; 0x24
 8020b44:	f8ad 3002 	strh.w	r3, [sp, #2]
 8020b48:	ebce 0202 	rsb	r2, lr, r2
 8020b4c:	b292      	uxth	r2, r2
 8020b4e:	b210      	sxth	r0, r2
 8020b50:	3b01      	subs	r3, #1
 8020b52:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
 8020b56:	4496      	add	lr, r2
 8020b58:	8448      	strh	r0, [r1, #34]	; 0x22
 8020b5a:	443b      	add	r3, r7
 8020b5c:	466a      	mov	r2, sp
 8020b5e:	4659      	mov	r1, fp
 8020b60:	f8ad 0000 	strh.w	r0, [sp]
 8020b64:	4620      	mov	r0, r4
 8020b66:	f8ad 3006 	strh.w	r3, [sp, #6]
 8020b6a:	f8ad e004 	strh.w	lr, [sp, #4]
 8020b6e:	f00a fd3f 	bl	802b5f0 <GUI__DispLine>
 8020b72:	6833      	ldr	r3, [r6, #0]
 8020b74:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8020b78:	849a      	strh	r2, [r3, #36]	; 0x24
 8020b7a:	4659      	mov	r1, fp
 8020b7c:	4620      	mov	r0, r4
 8020b7e:	f000 fed3 	bl	8021928 <GUI_UC__NumChars2NumBytes>
 8020b82:	5c22      	ldrb	r2, [r4, r0]
 8020b84:	2a0a      	cmp	r2, #10
 8020b86:	eb04 0300 	add.w	r3, r4, r0
 8020b8a:	d01b      	beq.n	8020bc4 <GUI_DispString.part.0+0xe8>
 8020b8c:	2a0d      	cmp	r2, #13
 8020b8e:	d019      	beq.n	8020bc4 <GUI_DispString.part.0+0xe8>
 8020b90:	f8bd 0000 	ldrh.w	r0, [sp]
 8020b94:	f8d8 2000 	ldr.w	r2, [r8]
 8020b98:	4405      	add	r5, r0
 8020b9a:	8455      	strh	r5, [r2, #34]	; 0x22
 8020b9c:	7819      	ldrb	r1, [r3, #0]
 8020b9e:	b119      	cbz	r1, 8020ba8 <GUI_DispString.part.0+0xcc>
 8020ba0:	7859      	ldrb	r1, [r3, #1]
 8020ba2:	1c5c      	adds	r4, r3, #1
 8020ba4:	2900      	cmp	r1, #0
 8020ba6:	d1b5      	bne.n	8020b14 <GUI_DispString.part.0+0x38>
 8020ba8:	f9b2 3024 	ldrsh.w	r3, [r2, #36]	; 0x24
 8020bac:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8020bae:	449a      	add	sl, r3
 8020bb0:	f021 0303 	bic.w	r3, r1, #3
 8020bb4:	f8a2 a024 	strh.w	sl, [r2, #36]	; 0x24
 8020bb8:	8593      	strh	r3, [r2, #44]	; 0x2c
 8020bba:	f000 fd75 	bl	80216a8 <GUI_Unlock>
 8020bbe:	b003      	add	sp, #12
 8020bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020bc4:	6832      	ldr	r2, [r6, #0]
 8020bc6:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8020bc8:	f001 0103 	and.w	r1, r1, #3
 8020bcc:	3901      	subs	r1, #1
 8020bce:	2901      	cmp	r1, #1
 8020bd0:	bf8a      	itet	hi
 8020bd2:	8c11      	ldrhhi	r1, [r2, #32]
 8020bd4:	f8a2 9022 	strhls.w	r9, [r2, #34]	; 0x22
 8020bd8:	8451      	strhhi	r1, [r2, #34]	; 0x22
 8020bda:	7819      	ldrb	r1, [r3, #0]
 8020bdc:	290a      	cmp	r1, #10
 8020bde:	d1de      	bne.n	8020b9e <GUI_DispString.part.0+0xc2>
 8020be0:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8020be2:	4439      	add	r1, r7
 8020be4:	8491      	strh	r1, [r2, #36]	; 0x24
 8020be6:	7819      	ldrb	r1, [r3, #0]
 8020be8:	e7d9      	b.n	8020b9e <GUI_DispString.part.0+0xc2>
 8020bea:	fa1f fe80 	uxth.w	lr, r0
 8020bee:	4675      	mov	r5, lr
 8020bf0:	e7a5      	b.n	8020b3e <GUI_DispString.part.0+0x62>
 8020bf2:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 8020bf6:	f3c2 0e4f 	ubfx	lr, r2, #1, #16
 8020bfa:	b285      	uxth	r5, r0
 8020bfc:	e79f      	b.n	8020b3e <GUI_DispString.part.0+0x62>
 8020bfe:	bf00      	nop
 8020c00:	200000e8 	.word	0x200000e8

08020c04 <GUI_DispStringInRectWrap.part.1>:
 8020c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c08:	4689      	mov	r9, r1
 8020c0a:	b08b      	sub	sp, #44	; 0x2c
 8020c0c:	4615      	mov	r5, r2
 8020c0e:	4604      	mov	r4, r0
 8020c10:	9203      	str	r2, [sp, #12]
 8020c12:	461f      	mov	r7, r3
 8020c14:	f000 fd52 	bl	80216bc <GUI_Lock>
 8020c18:	f9b9 3000 	ldrsh.w	r3, [r9]
 8020c1c:	f9b9 1004 	ldrsh.w	r1, [r9, #4]
 8020c20:	f9b9 0006 	ldrsh.w	r0, [r9, #6]
 8020c24:	9301      	str	r3, [sp, #4]
 8020c26:	1ace      	subs	r6, r1, r3
 8020c28:	9102      	str	r1, [sp, #8]
 8020c2a:	f9b9 b002 	ldrsh.w	fp, [r9, #2]
 8020c2e:	9005      	str	r0, [sp, #20]
 8020c30:	f00a fbee 	bl	802b410 <GUI_GetFontDistY>
 8020c34:	f015 080c 	ands.w	r8, r5, #12
 8020c38:	f106 0601 	add.w	r6, r6, #1
 8020c3c:	9004      	str	r0, [sp, #16]
 8020c3e:	d176      	bne.n	8020d2e <GUI_DispStringInRectWrap.part.1+0x12a>
 8020c40:	fa1f fa80 	uxth.w	sl, r0
 8020c44:	4648      	mov	r0, r9
 8020c46:	f008 fa9f 	bl	8029188 <WM_SetUserClipRect>
 8020c4a:	4602      	mov	r2, r0
 8020c4c:	9004      	str	r0, [sp, #16]
 8020c4e:	b1a8      	cbz	r0, 8020c7c <GUI_DispStringInRectWrap.part.1+0x78>
 8020c50:	9801      	ldr	r0, [sp, #4]
 8020c52:	2100      	movs	r1, #0
 8020c54:	460b      	mov	r3, r1
 8020c56:	f360 010f 	bfi	r1, r0, #0, #16
 8020c5a:	9802      	ldr	r0, [sp, #8]
 8020c5c:	f360 030f 	bfi	r3, r0, #0, #16
 8020c60:	9805      	ldr	r0, [sp, #20]
 8020c62:	f36b 411f 	bfi	r1, fp, #16, #16
 8020c66:	f360 431f 	bfi	r3, r0, #16, #16
 8020c6a:	9106      	str	r1, [sp, #24]
 8020c6c:	a806      	add	r0, sp, #24
 8020c6e:	4649      	mov	r1, r9
 8020c70:	9307      	str	r3, [sp, #28]
 8020c72:	f001 fb23 	bl	80222bc <GUI__IntersectRects>
 8020c76:	a806      	add	r0, sp, #24
 8020c78:	f008 fa86 	bl	8029188 <WM_SetUserClipRect>
 8020c7c:	9b03      	ldr	r3, [sp, #12]
 8020c7e:	f003 0803 	and.w	r8, r3, #3
 8020c82:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8020c86:	9303      	str	r3, [sp, #12]
 8020c88:	4643      	mov	r3, r8
 8020c8a:	fa1f f58b 	uxth.w	r5, fp
 8020c8e:	46b0      	mov	r8, r6
 8020c90:	461e      	mov	r6, r3
 8020c92:	e015      	b.n	8020cc0 <GUI_DispStringInRectWrap.part.1+0xbc>
 8020c94:	2e02      	cmp	r6, #2
 8020c96:	d034      	beq.n	8020d02 <GUI_DispStringInRectWrap.part.1+0xfe>
 8020c98:	b91e      	cbnz	r6, 8020ca2 <GUI_DispStringInRectWrap.part.1+0x9e>
 8020c9a:	f8b9 3000 	ldrh.w	r3, [r9]
 8020c9e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8020ca2:	4620      	mov	r0, r4
 8020ca4:	4659      	mov	r1, fp
 8020ca6:	aa08      	add	r2, sp, #32
 8020ca8:	f00a fca2 	bl	802b5f0 <GUI__DispLine>
 8020cac:	4620      	mov	r0, r4
 8020cae:	463a      	mov	r2, r7
 8020cb0:	4641      	mov	r1, r8
 8020cb2:	f001 fd3d 	bl	8022730 <GUI__WrapGetNumBytesToNextLine>
 8020cb6:	4404      	add	r4, r0
 8020cb8:	4455      	add	r5, sl
 8020cba:	7823      	ldrb	r3, [r4, #0]
 8020cbc:	b2ad      	uxth	r5, r5
 8020cbe:	b373      	cbz	r3, 8020d1e <GUI_DispStringInRectWrap.part.1+0x11a>
 8020cc0:	463a      	mov	r2, r7
 8020cc2:	4641      	mov	r1, r8
 8020cc4:	4620      	mov	r0, r4
 8020cc6:	f001 fd21 	bl	802270c <GUI__WrapGetNumCharsDisp>
 8020cca:	9b03      	ldr	r3, [sp, #12]
 8020ccc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8020cd0:	f8ad 2020 	strh.w	r2, [sp, #32]
 8020cd4:	4601      	mov	r1, r0
 8020cd6:	18eb      	adds	r3, r5, r3
 8020cd8:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8020cdc:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 8020ce0:	4683      	mov	fp, r0
 8020ce2:	4620      	mov	r0, r4
 8020ce4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8020ce8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8020cec:	f00a fc3e 	bl	802b56c <GUI__GetLineDistX>
 8020cf0:	2e01      	cmp	r6, #1
 8020cf2:	d1cf      	bne.n	8020c94 <GUI_DispStringInRectWrap.part.1+0x90>
 8020cf4:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8020cf8:	3301      	adds	r3, #1
 8020cfa:	1a18      	subs	r0, r3, r0
 8020cfc:	f8ad 0020 	strh.w	r0, [sp, #32]
 8020d00:	e7cf      	b.n	8020ca2 <GUI_DispStringInRectWrap.part.1+0x9e>
 8020d02:	f9b9 1000 	ldrsh.w	r1, [r9]
 8020d06:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
 8020d0a:	1a5b      	subs	r3, r3, r1
 8020d0c:	1a18      	subs	r0, r3, r0
 8020d0e:	3001      	adds	r0, #1
 8020d10:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8020d14:	eb01 0060 	add.w	r0, r1, r0, asr #1
 8020d18:	f8ad 0020 	strh.w	r0, [sp, #32]
 8020d1c:	e7c1      	b.n	8020ca2 <GUI_DispStringInRectWrap.part.1+0x9e>
 8020d1e:	9804      	ldr	r0, [sp, #16]
 8020d20:	f008 fa32 	bl	8029188 <WM_SetUserClipRect>
 8020d24:	f000 fcc0 	bl	80216a8 <GUI_Unlock>
 8020d28:	b00b      	add	sp, #44	; 0x2c
 8020d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020d2e:	46a2      	mov	sl, r4
 8020d30:	f000 fcc4 	bl	80216bc <GUI_Lock>
 8020d34:	463a      	mov	r2, r7
 8020d36:	4631      	mov	r1, r6
 8020d38:	4650      	mov	r0, sl
 8020d3a:	2500      	movs	r5, #0
 8020d3c:	f001 fcf8 	bl	8022730 <GUI__WrapGetNumBytesToNextLine>
 8020d40:	b140      	cbz	r0, 8020d54 <GUI_DispStringInRectWrap.part.1+0x150>
 8020d42:	4482      	add	sl, r0
 8020d44:	463a      	mov	r2, r7
 8020d46:	4631      	mov	r1, r6
 8020d48:	4650      	mov	r0, sl
 8020d4a:	3501      	adds	r5, #1
 8020d4c:	f001 fcf0 	bl	8022730 <GUI__WrapGetNumBytesToNextLine>
 8020d50:	2800      	cmp	r0, #0
 8020d52:	d1f6      	bne.n	8020d42 <GUI_DispStringInRectWrap.part.1+0x13e>
 8020d54:	f000 fca8 	bl	80216a8 <GUI_Unlock>
 8020d58:	f1b8 0f08 	cmp.w	r8, #8
 8020d5c:	d008      	beq.n	8020d70 <GUI_DispStringInRectWrap.part.1+0x16c>
 8020d5e:	f1b8 0f0c 	cmp.w	r8, #12
 8020d62:	d00f      	beq.n	8020d84 <GUI_DispStringInRectWrap.part.1+0x180>
 8020d64:	f1b8 0f04 	cmp.w	r8, #4
 8020d68:	d002      	beq.n	8020d70 <GUI_DispStringInRectWrap.part.1+0x16c>
 8020d6a:	f8bd a010 	ldrh.w	sl, [sp, #16]
 8020d6e:	e769      	b.n	8020c44 <GUI_DispStringInRectWrap.part.1+0x40>
 8020d70:	f8bd a010 	ldrh.w	sl, [sp, #16]
 8020d74:	9b05      	ldr	r3, [sp, #20]
 8020d76:	fb15 f50a 	smulbb	r5, r5, sl
 8020d7a:	3301      	adds	r3, #1
 8020d7c:	1b5d      	subs	r5, r3, r5
 8020d7e:	fa0f fb85 	sxth.w	fp, r5
 8020d82:	e75f      	b.n	8020c44 <GUI_DispStringInRectWrap.part.1+0x40>
 8020d84:	9b05      	ldr	r3, [sp, #20]
 8020d86:	9904      	ldr	r1, [sp, #16]
 8020d88:	ebcb 0303 	rsb	r3, fp, r3
 8020d8c:	3301      	adds	r3, #1
 8020d8e:	fb05 3511 	mls	r5, r5, r1, r3
 8020d92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020d96:	eb0b 0565 	add.w	r5, fp, r5, asr #1
 8020d9a:	fa0f fb85 	sxth.w	fp, r5
 8020d9e:	fa1f fa81 	uxth.w	sl, r1
 8020da2:	e74f      	b.n	8020c44 <GUI_DispStringInRectWrap.part.1+0x40>

08020da4 <GUI_DispString>:
 8020da4:	b108      	cbz	r0, 8020daa <GUI_DispString+0x6>
 8020da6:	f7ff be99 	b.w	8020adc <GUI_DispString.part.0>
 8020daa:	4770      	bx	lr

08020dac <GUI_DispStringAt>:
 8020dac:	b570      	push	{r4, r5, r6, lr}
 8020dae:	460e      	mov	r6, r1
 8020db0:	4615      	mov	r5, r2
 8020db2:	4604      	mov	r4, r0
 8020db4:	f000 fc82 	bl	80216bc <GUI_Lock>
 8020db8:	4b05      	ldr	r3, [pc, #20]	; (8020dd0 <GUI_DispStringAt+0x24>)
 8020dba:	681b      	ldr	r3, [r3, #0]
 8020dbc:	845e      	strh	r6, [r3, #34]	; 0x22
 8020dbe:	849d      	strh	r5, [r3, #36]	; 0x24
 8020dc0:	b114      	cbz	r4, 8020dc8 <GUI_DispStringAt+0x1c>
 8020dc2:	4620      	mov	r0, r4
 8020dc4:	f7ff fe8a 	bl	8020adc <GUI_DispString.part.0>
 8020dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8020dcc:	f000 bc6c 	b.w	80216a8 <GUI_Unlock>
 8020dd0:	200000e8 	.word	0x200000e8

08020dd4 <GUI__DispStringInRect>:
 8020dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dd8:	b087      	sub	sp, #28
 8020dda:	460c      	mov	r4, r1
 8020ddc:	9001      	str	r0, [sp, #4]
 8020dde:	4617      	mov	r7, r2
 8020de0:	461d      	mov	r5, r3
 8020de2:	f00a fb15 	bl	802b410 <GUI_GetFontDistY>
 8020de6:	f8dd b004 	ldr.w	fp, [sp, #4]
 8020dea:	4681      	mov	r9, r0
 8020dec:	2c00      	cmp	r4, #0
 8020dee:	f000 80a5 	beq.w	8020f3c <GUI__DispStringInRect+0x168>
 8020df2:	6820      	ldr	r0, [r4, #0]
 8020df4:	6861      	ldr	r1, [r4, #4]
 8020df6:	ab04      	add	r3, sp, #16
 8020df8:	c303      	stmia	r3!, {r0, r1}
 8020dfa:	f017 0a0c 	ands.w	sl, r7, #12
 8020dfe:	d160      	bne.n	8020ec2 <GUI__DispStringInRect+0xee>
 8020e00:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8020e04:	f8cd b004 	str.w	fp, [sp, #4]
 8020e08:	2d00      	cmp	r5, #0
 8020e0a:	d057      	beq.n	8020ebc <GUI__DispStringInRect+0xe8>
 8020e0c:	f10d 0804 	add.w	r8, sp, #4
 8020e10:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8020e14:	f8df a148 	ldr.w	sl, [pc, #328]	; 8020f60 <GUI__DispStringInRect+0x18c>
 8020e18:	fa1f f989 	uxth.w	r9, r9
 8020e1c:	f007 0703 	and.w	r7, r7, #3
 8020e20:	4658      	mov	r0, fp
 8020e22:	2400      	movs	r4, #0
 8020e24:	e02d      	b.n	8020e82 <GUI__DispStringInRect+0xae>
 8020e26:	2f02      	cmp	r7, #2
 8020e28:	d03d      	beq.n	8020ea6 <GUI__DispStringInRect+0xd2>
 8020e2a:	b90f      	cbnz	r7, 8020e30 <GUI__DispStringInRect+0x5c>
 8020e2c:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 8020e30:	f8da 2000 	ldr.w	r2, [sl]
 8020e34:	9801      	ldr	r0, [sp, #4]
 8020e36:	fa0f fe86 	sxth.w	lr, r6
 8020e3a:	b221      	sxth	r1, r4
 8020e3c:	3b01      	subs	r3, #1
 8020e3e:	eb09 0c06 	add.w	ip, r9, r6
 8020e42:	4423      	add	r3, r4
 8020e44:	f8a2 e024 	strh.w	lr, [r2, #36]	; 0x24
 8020e48:	8451      	strh	r1, [r2, #34]	; 0x22
 8020e4a:	f8ad 1008 	strh.w	r1, [sp, #8]
 8020e4e:	aa02      	add	r2, sp, #8
 8020e50:	4659      	mov	r1, fp
 8020e52:	f8ad 300c 	strh.w	r3, [sp, #12]
 8020e56:	f8ad e00a 	strh.w	lr, [sp, #10]
 8020e5a:	f8ad c00e 	strh.w	ip, [sp, #14]
 8020e5e:	f00a fbc7 	bl	802b5f0 <GUI__DispLine>
 8020e62:	4659      	mov	r1, fp
 8020e64:	9801      	ldr	r0, [sp, #4]
 8020e66:	f000 fd5f 	bl	8021928 <GUI_UC__NumChars2NumBytes>
 8020e6a:	9b01      	ldr	r3, [sp, #4]
 8020e6c:	4418      	add	r0, r3
 8020e6e:	9001      	str	r0, [sp, #4]
 8020e70:	f00a face 	bl	802b410 <GUI_GetFontDistY>
 8020e74:	4406      	add	r6, r0
 8020e76:	4640      	mov	r0, r8
 8020e78:	f001 f9ea 	bl	8022250 <GUI__HandleEOLine>
 8020e7c:	b9f0      	cbnz	r0, 8020ebc <GUI__DispStringInRect+0xe8>
 8020e7e:	b1ed      	cbz	r5, 8020ebc <GUI__DispStringInRect+0xe8>
 8020e80:	9801      	ldr	r0, [sp, #4]
 8020e82:	4629      	mov	r1, r5
 8020e84:	f00a fb48 	bl	802b518 <GUI__GetLineNumChars>
 8020e88:	4683      	mov	fp, r0
 8020e8a:	4601      	mov	r1, r0
 8020e8c:	9801      	ldr	r0, [sp, #4]
 8020e8e:	f00a fb6d 	bl	802b56c <GUI__GetLineDistX>
 8020e92:	2f01      	cmp	r7, #1
 8020e94:	ebcb 0505 	rsb	r5, fp, r5
 8020e98:	4603      	mov	r3, r0
 8020e9a:	d1c4      	bne.n	8020e26 <GUI__DispStringInRect+0x52>
 8020e9c:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8020ea0:	1a24      	subs	r4, r4, r0
 8020ea2:	3401      	adds	r4, #1
 8020ea4:	e7c4      	b.n	8020e30 <GUI__DispStringInRect+0x5c>
 8020ea6:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 8020eaa:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8020eae:	1b12      	subs	r2, r2, r4
 8020eb0:	1a12      	subs	r2, r2, r0
 8020eb2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8020eb6:	eb04 0462 	add.w	r4, r4, r2, asr #1
 8020eba:	e7b9      	b.n	8020e30 <GUI__DispStringInRect+0x5c>
 8020ebc:	b007      	add	sp, #28
 8020ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ec2:	2d00      	cmp	r5, #0
 8020ec4:	d03e      	beq.n	8020f44 <GUI__DispStringInRect+0x170>
 8020ec6:	462c      	mov	r4, r5
 8020ec8:	2600      	movs	r6, #0
 8020eca:	f10d 0804 	add.w	r8, sp, #4
 8020ece:	e000      	b.n	8020ed2 <GUI__DispStringInRect+0xfe>
 8020ed0:	b194      	cbz	r4, 8020ef8 <GUI__DispStringInRect+0x124>
 8020ed2:	4621      	mov	r1, r4
 8020ed4:	9801      	ldr	r0, [sp, #4]
 8020ed6:	f00a fb1f 	bl	802b518 <GUI__GetLineNumChars>
 8020eda:	4603      	mov	r3, r0
 8020edc:	4601      	mov	r1, r0
 8020ede:	9801      	ldr	r0, [sp, #4]
 8020ee0:	1ae4      	subs	r4, r4, r3
 8020ee2:	f000 fd21 	bl	8021928 <GUI_UC__NumChars2NumBytes>
 8020ee6:	9b01      	ldr	r3, [sp, #4]
 8020ee8:	4403      	add	r3, r0
 8020eea:	4640      	mov	r0, r8
 8020eec:	3601      	adds	r6, #1
 8020eee:	9301      	str	r3, [sp, #4]
 8020ef0:	f001 f9ae 	bl	8022250 <GUI__HandleEOLine>
 8020ef4:	2800      	cmp	r0, #0
 8020ef6:	d0eb      	beq.n	8020ed0 <GUI__DispStringInRect+0xfc>
 8020ef8:	f1ba 0f08 	cmp.w	sl, #8
 8020efc:	d009      	beq.n	8020f12 <GUI__DispStringInRect+0x13e>
 8020efe:	f1ba 0f0c 	cmp.w	sl, #12
 8020f02:	d00d      	beq.n	8020f20 <GUI__DispStringInRect+0x14c>
 8020f04:	f1ba 0f04 	cmp.w	sl, #4
 8020f08:	d003      	beq.n	8020f12 <GUI__DispStringInRect+0x13e>
 8020f0a:	f8cd b004 	str.w	fp, [sp, #4]
 8020f0e:	2600      	movs	r6, #0
 8020f10:	e77e      	b.n	8020e10 <GUI__DispStringInRect+0x3c>
 8020f12:	fb06 f609 	mul.w	r6, r6, r9
 8020f16:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8020f1a:	1b9e      	subs	r6, r3, r6
 8020f1c:	3601      	adds	r6, #1
 8020f1e:	e771      	b.n	8020e04 <GUI__DispStringInRect+0x30>
 8020f20:	fb06 f609 	mul.w	r6, r6, r9
 8020f24:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8020f28:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8020f2c:	1a9b      	subs	r3, r3, r2
 8020f2e:	3301      	adds	r3, #1
 8020f30:	1b9b      	subs	r3, r3, r6
 8020f32:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8020f36:	eb02 0663 	add.w	r6, r2, r3, asr #1
 8020f3a:	e763      	b.n	8020e04 <GUI__DispStringInRect+0x30>
 8020f3c:	a804      	add	r0, sp, #16
 8020f3e:	f7ff f893 	bl	8020068 <GUI_GetClientRect>
 8020f42:	e75a      	b.n	8020dfa <GUI__DispStringInRect+0x26>
 8020f44:	f1ba 0f08 	cmp.w	sl, #8
 8020f48:	d005      	beq.n	8020f56 <GUI__DispStringInRect+0x182>
 8020f4a:	f1ba 0f0c 	cmp.w	sl, #12
 8020f4e:	d004      	beq.n	8020f5a <GUI__DispStringInRect+0x186>
 8020f50:	f1ba 0f04 	cmp.w	sl, #4
 8020f54:	d1b2      	bne.n	8020ebc <GUI__DispStringInRect+0xe8>
 8020f56:	2600      	movs	r6, #0
 8020f58:	e7dd      	b.n	8020f16 <GUI__DispStringInRect+0x142>
 8020f5a:	462e      	mov	r6, r5
 8020f5c:	e7e2      	b.n	8020f24 <GUI__DispStringInRect+0x150>
 8020f5e:	bf00      	nop
 8020f60:	200000e8 	.word	0x200000e8

08020f64 <GUI_DispStringInRect>:
 8020f64:	b320      	cbz	r0, 8020fb0 <GUI_DispStringInRect+0x4c>
 8020f66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020f68:	460c      	mov	r4, r1
 8020f6a:	b083      	sub	sp, #12
 8020f6c:	4605      	mov	r5, r0
 8020f6e:	4616      	mov	r6, r2
 8020f70:	f000 fba4 	bl	80216bc <GUI_Lock>
 8020f74:	b1d4      	cbz	r4, 8020fac <GUI_DispStringInRect+0x48>
 8020f76:	4620      	mov	r0, r4
 8020f78:	f008 f906 	bl	8029188 <WM_SetUserClipRect>
 8020f7c:	4607      	mov	r7, r0
 8020f7e:	b138      	cbz	r0, 8020f90 <GUI_DispStringInRect+0x2c>
 8020f80:	4668      	mov	r0, sp
 8020f82:	463a      	mov	r2, r7
 8020f84:	4621      	mov	r1, r4
 8020f86:	f001 f999 	bl	80222bc <GUI__IntersectRects>
 8020f8a:	4668      	mov	r0, sp
 8020f8c:	f008 f8fc 	bl	8029188 <WM_SetUserClipRect>
 8020f90:	4632      	mov	r2, r6
 8020f92:	4621      	mov	r1, r4
 8020f94:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8020f98:	4628      	mov	r0, r5
 8020f9a:	f7ff ff1b 	bl	8020dd4 <GUI__DispStringInRect>
 8020f9e:	4638      	mov	r0, r7
 8020fa0:	f008 f8f2 	bl	8029188 <WM_SetUserClipRect>
 8020fa4:	f000 fb80 	bl	80216a8 <GUI_Unlock>
 8020fa8:	b003      	add	sp, #12
 8020faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020fac:	4627      	mov	r7, r4
 8020fae:	e7ef      	b.n	8020f90 <GUI_DispStringInRect+0x2c>
 8020fb0:	4770      	bx	lr
 8020fb2:	bf00      	nop

08020fb4 <GUI_DispStringInRectWrap>:
 8020fb4:	b108      	cbz	r0, 8020fba <GUI_DispStringInRectWrap+0x6>
 8020fb6:	f7ff be25 	b.w	8020c04 <GUI_DispStringInRectWrap.part.1>
 8020fba:	4770      	bx	lr

08020fbc <GUI_DrawBitmap>:
 8020fbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fc0:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80210b8 <GUI_DrawBitmap+0xfc>
 8020fc4:	b089      	sub	sp, #36	; 0x24
 8020fc6:	4604      	mov	r4, r0
 8020fc8:	4690      	mov	r8, r2
 8020fca:	460f      	mov	r7, r1
 8020fcc:	f000 fb76 	bl	80216bc <GUI_Lock>
 8020fd0:	f8d9 3000 	ldr.w	r3, [r9]
 8020fd4:	8820      	ldrh	r0, [r4, #0]
 8020fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8020fd8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8020fda:	8863      	ldrh	r3, [r4, #2]
 8020fdc:	4417      	add	r7, r2
 8020fde:	44a8      	add	r8, r5
 8020fe0:	1e42      	subs	r2, r0, #1
 8020fe2:	3b01      	subs	r3, #1
 8020fe4:	443a      	add	r2, r7
 8020fe6:	4443      	add	r3, r8
 8020fe8:	a806      	add	r0, sp, #24
 8020fea:	f8ad 7018 	strh.w	r7, [sp, #24]
 8020fee:	f8ad 801a 	strh.w	r8, [sp, #26]
 8020ff2:	f8ad 201c 	strh.w	r2, [sp, #28]
 8020ff6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020ffa:	f006 fffb 	bl	8027ff4 <WM__InitIVRSearch>
 8020ffe:	2800      	cmp	r0, #0
 8021000:	d04e      	beq.n	80210a0 <GUI_DrawBitmap+0xe4>
 8021002:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80210bc <GUI_DrawBitmap+0x100>
 8021006:	46cb      	mov	fp, r9
 8021008:	e01a      	b.n	8021040 <GUI_DrawBitmap+0x84>
 802100a:	f040 0002 	orr.w	r0, r0, #2
 802100e:	f7ff f9f7 	bl	8020400 <GUI_SetDrawMode>
 8021012:	6921      	ldr	r1, [r4, #16]
 8021014:	b321      	cbz	r1, 8021060 <GUI_DrawBitmap+0xa4>
 8021016:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 802101a:	68a6      	ldr	r6, [r4, #8]
 802101c:	8863      	ldrh	r3, [r4, #2]
 802101e:	8822      	ldrh	r2, [r4, #0]
 8021020:	e88d 4040 	stmia.w	sp, {r6, lr}
 8021024:	2001      	movs	r0, #1
 8021026:	9003      	str	r0, [sp, #12]
 8021028:	9002      	str	r0, [sp, #8]
 802102a:	680e      	ldr	r6, [r1, #0]
 802102c:	4638      	mov	r0, r7
 802102e:	4641      	mov	r1, r8
 8021030:	47b0      	blx	r6
 8021032:	4628      	mov	r0, r5
 8021034:	f7ff f9e4 	bl	8020400 <GUI_SetDrawMode>
 8021038:	f006 feb6 	bl	8027da8 <WM__GetNextIVR>
 802103c:	2800      	cmp	r0, #0
 802103e:	d02f      	beq.n	80210a0 <GUI_DrawBitmap+0xe4>
 8021040:	2000      	movs	r0, #0
 8021042:	68e6      	ldr	r6, [r4, #12]
 8021044:	f7ff f9dc 	bl	8020400 <GUI_SetDrawMode>
 8021048:	4605      	mov	r5, r0
 802104a:	b116      	cbz	r6, 8021052 <GUI_DrawBitmap+0x96>
 802104c:	7933      	ldrb	r3, [r6, #4]
 802104e:	2b00      	cmp	r3, #0
 8021050:	d1db      	bne.n	802100a <GUI_DrawBitmap+0x4e>
 8021052:	f025 0002 	bic.w	r0, r5, #2
 8021056:	f7ff f9d3 	bl	8020400 <GUI_SetDrawMode>
 802105a:	6921      	ldr	r1, [r4, #16]
 802105c:	2900      	cmp	r1, #0
 802105e:	d1da      	bne.n	8021016 <GUI_DrawBitmap+0x5a>
 8021060:	f8d9 2000 	ldr.w	r2, [r9]
 8021064:	f8da 3000 	ldr.w	r3, [sl]
 8021068:	7c52      	ldrb	r2, [r2, #17]
 802106a:	68e0      	ldr	r0, [r4, #12]
 802106c:	4621      	mov	r1, r4
 802106e:	4798      	blx	r3
 8021070:	88e1      	ldrh	r1, [r4, #6]
 8021072:	b1d0      	cbz	r0, 80210aa <GUI_DrawBitmap+0xee>
 8021074:	8863      	ldrh	r3, [r4, #2]
 8021076:	8822      	ldrh	r2, [r4, #0]
 8021078:	68a6      	ldr	r6, [r4, #8]
 802107a:	9005      	str	r0, [sp, #20]
 802107c:	88a0      	ldrh	r0, [r4, #4]
 802107e:	9102      	str	r1, [sp, #8]
 8021080:	2101      	movs	r1, #1
 8021082:	9003      	str	r0, [sp, #12]
 8021084:	9101      	str	r1, [sp, #4]
 8021086:	9100      	str	r1, [sp, #0]
 8021088:	4638      	mov	r0, r7
 802108a:	4641      	mov	r1, r8
 802108c:	9604      	str	r6, [sp, #16]
 802108e:	f001 fdd7 	bl	8022c40 <LCD_DrawBitmap>
 8021092:	4628      	mov	r0, r5
 8021094:	f7ff f9b4 	bl	8020400 <GUI_SetDrawMode>
 8021098:	f006 fe86 	bl	8027da8 <WM__GetNextIVR>
 802109c:	2800      	cmp	r0, #0
 802109e:	d1cf      	bne.n	8021040 <GUI_DrawBitmap+0x84>
 80210a0:	f000 fb02 	bl	80216a8 <GUI_Unlock>
 80210a4:	b009      	add	sp, #36	; 0x24
 80210a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80210aa:	2901      	cmp	r1, #1
 80210ac:	bf04      	itt	eq
 80210ae:	f8db 3000 	ldreq.w	r3, [fp]
 80210b2:	6b98      	ldreq	r0, [r3, #56]	; 0x38
 80210b4:	e7de      	b.n	8021074 <GUI_DrawBitmap+0xb8>
 80210b6:	bf00      	nop
 80210b8:	200000e8 	.word	0x200000e8
 80210bc:	200000d8 	.word	0x200000d8

080210c0 <GUI_DrawGradientV>:
 80210c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210c4:	b091      	sub	sp, #68	; 0x44
 80210c6:	4681      	mov	r9, r0
 80210c8:	461e      	mov	r6, r3
 80210ca:	460f      	mov	r7, r1
 80210cc:	4690      	mov	r8, r2
 80210ce:	f000 faf5 	bl	80216bc <GUI_Lock>
 80210d2:	4b64      	ldr	r3, [pc, #400]	; (8021264 <GUI_DrawGradientV+0x1a4>)
 80210d4:	681c      	ldr	r4, [r3, #0]
 80210d6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80210d8:	6d24      	ldr	r4, [r4, #80]	; 0x50
 80210da:	19a0      	adds	r0, r4, r6
 80210dc:	19e1      	adds	r1, r4, r7
 80210de:	eb05 0309 	add.w	r3, r5, r9
 80210e2:	eb05 0208 	add.w	r2, r5, r8
 80210e6:	4604      	mov	r4, r0
 80210e8:	9001      	str	r0, [sp, #4]
 80210ea:	a80e      	add	r0, sp, #56	; 0x38
 80210ec:	9307      	str	r3, [sp, #28]
 80210ee:	9208      	str	r2, [sp, #32]
 80210f0:	9102      	str	r1, [sp, #8]
 80210f2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80210f6:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 80210fa:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
 80210fe:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
 8021102:	f006 ff77 	bl	8027ff4 <WM__InitIVRSearch>
 8021106:	2800      	cmp	r0, #0
 8021108:	f000 8091 	beq.w	802122e <GUI_DrawGradientV+0x16e>
 802110c:	9b01      	ldr	r3, [sp, #4]
 802110e:	9a02      	ldr	r2, [sp, #8]
 8021110:	f89d 4068 	ldrb.w	r4, [sp, #104]	; 0x68
 8021114:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
 8021118:	ebc2 0b03 	rsb	fp, r2, r3
 802111c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 802111e:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8021122:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8021124:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8021128:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 802112a:	f3c2 4107 	ubfx	r1, r2, #16, #8
 802112e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8021130:	eb0b 73db 	add.w	r3, fp, fp, lsr #31
 8021134:	105b      	asrs	r3, r3, #1
 8021136:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 802113a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 802113c:	fb0b 3504 	mla	r5, fp, r4, r3
 8021140:	1b3c      	subs	r4, r7, r4
 8021142:	0e12      	lsrs	r2, r2, #24
 8021144:	9406      	str	r4, [sp, #24]
 8021146:	fb0b 3400 	mla	r4, fp, r0, r3
 802114a:	1a30      	subs	r0, r6, r0
 802114c:	9003      	str	r0, [sp, #12]
 802114e:	fb0b 3001 	mla	r0, fp, r1, r3
 8021152:	fb0b 3302 	mla	r3, fp, r2, r3
 8021156:	930d      	str	r3, [sp, #52]	; 0x34
 8021158:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802115a:	950a      	str	r5, [sp, #40]	; 0x28
 802115c:	ebc1 010e 	rsb	r1, r1, lr
 8021160:	ebc2 6313 	rsb	r3, r2, r3, lsr #24
 8021164:	940b      	str	r4, [sp, #44]	; 0x2c
 8021166:	900c      	str	r0, [sp, #48]	; 0x30
 8021168:	9104      	str	r1, [sp, #16]
 802116a:	9305      	str	r3, [sp, #20]
 802116c:	465e      	mov	r6, fp
 802116e:	f7fe ff8b 	bl	8020088 <GUI_GetColor>
 8021172:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8021174:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8021176:	9009      	str	r0, [sp, #36]	; 0x24
 8021178:	4293      	cmp	r3, r2
 802117a:	d069      	beq.n	8021250 <GUI_DrawGradientV+0x190>
 802117c:	2e00      	cmp	r6, #0
 802117e:	d052      	beq.n	8021226 <GUI_DrawGradientV+0x166>
 8021180:	9d02      	ldr	r5, [sp, #8]
 8021182:	9a01      	ldr	r2, [sp, #4]
 8021184:	4295      	cmp	r5, r2
 8021186:	dc5b      	bgt.n	8021240 <GUI_DrawGradientV+0x180>
 8021188:	af0a      	add	r7, sp, #40	; 0x28
 802118a:	4602      	mov	r2, r0
 802118c:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
 8021190:	f04f 0b01 	mov.w	fp, #1
 8021194:	e006      	b.n	80211a4 <GUI_DrawGradientV+0xe4>
 8021196:	f10b 0b01 	add.w	fp, fp, #1
 802119a:	9b01      	ldr	r3, [sp, #4]
 802119c:	3501      	adds	r5, #1
 802119e:	42ab      	cmp	r3, r5
 80211a0:	4622      	mov	r2, r4
 80211a2:	db2f      	blt.n	8021204 <GUI_DrawGradientV+0x144>
 80211a4:	fb9a f3f6 	sdiv	r3, sl, r6
 80211a8:	fb99 f4f6 	sdiv	r4, r9, r6
 80211ac:	061b      	lsls	r3, r3, #24
 80211ae:	fb97 f1f6 	sdiv	r1, r7, r6
 80211b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80211b6:	fb98 f4f6 	sdiv	r4, r8, r6
 80211ba:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
 80211be:	9905      	ldr	r1, [sp, #20]
 80211c0:	431c      	orrs	r4, r3
 80211c2:	9b03      	ldr	r3, [sp, #12]
 80211c4:	448a      	add	sl, r1
 80211c6:	9904      	ldr	r1, [sp, #16]
 80211c8:	4498      	add	r8, r3
 80211ca:	9b02      	ldr	r3, [sp, #8]
 80211cc:	4489      	add	r9, r1
 80211ce:	9906      	ldr	r1, [sp, #24]
 80211d0:	42ab      	cmp	r3, r5
 80211d2:	4610      	mov	r0, r2
 80211d4:	440f      	add	r7, r1
 80211d6:	dae0      	bge.n	802119a <GUI_DrawGradientV+0xda>
 80211d8:	4294      	cmp	r4, r2
 80211da:	d0dc      	beq.n	8021196 <GUI_DrawGradientV+0xd6>
 80211dc:	f001 ff86 	bl	80230ec <LCD_SetColor>
 80211e0:	f1bb 0f01 	cmp.w	fp, #1
 80211e4:	ebcb 0105 	rsb	r1, fp, r5
 80211e8:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80211ec:	9a08      	ldr	r2, [sp, #32]
 80211ee:	9807      	ldr	r0, [sp, #28]
 80211f0:	d022      	beq.n	8021238 <GUI_DrawGradientV+0x178>
 80211f2:	f001 fbe7 	bl	80229c4 <LCD_FillRect>
 80211f6:	9b01      	ldr	r3, [sp, #4]
 80211f8:	3501      	adds	r5, #1
 80211fa:	42ab      	cmp	r3, r5
 80211fc:	f04f 0b01 	mov.w	fp, #1
 8021200:	4622      	mov	r2, r4
 8021202:	dacf      	bge.n	80211a4 <GUI_DrawGradientV+0xe4>
 8021204:	4620      	mov	r0, r4
 8021206:	f001 ff71 	bl	80230ec <LCD_SetColor>
 802120a:	f1bb 0f01 	cmp.w	fp, #1
 802120e:	d019      	beq.n	8021244 <GUI_DrawGradientV+0x184>
 8021210:	9b01      	ldr	r3, [sp, #4]
 8021212:	9a08      	ldr	r2, [sp, #32]
 8021214:	9807      	ldr	r0, [sp, #28]
 8021216:	ebcb 0103 	rsb	r1, fp, r3
 802121a:	3101      	adds	r1, #1
 802121c:	f001 fbd2 	bl	80229c4 <LCD_FillRect>
 8021220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021222:	f001 ff63 	bl	80230ec <LCD_SetColor>
 8021226:	f006 fdbf 	bl	8027da8 <WM__GetNextIVR>
 802122a:	2800      	cmp	r0, #0
 802122c:	d19f      	bne.n	802116e <GUI_DrawGradientV+0xae>
 802122e:	f000 fa3b 	bl	80216a8 <GUI_Unlock>
 8021232:	b011      	add	sp, #68	; 0x44
 8021234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021238:	1e69      	subs	r1, r5, #1
 802123a:	f001 fb6f 	bl	802291c <LCD_DrawHLine>
 802123e:	e7ac      	b.n	802119a <GUI_DrawGradientV+0xda>
 8021240:	f001 ff54 	bl	80230ec <LCD_SetColor>
 8021244:	9a08      	ldr	r2, [sp, #32]
 8021246:	9901      	ldr	r1, [sp, #4]
 8021248:	9807      	ldr	r0, [sp, #28]
 802124a:	f001 fb67 	bl	802291c <LCD_DrawHLine>
 802124e:	e7e7      	b.n	8021220 <GUI_DrawGradientV+0x160>
 8021250:	4618      	mov	r0, r3
 8021252:	f001 ff4b 	bl	80230ec <LCD_SetColor>
 8021256:	9b01      	ldr	r3, [sp, #4]
 8021258:	9a08      	ldr	r2, [sp, #32]
 802125a:	9902      	ldr	r1, [sp, #8]
 802125c:	9807      	ldr	r0, [sp, #28]
 802125e:	f001 fbb1 	bl	80229c4 <LCD_FillRect>
 8021262:	e7dd      	b.n	8021220 <GUI_DrawGradientV+0x160>
 8021264:	200000e8 	.word	0x200000e8

08021268 <GUI_DrawHLine>:
 8021268:	b5f0      	push	{r4, r5, r6, r7, lr}
 802126a:	4f14      	ldr	r7, [pc, #80]	; (80212bc <GUI_DrawHLine+0x54>)
 802126c:	b083      	sub	sp, #12
 802126e:	4606      	mov	r6, r0
 8021270:	460d      	mov	r5, r1
 8021272:	4614      	mov	r4, r2
 8021274:	f000 fa22 	bl	80216bc <GUI_Lock>
 8021278:	683b      	ldr	r3, [r7, #0]
 802127a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 802127c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802127e:	440e      	add	r6, r1
 8021280:	b233      	sxth	r3, r6
 8021282:	4415      	add	r5, r2
 8021284:	4414      	add	r4, r2
 8021286:	4668      	mov	r0, sp
 8021288:	f8ad 5000 	strh.w	r5, [sp]
 802128c:	f8ad 4004 	strh.w	r4, [sp, #4]
 8021290:	f8ad 3002 	strh.w	r3, [sp, #2]
 8021294:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021298:	f006 feac 	bl	8027ff4 <WM__InitIVRSearch>
 802129c:	b150      	cbz	r0, 80212b4 <GUI_DrawHLine+0x4c>
 802129e:	683b      	ldr	r3, [r7, #0]
 80212a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80212a2:	4622      	mov	r2, r4
 80212a4:	681b      	ldr	r3, [r3, #0]
 80212a6:	4631      	mov	r1, r6
 80212a8:	4628      	mov	r0, r5
 80212aa:	4798      	blx	r3
 80212ac:	f006 fd7c 	bl	8027da8 <WM__GetNextIVR>
 80212b0:	2800      	cmp	r0, #0
 80212b2:	d1f4      	bne.n	802129e <GUI_DrawHLine+0x36>
 80212b4:	f000 f9f8 	bl	80216a8 <GUI_Unlock>
 80212b8:	b003      	add	sp, #12
 80212ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80212bc:	200000e8 	.word	0x200000e8

080212c0 <GUI_DrawPoint>:
 80212c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80212c4:	4f15      	ldr	r7, [pc, #84]	; (802131c <GUI_DrawPoint+0x5c>)
 80212c6:	4606      	mov	r6, r0
 80212c8:	460c      	mov	r4, r1
 80212ca:	f000 f9f7 	bl	80216bc <GUI_Lock>
 80212ce:	683b      	ldr	r3, [r7, #0]
 80212d0:	2000      	movs	r0, #0
 80212d2:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 80212d6:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80212d8:	f006 fe8c 	bl	8027ff4 <WM__InitIVRSearch>
 80212dc:	b1c8      	cbz	r0, 8021312 <GUI_DrawPoint+0x52>
 80212de:	4446      	add	r6, r8
 80212e0:	4425      	add	r5, r4
 80212e2:	e004      	b.n	80212ee <GUI_DrawPoint+0x2e>
 80212e4:	f00a fb68 	bl	802b9b8 <GL_FillCircle>
 80212e8:	f006 fd5e 	bl	8027da8 <WM__GetNextIVR>
 80212ec:	b188      	cbz	r0, 8021312 <GUI_DrawPoint+0x52>
 80212ee:	683c      	ldr	r4, [r7, #0]
 80212f0:	7e23      	ldrb	r3, [r4, #24]
 80212f2:	1e5a      	subs	r2, r3, #1
 80212f4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80212f8:	2b01      	cmp	r3, #1
 80212fa:	ea4f 0262 	mov.w	r2, r2, asr #1
 80212fe:	4629      	mov	r1, r5
 8021300:	4630      	mov	r0, r6
 8021302:	d1ef      	bne.n	80212e4 <GUI_DrawPoint+0x24>
 8021304:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021306:	685b      	ldr	r3, [r3, #4]
 8021308:	4798      	blx	r3
 802130a:	f006 fd4d 	bl	8027da8 <WM__GetNextIVR>
 802130e:	2800      	cmp	r0, #0
 8021310:	d1ed      	bne.n	80212ee <GUI_DrawPoint+0x2e>
 8021312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021316:	f000 b9c7 	b.w	80216a8 <GUI_Unlock>
 802131a:	bf00      	nop
 802131c:	200000e8 	.word	0x200000e8

08021320 <GUI_DrawVLine>:
 8021320:	b570      	push	{r4, r5, r6, lr}
 8021322:	b082      	sub	sp, #8
 8021324:	4606      	mov	r6, r0
 8021326:	4614      	mov	r4, r2
 8021328:	460d      	mov	r5, r1
 802132a:	f000 f9c7 	bl	80216bc <GUI_Lock>
 802132e:	4b10      	ldr	r3, [pc, #64]	; (8021370 <GUI_DrawVLine+0x50>)
 8021330:	681a      	ldr	r2, [r3, #0]
 8021332:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8021334:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8021336:	441e      	add	r6, r3
 8021338:	b233      	sxth	r3, r6
 802133a:	4415      	add	r5, r2
 802133c:	4414      	add	r4, r2
 802133e:	4668      	mov	r0, sp
 8021340:	f8ad 5002 	strh.w	r5, [sp, #2]
 8021344:	f8ad 4006 	strh.w	r4, [sp, #6]
 8021348:	f8ad 3000 	strh.w	r3, [sp]
 802134c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8021350:	f006 fe50 	bl	8027ff4 <WM__InitIVRSearch>
 8021354:	b140      	cbz	r0, 8021368 <GUI_DrawVLine+0x48>
 8021356:	4622      	mov	r2, r4
 8021358:	4629      	mov	r1, r5
 802135a:	4630      	mov	r0, r6
 802135c:	f001 fb08 	bl	8022970 <LCD_DrawVLine>
 8021360:	f006 fd22 	bl	8027da8 <WM__GetNextIVR>
 8021364:	2800      	cmp	r0, #0
 8021366:	d1f6      	bne.n	8021356 <GUI_DrawVLine+0x36>
 8021368:	f000 f99e 	bl	80216a8 <GUI_Unlock>
 802136c:	b002      	add	sp, #8
 802136e:	bd70      	pop	{r4, r5, r6, pc}
 8021370:	200000e8 	.word	0x200000e8

08021374 <GUI_FillRect>:
 8021374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021376:	b083      	sub	sp, #12
 8021378:	4607      	mov	r7, r0
 802137a:	4616      	mov	r6, r2
 802137c:	461c      	mov	r4, r3
 802137e:	460d      	mov	r5, r1
 8021380:	f000 f99c 	bl	80216bc <GUI_Lock>
 8021384:	4b10      	ldr	r3, [pc, #64]	; (80213c8 <GUI_FillRect+0x54>)
 8021386:	681b      	ldr	r3, [r3, #0]
 8021388:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802138a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 802138c:	4417      	add	r7, r2
 802138e:	4416      	add	r6, r2
 8021390:	441d      	add	r5, r3
 8021392:	441c      	add	r4, r3
 8021394:	4668      	mov	r0, sp
 8021396:	f8ad 7000 	strh.w	r7, [sp]
 802139a:	f8ad 6004 	strh.w	r6, [sp, #4]
 802139e:	f8ad 5002 	strh.w	r5, [sp, #2]
 80213a2:	f8ad 4006 	strh.w	r4, [sp, #6]
 80213a6:	f006 fe25 	bl	8027ff4 <WM__InitIVRSearch>
 80213aa:	b148      	cbz	r0, 80213c0 <GUI_FillRect+0x4c>
 80213ac:	4623      	mov	r3, r4
 80213ae:	4632      	mov	r2, r6
 80213b0:	4629      	mov	r1, r5
 80213b2:	4638      	mov	r0, r7
 80213b4:	f001 fb06 	bl	80229c4 <LCD_FillRect>
 80213b8:	f006 fcf6 	bl	8027da8 <WM__GetNextIVR>
 80213bc:	2800      	cmp	r0, #0
 80213be:	d1f5      	bne.n	80213ac <GUI_FillRect+0x38>
 80213c0:	f000 f972 	bl	80216a8 <GUI_Unlock>
 80213c4:	b003      	add	sp, #12
 80213c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80213c8:	200000e8 	.word	0x200000e8

080213cc <_OnExit>:
 80213cc:	b538      	push	{r3, r4, r5, lr}
 80213ce:	4c0e      	ldr	r4, [pc, #56]	; (8021408 <_OnExit+0x3c>)
 80213d0:	4d0e      	ldr	r5, [pc, #56]	; (802140c <_OnExit+0x40>)
 80213d2:	2208      	movs	r2, #8
 80213d4:	682b      	ldr	r3, [r5, #0]
 80213d6:	2100      	movs	r1, #0
 80213d8:	4620      	mov	r0, r4
 80213da:	4798      	blx	r3
 80213dc:	682b      	ldr	r3, [r5, #0]
 80213de:	2208      	movs	r2, #8
 80213e0:	2100      	movs	r1, #0
 80213e2:	f104 0008 	add.w	r0, r4, #8
 80213e6:	4798      	blx	r3
 80213e8:	682b      	ldr	r3, [r5, #0]
 80213ea:	2208      	movs	r2, #8
 80213ec:	2100      	movs	r1, #0
 80213ee:	f104 0010 	add.w	r0, r4, #16
 80213f2:	4798      	blx	r3
 80213f4:	682b      	ldr	r3, [r5, #0]
 80213f6:	2208      	movs	r2, #8
 80213f8:	f104 0018 	add.w	r0, r4, #24
 80213fc:	2100      	movs	r1, #0
 80213fe:	4798      	blx	r3
 8021400:	4b03      	ldr	r3, [pc, #12]	; (8021410 <_OnExit+0x44>)
 8021402:	2200      	movs	r2, #0
 8021404:	601a      	str	r2, [r3, #0]
 8021406:	bd38      	pop	{r3, r4, r5, pc}
 8021408:	2002e2bc 	.word	0x2002e2bc
 802140c:	2000010c 	.word	0x2000010c
 8021410:	20030864 	.word	0x20030864

08021414 <GUI_MULTIBUF_BeginEx>:
 8021414:	4b18      	ldr	r3, [pc, #96]	; (8021478 <GUI_MULTIBUF_BeginEx+0x64>)
 8021416:	4a19      	ldr	r2, [pc, #100]	; (802147c <GUI_MULTIBUF_BeginEx+0x68>)
 8021418:	6a19      	ldr	r1, [r3, #32]
 802141a:	b570      	push	{r4, r5, r6, lr}
 802141c:	2900      	cmp	r1, #0
 802141e:	bf0c      	ite	eq
 8021420:	4606      	moveq	r6, r0
 8021422:	2600      	movne	r6, #0
 8021424:	b082      	sub	sp, #8
 8021426:	5791      	ldrsb	r1, [r2, r6]
 8021428:	2901      	cmp	r1, #1
 802142a:	dd23      	ble.n	8021474 <GUI_MULTIBUF_BeginEx+0x60>
 802142c:	eb03 0286 	add.w	r2, r3, r6, lsl #2
 8021430:	6914      	ldr	r4, [r2, #16]
 8021432:	1c65      	adds	r5, r4, #1
 8021434:	6115      	str	r5, [r2, #16]
 8021436:	b9ec      	cbnz	r4, 8021474 <GUI_MULTIBUF_BeginEx+0x60>
 8021438:	6895      	ldr	r5, [r2, #8]
 802143a:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 802143e:	4626      	mov	r6, r4
 8021440:	462c      	mov	r4, r5
 8021442:	e000      	b.n	8021446 <GUI_MULTIBUF_BeginEx+0x32>
 8021444:	461c      	mov	r4, r3
 8021446:	3401      	adds	r4, #1
 8021448:	428c      	cmp	r4, r1
 802144a:	bf0a      	itet	eq
 802144c:	2400      	moveq	r4, #0
 802144e:	6094      	strne	r4, [r2, #8]
 8021450:	6096      	streq	r6, [r2, #8]
 8021452:	42a3      	cmp	r3, r4
 8021454:	d0f6      	beq.n	8021444 <GUI_MULTIBUF_BeginEx+0x30>
 8021456:	f7ff f9a3 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 802145a:	9001      	str	r0, [sp, #4]
 802145c:	b150      	cbz	r0, 8021474 <GUI_MULTIBUF_BeginEx+0x60>
 802145e:	68c3      	ldr	r3, [r0, #12]
 8021460:	2121      	movs	r1, #33	; 0x21
 8021462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021464:	a801      	add	r0, sp, #4
 8021466:	4798      	blx	r3
 8021468:	4603      	mov	r3, r0
 802146a:	b118      	cbz	r0, 8021474 <GUI_MULTIBUF_BeginEx+0x60>
 802146c:	4622      	mov	r2, r4
 802146e:	4629      	mov	r1, r5
 8021470:	9801      	ldr	r0, [sp, #4]
 8021472:	4798      	blx	r3
 8021474:	b002      	add	sp, #8
 8021476:	bd70      	pop	{r4, r5, r6, pc}
 8021478:	2002e2bc 	.word	0x2002e2bc
 802147c:	20030860 	.word	0x20030860

08021480 <GUI_MULTIBUF_EndEx>:
 8021480:	4b16      	ldr	r3, [pc, #88]	; (80214dc <GUI_MULTIBUF_EndEx+0x5c>)
 8021482:	4a17      	ldr	r2, [pc, #92]	; (80214e0 <GUI_MULTIBUF_EndEx+0x60>)
 8021484:	6a19      	ldr	r1, [r3, #32]
 8021486:	b530      	push	{r4, r5, lr}
 8021488:	2900      	cmp	r1, #0
 802148a:	bf0c      	ite	eq
 802148c:	4604      	moveq	r4, r0
 802148e:	2400      	movne	r4, #0
 8021490:	b083      	sub	sp, #12
 8021492:	5712      	ldrsb	r2, [r2, r4]
 8021494:	2a01      	cmp	r2, #1
 8021496:	dd05      	ble.n	80214a4 <GUI_MULTIBUF_EndEx+0x24>
 8021498:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802149c:	6923      	ldr	r3, [r4, #16]
 802149e:	3b01      	subs	r3, #1
 80214a0:	6123      	str	r3, [r4, #16]
 80214a2:	b10b      	cbz	r3, 80214a8 <GUI_MULTIBUF_EndEx+0x28>
 80214a4:	b003      	add	sp, #12
 80214a6:	bd30      	pop	{r4, r5, pc}
 80214a8:	4605      	mov	r5, r0
 80214aa:	2001      	movs	r0, #1
 80214ac:	40a8      	lsls	r0, r5
 80214ae:	f7ff f965 	bl	802077c <GUI_DCACHE_Clear>
 80214b2:	4628      	mov	r0, r5
 80214b4:	68a5      	ldr	r5, [r4, #8]
 80214b6:	61a5      	str	r5, [r4, #24]
 80214b8:	f7ff f972 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 80214bc:	9001      	str	r0, [sp, #4]
 80214be:	2800      	cmp	r0, #0
 80214c0:	d0f0      	beq.n	80214a4 <GUI_MULTIBUF_EndEx+0x24>
 80214c2:	68c3      	ldr	r3, [r0, #12]
 80214c4:	2122      	movs	r1, #34	; 0x22
 80214c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80214c8:	a801      	add	r0, sp, #4
 80214ca:	4798      	blx	r3
 80214cc:	4603      	mov	r3, r0
 80214ce:	2800      	cmp	r0, #0
 80214d0:	d0e8      	beq.n	80214a4 <GUI_MULTIBUF_EndEx+0x24>
 80214d2:	4629      	mov	r1, r5
 80214d4:	9801      	ldr	r0, [sp, #4]
 80214d6:	4798      	blx	r3
 80214d8:	b003      	add	sp, #12
 80214da:	bd30      	pop	{r4, r5, pc}
 80214dc:	2002e2bc 	.word	0x2002e2bc
 80214e0:	20030860 	.word	0x20030860

080214e4 <GUI_MULTIBUF_ConfirmEx>:
 80214e4:	4b09      	ldr	r3, [pc, #36]	; (802150c <GUI_MULTIBUF_ConfirmEx+0x28>)
 80214e6:	6a1a      	ldr	r2, [r3, #32]
 80214e8:	2a00      	cmp	r2, #0
 80214ea:	bf18      	it	ne
 80214ec:	2000      	movne	r0, #0
 80214ee:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80214f2:	b410      	push	{r4}
 80214f4:	6994      	ldr	r4, [r2, #24]
 80214f6:	2c00      	cmp	r4, #0
 80214f8:	db04      	blt.n	8021504 <GUI_MULTIBUF_ConfirmEx+0x20>
 80214fa:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80214fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021502:	6193      	str	r3, [r2, #24]
 8021504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021508:	4770      	bx	lr
 802150a:	bf00      	nop
 802150c:	2002e2bc 	.word	0x2002e2bc

08021510 <GUI_MULTIBUF_ConfigEx>:
 8021510:	b530      	push	{r4, r5, lr}
 8021512:	4d0c      	ldr	r5, [pc, #48]	; (8021544 <GUI_MULTIBUF_ConfigEx+0x34>)
 8021514:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8021516:	b083      	sub	sp, #12
 8021518:	4604      	mov	r4, r0
 802151a:	b153      	cbz	r3, 8021532 <GUI_MULTIBUF_ConfigEx+0x22>
 802151c:	6a2a      	ldr	r2, [r5, #32]
 802151e:	4b0a      	ldr	r3, [pc, #40]	; (8021548 <GUI_MULTIBUF_ConfigEx+0x38>)
 8021520:	2a00      	cmp	r2, #0
 8021522:	bf18      	it	ne
 8021524:	2400      	movne	r4, #0
 8021526:	2901      	cmp	r1, #1
 8021528:	bfb8      	it	lt
 802152a:	2101      	movlt	r1, #1
 802152c:	5519      	strb	r1, [r3, r4]
 802152e:	b003      	add	sp, #12
 8021530:	bd30      	pop	{r4, r5, pc}
 8021532:	4628      	mov	r0, r5
 8021534:	4b05      	ldr	r3, [pc, #20]	; (802154c <GUI_MULTIBUF_ConfigEx+0x3c>)
 8021536:	f840 3f24 	str.w	r3, [r0, #36]!
 802153a:	9101      	str	r1, [sp, #4]
 802153c:	f7ff f90a 	bl	8020754 <GUI__RegisterExit>
 8021540:	9901      	ldr	r1, [sp, #4]
 8021542:	e7eb      	b.n	802151c <GUI_MULTIBUF_ConfigEx+0xc>
 8021544:	2002e2bc 	.word	0x2002e2bc
 8021548:	20030860 	.word	0x20030860
 802154c:	080213cd 	.word	0x080213cd

08021550 <GUI_StoreKey>:
 8021550:	4b02      	ldr	r3, [pc, #8]	; (802155c <GUI_StoreKey+0xc>)
 8021552:	681a      	ldr	r2, [r3, #0]
 8021554:	b902      	cbnz	r2, 8021558 <GUI_StoreKey+0x8>
 8021556:	6018      	str	r0, [r3, #0]
 8021558:	f000 bb16 	b.w	8021b88 <GUI_SignalEvent>
 802155c:	2002e2e8 	.word	0x2002e2e8

08021560 <GUI_PollKeyMsg>:
 8021560:	b510      	push	{r4, lr}
 8021562:	f000 f8ab 	bl	80216bc <GUI_Lock>
 8021566:	4a0d      	ldr	r2, [pc, #52]	; (802159c <GUI_PollKeyMsg+0x3c>)
 8021568:	6813      	ldr	r3, [r2, #0]
 802156a:	6851      	ldr	r1, [r2, #4]
 802156c:	428b      	cmp	r3, r1
 802156e:	d00f      	beq.n	8021590 <GUI_PollKeyMsg+0x30>
 8021570:	4c0b      	ldr	r4, [pc, #44]	; (80215a0 <GUI_PollKeyMsg+0x40>)
 8021572:	42a3      	cmp	r3, r4
 8021574:	e893 0003 	ldmia.w	r3, {r0, r1}
 8021578:	f04f 0401 	mov.w	r4, #1
 802157c:	bf14      	ite	ne
 802157e:	3308      	addne	r3, #8
 8021580:	3b50      	subeq	r3, #80	; 0x50
 8021582:	6013      	str	r3, [r2, #0]
 8021584:	f007 fcc8 	bl	8028f18 <WM_OnKey>
 8021588:	f000 f88e 	bl	80216a8 <GUI_Unlock>
 802158c:	4620      	mov	r0, r4
 802158e:	bd10      	pop	{r4, pc}
 8021590:	2400      	movs	r4, #0
 8021592:	f000 f889 	bl	80216a8 <GUI_Unlock>
 8021596:	4620      	mov	r0, r4
 8021598:	bd10      	pop	{r4, pc}
 802159a:	bf00      	nop
 802159c:	200000ec 	.word	0x200000ec
 80215a0:	2002e33c 	.word	0x2002e33c

080215a4 <GUI_GetCursorLayer>:
 80215a4:	2801      	cmp	r0, #1
 80215a6:	bf9a      	itte	ls
 80215a8:	4b02      	ldrls	r3, [pc, #8]	; (80215b4 <GUI_GetCursorLayer+0x10>)
 80215aa:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 80215ae:	2000      	movhi	r0, #0
 80215b0:	4770      	bx	lr
 80215b2:	bf00      	nop
 80215b4:	2002e348 	.word	0x2002e348

080215b8 <GUI_GetLayerPosEx>:
 80215b8:	b570      	push	{r4, r5, r6, lr}
 80215ba:	4604      	mov	r4, r0
 80215bc:	460e      	mov	r6, r1
 80215be:	4615      	mov	r5, r2
 80215c0:	f000 f87c 	bl	80216bc <GUI_Lock>
 80215c4:	4620      	mov	r0, r4
 80215c6:	462a      	mov	r2, r5
 80215c8:	4631      	mov	r1, r6
 80215ca:	f002 fd05 	bl	8023fd8 <LCD_GetPosEx>
 80215ce:	4604      	mov	r4, r0
 80215d0:	b110      	cbz	r0, 80215d8 <GUI_GetLayerPosEx+0x20>
 80215d2:	2300      	movs	r3, #0
 80215d4:	6033      	str	r3, [r6, #0]
 80215d6:	602b      	str	r3, [r5, #0]
 80215d8:	f000 f866 	bl	80216a8 <GUI_Unlock>
 80215dc:	4620      	mov	r0, r4
 80215de:	bd70      	pop	{r4, r5, r6, pc}

080215e0 <GUI_SelectLayer>:
 80215e0:	b570      	push	{r4, r5, r6, lr}
 80215e2:	4d0d      	ldr	r5, [pc, #52]	; (8021618 <GUI_SelectLayer+0x38>)
 80215e4:	682b      	ldr	r3, [r5, #0]
 80215e6:	4604      	mov	r4, r0
 80215e8:	7c5e      	ldrb	r6, [r3, #17]
 80215ea:	f000 f867 	bl	80216bc <GUI_Lock>
 80215ee:	2c01      	cmp	r4, #1
 80215f0:	d903      	bls.n	80215fa <GUI_SelectLayer+0x1a>
 80215f2:	f000 f859 	bl	80216a8 <GUI_Unlock>
 80215f6:	4630      	mov	r0, r6
 80215f8:	bd70      	pop	{r4, r5, r6, pc}
 80215fa:	4620      	mov	r0, r4
 80215fc:	f7ff f8d0 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8021600:	2800      	cmp	r0, #0
 8021602:	d0f6      	beq.n	80215f2 <GUI_SelectLayer+0x12>
 8021604:	682b      	ldr	r3, [r5, #0]
 8021606:	745c      	strb	r4, [r3, #17]
 8021608:	f7fe fe8a 	bl	8020320 <GUI_SelectLCD>
 802160c:	4b03      	ldr	r3, [pc, #12]	; (802161c <GUI_SelectLayer+0x3c>)
 802160e:	601c      	str	r4, [r3, #0]
 8021610:	f000 f84a 	bl	80216a8 <GUI_Unlock>
 8021614:	4630      	mov	r0, r6
 8021616:	bd70      	pop	{r4, r5, r6, pc}
 8021618:	200000e8 	.word	0x200000e8
 802161c:	200308f4 	.word	0x200308f4

08021620 <GUI_SetLayerPosEx>:
 8021620:	b570      	push	{r4, r5, r6, lr}
 8021622:	4604      	mov	r4, r0
 8021624:	460d      	mov	r5, r1
 8021626:	4616      	mov	r6, r2
 8021628:	f000 f848 	bl	80216bc <GUI_Lock>
 802162c:	4632      	mov	r2, r6
 802162e:	4629      	mov	r1, r5
 8021630:	4620      	mov	r0, r4
 8021632:	f002 fd1f 	bl	8024074 <LCD_SetPosEx>
 8021636:	4604      	mov	r4, r0
 8021638:	f000 f836 	bl	80216a8 <GUI_Unlock>
 802163c:	4620      	mov	r0, r4
 802163e:	bd70      	pop	{r4, r5, r6, pc}

08021640 <GUI_TOUCH_StoreStateEx>:
 8021640:	b530      	push	{r4, r5, lr}
 8021642:	4c13      	ldr	r4, [pc, #76]	; (8021690 <GUI_TOUCH_StoreStateEx+0x50>)
 8021644:	b085      	sub	sp, #20
 8021646:	220c      	movs	r2, #12
 8021648:	4621      	mov	r1, r4
 802164a:	4605      	mov	r5, r0
 802164c:	f00d fa10 	bl	802ea70 <memcmp>
 8021650:	b178      	cbz	r0, 8021672 <GUI_TOUCH_StoreStateEx+0x32>
 8021652:	68e3      	ldr	r3, [r4, #12]
 8021654:	b1a3      	cbz	r3, 8021680 <GUI_TOUCH_StoreStateEx+0x40>
 8021656:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802165a:	ad01      	add	r5, sp, #4
 802165c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8021660:	a902      	add	r1, sp, #8
 8021662:	4628      	mov	r0, r5
 8021664:	4798      	blx	r3
 8021666:	4603      	mov	r3, r0
 8021668:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802166c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8021670:	b10b      	cbz	r3, 8021676 <GUI_TOUCH_StoreStateEx+0x36>
 8021672:	b005      	add	sp, #20
 8021674:	bd30      	pop	{r4, r5, pc}
 8021676:	4628      	mov	r0, r5
 8021678:	f00a fa8c 	bl	802bb94 <GUI_PID_StoreState>
 802167c:	b005      	add	sp, #20
 802167e:	bd30      	pop	{r4, r5, pc}
 8021680:	4628      	mov	r0, r5
 8021682:	f00a fa87 	bl	802bb94 <GUI_PID_StoreState>
 8021686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802168a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 802168e:	e7f0      	b.n	8021672 <GUI_TOUCH_StoreStateEx+0x32>
 8021690:	2002e350 	.word	0x2002e350

08021694 <_OnExit>:
 8021694:	b510      	push	{r4, lr}
 8021696:	4c03      	ldr	r4, [pc, #12]	; (80216a4 <_OnExit+0x10>)
 8021698:	6820      	ldr	r0, [r4, #0]
 802169a:	f7fe f84b 	bl	801f734 <GUI_ALLOC_FreeFixedBlock>
 802169e:	2300      	movs	r3, #0
 80216a0:	6023      	str	r3, [r4, #0]
 80216a2:	bd10      	pop	{r4, pc}
 80216a4:	2002e360 	.word	0x2002e360

080216a8 <GUI_Unlock>:
 80216a8:	4a03      	ldr	r2, [pc, #12]	; (80216b8 <GUI_Unlock+0x10>)
 80216aa:	6853      	ldr	r3, [r2, #4]
 80216ac:	3b01      	subs	r3, #1
 80216ae:	6053      	str	r3, [r2, #4]
 80216b0:	b103      	cbz	r3, 80216b4 <GUI_Unlock+0xc>
 80216b2:	4770      	bx	lr
 80216b4:	f7f6 bea4 	b.w	8018400 <GUI_X_Unlock>
 80216b8:	2002e360 	.word	0x2002e360

080216bc <GUI_Lock>:
 80216bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80216c0:	4d23      	ldr	r5, [pc, #140]	; (8021750 <GUI_Lock+0x94>)
 80216c2:	686b      	ldr	r3, [r5, #4]
 80216c4:	b123      	cbz	r3, 80216d0 <GUI_Lock+0x14>
 80216c6:	f7f6 fead 	bl	8018424 <GUI_X_GetTaskId>
 80216ca:	68ab      	ldr	r3, [r5, #8]
 80216cc:	4298      	cmp	r0, r3
 80216ce:	d004      	beq.n	80216da <GUI_Lock+0x1e>
 80216d0:	f7f6 fe9e 	bl	8018410 <GUI_X_Lock>
 80216d4:	f7f6 fea6 	bl	8018424 <GUI_X_GetTaskId>
 80216d8:	60a8      	str	r0, [r5, #8]
 80216da:	686b      	ldr	r3, [r5, #4]
 80216dc:	3301      	adds	r3, #1
 80216de:	2b01      	cmp	r3, #1
 80216e0:	606b      	str	r3, [r5, #4]
 80216e2:	d001      	beq.n	80216e8 <GUI_Lock+0x2c>
 80216e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80216e8:	4f1a      	ldr	r7, [pc, #104]	; (8021754 <GUI_Lock+0x98>)
 80216ea:	683b      	ldr	r3, [r7, #0]
 80216ec:	2b00      	cmp	r3, #0
 80216ee:	dd29      	ble.n	8021744 <GUI_Lock+0x88>
 80216f0:	2400      	movs	r4, #0
 80216f2:	4626      	mov	r6, r4
 80216f4:	e006      	b.n	8021704 <GUI_Lock+0x48>
 80216f6:	b342      	cbz	r2, 802174a <GUI_Lock+0x8e>
 80216f8:	683b      	ldr	r3, [r7, #0]
 80216fa:	3601      	adds	r6, #1
 80216fc:	429e      	cmp	r6, r3
 80216fe:	f104 047c 	add.w	r4, r4, #124	; 0x7c
 8021702:	da1f      	bge.n	8021744 <GUI_Lock+0x88>
 8021704:	f7f6 fe8e 	bl	8018424 <GUI_X_GetTaskId>
 8021708:	682b      	ldr	r3, [r5, #0]
 802170a:	591a      	ldr	r2, [r3, r4]
 802170c:	4290      	cmp	r0, r2
 802170e:	4423      	add	r3, r4
 8021710:	d1f1      	bne.n	80216f6 <GUI_Lock+0x3a>
 8021712:	687b      	ldr	r3, [r7, #4]
 8021714:	42b3      	cmp	r3, r6
 8021716:	d0e5      	beq.n	80216e4 <GUI_Lock+0x28>
 8021718:	2b00      	cmp	r3, #0
 802171a:	db10      	blt.n	802173e <GUI_Lock+0x82>
 802171c:	682a      	ldr	r2, [r5, #0]
 802171e:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 8021722:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 8021726:	f7ff f981 	bl	8020a2c <GUI_DEVICE_UnlinkTaskDevices>
 802172a:	682b      	ldr	r3, [r5, #0]
 802172c:	f8c8 0078 	str.w	r0, [r8, #120]	; 0x78
 8021730:	441c      	add	r4, r3
 8021732:	4b09      	ldr	r3, [pc, #36]	; (8021758 <GUI_Lock+0x9c>)
 8021734:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8021736:	3404      	adds	r4, #4
 8021738:	601c      	str	r4, [r3, #0]
 802173a:	f7ff f979 	bl	8020a30 <GUI_DEVICE_LinkDevices>
 802173e:	607e      	str	r6, [r7, #4]
 8021740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021744:	2400      	movs	r4, #0
 8021746:	4626      	mov	r6, r4
 8021748:	e7e3      	b.n	8021712 <GUI_Lock+0x56>
 802174a:	6018      	str	r0, [r3, #0]
 802174c:	e7e1      	b.n	8021712 <GUI_Lock+0x56>
 802174e:	bf00      	nop
 8021750:	2002e360 	.word	0x2002e360
 8021754:	200000f4 	.word	0x200000f4
 8021758:	200000e8 	.word	0x200000e8

0802175c <GUITASK_Init>:
 802175c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802175e:	4f19      	ldr	r7, [pc, #100]	; (80217c4 <GUITASK_Init+0x68>)
 8021760:	4b19      	ldr	r3, [pc, #100]	; (80217c8 <GUITASK_Init+0x6c>)
 8021762:	4e1a      	ldr	r6, [pc, #104]	; (80217cc <GUITASK_Init+0x70>)
 8021764:	4638      	mov	r0, r7
 8021766:	f840 3f0c 	str.w	r3, [r0, #12]!
 802176a:	f7fe fff3 	bl	8020754 <GUI__RegisterExit>
 802176e:	6834      	ldr	r4, [r6, #0]
 8021770:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 8021774:	00a4      	lsls	r4, r4, #2
 8021776:	4620      	mov	r0, r4
 8021778:	f7fd ffe6 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 802177c:	4b14      	ldr	r3, [pc, #80]	; (80217d0 <GUITASK_Init+0x74>)
 802177e:	6038      	str	r0, [r7, #0]
 8021780:	4622      	mov	r2, r4
 8021782:	681b      	ldr	r3, [r3, #0]
 8021784:	2100      	movs	r1, #0
 8021786:	4798      	blx	r3
 8021788:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802178c:	6073      	str	r3, [r6, #4]
 802178e:	f7f6 fe21 	bl	80183d4 <GUI_X_InitOS>
 8021792:	6833      	ldr	r3, [r6, #0]
 8021794:	2b00      	cmp	r3, #0
 8021796:	dd11      	ble.n	80217bc <GUITASK_Init+0x60>
 8021798:	2400      	movs	r4, #0
 802179a:	4625      	mov	r5, r4
 802179c:	e003      	b.n	80217a6 <GUITASK_Init+0x4a>
 802179e:	b172      	cbz	r2, 80217be <GUITASK_Init+0x62>
 80217a0:	6833      	ldr	r3, [r6, #0]
 80217a2:	429d      	cmp	r5, r3
 80217a4:	da0a      	bge.n	80217bc <GUITASK_Init+0x60>
 80217a6:	f7f6 fe3d 	bl	8018424 <GUI_X_GetTaskId>
 80217aa:	683b      	ldr	r3, [r7, #0]
 80217ac:	591a      	ldr	r2, [r3, r4]
 80217ae:	4290      	cmp	r0, r2
 80217b0:	4423      	add	r3, r4
 80217b2:	f105 0501 	add.w	r5, r5, #1
 80217b6:	f104 047c 	add.w	r4, r4, #124	; 0x7c
 80217ba:	d1f0      	bne.n	802179e <GUITASK_Init+0x42>
 80217bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80217be:	6018      	str	r0, [r3, #0]
 80217c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80217c2:	bf00      	nop
 80217c4:	2002e360 	.word	0x2002e360
 80217c8:	08021695 	.word	0x08021695
 80217cc:	200000f4 	.word	0x200000f4
 80217d0:	2000010c 	.word	0x2000010c

080217d4 <GUITASK_CopyContext>:
 80217d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80217d8:	4e23      	ldr	r6, [pc, #140]	; (8021868 <GUITASK_CopyContext+0x94>)
 80217da:	6833      	ldr	r3, [r6, #0]
 80217dc:	2b00      	cmp	r3, #0
 80217de:	dd3f      	ble.n	8021860 <GUITASK_CopyContext+0x8c>
 80217e0:	4d22      	ldr	r5, [pc, #136]	; (802186c <GUITASK_CopyContext+0x98>)
 80217e2:	4f23      	ldr	r7, [pc, #140]	; (8021870 <GUITASK_CopyContext+0x9c>)
 80217e4:	682c      	ldr	r4, [r5, #0]
 80217e6:	f8d7 9000 	ldr.w	r9, [r7]
 80217ea:	ebc3 1843 	rsb	r8, r3, r3, lsl #5
 80217ee:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80217f2:	f108 080c 	add.w	r8, r8, #12
 80217f6:	340c      	adds	r4, #12
 80217f8:	f04f 0a00 	mov.w	sl, #0
 80217fc:	f1a4 0308 	sub.w	r3, r4, #8
 8021800:	2274      	movs	r2, #116	; 0x74
 8021802:	4618      	mov	r0, r3
 8021804:	4649      	mov	r1, r9
 8021806:	f00d f942 	bl	802ea8e <memcpy>
 802180a:	1f22      	subs	r2, r4, #4
 802180c:	6320      	str	r0, [r4, #48]	; 0x30
 802180e:	63a0      	str	r0, [r4, #56]	; 0x38
 8021810:	f844 ac0c 	str.w	sl, [r4, #-12]
 8021814:	6362      	str	r2, [r4, #52]	; 0x34
 8021816:	60e4      	str	r4, [r4, #12]
 8021818:	347c      	adds	r4, #124	; 0x7c
 802181a:	45a0      	cmp	r8, r4
 802181c:	d1ee      	bne.n	80217fc <GUITASK_CopyContext+0x28>
 802181e:	2400      	movs	r4, #0
 8021820:	46a0      	mov	r8, r4
 8021822:	e003      	b.n	802182c <GUITASK_CopyContext+0x58>
 8021824:	b192      	cbz	r2, 802184c <GUITASK_CopyContext+0x78>
 8021826:	6832      	ldr	r2, [r6, #0]
 8021828:	4590      	cmp	r8, r2
 802182a:	da14      	bge.n	8021856 <GUITASK_CopyContext+0x82>
 802182c:	f7f6 fdfa 	bl	8018424 <GUI_X_GetTaskId>
 8021830:	682b      	ldr	r3, [r5, #0]
 8021832:	591a      	ldr	r2, [r3, r4]
 8021834:	4290      	cmp	r0, r2
 8021836:	eb03 0104 	add.w	r1, r3, r4
 802183a:	f108 0801 	add.w	r8, r8, #1
 802183e:	f104 047c 	add.w	r4, r4, #124	; 0x7c
 8021842:	d1ef      	bne.n	8021824 <GUITASK_CopyContext+0x50>
 8021844:	3104      	adds	r1, #4
 8021846:	6039      	str	r1, [r7, #0]
 8021848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802184c:	6008      	str	r0, [r1, #0]
 802184e:	3104      	adds	r1, #4
 8021850:	6039      	str	r1, [r7, #0]
 8021852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021856:	4619      	mov	r1, r3
 8021858:	3104      	adds	r1, #4
 802185a:	6039      	str	r1, [r7, #0]
 802185c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021860:	4b02      	ldr	r3, [pc, #8]	; (802186c <GUITASK_CopyContext+0x98>)
 8021862:	4f03      	ldr	r7, [pc, #12]	; (8021870 <GUITASK_CopyContext+0x9c>)
 8021864:	6819      	ldr	r1, [r3, #0]
 8021866:	e7ed      	b.n	8021844 <GUITASK_CopyContext+0x70>
 8021868:	200000f4 	.word	0x200000f4
 802186c:	2002e360 	.word	0x2002e360
 8021870:	200000e8 	.word	0x200000e8

08021874 <GUI_SetTimeSlice>:
 8021874:	4b01      	ldr	r3, [pc, #4]	; (802187c <GUI_SetTimeSlice+0x8>)
 8021876:	6018      	str	r0, [r3, #0]
 8021878:	4770      	bx	lr
 802187a:	bf00      	nop
 802187c:	200000fc 	.word	0x200000fc

08021880 <GUI_Delay>:
 8021880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021884:	4607      	mov	r7, r0
 8021886:	f7f6 fd9b 	bl	80183c0 <GUI_X_GetTime>
 802188a:	4407      	add	r7, r0
 802188c:	f7f6 fd98 	bl	80183c0 <GUI_X_GetTime>
 8021890:	1a3e      	subs	r6, r7, r0
 8021892:	2e00      	cmp	r6, #0
 8021894:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80218f8 <GUI_Delay+0x78>
 8021898:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80218fc <GUI_Delay+0x7c>
 802189c:	dd22      	ble.n	80218e4 <GUI_Delay+0x64>
 802189e:	f7fe fc6d 	bl	802017c <GUI_Exec>
 80218a2:	f8d9 3000 	ldr.w	r3, [r9]
 80218a6:	429e      	cmp	r6, r3
 80218a8:	bfa8      	it	ge
 80218aa:	461e      	movge	r6, r3
 80218ac:	f7ff ff06 	bl	80216bc <GUI_Lock>
 80218b0:	f8d8 4000 	ldr.w	r4, [r8]
 80218b4:	f7fe f9f6 	bl	801fca4 <GUI_ALLOC_Lock>
 80218b8:	b1b4      	cbz	r4, 80218e8 <GUI_Delay+0x68>
 80218ba:	4625      	mov	r5, r4
 80218bc:	f7ff fef4 	bl	80216a8 <GUI_Unlock>
 80218c0:	3d01      	subs	r5, #1
 80218c2:	d1fb      	bne.n	80218bc <GUI_Delay+0x3c>
 80218c4:	4630      	mov	r0, r6
 80218c6:	f7f6 fd7f 	bl	80183c8 <GUI_X_Delay>
 80218ca:	f7ff fef7 	bl	80216bc <GUI_Lock>
 80218ce:	3c01      	subs	r4, #1
 80218d0:	d1fb      	bne.n	80218ca <GUI_Delay+0x4a>
 80218d2:	f7fe f9ef 	bl	801fcb4 <GUI_ALLOC_Unlock>
 80218d6:	f7ff fee7 	bl	80216a8 <GUI_Unlock>
 80218da:	f7f6 fd71 	bl	80183c0 <GUI_X_GetTime>
 80218de:	1a3e      	subs	r6, r7, r0
 80218e0:	2e00      	cmp	r6, #0
 80218e2:	dcdc      	bgt.n	802189e <GUI_Delay+0x1e>
 80218e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80218e8:	4630      	mov	r0, r6
 80218ea:	f7f6 fd6d 	bl	80183c8 <GUI_X_Delay>
 80218ee:	f7fe f9e1 	bl	801fcb4 <GUI_ALLOC_Unlock>
 80218f2:	f7ff fed9 	bl	80216a8 <GUI_Unlock>
 80218f6:	e7f0      	b.n	80218da <GUI_Delay+0x5a>
 80218f8:	200000fc 	.word	0x200000fc
 80218fc:	2002e364 	.word	0x2002e364

08021900 <GUI_UC__GetCharCodeInc>:
 8021900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021902:	4e08      	ldr	r6, [pc, #32]	; (8021924 <GUI_UC__GetCharCodeInc+0x24>)
 8021904:	6804      	ldr	r4, [r0, #0]
 8021906:	6833      	ldr	r3, [r6, #0]
 8021908:	4605      	mov	r5, r0
 802190a:	681b      	ldr	r3, [r3, #0]
 802190c:	4620      	mov	r0, r4
 802190e:	4798      	blx	r3
 8021910:	6833      	ldr	r3, [r6, #0]
 8021912:	4607      	mov	r7, r0
 8021914:	685b      	ldr	r3, [r3, #4]
 8021916:	4620      	mov	r0, r4
 8021918:	4798      	blx	r3
 802191a:	4420      	add	r0, r4
 802191c:	6028      	str	r0, [r5, #0]
 802191e:	4638      	mov	r0, r7
 8021920:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021922:	bf00      	nop
 8021924:	200308a8 	.word	0x200308a8

08021928 <GUI_UC__NumChars2NumBytes>:
 8021928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802192a:	b169      	cbz	r1, 8021948 <GUI_UC__NumChars2NumBytes+0x20>
 802192c:	4f07      	ldr	r7, [pc, #28]	; (802194c <GUI_UC__NumChars2NumBytes+0x24>)
 802192e:	4605      	mov	r5, r0
 8021930:	460c      	mov	r4, r1
 8021932:	2600      	movs	r6, #0
 8021934:	683b      	ldr	r3, [r7, #0]
 8021936:	4628      	mov	r0, r5
 8021938:	685b      	ldr	r3, [r3, #4]
 802193a:	4798      	blx	r3
 802193c:	3c01      	subs	r4, #1
 802193e:	4405      	add	r5, r0
 8021940:	4406      	add	r6, r0
 8021942:	d1f7      	bne.n	8021934 <GUI_UC__NumChars2NumBytes+0xc>
 8021944:	4630      	mov	r0, r6
 8021946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021948:	460e      	mov	r6, r1
 802194a:	e7fb      	b.n	8021944 <GUI_UC__NumChars2NumBytes+0x1c>
 802194c:	200308a8 	.word	0x200308a8

08021950 <_GetCharCode>:
 8021950:	7800      	ldrb	r0, [r0, #0]
 8021952:	4770      	bx	lr

08021954 <_GetCharSize>:
 8021954:	2001      	movs	r0, #1
 8021956:	4770      	bx	lr

08021958 <_CalcSizeOfChar>:
 8021958:	2001      	movs	r0, #1
 802195a:	4770      	bx	lr

0802195c <_Encode>:
 802195c:	7001      	strb	r1, [r0, #0]
 802195e:	2001      	movs	r0, #1
 8021960:	4770      	bx	lr
 8021962:	bf00      	nop

08021964 <GUI_DispFloatMin>:
 8021964:	b530      	push	{r4, r5, lr}
 8021966:	ed2d 8b02 	vpush	{d8}
 802196a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 802196e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021972:	b083      	sub	sp, #12
 8021974:	4604      	mov	r4, r0
 8021976:	d15a      	bne.n	8021a2e <GUI_DispFloatMin+0xca>
 8021978:	eddf 8a7f 	vldr	s17, [pc, #508]	; 8021b78 <GUI_DispFloatMin+0x214>
 802197c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021980:	4b7e      	ldr	r3, [pc, #504]	; (8021b7c <GUI_DispFloatMin+0x218>)
 8021982:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8021986:	ee00 3a10 	vmov	s0, r3
 802198a:	eeb8 8a40 	vcvt.f32.u32	s16, s0
 802198e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8021992:	ee68 7a27 	vmul.f32	s15, s16, s15
 8021996:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 802199a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802199e:	f100 8084 	bmi.w	8021aaa <GUI_DispFloatMin+0x146>
 80219a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80219a6:	ee17 0a90 	vmov	r0, s15
 80219aa:	f7ee fd95 	bl	80104d8 <__aeabi_f2d>
 80219ae:	ec41 0b10 	vmov	d0, r0, r1
 80219b2:	f00d f921 	bl	802ebf8 <floor>
 80219b6:	ec51 0b10 	vmov	r0, r1, d0
 80219ba:	f7ef f87f 	bl	8010abc <__aeabi_d2f>
 80219be:	ee07 0a90 	vmov	s15, r0
 80219c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80219c6:	ee17 0a90 	vmov	r0, s15
 80219ca:	f7fe fa49 	bl	801fe60 <GUI_Long2Len>
 80219ce:	ee28 0a28 	vmul.f32	s0, s16, s17
 80219d2:	2c00      	cmp	r4, #0
 80219d4:	bf0c      	ite	eq
 80219d6:	4623      	moveq	r3, r4
 80219d8:	1c63      	addne	r3, r4, #1
 80219da:	1b00      	subs	r0, r0, r4
 80219dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80219e0:	2800      	cmp	r0, #0
 80219e2:	bfac      	ite	ge
 80219e4:	181d      	addge	r5, r3, r0
 80219e6:	1c1d      	addlt	r5, r3, #0
 80219e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80219ec:	b2ed      	uxtb	r5, r5
 80219ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80219f2:	d46d      	bmi.n	8021ad0 <GUI_DispFloatMin+0x16c>
 80219f4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80219f8:	ee17 0a90 	vmov	r0, s15
 80219fc:	f7ee fd6c 	bl	80104d8 <__aeabi_f2d>
 8021a00:	ec41 0b10 	vmov	d0, r0, r1
 8021a04:	f00d f8f8 	bl	802ebf8 <floor>
 8021a08:	ec51 0b10 	vmov	r0, r1, d0
 8021a0c:	f7ef f856 	bl	8010abc <__aeabi_d2f>
 8021a10:	ee07 0a90 	vmov	s15, r0
 8021a14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021a18:	4622      	mov	r2, r4
 8021a1a:	ee17 0a90 	vmov	r0, s15
 8021a1e:	4629      	mov	r1, r5
 8021a20:	b003      	add	sp, #12
 8021a22:	ecbd 8b02 	vpop	{d8}
 8021a26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021a2a:	f00a be51 	b.w	802c6d0 <GUI_DispDecShift>
 8021a2e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8021a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a36:	eef0 8a40 	vmov.f32	s17, s0
 8021a3a:	db09      	blt.n	8021a50 <GUI_DispFloatMin+0xec>
 8021a3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021a40:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a48:	d453      	bmi.n	8021af2 <GUI_DispFloatMin+0x18e>
 8021a4a:	eef0 7a68 	vmov.f32	s15, s17
 8021a4e:	e797      	b.n	8021980 <GUI_DispFloatMin+0x1c>
 8021a50:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8021a54:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8021a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a5c:	ddf5      	ble.n	8021a4a <GUI_DispFloatMin+0xe6>
 8021a5e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8021b80 <GUI_DispFloatMin+0x21c>
 8021a62:	eef0 7ac0 	vabs.f32	s15, s0
 8021a66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021a6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8021a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a72:	d071      	beq.n	8021b58 <GUI_DispFloatMin+0x1f4>
 8021a74:	2300      	movs	r3, #0
 8021a76:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8021a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021a7e:	3301      	adds	r3, #1
 8021a80:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8021a84:	b2db      	uxtb	r3, r3
 8021a86:	ee16 2a90 	vmov	r2, s13
 8021a8a:	2a00      	cmp	r2, #0
 8021a8c:	d0f5      	beq.n	8021a7a <GUI_DispFloatMin+0x116>
 8021a8e:	42a3      	cmp	r3, r4
 8021a90:	dd62      	ble.n	8021b58 <GUI_DispFloatMin+0x1f4>
 8021a92:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8021a96:	eef4 8ae7 	vcmpe.f32	s17, s15
 8021a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a9e:	d860      	bhi.n	8021b62 <GUI_DispFloatMin+0x1fe>
 8021aa0:	2c00      	cmp	r4, #0
 8021aa2:	d15f      	bne.n	8021b64 <GUI_DispFloatMin+0x200>
 8021aa4:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 8021aa8:	e7cf      	b.n	8021a4a <GUI_DispFloatMin+0xe6>
 8021aaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021aae:	ee17 0a90 	vmov	r0, s15
 8021ab2:	f7ee fd11 	bl	80104d8 <__aeabi_f2d>
 8021ab6:	ec41 0b10 	vmov	d0, r0, r1
 8021aba:	f00d f81d 	bl	802eaf8 <ceil>
 8021abe:	ec51 0b10 	vmov	r0, r1, d0
 8021ac2:	f7ee fffb 	bl	8010abc <__aeabi_d2f>
 8021ac6:	ee07 0a90 	vmov	s15, r0
 8021aca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8021ace:	e77a      	b.n	80219c6 <GUI_DispFloatMin+0x62>
 8021ad0:	ee70 7a67 	vsub.f32	s15, s0, s15
 8021ad4:	ee17 0a90 	vmov	r0, s15
 8021ad8:	f7ee fcfe 	bl	80104d8 <__aeabi_f2d>
 8021adc:	ec41 0b10 	vmov	d0, r0, r1
 8021ae0:	f00d f80a 	bl	802eaf8 <ceil>
 8021ae4:	ec51 0b10 	vmov	r0, r1, d0
 8021ae8:	f7ee ffe8 	bl	8010abc <__aeabi_d2f>
 8021aec:	ee07 0a90 	vmov	s15, r0
 8021af0:	e790      	b.n	8021a14 <GUI_DispFloatMin+0xb0>
 8021af2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8021b80 <GUI_DispFloatMin+0x21c>
 8021af6:	eef0 7ac0 	vabs.f32	s15, s0
 8021afa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021afe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8021b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b06:	d022      	beq.n	8021b4e <GUI_DispFloatMin+0x1ea>
 8021b08:	2300      	movs	r3, #0
 8021b0a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8021b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8021b12:	3301      	adds	r3, #1
 8021b14:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8021b18:	b2db      	uxtb	r3, r3
 8021b1a:	ee16 2a90 	vmov	r2, s13
 8021b1e:	2a00      	cmp	r2, #0
 8021b20:	d0f5      	beq.n	8021b0e <GUI_DispFloatMin+0x1aa>
 8021b22:	42a3      	cmp	r3, r4
 8021b24:	dd13      	ble.n	8021b4e <GUI_DispFloatMin+0x1ea>
 8021b26:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8021b2a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8021b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021b32:	db1a      	blt.n	8021b6a <GUI_DispFloatMin+0x206>
 8021b34:	b9b4      	cbnz	r4, 8021b64 <GUI_DispFloatMin+0x200>
 8021b36:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8021b3a:	4b10      	ldr	r3, [pc, #64]	; (8021b7c <GUI_DispFloatMin+0x218>)
 8021b3c:	eddf 7a11 	vldr	s15, [pc, #68]	; 8021b84 <GUI_DispFloatMin+0x220>
 8021b40:	681b      	ldr	r3, [r3, #0]
 8021b42:	9301      	str	r3, [sp, #4]
 8021b44:	ee07 3a10 	vmov	s14, r3
 8021b48:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 8021b4c:	e73b      	b.n	80219c6 <GUI_DispFloatMin+0x62>
 8021b4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021b52:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8021b56:	e713      	b.n	8021980 <GUI_DispFloatMin+0x1c>
 8021b58:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021b5c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8021b60:	e70e      	b.n	8021980 <GUI_DispFloatMin+0x1c>
 8021b62:	b12c      	cbz	r4, 8021b70 <GUI_DispFloatMin+0x20c>
 8021b64:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8021b68:	e70a      	b.n	8021980 <GUI_DispFloatMin+0x1c>
 8021b6a:	2c00      	cmp	r4, #0
 8021b6c:	f47f af04 	bne.w	8021978 <GUI_DispFloatMin+0x14>
 8021b70:	eddf 8a01 	vldr	s17, [pc, #4]	; 8021b78 <GUI_DispFloatMin+0x214>
 8021b74:	e7e1      	b.n	8021b3a <GUI_DispFloatMin+0x1d6>
 8021b76:	bf00      	nop
 8021b78:	00000000 	.word	0x00000000
 8021b7c:	0803635c 	.word	0x0803635c
 8021b80:	3089705f 	.word	0x3089705f
 8021b84:	00000000 	.word	0x00000000

08021b88 <GUI_SignalEvent>:
 8021b88:	4b02      	ldr	r3, [pc, #8]	; (8021b94 <GUI_SignalEvent+0xc>)
 8021b8a:	681b      	ldr	r3, [r3, #0]
 8021b8c:	b103      	cbz	r3, 8021b90 <GUI_SignalEvent+0x8>
 8021b8e:	4718      	bx	r3
 8021b90:	4770      	bx	lr
 8021b92:	bf00      	nop
 8021b94:	2002e374 	.word	0x2002e374

08021b98 <GUI__MixColorsBulk>:
 8021b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b9c:	b087      	sub	sp, #28
 8021b9e:	4692      	mov	sl, r2
 8021ba0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021ba2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021ba4:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
 8021ba8:	9001      	str	r0, [sp, #4]
 8021baa:	9102      	str	r1, [sp, #8]
 8021bac:	2a00      	cmp	r2, #0
 8021bae:	d035      	beq.n	8021c1c <GUI__MixColorsBulk+0x84>
 8021bb0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021bb2:	f8df b070 	ldr.w	fp, [pc, #112]	; 8021c24 <GUI__MixColorsBulk+0x8c>
 8021bb6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8021c28 <GUI__MixColorsBulk+0x90>
 8021bba:	0092      	lsls	r2, r2, #2
 8021bbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021bc0:	9304      	str	r3, [sp, #16]
 8021bc2:	2300      	movs	r3, #0
 8021bc4:	9205      	str	r2, [sp, #20]
 8021bc6:	9303      	str	r3, [sp, #12]
 8021bc8:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021bca:	9e02      	ldr	r6, [sp, #8]
 8021bcc:	9d01      	ldr	r5, [sp, #4]
 8021bce:	4657      	mov	r7, sl
 8021bd0:	f855 0b04 	ldr.w	r0, [r5], #4
 8021bd4:	f8db 3000 	ldr.w	r3, [fp]
 8021bd8:	f856 1b04 	ldr.w	r1, [r6], #4
 8021bdc:	0e02      	lsrs	r2, r0, #24
 8021bde:	fb09 f202 	mul.w	r2, r9, r2
 8021be2:	fba8 e202 	umull	lr, r2, r8, r2
 8021be6:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 8021bea:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021bee:	4798      	blx	r3
 8021bf0:	3c01      	subs	r4, #1
 8021bf2:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8021bf6:	f847 0b04 	str.w	r0, [r7], #4
 8021bfa:	d1e9      	bne.n	8021bd0 <GUI__MixColorsBulk+0x38>
 8021bfc:	9a01      	ldr	r2, [sp, #4]
 8021bfe:	9905      	ldr	r1, [sp, #20]
 8021c00:	9b03      	ldr	r3, [sp, #12]
 8021c02:	4610      	mov	r0, r2
 8021c04:	4408      	add	r0, r1
 8021c06:	9a02      	ldr	r2, [sp, #8]
 8021c08:	9001      	str	r0, [sp, #4]
 8021c0a:	448a      	add	sl, r1
 8021c0c:	9904      	ldr	r1, [sp, #16]
 8021c0e:	440a      	add	r2, r1
 8021c10:	9202      	str	r2, [sp, #8]
 8021c12:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021c14:	3301      	adds	r3, #1
 8021c16:	429a      	cmp	r2, r3
 8021c18:	9303      	str	r3, [sp, #12]
 8021c1a:	d1d5      	bne.n	8021bc8 <GUI__MixColorsBulk+0x30>
 8021c1c:	b007      	add	sp, #28
 8021c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c22:	bf00      	nop
 8021c24:	20000100 	.word	0x20000100
 8021c28:	80808081 	.word	0x80808081

08021c2c <GUI__MixColors>:
 8021c2c:	b4f0      	push	{r4, r5, r6, r7}
 8021c2e:	0e0b      	lsrs	r3, r1, #24
 8021c30:	ea4f 6410 	mov.w	r4, r0, lsr #24
 8021c34:	4b12      	ldr	r3, [pc, #72]	; (8021c80 <GUI__MixColors+0x54>)
 8021c36:	fb02 f204 	mul.w	r2, r2, r4
 8021c3a:	bf08      	it	eq
 8021c3c:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 8021c40:	fba3 3202 	umull	r3, r2, r3, r2
 8021c44:	09d2      	lsrs	r2, r2, #7
 8021c46:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8021c4a:	0a0d      	lsrs	r5, r1, #8
 8021c4c:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
 8021c50:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021c54:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8021c58:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8021c5c:	fb02 f106 	mul.w	r1, r2, r6
 8021c60:	fb07 f005 	mul.w	r0, r7, r5
 8021c64:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8021c68:	fb07 1103 	mla	r1, r7, r3, r1
 8021c6c:	fb02 0004 	mla	r0, r2, r4, r0
 8021c70:	0a09      	lsrs	r1, r1, #8
 8021c72:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
 8021c76:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8021c7a:	4308      	orrs	r0, r1
 8021c7c:	bcf0      	pop	{r4, r5, r6, r7}
 8021c7e:	4770      	bx	lr
 8021c80:	80808081 	.word	0x80808081

08021c84 <_OnExit>:
 8021c84:	b510      	push	{r4, lr}
 8021c86:	4c08      	ldr	r4, [pc, #32]	; (8021ca8 <_OnExit+0x24>)
 8021c88:	6820      	ldr	r0, [r4, #0]
 8021c8a:	f7fd fd53 	bl	801f734 <GUI_ALLOC_FreeFixedBlock>
 8021c8e:	6860      	ldr	r0, [r4, #4]
 8021c90:	f7fd fd50 	bl	801f734 <GUI_ALLOC_FreeFixedBlock>
 8021c94:	68a0      	ldr	r0, [r4, #8]
 8021c96:	f7fd fd4d 	bl	801f734 <GUI_ALLOC_FreeFixedBlock>
 8021c9a:	2300      	movs	r3, #0
 8021c9c:	60a3      	str	r3, [r4, #8]
 8021c9e:	6063      	str	r3, [r4, #4]
 8021ca0:	6023      	str	r3, [r4, #0]
 8021ca2:	60e3      	str	r3, [r4, #12]
 8021ca4:	6123      	str	r3, [r4, #16]
 8021ca6:	bd10      	pop	{r4, pc}
 8021ca8:	2002e37c 	.word	0x2002e37c

08021cac <GUI__DoAlphaBlending>:
 8021cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021cb0:	4c96      	ldr	r4, [pc, #600]	; (8021f0c <GUI__DoAlphaBlending+0x260>)
 8021cb2:	b08f      	sub	sp, #60	; 0x3c
 8021cb4:	461d      	mov	r5, r3
 8021cb6:	6924      	ldr	r4, [r4, #16]
 8021cb8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021cba:	9005      	str	r0, [sp, #20]
 8021cbc:	2600      	movs	r6, #0
 8021cbe:	9107      	str	r1, [sp, #28]
 8021cc0:	4693      	mov	fp, r2
 8021cc2:	601e      	str	r6, [r3, #0]
 8021cc4:	2c00      	cmp	r4, #0
 8021cc6:	f000 80f0 	beq.w	8021eaa <GUI__DoAlphaBlending+0x1fe>
 8021cca:	4b90      	ldr	r3, [pc, #576]	; (8021f0c <GUI__DoAlphaBlending+0x260>)
 8021ccc:	68df      	ldr	r7, [r3, #12]
 8021cce:	461c      	mov	r4, r3
 8021cd0:	b92f      	cbnz	r7, 8021cde <GUI__DoAlphaBlending+0x32>
 8021cd2:	4b8f      	ldr	r3, [pc, #572]	; (8021f10 <GUI__DoAlphaBlending+0x264>)
 8021cd4:	681f      	ldr	r7, [r3, #0]
 8021cd6:	60e7      	str	r7, [r4, #12]
 8021cd8:	2f00      	cmp	r7, #0
 8021cda:	f000 80f0 	beq.w	8021ebe <GUI__DoAlphaBlending+0x212>
 8021cde:	4b8b      	ldr	r3, [pc, #556]	; (8021f0c <GUI__DoAlphaBlending+0x260>)
 8021ce0:	4e8a      	ldr	r6, [pc, #552]	; (8021f0c <GUI__DoAlphaBlending+0x260>)
 8021ce2:	681b      	ldr	r3, [r3, #0]
 8021ce4:	9302      	str	r3, [sp, #8]
 8021ce6:	2b00      	cmp	r3, #0
 8021ce8:	f000 80ff 	beq.w	8021eea <GUI__DoAlphaBlending+0x23e>
 8021cec:	4b87      	ldr	r3, [pc, #540]	; (8021f0c <GUI__DoAlphaBlending+0x260>)
 8021cee:	4c87      	ldr	r4, [pc, #540]	; (8021f0c <GUI__DoAlphaBlending+0x260>)
 8021cf0:	685b      	ldr	r3, [r3, #4]
 8021cf2:	9303      	str	r3, [sp, #12]
 8021cf4:	2b00      	cmp	r3, #0
 8021cf6:	f000 80ea 	beq.w	8021ece <GUI__DoAlphaBlending+0x222>
 8021cfa:	4a86      	ldr	r2, [pc, #536]	; (8021f14 <GUI__DoAlphaBlending+0x268>)
 8021cfc:	4b86      	ldr	r3, [pc, #536]	; (8021f18 <GUI__DoAlphaBlending+0x26c>)
 8021cfe:	6812      	ldr	r2, [r2, #0]
 8021d00:	7c50      	ldrb	r0, [r2, #17]
 8021d02:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8021d06:	9308      	str	r3, [sp, #32]
 8021d08:	691b      	ldr	r3, [r3, #16]
 8021d0a:	930d      	str	r3, [sp, #52]	; 0x34
 8021d0c:	f001 fbe4 	bl	80234d8 <GUI_GetBitsPerPixelEx>
 8021d10:	4b80      	ldr	r3, [pc, #512]	; (8021f14 <GUI__DoAlphaBlending+0x268>)
 8021d12:	9004      	str	r0, [sp, #16]
 8021d14:	681b      	ldr	r3, [r3, #0]
 8021d16:	7c58      	ldrb	r0, [r3, #17]
 8021d18:	f001 fbf8 	bl	802350c <GUI_GetpfIndex2ColorEx>
 8021d1c:	4b7f      	ldr	r3, [pc, #508]	; (8021f1c <GUI__DoAlphaBlending+0x270>)
 8021d1e:	900b      	str	r0, [sp, #44]	; 0x2c
 8021d20:	42af      	cmp	r7, r5
 8021d22:	bfa8      	it	ge
 8021d24:	462f      	movge	r7, r5
 8021d26:	4298      	cmp	r0, r3
 8021d28:	f000 80ce 	beq.w	8021ec8 <GUI__DoAlphaBlending+0x21c>
 8021d2c:	4b7c      	ldr	r3, [pc, #496]	; (8021f20 <GUI__DoAlphaBlending+0x274>)
 8021d2e:	1ac3      	subs	r3, r0, r3
 8021d30:	bf18      	it	ne
 8021d32:	2301      	movne	r3, #1
 8021d34:	930a      	str	r3, [sp, #40]	; 0x28
 8021d36:	9b05      	ldr	r3, [sp, #20]
 8021d38:	443b      	add	r3, r7
 8021d3a:	930c      	str	r3, [sp, #48]	; 0x30
 8021d3c:	2600      	movs	r6, #0
 8021d3e:	3b01      	subs	r3, #1
 8021d40:	9309      	str	r3, [sp, #36]	; 0x24
 8021d42:	4634      	mov	r4, r6
 8021d44:	46ba      	mov	sl, r7
 8021d46:	465f      	mov	r7, fp
 8021d48:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021d4a:	f857 0b04 	ldr.w	r0, [r7], #4
 8021d4e:	4798      	blx	r3
 8021d50:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8021d54:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021d58:	4681      	mov	r9, r0
 8021d5a:	d047      	beq.n	8021dec <GUI__DoAlphaBlending+0x140>
 8021d5c:	2c00      	cmp	r4, #0
 8021d5e:	d12b      	bne.n	8021db8 <GUI__DoAlphaBlending+0x10c>
 8021d60:	4b6c      	ldr	r3, [pc, #432]	; (8021f14 <GUI__DoAlphaBlending+0x268>)
 8021d62:	9a05      	ldr	r2, [sp, #20]
 8021d64:	681b      	ldr	r3, [r3, #0]
 8021d66:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8021d6a:	1995      	adds	r5, r2, r6
 8021d6c:	42ab      	cmp	r3, r5
 8021d6e:	dd59      	ble.n	8021e24 <GUI__DoAlphaBlending+0x178>
 8021d70:	1b5a      	subs	r2, r3, r5
 8021d72:	9206      	str	r2, [sp, #24]
 8021d74:	4614      	mov	r4, r2
 8021d76:	461d      	mov	r5, r3
 8021d78:	9b02      	ldr	r3, [sp, #8]
 8021d7a:	9907      	ldr	r1, [sp, #28]
 8021d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021d7e:	4434      	add	r4, r6
 8021d80:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8021d84:	9b08      	ldr	r3, [sp, #32]
 8021d86:	9301      	str	r3, [sp, #4]
 8021d88:	9400      	str	r4, [sp, #0]
 8021d8a:	460b      	mov	r3, r1
 8021d8c:	4628      	mov	r0, r5
 8021d8e:	f002 f8d1 	bl	8023f34 <GUI_ReadRectEx>
 8021d92:	9b04      	ldr	r3, [sp, #16]
 8021d94:	2b17      	cmp	r3, #23
 8021d96:	dd7e      	ble.n	8021e96 <GUI__DoAlphaBlending+0x1ea>
 8021d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021d9a:	2b00      	cmp	r3, #0
 8021d9c:	d044      	beq.n	8021e28 <GUI__DoAlphaBlending+0x17c>
 8021d9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021da0:	9606      	str	r6, [sp, #24]
 8021da2:	1b5d      	subs	r5, r3, r5
 8021da4:	462e      	mov	r6, r5
 8021da6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021da8:	6820      	ldr	r0, [r4, #0]
 8021daa:	47a8      	blx	r5
 8021dac:	3e01      	subs	r6, #1
 8021dae:	f844 0b04 	str.w	r0, [r4], #4
 8021db2:	d1f9      	bne.n	8021da8 <GUI__DoAlphaBlending+0xfc>
 8021db4:	9e06      	ldr	r6, [sp, #24]
 8021db6:	2401      	movs	r4, #1
 8021db8:	4b54      	ldr	r3, [pc, #336]	; (8021f0c <GUI__DoAlphaBlending+0x260>)
 8021dba:	69dd      	ldr	r5, [r3, #28]
 8021dbc:	2d00      	cmp	r5, #0
 8021dbe:	d138      	bne.n	8021e32 <GUI__DoAlphaBlending+0x186>
 8021dc0:	fa5f f288 	uxtb.w	r2, r8
 8021dc4:	f1b8 0f00 	cmp.w	r8, #0
 8021dc8:	d11a      	bne.n	8021e00 <GUI__DoAlphaBlending+0x154>
 8021dca:	9b02      	ldr	r3, [sp, #8]
 8021dcc:	9a03      	ldr	r2, [sp, #12]
 8021dce:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8021dd2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8021dd6:	f1ba 0a01 	subs.w	sl, sl, #1
 8021dda:	f106 0601 	add.w	r6, r6, #1
 8021dde:	46bb      	mov	fp, r7
 8021de0:	d1b1      	bne.n	8021d46 <GUI__DoAlphaBlending+0x9a>
 8021de2:	9c03      	ldr	r4, [sp, #12]
 8021de4:	4620      	mov	r0, r4
 8021de6:	b00f      	add	sp, #60	; 0x3c
 8021de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021dec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021dee:	9a03      	ldr	r2, [sp, #12]
 8021df0:	681b      	ldr	r3, [r3, #0]
 8021df2:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
 8021df6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8021df8:	f043 0301 	orr.w	r3, r3, #1
 8021dfc:	6013      	str	r3, [r2, #0]
 8021dfe:	e7ea      	b.n	8021dd6 <GUI__DoAlphaBlending+0x12a>
 8021e00:	9902      	ldr	r1, [sp, #8]
 8021e02:	4b48      	ldr	r3, [pc, #288]	; (8021f24 <GUI__DoAlphaBlending+0x278>)
 8021e04:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8021e08:	681b      	ldr	r3, [r3, #0]
 8021e0a:	f049 407f 	orr.w	r0, r9, #4278190080	; 0xff000000
 8021e0e:	4798      	blx	r3
 8021e10:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021e12:	9a03      	ldr	r2, [sp, #12]
 8021e14:	681b      	ldr	r3, [r3, #0]
 8021e16:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
 8021e1a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8021e1c:	f043 0301 	orr.w	r3, r3, #1
 8021e20:	6013      	str	r3, [r2, #0]
 8021e22:	e7d8      	b.n	8021dd6 <GUI__DoAlphaBlending+0x12a>
 8021e24:	9406      	str	r4, [sp, #24]
 8021e26:	e7a7      	b.n	8021d78 <GUI__DoAlphaBlending+0xcc>
 8021e28:	4b38      	ldr	r3, [pc, #224]	; (8021f0c <GUI__DoAlphaBlending+0x260>)
 8021e2a:	69dd      	ldr	r5, [r3, #28]
 8021e2c:	2401      	movs	r4, #1
 8021e2e:	2d00      	cmp	r5, #0
 8021e30:	d0c6      	beq.n	8021dc0 <GUI__DoAlphaBlending+0x114>
 8021e32:	9b02      	ldr	r3, [sp, #8]
 8021e34:	00b6      	lsls	r6, r6, #2
 8021e36:	4433      	add	r3, r6
 8021e38:	461c      	mov	r4, r3
 8021e3a:	9b03      	ldr	r3, [sp, #12]
 8021e3c:	441e      	add	r6, r3
 8021e3e:	4632      	mov	r2, r6
 8021e40:	4621      	mov	r1, r4
 8021e42:	4653      	mov	r3, sl
 8021e44:	4658      	mov	r0, fp
 8021e46:	47a8      	blx	r5
 8021e48:	4657      	mov	r7, sl
 8021e4a:	f1ab 0204 	sub.w	r2, fp, #4
 8021e4e:	e007      	b.n	8021e60 <GUI__DoAlphaBlending+0x1b4>
 8021e50:	6823      	ldr	r3, [r4, #0]
 8021e52:	6033      	str	r3, [r6, #0]
 8021e54:	3f01      	subs	r7, #1
 8021e56:	f104 0404 	add.w	r4, r4, #4
 8021e5a:	f106 0604 	add.w	r6, r6, #4
 8021e5e:	d00f      	beq.n	8021e80 <GUI__DoAlphaBlending+0x1d4>
 8021e60:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8021e64:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8021e68:	d0f2      	beq.n	8021e50 <GUI__DoAlphaBlending+0x1a4>
 8021e6a:	6821      	ldr	r1, [r4, #0]
 8021e6c:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8021e70:	bf08      	it	eq
 8021e72:	6033      	streq	r3, [r6, #0]
 8021e74:	3f01      	subs	r7, #1
 8021e76:	f104 0404 	add.w	r4, r4, #4
 8021e7a:	f106 0604 	add.w	r6, r6, #4
 8021e7e:	d1ef      	bne.n	8021e60 <GUI__DoAlphaBlending+0x1b4>
 8021e80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8021e82:	9c03      	ldr	r4, [sp, #12]
 8021e84:	681b      	ldr	r3, [r3, #0]
 8021e86:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8021e88:	f043 0301 	orr.w	r3, r3, #1
 8021e8c:	4620      	mov	r0, r4
 8021e8e:	6013      	str	r3, [r2, #0]
 8021e90:	b00f      	add	sp, #60	; 0x3c
 8021e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e96:	461a      	mov	r2, r3
 8021e98:	9b06      	ldr	r3, [sp, #24]
 8021e9a:	4620      	mov	r0, r4
 8021e9c:	ebc3 010a 	rsb	r1, r3, sl
 8021ea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021ea2:	f000 f909 	bl	80220b8 <GUI__ExpandPixelIndicesEx>
 8021ea6:	2401      	movs	r4, #1
 8021ea8:	e786      	b.n	8021db8 <GUI__DoAlphaBlending+0x10c>
 8021eaa:	4818      	ldr	r0, [pc, #96]	; (8021f0c <GUI__DoAlphaBlending+0x260>)
 8021eac:	4b1e      	ldr	r3, [pc, #120]	; (8021f28 <GUI__DoAlphaBlending+0x27c>)
 8021eae:	4a17      	ldr	r2, [pc, #92]	; (8021f0c <GUI__DoAlphaBlending+0x260>)
 8021eb0:	f840 3f14 	str.w	r3, [r0, #20]!
 8021eb4:	2301      	movs	r3, #1
 8021eb6:	6113      	str	r3, [r2, #16]
 8021eb8:	f7fe fc4c 	bl	8020754 <GUI__RegisterExit>
 8021ebc:	e705      	b.n	8021cca <GUI__DoAlphaBlending+0x1e>
 8021ebe:	f001 fb69 	bl	8023594 <LCD_GetVXSizeMax>
 8021ec2:	4607      	mov	r7, r0
 8021ec4:	60e0      	str	r0, [r4, #12]
 8021ec6:	e70a      	b.n	8021cde <GUI__DoAlphaBlending+0x32>
 8021ec8:	2300      	movs	r3, #0
 8021eca:	930a      	str	r3, [sp, #40]	; 0x28
 8021ecc:	e733      	b.n	8021d36 <GUI__DoAlphaBlending+0x8a>
 8021ece:	68e0      	ldr	r0, [r4, #12]
 8021ed0:	0080      	lsls	r0, r0, #2
 8021ed2:	f7fd fc39 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8021ed6:	9003      	str	r0, [sp, #12]
 8021ed8:	6060      	str	r0, [r4, #4]
 8021eda:	2800      	cmp	r0, #0
 8021edc:	f47f af0d 	bne.w	8021cfa <GUI__DoAlphaBlending+0x4e>
 8021ee0:	2400      	movs	r4, #0
 8021ee2:	4620      	mov	r0, r4
 8021ee4:	b00f      	add	sp, #60	; 0x3c
 8021ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021eea:	00b8      	lsls	r0, r7, #2
 8021eec:	f7fd fc2c 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8021ef0:	6030      	str	r0, [r6, #0]
 8021ef2:	b108      	cbz	r0, 8021ef8 <GUI__DoAlphaBlending+0x24c>
 8021ef4:	9002      	str	r0, [sp, #8]
 8021ef6:	e6f9      	b.n	8021cec <GUI__DoAlphaBlending+0x40>
 8021ef8:	6874      	ldr	r4, [r6, #4]
 8021efa:	2c00      	cmp	r4, #0
 8021efc:	d1f0      	bne.n	8021ee0 <GUI__DoAlphaBlending+0x234>
 8021efe:	68f0      	ldr	r0, [r6, #12]
 8021f00:	0080      	lsls	r0, r0, #2
 8021f02:	f7fd fc21 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8021f06:	6070      	str	r0, [r6, #4]
 8021f08:	e76c      	b.n	8021de4 <GUI__DoAlphaBlending+0x138>
 8021f0a:	bf00      	nop
 8021f0c:	2002e37c 	.word	0x2002e37c
 8021f10:	200308b8 	.word	0x200308b8
 8021f14:	200000e8 	.word	0x200000e8
 8021f18:	200308b0 	.word	0x200308b0
 8021f1c:	0801edcd 	.word	0x0801edcd
 8021f20:	0801edd1 	.word	0x0801edd1
 8021f24:	20000100 	.word	0x20000100
 8021f28:	08021c85 	.word	0x08021c85

08021f2c <GUI__GetAlphaBuffer>:
 8021f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021f30:	4c2d      	ldr	r4, [pc, #180]	; (8021fe8 <GUI__GetAlphaBuffer+0xbc>)
 8021f32:	6927      	ldr	r7, [r4, #16]
 8021f34:	b083      	sub	sp, #12
 8021f36:	4605      	mov	r5, r0
 8021f38:	4688      	mov	r8, r1
 8021f3a:	4616      	mov	r6, r2
 8021f3c:	4699      	mov	r9, r3
 8021f3e:	b31f      	cbz	r7, 8021f88 <GUI__GetAlphaBuffer+0x5c>
 8021f40:	68e0      	ldr	r0, [r4, #12]
 8021f42:	4f29      	ldr	r7, [pc, #164]	; (8021fe8 <GUI__GetAlphaBuffer+0xbc>)
 8021f44:	b918      	cbnz	r0, 8021f4e <GUI__GetAlphaBuffer+0x22>
 8021f46:	4b29      	ldr	r3, [pc, #164]	; (8021fec <GUI__GetAlphaBuffer+0xc0>)
 8021f48:	6818      	ldr	r0, [r3, #0]
 8021f4a:	60f8      	str	r0, [r7, #12]
 8021f4c:	b328      	cbz	r0, 8021f9a <GUI__GetAlphaBuffer+0x6e>
 8021f4e:	f1b9 0f00 	cmp.w	r9, #0
 8021f52:	d001      	beq.n	8021f58 <GUI__GetAlphaBuffer+0x2c>
 8021f54:	f8c9 0000 	str.w	r0, [r9]
 8021f58:	b31d      	cbz	r5, 8021fa2 <GUI__GetAlphaBuffer+0x76>
 8021f5a:	6823      	ldr	r3, [r4, #0]
 8021f5c:	4a22      	ldr	r2, [pc, #136]	; (8021fe8 <GUI__GetAlphaBuffer+0xbc>)
 8021f5e:	2700      	movs	r7, #0
 8021f60:	2b00      	cmp	r3, #0
 8021f62:	d036      	beq.n	8021fd2 <GUI__GetAlphaBuffer+0xa6>
 8021f64:	602b      	str	r3, [r5, #0]
 8021f66:	f1b8 0f00 	cmp.w	r8, #0
 8021f6a:	d004      	beq.n	8021f76 <GUI__GetAlphaBuffer+0x4a>
 8021f6c:	6865      	ldr	r5, [r4, #4]
 8021f6e:	4b1e      	ldr	r3, [pc, #120]	; (8021fe8 <GUI__GetAlphaBuffer+0xbc>)
 8021f70:	b31d      	cbz	r5, 8021fba <GUI__GetAlphaBuffer+0x8e>
 8021f72:	f8c8 5000 	str.w	r5, [r8]
 8021f76:	b11e      	cbz	r6, 8021f80 <GUI__GetAlphaBuffer+0x54>
 8021f78:	68a4      	ldr	r4, [r4, #8]
 8021f7a:	4d1b      	ldr	r5, [pc, #108]	; (8021fe8 <GUI__GetAlphaBuffer+0xbc>)
 8021f7c:	b19c      	cbz	r4, 8021fa6 <GUI__GetAlphaBuffer+0x7a>
 8021f7e:	6034      	str	r4, [r6, #0]
 8021f80:	4638      	mov	r0, r7
 8021f82:	b003      	add	sp, #12
 8021f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021f88:	4620      	mov	r0, r4
 8021f8a:	4b19      	ldr	r3, [pc, #100]	; (8021ff0 <GUI__GetAlphaBuffer+0xc4>)
 8021f8c:	f840 3f14 	str.w	r3, [r0, #20]!
 8021f90:	2301      	movs	r3, #1
 8021f92:	6123      	str	r3, [r4, #16]
 8021f94:	f7fe fbde 	bl	8020754 <GUI__RegisterExit>
 8021f98:	e7d2      	b.n	8021f40 <GUI__GetAlphaBuffer+0x14>
 8021f9a:	f001 fafb 	bl	8023594 <LCD_GetVXSizeMax>
 8021f9e:	60f8      	str	r0, [r7, #12]
 8021fa0:	e7d5      	b.n	8021f4e <GUI__GetAlphaBuffer+0x22>
 8021fa2:	462f      	mov	r7, r5
 8021fa4:	e7df      	b.n	8021f66 <GUI__GetAlphaBuffer+0x3a>
 8021fa6:	68e8      	ldr	r0, [r5, #12]
 8021fa8:	0080      	lsls	r0, r0, #2
 8021faa:	f7fd fbcd 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8021fae:	2800      	cmp	r0, #0
 8021fb0:	bf0c      	ite	eq
 8021fb2:	2701      	moveq	r7, #1
 8021fb4:	4604      	movne	r4, r0
 8021fb6:	60a8      	str	r0, [r5, #8]
 8021fb8:	e7e1      	b.n	8021f7e <GUI__GetAlphaBuffer+0x52>
 8021fba:	68d8      	ldr	r0, [r3, #12]
 8021fbc:	9301      	str	r3, [sp, #4]
 8021fbe:	0080      	lsls	r0, r0, #2
 8021fc0:	f7fd fbc2 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8021fc4:	9b01      	ldr	r3, [sp, #4]
 8021fc6:	2800      	cmp	r0, #0
 8021fc8:	bf0c      	ite	eq
 8021fca:	2701      	moveq	r7, #1
 8021fcc:	4605      	movne	r5, r0
 8021fce:	6058      	str	r0, [r3, #4]
 8021fd0:	e7cf      	b.n	8021f72 <GUI__GetAlphaBuffer+0x46>
 8021fd2:	0080      	lsls	r0, r0, #2
 8021fd4:	9201      	str	r2, [sp, #4]
 8021fd6:	f7fd fbb7 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8021fda:	9a01      	ldr	r2, [sp, #4]
 8021fdc:	fab0 f780 	clz	r7, r0
 8021fe0:	6010      	str	r0, [r2, #0]
 8021fe2:	097f      	lsrs	r7, r7, #5
 8021fe4:	4603      	mov	r3, r0
 8021fe6:	e7bd      	b.n	8021f64 <GUI__GetAlphaBuffer+0x38>
 8021fe8:	2002e37c 	.word	0x2002e37c
 8021fec:	200308b8 	.word	0x200308b8
 8021ff0:	08021c85 	.word	0x08021c85

08021ff4 <GUI__AllocAlphaBuffer>:
 8021ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021ff6:	b083      	sub	sp, #12
 8021ff8:	b9c0      	cbnz	r0, 802202c <GUI__AllocAlphaBuffer+0x38>
 8021ffa:	4c22      	ldr	r4, [pc, #136]	; (8022084 <GUI__AllocAlphaBuffer+0x90>)
 8021ffc:	6923      	ldr	r3, [r4, #16]
 8021ffe:	4605      	mov	r5, r0
 8022000:	b1cb      	cbz	r3, 8022036 <GUI__AllocAlphaBuffer+0x42>
 8022002:	68e0      	ldr	r0, [r4, #12]
 8022004:	4e1f      	ldr	r6, [pc, #124]	; (8022084 <GUI__AllocAlphaBuffer+0x90>)
 8022006:	b918      	cbnz	r0, 8022010 <GUI__AllocAlphaBuffer+0x1c>
 8022008:	4b1f      	ldr	r3, [pc, #124]	; (8022088 <GUI__AllocAlphaBuffer+0x94>)
 802200a:	6818      	ldr	r0, [r3, #0]
 802200c:	60f0      	str	r0, [r6, #12]
 802200e:	b1d8      	cbz	r0, 8022048 <GUI__AllocAlphaBuffer+0x54>
 8022010:	6823      	ldr	r3, [r4, #0]
 8022012:	4f1c      	ldr	r7, [pc, #112]	; (8022084 <GUI__AllocAlphaBuffer+0x90>)
 8022014:	2600      	movs	r6, #0
 8022016:	b323      	cbz	r3, 8022062 <GUI__AllocAlphaBuffer+0x6e>
 8022018:	6863      	ldr	r3, [r4, #4]
 802201a:	4f1a      	ldr	r7, [pc, #104]	; (8022084 <GUI__AllocAlphaBuffer+0x90>)
 802201c:	b1c3      	cbz	r3, 8022050 <GUI__AllocAlphaBuffer+0x5c>
 802201e:	b115      	cbz	r5, 8022026 <GUI__AllocAlphaBuffer+0x32>
 8022020:	68a3      	ldr	r3, [r4, #8]
 8022022:	4c18      	ldr	r4, [pc, #96]	; (8022084 <GUI__AllocAlphaBuffer+0x90>)
 8022024:	b32b      	cbz	r3, 8022072 <GUI__AllocAlphaBuffer+0x7e>
 8022026:	4630      	mov	r0, r6
 8022028:	b003      	add	sp, #12
 802202a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802202c:	4c15      	ldr	r4, [pc, #84]	; (8022084 <GUI__AllocAlphaBuffer+0x90>)
 802202e:	6923      	ldr	r3, [r4, #16]
 8022030:	ad01      	add	r5, sp, #4
 8022032:	2b00      	cmp	r3, #0
 8022034:	d1e5      	bne.n	8022002 <GUI__AllocAlphaBuffer+0xe>
 8022036:	4620      	mov	r0, r4
 8022038:	4b14      	ldr	r3, [pc, #80]	; (802208c <GUI__AllocAlphaBuffer+0x98>)
 802203a:	f840 3f14 	str.w	r3, [r0, #20]!
 802203e:	2301      	movs	r3, #1
 8022040:	6123      	str	r3, [r4, #16]
 8022042:	f7fe fb87 	bl	8020754 <GUI__RegisterExit>
 8022046:	e7dc      	b.n	8022002 <GUI__AllocAlphaBuffer+0xe>
 8022048:	f001 faa4 	bl	8023594 <LCD_GetVXSizeMax>
 802204c:	60f0      	str	r0, [r6, #12]
 802204e:	e7df      	b.n	8022010 <GUI__AllocAlphaBuffer+0x1c>
 8022050:	68f8      	ldr	r0, [r7, #12]
 8022052:	0080      	lsls	r0, r0, #2
 8022054:	f7fd fb78 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8022058:	2800      	cmp	r0, #0
 802205a:	bf08      	it	eq
 802205c:	2601      	moveq	r6, #1
 802205e:	6078      	str	r0, [r7, #4]
 8022060:	e7dd      	b.n	802201e <GUI__AllocAlphaBuffer+0x2a>
 8022062:	0080      	lsls	r0, r0, #2
 8022064:	f7fd fb70 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8022068:	fab0 f680 	clz	r6, r0
 802206c:	6038      	str	r0, [r7, #0]
 802206e:	0976      	lsrs	r6, r6, #5
 8022070:	e7d2      	b.n	8022018 <GUI__AllocAlphaBuffer+0x24>
 8022072:	68e0      	ldr	r0, [r4, #12]
 8022074:	0080      	lsls	r0, r0, #2
 8022076:	f7fd fb67 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 802207a:	2800      	cmp	r0, #0
 802207c:	bf08      	it	eq
 802207e:	2601      	moveq	r6, #1
 8022080:	60a0      	str	r0, [r4, #8]
 8022082:	e7d0      	b.n	8022026 <GUI__AllocAlphaBuffer+0x32>
 8022084:	2002e37c 	.word	0x2002e37c
 8022088:	200308b8 	.word	0x200308b8
 802208c:	08021c85 	.word	0x08021c85

08022090 <GUI_SetFuncDrawAlpha>:
 8022090:	b410      	push	{r4}
 8022092:	b148      	cbz	r0, 80220a8 <GUI_SetFuncDrawAlpha+0x18>
 8022094:	b149      	cbz	r1, 80220aa <GUI_SetFuncDrawAlpha+0x1a>
 8022096:	4603      	mov	r3, r0
 8022098:	2000      	movs	r0, #0
 802209a:	4c05      	ldr	r4, [pc, #20]	; (80220b0 <GUI_SetFuncDrawAlpha+0x20>)
 802209c:	4a05      	ldr	r2, [pc, #20]	; (80220b4 <GUI_SetFuncDrawAlpha+0x24>)
 802209e:	6021      	str	r1, [r4, #0]
 80220a0:	6013      	str	r3, [r2, #0]
 80220a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80220a6:	4770      	bx	lr
 80220a8:	4601      	mov	r1, r0
 80220aa:	460b      	mov	r3, r1
 80220ac:	2001      	movs	r0, #1
 80220ae:	e7f4      	b.n	802209a <GUI_SetFuncDrawAlpha+0xa>
 80220b0:	200308c0 	.word	0x200308c0
 80220b4:	200308c4 	.word	0x200308c4

080220b8 <GUI__ExpandPixelIndicesEx>:
 80220b8:	2900      	cmp	r1, #0
 80220ba:	dd2a      	ble.n	8022112 <GUI__ExpandPixelIndicesEx+0x5a>
 80220bc:	2a08      	cmp	r2, #8
 80220be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80220c2:	4604      	mov	r4, r0
 80220c4:	685e      	ldr	r6, [r3, #4]
 80220c6:	dd03      	ble.n	80220d0 <GUI__ExpandPixelIndicesEx+0x18>
 80220c8:	2a10      	cmp	r2, #16
 80220ca:	dd0c      	ble.n	80220e6 <GUI__ExpandPixelIndicesEx+0x2e>
 80220cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220d0:	1e53      	subs	r3, r2, #1
 80220d2:	2b07      	cmp	r3, #7
 80220d4:	d805      	bhi.n	80220e2 <GUI__ExpandPixelIndicesEx+0x2a>
 80220d6:	e8df f003 	tbb	[pc, r3]
 80220da:	532a      	.short	0x532a
 80220dc:	04047c04 	.word	0x04047c04
 80220e0:	1d04      	.short	0x1d04
 80220e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80220e6:	695d      	ldr	r5, [r3, #20]
 80220e8:	b135      	cbz	r5, 80220f8 <GUI__ExpandPixelIndicesEx+0x40>
 80220ea:	460a      	mov	r2, r1
 80220ec:	46ac      	mov	ip, r5
 80220ee:	4621      	mov	r1, r4
 80220f0:	2302      	movs	r3, #2
 80220f2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80220f6:	4760      	bx	ip
 80220f8:	0049      	lsls	r1, r1, #1
 80220fa:	440c      	add	r4, r1
 80220fc:	1865      	adds	r5, r4, r1
 80220fe:	1a67      	subs	r7, r4, r1
 8022100:	f834 0d02 	ldrh.w	r0, [r4, #-2]!
 8022104:	47b0      	blx	r6
 8022106:	42bc      	cmp	r4, r7
 8022108:	f845 0d04 	str.w	r0, [r5, #-4]!
 802210c:	d1f8      	bne.n	8022100 <GUI__ExpandPixelIndicesEx+0x48>
 802210e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022112:	4770      	bx	lr
 8022114:	1865      	adds	r5, r4, r1
 8022116:	1a6f      	subs	r7, r5, r1
 8022118:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 802211c:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 8022120:	47b0      	blx	r6
 8022122:	42bd      	cmp	r5, r7
 8022124:	f844 0d04 	str.w	r0, [r4, #-4]!
 8022128:	d1f8      	bne.n	802211c <GUI__ExpandPixelIndicesEx+0x64>
 802212a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802212e:	1e4f      	subs	r7, r1, #1
 8022130:	10fb      	asrs	r3, r7, #3
 8022132:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8022136:	f007 0a07 	and.w	sl, r7, #7
 802213a:	f04f 0880 	mov.w	r8, #128	; 0x80
 802213e:	3901      	subs	r1, #1
 8022140:	1e5a      	subs	r2, r3, #1
 8022142:	fa48 f80a 	asr.w	r8, r8, sl
 8022146:	f814 9003 	ldrb.w	r9, [r4, r3]
 802214a:	eb04 0581 	add.w	r5, r4, r1, lsl #2
 802214e:	fa5f f888 	uxtb.w	r8, r8
 8022152:	4414      	add	r4, r2
 8022154:	f1ca 0307 	rsb	r3, sl, #7
 8022158:	ea08 0009 	and.w	r0, r8, r9
 802215c:	4118      	asrs	r0, r3
 802215e:	47b0      	blx	r6
 8022160:	f845 0904 	str.w	r0, [r5], #-4
 8022164:	f1ba 0f00 	cmp.w	sl, #0
 8022168:	d15f      	bne.n	802222a <GUI__ExpandPixelIndicesEx+0x172>
 802216a:	f894 9000 	ldrb.w	r9, [r4]
 802216e:	f04f 0801 	mov.w	r8, #1
 8022172:	3c01      	subs	r4, #1
 8022174:	f04f 0a07 	mov.w	sl, #7
 8022178:	2f00      	cmp	r7, #0
 802217a:	d0b2      	beq.n	80220e2 <GUI__ExpandPixelIndicesEx+0x2a>
 802217c:	3f01      	subs	r7, #1
 802217e:	e7e9      	b.n	8022154 <GUI__ExpandPixelIndicesEx+0x9c>
 8022180:	1e4f      	subs	r7, r1, #1
 8022182:	f007 0903 	and.w	r9, r7, #3
 8022186:	10bb      	asrs	r3, r7, #2
 8022188:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 802218c:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8022190:	25c0      	movs	r5, #192	; 0xc0
 8022192:	3901      	subs	r1, #1
 8022194:	4105      	asrs	r5, r0
 8022196:	1e5a      	subs	r2, r3, #1
 8022198:	f814 8003 	ldrb.w	r8, [r4, r3]
 802219c:	eb04 0a81 	add.w	sl, r4, r1, lsl #2
 80221a0:	b2ed      	uxtb	r5, r5
 80221a2:	4414      	add	r4, r2
 80221a4:	ea05 0308 	and.w	r3, r5, r8
 80221a8:	f1c0 0006 	rsb	r0, r0, #6
 80221ac:	fa43 f000 	asr.w	r0, r3, r0
 80221b0:	47b0      	blx	r6
 80221b2:	f84a 0904 	str.w	r0, [sl], #-4
 80221b6:	f1b9 0f00 	cmp.w	r9, #0
 80221ba:	d144      	bne.n	8022246 <GUI__ExpandPixelIndicesEx+0x18e>
 80221bc:	2503      	movs	r5, #3
 80221be:	f894 8000 	ldrb.w	r8, [r4]
 80221c2:	46a9      	mov	r9, r5
 80221c4:	3c01      	subs	r4, #1
 80221c6:	2f00      	cmp	r7, #0
 80221c8:	d08b      	beq.n	80220e2 <GUI__ExpandPixelIndicesEx+0x2a>
 80221ca:	3f01      	subs	r7, #1
 80221cc:	ea4f 0049 	mov.w	r0, r9, lsl #1
 80221d0:	e7e8      	b.n	80221a4 <GUI__ExpandPixelIndicesEx+0xec>
 80221d2:	1e4f      	subs	r7, r1, #1
 80221d4:	f007 0801 	and.w	r8, r7, #1
 80221d8:	107a      	asrs	r2, r7, #1
 80221da:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80221de:	ea4f 0088 	mov.w	r0, r8, lsl #2
 80221e2:	23f0      	movs	r3, #240	; 0xf0
 80221e4:	3901      	subs	r1, #1
 80221e6:	4103      	asrs	r3, r0
 80221e8:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
 80221ec:	5ca5      	ldrb	r5, [r4, r2]
 80221ee:	eb04 0981 	add.w	r9, r4, r1, lsl #2
 80221f2:	fa5f fa83 	uxtb.w	sl, r3
 80221f6:	4474      	add	r4, lr
 80221f8:	ea0a 0305 	and.w	r3, sl, r5
 80221fc:	f1c0 0004 	rsb	r0, r0, #4
 8022200:	fa43 f000 	asr.w	r0, r3, r0
 8022204:	47b0      	blx	r6
 8022206:	f849 0904 	str.w	r0, [r9], #-4
 802220a:	f1b8 0f00 	cmp.w	r8, #0
 802220e:	d113      	bne.n	8022238 <GUI__ExpandPixelIndicesEx+0x180>
 8022210:	7825      	ldrb	r5, [r4, #0]
 8022212:	f04f 0a0f 	mov.w	sl, #15
 8022216:	3c01      	subs	r4, #1
 8022218:	f04f 0801 	mov.w	r8, #1
 802221c:	2f00      	cmp	r7, #0
 802221e:	f43f af60 	beq.w	80220e2 <GUI__ExpandPixelIndicesEx+0x2a>
 8022222:	3f01      	subs	r7, #1
 8022224:	ea4f 0088 	mov.w	r0, r8, lsl #2
 8022228:	e7e6      	b.n	80221f8 <GUI__ExpandPixelIndicesEx+0x140>
 802222a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 802222e:	fa5f f888 	uxtb.w	r8, r8
 8022232:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8022236:	e79f      	b.n	8022178 <GUI__ExpandPixelIndicesEx+0xc0>
 8022238:	ea4f 130a 	mov.w	r3, sl, lsl #4
 802223c:	fa5f fa83 	uxtb.w	sl, r3
 8022240:	f04f 0800 	mov.w	r8, #0
 8022244:	e7ea      	b.n	802221c <GUI__ExpandPixelIndicesEx+0x164>
 8022246:	00ad      	lsls	r5, r5, #2
 8022248:	b2ed      	uxtb	r5, r5
 802224a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 802224e:	e7ba      	b.n	80221c6 <GUI__ExpandPixelIndicesEx+0x10e>

08022250 <GUI__HandleEOLine>:
 8022250:	b510      	push	{r4, lr}
 8022252:	4604      	mov	r4, r0
 8022254:	b082      	sub	sp, #8
 8022256:	a802      	add	r0, sp, #8
 8022258:	6823      	ldr	r3, [r4, #0]
 802225a:	f840 3d04 	str.w	r3, [r0, #-4]!
 802225e:	f7ff fb4f 	bl	8021900 <GUI_UC__GetCharCodeInc>
 8022262:	b148      	cbz	r0, 8022278 <GUI__HandleEOLine+0x28>
 8022264:	280a      	cmp	r0, #10
 8022266:	d002      	beq.n	802226e <GUI__HandleEOLine+0x1e>
 8022268:	2000      	movs	r0, #0
 802226a:	b002      	add	sp, #8
 802226c:	bd10      	pop	{r4, pc}
 802226e:	9b01      	ldr	r3, [sp, #4]
 8022270:	6023      	str	r3, [r4, #0]
 8022272:	2000      	movs	r0, #0
 8022274:	b002      	add	sp, #8
 8022276:	bd10      	pop	{r4, pc}
 8022278:	2001      	movs	r0, #1
 802227a:	b002      	add	sp, #8
 802227c:	bd10      	pop	{r4, pc}
 802227e:	bf00      	nop

08022280 <GUI__IntersectRect>:
 8022280:	f9b1 3000 	ldrsh.w	r3, [r1]
 8022284:	f9b0 2000 	ldrsh.w	r2, [r0]
 8022288:	429a      	cmp	r2, r3
 802228a:	bfb8      	it	lt
 802228c:	8003      	strhlt	r3, [r0, #0]
 802228e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8022292:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8022296:	429a      	cmp	r2, r3
 8022298:	bfb8      	it	lt
 802229a:	8043      	strhlt	r3, [r0, #2]
 802229c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80222a0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80222a4:	429a      	cmp	r2, r3
 80222a6:	bfc8      	it	gt
 80222a8:	8083      	strhgt	r3, [r0, #4]
 80222aa:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80222ae:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80222b2:	429a      	cmp	r2, r3
 80222b4:	bfc8      	it	gt
 80222b6:	80c3      	strhgt	r3, [r0, #6]
 80222b8:	4770      	bx	lr
 80222ba:	bf00      	nop

080222bc <GUI__IntersectRects>:
 80222bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80222be:	f9b2 c000 	ldrsh.w	ip, [r2]
 80222c2:	f9b1 5000 	ldrsh.w	r5, [r1]
 80222c6:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80222ca:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80222ce:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80222d2:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 80222d6:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 80222da:	f9b1 6006 	ldrsh.w	r6, [r1, #6]
 80222de:	45ac      	cmp	ip, r5
 80222e0:	4661      	mov	r1, ip
 80222e2:	bfb8      	it	lt
 80222e4:	4629      	movlt	r1, r5
 80222e6:	42a3      	cmp	r3, r4
 80222e8:	bfb8      	it	lt
 80222ea:	4623      	movlt	r3, r4
 80222ec:	4572      	cmp	r2, lr
 80222ee:	bfa8      	it	ge
 80222f0:	4672      	movge	r2, lr
 80222f2:	42b7      	cmp	r7, r6
 80222f4:	463c      	mov	r4, r7
 80222f6:	bfa8      	it	ge
 80222f8:	4634      	movge	r4, r6
 80222fa:	4291      	cmp	r1, r2
 80222fc:	8001      	strh	r1, [r0, #0]
 80222fe:	8043      	strh	r3, [r0, #2]
 8022300:	8082      	strh	r2, [r0, #4]
 8022302:	80c4      	strh	r4, [r0, #6]
 8022304:	dc04      	bgt.n	8022310 <GUI__IntersectRects+0x54>
 8022306:	42a3      	cmp	r3, r4
 8022308:	bfcc      	ite	gt
 802230a:	2000      	movgt	r0, #0
 802230c:	2001      	movle	r0, #1
 802230e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022310:	2000      	movs	r0, #0
 8022312:	bdf0      	pop	{r4, r5, r6, r7, pc}

08022314 <GUI__memset>:
 8022314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022316:	4606      	mov	r6, r0
 8022318:	b14a      	cbz	r2, 802232e <GUI__memset+0x1a>
 802231a:	0784      	lsls	r4, r0, #30
 802231c:	b2c9      	uxtb	r1, r1
 802231e:	d008      	beq.n	8022332 <GUI__memset+0x1e>
 8022320:	e001      	b.n	8022326 <GUI__memset+0x12>
 8022322:	0783      	lsls	r3, r0, #30
 8022324:	d005      	beq.n	8022332 <GUI__memset+0x1e>
 8022326:	3a01      	subs	r2, #1
 8022328:	f800 1b01 	strb.w	r1, [r0], #1
 802232c:	d1f9      	bne.n	8022322 <GUI__memset+0xe>
 802232e:	4630      	mov	r0, r6
 8022330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022332:	0897      	lsrs	r7, r2, #2
 8022334:	463b      	mov	r3, r7
 8022336:	b357      	cbz	r7, 802238e <GUI__memset+0x7a>
 8022338:	eb01 2401 	add.w	r4, r1, r1, lsl #8
 802233c:	2f03      	cmp	r7, #3
 802233e:	f002 0203 	and.w	r2, r2, #3
 8022342:	eb04 4404 	add.w	r4, r4, r4, lsl #16
 8022346:	d916      	bls.n	8022376 <GUI__memset+0x62>
 8022348:	f100 0310 	add.w	r3, r0, #16
 802234c:	463d      	mov	r5, r7
 802234e:	3d04      	subs	r5, #4
 8022350:	2d03      	cmp	r5, #3
 8022352:	f843 4c10 	str.w	r4, [r3, #-16]
 8022356:	f843 4c0c 	str.w	r4, [r3, #-12]
 802235a:	f843 4c08 	str.w	r4, [r3, #-8]
 802235e:	f843 4c04 	str.w	r4, [r3, #-4]
 8022362:	f103 0310 	add.w	r3, r3, #16
 8022366:	dcf2      	bgt.n	802234e <GUI__memset+0x3a>
 8022368:	3f04      	subs	r7, #4
 802236a:	08bb      	lsrs	r3, r7, #2
 802236c:	1c5d      	adds	r5, r3, #1
 802236e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8022372:	eba7 0383 	sub.w	r3, r7, r3, lsl #2
 8022376:	b143      	cbz	r3, 802238a <GUI__memset+0x76>
 8022378:	2b01      	cmp	r3, #1
 802237a:	6004      	str	r4, [r0, #0]
 802237c:	d003      	beq.n	8022386 <GUI__memset+0x72>
 802237e:	2b02      	cmp	r3, #2
 8022380:	6044      	str	r4, [r0, #4]
 8022382:	bf18      	it	ne
 8022384:	6084      	strne	r4, [r0, #8]
 8022386:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 802238a:	2a00      	cmp	r2, #0
 802238c:	d0cf      	beq.n	802232e <GUI__memset+0x1a>
 802238e:	f00c fba2 	bl	802ead6 <memset>
 8022392:	4630      	mov	r0, r6
 8022394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022396:	bf00      	nop

08022398 <GUI__ReduceRect>:
 8022398:	b470      	push	{r4, r5, r6}
 802239a:	88cb      	ldrh	r3, [r1, #6]
 802239c:	880e      	ldrh	r6, [r1, #0]
 802239e:	888d      	ldrh	r5, [r1, #4]
 80223a0:	884c      	ldrh	r4, [r1, #2]
 80223a2:	b292      	uxth	r2, r2
 80223a4:	4416      	add	r6, r2
 80223a6:	1aad      	subs	r5, r5, r2
 80223a8:	4414      	add	r4, r2
 80223aa:	1a9a      	subs	r2, r3, r2
 80223ac:	8006      	strh	r6, [r0, #0]
 80223ae:	8085      	strh	r5, [r0, #4]
 80223b0:	8044      	strh	r4, [r0, #2]
 80223b2:	80c2      	strh	r2, [r0, #6]
 80223b4:	bc70      	pop	{r4, r5, r6}
 80223b6:	4770      	bx	lr

080223b8 <GUI__SetText>:
 80223b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80223ba:	6807      	ldr	r7, [r0, #0]
 80223bc:	b083      	sub	sp, #12
 80223be:	4605      	mov	r5, r0
 80223c0:	460e      	mov	r6, r1
 80223c2:	b9cf      	cbnz	r7, 80223f8 <GUI__SetText+0x40>
 80223c4:	2e00      	cmp	r6, #0
 80223c6:	d058      	beq.n	802247a <GUI__SetText+0xc2>
 80223c8:	4633      	mov	r3, r6
 80223ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80223ce:	e000      	b.n	80223d2 <GUI__SetText+0x1a>
 80223d0:	4622      	mov	r2, r4
 80223d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80223d6:	1c54      	adds	r4, r2, #1
 80223d8:	2800      	cmp	r0, #0
 80223da:	d1f9      	bne.n	80223d0 <GUI__SetText+0x18>
 80223dc:	4638      	mov	r0, r7
 80223de:	1c94      	adds	r4, r2, #2
 80223e0:	f7fd fc78 	bl	801fcd4 <GUI_ALLOC_GetSize>
 80223e4:	4284      	cmp	r4, r0
 80223e6:	d022      	beq.n	802242e <GUI__SetText+0x76>
 80223e8:	4620      	mov	r0, r4
 80223ea:	f7fd fac5 	bl	801f978 <GUI_ALLOC_AllocNoInit>
 80223ee:	4607      	mov	r7, r0
 80223f0:	bb68      	cbnz	r0, 802244e <GUI__SetText+0x96>
 80223f2:	2000      	movs	r0, #0
 80223f4:	b003      	add	sp, #12
 80223f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80223f8:	4638      	mov	r0, r7
 80223fa:	f7fd fad5 	bl	801f9a8 <GUI_ALLOC_LockH>
 80223fe:	4b22      	ldr	r3, [pc, #136]	; (8022488 <GUI__SetText+0xd0>)
 8022400:	9001      	str	r0, [sp, #4]
 8022402:	2e00      	cmp	r6, #0
 8022404:	bf14      	ite	ne
 8022406:	4632      	movne	r2, r6
 8022408:	461a      	moveq	r2, r3
 802240a:	2800      	cmp	r0, #0
 802240c:	bf08      	it	eq
 802240e:	4618      	moveq	r0, r3
 8022410:	7813      	ldrb	r3, [r2, #0]
 8022412:	7801      	ldrb	r1, [r0, #0]
 8022414:	428b      	cmp	r3, r1
 8022416:	d106      	bne.n	8022426 <GUI__SetText+0x6e>
 8022418:	b35b      	cbz	r3, 8022472 <GUI__SetText+0xba>
 802241a:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 802241e:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8022422:	428b      	cmp	r3, r1
 8022424:	d0f8      	beq.n	8022418 <GUI__SetText+0x60>
 8022426:	a801      	add	r0, sp, #4
 8022428:	f7fd fad0 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802242c:	e7ca      	b.n	80223c4 <GUI__SetText+0xc>
 802242e:	4638      	mov	r0, r7
 8022430:	f7fd faba 	bl	801f9a8 <GUI_ALLOC_LockH>
 8022434:	ad02      	add	r5, sp, #8
 8022436:	4b15      	ldr	r3, [pc, #84]	; (802248c <GUI__SetText+0xd4>)
 8022438:	f845 0d04 	str.w	r0, [r5, #-4]!
 802243c:	4622      	mov	r2, r4
 802243e:	4631      	mov	r1, r6
 8022440:	681b      	ldr	r3, [r3, #0]
 8022442:	4798      	blx	r3
 8022444:	4628      	mov	r0, r5
 8022446:	f7fd fac1 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802244a:	2001      	movs	r0, #1
 802244c:	e7d2      	b.n	80223f4 <GUI__SetText+0x3c>
 802244e:	f7fd faab 	bl	801f9a8 <GUI_ALLOC_LockH>
 8022452:	ac02      	add	r4, sp, #8
 8022454:	4631      	mov	r1, r6
 8022456:	f844 0d04 	str.w	r0, [r4, #-4]!
 802245a:	f00c fb44 	bl	802eae6 <strcpy>
 802245e:	4620      	mov	r0, r4
 8022460:	f7fd fab4 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8022464:	4628      	mov	r0, r5
 8022466:	f7fd fc61 	bl	801fd2c <GUI_ALLOC_FreePtr>
 802246a:	2001      	movs	r0, #1
 802246c:	602f      	str	r7, [r5, #0]
 802246e:	b003      	add	sp, #12
 8022470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022472:	a801      	add	r0, sp, #4
 8022474:	f7fd faaa 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8022478:	e7bb      	b.n	80223f2 <GUI__SetText+0x3a>
 802247a:	4638      	mov	r0, r7
 802247c:	f7fd fc2a 	bl	801fcd4 <GUI_ALLOC_GetSize>
 8022480:	2800      	cmp	r0, #0
 8022482:	d0b6      	beq.n	80223f2 <GUI__SetText+0x3a>
 8022484:	4634      	mov	r4, r6
 8022486:	e7af      	b.n	80223e8 <GUI__SetText+0x30>
 8022488:	08042978 	.word	0x08042978
 802248c:	20000108 	.word	0x20000108

08022490 <GUI__sqrt32>:
 8022490:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8022494:	bf2b      	itete	cs
 8022496:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
 802249a:	2300      	movcc	r3, #0
 802249c:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 80224a0:	2200      	movcc	r2, #0
 80224a2:	085b      	lsrs	r3, r3, #1
 80224a4:	1a80      	subs	r0, r0, r2
 80224a6:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 80224aa:	4290      	cmp	r0, r2
 80224ac:	f103 5100 	add.w	r1, r3, #536870912	; 0x20000000
 80224b0:	bf28      	it	cs
 80224b2:	460b      	movcs	r3, r1
 80224b4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80224b8:	bf38      	it	cc
 80224ba:	2200      	movcc	r2, #0
 80224bc:	f103 6180 	add.w	r1, r3, #67108864	; 0x4000000
 80224c0:	1a82      	subs	r2, r0, r2
 80224c2:	428a      	cmp	r2, r1
 80224c4:	f103 6000 	add.w	r0, r3, #134217728	; 0x8000000
 80224c8:	bf2c      	ite	cs
 80224ca:	4603      	movcs	r3, r0
 80224cc:	2100      	movcc	r1, #0
 80224ce:	085b      	lsrs	r3, r3, #1
 80224d0:	1a50      	subs	r0, r2, r1
 80224d2:	f103 7280 	add.w	r2, r3, #16777216	; 0x1000000
 80224d6:	4290      	cmp	r0, r2
 80224d8:	f103 7100 	add.w	r1, r3, #33554432	; 0x2000000
 80224dc:	bf2c      	ite	cs
 80224de:	460b      	movcs	r3, r1
 80224e0:	2200      	movcc	r2, #0
 80224e2:	085b      	lsrs	r3, r3, #1
 80224e4:	1a81      	subs	r1, r0, r2
 80224e6:	f503 0280 	add.w	r2, r3, #4194304	; 0x400000
 80224ea:	4291      	cmp	r1, r2
 80224ec:	f503 0000 	add.w	r0, r3, #8388608	; 0x800000
 80224f0:	bf28      	it	cs
 80224f2:	4603      	movcs	r3, r0
 80224f4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80224f8:	bf38      	it	cc
 80224fa:	2200      	movcc	r2, #0
 80224fc:	1a8a      	subs	r2, r1, r2
 80224fe:	f503 1180 	add.w	r1, r3, #1048576	; 0x100000
 8022502:	428a      	cmp	r2, r1
 8022504:	f503 1000 	add.w	r0, r3, #2097152	; 0x200000
 8022508:	bf2c      	ite	cs
 802250a:	4603      	movcs	r3, r0
 802250c:	2100      	movcc	r1, #0
 802250e:	085b      	lsrs	r3, r3, #1
 8022510:	1a50      	subs	r0, r2, r1
 8022512:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
 8022516:	4290      	cmp	r0, r2
 8022518:	f503 2100 	add.w	r1, r3, #524288	; 0x80000
 802251c:	bf2c      	ite	cs
 802251e:	460b      	movcs	r3, r1
 8022520:	2200      	movcc	r2, #0
 8022522:	085b      	lsrs	r3, r3, #1
 8022524:	1a81      	subs	r1, r0, r2
 8022526:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 802252a:	4291      	cmp	r1, r2
 802252c:	f503 3000 	add.w	r0, r3, #131072	; 0x20000
 8022530:	bf28      	it	cs
 8022532:	4603      	movcs	r3, r0
 8022534:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8022538:	bf38      	it	cc
 802253a:	2200      	movcc	r2, #0
 802253c:	1a8a      	subs	r2, r1, r2
 802253e:	f503 4180 	add.w	r1, r3, #16384	; 0x4000
 8022542:	428a      	cmp	r2, r1
 8022544:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
 8022548:	bf2c      	ite	cs
 802254a:	4603      	movcs	r3, r0
 802254c:	2100      	movcc	r1, #0
 802254e:	085b      	lsrs	r3, r3, #1
 8022550:	1a50      	subs	r0, r2, r1
 8022552:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8022556:	4290      	cmp	r0, r2
 8022558:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 802255c:	bf2c      	ite	cs
 802255e:	460b      	movcs	r3, r1
 8022560:	2200      	movcc	r2, #0
 8022562:	085b      	lsrs	r3, r3, #1
 8022564:	1a81      	subs	r1, r0, r2
 8022566:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 802256a:	4291      	cmp	r1, r2
 802256c:	f503 6000 	add.w	r0, r3, #2048	; 0x800
 8022570:	bf28      	it	cs
 8022572:	4603      	movcs	r3, r0
 8022574:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8022578:	bf38      	it	cc
 802257a:	2200      	movcc	r2, #0
 802257c:	1a8a      	subs	r2, r1, r2
 802257e:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8022582:	428a      	cmp	r2, r1
 8022584:	f503 7000 	add.w	r0, r3, #512	; 0x200
 8022588:	bf2c      	ite	cs
 802258a:	4603      	movcs	r3, r0
 802258c:	2100      	movcc	r1, #0
 802258e:	085b      	lsrs	r3, r3, #1
 8022590:	1a50      	subs	r0, r2, r1
 8022592:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8022596:	4290      	cmp	r0, r2
 8022598:	f103 0180 	add.w	r1, r3, #128	; 0x80
 802259c:	bf2c      	ite	cs
 802259e:	460b      	movcs	r3, r1
 80225a0:	2200      	movcc	r2, #0
 80225a2:	085b      	lsrs	r3, r3, #1
 80225a4:	1a81      	subs	r1, r0, r2
 80225a6:	f103 0210 	add.w	r2, r3, #16
 80225aa:	4291      	cmp	r1, r2
 80225ac:	f103 0020 	add.w	r0, r3, #32
 80225b0:	bf28      	it	cs
 80225b2:	4603      	movcs	r3, r0
 80225b4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80225b8:	bf38      	it	cc
 80225ba:	2200      	movcc	r2, #0
 80225bc:	1a8a      	subs	r2, r1, r2
 80225be:	1d19      	adds	r1, r3, #4
 80225c0:	428a      	cmp	r2, r1
 80225c2:	f103 0008 	add.w	r0, r3, #8
 80225c6:	bf2c      	ite	cs
 80225c8:	4603      	movcs	r3, r0
 80225ca:	2100      	movcc	r1, #0
 80225cc:	085b      	lsrs	r3, r3, #1
 80225ce:	1a52      	subs	r2, r2, r1
 80225d0:	1c58      	adds	r0, r3, #1
 80225d2:	1c99      	adds	r1, r3, #2
 80225d4:	4290      	cmp	r0, r2
 80225d6:	bf94      	ite	ls
 80225d8:	4608      	movls	r0, r1
 80225da:	4618      	movhi	r0, r3
 80225dc:	0840      	lsrs	r0, r0, #1
 80225de:	4770      	bx	lr

080225e0 <_GetWordWrap>:
 80225e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225e4:	b083      	sub	sp, #12
 80225e6:	ad02      	add	r5, sp, #8
 80225e8:	460f      	mov	r7, r1
 80225ea:	f845 0d04 	str.w	r0, [r5, #-4]!
 80225ee:	4628      	mov	r0, r5
 80225f0:	9200      	str	r2, [sp, #0]
 80225f2:	f7ff f985 	bl	8021900 <GUI_UC__GetCharCodeInc>
 80225f6:	f04f 0800 	mov.w	r8, #0
 80225fa:	4e34      	ldr	r6, [pc, #208]	; (80226cc <_GetWordWrap+0xec>)
 80225fc:	4682      	mov	sl, r0
 80225fe:	4644      	mov	r4, r8
 8022600:	46c3      	mov	fp, r8
 8022602:	46c1      	mov	r9, r8
 8022604:	2800      	cmp	r0, #0
 8022606:	d03a      	beq.n	802267e <_GetWordWrap+0x9e>
 8022608:	280a      	cmp	r0, #10
 802260a:	d038      	beq.n	802267e <_GetWordWrap+0x9e>
 802260c:	2820      	cmp	r0, #32
 802260e:	d041      	beq.n	8022694 <_GetWordWrap+0xb4>
 8022610:	f1ba 0f20 	cmp.w	sl, #32
 8022614:	d046      	beq.n	80226a4 <_GetWordWrap+0xc4>
 8022616:	6871      	ldr	r1, [r6, #4]
 8022618:	6832      	ldr	r2, [r6, #0]
 802261a:	2900      	cmp	r1, #0
 802261c:	dd0f      	ble.n	802263e <_GetWordWrap+0x5e>
 802261e:	f8b2 e000 	ldrh.w	lr, [r2]
 8022622:	4586      	cmp	lr, r0
 8022624:	f102 0302 	add.w	r3, r2, #2
 8022628:	bf18      	it	ne
 802262a:	eb02 0141 	addne.w	r1, r2, r1, lsl #1
 802262e:	d104      	bne.n	802263a <_GetWordWrap+0x5a>
 8022630:	e027      	b.n	8022682 <_GetWordWrap+0xa2>
 8022632:	f833 2b02 	ldrh.w	r2, [r3], #2
 8022636:	4282      	cmp	r2, r0
 8022638:	d023      	beq.n	8022682 <_GetWordWrap+0xa2>
 802263a:	428b      	cmp	r3, r1
 802263c:	d1f9      	bne.n	8022632 <_GetWordWrap+0x52>
 802263e:	f008 fef5 	bl	802b42c <GUI_GetCharDistX>
 8022642:	4481      	add	r9, r0
 8022644:	45b9      	cmp	r9, r7
 8022646:	4680      	mov	r8, r0
 8022648:	dd0e      	ble.n	8022668 <_GetWordWrap+0x88>
 802264a:	f1bb 0f00 	cmp.w	fp, #0
 802264e:	d00b      	beq.n	8022668 <_GetWordWrap+0x88>
 8022650:	9b00      	ldr	r3, [sp, #0]
 8022652:	2c00      	cmp	r4, #0
 8022654:	bf08      	it	eq
 8022656:	465c      	moveq	r4, fp
 8022658:	b113      	cbz	r3, 8022660 <_GetWordWrap+0x80>
 802265a:	ebc8 0009 	rsb	r0, r8, r9
 802265e:	6018      	str	r0, [r3, #0]
 8022660:	4620      	mov	r0, r4
 8022662:	b003      	add	sp, #12
 8022664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022668:	4628      	mov	r0, r5
 802266a:	f7ff f949 	bl	8021900 <GUI_UC__GetCharCodeInc>
 802266e:	f10b 0b01 	add.w	fp, fp, #1
 8022672:	f1ba 0f00 	cmp.w	sl, #0
 8022676:	bf08      	it	eq
 8022678:	4682      	moveq	sl, r0
 802267a:	2800      	cmp	r0, #0
 802267c:	d1c4      	bne.n	8022608 <_GetWordWrap+0x28>
 802267e:	465c      	mov	r4, fp
 8022680:	e7e6      	b.n	8022650 <_GetWordWrap+0x70>
 8022682:	f008 fed3 	bl	802b42c <GUI_GetCharDistX>
 8022686:	4481      	add	r9, r0
 8022688:	45b9      	cmp	r9, r7
 802268a:	f10b 0401 	add.w	r4, fp, #1
 802268e:	4680      	mov	r8, r0
 8022690:	ddea      	ble.n	8022668 <_GetWordWrap+0x88>
 8022692:	e7da      	b.n	802264a <_GetWordWrap+0x6a>
 8022694:	f008 feca 	bl	802b42c <GUI_GetCharDistX>
 8022698:	4481      	add	r9, r0
 802269a:	45b9      	cmp	r9, r7
 802269c:	465c      	mov	r4, fp
 802269e:	4680      	mov	r8, r0
 80226a0:	dde2      	ble.n	8022668 <_GetWordWrap+0x88>
 80226a2:	e7d2      	b.n	802264a <_GetWordWrap+0x6a>
 80226a4:	f008 fec2 	bl	802b42c <GUI_GetCharDistX>
 80226a8:	4481      	add	r9, r0
 80226aa:	454f      	cmp	r7, r9
 80226ac:	4680      	mov	r8, r0
 80226ae:	db08      	blt.n	80226c2 <_GetWordWrap+0xe2>
 80226b0:	4628      	mov	r0, r5
 80226b2:	f7ff f925 	bl	8021900 <GUI_UC__GetCharCodeInc>
 80226b6:	f10b 0201 	add.w	r2, fp, #1
 80226ba:	465c      	mov	r4, fp
 80226bc:	4682      	mov	sl, r0
 80226be:	4693      	mov	fp, r2
 80226c0:	e7a0      	b.n	8022604 <_GetWordWrap+0x24>
 80226c2:	465c      	mov	r4, fp
 80226c4:	f04f 0a00 	mov.w	sl, #0
 80226c8:	e7bf      	b.n	802264a <_GetWordWrap+0x6a>
 80226ca:	bf00      	nop
 80226cc:	2002e39c 	.word	0x2002e39c

080226d0 <_GetCharWrap>:
 80226d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80226d4:	b082      	sub	sp, #8
 80226d6:	af02      	add	r7, sp, #8
 80226d8:	2400      	movs	r4, #0
 80226da:	4688      	mov	r8, r1
 80226dc:	f847 0d04 	str.w	r0, [r7, #-4]!
 80226e0:	4625      	mov	r5, r4
 80226e2:	e008      	b.n	80226f6 <_GetCharWrap+0x26>
 80226e4:	f008 fea2 	bl	802b42c <GUI_GetCharDistX>
 80226e8:	4405      	add	r5, r0
 80226ea:	b10c      	cbz	r4, 80226f0 <_GetCharWrap+0x20>
 80226ec:	4545      	cmp	r5, r8
 80226ee:	dc08      	bgt.n	8022702 <_GetCharWrap+0x32>
 80226f0:	2e0a      	cmp	r6, #10
 80226f2:	d006      	beq.n	8022702 <_GetCharWrap+0x32>
 80226f4:	3401      	adds	r4, #1
 80226f6:	4638      	mov	r0, r7
 80226f8:	f7ff f902 	bl	8021900 <GUI_UC__GetCharCodeInc>
 80226fc:	4606      	mov	r6, r0
 80226fe:	2800      	cmp	r0, #0
 8022700:	d1f0      	bne.n	80226e4 <_GetCharWrap+0x14>
 8022702:	4620      	mov	r0, r4
 8022704:	b002      	add	sp, #8
 8022706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802270a:	bf00      	nop

0802270c <GUI__WrapGetNumCharsDisp>:
 802270c:	2a01      	cmp	r2, #1
 802270e:	d008      	beq.n	8022722 <GUI__WrapGetNumCharsDisp+0x16>
 8022710:	2a02      	cmp	r2, #2
 8022712:	d102      	bne.n	802271a <GUI__WrapGetNumCharsDisp+0xe>
 8022714:	4b05      	ldr	r3, [pc, #20]	; (802272c <GUI__WrapGetNumCharsDisp+0x20>)
 8022716:	685b      	ldr	r3, [r3, #4]
 8022718:	4718      	bx	r3
 802271a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 802271e:	f008 befb 	b.w	802b518 <GUI__GetLineNumChars>
 8022722:	4b02      	ldr	r3, [pc, #8]	; (802272c <GUI__WrapGetNumCharsDisp+0x20>)
 8022724:	2200      	movs	r2, #0
 8022726:	681b      	ldr	r3, [r3, #0]
 8022728:	4718      	bx	r3
 802272a:	bf00      	nop
 802272c:	20000110 	.word	0x20000110

08022730 <GUI__WrapGetNumBytesToNextLine>:
 8022730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022734:	b082      	sub	sp, #8
 8022736:	2a01      	cmp	r2, #1
 8022738:	4606      	mov	r6, r0
 802273a:	9000      	str	r0, [sp, #0]
 802273c:	4688      	mov	r8, r1
 802273e:	d038      	beq.n	80227b2 <GUI__WrapGetNumBytesToNextLine+0x82>
 8022740:	2a02      	cmp	r2, #2
 8022742:	4617      	mov	r7, r2
 8022744:	d01b      	beq.n	802277e <GUI__WrapGetNumBytesToNextLine+0x4e>
 8022746:	f647 71ff 	movw	r1, #32767	; 0x7fff
 802274a:	f008 fee5 	bl	802b518 <GUI__GetLineNumChars>
 802274e:	4601      	mov	r1, r0
 8022750:	4604      	mov	r4, r0
 8022752:	9800      	ldr	r0, [sp, #0]
 8022754:	f7ff f8e8 	bl	8021928 <GUI_UC__NumChars2NumBytes>
 8022758:	9b00      	ldr	r3, [sp, #0]
 802275a:	ad02      	add	r5, sp, #8
 802275c:	4418      	add	r0, r3
 802275e:	f845 0d08 	str.w	r0, [r5, #-8]!
 8022762:	4628      	mov	r0, r5
 8022764:	f7ff f8cc 	bl	8021900 <GUI_UC__GetCharCodeInc>
 8022768:	280a      	cmp	r0, #10
 802276a:	d01a      	beq.n	80227a2 <GUI__WrapGetNumBytesToNextLine+0x72>
 802276c:	2f01      	cmp	r7, #1
 802276e:	d033      	beq.n	80227d8 <GUI__WrapGetNumBytesToNextLine+0xa8>
 8022770:	4621      	mov	r1, r4
 8022772:	4630      	mov	r0, r6
 8022774:	f7ff f8d8 	bl	8021928 <GUI_UC__NumChars2NumBytes>
 8022778:	b002      	add	sp, #8
 802277a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802277e:	4b20      	ldr	r3, [pc, #128]	; (8022800 <GUI__WrapGetNumBytesToNextLine+0xd0>)
 8022780:	685b      	ldr	r3, [r3, #4]
 8022782:	4798      	blx	r3
 8022784:	4601      	mov	r1, r0
 8022786:	4604      	mov	r4, r0
 8022788:	9800      	ldr	r0, [sp, #0]
 802278a:	f7ff f8cd 	bl	8021928 <GUI_UC__NumChars2NumBytes>
 802278e:	9a00      	ldr	r2, [sp, #0]
 8022790:	ab02      	add	r3, sp, #8
 8022792:	4410      	add	r0, r2
 8022794:	f843 0d08 	str.w	r0, [r3, #-8]!
 8022798:	4618      	mov	r0, r3
 802279a:	f7ff f8b1 	bl	8021900 <GUI_UC__GetCharCodeInc>
 802279e:	280a      	cmp	r0, #10
 80227a0:	d1e6      	bne.n	8022770 <GUI__WrapGetNumBytesToNextLine+0x40>
 80227a2:	3401      	adds	r4, #1
 80227a4:	4621      	mov	r1, r4
 80227a6:	4630      	mov	r0, r6
 80227a8:	f7ff f8be 	bl	8021928 <GUI_UC__NumChars2NumBytes>
 80227ac:	b002      	add	sp, #8
 80227ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80227b2:	4b13      	ldr	r3, [pc, #76]	; (8022800 <GUI__WrapGetNumBytesToNextLine+0xd0>)
 80227b4:	aa01      	add	r2, sp, #4
 80227b6:	681b      	ldr	r3, [r3, #0]
 80227b8:	4798      	blx	r3
 80227ba:	4601      	mov	r1, r0
 80227bc:	4604      	mov	r4, r0
 80227be:	9800      	ldr	r0, [sp, #0]
 80227c0:	f7ff f8b2 	bl	8021928 <GUI_UC__NumChars2NumBytes>
 80227c4:	9b00      	ldr	r3, [sp, #0]
 80227c6:	ad02      	add	r5, sp, #8
 80227c8:	4418      	add	r0, r3
 80227ca:	f845 0d08 	str.w	r0, [r5, #-8]!
 80227ce:	4628      	mov	r0, r5
 80227d0:	f7ff f896 	bl	8021900 <GUI_UC__GetCharCodeInc>
 80227d4:	280a      	cmp	r0, #10
 80227d6:	d0e4      	beq.n	80227a2 <GUI__WrapGetNumBytesToNextLine+0x72>
 80227d8:	2820      	cmp	r0, #32
 80227da:	d1c9      	bne.n	8022770 <GUI__WrapGetNumBytesToNextLine+0x40>
 80227dc:	f008 fe26 	bl	802b42c <GUI_GetCharDistX>
 80227e0:	4607      	mov	r7, r0
 80227e2:	9b01      	ldr	r3, [sp, #4]
 80227e4:	4598      	cmp	r8, r3
 80227e6:	4628      	mov	r0, r5
 80227e8:	eb07 0203 	add.w	r2, r7, r3
 80227ec:	dbc0      	blt.n	8022770 <GUI__WrapGetNumBytesToNextLine+0x40>
 80227ee:	9201      	str	r2, [sp, #4]
 80227f0:	f7ff f886 	bl	8021900 <GUI_UC__GetCharCodeInc>
 80227f4:	2820      	cmp	r0, #32
 80227f6:	f104 0401 	add.w	r4, r4, #1
 80227fa:	d0f2      	beq.n	80227e2 <GUI__WrapGetNumBytesToNextLine+0xb2>
 80227fc:	e7b8      	b.n	8022770 <GUI__WrapGetNumBytesToNextLine+0x40>
 80227fe:	bf00      	nop
 8022800:	20000110 	.word	0x20000110

08022804 <_SetBkColor>:
 8022804:	b538      	push	{r3, r4, r5, lr}
 8022806:	4c0b      	ldr	r4, [pc, #44]	; (8022834 <_SetBkColor+0x30>)
 8022808:	6822      	ldr	r2, [r4, #0]
 802280a:	6b51      	ldr	r1, [r2, #52]	; 0x34
 802280c:	4281      	cmp	r1, r0
 802280e:	d00d      	beq.n	802282c <_SetBkColor+0x28>
 8022810:	7c55      	ldrb	r5, [r2, #17]
 8022812:	4909      	ldr	r1, [pc, #36]	; (8022838 <_SetBkColor+0x34>)
 8022814:	6350      	str	r0, [r2, #52]	; 0x34
 8022816:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 802281a:	691b      	ldr	r3, [r3, #16]
 802281c:	681b      	ldr	r3, [r3, #0]
 802281e:	4798      	blx	r3
 8022820:	6823      	ldr	r3, [r4, #0]
 8022822:	7c1a      	ldrb	r2, [r3, #16]
 8022824:	0752      	lsls	r2, r2, #29
 8022826:	d402      	bmi.n	802282e <_SetBkColor+0x2a>
 8022828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802282a:	6018      	str	r0, [r3, #0]
 802282c:	bd38      	pop	{r3, r4, r5, pc}
 802282e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022830:	6018      	str	r0, [r3, #0]
 8022832:	bd38      	pop	{r3, r4, r5, pc}
 8022834:	200000e8 	.word	0x200000e8
 8022838:	200308b0 	.word	0x200308b0

0802283c <_SetColor>:
 802283c:	b538      	push	{r3, r4, r5, lr}
 802283e:	4c0b      	ldr	r4, [pc, #44]	; (802286c <_SetColor+0x30>)
 8022840:	6822      	ldr	r2, [r4, #0]
 8022842:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8022844:	4281      	cmp	r1, r0
 8022846:	d00d      	beq.n	8022864 <_SetColor+0x28>
 8022848:	7c55      	ldrb	r5, [r2, #17]
 802284a:	4909      	ldr	r1, [pc, #36]	; (8022870 <_SetColor+0x34>)
 802284c:	6310      	str	r0, [r2, #48]	; 0x30
 802284e:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 8022852:	691b      	ldr	r3, [r3, #16]
 8022854:	681b      	ldr	r3, [r3, #0]
 8022856:	4798      	blx	r3
 8022858:	6823      	ldr	r3, [r4, #0]
 802285a:	7c1a      	ldrb	r2, [r3, #16]
 802285c:	0752      	lsls	r2, r2, #29
 802285e:	d402      	bmi.n	8022866 <_SetColor+0x2a>
 8022860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8022862:	6018      	str	r0, [r3, #0]
 8022864:	bd38      	pop	{r3, r4, r5, pc}
 8022866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022868:	6018      	str	r0, [r3, #0]
 802286a:	bd38      	pop	{r3, r4, r5, pc}
 802286c:	200000e8 	.word	0x200000e8
 8022870:	200308b0 	.word	0x200308b0

08022874 <_SetDrawMode>:
 8022874:	4b0a      	ldr	r3, [pc, #40]	; (80228a0 <_SetDrawMode+0x2c>)
 8022876:	681b      	ldr	r3, [r3, #0]
 8022878:	7c1a      	ldrb	r2, [r3, #16]
 802287a:	ea82 0100 	eor.w	r1, r2, r0
 802287e:	0749      	lsls	r1, r1, #29
 8022880:	d50a      	bpl.n	8022898 <_SetDrawMode+0x24>
 8022882:	b470      	push	{r4, r5, r6}
 8022884:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8022886:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8022888:	680e      	ldr	r6, [r1, #0]
 802288a:	6825      	ldr	r5, [r4, #0]
 802288c:	6026      	str	r6, [r4, #0]
 802288e:	600d      	str	r5, [r1, #0]
 8022890:	7418      	strb	r0, [r3, #16]
 8022892:	bc70      	pop	{r4, r5, r6}
 8022894:	4610      	mov	r0, r2
 8022896:	4770      	bx	lr
 8022898:	7418      	strb	r0, [r3, #16]
 802289a:	4610      	mov	r0, r2
 802289c:	4770      	bx	lr
 802289e:	bf00      	nop
 80228a0:	200000e8 	.word	0x200000e8

080228a4 <LCD_SetDrawMode>:
 80228a4:	4b01      	ldr	r3, [pc, #4]	; (80228ac <LCD_SetDrawMode+0x8>)
 80228a6:	681b      	ldr	r3, [r3, #0]
 80228a8:	689b      	ldr	r3, [r3, #8]
 80228aa:	4718      	bx	r3
 80228ac:	20000118 	.word	0x20000118

080228b0 <LCD_DrawPixel>:
 80228b0:	4b18      	ldr	r3, [pc, #96]	; (8022914 <LCD_DrawPixel+0x64>)
 80228b2:	681b      	ldr	r3, [r3, #0]
 80228b4:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80228b8:	428a      	cmp	r2, r1
 80228ba:	dc1d      	bgt.n	80228f8 <LCD_DrawPixel+0x48>
 80228bc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80228c0:	4291      	cmp	r1, r2
 80228c2:	dc19      	bgt.n	80228f8 <LCD_DrawPixel+0x48>
 80228c4:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80228c8:	4282      	cmp	r2, r0
 80228ca:	dc15      	bgt.n	80228f8 <LCD_DrawPixel+0x48>
 80228cc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80228d0:	4290      	cmp	r0, r2
 80228d2:	dc11      	bgt.n	80228f8 <LCD_DrawPixel+0x48>
 80228d4:	b430      	push	{r4, r5}
 80228d6:	7c1a      	ldrb	r2, [r3, #16]
 80228d8:	07d2      	lsls	r2, r2, #31
 80228da:	d40e      	bmi.n	80228fa <LCD_DrawPixel+0x4a>
 80228dc:	4a0e      	ldr	r2, [pc, #56]	; (8022918 <LCD_DrawPixel+0x68>)
 80228de:	7c5c      	ldrb	r4, [r3, #17]
 80228e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80228e2:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 80228e6:	681b      	ldr	r3, [r3, #0]
 80228e8:	68e5      	ldr	r5, [r4, #12]
 80228ea:	69ad      	ldr	r5, [r5, #24]
 80228ec:	460a      	mov	r2, r1
 80228ee:	46ac      	mov	ip, r5
 80228f0:	4601      	mov	r1, r0
 80228f2:	4620      	mov	r0, r4
 80228f4:	bc30      	pop	{r4, r5}
 80228f6:	4760      	bx	ip
 80228f8:	4770      	bx	lr
 80228fa:	7c5a      	ldrb	r2, [r3, #17]
 80228fc:	4b06      	ldr	r3, [pc, #24]	; (8022918 <LCD_DrawPixel+0x68>)
 80228fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8022902:	68dc      	ldr	r4, [r3, #12]
 8022904:	69e4      	ldr	r4, [r4, #28]
 8022906:	460a      	mov	r2, r1
 8022908:	4601      	mov	r1, r0
 802290a:	4618      	mov	r0, r3
 802290c:	4623      	mov	r3, r4
 802290e:	bc30      	pop	{r4, r5}
 8022910:	4718      	bx	r3
 8022912:	bf00      	nop
 8022914:	200000e8 	.word	0x200000e8
 8022918:	200308b0 	.word	0x200308b0

0802291c <LCD_DrawHLine>:
 802291c:	4b12      	ldr	r3, [pc, #72]	; (8022968 <LCD_DrawHLine+0x4c>)
 802291e:	b430      	push	{r4, r5}
 8022920:	681c      	ldr	r4, [r3, #0]
 8022922:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8022926:	428b      	cmp	r3, r1
 8022928:	dc0f      	bgt.n	802294a <LCD_DrawHLine+0x2e>
 802292a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802292e:	4299      	cmp	r1, r3
 8022930:	dc0b      	bgt.n	802294a <LCD_DrawHLine+0x2e>
 8022932:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 8022936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802293a:	42a8      	cmp	r0, r5
 802293c:	bfb8      	it	lt
 802293e:	4628      	movlt	r0, r5
 8022940:	429a      	cmp	r2, r3
 8022942:	bfa8      	it	ge
 8022944:	461a      	movge	r2, r3
 8022946:	4290      	cmp	r0, r2
 8022948:	dd01      	ble.n	802294e <LCD_DrawHLine+0x32>
 802294a:	bc30      	pop	{r4, r5}
 802294c:	4770      	bx	lr
 802294e:	4b07      	ldr	r3, [pc, #28]	; (802296c <LCD_DrawHLine+0x50>)
 8022950:	7c64      	ldrb	r4, [r4, #17]
 8022952:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8022956:	68e5      	ldr	r5, [r4, #12]
 8022958:	68ad      	ldr	r5, [r5, #8]
 802295a:	4613      	mov	r3, r2
 802295c:	46ac      	mov	ip, r5
 802295e:	460a      	mov	r2, r1
 8022960:	4601      	mov	r1, r0
 8022962:	4620      	mov	r0, r4
 8022964:	bc30      	pop	{r4, r5}
 8022966:	4760      	bx	ip
 8022968:	200000e8 	.word	0x200000e8
 802296c:	200308b0 	.word	0x200308b0

08022970 <LCD_DrawVLine>:
 8022970:	4b12      	ldr	r3, [pc, #72]	; (80229bc <LCD_DrawVLine+0x4c>)
 8022972:	b430      	push	{r4, r5}
 8022974:	681c      	ldr	r4, [r3, #0]
 8022976:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 802297a:	4283      	cmp	r3, r0
 802297c:	dc0f      	bgt.n	802299e <LCD_DrawVLine+0x2e>
 802297e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022982:	4298      	cmp	r0, r3
 8022984:	dc0b      	bgt.n	802299e <LCD_DrawVLine+0x2e>
 8022986:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 802298a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802298e:	42a9      	cmp	r1, r5
 8022990:	bfb8      	it	lt
 8022992:	4629      	movlt	r1, r5
 8022994:	429a      	cmp	r2, r3
 8022996:	bfa8      	it	ge
 8022998:	461a      	movge	r2, r3
 802299a:	4291      	cmp	r1, r2
 802299c:	dd01      	ble.n	80229a2 <LCD_DrawVLine+0x32>
 802299e:	bc30      	pop	{r4, r5}
 80229a0:	4770      	bx	lr
 80229a2:	4b07      	ldr	r3, [pc, #28]	; (80229c0 <LCD_DrawVLine+0x50>)
 80229a4:	7c64      	ldrb	r4, [r4, #17]
 80229a6:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80229aa:	68e5      	ldr	r5, [r4, #12]
 80229ac:	68ed      	ldr	r5, [r5, #12]
 80229ae:	4613      	mov	r3, r2
 80229b0:	46ac      	mov	ip, r5
 80229b2:	460a      	mov	r2, r1
 80229b4:	4601      	mov	r1, r0
 80229b6:	4620      	mov	r0, r4
 80229b8:	bc30      	pop	{r4, r5}
 80229ba:	4760      	bx	ip
 80229bc:	200000e8 	.word	0x200000e8
 80229c0:	200308b0 	.word	0x200308b0

080229c4 <LCD_FillRect>:
 80229c4:	b570      	push	{r4, r5, r6, lr}
 80229c6:	4c15      	ldr	r4, [pc, #84]	; (8022a1c <LCD_FillRect+0x58>)
 80229c8:	6824      	ldr	r4, [r4, #0]
 80229ca:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 80229ce:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80229d2:	42b0      	cmp	r0, r6
 80229d4:	bfb8      	it	lt
 80229d6:	4630      	movlt	r0, r6
 80229d8:	42aa      	cmp	r2, r5
 80229da:	bfa8      	it	ge
 80229dc:	462a      	movge	r2, r5
 80229de:	4282      	cmp	r2, r0
 80229e0:	b082      	sub	sp, #8
 80229e2:	db0b      	blt.n	80229fc <LCD_FillRect+0x38>
 80229e4:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
 80229e8:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 80229ec:	42b1      	cmp	r1, r6
 80229ee:	bfb8      	it	lt
 80229f0:	4631      	movlt	r1, r6
 80229f2:	42ab      	cmp	r3, r5
 80229f4:	bfa8      	it	ge
 80229f6:	462b      	movge	r3, r5
 80229f8:	4299      	cmp	r1, r3
 80229fa:	dd01      	ble.n	8022a00 <LCD_FillRect+0x3c>
 80229fc:	b002      	add	sp, #8
 80229fe:	bd70      	pop	{r4, r5, r6, pc}
 8022a00:	7c65      	ldrb	r5, [r4, #17]
 8022a02:	4c07      	ldr	r4, [pc, #28]	; (8022a20 <LCD_FillRect+0x5c>)
 8022a04:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 8022a08:	68e5      	ldr	r5, [r4, #12]
 8022a0a:	9300      	str	r3, [sp, #0]
 8022a0c:	4613      	mov	r3, r2
 8022a0e:	460a      	mov	r2, r1
 8022a10:	4601      	mov	r1, r0
 8022a12:	4620      	mov	r0, r4
 8022a14:	692c      	ldr	r4, [r5, #16]
 8022a16:	47a0      	blx	r4
 8022a18:	b002      	add	sp, #8
 8022a1a:	bd70      	pop	{r4, r5, r6, pc}
 8022a1c:	200000e8 	.word	0x200000e8
 8022a20:	200308b0 	.word	0x200308b0

08022a24 <LCD__DrawBitmap_1bpp>:
 8022a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a28:	b091      	sub	sp, #68	; 0x44
 8022a2a:	4c82      	ldr	r4, [pc, #520]	; (8022c34 <LCD__DrawBitmap_1bpp+0x210>)
 8022a2c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8022a2e:	950e      	str	r5, [sp, #56]	; 0x38
 8022a30:	462e      	mov	r6, r5
 8022a32:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8022a34:	950c      	str	r5, [sp, #48]	; 0x30
 8022a36:	6824      	ldr	r4, [r4, #0]
 8022a38:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 8022a3a:	9506      	str	r5, [sp, #24]
 8022a3c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8022a3e:	9508      	str	r5, [sp, #32]
 8022a40:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8022a44:	f8dd e070 	ldr.w	lr, [sp, #112]	; 0x70
 8022a48:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8022a4a:	900f      	str	r0, [sp, #60]	; 0x3c
 8022a4c:	9205      	str	r2, [sp, #20]
 8022a4e:	930d      	str	r3, [sp, #52]	; 0x34
 8022a50:	b12c      	cbz	r4, 8022a5e <LCD__DrawBitmap_1bpp+0x3a>
 8022a52:	6824      	ldr	r4, [r4, #0]
 8022a54:	46a4      	mov	ip, r4
 8022a56:	b011      	add	sp, #68	; 0x44
 8022a58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a5c:	4760      	bx	ip
 8022a5e:	ea4a 0306 	orr.w	r3, sl, r6
 8022a62:	2b01      	cmp	r3, #1
 8022a64:	4689      	mov	r9, r1
 8022a66:	f000 8091 	beq.w	8022b8c <LCD__DrawBitmap_1bpp+0x168>
 8022a6a:	f1ce 0308 	rsb	r3, lr, #8
 8022a6e:	9302      	str	r3, [sp, #8]
 8022a70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022a72:	2b00      	cmp	r3, #0
 8022a74:	f340 8087 	ble.w	8022b86 <LCD__DrawBitmap_1bpp+0x162>
 8022a78:	4b6f      	ldr	r3, [pc, #444]	; (8022c38 <LCD__DrawBitmap_1bpp+0x214>)
 8022a7a:	940a      	str	r4, [sp, #40]	; 0x28
 8022a7c:	6818      	ldr	r0, [r3, #0]
 8022a7e:	9104      	str	r1, [sp, #16]
 8022a80:	46a0      	mov	r8, r4
 8022a82:	46f1      	mov	r9, lr
 8022a84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022a86:	9904      	ldr	r1, [sp, #16]
 8022a88:	1853      	adds	r3, r2, r1
 8022a8a:	461a      	mov	r2, r3
 8022a8c:	930b      	str	r3, [sp, #44]	; 0x2c
 8022a8e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8022a92:	3a01      	subs	r2, #1
 8022a94:	4293      	cmp	r3, r2
 8022a96:	9209      	str	r2, [sp, #36]	; 0x24
 8022a98:	dc68      	bgt.n	8022b6c <LCD__DrawBitmap_1bpp+0x148>
 8022a9a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8022a9e:	428b      	cmp	r3, r1
 8022aa0:	db64      	blt.n	8022b6c <LCD__DrawBitmap_1bpp+0x148>
 8022aa2:	9b05      	ldr	r3, [sp, #20]
 8022aa4:	2b00      	cmp	r3, #0
 8022aa6:	dd61      	ble.n	8022b6c <LCD__DrawBitmap_1bpp+0x148>
 8022aa8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022aaa:	9f06      	ldr	r7, [sp, #24]
 8022aac:	9707      	str	r7, [sp, #28]
 8022aae:	2600      	movs	r6, #0
 8022ab0:	4635      	mov	r5, r6
 8022ab2:	eb03 040a 	add.w	r4, r3, sl
 8022ab6:	e04c      	b.n	8022b52 <LCD__DrawBitmap_1bpp+0x12e>
 8022ab8:	9b02      	ldr	r3, [sp, #8]
 8022aba:	ebc9 0606 	rsb	r6, r9, r6
 8022abe:	fa48 f303 	asr.w	r3, r8, r3
 8022ac2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8022ac6:	fa08 f809 	lsl.w	r8, r8, r9
 8022aca:	fa5f f888 	uxtb.w	r8, r8
 8022ace:	d102      	bne.n	8022ad6 <LCD__DrawBitmap_1bpp+0xb2>
 8022ad0:	7c02      	ldrb	r2, [r0, #16]
 8022ad2:	0792      	lsls	r2, r2, #30
 8022ad4:	d438      	bmi.n	8022b48 <LCD__DrawBitmap_1bpp+0x124>
 8022ad6:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8022ada:	f8de 2000 	ldr.w	r2, [lr]
 8022ade:	9203      	str	r2, [sp, #12]
 8022ae0:	9a08      	ldr	r2, [sp, #32]
 8022ae2:	b10a      	cbz	r2, 8022ae8 <LCD__DrawBitmap_1bpp+0xc4>
 8022ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022ae8:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 8022aec:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8022af0:	f8ce 3000 	str.w	r3, [lr]
 8022af4:	1e62      	subs	r2, r4, #1
 8022af6:	4559      	cmp	r1, fp
 8022af8:	bfb8      	it	lt
 8022afa:	4659      	movlt	r1, fp
 8022afc:	4562      	cmp	r2, ip
 8022afe:	4613      	mov	r3, r2
 8022b00:	bfa8      	it	ge
 8022b02:	4663      	movge	r3, ip
 8022b04:	428b      	cmp	r3, r1
 8022b06:	db1c      	blt.n	8022b42 <LCD__DrawBitmap_1bpp+0x11e>
 8022b08:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8022b0c:	9f04      	ldr	r7, [sp, #16]
 8022b0e:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8022b12:	42ba      	cmp	r2, r7
 8022b14:	bfb8      	it	lt
 8022b16:	463a      	movlt	r2, r7
 8022b18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022b1a:	45bc      	cmp	ip, r7
 8022b1c:	bfa8      	it	ge
 8022b1e:	46bc      	movge	ip, r7
 8022b20:	4562      	cmp	r2, ip
 8022b22:	dc0e      	bgt.n	8022b42 <LCD__DrawBitmap_1bpp+0x11e>
 8022b24:	7c40      	ldrb	r0, [r0, #17]
 8022b26:	4f45      	ldr	r7, [pc, #276]	; (8022c3c <LCD__DrawBitmap_1bpp+0x218>)
 8022b28:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8022b2c:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8022b30:	f8cd c000 	str.w	ip, [sp]
 8022b34:	f8de b010 	ldr.w	fp, [lr, #16]
 8022b38:	47d8      	blx	fp
 8022b3a:	4b3f      	ldr	r3, [pc, #252]	; (8022c38 <LCD__DrawBitmap_1bpp+0x214>)
 8022b3c:	6818      	ldr	r0, [r3, #0]
 8022b3e:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8022b42:	9b03      	ldr	r3, [sp, #12]
 8022b44:	f8ce 3000 	str.w	r3, [lr]
 8022b48:	9b05      	ldr	r3, [sp, #20]
 8022b4a:	3501      	adds	r5, #1
 8022b4c:	42ab      	cmp	r3, r5
 8022b4e:	4454      	add	r4, sl
 8022b50:	d00c      	beq.n	8022b6c <LCD__DrawBitmap_1bpp+0x148>
 8022b52:	ebca 0104 	rsb	r1, sl, r4
 8022b56:	2e00      	cmp	r6, #0
 8022b58:	d1ae      	bne.n	8022ab8 <LCD__DrawBitmap_1bpp+0x94>
 8022b5a:	9a07      	ldr	r2, [sp, #28]
 8022b5c:	9e02      	ldr	r6, [sp, #8]
 8022b5e:	f892 8000 	ldrb.w	r8, [r2]
 8022b62:	4613      	mov	r3, r2
 8022b64:	3301      	adds	r3, #1
 8022b66:	9307      	str	r3, [sp, #28]
 8022b68:	4633      	mov	r3, r6
 8022b6a:	e7a8      	b.n	8022abe <LCD__DrawBitmap_1bpp+0x9a>
 8022b6c:	9a06      	ldr	r2, [sp, #24]
 8022b6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b72:	440a      	add	r2, r1
 8022b74:	9206      	str	r2, [sp, #24]
 8022b76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022b78:	9204      	str	r2, [sp, #16]
 8022b7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022b7c:	3301      	adds	r3, #1
 8022b7e:	429a      	cmp	r2, r3
 8022b80:	930a      	str	r3, [sp, #40]	; 0x28
 8022b82:	f47f af7f 	bne.w	8022a84 <LCD__DrawBitmap_1bpp+0x60>
 8022b86:	b011      	add	sp, #68	; 0x44
 8022b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b8c:	4b2a      	ldr	r3, [pc, #168]	; (8022c38 <LCD__DrawBitmap_1bpp+0x214>)
 8022b8e:	6818      	ldr	r0, [r3, #0]
 8022b90:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8022b94:	1a53      	subs	r3, r2, r1
 8022b96:	2b00      	cmp	r3, #0
 8022b98:	dd47      	ble.n	8022c2a <LCD__DrawBitmap_1bpp+0x206>
 8022b9a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8022b9c:	1acc      	subs	r4, r1, r3
 8022b9e:	2c00      	cmp	r4, #0
 8022ba0:	ddf1      	ble.n	8022b86 <LCD__DrawBitmap_1bpp+0x162>
 8022ba2:	9e06      	ldr	r6, [sp, #24]
 8022ba4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022ba6:	fb01 6303 	mla	r3, r1, r3, r6
 8022baa:	9306      	str	r3, [sp, #24]
 8022bac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022bae:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 8022bb2:	444b      	add	r3, r9
 8022bb4:	3b01      	subs	r3, #1
 8022bb6:	1a5b      	subs	r3, r3, r1
 8022bb8:	2b00      	cmp	r3, #0
 8022bba:	dd02      	ble.n	8022bc2 <LCD__DrawBitmap_1bpp+0x19e>
 8022bbc:	1ae4      	subs	r4, r4, r3
 8022bbe:	2c00      	cmp	r4, #0
 8022bc0:	dde1      	ble.n	8022b86 <LCD__DrawBitmap_1bpp+0x162>
 8022bc2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022bc4:	9e05      	ldr	r6, [sp, #20]
 8022bc6:	198b      	adds	r3, r1, r6
 8022bc8:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8022bcc:	3b01      	subs	r3, #1
 8022bce:	1a5b      	subs	r3, r3, r1
 8022bd0:	2b00      	cmp	r3, #0
 8022bd2:	dd01      	ble.n	8022bd8 <LCD__DrawBitmap_1bpp+0x1b4>
 8022bd4:	1af3      	subs	r3, r6, r3
 8022bd6:	9305      	str	r3, [sp, #20]
 8022bd8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022bda:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8022bde:	1b49      	subs	r1, r1, r5
 8022be0:	4299      	cmp	r1, r3
 8022be2:	da0d      	bge.n	8022c00 <LCD__DrawBitmap_1bpp+0x1dc>
 8022be4:	1a5b      	subs	r3, r3, r1
 8022be6:	9f06      	ldr	r7, [sp, #24]
 8022be8:	441d      	add	r5, r3
 8022bea:	eb07 07e5 	add.w	r7, r7, r5, asr #3
 8022bee:	9706      	str	r7, [sp, #24]
 8022bf0:	9f05      	ldr	r7, [sp, #20]
 8022bf2:	f023 0607 	bic.w	r6, r3, #7
 8022bf6:	1afb      	subs	r3, r7, r3
 8022bf8:	f005 0507 	and.w	r5, r5, #7
 8022bfc:	9305      	str	r3, [sp, #20]
 8022bfe:	4431      	add	r1, r6
 8022c00:	9b05      	ldr	r3, [sp, #20]
 8022c02:	2b00      	cmp	r3, #0
 8022c04:	ddbf      	ble.n	8022b86 <LCD__DrawBitmap_1bpp+0x162>
 8022c06:	7c40      	ldrb	r0, [r0, #17]
 8022c08:	4b0c      	ldr	r3, [pc, #48]	; (8022c3c <LCD__DrawBitmap_1bpp+0x218>)
 8022c0a:	9f08      	ldr	r7, [sp, #32]
 8022c0c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8022c10:	9b05      	ldr	r3, [sp, #20]
 8022c12:	68c6      	ldr	r6, [r0, #12]
 8022c14:	951e      	str	r5, [sp, #120]	; 0x78
 8022c16:	9d06      	ldr	r5, [sp, #24]
 8022c18:	951d      	str	r5, [sp, #116]	; 0x74
 8022c1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022c1c:	971f      	str	r7, [sp, #124]	; 0x7c
 8022c1e:	951c      	str	r5, [sp, #112]	; 0x70
 8022c20:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 8022c24:	941a      	str	r4, [sp, #104]	; 0x68
 8022c26:	6874      	ldr	r4, [r6, #4]
 8022c28:	e714      	b.n	8022a54 <LCD__DrawBitmap_1bpp+0x30>
 8022c2a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022c2c:	460a      	mov	r2, r1
 8022c2e:	4623      	mov	r3, r4
 8022c30:	e7bd      	b.n	8022bae <LCD__DrawBitmap_1bpp+0x18a>
 8022c32:	bf00      	nop
 8022c34:	2003086c 	.word	0x2003086c
 8022c38:	200000e8 	.word	0x200000e8
 8022c3c:	200308b0 	.word	0x200308b0

08022c40 <LCD_DrawBitmap>:
 8022c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c44:	4cb6      	ldr	r4, [pc, #728]	; (8022f20 <LCD_DrawBitmap+0x2e0>)
 8022c46:	b091      	sub	sp, #68	; 0x44
 8022c48:	f8d4 e000 	ldr.w	lr, [r4]
 8022c4c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8022c4e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8022c50:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8022c52:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8022c54:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8022c58:	950d      	str	r5, [sp, #52]	; 0x34
 8022c5a:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8022c5e:	960e      	str	r6, [sp, #56]	; 0x38
 8022c60:	9707      	str	r7, [sp, #28]
 8022c62:	9408      	str	r4, [sp, #32]
 8022c64:	900f      	str	r0, [sp, #60]	; 0x3c
 8022c66:	9205      	str	r2, [sp, #20]
 8022c68:	930c      	str	r3, [sp, #48]	; 0x30
 8022c6a:	f1be 0f00 	cmp.w	lr, #0
 8022c6e:	d006      	beq.n	8022c7e <LCD_DrawBitmap+0x3e>
 8022c70:	f8de 4000 	ldr.w	r4, [lr]
 8022c74:	46a4      	mov	ip, r4
 8022c76:	b011      	add	sp, #68	; 0x44
 8022c78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c7c:	4760      	bx	ip
 8022c7e:	ea4a 0305 	orr.w	r3, sl, r5
 8022c82:	2b01      	cmp	r3, #1
 8022c84:	4689      	mov	r9, r1
 8022c86:	f000 8092 	beq.w	8022dae <LCD_DrawBitmap+0x16e>
 8022c8a:	f1cc 0308 	rsb	r3, ip, #8
 8022c8e:	9302      	str	r3, [sp, #8]
 8022c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c92:	2b00      	cmp	r3, #0
 8022c94:	f340 8088 	ble.w	8022da8 <LCD_DrawBitmap+0x168>
 8022c98:	4ba2      	ldr	r3, [pc, #648]	; (8022f24 <LCD_DrawBitmap+0x2e4>)
 8022c9a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8022c9e:	6818      	ldr	r0, [r3, #0]
 8022ca0:	9104      	str	r1, [sp, #16]
 8022ca2:	46f0      	mov	r8, lr
 8022ca4:	46e1      	mov	r9, ip
 8022ca6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022ca8:	9904      	ldr	r1, [sp, #16]
 8022caa:	1853      	adds	r3, r2, r1
 8022cac:	461a      	mov	r2, r3
 8022cae:	930b      	str	r3, [sp, #44]	; 0x2c
 8022cb0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8022cb4:	3a01      	subs	r2, #1
 8022cb6:	4293      	cmp	r3, r2
 8022cb8:	9209      	str	r2, [sp, #36]	; 0x24
 8022cba:	dc68      	bgt.n	8022d8e <LCD_DrawBitmap+0x14e>
 8022cbc:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8022cc0:	428b      	cmp	r3, r1
 8022cc2:	db64      	blt.n	8022d8e <LCD_DrawBitmap+0x14e>
 8022cc4:	9b05      	ldr	r3, [sp, #20]
 8022cc6:	2b00      	cmp	r3, #0
 8022cc8:	dd61      	ble.n	8022d8e <LCD_DrawBitmap+0x14e>
 8022cca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022ccc:	9f07      	ldr	r7, [sp, #28]
 8022cce:	9706      	str	r7, [sp, #24]
 8022cd0:	2600      	movs	r6, #0
 8022cd2:	4635      	mov	r5, r6
 8022cd4:	eb03 040a 	add.w	r4, r3, sl
 8022cd8:	e04c      	b.n	8022d74 <LCD_DrawBitmap+0x134>
 8022cda:	9b02      	ldr	r3, [sp, #8]
 8022cdc:	ebc9 0606 	rsb	r6, r9, r6
 8022ce0:	fa48 f303 	asr.w	r3, r8, r3
 8022ce4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8022ce8:	fa08 f809 	lsl.w	r8, r8, r9
 8022cec:	fa5f f888 	uxtb.w	r8, r8
 8022cf0:	d102      	bne.n	8022cf8 <LCD_DrawBitmap+0xb8>
 8022cf2:	7c02      	ldrb	r2, [r0, #16]
 8022cf4:	0792      	lsls	r2, r2, #30
 8022cf6:	d438      	bmi.n	8022d6a <LCD_DrawBitmap+0x12a>
 8022cf8:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8022cfc:	f8de 2000 	ldr.w	r2, [lr]
 8022d00:	9203      	str	r2, [sp, #12]
 8022d02:	9a08      	ldr	r2, [sp, #32]
 8022d04:	b10a      	cbz	r2, 8022d0a <LCD_DrawBitmap+0xca>
 8022d06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8022d0a:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 8022d0e:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8022d12:	f8ce 3000 	str.w	r3, [lr]
 8022d16:	1e62      	subs	r2, r4, #1
 8022d18:	4559      	cmp	r1, fp
 8022d1a:	bfb8      	it	lt
 8022d1c:	4659      	movlt	r1, fp
 8022d1e:	4562      	cmp	r2, ip
 8022d20:	4613      	mov	r3, r2
 8022d22:	bfa8      	it	ge
 8022d24:	4663      	movge	r3, ip
 8022d26:	428b      	cmp	r3, r1
 8022d28:	db1c      	blt.n	8022d64 <LCD_DrawBitmap+0x124>
 8022d2a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8022d2e:	9f04      	ldr	r7, [sp, #16]
 8022d30:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8022d34:	42ba      	cmp	r2, r7
 8022d36:	bfb8      	it	lt
 8022d38:	463a      	movlt	r2, r7
 8022d3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8022d3c:	45bc      	cmp	ip, r7
 8022d3e:	bfa8      	it	ge
 8022d40:	46bc      	movge	ip, r7
 8022d42:	4562      	cmp	r2, ip
 8022d44:	dc0e      	bgt.n	8022d64 <LCD_DrawBitmap+0x124>
 8022d46:	7c40      	ldrb	r0, [r0, #17]
 8022d48:	4f77      	ldr	r7, [pc, #476]	; (8022f28 <LCD_DrawBitmap+0x2e8>)
 8022d4a:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8022d4e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8022d52:	f8cd c000 	str.w	ip, [sp]
 8022d56:	f8de b010 	ldr.w	fp, [lr, #16]
 8022d5a:	47d8      	blx	fp
 8022d5c:	4b71      	ldr	r3, [pc, #452]	; (8022f24 <LCD_DrawBitmap+0x2e4>)
 8022d5e:	6818      	ldr	r0, [r3, #0]
 8022d60:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8022d64:	9b03      	ldr	r3, [sp, #12]
 8022d66:	f8ce 3000 	str.w	r3, [lr]
 8022d6a:	9b05      	ldr	r3, [sp, #20]
 8022d6c:	3501      	adds	r5, #1
 8022d6e:	42ab      	cmp	r3, r5
 8022d70:	4454      	add	r4, sl
 8022d72:	d00c      	beq.n	8022d8e <LCD_DrawBitmap+0x14e>
 8022d74:	ebca 0104 	rsb	r1, sl, r4
 8022d78:	2e00      	cmp	r6, #0
 8022d7a:	d1ae      	bne.n	8022cda <LCD_DrawBitmap+0x9a>
 8022d7c:	9a06      	ldr	r2, [sp, #24]
 8022d7e:	9e02      	ldr	r6, [sp, #8]
 8022d80:	f892 8000 	ldrb.w	r8, [r2]
 8022d84:	4613      	mov	r3, r2
 8022d86:	3301      	adds	r3, #1
 8022d88:	9306      	str	r3, [sp, #24]
 8022d8a:	4633      	mov	r3, r6
 8022d8c:	e7a8      	b.n	8022ce0 <LCD_DrawBitmap+0xa0>
 8022d8e:	9a07      	ldr	r2, [sp, #28]
 8022d90:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022d94:	440a      	add	r2, r1
 8022d96:	9207      	str	r2, [sp, #28]
 8022d98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022d9a:	9204      	str	r2, [sp, #16]
 8022d9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022d9e:	3301      	adds	r3, #1
 8022da0:	429a      	cmp	r2, r3
 8022da2:	930a      	str	r3, [sp, #40]	; 0x28
 8022da4:	f47f af7f 	bne.w	8022ca6 <LCD_DrawBitmap+0x66>
 8022da8:	b011      	add	sp, #68	; 0x44
 8022daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022dae:	4b5d      	ldr	r3, [pc, #372]	; (8022f24 <LCD_DrawBitmap+0x2e4>)
 8022db0:	6819      	ldr	r1, [r3, #0]
 8022db2:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8022db6:	ebc9 0302 	rsb	r3, r9, r2
 8022dba:	2b00      	cmp	r3, #0
 8022dbc:	f340 80c2 	ble.w	8022f44 <LCD_DrawBitmap+0x304>
 8022dc0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022dc2:	1ac4      	subs	r4, r0, r3
 8022dc4:	2c00      	cmp	r4, #0
 8022dc6:	ddef      	ble.n	8022da8 <LCD_DrawBitmap+0x168>
 8022dc8:	fb06 7303 	mla	r3, r6, r3, r7
 8022dcc:	9307      	str	r3, [sp, #28]
 8022dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022dd0:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8022dd4:	444b      	add	r3, r9
 8022dd6:	3b01      	subs	r3, #1
 8022dd8:	1a1b      	subs	r3, r3, r0
 8022dda:	2b00      	cmp	r3, #0
 8022ddc:	dd02      	ble.n	8022de4 <LCD_DrawBitmap+0x1a4>
 8022dde:	1ae4      	subs	r4, r4, r3
 8022de0:	2c00      	cmp	r4, #0
 8022de2:	dde1      	ble.n	8022da8 <LCD_DrawBitmap+0x168>
 8022de4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022de6:	9d05      	ldr	r5, [sp, #20]
 8022de8:	1943      	adds	r3, r0, r5
 8022dea:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8022dee:	3b01      	subs	r3, #1
 8022df0:	1a1b      	subs	r3, r3, r0
 8022df2:	2b00      	cmp	r3, #0
 8022df4:	dd01      	ble.n	8022dfa <LCD_DrawBitmap+0x1ba>
 8022df6:	1aeb      	subs	r3, r5, r3
 8022df8:	9305      	str	r3, [sp, #20]
 8022dfa:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 8022dfe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022e00:	4285      	cmp	r5, r0
 8022e02:	db16      	blt.n	8022e32 <LCD_DrawBitmap+0x1f2>
 8022e04:	2300      	movs	r3, #0
 8022e06:	9e05      	ldr	r6, [sp, #20]
 8022e08:	2e00      	cmp	r6, #0
 8022e0a:	ddcd      	ble.n	8022da8 <LCD_DrawBitmap+0x168>
 8022e0c:	7c48      	ldrb	r0, [r1, #17]
 8022e0e:	4946      	ldr	r1, [pc, #280]	; (8022f28 <LCD_DrawBitmap+0x2e8>)
 8022e10:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8022e14:	9908      	ldr	r1, [sp, #32]
 8022e16:	68c5      	ldr	r5, [r0, #12]
 8022e18:	931e      	str	r3, [sp, #120]	; 0x78
 8022e1a:	9b07      	ldr	r3, [sp, #28]
 8022e1c:	931d      	str	r3, [sp, #116]	; 0x74
 8022e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022e20:	911f      	str	r1, [sp, #124]	; 0x7c
 8022e22:	931c      	str	r3, [sp, #112]	; 0x70
 8022e24:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 8022e28:	941a      	str	r4, [sp, #104]	; 0x68
 8022e2a:	4633      	mov	r3, r6
 8022e2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8022e2e:	686c      	ldr	r4, [r5, #4]
 8022e30:	e720      	b.n	8022c74 <LCD_DrawBitmap+0x34>
 8022e32:	9e05      	ldr	r6, [sp, #20]
 8022e34:	1b43      	subs	r3, r0, r5
 8022e36:	1af6      	subs	r6, r6, r3
 8022e38:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8022e3c:	9605      	str	r6, [sp, #20]
 8022e3e:	2d1f      	cmp	r5, #31
 8022e40:	d8e1      	bhi.n	8022e06 <LCD_DrawBitmap+0x1c6>
 8022e42:	a601      	add	r6, pc, #4	; (adr r6, 8022e48 <LCD_DrawBitmap+0x208>)
 8022e44:	f856 f025 	ldr.w	pc, [r6, r5, lsl #2]
 8022e48:	08022f2d 	.word	0x08022f2d
 8022e4c:	08022f09 	.word	0x08022f09
 8022e50:	08022e07 	.word	0x08022e07
 8022e54:	08022ef1 	.word	0x08022ef1
 8022e58:	08022e07 	.word	0x08022e07
 8022e5c:	08022e07 	.word	0x08022e07
 8022e60:	08022e07 	.word	0x08022e07
 8022e64:	08022ee5 	.word	0x08022ee5
 8022e68:	08022e07 	.word	0x08022e07
 8022e6c:	08022e07 	.word	0x08022e07
 8022e70:	08022e07 	.word	0x08022e07
 8022e74:	08022e07 	.word	0x08022e07
 8022e78:	08022e07 	.word	0x08022e07
 8022e7c:	08022e07 	.word	0x08022e07
 8022e80:	08022e07 	.word	0x08022e07
 8022e84:	08022ed7 	.word	0x08022ed7
 8022e88:	08022e07 	.word	0x08022e07
 8022e8c:	08022e07 	.word	0x08022e07
 8022e90:	08022e07 	.word	0x08022e07
 8022e94:	08022e07 	.word	0x08022e07
 8022e98:	08022e07 	.word	0x08022e07
 8022e9c:	08022e07 	.word	0x08022e07
 8022ea0:	08022e07 	.word	0x08022e07
 8022ea4:	08022ec9 	.word	0x08022ec9
 8022ea8:	08022e07 	.word	0x08022e07
 8022eac:	08022e07 	.word	0x08022e07
 8022eb0:	08022e07 	.word	0x08022e07
 8022eb4:	08022e07 	.word	0x08022e07
 8022eb8:	08022e07 	.word	0x08022e07
 8022ebc:	08022e07 	.word	0x08022e07
 8022ec0:	08022e07 	.word	0x08022e07
 8022ec4:	08022ec9 	.word	0x08022ec9
 8022ec8:	9d07      	ldr	r5, [sp, #28]
 8022eca:	900f      	str	r0, [sp, #60]	; 0x3c
 8022ecc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8022ed0:	9307      	str	r3, [sp, #28]
 8022ed2:	2300      	movs	r3, #0
 8022ed4:	e797      	b.n	8022e06 <LCD_DrawBitmap+0x1c6>
 8022ed6:	9d07      	ldr	r5, [sp, #28]
 8022ed8:	900f      	str	r0, [sp, #60]	; 0x3c
 8022eda:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8022ede:	9307      	str	r3, [sp, #28]
 8022ee0:	2300      	movs	r3, #0
 8022ee2:	e790      	b.n	8022e06 <LCD_DrawBitmap+0x1c6>
 8022ee4:	9d07      	ldr	r5, [sp, #28]
 8022ee6:	900f      	str	r0, [sp, #60]	; 0x3c
 8022ee8:	441d      	add	r5, r3
 8022eea:	9507      	str	r5, [sp, #28]
 8022eec:	2300      	movs	r3, #0
 8022eee:	e78a      	b.n	8022e06 <LCD_DrawBitmap+0x1c6>
 8022ef0:	9d07      	ldr	r5, [sp, #28]
 8022ef2:	eb05 0563 	add.w	r5, r5, r3, asr #1
 8022ef6:	9507      	str	r5, [sp, #28]
 8022ef8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022efa:	f023 0001 	bic.w	r0, r3, #1
 8022efe:	4405      	add	r5, r0
 8022f00:	950f      	str	r5, [sp, #60]	; 0x3c
 8022f02:	f003 0301 	and.w	r3, r3, #1
 8022f06:	e77e      	b.n	8022e06 <LCD_DrawBitmap+0x1c6>
 8022f08:	9d07      	ldr	r5, [sp, #28]
 8022f0a:	eb05 05a3 	add.w	r5, r5, r3, asr #2
 8022f0e:	9507      	str	r5, [sp, #28]
 8022f10:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022f12:	f023 0003 	bic.w	r0, r3, #3
 8022f16:	4405      	add	r5, r0
 8022f18:	950f      	str	r5, [sp, #60]	; 0x3c
 8022f1a:	f003 0303 	and.w	r3, r3, #3
 8022f1e:	e772      	b.n	8022e06 <LCD_DrawBitmap+0x1c6>
 8022f20:	2003086c 	.word	0x2003086c
 8022f24:	200000e8 	.word	0x200000e8
 8022f28:	200308b0 	.word	0x200308b0
 8022f2c:	9d07      	ldr	r5, [sp, #28]
 8022f2e:	eb05 05e3 	add.w	r5, r5, r3, asr #3
 8022f32:	9507      	str	r5, [sp, #28]
 8022f34:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022f36:	f023 0007 	bic.w	r0, r3, #7
 8022f3a:	4405      	add	r5, r0
 8022f3c:	950f      	str	r5, [sp, #60]	; 0x3c
 8022f3e:	f003 0307 	and.w	r3, r3, #7
 8022f42:	e760      	b.n	8022e06 <LCD_DrawBitmap+0x1c6>
 8022f44:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022f46:	464a      	mov	r2, r9
 8022f48:	4623      	mov	r3, r4
 8022f4a:	e741      	b.n	8022dd0 <LCD_DrawBitmap+0x190>

08022f4c <LCD_SetClipRectMax>:
 8022f4c:	4a04      	ldr	r2, [pc, #16]	; (8022f60 <LCD_SetClipRectMax+0x14>)
 8022f4e:	4b05      	ldr	r3, [pc, #20]	; (8022f64 <LCD_SetClipRectMax+0x18>)
 8022f50:	6811      	ldr	r1, [r2, #0]
 8022f52:	7c4a      	ldrb	r2, [r1, #17]
 8022f54:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8022f58:	68c3      	ldr	r3, [r0, #12]
 8022f5a:	3108      	adds	r1, #8
 8022f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f5e:	4718      	bx	r3
 8022f60:	200000e8 	.word	0x200000e8
 8022f64:	200308b0 	.word	0x200308b0

08022f68 <emWin_LCD_Init>:
 8022f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022f6c:	4e3e      	ldr	r6, [pc, #248]	; (8023068 <emWin_LCD_Init+0x100>)
 8022f6e:	4f3f      	ldr	r7, [pc, #252]	; (802306c <emWin_LCD_Init+0x104>)
 8022f70:	6831      	ldr	r1, [r6, #0]
 8022f72:	7c4b      	ldrb	r3, [r1, #17]
 8022f74:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8022f78:	68c3      	ldr	r3, [r0, #12]
 8022f7a:	b084      	sub	sp, #16
 8022f7c:	3108      	adds	r1, #8
 8022f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8022f80:	4798      	blx	r3
 8022f82:	f000 f8f3 	bl	802316c <LCD_InitColors>
 8022f86:	4604      	mov	r4, r0
 8022f88:	2800      	cmp	r0, #0
 8022f8a:	d15c      	bne.n	8023046 <emWin_LCD_Init+0xde>
 8022f8c:	4605      	mov	r5, r0
 8022f8e:	4628      	mov	r0, r5
 8022f90:	f7fd fc06 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8022f94:	210c      	movs	r1, #12
 8022f96:	4603      	mov	r3, r0
 8022f98:	3501      	adds	r5, #1
 8022f9a:	eb0d 0001 	add.w	r0, sp, r1
 8022f9e:	9303      	str	r3, [sp, #12]
 8022fa0:	b143      	cbz	r3, 8022fb4 <emWin_LCD_Init+0x4c>
 8022fa2:	68db      	ldr	r3, [r3, #12]
 8022fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022fa6:	4798      	blx	r3
 8022fa8:	4603      	mov	r3, r0
 8022faa:	2800      	cmp	r0, #0
 8022fac:	d05a      	beq.n	8023064 <emWin_LCD_Init+0xfc>
 8022fae:	9803      	ldr	r0, [sp, #12]
 8022fb0:	4798      	blx	r3
 8022fb2:	4304      	orrs	r4, r0
 8022fb4:	2d02      	cmp	r5, #2
 8022fb6:	d1ea      	bne.n	8022f8e <emWin_LCD_Init+0x26>
 8022fb8:	2c00      	cmp	r4, #0
 8022fba:	d144      	bne.n	8023046 <emWin_LCD_Init+0xde>
 8022fbc:	f000 f96a 	bl	8023294 <LCD_InitLUT>
 8022fc0:	4b2b      	ldr	r3, [pc, #172]	; (8023070 <emWin_LCD_Init+0x108>)
 8022fc2:	681a      	ldr	r2, [r3, #0]
 8022fc4:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8022fc8:	429a      	cmp	r2, r3
 8022fca:	d038      	beq.n	802303e <emWin_LCD_Init+0xd6>
 8022fcc:	4d29      	ldr	r5, [pc, #164]	; (8023074 <emWin_LCD_Init+0x10c>)
 8022fce:	2401      	movs	r4, #1
 8022fd0:	4620      	mov	r0, r4
 8022fd2:	f7fd fbe5 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8022fd6:	4603      	mov	r3, r0
 8022fd8:	9303      	str	r3, [sp, #12]
 8022fda:	4620      	mov	r0, r4
 8022fdc:	3c01      	subs	r4, #1
 8022fde:	b363      	cbz	r3, 802303a <emWin_LCD_Init+0xd2>
 8022fe0:	f7fe fafe 	bl	80215e0 <GUI_SelectLayer>
 8022fe4:	682b      	ldr	r3, [r5, #0]
 8022fe6:	2004      	movs	r0, #4
 8022fe8:	689b      	ldr	r3, [r3, #8]
 8022fea:	4798      	blx	r3
 8022fec:	6830      	ldr	r0, [r6, #0]
 8022fee:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8022ff2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8022ff6:	f643 7cff 	movw	ip, #16383	; 0x3fff
 8022ffa:	4563      	cmp	r3, ip
 8022ffc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8023000:	bfa8      	it	ge
 8023002:	4663      	movge	r3, ip
 8023004:	428b      	cmp	r3, r1
 8023006:	db0a      	blt.n	802301e <emWin_LCD_Init+0xb6>
 8023008:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 802300c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8023010:	45e6      	cmp	lr, ip
 8023012:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8023016:	bfa8      	it	ge
 8023018:	46e6      	movge	lr, ip
 802301a:	4596      	cmp	lr, r2
 802301c:	da17      	bge.n	802304e <emWin_LCD_Init+0xe6>
 802301e:	682b      	ldr	r3, [r5, #0]
 8023020:	2000      	movs	r0, #0
 8023022:	689b      	ldr	r3, [r3, #8]
 8023024:	4798      	blx	r3
 8023026:	9b03      	ldr	r3, [sp, #12]
 8023028:	68db      	ldr	r3, [r3, #12]
 802302a:	210e      	movs	r1, #14
 802302c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802302e:	a803      	add	r0, sp, #12
 8023030:	4798      	blx	r3
 8023032:	4603      	mov	r3, r0
 8023034:	b108      	cbz	r0, 802303a <emWin_LCD_Init+0xd2>
 8023036:	9803      	ldr	r0, [sp, #12]
 8023038:	4798      	blx	r3
 802303a:	1c63      	adds	r3, r4, #1
 802303c:	d1c8      	bne.n	8022fd0 <emWin_LCD_Init+0x68>
 802303e:	2000      	movs	r0, #0
 8023040:	b004      	add	sp, #16
 8023042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023046:	4620      	mov	r0, r4
 8023048:	b004      	add	sp, #16
 802304a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802304e:	7c40      	ldrb	r0, [r0, #17]
 8023050:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8023054:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8023058:	f8cd e000 	str.w	lr, [sp]
 802305c:	f8dc 8010 	ldr.w	r8, [ip, #16]
 8023060:	47c0      	blx	r8
 8023062:	e7dc      	b.n	802301e <emWin_LCD_Init+0xb6>
 8023064:	2001      	movs	r0, #1
 8023066:	e7ef      	b.n	8023048 <emWin_LCD_Init+0xe0>
 8023068:	200000e8 	.word	0x200000e8
 802306c:	200308b0 	.word	0x200308b0
 8023070:	200000e4 	.word	0x200000e4
 8023074:	20000118 	.word	0x20000118

08023078 <LCD_Color2Index>:
 8023078:	4a04      	ldr	r2, [pc, #16]	; (802308c <LCD_Color2Index+0x14>)
 802307a:	4b05      	ldr	r3, [pc, #20]	; (8023090 <LCD_Color2Index+0x18>)
 802307c:	6812      	ldr	r2, [r2, #0]
 802307e:	7c52      	ldrb	r2, [r2, #17]
 8023080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023084:	691b      	ldr	r3, [r3, #16]
 8023086:	681b      	ldr	r3, [r3, #0]
 8023088:	4718      	bx	r3
 802308a:	bf00      	nop
 802308c:	200000e8 	.word	0x200000e8
 8023090:	200308b0 	.word	0x200308b0

08023094 <LCD_Index2Color>:
 8023094:	4a04      	ldr	r2, [pc, #16]	; (80230a8 <LCD_Index2Color+0x14>)
 8023096:	4b05      	ldr	r3, [pc, #20]	; (80230ac <LCD_Index2Color+0x18>)
 8023098:	6812      	ldr	r2, [r2, #0]
 802309a:	7c52      	ldrb	r2, [r2, #17]
 802309c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80230a0:	691b      	ldr	r3, [r3, #16]
 80230a2:	685b      	ldr	r3, [r3, #4]
 80230a4:	4718      	bx	r3
 80230a6:	bf00      	nop
 80230a8:	200000e8 	.word	0x200000e8
 80230ac:	200308b0 	.word	0x200308b0

080230b0 <LCD_SetColorIndex>:
 80230b0:	4b04      	ldr	r3, [pc, #16]	; (80230c4 <LCD_SetColorIndex+0x14>)
 80230b2:	681b      	ldr	r3, [r3, #0]
 80230b4:	7c1a      	ldrb	r2, [r3, #16]
 80230b6:	0752      	lsls	r2, r2, #29
 80230b8:	bf4c      	ite	mi
 80230ba:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 80230bc:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 80230be:	6018      	str	r0, [r3, #0]
 80230c0:	4770      	bx	lr
 80230c2:	bf00      	nop
 80230c4:	200000e8 	.word	0x200000e8

080230c8 <LCD_SetBkColorIndex>:
 80230c8:	4b04      	ldr	r3, [pc, #16]	; (80230dc <LCD_SetBkColorIndex+0x14>)
 80230ca:	681b      	ldr	r3, [r3, #0]
 80230cc:	7c1a      	ldrb	r2, [r3, #16]
 80230ce:	0752      	lsls	r2, r2, #29
 80230d0:	bf4c      	ite	mi
 80230d2:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 80230d4:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 80230d6:	6018      	str	r0, [r3, #0]
 80230d8:	4770      	bx	lr
 80230da:	bf00      	nop
 80230dc:	200000e8 	.word	0x200000e8

080230e0 <LCD_SetBkColor>:
 80230e0:	4b01      	ldr	r3, [pc, #4]	; (80230e8 <LCD_SetBkColor+0x8>)
 80230e2:	681b      	ldr	r3, [r3, #0]
 80230e4:	685b      	ldr	r3, [r3, #4]
 80230e6:	4718      	bx	r3
 80230e8:	20000118 	.word	0x20000118

080230ec <LCD_SetColor>:
 80230ec:	4b01      	ldr	r3, [pc, #4]	; (80230f4 <LCD_SetColor+0x8>)
 80230ee:	681b      	ldr	r3, [r3, #0]
 80230f0:	681b      	ldr	r3, [r3, #0]
 80230f2:	4718      	bx	r3
 80230f4:	20000118 	.word	0x20000118

080230f8 <LCD_AA_MixColors16>:
 80230f8:	b508      	push	{r3, lr}
 80230fa:	0e0b      	lsrs	r3, r1, #24
 80230fc:	d103      	bne.n	8023106 <LCD_AA_MixColors16+0xe>
 80230fe:	0e03      	lsrs	r3, r0, #24
 8023100:	2bff      	cmp	r3, #255	; 0xff
 8023102:	d00f      	beq.n	8023124 <LCD_AA_MixColors16+0x2c>
 8023104:	b14b      	cbz	r3, 802311a <LCD_AA_MixColors16+0x22>
 8023106:	4b0c      	ldr	r3, [pc, #48]	; (8023138 <LCD_AA_MixColors16+0x40>)
 8023108:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802310c:	b2d2      	uxtb	r2, r2
 802310e:	681b      	ldr	r3, [r3, #0]
 8023110:	4798      	blx	r3
 8023112:	4b0a      	ldr	r3, [pc, #40]	; (802313c <LCD_AA_MixColors16+0x44>)
 8023114:	685a      	ldr	r2, [r3, #4]
 8023116:	4310      	orrs	r0, r2
 8023118:	bd08      	pop	{r3, pc}
 802311a:	4b08      	ldr	r3, [pc, #32]	; (802313c <LCD_AA_MixColors16+0x44>)
 802311c:	685a      	ldr	r2, [r3, #4]
 802311e:	ea41 0002 	orr.w	r0, r1, r2
 8023122:	bd08      	pop	{r3, pc}
 8023124:	4b05      	ldr	r3, [pc, #20]	; (802313c <LCD_AA_MixColors16+0x44>)
 8023126:	685b      	ldr	r3, [r3, #4]
 8023128:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 802312c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023130:	4318      	orrs	r0, r3
 8023132:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8023136:	bd08      	pop	{r3, pc}
 8023138:	20000100 	.word	0x20000100
 802313c:	2000011c 	.word	0x2000011c

08023140 <LCD_AA_SetOrMask>:
 8023140:	4b02      	ldr	r3, [pc, #8]	; (802314c <LCD_AA_SetOrMask+0xc>)
 8023142:	685a      	ldr	r2, [r3, #4]
 8023144:	6058      	str	r0, [r3, #4]
 8023146:	4610      	mov	r0, r2
 8023148:	4770      	bx	lr
 802314a:	bf00      	nop
 802314c:	2000011c 	.word	0x2000011c

08023150 <_OnExit>:
 8023150:	b510      	push	{r4, lr}
 8023152:	4c04      	ldr	r4, [pc, #16]	; (8023164 <_OnExit+0x14>)
 8023154:	6820      	ldr	r0, [r4, #0]
 8023156:	f7fc faed 	bl	801f734 <GUI_ALLOC_FreeFixedBlock>
 802315a:	4a03      	ldr	r2, [pc, #12]	; (8023168 <_OnExit+0x18>)
 802315c:	2300      	movs	r3, #0
 802315e:	6023      	str	r3, [r4, #0]
 8023160:	6013      	str	r3, [r2, #0]
 8023162:	bd10      	pop	{r4, pc}
 8023164:	200308c8 	.word	0x200308c8
 8023168:	2002e3a4 	.word	0x2002e3a4

0802316c <LCD_InitColors>:
 802316c:	b538      	push	{r3, r4, r5, lr}
 802316e:	4d0b      	ldr	r5, [pc, #44]	; (802319c <LCD_InitColors+0x30>)
 8023170:	682c      	ldr	r4, [r5, #0]
 8023172:	b10c      	cbz	r4, 8023178 <LCD_InitColors+0xc>
 8023174:	2000      	movs	r0, #0
 8023176:	bd38      	pop	{r3, r4, r5, pc}
 8023178:	4b09      	ldr	r3, [pc, #36]	; (80231a0 <LCD_InitColors+0x34>)
 802317a:	6818      	ldr	r0, [r3, #0]
 802317c:	0080      	lsls	r0, r0, #2
 802317e:	f7fc fae3 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8023182:	6028      	str	r0, [r5, #0]
 8023184:	b138      	cbz	r0, 8023196 <LCD_InitColors+0x2a>
 8023186:	4807      	ldr	r0, [pc, #28]	; (80231a4 <LCD_InitColors+0x38>)
 8023188:	4b07      	ldr	r3, [pc, #28]	; (80231a8 <LCD_InitColors+0x3c>)
 802318a:	f840 3f04 	str.w	r3, [r0, #4]!
 802318e:	f7fd fae1 	bl	8020754 <GUI__RegisterExit>
 8023192:	4620      	mov	r0, r4
 8023194:	bd38      	pop	{r3, r4, r5, pc}
 8023196:	2001      	movs	r0, #1
 8023198:	bd38      	pop	{r3, r4, r5, pc}
 802319a:	bf00      	nop
 802319c:	200308c8 	.word	0x200308c8
 80231a0:	20000134 	.word	0x20000134
 80231a4:	2002e3a4 	.word	0x2002e3a4
 80231a8:	08023151 	.word	0x08023151

080231ac <LCD_GetpPalConvTable>:
 80231ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80231b0:	b360      	cbz	r0, 802320c <LCD_GetpPalConvTable+0x60>
 80231b2:	6885      	ldr	r5, [r0, #8]
 80231b4:	b365      	cbz	r5, 8023210 <LCD_GetpPalConvTable+0x64>
 80231b6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 802321c <LCD_GetpPalConvTable+0x70>
 80231ba:	f8d8 6000 	ldr.w	r6, [r8]
 80231be:	b306      	cbz	r6, 8023202 <LCD_GetpPalConvTable+0x56>
 80231c0:	6807      	ldr	r7, [r0, #0]
 80231c2:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80231c6:	dc1f      	bgt.n	8023208 <LCD_GetpPalConvTable+0x5c>
 80231c8:	4b12      	ldr	r3, [pc, #72]	; (8023214 <LCD_GetpPalConvTable+0x68>)
 80231ca:	681b      	ldr	r3, [r3, #0]
 80231cc:	429f      	cmp	r7, r3
 80231ce:	bfa8      	it	ge
 80231d0:	461f      	movge	r7, r3
 80231d2:	2f00      	cmp	r7, #0
 80231d4:	4681      	mov	r9, r0
 80231d6:	dd0d      	ble.n	80231f4 <LCD_GetpPalConvTable+0x48>
 80231d8:	3d04      	subs	r5, #4
 80231da:	2400      	movs	r4, #0
 80231dc:	e001      	b.n	80231e2 <LCD_GetpPalConvTable+0x36>
 80231de:	f8d8 6000 	ldr.w	r6, [r8]
 80231e2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80231e6:	f7ff ff47 	bl	8023078 <LCD_Color2Index>
 80231ea:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 80231ee:	3401      	adds	r4, #1
 80231f0:	42bc      	cmp	r4, r7
 80231f2:	d1f4      	bne.n	80231de <LCD_GetpPalConvTable+0x32>
 80231f4:	4b08      	ldr	r3, [pc, #32]	; (8023218 <LCD_GetpPalConvTable+0x6c>)
 80231f6:	681b      	ldr	r3, [r3, #0]
 80231f8:	b10b      	cbz	r3, 80231fe <LCD_GetpPalConvTable+0x52>
 80231fa:	4648      	mov	r0, r9
 80231fc:	4798      	blx	r3
 80231fe:	f8d8 6000 	ldr.w	r6, [r8]
 8023202:	4630      	mov	r0, r6
 8023204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023208:	2600      	movs	r6, #0
 802320a:	e7fa      	b.n	8023202 <LCD_GetpPalConvTable+0x56>
 802320c:	4606      	mov	r6, r0
 802320e:	e7f8      	b.n	8023202 <LCD_GetpPalConvTable+0x56>
 8023210:	462e      	mov	r6, r5
 8023212:	e7f6      	b.n	8023202 <LCD_GetpPalConvTable+0x56>
 8023214:	20000134 	.word	0x20000134
 8023218:	2002e3a4 	.word	0x2002e3a4
 802321c:	200308c8 	.word	0x200308c8

08023220 <LCD_GetpPalConvTableBM>:
 8023220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023224:	b360      	cbz	r0, 8023280 <LCD_GetpPalConvTableBM+0x60>
 8023226:	6885      	ldr	r5, [r0, #8]
 8023228:	b365      	cbz	r5, 8023284 <LCD_GetpPalConvTableBM+0x64>
 802322a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8023290 <LCD_GetpPalConvTableBM+0x70>
 802322e:	f8d8 6000 	ldr.w	r6, [r8]
 8023232:	b306      	cbz	r6, 8023276 <LCD_GetpPalConvTableBM+0x56>
 8023234:	6807      	ldr	r7, [r0, #0]
 8023236:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 802323a:	dc1f      	bgt.n	802327c <LCD_GetpPalConvTableBM+0x5c>
 802323c:	4b12      	ldr	r3, [pc, #72]	; (8023288 <LCD_GetpPalConvTableBM+0x68>)
 802323e:	681b      	ldr	r3, [r3, #0]
 8023240:	429f      	cmp	r7, r3
 8023242:	bfa8      	it	ge
 8023244:	461f      	movge	r7, r3
 8023246:	2f00      	cmp	r7, #0
 8023248:	4681      	mov	r9, r0
 802324a:	dd0d      	ble.n	8023268 <LCD_GetpPalConvTableBM+0x48>
 802324c:	3d04      	subs	r5, #4
 802324e:	2400      	movs	r4, #0
 8023250:	e001      	b.n	8023256 <LCD_GetpPalConvTableBM+0x36>
 8023252:	f8d8 6000 	ldr.w	r6, [r8]
 8023256:	f855 0f04 	ldr.w	r0, [r5, #4]!
 802325a:	f7ff ff0d 	bl	8023078 <LCD_Color2Index>
 802325e:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8023262:	3401      	adds	r4, #1
 8023264:	42bc      	cmp	r4, r7
 8023266:	d1f4      	bne.n	8023252 <LCD_GetpPalConvTableBM+0x32>
 8023268:	4b08      	ldr	r3, [pc, #32]	; (802328c <LCD_GetpPalConvTableBM+0x6c>)
 802326a:	681b      	ldr	r3, [r3, #0]
 802326c:	b10b      	cbz	r3, 8023272 <LCD_GetpPalConvTableBM+0x52>
 802326e:	4648      	mov	r0, r9
 8023270:	4798      	blx	r3
 8023272:	f8d8 6000 	ldr.w	r6, [r8]
 8023276:	4630      	mov	r0, r6
 8023278:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802327c:	2600      	movs	r6, #0
 802327e:	e7fa      	b.n	8023276 <LCD_GetpPalConvTableBM+0x56>
 8023280:	4606      	mov	r6, r0
 8023282:	e7f8      	b.n	8023276 <LCD_GetpPalConvTableBM+0x56>
 8023284:	462e      	mov	r6, r5
 8023286:	e7f6      	b.n	8023276 <LCD_GetpPalConvTableBM+0x56>
 8023288:	20000134 	.word	0x20000134
 802328c:	2002e3a4 	.word	0x2002e3a4
 8023290:	200308c8 	.word	0x200308c8

08023294 <LCD_InitLUT>:
 8023294:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023298:	f000 f9da 	bl	8023650 <LCD_GetNumLayers>
 802329c:	f1b0 0900 	subs.w	r9, r0, #0
 80232a0:	dd2f      	ble.n	8023302 <LCD_InitLUT+0x6e>
 80232a2:	4f19      	ldr	r7, [pc, #100]	; (8023308 <LCD_InitLUT+0x74>)
 80232a4:	f8df b068 	ldr.w	fp, [pc, #104]	; 8023310 <LCD_InitLUT+0x7c>
 80232a8:	2500      	movs	r5, #0
 80232aa:	4628      	mov	r0, r5
 80232ac:	f7fd fa78 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 80232b0:	b320      	cbz	r0, 80232fc <LCD_InitLUT+0x68>
 80232b2:	683b      	ldr	r3, [r7, #0]
 80232b4:	4628      	mov	r0, r5
 80232b6:	f893 8011 	ldrb.w	r8, [r3, #17]
 80232ba:	745d      	strb	r5, [r3, #17]
 80232bc:	f000 f87a 	bl	80233b4 <LCD_GetBitsPerPixelEx>
 80232c0:	2808      	cmp	r0, #8
 80232c2:	dc18      	bgt.n	80232f6 <LCD_InitLUT+0x62>
 80232c4:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 80232c8:	4a10      	ldr	r2, [pc, #64]	; (802330c <LCD_InitLUT+0x78>)
 80232ca:	691b      	ldr	r3, [r3, #16]
 80232cc:	4293      	cmp	r3, r2
 80232ce:	d012      	beq.n	80232f6 <LCD_InitLUT+0x62>
 80232d0:	4628      	mov	r0, r5
 80232d2:	f000 f87f 	bl	80233d4 <LCD_GetNumColorsEx>
 80232d6:	1e06      	subs	r6, r0, #0
 80232d8:	dd0d      	ble.n	80232f6 <LCD_InitLUT+0x62>
 80232da:	2400      	movs	r4, #0
 80232dc:	fa5f fa84 	uxtb.w	sl, r4
 80232e0:	4650      	mov	r0, sl
 80232e2:	f7ff fed7 	bl	8023094 <LCD_Index2Color>
 80232e6:	3401      	adds	r4, #1
 80232e8:	4602      	mov	r2, r0
 80232ea:	4651      	mov	r1, sl
 80232ec:	4628      	mov	r0, r5
 80232ee:	f000 fea7 	bl	8024040 <LCD_SetLUTEntryEx>
 80232f2:	42a6      	cmp	r6, r4
 80232f4:	d1f2      	bne.n	80232dc <LCD_InitLUT+0x48>
 80232f6:	683b      	ldr	r3, [r7, #0]
 80232f8:	f883 8011 	strb.w	r8, [r3, #17]
 80232fc:	3501      	adds	r5, #1
 80232fe:	45a9      	cmp	r9, r5
 8023300:	d1d3      	bne.n	80232aa <LCD_InitLUT+0x16>
 8023302:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023306:	bf00      	nop
 8023308:	200000e8 	.word	0x200000e8
 802330c:	08041504 	.word	0x08041504
 8023310:	200308b0 	.word	0x200308b0

08023314 <LCD_GetBkColorIndex>:
 8023314:	4b02      	ldr	r3, [pc, #8]	; (8023320 <LCD_GetBkColorIndex+0xc>)
 8023316:	681b      	ldr	r3, [r3, #0]
 8023318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802331a:	6818      	ldr	r0, [r3, #0]
 802331c:	4770      	bx	lr
 802331e:	bf00      	nop
 8023320:	200000e8 	.word	0x200000e8

08023324 <LCD_GetColorIndex>:
 8023324:	4b02      	ldr	r3, [pc, #8]	; (8023330 <LCD_GetColorIndex+0xc>)
 8023326:	681b      	ldr	r3, [r3, #0]
 8023328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 802332a:	6818      	ldr	r0, [r3, #0]
 802332c:	4770      	bx	lr
 802332e:	bf00      	nop
 8023330:	200000e8 	.word	0x200000e8

08023334 <LCD_GetXSizeEx>:
 8023334:	2801      	cmp	r0, #1
 8023336:	dd01      	ble.n	802333c <LCD_GetXSizeEx+0x8>
 8023338:	2000      	movs	r0, #0
 802333a:	4770      	bx	lr
 802333c:	b510      	push	{r4, lr}
 802333e:	f7fd fa2f 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8023342:	b128      	cbz	r0, 8023350 <LCD_GetXSizeEx+0x1c>
 8023344:	68c3      	ldr	r3, [r0, #12]
 8023346:	2101      	movs	r1, #1
 8023348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802334a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802334e:	4718      	bx	r3
 8023350:	2000      	movs	r0, #0
 8023352:	bd10      	pop	{r4, pc}

08023354 <LCD_GetYSizeEx>:
 8023354:	2801      	cmp	r0, #1
 8023356:	dd01      	ble.n	802335c <LCD_GetYSizeEx+0x8>
 8023358:	2000      	movs	r0, #0
 802335a:	4770      	bx	lr
 802335c:	b510      	push	{r4, lr}
 802335e:	f7fd fa1f 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8023362:	b128      	cbz	r0, 8023370 <LCD_GetYSizeEx+0x1c>
 8023364:	68c3      	ldr	r3, [r0, #12]
 8023366:	2102      	movs	r1, #2
 8023368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802336a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802336e:	4718      	bx	r3
 8023370:	2000      	movs	r0, #0
 8023372:	bd10      	pop	{r4, pc}

08023374 <LCD_GetVXSizeEx>:
 8023374:	2801      	cmp	r0, #1
 8023376:	dd01      	ble.n	802337c <LCD_GetVXSizeEx+0x8>
 8023378:	2000      	movs	r0, #0
 802337a:	4770      	bx	lr
 802337c:	b510      	push	{r4, lr}
 802337e:	f7fd fa0f 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8023382:	b128      	cbz	r0, 8023390 <LCD_GetVXSizeEx+0x1c>
 8023384:	68c3      	ldr	r3, [r0, #12]
 8023386:	2103      	movs	r1, #3
 8023388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802338a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802338e:	4718      	bx	r3
 8023390:	2000      	movs	r0, #0
 8023392:	bd10      	pop	{r4, pc}

08023394 <LCD_GetVYSizeEx>:
 8023394:	2801      	cmp	r0, #1
 8023396:	dd01      	ble.n	802339c <LCD_GetVYSizeEx+0x8>
 8023398:	2000      	movs	r0, #0
 802339a:	4770      	bx	lr
 802339c:	b510      	push	{r4, lr}
 802339e:	f7fd f9ff 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 80233a2:	b128      	cbz	r0, 80233b0 <LCD_GetVYSizeEx+0x1c>
 80233a4:	68c3      	ldr	r3, [r0, #12]
 80233a6:	2104      	movs	r1, #4
 80233a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80233aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80233ae:	4718      	bx	r3
 80233b0:	2000      	movs	r0, #0
 80233b2:	bd10      	pop	{r4, pc}

080233b4 <LCD_GetBitsPerPixelEx>:
 80233b4:	2801      	cmp	r0, #1
 80233b6:	dd01      	ble.n	80233bc <LCD_GetBitsPerPixelEx+0x8>
 80233b8:	2000      	movs	r0, #0
 80233ba:	4770      	bx	lr
 80233bc:	b510      	push	{r4, lr}
 80233be:	f7fd f9ef 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 80233c2:	b128      	cbz	r0, 80233d0 <LCD_GetBitsPerPixelEx+0x1c>
 80233c4:	68c3      	ldr	r3, [r0, #12]
 80233c6:	2108      	movs	r1, #8
 80233c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80233ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80233ce:	4718      	bx	r3
 80233d0:	2000      	movs	r0, #0
 80233d2:	bd10      	pop	{r4, pc}

080233d4 <LCD_GetNumColorsEx>:
 80233d4:	2801      	cmp	r0, #1
 80233d6:	dd01      	ble.n	80233dc <LCD_GetNumColorsEx+0x8>
 80233d8:	2000      	movs	r0, #0
 80233da:	4770      	bx	lr
 80233dc:	b510      	push	{r4, lr}
 80233de:	f7fd f9df 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 80233e2:	b128      	cbz	r0, 80233f0 <LCD_GetNumColorsEx+0x1c>
 80233e4:	68c3      	ldr	r3, [r0, #12]
 80233e6:	2109      	movs	r1, #9
 80233e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80233ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80233ee:	4718      	bx	r3
 80233f0:	2000      	movs	r0, #0
 80233f2:	bd10      	pop	{r4, pc}

080233f4 <LCD_GetMirrorXEx>:
 80233f4:	2801      	cmp	r0, #1
 80233f6:	dd01      	ble.n	80233fc <LCD_GetMirrorXEx+0x8>
 80233f8:	2000      	movs	r0, #0
 80233fa:	4770      	bx	lr
 80233fc:	b510      	push	{r4, lr}
 80233fe:	f7fd f9cf 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8023402:	b128      	cbz	r0, 8023410 <LCD_GetMirrorXEx+0x1c>
 8023404:	68c3      	ldr	r3, [r0, #12]
 8023406:	210c      	movs	r1, #12
 8023408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802340a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802340e:	4718      	bx	r3
 8023410:	2000      	movs	r0, #0
 8023412:	bd10      	pop	{r4, pc}

08023414 <LCD_GetMirrorYEx>:
 8023414:	2801      	cmp	r0, #1
 8023416:	dd01      	ble.n	802341c <LCD_GetMirrorYEx+0x8>
 8023418:	2000      	movs	r0, #0
 802341a:	4770      	bx	lr
 802341c:	b510      	push	{r4, lr}
 802341e:	f7fd f9bf 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8023422:	b128      	cbz	r0, 8023430 <LCD_GetMirrorYEx+0x1c>
 8023424:	68c3      	ldr	r3, [r0, #12]
 8023426:	210d      	movs	r1, #13
 8023428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802342a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802342e:	4718      	bx	r3
 8023430:	2000      	movs	r0, #0
 8023432:	bd10      	pop	{r4, pc}

08023434 <LCD_GetSwapXYEx>:
 8023434:	2801      	cmp	r0, #1
 8023436:	dd01      	ble.n	802343c <LCD_GetSwapXYEx+0x8>
 8023438:	2000      	movs	r0, #0
 802343a:	4770      	bx	lr
 802343c:	b510      	push	{r4, lr}
 802343e:	f7fd f9af 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8023442:	b128      	cbz	r0, 8023450 <LCD_GetSwapXYEx+0x1c>
 8023444:	68c3      	ldr	r3, [r0, #12]
 8023446:	210e      	movs	r1, #14
 8023448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802344a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802344e:	4718      	bx	r3
 8023450:	2000      	movs	r0, #0
 8023452:	bd10      	pop	{r4, pc}

08023454 <LCD_GetXSize>:
 8023454:	4b09      	ldr	r3, [pc, #36]	; (802347c <LCD_GetXSize+0x28>)
 8023456:	681b      	ldr	r3, [r3, #0]
 8023458:	7c58      	ldrb	r0, [r3, #17]
 802345a:	2801      	cmp	r0, #1
 802345c:	dd01      	ble.n	8023462 <LCD_GetXSize+0xe>
 802345e:	2000      	movs	r0, #0
 8023460:	4770      	bx	lr
 8023462:	b510      	push	{r4, lr}
 8023464:	f7fd f99c 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8023468:	b128      	cbz	r0, 8023476 <LCD_GetXSize+0x22>
 802346a:	68c3      	ldr	r3, [r0, #12]
 802346c:	2101      	movs	r1, #1
 802346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023474:	4718      	bx	r3
 8023476:	2000      	movs	r0, #0
 8023478:	bd10      	pop	{r4, pc}
 802347a:	bf00      	nop
 802347c:	200000e8 	.word	0x200000e8

08023480 <LCD_GetYSize>:
 8023480:	4b09      	ldr	r3, [pc, #36]	; (80234a8 <LCD_GetYSize+0x28>)
 8023482:	681b      	ldr	r3, [r3, #0]
 8023484:	7c58      	ldrb	r0, [r3, #17]
 8023486:	2801      	cmp	r0, #1
 8023488:	dd01      	ble.n	802348e <LCD_GetYSize+0xe>
 802348a:	2000      	movs	r0, #0
 802348c:	4770      	bx	lr
 802348e:	b510      	push	{r4, lr}
 8023490:	f7fd f986 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8023494:	b128      	cbz	r0, 80234a2 <LCD_GetYSize+0x22>
 8023496:	68c3      	ldr	r3, [r0, #12]
 8023498:	2102      	movs	r1, #2
 802349a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802349c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80234a0:	4718      	bx	r3
 80234a2:	2000      	movs	r0, #0
 80234a4:	bd10      	pop	{r4, pc}
 80234a6:	bf00      	nop
 80234a8:	200000e8 	.word	0x200000e8

080234ac <LCD_GetNumColors>:
 80234ac:	4b09      	ldr	r3, [pc, #36]	; (80234d4 <LCD_GetNumColors+0x28>)
 80234ae:	681b      	ldr	r3, [r3, #0]
 80234b0:	7c58      	ldrb	r0, [r3, #17]
 80234b2:	2801      	cmp	r0, #1
 80234b4:	dd01      	ble.n	80234ba <LCD_GetNumColors+0xe>
 80234b6:	2000      	movs	r0, #0
 80234b8:	4770      	bx	lr
 80234ba:	b510      	push	{r4, lr}
 80234bc:	f7fd f970 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 80234c0:	b128      	cbz	r0, 80234ce <LCD_GetNumColors+0x22>
 80234c2:	68c3      	ldr	r3, [r0, #12]
 80234c4:	2109      	movs	r1, #9
 80234c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80234c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80234cc:	4718      	bx	r3
 80234ce:	2000      	movs	r0, #0
 80234d0:	bd10      	pop	{r4, pc}
 80234d2:	bf00      	nop
 80234d4:	200000e8 	.word	0x200000e8

080234d8 <GUI_GetBitsPerPixelEx>:
 80234d8:	4b03      	ldr	r3, [pc, #12]	; (80234e8 <GUI_GetBitsPerPixelEx+0x10>)
 80234da:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80234de:	68c3      	ldr	r3, [r0, #12]
 80234e0:	2108      	movs	r1, #8
 80234e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80234e4:	4718      	bx	r3
 80234e6:	bf00      	nop
 80234e8:	200308b0 	.word	0x200308b0

080234ec <LCD_GetPalette>:
 80234ec:	b510      	push	{r4, lr}
 80234ee:	4b06      	ldr	r3, [pc, #24]	; (8023508 <LCD_GetPalette+0x1c>)
 80234f0:	681b      	ldr	r3, [r3, #0]
 80234f2:	7c58      	ldrb	r0, [r3, #17]
 80234f4:	f7fd f954 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 80234f8:	b128      	cbz	r0, 8023506 <LCD_GetPalette+0x1a>
 80234fa:	68c3      	ldr	r3, [r0, #12]
 80234fc:	2102      	movs	r1, #2
 80234fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023504:	4718      	bx	r3
 8023506:	bd10      	pop	{r4, pc}
 8023508:	200000e8 	.word	0x200000e8

0802350c <GUI_GetpfIndex2ColorEx>:
 802350c:	4b02      	ldr	r3, [pc, #8]	; (8023518 <GUI_GetpfIndex2ColorEx+0xc>)
 802350e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8023512:	691b      	ldr	r3, [r3, #16]
 8023514:	6858      	ldr	r0, [r3, #4]
 8023516:	4770      	bx	lr
 8023518:	200308b0 	.word	0x200308b0

0802351c <GUI_GetpfColor2IndexEx>:
 802351c:	4b02      	ldr	r3, [pc, #8]	; (8023528 <GUI_GetpfColor2IndexEx+0xc>)
 802351e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8023522:	691b      	ldr	r3, [r3, #16]
 8023524:	6818      	ldr	r0, [r3, #0]
 8023526:	4770      	bx	lr
 8023528:	200308b0 	.word	0x200308b0

0802352c <LCD_GetXSizeMax>:
 802352c:	b538      	push	{r3, r4, r5, lr}
 802352e:	2501      	movs	r5, #1
 8023530:	4628      	mov	r0, r5
 8023532:	f7fd f935 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8023536:	2400      	movs	r4, #0
 8023538:	2101      	movs	r1, #1
 802353a:	b178      	cbz	r0, 802355c <LCD_GetXSizeMax+0x30>
 802353c:	68c3      	ldr	r3, [r0, #12]
 802353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023540:	4798      	blx	r3
 8023542:	4284      	cmp	r4, r0
 8023544:	bfb8      	it	lt
 8023546:	4604      	movlt	r4, r0
 8023548:	b90d      	cbnz	r5, 802354e <LCD_GetXSizeMax+0x22>
 802354a:	4620      	mov	r0, r4
 802354c:	bd38      	pop	{r3, r4, r5, pc}
 802354e:	2500      	movs	r5, #0
 8023550:	4628      	mov	r0, r5
 8023552:	f7fd f925 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8023556:	2101      	movs	r1, #1
 8023558:	2800      	cmp	r0, #0
 802355a:	d1ef      	bne.n	802353c <LCD_GetXSizeMax+0x10>
 802355c:	e7f1      	b.n	8023542 <LCD_GetXSizeMax+0x16>
 802355e:	bf00      	nop

08023560 <LCD_GetYSizeMax>:
 8023560:	b538      	push	{r3, r4, r5, lr}
 8023562:	2501      	movs	r5, #1
 8023564:	4628      	mov	r0, r5
 8023566:	f7fd f91b 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 802356a:	2400      	movs	r4, #0
 802356c:	2102      	movs	r1, #2
 802356e:	b178      	cbz	r0, 8023590 <LCD_GetYSizeMax+0x30>
 8023570:	68c3      	ldr	r3, [r0, #12]
 8023572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023574:	4798      	blx	r3
 8023576:	4284      	cmp	r4, r0
 8023578:	bfb8      	it	lt
 802357a:	4604      	movlt	r4, r0
 802357c:	b90d      	cbnz	r5, 8023582 <LCD_GetYSizeMax+0x22>
 802357e:	4620      	mov	r0, r4
 8023580:	bd38      	pop	{r3, r4, r5, pc}
 8023582:	2500      	movs	r5, #0
 8023584:	4628      	mov	r0, r5
 8023586:	f7fd f90b 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 802358a:	2102      	movs	r1, #2
 802358c:	2800      	cmp	r0, #0
 802358e:	d1ef      	bne.n	8023570 <LCD_GetYSizeMax+0x10>
 8023590:	e7f1      	b.n	8023576 <LCD_GetYSizeMax+0x16>
 8023592:	bf00      	nop

08023594 <LCD_GetVXSizeMax>:
 8023594:	b538      	push	{r3, r4, r5, lr}
 8023596:	2501      	movs	r5, #1
 8023598:	4628      	mov	r0, r5
 802359a:	f7fd f901 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 802359e:	2400      	movs	r4, #0
 80235a0:	2103      	movs	r1, #3
 80235a2:	b178      	cbz	r0, 80235c4 <LCD_GetVXSizeMax+0x30>
 80235a4:	68c3      	ldr	r3, [r0, #12]
 80235a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80235a8:	4798      	blx	r3
 80235aa:	4284      	cmp	r4, r0
 80235ac:	bfb8      	it	lt
 80235ae:	4604      	movlt	r4, r0
 80235b0:	b90d      	cbnz	r5, 80235b6 <LCD_GetVXSizeMax+0x22>
 80235b2:	4620      	mov	r0, r4
 80235b4:	bd38      	pop	{r3, r4, r5, pc}
 80235b6:	2500      	movs	r5, #0
 80235b8:	4628      	mov	r0, r5
 80235ba:	f7fd f8f1 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 80235be:	2103      	movs	r1, #3
 80235c0:	2800      	cmp	r0, #0
 80235c2:	d1ef      	bne.n	80235a4 <LCD_GetVXSizeMax+0x10>
 80235c4:	e7f1      	b.n	80235aa <LCD_GetVXSizeMax+0x16>
 80235c6:	bf00      	nop

080235c8 <LCD_SetDisplaySize>:
 80235c8:	4b01      	ldr	r3, [pc, #4]	; (80235d0 <LCD_SetDisplaySize+0x8>)
 80235ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80235ce:	4770      	bx	lr
 80235d0:	2002e3b0 	.word	0x2002e3b0

080235d4 <LCD_GetXSizeDisplay>:
 80235d4:	4b01      	ldr	r3, [pc, #4]	; (80235dc <LCD_GetXSizeDisplay+0x8>)
 80235d6:	6818      	ldr	r0, [r3, #0]
 80235d8:	4770      	bx	lr
 80235da:	bf00      	nop
 80235dc:	2002e3b0 	.word	0x2002e3b0

080235e0 <LCD_GetYSizeDisplay>:
 80235e0:	4b01      	ldr	r3, [pc, #4]	; (80235e8 <LCD_GetYSizeDisplay+0x8>)
 80235e2:	6858      	ldr	r0, [r3, #4]
 80235e4:	4770      	bx	lr
 80235e6:	bf00      	nop
 80235e8:	2002e3b0 	.word	0x2002e3b0

080235ec <LCD__GetBPPDevice>:
 80235ec:	b1c8      	cbz	r0, 8023622 <LCD__GetBPPDevice+0x36>
 80235ee:	f030 0301 	bics.w	r3, r0, #1
 80235f2:	d017      	beq.n	8023624 <LCD__GetBPPDevice+0x38>
 80235f4:	f030 0303 	bics.w	r3, r0, #3
 80235f8:	d101      	bne.n	80235fe <LCD__GetBPPDevice+0x12>
 80235fa:	2008      	movs	r0, #8
 80235fc:	4770      	bx	lr
 80235fe:	f030 0307 	bics.w	r3, r0, #7
 8023602:	d0fa      	beq.n	80235fa <LCD__GetBPPDevice+0xe>
 8023604:	f030 030f 	bics.w	r3, r0, #15
 8023608:	d0f7      	beq.n	80235fa <LCD__GetBPPDevice+0xe>
 802360a:	f030 031f 	bics.w	r3, r0, #31
 802360e:	d0f4      	beq.n	80235fa <LCD__GetBPPDevice+0xe>
 8023610:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 8023614:	d0f1      	beq.n	80235fa <LCD__GetBPPDevice+0xe>
 8023616:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 802361a:	f023 0301 	bic.w	r3, r3, #1
 802361e:	b91b      	cbnz	r3, 8023628 <LCD__GetBPPDevice+0x3c>
 8023620:	2010      	movs	r0, #16
 8023622:	4770      	bx	lr
 8023624:	2001      	movs	r0, #1
 8023626:	4770      	bx	lr
 8023628:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 802362c:	f023 030f 	bic.w	r3, r3, #15
 8023630:	2b00      	cmp	r3, #0
 8023632:	d0f5      	beq.n	8023620 <LCD__GetBPPDevice+0x34>
 8023634:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 8023638:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 802363c:	2b00      	cmp	r3, #0
 802363e:	d0ef      	beq.n	8023620 <LCD__GetBPPDevice+0x34>
 8023640:	0c00      	lsrs	r0, r0, #16
 8023642:	0400      	lsls	r0, r0, #16
 8023644:	2800      	cmp	r0, #0
 8023646:	bf0c      	ite	eq
 8023648:	2010      	moveq	r0, #16
 802364a:	2020      	movne	r0, #32
 802364c:	4770      	bx	lr
 802364e:	bf00      	nop

08023650 <LCD_GetNumLayers>:
 8023650:	b510      	push	{r4, lr}
 8023652:	2000      	movs	r0, #0
 8023654:	f7fd f8a4 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8023658:	1c04      	adds	r4, r0, #0
 802365a:	f04f 0001 	mov.w	r0, #1
 802365e:	bf18      	it	ne
 8023660:	2401      	movne	r4, #1
 8023662:	f7fd f89d 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8023666:	b100      	cbz	r0, 802366a <LCD_GetNumLayers+0x1a>
 8023668:	3401      	adds	r4, #1
 802366a:	4620      	mov	r0, r4
 802366c:	bd10      	pop	{r4, pc}
 802366e:	bf00      	nop

08023670 <_GetByte_pPixel>:
 8023670:	4a02      	ldr	r2, [pc, #8]	; (802367c <_GetByte_pPixel+0xc>)
 8023672:	6813      	ldr	r3, [r2, #0]
 8023674:	1c59      	adds	r1, r3, #1
 8023676:	6011      	str	r1, [r2, #0]
 8023678:	7818      	ldrb	r0, [r3, #0]
 802367a:	4770      	bx	lr
 802367c:	2002e3b8 	.word	0x2002e3b8

08023680 <_DrawBitmap>:
 8023680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023684:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 8023960 <_DrawBitmap+0x2e0>
 8023688:	b08b      	sub	sp, #44	; 0x2c
 802368a:	f8db 4008 	ldr.w	r4, [fp, #8]
 802368e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023690:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 8023694:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 8023698:	9001      	str	r0, [sp, #4]
 802369a:	9103      	str	r1, [sp, #12]
 802369c:	9305      	str	r3, [sp, #20]
 802369e:	2c00      	cmp	r4, #0
 80236a0:	f000 8088 	beq.w	80237b4 <_DrawBitmap+0x134>
 80236a4:	4bad      	ldr	r3, [pc, #692]	; (802395c <_DrawBitmap+0x2dc>)
 80236a6:	f8db 6000 	ldr.w	r6, [fp]
 80236aa:	4690      	mov	r8, r2
 80236ac:	681a      	ldr	r2, [r3, #0]
 80236ae:	7c13      	ldrb	r3, [r2, #16]
 80236b0:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80236b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80236b4:	6809      	ldr	r1, [r1, #0]
 80236b6:	6812      	ldr	r2, [r2, #0]
 80236b8:	9108      	str	r1, [sp, #32]
 80236ba:	f003 0302 	and.w	r3, r3, #2
 80236be:	b2db      	uxtb	r3, r3
 80236c0:	9306      	str	r3, [sp, #24]
 80236c2:	ea4a 0309 	orr.w	r3, sl, r9
 80236c6:	9209      	str	r2, [sp, #36]	; 0x24
 80236c8:	9302      	str	r3, [sp, #8]
 80236ca:	2d00      	cmp	r5, #0
 80236cc:	f000 815e 	beq.w	802398c <_DrawBitmap+0x30c>
 80236d0:	68ab      	ldr	r3, [r5, #8]
 80236d2:	2b00      	cmp	r3, #0
 80236d4:	f000 8155 	beq.w	8023982 <_DrawBitmap+0x302>
 80236d8:	4628      	mov	r0, r5
 80236da:	f7ff fd67 	bl	80231ac <LCD_GetpPalConvTable>
 80236de:	9007      	str	r0, [sp, #28]
 80236e0:	2800      	cmp	r0, #0
 80236e2:	d067      	beq.n	80237b4 <_DrawBitmap+0x134>
 80236e4:	f1ba 0f01 	cmp.w	sl, #1
 80236e8:	f000 813e 	beq.w	8023968 <_DrawBitmap+0x2e8>
 80236ec:	9b02      	ldr	r3, [sp, #8]
 80236ee:	2b01      	cmp	r3, #1
 80236f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80236f2:	f000 8127 	beq.w	8023944 <_DrawBitmap+0x2c4>
 80236f6:	2b00      	cmp	r3, #0
 80236f8:	f000 8145 	beq.w	8023986 <_DrawBitmap+0x306>
 80236fc:	2700      	movs	r7, #0
 80236fe:	463c      	mov	r4, r7
 8023700:	461a      	mov	r2, r3
 8023702:	2300      	movs	r3, #0
 8023704:	60d6      	str	r6, [r2, #12]
 8023706:	6096      	str	r6, [r2, #8]
 8023708:	6053      	str	r3, [r2, #4]
 802370a:	6013      	str	r3, [r2, #0]
 802370c:	9b05      	ldr	r3, [sp, #20]
 802370e:	42bb      	cmp	r3, r7
 8023710:	dd48      	ble.n	80237a4 <_DrawBitmap+0x124>
 8023712:	f8db 3008 	ldr.w	r3, [fp, #8]
 8023716:	4798      	blx	r3
 8023718:	f8db 3008 	ldr.w	r3, [fp, #8]
 802371c:	4606      	mov	r6, r0
 802371e:	4798      	blx	r3
 8023720:	4605      	mov	r5, r0
 8023722:	2e00      	cmp	r6, #0
 8023724:	d058      	beq.n	80237d8 <_DrawBitmap+0x158>
 8023726:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023728:	b133      	cbz	r3, 8023738 <_DrawBitmap+0xb8>
 802372a:	461a      	mov	r2, r3
 802372c:	4b8c      	ldr	r3, [pc, #560]	; (8023960 <_DrawBitmap+0x2e0>)
 802372e:	6014      	str	r4, [r2, #0]
 8023730:	681b      	ldr	r3, [r3, #0]
 8023732:	6057      	str	r7, [r2, #4]
 8023734:	3b02      	subs	r3, #2
 8023736:	6093      	str	r3, [r2, #8]
 8023738:	4b88      	ldr	r3, [pc, #544]	; (802395c <_DrawBitmap+0x2dc>)
 802373a:	9907      	ldr	r1, [sp, #28]
 802373c:	681b      	ldr	r3, [r3, #0]
 802373e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8023740:	2900      	cmp	r1, #0
 8023742:	f000 80bb 	beq.w	80238bc <_DrawBitmap+0x23c>
 8023746:	b22a      	sxth	r2, r5
 8023748:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802374c:	601a      	str	r2, [r3, #0]
 802374e:	2d00      	cmp	r5, #0
 8023750:	f040 8090 	bne.w	8023874 <_DrawBitmap+0x1f4>
 8023754:	9b06      	ldr	r3, [sp, #24]
 8023756:	2b00      	cmp	r3, #0
 8023758:	d12f      	bne.n	80237ba <_DrawBitmap+0x13a>
 802375a:	9b02      	ldr	r3, [sp, #8]
 802375c:	2b01      	cmp	r3, #1
 802375e:	f000 80d0 	beq.w	8023902 <_DrawBitmap+0x282>
 8023762:	4623      	mov	r3, r4
 8023764:	9c03      	ldr	r4, [sp, #12]
 8023766:	9901      	ldr	r1, [sp, #4]
 8023768:	18f5      	adds	r5, r6, r3
 802376a:	4545      	cmp	r5, r8
 802376c:	bfa8      	it	ge
 802376e:	4645      	movge	r5, r8
 8023770:	fb03 1009 	mla	r0, r3, r9, r1
 8023774:	1aea      	subs	r2, r5, r3
 8023776:	fb07 410a 	mla	r1, r7, sl, r4
 802377a:	fb09 0202 	mla	r2, r9, r2, r0
 802377e:	1b5b      	subs	r3, r3, r5
 8023780:	eb0a 0e01 	add.w	lr, sl, r1
 8023784:	441e      	add	r6, r3
 8023786:	3a01      	subs	r2, #1
 8023788:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 802378c:	f7ff f91a 	bl	80229c4 <LCD_FillRect>
 8023790:	b2f6      	uxtb	r6, r6
 8023792:	45a8      	cmp	r8, r5
 8023794:	bf06      	itte	eq
 8023796:	3701      	addeq	r7, #1
 8023798:	2300      	moveq	r3, #0
 802379a:	462b      	movne	r3, r5
 802379c:	2e00      	cmp	r6, #0
 802379e:	d1e2      	bne.n	8023766 <_DrawBitmap+0xe6>
 80237a0:	461c      	mov	r4, r3
 80237a2:	e7b3      	b.n	802370c <_DrawBitmap+0x8c>
 80237a4:	4b6d      	ldr	r3, [pc, #436]	; (802395c <_DrawBitmap+0x2dc>)
 80237a6:	9908      	ldr	r1, [sp, #32]
 80237a8:	681b      	ldr	r3, [r3, #0]
 80237aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80237ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80237ae:	6011      	str	r1, [r2, #0]
 80237b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80237b2:	601a      	str	r2, [r3, #0]
 80237b4:	b00b      	add	sp, #44	; 0x2c
 80237b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237ba:	1933      	adds	r3, r6, r4
 80237bc:	4543      	cmp	r3, r8
 80237be:	bfa8      	it	ge
 80237c0:	4643      	movge	r3, r8
 80237c2:	1ae4      	subs	r4, r4, r3
 80237c4:	4426      	add	r6, r4
 80237c6:	4543      	cmp	r3, r8
 80237c8:	b2f6      	uxtb	r6, r6
 80237ca:	bf06      	itte	eq
 80237cc:	3701      	addeq	r7, #1
 80237ce:	2400      	moveq	r4, #0
 80237d0:	461c      	movne	r4, r3
 80237d2:	2e00      	cmp	r6, #0
 80237d4:	d1f1      	bne.n	80237ba <_DrawBitmap+0x13a>
 80237d6:	e799      	b.n	802370c <_DrawBitmap+0x8c>
 80237d8:	9b07      	ldr	r3, [sp, #28]
 80237da:	9304      	str	r3, [sp, #16]
 80237dc:	e01c      	b.n	8023818 <_DrawBitmap+0x198>
 80237de:	f7ff fc67 	bl	80230b0 <LCD_SetColorIndex>
 80237e2:	9b01      	ldr	r3, [sp, #4]
 80237e4:	fb09 3004 	mla	r0, r9, r4, r3
 80237e8:	9b03      	ldr	r3, [sp, #12]
 80237ea:	fb0a 3107 	mla	r1, sl, r7, r3
 80237ee:	eb09 0200 	add.w	r2, r9, r0
 80237f2:	eb0a 0301 	add.w	r3, sl, r1
 80237f6:	3a01      	subs	r2, #1
 80237f8:	3b01      	subs	r3, #1
 80237fa:	f7ff f8e3 	bl	80229c4 <LCD_FillRect>
 80237fe:	3401      	adds	r4, #1
 8023800:	45a0      	cmp	r8, r4
 8023802:	dc04      	bgt.n	802380e <_DrawBitmap+0x18e>
 8023804:	9b05      	ldr	r3, [sp, #20]
 8023806:	3701      	adds	r7, #1
 8023808:	42bb      	cmp	r3, r7
 802380a:	ddcb      	ble.n	80237a4 <_DrawBitmap+0x124>
 802380c:	2400      	movs	r4, #0
 802380e:	3d01      	subs	r5, #1
 8023810:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8023814:	f43f af7a 	beq.w	802370c <_DrawBitmap+0x8c>
 8023818:	f8db 3008 	ldr.w	r3, [fp, #8]
 802381c:	4798      	blx	r3
 802381e:	b910      	cbnz	r0, 8023826 <_DrawBitmap+0x1a6>
 8023820:	9b06      	ldr	r3, [sp, #24]
 8023822:	2b00      	cmp	r3, #0
 8023824:	d1eb      	bne.n	80237fe <_DrawBitmap+0x17e>
 8023826:	9b04      	ldr	r3, [sp, #16]
 8023828:	b113      	cbz	r3, 8023830 <_DrawBitmap+0x1b0>
 802382a:	b200      	sxth	r0, r0
 802382c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8023830:	9b02      	ldr	r3, [sp, #8]
 8023832:	2b01      	cmp	r3, #1
 8023834:	d1d3      	bne.n	80237de <_DrawBitmap+0x15e>
 8023836:	4b49      	ldr	r3, [pc, #292]	; (802395c <_DrawBitmap+0x2dc>)
 8023838:	9a03      	ldr	r2, [sp, #12]
 802383a:	681b      	ldr	r3, [r3, #0]
 802383c:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8023840:	18ba      	adds	r2, r7, r2
 8023842:	428a      	cmp	r2, r1
 8023844:	dbdb      	blt.n	80237fe <_DrawBitmap+0x17e>
 8023846:	9901      	ldr	r1, [sp, #4]
 8023848:	f9b3 e008 	ldrsh.w	lr, [r3, #8]
 802384c:	1866      	adds	r6, r4, r1
 802384e:	4576      	cmp	r6, lr
 8023850:	dbd5      	blt.n	80237fe <_DrawBitmap+0x17e>
 8023852:	f9b3 e00c 	ldrsh.w	lr, [r3, #12]
 8023856:	4576      	cmp	r6, lr
 8023858:	dcd1      	bgt.n	80237fe <_DrawBitmap+0x17e>
 802385a:	7c5b      	ldrb	r3, [r3, #17]
 802385c:	4941      	ldr	r1, [pc, #260]	; (8023964 <_DrawBitmap+0x2e4>)
 802385e:	f851 e023 	ldr.w	lr, [r1, r3, lsl #2]
 8023862:	4603      	mov	r3, r0
 8023864:	f8de 000c 	ldr.w	r0, [lr, #12]
 8023868:	6980      	ldr	r0, [r0, #24]
 802386a:	4631      	mov	r1, r6
 802386c:	4606      	mov	r6, r0
 802386e:	4670      	mov	r0, lr
 8023870:	47b0      	blx	r6
 8023872:	e7c4      	b.n	80237fe <_DrawBitmap+0x17e>
 8023874:	9b02      	ldr	r3, [sp, #8]
 8023876:	2b01      	cmp	r3, #1
 8023878:	d022      	beq.n	80238c0 <_DrawBitmap+0x240>
 802387a:	4623      	mov	r3, r4
 802387c:	9c03      	ldr	r4, [sp, #12]
 802387e:	9901      	ldr	r1, [sp, #4]
 8023880:	18f5      	adds	r5, r6, r3
 8023882:	4545      	cmp	r5, r8
 8023884:	bfa8      	it	ge
 8023886:	4645      	movge	r5, r8
 8023888:	fb03 1009 	mla	r0, r3, r9, r1
 802388c:	1aea      	subs	r2, r5, r3
 802388e:	fb07 410a 	mla	r1, r7, sl, r4
 8023892:	fb09 0202 	mla	r2, r9, r2, r0
 8023896:	1b5b      	subs	r3, r3, r5
 8023898:	eb0a 0e01 	add.w	lr, sl, r1
 802389c:	441e      	add	r6, r3
 802389e:	3a01      	subs	r2, #1
 80238a0:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 80238a4:	f7ff f88e 	bl	80229c4 <LCD_FillRect>
 80238a8:	b2f6      	uxtb	r6, r6
 80238aa:	45a8      	cmp	r8, r5
 80238ac:	bf06      	itte	eq
 80238ae:	3701      	addeq	r7, #1
 80238b0:	2300      	moveq	r3, #0
 80238b2:	462b      	movne	r3, r5
 80238b4:	2e00      	cmp	r6, #0
 80238b6:	d1e2      	bne.n	802387e <_DrawBitmap+0x1fe>
 80238b8:	461c      	mov	r4, r3
 80238ba:	e727      	b.n	802370c <_DrawBitmap+0x8c>
 80238bc:	462a      	mov	r2, r5
 80238be:	e745      	b.n	802374c <_DrawBitmap+0xcc>
 80238c0:	4620      	mov	r0, r4
 80238c2:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 80238c6:	9c01      	ldr	r4, [sp, #4]
 80238c8:	46c1      	mov	r9, r8
 80238ca:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80238ce:	1835      	adds	r5, r6, r0
 80238d0:	454d      	cmp	r5, r9
 80238d2:	bfa8      	it	ge
 80238d4:	464d      	movge	r5, r9
 80238d6:	1b41      	subs	r1, r0, r5
 80238d8:	1962      	adds	r2, r4, r5
 80238da:	4420      	add	r0, r4
 80238dc:	440e      	add	r6, r1
 80238de:	3a01      	subs	r2, #1
 80238e0:	eb08 0107 	add.w	r1, r8, r7
 80238e4:	f7ff f81a 	bl	802291c <LCD_DrawHLine>
 80238e8:	b2f6      	uxtb	r6, r6
 80238ea:	45a9      	cmp	r9, r5
 80238ec:	bf06      	itte	eq
 80238ee:	3701      	addeq	r7, #1
 80238f0:	2000      	moveq	r0, #0
 80238f2:	4628      	movne	r0, r5
 80238f4:	2e00      	cmp	r6, #0
 80238f6:	d1ea      	bne.n	80238ce <_DrawBitmap+0x24e>
 80238f8:	46c8      	mov	r8, r9
 80238fa:	4604      	mov	r4, r0
 80238fc:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 8023900:	e704      	b.n	802370c <_DrawBitmap+0x8c>
 8023902:	4620      	mov	r0, r4
 8023904:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 8023908:	9c01      	ldr	r4, [sp, #4]
 802390a:	46c1      	mov	r9, r8
 802390c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8023910:	1835      	adds	r5, r6, r0
 8023912:	454d      	cmp	r5, r9
 8023914:	bfa8      	it	ge
 8023916:	464d      	movge	r5, r9
 8023918:	1b41      	subs	r1, r0, r5
 802391a:	1962      	adds	r2, r4, r5
 802391c:	4420      	add	r0, r4
 802391e:	440e      	add	r6, r1
 8023920:	3a01      	subs	r2, #1
 8023922:	eb08 0107 	add.w	r1, r8, r7
 8023926:	f7fe fff9 	bl	802291c <LCD_DrawHLine>
 802392a:	b2f6      	uxtb	r6, r6
 802392c:	45a9      	cmp	r9, r5
 802392e:	bf06      	itte	eq
 8023930:	3701      	addeq	r7, #1
 8023932:	2000      	moveq	r0, #0
 8023934:	4628      	movne	r0, r5
 8023936:	2e00      	cmp	r6, #0
 8023938:	d1ea      	bne.n	8023910 <_DrawBitmap+0x290>
 802393a:	46c8      	mov	r8, r9
 802393c:	4604      	mov	r4, r0
 802393e:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 8023942:	e6e3      	b.n	802370c <_DrawBitmap+0x8c>
 8023944:	b1fb      	cbz	r3, 8023986 <_DrawBitmap+0x306>
 8023946:	68da      	ldr	r2, [r3, #12]
 8023948:	f8db 3000 	ldr.w	r3, [fp]
 802394c:	4904      	ldr	r1, [pc, #16]	; (8023960 <_DrawBitmap+0x2e0>)
 802394e:	429a      	cmp	r2, r3
 8023950:	d01e      	beq.n	8023990 <_DrawBitmap+0x310>
 8023952:	2700      	movs	r7, #0
 8023954:	463c      	mov	r4, r7
 8023956:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8023958:	e6d3      	b.n	8023702 <_DrawBitmap+0x82>
 802395a:	bf00      	nop
 802395c:	200000e8 	.word	0x200000e8
 8023960:	2002e3b8 	.word	0x2002e3b8
 8023964:	200308b0 	.word	0x200308b0
 8023968:	4b12      	ldr	r3, [pc, #72]	; (80239b4 <_DrawBitmap+0x334>)
 802396a:	9a03      	ldr	r2, [sp, #12]
 802396c:	681b      	ldr	r3, [r3, #0]
 802396e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8023972:	1a9b      	subs	r3, r3, r2
 8023974:	9a05      	ldr	r2, [sp, #20]
 8023976:	3301      	adds	r3, #1
 8023978:	429a      	cmp	r2, r3
 802397a:	bfa8      	it	ge
 802397c:	461a      	movge	r2, r3
 802397e:	9205      	str	r2, [sp, #20]
 8023980:	e6b4      	b.n	80236ec <_DrawBitmap+0x6c>
 8023982:	9307      	str	r3, [sp, #28]
 8023984:	e6ae      	b.n	80236e4 <_DrawBitmap+0x64>
 8023986:	461f      	mov	r7, r3
 8023988:	461c      	mov	r4, r3
 802398a:	e6bf      	b.n	802370c <_DrawBitmap+0x8c>
 802398c:	9507      	str	r5, [sp, #28]
 802398e:	e6a9      	b.n	80236e4 <_DrawBitmap+0x64>
 8023990:	4b08      	ldr	r3, [pc, #32]	; (80239b4 <_DrawBitmap+0x334>)
 8023992:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8023994:	681b      	ldr	r3, [r3, #0]
 8023996:	6857      	ldr	r7, [r2, #4]
 8023998:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 802399c:	9a03      	ldr	r2, [sp, #12]
 802399e:	1a9b      	subs	r3, r3, r2
 80239a0:	42bb      	cmp	r3, r7
 80239a2:	ddd6      	ble.n	8023952 <_DrawBitmap+0x2d2>
 80239a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80239a6:	689b      	ldr	r3, [r3, #8]
 80239a8:	600b      	str	r3, [r1, #0]
 80239aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80239ac:	681c      	ldr	r4, [r3, #0]
 80239ae:	461a      	mov	r2, r3
 80239b0:	e6a7      	b.n	8023702 <_DrawBitmap+0x82>
 80239b2:	bf00      	nop
 80239b4:	200000e8 	.word	0x200000e8

080239b8 <_DrawBitmap_RLE8>:
 80239b8:	b4f0      	push	{r4, r5, r6, r7}
 80239ba:	4c08      	ldr	r4, [pc, #32]	; (80239dc <_DrawBitmap_RLE8+0x24>)
 80239bc:	9f07      	ldr	r7, [sp, #28]
 80239be:	9d06      	ldr	r5, [sp, #24]
 80239c0:	9706      	str	r7, [sp, #24]
 80239c2:	f104 070c 	add.w	r7, r4, #12
 80239c6:	9e04      	ldr	r6, [sp, #16]
 80239c8:	9707      	str	r7, [sp, #28]
 80239ca:	9f05      	ldr	r7, [sp, #20]
 80239cc:	9505      	str	r5, [sp, #20]
 80239ce:	4d04      	ldr	r5, [pc, #16]	; (80239e0 <_DrawBitmap_RLE8+0x28>)
 80239d0:	9704      	str	r7, [sp, #16]
 80239d2:	6026      	str	r6, [r4, #0]
 80239d4:	60a5      	str	r5, [r4, #8]
 80239d6:	bcf0      	pop	{r4, r5, r6, r7}
 80239d8:	f7ff be52 	b.w	8023680 <_DrawBitmap>
 80239dc:	2002e3b8 	.word	0x2002e3b8
 80239e0:	08023671 	.word	0x08023671

080239e4 <_DrawBitmap_RLE8Ex>:
 80239e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80239e8:	4c25      	ldr	r4, [pc, #148]	; (8023a80 <_DrawBitmap_RLE8Ex+0x9c>)
 80239ea:	b087      	sub	sp, #28
 80239ec:	f8d4 b004 	ldr.w	fp, [r4, #4]
 80239f0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 80239f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80239f8:	f1bb 0f00 	cmp.w	fp, #0
 80239fc:	d013      	beq.n	8023a26 <_DrawBitmap_RLE8Ex+0x42>
 80239fe:	4698      	mov	r8, r3
 8023a00:	4617      	mov	r7, r2
 8023a02:	460e      	mov	r6, r1
 8023a04:	4605      	mov	r5, r0
 8023a06:	f7fc f895 	bl	801fb34 <GUI_ALLOC_RequestSize>
 8023a0a:	6862      	ldr	r2, [r4, #4]
 8023a0c:	f8cb 001c 	str.w	r0, [fp, #28]
 8023a10:	69d3      	ldr	r3, [r2, #28]
 8023a12:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8023a16:	d909      	bls.n	8023a2c <_DrawBitmap_RLE8Ex+0x48>
 8023a18:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8023a1c:	61d0      	str	r0, [r2, #28]
 8023a1e:	f7fc f9dd 	bl	801fddc <GUI_ALLOC_AllocZero>
 8023a22:	4683      	mov	fp, r0
 8023a24:	b930      	cbnz	r0, 8023a34 <_DrawBitmap_RLE8Ex+0x50>
 8023a26:	b007      	add	sp, #28
 8023a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a2c:	2b00      	cmp	r3, #0
 8023a2e:	d0fa      	beq.n	8023a26 <_DrawBitmap_RLE8Ex+0x42>
 8023a30:	4618      	mov	r0, r3
 8023a32:	e7f4      	b.n	8023a1e <_DrawBitmap_RLE8Ex+0x3a>
 8023a34:	6861      	ldr	r1, [r4, #4]
 8023a36:	9105      	str	r1, [sp, #20]
 8023a38:	f7fb ffb6 	bl	801f9a8 <GUI_ALLOC_LockH>
 8023a3c:	9905      	ldr	r1, [sp, #20]
 8023a3e:	6863      	ldr	r3, [r4, #4]
 8023a40:	6148      	str	r0, [r1, #20]
 8023a42:	2200      	movs	r2, #0
 8023a44:	6108      	str	r0, [r1, #16]
 8023a46:	68d9      	ldr	r1, [r3, #12]
 8023a48:	619a      	str	r2, [r3, #24]
 8023a4a:	9203      	str	r2, [sp, #12]
 8023a4c:	f8cd a008 	str.w	sl, [sp, #8]
 8023a50:	f8cd 9004 	str.w	r9, [sp, #4]
 8023a54:	689b      	ldr	r3, [r3, #8]
 8023a56:	9105      	str	r1, [sp, #20]
 8023a58:	9300      	str	r3, [sp, #0]
 8023a5a:	463a      	mov	r2, r7
 8023a5c:	4643      	mov	r3, r8
 8023a5e:	4631      	mov	r1, r6
 8023a60:	4628      	mov	r0, r5
 8023a62:	f7ff fe0d 	bl	8023680 <_DrawBitmap>
 8023a66:	6860      	ldr	r0, [r4, #4]
 8023a68:	9905      	ldr	r1, [sp, #20]
 8023a6a:	60c1      	str	r1, [r0, #12]
 8023a6c:	3010      	adds	r0, #16
 8023a6e:	f7fb ffad 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8023a72:	4658      	mov	r0, fp
 8023a74:	b007      	add	sp, #28
 8023a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a7a:	f7fc b937 	b.w	801fcec <GUI_ALLOC_Free>
 8023a7e:	bf00      	nop
 8023a80:	2002e3b8 	.word	0x2002e3b8

08023a84 <_DrawBitmap_RLEAlpha>:
 8023a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a88:	b08b      	sub	sp, #44	; 0x2c
 8023a8a:	4605      	mov	r5, r0
 8023a8c:	2001      	movs	r0, #1
 8023a8e:	460f      	mov	r7, r1
 8023a90:	9503      	str	r5, [sp, #12]
 8023a92:	9104      	str	r1, [sp, #16]
 8023a94:	4616      	mov	r6, r2
 8023a96:	469a      	mov	sl, r3
 8023a98:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8023a9a:	f7fe faab 	bl	8021ff4 <GUI__AllocAlphaBuffer>
 8023a9e:	b110      	cbz	r0, 8023aa6 <_DrawBitmap_RLEAlpha+0x22>
 8023aa0:	b00b      	add	sp, #44	; 0x2c
 8023aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023aa6:	4603      	mov	r3, r0
 8023aa8:	a902      	add	r1, sp, #8
 8023aaa:	aa05      	add	r2, sp, #20
 8023aac:	f7fe fa3e 	bl	8021f2c <GUI__GetAlphaBuffer>
 8023ab0:	2800      	cmp	r0, #0
 8023ab2:	d1f5      	bne.n	8023aa0 <_DrawBitmap_RLEAlpha+0x1c>
 8023ab4:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8023c44 <_DrawBitmap_RLEAlpha+0x1c0>
 8023ab8:	9a03      	ldr	r2, [sp, #12]
 8023aba:	f8db 3000 	ldr.w	r3, [fp]
 8023abe:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8023ac2:	428a      	cmp	r2, r1
 8023ac4:	dcec      	bgt.n	8023aa0 <_DrawBitmap_RLEAlpha+0x1c>
 8023ac6:	9904      	ldr	r1, [sp, #16]
 8023ac8:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8023acc:	4281      	cmp	r1, r0
 8023ace:	dce7      	bgt.n	8023aa0 <_DrawBitmap_RLEAlpha+0x1c>
 8023ad0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8023ad4:	4432      	add	r2, r6
 8023ad6:	4282      	cmp	r2, r0
 8023ad8:	dde2      	ble.n	8023aa0 <_DrawBitmap_RLEAlpha+0x1c>
 8023ada:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8023ade:	4451      	add	r1, sl
 8023ae0:	4291      	cmp	r1, r2
 8023ae2:	dddd      	ble.n	8023aa0 <_DrawBitmap_RLEAlpha+0x1c>
 8023ae4:	7c5b      	ldrb	r3, [r3, #17]
 8023ae6:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8023c48 <_DrawBitmap_RLEAlpha+0x1c4>
 8023aea:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8023aee:	68c3      	ldr	r3, [r0, #12]
 8023af0:	2108      	movs	r1, #8
 8023af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023af4:	4798      	blx	r3
 8023af6:	2817      	cmp	r0, #23
 8023af8:	bf84      	itt	hi
 8023afa:	2320      	movhi	r3, #32
 8023afc:	9308      	strhi	r3, [sp, #32]
 8023afe:	f8db 3000 	ldr.w	r3, [fp]
 8023b02:	bf98      	it	ls
 8023b04:	9008      	strls	r0, [sp, #32]
 8023b06:	7c5b      	ldrb	r3, [r3, #17]
 8023b08:	4a4b      	ldr	r2, [pc, #300]	; (8023c38 <_DrawBitmap_RLEAlpha+0x1b4>)
 8023b0a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8023b0e:	691b      	ldr	r3, [r3, #16]
 8023b10:	9309      	str	r3, [sp, #36]	; 0x24
 8023b12:	1a9b      	subs	r3, r3, r2
 8023b14:	bf18      	it	ne
 8023b16:	2301      	movne	r3, #1
 8023b18:	9307      	str	r3, [sp, #28]
 8023b1a:	f7fc fab5 	bl	8020088 <GUI_GetColor>
 8023b1e:	f8db 2000 	ldr.w	r2, [fp]
 8023b22:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8023b26:	eb05 0906 	add.w	r9, r5, r6
 8023b2a:	429d      	cmp	r5, r3
 8023b2c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8023b30:	db7f      	blt.n	8023c32 <_DrawBitmap_RLEAlpha+0x1ae>
 8023b32:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 8023b36:	429f      	cmp	r7, r3
 8023b38:	db7b      	blt.n	8023c32 <_DrawBitmap_RLEAlpha+0x1ae>
 8023b3a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8023b3e:	4599      	cmp	r9, r3
 8023b40:	dc77      	bgt.n	8023c32 <_DrawBitmap_RLEAlpha+0x1ae>
 8023b42:	eb07 030a 	add.w	r3, r7, sl
 8023b46:	493d      	ldr	r1, [pc, #244]	; (8023c3c <_DrawBitmap_RLEAlpha+0x1b8>)
 8023b48:	f9b2 700e 	ldrsh.w	r7, [r2, #14]
 8023b4c:	4a3c      	ldr	r2, [pc, #240]	; (8023c40 <_DrawBitmap_RLEAlpha+0x1bc>)
 8023b4e:	3b01      	subs	r3, #1
 8023b50:	42bb      	cmp	r3, r7
 8023b52:	bfd4      	ite	le
 8023b54:	460f      	movle	r7, r1
 8023b56:	4617      	movgt	r7, r2
 8023b58:	9903      	ldr	r1, [sp, #12]
 8023b5a:	fb0a f606 	mul.w	r6, sl, r6
 8023b5e:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
 8023b62:	f894 b000 	ldrb.w	fp, [r4]
 8023b66:	f894 a001 	ldrb.w	sl, [r4, #1]
 8023b6a:	f1bb 0f00 	cmp.w	fp, #0
 8023b6e:	d035      	beq.n	8023bdc <_DrawBitmap_RLEAlpha+0x158>
 8023b70:	1ca3      	adds	r3, r4, #2
 8023b72:	f1ca 02ff 	rsb	r2, sl, #255	; 0xff
 8023b76:	ebcb 0606 	rsb	r6, fp, r6
 8023b7a:	9301      	str	r3, [sp, #4]
 8023b7c:	ea48 6402 	orr.w	r4, r8, r2, lsl #24
 8023b80:	ebc1 0309 	rsb	r3, r1, r9
 8023b84:	459b      	cmp	fp, r3
 8023b86:	dd1f      	ble.n	8023bc8 <_DrawBitmap_RLEAlpha+0x144>
 8023b88:	3301      	adds	r3, #1
 8023b8a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023b8e:	9306      	str	r3, [sp, #24]
 8023b90:	d009      	beq.n	8023ba6 <_DrawBitmap_RLEAlpha+0x122>
 8023b92:	9905      	ldr	r1, [sp, #20]
 8023b94:	b11b      	cbz	r3, 8023b9e <_DrawBitmap_RLEAlpha+0x11a>
 8023b96:	3b01      	subs	r3, #1
 8023b98:	f841 4b04 	str.w	r4, [r1], #4
 8023b9c:	d1fb      	bne.n	8023b96 <_DrawBitmap_RLEAlpha+0x112>
 8023b9e:	a802      	add	r0, sp, #8
 8023ba0:	47b8      	blx	r7
 8023ba2:	9903      	ldr	r1, [sp, #12]
 8023ba4:	9b06      	ldr	r3, [sp, #24]
 8023ba6:	4419      	add	r1, r3
 8023ba8:	4589      	cmp	r9, r1
 8023baa:	db07      	blt.n	8023bbc <_DrawBitmap_RLEAlpha+0x138>
 8023bac:	9103      	str	r1, [sp, #12]
 8023bae:	ebbb 0b03 	subs.w	fp, fp, r3
 8023bb2:	d1e5      	bne.n	8023b80 <_DrawBitmap_RLEAlpha+0xfc>
 8023bb4:	9c01      	ldr	r4, [sp, #4]
 8023bb6:	2e00      	cmp	r6, #0
 8023bb8:	d1d3      	bne.n	8023b62 <_DrawBitmap_RLEAlpha+0xde>
 8023bba:	e771      	b.n	8023aa0 <_DrawBitmap_RLEAlpha+0x1c>
 8023bbc:	9904      	ldr	r1, [sp, #16]
 8023bbe:	9503      	str	r5, [sp, #12]
 8023bc0:	3101      	adds	r1, #1
 8023bc2:	9104      	str	r1, [sp, #16]
 8023bc4:	4629      	mov	r1, r5
 8023bc6:	e7f2      	b.n	8023bae <_DrawBitmap_RLEAlpha+0x12a>
 8023bc8:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8023bcc:	f8cd b018 	str.w	fp, [sp, #24]
 8023bd0:	d002      	beq.n	8023bd8 <_DrawBitmap_RLEAlpha+0x154>
 8023bd2:	9905      	ldr	r1, [sp, #20]
 8023bd4:	465b      	mov	r3, fp
 8023bd6:	e7de      	b.n	8023b96 <_DrawBitmap_RLEAlpha+0x112>
 8023bd8:	465b      	mov	r3, fp
 8023bda:	e7e4      	b.n	8023ba6 <_DrawBitmap_RLEAlpha+0x122>
 8023bdc:	3402      	adds	r4, #2
 8023bde:	ebca 0606 	rsb	r6, sl, r6
 8023be2:	ebc1 0109 	rsb	r1, r1, r9
 8023be6:	458a      	cmp	sl, r1
 8023be8:	bfcc      	ite	gt
 8023bea:	3101      	addgt	r1, #1
 8023bec:	4651      	movle	r1, sl
 8023bee:	9106      	str	r1, [sp, #24]
 8023bf0:	9a05      	ldr	r2, [sp, #20]
 8023bf2:	b151      	cbz	r1, 8023c0a <_DrawBitmap_RLEAlpha+0x186>
 8023bf4:	4421      	add	r1, r4
 8023bf6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023bfa:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8023bfe:	ea48 6303 	orr.w	r3, r8, r3, lsl #24
 8023c02:	42a1      	cmp	r1, r4
 8023c04:	f842 3b04 	str.w	r3, [r2], #4
 8023c08:	d1f5      	bne.n	8023bf6 <_DrawBitmap_RLEAlpha+0x172>
 8023c0a:	a802      	add	r0, sp, #8
 8023c0c:	47b8      	blx	r7
 8023c0e:	9a06      	ldr	r2, [sp, #24]
 8023c10:	9903      	ldr	r1, [sp, #12]
 8023c12:	4411      	add	r1, r2
 8023c14:	4589      	cmp	r9, r1
 8023c16:	db06      	blt.n	8023c26 <_DrawBitmap_RLEAlpha+0x1a2>
 8023c18:	9103      	str	r1, [sp, #12]
 8023c1a:	ebba 0a02 	subs.w	sl, sl, r2
 8023c1e:	d1e0      	bne.n	8023be2 <_DrawBitmap_RLEAlpha+0x15e>
 8023c20:	2e00      	cmp	r6, #0
 8023c22:	d19e      	bne.n	8023b62 <_DrawBitmap_RLEAlpha+0xde>
 8023c24:	e73c      	b.n	8023aa0 <_DrawBitmap_RLEAlpha+0x1c>
 8023c26:	9b04      	ldr	r3, [sp, #16]
 8023c28:	9503      	str	r5, [sp, #12]
 8023c2a:	3301      	adds	r3, #1
 8023c2c:	9304      	str	r3, [sp, #16]
 8023c2e:	4629      	mov	r1, r5
 8023c30:	e7f3      	b.n	8023c1a <_DrawBitmap_RLEAlpha+0x196>
 8023c32:	4f03      	ldr	r7, [pc, #12]	; (8023c40 <_DrawBitmap_RLEAlpha+0x1bc>)
 8023c34:	e790      	b.n	8023b58 <_DrawBitmap_RLEAlpha+0xd4>
 8023c36:	bf00      	nop
 8023c38:	0804151c 	.word	0x0804151c
 8023c3c:	08023c4d 	.word	0x08023c4d
 8023c40:	08023cd5 	.word	0x08023cd5
 8023c44:	200000e8 	.word	0x200000e8
 8023c48:	200308b0 	.word	0x200308b0

08023c4c <_Draw>:
 8023c4c:	b570      	push	{r4, r5, r6, lr}
 8023c4e:	4d20      	ldr	r5, [pc, #128]	; (8023cd0 <_Draw+0x84>)
 8023c50:	b088      	sub	sp, #32
 8023c52:	4604      	mov	r4, r0
 8023c54:	ae07      	add	r6, sp, #28
 8023c56:	3004      	adds	r0, #4
 8023c58:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8023c5a:	e88d 0060 	stmia.w	sp, {r5, r6}
 8023c5e:	f7fe f825 	bl	8021cac <GUI__DoAlphaBlending>
 8023c62:	9a07      	ldr	r2, [sp, #28]
 8023c64:	6020      	str	r0, [r4, #0]
 8023c66:	07d3      	lsls	r3, r2, #31
 8023c68:	d510      	bpl.n	8023c8c <_Draw+0x40>
 8023c6a:	6962      	ldr	r2, [r4, #20]
 8023c6c:	b982      	cbnz	r2, 8023c90 <_Draw+0x44>
 8023c6e:	6922      	ldr	r2, [r4, #16]
 8023c70:	4603      	mov	r3, r0
 8023c72:	68a1      	ldr	r1, [r4, #8]
 8023c74:	6860      	ldr	r0, [r4, #4]
 8023c76:	69a5      	ldr	r5, [r4, #24]
 8023c78:	9304      	str	r3, [sp, #16]
 8023c7a:	2400      	movs	r4, #0
 8023c7c:	2301      	movs	r3, #1
 8023c7e:	9502      	str	r5, [sp, #8]
 8023c80:	9405      	str	r4, [sp, #20]
 8023c82:	9403      	str	r4, [sp, #12]
 8023c84:	9301      	str	r3, [sp, #4]
 8023c86:	9300      	str	r3, [sp, #0]
 8023c88:	f7fe ffda 	bl	8022c40 <LCD_DrawBitmap>
 8023c8c:	b008      	add	sp, #32
 8023c8e:	bd70      	pop	{r4, r5, r6, pc}
 8023c90:	69e3      	ldr	r3, [r4, #28]
 8023c92:	69a2      	ldr	r2, [r4, #24]
 8023c94:	6921      	ldr	r1, [r4, #16]
 8023c96:	f008 fdf1 	bl	802c87c <GUI__CompactPixelIndicesEx>
 8023c9a:	b940      	cbnz	r0, 8023cae <_Draw+0x62>
 8023c9c:	69e3      	ldr	r3, [r4, #28]
 8023c9e:	6825      	ldr	r5, [r4, #0]
 8023ca0:	691e      	ldr	r6, [r3, #16]
 8023ca2:	b146      	cbz	r6, 8023cb6 <_Draw+0x6a>
 8023ca4:	2304      	movs	r3, #4
 8023ca6:	6922      	ldr	r2, [r4, #16]
 8023ca8:	4629      	mov	r1, r5
 8023caa:	4628      	mov	r0, r5
 8023cac:	47b0      	blx	r6
 8023cae:	6922      	ldr	r2, [r4, #16]
 8023cb0:	6823      	ldr	r3, [r4, #0]
 8023cb2:	e7de      	b.n	8023c72 <_Draw+0x26>
 8023cb4:	69e3      	ldr	r3, [r4, #28]
 8023cb6:	6828      	ldr	r0, [r5, #0]
 8023cb8:	681b      	ldr	r3, [r3, #0]
 8023cba:	4798      	blx	r3
 8023cbc:	6922      	ldr	r2, [r4, #16]
 8023cbe:	f845 0b04 	str.w	r0, [r5], #4
 8023cc2:	3a01      	subs	r2, #1
 8023cc4:	6122      	str	r2, [r4, #16]
 8023cc6:	2a00      	cmp	r2, #0
 8023cc8:	d1f4      	bne.n	8023cb4 <_Draw+0x68>
 8023cca:	6823      	ldr	r3, [r4, #0]
 8023ccc:	e7d1      	b.n	8023c72 <_Draw+0x26>
 8023cce:	bf00      	nop
 8023cd0:	0801edcd 	.word	0x0801edcd

08023cd4 <_DrawClip>:
 8023cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023cd6:	4b19      	ldr	r3, [pc, #100]	; (8023d3c <_DrawClip+0x68>)
 8023cd8:	6882      	ldr	r2, [r0, #8]
 8023cda:	681b      	ldr	r3, [r3, #0]
 8023cdc:	6845      	ldr	r5, [r0, #4]
 8023cde:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8023ce2:	68c7      	ldr	r7, [r0, #12]
 8023ce4:	6906      	ldr	r6, [r0, #16]
 8023ce6:	428a      	cmp	r2, r1
 8023ce8:	4604      	mov	r4, r0
 8023cea:	db20      	blt.n	8023d2e <_DrawClip+0x5a>
 8023cec:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8023cf0:	428a      	cmp	r2, r1
 8023cf2:	dc1c      	bgt.n	8023d2e <_DrawClip+0x5a>
 8023cf4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023cf8:	4295      	cmp	r5, r2
 8023cfa:	dc18      	bgt.n	8023d2e <_DrawClip+0x5a>
 8023cfc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023d00:	19ab      	adds	r3, r5, r6
 8023d02:	428b      	cmp	r3, r1
 8023d04:	dd13      	ble.n	8023d2e <_DrawClip+0x5a>
 8023d06:	428d      	cmp	r5, r1
 8023d08:	da15      	bge.n	8023d36 <_DrawClip+0x62>
 8023d0a:	1b4b      	subs	r3, r1, r5
 8023d0c:	1af0      	subs	r0, r6, r3
 8023d0e:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
 8023d12:	6061      	str	r1, [r4, #4]
 8023d14:	6120      	str	r0, [r4, #16]
 8023d16:	180b      	adds	r3, r1, r0
 8023d18:	f8c4 e00c 	str.w	lr, [r4, #12]
 8023d1c:	3b01      	subs	r3, #1
 8023d1e:	429a      	cmp	r2, r3
 8023d20:	da02      	bge.n	8023d28 <_DrawClip+0x54>
 8023d22:	1a9b      	subs	r3, r3, r2
 8023d24:	1ac3      	subs	r3, r0, r3
 8023d26:	6123      	str	r3, [r4, #16]
 8023d28:	4620      	mov	r0, r4
 8023d2a:	f7ff ff8f 	bl	8023c4c <_Draw>
 8023d2e:	6065      	str	r5, [r4, #4]
 8023d30:	60e7      	str	r7, [r4, #12]
 8023d32:	6126      	str	r6, [r4, #16]
 8023d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023d36:	4630      	mov	r0, r6
 8023d38:	e7f0      	b.n	8023d1c <_DrawClip+0x48>
 8023d3a:	bf00      	nop
 8023d3c:	200000e8 	.word	0x200000e8

08023d40 <LCD_ReadRectEx>:
 8023d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d44:	b085      	sub	sp, #20
 8023d46:	4681      	mov	r9, r0
 8023d48:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023d4a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8023d4c:	68ed      	ldr	r5, [r5, #12]
 8023d4e:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 8023d52:	696f      	ldr	r7, [r5, #20]
 8023d54:	4616      	mov	r6, r2
 8023d56:	460d      	mov	r5, r1
 8023d58:	469a      	mov	sl, r3
 8023d5a:	f1b8 0f00 	cmp.w	r8, #0
 8023d5e:	d00f      	beq.n	8023d80 <LCD_ReadRectEx+0x40>
 8023d60:	2101      	movs	r1, #1
 8023d62:	a80f      	add	r0, sp, #60	; 0x3c
 8023d64:	47c0      	blx	r8
 8023d66:	4680      	mov	r8, r0
 8023d68:	b150      	cbz	r0, 8023d80 <LCD_ReadRectEx+0x40>
 8023d6a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023d6c:	9401      	str	r4, [sp, #4]
 8023d6e:	f8cd a000 	str.w	sl, [sp]
 8023d72:	4633      	mov	r3, r6
 8023d74:	462a      	mov	r2, r5
 8023d76:	4649      	mov	r1, r9
 8023d78:	47c0      	blx	r8
 8023d7a:	b005      	add	sp, #20
 8023d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d80:	4b6b      	ldr	r3, [pc, #428]	; (8023f30 <LCD_ReadRectEx+0x1f0>)
 8023d82:	681b      	ldr	r3, [r3, #0]
 8023d84:	7c58      	ldrb	r0, [r3, #17]
 8023d86:	f7ff fba7 	bl	80234d8 <GUI_GetBitsPerPixelEx>
 8023d8a:	2808      	cmp	r0, #8
 8023d8c:	dc34      	bgt.n	8023df8 <LCD_ReadRectEx+0xb8>
 8023d8e:	2301      	movs	r3, #1
 8023d90:	4555      	cmp	r5, sl
 8023d92:	dcf2      	bgt.n	8023d7a <LCD_ReadRectEx+0x3a>
 8023d94:	2b02      	cmp	r3, #2
 8023d96:	d00a      	beq.n	8023dae <LCD_ReadRectEx+0x6e>
 8023d98:	2b04      	cmp	r3, #4
 8023d9a:	d01d      	beq.n	8023dd8 <LCD_ReadRectEx+0x98>
 8023d9c:	2b01      	cmp	r3, #1
 8023d9e:	d030      	beq.n	8023e02 <LCD_ReadRectEx+0xc2>
 8023da0:	3501      	adds	r5, #1
 8023da2:	45aa      	cmp	sl, r5
 8023da4:	daf6      	bge.n	8023d94 <LCD_ReadRectEx+0x54>
 8023da6:	e7e8      	b.n	8023d7a <LCD_ReadRectEx+0x3a>
 8023da8:	3501      	adds	r5, #1
 8023daa:	4555      	cmp	r5, sl
 8023dac:	dce5      	bgt.n	8023d7a <LCD_ReadRectEx+0x3a>
 8023dae:	45b1      	cmp	r9, r6
 8023db0:	bfd8      	it	le
 8023db2:	46c8      	movle	r8, r9
 8023db4:	dcf8      	bgt.n	8023da8 <LCD_ReadRectEx+0x68>
 8023db6:	4641      	mov	r1, r8
 8023db8:	462a      	mov	r2, r5
 8023dba:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023dbc:	47b8      	blx	r7
 8023dbe:	f108 0801 	add.w	r8, r8, #1
 8023dc2:	4546      	cmp	r6, r8
 8023dc4:	f824 0b02 	strh.w	r0, [r4], #2
 8023dc8:	daf5      	bge.n	8023db6 <LCD_ReadRectEx+0x76>
 8023dca:	3501      	adds	r5, #1
 8023dcc:	45aa      	cmp	sl, r5
 8023dce:	daee      	bge.n	8023dae <LCD_ReadRectEx+0x6e>
 8023dd0:	e7d3      	b.n	8023d7a <LCD_ReadRectEx+0x3a>
 8023dd2:	3501      	adds	r5, #1
 8023dd4:	45aa      	cmp	sl, r5
 8023dd6:	dbd0      	blt.n	8023d7a <LCD_ReadRectEx+0x3a>
 8023dd8:	45b1      	cmp	r9, r6
 8023dda:	bfd8      	it	le
 8023ddc:	46c8      	movle	r8, r9
 8023dde:	f300 80a1 	bgt.w	8023f24 <LCD_ReadRectEx+0x1e4>
 8023de2:	4641      	mov	r1, r8
 8023de4:	462a      	mov	r2, r5
 8023de6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023de8:	47b8      	blx	r7
 8023dea:	f108 0801 	add.w	r8, r8, #1
 8023dee:	4546      	cmp	r6, r8
 8023df0:	f844 0b04 	str.w	r0, [r4], #4
 8023df4:	daf5      	bge.n	8023de2 <LCD_ReadRectEx+0xa2>
 8023df6:	e7ec      	b.n	8023dd2 <LCD_ReadRectEx+0x92>
 8023df8:	2811      	cmp	r0, #17
 8023dfa:	bfb4      	ite	lt
 8023dfc:	2302      	movlt	r3, #2
 8023dfe:	2304      	movge	r3, #4
 8023e00:	e7c6      	b.n	8023d90 <LCD_ReadRectEx+0x50>
 8023e02:	1e43      	subs	r3, r0, #1
 8023e04:	9303      	str	r3, [sp, #12]
 8023e06:	f04f 0800 	mov.w	r8, #0
 8023e0a:	f8cd a008 	str.w	sl, [sp, #8]
 8023e0e:	9b03      	ldr	r3, [sp, #12]
 8023e10:	2b07      	cmp	r3, #7
 8023e12:	f200 8081 	bhi.w	8023f18 <LCD_ReadRectEx+0x1d8>
 8023e16:	e8df f003 	tbb	[pc, r3]
 8023e1a:	5833      	.short	0x5833
 8023e1c:	04041717 	.word	0x04041717
 8023e20:	0404      	.short	0x0404
 8023e22:	45b1      	cmp	r9, r6
 8023e24:	bfd8      	it	le
 8023e26:	46cb      	movle	fp, r9
 8023e28:	dc09      	bgt.n	8023e3e <LCD_ReadRectEx+0xfe>
 8023e2a:	4659      	mov	r1, fp
 8023e2c:	462a      	mov	r2, r5
 8023e2e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023e30:	47b8      	blx	r7
 8023e32:	f10b 0b01 	add.w	fp, fp, #1
 8023e36:	455e      	cmp	r6, fp
 8023e38:	f804 0b01 	strb.w	r0, [r4], #1
 8023e3c:	daf5      	bge.n	8023e2a <LCD_ReadRectEx+0xea>
 8023e3e:	9b02      	ldr	r3, [sp, #8]
 8023e40:	3501      	adds	r5, #1
 8023e42:	42ab      	cmp	r3, r5
 8023e44:	dae3      	bge.n	8023e0e <LCD_ReadRectEx+0xce>
 8023e46:	e798      	b.n	8023d7a <LCD_ReadRectEx+0x3a>
 8023e48:	45b1      	cmp	r9, r6
 8023e4a:	dcf8      	bgt.n	8023e3e <LCD_ReadRectEx+0xfe>
 8023e4c:	46ca      	mov	sl, r9
 8023e4e:	f04f 0b0f 	mov.w	fp, #15
 8023e52:	4651      	mov	r1, sl
 8023e54:	462a      	mov	r2, r5
 8023e56:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023e58:	47b8      	blx	r7
 8023e5a:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8023e5e:	7821      	ldrb	r1, [r4, #0]
 8023e60:	f1c3 0204 	rsb	r2, r3, #4
 8023e64:	fa0b f303 	lsl.w	r3, fp, r3
 8023e68:	4090      	lsls	r0, r2
 8023e6a:	400b      	ands	r3, r1
 8023e6c:	f10a 0a01 	add.w	sl, sl, #1
 8023e70:	4303      	orrs	r3, r0
 8023e72:	4556      	cmp	r6, sl
 8023e74:	7023      	strb	r3, [r4, #0]
 8023e76:	4444      	add	r4, r8
 8023e78:	f088 0801 	eor.w	r8, r8, #1
 8023e7c:	dae9      	bge.n	8023e52 <LCD_ReadRectEx+0x112>
 8023e7e:	e7de      	b.n	8023e3e <LCD_ReadRectEx+0xfe>
 8023e80:	f8dd b008 	ldr.w	fp, [sp, #8]
 8023e84:	45b1      	cmp	r9, r6
 8023e86:	dcda      	bgt.n	8023e3e <LCD_ReadRectEx+0xfe>
 8023e88:	46ca      	mov	sl, r9
 8023e8a:	4651      	mov	r1, sl
 8023e8c:	462a      	mov	r2, r5
 8023e8e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023e90:	47b8      	blx	r7
 8023e92:	7821      	ldrb	r1, [r4, #0]
 8023e94:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8023e98:	f1c8 0307 	rsb	r3, r8, #7
 8023e9c:	fa42 f208 	asr.w	r2, r2, r8
 8023ea0:	4098      	lsls	r0, r3
 8023ea2:	f10a 0a01 	add.w	sl, sl, #1
 8023ea6:	ea01 0302 	and.w	r3, r1, r2
 8023eaa:	f108 0201 	add.w	r2, r8, #1
 8023eae:	4318      	orrs	r0, r3
 8023eb0:	f022 0807 	bic.w	r8, r2, #7
 8023eb4:	4556      	cmp	r6, sl
 8023eb6:	7020      	strb	r0, [r4, #0]
 8023eb8:	fa42 f808 	asr.w	r8, r2, r8
 8023ebc:	eb04 04e2 	add.w	r4, r4, r2, asr #3
 8023ec0:	dae3      	bge.n	8023e8a <LCD_ReadRectEx+0x14a>
 8023ec2:	3501      	adds	r5, #1
 8023ec4:	45ab      	cmp	fp, r5
 8023ec6:	dadd      	bge.n	8023e84 <LCD_ReadRectEx+0x144>
 8023ec8:	e757      	b.n	8023d7a <LCD_ReadRectEx+0x3a>
 8023eca:	f64f 7b3f 	movw	fp, #65343	; 0xff3f
 8023ece:	45b1      	cmp	r9, r6
 8023ed0:	dcb5      	bgt.n	8023e3e <LCD_ReadRectEx+0xfe>
 8023ed2:	46ca      	mov	sl, r9
 8023ed4:	4651      	mov	r1, sl
 8023ed6:	462a      	mov	r2, r5
 8023ed8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023eda:	47b8      	blx	r7
 8023edc:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8023ee0:	f894 e000 	ldrb.w	lr, [r4]
 8023ee4:	f1c3 0206 	rsb	r2, r3, #6
 8023ee8:	fa4b f303 	asr.w	r3, fp, r3
 8023eec:	f108 0101 	add.w	r1, r8, #1
 8023ef0:	4090      	lsls	r0, r2
 8023ef2:	ea0e 0303 	and.w	r3, lr, r3
 8023ef6:	f10a 0a01 	add.w	sl, sl, #1
 8023efa:	4303      	orrs	r3, r0
 8023efc:	f021 0803 	bic.w	r8, r1, #3
 8023f00:	4556      	cmp	r6, sl
 8023f02:	7023      	strb	r3, [r4, #0]
 8023f04:	fa41 f808 	asr.w	r8, r1, r8
 8023f08:	eb04 04a1 	add.w	r4, r4, r1, asr #2
 8023f0c:	dae2      	bge.n	8023ed4 <LCD_ReadRectEx+0x194>
 8023f0e:	9b02      	ldr	r3, [sp, #8]
 8023f10:	3501      	adds	r5, #1
 8023f12:	42ab      	cmp	r3, r5
 8023f14:	dadb      	bge.n	8023ece <LCD_ReadRectEx+0x18e>
 8023f16:	e730      	b.n	8023d7a <LCD_ReadRectEx+0x3a>
 8023f18:	9b02      	ldr	r3, [sp, #8]
 8023f1a:	3501      	adds	r5, #1
 8023f1c:	429d      	cmp	r5, r3
 8023f1e:	f77f af76 	ble.w	8023e0e <LCD_ReadRectEx+0xce>
 8023f22:	e72a      	b.n	8023d7a <LCD_ReadRectEx+0x3a>
 8023f24:	3501      	adds	r5, #1
 8023f26:	4555      	cmp	r5, sl
 8023f28:	f77f af56 	ble.w	8023dd8 <LCD_ReadRectEx+0x98>
 8023f2c:	e725      	b.n	8023d7a <LCD_ReadRectEx+0x3a>
 8023f2e:	bf00      	nop
 8023f30:	200000e8 	.word	0x200000e8

08023f34 <GUI_ReadRectEx>:
 8023f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023f36:	4c16      	ldr	r4, [pc, #88]	; (8023f90 <GUI_ReadRectEx+0x5c>)
 8023f38:	9e05      	ldr	r6, [sp, #20]
 8023f3a:	6825      	ldr	r5, [r4, #0]
 8023f3c:	9c06      	ldr	r4, [sp, #24]
 8023f3e:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8023f42:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8023f46:	4570      	cmp	r0, lr
 8023f48:	bfb8      	it	lt
 8023f4a:	4670      	movlt	r0, lr
 8023f4c:	42ba      	cmp	r2, r7
 8023f4e:	bfa8      	it	ge
 8023f50:	463a      	movge	r2, r7
 8023f52:	4290      	cmp	r0, r2
 8023f54:	dc1a      	bgt.n	8023f8c <GUI_ReadRectEx+0x58>
 8023f56:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8023f5a:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 8023f5e:	42b9      	cmp	r1, r7
 8023f60:	bfb8      	it	lt
 8023f62:	4639      	movlt	r1, r7
 8023f64:	42ab      	cmp	r3, r5
 8023f66:	bfa8      	it	ge
 8023f68:	462b      	movge	r3, r5
 8023f6a:	428b      	cmp	r3, r1
 8023f6c:	da03      	bge.n	8023f76 <GUI_ReadRectEx+0x42>
 8023f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023f70:	6825      	ldr	r5, [r4, #0]
 8023f72:	b12d      	cbz	r5, 8023f80 <GUI_ReadRectEx+0x4c>
 8023f74:	462c      	mov	r4, r5
 8023f76:	68e5      	ldr	r5, [r4, #12]
 8023f78:	682d      	ldr	r5, [r5, #0]
 8023f7a:	f035 0504 	bics.w	r5, r5, #4
 8023f7e:	d1f7      	bne.n	8023f70 <GUI_ReadRectEx+0x3c>
 8023f80:	9406      	str	r4, [sp, #24]
 8023f82:	9605      	str	r6, [sp, #20]
 8023f84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8023f88:	f7ff beda 	b.w	8023d40 <LCD_ReadRectEx>
 8023f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023f8e:	bf00      	nop
 8023f90:	200000e8 	.word	0x200000e8

08023f94 <LCD_SelectLCD>:
 8023f94:	b510      	push	{r4, lr}
 8023f96:	4c0e      	ldr	r4, [pc, #56]	; (8023fd0 <LCD_SelectLCD+0x3c>)
 8023f98:	4b0e      	ldr	r3, [pc, #56]	; (8023fd4 <LCD_SelectLCD+0x40>)
 8023f9a:	6822      	ldr	r2, [r4, #0]
 8023f9c:	7c51      	ldrb	r1, [r2, #17]
 8023f9e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8023fa2:	b138      	cbz	r0, 8023fb4 <LCD_SelectLCD+0x20>
 8023fa4:	68c3      	ldr	r3, [r0, #12]
 8023fa6:	b113      	cbz	r3, 8023fae <LCD_SelectLCD+0x1a>
 8023fa8:	681b      	ldr	r3, [r3, #0]
 8023faa:	2b04      	cmp	r3, #4
 8023fac:	d00b      	beq.n	8023fc6 <LCD_SelectLCD+0x32>
 8023fae:	6800      	ldr	r0, [r0, #0]
 8023fb0:	2800      	cmp	r0, #0
 8023fb2:	d1f7      	bne.n	8023fa4 <LCD_SelectLCD+0x10>
 8023fb4:	2100      	movs	r1, #0
 8023fb6:	f102 0308 	add.w	r3, r2, #8
 8023fba:	6611      	str	r1, [r2, #96]	; 0x60
 8023fbc:	6153      	str	r3, [r2, #20]
 8023fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023fc2:	f7fe bfc3 	b.w	8022f4c <LCD_SetClipRectMax>
 8023fc6:	f7fc fc2b 	bl	8020820 <GUI_DEVICE_Unlink>
 8023fca:	6822      	ldr	r2, [r4, #0]
 8023fcc:	e7f2      	b.n	8023fb4 <LCD_SelectLCD+0x20>
 8023fce:	bf00      	nop
 8023fd0:	200000e8 	.word	0x200000e8
 8023fd4:	200308b0 	.word	0x200308b0

08023fd8 <LCD_GetPosEx>:
 8023fd8:	b530      	push	{r4, r5, lr}
 8023fda:	b083      	sub	sp, #12
 8023fdc:	460c      	mov	r4, r1
 8023fde:	4615      	mov	r5, r2
 8023fe0:	f7fc fbde 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8023fe4:	9001      	str	r0, [sp, #4]
 8023fe6:	b170      	cbz	r0, 8024006 <LCD_GetPosEx+0x2e>
 8023fe8:	68c3      	ldr	r3, [r0, #12]
 8023fea:	2104      	movs	r1, #4
 8023fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023fee:	eb0d 0001 	add.w	r0, sp, r1
 8023ff2:	4798      	blx	r3
 8023ff4:	4603      	mov	r3, r0
 8023ff6:	b130      	cbz	r0, 8024006 <LCD_GetPosEx+0x2e>
 8023ff8:	9801      	ldr	r0, [sp, #4]
 8023ffa:	462a      	mov	r2, r5
 8023ffc:	4621      	mov	r1, r4
 8023ffe:	4798      	blx	r3
 8024000:	2000      	movs	r0, #0
 8024002:	b003      	add	sp, #12
 8024004:	bd30      	pop	{r4, r5, pc}
 8024006:	2001      	movs	r0, #1
 8024008:	b003      	add	sp, #12
 802400a:	bd30      	pop	{r4, r5, pc}

0802400c <LCD_SetDevFunc>:
 802400c:	b530      	push	{r4, r5, lr}
 802400e:	b083      	sub	sp, #12
 8024010:	460c      	mov	r4, r1
 8024012:	4615      	mov	r5, r2
 8024014:	f7fc fbc4 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8024018:	9001      	str	r0, [sp, #4]
 802401a:	b168      	cbz	r0, 8024038 <LCD_SetDevFunc+0x2c>
 802401c:	68c3      	ldr	r3, [r0, #12]
 802401e:	2116      	movs	r1, #22
 8024020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024022:	a801      	add	r0, sp, #4
 8024024:	4798      	blx	r3
 8024026:	4603      	mov	r3, r0
 8024028:	b130      	cbz	r0, 8024038 <LCD_SetDevFunc+0x2c>
 802402a:	9801      	ldr	r0, [sp, #4]
 802402c:	462a      	mov	r2, r5
 802402e:	4621      	mov	r1, r4
 8024030:	4798      	blx	r3
 8024032:	2000      	movs	r0, #0
 8024034:	b003      	add	sp, #12
 8024036:	bd30      	pop	{r4, r5, pc}
 8024038:	2001      	movs	r0, #1
 802403a:	b003      	add	sp, #12
 802403c:	bd30      	pop	{r4, r5, pc}
 802403e:	bf00      	nop

08024040 <LCD_SetLUTEntryEx>:
 8024040:	b530      	push	{r4, r5, lr}
 8024042:	b083      	sub	sp, #12
 8024044:	460c      	mov	r4, r1
 8024046:	4615      	mov	r5, r2
 8024048:	f7fc fbaa 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 802404c:	9001      	str	r0, [sp, #4]
 802404e:	b168      	cbz	r0, 802406c <LCD_SetLUTEntryEx+0x2c>
 8024050:	68c3      	ldr	r3, [r0, #12]
 8024052:	2110      	movs	r1, #16
 8024054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024056:	a801      	add	r0, sp, #4
 8024058:	4798      	blx	r3
 802405a:	4603      	mov	r3, r0
 802405c:	b130      	cbz	r0, 802406c <LCD_SetLUTEntryEx+0x2c>
 802405e:	9801      	ldr	r0, [sp, #4]
 8024060:	462a      	mov	r2, r5
 8024062:	4621      	mov	r1, r4
 8024064:	4798      	blx	r3
 8024066:	2000      	movs	r0, #0
 8024068:	b003      	add	sp, #12
 802406a:	bd30      	pop	{r4, r5, pc}
 802406c:	2001      	movs	r0, #1
 802406e:	b003      	add	sp, #12
 8024070:	bd30      	pop	{r4, r5, pc}
 8024072:	bf00      	nop

08024074 <LCD_SetPosEx>:
 8024074:	b530      	push	{r4, r5, lr}
 8024076:	b083      	sub	sp, #12
 8024078:	460c      	mov	r4, r1
 802407a:	4615      	mov	r5, r2
 802407c:	f7fc fb90 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8024080:	9001      	str	r0, [sp, #4]
 8024082:	b168      	cbz	r0, 80240a0 <LCD_SetPosEx+0x2c>
 8024084:	68c3      	ldr	r3, [r0, #12]
 8024086:	2103      	movs	r1, #3
 8024088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802408a:	a801      	add	r0, sp, #4
 802408c:	4798      	blx	r3
 802408e:	4603      	mov	r3, r0
 8024090:	b130      	cbz	r0, 80240a0 <LCD_SetPosEx+0x2c>
 8024092:	9801      	ldr	r0, [sp, #4]
 8024094:	462a      	mov	r2, r5
 8024096:	4621      	mov	r1, r4
 8024098:	4798      	blx	r3
 802409a:	2000      	movs	r0, #0
 802409c:	b003      	add	sp, #12
 802409e:	bd30      	pop	{r4, r5, pc}
 80240a0:	2001      	movs	r0, #1
 80240a2:	b003      	add	sp, #12
 80240a4:	bd30      	pop	{r4, r5, pc}
 80240a6:	bf00      	nop

080240a8 <LCD_SetSizeEx>:
 80240a8:	b530      	push	{r4, r5, lr}
 80240aa:	b083      	sub	sp, #12
 80240ac:	460c      	mov	r4, r1
 80240ae:	4615      	mov	r5, r2
 80240b0:	f7fc fb76 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 80240b4:	9001      	str	r0, [sp, #4]
 80240b6:	b168      	cbz	r0, 80240d4 <LCD_SetSizeEx+0x2c>
 80240b8:	68c3      	ldr	r3, [r0, #12]
 80240ba:	210b      	movs	r1, #11
 80240bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80240be:	a801      	add	r0, sp, #4
 80240c0:	4798      	blx	r3
 80240c2:	4603      	mov	r3, r0
 80240c4:	b130      	cbz	r0, 80240d4 <LCD_SetSizeEx+0x2c>
 80240c6:	9801      	ldr	r0, [sp, #4]
 80240c8:	462a      	mov	r2, r5
 80240ca:	4621      	mov	r1, r4
 80240cc:	4798      	blx	r3
 80240ce:	2000      	movs	r0, #0
 80240d0:	b003      	add	sp, #12
 80240d2:	bd30      	pop	{r4, r5, pc}
 80240d4:	2001      	movs	r0, #1
 80240d6:	b003      	add	sp, #12
 80240d8:	bd30      	pop	{r4, r5, pc}
 80240da:	bf00      	nop

080240dc <LCD_SetVRAMAddrEx>:
 80240dc:	b510      	push	{r4, lr}
 80240de:	b082      	sub	sp, #8
 80240e0:	460c      	mov	r4, r1
 80240e2:	f7fc fb5d 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 80240e6:	9001      	str	r0, [sp, #4]
 80240e8:	b160      	cbz	r0, 8024104 <LCD_SetVRAMAddrEx+0x28>
 80240ea:	68c3      	ldr	r3, [r0, #12]
 80240ec:	2109      	movs	r1, #9
 80240ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80240f0:	a801      	add	r0, sp, #4
 80240f2:	4798      	blx	r3
 80240f4:	4603      	mov	r3, r0
 80240f6:	b128      	cbz	r0, 8024104 <LCD_SetVRAMAddrEx+0x28>
 80240f8:	9801      	ldr	r0, [sp, #4]
 80240fa:	4621      	mov	r1, r4
 80240fc:	4798      	blx	r3
 80240fe:	2000      	movs	r0, #0
 8024100:	b002      	add	sp, #8
 8024102:	bd10      	pop	{r4, pc}
 8024104:	2001      	movs	r0, #1
 8024106:	b002      	add	sp, #8
 8024108:	bd10      	pop	{r4, pc}
 802410a:	bf00      	nop

0802410c <LCD_SetVSizeEx>:
 802410c:	b530      	push	{r4, r5, lr}
 802410e:	b083      	sub	sp, #12
 8024110:	460c      	mov	r4, r1
 8024112:	4615      	mov	r5, r2
 8024114:	f7fc fb44 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8024118:	9001      	str	r0, [sp, #4]
 802411a:	b168      	cbz	r0, 8024138 <LCD_SetVSizeEx+0x2c>
 802411c:	68c3      	ldr	r3, [r0, #12]
 802411e:	210a      	movs	r1, #10
 8024120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024122:	a801      	add	r0, sp, #4
 8024124:	4798      	blx	r3
 8024126:	4603      	mov	r3, r0
 8024128:	b130      	cbz	r0, 8024138 <LCD_SetVSizeEx+0x2c>
 802412a:	9801      	ldr	r0, [sp, #4]
 802412c:	462a      	mov	r2, r5
 802412e:	4621      	mov	r1, r4
 8024130:	4798      	blx	r3
 8024132:	2000      	movs	r0, #0
 8024134:	b003      	add	sp, #12
 8024136:	bd30      	pop	{r4, r5, pc}
 8024138:	2001      	movs	r0, #1
 802413a:	b003      	add	sp, #12
 802413c:	bd30      	pop	{r4, r5, pc}
 802413e:	bf00      	nop

08024140 <LCD_UpdateColorIndices>:
 8024140:	b510      	push	{r4, lr}
 8024142:	4c07      	ldr	r4, [pc, #28]	; (8024160 <LCD_UpdateColorIndices+0x20>)
 8024144:	6823      	ldr	r3, [r4, #0]
 8024146:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8024148:	f7fe ff96 	bl	8023078 <LCD_Color2Index>
 802414c:	f7fe ffb0 	bl	80230b0 <LCD_SetColorIndex>
 8024150:	6823      	ldr	r3, [r4, #0]
 8024152:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8024154:	f7fe ff90 	bl	8023078 <LCD_Color2Index>
 8024158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802415c:	f7fe bfb4 	b.w	80230c8 <LCD_SetBkColorIndex>
 8024160:	200000e8 	.word	0x200000e8

08024164 <_GetRect>:
 8024164:	6883      	ldr	r3, [r0, #8]
 8024166:	699a      	ldr	r2, [r3, #24]
 8024168:	69db      	ldr	r3, [r3, #28]
 802416a:	2000      	movs	r0, #0
 802416c:	3a01      	subs	r2, #1
 802416e:	3b01      	subs	r3, #1
 8024170:	808a      	strh	r2, [r1, #4]
 8024172:	80cb      	strh	r3, [r1, #6]
 8024174:	8008      	strh	r0, [r1, #0]
 8024176:	8048      	strh	r0, [r1, #2]
 8024178:	4770      	bx	lr
 802417a:	bf00      	nop

0802417c <_SetPixelIndex>:
 802417c:	b410      	push	{r4}
 802417e:	6884      	ldr	r4, [r0, #8]
 8024180:	6a20      	ldr	r0, [r4, #32]
 8024182:	6824      	ldr	r4, [r4, #0]
 8024184:	fb00 1202 	mla	r2, r0, r2, r1
 8024188:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
 802418c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024190:	4770      	bx	lr
 8024192:	bf00      	nop

08024194 <_GetPixelIndex>:
 8024194:	6880      	ldr	r0, [r0, #8]
 8024196:	6a03      	ldr	r3, [r0, #32]
 8024198:	6800      	ldr	r0, [r0, #0]
 802419a:	fb03 1202 	mla	r2, r3, r2, r1
 802419e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80241a2:	4770      	bx	lr

080241a4 <_XorPixel>:
 80241a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80241a6:	460f      	mov	r7, r1
 80241a8:	6881      	ldr	r1, [r0, #8]
 80241aa:	6904      	ldr	r4, [r0, #16]
 80241ac:	6a0b      	ldr	r3, [r1, #32]
 80241ae:	4606      	mov	r6, r0
 80241b0:	fb03 7302 	mla	r3, r3, r2, r7
 80241b4:	6808      	ldr	r0, [r1, #0]
 80241b6:	68a1      	ldr	r1, [r4, #8]
 80241b8:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 80241bc:	4614      	mov	r4, r2
 80241be:	4788      	blx	r1
 80241c0:	68b3      	ldr	r3, [r6, #8]
 80241c2:	6a19      	ldr	r1, [r3, #32]
 80241c4:	681b      	ldr	r3, [r3, #0]
 80241c6:	fb01 7404 	mla	r4, r1, r4, r7
 80241ca:	4068      	eors	r0, r5
 80241cc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80241d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80241d2:	bf00      	nop

080241d4 <_GetDevProp>:
 80241d4:	3901      	subs	r1, #1
 80241d6:	6883      	ldr	r3, [r0, #8]
 80241d8:	290d      	cmp	r1, #13
 80241da:	d816      	bhi.n	802420a <_GetDevProp+0x36>
 80241dc:	e8df f001 	tbb	[pc, r1]
 80241e0:	0d13110f 	.word	0x0d13110f
 80241e4:	0b151515 	.word	0x0b151515
 80241e8:	07090907 	.word	0x07090907
 80241ec:	0707      	.short	0x0707
 80241ee:	2000      	movs	r0, #0
 80241f0:	4770      	bx	lr
 80241f2:	2001      	movs	r0, #1
 80241f4:	4770      	bx	lr
 80241f6:	2020      	movs	r0, #32
 80241f8:	4770      	bx	lr
 80241fa:	69d8      	ldr	r0, [r3, #28]
 80241fc:	4770      	bx	lr
 80241fe:	6918      	ldr	r0, [r3, #16]
 8024200:	4770      	bx	lr
 8024202:	6958      	ldr	r0, [r3, #20]
 8024204:	4770      	bx	lr
 8024206:	6998      	ldr	r0, [r3, #24]
 8024208:	4770      	bx	lr
 802420a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802420e:	4770      	bx	lr

08024210 <_GetDevData>:
 8024210:	2901      	cmp	r1, #1
 8024212:	4802      	ldr	r0, [pc, #8]	; (802421c <_GetDevData+0xc>)
 8024214:	bf18      	it	ne
 8024216:	2000      	movne	r0, #0
 8024218:	4770      	bx	lr
 802421a:	bf00      	nop
 802421c:	0804145c 	.word	0x0804145c

08024220 <_ReadRect>:
 8024220:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024224:	6886      	ldr	r6, [r0, #8]
 8024226:	9f08      	ldr	r7, [sp, #32]
 8024228:	6a30      	ldr	r0, [r6, #32]
 802422a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802422e:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000
 8024232:	1a5b      	subs	r3, r3, r1
 8024234:	3c01      	subs	r4, #1
 8024236:	fb00 1002 	mla	r0, r0, r2, r1
 802423a:	1ae4      	subs	r4, r4, r3
 802423c:	f103 0801 	add.w	r8, r3, #1
 8024240:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8024244:	ebc7 0580 	rsb	r5, r7, r0, lsl #2
 8024248:	ea4f 0988 	mov.w	r9, r8, lsl #2
 802424c:	4639      	mov	r1, r7
 802424e:	4643      	mov	r3, r8
 8024250:	6830      	ldr	r0, [r6, #0]
 8024252:	186c      	adds	r4, r5, r1
 8024254:	3b01      	subs	r3, #1
 8024256:	5820      	ldr	r0, [r4, r0]
 8024258:	f841 0b04 	str.w	r0, [r1], #4
 802425c:	d1f8      	bne.n	8024250 <_ReadRect+0x30>
 802425e:	3201      	adds	r2, #1
 8024260:	1e53      	subs	r3, r2, #1
 8024262:	459e      	cmp	lr, r3
 8024264:	444f      	add	r7, r9
 8024266:	4465      	add	r5, ip
 8024268:	dcf0      	bgt.n	802424c <_ReadRect+0x2c>
 802426a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802426e:	bf00      	nop

08024270 <_GetDevFunc>:
 8024270:	3901      	subs	r1, #1
 8024272:	2928      	cmp	r1, #40	; 0x28
 8024274:	d84a      	bhi.n	802430c <_GetDevFunc+0x9c>
 8024276:	e8df f001 	tbb	[pc, r1]
 802427a:	1d1f      	.short	0x1d1f
 802427c:	1749191b 	.word	0x1749191b
 8024280:	47154949 	.word	0x47154949
 8024284:	41494345 	.word	0x41494345
 8024288:	4949493f 	.word	0x4949493f
 802428c:	37393b3d 	.word	0x37393b3d
 8024290:	49334949 	.word	0x49334949
 8024294:	49494949 	.word	0x49494949
 8024298:	2b2d2f49 	.word	0x2b2d2f49
 802429c:	49234927 	.word	0x49234927
 80242a0:	4949      	.short	0x4949
 80242a2:	21          	.byte	0x21
 80242a3:	00          	.byte	0x00
 80242a4:	481a      	ldr	r0, [pc, #104]	; (8024310 <_GetDevFunc+0xa0>)
 80242a6:	4770      	bx	lr
 80242a8:	481a      	ldr	r0, [pc, #104]	; (8024314 <_GetDevFunc+0xa4>)
 80242aa:	4770      	bx	lr
 80242ac:	481a      	ldr	r0, [pc, #104]	; (8024318 <_GetDevFunc+0xa8>)
 80242ae:	4770      	bx	lr
 80242b0:	481a      	ldr	r0, [pc, #104]	; (802431c <_GetDevFunc+0xac>)
 80242b2:	4770      	bx	lr
 80242b4:	481a      	ldr	r0, [pc, #104]	; (8024320 <_GetDevFunc+0xb0>)
 80242b6:	4770      	bx	lr
 80242b8:	481a      	ldr	r0, [pc, #104]	; (8024324 <_GetDevFunc+0xb4>)
 80242ba:	4770      	bx	lr
 80242bc:	481a      	ldr	r0, [pc, #104]	; (8024328 <_GetDevFunc+0xb8>)
 80242be:	4770      	bx	lr
 80242c0:	6803      	ldr	r3, [r0, #0]
 80242c2:	689b      	ldr	r3, [r3, #8]
 80242c4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80242c6:	4770      	bx	lr
 80242c8:	6803      	ldr	r3, [r0, #0]
 80242ca:	689b      	ldr	r3, [r3, #8]
 80242cc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80242ce:	4770      	bx	lr
 80242d0:	4816      	ldr	r0, [pc, #88]	; (802432c <_GetDevFunc+0xbc>)
 80242d2:	4770      	bx	lr
 80242d4:	4816      	ldr	r0, [pc, #88]	; (8024330 <_GetDevFunc+0xc0>)
 80242d6:	4770      	bx	lr
 80242d8:	6803      	ldr	r3, [r0, #0]
 80242da:	689b      	ldr	r3, [r3, #8]
 80242dc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80242de:	4770      	bx	lr
 80242e0:	6803      	ldr	r3, [r0, #0]
 80242e2:	689b      	ldr	r3, [r3, #8]
 80242e4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80242e6:	4770      	bx	lr
 80242e8:	4812      	ldr	r0, [pc, #72]	; (8024334 <_GetDevFunc+0xc4>)
 80242ea:	4770      	bx	lr
 80242ec:	4812      	ldr	r0, [pc, #72]	; (8024338 <_GetDevFunc+0xc8>)
 80242ee:	4770      	bx	lr
 80242f0:	4812      	ldr	r0, [pc, #72]	; (802433c <_GetDevFunc+0xcc>)
 80242f2:	4770      	bx	lr
 80242f4:	4812      	ldr	r0, [pc, #72]	; (8024340 <_GetDevFunc+0xd0>)
 80242f6:	4770      	bx	lr
 80242f8:	4812      	ldr	r0, [pc, #72]	; (8024344 <_GetDevFunc+0xd4>)
 80242fa:	4770      	bx	lr
 80242fc:	4812      	ldr	r0, [pc, #72]	; (8024348 <_GetDevFunc+0xd8>)
 80242fe:	4770      	bx	lr
 8024300:	4812      	ldr	r0, [pc, #72]	; (802434c <_GetDevFunc+0xdc>)
 8024302:	4770      	bx	lr
 8024304:	4812      	ldr	r0, [pc, #72]	; (8024350 <_GetDevFunc+0xe0>)
 8024306:	4770      	bx	lr
 8024308:	4812      	ldr	r0, [pc, #72]	; (8024354 <_GetDevFunc+0xe4>)
 802430a:	4770      	bx	lr
 802430c:	2000      	movs	r0, #0
 802430e:	4770      	bx	lr
 8024310:	08024dd5 	.word	0x08024dd5
 8024314:	08024d95 	.word	0x08024d95
 8024318:	08024ce9 	.word	0x08024ce9
 802431c:	08024fa1 	.word	0x08024fa1
 8024320:	08024d55 	.word	0x08024d55
 8024324:	08024221 	.word	0x08024221
 8024328:	08024cbd 	.word	0x08024cbd
 802432c:	08024d19 	.word	0x08024d19
 8024330:	08024f19 	.word	0x08024f19
 8024334:	08024ea9 	.word	0x08024ea9
 8024338:	08024359 	.word	0x08024359
 802433c:	08024371 	.word	0x08024371
 8024340:	08024389 	.word	0x08024389
 8024344:	080243a1 	.word	0x080243a1
 8024348:	080243ad 	.word	0x080243ad
 802434c:	08024c8d 	.word	0x08024c8d
 8024350:	08024e4d 	.word	0x08024e4d
 8024354:	08024e15 	.word	0x08024e15

08024358 <_SetChroma>:
 8024358:	b500      	push	{lr}
 802435a:	b083      	sub	sp, #12
 802435c:	e88d 0006 	stmia.w	sp, {r1, r2}
 8024360:	6980      	ldr	r0, [r0, #24]
 8024362:	466a      	mov	r2, sp
 8024364:	210d      	movs	r1, #13
 8024366:	f7fa f985 	bl	801e674 <LCD_X_DisplayDriver>
 802436a:	b003      	add	sp, #12
 802436c:	f85d fb04 	ldr.w	pc, [sp], #4

08024370 <_SetChromaMode>:
 8024370:	b500      	push	{lr}
 8024372:	b083      	sub	sp, #12
 8024374:	aa02      	add	r2, sp, #8
 8024376:	6980      	ldr	r0, [r0, #24]
 8024378:	f842 1d04 	str.w	r1, [r2, #-4]!
 802437c:	210c      	movs	r1, #12
 802437e:	f7fa f979 	bl	801e674 <LCD_X_DisplayDriver>
 8024382:	b003      	add	sp, #12
 8024384:	f85d fb04 	ldr.w	pc, [sp], #4

08024388 <_SetAlphaMode>:
 8024388:	b500      	push	{lr}
 802438a:	b083      	sub	sp, #12
 802438c:	aa02      	add	r2, sp, #8
 802438e:	6980      	ldr	r0, [r0, #24]
 8024390:	f842 1d04 	str.w	r1, [r2, #-4]!
 8024394:	210b      	movs	r1, #11
 8024396:	f7fa f96d 	bl	801e674 <LCD_X_DisplayDriver>
 802439a:	b003      	add	sp, #12
 802439c:	f85d fb04 	ldr.w	pc, [sp], #4

080243a0 <_Off>:
 80243a0:	6980      	ldr	r0, [r0, #24]
 80243a2:	2200      	movs	r2, #0
 80243a4:	2106      	movs	r1, #6
 80243a6:	f7fa b965 	b.w	801e674 <LCD_X_DisplayDriver>
 80243aa:	bf00      	nop

080243ac <_On>:
 80243ac:	6980      	ldr	r0, [r0, #24]
 80243ae:	2200      	movs	r2, #0
 80243b0:	2105      	movs	r1, #5
 80243b2:	f7fa b95f 	b.w	801e674 <LCD_X_DisplayDriver>
 80243b6:	bf00      	nop

080243b8 <_SetOrg>:
 80243b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80243bc:	4604      	mov	r4, r0
 80243be:	b083      	sub	sp, #12
 80243c0:	2300      	movs	r3, #0
 80243c2:	6980      	ldr	r0, [r0, #24]
 80243c4:	9301      	str	r3, [sp, #4]
 80243c6:	460f      	mov	r7, r1
 80243c8:	4690      	mov	r8, r2
 80243ca:	9300      	str	r3, [sp, #0]
 80243cc:	68a6      	ldr	r6, [r4, #8]
 80243ce:	f7ff f811 	bl	80233f4 <LCD_GetMirrorXEx>
 80243d2:	4605      	mov	r5, r0
 80243d4:	69a0      	ldr	r0, [r4, #24]
 80243d6:	f7ff f81d 	bl	8023414 <LCD_GetMirrorYEx>
 80243da:	4681      	mov	r9, r0
 80243dc:	69a0      	ldr	r0, [r4, #24]
 80243de:	f7ff f829 	bl	8023434 <LCD_GetSwapXYEx>
 80243e2:	0080      	lsls	r0, r0, #2
 80243e4:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 80243e8:	4328      	orrs	r0, r5
 80243ea:	2807      	cmp	r0, #7
 80243ec:	d810      	bhi.n	8024410 <_SetOrg+0x58>
 80243ee:	e8df f000 	tbb	[pc, r0]
 80243f2:	1a17      	.short	0x1a17
 80243f4:	3a362a22 	.word	0x3a362a22
 80243f8:	0442      	.short	0x0442
 80243fa:	69f2      	ldr	r2, [r6, #28]
 80243fc:	6970      	ldr	r0, [r6, #20]
 80243fe:	69b3      	ldr	r3, [r6, #24]
 8024400:	6931      	ldr	r1, [r6, #16]
 8024402:	1a12      	subs	r2, r2, r0
 8024404:	1a59      	subs	r1, r3, r1
 8024406:	ebc8 0202 	rsb	r2, r8, r2
 802440a:	1bcf      	subs	r7, r1, r7
 802440c:	e88d 0084 	stmia.w	sp, {r2, r7}
 8024410:	466a      	mov	r2, sp
 8024412:	69a0      	ldr	r0, [r4, #24]
 8024414:	2103      	movs	r1, #3
 8024416:	f7fa f92d 	bl	801e674 <LCD_X_DisplayDriver>
 802441a:	b003      	add	sp, #12
 802441c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024420:	e88d 0180 	stmia.w	sp, {r7, r8}
 8024424:	e7f4      	b.n	8024410 <_SetOrg+0x58>
 8024426:	69b3      	ldr	r3, [r6, #24]
 8024428:	6931      	ldr	r1, [r6, #16]
 802442a:	f8cd 8004 	str.w	r8, [sp, #4]
 802442e:	1a59      	subs	r1, r3, r1
 8024430:	1bcf      	subs	r7, r1, r7
 8024432:	9700      	str	r7, [sp, #0]
 8024434:	e7ec      	b.n	8024410 <_SetOrg+0x58>
 8024436:	69f3      	ldr	r3, [r6, #28]
 8024438:	6972      	ldr	r2, [r6, #20]
 802443a:	9700      	str	r7, [sp, #0]
 802443c:	1a9a      	subs	r2, r3, r2
 802443e:	ebc8 0202 	rsb	r2, r8, r2
 8024442:	9201      	str	r2, [sp, #4]
 8024444:	e7e4      	b.n	8024410 <_SetOrg+0x58>
 8024446:	69b1      	ldr	r1, [r6, #24]
 8024448:	6930      	ldr	r0, [r6, #16]
 802444a:	69f3      	ldr	r3, [r6, #28]
 802444c:	6972      	ldr	r2, [r6, #20]
 802444e:	1a09      	subs	r1, r1, r0
 8024450:	1a9a      	subs	r2, r3, r2
 8024452:	1bcf      	subs	r7, r1, r7
 8024454:	ebc8 0202 	rsb	r2, r8, r2
 8024458:	9700      	str	r7, [sp, #0]
 802445a:	9201      	str	r2, [sp, #4]
 802445c:	e7d8      	b.n	8024410 <_SetOrg+0x58>
 802445e:	f8cd 8000 	str.w	r8, [sp]
 8024462:	9701      	str	r7, [sp, #4]
 8024464:	e7d4      	b.n	8024410 <_SetOrg+0x58>
 8024466:	69f3      	ldr	r3, [r6, #28]
 8024468:	6972      	ldr	r2, [r6, #20]
 802446a:	9701      	str	r7, [sp, #4]
 802446c:	1a9a      	subs	r2, r3, r2
 802446e:	ebc8 0202 	rsb	r2, r8, r2
 8024472:	9200      	str	r2, [sp, #0]
 8024474:	e7cc      	b.n	8024410 <_SetOrg+0x58>
 8024476:	69b3      	ldr	r3, [r6, #24]
 8024478:	6931      	ldr	r1, [r6, #16]
 802447a:	f8cd 8000 	str.w	r8, [sp]
 802447e:	1a59      	subs	r1, r3, r1
 8024480:	1bcf      	subs	r7, r1, r7
 8024482:	9701      	str	r7, [sp, #4]
 8024484:	e7c4      	b.n	8024410 <_SetOrg+0x58>
 8024486:	bf00      	nop

08024488 <_FillRect>:
 8024488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802448c:	6887      	ldr	r7, [r0, #8]
 802448e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8024490:	b085      	sub	sp, #20
 8024492:	b15c      	cbz	r4, 80244ac <_FillRect+0x24>
 8024494:	4d78      	ldr	r5, [pc, #480]	; (8024678 <_FillRect+0x1f0>)
 8024496:	6980      	ldr	r0, [r0, #24]
 8024498:	682d      	ldr	r5, [r5, #0]
 802449a:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 802449c:	682d      	ldr	r5, [r5, #0]
 802449e:	9501      	str	r5, [sp, #4]
 80244a0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80244a2:	9500      	str	r5, [sp, #0]
 80244a4:	47a0      	blx	r4
 80244a6:	b005      	add	sp, #20
 80244a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80244ac:	469e      	mov	lr, r3
 80244ae:	4b72      	ldr	r3, [pc, #456]	; (8024678 <_FillRect+0x1f0>)
 80244b0:	f8d7 a020 	ldr.w	sl, [r7, #32]
 80244b4:	681b      	ldr	r3, [r3, #0]
 80244b6:	4690      	mov	r8, r2
 80244b8:	ebc1 0e0e 	rsb	lr, r1, lr
 80244bc:	4689      	mov	r9, r1
 80244be:	7c1a      	ldrb	r2, [r3, #16]
 80244c0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80244c2:	07d2      	lsls	r2, r2, #31
 80244c4:	ebc8 0601 	rsb	r6, r8, r1
 80244c8:	f10e 0401 	add.w	r4, lr, #1
 80244cc:	f106 0501 	add.w	r5, r6, #1
 80244d0:	f100 80ab 	bmi.w	802462a <_FillRect+0x1a2>
 80244d4:	683a      	ldr	r2, [r7, #0]
 80244d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80244d8:	fb0a 9808 	mla	r8, sl, r8, r9
 80244dc:	2c0f      	cmp	r4, #15
 80244de:	681b      	ldr	r3, [r3, #0]
 80244e0:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 80244e4:	d948      	bls.n	8024578 <_FillRect+0xf0>
 80244e6:	2d00      	cmp	r5, #0
 80244e8:	f000 80c3 	beq.w	8024672 <_FillRect+0x1ea>
 80244ec:	ea4f 028a 	mov.w	r2, sl, lsl #2
 80244f0:	f106 4780 	add.w	r7, r6, #1073741824	; 0x40000000
 80244f4:	fb02 8707 	mla	r7, r2, r7, r8
 80244f8:	3740      	adds	r7, #64	; 0x40
 80244fa:	f1c2 0900 	rsb	r9, r2, #0
 80244fe:	46ac      	mov	ip, r5
 8024500:	4639      	mov	r1, r7
 8024502:	4620      	mov	r0, r4
 8024504:	3810      	subs	r0, #16
 8024506:	280f      	cmp	r0, #15
 8024508:	f841 3c40 	str.w	r3, [r1, #-64]
 802450c:	f841 3c3c 	str.w	r3, [r1, #-60]
 8024510:	f841 3c38 	str.w	r3, [r1, #-56]
 8024514:	f841 3c34 	str.w	r3, [r1, #-52]
 8024518:	f841 3c30 	str.w	r3, [r1, #-48]
 802451c:	f841 3c2c 	str.w	r3, [r1, #-44]
 8024520:	f841 3c28 	str.w	r3, [r1, #-40]
 8024524:	f841 3c24 	str.w	r3, [r1, #-36]
 8024528:	f841 3c20 	str.w	r3, [r1, #-32]
 802452c:	f841 3c1c 	str.w	r3, [r1, #-28]
 8024530:	f841 3c18 	str.w	r3, [r1, #-24]
 8024534:	f841 3c14 	str.w	r3, [r1, #-20]
 8024538:	f841 3c10 	str.w	r3, [r1, #-16]
 802453c:	f841 3c0c 	str.w	r3, [r1, #-12]
 8024540:	f841 3c08 	str.w	r3, [r1, #-8]
 8024544:	f841 3c04 	str.w	r3, [r1, #-4]
 8024548:	f101 0140 	add.w	r1, r1, #64	; 0x40
 802454c:	d8da      	bhi.n	8024504 <_FillRect+0x7c>
 802454e:	f1bc 0c01 	subs.w	ip, ip, #1
 8024552:	eba7 0702 	sub.w	r7, r7, r2
 8024556:	d1d3      	bne.n	8024500 <_FillRect+0x78>
 8024558:	f1ae 010f 	sub.w	r1, lr, #15
 802455c:	f105 4080 	add.w	r0, r5, #1073741824	; 0x40000000
 8024560:	0909      	lsrs	r1, r1, #4
 8024562:	fb06 f909 	mul.w	r9, r6, r9
 8024566:	3801      	subs	r0, #1
 8024568:	3101      	adds	r1, #1
 802456a:	fb02 9200 	mla	r2, r2, r0, r9
 802456e:	eb02 1181 	add.w	r1, r2, r1, lsl #6
 8024572:	4488      	add	r8, r1
 8024574:	f004 040f 	and.w	r4, r4, #15
 8024578:	2c00      	cmp	r4, #0
 802457a:	d094      	beq.n	80244a6 <_FillRect+0x1e>
 802457c:	2d00      	cmp	r5, #0
 802457e:	d092      	beq.n	80244a6 <_FillRect+0x1e>
 8024580:	ea4f 0e8a 	mov.w	lr, sl, lsl #2
 8024584:	f106 4280 	add.w	r2, r6, #1073741824	; 0x40000000
 8024588:	1fa1      	subs	r1, r4, #6
 802458a:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 802458e:	f1a4 0a02 	sub.w	sl, r4, #2
 8024592:	f1a4 0903 	sub.w	r9, r4, #3
 8024596:	f1a4 0c05 	sub.w	ip, r4, #5
 802459a:	1fe7      	subs	r7, r4, #7
 802459c:	f1a4 0608 	sub.w	r6, r4, #8
 80245a0:	f1a4 0009 	sub.w	r0, r4, #9
 80245a4:	fb0e 8202 	mla	r2, lr, r2, r8
 80245a8:	9102      	str	r1, [sp, #8]
 80245aa:	f1a4 0804 	sub.w	r8, r4, #4
 80245ae:	f1a4 010a 	sub.w	r1, r4, #10
 80245b2:	f8cd a00c 	str.w	sl, [sp, #12]
 80245b6:	4682      	mov	sl, r0
 80245b8:	4648      	mov	r0, r9
 80245ba:	46b1      	mov	r9, r6
 80245bc:	4646      	mov	r6, r8
 80245be:	46b8      	mov	r8, r7
 80245c0:	4667      	mov	r7, ip
 80245c2:	46dc      	mov	ip, fp
 80245c4:	468b      	mov	fp, r1
 80245c6:	6013      	str	r3, [r2, #0]
 80245c8:	f1bc 0f00 	cmp.w	ip, #0
 80245cc:	d028      	beq.n	8024620 <_FillRect+0x198>
 80245ce:	9903      	ldr	r1, [sp, #12]
 80245d0:	6053      	str	r3, [r2, #4]
 80245d2:	b329      	cbz	r1, 8024620 <_FillRect+0x198>
 80245d4:	6093      	str	r3, [r2, #8]
 80245d6:	b318      	cbz	r0, 8024620 <_FillRect+0x198>
 80245d8:	60d3      	str	r3, [r2, #12]
 80245da:	b30e      	cbz	r6, 8024620 <_FillRect+0x198>
 80245dc:	6113      	str	r3, [r2, #16]
 80245de:	b1ff      	cbz	r7, 8024620 <_FillRect+0x198>
 80245e0:	9902      	ldr	r1, [sp, #8]
 80245e2:	6153      	str	r3, [r2, #20]
 80245e4:	b1e1      	cbz	r1, 8024620 <_FillRect+0x198>
 80245e6:	6193      	str	r3, [r2, #24]
 80245e8:	f1b8 0f00 	cmp.w	r8, #0
 80245ec:	d018      	beq.n	8024620 <_FillRect+0x198>
 80245ee:	61d3      	str	r3, [r2, #28]
 80245f0:	f1b9 0f00 	cmp.w	r9, #0
 80245f4:	d014      	beq.n	8024620 <_FillRect+0x198>
 80245f6:	6213      	str	r3, [r2, #32]
 80245f8:	f1ba 0f00 	cmp.w	sl, #0
 80245fc:	d010      	beq.n	8024620 <_FillRect+0x198>
 80245fe:	6253      	str	r3, [r2, #36]	; 0x24
 8024600:	f1bb 0f00 	cmp.w	fp, #0
 8024604:	d00c      	beq.n	8024620 <_FillRect+0x198>
 8024606:	2c0b      	cmp	r4, #11
 8024608:	6293      	str	r3, [r2, #40]	; 0x28
 802460a:	d009      	beq.n	8024620 <_FillRect+0x198>
 802460c:	2c0c      	cmp	r4, #12
 802460e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8024610:	d006      	beq.n	8024620 <_FillRect+0x198>
 8024612:	2c0d      	cmp	r4, #13
 8024614:	6313      	str	r3, [r2, #48]	; 0x30
 8024616:	d003      	beq.n	8024620 <_FillRect+0x198>
 8024618:	2c0e      	cmp	r4, #14
 802461a:	6353      	str	r3, [r2, #52]	; 0x34
 802461c:	bf18      	it	ne
 802461e:	6393      	strne	r3, [r2, #56]	; 0x38
 8024620:	3d01      	subs	r5, #1
 8024622:	ebce 0202 	rsb	r2, lr, r2
 8024626:	d1ce      	bne.n	80245c6 <_FillRect+0x13e>
 8024628:	e73d      	b.n	80244a6 <_FillRect+0x1e>
 802462a:	6903      	ldr	r3, [r0, #16]
 802462c:	689b      	ldr	r3, [r3, #8]
 802462e:	4798      	blx	r3
 8024630:	2c00      	cmp	r4, #0
 8024632:	f43f af38 	beq.w	80244a6 <_FillRect+0x1e>
 8024636:	2d00      	cmp	r5, #0
 8024638:	f43f af35 	beq.w	80244a6 <_FillRect+0x1e>
 802463c:	6a3b      	ldr	r3, [r7, #32]
 802463e:	fb03 9308 	mla	r3, r3, r8, r9
 8024642:	fb0a 3606 	mla	r6, sl, r6, r3
 8024646:	ebca 7a8a 	rsb	sl, sl, sl, lsl #30
 802464a:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 802464e:	ea4f 0c8a 	mov.w	ip, sl, lsl #2
 8024652:	3d01      	subs	r5, #1
 8024654:	4673      	mov	r3, lr
 8024656:	4621      	mov	r1, r4
 8024658:	683e      	ldr	r6, [r7, #0]
 802465a:	599a      	ldr	r2, [r3, r6]
 802465c:	3901      	subs	r1, #1
 802465e:	ea82 0200 	eor.w	r2, r2, r0
 8024662:	519a      	str	r2, [r3, r6]
 8024664:	f103 0304 	add.w	r3, r3, #4
 8024668:	d1f6      	bne.n	8024658 <_FillRect+0x1d0>
 802466a:	44e6      	add	lr, ip
 802466c:	2d00      	cmp	r5, #0
 802466e:	d1f0      	bne.n	8024652 <_FillRect+0x1ca>
 8024670:	e719      	b.n	80244a6 <_FillRect+0x1e>
 8024672:	46a8      	mov	r8, r5
 8024674:	e77e      	b.n	8024574 <_FillRect+0xec>
 8024676:	bf00      	nop
 8024678:	200000e8 	.word	0x200000e8

0802467c <_DrawHLine>:
 802467c:	b500      	push	{lr}
 802467e:	b083      	sub	sp, #12
 8024680:	9200      	str	r2, [sp, #0]
 8024682:	f7ff ff01 	bl	8024488 <_FillRect>
 8024686:	b003      	add	sp, #12
 8024688:	f85d fb04 	ldr.w	pc, [sp], #4

0802468c <_DrawVLine>:
 802468c:	b500      	push	{lr}
 802468e:	b083      	sub	sp, #12
 8024690:	9300      	str	r3, [sp, #0]
 8024692:	460b      	mov	r3, r1
 8024694:	f7ff fef8 	bl	8024488 <_FillRect>
 8024698:	b003      	add	sp, #12
 802469a:	f85d fb04 	ldr.w	pc, [sp], #4
 802469e:	bf00      	nop

080246a0 <_DrawBitmap>:
 80246a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246a4:	b087      	sub	sp, #28
 80246a6:	4698      	mov	r8, r3
 80246a8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80246aa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80246ac:	9401      	str	r4, [sp, #4]
 80246ae:	f107 3eff 	add.w	lr, r7, #4294967295	; 0xffffffff
 80246b2:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80246b4:	9400      	str	r4, [sp, #0]
 80246b6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80246b8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80246ba:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80246bc:	6887      	ldr	r7, [r0, #8]
 80246be:	f1be 0f1f 	cmp.w	lr, #31
 80246c2:	d86f      	bhi.n	80247a4 <_DrawBitmap+0x104>
 80246c4:	e8df f01e 	tbh	[pc, lr, lsl #1]
 80246c8:	01330081 	.word	0x01330081
 80246cc:	00e4006e 	.word	0x00e4006e
 80246d0:	006e006e 	.word	0x006e006e
 80246d4:	0020006e 	.word	0x0020006e
 80246d8:	006e006e 	.word	0x006e006e
 80246dc:	006e006e 	.word	0x006e006e
 80246e0:	006e006e 	.word	0x006e006e
 80246e4:	006e006e 	.word	0x006e006e
 80246e8:	006e006e 	.word	0x006e006e
 80246ec:	006e006e 	.word	0x006e006e
 80246f0:	006e006e 	.word	0x006e006e
 80246f4:	006e006e 	.word	0x006e006e
 80246f8:	006e006e 	.word	0x006e006e
 80246fc:	006e006e 	.word	0x006e006e
 8024700:	006e006e 	.word	0x006e006e
 8024704:	0071006e 	.word	0x0071006e
 8024708:	f8d7 e040 	ldr.w	lr, [r7, #64]	; 0x40
 802470c:	f1be 0f00 	cmp.w	lr, #0
 8024710:	d007      	beq.n	8024722 <_DrawBitmap+0x82>
 8024712:	4bc0      	ldr	r3, [pc, #768]	; (8024a14 <_DrawBitmap+0x374>)
 8024714:	681b      	ldr	r3, [r3, #0]
 8024716:	7c1b      	ldrb	r3, [r3, #16]
 8024718:	079b      	lsls	r3, r3, #30
 802471a:	d402      	bmi.n	8024722 <_DrawBitmap+0x82>
 802471c:	2c00      	cmp	r4, #0
 802471e:	f040 8295 	bne.w	8024c4c <_DrawBitmap+0x5ac>
 8024722:	2e00      	cmp	r6, #0
 8024724:	dd3e      	ble.n	80247a4 <_DrawBitmap+0x104>
 8024726:	f1a8 0a08 	sub.w	sl, r8, #8
 802472a:	4653      	mov	r3, sl
 802472c:	ea4f 0ada 	mov.w	sl, sl, lsr #3
 8024730:	f10a 0001 	add.w	r0, sl, #1
 8024734:	f8df e2dc 	ldr.w	lr, [pc, #732]	; 8024a14 <_DrawBitmap+0x374>
 8024738:	9100      	str	r1, [sp, #0]
 802473a:	eba3 0aca 	sub.w	sl, r3, sl, lsl #3
 802473e:	00c3      	lsls	r3, r0, #3
 8024740:	f8de b000 	ldr.w	fp, [lr]
 8024744:	9303      	str	r3, [sp, #12]
 8024746:	f8dd e004 	ldr.w	lr, [sp, #4]
 802474a:	f8cd a010 	str.w	sl, [sp, #16]
 802474e:	0143      	lsls	r3, r0, #5
 8024750:	eb06 0c02 	add.w	ip, r6, r2
 8024754:	9302      	str	r3, [sp, #8]
 8024756:	b30c      	cbz	r4, 802479c <_DrawBitmap+0xfc>
 8024758:	6a38      	ldr	r0, [r7, #32]
 802475a:	f89b 9010 	ldrb.w	r9, [fp, #16]
 802475e:	9b00      	ldr	r3, [sp, #0]
 8024760:	683e      	ldr	r6, [r7, #0]
 8024762:	fb00 3302 	mla	r3, r0, r2, r3
 8024766:	f019 0903 	ands.w	r9, r9, #3
 802476a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802476e:	f000 8177 	beq.w	8024a60 <_DrawBitmap+0x3c0>
 8024772:	f1b9 0f02 	cmp.w	r9, #2
 8024776:	d111      	bne.n	802479c <_DrawBitmap+0xfc>
 8024778:	f1b8 0f00 	cmp.w	r8, #0
 802477c:	dd0e      	ble.n	802479c <_DrawBitmap+0xfc>
 802477e:	9900      	ldr	r1, [sp, #0]
 8024780:	4628      	mov	r0, r5
 8024782:	eb05 0908 	add.w	r9, r5, r8
 8024786:	f810 6b01 	ldrb.w	r6, [r0], #1
 802478a:	b116      	cbz	r6, 8024792 <_DrawBitmap+0xf2>
 802478c:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8024790:	601e      	str	r6, [r3, #0]
 8024792:	4548      	cmp	r0, r9
 8024794:	f103 0304 	add.w	r3, r3, #4
 8024798:	d1f5      	bne.n	8024786 <_DrawBitmap+0xe6>
 802479a:	9100      	str	r1, [sp, #0]
 802479c:	3201      	adds	r2, #1
 802479e:	4562      	cmp	r2, ip
 80247a0:	4475      	add	r5, lr
 80247a2:	d1d8      	bne.n	8024756 <_DrawBitmap+0xb6>
 80247a4:	b007      	add	sp, #28
 80247a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80247aa:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 80247ac:	2c00      	cmp	r4, #0
 80247ae:	f000 8230 	beq.w	8024c12 <_DrawBitmap+0x572>
 80247b2:	6980      	ldr	r0, [r0, #24]
 80247b4:	9b01      	ldr	r3, [sp, #4]
 80247b6:	9312      	str	r3, [sp, #72]	; 0x48
 80247b8:	46a4      	mov	ip, r4
 80247ba:	462b      	mov	r3, r5
 80247bc:	9611      	str	r6, [sp, #68]	; 0x44
 80247be:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80247c2:	b007      	add	sp, #28
 80247c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247c8:	4760      	bx	ip
 80247ca:	f8d7 e03c 	ldr.w	lr, [r7, #60]	; 0x3c
 80247ce:	f1be 0f00 	cmp.w	lr, #0
 80247d2:	d005      	beq.n	80247e0 <_DrawBitmap+0x140>
 80247d4:	4b8f      	ldr	r3, [pc, #572]	; (8024a14 <_DrawBitmap+0x374>)
 80247d6:	681b      	ldr	r3, [r3, #0]
 80247d8:	7c1b      	ldrb	r3, [r3, #16]
 80247da:	07db      	lsls	r3, r3, #31
 80247dc:	f140 8246 	bpl.w	8024c6c <_DrawBitmap+0x5cc>
 80247e0:	2e00      	cmp	r6, #0
 80247e2:	dddf      	ble.n	80247a4 <_DrawBitmap+0x104>
 80247e4:	f8cd 8014 	str.w	r8, [sp, #20]
 80247e8:	4690      	mov	r8, r2
 80247ea:	18b2      	adds	r2, r6, r2
 80247ec:	9203      	str	r2, [sp, #12]
 80247ee:	9a00      	ldr	r2, [sp, #0]
 80247f0:	4b88      	ldr	r3, [pc, #544]	; (8024a14 <_DrawBitmap+0x374>)
 80247f2:	f8df a224 	ldr.w	sl, [pc, #548]	; 8024a18 <_DrawBitmap+0x378>
 80247f6:	9402      	str	r4, [sp, #8]
 80247f8:	188a      	adds	r2, r1, r2
 80247fa:	4681      	mov	r9, r0
 80247fc:	9204      	str	r2, [sp, #16]
 80247fe:	2680      	movs	r6, #128	; 0x80
 8024800:	461c      	mov	r4, r3
 8024802:	6823      	ldr	r3, [r4, #0]
 8024804:	9a02      	ldr	r2, [sp, #8]
 8024806:	7c1b      	ldrb	r3, [r3, #16]
 8024808:	f8d2 e004 	ldr.w	lr, [r2, #4]
 802480c:	f003 0303 	and.w	r3, r3, #3
 8024810:	2b02      	cmp	r3, #2
 8024812:	f000 81d3 	beq.w	8024bbc <_DrawBitmap+0x51c>
 8024816:	2b03      	cmp	r3, #3
 8024818:	f000 81a7 	beq.w	8024b6a <_DrawBitmap+0x4ca>
 802481c:	2b01      	cmp	r3, #1
 802481e:	f000 81a4 	beq.w	8024b6a <_DrawBitmap+0x4ca>
 8024822:	782b      	ldrb	r3, [r5, #0]
 8024824:	6a38      	ldr	r0, [r7, #32]
 8024826:	f81a 1003 	ldrb.w	r1, [sl, r3]
 802482a:	9b02      	ldr	r3, [sp, #8]
 802482c:	683a      	ldr	r2, [r7, #0]
 802482e:	f8d3 b000 	ldr.w	fp, [r3]
 8024832:	9b04      	ldr	r3, [sp, #16]
 8024834:	9f00      	ldr	r7, [sp, #0]
 8024836:	fb00 3308 	mla	r3, r0, r8, r3
 802483a:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 802483e:	4139      	asrs	r1, r7
 8024840:	f1c7 0308 	rsb	r3, r7, #8
 8024844:	9a05      	ldr	r2, [sp, #20]
 8024846:	46ac      	mov	ip, r5
 8024848:	e005      	b.n	8024856 <_DrawBitmap+0x1b6>
 802484a:	3a01      	subs	r2, #1
 802484c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8024850:	f840 7b04 	str.w	r7, [r0], #4
 8024854:	d012      	beq.n	802487c <_DrawBitmap+0x1dc>
 8024856:	f011 0f01 	tst.w	r1, #1
 802485a:	bf0c      	ite	eq
 802485c:	465f      	moveq	r7, fp
 802485e:	4677      	movne	r7, lr
 8024860:	3b01      	subs	r3, #1
 8024862:	d1f2      	bne.n	802484a <_DrawBitmap+0x1aa>
 8024864:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8024868:	f840 7b04 	str.w	r7, [r0], #4
 802486c:	3a01      	subs	r2, #1
 802486e:	f81a 1003 	ldrb.w	r1, [sl, r3]
 8024872:	f10c 0c01 	add.w	ip, ip, #1
 8024876:	f04f 0308 	mov.w	r3, #8
 802487a:	d1ec      	bne.n	8024856 <_DrawBitmap+0x1b6>
 802487c:	9b01      	ldr	r3, [sp, #4]
 802487e:	441d      	add	r5, r3
 8024880:	9b03      	ldr	r3, [sp, #12]
 8024882:	f108 0801 	add.w	r8, r8, #1
 8024886:	4598      	cmp	r8, r3
 8024888:	d08c      	beq.n	80247a4 <_DrawBitmap+0x104>
 802488a:	f8d9 7008 	ldr.w	r7, [r9, #8]
 802488e:	e7b8      	b.n	8024802 <_DrawBitmap+0x162>
 8024890:	2e00      	cmp	r6, #0
 8024892:	dd87      	ble.n	80247a4 <_DrawBitmap+0x104>
 8024894:	4b5f      	ldr	r3, [pc, #380]	; (8024a14 <_DrawBitmap+0x374>)
 8024896:	f8cd 8010 	str.w	r8, [sp, #16]
 802489a:	681b      	ldr	r3, [r3, #0]
 802489c:	9302      	str	r3, [sp, #8]
 802489e:	9b00      	ldr	r3, [sp, #0]
 80248a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80248a4:	18cb      	adds	r3, r1, r3
 80248a6:	eb06 0c02 	add.w	ip, r6, r2
 80248aa:	9303      	str	r3, [sp, #12]
 80248ac:	f04f 0ef0 	mov.w	lr, #240	; 0xf0
 80248b0:	b3b4      	cbz	r4, 8024920 <_DrawBitmap+0x280>
 80248b2:	9802      	ldr	r0, [sp, #8]
 80248b4:	6a3b      	ldr	r3, [r7, #32]
 80248b6:	f890 9010 	ldrb.w	r9, [r0, #16]
 80248ba:	9803      	ldr	r0, [sp, #12]
 80248bc:	6839      	ldr	r1, [r7, #0]
 80248be:	782e      	ldrb	r6, [r5, #0]
 80248c0:	fb03 0002 	mla	r0, r3, r2, r0
 80248c4:	f019 0903 	ands.w	r9, r9, #3
 80248c8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 80248cc:	d07f      	beq.n	80249ce <_DrawBitmap+0x32e>
 80248ce:	f1b9 0f02 	cmp.w	r9, #2
 80248d2:	d125      	bne.n	8024920 <_DrawBitmap+0x280>
 80248d4:	f8dd 9000 	ldr.w	r9, [sp]
 80248d8:	f8dd a010 	ldr.w	sl, [sp, #16]
 80248dc:	46ab      	mov	fp, r5
 80248de:	e002      	b.n	80248e6 <_DrawBitmap+0x246>
 80248e0:	f1ba 0a01 	subs.w	sl, sl, #1
 80248e4:	d01c      	beq.n	8024920 <_DrawBitmap+0x280>
 80248e6:	f1c9 0101 	rsb	r1, r9, #1
 80248ea:	0089      	lsls	r1, r1, #2
 80248ec:	f1c1 0304 	rsb	r3, r1, #4
 80248f0:	fa4e f303 	asr.w	r3, lr, r3
 80248f4:	4033      	ands	r3, r6
 80248f6:	40cb      	lsrs	r3, r1
 80248f8:	f109 0901 	add.w	r9, r9, #1
 80248fc:	bf1c      	itt	ne
 80248fe:	f854 3023 	ldrne.w	r3, [r4, r3, lsl #2]
 8024902:	6003      	strne	r3, [r0, #0]
 8024904:	f1b9 0f02 	cmp.w	r9, #2
 8024908:	f100 0004 	add.w	r0, r0, #4
 802490c:	d1e8      	bne.n	80248e0 <_DrawBitmap+0x240>
 802490e:	f1ba 0a01 	subs.w	sl, sl, #1
 8024912:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8024916:	f04f 0900 	mov.w	r9, #0
 802491a:	f10b 0b01 	add.w	fp, fp, #1
 802491e:	d1e2      	bne.n	80248e6 <_DrawBitmap+0x246>
 8024920:	3201      	adds	r2, #1
 8024922:	4562      	cmp	r2, ip
 8024924:	4445      	add	r5, r8
 8024926:	d1c3      	bne.n	80248b0 <_DrawBitmap+0x210>
 8024928:	b007      	add	sp, #28
 802492a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802492e:	2e00      	cmp	r6, #0
 8024930:	f77f af38 	ble.w	80247a4 <_DrawBitmap+0x104>
 8024934:	4b37      	ldr	r3, [pc, #220]	; (8024a14 <_DrawBitmap+0x374>)
 8024936:	f8cd 8010 	str.w	r8, [sp, #16]
 802493a:	681b      	ldr	r3, [r3, #0]
 802493c:	9302      	str	r3, [sp, #8]
 802493e:	9b00      	ldr	r3, [sp, #0]
 8024940:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8024944:	18cb      	adds	r3, r1, r3
 8024946:	eb06 0c02 	add.w	ip, r6, r2
 802494a:	9303      	str	r3, [sp, #12]
 802494c:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
 8024950:	b3b4      	cbz	r4, 80249c0 <_DrawBitmap+0x320>
 8024952:	9802      	ldr	r0, [sp, #8]
 8024954:	6a3b      	ldr	r3, [r7, #32]
 8024956:	f890 9010 	ldrb.w	r9, [r0, #16]
 802495a:	9803      	ldr	r0, [sp, #12]
 802495c:	6839      	ldr	r1, [r7, #0]
 802495e:	782e      	ldrb	r6, [r5, #0]
 8024960:	fb03 0002 	mla	r0, r3, r2, r0
 8024964:	f019 0903 	ands.w	r9, r9, #3
 8024968:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 802496c:	d056      	beq.n	8024a1c <_DrawBitmap+0x37c>
 802496e:	f1b9 0f02 	cmp.w	r9, #2
 8024972:	d125      	bne.n	80249c0 <_DrawBitmap+0x320>
 8024974:	f8dd 9000 	ldr.w	r9, [sp]
 8024978:	f8dd a010 	ldr.w	sl, [sp, #16]
 802497c:	46ab      	mov	fp, r5
 802497e:	e002      	b.n	8024986 <_DrawBitmap+0x2e6>
 8024980:	f1ba 0a01 	subs.w	sl, sl, #1
 8024984:	d01c      	beq.n	80249c0 <_DrawBitmap+0x320>
 8024986:	f1c9 0103 	rsb	r1, r9, #3
 802498a:	0049      	lsls	r1, r1, #1
 802498c:	f1c1 0306 	rsb	r3, r1, #6
 8024990:	fa4e f303 	asr.w	r3, lr, r3
 8024994:	4033      	ands	r3, r6
 8024996:	40cb      	lsrs	r3, r1
 8024998:	f109 0901 	add.w	r9, r9, #1
 802499c:	bf1c      	itt	ne
 802499e:	f854 3023 	ldrne.w	r3, [r4, r3, lsl #2]
 80249a2:	6003      	strne	r3, [r0, #0]
 80249a4:	f1b9 0f04 	cmp.w	r9, #4
 80249a8:	f100 0004 	add.w	r0, r0, #4
 80249ac:	d1e8      	bne.n	8024980 <_DrawBitmap+0x2e0>
 80249ae:	f1ba 0a01 	subs.w	sl, sl, #1
 80249b2:	f89b 6001 	ldrb.w	r6, [fp, #1]
 80249b6:	f04f 0900 	mov.w	r9, #0
 80249ba:	f10b 0b01 	add.w	fp, fp, #1
 80249be:	d1e2      	bne.n	8024986 <_DrawBitmap+0x2e6>
 80249c0:	3201      	adds	r2, #1
 80249c2:	4562      	cmp	r2, ip
 80249c4:	4445      	add	r5, r8
 80249c6:	d1c3      	bne.n	8024950 <_DrawBitmap+0x2b0>
 80249c8:	b007      	add	sp, #28
 80249ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80249ce:	f8dd 9000 	ldr.w	r9, [sp]
 80249d2:	f8dd a010 	ldr.w	sl, [sp, #16]
 80249d6:	46ab      	mov	fp, r5
 80249d8:	e002      	b.n	80249e0 <_DrawBitmap+0x340>
 80249da:	f1ba 0a01 	subs.w	sl, sl, #1
 80249de:	d09f      	beq.n	8024920 <_DrawBitmap+0x280>
 80249e0:	f1c9 0301 	rsb	r3, r9, #1
 80249e4:	0099      	lsls	r1, r3, #2
 80249e6:	f1c1 0304 	rsb	r3, r1, #4
 80249ea:	fa4e f303 	asr.w	r3, lr, r3
 80249ee:	4033      	ands	r3, r6
 80249f0:	40cb      	lsrs	r3, r1
 80249f2:	f109 0901 	add.w	r9, r9, #1
 80249f6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80249fa:	f840 3b04 	str.w	r3, [r0], #4
 80249fe:	f1b9 0f02 	cmp.w	r9, #2
 8024a02:	d1ea      	bne.n	80249da <_DrawBitmap+0x33a>
 8024a04:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8024a08:	f04f 0900 	mov.w	r9, #0
 8024a0c:	f10b 0b01 	add.w	fp, fp, #1
 8024a10:	e7e3      	b.n	80249da <_DrawBitmap+0x33a>
 8024a12:	bf00      	nop
 8024a14:	200000e8 	.word	0x200000e8
 8024a18:	08041534 	.word	0x08041534
 8024a1c:	f8dd 9000 	ldr.w	r9, [sp]
 8024a20:	f8dd a010 	ldr.w	sl, [sp, #16]
 8024a24:	46ab      	mov	fp, r5
 8024a26:	e002      	b.n	8024a2e <_DrawBitmap+0x38e>
 8024a28:	f1ba 0a01 	subs.w	sl, sl, #1
 8024a2c:	d0c8      	beq.n	80249c0 <_DrawBitmap+0x320>
 8024a2e:	f1c9 0303 	rsb	r3, r9, #3
 8024a32:	0059      	lsls	r1, r3, #1
 8024a34:	f1c1 0306 	rsb	r3, r1, #6
 8024a38:	fa4e f303 	asr.w	r3, lr, r3
 8024a3c:	4033      	ands	r3, r6
 8024a3e:	40cb      	lsrs	r3, r1
 8024a40:	f109 0901 	add.w	r9, r9, #1
 8024a44:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8024a48:	f840 3b04 	str.w	r3, [r0], #4
 8024a4c:	f1b9 0f04 	cmp.w	r9, #4
 8024a50:	d1ea      	bne.n	8024a28 <_DrawBitmap+0x388>
 8024a52:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8024a56:	f04f 0900 	mov.w	r9, #0
 8024a5a:	f10b 0b01 	add.w	fp, fp, #1
 8024a5e:	e7e3      	b.n	8024a28 <_DrawBitmap+0x388>
 8024a60:	f1b8 0f07 	cmp.w	r8, #7
 8024a64:	f340 80ff 	ble.w	8024c66 <_DrawBitmap+0x5c6>
 8024a68:	9900      	ldr	r1, [sp, #0]
 8024a6a:	9301      	str	r3, [sp, #4]
 8024a6c:	f105 0608 	add.w	r6, r5, #8
 8024a70:	f103 0020 	add.w	r0, r3, #32
 8024a74:	46c1      	mov	r9, r8
 8024a76:	f816 ac08 	ldrb.w	sl, [r6, #-8]
 8024a7a:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 8024a7e:	f840 3c20 	str.w	r3, [r0, #-32]
 8024a82:	f816 ac07 	ldrb.w	sl, [r6, #-7]
 8024a86:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 8024a8a:	f840 3c1c 	str.w	r3, [r0, #-28]
 8024a8e:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8024a92:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 8024a96:	f840 3c18 	str.w	r3, [r0, #-24]
 8024a9a:	f816 ac05 	ldrb.w	sl, [r6, #-5]
 8024a9e:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 8024aa2:	f840 3c14 	str.w	r3, [r0, #-20]
 8024aa6:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8024aaa:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 8024aae:	f840 3c10 	str.w	r3, [r0, #-16]
 8024ab2:	f816 ac03 	ldrb.w	sl, [r6, #-3]
 8024ab6:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 8024aba:	f840 3c0c 	str.w	r3, [r0, #-12]
 8024abe:	f816 ac02 	ldrb.w	sl, [r6, #-2]
 8024ac2:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 8024ac6:	f840 3c08 	str.w	r3, [r0, #-8]
 8024aca:	f816 ac01 	ldrb.w	sl, [r6, #-1]
 8024ace:	f1a9 0908 	sub.w	r9, r9, #8
 8024ad2:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 8024ad6:	f840 3c04 	str.w	r3, [r0, #-4]
 8024ada:	f1b9 0f07 	cmp.w	r9, #7
 8024ade:	f106 0608 	add.w	r6, r6, #8
 8024ae2:	f100 0020 	add.w	r0, r0, #32
 8024ae6:	dcc6      	bgt.n	8024a76 <_DrawBitmap+0x3d6>
 8024ae8:	9b01      	ldr	r3, [sp, #4]
 8024aea:	9100      	str	r1, [sp, #0]
 8024aec:	9902      	ldr	r1, [sp, #8]
 8024aee:	9e04      	ldr	r6, [sp, #16]
 8024af0:	440b      	add	r3, r1
 8024af2:	9903      	ldr	r1, [sp, #12]
 8024af4:	1868      	adds	r0, r5, r1
 8024af6:	2e03      	cmp	r6, #3
 8024af8:	dd1f      	ble.n	8024b3a <_DrawBitmap+0x49a>
 8024afa:	f890 9000 	ldrb.w	r9, [r0]
 8024afe:	f854 1029 	ldr.w	r1, [r4, r9, lsl #2]
 8024b02:	6019      	str	r1, [r3, #0]
 8024b04:	f890 9001 	ldrb.w	r9, [r0, #1]
 8024b08:	f854 1029 	ldr.w	r1, [r4, r9, lsl #2]
 8024b0c:	6059      	str	r1, [r3, #4]
 8024b0e:	f890 9002 	ldrb.w	r9, [r0, #2]
 8024b12:	f854 1029 	ldr.w	r1, [r4, r9, lsl #2]
 8024b16:	6099      	str	r1, [r3, #8]
 8024b18:	f890 9003 	ldrb.w	r9, [r0, #3]
 8024b1c:	f1a6 0a04 	sub.w	sl, r6, #4
 8024b20:	ea4f 069a 	mov.w	r6, sl, lsr #2
 8024b24:	f854 1029 	ldr.w	r1, [r4, r9, lsl #2]
 8024b28:	60d9      	str	r1, [r3, #12]
 8024b2a:	f106 0901 	add.w	r9, r6, #1
 8024b2e:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 8024b32:	ebaa 0686 	sub.w	r6, sl, r6, lsl #2
 8024b36:	eb03 1309 	add.w	r3, r3, r9, lsl #4
 8024b3a:	2e00      	cmp	r6, #0
 8024b3c:	f43f ae2e 	beq.w	802479c <_DrawBitmap+0xfc>
 8024b40:	f890 9000 	ldrb.w	r9, [r0]
 8024b44:	2e01      	cmp	r6, #1
 8024b46:	f854 1029 	ldr.w	r1, [r4, r9, lsl #2]
 8024b4a:	6019      	str	r1, [r3, #0]
 8024b4c:	f43f ae26 	beq.w	802479c <_DrawBitmap+0xfc>
 8024b50:	f890 9001 	ldrb.w	r9, [r0, #1]
 8024b54:	2e02      	cmp	r6, #2
 8024b56:	f854 1029 	ldr.w	r1, [r4, r9, lsl #2]
 8024b5a:	6059      	str	r1, [r3, #4]
 8024b5c:	f43f ae1e 	beq.w	802479c <_DrawBitmap+0xfc>
 8024b60:	7880      	ldrb	r0, [r0, #2]
 8024b62:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8024b66:	6098      	str	r0, [r3, #8]
 8024b68:	e618      	b.n	802479c <_DrawBitmap+0xfc>
 8024b6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8024b6e:	689b      	ldr	r3, [r3, #8]
 8024b70:	4798      	blx	r3
 8024b72:	9a04      	ldr	r2, [sp, #16]
 8024b74:	9905      	ldr	r1, [sp, #20]
 8024b76:	9b00      	ldr	r3, [sp, #0]
 8024b78:	4683      	mov	fp, r0
 8024b7a:	eb02 0c01 	add.w	ip, r2, r1
 8024b7e:	46ae      	mov	lr, r5
 8024b80:	f89e 0000 	ldrb.w	r0, [lr]
 8024b84:	fa46 f103 	asr.w	r1, r6, r3
 8024b88:	4208      	tst	r0, r1
 8024b8a:	f103 0301 	add.w	r3, r3, #1
 8024b8e:	d00b      	beq.n	8024ba8 <_DrawBitmap+0x508>
 8024b90:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8024b94:	6a08      	ldr	r0, [r1, #32]
 8024b96:	680f      	ldr	r7, [r1, #0]
 8024b98:	fb00 2008 	mla	r0, r0, r8, r2
 8024b9c:	f857 1020 	ldr.w	r1, [r7, r0, lsl #2]
 8024ba0:	ea81 010b 	eor.w	r1, r1, fp
 8024ba4:	f847 1020 	str.w	r1, [r7, r0, lsl #2]
 8024ba8:	2b08      	cmp	r3, #8
 8024baa:	f102 0201 	add.w	r2, r2, #1
 8024bae:	bf04      	itt	eq
 8024bb0:	f10e 0e01 	addeq.w	lr, lr, #1
 8024bb4:	2300      	moveq	r3, #0
 8024bb6:	4562      	cmp	r2, ip
 8024bb8:	d1e2      	bne.n	8024b80 <_DrawBitmap+0x4e0>
 8024bba:	e65f      	b.n	802487c <_DrawBitmap+0x1dc>
 8024bbc:	782b      	ldrb	r3, [r5, #0]
 8024bbe:	6a39      	ldr	r1, [r7, #32]
 8024bc0:	f81a 0003 	ldrb.w	r0, [sl, r3]
 8024bc4:	9b04      	ldr	r3, [sp, #16]
 8024bc6:	683a      	ldr	r2, [r7, #0]
 8024bc8:	9f00      	ldr	r7, [sp, #0]
 8024bca:	fb01 3308 	mla	r3, r1, r8, r3
 8024bce:	46a4      	mov	ip, r4
 8024bd0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8024bd4:	4138      	asrs	r0, r7
 8024bd6:	f1c7 0308 	rsb	r3, r7, #8
 8024bda:	4674      	mov	r4, lr
 8024bdc:	9a05      	ldr	r2, [sp, #20]
 8024bde:	462f      	mov	r7, r5
 8024be0:	46e6      	mov	lr, ip
 8024be2:	e003      	b.n	8024bec <_DrawBitmap+0x54c>
 8024be4:	3a01      	subs	r2, #1
 8024be6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8024bea:	d010      	beq.n	8024c0e <_DrawBitmap+0x56e>
 8024bec:	f010 0f01 	tst.w	r0, #1
 8024bf0:	bf18      	it	ne
 8024bf2:	600c      	strne	r4, [r1, #0]
 8024bf4:	3b01      	subs	r3, #1
 8024bf6:	f101 0104 	add.w	r1, r1, #4
 8024bfa:	d1f3      	bne.n	8024be4 <_DrawBitmap+0x544>
 8024bfc:	787b      	ldrb	r3, [r7, #1]
 8024bfe:	3a01      	subs	r2, #1
 8024c00:	f81a 0003 	ldrb.w	r0, [sl, r3]
 8024c04:	f107 0701 	add.w	r7, r7, #1
 8024c08:	f04f 0308 	mov.w	r3, #8
 8024c0c:	d1ee      	bne.n	8024bec <_DrawBitmap+0x54c>
 8024c0e:	4674      	mov	r4, lr
 8024c10:	e634      	b.n	802487c <_DrawBitmap+0x1dc>
 8024c12:	2e00      	cmp	r6, #0
 8024c14:	f77f adc6 	ble.w	80247a4 <_DrawBitmap+0x104>
 8024c18:	f8d7 e020 	ldr.w	lr, [r7, #32]
 8024c1c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8024c20:	46a4      	mov	ip, r4
 8024c22:	fb0e 1202 	mla	r2, lr, r2, r1
 8024c26:	6839      	ldr	r1, [r7, #0]
 8024c28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8024c2c:	3904      	subs	r1, #4
 8024c2e:	4643      	mov	r3, r8
 8024c30:	4628      	mov	r0, r5
 8024c32:	f850 4b04 	ldr.w	r4, [r0], #4
 8024c36:	f841 4f04 	str.w	r4, [r1, #4]!
 8024c3a:	3b01      	subs	r3, #1
 8024c3c:	d1f9      	bne.n	8024c32 <_DrawBitmap+0x592>
 8024c3e:	f10c 0c01 	add.w	ip, ip, #1
 8024c42:	4566      	cmp	r6, ip
 8024c44:	444d      	add	r5, r9
 8024c46:	4472      	add	r2, lr
 8024c48:	d1ed      	bne.n	8024c26 <_DrawBitmap+0x586>
 8024c4a:	e5ab      	b.n	80247a4 <_DrawBitmap+0x104>
 8024c4c:	6980      	ldr	r0, [r0, #24]
 8024c4e:	9b01      	ldr	r3, [sp, #4]
 8024c50:	9312      	str	r3, [sp, #72]	; 0x48
 8024c52:	46f4      	mov	ip, lr
 8024c54:	462b      	mov	r3, r5
 8024c56:	9413      	str	r4, [sp, #76]	; 0x4c
 8024c58:	9611      	str	r6, [sp, #68]	; 0x44
 8024c5a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8024c5e:	b007      	add	sp, #28
 8024c60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c64:	4760      	bx	ip
 8024c66:	4646      	mov	r6, r8
 8024c68:	4628      	mov	r0, r5
 8024c6a:	e744      	b.n	8024af6 <_DrawBitmap+0x456>
 8024c6c:	9b01      	ldr	r3, [sp, #4]
 8024c6e:	6980      	ldr	r0, [r0, #24]
 8024c70:	9313      	str	r3, [sp, #76]	; 0x4c
 8024c72:	9b00      	ldr	r3, [sp, #0]
 8024c74:	9310      	str	r3, [sp, #64]	; 0x40
 8024c76:	46f4      	mov	ip, lr
 8024c78:	462b      	mov	r3, r5
 8024c7a:	9414      	str	r4, [sp, #80]	; 0x50
 8024c7c:	9612      	str	r6, [sp, #72]	; 0x48
 8024c7e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8024c82:	b007      	add	sp, #28
 8024c84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c88:	4760      	bx	ip
 8024c8a:	bf00      	nop

08024c8c <_Init>:
 8024c8c:	b538      	push	{r3, r4, r5, lr}
 8024c8e:	6884      	ldr	r4, [r0, #8]
 8024c90:	4605      	mov	r5, r0
 8024c92:	b14c      	cbz	r4, 8024ca8 <_Init+0x1c>
 8024c94:	69a8      	ldr	r0, [r5, #24]
 8024c96:	2200      	movs	r2, #0
 8024c98:	2101      	movs	r1, #1
 8024c9a:	f7f9 fceb 	bl	801e674 <LCD_X_DisplayDriver>
 8024c9e:	2c00      	cmp	r4, #0
 8024ca0:	bf08      	it	eq
 8024ca2:	f040 0001 	orreq.w	r0, r0, #1
 8024ca6:	bd38      	pop	{r3, r4, r5, pc}
 8024ca8:	2050      	movs	r0, #80	; 0x50
 8024caa:	f7fa fd4d 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8024cae:	4621      	mov	r1, r4
 8024cb0:	60a8      	str	r0, [r5, #8]
 8024cb2:	2250      	movs	r2, #80	; 0x50
 8024cb4:	f7fd fb2e 	bl	8022314 <GUI__memset>
 8024cb8:	68ac      	ldr	r4, [r5, #8]
 8024cba:	e7eb      	b.n	8024c94 <_Init+0x8>

08024cbc <_SetVRAM_BufferPTR>:
 8024cbc:	b570      	push	{r4, r5, r6, lr}
 8024cbe:	6884      	ldr	r4, [r0, #8]
 8024cc0:	460d      	mov	r5, r1
 8024cc2:	b11c      	cbz	r4, 8024ccc <_SetVRAM_BufferPTR+0x10>
 8024cc4:	682b      	ldr	r3, [r5, #0]
 8024cc6:	6023      	str	r3, [r4, #0]
 8024cc8:	60a5      	str	r5, [r4, #8]
 8024cca:	bd70      	pop	{r4, r5, r6, pc}
 8024ccc:	4606      	mov	r6, r0
 8024cce:	2050      	movs	r0, #80	; 0x50
 8024cd0:	f7fa fd3a 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8024cd4:	4621      	mov	r1, r4
 8024cd6:	60b0      	str	r0, [r6, #8]
 8024cd8:	2250      	movs	r2, #80	; 0x50
 8024cda:	f7fd fb1b 	bl	8022314 <GUI__memset>
 8024cde:	68b4      	ldr	r4, [r6, #8]
 8024ce0:	2c00      	cmp	r4, #0
 8024ce2:	d1ef      	bne.n	8024cc4 <_SetVRAM_BufferPTR+0x8>
 8024ce4:	bd70      	pop	{r4, r5, r6, pc}
 8024ce6:	bf00      	nop

08024ce8 <_GetPos>:
 8024ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024cea:	6884      	ldr	r4, [r0, #8]
 8024cec:	460f      	mov	r7, r1
 8024cee:	4616      	mov	r6, r2
 8024cf0:	b124      	cbz	r4, 8024cfc <_GetPos+0x14>
 8024cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024cf4:	603b      	str	r3, [r7, #0]
 8024cf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024cf8:	6033      	str	r3, [r6, #0]
 8024cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024cfc:	4605      	mov	r5, r0
 8024cfe:	2050      	movs	r0, #80	; 0x50
 8024d00:	f7fa fd22 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8024d04:	4621      	mov	r1, r4
 8024d06:	60a8      	str	r0, [r5, #8]
 8024d08:	2250      	movs	r2, #80	; 0x50
 8024d0a:	f7fd fb03 	bl	8022314 <GUI__memset>
 8024d0e:	68ac      	ldr	r4, [r5, #8]
 8024d10:	2c00      	cmp	r4, #0
 8024d12:	d1ee      	bne.n	8024cf2 <_GetPos+0xa>
 8024d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024d16:	bf00      	nop

08024d18 <_ShowBuffer>:
 8024d18:	b570      	push	{r4, r5, r6, lr}
 8024d1a:	6885      	ldr	r5, [r0, #8]
 8024d1c:	b082      	sub	sp, #8
 8024d1e:	2300      	movs	r3, #0
 8024d20:	4604      	mov	r4, r0
 8024d22:	9301      	str	r3, [sp, #4]
 8024d24:	460e      	mov	r6, r1
 8024d26:	b145      	cbz	r5, 8024d3a <_ShowBuffer+0x22>
 8024d28:	aa02      	add	r2, sp, #8
 8024d2a:	69a0      	ldr	r0, [r4, #24]
 8024d2c:	f842 6d04 	str.w	r6, [r2, #-4]!
 8024d30:	210e      	movs	r1, #14
 8024d32:	f7f9 fc9f 	bl	801e674 <LCD_X_DisplayDriver>
 8024d36:	b002      	add	sp, #8
 8024d38:	bd70      	pop	{r4, r5, r6, pc}
 8024d3a:	2050      	movs	r0, #80	; 0x50
 8024d3c:	f7fa fd04 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8024d40:	4629      	mov	r1, r5
 8024d42:	60a0      	str	r0, [r4, #8]
 8024d44:	2250      	movs	r2, #80	; 0x50
 8024d46:	f7fd fae5 	bl	8022314 <GUI__memset>
 8024d4a:	68a3      	ldr	r3, [r4, #8]
 8024d4c:	2b00      	cmp	r3, #0
 8024d4e:	d1eb      	bne.n	8024d28 <_ShowBuffer+0x10>
 8024d50:	b002      	add	sp, #8
 8024d52:	bd70      	pop	{r4, r5, r6, pc}

08024d54 <_SetAlpha>:
 8024d54:	b570      	push	{r4, r5, r6, lr}
 8024d56:	6884      	ldr	r4, [r0, #8]
 8024d58:	b082      	sub	sp, #8
 8024d5a:	2300      	movs	r3, #0
 8024d5c:	4605      	mov	r5, r0
 8024d5e:	9301      	str	r3, [sp, #4]
 8024d60:	460e      	mov	r6, r1
 8024d62:	b14c      	cbz	r4, 8024d78 <_SetAlpha+0x24>
 8024d64:	aa02      	add	r2, sp, #8
 8024d66:	62e6      	str	r6, [r4, #44]	; 0x2c
 8024d68:	f842 6d04 	str.w	r6, [r2, #-4]!
 8024d6c:	69a8      	ldr	r0, [r5, #24]
 8024d6e:	210a      	movs	r1, #10
 8024d70:	f7f9 fc80 	bl	801e674 <LCD_X_DisplayDriver>
 8024d74:	b002      	add	sp, #8
 8024d76:	bd70      	pop	{r4, r5, r6, pc}
 8024d78:	2050      	movs	r0, #80	; 0x50
 8024d7a:	f7fa fce5 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8024d7e:	4621      	mov	r1, r4
 8024d80:	60a8      	str	r0, [r5, #8]
 8024d82:	2250      	movs	r2, #80	; 0x50
 8024d84:	f7fd fac6 	bl	8022314 <GUI__memset>
 8024d88:	68ac      	ldr	r4, [r5, #8]
 8024d8a:	2c00      	cmp	r4, #0
 8024d8c:	d1ea      	bne.n	8024d64 <_SetAlpha+0x10>
 8024d8e:	b002      	add	sp, #8
 8024d90:	bd70      	pop	{r4, r5, r6, pc}
 8024d92:	bf00      	nop

08024d94 <_SetVis>:
 8024d94:	b570      	push	{r4, r5, r6, lr}
 8024d96:	6884      	ldr	r4, [r0, #8]
 8024d98:	b082      	sub	sp, #8
 8024d9a:	2300      	movs	r3, #0
 8024d9c:	4605      	mov	r5, r0
 8024d9e:	9301      	str	r3, [sp, #4]
 8024da0:	460e      	mov	r6, r1
 8024da2:	b14c      	cbz	r4, 8024db8 <_SetVis+0x24>
 8024da4:	aa02      	add	r2, sp, #8
 8024da6:	6326      	str	r6, [r4, #48]	; 0x30
 8024da8:	f842 6d04 	str.w	r6, [r2, #-4]!
 8024dac:	69a8      	ldr	r0, [r5, #24]
 8024dae:	2109      	movs	r1, #9
 8024db0:	f7f9 fc60 	bl	801e674 <LCD_X_DisplayDriver>
 8024db4:	b002      	add	sp, #8
 8024db6:	bd70      	pop	{r4, r5, r6, pc}
 8024db8:	2050      	movs	r0, #80	; 0x50
 8024dba:	f7fa fcc5 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8024dbe:	4621      	mov	r1, r4
 8024dc0:	60a8      	str	r0, [r5, #8]
 8024dc2:	2250      	movs	r2, #80	; 0x50
 8024dc4:	f7fd faa6 	bl	8022314 <GUI__memset>
 8024dc8:	68ac      	ldr	r4, [r5, #8]
 8024dca:	2c00      	cmp	r4, #0
 8024dcc:	d1ea      	bne.n	8024da4 <_SetVis+0x10>
 8024dce:	b002      	add	sp, #8
 8024dd0:	bd70      	pop	{r4, r5, r6, pc}
 8024dd2:	bf00      	nop

08024dd4 <_SetVRAMAddr>:
 8024dd4:	b570      	push	{r4, r5, r6, lr}
 8024dd6:	6884      	ldr	r4, [r0, #8]
 8024dd8:	b082      	sub	sp, #8
 8024dda:	2300      	movs	r3, #0
 8024ddc:	4606      	mov	r6, r0
 8024dde:	9301      	str	r3, [sp, #4]
 8024de0:	460d      	mov	r5, r1
 8024de2:	b154      	cbz	r4, 8024dfa <_SetVRAMAddr+0x26>
 8024de4:	aa02      	add	r2, sp, #8
 8024de6:	6025      	str	r5, [r4, #0]
 8024de8:	6065      	str	r5, [r4, #4]
 8024dea:	f842 5d04 	str.w	r5, [r2, #-4]!
 8024dee:	69b0      	ldr	r0, [r6, #24]
 8024df0:	2102      	movs	r1, #2
 8024df2:	f7f9 fc3f 	bl	801e674 <LCD_X_DisplayDriver>
 8024df6:	b002      	add	sp, #8
 8024df8:	bd70      	pop	{r4, r5, r6, pc}
 8024dfa:	2050      	movs	r0, #80	; 0x50
 8024dfc:	f7fa fca4 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8024e00:	4621      	mov	r1, r4
 8024e02:	60b0      	str	r0, [r6, #8]
 8024e04:	2250      	movs	r2, #80	; 0x50
 8024e06:	f7fd fa85 	bl	8022314 <GUI__memset>
 8024e0a:	68b4      	ldr	r4, [r6, #8]
 8024e0c:	2c00      	cmp	r4, #0
 8024e0e:	d1e9      	bne.n	8024de4 <_SetVRAMAddr+0x10>
 8024e10:	b002      	add	sp, #8
 8024e12:	bd70      	pop	{r4, r5, r6, pc}

08024e14 <_SetVSize>:
 8024e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024e16:	6884      	ldr	r4, [r0, #8]
 8024e18:	4605      	mov	r5, r0
 8024e1a:	460e      	mov	r6, r1
 8024e1c:	4617      	mov	r7, r2
 8024e1e:	b14c      	cbz	r4, 8024e34 <_SetVSize+0x20>
 8024e20:	69a8      	ldr	r0, [r5, #24]
 8024e22:	f7fe fb07 	bl	8023434 <LCD_GetSwapXYEx>
 8024e26:	61a6      	str	r6, [r4, #24]
 8024e28:	61e7      	str	r7, [r4, #28]
 8024e2a:	b908      	cbnz	r0, 8024e30 <_SetVSize+0x1c>
 8024e2c:	6226      	str	r6, [r4, #32]
 8024e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024e30:	6227      	str	r7, [r4, #32]
 8024e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024e34:	2050      	movs	r0, #80	; 0x50
 8024e36:	f7fa fc87 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8024e3a:	4621      	mov	r1, r4
 8024e3c:	60a8      	str	r0, [r5, #8]
 8024e3e:	2250      	movs	r2, #80	; 0x50
 8024e40:	f7fd fa68 	bl	8022314 <GUI__memset>
 8024e44:	68ac      	ldr	r4, [r5, #8]
 8024e46:	2c00      	cmp	r4, #0
 8024e48:	d1ea      	bne.n	8024e20 <_SetVSize+0xc>
 8024e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024e4c <_SetSize>:
 8024e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e4e:	6884      	ldr	r4, [r0, #8]
 8024e50:	b083      	sub	sp, #12
 8024e52:	2300      	movs	r3, #0
 8024e54:	4605      	mov	r5, r0
 8024e56:	460f      	mov	r7, r1
 8024e58:	4616      	mov	r6, r2
 8024e5a:	9301      	str	r3, [sp, #4]
 8024e5c:	9300      	str	r3, [sp, #0]
 8024e5e:	b1ac      	cbz	r4, 8024e8c <_SetSize+0x40>
 8024e60:	6a23      	ldr	r3, [r4, #32]
 8024e62:	b153      	cbz	r3, 8024e7a <_SetSize+0x2e>
 8024e64:	6127      	str	r7, [r4, #16]
 8024e66:	6166      	str	r6, [r4, #20]
 8024e68:	466a      	mov	r2, sp
 8024e6a:	69a8      	ldr	r0, [r5, #24]
 8024e6c:	9700      	str	r7, [sp, #0]
 8024e6e:	2107      	movs	r1, #7
 8024e70:	9601      	str	r6, [sp, #4]
 8024e72:	f7f9 fbff 	bl	801e674 <LCD_X_DisplayDriver>
 8024e76:	b003      	add	sp, #12
 8024e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024e7a:	69a8      	ldr	r0, [r5, #24]
 8024e7c:	f7fe fada 	bl	8023434 <LCD_GetSwapXYEx>
 8024e80:	2800      	cmp	r0, #0
 8024e82:	bf0c      	ite	eq
 8024e84:	4638      	moveq	r0, r7
 8024e86:	4630      	movne	r0, r6
 8024e88:	6220      	str	r0, [r4, #32]
 8024e8a:	e7eb      	b.n	8024e64 <_SetSize+0x18>
 8024e8c:	2050      	movs	r0, #80	; 0x50
 8024e8e:	f7fa fc5b 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8024e92:	4621      	mov	r1, r4
 8024e94:	60a8      	str	r0, [r5, #8]
 8024e96:	2250      	movs	r2, #80	; 0x50
 8024e98:	f7fd fa3c 	bl	8022314 <GUI__memset>
 8024e9c:	68ac      	ldr	r4, [r5, #8]
 8024e9e:	2c00      	cmp	r4, #0
 8024ea0:	d1de      	bne.n	8024e60 <_SetSize+0x14>
 8024ea2:	b003      	add	sp, #12
 8024ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024ea6:	bf00      	nop

08024ea8 <_SetDevFunc>:
 8024ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024eaa:	6885      	ldr	r5, [r0, #8]
 8024eac:	460c      	mov	r4, r1
 8024eae:	4617      	mov	r7, r2
 8024eb0:	b32d      	cbz	r5, 8024efe <_SetDevFunc+0x56>
 8024eb2:	1ee3      	subs	r3, r4, #3
 8024eb4:	2b25      	cmp	r3, #37	; 0x25
 8024eb6:	d815      	bhi.n	8024ee4 <_SetDevFunc+0x3c>
 8024eb8:	e8df f003 	tbb	[pc, r3]
 8024ebc:	14141415 	.word	0x14141415
 8024ec0:	14141414 	.word	0x14141414
 8024ec4:	14141414 	.word	0x14141414
 8024ec8:	14141414 	.word	0x14141414
 8024ecc:	14141414 	.word	0x14141414
 8024ed0:	14171414 	.word	0x14171414
 8024ed4:	14141414 	.word	0x14141414
 8024ed8:	141b1914 	.word	0x141b1914
 8024edc:	141f141d 	.word	0x141f141d
 8024ee0:	1314      	.short	0x1314
 8024ee2:	64ef      	str	r7, [r5, #76]	; 0x4c
 8024ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024ee6:	64af      	str	r7, [r5, #72]	; 0x48
 8024ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024eea:	636f      	str	r7, [r5, #52]	; 0x34
 8024eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024eee:	63ef      	str	r7, [r5, #60]	; 0x3c
 8024ef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024ef2:	63af      	str	r7, [r5, #56]	; 0x38
 8024ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024ef6:	646f      	str	r7, [r5, #68]	; 0x44
 8024ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024efa:	642f      	str	r7, [r5, #64]	; 0x40
 8024efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024efe:	4606      	mov	r6, r0
 8024f00:	2050      	movs	r0, #80	; 0x50
 8024f02:	f7fa fc21 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8024f06:	4629      	mov	r1, r5
 8024f08:	60b0      	str	r0, [r6, #8]
 8024f0a:	2250      	movs	r2, #80	; 0x50
 8024f0c:	f7fd fa02 	bl	8022314 <GUI__memset>
 8024f10:	68b5      	ldr	r5, [r6, #8]
 8024f12:	2d00      	cmp	r5, #0
 8024f14:	d1cd      	bne.n	8024eb2 <_SetDevFunc+0xa>
 8024f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08024f18 <_CopyBuffer>:
 8024f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024f1c:	6884      	ldr	r4, [r0, #8]
 8024f1e:	4605      	mov	r5, r0
 8024f20:	460e      	mov	r6, r1
 8024f22:	4617      	mov	r7, r2
 8024f24:	b334      	cbz	r4, 8024f74 <_CopyBuffer+0x5c>
 8024f26:	42be      	cmp	r6, r7
 8024f28:	d01c      	beq.n	8024f64 <_CopyBuffer+0x4c>
 8024f2a:	68eb      	ldr	r3, [r5, #12]
 8024f2c:	2108      	movs	r1, #8
 8024f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024f30:	4628      	mov	r0, r5
 8024f32:	4798      	blx	r3
 8024f34:	69a1      	ldr	r1, [r4, #24]
 8024f36:	6963      	ldr	r3, [r4, #20]
 8024f38:	68a2      	ldr	r2, [r4, #8]
 8024f3a:	fb03 f301 	mul.w	r3, r3, r1
 8024f3e:	fb00 f003 	mul.w	r0, r0, r3
 8024f42:	08c3      	lsrs	r3, r0, #3
 8024f44:	b182      	cbz	r2, 8024f68 <_CopyBuffer+0x50>
 8024f46:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 8024f4a:	f852 9027 	ldr.w	r9, [r2, r7, lsl #2]
 8024f4e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 8024f52:	f1b8 0f00 	cmp.w	r8, #0
 8024f56:	d01a      	beq.n	8024f8e <_CopyBuffer+0x76>
 8024f58:	463a      	mov	r2, r7
 8024f5a:	4631      	mov	r1, r6
 8024f5c:	69a8      	ldr	r0, [r5, #24]
 8024f5e:	47c0      	blx	r8
 8024f60:	f8c4 9000 	str.w	r9, [r4]
 8024f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024f68:	6862      	ldr	r2, [r4, #4]
 8024f6a:	fb03 2106 	mla	r1, r3, r6, r2
 8024f6e:	fb03 2907 	mla	r9, r3, r7, r2
 8024f72:	e7ec      	b.n	8024f4e <_CopyBuffer+0x36>
 8024f74:	2050      	movs	r0, #80	; 0x50
 8024f76:	f7fa fbe7 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8024f7a:	4621      	mov	r1, r4
 8024f7c:	60a8      	str	r0, [r5, #8]
 8024f7e:	2250      	movs	r2, #80	; 0x50
 8024f80:	f7fd f9c8 	bl	8022314 <GUI__memset>
 8024f84:	68ac      	ldr	r4, [r5, #8]
 8024f86:	2c00      	cmp	r4, #0
 8024f88:	d1cd      	bne.n	8024f26 <_CopyBuffer+0xe>
 8024f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024f8e:	4803      	ldr	r0, [pc, #12]	; (8024f9c <_CopyBuffer+0x84>)
 8024f90:	461a      	mov	r2, r3
 8024f92:	6803      	ldr	r3, [r0, #0]
 8024f94:	4648      	mov	r0, r9
 8024f96:	4798      	blx	r3
 8024f98:	e7e2      	b.n	8024f60 <_CopyBuffer+0x48>
 8024f9a:	bf00      	nop
 8024f9c:	20000108 	.word	0x20000108

08024fa0 <_SetPos>:
 8024fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024fa4:	6884      	ldr	r4, [r0, #8]
 8024fa6:	b089      	sub	sp, #36	; 0x24
 8024fa8:	2300      	movs	r3, #0
 8024faa:	4605      	mov	r5, r0
 8024fac:	460f      	mov	r7, r1
 8024fae:	4616      	mov	r6, r2
 8024fb0:	9303      	str	r3, [sp, #12]
 8024fb2:	9302      	str	r3, [sp, #8]
 8024fb4:	9304      	str	r3, [sp, #16]
 8024fb6:	9305      	str	r3, [sp, #20]
 8024fb8:	9306      	str	r3, [sp, #24]
 8024fba:	9307      	str	r3, [sp, #28]
 8024fbc:	2c00      	cmp	r4, #0
 8024fbe:	d05e      	beq.n	802507e <_SetPos+0xde>
 8024fc0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8024fc2:	b133      	cbz	r3, 8024fd2 <_SetPos+0x32>
 8024fc4:	4632      	mov	r2, r6
 8024fc6:	4639      	mov	r1, r7
 8024fc8:	69a8      	ldr	r0, [r5, #24]
 8024fca:	4798      	blx	r3
 8024fcc:	b009      	add	sp, #36	; 0x24
 8024fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024fd2:	6267      	str	r7, [r4, #36]	; 0x24
 8024fd4:	62a6      	str	r6, [r4, #40]	; 0x28
 8024fd6:	f7fe fafd 	bl	80235d4 <LCD_GetXSizeDisplay>
 8024fda:	4681      	mov	r9, r0
 8024fdc:	f7fe fb00 	bl	80235e0 <LCD_GetYSizeDisplay>
 8024fe0:	68eb      	ldr	r3, [r5, #12]
 8024fe2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8024fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8024fe8:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8024fec:	4682      	mov	sl, r0
 8024fee:	2108      	movs	r1, #8
 8024ff0:	4628      	mov	r0, r5
 8024ff2:	4798      	blx	r3
 8024ff4:	1dc2      	adds	r2, r0, #7
 8024ff6:	bf48      	it	mi
 8024ff8:	f100 020e 	addmi.w	r2, r0, #14
 8024ffc:	10d2      	asrs	r2, r2, #3
 8024ffe:	2f00      	cmp	r7, #0
 8025000:	9206      	str	r2, [sp, #24]
 8025002:	db56      	blt.n	80250b2 <_SetPos+0x112>
 8025004:	eb07 030b 	add.w	r3, r7, fp
 8025008:	4599      	cmp	r9, r3
 802500a:	9702      	str	r7, [sp, #8]
 802500c:	bfb6      	itet	lt
 802500e:	ebc7 0709 	rsblt	r7, r7, r9
 8025012:	f8cd b010 	strge.w	fp, [sp, #16]
 8025016:	9704      	strlt	r7, [sp, #16]
 8025018:	2e00      	cmp	r6, #0
 802501a:	db3e      	blt.n	802509a <_SetPos+0xfa>
 802501c:	eb06 0308 	add.w	r3, r6, r8
 8025020:	459a      	cmp	sl, r3
 8025022:	bfb8      	it	lt
 8025024:	ebc6 010a 	rsblt	r1, r6, sl
 8025028:	9603      	str	r6, [sp, #12]
 802502a:	bfa6      	itte	ge
 802502c:	f8cd 8014 	strge.w	r8, [sp, #20]
 8025030:	4641      	movge	r1, r8
 8025032:	9105      	strlt	r1, [sp, #20]
 8025034:	9b04      	ldr	r3, [sp, #16]
 8025036:	2b00      	cmp	r3, #0
 8025038:	dd0f      	ble.n	802505a <_SetPos+0xba>
 802503a:	2900      	cmp	r1, #0
 802503c:	dd0d      	ble.n	802505a <_SetPos+0xba>
 802503e:	9b02      	ldr	r3, [sp, #8]
 8025040:	4599      	cmp	r9, r3
 8025042:	dd0a      	ble.n	802505a <_SetPos+0xba>
 8025044:	45b2      	cmp	sl, r6
 8025046:	dd08      	ble.n	802505a <_SetPos+0xba>
 8025048:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802504a:	2b00      	cmp	r3, #0
 802504c:	d03a      	beq.n	80250c4 <_SetPos+0x124>
 802504e:	aa02      	add	r2, sp, #8
 8025050:	69a8      	ldr	r0, [r5, #24]
 8025052:	2108      	movs	r1, #8
 8025054:	f7f9 fb0e 	bl	801e674 <LCD_X_DisplayDriver>
 8025058:	e7b8      	b.n	8024fcc <_SetPos+0x2c>
 802505a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 802505c:	2b01      	cmp	r3, #1
 802505e:	d1b5      	bne.n	8024fcc <_SetPos+0x2c>
 8025060:	68ac      	ldr	r4, [r5, #8]
 8025062:	2300      	movs	r3, #0
 8025064:	9301      	str	r3, [sp, #4]
 8025066:	2c00      	cmp	r4, #0
 8025068:	d039      	beq.n	80250de <_SetPos+0x13e>
 802506a:	aa08      	add	r2, sp, #32
 802506c:	2300      	movs	r3, #0
 802506e:	6323      	str	r3, [r4, #48]	; 0x30
 8025070:	69a8      	ldr	r0, [r5, #24]
 8025072:	f842 3d1c 	str.w	r3, [r2, #-28]!
 8025076:	2109      	movs	r1, #9
 8025078:	f7f9 fafc 	bl	801e674 <LCD_X_DisplayDriver>
 802507c:	e7a6      	b.n	8024fcc <_SetPos+0x2c>
 802507e:	2050      	movs	r0, #80	; 0x50
 8025080:	f7fa fb62 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 8025084:	4621      	mov	r1, r4
 8025086:	60a8      	str	r0, [r5, #8]
 8025088:	2250      	movs	r2, #80	; 0x50
 802508a:	f7fd f943 	bl	8022314 <GUI__memset>
 802508e:	68ac      	ldr	r4, [r5, #8]
 8025090:	2c00      	cmp	r4, #0
 8025092:	d195      	bne.n	8024fc0 <_SetPos+0x20>
 8025094:	b009      	add	sp, #36	; 0x24
 8025096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802509a:	9b07      	ldr	r3, [sp, #28]
 802509c:	fb02 f206 	mul.w	r2, r2, r6
 80250a0:	eb06 0108 	add.w	r1, r6, r8
 80250a4:	fb0b 3312 	mls	r3, fp, r2, r3
 80250a8:	2600      	movs	r6, #0
 80250aa:	9105      	str	r1, [sp, #20]
 80250ac:	9307      	str	r3, [sp, #28]
 80250ae:	9603      	str	r6, [sp, #12]
 80250b0:	e7c0      	b.n	8025034 <_SetPos+0x94>
 80250b2:	9b07      	ldr	r3, [sp, #28]
 80250b4:	2100      	movs	r1, #0
 80250b6:	fb02 3317 	mls	r3, r2, r7, r3
 80250ba:	445f      	add	r7, fp
 80250bc:	9307      	str	r3, [sp, #28]
 80250be:	9704      	str	r7, [sp, #16]
 80250c0:	9102      	str	r1, [sp, #8]
 80250c2:	e7a9      	b.n	8025018 <_SetPos+0x78>
 80250c4:	68ac      	ldr	r4, [r5, #8]
 80250c6:	9301      	str	r3, [sp, #4]
 80250c8:	b1b4      	cbz	r4, 80250f8 <_SetPos+0x158>
 80250ca:	aa08      	add	r2, sp, #32
 80250cc:	2301      	movs	r3, #1
 80250ce:	6323      	str	r3, [r4, #48]	; 0x30
 80250d0:	2109      	movs	r1, #9
 80250d2:	f842 3d1c 	str.w	r3, [r2, #-28]!
 80250d6:	69a8      	ldr	r0, [r5, #24]
 80250d8:	f7f9 facc 	bl	801e674 <LCD_X_DisplayDriver>
 80250dc:	e7b7      	b.n	802504e <_SetPos+0xae>
 80250de:	2050      	movs	r0, #80	; 0x50
 80250e0:	f7fa fb32 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 80250e4:	4621      	mov	r1, r4
 80250e6:	60a8      	str	r0, [r5, #8]
 80250e8:	2250      	movs	r2, #80	; 0x50
 80250ea:	f7fd f913 	bl	8022314 <GUI__memset>
 80250ee:	68ac      	ldr	r4, [r5, #8]
 80250f0:	2c00      	cmp	r4, #0
 80250f2:	f43f af6b 	beq.w	8024fcc <_SetPos+0x2c>
 80250f6:	e7b8      	b.n	802506a <_SetPos+0xca>
 80250f8:	2050      	movs	r0, #80	; 0x50
 80250fa:	f7fa fb25 	bl	801f748 <GUI_ALLOC_GetFixedBlock>
 80250fe:	4621      	mov	r1, r4
 8025100:	60a8      	str	r0, [r5, #8]
 8025102:	2250      	movs	r2, #80	; 0x50
 8025104:	f7fd f906 	bl	8022314 <GUI__memset>
 8025108:	68ac      	ldr	r4, [r5, #8]
 802510a:	2c00      	cmp	r4, #0
 802510c:	d09f      	beq.n	802504e <_SetPos+0xae>
 802510e:	e7dc      	b.n	80250ca <_SetPos+0x12a>

08025110 <_GetDevData>:
 8025110:	2901      	cmp	r1, #1
 8025112:	4802      	ldr	r0, [pc, #8]	; (802511c <_GetDevData+0xc>)
 8025114:	bf18      	it	ne
 8025116:	2000      	movne	r0, #0
 8025118:	4770      	bx	lr
 802511a:	bf00      	nop
 802511c:	0804145c 	.word	0x0804145c

08025120 <_GetDevFunc>:
 8025120:	2916      	cmp	r1, #22
 8025122:	4802      	ldr	r0, [pc, #8]	; (802512c <_GetDevFunc+0xc>)
 8025124:	bf18      	it	ne
 8025126:	2000      	movne	r0, #0
 8025128:	4770      	bx	lr
 802512a:	bf00      	nop
 802512c:	0802604d 	.word	0x0802604d

08025130 <_GetDevProp>:
 8025130:	2908      	cmp	r1, #8
 8025132:	bf0c      	ite	eq
 8025134:	2020      	moveq	r0, #32
 8025136:	2000      	movne	r0, #0
 8025138:	4770      	bx	lr
 802513a:	bf00      	nop

0802513c <_SetOrg>:
 802513c:	6800      	ldr	r0, [r0, #0]
 802513e:	68c3      	ldr	r3, [r0, #12]
 8025140:	6a1b      	ldr	r3, [r3, #32]
 8025142:	4718      	bx	r3

08025144 <_GetRect>:
 8025144:	b570      	push	{r4, r5, r6, lr}
 8025146:	b082      	sub	sp, #8
 8025148:	6880      	ldr	r0, [r0, #8]
 802514a:	460c      	mov	r4, r1
 802514c:	f7fa fc2c 	bl	801f9a8 <GUI_ALLOC_LockH>
 8025150:	a902      	add	r1, sp, #8
 8025152:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8025156:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 802515a:	8902      	ldrh	r2, [r0, #8]
 802515c:	8943      	ldrh	r3, [r0, #10]
 802515e:	f841 0d04 	str.w	r0, [r1, #-4]!
 8025162:	4432      	add	r2, r6
 8025164:	442b      	add	r3, r5
 8025166:	3a01      	subs	r2, #1
 8025168:	3b01      	subs	r3, #1
 802516a:	8026      	strh	r6, [r4, #0]
 802516c:	80a2      	strh	r2, [r4, #4]
 802516e:	8065      	strh	r5, [r4, #2]
 8025170:	80e3      	strh	r3, [r4, #6]
 8025172:	4608      	mov	r0, r1
 8025174:	f7fa fc2a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025178:	b002      	add	sp, #8
 802517a:	bd70      	pop	{r4, r5, r6, pc}

0802517c <_DrawBitmap>:
 802517c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025180:	4caa      	ldr	r4, [pc, #680]	; (802542c <_DrawBitmap+0x2b0>)
 8025182:	6824      	ldr	r4, [r4, #0]
 8025184:	b093      	sub	sp, #76	; 0x4c
 8025186:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8025188:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802518a:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 802518e:	b916      	cbnz	r6, 8025196 <_DrawBitmap+0x1a>
 8025190:	b013      	add	sp, #76	; 0x4c
 8025192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025196:	4607      	mov	r7, r0
 8025198:	4630      	mov	r0, r6
 802519a:	9208      	str	r2, [sp, #32]
 802519c:	9303      	str	r3, [sp, #12]
 802519e:	460c      	mov	r4, r1
 80251a0:	f7fa fc02 	bl	801f9a8 <GUI_ALLOC_LockH>
 80251a4:	6942      	ldr	r2, [r0, #20]
 80251a6:	900f      	str	r0, [sp, #60]	; 0x3c
 80251a8:	2a00      	cmp	r2, #0
 80251aa:	f040 80d6 	bne.w	802535a <_DrawBitmap+0x1de>
 80251ae:	4603      	mov	r3, r0
 80251b0:	68db      	ldr	r3, [r3, #12]
 80251b2:	9304      	str	r3, [sp, #16]
 80251b4:	a80f      	add	r0, sp, #60	; 0x3c
 80251b6:	9210      	str	r2, [sp, #64]	; 0x40
 80251b8:	f7fa fc08 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80251bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80251be:	9810      	ldr	r0, [sp, #64]	; 0x40
 80251c0:	18e3      	adds	r3, r4, r3
 80251c2:	9305      	str	r3, [sp, #20]
 80251c4:	4b99      	ldr	r3, [pc, #612]	; (802542c <_DrawBitmap+0x2b0>)
 80251c6:	681b      	ldr	r3, [r3, #0]
 80251c8:	b120      	cbz	r0, 80251d4 <_DrawBitmap+0x58>
 80251ca:	7c1a      	ldrb	r2, [r3, #16]
 80251cc:	4c97      	ldr	r4, [pc, #604]	; (802542c <_DrawBitmap+0x2b0>)
 80251ce:	0796      	lsls	r6, r2, #30
 80251d0:	f140 8098 	bpl.w	8025304 <_DrawBitmap+0x188>
 80251d4:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80251d6:	f7fa fbe7 	bl	801f9a8 <GUI_ALLOC_LockH>
 80251da:	4604      	mov	r4, r0
 80251dc:	9908      	ldr	r1, [sp, #32]
 80251de:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80251e2:	68e3      	ldr	r3, [r4, #12]
 80251e4:	1a8a      	subs	r2, r1, r2
 80251e6:	fb03 f302 	mul.w	r3, r3, r2
 80251ea:	9905      	ldr	r1, [sp, #20]
 80251ec:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80251f0:	a812      	add	r0, sp, #72	; 0x48
 80251f2:	1a8a      	subs	r2, r1, r2
 80251f4:	3318      	adds	r3, #24
 80251f6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80251fa:	18e3      	adds	r3, r4, r3
 80251fc:	f840 4d04 	str.w	r4, [r0, #-4]!
 8025200:	9302      	str	r3, [sp, #8]
 8025202:	f7fa fbe3 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025206:	2d17      	cmp	r5, #23
 8025208:	dd4d      	ble.n	80252a6 <_DrawBitmap+0x12a>
 802520a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802520c:	2b00      	cmp	r3, #0
 802520e:	dd40      	ble.n	8025292 <_DrawBitmap+0x116>
 8025210:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8025214:	9707      	str	r7, [sp, #28]
 8025216:	4443      	add	r3, r8
 8025218:	9306      	str	r3, [sp, #24]
 802521a:	9b03      	ldr	r3, [sp, #12]
 802521c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8025438 <_DrawBitmap+0x2bc>
 8025220:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 8025222:	009b      	lsls	r3, r3, #2
 8025224:	9308      	str	r3, [sp, #32]
 8025226:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025228:	b128      	cbz	r0, 8025236 <_DrawBitmap+0xba>
 802522a:	6883      	ldr	r3, [r0, #8]
 802522c:	9905      	ldr	r1, [sp, #20]
 802522e:	685c      	ldr	r4, [r3, #4]
 8025230:	9b03      	ldr	r3, [sp, #12]
 8025232:	4642      	mov	r2, r8
 8025234:	47a0      	blx	r4
 8025236:	9b07      	ldr	r3, [sp, #28]
 8025238:	691b      	ldr	r3, [r3, #16]
 802523a:	68da      	ldr	r2, [r3, #12]
 802523c:	2a00      	cmp	r2, #0
 802523e:	f040 8085 	bne.w	802534c <_DrawBitmap+0x1d0>
 8025242:	685b      	ldr	r3, [r3, #4]
 8025244:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8025248:	4798      	blx	r3
 802524a:	f8dd a008 	ldr.w	sl, [sp, #8]
 802524e:	9c03      	ldr	r4, [sp, #12]
 8025250:	0e05      	lsrs	r5, r0, #24
 8025252:	463e      	mov	r6, r7
 8025254:	4633      	mov	r3, r6
 8025256:	f04f 0e00 	mov.w	lr, #0
 802525a:	f853 2b04 	ldr.w	r2, [r3], #4
 802525e:	ebb5 6f12 	cmp.w	r5, r2, lsr #24
 8025262:	d058      	beq.n	8025316 <_DrawBitmap+0x19a>
 8025264:	f1be 0f00 	cmp.w	lr, #0
 8025268:	d159      	bne.n	802531e <_DrawBitmap+0x1a2>
 802526a:	6830      	ldr	r0, [r6, #0]
 802526c:	0e02      	lsrs	r2, r0, #24
 802526e:	d165      	bne.n	802533c <_DrawBitmap+0x1c0>
 8025270:	3c01      	subs	r4, #1
 8025272:	f10a 0a04 	add.w	sl, sl, #4
 8025276:	3604      	adds	r6, #4
 8025278:	2c00      	cmp	r4, #0
 802527a:	d1eb      	bne.n	8025254 <_DrawBitmap+0xd8>
 802527c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802527e:	9a04      	ldr	r2, [sp, #16]
 8025280:	441f      	add	r7, r3
 8025282:	9b02      	ldr	r3, [sp, #8]
 8025284:	4413      	add	r3, r2
 8025286:	9302      	str	r3, [sp, #8]
 8025288:	9b06      	ldr	r3, [sp, #24]
 802528a:	f108 0801 	add.w	r8, r8, #1
 802528e:	4598      	cmp	r8, r3
 8025290:	d1c9      	bne.n	8025226 <_DrawBitmap+0xaa>
 8025292:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025294:	2b00      	cmp	r3, #0
 8025296:	f43f af7b 	beq.w	8025190 <_DrawBitmap+0x14>
 802529a:	a810      	add	r0, sp, #64	; 0x40
 802529c:	f7fa fb96 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80252a0:	b013      	add	sp, #76	; 0x4c
 80252a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80252a6:	2d10      	cmp	r5, #16
 80252a8:	d05d      	beq.n	8025366 <_DrawBitmap+0x1ea>
 80252aa:	2d08      	cmp	r5, #8
 80252ac:	f000 80c6 	beq.w	802543c <_DrawBitmap+0x2c0>
 80252b0:	4b5f      	ldr	r3, [pc, #380]	; (8025430 <_DrawBitmap+0x2b4>)
 80252b2:	f1ba 0f00 	cmp.w	sl, #0
 80252b6:	bf08      	it	eq
 80252b8:	469a      	moveq	sl, r3
 80252ba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80252bc:	2b00      	cmp	r3, #0
 80252be:	f340 80ad 	ble.w	802541c <_DrawBitmap+0x2a0>
 80252c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80252c4:	9a02      	ldr	r2, [sp, #8]
 80252c6:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80252c8:	009b      	lsls	r3, r3, #2
 80252ca:	930a      	str	r3, [sp, #40]	; 0x28
 80252cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80252ce:	005b      	lsls	r3, r3, #1
 80252d0:	930c      	str	r3, [sp, #48]	; 0x30
 80252d2:	2300      	movs	r3, #0
 80252d4:	2d02      	cmp	r5, #2
 80252d6:	f000 8284 	beq.w	80257e2 <_DrawBitmap+0x666>
 80252da:	2d04      	cmp	r5, #4
 80252dc:	f000 8134 	beq.w	8025548 <_DrawBitmap+0x3cc>
 80252e0:	2d01      	cmp	r5, #1
 80252e2:	f000 8361 	beq.w	80259a8 <_DrawBitmap+0x82c>
 80252e6:	981e      	ldr	r0, [sp, #120]	; 0x78
 80252e8:	4401      	add	r1, r0
 80252ea:	9804      	ldr	r0, [sp, #16]
 80252ec:	4402      	add	r2, r0
 80252ee:	981c      	ldr	r0, [sp, #112]	; 0x70
 80252f0:	3301      	adds	r3, #1
 80252f2:	4298      	cmp	r0, r3
 80252f4:	dcee      	bgt.n	80252d4 <_DrawBitmap+0x158>
 80252f6:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 80252fa:	46de      	mov	lr, fp
 80252fc:	f1be 0f00 	cmp.w	lr, #0
 8025300:	d1cb      	bne.n	802529a <_DrawBitmap+0x11e>
 8025302:	e745      	b.n	8025190 <_DrawBitmap+0x14>
 8025304:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025306:	9300      	str	r3, [sp, #0]
 8025308:	9a08      	ldr	r2, [sp, #32]
 802530a:	9b03      	ldr	r3, [sp, #12]
 802530c:	9905      	ldr	r1, [sp, #20]
 802530e:	f000 fdc7 	bl	8025ea0 <GUI_USAGE_AddRect>
 8025312:	6823      	ldr	r3, [r4, #0]
 8025314:	e75e      	b.n	80251d4 <_DrawBitmap+0x58>
 8025316:	f10e 0e01 	add.w	lr, lr, #1
 802531a:	45a6      	cmp	lr, r4
 802531c:	d19d      	bne.n	802525a <_DrawBitmap+0xde>
 802531e:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 8025322:	4631      	mov	r1, r6
 8025324:	4650      	mov	r0, sl
 8025326:	465a      	mov	r2, fp
 8025328:	f8d9 3000 	ldr.w	r3, [r9]
 802532c:	ebce 0404 	rsb	r4, lr, r4
 8025330:	445e      	add	r6, fp
 8025332:	4798      	blx	r3
 8025334:	44da      	add	sl, fp
 8025336:	2c00      	cmp	r4, #0
 8025338:	d18c      	bne.n	8025254 <_DrawBitmap+0xd8>
 802533a:	e79f      	b.n	802527c <_DrawBitmap+0x100>
 802533c:	4b3d      	ldr	r3, [pc, #244]	; (8025434 <_DrawBitmap+0x2b8>)
 802533e:	f8da 1000 	ldr.w	r1, [sl]
 8025342:	681b      	ldr	r3, [r3, #0]
 8025344:	4798      	blx	r3
 8025346:	f8ca 0000 	str.w	r0, [sl]
 802534a:	e791      	b.n	8025270 <_DrawBitmap+0xf4>
 802534c:	f8d9 3000 	ldr.w	r3, [r9]
 8025350:	9a08      	ldr	r2, [sp, #32]
 8025352:	9802      	ldr	r0, [sp, #8]
 8025354:	4639      	mov	r1, r7
 8025356:	4798      	blx	r3
 8025358:	e790      	b.n	802527c <_DrawBitmap+0x100>
 802535a:	4610      	mov	r0, r2
 802535c:	f7fa fb24 	bl	801f9a8 <GUI_ALLOC_LockH>
 8025360:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025362:	4602      	mov	r2, r0
 8025364:	e724      	b.n	80251b0 <_DrawBitmap+0x34>
 8025366:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025368:	2b00      	cmp	r3, #0
 802536a:	dd92      	ble.n	8025292 <_DrawBitmap+0x116>
 802536c:	f8dd a020 	ldr.w	sl, [sp, #32]
 8025370:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8025372:	4453      	add	r3, sl
 8025374:	9306      	str	r3, [sp, #24]
 8025376:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025378:	f1a3 0b02 	sub.w	fp, r3, #2
 802537c:	b35e      	cbz	r6, 80253d6 <_DrawBitmap+0x25a>
 802537e:	68b2      	ldr	r2, [r6, #8]
 8025380:	9d03      	ldr	r5, [sp, #12]
 8025382:	6854      	ldr	r4, [r2, #4]
 8025384:	9905      	ldr	r1, [sp, #20]
 8025386:	462b      	mov	r3, r5
 8025388:	4652      	mov	r2, sl
 802538a:	4630      	mov	r0, r6
 802538c:	47a0      	blx	r4
 802538e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8025392:	9c05      	ldr	r4, [sp, #20]
 8025394:	46d9      	mov	r9, fp
 8025396:	693b      	ldr	r3, [r7, #16]
 8025398:	f839 0f02 	ldrh.w	r0, [r9, #2]!
 802539c:	685b      	ldr	r3, [r3, #4]
 802539e:	4798      	blx	r3
 80253a0:	68b3      	ldr	r3, [r6, #8]
 80253a2:	f848 0b04 	str.w	r0, [r8], #4
 80253a6:	4621      	mov	r1, r4
 80253a8:	681b      	ldr	r3, [r3, #0]
 80253aa:	4652      	mov	r2, sl
 80253ac:	4630      	mov	r0, r6
 80253ae:	4798      	blx	r3
 80253b0:	3d01      	subs	r5, #1
 80253b2:	f104 0401 	add.w	r4, r4, #1
 80253b6:	d1ee      	bne.n	8025396 <_DrawBitmap+0x21a>
 80253b8:	9b02      	ldr	r3, [sp, #8]
 80253ba:	9a04      	ldr	r2, [sp, #16]
 80253bc:	4413      	add	r3, r2
 80253be:	9302      	str	r3, [sp, #8]
 80253c0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80253c2:	449b      	add	fp, r3
 80253c4:	9b06      	ldr	r3, [sp, #24]
 80253c6:	f10a 0a01 	add.w	sl, sl, #1
 80253ca:	459a      	cmp	sl, r3
 80253cc:	f43f af61 	beq.w	8025292 <_DrawBitmap+0x116>
 80253d0:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80253d2:	2e00      	cmp	r6, #0
 80253d4:	d1d3      	bne.n	802537e <_DrawBitmap+0x202>
 80253d6:	9d02      	ldr	r5, [sp, #8]
 80253d8:	9c03      	ldr	r4, [sp, #12]
 80253da:	465e      	mov	r6, fp
 80253dc:	693b      	ldr	r3, [r7, #16]
 80253de:	f836 0f02 	ldrh.w	r0, [r6, #2]!
 80253e2:	685b      	ldr	r3, [r3, #4]
 80253e4:	4798      	blx	r3
 80253e6:	3c01      	subs	r4, #1
 80253e8:	f845 0b04 	str.w	r0, [r5], #4
 80253ec:	d1f6      	bne.n	80253dc <_DrawBitmap+0x260>
 80253ee:	e7e3      	b.n	80253b8 <_DrawBitmap+0x23c>
 80253f0:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 80253f4:	9b06      	ldr	r3, [sp, #24]
 80253f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80253f8:	3301      	adds	r3, #1
 80253fa:	461c      	mov	r4, r3
 80253fc:	9306      	str	r3, [sp, #24]
 80253fe:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025400:	4413      	add	r3, r2
 8025402:	931f      	str	r3, [sp, #124]	; 0x7c
 8025404:	9a04      	ldr	r2, [sp, #16]
 8025406:	9b02      	ldr	r3, [sp, #8]
 8025408:	a80f      	add	r0, sp, #60	; 0x3c
 802540a:	4413      	add	r3, r2
 802540c:	9302      	str	r3, [sp, #8]
 802540e:	f7fa fadd 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025412:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025414:	461a      	mov	r2, r3
 8025416:	42a2      	cmp	r2, r4
 8025418:	f300 82cf 	bgt.w	80259ba <_DrawBitmap+0x83e>
 802541c:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8025420:	f1be 0f00 	cmp.w	lr, #0
 8025424:	f47f af39 	bne.w	802529a <_DrawBitmap+0x11e>
 8025428:	e6b2      	b.n	8025190 <_DrawBitmap+0x14>
 802542a:	bf00      	nop
 802542c:	200000e8 	.word	0x200000e8
 8025430:	08041490 	.word	0x08041490
 8025434:	20000100 	.word	0x20000100
 8025438:	20000108 	.word	0x20000108
 802543c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802543e:	2b00      	cmp	r3, #0
 8025440:	f340 8380 	ble.w	8025b44 <_DrawBitmap+0x9c8>
 8025444:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8025448:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 802544c:	9a03      	ldr	r2, [sp, #12]
 802544e:	444b      	add	r3, r9
 8025450:	9306      	str	r3, [sp, #24]
 8025452:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025454:	4658      	mov	r0, fp
 8025456:	189c      	adds	r4, r3, r2
 8025458:	465d      	mov	r5, fp
 802545a:	4bb9      	ldr	r3, [pc, #740]	; (8025740 <_DrawBitmap+0x5c4>)
 802545c:	681b      	ldr	r3, [r3, #0]
 802545e:	7c1b      	ldrb	r3, [r3, #16]
 8025460:	f1ba 0f00 	cmp.w	sl, #0
 8025464:	d041      	beq.n	80254ea <_DrawBitmap+0x36e>
 8025466:	f013 0303 	ands.w	r3, r3, #3
 802546a:	d033      	beq.n	80254d4 <_DrawBitmap+0x358>
 802546c:	2b02      	cmp	r3, #2
 802546e:	d11e      	bne.n	80254ae <_DrawBitmap+0x332>
 8025470:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8025472:	2d00      	cmp	r5, #0
 8025474:	d05c      	beq.n	8025530 <_DrawBitmap+0x3b4>
 8025476:	f8dd 8008 	ldr.w	r8, [sp, #8]
 802547a:	9f03      	ldr	r7, [sp, #12]
 802547c:	9e05      	ldr	r6, [sp, #20]
 802547e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8025482:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 8025486:	4631      	mov	r1, r6
 8025488:	464a      	mov	r2, r9
 802548a:	3601      	adds	r6, #1
 802548c:	4628      	mov	r0, r5
 802548e:	b143      	cbz	r3, 80254a2 <_DrawBitmap+0x326>
 8025490:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8025494:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8025498:	f8c8 3000 	str.w	r3, [r8]
 802549c:	f8de 3000 	ldr.w	r3, [lr]
 80254a0:	4798      	blx	r3
 80254a2:	3f01      	subs	r7, #1
 80254a4:	f108 0804 	add.w	r8, r8, #4
 80254a8:	d1eb      	bne.n	8025482 <_DrawBitmap+0x306>
 80254aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80254ac:	4628      	mov	r0, r5
 80254ae:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80254b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80254b2:	4413      	add	r3, r2
 80254b4:	931f      	str	r3, [sp, #124]	; 0x7c
 80254b6:	9a04      	ldr	r2, [sp, #16]
 80254b8:	9b02      	ldr	r3, [sp, #8]
 80254ba:	4413      	add	r3, r2
 80254bc:	9302      	str	r3, [sp, #8]
 80254be:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80254c0:	441c      	add	r4, r3
 80254c2:	9b06      	ldr	r3, [sp, #24]
 80254c4:	f109 0901 	add.w	r9, r9, #1
 80254c8:	454b      	cmp	r3, r9
 80254ca:	d1c6      	bne.n	802545a <_DrawBitmap+0x2de>
 80254cc:	2800      	cmp	r0, #0
 80254ce:	f47f aee4 	bne.w	802529a <_DrawBitmap+0x11e>
 80254d2:	e65d      	b.n	8025190 <_DrawBitmap+0x14>
 80254d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80254d6:	9a02      	ldr	r2, [sp, #8]
 80254d8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80254dc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80254e0:	f842 1b04 	str.w	r1, [r2], #4
 80254e4:	429c      	cmp	r4, r3
 80254e6:	d1f7      	bne.n	80254d8 <_DrawBitmap+0x35c>
 80254e8:	e7e1      	b.n	80254ae <_DrawBitmap+0x332>
 80254ea:	f013 0303 	ands.w	r3, r3, #3
 80254ee:	f000 8252 	beq.w	8025996 <_DrawBitmap+0x81a>
 80254f2:	2b02      	cmp	r3, #2
 80254f4:	d1db      	bne.n	80254ae <_DrawBitmap+0x332>
 80254f6:	2d00      	cmp	r5, #0
 80254f8:	f000 8319 	beq.w	8025b2e <_DrawBitmap+0x9b2>
 80254fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80254fe:	9f02      	ldr	r7, [sp, #8]
 8025500:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8025504:	9e05      	ldr	r6, [sp, #20]
 8025506:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 802550a:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 802550e:	4631      	mov	r1, r6
 8025510:	464a      	mov	r2, r9
 8025512:	3601      	adds	r6, #1
 8025514:	4628      	mov	r0, r5
 8025516:	b12b      	cbz	r3, 8025524 <_DrawBitmap+0x3a8>
 8025518:	f8d5 e008 	ldr.w	lr, [r5, #8]
 802551c:	603b      	str	r3, [r7, #0]
 802551e:	f8de 3000 	ldr.w	r3, [lr]
 8025522:	4798      	blx	r3
 8025524:	f1bb 0b01 	subs.w	fp, fp, #1
 8025528:	f107 0704 	add.w	r7, r7, #4
 802552c:	d1ed      	bne.n	802550a <_DrawBitmap+0x38e>
 802552e:	e7bc      	b.n	80254aa <_DrawBitmap+0x32e>
 8025530:	9a02      	ldr	r2, [sp, #8]
 8025532:	f813 1b01 	ldrb.w	r1, [r3], #1
 8025536:	b111      	cbz	r1, 802553e <_DrawBitmap+0x3c2>
 8025538:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 802553c:	6011      	str	r1, [r2, #0]
 802553e:	42a3      	cmp	r3, r4
 8025540:	f102 0204 	add.w	r2, r2, #4
 8025544:	d1f5      	bne.n	8025532 <_DrawBitmap+0x3b6>
 8025546:	e7b1      	b.n	80254ac <_DrawBitmap+0x330>
 8025548:	911f      	str	r1, [sp, #124]	; 0x7c
 802554a:	9920      	ldr	r1, [sp, #128]	; 0x80
 802554c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8025550:	9306      	str	r3, [sp, #24]
 8025552:	f1c1 0302 	rsb	r3, r1, #2
 8025556:	b2d9      	uxtb	r1, r3
 8025558:	46d8      	mov	r8, fp
 802555a:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 802555e:	910b      	str	r1, [sp, #44]	; 0x2c
 8025560:	4613      	mov	r3, r2
 8025562:	3304      	adds	r3, #4
 8025564:	9307      	str	r3, [sp, #28]
 8025566:	46c6      	mov	lr, r8
 8025568:	4645      	mov	r5, r8
 802556a:	4b75      	ldr	r3, [pc, #468]	; (8025740 <_DrawBitmap+0x5c4>)
 802556c:	990a      	ldr	r1, [sp, #40]	; 0x28
 802556e:	681a      	ldr	r2, [r3, #0]
 8025570:	f89b 3000 	ldrb.w	r3, [fp]
 8025574:	7c12      	ldrb	r2, [r2, #16]
 8025576:	408b      	lsls	r3, r1
 8025578:	f002 0203 	and.w	r2, r2, #3
 802557c:	9907      	ldr	r1, [sp, #28]
 802557e:	2a01      	cmp	r2, #1
 8025580:	b2dc      	uxtb	r4, r3
 8025582:	f1a1 0904 	sub.w	r9, r1, #4
 8025586:	f000 80b9 	beq.w	80256fc <_DrawBitmap+0x580>
 802558a:	d373      	bcc.n	8025674 <_DrawBitmap+0x4f8>
 802558c:	2a02      	cmp	r2, #2
 802558e:	d161      	bne.n	8025654 <_DrawBitmap+0x4d8>
 8025590:	9908      	ldr	r1, [sp, #32]
 8025592:	9a06      	ldr	r2, [sp, #24]
 8025594:	440a      	add	r2, r1
 8025596:	9920      	ldr	r1, [sp, #128]	; 0x80
 8025598:	9209      	str	r2, [sp, #36]	; 0x24
 802559a:	2900      	cmp	r1, #0
 802559c:	f000 80f2 	beq.w	8025784 <_DrawBitmap+0x608>
 80255a0:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80255a4:	d00a      	beq.n	80255bc <_DrawBitmap+0x440>
 80255a6:	0924      	lsrs	r4, r4, #4
 80255a8:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 80255ac:	f8c9 3000 	str.w	r3, [r9]
 80255b0:	b125      	cbz	r5, 80255bc <_DrawBitmap+0x440>
 80255b2:	68ab      	ldr	r3, [r5, #8]
 80255b4:	9905      	ldr	r1, [sp, #20]
 80255b6:	681b      	ldr	r3, [r3, #0]
 80255b8:	4628      	mov	r0, r5
 80255ba:	4798      	blx	r3
 80255bc:	9b05      	ldr	r3, [sp, #20]
 80255be:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80255c2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80255c6:	3301      	adds	r3, #1
 80255c8:	9302      	str	r3, [sp, #8]
 80255ca:	9b03      	ldr	r3, [sp, #12]
 80255cc:	f10b 0701 	add.w	r7, fp, #1
 80255d0:	1e5e      	subs	r6, r3, #1
 80255d2:	2e01      	cmp	r6, #1
 80255d4:	f340 80c5 	ble.w	8025762 <_DrawBitmap+0x5e6>
 80255d8:	2d00      	cmp	r5, #0
 80255da:	f000 80db 	beq.w	8025794 <_DrawBitmap+0x618>
 80255de:	9b02      	ldr	r3, [sp, #8]
 80255e0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80255e4:	4632      	mov	r2, r6
 80255e6:	f109 0808 	add.w	r8, r9, #8
 80255ea:	960d      	str	r6, [sp, #52]	; 0x34
 80255ec:	4691      	mov	r9, r2
 80255ee:	461e      	mov	r6, r3
 80255f0:	e021      	b.n	8025636 <_DrawBitmap+0x4ba>
 80255f2:	f8d5 e008 	ldr.w	lr, [r5, #8]
 80255f6:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80255fa:	f848 3c08 	str.w	r3, [r8, #-8]
 80255fe:	f8de 3000 	ldr.w	r3, [lr]
 8025602:	4798      	blx	r3
 8025604:	f014 040f 	ands.w	r4, r4, #15
 8025608:	d009      	beq.n	802561e <_DrawBitmap+0x4a2>
 802560a:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 802560e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025610:	f848 3c04 	str.w	r3, [r8, #-4]
 8025614:	68ab      	ldr	r3, [r5, #8]
 8025616:	1c71      	adds	r1, r6, #1
 8025618:	681b      	ldr	r3, [r3, #0]
 802561a:	4628      	mov	r0, r5
 802561c:	4798      	blx	r3
 802561e:	f1a9 0902 	sub.w	r9, r9, #2
 8025622:	f1b9 0f01 	cmp.w	r9, #1
 8025626:	f106 0602 	add.w	r6, r6, #2
 802562a:	f108 0808 	add.w	r8, r8, #8
 802562e:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 8025632:	f340 8087 	ble.w	8025744 <_DrawBitmap+0x5c8>
 8025636:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 802563a:	ea4f 1314 	mov.w	r3, r4, lsr #4
 802563e:	4631      	mov	r1, r6
 8025640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025642:	4628      	mov	r0, r5
 8025644:	d1d5      	bne.n	80255f2 <_DrawBitmap+0x476>
 8025646:	2c00      	cmp	r4, #0
 8025648:	d0e9      	beq.n	802561e <_DrawBitmap+0x4a2>
 802564a:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 802564e:	f848 3c04 	str.w	r3, [r8, #-4]
 8025652:	e7df      	b.n	8025614 <_DrawBitmap+0x498>
 8025654:	9b06      	ldr	r3, [sp, #24]
 8025656:	991c      	ldr	r1, [sp, #112]	; 0x70
 8025658:	3301      	adds	r3, #1
 802565a:	461a      	mov	r2, r3
 802565c:	9306      	str	r3, [sp, #24]
 802565e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025660:	449b      	add	fp, r3
 8025662:	9b04      	ldr	r3, [sp, #16]
 8025664:	428a      	cmp	r2, r1
 8025666:	46a8      	mov	r8, r5
 8025668:	444b      	add	r3, r9
 802566a:	f6ff af7a 	blt.w	8025562 <_DrawBitmap+0x3e6>
 802566e:	46ab      	mov	fp, r5
 8025670:	46de      	mov	lr, fp
 8025672:	e643      	b.n	80252fc <_DrawBitmap+0x180>
 8025674:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025676:	2b00      	cmp	r3, #0
 8025678:	f000 8089 	beq.w	802578e <_DrawBitmap+0x612>
 802567c:	0924      	lsrs	r4, r4, #4
 802567e:	9b03      	ldr	r3, [sp, #12]
 8025680:	1e59      	subs	r1, r3, #1
 8025682:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8025686:	f8c9 3000 	str.w	r3, [r9]
 802568a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802568e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8025692:	f10b 0201 	add.w	r2, fp, #1
 8025696:	2901      	cmp	r1, #1
 8025698:	dd18      	ble.n	80256cc <_DrawBitmap+0x550>
 802569a:	104f      	asrs	r7, r1, #1
 802569c:	19d6      	adds	r6, r2, r7
 802569e:	f001 0101 	and.w	r1, r1, #1
 80256a2:	f109 0308 	add.w	r3, r9, #8
 80256a6:	0920      	lsrs	r0, r4, #4
 80256a8:	f004 040f 	and.w	r4, r4, #15
 80256ac:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 80256b0:	f843 0c08 	str.w	r0, [r3, #-8]
 80256b4:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 80256b8:	f843 0c04 	str.w	r0, [r3, #-4]
 80256bc:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 80256c0:	42b2      	cmp	r2, r6
 80256c2:	f103 0308 	add.w	r3, r3, #8
 80256c6:	d1ee      	bne.n	80256a6 <_DrawBitmap+0x52a>
 80256c8:	eb09 09c7 	add.w	r9, r9, r7, lsl #3
 80256cc:	b121      	cbz	r1, 80256d8 <_DrawBitmap+0x55c>
 80256ce:	0924      	lsrs	r4, r4, #4
 80256d0:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 80256d4:	f8c9 3000 	str.w	r3, [r9]
 80256d8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80256da:	9904      	ldr	r1, [sp, #16]
 80256dc:	9b06      	ldr	r3, [sp, #24]
 80256de:	4493      	add	fp, r2
 80256e0:	9a07      	ldr	r2, [sp, #28]
 80256e2:	440a      	add	r2, r1
 80256e4:	9207      	str	r2, [sp, #28]
 80256e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80256e8:	3301      	adds	r3, #1
 80256ea:	429a      	cmp	r2, r3
 80256ec:	9306      	str	r3, [sp, #24]
 80256ee:	f73f af3c 	bgt.w	802556a <_DrawBitmap+0x3ee>
 80256f2:	f1be 0f00 	cmp.w	lr, #0
 80256f6:	f47f add0 	bne.w	802529a <_DrawBitmap+0x11e>
 80256fa:	e549      	b.n	8025190 <_DrawBitmap+0x14>
 80256fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80256fe:	9903      	ldr	r1, [sp, #12]
 8025700:	4658      	mov	r0, fp
 8025702:	428b      	cmp	r3, r1
 8025704:	bfc8      	it	gt
 8025706:	b2cb      	uxtbgt	r3, r1
 8025708:	1e5a      	subs	r2, r3, #1
 802570a:	b2d2      	uxtb	r2, r2
 802570c:	3201      	adds	r2, #1
 802570e:	1ac9      	subs	r1, r1, r3
 8025710:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8025714:	0123      	lsls	r3, r4, #4
 8025716:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 802571a:	b2dc      	uxtb	r4, r3
 802571c:	d005      	beq.n	802572a <_DrawBitmap+0x5ae>
 802571e:	f8d9 3000 	ldr.w	r3, [r9]
 8025722:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 8025726:	f8c9 3000 	str.w	r3, [r9]
 802572a:	f109 0904 	add.w	r9, r9, #4
 802572e:	4591      	cmp	r9, r2
 8025730:	d1f0      	bne.n	8025714 <_DrawBitmap+0x598>
 8025732:	2900      	cmp	r1, #0
 8025734:	d0d0      	beq.n	80256d8 <_DrawBitmap+0x55c>
 8025736:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 802573a:	2302      	movs	r3, #2
 802573c:	e7e1      	b.n	8025702 <_DrawBitmap+0x586>
 802573e:	bf00      	nop
 8025740:	200000e8 	.word	0x200000e8
 8025744:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8025746:	9902      	ldr	r1, [sp, #8]
 8025748:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 802574c:	3e02      	subs	r6, #2
 802574e:	0873      	lsrs	r3, r6, #1
 8025750:	3102      	adds	r1, #2
 8025752:	1c5a      	adds	r2, r3, #1
 8025754:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8025758:	9102      	str	r1, [sp, #8]
 802575a:	eba6 0643 	sub.w	r6, r6, r3, lsl #1
 802575e:	eb09 09c2 	add.w	r9, r9, r2, lsl #3
 8025762:	b166      	cbz	r6, 802577e <_DrawBitmap+0x602>
 8025764:	0924      	lsrs	r4, r4, #4
 8025766:	d00a      	beq.n	802577e <_DrawBitmap+0x602>
 8025768:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 802576c:	f8c9 3000 	str.w	r3, [r9]
 8025770:	b12d      	cbz	r5, 802577e <_DrawBitmap+0x602>
 8025772:	68ab      	ldr	r3, [r5, #8]
 8025774:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025776:	9902      	ldr	r1, [sp, #8]
 8025778:	681b      	ldr	r3, [r3, #0]
 802577a:	4628      	mov	r0, r5
 802577c:	4798      	blx	r3
 802577e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8025780:	46ae      	mov	lr, r5
 8025782:	e7a9      	b.n	80256d8 <_DrawBitmap+0x55c>
 8025784:	9b05      	ldr	r3, [sp, #20]
 8025786:	9e03      	ldr	r6, [sp, #12]
 8025788:	9302      	str	r3, [sp, #8]
 802578a:	465f      	mov	r7, fp
 802578c:	e721      	b.n	80255d2 <_DrawBitmap+0x456>
 802578e:	9903      	ldr	r1, [sp, #12]
 8025790:	465a      	mov	r2, fp
 8025792:	e780      	b.n	8025696 <_DrawBitmap+0x51a>
 8025794:	3e02      	subs	r6, #2
 8025796:	0872      	lsrs	r2, r6, #1
 8025798:	1c51      	adds	r1, r2, #1
 802579a:	1878      	adds	r0, r7, r1
 802579c:	f109 0308 	add.w	r3, r9, #8
 80257a0:	4694      	mov	ip, r2
 80257a2:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 80257a6:	ea4f 1e14 	mov.w	lr, r4, lsr #4
 80257aa:	d003      	beq.n	80257b4 <_DrawBitmap+0x638>
 80257ac:	f85a 202e 	ldr.w	r2, [sl, lr, lsl #2]
 80257b0:	f843 2c08 	str.w	r2, [r3, #-8]
 80257b4:	f014 040f 	ands.w	r4, r4, #15
 80257b8:	d003      	beq.n	80257c2 <_DrawBitmap+0x646>
 80257ba:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 80257be:	f843 4c04 	str.w	r4, [r3, #-4]
 80257c2:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 80257c6:	42b8      	cmp	r0, r7
 80257c8:	f103 0308 	add.w	r3, r3, #8
 80257cc:	d1e9      	bne.n	80257a2 <_DrawBitmap+0x626>
 80257ce:	9b02      	ldr	r3, [sp, #8]
 80257d0:	3302      	adds	r3, #2
 80257d2:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 80257d6:	9302      	str	r3, [sp, #8]
 80257d8:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
 80257dc:	eba6 064c 	sub.w	r6, r6, ip, lsl #1
 80257e0:	e7bf      	b.n	8025762 <_DrawBitmap+0x5e6>
 80257e2:	9306      	str	r3, [sp, #24]
 80257e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80257e6:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 80257ea:	9202      	str	r2, [sp, #8]
 80257ec:	f1c3 0304 	rsb	r3, r3, #4
 80257f0:	b2db      	uxtb	r3, r3
 80257f2:	911f      	str	r1, [sp, #124]	; 0x7c
 80257f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80257f6:	46d0      	mov	r8, sl
 80257f8:	46de      	mov	lr, fp
 80257fa:	465f      	mov	r7, fp
 80257fc:	4bab      	ldr	r3, [pc, #684]	; (8025aac <_DrawBitmap+0x930>)
 80257fe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8025800:	681b      	ldr	r3, [r3, #0]
 8025802:	7814      	ldrb	r4, [r2, #0]
 8025804:	7c1b      	ldrb	r3, [r3, #16]
 8025806:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025808:	f003 0303 	and.w	r3, r3, #3
 802580c:	4094      	lsls	r4, r2
 802580e:	2b01      	cmp	r3, #1
 8025810:	b2e4      	uxtb	r4, r4
 8025812:	f000 808f 	beq.w	8025934 <_DrawBitmap+0x7b8>
 8025816:	d358      	bcc.n	80258ca <_DrawBitmap+0x74e>
 8025818:	2b02      	cmp	r3, #2
 802581a:	f040 80aa 	bne.w	8025972 <_DrawBitmap+0x7f6>
 802581e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8025820:	9209      	str	r2, [sp, #36]	; 0x24
 8025822:	9a05      	ldr	r2, [sp, #20]
 8025824:	9207      	str	r2, [sp, #28]
 8025826:	9906      	ldr	r1, [sp, #24]
 8025828:	9a08      	ldr	r2, [sp, #32]
 802582a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802582c:	9d02      	ldr	r5, [sp, #8]
 802582e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8025832:	eb02 0b01 	add.w	fp, r2, r1
 8025836:	4553      	cmp	r3, sl
 8025838:	bfc8      	it	gt
 802583a:	fa5f f38a 	uxtbgt.w	r3, sl
 802583e:	ebc3 0a0a 	rsb	sl, r3, sl
 8025842:	3b01      	subs	r3, #1
 8025844:	b35f      	cbz	r7, 802589e <_DrawBitmap+0x722>
 8025846:	b2db      	uxtb	r3, r3
 8025848:	f103 0901 	add.w	r9, r3, #1
 802584c:	9e07      	ldr	r6, [sp, #28]
 802584e:	930a      	str	r3, [sp, #40]	; 0x28
 8025850:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 8025854:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8025858:	4631      	mov	r1, r6
 802585a:	ea4f 1394 	mov.w	r3, r4, lsr #6
 802585e:	f106 0601 	add.w	r6, r6, #1
 8025862:	465a      	mov	r2, fp
 8025864:	4638      	mov	r0, r7
 8025866:	d007      	beq.n	8025878 <_DrawBitmap+0x6fc>
 8025868:	f8d7 e008 	ldr.w	lr, [r7, #8]
 802586c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8025870:	602b      	str	r3, [r5, #0]
 8025872:	f8de 3000 	ldr.w	r3, [lr]
 8025876:	4798      	blx	r3
 8025878:	3504      	adds	r5, #4
 802587a:	00a4      	lsls	r4, r4, #2
 802587c:	454d      	cmp	r5, r9
 802587e:	b2e4      	uxtb	r4, r4
 8025880:	d1e8      	bne.n	8025854 <_DrawBitmap+0x6d8>
 8025882:	9b07      	ldr	r3, [sp, #28]
 8025884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025886:	3301      	adds	r3, #1
 8025888:	441a      	add	r2, r3
 802588a:	9207      	str	r2, [sp, #28]
 802588c:	f1ba 0f00 	cmp.w	sl, #0
 8025890:	d03a      	beq.n	8025908 <_DrawBitmap+0x78c>
 8025892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025894:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8025898:	9309      	str	r3, [sp, #36]	; 0x24
 802589a:	2304      	movs	r3, #4
 802589c:	e7cb      	b.n	8025836 <_DrawBitmap+0x6ba>
 802589e:	b2da      	uxtb	r2, r3
 80258a0:	1c50      	adds	r0, r2, #1
 80258a2:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80258a6:	09a1      	lsrs	r1, r4, #6
 80258a8:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 80258ac:	ea4f 0384 	mov.w	r3, r4, lsl #2
 80258b0:	b2dc      	uxtb	r4, r3
 80258b2:	bf1c      	itt	ne
 80258b4:	f858 3021 	ldrne.w	r3, [r8, r1, lsl #2]
 80258b8:	602b      	strne	r3, [r5, #0]
 80258ba:	3504      	adds	r5, #4
 80258bc:	42a8      	cmp	r0, r5
 80258be:	d1f2      	bne.n	80258a6 <_DrawBitmap+0x72a>
 80258c0:	9b07      	ldr	r3, [sp, #28]
 80258c2:	3301      	adds	r3, #1
 80258c4:	18d3      	adds	r3, r2, r3
 80258c6:	9307      	str	r3, [sp, #28]
 80258c8:	e7e0      	b.n	802588c <_DrawBitmap+0x710>
 80258ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80258cc:	9e02      	ldr	r6, [sp, #8]
 80258ce:	9d03      	ldr	r5, [sp, #12]
 80258d0:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
 80258d4:	42ab      	cmp	r3, r5
 80258d6:	bfc8      	it	gt
 80258d8:	b2eb      	uxtbgt	r3, r5
 80258da:	1e58      	subs	r0, r3, #1
 80258dc:	b2c0      	uxtb	r0, r0
 80258de:	1aed      	subs	r5, r5, r3
 80258e0:	eb06 0180 	add.w	r1, r6, r0, lsl #2
 80258e4:	1f33      	subs	r3, r6, #4
 80258e6:	09a2      	lsrs	r2, r4, #6
 80258e8:	00a4      	lsls	r4, r4, #2
 80258ea:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80258ee:	f843 2f04 	str.w	r2, [r3, #4]!
 80258f2:	428b      	cmp	r3, r1
 80258f4:	b2e4      	uxtb	r4, r4
 80258f6:	d1f6      	bne.n	80258e6 <_DrawBitmap+0x76a>
 80258f8:	3001      	adds	r0, #1
 80258fa:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 80258fe:	b12d      	cbz	r5, 802590c <_DrawBitmap+0x790>
 8025900:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 8025904:	2304      	movs	r3, #4
 8025906:	e7e5      	b.n	80258d4 <_DrawBitmap+0x758>
 8025908:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802590a:	46be      	mov	lr, r7
 802590c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 802590e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8025910:	9b06      	ldr	r3, [sp, #24]
 8025912:	440a      	add	r2, r1
 8025914:	921f      	str	r2, [sp, #124]	; 0x7c
 8025916:	9904      	ldr	r1, [sp, #16]
 8025918:	9a02      	ldr	r2, [sp, #8]
 802591a:	440a      	add	r2, r1
 802591c:	9202      	str	r2, [sp, #8]
 802591e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8025920:	3301      	adds	r3, #1
 8025922:	429a      	cmp	r2, r3
 8025924:	9306      	str	r3, [sp, #24]
 8025926:	f73f af69 	bgt.w	80257fc <_DrawBitmap+0x680>
 802592a:	f1be 0f00 	cmp.w	lr, #0
 802592e:	f47f acb4 	bne.w	802529a <_DrawBitmap+0x11e>
 8025932:	e42d      	b.n	8025190 <_DrawBitmap+0x14>
 8025934:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8025936:	9b02      	ldr	r3, [sp, #8]
 8025938:	9803      	ldr	r0, [sp, #12]
 802593a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 802593c:	4282      	cmp	r2, r0
 802593e:	bfc8      	it	gt
 8025940:	b2c2      	uxtbgt	r2, r0
 8025942:	1e51      	subs	r1, r2, #1
 8025944:	b2c9      	uxtb	r1, r1
 8025946:	3101      	adds	r1, #1
 8025948:	1a80      	subs	r0, r0, r2
 802594a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 802594e:	00a2      	lsls	r2, r4, #2
 8025950:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8025954:	b2d4      	uxtb	r4, r2
 8025956:	d003      	beq.n	8025960 <_DrawBitmap+0x7e4>
 8025958:	681a      	ldr	r2, [r3, #0]
 802595a:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
 802595e:	601a      	str	r2, [r3, #0]
 8025960:	3304      	adds	r3, #4
 8025962:	428b      	cmp	r3, r1
 8025964:	d1f3      	bne.n	802594e <_DrawBitmap+0x7d2>
 8025966:	2800      	cmp	r0, #0
 8025968:	d0d0      	beq.n	802590c <_DrawBitmap+0x790>
 802596a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 802596e:	2204      	movs	r2, #4
 8025970:	e7e4      	b.n	802593c <_DrawBitmap+0x7c0>
 8025972:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8025974:	991e      	ldr	r1, [sp, #120]	; 0x78
 8025976:	9b06      	ldr	r3, [sp, #24]
 8025978:	440a      	add	r2, r1
 802597a:	921f      	str	r2, [sp, #124]	; 0x7c
 802597c:	9904      	ldr	r1, [sp, #16]
 802597e:	9a02      	ldr	r2, [sp, #8]
 8025980:	440a      	add	r2, r1
 8025982:	9202      	str	r2, [sp, #8]
 8025984:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8025986:	3301      	adds	r3, #1
 8025988:	429a      	cmp	r2, r3
 802598a:	46bb      	mov	fp, r7
 802598c:	9306      	str	r3, [sp, #24]
 802598e:	f73f af33 	bgt.w	80257f8 <_DrawBitmap+0x67c>
 8025992:	46de      	mov	lr, fp
 8025994:	e4b2      	b.n	80252fc <_DrawBitmap+0x180>
 8025996:	4b46      	ldr	r3, [pc, #280]	; (8025ab0 <_DrawBitmap+0x934>)
 8025998:	9a03      	ldr	r2, [sp, #12]
 802599a:	681b      	ldr	r3, [r3, #0]
 802599c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 802599e:	9802      	ldr	r0, [sp, #8]
 80259a0:	4798      	blx	r3
 80259a2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80259a4:	4628      	mov	r0, r5
 80259a6:	e582      	b.n	80254ae <_DrawBitmap+0x332>
 80259a8:	9306      	str	r3, [sp, #24]
 80259aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80259ac:	f8df b104 	ldr.w	fp, [pc, #260]	; 8025ab4 <_DrawBitmap+0x938>
 80259b0:	9202      	str	r2, [sp, #8]
 80259b2:	f1c3 0308 	rsb	r3, r3, #8
 80259b6:	911f      	str	r1, [sp, #124]	; 0x7c
 80259b8:	930a      	str	r3, [sp, #40]	; 0x28
 80259ba:	4b3c      	ldr	r3, [pc, #240]	; (8025aac <_DrawBitmap+0x930>)
 80259bc:	681b      	ldr	r3, [r3, #0]
 80259be:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80259c0:	f7f9 fff2 	bl	801f9a8 <GUI_ALLOC_LockH>
 80259c4:	4b39      	ldr	r3, [pc, #228]	; (8025aac <_DrawBitmap+0x930>)
 80259c6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80259c8:	681b      	ldr	r3, [r3, #0]
 80259ca:	7812      	ldrb	r2, [r2, #0]
 80259cc:	7c1b      	ldrb	r3, [r3, #16]
 80259ce:	f81b 4002 	ldrb.w	r4, [fp, r2]
 80259d2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80259d4:	900f      	str	r0, [sp, #60]	; 0x3c
 80259d6:	f003 0303 	and.w	r3, r3, #3
 80259da:	2b02      	cmp	r3, #2
 80259dc:	fa44 f402 	asr.w	r4, r4, r2
 80259e0:	d048      	beq.n	8025a74 <_DrawBitmap+0x8f8>
 80259e2:	2b03      	cmp	r3, #3
 80259e4:	d020      	beq.n	8025a28 <_DrawBitmap+0x8ac>
 80259e6:	2b01      	cmp	r3, #1
 80259e8:	d01e      	beq.n	8025a28 <_DrawBitmap+0x8ac>
 80259ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80259ec:	9e02      	ldr	r6, [sp, #8]
 80259ee:	9d03      	ldr	r5, [sp, #12]
 80259f0:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80259f2:	42a8      	cmp	r0, r5
 80259f4:	bf28      	it	cs
 80259f6:	4628      	movcs	r0, r5
 80259f8:	1a2d      	subs	r5, r5, r0
 80259fa:	4602      	mov	r2, r0
 80259fc:	4631      	mov	r1, r6
 80259fe:	f004 0301 	and.w	r3, r4, #1
 8025a02:	3a01      	subs	r2, #1
 8025a04:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8025a08:	f841 3b04 	str.w	r3, [r1], #4
 8025a0c:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8025a10:	d1f5      	bne.n	80259fe <_DrawBitmap+0x882>
 8025a12:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8025a16:	2d00      	cmp	r5, #0
 8025a18:	f43f acec 	beq.w	80253f4 <_DrawBitmap+0x278>
 8025a1c:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 8025a20:	2008      	movs	r0, #8
 8025a22:	f81b 4003 	ldrb.w	r4, [fp, r3]
 8025a26:	e7e4      	b.n	80259f2 <_DrawBitmap+0x876>
 8025a28:	6803      	ldr	r3, [r0, #0]
 8025a2a:	691b      	ldr	r3, [r3, #16]
 8025a2c:	689b      	ldr	r3, [r3, #8]
 8025a2e:	4798      	blx	r3
 8025a30:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8025a32:	9f02      	ldr	r7, [sp, #8]
 8025a34:	9e03      	ldr	r6, [sp, #12]
 8025a36:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 8025a3a:	42b5      	cmp	r5, r6
 8025a3c:	bf28      	it	cs
 8025a3e:	4635      	movcs	r5, r6
 8025a40:	1b76      	subs	r6, r6, r5
 8025a42:	462a      	mov	r2, r5
 8025a44:	463b      	mov	r3, r7
 8025a46:	f014 0f01 	tst.w	r4, #1
 8025a4a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8025a4e:	d002      	beq.n	8025a56 <_DrawBitmap+0x8da>
 8025a50:	6819      	ldr	r1, [r3, #0]
 8025a52:	4041      	eors	r1, r0
 8025a54:	6019      	str	r1, [r3, #0]
 8025a56:	3a01      	subs	r2, #1
 8025a58:	f103 0304 	add.w	r3, r3, #4
 8025a5c:	d1f3      	bne.n	8025a46 <_DrawBitmap+0x8ca>
 8025a5e:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8025a62:	2e00      	cmp	r6, #0
 8025a64:	f43f acc6 	beq.w	80253f4 <_DrawBitmap+0x278>
 8025a68:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8025a6c:	2508      	movs	r5, #8
 8025a6e:	f81b 4003 	ldrb.w	r4, [fp, r3]
 8025a72:	e7e2      	b.n	8025a3a <_DrawBitmap+0x8be>
 8025a74:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8025a76:	9209      	str	r2, [sp, #36]	; 0x24
 8025a78:	9908      	ldr	r1, [sp, #32]
 8025a7a:	9a06      	ldr	r2, [sp, #24]
 8025a7c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8025a80:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8025a84:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8025a86:	9e02      	ldr	r6, [sp, #8]
 8025a88:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8025a8c:	9f05      	ldr	r7, [sp, #20]
 8025a8e:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
 8025a92:	440a      	add	r2, r1
 8025a94:	9207      	str	r2, [sp, #28]
 8025a96:	469a      	mov	sl, r3
 8025a98:	454d      	cmp	r5, r9
 8025a9a:	bf28      	it	cs
 8025a9c:	464d      	movcs	r5, r9
 8025a9e:	ebc5 0909 	rsb	r9, r5, r9
 8025aa2:	f1b8 0f00 	cmp.w	r8, #0
 8025aa6:	d030      	beq.n	8025b0a <_DrawBitmap+0x98e>
 8025aa8:	b974      	cbnz	r4, 8025ac8 <_DrawBitmap+0x94c>
 8025aaa:	e02a      	b.n	8025b02 <_DrawBitmap+0x986>
 8025aac:	200000e8 	.word	0x200000e8
 8025ab0:	20000108 	.word	0x20000108
 8025ab4:	08041534 	.word	0x08041534
 8025ab8:	3d01      	subs	r5, #1
 8025aba:	f107 0701 	add.w	r7, r7, #1
 8025abe:	f106 0604 	add.w	r6, r6, #4
 8025ac2:	d012      	beq.n	8025aea <_DrawBitmap+0x96e>
 8025ac4:	0864      	lsrs	r4, r4, #1
 8025ac6:	d01c      	beq.n	8025b02 <_DrawBitmap+0x986>
 8025ac8:	07e1      	lsls	r1, r4, #31
 8025aca:	d5f5      	bpl.n	8025ab8 <_DrawBitmap+0x93c>
 8025acc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8025ad0:	9a07      	ldr	r2, [sp, #28]
 8025ad2:	681b      	ldr	r3, [r3, #0]
 8025ad4:	4639      	mov	r1, r7
 8025ad6:	4640      	mov	r0, r8
 8025ad8:	4798      	blx	r3
 8025ada:	3d01      	subs	r5, #1
 8025adc:	f8c6 a000 	str.w	sl, [r6]
 8025ae0:	f107 0701 	add.w	r7, r7, #1
 8025ae4:	f106 0604 	add.w	r6, r6, #4
 8025ae8:	d1ec      	bne.n	8025ac4 <_DrawBitmap+0x948>
 8025aea:	f1b9 0f00 	cmp.w	r9, #0
 8025aee:	f43f ac7f 	beq.w	80253f0 <_DrawBitmap+0x274>
 8025af2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025af4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8025af8:	9209      	str	r2, [sp, #36]	; 0x24
 8025afa:	2508      	movs	r5, #8
 8025afc:	f81b 4003 	ldrb.w	r4, [fp, r3]
 8025b00:	e7ca      	b.n	8025a98 <_DrawBitmap+0x91c>
 8025b02:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8025b06:	442f      	add	r7, r5
 8025b08:	e7ef      	b.n	8025aea <_DrawBitmap+0x96e>
 8025b0a:	4653      	mov	r3, sl
 8025b0c:	b914      	cbnz	r4, 8025b14 <_DrawBitmap+0x998>
 8025b0e:	e00b      	b.n	8025b28 <_DrawBitmap+0x9ac>
 8025b10:	0864      	lsrs	r4, r4, #1
 8025b12:	d008      	beq.n	8025b26 <_DrawBitmap+0x9aa>
 8025b14:	07e2      	lsls	r2, r4, #31
 8025b16:	bf48      	it	mi
 8025b18:	6033      	strmi	r3, [r6, #0]
 8025b1a:	3d01      	subs	r5, #1
 8025b1c:	f106 0604 	add.w	r6, r6, #4
 8025b20:	d1f6      	bne.n	8025b10 <_DrawBitmap+0x994>
 8025b22:	469a      	mov	sl, r3
 8025b24:	e7e1      	b.n	8025aea <_DrawBitmap+0x96e>
 8025b26:	469a      	mov	sl, r3
 8025b28:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8025b2c:	e7dd      	b.n	8025aea <_DrawBitmap+0x96e>
 8025b2e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8025b30:	9b02      	ldr	r3, [sp, #8]
 8025b32:	f812 1b01 	ldrb.w	r1, [r2], #1
 8025b36:	b101      	cbz	r1, 8025b3a <_DrawBitmap+0x9be>
 8025b38:	6019      	str	r1, [r3, #0]
 8025b3a:	42a2      	cmp	r2, r4
 8025b3c:	f103 0304 	add.w	r3, r3, #4
 8025b40:	d1f7      	bne.n	8025b32 <_DrawBitmap+0x9b6>
 8025b42:	e4b3      	b.n	80254ac <_DrawBitmap+0x330>
 8025b44:	9810      	ldr	r0, [sp, #64]	; 0x40
 8025b46:	2800      	cmp	r0, #0
 8025b48:	f47f aba7 	bne.w	802529a <_DrawBitmap+0x11e>
 8025b4c:	f7ff bb20 	b.w	8025190 <_DrawBitmap+0x14>

08025b50 <_GetPixelIndex>:
 8025b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025b52:	4b0e      	ldr	r3, [pc, #56]	; (8025b8c <_GetPixelIndex+0x3c>)
 8025b54:	681b      	ldr	r3, [r3, #0]
 8025b56:	b083      	sub	sp, #12
 8025b58:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8025b5a:	460e      	mov	r6, r1
 8025b5c:	4617      	mov	r7, r2
 8025b5e:	f7f9 ff23 	bl	801f9a8 <GUI_ALLOC_LockH>
 8025b62:	4605      	mov	r5, r0
 8025b64:	a802      	add	r0, sp, #8
 8025b66:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8025b6a:	68eb      	ldr	r3, [r5, #12]
 8025b6c:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 8025b70:	f840 5d04 	str.w	r5, [r0, #-4]!
 8025b74:	1abf      	subs	r7, r7, r2
 8025b76:	fb03 f307 	mul.w	r3, r3, r7
 8025b7a:	3318      	adds	r3, #24
 8025b7c:	1b34      	subs	r4, r6, r4
 8025b7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8025b82:	f7f9 ff23 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025b86:	5928      	ldr	r0, [r5, r4]
 8025b88:	b003      	add	sp, #12
 8025b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025b8c:	200000e8 	.word	0x200000e8

08025b90 <_SetPixelIndex>:
 8025b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025b94:	4c1b      	ldr	r4, [pc, #108]	; (8025c04 <_SetPixelIndex+0x74>)
 8025b96:	6820      	ldr	r0, [r4, #0]
 8025b98:	b083      	sub	sp, #12
 8025b9a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8025b9c:	460f      	mov	r7, r1
 8025b9e:	4690      	mov	r8, r2
 8025ba0:	4699      	mov	r9, r3
 8025ba2:	f7f9 ff01 	bl	801f9a8 <GUI_ALLOC_LockH>
 8025ba6:	6823      	ldr	r3, [r4, #0]
 8025ba8:	9000      	str	r0, [sp, #0]
 8025baa:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8025bac:	f7f9 fefc 	bl	801f9a8 <GUI_ALLOC_LockH>
 8025bb0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8025bb4:	68c1      	ldr	r1, [r0, #12]
 8025bb6:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8025bba:	ae02      	add	r6, sp, #8
 8025bbc:	ebc2 0208 	rsb	r2, r2, r8
 8025bc0:	fb01 f202 	mul.w	r2, r1, r2
 8025bc4:	f846 0d04 	str.w	r0, [r6, #-4]!
 8025bc8:	3218      	adds	r2, #24
 8025bca:	1b3c      	subs	r4, r7, r4
 8025bcc:	4605      	mov	r5, r0
 8025bce:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8025bd2:	4630      	mov	r0, r6
 8025bd4:	f7f9 fefa 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025bd8:	f845 9004 	str.w	r9, [r5, r4]
 8025bdc:	9b00      	ldr	r3, [sp, #0]
 8025bde:	6958      	ldr	r0, [r3, #20]
 8025be0:	b150      	cbz	r0, 8025bf8 <_SetPixelIndex+0x68>
 8025be2:	f7f9 fee1 	bl	801f9a8 <GUI_ALLOC_LockH>
 8025be6:	9001      	str	r0, [sp, #4]
 8025be8:	6883      	ldr	r3, [r0, #8]
 8025bea:	4642      	mov	r2, r8
 8025bec:	4639      	mov	r1, r7
 8025bee:	681b      	ldr	r3, [r3, #0]
 8025bf0:	4798      	blx	r3
 8025bf2:	4630      	mov	r0, r6
 8025bf4:	f7f9 feea 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025bf8:	4668      	mov	r0, sp
 8025bfa:	f7f9 fee7 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025bfe:	b003      	add	sp, #12
 8025c00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025c04:	200000e8 	.word	0x200000e8

08025c08 <_XorPixel>:
 8025c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025c0c:	4c1e      	ldr	r4, [pc, #120]	; (8025c88 <_XorPixel+0x80>)
 8025c0e:	6823      	ldr	r3, [r4, #0]
 8025c10:	b082      	sub	sp, #8
 8025c12:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8025c14:	460f      	mov	r7, r1
 8025c16:	4690      	mov	r8, r2
 8025c18:	f7f9 fec6 	bl	801f9a8 <GUI_ALLOC_LockH>
 8025c1c:	6823      	ldr	r3, [r4, #0]
 8025c1e:	9000      	str	r0, [sp, #0]
 8025c20:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8025c22:	f7f9 fec1 	bl	801f9a8 <GUI_ALLOC_LockH>
 8025c26:	ae02      	add	r6, sp, #8
 8025c28:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8025c2c:	68c2      	ldr	r2, [r0, #12]
 8025c2e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8025c32:	f846 0d04 	str.w	r0, [r6, #-4]!
 8025c36:	ebc3 0308 	rsb	r3, r3, r8
 8025c3a:	fb02 f303 	mul.w	r3, r2, r3
 8025c3e:	4605      	mov	r5, r0
 8025c40:	3318      	adds	r3, #24
 8025c42:	1b3c      	subs	r4, r7, r4
 8025c44:	4630      	mov	r0, r6
 8025c46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8025c4a:	f7f9 febf 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025c4e:	9b00      	ldr	r3, [sp, #0]
 8025c50:	681b      	ldr	r3, [r3, #0]
 8025c52:	691b      	ldr	r3, [r3, #16]
 8025c54:	689b      	ldr	r3, [r3, #8]
 8025c56:	4798      	blx	r3
 8025c58:	592b      	ldr	r3, [r5, r4]
 8025c5a:	9a00      	ldr	r2, [sp, #0]
 8025c5c:	4058      	eors	r0, r3
 8025c5e:	5128      	str	r0, [r5, r4]
 8025c60:	6950      	ldr	r0, [r2, #20]
 8025c62:	b150      	cbz	r0, 8025c7a <_XorPixel+0x72>
 8025c64:	f7f9 fea0 	bl	801f9a8 <GUI_ALLOC_LockH>
 8025c68:	9001      	str	r0, [sp, #4]
 8025c6a:	6883      	ldr	r3, [r0, #8]
 8025c6c:	4642      	mov	r2, r8
 8025c6e:	4639      	mov	r1, r7
 8025c70:	681b      	ldr	r3, [r3, #0]
 8025c72:	4798      	blx	r3
 8025c74:	4630      	mov	r0, r6
 8025c76:	f7f9 fea9 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025c7a:	4668      	mov	r0, sp
 8025c7c:	f7f9 fea6 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025c80:	b002      	add	sp, #8
 8025c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025c86:	bf00      	nop
 8025c88:	200000e8 	.word	0x200000e8

08025c8c <_FillRect>:
 8025c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c90:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8025d78 <_FillRect+0xec>
 8025c94:	f8d8 0000 	ldr.w	r0, [r8]
 8025c98:	b087      	sub	sp, #28
 8025c9a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8025c9c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8025ca0:	468a      	mov	sl, r1
 8025ca2:	4616      	mov	r6, r2
 8025ca4:	461f      	mov	r7, r3
 8025ca6:	f7f9 fe7f 	bl	801f9a8 <GUI_ALLOC_LockH>
 8025caa:	f8d8 3000 	ldr.w	r3, [r8]
 8025cae:	9004      	str	r0, [sp, #16]
 8025cb0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8025cb2:	f7f9 fe79 	bl	801f9a8 <GUI_ALLOC_LockH>
 8025cb6:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8025cba:	68c3      	ldr	r3, [r0, #12]
 8025cbc:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8025cc0:	f8cd a00c 	str.w	sl, [sp, #12]
 8025cc4:	f10d 0b18 	add.w	fp, sp, #24
 8025cc8:	1ab2      	subs	r2, r6, r2
 8025cca:	fb03 f202 	mul.w	r2, r3, r2
 8025cce:	f84b 0d04 	str.w	r0, [fp, #-4]!
 8025cd2:	4653      	mov	r3, sl
 8025cd4:	1b5d      	subs	r5, r3, r5
 8025cd6:	f102 0118 	add.w	r1, r2, #24
 8025cda:	4604      	mov	r4, r0
 8025cdc:	eb01 0285 	add.w	r2, r1, r5, lsl #2
 8025ce0:	4658      	mov	r0, fp
 8025ce2:	18a5      	adds	r5, r4, r2
 8025ce4:	f7f9 fe72 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025ce8:	9b04      	ldr	r3, [sp, #16]
 8025cea:	f8d8 2000 	ldr.w	r2, [r8]
 8025cee:	6958      	ldr	r0, [r3, #20]
 8025cf0:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8025cf4:	9b03      	ldr	r3, [sp, #12]
 8025cf6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8025cf8:	1aff      	subs	r7, r7, r3
 8025cfa:	6814      	ldr	r4, [r2, #0]
 8025cfc:	3701      	adds	r7, #1
 8025cfe:	bb58      	cbnz	r0, 8025d58 <_FillRect+0xcc>
 8025d00:	454e      	cmp	r6, r9
 8025d02:	dc10      	bgt.n	8025d26 <_FillRect+0x9a>
 8025d04:	f8d8 3000 	ldr.w	r3, [r8]
 8025d08:	7c1b      	ldrb	r3, [r3, #16]
 8025d0a:	07db      	lsls	r3, r3, #31
 8025d0c:	d411      	bmi.n	8025d32 <_FillRect+0xa6>
 8025d0e:	2f00      	cmp	r7, #0
 8025d10:	dd05      	ble.n	8025d1e <_FillRect+0x92>
 8025d12:	463b      	mov	r3, r7
 8025d14:	462a      	mov	r2, r5
 8025d16:	3b01      	subs	r3, #1
 8025d18:	f842 4b04 	str.w	r4, [r2], #4
 8025d1c:	d1fb      	bne.n	8025d16 <_FillRect+0x8a>
 8025d1e:	3601      	adds	r6, #1
 8025d20:	45b1      	cmp	r9, r6
 8025d22:	4455      	add	r5, sl
 8025d24:	daee      	bge.n	8025d04 <_FillRect+0x78>
 8025d26:	a804      	add	r0, sp, #16
 8025d28:	f7f9 fe50 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025d2c:	b007      	add	sp, #28
 8025d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025d32:	9b04      	ldr	r3, [sp, #16]
 8025d34:	681b      	ldr	r3, [r3, #0]
 8025d36:	691b      	ldr	r3, [r3, #16]
 8025d38:	689b      	ldr	r3, [r3, #8]
 8025d3a:	4798      	blx	r3
 8025d3c:	4629      	mov	r1, r5
 8025d3e:	463a      	mov	r2, r7
 8025d40:	680b      	ldr	r3, [r1, #0]
 8025d42:	3a01      	subs	r2, #1
 8025d44:	ea83 0300 	eor.w	r3, r3, r0
 8025d48:	f841 3b04 	str.w	r3, [r1], #4
 8025d4c:	d1f8      	bne.n	8025d40 <_FillRect+0xb4>
 8025d4e:	3601      	adds	r6, #1
 8025d50:	45b1      	cmp	r9, r6
 8025d52:	4455      	add	r5, sl
 8025d54:	dad6      	bge.n	8025d04 <_FillRect+0x78>
 8025d56:	e7e6      	b.n	8025d26 <_FillRect+0x9a>
 8025d58:	f7f9 fe26 	bl	801f9a8 <GUI_ALLOC_LockH>
 8025d5c:	ebc6 0309 	rsb	r3, r6, r9
 8025d60:	3301      	adds	r3, #1
 8025d62:	9300      	str	r3, [sp, #0]
 8025d64:	9903      	ldr	r1, [sp, #12]
 8025d66:	9005      	str	r0, [sp, #20]
 8025d68:	463b      	mov	r3, r7
 8025d6a:	4632      	mov	r2, r6
 8025d6c:	f000 f898 	bl	8025ea0 <GUI_USAGE_AddRect>
 8025d70:	4658      	mov	r0, fp
 8025d72:	f7f9 fe2b 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025d76:	e7c3      	b.n	8025d00 <_FillRect+0x74>
 8025d78:	200000e8 	.word	0x200000e8

08025d7c <_DrawHLine>:
 8025d7c:	b500      	push	{lr}
 8025d7e:	b083      	sub	sp, #12
 8025d80:	9200      	str	r2, [sp, #0]
 8025d82:	f7ff ff83 	bl	8025c8c <_FillRect>
 8025d86:	b003      	add	sp, #12
 8025d88:	f85d fb04 	ldr.w	pc, [sp], #4

08025d8c <_DrawVLine>:
 8025d8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025d90:	4f35      	ldr	r7, [pc, #212]	; (8025e68 <_DrawVLine+0xdc>)
 8025d92:	6838      	ldr	r0, [r7, #0]
 8025d94:	b085      	sub	sp, #20
 8025d96:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8025d98:	4689      	mov	r9, r1
 8025d9a:	4615      	mov	r5, r2
 8025d9c:	461e      	mov	r6, r3
 8025d9e:	f7f9 fe03 	bl	801f9a8 <GUI_ALLOC_LockH>
 8025da2:	9001      	str	r0, [sp, #4]
 8025da4:	6940      	ldr	r0, [r0, #20]
 8025da6:	2800      	cmp	r0, #0
 8025da8:	d13b      	bne.n	8025e22 <_DrawVLine+0x96>
 8025daa:	683b      	ldr	r3, [r7, #0]
 8025dac:	9002      	str	r0, [sp, #8]
 8025dae:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8025db0:	f7f9 fdfa 	bl	801f9a8 <GUI_ALLOC_LockH>
 8025db4:	4602      	mov	r2, r0
 8025db6:	a804      	add	r0, sp, #16
 8025db8:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 8025dbc:	68d3      	ldr	r3, [r2, #12]
 8025dbe:	f840 2d04 	str.w	r2, [r0, #-4]!
 8025dc2:	1b2c      	subs	r4, r5, r4
 8025dc4:	fb03 f304 	mul.w	r3, r3, r4
 8025dc8:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 8025dcc:	3318      	adds	r3, #24
 8025dce:	ebc4 0409 	rsb	r4, r4, r9
 8025dd2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8025dd6:	18d4      	adds	r4, r2, r3
 8025dd8:	f7f9 fdf8 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025ddc:	683b      	ldr	r3, [r7, #0]
 8025dde:	9901      	ldr	r1, [sp, #4]
 8025de0:	7c1a      	ldrb	r2, [r3, #16]
 8025de2:	07d2      	lsls	r2, r2, #31
 8025de4:	d420      	bmi.n	8025e28 <_DrawVLine+0x9c>
 8025de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8025de8:	9802      	ldr	r0, [sp, #8]
 8025dea:	f8d3 8000 	ldr.w	r8, [r3]
 8025dee:	68cf      	ldr	r7, [r1, #12]
 8025df0:	b908      	cbnz	r0, 8025df6 <_DrawVLine+0x6a>
 8025df2:	e030      	b.n	8025e56 <_DrawVLine+0xca>
 8025df4:	9802      	ldr	r0, [sp, #8]
 8025df6:	6883      	ldr	r3, [r0, #8]
 8025df8:	462a      	mov	r2, r5
 8025dfa:	681b      	ldr	r3, [r3, #0]
 8025dfc:	4649      	mov	r1, r9
 8025dfe:	3501      	adds	r5, #1
 8025e00:	4798      	blx	r3
 8025e02:	42ae      	cmp	r6, r5
 8025e04:	f8c4 8000 	str.w	r8, [r4]
 8025e08:	443c      	add	r4, r7
 8025e0a:	daf3      	bge.n	8025df4 <_DrawVLine+0x68>
 8025e0c:	a801      	add	r0, sp, #4
 8025e0e:	f7f9 fddd 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025e12:	9b02      	ldr	r3, [sp, #8]
 8025e14:	b113      	cbz	r3, 8025e1c <_DrawVLine+0x90>
 8025e16:	a802      	add	r0, sp, #8
 8025e18:	f7f9 fdd8 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025e1c:	b005      	add	sp, #20
 8025e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025e22:	f7f9 fdc1 	bl	801f9a8 <GUI_ALLOC_LockH>
 8025e26:	e7c0      	b.n	8025daa <_DrawVLine+0x1e>
 8025e28:	680b      	ldr	r3, [r1, #0]
 8025e2a:	691b      	ldr	r3, [r3, #16]
 8025e2c:	689b      	ldr	r3, [r3, #8]
 8025e2e:	4798      	blx	r3
 8025e30:	4607      	mov	r7, r0
 8025e32:	9b02      	ldr	r3, [sp, #8]
 8025e34:	462a      	mov	r2, r5
 8025e36:	4649      	mov	r1, r9
 8025e38:	3501      	adds	r5, #1
 8025e3a:	4618      	mov	r0, r3
 8025e3c:	b113      	cbz	r3, 8025e44 <_DrawVLine+0xb8>
 8025e3e:	689b      	ldr	r3, [r3, #8]
 8025e40:	681b      	ldr	r3, [r3, #0]
 8025e42:	4798      	blx	r3
 8025e44:	9a01      	ldr	r2, [sp, #4]
 8025e46:	6823      	ldr	r3, [r4, #0]
 8025e48:	68d2      	ldr	r2, [r2, #12]
 8025e4a:	407b      	eors	r3, r7
 8025e4c:	42b5      	cmp	r5, r6
 8025e4e:	6023      	str	r3, [r4, #0]
 8025e50:	4414      	add	r4, r2
 8025e52:	ddee      	ble.n	8025e32 <_DrawVLine+0xa6>
 8025e54:	e7da      	b.n	8025e0c <_DrawVLine+0x80>
 8025e56:	1b73      	subs	r3, r6, r5
 8025e58:	3301      	adds	r3, #1
 8025e5a:	3b01      	subs	r3, #1
 8025e5c:	f8c4 8000 	str.w	r8, [r4]
 8025e60:	443c      	add	r4, r7
 8025e62:	d1fa      	bne.n	8025e5a <_DrawVLine+0xce>
 8025e64:	e7d2      	b.n	8025e0c <_DrawVLine+0x80>
 8025e66:	bf00      	nop
 8025e68:	200000e8 	.word	0x200000e8

08025e6c <GUI_USAGE_DecUseCnt>:
 8025e6c:	b530      	push	{r4, r5, lr}
 8025e6e:	4605      	mov	r5, r0
 8025e70:	b083      	sub	sp, #12
 8025e72:	f7fb fc23 	bl	80216bc <GUI_Lock>
 8025e76:	4628      	mov	r0, r5
 8025e78:	f7f9 fd96 	bl	801f9a8 <GUI_ALLOC_LockH>
 8025e7c:	ab02      	add	r3, sp, #8
 8025e7e:	8984      	ldrh	r4, [r0, #12]
 8025e80:	f843 0d04 	str.w	r0, [r3, #-4]!
 8025e84:	3c01      	subs	r4, #1
 8025e86:	b224      	sxth	r4, r4
 8025e88:	8184      	strh	r4, [r0, #12]
 8025e8a:	4618      	mov	r0, r3
 8025e8c:	f7f9 fd9e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025e90:	b914      	cbnz	r4, 8025e98 <GUI_USAGE_DecUseCnt+0x2c>
 8025e92:	4628      	mov	r0, r5
 8025e94:	f7f9 ff2a 	bl	801fcec <GUI_ALLOC_Free>
 8025e98:	f7fb fc06 	bl	80216a8 <GUI_Unlock>
 8025e9c:	b003      	add	sp, #12
 8025e9e:	bd30      	pop	{r4, r5, pc}

08025ea0 <GUI_USAGE_AddRect>:
 8025ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025ea4:	9c08      	ldr	r4, [sp, #32]
 8025ea6:	4605      	mov	r5, r0
 8025ea8:	4689      	mov	r9, r1
 8025eaa:	4698      	mov	r8, r3
 8025eac:	68ab      	ldr	r3, [r5, #8]
 8025eae:	4649      	mov	r1, r9
 8025eb0:	685f      	ldr	r7, [r3, #4]
 8025eb2:	4628      	mov	r0, r5
 8025eb4:	4643      	mov	r3, r8
 8025eb6:	1c56      	adds	r6, r2, #1
 8025eb8:	47b8      	blx	r7
 8025eba:	3c01      	subs	r4, #1
 8025ebc:	4632      	mov	r2, r6
 8025ebe:	d1f5      	bne.n	8025eac <GUI_USAGE_AddRect+0xc>
 8025ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08025ec4 <_WriteToActiveAlpha>:
 8025ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025ec8:	b091      	sub	sp, #68	; 0x44
 8025eca:	4688      	mov	r8, r1
 8025ecc:	4614      	mov	r4, r2
 8025ece:	4699      	mov	r9, r3
 8025ed0:	9008      	str	r0, [sp, #32]
 8025ed2:	f7f9 fd69 	bl	801f9a8 <GUI_ALLOC_LockH>
 8025ed6:	4603      	mov	r3, r0
 8025ed8:	a810      	add	r0, sp, #64	; 0x40
 8025eda:	681a      	ldr	r2, [r3, #0]
 8025edc:	4d58      	ldr	r5, [pc, #352]	; (8026040 <_WriteToActiveAlpha+0x17c>)
 8025ede:	6912      	ldr	r2, [r2, #16]
 8025ee0:	f840 3d08 	str.w	r3, [r0, #-8]!
 8025ee4:	6852      	ldr	r2, [r2, #4]
 8025ee6:	9207      	str	r2, [sp, #28]
 8025ee8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8025eec:	9206      	str	r2, [sp, #24]
 8025eee:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
 8025ef2:	f7f9 fd6b 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8025ef6:	682a      	ldr	r2, [r5, #0]
 8025ef8:	4b52      	ldr	r3, [pc, #328]	; (8026044 <_WriteToActiveAlpha+0x180>)
 8025efa:	7c52      	ldrb	r2, [r2, #17]
 8025efc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8025f00:	68c3      	ldr	r3, [r0, #12]
 8025f02:	2108      	movs	r1, #8
 8025f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8025f06:	4798      	blx	r3
 8025f08:	2817      	cmp	r0, #23
 8025f0a:	d810      	bhi.n	8025f2e <_WriteToActiveAlpha+0x6a>
 8025f0c:	2803      	cmp	r0, #3
 8025f0e:	4606      	mov	r6, r0
 8025f10:	bf08      	it	eq
 8025f12:	2608      	moveq	r6, #8
 8025f14:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8025f18:	9309      	str	r3, [sp, #36]	; 0x24
 8025f1a:	2000      	movs	r0, #0
 8025f1c:	f8d9 3000 	ldr.w	r3, [r9]
 8025f20:	930c      	str	r3, [sp, #48]	; 0x30
 8025f22:	f7fc f867 	bl	8021ff4 <GUI__AllocAlphaBuffer>
 8025f26:	b120      	cbz	r0, 8025f32 <_WriteToActiveAlpha+0x6e>
 8025f28:	b011      	add	sp, #68	; 0x44
 8025f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f2e:	2620      	movs	r6, #32
 8025f30:	e7f0      	b.n	8025f14 <_WriteToActiveAlpha+0x50>
 8025f32:	9906      	ldr	r1, [sp, #24]
 8025f34:	682a      	ldr	r2, [r5, #0]
 8025f36:	460b      	mov	r3, r1
 8025f38:	4443      	add	r3, r8
 8025f3a:	f9b2 500c 	ldrsh.w	r5, [r2, #12]
 8025f3e:	3b01      	subs	r3, #1
 8025f40:	1b5d      	subs	r5, r3, r5
 8025f42:	2d00      	cmp	r5, #0
 8025f44:	bfc4      	itt	gt
 8025f46:	460b      	movgt	r3, r1
 8025f48:	1b5d      	subgt	r5, r3, r5
 8025f4a:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8025f4e:	bfd8      	it	le
 8025f50:	460d      	movle	r5, r1
 8025f52:	4543      	cmp	r3, r8
 8025f54:	bfc3      	ittte	gt
 8025f56:	ebc8 0103 	rsbgt	r1, r8, r3
 8025f5a:	1a6d      	subgt	r5, r5, r1
 8025f5c:	4698      	movgt	r8, r3
 8025f5e:	2100      	movle	r1, #0
 8025f60:	2d00      	cmp	r5, #0
 8025f62:	dde1      	ble.n	8025f28 <_WriteToActiveAlpha+0x64>
 8025f64:	eb0a 0304 	add.w	r3, sl, r4
 8025f68:	f9b2 000e 	ldrsh.w	r0, [r2, #14]
 8025f6c:	3b01      	subs	r3, #1
 8025f6e:	1a1b      	subs	r3, r3, r0
 8025f70:	2b00      	cmp	r3, #0
 8025f72:	bfc8      	it	gt
 8025f74:	ebc3 0a0a 	rsbgt	sl, r3, sl
 8025f78:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 8025f7c:	42a3      	cmp	r3, r4
 8025f7e:	bfc3      	ittte	gt
 8025f80:	1b1f      	subgt	r7, r3, r4
 8025f82:	ebc7 0a0a 	rsbgt	sl, r7, sl
 8025f86:	461c      	movgt	r4, r3
 8025f88:	2700      	movle	r7, #0
 8025f8a:	f1ba 0f00 	cmp.w	sl, #0
 8025f8e:	ddcb      	ble.n	8025f28 <_WriteToActiveAlpha+0x64>
 8025f90:	9b06      	ldr	r3, [sp, #24]
 8025f92:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8025f96:	fb07 1703 	mla	r7, r7, r3, r1
 8025f9a:	eb04 030a 	add.w	r3, r4, sl
 8025f9e:	00bf      	lsls	r7, r7, #2
 8025fa0:	930a      	str	r3, [sp, #40]	; 0x28
 8025fa2:	46b2      	mov	sl, r6
 8025fa4:	e019      	b.n	8025fda <_WriteToActiveAlpha+0x116>
 8025fa6:	2304      	movs	r3, #4
 8025fa8:	9a06      	ldr	r2, [sp, #24]
 8025faa:	4631      	mov	r1, r6
 8025fac:	4630      	mov	r0, r6
 8025fae:	47d8      	blx	fp
 8025fb0:	2301      	movs	r3, #1
 8025fb2:	2200      	movs	r2, #0
 8025fb4:	9205      	str	r2, [sp, #20]
 8025fb6:	9604      	str	r6, [sp, #16]
 8025fb8:	9203      	str	r2, [sp, #12]
 8025fba:	9301      	str	r3, [sp, #4]
 8025fbc:	9300      	str	r3, [sp, #0]
 8025fbe:	4621      	mov	r1, r4
 8025fc0:	f8cd a008 	str.w	sl, [sp, #8]
 8025fc4:	462a      	mov	r2, r5
 8025fc6:	4640      	mov	r0, r8
 8025fc8:	441c      	add	r4, r3
 8025fca:	9e06      	ldr	r6, [sp, #24]
 8025fcc:	f7fc fe38 	bl	8022c40 <LCD_DrawBitmap>
 8025fd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025fd2:	42a3      	cmp	r3, r4
 8025fd4:	eb07 0786 	add.w	r7, r7, r6, lsl #2
 8025fd8:	d0a6      	beq.n	8025f28 <_WriteToActiveAlpha+0x64>
 8025fda:	9808      	ldr	r0, [sp, #32]
 8025fdc:	f007 f9dc 	bl	802d398 <GUI_MEMDEV_GetDataPtr>
 8025fe0:	ab0f      	add	r3, sp, #60	; 0x3c
 8025fe2:	9301      	str	r3, [sp, #4]
 8025fe4:	9b07      	ldr	r3, [sp, #28]
 8025fe6:	9300      	str	r3, [sp, #0]
 8025fe8:	19c2      	adds	r2, r0, r7
 8025fea:	462b      	mov	r3, r5
 8025fec:	4621      	mov	r1, r4
 8025fee:	4640      	mov	r0, r8
 8025ff0:	f7fb fe5c 	bl	8021cac <GUI__DoAlphaBlending>
 8025ff4:	4606      	mov	r6, r0
 8025ff6:	2800      	cmp	r0, #0
 8025ff8:	d096      	beq.n	8025f28 <_WriteToActiveAlpha+0x64>
 8025ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025ffc:	461a      	mov	r2, r3
 8025ffe:	4b12      	ldr	r3, [pc, #72]	; (8026048 <_WriteToActiveAlpha+0x184>)
 8026000:	429a      	cmp	r2, r3
 8026002:	d0d5      	beq.n	8025fb0 <_WriteToActiveAlpha+0xec>
 8026004:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8026008:	4652      	mov	r2, sl
 802600a:	464b      	mov	r3, r9
 802600c:	4629      	mov	r1, r5
 802600e:	f006 fc35 	bl	802c87c <GUI__CompactPixelIndicesEx>
 8026012:	2800      	cmp	r0, #0
 8026014:	d1cc      	bne.n	8025fb0 <_WriteToActiveAlpha+0xec>
 8026016:	f8d9 b010 	ldr.w	fp, [r9, #16]
 802601a:	f1bb 0f00 	cmp.w	fp, #0
 802601e:	d1c2      	bne.n	8025fa6 <_WriteToActiveAlpha+0xe2>
 8026020:	46a1      	mov	r9, r4
 8026022:	f8dd b018 	ldr.w	fp, [sp, #24]
 8026026:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8026028:	950d      	str	r5, [sp, #52]	; 0x34
 802602a:	4635      	mov	r5, r6
 802602c:	6828      	ldr	r0, [r5, #0]
 802602e:	47a0      	blx	r4
 8026030:	f1bb 0b01 	subs.w	fp, fp, #1
 8026034:	f845 0b04 	str.w	r0, [r5], #4
 8026038:	d1f8      	bne.n	802602c <_WriteToActiveAlpha+0x168>
 802603a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802603c:	464c      	mov	r4, r9
 802603e:	e7b7      	b.n	8025fb0 <_WriteToActiveAlpha+0xec>
 8026040:	200000e8 	.word	0x200000e8
 8026044:	200308b0 	.word	0x200308b0
 8026048:	0801edcd 	.word	0x0801edcd

0802604c <GUI_MEMDEV__WriteToActiveAlpha>:
 802604c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026050:	4c59      	ldr	r4, [pc, #356]	; (80261b8 <GUI_MEMDEV__WriteToActiveAlpha+0x16c>)
 8026052:	4b5a      	ldr	r3, [pc, #360]	; (80261bc <GUI_MEMDEV__WriteToActiveAlpha+0x170>)
 8026054:	f8d4 c000 	ldr.w	ip, [r4]
 8026058:	f8df 9168 	ldr.w	r9, [pc, #360]	; 80261c4 <GUI_MEMDEV__WriteToActiveAlpha+0x178>
 802605c:	f89c 5011 	ldrb.w	r5, [ip, #17]
 8026060:	f8d9 6000 	ldr.w	r6, [r9]
 8026064:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
 8026068:	b08b      	sub	sp, #44	; 0x2c
 802606a:	6923      	ldr	r3, [r4, #16]
 802606c:	2e00      	cmp	r6, #0
 802606e:	f000 8088 	beq.w	8026182 <GUI_MEMDEV__WriteToActiveAlpha+0x136>
 8026072:	4617      	mov	r7, r2
 8026074:	f8dc 2060 	ldr.w	r2, [ip, #96]	; 0x60
 8026078:	4680      	mov	r8, r0
 802607a:	460d      	mov	r5, r1
 802607c:	2a00      	cmp	r2, #0
 802607e:	f000 8085 	beq.w	802618c <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 8026082:	68e2      	ldr	r2, [r4, #12]
 8026084:	6812      	ldr	r2, [r2, #0]
 8026086:	2a07      	cmp	r2, #7
 8026088:	d078      	beq.n	802617c <GUI_MEMDEV__WriteToActiveAlpha+0x130>
 802608a:	4a4d      	ldr	r2, [pc, #308]	; (80261c0 <GUI_MEMDEV__WriteToActiveAlpha+0x174>)
 802608c:	1a9a      	subs	r2, r3, r2
 802608e:	fab2 f282 	clz	r2, r2
 8026092:	0952      	lsrs	r2, r2, #5
 8026094:	2a00      	cmp	r2, #0
 8026096:	d071      	beq.n	802617c <GUI_MEMDEV__WriteToActiveAlpha+0x130>
 8026098:	4640      	mov	r0, r8
 802609a:	f7f9 fc85 	bl	801f9a8 <GUI_ALLOC_LockH>
 802609e:	4603      	mov	r3, r0
 80260a0:	a80a      	add	r0, sp, #40	; 0x28
 80260a2:	f9b3 b008 	ldrsh.w	fp, [r3, #8]
 80260a6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80260aa:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
 80260ae:	68db      	ldr	r3, [r3, #12]
 80260b0:	9305      	str	r3, [sp, #20]
 80260b2:	f7f9 fc8b 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80260b6:	4b40      	ldr	r3, [pc, #256]	; (80261b8 <GUI_MEMDEV__WriteToActiveAlpha+0x16c>)
 80260b8:	6818      	ldr	r0, [r3, #0]
 80260ba:	eb0b 0405 	add.w	r4, fp, r5
 80260be:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80260c2:	3c01      	subs	r4, #1
 80260c4:	1ae4      	subs	r4, r4, r3
 80260c6:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80260ca:	2c00      	cmp	r4, #0
 80260cc:	bfcc      	ite	gt
 80260ce:	ebc4 040b 	rsbgt	r4, r4, fp
 80260d2:	465c      	movle	r4, fp
 80260d4:	429d      	cmp	r5, r3
 80260d6:	bfbd      	ittte	lt
 80260d8:	1b59      	sublt	r1, r3, r5
 80260da:	1a64      	sublt	r4, r4, r1
 80260dc:	461d      	movlt	r5, r3
 80260de:	2100      	movge	r1, #0
 80260e0:	2c00      	cmp	r4, #0
 80260e2:	dd50      	ble.n	8026186 <GUI_MEMDEV__WriteToActiveAlpha+0x13a>
 80260e4:	eb0a 0307 	add.w	r3, sl, r7
 80260e8:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80260ec:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80260f0:	9107      	str	r1, [sp, #28]
 80260f2:	3b01      	subs	r3, #1
 80260f4:	ebce 0303 	rsb	r3, lr, r3
 80260f8:	2b00      	cmp	r3, #0
 80260fa:	bfc8      	it	gt
 80260fc:	ebc3 0a0a 	rsbgt	sl, r3, sl
 8026100:	42b8      	cmp	r0, r7
 8026102:	bfc5      	ittet	gt
 8026104:	1bc3      	subgt	r3, r0, r7
 8026106:	ebc3 0a0a 	rsbgt	sl, r3, sl
 802610a:	2300      	movle	r3, #0
 802610c:	4607      	movgt	r7, r0
 802610e:	f1ba 0f00 	cmp.w	sl, #0
 8026112:	9306      	str	r3, [sp, #24]
 8026114:	dd37      	ble.n	8026186 <GUI_MEMDEV__WriteToActiveAlpha+0x13a>
 8026116:	4640      	mov	r0, r8
 8026118:	f007 f93e 	bl	802d398 <GUI_MEMDEV_GetDataPtr>
 802611c:	4b26      	ldr	r3, [pc, #152]	; (80261b8 <GUI_MEMDEV__WriteToActiveAlpha+0x16c>)
 802611e:	9907      	ldr	r1, [sp, #28]
 8026120:	681a      	ldr	r2, [r3, #0]
 8026122:	9b06      	ldr	r3, [sp, #24]
 8026124:	f8d2 c060 	ldr.w	ip, [r2, #96]	; 0x60
 8026128:	fb03 110b 	mla	r1, r3, fp, r1
 802612c:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 8026130:	f1bc 0f00 	cmp.w	ip, #0
 8026134:	d030      	beq.n	8026198 <GUI_MEMDEV__WriteToActiveAlpha+0x14c>
 8026136:	4660      	mov	r0, ip
 8026138:	f7f9 fc36 	bl	801f9a8 <GUI_ALLOC_LockH>
 802613c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8026140:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8026144:	aa0a      	add	r2, sp, #40	; 0x28
 8026146:	1aed      	subs	r5, r5, r3
 8026148:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802614c:	f842 0d04 	str.w	r0, [r2, #-4]!
 8026150:	00ad      	lsls	r5, r5, #2
 8026152:	3518      	adds	r5, #24
 8026154:	1aff      	subs	r7, r7, r3
 8026156:	fb08 5707 	mla	r7, r8, r7, r5
 802615a:	4407      	add	r7, r0
 802615c:	4610      	mov	r0, r2
 802615e:	f7f9 fc35 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026162:	b187      	cbz	r7, 8026186 <GUI_MEMDEV__WriteToActiveAlpha+0x13a>
 8026164:	9b05      	ldr	r3, [sp, #20]
 8026166:	9301      	str	r3, [sp, #4]
 8026168:	f8cd 8000 	str.w	r8, [sp]
 802616c:	f8d9 5000 	ldr.w	r5, [r9]
 8026170:	4653      	mov	r3, sl
 8026172:	4622      	mov	r2, r4
 8026174:	4631      	mov	r1, r6
 8026176:	4638      	mov	r0, r7
 8026178:	47a8      	blx	r5
 802617a:	e004      	b.n	8026186 <GUI_MEMDEV__WriteToActiveAlpha+0x13a>
 802617c:	463a      	mov	r2, r7
 802617e:	4629      	mov	r1, r5
 8026180:	4640      	mov	r0, r8
 8026182:	f7ff fe9f 	bl	8025ec4 <_WriteToActiveAlpha>
 8026186:	b00b      	add	sp, #44	; 0x2c
 8026188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802618c:	68e2      	ldr	r2, [r4, #12]
 802618e:	6812      	ldr	r2, [r2, #0]
 8026190:	fab2 f282 	clz	r2, r2
 8026194:	0952      	lsrs	r2, r2, #5
 8026196:	e77d      	b.n	8026094 <GUI_MEMDEV__WriteToActiveAlpha+0x48>
 8026198:	7c50      	ldrb	r0, [r2, #17]
 802619a:	f8df e02c 	ldr.w	lr, [pc, #44]	; 80261c8 <GUI_MEMDEV__WriteToActiveAlpha+0x17c>
 802619e:	f8cd a004 	str.w	sl, [sp, #4]
 80261a2:	ea4f 028b 	mov.w	r2, fp, lsl #2
 80261a6:	9202      	str	r2, [sp, #8]
 80261a8:	9400      	str	r4, [sp, #0]
 80261aa:	4633      	mov	r3, r6
 80261ac:	463a      	mov	r2, r7
 80261ae:	4629      	mov	r1, r5
 80261b0:	f8de 4000 	ldr.w	r4, [lr]
 80261b4:	47a0      	blx	r4
 80261b6:	e7e6      	b.n	8026186 <GUI_MEMDEV__WriteToActiveAlpha+0x13a>
 80261b8:	200000e8 	.word	0x200000e8
 80261bc:	200308b0 	.word	0x200308b0
 80261c0:	08036344 	.word	0x08036344
 80261c4:	200308c4 	.word	0x200308c4
 80261c8:	200308c0 	.word	0x200308c0

080261cc <_OnExit>:
 80261cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80261d0:	4d1a      	ldr	r5, [pc, #104]	; (802623c <_OnExit+0x70>)
 80261d2:	4b1b      	ldr	r3, [pc, #108]	; (8026240 <_OnExit+0x74>)
 80261d4:	f8df e094 	ldr.w	lr, [pc, #148]	; 802626c <_OnExit+0xa0>
 80261d8:	f8df c094 	ldr.w	ip, [pc, #148]	; 8026270 <_OnExit+0xa4>
 80261dc:	4919      	ldr	r1, [pc, #100]	; (8026244 <_OnExit+0x78>)
 80261de:	4a1a      	ldr	r2, [pc, #104]	; (8026248 <_OnExit+0x7c>)
 80261e0:	4f1a      	ldr	r7, [pc, #104]	; (802624c <_OnExit+0x80>)
 80261e2:	4e1b      	ldr	r6, [pc, #108]	; (8026250 <_OnExit+0x84>)
 80261e4:	2400      	movs	r4, #0
 80261e6:	602c      	str	r4, [r5, #0]
 80261e8:	4d1a      	ldr	r5, [pc, #104]	; (8026254 <_OnExit+0x88>)
 80261ea:	f8cc 4000 	str.w	r4, [ip]
 80261ee:	f8ce 4000 	str.w	r4, [lr]
 80261f2:	6034      	str	r4, [r6, #0]
 80261f4:	600c      	str	r4, [r1, #0]
 80261f6:	604c      	str	r4, [r1, #4]
 80261f8:	6014      	str	r4, [r2, #0]
 80261fa:	6054      	str	r4, [r2, #4]
 80261fc:	4621      	mov	r1, r4
 80261fe:	f103 000c 	add.w	r0, r3, #12
 8026202:	603c      	str	r4, [r7, #0]
 8026204:	682e      	ldr	r6, [r5, #0]
 8026206:	701c      	strb	r4, [r3, #0]
 8026208:	2218      	movs	r2, #24
 802620a:	605c      	str	r4, [r3, #4]
 802620c:	609c      	str	r4, [r3, #8]
 802620e:	47b0      	blx	r6
 8026210:	4b11      	ldr	r3, [pc, #68]	; (8026258 <_OnExit+0x8c>)
 8026212:	4a12      	ldr	r2, [pc, #72]	; (802625c <_OnExit+0x90>)
 8026214:	601c      	str	r4, [r3, #0]
 8026216:	6014      	str	r4, [r2, #0]
 8026218:	605c      	str	r4, [r3, #4]
 802621a:	4621      	mov	r1, r4
 802621c:	682b      	ldr	r3, [r5, #0]
 802621e:	4810      	ldr	r0, [pc, #64]	; (8026260 <_OnExit+0x94>)
 8026220:	2210      	movs	r2, #16
 8026222:	4798      	blx	r3
 8026224:	682b      	ldr	r3, [r5, #0]
 8026226:	480f      	ldr	r0, [pc, #60]	; (8026264 <_OnExit+0x98>)
 8026228:	4621      	mov	r1, r4
 802622a:	2210      	movs	r2, #16
 802622c:	4798      	blx	r3
 802622e:	682b      	ldr	r3, [r5, #0]
 8026230:	480d      	ldr	r0, [pc, #52]	; (8026268 <_OnExit+0x9c>)
 8026232:	4621      	mov	r1, r4
 8026234:	2210      	movs	r2, #16
 8026236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802623a:	4718      	bx	r3
 802623c:	200308d0 	.word	0x200308d0
 8026240:	2002e3dc 	.word	0x2002e3dc
 8026244:	200308e4 	.word	0x200308e4
 8026248:	20030918 	.word	0x20030918
 802624c:	20030904 	.word	0x20030904
 8026250:	20030914 	.word	0x20030914
 8026254:	2000010c 	.word	0x2000010c
 8026258:	200308d4 	.word	0x200308d4
 802625c:	200308e0 	.word	0x200308e0
 8026260:	20030948 	.word	0x20030948
 8026264:	20030938 	.word	0x20030938
 8026268:	20030928 	.word	0x20030928
 802626c:	20030924 	.word	0x20030924
 8026270:	20030910 	.word	0x20030910

08026274 <_Findy1>:
 8026274:	2800      	cmp	r0, #0
 8026276:	d064      	beq.n	8026342 <_Findy1+0xce>
 8026278:	b5f0      	push	{r4, r5, r6, r7, lr}
 802627a:	460e      	mov	r6, r1
 802627c:	b085      	sub	sp, #20
 802627e:	4617      	mov	r7, r2
 8026280:	4604      	mov	r4, r0
 8026282:	4620      	mov	r0, r4
 8026284:	f7f9 fb90 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026288:	6a84      	ldr	r4, [r0, #40]	; 0x28
 802628a:	9001      	str	r0, [sp, #4]
 802628c:	07a2      	lsls	r2, r4, #30
 802628e:	d524      	bpl.n	80262da <_Findy1+0x66>
 8026290:	2f00      	cmp	r7, #0
 8026292:	d040      	beq.n	8026316 <_Findy1+0xa2>
 8026294:	ad02      	add	r5, sp, #8
 8026296:	4601      	mov	r1, r0
 8026298:	463a      	mov	r2, r7
 802629a:	4628      	mov	r0, r5
 802629c:	f7fc f80e 	bl	80222bc <GUI__IntersectRects>
 80262a0:	4629      	mov	r1, r5
 80262a2:	4630      	mov	r0, r6
 80262a4:	f7fa f80a 	bl	80202bc <GUI_RectsIntersect>
 80262a8:	b368      	cbz	r0, 8026306 <_Findy1+0x92>
 80262aa:	07e3      	lsls	r3, r4, #31
 80262ac:	9801      	ldr	r0, [sp, #4]
 80262ae:	d41c      	bmi.n	80262ea <_Findy1+0x76>
 80262b0:	2f00      	cmp	r7, #0
 80262b2:	d043      	beq.n	802633c <_Findy1+0xc8>
 80262b4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80262b8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80262bc:	4293      	cmp	r3, r2
 80262be:	bfb8      	it	lt
 80262c0:	4613      	movlt	r3, r2
 80262c2:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 80262c6:	4293      	cmp	r3, r2
 80262c8:	dd2a      	ble.n	8026320 <_Findy1+0xac>
 80262ca:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80262ce:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 80262d2:	429a      	cmp	r2, r3
 80262d4:	db01      	blt.n	80262da <_Findy1+0x66>
 80262d6:	3b01      	subs	r3, #1
 80262d8:	80f3      	strh	r3, [r6, #6]
 80262da:	6a04      	ldr	r4, [r0, #32]
 80262dc:	a801      	add	r0, sp, #4
 80262de:	f7f9 fb75 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80262e2:	2c00      	cmp	r4, #0
 80262e4:	d1cd      	bne.n	8026282 <_Findy1+0xe>
 80262e6:	b005      	add	sp, #20
 80262e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80262ea:	69c4      	ldr	r4, [r0, #28]
 80262ec:	2c00      	cmp	r4, #0
 80262ee:	d0f4      	beq.n	80262da <_Findy1+0x66>
 80262f0:	4620      	mov	r0, r4
 80262f2:	462a      	mov	r2, r5
 80262f4:	4631      	mov	r1, r6
 80262f6:	f7ff ffbd 	bl	8026274 <_Findy1>
 80262fa:	4620      	mov	r0, r4
 80262fc:	f7f9 fb4a 	bl	801f994 <GUI_ALLOC_h2p>
 8026300:	6a04      	ldr	r4, [r0, #32]
 8026302:	2c00      	cmp	r4, #0
 8026304:	d1f4      	bne.n	80262f0 <_Findy1+0x7c>
 8026306:	9801      	ldr	r0, [sp, #4]
 8026308:	6a04      	ldr	r4, [r0, #32]
 802630a:	a801      	add	r0, sp, #4
 802630c:	f7f9 fb5e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026310:	2c00      	cmp	r4, #0
 8026312:	d1b6      	bne.n	8026282 <_Findy1+0xe>
 8026314:	e7e7      	b.n	80262e6 <_Findy1+0x72>
 8026316:	c803      	ldmia	r0, {r0, r1}
 8026318:	ad02      	add	r5, sp, #8
 802631a:	e885 0003 	stmia.w	r5, {r0, r1}
 802631e:	e7bf      	b.n	80262a0 <_Findy1+0x2c>
 8026320:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8026324:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 8026328:	429a      	cmp	r2, r3
 802632a:	ddd6      	ble.n	80262da <_Findy1+0x66>
 802632c:	6a04      	ldr	r4, [r0, #32]
 802632e:	80f3      	strh	r3, [r6, #6]
 8026330:	a801      	add	r0, sp, #4
 8026332:	f7f9 fb4b 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026336:	2c00      	cmp	r4, #0
 8026338:	d1a3      	bne.n	8026282 <_Findy1+0xe>
 802633a:	e7d4      	b.n	80262e6 <_Findy1+0x72>
 802633c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8026340:	e7bf      	b.n	80262c2 <_Findy1+0x4e>
 8026342:	4770      	bx	lr

08026344 <_Findx0>:
 8026344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026348:	4604      	mov	r4, r0
 802634a:	b084      	sub	sp, #16
 802634c:	2800      	cmp	r0, #0
 802634e:	d04a      	beq.n	80263e6 <_Findx0+0xa2>
 8026350:	460f      	mov	r7, r1
 8026352:	4690      	mov	r8, r2
 8026354:	2600      	movs	r6, #0
 8026356:	e00c      	b.n	8026372 <_Findx0+0x2e>
 8026358:	07e3      	lsls	r3, r4, #31
 802635a:	d430      	bmi.n	80263be <_Findx0+0x7a>
 802635c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8026360:	9801      	ldr	r0, [sp, #4]
 8026362:	3301      	adds	r3, #1
 8026364:	803b      	strh	r3, [r7, #0]
 8026366:	2601      	movs	r6, #1
 8026368:	6a04      	ldr	r4, [r0, #32]
 802636a:	a801      	add	r0, sp, #4
 802636c:	f7f9 fb2e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026370:	b1e4      	cbz	r4, 80263ac <_Findx0+0x68>
 8026372:	4620      	mov	r0, r4
 8026374:	f7f9 fb18 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026378:	6a84      	ldr	r4, [r0, #40]	; 0x28
 802637a:	9001      	str	r0, [sp, #4]
 802637c:	07a2      	lsls	r2, r4, #30
 802637e:	d5f3      	bpl.n	8026368 <_Findx0+0x24>
 8026380:	f1b8 0f00 	cmp.w	r8, #0
 8026384:	d016      	beq.n	80263b4 <_Findx0+0x70>
 8026386:	ad02      	add	r5, sp, #8
 8026388:	4601      	mov	r1, r0
 802638a:	4642      	mov	r2, r8
 802638c:	4628      	mov	r0, r5
 802638e:	f7fb ff95 	bl	80222bc <GUI__IntersectRects>
 8026392:	4629      	mov	r1, r5
 8026394:	4638      	mov	r0, r7
 8026396:	f7f9 ff91 	bl	80202bc <GUI_RectsIntersect>
 802639a:	2800      	cmp	r0, #0
 802639c:	d1dc      	bne.n	8026358 <_Findx0+0x14>
 802639e:	9801      	ldr	r0, [sp, #4]
 80263a0:	6a04      	ldr	r4, [r0, #32]
 80263a2:	a801      	add	r0, sp, #4
 80263a4:	f7f9 fb12 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80263a8:	2c00      	cmp	r4, #0
 80263aa:	d1e2      	bne.n	8026372 <_Findx0+0x2e>
 80263ac:	4630      	mov	r0, r6
 80263ae:	b004      	add	sp, #16
 80263b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80263b4:	c803      	ldmia	r0, {r0, r1}
 80263b6:	ad02      	add	r5, sp, #8
 80263b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80263bc:	e7e9      	b.n	8026392 <_Findx0+0x4e>
 80263be:	9801      	ldr	r0, [sp, #4]
 80263c0:	69c4      	ldr	r4, [r0, #28]
 80263c2:	2c00      	cmp	r4, #0
 80263c4:	d0d0      	beq.n	8026368 <_Findx0+0x24>
 80263c6:	462a      	mov	r2, r5
 80263c8:	4639      	mov	r1, r7
 80263ca:	4620      	mov	r0, r4
 80263cc:	f7ff ffba 	bl	8026344 <_Findx0>
 80263d0:	2800      	cmp	r0, #0
 80263d2:	4620      	mov	r0, r4
 80263d4:	bf18      	it	ne
 80263d6:	2601      	movne	r6, #1
 80263d8:	f7f9 fadc 	bl	801f994 <GUI_ALLOC_h2p>
 80263dc:	6a04      	ldr	r4, [r0, #32]
 80263de:	2c00      	cmp	r4, #0
 80263e0:	d1f1      	bne.n	80263c6 <_Findx0+0x82>
 80263e2:	9801      	ldr	r0, [sp, #4]
 80263e4:	e7dc      	b.n	80263a0 <_Findx0+0x5c>
 80263e6:	4606      	mov	r6, r0
 80263e8:	e7e0      	b.n	80263ac <_Findx0+0x68>
 80263ea:	bf00      	nop

080263ec <_Findx1>:
 80263ec:	2800      	cmp	r0, #0
 80263ee:	d044      	beq.n	802647a <_Findx1+0x8e>
 80263f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80263f2:	460e      	mov	r6, r1
 80263f4:	b085      	sub	sp, #20
 80263f6:	4617      	mov	r7, r2
 80263f8:	4604      	mov	r4, r0
 80263fa:	e00b      	b.n	8026414 <_Findx1+0x28>
 80263fc:	07e3      	lsls	r3, r4, #31
 80263fe:	d42b      	bmi.n	8026458 <_Findx1+0x6c>
 8026400:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8026404:	9801      	ldr	r0, [sp, #4]
 8026406:	3b01      	subs	r3, #1
 8026408:	80b3      	strh	r3, [r6, #4]
 802640a:	6a04      	ldr	r4, [r0, #32]
 802640c:	a801      	add	r0, sp, #4
 802640e:	f7f9 fadd 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026412:	b1d4      	cbz	r4, 802644a <_Findx1+0x5e>
 8026414:	4620      	mov	r0, r4
 8026416:	f7f9 fac7 	bl	801f9a8 <GUI_ALLOC_LockH>
 802641a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 802641c:	9001      	str	r0, [sp, #4]
 802641e:	07a2      	lsls	r2, r4, #30
 8026420:	d5f3      	bpl.n	802640a <_Findx1+0x1e>
 8026422:	b1a7      	cbz	r7, 802644e <_Findx1+0x62>
 8026424:	ad02      	add	r5, sp, #8
 8026426:	4601      	mov	r1, r0
 8026428:	463a      	mov	r2, r7
 802642a:	4628      	mov	r0, r5
 802642c:	f7fb ff46 	bl	80222bc <GUI__IntersectRects>
 8026430:	4629      	mov	r1, r5
 8026432:	4630      	mov	r0, r6
 8026434:	f7f9 ff42 	bl	80202bc <GUI_RectsIntersect>
 8026438:	2800      	cmp	r0, #0
 802643a:	d1df      	bne.n	80263fc <_Findx1+0x10>
 802643c:	9801      	ldr	r0, [sp, #4]
 802643e:	6a04      	ldr	r4, [r0, #32]
 8026440:	a801      	add	r0, sp, #4
 8026442:	f7f9 fac3 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026446:	2c00      	cmp	r4, #0
 8026448:	d1e4      	bne.n	8026414 <_Findx1+0x28>
 802644a:	b005      	add	sp, #20
 802644c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802644e:	c803      	ldmia	r0, {r0, r1}
 8026450:	ad02      	add	r5, sp, #8
 8026452:	e885 0003 	stmia.w	r5, {r0, r1}
 8026456:	e7eb      	b.n	8026430 <_Findx1+0x44>
 8026458:	9801      	ldr	r0, [sp, #4]
 802645a:	69c4      	ldr	r4, [r0, #28]
 802645c:	2c00      	cmp	r4, #0
 802645e:	d0d4      	beq.n	802640a <_Findx1+0x1e>
 8026460:	4620      	mov	r0, r4
 8026462:	462a      	mov	r2, r5
 8026464:	4631      	mov	r1, r6
 8026466:	f7ff ffc1 	bl	80263ec <_Findx1>
 802646a:	4620      	mov	r0, r4
 802646c:	f7f9 fa92 	bl	801f994 <GUI_ALLOC_h2p>
 8026470:	6a04      	ldr	r4, [r0, #32]
 8026472:	2c00      	cmp	r4, #0
 8026474:	d1f4      	bne.n	8026460 <_Findx1+0x74>
 8026476:	9801      	ldr	r0, [sp, #4]
 8026478:	e7e1      	b.n	802643e <_Findx1+0x52>
 802647a:	4770      	bx	lr

0802647c <_Paint1Trans>:
 802647c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8026480:	4d29      	ldr	r5, [pc, #164]	; (8026528 <_Paint1Trans+0xac>)
 8026482:	682b      	ldr	r3, [r5, #0]
 8026484:	b083      	sub	sp, #12
 8026486:	4606      	mov	r6, r0
 8026488:	6c98      	ldr	r0, [r3, #72]	; 0x48
 802648a:	f7f9 fa8d 	bl	801f9a8 <GUI_ALLOC_LockH>
 802648e:	9000      	str	r0, [sp, #0]
 8026490:	4630      	mov	r0, r6
 8026492:	f7f9 fa89 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026496:	4601      	mov	r1, r0
 8026498:	9800      	ldr	r0, [sp, #0]
 802649a:	9101      	str	r1, [sp, #4]
 802649c:	3008      	adds	r0, #8
 802649e:	f7f9 ff0d 	bl	80202bc <GUI_RectsIntersect>
 80264a2:	b950      	cbnz	r0, 80264ba <_Paint1Trans+0x3e>
 80264a4:	4604      	mov	r4, r0
 80264a6:	4668      	mov	r0, sp
 80264a8:	f7f9 fa90 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80264ac:	a801      	add	r0, sp, #4
 80264ae:	f7f9 fa8d 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80264b2:	4620      	mov	r0, r4
 80264b4:	b003      	add	sp, #12
 80264b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80264ba:	ac02      	add	r4, sp, #8
 80264bc:	9901      	ldr	r1, [sp, #4]
 80264be:	f854 2d08 	ldr.w	r2, [r4, #-8]!
 80264c2:	682b      	ldr	r3, [r5, #0]
 80264c4:	4f19      	ldr	r7, [pc, #100]	; (802652c <_Paint1Trans+0xb0>)
 80264c6:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
 80264ca:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 80264ce:	3208      	adds	r2, #8
 80264d0:	f101 0008 	add.w	r0, r1, #8
 80264d4:	f7fb fef2 	bl	80222bc <GUI__IntersectRects>
 80264d8:	4620      	mov	r0, r4
 80264da:	f7f9 fa77 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80264de:	a802      	add	r0, sp, #8
 80264e0:	682b      	ldr	r3, [r5, #0]
 80264e2:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 80264e6:	603e      	str	r6, [r7, #0]
 80264e8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80264ec:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80264f0:	651a      	str	r2, [r3, #80]	; 0x50
 80264f2:	64d9      	str	r1, [r3, #76]	; 0x4c
 80264f4:	f7f9 fa6a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80264f8:	4630      	mov	r0, r6
 80264fa:	f7f9 fa4b 	bl	801f994 <GUI_ALLOC_h2p>
 80264fe:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8026500:	4a0b      	ldr	r2, [pc, #44]	; (8026530 <_Paint1Trans+0xb4>)
 8026502:	4b0c      	ldr	r3, [pc, #48]	; (8026534 <_Paint1Trans+0xb8>)
 8026504:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8026508:	bf08      	it	eq
 802650a:	4613      	moveq	r3, r2
 802650c:	4630      	mov	r0, r6
 802650e:	4798      	blx	r3
 8026510:	2401      	movs	r4, #1
 8026512:	682b      	ldr	r3, [r5, #0]
 8026514:	2200      	movs	r2, #0
 8026516:	4620      	mov	r0, r4
 8026518:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
 802651c:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 8026520:	603a      	str	r2, [r7, #0]
 8026522:	b003      	add	sp, #12
 8026524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026528:	200000e8 	.word	0x200000e8
 802652c:	200308d0 	.word	0x200308d0
 8026530:	0802818d 	.word	0x0802818d
 8026534:	0802d4c5 	.word	0x0802d4c5

08026538 <_PaintTransChildren>:
 8026538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802653c:	b082      	sub	sp, #8
 802653e:	4605      	mov	r5, r0
 8026540:	f7f9 fa32 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026544:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026546:	9001      	str	r0, [sp, #4]
 8026548:	079b      	lsls	r3, r3, #30
 802654a:	d524      	bpl.n	8026596 <_PaintTransChildren+0x5e>
 802654c:	69c6      	ldr	r6, [r0, #28]
 802654e:	b316      	cbz	r6, 8026596 <_PaintTransChildren+0x5e>
 8026550:	ac01      	add	r4, sp, #4
 8026552:	e004      	b.n	802655e <_PaintTransChildren+0x26>
 8026554:	6a1e      	ldr	r6, [r3, #32]
 8026556:	4668      	mov	r0, sp
 8026558:	f7f9 fa38 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802655c:	b1ae      	cbz	r6, 802658a <_PaintTransChildren+0x52>
 802655e:	4630      	mov	r0, r6
 8026560:	f7f9 fa22 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026564:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8026566:	9000      	str	r0, [sp, #0]
 8026568:	f002 0203 	and.w	r2, r2, #3
 802656c:	2a03      	cmp	r2, #3
 802656e:	4603      	mov	r3, r0
 8026570:	d1f0      	bne.n	8026554 <_PaintTransChildren+0x1c>
 8026572:	9901      	ldr	r1, [sp, #4]
 8026574:	3108      	adds	r1, #8
 8026576:	f7f9 fea1 	bl	80202bc <GUI_RectsIntersect>
 802657a:	b998      	cbnz	r0, 80265a4 <_PaintTransChildren+0x6c>
 802657c:	9b00      	ldr	r3, [sp, #0]
 802657e:	6a1e      	ldr	r6, [r3, #32]
 8026580:	4668      	mov	r0, sp
 8026582:	f7f9 fa23 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026586:	2e00      	cmp	r6, #0
 8026588:	d1e9      	bne.n	802655e <_PaintTransChildren+0x26>
 802658a:	4620      	mov	r0, r4
 802658c:	f7f9 fa1e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026590:	b002      	add	sp, #8
 8026592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026596:	ac01      	add	r4, sp, #4
 8026598:	4620      	mov	r0, r4
 802659a:	f7f9 fa17 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802659e:	b002      	add	sp, #8
 80265a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80265a4:	9b01      	ldr	r3, [sp, #4]
 80265a6:	4620      	mov	r0, r4
 80265a8:	f9b3 9008 	ldrsh.w	r9, [r3, #8]
 80265ac:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 80265b0:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
 80265b4:	f9b3 a00e 	ldrsh.w	sl, [r3, #14]
 80265b8:	f7f9 fa08 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80265bc:	4668      	mov	r0, sp
 80265be:	f7f9 fa05 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80265c2:	4630      	mov	r0, r6
 80265c4:	f7ff ff5a 	bl	802647c <_Paint1Trans>
 80265c8:	b988      	cbnz	r0, 80265ee <_PaintTransChildren+0xb6>
 80265ca:	4628      	mov	r0, r5
 80265cc:	f7f9 f9ec 	bl	801f9a8 <GUI_ALLOC_LockH>
 80265d0:	9001      	str	r0, [sp, #4]
 80265d2:	4630      	mov	r0, r6
 80265d4:	f7f9 f9e8 	bl	801f9a8 <GUI_ALLOC_LockH>
 80265d8:	9a01      	ldr	r2, [sp, #4]
 80265da:	9000      	str	r0, [sp, #0]
 80265dc:	4603      	mov	r3, r0
 80265de:	f8a2 9008 	strh.w	r9, [r2, #8]
 80265e2:	f8a2 800a 	strh.w	r8, [r2, #10]
 80265e6:	8197      	strh	r7, [r2, #12]
 80265e8:	f8a2 a00e 	strh.w	sl, [r2, #14]
 80265ec:	e7b2      	b.n	8026554 <_PaintTransChildren+0x1c>
 80265ee:	4630      	mov	r0, r6
 80265f0:	f7f9 f9d0 	bl	801f994 <GUI_ALLOC_h2p>
 80265f4:	9000      	str	r0, [sp, #0]
 80265f6:	4630      	mov	r0, r6
 80265f8:	f7ff ff9e 	bl	8026538 <_PaintTransChildren>
 80265fc:	4630      	mov	r0, r6
 80265fe:	f7f9 f9c9 	bl	801f994 <GUI_ALLOC_h2p>
 8026602:	9000      	str	r0, [sp, #0]
 8026604:	4628      	mov	r0, r5
 8026606:	f7f9 f9c5 	bl	801f994 <GUI_ALLOC_h2p>
 802660a:	9001      	str	r0, [sp, #4]
 802660c:	e7dd      	b.n	80265ca <_PaintTransChildren+0x92>
 802660e:	bf00      	nop

08026610 <_Findx0.constprop.10>:
 8026610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026612:	4604      	mov	r4, r0
 8026614:	b085      	sub	sp, #20
 8026616:	2800      	cmp	r0, #0
 8026618:	d03e      	beq.n	8026698 <_Findx0.constprop.10+0x88>
 802661a:	460f      	mov	r7, r1
 802661c:	2600      	movs	r6, #0
 802661e:	ad02      	add	r5, sp, #8
 8026620:	e00c      	b.n	802663c <_Findx0.constprop.10+0x2c>
 8026622:	07e3      	lsls	r3, r4, #31
 8026624:	d424      	bmi.n	8026670 <_Findx0.constprop.10+0x60>
 8026626:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 802662a:	9801      	ldr	r0, [sp, #4]
 802662c:	3301      	adds	r3, #1
 802662e:	803b      	strh	r3, [r7, #0]
 8026630:	2601      	movs	r6, #1
 8026632:	6a04      	ldr	r4, [r0, #32]
 8026634:	a801      	add	r0, sp, #4
 8026636:	f7f9 f9c9 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802663a:	b1b4      	cbz	r4, 802666a <_Findx0.constprop.10+0x5a>
 802663c:	4620      	mov	r0, r4
 802663e:	f7f9 f9b3 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026642:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8026644:	9001      	str	r0, [sp, #4]
 8026646:	07a2      	lsls	r2, r4, #30
 8026648:	d5f3      	bpl.n	8026632 <_Findx0.constprop.10+0x22>
 802664a:	c803      	ldmia	r0, {r0, r1}
 802664c:	e885 0003 	stmia.w	r5, {r0, r1}
 8026650:	4629      	mov	r1, r5
 8026652:	4638      	mov	r0, r7
 8026654:	f7f9 fe32 	bl	80202bc <GUI_RectsIntersect>
 8026658:	2800      	cmp	r0, #0
 802665a:	d1e2      	bne.n	8026622 <_Findx0.constprop.10+0x12>
 802665c:	9801      	ldr	r0, [sp, #4]
 802665e:	6a04      	ldr	r4, [r0, #32]
 8026660:	a801      	add	r0, sp, #4
 8026662:	f7f9 f9b3 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026666:	2c00      	cmp	r4, #0
 8026668:	d1e8      	bne.n	802663c <_Findx0.constprop.10+0x2c>
 802666a:	4630      	mov	r0, r6
 802666c:	b005      	add	sp, #20
 802666e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026670:	9801      	ldr	r0, [sp, #4]
 8026672:	69c4      	ldr	r4, [r0, #28]
 8026674:	2c00      	cmp	r4, #0
 8026676:	d0dc      	beq.n	8026632 <_Findx0.constprop.10+0x22>
 8026678:	462a      	mov	r2, r5
 802667a:	4639      	mov	r1, r7
 802667c:	4620      	mov	r0, r4
 802667e:	f7ff fe61 	bl	8026344 <_Findx0>
 8026682:	2800      	cmp	r0, #0
 8026684:	4620      	mov	r0, r4
 8026686:	bf18      	it	ne
 8026688:	2601      	movne	r6, #1
 802668a:	f7f9 f983 	bl	801f994 <GUI_ALLOC_h2p>
 802668e:	6a04      	ldr	r4, [r0, #32]
 8026690:	2c00      	cmp	r4, #0
 8026692:	d1f1      	bne.n	8026678 <_Findx0.constprop.10+0x68>
 8026694:	9801      	ldr	r0, [sp, #4]
 8026696:	e7e2      	b.n	802665e <_Findx0.constprop.10+0x4e>
 8026698:	4606      	mov	r6, r0
 802669a:	e7e6      	b.n	802666a <_Findx0.constprop.10+0x5a>

0802669c <_Findy1.constprop.11>:
 802669c:	2800      	cmp	r0, #0
 802669e:	d050      	beq.n	8026742 <_Findy1.constprop.11+0xa6>
 80266a0:	b570      	push	{r4, r5, r6, lr}
 80266a2:	b084      	sub	sp, #16
 80266a4:	460e      	mov	r6, r1
 80266a6:	4604      	mov	r4, r0
 80266a8:	ad02      	add	r5, sp, #8
 80266aa:	4620      	mov	r0, r4
 80266ac:	f7f9 f97c 	bl	801f9a8 <GUI_ALLOC_LockH>
 80266b0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80266b2:	9001      	str	r0, [sp, #4]
 80266b4:	07a2      	lsls	r2, r4, #30
 80266b6:	d518      	bpl.n	80266ea <_Findy1.constprop.11+0x4e>
 80266b8:	c803      	ldmia	r0, {r0, r1}
 80266ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80266be:	4629      	mov	r1, r5
 80266c0:	4630      	mov	r0, r6
 80266c2:	f7f9 fdfb 	bl	80202bc <GUI_RectsIntersect>
 80266c6:	b330      	cbz	r0, 8026716 <_Findy1.constprop.11+0x7a>
 80266c8:	07e3      	lsls	r3, r4, #31
 80266ca:	9801      	ldr	r0, [sp, #4]
 80266cc:	d415      	bmi.n	80266fa <_Findy1.constprop.11+0x5e>
 80266ce:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80266d2:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80266d6:	429a      	cmp	r2, r3
 80266d8:	dd25      	ble.n	8026726 <_Findy1.constprop.11+0x8a>
 80266da:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80266de:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 80266e2:	429a      	cmp	r2, r3
 80266e4:	db01      	blt.n	80266ea <_Findy1.constprop.11+0x4e>
 80266e6:	3b01      	subs	r3, #1
 80266e8:	80f3      	strh	r3, [r6, #6]
 80266ea:	6a04      	ldr	r4, [r0, #32]
 80266ec:	a801      	add	r0, sp, #4
 80266ee:	f7f9 f96d 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80266f2:	2c00      	cmp	r4, #0
 80266f4:	d1d9      	bne.n	80266aa <_Findy1.constprop.11+0xe>
 80266f6:	b004      	add	sp, #16
 80266f8:	bd70      	pop	{r4, r5, r6, pc}
 80266fa:	69c4      	ldr	r4, [r0, #28]
 80266fc:	2c00      	cmp	r4, #0
 80266fe:	d0f4      	beq.n	80266ea <_Findy1.constprop.11+0x4e>
 8026700:	4620      	mov	r0, r4
 8026702:	462a      	mov	r2, r5
 8026704:	4631      	mov	r1, r6
 8026706:	f7ff fdb5 	bl	8026274 <_Findy1>
 802670a:	4620      	mov	r0, r4
 802670c:	f7f9 f942 	bl	801f994 <GUI_ALLOC_h2p>
 8026710:	6a04      	ldr	r4, [r0, #32]
 8026712:	2c00      	cmp	r4, #0
 8026714:	d1f4      	bne.n	8026700 <_Findy1.constprop.11+0x64>
 8026716:	9801      	ldr	r0, [sp, #4]
 8026718:	6a04      	ldr	r4, [r0, #32]
 802671a:	a801      	add	r0, sp, #4
 802671c:	f7f9 f956 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026720:	2c00      	cmp	r4, #0
 8026722:	d1c2      	bne.n	80266aa <_Findy1.constprop.11+0xe>
 8026724:	e7e7      	b.n	80266f6 <_Findy1.constprop.11+0x5a>
 8026726:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 802672a:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 802672e:	429a      	cmp	r2, r3
 8026730:	dddb      	ble.n	80266ea <_Findy1.constprop.11+0x4e>
 8026732:	6a04      	ldr	r4, [r0, #32]
 8026734:	80f3      	strh	r3, [r6, #6]
 8026736:	a801      	add	r0, sp, #4
 8026738:	f7f9 f948 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802673c:	2c00      	cmp	r4, #0
 802673e:	d1b4      	bne.n	80266aa <_Findy1.constprop.11+0xe>
 8026740:	e7d9      	b.n	80266f6 <_Findy1.constprop.11+0x5a>
 8026742:	4770      	bx	lr

08026744 <WM__PaintWinAndOverlays>:
 8026744:	b530      	push	{r4, r5, lr}
 8026746:	b083      	sub	sp, #12
 8026748:	4604      	mov	r4, r0
 802674a:	f7f9 f92d 	bl	801f9a8 <GUI_ALLOC_LockH>
 802674e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8026750:	9001      	str	r0, [sp, #4]
 8026752:	f640 0301 	movw	r3, #2049	; 0x801
 8026756:	4013      	ands	r3, r2
 8026758:	2b01      	cmp	r3, #1
 802675a:	d00e      	beq.n	802677a <WM__PaintWinAndOverlays+0x36>
 802675c:	a801      	add	r0, sp, #4
 802675e:	f7f9 f935 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026762:	4620      	mov	r0, r4
 8026764:	f7f9 f916 	bl	801f994 <GUI_ALLOC_h2p>
 8026768:	6a81      	ldr	r1, [r0, #40]	; 0x28
 802676a:	4a1b      	ldr	r2, [pc, #108]	; (80267d8 <WM__PaintWinAndOverlays+0x94>)
 802676c:	4b1b      	ldr	r3, [pc, #108]	; (80267dc <WM__PaintWinAndOverlays+0x98>)
 802676e:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8026772:	bf08      	it	eq
 8026774:	4613      	moveq	r3, r2
 8026776:	4620      	mov	r0, r4
 8026778:	4798      	blx	r3
 802677a:	4b19      	ldr	r3, [pc, #100]	; (80267e0 <WM__PaintWinAndOverlays+0x9c>)
 802677c:	681b      	ldr	r3, [r3, #0]
 802677e:	b90b      	cbnz	r3, 8026784 <WM__PaintWinAndOverlays+0x40>
 8026780:	b003      	add	sp, #12
 8026782:	bd30      	pop	{r4, r5, pc}
 8026784:	4620      	mov	r0, r4
 8026786:	f7ff fed7 	bl	8026538 <_PaintTransChildren>
 802678a:	4620      	mov	r0, r4
 802678c:	f7f9 f902 	bl	801f994 <GUI_ALLOC_h2p>
 8026790:	6985      	ldr	r5, [r0, #24]
 8026792:	6a04      	ldr	r4, [r0, #32]
 8026794:	2d00      	cmp	r5, #0
 8026796:	d0f3      	beq.n	8026780 <WM__PaintWinAndOverlays+0x3c>
 8026798:	b184      	cbz	r4, 80267bc <WM__PaintWinAndOverlays+0x78>
 802679a:	4620      	mov	r0, r4
 802679c:	f7f9 f8fa 	bl	801f994 <GUI_ALLOC_h2p>
 80267a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80267a2:	f003 0303 	and.w	r3, r3, #3
 80267a6:	2b03      	cmp	r3, #3
 80267a8:	d011      	beq.n	80267ce <WM__PaintWinAndOverlays+0x8a>
 80267aa:	4620      	mov	r0, r4
 80267ac:	f7ff fec4 	bl	8026538 <_PaintTransChildren>
 80267b0:	4620      	mov	r0, r4
 80267b2:	f7f9 f8ef 	bl	801f994 <GUI_ALLOC_h2p>
 80267b6:	6a04      	ldr	r4, [r0, #32]
 80267b8:	2c00      	cmp	r4, #0
 80267ba:	d1ee      	bne.n	802679a <WM__PaintWinAndOverlays+0x56>
 80267bc:	4628      	mov	r0, r5
 80267be:	f7f9 f8e9 	bl	801f994 <GUI_ALLOC_h2p>
 80267c2:	6985      	ldr	r5, [r0, #24]
 80267c4:	6a04      	ldr	r4, [r0, #32]
 80267c6:	2d00      	cmp	r5, #0
 80267c8:	d1e6      	bne.n	8026798 <WM__PaintWinAndOverlays+0x54>
 80267ca:	b003      	add	sp, #12
 80267cc:	bd30      	pop	{r4, r5, pc}
 80267ce:	4620      	mov	r0, r4
 80267d0:	f7ff fe54 	bl	802647c <_Paint1Trans>
 80267d4:	e7e9      	b.n	80267aa <WM__PaintWinAndOverlays+0x66>
 80267d6:	bf00      	nop
 80267d8:	0802818d 	.word	0x0802818d
 80267dc:	0802d4c5 	.word	0x0802d4c5
 80267e0:	20030924 	.word	0x20030924

080267e4 <_cbPaintMemDev>:
 80267e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80267e8:	4d19      	ldr	r5, [pc, #100]	; (8026850 <_cbPaintMemDev+0x6c>)
 80267ea:	682b      	ldr	r3, [r5, #0]
 80267ec:	b082      	sub	sp, #8
 80267ee:	4681      	mov	r9, r0
 80267f0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80267f2:	f7f9 f8d9 	bl	801f9a8 <GUI_ALLOC_LockH>
 80267f6:	682a      	ldr	r2, [r5, #0]
 80267f8:	ac02      	add	r4, sp, #8
 80267fa:	3208      	adds	r2, #8
 80267fc:	4603      	mov	r3, r0
 80267fe:	f844 0d04 	str.w	r0, [r4, #-4]!
 8026802:	e892 0003 	ldmia.w	r2, {r0, r1}
 8026806:	f103 0208 	add.w	r2, r3, #8
 802680a:	f9b3 a008 	ldrsh.w	sl, [r3, #8]
 802680e:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 8026812:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
 8026816:	f9b3 600e 	ldrsh.w	r6, [r3, #14]
 802681a:	e882 0003 	stmia.w	r2, {r0, r1}
 802681e:	4620      	mov	r0, r4
 8026820:	f7f9 f8d4 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026824:	f8d9 0000 	ldr.w	r0, [r9]
 8026828:	f7ff ff8c 	bl	8026744 <WM__PaintWinAndOverlays>
 802682c:	682b      	ldr	r3, [r5, #0]
 802682e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8026830:	f7f9 f8ba 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026834:	4603      	mov	r3, r0
 8026836:	4620      	mov	r0, r4
 8026838:	f8a3 a008 	strh.w	sl, [r3, #8]
 802683c:	f8a3 800a 	strh.w	r8, [r3, #10]
 8026840:	819f      	strh	r7, [r3, #12]
 8026842:	81de      	strh	r6, [r3, #14]
 8026844:	9301      	str	r3, [sp, #4]
 8026846:	f7f9 f8c1 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802684a:	b002      	add	sp, #8
 802684c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026850:	200000e8 	.word	0x200000e8

08026854 <_Invalidate1Abs>:
 8026854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026856:	b085      	sub	sp, #20
 8026858:	4616      	mov	r6, r2
 802685a:	460c      	mov	r4, r1
 802685c:	4605      	mov	r5, r0
 802685e:	f7f9 f899 	bl	801f994 <GUI_ALLOC_h2p>
 8026862:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026864:	9001      	str	r0, [sp, #4]
 8026866:	079a      	lsls	r2, r3, #30
 8026868:	d505      	bpl.n	8026876 <_Invalidate1Abs+0x22>
 802686a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802686e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8026872:	4291      	cmp	r1, r2
 8026874:	da01      	bge.n	802687a <_Invalidate1Abs+0x26>
 8026876:	b005      	add	sp, #20
 8026878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802687a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802687e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8026882:	4291      	cmp	r1, r2
 8026884:	dcf7      	bgt.n	8026876 <_Invalidate1Abs+0x22>
 8026886:	f640 0201 	movw	r2, #2049	; 0x801
 802688a:	401a      	ands	r2, r3
 802688c:	2a01      	cmp	r2, #1
 802688e:	d0f2      	beq.n	8026876 <_Invalidate1Abs+0x22>
 8026890:	4628      	mov	r0, r5
 8026892:	f7f9 f889 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026896:	af02      	add	r7, sp, #8
 8026898:	4603      	mov	r3, r0
 802689a:	4602      	mov	r2, r0
 802689c:	4621      	mov	r1, r4
 802689e:	4638      	mov	r0, r7
 80268a0:	9301      	str	r3, [sp, #4]
 80268a2:	f7fb fd0b 	bl	80222bc <GUI__IntersectRects>
 80268a6:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 80268aa:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80268ae:	429a      	cmp	r2, r3
 80268b0:	dc31      	bgt.n	8026916 <_Invalidate1Abs+0xc2>
 80268b2:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80268b6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80268ba:	429a      	cmp	r2, r3
 80268bc:	dc2b      	bgt.n	8026916 <_Invalidate1Abs+0xc2>
 80268be:	9a01      	ldr	r2, [sp, #4]
 80268c0:	6a94      	ldr	r4, [r2, #40]	; 0x28
 80268c2:	f244 0320 	movw	r3, #16416	; 0x4020
 80268c6:	4023      	ands	r3, r4
 80268c8:	bb53      	cbnz	r3, 8026920 <_Invalidate1Abs+0xcc>
 80268ca:	f8df e070 	ldr.w	lr, [pc, #112]	; 802693c <_Invalidate1Abs+0xe8>
 80268ce:	e897 0003 	ldmia.w	r7, {r0, r1}
 80268d2:	f8be 3000 	ldrh.w	r3, [lr]
 80268d6:	4326      	orrs	r6, r4
 80268d8:	3301      	adds	r3, #1
 80268da:	f102 0408 	add.w	r4, r2, #8
 80268de:	e884 0003 	stmia.w	r4, {r0, r1}
 80268e2:	f8ae 3000 	strh.w	r3, [lr]
 80268e6:	6296      	str	r6, [r2, #40]	; 0x28
 80268e8:	e000      	b.n	80268ec <_Invalidate1Abs+0x98>
 80268ea:	461d      	mov	r5, r3
 80268ec:	4628      	mov	r0, r5
 80268ee:	f7f9 f851 	bl	801f994 <GUI_ALLOC_h2p>
 80268f2:	6983      	ldr	r3, [r0, #24]
 80268f4:	2b00      	cmp	r3, #0
 80268f6:	d1f8      	bne.n	80268ea <_Invalidate1Abs+0x96>
 80268f8:	4b0e      	ldr	r3, [pc, #56]	; (8026934 <_Invalidate1Abs+0xe0>)
 80268fa:	681a      	ldr	r2, [r3, #0]
 80268fc:	4295      	cmp	r5, r2
 80268fe:	d016      	beq.n	802692e <_Invalidate1Abs+0xda>
 8026900:	685b      	ldr	r3, [r3, #4]
 8026902:	42ab      	cmp	r3, r5
 8026904:	bf0c      	ite	eq
 8026906:	2302      	moveq	r3, #2
 8026908:	2300      	movne	r3, #0
 802690a:	4a0b      	ldr	r2, [pc, #44]	; (8026938 <_Invalidate1Abs+0xe4>)
 802690c:	6811      	ldr	r1, [r2, #0]
 802690e:	430b      	orrs	r3, r1
 8026910:	6013      	str	r3, [r2, #0]
 8026912:	f7fb f939 	bl	8021b88 <GUI_SignalEvent>
 8026916:	a801      	add	r0, sp, #4
 8026918:	f7f9 f858 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802691c:	b005      	add	sp, #20
 802691e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026920:	f102 0108 	add.w	r1, r2, #8
 8026924:	4608      	mov	r0, r1
 8026926:	463a      	mov	r2, r7
 8026928:	f7f9 fbe8 	bl	80200fc <GUI_MergeRect>
 802692c:	e7f3      	b.n	8026916 <_Invalidate1Abs+0xc2>
 802692e:	2301      	movs	r3, #1
 8026930:	e7eb      	b.n	802690a <_Invalidate1Abs+0xb6>
 8026932:	bf00      	nop
 8026934:	200308d4 	.word	0x200308d4
 8026938:	200308fc 	.word	0x200308fc
 802693c:	200308ec 	.word	0x200308ec

08026940 <WM__ActivateClipRect>:
 8026940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026944:	4f45      	ldr	r7, [pc, #276]	; (8026a5c <WM__ActivateClipRect+0x11c>)
 8026946:	683b      	ldr	r3, [r7, #0]
 8026948:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 802694c:	b086      	sub	sp, #24
 802694e:	2a00      	cmp	r2, #0
 8026950:	d139      	bne.n	80269c6 <WM__ActivateClipRect+0x86>
 8026952:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8026954:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8026a60 <WM__ActivateClipRect+0x120>
 8026958:	f7f9 f826 	bl	801f9a8 <GUI_ALLOC_LockH>
 802695c:	4603      	mov	r3, r0
 802695e:	c803      	ldmia	r0, {r0, r1}
 8026960:	ae02      	add	r6, sp, #8
 8026962:	e886 0003 	stmia.w	r6, {r0, r1}
 8026966:	4668      	mov	r0, sp
 8026968:	9300      	str	r3, [sp, #0]
 802696a:	f7f9 f82f 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802696e:	f8d8 4000 	ldr.w	r4, [r8]
 8026972:	2c00      	cmp	r4, #0
 8026974:	d14e      	bne.n	8026a14 <WM__ActivateClipRect+0xd4>
 8026976:	683c      	ldr	r4, [r7, #0]
 8026978:	6c63      	ldr	r3, [r4, #68]	; 0x44
 802697a:	2b00      	cmp	r3, #0
 802697c:	d065      	beq.n	8026a4a <WM__ActivateClipRect+0x10a>
 802697e:	6818      	ldr	r0, [r3, #0]
 8026980:	6859      	ldr	r1, [r3, #4]
 8026982:	f8d8 2000 	ldr.w	r2, [r8]
 8026986:	ad04      	add	r5, sp, #16
 8026988:	462b      	mov	r3, r5
 802698a:	c303      	stmia	r3!, {r0, r1}
 802698c:	b1ca      	cbz	r2, 80269c2 <WM__ActivateClipRect+0x82>
 802698e:	4610      	mov	r0, r2
 8026990:	f7f9 f80a 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026994:	ac06      	add	r4, sp, #24
 8026996:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 802699a:	f844 0d14 	str.w	r0, [r4, #-20]!
 802699e:	f9b0 1000 	ldrsh.w	r1, [r0]
 80269a2:	4628      	mov	r0, r5
 80269a4:	f7f9 fbd8 	bl	8020158 <GUI_MoveRect>
 80269a8:	4620      	mov	r0, r4
 80269aa:	f7f9 f80f 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80269ae:	4628      	mov	r0, r5
 80269b0:	4631      	mov	r1, r6
 80269b2:	f7fb fc65 	bl	8022280 <GUI__IntersectRect>
 80269b6:	4628      	mov	r0, r5
 80269b8:	f006 f9ec 	bl	802cd94 <LCD_SetClipRectEx>
 80269bc:	b006      	add	sp, #24
 80269be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80269c2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80269c4:	e7e3      	b.n	802698e <WM__ActivateClipRect+0x4e>
 80269c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80269c8:	2a00      	cmp	r2, #0
 80269ca:	d042      	beq.n	8026a52 <WM__ActivateClipRect+0x112>
 80269cc:	4c24      	ldr	r4, [pc, #144]	; (8026a60 <WM__ActivateClipRect+0x120>)
 80269ce:	6810      	ldr	r0, [r2, #0]
 80269d0:	6851      	ldr	r1, [r2, #4]
 80269d2:	6824      	ldr	r4, [r4, #0]
 80269d4:	ad04      	add	r5, sp, #16
 80269d6:	462a      	mov	r2, r5
 80269d8:	c203      	stmia	r2!, {r0, r1}
 80269da:	b1cc      	cbz	r4, 8026a10 <WM__ActivateClipRect+0xd0>
 80269dc:	4620      	mov	r0, r4
 80269de:	f7f8 ffe3 	bl	801f9a8 <GUI_ALLOC_LockH>
 80269e2:	ac06      	add	r4, sp, #24
 80269e4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80269e8:	f844 0d10 	str.w	r0, [r4, #-16]!
 80269ec:	f9b0 1000 	ldrsh.w	r1, [r0]
 80269f0:	4628      	mov	r0, r5
 80269f2:	f7f9 fbb1 	bl	8020158 <GUI_MoveRect>
 80269f6:	4620      	mov	r0, r4
 80269f8:	f7f8 ffe8 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80269fc:	4919      	ldr	r1, [pc, #100]	; (8026a64 <WM__ActivateClipRect+0x124>)
 80269fe:	4628      	mov	r0, r5
 8026a00:	f7fb fc3e 	bl	8022280 <GUI__IntersectRect>
 8026a04:	4628      	mov	r0, r5
 8026a06:	f006 f9c5 	bl	802cd94 <LCD_SetClipRectEx>
 8026a0a:	b006      	add	sp, #24
 8026a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026a10:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8026a12:	e7e3      	b.n	80269dc <WM__ActivateClipRect+0x9c>
 8026a14:	ad04      	add	r5, sp, #16
 8026a16:	e007      	b.n	8026a28 <WM__ActivateClipRect+0xe8>
 8026a18:	f7fb fc32 	bl	8022280 <GUI__IntersectRect>
 8026a1c:	9b04      	ldr	r3, [sp, #16]
 8026a1e:	699c      	ldr	r4, [r3, #24]
 8026a20:	4628      	mov	r0, r5
 8026a22:	b17c      	cbz	r4, 8026a44 <WM__ActivateClipRect+0x104>
 8026a24:	f7f8 ffd2 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026a28:	4620      	mov	r0, r4
 8026a2a:	f7f8 ffbd 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026a2e:	4603      	mov	r3, r0
 8026a30:	4601      	mov	r1, r0
 8026a32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8026a34:	9304      	str	r3, [sp, #16]
 8026a36:	0793      	lsls	r3, r2, #30
 8026a38:	4630      	mov	r0, r6
 8026a3a:	d4ed      	bmi.n	8026a18 <WM__ActivateClipRect+0xd8>
 8026a3c:	4628      	mov	r0, r5
 8026a3e:	f7f8 ffc5 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026a42:	e798      	b.n	8026976 <WM__ActivateClipRect+0x36>
 8026a44:	f7f8 ffc2 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026a48:	e795      	b.n	8026976 <WM__ActivateClipRect+0x36>
 8026a4a:	4630      	mov	r0, r6
 8026a4c:	f006 f9a2 	bl	802cd94 <LCD_SetClipRectEx>
 8026a50:	e7b4      	b.n	80269bc <WM__ActivateClipRect+0x7c>
 8026a52:	4804      	ldr	r0, [pc, #16]	; (8026a64 <WM__ActivateClipRect+0x124>)
 8026a54:	f006 f99e 	bl	802cd94 <LCD_SetClipRectEx>
 8026a58:	e7b0      	b.n	80269bc <WM__ActivateClipRect+0x7c>
 8026a5a:	bf00      	nop
 8026a5c:	200000e8 	.word	0x200000e8
 8026a60:	200308d0 	.word	0x200308d0
 8026a64:	2002e3f0 	.word	0x2002e3f0

08026a68 <WM__InsertWindowIntoList>:
 8026a68:	b901      	cbnz	r1, 8026a6c <WM__InsertWindowIntoList+0x4>
 8026a6a:	4770      	bx	lr
 8026a6c:	b570      	push	{r4, r5, r6, lr}
 8026a6e:	b084      	sub	sp, #16
 8026a70:	460c      	mov	r4, r1
 8026a72:	4605      	mov	r5, r0
 8026a74:	f7f8 ff98 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026a78:	4603      	mov	r3, r0
 8026a7a:	2200      	movs	r2, #0
 8026a7c:	6184      	str	r4, [r0, #24]
 8026a7e:	4620      	mov	r0, r4
 8026a80:	621a      	str	r2, [r3, #32]
 8026a82:	9301      	str	r3, [sp, #4]
 8026a84:	f7f8 ff90 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026a88:	69c4      	ldr	r4, [r0, #28]
 8026a8a:	9002      	str	r0, [sp, #8]
 8026a8c:	2c00      	cmp	r4, #0
 8026a8e:	d02c      	beq.n	8026aea <WM__InsertWindowIntoList+0x82>
 8026a90:	9b01      	ldr	r3, [sp, #4]
 8026a92:	4620      	mov	r0, r4
 8026a94:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8026a96:	f7f8 ff87 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026a9a:	f006 0608 	and.w	r6, r6, #8
 8026a9e:	9003      	str	r0, [sp, #12]
 8026aa0:	2e00      	cmp	r6, #0
 8026aa2:	d12b      	bne.n	8026afc <WM__InsertWindowIntoList+0x94>
 8026aa4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026aa6:	071a      	lsls	r2, r3, #28
 8026aa8:	d43d      	bmi.n	8026b26 <WM__InsertWindowIntoList+0xbe>
 8026aaa:	a802      	add	r0, sp, #8
 8026aac:	f7f8 ff8e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026ab0:	a803      	add	r0, sp, #12
 8026ab2:	f7f8 ff8b 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026ab6:	4620      	mov	r0, r4
 8026ab8:	f7f8 ff6c 	bl	801f994 <GUI_ALLOC_h2p>
 8026abc:	6a04      	ldr	r4, [r0, #32]
 8026abe:	9003      	str	r0, [sp, #12]
 8026ac0:	b924      	cbnz	r4, 8026acc <WM__InsertWindowIntoList+0x64>
 8026ac2:	e02e      	b.n	8026b22 <WM__InsertWindowIntoList+0xba>
 8026ac4:	6a04      	ldr	r4, [r0, #32]
 8026ac6:	9003      	str	r0, [sp, #12]
 8026ac8:	2c00      	cmp	r4, #0
 8026aca:	d02a      	beq.n	8026b22 <WM__InsertWindowIntoList+0xba>
 8026acc:	4620      	mov	r0, r4
 8026ace:	f7f8 ff61 	bl	801f994 <GUI_ALLOC_h2p>
 8026ad2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026ad4:	071b      	lsls	r3, r3, #28
 8026ad6:	d5f5      	bpl.n	8026ac4 <WM__InsertWindowIntoList+0x5c>
 8026ad8:	9a03      	ldr	r2, [sp, #12]
 8026ada:	9b01      	ldr	r3, [sp, #4]
 8026adc:	6215      	str	r5, [r2, #32]
 8026ade:	621c      	str	r4, [r3, #32]
 8026ae0:	a801      	add	r0, sp, #4
 8026ae2:	f7f8 ff73 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026ae6:	b004      	add	sp, #16
 8026ae8:	bd70      	pop	{r4, r5, r6, pc}
 8026aea:	61c5      	str	r5, [r0, #28]
 8026aec:	a801      	add	r0, sp, #4
 8026aee:	f7f8 ff6d 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026af2:	a802      	add	r0, sp, #8
 8026af4:	f7f8 ff6a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026af8:	b004      	add	sp, #16
 8026afa:	bd70      	pop	{r4, r5, r6, pc}
 8026afc:	a802      	add	r0, sp, #8
 8026afe:	f7f8 ff65 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026b02:	a803      	add	r0, sp, #12
 8026b04:	f7f8 ff62 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026b08:	4620      	mov	r0, r4
 8026b0a:	f7f8 ff43 	bl	801f994 <GUI_ALLOC_h2p>
 8026b0e:	6a02      	ldr	r2, [r0, #32]
 8026b10:	9003      	str	r0, [sp, #12]
 8026b12:	b132      	cbz	r2, 8026b22 <WM__InsertWindowIntoList+0xba>
 8026b14:	4610      	mov	r0, r2
 8026b16:	f7f8 ff3d 	bl	801f994 <GUI_ALLOC_h2p>
 8026b1a:	6a02      	ldr	r2, [r0, #32]
 8026b1c:	9003      	str	r0, [sp, #12]
 8026b1e:	2a00      	cmp	r2, #0
 8026b20:	d1f8      	bne.n	8026b14 <WM__InsertWindowIntoList+0xac>
 8026b22:	6205      	str	r5, [r0, #32]
 8026b24:	e7dc      	b.n	8026ae0 <WM__InsertWindowIntoList+0x78>
 8026b26:	9a01      	ldr	r2, [sp, #4]
 8026b28:	9b02      	ldr	r3, [sp, #8]
 8026b2a:	6214      	str	r4, [r2, #32]
 8026b2c:	a801      	add	r0, sp, #4
 8026b2e:	61dd      	str	r5, [r3, #28]
 8026b30:	f7f8 ff4c 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026b34:	a802      	add	r0, sp, #8
 8026b36:	f7f8 ff49 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026b3a:	a803      	add	r0, sp, #12
 8026b3c:	f7f8 ff46 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026b40:	e7da      	b.n	8026af8 <WM__InsertWindowIntoList+0x90>
 8026b42:	bf00      	nop

08026b44 <WM__RemoveWindowFromList>:
 8026b44:	b570      	push	{r4, r5, r6, lr}
 8026b46:	4604      	mov	r4, r0
 8026b48:	f7f8 ff24 	bl	801f994 <GUI_ALLOC_h2p>
 8026b4c:	4605      	mov	r5, r0
 8026b4e:	6980      	ldr	r0, [r0, #24]
 8026b50:	b900      	cbnz	r0, 8026b54 <WM__RemoveWindowFromList+0x10>
 8026b52:	bd70      	pop	{r4, r5, r6, pc}
 8026b54:	f7f8 ff1e 	bl	801f994 <GUI_ALLOC_h2p>
 8026b58:	69c3      	ldr	r3, [r0, #28]
 8026b5a:	429c      	cmp	r4, r3
 8026b5c:	4606      	mov	r6, r0
 8026b5e:	d00c      	beq.n	8026b7a <WM__RemoveWindowFromList+0x36>
 8026b60:	b913      	cbnz	r3, 8026b68 <WM__RemoveWindowFromList+0x24>
 8026b62:	e010      	b.n	8026b86 <WM__RemoveWindowFromList+0x42>
 8026b64:	2b00      	cmp	r3, #0
 8026b66:	d0f4      	beq.n	8026b52 <WM__RemoveWindowFromList+0xe>
 8026b68:	4618      	mov	r0, r3
 8026b6a:	f7f8 ff13 	bl	801f994 <GUI_ALLOC_h2p>
 8026b6e:	6a03      	ldr	r3, [r0, #32]
 8026b70:	429c      	cmp	r4, r3
 8026b72:	d1f7      	bne.n	8026b64 <WM__RemoveWindowFromList+0x20>
 8026b74:	6a2b      	ldr	r3, [r5, #32]
 8026b76:	6203      	str	r3, [r0, #32]
 8026b78:	bd70      	pop	{r4, r5, r6, pc}
 8026b7a:	4620      	mov	r0, r4
 8026b7c:	f7f8 ff0a 	bl	801f994 <GUI_ALLOC_h2p>
 8026b80:	6a03      	ldr	r3, [r0, #32]
 8026b82:	61f3      	str	r3, [r6, #28]
 8026b84:	bd70      	pop	{r4, r5, r6, pc}
 8026b86:	bd70      	pop	{r4, r5, r6, pc}

08026b88 <WM__IsWindow>:
 8026b88:	4b0a      	ldr	r3, [pc, #40]	; (8026bb4 <WM__IsWindow+0x2c>)
 8026b8a:	681b      	ldr	r3, [r3, #0]
 8026b8c:	b183      	cbz	r3, 8026bb0 <WM__IsWindow+0x28>
 8026b8e:	4283      	cmp	r3, r0
 8026b90:	b510      	push	{r4, lr}
 8026b92:	4604      	mov	r4, r0
 8026b94:	d102      	bne.n	8026b9c <WM__IsWindow+0x14>
 8026b96:	e009      	b.n	8026bac <WM__IsWindow+0x24>
 8026b98:	429c      	cmp	r4, r3
 8026b9a:	d007      	beq.n	8026bac <WM__IsWindow+0x24>
 8026b9c:	4618      	mov	r0, r3
 8026b9e:	f7f8 fef9 	bl	801f994 <GUI_ALLOC_h2p>
 8026ba2:	6943      	ldr	r3, [r0, #20]
 8026ba4:	2b00      	cmp	r3, #0
 8026ba6:	d1f7      	bne.n	8026b98 <WM__IsWindow+0x10>
 8026ba8:	2000      	movs	r0, #0
 8026baa:	bd10      	pop	{r4, pc}
 8026bac:	2001      	movs	r0, #1
 8026bae:	bd10      	pop	{r4, pc}
 8026bb0:	2000      	movs	r0, #0
 8026bb2:	4770      	bx	lr
 8026bb4:	200308f0 	.word	0x200308f0

08026bb8 <WM__InvalidateDrawAndDescs>:
 8026bb8:	b900      	cbnz	r0, 8026bbc <WM__InvalidateDrawAndDescs+0x4>
 8026bba:	4770      	bx	lr
 8026bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bc0:	b08f      	sub	sp, #60	; 0x3c
 8026bc2:	4604      	mov	r4, r0
 8026bc4:	f7f8 fef0 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026bc8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026bca:	9005      	str	r0, [sp, #20]
 8026bcc:	079a      	lsls	r2, r3, #30
 8026bce:	f140 813c 	bpl.w	8026e4a <WM__InvalidateDrawAndDescs+0x292>
 8026bd2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026bd4:	b140      	cbz	r0, 8026be8 <WM__InvalidateDrawAndDescs+0x30>
 8026bd6:	4ba0      	ldr	r3, [pc, #640]	; (8026e58 <WM__InvalidateDrawAndDescs+0x2a0>)
 8026bd8:	681b      	ldr	r3, [r3, #0]
 8026bda:	429c      	cmp	r4, r3
 8026bdc:	d004      	beq.n	8026be8 <WM__InvalidateDrawAndDescs+0x30>
 8026bde:	f006 fa49 	bl	802d074 <GUI_MEMDEV_Delete>
 8026be2:	9b05      	ldr	r3, [sp, #20]
 8026be4:	2200      	movs	r2, #0
 8026be6:	625a      	str	r2, [r3, #36]	; 0x24
 8026be8:	4620      	mov	r0, r4
 8026bea:	f002 f8f1 	bl	8028dd0 <WM_GetFirstChild>
 8026bee:	9003      	str	r0, [sp, #12]
 8026bf0:	2800      	cmp	r0, #0
 8026bf2:	f000 812a 	beq.w	8026e4a <WM__InvalidateDrawAndDescs+0x292>
 8026bf6:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8026e58 <WM__InvalidateDrawAndDescs+0x2a0>
 8026bfa:	9803      	ldr	r0, [sp, #12]
 8026bfc:	f7f8 fed4 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026c00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026c02:	9006      	str	r0, [sp, #24]
 8026c04:	079b      	lsls	r3, r3, #30
 8026c06:	f140 8115 	bpl.w	8026e34 <WM__InvalidateDrawAndDescs+0x27c>
 8026c0a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026c0c:	b148      	cbz	r0, 8026c22 <WM__InvalidateDrawAndDescs+0x6a>
 8026c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8026c12:	9a03      	ldr	r2, [sp, #12]
 8026c14:	4293      	cmp	r3, r2
 8026c16:	d004      	beq.n	8026c22 <WM__InvalidateDrawAndDescs+0x6a>
 8026c18:	f006 fa2c 	bl	802d074 <GUI_MEMDEV_Delete>
 8026c1c:	9b06      	ldr	r3, [sp, #24]
 8026c1e:	2200      	movs	r2, #0
 8026c20:	625a      	str	r2, [r3, #36]	; 0x24
 8026c22:	9803      	ldr	r0, [sp, #12]
 8026c24:	f002 f8d4 	bl	8028dd0 <WM_GetFirstChild>
 8026c28:	9002      	str	r0, [sp, #8]
 8026c2a:	2800      	cmp	r0, #0
 8026c2c:	f000 8102 	beq.w	8026e34 <WM__InvalidateDrawAndDescs+0x27c>
 8026c30:	9802      	ldr	r0, [sp, #8]
 8026c32:	f7f8 feb9 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026c36:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026c38:	9007      	str	r0, [sp, #28]
 8026c3a:	079f      	lsls	r7, r3, #30
 8026c3c:	f140 80ef 	bpl.w	8026e1e <WM__InvalidateDrawAndDescs+0x266>
 8026c40:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026c42:	b148      	cbz	r0, 8026c58 <WM__InvalidateDrawAndDescs+0xa0>
 8026c44:	f8d8 3000 	ldr.w	r3, [r8]
 8026c48:	9a02      	ldr	r2, [sp, #8]
 8026c4a:	4293      	cmp	r3, r2
 8026c4c:	d004      	beq.n	8026c58 <WM__InvalidateDrawAndDescs+0xa0>
 8026c4e:	f006 fa11 	bl	802d074 <GUI_MEMDEV_Delete>
 8026c52:	9b07      	ldr	r3, [sp, #28]
 8026c54:	2200      	movs	r2, #0
 8026c56:	625a      	str	r2, [r3, #36]	; 0x24
 8026c58:	9802      	ldr	r0, [sp, #8]
 8026c5a:	f002 f8b9 	bl	8028dd0 <WM_GetFirstChild>
 8026c5e:	4683      	mov	fp, r0
 8026c60:	2800      	cmp	r0, #0
 8026c62:	f000 80dc 	beq.w	8026e1e <WM__InvalidateDrawAndDescs+0x266>
 8026c66:	4658      	mov	r0, fp
 8026c68:	f7f8 fe9e 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026c6c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026c6e:	9008      	str	r0, [sp, #32]
 8026c70:	079e      	lsls	r6, r3, #30
 8026c72:	f140 80c8 	bpl.w	8026e06 <WM__InvalidateDrawAndDescs+0x24e>
 8026c76:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026c78:	b140      	cbz	r0, 8026c8c <WM__InvalidateDrawAndDescs+0xd4>
 8026c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8026c7e:	455b      	cmp	r3, fp
 8026c80:	d004      	beq.n	8026c8c <WM__InvalidateDrawAndDescs+0xd4>
 8026c82:	f006 f9f7 	bl	802d074 <GUI_MEMDEV_Delete>
 8026c86:	9b08      	ldr	r3, [sp, #32]
 8026c88:	2200      	movs	r2, #0
 8026c8a:	625a      	str	r2, [r3, #36]	; 0x24
 8026c8c:	4658      	mov	r0, fp
 8026c8e:	f002 f89f 	bl	8028dd0 <WM_GetFirstChild>
 8026c92:	4682      	mov	sl, r0
 8026c94:	2800      	cmp	r0, #0
 8026c96:	f000 80b6 	beq.w	8026e06 <WM__InvalidateDrawAndDescs+0x24e>
 8026c9a:	4650      	mov	r0, sl
 8026c9c:	f7f8 fe84 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026ca0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026ca2:	9009      	str	r0, [sp, #36]	; 0x24
 8026ca4:	079d      	lsls	r5, r3, #30
 8026ca6:	f140 80a2 	bpl.w	8026dee <WM__InvalidateDrawAndDescs+0x236>
 8026caa:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026cac:	b140      	cbz	r0, 8026cc0 <WM__InvalidateDrawAndDescs+0x108>
 8026cae:	f8d8 3000 	ldr.w	r3, [r8]
 8026cb2:	4553      	cmp	r3, sl
 8026cb4:	d004      	beq.n	8026cc0 <WM__InvalidateDrawAndDescs+0x108>
 8026cb6:	f006 f9dd 	bl	802d074 <GUI_MEMDEV_Delete>
 8026cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026cbc:	2200      	movs	r2, #0
 8026cbe:	625a      	str	r2, [r3, #36]	; 0x24
 8026cc0:	4650      	mov	r0, sl
 8026cc2:	f002 f885 	bl	8028dd0 <WM_GetFirstChild>
 8026cc6:	9001      	str	r0, [sp, #4]
 8026cc8:	2800      	cmp	r0, #0
 8026cca:	f000 8090 	beq.w	8026dee <WM__InvalidateDrawAndDescs+0x236>
 8026cce:	9801      	ldr	r0, [sp, #4]
 8026cd0:	f7f8 fe6a 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026cd4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026cd6:	900a      	str	r0, [sp, #40]	; 0x28
 8026cd8:	079c      	lsls	r4, r3, #30
 8026cda:	d57d      	bpl.n	8026dd8 <WM__InvalidateDrawAndDescs+0x220>
 8026cdc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026cde:	b148      	cbz	r0, 8026cf4 <WM__InvalidateDrawAndDescs+0x13c>
 8026ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8026ce4:	9a01      	ldr	r2, [sp, #4]
 8026ce6:	4293      	cmp	r3, r2
 8026ce8:	d004      	beq.n	8026cf4 <WM__InvalidateDrawAndDescs+0x13c>
 8026cea:	f006 f9c3 	bl	802d074 <GUI_MEMDEV_Delete>
 8026cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026cf0:	2200      	movs	r2, #0
 8026cf2:	625a      	str	r2, [r3, #36]	; 0x24
 8026cf4:	9801      	ldr	r0, [sp, #4]
 8026cf6:	f002 f86b 	bl	8028dd0 <WM_GetFirstChild>
 8026cfa:	4606      	mov	r6, r0
 8026cfc:	2800      	cmp	r0, #0
 8026cfe:	d06b      	beq.n	8026dd8 <WM__InvalidateDrawAndDescs+0x220>
 8026d00:	4630      	mov	r0, r6
 8026d02:	f7f8 fe51 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026d06:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026d08:	900b      	str	r0, [sp, #44]	; 0x2c
 8026d0a:	0799      	lsls	r1, r3, #30
 8026d0c:	d55b      	bpl.n	8026dc6 <WM__InvalidateDrawAndDescs+0x20e>
 8026d0e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026d10:	b140      	cbz	r0, 8026d24 <WM__InvalidateDrawAndDescs+0x16c>
 8026d12:	f8d8 3000 	ldr.w	r3, [r8]
 8026d16:	42b3      	cmp	r3, r6
 8026d18:	d004      	beq.n	8026d24 <WM__InvalidateDrawAndDescs+0x16c>
 8026d1a:	f006 f9ab 	bl	802d074 <GUI_MEMDEV_Delete>
 8026d1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026d20:	2200      	movs	r2, #0
 8026d22:	625a      	str	r2, [r3, #36]	; 0x24
 8026d24:	4630      	mov	r0, r6
 8026d26:	f002 f853 	bl	8028dd0 <WM_GetFirstChild>
 8026d2a:	4605      	mov	r5, r0
 8026d2c:	2800      	cmp	r0, #0
 8026d2e:	d04a      	beq.n	8026dc6 <WM__InvalidateDrawAndDescs+0x20e>
 8026d30:	4628      	mov	r0, r5
 8026d32:	f7f8 fe39 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026d36:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026d38:	900c      	str	r0, [sp, #48]	; 0x30
 8026d3a:	079a      	lsls	r2, r3, #30
 8026d3c:	d53a      	bpl.n	8026db4 <WM__InvalidateDrawAndDescs+0x1fc>
 8026d3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026d40:	b140      	cbz	r0, 8026d54 <WM__InvalidateDrawAndDescs+0x19c>
 8026d42:	f8d8 3000 	ldr.w	r3, [r8]
 8026d46:	42ab      	cmp	r3, r5
 8026d48:	d004      	beq.n	8026d54 <WM__InvalidateDrawAndDescs+0x19c>
 8026d4a:	f006 f993 	bl	802d074 <GUI_MEMDEV_Delete>
 8026d4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026d50:	2200      	movs	r2, #0
 8026d52:	625a      	str	r2, [r3, #36]	; 0x24
 8026d54:	4628      	mov	r0, r5
 8026d56:	f002 f83b 	bl	8028dd0 <WM_GetFirstChild>
 8026d5a:	f04f 0900 	mov.w	r9, #0
 8026d5e:	4604      	mov	r4, r0
 8026d60:	b340      	cbz	r0, 8026db4 <WM__InvalidateDrawAndDescs+0x1fc>
 8026d62:	4620      	mov	r0, r4
 8026d64:	f7f8 fe20 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026d68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026d6a:	900d      	str	r0, [sp, #52]	; 0x34
 8026d6c:	079b      	lsls	r3, r3, #30
 8026d6e:	d518      	bpl.n	8026da2 <WM__InvalidateDrawAndDescs+0x1ea>
 8026d70:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8026d72:	b140      	cbz	r0, 8026d86 <WM__InvalidateDrawAndDescs+0x1ce>
 8026d74:	f8d8 3000 	ldr.w	r3, [r8]
 8026d78:	42a3      	cmp	r3, r4
 8026d7a:	d004      	beq.n	8026d86 <WM__InvalidateDrawAndDescs+0x1ce>
 8026d7c:	f006 f97a 	bl	802d074 <GUI_MEMDEV_Delete>
 8026d80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026d82:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
 8026d86:	4620      	mov	r0, r4
 8026d88:	f002 f822 	bl	8028dd0 <WM_GetFirstChild>
 8026d8c:	4607      	mov	r7, r0
 8026d8e:	b140      	cbz	r0, 8026da2 <WM__InvalidateDrawAndDescs+0x1ea>
 8026d90:	4638      	mov	r0, r7
 8026d92:	f7ff ff11 	bl	8026bb8 <WM__InvalidateDrawAndDescs>
 8026d96:	4638      	mov	r0, r7
 8026d98:	f7f8 fdfc 	bl	801f994 <GUI_ALLOC_h2p>
 8026d9c:	6a07      	ldr	r7, [r0, #32]
 8026d9e:	2f00      	cmp	r7, #0
 8026da0:	d1f6      	bne.n	8026d90 <WM__InvalidateDrawAndDescs+0x1d8>
 8026da2:	a80d      	add	r0, sp, #52	; 0x34
 8026da4:	f7f8 fe12 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026da8:	4620      	mov	r0, r4
 8026daa:	f7f8 fdf3 	bl	801f994 <GUI_ALLOC_h2p>
 8026dae:	6a04      	ldr	r4, [r0, #32]
 8026db0:	2c00      	cmp	r4, #0
 8026db2:	d1d6      	bne.n	8026d62 <WM__InvalidateDrawAndDescs+0x1aa>
 8026db4:	a80c      	add	r0, sp, #48	; 0x30
 8026db6:	f7f8 fe09 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026dba:	4628      	mov	r0, r5
 8026dbc:	f7f8 fdea 	bl	801f994 <GUI_ALLOC_h2p>
 8026dc0:	6a05      	ldr	r5, [r0, #32]
 8026dc2:	2d00      	cmp	r5, #0
 8026dc4:	d1b4      	bne.n	8026d30 <WM__InvalidateDrawAndDescs+0x178>
 8026dc6:	a80b      	add	r0, sp, #44	; 0x2c
 8026dc8:	f7f8 fe00 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026dcc:	4630      	mov	r0, r6
 8026dce:	f7f8 fde1 	bl	801f994 <GUI_ALLOC_h2p>
 8026dd2:	6a06      	ldr	r6, [r0, #32]
 8026dd4:	2e00      	cmp	r6, #0
 8026dd6:	d193      	bne.n	8026d00 <WM__InvalidateDrawAndDescs+0x148>
 8026dd8:	a80a      	add	r0, sp, #40	; 0x28
 8026dda:	f7f8 fdf7 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026dde:	9801      	ldr	r0, [sp, #4]
 8026de0:	f7f8 fdd8 	bl	801f994 <GUI_ALLOC_h2p>
 8026de4:	6a03      	ldr	r3, [r0, #32]
 8026de6:	9301      	str	r3, [sp, #4]
 8026de8:	2b00      	cmp	r3, #0
 8026dea:	f47f af70 	bne.w	8026cce <WM__InvalidateDrawAndDescs+0x116>
 8026dee:	a809      	add	r0, sp, #36	; 0x24
 8026df0:	f7f8 fdec 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026df4:	4650      	mov	r0, sl
 8026df6:	f7f8 fdcd 	bl	801f994 <GUI_ALLOC_h2p>
 8026dfa:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8026dfe:	f1ba 0f00 	cmp.w	sl, #0
 8026e02:	f47f af4a 	bne.w	8026c9a <WM__InvalidateDrawAndDescs+0xe2>
 8026e06:	a808      	add	r0, sp, #32
 8026e08:	f7f8 fde0 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026e0c:	4658      	mov	r0, fp
 8026e0e:	f7f8 fdc1 	bl	801f994 <GUI_ALLOC_h2p>
 8026e12:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8026e16:	f1bb 0f00 	cmp.w	fp, #0
 8026e1a:	f47f af24 	bne.w	8026c66 <WM__InvalidateDrawAndDescs+0xae>
 8026e1e:	a807      	add	r0, sp, #28
 8026e20:	f7f8 fdd4 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026e24:	9802      	ldr	r0, [sp, #8]
 8026e26:	f7f8 fdb5 	bl	801f994 <GUI_ALLOC_h2p>
 8026e2a:	6a03      	ldr	r3, [r0, #32]
 8026e2c:	9302      	str	r3, [sp, #8]
 8026e2e:	2b00      	cmp	r3, #0
 8026e30:	f47f aefe 	bne.w	8026c30 <WM__InvalidateDrawAndDescs+0x78>
 8026e34:	a806      	add	r0, sp, #24
 8026e36:	f7f8 fdc9 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026e3a:	9803      	ldr	r0, [sp, #12]
 8026e3c:	f7f8 fdaa 	bl	801f994 <GUI_ALLOC_h2p>
 8026e40:	6a03      	ldr	r3, [r0, #32]
 8026e42:	9303      	str	r3, [sp, #12]
 8026e44:	2b00      	cmp	r3, #0
 8026e46:	f47f aed8 	bne.w	8026bfa <WM__InvalidateDrawAndDescs+0x42>
 8026e4a:	a805      	add	r0, sp, #20
 8026e4c:	f7f8 fdbe 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026e50:	b00f      	add	sp, #60	; 0x3c
 8026e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026e56:	bf00      	nop
 8026e58:	20030920 	.word	0x20030920

08026e5c <WM_InvalidateWindowAndDescsEx>:
 8026e5c:	b900      	cbnz	r0, 8026e60 <WM_InvalidateWindowAndDescsEx+0x4>
 8026e5e:	4770      	bx	lr
 8026e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026e64:	b0a1      	sub	sp, #132	; 0x84
 8026e66:	4604      	mov	r4, r0
 8026e68:	9201      	str	r2, [sp, #4]
 8026e6a:	460d      	mov	r5, r1
 8026e6c:	f7f8 fd9c 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026e70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026e72:	9005      	str	r0, [sp, #20]
 8026e74:	079a      	lsls	r2, r3, #30
 8026e76:	f140 8156 	bpl.w	8027126 <WM_InvalidateWindowAndDescsEx+0x2ca>
 8026e7a:	4602      	mov	r2, r0
 8026e7c:	4629      	mov	r1, r5
 8026e7e:	a80e      	add	r0, sp, #56	; 0x38
 8026e80:	f7fb fa1c 	bl	80222bc <GUI__IntersectRects>
 8026e84:	2800      	cmp	r0, #0
 8026e86:	f000 814e 	beq.w	8027126 <WM_InvalidateWindowAndDescsEx+0x2ca>
 8026e8a:	a805      	add	r0, sp, #20
 8026e8c:	f7f8 fd9e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026e90:	4620      	mov	r0, r4
 8026e92:	9a01      	ldr	r2, [sp, #4]
 8026e94:	a90e      	add	r1, sp, #56	; 0x38
 8026e96:	f7ff fcdd 	bl	8026854 <_Invalidate1Abs>
 8026e9a:	4620      	mov	r0, r4
 8026e9c:	f001 ff98 	bl	8028dd0 <WM_GetFirstChild>
 8026ea0:	4604      	mov	r4, r0
 8026ea2:	2800      	cmp	r0, #0
 8026ea4:	f000 8142 	beq.w	802712c <WM_InvalidateWindowAndDescsEx+0x2d0>
 8026ea8:	4620      	mov	r0, r4
 8026eaa:	f7f8 fd7d 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026eae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026eb0:	9006      	str	r0, [sp, #24]
 8026eb2:	079b      	lsls	r3, r3, #30
 8026eb4:	f140 813d 	bpl.w	8027132 <WM_InvalidateWindowAndDescsEx+0x2d6>
 8026eb8:	4602      	mov	r2, r0
 8026eba:	a90e      	add	r1, sp, #56	; 0x38
 8026ebc:	a810      	add	r0, sp, #64	; 0x40
 8026ebe:	f7fb f9fd 	bl	80222bc <GUI__IntersectRects>
 8026ec2:	2800      	cmp	r0, #0
 8026ec4:	f000 8135 	beq.w	8027132 <WM_InvalidateWindowAndDescsEx+0x2d6>
 8026ec8:	a806      	add	r0, sp, #24
 8026eca:	f7f8 fd7f 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026ece:	9a01      	ldr	r2, [sp, #4]
 8026ed0:	a910      	add	r1, sp, #64	; 0x40
 8026ed2:	4620      	mov	r0, r4
 8026ed4:	f7ff fcbe 	bl	8026854 <_Invalidate1Abs>
 8026ed8:	4620      	mov	r0, r4
 8026eda:	f001 ff79 	bl	8028dd0 <WM_GetFirstChild>
 8026ede:	4605      	mov	r5, r0
 8026ee0:	2800      	cmp	r0, #0
 8026ee2:	f000 8118 	beq.w	8027116 <WM_InvalidateWindowAndDescsEx+0x2ba>
 8026ee6:	9402      	str	r4, [sp, #8]
 8026ee8:	4628      	mov	r0, r5
 8026eea:	f7f8 fd5d 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026eee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026ef0:	9007      	str	r0, [sp, #28]
 8026ef2:	079f      	lsls	r7, r3, #30
 8026ef4:	f140 8121 	bpl.w	802713a <WM_InvalidateWindowAndDescsEx+0x2de>
 8026ef8:	4602      	mov	r2, r0
 8026efa:	a910      	add	r1, sp, #64	; 0x40
 8026efc:	a812      	add	r0, sp, #72	; 0x48
 8026efe:	f7fb f9dd 	bl	80222bc <GUI__IntersectRects>
 8026f02:	2800      	cmp	r0, #0
 8026f04:	f000 8119 	beq.w	802713a <WM_InvalidateWindowAndDescsEx+0x2de>
 8026f08:	a807      	add	r0, sp, #28
 8026f0a:	f7f8 fd5f 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026f0e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8026f12:	4628      	mov	r0, r5
 8026f14:	4652      	mov	r2, sl
 8026f16:	a912      	add	r1, sp, #72	; 0x48
 8026f18:	f7ff fc9c 	bl	8026854 <_Invalidate1Abs>
 8026f1c:	4628      	mov	r0, r5
 8026f1e:	f001 ff57 	bl	8028dd0 <WM_GetFirstChild>
 8026f22:	2800      	cmp	r0, #0
 8026f24:	f000 80ef 	beq.w	8027106 <WM_InvalidateWindowAndDescsEx+0x2aa>
 8026f28:	9503      	str	r5, [sp, #12]
 8026f2a:	4605      	mov	r5, r0
 8026f2c:	4628      	mov	r0, r5
 8026f2e:	f7f8 fd3b 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026f32:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026f34:	9008      	str	r0, [sp, #32]
 8026f36:	079e      	lsls	r6, r3, #30
 8026f38:	f140 8103 	bpl.w	8027142 <WM_InvalidateWindowAndDescsEx+0x2e6>
 8026f3c:	4602      	mov	r2, r0
 8026f3e:	a912      	add	r1, sp, #72	; 0x48
 8026f40:	a814      	add	r0, sp, #80	; 0x50
 8026f42:	f7fb f9bb 	bl	80222bc <GUI__IntersectRects>
 8026f46:	2800      	cmp	r0, #0
 8026f48:	f000 80fb 	beq.w	8027142 <WM_InvalidateWindowAndDescsEx+0x2e6>
 8026f4c:	a808      	add	r0, sp, #32
 8026f4e:	f7f8 fd3d 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026f52:	4628      	mov	r0, r5
 8026f54:	4652      	mov	r2, sl
 8026f56:	a914      	add	r1, sp, #80	; 0x50
 8026f58:	f7ff fc7c 	bl	8026854 <_Invalidate1Abs>
 8026f5c:	4628      	mov	r0, r5
 8026f5e:	f001 ff37 	bl	8028dd0 <WM_GetFirstChild>
 8026f62:	2800      	cmp	r0, #0
 8026f64:	f000 80c7 	beq.w	80270f6 <WM_InvalidateWindowAndDescsEx+0x29a>
 8026f68:	46ab      	mov	fp, r5
 8026f6a:	4680      	mov	r8, r0
 8026f6c:	4640      	mov	r0, r8
 8026f6e:	f7f8 fd1b 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026f72:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026f74:	9009      	str	r0, [sp, #36]	; 0x24
 8026f76:	079d      	lsls	r5, r3, #30
 8026f78:	f140 80e7 	bpl.w	802714a <WM_InvalidateWindowAndDescsEx+0x2ee>
 8026f7c:	4602      	mov	r2, r0
 8026f7e:	a914      	add	r1, sp, #80	; 0x50
 8026f80:	a816      	add	r0, sp, #88	; 0x58
 8026f82:	f7fb f99b 	bl	80222bc <GUI__IntersectRects>
 8026f86:	2800      	cmp	r0, #0
 8026f88:	f000 80df 	beq.w	802714a <WM_InvalidateWindowAndDescsEx+0x2ee>
 8026f8c:	a809      	add	r0, sp, #36	; 0x24
 8026f8e:	f7f8 fd1d 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026f92:	4640      	mov	r0, r8
 8026f94:	4652      	mov	r2, sl
 8026f96:	a916      	add	r1, sp, #88	; 0x58
 8026f98:	f7ff fc5c 	bl	8026854 <_Invalidate1Abs>
 8026f9c:	4640      	mov	r0, r8
 8026f9e:	f001 ff17 	bl	8028dd0 <WM_GetFirstChild>
 8026fa2:	2800      	cmp	r0, #0
 8026fa4:	f000 809d 	beq.w	80270e2 <WM_InvalidateWindowAndDescsEx+0x286>
 8026fa8:	4681      	mov	r9, r0
 8026faa:	4648      	mov	r0, r9
 8026fac:	f7f8 fcfc 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026fb0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026fb2:	900a      	str	r0, [sp, #40]	; 0x28
 8026fb4:	079c      	lsls	r4, r3, #30
 8026fb6:	f140 80d5 	bpl.w	8027164 <WM_InvalidateWindowAndDescsEx+0x308>
 8026fba:	4602      	mov	r2, r0
 8026fbc:	a916      	add	r1, sp, #88	; 0x58
 8026fbe:	a818      	add	r0, sp, #96	; 0x60
 8026fc0:	f7fb f97c 	bl	80222bc <GUI__IntersectRects>
 8026fc4:	2800      	cmp	r0, #0
 8026fc6:	f000 80cd 	beq.w	8027164 <WM_InvalidateWindowAndDescsEx+0x308>
 8026fca:	a80a      	add	r0, sp, #40	; 0x28
 8026fcc:	f7f8 fcfe 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8026fd0:	4652      	mov	r2, sl
 8026fd2:	a918      	add	r1, sp, #96	; 0x60
 8026fd4:	4648      	mov	r0, r9
 8026fd6:	f7ff fc3d 	bl	8026854 <_Invalidate1Abs>
 8026fda:	4648      	mov	r0, r9
 8026fdc:	f001 fef8 	bl	8028dd0 <WM_GetFirstChild>
 8026fe0:	4605      	mov	r5, r0
 8026fe2:	2800      	cmp	r0, #0
 8026fe4:	d074      	beq.n	80270d0 <WM_InvalidateWindowAndDescsEx+0x274>
 8026fe6:	4628      	mov	r0, r5
 8026fe8:	f7f8 fcde 	bl	801f9a8 <GUI_ALLOC_LockH>
 8026fec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8026fee:	900b      	str	r0, [sp, #44]	; 0x2c
 8026ff0:	0799      	lsls	r1, r3, #30
 8026ff2:	f140 80c4 	bpl.w	802717e <WM_InvalidateWindowAndDescsEx+0x322>
 8026ff6:	4602      	mov	r2, r0
 8026ff8:	a918      	add	r1, sp, #96	; 0x60
 8026ffa:	a81a      	add	r0, sp, #104	; 0x68
 8026ffc:	f7fb f95e 	bl	80222bc <GUI__IntersectRects>
 8027000:	2800      	cmp	r0, #0
 8027002:	f000 80bc 	beq.w	802717e <WM_InvalidateWindowAndDescsEx+0x322>
 8027006:	a80b      	add	r0, sp, #44	; 0x2c
 8027008:	f7f8 fce0 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802700c:	4652      	mov	r2, sl
 802700e:	a91a      	add	r1, sp, #104	; 0x68
 8027010:	4628      	mov	r0, r5
 8027012:	f7ff fc1f 	bl	8026854 <_Invalidate1Abs>
 8027016:	4628      	mov	r0, r5
 8027018:	f001 feda 	bl	8028dd0 <WM_GetFirstChild>
 802701c:	4606      	mov	r6, r0
 802701e:	2800      	cmp	r0, #0
 8027020:	d050      	beq.n	80270c4 <WM_InvalidateWindowAndDescsEx+0x268>
 8027022:	4630      	mov	r0, r6
 8027024:	f7f8 fcc0 	bl	801f9a8 <GUI_ALLOC_LockH>
 8027028:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802702a:	900c      	str	r0, [sp, #48]	; 0x30
 802702c:	079a      	lsls	r2, r3, #30
 802702e:	f140 80b1 	bpl.w	8027194 <WM_InvalidateWindowAndDescsEx+0x338>
 8027032:	4602      	mov	r2, r0
 8027034:	a91a      	add	r1, sp, #104	; 0x68
 8027036:	a81c      	add	r0, sp, #112	; 0x70
 8027038:	f7fb f940 	bl	80222bc <GUI__IntersectRects>
 802703c:	2800      	cmp	r0, #0
 802703e:	f000 80a9 	beq.w	8027194 <WM_InvalidateWindowAndDescsEx+0x338>
 8027042:	a80c      	add	r0, sp, #48	; 0x30
 8027044:	f7f8 fcc2 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027048:	4652      	mov	r2, sl
 802704a:	a91c      	add	r1, sp, #112	; 0x70
 802704c:	4630      	mov	r0, r6
 802704e:	f7ff fc01 	bl	8026854 <_Invalidate1Abs>
 8027052:	4630      	mov	r0, r6
 8027054:	f001 febc 	bl	8028dd0 <WM_GetFirstChild>
 8027058:	4607      	mov	r7, r0
 802705a:	b368      	cbz	r0, 80270b8 <WM_InvalidateWindowAndDescsEx+0x25c>
 802705c:	4638      	mov	r0, r7
 802705e:	f7f8 fca3 	bl	801f9a8 <GUI_ALLOC_LockH>
 8027062:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8027064:	900d      	str	r0, [sp, #52]	; 0x34
 8027066:	079b      	lsls	r3, r3, #30
 8027068:	f140 809f 	bpl.w	80271aa <WM_InvalidateWindowAndDescsEx+0x34e>
 802706c:	4602      	mov	r2, r0
 802706e:	a91c      	add	r1, sp, #112	; 0x70
 8027070:	a81e      	add	r0, sp, #120	; 0x78
 8027072:	f7fb f923 	bl	80222bc <GUI__IntersectRects>
 8027076:	2800      	cmp	r0, #0
 8027078:	f000 8097 	beq.w	80271aa <WM_InvalidateWindowAndDescsEx+0x34e>
 802707c:	a80d      	add	r0, sp, #52	; 0x34
 802707e:	f7f8 fca5 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027082:	4652      	mov	r2, sl
 8027084:	a91e      	add	r1, sp, #120	; 0x78
 8027086:	4638      	mov	r0, r7
 8027088:	f7ff fbe4 	bl	8026854 <_Invalidate1Abs>
 802708c:	4638      	mov	r0, r7
 802708e:	f001 fe9f 	bl	8028dd0 <WM_GetFirstChild>
 8027092:	4604      	mov	r4, r0
 8027094:	b150      	cbz	r0, 80270ac <WM_InvalidateWindowAndDescsEx+0x250>
 8027096:	4620      	mov	r0, r4
 8027098:	4652      	mov	r2, sl
 802709a:	a91e      	add	r1, sp, #120	; 0x78
 802709c:	f7ff fede 	bl	8026e5c <WM_InvalidateWindowAndDescsEx>
 80270a0:	4620      	mov	r0, r4
 80270a2:	f7f8 fc77 	bl	801f994 <GUI_ALLOC_h2p>
 80270a6:	6a04      	ldr	r4, [r0, #32]
 80270a8:	2c00      	cmp	r4, #0
 80270aa:	d1f4      	bne.n	8027096 <WM_InvalidateWindowAndDescsEx+0x23a>
 80270ac:	4638      	mov	r0, r7
 80270ae:	f7f8 fc71 	bl	801f994 <GUI_ALLOC_h2p>
 80270b2:	6a07      	ldr	r7, [r0, #32]
 80270b4:	2f00      	cmp	r7, #0
 80270b6:	d1d1      	bne.n	802705c <WM_InvalidateWindowAndDescsEx+0x200>
 80270b8:	4630      	mov	r0, r6
 80270ba:	f7f8 fc6b 	bl	801f994 <GUI_ALLOC_h2p>
 80270be:	6a06      	ldr	r6, [r0, #32]
 80270c0:	2e00      	cmp	r6, #0
 80270c2:	d1ae      	bne.n	8027022 <WM_InvalidateWindowAndDescsEx+0x1c6>
 80270c4:	4628      	mov	r0, r5
 80270c6:	f7f8 fc65 	bl	801f994 <GUI_ALLOC_h2p>
 80270ca:	6a05      	ldr	r5, [r0, #32]
 80270cc:	2d00      	cmp	r5, #0
 80270ce:	d18a      	bne.n	8026fe6 <WM_InvalidateWindowAndDescsEx+0x18a>
 80270d0:	4648      	mov	r0, r9
 80270d2:	f7f8 fc5f 	bl	801f994 <GUI_ALLOC_h2p>
 80270d6:	f8d0 9020 	ldr.w	r9, [r0, #32]
 80270da:	f1b9 0f00 	cmp.w	r9, #0
 80270de:	f47f af64 	bne.w	8026faa <WM_InvalidateWindowAndDescsEx+0x14e>
 80270e2:	4640      	mov	r0, r8
 80270e4:	f7f8 fc56 	bl	801f994 <GUI_ALLOC_h2p>
 80270e8:	f8d0 8020 	ldr.w	r8, [r0, #32]
 80270ec:	f1b8 0f00 	cmp.w	r8, #0
 80270f0:	f47f af3c 	bne.w	8026f6c <WM_InvalidateWindowAndDescsEx+0x110>
 80270f4:	465d      	mov	r5, fp
 80270f6:	4628      	mov	r0, r5
 80270f8:	f7f8 fc4c 	bl	801f994 <GUI_ALLOC_h2p>
 80270fc:	6a05      	ldr	r5, [r0, #32]
 80270fe:	2d00      	cmp	r5, #0
 8027100:	f47f af14 	bne.w	8026f2c <WM_InvalidateWindowAndDescsEx+0xd0>
 8027104:	9d03      	ldr	r5, [sp, #12]
 8027106:	4628      	mov	r0, r5
 8027108:	f7f8 fc44 	bl	801f994 <GUI_ALLOC_h2p>
 802710c:	6a05      	ldr	r5, [r0, #32]
 802710e:	2d00      	cmp	r5, #0
 8027110:	f47f aeea 	bne.w	8026ee8 <WM_InvalidateWindowAndDescsEx+0x8c>
 8027114:	9c02      	ldr	r4, [sp, #8]
 8027116:	4620      	mov	r0, r4
 8027118:	f7f8 fc3c 	bl	801f994 <GUI_ALLOC_h2p>
 802711c:	6a04      	ldr	r4, [r0, #32]
 802711e:	2c00      	cmp	r4, #0
 8027120:	f47f aec2 	bne.w	8026ea8 <WM_InvalidateWindowAndDescsEx+0x4c>
 8027124:	e002      	b.n	802712c <WM_InvalidateWindowAndDescsEx+0x2d0>
 8027126:	a805      	add	r0, sp, #20
 8027128:	f7f8 fc50 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802712c:	b021      	add	sp, #132	; 0x84
 802712e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027132:	a806      	add	r0, sp, #24
 8027134:	f7f8 fc4a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027138:	e7ed      	b.n	8027116 <WM_InvalidateWindowAndDescsEx+0x2ba>
 802713a:	a807      	add	r0, sp, #28
 802713c:	f7f8 fc46 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027140:	e7e1      	b.n	8027106 <WM_InvalidateWindowAndDescsEx+0x2aa>
 8027142:	a808      	add	r0, sp, #32
 8027144:	f7f8 fc42 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027148:	e7d5      	b.n	80270f6 <WM_InvalidateWindowAndDescsEx+0x29a>
 802714a:	a809      	add	r0, sp, #36	; 0x24
 802714c:	f7f8 fc3e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027150:	4640      	mov	r0, r8
 8027152:	f7f8 fc1f 	bl	801f994 <GUI_ALLOC_h2p>
 8027156:	f8d0 8020 	ldr.w	r8, [r0, #32]
 802715a:	f1b8 0f00 	cmp.w	r8, #0
 802715e:	f47f af05 	bne.w	8026f6c <WM_InvalidateWindowAndDescsEx+0x110>
 8027162:	e7c7      	b.n	80270f4 <WM_InvalidateWindowAndDescsEx+0x298>
 8027164:	a80a      	add	r0, sp, #40	; 0x28
 8027166:	f7f8 fc31 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802716a:	4648      	mov	r0, r9
 802716c:	f7f8 fc12 	bl	801f994 <GUI_ALLOC_h2p>
 8027170:	f8d0 9020 	ldr.w	r9, [r0, #32]
 8027174:	f1b9 0f00 	cmp.w	r9, #0
 8027178:	f47f af17 	bne.w	8026faa <WM_InvalidateWindowAndDescsEx+0x14e>
 802717c:	e7b1      	b.n	80270e2 <WM_InvalidateWindowAndDescsEx+0x286>
 802717e:	a80b      	add	r0, sp, #44	; 0x2c
 8027180:	f7f8 fc24 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027184:	4628      	mov	r0, r5
 8027186:	f7f8 fc05 	bl	801f994 <GUI_ALLOC_h2p>
 802718a:	6a05      	ldr	r5, [r0, #32]
 802718c:	2d00      	cmp	r5, #0
 802718e:	f47f af2a 	bne.w	8026fe6 <WM_InvalidateWindowAndDescsEx+0x18a>
 8027192:	e79d      	b.n	80270d0 <WM_InvalidateWindowAndDescsEx+0x274>
 8027194:	a80c      	add	r0, sp, #48	; 0x30
 8027196:	f7f8 fc19 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802719a:	4630      	mov	r0, r6
 802719c:	f7f8 fbfa 	bl	801f994 <GUI_ALLOC_h2p>
 80271a0:	6a06      	ldr	r6, [r0, #32]
 80271a2:	2e00      	cmp	r6, #0
 80271a4:	f47f af3d 	bne.w	8027022 <WM_InvalidateWindowAndDescsEx+0x1c6>
 80271a8:	e78c      	b.n	80270c4 <WM_InvalidateWindowAndDescsEx+0x268>
 80271aa:	a80d      	add	r0, sp, #52	; 0x34
 80271ac:	f7f8 fc0e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80271b0:	4638      	mov	r0, r7
 80271b2:	f7f8 fbef 	bl	801f994 <GUI_ALLOC_h2p>
 80271b6:	6a07      	ldr	r7, [r0, #32]
 80271b8:	2f00      	cmp	r7, #0
 80271ba:	f47f af4f 	bne.w	802705c <WM_InvalidateWindowAndDescsEx+0x200>
 80271be:	e77b      	b.n	80270b8 <WM_InvalidateWindowAndDescsEx+0x25c>

080271c0 <WM__InvalidateRect>:
 80271c0:	b901      	cbnz	r1, 80271c4 <WM__InvalidateRect+0x4>
 80271c2:	4770      	bx	lr
 80271c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80271c8:	4605      	mov	r5, r0
 80271ca:	b086      	sub	sp, #24
 80271cc:	4608      	mov	r0, r1
 80271ce:	460c      	mov	r4, r1
 80271d0:	461e      	mov	r6, r3
 80271d2:	4617      	mov	r7, r2
 80271d4:	f7f8 fbe8 	bl	801f9a8 <GUI_ALLOC_LockH>
 80271d8:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 80271dc:	9000      	str	r0, [sp, #0]
 80271de:	f018 0f02 	tst.w	r8, #2
 80271e2:	d042      	beq.n	802726a <WM__InvalidateRect+0xaa>
 80271e4:	4602      	mov	r2, r0
 80271e6:	4629      	mov	r1, r5
 80271e8:	a802      	add	r0, sp, #8
 80271ea:	f7fb f867 	bl	80222bc <GUI__IntersectRects>
 80271ee:	2800      	cmp	r0, #0
 80271f0:	d03b      	beq.n	802726a <WM__InvalidateRect+0xaa>
 80271f2:	f640 0301 	movw	r3, #2049	; 0x801
 80271f6:	ea08 0303 	and.w	r3, r8, r3
 80271fa:	2b01      	cmp	r3, #1
 80271fc:	d03f      	beq.n	802727e <WM__InvalidateRect+0xbe>
 80271fe:	4620      	mov	r0, r4
 8027200:	4632      	mov	r2, r6
 8027202:	a902      	add	r1, sp, #8
 8027204:	f7ff fb26 	bl	8026854 <_Invalidate1Abs>
 8027208:	9b00      	ldr	r3, [sp, #0]
 802720a:	69dc      	ldr	r4, [r3, #28]
 802720c:	b36c      	cbz	r4, 802726a <WM__InvalidateRect+0xaa>
 802720e:	42bc      	cmp	r4, r7
 8027210:	d02b      	beq.n	802726a <WM__InvalidateRect+0xaa>
 8027212:	4620      	mov	r0, r4
 8027214:	f7f8 fbc8 	bl	801f9a8 <GUI_ALLOC_LockH>
 8027218:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802721a:	9001      	str	r0, [sp, #4]
 802721c:	079b      	lsls	r3, r3, #30
 802721e:	d52a      	bpl.n	8027276 <WM__InvalidateRect+0xb6>
 8027220:	4602      	mov	r2, r0
 8027222:	a902      	add	r1, sp, #8
 8027224:	a804      	add	r0, sp, #16
 8027226:	f7fb f849 	bl	80222bc <GUI__IntersectRects>
 802722a:	b320      	cbz	r0, 8027276 <WM__InvalidateRect+0xb6>
 802722c:	a801      	add	r0, sp, #4
 802722e:	f7f8 fbcd 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027232:	4632      	mov	r2, r6
 8027234:	a904      	add	r1, sp, #16
 8027236:	4620      	mov	r0, r4
 8027238:	f7ff fb0c 	bl	8026854 <_Invalidate1Abs>
 802723c:	4620      	mov	r0, r4
 802723e:	f001 fdc7 	bl	8028dd0 <WM_GetFirstChild>
 8027242:	4605      	mov	r5, r0
 8027244:	b150      	cbz	r0, 802725c <WM__InvalidateRect+0x9c>
 8027246:	4628      	mov	r0, r5
 8027248:	4632      	mov	r2, r6
 802724a:	a904      	add	r1, sp, #16
 802724c:	f7ff fe06 	bl	8026e5c <WM_InvalidateWindowAndDescsEx>
 8027250:	4628      	mov	r0, r5
 8027252:	f7f8 fb9f 	bl	801f994 <GUI_ALLOC_h2p>
 8027256:	6a05      	ldr	r5, [r0, #32]
 8027258:	2d00      	cmp	r5, #0
 802725a:	d1f4      	bne.n	8027246 <WM__InvalidateRect+0x86>
 802725c:	4620      	mov	r0, r4
 802725e:	f7f8 fb99 	bl	801f994 <GUI_ALLOC_h2p>
 8027262:	6a04      	ldr	r4, [r0, #32]
 8027264:	b10c      	cbz	r4, 802726a <WM__InvalidateRect+0xaa>
 8027266:	42a7      	cmp	r7, r4
 8027268:	d1d3      	bne.n	8027212 <WM__InvalidateRect+0x52>
 802726a:	4668      	mov	r0, sp
 802726c:	f7f8 fbae 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027270:	b006      	add	sp, #24
 8027272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027276:	a801      	add	r0, sp, #4
 8027278:	f7f8 fba8 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802727c:	e7ee      	b.n	802725c <WM__InvalidateRect+0x9c>
 802727e:	9900      	ldr	r1, [sp, #0]
 8027280:	4633      	mov	r3, r6
 8027282:	6a0a      	ldr	r2, [r1, #32]
 8027284:	6989      	ldr	r1, [r1, #24]
 8027286:	a802      	add	r0, sp, #8
 8027288:	f7ff ff9a 	bl	80271c0 <WM__InvalidateRect>
 802728c:	e7bc      	b.n	8027208 <WM__InvalidateRect+0x48>
 802728e:	bf00      	nop

08027290 <WM_InvalidateRect.part.2>:
 8027290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027294:	4607      	mov	r7, r0
 8027296:	b086      	sub	sp, #24
 8027298:	460c      	mov	r4, r1
 802729a:	f7fa fa0f 	bl	80216bc <GUI_Lock>
 802729e:	4638      	mov	r0, r7
 80272a0:	f7f8 fb82 	bl	801f9a8 <GUI_ALLOC_LockH>
 80272a4:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 80272a8:	9000      	str	r0, [sp, #0]
 80272aa:	f018 0f02 	tst.w	r8, #2
 80272ae:	d02f      	beq.n	8027310 <WM_InvalidateRect.part.2+0x80>
 80272b0:	c803      	ldmia	r0, {r0, r1}
 80272b2:	ae04      	add	r6, sp, #16
 80272b4:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 80272b8:	e886 0003 	stmia.w	r6, {r0, r1}
 80272bc:	d145      	bne.n	802734a <WM_InvalidateRect.part.2+0xba>
 80272be:	b17c      	cbz	r4, 80272e0 <WM_InvalidateRect.part.2+0x50>
 80272c0:	6820      	ldr	r0, [r4, #0]
 80272c2:	6861      	ldr	r1, [r4, #4]
 80272c4:	9c00      	ldr	r4, [sp, #0]
 80272c6:	ab02      	add	r3, sp, #8
 80272c8:	c303      	stmia	r3!, {r0, r1}
 80272ca:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80272ce:	f9b4 1000 	ldrsh.w	r1, [r4]
 80272d2:	a802      	add	r0, sp, #8
 80272d4:	f7f8 ff40 	bl	8020158 <GUI_MoveRect>
 80272d8:	a902      	add	r1, sp, #8
 80272da:	4630      	mov	r0, r6
 80272dc:	f7fa ffd0 	bl	8022280 <GUI__IntersectRect>
 80272e0:	463d      	mov	r5, r7
 80272e2:	e008      	b.n	80272f6 <WM_InvalidateRect.part.2+0x66>
 80272e4:	f7fa ffcc 	bl	8022280 <GUI__IntersectRect>
 80272e8:	9b01      	ldr	r3, [sp, #4]
 80272ea:	699c      	ldr	r4, [r3, #24]
 80272ec:	a801      	add	r0, sp, #4
 80272ee:	b1bc      	cbz	r4, 8027320 <WM_InvalidateRect.part.2+0x90>
 80272f0:	f7f8 fb6c 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80272f4:	4625      	mov	r5, r4
 80272f6:	4628      	mov	r0, r5
 80272f8:	f7f8 fb56 	bl	801f9a8 <GUI_ALLOC_LockH>
 80272fc:	4603      	mov	r3, r0
 80272fe:	9301      	str	r3, [sp, #4]
 8027300:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8027302:	0793      	lsls	r3, r2, #30
 8027304:	4601      	mov	r1, r0
 8027306:	4630      	mov	r0, r6
 8027308:	d4ec      	bmi.n	80272e4 <WM_InvalidateRect.part.2+0x54>
 802730a:	a801      	add	r0, sp, #4
 802730c:	f7f8 fb5e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027310:	4668      	mov	r0, sp
 8027312:	f7f8 fb5b 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027316:	f7fa f9c7 	bl	80216a8 <GUI_Unlock>
 802731a:	b006      	add	sp, #24
 802731c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027320:	f7f8 fb54 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027324:	4b10      	ldr	r3, [pc, #64]	; (8027368 <WM_InvalidateRect.part.2+0xd8>)
 8027326:	681a      	ldr	r2, [r3, #0]
 8027328:	42aa      	cmp	r2, r5
 802732a:	d002      	beq.n	8027332 <WM_InvalidateRect.part.2+0xa2>
 802732c:	685b      	ldr	r3, [r3, #4]
 802732e:	429d      	cmp	r5, r3
 8027330:	d1ee      	bne.n	8027310 <WM_InvalidateRect.part.2+0x80>
 8027332:	f640 0301 	movw	r3, #2049	; 0x801
 8027336:	ea08 0303 	and.w	r3, r8, r3
 802733a:	2b01      	cmp	r3, #1
 802733c:	d00b      	beq.n	8027356 <WM_InvalidateRect.part.2+0xc6>
 802733e:	4631      	mov	r1, r6
 8027340:	4638      	mov	r0, r7
 8027342:	2220      	movs	r2, #32
 8027344:	f7ff fa86 	bl	8026854 <_Invalidate1Abs>
 8027348:	e7e2      	b.n	8027310 <WM_InvalidateRect.part.2+0x80>
 802734a:	4638      	mov	r0, r7
 802734c:	f7ff fc34 	bl	8026bb8 <WM__InvalidateDrawAndDescs>
 8027350:	2c00      	cmp	r4, #0
 8027352:	d1b5      	bne.n	80272c0 <WM_InvalidateRect.part.2+0x30>
 8027354:	e7c4      	b.n	80272e0 <WM_InvalidateRect.part.2+0x50>
 8027356:	9b00      	ldr	r3, [sp, #0]
 8027358:	4630      	mov	r0, r6
 802735a:	6a1a      	ldr	r2, [r3, #32]
 802735c:	6999      	ldr	r1, [r3, #24]
 802735e:	2320      	movs	r3, #32
 8027360:	f7ff ff2e 	bl	80271c0 <WM__InvalidateRect>
 8027364:	e7d4      	b.n	8027310 <WM_InvalidateRect.part.2+0x80>
 8027366:	bf00      	nop
 8027368:	200308d4 	.word	0x200308d4

0802736c <_cbBackWin>:
 802736c:	6803      	ldr	r3, [r0, #0]
 802736e:	2b0e      	cmp	r3, #14
 8027370:	d034      	beq.n	80273dc <_cbBackWin+0x70>
 8027372:	2b0f      	cmp	r3, #15
 8027374:	b510      	push	{r4, lr}
 8027376:	4604      	mov	r4, r0
 8027378:	d116      	bne.n	80273a8 <_cbBackWin+0x3c>
 802737a:	4a26      	ldr	r2, [pc, #152]	; (8027414 <_cbBackWin+0xa8>)
 802737c:	6843      	ldr	r3, [r0, #4]
 802737e:	6811      	ldr	r1, [r2, #0]
 8027380:	428b      	cmp	r3, r1
 8027382:	d045      	beq.n	8027410 <_cbBackWin+0xa4>
 8027384:	6852      	ldr	r2, [r2, #4]
 8027386:	4293      	cmp	r3, r2
 8027388:	bf14      	ite	ne
 802738a:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 802738e:	2301      	moveq	r3, #1
 8027390:	4a21      	ldr	r2, [pc, #132]	; (8027418 <_cbBackWin+0xac>)
 8027392:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8027396:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 802739a:	4298      	cmp	r0, r3
 802739c:	d01b      	beq.n	80273d6 <_cbBackWin+0x6a>
 802739e:	f7f8 ffcd 	bl	802033c <GUI_SetBkColor>
 80273a2:	f7f9 f8db 	bl	802055c <GUI_Clear>
 80273a6:	6823      	ldr	r3, [r4, #0]
 80273a8:	6860      	ldr	r0, [r4, #4]
 80273aa:	3b0e      	subs	r3, #14
 80273ac:	2b1a      	cmp	r3, #26
 80273ae:	d812      	bhi.n	80273d6 <_cbBackWin+0x6a>
 80273b0:	e8df f003 	tbb	[pc, r3]
 80273b4:	11111119 	.word	0x11111119
 80273b8:	110e1111 	.word	0x110e1111
 80273bc:	11111e11 	.word	0x11111e11
 80273c0:	11111111 	.word	0x11111111
 80273c4:	11111111 	.word	0x11111111
 80273c8:	11111120 	.word	0x11111120
 80273cc:	1111      	.short	0x1111
 80273ce:	24          	.byte	0x24
 80273cf:	00          	.byte	0x00
 80273d0:	68e1      	ldr	r1, [r4, #12]
 80273d2:	f002 ff21 	bl	802a218 <WM__GetClientRectEx>
 80273d6:	2300      	movs	r3, #0
 80273d8:	60e3      	str	r3, [r4, #12]
 80273da:	bd10      	pop	{r4, pc}
 80273dc:	68c3      	ldr	r3, [r0, #12]
 80273de:	685a      	ldr	r2, [r3, #4]
 80273e0:	2a01      	cmp	r2, #1
 80273e2:	d012      	beq.n	802740a <_cbBackWin+0x9e>
 80273e4:	4770      	bx	lr
 80273e6:	4621      	mov	r1, r4
 80273e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80273ec:	f001 bdf0 	b.w	8028fd0 <WM_SendToParent>
 80273f0:	60e0      	str	r0, [r4, #12]
 80273f2:	bd10      	pop	{r4, pc}
 80273f4:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80273f8:	60e3      	str	r3, [r4, #12]
 80273fa:	bd10      	pop	{r4, pc}
 80273fc:	2800      	cmp	r0, #0
 80273fe:	d0ec      	beq.n	80273da <_cbBackWin+0x6e>
 8027400:	2100      	movs	r1, #0
 8027402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027406:	f7ff bf43 	b.w	8027290 <WM_InvalidateRect.part.2>
 802740a:	6818      	ldr	r0, [r3, #0]
 802740c:	f7fa b8a0 	b.w	8021550 <GUI_StoreKey>
 8027410:	2300      	movs	r3, #0
 8027412:	e7bd      	b.n	8027390 <_cbBackWin+0x24>
 8027414:	200308d4 	.word	0x200308d4
 8027418:	20030908 	.word	0x20030908

0802741c <WM_DeleteWindow.part.3>:
 802741c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027420:	4e81      	ldr	r6, [pc, #516]	; (8027628 <WM_DeleteWindow.part.3+0x20c>)
 8027422:	b086      	sub	sp, #24
 8027424:	4604      	mov	r4, r0
 8027426:	f7fa f949 	bl	80216bc <GUI_Lock>
 802742a:	6830      	ldr	r0, [r6, #0]
 802742c:	b148      	cbz	r0, 8027442 <WM_DeleteWindow.part.3+0x26>
 802742e:	42a0      	cmp	r0, r4
 8027430:	d102      	bne.n	8027438 <WM_DeleteWindow.part.3+0x1c>
 8027432:	e00b      	b.n	802744c <WM_DeleteWindow.part.3+0x30>
 8027434:	4284      	cmp	r4, r0
 8027436:	d009      	beq.n	802744c <WM_DeleteWindow.part.3+0x30>
 8027438:	f7f8 faac 	bl	801f994 <GUI_ALLOC_h2p>
 802743c:	6940      	ldr	r0, [r0, #20]
 802743e:	2800      	cmp	r0, #0
 8027440:	d1f8      	bne.n	8027434 <WM_DeleteWindow.part.3+0x18>
 8027442:	f7fa f931 	bl	80216a8 <GUI_Unlock>
 8027446:	b006      	add	sp, #24
 8027448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802744c:	4625      	mov	r5, r4
 802744e:	e000      	b.n	8027452 <WM_DeleteWindow.part.3+0x36>
 8027450:	461d      	mov	r5, r3
 8027452:	4628      	mov	r0, r5
 8027454:	f7f8 fa9e 	bl	801f994 <GUI_ALLOC_h2p>
 8027458:	6983      	ldr	r3, [r0, #24]
 802745a:	2b00      	cmp	r3, #0
 802745c:	d1f8      	bne.n	8027450 <WM_DeleteWindow.part.3+0x34>
 802745e:	4f73      	ldr	r7, [pc, #460]	; (802762c <WM_DeleteWindow.part.3+0x210>)
 8027460:	683a      	ldr	r2, [r7, #0]
 8027462:	4295      	cmp	r5, r2
 8027464:	f000 80d8 	beq.w	8027618 <WM_DeleteWindow.part.3+0x1fc>
 8027468:	687b      	ldr	r3, [r7, #4]
 802746a:	429d      	cmp	r5, r3
 802746c:	bf14      	ite	ne
 802746e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8027472:	2501      	moveq	r5, #1
 8027474:	f10d 0818 	add.w	r8, sp, #24
 8027478:	230b      	movs	r3, #11
 802747a:	f848 3d10 	str.w	r3, [r8, #-16]!
 802747e:	4620      	mov	r0, r4
 8027480:	4641      	mov	r1, r8
 8027482:	9403      	str	r4, [sp, #12]
 8027484:	f002 fdca 	bl	802a01c <WM__SendMessage>
 8027488:	4620      	mov	r0, r4
 802748a:	f002 f981 	bl	8029790 <WM__DeleteAssocTimer>
 802748e:	4620      	mov	r0, r4
 8027490:	f7f8 fa8a 	bl	801f9a8 <GUI_ALLOC_LockH>
 8027494:	9001      	str	r0, [sp, #4]
 8027496:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8027498:	2800      	cmp	r0, #0
 802749a:	f040 80a1 	bne.w	80275e0 <WM_DeleteWindow.part.3+0x1c4>
 802749e:	4b64      	ldr	r3, [pc, #400]	; (8027630 <WM_DeleteWindow.part.3+0x214>)
 80274a0:	4a64      	ldr	r2, [pc, #400]	; (8027634 <WM_DeleteWindow.part.3+0x218>)
 80274a2:	681b      	ldr	r3, [r3, #0]
 80274a4:	4864      	ldr	r0, [pc, #400]	; (8027638 <WM_DeleteWindow.part.3+0x21c>)
 80274a6:	2100      	movs	r1, #0
 80274a8:	6081      	str	r1, [r0, #8]
 80274aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80274ae:	4284      	cmp	r4, r0
 80274b0:	bf08      	it	eq
 80274b2:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 80274b6:	4a61      	ldr	r2, [pc, #388]	; (802763c <WM_DeleteWindow.part.3+0x220>)
 80274b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80274bc:	428c      	cmp	r4, r1
 80274be:	bf04      	itt	eq
 80274c0:	2100      	moveq	r1, #0
 80274c2:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 80274c6:	4b5e      	ldr	r3, [pc, #376]	; (8027640 <WM_DeleteWindow.part.3+0x224>)
 80274c8:	681b      	ldr	r3, [r3, #0]
 80274ca:	2100      	movs	r1, #0
 80274cc:	b133      	cbz	r3, 80274dc <WM_DeleteWindow.part.3+0xc0>
 80274ce:	685a      	ldr	r2, [r3, #4]
 80274d0:	4294      	cmp	r4, r2
 80274d2:	bf08      	it	eq
 80274d4:	6059      	streq	r1, [r3, #4]
 80274d6:	681b      	ldr	r3, [r3, #0]
 80274d8:	2b00      	cmp	r3, #0
 80274da:	d1f8      	bne.n	80274ce <WM_DeleteWindow.part.3+0xb2>
 80274dc:	4620      	mov	r0, r4
 80274de:	2107      	movs	r1, #7
 80274e0:	f001 fcfa 	bl	8028ed8 <WM_NotifyParent>
 80274e4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80274e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80274ec:	2800      	cmp	r0, #0
 80274ee:	d15d      	bne.n	80275ac <WM_DeleteWindow.part.3+0x190>
 80274f0:	4620      	mov	r0, r4
 80274f2:	f7f8 fa59 	bl	801f9a8 <GUI_ALLOC_LockH>
 80274f6:	6981      	ldr	r1, [r0, #24]
 80274f8:	9002      	str	r0, [sp, #8]
 80274fa:	2900      	cmp	r1, #0
 80274fc:	d162      	bne.n	80275c4 <WM_DeleteWindow.part.3+0x1a8>
 80274fe:	4640      	mov	r0, r8
 8027500:	f7f8 fa64 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027504:	6830      	ldr	r0, [r6, #0]
 8027506:	b158      	cbz	r0, 8027520 <WM_DeleteWindow.part.3+0x104>
 8027508:	f7f8 fa44 	bl	801f994 <GUI_ALLOC_h2p>
 802750c:	4680      	mov	r8, r0
 802750e:	6940      	ldr	r0, [r0, #20]
 8027510:	4284      	cmp	r4, r0
 8027512:	d1f8      	bne.n	8027506 <WM_DeleteWindow.part.3+0xea>
 8027514:	4620      	mov	r0, r4
 8027516:	f7f8 fa3d 	bl	801f994 <GUI_ALLOC_h2p>
 802751a:	6943      	ldr	r3, [r0, #20]
 802751c:	f8c8 3014 	str.w	r3, [r8, #20]
 8027520:	9b01      	ldr	r3, [sp, #4]
 8027522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8027524:	07d9      	lsls	r1, r3, #31
 8027526:	d503      	bpl.n	8027530 <WM_DeleteWindow.part.3+0x114>
 8027528:	4946      	ldr	r1, [pc, #280]	; (8027644 <WM_DeleteWindow.part.3+0x228>)
 802752a:	680a      	ldr	r2, [r1, #0]
 802752c:	3a01      	subs	r2, #1
 802752e:	600a      	str	r2, [r1, #0]
 8027530:	069a      	lsls	r2, r3, #26
 8027532:	d442      	bmi.n	80275ba <WM_DeleteWindow.part.3+0x19e>
 8027534:	a801      	add	r0, sp, #4
 8027536:	f7f8 fa49 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802753a:	4a43      	ldr	r2, [pc, #268]	; (8027648 <WM_DeleteWindow.part.3+0x22c>)
 802753c:	8813      	ldrh	r3, [r2, #0]
 802753e:	4620      	mov	r0, r4
 8027540:	3b01      	subs	r3, #1
 8027542:	8013      	strh	r3, [r2, #0]
 8027544:	f7f8 fbd2 	bl	801fcec <GUI_ALLOC_Free>
 8027548:	1c6b      	adds	r3, r5, #1
 802754a:	f43f af7a 	beq.w	8027442 <WM_DeleteWindow.part.3+0x26>
 802754e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8027552:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8027650 <WM_DeleteWindow.part.3+0x234>
 8027556:	f7fa f8b1 	bl	80216bc <GUI_Lock>
 802755a:	f8d8 3000 	ldr.w	r3, [r8]
 802755e:	b905      	cbnz	r5, 8027562 <WM_DeleteWindow.part.3+0x146>
 8027560:	6835      	ldr	r5, [r6, #0]
 8027562:	649d      	str	r5, [r3, #72]	; 0x48
 8027564:	462c      	mov	r4, r5
 8027566:	e000      	b.n	802756a <WM_DeleteWindow.part.3+0x14e>
 8027568:	461c      	mov	r4, r3
 802756a:	4620      	mov	r0, r4
 802756c:	f7f8 fa12 	bl	801f994 <GUI_ALLOC_h2p>
 8027570:	6983      	ldr	r3, [r0, #24]
 8027572:	2b00      	cmp	r3, #0
 8027574:	d1f8      	bne.n	8027568 <WM_DeleteWindow.part.3+0x14c>
 8027576:	6839      	ldr	r1, [r7, #0]
 8027578:	4a2c      	ldr	r2, [pc, #176]	; (802762c <WM_DeleteWindow.part.3+0x210>)
 802757a:	428c      	cmp	r4, r1
 802757c:	d04e      	beq.n	802761c <WM_DeleteWindow.part.3+0x200>
 802757e:	6853      	ldr	r3, [r2, #4]
 8027580:	429c      	cmp	r4, r3
 8027582:	d04f      	beq.n	8027624 <WM_DeleteWindow.part.3+0x208>
 8027584:	f7fb fce2 	bl	8022f4c <LCD_SetClipRectMax>
 8027588:	4628      	mov	r0, r5
 802758a:	f7f8 fa03 	bl	801f994 <GUI_ALLOC_h2p>
 802758e:	f8d8 3000 	ldr.w	r3, [r8]
 8027592:	f9b0 1000 	ldrsh.w	r1, [r0]
 8027596:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 802759a:	651a      	str	r2, [r3, #80]	; 0x50
 802759c:	64d9      	str	r1, [r3, #76]	; 0x4c
 802759e:	f7fa f883 	bl	80216a8 <GUI_Unlock>
 80275a2:	f7fa f881 	bl	80216a8 <GUI_Unlock>
 80275a6:	b006      	add	sp, #24
 80275a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80275ac:	f7ff ff36 	bl	802741c <WM_DeleteWindow.part.3>
 80275b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80275b4:	2800      	cmp	r0, #0
 80275b6:	d199      	bne.n	80274ec <WM_DeleteWindow.part.3+0xd0>
 80275b8:	e79a      	b.n	80274f0 <WM_DeleteWindow.part.3+0xd4>
 80275ba:	4a24      	ldr	r2, [pc, #144]	; (802764c <WM_DeleteWindow.part.3+0x230>)
 80275bc:	8813      	ldrh	r3, [r2, #0]
 80275be:	3b01      	subs	r3, #1
 80275c0:	8013      	strh	r3, [r2, #0]
 80275c2:	e7b7      	b.n	8027534 <WM_DeleteWindow.part.3+0x118>
 80275c4:	6a02      	ldr	r2, [r0, #32]
 80275c6:	2320      	movs	r3, #32
 80275c8:	f7ff fdfa 	bl	80271c0 <WM__InvalidateRect>
 80275cc:	4620      	mov	r0, r4
 80275ce:	f7f8 f9e1 	bl	801f994 <GUI_ALLOC_h2p>
 80275d2:	4681      	mov	r9, r0
 80275d4:	6980      	ldr	r0, [r0, #24]
 80275d6:	b930      	cbnz	r0, 80275e6 <WM_DeleteWindow.part.3+0x1ca>
 80275d8:	9b02      	ldr	r3, [sp, #8]
 80275da:	2200      	movs	r2, #0
 80275dc:	619a      	str	r2, [r3, #24]
 80275de:	e78e      	b.n	80274fe <WM_DeleteWindow.part.3+0xe2>
 80275e0:	f005 fd48 	bl	802d074 <GUI_MEMDEV_Delete>
 80275e4:	e75b      	b.n	802749e <WM_DeleteWindow.part.3+0x82>
 80275e6:	f7f8 f9d5 	bl	801f994 <GUI_ALLOC_h2p>
 80275ea:	69c3      	ldr	r3, [r0, #28]
 80275ec:	429c      	cmp	r4, r3
 80275ee:	4682      	mov	sl, r0
 80275f0:	d00b      	beq.n	802760a <WM_DeleteWindow.part.3+0x1ee>
 80275f2:	2b00      	cmp	r3, #0
 80275f4:	d0f0      	beq.n	80275d8 <WM_DeleteWindow.part.3+0x1bc>
 80275f6:	4618      	mov	r0, r3
 80275f8:	f7f8 f9cc 	bl	801f994 <GUI_ALLOC_h2p>
 80275fc:	6a03      	ldr	r3, [r0, #32]
 80275fe:	429c      	cmp	r4, r3
 8027600:	d1f7      	bne.n	80275f2 <WM_DeleteWindow.part.3+0x1d6>
 8027602:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8027606:	6203      	str	r3, [r0, #32]
 8027608:	e7e6      	b.n	80275d8 <WM_DeleteWindow.part.3+0x1bc>
 802760a:	4620      	mov	r0, r4
 802760c:	f7f8 f9c2 	bl	801f994 <GUI_ALLOC_h2p>
 8027610:	6a03      	ldr	r3, [r0, #32]
 8027612:	f8ca 301c 	str.w	r3, [sl, #28]
 8027616:	e7df      	b.n	80275d8 <WM_DeleteWindow.part.3+0x1bc>
 8027618:	461d      	mov	r5, r3
 802761a:	e72b      	b.n	8027474 <WM_DeleteWindow.part.3+0x58>
 802761c:	4618      	mov	r0, r3
 802761e:	f7f9 ffdf 	bl	80215e0 <GUI_SelectLayer>
 8027622:	e7af      	b.n	8027584 <WM_DeleteWindow.part.3+0x168>
 8027624:	2001      	movs	r0, #1
 8027626:	e7fa      	b.n	802761e <WM_DeleteWindow.part.3+0x202>
 8027628:	200308f0 	.word	0x200308f0
 802762c:	200308d4 	.word	0x200308d4
 8027630:	200308f4 	.word	0x200308f4
 8027634:	200308e4 	.word	0x200308e4
 8027638:	2002e3dc 	.word	0x2002e3dc
 802763c:	20030918 	.word	0x20030918
 8027640:	20030910 	.word	0x20030910
 8027644:	20030924 	.word	0x20030924
 8027648:	200308cc 	.word	0x200308cc
 802764c:	200308ec 	.word	0x200308ec
 8027650:	200000e8 	.word	0x200000e8

08027654 <_Exec1Input>:
 8027654:	b570      	push	{r4, r5, r6, lr}
 8027656:	4e1f      	ldr	r6, [pc, #124]	; (80276d4 <_Exec1Input+0x80>)
 8027658:	6873      	ldr	r3, [r6, #4]
 802765a:	b082      	sub	sp, #8
 802765c:	b9cb      	cbnz	r3, 8027692 <_Exec1Input+0x3e>
 802765e:	4b1e      	ldr	r3, [pc, #120]	; (80276d8 <_Exec1Input+0x84>)
 8027660:	681b      	ldr	r3, [r3, #0]
 8027662:	b103      	cbz	r3, 8027666 <_Exec1Input+0x12>
 8027664:	4798      	blx	r3
 8027666:	4b1d      	ldr	r3, [pc, #116]	; (80276dc <_Exec1Input+0x88>)
 8027668:	681b      	ldr	r3, [r3, #0]
 802766a:	b10b      	cbz	r3, 8027670 <_Exec1Input+0x1c>
 802766c:	4798      	blx	r3
 802766e:	b968      	cbnz	r0, 802768c <_Exec1Input+0x38>
 8027670:	4b1b      	ldr	r3, [pc, #108]	; (80276e0 <_Exec1Input+0x8c>)
 8027672:	681b      	ldr	r3, [r3, #0]
 8027674:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8027678:	b908      	cbnz	r0, 802767e <_Exec1Input+0x2a>
 802767a:	b002      	add	sp, #8
 802767c:	bd70      	pop	{r4, r5, r6, pc}
 802767e:	f7f9 ff6f 	bl	8021560 <GUI_PollKeyMsg>
 8027682:	3000      	adds	r0, #0
 8027684:	bf18      	it	ne
 8027686:	2001      	movne	r0, #1
 8027688:	b002      	add	sp, #8
 802768a:	bd70      	pop	{r4, r5, r6, pc}
 802768c:	2001      	movs	r0, #1
 802768e:	b002      	add	sp, #8
 8027690:	bd70      	pop	{r4, r5, r6, pc}
 8027692:	f7fa f813 	bl	80216bc <GUI_Lock>
 8027696:	4b13      	ldr	r3, [pc, #76]	; (80276e4 <_Exec1Input+0x90>)
 8027698:	681c      	ldr	r4, [r3, #0]
 802769a:	b18c      	cbz	r4, 80276c0 <_Exec1Input+0x6c>
 802769c:	4620      	mov	r0, r4
 802769e:	f7f8 f983 	bl	801f9a8 <GUI_ALLOC_LockH>
 80276a2:	4603      	mov	r3, r0
 80276a4:	9301      	str	r3, [sp, #4]
 80276a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80276a8:	0412      	lsls	r2, r2, #16
 80276aa:	a801      	add	r0, sp, #4
 80276ac:	d50d      	bpl.n	80276ca <_Exec1Input+0x76>
 80276ae:	695d      	ldr	r5, [r3, #20]
 80276b0:	f7f8 f98c 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80276b4:	4620      	mov	r0, r4
 80276b6:	462c      	mov	r4, r5
 80276b8:	f7ff feb0 	bl	802741c <WM_DeleteWindow.part.3>
 80276bc:	2c00      	cmp	r4, #0
 80276be:	d1ed      	bne.n	802769c <_Exec1Input+0x48>
 80276c0:	2300      	movs	r3, #0
 80276c2:	6073      	str	r3, [r6, #4]
 80276c4:	f7f9 fff0 	bl	80216a8 <GUI_Unlock>
 80276c8:	e7c9      	b.n	802765e <_Exec1Input+0xa>
 80276ca:	a801      	add	r0, sp, #4
 80276cc:	695c      	ldr	r4, [r3, #20]
 80276ce:	f7f8 f97d 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80276d2:	e7e2      	b.n	802769a <_Exec1Input+0x46>
 80276d4:	2002e3dc 	.word	0x2002e3dc
 80276d8:	200308dc 	.word	0x200308dc
 80276dc:	200308bc 	.word	0x200308bc
 80276e0:	200000e8 	.word	0x200000e8
 80276e4:	200308f0 	.word	0x200308f0

080276e8 <WM__InvalidateParent>:
 80276e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80276ec:	4605      	mov	r5, r0
 80276ee:	b086      	sub	sp, #24
 80276f0:	4608      	mov	r0, r1
 80276f2:	460c      	mov	r4, r1
 80276f4:	4617      	mov	r7, r2
 80276f6:	f7f8 f94d 	bl	801f994 <GUI_ALLOC_h2p>
 80276fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80276fc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8027700:	bf14      	ite	ne
 8027702:	f44f 4680 	movne.w	r6, #16384	; 0x4000
 8027706:	2620      	moveq	r6, #32
 8027708:	b914      	cbnz	r4, 8027710 <WM__InvalidateParent+0x28>
 802770a:	b006      	add	sp, #24
 802770c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027710:	4620      	mov	r0, r4
 8027712:	f7f8 f949 	bl	801f9a8 <GUI_ALLOC_LockH>
 8027716:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 802771a:	9000      	str	r0, [sp, #0]
 802771c:	f018 0f02 	tst.w	r8, #2
 8027720:	d041      	beq.n	80277a6 <WM__InvalidateParent+0xbe>
 8027722:	4602      	mov	r2, r0
 8027724:	4629      	mov	r1, r5
 8027726:	a802      	add	r0, sp, #8
 8027728:	f7fa fdc8 	bl	80222bc <GUI__IntersectRects>
 802772c:	2800      	cmp	r0, #0
 802772e:	d03a      	beq.n	80277a6 <WM__InvalidateParent+0xbe>
 8027730:	f640 0301 	movw	r3, #2049	; 0x801
 8027734:	ea08 0303 	and.w	r3, r8, r3
 8027738:	2b01      	cmp	r3, #1
 802773a:	d044      	beq.n	80277c6 <WM__InvalidateParent+0xde>
 802773c:	4620      	mov	r0, r4
 802773e:	4632      	mov	r2, r6
 8027740:	a902      	add	r1, sp, #8
 8027742:	f7ff f887 	bl	8026854 <_Invalidate1Abs>
 8027746:	9b00      	ldr	r3, [sp, #0]
 8027748:	69dc      	ldr	r4, [r3, #28]
 802774a:	b364      	cbz	r4, 80277a6 <WM__InvalidateParent+0xbe>
 802774c:	42a7      	cmp	r7, r4
 802774e:	d02a      	beq.n	80277a6 <WM__InvalidateParent+0xbe>
 8027750:	4620      	mov	r0, r4
 8027752:	f7f8 f929 	bl	801f9a8 <GUI_ALLOC_LockH>
 8027756:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8027758:	9001      	str	r0, [sp, #4]
 802775a:	079b      	lsls	r3, r3, #30
 802775c:	d529      	bpl.n	80277b2 <WM__InvalidateParent+0xca>
 802775e:	4602      	mov	r2, r0
 8027760:	a902      	add	r1, sp, #8
 8027762:	a804      	add	r0, sp, #16
 8027764:	f7fa fdaa 	bl	80222bc <GUI__IntersectRects>
 8027768:	b318      	cbz	r0, 80277b2 <WM__InvalidateParent+0xca>
 802776a:	a801      	add	r0, sp, #4
 802776c:	f7f8 f92e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027770:	4632      	mov	r2, r6
 8027772:	a904      	add	r1, sp, #16
 8027774:	4620      	mov	r0, r4
 8027776:	f7ff f86d 	bl	8026854 <_Invalidate1Abs>
 802777a:	4620      	mov	r0, r4
 802777c:	f001 fb28 	bl	8028dd0 <WM_GetFirstChild>
 8027780:	4605      	mov	r5, r0
 8027782:	b150      	cbz	r0, 802779a <WM__InvalidateParent+0xb2>
 8027784:	4628      	mov	r0, r5
 8027786:	4632      	mov	r2, r6
 8027788:	a904      	add	r1, sp, #16
 802778a:	f7ff fb67 	bl	8026e5c <WM_InvalidateWindowAndDescsEx>
 802778e:	4628      	mov	r0, r5
 8027790:	f7f8 f900 	bl	801f994 <GUI_ALLOC_h2p>
 8027794:	6a05      	ldr	r5, [r0, #32]
 8027796:	2d00      	cmp	r5, #0
 8027798:	d1f4      	bne.n	8027784 <WM__InvalidateParent+0x9c>
 802779a:	4620      	mov	r0, r4
 802779c:	f7f8 f8fa 	bl	801f994 <GUI_ALLOC_h2p>
 80277a0:	6a04      	ldr	r4, [r0, #32]
 80277a2:	2c00      	cmp	r4, #0
 80277a4:	d1d2      	bne.n	802774c <WM__InvalidateParent+0x64>
 80277a6:	4668      	mov	r0, sp
 80277a8:	f7f8 f910 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80277ac:	b006      	add	sp, #24
 80277ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80277b2:	a801      	add	r0, sp, #4
 80277b4:	f7f8 f90a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80277b8:	4620      	mov	r0, r4
 80277ba:	f7f8 f8eb 	bl	801f994 <GUI_ALLOC_h2p>
 80277be:	6a04      	ldr	r4, [r0, #32]
 80277c0:	2c00      	cmp	r4, #0
 80277c2:	d1c3      	bne.n	802774c <WM__InvalidateParent+0x64>
 80277c4:	e7ef      	b.n	80277a6 <WM__InvalidateParent+0xbe>
 80277c6:	9900      	ldr	r1, [sp, #0]
 80277c8:	4633      	mov	r3, r6
 80277ca:	6a0a      	ldr	r2, [r1, #32]
 80277cc:	6989      	ldr	r1, [r1, #24]
 80277ce:	a802      	add	r0, sp, #8
 80277d0:	f7ff fcf6 	bl	80271c0 <WM__InvalidateRect>
 80277d4:	e7b7      	b.n	8027746 <WM__InvalidateParent+0x5e>
 80277d6:	bf00      	nop

080277d8 <WM__InvalidateRectEx>:
 80277d8:	b901      	cbnz	r1, 80277dc <WM__InvalidateRectEx+0x4>
 80277da:	4770      	bx	lr
 80277dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80277de:	4605      	mov	r5, r0
 80277e0:	b087      	sub	sp, #28
 80277e2:	4608      	mov	r0, r1
 80277e4:	4616      	mov	r6, r2
 80277e6:	460c      	mov	r4, r1
 80277e8:	f7f8 f8de 	bl	801f9a8 <GUI_ALLOC_LockH>
 80277ec:	6a87      	ldr	r7, [r0, #40]	; 0x28
 80277ee:	9000      	str	r0, [sp, #0]
 80277f0:	07ba      	lsls	r2, r7, #30
 80277f2:	d540      	bpl.n	8027876 <WM__InvalidateRectEx+0x9e>
 80277f4:	4602      	mov	r2, r0
 80277f6:	4629      	mov	r1, r5
 80277f8:	a802      	add	r0, sp, #8
 80277fa:	f7fa fd5f 	bl	80222bc <GUI__IntersectRects>
 80277fe:	2800      	cmp	r0, #0
 8027800:	d039      	beq.n	8027876 <WM__InvalidateRectEx+0x9e>
 8027802:	f640 0301 	movw	r3, #2049	; 0x801
 8027806:	403b      	ands	r3, r7
 8027808:	2b01      	cmp	r3, #1
 802780a:	d043      	beq.n	8027894 <WM__InvalidateRectEx+0xbc>
 802780c:	4620      	mov	r0, r4
 802780e:	2220      	movs	r2, #32
 8027810:	a902      	add	r1, sp, #8
 8027812:	f7ff f81f 	bl	8026854 <_Invalidate1Abs>
 8027816:	9b00      	ldr	r3, [sp, #0]
 8027818:	69dc      	ldr	r4, [r3, #28]
 802781a:	b364      	cbz	r4, 8027876 <WM__InvalidateRectEx+0x9e>
 802781c:	42a6      	cmp	r6, r4
 802781e:	d02a      	beq.n	8027876 <WM__InvalidateRectEx+0x9e>
 8027820:	4620      	mov	r0, r4
 8027822:	f7f8 f8c1 	bl	801f9a8 <GUI_ALLOC_LockH>
 8027826:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8027828:	9001      	str	r0, [sp, #4]
 802782a:	079b      	lsls	r3, r3, #30
 802782c:	d528      	bpl.n	8027880 <WM__InvalidateRectEx+0xa8>
 802782e:	4602      	mov	r2, r0
 8027830:	a902      	add	r1, sp, #8
 8027832:	a804      	add	r0, sp, #16
 8027834:	f7fa fd42 	bl	80222bc <GUI__IntersectRects>
 8027838:	b310      	cbz	r0, 8027880 <WM__InvalidateRectEx+0xa8>
 802783a:	a801      	add	r0, sp, #4
 802783c:	f7f8 f8c6 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027840:	2220      	movs	r2, #32
 8027842:	a904      	add	r1, sp, #16
 8027844:	4620      	mov	r0, r4
 8027846:	f7ff f805 	bl	8026854 <_Invalidate1Abs>
 802784a:	4620      	mov	r0, r4
 802784c:	f001 fac0 	bl	8028dd0 <WM_GetFirstChild>
 8027850:	4605      	mov	r5, r0
 8027852:	b150      	cbz	r0, 802786a <WM__InvalidateRectEx+0x92>
 8027854:	4628      	mov	r0, r5
 8027856:	2220      	movs	r2, #32
 8027858:	a904      	add	r1, sp, #16
 802785a:	f7ff faff 	bl	8026e5c <WM_InvalidateWindowAndDescsEx>
 802785e:	4628      	mov	r0, r5
 8027860:	f7f8 f898 	bl	801f994 <GUI_ALLOC_h2p>
 8027864:	6a05      	ldr	r5, [r0, #32]
 8027866:	2d00      	cmp	r5, #0
 8027868:	d1f4      	bne.n	8027854 <WM__InvalidateRectEx+0x7c>
 802786a:	4620      	mov	r0, r4
 802786c:	f7f8 f892 	bl	801f994 <GUI_ALLOC_h2p>
 8027870:	6a04      	ldr	r4, [r0, #32]
 8027872:	2c00      	cmp	r4, #0
 8027874:	d1d2      	bne.n	802781c <WM__InvalidateRectEx+0x44>
 8027876:	4668      	mov	r0, sp
 8027878:	f7f8 f8a8 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802787c:	b007      	add	sp, #28
 802787e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027880:	a801      	add	r0, sp, #4
 8027882:	f7f8 f8a3 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027886:	4620      	mov	r0, r4
 8027888:	f7f8 f884 	bl	801f994 <GUI_ALLOC_h2p>
 802788c:	6a04      	ldr	r4, [r0, #32]
 802788e:	2c00      	cmp	r4, #0
 8027890:	d1c4      	bne.n	802781c <WM__InvalidateRectEx+0x44>
 8027892:	e7f0      	b.n	8027876 <WM__InvalidateRectEx+0x9e>
 8027894:	9900      	ldr	r1, [sp, #0]
 8027896:	2320      	movs	r3, #32
 8027898:	6a0a      	ldr	r2, [r1, #32]
 802789a:	6989      	ldr	r1, [r1, #24]
 802789c:	a802      	add	r0, sp, #8
 802789e:	f7ff fc8f 	bl	80271c0 <WM__InvalidateRect>
 80278a2:	e7b8      	b.n	8027816 <WM__InvalidateRectEx+0x3e>

080278a4 <WM_SendMessage>:
 80278a4:	b900      	cbnz	r0, 80278a8 <WM_SendMessage+0x4>
 80278a6:	4770      	bx	lr
 80278a8:	b538      	push	{r3, r4, r5, lr}
 80278aa:	4604      	mov	r4, r0
 80278ac:	460d      	mov	r5, r1
 80278ae:	f7f9 ff05 	bl	80216bc <GUI_Lock>
 80278b2:	4629      	mov	r1, r5
 80278b4:	4620      	mov	r0, r4
 80278b6:	f002 fbb1 	bl	802a01c <WM__SendMessage>
 80278ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80278be:	f7f9 bef3 	b.w	80216a8 <GUI_Unlock>
 80278c2:	bf00      	nop

080278c4 <WM__SendMsgNoData>:
 80278c4:	b500      	push	{lr}
 80278c6:	b085      	sub	sp, #20
 80278c8:	ab04      	add	r3, sp, #16
 80278ca:	9001      	str	r0, [sp, #4]
 80278cc:	f843 1d10 	str.w	r1, [r3, #-16]!
 80278d0:	4619      	mov	r1, r3
 80278d2:	f002 fba3 	bl	802a01c <WM__SendMessage>
 80278d6:	b005      	add	sp, #20
 80278d8:	f85d fb04 	ldr.w	pc, [sp], #4

080278dc <WM__GetClientRectWin>:
 80278dc:	b430      	push	{r4, r5}
 80278de:	2300      	movs	r3, #0
 80278e0:	800b      	strh	r3, [r1, #0]
 80278e2:	804b      	strh	r3, [r1, #2]
 80278e4:	8805      	ldrh	r5, [r0, #0]
 80278e6:	8844      	ldrh	r4, [r0, #2]
 80278e8:	8882      	ldrh	r2, [r0, #4]
 80278ea:	88c3      	ldrh	r3, [r0, #6]
 80278ec:	1b52      	subs	r2, r2, r5
 80278ee:	1b1b      	subs	r3, r3, r4
 80278f0:	808a      	strh	r2, [r1, #4]
 80278f2:	80cb      	strh	r3, [r1, #6]
 80278f4:	bc30      	pop	{r4, r5}
 80278f6:	4770      	bx	lr

080278f8 <WM_InvalidateWindow>:
 80278f8:	b900      	cbnz	r0, 80278fc <WM_InvalidateWindow+0x4>
 80278fa:	4770      	bx	lr
 80278fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027900:	4607      	mov	r7, r0
 8027902:	b084      	sub	sp, #16
 8027904:	f7f9 feda 	bl	80216bc <GUI_Lock>
 8027908:	4638      	mov	r0, r7
 802790a:	f7f8 f84d 	bl	801f9a8 <GUI_ALLOC_LockH>
 802790e:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 8027912:	9000      	str	r0, [sp, #0]
 8027914:	f018 0f02 	tst.w	r8, #2
 8027918:	d01e      	beq.n	8027958 <WM_InvalidateWindow+0x60>
 802791a:	c803      	ldmia	r0, {r0, r1}
 802791c:	ae02      	add	r6, sp, #8
 802791e:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 8027922:	e886 0003 	stmia.w	r6, {r0, r1}
 8027926:	d11f      	bne.n	8027968 <WM_InvalidateWindow+0x70>
 8027928:	463d      	mov	r5, r7
 802792a:	e008      	b.n	802793e <WM_InvalidateWindow+0x46>
 802792c:	f7fa fca8 	bl	8022280 <GUI__IntersectRect>
 8027930:	9b01      	ldr	r3, [sp, #4]
 8027932:	699c      	ldr	r4, [r3, #24]
 8027934:	a801      	add	r0, sp, #4
 8027936:	b1dc      	cbz	r4, 8027970 <WM_InvalidateWindow+0x78>
 8027938:	f7f8 f848 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802793c:	4625      	mov	r5, r4
 802793e:	4628      	mov	r0, r5
 8027940:	f7f8 f832 	bl	801f9a8 <GUI_ALLOC_LockH>
 8027944:	4603      	mov	r3, r0
 8027946:	9301      	str	r3, [sp, #4]
 8027948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 802794a:	0793      	lsls	r3, r2, #30
 802794c:	4601      	mov	r1, r0
 802794e:	4630      	mov	r0, r6
 8027950:	d4ec      	bmi.n	802792c <WM_InvalidateWindow+0x34>
 8027952:	a801      	add	r0, sp, #4
 8027954:	f7f8 f83a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027958:	4668      	mov	r0, sp
 802795a:	f7f8 f837 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802795e:	f7f9 fea3 	bl	80216a8 <GUI_Unlock>
 8027962:	b004      	add	sp, #16
 8027964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027968:	4638      	mov	r0, r7
 802796a:	f7ff f925 	bl	8026bb8 <WM__InvalidateDrawAndDescs>
 802796e:	e7db      	b.n	8027928 <WM_InvalidateWindow+0x30>
 8027970:	f7f8 f82c 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027974:	4b0d      	ldr	r3, [pc, #52]	; (80279ac <WM_InvalidateWindow+0xb4>)
 8027976:	681a      	ldr	r2, [r3, #0]
 8027978:	4295      	cmp	r5, r2
 802797a:	d002      	beq.n	8027982 <WM_InvalidateWindow+0x8a>
 802797c:	685b      	ldr	r3, [r3, #4]
 802797e:	429d      	cmp	r5, r3
 8027980:	d1ea      	bne.n	8027958 <WM_InvalidateWindow+0x60>
 8027982:	f640 0301 	movw	r3, #2049	; 0x801
 8027986:	ea08 0303 	and.w	r3, r8, r3
 802798a:	2b01      	cmp	r3, #1
 802798c:	d005      	beq.n	802799a <WM_InvalidateWindow+0xa2>
 802798e:	4631      	mov	r1, r6
 8027990:	4638      	mov	r0, r7
 8027992:	2220      	movs	r2, #32
 8027994:	f7fe ff5e 	bl	8026854 <_Invalidate1Abs>
 8027998:	e7de      	b.n	8027958 <WM_InvalidateWindow+0x60>
 802799a:	9b00      	ldr	r3, [sp, #0]
 802799c:	4630      	mov	r0, r6
 802799e:	6a1a      	ldr	r2, [r3, #32]
 80279a0:	6999      	ldr	r1, [r3, #24]
 80279a2:	2320      	movs	r3, #32
 80279a4:	f7ff fc0c 	bl	80271c0 <WM__InvalidateRect>
 80279a8:	e7d6      	b.n	8027958 <WM_InvalidateWindow+0x60>
 80279aa:	bf00      	nop
 80279ac:	200308d4 	.word	0x200308d4

080279b0 <WM_CreateWindowAsChild>:
 80279b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80279b4:	b087      	sub	sp, #28
 80279b6:	461e      	mov	r6, r3
 80279b8:	4680      	mov	r8, r0
 80279ba:	4689      	mov	r9, r1
 80279bc:	4615      	mov	r5, r2
 80279be:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80279c0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80279c2:	f7f9 fe7b 	bl	80216bc <GUI_Lock>
 80279c6:	4b6a      	ldr	r3, [pc, #424]	; (8027b70 <WM_CreateWindowAsChild+0x1c0>)
 80279c8:	f8d3 a000 	ldr.w	sl, [r3]
 80279cc:	b97f      	cbnz	r7, 80279ee <WM_CreateWindowAsChild+0x3e>
 80279ce:	4b69      	ldr	r3, [pc, #420]	; (8027b74 <WM_CreateWindowAsChild+0x1c4>)
 80279d0:	881b      	ldrh	r3, [r3, #0]
 80279d2:	2b00      	cmp	r3, #0
 80279d4:	d170      	bne.n	8027ab8 <WM_CreateWindowAsChild+0x108>
 80279d6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80279da:	f7f8 f9ff 	bl	801fddc <GUI_ALLOC_AllocZero>
 80279de:	4604      	mov	r4, r0
 80279e0:	bb28      	cbnz	r0, 8027a2e <WM_CreateWindowAsChild+0x7e>
 80279e2:	f7f9 fe61 	bl	80216a8 <GUI_Unlock>
 80279e6:	4620      	mov	r0, r4
 80279e8:	b007      	add	sp, #28
 80279ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80279ee:	1c7b      	adds	r3, r7, #1
 80279f0:	d06d      	beq.n	8027ace <WM_CreateWindowAsChild+0x11e>
 80279f2:	4638      	mov	r0, r7
 80279f4:	f7f7 ffd8 	bl	801f9a8 <GUI_ALLOC_LockH>
 80279f8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80279fc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8027a00:	9001      	str	r0, [sp, #4]
 8027a02:	4490      	add	r8, r2
 8027a04:	4499      	add	r9, r3
 8027a06:	b91d      	cbnz	r5, 8027a10 <WM_CreateWindowAsChild+0x60>
 8027a08:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8027a0c:	1aad      	subs	r5, r5, r2
 8027a0e:	3501      	adds	r5, #1
 8027a10:	b91e      	cbnz	r6, 8027a1a <WM_CreateWindowAsChild+0x6a>
 8027a12:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
 8027a16:	1af6      	subs	r6, r6, r3
 8027a18:	3601      	adds	r6, #1
 8027a1a:	a801      	add	r0, sp, #4
 8027a1c:	f7f7 ffd6 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027a20:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8027a24:	f7f8 f9da 	bl	801fddc <GUI_ALLOC_AllocZero>
 8027a28:	4604      	mov	r4, r0
 8027a2a:	2800      	cmp	r0, #0
 8027a2c:	d0d9      	beq.n	80279e2 <WM_CreateWindowAsChild+0x32>
 8027a2e:	4a51      	ldr	r2, [pc, #324]	; (8027b74 <WM_CreateWindowAsChild+0x1c4>)
 8027a30:	8813      	ldrh	r3, [r2, #0]
 8027a32:	3301      	adds	r3, #1
 8027a34:	8013      	strh	r3, [r2, #0]
 8027a36:	f7f7 ffb7 	bl	801f9a8 <GUI_ALLOC_LockH>
 8027a3a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8027a3c:	4b4e      	ldr	r3, [pc, #312]	; (8027b78 <WM_CreateWindowAsChild+0x1c8>)
 8027a3e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8027a40:	f10d 0b18 	add.w	fp, sp, #24
 8027a44:	ea4a 0a01 	orr.w	sl, sl, r1
 8027a48:	f84b 0d18 	str.w	r0, [fp, #-24]!
 8027a4c:	4445      	add	r5, r8
 8027a4e:	444e      	add	r6, r9
 8027a50:	ea0a 0303 	and.w	r3, sl, r3
 8027a54:	4313      	orrs	r3, r2
 8027a56:	3d01      	subs	r5, #1
 8027a58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027a5a:	6283      	str	r3, [r0, #40]	; 0x28
 8027a5c:	3e01      	subs	r6, #1
 8027a5e:	8085      	strh	r5, [r0, #4]
 8027a60:	80c6      	strh	r6, [r0, #6]
 8027a62:	6102      	str	r2, [r0, #16]
 8027a64:	f8a0 8000 	strh.w	r8, [r0]
 8027a68:	f8a0 9002 	strh.w	r9, [r0, #2]
 8027a6c:	4658      	mov	r0, fp
 8027a6e:	f7f7 ffad 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027a72:	4b42      	ldr	r3, [pc, #264]	; (8027b7c <WM_CreateWindowAsChild+0x1cc>)
 8027a74:	6818      	ldr	r0, [r3, #0]
 8027a76:	2800      	cmp	r0, #0
 8027a78:	d15b      	bne.n	8027b32 <WM_CreateWindowAsChild+0x182>
 8027a7a:	601c      	str	r4, [r3, #0]
 8027a7c:	4639      	mov	r1, r7
 8027a7e:	4620      	mov	r0, r4
 8027a80:	f7fe fff2 	bl	8026a68 <WM__InsertWindowIntoList>
 8027a84:	f01a 0f20 	tst.w	sl, #32
 8027a88:	d12f      	bne.n	8027aea <WM_CreateWindowAsChild+0x13a>
 8027a8a:	f01a 0f01 	tst.w	sl, #1
 8027a8e:	d120      	bne.n	8027ad2 <WM_CreateWindowAsChild+0x122>
 8027a90:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8027a94:	d125      	bne.n	8027ae2 <WM_CreateWindowAsChild+0x132>
 8027a96:	f01a 0f02 	tst.w	sl, #2
 8027a9a:	d158      	bne.n	8027b4e <WM_CreateWindowAsChild+0x19e>
 8027a9c:	a906      	add	r1, sp, #24
 8027a9e:	2301      	movs	r3, #1
 8027aa0:	4620      	mov	r0, r4
 8027aa2:	f841 3d10 	str.w	r3, [r1, #-16]!
 8027aa6:	9403      	str	r4, [sp, #12]
 8027aa8:	f002 fab8 	bl	802a01c <WM__SendMessage>
 8027aac:	f7f9 fdfc 	bl	80216a8 <GUI_Unlock>
 8027ab0:	4620      	mov	r0, r4
 8027ab2:	b007      	add	sp, #28
 8027ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027ab8:	4a31      	ldr	r2, [pc, #196]	; (8027b80 <WM_CreateWindowAsChild+0x1d0>)
 8027aba:	4b32      	ldr	r3, [pc, #200]	; (8027b84 <WM_CreateWindowAsChild+0x1d4>)
 8027abc:	6812      	ldr	r2, [r2, #0]
 8027abe:	7c52      	ldrb	r2, [r2, #17]
 8027ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8027ac4:	1c5a      	adds	r2, r3, #1
 8027ac6:	2a01      	cmp	r2, #1
 8027ac8:	d985      	bls.n	80279d6 <WM_CreateWindowAsChild+0x26>
 8027aca:	461f      	mov	r7, r3
 8027acc:	e791      	b.n	80279f2 <WM_CreateWindowAsChild+0x42>
 8027ace:	2700      	movs	r7, #0
 8027ad0:	e781      	b.n	80279d6 <WM_CreateWindowAsChild+0x26>
 8027ad2:	4a2d      	ldr	r2, [pc, #180]	; (8027b88 <WM_CreateWindowAsChild+0x1d8>)
 8027ad4:	6813      	ldr	r3, [r2, #0]
 8027ad6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8027ada:	f103 0301 	add.w	r3, r3, #1
 8027ade:	6013      	str	r3, [r2, #0]
 8027ae0:	d0d9      	beq.n	8027a96 <WM_CreateWindowAsChild+0xe6>
 8027ae2:	4620      	mov	r0, r4
 8027ae4:	f001 f8be 	bl	8028c64 <WM_BringToBottom>
 8027ae8:	e7d5      	b.n	8027a96 <WM_CreateWindowAsChild+0xe6>
 8027aea:	4e25      	ldr	r6, [pc, #148]	; (8027b80 <WM_CreateWindowAsChild+0x1d0>)
 8027aec:	f7f9 fde6 	bl	80216bc <GUI_Lock>
 8027af0:	6833      	ldr	r3, [r6, #0]
 8027af2:	4625      	mov	r5, r4
 8027af4:	649c      	str	r4, [r3, #72]	; 0x48
 8027af6:	e000      	b.n	8027afa <WM_CreateWindowAsChild+0x14a>
 8027af8:	4605      	mov	r5, r0
 8027afa:	4628      	mov	r0, r5
 8027afc:	f7f7 ff4a 	bl	801f994 <GUI_ALLOC_h2p>
 8027b00:	6980      	ldr	r0, [r0, #24]
 8027b02:	2800      	cmp	r0, #0
 8027b04:	d1f8      	bne.n	8027af8 <WM_CreateWindowAsChild+0x148>
 8027b06:	4b1f      	ldr	r3, [pc, #124]	; (8027b84 <WM_CreateWindowAsChild+0x1d4>)
 8027b08:	681a      	ldr	r2, [r3, #0]
 8027b0a:	4295      	cmp	r5, r2
 8027b0c:	d01c      	beq.n	8027b48 <WM_CreateWindowAsChild+0x198>
 8027b0e:	685b      	ldr	r3, [r3, #4]
 8027b10:	429d      	cmp	r5, r3
 8027b12:	d018      	beq.n	8027b46 <WM_CreateWindowAsChild+0x196>
 8027b14:	f7fb fa1a 	bl	8022f4c <LCD_SetClipRectMax>
 8027b18:	4620      	mov	r0, r4
 8027b1a:	f7f7 ff3b 	bl	801f994 <GUI_ALLOC_h2p>
 8027b1e:	6833      	ldr	r3, [r6, #0]
 8027b20:	f9b0 1000 	ldrsh.w	r1, [r0]
 8027b24:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8027b28:	651a      	str	r2, [r3, #80]	; 0x50
 8027b2a:	64d9      	str	r1, [r3, #76]	; 0x4c
 8027b2c:	f7f9 fdbc 	bl	80216a8 <GUI_Unlock>
 8027b30:	e7ab      	b.n	8027a8a <WM_CreateWindowAsChild+0xda>
 8027b32:	f7f7 ff2f 	bl	801f994 <GUI_ALLOC_h2p>
 8027b36:	4605      	mov	r5, r0
 8027b38:	4620      	mov	r0, r4
 8027b3a:	f7f7 ff2b 	bl	801f994 <GUI_ALLOC_h2p>
 8027b3e:	696b      	ldr	r3, [r5, #20]
 8027b40:	6143      	str	r3, [r0, #20]
 8027b42:	616c      	str	r4, [r5, #20]
 8027b44:	e79a      	b.n	8027a7c <WM_CreateWindowAsChild+0xcc>
 8027b46:	2001      	movs	r0, #1
 8027b48:	f7f9 fd4a 	bl	80215e0 <GUI_SelectLayer>
 8027b4c:	e7e2      	b.n	8027b14 <WM_CreateWindowAsChild+0x164>
 8027b4e:	4620      	mov	r0, r4
 8027b50:	f7f7 ff2a 	bl	801f9a8 <GUI_ALLOC_LockH>
 8027b54:	4603      	mov	r3, r0
 8027b56:	4658      	mov	r0, fp
 8027b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8027b5a:	9300      	str	r3, [sp, #0]
 8027b5c:	f042 0202 	orr.w	r2, r2, #2
 8027b60:	629a      	str	r2, [r3, #40]	; 0x28
 8027b62:	f7f7 ff33 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027b66:	2100      	movs	r1, #0
 8027b68:	4620      	mov	r0, r4
 8027b6a:	f7ff fb91 	bl	8027290 <WM_InvalidateRect.part.2>
 8027b6e:	e795      	b.n	8027a9c <WM_CreateWindowAsChild+0xec>
 8027b70:	20030904 	.word	0x20030904
 8027b74:	200308cc 	.word	0x200308cc
 8027b78:	003f3f9f 	.word	0x003f3f9f
 8027b7c:	200308f0 	.word	0x200308f0
 8027b80:	200000e8 	.word	0x200000e8
 8027b84:	200308d4 	.word	0x200308d4
 8027b88:	20030924 	.word	0x20030924

08027b8c <WM_CreateWindow>:
 8027b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027b90:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8027d5c <WM_CreateWindow+0x1d0>
 8027b94:	b087      	sub	sp, #28
 8027b96:	461d      	mov	r5, r3
 8027b98:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8027b9a:	4682      	mov	sl, r0
 8027b9c:	4689      	mov	r9, r1
 8027b9e:	4616      	mov	r6, r2
 8027ba0:	f7f9 fd8c 	bl	80216bc <GUI_Lock>
 8027ba4:	4b67      	ldr	r3, [pc, #412]	; (8027d44 <WM_CreateWindow+0x1b8>)
 8027ba6:	f8b8 4000 	ldrh.w	r4, [r8]
 8027baa:	f8d3 b000 	ldr.w	fp, [r3]
 8027bae:	b14c      	cbz	r4, 8027bc4 <WM_CreateWindow+0x38>
 8027bb0:	4a65      	ldr	r2, [pc, #404]	; (8027d48 <WM_CreateWindow+0x1bc>)
 8027bb2:	4b66      	ldr	r3, [pc, #408]	; (8027d4c <WM_CreateWindow+0x1c0>)
 8027bb4:	6812      	ldr	r2, [r2, #0]
 8027bb6:	7c52      	ldrb	r2, [r2, #17]
 8027bb8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8027bbc:	1c63      	adds	r3, r4, #1
 8027bbe:	2b01      	cmp	r3, #1
 8027bc0:	d80c      	bhi.n	8027bdc <WM_CreateWindow+0x50>
 8027bc2:	2400      	movs	r4, #0
 8027bc4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8027bc8:	f7f8 f908 	bl	801fddc <GUI_ALLOC_AllocZero>
 8027bcc:	4607      	mov	r7, r0
 8027bce:	bb18      	cbnz	r0, 8027c18 <WM_CreateWindow+0x8c>
 8027bd0:	f7f9 fd6a 	bl	80216a8 <GUI_Unlock>
 8027bd4:	4638      	mov	r0, r7
 8027bd6:	b007      	add	sp, #28
 8027bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027bdc:	4620      	mov	r0, r4
 8027bde:	f7f7 fee3 	bl	801f9a8 <GUI_ALLOC_LockH>
 8027be2:	f9b0 2000 	ldrsh.w	r2, [r0]
 8027be6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8027bea:	9001      	str	r0, [sp, #4]
 8027bec:	4492      	add	sl, r2
 8027bee:	4499      	add	r9, r3
 8027bf0:	b91e      	cbnz	r6, 8027bfa <WM_CreateWindow+0x6e>
 8027bf2:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8027bf6:	1ab6      	subs	r6, r6, r2
 8027bf8:	3601      	adds	r6, #1
 8027bfa:	b91d      	cbnz	r5, 8027c04 <WM_CreateWindow+0x78>
 8027bfc:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 8027c00:	1aed      	subs	r5, r5, r3
 8027c02:	3501      	adds	r5, #1
 8027c04:	a801      	add	r0, sp, #4
 8027c06:	f7f7 fee1 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027c0a:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8027c0e:	f7f8 f8e5 	bl	801fddc <GUI_ALLOC_AllocZero>
 8027c12:	4607      	mov	r7, r0
 8027c14:	2800      	cmp	r0, #0
 8027c16:	d0db      	beq.n	8027bd0 <WM_CreateWindow+0x44>
 8027c18:	f8b8 3000 	ldrh.w	r3, [r8]
 8027c1c:	3301      	adds	r3, #1
 8027c1e:	f8a8 3000 	strh.w	r3, [r8]
 8027c22:	f7f7 fec1 	bl	801f9a8 <GUI_ALLOC_LockH>
 8027c26:	9910      	ldr	r1, [sp, #64]	; 0x40
 8027c28:	4a49      	ldr	r2, [pc, #292]	; (8027d50 <WM_CreateWindow+0x1c4>)
 8027c2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8027c2c:	f10d 0818 	add.w	r8, sp, #24
 8027c30:	ea41 0b0b 	orr.w	fp, r1, fp
 8027c34:	f848 0d18 	str.w	r0, [r8, #-24]!
 8027c38:	ea0b 0202 	and.w	r2, fp, r2
 8027c3c:	4456      	add	r6, sl
 8027c3e:	444d      	add	r5, r9
 8027c40:	4313      	orrs	r3, r2
 8027c42:	3e01      	subs	r6, #1
 8027c44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027c46:	6283      	str	r3, [r0, #40]	; 0x28
 8027c48:	3d01      	subs	r5, #1
 8027c4a:	8086      	strh	r6, [r0, #4]
 8027c4c:	80c5      	strh	r5, [r0, #6]
 8027c4e:	6102      	str	r2, [r0, #16]
 8027c50:	f8a0 a000 	strh.w	sl, [r0]
 8027c54:	f8a0 9002 	strh.w	r9, [r0, #2]
 8027c58:	4640      	mov	r0, r8
 8027c5a:	f7f7 feb7 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027c5e:	4b3d      	ldr	r3, [pc, #244]	; (8027d54 <WM_CreateWindow+0x1c8>)
 8027c60:	6818      	ldr	r0, [r3, #0]
 8027c62:	2800      	cmp	r0, #0
 8027c64:	d14e      	bne.n	8027d04 <WM_CreateWindow+0x178>
 8027c66:	601f      	str	r7, [r3, #0]
 8027c68:	4621      	mov	r1, r4
 8027c6a:	4638      	mov	r0, r7
 8027c6c:	f7fe fefc 	bl	8026a68 <WM__InsertWindowIntoList>
 8027c70:	f01b 0f20 	tst.w	fp, #32
 8027c74:	d122      	bne.n	8027cbc <WM_CreateWindow+0x130>
 8027c76:	f01b 0f01 	tst.w	fp, #1
 8027c7a:	d113      	bne.n	8027ca4 <WM_CreateWindow+0x118>
 8027c7c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8027c80:	d118      	bne.n	8027cb4 <WM_CreateWindow+0x128>
 8027c82:	f01b 0f02 	tst.w	fp, #2
 8027c86:	d14b      	bne.n	8027d20 <WM_CreateWindow+0x194>
 8027c88:	a906      	add	r1, sp, #24
 8027c8a:	2301      	movs	r3, #1
 8027c8c:	4638      	mov	r0, r7
 8027c8e:	f841 3d10 	str.w	r3, [r1, #-16]!
 8027c92:	9703      	str	r7, [sp, #12]
 8027c94:	f002 f9c2 	bl	802a01c <WM__SendMessage>
 8027c98:	f7f9 fd06 	bl	80216a8 <GUI_Unlock>
 8027c9c:	4638      	mov	r0, r7
 8027c9e:	b007      	add	sp, #28
 8027ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027ca4:	4a2c      	ldr	r2, [pc, #176]	; (8027d58 <WM_CreateWindow+0x1cc>)
 8027ca6:	6813      	ldr	r3, [r2, #0]
 8027ca8:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8027cac:	f103 0301 	add.w	r3, r3, #1
 8027cb0:	6013      	str	r3, [r2, #0]
 8027cb2:	d0e6      	beq.n	8027c82 <WM_CreateWindow+0xf6>
 8027cb4:	4638      	mov	r0, r7
 8027cb6:	f000 ffd5 	bl	8028c64 <WM_BringToBottom>
 8027cba:	e7e2      	b.n	8027c82 <WM_CreateWindow+0xf6>
 8027cbc:	4d22      	ldr	r5, [pc, #136]	; (8027d48 <WM_CreateWindow+0x1bc>)
 8027cbe:	f7f9 fcfd 	bl	80216bc <GUI_Lock>
 8027cc2:	682b      	ldr	r3, [r5, #0]
 8027cc4:	463c      	mov	r4, r7
 8027cc6:	649f      	str	r7, [r3, #72]	; 0x48
 8027cc8:	e000      	b.n	8027ccc <WM_CreateWindow+0x140>
 8027cca:	4604      	mov	r4, r0
 8027ccc:	4620      	mov	r0, r4
 8027cce:	f7f7 fe61 	bl	801f994 <GUI_ALLOC_h2p>
 8027cd2:	6980      	ldr	r0, [r0, #24]
 8027cd4:	2800      	cmp	r0, #0
 8027cd6:	d1f8      	bne.n	8027cca <WM_CreateWindow+0x13e>
 8027cd8:	4b1c      	ldr	r3, [pc, #112]	; (8027d4c <WM_CreateWindow+0x1c0>)
 8027cda:	681a      	ldr	r2, [r3, #0]
 8027cdc:	4294      	cmp	r4, r2
 8027cde:	d01c      	beq.n	8027d1a <WM_CreateWindow+0x18e>
 8027ce0:	685b      	ldr	r3, [r3, #4]
 8027ce2:	429c      	cmp	r4, r3
 8027ce4:	d018      	beq.n	8027d18 <WM_CreateWindow+0x18c>
 8027ce6:	f7fb f931 	bl	8022f4c <LCD_SetClipRectMax>
 8027cea:	4638      	mov	r0, r7
 8027cec:	f7f7 fe52 	bl	801f994 <GUI_ALLOC_h2p>
 8027cf0:	682b      	ldr	r3, [r5, #0]
 8027cf2:	f9b0 1000 	ldrsh.w	r1, [r0]
 8027cf6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8027cfa:	651a      	str	r2, [r3, #80]	; 0x50
 8027cfc:	64d9      	str	r1, [r3, #76]	; 0x4c
 8027cfe:	f7f9 fcd3 	bl	80216a8 <GUI_Unlock>
 8027d02:	e7b8      	b.n	8027c76 <WM_CreateWindow+0xea>
 8027d04:	f7f7 fe46 	bl	801f994 <GUI_ALLOC_h2p>
 8027d08:	4605      	mov	r5, r0
 8027d0a:	4638      	mov	r0, r7
 8027d0c:	f7f7 fe42 	bl	801f994 <GUI_ALLOC_h2p>
 8027d10:	696b      	ldr	r3, [r5, #20]
 8027d12:	6143      	str	r3, [r0, #20]
 8027d14:	616f      	str	r7, [r5, #20]
 8027d16:	e7a7      	b.n	8027c68 <WM_CreateWindow+0xdc>
 8027d18:	2001      	movs	r0, #1
 8027d1a:	f7f9 fc61 	bl	80215e0 <GUI_SelectLayer>
 8027d1e:	e7e2      	b.n	8027ce6 <WM_CreateWindow+0x15a>
 8027d20:	4638      	mov	r0, r7
 8027d22:	f7f7 fe41 	bl	801f9a8 <GUI_ALLOC_LockH>
 8027d26:	4603      	mov	r3, r0
 8027d28:	4640      	mov	r0, r8
 8027d2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8027d2c:	9300      	str	r3, [sp, #0]
 8027d2e:	f042 0202 	orr.w	r2, r2, #2
 8027d32:	629a      	str	r2, [r3, #40]	; 0x28
 8027d34:	f7f7 fe4a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027d38:	2100      	movs	r1, #0
 8027d3a:	4638      	mov	r0, r7
 8027d3c:	f7ff faa8 	bl	8027290 <WM_InvalidateRect.part.2>
 8027d40:	e7a2      	b.n	8027c88 <WM_CreateWindow+0xfc>
 8027d42:	bf00      	nop
 8027d44:	20030904 	.word	0x20030904
 8027d48:	200000e8 	.word	0x200000e8
 8027d4c:	200308d4 	.word	0x200308d4
 8027d50:	003f3f9f 	.word	0x003f3f9f
 8027d54:	200308f0 	.word	0x200308f0
 8027d58:	20030924 	.word	0x20030924
 8027d5c:	200308cc 	.word	0x200308cc

08027d60 <WM_DeleteWindow>:
 8027d60:	b900      	cbnz	r0, 8027d64 <WM_DeleteWindow+0x4>
 8027d62:	4770      	bx	lr
 8027d64:	f7ff bb5a 	b.w	802741c <WM_DeleteWindow.part.3>

08027d68 <WM__GetTopLevelLayer>:
 8027d68:	b510      	push	{r4, lr}
 8027d6a:	4604      	mov	r4, r0
 8027d6c:	e000      	b.n	8027d70 <WM__GetTopLevelLayer+0x8>
 8027d6e:	461c      	mov	r4, r3
 8027d70:	4620      	mov	r0, r4
 8027d72:	f7f7 fe0f 	bl	801f994 <GUI_ALLOC_h2p>
 8027d76:	6983      	ldr	r3, [r0, #24]
 8027d78:	2b00      	cmp	r3, #0
 8027d7a:	d1f8      	bne.n	8027d6e <WM__GetTopLevelLayer+0x6>
 8027d7c:	4a06      	ldr	r2, [pc, #24]	; (8027d98 <WM__GetTopLevelLayer+0x30>)
 8027d7e:	6811      	ldr	r1, [r2, #0]
 8027d80:	428c      	cmp	r4, r1
 8027d82:	d006      	beq.n	8027d92 <WM__GetTopLevelLayer+0x2a>
 8027d84:	6853      	ldr	r3, [r2, #4]
 8027d86:	429c      	cmp	r4, r3
 8027d88:	bf0c      	ite	eq
 8027d8a:	2001      	moveq	r0, #1
 8027d8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8027d90:	bd10      	pop	{r4, pc}
 8027d92:	4618      	mov	r0, r3
 8027d94:	bd10      	pop	{r4, pc}
 8027d96:	bf00      	nop
 8027d98:	200308d4 	.word	0x200308d4

08027d9c <WM_GetActiveWindow>:
 8027d9c:	4b01      	ldr	r3, [pc, #4]	; (8027da4 <WM_GetActiveWindow+0x8>)
 8027d9e:	681b      	ldr	r3, [r3, #0]
 8027da0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8027da2:	4770      	bx	lr
 8027da4:	200000e8 	.word	0x200000e8

08027da8 <WM__GetNextIVR>:
 8027da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027dac:	f8df 8240 	ldr.w	r8, [pc, #576]	; 8027ff0 <WM__GetNextIVR+0x248>
 8027db0:	f8d8 3000 	ldr.w	r3, [r8]
 8027db4:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8027db8:	b087      	sub	sp, #28
 8027dba:	b130      	cbz	r0, 8027dca <WM__GetNextIVR+0x22>
 8027dbc:	4e8b      	ldr	r6, [pc, #556]	; (8027fec <WM__GetNextIVR+0x244>)
 8027dbe:	6a33      	ldr	r3, [r6, #32]
 8027dc0:	2b01      	cmp	r3, #1
 8027dc2:	dd05      	ble.n	8027dd0 <WM__GetNextIVR+0x28>
 8027dc4:	3b01      	subs	r3, #1
 8027dc6:	6233      	str	r3, [r6, #32]
 8027dc8:	2000      	movs	r0, #0
 8027dca:	b007      	add	sp, #28
 8027dcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027dd0:	f106 0714 	add.w	r7, r6, #20
 8027dd4:	69f3      	ldr	r3, [r6, #28]
 8027dd6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8027dda:	ad02      	add	r5, sp, #8
 8027ddc:	3301      	adds	r3, #1
 8027dde:	e885 0003 	stmia.w	r5, {r0, r1}
 8027de2:	61f3      	str	r3, [r6, #28]
 8027de4:	b953      	cbnz	r3, 8027dfc <WM__GetNextIVR+0x54>
 8027de6:	68f3      	ldr	r3, [r6, #12]
 8027de8:	9302      	str	r3, [sp, #8]
 8027dea:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 8027dee:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
 8027df2:	4c7e      	ldr	r4, [pc, #504]	; (8027fec <WM__GetNextIVR+0x244>)
 8027df4:	429a      	cmp	r2, r3
 8027df6:	da17      	bge.n	8027e28 <WM__GetNextIVR+0x80>
 8027df8:	6a33      	ldr	r3, [r6, #32]
 8027dfa:	e7e3      	b.n	8027dc4 <WM__GetNextIVR+0x1c>
 8027dfc:	8b32      	ldrh	r2, [r6, #24]
 8027dfe:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 8027e02:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
 8027e06:	f8ad 300a 	strh.w	r3, [sp, #10]
 8027e0a:	3201      	adds	r2, #1
 8027e0c:	b212      	sxth	r2, r2
 8027e0e:	4291      	cmp	r1, r2
 8027e10:	f8ad 2008 	strh.w	r2, [sp, #8]
 8027e14:	daeb      	bge.n	8027dee <WM__GetNextIVR+0x46>
 8027e16:	8b73      	ldrh	r3, [r6, #26]
 8027e18:	89b2      	ldrh	r2, [r6, #12]
 8027e1a:	f8ad 2008 	strh.w	r2, [sp, #8]
 8027e1e:	3301      	adds	r3, #1
 8027e20:	b21b      	sxth	r3, r3
 8027e22:	f8ad 300a 	strh.w	r3, [sp, #10]
 8027e26:	e7e2      	b.n	8027dee <WM__GetNextIVR+0x46>
 8027e28:	f8d8 3000 	ldr.w	r3, [r8]
 8027e2c:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8027ff0 <WM__GetNextIVR+0x248>
 8027e30:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8027e32:	f7f7 fdb9 	bl	801f9a8 <GUI_ALLOC_LockH>
 8027e36:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8027e3a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8027e3e:	9000      	str	r0, [sp, #0]
 8027e40:	4299      	cmp	r1, r3
 8027e42:	4602      	mov	r2, r0
 8027e44:	f000 80b9 	beq.w	8027fba <WM__GetNextIVR+0x212>
 8027e48:	f8d8 2000 	ldr.w	r2, [r8]
 8027e4c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8027e50:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8027e52:	b910      	cbnz	r0, 8027e5a <WM__GetNextIVR+0xb2>
 8027e54:	e00d      	b.n	8027e72 <WM__GetNextIVR+0xca>
 8027e56:	69a0      	ldr	r0, [r4, #24]
 8027e58:	b158      	cbz	r0, 8027e72 <WM__GetNextIVR+0xca>
 8027e5a:	f7f7 fd9b 	bl	801f994 <GUI_ALLOC_h2p>
 8027e5e:	4629      	mov	r1, r5
 8027e60:	4604      	mov	r4, r0
 8027e62:	6a00      	ldr	r0, [r0, #32]
 8027e64:	f7fe fbd4 	bl	8026610 <_Findx0.constprop.10>
 8027e68:	2800      	cmp	r0, #0
 8027e6a:	d0f4      	beq.n	8027e56 <WM__GetNextIVR+0xae>
 8027e6c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8027e70:	e7ea      	b.n	8027e48 <WM__GetNextIVR+0xa0>
 8027e72:	9b00      	ldr	r3, [sp, #0]
 8027e74:	4629      	mov	r1, r5
 8027e76:	69d8      	ldr	r0, [r3, #28]
 8027e78:	f7fe fbca 	bl	8026610 <_Findx0.constprop.10>
 8027e7c:	2800      	cmp	r0, #0
 8027e7e:	d1f5      	bne.n	8027e6c <WM__GetNextIVR+0xc4>
 8027e80:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 8027e84:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8027e88:	f8ad 300c 	strh.w	r3, [sp, #12]
 8027e8c:	429a      	cmp	r2, r3
 8027e8e:	f300 808c 	bgt.w	8027faa <WM__GetNextIVR+0x202>
 8027e92:	f8d8 3000 	ldr.w	r3, [r8]
 8027e96:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8027e98:	f10d 0810 	add.w	r8, sp, #16
 8027e9c:	b368      	cbz	r0, 8027efa <WM__GetNextIVR+0x152>
 8027e9e:	f7f7 fd79 	bl	801f994 <GUI_ALLOC_h2p>
 8027ea2:	6a04      	ldr	r4, [r0, #32]
 8027ea4:	4681      	mov	r9, r0
 8027ea6:	b96c      	cbnz	r4, 8027ec4 <WM__GetNextIVR+0x11c>
 8027ea8:	e023      	b.n	8027ef2 <WM__GetNextIVR+0x14a>
 8027eaa:	07e1      	lsls	r1, r4, #31
 8027eac:	d44b      	bmi.n	8027f46 <WM__GetNextIVR+0x19e>
 8027eae:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8027eb2:	9801      	ldr	r0, [sp, #4]
 8027eb4:	3b01      	subs	r3, #1
 8027eb6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8027eba:	6a04      	ldr	r4, [r0, #32]
 8027ebc:	a801      	add	r0, sp, #4
 8027ebe:	f7f7 fd85 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027ec2:	b1b4      	cbz	r4, 8027ef2 <WM__GetNextIVR+0x14a>
 8027ec4:	4620      	mov	r0, r4
 8027ec6:	f7f7 fd6f 	bl	801f9a8 <GUI_ALLOC_LockH>
 8027eca:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8027ecc:	9001      	str	r0, [sp, #4]
 8027ece:	07a3      	lsls	r3, r4, #30
 8027ed0:	d5f3      	bpl.n	8027eba <WM__GetNextIVR+0x112>
 8027ed2:	c803      	ldmia	r0, {r0, r1}
 8027ed4:	e888 0003 	stmia.w	r8, {r0, r1}
 8027ed8:	4641      	mov	r1, r8
 8027eda:	4628      	mov	r0, r5
 8027edc:	f7f8 f9ee 	bl	80202bc <GUI_RectsIntersect>
 8027ee0:	2800      	cmp	r0, #0
 8027ee2:	d1e2      	bne.n	8027eaa <WM__GetNextIVR+0x102>
 8027ee4:	9801      	ldr	r0, [sp, #4]
 8027ee6:	6a04      	ldr	r4, [r0, #32]
 8027ee8:	a801      	add	r0, sp, #4
 8027eea:	f7f7 fd6f 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027eee:	2c00      	cmp	r4, #0
 8027ef0:	d1e8      	bne.n	8027ec4 <WM__GetNextIVR+0x11c>
 8027ef2:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8027ef6:	2800      	cmp	r0, #0
 8027ef8:	d1d1      	bne.n	8027e9e <WM__GetNextIVR+0xf6>
 8027efa:	9b00      	ldr	r3, [sp, #0]
 8027efc:	69dc      	ldr	r4, [r3, #28]
 8027efe:	f10d 0810 	add.w	r8, sp, #16
 8027f02:	b974      	cbnz	r4, 8027f22 <WM__GetNextIVR+0x17a>
 8027f04:	e040      	b.n	8027f88 <WM__GetNextIVR+0x1e0>
 8027f06:	07e3      	lsls	r3, r4, #31
 8027f08:	d42e      	bmi.n	8027f68 <WM__GetNextIVR+0x1c0>
 8027f0a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8027f0e:	9801      	ldr	r0, [sp, #4]
 8027f10:	3b01      	subs	r3, #1
 8027f12:	f8ad 300c 	strh.w	r3, [sp, #12]
 8027f16:	6a04      	ldr	r4, [r0, #32]
 8027f18:	a801      	add	r0, sp, #4
 8027f1a:	f7f7 fd57 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027f1e:	2c00      	cmp	r4, #0
 8027f20:	d032      	beq.n	8027f88 <WM__GetNextIVR+0x1e0>
 8027f22:	4620      	mov	r0, r4
 8027f24:	f7f7 fd40 	bl	801f9a8 <GUI_ALLOC_LockH>
 8027f28:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8027f2a:	9001      	str	r0, [sp, #4]
 8027f2c:	07a2      	lsls	r2, r4, #30
 8027f2e:	d5f2      	bpl.n	8027f16 <WM__GetNextIVR+0x16e>
 8027f30:	c803      	ldmia	r0, {r0, r1}
 8027f32:	e888 0003 	stmia.w	r8, {r0, r1}
 8027f36:	4641      	mov	r1, r8
 8027f38:	4628      	mov	r0, r5
 8027f3a:	f7f8 f9bf 	bl	80202bc <GUI_RectsIntersect>
 8027f3e:	2800      	cmp	r0, #0
 8027f40:	d1e1      	bne.n	8027f06 <WM__GetNextIVR+0x15e>
 8027f42:	9801      	ldr	r0, [sp, #4]
 8027f44:	e7e7      	b.n	8027f16 <WM__GetNextIVR+0x16e>
 8027f46:	9801      	ldr	r0, [sp, #4]
 8027f48:	69c4      	ldr	r4, [r0, #28]
 8027f4a:	2c00      	cmp	r4, #0
 8027f4c:	d0b5      	beq.n	8027eba <WM__GetNextIVR+0x112>
 8027f4e:	4620      	mov	r0, r4
 8027f50:	4642      	mov	r2, r8
 8027f52:	4629      	mov	r1, r5
 8027f54:	f7fe fa4a 	bl	80263ec <_Findx1>
 8027f58:	4620      	mov	r0, r4
 8027f5a:	f7f7 fd1b 	bl	801f994 <GUI_ALLOC_h2p>
 8027f5e:	6a04      	ldr	r4, [r0, #32]
 8027f60:	2c00      	cmp	r4, #0
 8027f62:	d1f4      	bne.n	8027f4e <WM__GetNextIVR+0x1a6>
 8027f64:	9801      	ldr	r0, [sp, #4]
 8027f66:	e7be      	b.n	8027ee6 <WM__GetNextIVR+0x13e>
 8027f68:	9801      	ldr	r0, [sp, #4]
 8027f6a:	69c4      	ldr	r4, [r0, #28]
 8027f6c:	2c00      	cmp	r4, #0
 8027f6e:	d0d2      	beq.n	8027f16 <WM__GetNextIVR+0x16e>
 8027f70:	4620      	mov	r0, r4
 8027f72:	4642      	mov	r2, r8
 8027f74:	4629      	mov	r1, r5
 8027f76:	f7fe fa39 	bl	80263ec <_Findx1>
 8027f7a:	4620      	mov	r0, r4
 8027f7c:	f7f7 fd0a 	bl	801f994 <GUI_ALLOC_h2p>
 8027f80:	6a04      	ldr	r4, [r0, #32]
 8027f82:	2c00      	cmp	r4, #0
 8027f84:	d1f4      	bne.n	8027f70 <WM__GetNextIVR+0x1c8>
 8027f86:	e7dc      	b.n	8027f42 <WM__GetNextIVR+0x19a>
 8027f88:	4668      	mov	r0, sp
 8027f8a:	f7f7 fd1f 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027f8e:	69f2      	ldr	r2, [r6, #28]
 8027f90:	f644 6320 	movw	r3, #20000	; 0x4e20
 8027f94:	429a      	cmp	r2, r3
 8027f96:	f73f af2f 	bgt.w	8027df8 <WM__GetNextIVR+0x50>
 8027f9a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027f9e:	e887 0003 	stmia.w	r7, {r0, r1}
 8027fa2:	f7fe fccd 	bl	8026940 <WM__ActivateClipRect>
 8027fa6:	2001      	movs	r0, #1
 8027fa8:	e70f      	b.n	8027dca <WM__GetNextIVR+0x22>
 8027faa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8027fae:	e887 0003 	stmia.w	r7, {r0, r1}
 8027fb2:	4668      	mov	r0, sp
 8027fb4:	f7f7 fd0a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8027fb8:	e72d      	b.n	8027e16 <WM__GetNextIVR+0x6e>
 8027fba:	f8d9 1000 	ldr.w	r1, [r9]
 8027fbe:	6923      	ldr	r3, [r4, #16]
 8027fc0:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8027fc2:	9303      	str	r3, [sp, #12]
 8027fc4:	b150      	cbz	r0, 8027fdc <WM__GetNextIVR+0x234>
 8027fc6:	f7f7 fce5 	bl	801f994 <GUI_ALLOC_h2p>
 8027fca:	4604      	mov	r4, r0
 8027fcc:	4629      	mov	r1, r5
 8027fce:	6a00      	ldr	r0, [r0, #32]
 8027fd0:	f7fe fb64 	bl	802669c <_Findy1.constprop.11>
 8027fd4:	69a0      	ldr	r0, [r4, #24]
 8027fd6:	2800      	cmp	r0, #0
 8027fd8:	d1f5      	bne.n	8027fc6 <WM__GetNextIVR+0x21e>
 8027fda:	9a00      	ldr	r2, [sp, #0]
 8027fdc:	69d0      	ldr	r0, [r2, #28]
 8027fde:	4629      	mov	r1, r5
 8027fe0:	f7fe fb5c 	bl	802669c <_Findy1.constprop.11>
 8027fe4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8027fe8:	e72e      	b.n	8027e48 <WM__GetNextIVR+0xa0>
 8027fea:	bf00      	nop
 8027fec:	2002e3dc 	.word	0x2002e3dc
 8027ff0:	200000e8 	.word	0x200000e8

08027ff4 <WM__InitIVRSearch>:
 8027ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027ff8:	4c5e      	ldr	r4, [pc, #376]	; (8028174 <WM__InitIVRSearch+0x180>)
 8027ffa:	6822      	ldr	r2, [r4, #0]
 8027ffc:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 8028000:	b089      	sub	sp, #36	; 0x24
 8028002:	b14b      	cbz	r3, 8028018 <WM__InitIVRSearch+0x24>
 8028004:	4d5c      	ldr	r5, [pc, #368]	; (8028178 <WM__InitIVRSearch+0x184>)
 8028006:	6a2b      	ldr	r3, [r5, #32]
 8028008:	3301      	adds	r3, #1
 802800a:	2b01      	cmp	r3, #1
 802800c:	622b      	str	r3, [r5, #32]
 802800e:	dd09      	ble.n	8028024 <WM__InitIVRSearch+0x30>
 8028010:	2001      	movs	r0, #1
 8028012:	b009      	add	sp, #36	; 0x24
 8028014:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028018:	f7fe fc92 	bl	8026940 <WM__ActivateClipRect>
 802801c:	2001      	movs	r0, #1
 802801e:	b009      	add	sp, #36	; 0x24
 8028020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028024:	4607      	mov	r7, r0
 8028026:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8028028:	f7f7 fcbe 	bl	801f9a8 <GUI_ALLOC_LockH>
 802802c:	4b53      	ldr	r3, [pc, #332]	; (802817c <WM__InitIVRSearch+0x188>)
 802802e:	9001      	str	r0, [sp, #4]
 8028030:	781b      	ldrb	r3, [r3, #0]
 8028032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8028036:	61ea      	str	r2, [r5, #28]
 8028038:	2b00      	cmp	r3, #0
 802803a:	d061      	beq.n	8028100 <WM__InitIVRSearch+0x10c>
 802803c:	3008      	adds	r0, #8
 802803e:	c803      	ldmia	r0, {r0, r1}
 8028040:	ae04      	add	r6, sp, #16
 8028042:	e886 0003 	stmia.w	r6, {r0, r1}
 8028046:	b11f      	cbz	r7, 8028050 <WM__InitIVRSearch+0x5c>
 8028048:	4639      	mov	r1, r7
 802804a:	4630      	mov	r0, r6
 802804c:	f7fa f918 	bl	8022280 <GUI__IntersectRect>
 8028050:	6823      	ldr	r3, [r4, #0]
 8028052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8028054:	2b00      	cmp	r3, #0
 8028056:	f000 8087 	beq.w	8028168 <WM__InitIVRSearch+0x174>
 802805a:	4f49      	ldr	r7, [pc, #292]	; (8028180 <WM__InitIVRSearch+0x18c>)
 802805c:	6818      	ldr	r0, [r3, #0]
 802805e:	6859      	ldr	r1, [r3, #4]
 8028060:	683a      	ldr	r2, [r7, #0]
 8028062:	ab06      	add	r3, sp, #24
 8028064:	c303      	stmia	r3!, {r0, r1}
 8028066:	9801      	ldr	r0, [sp, #4]
 8028068:	9002      	str	r0, [sp, #8]
 802806a:	f10d 0808 	add.w	r8, sp, #8
 802806e:	2a00      	cmp	r2, #0
 8028070:	d160      	bne.n	8028134 <WM__InitIVRSearch+0x140>
 8028072:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8028076:	f9b0 1000 	ldrsh.w	r1, [r0]
 802807a:	a806      	add	r0, sp, #24
 802807c:	f7f8 f86c 	bl	8020158 <GUI_MoveRect>
 8028080:	4630      	mov	r0, r6
 8028082:	a906      	add	r1, sp, #24
 8028084:	f7fa f8fc 	bl	8022280 <GUI__IntersectRect>
 8028088:	4640      	mov	r0, r8
 802808a:	f7f7 fc9f 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802808e:	f8d7 9000 	ldr.w	r9, [r7]
 8028092:	f10d 080c 	add.w	r8, sp, #12
 8028096:	f1b9 0f00 	cmp.w	r9, #0
 802809a:	d126      	bne.n	80280ea <WM__InitIVRSearch+0xf6>
 802809c:	6823      	ldr	r3, [r4, #0]
 802809e:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 80280a0:	e008      	b.n	80280b4 <WM__InitIVRSearch+0xc0>
 80280a2:	f7fa f8ed 	bl	8022280 <GUI__IntersectRect>
 80280a6:	9b03      	ldr	r3, [sp, #12]
 80280a8:	699c      	ldr	r4, [r3, #24]
 80280aa:	4640      	mov	r0, r8
 80280ac:	b38c      	cbz	r4, 8028112 <WM__InitIVRSearch+0x11e>
 80280ae:	f7f7 fc8d 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80280b2:	4627      	mov	r7, r4
 80280b4:	4638      	mov	r0, r7
 80280b6:	f7f7 fc77 	bl	801f9a8 <GUI_ALLOC_LockH>
 80280ba:	4603      	mov	r3, r0
 80280bc:	4601      	mov	r1, r0
 80280be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80280c0:	9303      	str	r3, [sp, #12]
 80280c2:	0793      	lsls	r3, r2, #30
 80280c4:	4630      	mov	r0, r6
 80280c6:	d4ec      	bmi.n	80280a2 <WM__InitIVRSearch+0xae>
 80280c8:	4640      	mov	r0, r8
 80280ca:	f7f7 fc7f 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80280ce:	6a2b      	ldr	r3, [r5, #32]
 80280d0:	3b01      	subs	r3, #1
 80280d2:	622b      	str	r3, [r5, #32]
 80280d4:	2000      	movs	r0, #0
 80280d6:	e79c      	b.n	8028012 <WM__InitIVRSearch+0x1e>
 80280d8:	f7fa f8d2 	bl	8022280 <GUI__IntersectRect>
 80280dc:	9b03      	ldr	r3, [sp, #12]
 80280de:	699f      	ldr	r7, [r3, #24]
 80280e0:	4640      	mov	r0, r8
 80280e2:	b37f      	cbz	r7, 8028144 <WM__InitIVRSearch+0x150>
 80280e4:	f7f7 fc72 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80280e8:	46b9      	mov	r9, r7
 80280ea:	4648      	mov	r0, r9
 80280ec:	f7f7 fc5c 	bl	801f9a8 <GUI_ALLOC_LockH>
 80280f0:	4603      	mov	r3, r0
 80280f2:	4601      	mov	r1, r0
 80280f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80280f6:	9303      	str	r3, [sp, #12]
 80280f8:	0792      	lsls	r2, r2, #30
 80280fa:	4630      	mov	r0, r6
 80280fc:	d5e4      	bpl.n	80280c8 <WM__InitIVRSearch+0xd4>
 80280fe:	e7eb      	b.n	80280d8 <WM__InitIVRSearch+0xe4>
 8028100:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8028102:	f013 0602 	ands.w	r6, r3, #2
 8028106:	d027      	beq.n	8028158 <WM__InitIVRSearch+0x164>
 8028108:	c803      	ldmia	r0, {r0, r1}
 802810a:	ae04      	add	r6, sp, #16
 802810c:	e886 0003 	stmia.w	r6, {r0, r1}
 8028110:	e799      	b.n	8028046 <WM__InitIVRSearch+0x52>
 8028112:	f7f7 fc5b 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8028116:	4b1b      	ldr	r3, [pc, #108]	; (8028184 <WM__InitIVRSearch+0x190>)
 8028118:	681a      	ldr	r2, [r3, #0]
 802811a:	4297      	cmp	r7, r2
 802811c:	d002      	beq.n	8028124 <WM__InitIVRSearch+0x130>
 802811e:	685b      	ldr	r3, [r3, #4]
 8028120:	429f      	cmp	r7, r3
 8028122:	d1d4      	bne.n	80280ce <WM__InitIVRSearch+0xda>
 8028124:	e896 0003 	ldmia.w	r6, {r0, r1}
 8028128:	4b17      	ldr	r3, [pc, #92]	; (8028188 <WM__InitIVRSearch+0x194>)
 802812a:	e883 0003 	stmia.w	r3, {r0, r1}
 802812e:	f7ff fe3b 	bl	8027da8 <WM__GetNextIVR>
 8028132:	e76e      	b.n	8028012 <WM__InitIVRSearch+0x1e>
 8028134:	4640      	mov	r0, r8
 8028136:	f7f7 fc49 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802813a:	6838      	ldr	r0, [r7, #0]
 802813c:	f7f7 fc34 	bl	801f9a8 <GUI_ALLOC_LockH>
 8028140:	9002      	str	r0, [sp, #8]
 8028142:	e796      	b.n	8028072 <WM__InitIVRSearch+0x7e>
 8028144:	f7f7 fc42 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8028148:	4b0e      	ldr	r3, [pc, #56]	; (8028184 <WM__InitIVRSearch+0x190>)
 802814a:	681a      	ldr	r2, [r3, #0]
 802814c:	4591      	cmp	r9, r2
 802814e:	d0a5      	beq.n	802809c <WM__InitIVRSearch+0xa8>
 8028150:	685b      	ldr	r3, [r3, #4]
 8028152:	4599      	cmp	r9, r3
 8028154:	d0a2      	beq.n	802809c <WM__InitIVRSearch+0xa8>
 8028156:	e7ba      	b.n	80280ce <WM__InitIVRSearch+0xda>
 8028158:	6a2b      	ldr	r3, [r5, #32]
 802815a:	a801      	add	r0, sp, #4
 802815c:	3b01      	subs	r3, #1
 802815e:	622b      	str	r3, [r5, #32]
 8028160:	f7f7 fc34 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8028164:	4630      	mov	r0, r6
 8028166:	e754      	b.n	8028012 <WM__InitIVRSearch+0x1e>
 8028168:	a801      	add	r0, sp, #4
 802816a:	f7f7 fc2f 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802816e:	4f04      	ldr	r7, [pc, #16]	; (8028180 <WM__InitIVRSearch+0x18c>)
 8028170:	e78d      	b.n	802808e <WM__InitIVRSearch+0x9a>
 8028172:	bf00      	nop
 8028174:	200000e8 	.word	0x200000e8
 8028178:	2002e3dc 	.word	0x2002e3dc
 802817c:	20030900 	.word	0x20030900
 8028180:	200308d0 	.word	0x200308d0
 8028184:	200308d4 	.word	0x200308d4
 8028188:	2002e3e8 	.word	0x2002e3e8

0802818c <WM__Paint1>:
 802818c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028190:	b089      	sub	sp, #36	; 0x24
 8028192:	4606      	mov	r6, r0
 8028194:	f7f7 fc08 	bl	801f9a8 <GUI_ALLOC_LockH>
 8028198:	f100 0208 	add.w	r2, r0, #8
 802819c:	4603      	mov	r3, r0
 802819e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80281a2:	ac02      	add	r4, sp, #8
 80281a4:	691f      	ldr	r7, [r3, #16]
 80281a6:	9301      	str	r3, [sp, #4]
 80281a8:	e884 0003 	stmia.w	r4, {r0, r1}
 80281ac:	a801      	add	r0, sp, #4
 80281ae:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80281b0:	f7f7 fc0c 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80281b4:	b10f      	cbz	r7, 80281ba <WM__Paint1+0x2e>
 80281b6:	07ab      	lsls	r3, r5, #30
 80281b8:	d402      	bmi.n	80281c0 <WM__Paint1+0x34>
 80281ba:	b009      	add	sp, #36	; 0x24
 80281bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80281c0:	4f1e      	ldr	r7, [pc, #120]	; (802823c <WM__Paint1+0xb0>)
 80281c2:	212e      	movs	r1, #46	; 0x2e
 80281c4:	4630      	mov	r0, r6
 80281c6:	f000 fef5 	bl	8028fb4 <WM_SendMessageNoPara>
 80281ca:	783b      	ldrb	r3, [r7, #0]
 80281cc:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
 80281d0:	f103 0301 	add.w	r3, r3, #1
 80281d4:	703b      	strb	r3, [r7, #0]
 80281d6:	d119      	bne.n	802820c <WM__Paint1+0x80>
 80281d8:	4620      	mov	r0, r4
 80281da:	f7ff ff0b 	bl	8027ff4 <WM__InitIVRSearch>
 80281de:	b318      	cbz	r0, 8028228 <WM__Paint1+0x9c>
 80281e0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8028240 <WM__Paint1+0xb4>
 80281e4:	f04f 080f 	mov.w	r8, #15
 80281e8:	9605      	str	r6, [sp, #20]
 80281ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80281ee:	9407      	str	r4, [sp, #28]
 80281f0:	f7f8 f8bc 	bl	802036c <GL_SetDefault>
 80281f4:	f8d9 3000 	ldr.w	r3, [r9]
 80281f8:	a904      	add	r1, sp, #16
 80281fa:	645d      	str	r5, [r3, #68]	; 0x44
 80281fc:	4630      	mov	r0, r6
 80281fe:	f001 ff0d 	bl	802a01c <WM__SendMessage>
 8028202:	f7ff fdd1 	bl	8027da8 <WM__GetNextIVR>
 8028206:	2800      	cmp	r0, #0
 8028208:	d1ee      	bne.n	80281e8 <WM__Paint1+0x5c>
 802820a:	e00d      	b.n	8028228 <WM__Paint1+0x9c>
 802820c:	230f      	movs	r3, #15
 802820e:	9304      	str	r3, [sp, #16]
 8028210:	9605      	str	r6, [sp, #20]
 8028212:	9407      	str	r4, [sp, #28]
 8028214:	f7f8 f8aa 	bl	802036c <GL_SetDefault>
 8028218:	4b09      	ldr	r3, [pc, #36]	; (8028240 <WM__Paint1+0xb4>)
 802821a:	681b      	ldr	r3, [r3, #0]
 802821c:	2200      	movs	r2, #0
 802821e:	645a      	str	r2, [r3, #68]	; 0x44
 8028220:	a904      	add	r1, sp, #16
 8028222:	4630      	mov	r0, r6
 8028224:	f001 fefa 	bl	802a01c <WM__SendMessage>
 8028228:	783b      	ldrb	r3, [r7, #0]
 802822a:	4630      	mov	r0, r6
 802822c:	3b01      	subs	r3, #1
 802822e:	212f      	movs	r1, #47	; 0x2f
 8028230:	703b      	strb	r3, [r7, #0]
 8028232:	f000 febf 	bl	8028fb4 <WM_SendMessageNoPara>
 8028236:	b009      	add	sp, #36	; 0x24
 8028238:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802823c:	20030900 	.word	0x20030900
 8028240:	200000e8 	.word	0x200000e8

08028244 <WM__Paint>:
 8028244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028248:	b088      	sub	sp, #32
 802824a:	ad06      	add	r5, sp, #24
 802824c:	9003      	str	r0, [sp, #12]
 802824e:	f7f7 fbab 	bl	801f9a8 <GUI_ALLOC_LockH>
 8028252:	f100 0208 	add.w	r2, r0, #8
 8028256:	4603      	mov	r3, r0
 8028258:	e892 0003 	ldmia.w	r2, {r0, r1}
 802825c:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 802825e:	9304      	str	r3, [sp, #16]
 8028260:	e885 0003 	stmia.w	r5, {r0, r1}
 8028264:	a804      	add	r0, sp, #16
 8028266:	699f      	ldr	r7, [r3, #24]
 8028268:	691c      	ldr	r4, [r3, #16]
 802826a:	f7f7 fbaf 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802826e:	f244 0320 	movw	r3, #16416	; 0x4020
 8028272:	4033      	ands	r3, r6
 8028274:	2b00      	cmp	r3, #0
 8028276:	d079      	beq.n	802836c <WM__Paint+0x128>
 8028278:	2c00      	cmp	r4, #0
 802827a:	d075      	beq.n	8028368 <WM__Paint+0x124>
 802827c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8028280:	e008      	b.n	8028294 <WM__Paint+0x50>
 8028282:	f7f9 fffd 	bl	8022280 <GUI__IntersectRect>
 8028286:	9b05      	ldr	r3, [sp, #20]
 8028288:	699c      	ldr	r4, [r3, #24]
 802828a:	a805      	add	r0, sp, #20
 802828c:	b34c      	cbz	r4, 80282e2 <WM__Paint+0x9e>
 802828e:	f7f7 fb9d 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8028292:	46a0      	mov	r8, r4
 8028294:	4640      	mov	r0, r8
 8028296:	f7f7 fb87 	bl	801f9a8 <GUI_ALLOC_LockH>
 802829a:	4602      	mov	r2, r0
 802829c:	4601      	mov	r1, r0
 802829e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80282a0:	9205      	str	r2, [sp, #20]
 80282a2:	f013 0402 	ands.w	r4, r3, #2
 80282a6:	4628      	mov	r0, r5
 80282a8:	d1eb      	bne.n	8028282 <WM__Paint+0x3e>
 80282aa:	a805      	add	r0, sp, #20
 80282ac:	f7f7 fb8e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80282b0:	9803      	ldr	r0, [sp, #12]
 80282b2:	f7f7 fb79 	bl	801f9a8 <GUI_ALLOC_LockH>
 80282b6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80282b8:	9004      	str	r0, [sp, #16]
 80282ba:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 80282be:	f023 0320 	bic.w	r3, r3, #32
 80282c2:	0492      	lsls	r2, r2, #18
 80282c4:	bf48      	it	mi
 80282c6:	f043 0304 	orrmi.w	r3, r3, #4
 80282ca:	6283      	str	r3, [r0, #40]	; 0x28
 80282cc:	a804      	add	r0, sp, #16
 80282ce:	f7f7 fb7d 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80282d2:	4a32      	ldr	r2, [pc, #200]	; (802839c <WM__Paint+0x158>)
 80282d4:	8813      	ldrh	r3, [r2, #0]
 80282d6:	4620      	mov	r0, r4
 80282d8:	3b01      	subs	r3, #1
 80282da:	8013      	strh	r3, [r2, #0]
 80282dc:	b008      	add	sp, #32
 80282de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80282e2:	4c2f      	ldr	r4, [pc, #188]	; (80283a0 <WM__Paint+0x15c>)
 80282e4:	f7f7 fb72 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80282e8:	6823      	ldr	r3, [r4, #0]
 80282ea:	4598      	cmp	r8, r3
 80282ec:	d143      	bne.n	8028376 <WM__Paint+0x132>
 80282ee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80282f2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80283ac <WM__Paint+0x168>
 80282f6:	f7f9 f9e1 	bl	80216bc <GUI_Lock>
 80282fa:	f8d9 3000 	ldr.w	r3, [r9]
 80282fe:	f1b8 0f00 	cmp.w	r8, #0
 8028302:	d102      	bne.n	802830a <WM__Paint+0xc6>
 8028304:	4a27      	ldr	r2, [pc, #156]	; (80283a4 <WM__Paint+0x160>)
 8028306:	f8d2 8000 	ldr.w	r8, [r2]
 802830a:	f8c3 8048 	str.w	r8, [r3, #72]	; 0x48
 802830e:	46c2      	mov	sl, r8
 8028310:	e000      	b.n	8028314 <WM__Paint+0xd0>
 8028312:	469a      	mov	sl, r3
 8028314:	4650      	mov	r0, sl
 8028316:	f7f7 fb3d 	bl	801f994 <GUI_ALLOC_h2p>
 802831a:	6983      	ldr	r3, [r0, #24]
 802831c:	2b00      	cmp	r3, #0
 802831e:	d1f8      	bne.n	8028312 <WM__Paint+0xce>
 8028320:	6822      	ldr	r2, [r4, #0]
 8028322:	491f      	ldr	r1, [pc, #124]	; (80283a0 <WM__Paint+0x15c>)
 8028324:	4592      	cmp	sl, r2
 8028326:	d036      	beq.n	8028396 <WM__Paint+0x152>
 8028328:	684b      	ldr	r3, [r1, #4]
 802832a:	459a      	cmp	sl, r3
 802832c:	d02f      	beq.n	802838e <WM__Paint+0x14a>
 802832e:	f7fa fe0d 	bl	8022f4c <LCD_SetClipRectMax>
 8028332:	4640      	mov	r0, r8
 8028334:	f7f7 fb2e 	bl	801f994 <GUI_ALLOC_h2p>
 8028338:	f8d9 3000 	ldr.w	r3, [r9]
 802833c:	f9b0 1000 	ldrsh.w	r1, [r0]
 8028340:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8028344:	651a      	str	r2, [r3, #80]	; 0x50
 8028346:	64d9      	str	r1, [r3, #76]	; 0x4c
 8028348:	f7f9 f9ae 	bl	80216a8 <GUI_Unlock>
 802834c:	0771      	lsls	r1, r6, #29
 802834e:	d519      	bpl.n	8028384 <WM__Paint+0x140>
 8028350:	b1b7      	cbz	r7, 8028380 <WM__Paint+0x13c>
 8028352:	f006 0301 	and.w	r3, r6, #1
 8028356:	f083 0301 	eor.w	r3, r3, #1
 802835a:	9300      	str	r3, [sp, #0]
 802835c:	4628      	mov	r0, r5
 802835e:	2300      	movs	r3, #0
 8028360:	aa03      	add	r2, sp, #12
 8028362:	4911      	ldr	r1, [pc, #68]	; (80283a8 <WM__Paint+0x164>)
 8028364:	f004 ff30 	bl	802d1c8 <GUI_MEMDEV_Draw>
 8028368:	2400      	movs	r4, #0
 802836a:	e7a1      	b.n	80282b0 <WM__Paint+0x6c>
 802836c:	461c      	mov	r4, r3
 802836e:	4620      	mov	r0, r4
 8028370:	b008      	add	sp, #32
 8028372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028376:	6863      	ldr	r3, [r4, #4]
 8028378:	4598      	cmp	r8, r3
 802837a:	d0b8      	beq.n	80282ee <WM__Paint+0xaa>
 802837c:	2400      	movs	r4, #0
 802837e:	e797      	b.n	80282b0 <WM__Paint+0x6c>
 8028380:	2301      	movs	r3, #1
 8028382:	e7ea      	b.n	802835a <WM__Paint+0x116>
 8028384:	9803      	ldr	r0, [sp, #12]
 8028386:	f7fe f9dd 	bl	8026744 <WM__PaintWinAndOverlays>
 802838a:	2401      	movs	r4, #1
 802838c:	e790      	b.n	80282b0 <WM__Paint+0x6c>
 802838e:	2001      	movs	r0, #1
 8028390:	f7f9 f926 	bl	80215e0 <GUI_SelectLayer>
 8028394:	e7cb      	b.n	802832e <WM__Paint+0xea>
 8028396:	4618      	mov	r0, r3
 8028398:	e7fa      	b.n	8028390 <WM__Paint+0x14c>
 802839a:	bf00      	nop
 802839c:	200308ec 	.word	0x200308ec
 80283a0:	200308d4 	.word	0x200308d4
 80283a4:	200308f0 	.word	0x200308f0
 80283a8:	080267e5 	.word	0x080267e5
 80283ac:	200000e8 	.word	0x200000e8

080283b0 <WM_Exec>:
 80283b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80283b4:	b0ab      	sub	sp, #172	; 0xac
 80283b6:	f7f9 f981 	bl	80216bc <GUI_Lock>
 80283ba:	4b9b      	ldr	r3, [pc, #620]	; (8028628 <WM_Exec+0x278>)
 80283bc:	681b      	ldr	r3, [r3, #0]
 80283be:	b103      	cbz	r3, 80283c2 <WM_Exec+0x12>
 80283c0:	4798      	blx	r3
 80283c2:	2300      	movs	r3, #0
 80283c4:	461c      	mov	r4, r3
 80283c6:	e000      	b.n	80283ca <WM_Exec+0x1a>
 80283c8:	2401      	movs	r4, #1
 80283ca:	f7ff f943 	bl	8027654 <_Exec1Input>
 80283ce:	2800      	cmp	r0, #0
 80283d0:	d1fa      	bne.n	80283c8 <WM_Exec+0x18>
 80283d2:	f8df b264 	ldr.w	fp, [pc, #612]	; 8028638 <WM_Exec+0x288>
 80283d6:	9406      	str	r4, [sp, #24]
 80283d8:	f8db 3000 	ldr.w	r3, [fp]
 80283dc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80283e0:	b123      	cbz	r3, 80283ec <WM_Exec+0x3c>
 80283e2:	4b92      	ldr	r3, [pc, #584]	; (802862c <WM_Exec+0x27c>)
 80283e4:	881b      	ldrh	r3, [r3, #0]
 80283e6:	2b00      	cmp	r3, #0
 80283e8:	f040 809a 	bne.w	8028520 <WM_Exec+0x170>
 80283ec:	9307      	str	r3, [sp, #28]
 80283ee:	f8df a250 	ldr.w	sl, [pc, #592]	; 8028640 <WM_Exec+0x290>
 80283f2:	f7f9 f959 	bl	80216a8 <GUI_Unlock>
 80283f6:	e021      	b.n	802843c <WM_Exec+0x8c>
 80283f8:	aa0d      	add	r2, sp, #52	; 0x34
 80283fa:	4b8d      	ldr	r3, [pc, #564]	; (8028630 <WM_Exec+0x280>)
 80283fc:	9205      	str	r2, [sp, #20]
 80283fe:	4610      	mov	r0, r2
 8028400:	681e      	ldr	r6, [r3, #0]
 8028402:	f7f7 ff79 	bl	80202f8 <GUI_SaveContext_W>
 8028406:	6823      	ldr	r3, [r4, #0]
 8028408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 802840a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 802840c:	9203      	str	r2, [sp, #12]
 802840e:	9304      	str	r3, [sp, #16]
 8028410:	2e00      	cmp	r6, #0
 8028412:	d132      	bne.n	802847a <WM_Exec+0xca>
 8028414:	4b87      	ldr	r3, [pc, #540]	; (8028634 <WM_Exec+0x284>)
 8028416:	9803      	ldr	r0, [sp, #12]
 8028418:	609e      	str	r6, [r3, #8]
 802841a:	f7f7 ff9b 	bl	8020354 <GUI_SetColor>
 802841e:	9804      	ldr	r0, [sp, #16]
 8028420:	f7f7 ff8c 	bl	802033c <GUI_SetBkColor>
 8028424:	9805      	ldr	r0, [sp, #20]
 8028426:	f7f7 ff71 	bl	802030c <GUI_RestoreContext>
 802842a:	f7f9 f93d 	bl	80216a8 <GUI_Unlock>
 802842e:	f8b8 3000 	ldrh.w	r3, [r8]
 8028432:	2b00      	cmp	r3, #0
 8028434:	f000 80d2 	beq.w	80285dc <WM_Exec+0x22c>
 8028438:	2301      	movs	r3, #1
 802843a:	9306      	str	r3, [sp, #24]
 802843c:	f8db 3000 	ldr.w	r3, [fp]
 8028440:	4c7d      	ldr	r4, [pc, #500]	; (8028638 <WM_Exec+0x288>)
 8028442:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8028446:	2b00      	cmp	r3, #0
 8028448:	f000 80c8 	beq.w	80285dc <WM_Exec+0x22c>
 802844c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 802862c <WM_Exec+0x27c>
 8028450:	f8b8 3000 	ldrh.w	r3, [r8]
 8028454:	2b00      	cmp	r3, #0
 8028456:	f000 80c1 	beq.w	80285dc <WM_Exec+0x22c>
 802845a:	f7f9 f92f 	bl	80216bc <GUI_Lock>
 802845e:	4b75      	ldr	r3, [pc, #468]	; (8028634 <WM_Exec+0x284>)
 8028460:	689e      	ldr	r6, [r3, #8]
 8028462:	2e00      	cmp	r6, #0
 8028464:	d0c8      	beq.n	80283f8 <WM_Exec+0x48>
 8028466:	ab0d      	add	r3, sp, #52	; 0x34
 8028468:	4618      	mov	r0, r3
 802846a:	9305      	str	r3, [sp, #20]
 802846c:	f7f7 ff44 	bl	80202f8 <GUI_SaveContext_W>
 8028470:	6823      	ldr	r3, [r4, #0]
 8028472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8028474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8028476:	9203      	str	r2, [sp, #12]
 8028478:	9304      	str	r3, [sp, #16]
 802847a:	ad0b      	add	r5, sp, #44	; 0x2c
 802847c:	4630      	mov	r0, r6
 802847e:	9608      	str	r6, [sp, #32]
 8028480:	f7f7 fa92 	bl	801f9a8 <GUI_ALLOC_LockH>
 8028484:	f100 0208 	add.w	r2, r0, #8
 8028488:	4603      	mov	r3, r0
 802848a:	e892 0003 	ldmia.w	r2, {r0, r1}
 802848e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8028490:	9309      	str	r3, [sp, #36]	; 0x24
 8028492:	e885 0003 	stmia.w	r5, {r0, r1}
 8028496:	a809      	add	r0, sp, #36	; 0x24
 8028498:	4617      	mov	r7, r2
 802849a:	f8d3 9018 	ldr.w	r9, [r3, #24]
 802849e:	691c      	ldr	r4, [r3, #16]
 80284a0:	9202      	str	r2, [sp, #8]
 80284a2:	f7f7 fa93 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80284a6:	f244 0320 	movw	r3, #16416	; 0x4020
 80284aa:	403b      	ands	r3, r7
 80284ac:	2b00      	cmp	r3, #0
 80284ae:	d040      	beq.n	8028532 <WM_Exec+0x182>
 80284b0:	b1d4      	cbz	r4, 80284e8 <WM_Exec+0x138>
 80284b2:	9c08      	ldr	r4, [sp, #32]
 80284b4:	e009      	b.n	80284ca <WM_Exec+0x11a>
 80284b6:	f7f9 fee3 	bl	8022280 <GUI__IntersectRect>
 80284ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80284bc:	699f      	ldr	r7, [r3, #24]
 80284be:	a80a      	add	r0, sp, #40	; 0x28
 80284c0:	2f00      	cmp	r7, #0
 80284c2:	d03d      	beq.n	8028540 <WM_Exec+0x190>
 80284c4:	f7f7 fa82 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80284c8:	463c      	mov	r4, r7
 80284ca:	4620      	mov	r0, r4
 80284cc:	f7f7 fa6c 	bl	801f9a8 <GUI_ALLOC_LockH>
 80284d0:	4603      	mov	r3, r0
 80284d2:	4601      	mov	r1, r0
 80284d4:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 80284d6:	930a      	str	r3, [sp, #40]	; 0x28
 80284d8:	f017 0702 	ands.w	r7, r7, #2
 80284dc:	4628      	mov	r0, r5
 80284de:	d1ea      	bne.n	80284b6 <WM_Exec+0x106>
 80284e0:	a80a      	add	r0, sp, #40	; 0x28
 80284e2:	f7f7 fa73 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80284e6:	463c      	mov	r4, r7
 80284e8:	9808      	ldr	r0, [sp, #32]
 80284ea:	f7f7 fa5d 	bl	801f9a8 <GUI_ALLOC_LockH>
 80284ee:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80284f0:	9009      	str	r0, [sp, #36]	; 0x24
 80284f2:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 80284f6:	f023 0320 	bic.w	r3, r3, #32
 80284fa:	0492      	lsls	r2, r2, #18
 80284fc:	bf48      	it	mi
 80284fe:	f043 0304 	orrmi.w	r3, r3, #4
 8028502:	6283      	str	r3, [r0, #40]	; 0x28
 8028504:	a809      	add	r0, sp, #36	; 0x24
 8028506:	f7f7 fa61 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802850a:	f8b8 3000 	ldrh.w	r3, [r8]
 802850e:	3b01      	subs	r3, #1
 8028510:	f8a8 3000 	strh.w	r3, [r8]
 8028514:	b16c      	cbz	r4, 8028532 <WM_Exec+0x182>
 8028516:	4630      	mov	r0, r6
 8028518:	f7f7 fa3c 	bl	801f994 <GUI_ALLOC_h2p>
 802851c:	6946      	ldr	r6, [r0, #20]
 802851e:	e779      	b.n	8028414 <WM_Exec+0x64>
 8028520:	4b46      	ldr	r3, [pc, #280]	; (802863c <WM_Exec+0x28c>)
 8028522:	681b      	ldr	r3, [r3, #0]
 8028524:	2b00      	cmp	r3, #0
 8028526:	d071      	beq.n	802860c <WM_Exec+0x25c>
 8028528:	681b      	ldr	r3, [r3, #0]
 802852a:	4798      	blx	r3
 802852c:	2301      	movs	r3, #1
 802852e:	9307      	str	r3, [sp, #28]
 8028530:	e75d      	b.n	80283ee <WM_Exec+0x3e>
 8028532:	4630      	mov	r0, r6
 8028534:	f7f7 fa2e 	bl	801f994 <GUI_ALLOC_h2p>
 8028538:	6946      	ldr	r6, [r0, #20]
 802853a:	2e00      	cmp	r6, #0
 802853c:	d19e      	bne.n	802847c <WM_Exec+0xcc>
 802853e:	e769      	b.n	8028414 <WM_Exec+0x64>
 8028540:	f7f7 fa44 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8028544:	f8da 2000 	ldr.w	r2, [sl]
 8028548:	42a2      	cmp	r2, r4
 802854a:	d005      	beq.n	8028558 <WM_Exec+0x1a8>
 802854c:	4b3c      	ldr	r3, [pc, #240]	; (8028640 <WM_Exec+0x290>)
 802854e:	685a      	ldr	r2, [r3, #4]
 8028550:	4294      	cmp	r4, r2
 8028552:	d001      	beq.n	8028558 <WM_Exec+0x1a8>
 8028554:	2400      	movs	r4, #0
 8028556:	e7c7      	b.n	80284e8 <WM_Exec+0x138>
 8028558:	9c08      	ldr	r4, [sp, #32]
 802855a:	f7f9 f8af 	bl	80216bc <GUI_Lock>
 802855e:	f8db 3000 	ldr.w	r3, [fp]
 8028562:	b90c      	cbnz	r4, 8028568 <WM_Exec+0x1b8>
 8028564:	4a32      	ldr	r2, [pc, #200]	; (8028630 <WM_Exec+0x280>)
 8028566:	6814      	ldr	r4, [r2, #0]
 8028568:	649c      	str	r4, [r3, #72]	; 0x48
 802856a:	4627      	mov	r7, r4
 802856c:	e000      	b.n	8028570 <WM_Exec+0x1c0>
 802856e:	461f      	mov	r7, r3
 8028570:	4638      	mov	r0, r7
 8028572:	f7f7 fa0f 	bl	801f994 <GUI_ALLOC_h2p>
 8028576:	6983      	ldr	r3, [r0, #24]
 8028578:	2b00      	cmp	r3, #0
 802857a:	d1f8      	bne.n	802856e <WM_Exec+0x1be>
 802857c:	f8da 1000 	ldr.w	r1, [sl]
 8028580:	428f      	cmp	r7, r1
 8028582:	d03d      	beq.n	8028600 <WM_Exec+0x250>
 8028584:	f8da 3004 	ldr.w	r3, [sl, #4]
 8028588:	429f      	cmp	r7, r3
 802858a:	d03d      	beq.n	8028608 <WM_Exec+0x258>
 802858c:	f7fa fcde 	bl	8022f4c <LCD_SetClipRectMax>
 8028590:	4620      	mov	r0, r4
 8028592:	f7f7 f9ff 	bl	801f994 <GUI_ALLOC_h2p>
 8028596:	f8db 3000 	ldr.w	r3, [fp]
 802859a:	f9b0 1000 	ldrsh.w	r1, [r0]
 802859e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80285a2:	651a      	str	r2, [r3, #80]	; 0x50
 80285a4:	64d9      	str	r1, [r3, #76]	; 0x4c
 80285a6:	f7f9 f87f 	bl	80216a8 <GUI_Unlock>
 80285aa:	9a02      	ldr	r2, [sp, #8]
 80285ac:	0751      	lsls	r1, r2, #29
 80285ae:	d510      	bpl.n	80285d2 <WM_Exec+0x222>
 80285b0:	f1b9 0f00 	cmp.w	r9, #0
 80285b4:	d00b      	beq.n	80285ce <WM_Exec+0x21e>
 80285b6:	f002 0301 	and.w	r3, r2, #1
 80285ba:	f083 0301 	eor.w	r3, r3, #1
 80285be:	9300      	str	r3, [sp, #0]
 80285c0:	aa08      	add	r2, sp, #32
 80285c2:	2300      	movs	r3, #0
 80285c4:	491f      	ldr	r1, [pc, #124]	; (8028644 <WM_Exec+0x294>)
 80285c6:	4628      	mov	r0, r5
 80285c8:	f004 fdfe 	bl	802d1c8 <GUI_MEMDEV_Draw>
 80285cc:	e7c2      	b.n	8028554 <WM_Exec+0x1a4>
 80285ce:	2301      	movs	r3, #1
 80285d0:	e7f5      	b.n	80285be <WM_Exec+0x20e>
 80285d2:	9808      	ldr	r0, [sp, #32]
 80285d4:	f7fe f8b6 	bl	8026744 <WM__PaintWinAndOverlays>
 80285d8:	2401      	movs	r4, #1
 80285da:	e785      	b.n	80284e8 <WM_Exec+0x138>
 80285dc:	f7f9 f86e 	bl	80216bc <GUI_Lock>
 80285e0:	9b07      	ldr	r3, [sp, #28]
 80285e2:	b13b      	cbz	r3, 80285f4 <WM_Exec+0x244>
 80285e4:	4b15      	ldr	r3, [pc, #84]	; (802863c <WM_Exec+0x28c>)
 80285e6:	6818      	ldr	r0, [r3, #0]
 80285e8:	b1b0      	cbz	r0, 8028618 <WM_Exec+0x268>
 80285ea:	6843      	ldr	r3, [r0, #4]
 80285ec:	4798      	blx	r3
 80285ee:	4b16      	ldr	r3, [pc, #88]	; (8028648 <WM_Exec+0x298>)
 80285f0:	2200      	movs	r2, #0
 80285f2:	601a      	str	r2, [r3, #0]
 80285f4:	f7f9 f858 	bl	80216a8 <GUI_Unlock>
 80285f8:	9806      	ldr	r0, [sp, #24]
 80285fa:	b02b      	add	sp, #172	; 0xac
 80285fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028600:	4618      	mov	r0, r3
 8028602:	f7f8 ffed 	bl	80215e0 <GUI_SelectLayer>
 8028606:	e7c1      	b.n	802858c <WM_Exec+0x1dc>
 8028608:	2001      	movs	r0, #1
 802860a:	e7fa      	b.n	8028602 <WM_Exec+0x252>
 802860c:	2001      	movs	r0, #1
 802860e:	f004 fb47 	bl	802cca0 <GUI__ManageCache>
 8028612:	2301      	movs	r3, #1
 8028614:	9307      	str	r3, [sp, #28]
 8028616:	e6ea      	b.n	80283ee <WM_Exec+0x3e>
 8028618:	f004 fb42 	bl	802cca0 <GUI__ManageCache>
 802861c:	f7f9 f844 	bl	80216a8 <GUI_Unlock>
 8028620:	9806      	ldr	r0, [sp, #24]
 8028622:	b02b      	add	sp, #172	; 0xac
 8028624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028628:	200308e0 	.word	0x200308e0
 802862c:	200308ec 	.word	0x200308ec
 8028630:	200308f0 	.word	0x200308f0
 8028634:	2002e3dc 	.word	0x2002e3dc
 8028638:	200000e8 	.word	0x200000e8
 802863c:	20030914 	.word	0x20030914
 8028640:	200308d4 	.word	0x200308d4
 8028644:	080267e5 	.word	0x080267e5
 8028648:	200308fc 	.word	0x200308fc

0802864c <WM_Activate>:
 802864c:	4b02      	ldr	r3, [pc, #8]	; (8028658 <WM_Activate+0xc>)
 802864e:	681b      	ldr	r3, [r3, #0]
 8028650:	2201      	movs	r2, #1
 8028652:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8028656:	4770      	bx	lr
 8028658:	200000e8 	.word	0x200000e8

0802865c <WM_Deactivate>:
 802865c:	b508      	push	{r3, lr}
 802865e:	4b06      	ldr	r3, [pc, #24]	; (8028678 <WM_Deactivate+0x1c>)
 8028660:	681b      	ldr	r3, [r3, #0]
 8028662:	2200      	movs	r2, #0
 8028664:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8028668:	f7f9 f828 	bl	80216bc <GUI_Lock>
 802866c:	f7fa fc6e 	bl	8022f4c <LCD_SetClipRectMax>
 8028670:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8028674:	f7f9 b818 	b.w	80216a8 <GUI_Unlock>
 8028678:	200000e8 	.word	0x200000e8

0802867c <WM_DefaultProc>:
 802867c:	6803      	ldr	r3, [r0, #0]
 802867e:	3b0e      	subs	r3, #14
 8028680:	b510      	push	{r4, lr}
 8028682:	4604      	mov	r4, r0
 8028684:	6840      	ldr	r0, [r0, #4]
 8028686:	2b1a      	cmp	r3, #26
 8028688:	d812      	bhi.n	80286b0 <WM_DefaultProc+0x34>
 802868a:	e8df f003 	tbb	[pc, r3]
 802868e:	111b      	.short	0x111b
 8028690:	11111111 	.word	0x11111111
 8028694:	2011110e 	.word	0x2011110e
 8028698:	11111111 	.word	0x11111111
 802869c:	11111111 	.word	0x11111111
 80286a0:	11221111 	.word	0x11221111
 80286a4:	11111111 	.word	0x11111111
 80286a8:	14          	.byte	0x14
 80286a9:	00          	.byte	0x00
 80286aa:	68e1      	ldr	r1, [r4, #12]
 80286ac:	f001 fdb4 	bl	802a218 <WM__GetClientRectEx>
 80286b0:	2300      	movs	r3, #0
 80286b2:	60e3      	str	r3, [r4, #12]
 80286b4:	bd10      	pop	{r4, pc}
 80286b6:	2800      	cmp	r0, #0
 80286b8:	d0fc      	beq.n	80286b4 <WM_DefaultProc+0x38>
 80286ba:	2100      	movs	r1, #0
 80286bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80286c0:	f7fe bde6 	b.w	8027290 <WM_InvalidateRect.part.2>
 80286c4:	4621      	mov	r1, r4
 80286c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80286ca:	f000 bc81 	b.w	8028fd0 <WM_SendToParent>
 80286ce:	60e0      	str	r0, [r4, #12]
 80286d0:	bd10      	pop	{r4, pc}
 80286d2:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80286d6:	60e3      	str	r3, [r4, #12]
 80286d8:	bd10      	pop	{r4, pc}
 80286da:	bf00      	nop

080286dc <WM_Init>:
 80286dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80286e0:	4d45      	ldr	r5, [pc, #276]	; (80287f8 <WM_Init+0x11c>)
 80286e2:	782b      	ldrb	r3, [r5, #0]
 80286e4:	b085      	sub	sp, #20
 80286e6:	2b00      	cmp	r3, #0
 80286e8:	d17b      	bne.n	80287e2 <WM_Init+0x106>
 80286ea:	4f44      	ldr	r7, [pc, #272]	; (80287fc <WM_Init+0x120>)
 80286ec:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8028830 <WM_Init+0x154>
 80286f0:	6838      	ldr	r0, [r7, #0]
 80286f2:	4943      	ldr	r1, [pc, #268]	; (8028800 <WM_Init+0x124>)
 80286f4:	4a43      	ldr	r2, [pc, #268]	; (8028804 <WM_Init+0x128>)
 80286f6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8028824 <WM_Init+0x148>
 80286fa:	f8df a138 	ldr.w	sl, [pc, #312]	; 8028834 <WM_Init+0x158>
 80286fe:	4e42      	ldr	r6, [pc, #264]	; (8028808 <WM_Init+0x12c>)
 8028700:	60ab      	str	r3, [r5, #8]
 8028702:	6443      	str	r3, [r0, #68]	; 0x44
 8028704:	461c      	mov	r4, r3
 8028706:	f8c9 3000 	str.w	r3, [r9]
 802870a:	800b      	strh	r3, [r1, #0]
 802870c:	8013      	strh	r3, [r2, #0]
 802870e:	469b      	mov	fp, r3
 8028710:	4620      	mov	r0, r4
 8028712:	f7f8 f845 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 8028716:	f643 73ff 	movw	r3, #16383	; 0x3fff
 802871a:	2100      	movs	r1, #0
 802871c:	f04f 0c02 	mov.w	ip, #2
 8028720:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8028724:	461a      	mov	r2, r3
 8028726:	b190      	cbz	r0, 802874e <WM_Init+0x72>
 8028728:	f8cd b00c 	str.w	fp, [sp, #12]
 802872c:	f8cd a008 	str.w	sl, [sp, #8]
 8028730:	f8cd c004 	str.w	ip, [sp, #4]
 8028734:	f8cd e000 	str.w	lr, [sp]
 8028738:	4608      	mov	r0, r1
 802873a:	f7ff f939 	bl	80279b0 <WM_CreateWindowAsChild>
 802873e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8028742:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
 8028746:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
 802874a:	2800      	cmp	r0, #0
 802874c:	d150      	bne.n	80287f0 <WM_Init+0x114>
 802874e:	3401      	adds	r4, #1
 8028750:	2c02      	cmp	r4, #2
 8028752:	d1dd      	bne.n	8028710 <WM_Init+0x34>
 8028754:	482d      	ldr	r0, [pc, #180]	; (802880c <WM_Init+0x130>)
 8028756:	f001 fd37 	bl	802a1c8 <WM__AddCriticalHandle>
 802875a:	482d      	ldr	r0, [pc, #180]	; (8028810 <WM_Init+0x134>)
 802875c:	f001 fd34 	bl	802a1c8 <WM__AddCriticalHandle>
 8028760:	482c      	ldr	r0, [pc, #176]	; (8028814 <WM_Init+0x138>)
 8028762:	f001 fd31 	bl	802a1c8 <WM__AddCriticalHandle>
 8028766:	482c      	ldr	r0, [pc, #176]	; (8028818 <WM_Init+0x13c>)
 8028768:	f001 fd2e 	bl	802a1c8 <WM__AddCriticalHandle>
 802876c:	482b      	ldr	r0, [pc, #172]	; (802881c <WM_Init+0x140>)
 802876e:	f001 fd2b 	bl	802a1c8 <WM__AddCriticalHandle>
 8028772:	482b      	ldr	r0, [pc, #172]	; (8028820 <WM_Init+0x144>)
 8028774:	f001 fd28 	bl	802a1c8 <WM__AddCriticalHandle>
 8028778:	f8d8 6000 	ldr.w	r6, [r8]
 802877c:	f7f8 ff9e 	bl	80216bc <GUI_Lock>
 8028780:	683b      	ldr	r3, [r7, #0]
 8028782:	b90e      	cbnz	r6, 8028788 <WM_Init+0xac>
 8028784:	f8d9 6000 	ldr.w	r6, [r9]
 8028788:	649e      	str	r6, [r3, #72]	; 0x48
 802878a:	4634      	mov	r4, r6
 802878c:	e000      	b.n	8028790 <WM_Init+0xb4>
 802878e:	4604      	mov	r4, r0
 8028790:	4620      	mov	r0, r4
 8028792:	f7f7 f8ff 	bl	801f994 <GUI_ALLOC_h2p>
 8028796:	6980      	ldr	r0, [r0, #24]
 8028798:	2800      	cmp	r0, #0
 802879a:	d1f8      	bne.n	802878e <WM_Init+0xb2>
 802879c:	f8d8 3000 	ldr.w	r3, [r8]
 80287a0:	4a20      	ldr	r2, [pc, #128]	; (8028824 <WM_Init+0x148>)
 80287a2:	429c      	cmp	r4, r3
 80287a4:	d021      	beq.n	80287ea <WM_Init+0x10e>
 80287a6:	6853      	ldr	r3, [r2, #4]
 80287a8:	429c      	cmp	r4, r3
 80287aa:	d01d      	beq.n	80287e8 <WM_Init+0x10c>
 80287ac:	f7fa fbce 	bl	8022f4c <LCD_SetClipRectMax>
 80287b0:	4630      	mov	r0, r6
 80287b2:	f7f7 f8ef 	bl	801f994 <GUI_ALLOC_h2p>
 80287b6:	683b      	ldr	r3, [r7, #0]
 80287b8:	f9b0 1000 	ldrsh.w	r1, [r0]
 80287bc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80287c0:	651a      	str	r2, [r3, #80]	; 0x50
 80287c2:	64d9      	str	r1, [r3, #76]	; 0x4c
 80287c4:	f7f8 ff70 	bl	80216a8 <GUI_Unlock>
 80287c8:	683a      	ldr	r2, [r7, #0]
 80287ca:	4b17      	ldr	r3, [pc, #92]	; (8028828 <WM_Init+0x14c>)
 80287cc:	4817      	ldr	r0, [pc, #92]	; (802882c <WM_Init+0x150>)
 80287ce:	626b      	str	r3, [r5, #36]	; 0x24
 80287d0:	2301      	movs	r3, #1
 80287d2:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
 80287d6:	702b      	strb	r3, [r5, #0]
 80287d8:	b005      	add	sp, #20
 80287da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80287de:	f7f7 bfb9 	b.w	8020754 <GUI__RegisterExit>
 80287e2:	b005      	add	sp, #20
 80287e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80287e8:	2001      	movs	r0, #1
 80287ea:	f7f8 fef9 	bl	80215e0 <GUI_SelectLayer>
 80287ee:	e7dd      	b.n	80287ac <WM_Init+0xd0>
 80287f0:	2100      	movs	r1, #0
 80287f2:	f7fe fd4d 	bl	8027290 <WM_InvalidateRect.part.2>
 80287f6:	e7aa      	b.n	802874e <WM_Init+0x72>
 80287f8:	2002e3dc 	.word	0x2002e3dc
 80287fc:	200000e8 	.word	0x200000e8
 8028800:	200308ec 	.word	0x200308ec
 8028804:	200308cc 	.word	0x200308cc
 8028808:	20030908 	.word	0x20030908
 802880c:	20030948 	.word	0x20030948
 8028810:	20030938 	.word	0x20030938
 8028814:	20030928 	.word	0x20030928
 8028818:	20030950 	.word	0x20030950
 802881c:	20030940 	.word	0x20030940
 8028820:	20030930 	.word	0x20030930
 8028824:	200308d4 	.word	0x200308d4
 8028828:	080261cd 	.word	0x080261cd
 802882c:	2002e400 	.word	0x2002e400
 8028830:	200308f0 	.word	0x200308f0
 8028834:	0802736d 	.word	0x0802736d

08028838 <WM_HideWindow>:
 8028838:	b900      	cbnz	r0, 802883c <WM_HideWindow+0x4>
 802883a:	4770      	bx	lr
 802883c:	b510      	push	{r4, lr}
 802883e:	4604      	mov	r4, r0
 8028840:	b082      	sub	sp, #8
 8028842:	f7f8 ff3b 	bl	80216bc <GUI_Lock>
 8028846:	4620      	mov	r0, r4
 8028848:	f7f7 f8ae 	bl	801f9a8 <GUI_ALLOC_LockH>
 802884c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 802884e:	9001      	str	r0, [sp, #4]
 8028850:	0791      	lsls	r1, r2, #30
 8028852:	d406      	bmi.n	8028862 <WM_HideWindow+0x2a>
 8028854:	a801      	add	r0, sp, #4
 8028856:	f7f7 f8b9 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802885a:	f7f8 ff25 	bl	80216a8 <GUI_Unlock>
 802885e:	b002      	add	sp, #8
 8028860:	bd10      	pop	{r4, pc}
 8028862:	f022 0202 	bic.w	r2, r2, #2
 8028866:	6981      	ldr	r1, [r0, #24]
 8028868:	6282      	str	r2, [r0, #40]	; 0x28
 802886a:	6a02      	ldr	r2, [r0, #32]
 802886c:	f7fe ffb4 	bl	80277d8 <WM__InvalidateRectEx>
 8028870:	a801      	add	r0, sp, #4
 8028872:	f7f7 f8ab 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8028876:	f7f8 ff17 	bl	80216a8 <GUI_Unlock>
 802887a:	b002      	add	sp, #8
 802887c:	bd10      	pop	{r4, pc}
 802887e:	bf00      	nop

08028880 <WM_ResizeWindow.part.11>:
 8028880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028884:	4606      	mov	r6, r0
 8028886:	b08a      	sub	sp, #40	; 0x28
 8028888:	4688      	mov	r8, r1
 802888a:	4617      	mov	r7, r2
 802888c:	f7f8 ff16 	bl	80216bc <GUI_Lock>
 8028890:	4630      	mov	r0, r6
 8028892:	f7f7 f889 	bl	801f9a8 <GUI_ALLOC_LockH>
 8028896:	4603      	mov	r3, r0
 8028898:	c803      	ldmia	r0, {r0, r1}
 802889a:	ac04      	add	r4, sp, #16
 802889c:	ad06      	add	r5, sp, #24
 802889e:	e884 0003 	stmia.w	r4, {r0, r1}
 80288a2:	9303      	str	r3, [sp, #12]
 80288a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80288a8:	f1b8 0f00 	cmp.w	r8, #0
 80288ac:	d009      	beq.n	80288c2 <WM_ResizeWindow.part.11+0x42>
 80288ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80288b0:	f402 7220 	and.w	r2, r2, #640	; 0x280
 80288b4:	2a80      	cmp	r2, #128	; 0x80
 80288b6:	d057      	beq.n	8028968 <WM_ResizeWindow.part.11+0xe8>
 80288b8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80288bc:	4490      	add	r8, r2
 80288be:	f8ad 801c 	strh.w	r8, [sp, #28]
 80288c2:	b157      	cbz	r7, 80288da <WM_ResizeWindow.part.11+0x5a>
 80288c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80288c6:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 80288ca:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80288ce:	d052      	beq.n	8028976 <WM_ResizeWindow.part.11+0xf6>
 80288d0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80288d4:	4417      	add	r7, r2
 80288d6:	f8ad 701e 	strh.w	r7, [sp, #30]
 80288da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80288dc:	03d1      	lsls	r1, r2, #15
 80288de:	d43d      	bmi.n	802895c <WM_ResizeWindow.part.11+0xdc>
 80288e0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80288e4:	0792      	lsls	r2, r2, #30
 80288e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80288ea:	d50b      	bpl.n	8028904 <WM_ResizeWindow.part.11+0x84>
 80288ec:	462a      	mov	r2, r5
 80288ee:	4621      	mov	r1, r4
 80288f0:	a808      	add	r0, sp, #32
 80288f2:	f7f7 fc03 	bl	80200fc <GUI_MergeRect>
 80288f6:	9b03      	ldr	r3, [sp, #12]
 80288f8:	a808      	add	r0, sp, #32
 80288fa:	6a1a      	ldr	r2, [r3, #32]
 80288fc:	6999      	ldr	r1, [r3, #24]
 80288fe:	f7fe ff6b 	bl	80277d8 <WM__InvalidateRectEx>
 8028902:	9b03      	ldr	r3, [sp, #12]
 8028904:	f9bd 001e 	ldrsh.w	r0, [sp, #30]
 8028908:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 802890c:	f9bd c01c 	ldrsh.w	ip, [sp, #28]
 8028910:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 8028914:	f9bd 701a 	ldrsh.w	r7, [sp, #26]
 8028918:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 802891c:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
 8028920:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 8028924:	1b04      	subs	r4, r0, r4
 8028926:	9400      	str	r4, [sp, #0]
 8028928:	ac0a      	add	r4, sp, #40	; 0x28
 802892a:	1aba      	subs	r2, r7, r2
 802892c:	4618      	mov	r0, r3
 802892e:	1a69      	subs	r1, r5, r1
 8028930:	ebce 030c 	rsb	r3, lr, ip
 8028934:	f001 fbc8 	bl	802a0c8 <WM__UpdateChildPositions>
 8028938:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 802893c:	f101 0008 	add.w	r0, r1, #8
 8028940:	f7f9 fc9e 	bl	8022280 <GUI__IntersectRect>
 8028944:	2105      	movs	r1, #5
 8028946:	4630      	mov	r0, r6
 8028948:	f7fe ffbc 	bl	80278c4 <WM__SendMsgNoData>
 802894c:	4620      	mov	r0, r4
 802894e:	f7f7 f83d 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8028952:	f7f8 fea9 	bl	80216a8 <GUI_Unlock>
 8028956:	b00a      	add	sp, #40	; 0x28
 8028958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802895c:	4630      	mov	r0, r6
 802895e:	f7fe f92b 	bl	8026bb8 <WM__InvalidateDrawAndDescs>
 8028962:	9b03      	ldr	r3, [sp, #12]
 8028964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8028966:	e7bb      	b.n	80288e0 <WM_ResizeWindow.part.11+0x60>
 8028968:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 802896c:	ebc8 0802 	rsb	r8, r8, r2
 8028970:	f8ad 8018 	strh.w	r8, [sp, #24]
 8028974:	e7a5      	b.n	80288c2 <WM_ResizeWindow.part.11+0x42>
 8028976:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 802897a:	1bd7      	subs	r7, r2, r7
 802897c:	f8ad 701a 	strh.w	r7, [sp, #26]
 8028980:	e7ab      	b.n	80288da <WM_ResizeWindow.part.11+0x5a>
 8028982:	bf00      	nop

08028984 <_GetDialogItem.part.4>:
 8028984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028988:	b087      	sub	sp, #28
 802898a:	460d      	mov	r5, r1
 802898c:	f7f7 f802 	bl	801f994 <GUI_ALLOC_h2p>
 8028990:	69c3      	ldr	r3, [r0, #28]
 8028992:	9301      	str	r3, [sp, #4]
 8028994:	2b00      	cmp	r3, #0
 8028996:	d04f      	beq.n	8028a38 <_GetDialogItem.part.4+0xb4>
 8028998:	2400      	movs	r4, #0
 802899a:	9801      	ldr	r0, [sp, #4]
 802899c:	f7f6 fffa 	bl	801f994 <GUI_ALLOC_h2p>
 80289a0:	69c6      	ldr	r6, [r0, #28]
 80289a2:	2e00      	cmp	r6, #0
 80289a4:	d04d      	beq.n	8028a42 <_GetDialogItem.part.4+0xbe>
 80289a6:	f10d 0a08 	add.w	sl, sp, #8
 80289aa:	2715      	movs	r7, #21
 80289ac:	e004      	b.n	80289b8 <_GetDialogItem.part.4+0x34>
 80289ae:	f7f6 fff1 	bl	801f994 <GUI_ALLOC_h2p>
 80289b2:	6a06      	ldr	r6, [r0, #32]
 80289b4:	2e00      	cmp	r6, #0
 80289b6:	d044      	beq.n	8028a42 <_GetDialogItem.part.4+0xbe>
 80289b8:	4630      	mov	r0, r6
 80289ba:	4651      	mov	r1, sl
 80289bc:	f8ca 4000 	str.w	r4, [sl]
 80289c0:	f8ca 4004 	str.w	r4, [sl, #4]
 80289c4:	f8ca 4008 	str.w	r4, [sl, #8]
 80289c8:	f8ca 400c 	str.w	r4, [sl, #12]
 80289cc:	9702      	str	r7, [sp, #8]
 80289ce:	f7fe ff69 	bl	80278a4 <WM_SendMessage>
 80289d2:	9b05      	ldr	r3, [sp, #20]
 80289d4:	429d      	cmp	r5, r3
 80289d6:	4630      	mov	r0, r6
 80289d8:	d1e9      	bne.n	80289ae <_GetDialogItem.part.4+0x2a>
 80289da:	e02e      	b.n	8028a3a <_GetDialogItem.part.4+0xb6>
 80289dc:	4629      	mov	r1, r5
 80289de:	4650      	mov	r0, sl
 80289e0:	f7ff ffd0 	bl	8028984 <_GetDialogItem.part.4>
 80289e4:	2800      	cmp	r0, #0
 80289e6:	d179      	bne.n	8028adc <_GetDialogItem.part.4+0x158>
 80289e8:	4650      	mov	r0, sl
 80289ea:	f7f6 ffd3 	bl	801f994 <GUI_ALLOC_h2p>
 80289ee:	f8d0 a020 	ldr.w	sl, [r0, #32]
 80289f2:	f1ba 0f00 	cmp.w	sl, #0
 80289f6:	f040 80a3 	bne.w	8028b40 <_GetDialogItem.part.4+0x1bc>
 80289fa:	4640      	mov	r0, r8
 80289fc:	f7f6 ffca 	bl	801f994 <GUI_ALLOC_h2p>
 8028a00:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8028a04:	f1b8 0f00 	cmp.w	r8, #0
 8028a08:	d172      	bne.n	8028af0 <_GetDialogItem.part.4+0x16c>
 8028a0a:	4648      	mov	r0, r9
 8028a0c:	f7f6 ffc2 	bl	801f994 <GUI_ALLOC_h2p>
 8028a10:	f8d0 9020 	ldr.w	r9, [r0, #32]
 8028a14:	f1b9 0f00 	cmp.w	r9, #0
 8028a18:	d141      	bne.n	8028a9e <_GetDialogItem.part.4+0x11a>
 8028a1a:	4658      	mov	r0, fp
 8028a1c:	f7f6 ffba 	bl	801f994 <GUI_ALLOC_h2p>
 8028a20:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8028a24:	f1bb 0f00 	cmp.w	fp, #0
 8028a28:	d113      	bne.n	8028a52 <_GetDialogItem.part.4+0xce>
 8028a2a:	9801      	ldr	r0, [sp, #4]
 8028a2c:	f7f6 ffb2 	bl	801f994 <GUI_ALLOC_h2p>
 8028a30:	6a03      	ldr	r3, [r0, #32]
 8028a32:	9301      	str	r3, [sp, #4]
 8028a34:	2b00      	cmp	r3, #0
 8028a36:	d1b0      	bne.n	802899a <_GetDialogItem.part.4+0x16>
 8028a38:	2600      	movs	r6, #0
 8028a3a:	4630      	mov	r0, r6
 8028a3c:	b007      	add	sp, #28
 8028a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028a42:	9801      	ldr	r0, [sp, #4]
 8028a44:	f7f6 ffa6 	bl	801f994 <GUI_ALLOC_h2p>
 8028a48:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 8028a4c:	f1bb 0f00 	cmp.w	fp, #0
 8028a50:	d0eb      	beq.n	8028a2a <_GetDialogItem.part.4+0xa6>
 8028a52:	4658      	mov	r0, fp
 8028a54:	f7f6 ff9e 	bl	801f994 <GUI_ALLOC_h2p>
 8028a58:	69c6      	ldr	r6, [r0, #28]
 8028a5a:	b1c6      	cbz	r6, 8028a8e <_GetDialogItem.part.4+0x10a>
 8028a5c:	f10d 0a08 	add.w	sl, sp, #8
 8028a60:	2715      	movs	r7, #21
 8028a62:	4630      	mov	r0, r6
 8028a64:	4651      	mov	r1, sl
 8028a66:	f8ca 4000 	str.w	r4, [sl]
 8028a6a:	f8ca 4004 	str.w	r4, [sl, #4]
 8028a6e:	f8ca 4008 	str.w	r4, [sl, #8]
 8028a72:	f8ca 400c 	str.w	r4, [sl, #12]
 8028a76:	9702      	str	r7, [sp, #8]
 8028a78:	f7fe ff14 	bl	80278a4 <WM_SendMessage>
 8028a7c:	9b05      	ldr	r3, [sp, #20]
 8028a7e:	429d      	cmp	r5, r3
 8028a80:	4630      	mov	r0, r6
 8028a82:	d0da      	beq.n	8028a3a <_GetDialogItem.part.4+0xb6>
 8028a84:	f7f6 ff86 	bl	801f994 <GUI_ALLOC_h2p>
 8028a88:	6a06      	ldr	r6, [r0, #32]
 8028a8a:	2e00      	cmp	r6, #0
 8028a8c:	d1e9      	bne.n	8028a62 <_GetDialogItem.part.4+0xde>
 8028a8e:	4658      	mov	r0, fp
 8028a90:	f7f6 ff80 	bl	801f994 <GUI_ALLOC_h2p>
 8028a94:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8028a98:	f1b9 0f00 	cmp.w	r9, #0
 8028a9c:	d0bd      	beq.n	8028a1a <_GetDialogItem.part.4+0x96>
 8028a9e:	4648      	mov	r0, r9
 8028aa0:	f7f6 ff78 	bl	801f994 <GUI_ALLOC_h2p>
 8028aa4:	69c6      	ldr	r6, [r0, #28]
 8028aa6:	b1de      	cbz	r6, 8028ae0 <_GetDialogItem.part.4+0x15c>
 8028aa8:	f10d 0a08 	add.w	sl, sp, #8
 8028aac:	2715      	movs	r7, #21
 8028aae:	e003      	b.n	8028ab8 <_GetDialogItem.part.4+0x134>
 8028ab0:	f7f6 ff70 	bl	801f994 <GUI_ALLOC_h2p>
 8028ab4:	6a06      	ldr	r6, [r0, #32]
 8028ab6:	b19e      	cbz	r6, 8028ae0 <_GetDialogItem.part.4+0x15c>
 8028ab8:	4630      	mov	r0, r6
 8028aba:	4651      	mov	r1, sl
 8028abc:	f8ca 4000 	str.w	r4, [sl]
 8028ac0:	f8ca 4004 	str.w	r4, [sl, #4]
 8028ac4:	f8ca 4008 	str.w	r4, [sl, #8]
 8028ac8:	f8ca 400c 	str.w	r4, [sl, #12]
 8028acc:	9702      	str	r7, [sp, #8]
 8028ace:	f7fe fee9 	bl	80278a4 <WM_SendMessage>
 8028ad2:	9b05      	ldr	r3, [sp, #20]
 8028ad4:	429d      	cmp	r5, r3
 8028ad6:	4630      	mov	r0, r6
 8028ad8:	d1ea      	bne.n	8028ab0 <_GetDialogItem.part.4+0x12c>
 8028ada:	4630      	mov	r0, r6
 8028adc:	4606      	mov	r6, r0
 8028ade:	e7ac      	b.n	8028a3a <_GetDialogItem.part.4+0xb6>
 8028ae0:	4648      	mov	r0, r9
 8028ae2:	f7f6 ff57 	bl	801f994 <GUI_ALLOC_h2p>
 8028ae6:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8028aea:	f1b8 0f00 	cmp.w	r8, #0
 8028aee:	d08c      	beq.n	8028a0a <_GetDialogItem.part.4+0x86>
 8028af0:	4640      	mov	r0, r8
 8028af2:	f7f6 ff4f 	bl	801f994 <GUI_ALLOC_h2p>
 8028af6:	69c6      	ldr	r6, [r0, #28]
 8028af8:	b1ce      	cbz	r6, 8028b2e <_GetDialogItem.part.4+0x1aa>
 8028afa:	f10d 0a08 	add.w	sl, sp, #8
 8028afe:	2715      	movs	r7, #21
 8028b00:	e003      	b.n	8028b0a <_GetDialogItem.part.4+0x186>
 8028b02:	f7f6 ff47 	bl	801f994 <GUI_ALLOC_h2p>
 8028b06:	6a06      	ldr	r6, [r0, #32]
 8028b08:	b18e      	cbz	r6, 8028b2e <_GetDialogItem.part.4+0x1aa>
 8028b0a:	4630      	mov	r0, r6
 8028b0c:	4651      	mov	r1, sl
 8028b0e:	f8ca 4000 	str.w	r4, [sl]
 8028b12:	f8ca 4004 	str.w	r4, [sl, #4]
 8028b16:	f8ca 4008 	str.w	r4, [sl, #8]
 8028b1a:	f8ca 400c 	str.w	r4, [sl, #12]
 8028b1e:	9702      	str	r7, [sp, #8]
 8028b20:	f7fe fec0 	bl	80278a4 <WM_SendMessage>
 8028b24:	9b05      	ldr	r3, [sp, #20]
 8028b26:	429d      	cmp	r5, r3
 8028b28:	4630      	mov	r0, r6
 8028b2a:	d1ea      	bne.n	8028b02 <_GetDialogItem.part.4+0x17e>
 8028b2c:	e7d5      	b.n	8028ada <_GetDialogItem.part.4+0x156>
 8028b2e:	4640      	mov	r0, r8
 8028b30:	f7f6 ff30 	bl	801f994 <GUI_ALLOC_h2p>
 8028b34:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 8028b38:	f1ba 0f00 	cmp.w	sl, #0
 8028b3c:	f43f af5d 	beq.w	80289fa <_GetDialogItem.part.4+0x76>
 8028b40:	4650      	mov	r0, sl
 8028b42:	f7f6 ff27 	bl	801f994 <GUI_ALLOC_h2p>
 8028b46:	69c7      	ldr	r7, [r0, #28]
 8028b48:	2615      	movs	r6, #21
 8028b4a:	b937      	cbnz	r7, 8028b5a <_GetDialogItem.part.4+0x1d6>
 8028b4c:	e746      	b.n	80289dc <_GetDialogItem.part.4+0x58>
 8028b4e:	f7f6 ff21 	bl	801f994 <GUI_ALLOC_h2p>
 8028b52:	6a07      	ldr	r7, [r0, #32]
 8028b54:	2f00      	cmp	r7, #0
 8028b56:	f43f af41 	beq.w	80289dc <_GetDialogItem.part.4+0x58>
 8028b5a:	4638      	mov	r0, r7
 8028b5c:	a902      	add	r1, sp, #8
 8028b5e:	9403      	str	r4, [sp, #12]
 8028b60:	9404      	str	r4, [sp, #16]
 8028b62:	9405      	str	r4, [sp, #20]
 8028b64:	9602      	str	r6, [sp, #8]
 8028b66:	f7fe fe9d 	bl	80278a4 <WM_SendMessage>
 8028b6a:	9a05      	ldr	r2, [sp, #20]
 8028b6c:	4295      	cmp	r5, r2
 8028b6e:	4638      	mov	r0, r7
 8028b70:	d1ed      	bne.n	8028b4e <_GetDialogItem.part.4+0x1ca>
 8028b72:	4638      	mov	r0, r7
 8028b74:	4606      	mov	r6, r0
 8028b76:	e760      	b.n	8028a3a <_GetDialogItem.part.4+0xb6>

08028b78 <_GetDialogItem>:
 8028b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028b7c:	b084      	sub	sp, #16
 8028b7e:	460e      	mov	r6, r1
 8028b80:	4680      	mov	r8, r0
 8028b82:	f7f6 ff07 	bl	801f994 <GUI_ALLOC_h2p>
 8028b86:	69c4      	ldr	r4, [r0, #28]
 8028b88:	b1b4      	cbz	r4, 8028bb8 <_GetDialogItem+0x40>
 8028b8a:	2500      	movs	r5, #0
 8028b8c:	2715      	movs	r7, #21
 8028b8e:	e003      	b.n	8028b98 <_GetDialogItem+0x20>
 8028b90:	f7f6 ff00 	bl	801f994 <GUI_ALLOC_h2p>
 8028b94:	6a04      	ldr	r4, [r0, #32]
 8028b96:	b17c      	cbz	r4, 8028bb8 <_GetDialogItem+0x40>
 8028b98:	4620      	mov	r0, r4
 8028b9a:	4669      	mov	r1, sp
 8028b9c:	9501      	str	r5, [sp, #4]
 8028b9e:	9502      	str	r5, [sp, #8]
 8028ba0:	9503      	str	r5, [sp, #12]
 8028ba2:	9700      	str	r7, [sp, #0]
 8028ba4:	f7fe fe7e 	bl	80278a4 <WM_SendMessage>
 8028ba8:	9b03      	ldr	r3, [sp, #12]
 8028baa:	429e      	cmp	r6, r3
 8028bac:	4620      	mov	r0, r4
 8028bae:	d1ef      	bne.n	8028b90 <_GetDialogItem+0x18>
 8028bb0:	4620      	mov	r0, r4
 8028bb2:	b004      	add	sp, #16
 8028bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028bb8:	4631      	mov	r1, r6
 8028bba:	4640      	mov	r0, r8
 8028bbc:	f7ff fee2 	bl	8028984 <_GetDialogItem.part.4>
 8028bc0:	b004      	add	sp, #16
 8028bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028bc6:	bf00      	nop

08028bc8 <WM_ForEachDesc>:
 8028bc8:	b570      	push	{r4, r5, r6, lr}
 8028bca:	4604      	mov	r4, r0
 8028bcc:	460d      	mov	r5, r1
 8028bce:	4616      	mov	r6, r2
 8028bd0:	f7f8 fd74 	bl	80216bc <GUI_Lock>
 8028bd4:	4632      	mov	r2, r6
 8028bd6:	4629      	mov	r1, r5
 8028bd8:	4620      	mov	r0, r4
 8028bda:	f001 f8ef 	bl	8029dbc <WM__ForEachDesc>
 8028bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8028be2:	f7f8 bd61 	b.w	80216a8 <GUI_Unlock>
 8028be6:	bf00      	nop

08028be8 <WM_GetClientRect>:
 8028be8:	b538      	push	{r3, r4, r5, lr}
 8028bea:	4605      	mov	r5, r0
 8028bec:	f7f8 fd66 	bl	80216bc <GUI_Lock>
 8028bf0:	4b08      	ldr	r3, [pc, #32]	; (8028c14 <WM_GetClientRect+0x2c>)
 8028bf2:	681c      	ldr	r4, [r3, #0]
 8028bf4:	b914      	cbnz	r4, 8028bfc <WM_GetClientRect+0x14>
 8028bf6:	4b08      	ldr	r3, [pc, #32]	; (8028c18 <WM_GetClientRect+0x30>)
 8028bf8:	681b      	ldr	r3, [r3, #0]
 8028bfa:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8028bfc:	f7f8 fd5e 	bl	80216bc <GUI_Lock>
 8028c00:	4629      	mov	r1, r5
 8028c02:	4620      	mov	r0, r4
 8028c04:	f001 fb08 	bl	802a218 <WM__GetClientRectEx>
 8028c08:	f7f8 fd4e 	bl	80216a8 <GUI_Unlock>
 8028c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028c10:	f7f8 bd4a 	b.w	80216a8 <GUI_Unlock>
 8028c14:	200308d0 	.word	0x200308d0
 8028c18:	200000e8 	.word	0x200000e8

08028c1c <WM_GetClientWindow>:
 8028c1c:	b500      	push	{lr}
 8028c1e:	b085      	sub	sp, #20
 8028c20:	a904      	add	r1, sp, #16
 8028c22:	2317      	movs	r3, #23
 8028c24:	f841 3d10 	str.w	r3, [r1, #-16]!
 8028c28:	2300      	movs	r3, #0
 8028c2a:	9303      	str	r3, [sp, #12]
 8028c2c:	f7fe fe3a 	bl	80278a4 <WM_SendMessage>
 8028c30:	9803      	ldr	r0, [sp, #12]
 8028c32:	b005      	add	sp, #20
 8028c34:	f85d fb04 	ldr.w	pc, [sp], #4

08028c38 <WM_GetDesktopWindow>:
 8028c38:	4a03      	ldr	r2, [pc, #12]	; (8028c48 <WM_GetDesktopWindow+0x10>)
 8028c3a:	4b04      	ldr	r3, [pc, #16]	; (8028c4c <WM_GetDesktopWindow+0x14>)
 8028c3c:	6812      	ldr	r2, [r2, #0]
 8028c3e:	7c52      	ldrb	r2, [r2, #17]
 8028c40:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8028c44:	4770      	bx	lr
 8028c46:	bf00      	nop
 8028c48:	200000e8 	.word	0x200000e8
 8028c4c:	200308d4 	.word	0x200308d4

08028c50 <WM_GetDesktopWindowEx>:
 8028c50:	2801      	cmp	r0, #1
 8028c52:	bf9a      	itte	ls
 8028c54:	4b02      	ldrls	r3, [pc, #8]	; (8028c60 <WM_GetDesktopWindowEx+0x10>)
 8028c56:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8028c5a:	2000      	movhi	r0, #0
 8028c5c:	4770      	bx	lr
 8028c5e:	bf00      	nop
 8028c60:	200308d4 	.word	0x200308d4

08028c64 <WM_BringToBottom>:
 8028c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8028c68:	4604      	mov	r4, r0
 8028c6a:	b087      	sub	sp, #28
 8028c6c:	f7f8 fd26 	bl	80216bc <GUI_Lock>
 8028c70:	b924      	cbnz	r4, 8028c7c <WM_BringToBottom+0x18>
 8028c72:	f7f8 fd19 	bl	80216a8 <GUI_Unlock>
 8028c76:	b007      	add	sp, #28
 8028c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028c7c:	4620      	mov	r0, r4
 8028c7e:	f7f6 fe93 	bl	801f9a8 <GUI_ALLOC_LockH>
 8028c82:	4603      	mov	r3, r0
 8028c84:	c803      	ldmia	r0, {r0, r1}
 8028c86:	ad04      	add	r5, sp, #16
 8028c88:	e885 0003 	stmia.w	r5, {r0, r1}
 8028c8c:	a801      	add	r0, sp, #4
 8028c8e:	9301      	str	r3, [sp, #4]
 8028c90:	6a1f      	ldr	r7, [r3, #32]
 8028c92:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
 8028c96:	f7f6 fe99 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8028c9a:	4620      	mov	r0, r4
 8028c9c:	f001 f970 	bl	8029f80 <WM__GetPrevSibling>
 8028ca0:	4606      	mov	r6, r0
 8028ca2:	2800      	cmp	r0, #0
 8028ca4:	d0e5      	beq.n	8028c72 <WM_BringToBottom+0xe>
 8028ca6:	f7f8 fd09 	bl	80216bc <GUI_Lock>
 8028caa:	4620      	mov	r0, r4
 8028cac:	f7f6 fe72 	bl	801f994 <GUI_ALLOC_h2p>
 8028cb0:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8028cb4:	f7f8 fcf8 	bl	80216a8 <GUI_Unlock>
 8028cb8:	f018 0f02 	tst.w	r8, #2
 8028cbc:	d120      	bne.n	8028d00 <WM_BringToBottom+0x9c>
 8028cbe:	4620      	mov	r0, r4
 8028cc0:	f7f6 fe72 	bl	801f9a8 <GUI_ALLOC_LockH>
 8028cc4:	9001      	str	r0, [sp, #4]
 8028cc6:	4648      	mov	r0, r9
 8028cc8:	f7f6 fe6e 	bl	801f9a8 <GUI_ALLOC_LockH>
 8028ccc:	9003      	str	r0, [sp, #12]
 8028cce:	4630      	mov	r0, r6
 8028cd0:	f7f6 fe6a 	bl	801f9a8 <GUI_ALLOC_LockH>
 8028cd4:	9a03      	ldr	r2, [sp, #12]
 8028cd6:	9901      	ldr	r1, [sp, #4]
 8028cd8:	69d5      	ldr	r5, [r2, #28]
 8028cda:	6207      	str	r7, [r0, #32]
 8028cdc:	4603      	mov	r3, r0
 8028cde:	620d      	str	r5, [r1, #32]
 8028ce0:	a801      	add	r0, sp, #4
 8028ce2:	61d4      	str	r4, [r2, #28]
 8028ce4:	9302      	str	r3, [sp, #8]
 8028ce6:	f7f6 fe71 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8028cea:	a803      	add	r0, sp, #12
 8028cec:	f7f6 fe6e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8028cf0:	a802      	add	r0, sp, #8
 8028cf2:	f7f6 fe6b 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8028cf6:	f7f8 fcd7 	bl	80216a8 <GUI_Unlock>
 8028cfa:	b007      	add	sp, #28
 8028cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8028d00:	4628      	mov	r0, r5
 8028d02:	463a      	mov	r2, r7
 8028d04:	4649      	mov	r1, r9
 8028d06:	f7fe fd67 	bl	80277d8 <WM__InvalidateRectEx>
 8028d0a:	e7d8      	b.n	8028cbe <WM_BringToBottom+0x5a>

08028d0c <WM_GetDialogItem>:
 8028d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028d10:	4680      	mov	r8, r0
 8028d12:	b086      	sub	sp, #24
 8028d14:	b918      	cbnz	r0, 8028d1e <WM_GetDialogItem+0x12>
 8028d16:	4640      	mov	r0, r8
 8028d18:	b006      	add	sp, #24
 8028d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028d1e:	460e      	mov	r6, r1
 8028d20:	f7f8 fccc 	bl	80216bc <GUI_Lock>
 8028d24:	4640      	mov	r0, r8
 8028d26:	f7f6 fe3f 	bl	801f9a8 <GUI_ALLOC_LockH>
 8028d2a:	ab06      	add	r3, sp, #24
 8028d2c:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8028d30:	f843 0d14 	str.w	r0, [r3, #-20]!
 8028d34:	4618      	mov	r0, r3
 8028d36:	f7f6 fe49 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8028d3a:	f1b8 0f00 	cmp.w	r8, #0
 8028d3e:	d044      	beq.n	8028dca <WM_GetDialogItem+0xbe>
 8028d40:	2500      	movs	r5, #0
 8028d42:	2715      	movs	r7, #21
 8028d44:	a902      	add	r1, sp, #8
 8028d46:	4640      	mov	r0, r8
 8028d48:	9503      	str	r5, [sp, #12]
 8028d4a:	9504      	str	r5, [sp, #16]
 8028d4c:	9505      	str	r5, [sp, #20]
 8028d4e:	9702      	str	r7, [sp, #8]
 8028d50:	f7fe fda8 	bl	80278a4 <WM_SendMessage>
 8028d54:	9b05      	ldr	r3, [sp, #20]
 8028d56:	429e      	cmp	r6, r3
 8028d58:	d016      	beq.n	8028d88 <WM_GetDialogItem+0x7c>
 8028d5a:	4640      	mov	r0, r8
 8028d5c:	f7f6 fe1a 	bl	801f994 <GUI_ALLOC_h2p>
 8028d60:	69c4      	ldr	r4, [r0, #28]
 8028d62:	b924      	cbnz	r4, 8028d6e <WM_GetDialogItem+0x62>
 8028d64:	e016      	b.n	8028d94 <WM_GetDialogItem+0x88>
 8028d66:	f7f6 fe15 	bl	801f994 <GUI_ALLOC_h2p>
 8028d6a:	6a04      	ldr	r4, [r0, #32]
 8028d6c:	b194      	cbz	r4, 8028d94 <WM_GetDialogItem+0x88>
 8028d6e:	4620      	mov	r0, r4
 8028d70:	a902      	add	r1, sp, #8
 8028d72:	9503      	str	r5, [sp, #12]
 8028d74:	9504      	str	r5, [sp, #16]
 8028d76:	9505      	str	r5, [sp, #20]
 8028d78:	9702      	str	r7, [sp, #8]
 8028d7a:	f7fe fd93 	bl	80278a4 <WM_SendMessage>
 8028d7e:	9b05      	ldr	r3, [sp, #20]
 8028d80:	429e      	cmp	r6, r3
 8028d82:	4620      	mov	r0, r4
 8028d84:	d1ef      	bne.n	8028d66 <WM_GetDialogItem+0x5a>
 8028d86:	46a0      	mov	r8, r4
 8028d88:	f7f8 fc8e 	bl	80216a8 <GUI_Unlock>
 8028d8c:	4640      	mov	r0, r8
 8028d8e:	b006      	add	sp, #24
 8028d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028d94:	4640      	mov	r0, r8
 8028d96:	f7f6 fdfd 	bl	801f994 <GUI_ALLOC_h2p>
 8028d9a:	69c4      	ldr	r4, [r0, #28]
 8028d9c:	b92c      	cbnz	r4, 8028daa <WM_GetDialogItem+0x9e>
 8028d9e:	e00c      	b.n	8028dba <WM_GetDialogItem+0xae>
 8028da0:	4620      	mov	r0, r4
 8028da2:	f7f6 fdf7 	bl	801f994 <GUI_ALLOC_h2p>
 8028da6:	6a04      	ldr	r4, [r0, #32]
 8028da8:	b13c      	cbz	r4, 8028dba <WM_GetDialogItem+0xae>
 8028daa:	4631      	mov	r1, r6
 8028dac:	4620      	mov	r0, r4
 8028dae:	f7ff fee3 	bl	8028b78 <_GetDialogItem>
 8028db2:	2800      	cmp	r0, #0
 8028db4:	d0f4      	beq.n	8028da0 <WM_GetDialogItem+0x94>
 8028db6:	4680      	mov	r8, r0
 8028db8:	e7e6      	b.n	8028d88 <WM_GetDialogItem+0x7c>
 8028dba:	4640      	mov	r0, r8
 8028dbc:	f7f6 fdea 	bl	801f994 <GUI_ALLOC_h2p>
 8028dc0:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8028dc4:	f1b8 0f00 	cmp.w	r8, #0
 8028dc8:	d1bc      	bne.n	8028d44 <WM_GetDialogItem+0x38>
 8028dca:	f04f 0800 	mov.w	r8, #0
 8028dce:	e7db      	b.n	8028d88 <WM_GetDialogItem+0x7c>

08028dd0 <WM_GetFirstChild>:
 8028dd0:	b510      	push	{r4, lr}
 8028dd2:	4604      	mov	r4, r0
 8028dd4:	b138      	cbz	r0, 8028de6 <WM_GetFirstChild+0x16>
 8028dd6:	f7f8 fc71 	bl	80216bc <GUI_Lock>
 8028dda:	4620      	mov	r0, r4
 8028ddc:	f7f6 fdda 	bl	801f994 <GUI_ALLOC_h2p>
 8028de0:	69c4      	ldr	r4, [r0, #28]
 8028de2:	f7f8 fc61 	bl	80216a8 <GUI_Unlock>
 8028de6:	4620      	mov	r0, r4
 8028de8:	bd10      	pop	{r4, pc}
 8028dea:	bf00      	nop

08028dec <WM_GetFocusedWindow>:
 8028dec:	b510      	push	{r4, lr}
 8028dee:	f7f8 fc65 	bl	80216bc <GUI_Lock>
 8028df2:	4a04      	ldr	r2, [pc, #16]	; (8028e04 <WM_GetFocusedWindow+0x18>)
 8028df4:	4b04      	ldr	r3, [pc, #16]	; (8028e08 <WM_GetFocusedWindow+0x1c>)
 8028df6:	6812      	ldr	r2, [r2, #0]
 8028df8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8028dfc:	f7f8 fc54 	bl	80216a8 <GUI_Unlock>
 8028e00:	4620      	mov	r0, r4
 8028e02:	bd10      	pop	{r4, pc}
 8028e04:	200308f4 	.word	0x200308f4
 8028e08:	200308e4 	.word	0x200308e4

08028e0c <WM_GetId>:
 8028e0c:	b500      	push	{lr}
 8028e0e:	b085      	sub	sp, #20
 8028e10:	2300      	movs	r3, #0
 8028e12:	2215      	movs	r2, #21
 8028e14:	4669      	mov	r1, sp
 8028e16:	9301      	str	r3, [sp, #4]
 8028e18:	9302      	str	r3, [sp, #8]
 8028e1a:	9303      	str	r3, [sp, #12]
 8028e1c:	9200      	str	r2, [sp, #0]
 8028e1e:	f7fe fd41 	bl	80278a4 <WM_SendMessage>
 8028e22:	9803      	ldr	r0, [sp, #12]
 8028e24:	b005      	add	sp, #20
 8028e26:	f85d fb04 	ldr.w	pc, [sp], #4
 8028e2a:	bf00      	nop

08028e2c <WM_GetWindowOrgX>:
 8028e2c:	b510      	push	{r4, lr}
 8028e2e:	4604      	mov	r4, r0
 8028e30:	b140      	cbz	r0, 8028e44 <WM_GetWindowOrgX+0x18>
 8028e32:	f7f8 fc43 	bl	80216bc <GUI_Lock>
 8028e36:	4620      	mov	r0, r4
 8028e38:	f7f6 fdac 	bl	801f994 <GUI_ALLOC_h2p>
 8028e3c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8028e40:	f7f8 fc32 	bl	80216a8 <GUI_Unlock>
 8028e44:	4620      	mov	r0, r4
 8028e46:	bd10      	pop	{r4, pc}

08028e48 <WM_GetParent>:
 8028e48:	b510      	push	{r4, lr}
 8028e4a:	4604      	mov	r4, r0
 8028e4c:	b138      	cbz	r0, 8028e5e <WM_GetParent+0x16>
 8028e4e:	f7f8 fc35 	bl	80216bc <GUI_Lock>
 8028e52:	4620      	mov	r0, r4
 8028e54:	f7f6 fd9e 	bl	801f994 <GUI_ALLOC_h2p>
 8028e58:	6984      	ldr	r4, [r0, #24]
 8028e5a:	f7f8 fc25 	bl	80216a8 <GUI_Unlock>
 8028e5e:	4620      	mov	r0, r4
 8028e60:	bd10      	pop	{r4, pc}
 8028e62:	bf00      	nop

08028e64 <WM_HasFocus>:
 8028e64:	4a04      	ldr	r2, [pc, #16]	; (8028e78 <WM_HasFocus+0x14>)
 8028e66:	4b05      	ldr	r3, [pc, #20]	; (8028e7c <WM_HasFocus+0x18>)
 8028e68:	6812      	ldr	r2, [r2, #0]
 8028e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8028e6e:	1a18      	subs	r0, r3, r0
 8028e70:	fab0 f080 	clz	r0, r0
 8028e74:	0940      	lsrs	r0, r0, #5
 8028e76:	4770      	bx	lr
 8028e78:	200308f4 	.word	0x200308f4
 8028e7c:	200308e4 	.word	0x200308e4

08028e80 <WM_IsFocusable>:
 8028e80:	b908      	cbnz	r0, 8028e86 <WM_IsFocusable+0x6>
 8028e82:	2000      	movs	r0, #0
 8028e84:	4770      	bx	lr
 8028e86:	b530      	push	{r4, r5, lr}
 8028e88:	4604      	mov	r4, r0
 8028e8a:	b085      	sub	sp, #20
 8028e8c:	f7f8 fc16 	bl	80216bc <GUI_Lock>
 8028e90:	4620      	mov	r0, r4
 8028e92:	f7f6 fd7f 	bl	801f994 <GUI_ALLOC_h2p>
 8028e96:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8028e98:	f7f8 fc06 	bl	80216a8 <GUI_Unlock>
 8028e9c:	07ab      	lsls	r3, r5, #30
 8028e9e:	d502      	bpl.n	8028ea6 <WM_IsFocusable+0x26>
 8028ea0:	f015 0510 	ands.w	r5, r5, #16
 8028ea4:	d002      	beq.n	8028eac <WM_IsFocusable+0x2c>
 8028ea6:	2000      	movs	r0, #0
 8028ea8:	b005      	add	sp, #20
 8028eaa:	bd30      	pop	{r4, r5, pc}
 8028eac:	a904      	add	r1, sp, #16
 8028eae:	231f      	movs	r3, #31
 8028eb0:	4620      	mov	r0, r4
 8028eb2:	f841 3d10 	str.w	r3, [r1, #-16]!
 8028eb6:	9503      	str	r5, [sp, #12]
 8028eb8:	f7fe fcf4 	bl	80278a4 <WM_SendMessage>
 8028ebc:	9803      	ldr	r0, [sp, #12]
 8028ebe:	e7f3      	b.n	8028ea8 <WM_IsFocusable+0x28>

08028ec0 <WM_IsWindow>:
 8028ec0:	b510      	push	{r4, lr}
 8028ec2:	4604      	mov	r4, r0
 8028ec4:	f7f8 fbfa 	bl	80216bc <GUI_Lock>
 8028ec8:	4620      	mov	r0, r4
 8028eca:	f7fd fe5d 	bl	8026b88 <WM__IsWindow>
 8028ece:	4604      	mov	r4, r0
 8028ed0:	f7f8 fbea 	bl	80216a8 <GUI_Unlock>
 8028ed4:	4620      	mov	r0, r4
 8028ed6:	bd10      	pop	{r4, pc}

08028ed8 <WM_NotifyParent>:
 8028ed8:	b530      	push	{r4, r5, lr}
 8028eda:	b085      	sub	sp, #20
 8028edc:	4604      	mov	r4, r0
 8028ede:	2326      	movs	r3, #38	; 0x26
 8028ee0:	9103      	str	r1, [sp, #12]
 8028ee2:	9300      	str	r3, [sp, #0]
 8028ee4:	f7f8 fbea 	bl	80216bc <GUI_Lock>
 8028ee8:	b91c      	cbnz	r4, 8028ef2 <WM_NotifyParent+0x1a>
 8028eea:	f7f8 fbdd 	bl	80216a8 <GUI_Unlock>
 8028eee:	b005      	add	sp, #20
 8028ef0:	bd30      	pop	{r4, r5, pc}
 8028ef2:	f7f8 fbe3 	bl	80216bc <GUI_Lock>
 8028ef6:	4620      	mov	r0, r4
 8028ef8:	f7f6 fd4c 	bl	801f994 <GUI_ALLOC_h2p>
 8028efc:	6985      	ldr	r5, [r0, #24]
 8028efe:	f7f8 fbd3 	bl	80216a8 <GUI_Unlock>
 8028f02:	2d00      	cmp	r5, #0
 8028f04:	d0f1      	beq.n	8028eea <WM_NotifyParent+0x12>
 8028f06:	4628      	mov	r0, r5
 8028f08:	4669      	mov	r1, sp
 8028f0a:	9402      	str	r4, [sp, #8]
 8028f0c:	f001 f886 	bl	802a01c <WM__SendMessage>
 8028f10:	f7f8 fbca 	bl	80216a8 <GUI_Unlock>
 8028f14:	b005      	add	sp, #20
 8028f16:	bd30      	pop	{r4, r5, pc}

08028f18 <WM_OnKey>:
 8028f18:	b530      	push	{r4, r5, lr}
 8028f1a:	b087      	sub	sp, #28
 8028f1c:	4605      	mov	r5, r0
 8028f1e:	460c      	mov	r4, r1
 8028f20:	f7f8 fbcc 	bl	80216bc <GUI_Lock>
 8028f24:	4a0d      	ldr	r2, [pc, #52]	; (8028f5c <WM_OnKey+0x44>)
 8028f26:	4b0e      	ldr	r3, [pc, #56]	; (8028f60 <WM_OnKey+0x48>)
 8028f28:	6812      	ldr	r2, [r2, #0]
 8028f2a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8028f2e:	b928      	cbnz	r0, 8028f3c <WM_OnKey+0x24>
 8028f30:	4604      	mov	r4, r0
 8028f32:	f7f8 fbb9 	bl	80216a8 <GUI_Unlock>
 8028f36:	4620      	mov	r0, r4
 8028f38:	b007      	add	sp, #28
 8028f3a:	bd30      	pop	{r4, r5, pc}
 8028f3c:	230e      	movs	r3, #14
 8028f3e:	a902      	add	r1, sp, #8
 8028f40:	9401      	str	r4, [sp, #4]
 8028f42:	9302      	str	r3, [sp, #8]
 8028f44:	9500      	str	r5, [sp, #0]
 8028f46:	f8cd d014 	str.w	sp, [sp, #20]
 8028f4a:	f001 f867 	bl	802a01c <WM__SendMessage>
 8028f4e:	f7f8 fbab 	bl	80216a8 <GUI_Unlock>
 8028f52:	2401      	movs	r4, #1
 8028f54:	4620      	mov	r0, r4
 8028f56:	b007      	add	sp, #28
 8028f58:	bd30      	pop	{r4, r5, pc}
 8028f5a:	bf00      	nop
 8028f5c:	200308f4 	.word	0x200308f4
 8028f60:	200308e4 	.word	0x200308e4

08028f64 <WM_Paint>:
 8028f64:	b510      	push	{r4, lr}
 8028f66:	4604      	mov	r4, r0
 8028f68:	b09e      	sub	sp, #120	; 0x78
 8028f6a:	f7fe fcc5 	bl	80278f8 <WM_InvalidateWindow>
 8028f6e:	b194      	cbz	r4, 8028f96 <WM_Paint+0x32>
 8028f70:	f7f8 fba4 	bl	80216bc <GUI_Lock>
 8028f74:	a801      	add	r0, sp, #4
 8028f76:	f7f7 f9bf 	bl	80202f8 <GUI_SaveContext_W>
 8028f7a:	4620      	mov	r0, r4
 8028f7c:	f7ff f962 	bl	8028244 <WM__Paint>
 8028f80:	a801      	add	r0, sp, #4
 8028f82:	f7f7 f9c3 	bl	802030c <GUI_RestoreContext>
 8028f86:	f7f8 fb8f 	bl	80216a8 <GUI_Unlock>
 8028f8a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8028f8c:	f7fa f8ae 	bl	80230ec <LCD_SetColor>
 8028f90:	980e      	ldr	r0, [sp, #56]	; 0x38
 8028f92:	f7fa f8a5 	bl	80230e0 <LCD_SetBkColor>
 8028f96:	b01e      	add	sp, #120	; 0x78
 8028f98:	bd10      	pop	{r4, pc}
 8028f9a:	bf00      	nop

08028f9c <WM_ResizeWindow>:
 8028f9c:	b500      	push	{lr}
 8028f9e:	ea51 0e02 	orrs.w	lr, r1, r2
 8028fa2:	d000      	beq.n	8028fa6 <WM_ResizeWindow+0xa>
 8028fa4:	b908      	cbnz	r0, 8028faa <WM_ResizeWindow+0xe>
 8028fa6:	f85d fb04 	ldr.w	pc, [sp], #4
 8028faa:	f85d eb04 	ldr.w	lr, [sp], #4
 8028fae:	f7ff bc67 	b.w	8028880 <WM_ResizeWindow.part.11>
 8028fb2:	bf00      	nop

08028fb4 <WM_SendMessageNoPara>:
 8028fb4:	b538      	push	{r3, r4, r5, lr}
 8028fb6:	4604      	mov	r4, r0
 8028fb8:	460d      	mov	r5, r1
 8028fba:	f7f8 fb7f 	bl	80216bc <GUI_Lock>
 8028fbe:	4629      	mov	r1, r5
 8028fc0:	4620      	mov	r0, r4
 8028fc2:	f001 f86d 	bl	802a0a0 <WM__SendMessageNoPara>
 8028fc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028fca:	f7f8 bb6d 	b.w	80216a8 <GUI_Unlock>
 8028fce:	bf00      	nop

08028fd0 <WM_SendToParent>:
 8028fd0:	b1e1      	cbz	r1, 802900c <WM_SendToParent+0x3c>
 8028fd2:	b570      	push	{r4, r5, r6, lr}
 8028fd4:	4605      	mov	r5, r0
 8028fd6:	460c      	mov	r4, r1
 8028fd8:	f7f8 fb70 	bl	80216bc <GUI_Lock>
 8028fdc:	b91d      	cbnz	r5, 8028fe6 <WM_SendToParent+0x16>
 8028fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8028fe2:	f7f8 bb61 	b.w	80216a8 <GUI_Unlock>
 8028fe6:	f7f8 fb69 	bl	80216bc <GUI_Lock>
 8028fea:	4628      	mov	r0, r5
 8028fec:	f7f6 fcd2 	bl	801f994 <GUI_ALLOC_h2p>
 8028ff0:	6986      	ldr	r6, [r0, #24]
 8028ff2:	f7f8 fb59 	bl	80216a8 <GUI_Unlock>
 8028ff6:	2e00      	cmp	r6, #0
 8028ff8:	d0f1      	beq.n	8028fde <WM_SendToParent+0xe>
 8028ffa:	60a5      	str	r5, [r4, #8]
 8028ffc:	4621      	mov	r1, r4
 8028ffe:	4630      	mov	r0, r6
 8029000:	f001 f80c 	bl	802a01c <WM__SendMessage>
 8029004:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8029008:	f7f8 bb4e 	b.w	80216a8 <GUI_Unlock>
 802900c:	4770      	bx	lr
 802900e:	bf00      	nop

08029010 <WM_SetCallback>:
 8029010:	b570      	push	{r4, r5, r6, lr}
 8029012:	b082      	sub	sp, #8
 8029014:	b1b0      	cbz	r0, 8029044 <WM_SetCallback+0x34>
 8029016:	4604      	mov	r4, r0
 8029018:	460d      	mov	r5, r1
 802901a:	f7f8 fb4f 	bl	80216bc <GUI_Lock>
 802901e:	4620      	mov	r0, r4
 8029020:	f7f6 fcc2 	bl	801f9a8 <GUI_ALLOC_LockH>
 8029024:	ab02      	add	r3, sp, #8
 8029026:	6906      	ldr	r6, [r0, #16]
 8029028:	f843 0d04 	str.w	r0, [r3, #-4]!
 802902c:	6105      	str	r5, [r0, #16]
 802902e:	4618      	mov	r0, r3
 8029030:	f7f6 fccc 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8029034:	4620      	mov	r0, r4
 8029036:	f7fe fc5f 	bl	80278f8 <WM_InvalidateWindow>
 802903a:	f7f8 fb35 	bl	80216a8 <GUI_Unlock>
 802903e:	4630      	mov	r0, r6
 8029040:	b002      	add	sp, #8
 8029042:	bd70      	pop	{r4, r5, r6, pc}
 8029044:	4606      	mov	r6, r0
 8029046:	4630      	mov	r0, r6
 8029048:	b002      	add	sp, #8
 802904a:	bd70      	pop	{r4, r5, r6, pc}

0802904c <WM_SetFocus>:
 802904c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029050:	b086      	sub	sp, #24
 8029052:	2500      	movs	r5, #0
 8029054:	4604      	mov	r4, r0
 8029056:	9503      	str	r5, [sp, #12]
 8029058:	9502      	str	r5, [sp, #8]
 802905a:	9504      	str	r5, [sp, #16]
 802905c:	9505      	str	r5, [sp, #20]
 802905e:	f7f8 fb2d 	bl	80216bc <GUI_Lock>
 8029062:	2c00      	cmp	r4, #0
 8029064:	d04e      	beq.n	8029104 <WM_SetFocus+0xb8>
 8029066:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8029120 <WM_SetFocus+0xd4>
 802906a:	4f2c      	ldr	r7, [pc, #176]	; (802911c <WM_SetFocus+0xd0>)
 802906c:	f8d8 3000 	ldr.w	r3, [r8]
 8029070:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8029074:	4284      	cmp	r4, r0
 8029076:	d045      	beq.n	8029104 <WM_SetFocus+0xb8>
 8029078:	231e      	movs	r3, #30
 802907a:	e88d 0011 	stmia.w	sp, {r0, r4}
 802907e:	9505      	str	r5, [sp, #20]
 8029080:	9302      	str	r3, [sp, #8]
 8029082:	2800      	cmp	r0, #0
 8029084:	d145      	bne.n	8029112 <WM_SetFocus+0xc6>
 8029086:	2301      	movs	r3, #1
 8029088:	a902      	add	r1, sp, #8
 802908a:	4620      	mov	r0, r4
 802908c:	9305      	str	r3, [sp, #20]
 802908e:	f000 ffc5 	bl	802a01c <WM__SendMessage>
 8029092:	9e05      	ldr	r6, [sp, #20]
 8029094:	2e00      	cmp	r6, #0
 8029096:	d136      	bne.n	8029106 <WM_SetFocus+0xba>
 8029098:	f8d8 3000 	ldr.w	r3, [r8]
 802909c:	2520      	movs	r5, #32
 802909e:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
 80290a2:	e004      	b.n	80290ae <WM_SetFocus+0x62>
 80290a4:	9502      	str	r5, [sp, #8]
 80290a6:	f8cd d014 	str.w	sp, [sp, #20]
 80290aa:	f000 ffb7 	bl	802a01c <WM__SendMessage>
 80290ae:	f7f8 fb05 	bl	80216bc <GUI_Lock>
 80290b2:	4620      	mov	r0, r4
 80290b4:	f7f6 fc6e 	bl	801f994 <GUI_ALLOC_h2p>
 80290b8:	6984      	ldr	r4, [r0, #24]
 80290ba:	f7f8 faf5 	bl	80216a8 <GUI_Unlock>
 80290be:	a902      	add	r1, sp, #8
 80290c0:	4620      	mov	r0, r4
 80290c2:	2c00      	cmp	r4, #0
 80290c4:	d1ee      	bne.n	80290a4 <WM_SetFocus+0x58>
 80290c6:	9c00      	ldr	r4, [sp, #0]
 80290c8:	f7f8 faf8 	bl	80216bc <GUI_Lock>
 80290cc:	4620      	mov	r0, r4
 80290ce:	f7fd fd5b 	bl	8026b88 <WM__IsWindow>
 80290d2:	4605      	mov	r5, r0
 80290d4:	f7f8 fae8 	bl	80216a8 <GUI_Unlock>
 80290d8:	b1ad      	cbz	r5, 8029106 <WM_SetFocus+0xba>
 80290da:	b1a4      	cbz	r4, 8029106 <WM_SetFocus+0xba>
 80290dc:	2520      	movs	r5, #32
 80290de:	e004      	b.n	80290ea <WM_SetFocus+0x9e>
 80290e0:	9502      	str	r5, [sp, #8]
 80290e2:	f8cd d014 	str.w	sp, [sp, #20]
 80290e6:	f000 ff99 	bl	802a01c <WM__SendMessage>
 80290ea:	f7f8 fae7 	bl	80216bc <GUI_Lock>
 80290ee:	4620      	mov	r0, r4
 80290f0:	f7f6 fc50 	bl	801f994 <GUI_ALLOC_h2p>
 80290f4:	6984      	ldr	r4, [r0, #24]
 80290f6:	f7f8 fad7 	bl	80216a8 <GUI_Unlock>
 80290fa:	a902      	add	r1, sp, #8
 80290fc:	4620      	mov	r0, r4
 80290fe:	2c00      	cmp	r4, #0
 8029100:	d1ee      	bne.n	80290e0 <WM_SetFocus+0x94>
 8029102:	e000      	b.n	8029106 <WM_SetFocus+0xba>
 8029104:	2601      	movs	r6, #1
 8029106:	f7f8 facf 	bl	80216a8 <GUI_Unlock>
 802910a:	4630      	mov	r0, r6
 802910c:	b006      	add	sp, #24
 802910e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029112:	a902      	add	r1, sp, #8
 8029114:	f000 ff82 	bl	802a01c <WM__SendMessage>
 8029118:	e7b5      	b.n	8029086 <WM_SetFocus+0x3a>
 802911a:	bf00      	nop
 802911c:	200308e4 	.word	0x200308e4
 8029120:	200308f4 	.word	0x200308f4

08029124 <WM_SetSize>:
 8029124:	b900      	cbnz	r0, 8029128 <WM_SetSize+0x4>
 8029126:	4770      	bx	lr
 8029128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802912c:	4604      	mov	r4, r0
 802912e:	b082      	sub	sp, #8
 8029130:	4617      	mov	r7, r2
 8029132:	4688      	mov	r8, r1
 8029134:	f7f8 fac2 	bl	80216bc <GUI_Lock>
 8029138:	4620      	mov	r0, r4
 802913a:	f7f6 fc35 	bl	801f9a8 <GUI_ALLOC_LockH>
 802913e:	f10d 0e08 	add.w	lr, sp, #8
 8029142:	f9b0 1000 	ldrsh.w	r1, [r0]
 8029146:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 802914a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802914e:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8029152:	f84e 0d04 	str.w	r0, [lr, #-4]!
 8029156:	1a76      	subs	r6, r6, r1
 8029158:	1aeb      	subs	r3, r5, r3
 802915a:	3301      	adds	r3, #1
 802915c:	1c75      	adds	r5, r6, #1
 802915e:	ebc5 0508 	rsb	r5, r5, r8
 8029162:	1afe      	subs	r6, r7, r3
 8029164:	4670      	mov	r0, lr
 8029166:	f7f6 fc31 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802916a:	ea55 0306 	orrs.w	r3, r5, r6
 802916e:	d104      	bne.n	802917a <WM_SetSize+0x56>
 8029170:	f7f8 fa9a 	bl	80216a8 <GUI_Unlock>
 8029174:	b002      	add	sp, #8
 8029176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802917a:	4632      	mov	r2, r6
 802917c:	4629      	mov	r1, r5
 802917e:	4620      	mov	r0, r4
 8029180:	f7ff fb7e 	bl	8028880 <WM_ResizeWindow.part.11>
 8029184:	e7f4      	b.n	8029170 <WM_SetSize+0x4c>
 8029186:	bf00      	nop

08029188 <WM_SetUserClipRect>:
 8029188:	b538      	push	{r3, r4, r5, lr}
 802918a:	4605      	mov	r5, r0
 802918c:	f7f8 fa96 	bl	80216bc <GUI_Lock>
 8029190:	4b04      	ldr	r3, [pc, #16]	; (80291a4 <WM_SetUserClipRect+0x1c>)
 8029192:	681b      	ldr	r3, [r3, #0]
 8029194:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8029196:	645d      	str	r5, [r3, #68]	; 0x44
 8029198:	f7fd fbd2 	bl	8026940 <WM__ActivateClipRect>
 802919c:	f7f8 fa84 	bl	80216a8 <GUI_Unlock>
 80291a0:	4620      	mov	r0, r4
 80291a2:	bd38      	pop	{r3, r4, r5, pc}
 80291a4:	200000e8 	.word	0x200000e8

080291a8 <WM_InvalidateWindowAndDescs>:
 80291a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80291ac:	4604      	mov	r4, r0
 80291ae:	b083      	sub	sp, #12
 80291b0:	f7f8 fa84 	bl	80216bc <GUI_Lock>
 80291b4:	b924      	cbnz	r4, 80291c0 <WM_InvalidateWindowAndDescs+0x18>
 80291b6:	b003      	add	sp, #12
 80291b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80291bc:	f7f8 ba74 	b.w	80216a8 <GUI_Unlock>
 80291c0:	4620      	mov	r0, r4
 80291c2:	f7fe fb99 	bl	80278f8 <WM_InvalidateWindow>
 80291c6:	f7f8 fa79 	bl	80216bc <GUI_Lock>
 80291ca:	4620      	mov	r0, r4
 80291cc:	f7f6 fbe2 	bl	801f994 <GUI_ALLOC_h2p>
 80291d0:	f8d0 801c 	ldr.w	r8, [r0, #28]
 80291d4:	f7f8 fa68 	bl	80216a8 <GUI_Unlock>
 80291d8:	f1b8 0f00 	cmp.w	r8, #0
 80291dc:	d0eb      	beq.n	80291b6 <WM_InvalidateWindowAndDescs+0xe>
 80291de:	f7f8 fa6d 	bl	80216bc <GUI_Lock>
 80291e2:	4640      	mov	r0, r8
 80291e4:	f7fe fb88 	bl	80278f8 <WM_InvalidateWindow>
 80291e8:	f7f8 fa68 	bl	80216bc <GUI_Lock>
 80291ec:	4640      	mov	r0, r8
 80291ee:	f7f6 fbd1 	bl	801f994 <GUI_ALLOC_h2p>
 80291f2:	f8d0 901c 	ldr.w	r9, [r0, #28]
 80291f6:	f7f8 fa57 	bl	80216a8 <GUI_Unlock>
 80291fa:	f1b9 0f00 	cmp.w	r9, #0
 80291fe:	f000 80b8 	beq.w	8029372 <WM_InvalidateWindowAndDescs+0x1ca>
 8029202:	f7f8 fa5b 	bl	80216bc <GUI_Lock>
 8029206:	4648      	mov	r0, r9
 8029208:	f7fe fb76 	bl	80278f8 <WM_InvalidateWindow>
 802920c:	f7f8 fa56 	bl	80216bc <GUI_Lock>
 8029210:	4648      	mov	r0, r9
 8029212:	f7f6 fbbf 	bl	801f994 <GUI_ALLOC_h2p>
 8029216:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 802921a:	f7f8 fa45 	bl	80216a8 <GUI_Unlock>
 802921e:	f1ba 0f00 	cmp.w	sl, #0
 8029222:	f000 809b 	beq.w	802935c <WM_InvalidateWindowAndDescs+0x1b4>
 8029226:	f7f8 fa49 	bl	80216bc <GUI_Lock>
 802922a:	4650      	mov	r0, sl
 802922c:	f7fe fb64 	bl	80278f8 <WM_InvalidateWindow>
 8029230:	f7f8 fa44 	bl	80216bc <GUI_Lock>
 8029234:	4650      	mov	r0, sl
 8029236:	f7f6 fbad 	bl	801f994 <GUI_ALLOC_h2p>
 802923a:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 802923e:	f7f8 fa33 	bl	80216a8 <GUI_Unlock>
 8029242:	f1bb 0f00 	cmp.w	fp, #0
 8029246:	d07e      	beq.n	8029346 <WM_InvalidateWindowAndDescs+0x19e>
 8029248:	f7f8 fa38 	bl	80216bc <GUI_Lock>
 802924c:	4658      	mov	r0, fp
 802924e:	f7fe fb53 	bl	80278f8 <WM_InvalidateWindow>
 8029252:	f7f8 fa33 	bl	80216bc <GUI_Lock>
 8029256:	4658      	mov	r0, fp
 8029258:	f7f6 fb9c 	bl	801f994 <GUI_ALLOC_h2p>
 802925c:	69c3      	ldr	r3, [r0, #28]
 802925e:	9301      	str	r3, [sp, #4]
 8029260:	461c      	mov	r4, r3
 8029262:	f7f8 fa21 	bl	80216a8 <GUI_Unlock>
 8029266:	2c00      	cmp	r4, #0
 8029268:	d063      	beq.n	8029332 <WM_InvalidateWindowAndDescs+0x18a>
 802926a:	f7f8 fa27 	bl	80216bc <GUI_Lock>
 802926e:	9c01      	ldr	r4, [sp, #4]
 8029270:	4620      	mov	r0, r4
 8029272:	f7fe fb41 	bl	80278f8 <WM_InvalidateWindow>
 8029276:	f7f8 fa21 	bl	80216bc <GUI_Lock>
 802927a:	4620      	mov	r0, r4
 802927c:	f7f6 fb8a 	bl	801f994 <GUI_ALLOC_h2p>
 8029280:	69c6      	ldr	r6, [r0, #28]
 8029282:	f7f8 fa11 	bl	80216a8 <GUI_Unlock>
 8029286:	2e00      	cmp	r6, #0
 8029288:	d04a      	beq.n	8029320 <WM_InvalidateWindowAndDescs+0x178>
 802928a:	f7f8 fa17 	bl	80216bc <GUI_Lock>
 802928e:	4630      	mov	r0, r6
 8029290:	f7fe fb32 	bl	80278f8 <WM_InvalidateWindow>
 8029294:	f7f8 fa12 	bl	80216bc <GUI_Lock>
 8029298:	4630      	mov	r0, r6
 802929a:	f7f6 fb7b 	bl	801f994 <GUI_ALLOC_h2p>
 802929e:	69c5      	ldr	r5, [r0, #28]
 80292a0:	f7f8 fa02 	bl	80216a8 <GUI_Unlock>
 80292a4:	b3a5      	cbz	r5, 8029310 <WM_InvalidateWindowAndDescs+0x168>
 80292a6:	f7f8 fa09 	bl	80216bc <GUI_Lock>
 80292aa:	4628      	mov	r0, r5
 80292ac:	f7fe fb24 	bl	80278f8 <WM_InvalidateWindow>
 80292b0:	f7f8 fa04 	bl	80216bc <GUI_Lock>
 80292b4:	4628      	mov	r0, r5
 80292b6:	f7f6 fb6d 	bl	801f994 <GUI_ALLOC_h2p>
 80292ba:	69c4      	ldr	r4, [r0, #28]
 80292bc:	f7f8 f9f4 	bl	80216a8 <GUI_Unlock>
 80292c0:	b1f4      	cbz	r4, 8029300 <WM_InvalidateWindowAndDescs+0x158>
 80292c2:	f7f8 f9fb 	bl	80216bc <GUI_Lock>
 80292c6:	4620      	mov	r0, r4
 80292c8:	f7fe fb16 	bl	80278f8 <WM_InvalidateWindow>
 80292cc:	f7f8 f9f6 	bl	80216bc <GUI_Lock>
 80292d0:	4620      	mov	r0, r4
 80292d2:	f7f6 fb5f 	bl	801f994 <GUI_ALLOC_h2p>
 80292d6:	69c7      	ldr	r7, [r0, #28]
 80292d8:	f7f8 f9e6 	bl	80216a8 <GUI_Unlock>
 80292dc:	b147      	cbz	r7, 80292f0 <WM_InvalidateWindowAndDescs+0x148>
 80292de:	4638      	mov	r0, r7
 80292e0:	f7ff ff62 	bl	80291a8 <WM_InvalidateWindowAndDescs>
 80292e4:	4638      	mov	r0, r7
 80292e6:	f7f6 fb55 	bl	801f994 <GUI_ALLOC_h2p>
 80292ea:	6a07      	ldr	r7, [r0, #32]
 80292ec:	2f00      	cmp	r7, #0
 80292ee:	d1f6      	bne.n	80292de <WM_InvalidateWindowAndDescs+0x136>
 80292f0:	f7f8 f9da 	bl	80216a8 <GUI_Unlock>
 80292f4:	4620      	mov	r0, r4
 80292f6:	f7f6 fb4d 	bl	801f994 <GUI_ALLOC_h2p>
 80292fa:	6a04      	ldr	r4, [r0, #32]
 80292fc:	2c00      	cmp	r4, #0
 80292fe:	d1e0      	bne.n	80292c2 <WM_InvalidateWindowAndDescs+0x11a>
 8029300:	f7f8 f9d2 	bl	80216a8 <GUI_Unlock>
 8029304:	4628      	mov	r0, r5
 8029306:	f7f6 fb45 	bl	801f994 <GUI_ALLOC_h2p>
 802930a:	6a05      	ldr	r5, [r0, #32]
 802930c:	2d00      	cmp	r5, #0
 802930e:	d1ca      	bne.n	80292a6 <WM_InvalidateWindowAndDescs+0xfe>
 8029310:	f7f8 f9ca 	bl	80216a8 <GUI_Unlock>
 8029314:	4630      	mov	r0, r6
 8029316:	f7f6 fb3d 	bl	801f994 <GUI_ALLOC_h2p>
 802931a:	6a06      	ldr	r6, [r0, #32]
 802931c:	2e00      	cmp	r6, #0
 802931e:	d1b4      	bne.n	802928a <WM_InvalidateWindowAndDescs+0xe2>
 8029320:	f7f8 f9c2 	bl	80216a8 <GUI_Unlock>
 8029324:	9801      	ldr	r0, [sp, #4]
 8029326:	f7f6 fb35 	bl	801f994 <GUI_ALLOC_h2p>
 802932a:	6a03      	ldr	r3, [r0, #32]
 802932c:	9301      	str	r3, [sp, #4]
 802932e:	2b00      	cmp	r3, #0
 8029330:	d19b      	bne.n	802926a <WM_InvalidateWindowAndDescs+0xc2>
 8029332:	f7f8 f9b9 	bl	80216a8 <GUI_Unlock>
 8029336:	4658      	mov	r0, fp
 8029338:	f7f6 fb2c 	bl	801f994 <GUI_ALLOC_h2p>
 802933c:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8029340:	f1bb 0f00 	cmp.w	fp, #0
 8029344:	d180      	bne.n	8029248 <WM_InvalidateWindowAndDescs+0xa0>
 8029346:	f7f8 f9af 	bl	80216a8 <GUI_Unlock>
 802934a:	4650      	mov	r0, sl
 802934c:	f7f6 fb22 	bl	801f994 <GUI_ALLOC_h2p>
 8029350:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8029354:	f1ba 0f00 	cmp.w	sl, #0
 8029358:	f47f af65 	bne.w	8029226 <WM_InvalidateWindowAndDescs+0x7e>
 802935c:	f7f8 f9a4 	bl	80216a8 <GUI_Unlock>
 8029360:	4648      	mov	r0, r9
 8029362:	f7f6 fb17 	bl	801f994 <GUI_ALLOC_h2p>
 8029366:	f8d0 9020 	ldr.w	r9, [r0, #32]
 802936a:	f1b9 0f00 	cmp.w	r9, #0
 802936e:	f47f af48 	bne.w	8029202 <WM_InvalidateWindowAndDescs+0x5a>
 8029372:	f7f8 f999 	bl	80216a8 <GUI_Unlock>
 8029376:	4640      	mov	r0, r8
 8029378:	f7f6 fb0c 	bl	801f994 <GUI_ALLOC_h2p>
 802937c:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8029380:	f1b8 0f00 	cmp.w	r8, #0
 8029384:	f47f af2b 	bne.w	80291de <WM_InvalidateWindowAndDescs+0x36>
 8029388:	e715      	b.n	80291b6 <WM_InvalidateWindowAndDescs+0xe>
 802938a:	bf00      	nop

0802938c <WM_ShowWindow>:
 802938c:	b900      	cbnz	r0, 8029390 <WM_ShowWindow+0x4>
 802938e:	4770      	bx	lr
 8029390:	b510      	push	{r4, lr}
 8029392:	4604      	mov	r4, r0
 8029394:	b082      	sub	sp, #8
 8029396:	f7f8 f991 	bl	80216bc <GUI_Lock>
 802939a:	4620      	mov	r0, r4
 802939c:	f7f6 fb04 	bl	801f9a8 <GUI_ALLOC_LockH>
 80293a0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80293a2:	9001      	str	r0, [sp, #4]
 80293a4:	079a      	lsls	r2, r3, #30
 80293a6:	d506      	bpl.n	80293b6 <WM_ShowWindow+0x2a>
 80293a8:	a801      	add	r0, sp, #4
 80293aa:	f7f6 fb0f 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80293ae:	f7f8 f97b 	bl	80216a8 <GUI_Unlock>
 80293b2:	b002      	add	sp, #8
 80293b4:	bd10      	pop	{r4, pc}
 80293b6:	f043 0302 	orr.w	r3, r3, #2
 80293ba:	6283      	str	r3, [r0, #40]	; 0x28
 80293bc:	4620      	mov	r0, r4
 80293be:	f7ff fef3 	bl	80291a8 <WM_InvalidateWindowAndDescs>
 80293c2:	e7f1      	b.n	80293a8 <WM_ShowWindow+0x1c>

080293c4 <WM_ValidateWindow>:
 80293c4:	b510      	push	{r4, lr}
 80293c6:	4604      	mov	r4, r0
 80293c8:	b082      	sub	sp, #8
 80293ca:	f7f8 f977 	bl	80216bc <GUI_Lock>
 80293ce:	b91c      	cbnz	r4, 80293d8 <WM_ValidateWindow+0x14>
 80293d0:	f7f8 f96a 	bl	80216a8 <GUI_Unlock>
 80293d4:	b002      	add	sp, #8
 80293d6:	bd10      	pop	{r4, pc}
 80293d8:	4620      	mov	r0, r4
 80293da:	f7f6 fae5 	bl	801f9a8 <GUI_ALLOC_LockH>
 80293de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80293e0:	9001      	str	r0, [sp, #4]
 80293e2:	069a      	lsls	r2, r3, #26
 80293e4:	d506      	bpl.n	80293f4 <WM_ValidateWindow+0x30>
 80293e6:	4907      	ldr	r1, [pc, #28]	; (8029404 <WM_ValidateWindow+0x40>)
 80293e8:	880a      	ldrh	r2, [r1, #0]
 80293ea:	f023 0320 	bic.w	r3, r3, #32
 80293ee:	3a01      	subs	r2, #1
 80293f0:	6283      	str	r3, [r0, #40]	; 0x28
 80293f2:	800a      	strh	r2, [r1, #0]
 80293f4:	a801      	add	r0, sp, #4
 80293f6:	f7f6 fae9 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80293fa:	f7f8 f955 	bl	80216a8 <GUI_Unlock>
 80293fe:	b002      	add	sp, #8
 8029400:	bd10      	pop	{r4, pc}
 8029402:	bf00      	nop
 8029404:	200308ec 	.word	0x200308ec

08029408 <_MULTIBUF_End>:
 8029408:	b570      	push	{r4, r5, r6, lr}
 802940a:	4d0a      	ldr	r5, [pc, #40]	; (8029434 <_MULTIBUF_End+0x2c>)
 802940c:	4e0a      	ldr	r6, [pc, #40]	; (8029438 <_MULTIBUF_End+0x30>)
 802940e:	2400      	movs	r4, #0
 8029410:	682a      	ldr	r2, [r5, #0]
 8029412:	6833      	ldr	r3, [r6, #0]
 8029414:	4620      	mov	r0, r4
 8029416:	b932      	cbnz	r2, 8029426 <_MULTIBUF_End+0x1e>
 8029418:	40e3      	lsrs	r3, r4
 802941a:	07db      	lsls	r3, r3, #31
 802941c:	d407      	bmi.n	802942e <_MULTIBUF_End+0x26>
 802941e:	3401      	adds	r4, #1
 8029420:	2c02      	cmp	r4, #2
 8029422:	d1f5      	bne.n	8029410 <_MULTIBUF_End+0x8>
 8029424:	bd70      	pop	{r4, r5, r6, pc}
 8029426:	4013      	ands	r3, r2
 8029428:	40e3      	lsrs	r3, r4
 802942a:	07da      	lsls	r2, r3, #31
 802942c:	d5f7      	bpl.n	802941e <_MULTIBUF_End+0x16>
 802942e:	f7f8 f827 	bl	8021480 <GUI_MULTIBUF_EndEx>
 8029432:	e7f4      	b.n	802941e <_MULTIBUF_End+0x16>
 8029434:	20030864 	.word	0x20030864
 8029438:	200308fc 	.word	0x200308fc

0802943c <_MULTIBUF_Begin>:
 802943c:	b570      	push	{r4, r5, r6, lr}
 802943e:	4d0a      	ldr	r5, [pc, #40]	; (8029468 <_MULTIBUF_Begin+0x2c>)
 8029440:	4e0a      	ldr	r6, [pc, #40]	; (802946c <_MULTIBUF_Begin+0x30>)
 8029442:	2400      	movs	r4, #0
 8029444:	682a      	ldr	r2, [r5, #0]
 8029446:	6833      	ldr	r3, [r6, #0]
 8029448:	4620      	mov	r0, r4
 802944a:	b932      	cbnz	r2, 802945a <_MULTIBUF_Begin+0x1e>
 802944c:	40e3      	lsrs	r3, r4
 802944e:	07db      	lsls	r3, r3, #31
 8029450:	d407      	bmi.n	8029462 <_MULTIBUF_Begin+0x26>
 8029452:	3401      	adds	r4, #1
 8029454:	2c02      	cmp	r4, #2
 8029456:	d1f5      	bne.n	8029444 <_MULTIBUF_Begin+0x8>
 8029458:	bd70      	pop	{r4, r5, r6, pc}
 802945a:	4013      	ands	r3, r2
 802945c:	40e3      	lsrs	r3, r4
 802945e:	07da      	lsls	r2, r3, #31
 8029460:	d5f7      	bpl.n	8029452 <_MULTIBUF_Begin+0x16>
 8029462:	f7f7 ffd7 	bl	8021414 <GUI_MULTIBUF_BeginEx>
 8029466:	e7f4      	b.n	8029452 <_MULTIBUF_Begin+0x16>
 8029468:	20030864 	.word	0x20030864
 802946c:	200308fc 	.word	0x200308fc

08029470 <WM_MULTIBUF_Enable>:
 8029470:	4a05      	ldr	r2, [pc, #20]	; (8029488 <WM_MULTIBUF_Enable+0x18>)
 8029472:	4b06      	ldr	r3, [pc, #24]	; (802948c <WM_MULTIBUF_Enable+0x1c>)
 8029474:	6811      	ldr	r1, [r2, #0]
 8029476:	2800      	cmp	r0, #0
 8029478:	bf08      	it	eq
 802947a:	2300      	moveq	r3, #0
 802947c:	1c08      	adds	r0, r1, #0
 802947e:	6013      	str	r3, [r2, #0]
 8029480:	bf18      	it	ne
 8029482:	2001      	movne	r0, #1
 8029484:	4770      	bx	lr
 8029486:	bf00      	nop
 8029488:	20030914 	.word	0x20030914
 802948c:	080414d0 	.word	0x080414d0

08029490 <_MoveDescendents>:
 8029490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029494:	b0b5      	sub	sp, #212	; 0xd4
 8029496:	2300      	movs	r3, #0
 8029498:	931d      	str	r3, [sp, #116]	; 0x74
 802949a:	931c      	str	r3, [sp, #112]	; 0x70
 802949c:	931e      	str	r3, [sp, #120]	; 0x78
 802949e:	931f      	str	r3, [sp, #124]	; 0x7c
 80294a0:	9006      	str	r0, [sp, #24]
 80294a2:	2800      	cmp	r0, #0
 80294a4:	f000 8117 	beq.w	80296d6 <_MoveDescendents+0x246>
 80294a8:	468a      	mov	sl, r1
 80294aa:	4691      	mov	r9, r2
 80294ac:	f04f 0b03 	mov.w	fp, #3
 80294b0:	9806      	ldr	r0, [sp, #24]
 80294b2:	f7f6 fa79 	bl	801f9a8 <GUI_ALLOC_LockH>
 80294b6:	464a      	mov	r2, r9
 80294b8:	4651      	mov	r1, sl
 80294ba:	900a      	str	r0, [sp, #40]	; 0x28
 80294bc:	f7f6 fe4c 	bl	8020158 <GUI_MoveRect>
 80294c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80294c2:	464a      	mov	r2, r9
 80294c4:	3008      	adds	r0, #8
 80294c6:	4651      	mov	r1, sl
 80294c8:	f7f6 fe46 	bl	8020158 <GUI_MoveRect>
 80294cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80294ce:	69da      	ldr	r2, [r3, #28]
 80294d0:	6a1b      	ldr	r3, [r3, #32]
 80294d2:	9307      	str	r3, [sp, #28]
 80294d4:	a80a      	add	r0, sp, #40	; 0x28
 80294d6:	4614      	mov	r4, r2
 80294d8:	9205      	str	r2, [sp, #20]
 80294da:	f7f6 fa77 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80294de:	2300      	movs	r3, #0
 80294e0:	9320      	str	r3, [sp, #128]	; 0x80
 80294e2:	9321      	str	r3, [sp, #132]	; 0x84
 80294e4:	9322      	str	r3, [sp, #136]	; 0x88
 80294e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80294e8:	2c00      	cmp	r4, #0
 80294ea:	f000 80e3 	beq.w	80296b4 <_MoveDescendents+0x224>
 80294ee:	9805      	ldr	r0, [sp, #20]
 80294f0:	f7f6 fa5a 	bl	801f9a8 <GUI_ALLOC_LockH>
 80294f4:	464a      	mov	r2, r9
 80294f6:	4651      	mov	r1, sl
 80294f8:	900b      	str	r0, [sp, #44]	; 0x2c
 80294fa:	f7f6 fe2d 	bl	8020158 <GUI_MoveRect>
 80294fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8029500:	464a      	mov	r2, r9
 8029502:	3008      	adds	r0, #8
 8029504:	4651      	mov	r1, sl
 8029506:	f7f6 fe27 	bl	8020158 <GUI_MoveRect>
 802950a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802950c:	69da      	ldr	r2, [r3, #28]
 802950e:	6a1b      	ldr	r3, [r3, #32]
 8029510:	9308      	str	r3, [sp, #32]
 8029512:	a80b      	add	r0, sp, #44	; 0x2c
 8029514:	4614      	mov	r4, r2
 8029516:	9204      	str	r2, [sp, #16]
 8029518:	f7f6 fa58 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802951c:	2300      	movs	r3, #0
 802951e:	9324      	str	r3, [sp, #144]	; 0x90
 8029520:	9325      	str	r3, [sp, #148]	; 0x94
 8029522:	9326      	str	r3, [sp, #152]	; 0x98
 8029524:	9327      	str	r3, [sp, #156]	; 0x9c
 8029526:	2c00      	cmp	r4, #0
 8029528:	f000 80b3 	beq.w	8029692 <_MoveDescendents+0x202>
 802952c:	9804      	ldr	r0, [sp, #16]
 802952e:	f7f6 fa3b 	bl	801f9a8 <GUI_ALLOC_LockH>
 8029532:	464a      	mov	r2, r9
 8029534:	4651      	mov	r1, sl
 8029536:	900c      	str	r0, [sp, #48]	; 0x30
 8029538:	f7f6 fe0e 	bl	8020158 <GUI_MoveRect>
 802953c:	980c      	ldr	r0, [sp, #48]	; 0x30
 802953e:	464a      	mov	r2, r9
 8029540:	3008      	adds	r0, #8
 8029542:	4651      	mov	r1, sl
 8029544:	f7f6 fe08 	bl	8020158 <GUI_MoveRect>
 8029548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802954a:	69da      	ldr	r2, [r3, #28]
 802954c:	6a1b      	ldr	r3, [r3, #32]
 802954e:	9309      	str	r3, [sp, #36]	; 0x24
 8029550:	a80c      	add	r0, sp, #48	; 0x30
 8029552:	4614      	mov	r4, r2
 8029554:	9202      	str	r2, [sp, #8]
 8029556:	f7f6 fa39 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802955a:	2300      	movs	r3, #0
 802955c:	9328      	str	r3, [sp, #160]	; 0xa0
 802955e:	9329      	str	r3, [sp, #164]	; 0xa4
 8029560:	932a      	str	r3, [sp, #168]	; 0xa8
 8029562:	932b      	str	r3, [sp, #172]	; 0xac
 8029564:	2c00      	cmp	r4, #0
 8029566:	f000 8083 	beq.w	8029670 <_MoveDescendents+0x1e0>
 802956a:	4654      	mov	r4, sl
 802956c:	464d      	mov	r5, r9
 802956e:	9802      	ldr	r0, [sp, #8]
 8029570:	f7f6 fa1a 	bl	801f9a8 <GUI_ALLOC_LockH>
 8029574:	462a      	mov	r2, r5
 8029576:	4621      	mov	r1, r4
 8029578:	900d      	str	r0, [sp, #52]	; 0x34
 802957a:	f7f6 fded 	bl	8020158 <GUI_MoveRect>
 802957e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8029580:	462a      	mov	r2, r5
 8029582:	3008      	adds	r0, #8
 8029584:	4621      	mov	r1, r4
 8029586:	f7f6 fde7 	bl	8020158 <GUI_MoveRect>
 802958a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802958c:	a80d      	add	r0, sp, #52	; 0x34
 802958e:	f8d3 901c 	ldr.w	r9, [r3, #28]
 8029592:	6a1b      	ldr	r3, [r3, #32]
 8029594:	9303      	str	r3, [sp, #12]
 8029596:	f7f6 fa19 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802959a:	2300      	movs	r3, #0
 802959c:	932c      	str	r3, [sp, #176]	; 0xb0
 802959e:	932d      	str	r3, [sp, #180]	; 0xb4
 80295a0:	932e      	str	r3, [sp, #184]	; 0xb8
 80295a2:	932f      	str	r3, [sp, #188]	; 0xbc
 80295a4:	f1b9 0f00 	cmp.w	r9, #0
 80295a8:	d052      	beq.n	8029650 <_MoveDescendents+0x1c0>
 80295aa:	9301      	str	r3, [sp, #4]
 80295ac:	4648      	mov	r0, r9
 80295ae:	f7f6 f9fb 	bl	801f9a8 <GUI_ALLOC_LockH>
 80295b2:	462a      	mov	r2, r5
 80295b4:	4621      	mov	r1, r4
 80295b6:	900e      	str	r0, [sp, #56]	; 0x38
 80295b8:	f7f6 fdce 	bl	8020158 <GUI_MoveRect>
 80295bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80295be:	462a      	mov	r2, r5
 80295c0:	3008      	adds	r0, #8
 80295c2:	4621      	mov	r1, r4
 80295c4:	f7f6 fdc8 	bl	8020158 <GUI_MoveRect>
 80295c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80295ca:	a80e      	add	r0, sp, #56	; 0x38
 80295cc:	69de      	ldr	r6, [r3, #28]
 80295ce:	6a1b      	ldr	r3, [r3, #32]
 80295d0:	9300      	str	r3, [sp, #0]
 80295d2:	f7f6 f9fb 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80295d6:	9b01      	ldr	r3, [sp, #4]
 80295d8:	9330      	str	r3, [sp, #192]	; 0xc0
 80295da:	9331      	str	r3, [sp, #196]	; 0xc4
 80295dc:	9332      	str	r3, [sp, #200]	; 0xc8
 80295de:	9333      	str	r3, [sp, #204]	; 0xcc
 80295e0:	af1a      	add	r7, sp, #104	; 0x68
 80295e2:	b336      	cbz	r6, 8029632 <_MoveDescendents+0x1a2>
 80295e4:	4630      	mov	r0, r6
 80295e6:	f7f6 f9df 	bl	801f9a8 <GUI_ALLOC_LockH>
 80295ea:	462a      	mov	r2, r5
 80295ec:	4621      	mov	r1, r4
 80295ee:	900f      	str	r0, [sp, #60]	; 0x3c
 80295f0:	f7f6 fdb2 	bl	8020158 <GUI_MoveRect>
 80295f4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80295f6:	462a      	mov	r2, r5
 80295f8:	4621      	mov	r1, r4
 80295fa:	3008      	adds	r0, #8
 80295fc:	f7f6 fdac 	bl	8020158 <GUI_MoveRect>
 8029600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8029602:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 8029606:	f8d3 8020 	ldr.w	r8, [r3, #32]
 802960a:	a80f      	add	r0, sp, #60	; 0x3c
 802960c:	f7f6 f9de 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8029610:	4621      	mov	r1, r4
 8029612:	4650      	mov	r0, sl
 8029614:	462a      	mov	r2, r5
 8029616:	f7ff ff3b 	bl	8029490 <_MoveDescendents>
 802961a:	4630      	mov	r0, r6
 802961c:	a930      	add	r1, sp, #192	; 0xc0
 802961e:	4646      	mov	r6, r8
 8029620:	f8cd b0c0 	str.w	fp, [sp, #192]	; 0xc0
 8029624:	9733      	str	r7, [sp, #204]	; 0xcc
 8029626:	941a      	str	r4, [sp, #104]	; 0x68
 8029628:	951b      	str	r5, [sp, #108]	; 0x6c
 802962a:	f000 fcf7 	bl	802a01c <WM__SendMessage>
 802962e:	2e00      	cmp	r6, #0
 8029630:	d1d8      	bne.n	80295e4 <_MoveDescendents+0x154>
 8029632:	4648      	mov	r0, r9
 8029634:	ab18      	add	r3, sp, #96	; 0x60
 8029636:	a92c      	add	r1, sp, #176	; 0xb0
 8029638:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
 802963c:	932f      	str	r3, [sp, #188]	; 0xbc
 802963e:	9418      	str	r4, [sp, #96]	; 0x60
 8029640:	9519      	str	r5, [sp, #100]	; 0x64
 8029642:	f000 fceb 	bl	802a01c <WM__SendMessage>
 8029646:	f8dd 9000 	ldr.w	r9, [sp]
 802964a:	f1b9 0f00 	cmp.w	r9, #0
 802964e:	d1ad      	bne.n	80295ac <_MoveDescendents+0x11c>
 8029650:	ab16      	add	r3, sp, #88	; 0x58
 8029652:	9802      	ldr	r0, [sp, #8]
 8029654:	932b      	str	r3, [sp, #172]	; 0xac
 8029656:	a928      	add	r1, sp, #160	; 0xa0
 8029658:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 802965c:	9416      	str	r4, [sp, #88]	; 0x58
 802965e:	9517      	str	r5, [sp, #92]	; 0x5c
 8029660:	f000 fcdc 	bl	802a01c <WM__SendMessage>
 8029664:	9b03      	ldr	r3, [sp, #12]
 8029666:	9302      	str	r3, [sp, #8]
 8029668:	2b00      	cmp	r3, #0
 802966a:	d180      	bne.n	802956e <_MoveDescendents+0xde>
 802966c:	46a2      	mov	sl, r4
 802966e:	46a9      	mov	r9, r5
 8029670:	ab14      	add	r3, sp, #80	; 0x50
 8029672:	9804      	ldr	r0, [sp, #16]
 8029674:	9327      	str	r3, [sp, #156]	; 0x9c
 8029676:	a924      	add	r1, sp, #144	; 0x90
 8029678:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
 802967c:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 8029680:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 8029684:	f000 fcca 	bl	802a01c <WM__SendMessage>
 8029688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802968a:	9304      	str	r3, [sp, #16]
 802968c:	2b00      	cmp	r3, #0
 802968e:	f47f af4d 	bne.w	802952c <_MoveDescendents+0x9c>
 8029692:	ab12      	add	r3, sp, #72	; 0x48
 8029694:	9805      	ldr	r0, [sp, #20]
 8029696:	9323      	str	r3, [sp, #140]	; 0x8c
 8029698:	a920      	add	r1, sp, #128	; 0x80
 802969a:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
 802969e:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 80296a2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80296a6:	f000 fcb9 	bl	802a01c <WM__SendMessage>
 80296aa:	9b08      	ldr	r3, [sp, #32]
 80296ac:	9305      	str	r3, [sp, #20]
 80296ae:	2b00      	cmp	r3, #0
 80296b0:	f47f af1d 	bne.w	80294ee <_MoveDescendents+0x5e>
 80296b4:	2303      	movs	r3, #3
 80296b6:	931c      	str	r3, [sp, #112]	; 0x70
 80296b8:	9806      	ldr	r0, [sp, #24]
 80296ba:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80296be:	ab10      	add	r3, sp, #64	; 0x40
 80296c0:	a91c      	add	r1, sp, #112	; 0x70
 80296c2:	931f      	str	r3, [sp, #124]	; 0x7c
 80296c4:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 80296c8:	f000 fca8 	bl	802a01c <WM__SendMessage>
 80296cc:	9b07      	ldr	r3, [sp, #28]
 80296ce:	9306      	str	r3, [sp, #24]
 80296d0:	2b00      	cmp	r3, #0
 80296d2:	f47f aeed 	bne.w	80294b0 <_MoveDescendents+0x20>
 80296d6:	b035      	add	sp, #212	; 0xd4
 80296d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080296dc <WM_MoveWindow>:
 80296dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80296e0:	b08b      	sub	sp, #44	; 0x2c
 80296e2:	4605      	mov	r5, r0
 80296e4:	460c      	mov	r4, r1
 80296e6:	4616      	mov	r6, r2
 80296e8:	f7f7 ffe8 	bl	80216bc <GUI_Lock>
 80296ec:	2300      	movs	r3, #0
 80296ee:	9307      	str	r3, [sp, #28]
 80296f0:	9306      	str	r3, [sp, #24]
 80296f2:	9308      	str	r3, [sp, #32]
 80296f4:	9309      	str	r3, [sp, #36]	; 0x24
 80296f6:	2d00      	cmp	r5, #0
 80296f8:	d03a      	beq.n	8029770 <WM_MoveWindow+0x94>
 80296fa:	b90c      	cbnz	r4, 8029700 <WM_MoveWindow+0x24>
 80296fc:	2e00      	cmp	r6, #0
 80296fe:	d037      	beq.n	8029770 <WM_MoveWindow+0x94>
 8029700:	4628      	mov	r0, r5
 8029702:	f7f6 f951 	bl	801f9a8 <GUI_ALLOC_LockH>
 8029706:	4603      	mov	r3, r0
 8029708:	c803      	ldmia	r0, {r0, r1}
 802970a:	f10d 0808 	add.w	r8, sp, #8
 802970e:	e888 0003 	stmia.w	r8, {r0, r1}
 8029712:	4632      	mov	r2, r6
 8029714:	4618      	mov	r0, r3
 8029716:	4621      	mov	r1, r4
 8029718:	9301      	str	r3, [sp, #4]
 802971a:	f7f6 fd1d 	bl	8020158 <GUI_MoveRect>
 802971e:	9801      	ldr	r0, [sp, #4]
 8029720:	af0a      	add	r7, sp, #40	; 0x28
 8029722:	4632      	mov	r2, r6
 8029724:	4621      	mov	r1, r4
 8029726:	3008      	adds	r0, #8
 8029728:	f7f6 fd16 	bl	8020158 <GUI_MoveRect>
 802972c:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 8029730:	f8d3 901c 	ldr.w	r9, [r3, #28]
 8029734:	4638      	mov	r0, r7
 8029736:	f7f6 f949 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802973a:	4632      	mov	r2, r6
 802973c:	4621      	mov	r1, r4
 802973e:	4648      	mov	r0, r9
 8029740:	f7ff fea6 	bl	8029490 <_MoveDescendents>
 8029744:	4628      	mov	r0, r5
 8029746:	f7f6 f92f 	bl	801f9a8 <GUI_ALLOC_LockH>
 802974a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 802974c:	9001      	str	r0, [sp, #4]
 802974e:	0792      	lsls	r2, r2, #30
 8029750:	d501      	bpl.n	8029756 <WM_MoveWindow+0x7a>
 8029752:	6981      	ldr	r1, [r0, #24]
 8029754:	b989      	cbnz	r1, 802977a <WM_MoveWindow+0x9e>
 8029756:	4638      	mov	r0, r7
 8029758:	f7f6 f938 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802975c:	2203      	movs	r2, #3
 802975e:	ab04      	add	r3, sp, #16
 8029760:	a906      	add	r1, sp, #24
 8029762:	4628      	mov	r0, r5
 8029764:	9404      	str	r4, [sp, #16]
 8029766:	9605      	str	r6, [sp, #20]
 8029768:	9206      	str	r2, [sp, #24]
 802976a:	9309      	str	r3, [sp, #36]	; 0x24
 802976c:	f000 fc56 	bl	802a01c <WM__SendMessage>
 8029770:	f7f7 ff9a 	bl	80216a8 <GUI_Unlock>
 8029774:	b00b      	add	sp, #44	; 0x2c
 8029776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802977a:	6a02      	ldr	r2, [r0, #32]
 802977c:	f7fd ffb4 	bl	80276e8 <WM__InvalidateParent>
 8029780:	9b01      	ldr	r3, [sp, #4]
 8029782:	4640      	mov	r0, r8
 8029784:	6a1a      	ldr	r2, [r3, #32]
 8029786:	6999      	ldr	r1, [r3, #24]
 8029788:	f7fd ffae 	bl	80276e8 <WM__InvalidateParent>
 802978c:	e7e3      	b.n	8029756 <WM_MoveWindow+0x7a>
 802978e:	bf00      	nop

08029790 <WM__DeleteAssocTimer>:
 8029790:	b570      	push	{r4, r5, r6, lr}
 8029792:	b082      	sub	sp, #8
 8029794:	4605      	mov	r5, r0
 8029796:	f7f7 ff91 	bl	80216bc <GUI_Lock>
 802979a:	4668      	mov	r0, sp
 802979c:	f002 feda 	bl	802c554 <GUI_TIMER__GetFirstTimer>
 80297a0:	4604      	mov	r4, r0
 80297a2:	b168      	cbz	r0, 80297c0 <WM__DeleteAssocTimer+0x30>
 80297a4:	2101      	movs	r1, #1
 80297a6:	4620      	mov	r0, r4
 80297a8:	f002 ff74 	bl	802c694 <GUI_TIMER_GetFlag>
 80297ac:	9b00      	ldr	r3, [sp, #0]
 80297ae:	b103      	cbz	r3, 80297b2 <WM__DeleteAssocTimer+0x22>
 80297b0:	b950      	cbnz	r0, 80297c8 <WM__DeleteAssocTimer+0x38>
 80297b2:	4620      	mov	r0, r4
 80297b4:	4669      	mov	r1, sp
 80297b6:	f002 fee5 	bl	802c584 <GUI_TIMER__GetNextTimerLin>
 80297ba:	4604      	mov	r4, r0
 80297bc:	2c00      	cmp	r4, #0
 80297be:	d1f1      	bne.n	80297a4 <WM__DeleteAssocTimer+0x14>
 80297c0:	f7f7 ff72 	bl	80216a8 <GUI_Unlock>
 80297c4:	b002      	add	sp, #8
 80297c6:	bd70      	pop	{r4, r5, r6, pc}
 80297c8:	4618      	mov	r0, r3
 80297ca:	f7f6 f8e3 	bl	801f994 <GUI_ALLOC_h2p>
 80297ce:	6843      	ldr	r3, [r0, #4]
 80297d0:	42ab      	cmp	r3, r5
 80297d2:	4669      	mov	r1, sp
 80297d4:	4620      	mov	r0, r4
 80297d6:	d1ee      	bne.n	80297b6 <WM__DeleteAssocTimer+0x26>
 80297d8:	9e00      	ldr	r6, [sp, #0]
 80297da:	f002 fed3 	bl	802c584 <GUI_TIMER__GetNextTimerLin>
 80297de:	4604      	mov	r4, r0
 80297e0:	2e00      	cmp	r6, #0
 80297e2:	d0eb      	beq.n	80297bc <WM__DeleteAssocTimer+0x2c>
 80297e4:	f7f7 ff6a 	bl	80216bc <GUI_Lock>
 80297e8:	4630      	mov	r0, r6
 80297ea:	f7f6 f8dd 	bl	801f9a8 <GUI_ALLOC_LockH>
 80297ee:	9001      	str	r0, [sp, #4]
 80297f0:	6800      	ldr	r0, [r0, #0]
 80297f2:	f002 fee7 	bl	802c5c4 <GUI_TIMER_Delete>
 80297f6:	a801      	add	r0, sp, #4
 80297f8:	f7f6 f8e8 	bl	801f9cc <GUI_ALLOC_UnlockH>
 80297fc:	4630      	mov	r0, r6
 80297fe:	f7f6 fa75 	bl	801fcec <GUI_ALLOC_Free>
 8029802:	f7f7 ff51 	bl	80216a8 <GUI_Unlock>
 8029806:	2c00      	cmp	r4, #0
 8029808:	d1cc      	bne.n	80297a4 <WM__DeleteAssocTimer+0x14>
 802980a:	e7d9      	b.n	80297c0 <WM__DeleteAssocTimer+0x30>

0802980c <WM__SendTouchMessage>:
 802980c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802980e:	68cc      	ldr	r4, [r1, #12]
 8029810:	b087      	sub	sp, #28
 8029812:	460d      	mov	r5, r1
 8029814:	4607      	mov	r7, r0
 8029816:	b194      	cbz	r4, 802983e <WM__SendTouchMessage+0x32>
 8029818:	f7f6 f8c6 	bl	801f9a8 <GUI_ALLOC_LockH>
 802981c:	aa06      	add	r2, sp, #24
 802981e:	f9b0 e000 	ldrsh.w	lr, [r0]
 8029822:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8029826:	6821      	ldr	r1, [r4, #0]
 8029828:	6863      	ldr	r3, [r4, #4]
 802982a:	f842 0d14 	str.w	r0, [r2, #-20]!
 802982e:	ebce 0101 	rsb	r1, lr, r1
 8029832:	1b9b      	subs	r3, r3, r6
 8029834:	6021      	str	r1, [r4, #0]
 8029836:	4610      	mov	r0, r2
 8029838:	6063      	str	r3, [r4, #4]
 802983a:	f7f6 f8c7 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802983e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8029842:	ae02      	add	r6, sp, #8
 8029844:	f04f 0e0d 	mov.w	lr, #13
 8029848:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 802984c:	463c      	mov	r4, r7
 802984e:	9704      	str	r7, [sp, #16]
 8029850:	f8cd e008 	str.w	lr, [sp, #8]
 8029854:	4620      	mov	r0, r4
 8029856:	f7ff fb33 	bl	8028ec0 <WM_IsWindow>
 802985a:	b170      	cbz	r0, 802987a <WM__SendTouchMessage+0x6e>
 802985c:	4620      	mov	r0, r4
 802985e:	f7ff faf3 	bl	8028e48 <WM_GetParent>
 8029862:	4604      	mov	r4, r0
 8029864:	2800      	cmp	r0, #0
 8029866:	d0f5      	beq.n	8029854 <WM__SendTouchMessage+0x48>
 8029868:	4631      	mov	r1, r6
 802986a:	9505      	str	r5, [sp, #20]
 802986c:	f000 fbf4 	bl	802a058 <WM__SendMessageIfEnabled>
 8029870:	4620      	mov	r0, r4
 8029872:	f7ff fb25 	bl	8028ec0 <WM_IsWindow>
 8029876:	2800      	cmp	r0, #0
 8029878:	d1f0      	bne.n	802985c <WM__SendTouchMessage+0x50>
 802987a:	4629      	mov	r1, r5
 802987c:	4638      	mov	r0, r7
 802987e:	f000 fbeb 	bl	802a058 <WM__SendMessageIfEnabled>
 8029882:	b007      	add	sp, #28
 8029884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029886:	bf00      	nop

08029888 <WM_HandlePID>:
 8029888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802988c:	b099      	sub	sp, #100	; 0x64
 802988e:	ad08      	add	r5, sp, #32
 8029890:	2300      	movs	r3, #0
 8029892:	606b      	str	r3, [r5, #4]
 8029894:	9308      	str	r3, [sp, #32]
 8029896:	60ab      	str	r3, [r5, #8]
 8029898:	f002 f9f8 	bl	802bc8c <GUI_PID_IsEmpty>
 802989c:	b120      	cbz	r0, 80298a8 <WM_HandlePID+0x20>
 802989e:	2400      	movs	r4, #0
 80298a0:	4620      	mov	r0, r4
 80298a2:	b019      	add	sp, #100	; 0x64
 80298a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80298a8:	af0b      	add	r7, sp, #44	; 0x2c
 80298aa:	4604      	mov	r4, r0
 80298ac:	4638      	mov	r0, r7
 80298ae:	f002 f949 	bl	802bb44 <GUI_PID_GetState>
 80298b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80298b4:	3301      	adds	r3, #1
 80298b6:	f000 80e3 	beq.w	8029a80 <WM_HandlePID+0x1f8>
 80298ba:	4eb8      	ldr	r6, [pc, #736]	; (8029b9c <WM_HandlePID+0x314>)
 80298bc:	f7f7 fefe 	bl	80216bc <GUI_Lock>
 80298c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80298c2:	2b00      	cmp	r3, #0
 80298c4:	f2c0 8157 	blt.w	8029b76 <WM_HandlePID+0x2ee>
 80298c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80298ca:	2a00      	cmp	r2, #0
 80298cc:	db09      	blt.n	80298e2 <WM_HandlePID+0x5a>
 80298ce:	48b4      	ldr	r0, [pc, #720]	; (8029ba0 <WM_HandlePID+0x318>)
 80298d0:	49b4      	ldr	r1, [pc, #720]	; (8029ba4 <WM_HandlePID+0x31c>)
 80298d2:	f9b0 0000 	ldrsh.w	r0, [r0]
 80298d6:	f9b1 1000 	ldrsh.w	r1, [r1]
 80298da:	4403      	add	r3, r0
 80298dc:	440a      	add	r2, r1
 80298de:	930b      	str	r3, [sp, #44]	; 0x2c
 80298e0:	920c      	str	r2, [sp, #48]	; 0x30
 80298e2:	f89d 0035 	ldrb.w	r0, [sp, #53]	; 0x35
 80298e6:	2801      	cmp	r0, #1
 80298e8:	bf8c      	ite	hi
 80298ea:	6830      	ldrhi	r0, [r6, #0]
 80298ec:	6030      	strls	r0, [r6, #0]
 80298ee:	f7f6 ff57 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 80298f2:	2800      	cmp	r0, #0
 80298f4:	f000 80be 	beq.w	8029a74 <WM_HandlePID+0x1ec>
 80298f8:	aa04      	add	r2, sp, #16
 80298fa:	a903      	add	r1, sp, #12
 80298fc:	6830      	ldr	r0, [r6, #0]
 80298fe:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8029bb8 <WM_HandlePID+0x330>
 8029902:	f7f7 fe59 	bl	80215b8 <GUI_GetLayerPosEx>
 8029906:	a806      	add	r0, sp, #24
 8029908:	f000 fc5e 	bl	802a1c8 <WM__AddCriticalHandle>
 802990c:	6834      	ldr	r4, [r6, #0]
 802990e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8029910:	9803      	ldr	r0, [sp, #12]
 8029912:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8029914:	9904      	ldr	r1, [sp, #16]
 8029916:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802991a:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 802991e:	1a18      	subs	r0, r3, r0
 8029920:	6923      	ldr	r3, [r4, #16]
 8029922:	900b      	str	r0, [sp, #44]	; 0x2c
 8029924:	1a51      	subs	r1, r2, r1
 8029926:	4298      	cmp	r0, r3
 8029928:	910c      	str	r1, [sp, #48]	; 0x30
 802992a:	d103      	bne.n	8029934 <WM_HandlePID+0xac>
 802992c:	6963      	ldr	r3, [r4, #20]
 802992e:	4299      	cmp	r1, r3
 8029930:	f000 815f 	beq.w	8029bf2 <WM_HandlePID+0x36a>
 8029934:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 8029938:	f002 f8b2 	bl	802baa0 <GUI_CURSOR_SetPositionEx>
 802993c:	f8d8 3000 	ldr.w	r3, [r8]
 8029940:	b113      	cbz	r3, 8029948 <WM_HandlePID+0xc0>
 8029942:	2100      	movs	r1, #0
 8029944:	4638      	mov	r0, r7
 8029946:	4798      	blx	r3
 8029948:	4b97      	ldr	r3, [pc, #604]	; (8029ba8 <WM_HandlePID+0x320>)
 802994a:	6832      	ldr	r2, [r6, #0]
 802994c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8029950:	2800      	cmp	r0, #0
 8029952:	f000 8137 	beq.w	8029bc4 <WM_HandlePID+0x33c>
 8029956:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802995a:	9007      	str	r0, [sp, #28]
 802995c:	b113      	cbz	r3, 8029964 <WM_HandlePID+0xdc>
 802995e:	9907      	ldr	r1, [sp, #28]
 8029960:	4638      	mov	r0, r7
 8029962:	4798      	blx	r3
 8029964:	6833      	ldr	r3, [r6, #0]
 8029966:	4c91      	ldr	r4, [pc, #580]	; (8029bac <WM_HandlePID+0x324>)
 8029968:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8029b9c <WM_HandlePID+0x314>
 802996c:	00db      	lsls	r3, r3, #3
 802996e:	18e1      	adds	r1, r4, r3
 8029970:	684a      	ldr	r2, [r1, #4]
 8029972:	9807      	ldr	r0, [sp, #28]
 8029974:	2a00      	cmp	r2, #0
 8029976:	d042      	beq.n	80299fe <WM_HandlePID+0x176>
 8029978:	4282      	cmp	r2, r0
 802997a:	d040      	beq.n	80299fe <WM_HandlePID+0x176>
 802997c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8029980:	f1ba 0f00 	cmp.w	sl, #0
 8029984:	d03b      	beq.n	80299fe <WM_HandlePID+0x176>
 8029986:	4a8a      	ldr	r2, [pc, #552]	; (8029bb0 <WM_HandlePID+0x328>)
 8029988:	6812      	ldr	r2, [r2, #0]
 802998a:	2a00      	cmp	r2, #0
 802998c:	db09      	blt.n	80299a2 <WM_HandlePID+0x11a>
 802998e:	4b89      	ldr	r3, [pc, #548]	; (8029bb4 <WM_HandlePID+0x32c>)
 8029990:	4650      	mov	r0, sl
 8029992:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8029996:	f000 fb0f 	bl	8029fb8 <WM__IsAncestor>
 802999a:	b380      	cbz	r0, 80299fe <WM_HandlePID+0x176>
 802999c:	f8d9 3000 	ldr.w	r3, [r9]
 80299a0:	00db      	lsls	r3, r3, #3
 80299a2:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8029bc0 <WM_HandlePID+0x338>
 80299a6:	444b      	add	r3, r9
 80299a8:	4650      	mov	r0, sl
 80299aa:	6859      	ldr	r1, [r3, #4]
 80299ac:	f000 fb04 	bl	8029fb8 <WM__IsAncestor>
 80299b0:	6833      	ldr	r3, [r6, #0]
 80299b2:	00db      	lsls	r3, r3, #3
 80299b4:	4499      	add	r9, r3
 80299b6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80299ba:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80299be:	b112      	cbz	r2, 80299c6 <WM_HandlePID+0x13e>
 80299c0:	b908      	cbnz	r0, 80299c6 <WM_HandlePID+0x13e>
 80299c2:	458a      	cmp	sl, r1
 80299c4:	d11b      	bne.n	80299fe <WM_HandlePID+0x176>
 80299c6:	4423      	add	r3, r4
 80299c8:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8029bac <WM_HandlePID+0x324>
 80299cc:	6858      	ldr	r0, [r3, #4]
 80299ce:	f000 fb1b 	bl	802a008 <WM__IsEnabled>
 80299d2:	b1a0      	cbz	r0, 80299fe <WM_HandlePID+0x176>
 80299d4:	6833      	ldr	r3, [r6, #0]
 80299d6:	9517      	str	r5, [sp, #92]	; 0x5c
 80299d8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80299dc:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 80299e0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80299e4:	f8d3 e004 	ldr.w	lr, [r3, #4]
 80299e8:	a914      	add	r1, sp, #80	; 0x50
 80299ea:	2312      	movs	r3, #18
 80299ec:	4670      	mov	r0, lr
 80299ee:	9314      	str	r3, [sp, #80]	; 0x50
 80299f0:	f7ff ff0c 	bl	802980c <WM__SendTouchMessage>
 80299f4:	6833      	ldr	r3, [r6, #0]
 80299f6:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 80299fa:	2200      	movs	r2, #0
 80299fc:	605a      	str	r2, [r3, #4]
 80299fe:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8029a02:	f1b9 0f00 	cmp.w	r9, #0
 8029a06:	f000 80b3 	beq.w	8029b70 <WM_HandlePID+0x2e8>
 8029a0a:	4b69      	ldr	r3, [pc, #420]	; (8029bb0 <WM_HandlePID+0x328>)
 8029a0c:	681b      	ldr	r3, [r3, #0]
 8029a0e:	2b00      	cmp	r3, #0
 8029a10:	db08      	blt.n	8029a24 <WM_HandlePID+0x19c>
 8029a12:	4a68      	ldr	r2, [pc, #416]	; (8029bb4 <WM_HandlePID+0x32c>)
 8029a14:	4648      	mov	r0, r9
 8029a16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8029a1a:	f000 facd 	bl	8029fb8 <WM__IsAncestor>
 8029a1e:	2800      	cmp	r0, #0
 8029a20:	f000 80a6 	beq.w	8029b70 <WM_HandlePID+0x2e8>
 8029a24:	6833      	ldr	r3, [r6, #0]
 8029a26:	f8df a198 	ldr.w	sl, [pc, #408]	; 8029bc0 <WM_HandlePID+0x338>
 8029a2a:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 8029a2e:	4648      	mov	r0, r9
 8029a30:	6859      	ldr	r1, [r3, #4]
 8029a32:	f000 fac1 	bl	8029fb8 <WM__IsAncestor>
 8029a36:	f8d6 e000 	ldr.w	lr, [r6]
 8029a3a:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8029a3e:	44e2      	add	sl, ip
 8029a40:	f8da 3004 	ldr.w	r3, [sl, #4]
 8029a44:	f8da 2004 	ldr.w	r2, [sl, #4]
 8029a48:	b363      	cbz	r3, 8029aa4 <WM_HandlePID+0x21c>
 8029a4a:	bb58      	cbnz	r0, 8029aa4 <WM_HandlePID+0x21c>
 8029a4c:	4591      	cmp	r9, r2
 8029a4e:	d029      	beq.n	8029aa4 <WM_HandlePID+0x21c>
 8029a50:	2400      	movs	r4, #0
 8029a52:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8029a56:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8029a5a:	4473      	add	r3, lr
 8029a5c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8029a60:	3310      	adds	r3, #16
 8029a62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8029a66:	4671      	mov	r1, lr
 8029a68:	4638      	mov	r0, r7
 8029a6a:	f004 fc5f 	bl	802e32c <WM_PID__SetPrevState>
 8029a6e:	a806      	add	r0, sp, #24
 8029a70:	f000 fbb2 	bl	802a1d8 <WM__RemoveCriticalHandle>
 8029a74:	f7f7 fe18 	bl	80216a8 <GUI_Unlock>
 8029a78:	4620      	mov	r0, r4
 8029a7a:	b019      	add	sp, #100	; 0x64
 8029a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029a82:	4e46      	ldr	r6, [pc, #280]	; (8029b9c <WM_HandlePID+0x314>)
 8029a84:	3301      	adds	r3, #1
 8029a86:	f47f af19 	bne.w	80298bc <WM_HandlePID+0x34>
 8029a8a:	6833      	ldr	r3, [r6, #0]
 8029a8c:	4a4a      	ldr	r2, [pc, #296]	; (8029bb8 <WM_HandlePID+0x330>)
 8029a8e:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8029a92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8029a96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8029a9a:	7e1b      	ldrb	r3, [r3, #24]
 8029a9c:	428b      	cmp	r3, r1
 8029a9e:	f47f af0d 	bne.w	80298bc <WM_HandlePID+0x34>
 8029aa2:	e6fc      	b.n	802989e <WM_HandlePID+0x16>
 8029aa4:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8029aa8:	eb03 020e 	add.w	r2, r3, lr
 8029aac:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8029ab0:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 8029ab4:	7e12      	ldrb	r2, [r2, #24]
 8029ab6:	9907      	ldr	r1, [sp, #28]
 8029ab8:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8029bb8 <WM_HandlePID+0x330>
 8029abc:	4464      	add	r4, ip
 8029abe:	4552      	cmp	r2, sl
 8029ac0:	6061      	str	r1, [r4, #4]
 8029ac2:	d003      	beq.n	8029acc <WM_HandlePID+0x244>
 8029ac4:	9907      	ldr	r1, [sp, #28]
 8029ac6:	2900      	cmp	r1, #0
 8029ac8:	f040 809b 	bne.w	8029c02 <WM_HandlePID+0x37a>
 8029acc:	ea52 090a 	orrs.w	r9, r2, sl
 8029ad0:	d07d      	beq.n	8029bce <WM_HandlePID+0x346>
 8029ad2:	4c3a      	ldr	r4, [pc, #232]	; (8029bbc <WM_HandlePID+0x334>)
 8029ad4:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8029ad8:	eb04 020c 	add.w	r2, r4, ip
 8029adc:	f44f 7910 	mov.w	r9, #576	; 0x240
 8029ae0:	6850      	ldr	r0, [r2, #4]
 8029ae2:	9907      	ldr	r1, [sp, #28]
 8029ae4:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8029ae8:	4288      	cmp	r0, r1
 8029aea:	d022      	beq.n	8029b32 <WM_HandlePID+0x2aa>
 8029aec:	6852      	ldr	r2, [r2, #4]
 8029aee:	b302      	cbz	r2, 8029b32 <WM_HandlePID+0x2aa>
 8029af0:	f1ba 0f00 	cmp.w	sl, #0
 8029af4:	f040 8113 	bne.w	8029d1e <WM_HandlePID+0x496>
 8029af8:	4473      	add	r3, lr
 8029afa:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8029afe:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8029b02:	691a      	ldr	r2, [r3, #16]
 8029b04:	695b      	ldr	r3, [r3, #20]
 8029b06:	9309      	str	r3, [sp, #36]	; 0x24
 8029b08:	9208      	str	r2, [sp, #32]
 8029b0a:	462b      	mov	r3, r5
 8029b0c:	44a4      	add	ip, r4
 8029b0e:	a914      	add	r1, sp, #80	; 0x50
 8029b10:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8029b14:	9317      	str	r3, [sp, #92]	; 0x5c
 8029b16:	f7ff fe79 	bl	802980c <WM__SendTouchMessage>
 8029b1a:	f8d6 e000 	ldr.w	lr, [r6]
 8029b1e:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 8029b22:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8029b26:	eb04 030c 	add.w	r3, r4, ip
 8029b2a:	2200      	movs	r2, #0
 8029b2c:	605a      	str	r2, [r3, #4]
 8029b2e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8029b32:	eb03 020e 	add.w	r2, r3, lr
 8029b36:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8029b3a:	9907      	ldr	r1, [sp, #28]
 8029b3c:	f882 a018 	strb.w	sl, [r2, #24]
 8029b40:	2900      	cmp	r1, #0
 8029b42:	d054      	beq.n	8029bee <WM_HandlePID+0x366>
 8029b44:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8029b48:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8029b4c:	f1ba 0f00 	cmp.w	sl, #0
 8029b50:	f000 80c5 	beq.w	8029cde <WM_HandlePID+0x456>
 8029b54:	4464      	add	r4, ip
 8029b56:	9b07      	ldr	r3, [sp, #28]
 8029b58:	6063      	str	r3, [r4, #4]
 8029b5a:	9807      	ldr	r0, [sp, #28]
 8029b5c:	9517      	str	r5, [sp, #92]	; 0x5c
 8029b5e:	a914      	add	r1, sp, #80	; 0x50
 8029b60:	f7ff fe54 	bl	802980c <WM__SendTouchMessage>
 8029b64:	f8d6 e000 	ldr.w	lr, [r6]
 8029b68:	2401      	movs	r4, #1
 8029b6a:	fa0e f304 	lsl.w	r3, lr, r4
 8029b6e:	e772      	b.n	8029a56 <WM_HandlePID+0x1ce>
 8029b70:	f8d6 e000 	ldr.w	lr, [r6]
 8029b74:	e76c      	b.n	8029a50 <WM_HandlePID+0x1c8>
 8029b76:	3301      	adds	r3, #1
 8029b78:	f47f aeb3 	bne.w	80298e2 <WM_HandlePID+0x5a>
 8029b7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029b7e:	3301      	adds	r3, #1
 8029b80:	f47f aeaf 	bne.w	80298e2 <WM_HandlePID+0x5a>
 8029b84:	6833      	ldr	r3, [r6, #0]
 8029b86:	4a0c      	ldr	r2, [pc, #48]	; (8029bb8 <WM_HandlePID+0x330>)
 8029b88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8029b8c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8029b90:	691a      	ldr	r2, [r3, #16]
 8029b92:	695b      	ldr	r3, [r3, #20]
 8029b94:	920b      	str	r2, [sp, #44]	; 0x2c
 8029b96:	930c      	str	r3, [sp, #48]	; 0x30
 8029b98:	e6a3      	b.n	80298e2 <WM_HandlePID+0x5a>
 8029b9a:	bf00      	nop
 8029b9c:	200308f4 	.word	0x200308f4
 8029ba0:	20030888 	.word	0x20030888
 8029ba4:	20030878 	.word	0x20030878
 8029ba8:	20030918 	.word	0x20030918
 8029bac:	20030928 	.word	0x20030928
 8029bb0:	20000138 	.word	0x20000138
 8029bb4:	200308d4 	.word	0x200308d4
 8029bb8:	2002e40c 	.word	0x2002e40c
 8029bbc:	20030938 	.word	0x20030938
 8029bc0:	20030948 	.word	0x20030948
 8029bc4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8029bc6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8029bc8:	f004 fdf6 	bl	802e7b8 <WM_Screen2hWin>
 8029bcc:	e6c3      	b.n	8029956 <WM_HandlePID+0xce>
 8029bce:	9c07      	ldr	r4, [sp, #28]
 8029bd0:	2c00      	cmp	r4, #0
 8029bd2:	f43f af40 	beq.w	8029a56 <WM_HandlePID+0x1ce>
 8029bd6:	9807      	ldr	r0, [sp, #28]
 8029bd8:	f000 fa16 	bl	802a008 <WM__IsEnabled>
 8029bdc:	2800      	cmp	r0, #0
 8029bde:	f040 80b0 	bne.w	8029d42 <WM_HandlePID+0x4ba>
 8029be2:	f8d6 e000 	ldr.w	lr, [r6]
 8029be6:	4604      	mov	r4, r0
 8029be8:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8029bec:	e733      	b.n	8029a56 <WM_HandlePID+0x1ce>
 8029bee:	2401      	movs	r4, #1
 8029bf0:	e731      	b.n	8029a56 <WM_HandlePID+0x1ce>
 8029bf2:	7e22      	ldrb	r2, [r4, #24]
 8029bf4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8029bf8:	429a      	cmp	r2, r3
 8029bfa:	f47f ae9b 	bne.w	8029934 <WM_HandlePID+0xac>
 8029bfe:	2400      	movs	r4, #0
 8029c00:	e735      	b.n	8029a6e <WM_HandlePID+0x1e6>
 8029c02:	9807      	ldr	r0, [sp, #28]
 8029c04:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8029db4 <WM_HandlePID+0x52c>
 8029c08:	f7f5 fece 	bl	801f9a8 <GUI_ALLOC_LockH>
 8029c0c:	6833      	ldr	r3, [r6, #0]
 8029c0e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8029c12:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
 8029c16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8029c1a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8029c1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029c20:	7e1b      	ldrb	r3, [r3, #24]
 8029c22:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 8029c26:	f9b0 4000 	ldrsh.w	r4, [r0]
 8029c2a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8029c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029c30:	9005      	str	r0, [sp, #20]
 8029c32:	1b12      	subs	r2, r2, r4
 8029c34:	1a5b      	subs	r3, r3, r1
 8029c36:	a805      	add	r0, sp, #20
 8029c38:	9211      	str	r2, [sp, #68]	; 0x44
 8029c3a:	9312      	str	r3, [sp, #72]	; 0x48
 8029c3c:	f7f5 fec6 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8029c40:	f8d6 e000 	ldr.w	lr, [r6]
 8029c44:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
 8029c48:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 8029c4c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8029c50:	f103 0210 	add.w	r2, r3, #16
 8029c54:	ca07      	ldmia	r2, {r0, r1, r2}
 8029c56:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8029c5a:	761c      	strb	r4, [r3, #24]
 8029c5c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8029c60:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8029c64:	a911      	add	r1, sp, #68	; 0x44
 8029c66:	2211      	movs	r2, #17
 8029c68:	9117      	str	r1, [sp, #92]	; 0x5c
 8029c6a:	9214      	str	r2, [sp, #80]	; 0x50
 8029c6c:	2b00      	cmp	r3, #0
 8029c6e:	d03e      	beq.n	8029cee <WM_HandlePID+0x466>
 8029c70:	4c4e      	ldr	r4, [pc, #312]	; (8029dac <WM_HandlePID+0x524>)
 8029c72:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8029c76:	a914      	add	r1, sp, #80	; 0x50
 8029c78:	f8de 9004 	ldr.w	r9, [lr, #4]
 8029c7c:	9b07      	ldr	r3, [sp, #28]
 8029c7e:	f8ce 3004 	str.w	r3, [lr, #4]
 8029c82:	f8de 3004 	ldr.w	r3, [lr, #4]
 8029c86:	9807      	ldr	r0, [sp, #28]
 8029c88:	9300      	str	r3, [sp, #0]
 8029c8a:	f000 f9e5 	bl	802a058 <WM__SendMessageIfEnabled>
 8029c8e:	f8db e000 	ldr.w	lr, [fp]
 8029c92:	9b00      	ldr	r3, [sp, #0]
 8029c94:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8029c98:	eb04 020c 	add.w	r2, r4, ip
 8029c9c:	6852      	ldr	r2, [r2, #4]
 8029c9e:	4293      	cmp	r3, r2
 8029ca0:	d003      	beq.n	8029caa <WM_HandlePID+0x422>
 8029ca2:	44a4      	add	ip, r4
 8029ca4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8029ca8:	9307      	str	r3, [sp, #28]
 8029caa:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8029cae:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 8029cb2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8029cb6:	3310      	adds	r3, #16
 8029cb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8029cbc:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8029db8 <WM_HandlePID+0x530>
 8029cc0:	f1b9 0f00 	cmp.w	r9, #0
 8029cc4:	d12d      	bne.n	8029d22 <WM_HandlePID+0x49a>
 8029cc6:	f8d6 e000 	ldr.w	lr, [r6]
 8029cca:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 8029cce:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8029cd2:	eb03 020e 	add.w	r2, r3, lr
 8029cd6:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8029cda:	7e12      	ldrb	r2, [r2, #24]
 8029cdc:	e6f6      	b.n	8029acc <WM_HandlePID+0x244>
 8029cde:	4b34      	ldr	r3, [pc, #208]	; (8029db0 <WM_HandlePID+0x528>)
 8029ce0:	781b      	ldrb	r3, [r3, #0]
 8029ce2:	2b00      	cmp	r3, #0
 8029ce4:	d13f      	bne.n	8029d66 <WM_HandlePID+0x4de>
 8029ce6:	4464      	add	r4, ip
 8029ce8:	2300      	movs	r3, #0
 8029cea:	6063      	str	r3, [r4, #4]
 8029cec:	e735      	b.n	8029b5a <WM_HandlePID+0x2d2>
 8029cee:	4c2f      	ldr	r4, [pc, #188]	; (8029dac <WM_HandlePID+0x524>)
 8029cf0:	9301      	str	r3, [sp, #4]
 8029cf2:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8029cf6:	a914      	add	r1, sp, #80	; 0x50
 8029cf8:	f8de 2004 	ldr.w	r2, [lr, #4]
 8029cfc:	9807      	ldr	r0, [sp, #28]
 8029cfe:	9200      	str	r2, [sp, #0]
 8029d00:	f000 f9aa 	bl	802a058 <WM__SendMessageIfEnabled>
 8029d04:	f8db e000 	ldr.w	lr, [fp]
 8029d08:	9a00      	ldr	r2, [sp, #0]
 8029d0a:	9b01      	ldr	r3, [sp, #4]
 8029d0c:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8029d10:	eb04 010c 	add.w	r1, r4, ip
 8029d14:	6849      	ldr	r1, [r1, #4]
 8029d16:	428a      	cmp	r2, r1
 8029d18:	d036      	beq.n	8029d88 <WM_HandlePID+0x500>
 8029d1a:	4699      	mov	r9, r3
 8029d1c:	e7c1      	b.n	8029ca2 <WM_HandlePID+0x41a>
 8029d1e:	2300      	movs	r3, #0
 8029d20:	e6f4      	b.n	8029b0c <WM_HandlePID+0x284>
 8029d22:	4648      	mov	r0, r9
 8029d24:	f7ff f8cc 	bl	8028ec0 <WM_IsWindow>
 8029d28:	f8d6 e000 	ldr.w	lr, [r6]
 8029d2c:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 8029d30:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8029d34:	b9f0      	cbnz	r0, 8029d74 <WM_HandlePID+0x4ec>
 8029d36:	eb03 020e 	add.w	r2, r3, lr
 8029d3a:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8029d3e:	7e12      	ldrb	r2, [r2, #24]
 8029d40:	e6c4      	b.n	8029acc <WM_HandlePID+0x244>
 8029d42:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8029d46:	9c07      	ldr	r4, [sp, #28]
 8029d48:	9517      	str	r5, [sp, #92]	; 0x5c
 8029d4a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8029d4e:	2310      	movs	r3, #16
 8029d50:	4620      	mov	r0, r4
 8029d52:	a914      	add	r1, sp, #80	; 0x50
 8029d54:	9314      	str	r3, [sp, #80]	; 0x50
 8029d56:	f7ff fd59 	bl	802980c <WM__SendTouchMessage>
 8029d5a:	f8d6 e000 	ldr.w	lr, [r6]
 8029d5e:	464c      	mov	r4, r9
 8029d60:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8029d64:	e677      	b.n	8029a56 <WM_HandlePID+0x1ce>
 8029d66:	f004 fd73 	bl	802e850 <WM_ReleaseCapture>
 8029d6a:	f8d6 e000 	ldr.w	lr, [r6]
 8029d6e:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8029d72:	e7b8      	b.n	8029ce6 <WM_HandlePID+0x45e>
 8029d74:	eb04 04ce 	add.w	r4, r4, lr, lsl #3
 8029d78:	eb03 020e 	add.w	r2, r3, lr
 8029d7c:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8029d80:	f8c4 9004 	str.w	r9, [r4, #4]
 8029d84:	7e12      	ldrb	r2, [r2, #24]
 8029d86:	e6a1      	b.n	8029acc <WM_HandlePID+0x244>
 8029d88:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8029d8c:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8029d90:	eb03 040e 	add.w	r4, r3, lr
 8029d94:	eb09 0984 	add.w	r9, r9, r4, lsl #2
 8029d98:	f109 0410 	add.w	r4, r9, #16
 8029d9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8029da0:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 8029da4:	f899 2018 	ldrb.w	r2, [r9, #24]
 8029da8:	e690      	b.n	8029acc <WM_HandlePID+0x244>
 8029daa:	bf00      	nop
 8029dac:	20030938 	.word	0x20030938
 8029db0:	200308f8 	.word	0x200308f8
 8029db4:	200308f4 	.word	0x200308f4
 8029db8:	2002e40c 	.word	0x2002e40c

08029dbc <WM__ForEachDesc>:
 8029dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029dc0:	b085      	sub	sp, #20
 8029dc2:	460d      	mov	r5, r1
 8029dc4:	4614      	mov	r4, r2
 8029dc6:	f7f5 fde5 	bl	801f994 <GUI_ALLOC_h2p>
 8029dca:	69c3      	ldr	r3, [r0, #28]
 8029dcc:	9302      	str	r3, [sp, #8]
 8029dce:	2b00      	cmp	r3, #0
 8029dd0:	f000 809e 	beq.w	8029f10 <WM__ForEachDesc+0x154>
 8029dd4:	9e02      	ldr	r6, [sp, #8]
 8029dd6:	4621      	mov	r1, r4
 8029dd8:	4630      	mov	r0, r6
 8029dda:	47a8      	blx	r5
 8029ddc:	4630      	mov	r0, r6
 8029dde:	f7f5 fdd9 	bl	801f994 <GUI_ALLOC_h2p>
 8029de2:	69c3      	ldr	r3, [r0, #28]
 8029de4:	9303      	str	r3, [sp, #12]
 8029de6:	2b00      	cmp	r3, #0
 8029de8:	f000 808a 	beq.w	8029f00 <WM__ForEachDesc+0x144>
 8029dec:	9e03      	ldr	r6, [sp, #12]
 8029dee:	4621      	mov	r1, r4
 8029df0:	4630      	mov	r0, r6
 8029df2:	47a8      	blx	r5
 8029df4:	4630      	mov	r0, r6
 8029df6:	f7f5 fdcd 	bl	801f994 <GUI_ALLOC_h2p>
 8029dfa:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8029dfe:	f1b8 0f00 	cmp.w	r8, #0
 8029e02:	d075      	beq.n	8029ef0 <WM__ForEachDesc+0x134>
 8029e04:	4621      	mov	r1, r4
 8029e06:	4640      	mov	r0, r8
 8029e08:	47a8      	blx	r5
 8029e0a:	4640      	mov	r0, r8
 8029e0c:	f7f5 fdc2 	bl	801f994 <GUI_ALLOC_h2p>
 8029e10:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8029e14:	f1b9 0f00 	cmp.w	r9, #0
 8029e18:	d062      	beq.n	8029ee0 <WM__ForEachDesc+0x124>
 8029e1a:	4621      	mov	r1, r4
 8029e1c:	4648      	mov	r0, r9
 8029e1e:	47a8      	blx	r5
 8029e20:	4648      	mov	r0, r9
 8029e22:	f7f5 fdb7 	bl	801f994 <GUI_ALLOC_h2p>
 8029e26:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 8029e2a:	f1ba 0f00 	cmp.w	sl, #0
 8029e2e:	d04f      	beq.n	8029ed0 <WM__ForEachDesc+0x114>
 8029e30:	4621      	mov	r1, r4
 8029e32:	4650      	mov	r0, sl
 8029e34:	47a8      	blx	r5
 8029e36:	4650      	mov	r0, sl
 8029e38:	f7f5 fdac 	bl	801f994 <GUI_ALLOC_h2p>
 8029e3c:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 8029e40:	f1bb 0f00 	cmp.w	fp, #0
 8029e44:	d03c      	beq.n	8029ec0 <WM__ForEachDesc+0x104>
 8029e46:	4621      	mov	r1, r4
 8029e48:	4658      	mov	r0, fp
 8029e4a:	47a8      	blx	r5
 8029e4c:	4658      	mov	r0, fp
 8029e4e:	f7f5 fda1 	bl	801f994 <GUI_ALLOC_h2p>
 8029e52:	69c3      	ldr	r3, [r0, #28]
 8029e54:	9301      	str	r3, [sp, #4]
 8029e56:	b35b      	cbz	r3, 8029eb0 <WM__ForEachDesc+0xf4>
 8029e58:	9e01      	ldr	r6, [sp, #4]
 8029e5a:	4621      	mov	r1, r4
 8029e5c:	4630      	mov	r0, r6
 8029e5e:	47a8      	blx	r5
 8029e60:	4630      	mov	r0, r6
 8029e62:	f7f5 fd97 	bl	801f994 <GUI_ALLOC_h2p>
 8029e66:	69c6      	ldr	r6, [r0, #28]
 8029e68:	b1de      	cbz	r6, 8029ea2 <WM__ForEachDesc+0xe6>
 8029e6a:	4621      	mov	r1, r4
 8029e6c:	4630      	mov	r0, r6
 8029e6e:	47a8      	blx	r5
 8029e70:	4630      	mov	r0, r6
 8029e72:	f7f5 fd8f 	bl	801f994 <GUI_ALLOC_h2p>
 8029e76:	69c7      	ldr	r7, [r0, #28]
 8029e78:	b16f      	cbz	r7, 8029e96 <WM__ForEachDesc+0xda>
 8029e7a:	4638      	mov	r0, r7
 8029e7c:	4621      	mov	r1, r4
 8029e7e:	47a8      	blx	r5
 8029e80:	4638      	mov	r0, r7
 8029e82:	4622      	mov	r2, r4
 8029e84:	4629      	mov	r1, r5
 8029e86:	f7ff ff99 	bl	8029dbc <WM__ForEachDesc>
 8029e8a:	4638      	mov	r0, r7
 8029e8c:	f7f5 fd82 	bl	801f994 <GUI_ALLOC_h2p>
 8029e90:	6a07      	ldr	r7, [r0, #32]
 8029e92:	2f00      	cmp	r7, #0
 8029e94:	d1f1      	bne.n	8029e7a <WM__ForEachDesc+0xbe>
 8029e96:	4630      	mov	r0, r6
 8029e98:	f7f5 fd7c 	bl	801f994 <GUI_ALLOC_h2p>
 8029e9c:	6a06      	ldr	r6, [r0, #32]
 8029e9e:	2e00      	cmp	r6, #0
 8029ea0:	d1e3      	bne.n	8029e6a <WM__ForEachDesc+0xae>
 8029ea2:	9801      	ldr	r0, [sp, #4]
 8029ea4:	f7f5 fd76 	bl	801f994 <GUI_ALLOC_h2p>
 8029ea8:	6a03      	ldr	r3, [r0, #32]
 8029eaa:	9301      	str	r3, [sp, #4]
 8029eac:	2b00      	cmp	r3, #0
 8029eae:	d1d3      	bne.n	8029e58 <WM__ForEachDesc+0x9c>
 8029eb0:	4658      	mov	r0, fp
 8029eb2:	f7f5 fd6f 	bl	801f994 <GUI_ALLOC_h2p>
 8029eb6:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8029eba:	f1bb 0f00 	cmp.w	fp, #0
 8029ebe:	d1c2      	bne.n	8029e46 <WM__ForEachDesc+0x8a>
 8029ec0:	4650      	mov	r0, sl
 8029ec2:	f7f5 fd67 	bl	801f994 <GUI_ALLOC_h2p>
 8029ec6:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8029eca:	f1ba 0f00 	cmp.w	sl, #0
 8029ece:	d1af      	bne.n	8029e30 <WM__ForEachDesc+0x74>
 8029ed0:	4648      	mov	r0, r9
 8029ed2:	f7f5 fd5f 	bl	801f994 <GUI_ALLOC_h2p>
 8029ed6:	f8d0 9020 	ldr.w	r9, [r0, #32]
 8029eda:	f1b9 0f00 	cmp.w	r9, #0
 8029ede:	d19c      	bne.n	8029e1a <WM__ForEachDesc+0x5e>
 8029ee0:	4640      	mov	r0, r8
 8029ee2:	f7f5 fd57 	bl	801f994 <GUI_ALLOC_h2p>
 8029ee6:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8029eea:	f1b8 0f00 	cmp.w	r8, #0
 8029eee:	d189      	bne.n	8029e04 <WM__ForEachDesc+0x48>
 8029ef0:	9803      	ldr	r0, [sp, #12]
 8029ef2:	f7f5 fd4f 	bl	801f994 <GUI_ALLOC_h2p>
 8029ef6:	6a03      	ldr	r3, [r0, #32]
 8029ef8:	9303      	str	r3, [sp, #12]
 8029efa:	2b00      	cmp	r3, #0
 8029efc:	f47f af76 	bne.w	8029dec <WM__ForEachDesc+0x30>
 8029f00:	9802      	ldr	r0, [sp, #8]
 8029f02:	f7f5 fd47 	bl	801f994 <GUI_ALLOC_h2p>
 8029f06:	6a03      	ldr	r3, [r0, #32]
 8029f08:	9302      	str	r3, [sp, #8]
 8029f0a:	2b00      	cmp	r3, #0
 8029f0c:	f47f af62 	bne.w	8029dd4 <WM__ForEachDesc+0x18>
 8029f10:	b005      	add	sp, #20
 8029f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029f16:	bf00      	nop

08029f18 <WM__GetFocusedChild>:
 8029f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029f1a:	4e10      	ldr	r6, [pc, #64]	; (8029f5c <WM__GetFocusedChild+0x44>)
 8029f1c:	4d10      	ldr	r5, [pc, #64]	; (8029f60 <WM__GetFocusedChild+0x48>)
 8029f1e:	6833      	ldr	r3, [r6, #0]
 8029f20:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8029f24:	b083      	sub	sp, #12
 8029f26:	b913      	cbnz	r3, 8029f2e <WM__GetFocusedChild+0x16>
 8029f28:	2000      	movs	r0, #0
 8029f2a:	b003      	add	sp, #12
 8029f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029f2e:	4607      	mov	r7, r0
 8029f30:	4618      	mov	r0, r3
 8029f32:	f7f5 fd39 	bl	801f9a8 <GUI_ALLOC_LockH>
 8029f36:	4604      	mov	r4, r0
 8029f38:	9001      	str	r0, [sp, #4]
 8029f3a:	b150      	cbz	r0, 8029f52 <WM__GetFocusedChild+0x3a>
 8029f3c:	6984      	ldr	r4, [r0, #24]
 8029f3e:	a801      	add	r0, sp, #4
 8029f40:	f7f5 fd44 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8029f44:	42a7      	cmp	r7, r4
 8029f46:	d1ef      	bne.n	8029f28 <WM__GetFocusedChild+0x10>
 8029f48:	6833      	ldr	r3, [r6, #0]
 8029f4a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8029f4e:	b003      	add	sp, #12
 8029f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029f52:	a801      	add	r0, sp, #4
 8029f54:	f7f5 fd3a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 8029f58:	4620      	mov	r0, r4
 8029f5a:	e7e6      	b.n	8029f2a <WM__GetFocusedChild+0x12>
 8029f5c:	200308f4 	.word	0x200308f4
 8029f60:	200308e4 	.word	0x200308e4

08029f64 <WM__GetLastSibling>:
 8029f64:	b510      	push	{r4, lr}
 8029f66:	4604      	mov	r4, r0
 8029f68:	b908      	cbnz	r0, 8029f6e <WM__GetLastSibling+0xa>
 8029f6a:	e006      	b.n	8029f7a <WM__GetLastSibling+0x16>
 8029f6c:	461c      	mov	r4, r3
 8029f6e:	4620      	mov	r0, r4
 8029f70:	f7f5 fd10 	bl	801f994 <GUI_ALLOC_h2p>
 8029f74:	6a03      	ldr	r3, [r0, #32]
 8029f76:	2b00      	cmp	r3, #0
 8029f78:	d1f8      	bne.n	8029f6c <WM__GetLastSibling+0x8>
 8029f7a:	4620      	mov	r0, r4
 8029f7c:	bd10      	pop	{r4, pc}
 8029f7e:	bf00      	nop

08029f80 <WM__GetPrevSibling>:
 8029f80:	b538      	push	{r3, r4, r5, lr}
 8029f82:	4605      	mov	r5, r0
 8029f84:	f7fe ff60 	bl	8028e48 <WM_GetParent>
 8029f88:	b910      	cbnz	r0, 8029f90 <WM__GetPrevSibling+0x10>
 8029f8a:	2400      	movs	r4, #0
 8029f8c:	4620      	mov	r0, r4
 8029f8e:	bd38      	pop	{r3, r4, r5, pc}
 8029f90:	f7f5 fd00 	bl	801f994 <GUI_ALLOC_h2p>
 8029f94:	69c4      	ldr	r4, [r0, #28]
 8029f96:	2c00      	cmp	r4, #0
 8029f98:	d0f7      	beq.n	8029f8a <WM__GetPrevSibling+0xa>
 8029f9a:	42a5      	cmp	r5, r4
 8029f9c:	d103      	bne.n	8029fa6 <WM__GetPrevSibling+0x26>
 8029f9e:	e7f4      	b.n	8029f8a <WM__GetPrevSibling+0xa>
 8029fa0:	461c      	mov	r4, r3
 8029fa2:	2b00      	cmp	r3, #0
 8029fa4:	d0f1      	beq.n	8029f8a <WM__GetPrevSibling+0xa>
 8029fa6:	4620      	mov	r0, r4
 8029fa8:	f7f5 fcf4 	bl	801f994 <GUI_ALLOC_h2p>
 8029fac:	6a03      	ldr	r3, [r0, #32]
 8029fae:	429d      	cmp	r5, r3
 8029fb0:	d1f6      	bne.n	8029fa0 <WM__GetPrevSibling+0x20>
 8029fb2:	4620      	mov	r0, r4
 8029fb4:	bd38      	pop	{r3, r4, r5, pc}
 8029fb6:	bf00      	nop

08029fb8 <WM__IsAncestor>:
 8029fb8:	b158      	cbz	r0, 8029fd2 <WM__IsAncestor+0x1a>
 8029fba:	b510      	push	{r4, lr}
 8029fbc:	460c      	mov	r4, r1
 8029fbe:	b131      	cbz	r1, 8029fce <WM__IsAncestor+0x16>
 8029fc0:	f7f5 fce8 	bl	801f994 <GUI_ALLOC_h2p>
 8029fc4:	6980      	ldr	r0, [r0, #24]
 8029fc6:	4284      	cmp	r4, r0
 8029fc8:	d005      	beq.n	8029fd6 <WM__IsAncestor+0x1e>
 8029fca:	2800      	cmp	r0, #0
 8029fcc:	d1f8      	bne.n	8029fc0 <WM__IsAncestor+0x8>
 8029fce:	2000      	movs	r0, #0
 8029fd0:	bd10      	pop	{r4, pc}
 8029fd2:	2000      	movs	r0, #0
 8029fd4:	4770      	bx	lr
 8029fd6:	2001      	movs	r0, #1
 8029fd8:	bd10      	pop	{r4, pc}
 8029fda:	bf00      	nop

08029fdc <WM__IsAncestorOrSelf>:
 8029fdc:	4288      	cmp	r0, r1
 8029fde:	d010      	beq.n	802a002 <WM__IsAncestorOrSelf+0x26>
 8029fe0:	b120      	cbz	r0, 8029fec <WM__IsAncestorOrSelf+0x10>
 8029fe2:	b510      	push	{r4, lr}
 8029fe4:	460c      	mov	r4, r1
 8029fe6:	b929      	cbnz	r1, 8029ff4 <WM__IsAncestorOrSelf+0x18>
 8029fe8:	2000      	movs	r0, #0
 8029fea:	bd10      	pop	{r4, pc}
 8029fec:	2000      	movs	r0, #0
 8029fee:	4770      	bx	lr
 8029ff0:	2800      	cmp	r0, #0
 8029ff2:	d0f9      	beq.n	8029fe8 <WM__IsAncestorOrSelf+0xc>
 8029ff4:	f7f5 fcce 	bl	801f994 <GUI_ALLOC_h2p>
 8029ff8:	6980      	ldr	r0, [r0, #24]
 8029ffa:	4284      	cmp	r4, r0
 8029ffc:	d1f8      	bne.n	8029ff0 <WM__IsAncestorOrSelf+0x14>
 8029ffe:	2001      	movs	r0, #1
 802a000:	bd10      	pop	{r4, pc}
 802a002:	2001      	movs	r0, #1
 802a004:	4770      	bx	lr
 802a006:	bf00      	nop

0802a008 <WM__IsEnabled>:
 802a008:	b508      	push	{r3, lr}
 802a00a:	f7f5 fcc3 	bl	801f994 <GUI_ALLOC_h2p>
 802a00e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 802a010:	f080 0010 	eor.w	r0, r0, #16
 802a014:	f3c0 1000 	ubfx	r0, r0, #4, #1
 802a018:	bd08      	pop	{r3, pc}
 802a01a:	bf00      	nop

0802a01c <WM__SendMessage>:
 802a01c:	b570      	push	{r4, r5, r6, lr}
 802a01e:	4c0d      	ldr	r4, [pc, #52]	; (802a054 <WM__SendMessage+0x38>)
 802a020:	6822      	ldr	r2, [r4, #0]
 802a022:	2a13      	cmp	r2, #19
 802a024:	dd00      	ble.n	802a028 <WM__SendMessage+0xc>
 802a026:	bd70      	pop	{r4, r5, r6, pc}
 802a028:	4606      	mov	r6, r0
 802a02a:	460d      	mov	r5, r1
 802a02c:	f7f5 fcb2 	bl	801f994 <GUI_ALLOC_h2p>
 802a030:	6902      	ldr	r2, [r0, #16]
 802a032:	606e      	str	r6, [r5, #4]
 802a034:	b142      	cbz	r2, 802a048 <WM__SendMessage+0x2c>
 802a036:	6823      	ldr	r3, [r4, #0]
 802a038:	4628      	mov	r0, r5
 802a03a:	3301      	adds	r3, #1
 802a03c:	6023      	str	r3, [r4, #0]
 802a03e:	4790      	blx	r2
 802a040:	6823      	ldr	r3, [r4, #0]
 802a042:	3b01      	subs	r3, #1
 802a044:	6023      	str	r3, [r4, #0]
 802a046:	bd70      	pop	{r4, r5, r6, pc}
 802a048:	4628      	mov	r0, r5
 802a04a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a04e:	f7fe bb15 	b.w	802867c <WM_DefaultProc>
 802a052:	bf00      	nop
 802a054:	2002e434 	.word	0x2002e434

0802a058 <WM__SendMessageIfEnabled>:
 802a058:	b570      	push	{r4, r5, r6, lr}
 802a05a:	460e      	mov	r6, r1
 802a05c:	4605      	mov	r5, r0
 802a05e:	f7f5 fc99 	bl	801f994 <GUI_ALLOC_h2p>
 802a062:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802a064:	06db      	lsls	r3, r3, #27
 802a066:	d403      	bmi.n	802a070 <WM__SendMessageIfEnabled+0x18>
 802a068:	4c0c      	ldr	r4, [pc, #48]	; (802a09c <WM__SendMessageIfEnabled+0x44>)
 802a06a:	6823      	ldr	r3, [r4, #0]
 802a06c:	2b13      	cmp	r3, #19
 802a06e:	dd00      	ble.n	802a072 <WM__SendMessageIfEnabled+0x1a>
 802a070:	bd70      	pop	{r4, r5, r6, pc}
 802a072:	4628      	mov	r0, r5
 802a074:	f7f5 fc8e 	bl	801f994 <GUI_ALLOC_h2p>
 802a078:	6902      	ldr	r2, [r0, #16]
 802a07a:	6075      	str	r5, [r6, #4]
 802a07c:	b142      	cbz	r2, 802a090 <WM__SendMessageIfEnabled+0x38>
 802a07e:	6823      	ldr	r3, [r4, #0]
 802a080:	4630      	mov	r0, r6
 802a082:	3301      	adds	r3, #1
 802a084:	6023      	str	r3, [r4, #0]
 802a086:	4790      	blx	r2
 802a088:	6823      	ldr	r3, [r4, #0]
 802a08a:	3b01      	subs	r3, #1
 802a08c:	6023      	str	r3, [r4, #0]
 802a08e:	bd70      	pop	{r4, r5, r6, pc}
 802a090:	4630      	mov	r0, r6
 802a092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802a096:	f7fe baf1 	b.w	802867c <WM_DefaultProc>
 802a09a:	bf00      	nop
 802a09c:	2002e434 	.word	0x2002e434

0802a0a0 <WM__SendMessageNoPara>:
 802a0a0:	b530      	push	{r4, r5, lr}
 802a0a2:	b085      	sub	sp, #20
 802a0a4:	2300      	movs	r3, #0
 802a0a6:	9301      	str	r3, [sp, #4]
 802a0a8:	9300      	str	r3, [sp, #0]
 802a0aa:	9302      	str	r3, [sp, #8]
 802a0ac:	9303      	str	r3, [sp, #12]
 802a0ae:	460c      	mov	r4, r1
 802a0b0:	4605      	mov	r5, r0
 802a0b2:	f7f5 fc6f 	bl	801f994 <GUI_ALLOC_h2p>
 802a0b6:	6903      	ldr	r3, [r0, #16]
 802a0b8:	b11b      	cbz	r3, 802a0c2 <WM__SendMessageNoPara+0x22>
 802a0ba:	e88d 0030 	stmia.w	sp, {r4, r5}
 802a0be:	4668      	mov	r0, sp
 802a0c0:	4798      	blx	r3
 802a0c2:	b005      	add	sp, #20
 802a0c4:	bd30      	pop	{r4, r5, pc}
 802a0c6:	bf00      	nop

0802a0c8 <WM__UpdateChildPositions>:
 802a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a0cc:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 802a0d0:	b08b      	sub	sp, #44	; 0x2c
 802a0d2:	f1bb 0f00 	cmp.w	fp, #0
 802a0d6:	d074      	beq.n	802a1c2 <WM__UpdateChildPositions+0xfa>
 802a0d8:	9307      	str	r3, [sp, #28]
 802a0da:	b29b      	uxth	r3, r3
 802a0dc:	9303      	str	r3, [sp, #12]
 802a0de:	b28b      	uxth	r3, r1
 802a0e0:	9304      	str	r3, [sp, #16]
 802a0e2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 802a0e6:	9202      	str	r2, [sp, #8]
 802a0e8:	9106      	str	r1, [sp, #24]
 802a0ea:	9305      	str	r3, [sp, #20]
 802a0ec:	e039      	b.n	802a162 <WM__UpdateChildPositions+0x9a>
 802a0ee:	9906      	ldr	r1, [sp, #24]
 802a0f0:	eb0a 0601 	add.w	r6, sl, r1
 802a0f4:	9907      	ldr	r1, [sp, #28]
 802a0f6:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 802a0fa:	eb08 0401 	add.w	r4, r8, r1
 802a0fe:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 802a102:	b236      	sxth	r6, r6
 802a104:	b224      	sxth	r4, r4
 802a106:	d04c      	beq.n	802a1a2 <WM__UpdateChildPositions+0xda>
 802a108:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 802a10c:	d150      	bne.n	802a1b0 <WM__UpdateChildPositions+0xe8>
 802a10e:	9a02      	ldr	r2, [sp, #8]
 802a110:	189f      	adds	r7, r3, r2
 802a112:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802a114:	eb09 0502 	add.w	r5, r9, r2
 802a118:	b23f      	sxth	r7, r7
 802a11a:	b22d      	sxth	r5, r5
 802a11c:	ebb6 010a 	subs.w	r1, r6, sl
 802a120:	eba7 0203 	sub.w	r2, r7, r3
 802a124:	d100      	bne.n	802a128 <WM__UpdateChildPositions+0x60>
 802a126:	b122      	cbz	r2, 802a132 <WM__UpdateChildPositions+0x6a>
 802a128:	4658      	mov	r0, fp
 802a12a:	9301      	str	r3, [sp, #4]
 802a12c:	f7ff fad6 	bl	80296dc <WM_MoveWindow>
 802a130:	9b01      	ldr	r3, [sp, #4]
 802a132:	1ba4      	subs	r4, r4, r6
 802a134:	ebca 0808 	rsb	r8, sl, r8
 802a138:	1bed      	subs	r5, r5, r7
 802a13a:	ebc3 0909 	rsb	r9, r3, r9
 802a13e:	ebb4 0108 	subs.w	r1, r4, r8
 802a142:	ebc9 0205 	rsb	r2, r9, r5
 802a146:	d100      	bne.n	802a14a <WM__UpdateChildPositions+0x82>
 802a148:	b112      	cbz	r2, 802a150 <WM__UpdateChildPositions+0x88>
 802a14a:	4658      	mov	r0, fp
 802a14c:	f7fe ff26 	bl	8028f9c <WM_ResizeWindow>
 802a150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a152:	f8d3 b020 	ldr.w	fp, [r3, #32]
 802a156:	a809      	add	r0, sp, #36	; 0x24
 802a158:	f7f5 fc38 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a15c:	f1bb 0f00 	cmp.w	fp, #0
 802a160:	d02f      	beq.n	802a1c2 <WM__UpdateChildPositions+0xfa>
 802a162:	4658      	mov	r0, fp
 802a164:	f7f5 fc20 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a168:	6a82      	ldr	r2, [r0, #40]	; 0x28
 802a16a:	9009      	str	r0, [sp, #36]	; 0x24
 802a16c:	f402 7120 	and.w	r1, r2, #640	; 0x280
 802a170:	2980      	cmp	r1, #128	; 0x80
 802a172:	f9b0 a000 	ldrsh.w	sl, [r0]
 802a176:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802a17a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 802a17e:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 802a182:	d01c      	beq.n	802a1be <WM__UpdateChildPositions+0xf6>
 802a184:	f5b1 7f20 	cmp.w	r1, #640	; 0x280
 802a188:	d0b1      	beq.n	802a0ee <WM__UpdateChildPositions+0x26>
 802a18a:	9804      	ldr	r0, [sp, #16]
 802a18c:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 802a190:	eb00 060a 	add.w	r6, r0, sl
 802a194:	eb00 0408 	add.w	r4, r0, r8
 802a198:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 802a19c:	b236      	sxth	r6, r6
 802a19e:	b224      	sxth	r4, r4
 802a1a0:	d1b2      	bne.n	802a108 <WM__UpdateChildPositions+0x40>
 802a1a2:	9a05      	ldr	r2, [sp, #20]
 802a1a4:	18d7      	adds	r7, r2, r3
 802a1a6:	eb02 0509 	add.w	r5, r2, r9
 802a1aa:	b23f      	sxth	r7, r7
 802a1ac:	b22d      	sxth	r5, r5
 802a1ae:	e7b5      	b.n	802a11c <WM__UpdateChildPositions+0x54>
 802a1b0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 802a1b4:	18cf      	adds	r7, r1, r3
 802a1b6:	4449      	add	r1, r9
 802a1b8:	b23f      	sxth	r7, r7
 802a1ba:	b20d      	sxth	r5, r1
 802a1bc:	e7ae      	b.n	802a11c <WM__UpdateChildPositions+0x54>
 802a1be:	9803      	ldr	r0, [sp, #12]
 802a1c0:	e7e4      	b.n	802a18c <WM__UpdateChildPositions+0xc4>
 802a1c2:	b00b      	add	sp, #44	; 0x2c
 802a1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802a1c8 <WM__AddCriticalHandle>:
 802a1c8:	4b02      	ldr	r3, [pc, #8]	; (802a1d4 <WM__AddCriticalHandle+0xc>)
 802a1ca:	681a      	ldr	r2, [r3, #0]
 802a1cc:	6002      	str	r2, [r0, #0]
 802a1ce:	6018      	str	r0, [r3, #0]
 802a1d0:	4770      	bx	lr
 802a1d2:	bf00      	nop
 802a1d4:	20030910 	.word	0x20030910

0802a1d8 <WM__RemoveCriticalHandle>:
 802a1d8:	b410      	push	{r4}
 802a1da:	4c0e      	ldr	r4, [pc, #56]	; (802a214 <WM__RemoveCriticalHandle+0x3c>)
 802a1dc:	6821      	ldr	r1, [r4, #0]
 802a1de:	b159      	cbz	r1, 802a1f8 <WM__RemoveCriticalHandle+0x20>
 802a1e0:	4281      	cmp	r1, r0
 802a1e2:	d012      	beq.n	802a20a <WM__RemoveCriticalHandle+0x32>
 802a1e4:	680b      	ldr	r3, [r1, #0]
 802a1e6:	b90b      	cbnz	r3, 802a1ec <WM__RemoveCriticalHandle+0x14>
 802a1e8:	e006      	b.n	802a1f8 <WM__RemoveCriticalHandle+0x20>
 802a1ea:	4613      	mov	r3, r2
 802a1ec:	4298      	cmp	r0, r3
 802a1ee:	d006      	beq.n	802a1fe <WM__RemoveCriticalHandle+0x26>
 802a1f0:	681a      	ldr	r2, [r3, #0]
 802a1f2:	4619      	mov	r1, r3
 802a1f4:	2a00      	cmp	r2, #0
 802a1f6:	d1f8      	bne.n	802a1ea <WM__RemoveCriticalHandle+0x12>
 802a1f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a1fc:	4770      	bx	lr
 802a1fe:	b129      	cbz	r1, 802a20c <WM__RemoveCriticalHandle+0x34>
 802a200:	6803      	ldr	r3, [r0, #0]
 802a202:	600b      	str	r3, [r1, #0]
 802a204:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a208:	4770      	bx	lr
 802a20a:	460b      	mov	r3, r1
 802a20c:	681b      	ldr	r3, [r3, #0]
 802a20e:	6023      	str	r3, [r4, #0]
 802a210:	e7f2      	b.n	802a1f8 <WM__RemoveCriticalHandle+0x20>
 802a212:	bf00      	nop
 802a214:	20030910 	.word	0x20030910

0802a218 <WM__GetClientRectEx>:
 802a218:	b180      	cbz	r0, 802a23c <WM__GetClientRectEx+0x24>
 802a21a:	b179      	cbz	r1, 802a23c <WM__GetClientRectEx+0x24>
 802a21c:	b530      	push	{r4, r5, lr}
 802a21e:	b083      	sub	sp, #12
 802a220:	460c      	mov	r4, r1
 802a222:	f7f5 fbc1 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a226:	ad02      	add	r5, sp, #8
 802a228:	4621      	mov	r1, r4
 802a22a:	f845 0d04 	str.w	r0, [r5, #-4]!
 802a22e:	f7fd fb55 	bl	80278dc <WM__GetClientRectWin>
 802a232:	4628      	mov	r0, r5
 802a234:	f7f5 fbca 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a238:	b003      	add	sp, #12
 802a23a:	bd30      	pop	{r4, r5, pc}
 802a23c:	4770      	bx	lr
 802a23e:	bf00      	nop

0802a240 <_OnTouchDefault>:
 802a240:	b570      	push	{r4, r5, r6, lr}
 802a242:	b082      	sub	sp, #8
 802a244:	460c      	mov	r4, r1
 802a246:	4606      	mov	r6, r0
 802a248:	f7f5 fbae 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a24c:	ab02      	add	r3, sp, #8
 802a24e:	8e45      	ldrh	r5, [r0, #50]	; 0x32
 802a250:	f843 0d08 	str.w	r0, [r3, #-8]!
 802a254:	4618      	mov	r0, r3
 802a256:	f7f5 fbb9 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a25a:	68e3      	ldr	r3, [r4, #12]
 802a25c:	2b00      	cmp	r3, #0
 802a25e:	d037      	beq.n	802a2d0 <_OnTouchDefault+0x90>
 802a260:	7a1b      	ldrb	r3, [r3, #8]
 802a262:	b91b      	cbnz	r3, 802a26c <_OnTouchDefault+0x2c>
 802a264:	05e9      	lsls	r1, r5, #23
 802a266:	d419      	bmi.n	802a29c <_OnTouchDefault+0x5c>
 802a268:	b002      	add	sp, #8
 802a26a:	bd70      	pop	{r4, r5, r6, pc}
 802a26c:	05ec      	lsls	r4, r5, #23
 802a26e:	d4fb      	bmi.n	802a268 <_OnTouchDefault+0x28>
 802a270:	f44f 7180 	mov.w	r1, #256	; 0x100
 802a274:	4630      	mov	r0, r6
 802a276:	f000 fd33 	bl	802ace0 <WIDGET_OrState>
 802a27a:	4630      	mov	r0, r6
 802a27c:	f7f5 fb94 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a280:	ab02      	add	r3, sp, #8
 802a282:	6a84      	ldr	r4, [r0, #40]	; 0x28
 802a284:	f843 0d04 	str.w	r0, [r3, #-4]!
 802a288:	4618      	mov	r0, r3
 802a28a:	f7f5 fb9f 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a28e:	07a0      	lsls	r0, r4, #30
 802a290:	d5ea      	bpl.n	802a268 <_OnTouchDefault+0x28>
 802a292:	4630      	mov	r0, r6
 802a294:	2101      	movs	r1, #1
 802a296:	f7fe fe1f 	bl	8028ed8 <WM_NotifyParent>
 802a29a:	e7e5      	b.n	802a268 <_OnTouchDefault+0x28>
 802a29c:	f44f 7180 	mov.w	r1, #256	; 0x100
 802a2a0:	4630      	mov	r0, r6
 802a2a2:	f000 fd39 	bl	802ad18 <WIDGET_AndState>
 802a2a6:	4630      	mov	r0, r6
 802a2a8:	f7f5 fb7e 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a2ac:	ab02      	add	r3, sp, #8
 802a2ae:	6a84      	ldr	r4, [r0, #40]	; 0x28
 802a2b0:	f843 0d04 	str.w	r0, [r3, #-4]!
 802a2b4:	8e05      	ldrh	r5, [r0, #48]	; 0x30
 802a2b6:	4618      	mov	r0, r3
 802a2b8:	f7f5 fb88 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a2bc:	4628      	mov	r0, r5
 802a2be:	f7f7 f947 	bl	8021550 <GUI_StoreKey>
 802a2c2:	07a2      	lsls	r2, r4, #30
 802a2c4:	d5d0      	bpl.n	802a268 <_OnTouchDefault+0x28>
 802a2c6:	4630      	mov	r0, r6
 802a2c8:	2102      	movs	r1, #2
 802a2ca:	f7fe fe05 	bl	8028ed8 <WM_NotifyParent>
 802a2ce:	e7cb      	b.n	802a268 <_OnTouchDefault+0x28>
 802a2d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 802a2d4:	4630      	mov	r0, r6
 802a2d6:	f000 fd1f 	bl	802ad18 <WIDGET_AndState>
 802a2da:	4630      	mov	r0, r6
 802a2dc:	f7f5 fb64 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a2e0:	ab02      	add	r3, sp, #8
 802a2e2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 802a2e4:	f843 0d04 	str.w	r0, [r3, #-4]!
 802a2e8:	4618      	mov	r0, r3
 802a2ea:	f7f5 fb6f 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a2ee:	07a3      	lsls	r3, r4, #30
 802a2f0:	d5ba      	bpl.n	802a268 <_OnTouchDefault+0x28>
 802a2f2:	4630      	mov	r0, r6
 802a2f4:	2103      	movs	r1, #3
 802a2f6:	f7fe fdef 	bl	8028ed8 <WM_NotifyParent>
 802a2fa:	e7b5      	b.n	802a268 <_OnTouchDefault+0x28>

0802a2fc <BUTTON_Callback>:
 802a2fc:	b570      	push	{r4, r5, r6, lr}
 802a2fe:	6845      	ldr	r5, [r0, #4]
 802a300:	b082      	sub	sp, #8
 802a302:	4604      	mov	r4, r0
 802a304:	4601      	mov	r1, r0
 802a306:	4628      	mov	r0, r5
 802a308:	f000 fd22 	bl	802ad50 <WIDGET_HandleActive>
 802a30c:	b168      	cbz	r0, 802a32a <BUTTON_Callback+0x2e>
 802a30e:	6823      	ldr	r3, [r4, #0]
 802a310:	2b0f      	cmp	r3, #15
 802a312:	d059      	beq.n	802a3c8 <BUTTON_Callback+0xcc>
 802a314:	dd0b      	ble.n	802a32e <BUTTON_Callback+0x32>
 802a316:	2b28      	cmp	r3, #40	; 0x28
 802a318:	d045      	beq.n	802a3a6 <BUTTON_Callback+0xaa>
 802a31a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 802a31e:	d03c      	beq.n	802a39a <BUTTON_Callback+0x9e>
 802a320:	2b11      	cmp	r3, #17
 802a322:	d049      	beq.n	802a3b8 <BUTTON_Callback+0xbc>
 802a324:	4620      	mov	r0, r4
 802a326:	f7fe f9a9 	bl	802867c <WM_DefaultProc>
 802a32a:	b002      	add	sp, #8
 802a32c:	bd70      	pop	{r4, r5, r6, pc}
 802a32e:	2b0b      	cmp	r3, #11
 802a330:	d020      	beq.n	802a374 <BUTTON_Callback+0x78>
 802a332:	2b0e      	cmp	r3, #14
 802a334:	d1f6      	bne.n	802a324 <BUTTON_Callback+0x28>
 802a336:	68e3      	ldr	r3, [r4, #12]
 802a338:	681a      	ldr	r2, [r3, #0]
 802a33a:	6859      	ldr	r1, [r3, #4]
 802a33c:	2a0d      	cmp	r2, #13
 802a33e:	d053      	beq.n	802a3e8 <BUTTON_Callback+0xec>
 802a340:	2a20      	cmp	r2, #32
 802a342:	d131      	bne.n	802a3a8 <BUTTON_Callback+0xac>
 802a344:	2900      	cmp	r1, #0
 802a346:	4628      	mov	r0, r5
 802a348:	f44f 7180 	mov.w	r1, #256	; 0x100
 802a34c:	dd7d      	ble.n	802a44a <BUTTON_Callback+0x14e>
 802a34e:	f000 fcc7 	bl	802ace0 <WIDGET_OrState>
 802a352:	4628      	mov	r0, r5
 802a354:	f7f5 fb28 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a358:	ab02      	add	r3, sp, #8
 802a35a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 802a35c:	f843 0d04 	str.w	r0, [r3, #-4]!
 802a360:	4618      	mov	r0, r3
 802a362:	f7f5 fb33 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a366:	07a2      	lsls	r2, r4, #30
 802a368:	d5df      	bpl.n	802a32a <BUTTON_Callback+0x2e>
 802a36a:	4628      	mov	r0, r5
 802a36c:	2101      	movs	r1, #1
 802a36e:	f7fe fdb3 	bl	8028ed8 <WM_NotifyParent>
 802a372:	e7da      	b.n	802a32a <BUTTON_Callback+0x2e>
 802a374:	4628      	mov	r0, r5
 802a376:	f7f5 fb17 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a37a:	ad02      	add	r5, sp, #8
 802a37c:	4603      	mov	r3, r0
 802a37e:	3068      	adds	r0, #104	; 0x68
 802a380:	9301      	str	r3, [sp, #4]
 802a382:	f7f5 fcd3 	bl	801fd2c <GUI_ALLOC_FreePtr>
 802a386:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 802a38a:	2103      	movs	r1, #3
 802a38c:	306c      	adds	r0, #108	; 0x6c
 802a38e:	f7f5 fcf3 	bl	801fd78 <GUI_ALLOC_FreePtrArray>
 802a392:	4628      	mov	r0, r5
 802a394:	f7f5 fb1a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a398:	e7c4      	b.n	802a324 <BUTTON_Callback+0x28>
 802a39a:	4b32      	ldr	r3, [pc, #200]	; (802a464 <BUTTON_Callback+0x168>)
 802a39c:	4621      	mov	r1, r4
 802a39e:	4628      	mov	r0, r5
 802a3a0:	681b      	ldr	r3, [r3, #0]
 802a3a2:	4798      	blx	r3
 802a3a4:	e7c1      	b.n	802a32a <BUTTON_Callback+0x2e>
 802a3a6:	68e3      	ldr	r3, [r4, #12]
 802a3a8:	2b00      	cmp	r3, #0
 802a3aa:	d1bb      	bne.n	802a324 <BUTTON_Callback+0x28>
 802a3ac:	4628      	mov	r0, r5
 802a3ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 802a3b2:	f000 fcb1 	bl	802ad18 <WIDGET_AndState>
 802a3b6:	e7b5      	b.n	802a324 <BUTTON_Callback+0x28>
 802a3b8:	4b2b      	ldr	r3, [pc, #172]	; (802a468 <BUTTON_Callback+0x16c>)
 802a3ba:	681b      	ldr	r3, [r3, #0]
 802a3bc:	2b00      	cmp	r3, #0
 802a3be:	d0b4      	beq.n	802a32a <BUTTON_Callback+0x2e>
 802a3c0:	4621      	mov	r1, r4
 802a3c2:	4628      	mov	r0, r5
 802a3c4:	4798      	blx	r3
 802a3c6:	e7b0      	b.n	802a32a <BUTTON_Callback+0x2e>
 802a3c8:	4628      	mov	r0, r5
 802a3ca:	f7f5 faed 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a3ce:	ab02      	add	r3, sp, #8
 802a3d0:	f843 0d04 	str.w	r0, [r3, #-4]!
 802a3d4:	6e42      	ldr	r2, [r0, #100]	; 0x64
 802a3d6:	6814      	ldr	r4, [r2, #0]
 802a3d8:	4618      	mov	r0, r3
 802a3da:	f7f5 faf7 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a3de:	2c00      	cmp	r4, #0
 802a3e0:	d0a3      	beq.n	802a32a <BUTTON_Callback+0x2e>
 802a3e2:	4628      	mov	r0, r5
 802a3e4:	47a0      	blx	r4
 802a3e6:	e7a0      	b.n	802a32a <BUTTON_Callback+0x2e>
 802a3e8:	2900      	cmp	r1, #0
 802a3ea:	dddd      	ble.n	802a3a8 <BUTTON_Callback+0xac>
 802a3ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 802a3f0:	4628      	mov	r0, r5
 802a3f2:	f000 fc75 	bl	802ace0 <WIDGET_OrState>
 802a3f6:	4628      	mov	r0, r5
 802a3f8:	f7f5 fad6 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a3fc:	ac02      	add	r4, sp, #8
 802a3fe:	6a86      	ldr	r6, [r0, #40]	; 0x28
 802a400:	f844 0d04 	str.w	r0, [r4, #-4]!
 802a404:	4620      	mov	r0, r4
 802a406:	f7f5 fae1 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a40a:	07b1      	lsls	r1, r6, #30
 802a40c:	d503      	bpl.n	802a416 <BUTTON_Callback+0x11a>
 802a40e:	2101      	movs	r1, #1
 802a410:	4628      	mov	r0, r5
 802a412:	f7fe fd61 	bl	8028ed8 <WM_NotifyParent>
 802a416:	f44f 7180 	mov.w	r1, #256	; 0x100
 802a41a:	4628      	mov	r0, r5
 802a41c:	f000 fc7c 	bl	802ad18 <WIDGET_AndState>
 802a420:	4628      	mov	r0, r5
 802a422:	f7f5 fac1 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a426:	4603      	mov	r3, r0
 802a428:	4620      	mov	r0, r4
 802a42a:	8e1e      	ldrh	r6, [r3, #48]	; 0x30
 802a42c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 802a42e:	9301      	str	r3, [sp, #4]
 802a430:	f7f5 facc 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a434:	4630      	mov	r0, r6
 802a436:	f7f7 f88b 	bl	8021550 <GUI_StoreKey>
 802a43a:	07a3      	lsls	r3, r4, #30
 802a43c:	f57f af75 	bpl.w	802a32a <BUTTON_Callback+0x2e>
 802a440:	4628      	mov	r0, r5
 802a442:	2102      	movs	r1, #2
 802a444:	f7fe fd48 	bl	8028ed8 <WM_NotifyParent>
 802a448:	e76f      	b.n	802a32a <BUTTON_Callback+0x2e>
 802a44a:	f000 fc65 	bl	802ad18 <WIDGET_AndState>
 802a44e:	4628      	mov	r0, r5
 802a450:	f7f5 faaa 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a454:	ab02      	add	r3, sp, #8
 802a456:	6a84      	ldr	r4, [r0, #40]	; 0x28
 802a458:	f843 0d04 	str.w	r0, [r3, #-4]!
 802a45c:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 802a45e:	4618      	mov	r0, r3
 802a460:	e7e6      	b.n	802a430 <BUTTON_Callback+0x134>
 802a462:	bf00      	nop
 802a464:	2000013c 	.word	0x2000013c
 802a468:	2002e438 	.word	0x2002e438

0802a46c <BUTTON_CreateEx>:
 802a46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a470:	b087      	sub	sp, #28
 802a472:	4680      	mov	r8, r0
 802a474:	9e11      	ldr	r6, [sp, #68]	; 0x44
 802a476:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802a478:	4c1c      	ldr	r4, [pc, #112]	; (802a4ec <BUTTON_CreateEx+0x80>)
 802a47a:	4689      	mov	r9, r1
 802a47c:	4692      	mov	sl, r2
 802a47e:	469b      	mov	fp, r3
 802a480:	254c      	movs	r5, #76	; 0x4c
 802a482:	f7f7 f91b 	bl	80216bc <GUI_Lock>
 802a486:	9601      	str	r6, [sp, #4]
 802a488:	9700      	str	r7, [sp, #0]
 802a48a:	465b      	mov	r3, fp
 802a48c:	4652      	mov	r2, sl
 802a48e:	4649      	mov	r1, r9
 802a490:	4640      	mov	r0, r8
 802a492:	9503      	str	r5, [sp, #12]
 802a494:	9402      	str	r4, [sp, #8]
 802a496:	f7fd fa8b 	bl	80279b0 <WM_CreateWindowAsChild>
 802a49a:	4606      	mov	r6, r0
 802a49c:	b300      	cbz	r0, 802a4e0 <BUTTON_CreateEx+0x74>
 802a49e:	f7f5 fa83 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a4a2:	4f13      	ldr	r7, [pc, #76]	; (802a4f0 <BUTTON_CreateEx+0x84>)
 802a4a4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 802a4a6:	9005      	str	r0, [sp, #20]
 802a4a8:	2210      	movs	r2, #16
 802a4aa:	1d3d      	adds	r5, r7, #4
 802a4ac:	f000 fbf8 	bl	802aca0 <WIDGET__Init>
 802a4b0:	f10d 0e18 	add.w	lr, sp, #24
 802a4b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a4b6:	f85e cd04 	ldr.w	ip, [lr, #-4]!
 802a4ba:	f10c 0434 	add.w	r4, ip, #52	; 0x34
 802a4be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a4c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802a4c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 802a4c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 802a4c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 802a4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a4ce:	f8cc 3064 	str.w	r3, [ip, #100]	; 0x64
 802a4d2:	4670      	mov	r0, lr
 802a4d4:	f7f5 fa7a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a4da:	4630      	mov	r0, r6
 802a4dc:	685b      	ldr	r3, [r3, #4]
 802a4de:	4798      	blx	r3
 802a4e0:	f7f7 f8e2 	bl	80216a8 <GUI_Unlock>
 802a4e4:	4630      	mov	r0, r6
 802a4e6:	b007      	add	sp, #28
 802a4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a4ec:	0802a2fd 	.word	0x0802a2fd
 802a4f0:	2000013c 	.word	0x2000013c

0802a4f4 <BUTTON_CreateIndirect>:
 802a4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a4f8:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802a4fc:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 802a500:	6985      	ldr	r5, [r0, #24]
 802a502:	f9b0 800e 	ldrsh.w	r8, [r0, #14]
 802a506:	f9b0 9010 	ldrsh.w	r9, [r0, #16]
 802a50a:	f9b0 a008 	ldrsh.w	sl, [r0, #8]
 802a50e:	b087      	sub	sp, #28
 802a510:	468b      	mov	fp, r1
 802a512:	4416      	add	r6, r2
 802a514:	441f      	add	r7, r3
 802a516:	4604      	mov	r4, r0
 802a518:	354c      	adds	r5, #76	; 0x4c
 802a51a:	f7f7 f8cf 	bl	80216bc <GUI_Lock>
 802a51e:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 802a5ec <BUTTON_CreateIndirect+0xf8>
 802a522:	f8cd b000 	str.w	fp, [sp]
 802a526:	f04f 0e00 	mov.w	lr, #0
 802a52a:	4642      	mov	r2, r8
 802a52c:	4639      	mov	r1, r7
 802a52e:	4630      	mov	r0, r6
 802a530:	9503      	str	r5, [sp, #12]
 802a532:	464b      	mov	r3, r9
 802a534:	f8cd c008 	str.w	ip, [sp, #8]
 802a538:	f8cd e004 	str.w	lr, [sp, #4]
 802a53c:	f7fd fa38 	bl	80279b0 <WM_CreateWindowAsChild>
 802a540:	4680      	mov	r8, r0
 802a542:	b928      	cbnz	r0, 802a550 <BUTTON_CreateIndirect+0x5c>
 802a544:	f7f7 f8b0 	bl	80216a8 <GUI_Unlock>
 802a548:	4640      	mov	r0, r8
 802a54a:	b007      	add	sp, #28
 802a54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a550:	f7f5 fa2a 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a554:	4f24      	ldr	r7, [pc, #144]	; (802a5e8 <BUTTON_CreateIndirect+0xf4>)
 802a556:	9005      	str	r0, [sp, #20]
 802a558:	4651      	mov	r1, sl
 802a55a:	2210      	movs	r2, #16
 802a55c:	1d3e      	adds	r6, r7, #4
 802a55e:	f000 fb9f 	bl	802aca0 <WIDGET__Init>
 802a562:	f10d 0918 	add.w	r9, sp, #24
 802a566:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 802a568:	f859 ed04 	ldr.w	lr, [r9, #-4]!
 802a56c:	f10e 0534 	add.w	r5, lr, #52	; 0x34
 802a570:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802a572:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 802a574:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 802a576:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 802a57a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 802a57e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a580:	f8ce 3064 	str.w	r3, [lr, #100]	; 0x64
 802a584:	4648      	mov	r0, r9
 802a586:	f7f5 fa21 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a58a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802a58c:	4640      	mov	r0, r8
 802a58e:	685b      	ldr	r3, [r3, #4]
 802a590:	4798      	blx	r3
 802a592:	f7f7 f889 	bl	80216a8 <GUI_Unlock>
 802a596:	6865      	ldr	r5, [r4, #4]
 802a598:	f7f7 f890 	bl	80216bc <GUI_Lock>
 802a59c:	4640      	mov	r0, r8
 802a59e:	f7f5 fa03 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a5a2:	6e84      	ldr	r4, [r0, #104]	; 0x68
 802a5a4:	9004      	str	r0, [sp, #16]
 802a5a6:	a804      	add	r0, sp, #16
 802a5a8:	9405      	str	r4, [sp, #20]
 802a5aa:	f7f5 fa0f 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a5ae:	4629      	mov	r1, r5
 802a5b0:	4648      	mov	r0, r9
 802a5b2:	f7f7 ff01 	bl	80223b8 <GUI__SetText>
 802a5b6:	2800      	cmp	r0, #0
 802a5b8:	d0c4      	beq.n	802a544 <BUTTON_CreateIndirect+0x50>
 802a5ba:	9b05      	ldr	r3, [sp, #20]
 802a5bc:	429c      	cmp	r4, r3
 802a5be:	d009      	beq.n	802a5d4 <BUTTON_CreateIndirect+0xe0>
 802a5c0:	4640      	mov	r0, r8
 802a5c2:	f7f5 f9f1 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a5c6:	9a05      	ldr	r2, [sp, #20]
 802a5c8:	6682      	str	r2, [r0, #104]	; 0x68
 802a5ca:	4603      	mov	r3, r0
 802a5cc:	a804      	add	r0, sp, #16
 802a5ce:	9304      	str	r3, [sp, #16]
 802a5d0:	f7f5 f9fc 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a5d4:	4640      	mov	r0, r8
 802a5d6:	f7fd f98f 	bl	80278f8 <WM_InvalidateWindow>
 802a5da:	f7f7 f865 	bl	80216a8 <GUI_Unlock>
 802a5de:	4640      	mov	r0, r8
 802a5e0:	b007      	add	sp, #28
 802a5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a5e6:	bf00      	nop
 802a5e8:	2000013c 	.word	0x2000013c
 802a5ec:	0802a2fd 	.word	0x0802a2fd

0802a5f0 <BUTTON_SetState>:
 802a5f0:	f000 bb5e 	b.w	802acb0 <WIDGET_SetState>

0802a5f4 <_Create>:
 802a5f4:	b530      	push	{r4, r5, lr}
 802a5f6:	b08b      	sub	sp, #44	; 0x2c
 802a5f8:	2100      	movs	r1, #0
 802a5fa:	4604      	mov	r4, r0
 802a5fc:	2224      	movs	r2, #36	; 0x24
 802a5fe:	a801      	add	r0, sp, #4
 802a600:	f004 fa69 	bl	802ead6 <memset>
 802a604:	4620      	mov	r0, r4
 802a606:	f7f5 f9cf 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a60a:	ab0a      	add	r3, sp, #40	; 0x28
 802a60c:	6e42      	ldr	r2, [r0, #100]	; 0x64
 802a60e:	f843 0d28 	str.w	r0, [r3, #-40]!
 802a612:	6895      	ldr	r5, [r2, #8]
 802a614:	4618      	mov	r0, r3
 802a616:	f7f5 f9d9 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a61a:	2200      	movs	r2, #0
 802a61c:	682b      	ldr	r3, [r5, #0]
 802a61e:	9401      	str	r4, [sp, #4]
 802a620:	9202      	str	r2, [sp, #8]
 802a622:	a801      	add	r0, sp, #4
 802a624:	4798      	blx	r3
 802a626:	b00b      	add	sp, #44	; 0x2c
 802a628:	bd30      	pop	{r4, r5, pc}
 802a62a:	bf00      	nop

0802a62c <_Paint>:
 802a62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a630:	b08a      	sub	sp, #40	; 0x28
 802a632:	4606      	mov	r6, r0
 802a634:	f7f5 f9b8 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a638:	4603      	mov	r3, r0
 802a63a:	a80a      	add	r0, sp, #40	; 0x28
 802a63c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 802a63e:	f840 3d28 	str.w	r3, [r0, #-40]!
 802a642:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 802a644:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
 802a648:	f7f5 f9c0 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a64c:	4630      	mov	r0, r6
 802a64e:	f003 fe31 	bl	802e2b4 <WM_GetWindowSizeX>
 802a652:	4607      	mov	r7, r0
 802a654:	4630      	mov	r0, r6
 802a656:	f003 fe4b 	bl	802e2f0 <WM_GetWindowSizeY>
 802a65a:	3f01      	subs	r7, #1
 802a65c:	2300      	movs	r3, #0
 802a65e:	3801      	subs	r0, #1
 802a660:	f015 0510 	ands.w	r5, r5, #16
 802a664:	9008      	str	r0, [sp, #32]
 802a666:	9707      	str	r7, [sp, #28]
 802a668:	9601      	str	r6, [sp, #4]
 802a66a:	9306      	str	r3, [sp, #24]
 802a66c:	9305      	str	r3, [sp, #20]
 802a66e:	d11d      	bne.n	802a6ac <_Paint+0x80>
 802a670:	f418 7f80 	tst.w	r8, #256	; 0x100
 802a674:	d118      	bne.n	802a6a8 <_Paint+0x7c>
 802a676:	f018 0f01 	tst.w	r8, #1
 802a67a:	bf14      	ite	ne
 802a67c:	2301      	movne	r3, #1
 802a67e:	2302      	moveq	r3, #2
 802a680:	9303      	str	r3, [sp, #12]
 802a682:	2305      	movs	r3, #5
 802a684:	9302      	str	r3, [sp, #8]
 802a686:	a801      	add	r0, sp, #4
 802a688:	47a0      	blx	r4
 802a68a:	2306      	movs	r3, #6
 802a68c:	9302      	str	r3, [sp, #8]
 802a68e:	a801      	add	r0, sp, #4
 802a690:	47a0      	blx	r4
 802a692:	2312      	movs	r3, #18
 802a694:	9302      	str	r3, [sp, #8]
 802a696:	a801      	add	r0, sp, #4
 802a698:	47a0      	blx	r4
 802a69a:	230a      	movs	r3, #10
 802a69c:	a801      	add	r0, sp, #4
 802a69e:	9302      	str	r3, [sp, #8]
 802a6a0:	47a0      	blx	r4
 802a6a2:	b00a      	add	sp, #40	; 0x28
 802a6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a6a8:	9503      	str	r5, [sp, #12]
 802a6aa:	e7ea      	b.n	802a682 <_Paint+0x56>
 802a6ac:	2303      	movs	r3, #3
 802a6ae:	9303      	str	r3, [sp, #12]
 802a6b0:	e7e7      	b.n	802a682 <_Paint+0x56>
 802a6b2:	bf00      	nop

0802a6b4 <BUTTON_DrawSkinFlex>:
 802a6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 802a6b6:	4a95      	ldr	r2, [pc, #596]	; (802a90c <BUTTON_DrawSkinFlex+0x258>)
 802a6b8:	6881      	ldr	r1, [r0, #8]
 802a6ba:	6843      	ldr	r3, [r0, #4]
 802a6bc:	f852 6021 	ldr.w	r6, [r2, r1, lsl #2]
 802a6c0:	b089      	sub	sp, #36	; 0x24
 802a6c2:	4604      	mov	r4, r0
 802a6c4:	2b12      	cmp	r3, #18
 802a6c6:	d83f      	bhi.n	802a748 <BUTTON_DrawSkinFlex+0x94>
 802a6c8:	e8df f003 	tbb	[pc, r3]
 802a6cc:	3e3e3eae 	.word	0x3e3e3eae
 802a6d0:	3e960a3e 	.word	0x3e960a3e
 802a6d4:	3e3e3e3e 	.word	0x3e3e3e3e
 802a6d8:	3e3e3e3e 	.word	0x3e3e3e3e
 802a6dc:	3e3e      	.short	0x3e3e
 802a6de:	41          	.byte	0x41
 802a6df:	00          	.byte	0x00
 802a6e0:	69f5      	ldr	r5, [r6, #28]
 802a6e2:	2d00      	cmp	r5, #0
 802a6e4:	f040 80b2 	bne.w	802a84c <BUTTON_DrawSkinFlex+0x198>
 802a6e8:	1f37      	subs	r7, r6, #4
 802a6ea:	f857 0f04 	ldr.w	r0, [r7, #4]!
 802a6ee:	f7f5 fe31 	bl	8020354 <GUI_SetColor>
 802a6f2:	f104 0010 	add.w	r0, r4, #16
 802a6f6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 802a6f8:	1b5b      	subs	r3, r3, r5
 802a6fa:	1b52      	subs	r2, r2, r5
 802a6fc:	4429      	add	r1, r5
 802a6fe:	4428      	add	r0, r5
 802a700:	3501      	adds	r5, #1
 802a702:	f000 fe19 	bl	802b338 <GUI_DrawRect>
 802a706:	2d02      	cmp	r5, #2
 802a708:	d1ef      	bne.n	802a6ea <BUTTON_DrawSkinFlex+0x36>
 802a70a:	6932      	ldr	r2, [r6, #16]
 802a70c:	6961      	ldr	r1, [r4, #20]
 802a70e:	69e3      	ldr	r3, [r4, #28]
 802a710:	9201      	str	r2, [sp, #4]
 802a712:	69a2      	ldr	r2, [r4, #24]
 802a714:	6920      	ldr	r0, [r4, #16]
 802a716:	68f7      	ldr	r7, [r6, #12]
 802a718:	9700      	str	r7, [sp, #0]
 802a71a:	440b      	add	r3, r1
 802a71c:	105b      	asrs	r3, r3, #1
 802a71e:	3102      	adds	r1, #2
 802a720:	1b52      	subs	r2, r2, r5
 802a722:	4428      	add	r0, r5
 802a724:	f7f6 fccc 	bl	80210c0 <GUI_DrawGradientV>
 802a728:	69e3      	ldr	r3, [r4, #28]
 802a72a:	6961      	ldr	r1, [r4, #20]
 802a72c:	69b2      	ldr	r2, [r6, #24]
 802a72e:	9201      	str	r2, [sp, #4]
 802a730:	69a2      	ldr	r2, [r4, #24]
 802a732:	6920      	ldr	r0, [r4, #16]
 802a734:	6974      	ldr	r4, [r6, #20]
 802a736:	9400      	str	r4, [sp, #0]
 802a738:	4419      	add	r1, r3
 802a73a:	1049      	asrs	r1, r1, #1
 802a73c:	3101      	adds	r1, #1
 802a73e:	3b02      	subs	r3, #2
 802a740:	1b52      	subs	r2, r2, r5
 802a742:	4428      	add	r0, r5
 802a744:	f7f6 fcbc 	bl	80210c0 <GUI_DrawGradientV>
 802a748:	2000      	movs	r0, #0
 802a74a:	b009      	add	sp, #36	; 0x24
 802a74c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a74e:	6800      	ldr	r0, [r0, #0]
 802a750:	f7f5 f92a 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a754:	6e85      	ldr	r5, [r0, #104]	; 0x68
 802a756:	9004      	str	r0, [sp, #16]
 802a758:	2d00      	cmp	r5, #0
 802a75a:	f000 80cf 	beq.w	802a8fc <BUTTON_DrawSkinFlex+0x248>
 802a75e:	68a3      	ldr	r3, [r4, #8]
 802a760:	f9b0 705c 	ldrsh.w	r7, [r0, #92]	; 0x5c
 802a764:	2b00      	cmp	r3, #0
 802a766:	f000 80c7 	beq.w	802a8f8 <BUTTON_DrawSkinFlex+0x244>
 802a76a:	2b03      	cmp	r3, #3
 802a76c:	bf14      	ite	ne
 802a76e:	2300      	movne	r3, #0
 802a770:	2302      	moveq	r3, #2
 802a772:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 802a776:	6d40      	ldr	r0, [r0, #84]	; 0x54
 802a778:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 802a77a:	f7f5 fe4d 	bl	8020418 <GUI_SetFont>
 802a77e:	4620      	mov	r0, r4
 802a780:	f7f5 fde8 	bl	8020354 <GUI_SetColor>
 802a784:	ac08      	add	r4, sp, #32
 802a786:	a806      	add	r0, sp, #24
 802a788:	f7f5 fc6e 	bl	8020068 <GUI_GetClientRect>
 802a78c:	f8b6 e01c 	ldrh.w	lr, [r6, #28]
 802a790:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 802a794:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802a798:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 802a79c:	f854 6d10 	ldr.w	r6, [r4, #-16]!
 802a7a0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802a7a4:	4471      	add	r1, lr
 802a7a6:	ebce 0202 	rsb	r2, lr, r2
 802a7aa:	3002      	adds	r0, #2
 802a7ac:	3b02      	subs	r3, #2
 802a7ae:	f8ad 1018 	strh.w	r1, [sp, #24]
 802a7b2:	f8ad 201c 	strh.w	r2, [sp, #28]
 802a7b6:	f9b6 105e 	ldrsh.w	r1, [r6, #94]	; 0x5e
 802a7ba:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	; 0x60
 802a7be:	f8ad 001a 	strh.w	r0, [sp, #26]
 802a7c2:	a806      	add	r0, sp, #24
 802a7c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 802a7c8:	f7f5 fcc6 	bl	8020158 <GUI_MoveRect>
 802a7cc:	4620      	mov	r0, r4
 802a7ce:	f7f5 f8fd 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a7d2:	2002      	movs	r0, #2
 802a7d4:	f7f5 fe50 	bl	8020478 <GUI_SetTextMode>
 802a7d8:	4628      	mov	r0, r5
 802a7da:	f7f5 f8e5 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a7de:	ac08      	add	r4, sp, #32
 802a7e0:	a906      	add	r1, sp, #24
 802a7e2:	f844 0d0c 	str.w	r0, [r4, #-12]!
 802a7e6:	463a      	mov	r2, r7
 802a7e8:	f7f6 fbbc 	bl	8020f64 <GUI_DispStringInRect>
 802a7ec:	4620      	mov	r0, r4
 802a7ee:	f7f5 f8ed 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a7f2:	2000      	movs	r0, #0
 802a7f4:	b009      	add	sp, #36	; 0x24
 802a7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a7f8:	6800      	ldr	r0, [r0, #0]
 802a7fa:	f7f5 f8d5 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a7fe:	9004      	str	r0, [sp, #16]
 802a800:	6820      	ldr	r0, [r4, #0]
 802a802:	f7ff fc01 	bl	802a008 <WM__IsEnabled>
 802a806:	b9a8      	cbnz	r0, 802a834 <BUTTON_DrawSkinFlex+0x180>
 802a808:	9b04      	ldr	r3, [sp, #16]
 802a80a:	6f5d      	ldr	r5, [r3, #116]	; 0x74
 802a80c:	b905      	cbnz	r5, 802a810 <BUTTON_DrawSkinFlex+0x15c>
 802a80e:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 802a810:	a804      	add	r0, sp, #16
 802a812:	f7f5 f8db 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a816:	2300      	movs	r3, #0
 802a818:	4628      	mov	r0, r5
 802a81a:	6821      	ldr	r1, [r4, #0]
 802a81c:	461a      	mov	r2, r3
 802a81e:	f000 f8db 	bl	802a9d8 <GUI_DRAW__Draw>
 802a822:	2000      	movs	r0, #0
 802a824:	b009      	add	sp, #36	; 0x24
 802a826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a828:	6800      	ldr	r0, [r0, #0]
 802a82a:	f004 f8ad 	bl	802e988 <WM_SetHasTrans>
 802a82e:	2000      	movs	r0, #0
 802a830:	b009      	add	sp, #36	; 0x24
 802a832:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802a834:	68a3      	ldr	r3, [r4, #8]
 802a836:	2b00      	cmp	r3, #0
 802a838:	d164      	bne.n	802a904 <BUTTON_DrawSkinFlex+0x250>
 802a83a:	9a04      	ldr	r2, [sp, #16]
 802a83c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 802a83e:	2b00      	cmp	r3, #0
 802a840:	bf14      	ite	ne
 802a842:	236c      	movne	r3, #108	; 0x6c
 802a844:	2368      	moveq	r3, #104	; 0x68
 802a846:	4413      	add	r3, r2
 802a848:	685d      	ldr	r5, [r3, #4]
 802a84a:	e7e1      	b.n	802a810 <BUTTON_DrawSkinFlex+0x15c>
 802a84c:	68b3      	ldr	r3, [r6, #8]
 802a84e:	9303      	str	r3, [sp, #12]
 802a850:	6873      	ldr	r3, [r6, #4]
 802a852:	9302      	str	r3, [sp, #8]
 802a854:	4637      	mov	r7, r6
 802a856:	f100 0114 	add.w	r1, r0, #20
 802a85a:	f857 0904 	ldr.w	r0, [r7], #-4
 802a85e:	c90e      	ldmia	r1, {r1, r2, r3}
 802a860:	9001      	str	r0, [sp, #4]
 802a862:	6920      	ldr	r0, [r4, #16]
 802a864:	9500      	str	r5, [sp, #0]
 802a866:	f002 f8cf 	bl	802ca08 <GUI__DrawTwinArc4>
 802a86a:	2500      	movs	r5, #0
 802a86c:	f857 0f04 	ldr.w	r0, [r7, #4]!
 802a870:	f7f5 fd70 	bl	8020354 <GUI_SetColor>
 802a874:	69f3      	ldr	r3, [r6, #28]
 802a876:	69a2      	ldr	r2, [r4, #24]
 802a878:	6921      	ldr	r1, [r4, #16]
 802a87a:	6960      	ldr	r0, [r4, #20]
 802a87c:	1ad2      	subs	r2, r2, r3
 802a87e:	4419      	add	r1, r3
 802a880:	4428      	add	r0, r5
 802a882:	f7f6 fcf1 	bl	8021268 <GUI_DrawHLine>
 802a886:	69f3      	ldr	r3, [r6, #28]
 802a888:	69a2      	ldr	r2, [r4, #24]
 802a88a:	6921      	ldr	r1, [r4, #16]
 802a88c:	69e0      	ldr	r0, [r4, #28]
 802a88e:	1ad2      	subs	r2, r2, r3
 802a890:	4419      	add	r1, r3
 802a892:	1b40      	subs	r0, r0, r5
 802a894:	f7f6 fce8 	bl	8021268 <GUI_DrawHLine>
 802a898:	69f3      	ldr	r3, [r6, #28]
 802a89a:	69e2      	ldr	r2, [r4, #28]
 802a89c:	6961      	ldr	r1, [r4, #20]
 802a89e:	6920      	ldr	r0, [r4, #16]
 802a8a0:	1ad2      	subs	r2, r2, r3
 802a8a2:	4419      	add	r1, r3
 802a8a4:	4428      	add	r0, r5
 802a8a6:	f7f6 fd3b 	bl	8021320 <GUI_DrawVLine>
 802a8aa:	69f3      	ldr	r3, [r6, #28]
 802a8ac:	69e2      	ldr	r2, [r4, #28]
 802a8ae:	6961      	ldr	r1, [r4, #20]
 802a8b0:	69a0      	ldr	r0, [r4, #24]
 802a8b2:	1ad2      	subs	r2, r2, r3
 802a8b4:	1b40      	subs	r0, r0, r5
 802a8b6:	4419      	add	r1, r3
 802a8b8:	3501      	adds	r5, #1
 802a8ba:	f7f6 fd31 	bl	8021320 <GUI_DrawVLine>
 802a8be:	2d02      	cmp	r5, #2
 802a8c0:	d1d4      	bne.n	802a86c <BUTTON_DrawSkinFlex+0x1b8>
 802a8c2:	68b0      	ldr	r0, [r6, #8]
 802a8c4:	f7f5 fd46 	bl	8020354 <GUI_SetColor>
 802a8c8:	69f1      	ldr	r1, [r6, #28]
 802a8ca:	6920      	ldr	r0, [r4, #16]
 802a8cc:	6965      	ldr	r5, [r4, #20]
 802a8ce:	69e3      	ldr	r3, [r4, #28]
 802a8d0:	1842      	adds	r2, r0, r1
 802a8d2:	1a5b      	subs	r3, r3, r1
 802a8d4:	3a01      	subs	r2, #1
 802a8d6:	4429      	add	r1, r5
 802a8d8:	3002      	adds	r0, #2
 802a8da:	f7f6 fd4b 	bl	8021374 <GUI_FillRect>
 802a8de:	69f1      	ldr	r1, [r6, #28]
 802a8e0:	69a2      	ldr	r2, [r4, #24]
 802a8e2:	6965      	ldr	r5, [r4, #20]
 802a8e4:	69e3      	ldr	r3, [r4, #28]
 802a8e6:	1a50      	subs	r0, r2, r1
 802a8e8:	1a5b      	subs	r3, r3, r1
 802a8ea:	3001      	adds	r0, #1
 802a8ec:	4429      	add	r1, r5
 802a8ee:	3a02      	subs	r2, #2
 802a8f0:	f7f6 fd40 	bl	8021374 <GUI_FillRect>
 802a8f4:	69f5      	ldr	r5, [r6, #28]
 802a8f6:	e708      	b.n	802a70a <BUTTON_DrawSkinFlex+0x56>
 802a8f8:	2301      	movs	r3, #1
 802a8fa:	e73a      	b.n	802a772 <BUTTON_DrawSkinFlex+0xbe>
 802a8fc:	a804      	add	r0, sp, #16
 802a8fe:	f7f5 f865 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802a902:	e721      	b.n	802a748 <BUTTON_DrawSkinFlex+0x94>
 802a904:	9b04      	ldr	r3, [sp, #16]
 802a906:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 802a908:	e782      	b.n	802a810 <BUTTON_DrawSkinFlex+0x15c>
 802a90a:	bf00      	nop
 802a90c:	080414d8 	.word	0x080414d8

0802a910 <GUI_CreateDialogBox>:
 802a910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a914:	4604      	mov	r4, r0
 802a916:	b082      	sub	sp, #8
 802a918:	460d      	mov	r5, r1
 802a91a:	4616      	mov	r6, r2
 802a91c:	2b00      	cmp	r3, #0
 802a91e:	d038      	beq.n	802a992 <GUI_CreateDialogBox+0x82>
 802a920:	469a      	mov	sl, r3
 802a922:	9600      	str	r6, [sp, #0]
 802a924:	6826      	ldr	r6, [r4, #0]
 802a926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802a92a:	4651      	mov	r1, sl
 802a92c:	4620      	mov	r0, r4
 802a92e:	47b0      	blx	r6
 802a930:	4607      	mov	r7, r0
 802a932:	b918      	cbnz	r0, 802a93c <GUI_CreateDialogBox+0x2c>
 802a934:	4638      	mov	r0, r7
 802a936:	b002      	add	sp, #8
 802a938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a93c:	f7fe f96e 	bl	8028c1c <WM_GetClientWindow>
 802a940:	8a61      	ldrh	r1, [r4, #18]
 802a942:	4680      	mov	r8, r0
 802a944:	4638      	mov	r0, r7
 802a946:	f000 f9cb 	bl	802ace0 <WIDGET_OrState>
 802a94a:	4638      	mov	r0, r7
 802a94c:	f7fe fd1e 	bl	802938c <WM_ShowWindow>
 802a950:	3d01      	subs	r5, #1
 802a952:	4640      	mov	r0, r8
 802a954:	f7fe fd1a 	bl	802938c <WM_ShowWindow>
 802a958:	2d00      	cmp	r5, #0
 802a95a:	bfc8      	it	gt
 802a95c:	f04f 0900 	movgt.w	r9, #0
 802a960:	dc04      	bgt.n	802a96c <GUI_CreateDialogBox+0x5c>
 802a962:	e01a      	b.n	802a99a <GUI_CreateDialogBox+0x8a>
 802a964:	f7fe fd12 	bl	802938c <WM_ShowWindow>
 802a968:	3d01      	subs	r5, #1
 802a96a:	d016      	beq.n	802a99a <GUI_CreateDialogBox+0x8a>
 802a96c:	f854 6f1c 	ldr.w	r6, [r4, #28]!
 802a970:	f8cd 9000 	str.w	r9, [sp]
 802a974:	2300      	movs	r3, #0
 802a976:	4620      	mov	r0, r4
 802a978:	461a      	mov	r2, r3
 802a97a:	4641      	mov	r1, r8
 802a97c:	47b0      	blx	r6
 802a97e:	4606      	mov	r6, r0
 802a980:	2800      	cmp	r0, #0
 802a982:	d1ef      	bne.n	802a964 <GUI_CreateDialogBox+0x54>
 802a984:	4638      	mov	r0, r7
 802a986:	f7fd f9eb 	bl	8027d60 <WM_DeleteWindow>
 802a98a:	4630      	mov	r0, r6
 802a98c:	b002      	add	sp, #8
 802a98e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a992:	f7fe f951 	bl	8028c38 <WM_GetDesktopWindow>
 802a996:	4682      	mov	sl, r0
 802a998:	e7c3      	b.n	802a922 <GUI_CreateDialogBox+0x12>
 802a99a:	4640      	mov	r0, r8
 802a99c:	211d      	movs	r1, #29
 802a99e:	f7fe fb09 	bl	8028fb4 <WM_SendMessageNoPara>
 802a9a2:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 802a9a6:	d0c5      	beq.n	802a934 <GUI_CreateDialogBox+0x24>
 802a9a8:	f7f6 fe88 	bl	80216bc <GUI_Lock>
 802a9ac:	f7fe fa1e 	bl	8028dec <WM_GetFocusedWindow>
 802a9b0:	b960      	cbnz	r0, 802a9cc <GUI_CreateDialogBox+0xbc>
 802a9b2:	45ba      	cmp	sl, r7
 802a9b4:	d002      	beq.n	802a9bc <GUI_CreateDialogBox+0xac>
 802a9b6:	4638      	mov	r0, r7
 802a9b8:	f003 ff66 	bl	802e888 <WM_SetFocusOnNextChild>
 802a9bc:	f7f6 fe74 	bl	80216a8 <GUI_Unlock>
 802a9c0:	4638      	mov	r0, r7
 802a9c2:	b002      	add	sp, #8
 802a9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a9c8:	2800      	cmp	r0, #0
 802a9ca:	d0f4      	beq.n	802a9b6 <GUI_CreateDialogBox+0xa6>
 802a9cc:	f7f4 ffe2 	bl	801f994 <GUI_ALLOC_h2p>
 802a9d0:	6980      	ldr	r0, [r0, #24]
 802a9d2:	4287      	cmp	r7, r0
 802a9d4:	d1f8      	bne.n	802a9c8 <GUI_CreateDialogBox+0xb8>
 802a9d6:	e7f1      	b.n	802a9bc <GUI_CreateDialogBox+0xac>

0802a9d8 <GUI_DRAW__Draw>:
 802a9d8:	b900      	cbnz	r0, 802a9dc <GUI_DRAW__Draw+0x4>
 802a9da:	4770      	bx	lr
 802a9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a9e0:	b082      	sub	sp, #8
 802a9e2:	461e      	mov	r6, r3
 802a9e4:	4615      	mov	r5, r2
 802a9e6:	460c      	mov	r4, r1
 802a9e8:	4607      	mov	r7, r0
 802a9ea:	f7f4 ffdd 	bl	801f9a8 <GUI_ALLOC_LockH>
 802a9ee:	ab02      	add	r3, sp, #8
 802a9f0:	6802      	ldr	r2, [r0, #0]
 802a9f2:	f843 0d04 	str.w	r0, [r3, #-4]!
 802a9f6:	4618      	mov	r0, r3
 802a9f8:	f8d2 8000 	ldr.w	r8, [r2]
 802a9fc:	f7f4 ffe6 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802aa00:	4633      	mov	r3, r6
 802aa02:	462a      	mov	r2, r5
 802aa04:	4621      	mov	r1, r4
 802aa06:	4638      	mov	r0, r7
 802aa08:	47c0      	blx	r8
 802aa0a:	b002      	add	sp, #8
 802aa0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802aa10 <TEXT_Callback>:
 802aa10:	b530      	push	{r4, r5, lr}
 802aa12:	6845      	ldr	r5, [r0, #4]
 802aa14:	b085      	sub	sp, #20
 802aa16:	4604      	mov	r4, r0
 802aa18:	4601      	mov	r1, r0
 802aa1a:	4628      	mov	r0, r5
 802aa1c:	f000 f998 	bl	802ad50 <WIDGET_HandleActive>
 802aa20:	b1b8      	cbz	r0, 802aa52 <TEXT_Callback+0x42>
 802aa22:	6823      	ldr	r3, [r4, #0]
 802aa24:	2b0f      	cmp	r3, #15
 802aa26:	d016      	beq.n	802aa56 <TEXT_Callback+0x46>
 802aa28:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 802aa2c:	d040      	beq.n	802aab0 <TEXT_Callback+0xa0>
 802aa2e:	2b0b      	cmp	r3, #11
 802aa30:	d10c      	bne.n	802aa4c <TEXT_Callback+0x3c>
 802aa32:	4628      	mov	r0, r5
 802aa34:	f7f4 ffb8 	bl	801f9a8 <GUI_ALLOC_LockH>
 802aa38:	ad04      	add	r5, sp, #16
 802aa3a:	4603      	mov	r3, r0
 802aa3c:	f845 3d08 	str.w	r3, [r5, #-8]!
 802aa40:	3044      	adds	r0, #68	; 0x44
 802aa42:	f7f5 f973 	bl	801fd2c <GUI_ALLOC_FreePtr>
 802aa46:	4628      	mov	r0, r5
 802aa48:	f7f4 ffc0 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802aa4c:	4620      	mov	r0, r4
 802aa4e:	f7fd fe15 	bl	802867c <WM_DefaultProc>
 802aa52:	b005      	add	sp, #20
 802aa54:	bd30      	pop	{r4, r5, pc}
 802aa56:	4628      	mov	r0, r5
 802aa58:	f7f4 ffa6 	bl	801f9a8 <GUI_ALLOC_LockH>
 802aa5c:	9000      	str	r0, [sp, #0]
 802aa5e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 802aa60:	f7f8 fb44 	bl	80230ec <LCD_SetColor>
 802aa64:	9b00      	ldr	r3, [sp, #0]
 802aa66:	6b58      	ldr	r0, [r3, #52]	; 0x34
 802aa68:	f7f5 fcd6 	bl	8020418 <GUI_SetFont>
 802aa6c:	4628      	mov	r0, r5
 802aa6e:	f003 ffb5 	bl	802e9dc <WM_GetHasTrans>
 802aa72:	b340      	cbz	r0, 802aac6 <TEXT_Callback+0xb6>
 802aa74:	9b00      	ldr	r3, [sp, #0]
 802aa76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802aa78:	b1ab      	cbz	r3, 802aaa6 <TEXT_Callback+0x96>
 802aa7a:	2002      	movs	r0, #2
 802aa7c:	f7f5 fcfc 	bl	8020478 <GUI_SetTextMode>
 802aa80:	a802      	add	r0, sp, #8
 802aa82:	f7fe f8b1 	bl	8028be8 <WM_GetClientRect>
 802aa86:	9b00      	ldr	r3, [sp, #0]
 802aa88:	6c58      	ldr	r0, [r3, #68]	; 0x44
 802aa8a:	f7f4 ff8d 	bl	801f9a8 <GUI_ALLOC_LockH>
 802aa8e:	9a00      	ldr	r2, [sp, #0]
 802aa90:	9001      	str	r0, [sp, #4]
 802aa92:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 802aa96:	f9b2 2048 	ldrsh.w	r2, [r2, #72]	; 0x48
 802aa9a:	a902      	add	r1, sp, #8
 802aa9c:	f7f6 fa8a 	bl	8020fb4 <GUI_DispStringInRectWrap>
 802aaa0:	a801      	add	r0, sp, #4
 802aaa2:	f7f4 ff93 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802aaa6:	4668      	mov	r0, sp
 802aaa8:	f7f4 ff90 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802aaac:	b005      	add	sp, #20
 802aaae:	bd30      	pop	{r4, r5, pc}
 802aab0:	68e3      	ldr	r3, [r4, #12]
 802aab2:	b17b      	cbz	r3, 802aad4 <TEXT_Callback+0xc4>
 802aab4:	7a1b      	ldrb	r3, [r3, #8]
 802aab6:	2b00      	cmp	r3, #0
 802aab8:	bf14      	ite	ne
 802aaba:	2101      	movne	r1, #1
 802aabc:	2102      	moveq	r1, #2
 802aabe:	4628      	mov	r0, r5
 802aac0:	f7fe fa0a 	bl	8028ed8 <WM_NotifyParent>
 802aac4:	e7c2      	b.n	802aa4c <TEXT_Callback+0x3c>
 802aac6:	9b00      	ldr	r3, [sp, #0]
 802aac8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 802aaca:	f7f8 fb09 	bl	80230e0 <LCD_SetBkColor>
 802aace:	f7f5 fd45 	bl	802055c <GUI_Clear>
 802aad2:	e7cf      	b.n	802aa74 <TEXT_Callback+0x64>
 802aad4:	2103      	movs	r1, #3
 802aad6:	e7f2      	b.n	802aabe <TEXT_Callback+0xae>

0802aad8 <TEXT_CreateIndirect>:
 802aad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802aadc:	468b      	mov	fp, r1
 802aade:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 802aae2:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802aae6:	6985      	ldr	r5, [r0, #24]
 802aae8:	f9b0 700e 	ldrsh.w	r7, [r0, #14]
 802aaec:	f9b0 8010 	ldrsh.w	r8, [r0, #16]
 802aaf0:	f8b0 9012 	ldrh.w	r9, [r0, #18]
 802aaf4:	f9b0 a008 	ldrsh.w	sl, [r0, #8]
 802aaf8:	6844      	ldr	r4, [r0, #4]
 802aafa:	b089      	sub	sp, #36	; 0x24
 802aafc:	4419      	add	r1, r3
 802aafe:	4416      	add	r6, r2
 802ab00:	9105      	str	r1, [sp, #20]
 802ab02:	3520      	adds	r5, #32
 802ab04:	f7f6 fdda 	bl	80216bc <GUI_Lock>
 802ab08:	f8df e090 	ldr.w	lr, [pc, #144]	; 802ab9c <TEXT_CreateIndirect+0xc4>
 802ab0c:	9503      	str	r5, [sp, #12]
 802ab0e:	f04f 0c03 	mov.w	ip, #3
 802ab12:	f8cd b000 	str.w	fp, [sp]
 802ab16:	9905      	ldr	r1, [sp, #20]
 802ab18:	f8cd e008 	str.w	lr, [sp, #8]
 802ab1c:	4630      	mov	r0, r6
 802ab1e:	4643      	mov	r3, r8
 802ab20:	463a      	mov	r2, r7
 802ab22:	f8cd c004 	str.w	ip, [sp, #4]
 802ab26:	f7fc ff43 	bl	80279b0 <WM_CreateWindowAsChild>
 802ab2a:	4605      	mov	r5, r0
 802ab2c:	b300      	cbz	r0, 802ab70 <TEXT_CreateIndirect+0x98>
 802ab2e:	b32c      	cbz	r4, 802ab7c <TEXT_CreateIndirect+0xa4>
 802ab30:	4620      	mov	r0, r4
 802ab32:	f7e5 fb65 	bl	8010200 <strlen>
 802ab36:	3001      	adds	r0, #1
 802ab38:	f7f5 f950 	bl	801fddc <GUI_ALLOC_AllocZero>
 802ab3c:	4607      	mov	r7, r0
 802ab3e:	b9f8      	cbnz	r0, 802ab80 <TEXT_CreateIndirect+0xa8>
 802ab40:	ae07      	add	r6, sp, #28
 802ab42:	4628      	mov	r0, r5
 802ab44:	f7f4 ff30 	bl	801f9a8 <GUI_ALLOC_LockH>
 802ab48:	4651      	mov	r1, sl
 802ab4a:	2200      	movs	r2, #0
 802ab4c:	9007      	str	r0, [sp, #28]
 802ab4e:	f000 f8a7 	bl	802aca0 <WIDGET__Init>
 802ab52:	4b11      	ldr	r3, [pc, #68]	; (802ab98 <TEXT_CreateIndirect+0xc0>)
 802ab54:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802ab58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 802ab5a:	f10e 0434 	add.w	r4, lr, #52	; 0x34
 802ab5e:	f8ce 7044 	str.w	r7, [lr, #68]	; 0x44
 802ab62:	f8ae 9048 	strh.w	r9, [lr, #72]	; 0x48
 802ab66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 802ab6a:	4630      	mov	r0, r6
 802ab6c:	f7f4 ff2e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802ab70:	f7f6 fd9a 	bl	80216a8 <GUI_Unlock>
 802ab74:	4628      	mov	r0, r5
 802ab76:	b009      	add	sp, #36	; 0x24
 802ab78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ab7c:	4627      	mov	r7, r4
 802ab7e:	e7df      	b.n	802ab40 <TEXT_CreateIndirect+0x68>
 802ab80:	f7f4 ff12 	bl	801f9a8 <GUI_ALLOC_LockH>
 802ab84:	ae08      	add	r6, sp, #32
 802ab86:	4621      	mov	r1, r4
 802ab88:	f846 0d04 	str.w	r0, [r6, #-4]!
 802ab8c:	f003 ffab 	bl	802eae6 <strcpy>
 802ab90:	4630      	mov	r0, r6
 802ab92:	f7f4 ff1b 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802ab96:	e7d4      	b.n	802ab42 <TEXT_CreateIndirect+0x6a>
 802ab98:	20000200 	.word	0x20000200
 802ab9c:	0802aa11 	.word	0x0802aa11

0802aba0 <TEXT_SetFont>:
 802aba0:	b900      	cbnz	r0, 802aba4 <TEXT_SetFont+0x4>
 802aba2:	4770      	bx	lr
 802aba4:	b530      	push	{r4, r5, lr}
 802aba6:	4604      	mov	r4, r0
 802aba8:	b083      	sub	sp, #12
 802abaa:	460d      	mov	r5, r1
 802abac:	f7f6 fd86 	bl	80216bc <GUI_Lock>
 802abb0:	4620      	mov	r0, r4
 802abb2:	f7f4 fef9 	bl	801f9a8 <GUI_ALLOC_LockH>
 802abb6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 802abb8:	9001      	str	r0, [sp, #4]
 802abba:	42ab      	cmp	r3, r5
 802abbc:	d003      	beq.n	802abc6 <TEXT_SetFont+0x26>
 802abbe:	6345      	str	r5, [r0, #52]	; 0x34
 802abc0:	4620      	mov	r0, r4
 802abc2:	f7fc fe99 	bl	80278f8 <WM_InvalidateWindow>
 802abc6:	a801      	add	r0, sp, #4
 802abc8:	f7f4 ff00 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802abcc:	f7f6 fd6c 	bl	80216a8 <GUI_Unlock>
 802abd0:	b003      	add	sp, #12
 802abd2:	bd30      	pop	{r4, r5, pc}

0802abd4 <TEXT_SetText>:
 802abd4:	b530      	push	{r4, r5, lr}
 802abd6:	b083      	sub	sp, #12
 802abd8:	b918      	cbnz	r0, 802abe2 <TEXT_SetText+0xe>
 802abda:	2501      	movs	r5, #1
 802abdc:	4628      	mov	r0, r5
 802abde:	b003      	add	sp, #12
 802abe0:	bd30      	pop	{r4, r5, pc}
 802abe2:	4604      	mov	r4, r0
 802abe4:	460d      	mov	r5, r1
 802abe6:	f7f6 fd69 	bl	80216bc <GUI_Lock>
 802abea:	4620      	mov	r0, r4
 802abec:	f7f4 fedc 	bl	801f9a8 <GUI_ALLOC_LockH>
 802abf0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 802abf2:	9000      	str	r0, [sp, #0]
 802abf4:	4668      	mov	r0, sp
 802abf6:	9301      	str	r3, [sp, #4]
 802abf8:	f7f4 fee8 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802abfc:	4629      	mov	r1, r5
 802abfe:	a801      	add	r0, sp, #4
 802ac00:	f7f7 fbda 	bl	80223b8 <GUI__SetText>
 802ac04:	2800      	cmp	r0, #0
 802ac06:	bf0c      	ite	eq
 802ac08:	2501      	moveq	r5, #1
 802ac0a:	2500      	movne	r5, #0
 802ac0c:	d104      	bne.n	802ac18 <TEXT_SetText+0x44>
 802ac0e:	f7f6 fd4b 	bl	80216a8 <GUI_Unlock>
 802ac12:	4628      	mov	r0, r5
 802ac14:	b003      	add	sp, #12
 802ac16:	bd30      	pop	{r4, r5, pc}
 802ac18:	4620      	mov	r0, r4
 802ac1a:	f7f4 fec5 	bl	801f9a8 <GUI_ALLOC_LockH>
 802ac1e:	9b01      	ldr	r3, [sp, #4]
 802ac20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802ac22:	9000      	str	r0, [sp, #0]
 802ac24:	429a      	cmp	r2, r3
 802ac26:	bf18      	it	ne
 802ac28:	6443      	strne	r3, [r0, #68]	; 0x44
 802ac2a:	4668      	mov	r0, sp
 802ac2c:	f7f4 fece 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802ac30:	4620      	mov	r0, r4
 802ac32:	f7fc fe61 	bl	80278f8 <WM_InvalidateWindow>
 802ac36:	e7ea      	b.n	802ac0e <TEXT_SetText+0x3a>

0802ac38 <TEXT_SetTextAlign>:
 802ac38:	b900      	cbnz	r0, 802ac3c <TEXT_SetTextAlign+0x4>
 802ac3a:	4770      	bx	lr
 802ac3c:	b530      	push	{r4, r5, lr}
 802ac3e:	4604      	mov	r4, r0
 802ac40:	b083      	sub	sp, #12
 802ac42:	460d      	mov	r5, r1
 802ac44:	f7f6 fd3a 	bl	80216bc <GUI_Lock>
 802ac48:	4620      	mov	r0, r4
 802ac4a:	f7f4 fead 	bl	801f9a8 <GUI_ALLOC_LockH>
 802ac4e:	ab02      	add	r3, sp, #8
 802ac50:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
 802ac54:	f843 0d04 	str.w	r0, [r3, #-4]!
 802ac58:	4618      	mov	r0, r3
 802ac5a:	f7f4 feb7 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802ac5e:	4620      	mov	r0, r4
 802ac60:	f7fc fe4a 	bl	80278f8 <WM_InvalidateWindow>
 802ac64:	f7f6 fd20 	bl	80216a8 <GUI_Unlock>
 802ac68:	b003      	add	sp, #12
 802ac6a:	bd30      	pop	{r4, r5, pc}

0802ac6c <TEXT_SetTextColor>:
 802ac6c:	b900      	cbnz	r0, 802ac70 <TEXT_SetTextColor+0x4>
 802ac6e:	4770      	bx	lr
 802ac70:	b530      	push	{r4, r5, lr}
 802ac72:	4604      	mov	r4, r0
 802ac74:	b083      	sub	sp, #12
 802ac76:	460d      	mov	r5, r1
 802ac78:	f7f6 fd20 	bl	80216bc <GUI_Lock>
 802ac7c:	4620      	mov	r0, r4
 802ac7e:	f7f4 fe93 	bl	801f9a8 <GUI_ALLOC_LockH>
 802ac82:	6b83      	ldr	r3, [r0, #56]	; 0x38
 802ac84:	9001      	str	r0, [sp, #4]
 802ac86:	42ab      	cmp	r3, r5
 802ac88:	d003      	beq.n	802ac92 <TEXT_SetTextColor+0x26>
 802ac8a:	6385      	str	r5, [r0, #56]	; 0x38
 802ac8c:	4620      	mov	r0, r4
 802ac8e:	f7fc fe33 	bl	80278f8 <WM_InvalidateWindow>
 802ac92:	a801      	add	r0, sp, #4
 802ac94:	f7f4 fe9a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802ac98:	f7f6 fd06 	bl	80216a8 <GUI_Unlock>
 802ac9c:	b003      	add	sp, #12
 802ac9e:	bd30      	pop	{r4, r5, pc}

0802aca0 <WIDGET__Init>:
 802aca0:	4b02      	ldr	r3, [pc, #8]	; (802acac <WIDGET__Init+0xc>)
 802aca2:	8642      	strh	r2, [r0, #50]	; 0x32
 802aca4:	681b      	ldr	r3, [r3, #0]
 802aca6:	8601      	strh	r1, [r0, #48]	; 0x30
 802aca8:	62c3      	str	r3, [r0, #44]	; 0x2c
 802acaa:	4770      	bx	lr
 802acac:	20000210 	.word	0x20000210

0802acb0 <WIDGET_SetState>:
 802acb0:	b530      	push	{r4, r5, lr}
 802acb2:	4604      	mov	r4, r0
 802acb4:	b083      	sub	sp, #12
 802acb6:	460d      	mov	r5, r1
 802acb8:	f7f6 fd00 	bl	80216bc <GUI_Lock>
 802acbc:	4620      	mov	r0, r4
 802acbe:	f7f4 fe73 	bl	801f9a8 <GUI_ALLOC_LockH>
 802acc2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 802acc4:	9001      	str	r0, [sp, #4]
 802acc6:	42ab      	cmp	r3, r5
 802acc8:	d003      	beq.n	802acd2 <WIDGET_SetState+0x22>
 802acca:	8645      	strh	r5, [r0, #50]	; 0x32
 802accc:	4620      	mov	r0, r4
 802acce:	f7fc fe13 	bl	80278f8 <WM_InvalidateWindow>
 802acd2:	a801      	add	r0, sp, #4
 802acd4:	f7f4 fe7a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802acd8:	f7f6 fce6 	bl	80216a8 <GUI_Unlock>
 802acdc:	b003      	add	sp, #12
 802acde:	bd30      	pop	{r4, r5, pc}

0802ace0 <WIDGET_OrState>:
 802ace0:	b900      	cbnz	r0, 802ace4 <WIDGET_OrState+0x4>
 802ace2:	4770      	bx	lr
 802ace4:	b530      	push	{r4, r5, lr}
 802ace6:	4604      	mov	r4, r0
 802ace8:	b083      	sub	sp, #12
 802acea:	460d      	mov	r5, r1
 802acec:	f7f6 fce6 	bl	80216bc <GUI_Lock>
 802acf0:	4620      	mov	r0, r4
 802acf2:	f7f4 fe59 	bl	801f9a8 <GUI_ALLOC_LockH>
 802acf6:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 802acf8:	9001      	str	r0, [sp, #4]
 802acfa:	ea35 0301 	bics.w	r3, r5, r1
 802acfe:	d004      	beq.n	802ad0a <WIDGET_OrState+0x2a>
 802ad00:	4329      	orrs	r1, r5
 802ad02:	8641      	strh	r1, [r0, #50]	; 0x32
 802ad04:	4620      	mov	r0, r4
 802ad06:	f7fc fdf7 	bl	80278f8 <WM_InvalidateWindow>
 802ad0a:	a801      	add	r0, sp, #4
 802ad0c:	f7f4 fe5e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802ad10:	f7f6 fcca 	bl	80216a8 <GUI_Unlock>
 802ad14:	b003      	add	sp, #12
 802ad16:	bd30      	pop	{r4, r5, pc}

0802ad18 <WIDGET_AndState>:
 802ad18:	b900      	cbnz	r0, 802ad1c <WIDGET_AndState+0x4>
 802ad1a:	4770      	bx	lr
 802ad1c:	b530      	push	{r4, r5, lr}
 802ad1e:	4604      	mov	r4, r0
 802ad20:	b083      	sub	sp, #12
 802ad22:	460d      	mov	r5, r1
 802ad24:	f7f6 fcca 	bl	80216bc <GUI_Lock>
 802ad28:	4620      	mov	r0, r4
 802ad2a:	f7f4 fe3d 	bl	801f9a8 <GUI_ALLOC_LockH>
 802ad2e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 802ad30:	9001      	str	r0, [sp, #4]
 802ad32:	ea23 0105 	bic.w	r1, r3, r5
 802ad36:	428b      	cmp	r3, r1
 802ad38:	d003      	beq.n	802ad42 <WIDGET_AndState+0x2a>
 802ad3a:	8641      	strh	r1, [r0, #50]	; 0x32
 802ad3c:	4620      	mov	r0, r4
 802ad3e:	f7fc fddb 	bl	80278f8 <WM_InvalidateWindow>
 802ad42:	a801      	add	r0, sp, #4
 802ad44:	f7f4 fe42 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802ad48:	f7f6 fcae 	bl	80216a8 <GUI_Unlock>
 802ad4c:	b003      	add	sp, #12
 802ad4e:	bd30      	pop	{r4, r5, pc}

0802ad50 <WIDGET_HandleActive>:
 802ad50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ad54:	b084      	sub	sp, #16
 802ad56:	b920      	cbnz	r0, 802ad62 <WIDGET_HandleActive+0x12>
 802ad58:	2401      	movs	r4, #1
 802ad5a:	4620      	mov	r0, r4
 802ad5c:	b004      	add	sp, #16
 802ad5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ad62:	460e      	mov	r6, r1
 802ad64:	4607      	mov	r7, r0
 802ad66:	f7f4 fe1f 	bl	801f9a8 <GUI_ALLOC_LockH>
 802ad6a:	6833      	ldr	r3, [r6, #0]
 802ad6c:	9002      	str	r0, [sp, #8]
 802ad6e:	2b16      	cmp	r3, #22
 802ad70:	4605      	mov	r5, r0
 802ad72:	f000 8090 	beq.w	802ae96 <WIDGET_HandleActive+0x146>
 802ad76:	dd2a      	ble.n	802adce <WIDGET_HandleActive+0x7e>
 802ad78:	2b1f      	cmp	r3, #31
 802ad7a:	d07c      	beq.n	802ae76 <WIDGET_HandleActive+0x126>
 802ad7c:	dd51      	ble.n	802ae22 <WIDGET_HandleActive+0xd2>
 802ad7e:	2b31      	cmp	r3, #49	; 0x31
 802ad80:	d037      	beq.n	802adf2 <WIDGET_HandleActive+0xa2>
 802ad82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802ad86:	d148      	bne.n	802ae1a <WIDGET_HandleActive+0xca>
 802ad88:	68f2      	ldr	r2, [r6, #12]
 802ad8a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 802ad8c:	6814      	ldr	r4, [r2, #0]
 802ad8e:	681b      	ldr	r3, [r3, #0]
 802ad90:	62c2      	str	r2, [r0, #44]	; 0x2c
 802ad92:	a802      	add	r0, sp, #8
 802ad94:	1b1c      	subs	r4, r3, r4
 802ad96:	f7f4 fe19 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802ad9a:	f7f6 fc8f 	bl	80216bc <GUI_Lock>
 802ad9e:	4638      	mov	r0, r7
 802ada0:	f7f4 fe02 	bl	801f9a8 <GUI_ALLOC_LockH>
 802ada4:	ad04      	add	r5, sp, #16
 802ada6:	4262      	negs	r2, r4
 802ada8:	9400      	str	r4, [sp, #0]
 802adaa:	f845 0d04 	str.w	r0, [r5, #-4]!
 802adae:	4623      	mov	r3, r4
 802adb0:	4611      	mov	r1, r2
 802adb2:	f7ff f989 	bl	802a0c8 <WM__UpdateChildPositions>
 802adb6:	4628      	mov	r0, r5
 802adb8:	f7f4 fe08 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802adbc:	f7f6 fc74 	bl	80216a8 <GUI_Unlock>
 802adc0:	4638      	mov	r0, r7
 802adc2:	f7fc fd99 	bl	80278f8 <WM_InvalidateWindow>
 802adc6:	9d02      	ldr	r5, [sp, #8]
 802adc8:	2400      	movs	r4, #0
 802adca:	b95d      	cbnz	r5, 802ade4 <WIDGET_HandleActive+0x94>
 802adcc:	e7c5      	b.n	802ad5a <WIDGET_HandleActive+0xa>
 802adce:	2b11      	cmp	r3, #17
 802add0:	d057      	beq.n	802ae82 <WIDGET_HandleActive+0x132>
 802add2:	dd3c      	ble.n	802ae4e <WIDGET_HandleActive+0xfe>
 802add4:	2b14      	cmp	r3, #20
 802add6:	d011      	beq.n	802adfc <WIDGET_HandleActive+0xac>
 802add8:	2b15      	cmp	r3, #21
 802adda:	d11e      	bne.n	802ae1a <WIDGET_HandleActive+0xca>
 802addc:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 802ade0:	60f3      	str	r3, [r6, #12]
 802ade2:	2400      	movs	r4, #0
 802ade4:	a802      	add	r0, sp, #8
 802ade6:	f7f4 fdf1 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802adea:	4620      	mov	r0, r4
 802adec:	b004      	add	sp, #16
 802adee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802adf2:	2400      	movs	r4, #0
 802adf4:	60f4      	str	r4, [r6, #12]
 802adf6:	2d00      	cmp	r5, #0
 802adf8:	d1f4      	bne.n	802ade4 <WIDGET_HandleActive+0x94>
 802adfa:	e7ae      	b.n	802ad5a <WIDGET_HandleActive+0xa>
 802adfc:	68f4      	ldr	r4, [r6, #12]
 802adfe:	4621      	mov	r1, r4
 802ae00:	f7fc fd6c 	bl	80278dc <WM__GetClientRectWin>
 802ae04:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 802ae06:	4621      	mov	r1, r4
 802ae08:	4620      	mov	r0, r4
 802ae0a:	681a      	ldr	r2, [r3, #0]
 802ae0c:	f7f7 fac4 	bl	8022398 <GUI__ReduceRect>
 802ae10:	9d02      	ldr	r5, [sp, #8]
 802ae12:	2400      	movs	r4, #0
 802ae14:	2d00      	cmp	r5, #0
 802ae16:	d1e5      	bne.n	802ade4 <WIDGET_HandleActive+0x94>
 802ae18:	e79f      	b.n	802ad5a <WIDGET_HandleActive+0xa>
 802ae1a:	2401      	movs	r4, #1
 802ae1c:	2d00      	cmp	r5, #0
 802ae1e:	d1e1      	bne.n	802ade4 <WIDGET_HandleActive+0x94>
 802ae20:	e79b      	b.n	802ad5a <WIDGET_HandleActive+0xa>
 802ae22:	2b1e      	cmp	r3, #30
 802ae24:	d1f9      	bne.n	802ae1a <WIDGET_HandleActive+0xca>
 802ae26:	f8d6 800c 	ldr.w	r8, [r6, #12]
 802ae2a:	f1b8 0f01 	cmp.w	r8, #1
 802ae2e:	d136      	bne.n	802ae9e <WIDGET_HandleActive+0x14e>
 802ae30:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 802ae32:	f003 0410 	and.w	r4, r3, #16
 802ae36:	b2a4      	uxth	r4, r4
 802ae38:	2c00      	cmp	r4, #0
 802ae3a:	d153      	bne.n	802aee4 <WIDGET_HandleActive+0x194>
 802ae3c:	a802      	add	r0, sp, #8
 802ae3e:	f7f4 fdc5 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802ae42:	9d02      	ldr	r5, [sp, #8]
 802ae44:	f8c6 800c 	str.w	r8, [r6, #12]
 802ae48:	2d00      	cmp	r5, #0
 802ae4a:	d1cb      	bne.n	802ade4 <WIDGET_HandleActive+0x94>
 802ae4c:	e785      	b.n	802ad5a <WIDGET_HandleActive+0xa>
 802ae4e:	2b0d      	cmp	r3, #13
 802ae50:	d1e3      	bne.n	802ae1a <WIDGET_HandleActive+0xca>
 802ae52:	68f3      	ldr	r3, [r6, #12]
 802ae54:	68db      	ldr	r3, [r3, #12]
 802ae56:	2b00      	cmp	r3, #0
 802ae58:	d0df      	beq.n	802ae1a <WIDGET_HandleActive+0xca>
 802ae5a:	7a1b      	ldrb	r3, [r3, #8]
 802ae5c:	2b00      	cmp	r3, #0
 802ae5e:	d0dc      	beq.n	802ae1a <WIDGET_HandleActive+0xca>
 802ae60:	a802      	add	r0, sp, #8
 802ae62:	f7f4 fdb3 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802ae66:	4638      	mov	r0, r7
 802ae68:	f003 f9dc 	bl	802e224 <WM_BringToTop>
 802ae6c:	9d02      	ldr	r5, [sp, #8]
 802ae6e:	2400      	movs	r4, #0
 802ae70:	2d00      	cmp	r5, #0
 802ae72:	d1b7      	bne.n	802ade4 <WIDGET_HandleActive+0x94>
 802ae74:	e771      	b.n	802ad5a <WIDGET_HandleActive+0xa>
 802ae76:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 802ae78:	f3c3 1300 	ubfx	r3, r3, #4, #1
 802ae7c:	60f3      	str	r3, [r6, #12]
 802ae7e:	2400      	movs	r4, #0
 802ae80:	e7b0      	b.n	802ade4 <WIDGET_HandleActive+0x94>
 802ae82:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 802ae84:	06db      	lsls	r3, r3, #27
 802ae86:	d504      	bpl.n	802ae92 <WIDGET_HandleActive+0x142>
 802ae88:	68f3      	ldr	r3, [r6, #12]
 802ae8a:	b113      	cbz	r3, 802ae92 <WIDGET_HandleActive+0x142>
 802ae8c:	7a1b      	ldrb	r3, [r3, #8]
 802ae8e:	2b00      	cmp	r3, #0
 802ae90:	d13e      	bne.n	802af10 <WIDGET_HandleActive+0x1c0>
 802ae92:	2401      	movs	r4, #1
 802ae94:	e7a6      	b.n	802ade4 <WIDGET_HandleActive+0x94>
 802ae96:	68f3      	ldr	r3, [r6, #12]
 802ae98:	8603      	strh	r3, [r0, #48]	; 0x30
 802ae9a:	2400      	movs	r4, #0
 802ae9c:	e7a2      	b.n	802ade4 <WIDGET_HandleActive+0x94>
 802ae9e:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 802aea0:	f7f6 fc0c 	bl	80216bc <GUI_Lock>
 802aea4:	4638      	mov	r0, r7
 802aea6:	f7f4 fd7f 	bl	801f9a8 <GUI_ALLOC_LockH>
 802aeaa:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 802aeac:	9003      	str	r0, [sp, #12]
 802aeae:	f024 0401 	bic.w	r4, r4, #1
 802aeb2:	429c      	cmp	r4, r3
 802aeb4:	d003      	beq.n	802aebe <WIDGET_HandleActive+0x16e>
 802aeb6:	8644      	strh	r4, [r0, #50]	; 0x32
 802aeb8:	4638      	mov	r0, r7
 802aeba:	f7fc fd1d 	bl	80278f8 <WM_InvalidateWindow>
 802aebe:	a803      	add	r0, sp, #12
 802aec0:	f7f4 fd84 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802aec4:	2409      	movs	r4, #9
 802aec6:	f7f6 fbef 	bl	80216a8 <GUI_Unlock>
 802aeca:	a802      	add	r0, sp, #8
 802aecc:	f7f4 fd7e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802aed0:	4621      	mov	r1, r4
 802aed2:	4638      	mov	r0, r7
 802aed4:	f7fe f800 	bl	8028ed8 <WM_NotifyParent>
 802aed8:	9d02      	ldr	r5, [sp, #8]
 802aeda:	2400      	movs	r4, #0
 802aedc:	60f4      	str	r4, [r6, #12]
 802aede:	2d00      	cmp	r5, #0
 802aee0:	d180      	bne.n	802ade4 <WIDGET_HandleActive+0x94>
 802aee2:	e73a      	b.n	802ad5a <WIDGET_HandleActive+0xa>
 802aee4:	f043 0401 	orr.w	r4, r3, #1
 802aee8:	f7f6 fbe8 	bl	80216bc <GUI_Lock>
 802aeec:	4638      	mov	r0, r7
 802aeee:	f7f4 fd5b 	bl	801f9a8 <GUI_ALLOC_LockH>
 802aef2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 802aef4:	9003      	str	r0, [sp, #12]
 802aef6:	42a3      	cmp	r3, r4
 802aef8:	d003      	beq.n	802af02 <WIDGET_HandleActive+0x1b2>
 802aefa:	8644      	strh	r4, [r0, #50]	; 0x32
 802aefc:	4638      	mov	r0, r7
 802aefe:	f7fc fcfb 	bl	80278f8 <WM_InvalidateWindow>
 802af02:	a803      	add	r0, sp, #12
 802af04:	f7f4 fd62 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802af08:	2408      	movs	r4, #8
 802af0a:	f7f6 fbcd 	bl	80216a8 <GUI_Unlock>
 802af0e:	e7dc      	b.n	802aeca <WIDGET_HandleActive+0x17a>
 802af10:	a802      	add	r0, sp, #8
 802af12:	f7f4 fd5b 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802af16:	4638      	mov	r0, r7
 802af18:	f7fe f898 	bl	802904c <WM_SetFocus>
 802af1c:	9d02      	ldr	r5, [sp, #8]
 802af1e:	2401      	movs	r4, #1
 802af20:	2d00      	cmp	r5, #0
 802af22:	f47f af5f 	bne.w	802ade4 <WIDGET_HandleActive+0x94>
 802af26:	e718      	b.n	802ad5a <WIDGET_HandleActive+0xa>

0802af28 <_DrawDownRect>:
 802af28:	b510      	push	{r4, lr}
 802af2a:	b09e      	sub	sp, #120	; 0x78
 802af2c:	4604      	mov	r4, r0
 802af2e:	a801      	add	r0, sp, #4
 802af30:	f7f5 f9e2 	bl	80202f8 <GUI_SaveContext_W>
 802af34:	4b09      	ldr	r3, [pc, #36]	; (802af5c <_DrawDownRect+0x34>)
 802af36:	6818      	ldr	r0, [r3, #0]
 802af38:	f7f8 f8d8 	bl	80230ec <LCD_SetColor>
 802af3c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802af40:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 802af44:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802af48:	f9b4 0000 	ldrsh.w	r0, [r4]
 802af4c:	f000 f9f4 	bl	802b338 <GUI_DrawRect>
 802af50:	a801      	add	r0, sp, #4
 802af52:	f7f5 f9db 	bl	802030c <GUI_RestoreContext>
 802af56:	b01e      	add	sp, #120	; 0x78
 802af58:	bd10      	pop	{r4, pc}
 802af5a:	bf00      	nop
 802af5c:	20000214 	.word	0x20000214

0802af60 <_DrawUp>:
 802af60:	b500      	push	{lr}
 802af62:	b0a1      	sub	sp, #132	; 0x84
 802af64:	a801      	add	r0, sp, #4
 802af66:	f7fd fe3f 	bl	8028be8 <WM_GetClientRect>
 802af6a:	a803      	add	r0, sp, #12
 802af6c:	f7f5 f9c4 	bl	80202f8 <GUI_SaveContext_W>
 802af70:	4b09      	ldr	r3, [pc, #36]	; (802af98 <_DrawUp+0x38>)
 802af72:	6818      	ldr	r0, [r3, #0]
 802af74:	f7f8 f8ba 	bl	80230ec <LCD_SetColor>
 802af78:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802af7c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802af80:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 802af84:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 802af88:	f000 f9d6 	bl	802b338 <GUI_DrawRect>
 802af8c:	a803      	add	r0, sp, #12
 802af8e:	f7f5 f9bd 	bl	802030c <GUI_RestoreContext>
 802af92:	b021      	add	sp, #132	; 0x84
 802af94:	f85d fb04 	ldr.w	pc, [sp], #4
 802af98:	20000214 	.word	0x20000214

0802af9c <_DrawUpRect>:
 802af9c:	b510      	push	{r4, lr}
 802af9e:	b09e      	sub	sp, #120	; 0x78
 802afa0:	4604      	mov	r4, r0
 802afa2:	a801      	add	r0, sp, #4
 802afa4:	f7f5 f9a8 	bl	80202f8 <GUI_SaveContext_W>
 802afa8:	4b09      	ldr	r3, [pc, #36]	; (802afd0 <_DrawUpRect+0x34>)
 802afaa:	6818      	ldr	r0, [r3, #0]
 802afac:	f7f8 f89e 	bl	80230ec <LCD_SetColor>
 802afb0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802afb4:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 802afb8:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 802afbc:	f9b4 0000 	ldrsh.w	r0, [r4]
 802afc0:	f000 f9ba 	bl	802b338 <GUI_DrawRect>
 802afc4:	a801      	add	r0, sp, #4
 802afc6:	f7f5 f9a1 	bl	802030c <GUI_RestoreContext>
 802afca:	b01e      	add	sp, #120	; 0x78
 802afcc:	bd10      	pop	{r4, pc}
 802afce:	bf00      	nop
 802afd0:	20000214 	.word	0x20000214

0802afd4 <_DrawDown>:
 802afd4:	b500      	push	{lr}
 802afd6:	b0a1      	sub	sp, #132	; 0x84
 802afd8:	a801      	add	r0, sp, #4
 802afda:	f7fd fe05 	bl	8028be8 <WM_GetClientRect>
 802afde:	a803      	add	r0, sp, #12
 802afe0:	f7f5 f98a 	bl	80202f8 <GUI_SaveContext_W>
 802afe4:	4b09      	ldr	r3, [pc, #36]	; (802b00c <_DrawDown+0x38>)
 802afe6:	6818      	ldr	r0, [r3, #0]
 802afe8:	f7f8 f880 	bl	80230ec <LCD_SetColor>
 802afec:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 802aff0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 802aff4:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 802aff8:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 802affc:	f000 f99c 	bl	802b338 <GUI_DrawRect>
 802b000:	a803      	add	r0, sp, #12
 802b002:	f7f5 f983 	bl	802030c <GUI_RestoreContext>
 802b006:	b021      	add	sp, #132	; 0x84
 802b008:	f85d fb04 	ldr.w	pc, [sp], #4
 802b00c:	20000214 	.word	0x20000214

0802b010 <WINDOW_Callback>:
 802b010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802b014:	6846      	ldr	r6, [r0, #4]
 802b016:	b083      	sub	sp, #12
 802b018:	4604      	mov	r4, r0
 802b01a:	4630      	mov	r0, r6
 802b01c:	f7f4 fcc4 	bl	801f9a8 <GUI_ALLOC_LockH>
 802b020:	ad02      	add	r5, sp, #8
 802b022:	4603      	mov	r3, r0
 802b024:	f845 0d08 	str.w	r0, [r5, #-8]!
 802b028:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
 802b02c:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 802b02e:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 802b032:	4628      	mov	r0, r5
 802b034:	f7f4 fcca 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802b038:	6823      	ldr	r3, [r4, #0]
 802b03a:	3b0e      	subs	r3, #14
 802b03c:	2b1c      	cmp	r3, #28
 802b03e:	d819      	bhi.n	802b074 <WINDOW_Callback+0x64>
 802b040:	e8df f003 	tbb	[pc, r3]
 802b044:	18180f2d 	.word	0x18180f2d
 802b048:	18181818 	.word	0x18181818
 802b04c:	18181818 	.word	0x18181818
 802b050:	18181818 	.word	0x18181818
 802b054:	18564f3a 	.word	0x18564f3a
 802b058:	1818186f 	.word	0x1818186f
 802b05c:	18181818 	.word	0x18181818
 802b060:	1f          	.byte	0x1f
 802b061:	00          	.byte	0x00
 802b062:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 802b066:	4599      	cmp	r9, r3
 802b068:	d004      	beq.n	802b074 <WINDOW_Callback+0x64>
 802b06a:	4648      	mov	r0, r9
 802b06c:	f7f8 f838 	bl	80230e0 <LCD_SetBkColor>
 802b070:	f7f5 fa74 	bl	802055c <GUI_Clear>
 802b074:	2f00      	cmp	r7, #0
 802b076:	d059      	beq.n	802b12c <WINDOW_Callback+0x11c>
 802b078:	4620      	mov	r0, r4
 802b07a:	47b8      	blx	r7
 802b07c:	b003      	add	sp, #12
 802b07e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802b082:	4630      	mov	r0, r6
 802b084:	f7f4 fc90 	bl	801f9a8 <GUI_ALLOC_LockH>
 802b088:	68e3      	ldr	r3, [r4, #12]
 802b08a:	9000      	str	r0, [sp, #0]
 802b08c:	2b00      	cmp	r3, #0
 802b08e:	d05e      	beq.n	802b14e <WINDOW_Callback+0x13e>
 802b090:	63c3      	str	r3, [r0, #60]	; 0x3c
 802b092:	4628      	mov	r0, r5
 802b094:	f7f4 fc9a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802b098:	b003      	add	sp, #12
 802b09a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802b09e:	68e3      	ldr	r3, [r4, #12]
 802b0a0:	685a      	ldr	r2, [r3, #4]
 802b0a2:	2a00      	cmp	r2, #0
 802b0a4:	dde6      	ble.n	802b074 <WINDOW_Callback+0x64>
 802b0a6:	681b      	ldr	r3, [r3, #0]
 802b0a8:	2b09      	cmp	r3, #9
 802b0aa:	d04c      	beq.n	802b146 <WINDOW_Callback+0x136>
 802b0ac:	2b0a      	cmp	r3, #10
 802b0ae:	d1e1      	bne.n	802b074 <WINDOW_Callback+0x64>
 802b0b0:	4630      	mov	r0, r6
 802b0b2:	f003 fc31 	bl	802e918 <WM_SetFocusOnPrevChild>
 802b0b6:	e7e1      	b.n	802b07c <WINDOW_Callback+0x6c>
 802b0b8:	68e4      	ldr	r4, [r4, #12]
 802b0ba:	2c01      	cmp	r4, #1
 802b0bc:	d1de      	bne.n	802b07c <WINDOW_Callback+0x6c>
 802b0be:	4640      	mov	r0, r8
 802b0c0:	f7fd fefe 	bl	8028ec0 <WM_IsWindow>
 802b0c4:	2800      	cmp	r0, #0
 802b0c6:	d03e      	beq.n	802b146 <WINDOW_Callback+0x136>
 802b0c8:	4640      	mov	r0, r8
 802b0ca:	f7fd ffbf 	bl	802904c <WM_SetFocus>
 802b0ce:	4640      	mov	r0, r8
 802b0d0:	f7fd fec8 	bl	8028e64 <WM_HasFocus>
 802b0d4:	2800      	cmp	r0, #0
 802b0d6:	d0d1      	beq.n	802b07c <WINDOW_Callback+0x6c>
 802b0d8:	4621      	mov	r1, r4
 802b0da:	4640      	mov	r0, r8
 802b0dc:	f7ff fe00 	bl	802ace0 <WIDGET_OrState>
 802b0e0:	e7cc      	b.n	802b07c <WINDOW_Callback+0x6c>
 802b0e2:	4621      	mov	r1, r4
 802b0e4:	4630      	mov	r0, r6
 802b0e6:	f7ff fe33 	bl	802ad50 <WIDGET_HandleActive>
 802b0ea:	b003      	add	sp, #12
 802b0ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802b0f0:	4630      	mov	r0, r6
 802b0f2:	f7f4 fc59 	bl	801f9a8 <GUI_ALLOC_LockH>
 802b0f6:	68e4      	ldr	r4, [r4, #12]
 802b0f8:	9001      	str	r0, [sp, #4]
 802b0fa:	b164      	cbz	r4, 802b116 <WINDOW_Callback+0x106>
 802b0fc:	4631      	mov	r1, r6
 802b0fe:	6860      	ldr	r0, [r4, #4]
 802b100:	f7fe ff6c 	bl	8029fdc <WM__IsAncestorOrSelf>
 802b104:	4631      	mov	r1, r6
 802b106:	b9a8      	cbnz	r0, 802b134 <WINDOW_Callback+0x124>
 802b108:	6820      	ldr	r0, [r4, #0]
 802b10a:	f7fe ff55 	bl	8029fb8 <WM__IsAncestor>
 802b10e:	b110      	cbz	r0, 802b116 <WINDOW_Callback+0x106>
 802b110:	9b01      	ldr	r3, [sp, #4]
 802b112:	6822      	ldr	r2, [r4, #0]
 802b114:	639a      	str	r2, [r3, #56]	; 0x38
 802b116:	a801      	add	r0, sp, #4
 802b118:	f7f4 fc58 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802b11c:	b003      	add	sp, #12
 802b11e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802b122:	f8c4 900c 	str.w	r9, [r4, #12]
 802b126:	b003      	add	sp, #12
 802b128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802b12c:	4620      	mov	r0, r4
 802b12e:	f7fd faa5 	bl	802867c <WM_DefaultProc>
 802b132:	e7a3      	b.n	802b07c <WINDOW_Callback+0x6c>
 802b134:	6860      	ldr	r0, [r4, #4]
 802b136:	f7fe ff3f 	bl	8029fb8 <WM__IsAncestor>
 802b13a:	2800      	cmp	r0, #0
 802b13c:	d0eb      	beq.n	802b116 <WINDOW_Callback+0x106>
 802b13e:	9b01      	ldr	r3, [sp, #4]
 802b140:	6862      	ldr	r2, [r4, #4]
 802b142:	639a      	str	r2, [r3, #56]	; 0x38
 802b144:	e7e7      	b.n	802b116 <WINDOW_Callback+0x106>
 802b146:	4630      	mov	r0, r6
 802b148:	f003 fb9e 	bl	802e888 <WM_SetFocusOnNextChild>
 802b14c:	e796      	b.n	802b07c <WINDOW_Callback+0x6c>
 802b14e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 802b150:	60e3      	str	r3, [r4, #12]
 802b152:	e79e      	b.n	802b092 <WINDOW_Callback+0x82>

0802b154 <WINDOW_CreateIndirect>:
 802b154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b158:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 802b15c:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 802b160:	6985      	ldr	r5, [r0, #24]
 802b162:	f9b0 800e 	ldrsh.w	r8, [r0, #14]
 802b166:	f9b0 9010 	ldrsh.w	r9, [r0, #16]
 802b16a:	f8b0 a012 	ldrh.w	sl, [r0, #18]
 802b16e:	4c19      	ldr	r4, [pc, #100]	; (802b1d4 <WINDOW_CreateIndirect+0x80>)
 802b170:	b089      	sub	sp, #36	; 0x24
 802b172:	468b      	mov	fp, r1
 802b174:	4416      	add	r6, r2
 802b176:	441f      	add	r7, r3
 802b178:	3518      	adds	r5, #24
 802b17a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 802b17e:	9305      	str	r3, [sp, #20]
 802b180:	f7f6 fa9c 	bl	80216bc <GUI_Lock>
 802b184:	9402      	str	r4, [sp, #8]
 802b186:	f8cd b000 	str.w	fp, [sp]
 802b18a:	4639      	mov	r1, r7
 802b18c:	4630      	mov	r0, r6
 802b18e:	9503      	str	r5, [sp, #12]
 802b190:	f8cd a004 	str.w	sl, [sp, #4]
 802b194:	464b      	mov	r3, r9
 802b196:	4642      	mov	r2, r8
 802b198:	f7fc fc0a 	bl	80279b0 <WM_CreateWindowAsChild>
 802b19c:	4604      	mov	r4, r0
 802b19e:	b190      	cbz	r0, 802b1c6 <WINDOW_CreateIndirect+0x72>
 802b1a0:	f7f4 fc02 	bl	801f9a8 <GUI_ALLOC_LockH>
 802b1a4:	9905      	ldr	r1, [sp, #20]
 802b1a6:	9007      	str	r0, [sp, #28]
 802b1a8:	2210      	movs	r2, #16
 802b1aa:	f7ff fd79 	bl	802aca0 <WIDGET__Init>
 802b1ae:	a808      	add	r0, sp, #32
 802b1b0:	4a09      	ldr	r2, [pc, #36]	; (802b1d8 <WINDOW_CreateIndirect+0x84>)
 802b1b2:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 802b1b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 802b1b8:	6812      	ldr	r2, [r2, #0]
 802b1ba:	6359      	str	r1, [r3, #52]	; 0x34
 802b1bc:	2100      	movs	r1, #0
 802b1be:	6399      	str	r1, [r3, #56]	; 0x38
 802b1c0:	641a      	str	r2, [r3, #64]	; 0x40
 802b1c2:	f7f4 fc03 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802b1c6:	f7f6 fa6f 	bl	80216a8 <GUI_Unlock>
 802b1ca:	4620      	mov	r0, r4
 802b1cc:	b009      	add	sp, #36	; 0x24
 802b1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b1d2:	bf00      	nop
 802b1d4:	0802b011 	.word	0x0802b011
 802b1d8:	20000218 	.word	0x20000218

0802b1dc <_GetIndexMask_0>:
 802b1dc:	b508      	push	{r3, lr}
 802b1de:	f7f8 f965 	bl	80234ac <LCD_GetNumColors>
 802b1e2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 802b1e6:	d014      	beq.n	802b212 <_GetIndexMask_0+0x36>
 802b1e8:	287f      	cmp	r0, #127	; 0x7f
 802b1ea:	d80e      	bhi.n	802b20a <_GetIndexMask_0+0x2e>
 802b1ec:	283f      	cmp	r0, #63	; 0x3f
 802b1ee:	d812      	bhi.n	802b216 <_GetIndexMask_0+0x3a>
 802b1f0:	281f      	cmp	r0, #31
 802b1f2:	d80c      	bhi.n	802b20e <_GetIndexMask_0+0x32>
 802b1f4:	280f      	cmp	r0, #15
 802b1f6:	d810      	bhi.n	802b21a <_GetIndexMask_0+0x3e>
 802b1f8:	2807      	cmp	r0, #7
 802b1fa:	d812      	bhi.n	802b222 <_GetIndexMask_0+0x46>
 802b1fc:	2803      	cmp	r0, #3
 802b1fe:	d80e      	bhi.n	802b21e <_GetIndexMask_0+0x42>
 802b200:	2801      	cmp	r0, #1
 802b202:	bf94      	ite	ls
 802b204:	2000      	movls	r0, #0
 802b206:	2001      	movhi	r0, #1
 802b208:	bd08      	pop	{r3, pc}
 802b20a:	207f      	movs	r0, #127	; 0x7f
 802b20c:	bd08      	pop	{r3, pc}
 802b20e:	201f      	movs	r0, #31
 802b210:	bd08      	pop	{r3, pc}
 802b212:	20ff      	movs	r0, #255	; 0xff
 802b214:	bd08      	pop	{r3, pc}
 802b216:	203f      	movs	r0, #63	; 0x3f
 802b218:	bd08      	pop	{r3, pc}
 802b21a:	200f      	movs	r0, #15
 802b21c:	bd08      	pop	{r3, pc}
 802b21e:	2003      	movs	r0, #3
 802b220:	bd08      	pop	{r3, pc}
 802b222:	2007      	movs	r0, #7
 802b224:	bd08      	pop	{r3, pc}
 802b226:	bf00      	nop

0802b228 <_Index2Color_0>:
 802b228:	b538      	push	{r3, r4, r5, lr}
 802b22a:	4604      	mov	r4, r0
 802b22c:	f7f8 f93e 	bl	80234ac <LCD_GetNumColors>
 802b230:	4605      	mov	r5, r0
 802b232:	f7f8 f95b 	bl	80234ec <LCD_GetPalette>
 802b236:	42a5      	cmp	r5, r4
 802b238:	d903      	bls.n	802b242 <_Index2Color_0+0x1a>
 802b23a:	b118      	cbz	r0, 802b244 <_Index2Color_0+0x1c>
 802b23c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 802b240:	bd38      	pop	{r3, r4, r5, pc}
 802b242:	2000      	movs	r0, #0
 802b244:	bd38      	pop	{r3, r4, r5, pc}
 802b246:	bf00      	nop

0802b248 <_Color2Index_0>:
 802b248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b24c:	4606      	mov	r6, r0
 802b24e:	f7f8 f92d 	bl	80234ac <LCD_GetNumColors>
 802b252:	4607      	mov	r7, r0
 802b254:	f7f8 f94a 	bl	80234ec <LCD_GetPalette>
 802b258:	b158      	cbz	r0, 802b272 <_Color2Index_0+0x2a>
 802b25a:	f1a0 0804 	sub.w	r8, r0, #4
 802b25e:	4643      	mov	r3, r8
 802b260:	2000      	movs	r0, #0
 802b262:	e002      	b.n	802b26a <_Color2Index_0+0x22>
 802b264:	3001      	adds	r0, #1
 802b266:	4287      	cmp	r7, r0
 802b268:	dd05      	ble.n	802b276 <_Color2Index_0+0x2e>
 802b26a:	f853 2f04 	ldr.w	r2, [r3, #4]!
 802b26e:	42b2      	cmp	r2, r6
 802b270:	d1f8      	bne.n	802b264 <_Color2Index_0+0x1c>
 802b272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b276:	2400      	movs	r4, #0
 802b278:	4625      	mov	r5, r4
 802b27a:	f06f 497f 	mvn.w	r9, #4278190080	; 0xff000000
 802b27e:	f858 1f04 	ldr.w	r1, [r8, #4]!
 802b282:	4630      	mov	r0, r6
 802b284:	f7f4 fec8 	bl	8020018 <GUI_CalcColorDist>
 802b288:	4581      	cmp	r9, r0
 802b28a:	bf88      	it	hi
 802b28c:	462c      	movhi	r4, r5
 802b28e:	f105 0501 	add.w	r5, r5, #1
 802b292:	bf88      	it	hi
 802b294:	4681      	movhi	r9, r0
 802b296:	42af      	cmp	r7, r5
 802b298:	dcf1      	bgt.n	802b27e <_Color2Index_0+0x36>
 802b29a:	4620      	mov	r0, r4
 802b29c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0802b2a0 <_Color2Index_8888>:
 802b2a0:	43c2      	mvns	r2, r0
 802b2a2:	f3c0 4107 	ubfx	r1, r0, #16, #8
 802b2a6:	0403      	lsls	r3, r0, #16
 802b2a8:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 802b2ac:	430a      	orrs	r2, r1
 802b2ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802b2b2:	4313      	orrs	r3, r2
 802b2b4:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802b2b8:	4318      	orrs	r0, r3
 802b2ba:	4770      	bx	lr

0802b2bc <_GetIndexMask_8888>:
 802b2bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802b2c0:	4770      	bx	lr
 802b2c2:	bf00      	nop

0802b2c4 <_Color2IndexBulk>:
 802b2c4:	b4f0      	push	{r4, r5, r6, r7}
 802b2c6:	f850 4b04 	ldr.w	r4, [r0], #4
 802b2ca:	43e6      	mvns	r6, r4
 802b2cc:	f3c4 4707 	ubfx	r7, r4, #16, #8
 802b2d0:	0425      	lsls	r5, r4, #16
 802b2d2:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 802b2d6:	433e      	orrs	r6, r7
 802b2d8:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 802b2dc:	4335      	orrs	r5, r6
 802b2de:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802b2e2:	432c      	orrs	r4, r5
 802b2e4:	3a01      	subs	r2, #1
 802b2e6:	600c      	str	r4, [r1, #0]
 802b2e8:	4419      	add	r1, r3
 802b2ea:	d1ec      	bne.n	802b2c6 <_Color2IndexBulk+0x2>
 802b2ec:	bcf0      	pop	{r4, r5, r6, r7}
 802b2ee:	4770      	bx	lr

0802b2f0 <_Index2ColorBulk>:
 802b2f0:	b4f0      	push	{r4, r5, r6, r7}
 802b2f2:	6804      	ldr	r4, [r0, #0]
 802b2f4:	43e6      	mvns	r6, r4
 802b2f6:	f3c4 4707 	ubfx	r7, r4, #16, #8
 802b2fa:	0425      	lsls	r5, r4, #16
 802b2fc:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 802b300:	433e      	orrs	r6, r7
 802b302:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 802b306:	4335      	orrs	r5, r6
 802b308:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802b30c:	432c      	orrs	r4, r5
 802b30e:	3a01      	subs	r2, #1
 802b310:	4418      	add	r0, r3
 802b312:	f841 4b04 	str.w	r4, [r1], #4
 802b316:	d1ec      	bne.n	802b2f2 <_Index2ColorBulk+0x2>
 802b318:	bcf0      	pop	{r4, r5, r6, r7}
 802b31a:	4770      	bx	lr

0802b31c <LCD_Index2Color_8888>:
 802b31c:	43c2      	mvns	r2, r0
 802b31e:	f3c0 4107 	ubfx	r1, r0, #16, #8
 802b322:	0403      	lsls	r3, r0, #16
 802b324:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 802b328:	430a      	orrs	r2, r1
 802b32a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802b32e:	4313      	orrs	r3, r2
 802b330:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802b334:	4318      	orrs	r0, r3
 802b336:	4770      	bx	lr

0802b338 <GUI_DrawRect>:
 802b338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b33c:	b082      	sub	sp, #8
 802b33e:	4604      	mov	r4, r0
 802b340:	4689      	mov	r9, r1
 802b342:	4692      	mov	sl, r2
 802b344:	4698      	mov	r8, r3
 802b346:	f7f6 f9b9 	bl	80216bc <GUI_Lock>
 802b34a:	4b1e      	ldr	r3, [pc, #120]	; (802b3c4 <GUI_DrawRect+0x8c>)
 802b34c:	681f      	ldr	r7, [r3, #0]
 802b34e:	7e3e      	ldrb	r6, [r7, #24]
 802b350:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 802b352:	6d3f      	ldr	r7, [r7, #80]	; 0x50
 802b354:	3e01      	subs	r6, #1
 802b356:	b2b6      	uxth	r6, r6
 802b358:	442c      	add	r4, r5
 802b35a:	44b9      	add	r9, r7
 802b35c:	4455      	add	r5, sl
 802b35e:	44b8      	add	r8, r7
 802b360:	1ba1      	subs	r1, r4, r6
 802b362:	1972      	adds	r2, r6, r5
 802b364:	ebc6 0309 	rsb	r3, r6, r9
 802b368:	4668      	mov	r0, sp
 802b36a:	4446      	add	r6, r8
 802b36c:	f8ad 1000 	strh.w	r1, [sp]
 802b370:	f8ad 2004 	strh.w	r2, [sp, #4]
 802b374:	f8ad 3002 	strh.w	r3, [sp, #2]
 802b378:	f8ad 6006 	strh.w	r6, [sp, #6]
 802b37c:	f7fc fe3a 	bl	8027ff4 <WM__InitIVRSearch>
 802b380:	b1d8      	cbz	r0, 802b3ba <GUI_DrawRect+0x82>
 802b382:	f109 0701 	add.w	r7, r9, #1
 802b386:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 802b38a:	462a      	mov	r2, r5
 802b38c:	4649      	mov	r1, r9
 802b38e:	4620      	mov	r0, r4
 802b390:	f7f7 fac4 	bl	802291c <LCD_DrawHLine>
 802b394:	462a      	mov	r2, r5
 802b396:	4641      	mov	r1, r8
 802b398:	4620      	mov	r0, r4
 802b39a:	f7f7 fabf 	bl	802291c <LCD_DrawHLine>
 802b39e:	4632      	mov	r2, r6
 802b3a0:	4639      	mov	r1, r7
 802b3a2:	4620      	mov	r0, r4
 802b3a4:	f7f7 fae4 	bl	8022970 <LCD_DrawVLine>
 802b3a8:	4632      	mov	r2, r6
 802b3aa:	4639      	mov	r1, r7
 802b3ac:	4628      	mov	r0, r5
 802b3ae:	f7f7 fadf 	bl	8022970 <LCD_DrawVLine>
 802b3b2:	f7fc fcf9 	bl	8027da8 <WM__GetNextIVR>
 802b3b6:	2800      	cmp	r0, #0
 802b3b8:	d1e7      	bne.n	802b38a <GUI_DrawRect+0x52>
 802b3ba:	f7f6 f975 	bl	80216a8 <GUI_Unlock>
 802b3be:	b002      	add	sp, #8
 802b3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b3c4:	200000e8 	.word	0x200000e8

0802b3c8 <GUI_GetYAdjust>:
 802b3c8:	b510      	push	{r4, lr}
 802b3ca:	f7f6 f977 	bl	80216bc <GUI_Lock>
 802b3ce:	4b0f      	ldr	r3, [pc, #60]	; (802b40c <GUI_GetYAdjust+0x44>)
 802b3d0:	681a      	ldr	r2, [r3, #0]
 802b3d2:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 802b3d4:	f003 030c 	and.w	r3, r3, #12
 802b3d8:	2b08      	cmp	r3, #8
 802b3da:	d008      	beq.n	802b3ee <GUI_GetYAdjust+0x26>
 802b3dc:	2b0c      	cmp	r3, #12
 802b3de:	d006      	beq.n	802b3ee <GUI_GetYAdjust+0x26>
 802b3e0:	2b04      	cmp	r3, #4
 802b3e2:	d00b      	beq.n	802b3fc <GUI_GetYAdjust+0x34>
 802b3e4:	2400      	movs	r4, #0
 802b3e6:	f7f6 f95f 	bl	80216a8 <GUI_Unlock>
 802b3ea:	4620      	mov	r0, r4
 802b3ec:	bd10      	pop	{r4, pc}
 802b3ee:	69d3      	ldr	r3, [r2, #28]
 802b3f0:	7e1c      	ldrb	r4, [r3, #24]
 802b3f2:	0864      	lsrs	r4, r4, #1
 802b3f4:	f7f6 f958 	bl	80216a8 <GUI_Unlock>
 802b3f8:	4620      	mov	r0, r4
 802b3fa:	bd10      	pop	{r4, pc}
 802b3fc:	69d3      	ldr	r3, [r2, #28]
 802b3fe:	7e1c      	ldrb	r4, [r3, #24]
 802b400:	3c01      	subs	r4, #1
 802b402:	f7f6 f951 	bl	80216a8 <GUI_Unlock>
 802b406:	4620      	mov	r0, r4
 802b408:	bd10      	pop	{r4, pc}
 802b40a:	bf00      	nop
 802b40c:	200000e8 	.word	0x200000e8

0802b410 <GUI_GetFontDistY>:
 802b410:	b510      	push	{r4, lr}
 802b412:	f7f6 f953 	bl	80216bc <GUI_Lock>
 802b416:	4b04      	ldr	r3, [pc, #16]	; (802b428 <GUI_GetFontDistY+0x18>)
 802b418:	681b      	ldr	r3, [r3, #0]
 802b41a:	69db      	ldr	r3, [r3, #28]
 802b41c:	7e5c      	ldrb	r4, [r3, #25]
 802b41e:	f7f6 f943 	bl	80216a8 <GUI_Unlock>
 802b422:	4620      	mov	r0, r4
 802b424:	bd10      	pop	{r4, pc}
 802b426:	bf00      	nop
 802b428:	200000e8 	.word	0x200000e8

0802b42c <GUI_GetCharDistX>:
 802b42c:	b510      	push	{r4, lr}
 802b42e:	4604      	mov	r4, r0
 802b430:	f7f6 f944 	bl	80216bc <GUI_Lock>
 802b434:	4b05      	ldr	r3, [pc, #20]	; (802b44c <GUI_GetCharDistX+0x20>)
 802b436:	681b      	ldr	r3, [r3, #0]
 802b438:	69db      	ldr	r3, [r3, #28]
 802b43a:	2100      	movs	r1, #0
 802b43c:	685b      	ldr	r3, [r3, #4]
 802b43e:	4620      	mov	r0, r4
 802b440:	4798      	blx	r3
 802b442:	4604      	mov	r4, r0
 802b444:	f7f6 f930 	bl	80216a8 <GUI_Unlock>
 802b448:	4620      	mov	r0, r4
 802b44a:	bd10      	pop	{r4, pc}
 802b44c:	200000e8 	.word	0x200000e8

0802b450 <GUI_GetCharDistXEx>:
 802b450:	b538      	push	{r3, r4, r5, lr}
 802b452:	4604      	mov	r4, r0
 802b454:	460d      	mov	r5, r1
 802b456:	f7f6 f931 	bl	80216bc <GUI_Lock>
 802b45a:	4b06      	ldr	r3, [pc, #24]	; (802b474 <GUI_GetCharDistXEx+0x24>)
 802b45c:	681b      	ldr	r3, [r3, #0]
 802b45e:	69db      	ldr	r3, [r3, #28]
 802b460:	4629      	mov	r1, r5
 802b462:	685b      	ldr	r3, [r3, #4]
 802b464:	4620      	mov	r0, r4
 802b466:	4798      	blx	r3
 802b468:	4604      	mov	r4, r0
 802b46a:	f7f6 f91d 	bl	80216a8 <GUI_Unlock>
 802b46e:	4620      	mov	r0, r4
 802b470:	bd38      	pop	{r3, r4, r5, pc}
 802b472:	bf00      	nop
 802b474:	200000e8 	.word	0x200000e8

0802b478 <_Log2VisBuffered>:
 802b478:	4770      	bx	lr
 802b47a:	bf00      	nop

0802b47c <_DispLine>:
 802b47c:	b570      	push	{r4, r5, r6, lr}
 802b47e:	b082      	sub	sp, #8
 802b480:	ab02      	add	r3, sp, #8
 802b482:	4d21      	ldr	r5, [pc, #132]	; (802b508 <_DispLine+0x8c>)
 802b484:	f843 1d08 	str.w	r1, [r3, #-8]!
 802b488:	4c20      	ldr	r4, [pc, #128]	; (802b50c <_DispLine+0x90>)
 802b48a:	9001      	str	r0, [sp, #4]
 802b48c:	4619      	mov	r1, r3
 802b48e:	682b      	ldr	r3, [r5, #0]
 802b490:	4615      	mov	r5, r2
 802b492:	4798      	blx	r3
 802b494:	6823      	ldr	r3, [r4, #0]
 802b496:	9001      	str	r0, [sp, #4]
 802b498:	6958      	ldr	r0, [r3, #20]
 802b49a:	b118      	cbz	r0, 802b4a4 <_DispLine+0x28>
 802b49c:	4629      	mov	r1, r5
 802b49e:	f7f4 ff0d 	bl	80202bc <GUI_RectsIntersect>
 802b4a2:	b1a8      	cbz	r0, 802b4d0 <_DispLine+0x54>
 802b4a4:	2001      	movs	r0, #1
 802b4a6:	f001 fbfb 	bl	802cca0 <GUI__ManageCache>
 802b4aa:	6822      	ldr	r2, [r4, #0]
 802b4ac:	69d3      	ldr	r3, [r2, #28]
 802b4ae:	695b      	ldr	r3, [r3, #20]
 802b4b0:	b1ab      	cbz	r3, 802b4de <_DispLine+0x62>
 802b4b2:	4c17      	ldr	r4, [pc, #92]	; (802b510 <_DispLine+0x94>)
 802b4b4:	6821      	ldr	r1, [r4, #0]
 802b4b6:	b169      	cbz	r1, 802b4d4 <_DispLine+0x58>
 802b4b8:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 802b4bc:	689b      	ldr	r3, [r3, #8]
 802b4be:	9801      	ldr	r0, [sp, #4]
 802b4c0:	9900      	ldr	r1, [sp, #0]
 802b4c2:	4798      	blx	r3
 802b4c4:	4628      	mov	r0, r5
 802b4c6:	6823      	ldr	r3, [r4, #0]
 802b4c8:	4798      	blx	r3
 802b4ca:	2000      	movs	r0, #0
 802b4cc:	f001 fbe8 	bl	802cca0 <GUI__ManageCache>
 802b4d0:	b002      	add	sp, #8
 802b4d2:	bd70      	pop	{r4, r5, r6, pc}
 802b4d4:	689b      	ldr	r3, [r3, #8]
 802b4d6:	9900      	ldr	r1, [sp, #0]
 802b4d8:	9801      	ldr	r0, [sp, #4]
 802b4da:	4798      	blx	r3
 802b4dc:	e7f5      	b.n	802b4ca <_DispLine+0x4e>
 802b4de:	4d0d      	ldr	r5, [pc, #52]	; (802b514 <_DispLine+0x98>)
 802b4e0:	9b00      	ldr	r3, [sp, #0]
 802b4e2:	3b01      	subs	r3, #1
 802b4e4:	2b00      	cmp	r3, #0
 802b4e6:	a801      	add	r0, sp, #4
 802b4e8:	9300      	str	r3, [sp, #0]
 802b4ea:	dbee      	blt.n	802b4ca <_DispLine+0x4e>
 802b4ec:	f7f6 fa08 	bl	8021900 <GUI_UC__GetCharCodeInc>
 802b4f0:	6823      	ldr	r3, [r4, #0]
 802b4f2:	69db      	ldr	r3, [r3, #28]
 802b4f4:	681b      	ldr	r3, [r3, #0]
 802b4f6:	4606      	mov	r6, r0
 802b4f8:	4798      	blx	r3
 802b4fa:	682b      	ldr	r3, [r5, #0]
 802b4fc:	2b00      	cmp	r3, #0
 802b4fe:	d0ef      	beq.n	802b4e0 <_DispLine+0x64>
 802b500:	4630      	mov	r0, r6
 802b502:	4798      	blx	r3
 802b504:	e7ec      	b.n	802b4e0 <_DispLine+0x64>
 802b506:	bf00      	nop
 802b508:	2000021c 	.word	0x2000021c
 802b50c:	200000e8 	.word	0x200000e8
 802b510:	20030880 	.word	0x20030880
 802b514:	2003088c 	.word	0x2003088c

0802b518 <GUI__GetLineNumChars>:
 802b518:	b530      	push	{r4, r5, lr}
 802b51a:	b083      	sub	sp, #12
 802b51c:	9001      	str	r0, [sp, #4]
 802b51e:	b300      	cbz	r0, 802b562 <GUI__GetLineNumChars+0x4a>
 802b520:	4b11      	ldr	r3, [pc, #68]	; (802b568 <GUI__GetLineNumChars+0x50>)
 802b522:	681b      	ldr	r3, [r3, #0]
 802b524:	69db      	ldr	r3, [r3, #28]
 802b526:	695b      	ldr	r3, [r3, #20]
 802b528:	460d      	mov	r5, r1
 802b52a:	b123      	cbz	r3, 802b536 <GUI__GetLineNumChars+0x1e>
 802b52c:	685b      	ldr	r3, [r3, #4]
 802b52e:	b113      	cbz	r3, 802b536 <GUI__GetLineNumChars+0x1e>
 802b530:	4798      	blx	r3
 802b532:	b003      	add	sp, #12
 802b534:	bd30      	pop	{r4, r5, pc}
 802b536:	2d00      	cmp	r5, #0
 802b538:	bfd8      	it	le
 802b53a:	2000      	movle	r0, #0
 802b53c:	ddf9      	ble.n	802b532 <GUI__GetLineNumChars+0x1a>
 802b53e:	2400      	movs	r4, #0
 802b540:	e004      	b.n	802b54c <GUI__GetLineNumChars+0x34>
 802b542:	280a      	cmp	r0, #10
 802b544:	d007      	beq.n	802b556 <GUI__GetLineNumChars+0x3e>
 802b546:	3401      	adds	r4, #1
 802b548:	42a5      	cmp	r5, r4
 802b54a:	d007      	beq.n	802b55c <GUI__GetLineNumChars+0x44>
 802b54c:	a801      	add	r0, sp, #4
 802b54e:	f7f6 f9d7 	bl	8021900 <GUI_UC__GetCharCodeInc>
 802b552:	2800      	cmp	r0, #0
 802b554:	d1f5      	bne.n	802b542 <GUI__GetLineNumChars+0x2a>
 802b556:	4620      	mov	r0, r4
 802b558:	b003      	add	sp, #12
 802b55a:	bd30      	pop	{r4, r5, pc}
 802b55c:	4628      	mov	r0, r5
 802b55e:	b003      	add	sp, #12
 802b560:	bd30      	pop	{r4, r5, pc}
 802b562:	b003      	add	sp, #12
 802b564:	bd30      	pop	{r4, r5, pc}
 802b566:	bf00      	nop
 802b568:	200000e8 	.word	0x200000e8

0802b56c <GUI__GetLineDistX>:
 802b56c:	b570      	push	{r4, r5, r6, lr}
 802b56e:	b084      	sub	sp, #16
 802b570:	ab04      	add	r3, sp, #16
 802b572:	4a1d      	ldr	r2, [pc, #116]	; (802b5e8 <GUI__GetLineDistX+0x7c>)
 802b574:	f843 1d10 	str.w	r1, [r3, #-16]!
 802b578:	9001      	str	r0, [sp, #4]
 802b57a:	4619      	mov	r1, r3
 802b57c:	6813      	ldr	r3, [r2, #0]
 802b57e:	4798      	blx	r3
 802b580:	9001      	str	r0, [sp, #4]
 802b582:	b358      	cbz	r0, 802b5dc <GUI__GetLineDistX+0x70>
 802b584:	4b19      	ldr	r3, [pc, #100]	; (802b5ec <GUI__GetLineDistX+0x80>)
 802b586:	681b      	ldr	r3, [r3, #0]
 802b588:	69db      	ldr	r3, [r3, #28]
 802b58a:	695b      	ldr	r3, [r3, #20]
 802b58c:	b12b      	cbz	r3, 802b59a <GUI__GetLineDistX+0x2e>
 802b58e:	681b      	ldr	r3, [r3, #0]
 802b590:	b11b      	cbz	r3, 802b59a <GUI__GetLineDistX+0x2e>
 802b592:	9900      	ldr	r1, [sp, #0]
 802b594:	4798      	blx	r3
 802b596:	b004      	add	sp, #16
 802b598:	bd70      	pop	{r4, r5, r6, pc}
 802b59a:	9b00      	ldr	r3, [sp, #0]
 802b59c:	3b01      	subs	r3, #1
 802b59e:	2b00      	cmp	r3, #0
 802b5a0:	9300      	str	r3, [sp, #0]
 802b5a2:	bfa8      	it	ge
 802b5a4:	2400      	movge	r4, #0
 802b5a6:	db1b      	blt.n	802b5e0 <GUI__GetLineDistX+0x74>
 802b5a8:	a801      	add	r0, sp, #4
 802b5aa:	f7f6 f9a9 	bl	8021900 <GUI_UC__GetCharCodeInc>
 802b5ae:	4605      	mov	r5, r0
 802b5b0:	f7ff ff3c 	bl	802b42c <GUI_GetCharDistX>
 802b5b4:	9b00      	ldr	r3, [sp, #0]
 802b5b6:	3b01      	subs	r3, #1
 802b5b8:	2b00      	cmp	r3, #0
 802b5ba:	4404      	add	r4, r0
 802b5bc:	9300      	str	r3, [sp, #0]
 802b5be:	daf3      	bge.n	802b5a8 <GUI__GetLineDistX+0x3c>
 802b5c0:	a904      	add	r1, sp, #16
 802b5c2:	2600      	movs	r6, #0
 802b5c4:	f841 6d04 	str.w	r6, [r1, #-4]!
 802b5c8:	4628      	mov	r0, r5
 802b5ca:	f7ff ff41 	bl	802b450 <GUI_GetCharDistXEx>
 802b5ce:	9b03      	ldr	r3, [sp, #12]
 802b5d0:	4298      	cmp	r0, r3
 802b5d2:	bfb8      	it	lt
 802b5d4:	1a1e      	sublt	r6, r3, r0
 802b5d6:	1930      	adds	r0, r6, r4
 802b5d8:	b004      	add	sp, #16
 802b5da:	bd70      	pop	{r4, r5, r6, pc}
 802b5dc:	b004      	add	sp, #16
 802b5de:	bd70      	pop	{r4, r5, r6, pc}
 802b5e0:	2500      	movs	r5, #0
 802b5e2:	462c      	mov	r4, r5
 802b5e4:	e7ec      	b.n	802b5c0 <GUI__GetLineDistX+0x54>
 802b5e6:	bf00      	nop
 802b5e8:	2000021c 	.word	0x2000021c
 802b5ec:	200000e8 	.word	0x200000e8

0802b5f0 <GUI__DispLine>:
 802b5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 802b5f2:	4b2a      	ldr	r3, [pc, #168]	; (802b69c <GUI__DispLine+0xac>)
 802b5f4:	681b      	ldr	r3, [r3, #0]
 802b5f6:	b083      	sub	sp, #12
 802b5f8:	4604      	mov	r4, r0
 802b5fa:	460d      	mov	r5, r1
 802b5fc:	b17b      	cbz	r3, 802b61e <GUI__DispLine+0x2e>
 802b5fe:	2000      	movs	r0, #0
 802b600:	f7fc fcf8 	bl	8027ff4 <WM__InitIVRSearch>
 802b604:	b148      	cbz	r0, 802b61a <GUI__DispLine+0x2a>
 802b606:	466e      	mov	r6, sp
 802b608:	4632      	mov	r2, r6
 802b60a:	4629      	mov	r1, r5
 802b60c:	4620      	mov	r0, r4
 802b60e:	f7ff ff35 	bl	802b47c <_DispLine>
 802b612:	f7fc fbc9 	bl	8027da8 <WM__GetNextIVR>
 802b616:	2800      	cmp	r0, #0
 802b618:	d1f6      	bne.n	802b608 <GUI__DispLine+0x18>
 802b61a:	b003      	add	sp, #12
 802b61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b61e:	6810      	ldr	r0, [r2, #0]
 802b620:	6851      	ldr	r1, [r2, #4]
 802b622:	4f1f      	ldr	r7, [pc, #124]	; (802b6a0 <GUI__DispLine+0xb0>)
 802b624:	466b      	mov	r3, sp
 802b626:	c303      	stmia	r3!, {r0, r1}
 802b628:	683b      	ldr	r3, [r7, #0]
 802b62a:	f8bd 0000 	ldrh.w	r0, [sp]
 802b62e:	f8b3 e04c 	ldrh.w	lr, [r3, #76]	; 0x4c
 802b632:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 802b636:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 802b63a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 802b63e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 802b642:	4470      	add	r0, lr
 802b644:	4432      	add	r2, r6
 802b646:	4433      	add	r3, r6
 802b648:	4471      	add	r1, lr
 802b64a:	f8ad 0000 	strh.w	r0, [sp]
 802b64e:	4668      	mov	r0, sp
 802b650:	466e      	mov	r6, sp
 802b652:	f8ad 1004 	strh.w	r1, [sp, #4]
 802b656:	f8ad 2002 	strh.w	r2, [sp, #2]
 802b65a:	f8ad 3006 	strh.w	r3, [sp, #6]
 802b65e:	f7fc fcc9 	bl	8027ff4 <WM__InitIVRSearch>
 802b662:	b950      	cbnz	r0, 802b67a <GUI__DispLine+0x8a>
 802b664:	683b      	ldr	r3, [r7, #0]
 802b666:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 802b668:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 802b66a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 802b66c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 802b66e:	1b09      	subs	r1, r1, r4
 802b670:	1a12      	subs	r2, r2, r0
 802b672:	8459      	strh	r1, [r3, #34]	; 0x22
 802b674:	849a      	strh	r2, [r3, #36]	; 0x24
 802b676:	b003      	add	sp, #12
 802b678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802b67a:	683b      	ldr	r3, [r7, #0]
 802b67c:	f8bd 1000 	ldrh.w	r1, [sp]
 802b680:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 802b684:	8459      	strh	r1, [r3, #34]	; 0x22
 802b686:	849a      	strh	r2, [r3, #36]	; 0x24
 802b688:	4629      	mov	r1, r5
 802b68a:	4632      	mov	r2, r6
 802b68c:	4620      	mov	r0, r4
 802b68e:	f7ff fef5 	bl	802b47c <_DispLine>
 802b692:	f7fc fb89 	bl	8027da8 <WM__GetNextIVR>
 802b696:	2800      	cmp	r0, #0
 802b698:	d1ef      	bne.n	802b67a <GUI__DispLine+0x8a>
 802b69a:	e7e3      	b.n	802b664 <GUI__DispLine+0x74>
 802b69c:	2003086c 	.word	0x2003086c
 802b6a0:	200000e8 	.word	0x200000e8

0802b6a4 <GUIMONO_DispChar>:
 802b6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b6a8:	4e4f      	ldr	r6, [pc, #316]	; (802b7e8 <GUIMONO_DispChar+0x144>)
 802b6aa:	6833      	ldr	r3, [r6, #0]
 802b6ac:	69da      	ldr	r2, [r3, #28]
 802b6ae:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 802b6b2:	69d4      	ldr	r4, [r2, #28]
 802b6b4:	f8b4 b00c 	ldrh.w	fp, [r4, #12]
 802b6b8:	4583      	cmp	fp, r0
 802b6ba:	b08b      	sub	sp, #44	; 0x2c
 802b6bc:	d87d      	bhi.n	802b7ba <GUIMONO_DispChar+0x116>
 802b6be:	89e1      	ldrh	r1, [r4, #14]
 802b6c0:	4281      	cmp	r1, r0
 802b6c2:	d37a      	bcc.n	802b7ba <GUIMONO_DispChar+0x116>
 802b6c4:	6821      	ldr	r1, [r4, #0]
 802b6c6:	9108      	str	r1, [sp, #32]
 802b6c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 802b6cc:	ebcb 0b00 	rsb	fp, fp, r0
 802b6d0:	9107      	str	r1, [sp, #28]
 802b6d2:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 802b6d6:	d06a      	beq.n	802b7ae <GUIMONO_DispChar+0x10a>
 802b6d8:	7e17      	ldrb	r7, [r2, #24]
 802b6da:	f9b3 802a 	ldrsh.w	r8, [r3, #42]	; 0x2a
 802b6de:	7ca2      	ldrb	r2, [r4, #18]
 802b6e0:	f9b3 9024 	ldrsh.w	r9, [r3, #36]	; 0x24
 802b6e4:	f894 a010 	ldrb.w	sl, [r4, #16]
 802b6e8:	fb17 f302 	smulbb	r3, r7, r2
 802b6ec:	4640      	mov	r0, r8
 802b6ee:	9306      	str	r3, [sp, #24]
 802b6f0:	f7f7 f8d8 	bl	80228a4 <LCD_SetDrawMode>
 802b6f4:	6833      	ldr	r3, [r6, #0]
 802b6f6:	9a06      	ldr	r2, [sp, #24]
 802b6f8:	9908      	ldr	r1, [sp, #32]
 802b6fa:	9009      	str	r0, [sp, #36]	; 0x24
 802b6fc:	fb02 100b 	mla	r0, r2, fp, r1
 802b700:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802b702:	69db      	ldr	r3, [r3, #28]
 802b704:	9004      	str	r0, [sp, #16]
 802b706:	9205      	str	r2, [sp, #20]
 802b708:	7ca2      	ldrb	r2, [r4, #18]
 802b70a:	9203      	str	r2, [sp, #12]
 802b70c:	f04f 0b01 	mov.w	fp, #1
 802b710:	f8cd b008 	str.w	fp, [sp, #8]
 802b714:	7eda      	ldrb	r2, [r3, #27]
 802b716:	9201      	str	r2, [sp, #4]
 802b718:	7e9b      	ldrb	r3, [r3, #26]
 802b71a:	9300      	str	r3, [sp, #0]
 802b71c:	4628      	mov	r0, r5
 802b71e:	463b      	mov	r3, r7
 802b720:	4652      	mov	r2, sl
 802b722:	4649      	mov	r1, r9
 802b724:	f7f7 fa8c 	bl	8022c40 <LCD_DrawBitmap>
 802b728:	9807      	ldr	r0, [sp, #28]
 802b72a:	3001      	adds	r0, #1
 802b72c:	d01c      	beq.n	802b768 <GUIMONO_DispChar+0xc4>
 802b72e:	f048 0002 	orr.w	r0, r8, #2
 802b732:	f7f7 f8b7 	bl	80228a4 <LCD_SetDrawMode>
 802b736:	4a2c      	ldr	r2, [pc, #176]	; (802b7e8 <GUIMONO_DispChar+0x144>)
 802b738:	9807      	ldr	r0, [sp, #28]
 802b73a:	6812      	ldr	r2, [r2, #0]
 802b73c:	9908      	ldr	r1, [sp, #32]
 802b73e:	9b06      	ldr	r3, [sp, #24]
 802b740:	fb03 1300 	mla	r3, r3, r0, r1
 802b744:	6b91      	ldr	r1, [r2, #56]	; 0x38
 802b746:	69d2      	ldr	r2, [r2, #28]
 802b748:	9105      	str	r1, [sp, #20]
 802b74a:	9304      	str	r3, [sp, #16]
 802b74c:	7ca3      	ldrb	r3, [r4, #18]
 802b74e:	9303      	str	r3, [sp, #12]
 802b750:	f8cd b008 	str.w	fp, [sp, #8]
 802b754:	7ed3      	ldrb	r3, [r2, #27]
 802b756:	9301      	str	r3, [sp, #4]
 802b758:	7e93      	ldrb	r3, [r2, #26]
 802b75a:	9300      	str	r3, [sp, #0]
 802b75c:	4652      	mov	r2, sl
 802b75e:	463b      	mov	r3, r7
 802b760:	4649      	mov	r1, r9
 802b762:	4628      	mov	r0, r5
 802b764:	f7f7 fa6c 	bl	8022c40 <LCD_DrawBitmap>
 802b768:	6833      	ldr	r3, [r6, #0]
 802b76a:	4f1f      	ldr	r7, [pc, #124]	; (802b7e8 <GUIMONO_DispChar+0x144>)
 802b76c:	69db      	ldr	r3, [r3, #28]
 802b76e:	7e5a      	ldrb	r2, [r3, #25]
 802b770:	7e1b      	ldrb	r3, [r3, #24]
 802b772:	429a      	cmp	r2, r3
 802b774:	d914      	bls.n	802b7a0 <GUIMONO_DispChar+0xfc>
 802b776:	f1b8 0f02 	cmp.w	r8, #2
 802b77a:	d011      	beq.n	802b7a0 <GUIMONO_DispChar+0xfc>
 802b77c:	f088 0004 	eor.w	r0, r8, #4
 802b780:	f7f7 f890 	bl	80228a4 <LCD_SetDrawMode>
 802b784:	683b      	ldr	r3, [r7, #0]
 802b786:	69db      	ldr	r3, [r3, #28]
 802b788:	7e18      	ldrb	r0, [r3, #24]
 802b78a:	7ed9      	ldrb	r1, [r3, #27]
 802b78c:	7e9a      	ldrb	r2, [r3, #26]
 802b78e:	7e5b      	ldrb	r3, [r3, #25]
 802b790:	fb00 9101 	mla	r1, r0, r1, r9
 802b794:	fb0a 5202 	mla	r2, sl, r2, r5
 802b798:	444b      	add	r3, r9
 802b79a:	4628      	mov	r0, r5
 802b79c:	f7f7 f912 	bl	80229c4 <LCD_FillRect>
 802b7a0:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 802b7a4:	f7f7 f87e 	bl	80228a4 <LCD_SetDrawMode>
 802b7a8:	6833      	ldr	r3, [r6, #0]
 802b7aa:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 802b7ae:	7c62      	ldrb	r2, [r4, #17]
 802b7b0:	4415      	add	r5, r2
 802b7b2:	845d      	strh	r5, [r3, #34]	; 0x22
 802b7b4:	b00b      	add	sp, #44	; 0x2c
 802b7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b7ba:	68a1      	ldr	r1, [r4, #8]
 802b7bc:	2900      	cmp	r1, #0
 802b7be:	d0f6      	beq.n	802b7ae <GUIMONO_DispChar+0x10a>
 802b7c0:	880f      	ldrh	r7, [r1, #0]
 802b7c2:	42b8      	cmp	r0, r7
 802b7c4:	d3f3      	bcc.n	802b7ae <GUIMONO_DispChar+0x10a>
 802b7c6:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 802b7ca:	4586      	cmp	lr, r0
 802b7cc:	d3ef      	bcc.n	802b7ae <GUIMONO_DispChar+0x10a>
 802b7ce:	6849      	ldr	r1, [r1, #4]
 802b7d0:	1bc0      	subs	r0, r0, r7
 802b7d2:	b280      	uxth	r0, r0
 802b7d4:	6867      	ldr	r7, [r4, #4]
 802b7d6:	9708      	str	r7, [sp, #32]
 802b7d8:	eb01 0780 	add.w	r7, r1, r0, lsl #2
 802b7dc:	f931 b020 	ldrsh.w	fp, [r1, r0, lsl #2]
 802b7e0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 802b7e4:	9107      	str	r1, [sp, #28]
 802b7e6:	e774      	b.n	802b6d2 <GUIMONO_DispChar+0x2e>
 802b7e8:	200000e8 	.word	0x200000e8

0802b7ec <GUIMONO_GetCharDistX>:
 802b7ec:	4b04      	ldr	r3, [pc, #16]	; (802b800 <GUIMONO_GetCharDistX+0x14>)
 802b7ee:	681b      	ldr	r3, [r3, #0]
 802b7f0:	69db      	ldr	r3, [r3, #28]
 802b7f2:	69db      	ldr	r3, [r3, #28]
 802b7f4:	b109      	cbz	r1, 802b7fa <GUIMONO_GetCharDistX+0xe>
 802b7f6:	7c1a      	ldrb	r2, [r3, #16]
 802b7f8:	600a      	str	r2, [r1, #0]
 802b7fa:	7c58      	ldrb	r0, [r3, #17]
 802b7fc:	4770      	bx	lr
 802b7fe:	bf00      	nop
 802b800:	200000e8 	.word	0x200000e8

0802b804 <GUIMONO_GetFontInfo>:
 802b804:	2302      	movs	r3, #2
 802b806:	800b      	strh	r3, [r1, #0]
 802b808:	4770      	bx	lr
 802b80a:	bf00      	nop

0802b80c <GUIMONO_IsInFont>:
 802b80c:	69c3      	ldr	r3, [r0, #28]
 802b80e:	899a      	ldrh	r2, [r3, #12]
 802b810:	428a      	cmp	r2, r1
 802b812:	d802      	bhi.n	802b81a <GUIMONO_IsInFont+0xe>
 802b814:	89da      	ldrh	r2, [r3, #14]
 802b816:	428a      	cmp	r2, r1
 802b818:	d211      	bcs.n	802b83e <GUIMONO_IsInFont+0x32>
 802b81a:	6898      	ldr	r0, [r3, #8]
 802b81c:	b118      	cbz	r0, 802b826 <GUIMONO_IsInFont+0x1a>
 802b81e:	8803      	ldrh	r3, [r0, #0]
 802b820:	4299      	cmp	r1, r3
 802b822:	d201      	bcs.n	802b828 <GUIMONO_IsInFont+0x1c>
 802b824:	2000      	movs	r0, #0
 802b826:	4770      	bx	lr
 802b828:	8842      	ldrh	r2, [r0, #2]
 802b82a:	428a      	cmp	r2, r1
 802b82c:	d3fa      	bcc.n	802b824 <GUIMONO_IsInFont+0x18>
 802b82e:	1ac9      	subs	r1, r1, r3
 802b830:	6843      	ldr	r3, [r0, #4]
 802b832:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 802b836:	43c0      	mvns	r0, r0
 802b838:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 802b83c:	4770      	bx	lr
 802b83e:	2001      	movs	r0, #1
 802b840:	4770      	bx	lr
 802b842:	bf00      	nop

0802b844 <GUIPROP_DispChar>:
 802b844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b848:	4d3e      	ldr	r5, [pc, #248]	; (802b944 <GUIPROP_DispChar+0x100>)
 802b84a:	682b      	ldr	r3, [r5, #0]
 802b84c:	69da      	ldr	r2, [r3, #28]
 802b84e:	f9b3 602a 	ldrsh.w	r6, [r3, #42]	; 0x2a
 802b852:	69d3      	ldr	r3, [r2, #28]
 802b854:	b089      	sub	sp, #36	; 0x24
 802b856:	b143      	cbz	r3, 802b86a <GUIPROP_DispChar+0x26>
 802b858:	881a      	ldrh	r2, [r3, #0]
 802b85a:	4290      	cmp	r0, r2
 802b85c:	d302      	bcc.n	802b864 <GUIPROP_DispChar+0x20>
 802b85e:	8859      	ldrh	r1, [r3, #2]
 802b860:	4281      	cmp	r1, r0
 802b862:	d205      	bcs.n	802b870 <GUIPROP_DispChar+0x2c>
 802b864:	689b      	ldr	r3, [r3, #8]
 802b866:	2b00      	cmp	r3, #0
 802b868:	d1f6      	bne.n	802b858 <GUIPROP_DispChar+0x14>
 802b86a:	b009      	add	sp, #36	; 0x24
 802b86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b870:	f8d3 8004 	ldr.w	r8, [r3, #4]
 802b874:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 802b944 <GUIPROP_DispChar+0x100>
 802b878:	1a84      	subs	r4, r0, r2
 802b87a:	eb08 07c4 	add.w	r7, r8, r4, lsl #3
 802b87e:	4630      	mov	r0, r6
 802b880:	f897 b002 	ldrb.w	fp, [r7, #2]
 802b884:	f7f7 f80e 	bl	80228a4 <LCD_SetDrawMode>
 802b888:	4682      	mov	sl, r0
 802b88a:	6828      	ldr	r0, [r5, #0]
 802b88c:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
 802b890:	f8d0 e01c 	ldr.w	lr, [r0, #28]
 802b894:	f8d0 c038 	ldr.w	ip, [r0, #56]	; 0x38
 802b898:	f89e 3018 	ldrb.w	r3, [lr, #24]
 802b89c:	f9b0 1024 	ldrsh.w	r1, [r0, #36]	; 0x24
 802b8a0:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 802b8a4:	f8cd c014 	str.w	ip, [sp, #20]
 802b8a8:	9306      	str	r3, [sp, #24]
 802b8aa:	f04f 0c01 	mov.w	ip, #1
 802b8ae:	687b      	ldr	r3, [r7, #4]
 802b8b0:	9304      	str	r3, [sp, #16]
 802b8b2:	f8cd b00c 	str.w	fp, [sp, #12]
 802b8b6:	f8cd c008 	str.w	ip, [sp, #8]
 802b8ba:	f89e c01b 	ldrb.w	ip, [lr, #27]
 802b8be:	f8cd c004 	str.w	ip, [sp, #4]
 802b8c2:	f89e e01a 	ldrb.w	lr, [lr, #26]
 802b8c6:	9b06      	ldr	r3, [sp, #24]
 802b8c8:	f8cd e000 	str.w	lr, [sp]
 802b8cc:	f7f7 f9b8 	bl	8022c40 <LCD_DrawBitmap>
 802b8d0:	682b      	ldr	r3, [r5, #0]
 802b8d2:	69da      	ldr	r2, [r3, #28]
 802b8d4:	7e53      	ldrb	r3, [r2, #25]
 802b8d6:	f892 b018 	ldrb.w	fp, [r2, #24]
 802b8da:	455b      	cmp	r3, fp
 802b8dc:	d923      	bls.n	802b926 <GUIPROP_DispChar+0xe2>
 802b8de:	2e02      	cmp	r6, #2
 802b8e0:	9306      	str	r3, [sp, #24]
 802b8e2:	d020      	beq.n	802b926 <GUIPROP_DispChar+0xe2>
 802b8e4:	7ed1      	ldrb	r1, [r2, #27]
 802b8e6:	9107      	str	r1, [sp, #28]
 802b8e8:	f7f4 fbce 	bl	8020088 <GUI_GetColor>
 802b8ec:	4606      	mov	r6, r0
 802b8ee:	f7f4 fbbf 	bl	8020070 <GUI_GetBkColor>
 802b8f2:	f7f4 fd2f 	bl	8020354 <GUI_SetColor>
 802b8f6:	f8d9 2000 	ldr.w	r2, [r9]
 802b8fa:	f818 c034 	ldrb.w	ip, [r8, r4, lsl #3]
 802b8fe:	69d4      	ldr	r4, [r2, #28]
 802b900:	f9b2 0022 	ldrsh.w	r0, [r2, #34]	; 0x22
 802b904:	f894 e01b 	ldrb.w	lr, [r4, #27]
 802b908:	9907      	ldr	r1, [sp, #28]
 802b90a:	f9b2 4024 	ldrsh.w	r4, [r2, #36]	; 0x24
 802b90e:	9b06      	ldr	r3, [sp, #24]
 802b910:	fb0c 020e 	mla	r2, ip, lr, r0
 802b914:	fb01 4303 	mla	r3, r1, r3, r4
 802b918:	fb01 410b 	mla	r1, r1, fp, r4
 802b91c:	f7f7 f852 	bl	80229c4 <LCD_FillRect>
 802b920:	4630      	mov	r0, r6
 802b922:	f7f4 fd17 	bl	8020354 <GUI_SetColor>
 802b926:	4650      	mov	r0, sl
 802b928:	f7f6 ffbc 	bl	80228a4 <LCD_SetDrawMode>
 802b92c:	682b      	ldr	r3, [r5, #0]
 802b92e:	7879      	ldrb	r1, [r7, #1]
 802b930:	69d8      	ldr	r0, [r3, #28]
 802b932:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 802b934:	7e80      	ldrb	r0, [r0, #26]
 802b936:	fb00 2201 	mla	r2, r0, r1, r2
 802b93a:	845a      	strh	r2, [r3, #34]	; 0x22
 802b93c:	b009      	add	sp, #36	; 0x24
 802b93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b942:	bf00      	nop
 802b944:	200000e8 	.word	0x200000e8

0802b948 <GUIPROP_GetCharDistX>:
 802b948:	4b11      	ldr	r3, [pc, #68]	; (802b990 <GUIPROP_GetCharDistX+0x48>)
 802b94a:	b470      	push	{r4, r5, r6}
 802b94c:	681b      	ldr	r3, [r3, #0]
 802b94e:	69dd      	ldr	r5, [r3, #28]
 802b950:	69eb      	ldr	r3, [r5, #28]
 802b952:	b143      	cbz	r3, 802b966 <GUIPROP_GetCharDistX+0x1e>
 802b954:	881a      	ldrh	r2, [r3, #0]
 802b956:	4290      	cmp	r0, r2
 802b958:	d302      	bcc.n	802b960 <GUIPROP_GetCharDistX+0x18>
 802b95a:	885c      	ldrh	r4, [r3, #2]
 802b95c:	4284      	cmp	r4, r0
 802b95e:	d205      	bcs.n	802b96c <GUIPROP_GetCharDistX+0x24>
 802b960:	689b      	ldr	r3, [r3, #8]
 802b962:	2b00      	cmp	r3, #0
 802b964:	d1f6      	bne.n	802b954 <GUIPROP_GetCharDistX+0xc>
 802b966:	4618      	mov	r0, r3
 802b968:	bc70      	pop	{r4, r5, r6}
 802b96a:	4770      	bx	lr
 802b96c:	685e      	ldr	r6, [r3, #4]
 802b96e:	7eac      	ldrb	r4, [r5, #26]
 802b970:	1a82      	subs	r2, r0, r2
 802b972:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 802b976:	785b      	ldrb	r3, [r3, #1]
 802b978:	fb13 f004 	smulbb	r0, r3, r4
 802b97c:	2900      	cmp	r1, #0
 802b97e:	d0f3      	beq.n	802b968 <GUIPROP_GetCharDistX+0x20>
 802b980:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
 802b984:	fb14 f303 	smulbb	r3, r4, r3
 802b988:	600b      	str	r3, [r1, #0]
 802b98a:	bc70      	pop	{r4, r5, r6}
 802b98c:	4770      	bx	lr
 802b98e:	bf00      	nop
 802b990:	200000e8 	.word	0x200000e8

0802b994 <GUIPROP_GetFontInfo>:
 802b994:	2301      	movs	r3, #1
 802b996:	800b      	strh	r3, [r1, #0]
 802b998:	4770      	bx	lr
 802b99a:	bf00      	nop

0802b99c <GUIPROP_IsInFont>:
 802b99c:	69c0      	ldr	r0, [r0, #28]
 802b99e:	b150      	cbz	r0, 802b9b6 <GUIPROP_IsInFont+0x1a>
 802b9a0:	8803      	ldrh	r3, [r0, #0]
 802b9a2:	428b      	cmp	r3, r1
 802b9a4:	d802      	bhi.n	802b9ac <GUIPROP_IsInFont+0x10>
 802b9a6:	8843      	ldrh	r3, [r0, #2]
 802b9a8:	428b      	cmp	r3, r1
 802b9aa:	d203      	bcs.n	802b9b4 <GUIPROP_IsInFont+0x18>
 802b9ac:	6880      	ldr	r0, [r0, #8]
 802b9ae:	2800      	cmp	r0, #0
 802b9b0:	d1f6      	bne.n	802b9a0 <GUIPROP_IsInFont+0x4>
 802b9b2:	4770      	bx	lr
 802b9b4:	2001      	movs	r0, #1
 802b9b6:	4770      	bx	lr

0802b9b8 <GL_FillCircle>:
 802b9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b9bc:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 802ba9c <GL_FillCircle+0xe4>
 802b9c0:	4e35      	ldr	r6, [pc, #212]	; (802ba98 <GL_FillCircle+0xe0>)
 802b9c2:	f8db 4000 	ldr.w	r4, [fp]
 802b9c6:	4615      	mov	r5, r2
 802b9c8:	f240 22c3 	movw	r2, #707	; 0x2c3
 802b9cc:	fb02 f205 	mul.w	r2, r2, r5
 802b9d0:	4603      	mov	r3, r0
 802b9d2:	b085      	sub	sp, #20
 802b9d4:	fb86 0902 	smull	r0, r9, r6, r2
 802b9d8:	6e60      	ldr	r0, [r4, #100]	; 0x64
 802b9da:	9302      	str	r3, [sp, #8]
 802b9dc:	17d2      	asrs	r2, r2, #31
 802b9de:	ebc2 19a9 	rsb	r9, r2, r9, asr #6
 802b9e2:	18ef      	adds	r7, r5, r3
 802b9e4:	ebc5 0803 	rsb	r8, r5, r3
 802b9e8:	eb05 7ed5 	add.w	lr, r5, r5, lsr #31
 802b9ec:	fb05 f605 	mul.w	r6, r5, r5
 802b9f0:	6804      	ldr	r4, [r0, #0]
 802b9f2:	eb06 036e 	add.w	r3, r6, lr, asr #1
 802b9f6:	f109 0901 	add.w	r9, r9, #1
 802b9fa:	463a      	mov	r2, r7
 802b9fc:	4640      	mov	r0, r8
 802b9fe:	9301      	str	r3, [sp, #4]
 802ba00:	468a      	mov	sl, r1
 802ba02:	47a0      	blx	r4
 802ba04:	f1b9 0f00 	cmp.w	r9, #0
 802ba08:	dd42      	ble.n	802ba90 <GL_FillCircle+0xd8>
 802ba0a:	9a02      	ldr	r2, [sp, #8]
 802ba0c:	2401      	movs	r4, #1
 802ba0e:	1913      	adds	r3, r2, r4
 802ba10:	9302      	str	r3, [sp, #8]
 802ba12:	1e53      	subs	r3, r2, #1
 802ba14:	9303      	str	r3, [sp, #12]
 802ba16:	4633      	mov	r3, r6
 802ba18:	4616      	mov	r6, r2
 802ba1a:	e01a      	b.n	802ba52 <GL_FillCircle+0x9a>
 802ba1c:	3d01      	subs	r5, #1
 802ba1e:	19af      	adds	r7, r5, r6
 802ba20:	ebc5 0806 	rsb	r8, r5, r6
 802ba24:	f8db 3000 	ldr.w	r3, [fp]
 802ba28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802ba2a:	eb0a 0104 	add.w	r1, sl, r4
 802ba2e:	463a      	mov	r2, r7
 802ba30:	681b      	ldr	r3, [r3, #0]
 802ba32:	4640      	mov	r0, r8
 802ba34:	4798      	blx	r3
 802ba36:	f8db 3000 	ldr.w	r3, [fp]
 802ba3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802ba3c:	ebc4 010a 	rsb	r1, r4, sl
 802ba40:	463a      	mov	r2, r7
 802ba42:	681b      	ldr	r3, [r3, #0]
 802ba44:	4640      	mov	r0, r8
 802ba46:	3401      	adds	r4, #1
 802ba48:	4798      	blx	r3
 802ba4a:	45a1      	cmp	r9, r4
 802ba4c:	db20      	blt.n	802ba90 <GL_FillCircle+0xd8>
 802ba4e:	fb05 f305 	mul.w	r3, r5, r5
 802ba52:	9a01      	ldr	r2, [sp, #4]
 802ba54:	fb04 3304 	mla	r3, r4, r4, r3
 802ba58:	429a      	cmp	r2, r3
 802ba5a:	dae3      	bge.n	802ba24 <GL_FillCircle+0x6c>
 802ba5c:	45a9      	cmp	r9, r5
 802ba5e:	dadd      	bge.n	802ba1c <GL_FillCircle+0x64>
 802ba60:	9a02      	ldr	r2, [sp, #8]
 802ba62:	f8db 3000 	ldr.w	r3, [fp]
 802ba66:	1b17      	subs	r7, r2, r4
 802ba68:	9a03      	ldr	r2, [sp, #12]
 802ba6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802ba6c:	eb02 0804 	add.w	r8, r2, r4
 802ba70:	4638      	mov	r0, r7
 802ba72:	4642      	mov	r2, r8
 802ba74:	eb0a 0105 	add.w	r1, sl, r5
 802ba78:	681b      	ldr	r3, [r3, #0]
 802ba7a:	4798      	blx	r3
 802ba7c:	f8db 3000 	ldr.w	r3, [fp]
 802ba80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 802ba82:	4642      	mov	r2, r8
 802ba84:	4638      	mov	r0, r7
 802ba86:	681b      	ldr	r3, [r3, #0]
 802ba88:	ebc5 010a 	rsb	r1, r5, sl
 802ba8c:	4798      	blx	r3
 802ba8e:	e7c5      	b.n	802ba1c <GL_FillCircle+0x64>
 802ba90:	b005      	add	sp, #20
 802ba92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ba96:	bf00      	nop
 802ba98:	10624dd3 	.word	0x10624dd3
 802ba9c:	200000e8 	.word	0x200000e8

0802baa0 <GUI_CURSOR_SetPositionEx>:
 802baa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802baa4:	4614      	mov	r4, r2
 802baa6:	4606      	mov	r6, r0
 802baa8:	4688      	mov	r8, r1
 802baaa:	f7f5 fe07 	bl	80216bc <GUI_Lock>
 802baae:	4620      	mov	r0, r4
 802bab0:	f7f5 fd78 	bl	80215a4 <GUI_GetCursorLayer>
 802bab4:	b9e8      	cbnz	r0, 802baf2 <GUI_CURSOR_SetPositionEx+0x52>
 802bab6:	00a7      	lsls	r7, r4, #2
 802bab8:	4d1b      	ldr	r5, [pc, #108]	; (802bb28 <GUI_CURSOR_SetPositionEx+0x88>)
 802baba:	193b      	adds	r3, r7, r4
 802babc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 802bac0:	68da      	ldr	r2, [r3, #12]
 802bac2:	42b2      	cmp	r2, r6
 802bac4:	d106      	bne.n	802bad4 <GUI_CURSOR_SetPositionEx+0x34>
 802bac6:	691b      	ldr	r3, [r3, #16]
 802bac8:	4543      	cmp	r3, r8
 802baca:	d103      	bne.n	802bad4 <GUI_CURSOR_SetPositionEx+0x34>
 802bacc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802bad0:	f7f5 bdea 	b.w	80216a8 <GUI_Unlock>
 802bad4:	193b      	adds	r3, r7, r4
 802bad6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 802bada:	6958      	ldr	r0, [r3, #20]
 802badc:	b9d0      	cbnz	r0, 802bb14 <GUI_CURSOR_SetPositionEx+0x74>
 802bade:	443c      	add	r4, r7
 802bae0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 802bae4:	60e6      	str	r6, [r4, #12]
 802bae6:	f8c4 8010 	str.w	r8, [r4, #16]
 802baea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802baee:	f7f5 bddb 	b.w	80216a8 <GUI_Unlock>
 802baf2:	4b0d      	ldr	r3, [pc, #52]	; (802bb28 <GUI_CURSOR_SetPositionEx+0x88>)
 802baf4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 802baf8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802bafc:	6863      	ldr	r3, [r4, #4]
 802bafe:	689a      	ldr	r2, [r3, #8]
 802bb00:	6859      	ldr	r1, [r3, #4]
 802bb02:	ebc2 0208 	rsb	r2, r2, r8
 802bb06:	1a71      	subs	r1, r6, r1
 802bb08:	f7f5 fd8a 	bl	8021620 <GUI_SetLayerPosEx>
 802bb0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802bb10:	f7f5 bdca 	b.w	80216a8 <GUI_Unlock>
 802bb14:	685b      	ldr	r3, [r3, #4]
 802bb16:	689a      	ldr	r2, [r3, #8]
 802bb18:	6859      	ldr	r1, [r3, #4]
 802bb1a:	ebc2 0208 	rsb	r2, r2, r8
 802bb1e:	1a71      	subs	r1, r6, r1
 802bb20:	f000 f9c2 	bl	802bea8 <GUI_SPRITE_SetPosition>
 802bb24:	e7db      	b.n	802bade <GUI_CURSOR_SetPositionEx+0x3e>
 802bb26:	bf00      	nop
 802bb28:	2002e43c 	.word	0x2002e43c

0802bb2c <_OnExit>:
 802bb2c:	4b03      	ldr	r3, [pc, #12]	; (802bb3c <_OnExit+0x10>)
 802bb2e:	4904      	ldr	r1, [pc, #16]	; (802bb40 <_OnExit+0x14>)
 802bb30:	2200      	movs	r2, #0
 802bb32:	600b      	str	r3, [r1, #0]
 802bb34:	604b      	str	r3, [r1, #4]
 802bb36:	649a      	str	r2, [r3, #72]	; 0x48
 802bb38:	64da      	str	r2, [r3, #76]	; 0x4c
 802bb3a:	4770      	bx	lr
 802bb3c:	2002e488 	.word	0x2002e488
 802bb40:	20000220 	.word	0x20000220

0802bb44 <GUI_PID_GetState>:
 802bb44:	b470      	push	{r4, r5, r6}
 802bb46:	4d10      	ldr	r5, [pc, #64]	; (802bb88 <GUI_PID_GetState+0x44>)
 802bb48:	682b      	ldr	r3, [r5, #0]
 802bb4a:	686a      	ldr	r2, [r5, #4]
 802bb4c:	4293      	cmp	r3, r2
 802bb4e:	4604      	mov	r4, r0
 802bb50:	d00f      	beq.n	802bb72 <GUI_PID_GetState+0x2e>
 802bb52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802bb56:	4e0d      	ldr	r6, [pc, #52]	; (802bb8c <GUI_PID_GetState+0x48>)
 802bb58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 802bb5c:	42b3      	cmp	r3, r6
 802bb5e:	bf14      	ite	ne
 802bb60:	330c      	addne	r3, #12
 802bb62:	3b3c      	subeq	r3, #60	; 0x3c
 802bb64:	602b      	str	r3, [r5, #0]
 802bb66:	7a20      	ldrb	r0, [r4, #8]
 802bb68:	3000      	adds	r0, #0
 802bb6a:	bf18      	it	ne
 802bb6c:	2001      	movne	r0, #1
 802bb6e:	bc70      	pop	{r4, r5, r6}
 802bb70:	4770      	bx	lr
 802bb72:	4a07      	ldr	r2, [pc, #28]	; (802bb90 <GUI_PID_GetState+0x4c>)
 802bb74:	4293      	cmp	r3, r2
 802bb76:	bf06      	itte	eq
 802bb78:	333c      	addeq	r3, #60	; 0x3c
 802bb7a:	e893 0007 	ldmiaeq.w	r3, {r0, r1, r2}
 802bb7e:	e913 0007 	ldmdbne	r3, {r0, r1, r2}
 802bb82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 802bb86:	e7ee      	b.n	802bb66 <GUI_PID_GetState+0x22>
 802bb88:	20000220 	.word	0x20000220
 802bb8c:	2002e4c4 	.word	0x2002e4c4
 802bb90:	2002e488 	.word	0x2002e488

0802bb94 <GUI_PID_StoreState>:
 802bb94:	b5f0      	push	{r4, r5, r6, r7, lr}
 802bb96:	4e37      	ldr	r6, [pc, #220]	; (802bc74 <GUI_PID_StoreState+0xe0>)
 802bb98:	6d33      	ldr	r3, [r6, #80]	; 0x50
 802bb9a:	b085      	sub	sp, #20
 802bb9c:	4604      	mov	r4, r0
 802bb9e:	2b00      	cmp	r3, #0
 802bba0:	d055      	beq.n	802bc4e <GUI_PID_StoreState+0xba>
 802bba2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 802bba6:	4c34      	ldr	r4, [pc, #208]	; (802bc78 <GUI_PID_StoreState+0xe4>)
 802bba8:	4d34      	ldr	r5, [pc, #208]	; (802bc7c <GUI_PID_StoreState+0xe8>)
 802bbaa:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 802bbac:	6025      	str	r5, [r4, #0]
 802bbae:	ad01      	add	r5, sp, #4
 802bbb0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 802bbb4:	b10b      	cbz	r3, 802bbba <GUI_PID_StoreState+0x26>
 802bbb6:	4628      	mov	r0, r5
 802bbb8:	4798      	blx	r3
 802bbba:	4f31      	ldr	r7, [pc, #196]	; (802bc80 <GUI_PID_StoreState+0xec>)
 802bbbc:	f8d7 e000 	ldr.w	lr, [r7]
 802bbc0:	687b      	ldr	r3, [r7, #4]
 802bbc2:	459e      	cmp	lr, r3
 802bbc4:	d038      	beq.n	802bc38 <GUI_PID_StoreState+0xa4>
 802bbc6:	42b3      	cmp	r3, r6
 802bbc8:	4c2a      	ldr	r4, [pc, #168]	; (802bc74 <GUI_PID_StoreState+0xe0>)
 802bbca:	f89d 200c 	ldrb.w	r2, [sp, #12]
 802bbce:	d035      	beq.n	802bc3c <GUI_PID_StoreState+0xa8>
 802bbd0:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 802bbd4:	4291      	cmp	r1, r2
 802bbd6:	d012      	beq.n	802bbfe <GUI_PID_StoreState+0x6a>
 802bbd8:	343c      	adds	r4, #60	; 0x3c
 802bbda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802bbde:	42a3      	cmp	r3, r4
 802bbe0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802bbe4:	d01b      	beq.n	802bc1e <GUI_PID_StoreState+0x8a>
 802bbe6:	330c      	adds	r3, #12
 802bbe8:	459e      	cmp	lr, r3
 802bbea:	607b      	str	r3, [r7, #4]
 802bbec:	d01b      	beq.n	802bc26 <GUI_PID_StoreState+0x92>
 802bbee:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 802bbf0:	b10b      	cbz	r3, 802bbf6 <GUI_PID_StoreState+0x62>
 802bbf2:	4628      	mov	r0, r5
 802bbf4:	4798      	blx	r3
 802bbf6:	f7f5 ffc7 	bl	8021b88 <GUI_SignalEvent>
 802bbfa:	b005      	add	sp, #20
 802bbfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802bbfe:	f1a3 010c 	sub.w	r1, r3, #12
 802bc02:	458e      	cmp	lr, r1
 802bc04:	d0e8      	beq.n	802bbd8 <GUI_PID_StoreState+0x44>
 802bc06:	42a1      	cmp	r1, r4
 802bc08:	d02e      	beq.n	802bc68 <GUI_PID_StoreState+0xd4>
 802bc0a:	343c      	adds	r4, #60	; 0x3c
 802bc0c:	390c      	subs	r1, #12
 802bc0e:	7a09      	ldrb	r1, [r1, #8]
 802bc10:	4291      	cmp	r1, r2
 802bc12:	d1e2      	bne.n	802bbda <GUI_PID_StoreState+0x46>
 802bc14:	42b3      	cmp	r3, r6
 802bc16:	bf14      	ite	ne
 802bc18:	3b0c      	subne	r3, #12
 802bc1a:	4623      	moveq	r3, r4
 802bc1c:	e7dd      	b.n	802bbda <GUI_PID_StoreState+0x46>
 802bc1e:	4b15      	ldr	r3, [pc, #84]	; (802bc74 <GUI_PID_StoreState+0xe0>)
 802bc20:	607b      	str	r3, [r7, #4]
 802bc22:	459e      	cmp	lr, r3
 802bc24:	d1e3      	bne.n	802bbee <GUI_PID_StoreState+0x5a>
 802bc26:	4b17      	ldr	r3, [pc, #92]	; (802bc84 <GUI_PID_StoreState+0xf0>)
 802bc28:	459e      	cmp	lr, r3
 802bc2a:	bf14      	ite	ne
 802bc2c:	f10e 030c 	addne.w	r3, lr, #12
 802bc30:	f1ae 033c 	subeq.w	r3, lr, #60	; 0x3c
 802bc34:	603b      	str	r3, [r7, #0]
 802bc36:	e7da      	b.n	802bbee <GUI_PID_StoreState+0x5a>
 802bc38:	4c12      	ldr	r4, [pc, #72]	; (802bc84 <GUI_PID_StoreState+0xf0>)
 802bc3a:	e7ce      	b.n	802bbda <GUI_PID_StoreState+0x46>
 802bc3c:	f896 1044 	ldrb.w	r1, [r6, #68]	; 0x44
 802bc40:	4291      	cmp	r1, r2
 802bc42:	d00b      	beq.n	802bc5c <GUI_PID_StoreState+0xc8>
 802bc44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 802bc48:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 802bc4c:	e7cb      	b.n	802bbe6 <GUI_PID_StoreState+0x52>
 802bc4e:	4630      	mov	r0, r6
 802bc50:	4b0d      	ldr	r3, [pc, #52]	; (802bc88 <GUI_PID_StoreState+0xf4>)
 802bc52:	f840 3f50 	str.w	r3, [r0, #80]!
 802bc56:	f7f4 fd7d 	bl	8020754 <GUI__RegisterExit>
 802bc5a:	e7a2      	b.n	802bba2 <GUI_PID_StoreState+0xe>
 802bc5c:	f106 043c 	add.w	r4, r6, #60	; 0x3c
 802bc60:	45a6      	cmp	lr, r4
 802bc62:	d0ef      	beq.n	802bc44 <GUI_PID_StoreState+0xb0>
 802bc64:	4621      	mov	r1, r4
 802bc66:	e7d1      	b.n	802bc0c <GUI_PID_StoreState+0x78>
 802bc68:	f101 043c 	add.w	r4, r1, #60	; 0x3c
 802bc6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 802bc70:	e7cd      	b.n	802bc0e <GUI_PID_StoreState+0x7a>
 802bc72:	bf00      	nop
 802bc74:	2002e488 	.word	0x2002e488
 802bc78:	200308bc 	.word	0x200308bc
 802bc7c:	08029889 	.word	0x08029889
 802bc80:	20000220 	.word	0x20000220
 802bc84:	2002e4c4 	.word	0x2002e4c4
 802bc88:	0802bb2d 	.word	0x0802bb2d

0802bc8c <GUI_PID_IsEmpty>:
 802bc8c:	4b03      	ldr	r3, [pc, #12]	; (802bc9c <GUI_PID_IsEmpty+0x10>)
 802bc8e:	cb09      	ldmia	r3, {r0, r3}
 802bc90:	1ac0      	subs	r0, r0, r3
 802bc92:	fab0 f080 	clz	r0, r0
 802bc96:	0940      	lsrs	r0, r0, #5
 802bc98:	4770      	bx	lr
 802bc9a:	bf00      	nop
 802bc9c:	20000220 	.word	0x20000220

0802bca0 <_CreateBuffer.isra.4>:
 802bca0:	680b      	ldr	r3, [r1, #0]
 802bca2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bca6:	4680      	mov	r8, r0
 802bca8:	8818      	ldrh	r0, [r3, #0]
 802bcaa:	300d      	adds	r0, #13
 802bcac:	0080      	lsls	r0, r0, #2
 802bcae:	460d      	mov	r5, r1
 802bcb0:	4616      	mov	r6, r2
 802bcb2:	f7f3 fe61 	bl	801f978 <GUI_ALLOC_AllocNoInit>
 802bcb6:	2800      	cmp	r0, #0
 802bcb8:	d03d      	beq.n	802bd36 <_CreateBuffer.isra.4+0x96>
 802bcba:	4607      	mov	r7, r0
 802bcbc:	f7f3 fe74 	bl	801f9a8 <GUI_ALLOC_LockH>
 802bcc0:	f8d8 3000 	ldr.w	r3, [r8]
 802bcc4:	4604      	mov	r4, r0
 802bcc6:	6998      	ldr	r0, [r3, #24]
 802bcc8:	f7f4 fd6a 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 802bccc:	2800      	cmp	r0, #0
 802bcce:	d032      	beq.n	802bd36 <_CreateBuffer.isra.4+0x96>
 802bcd0:	68c3      	ldr	r3, [r0, #12]
 802bcd2:	2108      	movs	r1, #8
 802bcd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802bcd6:	4798      	blx	r3
 802bcd8:	2802      	cmp	r0, #2
 802bcda:	dc22      	bgt.n	802bd22 <_CreateBuffer.isra.4+0x82>
 802bcdc:	61a0      	str	r0, [r4, #24]
 802bcde:	2201      	movs	r2, #1
 802bce0:	682b      	ldr	r3, [r5, #0]
 802bce2:	6122      	str	r2, [r4, #16]
 802bce4:	881b      	ldrh	r3, [r3, #0]
 802bce6:	61e3      	str	r3, [r4, #28]
 802bce8:	fb03 f302 	mul.w	r3, r3, r2
 802bcec:	6163      	str	r3, [r4, #20]
 802bcee:	f7f3 fe87 	bl	801fa00 <GUI_ALLOC_GetMaxSize>
 802bcf2:	6963      	ldr	r3, [r4, #20]
 802bcf4:	60a7      	str	r7, [r4, #8]
 802bcf6:	4298      	cmp	r0, r3
 802bcf8:	bfb8      	it	lt
 802bcfa:	6160      	strlt	r0, [r4, #20]
 802bcfc:	f104 0234 	add.w	r2, r4, #52	; 0x34
 802bd00:	2300      	movs	r3, #0
 802bd02:	2e01      	cmp	r6, #1
 802bd04:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 802bd08:	6022      	str	r2, [r4, #0]
 802bd0a:	60e3      	str	r3, [r4, #12]
 802bd0c:	d018      	beq.n	802bd40 <_CreateBuffer.isra.4+0xa0>
 802bd0e:	69e3      	ldr	r3, [r4, #28]
 802bd10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802bd14:	3b01      	subs	r3, #1
 802bd16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802bd1a:	6063      	str	r3, [r4, #4]
 802bd1c:	4620      	mov	r0, r4
 802bd1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bd22:	2804      	cmp	r0, #4
 802bd24:	dd0a      	ble.n	802bd3c <_CreateBuffer.isra.4+0x9c>
 802bd26:	2808      	cmp	r0, #8
 802bd28:	dd0e      	ble.n	802bd48 <_CreateBuffer.isra.4+0xa8>
 802bd2a:	2810      	cmp	r0, #16
 802bd2c:	dd0e      	ble.n	802bd4c <_CreateBuffer.isra.4+0xac>
 802bd2e:	2320      	movs	r3, #32
 802bd30:	61a3      	str	r3, [r4, #24]
 802bd32:	2204      	movs	r2, #4
 802bd34:	e7d4      	b.n	802bce0 <_CreateBuffer.isra.4+0x40>
 802bd36:	2000      	movs	r0, #0
 802bd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bd3c:	2004      	movs	r0, #4
 802bd3e:	e7cd      	b.n	802bcdc <_CreateBuffer.isra.4+0x3c>
 802bd40:	6062      	str	r2, [r4, #4]
 802bd42:	4620      	mov	r0, r4
 802bd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bd48:	2008      	movs	r0, #8
 802bd4a:	e7c7      	b.n	802bcdc <_CreateBuffer.isra.4+0x3c>
 802bd4c:	2310      	movs	r3, #16
 802bd4e:	61a3      	str	r3, [r4, #24]
 802bd50:	2202      	movs	r2, #2
 802bd52:	e7c5      	b.n	802bce0 <_CreateBuffer.isra.4+0x40>

0802bd54 <_SetBkIndexBuffered>:
 802bd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bd58:	b086      	sub	sp, #24
 802bd5a:	460e      	mov	r6, r1
 802bd5c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802bd5e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802bd60:	428d      	cmp	r5, r1
 802bd62:	4607      	mov	r7, r0
 802bd64:	4690      	mov	r8, r2
 802bd66:	d040      	beq.n	802bdea <_SetBkIndexBuffered+0x96>
 802bd68:	68e1      	ldr	r1, [r4, #12]
 802bd6a:	b369      	cbz	r1, 802bdc8 <_SetBkIndexBuffered+0x74>
 802bd6c:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 802bd70:	2a01      	cmp	r2, #1
 802bd72:	d04d      	beq.n	802be10 <_SetBkIndexBuffered+0xbc>
 802bd74:	69e2      	ldr	r2, [r4, #28]
 802bd76:	6825      	ldr	r5, [r4, #0]
 802bd78:	6860      	ldr	r0, [r4, #4]
 802bd7a:	f8d4 9020 	ldr.w	r9, [r4, #32]
 802bd7e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 802bd82:	3a01      	subs	r2, #1
 802bd84:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 802bd88:	1d05      	adds	r5, r0, #4
 802bd8a:	6062      	str	r2, [r4, #4]
 802bd8c:	f8d3 a000 	ldr.w	sl, [r3]
 802bd90:	f1ba 0f00 	cmp.w	sl, #0
 802bd94:	d019      	beq.n	802bdca <_SetBkIndexBuffered+0x76>
 802bd96:	69a2      	ldr	r2, [r4, #24]
 802bd98:	4628      	mov	r0, r5
 802bd9a:	f000 fca7 	bl	802c6ec <GUI__CompactPixelIndices>
 802bd9e:	f8d4 c014 	ldr.w	ip, [r4, #20]
 802bda2:	f8da e00c 	ldr.w	lr, [sl, #12]
 802bda6:	69a0      	ldr	r0, [r4, #24]
 802bda8:	68e3      	ldr	r3, [r4, #12]
 802bdaa:	9503      	str	r5, [sp, #12]
 802bdac:	2200      	movs	r2, #0
 802bdae:	9205      	str	r2, [sp, #20]
 802bdb0:	9204      	str	r2, [sp, #16]
 802bdb2:	2101      	movs	r1, #1
 802bdb4:	f8cd c008 	str.w	ip, [sp, #8]
 802bdb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 802bdba:	9001      	str	r0, [sp, #4]
 802bdbc:	9100      	str	r1, [sp, #0]
 802bdbe:	4650      	mov	r0, sl
 802bdc0:	4649      	mov	r1, r9
 802bdc2:	f8de 5004 	ldr.w	r5, [lr, #4]
 802bdc6:	47a8      	blx	r5
 802bdc8:	6862      	ldr	r2, [r4, #4]
 802bdca:	f8c2 8000 	str.w	r8, [r2]
 802bdce:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 802bdd2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802bdd6:	6062      	str	r2, [r4, #4]
 802bdd8:	2301      	movs	r3, #1
 802bdda:	62a7      	str	r7, [r4, #40]	; 0x28
 802bddc:	62e6      	str	r6, [r4, #44]	; 0x2c
 802bdde:	60e3      	str	r3, [r4, #12]
 802bde0:	6227      	str	r7, [r4, #32]
 802bde2:	6266      	str	r6, [r4, #36]	; 0x24
 802bde4:	b006      	add	sp, #24
 802bde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bdea:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 802bdee:	6a22      	ldr	r2, [r4, #32]
 802bdf0:	440a      	add	r2, r1
 802bdf2:	4282      	cmp	r2, r0
 802bdf4:	d1b8      	bne.n	802bd68 <_SetBkIndexBuffered+0x14>
 802bdf6:	6863      	ldr	r3, [r4, #4]
 802bdf8:	68e2      	ldr	r2, [r4, #12]
 802bdfa:	f8c3 8000 	str.w	r8, [r3]
 802bdfe:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 802be02:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 802be06:	6063      	str	r3, [r4, #4]
 802be08:	1c53      	adds	r3, r2, #1
 802be0a:	2a00      	cmp	r2, #0
 802be0c:	d1e7      	bne.n	802bdde <_SetBkIndexBuffered+0x8a>
 802be0e:	e7e4      	b.n	802bdda <_SetBkIndexBuffered+0x86>
 802be10:	6825      	ldr	r5, [r4, #0]
 802be12:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
 802be16:	462a      	mov	r2, r5
 802be18:	e7b7      	b.n	802bd8a <_SetBkIndexBuffered+0x36>
 802be1a:	bf00      	nop

0802be1c <_ReleaseBuffer.isra.7>:
 802be1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802be1e:	68ca      	ldr	r2, [r1, #12]
 802be20:	b089      	sub	sp, #36	; 0x24
 802be22:	460c      	mov	r4, r1
 802be24:	9107      	str	r1, [sp, #28]
 802be26:	2a00      	cmp	r2, #0
 802be28:	d02c      	beq.n	802be84 <_ReleaseBuffer.isra.7+0x68>
 802be2a:	f991 3030 	ldrsb.w	r3, [r1, #48]	; 0x30
 802be2e:	2b01      	cmp	r3, #1
 802be30:	d031      	beq.n	802be96 <_ReleaseBuffer.isra.7+0x7a>
 802be32:	69cb      	ldr	r3, [r1, #28]
 802be34:	6a27      	ldr	r7, [r4, #32]
 802be36:	c942      	ldmia	r1, {r1, r6}
 802be38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802be3c:	3b01      	subs	r3, #1
 802be3e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 802be42:	6063      	str	r3, [r4, #4]
 802be44:	6805      	ldr	r5, [r0, #0]
 802be46:	3604      	adds	r6, #4
 802be48:	2d00      	cmp	r5, #0
 802be4a:	d02b      	beq.n	802bea4 <_ReleaseBuffer.isra.7+0x88>
 802be4c:	4611      	mov	r1, r2
 802be4e:	4630      	mov	r0, r6
 802be50:	69a2      	ldr	r2, [r4, #24]
 802be52:	f000 fc4b 	bl	802c6ec <GUI__CompactPixelIndices>
 802be56:	2100      	movs	r1, #0
 802be58:	68e3      	ldr	r3, [r4, #12]
 802be5a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 802be5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 802be60:	9105      	str	r1, [sp, #20]
 802be62:	9104      	str	r1, [sp, #16]
 802be64:	9603      	str	r6, [sp, #12]
 802be66:	6961      	ldr	r1, [r4, #20]
 802be68:	9102      	str	r1, [sp, #8]
 802be6a:	69a1      	ldr	r1, [r4, #24]
 802be6c:	9101      	str	r1, [sp, #4]
 802be6e:	2101      	movs	r1, #1
 802be70:	9100      	str	r1, [sp, #0]
 802be72:	4628      	mov	r0, r5
 802be74:	4639      	mov	r1, r7
 802be76:	f8de 5004 	ldr.w	r5, [lr, #4]
 802be7a:	47a8      	blx	r5
 802be7c:	9b07      	ldr	r3, [sp, #28]
 802be7e:	2200      	movs	r2, #0
 802be80:	60e2      	str	r2, [r4, #12]
 802be82:	461c      	mov	r4, r3
 802be84:	68a4      	ldr	r4, [r4, #8]
 802be86:	a807      	add	r0, sp, #28
 802be88:	f7f3 fda0 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802be8c:	4620      	mov	r0, r4
 802be8e:	f7f3 ff2d 	bl	801fcec <GUI_ALLOC_Free>
 802be92:	b009      	add	sp, #36	; 0x24
 802be94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802be96:	680e      	ldr	r6, [r1, #0]
 802be98:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 802be9a:	4633      	mov	r3, r6
 802be9c:	6063      	str	r3, [r4, #4]
 802be9e:	6805      	ldr	r5, [r0, #0]
 802bea0:	2d00      	cmp	r5, #0
 802bea2:	d1d3      	bne.n	802be4c <_ReleaseBuffer.isra.7+0x30>
 802bea4:	4623      	mov	r3, r4
 802bea6:	e7ea      	b.n	802be7e <_ReleaseBuffer.isra.7+0x62>

0802bea8 <GUI_SPRITE_SetPosition>:
 802bea8:	b900      	cbnz	r0, 802beac <GUI_SPRITE_SetPosition+0x4>
 802beaa:	4770      	bx	lr
 802beac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802beb0:	b0ab      	sub	sp, #172	; 0xac
 802beb2:	4604      	mov	r4, r0
 802beb4:	460d      	mov	r5, r1
 802beb6:	4616      	mov	r6, r2
 802beb8:	921d      	str	r2, [sp, #116]	; 0x74
 802beba:	911c      	str	r1, [sp, #112]	; 0x70
 802bebc:	f7f5 fbfe 	bl	80216bc <GUI_Lock>
 802bec0:	4620      	mov	r0, r4
 802bec2:	f7f3 fd71 	bl	801f9a8 <GUI_ALLOC_LockH>
 802bec6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802beca:	6804      	ldr	r4, [r0, #0]
 802becc:	9027      	str	r0, [sp, #156]	; 0x9c
 802bece:	429d      	cmp	r5, r3
 802bed0:	9412      	str	r4, [sp, #72]	; 0x48
 802bed2:	f000 8183 	beq.w	802c1dc <GUI_SPRITE_SetPosition+0x334>
 802bed6:	2000      	movs	r0, #0
 802bed8:	f001 f93e 	bl	802d158 <GUI_MEMDEV_Select>
 802bedc:	4b9f      	ldr	r3, [pc, #636]	; (802c15c <GUI_SPRITE_SetPosition+0x2b4>)
 802bede:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802bee0:	681b      	ldr	r3, [r3, #0]
 802bee2:	6992      	ldr	r2, [r2, #24]
 802bee4:	7c59      	ldrb	r1, [r3, #17]
 802bee6:	9020      	str	r0, [sp, #128]	; 0x80
 802bee8:	4608      	mov	r0, r1
 802beea:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 802beec:	9121      	str	r1, [sp, #132]	; 0x84
 802beee:	4282      	cmp	r2, r0
 802bef0:	bf18      	it	ne
 802bef2:	745a      	strbne	r2, [r3, #17]
 802bef4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 802bef8:	9307      	str	r3, [sp, #28]
 802befa:	4618      	mov	r0, r3
 802befc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 802bf00:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 802bf04:	9219      	str	r2, [sp, #100]	; 0x64
 802bf06:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 802bf0a:	9313      	str	r3, [sp, #76]	; 0x4c
 802bf0c:	461c      	mov	r4, r3
 802bf0e:	1a09      	subs	r1, r1, r0
 802bf10:	1b12      	subs	r2, r2, r4
 802bf12:	460e      	mov	r6, r1
 802bf14:	910b      	str	r1, [sp, #44]	; 0x2c
 802bf16:	921a      	str	r2, [sp, #104]	; 0x68
 802bf18:	4621      	mov	r1, r4
 802bf1a:	4614      	mov	r4, r2
 802bf1c:	4632      	mov	r2, r6
 802bf1e:	3201      	adds	r2, #1
 802bf20:	8a2b      	ldrh	r3, [r5, #16]
 802bf22:	921b      	str	r2, [sp, #108]	; 0x6c
 802bf24:	4622      	mov	r2, r4
 802bf26:	3201      	adds	r2, #1
 802bf28:	079b      	lsls	r3, r3, #30
 802bf2a:	921e      	str	r2, [sp, #120]	; 0x78
 802bf2c:	f140 8137 	bpl.w	802c19e <GUI_SPRITE_SetPosition+0x2f6>
 802bf30:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802bf32:	696a      	ldr	r2, [r5, #20]
 802bf34:	9203      	str	r2, [sp, #12]
 802bf36:	1a1b      	subs	r3, r3, r0
 802bf38:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802bf3a:	9314      	str	r3, [sp, #80]	; 0x50
 802bf3c:	2b00      	cmp	r3, #0
 802bf3e:	eba2 0401 	sub.w	r4, r2, r1
 802bf42:	f340 81bd 	ble.w	802c2c0 <GUI_SPRITE_SetPosition+0x418>
 802bf46:	9309      	str	r3, [sp, #36]	; 0x24
 802bf48:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 802bf4c:	2300      	movs	r3, #0
 802bf4e:	f04f 0a01 	mov.w	sl, #1
 802bf52:	9311      	str	r3, [sp, #68]	; 0x44
 802bf54:	2c00      	cmp	r4, #0
 802bf56:	f340 81be 	ble.w	802c2d6 <GUI_SPRITE_SetPosition+0x42e>
 802bf5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802bf5c:	9316      	str	r3, [sp, #88]	; 0x58
 802bf5e:	2301      	movs	r3, #1
 802bf60:	9417      	str	r4, [sp, #92]	; 0x5c
 802bf62:	9315      	str	r3, [sp, #84]	; 0x54
 802bf64:	f04f 0b00 	mov.w	fp, #0
 802bf68:	9e12      	ldr	r6, [sp, #72]	; 0x48
 802bf6a:	4b7d      	ldr	r3, [pc, #500]	; (802c160 <GUI_SPRITE_SetPosition+0x2b8>)
 802bf6c:	69b0      	ldr	r0, [r6, #24]
 802bf6e:	561b      	ldrsb	r3, [r3, r0]
 802bf70:	2b01      	cmp	r3, #1
 802bf72:	f340 819f 	ble.w	802c2b4 <GUI_SPRITE_SetPosition+0x40c>
 802bf76:	2300      	movs	r3, #0
 802bf78:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
 802bf7c:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
 802bf80:	f7f7 f9d8 	bl	8023334 <LCD_GetXSizeEx>
 802bf84:	1e43      	subs	r3, r0, #1
 802bf86:	69b0      	ldr	r0, [r6, #24]
 802bf88:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
 802bf8c:	f7f7 f9e2 	bl	8023354 <LCD_GetYSizeEx>
 802bf90:	3801      	subs	r0, #1
 802bf92:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
 802bf96:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802bf98:	4652      	mov	r2, sl
 802bf9a:	f100 0114 	add.w	r1, r0, #20
 802bf9e:	f7ff fe7f 	bl	802bca0 <_CreateBuffer.isra.4>
 802bfa2:	9022      	str	r0, [sp, #136]	; 0x88
 802bfa4:	2800      	cmp	r0, #0
 802bfa6:	f000 80f9 	beq.w	802c19c <GUI_SPRITE_SetPosition+0x2f4>
 802bfaa:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802bfac:	4652      	mov	r2, sl
 802bfae:	f100 0114 	add.w	r1, r0, #20
 802bfb2:	f7ff fe75 	bl	802bca0 <_CreateBuffer.isra.4>
 802bfb6:	9024      	str	r0, [sp, #144]	; 0x90
 802bfb8:	2800      	cmp	r0, #0
 802bfba:	f000 80ea 	beq.w	802c192 <GUI_SPRITE_SetPosition+0x2ea>
 802bfbe:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802bfc0:	68d8      	ldr	r0, [r3, #12]
 802bfc2:	2800      	cmp	r0, #0
 802bfc4:	f040 8197 	bne.w	802c2f6 <GUI_SPRITE_SetPosition+0x44e>
 802bfc8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802bfca:	455a      	cmp	r2, fp
 802bfcc:	f000 80dd 	beq.w	802c18a <GUI_SPRITE_SetPosition+0x2e2>
 802bfd0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802bfd2:	9911      	ldr	r1, [sp, #68]	; 0x44
 802bfd4:	9023      	str	r0, [sp, #140]	; 0x8c
 802bfd6:	009a      	lsls	r2, r3, #2
 802bfd8:	fb0b 1303 	mla	r3, fp, r3, r1
 802bfdc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 802bfe0:	930e      	str	r3, [sp, #56]	; 0x38
 802bfe2:	ebc4 030b 	rsb	r3, r4, fp
 802bfe6:	930c      	str	r3, [sp, #48]	; 0x30
 802bfe8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802bfea:	9915      	ldr	r1, [sp, #84]	; 0x54
 802bfec:	4423      	add	r3, r4
 802bfee:	9318      	str	r3, [sp, #96]	; 0x60
 802bff0:	ea4f 038a 	mov.w	r3, sl, lsl #2
 802bff4:	fb01 f202 	mul.w	r2, r1, r2
 802bff8:	9304      	str	r3, [sp, #16]
 802bffa:	465b      	mov	r3, fp
 802bffc:	921f      	str	r2, [sp, #124]	; 0x7c
 802bffe:	46d3      	mov	fp, sl
 802c000:	46c8      	mov	r8, r9
 802c002:	469a      	mov	sl, r3
 802c004:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802c006:	4553      	cmp	r3, sl
 802c008:	f300 8109 	bgt.w	802c21e <GUI_SPRITE_SetPosition+0x376>
 802c00c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802c00e:	4553      	cmp	r3, sl
 802c010:	bfb4      	ite	lt
 802c012:	2300      	movlt	r3, #0
 802c014:	2301      	movge	r3, #1
 802c016:	9310      	str	r3, [sp, #64]	; 0x40
 802c018:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802c01a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802c01c:	4453      	add	r3, sl
 802c01e:	930f      	str	r3, [sp, #60]	; 0x3c
 802c020:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802c022:	45a0      	cmp	r8, r4
 802c024:	4453      	add	r3, sl
 802c026:	9308      	str	r3, [sp, #32]
 802c028:	f000 80a0 	beq.w	802c16c <GUI_SPRITE_SetPosition+0x2c4>
 802c02c:	9814      	ldr	r0, [sp, #80]	; 0x50
 802c02e:	9b07      	ldr	r3, [sp, #28]
 802c030:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802c032:	4403      	add	r3, r0
 802c034:	ebc0 0904 	rsb	r9, r0, r4
 802c038:	930a      	str	r3, [sp, #40]	; 0x28
 802c03a:	e05f      	b.n	802c0fc <GUI_SPRITE_SetPosition+0x254>
 802c03c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c03e:	42a3      	cmp	r3, r4
 802c040:	db6c      	blt.n	802c11c <GUI_SPRITE_SetPosition+0x274>
 802c042:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802c044:	2b00      	cmp	r3, #0
 802c046:	d069      	beq.n	802c11c <GUI_SPRITE_SetPosition+0x274>
 802c048:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 802c04c:	42ba      	cmp	r2, r7
 802c04e:	f340 8277 	ble.w	802c540 <GUI_SPRITE_SetPosition+0x698>
 802c052:	2300      	movs	r3, #0
 802c054:	9305      	str	r3, [sp, #20]
 802c056:	f1b9 0f00 	cmp.w	r9, #0
 802c05a:	f2c0 80cc 	blt.w	802c1f6 <GUI_SPRITE_SetPosition+0x34e>
 802c05e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c060:	2b00      	cmp	r3, #0
 802c062:	f2c0 80c8 	blt.w	802c1f6 <GUI_SPRITE_SetPosition+0x34e>
 802c066:	461a      	mov	r2, r3
 802c068:	4649      	mov	r1, r9
 802c06a:	9803      	ldr	r0, [sp, #12]
 802c06c:	f7f4 f8b4 	bl	80201d8 <GUI_GetBitmapPixelIndex>
 802c070:	0e03      	lsrs	r3, r0, #24
 802c072:	f040 80c0 	bne.w	802c1f6 <GUI_SPRITE_SetPosition+0x34e>
 802c076:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 802c07a:	9a06      	ldr	r2, [sp, #24]
 802c07c:	429a      	cmp	r2, r3
 802c07e:	db0f      	blt.n	802c0a0 <GUI_SPRITE_SetPosition+0x1f8>
 802c080:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 802c084:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802c086:	428a      	cmp	r2, r1
 802c088:	dc0a      	bgt.n	802c0a0 <GUI_SPRITE_SetPosition+0x1f8>
 802c08a:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 802c08e:	9906      	ldr	r1, [sp, #24]
 802c090:	428a      	cmp	r2, r1
 802c092:	db05      	blt.n	802c0a0 <GUI_SPRITE_SetPosition+0x1f8>
 802c094:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 802c098:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802c09a:	428a      	cmp	r2, r1
 802c09c:	f280 80a4 	bge.w	802c1e8 <GUI_SPRITE_SetPosition+0x340>
 802c0a0:	429f      	cmp	r7, r3
 802c0a2:	db23      	blt.n	802c0ec <GUI_SPRITE_SetPosition+0x244>
 802c0a4:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 802c0a8:	9808      	ldr	r0, [sp, #32]
 802c0aa:	4283      	cmp	r3, r0
 802c0ac:	dc1e      	bgt.n	802c0ec <GUI_SPRITE_SetPosition+0x244>
 802c0ae:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 802c0b2:	42bb      	cmp	r3, r7
 802c0b4:	db1a      	blt.n	802c0ec <GUI_SPRITE_SetPosition+0x244>
 802c0b6:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 802c0ba:	4283      	cmp	r3, r0
 802c0bc:	db16      	blt.n	802c0ec <GUI_SPRITE_SetPosition+0x244>
 802c0be:	4630      	mov	r0, r6
 802c0c0:	4b28      	ldr	r3, [pc, #160]	; (802c164 <GUI_SPRITE_SetPosition+0x2bc>)
 802c0c2:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 802c0c4:	681b      	ldr	r3, [r3, #0]
 802c0c6:	f046 417f 	orr.w	r1, r6, #4278190080	; 0xff000000
 802c0ca:	22ff      	movs	r2, #255	; 0xff
 802c0cc:	4798      	blx	r3
 802c0ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802c0d0:	4b25      	ldr	r3, [pc, #148]	; (802c168 <GUI_SPRITE_SetPosition+0x2c0>)
 802c0d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802c0d6:	691b      	ldr	r3, [r3, #16]
 802c0d8:	681b      	ldr	r3, [r3, #0]
 802c0da:	4798      	blx	r3
 802c0dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802c0de:	9300      	str	r3, [sp, #0]
 802c0e0:	4602      	mov	r2, r0
 802c0e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802c0e4:	9908      	ldr	r1, [sp, #32]
 802c0e6:	4638      	mov	r0, r7
 802c0e8:	f7ff fe34 	bl	802bd54 <_SetBkIndexBuffered>
 802c0ec:	9b05      	ldr	r3, [sp, #20]
 802c0ee:	622b      	str	r3, [r5, #32]
 802c0f0:	445c      	add	r4, fp
 802c0f2:	9b04      	ldr	r3, [sp, #16]
 802c0f4:	45a0      	cmp	r8, r4
 802c0f6:	441d      	add	r5, r3
 802c0f8:	44d9      	add	r9, fp
 802c0fa:	d037      	beq.n	802c16c <GUI_SPRITE_SetPosition+0x2c4>
 802c0fc:	4652      	mov	r2, sl
 802c0fe:	4621      	mov	r1, r4
 802c100:	9803      	ldr	r0, [sp, #12]
 802c102:	f7f4 f869 	bl	80201d8 <GUI_GetBitmapPixelIndex>
 802c106:	0e03      	lsrs	r3, r0, #24
 802c108:	4606      	mov	r6, r0
 802c10a:	d0f1      	beq.n	802c0f0 <GUI_SPRITE_SetPosition+0x248>
 802c10c:	9b07      	ldr	r3, [sp, #28]
 802c10e:	18e3      	adds	r3, r4, r3
 802c110:	9306      	str	r3, [sp, #24]
 802c112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c114:	191f      	adds	r7, r3, r4
 802c116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c118:	42a3      	cmp	r3, r4
 802c11a:	dd8f      	ble.n	802c03c <GUI_SPRITE_SetPosition+0x194>
 802c11c:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 802c120:	42bb      	cmp	r3, r7
 802c122:	461a      	mov	r2, r3
 802c124:	dc6a      	bgt.n	802c1fc <GUI_SPRITE_SetPosition+0x354>
 802c126:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 802c12a:	9908      	ldr	r1, [sp, #32]
 802c12c:	428b      	cmp	r3, r1
 802c12e:	f04f 0300 	mov.w	r3, #0
 802c132:	dc71      	bgt.n	802c218 <GUI_SPRITE_SetPosition+0x370>
 802c134:	930d      	str	r3, [sp, #52]	; 0x34
 802c136:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 802c13a:	42bb      	cmp	r3, r7
 802c13c:	db04      	blt.n	802c148 <GUI_SPRITE_SetPosition+0x2a0>
 802c13e:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 802c142:	9a08      	ldr	r2, [sp, #32]
 802c144:	4293      	cmp	r3, r2
 802c146:	da6d      	bge.n	802c224 <GUI_SPRITE_SetPosition+0x37c>
 802c148:	2300      	movs	r3, #0
 802c14a:	9305      	str	r3, [sp, #20]
 802c14c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c14e:	2b00      	cmp	r3, #0
 802c150:	d181      	bne.n	802c056 <GUI_SPRITE_SetPosition+0x1ae>
 802c152:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 802c156:	4613      	mov	r3, r2
 802c158:	e78f      	b.n	802c07a <GUI_SPRITE_SetPosition+0x1d2>
 802c15a:	bf00      	nop
 802c15c:	200000e8 	.word	0x200000e8
 802c160:	20030860 	.word	0x20030860
 802c164:	20000100 	.word	0x20000100
 802c168:	200308b0 	.word	0x200308b0
 802c16c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802c16e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 802c170:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802c172:	440b      	add	r3, r1
 802c174:	930e      	str	r3, [sp, #56]	; 0x38
 802c176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c178:	4619      	mov	r1, r3
 802c17a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802c17c:	4492      	add	sl, r2
 802c17e:	4411      	add	r1, r2
 802c180:	4553      	cmp	r3, sl
 802c182:	910c      	str	r1, [sp, #48]	; 0x30
 802c184:	f47f af3e 	bne.w	802c004 <GUI_SPRITE_SetPosition+0x15c>
 802c188:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802c18a:	6818      	ldr	r0, [r3, #0]
 802c18c:	9924      	ldr	r1, [sp, #144]	; 0x90
 802c18e:	f7ff fe45 	bl	802be1c <_ReleaseBuffer.isra.7>
 802c192:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802c194:	9922      	ldr	r1, [sp, #136]	; 0x88
 802c196:	6818      	ldr	r0, [r3, #0]
 802c198:	f7ff fe40 	bl	802be1c <_ReleaseBuffer.isra.7>
 802c19c:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 802c19e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802c1a0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 802c1a2:	991d      	ldr	r1, [sp, #116]	; 0x74
 802c1a4:	80ab      	strh	r3, [r5, #4]
 802c1a6:	981e      	ldr	r0, [sp, #120]	; 0x78
 802c1a8:	80e9      	strh	r1, [r5, #6]
 802c1aa:	4413      	add	r3, r2
 802c1ac:	3b01      	subs	r3, #1
 802c1ae:	1e4a      	subs	r2, r1, #1
 802c1b0:	4402      	add	r2, r0
 802c1b2:	812b      	strh	r3, [r5, #8]
 802c1b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802c1b6:	816a      	strh	r2, [r5, #10]
 802c1b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802c1ba:	4619      	mov	r1, r3
 802c1bc:	4291      	cmp	r1, r2
 802c1be:	d002      	beq.n	802c1c6 <GUI_SPRITE_SetPosition+0x31e>
 802c1c0:	4ba6      	ldr	r3, [pc, #664]	; (802c45c <GUI_SPRITE_SetPosition+0x5b4>)
 802c1c2:	681b      	ldr	r3, [r3, #0]
 802c1c4:	745a      	strb	r2, [r3, #17]
 802c1c6:	9820      	ldr	r0, [sp, #128]	; 0x80
 802c1c8:	f000 ffc6 	bl	802d158 <GUI_MEMDEV_Select>
 802c1cc:	a827      	add	r0, sp, #156	; 0x9c
 802c1ce:	f7f3 fbfd 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802c1d2:	f7f5 fa69 	bl	80216a8 <GUI_Unlock>
 802c1d6:	b02b      	add	sp, #172	; 0xac
 802c1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c1dc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802c1e0:	429e      	cmp	r6, r3
 802c1e2:	f47f ae78 	bne.w	802bed6 <GUI_SPRITE_SetPosition+0x2e>
 802c1e6:	e7f1      	b.n	802c1cc <GUI_SPRITE_SetPosition+0x324>
 802c1e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802c1ea:	6a2a      	ldr	r2, [r5, #32]
 802c1ec:	9806      	ldr	r0, [sp, #24]
 802c1ee:	9300      	str	r3, [sp, #0]
 802c1f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802c1f2:	f7ff fdaf 	bl	802bd54 <_SetBkIndexBuffered>
 802c1f6:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 802c1fa:	e751      	b.n	802c0a0 <GUI_SPRITE_SetPosition+0x1f8>
 802c1fc:	9a06      	ldr	r2, [sp, #24]
 802c1fe:	4293      	cmp	r3, r2
 802c200:	dc07      	bgt.n	802c212 <GUI_SPRITE_SetPosition+0x36a>
 802c202:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 802c206:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802c208:	4291      	cmp	r1, r2
 802c20a:	db02      	blt.n	802c212 <GUI_SPRITE_SetPosition+0x36a>
 802c20c:	2200      	movs	r2, #0
 802c20e:	9205      	str	r2, [sp, #20]
 802c210:	e73b      	b.n	802c08a <GUI_SPRITE_SetPosition+0x1e2>
 802c212:	2300      	movs	r3, #0
 802c214:	9305      	str	r3, [sp, #20]
 802c216:	e769      	b.n	802c0ec <GUI_SPRITE_SetPosition+0x244>
 802c218:	9305      	str	r3, [sp, #20]
 802c21a:	4613      	mov	r3, r2
 802c21c:	e72d      	b.n	802c07a <GUI_SPRITE_SetPosition+0x1d2>
 802c21e:	2300      	movs	r3, #0
 802c220:	9310      	str	r3, [sp, #64]	; 0x40
 802c222:	e6f9      	b.n	802c018 <GUI_SPRITE_SetPosition+0x170>
 802c224:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802c226:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 802c22a:	42ba      	cmp	r2, r7
 802c22c:	dc2d      	bgt.n	802c28a <GUI_SPRITE_SetPosition+0x3e2>
 802c22e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802c232:	42b9      	cmp	r1, r7
 802c234:	db29      	blt.n	802c28a <GUI_SPRITE_SetPosition+0x3e2>
 802c236:	f9b3 e006 	ldrsh.w	lr, [r3, #6]
 802c23a:	9808      	ldr	r0, [sp, #32]
 802c23c:	4586      	cmp	lr, r0
 802c23e:	dc24      	bgt.n	802c28a <GUI_SPRITE_SetPosition+0x3e2>
 802c240:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 802c244:	4281      	cmp	r1, r0
 802c246:	db20      	blt.n	802c28a <GUI_SPRITE_SetPosition+0x3e2>
 802c248:	6958      	ldr	r0, [r3, #20]
 802c24a:	9325      	str	r3, [sp, #148]	; 0x94
 802c24c:	b1e8      	cbz	r0, 802c28a <GUI_SPRITE_SetPosition+0x3e2>
 802c24e:	1abb      	subs	r3, r7, r2
 802c250:	4619      	mov	r1, r3
 802c252:	9305      	str	r3, [sp, #20]
 802c254:	9b08      	ldr	r3, [sp, #32]
 802c256:	ebce 0303 	rsb	r3, lr, r3
 802c25a:	461a      	mov	r2, r3
 802c25c:	9323      	str	r3, [sp, #140]	; 0x8c
 802c25e:	f7f3 ffbb 	bl	80201d8 <GUI_GetBitmapPixelIndex>
 802c262:	0e03      	lsrs	r3, r0, #24
 802c264:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802c266:	d010      	beq.n	802c28a <GUI_SPRITE_SetPosition+0x3e2>
 802c268:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 802c26c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 802c270:	1a52      	subs	r2, r2, r1
 802c272:	9923      	ldr	r1, [sp, #140]	; 0x8c
 802c274:	fb02 1201 	mla	r2, r2, r1, r1
 802c278:	9905      	ldr	r1, [sp, #20]
 802c27a:	440a      	add	r2, r1
 802c27c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802c280:	6a1b      	ldr	r3, [r3, #32]
 802c282:	9305      	str	r3, [sp, #20]
 802c284:	f043 407f 	orr.w	r0, r3, #4278190080	; 0xff000000
 802c288:	e00b      	b.n	802c2a2 <GUI_SPRITE_SetPosition+0x3fa>
 802c28a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802c28c:	6818      	ldr	r0, [r3, #0]
 802c28e:	2800      	cmp	r0, #0
 802c290:	d02d      	beq.n	802c2ee <GUI_SPRITE_SetPosition+0x446>
 802c292:	68c3      	ldr	r3, [r0, #12]
 802c294:	9a08      	ldr	r2, [sp, #32]
 802c296:	695b      	ldr	r3, [r3, #20]
 802c298:	4639      	mov	r1, r7
 802c29a:	4798      	blx	r3
 802c29c:	9005      	str	r0, [sp, #20]
 802c29e:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 802c2a2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802c2a4:	4b6e      	ldr	r3, [pc, #440]	; (802c460 <GUI_SPRITE_SetPosition+0x5b8>)
 802c2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802c2aa:	691b      	ldr	r3, [r3, #16]
 802c2ac:	685b      	ldr	r3, [r3, #4]
 802c2ae:	4798      	blx	r3
 802c2b0:	9023      	str	r0, [sp, #140]	; 0x8c
 802c2b2:	e74b      	b.n	802c14c <GUI_SPRITE_SetPosition+0x2a4>
 802c2b4:	68f3      	ldr	r3, [r6, #12]
 802c2b6:	4630      	mov	r0, r6
 802c2b8:	a928      	add	r1, sp, #160	; 0xa0
 802c2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802c2bc:	4798      	blx	r3
 802c2be:	e66a      	b.n	802bf96 <GUI_SPRITE_SetPosition+0xee>
 802c2c0:	2200      	movs	r2, #0
 802c2c2:	9209      	str	r2, [sp, #36]	; 0x24
 802c2c4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802c2c6:	9611      	str	r6, [sp, #68]	; 0x44
 802c2c8:	4633      	mov	r3, r6
 802c2ca:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 802c2ce:	4413      	add	r3, r2
 802c2d0:	46ca      	mov	sl, r9
 802c2d2:	930b      	str	r3, [sp, #44]	; 0x2c
 802c2d4:	e63e      	b.n	802bf54 <GUI_SPRITE_SetPosition+0xac>
 802c2d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802c2da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 802c2dc:	9316      	str	r3, [sp, #88]	; 0x58
 802c2de:	9315      	str	r3, [sp, #84]	; 0x54
 802c2e0:	2300      	movs	r3, #0
 802c2e2:	9317      	str	r3, [sp, #92]	; 0x5c
 802c2e4:	4613      	mov	r3, r2
 802c2e6:	4423      	add	r3, r4
 802c2e8:	4693      	mov	fp, r2
 802c2ea:	931a      	str	r3, [sp, #104]	; 0x68
 802c2ec:	e63c      	b.n	802bf68 <GUI_SPRITE_SetPosition+0xc0>
 802c2ee:	9005      	str	r0, [sp, #20]
 802c2f0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 802c2f4:	e7d5      	b.n	802c2a2 <GUI_SPRITE_SetPosition+0x3fa>
 802c2f6:	f7f3 fb57 	bl	801f9a8 <GUI_ALLOC_LockH>
 802c2fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802c2fc:	9026      	str	r0, [sp, #152]	; 0x98
 802c2fe:	455b      	cmp	r3, fp
 802c300:	f000 80a6 	beq.w	802c450 <GUI_SPRITE_SetPosition+0x5a8>
 802c304:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802c306:	9911      	ldr	r1, [sp, #68]	; 0x44
 802c308:	009a      	lsls	r2, r3, #2
 802c30a:	fb0b 1303 	mla	r3, fp, r3, r1
 802c30e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 802c312:	930d      	str	r3, [sp, #52]	; 0x34
 802c314:	ebc4 030b 	rsb	r3, r4, fp
 802c318:	930c      	str	r3, [sp, #48]	; 0x30
 802c31a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802c31c:	9915      	ldr	r1, [sp, #84]	; 0x54
 802c31e:	4423      	add	r3, r4
 802c320:	fb01 f202 	mul.w	r2, r1, r2
 802c324:	9318      	str	r3, [sp, #96]	; 0x60
 802c326:	ea4f 038a 	mov.w	r3, sl, lsl #2
 802c32a:	9210      	str	r2, [sp, #64]	; 0x40
 802c32c:	9304      	str	r3, [sp, #16]
 802c32e:	9a07      	ldr	r2, [sp, #28]
 802c330:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802c332:	4413      	add	r3, r2
 802c334:	46c8      	mov	r8, r9
 802c336:	930a      	str	r3, [sp, #40]	; 0x28
 802c338:	46d9      	mov	r9, fp
 802c33a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802c33c:	454b      	cmp	r3, r9
 802c33e:	f300 80af 	bgt.w	802c4a0 <GUI_SPRITE_SetPosition+0x5f8>
 802c342:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802c344:	454b      	cmp	r3, r9
 802c346:	bfb4      	ite	lt
 802c348:	2300      	movlt	r3, #0
 802c34a:	2301      	movge	r3, #1
 802c34c:	930f      	str	r3, [sp, #60]	; 0x3c
 802c34e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802c350:	444b      	add	r3, r9
 802c352:	930e      	str	r3, [sp, #56]	; 0x38
 802c354:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802c356:	444b      	add	r3, r9
 802c358:	9308      	str	r3, [sp, #32]
 802c35a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802c35c:	4598      	cmp	r8, r3
 802c35e:	d069      	beq.n	802c434 <GUI_SPRITE_SetPosition+0x58c>
 802c360:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802c362:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802c364:	461c      	mov	r4, r3
 802c366:	ebc2 0b03 	rsb	fp, r2, r3
 802c36a:	464a      	mov	r2, r9
 802c36c:	4621      	mov	r1, r4
 802c36e:	9803      	ldr	r0, [sp, #12]
 802c370:	f7f3 ff32 	bl	80201d8 <GUI_GetBitmapPixelIndex>
 802c374:	4606      	mov	r6, r0
 802c376:	2800      	cmp	r0, #0
 802c378:	d056      	beq.n	802c428 <GUI_SPRITE_SetPosition+0x580>
 802c37a:	9b07      	ldr	r3, [sp, #28]
 802c37c:	18e3      	adds	r3, r4, r3
 802c37e:	9306      	str	r3, [sp, #24]
 802c380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802c382:	191f      	adds	r7, r3, r4
 802c384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802c386:	42a3      	cmp	r3, r4
 802c388:	dc6c      	bgt.n	802c464 <GUI_SPRITE_SetPosition+0x5bc>
 802c38a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802c38c:	42a3      	cmp	r3, r4
 802c38e:	db69      	blt.n	802c464 <GUI_SPRITE_SetPosition+0x5bc>
 802c390:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802c392:	2b00      	cmp	r3, #0
 802c394:	d066      	beq.n	802c464 <GUI_SPRITE_SetPosition+0x5bc>
 802c396:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 802c39a:	42bb      	cmp	r3, r7
 802c39c:	bfd8      	it	le
 802c39e:	2301      	movle	r3, #1
 802c3a0:	f300 80cb 	bgt.w	802c53a <GUI_SPRITE_SetPosition+0x692>
 802c3a4:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 802c3a8:	9908      	ldr	r1, [sp, #32]
 802c3aa:	428a      	cmp	r2, r1
 802c3ac:	dc07      	bgt.n	802c3be <GUI_SPRITE_SetPosition+0x516>
 802c3ae:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 802c3b2:	42ba      	cmp	r2, r7
 802c3b4:	db03      	blt.n	802c3be <GUI_SPRITE_SetPosition+0x516>
 802c3b6:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 802c3ba:	428a      	cmp	r2, r1
 802c3bc:	da7d      	bge.n	802c4ba <GUI_SPRITE_SetPosition+0x612>
 802c3be:	2200      	movs	r2, #0
 802c3c0:	9205      	str	r2, [sp, #20]
 802c3c2:	b163      	cbz	r3, 802c3de <GUI_SPRITE_SetPosition+0x536>
 802c3c4:	f1bb 0f00 	cmp.w	fp, #0
 802c3c8:	db62      	blt.n	802c490 <GUI_SPRITE_SetPosition+0x5e8>
 802c3ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c3cc:	2b00      	cmp	r3, #0
 802c3ce:	db5f      	blt.n	802c490 <GUI_SPRITE_SetPosition+0x5e8>
 802c3d0:	461a      	mov	r2, r3
 802c3d2:	4659      	mov	r1, fp
 802c3d4:	9803      	ldr	r0, [sp, #12]
 802c3d6:	f7f3 feff 	bl	80201d8 <GUI_GetBitmapPixelIndex>
 802c3da:	2800      	cmp	r0, #0
 802c3dc:	d158      	bne.n	802c490 <GUI_SPRITE_SetPosition+0x5e8>
 802c3de:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 802c3e2:	9a06      	ldr	r2, [sp, #24]
 802c3e4:	429a      	cmp	r2, r3
 802c3e6:	db0e      	blt.n	802c406 <GUI_SPRITE_SetPosition+0x55e>
 802c3e8:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 802c3ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 802c3ee:	428a      	cmp	r2, r1
 802c3f0:	dc09      	bgt.n	802c406 <GUI_SPRITE_SetPosition+0x55e>
 802c3f2:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 802c3f6:	9906      	ldr	r1, [sp, #24]
 802c3f8:	428a      	cmp	r2, r1
 802c3fa:	db04      	blt.n	802c406 <GUI_SPRITE_SetPosition+0x55e>
 802c3fc:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 802c400:	990e      	ldr	r1, [sp, #56]	; 0x38
 802c402:	428a      	cmp	r2, r1
 802c404:	da3d      	bge.n	802c482 <GUI_SPRITE_SetPosition+0x5da>
 802c406:	429f      	cmp	r7, r3
 802c408:	db0c      	blt.n	802c424 <GUI_SPRITE_SetPosition+0x57c>
 802c40a:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 802c40e:	9908      	ldr	r1, [sp, #32]
 802c410:	428b      	cmp	r3, r1
 802c412:	dc07      	bgt.n	802c424 <GUI_SPRITE_SetPosition+0x57c>
 802c414:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 802c418:	42bb      	cmp	r3, r7
 802c41a:	db03      	blt.n	802c424 <GUI_SPRITE_SetPosition+0x57c>
 802c41c:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 802c420:	428b      	cmp	r3, r1
 802c422:	da40      	bge.n	802c4a6 <GUI_SPRITE_SetPosition+0x5fe>
 802c424:	9b05      	ldr	r3, [sp, #20]
 802c426:	622b      	str	r3, [r5, #32]
 802c428:	4454      	add	r4, sl
 802c42a:	9b04      	ldr	r3, [sp, #16]
 802c42c:	4544      	cmp	r4, r8
 802c42e:	441d      	add	r5, r3
 802c430:	44d3      	add	fp, sl
 802c432:	d19a      	bne.n	802c36a <GUI_SPRITE_SetPosition+0x4c2>
 802c434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802c436:	9910      	ldr	r1, [sp, #64]	; 0x40
 802c438:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802c43a:	440b      	add	r3, r1
 802c43c:	930d      	str	r3, [sp, #52]	; 0x34
 802c43e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802c440:	4619      	mov	r1, r3
 802c442:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802c444:	4491      	add	r9, r2
 802c446:	4411      	add	r1, r2
 802c448:	4599      	cmp	r9, r3
 802c44a:	910c      	str	r1, [sp, #48]	; 0x30
 802c44c:	f47f af75 	bne.w	802c33a <GUI_SPRITE_SetPosition+0x492>
 802c450:	a826      	add	r0, sp, #152	; 0x98
 802c452:	f7f3 fabb 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802c456:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802c458:	e697      	b.n	802c18a <GUI_SPRITE_SetPosition+0x2e2>
 802c45a:	bf00      	nop
 802c45c:	200000e8 	.word	0x200000e8
 802c460:	200308b0 	.word	0x200308b0
 802c464:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 802c468:	42bb      	cmp	r3, r7
 802c46a:	dd17      	ble.n	802c49c <GUI_SPRITE_SetPosition+0x5f4>
 802c46c:	9a06      	ldr	r2, [sp, #24]
 802c46e:	4293      	cmp	r3, r2
 802c470:	dc11      	bgt.n	802c496 <GUI_SPRITE_SetPosition+0x5ee>
 802c472:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 802c476:	990e      	ldr	r1, [sp, #56]	; 0x38
 802c478:	4291      	cmp	r1, r2
 802c47a:	db0c      	blt.n	802c496 <GUI_SPRITE_SetPosition+0x5ee>
 802c47c:	2200      	movs	r2, #0
 802c47e:	9205      	str	r2, [sp, #20]
 802c480:	e7b7      	b.n	802c3f2 <GUI_SPRITE_SetPosition+0x54a>
 802c482:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802c484:	6a2a      	ldr	r2, [r5, #32]
 802c486:	9806      	ldr	r0, [sp, #24]
 802c488:	9300      	str	r3, [sp, #0]
 802c48a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802c48c:	f7ff fc62 	bl	802bd54 <_SetBkIndexBuffered>
 802c490:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 802c494:	e7b7      	b.n	802c406 <GUI_SPRITE_SetPosition+0x55e>
 802c496:	2300      	movs	r3, #0
 802c498:	9305      	str	r3, [sp, #20]
 802c49a:	e7c3      	b.n	802c424 <GUI_SPRITE_SetPosition+0x57c>
 802c49c:	2300      	movs	r3, #0
 802c49e:	e781      	b.n	802c3a4 <GUI_SPRITE_SetPosition+0x4fc>
 802c4a0:	2300      	movs	r3, #0
 802c4a2:	930f      	str	r3, [sp, #60]	; 0x3c
 802c4a4:	e753      	b.n	802c34e <GUI_SPRITE_SetPosition+0x4a6>
 802c4a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802c4a8:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 802c4ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802c4ae:	9300      	str	r3, [sp, #0]
 802c4b0:	4638      	mov	r0, r7
 802c4b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802c4b4:	f7ff fc4e 	bl	802bd54 <_SetBkIndexBuffered>
 802c4b8:	e7b4      	b.n	802c424 <GUI_SPRITE_SetPosition+0x57c>
 802c4ba:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 802c4bc:	9205      	str	r2, [sp, #20]
 802c4be:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 802c4c2:	42ba      	cmp	r2, r7
 802c4c4:	dc0d      	bgt.n	802c4e2 <GUI_SPRITE_SetPosition+0x63a>
 802c4c6:	9805      	ldr	r0, [sp, #20]
 802c4c8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 802c4cc:	42b9      	cmp	r1, r7
 802c4ce:	db08      	blt.n	802c4e2 <GUI_SPRITE_SetPosition+0x63a>
 802c4d0:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 802c4d4:	9908      	ldr	r1, [sp, #32]
 802c4d6:	458e      	cmp	lr, r1
 802c4d8:	dc03      	bgt.n	802c4e2 <GUI_SPRITE_SetPosition+0x63a>
 802c4da:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 802c4de:	4288      	cmp	r0, r1
 802c4e0:	da0d      	bge.n	802c4fe <GUI_SPRITE_SetPosition+0x656>
 802c4e2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802c4e4:	6810      	ldr	r0, [r2, #0]
 802c4e6:	2800      	cmp	r0, #0
 802c4e8:	f43f af69 	beq.w	802c3be <GUI_SPRITE_SetPosition+0x516>
 802c4ec:	68c2      	ldr	r2, [r0, #12]
 802c4ee:	931f      	str	r3, [sp, #124]	; 0x7c
 802c4f0:	4639      	mov	r1, r7
 802c4f2:	6953      	ldr	r3, [r2, #20]
 802c4f4:	9a08      	ldr	r2, [sp, #32]
 802c4f6:	4798      	blx	r3
 802c4f8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802c4fa:	9005      	str	r0, [sp, #20]
 802c4fc:	e761      	b.n	802c3c2 <GUI_SPRITE_SetPosition+0x51a>
 802c4fe:	9325      	str	r3, [sp, #148]	; 0x94
 802c500:	1abb      	subs	r3, r7, r2
 802c502:	931f      	str	r3, [sp, #124]	; 0x7c
 802c504:	ebce 0201 	rsb	r2, lr, r1
 802c508:	4619      	mov	r1, r3
 802c50a:	9b05      	ldr	r3, [sp, #20]
 802c50c:	9223      	str	r2, [sp, #140]	; 0x8c
 802c50e:	6958      	ldr	r0, [r3, #20]
 802c510:	f7f3 fe62 	bl	80201d8 <GUI_GetBitmapPixelIndex>
 802c514:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802c516:	2800      	cmp	r0, #0
 802c518:	d0e3      	beq.n	802c4e2 <GUI_SPRITE_SetPosition+0x63a>
 802c51a:	9805      	ldr	r0, [sp, #20]
 802c51c:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 802c520:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 802c524:	1a52      	subs	r2, r2, r1
 802c526:	9923      	ldr	r1, [sp, #140]	; 0x8c
 802c528:	fb02 1201 	mla	r2, r2, r1, r1
 802c52c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 802c52e:	440a      	add	r2, r1
 802c530:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 802c534:	6a12      	ldr	r2, [r2, #32]
 802c536:	9205      	str	r2, [sp, #20]
 802c538:	e743      	b.n	802c3c2 <GUI_SPRITE_SetPosition+0x51a>
 802c53a:	2300      	movs	r3, #0
 802c53c:	9305      	str	r3, [sp, #20]
 802c53e:	e741      	b.n	802c3c4 <GUI_SPRITE_SetPosition+0x51c>
 802c540:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 802c544:	9a08      	ldr	r2, [sp, #32]
 802c546:	4293      	cmp	r3, r2
 802c548:	f73f ad83 	bgt.w	802c052 <GUI_SPRITE_SetPosition+0x1aa>
 802c54c:	2301      	movs	r3, #1
 802c54e:	930d      	str	r3, [sp, #52]	; 0x34
 802c550:	e5f1      	b.n	802c136 <GUI_SPRITE_SetPosition+0x28e>
 802c552:	bf00      	nop

0802c554 <GUI_TIMER__GetFirstTimer>:
 802c554:	b530      	push	{r4, r5, lr}
 802c556:	4b0a      	ldr	r3, [pc, #40]	; (802c580 <GUI_TIMER__GetFirstTimer+0x2c>)
 802c558:	681c      	ldr	r4, [r3, #0]
 802c55a:	2300      	movs	r3, #0
 802c55c:	b083      	sub	sp, #12
 802c55e:	6003      	str	r3, [r0, #0]
 802c560:	b15c      	cbz	r4, 802c57a <GUI_TIMER__GetFirstTimer+0x26>
 802c562:	4605      	mov	r5, r0
 802c564:	4620      	mov	r0, r4
 802c566:	f7f3 fa1f 	bl	801f9a8 <GUI_ALLOC_LockH>
 802c56a:	ab02      	add	r3, sp, #8
 802c56c:	6902      	ldr	r2, [r0, #16]
 802c56e:	f843 0d04 	str.w	r0, [r3, #-4]!
 802c572:	602a      	str	r2, [r5, #0]
 802c574:	4618      	mov	r0, r3
 802c576:	f7f3 fa29 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802c57a:	4620      	mov	r0, r4
 802c57c:	b003      	add	sp, #12
 802c57e:	bd30      	pop	{r4, r5, pc}
 802c580:	2002e4e0 	.word	0x2002e4e0

0802c584 <GUI_TIMER__GetNextTimerLin>:
 802c584:	b570      	push	{r4, r5, r6, lr}
 802c586:	2300      	movs	r3, #0
 802c588:	b082      	sub	sp, #8
 802c58a:	600b      	str	r3, [r1, #0]
 802c58c:	b918      	cbnz	r0, 802c596 <GUI_TIMER__GetNextTimerLin+0x12>
 802c58e:	4604      	mov	r4, r0
 802c590:	4620      	mov	r0, r4
 802c592:	b002      	add	sp, #8
 802c594:	bd70      	pop	{r4, r5, r6, pc}
 802c596:	460d      	mov	r5, r1
 802c598:	f7f3 fa06 	bl	801f9a8 <GUI_ALLOC_LockH>
 802c59c:	6884      	ldr	r4, [r0, #8]
 802c59e:	9001      	str	r0, [sp, #4]
 802c5a0:	ae01      	add	r6, sp, #4
 802c5a2:	b92c      	cbnz	r4, 802c5b0 <GUI_TIMER__GetNextTimerLin+0x2c>
 802c5a4:	4630      	mov	r0, r6
 802c5a6:	f7f3 fa11 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802c5aa:	4620      	mov	r0, r4
 802c5ac:	b002      	add	sp, #8
 802c5ae:	bd70      	pop	{r4, r5, r6, pc}
 802c5b0:	4630      	mov	r0, r6
 802c5b2:	f7f3 fa0b 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802c5b6:	4620      	mov	r0, r4
 802c5b8:	f7f3 f9f6 	bl	801f9a8 <GUI_ALLOC_LockH>
 802c5bc:	6903      	ldr	r3, [r0, #16]
 802c5be:	9001      	str	r0, [sp, #4]
 802c5c0:	602b      	str	r3, [r5, #0]
 802c5c2:	e7ef      	b.n	802c5a4 <GUI_TIMER__GetNextTimerLin+0x20>

0802c5c4 <GUI_TIMER_Delete>:
 802c5c4:	b900      	cbnz	r0, 802c5c8 <GUI_TIMER_Delete+0x4>
 802c5c6:	4770      	bx	lr
 802c5c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c5cc:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 802c690 <GUI_TIMER_Delete+0xcc>
 802c5d0:	b082      	sub	sp, #8
 802c5d2:	4605      	mov	r5, r0
 802c5d4:	f7f5 f872 	bl	80216bc <GUI_Lock>
 802c5d8:	f8d8 4000 	ldr.w	r4, [r8]
 802c5dc:	42a5      	cmp	r5, r4
 802c5de:	d042      	beq.n	802c666 <GUI_TIMER_Delete+0xa2>
 802c5e0:	466e      	mov	r6, sp
 802c5e2:	b91c      	cbnz	r4, 802c5ec <GUI_TIMER_Delete+0x28>
 802c5e4:	e017      	b.n	802c616 <GUI_TIMER_Delete+0x52>
 802c5e6:	f7f3 f9f1 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802c5ea:	b1a4      	cbz	r4, 802c616 <GUI_TIMER_Delete+0x52>
 802c5ec:	4620      	mov	r0, r4
 802c5ee:	f7f3 f9db 	bl	801f9a8 <GUI_ALLOC_LockH>
 802c5f2:	6884      	ldr	r4, [r0, #8]
 802c5f4:	9000      	str	r0, [sp, #0]
 802c5f6:	42a5      	cmp	r5, r4
 802c5f8:	4630      	mov	r0, r6
 802c5fa:	d1f4      	bne.n	802c5e6 <GUI_TIMER_Delete+0x22>
 802c5fc:	4628      	mov	r0, r5
 802c5fe:	f7f3 f9d3 	bl	801f9a8 <GUI_ALLOC_LockH>
 802c602:	9b00      	ldr	r3, [sp, #0]
 802c604:	6882      	ldr	r2, [r0, #8]
 802c606:	9001      	str	r0, [sp, #4]
 802c608:	a801      	add	r0, sp, #4
 802c60a:	609a      	str	r2, [r3, #8]
 802c60c:	f7f3 f9de 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802c610:	4630      	mov	r0, r6
 802c612:	f7f3 f9db 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802c616:	4628      	mov	r0, r5
 802c618:	f7f3 f9c6 	bl	801f9a8 <GUI_ALLOC_LockH>
 802c61c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 802c620:	9000      	str	r0, [sp, #0]
 802c622:	42a5      	cmp	r5, r4
 802c624:	4b1a      	ldr	r3, [pc, #104]	; (802c690 <GUI_TIMER_Delete+0xcc>)
 802c626:	d02c      	beq.n	802c682 <GUI_TIMER_Delete+0xbe>
 802c628:	af01      	add	r7, sp, #4
 802c62a:	b91c      	cbnz	r4, 802c634 <GUI_TIMER_Delete+0x70>
 802c62c:	e010      	b.n	802c650 <GUI_TIMER_Delete+0x8c>
 802c62e:	f7f3 f9cd 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802c632:	b16c      	cbz	r4, 802c650 <GUI_TIMER_Delete+0x8c>
 802c634:	4620      	mov	r0, r4
 802c636:	f7f3 f9b7 	bl	801f9a8 <GUI_ALLOC_LockH>
 802c63a:	6844      	ldr	r4, [r0, #4]
 802c63c:	9001      	str	r0, [sp, #4]
 802c63e:	42a5      	cmp	r5, r4
 802c640:	4603      	mov	r3, r0
 802c642:	4638      	mov	r0, r7
 802c644:	d1f3      	bne.n	802c62e <GUI_TIMER_Delete+0x6a>
 802c646:	9a00      	ldr	r2, [sp, #0]
 802c648:	6852      	ldr	r2, [r2, #4]
 802c64a:	605a      	str	r2, [r3, #4]
 802c64c:	f7f3 f9be 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802c650:	4630      	mov	r0, r6
 802c652:	f7f3 f9bb 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802c656:	4628      	mov	r0, r5
 802c658:	f7f3 fb48 	bl	801fcec <GUI_ALLOC_Free>
 802c65c:	f7f5 f824 	bl	80216a8 <GUI_Unlock>
 802c660:	b002      	add	sp, #8
 802c662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c666:	4628      	mov	r0, r5
 802c668:	f7f3 f99e 	bl	801f9a8 <GUI_ALLOC_LockH>
 802c66c:	af02      	add	r7, sp, #8
 802c66e:	6883      	ldr	r3, [r0, #8]
 802c670:	f847 0d04 	str.w	r0, [r7, #-4]!
 802c674:	4638      	mov	r0, r7
 802c676:	f8c8 3000 	str.w	r3, [r8]
 802c67a:	466e      	mov	r6, sp
 802c67c:	f7f3 f9a6 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802c680:	e7c9      	b.n	802c616 <GUI_TIMER_Delete+0x52>
 802c682:	6842      	ldr	r2, [r0, #4]
 802c684:	605a      	str	r2, [r3, #4]
 802c686:	4630      	mov	r0, r6
 802c688:	f7f3 f9a0 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802c68c:	e7e3      	b.n	802c656 <GUI_TIMER_Delete+0x92>
 802c68e:	bf00      	nop
 802c690:	2002e4e0 	.word	0x2002e4e0

0802c694 <GUI_TIMER_GetFlag>:
 802c694:	b530      	push	{r4, r5, lr}
 802c696:	b083      	sub	sp, #12
 802c698:	b918      	cbnz	r0, 802c6a2 <GUI_TIMER_GetFlag+0xe>
 802c69a:	2401      	movs	r4, #1
 802c69c:	4620      	mov	r0, r4
 802c69e:	b003      	add	sp, #12
 802c6a0:	bd30      	pop	{r4, r5, pc}
 802c6a2:	4604      	mov	r4, r0
 802c6a4:	460d      	mov	r5, r1
 802c6a6:	f7f5 f809 	bl	80216bc <GUI_Lock>
 802c6aa:	4620      	mov	r0, r4
 802c6ac:	f7f3 f97c 	bl	801f9a8 <GUI_ALLOC_LockH>
 802c6b0:	ab02      	add	r3, sp, #8
 802c6b2:	8982      	ldrh	r2, [r0, #12]
 802c6b4:	f843 0d04 	str.w	r0, [r3, #-4]!
 802c6b8:	422a      	tst	r2, r5
 802c6ba:	4618      	mov	r0, r3
 802c6bc:	bf14      	ite	ne
 802c6be:	2401      	movne	r4, #1
 802c6c0:	2400      	moveq	r4, #0
 802c6c2:	f7f3 f983 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802c6c6:	f7f4 ffef 	bl	80216a8 <GUI_Unlock>
 802c6ca:	4620      	mov	r0, r4
 802c6cc:	b003      	add	sp, #12
 802c6ce:	bd30      	pop	{r4, r5, pc}

0802c6d0 <GUI_DispDecShift>:
 802c6d0:	b510      	push	{r4, lr}
 802c6d2:	b084      	sub	sp, #16
 802c6d4:	ab04      	add	r3, sp, #16
 802c6d6:	ac01      	add	r4, sp, #4
 802c6d8:	f843 4d10 	str.w	r4, [r3, #-16]!
 802c6dc:	f7f3 fc0a 	bl	801fef4 <GUI_AddDecShift>
 802c6e0:	4620      	mov	r0, r4
 802c6e2:	f7f4 fb5f 	bl	8020da4 <GUI_DispString>
 802c6e6:	b004      	add	sp, #16
 802c6e8:	bd10      	pop	{r4, pc}
 802c6ea:	bf00      	nop

0802c6ec <GUI__CompactPixelIndices>:
 802c6ec:	2a08      	cmp	r2, #8
 802c6ee:	b410      	push	{r4}
 802c6f0:	dd0e      	ble.n	802c710 <GUI__CompactPixelIndices+0x24>
 802c6f2:	2a10      	cmp	r2, #16
 802c6f4:	dc1c      	bgt.n	802c730 <GUI__CompactPixelIndices+0x44>
 802c6f6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 802c6fa:	4603      	mov	r3, r0
 802c6fc:	f850 2b04 	ldr.w	r2, [r0], #4
 802c700:	f823 2b02 	strh.w	r2, [r3], #2
 802c704:	4299      	cmp	r1, r3
 802c706:	d1f9      	bne.n	802c6fc <GUI__CompactPixelIndices+0x10>
 802c708:	2001      	movs	r0, #1
 802c70a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c70e:	4770      	bx	lr
 802c710:	2a02      	cmp	r2, #2
 802c712:	d011      	beq.n	802c738 <GUI__CompactPixelIndices+0x4c>
 802c714:	2a04      	cmp	r2, #4
 802c716:	f000 8090 	beq.w	802c83a <GUI__CompactPixelIndices+0x14e>
 802c71a:	2a01      	cmp	r2, #1
 802c71c:	d03c      	beq.n	802c798 <GUI__CompactPixelIndices+0xac>
 802c71e:	4401      	add	r1, r0
 802c720:	4603      	mov	r3, r0
 802c722:	f850 2b04 	ldr.w	r2, [r0], #4
 802c726:	f803 2b01 	strb.w	r2, [r3], #1
 802c72a:	4299      	cmp	r1, r3
 802c72c:	d1f9      	bne.n	802c722 <GUI__CompactPixelIndices+0x36>
 802c72e:	e7eb      	b.n	802c708 <GUI__CompactPixelIndices+0x1c>
 802c730:	2000      	movs	r0, #0
 802c732:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c736:	4770      	bx	lr
 802c738:	f100 0210 	add.w	r2, r0, #16
 802c73c:	f852 3c10 	ldr.w	r3, [r2, #-16]
 802c740:	2901      	cmp	r1, #1
 802c742:	ea4f 1383 	mov.w	r3, r3, lsl #6
 802c746:	b2db      	uxtb	r3, r3
 802c748:	d023      	beq.n	802c792 <GUI__CompactPixelIndices+0xa6>
 802c74a:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 802c74e:	0124      	lsls	r4, r4, #4
 802c750:	f004 0430 	and.w	r4, r4, #48	; 0x30
 802c754:	2902      	cmp	r1, #2
 802c756:	ea43 0304 	orr.w	r3, r3, r4
 802c75a:	d01a      	beq.n	802c792 <GUI__CompactPixelIndices+0xa6>
 802c75c:	f852 4c08 	ldr.w	r4, [r2, #-8]
 802c760:	00a4      	lsls	r4, r4, #2
 802c762:	f004 040c 	and.w	r4, r4, #12
 802c766:	2903      	cmp	r1, #3
 802c768:	ea43 0304 	orr.w	r3, r3, r4
 802c76c:	d011      	beq.n	802c792 <GUI__CompactPixelIndices+0xa6>
 802c76e:	f852 4c04 	ldr.w	r4, [r2, #-4]
 802c772:	f004 0403 	and.w	r4, r4, #3
 802c776:	4323      	orrs	r3, r4
 802c778:	3904      	subs	r1, #4
 802c77a:	f800 3b01 	strb.w	r3, [r0], #1
 802c77e:	f102 0210 	add.w	r2, r2, #16
 802c782:	d0c1      	beq.n	802c708 <GUI__CompactPixelIndices+0x1c>
 802c784:	f852 3c10 	ldr.w	r3, [r2, #-16]
 802c788:	2901      	cmp	r1, #1
 802c78a:	ea4f 1383 	mov.w	r3, r3, lsl #6
 802c78e:	b2db      	uxtb	r3, r3
 802c790:	d1db      	bne.n	802c74a <GUI__CompactPixelIndices+0x5e>
 802c792:	7003      	strb	r3, [r0, #0]
 802c794:	2001      	movs	r0, #1
 802c796:	e7b8      	b.n	802c70a <GUI__CompactPixelIndices+0x1e>
 802c798:	f100 0220 	add.w	r2, r0, #32
 802c79c:	f852 3c20 	ldr.w	r3, [r2, #-32]
 802c7a0:	2901      	cmp	r1, #1
 802c7a2:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 802c7a6:	b2db      	uxtb	r3, r3
 802c7a8:	d0f3      	beq.n	802c792 <GUI__CompactPixelIndices+0xa6>
 802c7aa:	f852 4c1c 	ldr.w	r4, [r2, #-28]
 802c7ae:	01a4      	lsls	r4, r4, #6
 802c7b0:	f004 0440 	and.w	r4, r4, #64	; 0x40
 802c7b4:	2902      	cmp	r1, #2
 802c7b6:	ea43 0304 	orr.w	r3, r3, r4
 802c7ba:	d0ea      	beq.n	802c792 <GUI__CompactPixelIndices+0xa6>
 802c7bc:	f852 4c18 	ldr.w	r4, [r2, #-24]
 802c7c0:	0164      	lsls	r4, r4, #5
 802c7c2:	f004 0420 	and.w	r4, r4, #32
 802c7c6:	2903      	cmp	r1, #3
 802c7c8:	ea43 0304 	orr.w	r3, r3, r4
 802c7cc:	d0e1      	beq.n	802c792 <GUI__CompactPixelIndices+0xa6>
 802c7ce:	f852 4c14 	ldr.w	r4, [r2, #-20]
 802c7d2:	0124      	lsls	r4, r4, #4
 802c7d4:	f004 0410 	and.w	r4, r4, #16
 802c7d8:	2904      	cmp	r1, #4
 802c7da:	ea43 0304 	orr.w	r3, r3, r4
 802c7de:	d0d8      	beq.n	802c792 <GUI__CompactPixelIndices+0xa6>
 802c7e0:	f852 4c10 	ldr.w	r4, [r2, #-16]
 802c7e4:	00e4      	lsls	r4, r4, #3
 802c7e6:	f004 0408 	and.w	r4, r4, #8
 802c7ea:	2905      	cmp	r1, #5
 802c7ec:	ea43 0304 	orr.w	r3, r3, r4
 802c7f0:	d0cf      	beq.n	802c792 <GUI__CompactPixelIndices+0xa6>
 802c7f2:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 802c7f6:	00a4      	lsls	r4, r4, #2
 802c7f8:	f004 0404 	and.w	r4, r4, #4
 802c7fc:	2906      	cmp	r1, #6
 802c7fe:	ea43 0304 	orr.w	r3, r3, r4
 802c802:	d0c6      	beq.n	802c792 <GUI__CompactPixelIndices+0xa6>
 802c804:	f852 4c08 	ldr.w	r4, [r2, #-8]
 802c808:	0064      	lsls	r4, r4, #1
 802c80a:	f004 0402 	and.w	r4, r4, #2
 802c80e:	3907      	subs	r1, #7
 802c810:	ea43 0304 	orr.w	r3, r3, r4
 802c814:	f102 0220 	add.w	r2, r2, #32
 802c818:	d0bb      	beq.n	802c792 <GUI__CompactPixelIndices+0xa6>
 802c81a:	f852 4c24 	ldr.w	r4, [r2, #-36]
 802c81e:	f004 0401 	and.w	r4, r4, #1
 802c822:	4323      	orrs	r3, r4
 802c824:	f800 3b01 	strb.w	r3, [r0], #1
 802c828:	f852 3c20 	ldr.w	r3, [r2, #-32]
 802c82c:	2901      	cmp	r1, #1
 802c82e:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 802c832:	b2db      	uxtb	r3, r3
 802c834:	d1b9      	bne.n	802c7aa <GUI__CompactPixelIndices+0xbe>
 802c836:	7003      	strb	r3, [r0, #0]
 802c838:	e7ac      	b.n	802c794 <GUI__CompactPixelIndices+0xa8>
 802c83a:	f100 0408 	add.w	r4, r0, #8
 802c83e:	f854 3c08 	ldr.w	r3, [r4, #-8]
 802c842:	2901      	cmp	r1, #1
 802c844:	ea4f 1303 	mov.w	r3, r3, lsl #4
 802c848:	b2db      	uxtb	r3, r3
 802c84a:	d012      	beq.n	802c872 <GUI__CompactPixelIndices+0x186>
 802c84c:	f854 2c04 	ldr.w	r2, [r4, #-4]
 802c850:	f002 020f 	and.w	r2, r2, #15
 802c854:	4313      	orrs	r3, r2
 802c856:	3902      	subs	r1, #2
 802c858:	f800 3b01 	strb.w	r3, [r0], #1
 802c85c:	f104 0408 	add.w	r4, r4, #8
 802c860:	f43f af52 	beq.w	802c708 <GUI__CompactPixelIndices+0x1c>
 802c864:	f854 3c08 	ldr.w	r3, [r4, #-8]
 802c868:	2901      	cmp	r1, #1
 802c86a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 802c86e:	b2db      	uxtb	r3, r3
 802c870:	d1ec      	bne.n	802c84c <GUI__CompactPixelIndices+0x160>
 802c872:	7003      	strb	r3, [r0, #0]
 802c874:	f85d 4b04 	ldr.w	r4, [sp], #4
 802c878:	4608      	mov	r0, r1
 802c87a:	4770      	bx	lr

0802c87c <GUI__CompactPixelIndicesEx>:
 802c87c:	2a08      	cmp	r2, #8
 802c87e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c882:	460c      	mov	r4, r1
 802c884:	681f      	ldr	r7, [r3, #0]
 802c886:	4605      	mov	r5, r0
 802c888:	dd0c      	ble.n	802c8a4 <GUI__CompactPixelIndicesEx+0x28>
 802c88a:	2a10      	cmp	r2, #16
 802c88c:	dc21      	bgt.n	802c8d2 <GUI__CompactPixelIndicesEx+0x56>
 802c88e:	691e      	ldr	r6, [r3, #16]
 802c890:	2e00      	cmp	r6, #0
 802c892:	f000 8091 	beq.w	802c9b8 <GUI__CompactPixelIndicesEx+0x13c>
 802c896:	4622      	mov	r2, r4
 802c898:	4629      	mov	r1, r5
 802c89a:	2302      	movs	r3, #2
 802c89c:	47b0      	blx	r6
 802c89e:	2001      	movs	r0, #1
 802c8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c8a4:	3a01      	subs	r2, #1
 802c8a6:	2a07      	cmp	r2, #7
 802c8a8:	d810      	bhi.n	802c8cc <GUI__CompactPixelIndicesEx+0x50>
 802c8aa:	e8df f002 	tbb	[pc, r2]
 802c8ae:	5104      	.short	0x5104
 802c8b0:	0f0f770f 	.word	0x0f0f770f
 802c8b4:	9a0f      	.short	0x9a0f
 802c8b6:	f100 0820 	add.w	r8, r0, #32
 802c8ba:	f858 0c20 	ldr.w	r0, [r8, #-32]
 802c8be:	47b8      	blx	r7
 802c8c0:	2c01      	cmp	r4, #1
 802c8c2:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 802c8c6:	b2c6      	uxtb	r6, r0
 802c8c8:	d106      	bne.n	802c8d8 <GUI__CompactPixelIndicesEx+0x5c>
 802c8ca:	702e      	strb	r6, [r5, #0]
 802c8cc:	2001      	movs	r0, #1
 802c8ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c8d2:	2000      	movs	r0, #0
 802c8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c8d8:	f858 0c1c 	ldr.w	r0, [r8, #-28]
 802c8dc:	47b8      	blx	r7
 802c8de:	2c02      	cmp	r4, #2
 802c8e0:	ea46 1080 	orr.w	r0, r6, r0, lsl #6
 802c8e4:	b2c6      	uxtb	r6, r0
 802c8e6:	d0f0      	beq.n	802c8ca <GUI__CompactPixelIndicesEx+0x4e>
 802c8e8:	f858 0c18 	ldr.w	r0, [r8, #-24]
 802c8ec:	47b8      	blx	r7
 802c8ee:	2c03      	cmp	r4, #3
 802c8f0:	ea46 1040 	orr.w	r0, r6, r0, lsl #5
 802c8f4:	b2c6      	uxtb	r6, r0
 802c8f6:	d0e8      	beq.n	802c8ca <GUI__CompactPixelIndicesEx+0x4e>
 802c8f8:	f858 0c14 	ldr.w	r0, [r8, #-20]
 802c8fc:	47b8      	blx	r7
 802c8fe:	2c04      	cmp	r4, #4
 802c900:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 802c904:	b2c6      	uxtb	r6, r0
 802c906:	d0e0      	beq.n	802c8ca <GUI__CompactPixelIndicesEx+0x4e>
 802c908:	f858 0c10 	ldr.w	r0, [r8, #-16]
 802c90c:	47b8      	blx	r7
 802c90e:	2c05      	cmp	r4, #5
 802c910:	ea46 00c0 	orr.w	r0, r6, r0, lsl #3
 802c914:	b2c6      	uxtb	r6, r0
 802c916:	d0d8      	beq.n	802c8ca <GUI__CompactPixelIndicesEx+0x4e>
 802c918:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 802c91c:	47b8      	blx	r7
 802c91e:	2c06      	cmp	r4, #6
 802c920:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 802c924:	b2c6      	uxtb	r6, r0
 802c926:	d0d0      	beq.n	802c8ca <GUI__CompactPixelIndicesEx+0x4e>
 802c928:	f858 0c08 	ldr.w	r0, [r8, #-8]
 802c92c:	47b8      	blx	r7
 802c92e:	2c07      	cmp	r4, #7
 802c930:	ea46 0040 	orr.w	r0, r6, r0, lsl #1
 802c934:	b2c6      	uxtb	r6, r0
 802c936:	d0c8      	beq.n	802c8ca <GUI__CompactPixelIndicesEx+0x4e>
 802c938:	f858 0c04 	ldr.w	r0, [r8, #-4]
 802c93c:	47b8      	blx	r7
 802c93e:	3c08      	subs	r4, #8
 802c940:	ea40 0006 	orr.w	r0, r0, r6
 802c944:	f805 0b01 	strb.w	r0, [r5], #1
 802c948:	f108 0820 	add.w	r8, r8, #32
 802c94c:	d1b5      	bne.n	802c8ba <GUI__CompactPixelIndicesEx+0x3e>
 802c94e:	e7bd      	b.n	802c8cc <GUI__CompactPixelIndicesEx+0x50>
 802c950:	f100 0810 	add.w	r8, r0, #16
 802c954:	f858 0c10 	ldr.w	r0, [r8, #-16]
 802c958:	47b8      	blx	r7
 802c95a:	2c01      	cmp	r4, #1
 802c95c:	ea4f 1080 	mov.w	r0, r0, lsl #6
 802c960:	b2c6      	uxtb	r6, r0
 802c962:	d0b2      	beq.n	802c8ca <GUI__CompactPixelIndicesEx+0x4e>
 802c964:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 802c968:	47b8      	blx	r7
 802c96a:	2c02      	cmp	r4, #2
 802c96c:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 802c970:	b2c6      	uxtb	r6, r0
 802c972:	d0aa      	beq.n	802c8ca <GUI__CompactPixelIndicesEx+0x4e>
 802c974:	f858 0c08 	ldr.w	r0, [r8, #-8]
 802c978:	47b8      	blx	r7
 802c97a:	2c03      	cmp	r4, #3
 802c97c:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 802c980:	b2c6      	uxtb	r6, r0
 802c982:	d0a2      	beq.n	802c8ca <GUI__CompactPixelIndicesEx+0x4e>
 802c984:	f858 0c04 	ldr.w	r0, [r8, #-4]
 802c988:	47b8      	blx	r7
 802c98a:	3c04      	subs	r4, #4
 802c98c:	ea40 0006 	orr.w	r0, r0, r6
 802c990:	f805 0b01 	strb.w	r0, [r5], #1
 802c994:	f108 0810 	add.w	r8, r8, #16
 802c998:	d1dc      	bne.n	802c954 <GUI__CompactPixelIndicesEx+0xd8>
 802c99a:	e797      	b.n	802c8cc <GUI__CompactPixelIndicesEx+0x50>
 802c99c:	f100 0808 	add.w	r8, r0, #8
 802c9a0:	f858 0c08 	ldr.w	r0, [r8, #-8]
 802c9a4:	47b8      	blx	r7
 802c9a6:	2c01      	cmp	r4, #1
 802c9a8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 802c9ac:	b2c6      	uxtb	r6, r0
 802c9ae:	d10c      	bne.n	802c9ca <GUI__CompactPixelIndicesEx+0x14e>
 802c9b0:	702e      	strb	r6, [r5, #0]
 802c9b2:	4620      	mov	r0, r4
 802c9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c9b8:	1e86      	subs	r6, r0, #2
 802c9ba:	f855 0b04 	ldr.w	r0, [r5], #4
 802c9be:	47b8      	blx	r7
 802c9c0:	3c01      	subs	r4, #1
 802c9c2:	f826 0f02 	strh.w	r0, [r6, #2]!
 802c9c6:	d1f8      	bne.n	802c9ba <GUI__CompactPixelIndicesEx+0x13e>
 802c9c8:	e780      	b.n	802c8cc <GUI__CompactPixelIndicesEx+0x50>
 802c9ca:	f858 0c04 	ldr.w	r0, [r8, #-4]
 802c9ce:	47b8      	blx	r7
 802c9d0:	3c02      	subs	r4, #2
 802c9d2:	ea40 0006 	orr.w	r0, r0, r6
 802c9d6:	f805 0b01 	strb.w	r0, [r5], #1
 802c9da:	f108 0808 	add.w	r8, r8, #8
 802c9de:	d1df      	bne.n	802c9a0 <GUI__CompactPixelIndicesEx+0x124>
 802c9e0:	e774      	b.n	802c8cc <GUI__CompactPixelIndicesEx+0x50>
 802c9e2:	691e      	ldr	r6, [r3, #16]
 802c9e4:	b13e      	cbz	r6, 802c9f6 <GUI__CompactPixelIndicesEx+0x17a>
 802c9e6:	4628      	mov	r0, r5
 802c9e8:	4622      	mov	r2, r4
 802c9ea:	2301      	movs	r3, #1
 802c9ec:	4629      	mov	r1, r5
 802c9ee:	47b0      	blx	r6
 802c9f0:	2001      	movs	r0, #1
 802c9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c9f6:	1e6e      	subs	r6, r5, #1
 802c9f8:	f855 0b04 	ldr.w	r0, [r5], #4
 802c9fc:	47b8      	blx	r7
 802c9fe:	3c01      	subs	r4, #1
 802ca00:	f806 0f01 	strb.w	r0, [r6, #1]!
 802ca04:	d1f8      	bne.n	802c9f8 <GUI__CompactPixelIndicesEx+0x17c>
 802ca06:	e761      	b.n	802c8cc <GUI__CompactPixelIndicesEx+0x50>

0802ca08 <GUI__DrawTwinArc4>:
 802ca08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ca0c:	b093      	sub	sp, #76	; 0x4c
 802ca0e:	4680      	mov	r8, r0
 802ca10:	460c      	mov	r4, r1
 802ca12:	461e      	mov	r6, r3
 802ca14:	4617      	mov	r7, r2
 802ca16:	f7f4 fe51 	bl	80216bc <GUI_Lock>
 802ca1a:	4ba0      	ldr	r3, [pc, #640]	; (802cc9c <GUI__DrawTwinArc4+0x294>)
 802ca1c:	6819      	ldr	r1, [r3, #0]
 802ca1e:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 802ca20:	6d09      	ldr	r1, [r1, #80]	; 0x50
 802ca22:	eb05 0308 	add.w	r3, r5, r8
 802ca26:	19ea      	adds	r2, r5, r7
 802ca28:	440c      	add	r4, r1
 802ca2a:	a810      	add	r0, sp, #64	; 0x40
 802ca2c:	4431      	add	r1, r6
 802ca2e:	9309      	str	r3, [sp, #36]	; 0x24
 802ca30:	920a      	str	r2, [sp, #40]	; 0x28
 802ca32:	910b      	str	r1, [sp, #44]	; 0x2c
 802ca34:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 802ca38:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 802ca3c:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 802ca40:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 802ca44:	f7fb fad6 	bl	8027ff4 <WM__InitIVRSearch>
 802ca48:	2800      	cmp	r0, #0
 802ca4a:	d07e      	beq.n	802cb4a <GUI__DrawTwinArc4+0x142>
 802ca4c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802ca4e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802ca50:	3b01      	subs	r3, #1
 802ca52:	fb02 f202 	mul.w	r2, r2, r2
 802ca56:	9302      	str	r3, [sp, #8]
 802ca58:	fb03 f303 	mul.w	r3, r3, r3
 802ca5c:	9308      	str	r3, [sp, #32]
 802ca5e:	1ad3      	subs	r3, r2, r3
 802ca60:	930d      	str	r3, [sp, #52]	; 0x34
 802ca62:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802ca64:	9203      	str	r2, [sp, #12]
 802ca66:	3b02      	subs	r3, #2
 802ca68:	9304      	str	r3, [sp, #16]
 802ca6a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802ca6c:	3b03      	subs	r3, #3
 802ca6e:	930f      	str	r3, [sp, #60]	; 0x3c
 802ca70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802ca72:	18e3      	adds	r3, r4, r3
 802ca74:	930c      	str	r3, [sp, #48]	; 0x30
 802ca76:	1ca3      	adds	r3, r4, #2
 802ca78:	930e      	str	r3, [sp, #56]	; 0x38
 802ca7a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802ca7c:	2b00      	cmp	r3, #0
 802ca7e:	dd60      	ble.n	802cb42 <GUI__DrawTwinArc4+0x13a>
 802ca80:	981d      	ldr	r0, [sp, #116]	; 0x74
 802ca82:	f7f3 fc67 	bl	8020354 <GUI_SetColor>
 802ca86:	9b02      	ldr	r3, [sp, #8]
 802ca88:	2b00      	cmp	r3, #0
 802ca8a:	d063      	beq.n	802cb54 <GUI__DrawTwinArc4+0x14c>
 802ca8c:	461d      	mov	r5, r3
 802ca8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802ca90:	980d      	ldr	r0, [sp, #52]	; 0x34
 802ca92:	461a      	mov	r2, r3
 802ca94:	ebc5 0802 	rsb	r8, r5, r2
 802ca98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ca9a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802ca9c:	1a9b      	subs	r3, r3, r2
 802ca9e:	461a      	mov	r2, r3
 802caa0:	9306      	str	r3, [sp, #24]
 802caa2:	462b      	mov	r3, r5
 802caa4:	4413      	add	r3, r2
 802caa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802caa8:	9305      	str	r3, [sp, #20]
 802caaa:	ebc8 0202 	rsb	r2, r8, r2
 802caae:	9207      	str	r2, [sp, #28]
 802cab0:	4699      	mov	r9, r3
 802cab2:	f7f5 fced 	bl	8022490 <GUI__sqrt32>
 802cab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cab8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802caba:	eb03 0b02 	add.w	fp, r3, r2
 802cabe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802cac0:	4606      	mov	r6, r0
 802cac2:	ebc2 0a03 	rsb	sl, r2, r3
 802cac6:	2000      	movs	r0, #0
 802cac8:	ebc0 070b 	rsb	r7, r0, fp
 802cacc:	ebc6 030b 	rsb	r3, r6, fp
 802cad0:	3f01      	subs	r7, #1
 802cad2:	4450      	add	r0, sl
 802cad4:	1c44      	adds	r4, r0, #1
 802cad6:	4641      	mov	r1, r8
 802cad8:	4618      	mov	r0, r3
 802cada:	463a      	mov	r2, r7
 802cadc:	4456      	add	r6, sl
 802cade:	9301      	str	r3, [sp, #4]
 802cae0:	f7f5 ff1c 	bl	802291c <LCD_DrawHLine>
 802cae4:	4641      	mov	r1, r8
 802cae6:	4620      	mov	r0, r4
 802cae8:	4632      	mov	r2, r6
 802caea:	f7f5 ff17 	bl	802291c <LCD_DrawHLine>
 802caee:	9b01      	ldr	r3, [sp, #4]
 802caf0:	4649      	mov	r1, r9
 802caf2:	4618      	mov	r0, r3
 802caf4:	463a      	mov	r2, r7
 802caf6:	f7f5 ff11 	bl	802291c <LCD_DrawHLine>
 802cafa:	4620      	mov	r0, r4
 802cafc:	4632      	mov	r2, r6
 802cafe:	4649      	mov	r1, r9
 802cb00:	f7f5 ff0c 	bl	802291c <LCD_DrawHLine>
 802cb04:	9a04      	ldr	r2, [sp, #16]
 802cb06:	9b06      	ldr	r3, [sp, #24]
 802cb08:	4413      	add	r3, r2
 802cb0a:	9a05      	ldr	r2, [sp, #20]
 802cb0c:	1a9b      	subs	r3, r3, r2
 802cb0e:	3d01      	subs	r5, #1
 802cb10:	9a03      	ldr	r2, [sp, #12]
 802cb12:	4499      	add	r9, r3
 802cb14:	9b07      	ldr	r3, [sp, #28]
 802cb16:	fb05 f405 	mul.w	r4, r5, r5
 802cb1a:	eba2 0004 	sub.w	r0, r2, r4
 802cb1e:	4498      	add	r8, r3
 802cb20:	d018      	beq.n	802cb54 <GUI__DrawTwinArc4+0x14c>
 802cb22:	f7f5 fcb5 	bl	8022490 <GUI__sqrt32>
 802cb26:	9b02      	ldr	r3, [sp, #8]
 802cb28:	42ab      	cmp	r3, r5
 802cb2a:	4606      	mov	r6, r0
 802cb2c:	dc01      	bgt.n	802cb32 <GUI__DrawTwinArc4+0x12a>
 802cb2e:	2000      	movs	r0, #0
 802cb30:	e7ca      	b.n	802cac8 <GUI__DrawTwinArc4+0xc0>
 802cb32:	9b08      	ldr	r3, [sp, #32]
 802cb34:	1b18      	subs	r0, r3, r4
 802cb36:	f7f5 fcab 	bl	8022490 <GUI__sqrt32>
 802cb3a:	e7c5      	b.n	802cac8 <GUI__DrawTwinArc4+0xc0>
 802cb3c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802cb3e:	2b02      	cmp	r3, #2
 802cb40:	d15f      	bne.n	802cc02 <GUI__DrawTwinArc4+0x1fa>
 802cb42:	f7fb f931 	bl	8027da8 <WM__GetNextIVR>
 802cb46:	2800      	cmp	r0, #0
 802cb48:	d197      	bne.n	802ca7a <GUI__DrawTwinArc4+0x72>
 802cb4a:	f7f4 fdad 	bl	80216a8 <GUI_Unlock>
 802cb4e:	b013      	add	sp, #76	; 0x4c
 802cb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cb54:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802cb56:	2b01      	cmp	r3, #1
 802cb58:	d0f3      	beq.n	802cb42 <GUI__DrawTwinArc4+0x13a>
 802cb5a:	981e      	ldr	r0, [sp, #120]	; 0x78
 802cb5c:	f7f3 fbfa 	bl	8020354 <GUI_SetColor>
 802cb60:	9b04      	ldr	r3, [sp, #16]
 802cb62:	2b00      	cmp	r3, #0
 802cb64:	d0ea      	beq.n	802cb3c <GUI__DrawTwinArc4+0x134>
 802cb66:	461d      	mov	r5, r3
 802cb68:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802cb6a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 802cb6c:	f1c3 0802 	rsb	r8, r3, #2
 802cb70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802cb72:	4498      	add	r8, r3
 802cb74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802cb76:	1a9b      	subs	r3, r3, r2
 802cb78:	9305      	str	r3, [sp, #20]
 802cb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802cb7c:	eb03 0b02 	add.w	fp, r3, r2
 802cb80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802cb82:	ebc2 0a03 	rsb	sl, r2, r3
 802cb86:	e023      	b.n	802cbd0 <GUI__DrawTwinArc4+0x1c8>
 802cb88:	4620      	mov	r0, r4
 802cb8a:	ebc4 070b 	rsb	r7, r4, fp
 802cb8e:	ebc0 030b 	rsb	r3, r0, fp
 802cb92:	3f01      	subs	r7, #1
 802cb94:	4454      	add	r4, sl
 802cb96:	eb00 060a 	add.w	r6, r0, sl
 802cb9a:	4641      	mov	r1, r8
 802cb9c:	4618      	mov	r0, r3
 802cb9e:	3401      	adds	r4, #1
 802cba0:	463a      	mov	r2, r7
 802cba2:	9301      	str	r3, [sp, #4]
 802cba4:	f7f5 feba 	bl	802291c <LCD_DrawHLine>
 802cba8:	4641      	mov	r1, r8
 802cbaa:	4632      	mov	r2, r6
 802cbac:	4620      	mov	r0, r4
 802cbae:	f7f5 feb5 	bl	802291c <LCD_DrawHLine>
 802cbb2:	9b01      	ldr	r3, [sp, #4]
 802cbb4:	463a      	mov	r2, r7
 802cbb6:	4618      	mov	r0, r3
 802cbb8:	4649      	mov	r1, r9
 802cbba:	f7f5 feaf 	bl	802291c <LCD_DrawHLine>
 802cbbe:	4632      	mov	r2, r6
 802cbc0:	4649      	mov	r1, r9
 802cbc2:	4620      	mov	r0, r4
 802cbc4:	f7f5 feaa 	bl	802291c <LCD_DrawHLine>
 802cbc8:	3d01      	subs	r5, #1
 802cbca:	f108 0801 	add.w	r8, r8, #1
 802cbce:	d0b5      	beq.n	802cb3c <GUI__DrawTwinArc4+0x134>
 802cbd0:	9b03      	ldr	r3, [sp, #12]
 802cbd2:	fb05 f605 	mul.w	r6, r5, r5
 802cbd6:	1b98      	subs	r0, r3, r6
 802cbd8:	9b05      	ldr	r3, [sp, #20]
 802cbda:	eb05 0903 	add.w	r9, r5, r3
 802cbde:	f7f5 fc57 	bl	8022490 <GUI__sqrt32>
 802cbe2:	9b02      	ldr	r3, [sp, #8]
 802cbe4:	42ab      	cmp	r3, r5
 802cbe6:	f04f 0400 	mov.w	r4, #0
 802cbea:	ddcd      	ble.n	802cb88 <GUI__DrawTwinArc4+0x180>
 802cbec:	9b08      	ldr	r3, [sp, #32]
 802cbee:	1b98      	subs	r0, r3, r6
 802cbf0:	f7f5 fc4e 	bl	8022490 <GUI__sqrt32>
 802cbf4:	9b04      	ldr	r3, [sp, #16]
 802cbf6:	42ab      	cmp	r3, r5
 802cbf8:	dd01      	ble.n	802cbfe <GUI__DrawTwinArc4+0x1f6>
 802cbfa:	1e44      	subs	r4, r0, #1
 802cbfc:	e7c5      	b.n	802cb8a <GUI__DrawTwinArc4+0x182>
 802cbfe:	2400      	movs	r4, #0
 802cc00:	e7c3      	b.n	802cb8a <GUI__DrawTwinArc4+0x182>
 802cc02:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802cc04:	f7f3 fba6 	bl	8020354 <GUI_SetColor>
 802cc08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802cc0a:	2b00      	cmp	r3, #0
 802cc0c:	d099      	beq.n	802cb42 <GUI__DrawTwinArc4+0x13a>
 802cc0e:	991c      	ldr	r1, [sp, #112]	; 0x70
 802cc10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802cc12:	eb02 0b01 	add.w	fp, r2, r1
 802cc16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802cc18:	1a52      	subs	r2, r2, r1
 802cc1a:	9205      	str	r2, [sp, #20]
 802cc1c:	f102 0801 	add.w	r8, r2, #1
 802cc20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802cc22:	f1c1 0603 	rsb	r6, r1, #3
 802cc26:	4416      	add	r6, r2
 802cc28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802cc2a:	1a52      	subs	r2, r2, r1
 802cc2c:	f10b 39ff 	add.w	r9, fp, #4294967295	; 0xffffffff
 802cc30:	9201      	str	r2, [sp, #4]
 802cc32:	461c      	mov	r4, r3
 802cc34:	e01d      	b.n	802cc72 <GUI__DrawTwinArc4+0x26a>
 802cc36:	2500      	movs	r5, #0
 802cc38:	9b05      	ldr	r3, [sp, #20]
 802cc3a:	ebc5 0a0b 	rsb	sl, r5, fp
 802cc3e:	4631      	mov	r1, r6
 802cc40:	441d      	add	r5, r3
 802cc42:	4650      	mov	r0, sl
 802cc44:	464a      	mov	r2, r9
 802cc46:	f7f5 fe69 	bl	802291c <LCD_DrawHLine>
 802cc4a:	4631      	mov	r1, r6
 802cc4c:	462a      	mov	r2, r5
 802cc4e:	4640      	mov	r0, r8
 802cc50:	f7f5 fe64 	bl	802291c <LCD_DrawHLine>
 802cc54:	464a      	mov	r2, r9
 802cc56:	4639      	mov	r1, r7
 802cc58:	4650      	mov	r0, sl
 802cc5a:	f7f5 fe5f 	bl	802291c <LCD_DrawHLine>
 802cc5e:	462a      	mov	r2, r5
 802cc60:	4639      	mov	r1, r7
 802cc62:	4640      	mov	r0, r8
 802cc64:	f7f5 fe5a 	bl	802291c <LCD_DrawHLine>
 802cc68:	3c01      	subs	r4, #1
 802cc6a:	f106 0601 	add.w	r6, r6, #1
 802cc6e:	f43f af68 	beq.w	802cb42 <GUI__DrawTwinArc4+0x13a>
 802cc72:	9b03      	ldr	r3, [sp, #12]
 802cc74:	fb04 f504 	mul.w	r5, r4, r4
 802cc78:	1b58      	subs	r0, r3, r5
 802cc7a:	9b01      	ldr	r3, [sp, #4]
 802cc7c:	191f      	adds	r7, r3, r4
 802cc7e:	f7f5 fc07 	bl	8022490 <GUI__sqrt32>
 802cc82:	9b02      	ldr	r3, [sp, #8]
 802cc84:	42a3      	cmp	r3, r4
 802cc86:	ddd6      	ble.n	802cc36 <GUI__DrawTwinArc4+0x22e>
 802cc88:	9b08      	ldr	r3, [sp, #32]
 802cc8a:	1b58      	subs	r0, r3, r5
 802cc8c:	f7f5 fc00 	bl	8022490 <GUI__sqrt32>
 802cc90:	9b04      	ldr	r3, [sp, #16]
 802cc92:	42a3      	cmp	r3, r4
 802cc94:	ddcf      	ble.n	802cc36 <GUI__DrawTwinArc4+0x22e>
 802cc96:	1e45      	subs	r5, r0, #1
 802cc98:	e7ce      	b.n	802cc38 <GUI__DrawTwinArc4+0x230>
 802cc9a:	bf00      	nop
 802cc9c:	200000e8 	.word	0x200000e8

0802cca0 <GUI__ManageCache>:
 802cca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cca4:	4b39      	ldr	r3, [pc, #228]	; (802cd8c <GUI__ManageCache+0xec>)
 802cca6:	681b      	ldr	r3, [r3, #0]
 802cca8:	7c5d      	ldrb	r5, [r3, #17]
 802ccaa:	2d01      	cmp	r5, #1
 802ccac:	b082      	sub	sp, #8
 802ccae:	dd03      	ble.n	802ccb8 <GUI__ManageCache+0x18>
 802ccb0:	2001      	movs	r0, #1
 802ccb2:	b002      	add	sp, #8
 802ccb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ccb8:	4e35      	ldr	r6, [pc, #212]	; (802cd90 <GUI__ManageCache+0xf0>)
 802ccba:	6873      	ldr	r3, [r6, #4]
 802ccbc:	4604      	mov	r4, r0
 802ccbe:	b113      	cbz	r3, 802ccc6 <GUI__ManageCache+0x26>
 802ccc0:	4601      	mov	r1, r0
 802ccc2:	4628      	mov	r0, r5
 802ccc4:	4798      	blx	r3
 802ccc6:	2c01      	cmp	r4, #1
 802ccc8:	d027      	beq.n	802cd1a <GUI__ManageCache+0x7a>
 802ccca:	2c02      	cmp	r4, #2
 802cccc:	d00f      	beq.n	802ccee <GUI__ManageCache+0x4e>
 802ccce:	2c00      	cmp	r4, #0
 802ccd0:	d1ee      	bne.n	802ccb0 <GUI__ManageCache+0x10>
 802ccd2:	00ac      	lsls	r4, r5, #2
 802ccd4:	1937      	adds	r7, r6, r4
 802ccd6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802cd90 <GUI__ManageCache+0xf0>
 802ccda:	68bb      	ldr	r3, [r7, #8]
 802ccdc:	2b01      	cmp	r3, #1
 802ccde:	d03a      	beq.n	802cd56 <GUI__ManageCache+0xb6>
 802cce0:	2001      	movs	r0, #1
 802cce2:	4426      	add	r6, r4
 802cce4:	2b00      	cmp	r3, #0
 802cce6:	bf18      	it	ne
 802cce8:	3b01      	subne	r3, #1
 802ccea:	60b3      	str	r3, [r6, #8]
 802ccec:	e7e1      	b.n	802ccb2 <GUI__ManageCache+0x12>
 802ccee:	4628      	mov	r0, r5
 802ccf0:	f7f3 fd56 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 802ccf4:	9001      	str	r0, [sp, #4]
 802ccf6:	2800      	cmp	r0, #0
 802ccf8:	d0da      	beq.n	802ccb0 <GUI__ManageCache+0x10>
 802ccfa:	68c3      	ldr	r3, [r0, #12]
 802ccfc:	210d      	movs	r1, #13
 802ccfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cd00:	a801      	add	r0, sp, #4
 802cd02:	4798      	blx	r3
 802cd04:	4604      	mov	r4, r0
 802cd06:	2800      	cmp	r0, #0
 802cd08:	d0d2      	beq.n	802ccb0 <GUI__ManageCache+0x10>
 802cd0a:	6833      	ldr	r3, [r6, #0]
 802cd0c:	b103      	cbz	r3, 802cd10 <GUI__ManageCache+0x70>
 802cd0e:	4798      	blx	r3
 802cd10:	2102      	movs	r1, #2
 802cd12:	9801      	ldr	r0, [sp, #4]
 802cd14:	47a0      	blx	r4
 802cd16:	2000      	movs	r0, #0
 802cd18:	e7cb      	b.n	802ccb2 <GUI__ManageCache+0x12>
 802cd1a:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 802cd1e:	68b7      	ldr	r7, [r6, #8]
 802cd20:	b11f      	cbz	r7, 802cd2a <GUI__ManageCache+0x8a>
 802cd22:	1c78      	adds	r0, r7, #1
 802cd24:	60b0      	str	r0, [r6, #8]
 802cd26:	4620      	mov	r0, r4
 802cd28:	e7c3      	b.n	802ccb2 <GUI__ManageCache+0x12>
 802cd2a:	4628      	mov	r0, r5
 802cd2c:	f7f3 fd38 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 802cd30:	9001      	str	r0, [sp, #4]
 802cd32:	2800      	cmp	r0, #0
 802cd34:	d0bc      	beq.n	802ccb0 <GUI__ManageCache+0x10>
 802cd36:	68c3      	ldr	r3, [r0, #12]
 802cd38:	210d      	movs	r1, #13
 802cd3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cd3c:	a801      	add	r0, sp, #4
 802cd3e:	4798      	blx	r3
 802cd40:	4603      	mov	r3, r0
 802cd42:	2800      	cmp	r0, #0
 802cd44:	d0b4      	beq.n	802ccb0 <GUI__ManageCache+0x10>
 802cd46:	4621      	mov	r1, r4
 802cd48:	9801      	ldr	r0, [sp, #4]
 802cd4a:	4798      	blx	r3
 802cd4c:	68b3      	ldr	r3, [r6, #8]
 802cd4e:	3301      	adds	r3, #1
 802cd50:	4638      	mov	r0, r7
 802cd52:	60b3      	str	r3, [r6, #8]
 802cd54:	e7ad      	b.n	802ccb2 <GUI__ManageCache+0x12>
 802cd56:	4628      	mov	r0, r5
 802cd58:	f7f3 fd22 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 802cd5c:	9001      	str	r0, [sp, #4]
 802cd5e:	b188      	cbz	r0, 802cd84 <GUI__ManageCache+0xe4>
 802cd60:	68c3      	ldr	r3, [r0, #12]
 802cd62:	210d      	movs	r1, #13
 802cd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cd66:	a801      	add	r0, sp, #4
 802cd68:	4798      	blx	r3
 802cd6a:	4605      	mov	r5, r0
 802cd6c:	b150      	cbz	r0, 802cd84 <GUI__ManageCache+0xe4>
 802cd6e:	f8d8 3000 	ldr.w	r3, [r8]
 802cd72:	b103      	cbz	r3, 802cd76 <GUI__ManageCache+0xd6>
 802cd74:	4798      	blx	r3
 802cd76:	2100      	movs	r1, #0
 802cd78:	9801      	ldr	r0, [sp, #4]
 802cd7a:	47a8      	blx	r5
 802cd7c:	1933      	adds	r3, r6, r4
 802cd7e:	2000      	movs	r0, #0
 802cd80:	689b      	ldr	r3, [r3, #8]
 802cd82:	e7ae      	b.n	802cce2 <GUI__ManageCache+0x42>
 802cd84:	68bb      	ldr	r3, [r7, #8]
 802cd86:	2001      	movs	r0, #1
 802cd88:	e7ab      	b.n	802cce2 <GUI__ManageCache+0x42>
 802cd8a:	bf00      	nop
 802cd8c:	200000e8 	.word	0x200000e8
 802cd90:	2002e4f4 	.word	0x2002e4f4

0802cd94 <LCD_SetClipRectEx>:
 802cd94:	b530      	push	{r4, r5, lr}
 802cd96:	4c0a      	ldr	r4, [pc, #40]	; (802cdc0 <LCD_SetClipRectEx+0x2c>)
 802cd98:	4b0a      	ldr	r3, [pc, #40]	; (802cdc4 <LCD_SetClipRectEx+0x30>)
 802cd9a:	6822      	ldr	r2, [r4, #0]
 802cd9c:	7c52      	ldrb	r2, [r2, #17]
 802cd9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 802cda2:	68da      	ldr	r2, [r3, #12]
 802cda4:	b083      	sub	sp, #12
 802cda6:	4605      	mov	r5, r0
 802cda8:	4669      	mov	r1, sp
 802cdaa:	4618      	mov	r0, r3
 802cdac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 802cdae:	4790      	blx	r2
 802cdb0:	6820      	ldr	r0, [r4, #0]
 802cdb2:	466a      	mov	r2, sp
 802cdb4:	4629      	mov	r1, r5
 802cdb6:	3008      	adds	r0, #8
 802cdb8:	f7f5 fa80 	bl	80222bc <GUI__IntersectRects>
 802cdbc:	b003      	add	sp, #12
 802cdbe:	bd30      	pop	{r4, r5, pc}
 802cdc0:	200000e8 	.word	0x200000e8
 802cdc4:	200308b0 	.word	0x200308b0

0802cdc8 <GUI_MEMDEV_CopyToLCDAt.part.0>:
 802cdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802cdcc:	b084      	sub	sp, #16
 802cdce:	460c      	mov	r4, r1
 802cdd0:	4615      	mov	r5, r2
 802cdd2:	4606      	mov	r6, r0
 802cdd4:	f7f4 fc72 	bl	80216bc <GUI_Lock>
 802cdd8:	2000      	movs	r0, #0
 802cdda:	f7f3 fb11 	bl	8020400 <GUI_SetDrawMode>
 802cdde:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 802cec4 <GUI_MEMDEV_CopyToLCDAt.part.0+0xfc>
 802cde2:	f8d8 3000 	ldr.w	r3, [r8]
 802cde6:	4681      	mov	r9, r0
 802cde8:	4630      	mov	r0, r6
 802cdea:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 802cdec:	f7f2 fddc 	bl	801f9a8 <GUI_ALLOC_LockH>
 802cdf0:	6803      	ldr	r3, [r0, #0]
 802cdf2:	9000      	str	r0, [sp, #0]
 802cdf4:	6998      	ldr	r0, [r3, #24]
 802cdf6:	f7f4 fbf3 	bl	80215e0 <GUI_SelectLayer>
 802cdfa:	4b31      	ldr	r3, [pc, #196]	; (802cec0 <GUI_MEMDEV_CopyToLCDAt.part.0+0xf8>)
 802cdfc:	429c      	cmp	r4, r3
 802cdfe:	9b00      	ldr	r3, [sp, #0]
 802ce00:	bf04      	itt	eq
 802ce02:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 802ce06:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 802ce0a:	891a      	ldrh	r2, [r3, #8]
 802ce0c:	895b      	ldrh	r3, [r3, #10]
 802ce0e:	f8ad 4008 	strh.w	r4, [sp, #8]
 802ce12:	3a01      	subs	r2, #1
 802ce14:	3b01      	subs	r3, #1
 802ce16:	4422      	add	r2, r4
 802ce18:	442b      	add	r3, r5
 802ce1a:	4682      	mov	sl, r0
 802ce1c:	f8ad 200c 	strh.w	r2, [sp, #12]
 802ce20:	f8ad 300e 	strh.w	r3, [sp, #14]
 802ce24:	f8ad 500a 	strh.w	r5, [sp, #10]
 802ce28:	f7fb fc10 	bl	802864c <WM_Activate>
 802ce2c:	4668      	mov	r0, sp
 802ce2e:	f7f2 fdcd 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802ce32:	a802      	add	r0, sp, #8
 802ce34:	f7fb f8de 	bl	8027ff4 <WM__InitIVRSearch>
 802ce38:	bb48      	cbnz	r0, 802ce8e <GUI_MEMDEV_CopyToLCDAt.part.0+0xc6>
 802ce3a:	4650      	mov	r0, sl
 802ce3c:	f7f4 fbd0 	bl	80215e0 <GUI_SelectLayer>
 802ce40:	f7f4 fc3c 	bl	80216bc <GUI_Lock>
 802ce44:	2f00      	cmp	r7, #0
 802ce46:	d038      	beq.n	802ceba <GUI_MEMDEV_CopyToLCDAt.part.0+0xf2>
 802ce48:	f8d8 3000 	ldr.w	r3, [r8]
 802ce4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802ce4e:	bb8b      	cbnz	r3, 802ceb4 <GUI_MEMDEV_CopyToLCDAt.part.0+0xec>
 802ce50:	f7fb fc04 	bl	802865c <WM_Deactivate>
 802ce54:	4638      	mov	r0, r7
 802ce56:	f7f2 fda7 	bl	801f9a8 <GUI_ALLOC_LockH>
 802ce5a:	ac04      	add	r4, sp, #16
 802ce5c:	f8d8 3000 	ldr.w	r3, [r8]
 802ce60:	f844 0d0c 	str.w	r0, [r4, #-12]!
 802ce64:	661f      	str	r7, [r3, #96]	; 0x60
 802ce66:	6800      	ldr	r0, [r0, #0]
 802ce68:	f7f3 fcfc 	bl	8020864 <GUI_DEVICE_Link>
 802ce6c:	4620      	mov	r0, r4
 802ce6e:	f7f2 fdad 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802ce72:	f7f7 f965 	bl	8024140 <LCD_UpdateColorIndices>
 802ce76:	f7f6 f869 	bl	8022f4c <LCD_SetClipRectMax>
 802ce7a:	f7f4 fc15 	bl	80216a8 <GUI_Unlock>
 802ce7e:	4648      	mov	r0, r9
 802ce80:	f7f3 fabe 	bl	8020400 <GUI_SetDrawMode>
 802ce84:	f7f4 fc10 	bl	80216a8 <GUI_Unlock>
 802ce88:	b004      	add	sp, #16
 802ce8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802ce8e:	462a      	mov	r2, r5
 802ce90:	4621      	mov	r1, r4
 802ce92:	4630      	mov	r0, r6
 802ce94:	f000 fd06 	bl	802d8a4 <GUI_MEMDEV__WriteToActiveOpaque>
 802ce98:	f7fa ff86 	bl	8027da8 <WM__GetNextIVR>
 802ce9c:	2800      	cmp	r0, #0
 802ce9e:	d0cc      	beq.n	802ce3a <GUI_MEMDEV_CopyToLCDAt.part.0+0x72>
 802cea0:	462a      	mov	r2, r5
 802cea2:	4621      	mov	r1, r4
 802cea4:	4630      	mov	r0, r6
 802cea6:	f000 fcfd 	bl	802d8a4 <GUI_MEMDEV__WriteToActiveOpaque>
 802ceaa:	f7fa ff7d 	bl	8027da8 <WM__GetNextIVR>
 802ceae:	2800      	cmp	r0, #0
 802ceb0:	d1ed      	bne.n	802ce8e <GUI_MEMDEV_CopyToLCDAt.part.0+0xc6>
 802ceb2:	e7c2      	b.n	802ce3a <GUI_MEMDEV_CopyToLCDAt.part.0+0x72>
 802ceb4:	f7f3 fa34 	bl	8020320 <GUI_SelectLCD>
 802ceb8:	e7ca      	b.n	802ce50 <GUI_MEMDEV_CopyToLCDAt.part.0+0x88>
 802ceba:	f7f3 fa31 	bl	8020320 <GUI_SelectLCD>
 802cebe:	e7dc      	b.n	802ce7a <GUI_MEMDEV_CopyToLCDAt.part.0+0xb2>
 802cec0:	fffff001 	.word	0xfffff001
 802cec4:	200000e8 	.word	0x200000e8

0802cec8 <GUI_MEMDEV__WriteToActiveAt>:
 802cec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cecc:	b082      	sub	sp, #8
 802cece:	460f      	mov	r7, r1
 802ced0:	4690      	mov	r8, r2
 802ced2:	4606      	mov	r6, r0
 802ced4:	f7f2 fd68 	bl	801f9a8 <GUI_ALLOC_LockH>
 802ced8:	6803      	ldr	r3, [r0, #0]
 802ceda:	ac02      	add	r4, sp, #8
 802cedc:	68db      	ldr	r3, [r3, #12]
 802cede:	f844 0d04 	str.w	r0, [r4, #-4]!
 802cee2:	2116      	movs	r1, #22
 802cee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802cee6:	2000      	movs	r0, #0
 802cee8:	4798      	blx	r3
 802ceea:	4605      	mov	r5, r0
 802ceec:	4620      	mov	r0, r4
 802ceee:	f7f2 fd6d 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802cef2:	b11d      	cbz	r5, 802cefc <GUI_MEMDEV__WriteToActiveAt+0x34>
 802cef4:	4642      	mov	r2, r8
 802cef6:	4639      	mov	r1, r7
 802cef8:	4630      	mov	r0, r6
 802cefa:	47a8      	blx	r5
 802cefc:	b002      	add	sp, #8
 802cefe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cf02:	bf00      	nop

0802cf04 <GUI_MEMDEV__CreateFixed>:
 802cf04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802cf08:	f8df 812c 	ldr.w	r8, [pc, #300]	; 802d038 <GUI_MEMDEV__CreateFixed+0x134>
 802cf0c:	b087      	sub	sp, #28
 802cf0e:	f8d8 4000 	ldr.w	r4, [r8]
 802cf12:	4681      	mov	r9, r0
 802cf14:	468a      	mov	sl, r1
 802cf16:	4617      	mov	r7, r2
 802cf18:	461e      	mov	r6, r3
 802cf1a:	9912      	ldr	r1, [sp, #72]	; 0x48
 802cf1c:	7c63      	ldrb	r3, [r4, #17]
 802cf1e:	9811      	ldr	r0, [sp, #68]	; 0x44
 802cf20:	2200      	movs	r2, #0
 802cf22:	f7f3 fc55 	bl	80207d0 <GUI_DEVICE_Create>
 802cf26:	2800      	cmp	r0, #0
 802cf28:	d04d      	beq.n	802cfc6 <GUI_MEMDEV__CreateFixed+0xc2>
 802cf2a:	6903      	ldr	r3, [r0, #16]
 802cf2c:	689b      	ldr	r3, [r3, #8]
 802cf2e:	4605      	mov	r5, r0
 802cf30:	4798      	blx	r3
 802cf32:	f7f6 fb5b 	bl	80235ec <LCD__GetBPPDevice>
 802cf36:	fb00 f407 	mul.w	r4, r0, r7
 802cf3a:	4683      	mov	fp, r0
 802cf3c:	f7f2 fdfa 	bl	801fb34 <GUI_ALLOC_RequestSize>
 802cf40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802cf42:	3407      	adds	r4, #7
 802cf44:	f013 0301 	ands.w	r3, r3, #1
 802cf48:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 802cf4c:	d03f      	beq.n	802cfce <GUI_MEMDEV__CreateFixed+0xca>
 802cf4e:	2e00      	cmp	r6, #0
 802cf50:	dd2c      	ble.n	802cfac <GUI_MEMDEV__CreateFixed+0xa8>
 802cf52:	2b00      	cmp	r3, #0
 802cf54:	d042      	beq.n	802cfdc <GUI_MEMDEV__CreateFixed+0xd8>
 802cf56:	fb04 f006 	mul.w	r0, r4, r6
 802cf5a:	3018      	adds	r0, #24
 802cf5c:	f7f2 fd0c 	bl	801f978 <GUI_ALLOC_AllocNoInit>
 802cf60:	4603      	mov	r3, r0
 802cf62:	b368      	cbz	r0, 802cfc0 <GUI_MEMDEV__CreateFixed+0xbc>
 802cf64:	2200      	movs	r2, #0
 802cf66:	9202      	str	r2, [sp, #8]
 802cf68:	4618      	mov	r0, r3
 802cf6a:	9303      	str	r3, [sp, #12]
 802cf6c:	f7f2 fd1c 	bl	801f9a8 <GUI_ALLOC_LockH>
 802cf70:	4602      	mov	r2, r0
 802cf72:	a806      	add	r0, sp, #24
 802cf74:	9b02      	ldr	r3, [sp, #8]
 802cf76:	f8a2 9004 	strh.w	r9, [r2, #4]
 802cf7a:	f840 2d04 	str.w	r2, [r0, #-4]!
 802cf7e:	f8a2 a006 	strh.w	sl, [r2, #6]
 802cf82:	8117      	strh	r7, [r2, #8]
 802cf84:	8156      	strh	r6, [r2, #10]
 802cf86:	60d4      	str	r4, [r2, #12]
 802cf88:	f8c2 b010 	str.w	fp, [r2, #16]
 802cf8c:	6153      	str	r3, [r2, #20]
 802cf8e:	6015      	str	r5, [r2, #0]
 802cf90:	f7f2 fd1c 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802cf94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802cf96:	612b      	str	r3, [r5, #16]
 802cf98:	f8d8 2000 	ldr.w	r2, [r8]
 802cf9c:	9b03      	ldr	r3, [sp, #12]
 802cf9e:	60ab      	str	r3, [r5, #8]
 802cfa0:	7c52      	ldrb	r2, [r2, #17]
 802cfa2:	61aa      	str	r2, [r5, #24]
 802cfa4:	4618      	mov	r0, r3
 802cfa6:	b007      	add	sp, #28
 802cfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cfac:	2c00      	cmp	r4, #0
 802cfae:	d134      	bne.n	802d01a <GUI_MEMDEV__CreateFixed+0x116>
 802cfb0:	4620      	mov	r0, r4
 802cfb2:	4276      	negs	r6, r6
 802cfb4:	4286      	cmp	r6, r0
 802cfb6:	bfa8      	it	ge
 802cfb8:	4606      	movge	r6, r0
 802cfba:	b393      	cbz	r3, 802d022 <GUI_MEMDEV__CreateFixed+0x11e>
 802cfbc:	2e00      	cmp	r6, #0
 802cfbe:	dcca      	bgt.n	802cf56 <GUI_MEMDEV__CreateFixed+0x52>
 802cfc0:	4628      	mov	r0, r5
 802cfc2:	f7f3 fc03 	bl	80207cc <GUI_DEVICE_Delete>
 802cfc6:	2000      	movs	r0, #0
 802cfc8:	b007      	add	sp, #28
 802cfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cfce:	2800      	cmp	r0, #0
 802cfd0:	bfb8      	it	lt
 802cfd2:	3003      	addlt	r0, #3
 802cfd4:	1080      	asrs	r0, r0, #2
 802cfd6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802cfda:	e7b8      	b.n	802cf4e <GUI_MEMDEV__CreateFixed+0x4a>
 802cfdc:	9300      	str	r3, [sp, #0]
 802cfde:	463a      	mov	r2, r7
 802cfe0:	4633      	mov	r3, r6
 802cfe2:	4651      	mov	r1, sl
 802cfe4:	4648      	mov	r0, r9
 802cfe6:	f000 fbf9 	bl	802d7dc <GUI_USAGE_BM_Create>
 802cfea:	9002      	str	r0, [sp, #8]
 802cfec:	fb04 f006 	mul.w	r0, r4, r6
 802cff0:	3018      	adds	r0, #24
 802cff2:	f7f2 fef3 	bl	801fddc <GUI_ALLOC_AllocZero>
 802cff6:	4603      	mov	r3, r0
 802cff8:	2800      	cmp	r0, #0
 802cffa:	d1b5      	bne.n	802cf68 <GUI_MEMDEV__CreateFixed+0x64>
 802cffc:	4628      	mov	r0, r5
 802cffe:	9303      	str	r3, [sp, #12]
 802d000:	f7f3 fbe4 	bl	80207cc <GUI_DEVICE_Delete>
 802d004:	9b02      	ldr	r3, [sp, #8]
 802d006:	2b00      	cmp	r3, #0
 802d008:	d0dd      	beq.n	802cfc6 <GUI_MEMDEV__CreateFixed+0xc2>
 802d00a:	4618      	mov	r0, r3
 802d00c:	f7f2 fe6e 	bl	801fcec <GUI_ALLOC_Free>
 802d010:	9b03      	ldr	r3, [sp, #12]
 802d012:	4618      	mov	r0, r3
 802d014:	b007      	add	sp, #28
 802d016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d01a:	3818      	subs	r0, #24
 802d01c:	fbb0 f0f4 	udiv	r0, r0, r4
 802d020:	e7c7      	b.n	802cfb2 <GUI_MEMDEV__CreateFixed+0xae>
 802d022:	9300      	str	r3, [sp, #0]
 802d024:	463a      	mov	r2, r7
 802d026:	4633      	mov	r3, r6
 802d028:	4651      	mov	r1, sl
 802d02a:	4648      	mov	r0, r9
 802d02c:	f000 fbd6 	bl	802d7dc <GUI_USAGE_BM_Create>
 802d030:	2e00      	cmp	r6, #0
 802d032:	9002      	str	r0, [sp, #8]
 802d034:	dcda      	bgt.n	802cfec <GUI_MEMDEV__CreateFixed+0xe8>
 802d036:	e7c3      	b.n	802cfc0 <GUI_MEMDEV__CreateFixed+0xbc>
 802d038:	200000e8 	.word	0x200000e8

0802d03c <GUI_MEMDEV_GetBitsPerPixel>:
 802d03c:	b530      	push	{r4, r5, lr}
 802d03e:	4604      	mov	r4, r0
 802d040:	b083      	sub	sp, #12
 802d042:	b198      	cbz	r0, 802d06c <GUI_MEMDEV_GetBitsPerPixel+0x30>
 802d044:	f7f4 fb3a 	bl	80216bc <GUI_Lock>
 802d048:	4620      	mov	r0, r4
 802d04a:	f7f2 fcad 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d04e:	6803      	ldr	r3, [r0, #0]
 802d050:	ad02      	add	r5, sp, #8
 802d052:	691b      	ldr	r3, [r3, #16]
 802d054:	f845 0d04 	str.w	r0, [r5, #-4]!
 802d058:	689b      	ldr	r3, [r3, #8]
 802d05a:	4798      	blx	r3
 802d05c:	f7f6 fac6 	bl	80235ec <LCD__GetBPPDevice>
 802d060:	4604      	mov	r4, r0
 802d062:	4628      	mov	r0, r5
 802d064:	f7f2 fcb2 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d068:	f7f4 fb1e 	bl	80216a8 <GUI_Unlock>
 802d06c:	4620      	mov	r0, r4
 802d06e:	b003      	add	sp, #12
 802d070:	bd30      	pop	{r4, r5, pc}
 802d072:	bf00      	nop

0802d074 <GUI_MEMDEV_Delete>:
 802d074:	b900      	cbnz	r0, 802d078 <GUI_MEMDEV_Delete+0x4>
 802d076:	4770      	bx	lr
 802d078:	b510      	push	{r4, lr}
 802d07a:	b082      	sub	sp, #8
 802d07c:	4604      	mov	r4, r0
 802d07e:	f7f4 fb1d 	bl	80216bc <GUI_Lock>
 802d082:	4b10      	ldr	r3, [pc, #64]	; (802d0c4 <GUI_MEMDEV_Delete+0x50>)
 802d084:	681b      	ldr	r3, [r3, #0]
 802d086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802d088:	429c      	cmp	r4, r3
 802d08a:	d017      	beq.n	802d0bc <GUI_MEMDEV_Delete+0x48>
 802d08c:	4620      	mov	r0, r4
 802d08e:	f7f2 fc8b 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d092:	6943      	ldr	r3, [r0, #20]
 802d094:	9001      	str	r0, [sp, #4]
 802d096:	b963      	cbnz	r3, 802d0b2 <GUI_MEMDEV_Delete+0x3e>
 802d098:	6800      	ldr	r0, [r0, #0]
 802d09a:	f7f3 fb97 	bl	80207cc <GUI_DEVICE_Delete>
 802d09e:	a801      	add	r0, sp, #4
 802d0a0:	f7f2 fc94 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d0a4:	4620      	mov	r0, r4
 802d0a6:	f7f2 fe21 	bl	801fcec <GUI_ALLOC_Free>
 802d0aa:	f7f4 fafd 	bl	80216a8 <GUI_Unlock>
 802d0ae:	b002      	add	sp, #8
 802d0b0:	bd10      	pop	{r4, pc}
 802d0b2:	4618      	mov	r0, r3
 802d0b4:	f7f8 feda 	bl	8025e6c <GUI_USAGE_DecUseCnt>
 802d0b8:	9801      	ldr	r0, [sp, #4]
 802d0ba:	e7ed      	b.n	802d098 <GUI_MEMDEV_Delete+0x24>
 802d0bc:	f7f3 f930 	bl	8020320 <GUI_SelectLCD>
 802d0c0:	e7e4      	b.n	802d08c <GUI_MEMDEV_Delete+0x18>
 802d0c2:	bf00      	nop
 802d0c4:	200000e8 	.word	0x200000e8

0802d0c8 <GUI_MEMDEV_CreateEx>:
 802d0c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802d0cc:	b085      	sub	sp, #20
 802d0ce:	4606      	mov	r6, r0
 802d0d0:	4690      	mov	r8, r2
 802d0d2:	4699      	mov	r9, r3
 802d0d4:	460f      	mov	r7, r1
 802d0d6:	f7f4 faf1 	bl	80216bc <GUI_Lock>
 802d0da:	4a1c      	ldr	r2, [pc, #112]	; (802d14c <GUI_MEMDEV_CreateEx+0x84>)
 802d0dc:	4b1c      	ldr	r3, [pc, #112]	; (802d150 <GUI_MEMDEV_CreateEx+0x88>)
 802d0de:	6812      	ldr	r2, [r2, #0]
 802d0e0:	7c50      	ldrb	r0, [r2, #17]
 802d0e2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 802d0e6:	e001      	b.n	802d0ec <GUI_MEMDEV_CreateEx+0x24>
 802d0e8:	6824      	ldr	r4, [r4, #0]
 802d0ea:	b1fc      	cbz	r4, 802d12c <GUI_MEMDEV_CreateEx+0x64>
 802d0ec:	68e3      	ldr	r3, [r4, #12]
 802d0ee:	681a      	ldr	r2, [r3, #0]
 802d0f0:	2a04      	cmp	r2, #4
 802d0f2:	d1f9      	bne.n	802d0e8 <GUI_MEMDEV_CreateEx+0x20>
 802d0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802d0f6:	2101      	movs	r1, #1
 802d0f8:	4620      	mov	r0, r4
 802d0fa:	4798      	blx	r3
 802d0fc:	4605      	mov	r5, r0
 802d0fe:	b1d8      	cbz	r0, 802d138 <GUI_MEMDEV_CreateEx+0x70>
 802d100:	6924      	ldr	r4, [r4, #16]
 802d102:	68a3      	ldr	r3, [r4, #8]
 802d104:	4798      	blx	r3
 802d106:	3001      	adds	r0, #1
 802d108:	d018      	beq.n	802d13c <GUI_MEMDEV_CreateEx+0x74>
 802d10a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802d10c:	9402      	str	r4, [sp, #8]
 802d10e:	9300      	str	r3, [sp, #0]
 802d110:	9501      	str	r5, [sp, #4]
 802d112:	464b      	mov	r3, r9
 802d114:	4642      	mov	r2, r8
 802d116:	4639      	mov	r1, r7
 802d118:	4630      	mov	r0, r6
 802d11a:	f7ff fef3 	bl	802cf04 <GUI_MEMDEV__CreateFixed>
 802d11e:	4604      	mov	r4, r0
 802d120:	f7f4 fac2 	bl	80216a8 <GUI_Unlock>
 802d124:	4620      	mov	r0, r4
 802d126:	b005      	add	sp, #20
 802d128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802d12c:	f7f3 fb38 	bl	80207a0 <GUI_DEVICE__GetpDriver>
 802d130:	4604      	mov	r4, r0
 802d132:	b148      	cbz	r0, 802d148 <GUI_MEMDEV_CreateEx+0x80>
 802d134:	68c3      	ldr	r3, [r0, #12]
 802d136:	e7dd      	b.n	802d0f4 <GUI_MEMDEV_CreateEx+0x2c>
 802d138:	4604      	mov	r4, r0
 802d13a:	e7f1      	b.n	802d120 <GUI_MEMDEV_CreateEx+0x58>
 802d13c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802d13e:	4c05      	ldr	r4, [pc, #20]	; (802d154 <GUI_MEMDEV_CreateEx+0x8c>)
 802d140:	f043 0301 	orr.w	r3, r3, #1
 802d144:	930c      	str	r3, [sp, #48]	; 0x30
 802d146:	e7e0      	b.n	802d10a <GUI_MEMDEV_CreateEx+0x42>
 802d148:	4620      	mov	r0, r4
 802d14a:	e7ec      	b.n	802d126 <GUI_MEMDEV_CreateEx+0x5e>
 802d14c:	200000e8 	.word	0x200000e8
 802d150:	200308b0 	.word	0x200308b0
 802d154:	08036344 	.word	0x08036344

0802d158 <GUI_MEMDEV_Select>:
 802d158:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d15a:	4f16      	ldr	r7, [pc, #88]	; (802d1b4 <GUI_MEMDEV_Select+0x5c>)
 802d15c:	b083      	sub	sp, #12
 802d15e:	4604      	mov	r4, r0
 802d160:	f7f4 faac 	bl	80216bc <GUI_Lock>
 802d164:	683b      	ldr	r3, [r7, #0]
 802d166:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 802d168:	b1e4      	cbz	r4, 802d1a4 <GUI_MEMDEV_Select+0x4c>
 802d16a:	b9c6      	cbnz	r6, 802d19e <GUI_MEMDEV_Select+0x46>
 802d16c:	f7fb fa76 	bl	802865c <WM_Deactivate>
 802d170:	4620      	mov	r0, r4
 802d172:	f7f2 fc19 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d176:	ad02      	add	r5, sp, #8
 802d178:	683b      	ldr	r3, [r7, #0]
 802d17a:	f845 0d04 	str.w	r0, [r5, #-4]!
 802d17e:	661c      	str	r4, [r3, #96]	; 0x60
 802d180:	6800      	ldr	r0, [r0, #0]
 802d182:	f7f3 fb6f 	bl	8020864 <GUI_DEVICE_Link>
 802d186:	4628      	mov	r0, r5
 802d188:	f7f2 fc20 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d18c:	f7f6 ffd8 	bl	8024140 <LCD_UpdateColorIndices>
 802d190:	f7f5 fedc 	bl	8022f4c <LCD_SetClipRectMax>
 802d194:	f7f4 fa88 	bl	80216a8 <GUI_Unlock>
 802d198:	4630      	mov	r0, r6
 802d19a:	b003      	add	sp, #12
 802d19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d19e:	f7f3 f8bf 	bl	8020320 <GUI_SelectLCD>
 802d1a2:	e7e3      	b.n	802d16c <GUI_MEMDEV_Select+0x14>
 802d1a4:	f7f3 f8bc 	bl	8020320 <GUI_SelectLCD>
 802d1a8:	f7f4 fa7e 	bl	80216a8 <GUI_Unlock>
 802d1ac:	4630      	mov	r0, r6
 802d1ae:	b003      	add	sp, #12
 802d1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d1b2:	bf00      	nop
 802d1b4:	200000e8 	.word	0x200000e8

0802d1b8 <GUI_MEMDEV_CopyToLCD>:
 802d1b8:	b900      	cbnz	r0, 802d1bc <GUI_MEMDEV_CopyToLCD+0x4>
 802d1ba:	4770      	bx	lr
 802d1bc:	4a01      	ldr	r2, [pc, #4]	; (802d1c4 <GUI_MEMDEV_CopyToLCD+0xc>)
 802d1be:	4611      	mov	r1, r2
 802d1c0:	f7ff be02 	b.w	802cdc8 <GUI_MEMDEV_CopyToLCDAt.part.0>
 802d1c4:	fffff001 	.word	0xfffff001

0802d1c8 <GUI_MEMDEV_Draw>:
 802d1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d1cc:	b087      	sub	sp, #28
 802d1ce:	4606      	mov	r6, r0
 802d1d0:	4692      	mov	sl, r2
 802d1d2:	461c      	mov	r4, r3
 802d1d4:	4689      	mov	r9, r1
 802d1d6:	f7f4 fa71 	bl	80216bc <GUI_Lock>
 802d1da:	4b56      	ldr	r3, [pc, #344]	; (802d334 <GUI_MEMDEV_Draw+0x16c>)
 802d1dc:	681a      	ldr	r2, [r3, #0]
 802d1de:	4b56      	ldr	r3, [pc, #344]	; (802d338 <GUI_MEMDEV_Draw+0x170>)
 802d1e0:	7c57      	ldrb	r7, [r2, #17]
 802d1e2:	57db      	ldrsb	r3, [r3, r7]
 802d1e4:	2b01      	cmp	r3, #1
 802d1e6:	4638      	mov	r0, r7
 802d1e8:	f340 8097 	ble.w	802d31a <GUI_MEMDEV_Draw+0x152>
 802d1ec:	f7f6 f8a2 	bl	8023334 <LCD_GetXSizeEx>
 802d1f0:	4605      	mov	r5, r0
 802d1f2:	4638      	mov	r0, r7
 802d1f4:	f7f6 f8ae 	bl	8023354 <LCD_GetYSizeEx>
 802d1f8:	4607      	mov	r7, r0
 802d1fa:	2e00      	cmp	r6, #0
 802d1fc:	f000 808a 	beq.w	802d314 <GUI_MEMDEV_Draw+0x14c>
 802d200:	a905      	add	r1, sp, #20
 802d202:	a804      	add	r0, sp, #16
 802d204:	f7f2 ff58 	bl	80200b8 <GUI_GetOrg>
 802d208:	9a04      	ldr	r2, [sp, #16]
 802d20a:	9b05      	ldr	r3, [sp, #20]
 802d20c:	f9b6 c000 	ldrsh.w	ip, [r6]
 802d210:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 802d214:	f9b6 e004 	ldrsh.w	lr, [r6, #4]
 802d218:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802d21c:	4415      	add	r5, r2
 802d21e:	441f      	add	r7, r3
 802d220:	3d01      	subs	r5, #1
 802d222:	ea2c 73ec 	bic.w	r3, ip, ip, asr #31
 802d226:	3f01      	subs	r7, #1
 802d228:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
 802d22c:	9302      	str	r3, [sp, #8]
 802d22e:	9203      	str	r2, [sp, #12]
 802d230:	4575      	cmp	r5, lr
 802d232:	bfd4      	ite	le
 802d234:	ebc3 0305 	rsble	r3, r3, r5
 802d238:	ebc3 030e 	rsbgt	r3, r3, lr
 802d23c:	428f      	cmp	r7, r1
 802d23e:	bfd4      	ite	le
 802d240:	ebc2 0207 	rsble	r2, r2, r7
 802d244:	ebc2 0201 	rsbgt	r2, r2, r1
 802d248:	461d      	mov	r5, r3
 802d24a:	4617      	mov	r7, r2
 802d24c:	3501      	adds	r5, #1
 802d24e:	3701      	adds	r7, #1
 802d250:	b904      	cbnz	r4, 802d254 <GUI_MEMDEV_Draw+0x8c>
 802d252:	427c      	negs	r4, r7
 802d254:	2d00      	cmp	r5, #0
 802d256:	dd4f      	ble.n	802d2f8 <GUI_MEMDEV_Draw+0x130>
 802d258:	2f00      	cmp	r7, #0
 802d25a:	dd4d      	ble.n	802d2f8 <GUI_MEMDEV_Draw+0x130>
 802d25c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802d25e:	9300      	str	r3, [sp, #0]
 802d260:	462a      	mov	r2, r5
 802d262:	4623      	mov	r3, r4
 802d264:	9903      	ldr	r1, [sp, #12]
 802d266:	9802      	ldr	r0, [sp, #8]
 802d268:	f7ff ff2e 	bl	802d0c8 <GUI_MEMDEV_CreateEx>
 802d26c:	4680      	mov	r8, r0
 802d26e:	2800      	cmp	r0, #0
 802d270:	d048      	beq.n	802d304 <GUI_MEMDEV_Draw+0x13c>
 802d272:	f000 f8a9 	bl	802d3c8 <GUI_MEMDEV_GetYSize>
 802d276:	4287      	cmp	r7, r0
 802d278:	4606      	mov	r6, r0
 802d27a:	d004      	beq.n	802d286 <GUI_MEMDEV_Draw+0xbe>
 802d27c:	4b2d      	ldr	r3, [pc, #180]	; (802d334 <GUI_MEMDEV_Draw+0x16c>)
 802d27e:	681b      	ldr	r3, [r3, #0]
 802d280:	6c98      	ldr	r0, [r3, #72]	; 0x48
 802d282:	2800      	cmp	r0, #0
 802d284:	d151      	bne.n	802d32a <GUI_MEMDEV_Draw+0x162>
 802d286:	4640      	mov	r0, r8
 802d288:	f7ff ff66 	bl	802d158 <GUI_MEMDEV_Select>
 802d28c:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 802d33c <GUI_MEMDEV_Draw+0x174>
 802d290:	463d      	mov	r5, r7
 802d292:	2400      	movs	r4, #0
 802d294:	e00e      	b.n	802d2b4 <GUI_MEMDEV_Draw+0xec>
 802d296:	1bad      	subs	r5, r5, r6
 802d298:	b9ac      	cbnz	r4, 802d2c6 <GUI_MEMDEV_Draw+0xfe>
 802d29a:	4650      	mov	r0, sl
 802d29c:	47c8      	blx	r9
 802d29e:	f8db 3000 	ldr.w	r3, [fp]
 802d2a2:	4434      	add	r4, r6
 802d2a4:	20ff      	movs	r0, #255	; 0xff
 802d2a6:	b103      	cbz	r3, 802d2aa <GUI_MEMDEV_Draw+0xe2>
 802d2a8:	4798      	blx	r3
 802d2aa:	4640      	mov	r0, r8
 802d2ac:	f7ff ff84 	bl	802d1b8 <GUI_MEMDEV_CopyToLCD>
 802d2b0:	42a7      	cmp	r7, r4
 802d2b2:	dd12      	ble.n	802d2da <GUI_MEMDEV_Draw+0x112>
 802d2b4:	42ae      	cmp	r6, r5
 802d2b6:	ddee      	ble.n	802d296 <GUI_MEMDEV_Draw+0xce>
 802d2b8:	4629      	mov	r1, r5
 802d2ba:	4640      	mov	r0, r8
 802d2bc:	f000 f8a6 	bl	802d40c <GUI_MEMDEV_ReduceYSize>
 802d2c0:	1bad      	subs	r5, r5, r6
 802d2c2:	2c00      	cmp	r4, #0
 802d2c4:	d0e9      	beq.n	802d29a <GUI_MEMDEV_Draw+0xd2>
 802d2c6:	9b03      	ldr	r3, [sp, #12]
 802d2c8:	9902      	ldr	r1, [sp, #8]
 802d2ca:	4640      	mov	r0, r8
 802d2cc:	191a      	adds	r2, r3, r4
 802d2ce:	f000 f8bd 	bl	802d44c <GUI_MEMDEV_SetOrg>
 802d2d2:	4640      	mov	r0, r8
 802d2d4:	f000 f834 	bl	802d340 <GUI_MEMDEV_Clear>
 802d2d8:	e7df      	b.n	802d29a <GUI_MEMDEV_Draw+0xd2>
 802d2da:	4640      	mov	r0, r8
 802d2dc:	f7ff feca 	bl	802d074 <GUI_MEMDEV_Delete>
 802d2e0:	2000      	movs	r0, #0
 802d2e2:	f7ff ff39 	bl	802d158 <GUI_MEMDEV_Select>
 802d2e6:	42b7      	cmp	r7, r6
 802d2e8:	d006      	beq.n	802d2f8 <GUI_MEMDEV_Draw+0x130>
 802d2ea:	4b12      	ldr	r3, [pc, #72]	; (802d334 <GUI_MEMDEV_Draw+0x16c>)
 802d2ec:	681b      	ldr	r3, [r3, #0]
 802d2ee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 802d2f0:	b110      	cbz	r0, 802d2f8 <GUI_MEMDEV_Draw+0x130>
 802d2f2:	2133      	movs	r1, #51	; 0x33
 802d2f4:	f7fc fed4 	bl	802a0a0 <WM__SendMessageNoPara>
 802d2f8:	f7f4 f9d6 	bl	80216a8 <GUI_Unlock>
 802d2fc:	2000      	movs	r0, #0
 802d2fe:	b007      	add	sp, #28
 802d300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d304:	4650      	mov	r0, sl
 802d306:	47c8      	blx	r9
 802d308:	f7f4 f9ce 	bl	80216a8 <GUI_Unlock>
 802d30c:	2001      	movs	r0, #1
 802d30e:	b007      	add	sp, #28
 802d310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d314:	9603      	str	r6, [sp, #12]
 802d316:	9602      	str	r6, [sp, #8]
 802d318:	e79a      	b.n	802d250 <GUI_MEMDEV_Draw+0x88>
 802d31a:	f7f6 f82b 	bl	8023374 <LCD_GetVXSizeEx>
 802d31e:	4605      	mov	r5, r0
 802d320:	4638      	mov	r0, r7
 802d322:	f7f6 f837 	bl	8023394 <LCD_GetVYSizeEx>
 802d326:	4607      	mov	r7, r0
 802d328:	e767      	b.n	802d1fa <GUI_MEMDEV_Draw+0x32>
 802d32a:	2132      	movs	r1, #50	; 0x32
 802d32c:	f7fc feb8 	bl	802a0a0 <WM__SendMessageNoPara>
 802d330:	e7a9      	b.n	802d286 <GUI_MEMDEV_Draw+0xbe>
 802d332:	bf00      	nop
 802d334:	200000e8 	.word	0x200000e8
 802d338:	20030860 	.word	0x20030860
 802d33c:	2002e50c 	.word	0x2002e50c

0802d340 <GUI_MEMDEV_Clear>:
 802d340:	b510      	push	{r4, lr}
 802d342:	b082      	sub	sp, #8
 802d344:	b928      	cbnz	r0, 802d352 <GUI_MEMDEV_Clear+0x12>
 802d346:	4b13      	ldr	r3, [pc, #76]	; (802d394 <GUI_MEMDEV_Clear+0x54>)
 802d348:	681b      	ldr	r3, [r3, #0]
 802d34a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 802d34c:	b914      	cbnz	r4, 802d354 <GUI_MEMDEV_Clear+0x14>
 802d34e:	b002      	add	sp, #8
 802d350:	bd10      	pop	{r4, pc}
 802d352:	4604      	mov	r4, r0
 802d354:	f7f4 f9b2 	bl	80216bc <GUI_Lock>
 802d358:	4620      	mov	r0, r4
 802d35a:	f7f2 fb25 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d35e:	ab02      	add	r3, sp, #8
 802d360:	6944      	ldr	r4, [r0, #20]
 802d362:	f843 0d08 	str.w	r0, [r3, #-8]!
 802d366:	4618      	mov	r0, r3
 802d368:	f7f2 fb30 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d36c:	b91c      	cbnz	r4, 802d376 <GUI_MEMDEV_Clear+0x36>
 802d36e:	f7f4 f99b 	bl	80216a8 <GUI_Unlock>
 802d372:	b002      	add	sp, #8
 802d374:	bd10      	pop	{r4, pc}
 802d376:	4620      	mov	r0, r4
 802d378:	f7f2 fb16 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d37c:	ac02      	add	r4, sp, #8
 802d37e:	6882      	ldr	r2, [r0, #8]
 802d380:	f844 0d04 	str.w	r0, [r4, #-4]!
 802d384:	6893      	ldr	r3, [r2, #8]
 802d386:	4798      	blx	r3
 802d388:	4620      	mov	r0, r4
 802d38a:	f7f2 fb1f 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d38e:	f7f4 f98b 	bl	80216a8 <GUI_Unlock>
 802d392:	e7ee      	b.n	802d372 <GUI_MEMDEV_Clear+0x32>
 802d394:	200000e8 	.word	0x200000e8

0802d398 <GUI_MEMDEV_GetDataPtr>:
 802d398:	b1a0      	cbz	r0, 802d3c4 <GUI_MEMDEV_GetDataPtr+0x2c>
 802d39a:	b510      	push	{r4, lr}
 802d39c:	4604      	mov	r4, r0
 802d39e:	b082      	sub	sp, #8
 802d3a0:	f7f4 f98c 	bl	80216bc <GUI_Lock>
 802d3a4:	4620      	mov	r0, r4
 802d3a6:	f7f2 faff 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d3aa:	ab02      	add	r3, sp, #8
 802d3ac:	f100 0418 	add.w	r4, r0, #24
 802d3b0:	f843 0d04 	str.w	r0, [r3, #-4]!
 802d3b4:	4618      	mov	r0, r3
 802d3b6:	f7f2 fb09 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d3ba:	f7f4 f975 	bl	80216a8 <GUI_Unlock>
 802d3be:	4620      	mov	r0, r4
 802d3c0:	b002      	add	sp, #8
 802d3c2:	bd10      	pop	{r4, pc}
 802d3c4:	4770      	bx	lr
 802d3c6:	bf00      	nop

0802d3c8 <GUI_MEMDEV_GetYSize>:
 802d3c8:	b510      	push	{r4, lr}
 802d3ca:	4604      	mov	r4, r0
 802d3cc:	b082      	sub	sp, #8
 802d3ce:	f7f4 f975 	bl	80216bc <GUI_Lock>
 802d3d2:	b17c      	cbz	r4, 802d3f4 <GUI_MEMDEV_GetYSize+0x2c>
 802d3d4:	4620      	mov	r0, r4
 802d3d6:	f7f2 fae7 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d3da:	ab02      	add	r3, sp, #8
 802d3dc:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 802d3e0:	f843 0d04 	str.w	r0, [r3, #-4]!
 802d3e4:	4618      	mov	r0, r3
 802d3e6:	f7f2 faf1 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d3ea:	f7f4 f95d 	bl	80216a8 <GUI_Unlock>
 802d3ee:	4620      	mov	r0, r4
 802d3f0:	b002      	add	sp, #8
 802d3f2:	bd10      	pop	{r4, pc}
 802d3f4:	4b04      	ldr	r3, [pc, #16]	; (802d408 <GUI_MEMDEV_GetYSize+0x40>)
 802d3f6:	681b      	ldr	r3, [r3, #0]
 802d3f8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 802d3fa:	2c00      	cmp	r4, #0
 802d3fc:	d1ea      	bne.n	802d3d4 <GUI_MEMDEV_GetYSize+0xc>
 802d3fe:	f7f4 f953 	bl	80216a8 <GUI_Unlock>
 802d402:	4620      	mov	r0, r4
 802d404:	b002      	add	sp, #8
 802d406:	bd10      	pop	{r4, pc}
 802d408:	200000e8 	.word	0x200000e8

0802d40c <GUI_MEMDEV_ReduceYSize>:
 802d40c:	b530      	push	{r4, r5, lr}
 802d40e:	460d      	mov	r5, r1
 802d410:	b083      	sub	sp, #12
 802d412:	b928      	cbnz	r0, 802d420 <GUI_MEMDEV_ReduceYSize+0x14>
 802d414:	4b0c      	ldr	r3, [pc, #48]	; (802d448 <GUI_MEMDEV_ReduceYSize+0x3c>)
 802d416:	681b      	ldr	r3, [r3, #0]
 802d418:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 802d41a:	b914      	cbnz	r4, 802d422 <GUI_MEMDEV_ReduceYSize+0x16>
 802d41c:	b003      	add	sp, #12
 802d41e:	bd30      	pop	{r4, r5, pc}
 802d420:	4604      	mov	r4, r0
 802d422:	f7f4 f94b 	bl	80216bc <GUI_Lock>
 802d426:	4620      	mov	r0, r4
 802d428:	f7f2 fabe 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d42c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 802d430:	9001      	str	r0, [sp, #4]
 802d432:	42ab      	cmp	r3, r5
 802d434:	bfc8      	it	gt
 802d436:	8145      	strhgt	r5, [r0, #10]
 802d438:	a801      	add	r0, sp, #4
 802d43a:	f7f2 fac7 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d43e:	f7f4 f933 	bl	80216a8 <GUI_Unlock>
 802d442:	b003      	add	sp, #12
 802d444:	bd30      	pop	{r4, r5, pc}
 802d446:	bf00      	nop
 802d448:	200000e8 	.word	0x200000e8

0802d44c <GUI_MEMDEV_SetOrg>:
 802d44c:	b570      	push	{r4, r5, r6, lr}
 802d44e:	460d      	mov	r5, r1
 802d450:	b082      	sub	sp, #8
 802d452:	4616      	mov	r6, r2
 802d454:	b928      	cbnz	r0, 802d462 <GUI_MEMDEV_SetOrg+0x16>
 802d456:	4b1a      	ldr	r3, [pc, #104]	; (802d4c0 <GUI_MEMDEV_SetOrg+0x74>)
 802d458:	681b      	ldr	r3, [r3, #0]
 802d45a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 802d45c:	b914      	cbnz	r4, 802d464 <GUI_MEMDEV_SetOrg+0x18>
 802d45e:	b002      	add	sp, #8
 802d460:	bd70      	pop	{r4, r5, r6, pc}
 802d462:	4604      	mov	r4, r0
 802d464:	f7f4 f92a 	bl	80216bc <GUI_Lock>
 802d468:	4620      	mov	r0, r4
 802d46a:	f7f2 fa9d 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d46e:	b236      	sxth	r6, r6
 802d470:	b22d      	sxth	r5, r5
 802d472:	80c6      	strh	r6, [r0, #6]
 802d474:	8085      	strh	r5, [r0, #4]
 802d476:	9000      	str	r0, [sp, #0]
 802d478:	f7f5 fd68 	bl	8022f4c <LCD_SetClipRectMax>
 802d47c:	9b00      	ldr	r3, [sp, #0]
 802d47e:	6958      	ldr	r0, [r3, #20]
 802d480:	b930      	cbnz	r0, 802d490 <GUI_MEMDEV_SetOrg+0x44>
 802d482:	4668      	mov	r0, sp
 802d484:	f7f2 faa2 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d488:	f7f4 f90e 	bl	80216a8 <GUI_Unlock>
 802d48c:	b002      	add	sp, #8
 802d48e:	bd70      	pop	{r4, r5, r6, pc}
 802d490:	f7f2 fa8a 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d494:	9a00      	ldr	r2, [sp, #0]
 802d496:	9001      	str	r0, [sp, #4]
 802d498:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 802d49c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 802d4a0:	80c2      	strh	r2, [r0, #6]
 802d4a2:	8083      	strh	r3, [r0, #4]
 802d4a4:	b113      	cbz	r3, 802d4ac <GUI_MEMDEV_SetOrg+0x60>
 802d4a6:	b10a      	cbz	r2, 802d4ac <GUI_MEMDEV_SetOrg+0x60>
 802d4a8:	8005      	strh	r5, [r0, #0]
 802d4aa:	8046      	strh	r6, [r0, #2]
 802d4ac:	a801      	add	r0, sp, #4
 802d4ae:	f7f2 fa8d 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d4b2:	4668      	mov	r0, sp
 802d4b4:	f7f2 fa8a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d4b8:	f7f4 f8f6 	bl	80216a8 <GUI_Unlock>
 802d4bc:	e7e6      	b.n	802d48c <GUI_MEMDEV_SetOrg+0x40>
 802d4be:	bf00      	nop
 802d4c0:	200000e8 	.word	0x200000e8

0802d4c4 <GUI_MEMDEV_Paint1Static>:
 802d4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d4c8:	f8df b188 	ldr.w	fp, [pc, #392]	; 802d654 <GUI_MEMDEV_Paint1Static+0x190>
 802d4cc:	b089      	sub	sp, #36	; 0x24
 802d4ce:	4606      	mov	r6, r0
 802d4d0:	2705      	movs	r7, #5
 802d4d2:	4630      	mov	r0, r6
 802d4d4:	f7f2 fa68 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d4d8:	4603      	mov	r3, r0
 802d4da:	a807      	add	r0, sp, #28
 802d4dc:	f9b3 8000 	ldrsh.w	r8, [r3]
 802d4e0:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 802d4e4:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 802d4e8:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 802d4ec:	9307      	str	r3, [sp, #28]
 802d4ee:	ebc8 0404 	rsb	r4, r8, r4
 802d4f2:	3401      	adds	r4, #1
 802d4f4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 802d4f8:	ebc9 0505 	rsb	r5, r9, r5
 802d4fc:	f7f2 fa66 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d500:	2c00      	cmp	r4, #0
 802d502:	f105 0501 	add.w	r5, r5, #1
 802d506:	dd55      	ble.n	802d5b4 <GUI_MEMDEV_Paint1Static+0xf0>
 802d508:	2d00      	cmp	r5, #0
 802d50a:	dd53      	ble.n	802d5b4 <GUI_MEMDEV_Paint1Static+0xf0>
 802d50c:	f1ba 0f00 	cmp.w	sl, #0
 802d510:	d155      	bne.n	802d5be <GUI_MEMDEV_Paint1Static+0xfa>
 802d512:	f7fb fb91 	bl	8028c38 <WM_GetDesktopWindow>
 802d516:	4286      	cmp	r6, r0
 802d518:	d07f      	beq.n	802d61a <GUI_MEMDEV_Paint1Static+0x156>
 802d51a:	4b4a      	ldr	r3, [pc, #296]	; (802d644 <GUI_MEMDEV_Paint1Static+0x180>)
 802d51c:	9301      	str	r3, [sp, #4]
 802d51e:	f04f 0a01 	mov.w	sl, #1
 802d522:	4649      	mov	r1, r9
 802d524:	4640      	mov	r0, r8
 802d526:	462b      	mov	r3, r5
 802d528:	4622      	mov	r2, r4
 802d52a:	f8cd b008 	str.w	fp, [sp, #8]
 802d52e:	f8cd a000 	str.w	sl, [sp]
 802d532:	f7ff fce7 	bl	802cf04 <GUI_MEMDEV__CreateFixed>
 802d536:	4680      	mov	r8, r0
 802d538:	4630      	mov	r0, r6
 802d53a:	f7f2 fa35 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d53e:	9007      	str	r0, [sp, #28]
 802d540:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 802d544:	f1b8 0f00 	cmp.w	r8, #0
 802d548:	d060      	beq.n	802d60c <GUI_MEMDEV_Paint1Static+0x148>
 802d54a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802d54c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 802d658 <GUI_MEMDEV_Paint1Static+0x194>
 802d550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802d554:	6283      	str	r3, [r0, #40]	; 0x28
 802d556:	a807      	add	r0, sp, #28
 802d558:	f7f2 fa38 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d55c:	4640      	mov	r0, r8
 802d55e:	f7ff fdfb 	bl	802d158 <GUI_MEMDEV_Select>
 802d562:	9005      	str	r0, [sp, #20]
 802d564:	4650      	mov	r0, sl
 802d566:	f001 fa49 	bl	802e9fc <GUI__AlphaPreserveTrans>
 802d56a:	4640      	mov	r0, r8
 802d56c:	f7ff ff14 	bl	802d398 <GUI_MEMDEV_GetDataPtr>
 802d570:	4a35      	ldr	r2, [pc, #212]	; (802d648 <GUI_MEMDEV_Paint1Static+0x184>)
 802d572:	4b36      	ldr	r3, [pc, #216]	; (802d64c <GUI_MEMDEV_Paint1Static+0x188>)
 802d574:	7819      	ldrb	r1, [r3, #0]
 802d576:	6813      	ldr	r3, [r2, #0]
 802d578:	fb05 f204 	mul.w	r2, r5, r4
 802d57c:	0092      	lsls	r2, r2, #2
 802d57e:	4c34      	ldr	r4, [pc, #208]	; (802d650 <GUI_MEMDEV_Paint1Static+0x18c>)
 802d580:	4798      	blx	r3
 802d582:	4630      	mov	r0, r6
 802d584:	6825      	ldr	r5, [r4, #0]
 802d586:	f8c9 6000 	str.w	r6, [r9]
 802d58a:	f7fb fc4f 	bl	8028e2c <WM_GetWindowOrgX>
 802d58e:	6020      	str	r0, [r4, #0]
 802d590:	4630      	mov	r0, r6
 802d592:	f7fa fdfb 	bl	802818c <WM__Paint1>
 802d596:	2200      	movs	r2, #0
 802d598:	4610      	mov	r0, r2
 802d59a:	6025      	str	r5, [r4, #0]
 802d59c:	f8c9 2000 	str.w	r2, [r9]
 802d5a0:	f001 fa2c 	bl	802e9fc <GUI__AlphaPreserveTrans>
 802d5a4:	9805      	ldr	r0, [sp, #20]
 802d5a6:	f7ff fdd7 	bl	802d158 <GUI_MEMDEV_Select>
 802d5aa:	4630      	mov	r0, r6
 802d5ac:	f7f2 f9f2 	bl	801f994 <GUI_ALLOC_h2p>
 802d5b0:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802d5b2:	b9f0      	cbnz	r0, 802d5f2 <GUI_MEMDEV_Paint1Static+0x12e>
 802d5b4:	3f01      	subs	r7, #1
 802d5b6:	d18c      	bne.n	802d4d2 <GUI_MEMDEV_Paint1Static+0xe>
 802d5b8:	b009      	add	sp, #36	; 0x24
 802d5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d5be:	4650      	mov	r0, sl
 802d5c0:	f7f2 f9f2 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d5c4:	4603      	mov	r3, r0
 802d5c6:	a808      	add	r0, sp, #32
 802d5c8:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 802d5cc:	f840 3d08 	str.w	r3, [r0, #-8]!
 802d5d0:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 802d5d4:	f7f2 f9fa 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d5d8:	45a8      	cmp	r8, r5
 802d5da:	d00f      	beq.n	802d5fc <GUI_MEMDEV_Paint1Static+0x138>
 802d5dc:	464a      	mov	r2, r9
 802d5de:	4641      	mov	r1, r8
 802d5e0:	4650      	mov	r0, sl
 802d5e2:	f7ff ff33 	bl	802d44c <GUI_MEMDEV_SetOrg>
 802d5e6:	4630      	mov	r0, r6
 802d5e8:	f7f2 f9d4 	bl	801f994 <GUI_ALLOC_h2p>
 802d5ec:	6a40      	ldr	r0, [r0, #36]	; 0x24
 802d5ee:	2800      	cmp	r0, #0
 802d5f0:	d0e0      	beq.n	802d5b4 <GUI_MEMDEV_Paint1Static+0xf0>
 802d5f2:	f000 f925 	bl	802d840 <GUI_MEMDEV_Write>
 802d5f6:	b009      	add	sp, #36	; 0x24
 802d5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d5fc:	45a1      	cmp	r9, r4
 802d5fe:	d0d4      	beq.n	802d5aa <GUI_MEMDEV_Paint1Static+0xe6>
 802d600:	464a      	mov	r2, r9
 802d602:	4641      	mov	r1, r8
 802d604:	4650      	mov	r0, sl
 802d606:	f7ff ff21 	bl	802d44c <GUI_MEMDEV_SetOrg>
 802d60a:	e7ec      	b.n	802d5e6 <GUI_MEMDEV_Paint1Static+0x122>
 802d60c:	a807      	add	r0, sp, #28
 802d60e:	f7f2 f9dd 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d612:	4630      	mov	r0, r6
 802d614:	f7fa fdba 	bl	802818c <WM__Paint1>
 802d618:	e7cc      	b.n	802d5b4 <GUI_MEMDEV_Paint1Static+0xf0>
 802d61a:	f7f5 ff1b 	bl	8023454 <LCD_GetXSize>
 802d61e:	4682      	mov	sl, r0
 802d620:	f7f5 ff2e 	bl	8023480 <LCD_GetYSize>
 802d624:	4554      	cmp	r4, sl
 802d626:	dc03      	bgt.n	802d630 <GUI_MEMDEV_Paint1Static+0x16c>
 802d628:	4285      	cmp	r5, r0
 802d62a:	f77f af76 	ble.w	802d51a <GUI_MEMDEV_Paint1Static+0x56>
 802d62e:	46a2      	mov	sl, r4
 802d630:	4285      	cmp	r5, r0
 802d632:	bfa8      	it	ge
 802d634:	4605      	movge	r5, r0
 802d636:	462a      	mov	r2, r5
 802d638:	4651      	mov	r1, sl
 802d63a:	4630      	mov	r0, r6
 802d63c:	f7fb fd72 	bl	8029124 <WM_SetSize>
 802d640:	4654      	mov	r4, sl
 802d642:	e76a      	b.n	802d51a <GUI_MEMDEV_Paint1Static+0x56>
 802d644:	0804145c 	.word	0x0804145c
 802d648:	2000010c 	.word	0x2000010c
 802d64c:	2002e510 	.word	0x2002e510
 802d650:	20030870 	.word	0x20030870
 802d654:	08036344 	.word	0x08036344
 802d658:	20030920 	.word	0x20030920

0802d65c <GUI_USAGE_BM_AddPixel>:
 802d65c:	b470      	push	{r4, r5, r6}
 802d65e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 802d662:	6903      	ldr	r3, [r0, #16]
 802d664:	f9b0 4000 	ldrsh.w	r4, [r0]
 802d668:	1b92      	subs	r2, r2, r6
 802d66a:	fb03 f202 	mul.w	r2, r3, r2
 802d66e:	1b09      	subs	r1, r1, r4
 802d670:	3214      	adds	r2, #20
 802d672:	eb02 02e1 	add.w	r2, r2, r1, asr #3
 802d676:	2580      	movs	r5, #128	; 0x80
 802d678:	5c83      	ldrb	r3, [r0, r2]
 802d67a:	f001 0107 	and.w	r1, r1, #7
 802d67e:	fa45 f101 	asr.w	r1, r5, r1
 802d682:	4319      	orrs	r1, r3
 802d684:	5481      	strb	r1, [r0, r2]
 802d686:	bc70      	pop	{r4, r5, r6}
 802d688:	4770      	bx	lr
 802d68a:	bf00      	nop

0802d68c <GUI_USAGE_BM_GetNextDirty>:
 802d68c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802d690:	4293      	cmp	r3, r2
 802d692:	dd3c      	ble.n	802d70e <GUI_USAGE_BM_GetNextDirty+0x82>
 802d694:	b5f0      	push	{r4, r5, r6, r7, lr}
 802d696:	680d      	ldr	r5, [r1, #0]
 802d698:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 802d69c:	42bd      	cmp	r5, r7
 802d69e:	da34      	bge.n	802d70a <GUI_USAGE_BM_GetNextDirty+0x7e>
 802d6a0:	6906      	ldr	r6, [r0, #16]
 802d6a2:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 802d6a6:	fb06 e602 	mla	r6, r6, r2, lr
 802d6aa:	3614      	adds	r6, #20
 802d6ac:	f005 0307 	and.w	r3, r5, #7
 802d6b0:	5d84      	ldrb	r4, [r0, r6]
 802d6b2:	fa04 f303 	lsl.w	r3, r4, r3
 802d6b6:	3f01      	subs	r7, #1
 802d6b8:	3601      	adds	r6, #1
 802d6ba:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 802d6be:	ebce 02e7 	rsb	r2, lr, r7, asr #3
 802d6c2:	4430      	add	r0, r6
 802d6c4:	d108      	bne.n	802d6d8 <GUI_USAGE_BM_GetNextDirty+0x4c>
 802d6c6:	b322      	cbz	r2, 802d712 <GUI_USAGE_BM_GetNextDirty+0x86>
 802d6c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 802d6cc:	3508      	adds	r5, #8
 802d6ce:	f025 0507 	bic.w	r5, r5, #7
 802d6d2:	3a01      	subs	r2, #1
 802d6d4:	2b00      	cmp	r3, #0
 802d6d6:	d0f6      	beq.n	802d6c6 <GUI_USAGE_BM_GetNextDirty+0x3a>
 802d6d8:	061e      	lsls	r6, r3, #24
 802d6da:	d434      	bmi.n	802d746 <GUI_USAGE_BM_GetNextDirty+0xba>
 802d6dc:	005b      	lsls	r3, r3, #1
 802d6de:	b2db      	uxtb	r3, r3
 802d6e0:	061c      	lsls	r4, r3, #24
 802d6e2:	f105 0501 	add.w	r5, r5, #1
 802d6e6:	d5f9      	bpl.n	802d6dc <GUI_USAGE_BM_GetNextDirty+0x50>
 802d6e8:	065f      	lsls	r7, r3, #25
 802d6ea:	462c      	mov	r4, r5
 802d6ec:	d505      	bpl.n	802d6fa <GUI_USAGE_BM_GetNextDirty+0x6e>
 802d6ee:	005b      	lsls	r3, r3, #1
 802d6f0:	b2db      	uxtb	r3, r3
 802d6f2:	065e      	lsls	r6, r3, #25
 802d6f4:	f104 0401 	add.w	r4, r4, #1
 802d6f8:	d4f9      	bmi.n	802d6ee <GUI_USAGE_BM_GetNextDirty+0x62>
 802d6fa:	f004 0307 	and.w	r3, r4, #7
 802d6fe:	2b07      	cmp	r3, #7
 802d700:	d009      	beq.n	802d716 <GUI_USAGE_BM_GetNextDirty+0x8a>
 802d702:	1b62      	subs	r2, r4, r5
 802d704:	1c50      	adds	r0, r2, #1
 802d706:	600d      	str	r5, [r1, #0]
 802d708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d70a:	2000      	movs	r0, #0
 802d70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d70e:	2000      	movs	r0, #0
 802d710:	4770      	bx	lr
 802d712:	4610      	mov	r0, r2
 802d714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802d716:	2a00      	cmp	r2, #0
 802d718:	ddf3      	ble.n	802d702 <GUI_USAGE_BM_GetNextDirty+0x76>
 802d71a:	7806      	ldrb	r6, [r0, #0]
 802d71c:	2eff      	cmp	r6, #255	; 0xff
 802d71e:	f100 0701 	add.w	r7, r0, #1
 802d722:	d10d      	bne.n	802d740 <GUI_USAGE_BM_GetNextDirty+0xb4>
 802d724:	1883      	adds	r3, r0, r2
 802d726:	e003      	b.n	802d730 <GUI_USAGE_BM_GetNextDirty+0xa4>
 802d728:	f817 6b01 	ldrb.w	r6, [r7], #1
 802d72c:	2eff      	cmp	r6, #255	; 0xff
 802d72e:	d107      	bne.n	802d740 <GUI_USAGE_BM_GetNextDirty+0xb4>
 802d730:	42bb      	cmp	r3, r7
 802d732:	f104 0408 	add.w	r4, r4, #8
 802d736:	d1f7      	bne.n	802d728 <GUI_USAGE_BM_GetNextDirty+0x9c>
 802d738:	e7e3      	b.n	802d702 <GUI_USAGE_BM_GetNextDirty+0x76>
 802d73a:	0076      	lsls	r6, r6, #1
 802d73c:	b2f6      	uxtb	r6, r6
 802d73e:	3401      	adds	r4, #1
 802d740:	0633      	lsls	r3, r6, #24
 802d742:	d4fa      	bmi.n	802d73a <GUI_USAGE_BM_GetNextDirty+0xae>
 802d744:	e7dd      	b.n	802d702 <GUI_USAGE_BM_GetNextDirty+0x76>
 802d746:	2bff      	cmp	r3, #255	; 0xff
 802d748:	bf08      	it	eq
 802d74a:	1dec      	addeq	r4, r5, #7
 802d74c:	d0d5      	beq.n	802d6fa <GUI_USAGE_BM_GetNextDirty+0x6e>
 802d74e:	e7cb      	b.n	802d6e8 <GUI_USAGE_BM_GetNextDirty+0x5c>

0802d750 <_GUI_USAGE_BM_Delete>:
 802d750:	f7f2 bacc 	b.w	801fcec <GUI_ALLOC_Free>

0802d754 <GUI_USAGE_BM_Clear>:
 802d754:	4603      	mov	r3, r0
 802d756:	2100      	movs	r1, #0
 802d758:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 802d75c:	691b      	ldr	r3, [r3, #16]
 802d75e:	3014      	adds	r0, #20
 802d760:	fb03 f202 	mul.w	r2, r3, r2
 802d764:	f001 b9b7 	b.w	802ead6 <memset>

0802d768 <GUI_USAGE_BM_AddHLine>:
 802d768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802d76a:	f9b0 4000 	ldrsh.w	r4, [r0]
 802d76e:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 802d772:	1b0c      	subs	r4, r1, r4
 802d774:	42ac      	cmp	r4, r5
 802d776:	da2b      	bge.n	802d7d0 <GUI_USAGE_BM_AddHLine+0x68>
 802d778:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 802d77c:	6905      	ldr	r5, [r0, #16]
 802d77e:	4423      	add	r3, r4
 802d780:	3b01      	subs	r3, #1
 802d782:	1a52      	subs	r2, r2, r1
 802d784:	10e6      	asrs	r6, r4, #3
 802d786:	fb05 6502 	mla	r5, r5, r2, r6
 802d78a:	43df      	mvns	r7, r3
 802d78c:	f007 0707 	and.w	r7, r7, #7
 802d790:	21ff      	movs	r1, #255	; 0xff
 802d792:	3514      	adds	r5, #20
 802d794:	f004 0407 	and.w	r4, r4, #7
 802d798:	fa01 f207 	lsl.w	r2, r1, r7
 802d79c:	fa41 f404 	asr.w	r4, r1, r4
 802d7a0:	ebd6 06e3 	rsbs	r6, r6, r3, asr #3
 802d7a4:	b2d7      	uxtb	r7, r2
 802d7a6:	b2e4      	uxtb	r4, r4
 802d7a8:	eb00 0205 	add.w	r2, r0, r5
 802d7ac:	5d43      	ldrb	r3, [r0, r5]
 802d7ae:	d010      	beq.n	802d7d2 <GUI_USAGE_BM_AddHLine+0x6a>
 802d7b0:	3e01      	subs	r6, #1
 802d7b2:	431c      	orrs	r4, r3
 802d7b4:	2e00      	cmp	r6, #0
 802d7b6:	f102 0301 	add.w	r3, r2, #1
 802d7ba:	5544      	strb	r4, [r0, r5]
 802d7bc:	dd05      	ble.n	802d7ca <GUI_USAGE_BM_AddHLine+0x62>
 802d7be:	4618      	mov	r0, r3
 802d7c0:	4632      	mov	r2, r6
 802d7c2:	f001 f988 	bl	802ead6 <memset>
 802d7c6:	4603      	mov	r3, r0
 802d7c8:	4433      	add	r3, r6
 802d7ca:	781c      	ldrb	r4, [r3, #0]
 802d7cc:	433c      	orrs	r4, r7
 802d7ce:	701c      	strb	r4, [r3, #0]
 802d7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d7d2:	403c      	ands	r4, r7
 802d7d4:	431c      	orrs	r4, r3
 802d7d6:	5544      	strb	r4, [r0, r5]
 802d7d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802d7da:	bf00      	nop

0802d7dc <GUI_USAGE_BM_Create>:
 802d7dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802d7e0:	f102 040f 	add.w	r4, r2, #15
 802d7e4:	1124      	asrs	r4, r4, #4
 802d7e6:	0064      	lsls	r4, r4, #1
 802d7e8:	461e      	mov	r6, r3
 802d7ea:	fb03 f304 	mul.w	r3, r3, r4
 802d7ee:	b083      	sub	sp, #12
 802d7f0:	4680      	mov	r8, r0
 802d7f2:	f103 0014 	add.w	r0, r3, #20
 802d7f6:	4617      	mov	r7, r2
 802d7f8:	4689      	mov	r9, r1
 802d7fa:	f7f2 faef 	bl	801fddc <GUI_ALLOC_AllocZero>
 802d7fe:	4605      	mov	r5, r0
 802d800:	b1b8      	cbz	r0, 802d832 <GUI_USAGE_BM_Create+0x56>
 802d802:	f7f3 ff5b 	bl	80216bc <GUI_Lock>
 802d806:	4628      	mov	r0, r5
 802d808:	f7f2 f8ce 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d80c:	4601      	mov	r1, r0
 802d80e:	a802      	add	r0, sp, #8
 802d810:	4a0a      	ldr	r2, [pc, #40]	; (802d83c <GUI_USAGE_BM_Create+0x60>)
 802d812:	f840 1d04 	str.w	r1, [r0, #-4]!
 802d816:	2301      	movs	r3, #1
 802d818:	808f      	strh	r7, [r1, #4]
 802d81a:	80ce      	strh	r6, [r1, #6]
 802d81c:	610c      	str	r4, [r1, #16]
 802d81e:	f8a1 8000 	strh.w	r8, [r1]
 802d822:	f8a1 9002 	strh.w	r9, [r1, #2]
 802d826:	608a      	str	r2, [r1, #8]
 802d828:	818b      	strh	r3, [r1, #12]
 802d82a:	f7f2 f8cf 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d82e:	f7f3 ff3b 	bl	80216a8 <GUI_Unlock>
 802d832:	4628      	mov	r0, r5
 802d834:	b003      	add	sp, #12
 802d836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802d83a:	bf00      	nop
 802d83c:	080428f4 	.word	0x080428f4

0802d840 <GUI_MEMDEV_Write>:
 802d840:	b900      	cbnz	r0, 802d844 <GUI_MEMDEV_Write+0x4>
 802d842:	4770      	bx	lr
 802d844:	b570      	push	{r4, r5, r6, lr}
 802d846:	4604      	mov	r4, r0
 802d848:	b084      	sub	sp, #16
 802d84a:	f7f3 ff37 	bl	80216bc <GUI_Lock>
 802d84e:	4620      	mov	r0, r4
 802d850:	f7f2 f8aa 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d854:	4601      	mov	r1, r0
 802d856:	a801      	add	r0, sp, #4
 802d858:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 802d85c:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 802d860:	890a      	ldrh	r2, [r1, #8]
 802d862:	894b      	ldrh	r3, [r1, #10]
 802d864:	9101      	str	r1, [sp, #4]
 802d866:	4432      	add	r2, r6
 802d868:	442b      	add	r3, r5
 802d86a:	3a01      	subs	r2, #1
 802d86c:	3b01      	subs	r3, #1
 802d86e:	f8ad 6008 	strh.w	r6, [sp, #8]
 802d872:	f8ad 200c 	strh.w	r2, [sp, #12]
 802d876:	f8ad 300e 	strh.w	r3, [sp, #14]
 802d87a:	f8ad 500a 	strh.w	r5, [sp, #10]
 802d87e:	f7f2 f8a5 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d882:	a802      	add	r0, sp, #8
 802d884:	f7fa fbb6 	bl	8027ff4 <WM__InitIVRSearch>
 802d888:	b140      	cbz	r0, 802d89c <GUI_MEMDEV_Write+0x5c>
 802d88a:	462a      	mov	r2, r5
 802d88c:	4631      	mov	r1, r6
 802d88e:	4620      	mov	r0, r4
 802d890:	f7ff fb1a 	bl	802cec8 <GUI_MEMDEV__WriteToActiveAt>
 802d894:	f7fa fa88 	bl	8027da8 <WM__GetNextIVR>
 802d898:	2800      	cmp	r0, #0
 802d89a:	d1f6      	bne.n	802d88a <GUI_MEMDEV_Write+0x4a>
 802d89c:	f7f3 ff04 	bl	80216a8 <GUI_Unlock>
 802d8a0:	b004      	add	sp, #16
 802d8a2:	bd70      	pop	{r4, r5, r6, pc}

0802d8a4 <GUI_MEMDEV__WriteToActiveOpaque>:
 802d8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802d8a8:	b0a1      	sub	sp, #132	; 0x84
 802d8aa:	910d      	str	r1, [sp, #52]	; 0x34
 802d8ac:	b910      	cbnz	r0, 802d8b4 <GUI_MEMDEV__WriteToActiveOpaque+0x10>
 802d8ae:	b021      	add	sp, #132	; 0x84
 802d8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802d8b4:	4692      	mov	sl, r2
 802d8b6:	4607      	mov	r7, r0
 802d8b8:	f7f2 f876 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d8bc:	ab20      	add	r3, sp, #128	; 0x80
 802d8be:	6944      	ldr	r4, [r0, #20]
 802d8c0:	f843 0d1c 	str.w	r0, [r3, #-28]!
 802d8c4:	4618      	mov	r0, r3
 802d8c6:	f7f2 f881 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d8ca:	4638      	mov	r0, r7
 802d8cc:	f7ff fbb6 	bl	802d03c <GUI_MEMDEV_GetBitsPerPixel>
 802d8d0:	2808      	cmp	r0, #8
 802d8d2:	4605      	mov	r5, r0
 802d8d4:	dd02      	ble.n	802d8dc <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 802d8d6:	2c00      	cmp	r4, #0
 802d8d8:	f000 80d9 	beq.w	802da8e <GUI_MEMDEV__WriteToActiveOpaque+0x1ea>
 802d8dc:	2301      	movs	r3, #1
 802d8de:	f04f 0b00 	mov.w	fp, #0
 802d8e2:	4638      	mov	r0, r7
 802d8e4:	931f      	str	r3, [sp, #124]	; 0x7c
 802d8e6:	930a      	str	r3, [sp, #40]	; 0x28
 802d8e8:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 802d8ec:	f7f2 f85c 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d8f0:	6801      	ldr	r1, [r0, #0]
 802d8f2:	f8df 8468 	ldr.w	r8, [pc, #1128]	; 802dd5c <GUI_MEMDEV__WriteToActiveOpaque+0x4b8>
 802d8f6:	6909      	ldr	r1, [r1, #16]
 802d8f8:	4604      	mov	r4, r0
 802d8fa:	f8d8 0000 	ldr.w	r0, [r8]
 802d8fe:	68e3      	ldr	r3, [r4, #12]
 802d900:	684d      	ldr	r5, [r1, #4]
 802d902:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 802d906:	930f      	str	r3, [sp, #60]	; 0x3c
 802d908:	ae20      	add	r6, sp, #128	; 0x80
 802d90a:	6923      	ldr	r3, [r4, #16]
 802d90c:	9114      	str	r1, [sp, #80]	; 0x50
 802d90e:	7c40      	ldrb	r0, [r0, #17]
 802d910:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 802d914:	9309      	str	r3, [sp, #36]	; 0x24
 802d916:	f846 4d14 	str.w	r4, [r6, #-20]!
 802d91a:	f8d4 9014 	ldr.w	r9, [r4, #20]
 802d91e:	9116      	str	r1, [sp, #88]	; 0x58
 802d920:	f7f5 fdda 	bl	80234d8 <GUI_GetBitsPerPixelEx>
 802d924:	f8d8 1000 	ldr.w	r1, [r8]
 802d928:	9008      	str	r0, [sp, #32]
 802d92a:	7c48      	ldrb	r0, [r1, #17]
 802d92c:	f7f5 fdee 	bl	802350c <GUI_GetpfIndex2ColorEx>
 802d930:	4604      	mov	r4, r0
 802d932:	4630      	mov	r0, r6
 802d934:	f7f2 f84a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802d938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802d93a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802d93c:	2a08      	cmp	r2, #8
 802d93e:	f240 80a0 	bls.w	802da82 <GUI_MEMDEV__WriteToActiveOpaque+0x1de>
 802d942:	2a10      	cmp	r2, #16
 802d944:	4613      	mov	r3, r2
 802d946:	bf8c      	ite	hi
 802d948:	2304      	movhi	r3, #4
 802d94a:	2302      	movls	r3, #2
 802d94c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 802d950:	930e      	str	r3, [sp, #56]	; 0x38
 802d952:	42a5      	cmp	r5, r4
 802d954:	f000 81ac 	beq.w	802dcb0 <GUI_MEMDEV__WriteToActiveOpaque+0x40c>
 802d958:	f8d8 3000 	ldr.w	r3, [r8]
 802d95c:	7c58      	ldrb	r0, [r3, #17]
 802d95e:	f7f5 fddd 	bl	802351c <GUI_GetpfColor2IndexEx>
 802d962:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802d964:	4606      	mov	r6, r0
 802d966:	0098      	lsls	r0, r3, #2
 802d968:	f7f2 f806 	bl	801f978 <GUI_ALLOC_AllocNoInit>
 802d96c:	9012      	str	r0, [sp, #72]	; 0x48
 802d96e:	2800      	cmp	r0, #0
 802d970:	d09d      	beq.n	802d8ae <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 802d972:	4638      	mov	r0, r7
 802d974:	f7ff fd10 	bl	802d398 <GUI_MEMDEV_GetDataPtr>
 802d978:	4607      	mov	r7, r0
 802d97a:	f1b9 0f00 	cmp.w	r9, #0
 802d97e:	f000 80f5 	beq.w	802db6c <GUI_MEMDEV__WriteToActiveOpaque+0x2c8>
 802d982:	4648      	mov	r0, r9
 802d984:	f7f2 f810 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d988:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802d98a:	901c      	str	r0, [sp, #112]	; 0x70
 802d98c:	2b00      	cmp	r3, #0
 802d98e:	f340 818b 	ble.w	802dca8 <GUI_MEMDEV__WriteToActiveOpaque+0x404>
 802d992:	2300      	movs	r3, #0
 802d994:	930c      	str	r3, [sp, #48]	; 0x30
 802d996:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802d998:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 802d99c:	18fb      	adds	r3, r7, r3
 802d99e:	9315      	str	r3, [sp, #84]	; 0x54
 802d9a0:	ab1d      	add	r3, sp, #116	; 0x74
 802d9a2:	9311      	str	r3, [sp, #68]	; 0x44
 802d9a4:	f04f 0801 	mov.w	r8, #1
 802d9a8:	4619      	mov	r1, r3
 802d9aa:	6883      	ldr	r3, [r0, #8]
 802d9ac:	2200      	movs	r2, #0
 802d9ae:	921d      	str	r2, [sp, #116]	; 0x74
 802d9b0:	695b      	ldr	r3, [r3, #20]
 802d9b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802d9b4:	4798      	blx	r3
 802d9b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802d9b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802d9ba:	1a9b      	subs	r3, r3, r2
 802d9bc:	930b      	str	r3, [sp, #44]	; 0x2c
 802d9be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802d9c0:	4283      	cmp	r3, r0
 802d9c2:	4604      	mov	r4, r0
 802d9c4:	f000 8131 	beq.w	802dc2a <GUI_MEMDEV__WriteToActiveOpaque+0x386>
 802d9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d9ca:	2b01      	cmp	r3, #1
 802d9cc:	f000 80f2 	beq.w	802dbb4 <GUI_MEMDEV__WriteToActiveOpaque+0x310>
 802d9d0:	2800      	cmp	r0, #0
 802d9d2:	d045      	beq.n	802da60 <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 802d9d4:	ab1a      	add	r3, sp, #104	; 0x68
 802d9d6:	9313      	str	r3, [sp, #76]	; 0x4c
 802d9d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 802d9da:	f7f1 ffe5 	bl	801f9a8 <GUI_ALLOC_LockH>
 802d9de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802d9e0:	901a      	str	r0, [sp, #104]	; 0x68
 802d9e2:	2b08      	cmp	r3, #8
 802d9e4:	4607      	mov	r7, r0
 802d9e6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802d9e8:	f240 80d4 	bls.w	802db94 <GUI_MEMDEV__WriteToActiveOpaque+0x2f0>
 802d9ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802d9ee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802d9f0:	46a3      	mov	fp, r4
 802d9f2:	fb02 1a03 	mla	sl, r2, r3, r1
 802d9f6:	4681      	mov	r9, r0
 802d9f8:	f83a 0b02 	ldrh.w	r0, [sl], #2
 802d9fc:	47a8      	blx	r5
 802d9fe:	47b0      	blx	r6
 802da00:	f1bb 0b01 	subs.w	fp, fp, #1
 802da04:	f849 0b04 	str.w	r0, [r9], #4
 802da08:	d1f6      	bne.n	802d9f8 <GUI_MEMDEV__WriteToActiveOpaque+0x154>
 802da0a:	9b08      	ldr	r3, [sp, #32]
 802da0c:	2b1f      	cmp	r3, #31
 802da0e:	d804      	bhi.n	802da1a <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 802da10:	4638      	mov	r0, r7
 802da12:	461a      	mov	r2, r3
 802da14:	4621      	mov	r1, r4
 802da16:	f7fe fe69 	bl	802c6ec <GUI__CompactPixelIndices>
 802da1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802da1c:	9205      	str	r2, [sp, #20]
 802da1e:	2200      	movs	r2, #0
 802da20:	9203      	str	r2, [sp, #12]
 802da22:	9a08      	ldr	r2, [sp, #32]
 802da24:	981d      	ldr	r0, [sp, #116]	; 0x74
 802da26:	9202      	str	r2, [sp, #8]
 802da28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802da2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 802da2c:	9910      	ldr	r1, [sp, #64]	; 0x40
 802da2e:	9304      	str	r3, [sp, #16]
 802da30:	4410      	add	r0, r2
 802da32:	2301      	movs	r3, #1
 802da34:	4622      	mov	r2, r4
 802da36:	f8cd 8004 	str.w	r8, [sp, #4]
 802da3a:	f8cd 8000 	str.w	r8, [sp]
 802da3e:	f7f5 f8ff 	bl	8022c40 <LCD_DrawBitmap>
 802da42:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802da44:	f7f1 ffc2 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802da48:	981c      	ldr	r0, [sp, #112]	; 0x70
 802da4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802da4c:	6882      	ldr	r2, [r0, #8]
 802da4e:	9911      	ldr	r1, [sp, #68]	; 0x44
 802da50:	6957      	ldr	r7, [r2, #20]
 802da52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802da54:	441c      	add	r4, r3
 802da56:	941d      	str	r4, [sp, #116]	; 0x74
 802da58:	47b8      	blx	r7
 802da5a:	4604      	mov	r4, r0
 802da5c:	2800      	cmp	r0, #0
 802da5e:	d1bb      	bne.n	802d9d8 <GUI_MEMDEV__WriteToActiveOpaque+0x134>
 802da60:	9a15      	ldr	r2, [sp, #84]	; 0x54
 802da62:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802da64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802da66:	440a      	add	r2, r1
 802da68:	9215      	str	r2, [sp, #84]	; 0x54
 802da6a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802da6c:	3201      	adds	r2, #1
 802da6e:	9210      	str	r2, [sp, #64]	; 0x40
 802da70:	9a16      	ldr	r2, [sp, #88]	; 0x58
 802da72:	3301      	adds	r3, #1
 802da74:	429a      	cmp	r2, r3
 802da76:	930c      	str	r3, [sp, #48]	; 0x30
 802da78:	f000 8116 	beq.w	802dca8 <GUI_MEMDEV__WriteToActiveOpaque+0x404>
 802da7c:	981c      	ldr	r0, [sp, #112]	; 0x70
 802da7e:	9911      	ldr	r1, [sp, #68]	; 0x44
 802da80:	e793      	b.n	802d9aa <GUI_MEMDEV__WriteToActiveOpaque+0x106>
 802da82:	2a01      	cmp	r2, #1
 802da84:	d16e      	bne.n	802db64 <GUI_MEMDEV__WriteToActiveOpaque+0x2c0>
 802da86:	ab1e      	add	r3, sp, #120	; 0x78
 802da88:	920e      	str	r2, [sp, #56]	; 0x38
 802da8a:	930a      	str	r3, [sp, #40]	; 0x28
 802da8c:	e761      	b.n	802d952 <GUI_MEMDEV__WriteToActiveOpaque+0xae>
 802da8e:	4638      	mov	r0, r7
 802da90:	f7f1 ff8a 	bl	801f9a8 <GUI_ALLOC_LockH>
 802da94:	ab20      	add	r3, sp, #128	; 0x80
 802da96:	f9b0 8008 	ldrsh.w	r8, [r0, #8]
 802da9a:	f843 0d10 	str.w	r0, [r3, #-16]!
 802da9e:	4602      	mov	r2, r0
 802daa0:	6801      	ldr	r1, [r0, #0]
 802daa2:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 802daa6:	9008      	str	r0, [sp, #32]
 802daa8:	4618      	mov	r0, r3
 802daaa:	690e      	ldr	r6, [r1, #16]
 802daac:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 802dab0:	9209      	str	r2, [sp, #36]	; 0x24
 802dab2:	930e      	str	r3, [sp, #56]	; 0x38
 802dab4:	f7f1 ff8a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802dab8:	48a8      	ldr	r0, [pc, #672]	; (802dd5c <GUI_MEMDEV__WriteToActiveOpaque+0x4b8>)
 802daba:	49a9      	ldr	r1, [pc, #676]	; (802dd60 <GUI_MEMDEV__WriteToActiveOpaque+0x4bc>)
 802dabc:	6800      	ldr	r0, [r0, #0]
 802dabe:	6873      	ldr	r3, [r6, #4]
 802dac0:	7c40      	ldrb	r0, [r0, #17]
 802dac2:	930c      	str	r3, [sp, #48]	; 0x30
 802dac4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802dac8:	690c      	ldr	r4, [r1, #16]
 802daca:	6823      	ldr	r3, [r4, #0]
 802dacc:	930a      	str	r3, [sp, #40]	; 0x28
 802dace:	f7f5 fd03 	bl	80234d8 <GUI_GetBitsPerPixelEx>
 802dad2:	2808      	cmp	r0, #8
 802dad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802dad6:	d940      	bls.n	802db5a <GUI_MEMDEV__WriteToActiveOpaque+0x2b6>
 802dad8:	2810      	cmp	r0, #16
 802dada:	bf8c      	ite	hi
 802dadc:	2320      	movhi	r3, #32
 802dade:	2310      	movls	r3, #16
 802dae0:	9309      	str	r3, [sp, #36]	; 0x24
 802dae2:	bf8c      	ite	hi
 802dae4:	f04f 0904 	movhi.w	r9, #4
 802dae8:	f04f 0902 	movls.w	r9, #2
 802daec:	42a6      	cmp	r6, r4
 802daee:	f000 822d 	beq.w	802df4c <GUI_MEMDEV__WriteToActiveOpaque+0x6a8>
 802daf2:	2d20      	cmp	r5, #32
 802daf4:	f000 819e 	beq.w	802de34 <GUI_MEMDEV__WriteToActiveOpaque+0x590>
 802daf8:	2d10      	cmp	r5, #16
 802dafa:	f47f aed8 	bne.w	802d8ae <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 802dafe:	fb08 f009 	mul.w	r0, r8, r9
 802db02:	f7f1 ff39 	bl	801f978 <GUI_ALLOC_AllocNoInit>
 802db06:	9010      	str	r0, [sp, #64]	; 0x40
 802db08:	2800      	cmp	r0, #0
 802db0a:	f43f aed0 	beq.w	802d8ae <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 802db0e:	f7f1 ff4b 	bl	801f9a8 <GUI_ALLOC_LockH>
 802db12:	901e      	str	r0, [sp, #120]	; 0x78
 802db14:	4638      	mov	r0, r7
 802db16:	f7f1 ff47 	bl	801f9a8 <GUI_ALLOC_LockH>
 802db1a:	901c      	str	r0, [sp, #112]	; 0x70
 802db1c:	6923      	ldr	r3, [r4, #16]
 802db1e:	f100 0218 	add.w	r2, r0, #24
 802db22:	920b      	str	r2, [sp, #44]	; 0x2c
 802db24:	2b00      	cmp	r3, #0
 802db26:	f000 8222 	beq.w	802df6e <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 802db2a:	6973      	ldr	r3, [r6, #20]
 802db2c:	2b00      	cmp	r3, #0
 802db2e:	f000 821e 	beq.w	802df6e <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 802db32:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802db36:	0080      	lsls	r0, r0, #2
 802db38:	f7f1 ff1e 	bl	801f978 <GUI_ALLOC_AllocNoInit>
 802db3c:	900f      	str	r0, [sp, #60]	; 0x3c
 802db3e:	2800      	cmp	r0, #0
 802db40:	f040 8269 	bne.w	802e016 <GUI_MEMDEV__WriteToActiveOpaque+0x772>
 802db44:	901d      	str	r0, [sp, #116]	; 0x74
 802db46:	980e      	ldr	r0, [sp, #56]	; 0x38
 802db48:	f7f1 ff40 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802db4c:	a81e      	add	r0, sp, #120	; 0x78
 802db4e:	f7f1 ff3d 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802db52:	9810      	ldr	r0, [sp, #64]	; 0x40
 802db54:	f7f2 f8ca 	bl	801fcec <GUI_ALLOC_Free>
 802db58:	e6a9      	b.n	802d8ae <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 802db5a:	2308      	movs	r3, #8
 802db5c:	9309      	str	r3, [sp, #36]	; 0x24
 802db5e:	f04f 0901 	mov.w	r9, #1
 802db62:	e7c3      	b.n	802daec <GUI_MEMDEV__WriteToActiveOpaque+0x248>
 802db64:	930e      	str	r3, [sp, #56]	; 0x38
 802db66:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 802db6a:	e6f2      	b.n	802d952 <GUI_MEMDEV__WriteToActiveOpaque+0xae>
 802db6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802db6e:	9305      	str	r3, [sp, #20]
 802db70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802db72:	9303      	str	r3, [sp, #12]
 802db74:	2401      	movs	r4, #1
 802db76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802db78:	9004      	str	r0, [sp, #16]
 802db7a:	9302      	str	r3, [sp, #8]
 802db7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802db7e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802db80:	980d      	ldr	r0, [sp, #52]	; 0x34
 802db82:	9401      	str	r4, [sp, #4]
 802db84:	4651      	mov	r1, sl
 802db86:	9400      	str	r4, [sp, #0]
 802db88:	f7f5 f85a 	bl	8022c40 <LCD_DrawBitmap>
 802db8c:	9812      	ldr	r0, [sp, #72]	; 0x48
 802db8e:	f7f2 f8ad 	bl	801fcec <GUI_ALLOC_Free>
 802db92:	e68c      	b.n	802d8ae <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 802db94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802db96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802db98:	46a1      	mov	r9, r4
 802db9a:	fb02 1b03 	mla	fp, r2, r3, r1
 802db9e:	4682      	mov	sl, r0
 802dba0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 802dba4:	47a8      	blx	r5
 802dba6:	47b0      	blx	r6
 802dba8:	f1b9 0901 	subs.w	r9, r9, #1
 802dbac:	f84a 0b04 	str.w	r0, [sl], #4
 802dbb0:	d1f6      	bne.n	802dba0 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 802dbb2:	e72a      	b.n	802da0a <GUI_MEMDEV__WriteToActiveOpaque+0x166>
 802dbb4:	2800      	cmp	r0, #0
 802dbb6:	f43f af53 	beq.w	802da60 <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 802dbba:	9617      	str	r6, [sp, #92]	; 0x5c
 802dbbc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 802dbbe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802dbc0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 802dbc4:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 802dbc8:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 802dbcc:	9513      	str	r5, [sp, #76]	; 0x4c
 802dbce:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 802dbd2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802dbd4:	9605      	str	r6, [sp, #20]
 802dbd6:	f00e 0007 	and.w	r0, lr, #7
 802dbda:	9006      	str	r0, [sp, #24]
 802dbdc:	eb0a 000e 	add.w	r0, sl, lr
 802dbe0:	f1be 0f00 	cmp.w	lr, #0
 802dbe4:	bfb8      	it	lt
 802dbe6:	f10e 0e07 	addlt.w	lr, lr, #7
 802dbea:	eb05 0eee 	add.w	lr, r5, lr, asr #3
 802dbee:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802dbf0:	f8cd e010 	str.w	lr, [sp, #16]
 802dbf4:	4622      	mov	r2, r4
 802dbf6:	2301      	movs	r3, #1
 802dbf8:	4649      	mov	r1, r9
 802dbfa:	9503      	str	r5, [sp, #12]
 802dbfc:	f8cd 8008 	str.w	r8, [sp, #8]
 802dc00:	f8cd 8004 	str.w	r8, [sp, #4]
 802dc04:	f8cd 8000 	str.w	r8, [sp]
 802dc08:	f7f4 ff0c 	bl	8022a24 <LCD__DrawBitmap_1bpp>
 802dc0c:	981c      	ldr	r0, [sp, #112]	; 0x70
 802dc0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802dc10:	6882      	ldr	r2, [r0, #8]
 802dc12:	441c      	add	r4, r3
 802dc14:	4659      	mov	r1, fp
 802dc16:	6953      	ldr	r3, [r2, #20]
 802dc18:	941d      	str	r4, [sp, #116]	; 0x74
 802dc1a:	463a      	mov	r2, r7
 802dc1c:	4798      	blx	r3
 802dc1e:	4604      	mov	r4, r0
 802dc20:	2800      	cmp	r0, #0
 802dc22:	d1d4      	bne.n	802dbce <GUI_MEMDEV__WriteToActiveOpaque+0x32a>
 802dc24:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802dc26:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 802dc28:	e71a      	b.n	802da60 <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 802dc2a:	9812      	ldr	r0, [sp, #72]	; 0x48
 802dc2c:	f7f1 febc 	bl	801f9a8 <GUI_ALLOC_LockH>
 802dc30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802dc32:	901a      	str	r0, [sp, #104]	; 0x68
 802dc34:	2b08      	cmp	r3, #8
 802dc36:	4681      	mov	r9, r0
 802dc38:	9f14      	ldr	r7, [sp, #80]	; 0x50
 802dc3a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 802dc3e:	4604      	mov	r4, r0
 802dc40:	d929      	bls.n	802dc96 <GUI_MEMDEV__WriteToActiveOpaque+0x3f2>
 802dc42:	f83a 0b02 	ldrh.w	r0, [sl], #2
 802dc46:	47a8      	blx	r5
 802dc48:	47b0      	blx	r6
 802dc4a:	3f01      	subs	r7, #1
 802dc4c:	f844 0b04 	str.w	r0, [r4], #4
 802dc50:	d1f7      	bne.n	802dc42 <GUI_MEMDEV__WriteToActiveOpaque+0x39e>
 802dc52:	9b08      	ldr	r3, [sp, #32]
 802dc54:	2b1f      	cmp	r3, #31
 802dc56:	d804      	bhi.n	802dc62 <GUI_MEMDEV__WriteToActiveOpaque+0x3be>
 802dc58:	4648      	mov	r0, r9
 802dc5a:	461a      	mov	r2, r3
 802dc5c:	9914      	ldr	r1, [sp, #80]	; 0x50
 802dc5e:	f7fe fd45 	bl	802c6ec <GUI__CompactPixelIndices>
 802dc62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802dc64:	9205      	str	r2, [sp, #20]
 802dc66:	ab20      	add	r3, sp, #128	; 0x80
 802dc68:	461a      	mov	r2, r3
 802dc6a:	980d      	ldr	r0, [sp, #52]	; 0x34
 802dc6c:	f852 3d18 	ldr.w	r3, [r2, #-24]!
 802dc70:	9304      	str	r3, [sp, #16]
 802dc72:	4614      	mov	r4, r2
 802dc74:	2200      	movs	r2, #0
 802dc76:	9203      	str	r2, [sp, #12]
 802dc78:	9a08      	ldr	r2, [sp, #32]
 802dc7a:	9202      	str	r2, [sp, #8]
 802dc7c:	f8cd 8004 	str.w	r8, [sp, #4]
 802dc80:	f8cd 8000 	str.w	r8, [sp]
 802dc84:	2301      	movs	r3, #1
 802dc86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802dc88:	9910      	ldr	r1, [sp, #64]	; 0x40
 802dc8a:	f7f4 ffd9 	bl	8022c40 <LCD_DrawBitmap>
 802dc8e:	4620      	mov	r0, r4
 802dc90:	f7f1 fe9c 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802dc94:	e6e4      	b.n	802da60 <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 802dc96:	f81a 0b01 	ldrb.w	r0, [sl], #1
 802dc9a:	47a8      	blx	r5
 802dc9c:	47b0      	blx	r6
 802dc9e:	3f01      	subs	r7, #1
 802dca0:	f844 0b04 	str.w	r0, [r4], #4
 802dca4:	d1f7      	bne.n	802dc96 <GUI_MEMDEV__WriteToActiveOpaque+0x3f2>
 802dca6:	e7d4      	b.n	802dc52 <GUI_MEMDEV__WriteToActiveOpaque+0x3ae>
 802dca8:	a81c      	add	r0, sp, #112	; 0x70
 802dcaa:	f7f1 fe8f 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802dcae:	e76d      	b.n	802db8c <GUI_MEMDEV__WriteToActiveOpaque+0x2e8>
 802dcb0:	4638      	mov	r0, r7
 802dcb2:	f7ff fb71 	bl	802d398 <GUI_MEMDEV_GetDataPtr>
 802dcb6:	4607      	mov	r7, r0
 802dcb8:	f1b9 0f00 	cmp.w	r9, #0
 802dcbc:	f000 80a9 	beq.w	802de12 <GUI_MEMDEV__WriteToActiveOpaque+0x56e>
 802dcc0:	4648      	mov	r0, r9
 802dcc2:	f7f1 fe71 	bl	801f9a8 <GUI_ALLOC_LockH>
 802dcc6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802dcc8:	901c      	str	r0, [sp, #112]	; 0x70
 802dcca:	2b00      	cmp	r3, #0
 802dccc:	f340 809d 	ble.w	802de0a <GUI_MEMDEV__WriteToActiveOpaque+0x566>
 802dcd0:	2600      	movs	r6, #0
 802dcd2:	ab1d      	add	r3, sp, #116	; 0x74
 802dcd4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 802dcd8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 802dcdc:	46b1      	mov	r9, r6
 802dcde:	2501      	movs	r5, #1
 802dce0:	4698      	mov	r8, r3
 802dce2:	6883      	ldr	r3, [r0, #8]
 802dce4:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
 802dce8:	695b      	ldr	r3, [r3, #20]
 802dcea:	4632      	mov	r2, r6
 802dcec:	4641      	mov	r1, r8
 802dcee:	4798      	blx	r3
 802dcf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802dcf2:	4283      	cmp	r3, r0
 802dcf4:	4604      	mov	r4, r0
 802dcf6:	d02d      	beq.n	802dd54 <GUI_MEMDEV__WriteToActiveOpaque+0x4b0>
 802dcf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802dcfa:	2b01      	cmp	r3, #1
 802dcfc:	d055      	beq.n	802ddaa <GUI_MEMDEV__WriteToActiveOpaque+0x506>
 802dcfe:	b308      	cbz	r0, 802dd44 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 802dd00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802dd02:	eb03 0b06 	add.w	fp, r3, r6
 802dd06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802dd08:	981d      	ldr	r0, [sp, #116]	; 0x74
 802dd0a:	9305      	str	r3, [sp, #20]
 802dd0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802dd0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802dd10:	9203      	str	r2, [sp, #12]
 802dd12:	fb03 7300 	mla	r3, r3, r0, r7
 802dd16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802dd18:	9202      	str	r2, [sp, #8]
 802dd1a:	9304      	str	r3, [sp, #16]
 802dd1c:	4622      	mov	r2, r4
 802dd1e:	4450      	add	r0, sl
 802dd20:	2301      	movs	r3, #1
 802dd22:	4659      	mov	r1, fp
 802dd24:	9501      	str	r5, [sp, #4]
 802dd26:	9500      	str	r5, [sp, #0]
 802dd28:	f7f4 ff8a 	bl	8022c40 <LCD_DrawBitmap>
 802dd2c:	981c      	ldr	r0, [sp, #112]	; 0x70
 802dd2e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802dd30:	6882      	ldr	r2, [r0, #8]
 802dd32:	441c      	add	r4, r3
 802dd34:	4641      	mov	r1, r8
 802dd36:	6953      	ldr	r3, [r2, #20]
 802dd38:	941d      	str	r4, [sp, #116]	; 0x74
 802dd3a:	4632      	mov	r2, r6
 802dd3c:	4798      	blx	r3
 802dd3e:	4604      	mov	r4, r0
 802dd40:	2800      	cmp	r0, #0
 802dd42:	d1e0      	bne.n	802dd06 <GUI_MEMDEV__WriteToActiveOpaque+0x462>
 802dd44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802dd46:	3601      	adds	r6, #1
 802dd48:	441f      	add	r7, r3
 802dd4a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802dd4c:	42b3      	cmp	r3, r6
 802dd4e:	dd5c      	ble.n	802de0a <GUI_MEMDEV__WriteToActiveOpaque+0x566>
 802dd50:	981c      	ldr	r0, [sp, #112]	; 0x70
 802dd52:	e7c6      	b.n	802dce2 <GUI_MEMDEV__WriteToActiveOpaque+0x43e>
 802dd54:	9708      	str	r7, [sp, #32]
 802dd56:	46b3      	mov	fp, r6
 802dd58:	461f      	mov	r7, r3
 802dd5a:	e004      	b.n	802dd66 <GUI_MEMDEV__WriteToActiveOpaque+0x4c2>
 802dd5c:	200000e8 	.word	0x200000e8
 802dd60:	200308b0 	.word	0x200308b0
 802dd64:	46a3      	mov	fp, r4
 802dd66:	981c      	ldr	r0, [sp, #112]	; 0x70
 802dd68:	6883      	ldr	r3, [r0, #8]
 802dd6a:	f10b 0401 	add.w	r4, fp, #1
 802dd6e:	695b      	ldr	r3, [r3, #20]
 802dd70:	4622      	mov	r2, r4
 802dd72:	4641      	mov	r1, r8
 802dd74:	4798      	blx	r3
 802dd76:	4287      	cmp	r7, r0
 802dd78:	d0f4      	beq.n	802dd64 <GUI_MEMDEV__WriteToActiveOpaque+0x4c0>
 802dd7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802dd7c:	9102      	str	r1, [sp, #8]
 802dd7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802dd80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802dd82:	9f08      	ldr	r7, [sp, #32]
 802dd84:	9205      	str	r2, [sp, #20]
 802dd86:	ebc6 030b 	rsb	r3, r6, fp
 802dd8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802dd8c:	9704      	str	r7, [sp, #16]
 802dd8e:	4431      	add	r1, r6
 802dd90:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802dd92:	9203      	str	r2, [sp, #12]
 802dd94:	3301      	adds	r3, #1
 802dd96:	9501      	str	r5, [sp, #4]
 802dd98:	9500      	str	r5, [sp, #0]
 802dd9a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802dd9c:	4650      	mov	r0, sl
 802dd9e:	fb06 7703 	mla	r7, r6, r3, r7
 802dda2:	4626      	mov	r6, r4
 802dda4:	f7f4 ff4c 	bl	8022c40 <LCD_DrawBitmap>
 802dda8:	e7cf      	b.n	802dd4a <GUI_MEMDEV__WriteToActiveOpaque+0x4a6>
 802ddaa:	2800      	cmp	r0, #0
 802ddac:	d0ca      	beq.n	802dd44 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 802ddae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802ddb0:	9608      	str	r6, [sp, #32]
 802ddb2:	eb03 0b06 	add.w	fp, r3, r6
 802ddb6:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 802ddba:	980a      	ldr	r0, [sp, #40]	; 0x28
 802ddbc:	9005      	str	r0, [sp, #20]
 802ddbe:	f00e 0007 	and.w	r0, lr, #7
 802ddc2:	9006      	str	r0, [sp, #24]
 802ddc4:	eb0a 000e 	add.w	r0, sl, lr
 802ddc8:	f1be 0f00 	cmp.w	lr, #0
 802ddcc:	bfb8      	it	lt
 802ddce:	f10e 0e07 	addlt.w	lr, lr, #7
 802ddd2:	eb07 0eee 	add.w	lr, r7, lr, asr #3
 802ddd6:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 802ddd8:	f8cd e010 	str.w	lr, [sp, #16]
 802dddc:	4622      	mov	r2, r4
 802ddde:	2301      	movs	r3, #1
 802dde0:	4659      	mov	r1, fp
 802dde2:	9603      	str	r6, [sp, #12]
 802dde4:	9502      	str	r5, [sp, #8]
 802dde6:	9501      	str	r5, [sp, #4]
 802dde8:	9500      	str	r5, [sp, #0]
 802ddea:	f7f4 fe1b 	bl	8022a24 <LCD__DrawBitmap_1bpp>
 802ddee:	981c      	ldr	r0, [sp, #112]	; 0x70
 802ddf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802ddf2:	6882      	ldr	r2, [r0, #8]
 802ddf4:	441c      	add	r4, r3
 802ddf6:	4641      	mov	r1, r8
 802ddf8:	6953      	ldr	r3, [r2, #20]
 802ddfa:	941d      	str	r4, [sp, #116]	; 0x74
 802ddfc:	9a08      	ldr	r2, [sp, #32]
 802ddfe:	4798      	blx	r3
 802de00:	4604      	mov	r4, r0
 802de02:	2800      	cmp	r0, #0
 802de04:	d1d7      	bne.n	802ddb6 <GUI_MEMDEV__WriteToActiveOpaque+0x512>
 802de06:	9e08      	ldr	r6, [sp, #32]
 802de08:	e79c      	b.n	802dd44 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 802de0a:	a81c      	add	r0, sp, #112	; 0x70
 802de0c:	f7f1 fdde 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802de10:	e54d      	b.n	802d8ae <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 802de12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802de14:	9305      	str	r3, [sp, #20]
 802de16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802de18:	9303      	str	r3, [sp, #12]
 802de1a:	2401      	movs	r4, #1
 802de1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802de1e:	9004      	str	r0, [sp, #16]
 802de20:	9302      	str	r3, [sp, #8]
 802de22:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802de24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802de26:	980d      	ldr	r0, [sp, #52]	; 0x34
 802de28:	9401      	str	r4, [sp, #4]
 802de2a:	4651      	mov	r1, sl
 802de2c:	9400      	str	r4, [sp, #0]
 802de2e:	f7f4 ff07 	bl	8022c40 <LCD_DrawBitmap>
 802de32:	e53c      	b.n	802d8ae <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 802de34:	fb09 f008 	mul.w	r0, r9, r8
 802de38:	f7f1 fd9e 	bl	801f978 <GUI_ALLOC_AllocNoInit>
 802de3c:	900b      	str	r0, [sp, #44]	; 0x2c
 802de3e:	2800      	cmp	r0, #0
 802de40:	f43f ad35 	beq.w	802d8ae <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 802de44:	f7f1 fdb0 	bl	801f9a8 <GUI_ALLOC_LockH>
 802de48:	901e      	str	r0, [sp, #120]	; 0x78
 802de4a:	4638      	mov	r0, r7
 802de4c:	f7f1 fdac 	bl	801f9a8 <GUI_ALLOC_LockH>
 802de50:	901c      	str	r0, [sp, #112]	; 0x70
 802de52:	6925      	ldr	r5, [r4, #16]
 802de54:	f100 0718 	add.w	r7, r0, #24
 802de58:	b345      	cbz	r5, 802deac <GUI_MEMDEV__WriteToActiveOpaque+0x608>
 802de5a:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 802de5e:	2601      	movs	r6, #1
 802de60:	e019      	b.n	802de96 <GUI_MEMDEV__WriteToActiveOpaque+0x5f2>
 802de62:	f1b9 0f04 	cmp.w	r9, #4
 802de66:	d019      	beq.n	802de9c <GUI_MEMDEV__WriteToActiveOpaque+0x5f8>
 802de68:	f1b9 0f01 	cmp.w	r9, #1
 802de6c:	d016      	beq.n	802de9c <GUI_MEMDEV__WriteToActiveOpaque+0x5f8>
 802de6e:	2200      	movs	r2, #0
 802de70:	991e      	ldr	r1, [sp, #120]	; 0x78
 802de72:	9809      	ldr	r0, [sp, #36]	; 0x24
 802de74:	9002      	str	r0, [sp, #8]
 802de76:	2301      	movs	r3, #1
 802de78:	9205      	str	r2, [sp, #20]
 802de7a:	9203      	str	r2, [sp, #12]
 802de7c:	9104      	str	r1, [sp, #16]
 802de7e:	9601      	str	r6, [sp, #4]
 802de80:	4651      	mov	r1, sl
 802de82:	9600      	str	r6, [sp, #0]
 802de84:	4642      	mov	r2, r8
 802de86:	980d      	ldr	r0, [sp, #52]	; 0x34
 802de88:	449a      	add	sl, r3
 802de8a:	f7f4 fed9 	bl	8022c40 <LCD_DrawBitmap>
 802de8e:	9b08      	ldr	r3, [sp, #32]
 802de90:	3b01      	subs	r3, #1
 802de92:	9308      	str	r3, [sp, #32]
 802de94:	d050      	beq.n	802df38 <GUI_MEMDEV__WriteToActiveOpaque+0x694>
 802de96:	f1b9 0f02 	cmp.w	r9, #2
 802de9a:	d1e2      	bne.n	802de62 <GUI_MEMDEV__WriteToActiveOpaque+0x5be>
 802de9c:	4638      	mov	r0, r7
 802de9e:	991e      	ldr	r1, [sp, #120]	; 0x78
 802dea0:	6925      	ldr	r5, [r4, #16]
 802dea2:	464b      	mov	r3, r9
 802dea4:	4642      	mov	r2, r8
 802dea6:	47a8      	blx	r5
 802dea8:	445f      	add	r7, fp
 802deaa:	e7e0      	b.n	802de6e <GUI_MEMDEV__WriteToActiveOpaque+0x5ca>
 802deac:	950c      	str	r5, [sp, #48]	; 0x30
 802deae:	2601      	movs	r6, #1
 802deb0:	9c08      	ldr	r4, [sp, #32]
 802deb2:	e014      	b.n	802dede <GUI_MEMDEV__WriteToActiveOpaque+0x63a>
 802deb4:	f1b9 0f04 	cmp.w	r9, #4
 802deb8:	f000 818d 	beq.w	802e1d6 <GUI_MEMDEV__WriteToActiveOpaque+0x932>
 802debc:	4599      	cmp	r9, r3
 802debe:	f000 8135 	beq.w	802e12c <GUI_MEMDEV__WriteToActiveOpaque+0x888>
 802dec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802dec4:	9505      	str	r5, [sp, #20]
 802dec6:	9503      	str	r5, [sp, #12]
 802dec8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802deca:	9502      	str	r5, [sp, #8]
 802decc:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 802dece:	9601      	str	r6, [sp, #4]
 802ded0:	9600      	str	r6, [sp, #0]
 802ded2:	9504      	str	r5, [sp, #16]
 802ded4:	f7f4 feb4 	bl	8022c40 <LCD_DrawBitmap>
 802ded8:	3c01      	subs	r4, #1
 802deda:	d02d      	beq.n	802df38 <GUI_MEMDEV__WriteToActiveOpaque+0x694>
 802dedc:	46da      	mov	sl, fp
 802dede:	2301      	movs	r3, #1
 802dee0:	f1b9 0f02 	cmp.w	r9, #2
 802dee4:	4651      	mov	r1, sl
 802dee6:	4642      	mov	r2, r8
 802dee8:	980d      	ldr	r0, [sp, #52]	; 0x34
 802deea:	eb0a 0b03 	add.w	fp, sl, r3
 802deee:	d1e1      	bne.n	802deb4 <GUI_MEMDEV__WriteToActiveOpaque+0x610>
 802def0:	9408      	str	r4, [sp, #32]
 802def2:	ea4f 0588 	mov.w	r5, r8, lsl #2
 802def6:	2401      	movs	r4, #1
 802def8:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 802defc:	46bb      	mov	fp, r7
 802defe:	4646      	mov	r6, r8
 802df00:	f85b 0b04 	ldr.w	r0, [fp], #4
 802df04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802df06:	4798      	blx	r3
 802df08:	3e01      	subs	r6, #1
 802df0a:	f829 0b02 	strh.w	r0, [r9], #2
 802df0e:	d1f7      	bne.n	802df00 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 802df10:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802df12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802df14:	9202      	str	r2, [sp, #8]
 802df16:	9304      	str	r3, [sp, #16]
 802df18:	4651      	mov	r1, sl
 802df1a:	2301      	movs	r3, #1
 802df1c:	9605      	str	r6, [sp, #20]
 802df1e:	9603      	str	r6, [sp, #12]
 802df20:	9401      	str	r4, [sp, #4]
 802df22:	9400      	str	r4, [sp, #0]
 802df24:	4642      	mov	r2, r8
 802df26:	980d      	ldr	r0, [sp, #52]	; 0x34
 802df28:	449a      	add	sl, r3
 802df2a:	f7f4 fe89 	bl	8022c40 <LCD_DrawBitmap>
 802df2e:	9b08      	ldr	r3, [sp, #32]
 802df30:	3b01      	subs	r3, #1
 802df32:	442f      	add	r7, r5
 802df34:	9308      	str	r3, [sp, #32]
 802df36:	d1df      	bne.n	802def8 <GUI_MEMDEV__WriteToActiveOpaque+0x654>
 802df38:	980e      	ldr	r0, [sp, #56]	; 0x38
 802df3a:	f7f1 fd47 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802df3e:	a81e      	add	r0, sp, #120	; 0x78
 802df40:	f7f1 fd44 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802df44:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802df46:	f7f1 fed1 	bl	801fcec <GUI_ALLOC_Free>
 802df4a:	e4b0      	b.n	802d8ae <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 802df4c:	2401      	movs	r4, #1
 802df4e:	3218      	adds	r2, #24
 802df50:	2600      	movs	r6, #0
 802df52:	9204      	str	r2, [sp, #16]
 802df54:	f8cd b00c 	str.w	fp, [sp, #12]
 802df58:	9502      	str	r5, [sp, #8]
 802df5a:	9b08      	ldr	r3, [sp, #32]
 802df5c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802df5e:	9605      	str	r6, [sp, #20]
 802df60:	4642      	mov	r2, r8
 802df62:	4651      	mov	r1, sl
 802df64:	9401      	str	r4, [sp, #4]
 802df66:	9400      	str	r4, [sp, #0]
 802df68:	f7f4 fe6a 	bl	8022c40 <LCD_DrawBitmap>
 802df6c:	e49f      	b.n	802d8ae <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 802df6e:	2500      	movs	r5, #0
 802df70:	2601      	movs	r6, #1
 802df72:	9c08      	ldr	r4, [sp, #32]
 802df74:	e016      	b.n	802dfa4 <GUI_MEMDEV__WriteToActiveOpaque+0x700>
 802df76:	f1b9 0f04 	cmp.w	r9, #4
 802df7a:	f000 80fc 	beq.w	802e176 <GUI_MEMDEV__WriteToActiveOpaque+0x8d2>
 802df7e:	4599      	cmp	r9, r3
 802df80:	f000 80a4 	beq.w	802e0cc <GUI_MEMDEV__WriteToActiveOpaque+0x828>
 802df84:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 802df86:	9708      	str	r7, [sp, #32]
 802df88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802df8a:	9702      	str	r7, [sp, #8]
 802df8c:	9f08      	ldr	r7, [sp, #32]
 802df8e:	9505      	str	r5, [sp, #20]
 802df90:	9503      	str	r5, [sp, #12]
 802df92:	9601      	str	r6, [sp, #4]
 802df94:	9600      	str	r6, [sp, #0]
 802df96:	9704      	str	r7, [sp, #16]
 802df98:	f7f4 fe52 	bl	8022c40 <LCD_DrawBitmap>
 802df9c:	3c01      	subs	r4, #1
 802df9e:	f43f add2 	beq.w	802db46 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 802dfa2:	46da      	mov	sl, fp
 802dfa4:	2301      	movs	r3, #1
 802dfa6:	f1b9 0f02 	cmp.w	r9, #2
 802dfaa:	4651      	mov	r1, sl
 802dfac:	4642      	mov	r2, r8
 802dfae:	980d      	ldr	r0, [sp, #52]	; 0x34
 802dfb0:	eb0a 0b03 	add.w	fp, sl, r3
 802dfb4:	d1df      	bne.n	802df76 <GUI_MEMDEV__WriteToActiveOpaque+0x6d2>
 802dfb6:	ea4f 0648 	mov.w	r6, r8, lsl #1
 802dfba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802dfbc:	9408      	str	r4, [sp, #32]
 802dfbe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802dfc0:	960a      	str	r6, [sp, #40]	; 0x28
 802dfc2:	2401      	movs	r4, #1
 802dfc4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 802dfc6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 802dfca:	46c1      	mov	r9, r8
 802dfcc:	f83b 0b02 	ldrh.w	r0, [fp], #2
 802dfd0:	47a8      	blx	r5
 802dfd2:	47b8      	blx	r7
 802dfd4:	f1b9 0901 	subs.w	r9, r9, #1
 802dfd8:	f826 0b02 	strh.w	r0, [r6], #2
 802dfdc:	d1f6      	bne.n	802dfcc <GUI_MEMDEV__WriteToActiveOpaque+0x728>
 802dfde:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802dfe0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802dfe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802dfe4:	9302      	str	r3, [sp, #8]
 802dfe6:	46b6      	mov	lr, r6
 802dfe8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802dfea:	9204      	str	r2, [sp, #16]
 802dfec:	2301      	movs	r3, #1
 802dfee:	4651      	mov	r1, sl
 802dff0:	44b6      	add	lr, r6
 802dff2:	f8cd 9014 	str.w	r9, [sp, #20]
 802dff6:	f8cd 900c 	str.w	r9, [sp, #12]
 802dffa:	9401      	str	r4, [sp, #4]
 802dffc:	9400      	str	r4, [sp, #0]
 802dffe:	4642      	mov	r2, r8
 802e000:	980d      	ldr	r0, [sp, #52]	; 0x34
 802e002:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 802e006:	449a      	add	sl, r3
 802e008:	f7f4 fe1a 	bl	8022c40 <LCD_DrawBitmap>
 802e00c:	9b08      	ldr	r3, [sp, #32]
 802e00e:	3b01      	subs	r3, #1
 802e010:	9308      	str	r3, [sp, #32]
 802e012:	d1d7      	bne.n	802dfc4 <GUI_MEMDEV__WriteToActiveOpaque+0x720>
 802e014:	e597      	b.n	802db46 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 802e016:	f7f1 fcc7 	bl	801f9a8 <GUI_ALLOC_LockH>
 802e01a:	901d      	str	r0, [sp, #116]	; 0x74
 802e01c:	2800      	cmp	r0, #0
 802e01e:	f43f ad92 	beq.w	802db46 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 802e022:	ea4f 0348 	mov.w	r3, r8, lsl #1
 802e026:	4637      	mov	r7, r6
 802e028:	930a      	str	r3, [sp, #40]	; 0x28
 802e02a:	2501      	movs	r5, #1
 802e02c:	940c      	str	r4, [sp, #48]	; 0x30
 802e02e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802e030:	e019      	b.n	802e066 <GUI_MEMDEV__WriteToActiveOpaque+0x7c2>
 802e032:	f1b9 0f04 	cmp.w	r9, #4
 802e036:	d030      	beq.n	802e09a <GUI_MEMDEV__WriteToActiveOpaque+0x7f6>
 802e038:	f1b9 0f01 	cmp.w	r9, #1
 802e03c:	d028      	beq.n	802e090 <GUI_MEMDEV__WriteToActiveOpaque+0x7ec>
 802e03e:	2200      	movs	r2, #0
 802e040:	991e      	ldr	r1, [sp, #120]	; 0x78
 802e042:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e044:	9002      	str	r0, [sp, #8]
 802e046:	2301      	movs	r3, #1
 802e048:	9205      	str	r2, [sp, #20]
 802e04a:	9203      	str	r2, [sp, #12]
 802e04c:	9104      	str	r1, [sp, #16]
 802e04e:	9501      	str	r5, [sp, #4]
 802e050:	4651      	mov	r1, sl
 802e052:	9500      	str	r5, [sp, #0]
 802e054:	4642      	mov	r2, r8
 802e056:	980d      	ldr	r0, [sp, #52]	; 0x34
 802e058:	449a      	add	sl, r3
 802e05a:	f7f4 fdf1 	bl	8022c40 <LCD_DrawBitmap>
 802e05e:	9b08      	ldr	r3, [sp, #32]
 802e060:	3b01      	subs	r3, #1
 802e062:	9308      	str	r3, [sp, #32]
 802e064:	d02b      	beq.n	802e0be <GUI_MEMDEV__WriteToActiveOpaque+0x81a>
 802e066:	f1b9 0f02 	cmp.w	r9, #2
 802e06a:	d1e2      	bne.n	802e032 <GUI_MEMDEV__WriteToActiveOpaque+0x78e>
 802e06c:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 802e070:	991d      	ldr	r1, [sp, #116]	; 0x74
 802e072:	464b      	mov	r3, r9
 802e074:	4642      	mov	r2, r8
 802e076:	4630      	mov	r0, r6
 802e078:	697c      	ldr	r4, [r7, #20]
 802e07a:	47a0      	blx	r4
 802e07c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802e07e:	981d      	ldr	r0, [sp, #116]	; 0x74
 802e080:	4426      	add	r6, r4
 802e082:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802e084:	4659      	mov	r1, fp
 802e086:	464b      	mov	r3, r9
 802e088:	4642      	mov	r2, r8
 802e08a:	6924      	ldr	r4, [r4, #16]
 802e08c:	47a0      	blx	r4
 802e08e:	e7d6      	b.n	802e03e <GUI_MEMDEV__WriteToActiveOpaque+0x79a>
 802e090:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 802e094:	991d      	ldr	r1, [sp, #116]	; 0x74
 802e096:	2302      	movs	r3, #2
 802e098:	e7ec      	b.n	802e074 <GUI_MEMDEV__WriteToActiveOpaque+0x7d0>
 802e09a:	4630      	mov	r0, r6
 802e09c:	991d      	ldr	r1, [sp, #116]	; 0x74
 802e09e:	697c      	ldr	r4, [r7, #20]
 802e0a0:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 802e0a4:	2302      	movs	r3, #2
 802e0a6:	4642      	mov	r2, r8
 802e0a8:	47a0      	blx	r4
 802e0aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802e0ac:	981d      	ldr	r0, [sp, #116]	; 0x74
 802e0ae:	6924      	ldr	r4, [r4, #16]
 802e0b0:	464b      	mov	r3, r9
 802e0b2:	4659      	mov	r1, fp
 802e0b4:	4642      	mov	r2, r8
 802e0b6:	47a0      	blx	r4
 802e0b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e0ba:	441e      	add	r6, r3
 802e0bc:	e7bf      	b.n	802e03e <GUI_MEMDEV__WriteToActiveOpaque+0x79a>
 802e0be:	a81d      	add	r0, sp, #116	; 0x74
 802e0c0:	f7f1 fc84 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e0c4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 802e0c6:	f7f1 fe11 	bl	801fcec <GUI_ALLOC_Free>
 802e0ca:	e53c      	b.n	802db46 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 802e0cc:	fa08 f603 	lsl.w	r6, r8, r3
 802e0d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802e0d2:	9408      	str	r4, [sp, #32]
 802e0d4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802e0d6:	960a      	str	r6, [sp, #40]	; 0x28
 802e0d8:	464c      	mov	r4, r9
 802e0da:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 802e0dc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 802e0e0:	46c1      	mov	r9, r8
 802e0e2:	f83b 0b02 	ldrh.w	r0, [fp], #2
 802e0e6:	47a8      	blx	r5
 802e0e8:	47b8      	blx	r7
 802e0ea:	f1b9 0901 	subs.w	r9, r9, #1
 802e0ee:	f806 0b01 	strb.w	r0, [r6], #1
 802e0f2:	d1f6      	bne.n	802e0e2 <GUI_MEMDEV__WriteToActiveOpaque+0x83e>
 802e0f4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802e0f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802e0f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e0fa:	9302      	str	r3, [sp, #8]
 802e0fc:	46b6      	mov	lr, r6
 802e0fe:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802e100:	9204      	str	r2, [sp, #16]
 802e102:	2301      	movs	r3, #1
 802e104:	4651      	mov	r1, sl
 802e106:	44b6      	add	lr, r6
 802e108:	f8cd 9014 	str.w	r9, [sp, #20]
 802e10c:	f8cd 900c 	str.w	r9, [sp, #12]
 802e110:	9401      	str	r4, [sp, #4]
 802e112:	9400      	str	r4, [sp, #0]
 802e114:	4642      	mov	r2, r8
 802e116:	980d      	ldr	r0, [sp, #52]	; 0x34
 802e118:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 802e11c:	449a      	add	sl, r3
 802e11e:	f7f4 fd8f 	bl	8022c40 <LCD_DrawBitmap>
 802e122:	9b08      	ldr	r3, [sp, #32]
 802e124:	3b01      	subs	r3, #1
 802e126:	9308      	str	r3, [sp, #32]
 802e128:	d1d7      	bne.n	802e0da <GUI_MEMDEV__WriteToActiveOpaque+0x836>
 802e12a:	e50c      	b.n	802db46 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 802e12c:	9408      	str	r4, [sp, #32]
 802e12e:	ea4f 0588 	mov.w	r5, r8, lsl #2
 802e132:	464c      	mov	r4, r9
 802e134:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 802e138:	46bb      	mov	fp, r7
 802e13a:	4646      	mov	r6, r8
 802e13c:	f85b 0b04 	ldr.w	r0, [fp], #4
 802e140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e142:	4798      	blx	r3
 802e144:	3e01      	subs	r6, #1
 802e146:	f809 0b01 	strb.w	r0, [r9], #1
 802e14a:	d1f7      	bne.n	802e13c <GUI_MEMDEV__WriteToActiveOpaque+0x898>
 802e14c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802e14e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e150:	9202      	str	r2, [sp, #8]
 802e152:	9304      	str	r3, [sp, #16]
 802e154:	4651      	mov	r1, sl
 802e156:	2301      	movs	r3, #1
 802e158:	9605      	str	r6, [sp, #20]
 802e15a:	9603      	str	r6, [sp, #12]
 802e15c:	9401      	str	r4, [sp, #4]
 802e15e:	9400      	str	r4, [sp, #0]
 802e160:	4642      	mov	r2, r8
 802e162:	980d      	ldr	r0, [sp, #52]	; 0x34
 802e164:	449a      	add	sl, r3
 802e166:	f7f4 fd6b 	bl	8022c40 <LCD_DrawBitmap>
 802e16a:	9b08      	ldr	r3, [sp, #32]
 802e16c:	3b01      	subs	r3, #1
 802e16e:	442f      	add	r7, r5
 802e170:	9308      	str	r3, [sp, #32]
 802e172:	d1df      	bne.n	802e134 <GUI_MEMDEV__WriteToActiveOpaque+0x890>
 802e174:	e6e0      	b.n	802df38 <GUI_MEMDEV__WriteToActiveOpaque+0x694>
 802e176:	ea4f 0648 	mov.w	r6, r8, lsl #1
 802e17a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802e17c:	9408      	str	r4, [sp, #32]
 802e17e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 802e180:	960a      	str	r6, [sp, #40]	; 0x28
 802e182:	2401      	movs	r4, #1
 802e184:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 802e186:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 802e18a:	46c1      	mov	r9, r8
 802e18c:	f83b 0b02 	ldrh.w	r0, [fp], #2
 802e190:	47a8      	blx	r5
 802e192:	47b8      	blx	r7
 802e194:	f1b9 0901 	subs.w	r9, r9, #1
 802e198:	f846 0b04 	str.w	r0, [r6], #4
 802e19c:	d1f6      	bne.n	802e18c <GUI_MEMDEV__WriteToActiveOpaque+0x8e8>
 802e19e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 802e1a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 802e1a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e1a4:	9302      	str	r3, [sp, #8]
 802e1a6:	46b6      	mov	lr, r6
 802e1a8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 802e1aa:	9204      	str	r2, [sp, #16]
 802e1ac:	2301      	movs	r3, #1
 802e1ae:	4651      	mov	r1, sl
 802e1b0:	44b6      	add	lr, r6
 802e1b2:	f8cd 9014 	str.w	r9, [sp, #20]
 802e1b6:	f8cd 900c 	str.w	r9, [sp, #12]
 802e1ba:	9401      	str	r4, [sp, #4]
 802e1bc:	9400      	str	r4, [sp, #0]
 802e1be:	4642      	mov	r2, r8
 802e1c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 802e1c2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 802e1c6:	449a      	add	sl, r3
 802e1c8:	f7f4 fd3a 	bl	8022c40 <LCD_DrawBitmap>
 802e1cc:	9b08      	ldr	r3, [sp, #32]
 802e1ce:	3b01      	subs	r3, #1
 802e1d0:	9308      	str	r3, [sp, #32]
 802e1d2:	d1d7      	bne.n	802e184 <GUI_MEMDEV__WriteToActiveOpaque+0x8e0>
 802e1d4:	e4b7      	b.n	802db46 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 802e1d6:	9408      	str	r4, [sp, #32]
 802e1d8:	ea4f 0588 	mov.w	r5, r8, lsl #2
 802e1dc:	2401      	movs	r4, #1
 802e1de:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 802e1e2:	46bb      	mov	fp, r7
 802e1e4:	4646      	mov	r6, r8
 802e1e6:	f85b 0b04 	ldr.w	r0, [fp], #4
 802e1ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e1ec:	4798      	blx	r3
 802e1ee:	3e01      	subs	r6, #1
 802e1f0:	f849 0b04 	str.w	r0, [r9], #4
 802e1f4:	d1f7      	bne.n	802e1e6 <GUI_MEMDEV__WriteToActiveOpaque+0x942>
 802e1f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802e1f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802e1fa:	9202      	str	r2, [sp, #8]
 802e1fc:	9304      	str	r3, [sp, #16]
 802e1fe:	4651      	mov	r1, sl
 802e200:	2301      	movs	r3, #1
 802e202:	9605      	str	r6, [sp, #20]
 802e204:	9603      	str	r6, [sp, #12]
 802e206:	9401      	str	r4, [sp, #4]
 802e208:	9400      	str	r4, [sp, #0]
 802e20a:	4642      	mov	r2, r8
 802e20c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802e20e:	449a      	add	sl, r3
 802e210:	f7f4 fd16 	bl	8022c40 <LCD_DrawBitmap>
 802e214:	9b08      	ldr	r3, [sp, #32]
 802e216:	3b01      	subs	r3, #1
 802e218:	442f      	add	r7, r5
 802e21a:	9308      	str	r3, [sp, #32]
 802e21c:	d1df      	bne.n	802e1de <GUI_MEMDEV__WriteToActiveOpaque+0x93a>
 802e21e:	e68b      	b.n	802df38 <GUI_MEMDEV__WriteToActiveOpaque+0x694>

0802e220 <_cbInvalidateOne>:
 802e220:	f7f9 bb6a 	b.w	80278f8 <WM_InvalidateWindow>

0802e224 <WM_BringToTop>:
 802e224:	b530      	push	{r4, r5, lr}
 802e226:	4604      	mov	r4, r0
 802e228:	b083      	sub	sp, #12
 802e22a:	f7f3 fa47 	bl	80216bc <GUI_Lock>
 802e22e:	b91c      	cbnz	r4, 802e238 <WM_BringToTop+0x14>
 802e230:	f7f3 fa3a 	bl	80216a8 <GUI_Unlock>
 802e234:	b003      	add	sp, #12
 802e236:	bd30      	pop	{r4, r5, pc}
 802e238:	4620      	mov	r0, r4
 802e23a:	f7f1 fbb5 	bl	801f9a8 <GUI_ALLOC_LockH>
 802e23e:	6a03      	ldr	r3, [r0, #32]
 802e240:	9000      	str	r0, [sp, #0]
 802e242:	b343      	cbz	r3, 802e296 <WM_BringToTop+0x72>
 802e244:	6a82      	ldr	r2, [r0, #40]	; 0x28
 802e246:	0712      	lsls	r2, r2, #28
 802e248:	d40d      	bmi.n	802e266 <WM_BringToTop+0x42>
 802e24a:	4618      	mov	r0, r3
 802e24c:	f7f1 fbac 	bl	801f9a8 <GUI_ALLOC_LockH>
 802e250:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802e252:	9001      	str	r0, [sp, #4]
 802e254:	071b      	lsls	r3, r3, #28
 802e256:	d525      	bpl.n	802e2a4 <WM_BringToTop+0x80>
 802e258:	4668      	mov	r0, sp
 802e25a:	f7f1 fbb7 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e25e:	a801      	add	r0, sp, #4
 802e260:	f7f1 fbb4 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e264:	e7e4      	b.n	802e230 <WM_BringToTop+0xc>
 802e266:	4603      	mov	r3, r0
 802e268:	699d      	ldr	r5, [r3, #24]
 802e26a:	4668      	mov	r0, sp
 802e26c:	f7f1 fbae 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e270:	4620      	mov	r0, r4
 802e272:	f7f8 fc67 	bl	8026b44 <WM__RemoveWindowFromList>
 802e276:	4629      	mov	r1, r5
 802e278:	4620      	mov	r0, r4
 802e27a:	f7f8 fbf5 	bl	8026a68 <WM__InsertWindowIntoList>
 802e27e:	4620      	mov	r0, r4
 802e280:	f7f9 fb3a 	bl	80278f8 <WM_InvalidateWindow>
 802e284:	4620      	mov	r0, r4
 802e286:	2200      	movs	r2, #0
 802e288:	4909      	ldr	r1, [pc, #36]	; (802e2b0 <WM_BringToTop+0x8c>)
 802e28a:	f7fa fc9d 	bl	8028bc8 <WM_ForEachDesc>
 802e28e:	f7f3 fa0b 	bl	80216a8 <GUI_Unlock>
 802e292:	b003      	add	sp, #12
 802e294:	bd30      	pop	{r4, r5, pc}
 802e296:	4668      	mov	r0, sp
 802e298:	f7f1 fb98 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e29c:	f7f3 fa04 	bl	80216a8 <GUI_Unlock>
 802e2a0:	b003      	add	sp, #12
 802e2a2:	bd30      	pop	{r4, r5, pc}
 802e2a4:	a801      	add	r0, sp, #4
 802e2a6:	f7f1 fb91 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e2aa:	9b00      	ldr	r3, [sp, #0]
 802e2ac:	e7dc      	b.n	802e268 <WM_BringToTop+0x44>
 802e2ae:	bf00      	nop
 802e2b0:	0802e221 	.word	0x0802e221

0802e2b4 <WM_GetWindowSizeX>:
 802e2b4:	b510      	push	{r4, lr}
 802e2b6:	4604      	mov	r4, r0
 802e2b8:	b082      	sub	sp, #8
 802e2ba:	f7f3 f9ff 	bl	80216bc <GUI_Lock>
 802e2be:	b914      	cbnz	r4, 802e2c6 <WM_GetWindowSizeX+0x12>
 802e2c0:	f7f9 fd6c 	bl	8027d9c <WM_GetActiveWindow>
 802e2c4:	4604      	mov	r4, r0
 802e2c6:	4620      	mov	r0, r4
 802e2c8:	f7f1 fb6e 	bl	801f9a8 <GUI_ALLOC_LockH>
 802e2cc:	aa02      	add	r2, sp, #8
 802e2ce:	f9b0 4000 	ldrsh.w	r4, [r0]
 802e2d2:	f842 0d04 	str.w	r0, [r2, #-4]!
 802e2d6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802e2da:	4610      	mov	r0, r2
 802e2dc:	1b1c      	subs	r4, r3, r4
 802e2de:	f7f1 fb75 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e2e2:	f7f3 f9e1 	bl	80216a8 <GUI_Unlock>
 802e2e6:	3401      	adds	r4, #1
 802e2e8:	4620      	mov	r0, r4
 802e2ea:	b002      	add	sp, #8
 802e2ec:	bd10      	pop	{r4, pc}
 802e2ee:	bf00      	nop

0802e2f0 <WM_GetWindowSizeY>:
 802e2f0:	b510      	push	{r4, lr}
 802e2f2:	4604      	mov	r4, r0
 802e2f4:	b082      	sub	sp, #8
 802e2f6:	f7f3 f9e1 	bl	80216bc <GUI_Lock>
 802e2fa:	b914      	cbnz	r4, 802e302 <WM_GetWindowSizeY+0x12>
 802e2fc:	f7f9 fd4e 	bl	8027d9c <WM_GetActiveWindow>
 802e300:	4604      	mov	r4, r0
 802e302:	4620      	mov	r0, r4
 802e304:	f7f1 fb50 	bl	801f9a8 <GUI_ALLOC_LockH>
 802e308:	aa02      	add	r2, sp, #8
 802e30a:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 802e30e:	f842 0d04 	str.w	r0, [r2, #-4]!
 802e312:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802e316:	4610      	mov	r0, r2
 802e318:	1b1c      	subs	r4, r3, r4
 802e31a:	f7f1 fb57 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e31e:	f7f3 f9c3 	bl	80216a8 <GUI_Unlock>
 802e322:	3401      	adds	r4, #1
 802e324:	4620      	mov	r0, r4
 802e326:	b002      	add	sp, #8
 802e328:	bd10      	pop	{r4, pc}
 802e32a:	bf00      	nop

0802e32c <WM_PID__SetPrevState>:
 802e32c:	b410      	push	{r4}
 802e32e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 802e332:	c807      	ldmia	r0, {r0, r1, r2}
 802e334:	4b03      	ldr	r3, [pc, #12]	; (802e344 <WM_PID__SetPrevState+0x18>)
 802e336:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802e33a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802e33e:	f85d 4b04 	ldr.w	r4, [sp], #4
 802e342:	4770      	bx	lr
 802e344:	2002e514 	.word	0x2002e514

0802e348 <_Screen2hWin>:
 802e348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802e34c:	b099      	sub	sp, #100	; 0x64
 802e34e:	9005      	str	r0, [sp, #20]
 802e350:	b910      	cbnz	r0, 802e358 <_Screen2hWin+0x10>
 802e352:	b019      	add	sp, #100	; 0x64
 802e354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802e358:	4692      	mov	sl, r2
 802e35a:	4699      	mov	r9, r3
 802e35c:	468b      	mov	fp, r1
 802e35e:	f7f1 fb23 	bl	801f9a8 <GUI_ALLOC_LockH>
 802e362:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802e364:	900f      	str	r0, [sp, #60]	; 0x3c
 802e366:	079a      	lsls	r2, r3, #30
 802e368:	f140 8218 	bpl.w	802e79c <_Screen2hWin+0x454>
 802e36c:	f9b0 3000 	ldrsh.w	r3, [r0]
 802e370:	459a      	cmp	sl, r3
 802e372:	f2c0 8213 	blt.w	802e79c <_Screen2hWin+0x454>
 802e376:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802e37a:	459a      	cmp	sl, r3
 802e37c:	f300 820e 	bgt.w	802e79c <_Screen2hWin+0x454>
 802e380:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802e384:	4599      	cmp	r9, r3
 802e386:	f2c0 8209 	blt.w	802e79c <_Screen2hWin+0x454>
 802e38a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802e38e:	4599      	cmp	r9, r3
 802e390:	f300 8204 	bgt.w	802e79c <_Screen2hWin+0x454>
 802e394:	69c3      	ldr	r3, [r0, #28]
 802e396:	9308      	str	r3, [sp, #32]
 802e398:	2b00      	cmp	r3, #0
 802e39a:	f000 81f1 	beq.w	802e780 <_Screen2hWin+0x438>
 802e39e:	455b      	cmp	r3, fp
 802e3a0:	f000 81ee 	beq.w	802e780 <_Screen2hWin+0x438>
 802e3a4:	9b05      	ldr	r3, [sp, #20]
 802e3a6:	9808      	ldr	r0, [sp, #32]
 802e3a8:	930d      	str	r3, [sp, #52]	; 0x34
 802e3aa:	f7f1 fafd 	bl	801f9a8 <GUI_ALLOC_LockH>
 802e3ae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802e3b0:	9010      	str	r0, [sp, #64]	; 0x40
 802e3b2:	079b      	lsls	r3, r3, #30
 802e3b4:	f140 81d6 	bpl.w	802e764 <_Screen2hWin+0x41c>
 802e3b8:	f9b0 3000 	ldrsh.w	r3, [r0]
 802e3bc:	459a      	cmp	sl, r3
 802e3be:	f2c0 81d1 	blt.w	802e764 <_Screen2hWin+0x41c>
 802e3c2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802e3c6:	459a      	cmp	sl, r3
 802e3c8:	f300 81cc 	bgt.w	802e764 <_Screen2hWin+0x41c>
 802e3cc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802e3d0:	4599      	cmp	r9, r3
 802e3d2:	f2c0 81c7 	blt.w	802e764 <_Screen2hWin+0x41c>
 802e3d6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802e3da:	4599      	cmp	r9, r3
 802e3dc:	f300 81c2 	bgt.w	802e764 <_Screen2hWin+0x41c>
 802e3e0:	69c3      	ldr	r3, [r0, #28]
 802e3e2:	9309      	str	r3, [sp, #36]	; 0x24
 802e3e4:	2b00      	cmp	r3, #0
 802e3e6:	f000 81d0 	beq.w	802e78a <_Screen2hWin+0x442>
 802e3ea:	459b      	cmp	fp, r3
 802e3ec:	f000 81cd 	beq.w	802e78a <_Screen2hWin+0x442>
 802e3f0:	9b08      	ldr	r3, [sp, #32]
 802e3f2:	9305      	str	r3, [sp, #20]
 802e3f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e3f6:	f7f1 fad7 	bl	801f9a8 <GUI_ALLOC_LockH>
 802e3fa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802e3fc:	9011      	str	r0, [sp, #68]	; 0x44
 802e3fe:	079f      	lsls	r7, r3, #30
 802e400:	f140 81a3 	bpl.w	802e74a <_Screen2hWin+0x402>
 802e404:	f9b0 3000 	ldrsh.w	r3, [r0]
 802e408:	459a      	cmp	sl, r3
 802e40a:	f2c0 819e 	blt.w	802e74a <_Screen2hWin+0x402>
 802e40e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802e412:	459a      	cmp	sl, r3
 802e414:	f300 8199 	bgt.w	802e74a <_Screen2hWin+0x402>
 802e418:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802e41c:	4599      	cmp	r9, r3
 802e41e:	f2c0 8194 	blt.w	802e74a <_Screen2hWin+0x402>
 802e422:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802e426:	4599      	cmp	r9, r3
 802e428:	f300 818f 	bgt.w	802e74a <_Screen2hWin+0x402>
 802e42c:	69c3      	ldr	r3, [r0, #28]
 802e42e:	930a      	str	r3, [sp, #40]	; 0x28
 802e430:	2b00      	cmp	r3, #0
 802e432:	f000 81bb 	beq.w	802e7ac <_Screen2hWin+0x464>
 802e436:	459b      	cmp	fp, r3
 802e438:	f000 81b8 	beq.w	802e7ac <_Screen2hWin+0x464>
 802e43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e43e:	930b      	str	r3, [sp, #44]	; 0x2c
 802e440:	980a      	ldr	r0, [sp, #40]	; 0x28
 802e442:	f7f1 fab1 	bl	801f9a8 <GUI_ALLOC_LockH>
 802e446:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802e448:	9012      	str	r0, [sp, #72]	; 0x48
 802e44a:	079e      	lsls	r6, r3, #30
 802e44c:	f140 8176 	bpl.w	802e73c <_Screen2hWin+0x3f4>
 802e450:	f9b0 3000 	ldrsh.w	r3, [r0]
 802e454:	459a      	cmp	sl, r3
 802e456:	f2c0 8171 	blt.w	802e73c <_Screen2hWin+0x3f4>
 802e45a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802e45e:	459a      	cmp	sl, r3
 802e460:	f300 816c 	bgt.w	802e73c <_Screen2hWin+0x3f4>
 802e464:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802e468:	4599      	cmp	r9, r3
 802e46a:	f2c0 8167 	blt.w	802e73c <_Screen2hWin+0x3f4>
 802e46e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802e472:	4599      	cmp	r9, r3
 802e474:	f300 8162 	bgt.w	802e73c <_Screen2hWin+0x3f4>
 802e478:	69c3      	ldr	r3, [r0, #28]
 802e47a:	9306      	str	r3, [sp, #24]
 802e47c:	2b00      	cmp	r3, #0
 802e47e:	f000 8198 	beq.w	802e7b2 <_Screen2hWin+0x46a>
 802e482:	459b      	cmp	fp, r3
 802e484:	f000 8195 	beq.w	802e7b2 <_Screen2hWin+0x46a>
 802e488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e48a:	930c      	str	r3, [sp, #48]	; 0x30
 802e48c:	9806      	ldr	r0, [sp, #24]
 802e48e:	f7f1 fa8b 	bl	801f9a8 <GUI_ALLOC_LockH>
 802e492:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802e494:	9013      	str	r0, [sp, #76]	; 0x4c
 802e496:	079d      	lsls	r5, r3, #30
 802e498:	f140 8149 	bpl.w	802e72e <_Screen2hWin+0x3e6>
 802e49c:	f9b0 3000 	ldrsh.w	r3, [r0]
 802e4a0:	459a      	cmp	sl, r3
 802e4a2:	f2c0 8144 	blt.w	802e72e <_Screen2hWin+0x3e6>
 802e4a6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802e4aa:	459a      	cmp	sl, r3
 802e4ac:	f300 813f 	bgt.w	802e72e <_Screen2hWin+0x3e6>
 802e4b0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802e4b4:	4599      	cmp	r9, r3
 802e4b6:	f2c0 813a 	blt.w	802e72e <_Screen2hWin+0x3e6>
 802e4ba:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802e4be:	4599      	cmp	r9, r3
 802e4c0:	f300 8135 	bgt.w	802e72e <_Screen2hWin+0x3e6>
 802e4c4:	69c3      	ldr	r3, [r0, #28]
 802e4c6:	9303      	str	r3, [sp, #12]
 802e4c8:	2b00      	cmp	r3, #0
 802e4ca:	f000 816c 	beq.w	802e7a6 <_Screen2hWin+0x45e>
 802e4ce:	459b      	cmp	fp, r3
 802e4d0:	f000 8169 	beq.w	802e7a6 <_Screen2hWin+0x45e>
 802e4d4:	9b06      	ldr	r3, [sp, #24]
 802e4d6:	9307      	str	r3, [sp, #28]
 802e4d8:	9803      	ldr	r0, [sp, #12]
 802e4da:	f7f1 fa65 	bl	801f9a8 <GUI_ALLOC_LockH>
 802e4de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802e4e0:	9014      	str	r0, [sp, #80]	; 0x50
 802e4e2:	079c      	lsls	r4, r3, #30
 802e4e4:	f140 811d 	bpl.w	802e722 <_Screen2hWin+0x3da>
 802e4e8:	f9b0 3000 	ldrsh.w	r3, [r0]
 802e4ec:	459a      	cmp	sl, r3
 802e4ee:	f2c0 8118 	blt.w	802e722 <_Screen2hWin+0x3da>
 802e4f2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802e4f6:	459a      	cmp	sl, r3
 802e4f8:	f300 8113 	bgt.w	802e722 <_Screen2hWin+0x3da>
 802e4fc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802e500:	4599      	cmp	r9, r3
 802e502:	f2c0 810e 	blt.w	802e722 <_Screen2hWin+0x3da>
 802e506:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802e50a:	4599      	cmp	r9, r3
 802e50c:	f300 8109 	bgt.w	802e722 <_Screen2hWin+0x3da>
 802e510:	69c3      	ldr	r3, [r0, #28]
 802e512:	9301      	str	r3, [sp, #4]
 802e514:	2b00      	cmp	r3, #0
 802e516:	f000 8115 	beq.w	802e744 <_Screen2hWin+0x3fc>
 802e51a:	459b      	cmp	fp, r3
 802e51c:	f000 8112 	beq.w	802e744 <_Screen2hWin+0x3fc>
 802e520:	9b03      	ldr	r3, [sp, #12]
 802e522:	9304      	str	r3, [sp, #16]
 802e524:	9801      	ldr	r0, [sp, #4]
 802e526:	f7f1 fa3f 	bl	801f9a8 <GUI_ALLOC_LockH>
 802e52a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802e52c:	9015      	str	r0, [sp, #84]	; 0x54
 802e52e:	0799      	lsls	r1, r3, #30
 802e530:	f140 80f1 	bpl.w	802e716 <_Screen2hWin+0x3ce>
 802e534:	f9b0 3000 	ldrsh.w	r3, [r0]
 802e538:	459a      	cmp	sl, r3
 802e53a:	f2c0 80ec 	blt.w	802e716 <_Screen2hWin+0x3ce>
 802e53e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802e542:	459a      	cmp	sl, r3
 802e544:	f300 80e7 	bgt.w	802e716 <_Screen2hWin+0x3ce>
 802e548:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802e54c:	4599      	cmp	r9, r3
 802e54e:	f2c0 80e2 	blt.w	802e716 <_Screen2hWin+0x3ce>
 802e552:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802e556:	4599      	cmp	r9, r3
 802e558:	f300 80dd 	bgt.w	802e716 <_Screen2hWin+0x3ce>
 802e55c:	69c7      	ldr	r7, [r0, #28]
 802e55e:	2f00      	cmp	r7, #0
 802e560:	f000 80e9 	beq.w	802e736 <_Screen2hWin+0x3ee>
 802e564:	45bb      	cmp	fp, r7
 802e566:	f000 80e6 	beq.w	802e736 <_Screen2hWin+0x3ee>
 802e56a:	9b01      	ldr	r3, [sp, #4]
 802e56c:	9302      	str	r3, [sp, #8]
 802e56e:	4638      	mov	r0, r7
 802e570:	f7f1 fa1a 	bl	801f9a8 <GUI_ALLOC_LockH>
 802e574:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802e576:	9016      	str	r0, [sp, #88]	; 0x58
 802e578:	079a      	lsls	r2, r3, #30
 802e57a:	f140 80c8 	bpl.w	802e70e <_Screen2hWin+0x3c6>
 802e57e:	f9b0 3000 	ldrsh.w	r3, [r0]
 802e582:	459a      	cmp	sl, r3
 802e584:	f2c0 80c3 	blt.w	802e70e <_Screen2hWin+0x3c6>
 802e588:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802e58c:	459a      	cmp	sl, r3
 802e58e:	f300 80be 	bgt.w	802e70e <_Screen2hWin+0x3c6>
 802e592:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802e596:	4599      	cmp	r9, r3
 802e598:	f2c0 80b9 	blt.w	802e70e <_Screen2hWin+0x3c6>
 802e59c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802e5a0:	4599      	cmp	r9, r3
 802e5a2:	f300 80b4 	bgt.w	802e70e <_Screen2hWin+0x3c6>
 802e5a6:	69c6      	ldr	r6, [r0, #28]
 802e5a8:	2e00      	cmp	r6, #0
 802e5aa:	f000 80be 	beq.w	802e72a <_Screen2hWin+0x3e2>
 802e5ae:	45b3      	cmp	fp, r6
 802e5b0:	bf18      	it	ne
 802e5b2:	46b8      	movne	r8, r7
 802e5b4:	f000 80b9 	beq.w	802e72a <_Screen2hWin+0x3e2>
 802e5b8:	4630      	mov	r0, r6
 802e5ba:	f7f1 f9f5 	bl	801f9a8 <GUI_ALLOC_LockH>
 802e5be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802e5c0:	9017      	str	r0, [sp, #92]	; 0x5c
 802e5c2:	079b      	lsls	r3, r3, #30
 802e5c4:	f140 809f 	bpl.w	802e706 <_Screen2hWin+0x3be>
 802e5c8:	f9b0 3000 	ldrsh.w	r3, [r0]
 802e5cc:	459a      	cmp	sl, r3
 802e5ce:	f2c0 809a 	blt.w	802e706 <_Screen2hWin+0x3be>
 802e5d2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802e5d6:	459a      	cmp	sl, r3
 802e5d8:	f300 8095 	bgt.w	802e706 <_Screen2hWin+0x3be>
 802e5dc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802e5e0:	4599      	cmp	r9, r3
 802e5e2:	f2c0 8090 	blt.w	802e706 <_Screen2hWin+0x3be>
 802e5e6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802e5ea:	4599      	cmp	r9, r3
 802e5ec:	f300 808b 	bgt.w	802e706 <_Screen2hWin+0x3be>
 802e5f0:	69c4      	ldr	r4, [r0, #28]
 802e5f2:	2c00      	cmp	r4, #0
 802e5f4:	f000 8093 	beq.w	802e71e <_Screen2hWin+0x3d6>
 802e5f8:	45a3      	cmp	fp, r4
 802e5fa:	bf18      	it	ne
 802e5fc:	4635      	movne	r5, r6
 802e5fe:	d102      	bne.n	802e606 <_Screen2hWin+0x2be>
 802e600:	e08d      	b.n	802e71e <_Screen2hWin+0x3d6>
 802e602:	45a3      	cmp	fp, r4
 802e604:	d00e      	beq.n	802e624 <_Screen2hWin+0x2dc>
 802e606:	464b      	mov	r3, r9
 802e608:	4652      	mov	r2, sl
 802e60a:	4659      	mov	r1, fp
 802e60c:	4620      	mov	r0, r4
 802e60e:	f7ff fe9b 	bl	802e348 <_Screen2hWin>
 802e612:	2800      	cmp	r0, #0
 802e614:	bf18      	it	ne
 802e616:	4605      	movne	r5, r0
 802e618:	4620      	mov	r0, r4
 802e61a:	f7f1 f9bb 	bl	801f994 <GUI_ALLOC_h2p>
 802e61e:	6a04      	ldr	r4, [r0, #32]
 802e620:	2c00      	cmp	r4, #0
 802e622:	d1ee      	bne.n	802e602 <_Screen2hWin+0x2ba>
 802e624:	a817      	add	r0, sp, #92	; 0x5c
 802e626:	f7f1 f9d1 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e62a:	2d00      	cmp	r5, #0
 802e62c:	bf18      	it	ne
 802e62e:	46a8      	movne	r8, r5
 802e630:	4630      	mov	r0, r6
 802e632:	f7f1 f9af 	bl	801f994 <GUI_ALLOC_h2p>
 802e636:	6a06      	ldr	r6, [r0, #32]
 802e638:	b10e      	cbz	r6, 802e63e <_Screen2hWin+0x2f6>
 802e63a:	45b3      	cmp	fp, r6
 802e63c:	d1bc      	bne.n	802e5b8 <_Screen2hWin+0x270>
 802e63e:	a816      	add	r0, sp, #88	; 0x58
 802e640:	f7f1 f9c4 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e644:	9b02      	ldr	r3, [sp, #8]
 802e646:	f1b8 0f00 	cmp.w	r8, #0
 802e64a:	bf18      	it	ne
 802e64c:	4643      	movne	r3, r8
 802e64e:	9302      	str	r3, [sp, #8]
 802e650:	4638      	mov	r0, r7
 802e652:	f7f1 f99f 	bl	801f994 <GUI_ALLOC_h2p>
 802e656:	6a07      	ldr	r7, [r0, #32]
 802e658:	b10f      	cbz	r7, 802e65e <_Screen2hWin+0x316>
 802e65a:	45bb      	cmp	fp, r7
 802e65c:	d187      	bne.n	802e56e <_Screen2hWin+0x226>
 802e65e:	a815      	add	r0, sp, #84	; 0x54
 802e660:	f7f1 f9b4 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e664:	9a02      	ldr	r2, [sp, #8]
 802e666:	9904      	ldr	r1, [sp, #16]
 802e668:	4613      	mov	r3, r2
 802e66a:	2a00      	cmp	r2, #0
 802e66c:	bf08      	it	eq
 802e66e:	460b      	moveq	r3, r1
 802e670:	9304      	str	r3, [sp, #16]
 802e672:	9801      	ldr	r0, [sp, #4]
 802e674:	f7f1 f98e 	bl	801f994 <GUI_ALLOC_h2p>
 802e678:	6a03      	ldr	r3, [r0, #32]
 802e67a:	9301      	str	r3, [sp, #4]
 802e67c:	b113      	cbz	r3, 802e684 <_Screen2hWin+0x33c>
 802e67e:	459b      	cmp	fp, r3
 802e680:	f47f af50 	bne.w	802e524 <_Screen2hWin+0x1dc>
 802e684:	a814      	add	r0, sp, #80	; 0x50
 802e686:	f7f1 f9a1 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e68a:	9a04      	ldr	r2, [sp, #16]
 802e68c:	9907      	ldr	r1, [sp, #28]
 802e68e:	4613      	mov	r3, r2
 802e690:	2a00      	cmp	r2, #0
 802e692:	bf08      	it	eq
 802e694:	460b      	moveq	r3, r1
 802e696:	9307      	str	r3, [sp, #28]
 802e698:	9803      	ldr	r0, [sp, #12]
 802e69a:	f7f1 f97b 	bl	801f994 <GUI_ALLOC_h2p>
 802e69e:	6a03      	ldr	r3, [r0, #32]
 802e6a0:	9303      	str	r3, [sp, #12]
 802e6a2:	b113      	cbz	r3, 802e6aa <_Screen2hWin+0x362>
 802e6a4:	459b      	cmp	fp, r3
 802e6a6:	f47f af17 	bne.w	802e4d8 <_Screen2hWin+0x190>
 802e6aa:	a813      	add	r0, sp, #76	; 0x4c
 802e6ac:	f7f1 f98e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e6b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 802e6b2:	9a07      	ldr	r2, [sp, #28]
 802e6b4:	2a00      	cmp	r2, #0
 802e6b6:	bf08      	it	eq
 802e6b8:	460a      	moveq	r2, r1
 802e6ba:	920c      	str	r2, [sp, #48]	; 0x30
 802e6bc:	9806      	ldr	r0, [sp, #24]
 802e6be:	f7f1 f969 	bl	801f994 <GUI_ALLOC_h2p>
 802e6c2:	6a03      	ldr	r3, [r0, #32]
 802e6c4:	9306      	str	r3, [sp, #24]
 802e6c6:	b113      	cbz	r3, 802e6ce <_Screen2hWin+0x386>
 802e6c8:	459b      	cmp	fp, r3
 802e6ca:	f47f aedf 	bne.w	802e48c <_Screen2hWin+0x144>
 802e6ce:	a812      	add	r0, sp, #72	; 0x48
 802e6d0:	f7f1 f97c 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e6d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802e6d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802e6d8:	2a00      	cmp	r2, #0
 802e6da:	bf08      	it	eq
 802e6dc:	460a      	moveq	r2, r1
 802e6de:	920b      	str	r2, [sp, #44]	; 0x2c
 802e6e0:	980a      	ldr	r0, [sp, #40]	; 0x28
 802e6e2:	f7f1 f957 	bl	801f994 <GUI_ALLOC_h2p>
 802e6e6:	6a03      	ldr	r3, [r0, #32]
 802e6e8:	930a      	str	r3, [sp, #40]	; 0x28
 802e6ea:	b113      	cbz	r3, 802e6f2 <_Screen2hWin+0x3aa>
 802e6ec:	459b      	cmp	fp, r3
 802e6ee:	f47f aea7 	bne.w	802e440 <_Screen2hWin+0xf8>
 802e6f2:	a811      	add	r0, sp, #68	; 0x44
 802e6f4:	f7f1 f96a 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e6f8:	9905      	ldr	r1, [sp, #20]
 802e6fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802e6fc:	2a00      	cmp	r2, #0
 802e6fe:	bf08      	it	eq
 802e700:	460a      	moveq	r2, r1
 802e702:	9205      	str	r2, [sp, #20]
 802e704:	e024      	b.n	802e750 <_Screen2hWin+0x408>
 802e706:	a817      	add	r0, sp, #92	; 0x5c
 802e708:	f7f1 f960 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e70c:	e790      	b.n	802e630 <_Screen2hWin+0x2e8>
 802e70e:	a816      	add	r0, sp, #88	; 0x58
 802e710:	f7f1 f95c 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e714:	e79c      	b.n	802e650 <_Screen2hWin+0x308>
 802e716:	a815      	add	r0, sp, #84	; 0x54
 802e718:	f7f1 f958 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e71c:	e7a9      	b.n	802e672 <_Screen2hWin+0x32a>
 802e71e:	4635      	mov	r5, r6
 802e720:	e780      	b.n	802e624 <_Screen2hWin+0x2dc>
 802e722:	a814      	add	r0, sp, #80	; 0x50
 802e724:	f7f1 f952 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e728:	e7b6      	b.n	802e698 <_Screen2hWin+0x350>
 802e72a:	46b8      	mov	r8, r7
 802e72c:	e787      	b.n	802e63e <_Screen2hWin+0x2f6>
 802e72e:	a813      	add	r0, sp, #76	; 0x4c
 802e730:	f7f1 f94c 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e734:	e7c2      	b.n	802e6bc <_Screen2hWin+0x374>
 802e736:	9b01      	ldr	r3, [sp, #4]
 802e738:	9302      	str	r3, [sp, #8]
 802e73a:	e790      	b.n	802e65e <_Screen2hWin+0x316>
 802e73c:	a812      	add	r0, sp, #72	; 0x48
 802e73e:	f7f1 f945 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e742:	e7cd      	b.n	802e6e0 <_Screen2hWin+0x398>
 802e744:	9b03      	ldr	r3, [sp, #12]
 802e746:	9304      	str	r3, [sp, #16]
 802e748:	e79c      	b.n	802e684 <_Screen2hWin+0x33c>
 802e74a:	a811      	add	r0, sp, #68	; 0x44
 802e74c:	f7f1 f93e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e750:	9809      	ldr	r0, [sp, #36]	; 0x24
 802e752:	f7f1 f91f 	bl	801f994 <GUI_ALLOC_h2p>
 802e756:	6a03      	ldr	r3, [r0, #32]
 802e758:	9309      	str	r3, [sp, #36]	; 0x24
 802e75a:	b1c3      	cbz	r3, 802e78e <_Screen2hWin+0x446>
 802e75c:	459b      	cmp	fp, r3
 802e75e:	f47f ae49 	bne.w	802e3f4 <_Screen2hWin+0xac>
 802e762:	e014      	b.n	802e78e <_Screen2hWin+0x446>
 802e764:	a810      	add	r0, sp, #64	; 0x40
 802e766:	f7f1 f931 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e76a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802e76c:	9305      	str	r3, [sp, #20]
 802e76e:	9808      	ldr	r0, [sp, #32]
 802e770:	f7f1 f910 	bl	801f994 <GUI_ALLOC_h2p>
 802e774:	6a03      	ldr	r3, [r0, #32]
 802e776:	9308      	str	r3, [sp, #32]
 802e778:	b113      	cbz	r3, 802e780 <_Screen2hWin+0x438>
 802e77a:	459b      	cmp	fp, r3
 802e77c:	f47f ae12 	bne.w	802e3a4 <_Screen2hWin+0x5c>
 802e780:	a80f      	add	r0, sp, #60	; 0x3c
 802e782:	f7f1 f923 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e786:	9805      	ldr	r0, [sp, #20]
 802e788:	e5e3      	b.n	802e352 <_Screen2hWin+0xa>
 802e78a:	9b08      	ldr	r3, [sp, #32]
 802e78c:	9305      	str	r3, [sp, #20]
 802e78e:	a810      	add	r0, sp, #64	; 0x40
 802e790:	f7f1 f91c 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e794:	9b05      	ldr	r3, [sp, #20]
 802e796:	2b00      	cmp	r3, #0
 802e798:	d1e9      	bne.n	802e76e <_Screen2hWin+0x426>
 802e79a:	e7e6      	b.n	802e76a <_Screen2hWin+0x422>
 802e79c:	a80f      	add	r0, sp, #60	; 0x3c
 802e79e:	f7f1 f915 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e7a2:	2000      	movs	r0, #0
 802e7a4:	e5d5      	b.n	802e352 <_Screen2hWin+0xa>
 802e7a6:	9b06      	ldr	r3, [sp, #24]
 802e7a8:	9307      	str	r3, [sp, #28]
 802e7aa:	e77e      	b.n	802e6aa <_Screen2hWin+0x362>
 802e7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802e7ae:	930b      	str	r3, [sp, #44]	; 0x2c
 802e7b0:	e79f      	b.n	802e6f2 <_Screen2hWin+0x3aa>
 802e7b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802e7b4:	930c      	str	r3, [sp, #48]	; 0x30
 802e7b6:	e78a      	b.n	802e6ce <_Screen2hWin+0x386>

0802e7b8 <WM_Screen2hWin>:
 802e7b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 802e7ba:	b083      	sub	sp, #12
 802e7bc:	4606      	mov	r6, r0
 802e7be:	460f      	mov	r7, r1
 802e7c0:	f7f2 ff7c 	bl	80216bc <GUI_Lock>
 802e7c4:	4b21      	ldr	r3, [pc, #132]	; (802e84c <WM_Screen2hWin+0x94>)
 802e7c6:	6818      	ldr	r0, [r3, #0]
 802e7c8:	f7fa fa42 	bl	8028c50 <WM_GetDesktopWindowEx>
 802e7cc:	4605      	mov	r5, r0
 802e7ce:	b920      	cbnz	r0, 802e7da <WM_Screen2hWin+0x22>
 802e7d0:	f7f2 ff6a 	bl	80216a8 <GUI_Unlock>
 802e7d4:	4628      	mov	r0, r5
 802e7d6:	b003      	add	sp, #12
 802e7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802e7da:	f7f1 f8e5 	bl	801f9a8 <GUI_ALLOC_LockH>
 802e7de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802e7e0:	9001      	str	r0, [sp, #4]
 802e7e2:	079b      	lsls	r3, r3, #30
 802e7e4:	d528      	bpl.n	802e838 <WM_Screen2hWin+0x80>
 802e7e6:	f9b0 3000 	ldrsh.w	r3, [r0]
 802e7ea:	429e      	cmp	r6, r3
 802e7ec:	db24      	blt.n	802e838 <WM_Screen2hWin+0x80>
 802e7ee:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 802e7f2:	429e      	cmp	r6, r3
 802e7f4:	dc20      	bgt.n	802e838 <WM_Screen2hWin+0x80>
 802e7f6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 802e7fa:	429f      	cmp	r7, r3
 802e7fc:	db1c      	blt.n	802e838 <WM_Screen2hWin+0x80>
 802e7fe:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 802e802:	429f      	cmp	r7, r3
 802e804:	dc18      	bgt.n	802e838 <WM_Screen2hWin+0x80>
 802e806:	69c4      	ldr	r4, [r0, #28]
 802e808:	b174      	cbz	r4, 802e828 <WM_Screen2hWin+0x70>
 802e80a:	463b      	mov	r3, r7
 802e80c:	4632      	mov	r2, r6
 802e80e:	2100      	movs	r1, #0
 802e810:	4620      	mov	r0, r4
 802e812:	f7ff fd99 	bl	802e348 <_Screen2hWin>
 802e816:	2800      	cmp	r0, #0
 802e818:	bf18      	it	ne
 802e81a:	4605      	movne	r5, r0
 802e81c:	4620      	mov	r0, r4
 802e81e:	f7f1 f8b9 	bl	801f994 <GUI_ALLOC_h2p>
 802e822:	6a04      	ldr	r4, [r0, #32]
 802e824:	2c00      	cmp	r4, #0
 802e826:	d1f0      	bne.n	802e80a <WM_Screen2hWin+0x52>
 802e828:	a801      	add	r0, sp, #4
 802e82a:	f7f1 f8cf 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e82e:	f7f2 ff3b 	bl	80216a8 <GUI_Unlock>
 802e832:	4628      	mov	r0, r5
 802e834:	b003      	add	sp, #12
 802e836:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802e838:	a801      	add	r0, sp, #4
 802e83a:	f7f1 f8c7 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e83e:	f7f2 ff33 	bl	80216a8 <GUI_Unlock>
 802e842:	2500      	movs	r5, #0
 802e844:	4628      	mov	r0, r5
 802e846:	b003      	add	sp, #12
 802e848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802e84a:	bf00      	nop
 802e84c:	200308f4 	.word	0x200308f4

0802e850 <WM_ReleaseCapture>:
 802e850:	b530      	push	{r4, r5, lr}
 802e852:	4d0b      	ldr	r5, [pc, #44]	; (802e880 <WM_ReleaseCapture+0x30>)
 802e854:	4c0b      	ldr	r4, [pc, #44]	; (802e884 <WM_ReleaseCapture+0x34>)
 802e856:	b085      	sub	sp, #20
 802e858:	f7f2 ff30 	bl	80216bc <GUI_Lock>
 802e85c:	682b      	ldr	r3, [r5, #0]
 802e85e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 802e862:	b148      	cbz	r0, 802e878 <WM_ReleaseCapture+0x28>
 802e864:	a904      	add	r1, sp, #16
 802e866:	2318      	movs	r3, #24
 802e868:	f841 3d10 	str.w	r3, [r1, #-16]!
 802e86c:	f7fb fbd6 	bl	802a01c <WM__SendMessage>
 802e870:	682b      	ldr	r3, [r5, #0]
 802e872:	2200      	movs	r2, #0
 802e874:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 802e878:	f7f2 ff16 	bl	80216a8 <GUI_Unlock>
 802e87c:	b005      	add	sp, #20
 802e87e:	bd30      	pop	{r4, r5, pc}
 802e880:	200308f4 	.word	0x200308f4
 802e884:	20030918 	.word	0x20030918

0802e888 <WM_SetFocusOnNextChild>:
 802e888:	b570      	push	{r4, r5, r6, lr}
 802e88a:	b910      	cbnz	r0, 802e892 <WM_SetFocusOnNextChild+0xa>
 802e88c:	4604      	mov	r4, r0
 802e88e:	4620      	mov	r0, r4
 802e890:	bd70      	pop	{r4, r5, r6, pc}
 802e892:	4606      	mov	r6, r0
 802e894:	f7f2 ff12 	bl	80216bc <GUI_Lock>
 802e898:	4630      	mov	r0, r6
 802e89a:	f7fb fb3d 	bl	8029f18 <WM__GetFocusedChild>
 802e89e:	4604      	mov	r4, r0
 802e8a0:	2800      	cmp	r0, #0
 802e8a2:	d131      	bne.n	802e908 <WM_SetFocusOnNextChild+0x80>
 802e8a4:	4630      	mov	r0, r6
 802e8a6:	f7f1 f875 	bl	801f994 <GUI_ALLOC_h2p>
 802e8aa:	69c5      	ldr	r5, [r0, #28]
 802e8ac:	42ac      	cmp	r4, r5
 802e8ae:	bf08      	it	eq
 802e8b0:	2500      	moveq	r5, #0
 802e8b2:	462c      	mov	r4, r5
 802e8b4:	e00f      	b.n	802e8d6 <WM_SetFocusOnNextChild+0x4e>
 802e8b6:	4620      	mov	r0, r4
 802e8b8:	b30c      	cbz	r4, 802e8fe <WM_SetFocusOnNextChild+0x76>
 802e8ba:	f7f1 f86b 	bl	801f994 <GUI_ALLOC_h2p>
 802e8be:	6a03      	ldr	r3, [r0, #32]
 802e8c0:	b91b      	cbnz	r3, 802e8ca <WM_SetFocusOnNextChild+0x42>
 802e8c2:	4630      	mov	r0, r6
 802e8c4:	f7f1 f866 	bl	801f994 <GUI_ALLOC_h2p>
 802e8c8:	69c3      	ldr	r3, [r0, #28]
 802e8ca:	429c      	cmp	r4, r3
 802e8cc:	bf14      	ite	ne
 802e8ce:	461c      	movne	r4, r3
 802e8d0:	2400      	moveq	r4, #0
 802e8d2:	42a5      	cmp	r5, r4
 802e8d4:	d004      	beq.n	802e8e0 <WM_SetFocusOnNextChild+0x58>
 802e8d6:	4620      	mov	r0, r4
 802e8d8:	f7fa fad2 	bl	8028e80 <WM_IsFocusable>
 802e8dc:	2800      	cmp	r0, #0
 802e8de:	d0ea      	beq.n	802e8b6 <WM_SetFocusOnNextChild+0x2e>
 802e8e0:	b16c      	cbz	r4, 802e8fe <WM_SetFocusOnNextChild+0x76>
 802e8e2:	4d0c      	ldr	r5, [pc, #48]	; (802e914 <WM_SetFocusOnNextChild+0x8c>)
 802e8e4:	4620      	mov	r0, r4
 802e8e6:	682e      	ldr	r6, [r5, #0]
 802e8e8:	f7f9 fa3e 	bl	8027d68 <WM__GetTopLevelLayer>
 802e8ec:	1c42      	adds	r2, r0, #1
 802e8ee:	4603      	mov	r3, r0
 802e8f0:	d006      	beq.n	802e900 <WM_SetFocusOnNextChild+0x78>
 802e8f2:	4620      	mov	r0, r4
 802e8f4:	602b      	str	r3, [r5, #0]
 802e8f6:	f7fa fba9 	bl	802904c <WM_SetFocus>
 802e8fa:	602e      	str	r6, [r5, #0]
 802e8fc:	b100      	cbz	r0, 802e900 <WM_SetFocusOnNextChild+0x78>
 802e8fe:	2400      	movs	r4, #0
 802e900:	f7f2 fed2 	bl	80216a8 <GUI_Unlock>
 802e904:	4620      	mov	r0, r4
 802e906:	bd70      	pop	{r4, r5, r6, pc}
 802e908:	f7f1 f844 	bl	801f994 <GUI_ALLOC_h2p>
 802e90c:	6a05      	ldr	r5, [r0, #32]
 802e90e:	2d00      	cmp	r5, #0
 802e910:	d1cc      	bne.n	802e8ac <WM_SetFocusOnNextChild+0x24>
 802e912:	e7c7      	b.n	802e8a4 <WM_SetFocusOnNextChild+0x1c>
 802e914:	200308f4 	.word	0x200308f4

0802e918 <WM_SetFocusOnPrevChild>:
 802e918:	b538      	push	{r3, r4, r5, lr}
 802e91a:	4604      	mov	r4, r0
 802e91c:	b908      	cbnz	r0, 802e922 <WM_SetFocusOnPrevChild+0xa>
 802e91e:	4620      	mov	r0, r4
 802e920:	bd38      	pop	{r3, r4, r5, pc}
 802e922:	f7f2 fecb 	bl	80216bc <GUI_Lock>
 802e926:	4620      	mov	r0, r4
 802e928:	f7fb faf6 	bl	8029f18 <WM__GetFocusedChild>
 802e92c:	4604      	mov	r4, r0
 802e92e:	bb28      	cbnz	r0, 802e97c <WM_SetFocusOnPrevChild+0x64>
 802e930:	4620      	mov	r0, r4
 802e932:	f7fb fb17 	bl	8029f64 <WM__GetLastSibling>
 802e936:	4605      	mov	r5, r0
 802e938:	42ac      	cmp	r4, r5
 802e93a:	bf08      	it	eq
 802e93c:	2500      	moveq	r5, #0
 802e93e:	462c      	mov	r4, r5
 802e940:	e00d      	b.n	802e95e <WM_SetFocusOnPrevChild+0x46>
 802e942:	4620      	mov	r0, r4
 802e944:	b184      	cbz	r4, 802e968 <WM_SetFocusOnPrevChild+0x50>
 802e946:	f7fb fb1b 	bl	8029f80 <WM__GetPrevSibling>
 802e94a:	b910      	cbnz	r0, 802e952 <WM_SetFocusOnPrevChild+0x3a>
 802e94c:	4620      	mov	r0, r4
 802e94e:	f7fb fb09 	bl	8029f64 <WM__GetLastSibling>
 802e952:	4284      	cmp	r4, r0
 802e954:	bf14      	ite	ne
 802e956:	4604      	movne	r4, r0
 802e958:	2400      	moveq	r4, #0
 802e95a:	42a5      	cmp	r5, r4
 802e95c:	d004      	beq.n	802e968 <WM_SetFocusOnPrevChild+0x50>
 802e95e:	4620      	mov	r0, r4
 802e960:	f7fa fa8e 	bl	8028e80 <WM_IsFocusable>
 802e964:	2800      	cmp	r0, #0
 802e966:	d0ec      	beq.n	802e942 <WM_SetFocusOnPrevChild+0x2a>
 802e968:	4620      	mov	r0, r4
 802e96a:	f7fa fb6f 	bl	802904c <WM_SetFocus>
 802e96e:	2800      	cmp	r0, #0
 802e970:	bf18      	it	ne
 802e972:	2400      	movne	r4, #0
 802e974:	f7f2 fe98 	bl	80216a8 <GUI_Unlock>
 802e978:	4620      	mov	r0, r4
 802e97a:	bd38      	pop	{r3, r4, r5, pc}
 802e97c:	f7fb fb00 	bl	8029f80 <WM__GetPrevSibling>
 802e980:	4605      	mov	r5, r0
 802e982:	2800      	cmp	r0, #0
 802e984:	d1d8      	bne.n	802e938 <WM_SetFocusOnPrevChild+0x20>
 802e986:	e7d3      	b.n	802e930 <WM_SetFocusOnPrevChild+0x18>

0802e988 <WM_SetHasTrans>:
 802e988:	b530      	push	{r4, r5, lr}
 802e98a:	4604      	mov	r4, r0
 802e98c:	b083      	sub	sp, #12
 802e98e:	f7f2 fe95 	bl	80216bc <GUI_Lock>
 802e992:	b91c      	cbnz	r4, 802e99c <WM_SetHasTrans+0x14>
 802e994:	f7f2 fe88 	bl	80216a8 <GUI_Unlock>
 802e998:	b003      	add	sp, #12
 802e99a:	bd30      	pop	{r4, r5, pc}
 802e99c:	4620      	mov	r0, r4
 802e99e:	f7f1 f803 	bl	801f9a8 <GUI_ALLOC_LockH>
 802e9a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 802e9a4:	9001      	str	r0, [sp, #4]
 802e9a6:	07db      	lsls	r3, r3, #31
 802e9a8:	d506      	bpl.n	802e9b8 <WM_SetHasTrans+0x30>
 802e9aa:	a801      	add	r0, sp, #4
 802e9ac:	f7f1 f80e 	bl	801f9cc <GUI_ALLOC_UnlockH>
 802e9b0:	f7f2 fe7a 	bl	80216a8 <GUI_Unlock>
 802e9b4:	b003      	add	sp, #12
 802e9b6:	bd30      	pop	{r4, r5, pc}
 802e9b8:	4620      	mov	r0, r4
 802e9ba:	f7fa fd03 	bl	80293c4 <WM_ValidateWindow>
 802e9be:	9d01      	ldr	r5, [sp, #4]
 802e9c0:	4905      	ldr	r1, [pc, #20]	; (802e9d8 <WM_SetHasTrans+0x50>)
 802e9c2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802e9c4:	680b      	ldr	r3, [r1, #0]
 802e9c6:	f042 0201 	orr.w	r2, r2, #1
 802e9ca:	3301      	adds	r3, #1
 802e9cc:	4620      	mov	r0, r4
 802e9ce:	62aa      	str	r2, [r5, #40]	; 0x28
 802e9d0:	600b      	str	r3, [r1, #0]
 802e9d2:	f7f8 ff91 	bl	80278f8 <WM_InvalidateWindow>
 802e9d6:	e7e8      	b.n	802e9aa <WM_SetHasTrans+0x22>
 802e9d8:	20030924 	.word	0x20030924

0802e9dc <WM_GetHasTrans>:
 802e9dc:	b510      	push	{r4, lr}
 802e9de:	4604      	mov	r4, r0
 802e9e0:	f7f2 fe6c 	bl	80216bc <GUI_Lock>
 802e9e4:	b12c      	cbz	r4, 802e9f2 <WM_GetHasTrans+0x16>
 802e9e6:	4620      	mov	r0, r4
 802e9e8:	f7f0 ffd4 	bl	801f994 <GUI_ALLOC_h2p>
 802e9ec:	6a84      	ldr	r4, [r0, #40]	; 0x28
 802e9ee:	f004 0401 	and.w	r4, r4, #1
 802e9f2:	f7f2 fe59 	bl	80216a8 <GUI_Unlock>
 802e9f6:	4620      	mov	r0, r4
 802e9f8:	bd10      	pop	{r4, pc}
 802e9fa:	bf00      	nop

0802e9fc <GUI__AlphaPreserveTrans>:
 802e9fc:	b510      	push	{r4, lr}
 802e9fe:	4b09      	ldr	r3, [pc, #36]	; (802ea24 <GUI__AlphaPreserveTrans+0x28>)
 802ea00:	781c      	ldrb	r4, [r3, #0]
 802ea02:	b938      	cbnz	r0, 802ea14 <GUI__AlphaPreserveTrans+0x18>
 802ea04:	4602      	mov	r2, r0
 802ea06:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 802ea0a:	701a      	strb	r2, [r3, #0]
 802ea0c:	f7f4 fb98 	bl	8023140 <LCD_AA_SetOrMask>
 802ea10:	4620      	mov	r0, r4
 802ea12:	bd10      	pop	{r4, pc}
 802ea14:	2201      	movs	r2, #1
 802ea16:	2000      	movs	r0, #0
 802ea18:	701a      	strb	r2, [r3, #0]
 802ea1a:	f7f4 fb91 	bl	8023140 <LCD_AA_SetOrMask>
 802ea1e:	4620      	mov	r0, r4
 802ea20:	bd10      	pop	{r4, pc}
 802ea22:	bf00      	nop
 802ea24:	20030898 	.word	0x20030898

0802ea28 <__libc_init_array>:
 802ea28:	b570      	push	{r4, r5, r6, lr}
 802ea2a:	4e0d      	ldr	r6, [pc, #52]	; (802ea60 <__libc_init_array+0x38>)
 802ea2c:	4c0d      	ldr	r4, [pc, #52]	; (802ea64 <__libc_init_array+0x3c>)
 802ea2e:	1ba4      	subs	r4, r4, r6
 802ea30:	10a4      	asrs	r4, r4, #2
 802ea32:	2500      	movs	r5, #0
 802ea34:	42a5      	cmp	r5, r4
 802ea36:	d109      	bne.n	802ea4c <__libc_init_array+0x24>
 802ea38:	4e0b      	ldr	r6, [pc, #44]	; (802ea68 <__libc_init_array+0x40>)
 802ea3a:	4c0c      	ldr	r4, [pc, #48]	; (802ea6c <__libc_init_array+0x44>)
 802ea3c:	f000 f960 	bl	802ed00 <_init>
 802ea40:	1ba4      	subs	r4, r4, r6
 802ea42:	10a4      	asrs	r4, r4, #2
 802ea44:	2500      	movs	r5, #0
 802ea46:	42a5      	cmp	r5, r4
 802ea48:	d105      	bne.n	802ea56 <__libc_init_array+0x2e>
 802ea4a:	bd70      	pop	{r4, r5, r6, pc}
 802ea4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802ea50:	4798      	blx	r3
 802ea52:	3501      	adds	r5, #1
 802ea54:	e7ee      	b.n	802ea34 <__libc_init_array+0xc>
 802ea56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802ea5a:	4798      	blx	r3
 802ea5c:	3501      	adds	r5, #1
 802ea5e:	e7f2      	b.n	802ea46 <__libc_init_array+0x1e>
 802ea60:	08042a34 	.word	0x08042a34
 802ea64:	08042a34 	.word	0x08042a34
 802ea68:	08042a34 	.word	0x08042a34
 802ea6c:	08042a38 	.word	0x08042a38

0802ea70 <memcmp>:
 802ea70:	b530      	push	{r4, r5, lr}
 802ea72:	2400      	movs	r4, #0
 802ea74:	42a2      	cmp	r2, r4
 802ea76:	d101      	bne.n	802ea7c <memcmp+0xc>
 802ea78:	2000      	movs	r0, #0
 802ea7a:	e007      	b.n	802ea8c <memcmp+0x1c>
 802ea7c:	5d03      	ldrb	r3, [r0, r4]
 802ea7e:	3401      	adds	r4, #1
 802ea80:	190d      	adds	r5, r1, r4
 802ea82:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 802ea86:	42ab      	cmp	r3, r5
 802ea88:	d0f4      	beq.n	802ea74 <memcmp+0x4>
 802ea8a:	1b58      	subs	r0, r3, r5
 802ea8c:	bd30      	pop	{r4, r5, pc}

0802ea8e <memcpy>:
 802ea8e:	b510      	push	{r4, lr}
 802ea90:	1e43      	subs	r3, r0, #1
 802ea92:	440a      	add	r2, r1
 802ea94:	4291      	cmp	r1, r2
 802ea96:	d100      	bne.n	802ea9a <memcpy+0xc>
 802ea98:	bd10      	pop	{r4, pc}
 802ea9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802ea9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 802eaa2:	e7f7      	b.n	802ea94 <memcpy+0x6>

0802eaa4 <memmove>:
 802eaa4:	4288      	cmp	r0, r1
 802eaa6:	b510      	push	{r4, lr}
 802eaa8:	eb01 0302 	add.w	r3, r1, r2
 802eaac:	d807      	bhi.n	802eabe <memmove+0x1a>
 802eaae:	1e42      	subs	r2, r0, #1
 802eab0:	4299      	cmp	r1, r3
 802eab2:	d00a      	beq.n	802eaca <memmove+0x26>
 802eab4:	f811 4b01 	ldrb.w	r4, [r1], #1
 802eab8:	f802 4f01 	strb.w	r4, [r2, #1]!
 802eabc:	e7f8      	b.n	802eab0 <memmove+0xc>
 802eabe:	4283      	cmp	r3, r0
 802eac0:	d9f5      	bls.n	802eaae <memmove+0xa>
 802eac2:	1881      	adds	r1, r0, r2
 802eac4:	1ad2      	subs	r2, r2, r3
 802eac6:	42d3      	cmn	r3, r2
 802eac8:	d100      	bne.n	802eacc <memmove+0x28>
 802eaca:	bd10      	pop	{r4, pc}
 802eacc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802ead0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 802ead4:	e7f7      	b.n	802eac6 <memmove+0x22>

0802ead6 <memset>:
 802ead6:	4402      	add	r2, r0
 802ead8:	4603      	mov	r3, r0
 802eada:	4293      	cmp	r3, r2
 802eadc:	d100      	bne.n	802eae0 <memset+0xa>
 802eade:	4770      	bx	lr
 802eae0:	f803 1b01 	strb.w	r1, [r3], #1
 802eae4:	e7f9      	b.n	802eada <memset+0x4>

0802eae6 <strcpy>:
 802eae6:	4603      	mov	r3, r0
 802eae8:	f811 2b01 	ldrb.w	r2, [r1], #1
 802eaec:	f803 2b01 	strb.w	r2, [r3], #1
 802eaf0:	2a00      	cmp	r2, #0
 802eaf2:	d1f9      	bne.n	802eae8 <strcpy+0x2>
 802eaf4:	4770      	bx	lr
	...

0802eaf8 <ceil>:
 802eaf8:	ec51 0b10 	vmov	r0, r1, d0
 802eafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802eb00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 802eb04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 802eb08:	2e13      	cmp	r6, #19
 802eb0a:	460c      	mov	r4, r1
 802eb0c:	ee10 5a10 	vmov	r5, s0
 802eb10:	4680      	mov	r8, r0
 802eb12:	dc30      	bgt.n	802eb76 <ceil+0x7e>
 802eb14:	2e00      	cmp	r6, #0
 802eb16:	da12      	bge.n	802eb3e <ceil+0x46>
 802eb18:	a333      	add	r3, pc, #204	; (adr r3, 802ebe8 <ceil+0xf0>)
 802eb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eb1e:	f7e1 fb7d 	bl	801021c <__adddf3>
 802eb22:	2200      	movs	r2, #0
 802eb24:	2300      	movs	r3, #0
 802eb26:	f7e1 ffbf 	bl	8010aa8 <__aeabi_dcmpgt>
 802eb2a:	b128      	cbz	r0, 802eb38 <ceil+0x40>
 802eb2c:	2c00      	cmp	r4, #0
 802eb2e:	db55      	blt.n	802ebdc <ceil+0xe4>
 802eb30:	432c      	orrs	r4, r5
 802eb32:	d057      	beq.n	802ebe4 <ceil+0xec>
 802eb34:	4c2e      	ldr	r4, [pc, #184]	; (802ebf0 <ceil+0xf8>)
 802eb36:	2500      	movs	r5, #0
 802eb38:	4621      	mov	r1, r4
 802eb3a:	4628      	mov	r0, r5
 802eb3c:	e025      	b.n	802eb8a <ceil+0x92>
 802eb3e:	4f2d      	ldr	r7, [pc, #180]	; (802ebf4 <ceil+0xfc>)
 802eb40:	4137      	asrs	r7, r6
 802eb42:	ea01 0307 	and.w	r3, r1, r7
 802eb46:	4303      	orrs	r3, r0
 802eb48:	d01f      	beq.n	802eb8a <ceil+0x92>
 802eb4a:	a327      	add	r3, pc, #156	; (adr r3, 802ebe8 <ceil+0xf0>)
 802eb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eb50:	f7e1 fb64 	bl	801021c <__adddf3>
 802eb54:	2200      	movs	r2, #0
 802eb56:	2300      	movs	r3, #0
 802eb58:	f7e1 ffa6 	bl	8010aa8 <__aeabi_dcmpgt>
 802eb5c:	2800      	cmp	r0, #0
 802eb5e:	d0eb      	beq.n	802eb38 <ceil+0x40>
 802eb60:	2c00      	cmp	r4, #0
 802eb62:	bfc2      	ittt	gt
 802eb64:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 802eb68:	fa43 f606 	asrgt.w	r6, r3, r6
 802eb6c:	19a4      	addgt	r4, r4, r6
 802eb6e:	ea24 0407 	bic.w	r4, r4, r7
 802eb72:	2500      	movs	r5, #0
 802eb74:	e7e0      	b.n	802eb38 <ceil+0x40>
 802eb76:	2e33      	cmp	r6, #51	; 0x33
 802eb78:	dd0b      	ble.n	802eb92 <ceil+0x9a>
 802eb7a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802eb7e:	d104      	bne.n	802eb8a <ceil+0x92>
 802eb80:	ee10 2a10 	vmov	r2, s0
 802eb84:	460b      	mov	r3, r1
 802eb86:	f7e1 fb49 	bl	801021c <__adddf3>
 802eb8a:	ec41 0b10 	vmov	d0, r0, r1
 802eb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802eb92:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 802eb96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802eb9a:	fa23 f707 	lsr.w	r7, r3, r7
 802eb9e:	4207      	tst	r7, r0
 802eba0:	d0f3      	beq.n	802eb8a <ceil+0x92>
 802eba2:	a311      	add	r3, pc, #68	; (adr r3, 802ebe8 <ceil+0xf0>)
 802eba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802eba8:	f7e1 fb38 	bl	801021c <__adddf3>
 802ebac:	2200      	movs	r2, #0
 802ebae:	2300      	movs	r3, #0
 802ebb0:	f7e1 ff7a 	bl	8010aa8 <__aeabi_dcmpgt>
 802ebb4:	2800      	cmp	r0, #0
 802ebb6:	d0bf      	beq.n	802eb38 <ceil+0x40>
 802ebb8:	2c00      	cmp	r4, #0
 802ebba:	dd02      	ble.n	802ebc2 <ceil+0xca>
 802ebbc:	2e14      	cmp	r6, #20
 802ebbe:	d103      	bne.n	802ebc8 <ceil+0xd0>
 802ebc0:	3401      	adds	r4, #1
 802ebc2:	ea25 0507 	bic.w	r5, r5, r7
 802ebc6:	e7b7      	b.n	802eb38 <ceil+0x40>
 802ebc8:	2301      	movs	r3, #1
 802ebca:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802ebce:	fa03 f606 	lsl.w	r6, r3, r6
 802ebd2:	4435      	add	r5, r6
 802ebd4:	4545      	cmp	r5, r8
 802ebd6:	bf38      	it	cc
 802ebd8:	18e4      	addcc	r4, r4, r3
 802ebda:	e7f2      	b.n	802ebc2 <ceil+0xca>
 802ebdc:	2500      	movs	r5, #0
 802ebde:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 802ebe2:	e7a9      	b.n	802eb38 <ceil+0x40>
 802ebe4:	4625      	mov	r5, r4
 802ebe6:	e7a7      	b.n	802eb38 <ceil+0x40>
 802ebe8:	8800759c 	.word	0x8800759c
 802ebec:	7e37e43c 	.word	0x7e37e43c
 802ebf0:	3ff00000 	.word	0x3ff00000
 802ebf4:	000fffff 	.word	0x000fffff

0802ebf8 <floor>:
 802ebf8:	ec51 0b10 	vmov	r0, r1, d0
 802ebfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ec00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 802ec04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 802ec08:	2e13      	cmp	r6, #19
 802ec0a:	460c      	mov	r4, r1
 802ec0c:	ee10 5a10 	vmov	r5, s0
 802ec10:	4680      	mov	r8, r0
 802ec12:	dc34      	bgt.n	802ec7e <floor+0x86>
 802ec14:	2e00      	cmp	r6, #0
 802ec16:	da16      	bge.n	802ec46 <floor+0x4e>
 802ec18:	a335      	add	r3, pc, #212	; (adr r3, 802ecf0 <floor+0xf8>)
 802ec1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec1e:	f7e1 fafd 	bl	801021c <__adddf3>
 802ec22:	2200      	movs	r2, #0
 802ec24:	2300      	movs	r3, #0
 802ec26:	f7e1 ff3f 	bl	8010aa8 <__aeabi_dcmpgt>
 802ec2a:	b148      	cbz	r0, 802ec40 <floor+0x48>
 802ec2c:	2c00      	cmp	r4, #0
 802ec2e:	da59      	bge.n	802ece4 <floor+0xec>
 802ec30:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 802ec34:	4a30      	ldr	r2, [pc, #192]	; (802ecf8 <floor+0x100>)
 802ec36:	432b      	orrs	r3, r5
 802ec38:	2500      	movs	r5, #0
 802ec3a:	42ab      	cmp	r3, r5
 802ec3c:	bf18      	it	ne
 802ec3e:	4614      	movne	r4, r2
 802ec40:	4621      	mov	r1, r4
 802ec42:	4628      	mov	r0, r5
 802ec44:	e025      	b.n	802ec92 <floor+0x9a>
 802ec46:	4f2d      	ldr	r7, [pc, #180]	; (802ecfc <floor+0x104>)
 802ec48:	4137      	asrs	r7, r6
 802ec4a:	ea01 0307 	and.w	r3, r1, r7
 802ec4e:	4303      	orrs	r3, r0
 802ec50:	d01f      	beq.n	802ec92 <floor+0x9a>
 802ec52:	a327      	add	r3, pc, #156	; (adr r3, 802ecf0 <floor+0xf8>)
 802ec54:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ec58:	f7e1 fae0 	bl	801021c <__adddf3>
 802ec5c:	2200      	movs	r2, #0
 802ec5e:	2300      	movs	r3, #0
 802ec60:	f7e1 ff22 	bl	8010aa8 <__aeabi_dcmpgt>
 802ec64:	2800      	cmp	r0, #0
 802ec66:	d0eb      	beq.n	802ec40 <floor+0x48>
 802ec68:	2c00      	cmp	r4, #0
 802ec6a:	bfbe      	ittt	lt
 802ec6c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 802ec70:	fa43 f606 	asrlt.w	r6, r3, r6
 802ec74:	19a4      	addlt	r4, r4, r6
 802ec76:	ea24 0407 	bic.w	r4, r4, r7
 802ec7a:	2500      	movs	r5, #0
 802ec7c:	e7e0      	b.n	802ec40 <floor+0x48>
 802ec7e:	2e33      	cmp	r6, #51	; 0x33
 802ec80:	dd0b      	ble.n	802ec9a <floor+0xa2>
 802ec82:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802ec86:	d104      	bne.n	802ec92 <floor+0x9a>
 802ec88:	ee10 2a10 	vmov	r2, s0
 802ec8c:	460b      	mov	r3, r1
 802ec8e:	f7e1 fac5 	bl	801021c <__adddf3>
 802ec92:	ec41 0b10 	vmov	d0, r0, r1
 802ec96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ec9a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 802ec9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802eca2:	fa23 f707 	lsr.w	r7, r3, r7
 802eca6:	4207      	tst	r7, r0
 802eca8:	d0f3      	beq.n	802ec92 <floor+0x9a>
 802ecaa:	a311      	add	r3, pc, #68	; (adr r3, 802ecf0 <floor+0xf8>)
 802ecac:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ecb0:	f7e1 fab4 	bl	801021c <__adddf3>
 802ecb4:	2200      	movs	r2, #0
 802ecb6:	2300      	movs	r3, #0
 802ecb8:	f7e1 fef6 	bl	8010aa8 <__aeabi_dcmpgt>
 802ecbc:	2800      	cmp	r0, #0
 802ecbe:	d0bf      	beq.n	802ec40 <floor+0x48>
 802ecc0:	2c00      	cmp	r4, #0
 802ecc2:	da02      	bge.n	802ecca <floor+0xd2>
 802ecc4:	2e14      	cmp	r6, #20
 802ecc6:	d103      	bne.n	802ecd0 <floor+0xd8>
 802ecc8:	3401      	adds	r4, #1
 802ecca:	ea25 0507 	bic.w	r5, r5, r7
 802ecce:	e7b7      	b.n	802ec40 <floor+0x48>
 802ecd0:	2301      	movs	r3, #1
 802ecd2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802ecd6:	fa03 f606 	lsl.w	r6, r3, r6
 802ecda:	4435      	add	r5, r6
 802ecdc:	4545      	cmp	r5, r8
 802ecde:	bf38      	it	cc
 802ece0:	18e4      	addcc	r4, r4, r3
 802ece2:	e7f2      	b.n	802ecca <floor+0xd2>
 802ece4:	2500      	movs	r5, #0
 802ece6:	462c      	mov	r4, r5
 802ece8:	e7aa      	b.n	802ec40 <floor+0x48>
 802ecea:	bf00      	nop
 802ecec:	f3af 8000 	nop.w
 802ecf0:	8800759c 	.word	0x8800759c
 802ecf4:	7e37e43c 	.word	0x7e37e43c
 802ecf8:	bff00000 	.word	0xbff00000
 802ecfc:	000fffff 	.word	0x000fffff

0802ed00 <_init>:
 802ed00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ed02:	bf00      	nop
 802ed04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ed06:	bc08      	pop	{r3}
 802ed08:	469e      	mov	lr, r3
 802ed0a:	4770      	bx	lr

0802ed0c <_fini>:
 802ed0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ed0e:	bf00      	nop
 802ed10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ed12:	bc08      	pop	{r3}
 802ed14:	469e      	mov	lr, r3
 802ed16:	4770      	bx	lr
