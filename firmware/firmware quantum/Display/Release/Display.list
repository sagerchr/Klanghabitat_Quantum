
Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eb18  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013d18  0801ecd8  0801ecd8  0002ecd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080329f0  080329f0  000429f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080329f8  080329f8  000429f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080329fc  080329fc  000429fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  20000000  08032a00  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  000501e8  2**0
                  CONTENTS
  8 .bss          00030730  200001e8  200001e8  000501e8  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20030918  20030918  000501e8  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  000501e8  2**0
                  CONTENTS, READONLY
 11 .debug_info   000a2f3c  00000000  00000000  00050218  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000a47c  00000000  00000000  000f3154  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002b10  00000000  00000000  000fd5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002a18  00000000  00000000  001000e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0003d6af  00000000  00000000  00102af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0003642d  00000000  00000000  001401a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0012a365  00000000  00000000  001765d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000e9  00000000  00000000  002a0939  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007ca0  00000000  00000000  002a0a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00020147  00000000  00000000  002a86c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801ecc0 	.word	0x0801ecc0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	0801ecc0 	.word	0x0801ecc0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800034e:	f1a4 0401 	sub.w	r4, r4, #1
 8000352:	d1e9      	bne.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__gedf2>:
 80009ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b0:	e006      	b.n	80009c0 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__ledf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	e002      	b.n	80009c0 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__cmpdf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009d6:	d01b      	beq.n	8000a10 <__cmpdf2+0x54>
 80009d8:	b001      	add	sp, #4
 80009da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009de:	bf0c      	ite	eq
 80009e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009e4:	ea91 0f03 	teqne	r1, r3
 80009e8:	bf02      	ittt	eq
 80009ea:	ea90 0f02 	teqeq	r0, r2
 80009ee:	2000      	moveq	r0, #0
 80009f0:	4770      	bxeq	lr
 80009f2:	f110 0f00 	cmn.w	r0, #0
 80009f6:	ea91 0f03 	teq	r1, r3
 80009fa:	bf58      	it	pl
 80009fc:	4299      	cmppl	r1, r3
 80009fe:	bf08      	it	eq
 8000a00:	4290      	cmpeq	r0, r2
 8000a02:	bf2c      	ite	cs
 8000a04:	17d8      	asrcs	r0, r3, #31
 8000a06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a0a:	f040 0001 	orr.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__cmpdf2+0x64>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d107      	bne.n	8000a30 <__cmpdf2+0x74>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d1d6      	bne.n	80009d8 <__cmpdf2+0x1c>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d0d3      	beq.n	80009d8 <__cmpdf2+0x1c>
 8000a30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdrcmple>:
 8000a38:	4684      	mov	ip, r0
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	468c      	mov	ip, r1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4663      	mov	r3, ip
 8000a44:	e000      	b.n	8000a48 <__aeabi_cdcmpeq>
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdcmpeq>:
 8000a48:	b501      	push	{r0, lr}
 8000a4a:	f7ff ffb7 	bl	80009bc <__cmpdf2>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	bf48      	it	mi
 8000a52:	f110 0f00 	cmnmi.w	r0, #0
 8000a56:	bd01      	pop	{r0, pc}

08000a58 <__aeabi_dcmpeq>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff fff4 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a60:	bf0c      	ite	eq
 8000a62:	2001      	moveq	r0, #1
 8000a64:	2000      	movne	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmplt>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffea 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a74:	bf34      	ite	cc
 8000a76:	2001      	movcc	r0, #1
 8000a78:	2000      	movcs	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmple>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffe0 	bl	8000a48 <__aeabi_cdcmpeq>
 8000a88:	bf94      	ite	ls
 8000a8a:	2001      	movls	r0, #1
 8000a8c:	2000      	movhi	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpge>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffce 	bl	8000a38 <__aeabi_cdrcmple>
 8000a9c:	bf94      	ite	ls
 8000a9e:	2001      	movls	r0, #1
 8000aa0:	2000      	movhi	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmpgt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffc4 	bl	8000a38 <__aeabi_cdrcmple>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b70:	f000 b972 	b.w	8000e58 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9e08      	ldr	r6, [sp, #32]
 8000b92:	4604      	mov	r4, r0
 8000b94:	4688      	mov	r8, r1
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d14b      	bne.n	8000c32 <__udivmoddi4+0xa6>
 8000b9a:	428a      	cmp	r2, r1
 8000b9c:	4615      	mov	r5, r2
 8000b9e:	d967      	bls.n	8000c70 <__udivmoddi4+0xe4>
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	b14a      	cbz	r2, 8000bba <__udivmoddi4+0x2e>
 8000ba6:	f1c2 0720 	rsb	r7, r2, #32
 8000baa:	fa01 f302 	lsl.w	r3, r1, r2
 8000bae:	fa20 f707 	lsr.w	r7, r0, r7
 8000bb2:	4095      	lsls	r5, r2
 8000bb4:	ea47 0803 	orr.w	r8, r7, r3
 8000bb8:	4094      	lsls	r4, r2
 8000bba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bbe:	0c23      	lsrs	r3, r4, #16
 8000bc0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bc4:	fa1f fc85 	uxth.w	ip, r5
 8000bc8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bcc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd0:	fb07 f10c 	mul.w	r1, r7, ip
 8000bd4:	4299      	cmp	r1, r3
 8000bd6:	d909      	bls.n	8000bec <__udivmoddi4+0x60>
 8000bd8:	18eb      	adds	r3, r5, r3
 8000bda:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000bde:	f080 811b 	bcs.w	8000e18 <__udivmoddi4+0x28c>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 8118 	bls.w	8000e18 <__udivmoddi4+0x28c>
 8000be8:	3f02      	subs	r7, #2
 8000bea:	442b      	add	r3, r5
 8000bec:	1a5b      	subs	r3, r3, r1
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bf4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bfc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c00:	45a4      	cmp	ip, r4
 8000c02:	d909      	bls.n	8000c18 <__udivmoddi4+0x8c>
 8000c04:	192c      	adds	r4, r5, r4
 8000c06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c0a:	f080 8107 	bcs.w	8000e1c <__udivmoddi4+0x290>
 8000c0e:	45a4      	cmp	ip, r4
 8000c10:	f240 8104 	bls.w	8000e1c <__udivmoddi4+0x290>
 8000c14:	3802      	subs	r0, #2
 8000c16:	442c      	add	r4, r5
 8000c18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c1c:	eba4 040c 	sub.w	r4, r4, ip
 8000c20:	2700      	movs	r7, #0
 8000c22:	b11e      	cbz	r6, 8000c2c <__udivmoddi4+0xa0>
 8000c24:	40d4      	lsrs	r4, r2
 8000c26:	2300      	movs	r3, #0
 8000c28:	e9c6 4300 	strd	r4, r3, [r6]
 8000c2c:	4639      	mov	r1, r7
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d909      	bls.n	8000c4a <__udivmoddi4+0xbe>
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	f000 80eb 	beq.w	8000e12 <__udivmoddi4+0x286>
 8000c3c:	2700      	movs	r7, #0
 8000c3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c42:	4638      	mov	r0, r7
 8000c44:	4639      	mov	r1, r7
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f783 	clz	r7, r3
 8000c4e:	2f00      	cmp	r7, #0
 8000c50:	d147      	bne.n	8000ce2 <__udivmoddi4+0x156>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xd0>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80fa 	bhi.w	8000e50 <__udivmoddi4+0x2c4>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	4698      	mov	r8, r3
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d0e0      	beq.n	8000c2c <__udivmoddi4+0xa0>
 8000c6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6e:	e7dd      	b.n	8000c2c <__udivmoddi4+0xa0>
 8000c70:	b902      	cbnz	r2, 8000c74 <__udivmoddi4+0xe8>
 8000c72:	deff      	udf	#255	; 0xff
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f040 808f 	bne.w	8000d9c <__udivmoddi4+0x210>
 8000c7e:	1b49      	subs	r1, r1, r5
 8000c80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c84:	fa1f f885 	uxth.w	r8, r5
 8000c88:	2701      	movs	r7, #1
 8000c8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c8e:	0c23      	lsrs	r3, r4, #16
 8000c90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c98:	fb08 f10c 	mul.w	r1, r8, ip
 8000c9c:	4299      	cmp	r1, r3
 8000c9e:	d907      	bls.n	8000cb0 <__udivmoddi4+0x124>
 8000ca0:	18eb      	adds	r3, r5, r3
 8000ca2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x122>
 8000ca8:	4299      	cmp	r1, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2bc>
 8000cae:	4684      	mov	ip, r0
 8000cb0:	1a59      	subs	r1, r3, r1
 8000cb2:	b2a3      	uxth	r3, r4
 8000cb4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cc0:	fb08 f800 	mul.w	r8, r8, r0
 8000cc4:	45a0      	cmp	r8, r4
 8000cc6:	d907      	bls.n	8000cd8 <__udivmoddi4+0x14c>
 8000cc8:	192c      	adds	r4, r5, r4
 8000cca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x14a>
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	f200 80b6 	bhi.w	8000e42 <__udivmoddi4+0x2b6>
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	eba4 0408 	sub.w	r4, r4, r8
 8000cdc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce0:	e79f      	b.n	8000c22 <__udivmoddi4+0x96>
 8000ce2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ce6:	40bb      	lsls	r3, r7
 8000ce8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cf0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cf4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cf8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d00:	4325      	orrs	r5, r4
 8000d02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d06:	0c2c      	lsrs	r4, r5, #16
 8000d08:	fb08 3319 	mls	r3, r8, r9, r3
 8000d0c:	fa1f fa8e 	uxth.w	sl, lr
 8000d10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d14:	fb09 f40a 	mul.w	r4, r9, sl
 8000d18:	429c      	cmp	r4, r3
 8000d1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d22:	d90b      	bls.n	8000d3c <__udivmoddi4+0x1b0>
 8000d24:	eb1e 0303 	adds.w	r3, lr, r3
 8000d28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d2c:	f080 8087 	bcs.w	8000e3e <__udivmoddi4+0x2b2>
 8000d30:	429c      	cmp	r4, r3
 8000d32:	f240 8084 	bls.w	8000e3e <__udivmoddi4+0x2b2>
 8000d36:	f1a9 0902 	sub.w	r9, r9, #2
 8000d3a:	4473      	add	r3, lr
 8000d3c:	1b1b      	subs	r3, r3, r4
 8000d3e:	b2ad      	uxth	r5, r5
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d50:	45a2      	cmp	sl, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x1da>
 8000d54:	eb1e 0404 	adds.w	r4, lr, r4
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d5c:	d26b      	bcs.n	8000e36 <__udivmoddi4+0x2aa>
 8000d5e:	45a2      	cmp	sl, r4
 8000d60:	d969      	bls.n	8000e36 <__udivmoddi4+0x2aa>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4474      	add	r4, lr
 8000d66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6e:	eba4 040a 	sub.w	r4, r4, sl
 8000d72:	454c      	cmp	r4, r9
 8000d74:	46c2      	mov	sl, r8
 8000d76:	464b      	mov	r3, r9
 8000d78:	d354      	bcc.n	8000e24 <__udivmoddi4+0x298>
 8000d7a:	d051      	beq.n	8000e20 <__udivmoddi4+0x294>
 8000d7c:	2e00      	cmp	r6, #0
 8000d7e:	d069      	beq.n	8000e54 <__udivmoddi4+0x2c8>
 8000d80:	ebb1 050a 	subs.w	r5, r1, sl
 8000d84:	eb64 0403 	sbc.w	r4, r4, r3
 8000d88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d8c:	40fd      	lsrs	r5, r7
 8000d8e:	40fc      	lsrs	r4, r7
 8000d90:	ea4c 0505 	orr.w	r5, ip, r5
 8000d94:	e9c6 5400 	strd	r5, r4, [r6]
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e747      	b.n	8000c2c <__udivmoddi4+0xa0>
 8000d9c:	f1c2 0320 	rsb	r3, r2, #32
 8000da0:	fa20 f703 	lsr.w	r7, r0, r3
 8000da4:	4095      	lsls	r5, r2
 8000da6:	fa01 f002 	lsl.w	r0, r1, r2
 8000daa:	fa21 f303 	lsr.w	r3, r1, r3
 8000dae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db2:	4338      	orrs	r0, r7
 8000db4:	0c01      	lsrs	r1, r0, #16
 8000db6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dba:	fa1f f885 	uxth.w	r8, r5
 8000dbe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc6:	fb07 f308 	mul.w	r3, r7, r8
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd0:	d907      	bls.n	8000de2 <__udivmoddi4+0x256>
 8000dd2:	1869      	adds	r1, r5, r1
 8000dd4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000dd8:	d22f      	bcs.n	8000e3a <__udivmoddi4+0x2ae>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d92d      	bls.n	8000e3a <__udivmoddi4+0x2ae>
 8000dde:	3f02      	subs	r7, #2
 8000de0:	4429      	add	r1, r5
 8000de2:	1acb      	subs	r3, r1, r3
 8000de4:	b281      	uxth	r1, r0
 8000de6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df2:	fb00 f308 	mul.w	r3, r0, r8
 8000df6:	428b      	cmp	r3, r1
 8000df8:	d907      	bls.n	8000e0a <__udivmoddi4+0x27e>
 8000dfa:	1869      	adds	r1, r5, r1
 8000dfc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e00:	d217      	bcs.n	8000e32 <__udivmoddi4+0x2a6>
 8000e02:	428b      	cmp	r3, r1
 8000e04:	d915      	bls.n	8000e32 <__udivmoddi4+0x2a6>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4429      	add	r1, r5
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e10:	e73b      	b.n	8000c8a <__udivmoddi4+0xfe>
 8000e12:	4637      	mov	r7, r6
 8000e14:	4630      	mov	r0, r6
 8000e16:	e709      	b.n	8000c2c <__udivmoddi4+0xa0>
 8000e18:	4607      	mov	r7, r0
 8000e1a:	e6e7      	b.n	8000bec <__udivmoddi4+0x60>
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	e6fb      	b.n	8000c18 <__udivmoddi4+0x8c>
 8000e20:	4541      	cmp	r1, r8
 8000e22:	d2ab      	bcs.n	8000d7c <__udivmoddi4+0x1f0>
 8000e24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e28:	eb69 020e 	sbc.w	r2, r9, lr
 8000e2c:	3801      	subs	r0, #1
 8000e2e:	4613      	mov	r3, r2
 8000e30:	e7a4      	b.n	8000d7c <__udivmoddi4+0x1f0>
 8000e32:	4660      	mov	r0, ip
 8000e34:	e7e9      	b.n	8000e0a <__udivmoddi4+0x27e>
 8000e36:	4618      	mov	r0, r3
 8000e38:	e795      	b.n	8000d66 <__udivmoddi4+0x1da>
 8000e3a:	4667      	mov	r7, ip
 8000e3c:	e7d1      	b.n	8000de2 <__udivmoddi4+0x256>
 8000e3e:	4681      	mov	r9, r0
 8000e40:	e77c      	b.n	8000d3c <__udivmoddi4+0x1b0>
 8000e42:	3802      	subs	r0, #2
 8000e44:	442c      	add	r4, r5
 8000e46:	e747      	b.n	8000cd8 <__udivmoddi4+0x14c>
 8000e48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e4c:	442b      	add	r3, r5
 8000e4e:	e72f      	b.n	8000cb0 <__udivmoddi4+0x124>
 8000e50:	4638      	mov	r0, r7
 8000e52:	e708      	b.n	8000c66 <__udivmoddi4+0xda>
 8000e54:	4637      	mov	r7, r6
 8000e56:	e6e9      	b.n	8000c2c <__udivmoddi4+0xa0>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <createFloat>:

float createFloat(int startadress){
	   /************Input Data to float**************/
	static int INT;
	static float result;
	   INT = UARTDATA[startadress+3] 			|
 8000e5c:	1cc3      	adds	r3, r0, #3
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	; (8000e9c <createFloat+0x40>)
 8000e60:	5cd3      	ldrb	r3, [r2, r3]
	   		(UARTDATA[startadress+2] << 8) 		|
 8000e62:	1c81      	adds	r1, r0, #2
 8000e64:	5c51      	ldrb	r1, [r2, r1]
	   INT = UARTDATA[startadress+3] 			|
 8000e66:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	   		(UARTDATA[startadress+1] << 16) 	|
 8000e6a:	1c41      	adds	r1, r0, #1
 8000e6c:	5c51      	ldrb	r1, [r2, r1]
	   		(UARTDATA[startadress+2] << 8) 		|
 8000e6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	   		(UARTDATA[startadress] << 24);
 8000e72:	5c12      	ldrb	r2, [r2, r0]
	   		(UARTDATA[startadress+1] << 16) 	|
 8000e74:	ea43 6302 	orr.w	r3, r3, r2, lsl #24

	   memcpy(&result, &INT, sizeof(result));
 8000e78:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <createFloat+0x44>)
 8000e7a:	6013      	str	r3, [r2, #0]

	   if (result > 20){
 8000e7c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 8000e80:	ee07 3a10 	vmov	s14, r3
 8000e84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e8c:	dd02      	ble.n	8000e94 <createFloat+0x38>
		   result = 20;
 8000e8e:	4613      	mov	r3, r2
 8000e90:	edc3 7a00 	vstr	s15, [r3]
	   }

	   return result;
	   /*********************************************/
}
 8000e94:	4b02      	ldr	r3, [pc, #8]	; (8000ea0 <createFloat+0x44>)
 8000e96:	ed93 0a00 	vldr	s0, [r3]
 8000e9a:	4770      	bx	lr
 8000e9c:	2002e7cc 	.word	0x2002e7cc
 8000ea0:	20000204 	.word	0x20000204

08000ea4 <BSP_Pointer_Update>:
  uint8_t buttonstateLeft;
  uint8_t buttonstateRight;
  I2C_HandleTypeDef hi2c1;


void BSP_Pointer_Update(void) {
 8000ea4:	b530      	push	{r4, r5, lr}
 8000ea6:	b085      	sub	sp, #20
  GUI_PID_STATE TS_State;               /* Structure that reports the touch state to STemWin */
  static TS_StateTypeDef prev_state;    /* Previous touch state from the touch sensor used from BSP package */
  //                   /* Actual touch state from the touch sensor used from BSP package */
  uint16_t xDiff, yDiff;                /* Difference in postitions between touch states*/
  BSP_TS_GetState(&ts);                 /* Read the touch state from touch sensor (BSP API)*/
 8000ea8:	4c1e      	ldr	r4, [pc, #120]	; (8000f24 <BSP_Pointer_Update+0x80>)
 8000eaa:	4620      	mov	r0, r4
 8000eac:	f00d fe94 	bl	800ebd8 <BSP_TS_GetState>
  TS_State.Pressed = ts.touchDetected;  /* Store pressed state to STemWin structure*/
 8000eb0:	7820      	ldrb	r0, [r4, #0]
 8000eb2:	f88d 000c 	strb.w	r0, [sp, #12]


  TouchXCoordinate = ts.touchX[0];
 8000eb6:	8861      	ldrh	r1, [r4, #2]
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <BSP_Pointer_Update+0x84>)
 8000eba:	6019      	str	r1, [r3, #0]
  TouchYCoordinate = ts.touchY[0];
 8000ebc:	88e4      	ldrh	r4, [r4, #6]
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <BSP_Pointer_Update+0x88>)
 8000ec0:	601c      	str	r4, [r3, #0]
  TouchDetected = ts.touchDetected;
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <BSP_Pointer_Update+0x8c>)
 8000ec4:	6018      	str	r0, [r3, #0]


  /* Compute x variation */
  xDiff = (prev_state.touchX[0] > ts.touchX[0]) ? (prev_state.touchX[0] - ts.touchX[0]) : (ts.touchX[0] - prev_state.touchX[0]);
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <BSP_Pointer_Update+0x90>)
 8000ec8:	885b      	ldrh	r3, [r3, #2]
 8000eca:	4299      	cmp	r1, r3
 8000ecc:	d21e      	bcs.n	8000f0c <BSP_Pointer_Update+0x68>
 8000ece:	1a5b      	subs	r3, r3, r1
 8000ed0:	b29b      	uxth	r3, r3

  /* Compute y variation */
  yDiff = (prev_state.touchY[0] > ts.touchY[0]) ? (prev_state.touchY[0] - ts.touchY[0]) : (ts.touchY[0] - prev_state.touchY[0]);
 8000ed2:	4a18      	ldr	r2, [pc, #96]	; (8000f34 <BSP_Pointer_Update+0x90>)
 8000ed4:	88d2      	ldrh	r2, [r2, #6]
 8000ed6:	4294      	cmp	r4, r2
 8000ed8:	d21b      	bcs.n	8000f12 <BSP_Pointer_Update+0x6e>
 8000eda:	1b12      	subs	r2, r2, r4
 8000edc:	b292      	uxth	r2, r2

  /* Check if the touch is pressed */
  if ((prev_state.touchDetected != ts.touchDetected) || (xDiff > 3)|| (yDiff > 3))
 8000ede:	4d15      	ldr	r5, [pc, #84]	; (8000f34 <BSP_Pointer_Update+0x90>)
 8000ee0:	782d      	ldrb	r5, [r5, #0]
 8000ee2:	42a8      	cmp	r0, r5
 8000ee4:	d018      	beq.n	8000f18 <BSP_Pointer_Update+0x74>
  {
    prev_state.touchDetected = ts.touchDetected;
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <BSP_Pointer_Update+0x90>)
 8000ee8:	7018      	strb	r0, [r3, #0]
    /* Check touch variations */
    if ((ts.touchX[0] != 0) && (ts.touchY[0] != 0))
 8000eea:	b111      	cbz	r1, 8000ef2 <BSP_Pointer_Update+0x4e>
 8000eec:	b10c      	cbz	r4, 8000ef2 <BSP_Pointer_Update+0x4e>
    {
      prev_state.touchX[0] = ts.touchX[0];
 8000eee:	8059      	strh	r1, [r3, #2]
      prev_state.touchY[0] = ts.touchY[0];
 8000ef0:	80dc      	strh	r4, [r3, #6]
    }
    TS_State.Layer = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f88d 300d 	strb.w	r3, [sp, #13]
    TS_State.x = prev_state.touchX[0];
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <BSP_Pointer_Update+0x90>)
 8000efa:	885a      	ldrh	r2, [r3, #2]
 8000efc:	9201      	str	r2, [sp, #4]
    TS_State.y = prev_state.touchY[0];
 8000efe:	88db      	ldrh	r3, [r3, #6]
 8000f00:	9302      	str	r3, [sp, #8]

    /* Send touch state to STemWin */
    GUI_TOUCH_StoreStateEx(&TS_State);
 8000f02:	a801      	add	r0, sp, #4
 8000f04:	f010 fb7c 	bl	8011600 <GUI_TOUCH_StoreStateEx>
  }
}
 8000f08:	b005      	add	sp, #20
 8000f0a:	bd30      	pop	{r4, r5, pc}
  xDiff = (prev_state.touchX[0] > ts.touchX[0]) ? (prev_state.touchX[0] - ts.touchX[0]) : (ts.touchX[0] - prev_state.touchX[0]);
 8000f0c:	1acb      	subs	r3, r1, r3
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	e7df      	b.n	8000ed2 <BSP_Pointer_Update+0x2e>
  yDiff = (prev_state.touchY[0] > ts.touchY[0]) ? (prev_state.touchY[0] - ts.touchY[0]) : (ts.touchY[0] - prev_state.touchY[0]);
 8000f12:	1aa2      	subs	r2, r4, r2
 8000f14:	b292      	uxth	r2, r2
 8000f16:	e7e2      	b.n	8000ede <BSP_Pointer_Update+0x3a>
  if ((prev_state.touchDetected != ts.touchDetected) || (xDiff > 3)|| (yDiff > 3))
 8000f18:	2b03      	cmp	r3, #3
 8000f1a:	d8e4      	bhi.n	8000ee6 <BSP_Pointer_Update+0x42>
 8000f1c:	2a03      	cmp	r2, #3
 8000f1e:	d8e2      	bhi.n	8000ee6 <BSP_Pointer_Update+0x42>
 8000f20:	e7f2      	b.n	8000f08 <BSP_Pointer_Update+0x64>
 8000f22:	bf00      	nop
 8000f24:	2002f350 	.word	0x2002f350
 8000f28:	2002e98c 	.word	0x2002e98c
 8000f2c:	2002e6e0 	.word	0x2002e6e0
 8000f30:	2002e590 	.word	0x2002e590
 8000f34:	20000208 	.word	0x20000208

08000f38 <TOUCHUPDATE>:
int intervall4 = 0;
int high4 = 0;
//++++++++++++++++++++++++++++++++++++//

void TOUCHUPDATE(){
	if(TIM4->CNT>100){
 8000f38:	4ba4      	ldr	r3, [pc, #656]	; (80011cc <TOUCHUPDATE+0x294>)
 8000f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3c:	2b64      	cmp	r3, #100	; 0x64
 8000f3e:	d800      	bhi.n	8000f42 <TOUCHUPDATE+0xa>
 8000f40:	4770      	bx	lr
void TOUCHUPDATE(){
 8000f42:	b570      	push	{r4, r5, r6, lr}
 8000f44:	b082      	sub	sp, #8
		BSP_LED_Toggle(LED1);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f00d fde4 	bl	800eb14 <BSP_LED_Toggle>
		aTxBuffer[9] = i_inputLeft_Indicator*10;
 8000f4c:	4aa0      	ldr	r2, [pc, #640]	; (80011d0 <TOUCHUPDATE+0x298>)
 8000f4e:	4ba1      	ldr	r3, [pc, #644]	; (80011d4 <TOUCHUPDATE+0x29c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000f56:	0059      	lsls	r1, r3, #1
 8000f58:	7251      	strb	r1, [r2, #9]



		    switch (count) {
 8000f5a:	68d3      	ldr	r3, [r2, #12]
 8000f5c:	2b02      	cmp	r3, #2
 8000f5e:	f000 815d 	beq.w	800121c <TOUCHUPDATE+0x2e4>
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	f000 82a0 	beq.w	80014a8 <TOUCHUPDATE+0x570>
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d004      	beq.n	8000f76 <TOUCHUPDATE+0x3e>
		    	BSP_Pointer_Update();

		     	count=1;
		        break;
		    }
		    TIM4->CNT = 0;
 8000f6c:	4b97      	ldr	r3, [pc, #604]	; (80011cc <TOUCHUPDATE+0x294>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	625a      	str	r2, [r3, #36]	; 0x24
	  	}
}
 8000f72:	b002      	add	sp, #8
 8000f74:	bd70      	pop	{r4, r5, r6, pc}
		    	if 		(Encoder3.Color == GUI_LIGHTGRAY)	{aTxBuffer[1] = 0;}
 8000f76:	4b98      	ldr	r3, [pc, #608]	; (80011d8 <TOUCHUPDATE+0x2a0>)
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	4a98      	ldr	r2, [pc, #608]	; (80011dc <TOUCHUPDATE+0x2a4>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d018      	beq.n	8000fb2 <TOUCHUPDATE+0x7a>
		    	else if (Encoder3.Color == GUI_MAGENTA)		{aTxBuffer[1] = 1;}
 8000f80:	f46f 427f 	mvn.w	r2, #65280	; 0xff00
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d03b      	beq.n	8001000 <TOUCHUPDATE+0xc8>
		    	else if (Encoder3.Color == GUI_ORANGE)		{aTxBuffer[1] = 2;}
 8000f88:	f513 4fb6 	cmn.w	r3, #23296	; 0x5b00
 8000f8c:	d03c      	beq.n	8001008 <TOUCHUPDATE+0xd0>
		    	else if (Encoder3.Color == GUI_CYAN)		{aTxBuffer[1] = 3;}
 8000f8e:	f46f 027f 	mvn.w	r2, #16711680	; 0xff0000
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d03c      	beq.n	8001010 <TOUCHUPDATE+0xd8>
		    	else if (Encoder3.Color == GUI_LIGHTYELLOW)	{aTxBuffer[1] = 4;}
 8000f96:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8000f9a:	d03d      	beq.n	8001018 <TOUCHUPDATE+0xe0>
		    	else if (Encoder3.Color == GUI_LIGHTGREEN)	{aTxBuffer[1] = 5;}
 8000f9c:	f06f 127f 	mvn.w	r2, #8323199	; 0x7f007f
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d03d      	beq.n	8001020 <TOUCHUPDATE+0xe8>
		    	else if (Encoder3.Color == GUI_LIGHTBLUE)	{aTxBuffer[1] = 6;}
 8000fa4:	4a8e      	ldr	r2, [pc, #568]	; (80011e0 <TOUCHUPDATE+0x2a8>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d03e      	beq.n	8001028 <TOUCHUPDATE+0xf0>
		    	else								    	{aTxBuffer[1] = 10;}
 8000faa:	4b89      	ldr	r3, [pc, #548]	; (80011d0 <TOUCHUPDATE+0x298>)
 8000fac:	220a      	movs	r2, #10
 8000fae:	705a      	strb	r2, [r3, #1]
 8000fb0:	e002      	b.n	8000fb8 <TOUCHUPDATE+0x80>
		    	if 		(Encoder3.Color == GUI_LIGHTGRAY)	{aTxBuffer[1] = 0;}
 8000fb2:	4b87      	ldr	r3, [pc, #540]	; (80011d0 <TOUCHUPDATE+0x298>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	705a      	strb	r2, [r3, #1]
		    	if 		(Encoder4.Color == GUI_LIGHTGRAY)	{aTxBuffer[2] = 0;}
 8000fb8:	4b8a      	ldr	r3, [pc, #552]	; (80011e4 <TOUCHUPDATE+0x2ac>)
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	4a87      	ldr	r2, [pc, #540]	; (80011dc <TOUCHUPDATE+0x2a4>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d036      	beq.n	8001030 <TOUCHUPDATE+0xf8>
		    	else if (Encoder4.Color == GUI_MAGENTA)		{aTxBuffer[2] = 1;}
 8000fc2:	f46f 427f 	mvn.w	r2, #65280	; 0xff00
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	f000 80c0 	beq.w	800114c <TOUCHUPDATE+0x214>
		    	else if (Encoder4.Color == GUI_ORANGE)		{aTxBuffer[2] = 2;}
 8000fcc:	f513 4fb6 	cmn.w	r3, #23296	; 0x5b00
 8000fd0:	f000 80c0 	beq.w	8001154 <TOUCHUPDATE+0x21c>
		    	else if (Encoder4.Color == GUI_CYAN)		{aTxBuffer[2] = 3;}
 8000fd4:	f46f 027f 	mvn.w	r2, #16711680	; 0xff0000
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	f000 80bf 	beq.w	800115c <TOUCHUPDATE+0x224>
		    	else if (Encoder4.Color == GUI_LIGHTYELLOW)	{aTxBuffer[2] = 4;}
 8000fde:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8000fe2:	f000 80bf 	beq.w	8001164 <TOUCHUPDATE+0x22c>
		    	else if (Encoder4.Color == GUI_LIGHTGREEN)	{aTxBuffer[2] = 5;}
 8000fe6:	f06f 127f 	mvn.w	r2, #8323199	; 0x7f007f
 8000fea:	4293      	cmp	r3, r2
 8000fec:	f000 80be 	beq.w	800116c <TOUCHUPDATE+0x234>
		    	else if (Encoder4.Color == GUI_LIGHTBLUE)	{aTxBuffer[2] = 6;}
 8000ff0:	4a7b      	ldr	r2, [pc, #492]	; (80011e0 <TOUCHUPDATE+0x2a8>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	f000 80be 	beq.w	8001174 <TOUCHUPDATE+0x23c>
		    	else								    	{aTxBuffer[2] = 10;}
 8000ff8:	4b75      	ldr	r3, [pc, #468]	; (80011d0 <TOUCHUPDATE+0x298>)
 8000ffa:	220a      	movs	r2, #10
 8000ffc:	709a      	strb	r2, [r3, #2]
 8000ffe:	e01a      	b.n	8001036 <TOUCHUPDATE+0xfe>
		    	else if (Encoder3.Color == GUI_MAGENTA)		{aTxBuffer[1] = 1;}
 8001000:	4b73      	ldr	r3, [pc, #460]	; (80011d0 <TOUCHUPDATE+0x298>)
 8001002:	2201      	movs	r2, #1
 8001004:	705a      	strb	r2, [r3, #1]
 8001006:	e7d7      	b.n	8000fb8 <TOUCHUPDATE+0x80>
		    	else if (Encoder3.Color == GUI_ORANGE)		{aTxBuffer[1] = 2;}
 8001008:	4b71      	ldr	r3, [pc, #452]	; (80011d0 <TOUCHUPDATE+0x298>)
 800100a:	2202      	movs	r2, #2
 800100c:	705a      	strb	r2, [r3, #1]
 800100e:	e7d3      	b.n	8000fb8 <TOUCHUPDATE+0x80>
		    	else if (Encoder3.Color == GUI_CYAN)		{aTxBuffer[1] = 3;}
 8001010:	4b6f      	ldr	r3, [pc, #444]	; (80011d0 <TOUCHUPDATE+0x298>)
 8001012:	2203      	movs	r2, #3
 8001014:	705a      	strb	r2, [r3, #1]
 8001016:	e7cf      	b.n	8000fb8 <TOUCHUPDATE+0x80>
		    	else if (Encoder3.Color == GUI_LIGHTYELLOW)	{aTxBuffer[1] = 4;}
 8001018:	4b6d      	ldr	r3, [pc, #436]	; (80011d0 <TOUCHUPDATE+0x298>)
 800101a:	2204      	movs	r2, #4
 800101c:	705a      	strb	r2, [r3, #1]
 800101e:	e7cb      	b.n	8000fb8 <TOUCHUPDATE+0x80>
		    	else if (Encoder3.Color == GUI_LIGHTGREEN)	{aTxBuffer[1] = 5;}
 8001020:	4b6b      	ldr	r3, [pc, #428]	; (80011d0 <TOUCHUPDATE+0x298>)
 8001022:	2205      	movs	r2, #5
 8001024:	705a      	strb	r2, [r3, #1]
 8001026:	e7c7      	b.n	8000fb8 <TOUCHUPDATE+0x80>
		    	else if (Encoder3.Color == GUI_LIGHTBLUE)	{aTxBuffer[1] = 6;}
 8001028:	4b69      	ldr	r3, [pc, #420]	; (80011d0 <TOUCHUPDATE+0x298>)
 800102a:	2206      	movs	r2, #6
 800102c:	705a      	strb	r2, [r3, #1]
 800102e:	e7c3      	b.n	8000fb8 <TOUCHUPDATE+0x80>
		    	if 		(Encoder4.Color == GUI_LIGHTGRAY)	{aTxBuffer[2] = 0;}
 8001030:	4b67      	ldr	r3, [pc, #412]	; (80011d0 <TOUCHUPDATE+0x298>)
 8001032:	2200      	movs	r2, #0
 8001034:	709a      	strb	r2, [r3, #2]
		    	aTxBuffer[8]= Encoder1.value;
 8001036:	4b6c      	ldr	r3, [pc, #432]	; (80011e8 <TOUCHUPDATE+0x2b0>)
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	4e64      	ldr	r6, [pc, #400]	; (80011d0 <TOUCHUPDATE+0x298>)
 800103e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001042:	ee17 3a90 	vmov	r3, s15
 8001046:	7233      	strb	r3, [r6, #8]
		    	HAL_I2C_Master_Transmit(&hi2c1, 50, aTxBuffer,10,10); //Send to LOGO WS2812
 8001048:	4d68      	ldr	r5, [pc, #416]	; (80011ec <TOUCHUPDATE+0x2b4>)
 800104a:	240a      	movs	r4, #10
 800104c:	9400      	str	r4, [sp, #0]
 800104e:	4623      	mov	r3, r4
 8001050:	4632      	mov	r2, r6
 8001052:	2132      	movs	r1, #50	; 0x32
 8001054:	4628      	mov	r0, r5
 8001056:	f003 facb 	bl	80045f0 <HAL_I2C_Master_Transmit>
		    	 HAL_I2C_Master_Transmit(&hi2c1, 40, aTxBuffer,10,10);
 800105a:	9400      	str	r4, [sp, #0]
 800105c:	4623      	mov	r3, r4
 800105e:	4632      	mov	r2, r6
 8001060:	2128      	movs	r1, #40	; 0x28
 8001062:	4628      	mov	r0, r5
 8001064:	f003 fac4 	bl	80045f0 <HAL_I2C_Master_Transmit>
				 HAL_I2C_Master_Receive(&hi2c1, 40, aRxBuffer,10,10);
 8001068:	4e61      	ldr	r6, [pc, #388]	; (80011f0 <TOUCHUPDATE+0x2b8>)
 800106a:	9400      	str	r4, [sp, #0]
 800106c:	4623      	mov	r3, r4
 800106e:	4632      	mov	r2, r6
 8001070:	2128      	movs	r1, #40	; 0x28
 8001072:	4628      	mov	r0, r5
 8001074:	f003 fb76 	bl	8004764 <HAL_I2C_Master_Receive>
				 if(aRxBuffer[6]!=255) {buttonstateRight=aRxBuffer[6];}
 8001078:	79b3      	ldrb	r3, [r6, #6]
 800107a:	2bff      	cmp	r3, #255	; 0xff
 800107c:	d001      	beq.n	8001082 <TOUCHUPDATE+0x14a>
 800107e:	4a5d      	ldr	r2, [pc, #372]	; (80011f4 <TOUCHUPDATE+0x2bc>)
 8001080:	7013      	strb	r3, [r2, #0]
				 if(aRxBuffer[7]!=255) {
 8001082:	4a5b      	ldr	r2, [pc, #364]	; (80011f0 <TOUCHUPDATE+0x2b8>)
 8001084:	79d2      	ldrb	r2, [r2, #7]
 8001086:	2aff      	cmp	r2, #255	; 0xff
 8001088:	d006      	beq.n	8001098 <TOUCHUPDATE+0x160>
					 Encoder3.value=aRxBuffer[7];
 800108a:	ee07 2a90 	vmov	s15, r2
 800108e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001092:	4a51      	ldr	r2, [pc, #324]	; (80011d8 <TOUCHUPDATE+0x2a0>)
 8001094:	edc2 7a00 	vstr	s15, [r2]
				 if(aRxBuffer[9]!=255){
 8001098:	4a55      	ldr	r2, [pc, #340]	; (80011f0 <TOUCHUPDATE+0x2b8>)
 800109a:	7a52      	ldrb	r2, [r2, #9]
 800109c:	2aff      	cmp	r2, #255	; 0xff
 800109e:	d006      	beq.n	80010ae <TOUCHUPDATE+0x176>
					 Encoder4.value=aRxBuffer[9];
 80010a0:	ee07 2a90 	vmov	s15, r2
 80010a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a8:	4a4e      	ldr	r2, [pc, #312]	; (80011e4 <TOUCHUPDATE+0x2ac>)
 80010aa:	edc2 7a00 	vstr	s15, [r2]
				 Encoder3.buttonState =	!(aRxBuffer[6] & 0x01);
 80010ae:	f083 0201 	eor.w	r2, r3, #1
 80010b2:	f002 0201 	and.w	r2, r2, #1
 80010b6:	4948      	ldr	r1, [pc, #288]	; (80011d8 <TOUCHUPDATE+0x2a0>)
 80010b8:	608a      	str	r2, [r1, #8]
				 Encoder4.buttonState = !((aRxBuffer[6]>>2) & 0x01);
 80010ba:	089b      	lsrs	r3, r3, #2
 80010bc:	f083 0301 	eor.w	r3, r3, #1
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	4947      	ldr	r1, [pc, #284]	; (80011e4 <TOUCHUPDATE+0x2ac>)
 80010c6:	608b      	str	r3, [r1, #8]
				 if(Encoder3.buttonState&&DoubleClick3<2&&!high3){
 80010c8:	b11a      	cbz	r2, 80010d2 <TOUCHUPDATE+0x19a>
 80010ca:	494b      	ldr	r1, [pc, #300]	; (80011f8 <TOUCHUPDATE+0x2c0>)
 80010cc:	68c9      	ldr	r1, [r1, #12]
 80010ce:	2901      	cmp	r1, #1
 80010d0:	dd54      	ble.n	800117c <TOUCHUPDATE+0x244>
				 if(!Encoder3.buttonState){
 80010d2:	b912      	cbnz	r2, 80010da <TOUCHUPDATE+0x1a2>
					 high3 = 0;
 80010d4:	4a48      	ldr	r2, [pc, #288]	; (80011f8 <TOUCHUPDATE+0x2c0>)
 80010d6:	2100      	movs	r1, #0
 80010d8:	6111      	str	r1, [r2, #16]
				 if (DoubleClick3 == 2 && intervall3 < 20){
 80010da:	4a47      	ldr	r2, [pc, #284]	; (80011f8 <TOUCHUPDATE+0x2c0>)
 80010dc:	68d2      	ldr	r2, [r2, #12]
 80010de:	2a02      	cmp	r2, #2
 80010e0:	d058      	beq.n	8001194 <TOUCHUPDATE+0x25c>
				 if (Encoder3.doubleclickEvent && intervall3 == 20){
 80010e2:	4a3d      	ldr	r2, [pc, #244]	; (80011d8 <TOUCHUPDATE+0x2a0>)
 80010e4:	68d2      	ldr	r2, [r2, #12]
 80010e6:	b11a      	cbz	r2, 80010f0 <TOUCHUPDATE+0x1b8>
 80010e8:	4a43      	ldr	r2, [pc, #268]	; (80011f8 <TOUCHUPDATE+0x2c0>)
 80010ea:	6952      	ldr	r2, [r2, #20]
 80010ec:	2a14      	cmp	r2, #20
 80010ee:	d05d      	beq.n	80011ac <TOUCHUPDATE+0x274>
				 intervall3++;
 80010f0:	4941      	ldr	r1, [pc, #260]	; (80011f8 <TOUCHUPDATE+0x2c0>)
 80010f2:	694a      	ldr	r2, [r1, #20]
 80010f4:	3201      	adds	r2, #1
 80010f6:	614a      	str	r2, [r1, #20]
				 if(intervall3 >= 20){intervall3 = 20;DoubleClick3 = 0;}
 80010f8:	2a13      	cmp	r2, #19
 80010fa:	dd04      	ble.n	8001106 <TOUCHUPDATE+0x1ce>
 80010fc:	460a      	mov	r2, r1
 80010fe:	2114      	movs	r1, #20
 8001100:	6151      	str	r1, [r2, #20]
 8001102:	2100      	movs	r1, #0
 8001104:	60d1      	str	r1, [r2, #12]
				 if(Encoder4.buttonState&&DoubleClick4<2&&!high4){
 8001106:	b11b      	cbz	r3, 8001110 <TOUCHUPDATE+0x1d8>
 8001108:	4a3b      	ldr	r2, [pc, #236]	; (80011f8 <TOUCHUPDATE+0x2c0>)
 800110a:	6992      	ldr	r2, [r2, #24]
 800110c:	2a01      	cmp	r2, #1
 800110e:	dd51      	ble.n	80011b4 <TOUCHUPDATE+0x27c>
				 if(!Encoder4.buttonState){
 8001110:	b913      	cbnz	r3, 8001118 <TOUCHUPDATE+0x1e0>
					 high4 = 0;
 8001112:	4b39      	ldr	r3, [pc, #228]	; (80011f8 <TOUCHUPDATE+0x2c0>)
 8001114:	2200      	movs	r2, #0
 8001116:	61da      	str	r2, [r3, #28]
				 if (DoubleClick4 == 2 && intervall4 < 20){
 8001118:	4b37      	ldr	r3, [pc, #220]	; (80011f8 <TOUCHUPDATE+0x2c0>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d06d      	beq.n	80011fc <TOUCHUPDATE+0x2c4>
				 if (Encoder4.doubleclickEvent && intervall4 == 20){
 8001120:	4b30      	ldr	r3, [pc, #192]	; (80011e4 <TOUCHUPDATE+0x2ac>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	b11b      	cbz	r3, 800112e <TOUCHUPDATE+0x1f6>
 8001126:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <TOUCHUPDATE+0x2c0>)
 8001128:	6a1b      	ldr	r3, [r3, #32]
 800112a:	2b14      	cmp	r3, #20
 800112c:	d072      	beq.n	8001214 <TOUCHUPDATE+0x2dc>
				 intervall4++;
 800112e:	4a32      	ldr	r2, [pc, #200]	; (80011f8 <TOUCHUPDATE+0x2c0>)
 8001130:	6a13      	ldr	r3, [r2, #32]
 8001132:	3301      	adds	r3, #1
 8001134:	6213      	str	r3, [r2, #32]
				 if(intervall4 >= 20){intervall4 = 20;DoubleClick4 = 0;}
 8001136:	2b13      	cmp	r3, #19
 8001138:	dd04      	ble.n	8001144 <TOUCHUPDATE+0x20c>
 800113a:	4613      	mov	r3, r2
 800113c:	2214      	movs	r2, #20
 800113e:	621a      	str	r2, [r3, #32]
 8001140:	2200      	movs	r2, #0
 8001142:	619a      	str	r2, [r3, #24]
		    	 count =2;
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <TOUCHUPDATE+0x298>)
 8001146:	2202      	movs	r2, #2
 8001148:	60da      	str	r2, [r3, #12]
		     	 break;
 800114a:	e70f      	b.n	8000f6c <TOUCHUPDATE+0x34>
		    	else if (Encoder4.Color == GUI_MAGENTA)		{aTxBuffer[2] = 1;}
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <TOUCHUPDATE+0x298>)
 800114e:	2201      	movs	r2, #1
 8001150:	709a      	strb	r2, [r3, #2]
 8001152:	e770      	b.n	8001036 <TOUCHUPDATE+0xfe>
		    	else if (Encoder4.Color == GUI_ORANGE)		{aTxBuffer[2] = 2;}
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <TOUCHUPDATE+0x298>)
 8001156:	2202      	movs	r2, #2
 8001158:	709a      	strb	r2, [r3, #2]
 800115a:	e76c      	b.n	8001036 <TOUCHUPDATE+0xfe>
		    	else if (Encoder4.Color == GUI_CYAN)		{aTxBuffer[2] = 3;}
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <TOUCHUPDATE+0x298>)
 800115e:	2203      	movs	r2, #3
 8001160:	709a      	strb	r2, [r3, #2]
 8001162:	e768      	b.n	8001036 <TOUCHUPDATE+0xfe>
		    	else if (Encoder4.Color == GUI_LIGHTYELLOW)	{aTxBuffer[2] = 4;}
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <TOUCHUPDATE+0x298>)
 8001166:	2204      	movs	r2, #4
 8001168:	709a      	strb	r2, [r3, #2]
 800116a:	e764      	b.n	8001036 <TOUCHUPDATE+0xfe>
		    	else if (Encoder4.Color == GUI_LIGHTGREEN)	{aTxBuffer[2] = 5;}
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <TOUCHUPDATE+0x298>)
 800116e:	2205      	movs	r2, #5
 8001170:	709a      	strb	r2, [r3, #2]
 8001172:	e760      	b.n	8001036 <TOUCHUPDATE+0xfe>
		    	else if (Encoder4.Color == GUI_LIGHTBLUE)	{aTxBuffer[2] = 6;}
 8001174:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <TOUCHUPDATE+0x298>)
 8001176:	2206      	movs	r2, #6
 8001178:	709a      	strb	r2, [r3, #2]
 800117a:	e75c      	b.n	8001036 <TOUCHUPDATE+0xfe>
				 if(Encoder3.buttonState&&DoubleClick3<2&&!high3){
 800117c:	481e      	ldr	r0, [pc, #120]	; (80011f8 <TOUCHUPDATE+0x2c0>)
 800117e:	6900      	ldr	r0, [r0, #16]
 8001180:	2800      	cmp	r0, #0
 8001182:	d1a6      	bne.n	80010d2 <TOUCHUPDATE+0x19a>
					 DoubleClick3 = DoubleClick3+1;
 8001184:	3101      	adds	r1, #1
 8001186:	481c      	ldr	r0, [pc, #112]	; (80011f8 <TOUCHUPDATE+0x2c0>)
 8001188:	60c1      	str	r1, [r0, #12]
					 high3 = 1;
 800118a:	2101      	movs	r1, #1
 800118c:	6101      	str	r1, [r0, #16]
					 intervall3 = 0;
 800118e:	2100      	movs	r1, #0
 8001190:	6141      	str	r1, [r0, #20]
 8001192:	e79e      	b.n	80010d2 <TOUCHUPDATE+0x19a>
				 if (DoubleClick3 == 2 && intervall3 < 20){
 8001194:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <TOUCHUPDATE+0x2c0>)
 8001196:	6952      	ldr	r2, [r2, #20]
 8001198:	2a13      	cmp	r2, #19
 800119a:	dca2      	bgt.n	80010e2 <TOUCHUPDATE+0x1aa>
					 DoubleClick3 = 0;
 800119c:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <TOUCHUPDATE+0x2c0>)
 800119e:	2100      	movs	r1, #0
 80011a0:	60d1      	str	r1, [r2, #12]
					 Encoder3.doubleclickEvent = 1;
 80011a2:	480d      	ldr	r0, [pc, #52]	; (80011d8 <TOUCHUPDATE+0x2a0>)
 80011a4:	2401      	movs	r4, #1
 80011a6:	60c4      	str	r4, [r0, #12]
					 intervall3=0;
 80011a8:	6151      	str	r1, [r2, #20]
 80011aa:	e79a      	b.n	80010e2 <TOUCHUPDATE+0x1aa>
					 Encoder3.doubleclickEvent = 0;
 80011ac:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <TOUCHUPDATE+0x2a0>)
 80011ae:	2100      	movs	r1, #0
 80011b0:	60d1      	str	r1, [r2, #12]
 80011b2:	e79d      	b.n	80010f0 <TOUCHUPDATE+0x1b8>
				 if(Encoder4.buttonState&&DoubleClick4<2&&!high4){
 80011b4:	4910      	ldr	r1, [pc, #64]	; (80011f8 <TOUCHUPDATE+0x2c0>)
 80011b6:	69c9      	ldr	r1, [r1, #28]
 80011b8:	2900      	cmp	r1, #0
 80011ba:	d1a9      	bne.n	8001110 <TOUCHUPDATE+0x1d8>
					 DoubleClick4 = DoubleClick4+1;
 80011bc:	3201      	adds	r2, #1
 80011be:	490e      	ldr	r1, [pc, #56]	; (80011f8 <TOUCHUPDATE+0x2c0>)
 80011c0:	618a      	str	r2, [r1, #24]
					 high4 = 1;
 80011c2:	2201      	movs	r2, #1
 80011c4:	61ca      	str	r2, [r1, #28]
					 intervall4 = 0;
 80011c6:	2200      	movs	r2, #0
 80011c8:	620a      	str	r2, [r1, #32]
 80011ca:	e7a1      	b.n	8001110 <TOUCHUPDATE+0x1d8>
 80011cc:	40000800 	.word	0x40000800
 80011d0:	20000000 	.word	0x20000000
 80011d4:	2002f148 	.word	0x2002f148
 80011d8:	2002e520 	.word	0x2002e520
 80011dc:	ffd3d3d3 	.word	0xffd3d3d3
 80011e0:	ff8080ff 	.word	0xff8080ff
 80011e4:	2002e6cc 	.word	0x2002e6cc
 80011e8:	2002eeb4 	.word	0x2002eeb4
 80011ec:	2002f16c 	.word	0x2002f16c
 80011f0:	2002fa2c 	.word	0x2002fa2c
 80011f4:	2002f874 	.word	0x2002f874
 80011f8:	20000208 	.word	0x20000208
				 if (DoubleClick4 == 2 && intervall4 < 20){
 80011fc:	4ba0      	ldr	r3, [pc, #640]	; (8001480 <TOUCHUPDATE+0x548>)
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	2b13      	cmp	r3, #19
 8001202:	dc8d      	bgt.n	8001120 <TOUCHUPDATE+0x1e8>
					 DoubleClick4 = 0;
 8001204:	4b9e      	ldr	r3, [pc, #632]	; (8001480 <TOUCHUPDATE+0x548>)
 8001206:	2200      	movs	r2, #0
 8001208:	619a      	str	r2, [r3, #24]
					 Encoder4.doubleclickEvent = 1;
 800120a:	499e      	ldr	r1, [pc, #632]	; (8001484 <TOUCHUPDATE+0x54c>)
 800120c:	2001      	movs	r0, #1
 800120e:	60c8      	str	r0, [r1, #12]
					 intervall4=0;
 8001210:	621a      	str	r2, [r3, #32]
 8001212:	e785      	b.n	8001120 <TOUCHUPDATE+0x1e8>
					 Encoder4.doubleclickEvent = 0;
 8001214:	4b9b      	ldr	r3, [pc, #620]	; (8001484 <TOUCHUPDATE+0x54c>)
 8001216:	2200      	movs	r2, #0
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	e788      	b.n	800112e <TOUCHUPDATE+0x1f6>
		    	if 		(Encoder1.Color == GUI_LIGHTGRAY)	{aTxBuffer[2] = 0;}
 800121c:	4b9a      	ldr	r3, [pc, #616]	; (8001488 <TOUCHUPDATE+0x550>)
 800121e:	691b      	ldr	r3, [r3, #16]
 8001220:	4a9a      	ldr	r2, [pc, #616]	; (800148c <TOUCHUPDATE+0x554>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d018      	beq.n	8001258 <TOUCHUPDATE+0x320>
		    	else if (Encoder1.Color == GUI_MAGENTA)		{aTxBuffer[2] = 1;}
 8001226:	f46f 427f 	mvn.w	r2, #65280	; 0xff00
 800122a:	4293      	cmp	r3, r2
 800122c:	d03b      	beq.n	80012a6 <TOUCHUPDATE+0x36e>
		    	else if (Encoder1.Color == GUI_ORANGE)		{aTxBuffer[2] = 2;}
 800122e:	f513 4fb6 	cmn.w	r3, #23296	; 0x5b00
 8001232:	d03c      	beq.n	80012ae <TOUCHUPDATE+0x376>
		    	else if (Encoder1.Color == GUI_CYAN)		{aTxBuffer[2] = 3;}
 8001234:	f46f 027f 	mvn.w	r2, #16711680	; 0xff0000
 8001238:	4293      	cmp	r3, r2
 800123a:	d03c      	beq.n	80012b6 <TOUCHUPDATE+0x37e>
		    	else if (Encoder1.Color == GUI_LIGHTYELLOW)	{aTxBuffer[2] = 4;}
 800123c:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001240:	d03d      	beq.n	80012be <TOUCHUPDATE+0x386>
		    	else if (Encoder1.Color == GUI_LIGHTGREEN)	{aTxBuffer[2] = 5;}
 8001242:	f06f 127f 	mvn.w	r2, #8323199	; 0x7f007f
 8001246:	4293      	cmp	r3, r2
 8001248:	d03d      	beq.n	80012c6 <TOUCHUPDATE+0x38e>
		    	else if (Encoder1.Color == GUI_LIGHTBLUE)	{aTxBuffer[2] = 6;}
 800124a:	4a91      	ldr	r2, [pc, #580]	; (8001490 <TOUCHUPDATE+0x558>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d03e      	beq.n	80012ce <TOUCHUPDATE+0x396>
		    	else								    	{aTxBuffer[2] = 10;}
 8001250:	4b90      	ldr	r3, [pc, #576]	; (8001494 <TOUCHUPDATE+0x55c>)
 8001252:	220a      	movs	r2, #10
 8001254:	709a      	strb	r2, [r3, #2]
 8001256:	e002      	b.n	800125e <TOUCHUPDATE+0x326>
		    	if 		(Encoder1.Color == GUI_LIGHTGRAY)	{aTxBuffer[2] = 0;}
 8001258:	4b8e      	ldr	r3, [pc, #568]	; (8001494 <TOUCHUPDATE+0x55c>)
 800125a:	2200      	movs	r2, #0
 800125c:	709a      	strb	r2, [r3, #2]
		    	if 		(Encoder2.Color == GUI_LIGHTGRAY)	{aTxBuffer[1] = 0;}
 800125e:	4b8e      	ldr	r3, [pc, #568]	; (8001498 <TOUCHUPDATE+0x560>)
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	4a8a      	ldr	r2, [pc, #552]	; (800148c <TOUCHUPDATE+0x554>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d036      	beq.n	80012d6 <TOUCHUPDATE+0x39e>
		    	else if (Encoder2.Color == GUI_MAGENTA)		{aTxBuffer[1] = 1;}
 8001268:	f46f 427f 	mvn.w	r2, #65280	; 0xff00
 800126c:	4293      	cmp	r3, r2
 800126e:	f000 80b7 	beq.w	80013e0 <TOUCHUPDATE+0x4a8>
		    	else if (Encoder2.Color == GUI_ORANGE)		{aTxBuffer[1] = 2;}
 8001272:	f513 4fb6 	cmn.w	r3, #23296	; 0x5b00
 8001276:	f000 80b7 	beq.w	80013e8 <TOUCHUPDATE+0x4b0>
		    	else if (Encoder2.Color == GUI_CYAN)		{aTxBuffer[1] = 3;}
 800127a:	f46f 027f 	mvn.w	r2, #16711680	; 0xff0000
 800127e:	4293      	cmp	r3, r2
 8001280:	f000 80b6 	beq.w	80013f0 <TOUCHUPDATE+0x4b8>
		    	else if (Encoder2.Color == GUI_LIGHTYELLOW)	{aTxBuffer[1] = 4;}
 8001284:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8001288:	f000 80b6 	beq.w	80013f8 <TOUCHUPDATE+0x4c0>
		    	else if (Encoder2.Color == GUI_LIGHTGREEN)	{aTxBuffer[1] = 5;}
 800128c:	f06f 127f 	mvn.w	r2, #8323199	; 0x7f007f
 8001290:	4293      	cmp	r3, r2
 8001292:	f000 80b5 	beq.w	8001400 <TOUCHUPDATE+0x4c8>
		    	else if (Encoder2.Color == GUI_LIGHTBLUE)	{aTxBuffer[1] = 6;}
 8001296:	4a7e      	ldr	r2, [pc, #504]	; (8001490 <TOUCHUPDATE+0x558>)
 8001298:	4293      	cmp	r3, r2
 800129a:	f000 80b5 	beq.w	8001408 <TOUCHUPDATE+0x4d0>
		    	else								    	{aTxBuffer[1] = 10;}
 800129e:	4b7d      	ldr	r3, [pc, #500]	; (8001494 <TOUCHUPDATE+0x55c>)
 80012a0:	220a      	movs	r2, #10
 80012a2:	705a      	strb	r2, [r3, #1]
 80012a4:	e01a      	b.n	80012dc <TOUCHUPDATE+0x3a4>
		    	else if (Encoder1.Color == GUI_MAGENTA)		{aTxBuffer[2] = 1;}
 80012a6:	4b7b      	ldr	r3, [pc, #492]	; (8001494 <TOUCHUPDATE+0x55c>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	709a      	strb	r2, [r3, #2]
 80012ac:	e7d7      	b.n	800125e <TOUCHUPDATE+0x326>
		    	else if (Encoder1.Color == GUI_ORANGE)		{aTxBuffer[2] = 2;}
 80012ae:	4b79      	ldr	r3, [pc, #484]	; (8001494 <TOUCHUPDATE+0x55c>)
 80012b0:	2202      	movs	r2, #2
 80012b2:	709a      	strb	r2, [r3, #2]
 80012b4:	e7d3      	b.n	800125e <TOUCHUPDATE+0x326>
		    	else if (Encoder1.Color == GUI_CYAN)		{aTxBuffer[2] = 3;}
 80012b6:	4b77      	ldr	r3, [pc, #476]	; (8001494 <TOUCHUPDATE+0x55c>)
 80012b8:	2203      	movs	r2, #3
 80012ba:	709a      	strb	r2, [r3, #2]
 80012bc:	e7cf      	b.n	800125e <TOUCHUPDATE+0x326>
		    	else if (Encoder1.Color == GUI_LIGHTYELLOW)	{aTxBuffer[2] = 4;}
 80012be:	4b75      	ldr	r3, [pc, #468]	; (8001494 <TOUCHUPDATE+0x55c>)
 80012c0:	2204      	movs	r2, #4
 80012c2:	709a      	strb	r2, [r3, #2]
 80012c4:	e7cb      	b.n	800125e <TOUCHUPDATE+0x326>
		    	else if (Encoder1.Color == GUI_LIGHTGREEN)	{aTxBuffer[2] = 5;}
 80012c6:	4b73      	ldr	r3, [pc, #460]	; (8001494 <TOUCHUPDATE+0x55c>)
 80012c8:	2205      	movs	r2, #5
 80012ca:	709a      	strb	r2, [r3, #2]
 80012cc:	e7c7      	b.n	800125e <TOUCHUPDATE+0x326>
		    	else if (Encoder1.Color == GUI_LIGHTBLUE)	{aTxBuffer[2] = 6;}
 80012ce:	4b71      	ldr	r3, [pc, #452]	; (8001494 <TOUCHUPDATE+0x55c>)
 80012d0:	2206      	movs	r2, #6
 80012d2:	709a      	strb	r2, [r3, #2]
 80012d4:	e7c3      	b.n	800125e <TOUCHUPDATE+0x326>
		    	if 		(Encoder2.Color == GUI_LIGHTGRAY)	{aTxBuffer[1] = 0;}
 80012d6:	4b6f      	ldr	r3, [pc, #444]	; (8001494 <TOUCHUPDATE+0x55c>)
 80012d8:	2200      	movs	r2, #0
 80012da:	705a      	strb	r2, [r3, #1]
		    	 HAL_I2C_Master_Transmit(&hi2c1, 50, aTxBuffer,10,10); //Send to LOGO WS2812
 80012dc:	4e6d      	ldr	r6, [pc, #436]	; (8001494 <TOUCHUPDATE+0x55c>)
 80012de:	4d6f      	ldr	r5, [pc, #444]	; (800149c <TOUCHUPDATE+0x564>)
 80012e0:	240a      	movs	r4, #10
 80012e2:	9400      	str	r4, [sp, #0]
 80012e4:	4623      	mov	r3, r4
 80012e6:	4632      	mov	r2, r6
 80012e8:	2132      	movs	r1, #50	; 0x32
 80012ea:	4628      	mov	r0, r5
 80012ec:	f003 f980 	bl	80045f0 <HAL_I2C_Master_Transmit>
				 HAL_I2C_Master_Transmit(&hi2c1, 30, aTxBuffer,10,10);
 80012f0:	9400      	str	r4, [sp, #0]
 80012f2:	4623      	mov	r3, r4
 80012f4:	4632      	mov	r2, r6
 80012f6:	211e      	movs	r1, #30
 80012f8:	4628      	mov	r0, r5
 80012fa:	f003 f979 	bl	80045f0 <HAL_I2C_Master_Transmit>
				 HAL_I2C_Master_Receive(&hi2c1, 30, aRxBuffer,10,10);
 80012fe:	4e68      	ldr	r6, [pc, #416]	; (80014a0 <TOUCHUPDATE+0x568>)
 8001300:	9400      	str	r4, [sp, #0]
 8001302:	4623      	mov	r3, r4
 8001304:	4632      	mov	r2, r6
 8001306:	211e      	movs	r1, #30
 8001308:	4628      	mov	r0, r5
 800130a:	f003 fa2b 	bl	8004764 <HAL_I2C_Master_Receive>
				 if(aRxBuffer[6]!=255) {buttonstateLeft=aRxBuffer[6];}
 800130e:	79b2      	ldrb	r2, [r6, #6]
 8001310:	2aff      	cmp	r2, #255	; 0xff
 8001312:	d001      	beq.n	8001318 <TOUCHUPDATE+0x3e0>
 8001314:	4b63      	ldr	r3, [pc, #396]	; (80014a4 <TOUCHUPDATE+0x56c>)
 8001316:	701a      	strb	r2, [r3, #0]
				 if(aRxBuffer[7]!=255){
 8001318:	4b61      	ldr	r3, [pc, #388]	; (80014a0 <TOUCHUPDATE+0x568>)
 800131a:	79db      	ldrb	r3, [r3, #7]
 800131c:	2bff      	cmp	r3, #255	; 0xff
 800131e:	d006      	beq.n	800132e <TOUCHUPDATE+0x3f6>
					 Encoder1.value=aRxBuffer[7];
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001328:	4b57      	ldr	r3, [pc, #348]	; (8001488 <TOUCHUPDATE+0x550>)
 800132a:	edc3 7a00 	vstr	s15, [r3]
				 if(aRxBuffer[9]!=255){
 800132e:	4b5c      	ldr	r3, [pc, #368]	; (80014a0 <TOUCHUPDATE+0x568>)
 8001330:	7a5b      	ldrb	r3, [r3, #9]
 8001332:	2bff      	cmp	r3, #255	; 0xff
 8001334:	d006      	beq.n	8001344 <TOUCHUPDATE+0x40c>
					 Encoder2.value=aRxBuffer[9];
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800133e:	4b56      	ldr	r3, [pc, #344]	; (8001498 <TOUCHUPDATE+0x560>)
 8001340:	edc3 7a00 	vstr	s15, [r3]
				 Encoder1.buttonState= !((aRxBuffer[6]>>2) & 0x01);
 8001344:	0893      	lsrs	r3, r2, #2
 8001346:	f083 0301 	eor.w	r3, r3, #1
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	494e      	ldr	r1, [pc, #312]	; (8001488 <TOUCHUPDATE+0x550>)
 8001350:	608b      	str	r3, [r1, #8]
				 Encoder2.buttonState= !(aRxBuffer[6] & 0x01);
 8001352:	f082 0201 	eor.w	r2, r2, #1
 8001356:	f002 0201 	and.w	r2, r2, #1
 800135a:	494f      	ldr	r1, [pc, #316]	; (8001498 <TOUCHUPDATE+0x560>)
 800135c:	608a      	str	r2, [r1, #8]
				 if(Encoder1.buttonState&&DoubleClick1<2&&!high1){
 800135e:	b11b      	cbz	r3, 8001368 <TOUCHUPDATE+0x430>
 8001360:	4947      	ldr	r1, [pc, #284]	; (8001480 <TOUCHUPDATE+0x548>)
 8001362:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8001364:	2901      	cmp	r1, #1
 8001366:	dd53      	ble.n	8001410 <TOUCHUPDATE+0x4d8>
				 if(!Encoder1.buttonState){
 8001368:	b913      	cbnz	r3, 8001370 <TOUCHUPDATE+0x438>
					 high1 = 0;
 800136a:	4b45      	ldr	r3, [pc, #276]	; (8001480 <TOUCHUPDATE+0x548>)
 800136c:	2100      	movs	r1, #0
 800136e:	6299      	str	r1, [r3, #40]	; 0x28
				 if (DoubleClick1 == 2 && intervall1 < 20){
 8001370:	4b43      	ldr	r3, [pc, #268]	; (8001480 <TOUCHUPDATE+0x548>)
 8001372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001374:	2b02      	cmp	r3, #2
 8001376:	d057      	beq.n	8001428 <TOUCHUPDATE+0x4f0>
				 if (Encoder1.doubleclickEvent && intervall1 == 20){
 8001378:	4b43      	ldr	r3, [pc, #268]	; (8001488 <TOUCHUPDATE+0x550>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	b11b      	cbz	r3, 8001386 <TOUCHUPDATE+0x44e>
 800137e:	4b40      	ldr	r3, [pc, #256]	; (8001480 <TOUCHUPDATE+0x548>)
 8001380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001382:	2b14      	cmp	r3, #20
 8001384:	d05c      	beq.n	8001440 <TOUCHUPDATE+0x508>
				 intervall1++;
 8001386:	493e      	ldr	r1, [pc, #248]	; (8001480 <TOUCHUPDATE+0x548>)
 8001388:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800138a:	3301      	adds	r3, #1
 800138c:	62cb      	str	r3, [r1, #44]	; 0x2c
				 if(intervall1 >= 20){intervall1 = 20;DoubleClick1 = 0;}
 800138e:	2b13      	cmp	r3, #19
 8001390:	dd04      	ble.n	800139c <TOUCHUPDATE+0x464>
 8001392:	460b      	mov	r3, r1
 8001394:	2114      	movs	r1, #20
 8001396:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001398:	2100      	movs	r1, #0
 800139a:	6259      	str	r1, [r3, #36]	; 0x24
				 if(Encoder2.buttonState&&DoubleClick2<2&&!high2){
 800139c:	b11a      	cbz	r2, 80013a6 <TOUCHUPDATE+0x46e>
 800139e:	4b38      	ldr	r3, [pc, #224]	; (8001480 <TOUCHUPDATE+0x548>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	dd50      	ble.n	8001448 <TOUCHUPDATE+0x510>
				 if(!Encoder2.buttonState){
 80013a6:	b90a      	cbnz	r2, 80013ac <TOUCHUPDATE+0x474>
					 high2 = 0;
 80013a8:	4b35      	ldr	r3, [pc, #212]	; (8001480 <TOUCHUPDATE+0x548>)
 80013aa:	635a      	str	r2, [r3, #52]	; 0x34
				 if (DoubleClick2 == 2 && intervall2 < 20){
 80013ac:	4b34      	ldr	r3, [pc, #208]	; (8001480 <TOUCHUPDATE+0x548>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d055      	beq.n	8001460 <TOUCHUPDATE+0x528>
				 if (Encoder2.doubleclickEvent && intervall2 == 20){
 80013b4:	4b38      	ldr	r3, [pc, #224]	; (8001498 <TOUCHUPDATE+0x560>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	b11b      	cbz	r3, 80013c2 <TOUCHUPDATE+0x48a>
 80013ba:	4b31      	ldr	r3, [pc, #196]	; (8001480 <TOUCHUPDATE+0x548>)
 80013bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013be:	2b14      	cmp	r3, #20
 80013c0:	d05a      	beq.n	8001478 <TOUCHUPDATE+0x540>
				 intervall2++;
 80013c2:	4a2f      	ldr	r2, [pc, #188]	; (8001480 <TOUCHUPDATE+0x548>)
 80013c4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80013c6:	3301      	adds	r3, #1
 80013c8:	6393      	str	r3, [r2, #56]	; 0x38
				 if(intervall2 >= 20){intervall2 = 20;DoubleClick2 = 0;}
 80013ca:	2b13      	cmp	r3, #19
 80013cc:	dd04      	ble.n	80013d8 <TOUCHUPDATE+0x4a0>
 80013ce:	4613      	mov	r3, r2
 80013d0:	2214      	movs	r2, #20
 80013d2:	639a      	str	r2, [r3, #56]	; 0x38
 80013d4:	2200      	movs	r2, #0
 80013d6:	631a      	str	r2, [r3, #48]	; 0x30
		    	 count=3;
 80013d8:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <TOUCHUPDATE+0x55c>)
 80013da:	2203      	movs	r2, #3
 80013dc:	60da      	str	r2, [r3, #12]
		     	 break;
 80013de:	e5c5      	b.n	8000f6c <TOUCHUPDATE+0x34>
		    	else if (Encoder2.Color == GUI_MAGENTA)		{aTxBuffer[1] = 1;}
 80013e0:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <TOUCHUPDATE+0x55c>)
 80013e2:	2201      	movs	r2, #1
 80013e4:	705a      	strb	r2, [r3, #1]
 80013e6:	e779      	b.n	80012dc <TOUCHUPDATE+0x3a4>
		    	else if (Encoder2.Color == GUI_ORANGE)		{aTxBuffer[1] = 2;}
 80013e8:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <TOUCHUPDATE+0x55c>)
 80013ea:	2202      	movs	r2, #2
 80013ec:	705a      	strb	r2, [r3, #1]
 80013ee:	e775      	b.n	80012dc <TOUCHUPDATE+0x3a4>
		    	else if (Encoder2.Color == GUI_CYAN)		{aTxBuffer[1] = 3;}
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <TOUCHUPDATE+0x55c>)
 80013f2:	2203      	movs	r2, #3
 80013f4:	705a      	strb	r2, [r3, #1]
 80013f6:	e771      	b.n	80012dc <TOUCHUPDATE+0x3a4>
		    	else if (Encoder2.Color == GUI_LIGHTYELLOW)	{aTxBuffer[1] = 4;}
 80013f8:	4b26      	ldr	r3, [pc, #152]	; (8001494 <TOUCHUPDATE+0x55c>)
 80013fa:	2204      	movs	r2, #4
 80013fc:	705a      	strb	r2, [r3, #1]
 80013fe:	e76d      	b.n	80012dc <TOUCHUPDATE+0x3a4>
		    	else if (Encoder2.Color == GUI_LIGHTGREEN)	{aTxBuffer[1] = 5;}
 8001400:	4b24      	ldr	r3, [pc, #144]	; (8001494 <TOUCHUPDATE+0x55c>)
 8001402:	2205      	movs	r2, #5
 8001404:	705a      	strb	r2, [r3, #1]
 8001406:	e769      	b.n	80012dc <TOUCHUPDATE+0x3a4>
		    	else if (Encoder2.Color == GUI_LIGHTBLUE)	{aTxBuffer[1] = 6;}
 8001408:	4b22      	ldr	r3, [pc, #136]	; (8001494 <TOUCHUPDATE+0x55c>)
 800140a:	2206      	movs	r2, #6
 800140c:	705a      	strb	r2, [r3, #1]
 800140e:	e765      	b.n	80012dc <TOUCHUPDATE+0x3a4>
				 if(Encoder1.buttonState&&DoubleClick1<2&&!high1){
 8001410:	481b      	ldr	r0, [pc, #108]	; (8001480 <TOUCHUPDATE+0x548>)
 8001412:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001414:	2800      	cmp	r0, #0
 8001416:	d1a7      	bne.n	8001368 <TOUCHUPDATE+0x430>
					 DoubleClick1 = DoubleClick1+1;
 8001418:	3101      	adds	r1, #1
 800141a:	4819      	ldr	r0, [pc, #100]	; (8001480 <TOUCHUPDATE+0x548>)
 800141c:	6241      	str	r1, [r0, #36]	; 0x24
					 high1 = 1;
 800141e:	2101      	movs	r1, #1
 8001420:	6281      	str	r1, [r0, #40]	; 0x28
					 intervall1 = 0;
 8001422:	2100      	movs	r1, #0
 8001424:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001426:	e79f      	b.n	8001368 <TOUCHUPDATE+0x430>
				 if (DoubleClick1 == 2 && intervall1 < 20){
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <TOUCHUPDATE+0x548>)
 800142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142c:	2b13      	cmp	r3, #19
 800142e:	dca3      	bgt.n	8001378 <TOUCHUPDATE+0x440>
					 DoubleClick1 = 0;
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <TOUCHUPDATE+0x548>)
 8001432:	2100      	movs	r1, #0
 8001434:	6259      	str	r1, [r3, #36]	; 0x24
					 Encoder1.doubleclickEvent = 1;
 8001436:	4814      	ldr	r0, [pc, #80]	; (8001488 <TOUCHUPDATE+0x550>)
 8001438:	2401      	movs	r4, #1
 800143a:	60c4      	str	r4, [r0, #12]
					 intervall1=0;
 800143c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800143e:	e79b      	b.n	8001378 <TOUCHUPDATE+0x440>
					 Encoder1.doubleclickEvent = 0;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <TOUCHUPDATE+0x550>)
 8001442:	2100      	movs	r1, #0
 8001444:	60d9      	str	r1, [r3, #12]
 8001446:	e79e      	b.n	8001386 <TOUCHUPDATE+0x44e>
				 if(Encoder2.buttonState&&DoubleClick2<2&&!high2){
 8001448:	490d      	ldr	r1, [pc, #52]	; (8001480 <TOUCHUPDATE+0x548>)
 800144a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800144c:	2900      	cmp	r1, #0
 800144e:	d1aa      	bne.n	80013a6 <TOUCHUPDATE+0x46e>
					 DoubleClick2 = DoubleClick2+1;
 8001450:	3301      	adds	r3, #1
 8001452:	490b      	ldr	r1, [pc, #44]	; (8001480 <TOUCHUPDATE+0x548>)
 8001454:	630b      	str	r3, [r1, #48]	; 0x30
					 high2 = 1;
 8001456:	2301      	movs	r3, #1
 8001458:	634b      	str	r3, [r1, #52]	; 0x34
					 intervall2 = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	638b      	str	r3, [r1, #56]	; 0x38
 800145e:	e7a2      	b.n	80013a6 <TOUCHUPDATE+0x46e>
				 if (DoubleClick2 == 2 && intervall2 < 20){
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <TOUCHUPDATE+0x548>)
 8001462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001464:	2b13      	cmp	r3, #19
 8001466:	dca5      	bgt.n	80013b4 <TOUCHUPDATE+0x47c>
					 DoubleClick2 = 0;
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <TOUCHUPDATE+0x548>)
 800146a:	2200      	movs	r2, #0
 800146c:	631a      	str	r2, [r3, #48]	; 0x30
					 Encoder2.doubleclickEvent = 1;
 800146e:	490a      	ldr	r1, [pc, #40]	; (8001498 <TOUCHUPDATE+0x560>)
 8001470:	2001      	movs	r0, #1
 8001472:	60c8      	str	r0, [r1, #12]
					 intervall2=0;
 8001474:	639a      	str	r2, [r3, #56]	; 0x38
 8001476:	e79d      	b.n	80013b4 <TOUCHUPDATE+0x47c>
					 Encoder2.doubleclickEvent = 0;
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <TOUCHUPDATE+0x560>)
 800147a:	2200      	movs	r2, #0
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	e7a0      	b.n	80013c2 <TOUCHUPDATE+0x48a>
 8001480:	20000208 	.word	0x20000208
 8001484:	2002e6cc 	.word	0x2002e6cc
 8001488:	2002eeb4 	.word	0x2002eeb4
 800148c:	ffd3d3d3 	.word	0xffd3d3d3
 8001490:	ff8080ff 	.word	0xff8080ff
 8001494:	20000000 	.word	0x20000000
 8001498:	2002ed0c 	.word	0x2002ed0c
 800149c:	2002f16c 	.word	0x2002f16c
 80014a0:	2002fa2c 	.word	0x2002fa2c
 80014a4:	2002fa0c 	.word	0x2002fa0c
		    	HAL_I2C_Master_Transmit(&hi2c1, 50, aTxBuffer,10,10); //Send to LOGO WS2812
 80014a8:	4c06      	ldr	r4, [pc, #24]	; (80014c4 <TOUCHUPDATE+0x58c>)
 80014aa:	230a      	movs	r3, #10
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	4622      	mov	r2, r4
 80014b0:	2132      	movs	r1, #50	; 0x32
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <TOUCHUPDATE+0x590>)
 80014b4:	f003 f89c 	bl	80045f0 <HAL_I2C_Master_Transmit>
		    	BSP_Pointer_Update();
 80014b8:	f7ff fcf4 	bl	8000ea4 <BSP_Pointer_Update>
		     	count=1;
 80014bc:	2301      	movs	r3, #1
 80014be:	60e3      	str	r3, [r4, #12]
		        break;
 80014c0:	e554      	b.n	8000f6c <TOUCHUPDATE+0x34>
 80014c2:	bf00      	nop
 80014c4:	20000000 	.word	0x20000000
 80014c8:	2002f16c 	.word	0x2002f16c

080014cc <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80014cc:	4770      	bx	lr

080014ce <vApplicationStackOverflowHook>:
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80014ce:	4770      	bx	lr

080014d0 <vApplicationMallocFailedHook>:
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80014d0:	4770      	bx	lr
	...

080014d4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80014d4:	4b03      	ldr	r3, [pc, #12]	; (80014e4 <vApplicationGetIdleTaskMemory+0x10>)
 80014d6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80014d8:	3358      	adds	r3, #88	; 0x58
 80014da:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	6013      	str	r3, [r2, #0]
  /* place for user code */
}                   
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000258 	.word	0x20000258

080014e8 <MX_SDIO_SD_Init>:
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <MX_SDIO_SD_Init+0x18>)
 80014ea:	4a06      	ldr	r2, [pc, #24]	; (8001504 <MX_SDIO_SD_Init+0x1c>)
 80014ec:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80014ee:	2200      	movs	r2, #0
 80014f0:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80014f2:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80014f4:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80014f6:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80014f8:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80014fa:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	2002ffd4 	.word	0x2002ffd4
 8001504:	40012c00 	.word	0x40012c00

08001508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800150c:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	2400      	movs	r4, #0
 8001510:	940b      	str	r4, [sp, #44]	; 0x2c
 8001512:	940c      	str	r4, [sp, #48]	; 0x30
 8001514:	940d      	str	r4, [sp, #52]	; 0x34
 8001516:	940e      	str	r4, [sp, #56]	; 0x38
 8001518:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800151a:	9400      	str	r4, [sp, #0]
 800151c:	4b8c      	ldr	r3, [pc, #560]	; (8001750 <MX_GPIO_Init+0x248>)
 800151e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001520:	f042 0210 	orr.w	r2, r2, #16
 8001524:	631a      	str	r2, [r3, #48]	; 0x30
 8001526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001528:	f002 0210 	and.w	r2, r2, #16
 800152c:	9200      	str	r2, [sp, #0]
 800152e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001530:	9401      	str	r4, [sp, #4]
 8001532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001534:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001538:	631a      	str	r2, [r3, #48]	; 0x30
 800153a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800153c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001540:	9201      	str	r2, [sp, #4]
 8001542:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001544:	9402      	str	r4, [sp, #8]
 8001546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001548:	f042 0202 	orr.w	r2, r2, #2
 800154c:	631a      	str	r2, [r3, #48]	; 0x30
 800154e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001550:	f002 0202 	and.w	r2, r2, #2
 8001554:	9202      	str	r2, [sp, #8]
 8001556:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001558:	9403      	str	r4, [sp, #12]
 800155a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800155c:	f042 0204 	orr.w	r2, r2, #4
 8001560:	631a      	str	r2, [r3, #48]	; 0x30
 8001562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001564:	f002 0204 	and.w	r2, r2, #4
 8001568:	9203      	str	r2, [sp, #12]
 800156a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	9404      	str	r4, [sp, #16]
 800156e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001570:	f042 0201 	orr.w	r2, r2, #1
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
 8001576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001578:	f002 0201 	and.w	r2, r2, #1
 800157c:	9204      	str	r2, [sp, #16]
 800157e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001580:	9405      	str	r4, [sp, #20]
 8001582:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001584:	f042 0208 	orr.w	r2, r2, #8
 8001588:	631a      	str	r2, [r3, #48]	; 0x30
 800158a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158c:	f002 0208 	and.w	r2, r2, #8
 8001590:	9205      	str	r2, [sp, #20]
 8001592:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001594:	9406      	str	r4, [sp, #24]
 8001596:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800159c:	631a      	str	r2, [r3, #48]	; 0x30
 800159e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015a0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80015a4:	9206      	str	r2, [sp, #24]
 80015a6:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015a8:	9407      	str	r4, [sp, #28]
 80015aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015ac:	f042 0220 	orr.w	r2, r2, #32
 80015b0:	631a      	str	r2, [r3, #48]	; 0x30
 80015b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b4:	f002 0220 	and.w	r2, r2, #32
 80015b8:	9207      	str	r2, [sp, #28]
 80015ba:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80015bc:	9408      	str	r4, [sp, #32]
 80015be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80015c4:	631a      	str	r2, [r3, #48]	; 0x30
 80015c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015c8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80015cc:	9208      	str	r2, [sp, #32]
 80015ce:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d0:	9409      	str	r4, [sp, #36]	; 0x24
 80015d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015d8:	631a      	str	r2, [r3, #48]	; 0x30
 80015da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015dc:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80015e0:	9209      	str	r2, [sp, #36]	; 0x24
 80015e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80015e4:	940a      	str	r4, [sp, #40]	; 0x28
 80015e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015ec:	631a      	str	r2, [r3, #48]	; 0x30
 80015ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015f4:	930a      	str	r3, [sp, #40]	; 0x28
 80015f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPKR_HP_Pin|AUDIO_RST_Pin, GPIO_PIN_RESET);
 80015f8:	4e56      	ldr	r6, [pc, #344]	; (8001754 <MX_GPIO_Init+0x24c>)
 80015fa:	4622      	mov	r2, r4
 80015fc:	210c      	movs	r1, #12
 80015fe:	4630      	mov	r0, r6
 8001600:	f002 fbb5 	bl	8003d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001604:	4622      	mov	r2, r4
 8001606:	2130      	movs	r1, #48	; 0x30
 8001608:	4853      	ldr	r0, [pc, #332]	; (8001758 <MX_GPIO_Init+0x250>)
 800160a:	f002 fbb0 	bl	8003d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, GPIO_PIN_RESET);
 800160e:	4622      	mov	r2, r4
 8001610:	2108      	movs	r1, #8
 8001612:	4852      	ldr	r0, [pc, #328]	; (800175c <MX_GPIO_Init+0x254>)
 8001614:	f002 fbab 	bl	8003d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001618:	4622      	mov	r2, r4
 800161a:	2140      	movs	r1, #64	; 0x40
 800161c:	4850      	ldr	r0, [pc, #320]	; (8001760 <MX_GPIO_Init+0x258>)
 800161e:	f002 fba6 	bl	8003d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin, GPIO_PIN_RESET);
 8001622:	4622      	mov	r2, r4
 8001624:	2105      	movs	r1, #5
 8001626:	484f      	ldr	r0, [pc, #316]	; (8001764 <MX_GPIO_Init+0x25c>)
 8001628:	f002 fba1 	bl	8003d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 800162c:	4622      	mov	r2, r4
 800162e:	2180      	movs	r1, #128	; 0x80
 8001630:	484d      	ldr	r0, [pc, #308]	; (8001768 <MX_GPIO_Init+0x260>)
 8001632:	f002 fb9c 	bl	8003d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001636:	f8df b138 	ldr.w	fp, [pc, #312]	; 8001770 <MX_GPIO_Init+0x268>
 800163a:	4622      	mov	r2, r4
 800163c:	2108      	movs	r1, #8
 800163e:	4658      	mov	r0, fp
 8001640:	f002 fb95 	bl	8003d6e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SPKR_HP_Pin AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = SPKR_HP_Pin|AUDIO_RST_Pin;
 8001644:	230c      	movs	r3, #12
 8001646:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001648:	2501      	movs	r5, #1
 800164a:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164e:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001650:	a90b      	add	r1, sp, #44	; 0x2c
 8001652:	4630      	mov	r0, r6
 8001654:	f002 f9f4 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_CK_Pin */
  GPIO_InitStruct.Pin = I2S3_CK_Pin;
 8001658:	2608      	movs	r6, #8
 800165a:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	f04f 0802 	mov.w	r8, #2
 8001660:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001668:	2306      	movs	r3, #6
 800166a:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(I2S3_CK_GPIO_Port, &GPIO_InitStruct);
 800166c:	a90b      	add	r1, sp, #44	; 0x2c
 800166e:	483d      	ldr	r0, [pc, #244]	; (8001764 <MX_GPIO_Init+0x25c>)
 8001670:	f002 f9e6 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS1_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_OverCurrent_Pin;
 8001674:	f04f 0980 	mov.w	r9, #128	; 0x80
 8001678:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800167c:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8001774 <MX_GPIO_Init+0x26c>
 8001680:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS1_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001686:	a90b      	add	r1, sp, #44	; 0x2c
 8001688:	4836      	ldr	r0, [pc, #216]	; (8001764 <MX_GPIO_Init+0x25c>)
 800168a:	f002 f9d9 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS1_P_Pin USB_FS1_N_Pin USB_FS1_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS1_P_Pin|USB_FS1_N_Pin|USB_FS1_ID_Pin;
 800168e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001692:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001694:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800169e:	230a      	movs	r3, #10
 80016a0:	930f      	str	r3, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	a90b      	add	r1, sp, #44	; 0x2c
 80016a4:	4658      	mov	r0, fp
 80016a6:	f002 f9cb 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 80016aa:	2330      	movs	r3, #48	; 0x30
 80016ac:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016ae:	2711      	movs	r7, #17
 80016b0:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b4:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b6:	a90b      	add	r1, sp, #44	; 0x2c
 80016b8:	4827      	ldr	r0, [pc, #156]	; (8001758 <MX_GPIO_Init+0x250>)
 80016ba:	f002 f9c1 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED4_Pin */
  GPIO_InitStruct.Pin = LED4_Pin;
 80016be:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016c0:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED4_GPIO_Port, &GPIO_InitStruct);
 80016c6:	a90b      	add	r1, sp, #44	; 0x2c
 80016c8:	4824      	ldr	r0, [pc, #144]	; (800175c <MX_GPIO_Init+0x254>)
 80016ca:	f002 f9b9 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS1_Pin */
  GPIO_InitStruct.Pin = VBUS_FS1_Pin;
 80016ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016d2:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(VBUS_FS1_GPIO_Port, &GPIO_InitStruct);
 80016da:	a90b      	add	r1, sp, #44	; 0x2c
 80016dc:	4658      	mov	r0, fp
 80016de:	f002 f9af 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80016e2:	2340      	movs	r3, #64	; 0x40
 80016e4:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016e6:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80016ec:	a90b      	add	r1, sp, #44	; 0x2c
 80016ee:	481c      	ldr	r0, [pc, #112]	; (8001760 <MX_GPIO_Init+0x258>)
 80016f0:	f002 f9a6 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS1_PowerSwitchOn_Pin EXT_RESET_Pin */
  GPIO_InitStruct.Pin = OTG_FS1_PowerSwitchOn_Pin|EXT_RESET_Pin;
 80016f4:	2305      	movs	r3, #5
 80016f6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fe:	a90b      	add	r1, sp, #44	; 0x2c
 8001700:	4818      	ldr	r0, [pc, #96]	; (8001764 <MX_GPIO_Init+0x25c>)
 8001702:	f002 f99d 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001706:	2304      	movs	r3, #4
 8001708:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 800170e:	a90b      	add	r1, sp, #44	; 0x2c
 8001710:	4813      	ldr	r0, [pc, #76]	; (8001760 <MX_GPIO_Init+0x258>)
 8001712:	f002 f995 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001716:	2320      	movs	r3, #32
 8001718:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800171a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001720:	a90b      	add	r1, sp, #44	; 0x2c
 8001722:	4812      	ldr	r0, [pc, #72]	; (800176c <MX_GPIO_Init+0x264>)
 8001724:	f002 f98c 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001728:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001730:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001732:	a90b      	add	r1, sp, #44	; 0x2c
 8001734:	480c      	ldr	r0, [pc, #48]	; (8001768 <MX_GPIO_Init+0x260>)
 8001736:	f002 f983 	bl	8003a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800173a:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173c:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001742:	a90b      	add	r1, sp, #44	; 0x2c
 8001744:	4658      	mov	r0, fp
 8001746:	f002 f97b 	bl	8003a40 <HAL_GPIO_Init>

}
 800174a:	b011      	add	sp, #68	; 0x44
 800174c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001750:	40023800 	.word	0x40023800
 8001754:	40021000 	.word	0x40021000
 8001758:	40020c00 	.word	0x40020c00
 800175c:	40022800 	.word	0x40022800
 8001760:	40021800 	.word	0x40021800
 8001764:	40020400 	.word	0x40020400
 8001768:	40021c00 	.word	0x40021c00
 800176c:	40022400 	.word	0x40022400
 8001770:	40020000 	.word	0x40020000
 8001774:	10110000 	.word	0x10110000

08001778 <MX_DMA_Init>:
{
 8001778:	b510      	push	{r4, lr}
 800177a:	b082      	sub	sp, #8
  __HAL_RCC_DMA2_CLK_ENABLE();
 800177c:	2400      	movs	r4, #0
 800177e:	9401      	str	r4, [sp, #4]
 8001780:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <MX_DMA_Init+0x40>)
 8001782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001784:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001788:	631a      	str	r2, [r3, #48]	; 0x30
 800178a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001794:	4622      	mov	r2, r4
 8001796:	2105      	movs	r1, #5
 8001798:	2039      	movs	r0, #57	; 0x39
 800179a:	f001 f965 	bl	8002a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800179e:	2039      	movs	r0, #57	; 0x39
 80017a0:	f001 f996 	bl	8002ad0 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80017a4:	4622      	mov	r2, r4
 80017a6:	2105      	movs	r1, #5
 80017a8:	2045      	movs	r0, #69	; 0x45
 80017aa:	f001 f95d 	bl	8002a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80017ae:	2045      	movs	r0, #69	; 0x45
 80017b0:	f001 f98e 	bl	8002ad0 <HAL_NVIC_EnableIRQ>
}
 80017b4:	b002      	add	sp, #8
 80017b6:	bd10      	pop	{r4, pc}
 80017b8:	40023800 	.word	0x40023800

080017bc <MX_CRC_Init>:
{
 80017bc:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 80017be:	4803      	ldr	r0, [pc, #12]	; (80017cc <MX_CRC_Init+0x10>)
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <MX_CRC_Init+0x14>)
 80017c2:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017c4:	f001 f9a4 	bl	8002b10 <HAL_CRC_Init>
}
 80017c8:	bd08      	pop	{r3, pc}
 80017ca:	bf00      	nop
 80017cc:	2002fe7c 	.word	0x2002fe7c
 80017d0:	40023000 	.word	0x40023000

080017d4 <MX_I2C1_Init>:
{
 80017d4:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 80017d6:	4809      	ldr	r0, [pc, #36]	; (80017fc <MX_I2C1_Init+0x28>)
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_I2C1_Init+0x2c>)
 80017da:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_I2C1_Init+0x30>)
 80017de:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017e0:	2300      	movs	r3, #0
 80017e2:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017e4:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ea:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ec:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017ee:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f0:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f2:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017f4:	f002 fe08 	bl	8004408 <HAL_I2C_Init>
}
 80017f8:	bd08      	pop	{r3, pc}
 80017fa:	bf00      	nop
 80017fc:	2002f16c 	.word	0x2002f16c
 8001800:	40005400 	.word	0x40005400
 8001804:	000186a0 	.word	0x000186a0

08001808 <MX_I2C2_Init>:
{
 8001808:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 800180a:	4809      	ldr	r0, [pc, #36]	; (8001830 <MX_I2C2_Init+0x28>)
 800180c:	4b09      	ldr	r3, [pc, #36]	; (8001834 <MX_I2C2_Init+0x2c>)
 800180e:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_I2C2_Init+0x30>)
 8001812:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001814:	2300      	movs	r3, #0
 8001816:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001818:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800181a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800181e:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001820:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001822:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001824:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001826:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001828:	f002 fdee 	bl	8004408 <HAL_I2C_Init>
}
 800182c:	bd08      	pop	{r3, pc}
 800182e:	bf00      	nop
 8001830:	2002fe84 	.word	0x2002fe84
 8001834:	40005800 	.word	0x40005800
 8001838:	000186a0 	.word	0x000186a0

0800183c <MX_QUADSPI_Init>:
{
 800183c:	b508      	push	{r3, lr}
  hqspi.Instance = QUADSPI;
 800183e:	4808      	ldr	r0, [pc, #32]	; (8001860 <MX_QUADSPI_Init+0x24>)
 8001840:	4b08      	ldr	r3, [pc, #32]	; (8001864 <MX_QUADSPI_Init+0x28>)
 8001842:	6003      	str	r3, [r0, #0]
  hqspi.Init.ClockPrescaler = 255;
 8001844:	23ff      	movs	r3, #255	; 0xff
 8001846:	6043      	str	r3, [r0, #4]
  hqspi.Init.FifoThreshold = 1;
 8001848:	2201      	movs	r2, #1
 800184a:	6082      	str	r2, [r0, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800184c:	2300      	movs	r3, #0
 800184e:	60c3      	str	r3, [r0, #12]
  hqspi.Init.FlashSize = 1;
 8001850:	6102      	str	r2, [r0, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001852:	6143      	str	r3, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001854:	6183      	str	r3, [r0, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001856:	61c3      	str	r3, [r0, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001858:	6203      	str	r3, [r0, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800185a:	f003 fe7d 	bl	8005558 <HAL_QSPI_Init>
}
 800185e:	bd08      	pop	{r3, pc}
 8001860:	20030124 	.word	0x20030124
 8001864:	a0001000 	.word	0xa0001000

08001868 <MX_SAI1_Init>:
{
 8001868:	b508      	push	{r3, lr}
  hsai_BlockA1.Instance = SAI1_Block_A;
 800186a:	4811      	ldr	r0, [pc, #68]	; (80018b0 <MX_SAI1_Init+0x48>)
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_SAI1_Init+0x4c>)
 800186e:	6003      	str	r3, [r0, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8001870:	2300      	movs	r3, #0
 8001872:	6343      	str	r3, [r0, #52]	; 0x34
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8001874:	6043      	str	r3, [r0, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8001876:	2240      	movs	r2, #64	; 0x40
 8001878:	6382      	str	r2, [r0, #56]	; 0x38
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800187a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800187c:	6403      	str	r3, [r0, #64]	; 0x40
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800187e:	6083      	str	r3, [r0, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001880:	6103      	str	r3, [r0, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001882:	6143      	str	r3, [r0, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001884:	6183      	str	r3, [r0, #24]
  hsai_BlockA1.Init.ClockSource = SAI_CLKSOURCE_PLLSAI;
 8001886:	61c3      	str	r3, [r0, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001888:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <MX_SAI1_Init+0x50>)
 800188a:	6202      	str	r2, [r0, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800188c:	60c3      	str	r3, [r0, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800188e:	6283      	str	r3, [r0, #40]	; 0x28
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8001890:	62c3      	str	r3, [r0, #44]	; 0x2c
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001892:	6303      	str	r3, [r0, #48]	; 0x30
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8001894:	2208      	movs	r2, #8
 8001896:	6442      	str	r2, [r0, #68]	; 0x44
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8001898:	2201      	movs	r2, #1
 800189a:	6482      	str	r2, [r0, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800189c:	64c3      	str	r3, [r0, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800189e:	6503      	str	r3, [r0, #80]	; 0x50
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80018a0:	6543      	str	r3, [r0, #84]	; 0x54
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80018a2:	6583      	str	r3, [r0, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80018a4:	65c3      	str	r3, [r0, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80018a6:	6602      	str	r2, [r0, #96]	; 0x60
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80018a8:	6643      	str	r3, [r0, #100]	; 0x64
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80018aa:	f004 fb85 	bl	8005fb8 <HAL_SAI_Init>
}
 80018ae:	bd08      	pop	{r3, pc}
 80018b0:	20030098 	.word	0x20030098
 80018b4:	40015804 	.word	0x40015804
 80018b8:	0002ee00 	.word	0x0002ee00

080018bc <MX_TIM1_Init>:
{
 80018bc:	b530      	push	{r4, r5, lr}
 80018be:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c0:	2400      	movs	r4, #0
 80018c2:	9402      	str	r4, [sp, #8]
 80018c4:	9403      	str	r4, [sp, #12]
 80018c6:	9404      	str	r4, [sp, #16]
 80018c8:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ca:	9400      	str	r4, [sp, #0]
 80018cc:	9401      	str	r4, [sp, #4]
  htim1.Instance = TIM1;
 80018ce:	4d0e      	ldr	r5, [pc, #56]	; (8001908 <MX_TIM1_Init+0x4c>)
 80018d0:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_TIM1_Init+0x50>)
 80018d2:	602b      	str	r3, [r5, #0]
  htim1.Init.Prescaler = 89999;
 80018d4:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_TIM1_Init+0x54>)
 80018d6:	606b      	str	r3, [r5, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d8:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 100000;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <MX_TIM1_Init+0x58>)
 80018dc:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018de:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 80018e0:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e2:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018e4:	4628      	mov	r0, r5
 80018e6:	f005 fb89 	bl	8006ffc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ee:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018f0:	a902      	add	r1, sp, #8
 80018f2:	4628      	mov	r0, r5
 80018f4:	f005 fba7 	bl	8007046 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018f8:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018fa:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018fc:	4669      	mov	r1, sp
 80018fe:	4628      	mov	r0, r5
 8001900:	f005 fc0e 	bl	8007120 <HAL_TIMEx_MasterConfigSynchronization>
}
 8001904:	b007      	add	sp, #28
 8001906:	bd30      	pop	{r4, r5, pc}
 8001908:	2002ff94 	.word	0x2002ff94
 800190c:	40010000 	.word	0x40010000
 8001910:	00015f8f 	.word	0x00015f8f
 8001914:	000186a0 	.word	0x000186a0

08001918 <MX_TIM3_Init>:
{
 8001918:	b530      	push	{r4, r5, lr}
 800191a:	b083      	sub	sp, #12
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191c:	2500      	movs	r5, #0
 800191e:	9500      	str	r5, [sp, #0]
 8001920:	9501      	str	r5, [sp, #4]
  htim3.Instance = TIM3;
 8001922:	4c0b      	ldr	r4, [pc, #44]	; (8001950 <MX_TIM3_Init+0x38>)
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <MX_TIM3_Init+0x3c>)
 8001926:	6023      	str	r3, [r4, #0]
  htim3.Init.Prescaler = 8999;
 8001928:	f242 3327 	movw	r3, #8999	; 0x2327
 800192c:	6063      	str	r3, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192e:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 499;
 8001930:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001934:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001936:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001938:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800193a:	4620      	mov	r0, r4
 800193c:	f005 fb5e 	bl	8006ffc <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001940:	9500      	str	r5, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001942:	9501      	str	r5, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001944:	4669      	mov	r1, sp
 8001946:	4620      	mov	r0, r4
 8001948:	f005 fbea 	bl	8007120 <HAL_TIMEx_MasterConfigSynchronization>
}
 800194c:	b003      	add	sp, #12
 800194e:	bd30      	pop	{r4, r5, pc}
 8001950:	2002fed8 	.word	0x2002fed8
 8001954:	40000400 	.word	0x40000400

08001958 <MX_TIM4_Init>:
{
 8001958:	b530      	push	{r4, r5, lr}
 800195a:	b087      	sub	sp, #28
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195c:	2400      	movs	r4, #0
 800195e:	9402      	str	r4, [sp, #8]
 8001960:	9403      	str	r4, [sp, #12]
 8001962:	9404      	str	r4, [sp, #16]
 8001964:	9405      	str	r4, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001966:	9400      	str	r4, [sp, #0]
 8001968:	9401      	str	r4, [sp, #4]
  htim4.Instance = TIM4;
 800196a:	4d0e      	ldr	r5, [pc, #56]	; (80019a4 <MX_TIM4_Init+0x4c>)
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_TIM4_Init+0x50>)
 800196e:	602b      	str	r3, [r5, #0]
  htim4.Init.Prescaler = 10000;
 8001970:	f242 7310 	movw	r3, #10000	; 0x2710
 8001974:	606b      	str	r3, [r5, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001976:	60ac      	str	r4, [r5, #8]
  htim4.Init.Period = 100000;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_TIM4_Init+0x54>)
 800197a:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800197c:	612c      	str	r4, [r5, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197e:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001980:	4628      	mov	r0, r5
 8001982:	f005 fb3b 	bl	8006ffc <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800198c:	a902      	add	r1, sp, #8
 800198e:	4628      	mov	r0, r5
 8001990:	f005 fb59 	bl	8007046 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET  ;
 8001994:	9400      	str	r4, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001996:	9401      	str	r4, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001998:	4669      	mov	r1, sp
 800199a:	4628      	mov	r0, r5
 800199c:	f005 fbc0 	bl	8007120 <HAL_TIMEx_MasterConfigSynchronization>
}
 80019a0:	b007      	add	sp, #28
 80019a2:	bd30      	pop	{r4, r5, pc}
 80019a4:	2002fdfc 	.word	0x2002fdfc
 80019a8:	40000800 	.word	0x40000800
 80019ac:	000186a0 	.word	0x000186a0

080019b0 <MX_USART3_UART_Init>:
{
 80019b0:	b508      	push	{r3, lr}
  huart3.Instance = USART3;
 80019b2:	4808      	ldr	r0, [pc, #32]	; (80019d4 <MX_USART3_UART_Init+0x24>)
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <MX_USART3_UART_Init+0x28>)
 80019b6:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80019b8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80019bc:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019be:	2300      	movs	r3, #0
 80019c0:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019c2:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019c4:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019c6:	220c      	movs	r2, #12
 80019c8:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ca:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019cc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019ce:	f005 fd11 	bl	80073f4 <HAL_UART_Init>
}
 80019d2:	bd08      	pop	{r3, pc}
 80019d4:	2002fe3c 	.word	0x2002fe3c
 80019d8:	40004800 	.word	0x40004800

080019dc <MX_USART6_UART_Init>:
{
 80019dc:	b508      	push	{r3, lr}
  huart6.Instance = USART6;
 80019de:	4808      	ldr	r0, [pc, #32]	; (8001a00 <MX_USART6_UART_Init+0x24>)
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <MX_USART6_UART_Init+0x28>)
 80019e2:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = 500000;
 80019e4:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <MX_USART6_UART_Init+0x2c>)
 80019e6:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019e8:	2300      	movs	r3, #0
 80019ea:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019ec:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019ee:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019f0:	220c      	movs	r2, #12
 80019f2:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f4:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f6:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019f8:	f005 fcfc 	bl	80073f4 <HAL_UART_Init>
}
 80019fc:	bd08      	pop	{r3, pc}
 80019fe:	bf00      	nop
 8001a00:	20030058 	.word	0x20030058
 8001a04:	40011400 	.word	0x40011400
 8001a08:	0007a120 	.word	0x0007a120

08001a0c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001a0c:	b508      	push	{r3, lr}
  /* init code for FATFS */
  MX_FATFS_Init();
 8001a0e:	f006 fae5 	bl	8007fdc <MX_FATFS_Init>

/* Graphic application */
  GRAPHICS_MainTask();
 8001a12:	f009 fa21 	bl	800ae58 <GRAPHICS_MainTask>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a16:	2001      	movs	r0, #1
 8001a18:	f006 fd85 	bl	8008526 <osDelay>
 8001a1c:	e7fb      	b.n	8001a16 <StartDefaultTask+0xa>
	...

08001a20 <SystemClock_Config>:
{
 8001a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a24:	b0a4      	sub	sp, #144	; 0x90
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a26:	2234      	movs	r2, #52	; 0x34
 8001a28:	2100      	movs	r1, #0
 8001a2a:	a817      	add	r0, sp, #92	; 0x5c
 8001a2c:	f01d f833 	bl	801ea96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a30:	2400      	movs	r4, #0
 8001a32:	9412      	str	r4, [sp, #72]	; 0x48
 8001a34:	9413      	str	r4, [sp, #76]	; 0x4c
 8001a36:	9414      	str	r4, [sp, #80]	; 0x50
 8001a38:	9415      	str	r4, [sp, #84]	; 0x54
 8001a3a:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a3c:	223c      	movs	r2, #60	; 0x3c
 8001a3e:	4621      	mov	r1, r4
 8001a40:	a803      	add	r0, sp, #12
 8001a42:	f01d f828 	bl	801ea96 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a46:	9401      	str	r4, [sp, #4]
 8001a48:	4b28      	ldr	r3, [pc, #160]	; (8001aec <SystemClock_Config+0xcc>)
 8001a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a5c:	9402      	str	r4, [sp, #8]
 8001a5e:	4b24      	ldr	r3, [pc, #144]	; (8001af0 <SystemClock_Config+0xd0>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a6e:	9302      	str	r3, [sp, #8]
 8001a70:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a72:	f04f 0801 	mov.w	r8, #1
 8001a76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a7a:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 8001a7e:	9718      	str	r7, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a80:	2502      	movs	r5, #2
 8001a82:	951d      	str	r5, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a88:	931e      	str	r3, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	931f      	str	r3, [sp, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001a8e:	23b4      	movs	r3, #180	; 0xb4
 8001a90:	9320      	str	r3, [sp, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a92:	9521      	str	r5, [sp, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001a94:	2606      	movs	r6, #6
 8001a96:	9622      	str	r6, [sp, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 6;
 8001a98:	9623      	str	r6, [sp, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a9a:	a817      	add	r0, sp, #92	; 0x5c
 8001a9c:	f004 f8a2 	bl	8005be4 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001aa0:	f003 fcf2 	bl	8005488 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001aa8:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aaa:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001aac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ab0:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab6:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ab8:	2105      	movs	r1, #5
 8001aba:	a812      	add	r0, sp, #72	; 0x48
 8001abc:	f003 fe12 	bl	80056e4 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI_PLLSAI|RCC_PERIPHCLK_SDIO
 8001ac0:	f44f 73c6 	mov.w	r3, #396	; 0x18c
 8001ac4:	9303      	str	r3, [sp, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 144;
 8001ac6:	2390      	movs	r3, #144	; 0x90
 8001ac8:	9307      	str	r3, [sp, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001aca:	950a      	str	r5, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001acc:	9509      	str	r5, [sp, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV6;
 8001ace:	9608      	str	r6, [sp, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001ad0:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001ad4:	970d      	str	r7, [sp, #52]	; 0x34
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8001ad6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ada:	9310      	str	r3, [sp, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001adc:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ade:	a803      	add	r0, sp, #12
 8001ae0:	f003 fef4 	bl	80058cc <HAL_RCCEx_PeriphCLKConfig>
}
 8001ae4:	b024      	add	sp, #144	; 0x90
 8001ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40007000 	.word	0x40007000

08001af4 <Encoder_Init>:
void Encoder_Init(){
 8001af4:	b510      	push	{r4, lr}
 8001af6:	b082      	sub	sp, #8
	for(int i=0; i<6;i++){
 8001af8:	2400      	movs	r4, #0
 8001afa:	e00e      	b.n	8001b1a <Encoder_Init+0x26>
		i2c[0]= 0x00;
 8001afc:	4a29      	ldr	r2, [pc, #164]	; (8001ba4 <Encoder_Init+0xb0>)
 8001afe:	2300      	movs	r3, #0
 8001b00:	7013      	strb	r3, [r2, #0]
		i2c[1]= 0x80;
 8001b02:	2380      	movs	r3, #128	; 0x80
 8001b04:	7053      	strb	r3, [r2, #1]
		HAL_I2C_Master_Transmit(&hi2c1,EncoderAdr[i], i2c,2,10);
 8001b06:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <Encoder_Init+0xb4>)
 8001b08:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 8001b0c:	230a      	movs	r3, #10
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	2302      	movs	r3, #2
 8001b12:	4826      	ldr	r0, [pc, #152]	; (8001bac <Encoder_Init+0xb8>)
 8001b14:	f002 fd6c 	bl	80045f0 <HAL_I2C_Master_Transmit>
	for(int i=0; i<6;i++){
 8001b18:	3401      	adds	r4, #1
 8001b1a:	2c05      	cmp	r4, #5
 8001b1c:	ddee      	ble.n	8001afc <Encoder_Init+0x8>
	for(int i=0; i<6;i++){
 8001b1e:	2400      	movs	r4, #0
 8001b20:	e012      	b.n	8001b48 <Encoder_Init+0x54>
		i2c[0]= 0x0C;
 8001b22:	4a20      	ldr	r2, [pc, #128]	; (8001ba4 <Encoder_Init+0xb0>)
 8001b24:	230c      	movs	r3, #12
 8001b26:	7013      	strb	r3, [r2, #0]
		i2c[1]= 0x00;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	7053      	strb	r3, [r2, #1]
		i2c[2]= 0x00;
 8001b2c:	7093      	strb	r3, [r2, #2]
		i2c[3]= 0x10;
 8001b2e:	2310      	movs	r3, #16
 8001b30:	70d3      	strb	r3, [r2, #3]
		i2c[4]= 0x10;
 8001b32:	7113      	strb	r3, [r2, #4]
		HAL_I2C_Master_Transmit(&hi2c1,EncoderAdr[i], i2c,5,10);
 8001b34:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <Encoder_Init+0xb4>)
 8001b36:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 8001b3a:	230a      	movs	r3, #10
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2305      	movs	r3, #5
 8001b40:	481a      	ldr	r0, [pc, #104]	; (8001bac <Encoder_Init+0xb8>)
 8001b42:	f002 fd55 	bl	80045f0 <HAL_I2C_Master_Transmit>
	for(int i=0; i<6;i++){
 8001b46:	3401      	adds	r4, #1
 8001b48:	2c05      	cmp	r4, #5
 8001b4a:	ddea      	ble.n	8001b22 <Encoder_Init+0x2e>
	for(int i=0; i<6;i++){
 8001b4c:	2400      	movs	r4, #0
 8001b4e:	e00e      	b.n	8001b6e <Encoder_Init+0x7a>
		i2c[0]= 0x00;
 8001b50:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <Encoder_Init+0xb0>)
 8001b52:	2300      	movs	r3, #0
 8001b54:	7013      	strb	r3, [r2, #0]
		i2c[1]= 0x10;
 8001b56:	2310      	movs	r3, #16
 8001b58:	7053      	strb	r3, [r2, #1]
		HAL_I2C_Master_Transmit(&hi2c1,EncoderAdr[i], i2c,2,10);
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <Encoder_Init+0xb4>)
 8001b5c:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 8001b60:	230a      	movs	r3, #10
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2302      	movs	r3, #2
 8001b66:	4811      	ldr	r0, [pc, #68]	; (8001bac <Encoder_Init+0xb8>)
 8001b68:	f002 fd42 	bl	80045f0 <HAL_I2C_Master_Transmit>
	for(int i=0; i<6;i++){
 8001b6c:	3401      	adds	r4, #1
 8001b6e:	2c05      	cmp	r4, #5
 8001b70:	ddee      	ble.n	8001b50 <Encoder_Init+0x5c>
	for(int i=0; i<6;i++){
 8001b72:	2400      	movs	r4, #0
 8001b74:	e012      	b.n	8001b9c <Encoder_Init+0xa8>
		i2c[0]= 0x14;
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <Encoder_Init+0xb0>)
 8001b78:	2314      	movs	r3, #20
 8001b7a:	7013      	strb	r3, [r2, #0]
		i2c[1]= 0x00;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	7053      	strb	r3, [r2, #1]
		i2c[2]= 0x00;
 8001b80:	7093      	strb	r3, [r2, #2]
		i2c[3]= 0x00;
 8001b82:	70d3      	strb	r3, [r2, #3]
		i2c[4]= 0x01;
 8001b84:	2301      	movs	r3, #1
 8001b86:	7113      	strb	r3, [r2, #4]
		HAL_I2C_Master_Transmit(&hi2c1,EncoderAdr[i], i2c,5,10);
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <Encoder_Init+0xb4>)
 8001b8a:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 8001b8e:	230a      	movs	r3, #10
 8001b90:	9300      	str	r3, [sp, #0]
 8001b92:	2305      	movs	r3, #5
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <Encoder_Init+0xb8>)
 8001b96:	f002 fd2b 	bl	80045f0 <HAL_I2C_Master_Transmit>
	for(int i=0; i<6;i++){
 8001b9a:	3401      	adds	r4, #1
 8001b9c:	2c05      	cmp	r4, #5
 8001b9e:	ddea      	ble.n	8001b76 <Encoder_Init+0x82>
}
 8001ba0:	b002      	add	sp, #8
 8001ba2:	bd10      	pop	{r4, pc}
 8001ba4:	2002ff7c 	.word	0x2002ff7c
 8001ba8:	20000010 	.word	0x20000010
 8001bac:	2002f16c 	.word	0x2002f16c

08001bb0 <main>:
{
 8001bb0:	b500      	push	{lr}
 8001bb2:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001bb4:	f000 ff06 	bl	80029c4 <HAL_Init>
  SystemClock_Config();
 8001bb8:	f7ff ff32 	bl	8001a20 <SystemClock_Config>
  MX_GPIO_Init();
 8001bbc:	f7ff fca4 	bl	8001508 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bc0:	f7ff fdda 	bl	8001778 <MX_DMA_Init>
  MX_CRC_Init();
 8001bc4:	f7ff fdfa 	bl	80017bc <MX_CRC_Init>
  MX_I2C1_Init();
 8001bc8:	f7ff fe04 	bl	80017d4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001bcc:	f7ff fe1c 	bl	8001808 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001bd0:	f7ff fe34 	bl	800183c <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8001bd4:	f7ff fe48 	bl	8001868 <MX_SAI1_Init>
  MX_SDIO_SD_Init();
 8001bd8:	f7ff fc86 	bl	80014e8 <MX_SDIO_SD_Init>
  MX_TIM1_Init();
 8001bdc:	f7ff fe6e 	bl	80018bc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001be0:	f7ff fe9a 	bl	8001918 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001be4:	f7ff feb8 	bl	8001958 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001be8:	f7ff fee2 	bl	80019b0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001bec:	f7ff fef6 	bl	80019dc <MX_USART6_UART_Init>
  Encoder_Init();
 8001bf0:	f7ff ff80 	bl	8001af4 <Encoder_Init>
  BSP_LED_Init(LED1);
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f00c ff31 	bl	800ea5c <BSP_LED_Init>
  BSP_LED_Init(LED2);
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f00c ff2e 	bl	800ea5c <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8001c00:	2002      	movs	r0, #2
 8001c02:	f00c ff2b 	bl	800ea5c <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8001c06:	2003      	movs	r0, #3
 8001c08:	f00c ff28 	bl	800ea5c <BSP_LED_Init>
  GRAPHICS_HW_Init();
 8001c0c:	f00c fe40 	bl	800e890 <GRAPHICS_HW_Init>
  GRAPHICS_Init();
 8001c10:	f00c fe4e 	bl	800e8b0 <GRAPHICS_Init>
  BSP_TS_Init(800, 480);
 8001c14:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001c18:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001c1c:	f00c ffa0 	bl	800eb60 <BSP_TS_Init>
  HAL_UART_Receive_DMA(&huart6, UART_RECIVE,RX_IN_SIZE);
 8001c20:	4c0d      	ldr	r4, [pc, #52]	; (8001c58 <main+0xa8>)
 8001c22:	22c8      	movs	r2, #200	; 0xc8
 8001c24:	490d      	ldr	r1, [pc, #52]	; (8001c5c <main+0xac>)
 8001c26:	4620      	mov	r0, r4
 8001c28:	f005 fc5a 	bl	80074e0 <HAL_UART_Receive_DMA>
  HAL_UART_Transmit_DMA(&huart6, UART_TRANSFER,150);
 8001c2c:	2296      	movs	r2, #150	; 0x96
 8001c2e:	490c      	ldr	r1, [pc, #48]	; (8001c60 <main+0xb0>)
 8001c30:	4620      	mov	r0, r4
 8001c32:	f005 fc0f 	bl	8007454 <HAL_UART_Transmit_DMA>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal , 0, 6000);
 8001c36:	ac01      	add	r4, sp, #4
 8001c38:	4d0a      	ldr	r5, [pc, #40]	; (8001c64 <main+0xb4>)
 8001c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c46:	2100      	movs	r1, #0
 8001c48:	a801      	add	r0, sp, #4
 8001c4a:	f006 fc32 	bl	80084b2 <osThreadCreate>
 8001c4e:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <main+0xb8>)
 8001c50:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001c52:	f006 fc16 	bl	8008482 <osKernelStart>
 8001c56:	e7fe      	b.n	8001c56 <main+0xa6>
 8001c58:	20030058 	.word	0x20030058
 8001c5c:	2002e8c0 	.word	0x2002e8c0
 8001c60:	2002ed50 	.word	0x2002ed50
 8001c64:	0801ecd8 	.word	0x0801ecd8
 8001c68:	2002fd98 	.word	0x2002fd98

08001c6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c6e:	6802      	ldr	r2, [r0, #0]
 8001c70:	4b03      	ldr	r3, [pc, #12]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d000      	beq.n	8001c78 <HAL_TIM_PeriodElapsedCallback+0xc>

  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c76:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8001c78:	f000 febe 	bl	80029f8 <HAL_IncTick>
}
 8001c7c:	e7fb      	b.n	8001c76 <HAL_TIM_PeriodElapsedCallback+0xa>
 8001c7e:	bf00      	nop
 8001c80:	40001000 	.word	0x40001000

08001c84 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	9100      	str	r1, [sp, #0]
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <HAL_MspInit+0x34>)
 8001c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c96:	645a      	str	r2, [r3, #68]	; 0x44
 8001c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c9a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c9e:	9200      	str	r2, [sp, #0]
 8001ca0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ca2:	9101      	str	r1, [sp, #4]
 8001ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ca6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001caa:	641a      	str	r2, [r3, #64]	; 0x40
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb6:	b002      	add	sp, #8
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800

08001cc0 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001cc0:	6802      	ldr	r2, [r0, #0]
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_CRC_MspInit+0x28>)
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d000      	beq.n	8001cca <HAL_CRC_MspInit+0xa>
 8001cc8:	4770      	bx	lr
{
 8001cca:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_CRC_MspInit+0x2c>)
 8001cd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001cd8:	631a      	str	r2, [r3, #48]	; 0x30
 8001cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ce4:	b002      	add	sp, #8
 8001ce6:	4770      	bx	lr
 8001ce8:	40023000 	.word	0x40023000
 8001cec:	40023800 	.word	0x40023800

08001cf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cf0:	b530      	push	{r4, r5, lr}
 8001cf2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	9305      	str	r3, [sp, #20]
 8001cf8:	9306      	str	r3, [sp, #24]
 8001cfa:	9307      	str	r3, [sp, #28]
 8001cfc:	9308      	str	r3, [sp, #32]
 8001cfe:	9309      	str	r3, [sp, #36]	; 0x24
  if(hi2c->Instance==I2C1)
 8001d00:	6803      	ldr	r3, [r0, #0]
 8001d02:	4a29      	ldr	r2, [pc, #164]	; (8001da8 <HAL_I2C_MspInit+0xb8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d004      	beq.n	8001d12 <HAL_I2C_MspInit+0x22>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8001d08:	4a28      	ldr	r2, [pc, #160]	; (8001dac <HAL_I2C_MspInit+0xbc>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d027      	beq.n	8001d5e <HAL_I2C_MspInit+0x6e>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d0e:	b00b      	add	sp, #44	; 0x2c
 8001d10:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d12:	2500      	movs	r5, #0
 8001d14:	9501      	str	r5, [sp, #4]
 8001d16:	4c26      	ldr	r4, [pc, #152]	; (8001db0 <HAL_I2C_MspInit+0xc0>)
 8001d18:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d1a:	f043 0302 	orr.w	r3, r3, #2
 8001d1e:	6323      	str	r3, [r4, #48]	; 0x30
 8001d20:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001d2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d2e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d30:	2312      	movs	r3, #18
 8001d32:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d34:	2301      	movs	r3, #1
 8001d36:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d3c:	2304      	movs	r3, #4
 8001d3e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d40:	a905      	add	r1, sp, #20
 8001d42:	481c      	ldr	r0, [pc, #112]	; (8001db4 <HAL_I2C_MspInit+0xc4>)
 8001d44:	f001 fe7c 	bl	8003a40 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d48:	9502      	str	r5, [sp, #8]
 8001d4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d50:	6423      	str	r3, [r4, #64]	; 0x40
 8001d52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d58:	9302      	str	r3, [sp, #8]
 8001d5a:	9b02      	ldr	r3, [sp, #8]
 8001d5c:	e7d7      	b.n	8001d0e <HAL_I2C_MspInit+0x1e>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d5e:	2500      	movs	r5, #0
 8001d60:	9503      	str	r5, [sp, #12]
 8001d62:	4c13      	ldr	r4, [pc, #76]	; (8001db0 <HAL_I2C_MspInit+0xc0>)
 8001d64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d6a:	6323      	str	r3, [r4, #48]	; 0x30
 8001d6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d72:	9303      	str	r3, [sp, #12]
 8001d74:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin|I2C2_SDA_Pin;
 8001d76:	2330      	movs	r3, #48	; 0x30
 8001d78:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d7a:	2312      	movs	r3, #18
 8001d7c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d82:	2303      	movs	r3, #3
 8001d84:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d86:	2304      	movs	r3, #4
 8001d88:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d8a:	a905      	add	r1, sp, #20
 8001d8c:	480a      	ldr	r0, [pc, #40]	; (8001db8 <HAL_I2C_MspInit+0xc8>)
 8001d8e:	f001 fe57 	bl	8003a40 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d92:	9504      	str	r5, [sp, #16]
 8001d94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d9a:	6423      	str	r3, [r4, #64]	; 0x40
 8001d9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da2:	9304      	str	r3, [sp, #16]
 8001da4:	9b04      	ldr	r3, [sp, #16]
}
 8001da6:	e7b2      	b.n	8001d0e <HAL_I2C_MspInit+0x1e>
 8001da8:	40005400 	.word	0x40005400
 8001dac:	40005800 	.word	0x40005800
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020400 	.word	0x40020400
 8001db8:	40021c00 	.word	0x40021c00

08001dbc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001dbc:	b508      	push	{r3, lr}
  if(hi2c->Instance==I2C1)
 8001dbe:	6803      	ldr	r3, [r0, #0]
 8001dc0:	4a0e      	ldr	r2, [pc, #56]	; (8001dfc <HAL_I2C_MspDeInit+0x40>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d003      	beq.n	8001dce <HAL_I2C_MspDeInit+0x12>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <HAL_I2C_MspDeInit+0x44>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d00c      	beq.n	8001de6 <HAL_I2C_MspDeInit+0x2a>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001dcc:	bd08      	pop	{r3, pc}
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001dce:	f502 32f2 	add.w	r2, r2, #123904	; 0x1e400
 8001dd2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001dd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001dd8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, I2C1_SCL_Pin|I2C1_SDA_Pin);
 8001dda:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001dde:	4809      	ldr	r0, [pc, #36]	; (8001e04 <HAL_I2C_MspDeInit+0x48>)
 8001de0:	f001 ff1e 	bl	8003c20 <HAL_GPIO_DeInit>
 8001de4:	e7f2      	b.n	8001dcc <HAL_I2C_MspDeInit+0x10>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001de6:	f502 32f0 	add.w	r2, r2, #122880	; 0x1e000
 8001dea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001dec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001df0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, I2C2_SCL_Pin|I2C2_SDA_Pin);
 8001df2:	2130      	movs	r1, #48	; 0x30
 8001df4:	4804      	ldr	r0, [pc, #16]	; (8001e08 <HAL_I2C_MspDeInit+0x4c>)
 8001df6:	f001 ff13 	bl	8003c20 <HAL_GPIO_DeInit>
}
 8001dfa:	e7e7      	b.n	8001dcc <HAL_I2C_MspDeInit+0x10>
 8001dfc:	40005400 	.word	0x40005400
 8001e00:	40005800 	.word	0x40005800
 8001e04:	40020400 	.word	0x40020400
 8001e08:	40021c00 	.word	0x40021c00

08001e0c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e10:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e12:	2300      	movs	r3, #0
 8001e14:	9303      	str	r3, [sp, #12]
 8001e16:	9304      	str	r3, [sp, #16]
 8001e18:	9305      	str	r3, [sp, #20]
 8001e1a:	9306      	str	r3, [sp, #24]
 8001e1c:	9307      	str	r3, [sp, #28]
  if(hqspi->Instance==QUADSPI)
 8001e1e:	6802      	ldr	r2, [r0, #0]
 8001e20:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <HAL_QSPI_MspInit+0xb0>)
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d002      	beq.n	8001e2c <HAL_QSPI_MspInit+0x20>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001e26:	b008      	add	sp, #32
 8001e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001e2c:	2400      	movs	r4, #0
 8001e2e:	9400      	str	r4, [sp, #0]
 8001e30:	4b23      	ldr	r3, [pc, #140]	; (8001ec0 <HAL_QSPI_MspInit+0xb4>)
 8001e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e34:	f042 0202 	orr.w	r2, r2, #2
 8001e38:	639a      	str	r2, [r3, #56]	; 0x38
 8001e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e3c:	f002 0202 	and.w	r2, r2, #2
 8001e40:	9200      	str	r2, [sp, #0]
 8001e42:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e44:	9401      	str	r4, [sp, #4]
 8001e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e48:	f042 0202 	orr.w	r2, r2, #2
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e50:	f002 0202 	and.w	r2, r2, #2
 8001e54:	9201      	str	r2, [sp, #4]
 8001e56:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e58:	9402      	str	r4, [sp, #8]
 8001e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e5c:	f042 0220 	orr.w	r2, r2, #32
 8001e60:	631a      	str	r2, [r3, #48]	; 0x30
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	9302      	str	r3, [sp, #8]
 8001e6a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001e6c:	2340      	movs	r3, #64	; 0x40
 8001e6e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2602      	movs	r6, #2
 8001e72:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e74:	2503      	movs	r5, #3
 8001e76:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001e78:	f04f 080a 	mov.w	r8, #10
 8001e7c:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001e80:	a903      	add	r1, sp, #12
 8001e82:	4810      	ldr	r0, [pc, #64]	; (8001ec4 <HAL_QSPI_MspInit+0xb8>)
 8001e84:	f001 fddc 	bl	8003a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_BK1_IO3_Pin|QSPI_CLK_Pin;
 8001e88:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001e8c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001e94:	2309      	movs	r3, #9
 8001e96:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e98:	4f0b      	ldr	r7, [pc, #44]	; (8001ec8 <HAL_QSPI_MspInit+0xbc>)
 8001e9a:	a903      	add	r1, sp, #12
 8001e9c:	4638      	mov	r0, r7
 8001e9e:	f001 fdcf 	bl	8003a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001ea2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ea6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QSPI;
 8001eae:	f8cd 801c 	str.w	r8, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001eb2:	a903      	add	r1, sp, #12
 8001eb4:	4638      	mov	r0, r7
 8001eb6:	f001 fdc3 	bl	8003a40 <HAL_GPIO_Init>
}
 8001eba:	e7b4      	b.n	8001e26 <HAL_QSPI_MspInit+0x1a>
 8001ebc:	a0001000 	.word	0xa0001000
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	40021400 	.word	0x40021400

08001ecc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ece:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9303      	str	r3, [sp, #12]
 8001ed4:	9304      	str	r3, [sp, #16]
 8001ed6:	9305      	str	r3, [sp, #20]
 8001ed8:	9306      	str	r3, [sp, #24]
 8001eda:	9307      	str	r3, [sp, #28]
  if(hsd->Instance==SDIO)
 8001edc:	6802      	ldr	r2, [r0, #0]
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_SD_MspInit+0x94>)
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_SD_MspInit+0x1c>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001ee4:	b009      	add	sp, #36	; 0x24
 8001ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001ee8:	2400      	movs	r4, #0
 8001eea:	9400      	str	r4, [sp, #0]
 8001eec:	f503 3386 	add.w	r3, r3, #68608	; 0x10c00
 8001ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ef6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001efa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001efe:	9200      	str	r2, [sp, #0]
 8001f00:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f02:	9401      	str	r4, [sp, #4]
 8001f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f06:	f042 0204 	orr.w	r2, r2, #4
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f0e:	f002 0204 	and.w	r2, r2, #4
 8001f12:	9201      	str	r2, [sp, #4]
 8001f14:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f16:	9402      	str	r4, [sp, #8]
 8001f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f1a:	f042 0208 	orr.w	r2, r2, #8
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	9302      	str	r3, [sp, #8]
 8001f28:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = uSD_CLK_Pin|uSD_D3_Pin|uSD_D2_Pin|uSD_D1_Pin 
 8001f2a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001f2e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2702      	movs	r7, #2
 8001f32:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f34:	2603      	movs	r6, #3
 8001f36:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001f38:	250c      	movs	r5, #12
 8001f3a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f3c:	eb0d 0105 	add.w	r1, sp, r5
 8001f40:	4808      	ldr	r0, [pc, #32]	; (8001f64 <HAL_SD_MspInit+0x98>)
 8001f42:	f001 fd7d 	bl	8003a40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001f46:	2304      	movs	r3, #4
 8001f48:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001f50:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001f52:	eb0d 0105 	add.w	r1, sp, r5
 8001f56:	4804      	ldr	r0, [pc, #16]	; (8001f68 <HAL_SD_MspInit+0x9c>)
 8001f58:	f001 fd72 	bl	8003a40 <HAL_GPIO_Init>
}
 8001f5c:	e7c2      	b.n	8001ee4 <HAL_SD_MspInit+0x18>
 8001f5e:	bf00      	nop
 8001f60:	40012c00 	.word	0x40012c00
 8001f64:	40020800 	.word	0x40020800
 8001f68:	40020c00 	.word	0x40020c00

08001f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	2300      	movs	r3, #0
 8001f72:	9305      	str	r3, [sp, #20]
 8001f74:	9306      	str	r3, [sp, #24]
 8001f76:	9307      	str	r3, [sp, #28]
 8001f78:	9308      	str	r3, [sp, #32]
 8001f7a:	9309      	str	r3, [sp, #36]	; 0x24
  if(htim_base->Instance==TIM1)
 8001f7c:	6803      	ldr	r3, [r0, #0]
 8001f7e:	4a2a      	ldr	r2, [pc, #168]	; (8002028 <HAL_TIM_Base_MspInit+0xbc>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d007      	beq.n	8001f94 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001f84:	4a29      	ldr	r2, [pc, #164]	; (800202c <HAL_TIM_Base_MspInit+0xc0>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d011      	beq.n	8001fae <HAL_TIM_Base_MspInit+0x42>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8001f8a:	4a29      	ldr	r2, [pc, #164]	; (8002030 <HAL_TIM_Base_MspInit+0xc4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d022      	beq.n	8001fd6 <HAL_TIM_Base_MspInit+0x6a>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001f90:	b00a      	add	sp, #40	; 0x28
 8001f92:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f94:	2300      	movs	r3, #0
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	4b26      	ldr	r3, [pc, #152]	; (8002034 <HAL_TIM_Base_MspInit+0xc8>)
 8001f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f9c:	f042 0201 	orr.w	r2, r2, #1
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	9b01      	ldr	r3, [sp, #4]
 8001fac:	e7f0      	b.n	8001f90 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fae:	2200      	movs	r2, #0
 8001fb0:	9202      	str	r2, [sp, #8]
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <HAL_TIM_Base_MspInit+0xc8>)
 8001fb4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001fb6:	f041 0102 	orr.w	r1, r1, #2
 8001fba:	6419      	str	r1, [r3, #64]	; 0x40
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	9302      	str	r3, [sp, #8]
 8001fc4:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001fc6:	2105      	movs	r1, #5
 8001fc8:	201d      	movs	r0, #29
 8001fca:	f000 fd4d 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fce:	201d      	movs	r0, #29
 8001fd0:	f000 fd7e 	bl	8002ad0 <HAL_NVIC_EnableIRQ>
 8001fd4:	e7dc      	b.n	8001f90 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fd6:	2400      	movs	r4, #0
 8001fd8:	9403      	str	r4, [sp, #12]
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <HAL_TIM_Base_MspInit+0xc8>)
 8001fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fde:	f042 0204 	orr.w	r2, r2, #4
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40
 8001fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001fe6:	f002 0204 	and.w	r2, r2, #4
 8001fea:	9203      	str	r2, [sp, #12]
 8001fec:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fee:	9404      	str	r4, [sp, #16]
 8001ff0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ff2:	f042 0208 	orr.w	r2, r2, #8
 8001ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	9304      	str	r3, [sp, #16]
 8002000:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = MIC_CK_Pin;
 8002002:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002006:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002008:	2302      	movs	r3, #2
 800200a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800200c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(MIC_CK_GPIO_Port, &GPIO_InitStruct);
 800200e:	a905      	add	r1, sp, #20
 8002010:	4809      	ldr	r0, [pc, #36]	; (8002038 <HAL_TIM_Base_MspInit+0xcc>)
 8002012:	f001 fd15 	bl	8003a40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002016:	4622      	mov	r2, r4
 8002018:	2105      	movs	r1, #5
 800201a:	201e      	movs	r0, #30
 800201c:	f000 fd24 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002020:	201e      	movs	r0, #30
 8002022:	f000 fd55 	bl	8002ad0 <HAL_NVIC_EnableIRQ>
}
 8002026:	e7b3      	b.n	8001f90 <HAL_TIM_Base_MspInit+0x24>
 8002028:	40010000 	.word	0x40010000
 800202c:	40000400 	.word	0x40000400
 8002030:	40000800 	.word	0x40000800
 8002034:	40023800 	.word	0x40023800
 8002038:	40020c00 	.word	0x40020c00

0800203c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800203c:	b530      	push	{r4, r5, lr}
 800203e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	2300      	movs	r3, #0
 8002042:	9305      	str	r3, [sp, #20]
 8002044:	9306      	str	r3, [sp, #24]
 8002046:	9307      	str	r3, [sp, #28]
 8002048:	9308      	str	r3, [sp, #32]
 800204a:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART3)
 800204c:	6803      	ldr	r3, [r0, #0]
 800204e:	4a47      	ldr	r2, [pc, #284]	; (800216c <HAL_UART_MspInit+0x130>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d005      	beq.n	8002060 <HAL_UART_MspInit+0x24>
 8002054:	4604      	mov	r4, r0

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8002056:	4a46      	ldr	r2, [pc, #280]	; (8002170 <HAL_UART_MspInit+0x134>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d027      	beq.n	80020ac <HAL_UART_MspInit+0x70>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800205c:	b00b      	add	sp, #44	; 0x2c
 800205e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 8002060:	2100      	movs	r1, #0
 8002062:	9101      	str	r1, [sp, #4]
 8002064:	4b43      	ldr	r3, [pc, #268]	; (8002174 <HAL_UART_MspInit+0x138>)
 8002066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002068:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800206c:	641a      	str	r2, [r3, #64]	; 0x40
 800206e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002070:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8002074:	9201      	str	r2, [sp, #4]
 8002076:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002078:	9102      	str	r1, [sp, #8]
 800207a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800207c:	f042 0202 	orr.w	r2, r2, #2
 8002080:	631a      	str	r2, [r3, #48]	; 0x30
 8002082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	9302      	str	r3, [sp, #8]
 800208a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800208c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002090:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002096:	2301      	movs	r3, #1
 8002098:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209a:	2303      	movs	r3, #3
 800209c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800209e:	2307      	movs	r3, #7
 80020a0:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a2:	a905      	add	r1, sp, #20
 80020a4:	4834      	ldr	r0, [pc, #208]	; (8002178 <HAL_UART_MspInit+0x13c>)
 80020a6:	f001 fccb 	bl	8003a40 <HAL_GPIO_Init>
 80020aa:	e7d7      	b.n	800205c <HAL_UART_MspInit+0x20>
    __HAL_RCC_USART6_CLK_ENABLE();
 80020ac:	2500      	movs	r5, #0
 80020ae:	9503      	str	r5, [sp, #12]
 80020b0:	4b30      	ldr	r3, [pc, #192]	; (8002174 <HAL_UART_MspInit+0x138>)
 80020b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020b4:	f042 0220 	orr.w	r2, r2, #32
 80020b8:	645a      	str	r2, [r3, #68]	; 0x44
 80020ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020bc:	f002 0220 	and.w	r2, r2, #32
 80020c0:	9203      	str	r2, [sp, #12]
 80020c2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80020c4:	9504      	str	r5, [sp, #16]
 80020c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d4:	9304      	str	r3, [sp, #16]
 80020d6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = ARDUINO_USART6_TX_Pin|USART6_RX_Pin;
 80020d8:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80020dc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e2:	2303      	movs	r3, #3
 80020e4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80020e6:	2308      	movs	r3, #8
 80020e8:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020ea:	a905      	add	r1, sp, #20
 80020ec:	4823      	ldr	r0, [pc, #140]	; (800217c <HAL_UART_MspInit+0x140>)
 80020ee:	f001 fca7 	bl	8003a40 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80020f2:	4823      	ldr	r0, [pc, #140]	; (8002180 <HAL_UART_MspInit+0x144>)
 80020f4:	4b23      	ldr	r3, [pc, #140]	; (8002184 <HAL_UART_MspInit+0x148>)
 80020f6:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80020f8:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 80020fc:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020fe:	6085      	str	r5, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002100:	60c5      	str	r5, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002106:	6103      	str	r3, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002108:	6145      	str	r5, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800210a:	6185      	str	r5, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 800210c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002110:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002116:	6203      	str	r3, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002118:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800211a:	f000 fd85 	bl	8002c28 <HAL_DMA_Init>
 800211e:	b9f8      	cbnz	r0, 8002160 <HAL_UART_MspInit+0x124>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002120:	4b17      	ldr	r3, [pc, #92]	; (8002180 <HAL_UART_MspInit+0x144>)
 8002122:	6363      	str	r3, [r4, #52]	; 0x34
 8002124:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002126:	4818      	ldr	r0, [pc, #96]	; (8002188 <HAL_UART_MspInit+0x14c>)
 8002128:	4b18      	ldr	r3, [pc, #96]	; (800218c <HAL_UART_MspInit+0x150>)
 800212a:	6003      	str	r3, [r0, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800212c:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8002130:	6043      	str	r3, [r0, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002132:	2340      	movs	r3, #64	; 0x40
 8002134:	6083      	str	r3, [r0, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	60c3      	str	r3, [r0, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800213a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800213e:	6102      	str	r2, [r0, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002140:	6143      	str	r3, [r0, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002142:	6183      	str	r3, [r0, #24]
    hdma_usart6_tx.Init.Mode = DMA_CIRCULAR;
 8002144:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002148:	61c2      	str	r2, [r0, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800214a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800214e:	6202      	str	r2, [r0, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002150:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002152:	f000 fd69 	bl	8002c28 <HAL_DMA_Init>
 8002156:	b930      	cbnz	r0, 8002166 <HAL_UART_MspInit+0x12a>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <HAL_UART_MspInit+0x14c>)
 800215a:	6323      	str	r3, [r4, #48]	; 0x30
 800215c:	639c      	str	r4, [r3, #56]	; 0x38
}
 800215e:	e77d      	b.n	800205c <HAL_UART_MspInit+0x20>
      Error_Handler();
 8002160:	f7ff fd90 	bl	8001c84 <Error_Handler>
 8002164:	e7dc      	b.n	8002120 <HAL_UART_MspInit+0xe4>
      Error_Handler();
 8002166:	f7ff fd8d 	bl	8001c84 <Error_Handler>
 800216a:	e7f5      	b.n	8002158 <HAL_UART_MspInit+0x11c>
 800216c:	40004800 	.word	0x40004800
 8002170:	40011400 	.word	0x40011400
 8002174:	40023800 	.word	0x40023800
 8002178:	40020400 	.word	0x40020400
 800217c:	40021800 	.word	0x40021800
 8002180:	2002fd9c 	.word	0x2002fd9c
 8002184:	40026428 	.word	0x40026428
 8002188:	2002ff18 	.word	0x2002ff18
 800218c:	400264a0 	.word	0x400264a0

08002190 <HAL_SAI_MspInit>:
void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8002190:	6802      	ldr	r2, [r0, #0]
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_SAI_MspInit+0x78>)
 8002194:	429a      	cmp	r2, r3
 8002196:	d000      	beq.n	800219a <HAL_SAI_MspInit+0xa>
 8002198:	4770      	bx	lr
{
 800219a:	b570      	push	{r4, r5, r6, lr}
 800219c:	b086      	sub	sp, #24
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 800219e:	4b1b      	ldr	r3, [pc, #108]	; (800220c <HAL_SAI_MspInit+0x7c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	b95b      	cbnz	r3, 80021bc <HAL_SAI_MspInit+0x2c>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80021a4:	2200      	movs	r2, #0
 80021a6:	9200      	str	r2, [sp, #0]
 80021a8:	4a19      	ldr	r2, [pc, #100]	; (8002210 <HAL_SAI_MspInit+0x80>)
 80021aa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80021ac:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80021b0:	6451      	str	r1, [r2, #68]	; 0x44
 80021b2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021b4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80021b8:	9200      	str	r2, [sp, #0]
 80021ba:	9a00      	ldr	r2, [sp, #0]
    }
    SAI1_client ++;
 80021bc:	3301      	adds	r3, #1
 80021be:	4a13      	ldr	r2, [pc, #76]	; (800220c <HAL_SAI_MspInit+0x7c>)
 80021c0:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PD6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A 
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_SCKA_Pin;
 80021c2:	2330      	movs	r3, #48	; 0x30
 80021c4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c6:	2602      	movs	r6, #2
 80021c8:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ca:	2400      	movs	r4, #0
 80021cc:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ce:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80021d0:	2506      	movs	r5, #6
 80021d2:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021d4:	a901      	add	r1, sp, #4
 80021d6:	480f      	ldr	r0, [pc, #60]	; (8002214 <HAL_SAI_MspInit+0x84>)
 80021d8:	f001 fc32 	bl	8003a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MIC_DATA_Pin;
 80021dc:	2340      	movs	r3, #64	; 0x40
 80021de:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e0:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80021e6:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(MIC_DATA_GPIO_Port, &GPIO_InitStruct);
 80021e8:	a901      	add	r1, sp, #4
 80021ea:	480b      	ldr	r0, [pc, #44]	; (8002218 <HAL_SAI_MspInit+0x88>)
 80021ec:	f001 fc28 	bl	8003a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80021fa:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 80021fc:	a901      	add	r1, sp, #4
 80021fe:	4807      	ldr	r0, [pc, #28]	; (800221c <HAL_SAI_MspInit+0x8c>)
 8002200:	f001 fc1e 	bl	8003a40 <HAL_GPIO_Init>

    }
}
 8002204:	b006      	add	sp, #24
 8002206:	bd70      	pop	{r4, r5, r6, pc}
 8002208:	40015804 	.word	0x40015804
 800220c:	200004b0 	.word	0x200004b0
 8002210:	40023800 	.word	0x40023800
 8002214:	40021000 	.word	0x40021000
 8002218:	40020c00 	.word	0x40020c00
 800221c:	40021800 	.word	0x40021800

08002220 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002220:	b510      	push	{r4, lr}
 8002222:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8002224:	2200      	movs	r2, #0
 8002226:	4601      	mov	r1, r0
 8002228:	2036      	movs	r0, #54	; 0x36
 800222a:	f000 fc1d 	bl	8002a68 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800222e:	2036      	movs	r0, #54	; 0x36
 8002230:	f000 fc4e 	bl	8002ad0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002234:	2400      	movs	r4, #0
 8002236:	9401      	str	r4, [sp, #4]
 8002238:	4b14      	ldr	r3, [pc, #80]	; (800228c <HAL_InitTick+0x6c>)
 800223a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800223c:	f042 0210 	orr.w	r2, r2, #16
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	f003 0310 	and.w	r3, r3, #16
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800224c:	a902      	add	r1, sp, #8
 800224e:	a803      	add	r0, sp, #12
 8002250:	f003 fb1e 	bl	8005890 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002254:	f003 fafc 	bl	8005850 <HAL_RCC_GetPCLK1Freq>
 8002258:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800225a:	480d      	ldr	r0, [pc, #52]	; (8002290 <HAL_InitTick+0x70>)
 800225c:	fba0 2303 	umull	r2, r3, r0, r3
 8002260:	0c9b      	lsrs	r3, r3, #18
 8002262:	3b01      	subs	r3, #1
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002264:	480b      	ldr	r0, [pc, #44]	; (8002294 <HAL_InitTick+0x74>)
 8002266:	4a0c      	ldr	r2, [pc, #48]	; (8002298 <HAL_InitTick+0x78>)
 8002268:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800226a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800226e:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002270:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8002272:	6104      	str	r4, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002274:	6084      	str	r4, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002276:	f004 fec1 	bl	8006ffc <HAL_TIM_Base_Init>
 800227a:	b110      	cbz	r0, 8002282 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }
  
  /* Return function status */
  return HAL_ERROR;
 800227c:	2001      	movs	r0, #1
}
 800227e:	b008      	add	sp, #32
 8002280:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim6);
 8002282:	4804      	ldr	r0, [pc, #16]	; (8002294 <HAL_InitTick+0x74>)
 8002284:	f004 fd83 	bl	8006d8e <HAL_TIM_Base_Start_IT>
 8002288:	e7f9      	b.n	800227e <HAL_InitTick+0x5e>
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	431bde83 	.word	0x431bde83
 8002294:	20030170 	.word	0x20030170
 8002298:	40001000 	.word	0x40001000

0800229c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800229c:	4770      	bx	lr

0800229e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229e:	e7fe      	b.n	800229e <HardFault_Handler>

080022a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a0:	e7fe      	b.n	80022a0 <MemManage_Handler>

080022a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022a2:	e7fe      	b.n	80022a2 <BusFault_Handler>

080022a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a4:	e7fe      	b.n	80022a4 <UsageFault_Handler>

080022a6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a6:	4770      	bx	lr

080022a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022aa:	4802      	ldr	r0, [pc, #8]	; (80022b4 <TIM3_IRQHandler+0xc>)
 80022ac:	f004 fd84 	bl	8006db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022b0:	bd08      	pop	{r3, pc}
 80022b2:	bf00      	nop
 80022b4:	2002fed8 	.word	0x2002fed8

080022b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022ba:	4802      	ldr	r0, [pc, #8]	; (80022c4 <TIM4_IRQHandler+0xc>)
 80022bc:	f004 fd7c 	bl	8006db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022c0:	bd08      	pop	{r3, pc}
 80022c2:	bf00      	nop
 80022c4:	2002fdfc 	.word	0x2002fdfc

080022c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80022c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022ca:	4802      	ldr	r0, [pc, #8]	; (80022d4 <TIM6_DAC_IRQHandler+0xc>)
 80022cc:	f004 fd74 	bl	8006db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80022d0:	bd08      	pop	{r3, pc}
 80022d2:	bf00      	nop
 80022d4:	20030170 	.word	0x20030170

080022d8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80022d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80022da:	4802      	ldr	r0, [pc, #8]	; (80022e4 <DMA2_Stream1_IRQHandler+0xc>)
 80022dc:	f000 fd40 	bl	8002d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80022e0:	bd08      	pop	{r3, pc}
 80022e2:	bf00      	nop
 80022e4:	2002fd9c 	.word	0x2002fd9c

080022e8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80022e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80022ea:	4802      	ldr	r0, [pc, #8]	; (80022f4 <DMA2_Stream6_IRQHandler+0xc>)
 80022ec:	f000 fd38 	bl	8002d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80022f0:	bd08      	pop	{r3, pc}
 80022f2:	bf00      	nop
 80022f4:	2002ff18 	.word	0x2002ff18

080022f8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80022f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80022fa:	4802      	ldr	r0, [pc, #8]	; (8002304 <LTDC_IRQHandler+0xc>)
 80022fc:	f002 ff0b 	bl	8005116 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002300:	bd08      	pop	{r3, pc}
 8002302:	bf00      	nop
 8002304:	20030644 	.word	0x20030644

08002308 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002308:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800230a:	4802      	ldr	r0, [pc, #8]	; (8002314 <DMA2D_IRQHandler+0xc>)
 800230c:	f000 fe47 	bl	8002f9e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002310:	bd08      	pop	{r3, pc}
 8002312:	bf00      	nop
 8002314:	200306ec 	.word	0x200306ec

08002318 <DSI_IRQHandler>:

/**
  * @brief This function handles DSI global interrupt.
  */
void DSI_IRQHandler(void)
{
 8002318:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 800231a:	4802      	ldr	r0, [pc, #8]	; (8002324 <DSI_IRQHandler+0xc>)
 800231c:	f001 f8a9 	bl	8003472 <HAL_DSI_IRQHandler>
  /* USER CODE BEGIN DSI_IRQn 1 */

  /* USER CODE END DSI_IRQn 1 */
}
 8002320:	bd08      	pop	{r3, pc}
 8002322:	bf00      	nop
 8002324:	20030628 	.word	0x20030628

08002328 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <SystemInit+0x18>)
 800232a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800232e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002336:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800233a:	609a      	str	r2, [r3, #8]
#endif
}
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	e000ed00 	.word	0xe000ed00

08002344 <UARTRECIVER>:
 *      Author: christiansager
 */
#include "main.h"
#include "UART_IO.h"
UART_HandleTypeDef huart6;
UARTRECIVER(){
 8002344:	b510      	push	{r4, lr}

	HAL_UART_DMAPause(&huart6);
 8002346:	4836      	ldr	r0, [pc, #216]	; (8002420 <UARTRECIVER+0xdc>)
 8002348:	f005 f91e 	bl	8007588 <HAL_UART_DMAPause>
	 for(int i = 0; i<RX_IN_SIZE;i++){
 800234c:	2300      	movs	r3, #0
 800234e:	e008      	b.n	8002362 <UARTRECIVER+0x1e>
		 UARTDATA[i]	= 0x00;
 8002350:	2100      	movs	r1, #0
 8002352:	4a34      	ldr	r2, [pc, #208]	; (8002424 <UARTRECIVER+0xe0>)
 8002354:	54d1      	strb	r1, [r2, r3]
		 UART_RECIVE_temp[i] = UART_RECIVE[i];
 8002356:	4a34      	ldr	r2, [pc, #208]	; (8002428 <UARTRECIVER+0xe4>)
 8002358:	5cd4      	ldrb	r4, [r2, r3]
 800235a:	4834      	ldr	r0, [pc, #208]	; (800242c <UARTRECIVER+0xe8>)
 800235c:	54c4      	strb	r4, [r0, r3]
		 UART_RECIVE[i]=0;
 800235e:	54d1      	strb	r1, [r2, r3]
	 for(int i = 0; i<RX_IN_SIZE;i++){
 8002360:	3301      	adds	r3, #1
 8002362:	2bc7      	cmp	r3, #199	; 0xc7
 8002364:	ddf4      	ble.n	8002350 <UARTRECIVER+0xc>
	 }

	 HAL_UART_DMAResume(&huart6);
 8002366:	482e      	ldr	r0, [pc, #184]	; (8002420 <UARTRECIVER+0xdc>)
 8002368:	f005 f946 	bl	80075f8 <HAL_UART_DMAResume>

	 int start = 0;
	 int offset = 0;
	   	    	     for(int i = 0; i<RX_IN_SIZE;i++){
 800236c:	2300      	movs	r3, #0
 800236e:	e02d      	b.n	80023cc <UARTRECIVER+0x88>
	   	    	    	 if (UART_RECIVE_temp[i] == '#' && UART_RECIVE_temp[i+1] == 's'&& UART_RECIVE_temp[i+2] == 't' &&UART_RECIVE_temp[i+3] == 'a'){
 8002370:	1c59      	adds	r1, r3, #1
 8002372:	482e      	ldr	r0, [pc, #184]	; (800242c <UARTRECIVER+0xe8>)
 8002374:	5c41      	ldrb	r1, [r0, r1]
 8002376:	2973      	cmp	r1, #115	; 0x73
 8002378:	d12e      	bne.n	80023d8 <UARTRECIVER+0x94>
 800237a:	1c99      	adds	r1, r3, #2
 800237c:	5c41      	ldrb	r1, [r0, r1]
 800237e:	2974      	cmp	r1, #116	; 0x74
 8002380:	d12a      	bne.n	80023d8 <UARTRECIVER+0x94>
 8002382:	1cd9      	adds	r1, r3, #3
 8002384:	5c41      	ldrb	r1, [r0, r1]
 8002386:	2961      	cmp	r1, #97	; 0x61
 8002388:	d126      	bne.n	80023d8 <UARTRECIVER+0x94>
 800238a:	e03d      	b.n	8002408 <UARTRECIVER+0xc4>
	   	    	    		   start = i; //found start index @start
	   	    	    		   break;
	   	    	    	 }
	   	    	    	 if (UART_RECIVE_temp[i] == '#' && UART_RECIVE_temp[i+1] == 's'&& UART_RECIVE_temp[i+2] == 't' &&UART_RECIVE_temp[i-RX_IN_SIZE+3] == 'a'){
 800238c:	1c59      	adds	r1, r3, #1
 800238e:	4827      	ldr	r0, [pc, #156]	; (800242c <UARTRECIVER+0xe8>)
 8002390:	5c41      	ldrb	r1, [r0, r1]
 8002392:	2973      	cmp	r1, #115	; 0x73
 8002394:	d122      	bne.n	80023dc <UARTRECIVER+0x98>
 8002396:	1c99      	adds	r1, r3, #2
 8002398:	5c41      	ldrb	r1, [r0, r1]
 800239a:	2974      	cmp	r1, #116	; 0x74
 800239c:	d11e      	bne.n	80023dc <UARTRECIVER+0x98>
 800239e:	f1a3 01c5 	sub.w	r1, r3, #197	; 0xc5
 80023a2:	5c41      	ldrb	r1, [r0, r1]
 80023a4:	2961      	cmp	r1, #97	; 0x61
 80023a6:	d119      	bne.n	80023dc <UARTRECIVER+0x98>
 80023a8:	e02e      	b.n	8002408 <UARTRECIVER+0xc4>
	   	    	    		   start = i; //found start index @start
	   	    	    		   break;
	   	    	    	 }
	   	    	    	 if (UART_RECIVE_temp[i] == '#' && UART_RECIVE_temp[i+1] == 's'&& UART_RECIVE_temp[i-RX_IN_SIZE+2] == 't' &&UART_RECIVE_temp[i-RX_IN_SIZE+3] == 'a'){
 80023aa:	1c59      	adds	r1, r3, #1
 80023ac:	481f      	ldr	r0, [pc, #124]	; (800242c <UARTRECIVER+0xe8>)
 80023ae:	5c41      	ldrb	r1, [r0, r1]
 80023b0:	2973      	cmp	r1, #115	; 0x73
 80023b2:	d115      	bne.n	80023e0 <UARTRECIVER+0x9c>
 80023b4:	f1a3 01c6 	sub.w	r1, r3, #198	; 0xc6
 80023b8:	5c41      	ldrb	r1, [r0, r1]
 80023ba:	2974      	cmp	r1, #116	; 0x74
 80023bc:	d110      	bne.n	80023e0 <UARTRECIVER+0x9c>
 80023be:	f1a3 01c5 	sub.w	r1, r3, #197	; 0xc5
 80023c2:	5c41      	ldrb	r1, [r0, r1]
 80023c4:	2961      	cmp	r1, #97	; 0x61
 80023c6:	d10b      	bne.n	80023e0 <UARTRECIVER+0x9c>
 80023c8:	e01e      	b.n	8002408 <UARTRECIVER+0xc4>
	   	    	     for(int i = 0; i<RX_IN_SIZE;i++){
 80023ca:	3301      	adds	r3, #1
 80023cc:	2bc7      	cmp	r3, #199	; 0xc7
 80023ce:	dc1a      	bgt.n	8002406 <UARTRECIVER+0xc2>
	   	    	    	 if (UART_RECIVE_temp[i] == '#' && UART_RECIVE_temp[i+1] == 's'&& UART_RECIVE_temp[i+2] == 't' &&UART_RECIVE_temp[i+3] == 'a'){
 80023d0:	4a16      	ldr	r2, [pc, #88]	; (800242c <UARTRECIVER+0xe8>)
 80023d2:	5cd2      	ldrb	r2, [r2, r3]
 80023d4:	2a23      	cmp	r2, #35	; 0x23
 80023d6:	d0cb      	beq.n	8002370 <UARTRECIVER+0x2c>
	   	    	    	 if (UART_RECIVE_temp[i] == '#' && UART_RECIVE_temp[i+1] == 's'&& UART_RECIVE_temp[i+2] == 't' &&UART_RECIVE_temp[i-RX_IN_SIZE+3] == 'a'){
 80023d8:	2a23      	cmp	r2, #35	; 0x23
 80023da:	d0d7      	beq.n	800238c <UARTRECIVER+0x48>
	   	    	    	 if (UART_RECIVE_temp[i] == '#' && UART_RECIVE_temp[i+1] == 's'&& UART_RECIVE_temp[i-RX_IN_SIZE+2] == 't' &&UART_RECIVE_temp[i-RX_IN_SIZE+3] == 'a'){
 80023dc:	2a23      	cmp	r2, #35	; 0x23
 80023de:	d0e4      	beq.n	80023aa <UARTRECIVER+0x66>
	   	    	    		   start = i; //found start index @start
	   	    	    		   break;
	   	    	    	 }
	   	    	    	 if (UART_RECIVE_temp[i] == '#' && UART_RECIVE_temp[i-RX_IN_SIZE+1] == 's'&& UART_RECIVE_temp[i-RX_IN_SIZE+2] == 't' &&UART_RECIVE_temp[i-RX_IN_SIZE+3] == 'a'){
 80023e0:	2a23      	cmp	r2, #35	; 0x23
 80023e2:	d1f2      	bne.n	80023ca <UARTRECIVER+0x86>
 80023e4:	f1a3 02c7 	sub.w	r2, r3, #199	; 0xc7
 80023e8:	4910      	ldr	r1, [pc, #64]	; (800242c <UARTRECIVER+0xe8>)
 80023ea:	5c8a      	ldrb	r2, [r1, r2]
 80023ec:	2a73      	cmp	r2, #115	; 0x73
 80023ee:	d1ec      	bne.n	80023ca <UARTRECIVER+0x86>
 80023f0:	f1a3 02c6 	sub.w	r2, r3, #198	; 0xc6
 80023f4:	5c8a      	ldrb	r2, [r1, r2]
 80023f6:	2a74      	cmp	r2, #116	; 0x74
 80023f8:	d1e7      	bne.n	80023ca <UARTRECIVER+0x86>
 80023fa:	f1a3 02c5 	sub.w	r2, r3, #197	; 0xc5
 80023fe:	5c8a      	ldrb	r2, [r1, r2]
 8002400:	2a61      	cmp	r2, #97	; 0x61
 8002402:	d1e2      	bne.n	80023ca <UARTRECIVER+0x86>
 8002404:	e000      	b.n	8002408 <UARTRECIVER+0xc4>
	 int start = 0;
 8002406:	2300      	movs	r3, #0
	   	    	    	 }

	   	    	     }


	   	    	    	 for (int i = 0; i< 100;i++){
 8002408:	2200      	movs	r2, #0
 800240a:	e005      	b.n	8002418 <UARTRECIVER+0xd4>
	   	    	    		UARTDATA[i] = UART_RECIVE_temp[i+start];
 800240c:	1899      	adds	r1, r3, r2
 800240e:	4807      	ldr	r0, [pc, #28]	; (800242c <UARTRECIVER+0xe8>)
 8002410:	5c40      	ldrb	r0, [r0, r1]
 8002412:	4904      	ldr	r1, [pc, #16]	; (8002424 <UARTRECIVER+0xe0>)
 8002414:	5488      	strb	r0, [r1, r2]
	   	    	    	 for (int i = 0; i< 100;i++){
 8002416:	3201      	adds	r2, #1
 8002418:	2a63      	cmp	r2, #99	; 0x63
 800241a:	ddf7      	ble.n	800240c <UARTRECIVER+0xc8>
	   	    	    	 }

}
 800241c:	bd10      	pop	{r4, pc}
 800241e:	bf00      	nop
 8002420:	20030058 	.word	0x20030058
 8002424:	2002e7cc 	.word	0x2002e7cc
 8002428:	2002e8c0 	.word	0x2002e8c0
 800242c:	2002eed8 	.word	0x2002eed8

08002430 <UARTSENDER>:


UARTSENDER(){
 8002430:	b508      	push	{r3, lr}
	HAL_UART_DMAPause(&huart6);
 8002432:	480b      	ldr	r0, [pc, #44]	; (8002460 <UARTSENDER+0x30>)
 8002434:	f005 f8a8 	bl	8007588 <HAL_UART_DMAPause>



	uint8_t checksum = 0;
	uint16_t checksum16 = 0;
	for(int i = 0; i < 98; i++) {
 8002438:	2200      	movs	r2, #0
	uint16_t checksum16 = 0;
 800243a:	4613      	mov	r3, r2
	for(int i = 0; i < 98; i++) {
 800243c:	e004      	b.n	8002448 <UARTSENDER+0x18>
			checksum += UART_TRANSFER[i];
			checksum16 += UART_TRANSFER[i];
 800243e:	4909      	ldr	r1, [pc, #36]	; (8002464 <UARTSENDER+0x34>)
 8002440:	5c89      	ldrb	r1, [r1, r2]
 8002442:	440b      	add	r3, r1
 8002444:	b29b      	uxth	r3, r3
	for(int i = 0; i < 98; i++) {
 8002446:	3201      	adds	r2, #1
 8002448:	2a61      	cmp	r2, #97	; 0x61
 800244a:	ddf8      	ble.n	800243e <UARTSENDER+0xe>
		  }
	  UART_TRANSFER[98]=checksum16 & 0x00FF; //low byte
 800244c:	4a05      	ldr	r2, [pc, #20]	; (8002464 <UARTSENDER+0x34>)
 800244e:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
	  UART_TRANSFER[99]=checksum16 >> 8; //high byte
 8002452:	0a1b      	lsrs	r3, r3, #8
 8002454:	f882 3063 	strb.w	r3, [r2, #99]	; 0x63



	HAL_UART_DMAResume(&huart6);
 8002458:	4801      	ldr	r0, [pc, #4]	; (8002460 <UARTSENDER+0x30>)
 800245a:	f005 f8cd 	bl	80075f8 <HAL_UART_DMAResume>

}
 800245e:	bd08      	pop	{r3, pc}
 8002460:	20030058 	.word	0x20030058
 8002464:	2002ed50 	.word	0x2002ed50

08002468 <ft6x06_Reset>:
  */
void ft6x06_Reset(uint16_t DeviceAddr)
{
  /* Do nothing */
  /* No software reset sequence available in FT6206 IC */
}
 8002468:	4770      	bx	lr

0800246a <ft6x06_TS_ITStatus>:
  */
uint8_t ft6x06_TS_ITStatus(uint16_t DeviceAddr)
{
  /* Always return 0 as feature not applicable to FT6206 */
  return 0;
}
 800246a:	2000      	movs	r0, #0
 800246c:	4770      	bx	lr

0800246e <ft6x06_TS_ClearIT>:
  * @retval None
  */
void ft6x06_TS_ClearIT(uint16_t DeviceAddr)
{
  /* Nothing to be done here for FT6206 */
}
 800246e:	4770      	bx	lr

08002470 <ft6x06_GetInstance>:
static uint8_t ft6x06_GetInstance(uint16_t DeviceAddr)
{
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 8002470:	2300      	movs	r3, #0
 8002472:	2b01      	cmp	r3, #1
 8002474:	d806      	bhi.n	8002484 <ft6x06_GetInstance+0x14>
  {
    if(ft6x06[idx] == DeviceAddr)
 8002476:	4a05      	ldr	r2, [pc, #20]	; (800248c <ft6x06_GetInstance+0x1c>)
 8002478:	5cd2      	ldrb	r2, [r2, r3]
 800247a:	4282      	cmp	r2, r0
 800247c:	d003      	beq.n	8002486 <ft6x06_GetInstance+0x16>
  for(idx = 0; idx < FT6x06_MAX_INSTANCE ; idx ++)
 800247e:	3301      	adds	r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	e7f6      	b.n	8002472 <ft6x06_GetInstance+0x2>
    {
      return idx; 
    }
  }
  
  return 0xFF;
 8002484:	23ff      	movs	r3, #255	; 0xff
}
 8002486:	4618      	mov	r0, r3
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	200004b4 	.word	0x200004b4

08002490 <ft6x06_Init>:
{  
 8002490:	b510      	push	{r4, lr}
 8002492:	4604      	mov	r4, r0
  instance = ft6x06_GetInstance(DeviceAddr);
 8002494:	f7ff ffec 	bl	8002470 <ft6x06_GetInstance>
  if(instance == 0xFF)
 8002498:	28ff      	cmp	r0, #255	; 0xff
 800249a:	d000      	beq.n	800249e <ft6x06_Init+0xe>
}
 800249c:	bd10      	pop	{r4, pc}
    empty = ft6x06_GetInstance(0);
 800249e:	2000      	movs	r0, #0
 80024a0:	f7ff ffe6 	bl	8002470 <ft6x06_GetInstance>
    if(empty < FT6x06_MAX_INSTANCE)
 80024a4:	2801      	cmp	r0, #1
 80024a6:	d8f9      	bhi.n	800249c <ft6x06_Init+0xc>
      ft6x06[empty] = DeviceAddr;
 80024a8:	4b02      	ldr	r3, [pc, #8]	; (80024b4 <ft6x06_Init+0x24>)
 80024aa:	541c      	strb	r4, [r3, r0]
      TS_IO_Init(); 
 80024ac:	f00c fb42 	bl	800eb34 <TS_IO_Init>
}
 80024b0:	e7f4      	b.n	800249c <ft6x06_Init+0xc>
 80024b2:	bf00      	nop
 80024b4:	200004b4 	.word	0x200004b4

080024b8 <ft6x06_ReadID>:
{
 80024b8:	b510      	push	{r4, lr}
 80024ba:	4604      	mov	r4, r0
  TS_IO_Init();
 80024bc:	f00c fb3a 	bl	800eb34 <TS_IO_Init>
  return (TS_IO_Read(DeviceAddr, FT6206_CHIP_ID_REG));
 80024c0:	21a8      	movs	r1, #168	; 0xa8
 80024c2:	b2e0      	uxtb	r0, r4
 80024c4:	f00c fb3e 	bl	800eb44 <TS_IO_Read>
}
 80024c8:	bd10      	pop	{r4, pc}
	...

080024cc <ft6x06_TS_DetectTouch>:
{
 80024cc:	b500      	push	{lr}
 80024ce:	b083      	sub	sp, #12
  volatile uint8_t nbTouch = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f88d 3007 	strb.w	r3, [sp, #7]
  nbTouch = TS_IO_Read(DeviceAddr, FT6206_TD_STAT_REG);
 80024d6:	2102      	movs	r1, #2
 80024d8:	b2c0      	uxtb	r0, r0
 80024da:	f00c fb33 	bl	800eb44 <TS_IO_Read>
 80024de:	f88d 0007 	strb.w	r0, [sp, #7]
  nbTouch &= FT6206_TD_STAT_MASK;
 80024e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80024e6:	f003 030f 	and.w	r3, r3, #15
 80024ea:	f88d 3007 	strb.w	r3, [sp, #7]
  if(nbTouch > FT6206_MAX_DETECTABLE_TOUCH)
 80024ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d902      	bls.n	80024fe <ft6x06_TS_DetectTouch+0x32>
    nbTouch = 0;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f88d 3007 	strb.w	r3, [sp, #7]
  ft6x06_handle.currActiveTouchNb = nbTouch;
 80024fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002502:	4b04      	ldr	r3, [pc, #16]	; (8002514 <ft6x06_TS_DetectTouch+0x48>)
 8002504:	715a      	strb	r2, [r3, #5]
  ft6x06_handle.currActiveTouchIdx = 0;
 8002506:	2200      	movs	r2, #0
 8002508:	719a      	strb	r2, [r3, #6]
  return(nbTouch);
 800250a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800250e:	b003      	add	sp, #12
 8002510:	f85d fb04 	ldr.w	pc, [sp], #4
 8002514:	200004b4 	.word	0x200004b4

08002518 <ft6x06_TS_GetXY>:
{
 8002518:	b570      	push	{r4, r5, r6, lr}
 800251a:	b082      	sub	sp, #8
  if(ft6x06_handle.currActiveTouchIdx < ft6x06_handle.currActiveTouchNb)
 800251c:	4b16      	ldr	r3, [pc, #88]	; (8002578 <ft6x06_TS_GetXY+0x60>)
 800251e:	799d      	ldrb	r5, [r3, #6]
 8002520:	795b      	ldrb	r3, [r3, #5]
 8002522:	429d      	cmp	r5, r3
 8002524:	d222      	bcs.n	800256c <ft6x06_TS_GetXY+0x54>
    switch(ft6x06_handle.currActiveTouchIdx)
 8002526:	b32d      	cbz	r5, 8002574 <ft6x06_TS_GetXY+0x5c>
 8002528:	2d01      	cmp	r5, #1
 800252a:	d021      	beq.n	8002570 <ft6x06_TS_GetXY+0x58>
  uint8_t regAddress = 0;
 800252c:	2600      	movs	r6, #0
 800252e:	4614      	mov	r4, r2
 8002530:	460d      	mov	r5, r1
    TS_IO_ReadMultiple(DeviceAddr, regAddress, dataxy, sizeof(dataxy)); 
 8002532:	2304      	movs	r3, #4
 8002534:	eb0d 0203 	add.w	r2, sp, r3
 8002538:	4631      	mov	r1, r6
 800253a:	b2c0      	uxtb	r0, r0
 800253c:	f00c fb06 	bl	800eb4c <TS_IO_ReadMultiple>
    *X = ((dataxy[0] & FT6206_MSB_MASK) << 8) | (dataxy[1] & FT6206_LSB_MASK);
 8002540:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002544:	021b      	lsls	r3, r3, #8
 8002546:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800254a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800254e:	4313      	orrs	r3, r2
 8002550:	802b      	strh	r3, [r5, #0]
    *Y = ((dataxy[2] & FT6206_MSB_MASK) << 8) | (dataxy[3] & FT6206_LSB_MASK);
 8002552:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800255c:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8002560:	4313      	orrs	r3, r2
 8002562:	8023      	strh	r3, [r4, #0]
    ft6x06_handle.currActiveTouchIdx++;
 8002564:	4a04      	ldr	r2, [pc, #16]	; (8002578 <ft6x06_TS_GetXY+0x60>)
 8002566:	7993      	ldrb	r3, [r2, #6]
 8002568:	3301      	adds	r3, #1
 800256a:	7193      	strb	r3, [r2, #6]
}
 800256c:	b002      	add	sp, #8
 800256e:	bd70      	pop	{r4, r5, r6, pc}
      regAddress = FT6206_P2_XH_REG; 
 8002570:	2609      	movs	r6, #9
      break;
 8002572:	e7dc      	b.n	800252e <ft6x06_TS_GetXY+0x16>
      regAddress = FT6206_P1_XH_REG; 
 8002574:	2603      	movs	r6, #3
 8002576:	e7da      	b.n	800252e <ft6x06_TS_GetXY+0x16>
 8002578:	200004b4 	.word	0x200004b4

0800257c <ft6x06_TS_EnableIT>:
{
 800257c:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800257e:	2201      	movs	r2, #1
 8002580:	21a4      	movs	r1, #164	; 0xa4
 8002582:	b2c0      	uxtb	r0, r0
 8002584:	f00c fada 	bl	800eb3c <TS_IO_Write>
}
 8002588:	bd08      	pop	{r3, pc}

0800258a <ft6x06_TS_DisableIT>:
{
 800258a:	b508      	push	{r3, lr}
  TS_IO_Write(DeviceAddr, FT6206_GMODE_REG, regValue);
 800258c:	2200      	movs	r2, #0
 800258e:	21a4      	movs	r1, #164	; 0xa4
 8002590:	b2c0      	uxtb	r0, r0
 8002592:	f00c fad3 	bl	800eb3c <TS_IO_Write>
}
 8002596:	bd08      	pop	{r3, pc}

08002598 <ft6x06_TS_Start>:
{
 8002598:	b508      	push	{r3, lr}
  ft6x06_TS_DisableIT(DeviceAddr);
 800259a:	f7ff fff6 	bl	800258a <ft6x06_TS_DisableIT>
}
 800259e:	bd08      	pop	{r3, pc}

080025a0 <OTM8009A_Init>:
  * @param  hdsi_eval : pointer on DSI configuration structure
  * @param  hdsivideo_handle : pointer on DSI video mode configuration structure
  * @retval Status
  */
uint8_t OTM8009A_Init(uint32_t ColorCoding, uint32_t orientation)
{
 80025a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025a4:	b083      	sub	sp, #12
 80025a6:	4683      	mov	fp, r0
 80025a8:	9101      	str	r1, [sp, #4]
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80025aa:	4cf8      	ldr	r4, [pc, #992]	; (800298c <OTM8009A_Init+0x3ec>)
 80025ac:	4621      	mov	r1, r4
 80025ae:	2000      	movs	r0, #0
 80025b0:	f00b fe1a 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData1);
 80025b4:	1d21      	adds	r1, r4, #4
 80025b6:	2003      	movs	r0, #3
 80025b8:	f00b fe16 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* Enter ORISE Command 2 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2); /* Shift address to 0x80 */
 80025bc:	f104 0508 	add.w	r5, r4, #8
 80025c0:	4629      	mov	r1, r5
 80025c2:	2000      	movs	r0, #0
 80025c4:	f00b fe10 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData2);
 80025c8:	f104 010c 	add.w	r1, r4, #12
 80025cc:	2002      	movs	r0, #2
 80025ce:	f00b fe0b 	bl	800e1e8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 80025d2:	4629      	mov	r1, r5
 80025d4:	2000      	movs	r0, #0
 80025d6:	f00b fe07 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData3);
 80025da:	f104 0110 	add.w	r1, r4, #16
 80025de:	2000      	movs	r0, #0
 80025e0:	f00b fe02 	bl	800e1e8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80025e4:	200a      	movs	r0, #10
 80025e6:	f00b fe1b 	bl	800e220 <OTM8009A_IO_Delay>
  /* Not documented */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData4);
 80025ea:	f104 0114 	add.w	r1, r4, #20
 80025ee:	2000      	movs	r0, #0
 80025f0:	f00b fdfa 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData5);
 80025f4:	f104 0118 	add.w	r1, r4, #24
 80025f8:	2000      	movs	r0, #0
 80025fa:	f00b fdf5 	bl	800e1e8 <DSI_IO_WriteCmd>
  OTM8009A_IO_Delay(10);
 80025fe:	200a      	movs	r0, #10
 8002600:	f00b fe0e 	bl	800e220 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////

  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData6);
 8002604:	f104 011c 	add.w	r1, r4, #28
 8002608:	2000      	movs	r0, #0
 800260a:	f00b fded 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData7);
 800260e:	f104 0120 	add.w	r1, r4, #32
 8002612:	2000      	movs	r0, #0
 8002614:	f00b fde8 	bl	800e1e8 <DSI_IO_WriteCmd>
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData8);
 8002618:	f104 0124 	add.w	r1, r4, #36	; 0x24
 800261c:	2000      	movs	r0, #0
 800261e:	f00b fde3 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 8002622:	f104 0728 	add.w	r7, r4, #40	; 0x28
 8002626:	4639      	mov	r1, r7
 8002628:	2000      	movs	r0, #0
 800262a:	f00b fddd 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData10);
 800262e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8002632:	2000      	movs	r0, #0
 8002634:	f00b fdd8 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData11);
 8002638:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800263c:	2000      	movs	r0, #0
 800263e:	f00b fdd3 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002642:	4621      	mov	r1, r4
 8002644:	2000      	movs	r0, #0
 8002646:	f00b fdcf 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData12);
 800264a:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800264e:	2000      	movs	r0, #0
 8002650:	f00b fdca 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 8002654:	f104 0a38 	add.w	sl, r4, #56	; 0x38
 8002658:	4651      	mov	r1, sl
 800265a:	2000      	movs	r0, #0
 800265c:	f00b fdc4 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData14);
 8002660:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8002664:	2000      	movs	r0, #0
 8002666:	f00b fdbf 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* Video mode internal */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 800266a:	f104 0640 	add.w	r6, r4, #64	; 0x40
 800266e:	4631      	mov	r1, r6
 8002670:	2000      	movs	r0, #0
 8002672:	f00b fdb9 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData16);
 8002676:	f104 0144 	add.w	r1, r4, #68	; 0x44
 800267a:	2000      	movs	r0, #0
 800267c:	f00b fdb4 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData17);
 8002680:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8002684:	2000      	movs	r0, #0
 8002686:	f00b fdaf 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData18);
 800268a:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 800268e:	2000      	movs	r0, #0
 8002690:	f00b fdaa 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData19);
 8002694:	f104 0150 	add.w	r1, r4, #80	; 0x50
 8002698:	2000      	movs	r0, #0
 800269a:	f00b fda5 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData9);
 800269e:	4639      	mov	r1, r7
 80026a0:	2000      	movs	r0, #0
 80026a2:	f00b fda1 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* GVDD/NGVDD settings */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80026a6:	4621      	mov	r1, r4
 80026a8:	2000      	movs	r0, #0
 80026aa:	f00b fd9d 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData5);
 80026ae:	f104 0154 	add.w	r1, r4, #84	; 0x54
 80026b2:	2002      	movs	r0, #2
 80026b4:	f00b fd98 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData20);
 80026b8:	f104 0158 	add.w	r1, r4, #88	; 0x58
 80026bc:	2000      	movs	r0, #0
 80026be:	f00b fd93 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData21);
 80026c2:	f104 015c 	add.w	r1, r4, #92	; 0x5c
 80026c6:	2000      	movs	r0, #0
 80026c8:	f00b fd8e 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* Panel display timing Setting 3 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData22);
 80026cc:	f104 0160 	add.w	r1, r4, #96	; 0x60
 80026d0:	2000      	movs	r0, #0
 80026d2:	f00b fd89 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData23);
 80026d6:	f104 0164 	add.w	r1, r4, #100	; 0x64
 80026da:	2000      	movs	r0, #0
 80026dc:	f00b fd84 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* Power control 1 */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData24);
 80026e0:	f104 0168 	add.w	r1, r4, #104	; 0x68
 80026e4:	2000      	movs	r0, #0
 80026e6:	f00b fd7f 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData25);
 80026ea:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 80026ee:	2000      	movs	r0, #0
 80026f0:	f00b fd7a 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* Source driver precharge */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 80026f4:	4651      	mov	r1, sl
 80026f6:	2000      	movs	r0, #0
 80026f8:	f00b fd76 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData26);
 80026fc:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8002700:	2000      	movs	r0, #0
 8002702:	f00b fd71 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData15);
 8002706:	4631      	mov	r1, r6
 8002708:	2000      	movs	r0, #0
 800270a:	f00b fd6d 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData27);
 800270e:	f104 0174 	add.w	r1, r4, #116	; 0x74
 8002712:	2000      	movs	r0, #0
 8002714:	f00b fd68 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData28);
 8002718:	f104 0178 	add.w	r1, r4, #120	; 0x78
 800271c:	2000      	movs	r0, #0
 800271e:	f00b fd63 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 2, (uint8_t *)lcdRegData6);
 8002722:	f104 017c 	add.w	r1, r4, #124	; 0x7c
 8002726:	2002      	movs	r0, #2
 8002728:	f00b fd5e 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* GOAVST */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800272c:	4629      	mov	r1, r5
 800272e:	2000      	movs	r0, #0
 8002730:	f00b fd5a 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 6, (uint8_t *)lcdRegData7);
 8002734:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8002738:	2006      	movs	r0, #6
 800273a:	f00b fd55 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 800273e:	f104 0988 	add.w	r9, r4, #136	; 0x88
 8002742:	4649      	mov	r1, r9
 8002744:	2000      	movs	r0, #0
 8002746:	f00b fd4f 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData8);
 800274a:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 800274e:	200e      	movs	r0, #14
 8002750:	f00b fd4a 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002754:	f104 089c 	add.w	r8, r4, #156	; 0x9c
 8002758:	4641      	mov	r1, r8
 800275a:	2000      	movs	r0, #0
 800275c:	f00b fd44 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 14, (uint8_t *)lcdRegData9);
 8002760:	f104 01a0 	add.w	r1, r4, #160	; 0xa0
 8002764:	200e      	movs	r0, #14
 8002766:	f00b fd3f 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 800276a:	f104 07b0 	add.w	r7, r4, #176	; 0xb0
 800276e:	4639      	mov	r1, r7
 8002770:	2000      	movs	r0, #0
 8002772:	f00b fd39 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData10);
 8002776:	f104 01b4 	add.w	r1, r4, #180	; 0xb4
 800277a:	200a      	movs	r0, #10
 800277c:	f00b fd34 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002780:	f104 06c0 	add.w	r6, r4, #192	; 0xc0
 8002784:	4631      	mov	r1, r6
 8002786:	2000      	movs	r0, #0
 8002788:	f00b fd2e 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData46);
 800278c:	f104 01c4 	add.w	r1, r4, #196	; 0xc4
 8002790:	2000      	movs	r0, #0
 8002792:	f00b fd29 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 8002796:	4629      	mov	r1, r5
 8002798:	2000      	movs	r0, #0
 800279a:	f00b fd25 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData11);
 800279e:	f104 01c8 	add.w	r1, r4, #200	; 0xc8
 80027a2:	200a      	movs	r0, #10
 80027a4:	f00b fd20 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 80027a8:	f104 01d4 	add.w	r1, r4, #212	; 0xd4
 80027ac:	2000      	movs	r0, #0
 80027ae:	f00b fd1b 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData12);
 80027b2:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
 80027b6:	200f      	movs	r0, #15
 80027b8:	f00b fd16 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 80027bc:	4649      	mov	r1, r9
 80027be:	2000      	movs	r0, #0
 80027c0:	f00b fd12 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData13);
 80027c4:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
 80027c8:	200f      	movs	r0, #15
 80027ca:	f00b fd0d 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 80027ce:	4641      	mov	r1, r8
 80027d0:	2000      	movs	r0, #0
 80027d2:	f00b fd09 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData14);
 80027d6:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
 80027da:	200a      	movs	r0, #10
 80027dc:	f00b fd04 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 80027e0:	4639      	mov	r1, r7
 80027e2:	2000      	movs	r0, #0
 80027e4:	f00b fd00 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData15);
 80027e8:	f504 7182 	add.w	r1, r4, #260	; 0x104
 80027ec:	200f      	movs	r0, #15
 80027ee:	f00b fcfb 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 80027f2:	4631      	mov	r1, r6
 80027f4:	2000      	movs	r0, #0
 80027f6:	f00b fcf7 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData16);
 80027fa:	f504 718a 	add.w	r1, r4, #276	; 0x114
 80027fe:	200f      	movs	r0, #15
 8002800:	f00b fcf2 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData34);
 8002804:	f504 7192 	add.w	r1, r4, #292	; 0x124
 8002808:	2000      	movs	r0, #0
 800280a:	f00b fced 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData17);
 800280e:	f504 7194 	add.w	r1, r4, #296	; 0x128
 8002812:	200a      	movs	r0, #10
 8002814:	f00b fce8 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData35);
 8002818:	f504 719a 	add.w	r1, r4, #308	; 0x134
 800281c:	2000      	movs	r0, #0
 800281e:	f00b fce3 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData18);
 8002822:	f504 719c 	add.w	r1, r4, #312	; 0x138
 8002826:	200a      	movs	r0, #10
 8002828:	f00b fcde 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData2);
 800282c:	4629      	mov	r1, r5
 800282e:	2000      	movs	r0, #0
 8002830:	f00b fcda 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData19);
 8002834:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 8002838:	200a      	movs	r0, #10
 800283a:	f00b fcd5 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData33);
 800283e:	f104 01d4 	add.w	r1, r4, #212	; 0xd4
 8002842:	2000      	movs	r0, #0
 8002844:	f00b fcd0 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData20);
 8002848:	f504 71a8 	add.w	r1, r4, #336	; 0x150
 800284c:	200f      	movs	r0, #15
 800284e:	f00b fccb 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData29);
 8002852:	4649      	mov	r1, r9
 8002854:	2000      	movs	r0, #0
 8002856:	f00b fcc7 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData21);
 800285a:	f504 71b0 	add.w	r1, r4, #352	; 0x160
 800285e:	200f      	movs	r0, #15
 8002860:	f00b fcc2 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData30);
 8002864:	4641      	mov	r1, r8
 8002866:	2000      	movs	r0, #0
 8002868:	f00b fcbe 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 10, (uint8_t *)lcdRegData22);
 800286c:	f504 71b8 	add.w	r1, r4, #368	; 0x170
 8002870:	200a      	movs	r0, #10
 8002872:	f00b fcb9 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData31);
 8002876:	4639      	mov	r1, r7
 8002878:	2000      	movs	r0, #0
 800287a:	f00b fcb5 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData23);
 800287e:	f504 71be 	add.w	r1, r4, #380	; 0x17c
 8002882:	200f      	movs	r0, #15
 8002884:	f00b fcb0 	bl	800e1e8 <DSI_IO_WriteCmd>

  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData32);
 8002888:	4631      	mov	r1, r6
 800288a:	2000      	movs	r0, #0
 800288c:	f00b fcac 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 15, (uint8_t *)lcdRegData24);
 8002890:	f504 71c6 	add.w	r1, r4, #396	; 0x18c
 8002894:	200f      	movs	r0, #15
 8002896:	f00b fca7 	bl	800e1e8 <DSI_IO_WriteCmd>

  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData13);
 800289a:	4651      	mov	r1, sl
 800289c:	2000      	movs	r0, #0
 800289e:	f00b fca3 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData47);
 80028a2:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
 80028a6:	2000      	movs	r0, #0
 80028a8:	f00b fc9e 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData48);
 80028ac:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
 80028b0:	2000      	movs	r0, #0
 80028b2:	f00b fc99 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData49);
 80028b6:	f504 71d2 	add.w	r1, r4, #420	; 0x1a4
 80028ba:	2000      	movs	r0, #0
 80028bc:	f00b fc94 	bl	800e1e8 <DSI_IO_WriteCmd>
  /////////////////////////////////////////////////////////////////////////////

  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData50);
 80028c0:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
 80028c4:	2000      	movs	r0, #0
 80028c6:	f00b fc8f 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData51);
 80028ca:	f504 71d6 	add.w	r1, r4, #428	; 0x1ac
 80028ce:	2000      	movs	r0, #0
 80028d0:	f00b fc8a 	bl	800e1e8 <DSI_IO_WriteCmd>
  
  /* Exit CMD2 mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80028d4:	4621      	mov	r1, r4
 80028d6:	2000      	movs	r0, #0
 80028d8:	f00b fc86 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 3, (uint8_t *)lcdRegData25);
 80028dc:	f504 71d8 	add.w	r1, r4, #432	; 0x1b0
 80028e0:	2003      	movs	r0, #3
 80028e2:	f00b fc81 	bl	800e1e8 <DSI_IO_WriteCmd>
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */

  /* NOP - goes back to DCS std command ? */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80028e6:	4621      	mov	r1, r4
 80028e8:	2000      	movs	r0, #0
 80028ea:	f00b fc7d 	bl	800e1e8 <DSI_IO_WriteCmd>
          
  /* Gamma correction 2.2+ table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 80028ee:	4621      	mov	r1, r4
 80028f0:	2000      	movs	r0, #0
 80028f2:	f00b fc79 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData3);
 80028f6:	f504 71da 	add.w	r1, r4, #436	; 0x1b4
 80028fa:	2010      	movs	r0, #16
 80028fc:	f00b fc74 	bl	800e1e8 <DSI_IO_WriteCmd>
  
  /* Gamma correction 2.2- table (HSDT possible) */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002900:	4621      	mov	r1, r4
 8002902:	2000      	movs	r0, #0
 8002904:	f00b fc70 	bl	800e1e8 <DSI_IO_WriteCmd>
  DSI_IO_WriteCmd( 16, (uint8_t *)lcdRegData4);
 8002908:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
 800290c:	2010      	movs	r0, #16
 800290e:	f00b fc6b 	bl	800e1e8 <DSI_IO_WriteCmd>
          
  /* Send Sleep Out command to display : no parameter */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData36);
 8002912:	f504 71ee 	add.w	r1, r4, #476	; 0x1dc
 8002916:	2000      	movs	r0, #0
 8002918:	f00b fc66 	bl	800e1e8 <DSI_IO_WriteCmd>
  
  /* Wait for sleep out exit */
  OTM8009A_IO_Delay(120);
 800291c:	2078      	movs	r0, #120	; 0x78
 800291e:	f00b fc7f 	bl	800e220 <OTM8009A_IO_Delay>

  switch(ColorCoding)
 8002922:	f1bb 0f00 	cmp.w	fp, #0
 8002926:	d033      	beq.n	8002990 <OTM8009A_Init+0x3f0>
 8002928:	f1bb 0f02 	cmp.w	fp, #2
 800292c:	d104      	bne.n	8002938 <OTM8009A_Init+0x398>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData37);
 800292e:	f504 71f0 	add.w	r1, r4, #480	; 0x1e0
 8002932:	2000      	movs	r0, #0
 8002934:	f00b fc58 	bl	800e1e8 <DSI_IO_WriteCmd>
    break;
  }

  /* Send command to configure display in landscape orientation mode. By default
      the orientation mode is portrait  */
  if(orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8002938:	9b01      	ldr	r3, [sp, #4]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d02d      	beq.n	800299a <OTM8009A_Init+0x3fa>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness), 0xFF is highest Brightness, try 0x7F : intermediate value */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData40);
 800293e:	4c13      	ldr	r4, [pc, #76]	; (800298c <OTM8009A_Init+0x3ec>)
 8002940:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
 8002944:	2000      	movs	r0, #0
 8002946:	f00b fc4f 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData41);
 800294a:	f504 7100 	add.w	r1, r4, #512	; 0x200
 800294e:	2000      	movs	r0, #0
 8002950:	f00b fc4a 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData42);
 8002954:	f504 7101 	add.w	r1, r4, #516	; 0x204
 8002958:	2000      	movs	r0, #0
 800295a:	f00b fc45 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* defaut is 0 (lowest Brightness), 0xFF is highest Brightness */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData43);
 800295e:	f504 7102 	add.w	r1, r4, #520	; 0x208
 8002962:	2000      	movs	r0, #0
 8002964:	f00b fc40 	bl	800e1e8 <DSI_IO_WriteCmd>

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData44);
 8002968:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800296c:	2000      	movs	r0, #0
 800296e:	f00b fc3b 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* NOP command */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData1);
 8002972:	4621      	mov	r1, r4
 8002974:	2000      	movs	r0, #0
 8002976:	f00b fc37 	bl	800e1e8 <DSI_IO_WriteCmd>

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData45);
 800297a:	f504 7104 	add.w	r1, r4, #528	; 0x210
 800297e:	2000      	movs	r0, #0
 8002980:	f00b fc32 	bl	800e1e8 <DSI_IO_WriteCmd>

  return 0;
}
 8002984:	2000      	movs	r0, #0
 8002986:	b003      	add	sp, #12
 8002988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800298c:	0801ed0c 	.word	0x0801ed0c
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData38);
 8002990:	490a      	ldr	r1, [pc, #40]	; (80029bc <OTM8009A_Init+0x41c>)
 8002992:	2000      	movs	r0, #0
 8002994:	f00b fc28 	bl	800e1e8 <DSI_IO_WriteCmd>
    break;
 8002998:	e7ce      	b.n	8002938 <OTM8009A_Init+0x398>
    DSI_IO_WriteCmd(0, (uint8_t *)ShortRegData39);
 800299a:	4c09      	ldr	r4, [pc, #36]	; (80029c0 <OTM8009A_Init+0x420>)
 800299c:	f504 71f4 	add.w	r1, r4, #488	; 0x1e8
 80029a0:	2000      	movs	r0, #0
 80029a2:	f00b fc21 	bl	800e1e8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData27);
 80029a6:	f504 71f6 	add.w	r1, r4, #492	; 0x1ec
 80029aa:	2004      	movs	r0, #4
 80029ac:	f00b fc1c 	bl	800e1e8 <DSI_IO_WriteCmd>
    DSI_IO_WriteCmd( 4, (uint8_t *)lcdRegData28);
 80029b0:	f504 71fa 	add.w	r1, r4, #500	; 0x1f4
 80029b4:	2004      	movs	r0, #4
 80029b6:	f00b fc17 	bl	800e1e8 <DSI_IO_WriteCmd>
 80029ba:	e7c0      	b.n	800293e <OTM8009A_Init+0x39e>
 80029bc:	0801eef0 	.word	0x0801eef0
 80029c0:	0801ed0c 	.word	0x0801ed0c

080029c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c4:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029c6:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_Init+0x30>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ce:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029d6:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029de:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e0:	2003      	movs	r0, #3
 80029e2:	f000 f82f 	bl	8002a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7ff fc1a 	bl	8002220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029ec:	f7ff f94c 	bl	8001c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80029f0:	2000      	movs	r0, #0
 80029f2:	bd08      	pop	{r3, pc}
 80029f4:	40023c00 	.word	0x40023c00

080029f8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80029f8:	4a03      	ldr	r2, [pc, #12]	; (8002a08 <HAL_IncTick+0x10>)
 80029fa:	6811      	ldr	r1, [r2, #0]
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_IncTick+0x14>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	440b      	add	r3, r1
 8002a02:	6013      	str	r3, [r2, #0]
}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	200301b0 	.word	0x200301b0
 8002a0c:	20000048 	.word	0x20000048

08002a10 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a10:	4b01      	ldr	r3, [pc, #4]	; (8002a18 <HAL_GetTick+0x8>)
 8002a12:	6818      	ldr	r0, [r3, #0]
}
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	200301b0 	.word	0x200301b0

08002a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a1c:	b538      	push	{r3, r4, r5, lr}
 8002a1e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002a20:	f7ff fff6 	bl	8002a10 <HAL_GetTick>
 8002a24:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a26:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8002a2a:	d002      	beq.n	8002a32 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <HAL_Delay+0x24>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a32:	f7ff ffed 	bl	8002a10 <HAL_GetTick>
 8002a36:	1b40      	subs	r0, r0, r5
 8002a38:	42a0      	cmp	r0, r4
 8002a3a:	d3fa      	bcc.n	8002a32 <HAL_Delay+0x16>
  {
  }
}
 8002a3c:	bd38      	pop	{r3, r4, r5, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000048 	.word	0x20000048

08002a44 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a44:	4a07      	ldr	r2, [pc, #28]	; (8002a64 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002a46:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a4c:	041b      	lsls	r3, r3, #16
 8002a4e:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a50:	0200      	lsls	r0, r0, #8
 8002a52:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a56:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8002a58:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8002a5c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002a60:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00

08002a68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a68:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a6a:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <HAL_NVIC_SetPriority+0x60>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a72:	f1c3 0407 	rsb	r4, r3, #7
 8002a76:	2c04      	cmp	r4, #4
 8002a78:	bf28      	it	cs
 8002a7a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a7c:	1d1d      	adds	r5, r3, #4
 8002a7e:	2d06      	cmp	r5, #6
 8002a80:	d918      	bls.n	8002ab4 <HAL_NVIC_SetPriority+0x4c>
 8002a82:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8002a88:	fa05 f404 	lsl.w	r4, r5, r4
 8002a8c:	ea21 0104 	bic.w	r1, r1, r4
 8002a90:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a92:	fa05 f303 	lsl.w	r3, r5, r3
 8002a96:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a9a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002a9c:	2800      	cmp	r0, #0
 8002a9e:	db0b      	blt.n	8002ab8 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa0:	0109      	lsls	r1, r1, #4
 8002aa2:	b2c9      	uxtb	r1, r1
 8002aa4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002aa8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002aac:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ab0:	bc30      	pop	{r4, r5}
 8002ab2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	e7e5      	b.n	8002a84 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab8:	f000 000f 	and.w	r0, r0, #15
 8002abc:	0109      	lsls	r1, r1, #4
 8002abe:	b2c9      	uxtb	r1, r1
 8002ac0:	4b02      	ldr	r3, [pc, #8]	; (8002acc <HAL_NVIC_SetPriority+0x64>)
 8002ac2:	5419      	strb	r1, [r3, r0]
 8002ac4:	e7f4      	b.n	8002ab0 <HAL_NVIC_SetPriority+0x48>
 8002ac6:	bf00      	nop
 8002ac8:	e000ed00 	.word	0xe000ed00
 8002acc:	e000ed14 	.word	0xe000ed14

08002ad0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	db07      	blt.n	8002ae4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ad4:	f000 021f 	and.w	r2, r0, #31
 8002ad8:	0940      	lsrs	r0, r0, #5
 8002ada:	2301      	movs	r3, #1
 8002adc:	4093      	lsls	r3, r2
 8002ade:	4a02      	ldr	r2, [pc, #8]	; (8002ae8 <HAL_NVIC_EnableIRQ+0x18>)
 8002ae0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	e000e100 	.word	0xe000e100

08002aec <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002aec:	2800      	cmp	r0, #0
 8002aee:	db0c      	blt.n	8002b0a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af0:	f000 021f 	and.w	r2, r0, #31
 8002af4:	0940      	lsrs	r0, r0, #5
 8002af6:	2301      	movs	r3, #1
 8002af8:	4093      	lsls	r3, r2
 8002afa:	3020      	adds	r0, #32
 8002afc:	4a03      	ldr	r2, [pc, #12]	; (8002b0c <HAL_NVIC_DisableIRQ+0x20>)
 8002afe:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002b06:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002b0a:	4770      	bx	lr
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002b10:	b158      	cbz	r0, 8002b2a <HAL_CRC_Init+0x1a>
{
 8002b12:	b510      	push	{r4, lr}
 8002b14:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002b16:	7943      	ldrb	r3, [r0, #5]
 8002b18:	b11b      	cbz	r3, 8002b22 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8002b1e:	2000      	movs	r0, #0
}
 8002b20:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8002b22:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8002b24:	f7ff f8cc 	bl	8001cc0 <HAL_CRC_MspInit>
 8002b28:	e7f7      	b.n	8002b1a <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8002b2a:	2001      	movs	r0, #1
}
 8002b2c:	4770      	bx	lr

08002b2e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b2e:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b30:	6805      	ldr	r5, [r0, #0]
 8002b32:	682c      	ldr	r4, [r5, #0]
 8002b34:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8002b38:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b3a:	6804      	ldr	r4, [r0, #0]
 8002b3c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b3e:	6883      	ldr	r3, [r0, #8]
 8002b40:	2b40      	cmp	r3, #64	; 0x40
 8002b42:	d005      	beq.n	8002b50 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8002b44:	6803      	ldr	r3, [r0, #0]
 8002b46:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8002b48:	6803      	ldr	r3, [r0, #0]
 8002b4a:	60da      	str	r2, [r3, #12]
  }
}
 8002b4c:	bc30      	pop	{r4, r5}
 8002b4e:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8002b50:	6803      	ldr	r3, [r0, #0]
 8002b52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002b54:	6803      	ldr	r3, [r0, #0]
 8002b56:	60d9      	str	r1, [r3, #12]
 8002b58:	e7f8      	b.n	8002b4c <DMA_SetConfig+0x1e>
	...

08002b5c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b5c:	6802      	ldr	r2, [r0, #0]
 8002b5e:	b2d3      	uxtb	r3, r2
 8002b60:	3b10      	subs	r3, #16
 8002b62:	490b      	ldr	r1, [pc, #44]	; (8002b90 <DMA_CalcBaseAndBitshift+0x34>)
 8002b64:	fba1 1303 	umull	r1, r3, r1, r3
 8002b68:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b6a:	490a      	ldr	r1, [pc, #40]	; (8002b94 <DMA_CalcBaseAndBitshift+0x38>)
 8002b6c:	5cc9      	ldrb	r1, [r1, r3]
 8002b6e:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d806      	bhi.n	8002b82 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b74:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8002b78:	f022 0203 	bic.w	r2, r2, #3
 8002b7c:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8002b7e:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002b80:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b82:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8002b86:	f022 0203 	bic.w	r2, r2, #3
 8002b8a:	3204      	adds	r2, #4
 8002b8c:	6582      	str	r2, [r0, #88]	; 0x58
 8002b8e:	e7f6      	b.n	8002b7e <DMA_CalcBaseAndBitshift+0x22>
 8002b90:	aaaaaaab 	.word	0xaaaaaaab
 8002b94:	0801ef20 	.word	0x0801ef20

08002b98 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b98:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b9a:	6982      	ldr	r2, [r0, #24]
 8002b9c:	b992      	cbnz	r2, 8002bc4 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d00a      	beq.n	8002bb8 <DMA_CheckFifoParam+0x20>
 8002ba2:	b11b      	cbz	r3, 8002bac <DMA_CheckFifoParam+0x14>
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d001      	beq.n	8002bac <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8002ba8:	2000      	movs	r0, #0
 8002baa:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002bae:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002bb2:	d12c      	bne.n	8002c0e <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bb8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002bba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bbe:	d028      	beq.n	8002c12 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bc4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002bc8:	d005      	beq.n	8002bd6 <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d929      	bls.n	8002c22 <DMA_CheckFifoParam+0x8a>
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d015      	beq.n	8002bfe <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	4770      	bx	lr
    switch (tmp)
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d803      	bhi.n	8002be2 <DMA_CheckFifoParam+0x4a>
 8002bda:	e8df f003 	tbb	[pc, r3]
 8002bde:	041c      	.short	0x041c
 8002be0:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8002be2:	2000      	movs	r0, #0
 8002be4:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002be6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002be8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002bec:	d115      	bne.n	8002c1a <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8002bee:	2000      	movs	r0, #0
 8002bf0:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bf2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002bf4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bf8:	d011      	beq.n	8002c1e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bfe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002c00:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002c04:	d001      	beq.n	8002c0a <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8002c06:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8002c08:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	4770      	bx	lr
        status = HAL_ERROR;
 8002c0e:	2001      	movs	r0, #1
 8002c10:	4770      	bx	lr
        status = HAL_ERROR;
 8002c12:	2001      	movs	r0, #1
 8002c14:	4770      	bx	lr
      status = HAL_ERROR;
 8002c16:	2001      	movs	r0, #1
 8002c18:	4770      	bx	lr
        status = HAL_ERROR;
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	4770      	bx	lr
        status = HAL_ERROR;
 8002c1e:	2001      	movs	r0, #1
 8002c20:	4770      	bx	lr
      status = HAL_ERROR;
 8002c22:	2001      	movs	r0, #1
 8002c24:	4770      	bx	lr
	...

08002c28 <HAL_DMA_Init>:
{
 8002c28:	b570      	push	{r4, r5, r6, lr}
 8002c2a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002c2c:	f7ff fef0 	bl	8002a10 <HAL_GetTick>
  if(hdma == NULL)
 8002c30:	2c00      	cmp	r4, #0
 8002c32:	d05b      	beq.n	8002cec <HAL_DMA_Init+0xc4>
 8002c34:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8002c36:	2300      	movs	r3, #0
 8002c38:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002c42:	6822      	ldr	r2, [r4, #0]
 8002c44:	6813      	ldr	r3, [r2, #0]
 8002c46:	f023 0301 	bic.w	r3, r3, #1
 8002c4a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c4c:	6823      	ldr	r3, [r4, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	f012 0f01 	tst.w	r2, #1
 8002c54:	d00a      	beq.n	8002c6c <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c56:	f7ff fedb 	bl	8002a10 <HAL_GetTick>
 8002c5a:	1b40      	subs	r0, r0, r5
 8002c5c:	2805      	cmp	r0, #5
 8002c5e:	d9f5      	bls.n	8002c4c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c60:	2320      	movs	r3, #32
 8002c62:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c64:	2003      	movs	r0, #3
 8002c66:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002c6a:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8002c6c:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c6e:	4820      	ldr	r0, [pc, #128]	; (8002cf0 <HAL_DMA_Init+0xc8>)
 8002c70:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c72:	6861      	ldr	r1, [r4, #4]
 8002c74:	68a2      	ldr	r2, [r4, #8]
 8002c76:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c78:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c7a:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7c:	6921      	ldr	r1, [r4, #16]
 8002c7e:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c80:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c82:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c84:	69a1      	ldr	r1, [r4, #24]
 8002c86:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c88:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8a:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c8c:	6a21      	ldr	r1, [r4, #32]
 8002c8e:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c90:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c92:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002c94:	2904      	cmp	r1, #4
 8002c96:	d01e      	beq.n	8002cd6 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8002c98:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002c9a:	6826      	ldr	r6, [r4, #0]
 8002c9c:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c9e:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8002ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ca4:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d107      	bne.n	8002cba <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8002caa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002cac:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002cb0:	b11b      	cbz	r3, 8002cba <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f7ff ff70 	bl	8002b98 <DMA_CheckFifoParam>
 8002cb8:	b990      	cbnz	r0, 8002ce0 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8002cba:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	f7ff ff4d 	bl	8002b5c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002cc4:	233f      	movs	r3, #63	; 0x3f
 8002cc6:	4093      	lsls	r3, r2
 8002cc8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cca:	2000      	movs	r0, #0
 8002ccc:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002cd4:	e7c9      	b.n	8002c6a <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cd6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002cd8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002cda:	4301      	orrs	r1, r0
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	e7db      	b.n	8002c98 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ce0:	2340      	movs	r3, #64	; 0x40
 8002ce2:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8002cea:	e7be      	b.n	8002c6a <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8002cec:	2001      	movs	r0, #1
 8002cee:	e7bc      	b.n	8002c6a <HAL_DMA_Init+0x42>
 8002cf0:	f010803f 	.word	0xf010803f

08002cf4 <HAL_DMA_Start_IT>:
{
 8002cf4:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cf6:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002cf8:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8002cfc:	2c01      	cmp	r4, #1
 8002cfe:	d02c      	beq.n	8002d5a <HAL_DMA_Start_IT+0x66>
 8002d00:	2401      	movs	r4, #1
 8002d02:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d06:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8002d0a:	b2e4      	uxtb	r4, r4
 8002d0c:	2c01      	cmp	r4, #1
 8002d0e:	d004      	beq.n	8002d1a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8002d10:	2300      	movs	r3, #0
 8002d12:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8002d16:	2002      	movs	r0, #2
}
 8002d18:	bd38      	pop	{r3, r4, r5, pc}
 8002d1a:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d1c:	2002      	movs	r0, #2
 8002d1e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d22:	2000      	movs	r0, #0
 8002d24:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d26:	4620      	mov	r0, r4
 8002d28:	f7ff ff01 	bl	8002b2e <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d2c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d2e:	233f      	movs	r3, #63	; 0x3f
 8002d30:	4093      	lsls	r3, r2
 8002d32:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d34:	6822      	ldr	r2, [r4, #0]
 8002d36:	6813      	ldr	r3, [r2, #0]
 8002d38:	f043 0316 	orr.w	r3, r3, #22
 8002d3c:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002d3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d40:	b123      	cbz	r3, 8002d4c <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d42:	6822      	ldr	r2, [r4, #0]
 8002d44:	6813      	ldr	r3, [r2, #0]
 8002d46:	f043 0308 	orr.w	r3, r3, #8
 8002d4a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8002d4c:	6822      	ldr	r2, [r4, #0]
 8002d4e:	6813      	ldr	r3, [r2, #0]
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d56:	2000      	movs	r0, #0
 8002d58:	e7de      	b.n	8002d18 <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8002d5a:	2002      	movs	r0, #2
 8002d5c:	e7dc      	b.n	8002d18 <HAL_DMA_Start_IT+0x24>
	...

08002d60 <HAL_DMA_IRQHandler>:
{
 8002d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d62:	b083      	sub	sp, #12
 8002d64:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d6a:	4b72      	ldr	r3, [pc, #456]	; (8002f34 <HAL_DMA_IRQHandler+0x1d4>)
 8002d6c:	681d      	ldr	r5, [r3, #0]
 8002d6e:	4b72      	ldr	r3, [pc, #456]	; (8002f38 <HAL_DMA_IRQHandler+0x1d8>)
 8002d70:	fba3 3505 	umull	r3, r5, r3, r5
 8002d74:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d76:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8002d78:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d7a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002d7c:	2308      	movs	r3, #8
 8002d7e:	4093      	lsls	r3, r2
 8002d80:	4233      	tst	r3, r6
 8002d82:	d010      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d84:	6803      	ldr	r3, [r0, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	f012 0f04 	tst.w	r2, #4
 8002d8c:	d00b      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	f022 0204 	bic.w	r2, r2, #4
 8002d94:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d96:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002d98:	2308      	movs	r3, #8
 8002d9a:	4093      	lsls	r3, r2
 8002d9c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d9e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002da0:	f043 0301 	orr.w	r3, r3, #1
 8002da4:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002da6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002da8:	2301      	movs	r3, #1
 8002daa:	4093      	lsls	r3, r2
 8002dac:	4233      	tst	r3, r6
 8002dae:	d009      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002db0:	6822      	ldr	r2, [r4, #0]
 8002db2:	6952      	ldr	r2, [r2, #20]
 8002db4:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002db8:	d004      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dba:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dbc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002dbe:	f043 0302 	orr.w	r3, r3, #2
 8002dc2:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	4093      	lsls	r3, r2
 8002dca:	4233      	tst	r3, r6
 8002dcc:	d009      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dce:	6822      	ldr	r2, [r4, #0]
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	f012 0f02 	tst.w	r2, #2
 8002dd6:	d004      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dd8:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dda:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ddc:	f043 0304 	orr.w	r3, r3, #4
 8002de0:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002de2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002de4:	2310      	movs	r3, #16
 8002de6:	4093      	lsls	r3, r2
 8002de8:	4233      	tst	r3, r6
 8002dea:	d024      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dec:	6822      	ldr	r2, [r4, #0]
 8002dee:	6812      	ldr	r2, [r2, #0]
 8002df0:	f012 0f08 	tst.w	r2, #8
 8002df4:	d01f      	beq.n	8002e36 <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002df6:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002df8:	6823      	ldr	r3, [r4, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002e00:	d00d      	beq.n	8002e1e <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002e08:	d104      	bne.n	8002e14 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8002e0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e0c:	b19b      	cbz	r3, 8002e36 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8002e0e:	4620      	mov	r0, r4
 8002e10:	4798      	blx	r3
 8002e12:	e010      	b.n	8002e36 <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002e16:	b173      	cbz	r3, 8002e36 <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8002e18:	4620      	mov	r0, r4
 8002e1a:	4798      	blx	r3
 8002e1c:	e00b      	b.n	8002e36 <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002e24:	d103      	bne.n	8002e2e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	f022 0208 	bic.w	r2, r2, #8
 8002e2c:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002e2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e30:	b10b      	cbz	r3, 8002e36 <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8002e32:	4620      	mov	r0, r4
 8002e34:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e36:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002e38:	2320      	movs	r3, #32
 8002e3a:	4093      	lsls	r3, r2
 8002e3c:	4233      	tst	r3, r6
 8002e3e:	d055      	beq.n	8002eec <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e40:	6822      	ldr	r2, [r4, #0]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	f012 0f10 	tst.w	r2, #16
 8002e48:	d050      	beq.n	8002eec <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e4a:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e4c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b05      	cmp	r3, #5
 8002e54:	d00e      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e56:	6823      	ldr	r3, [r4, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002e5e:	d033      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8002e66:	d12a      	bne.n	8002ebe <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8002e68:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d03e      	beq.n	8002eec <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8002e6e:	4620      	mov	r0, r4
 8002e70:	4798      	blx	r3
 8002e72:	e03b      	b.n	8002eec <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e74:	6822      	ldr	r2, [r4, #0]
 8002e76:	6813      	ldr	r3, [r2, #0]
 8002e78:	f023 0316 	bic.w	r3, r3, #22
 8002e7c:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e7e:	6822      	ldr	r2, [r4, #0]
 8002e80:	6953      	ldr	r3, [r2, #20]
 8002e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e86:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e8a:	b1a3      	cbz	r3, 8002eb6 <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e8c:	6822      	ldr	r2, [r4, #0]
 8002e8e:	6813      	ldr	r3, [r2, #0]
 8002e90:	f023 0308 	bic.w	r3, r3, #8
 8002e94:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e96:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002e98:	233f      	movs	r3, #63	; 0x3f
 8002e9a:	4093      	lsls	r3, r2
 8002e9c:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002eaa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d03f      	beq.n	8002f30 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	4798      	blx	r3
 8002eb4:	e03c      	b.n	8002f30 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eb6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1e7      	bne.n	8002e8c <HAL_DMA_IRQHandler+0x12c>
 8002ebc:	e7eb      	b.n	8002e96 <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8002ebe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ec0:	b1a3      	cbz	r3, 8002eec <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8002ec2:	4620      	mov	r0, r4
 8002ec4:	4798      	blx	r3
 8002ec6:	e011      	b.n	8002eec <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002ece:	d109      	bne.n	8002ee4 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	f022 0210 	bic.w	r2, r2, #16
 8002ed6:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8002ee4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ee6:	b10b      	cbz	r3, 8002eec <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8002ee8:	4620      	mov	r0, r4
 8002eea:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002eec:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002eee:	b1fb      	cbz	r3, 8002f30 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ef0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002ef2:	f013 0f01 	tst.w	r3, #1
 8002ef6:	d017      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ef8:	2305      	movs	r3, #5
 8002efa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002efe:	6822      	ldr	r2, [r4, #0]
 8002f00:	6813      	ldr	r3, [r2, #0]
 8002f02:	f023 0301 	bic.w	r3, r3, #1
 8002f06:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002f08:	9b01      	ldr	r3, [sp, #4]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	9301      	str	r3, [sp, #4]
 8002f0e:	42ab      	cmp	r3, r5
 8002f10:	d804      	bhi.n	8002f1c <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f12:	6823      	ldr	r3, [r4, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f013 0f01 	tst.w	r3, #1
 8002f1a:	d1f5      	bne.n	8002f08 <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8002f28:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002f2a:	b10b      	cbz	r3, 8002f30 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8002f2c:	4620      	mov	r0, r4
 8002f2e:	4798      	blx	r3
}
 8002f30:	b003      	add	sp, #12
 8002f32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f34:	2000001c 	.word	0x2000001c
 8002f38:	1b4e81b5 	.word	0x1b4e81b5

08002f3c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002f3c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8002f3e:	4770      	bx	lr

08002f40 <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8002f40:	b348      	cbz	r0, 8002f96 <HAL_DMA2D_Init+0x56>
{
 8002f42:	b510      	push	{r4, lr}
 8002f44:	4604      	mov	r4, r0

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002f46:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002f4a:	b1fb      	cbz	r3, 8002f8c <HAL_DMA2D_Init+0x4c>
    HAL_DMA2D_MspInit(hdma2d);
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002f52:	6822      	ldr	r2, [r4, #0]
 8002f54:	6813      	ldr	r3, [r2, #0]
 8002f56:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002f5a:	6861      	ldr	r1, [r4, #4]
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002f60:	6822      	ldr	r2, [r4, #0]
 8002f62:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002f64:	f023 0307 	bic.w	r3, r3, #7
 8002f68:	68a1      	ldr	r1, [r4, #8]
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	6353      	str	r3, [r2, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002f6e:	6822      	ldr	r2, [r4, #0]
 8002f70:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002f72:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f76:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f7a:	68e1      	ldr	r1, [r4, #12]
 8002f7c:	430b      	orrs	r3, r1
 8002f7e:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002f80:	2000      	movs	r0, #0
 8002f82:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002f84:	2301      	movs	r3, #1
 8002f86:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
}
 8002f8a:	bd10      	pop	{r4, pc}
    hdma2d->Lock = HAL_UNLOCKED;
 8002f8c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002f90:	f00a fdba 	bl	800db08 <HAL_DMA2D_MspInit>
 8002f94:	e7da      	b.n	8002f4c <HAL_DMA2D_Init+0xc>
     return HAL_ERROR;
 8002f96:	2001      	movs	r0, #1
}
 8002f98:	4770      	bx	lr

08002f9a <HAL_DMA2D_LineEventCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002f9c:	4770      	bx	lr

08002f9e <HAL_DMA2D_IRQHandler>:
{
 8002f9e:	b570      	push	{r4, r5, r6, lr}
 8002fa0:	4604      	mov	r4, r0
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002fa2:	6803      	ldr	r3, [r0, #0]
 8002fa4:	685d      	ldr	r5, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002fa6:	681e      	ldr	r6, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002fa8:	f015 0f01 	tst.w	r5, #1
 8002fac:	d016      	beq.n	8002fdc <HAL_DMA2D_IRQHandler+0x3e>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002fae:	f416 7f80 	tst.w	r6, #256	; 0x100
 8002fb2:	d013      	beq.n	8002fdc <HAL_DMA2D_IRQHandler+0x3e>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fba:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002fbc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	63c3      	str	r3, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002fc4:	6803      	ldr	r3, [r0, #0]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002fca:	2304      	movs	r3, #4
 8002fcc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8002fd6:	6943      	ldr	r3, [r0, #20]
 8002fd8:	b103      	cbz	r3, 8002fdc <HAL_DMA2D_IRQHandler+0x3e>
        hdma2d->XferErrorCallback(hdma2d);
 8002fda:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002fdc:	f015 0f20 	tst.w	r5, #32
 8002fe0:	d018      	beq.n	8003014 <HAL_DMA2D_IRQHandler+0x76>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002fe2:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8002fe6:	d015      	beq.n	8003014 <HAL_DMA2D_IRQHandler+0x76>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002fe8:	6822      	ldr	r2, [r4, #0]
 8002fea:	6813      	ldr	r3, [r2, #0]
 8002fec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ff0:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002ff8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ffa:	f043 0302 	orr.w	r3, r3, #2
 8002ffe:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003000:	2304      	movs	r3, #4
 8003002:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8003006:	2300      	movs	r3, #0
 8003008:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 800300c:	6963      	ldr	r3, [r4, #20]
 800300e:	b10b      	cbz	r3, 8003014 <HAL_DMA2D_IRQHandler+0x76>
        hdma2d->XferErrorCallback(hdma2d);
 8003010:	4620      	mov	r0, r4
 8003012:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003014:	f015 0f08 	tst.w	r5, #8
 8003018:	d018      	beq.n	800304c <HAL_DMA2D_IRQHandler+0xae>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800301a:	f416 6f00 	tst.w	r6, #2048	; 0x800
 800301e:	d015      	beq.n	800304c <HAL_DMA2D_IRQHandler+0xae>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8003020:	6822      	ldr	r2, [r4, #0]
 8003022:	6813      	ldr	r3, [r2, #0]
 8003024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003028:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800302a:	6823      	ldr	r3, [r4, #0]
 800302c:	2208      	movs	r2, #8
 800302e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003030:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003032:	f043 0304 	orr.w	r3, r3, #4
 8003036:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003038:	2304      	movs	r3, #4
 800303a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800303e:	2300      	movs	r3, #0
 8003040:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 8003044:	6963      	ldr	r3, [r4, #20]
 8003046:	b10b      	cbz	r3, 800304c <HAL_DMA2D_IRQHandler+0xae>
        hdma2d->XferErrorCallback(hdma2d);
 8003048:	4620      	mov	r0, r4
 800304a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800304c:	f015 0f04 	tst.w	r5, #4
 8003050:	d002      	beq.n	8003058 <HAL_DMA2D_IRQHandler+0xba>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003052:	f416 6f80 	tst.w	r6, #1024	; 0x400
 8003056:	d120      	bne.n	800309a <HAL_DMA2D_IRQHandler+0xfc>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003058:	f015 0f02 	tst.w	r5, #2
 800305c:	d016      	beq.n	800308c <HAL_DMA2D_IRQHandler+0xee>
    if ((crflags & DMA2D_IT_TC) != 0U)
 800305e:	f416 7f00 	tst.w	r6, #512	; 0x200
 8003062:	d013      	beq.n	800308c <HAL_DMA2D_IRQHandler+0xee>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003064:	6822      	ldr	r2, [r4, #0]
 8003066:	6813      	ldr	r3, [r2, #0]
 8003068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800306c:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800306e:	6823      	ldr	r3, [r4, #0]
 8003070:	2202      	movs	r2, #2
 8003072:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003074:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003076:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003078:	2301      	movs	r3, #1
 800307a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 800307e:	2300      	movs	r3, #0
 8003080:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferCpltCallback != NULL)
 8003084:	6923      	ldr	r3, [r4, #16]
 8003086:	b10b      	cbz	r3, 800308c <HAL_DMA2D_IRQHandler+0xee>
        hdma2d->XferCpltCallback(hdma2d);
 8003088:	4620      	mov	r0, r4
 800308a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800308c:	f015 0f10 	tst.w	r5, #16
 8003090:	d002      	beq.n	8003098 <HAL_DMA2D_IRQHandler+0xfa>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003092:	f416 5f80 	tst.w	r6, #4096	; 0x1000
 8003096:	d10c      	bne.n	80030b2 <HAL_DMA2D_IRQHandler+0x114>
}
 8003098:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800309a:	6822      	ldr	r2, [r4, #0]
 800309c:	6813      	ldr	r3, [r2, #0]
 800309e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030a2:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	2204      	movs	r2, #4
 80030a8:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80030aa:	4620      	mov	r0, r4
 80030ac:	f7ff ff75 	bl	8002f9a <HAL_DMA2D_LineEventCallback>
 80030b0:	e7d2      	b.n	8003058 <HAL_DMA2D_IRQHandler+0xba>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80030b2:	6822      	ldr	r2, [r4, #0]
 80030b4:	6813      	ldr	r3, [r2, #0]
 80030b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030ba:	6013      	str	r3, [r2, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	2210      	movs	r2, #16
 80030c0:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80030c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030c4:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80030cc:	2300      	movs	r3, #0
 80030ce:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80030d2:	4620      	mov	r0, r4
 80030d4:	f7ff ff62 	bl	8002f9c <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 80030d8:	e7de      	b.n	8003098 <HAL_DMA2D_IRQHandler+0xfa>
	...

080030dc <HAL_DMA2D_ConfigLayer>:
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80030dc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d059      	beq.n	8003198 <HAL_DMA2D_ConfigLayer+0xbc>
{
 80030e4:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma2d);
 80030e6:	2301      	movs	r3, #1
 80030e8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80030ec:	2302      	movs	r3, #2
 80030ee:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80030f2:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80030f6:	69da      	ldr	r2, [r3, #28]
 80030f8:	1c8b      	adds	r3, r1, #2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	58c3      	ldr	r3, [r0, r3]
 80030fe:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003102:	3a09      	subs	r2, #9
 8003104:	2a01      	cmp	r2, #1
 8003106:	d91e      	bls.n	8003146 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003108:	1c8a      	adds	r2, r1, #2
 800310a:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 800310e:	6852      	ldr	r2, [r2, #4]
 8003110:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003114:	bb41      	cbnz	r1, 8003168 <HAL_DMA2D_ConfigLayer+0x8c>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003116:	6804      	ldr	r4, [r0, #0]
 8003118:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800311a:	4a20      	ldr	r2, [pc, #128]	; (800319c <HAL_DMA2D_ConfigLayer+0xc0>)
 800311c:	402a      	ands	r2, r5
 800311e:	4313      	orrs	r3, r2
 8003120:	6263      	str	r3, [r4, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003122:	6802      	ldr	r2, [r0, #0]
 8003124:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8003128:	699c      	ldr	r4, [r3, #24]
 800312a:	6194      	str	r4, [r2, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	3b09      	subs	r3, #9
 8003130:	2b01      	cmp	r3, #1
 8003132:	d910      	bls.n	8003156 <HAL_DMA2D_ConfigLayer+0x7a>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003134:	2301      	movs	r3, #1
 8003136:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800313a:	2300      	movs	r3, #0
 800313c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8003140:	4618      	mov	r0, r3
}
 8003142:	bc30      	pop	{r4, r5}
 8003144:	4770      	bx	lr
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003146:	1c8a      	adds	r2, r1, #2
 8003148:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 800314c:	6852      	ldr	r2, [r2, #4]
 800314e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003152:	4313      	orrs	r3, r2
 8003154:	e7de      	b.n	8003114 <HAL_DMA2D_ConfigLayer+0x38>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8003156:	3102      	adds	r1, #2
 8003158:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800315c:	684b      	ldr	r3, [r1, #4]
 800315e:	6802      	ldr	r2, [r0, #0]
 8003160:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003164:	6293      	str	r3, [r2, #40]	; 0x28
 8003166:	e7e5      	b.n	8003134 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003168:	6804      	ldr	r4, [r0, #0]
 800316a:	69e5      	ldr	r5, [r4, #28]
 800316c:	4a0b      	ldr	r2, [pc, #44]	; (800319c <HAL_DMA2D_ConfigLayer+0xc0>)
 800316e:	402a      	ands	r2, r5
 8003170:	4313      	orrs	r3, r2
 8003172:	61e3      	str	r3, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003174:	6802      	ldr	r2, [r0, #0]
 8003176:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 800317a:	699c      	ldr	r4, [r3, #24]
 800317c:	6114      	str	r4, [r2, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	3b09      	subs	r3, #9
 8003182:	2b01      	cmp	r3, #1
 8003184:	d8d6      	bhi.n	8003134 <HAL_DMA2D_ConfigLayer+0x58>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8003186:	3102      	adds	r1, #2
 8003188:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800318c:	684b      	ldr	r3, [r1, #4]
 800318e:	6802      	ldr	r2, [r0, #0]
 8003190:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003194:	6213      	str	r3, [r2, #32]
 8003196:	e7cd      	b.n	8003134 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
 8003198:	2002      	movs	r0, #2
}
 800319a:	4770      	bx	lr
 800319c:	00fcfff0 	.word	0x00fcfff0

080031a0 <DSI_ConfigPacketHeader>:
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80031a0:	ea42 1281 	orr.w	r2, r2, r1, lsl #6
 80031a4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80031a8:	9a00      	ldr	r2, [sp, #0]
 80031aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80031ae:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 80031b0:	4770      	bx	lr

080031b2 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80031b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031b6:	4604      	mov	r4, r0
 80031b8:	4688      	mov	r8, r1
 80031ba:	4616      	mov	r6, r2
 80031bc:	461f      	mov	r7, r3
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80031be:	f7ff fc27 	bl	8002a10 <HAL_GetTick>
 80031c2:	4605      	mov	r5, r0

  /* Wait for Command FIFO Empty */
  while((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80031c4:	6820      	ldr	r0, [r4, #0]
 80031c6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80031c8:	f013 0f01 	tst.w	r3, #1
 80031cc:	d107      	bne.n	80031de <DSI_ShortWrite+0x2c>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > DSI_TIMEOUT_VALUE)
 80031ce:	f7ff fc1f 	bl	8002a10 <HAL_GetTick>
 80031d2:	1b40      	subs	r0, r0, r5
 80031d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80031d8:	d9f4      	bls.n	80031c4 <DSI_ShortWrite+0x12>
    {
      return HAL_TIMEOUT;
 80031da:	2003      	movs	r0, #3
 80031dc:	e008      	b.n	80031f0 <DSI_ShortWrite+0x3e>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 80031de:	ea46 1688 	orr.w	r6, r6, r8, lsl #6
 80031e2:	ea46 2607 	orr.w	r6, r6, r7, lsl #8
 80031e6:	9b06      	ldr	r3, [sp, #24]
 80031e8:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80031ec:	66c6      	str	r6, [r0, #108]	; 0x6c

  return HAL_OK;
 80031ee:	2000      	movs	r0, #0
}
 80031f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080031f4 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80031f4:	7c03      	ldrb	r3, [r0, #16]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d073      	beq.n	80032e2 <HAL_DSI_ConfigErrorMonitor+0xee>
 80031fa:	2301      	movs	r3, #1
 80031fc:	7403      	strb	r3, [r0, #16]

  hdsi->Instance->IER[0U] = 0U;
 80031fe:	6802      	ldr	r2, [r0, #0]
 8003200:	2300      	movs	r3, #0
 8003202:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003206:	6802      	ldr	r2, [r0, #0]
 8003208:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 800320c:	6181      	str	r1, [r0, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800320e:	f011 0f01 	tst.w	r1, #1
 8003212:	d008      	beq.n	8003226 <HAL_DSI_ConfigErrorMonitor+0x32>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003214:	6802      	ldr	r2, [r0, #0]
 8003216:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 800321a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
 800321e:	ea6f 4303 	mvn.w	r3, r3, lsl #16
 8003222:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003226:	f011 0f02 	tst.w	r1, #2
 800322a:	d006      	beq.n	800323a <HAL_DSI_ConfigErrorMonitor+0x46>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 800322c:	6802      	ldr	r2, [r0, #0]
 800322e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003232:	f443 13f8 	orr.w	r3, r3, #2031616	; 0x1f0000
 8003236:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800323a:	f011 0f04 	tst.w	r1, #4
 800323e:	d006      	beq.n	800324e <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003240:	6802      	ldr	r2, [r0, #0]
 8003242:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 800324e:	f011 0f08 	tst.w	r1, #8
 8003252:	d006      	beq.n	8003262 <HAL_DSI_ConfigErrorMonitor+0x6e>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003254:	6802      	ldr	r2, [r0, #0]
 8003256:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 800325a:	f043 0302 	orr.w	r3, r3, #2
 800325e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003262:	f011 0f10 	tst.w	r1, #16
 8003266:	d006      	beq.n	8003276 <HAL_DSI_ConfigErrorMonitor+0x82>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003268:	6802      	ldr	r2, [r0, #0]
 800326a:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 800326e:	f043 030c 	orr.w	r3, r3, #12
 8003272:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003276:	f011 0f20 	tst.w	r1, #32
 800327a:	d006      	beq.n	800328a <HAL_DSI_ConfigErrorMonitor+0x96>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 800327c:	6802      	ldr	r2, [r0, #0]
 800327e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003282:	f043 0310 	orr.w	r3, r3, #16
 8003286:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 800328a:	f011 0f40 	tst.w	r1, #64	; 0x40
 800328e:	d006      	beq.n	800329e <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003290:	6802      	ldr	r2, [r0, #0]
 8003292:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003296:	f043 0320 	orr.w	r3, r3, #32
 800329a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 800329e:	f011 0f80 	tst.w	r1, #128	; 0x80
 80032a2:	d006      	beq.n	80032b2 <HAL_DSI_ConfigErrorMonitor+0xbe>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80032a4:	6802      	ldr	r2, [r0, #0]
 80032a6:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 80032aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ae:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80032b2:	f411 7f80 	tst.w	r1, #256	; 0x100
 80032b6:	d006      	beq.n	80032c6 <HAL_DSI_ConfigErrorMonitor+0xd2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 80032b8:	6802      	ldr	r2, [r0, #0]
 80032ba:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 80032be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032c2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 80032c6:	f411 7f00 	tst.w	r1, #512	; 0x200
 80032ca:	d006      	beq.n	80032da <HAL_DSI_ConfigErrorMonitor+0xe6>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 80032cc:	6802      	ldr	r2, [r0, #0]
 80032ce:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 80032d2:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
 80032d6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 80032da:	2300      	movs	r3, #0
 80032dc:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80032de:	4618      	mov	r0, r3
 80032e0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80032e2:	2002      	movs	r0, #2
}
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_DSI_Init>:
  if (hdsi == NULL)
 80032e8:	2800      	cmp	r0, #0
 80032ea:	f000 80bc 	beq.w	8003466 <HAL_DSI_Init+0x17e>
{
 80032ee:	b570      	push	{r4, r5, r6, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	4604      	mov	r4, r0
 80032f4:	460e      	mov	r6, r1
  if (hdsi->State == HAL_DSI_STATE_RESET)
 80032f6:	7c43      	ldrb	r3, [r0, #17]
 80032f8:	b31b      	cbz	r3, 8003342 <HAL_DSI_Init+0x5a>
  hdsi->State = HAL_DSI_STATE_BUSY;
 80032fa:	2303      	movs	r3, #3
 80032fc:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 80032fe:	2300      	movs	r3, #0
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	6822      	ldr	r2, [r4, #0]
 8003304:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8003308:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800330c:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8003310:	6823      	ldr	r3, [r4, #0]
 8003312:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800331e:	f7ff fb77 	bl	8002a10 <HAL_GetTick>
 8003322:	4605      	mov	r5, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800332a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 800332e:	d10b      	bne.n	8003348 <HAL_DSI_Init+0x60>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003330:	f7ff fb6e 	bl	8002a10 <HAL_GetTick>
 8003334:	1b40      	subs	r0, r0, r5
 8003336:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800333a:	d9f3      	bls.n	8003324 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 800333c:	2003      	movs	r0, #3
}
 800333e:	b002      	add	sp, #8
 8003340:	bd70      	pop	{r4, r5, r6, pc}
    HAL_DSI_MspInit(hdsi);
 8003342:	f00a fba3 	bl	800da8c <HAL_DSI_MspInit>
 8003346:	e7d8      	b.n	80032fa <HAL_DSI_Init+0x12>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003348:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800334c:	f422 325e 	bic.w	r2, r2, #227328	; 0x37800
 8003350:	f422 72fe 	bic.w	r2, r2, #508	; 0x1fc
 8003354:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003358:	6821      	ldr	r1, [r4, #0]
 800335a:	f8d1 2430 	ldr.w	r2, [r1, #1072]	; 0x430
 800335e:	6830      	ldr	r0, [r6, #0]
 8003360:	6873      	ldr	r3, [r6, #4]
 8003362:	02db      	lsls	r3, r3, #11
 8003364:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 8003368:	68b0      	ldr	r0, [r6, #8]
 800336a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3430 	str.w	r3, [r1, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003374:	2300      	movs	r3, #0
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	6822      	ldr	r2, [r4, #0]
 800337a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8003386:	6823      	ldr	r3, [r4, #0]
 8003388:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	9301      	str	r3, [sp, #4]
 8003392:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 8003394:	f7ff fb3c 	bl	8002a10 <HAL_GetTick>
 8003398:	4605      	mov	r5, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800339a:	6823      	ldr	r3, [r4, #0]
 800339c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 80033a0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80033a4:	d107      	bne.n	80033b6 <HAL_DSI_Init+0xce>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80033a6:	f7ff fb33 	bl	8002a10 <HAL_GetTick>
 80033aa:	1b40      	subs	r0, r0, r5
 80033ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80033b0:	d9f3      	bls.n	800339a <HAL_DSI_Init+0xb2>
      return HAL_TIMEOUT;
 80033b2:	2003      	movs	r0, #3
 80033b4:	e7c3      	b.n	800333e <HAL_DSI_Init+0x56>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 80033b6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80033ba:	f042 0206 	orr.w	r2, r2, #6
 80033be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80033c2:	6822      	ldr	r2, [r4, #0]
 80033c4:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80033c8:	f023 0303 	bic.w	r3, r3, #3
 80033cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80033d0:	6822      	ldr	r2, [r4, #0]
 80033d2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80033d6:	6861      	ldr	r1, [r4, #4]
 80033d8:	430b      	orrs	r3, r1
 80033da:	f043 0301 	orr.w	r3, r3, #1
 80033de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80033e2:	6822      	ldr	r2, [r4, #0]
 80033e4:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 80033e8:	f023 0303 	bic.w	r3, r3, #3
 80033ec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80033f0:	6822      	ldr	r2, [r4, #0]
 80033f2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 80033f6:	68e1      	ldr	r1, [r4, #12]
 80033f8:	430b      	orrs	r3, r1
 80033fa:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80033fe:	6822      	ldr	r2, [r4, #0]
 8003400:	6893      	ldr	r3, [r2, #8]
 8003402:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003406:	6093      	str	r3, [r2, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003408:	6822      	ldr	r2, [r4, #0]
 800340a:	6893      	ldr	r3, [r2, #8]
 800340c:	68a1      	ldr	r1, [r4, #8]
 800340e:	430b      	orrs	r3, r1
 8003410:	6093      	str	r3, [r2, #8]
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003412:	6872      	ldr	r2, [r6, #4]
 8003414:	b902      	cbnz	r2, 8003418 <HAL_DSI_Init+0x130>
 8003416:	2201      	movs	r2, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <HAL_DSI_Init+0x184>)
 800341a:	fb03 f302 	mul.w	r3, r3, r2
 800341e:	68b2      	ldr	r2, [r6, #8]
 8003420:	f002 0203 	and.w	r2, r2, #3
 8003424:	4093      	lsls	r3, r2
 8003426:	6831      	ldr	r1, [r6, #0]
 8003428:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800342c:	fb02 f201 	mul.w	r2, r2, r1
 8003430:	fbb3 f3f2 	udiv	r3, r3, r2
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003434:	6821      	ldr	r1, [r4, #0]
 8003436:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 800343a:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800343e:	f8c1 2418 	str.w	r2, [r1, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003442:	6821      	ldr	r1, [r4, #0]
 8003444:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3418 	str.w	r3, [r1, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	2000      	movs	r0, #0
 8003452:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 800345c:	61a0      	str	r0, [r4, #24]
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800345e:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8003460:	2301      	movs	r3, #1
 8003462:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8003464:	e76b      	b.n	800333e <HAL_DSI_Init+0x56>
    return HAL_ERROR;
 8003466:	2001      	movs	r0, #1
}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	003d0900 	.word	0x003d0900

08003470 <HAL_DSI_ErrorCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8003470:	4770      	bx	lr

08003472 <HAL_DSI_IRQHandler>:
{
 8003472:	b510      	push	{r4, lr}
 8003474:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8003476:	6803      	ldr	r3, [r0, #0]
 8003478:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 800347c:	f012 0f01 	tst.w	r2, #1
 8003480:	d004      	beq.n	800348c <HAL_DSI_IRQHandler+0x1a>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8003482:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8003486:	f012 0f01 	tst.w	r2, #1
 800348a:	d160      	bne.n	800354e <HAL_DSI_IRQHandler+0xdc>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003492:	f012 0f02 	tst.w	r2, #2
 8003496:	d004      	beq.n	80034a2 <HAL_DSI_IRQHandler+0x30>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8003498:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800349c:	f012 0f02 	tst.w	r2, #2
 80034a0:	d15b      	bne.n	800355a <HAL_DSI_IRQHandler+0xe8>
  if (hdsi->ErrorMsk != 0U)
 80034a2:	69a3      	ldr	r3, [r4, #24]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d051      	beq.n	800354c <HAL_DSI_IRQHandler+0xda>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 80034a8:	6821      	ldr	r1, [r4, #0]
 80034aa:	f8d1 20bc 	ldr.w	r2, [r1, #188]	; 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 80034ae:	f8d1 30c4 	ldr.w	r3, [r1, #196]	; 0xc4
 80034b2:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 80034b4:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 80034b8:	f8d1 30c8 	ldr.w	r3, [r1, #200]	; 0xc8
 80034bc:	4003      	ands	r3, r0
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 80034be:	b291      	uxth	r1, r2
 80034c0:	b119      	cbz	r1, 80034ca <HAL_DSI_IRQHandler+0x58>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 80034c2:	6961      	ldr	r1, [r4, #20]
 80034c4:	f041 0101 	orr.w	r1, r1, #1
 80034c8:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 80034ca:	f412 1ff8 	tst.w	r2, #2031616	; 0x1f0000
 80034ce:	d003      	beq.n	80034d8 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 80034d0:	6962      	ldr	r2, [r4, #20]
 80034d2:	f042 0202 	orr.w	r2, r2, #2
 80034d6:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 80034d8:	f013 0f01 	tst.w	r3, #1
 80034dc:	d003      	beq.n	80034e6 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 80034de:	6962      	ldr	r2, [r4, #20]
 80034e0:	f042 0204 	orr.w	r2, r2, #4
 80034e4:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 80034e6:	f013 0f02 	tst.w	r3, #2
 80034ea:	d003      	beq.n	80034f4 <HAL_DSI_IRQHandler+0x82>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80034ec:	6962      	ldr	r2, [r4, #20]
 80034ee:	f042 0208 	orr.w	r2, r2, #8
 80034f2:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80034f4:	f013 0f0c 	tst.w	r3, #12
 80034f8:	d003      	beq.n	8003502 <HAL_DSI_IRQHandler+0x90>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80034fa:	6962      	ldr	r2, [r4, #20]
 80034fc:	f042 0210 	orr.w	r2, r2, #16
 8003500:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8003502:	f013 0f10 	tst.w	r3, #16
 8003506:	d003      	beq.n	8003510 <HAL_DSI_IRQHandler+0x9e>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8003508:	6962      	ldr	r2, [r4, #20]
 800350a:	f042 0220 	orr.w	r2, r2, #32
 800350e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8003510:	f013 0f20 	tst.w	r3, #32
 8003514:	d003      	beq.n	800351e <HAL_DSI_IRQHandler+0xac>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8003516:	6962      	ldr	r2, [r4, #20]
 8003518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800351c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 800351e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003522:	d003      	beq.n	800352c <HAL_DSI_IRQHandler+0xba>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8003524:	6962      	ldr	r2, [r4, #20]
 8003526:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800352a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 800352c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003530:	d003      	beq.n	800353a <HAL_DSI_IRQHandler+0xc8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8003532:	6962      	ldr	r2, [r4, #20]
 8003534:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003538:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800353a:	f413 5ff8 	tst.w	r3, #7936	; 0x1f00
 800353e:	d003      	beq.n	8003548 <HAL_DSI_IRQHandler+0xd6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8003540:	6963      	ldr	r3, [r4, #20]
 8003542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003546:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8003548:	6963      	ldr	r3, [r4, #20]
 800354a:	b96b      	cbnz	r3, 8003568 <HAL_DSI_IRQHandler+0xf6>
}
 800354c:	bd10      	pop	{r4, pc}
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 800354e:	2201      	movs	r2, #1
 8003550:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8003554:	f00a fe96 	bl	800e284 <HAL_DSI_TearingEffectCallback>
 8003558:	e798      	b.n	800348c <HAL_DSI_IRQHandler+0x1a>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 800355a:	2202      	movs	r2, #2
 800355c:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8003560:	4620      	mov	r0, r4
 8003562:	f00a febb 	bl	800e2dc <HAL_DSI_EndOfRefreshCallback>
 8003566:	e79c      	b.n	80034a2 <HAL_DSI_IRQHandler+0x30>
      HAL_DSI_ErrorCallback(hdsi);
 8003568:	4620      	mov	r0, r4
 800356a:	f7ff ff81 	bl	8003470 <HAL_DSI_ErrorCallback>
}
 800356e:	e7ed      	b.n	800354c <HAL_DSI_IRQHandler+0xda>

08003570 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003570:	7c03      	ldrb	r3, [r0, #16]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d00e      	beq.n	8003594 <HAL_DSI_SetGenericVCID+0x24>
 8003576:	2301      	movs	r3, #1
 8003578:	7403      	strb	r3, [r0, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800357a:	6802      	ldr	r2, [r0, #0]
 800357c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800357e:	f023 0303 	bic.w	r3, r3, #3
 8003582:	6313      	str	r3, [r2, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8003584:	6802      	ldr	r2, [r0, #0]
 8003586:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003588:	4319      	orrs	r1, r3
 800358a:	6311      	str	r1, [r2, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800358c:	2300      	movs	r3, #0
 800358e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8003590:	4618      	mov	r0, r3
 8003592:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8003594:	2002      	movs	r0, #2
}
 8003596:	4770      	bx	lr

08003598 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003598:	7c03      	ldrb	r3, [r0, #16]
 800359a:	2b01      	cmp	r3, #1
 800359c:	f000 8082 	beq.w	80036a4 <HAL_DSI_ConfigAdaptedCommandMode+0x10c>
{
 80035a0:	b430      	push	{r4, r5}
  __HAL_LOCK(hdsi);
 80035a2:	2301      	movs	r3, #1
 80035a4:	7403      	strb	r3, [r0, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80035a6:	6802      	ldr	r2, [r0, #0]
 80035a8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80035aa:	f043 0301 	orr.w	r3, r3, #1
 80035ae:	6353      	str	r3, [r2, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80035b0:	6802      	ldr	r2, [r0, #0]
 80035b2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 80035b6:	f023 0301 	bic.w	r3, r3, #1
 80035ba:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80035be:	6802      	ldr	r2, [r0, #0]
 80035c0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80035cc:	6802      	ldr	r2, [r0, #0]
 80035ce:	68d3      	ldr	r3, [r2, #12]
 80035d0:	f023 0303 	bic.w	r3, r3, #3
 80035d4:	60d3      	str	r3, [r2, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80035d6:	6802      	ldr	r2, [r0, #0]
 80035d8:	68d3      	ldr	r3, [r2, #12]
 80035da:	680c      	ldr	r4, [r1, #0]
 80035dc:	4323      	orrs	r3, r4
 80035de:	60d3      	str	r3, [r2, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 80035e0:	6802      	ldr	r2, [r0, #0]
 80035e2:	6953      	ldr	r3, [r2, #20]
 80035e4:	f023 0307 	bic.w	r3, r3, #7
 80035e8:	6153      	str	r3, [r2, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 80035ea:	6804      	ldr	r4, [r0, #0]
 80035ec:	6962      	ldr	r2, [r4, #20]
 80035ee:	69cb      	ldr	r3, [r1, #28]
 80035f0:	698d      	ldr	r5, [r1, #24]
 80035f2:	432b      	orrs	r3, r5
 80035f4:	694d      	ldr	r5, [r1, #20]
 80035f6:	432b      	orrs	r3, r5
 80035f8:	4313      	orrs	r3, r2
 80035fa:	6163      	str	r3, [r4, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 80035fc:	6802      	ldr	r2, [r0, #0]
 80035fe:	6913      	ldr	r3, [r2, #16]
 8003600:	f023 030f 	bic.w	r3, r3, #15
 8003604:	6113      	str	r3, [r2, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8003606:	6802      	ldr	r2, [r0, #0]
 8003608:	6913      	ldr	r3, [r2, #16]
 800360a:	684c      	ldr	r4, [r1, #4]
 800360c:	4323      	orrs	r3, r4
 800360e:	6113      	str	r3, [r2, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003610:	6802      	ldr	r2, [r0, #0]
 8003612:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8003616:	f023 030e 	bic.w	r3, r3, #14
 800361a:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800361e:	6802      	ldr	r2, [r0, #0]
 8003620:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8003624:	684c      	ldr	r4, [r1, #4]
 8003626:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 800362a:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800362e:	6802      	ldr	r2, [r0, #0]
 8003630:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8003632:	0c1b      	lsrs	r3, r3, #16
 8003634:	041b      	lsls	r3, r3, #16
 8003636:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8003638:	6802      	ldr	r2, [r0, #0]
 800363a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800363c:	688c      	ldr	r4, [r1, #8]
 800363e:	4323      	orrs	r3, r4
 8003640:	6653      	str	r3, [r2, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8003642:	6802      	ldr	r2, [r0, #0]
 8003644:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8003648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800364c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003650:	6804      	ldr	r4, [r0, #0]
 8003652:	f8d4 2400 	ldr.w	r2, [r4, #1024]	; 0x400
 8003656:	68cb      	ldr	r3, [r1, #12]
 8003658:	690d      	ldr	r5, [r1, #16]
 800365a:	432b      	orrs	r3, r5
 800365c:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 800365e:	432b      	orrs	r3, r5
                            CmdCfg->VSyncPol);
 8003660:	6a0d      	ldr	r5, [r1, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003662:	432b      	orrs	r3, r5
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800366a:	6802      	ldr	r2, [r0, #0]
 800366c:	6e93      	ldr	r3, [r2, #104]	; 0x68
 800366e:	f023 0301 	bic.w	r3, r3, #1
 8003672:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8003674:	6802      	ldr	r2, [r0, #0]
 8003676:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8003678:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800367a:	430b      	orrs	r3, r1
 800367c:	6693      	str	r3, [r2, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800367e:	6802      	ldr	r2, [r0, #0]
 8003680:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 800368c:	6802      	ldr	r2, [r0, #0]
 800368e:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 8003692:	f043 0302 	orr.w	r3, r3, #2
 8003696:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800369a:	2300      	movs	r3, #0
 800369c:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800369e:	4618      	mov	r0, r3
}
 80036a0:	bc30      	pop	{r4, r5}
 80036a2:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80036a4:	2002      	movs	r0, #2
}
 80036a6:	4770      	bx	lr

080036a8 <HAL_DSI_ConfigCommand>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80036a8:	7c03      	ldrb	r3, [r0, #16]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d031      	beq.n	8003712 <HAL_DSI_ConfigCommand+0x6a>
{
 80036ae:	b430      	push	{r4, r5}
  __HAL_LOCK(hdsi);
 80036b0:	2301      	movs	r3, #1
 80036b2:	7403      	strb	r3, [r0, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80036b4:	6802      	ldr	r2, [r0, #0]
 80036b6:	6e94      	ldr	r4, [r2, #104]	; 0x68
 80036b8:	4b17      	ldr	r3, [pc, #92]	; (8003718 <HAL_DSI_ConfigCommand+0x70>)
 80036ba:	4023      	ands	r3, r4
 80036bc:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80036be:	6804      	ldr	r4, [r0, #0]
 80036c0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80036c2:	680b      	ldr	r3, [r1, #0]
                           LPCmd->LPGenShortWriteOneP | \
 80036c4:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80036c6:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 80036c8:	688d      	ldr	r5, [r1, #8]
                           LPCmd->LPGenShortWriteOneP | \
 80036ca:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 80036cc:	68cd      	ldr	r5, [r1, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 80036ce:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 80036d0:	690d      	ldr	r5, [r1, #16]
                           LPCmd->LPGenShortReadNoP   | \
 80036d2:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 80036d4:	694d      	ldr	r5, [r1, #20]
                           LPCmd->LPGenShortReadOneP  | \
 80036d6:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 80036d8:	698d      	ldr	r5, [r1, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 80036da:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 80036dc:	69cd      	ldr	r5, [r1, #28]
                           LPCmd->LPGenLongWrite      | \
 80036de:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 80036e0:	6a0d      	ldr	r5, [r1, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 80036e2:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 80036e4:	6a4d      	ldr	r5, [r1, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 80036e6:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 80036e8:	6a8d      	ldr	r5, [r1, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 80036ea:	432b      	orrs	r3, r5
                           LPCmd->LPMaxReadPacket);
 80036ec:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 80036ee:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80036f0:	4313      	orrs	r3, r2
 80036f2:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80036f4:	6802      	ldr	r2, [r0, #0]
 80036f6:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80036f8:	f023 0302 	bic.w	r3, r3, #2
 80036fc:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80036fe:	6802      	ldr	r2, [r0, #0]
 8003700:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8003702:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8003704:	430b      	orrs	r3, r1
 8003706:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003708:	2300      	movs	r3, #0
 800370a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800370c:	4618      	mov	r0, r3
}
 800370e:	bc30      	pop	{r4, r5}
 8003710:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8003712:	2002      	movs	r0, #2
}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	fef080ff 	.word	0xfef080ff

0800371c <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800371c:	7c03      	ldrb	r3, [r0, #16]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d00e      	beq.n	8003740 <HAL_DSI_ConfigFlowControl+0x24>
 8003722:	2301      	movs	r3, #1
 8003724:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8003726:	6802      	ldr	r2, [r0, #0]
 8003728:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800372a:	f023 031f 	bic.w	r3, r3, #31
 800372e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8003730:	6802      	ldr	r2, [r0, #0]
 8003732:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003734:	4319      	orrs	r1, r3
 8003736:	62d1      	str	r1, [r2, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003738:	2300      	movs	r3, #0
 800373a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800373c:	4618      	mov	r0, r3
 800373e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8003740:	2002      	movs	r0, #2
}
 8003742:	4770      	bx	lr

08003744 <HAL_DSI_ConfigPhyTimer>:
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003744:	7c03      	ldrb	r3, [r0, #16]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d03e      	beq.n	80037c8 <HAL_DSI_ConfigPhyTimer+0x84>
{
 800374a:	b430      	push	{r4, r5}
  __HAL_LOCK(hdsi);
 800374c:	2301      	movs	r3, #1
 800374e:	7403      	strb	r3, [r0, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8003750:	680b      	ldr	r3, [r1, #0]
 8003752:	684a      	ldr	r2, [r1, #4]
 8003754:	4293      	cmp	r3, r2
 8003756:	bf38      	it	cc
 8003758:	4613      	movcc	r3, r2
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800375a:	6804      	ldr	r4, [r0, #0]
 800375c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8003760:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 8003764:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003768:	6804      	ldr	r4, [r0, #0]
 800376a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800376e:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8003778:	6802      	ldr	r2, [r0, #0]
 800377a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800377e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003782:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003786:	6804      	ldr	r4, [r0, #0]
 8003788:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 800378c:	690b      	ldr	r3, [r1, #16]
 800378e:	68cd      	ldr	r5, [r1, #12]
 8003790:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8003794:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8003796:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800379a:	4313      	orrs	r3, r2
 800379c:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80037a0:	6802      	ldr	r2, [r0, #0]
 80037a2:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 80037a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037aa:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80037ae:	6802      	ldr	r2, [r0, #0]
 80037b0:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 80037b4:	6949      	ldr	r1, [r1, #20]
 80037b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80037ba:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80037be:	2300      	movs	r3, #0
 80037c0:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80037c2:	4618      	mov	r0, r3
}
 80037c4:	bc30      	pop	{r4, r5}
 80037c6:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80037c8:	2002      	movs	r0, #2
}
 80037ca:	4770      	bx	lr

080037cc <HAL_DSI_ConfigHostTimeouts>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80037cc:	7c03      	ldrb	r3, [r0, #16]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d077      	beq.n	80038c2 <HAL_DSI_ConfigHostTimeouts+0xf6>
{
 80037d2:	b410      	push	{r4}
  __HAL_LOCK(hdsi);
 80037d4:	2301      	movs	r3, #1
 80037d6:	7403      	strb	r3, [r0, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80037d8:	6802      	ldr	r2, [r0, #0]
 80037da:	6893      	ldr	r3, [r2, #8]
 80037dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037e0:	6093      	str	r3, [r2, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80037e2:	6802      	ldr	r2, [r0, #0]
 80037e4:	6893      	ldr	r3, [r2, #8]
 80037e6:	680c      	ldr	r4, [r1, #0]
 80037e8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80037ec:	6093      	str	r3, [r2, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80037ee:	6802      	ldr	r2, [r0, #0]
 80037f0:	6f93      	ldr	r3, [r2, #120]	; 0x78
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80037f6:	6802      	ldr	r2, [r0, #0]
 80037f8:	6f93      	ldr	r3, [r2, #120]	; 0x78
 80037fa:	684c      	ldr	r4, [r1, #4]
 80037fc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003800:	6793      	str	r3, [r2, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8003802:	6802      	ldr	r2, [r0, #0]
 8003804:	6f93      	ldr	r3, [r2, #120]	; 0x78
 8003806:	0c1b      	lsrs	r3, r3, #16
 8003808:	041b      	lsls	r3, r3, #16
 800380a:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800380c:	6802      	ldr	r2, [r0, #0]
 800380e:	6f93      	ldr	r3, [r2, #120]	; 0x78
 8003810:	688c      	ldr	r4, [r1, #8]
 8003812:	4323      	orrs	r3, r4
 8003814:	6793      	str	r3, [r2, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8003816:	6802      	ldr	r2, [r0, #0]
 8003818:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 800381a:	0c1b      	lsrs	r3, r3, #16
 800381c:	041b      	lsls	r3, r3, #16
 800381e:	67d3      	str	r3, [r2, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8003820:	6802      	ldr	r2, [r0, #0]
 8003822:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 8003824:	68cc      	ldr	r4, [r1, #12]
 8003826:	4323      	orrs	r3, r4
 8003828:	67d3      	str	r3, [r2, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800382a:	6802      	ldr	r2, [r0, #0]
 800382c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8003830:	0c1b      	lsrs	r3, r3, #16
 8003832:	041b      	lsls	r3, r3, #16
 8003834:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8003838:	6802      	ldr	r2, [r0, #0]
 800383a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800383e:	690c      	ldr	r4, [r1, #16]
 8003840:	4323      	orrs	r3, r4
 8003842:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8003846:	6802      	ldr	r2, [r0, #0]
 8003848:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800384c:	0c1b      	lsrs	r3, r3, #16
 800384e:	041b      	lsls	r3, r3, #16
 8003850:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8003854:	6802      	ldr	r2, [r0, #0]
 8003856:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800385a:	694c      	ldr	r4, [r1, #20]
 800385c:	4323      	orrs	r3, r4
 800385e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8003862:	6802      	ldr	r2, [r0, #0]
 8003864:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8003868:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800386c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8003870:	6802      	ldr	r2, [r0, #0]
 8003872:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8003876:	698c      	ldr	r4, [r1, #24]
 8003878:	4323      	orrs	r3, r4
 800387a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 800387e:	6802      	ldr	r2, [r0, #0]
 8003880:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003884:	0c1b      	lsrs	r3, r3, #16
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800388c:	6802      	ldr	r2, [r0, #0]
 800388e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003892:	69cc      	ldr	r4, [r1, #28]
 8003894:	4323      	orrs	r3, r4
 8003896:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800389a:	6802      	ldr	r2, [r0, #0]
 800389c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	041b      	lsls	r3, r3, #16
 80038a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80038a8:	6802      	ldr	r2, [r0, #0]
 80038aa:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80038ae:	6a09      	ldr	r1, [r1, #32]
 80038b0:	430b      	orrs	r3, r1
 80038b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80038b6:	2300      	movs	r3, #0
 80038b8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80038ba:	4618      	mov	r0, r3
}
 80038bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80038c0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80038c2:	2002      	movs	r0, #2
}
 80038c4:	4770      	bx	lr

080038c6 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80038c6:	7c03      	ldrb	r3, [r0, #16]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d021      	beq.n	8003910 <HAL_DSI_Start+0x4a>
{
 80038cc:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80038ce:	2301      	movs	r3, #1
 80038d0:	7403      	strb	r3, [r0, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80038d2:	2300      	movs	r3, #0
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	6801      	ldr	r1, [r0, #0]
 80038d8:	684a      	ldr	r2, [r1, #4]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	604a      	str	r2, [r1, #4]
 80038e0:	6802      	ldr	r2, [r0, #0]
 80038e2:	6851      	ldr	r1, [r2, #4]
 80038e4:	f001 0101 	and.w	r1, r1, #1
 80038e8:	9100      	str	r1, [sp, #0]
 80038ea:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80038ec:	9301      	str	r3, [sp, #4]
 80038ee:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 80038f2:	f041 0108 	orr.w	r1, r1, #8
 80038f6:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 80038fa:	6802      	ldr	r2, [r0, #0]
 80038fc:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8003900:	f002 0208 	and.w	r2, r2, #8
 8003904:	9201      	str	r2, [sp, #4]
 8003906:	9a01      	ldr	r2, [sp, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003908:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800390a:	4618      	mov	r0, r3
}
 800390c:	b002      	add	sp, #8
 800390e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8003910:	2002      	movs	r0, #2
}
 8003912:	4770      	bx	lr

08003914 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003914:	7c03      	ldrb	r3, [r0, #16]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d00c      	beq.n	8003934 <HAL_DSI_Refresh+0x20>
 800391a:	2301      	movs	r3, #1
 800391c:	7403      	strb	r3, [r0, #16]

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800391e:	6802      	ldr	r2, [r0, #0]
 8003920:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 8003924:	f043 0304 	orr.w	r3, r3, #4
 8003928:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800392c:	2300      	movs	r3, #0
 800392e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8003930:	4618      	mov	r0, r3
 8003932:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8003934:	2002      	movs	r0, #2
}
 8003936:	4770      	bx	lr

08003938 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8003938:	b510      	push	{r4, lr}
 800393a:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800393c:	7c04      	ldrb	r4, [r0, #16]
 800393e:	2c01      	cmp	r4, #1
 8003940:	d00b      	beq.n	800395a <HAL_DSI_ShortWrite+0x22>
 8003942:	4604      	mov	r4, r0
 8003944:	2001      	movs	r0, #1
 8003946:	7420      	strb	r0, [r4, #16]

   status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8003948:	9804      	ldr	r0, [sp, #16]
 800394a:	9000      	str	r0, [sp, #0]
 800394c:	4620      	mov	r0, r4
 800394e:	f7ff fc30 	bl	80031b2 <DSI_ShortWrite>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003952:	2300      	movs	r3, #0
 8003954:	7423      	strb	r3, [r4, #16]

  return status;
}
 8003956:	b002      	add	sp, #8
 8003958:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hdsi);
 800395a:	2002      	movs	r0, #2
 800395c:	e7fb      	b.n	8003956 <HAL_DSI_ShortWrite+0x1e>

0800395e <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 800395e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003966:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003968:	7c06      	ldrb	r6, [r0, #16]
 800396a:	2e01      	cmp	r6, #1
 800396c:	d04c      	beq.n	8003a08 <HAL_DSI_LongWrite+0xaa>
 800396e:	4698      	mov	r8, r3
 8003970:	4692      	mov	sl, r2
 8003972:	4689      	mov	r9, r1
 8003974:	4607      	mov	r7, r0
 8003976:	2301      	movs	r3, #1
 8003978:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800397a:	f7ff f849 	bl	8002a10 <HAL_GetTick>
 800397e:	4606      	mov	r6, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8003984:	f013 0f01 	tst.w	r3, #1
 8003988:	d109      	bne.n	800399e <HAL_DSI_LongWrite+0x40>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800398a:	f7ff f841 	bl	8002a10 <HAL_GetTick>
 800398e:	1b80      	subs	r0, r0, r6
 8003990:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003994:	d9f4      	bls.n	8003980 <HAL_DSI_LongWrite+0x22>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003996:	2300      	movs	r3, #0
 8003998:	743b      	strb	r3, [r7, #16]

      return HAL_TIMEOUT;
 800399a:	2003      	movs	r0, #3
 800399c:	e031      	b.n	8003a02 <HAL_DSI_LongWrite+0xa4>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800399e:	4641      	mov	r1, r8
 80039a0:	2903      	cmp	r1, #3
 80039a2:	bf28      	it	cs
 80039a4:	2103      	movcs	r1, #3

  for (count = 0U; count < nbBytes; count++)
 80039a6:	2300      	movs	r3, #0
 80039a8:	e004      	b.n	80039b4 <HAL_DSI_LongWrite+0x56>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80039aa:	5ce0      	ldrb	r0, [r4, r3]
 80039ac:	3301      	adds	r3, #1
 80039ae:	00de      	lsls	r6, r3, #3
 80039b0:	40b0      	lsls	r0, r6
 80039b2:	4305      	orrs	r5, r0
  for (count = 0U; count < nbBytes; count++)
 80039b4:	428b      	cmp	r3, r1
 80039b6:	d3f8      	bcc.n	80039aa <HAL_DSI_LongWrite+0x4c>
  }
  hdsi->Instance->GPDR = fifoword;
 80039b8:	6715      	str	r5, [r2, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 80039ba:	eba8 0001 	sub.w	r0, r8, r1
  pparams += nbBytes;
 80039be:	4421      	add	r1, r4
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80039c0:	e00a      	b.n	80039d8 <HAL_DSI_LongWrite+0x7a>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
    fifoword = 0U;
    for (count = 0U; count < nbBytes; count++)
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80039c2:	5d0d      	ldrb	r5, [r1, r4]
 80039c4:	00e3      	lsls	r3, r4, #3
 80039c6:	409d      	lsls	r5, r3
 80039c8:	432e      	orrs	r6, r5
    for (count = 0U; count < nbBytes; count++)
 80039ca:	3401      	adds	r4, #1
 80039cc:	4294      	cmp	r4, r2
 80039ce:	d3f8      	bcc.n	80039c2 <HAL_DSI_LongWrite+0x64>
    }
    hdsi->Instance->GPDR = fifoword;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	671e      	str	r6, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80039d4:	1a80      	subs	r0, r0, r2
    pparams += nbBytes;
 80039d6:	4411      	add	r1, r2
  while (uicounter != 0U)
 80039d8:	b130      	cbz	r0, 80039e8 <HAL_DSI_LongWrite+0x8a>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80039da:	4602      	mov	r2, r0
 80039dc:	2804      	cmp	r0, #4
 80039de:	bf28      	it	cs
 80039e0:	2204      	movcs	r2, #4
    fifoword = 0U;
 80039e2:	2600      	movs	r6, #0
    for (count = 0U; count < nbBytes; count++)
 80039e4:	4634      	mov	r4, r6
 80039e6:	e7f1      	b.n	80039cc <HAL_DSI_LongWrite+0x6e>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80039e8:	f108 0301 	add.w	r3, r8, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80039ec:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80039f0:	9200      	str	r2, [sp, #0]
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	4652      	mov	r2, sl
 80039f6:	4649      	mov	r1, r9
 80039f8:	6838      	ldr	r0, [r7, #0]
 80039fa:	f7ff fbd1 	bl	80031a0 <DSI_ConfigPacketHeader>
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80039fe:	2000      	movs	r0, #0
 8003a00:	7438      	strb	r0, [r7, #16]

  return HAL_OK;
}
 8003a02:	b002      	add	sp, #8
 8003a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hdsi);
 8003a08:	2002      	movs	r0, #2
 8003a0a:	e7fa      	b.n	8003a02 <HAL_DSI_LongWrite+0xa4>

08003a0c <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003a0c:	7c03      	ldrb	r3, [r0, #16]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d013      	beq.n	8003a3a <HAL_DSI_SetLowPowerRXFilter+0x2e>
 8003a12:	2301      	movs	r3, #1
 8003a14:	7403      	strb	r3, [r0, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8003a16:	6802      	ldr	r2, [r0, #0]
 8003a18:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 8003a1c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a20:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8003a24:	6802      	ldr	r2, [r0, #0]
 8003a26:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 8003a2a:	ea43 6141 	orr.w	r1, r3, r1, lsl #25
 8003a2e:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003a32:	2300      	movs	r3, #0
 8003a34:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8003a36:	4618      	mov	r0, r3
 8003a38:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8003a3a:	2002      	movs	r0, #2
}
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a40:	2300      	movs	r3, #0
 8003a42:	2b0f      	cmp	r3, #15
 8003a44:	f200 80e3 	bhi.w	8003c0e <HAL_GPIO_Init+0x1ce>
{
 8003a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	e039      	b.n	8003ac2 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a4e:	2209      	movs	r2, #9
 8003a50:	e000      	b.n	8003a54 <HAL_GPIO_Init+0x14>
 8003a52:	2200      	movs	r2, #0
 8003a54:	40aa      	lsls	r2, r5
 8003a56:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a58:	3402      	adds	r4, #2
 8003a5a:	4d6d      	ldr	r5, [pc, #436]	; (8003c10 <HAL_GPIO_Init+0x1d0>)
 8003a5c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a60:	4a6c      	ldr	r2, [pc, #432]	; (8003c14 <HAL_GPIO_Init+0x1d4>)
 8003a62:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8003a64:	43f2      	mvns	r2, r6
 8003a66:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a6a:	684f      	ldr	r7, [r1, #4]
 8003a6c:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8003a70:	d001      	beq.n	8003a76 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8003a72:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8003a76:	4c67      	ldr	r4, [pc, #412]	; (8003c14 <HAL_GPIO_Init+0x1d4>)
 8003a78:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8003a7a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8003a7c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a80:	684f      	ldr	r7, [r1, #4]
 8003a82:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8003a86:	d001      	beq.n	8003a8c <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8003a88:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8003a8c:	4c61      	ldr	r4, [pc, #388]	; (8003c14 <HAL_GPIO_Init+0x1d4>)
 8003a8e:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a90:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8003a92:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a96:	684f      	ldr	r7, [r1, #4]
 8003a98:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8003a9c:	d001      	beq.n	8003aa2 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8003a9e:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8003aa2:	4c5c      	ldr	r4, [pc, #368]	; (8003c14 <HAL_GPIO_Init+0x1d4>)
 8003aa4:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8003aa6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003aa8:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003aaa:	684d      	ldr	r5, [r1, #4]
 8003aac:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8003ab0:	d001      	beq.n	8003ab6 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8003ab2:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8003ab6:	4c57      	ldr	r4, [pc, #348]	; (8003c14 <HAL_GPIO_Init+0x1d4>)
 8003ab8:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003aba:	3301      	adds	r3, #1
 8003abc:	2b0f      	cmp	r3, #15
 8003abe:	f200 80a4 	bhi.w	8003c0a <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ac6:	680c      	ldr	r4, [r1, #0]
 8003ac8:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8003acc:	42b2      	cmp	r2, r6
 8003ace:	d1f4      	bne.n	8003aba <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ad0:	684c      	ldr	r4, [r1, #4]
 8003ad2:	1e65      	subs	r5, r4, #1
 8003ad4:	2d01      	cmp	r5, #1
 8003ad6:	d903      	bls.n	8003ae0 <HAL_GPIO_Init+0xa0>
 8003ad8:	2c11      	cmp	r4, #17
 8003ada:	d001      	beq.n	8003ae0 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003adc:	2c12      	cmp	r4, #18
 8003ade:	d112      	bne.n	8003b06 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8003ae0:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ae2:	005f      	lsls	r7, r3, #1
 8003ae4:	2403      	movs	r4, #3
 8003ae6:	40bc      	lsls	r4, r7
 8003ae8:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aec:	68cc      	ldr	r4, [r1, #12]
 8003aee:	40bc      	lsls	r4, r7
 8003af0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003af2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003af4:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003af6:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003afa:	684c      	ldr	r4, [r1, #4]
 8003afc:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8003b00:	409a      	lsls	r2, r3
 8003b02:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8003b04:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8003b06:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b08:	005f      	lsls	r7, r3, #1
 8003b0a:	2203      	movs	r2, #3
 8003b0c:	40ba      	lsls	r2, r7
 8003b0e:	43d2      	mvns	r2, r2
 8003b10:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b12:	688d      	ldr	r5, [r1, #8]
 8003b14:	40bd      	lsls	r5, r7
 8003b16:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8003b18:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b1a:	684c      	ldr	r4, [r1, #4]
 8003b1c:	2c02      	cmp	r4, #2
 8003b1e:	d001      	beq.n	8003b24 <HAL_GPIO_Init+0xe4>
 8003b20:	2c12      	cmp	r4, #18
 8003b22:	d113      	bne.n	8003b4c <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8003b24:	08dd      	lsrs	r5, r3, #3
 8003b26:	3508      	adds	r5, #8
 8003b28:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b2c:	f003 0407 	and.w	r4, r3, #7
 8003b30:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003b34:	240f      	movs	r4, #15
 8003b36:	fa04 f40c 	lsl.w	r4, r4, ip
 8003b3a:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b3e:	690c      	ldr	r4, [r1, #16]
 8003b40:	fa04 f40c 	lsl.w	r4, r4, ip
 8003b44:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003b48:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8003b4c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b4e:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b50:	684c      	ldr	r4, [r1, #4]
 8003b52:	f004 0403 	and.w	r4, r4, #3
 8003b56:	40bc      	lsls	r4, r7
 8003b58:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8003b5a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b5c:	684a      	ldr	r2, [r1, #4]
 8003b5e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8003b62:	d0aa      	beq.n	8003aba <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b64:	2200      	movs	r2, #0
 8003b66:	9201      	str	r2, [sp, #4]
 8003b68:	4a2b      	ldr	r2, [pc, #172]	; (8003c18 <HAL_GPIO_Init+0x1d8>)
 8003b6a:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8003b6c:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8003b70:	6454      	str	r4, [r2, #68]	; 0x44
 8003b72:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003b74:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003b78:	9201      	str	r2, [sp, #4]
 8003b7a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003b7c:	089c      	lsrs	r4, r3, #2
 8003b7e:	1ca5      	adds	r5, r4, #2
 8003b80:	4a23      	ldr	r2, [pc, #140]	; (8003c10 <HAL_GPIO_Init+0x1d0>)
 8003b82:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b86:	f003 0203 	and.w	r2, r3, #3
 8003b8a:	0095      	lsls	r5, r2, #2
 8003b8c:	220f      	movs	r2, #15
 8003b8e:	40aa      	lsls	r2, r5
 8003b90:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b94:	4a21      	ldr	r2, [pc, #132]	; (8003c1c <HAL_GPIO_Init+0x1dc>)
 8003b96:	4290      	cmp	r0, r2
 8003b98:	f43f af5b 	beq.w	8003a52 <HAL_GPIO_Init+0x12>
 8003b9c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ba0:	4290      	cmp	r0, r2
 8003ba2:	d022      	beq.n	8003bea <HAL_GPIO_Init+0x1aa>
 8003ba4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ba8:	4290      	cmp	r0, r2
 8003baa:	d020      	beq.n	8003bee <HAL_GPIO_Init+0x1ae>
 8003bac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bb0:	4290      	cmp	r0, r2
 8003bb2:	d01e      	beq.n	8003bf2 <HAL_GPIO_Init+0x1b2>
 8003bb4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bb8:	4290      	cmp	r0, r2
 8003bba:	d01c      	beq.n	8003bf6 <HAL_GPIO_Init+0x1b6>
 8003bbc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bc0:	4290      	cmp	r0, r2
 8003bc2:	d01a      	beq.n	8003bfa <HAL_GPIO_Init+0x1ba>
 8003bc4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bc8:	4290      	cmp	r0, r2
 8003bca:	d018      	beq.n	8003bfe <HAL_GPIO_Init+0x1be>
 8003bcc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bd0:	4290      	cmp	r0, r2
 8003bd2:	d016      	beq.n	8003c02 <HAL_GPIO_Init+0x1c2>
 8003bd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003bd8:	4290      	cmp	r0, r2
 8003bda:	d014      	beq.n	8003c06 <HAL_GPIO_Init+0x1c6>
 8003bdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003be0:	4290      	cmp	r0, r2
 8003be2:	f43f af34 	beq.w	8003a4e <HAL_GPIO_Init+0xe>
 8003be6:	220a      	movs	r2, #10
 8003be8:	e734      	b.n	8003a54 <HAL_GPIO_Init+0x14>
 8003bea:	2201      	movs	r2, #1
 8003bec:	e732      	b.n	8003a54 <HAL_GPIO_Init+0x14>
 8003bee:	2202      	movs	r2, #2
 8003bf0:	e730      	b.n	8003a54 <HAL_GPIO_Init+0x14>
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	e72e      	b.n	8003a54 <HAL_GPIO_Init+0x14>
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	e72c      	b.n	8003a54 <HAL_GPIO_Init+0x14>
 8003bfa:	2205      	movs	r2, #5
 8003bfc:	e72a      	b.n	8003a54 <HAL_GPIO_Init+0x14>
 8003bfe:	2206      	movs	r2, #6
 8003c00:	e728      	b.n	8003a54 <HAL_GPIO_Init+0x14>
 8003c02:	2207      	movs	r2, #7
 8003c04:	e726      	b.n	8003a54 <HAL_GPIO_Init+0x14>
 8003c06:	2208      	movs	r2, #8
 8003c08:	e724      	b.n	8003a54 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8003c0a:	b003      	add	sp, #12
 8003c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c0e:	4770      	bx	lr
 8003c10:	40013800 	.word	0x40013800
 8003c14:	40013c00 	.word	0x40013c00
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	40020000 	.word	0x40020000

08003c20 <HAL_GPIO_DeInit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c20:	2300      	movs	r3, #0
 8003c22:	2b0f      	cmp	r3, #15
 8003c24:	f200 8094 	bhi.w	8003d50 <HAL_GPIO_DeInit+0x130>
{
 8003c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c2a:	e029      	b.n	8003c80 <HAL_GPIO_DeInit+0x60>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FU << (4U * (position & 0x03U)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003c2c:	2709      	movs	r7, #9
 8003c2e:	e000      	b.n	8003c32 <HAL_GPIO_DeInit+0x12>
 8003c30:	2700      	movs	r7, #0
 8003c32:	fa07 f505 	lsl.w	r5, r7, r5
 8003c36:	42b5      	cmp	r5, r6
 8003c38:	d071      	beq.n	8003d1e <HAL_GPIO_DeInit+0xfe>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c3a:	6805      	ldr	r5, [r0, #0]
 8003c3c:	005e      	lsls	r6, r3, #1
 8003c3e:	2403      	movs	r4, #3
 8003c40:	40b4      	lsls	r4, r6
 8003c42:	43e4      	mvns	r4, r4
 8003c44:	4025      	ands	r5, r4
 8003c46:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c48:	08dd      	lsrs	r5, r3, #3
 8003c4a:	3508      	adds	r5, #8
 8003c4c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8003c50:	f003 0707 	and.w	r7, r3, #7
 8003c54:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 8003c58:	270f      	movs	r7, #15
 8003c5a:	fa07 f70c 	lsl.w	r7, r7, ip
 8003c5e:	ea26 0607 	bic.w	r6, r6, r7
 8003c62:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c66:	68c5      	ldr	r5, [r0, #12]
 8003c68:	4025      	ands	r5, r4
 8003c6a:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c6c:	6845      	ldr	r5, [r0, #4]
 8003c6e:	ea25 0202 	bic.w	r2, r5, r2
 8003c72:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c74:	6882      	ldr	r2, [r0, #8]
 8003c76:	4014      	ands	r4, r2
 8003c78:	6084      	str	r4, [r0, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	2b0f      	cmp	r3, #15
 8003c7e:	d866      	bhi.n	8003d4e <HAL_GPIO_DeInit+0x12e>
    ioposition = 0x01U << position;
 8003c80:	2201      	movs	r2, #1
 8003c82:	409a      	lsls	r2, r3
    iocurrent = (GPIO_Pin) & ioposition;
 8003c84:	ea02 0401 	and.w	r4, r2, r1
    if(iocurrent == ioposition)
 8003c88:	42a2      	cmp	r2, r4
 8003c8a:	d1f6      	bne.n	8003c7a <HAL_GPIO_DeInit+0x5a>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003c8c:	ea4f 0e93 	mov.w	lr, r3, lsr #2
 8003c90:	f10e 0602 	add.w	r6, lr, #2
 8003c94:	4d2f      	ldr	r5, [pc, #188]	; (8003d54 <HAL_GPIO_DeInit+0x134>)
 8003c96:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003c9a:	f003 0503 	and.w	r5, r3, #3
 8003c9e:	00ad      	lsls	r5, r5, #2
 8003ca0:	f04f 0c0f 	mov.w	ip, #15
 8003ca4:	fa0c fc05 	lsl.w	ip, ip, r5
 8003ca8:	ea0c 0606 	and.w	r6, ip, r6
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003cac:	4f2a      	ldr	r7, [pc, #168]	; (8003d58 <HAL_GPIO_DeInit+0x138>)
 8003cae:	42b8      	cmp	r0, r7
 8003cb0:	d0be      	beq.n	8003c30 <HAL_GPIO_DeInit+0x10>
 8003cb2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003cb6:	42b8      	cmp	r0, r7
 8003cb8:	d021      	beq.n	8003cfe <HAL_GPIO_DeInit+0xde>
 8003cba:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003cbe:	42b8      	cmp	r0, r7
 8003cc0:	d01f      	beq.n	8003d02 <HAL_GPIO_DeInit+0xe2>
 8003cc2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003cc6:	42b8      	cmp	r0, r7
 8003cc8:	d01d      	beq.n	8003d06 <HAL_GPIO_DeInit+0xe6>
 8003cca:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003cce:	42b8      	cmp	r0, r7
 8003cd0:	d01b      	beq.n	8003d0a <HAL_GPIO_DeInit+0xea>
 8003cd2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003cd6:	42b8      	cmp	r0, r7
 8003cd8:	d019      	beq.n	8003d0e <HAL_GPIO_DeInit+0xee>
 8003cda:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003cde:	42b8      	cmp	r0, r7
 8003ce0:	d017      	beq.n	8003d12 <HAL_GPIO_DeInit+0xf2>
 8003ce2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003ce6:	42b8      	cmp	r0, r7
 8003ce8:	d015      	beq.n	8003d16 <HAL_GPIO_DeInit+0xf6>
 8003cea:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003cee:	42b8      	cmp	r0, r7
 8003cf0:	d013      	beq.n	8003d1a <HAL_GPIO_DeInit+0xfa>
 8003cf2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8003cf6:	42b8      	cmp	r0, r7
 8003cf8:	d098      	beq.n	8003c2c <HAL_GPIO_DeInit+0xc>
 8003cfa:	270a      	movs	r7, #10
 8003cfc:	e799      	b.n	8003c32 <HAL_GPIO_DeInit+0x12>
 8003cfe:	2701      	movs	r7, #1
 8003d00:	e797      	b.n	8003c32 <HAL_GPIO_DeInit+0x12>
 8003d02:	2702      	movs	r7, #2
 8003d04:	e795      	b.n	8003c32 <HAL_GPIO_DeInit+0x12>
 8003d06:	2703      	movs	r7, #3
 8003d08:	e793      	b.n	8003c32 <HAL_GPIO_DeInit+0x12>
 8003d0a:	2704      	movs	r7, #4
 8003d0c:	e791      	b.n	8003c32 <HAL_GPIO_DeInit+0x12>
 8003d0e:	2705      	movs	r7, #5
 8003d10:	e78f      	b.n	8003c32 <HAL_GPIO_DeInit+0x12>
 8003d12:	2706      	movs	r7, #6
 8003d14:	e78d      	b.n	8003c32 <HAL_GPIO_DeInit+0x12>
 8003d16:	2707      	movs	r7, #7
 8003d18:	e78b      	b.n	8003c32 <HAL_GPIO_DeInit+0x12>
 8003d1a:	2708      	movs	r7, #8
 8003d1c:	e789      	b.n	8003c32 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003d1e:	4d0f      	ldr	r5, [pc, #60]	; (8003d5c <HAL_GPIO_DeInit+0x13c>)
 8003d20:	682e      	ldr	r6, [r5, #0]
 8003d22:	43e4      	mvns	r4, r4
 8003d24:	4026      	ands	r6, r4
 8003d26:	602e      	str	r6, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003d28:	686e      	ldr	r6, [r5, #4]
 8003d2a:	4026      	ands	r6, r4
 8003d2c:	606e      	str	r6, [r5, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003d2e:	68ae      	ldr	r6, [r5, #8]
 8003d30:	4026      	ands	r6, r4
 8003d32:	60ae      	str	r6, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003d34:	68ee      	ldr	r6, [r5, #12]
 8003d36:	4034      	ands	r4, r6
 8003d38:	60ec      	str	r4, [r5, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003d3a:	4e06      	ldr	r6, [pc, #24]	; (8003d54 <HAL_GPIO_DeInit+0x134>)
 8003d3c:	f10e 0402 	add.w	r4, lr, #2
 8003d40:	f856 5024 	ldr.w	r5, [r6, r4, lsl #2]
 8003d44:	ea25 050c 	bic.w	r5, r5, ip
 8003d48:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
 8003d4c:	e775      	b.n	8003c3a <HAL_GPIO_DeInit+0x1a>
    }
  }
}
 8003d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40013800 	.word	0x40013800
 8003d58:	40020000 	.word	0x40020000
 8003d5c:	40013c00 	.word	0x40013c00

08003d60 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003d60:	6903      	ldr	r3, [r0, #16]
 8003d62:	4219      	tst	r1, r3
 8003d64:	d101      	bne.n	8003d6a <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d66:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8003d68:	4770      	bx	lr
    bitstatus = GPIO_PIN_SET;
 8003d6a:	2001      	movs	r0, #1
 8003d6c:	4770      	bx	lr

08003d6e <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d6e:	b912      	cbnz	r2, 8003d76 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d70:	0409      	lsls	r1, r1, #16
 8003d72:	6181      	str	r1, [r0, #24]
  }
}
 8003d74:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8003d76:	6181      	str	r1, [r0, #24]
 8003d78:	4770      	bx	lr

08003d7a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003d7a:	6943      	ldr	r3, [r0, #20]
 8003d7c:	ea31 0303 	bics.w	r3, r1, r3
 8003d80:	d001      	beq.n	8003d86 <HAL_GPIO_TogglePin+0xc>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d82:	6181      	str	r1, [r0, #24]
  }
}
 8003d84:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003d86:	0409      	lsls	r1, r1, #16
 8003d88:	6181      	str	r1, [r0, #24]
 8003d8a:	4770      	bx	lr

08003d8c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d8c:	6803      	ldr	r3, [r0, #0]
 8003d8e:	695a      	ldr	r2, [r3, #20]
 8003d90:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003d94:	d011      	beq.n	8003dba <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d96:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d9a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003da0:	2220      	movs	r2, #32
 8003da2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003daa:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003dac:	f042 0204 	orr.w	r2, r2, #4
 8003db0:	6402      	str	r2, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003db2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

    return HAL_ERROR;
 8003db6:	2001      	movs	r0, #1
 8003db8:	4770      	bx	lr
  }
  return HAL_OK;
 8003dba:	2000      	movs	r0, #0
}
 8003dbc:	4770      	bx	lr

08003dbe <I2C_WaitOnFlagUntilTimeout>:
{
 8003dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc0:	4606      	mov	r6, r0
 8003dc2:	460c      	mov	r4, r1
 8003dc4:	4617      	mov	r7, r2
 8003dc6:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dc8:	e022      	b.n	8003e10 <I2C_WaitOnFlagUntilTimeout+0x52>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dca:	f7fe fe21 	bl	8002a10 <HAL_GetTick>
 8003dce:	9b06      	ldr	r3, [sp, #24]
 8003dd0:	1ac0      	subs	r0, r0, r3
 8003dd2:	42a8      	cmp	r0, r5
 8003dd4:	d800      	bhi.n	8003dd8 <I2C_WaitOnFlagUntilTimeout+0x1a>
 8003dd6:	b9dd      	cbnz	r5, 8003e10 <I2C_WaitOnFlagUntilTimeout+0x52>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003de2:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003de6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8003de8:	f042 0220 	orr.w	r2, r2, #32
 8003dec:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003dee:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        return HAL_ERROR;
 8003df2:	2001      	movs	r0, #1
 8003df4:	e01a      	b.n	8003e2c <I2C_WaitOnFlagUntilTimeout+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003df6:	6833      	ldr	r3, [r6, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	ea24 0303 	bic.w	r3, r4, r3
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	fab3 f383 	clz	r3, r3
 8003e04:	095b      	lsrs	r3, r3, #5
 8003e06:	429f      	cmp	r7, r3
 8003e08:	d10f      	bne.n	8003e2a <I2C_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 8003e0a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003e0e:	d1dc      	bne.n	8003dca <I2C_WaitOnFlagUntilTimeout+0xc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e10:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d0ee      	beq.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0x38>
 8003e18:	6833      	ldr	r3, [r6, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	ea24 0303 	bic.w	r3, r4, r3
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	fab3 f383 	clz	r3, r3
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	e7ed      	b.n	8003e06 <I2C_WaitOnFlagUntilTimeout+0x48>
  return HAL_OK;
 8003e2a:	2000      	movs	r0, #0
}
 8003e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e30:	4604      	mov	r4, r0
 8003e32:	460d      	mov	r5, r1
 8003e34:	4616      	mov	r6, r2
 8003e36:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e38:	e03c      	b.n	8003eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e40:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e48:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e54:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e58:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e5a:	f042 0204 	orr.w	r2, r2, #4
 8003e5e:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003e60:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8003e64:	2001      	movs	r0, #1
 8003e66:	e033      	b.n	8003ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e68:	f7fe fdd2 	bl	8002a10 <HAL_GetTick>
 8003e6c:	1bc0      	subs	r0, r0, r7
 8003e6e:	42b0      	cmp	r0, r6
 8003e70:	d800      	bhi.n	8003e74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x46>
 8003e72:	b9fe      	cbnz	r6, 8003eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e74:	2300      	movs	r3, #0
 8003e76:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e82:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e84:	f042 0220 	orr.w	r2, r2, #32
 8003e88:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003e8a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003e8e:	2001      	movs	r0, #1
 8003e90:	e01e      	b.n	8003ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	ea25 0303 	bic.w	r3, r5, r3
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3300      	adds	r3, #0
 8003e9e:	bf18      	it	ne
 8003ea0:	2301      	movne	r3, #1
 8003ea2:	b1a3      	cbz	r3, 8003ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003eac:	d1c5      	bne.n	8003e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
    if (Timeout != HAL_MAX_DELAY)
 8003eae:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8003eb2:	d1d9      	bne.n	8003e68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003eb4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d0ea      	beq.n	8003e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x64>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	ea25 0303 	bic.w	r3, r5, r3
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3300      	adds	r3, #0
 8003ec8:	bf18      	it	ne
 8003eca:	2301      	movne	r3, #1
 8003ecc:	e7e9      	b.n	8003ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
  return HAL_OK;
 8003ece:	2000      	movs	r0, #0
}
 8003ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ed4 <I2C_MasterRequestWrite>:
{
 8003ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	4604      	mov	r4, r0
 8003eda:	460f      	mov	r7, r1
 8003edc:	4615      	mov	r5, r2
 8003ede:	461e      	mov	r6, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ee0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d00d      	beq.n	8003f02 <I2C_MasterRequestWrite+0x2e>
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d00b      	beq.n	8003f02 <I2C_MasterRequestWrite+0x2e>
 8003eea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003eee:	d008      	beq.n	8003f02 <I2C_MasterRequestWrite+0x2e>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ef0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003ef2:	2b12      	cmp	r3, #18
 8003ef4:	d10a      	bne.n	8003f0c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ef6:	6802      	ldr	r2, [r0, #0]
 8003ef8:	6813      	ldr	r3, [r2, #0]
 8003efa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	e004      	b.n	8003f0c <I2C_MasterRequestWrite+0x38>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f02:	6822      	ldr	r2, [r4, #0]
 8003f04:	6813      	ldr	r3, [r2, #0]
 8003f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f0a:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f0c:	9600      	str	r6, [sp, #0]
 8003f0e:	462b      	mov	r3, r5
 8003f10:	2200      	movs	r2, #0
 8003f12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f16:	4620      	mov	r0, r4
 8003f18:	f7ff ff51 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 8003f1c:	b158      	cbz	r0, 8003f36 <I2C_MasterRequestWrite+0x62>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003f26:	d02b      	beq.n	8003f80 <I2C_MasterRequestWrite+0xac>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f2c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	b003      	add	sp, #12
 8003f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f36:	6923      	ldr	r3, [r4, #16]
 8003f38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f3c:	d10e      	bne.n	8003f5c <I2C_MasterRequestWrite+0x88>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 8003f44:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f46:	4633      	mov	r3, r6
 8003f48:	462a      	mov	r2, r5
 8003f4a:	490f      	ldr	r1, [pc, #60]	; (8003f88 <I2C_MasterRequestWrite+0xb4>)
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	f7ff ff6e 	bl	8003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2800      	cmp	r0, #0
 8003f56:	d0eb      	beq.n	8003f30 <I2C_MasterRequestWrite+0x5c>
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e7e9      	b.n	8003f30 <I2C_MasterRequestWrite+0x5c>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f5c:	11fb      	asrs	r3, r7, #7
 8003f5e:	6822      	ldr	r2, [r4, #0]
 8003f60:	f003 0306 	and.w	r3, r3, #6
 8003f64:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8003f68:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f6a:	4633      	mov	r3, r6
 8003f6c:	462a      	mov	r2, r5
 8003f6e:	4907      	ldr	r1, [pc, #28]	; (8003f8c <I2C_MasterRequestWrite+0xb8>)
 8003f70:	4620      	mov	r0, r4
 8003f72:	f7ff ff5c 	bl	8003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f76:	b928      	cbnz	r0, 8003f84 <I2C_MasterRequestWrite+0xb0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	b2ff      	uxtb	r7, r7
 8003f7c:	611f      	str	r7, [r3, #16]
 8003f7e:	e7e2      	b.n	8003f46 <I2C_MasterRequestWrite+0x72>
    return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e7d5      	b.n	8003f30 <I2C_MasterRequestWrite+0x5c>
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e7d3      	b.n	8003f30 <I2C_MasterRequestWrite+0x5c>
 8003f88:	00010002 	.word	0x00010002
 8003f8c:	00010008 	.word	0x00010008

08003f90 <I2C_MasterRequestRead>:
{
 8003f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	4604      	mov	r4, r0
 8003f98:	460d      	mov	r5, r1
 8003f9a:	4616      	mov	r6, r2
 8003f9c:	461f      	mov	r7, r3
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f9e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa0:	6801      	ldr	r1, [r0, #0]
 8003fa2:	680b      	ldr	r3, [r1, #0]
 8003fa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fa8:	600b      	str	r3, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003faa:	2a08      	cmp	r2, #8
 8003fac:	d00d      	beq.n	8003fca <I2C_MasterRequestRead+0x3a>
 8003fae:	2a01      	cmp	r2, #1
 8003fb0:	d00b      	beq.n	8003fca <I2C_MasterRequestRead+0x3a>
 8003fb2:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8003fb6:	d008      	beq.n	8003fca <I2C_MasterRequestRead+0x3a>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003fb8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003fba:	2b11      	cmp	r3, #17
 8003fbc:	d10a      	bne.n	8003fd4 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fbe:	6802      	ldr	r2, [r0, #0]
 8003fc0:	6813      	ldr	r3, [r2, #0]
 8003fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc6:	6013      	str	r3, [r2, #0]
 8003fc8:	e004      	b.n	8003fd4 <I2C_MasterRequestRead+0x44>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fca:	6822      	ldr	r2, [r4, #0]
 8003fcc:	6813      	ldr	r3, [r2, #0]
 8003fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd2:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd4:	9700      	str	r7, [sp, #0]
 8003fd6:	4633      	mov	r3, r6
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f7ff feed 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 8003fe4:	b160      	cbz	r0, 8004000 <I2C_MasterRequestRead+0x70>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003fee:	d05b      	beq.n	80040a8 <I2C_MasterRequestRead+0x118>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ff4:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	b004      	add	sp, #16
 8003ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004000:	6923      	ldr	r3, [r4, #16]
 8004002:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004006:	d10f      	bne.n	8004028 <I2C_MasterRequestRead+0x98>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004008:	6823      	ldr	r3, [r4, #0]
 800400a:	f045 0501 	orr.w	r5, r5, #1
 800400e:	b2ed      	uxtb	r5, r5
 8004010:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004012:	463b      	mov	r3, r7
 8004014:	4632      	mov	r2, r6
 8004016:	4926      	ldr	r1, [pc, #152]	; (80040b0 <I2C_MasterRequestRead+0x120>)
 8004018:	4620      	mov	r0, r4
 800401a:	f7ff ff08 	bl	8003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800401e:	4603      	mov	r3, r0
 8004020:	2800      	cmp	r0, #0
 8004022:	d0e9      	beq.n	8003ff8 <I2C_MasterRequestRead+0x68>
    return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e7e7      	b.n	8003ff8 <I2C_MasterRequestRead+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004028:	ea4f 18e5 	mov.w	r8, r5, asr #7
 800402c:	f008 0806 	and.w	r8, r8, #6
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8004036:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004038:	463b      	mov	r3, r7
 800403a:	4632      	mov	r2, r6
 800403c:	491d      	ldr	r1, [pc, #116]	; (80040b4 <I2C_MasterRequestRead+0x124>)
 800403e:	4620      	mov	r0, r4
 8004040:	f7ff fef5 	bl	8003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004044:	b108      	cbz	r0, 800404a <I2C_MasterRequestRead+0xba>
      return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e7d6      	b.n	8003ff8 <I2C_MasterRequestRead+0x68>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	b2ed      	uxtb	r5, r5
 800404e:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004050:	463b      	mov	r3, r7
 8004052:	4632      	mov	r2, r6
 8004054:	4916      	ldr	r1, [pc, #88]	; (80040b0 <I2C_MasterRequestRead+0x120>)
 8004056:	4620      	mov	r0, r4
 8004058:	f7ff fee9 	bl	8003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800405c:	b108      	cbz	r0, 8004062 <I2C_MasterRequestRead+0xd2>
      return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e7ca      	b.n	8003ff8 <I2C_MasterRequestRead+0x68>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004062:	2200      	movs	r2, #0
 8004064:	9203      	str	r2, [sp, #12]
 8004066:	6823      	ldr	r3, [r4, #0]
 8004068:	6959      	ldr	r1, [r3, #20]
 800406a:	9103      	str	r1, [sp, #12]
 800406c:	6999      	ldr	r1, [r3, #24]
 800406e:	9103      	str	r1, [sp, #12]
 8004070:	9903      	ldr	r1, [sp, #12]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004072:	6819      	ldr	r1, [r3, #0]
 8004074:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004078:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800407a:	9700      	str	r7, [sp, #0]
 800407c:	4633      	mov	r3, r6
 800407e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004082:	4620      	mov	r0, r4
 8004084:	f7ff fe9b 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 8004088:	b148      	cbz	r0, 800409e <I2C_MasterRequestRead+0x10e>
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004092:	d00b      	beq.n	80040ac <I2C_MasterRequestRead+0x11c>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004098:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e7ac      	b.n	8003ff8 <I2C_MasterRequestRead+0x68>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800409e:	6822      	ldr	r2, [r4, #0]
 80040a0:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80040a4:	6113      	str	r3, [r2, #16]
 80040a6:	e7b4      	b.n	8004012 <I2C_MasterRequestRead+0x82>
    return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e7a5      	b.n	8003ff8 <I2C_MasterRequestRead+0x68>
      return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e7a3      	b.n	8003ff8 <I2C_MasterRequestRead+0x68>
 80040b0:	00010002 	.word	0x00010002
 80040b4:	00010008 	.word	0x00010008

080040b8 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	4604      	mov	r4, r0
 80040bc:	460d      	mov	r5, r1
 80040be:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80040c8:	d11c      	bne.n	8004104 <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040ca:	4620      	mov	r0, r4
 80040cc:	f7ff fe5e 	bl	8003d8c <I2C_IsAcknowledgeFailed>
 80040d0:	b9d0      	cbnz	r0, 8004108 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80040d2:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80040d6:	d0f3      	beq.n	80040c0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d8:	f7fe fc9a 	bl	8002a10 <HAL_GetTick>
 80040dc:	1b80      	subs	r0, r0, r6
 80040de:	42a8      	cmp	r0, r5
 80040e0:	d801      	bhi.n	80040e6 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80040e2:	2d00      	cmp	r5, #0
 80040e4:	d1ec      	bne.n	80040c0 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ea:	2220      	movs	r2, #32
 80040ec:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040f0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040f4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040f6:	f042 0220 	orr.w	r2, r2, #32
 80040fa:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80040fc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004100:	2001      	movs	r0, #1
 8004102:	e000      	b.n	8004106 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 8004104:	2000      	movs	r0, #0
}
 8004106:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004108:	2001      	movs	r0, #1
 800410a:	e7fc      	b.n	8004106 <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

0800410c <I2C_RequestMemoryWrite>:
{
 800410c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	4604      	mov	r4, r0
 8004114:	4688      	mov	r8, r1
 8004116:	4616      	mov	r6, r2
 8004118:	461f      	mov	r7, r3
 800411a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800411c:	6802      	ldr	r2, [r0, #0]
 800411e:	6813      	ldr	r3, [r2, #0]
 8004120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004124:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004126:	9500      	str	r5, [sp, #0]
 8004128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800412a:	2200      	movs	r2, #0
 800412c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004130:	f7ff fe45 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 8004134:	b160      	cbz	r0, 8004150 <I2C_RequestMemoryWrite+0x44>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004136:	6823      	ldr	r3, [r4, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800413e:	d04f      	beq.n	80041e0 <I2C_RequestMemoryWrite+0xd4>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004144:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
}
 8004148:	4618      	mov	r0, r3
 800414a:	b004      	add	sp, #16
 800414c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004150:	6822      	ldr	r2, [r4, #0]
 8004152:	f008 03fe 	and.w	r3, r8, #254	; 0xfe
 8004156:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004158:	462b      	mov	r3, r5
 800415a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800415c:	4921      	ldr	r1, [pc, #132]	; (80041e4 <I2C_RequestMemoryWrite+0xd8>)
 800415e:	4620      	mov	r0, r4
 8004160:	f7ff fe65 	bl	8003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004164:	b108      	cbz	r0, 800416a <I2C_RequestMemoryWrite+0x5e>
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e7ee      	b.n	8004148 <I2C_RequestMemoryWrite+0x3c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800416a:	2300      	movs	r3, #0
 800416c:	9303      	str	r3, [sp, #12]
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	9203      	str	r2, [sp, #12]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	9303      	str	r3, [sp, #12]
 8004178:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417a:	462a      	mov	r2, r5
 800417c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800417e:	4620      	mov	r0, r4
 8004180:	f7ff ff9a 	bl	80040b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004184:	4603      	mov	r3, r0
 8004186:	b158      	cbz	r0, 80041a0 <I2C_RequestMemoryWrite+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004188:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800418a:	2b04      	cmp	r3, #4
 800418c:	d001      	beq.n	8004192 <I2C_RequestMemoryWrite+0x86>
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e7da      	b.n	8004148 <I2C_RequestMemoryWrite+0x3c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004192:	6822      	ldr	r2, [r4, #0]
 8004194:	6813      	ldr	r3, [r2, #0]
 8004196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800419a:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e7d3      	b.n	8004148 <I2C_RequestMemoryWrite+0x3c>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041a0:	2f01      	cmp	r7, #1
 80041a2:	d00e      	beq.n	80041c2 <I2C_RequestMemoryWrite+0xb6>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041a4:	6823      	ldr	r3, [r4, #0]
 80041a6:	0a32      	lsrs	r2, r6, #8
 80041a8:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041aa:	462a      	mov	r2, r5
 80041ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80041ae:	4620      	mov	r0, r4
 80041b0:	f7ff ff82 	bl	80040b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	b178      	cbz	r0, 80041d8 <I2C_RequestMemoryWrite+0xcc>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d005      	beq.n	80041ca <I2C_RequestMemoryWrite+0xbe>
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e7c2      	b.n	8004148 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041c2:	6822      	ldr	r2, [r4, #0]
 80041c4:	b2f6      	uxtb	r6, r6
 80041c6:	6116      	str	r6, [r2, #16]
 80041c8:	e7be      	b.n	8004148 <I2C_RequestMemoryWrite+0x3c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ca:	6822      	ldr	r2, [r4, #0]
 80041cc:	6813      	ldr	r3, [r2, #0]
 80041ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041d2:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e7b7      	b.n	8004148 <I2C_RequestMemoryWrite+0x3c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041d8:	6822      	ldr	r2, [r4, #0]
 80041da:	b2f6      	uxtb	r6, r6
 80041dc:	6116      	str	r6, [r2, #16]
 80041de:	e7b3      	b.n	8004148 <I2C_RequestMemoryWrite+0x3c>
    return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e7b1      	b.n	8004148 <I2C_RequestMemoryWrite+0x3c>
 80041e4:	00010002 	.word	0x00010002

080041e8 <I2C_RequestMemoryRead>:
{
 80041e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	4604      	mov	r4, r0
 80041f0:	460e      	mov	r6, r1
 80041f2:	4617      	mov	r7, r2
 80041f4:	4698      	mov	r8, r3
 80041f6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f8:	6802      	ldr	r2, [r0, #0]
 80041fa:	6813      	ldr	r3, [r2, #0]
 80041fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004200:	6013      	str	r3, [r2, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004202:	6802      	ldr	r2, [r0, #0]
 8004204:	6813      	ldr	r3, [r2, #0]
 8004206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420a:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800420c:	9500      	str	r5, [sp, #0]
 800420e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004210:	2200      	movs	r2, #0
 8004212:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004216:	f7ff fdd2 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 800421a:	b168      	cbz	r0, 8004238 <I2C_RequestMemoryRead+0x50>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004224:	f000 8089 	beq.w	800433a <I2C_RequestMemoryRead+0x152>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800422c:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
}
 8004230:	4618      	mov	r0, r3
 8004232:	b004      	add	sp, #16
 8004234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004238:	b2f6      	uxtb	r6, r6
 800423a:	6823      	ldr	r3, [r4, #0]
 800423c:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
 8004240:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004242:	462b      	mov	r3, r5
 8004244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004246:	493f      	ldr	r1, [pc, #252]	; (8004344 <I2C_RequestMemoryRead+0x15c>)
 8004248:	4620      	mov	r0, r4
 800424a:	f7ff fdf0 	bl	8003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800424e:	b108      	cbz	r0, 8004254 <I2C_RequestMemoryRead+0x6c>
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e7ed      	b.n	8004230 <I2C_RequestMemoryRead+0x48>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004254:	2300      	movs	r3, #0
 8004256:	9303      	str	r3, [sp, #12]
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	695a      	ldr	r2, [r3, #20]
 800425c:	9203      	str	r2, [sp, #12]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	9303      	str	r3, [sp, #12]
 8004262:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004264:	462a      	mov	r2, r5
 8004266:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004268:	4620      	mov	r0, r4
 800426a:	f7ff ff25 	bl	80040b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800426e:	b158      	cbz	r0, 8004288 <I2C_RequestMemoryRead+0xa0>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004270:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004272:	2b04      	cmp	r3, #4
 8004274:	d001      	beq.n	800427a <I2C_RequestMemoryRead+0x92>
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e7da      	b.n	8004230 <I2C_RequestMemoryRead+0x48>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427a:	6822      	ldr	r2, [r4, #0]
 800427c:	6813      	ldr	r3, [r2, #0]
 800427e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004282:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e7d3      	b.n	8004230 <I2C_RequestMemoryRead+0x48>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004288:	f1b8 0f01 	cmp.w	r8, #1
 800428c:	d10d      	bne.n	80042aa <I2C_RequestMemoryRead+0xc2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	b2ff      	uxtb	r7, r7
 8004292:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004294:	462a      	mov	r2, r5
 8004296:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004298:	4620      	mov	r0, r4
 800429a:	f7ff ff0d 	bl	80040b8 <I2C_WaitOnTXEFlagUntilTimeout>
 800429e:	b320      	cbz	r0, 80042ea <I2C_RequestMemoryRead+0x102>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d01a      	beq.n	80042dc <I2C_RequestMemoryRead+0xf4>
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e7c2      	b.n	8004230 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042aa:	6823      	ldr	r3, [r4, #0]
 80042ac:	0a3a      	lsrs	r2, r7, #8
 80042ae:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b0:	462a      	mov	r2, r5
 80042b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80042b4:	4620      	mov	r0, r4
 80042b6:	f7ff feff 	bl	80040b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80042ba:	b158      	cbz	r0, 80042d4 <I2C_RequestMemoryRead+0xec>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d001      	beq.n	80042c6 <I2C_RequestMemoryRead+0xde>
      return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e7b4      	b.n	8004230 <I2C_RequestMemoryRead+0x48>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c6:	6822      	ldr	r2, [r4, #0]
 80042c8:	6813      	ldr	r3, [r2, #0]
 80042ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042ce:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e7ad      	b.n	8004230 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	b2ff      	uxtb	r7, r7
 80042d8:	611f      	str	r7, [r3, #16]
 80042da:	e7db      	b.n	8004294 <I2C_RequestMemoryRead+0xac>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042dc:	6822      	ldr	r2, [r4, #0]
 80042de:	6813      	ldr	r3, [r2, #0]
 80042e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042e4:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e7a2      	b.n	8004230 <I2C_RequestMemoryRead+0x48>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ea:	6822      	ldr	r2, [r4, #0]
 80042ec:	6813      	ldr	r3, [r2, #0]
 80042ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f2:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f4:	9500      	str	r5, [sp, #0]
 80042f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042f8:	2200      	movs	r2, #0
 80042fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042fe:	4620      	mov	r0, r4
 8004300:	f7ff fd5d 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 8004304:	b148      	cbz	r0, 800431a <I2C_RequestMemoryRead+0x132>
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800430e:	d016      	beq.n	800433e <I2C_RequestMemoryRead+0x156>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004314:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e78a      	b.n	8004230 <I2C_RequestMemoryRead+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800431a:	6823      	ldr	r3, [r4, #0]
 800431c:	f046 0601 	orr.w	r6, r6, #1
 8004320:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004322:	462b      	mov	r3, r5
 8004324:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004326:	4907      	ldr	r1, [pc, #28]	; (8004344 <I2C_RequestMemoryRead+0x15c>)
 8004328:	4620      	mov	r0, r4
 800432a:	f7ff fd80 	bl	8003e2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2800      	cmp	r0, #0
 8004332:	f43f af7d 	beq.w	8004230 <I2C_RequestMemoryRead+0x48>
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e77a      	b.n	8004230 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e778      	b.n	8004230 <I2C_RequestMemoryRead+0x48>
    return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e776      	b.n	8004230 <I2C_RequestMemoryRead+0x48>
 8004342:	bf00      	nop
 8004344:	00010002 	.word	0x00010002

08004348 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	4604      	mov	r4, r0
 800434c:	460d      	mov	r5, r1
 800434e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004350:	6823      	ldr	r3, [r4, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	f013 0f04 	tst.w	r3, #4
 8004358:	d11c      	bne.n	8004394 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800435a:	4620      	mov	r0, r4
 800435c:	f7ff fd16 	bl	8003d8c <I2C_IsAcknowledgeFailed>
 8004360:	b9d0      	cbnz	r0, 8004398 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8004362:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8004366:	d0f3      	beq.n	8004350 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004368:	f7fe fb52 	bl	8002a10 <HAL_GetTick>
 800436c:	1b80      	subs	r0, r0, r6
 800436e:	42a8      	cmp	r0, r5
 8004370:	d801      	bhi.n	8004376 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8004372:	2d00      	cmp	r5, #0
 8004374:	d1ec      	bne.n	8004350 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004376:	2300      	movs	r3, #0
 8004378:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800437a:	2220      	movs	r2, #32
 800437c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004380:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004384:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004386:	f042 0220 	orr.w	r2, r2, #32
 800438a:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800438c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8004390:	2001      	movs	r0, #1
 8004392:	e000      	b.n	8004396 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8004394:	2000      	movs	r0, #0
}
 8004396:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8004398:	2001      	movs	r0, #1
 800439a:	e7fc      	b.n	8004396 <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

0800439c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800439c:	b570      	push	{r4, r5, r6, lr}
 800439e:	4605      	mov	r5, r0
 80043a0:	460c      	mov	r4, r1
 80043a2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	695a      	ldr	r2, [r3, #20]
 80043a8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80043ac:	d129      	bne.n	8004402 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	f012 0f10 	tst.w	r2, #16
 80043b4:	d115      	bne.n	80043e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b6:	f7fe fb2b 	bl	8002a10 <HAL_GetTick>
 80043ba:	1b80      	subs	r0, r0, r6
 80043bc:	42a0      	cmp	r0, r4
 80043be:	d801      	bhi.n	80043c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
 80043c0:	2c00      	cmp	r4, #0
 80043c2:	d1ef      	bne.n	80043a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043c4:	2300      	movs	r3, #0
 80043c6:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043c8:	2220      	movs	r2, #32
 80043ca:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ce:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80043d4:	f042 0220 	orr.w	r2, r2, #32
 80043d8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80043da:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80043de:	2001      	movs	r0, #1
}
 80043e0:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043e2:	f06f 0210 	mvn.w	r2, #16
 80043e6:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043e8:	2300      	movs	r3, #0
 80043ea:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043ec:	2220      	movs	r2, #32
 80043ee:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f2:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043f6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80043f8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80043fa:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80043fe:	2001      	movs	r0, #1
 8004400:	e7ee      	b.n	80043e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
  return HAL_OK;
 8004402:	2000      	movs	r0, #0
 8004404:	e7ec      	b.n	80043e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
	...

08004408 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004408:	2800      	cmp	r0, #0
 800440a:	f000 80c8 	beq.w	800459e <HAL_I2C_Init+0x196>
{
 800440e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004410:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004412:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004416:	2b00      	cmp	r3, #0
 8004418:	d075      	beq.n	8004506 <HAL_I2C_Init+0xfe>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800441a:	2324      	movs	r3, #36	; 0x24
 800441c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004420:	6822      	ldr	r2, [r4, #0]
 8004422:	6813      	ldr	r3, [r2, #0]
 8004424:	f023 0301 	bic.w	r3, r3, #1
 8004428:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800442a:	6822      	ldr	r2, [r4, #0]
 800442c:	6813      	ldr	r3, [r2, #0]
 800442e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004432:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004434:	6822      	ldr	r2, [r4, #0]
 8004436:	6813      	ldr	r3, [r2, #0]
 8004438:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800443c:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800443e:	f001 fa07 	bl	8005850 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004442:	6862      	ldr	r2, [r4, #4]
 8004444:	4b58      	ldr	r3, [pc, #352]	; (80045a8 <HAL_I2C_Init+0x1a0>)
 8004446:	429a      	cmp	r2, r3
 8004448:	d862      	bhi.n	8004510 <HAL_I2C_Init+0x108>
 800444a:	4b58      	ldr	r3, [pc, #352]	; (80045ac <HAL_I2C_Init+0x1a4>)
 800444c:	4298      	cmp	r0, r3
 800444e:	bf8c      	ite	hi
 8004450:	2300      	movhi	r3, #0
 8004452:	2301      	movls	r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	f040 80a4 	bne.w	80045a2 <HAL_I2C_Init+0x19a>
  freqrange = I2C_FREQRANGE(pclk1);
 800445a:	4b55      	ldr	r3, [pc, #340]	; (80045b0 <HAL_I2C_Init+0x1a8>)
 800445c:	fba3 2300 	umull	r2, r3, r3, r0
 8004460:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004462:	6821      	ldr	r1, [r4, #0]
 8004464:	684a      	ldr	r2, [r1, #4]
 8004466:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800446a:	431a      	orrs	r2, r3
 800446c:	604a      	str	r2, [r1, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800446e:	6825      	ldr	r5, [r4, #0]
 8004470:	6a2a      	ldr	r2, [r5, #32]
 8004472:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8004476:	6866      	ldr	r6, [r4, #4]
 8004478:	494b      	ldr	r1, [pc, #300]	; (80045a8 <HAL_I2C_Init+0x1a0>)
 800447a:	428e      	cmp	r6, r1
 800447c:	d84e      	bhi.n	800451c <HAL_I2C_Init+0x114>
 800447e:	3301      	adds	r3, #1
 8004480:	4313      	orrs	r3, r2
 8004482:	622b      	str	r3, [r5, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004484:	6825      	ldr	r5, [r4, #0]
 8004486:	69e9      	ldr	r1, [r5, #28]
 8004488:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800448c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8004490:	6863      	ldr	r3, [r4, #4]
 8004492:	4a45      	ldr	r2, [pc, #276]	; (80045a8 <HAL_I2C_Init+0x1a0>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d84b      	bhi.n	8004530 <HAL_I2C_Init+0x128>
 8004498:	3801      	subs	r0, #1
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a0:	3301      	adds	r3, #1
 80044a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	bf38      	it	cc
 80044aa:	2304      	movcc	r3, #4
 80044ac:	430b      	orrs	r3, r1
 80044ae:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044b0:	6821      	ldr	r1, [r4, #0]
 80044b2:	680b      	ldr	r3, [r1, #0]
 80044b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80044b8:	69e2      	ldr	r2, [r4, #28]
 80044ba:	6a20      	ldr	r0, [r4, #32]
 80044bc:	4302      	orrs	r2, r0
 80044be:	4313      	orrs	r3, r2
 80044c0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044c2:	6821      	ldr	r1, [r4, #0]
 80044c4:	688b      	ldr	r3, [r1, #8]
 80044c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044ce:	6922      	ldr	r2, [r4, #16]
 80044d0:	68e0      	ldr	r0, [r4, #12]
 80044d2:	4302      	orrs	r2, r0
 80044d4:	4313      	orrs	r3, r2
 80044d6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044d8:	6821      	ldr	r1, [r4, #0]
 80044da:	68cb      	ldr	r3, [r1, #12]
 80044dc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044e0:	6962      	ldr	r2, [r4, #20]
 80044e2:	69a0      	ldr	r0, [r4, #24]
 80044e4:	4302      	orrs	r2, r0
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	6813      	ldr	r3, [r2, #0]
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f4:	2000      	movs	r0, #0
 80044f6:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044f8:	2320      	movs	r3, #32
 80044fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044fe:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004500:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8004504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004506:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800450a:	f7fd fbf1 	bl	8001cf0 <HAL_I2C_MspInit>
 800450e:	e784      	b.n	800441a <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004510:	4b28      	ldr	r3, [pc, #160]	; (80045b4 <HAL_I2C_Init+0x1ac>)
 8004512:	4298      	cmp	r0, r3
 8004514:	bf8c      	ite	hi
 8004516:	2300      	movhi	r3, #0
 8004518:	2301      	movls	r3, #1
 800451a:	e79b      	b.n	8004454 <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800451c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004520:	fb01 f303 	mul.w	r3, r1, r3
 8004524:	4924      	ldr	r1, [pc, #144]	; (80045b8 <HAL_I2C_Init+0x1b0>)
 8004526:	fba1 1303 	umull	r1, r3, r1, r3
 800452a:	099b      	lsrs	r3, r3, #6
 800452c:	3301      	adds	r3, #1
 800452e:	e7a7      	b.n	8004480 <HAL_I2C_Init+0x78>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004530:	68a2      	ldr	r2, [r4, #8]
 8004532:	b9ba      	cbnz	r2, 8004564 <HAL_I2C_Init+0x15c>
 8004534:	1e46      	subs	r6, r0, #1
 8004536:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 800453a:	fbb6 f6f7 	udiv	r6, r6, r7
 800453e:	3601      	adds	r6, #1
 8004540:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8004544:	fab6 f686 	clz	r6, r6
 8004548:	0976      	lsrs	r6, r6, #5
 800454a:	bb36      	cbnz	r6, 800459a <HAL_I2C_Init+0x192>
 800454c:	b9c2      	cbnz	r2, 8004580 <HAL_I2C_Init+0x178>
 800454e:	3801      	subs	r0, #1
 8004550:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004554:	fbb0 f3f3 	udiv	r3, r0, r3
 8004558:	3301      	adds	r3, #1
 800455a:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800455e:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 8004562:	e7a3      	b.n	80044ac <HAL_I2C_Init+0xa4>
 8004564:	1e46      	subs	r6, r0, #1
 8004566:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 800456a:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800456e:	fbb6 f6f7 	udiv	r6, r6, r7
 8004572:	3601      	adds	r6, #1
 8004574:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8004578:	fab6 f686 	clz	r6, r6
 800457c:	0976      	lsrs	r6, r6, #5
 800457e:	e7e4      	b.n	800454a <HAL_I2C_Init+0x142>
 8004580:	3801      	subs	r0, #1
 8004582:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004586:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800458a:	fbb0 f2f3 	udiv	r2, r0, r3
 800458e:	3201      	adds	r2, #1
 8004590:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8004594:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8004598:	e788      	b.n	80044ac <HAL_I2C_Init+0xa4>
 800459a:	2301      	movs	r3, #1
 800459c:	e786      	b.n	80044ac <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 800459e:	2001      	movs	r0, #1
}
 80045a0:	4770      	bx	lr
    return HAL_ERROR;
 80045a2:	2001      	movs	r0, #1
 80045a4:	e7ae      	b.n	8004504 <HAL_I2C_Init+0xfc>
 80045a6:	bf00      	nop
 80045a8:	000186a0 	.word	0x000186a0
 80045ac:	001e847f 	.word	0x001e847f
 80045b0:	431bde83 	.word	0x431bde83
 80045b4:	003d08ff 	.word	0x003d08ff
 80045b8:	10624dd3 	.word	0x10624dd3

080045bc <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 80045bc:	b1a8      	cbz	r0, 80045ea <HAL_I2C_DeInit+0x2e>
{
 80045be:	b510      	push	{r4, lr}
 80045c0:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 80045c2:	2324      	movs	r3, #36	; 0x24
 80045c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80045c8:	6802      	ldr	r2, [r0, #0]
 80045ca:	6813      	ldr	r3, [r2, #0]
 80045cc:	f023 0301 	bic.w	r3, r3, #1
 80045d0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80045d2:	f7fd fbf3 	bl	8001dbc <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80045d6:	2000      	movs	r0, #0
 80045d8:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80045da:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045de:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045e0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  __HAL_UNLOCK(hi2c);
 80045e4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80045e8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80045ea:	2001      	movs	r0, #1
}
 80045ec:	4770      	bx	lr
	...

080045f0 <HAL_I2C_Master_Transmit>:
{
 80045f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	4604      	mov	r4, r0
 80045f8:	460e      	mov	r6, r1
 80045fa:	4690      	mov	r8, r2
 80045fc:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 80045fe:	f7fe fa07 	bl	8002a10 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004602:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b20      	cmp	r3, #32
 800460a:	d004      	beq.n	8004616 <HAL_I2C_Master_Transmit+0x26>
    return HAL_BUSY;
 800460c:	2602      	movs	r6, #2
}
 800460e:	4630      	mov	r0, r6
 8004610:	b004      	add	sp, #16
 8004612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004616:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004618:	9000      	str	r0, [sp, #0]
 800461a:	2319      	movs	r3, #25
 800461c:	2201      	movs	r2, #1
 800461e:	494f      	ldr	r1, [pc, #316]	; (800475c <HAL_I2C_Master_Transmit+0x16c>)
 8004620:	4620      	mov	r0, r4
 8004622:	f7ff fbcc 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 8004626:	2800      	cmp	r0, #0
 8004628:	f040 8091 	bne.w	800474e <HAL_I2C_Master_Transmit+0x15e>
    __HAL_LOCK(hi2c);
 800462c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004630:	2b01      	cmp	r3, #1
 8004632:	f000 808e 	beq.w	8004752 <HAL_I2C_Master_Transmit+0x162>
 8004636:	2301      	movs	r3, #1
 8004638:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	f012 0f01 	tst.w	r2, #1
 8004644:	d103      	bne.n	800464e <HAL_I2C_Master_Transmit+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	f042 0201 	orr.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800464e:	6822      	ldr	r2, [r4, #0]
 8004650:	6813      	ldr	r3, [r2, #0]
 8004652:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004656:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004658:	2321      	movs	r3, #33	; 0x21
 800465a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800465e:	2310      	movs	r3, #16
 8004660:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004664:	2300      	movs	r3, #0
 8004666:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004668:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800466c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800466e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004670:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004672:	4b3b      	ldr	r3, [pc, #236]	; (8004760 <HAL_I2C_Master_Transmit+0x170>)
 8004674:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004676:	462b      	mov	r3, r5
 8004678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800467a:	4631      	mov	r1, r6
 800467c:	4620      	mov	r0, r4
 800467e:	f7ff fc29 	bl	8003ed4 <I2C_MasterRequestWrite>
 8004682:	4606      	mov	r6, r0
 8004684:	2800      	cmp	r0, #0
 8004686:	d166      	bne.n	8004756 <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004688:	2300      	movs	r3, #0
 800468a:	9303      	str	r3, [sp, #12]
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	695a      	ldr	r2, [r3, #20]
 8004690:	9203      	str	r2, [sp, #12]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	9303      	str	r3, [sp, #12]
 8004696:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8004698:	e012      	b.n	80046c0 <HAL_I2C_Master_Transmit+0xd0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800469a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800469c:	2b04      	cmp	r3, #4
 800469e:	d001      	beq.n	80046a4 <HAL_I2C_Master_Transmit+0xb4>
        return HAL_ERROR;
 80046a0:	2601      	movs	r6, #1
 80046a2:	e7b4      	b.n	800460e <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a4:	6822      	ldr	r2, [r4, #0]
 80046a6:	6813      	ldr	r3, [r2, #0]
 80046a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046ac:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 80046ae:	2601      	movs	r6, #1
 80046b0:	e7ad      	b.n	800460e <HAL_I2C_Master_Transmit+0x1e>
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b2:	462a      	mov	r2, r5
 80046b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80046b6:	4620      	mov	r0, r4
 80046b8:	f7ff fe46 	bl	8004348 <I2C_WaitOnBTFFlagUntilTimeout>
 80046bc:	2800      	cmp	r0, #0
 80046be:	d12c      	bne.n	800471a <HAL_I2C_Master_Transmit+0x12a>
    while (hi2c->XferSize > 0U)
 80046c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d035      	beq.n	8004732 <HAL_I2C_Master_Transmit+0x142>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c6:	462a      	mov	r2, r5
 80046c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80046ca:	4620      	mov	r0, r4
 80046cc:	f7ff fcf4 	bl	80040b8 <I2C_WaitOnTXEFlagUntilTimeout>
 80046d0:	2800      	cmp	r0, #0
 80046d2:	d1e2      	bne.n	800469a <HAL_I2C_Master_Transmit+0xaa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046d4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	7812      	ldrb	r2, [r2, #0]
 80046da:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80046dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80046de:	1c4b      	adds	r3, r1, #1
 80046e0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80046e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80046ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80046ec:	3b01      	subs	r3, #1
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046f2:	6822      	ldr	r2, [r4, #0]
 80046f4:	6950      	ldr	r0, [r2, #20]
 80046f6:	f010 0f04 	tst.w	r0, #4
 80046fa:	d0da      	beq.n	80046b2 <HAL_I2C_Master_Transmit+0xc2>
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0d8      	beq.n	80046b2 <HAL_I2C_Master_Transmit+0xc2>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004700:	784b      	ldrb	r3, [r1, #1]
 8004702:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8004704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004706:	3301      	adds	r3, #1
 8004708:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800470a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800470c:	3b01      	subs	r3, #1
 800470e:	b29b      	uxth	r3, r3
 8004710:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8004712:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004714:	3b01      	subs	r3, #1
 8004716:	8523      	strh	r3, [r4, #40]	; 0x28
 8004718:	e7cb      	b.n	80046b2 <HAL_I2C_Master_Transmit+0xc2>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800471a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800471c:	2b04      	cmp	r3, #4
 800471e:	d001      	beq.n	8004724 <HAL_I2C_Master_Transmit+0x134>
        return HAL_ERROR;
 8004720:	2601      	movs	r6, #1
 8004722:	e774      	b.n	800460e <HAL_I2C_Master_Transmit+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004724:	6822      	ldr	r2, [r4, #0]
 8004726:	6813      	ldr	r3, [r2, #0]
 8004728:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800472c:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 800472e:	2601      	movs	r6, #1
 8004730:	e76d      	b.n	800460e <HAL_I2C_Master_Transmit+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004732:	6822      	ldr	r2, [r4, #0]
 8004734:	6813      	ldr	r3, [r2, #0]
 8004736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800473a:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800473c:	2320      	movs	r3, #32
 800473e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004742:	2300      	movs	r3, #0
 8004744:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004748:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 800474c:	e75f      	b.n	800460e <HAL_I2C_Master_Transmit+0x1e>
      return HAL_BUSY;
 800474e:	2602      	movs	r6, #2
 8004750:	e75d      	b.n	800460e <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 8004752:	2602      	movs	r6, #2
 8004754:	e75b      	b.n	800460e <HAL_I2C_Master_Transmit+0x1e>
      return HAL_ERROR;
 8004756:	2601      	movs	r6, #1
 8004758:	e759      	b.n	800460e <HAL_I2C_Master_Transmit+0x1e>
 800475a:	bf00      	nop
 800475c:	00100002 	.word	0x00100002
 8004760:	ffff0000 	.word	0xffff0000

08004764 <HAL_I2C_Master_Receive>:
{
 8004764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004768:	b086      	sub	sp, #24
 800476a:	4604      	mov	r4, r0
 800476c:	460e      	mov	r6, r1
 800476e:	4690      	mov	r8, r2
 8004770:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8004772:	f7fe f94d 	bl	8002a10 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004776:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b20      	cmp	r3, #32
 800477e:	d004      	beq.n	800478a <HAL_I2C_Master_Receive+0x26>
    return HAL_BUSY;
 8004780:	2602      	movs	r6, #2
}
 8004782:	4630      	mov	r0, r6
 8004784:	b006      	add	sp, #24
 8004786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800478a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800478c:	9000      	str	r0, [sp, #0]
 800478e:	2319      	movs	r3, #25
 8004790:	2201      	movs	r2, #1
 8004792:	499e      	ldr	r1, [pc, #632]	; (8004a0c <HAL_I2C_Master_Receive+0x2a8>)
 8004794:	4620      	mov	r0, r4
 8004796:	f7ff fb12 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 800479a:	2800      	cmp	r0, #0
 800479c:	f040 8134 	bne.w	8004a08 <HAL_I2C_Master_Receive+0x2a4>
    __HAL_LOCK(hi2c);
 80047a0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	f000 8137 	beq.w	8004a18 <HAL_I2C_Master_Receive+0x2b4>
 80047aa:	2301      	movs	r3, #1
 80047ac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047b0:	6823      	ldr	r3, [r4, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	f012 0f01 	tst.w	r2, #1
 80047b8:	d103      	bne.n	80047c2 <HAL_I2C_Master_Receive+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	f042 0201 	orr.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047c2:	6822      	ldr	r2, [r4, #0]
 80047c4:	6813      	ldr	r3, [r2, #0]
 80047c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047ca:	6013      	str	r3, [r2, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80047cc:	2322      	movs	r3, #34	; 0x22
 80047ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047d2:	2310      	movs	r3, #16
 80047d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047d8:	2300      	movs	r3, #0
 80047da:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80047dc:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047e0:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80047e4:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047e6:	4b8a      	ldr	r3, [pc, #552]	; (8004a10 <HAL_I2C_Master_Receive+0x2ac>)
 80047e8:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047ea:	462b      	mov	r3, r5
 80047ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047ee:	4631      	mov	r1, r6
 80047f0:	4620      	mov	r0, r4
 80047f2:	f7ff fbcd 	bl	8003f90 <I2C_MasterRequestRead>
 80047f6:	4606      	mov	r6, r0
 80047f8:	2800      	cmp	r0, #0
 80047fa:	f040 810f 	bne.w	8004a1c <HAL_I2C_Master_Receive+0x2b8>
    if (hi2c->XferSize == 0U)
 80047fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004800:	b95b      	cbnz	r3, 800481a <HAL_I2C_Master_Receive+0xb6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004802:	9302      	str	r3, [sp, #8]
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	695a      	ldr	r2, [r3, #20]
 8004808:	9202      	str	r2, [sp, #8]
 800480a:	699a      	ldr	r2, [r3, #24]
 800480c:	9202      	str	r2, [sp, #8]
 800480e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	e077      	b.n	800490a <HAL_I2C_Master_Receive+0x1a6>
    else if (hi2c->XferSize == 1U)
 800481a:	2b01      	cmp	r3, #1
 800481c:	d00f      	beq.n	800483e <HAL_I2C_Master_Receive+0xda>
    else if (hi2c->XferSize == 2U)
 800481e:	2b02      	cmp	r3, #2
 8004820:	d01f      	beq.n	8004862 <HAL_I2C_Master_Receive+0xfe>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004822:	6822      	ldr	r2, [r4, #0]
 8004824:	6813      	ldr	r3, [r2, #0]
 8004826:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800482a:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800482c:	2300      	movs	r3, #0
 800482e:	9305      	str	r3, [sp, #20]
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	695a      	ldr	r2, [r3, #20]
 8004834:	9205      	str	r2, [sp, #20]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	9305      	str	r3, [sp, #20]
 800483a:	9b05      	ldr	r3, [sp, #20]
 800483c:	e065      	b.n	800490a <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800483e:	6822      	ldr	r2, [r4, #0]
 8004840:	6813      	ldr	r3, [r2, #0]
 8004842:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004846:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004848:	2300      	movs	r3, #0
 800484a:	9303      	str	r3, [sp, #12]
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	695a      	ldr	r2, [r3, #20]
 8004850:	9203      	str	r2, [sp, #12]
 8004852:	699a      	ldr	r2, [r3, #24]
 8004854:	9203      	str	r2, [sp, #12]
 8004856:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	e053      	b.n	800490a <HAL_I2C_Master_Receive+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004862:	6822      	ldr	r2, [r4, #0]
 8004864:	6813      	ldr	r3, [r2, #0]
 8004866:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800486a:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800486c:	6822      	ldr	r2, [r4, #0]
 800486e:	6813      	ldr	r3, [r2, #0]
 8004870:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004874:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004876:	2300      	movs	r3, #0
 8004878:	9304      	str	r3, [sp, #16]
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	695a      	ldr	r2, [r3, #20]
 800487e:	9204      	str	r2, [sp, #16]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	9304      	str	r3, [sp, #16]
 8004884:	9b04      	ldr	r3, [sp, #16]
 8004886:	e040      	b.n	800490a <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004888:	462a      	mov	r2, r5
 800488a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800488c:	4620      	mov	r0, r4
 800488e:	f7ff fd85 	bl	800439c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004892:	2800      	cmp	r0, #0
 8004894:	f040 80c4 	bne.w	8004a20 <HAL_I2C_Master_Receive+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800489e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80048a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048a2:	3301      	adds	r3, #1
 80048a4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80048a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80048a8:	3b01      	subs	r3, #1
 80048aa:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80048ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80048b4:	e029      	b.n	800490a <HAL_I2C_Master_Receive+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048b6:	9500      	str	r5, [sp, #0]
 80048b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048ba:	2200      	movs	r2, #0
 80048bc:	4955      	ldr	r1, [pc, #340]	; (8004a14 <HAL_I2C_Master_Receive+0x2b0>)
 80048be:	4620      	mov	r0, r4
 80048c0:	f7ff fa7d 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 80048c4:	2800      	cmp	r0, #0
 80048c6:	f040 80ad 	bne.w	8004a24 <HAL_I2C_Master_Receive+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ca:	6822      	ldr	r2, [r4, #0]
 80048cc:	6813      	ldr	r3, [r2, #0]
 80048ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048d2:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d4:	6823      	ldr	r3, [r4, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048da:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80048dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80048de:	1c53      	adds	r3, r2, #1
 80048e0:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80048e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80048e4:	3b01      	subs	r3, #1
 80048e6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80048e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80048f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048f8:	3301      	adds	r3, #1
 80048fa:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80048fc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80048fe:	3b01      	subs	r3, #1
 8004900:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004902:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004904:	3b01      	subs	r3, #1
 8004906:	b29b      	uxth	r3, r3
 8004908:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800490a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800490c:	2b00      	cmp	r3, #0
 800490e:	d072      	beq.n	80049f6 <HAL_I2C_Master_Receive+0x292>
      if (hi2c->XferSize <= 3U)
 8004910:	2b03      	cmp	r3, #3
 8004912:	d849      	bhi.n	80049a8 <HAL_I2C_Master_Receive+0x244>
        if (hi2c->XferSize == 1U)
 8004914:	2b01      	cmp	r3, #1
 8004916:	d0b7      	beq.n	8004888 <HAL_I2C_Master_Receive+0x124>
        else if (hi2c->XferSize == 2U)
 8004918:	2b02      	cmp	r3, #2
 800491a:	d0cc      	beq.n	80048b6 <HAL_I2C_Master_Receive+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800491c:	9500      	str	r5, [sp, #0]
 800491e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004920:	2200      	movs	r2, #0
 8004922:	493c      	ldr	r1, [pc, #240]	; (8004a14 <HAL_I2C_Master_Receive+0x2b0>)
 8004924:	4620      	mov	r0, r4
 8004926:	f7ff fa4a 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 800492a:	2800      	cmp	r0, #0
 800492c:	d17c      	bne.n	8004a28 <HAL_I2C_Master_Receive+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492e:	6822      	ldr	r2, [r4, #0]
 8004930:	6813      	ldr	r3, [r2, #0]
 8004932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004936:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	691a      	ldr	r2, [r3, #16]
 800493c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800493e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004942:	3301      	adds	r3, #1
 8004944:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004946:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004948:	3b01      	subs	r3, #1
 800494a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800494c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800494e:	3b01      	subs	r3, #1
 8004950:	b29b      	uxth	r3, r3
 8004952:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004954:	9500      	str	r5, [sp, #0]
 8004956:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004958:	2200      	movs	r2, #0
 800495a:	492e      	ldr	r1, [pc, #184]	; (8004a14 <HAL_I2C_Master_Receive+0x2b0>)
 800495c:	4620      	mov	r0, r4
 800495e:	f7ff fa2e 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 8004962:	2800      	cmp	r0, #0
 8004964:	d162      	bne.n	8004a2c <HAL_I2C_Master_Receive+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004966:	6822      	ldr	r2, [r4, #0]
 8004968:	6813      	ldr	r3, [r2, #0]
 800496a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800496e:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004976:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004978:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800497a:	1c53      	adds	r3, r2, #1
 800497c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800497e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004980:	3b01      	subs	r3, #1
 8004982:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004984:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004986:	3b01      	subs	r3, #1
 8004988:	b29b      	uxth	r3, r3
 800498a:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800498c:	6823      	ldr	r3, [r4, #0]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8004992:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004994:	3301      	adds	r3, #1
 8004996:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004998:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800499a:	3b01      	subs	r3, #1
 800499c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800499e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	8563      	strh	r3, [r4, #42]	; 0x2a
 80049a6:	e7b0      	b.n	800490a <HAL_I2C_Master_Receive+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049a8:	462a      	mov	r2, r5
 80049aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80049ac:	4620      	mov	r0, r4
 80049ae:	f7ff fcf5 	bl	800439c <I2C_WaitOnRXNEFlagUntilTimeout>
 80049b2:	2800      	cmp	r0, #0
 80049b4:	d13c      	bne.n	8004a30 <HAL_I2C_Master_Receive+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049bc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80049be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80049c0:	1c53      	adds	r3, r2, #1
 80049c2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80049c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80049c6:	3b01      	subs	r3, #1
 80049c8:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80049ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	6959      	ldr	r1, [r3, #20]
 80049d6:	f011 0f04 	tst.w	r1, #4
 80049da:	d096      	beq.n	800490a <HAL_I2C_Master_Receive+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 80049e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80049e2:	3301      	adds	r3, #1
 80049e4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80049e6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80049e8:	3b01      	subs	r3, #1
 80049ea:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80049ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	8563      	strh	r3, [r4, #42]	; 0x2a
 80049f4:	e789      	b.n	800490a <HAL_I2C_Master_Receive+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80049f6:	2320      	movs	r3, #32
 80049f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004a02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004a06:	e6bc      	b.n	8004782 <HAL_I2C_Master_Receive+0x1e>
      return HAL_BUSY;
 8004a08:	2602      	movs	r6, #2
 8004a0a:	e6ba      	b.n	8004782 <HAL_I2C_Master_Receive+0x1e>
 8004a0c:	00100002 	.word	0x00100002
 8004a10:	ffff0000 	.word	0xffff0000
 8004a14:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 8004a18:	2602      	movs	r6, #2
 8004a1a:	e6b2      	b.n	8004782 <HAL_I2C_Master_Receive+0x1e>
      return HAL_ERROR;
 8004a1c:	2601      	movs	r6, #1
 8004a1e:	e6b0      	b.n	8004782 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004a20:	2601      	movs	r6, #1
 8004a22:	e6ae      	b.n	8004782 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004a24:	2601      	movs	r6, #1
 8004a26:	e6ac      	b.n	8004782 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004a28:	2601      	movs	r6, #1
 8004a2a:	e6aa      	b.n	8004782 <HAL_I2C_Master_Receive+0x1e>
            return HAL_ERROR;
 8004a2c:	2601      	movs	r6, #1
 8004a2e:	e6a8      	b.n	8004782 <HAL_I2C_Master_Receive+0x1e>
          return HAL_ERROR;
 8004a30:	2601      	movs	r6, #1
 8004a32:	e6a6      	b.n	8004782 <HAL_I2C_Master_Receive+0x1e>

08004a34 <HAL_I2C_Mem_Write>:
{
 8004a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	460e      	mov	r6, r1
 8004a3e:	4617      	mov	r7, r2
 8004a40:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8004a42:	f7fd ffe5 	bl	8002a10 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a46:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d004      	beq.n	8004a5a <HAL_I2C_Mem_Write+0x26>
    return HAL_BUSY;
 8004a50:	2302      	movs	r3, #2
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	b002      	add	sp, #8
 8004a56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a5a:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a5c:	9000      	str	r0, [sp, #0]
 8004a5e:	2319      	movs	r3, #25
 8004a60:	2201      	movs	r2, #1
 8004a62:	494c      	ldr	r1, [pc, #304]	; (8004b94 <HAL_I2C_Mem_Write+0x160>)
 8004a64:	4620      	mov	r0, r4
 8004a66:	f7ff f9aa 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 8004a6a:	2800      	cmp	r0, #0
 8004a6c:	f040 808b 	bne.w	8004b86 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8004a70:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	f000 8088 	beq.w	8004b8a <HAL_I2C_Mem_Write+0x156>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	f012 0f01 	tst.w	r2, #1
 8004a88:	d103      	bne.n	8004a92 <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	f042 0201 	orr.w	r2, r2, #1
 8004a90:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a92:	6822      	ldr	r2, [r4, #0]
 8004a94:	6813      	ldr	r3, [r2, #0]
 8004a96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a9a:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004a9c:	2321      	movs	r3, #33	; 0x21
 8004a9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004aa2:	2340      	movs	r3, #64	; 0x40
 8004aa4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004aac:	9b08      	ldr	r3, [sp, #32]
 8004aae:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ab0:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8004ab4:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ab6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ab8:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aba:	4b37      	ldr	r3, [pc, #220]	; (8004b98 <HAL_I2C_Mem_Write+0x164>)
 8004abc:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004abe:	9501      	str	r5, [sp, #4]
 8004ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	4643      	mov	r3, r8
 8004ac6:	463a      	mov	r2, r7
 8004ac8:	4631      	mov	r1, r6
 8004aca:	4620      	mov	r0, r4
 8004acc:	f7ff fb1e 	bl	800410c <I2C_RequestMemoryWrite>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	d15c      	bne.n	8004b8e <HAL_I2C_Mem_Write+0x15a>
    while (hi2c->XferSize > 0U)
 8004ad4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d034      	beq.n	8004b44 <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ada:	462a      	mov	r2, r5
 8004adc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f7ff faea 	bl	80040b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ae4:	bb10      	cbnz	r0, 8004b2c <HAL_I2C_Mem_Write+0xf8>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ae6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	7812      	ldrb	r2, [r2, #0]
 8004aec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004aee:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004af0:	1c4b      	adds	r3, r1, #1
 8004af2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004af4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004af6:	3b01      	subs	r3, #1
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004afc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004afe:	3a01      	subs	r2, #1
 8004b00:	b292      	uxth	r2, r2
 8004b02:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b04:	6822      	ldr	r2, [r4, #0]
 8004b06:	6950      	ldr	r0, [r2, #20]
 8004b08:	f010 0f04 	tst.w	r0, #4
 8004b0c:	d0e2      	beq.n	8004ad4 <HAL_I2C_Mem_Write+0xa0>
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d0e0      	beq.n	8004ad4 <HAL_I2C_Mem_Write+0xa0>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b12:	784b      	ldrb	r3, [r1, #1]
 8004b14:	6113      	str	r3, [r2, #16]
        hi2c->pBuffPtr++;
 8004b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b18:	3301      	adds	r3, #1
 8004b1a:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004b1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004b22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004b24:	3b01      	subs	r3, #1
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004b2a:	e7d3      	b.n	8004ad4 <HAL_I2C_Mem_Write+0xa0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d001      	beq.n	8004b36 <HAL_I2C_Mem_Write+0x102>
        return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e78d      	b.n	8004a52 <HAL_I2C_Mem_Write+0x1e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b36:	6822      	ldr	r2, [r4, #0]
 8004b38:	6813      	ldr	r3, [r2, #0]
 8004b3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b3e:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e786      	b.n	8004a52 <HAL_I2C_Mem_Write+0x1e>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b44:	462a      	mov	r2, r5
 8004b46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f7ff fbfd 	bl	8004348 <I2C_WaitOnBTFFlagUntilTimeout>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	b158      	cbz	r0, 8004b6a <HAL_I2C_Mem_Write+0x136>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d001      	beq.n	8004b5c <HAL_I2C_Mem_Write+0x128>
      return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e77a      	b.n	8004a52 <HAL_I2C_Mem_Write+0x1e>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b5c:	6822      	ldr	r2, [r4, #0]
 8004b5e:	6813      	ldr	r3, [r2, #0]
 8004b60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b64:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e773      	b.n	8004a52 <HAL_I2C_Mem_Write+0x1e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6a:	6821      	ldr	r1, [r4, #0]
 8004b6c:	680a      	ldr	r2, [r1, #0]
 8004b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b72:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004b74:	2220      	movs	r2, #32
 8004b76:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004b80:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    return HAL_OK;
 8004b84:	e765      	b.n	8004a52 <HAL_I2C_Mem_Write+0x1e>
      return HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
 8004b88:	e763      	b.n	8004a52 <HAL_I2C_Mem_Write+0x1e>
    __HAL_LOCK(hi2c);
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e761      	b.n	8004a52 <HAL_I2C_Mem_Write+0x1e>
      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e75f      	b.n	8004a52 <HAL_I2C_Mem_Write+0x1e>
 8004b92:	bf00      	nop
 8004b94:	00100002 	.word	0x00100002
 8004b98:	ffff0000 	.word	0xffff0000

08004b9c <HAL_I2C_Mem_Read>:
{
 8004b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba0:	b086      	sub	sp, #24
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	460e      	mov	r6, r1
 8004ba6:	4617      	mov	r7, r2
 8004ba8:	4698      	mov	r8, r3
  uint32_t tickstart = HAL_GetTick();
 8004baa:	f7fd ff31 	bl	8002a10 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bae:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d004      	beq.n	8004bc2 <HAL_I2C_Mem_Read+0x26>
    return HAL_BUSY;
 8004bb8:	2602      	movs	r6, #2
}
 8004bba:	4630      	mov	r0, r6
 8004bbc:	b006      	add	sp, #24
 8004bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bc2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004bc4:	9000      	str	r0, [sp, #0]
 8004bc6:	2319      	movs	r3, #25
 8004bc8:	2201      	movs	r2, #1
 8004bca:	499e      	ldr	r1, [pc, #632]	; (8004e44 <HAL_I2C_Mem_Read+0x2a8>)
 8004bcc:	4620      	mov	r0, r4
 8004bce:	f7ff f8f6 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	f040 8134 	bne.w	8004e40 <HAL_I2C_Mem_Read+0x2a4>
    __HAL_LOCK(hi2c);
 8004bd8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	f000 8137 	beq.w	8004e50 <HAL_I2C_Mem_Read+0x2b4>
 8004be2:	2301      	movs	r3, #1
 8004be4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004be8:	6823      	ldr	r3, [r4, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	f012 0f01 	tst.w	r2, #1
 8004bf0:	d103      	bne.n	8004bfa <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	f042 0201 	orr.w	r2, r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bfa:	6822      	ldr	r2, [r4, #0]
 8004bfc:	6813      	ldr	r3, [r2, #0]
 8004bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c02:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c04:	2322      	movs	r3, #34	; 0x22
 8004c06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c0a:	2340      	movs	r3, #64	; 0x40
 8004c0c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8004c14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c16:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c18:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 8004c1c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c1e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004c20:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c22:	4b89      	ldr	r3, [pc, #548]	; (8004e48 <HAL_I2C_Mem_Read+0x2ac>)
 8004c24:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c26:	9501      	str	r5, [sp, #4]
 8004c28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	4643      	mov	r3, r8
 8004c2e:	463a      	mov	r2, r7
 8004c30:	4631      	mov	r1, r6
 8004c32:	4620      	mov	r0, r4
 8004c34:	f7ff fad8 	bl	80041e8 <I2C_RequestMemoryRead>
 8004c38:	4606      	mov	r6, r0
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	f040 810a 	bne.w	8004e54 <HAL_I2C_Mem_Read+0x2b8>
    if (hi2c->XferSize == 0U)
 8004c40:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004c42:	b95b      	cbnz	r3, 8004c5c <HAL_I2C_Mem_Read+0xc0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c44:	9302      	str	r3, [sp, #8]
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	695a      	ldr	r2, [r3, #20]
 8004c4a:	9202      	str	r2, [sp, #8]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	9202      	str	r2, [sp, #8]
 8004c50:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c58:	601a      	str	r2, [r3, #0]
 8004c5a:	e072      	b.n	8004d42 <HAL_I2C_Mem_Read+0x1a6>
    else if (hi2c->XferSize == 1U)
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d00a      	beq.n	8004c76 <HAL_I2C_Mem_Read+0xda>
    else if (hi2c->XferSize == 2U)
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d01a      	beq.n	8004c9a <HAL_I2C_Mem_Read+0xfe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c64:	2300      	movs	r3, #0
 8004c66:	9305      	str	r3, [sp, #20]
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	695a      	ldr	r2, [r3, #20]
 8004c6c:	9205      	str	r2, [sp, #20]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	9305      	str	r3, [sp, #20]
 8004c72:	9b05      	ldr	r3, [sp, #20]
 8004c74:	e065      	b.n	8004d42 <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c76:	6822      	ldr	r2, [r4, #0]
 8004c78:	6813      	ldr	r3, [r2, #0]
 8004c7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c7e:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c80:	2300      	movs	r3, #0
 8004c82:	9303      	str	r3, [sp, #12]
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	695a      	ldr	r2, [r3, #20]
 8004c88:	9203      	str	r2, [sp, #12]
 8004c8a:	699a      	ldr	r2, [r3, #24]
 8004c8c:	9203      	str	r2, [sp, #12]
 8004c8e:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	e053      	b.n	8004d42 <HAL_I2C_Mem_Read+0x1a6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c9a:	6822      	ldr	r2, [r4, #0]
 8004c9c:	6813      	ldr	r3, [r2, #0]
 8004c9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ca2:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ca4:	6822      	ldr	r2, [r4, #0]
 8004ca6:	6813      	ldr	r3, [r2, #0]
 8004ca8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004cac:	6013      	str	r3, [r2, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	9304      	str	r3, [sp, #16]
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	695a      	ldr	r2, [r3, #20]
 8004cb6:	9204      	str	r2, [sp, #16]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	9304      	str	r3, [sp, #16]
 8004cbc:	9b04      	ldr	r3, [sp, #16]
 8004cbe:	e040      	b.n	8004d42 <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc0:	462a      	mov	r2, r5
 8004cc2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f7ff fb69 	bl	800439c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	f040 80c4 	bne.w	8004e58 <HAL_I2C_Mem_Read+0x2bc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	691a      	ldr	r2, [r3, #16]
 8004cd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cd6:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cda:	3301      	adds	r3, #1
 8004cdc:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004cde:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004ce4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004cec:	e029      	b.n	8004d42 <HAL_I2C_Mem_Read+0x1a6>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cee:	9500      	str	r5, [sp, #0]
 8004cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	4955      	ldr	r1, [pc, #340]	; (8004e4c <HAL_I2C_Mem_Read+0x2b0>)
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f7ff f861 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	f040 80ad 	bne.w	8004e5c <HAL_I2C_Mem_Read+0x2c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d02:	6822      	ldr	r2, [r4, #0]
 8004d04:	6813      	ldr	r3, [r2, #0]
 8004d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d0a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0c:	6823      	ldr	r3, [r4, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d12:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004d14:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004d16:	1c53      	adds	r3, r2, #1
 8004d18:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004d1a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004d20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29b      	uxth	r3, r3
 8004d26:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8004d2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d30:	3301      	adds	r3, #1
 8004d32:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004d34:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004d36:	3b01      	subs	r3, #1
 8004d38:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004d3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004d42:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d072      	beq.n	8004e2e <HAL_I2C_Mem_Read+0x292>
      if (hi2c->XferSize <= 3U)
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d849      	bhi.n	8004de0 <HAL_I2C_Mem_Read+0x244>
        if (hi2c->XferSize == 1U)
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d0b7      	beq.n	8004cc0 <HAL_I2C_Mem_Read+0x124>
        else if (hi2c->XferSize == 2U)
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d0cc      	beq.n	8004cee <HAL_I2C_Mem_Read+0x152>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d54:	9500      	str	r5, [sp, #0]
 8004d56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d58:	2200      	movs	r2, #0
 8004d5a:	493c      	ldr	r1, [pc, #240]	; (8004e4c <HAL_I2C_Mem_Read+0x2b0>)
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	f7ff f82e 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d17c      	bne.n	8004e60 <HAL_I2C_Mem_Read+0x2c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d66:	6822      	ldr	r2, [r4, #0]
 8004d68:	6813      	ldr	r3, [r2, #0]
 8004d6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d6e:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d76:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004d7e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004d80:	3b01      	subs	r3, #1
 8004d82:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004d84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d8c:	9500      	str	r5, [sp, #0]
 8004d8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d90:	2200      	movs	r2, #0
 8004d92:	492e      	ldr	r1, [pc, #184]	; (8004e4c <HAL_I2C_Mem_Read+0x2b0>)
 8004d94:	4620      	mov	r0, r4
 8004d96:	f7ff f812 	bl	8003dbe <I2C_WaitOnFlagUntilTimeout>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	d162      	bne.n	8004e64 <HAL_I2C_Mem_Read+0x2c8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9e:	6822      	ldr	r2, [r4, #0]
 8004da0:	6813      	ldr	r3, [r2, #0]
 8004da2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004da6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dae:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8004db0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004db2:	1c53      	adds	r3, r2, #1
 8004db4:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004db6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004db8:	3b01      	subs	r3, #1
 8004dba:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004dbc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8004dca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004dcc:	3301      	adds	r3, #1
 8004dce:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004dd0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004dd6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004dde:	e7b0      	b.n	8004d42 <HAL_I2C_Mem_Read+0x1a6>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004de0:	462a      	mov	r2, r5
 8004de2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8004de4:	4620      	mov	r0, r4
 8004de6:	f7ff fad9 	bl	800439c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dea:	2800      	cmp	r0, #0
 8004dec:	d13c      	bne.n	8004e68 <HAL_I2C_Mem_Read+0x2cc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004df4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004df6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004df8:	1c53      	adds	r3, r2, #1
 8004dfa:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8004dfc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8004e02:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	6959      	ldr	r1, [r3, #20]
 8004e0e:	f011 0f04 	tst.w	r1, #4
 8004e12:	d096      	beq.n	8004d42 <HAL_I2C_Mem_Read+0x1a6>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8004e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8004e1e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004e20:	3b01      	subs	r3, #1
 8004e22:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8004e24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004e26:	3b01      	subs	r3, #1
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004e2c:	e789      	b.n	8004d42 <HAL_I2C_Mem_Read+0x1a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e2e:	2320      	movs	r3, #32
 8004e30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e34:	2300      	movs	r3, #0
 8004e36:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8004e3a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8004e3e:	e6bc      	b.n	8004bba <HAL_I2C_Mem_Read+0x1e>
      return HAL_BUSY;
 8004e40:	2602      	movs	r6, #2
 8004e42:	e6ba      	b.n	8004bba <HAL_I2C_Mem_Read+0x1e>
 8004e44:	00100002 	.word	0x00100002
 8004e48:	ffff0000 	.word	0xffff0000
 8004e4c:	00010004 	.word	0x00010004
    __HAL_LOCK(hi2c);
 8004e50:	2602      	movs	r6, #2
 8004e52:	e6b2      	b.n	8004bba <HAL_I2C_Mem_Read+0x1e>
      return HAL_ERROR;
 8004e54:	2601      	movs	r6, #1
 8004e56:	e6b0      	b.n	8004bba <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8004e58:	2601      	movs	r6, #1
 8004e5a:	e6ae      	b.n	8004bba <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8004e5c:	2601      	movs	r6, #1
 8004e5e:	e6ac      	b.n	8004bba <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8004e60:	2601      	movs	r6, #1
 8004e62:	e6aa      	b.n	8004bba <HAL_I2C_Mem_Read+0x1e>
            return HAL_ERROR;
 8004e64:	2601      	movs	r6, #1
 8004e66:	e6a8      	b.n	8004bba <HAL_I2C_Mem_Read+0x1e>
          return HAL_ERROR;
 8004e68:	2601      	movs	r6, #1
 8004e6a:	e6a6      	b.n	8004bba <HAL_I2C_Mem_Read+0x1e>

08004e6c <HAL_I2C_GetState>:
  return hi2c->State;
 8004e6c:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8004e70:	4770      	bx	lr

08004e72 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004e72:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004e74:	684d      	ldr	r5, [r1, #4]
 8004e76:	6804      	ldr	r4, [r0, #0]
 8004e78:	68e3      	ldr	r3, [r4, #12]
 8004e7a:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8004e7e:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004e80:	01d2      	lsls	r2, r2, #7
 8004e82:	4414      	add	r4, r2
 8004e84:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004e88:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004e8c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004e90:	680b      	ldr	r3, [r1, #0]
 8004e92:	6804      	ldr	r4, [r0, #0]
 8004e94:	68e6      	ldr	r6, [r4, #12]
 8004e96:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8004e9a:	4433      	add	r3, r6
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	4414      	add	r4, r2
 8004ea0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004ea4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004ea8:	68cd      	ldr	r5, [r1, #12]
 8004eaa:	6804      	ldr	r4, [r0, #0]
 8004eac:	68e3      	ldr	r3, [r4, #12]
 8004eae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eb2:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004eb4:	4414      	add	r4, r2
 8004eb6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004eba:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004ebe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004ec2:	688b      	ldr	r3, [r1, #8]
 8004ec4:	6804      	ldr	r4, [r0, #0]
 8004ec6:	68e6      	ldr	r6, [r4, #12]
 8004ec8:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8004ecc:	4433      	add	r3, r6
 8004ece:	3301      	adds	r3, #1
 8004ed0:	4414      	add	r4, r2
 8004ed2:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004ed6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004eda:	6803      	ldr	r3, [r0, #0]
 8004edc:	4413      	add	r3, r2
 8004ede:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8004ee2:	f024 0407 	bic.w	r4, r4, #7
 8004ee6:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004eea:	6803      	ldr	r3, [r0, #0]
 8004eec:	4413      	add	r3, r2
 8004eee:	690c      	ldr	r4, [r1, #16]
 8004ef0:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004ef4:	f891 c031 	ldrb.w	ip, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004ef8:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004efc:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004efe:	6805      	ldr	r5, [r0, #0]
 8004f00:	4415      	add	r5, r2
 8004f02:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8004f06:	2400      	movs	r4, #0
 8004f08:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004f0c:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8004f10:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8004f14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004f18:	6805      	ldr	r5, [r0, #0]
 8004f1a:	4415      	add	r5, r2
 8004f1c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8004f20:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004f24:	6803      	ldr	r3, [r0, #0]
 8004f26:	4413      	add	r3, r2
 8004f28:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8004f2c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8004f30:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004f34:	6803      	ldr	r3, [r0, #0]
 8004f36:	4413      	add	r3, r2
 8004f38:	694d      	ldr	r5, [r1, #20]
 8004f3a:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004f3e:	6803      	ldr	r3, [r0, #0]
 8004f40:	4413      	add	r3, r2
 8004f42:	f8d3 50a0 	ldr.w	r5, [r3, #160]	; 0xa0
 8004f46:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8004f4a:	f025 0507 	bic.w	r5, r5, #7
 8004f4e:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004f52:	69cd      	ldr	r5, [r1, #28]
 8004f54:	6a0e      	ldr	r6, [r1, #32]
 8004f56:	6803      	ldr	r3, [r0, #0]
 8004f58:	4413      	add	r3, r2
 8004f5a:	4335      	orrs	r5, r6
 8004f5c:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004f60:	6803      	ldr	r3, [r0, #0]
 8004f62:	4413      	add	r3, r2
 8004f64:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8004f68:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004f6c:	6803      	ldr	r3, [r0, #0]
 8004f6e:	4413      	add	r3, r2
 8004f70:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004f72:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004f76:	690b      	ldr	r3, [r1, #16]
 8004f78:	b16b      	cbz	r3, 8004f96 <LTDC_SetConfig+0x124>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d03c      	beq.n	8004ff8 <LTDC_SetConfig+0x186>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d03c      	beq.n	8004ffc <LTDC_SetConfig+0x18a>
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d008      	beq.n	8004f98 <LTDC_SetConfig+0x126>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d03a      	beq.n	8005000 <LTDC_SetConfig+0x18e>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004f8a:	2b07      	cmp	r3, #7
 8004f8c:	d001      	beq.n	8004f92 <LTDC_SetConfig+0x120>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e002      	b.n	8004f98 <LTDC_SetConfig+0x126>
    tmp = 2U;
 8004f92:	2302      	movs	r3, #2
 8004f94:	e000      	b.n	8004f98 <LTDC_SetConfig+0x126>
    tmp = 4U;
 8004f96:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004f98:	6804      	ldr	r4, [r0, #0]
 8004f9a:	4414      	add	r4, r2
 8004f9c:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8004fa0:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8004fa4:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004fa8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8004faa:	fb03 f504 	mul.w	r5, r3, r4
 8004fae:	684c      	ldr	r4, [r1, #4]
 8004fb0:	680e      	ldr	r6, [r1, #0]
 8004fb2:	1ba4      	subs	r4, r4, r6
 8004fb4:	fb03 f304 	mul.w	r3, r3, r4
 8004fb8:	3303      	adds	r3, #3
 8004fba:	6804      	ldr	r4, [r0, #0]
 8004fbc:	4414      	add	r4, r2
 8004fbe:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004fc2:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004fc6:	6803      	ldr	r3, [r0, #0]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 8004fce:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 8004fd2:	f024 0407 	bic.w	r4, r4, #7
 8004fd6:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004fda:	6803      	ldr	r3, [r0, #0]
 8004fdc:	4413      	add	r3, r2
 8004fde:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004fe0:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004fe4:	6803      	ldr	r3, [r0, #0]
 8004fe6:	441a      	add	r2, r3
 8004fe8:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 8004ff4:	bcf0      	pop	{r4, r5, r6, r7}
 8004ff6:	4770      	bx	lr
    tmp = 3U;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e7cd      	b.n	8004f98 <LTDC_SetConfig+0x126>
    tmp = 2U;
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e7cb      	b.n	8004f98 <LTDC_SetConfig+0x126>
 8005000:	2302      	movs	r3, #2
 8005002:	e7c9      	b.n	8004f98 <LTDC_SetConfig+0x126>

08005004 <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8005004:	2800      	cmp	r0, #0
 8005006:	d072      	beq.n	80050ee <HAL_LTDC_Init+0xea>
{
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800500c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005010:	2b00      	cmp	r3, #0
 8005012:	d067      	beq.n	80050e4 <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005014:	2302      	movs	r3, #2
 8005016:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800501a:	6822      	ldr	r2, [r4, #0]
 800501c:	6993      	ldr	r3, [r2, #24]
 800501e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005022:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005024:	6821      	ldr	r1, [r4, #0]
 8005026:	698a      	ldr	r2, [r1, #24]
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	68a0      	ldr	r0, [r4, #8]
 800502c:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800502e:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005030:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005032:	6920      	ldr	r0, [r4, #16]
 8005034:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005036:	4313      	orrs	r3, r2
 8005038:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800503a:	6821      	ldr	r1, [r4, #0]
 800503c:	688a      	ldr	r2, [r1, #8]
 800503e:	4b2d      	ldr	r3, [pc, #180]	; (80050f4 <HAL_LTDC_Init+0xf0>)
 8005040:	401a      	ands	r2, r3
 8005042:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005044:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005046:	6820      	ldr	r0, [r4, #0]
 8005048:	6882      	ldr	r2, [r0, #8]
 800504a:	69a1      	ldr	r1, [r4, #24]
 800504c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005050:	430a      	orrs	r2, r1
 8005052:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005054:	6821      	ldr	r1, [r4, #0]
 8005056:	68ca      	ldr	r2, [r1, #12]
 8005058:	401a      	ands	r2, r3
 800505a:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800505c:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800505e:	6820      	ldr	r0, [r4, #0]
 8005060:	68c2      	ldr	r2, [r0, #12]
 8005062:	6a21      	ldr	r1, [r4, #32]
 8005064:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005068:	430a      	orrs	r2, r1
 800506a:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800506c:	6821      	ldr	r1, [r4, #0]
 800506e:	690a      	ldr	r2, [r1, #16]
 8005070:	401a      	ands	r2, r3
 8005072:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005074:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005076:	6820      	ldr	r0, [r4, #0]
 8005078:	6902      	ldr	r2, [r0, #16]
 800507a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800507c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8005080:	430a      	orrs	r2, r1
 8005082:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005084:	6821      	ldr	r1, [r4, #0]
 8005086:	694a      	ldr	r2, [r1, #20]
 8005088:	4013      	ands	r3, r2
 800508a:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800508c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800508e:	6821      	ldr	r1, [r4, #0]
 8005090:	694b      	ldr	r3, [r1, #20]
 8005092:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005094:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005098:	4313      	orrs	r3, r2
 800509a:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800509c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80050a0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80050a4:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80050a6:	6821      	ldr	r1, [r4, #0]
 80050a8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80050aa:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80050ae:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80050b0:	6821      	ldr	r1, [r4, #0]
 80050b2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80050b4:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80050b8:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80050bc:	4303      	orrs	r3, r0
 80050be:	4313      	orrs	r3, r2
 80050c0:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80050c2:	6822      	ldr	r2, [r4, #0]
 80050c4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80050c6:	f043 0306 	orr.w	r3, r3, #6
 80050ca:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80050cc:	6822      	ldr	r2, [r4, #0]
 80050ce:	6993      	ldr	r3, [r2, #24]
 80050d0:	f043 0301 	orr.w	r3, r3, #1
 80050d4:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80050d6:	2000      	movs	r0, #0
 80050d8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80050dc:	2301      	movs	r3, #1
 80050de:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 80050e4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80050e8:	f008 fc9c 	bl	800da24 <HAL_LTDC_MspInit>
 80050ec:	e792      	b.n	8005014 <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 80050ee:	2001      	movs	r0, #1
}
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	f000f800 	.word	0xf000f800

080050f8 <HAL_LTDC_DeInit>:
{
 80050f8:	b510      	push	{r4, lr}
 80050fa:	4604      	mov	r4, r0
  HAL_LTDC_MspDeInit(hltdc);
 80050fc:	f008 fcb2 	bl	800da64 <HAL_LTDC_MspDeInit>
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005100:	2000      	movs	r0, #0
 8005102:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_RESET;
 8005106:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800510a:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 800510e:	bd10      	pop	{r4, pc}

08005110 <HAL_LTDC_ErrorCallback>:
}
 8005110:	4770      	bx	lr

08005112 <HAL_LTDC_LineEventCallback>:
}
 8005112:	4770      	bx	lr

08005114 <HAL_LTDC_ReloadEventCallback>:
}
 8005114:	4770      	bx	lr

08005116 <HAL_LTDC_IRQHandler>:
{
 8005116:	b570      	push	{r4, r5, r6, lr}
 8005118:	4604      	mov	r4, r0
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800511a:	6803      	ldr	r3, [r0, #0]
 800511c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800511e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005120:	f015 0f04 	tst.w	r5, #4
 8005124:	d002      	beq.n	800512c <HAL_LTDC_IRQHandler+0x16>
 8005126:	f016 0f04 	tst.w	r6, #4
 800512a:	d112      	bne.n	8005152 <HAL_LTDC_IRQHandler+0x3c>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800512c:	f015 0f02 	tst.w	r5, #2
 8005130:	d002      	beq.n	8005138 <HAL_LTDC_IRQHandler+0x22>
 8005132:	f016 0f02 	tst.w	r6, #2
 8005136:	d121      	bne.n	800517c <HAL_LTDC_IRQHandler+0x66>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005138:	f015 0f01 	tst.w	r5, #1
 800513c:	d002      	beq.n	8005144 <HAL_LTDC_IRQHandler+0x2e>
 800513e:	f016 0f01 	tst.w	r6, #1
 8005142:	d132      	bne.n	80051aa <HAL_LTDC_IRQHandler+0x94>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005144:	f015 0f08 	tst.w	r5, #8
 8005148:	d002      	beq.n	8005150 <HAL_LTDC_IRQHandler+0x3a>
 800514a:	f016 0f08 	tst.w	r6, #8
 800514e:	d13d      	bne.n	80051cc <HAL_LTDC_IRQHandler+0xb6>
}
 8005150:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005154:	f022 0204 	bic.w	r2, r2, #4
 8005158:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800515a:	6803      	ldr	r3, [r0, #0]
 800515c:	2204      	movs	r2, #4
 800515e:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005160:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8005164:	f043 0301 	orr.w	r3, r3, #1
 8005168:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800516c:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8005170:	2300      	movs	r3, #0
 8005172:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8005176:	f7ff ffcb 	bl	8005110 <HAL_LTDC_ErrorCallback>
 800517a:	e7d7      	b.n	800512c <HAL_LTDC_IRQHandler+0x16>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800517c:	6822      	ldr	r2, [r4, #0]
 800517e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8005180:	f023 0302 	bic.w	r3, r3, #2
 8005184:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005186:	6823      	ldr	r3, [r4, #0]
 8005188:	2202      	movs	r2, #2
 800518a:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800518c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005196:	2304      	movs	r3, #4
 8005198:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800519c:	2300      	movs	r3, #0
 800519e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80051a2:	4620      	mov	r0, r4
 80051a4:	f7ff ffb4 	bl	8005110 <HAL_LTDC_ErrorCallback>
 80051a8:	e7c6      	b.n	8005138 <HAL_LTDC_IRQHandler+0x22>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80051aa:	6822      	ldr	r2, [r4, #0]
 80051ac:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80051ae:	f023 0301 	bic.w	r3, r3, #1
 80051b2:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80051b4:	6822      	ldr	r2, [r4, #0]
 80051b6:	2301      	movs	r3, #1
 80051b8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80051ba:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80051be:	2300      	movs	r3, #0
 80051c0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80051c4:	4620      	mov	r0, r4
 80051c6:	f7ff ffa4 	bl	8005112 <HAL_LTDC_LineEventCallback>
 80051ca:	e7bb      	b.n	8005144 <HAL_LTDC_IRQHandler+0x2e>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80051cc:	6822      	ldr	r2, [r4, #0]
 80051ce:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80051d0:	f023 0308 	bic.w	r3, r3, #8
 80051d4:	6353      	str	r3, [r2, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	2208      	movs	r2, #8
 80051da:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80051dc:	2301      	movs	r3, #1
 80051de:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80051e2:	2300      	movs	r3, #0
 80051e4:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80051e8:	4620      	mov	r0, r4
 80051ea:	f7ff ff93 	bl	8005114 <HAL_LTDC_ReloadEventCallback>
}
 80051ee:	e7af      	b.n	8005150 <HAL_LTDC_IRQHandler+0x3a>

080051f0 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 80051f0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d027      	beq.n	8005248 <HAL_LTDC_ConfigLayer+0x58>
{
 80051f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051fc:	4694      	mov	ip, r2
 80051fe:	460f      	mov	r7, r1
 8005200:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8005202:	f04f 0801 	mov.w	r8, #1
 8005206:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800520a:	2302      	movs	r3, #2
 800520c:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005210:	2434      	movs	r4, #52	; 0x34
 8005212:	fb04 0402 	mla	r4, r4, r2, r0
 8005216:	3438      	adds	r4, #56	; 0x38
 8005218:	460d      	mov	r5, r1
 800521a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800521c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800521e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005220:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005226:	682b      	ldr	r3, [r5, #0]
 8005228:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800522a:	4662      	mov	r2, ip
 800522c:	4639      	mov	r1, r7
 800522e:	4630      	mov	r0, r6
 8005230:	f7ff fe1f 	bl	8004e72 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005234:	6833      	ldr	r3, [r6, #0]
 8005236:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800523a:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800523e:	2000      	movs	r0, #0
 8005240:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8005244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8005248:	2002      	movs	r0, #2
}
 800524a:	4770      	bx	lr

0800524c <HAL_LTDC_ConfigColorKeying>:
  __HAL_LOCK(hltdc);
 800524c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005250:	2b01      	cmp	r3, #1
 8005252:	d01d      	beq.n	8005290 <HAL_LTDC_ConfigColorKeying+0x44>
{
 8005254:	b430      	push	{r4, r5}
  __HAL_LOCK(hltdc);
 8005256:	2401      	movs	r4, #1
 8005258:	f880 40a0 	strb.w	r4, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800525c:	2302      	movs	r3, #2
 800525e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8005262:	6803      	ldr	r3, [r0, #0]
 8005264:	01d2      	lsls	r2, r2, #7
 8005266:	4413      	add	r3, r2
 8005268:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 800526c:	f005 457f 	and.w	r5, r5, #4278190080	; 0xff000000
 8005270:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8005274:	6803      	ldr	r3, [r0, #0]
 8005276:	441a      	add	r2, r3
 8005278:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800527c:	6803      	ldr	r3, [r0, #0]
 800527e:	625c      	str	r4, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8005280:	f880 40a1 	strb.w	r4, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005284:	2300      	movs	r3, #0
 8005286:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 800528a:	4618      	mov	r0, r3
}
 800528c:	bc30      	pop	{r4, r5}
 800528e:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8005290:	2002      	movs	r0, #2
}
 8005292:	4770      	bx	lr

08005294 <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 8005294:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005298:	2b01      	cmp	r3, #1
 800529a:	d017      	beq.n	80052cc <HAL_LTDC_EnableColorKeying+0x38>
 800529c:	2201      	movs	r2, #1
 800529e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80052a2:	2302      	movs	r3, #2
 80052a4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 80052a8:	6803      	ldr	r3, [r0, #0]
 80052aa:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 80052ae:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 80052b2:	f043 0302 	orr.w	r3, r3, #2
 80052b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80052ba:	6803      	ldr	r3, [r0, #0]
 80052bc:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80052be:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80052c2:	2300      	movs	r3, #0
 80052c4:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 80052c8:	4618      	mov	r0, r3
 80052ca:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 80052cc:	2002      	movs	r0, #2
}
 80052ce:	4770      	bx	lr

080052d0 <HAL_LTDC_DisableColorKeying>:
  __HAL_LOCK(hltdc);
 80052d0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d017      	beq.n	8005308 <HAL_LTDC_DisableColorKeying+0x38>
 80052d8:	2201      	movs	r2, #1
 80052da:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80052de:	2302      	movs	r3, #2
 80052e0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
 80052e4:	6803      	ldr	r3, [r0, #0]
 80052e6:	eb03 11c1 	add.w	r1, r3, r1, lsl #7
 80052ea:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 80052ee:	f023 0302 	bic.w	r3, r3, #2
 80052f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80052f6:	6803      	ldr	r3, [r0, #0]
 80052f8:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80052fa:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80052fe:	2300      	movs	r3, #0
 8005300:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 8005304:	4618      	mov	r0, r3
 8005306:	4770      	bx	lr
  __HAL_LOCK(hltdc);
 8005308:	2002      	movs	r0, #2
}
 800530a:	4770      	bx	lr

0800530c <HAL_LTDC_SetWindowPosition>:
{
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800530e:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
 8005312:	2c01      	cmp	r4, #1
 8005314:	d021      	beq.n	800535a <HAL_LTDC_SetWindowPosition+0x4e>
 8005316:	4604      	mov	r4, r0
 8005318:	2501      	movs	r5, #1
 800531a:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800531e:	2002      	movs	r0, #2
 8005320:	f884 00a1 	strb.w	r0, [r4, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8005324:	2034      	movs	r0, #52	; 0x34
 8005326:	fb00 f003 	mul.w	r0, r0, r3
 800532a:	f100 0738 	add.w	r7, r0, #56	; 0x38
  pLayerCfg->WindowX0 = X0;
 800532e:	4420      	add	r0, r4
 8005330:	6381      	str	r1, [r0, #56]	; 0x38
  pLayerCfg->WindowX1 = X0 + pLayerCfg->ImageWidth;
 8005332:	6e06      	ldr	r6, [r0, #96]	; 0x60
 8005334:	440e      	add	r6, r1
 8005336:	63c6      	str	r6, [r0, #60]	; 0x3c
  pLayerCfg->WindowY0 = Y0;
 8005338:	6402      	str	r2, [r0, #64]	; 0x40
  pLayerCfg->WindowY1 = Y0 + pLayerCfg->ImageHeight;
 800533a:	6e46      	ldr	r6, [r0, #100]	; 0x64
 800533c:	4432      	add	r2, r6
 800533e:	6442      	str	r2, [r0, #68]	; 0x44
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005340:	461a      	mov	r2, r3
 8005342:	19e1      	adds	r1, r4, r7
 8005344:	4620      	mov	r0, r4
 8005346:	f7ff fd94 	bl	8004e72 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800534a:	6823      	ldr	r3, [r4, #0]
 800534c:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800534e:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005352:	2000      	movs	r0, #0
 8005354:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 8005358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(hltdc);
 800535a:	2002      	movs	r0, #2
 800535c:	e7fc      	b.n	8005358 <HAL_LTDC_SetWindowPosition+0x4c>

0800535e <HAL_LTDC_SetAlpha>:
{
 800535e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 8005360:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8005364:	2b01      	cmp	r3, #1
 8005366:	d019      	beq.n	800539c <HAL_LTDC_SetAlpha+0x3e>
 8005368:	4604      	mov	r4, r0
 800536a:	2501      	movs	r5, #1
 800536c:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005370:	2302      	movs	r3, #2
 8005372:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8005376:	2334      	movs	r3, #52	; 0x34
 8005378:	fb03 f302 	mul.w	r3, r3, r2
 800537c:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->Alpha = Alpha;
 8005380:	4423      	add	r3, r4
 8005382:	64d9      	str	r1, [r3, #76]	; 0x4c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005384:	1821      	adds	r1, r4, r0
 8005386:	4620      	mov	r0, r4
 8005388:	f7ff fd73 	bl	8004e72 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8005390:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005394:	2000      	movs	r0, #0
 8005396:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 800539a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hltdc);
 800539c:	2002      	movs	r0, #2
 800539e:	e7fc      	b.n	800539a <HAL_LTDC_SetAlpha+0x3c>

080053a0 <HAL_LTDC_SetAddress>:
{
 80053a0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hltdc);
 80053a2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d019      	beq.n	80053de <HAL_LTDC_SetAddress+0x3e>
 80053aa:	4604      	mov	r4, r0
 80053ac:	2501      	movs	r5, #1
 80053ae:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80053b2:	2302      	movs	r3, #2
 80053b4:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 80053b8:	2334      	movs	r3, #52	; 0x34
 80053ba:	fb03 f302 	mul.w	r3, r3, r2
 80053be:	f103 0038 	add.w	r0, r3, #56	; 0x38
  pLayerCfg->FBStartAdress = Address;
 80053c2:	4423      	add	r3, r4
 80053c4:	65d9      	str	r1, [r3, #92]	; 0x5c
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80053c6:	1821      	adds	r1, r4, r0
 80053c8:	4620      	mov	r0, r4
 80053ca:	f7ff fd52 	bl	8004e72 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80053d2:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80053d6:	2000      	movs	r0, #0
 80053d8:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
}
 80053dc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hltdc);
 80053de:	2002      	movs	r0, #2
 80053e0:	e7fc      	b.n	80053dc <HAL_LTDC_SetAddress+0x3c>
	...

080053e4 <HAL_LTDC_SetPitch>:
{
 80053e4:	b410      	push	{r4}
  __HAL_LOCK(hltdc);
 80053e6:	f890 40a0 	ldrb.w	r4, [r0, #160]	; 0xa0
 80053ea:	2c01      	cmp	r4, #1
 80053ec:	d047      	beq.n	800547e <HAL_LTDC_SetPitch+0x9a>
 80053ee:	2301      	movs	r3, #1
 80053f0:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80053f4:	2302      	movs	r3, #2
 80053f6:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80053fa:	2434      	movs	r4, #52	; 0x34
 80053fc:	fb04 0402 	mla	r4, r4, r2, r0
 8005400:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005402:	b16b      	cbz	r3, 8005420 <HAL_LTDC_SetPitch+0x3c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005404:	2b01      	cmp	r3, #1
 8005406:	d034      	beq.n	8005472 <HAL_LTDC_SetPitch+0x8e>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005408:	2b04      	cmp	r3, #4
 800540a:	d034      	beq.n	8005476 <HAL_LTDC_SetPitch+0x92>
 800540c:	2b02      	cmp	r3, #2
 800540e:	d008      	beq.n	8005422 <HAL_LTDC_SetPitch+0x3e>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005410:	2b03      	cmp	r3, #3
 8005412:	d032      	beq.n	800547a <HAL_LTDC_SetPitch+0x96>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005414:	2b07      	cmp	r3, #7
 8005416:	d001      	beq.n	800541c <HAL_LTDC_SetPitch+0x38>
    tmp = 1U;
 8005418:	2301      	movs	r3, #1
 800541a:	e002      	b.n	8005422 <HAL_LTDC_SetPitch+0x3e>
    tmp = 2U;
 800541c:	2302      	movs	r3, #2
 800541e:	e000      	b.n	8005422 <HAL_LTDC_SetPitch+0x3e>
    tmp = 4U;
 8005420:	2304      	movs	r3, #4
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8005422:	fb01 f103 	mul.w	r1, r1, r3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8005426:	6804      	ldr	r4, [r0, #0]
 8005428:	01d2      	lsls	r2, r2, #7
 800542a:	4414      	add	r4, r2
 800542c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8005430:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005434:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005438:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800543c:	4c11      	ldr	r4, [pc, #68]	; (8005484 <HAL_LTDC_SetPitch+0xa0>)
 800543e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005440:	f043 0301 	orr.w	r3, r3, #1
 8005444:	6263      	str	r3, [r4, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8005446:	6803      	ldr	r3, [r0, #0]
 8005448:	441a      	add	r2, r3
 800544a:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
 800544e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8005452:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8005456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800545e:	2301      	movs	r3, #1
 8005460:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8005464:	2300      	movs	r3, #0
 8005466:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  return HAL_OK;
 800546a:	4618      	mov	r0, r3
}
 800546c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005470:	4770      	bx	lr
    tmp = 3U;
 8005472:	2303      	movs	r3, #3
 8005474:	e7d5      	b.n	8005422 <HAL_LTDC_SetPitch+0x3e>
    tmp = 2U;
 8005476:	2302      	movs	r3, #2
 8005478:	e7d3      	b.n	8005422 <HAL_LTDC_SetPitch+0x3e>
 800547a:	2302      	movs	r3, #2
 800547c:	e7d1      	b.n	8005422 <HAL_LTDC_SetPitch+0x3e>
  __HAL_LOCK(hltdc);
 800547e:	2002      	movs	r0, #2
 8005480:	e7f4      	b.n	800546c <HAL_LTDC_SetPitch+0x88>
 8005482:	bf00      	nop
 8005484:	40016800 	.word	0x40016800

08005488 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005488:	b510      	push	{r4, lr}
 800548a:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800548c:	2300      	movs	r3, #0
 800548e:	9301      	str	r3, [sp, #4]
 8005490:	4b19      	ldr	r3, [pc, #100]	; (80054f8 <HAL_PWREx_EnableOverDrive+0x70>)
 8005492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005494:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005498:	641a      	str	r2, [r3, #64]	; 0x40
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a0:	9301      	str	r3, [sp, #4]
 80054a2:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80054a4:	4b15      	ldr	r3, [pc, #84]	; (80054fc <HAL_PWREx_EnableOverDrive+0x74>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054aa:	f7fd fab1 	bl	8002a10 <HAL_GetTick>
 80054ae:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80054b0:	4b13      	ldr	r3, [pc, #76]	; (8005500 <HAL_PWREx_EnableOverDrive+0x78>)
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80054b8:	d108      	bne.n	80054cc <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054ba:	f7fd faa9 	bl	8002a10 <HAL_GetTick>
 80054be:	1b00      	subs	r0, r0, r4
 80054c0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80054c4:	d9f4      	bls.n	80054b0 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 80054c6:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 80054c8:	b002      	add	sp, #8
 80054ca:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80054cc:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <HAL_PWREx_EnableOverDrive+0x7c>)
 80054ce:	2201      	movs	r2, #1
 80054d0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80054d2:	f7fd fa9d 	bl	8002a10 <HAL_GetTick>
 80054d6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80054d8:	4b09      	ldr	r3, [pc, #36]	; (8005500 <HAL_PWREx_EnableOverDrive+0x78>)
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80054e0:	d107      	bne.n	80054f2 <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80054e2:	f7fd fa95 	bl	8002a10 <HAL_GetTick>
 80054e6:	1b00      	subs	r0, r0, r4
 80054e8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80054ec:	d9f4      	bls.n	80054d8 <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 80054ee:	2003      	movs	r0, #3
 80054f0:	e7ea      	b.n	80054c8 <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 80054f2:	2000      	movs	r0, #0
 80054f4:	e7e8      	b.n	80054c8 <HAL_PWREx_EnableOverDrive+0x40>
 80054f6:	bf00      	nop
 80054f8:	40023800 	.word	0x40023800
 80054fc:	420e0040 	.word	0x420e0040
 8005500:	40007000 	.word	0x40007000
 8005504:	420e0044 	.word	0x420e0044

08005508 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8005508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800550c:	4605      	mov	r5, r0
 800550e:	460f      	mov	r7, r1
 8005510:	4616      	mov	r6, r2
 8005512:	4698      	mov	r8, r3
 8005514:	9c06      	ldr	r4, [sp, #24]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005516:	682b      	ldr	r3, [r5, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	423b      	tst	r3, r7
 800551c:	bf14      	ite	ne
 800551e:	2301      	movne	r3, #1
 8005520:	2300      	moveq	r3, #0
 8005522:	42b3      	cmp	r3, r6
 8005524:	d012      	beq.n	800554c <QSPI_WaitFlagStateUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005526:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800552a:	d0f4      	beq.n	8005516 <QSPI_WaitFlagStateUntilTimeout+0xe>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800552c:	b12c      	cbz	r4, 800553a <QSPI_WaitFlagStateUntilTimeout+0x32>
 800552e:	f7fd fa6f 	bl	8002a10 <HAL_GetTick>
 8005532:	eba0 0008 	sub.w	r0, r0, r8
 8005536:	42a0      	cmp	r0, r4
 8005538:	d9ed      	bls.n	8005516 <QSPI_WaitFlagStateUntilTimeout+0xe>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800553a:	2304      	movs	r3, #4
 800553c:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005540:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005542:	f043 0301 	orr.w	r3, r3, #1
 8005546:	646b      	str	r3, [r5, #68]	; 0x44
        
        return HAL_ERROR;
 8005548:	2001      	movs	r0, #1
 800554a:	e000      	b.n	800554e <QSPI_WaitFlagStateUntilTimeout+0x46>
      }
    }
  }
  return HAL_OK;
 800554c:	2000      	movs	r0, #0
}
 800554e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005552 <HAL_QSPI_SetTimeout>:
  hqspi->Timeout = Timeout;
 8005552:	6481      	str	r1, [r0, #72]	; 0x48
}
 8005554:	4770      	bx	lr
	...

08005558 <HAL_QSPI_Init>:
{
 8005558:	b530      	push	{r4, r5, lr}
 800555a:	b083      	sub	sp, #12
 800555c:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800555e:	f7fd fa57 	bl	8002a10 <HAL_GetTick>
  if(hqspi == NULL)
 8005562:	2c00      	cmp	r4, #0
 8005564:	d04e      	beq.n	8005604 <HAL_QSPI_Init+0xac>
 8005566:	4605      	mov	r5, r0
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005568:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800556c:	2b00      	cmp	r3, #0
 800556e:	d03e      	beq.n	80055ee <HAL_QSPI_Init+0x96>
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1U) << 8U));
 8005570:	6821      	ldr	r1, [r4, #0]
 8005572:	680b      	ldr	r3, [r1, #0]
 8005574:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8005578:	68a2      	ldr	r2, [r4, #8]
 800557a:	3a01      	subs	r2, #1
 800557c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005580:	600b      	str	r3, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005582:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	462b      	mov	r3, r5
 8005588:	2200      	movs	r2, #0
 800558a:	2120      	movs	r1, #32
 800558c:	4620      	mov	r0, r4
 800558e:	f7ff ffbb 	bl	8005508 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8005592:	4601      	mov	r1, r0
 8005594:	bb28      	cbnz	r0, 80055e2 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24U)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8005596:	6820      	ldr	r0, [r4, #0]
 8005598:	6803      	ldr	r3, [r0, #0]
 800559a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800559e:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80055a2:	6865      	ldr	r5, [r4, #4]
 80055a4:	68e2      	ldr	r2, [r4, #12]
 80055a6:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 80055aa:	69e5      	ldr	r5, [r4, #28]
 80055ac:	432a      	orrs	r2, r5
 80055ae:	6a25      	ldr	r5, [r4, #32]
 80055b0:	432a      	orrs	r2, r5
 80055b2:	4313      	orrs	r3, r2
 80055b4:	6003      	str	r3, [r0, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 80055b6:	6820      	ldr	r0, [r4, #0]
 80055b8:	6842      	ldr	r2, [r0, #4]
 80055ba:	4b13      	ldr	r3, [pc, #76]	; (8005608 <HAL_QSPI_Init+0xb0>)
 80055bc:	4013      	ands	r3, r2
 80055be:	6925      	ldr	r5, [r4, #16]
 80055c0:	6962      	ldr	r2, [r4, #20]
 80055c2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80055c6:	69a5      	ldr	r5, [r4, #24]
 80055c8:	432a      	orrs	r2, r5
 80055ca:	4313      	orrs	r3, r2
 80055cc:	6043      	str	r3, [r0, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80055ce:	6822      	ldr	r2, [r4, #0]
 80055d0:	6813      	ldr	r3, [r2, #0]
 80055d2:	f043 0301 	orr.w	r3, r3, #1
 80055d6:	6013      	str	r3, [r2, #0]
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 80055d8:	2300      	movs	r3, #0
 80055da:	6463      	str	r3, [r4, #68]	; 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 80055dc:	2301      	movs	r3, #1
 80055de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hqspi);
 80055e2:	2300      	movs	r3, #0
 80055e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 80055e8:	4608      	mov	r0, r1
 80055ea:	b003      	add	sp, #12
 80055ec:	bd30      	pop	{r4, r5, pc}
    hqspi->Lock = HAL_UNLOCKED;
 80055ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_QSPI_MspInit(hqspi);
 80055f2:	4620      	mov	r0, r4
 80055f4:	f7fc fc0a 	bl	8001e0c <HAL_QSPI_MspInit>
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 80055f8:	f241 3188 	movw	r1, #5000	; 0x1388
 80055fc:	4620      	mov	r0, r4
 80055fe:	f7ff ffa8 	bl	8005552 <HAL_QSPI_SetTimeout>
 8005602:	e7b5      	b.n	8005570 <HAL_QSPI_Init+0x18>
    return HAL_ERROR;
 8005604:	2101      	movs	r1, #1
 8005606:	e7ef      	b.n	80055e8 <HAL_QSPI_Init+0x90>
 8005608:	ffe0f8fe 	.word	0xffe0f8fe

0800560c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800560c:	4b32      	ldr	r3, [pc, #200]	; (80056d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 030c 	and.w	r3, r3, #12
 8005614:	2b04      	cmp	r3, #4
 8005616:	d05c      	beq.n	80056d2 <HAL_RCC_GetSysClockFreq+0xc6>
 8005618:	2b08      	cmp	r3, #8
 800561a:	d001      	beq.n	8005620 <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800561c:	482f      	ldr	r0, [pc, #188]	; (80056dc <HAL_RCC_GetSysClockFreq+0xd0>)
 800561e:	4770      	bx	lr
{
 8005620:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005624:	4b2c      	ldr	r3, [pc, #176]	; (80056d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005632:	d02b      	beq.n	800568c <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005634:	4b28      	ldr	r3, [pc, #160]	; (80056d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800563c:	461e      	mov	r6, r3
 800563e:	2700      	movs	r7, #0
 8005640:	015c      	lsls	r4, r3, #5
 8005642:	2500      	movs	r5, #0
 8005644:	1ae4      	subs	r4, r4, r3
 8005646:	eb65 0507 	sbc.w	r5, r5, r7
 800564a:	01a9      	lsls	r1, r5, #6
 800564c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8005650:	01a0      	lsls	r0, r4, #6
 8005652:	1b00      	subs	r0, r0, r4
 8005654:	eb61 0105 	sbc.w	r1, r1, r5
 8005658:	00cb      	lsls	r3, r1, #3
 800565a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800565e:	00c4      	lsls	r4, r0, #3
 8005660:	19a0      	adds	r0, r4, r6
 8005662:	eb43 0107 	adc.w	r1, r3, r7
 8005666:	024b      	lsls	r3, r1, #9
 8005668:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800566c:	0244      	lsls	r4, r0, #9
 800566e:	4620      	mov	r0, r4
 8005670:	4619      	mov	r1, r3
 8005672:	2300      	movs	r3, #0
 8005674:	f7fb fa72 	bl	8000b5c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005678:	4b17      	ldr	r3, [pc, #92]	; (80056d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005680:	3301      	adds	r3, #1
 8005682:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8005684:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005688:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800568c:	4b12      	ldr	r3, [pc, #72]	; (80056d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8005694:	461e      	mov	r6, r3
 8005696:	2700      	movs	r7, #0
 8005698:	015c      	lsls	r4, r3, #5
 800569a:	2500      	movs	r5, #0
 800569c:	1ae4      	subs	r4, r4, r3
 800569e:	eb65 0507 	sbc.w	r5, r5, r7
 80056a2:	01a9      	lsls	r1, r5, #6
 80056a4:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 80056a8:	01a0      	lsls	r0, r4, #6
 80056aa:	1b00      	subs	r0, r0, r4
 80056ac:	eb61 0105 	sbc.w	r1, r1, r5
 80056b0:	00cb      	lsls	r3, r1, #3
 80056b2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80056b6:	00c4      	lsls	r4, r0, #3
 80056b8:	19a0      	adds	r0, r4, r6
 80056ba:	eb43 0107 	adc.w	r1, r3, r7
 80056be:	028b      	lsls	r3, r1, #10
 80056c0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80056c4:	0284      	lsls	r4, r0, #10
 80056c6:	4620      	mov	r0, r4
 80056c8:	4619      	mov	r1, r3
 80056ca:	2300      	movs	r3, #0
 80056cc:	f7fb fa46 	bl	8000b5c <__aeabi_uldivmod>
 80056d0:	e7d2      	b.n	8005678 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 80056d2:	4803      	ldr	r0, [pc, #12]	; (80056e0 <HAL_RCC_GetSysClockFreq+0xd4>)
}
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40023800 	.word	0x40023800
 80056dc:	00f42400 	.word	0x00f42400
 80056e0:	007a1200 	.word	0x007a1200

080056e4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80056e4:	2800      	cmp	r0, #0
 80056e6:	f000 809e 	beq.w	8005826 <HAL_RCC_ClockConfig+0x142>
{
 80056ea:	b570      	push	{r4, r5, r6, lr}
 80056ec:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056ee:	4b50      	ldr	r3, [pc, #320]	; (8005830 <HAL_RCC_ClockConfig+0x14c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 030f 	and.w	r3, r3, #15
 80056f6:	428b      	cmp	r3, r1
 80056f8:	d209      	bcs.n	800570e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fa:	b2cb      	uxtb	r3, r1
 80056fc:	4a4c      	ldr	r2, [pc, #304]	; (8005830 <HAL_RCC_ClockConfig+0x14c>)
 80056fe:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005700:	6813      	ldr	r3, [r2, #0]
 8005702:	f003 030f 	and.w	r3, r3, #15
 8005706:	428b      	cmp	r3, r1
 8005708:	d001      	beq.n	800570e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 800570a:	2001      	movs	r0, #1
}
 800570c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800570e:	6823      	ldr	r3, [r4, #0]
 8005710:	f013 0f02 	tst.w	r3, #2
 8005714:	d017      	beq.n	8005746 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005716:	f013 0f04 	tst.w	r3, #4
 800571a:	d004      	beq.n	8005726 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800571c:	4a45      	ldr	r2, [pc, #276]	; (8005834 <HAL_RCC_ClockConfig+0x150>)
 800571e:	6893      	ldr	r3, [r2, #8]
 8005720:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005724:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	f013 0f08 	tst.w	r3, #8
 800572c:	d004      	beq.n	8005738 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800572e:	4a41      	ldr	r2, [pc, #260]	; (8005834 <HAL_RCC_ClockConfig+0x150>)
 8005730:	6893      	ldr	r3, [r2, #8]
 8005732:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005736:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005738:	4a3e      	ldr	r2, [pc, #248]	; (8005834 <HAL_RCC_ClockConfig+0x150>)
 800573a:	6893      	ldr	r3, [r2, #8]
 800573c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005740:	68a0      	ldr	r0, [r4, #8]
 8005742:	4303      	orrs	r3, r0
 8005744:	6093      	str	r3, [r2, #8]
 8005746:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	f013 0f01 	tst.w	r3, #1
 800574e:	d032      	beq.n	80057b6 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005750:	6863      	ldr	r3, [r4, #4]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d021      	beq.n	800579a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005756:	1e9a      	subs	r2, r3, #2
 8005758:	2a01      	cmp	r2, #1
 800575a:	d925      	bls.n	80057a8 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800575c:	4a35      	ldr	r2, [pc, #212]	; (8005834 <HAL_RCC_ClockConfig+0x150>)
 800575e:	6812      	ldr	r2, [r2, #0]
 8005760:	f012 0f02 	tst.w	r2, #2
 8005764:	d061      	beq.n	800582a <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005766:	4933      	ldr	r1, [pc, #204]	; (8005834 <HAL_RCC_ClockConfig+0x150>)
 8005768:	688a      	ldr	r2, [r1, #8]
 800576a:	f022 0203 	bic.w	r2, r2, #3
 800576e:	4313      	orrs	r3, r2
 8005770:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005772:	f7fd f94d 	bl	8002a10 <HAL_GetTick>
 8005776:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005778:	4b2e      	ldr	r3, [pc, #184]	; (8005834 <HAL_RCC_ClockConfig+0x150>)
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 030c 	and.w	r3, r3, #12
 8005780:	6862      	ldr	r2, [r4, #4]
 8005782:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005786:	d016      	beq.n	80057b6 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005788:	f7fd f942 	bl	8002a10 <HAL_GetTick>
 800578c:	1b80      	subs	r0, r0, r6
 800578e:	f241 3388 	movw	r3, #5000	; 0x1388
 8005792:	4298      	cmp	r0, r3
 8005794:	d9f0      	bls.n	8005778 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8005796:	2003      	movs	r0, #3
 8005798:	e7b8      	b.n	800570c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800579a:	4a26      	ldr	r2, [pc, #152]	; (8005834 <HAL_RCC_ClockConfig+0x150>)
 800579c:	6812      	ldr	r2, [r2, #0]
 800579e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80057a2:	d1e0      	bne.n	8005766 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80057a4:	2001      	movs	r0, #1
 80057a6:	e7b1      	b.n	800570c <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a8:	4a22      	ldr	r2, [pc, #136]	; (8005834 <HAL_RCC_ClockConfig+0x150>)
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80057b0:	d1d9      	bne.n	8005766 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80057b2:	2001      	movs	r0, #1
 80057b4:	e7aa      	b.n	800570c <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057b6:	4b1e      	ldr	r3, [pc, #120]	; (8005830 <HAL_RCC_ClockConfig+0x14c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 030f 	and.w	r3, r3, #15
 80057be:	42ab      	cmp	r3, r5
 80057c0:	d909      	bls.n	80057d6 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057c2:	b2ea      	uxtb	r2, r5
 80057c4:	4b1a      	ldr	r3, [pc, #104]	; (8005830 <HAL_RCC_ClockConfig+0x14c>)
 80057c6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 030f 	and.w	r3, r3, #15
 80057ce:	42ab      	cmp	r3, r5
 80057d0:	d001      	beq.n	80057d6 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 80057d2:	2001      	movs	r0, #1
 80057d4:	e79a      	b.n	800570c <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	f013 0f04 	tst.w	r3, #4
 80057dc:	d006      	beq.n	80057ec <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057de:	4a15      	ldr	r2, [pc, #84]	; (8005834 <HAL_RCC_ClockConfig+0x150>)
 80057e0:	6893      	ldr	r3, [r2, #8]
 80057e2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80057e6:	68e1      	ldr	r1, [r4, #12]
 80057e8:	430b      	orrs	r3, r1
 80057ea:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	f013 0f08 	tst.w	r3, #8
 80057f2:	d007      	beq.n	8005804 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057f4:	4a0f      	ldr	r2, [pc, #60]	; (8005834 <HAL_RCC_ClockConfig+0x150>)
 80057f6:	6893      	ldr	r3, [r2, #8]
 80057f8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80057fc:	6921      	ldr	r1, [r4, #16]
 80057fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005802:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005804:	f7ff ff02 	bl	800560c <HAL_RCC_GetSysClockFreq>
 8005808:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <HAL_RCC_ClockConfig+0x150>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005810:	4a09      	ldr	r2, [pc, #36]	; (8005838 <HAL_RCC_ClockConfig+0x154>)
 8005812:	5cd3      	ldrb	r3, [r2, r3]
 8005814:	40d8      	lsrs	r0, r3
 8005816:	4b09      	ldr	r3, [pc, #36]	; (800583c <HAL_RCC_ClockConfig+0x158>)
 8005818:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800581a:	4b09      	ldr	r3, [pc, #36]	; (8005840 <HAL_RCC_ClockConfig+0x15c>)
 800581c:	6818      	ldr	r0, [r3, #0]
 800581e:	f7fc fcff 	bl	8002220 <HAL_InitTick>
  return HAL_OK;
 8005822:	2000      	movs	r0, #0
 8005824:	e772      	b.n	800570c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8005826:	2001      	movs	r0, #1
}
 8005828:	4770      	bx	lr
        return HAL_ERROR;
 800582a:	2001      	movs	r0, #1
 800582c:	e76e      	b.n	800570c <HAL_RCC_ClockConfig+0x28>
 800582e:	bf00      	nop
 8005830:	40023c00 	.word	0x40023c00
 8005834:	40023800 	.word	0x40023800
 8005838:	0801ecf4 	.word	0x0801ecf4
 800583c:	2000001c 	.word	0x2000001c
 8005840:	2000004c 	.word	0x2000004c

08005844 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8005844:	4b01      	ldr	r3, [pc, #4]	; (800584c <HAL_RCC_GetHCLKFreq+0x8>)
 8005846:	6818      	ldr	r0, [r3, #0]
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	2000001c 	.word	0x2000001c

08005850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005850:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005852:	f7ff fff7 	bl	8005844 <HAL_RCC_GetHCLKFreq>
 8005856:	4b04      	ldr	r3, [pc, #16]	; (8005868 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800585e:	4a03      	ldr	r2, [pc, #12]	; (800586c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005860:	5cd3      	ldrb	r3, [r2, r3]
}
 8005862:	40d8      	lsrs	r0, r3
 8005864:	bd08      	pop	{r3, pc}
 8005866:	bf00      	nop
 8005868:	40023800 	.word	0x40023800
 800586c:	0801ed04 	.word	0x0801ed04

08005870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005870:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005872:	f7ff ffe7 	bl	8005844 <HAL_RCC_GetHCLKFreq>
 8005876:	4b04      	ldr	r3, [pc, #16]	; (8005888 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800587e:	4a03      	ldr	r2, [pc, #12]	; (800588c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005880:	5cd3      	ldrb	r3, [r2, r3]
}
 8005882:	40d8      	lsrs	r0, r3
 8005884:	bd08      	pop	{r3, pc}
 8005886:	bf00      	nop
 8005888:	40023800 	.word	0x40023800
 800588c:	0801ed04 	.word	0x0801ed04

08005890 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005890:	230f      	movs	r3, #15
 8005892:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005894:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <HAL_RCC_GetClockConfig+0x34>)
 8005896:	689a      	ldr	r2, [r3, #8]
 8005898:	f002 0203 	and.w	r2, r2, #3
 800589c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80058a4:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80058ac:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	08db      	lsrs	r3, r3, #3
 80058b2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80058b6:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80058b8:	4b03      	ldr	r3, [pc, #12]	; (80058c8 <HAL_RCC_GetClockConfig+0x38>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 030f 	and.w	r3, r3, #15
 80058c0:	600b      	str	r3, [r1, #0]
}
 80058c2:	4770      	bx	lr
 80058c4:	40023800 	.word	0x40023800
 80058c8:	40023c00 	.word	0x40023c00

080058cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058cc:	b530      	push	{r4, r5, lr}
 80058ce:	b083      	sub	sp, #12
 80058d0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80058d2:	6803      	ldr	r3, [r0, #0]
 80058d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80058d8:	d008      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80058da:	4abc      	ldr	r2, [pc, #752]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058dc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80058e0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80058e4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80058e6:	430b      	orrs	r3, r1
 80058e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	f413 7f80 	tst.w	r3, #256	; 0x100
 80058f2:	d008      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80058f4:	4ab5      	ldr	r2, [pc, #724]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80058f6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80058fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058fe:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005900:	430b      	orrs	r3, r1
 8005902:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005906:	6823      	ldr	r3, [r4, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005908:	f013 0f43 	tst.w	r3, #67	; 0x43
 800590c:	d11b      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x7a>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	f013 0f0c 	tst.w	r3, #12
 8005914:	d170      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8005916:	f013 0f80 	tst.w	r3, #128	; 0x80
 800591a:	d003      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x58>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800591c:	6b63      	ldr	r3, [r4, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800591e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005922:	d069      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	f013 0f20 	tst.w	r3, #32
 800592a:	f040 80e5 	bne.w	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800592e:	6823      	ldr	r3, [r4, #0]
 8005930:	f013 0f10 	tst.w	r3, #16
 8005934:	f000 8147 	beq.w	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005938:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800593c:	4ba4      	ldr	r3, [pc, #656]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800593e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005940:	2000      	movs	r0, #0
}
 8005942:	b003      	add	sp, #12
 8005944:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8005946:	4ba3      	ldr	r3, [pc, #652]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800594c:	f7fd f860 	bl	8002a10 <HAL_GetTick>
 8005950:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005952:	4b9e      	ldr	r3, [pc, #632]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800595a:	d006      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x9e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800595c:	f7fd f858 	bl	8002a10 <HAL_GetTick>
 8005960:	1b40      	subs	r0, r0, r5
 8005962:	2802      	cmp	r0, #2
 8005964:	d9f5      	bls.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x86>
        return HAL_TIMEOUT;
 8005966:	2003      	movs	r0, #3
 8005968:	e7eb      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x76>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	f013 0f01 	tst.w	r3, #1
 8005970:	d007      	beq.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005972:	6862      	ldr	r2, [r4, #4]
 8005974:	68a3      	ldr	r3, [r4, #8]
 8005976:	071b      	lsls	r3, r3, #28
 8005978:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800597c:	4a93      	ldr	r2, [pc, #588]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800597e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	f013 0f02 	tst.w	r3, #2
 8005988:	d015      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800598a:	4a90      	ldr	r2, [pc, #576]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800598c:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005990:	6860      	ldr	r0, [r4, #4]
 8005992:	68e3      	ldr	r3, [r4, #12]
 8005994:	061b      	lsls	r3, r3, #24
 8005996:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800599a:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 800599e:	430b      	orrs	r3, r1
 80059a0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059a4:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80059a8:	f023 031f 	bic.w	r3, r3, #31
 80059ac:	6a21      	ldr	r1, [r4, #32]
 80059ae:	3901      	subs	r1, #1
 80059b0:	430b      	orrs	r3, r1
 80059b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80059bc:	d00a      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059be:	6862      	ldr	r2, [r4, #4]
 80059c0:	68e3      	ldr	r3, [r4, #12]
 80059c2:	061b      	lsls	r3, r3, #24
 80059c4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80059c8:	68a2      	ldr	r2, [r4, #8]
 80059ca:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80059ce:	4a7f      	ldr	r2, [pc, #508]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80059d4:	4b7f      	ldr	r3, [pc, #508]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80059d6:	2201      	movs	r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80059da:	f7fd f819 	bl	8002a10 <HAL_GetTick>
 80059de:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059e0:	4b7a      	ldr	r3, [pc, #488]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80059e8:	d191      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x42>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059ea:	f7fd f811 	bl	8002a10 <HAL_GetTick>
 80059ee:	1b40      	subs	r0, r0, r5
 80059f0:	2802      	cmp	r0, #2
 80059f2:	d9f5      	bls.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        return HAL_TIMEOUT;
 80059f4:	2003      	movs	r0, #3
 80059f6:	e7a4      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x76>
    __HAL_RCC_PLLSAI_DISABLE();
 80059f8:	4b77      	ldr	r3, [pc, #476]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80059fe:	f7fd f807 	bl	8002a10 <HAL_GetTick>
 8005a02:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a04:	4b71      	ldr	r3, [pc, #452]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005a0c:	d006      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x150>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005a0e:	f7fc ffff 	bl	8002a10 <HAL_GetTick>
 8005a12:	1b40      	subs	r0, r0, r5
 8005a14:	2802      	cmp	r0, #2
 8005a16:	d9f5      	bls.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x138>
        return HAL_TIMEOUT;
 8005a18:	2003      	movs	r0, #3
 8005a1a:	e792      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x76>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	f013 0f04 	tst.w	r3, #4
 8005a22:	d01b      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x190>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005a24:	4a69      	ldr	r2, [pc, #420]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a26:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a2a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8005a2e:	6920      	ldr	r0, [r4, #16]
 8005a30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a34:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005a38:	69a0      	ldr	r0, [r4, #24]
 8005a3a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005a3e:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005a42:	430b      	orrs	r3, r1
 8005a44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a48:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005a4c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8005a50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005a52:	3901      	subs	r1, #1
 8005a54:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005a58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	f013 0f08 	tst.w	r3, #8
 8005a62:	d019      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8005a64:	4a59      	ldr	r2, [pc, #356]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005a66:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a6a:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a6e:	6920      	ldr	r0, [r4, #16]
 8005a70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a74:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005a78:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8005a7c:	430b      	orrs	r3, r1
 8005a7e:	69e1      	ldr	r1, [r4, #28]
 8005a80:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8005a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a88:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8005a8c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005a90:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005a92:	430b      	orrs	r3, r1
 8005a94:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a9e:	d003      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8005aa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8005aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aa6:	d012      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x202>
    __HAL_RCC_PLLSAI_ENABLE();
 8005aa8:	4b4b      	ldr	r3, [pc, #300]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8005aaa:	2201      	movs	r2, #1
 8005aac:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8005aae:	f7fc ffaf 	bl	8002a10 <HAL_GetTick>
 8005ab2:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ab4:	4b45      	ldr	r3, [pc, #276]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005abc:	f47f af32 	bne.w	8005924 <HAL_RCCEx_PeriphCLKConfig+0x58>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005ac0:	f7fc ffa6 	bl	8002a10 <HAL_GetTick>
 8005ac4:	1b40      	subs	r0, r0, r5
 8005ac6:	2802      	cmp	r0, #2
 8005ac8:	d9f4      	bls.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        return HAL_TIMEOUT;
 8005aca:	2003      	movs	r0, #3
 8005acc:	e739      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x76>
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ace:	4a3f      	ldr	r2, [pc, #252]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005ad0:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ad4:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8005ad8:	6925      	ldr	r5, [r4, #16]
 8005ada:	6963      	ldr	r3, [r4, #20]
 8005adc:	085b      	lsrs	r3, r3, #1
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	041b      	lsls	r3, r3, #16
 8005ae2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8005ae6:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
 8005aea:	4303      	orrs	r3, r0
 8005aec:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8005af0:	430b      	orrs	r3, r1
 8005af2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8005af6:	e7d7      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    __HAL_RCC_PWR_CLK_ENABLE();
 8005af8:	2300      	movs	r3, #0
 8005afa:	9301      	str	r3, [sp, #4]
 8005afc:	4b33      	ldr	r3, [pc, #204]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b00:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005b04:	641a      	str	r2, [r3, #64]	; 0x40
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8005b10:	4a32      	ldr	r2, [pc, #200]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b12:	6813      	ldr	r3, [r2, #0]
 8005b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b18:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005b1a:	f7fc ff79 	bl	8002a10 <HAL_GetTick>
 8005b1e:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005b20:	4b2e      	ldr	r3, [pc, #184]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005b28:	d106      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b2a:	f7fc ff71 	bl	8002a10 <HAL_GetTick>
 8005b2e:	1b40      	subs	r0, r0, r5
 8005b30:	2802      	cmp	r0, #2
 8005b32:	d9f5      	bls.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x254>
        return HAL_TIMEOUT;
 8005b34:	2003      	movs	r0, #3
 8005b36:	e704      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x76>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b38:	4b24      	ldr	r3, [pc, #144]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b3c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8005b40:	d012      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8005b42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005b44:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d00d      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b4c:	4b1f      	ldr	r3, [pc, #124]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b50:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b54:	4922      	ldr	r1, [pc, #136]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005b56:	2001      	movs	r0, #1
 8005b58:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8005b5e:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b62:	f013 0f01 	tst.w	r3, #1
 8005b66:	d112      	bne.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005b6a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8005b6e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8005b72:	d01d      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 8005b74:	4a15      	ldr	r2, [pc, #84]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b76:	6893      	ldr	r3, [r2, #8]
 8005b78:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b7c:	6093      	str	r3, [r2, #8]
 8005b7e:	4913      	ldr	r1, [pc, #76]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b80:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8005b82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005b84:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	670b      	str	r3, [r1, #112]	; 0x70
 8005b8c:	e6cf      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x62>
        tickstart = HAL_GetTick();
 8005b8e:	f7fc ff3f 	bl	8002a10 <HAL_GetTick>
 8005b92:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b94:	4b0d      	ldr	r3, [pc, #52]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b98:	f013 0f02 	tst.w	r3, #2
 8005b9c:	d1e4      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x29c>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b9e:	f7fc ff37 	bl	8002a10 <HAL_GetTick>
 8005ba2:	1b40      	subs	r0, r0, r5
 8005ba4:	f241 3388 	movw	r3, #5000	; 0x1388
 8005ba8:	4298      	cmp	r0, r3
 8005baa:	d9f3      	bls.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
            return HAL_TIMEOUT;
 8005bac:	2003      	movs	r0, #3
 8005bae:	e6c8      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x76>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bb0:	4906      	ldr	r1, [pc, #24]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005bb2:	688a      	ldr	r2, [r1, #8]
 8005bb4:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8005bb8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	608b      	str	r3, [r1, #8]
 8005bc4:	e7db      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
  return HAL_OK;
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	e6bb      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005bca:	bf00      	nop
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	424711e0 	.word	0x424711e0
 8005bd4:	42470068 	.word	0x42470068
 8005bd8:	42470070 	.word	0x42470070
 8005bdc:	40007000 	.word	0x40007000
 8005be0:	42470e40 	.word	0x42470e40

08005be4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005be4:	b570      	push	{r4, r5, r6, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bea:	6803      	ldr	r3, [r0, #0]
 8005bec:	f013 0f01 	tst.w	r3, #1
 8005bf0:	d03b      	beq.n	8005c6a <HAL_RCC_OscConfig+0x86>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005bf2:	4ba7      	ldr	r3, [pc, #668]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 030c 	and.w	r3, r3, #12
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d02c      	beq.n	8005c58 <HAL_RCC_OscConfig+0x74>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bfe:	4ba4      	ldr	r3, [pc, #656]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d021      	beq.n	8005c4e <HAL_RCC_OscConfig+0x6a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c0a:	6863      	ldr	r3, [r4, #4]
 8005c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c10:	d04f      	beq.n	8005cb2 <HAL_RCC_OscConfig+0xce>
 8005c12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c16:	d052      	beq.n	8005cbe <HAL_RCC_OscConfig+0xda>
 8005c18:	4b9d      	ldr	r3, [pc, #628]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c28:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c2a:	6863      	ldr	r3, [r4, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d050      	beq.n	8005cd2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c30:	f7fc feee 	bl	8002a10 <HAL_GetTick>
 8005c34:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c36:	4b96      	ldr	r3, [pc, #600]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005c3e:	d114      	bne.n	8005c6a <HAL_RCC_OscConfig+0x86>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c40:	f7fc fee6 	bl	8002a10 <HAL_GetTick>
 8005c44:	1b40      	subs	r0, r0, r5
 8005c46:	2864      	cmp	r0, #100	; 0x64
 8005c48:	d9f5      	bls.n	8005c36 <HAL_RCC_OscConfig+0x52>
          {
            return HAL_TIMEOUT;
 8005c4a:	2003      	movs	r0, #3
 8005c4c:	e18a      	b.n	8005f64 <HAL_RCC_OscConfig+0x380>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c4e:	4b90      	ldr	r3, [pc, #576]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005c56:	d0d8      	beq.n	8005c0a <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c58:	4b8d      	ldr	r3, [pc, #564]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005c60:	d003      	beq.n	8005c6a <HAL_RCC_OscConfig+0x86>
 8005c62:	6863      	ldr	r3, [r4, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 817a 	beq.w	8005f5e <HAL_RCC_OscConfig+0x37a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	f013 0f02 	tst.w	r3, #2
 8005c70:	d055      	beq.n	8005d1e <HAL_RCC_OscConfig+0x13a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005c72:	4b87      	ldr	r3, [pc, #540]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f013 0f0c 	tst.w	r3, #12
 8005c7a:	d03e      	beq.n	8005cfa <HAL_RCC_OscConfig+0x116>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c7c:	4b84      	ldr	r3, [pc, #528]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005c84:	2b08      	cmp	r3, #8
 8005c86:	d033      	beq.n	8005cf0 <HAL_RCC_OscConfig+0x10c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c88:	68e3      	ldr	r3, [r4, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d068      	beq.n	8005d60 <HAL_RCC_OscConfig+0x17c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c8e:	4b81      	ldr	r3, [pc, #516]	; (8005e94 <HAL_RCC_OscConfig+0x2b0>)
 8005c90:	2201      	movs	r2, #1
 8005c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c94:	f7fc febc 	bl	8002a10 <HAL_GetTick>
 8005c98:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c9a:	4b7d      	ldr	r3, [pc, #500]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f013 0f02 	tst.w	r3, #2
 8005ca2:	d154      	bne.n	8005d4e <HAL_RCC_OscConfig+0x16a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ca4:	f7fc feb4 	bl	8002a10 <HAL_GetTick>
 8005ca8:	1b40      	subs	r0, r0, r5
 8005caa:	2802      	cmp	r0, #2
 8005cac:	d9f5      	bls.n	8005c9a <HAL_RCC_OscConfig+0xb6>
          {
            return HAL_TIMEOUT;
 8005cae:	2003      	movs	r0, #3
 8005cb0:	e158      	b.n	8005f64 <HAL_RCC_OscConfig+0x380>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cb2:	4a77      	ldr	r2, [pc, #476]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005cb4:	6813      	ldr	r3, [r2, #0]
 8005cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	e7b5      	b.n	8005c2a <HAL_RCC_OscConfig+0x46>
 8005cbe:	4b74      	ldr	r3, [pc, #464]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	e7ab      	b.n	8005c2a <HAL_RCC_OscConfig+0x46>
        tickstart = HAL_GetTick();
 8005cd2:	f7fc fe9d 	bl	8002a10 <HAL_GetTick>
 8005cd6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cd8:	4b6d      	ldr	r3, [pc, #436]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005ce0:	d0c3      	beq.n	8005c6a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ce2:	f7fc fe95 	bl	8002a10 <HAL_GetTick>
 8005ce6:	1b40      	subs	r0, r0, r5
 8005ce8:	2864      	cmp	r0, #100	; 0x64
 8005cea:	d9f5      	bls.n	8005cd8 <HAL_RCC_OscConfig+0xf4>
            return HAL_TIMEOUT;
 8005cec:	2003      	movs	r0, #3
 8005cee:	e139      	b.n	8005f64 <HAL_RCC_OscConfig+0x380>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cf0:	4b67      	ldr	r3, [pc, #412]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8005cf8:	d1c6      	bne.n	8005c88 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cfa:	4b65      	ldr	r3, [pc, #404]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f013 0f02 	tst.w	r3, #2
 8005d02:	d004      	beq.n	8005d0e <HAL_RCC_OscConfig+0x12a>
 8005d04:	68e3      	ldr	r3, [r4, #12]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d001      	beq.n	8005d0e <HAL_RCC_OscConfig+0x12a>
        return HAL_ERROR;
 8005d0a:	2001      	movs	r0, #1
 8005d0c:	e12a      	b.n	8005f64 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d0e:	4a60      	ldr	r2, [pc, #384]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005d10:	6813      	ldr	r3, [r2, #0]
 8005d12:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005d16:	6921      	ldr	r1, [r4, #16]
 8005d18:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005d1c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	f013 0f08 	tst.w	r3, #8
 8005d24:	d040      	beq.n	8005da8 <HAL_RCC_OscConfig+0x1c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d26:	6963      	ldr	r3, [r4, #20]
 8005d28:	b363      	cbz	r3, 8005d84 <HAL_RCC_OscConfig+0x1a0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d2a:	4b5b      	ldr	r3, [pc, #364]	; (8005e98 <HAL_RCC_OscConfig+0x2b4>)
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d30:	f7fc fe6e 	bl	8002a10 <HAL_GetTick>
 8005d34:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d36:	4b56      	ldr	r3, [pc, #344]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d3a:	f013 0f02 	tst.w	r3, #2
 8005d3e:	d133      	bne.n	8005da8 <HAL_RCC_OscConfig+0x1c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d40:	f7fc fe66 	bl	8002a10 <HAL_GetTick>
 8005d44:	1b40      	subs	r0, r0, r5
 8005d46:	2802      	cmp	r0, #2
 8005d48:	d9f5      	bls.n	8005d36 <HAL_RCC_OscConfig+0x152>
        {
          return HAL_TIMEOUT;
 8005d4a:	2003      	movs	r0, #3
 8005d4c:	e10a      	b.n	8005f64 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d4e:	4a50      	ldr	r2, [pc, #320]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005d50:	6813      	ldr	r3, [r2, #0]
 8005d52:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005d56:	6921      	ldr	r1, [r4, #16]
 8005d58:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005d5c:	6013      	str	r3, [r2, #0]
 8005d5e:	e7de      	b.n	8005d1e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_DISABLE();
 8005d60:	4b4c      	ldr	r3, [pc, #304]	; (8005e94 <HAL_RCC_OscConfig+0x2b0>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005d66:	f7fc fe53 	bl	8002a10 <HAL_GetTick>
 8005d6a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d6c:	4b48      	ldr	r3, [pc, #288]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f013 0f02 	tst.w	r3, #2
 8005d74:	d0d3      	beq.n	8005d1e <HAL_RCC_OscConfig+0x13a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d76:	f7fc fe4b 	bl	8002a10 <HAL_GetTick>
 8005d7a:	1b40      	subs	r0, r0, r5
 8005d7c:	2802      	cmp	r0, #2
 8005d7e:	d9f5      	bls.n	8005d6c <HAL_RCC_OscConfig+0x188>
            return HAL_TIMEOUT;
 8005d80:	2003      	movs	r0, #3
 8005d82:	e0ef      	b.n	8005f64 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d84:	4b44      	ldr	r3, [pc, #272]	; (8005e98 <HAL_RCC_OscConfig+0x2b4>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d8a:	f7fc fe41 	bl	8002a10 <HAL_GetTick>
 8005d8e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d90:	4b3f      	ldr	r3, [pc, #252]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d94:	f013 0f02 	tst.w	r3, #2
 8005d98:	d006      	beq.n	8005da8 <HAL_RCC_OscConfig+0x1c4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d9a:	f7fc fe39 	bl	8002a10 <HAL_GetTick>
 8005d9e:	1b40      	subs	r0, r0, r5
 8005da0:	2802      	cmp	r0, #2
 8005da2:	d9f5      	bls.n	8005d90 <HAL_RCC_OscConfig+0x1ac>
        {
          return HAL_TIMEOUT;
 8005da4:	2003      	movs	r0, #3
 8005da6:	e0dd      	b.n	8005f64 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	f013 0f04 	tst.w	r3, #4
 8005dae:	d078      	beq.n	8005ea2 <HAL_RCC_OscConfig+0x2be>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005db0:	4b37      	ldr	r3, [pc, #220]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8005db8:	d133      	bne.n	8005e22 <HAL_RCC_OscConfig+0x23e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dba:	2300      	movs	r3, #0
 8005dbc:	9301      	str	r3, [sp, #4]
 8005dbe:	4b34      	ldr	r3, [pc, #208]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005dc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dc2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005dc6:	641a      	str	r2, [r3, #64]	; 0x40
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dce:	9301      	str	r3, [sp, #4]
 8005dd0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005dd2:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd4:	4b31      	ldr	r3, [pc, #196]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005ddc:	d023      	beq.n	8005e26 <HAL_RCC_OscConfig+0x242>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dde:	68a3      	ldr	r3, [r4, #8]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d034      	beq.n	8005e4e <HAL_RCC_OscConfig+0x26a>
 8005de4:	2b05      	cmp	r3, #5
 8005de6:	d038      	beq.n	8005e5a <HAL_RCC_OscConfig+0x276>
 8005de8:	4b29      	ldr	r3, [pc, #164]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005dea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005dec:	f022 0201 	bic.w	r2, r2, #1
 8005df0:	671a      	str	r2, [r3, #112]	; 0x70
 8005df2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005df4:	f022 0204 	bic.w	r2, r2, #4
 8005df8:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dfa:	68a3      	ldr	r3, [r4, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d036      	beq.n	8005e6e <HAL_RCC_OscConfig+0x28a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e00:	f7fc fe06 	bl	8002a10 <HAL_GetTick>
 8005e04:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e06:	4b22      	ldr	r3, [pc, #136]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0a:	f013 0f02 	tst.w	r3, #2
 8005e0e:	d147      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e10:	f7fc fdfe 	bl	8002a10 <HAL_GetTick>
 8005e14:	1b80      	subs	r0, r0, r6
 8005e16:	f241 3388 	movw	r3, #5000	; 0x1388
 8005e1a:	4298      	cmp	r0, r3
 8005e1c:	d9f3      	bls.n	8005e06 <HAL_RCC_OscConfig+0x222>
        {
          return HAL_TIMEOUT;
 8005e1e:	2003      	movs	r0, #3
 8005e20:	e0a0      	b.n	8005f64 <HAL_RCC_OscConfig+0x380>
    FlagStatus       pwrclkchanged = RESET;
 8005e22:	2500      	movs	r5, #0
 8005e24:	e7d6      	b.n	8005dd4 <HAL_RCC_OscConfig+0x1f0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e26:	4a1d      	ldr	r2, [pc, #116]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
 8005e28:	6813      	ldr	r3, [r2, #0]
 8005e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e2e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8005e30:	f7fc fdee 	bl	8002a10 <HAL_GetTick>
 8005e34:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e36:	4b19      	ldr	r3, [pc, #100]	; (8005e9c <HAL_RCC_OscConfig+0x2b8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005e3e:	d1ce      	bne.n	8005dde <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e40:	f7fc fde6 	bl	8002a10 <HAL_GetTick>
 8005e44:	1b80      	subs	r0, r0, r6
 8005e46:	2802      	cmp	r0, #2
 8005e48:	d9f5      	bls.n	8005e36 <HAL_RCC_OscConfig+0x252>
          return HAL_TIMEOUT;
 8005e4a:	2003      	movs	r0, #3
 8005e4c:	e08a      	b.n	8005f64 <HAL_RCC_OscConfig+0x380>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e4e:	4a10      	ldr	r2, [pc, #64]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005e50:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005e52:	f043 0301 	orr.w	r3, r3, #1
 8005e56:	6713      	str	r3, [r2, #112]	; 0x70
 8005e58:	e7cf      	b.n	8005dfa <HAL_RCC_OscConfig+0x216>
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005e5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e5e:	f042 0204 	orr.w	r2, r2, #4
 8005e62:	671a      	str	r2, [r3, #112]	; 0x70
 8005e64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	671a      	str	r2, [r3, #112]	; 0x70
 8005e6c:	e7c5      	b.n	8005dfa <HAL_RCC_OscConfig+0x216>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6e:	f7fc fdcf 	bl	8002a10 <HAL_GetTick>
 8005e72:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e74:	4b06      	ldr	r3, [pc, #24]	; (8005e90 <HAL_RCC_OscConfig+0x2ac>)
 8005e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e78:	f013 0f02 	tst.w	r3, #2
 8005e7c:	d010      	beq.n	8005ea0 <HAL_RCC_OscConfig+0x2bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e7e:	f7fc fdc7 	bl	8002a10 <HAL_GetTick>
 8005e82:	1b80      	subs	r0, r0, r6
 8005e84:	f241 3388 	movw	r3, #5000	; 0x1388
 8005e88:	4298      	cmp	r0, r3
 8005e8a:	d9f3      	bls.n	8005e74 <HAL_RCC_OscConfig+0x290>
        {
          return HAL_TIMEOUT;
 8005e8c:	2003      	movs	r0, #3
 8005e8e:	e069      	b.n	8005f64 <HAL_RCC_OscConfig+0x380>
 8005e90:	40023800 	.word	0x40023800
 8005e94:	42470000 	.word	0x42470000
 8005e98:	42470e80 	.word	0x42470e80
 8005e9c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ea0:	b9e5      	cbnz	r5, 8005edc <HAL_RCC_OscConfig+0x2f8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ea2:	69a3      	ldr	r3, [r4, #24]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d05c      	beq.n	8005f62 <HAL_RCC_OscConfig+0x37e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ea8:	4a30      	ldr	r2, [pc, #192]	; (8005f6c <HAL_RCC_OscConfig+0x388>)
 8005eaa:	6892      	ldr	r2, [r2, #8]
 8005eac:	f002 020c 	and.w	r2, r2, #12
 8005eb0:	2a08      	cmp	r2, #8
 8005eb2:	d059      	beq.n	8005f68 <HAL_RCC_OscConfig+0x384>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d017      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x304>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb8:	4b2d      	ldr	r3, [pc, #180]	; (8005f70 <HAL_RCC_OscConfig+0x38c>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebe:	f7fc fda7 	bl	8002a10 <HAL_GetTick>
 8005ec2:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ec4:	4b29      	ldr	r3, [pc, #164]	; (8005f6c <HAL_RCC_OscConfig+0x388>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005ecc:	d045      	beq.n	8005f5a <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ece:	f7fc fd9f 	bl	8002a10 <HAL_GetTick>
 8005ed2:	1b00      	subs	r0, r0, r4
 8005ed4:	2802      	cmp	r0, #2
 8005ed6:	d9f5      	bls.n	8005ec4 <HAL_RCC_OscConfig+0x2e0>
          {
            return HAL_TIMEOUT;
 8005ed8:	2003      	movs	r0, #3
 8005eda:	e043      	b.n	8005f64 <HAL_RCC_OscConfig+0x380>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005edc:	4a23      	ldr	r2, [pc, #140]	; (8005f6c <HAL_RCC_OscConfig+0x388>)
 8005ede:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ee6:	e7dc      	b.n	8005ea2 <HAL_RCC_OscConfig+0x2be>
        __HAL_RCC_PLL_DISABLE();
 8005ee8:	4b21      	ldr	r3, [pc, #132]	; (8005f70 <HAL_RCC_OscConfig+0x38c>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005eee:	f7fc fd8f 	bl	8002a10 <HAL_GetTick>
 8005ef2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ef4:	4b1d      	ldr	r3, [pc, #116]	; (8005f6c <HAL_RCC_OscConfig+0x388>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005efc:	d006      	beq.n	8005f0c <HAL_RCC_OscConfig+0x328>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005efe:	f7fc fd87 	bl	8002a10 <HAL_GetTick>
 8005f02:	1b40      	subs	r0, r0, r5
 8005f04:	2802      	cmp	r0, #2
 8005f06:	d9f5      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x310>
            return HAL_TIMEOUT;
 8005f08:	2003      	movs	r0, #3
 8005f0a:	e02b      	b.n	8005f64 <HAL_RCC_OscConfig+0x380>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f0c:	69e3      	ldr	r3, [r4, #28]
 8005f0e:	6a22      	ldr	r2, [r4, #32]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f14:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005f18:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005f1a:	0852      	lsrs	r2, r2, #1
 8005f1c:	3a01      	subs	r2, #1
 8005f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005f24:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005f28:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005f2a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8005f2e:	4a0f      	ldr	r2, [pc, #60]	; (8005f6c <HAL_RCC_OscConfig+0x388>)
 8005f30:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8005f32:	4b0f      	ldr	r3, [pc, #60]	; (8005f70 <HAL_RCC_OscConfig+0x38c>)
 8005f34:	2201      	movs	r2, #1
 8005f36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005f38:	f7fc fd6a 	bl	8002a10 <HAL_GetTick>
 8005f3c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f3e:	4b0b      	ldr	r3, [pc, #44]	; (8005f6c <HAL_RCC_OscConfig+0x388>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005f46:	d106      	bne.n	8005f56 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f48:	f7fc fd62 	bl	8002a10 <HAL_GetTick>
 8005f4c:	1b00      	subs	r0, r0, r4
 8005f4e:	2802      	cmp	r0, #2
 8005f50:	d9f5      	bls.n	8005f3e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8005f52:	2003      	movs	r0, #3
 8005f54:	e006      	b.n	8005f64 <HAL_RCC_OscConfig+0x380>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8005f56:	2000      	movs	r0, #0
 8005f58:	e004      	b.n	8005f64 <HAL_RCC_OscConfig+0x380>
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	e002      	b.n	8005f64 <HAL_RCC_OscConfig+0x380>
        return HAL_ERROR;
 8005f5e:	2001      	movs	r0, #1
 8005f60:	e000      	b.n	8005f64 <HAL_RCC_OscConfig+0x380>
  return HAL_OK;
 8005f62:	2000      	movs	r0, #0
}
 8005f64:	b002      	add	sp, #8
 8005f66:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005f68:	2001      	movs	r0, #1
 8005f6a:	e7fb      	b.n	8005f64 <HAL_RCC_OscConfig+0x380>
 8005f6c:	40023800 	.word	0x40023800
 8005f70:	42470060 	.word	0x42470060

08005f74 <SAI_Disable>:
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7U/1000U);
 8005f74:	4b0e      	ldr	r3, [pc, #56]	; (8005fb0 <SAI_Disable+0x3c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a0e      	ldr	r2, [pc, #56]	; (8005fb4 <SAI_Disable+0x40>)
 8005f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7e:	0b1b      	lsrs	r3, r3, #12
 8005f80:	009b      	lsls	r3, r3, #2
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005f82:	6801      	ldr	r1, [r0, #0]
 8005f84:	680a      	ldr	r2, [r1, #0]
 8005f86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005f8a:	600a      	str	r2, [r1, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8005f8c:	1e5a      	subs	r2, r3, #1
 8005f8e:	b13b      	cbz	r3, 8005fa0 <SAI_Disable+0x2c>
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
      status = HAL_TIMEOUT;
      break;
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005f90:	6803      	ldr	r3, [r0, #0]
 8005f92:	6819      	ldr	r1, [r3, #0]
    if (count-- == 0U)
 8005f94:	4613      	mov	r3, r2
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005f96:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8005f9a:	d1f7      	bne.n	8005f8c <SAI_Disable+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8005f9c:	2000      	movs	r0, #0

  return status;
}
 8005f9e:	4770      	bx	lr
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005fa0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8005fa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fa8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
      status = HAL_TIMEOUT;
 8005fac:	2003      	movs	r0, #3
      break;
 8005fae:	4770      	bx	lr
 8005fb0:	2000001c 	.word	0x2000001c
 8005fb4:	95cbec1b 	.word	0x95cbec1b

08005fb8 <HAL_SAI_Init>:
  if(hsai == NULL)
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	f000 80ad 	beq.w	8006118 <HAL_SAI_Init+0x160>
{
 8005fbe:	b570      	push	{r4, r5, r6, lr}
 8005fc0:	4604      	mov	r4, r0
  if(hsai->State == HAL_SAI_STATE_RESET)
 8005fc2:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8005fc6:	b19b      	cbz	r3, 8005ff0 <HAL_SAI_Init+0x38>
  hsai->State = HAL_SAI_STATE_BUSY;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  SAI_Disable(hsai);
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f7ff ffd0 	bl	8005f74 <SAI_Disable>
  SAI_BlockSynchroConfig(hsai);
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f000 f8a7 	bl	8006128 <SAI_BlockSynchroConfig>
  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005fda:	6a23      	ldr	r3, [r4, #32]
 8005fdc:	b96b      	cbnz	r3, 8005ffa <HAL_SAI_Init+0x42>
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005fde:	6863      	ldr	r3, [r4, #4]
 8005fe0:	b31b      	cbz	r3, 800602a <HAL_SAI_Init+0x72>
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d021      	beq.n	800602a <HAL_SAI_Init+0x72>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR: 0U;
 8005fe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d02e      	beq.n	800604a <HAL_SAI_Init+0x92>
 8005fec:	2600      	movs	r6, #0
 8005fee:	e021      	b.n	8006034 <HAL_SAI_Init+0x7c>
    hsai->Lock = HAL_UNLOCKED;
 8005ff0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_SAI_MspInit(hsai);
 8005ff4:	f7fc f8cc 	bl	8002190 <HAL_SAI_MspInit>
 8005ff8:	e7e6      	b.n	8005fc8 <HAL_SAI_Init+0x10>
    freq = SAI_GetInputClock(hsai);
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	f000 f8a4 	bl	8006148 <SAI_GetInputClock>
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8006000:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006004:	0041      	lsls	r1, r0, #1
 8006006:	6a23      	ldr	r3, [r4, #32]
 8006008:	025b      	lsls	r3, r3, #9
 800600a:	fbb1 f1f3 	udiv	r1, r1, r3
    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 800600e:	4b43      	ldr	r3, [pc, #268]	; (800611c <HAL_SAI_Init+0x164>)
 8006010:	fba3 2301 	umull	r2, r3, r3, r1
 8006014:	08db      	lsrs	r3, r3, #3
 8006016:	6263      	str	r3, [r4, #36]	; 0x24
    if((tmpregisterGCR % 10U) > 8U)
 8006018:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800601c:	0042      	lsls	r2, r0, #1
 800601e:	1a8a      	subs	r2, r1, r2
 8006020:	2a08      	cmp	r2, #8
 8006022:	d9dc      	bls.n	8005fde <HAL_SAI_Init+0x26>
      hsai->Init.Mckdiv+= 1U;
 8006024:	3301      	adds	r3, #1
 8006026:	6263      	str	r3, [r4, #36]	; 0x24
 8006028:	e7d9      	b.n	8005fde <HAL_SAI_Init+0x26>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U: SAI_xCR1_CKSTR;
 800602a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800602c:	2b01      	cmp	r3, #1
 800602e:	d00a      	beq.n	8006046 <HAL_SAI_Init+0x8e>
 8006030:	f44f 7600 	mov.w	r6, #512	; 0x200
  switch(hsai->Init.Synchro)
 8006034:	68a2      	ldr	r2, [r4, #8]
 8006036:	2a01      	cmp	r2, #1
 8006038:	d06b      	beq.n	8006112 <HAL_SAI_Init+0x15a>
 800603a:	b14a      	cbz	r2, 8006050 <HAL_SAI_Init+0x98>
 800603c:	2a03      	cmp	r2, #3
 800603e:	d807      	bhi.n	8006050 <HAL_SAI_Init+0x98>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8006040:	f44f 6000 	mov.w	r0, #2048	; 0x800
    break;
 8006044:	e005      	b.n	8006052 <HAL_SAI_Init+0x9a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U: SAI_xCR1_CKSTR;
 8006046:	2600      	movs	r6, #0
 8006048:	e7f4      	b.n	8006034 <HAL_SAI_Init+0x7c>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR: 0U;
 800604a:	f44f 7600 	mov.w	r6, #512	; 0x200
 800604e:	e7f1      	b.n	8006034 <HAL_SAI_Init+0x7c>
  uint32_t syncen_bits = 0U;
 8006050:	2000      	movs	r0, #0
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8006052:	6821      	ldr	r1, [r4, #0]
 8006054:	680b      	ldr	r3, [r1, #0]
 8006056:	4a32      	ldr	r2, [pc, #200]	; (8006120 <HAL_SAI_Init+0x168>)
 8006058:	401a      	ands	r2, r3
 800605a:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800605c:	6821      	ldr	r1, [r4, #0]
 800605e:	680a      	ldr	r2, [r1, #0]
 8006060:	6863      	ldr	r3, [r4, #4]
 8006062:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006064:	432b      	orrs	r3, r5
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8006066:	6ba5      	ldr	r5, [r4, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006068:	432b      	orrs	r3, r5
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800606a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800606c:	432b      	orrs	r3, r5
 800606e:	4333      	orrs	r3, r6
                          ckstr_bits | syncen_bits |                             \
 8006070:	4303      	orrs	r3, r0
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006072:	6aa0      	ldr	r0, [r4, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8006074:	4303      	orrs	r3, r0
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8006076:	6920      	ldr	r0, [r4, #16]
 8006078:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800607a:	6960      	ldr	r0, [r4, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800607c:	4303      	orrs	r3, r0
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800607e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006080:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8006084:	4313      	orrs	r3, r2
 8006086:	600b      	str	r3, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8006088:	6822      	ldr	r2, [r4, #0]
 800608a:	6853      	ldr	r3, [r2, #4]
 800608c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006090:	f023 030f 	bic.w	r3, r3, #15
 8006094:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8006096:	6821      	ldr	r1, [r4, #0]
 8006098:	684a      	ldr	r2, [r1, #4]
 800609a:	69a3      	ldr	r3, [r4, #24]
 800609c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800609e:	4303      	orrs	r3, r0
 80060a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80060a2:	4303      	orrs	r3, r0
 80060a4:	4313      	orrs	r3, r2
 80060a6:	604b      	str	r3, [r1, #4]
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80060a8:	6822      	ldr	r2, [r4, #0]
 80060aa:	6891      	ldr	r1, [r2, #8]
 80060ac:	4b1d      	ldr	r3, [pc, #116]	; (8006124 <HAL_SAI_Init+0x16c>)
 80060ae:	400b      	ands	r3, r1
 80060b0:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 80060b2:	6820      	ldr	r0, [r4, #0]
 80060b4:	6882      	ldr	r2, [r0, #8]
 80060b6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80060b8:	3b01      	subs	r3, #1
                          hsai->FrameInit.FSOffset     |
 80060ba:	6d61      	ldr	r1, [r4, #84]	; 0x54
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 80060bc:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSDefinition |
 80060be:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
                          hsai->FrameInit.FSOffset     |
 80060c0:	430b      	orrs	r3, r1
                          hsai->FrameInit.FSPolarity   |
 80060c2:	6d21      	ldr	r1, [r4, #80]	; 0x50
                          hsai->FrameInit.FSDefinition |
 80060c4:	430b      	orrs	r3, r1
                          ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 80060c6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80060c8:	3901      	subs	r1, #1
                          hsai->FrameInit.FSPolarity   |
 80060ca:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1U) |
 80060ce:	4313      	orrs	r3, r2
 80060d0:	6083      	str	r3, [r0, #8]
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 80060d2:	6822      	ldr	r2, [r4, #0]
 80060d4:	68d3      	ldr	r3, [r2, #12]
 80060d6:	f423 637d 	bic.w	r3, r3, #4048	; 0xfd0
 80060da:	f023 030f 	bic.w	r3, r3, #15
 80060de:	041b      	lsls	r3, r3, #16
 80060e0:	0c1b      	lsrs	r3, r3, #16
 80060e2:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80060e4:	6820      	ldr	r0, [r4, #0]
 80060e6:	68c2      	ldr	r2, [r0, #12]
 80060e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80060ea:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80060ec:	430b      	orrs	r3, r1
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80060ee:	6e61      	ldr	r1, [r4, #100]	; 0x64
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80060f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80060f4:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80060f6:	3901      	subs	r1, #1
 80060f8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60c3      	str	r3, [r0, #12]
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8006100:	2000      	movs	r0, #0
 8006102:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hsai->State= HAL_SAI_STATE_READY;
 8006106:	2301      	movs	r3, #1
 8006108:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UNLOCK(hsai);
 800610c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 8006110:	bd70      	pop	{r4, r5, r6, pc}
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8006112:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006116:	e79c      	b.n	8006052 <HAL_SAI_Init+0x9a>
    return HAL_ERROR;
 8006118:	2001      	movs	r0, #1
}
 800611a:	4770      	bx	lr
 800611c:	cccccccd 	.word	0xcccccccd
 8006120:	ff05c010 	.word	0xff05c010
 8006124:	fff88000 	.word	0xfff88000

08006128 <SAI_BlockSynchroConfig>:
  }
#endif /* STM32F446xx */
#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || \
    defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 8006128:	68c3      	ldr	r3, [r0, #12]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d007      	beq.n	800613e <SAI_BlockSynchroConfig+0x16>
 800612e:	2b02      	cmp	r3, #2
 8006130:	d003      	beq.n	800613a <SAI_BlockSynchroConfig+0x12>
  {
  case SAI_SYNCEXT_DISABLE :
    tmpregisterGCR = 0U;
 8006132:	2200      	movs	r2, #0
    break;
  default:
    tmpregisterGCR = 0U;
    break;
  }
  SAI1->GCR = tmpregisterGCR;
 8006134:	4b03      	ldr	r3, [pc, #12]	; (8006144 <SAI_BlockSynchroConfig+0x1c>)
 8006136:	601a      	str	r2, [r3, #0]
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */ 
}
 8006138:	4770      	bx	lr
    tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800613a:	2220      	movs	r2, #32
    break;
 800613c:	e7fa      	b.n	8006134 <SAI_BlockSynchroConfig+0xc>
    tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800613e:	2210      	movs	r2, #16
 8006140:	e7f8      	b.n	8006134 <SAI_BlockSynchroConfig+0xc>
 8006142:	bf00      	nop
 8006144:	40015800 	.word	0x40015800

08006148 <SAI_GetInputClock>:
  
  /* Check the SAI Block parameters */
  assert_param(IS_SAI_CLK_SOURCE(hsai->Init.ClockSource));
 
  /* SAI Block clock source selection */
  if(hsai->Instance == SAI1_Block_A)
 8006148:	6802      	ldr	r2, [r0, #0]
 800614a:	4b2f      	ldr	r3, [pc, #188]	; (8006208 <SAI_GetInputClock+0xc0>)
 800614c:	429a      	cmp	r2, r3
 800614e:	d02f      	beq.n	80061b0 <SAI_GetInputClock+0x68>
  {
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
  }
  else
  {
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG((uint32_t)(hsai->Init.ClockSource << 2U));
 8006150:	4a2e      	ldr	r2, [pc, #184]	; (800620c <SAI_GetInputClock+0xc4>)
 8006152:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8006156:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800615a:	69c1      	ldr	r1, [r0, #28]
 800615c:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 8006160:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  }
  
  /* VCO Input Clock value calculation */
  if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006164:	4b29      	ldr	r3, [pc, #164]	; (800620c <SAI_GetInputClock+0xc4>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800616c:	d12a      	bne.n	80061c4 <SAI_GetInputClock+0x7c>
  {
    /* In Case the PLL Source is HSI (Internal Clock) */
    vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800616e:	4b27      	ldr	r3, [pc, #156]	; (800620c <SAI_GetInputClock+0xc4>)
 8006170:	685a      	ldr	r2, [r3, #4]
 8006172:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8006176:	4b26      	ldr	r3, [pc, #152]	; (8006210 <SAI_GetInputClock+0xc8>)
 8006178:	fbb3 f3f2 	udiv	r3, r3, r2
  {
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#else
  /* SAI_CLK_x : SAI Block Clock configuration for different clock sources selected */
  if(hsai->Init.ClockSource == SAI_CLKSOURCE_PLLSAI)
 800617c:	69c2      	ldr	r2, [r0, #28]
 800617e:	b34a      	cbz	r2, 80061d4 <SAI_GetInputClock+0x8c>
    /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
    saiclocksource = saiclocksource/(tmpreg); 

  }
  else if(hsai->Init.ClockSource == SAI_CLKSOURCE_PLLI2S)
 8006180:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8006184:	d13b      	bne.n	80061fe <SAI_GetInputClock+0xb6>
  {        
    /* Configure the PLLI2S division factor */
    /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
    /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
    tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 8006186:	4a21      	ldr	r2, [pc, #132]	; (800620c <SAI_GetInputClock+0xc4>)
 8006188:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 800618c:	f3c1 6103 	ubfx	r1, r1, #24, #4
    saiclocksource = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg);
 8006190:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8006194:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8006198:	fb03 f000 	mul.w	r0, r3, r0
 800619c:	fbb0 f0f1 	udiv	r0, r0, r1
    
    /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
    tmpreg = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U); 
 80061a0:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80061a4:	f003 031f 	and.w	r3, r3, #31
 80061a8:	3301      	adds	r3, #1
    saiclocksource = saiclocksource/(tmpreg);
 80061aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80061ae:	4770      	bx	lr
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(hsai->Init.ClockSource);
 80061b0:	4a16      	ldr	r2, [pc, #88]	; (800620c <SAI_GetInputClock+0xc4>)
 80061b2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80061b6:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80061ba:	69c1      	ldr	r1, [r0, #28]
 80061bc:	430b      	orrs	r3, r1
 80061be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80061c2:	e7cf      	b.n	8006164 <SAI_GetInputClock+0x1c>
    vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80061c4:	4b11      	ldr	r3, [pc, #68]	; (800620c <SAI_GetInputClock+0xc4>)
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80061cc:	4b11      	ldr	r3, [pc, #68]	; (8006214 <SAI_GetInputClock+0xcc>)
 80061ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80061d2:	e7d3      	b.n	800617c <SAI_GetInputClock+0x34>
    tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 80061d4:	4a0d      	ldr	r2, [pc, #52]	; (800620c <SAI_GetInputClock+0xc4>)
 80061d6:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80061da:	f3c1 6103 	ubfx	r1, r1, #24, #4
    saiclocksource = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg);
 80061de:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 80061e2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80061e6:	fb03 f000 	mul.w	r0, r3, r0
 80061ea:	fbb0 f0f1 	udiv	r0, r0, r1
    tmpreg = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 80061ee:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80061f2:	f3c3 2304 	ubfx	r3, r3, #8, #5
 80061f6:	3301      	adds	r3, #1
    saiclocksource = saiclocksource/(tmpreg); 
 80061f8:	fbb0 f0f3 	udiv	r0, r0, r3
 80061fc:	4770      	bx	lr
  }
  else /* sConfig->ClockSource == SAI_CLKSource_Ext */
  {
    /* Enable the External Clock selection */
    __HAL_RCC_I2S_CONFIG(RCC_I2SCLKSOURCE_EXT);
 80061fe:	4b06      	ldr	r3, [pc, #24]	; (8006218 <SAI_GetInputClock+0xd0>)
 8006200:	2201      	movs	r2, #1
 8006202:	601a      	str	r2, [r3, #0]
    
    saiclocksource = EXTERNAL_CLOCK_VALUE;
 8006204:	4805      	ldr	r0, [pc, #20]	; (800621c <SAI_GetInputClock+0xd4>)
  }
#endif /* STM32F413xx || STM32F423xx */  
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
       /* the return result is the value of SAI clock */
  return saiclocksource;
}
 8006206:	4770      	bx	lr
 8006208:	40015804 	.word	0x40015804
 800620c:	40023800 	.word	0x40023800
 8006210:	00f42400 	.word	0x00f42400
 8006214:	007a1200 	.word	0x007a1200
 8006218:	4247015c 	.word	0x4247015c
 800621c:	00bb8000 	.word	0x00bb8000

08006220 <SD_DMATransmitCplt>:
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006220:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800622a:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800622c:	4770      	bx	lr
	...

08006230 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006230:	b570      	push	{r4, r5, r6, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	9301      	str	r3, [sp, #4]
  uint32_t response = 0U, validvoltage = 0U;
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800623a:	6800      	ldr	r0, [r0, #0]
 800623c:	f001 fde8 	bl	8007e10 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006240:	4606      	mov	r6, r0
 8006242:	b110      	cbz	r0, 800624a <SD_PowerON+0x1a>
    hsd->SdCard.CardType = CARD_SDSC;
  }


  return HAL_SD_ERROR_NONE;
}
 8006244:	4630      	mov	r0, r6
 8006246:	b002      	add	sp, #8
 8006248:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800624a:	6820      	ldr	r0, [r4, #0]
 800624c:	f001 fdf3 	bl	8007e36 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006250:	b938      	cbnz	r0, 8006262 <SD_PowerON+0x32>
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006252:	2301      	movs	r3, #1
 8006254:	64a3      	str	r3, [r4, #72]	; 0x48
  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006256:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006258:	2b01      	cmp	r3, #1
 800625a:	d00b      	beq.n	8006274 <SD_PowerON+0x44>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800625c:	4635      	mov	r5, r6
 800625e:	4630      	mov	r0, r6
 8006260:	e014      	b.n	800628c <SD_PowerON+0x5c>
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006262:	2300      	movs	r3, #0
 8006264:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006266:	6820      	ldr	r0, [r4, #0]
 8006268:	f001 fdd2 	bl	8007e10 <SDMMC_CmdGoIdleState>
    if(errorstate != HAL_SD_ERROR_NONE)
 800626c:	2800      	cmp	r0, #0
 800626e:	d0f2      	beq.n	8006256 <SD_PowerON+0x26>
      return errorstate;
 8006270:	4606      	mov	r6, r0
 8006272:	e7e7      	b.n	8006244 <SD_PowerON+0x14>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006274:	2100      	movs	r1, #0
 8006276:	6820      	ldr	r0, [r4, #0]
 8006278:	f001 fdf4 	bl	8007e64 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800627c:	2800      	cmp	r0, #0
 800627e:	d0ed      	beq.n	800625c <SD_PowerON+0x2c>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006280:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 8006284:	e7de      	b.n	8006244 <SD_PowerON+0x14>
    count++;
 8006286:	9b01      	ldr	r3, [sp, #4]
 8006288:	3301      	adds	r3, #1
 800628a:	9301      	str	r3, [sp, #4]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800628c:	9a01      	ldr	r2, [sp, #4]
 800628e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006292:	429a      	cmp	r2, r3
 8006294:	d813      	bhi.n	80062be <SD_PowerON+0x8e>
 8006296:	b995      	cbnz	r5, 80062be <SD_PowerON+0x8e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006298:	2100      	movs	r1, #0
 800629a:	6820      	ldr	r0, [r4, #0]
 800629c:	f001 fde2 	bl	8007e64 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80062a0:	b9d8      	cbnz	r0, 80062da <SD_PowerON+0xaa>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80062a2:	4912      	ldr	r1, [pc, #72]	; (80062ec <SD_PowerON+0xbc>)
 80062a4:	6820      	ldr	r0, [r4, #0]
 80062a6:	f001 fdf5 	bl	8007e94 <SDMMC_CmdAppOperCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 80062aa:	4605      	mov	r5, r0
 80062ac:	b9b8      	cbnz	r0, 80062de <SD_PowerON+0xae>
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80062ae:	2100      	movs	r1, #0
 80062b0:	6820      	ldr	r0, [r4, #0]
 80062b2:	f001 fbef 	bl	8007a94 <SDIO_GetResponse>
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80062b6:	0fc3      	lsrs	r3, r0, #31
 80062b8:	d0e5      	beq.n	8006286 <SD_PowerON+0x56>
 80062ba:	461d      	mov	r5, r3
 80062bc:	e7e3      	b.n	8006286 <SD_PowerON+0x56>
  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80062be:	9a01      	ldr	r2, [sp, #4]
 80062c0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d80d      	bhi.n	80062e4 <SD_PowerON+0xb4>
  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80062c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80062cc:	d102      	bne.n	80062d4 <SD_PowerON+0xa4>
    hsd->SdCard.CardType = CARD_SDSC;
 80062ce:	2300      	movs	r3, #0
 80062d0:	6463      	str	r3, [r4, #68]	; 0x44
 80062d2:	e7b7      	b.n	8006244 <SD_PowerON+0x14>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80062d4:	2301      	movs	r3, #1
 80062d6:	6463      	str	r3, [r4, #68]	; 0x44
 80062d8:	e7b4      	b.n	8006244 <SD_PowerON+0x14>
      return errorstate;
 80062da:	4606      	mov	r6, r0
 80062dc:	e7b2      	b.n	8006244 <SD_PowerON+0x14>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062de:	f04f 5680 	mov.w	r6, #268435456	; 0x10000000
 80062e2:	e7af      	b.n	8006244 <SD_PowerON+0x14>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80062e4:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
 80062e8:	e7ac      	b.n	8006244 <SD_PowerON+0x14>
 80062ea:	bf00      	nop
 80062ec:	c1100000 	.word	0xc1100000

080062f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80062f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062f4:	b088      	sub	sp, #32
 80062f6:	4604      	mov	r4, r0
 80062f8:	460f      	mov	r7, r1
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80062fa:	f7fc fb89 	bl	8002a10 <HAL_GetTick>
 80062fe:	4606      	mov	r6, r0
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0U, 0U};
 8006300:	2300      	movs	r3, #0
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	9301      	str	r3, [sp, #4]
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006306:	2108      	movs	r1, #8
 8006308:	6820      	ldr	r0, [r4, #0]
 800630a:	f001 fcd7 	bl	8007cbc <SDMMC_CmdBlockLength>
  if(errorstate != HAL_SD_ERROR_NONE)
 800630e:	4605      	mov	r5, r0
 8006310:	b118      	cbz	r0, 800631a <SD_FindSCR+0x2a>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8006312:	4628      	mov	r0, r5
 8006314:	b008      	add	sp, #32
 8006316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800631a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800631c:	0409      	lsls	r1, r1, #16
 800631e:	6820      	ldr	r0, [r4, #0]
 8006320:	f001 fda0 	bl	8007e64 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006324:	4605      	mov	r5, r0
 8006326:	2800      	cmp	r0, #0
 8006328:	d1f3      	bne.n	8006312 <SD_FindSCR+0x22>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800632a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800632e:	9302      	str	r3, [sp, #8]
  config.DataLength    = 8U;
 8006330:	2308      	movs	r3, #8
 8006332:	9303      	str	r3, [sp, #12]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8006334:	2330      	movs	r3, #48	; 0x30
 8006336:	9304      	str	r3, [sp, #16]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006338:	2302      	movs	r3, #2
 800633a:	9305      	str	r3, [sp, #20]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800633c:	2300      	movs	r3, #0
 800633e:	9306      	str	r3, [sp, #24]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006340:	2301      	movs	r3, #1
 8006342:	9307      	str	r3, [sp, #28]
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006344:	a902      	add	r1, sp, #8
 8006346:	6820      	ldr	r0, [r4, #0]
 8006348:	f001 fca6 	bl	8007c98 <SDIO_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800634c:	6820      	ldr	r0, [r4, #0]
 800634e:	f001 fdd2 	bl	8007ef6 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006352:	4605      	mov	r5, r0
 8006354:	2800      	cmp	r0, #0
 8006356:	d1dc      	bne.n	8006312 <SD_FindSCR+0x22>
  uint32_t index = 0U;
 8006358:	4680      	mov	r8, r0
 800635a:	e005      	b.n	8006368 <SD_FindSCR+0x78>
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800635c:	f7fc fb58 	bl	8002a10 <HAL_GetTick>
 8006360:	1b80      	subs	r0, r0, r6
 8006362:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006366:	d043      	beq.n	80063f0 <SD_FindSCR+0x100>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8006368:	6820      	ldr	r0, [r4, #0]
 800636a:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800636c:	f240 432a 	movw	r3, #1066	; 0x42a
 8006370:	421a      	tst	r2, r3
 8006372:	d10a      	bne.n	800638a <SD_FindSCR+0x9a>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006374:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006376:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 800637a:	d0ef      	beq.n	800635c <SD_FindSCR+0x6c>
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800637c:	f001 fb66 	bl	8007a4c <SDIO_ReadFIFO>
 8006380:	f84d 0028 	str.w	r0, [sp, r8, lsl #2]
      index++;
 8006384:	f108 0801 	add.w	r8, r8, #1
 8006388:	e7e8      	b.n	800635c <SD_FindSCR+0x6c>
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800638a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800638c:	f013 0f08 	tst.w	r3, #8
 8006390:	d125      	bne.n	80063de <SD_FindSCR+0xee>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006392:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006394:	f013 0f02 	tst.w	r3, #2
 8006398:	d124      	bne.n	80063e4 <SD_FindSCR+0xf4>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800639a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800639c:	f013 0f20 	tst.w	r3, #32
 80063a0:	d123      	bne.n	80063ea <SD_FindSCR+0xfa>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80063a2:	f240 533a 	movw	r3, #1338	; 0x53a
 80063a6:	6383      	str	r3, [r0, #56]	; 0x38
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80063a8:	9a01      	ldr	r2, [sp, #4]
 80063aa:	0213      	lsls	r3, r2, #8
 80063ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80063b4:	0a11      	lsrs	r1, r2, #8
 80063b6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80063ba:	430b      	orrs	r3, r1
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80063bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80063c0:	603b      	str	r3, [r7, #0]
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80063c2:	9a00      	ldr	r2, [sp, #0]
 80063c4:	0213      	lsls	r3, r2, #8
 80063c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80063ca:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80063ce:	0a11      	lsrs	r1, r2, #8
 80063d0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80063d4:	430b      	orrs	r3, r1
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80063d6:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80063da:	607b      	str	r3, [r7, #4]
  return HAL_SD_ERROR_NONE;
 80063dc:	e799      	b.n	8006312 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80063de:	2508      	movs	r5, #8
 80063e0:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80063e2:	e796      	b.n	8006312 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80063e4:	2502      	movs	r5, #2
 80063e6:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80063e8:	e793      	b.n	8006312 <SD_FindSCR+0x22>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80063ea:	2520      	movs	r5, #32
 80063ec:	6385      	str	r5, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 80063ee:	e790      	b.n	8006312 <SD_FindSCR+0x22>
      return HAL_SD_ERROR_TIMEOUT;
 80063f0:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 80063f4:	e78d      	b.n	8006312 <SD_FindSCR+0x22>

080063f6 <SD_WideBus_Enable>:
{
 80063f6:	b510      	push	{r4, lr}
 80063f8:	b082      	sub	sp, #8
 80063fa:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 80063fc:	2100      	movs	r1, #0
 80063fe:	9100      	str	r1, [sp, #0]
 8006400:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006402:	6800      	ldr	r0, [r0, #0]
 8006404:	f001 fb46 	bl	8007a94 <SDIO_GetResponse>
 8006408:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 800640c:	d116      	bne.n	800643c <SD_WideBus_Enable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 800640e:	4669      	mov	r1, sp
 8006410:	4620      	mov	r0, r4
 8006412:	f7ff ff6d 	bl	80062f0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006416:	4603      	mov	r3, r0
 8006418:	b990      	cbnz	r0, 8006440 <SD_WideBus_Enable+0x4a>
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800641a:	9b01      	ldr	r3, [sp, #4]
 800641c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8006420:	d011      	beq.n	8006446 <SD_WideBus_Enable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006422:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006424:	0409      	lsls	r1, r1, #16
 8006426:	6820      	ldr	r0, [r4, #0]
 8006428:	f001 fd1c 	bl	8007e64 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 800642c:	4603      	mov	r3, r0
 800642e:	b938      	cbnz	r0, 8006440 <SD_WideBus_Enable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006430:	2102      	movs	r1, #2
 8006432:	6820      	ldr	r0, [r4, #0]
 8006434:	f001 fd47 	bl	8007ec6 <SDMMC_CmdBusWidth>
 8006438:	4603      	mov	r3, r0
 800643a:	e001      	b.n	8006440 <SD_WideBus_Enable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800643c:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8006440:	4618      	mov	r0, r3
 8006442:	b002      	add	sp, #8
 8006444:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006446:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800644a:	e7f9      	b.n	8006440 <SD_WideBus_Enable+0x4a>

0800644c <SD_WideBus_Disable>:
{
 800644c:	b510      	push	{r4, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	4604      	mov	r4, r0
  uint32_t scr[2U] = {0U, 0U};
 8006452:	2100      	movs	r1, #0
 8006454:	9100      	str	r1, [sp, #0]
 8006456:	9101      	str	r1, [sp, #4]
  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006458:	6800      	ldr	r0, [r0, #0]
 800645a:	f001 fb1b 	bl	8007a94 <SDIO_GetResponse>
 800645e:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8006462:	d116      	bne.n	8006492 <SD_WideBus_Disable+0x46>
  errorstate = SD_FindSCR(hsd, scr);
 8006464:	4669      	mov	r1, sp
 8006466:	4620      	mov	r0, r4
 8006468:	f7ff ff42 	bl	80062f0 <SD_FindSCR>
  if(errorstate != HAL_SD_ERROR_NONE)
 800646c:	4603      	mov	r3, r0
 800646e:	b990      	cbnz	r0, 8006496 <SD_WideBus_Disable+0x4a>
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006470:	9b01      	ldr	r3, [sp, #4]
 8006472:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8006476:	d011      	beq.n	800649c <SD_WideBus_Disable+0x50>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006478:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800647a:	0409      	lsls	r1, r1, #16
 800647c:	6820      	ldr	r0, [r4, #0]
 800647e:	f001 fcf1 	bl	8007e64 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006482:	4603      	mov	r3, r0
 8006484:	b938      	cbnz	r0, 8006496 <SD_WideBus_Disable+0x4a>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006486:	2100      	movs	r1, #0
 8006488:	6820      	ldr	r0, [r4, #0]
 800648a:	f001 fd1c 	bl	8007ec6 <SDMMC_CmdBusWidth>
 800648e:	4603      	mov	r3, r0
 8006490:	e001      	b.n	8006496 <SD_WideBus_Disable+0x4a>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006492:	f44f 6300 	mov.w	r3, #2048	; 0x800
}
 8006496:	4618      	mov	r0, r3
 8006498:	b002      	add	sp, #8
 800649a:	bd10      	pop	{r4, pc}
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800649c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80064a0:	e7f9      	b.n	8006496 <SD_WideBus_Disable+0x4a>

080064a2 <SD_SendStatus>:
{
 80064a2:	b570      	push	{r4, r5, r6, lr}
  if(pCardStatus == NULL)
 80064a4:	b181      	cbz	r1, 80064c8 <SD_SendStatus+0x26>
 80064a6:	460d      	mov	r5, r1
 80064a8:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064aa:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80064ac:	0409      	lsls	r1, r1, #16
 80064ae:	6800      	ldr	r0, [r0, #0]
 80064b0:	f001 fd7b 	bl	8007faa <SDMMC_CmdSendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 80064b4:	4606      	mov	r6, r0
 80064b6:	b108      	cbz	r0, 80064bc <SD_SendStatus+0x1a>
}
 80064b8:	4630      	mov	r0, r6
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80064bc:	2100      	movs	r1, #0
 80064be:	6820      	ldr	r0, [r4, #0]
 80064c0:	f001 fae8 	bl	8007a94 <SDIO_GetResponse>
 80064c4:	6028      	str	r0, [r5, #0]
  return HAL_SD_ERROR_NONE;
 80064c6:	e7f7      	b.n	80064b8 <SD_SendStatus+0x16>
    return HAL_SD_ERROR_PARAM;
 80064c8:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
 80064cc:	e7f4      	b.n	80064b8 <SD_SendStatus+0x16>
	...

080064d0 <HAL_SD_ReadBlocks_DMA>:
{
 80064d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d4:	b086      	sub	sp, #24
 80064d6:	4604      	mov	r4, r0
  if(NULL == pData)
 80064d8:	b1a1      	cbz	r1, 8006504 <HAL_SD_ReadBlocks_DMA+0x34>
 80064da:	4617      	mov	r7, r2
 80064dc:	461e      	mov	r6, r3
 80064de:	460a      	mov	r2, r1
  if(hsd->State == HAL_SD_STATE_READY)
 80064e0:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	f040 8085 	bne.w	80065f6 <HAL_SD_ReadBlocks_DMA+0x126>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064ec:	2300      	movs	r3, #0
 80064ee:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80064f0:	19bb      	adds	r3, r7, r6
 80064f2:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 80064f4:	428b      	cmp	r3, r1
 80064f6:	d90b      	bls.n	8006510 <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80064f8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80064fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064fe:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 8006500:	2501      	movs	r5, #1
 8006502:	e079      	b.n	80065f8 <HAL_SD_ReadBlocks_DMA+0x128>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006504:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006506:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800650a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 800650c:	2501      	movs	r5, #1
 800650e:	e073      	b.n	80065f8 <HAL_SD_ReadBlocks_DMA+0x128>
    hsd->State = HAL_SD_STATE_BUSY;
 8006510:	2303      	movs	r3, #3
 8006512:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8006516:	6803      	ldr	r3, [r0, #0]
 8006518:	2100      	movs	r1, #0
 800651a:	62d9      	str	r1, [r3, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800651c:	6800      	ldr	r0, [r0, #0]
 800651e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006520:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 8006524:	63c3      	str	r3, [r0, #60]	; 0x3c
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006526:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006528:	4835      	ldr	r0, [pc, #212]	; (8006600 <HAL_SD_ReadBlocks_DMA+0x130>)
 800652a:	63d8      	str	r0, [r3, #60]	; 0x3c
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800652c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800652e:	4835      	ldr	r0, [pc, #212]	; (8006604 <HAL_SD_ReadBlocks_DMA+0x134>)
 8006530:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->hdmarx->XferAbortCallback = NULL;
 8006532:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006534:	6519      	str	r1, [r3, #80]	; 0x50
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006536:	6821      	ldr	r1, [r4, #0]
 8006538:	ea4f 2846 	mov.w	r8, r6, lsl #9
 800653c:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8006540:	3180      	adds	r1, #128	; 0x80
 8006542:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006544:	f7fc fbd6 	bl	8002cf4 <HAL_DMA_Start_IT>
 8006548:	4605      	mov	r5, r0
 800654a:	b9b8      	cbnz	r0, 800657c <HAL_SD_ReadBlocks_DMA+0xac>
      __HAL_SD_DMA_ENABLE(hsd);
 800654c:	4b2e      	ldr	r3, [pc, #184]	; (8006608 <HAL_SD_ReadBlocks_DMA+0x138>)
 800654e:	2201      	movs	r2, #1
 8006550:	601a      	str	r2, [r3, #0]
      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006552:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006554:	4293      	cmp	r3, r2
 8006556:	d000      	beq.n	800655a <HAL_SD_ReadBlocks_DMA+0x8a>
        add *= 512U;
 8006558:	027f      	lsls	r7, r7, #9
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800655a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800655e:	6820      	ldr	r0, [r4, #0]
 8006560:	f001 fbac 	bl	8007cbc <SDMMC_CmdBlockLength>
      if(errorstate != HAL_SD_ERROR_NONE)
 8006564:	4603      	mov	r3, r0
 8006566:	b1c8      	cbz	r0, 800659c <HAL_SD_ReadBlocks_DMA+0xcc>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006568:	6822      	ldr	r2, [r4, #0]
 800656a:	4928      	ldr	r1, [pc, #160]	; (800660c <HAL_SD_ReadBlocks_DMA+0x13c>)
 800656c:	6391      	str	r1, [r2, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800656e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006570:	4318      	orrs	r0, r3
 8006572:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006574:	2501      	movs	r5, #1
 8006576:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        return HAL_ERROR;
 800657a:	e03d      	b.n	80065f8 <HAL_SD_ReadBlocks_DMA+0x128>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800657c:	6822      	ldr	r2, [r4, #0]
 800657e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006580:	f423 7395 	bic.w	r3, r3, #298	; 0x12a
 8006584:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	4a20      	ldr	r2, [pc, #128]	; (800660c <HAL_SD_ReadBlocks_DMA+0x13c>)
 800658a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800658c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800658e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006592:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006594:	2501      	movs	r5, #1
 8006596:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      return HAL_ERROR;
 800659a:	e02d      	b.n	80065f8 <HAL_SD_ReadBlocks_DMA+0x128>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800659c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80065a0:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80065a2:	f8cd 8004 	str.w	r8, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80065a6:	2390      	movs	r3, #144	; 0x90
 80065a8:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80065aa:	2302      	movs	r3, #2
 80065ac:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80065b2:	2301      	movs	r3, #1
 80065b4:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80065b6:	4669      	mov	r1, sp
 80065b8:	6820      	ldr	r0, [r4, #0]
 80065ba:	f001 fb6d 	bl	8007c98 <SDIO_ConfigData>
      if(NumberOfBlocks > 1U)
 80065be:	2e01      	cmp	r6, #1
 80065c0:	d912      	bls.n	80065e8 <HAL_SD_ReadBlocks_DMA+0x118>
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80065c2:	2382      	movs	r3, #130	; 0x82
 80065c4:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80065c6:	4639      	mov	r1, r7
 80065c8:	6820      	ldr	r0, [r4, #0]
 80065ca:	f001 fba7 	bl	8007d1c <SDMMC_CmdReadMultiBlock>
      if(errorstate != HAL_SD_ERROR_NONE)
 80065ce:	b198      	cbz	r0, 80065f8 <HAL_SD_ReadBlocks_DMA+0x128>
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80065d0:	6823      	ldr	r3, [r4, #0]
 80065d2:	4a0e      	ldr	r2, [pc, #56]	; (800660c <HAL_SD_ReadBlocks_DMA+0x13c>)
 80065d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80065d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80065d8:	4318      	orrs	r0, r3
 80065da:	63a0      	str	r0, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80065dc:	2501      	movs	r5, #1
 80065de:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80065e2:	2300      	movs	r3, #0
 80065e4:	6323      	str	r3, [r4, #48]	; 0x30
        return HAL_ERROR;
 80065e6:	e007      	b.n	80065f8 <HAL_SD_ReadBlocks_DMA+0x128>
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80065e8:	2381      	movs	r3, #129	; 0x81
 80065ea:	6323      	str	r3, [r4, #48]	; 0x30
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80065ec:	4639      	mov	r1, r7
 80065ee:	6820      	ldr	r0, [r4, #0]
 80065f0:	f001 fb7c 	bl	8007cec <SDMMC_CmdReadSingleBlock>
 80065f4:	e7eb      	b.n	80065ce <HAL_SD_ReadBlocks_DMA+0xfe>
    return HAL_BUSY;
 80065f6:	2502      	movs	r5, #2
}
 80065f8:	4628      	mov	r0, r5
 80065fa:	b006      	add	sp, #24
 80065fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006600:	08006753 	.word	0x08006753
 8006604:	08006c05 	.word	0x08006c05
 8006608:	4225858c 	.word	0x4225858c
 800660c:	004005ff 	.word	0x004005ff

08006610 <HAL_SD_WriteBlocks_DMA>:
{
 8006610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006612:	b087      	sub	sp, #28
 8006614:	4604      	mov	r4, r0
  if(NULL == pData)
 8006616:	2900      	cmp	r1, #0
 8006618:	d041      	beq.n	800669e <HAL_SD_WriteBlocks_DMA+0x8e>
 800661a:	4615      	mov	r5, r2
 800661c:	461e      	mov	r6, r3
 800661e:	460f      	mov	r7, r1
  if(hsd->State == HAL_SD_STATE_READY)
 8006620:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b01      	cmp	r3, #1
 8006628:	f040 8085 	bne.w	8006736 <HAL_SD_WriteBlocks_DMA+0x126>
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800662c:	2300      	movs	r3, #0
 800662e:	6383      	str	r3, [r0, #56]	; 0x38
    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006630:	1993      	adds	r3, r2, r6
 8006632:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8006634:	4293      	cmp	r3, r2
 8006636:	d838      	bhi.n	80066aa <HAL_SD_WriteBlocks_DMA+0x9a>
    hsd->State = HAL_SD_STATE_BUSY;
 8006638:	2303      	movs	r3, #3
 800663a:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 800663e:	6803      	ldr	r3, [r0, #0]
 8006640:	2200      	movs	r2, #0
 8006642:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8006644:	6801      	ldr	r1, [r0, #0]
 8006646:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8006648:	f043 031a 	orr.w	r3, r3, #26
 800664c:	63cb      	str	r3, [r1, #60]	; 0x3c
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800664e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006650:	493b      	ldr	r1, [pc, #236]	; (8006740 <HAL_SD_WriteBlocks_DMA+0x130>)
 8006652:	63d9      	str	r1, [r3, #60]	; 0x3c
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006654:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006656:	493b      	ldr	r1, [pc, #236]	; (8006744 <HAL_SD_WriteBlocks_DMA+0x134>)
 8006658:	64d9      	str	r1, [r3, #76]	; 0x4c
    hsd->hdmatx->XferAbortCallback = NULL;
 800665a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800665c:	651a      	str	r2, [r3, #80]	; 0x50
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800665e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006660:	2b01      	cmp	r3, #1
 8006662:	d000      	beq.n	8006666 <HAL_SD_WriteBlocks_DMA+0x56>
      add *= 512U;
 8006664:	026d      	lsls	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006666:	f44f 7100 	mov.w	r1, #512	; 0x200
 800666a:	6820      	ldr	r0, [r4, #0]
 800666c:	f001 fb26 	bl	8007cbc <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006670:	4603      	mov	r3, r0
 8006672:	bb00      	cbnz	r0, 80066b6 <HAL_SD_WriteBlocks_DMA+0xa6>
    if(NumberOfBlocks > 1U)
 8006674:	2e01      	cmp	r6, #1
 8006676:	d928      	bls.n	80066ca <HAL_SD_WriteBlocks_DMA+0xba>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006678:	23a0      	movs	r3, #160	; 0xa0
 800667a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800667c:	4629      	mov	r1, r5
 800667e:	6820      	ldr	r0, [r4, #0]
 8006680:	f001 fb7c 	bl	8007d7c <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006684:	b340      	cbz	r0, 80066d8 <HAL_SD_WriteBlocks_DMA+0xc8>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	4a2f      	ldr	r2, [pc, #188]	; (8006748 <HAL_SD_WriteBlocks_DMA+0x138>)
 800668a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800668c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800668e:	4318      	orrs	r0, r3
 8006690:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006692:	2501      	movs	r5, #1
 8006694:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006698:	2300      	movs	r3, #0
 800669a:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 800669c:	e04c      	b.n	8006738 <HAL_SD_WriteBlocks_DMA+0x128>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800669e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80066a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80066a4:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80066a6:	2501      	movs	r5, #1
 80066a8:	e046      	b.n	8006738 <HAL_SD_WriteBlocks_DMA+0x128>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80066aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80066ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80066b0:	6383      	str	r3, [r0, #56]	; 0x38
      return HAL_ERROR;
 80066b2:	2501      	movs	r5, #1
 80066b4:	e040      	b.n	8006738 <HAL_SD_WriteBlocks_DMA+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066b6:	6822      	ldr	r2, [r4, #0]
 80066b8:	4923      	ldr	r1, [pc, #140]	; (8006748 <HAL_SD_WriteBlocks_DMA+0x138>)
 80066ba:	6391      	str	r1, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80066bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80066be:	4318      	orrs	r0, r3
 80066c0:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80066c2:	2501      	movs	r5, #1
 80066c4:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      return HAL_ERROR;
 80066c8:	e036      	b.n	8006738 <HAL_SD_WriteBlocks_DMA+0x128>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80066ca:	2390      	movs	r3, #144	; 0x90
 80066cc:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80066ce:	4629      	mov	r1, r5
 80066d0:	6820      	ldr	r0, [r4, #0]
 80066d2:	f001 fb3b 	bl	8007d4c <SDMMC_CmdWriteSingleBlock>
 80066d6:	e7d5      	b.n	8006684 <HAL_SD_WriteBlocks_DMA+0x74>
    __HAL_SD_DMA_ENABLE(hsd);
 80066d8:	4b1c      	ldr	r3, [pc, #112]	; (800674c <HAL_SD_WriteBlocks_DMA+0x13c>)
 80066da:	2201      	movs	r2, #1
 80066dc:	601a      	str	r2, [r3, #0]
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80066de:	6822      	ldr	r2, [r4, #0]
 80066e0:	0276      	lsls	r6, r6, #9
 80066e2:	08b3      	lsrs	r3, r6, #2
 80066e4:	3280      	adds	r2, #128	; 0x80
 80066e6:	4639      	mov	r1, r7
 80066e8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80066ea:	f7fc fb03 	bl	8002cf4 <HAL_DMA_Start_IT>
 80066ee:	4605      	mov	r5, r0
 80066f0:	b188      	cbz	r0, 8006716 <HAL_SD_WriteBlocks_DMA+0x106>
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80066f6:	f023 031a 	bic.w	r3, r3, #26
 80066fa:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80066fc:	6823      	ldr	r3, [r4, #0]
 80066fe:	4a12      	ldr	r2, [pc, #72]	; (8006748 <HAL_SD_WriteBlocks_DMA+0x138>)
 8006700:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006702:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006704:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006708:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800670a:	2501      	movs	r5, #1
 800670c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006710:	2300      	movs	r3, #0
 8006712:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8006714:	e010      	b.n	8006738 <HAL_SD_WriteBlocks_DMA+0x128>
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800671a:	9300      	str	r3, [sp, #0]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800671c:	9601      	str	r6, [sp, #4]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800671e:	2390      	movs	r3, #144	; 0x90
 8006720:	9302      	str	r3, [sp, #8]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006722:	2300      	movs	r3, #0
 8006724:	9303      	str	r3, [sp, #12]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006726:	9304      	str	r3, [sp, #16]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006728:	2301      	movs	r3, #1
 800672a:	9305      	str	r3, [sp, #20]
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800672c:	4669      	mov	r1, sp
 800672e:	6820      	ldr	r0, [r4, #0]
 8006730:	f001 fab2 	bl	8007c98 <SDIO_ConfigData>
      return HAL_OK;
 8006734:	e000      	b.n	8006738 <HAL_SD_WriteBlocks_DMA+0x128>
    return HAL_BUSY;
 8006736:	2502      	movs	r5, #2
}
 8006738:	4628      	mov	r0, r5
 800673a:	b007      	add	sp, #28
 800673c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800673e:	bf00      	nop
 8006740:	08006221 	.word	0x08006221
 8006744:	08006c05 	.word	0x08006c05
 8006748:	004005ff 	.word	0x004005ff
 800674c:	4225858c 	.word	0x4225858c

08006750 <HAL_SD_ErrorCallback>:
}
 8006750:	4770      	bx	lr

08006752 <SD_DMAReceiveCplt>:
{
 8006752:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006754:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006756:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006758:	2b82      	cmp	r3, #130	; 0x82
 800675a:	d011      	beq.n	8006780 <SD_DMAReceiveCplt+0x2e>
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800675c:	6822      	ldr	r2, [r4, #0]
 800675e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006760:	f023 0308 	bic.w	r3, r3, #8
 8006764:	62d3      	str	r3, [r2, #44]	; 0x2c
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	f240 523a 	movw	r2, #1338	; 0x53a
 800676c:	639a      	str	r2, [r3, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 800676e:	2301      	movs	r3, #1
 8006770:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006774:	2300      	movs	r3, #0
 8006776:	6323      	str	r3, [r4, #48]	; 0x30
  HAL_SD_RxCpltCallback(hsd);
 8006778:	4620      	mov	r0, r4
 800677a:	f001 fc67 	bl	800804c <HAL_SD_RxCpltCallback>
}
 800677e:	bd10      	pop	{r4, pc}
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006780:	6820      	ldr	r0, [r4, #0]
 8006782:	f001 fb13 	bl	8007dac <SDMMC_CmdStopTransfer>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006786:	4603      	mov	r3, r0
 8006788:	2800      	cmp	r0, #0
 800678a:	d0e7      	beq.n	800675c <SD_DMAReceiveCplt+0xa>
      hsd->ErrorCode |= errorstate;
 800678c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800678e:	4318      	orrs	r0, r3
 8006790:	63a0      	str	r0, [r4, #56]	; 0x38
      HAL_SD_ErrorCallback(hsd);
 8006792:	4620      	mov	r0, r4
 8006794:	f7ff ffdc 	bl	8006750 <HAL_SD_ErrorCallback>
 8006798:	e7e0      	b.n	800675c <SD_DMAReceiveCplt+0xa>
	...

0800679c <HAL_SD_GetCardCSD>:
{
 800679c:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800679e:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80067a0:	0f9b      	lsrs	r3, r3, #30
 80067a2:	700b      	strb	r3, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80067a4:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80067a6:	f3c3 6383 	ubfx	r3, r3, #26, #4
 80067aa:	704b      	strb	r3, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80067ac:	f890 3067 	ldrb.w	r3, [r0, #103]	; 0x67
 80067b0:	f003 0303 	and.w	r3, r3, #3
 80067b4:	708b      	strb	r3, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80067b6:	f890 3066 	ldrb.w	r3, [r0, #102]	; 0x66
 80067ba:	70cb      	strb	r3, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80067bc:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
 80067c0:	710b      	strb	r3, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80067c2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80067c6:	714b      	strb	r3, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80067c8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80067ca:	0d1b      	lsrs	r3, r3, #20
 80067cc:	80cb      	strh	r3, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80067ce:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
 80067d2:	f003 030f 	and.w	r3, r3, #15
 80067d6:	720b      	strb	r3, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80067d8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80067da:	f3c3 33c0 	ubfx	r3, r3, #15, #1
 80067de:	724b      	strb	r3, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80067e0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80067e2:	f3c3 3380 	ubfx	r3, r3, #14, #1
 80067e6:	728b      	strb	r3, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80067e8:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80067ea:	f3c3 3340 	ubfx	r3, r3, #13, #1
 80067ee:	72cb      	strb	r3, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80067f0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 80067f2:	f3c3 3300 	ubfx	r3, r3, #12, #1
 80067f6:	730b      	strb	r3, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80067f8:	2300      	movs	r3, #0
 80067fa:	734b      	strb	r3, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80067fc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80067fe:	2b00      	cmp	r3, #0
 8006800:	f040 8088 	bne.w	8006914 <HAL_SD_GetCardCSD+0x178>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006804:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8006806:	f640 73fc 	movw	r3, #4092	; 0xffc
 800680a:	ea03 0382 	and.w	r3, r3, r2, lsl #2
 800680e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 8006810:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8006814:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006816:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006818:	f3c3 63c2 	ubfx	r3, r3, #27, #3
 800681c:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800681e:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006828:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800682a:	f3c3 5342 	ubfx	r3, r3, #21, #3
 800682e:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006830:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006832:	f3c3 4382 	ubfx	r3, r3, #18, #3
 8006836:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006838:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800683a:	f3c3 33c2 	ubfx	r3, r3, #15, #3
 800683e:	760b      	strb	r3, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006840:	690b      	ldr	r3, [r1, #16]
 8006842:	3301      	adds	r3, #1
 8006844:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006846:	7e0a      	ldrb	r2, [r1, #24]
 8006848:	f002 0207 	and.w	r2, r2, #7
 800684c:	3202      	adds	r2, #2
 800684e:	fa03 f202 	lsl.w	r2, r3, r2
 8006852:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006854:	7a0b      	ldrb	r3, [r1, #8]
 8006856:	f003 040f 	and.w	r4, r3, #15
 800685a:	2301      	movs	r3, #1
 800685c:	40a3      	lsls	r3, r4
 800685e:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006860:	0a5b      	lsrs	r3, r3, #9
 8006862:	fb03 f302 	mul.w	r3, r3, r2
 8006866:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800686c:	6603      	str	r3, [r0, #96]	; 0x60
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800686e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006870:	f3c3 3380 	ubfx	r3, r3, #14, #1
 8006874:	764b      	strb	r3, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006876:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006878:	f3c3 13c6 	ubfx	r3, r3, #7, #7
 800687c:	768b      	strb	r3, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800687e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006884:	76cb      	strb	r3, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006886:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006888:	0fdb      	lsrs	r3, r3, #31
 800688a:	770b      	strb	r3, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800688c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800688e:	f3c3 7341 	ubfx	r3, r3, #29, #2
 8006892:	774b      	strb	r3, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006894:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8006896:	f3c3 6382 	ubfx	r3, r3, #26, #3
 800689a:	778b      	strb	r3, [r1, #30]
  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800689c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800689e:	f3c3 5383 	ubfx	r3, r3, #22, #4
 80068a2:	77cb      	strb	r3, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80068a4:	6f03      	ldr	r3, [r0, #112]	; 0x70
 80068a6:	f3c3 5340 	ubfx	r3, r3, #21, #1
 80068aa:	f881 3020 	strb.w	r3, [r1, #32]
  pCSD->Reserved3 = 0;
 80068ae:	2300      	movs	r3, #0
 80068b0:	f881 3021 	strb.w	r3, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80068b4:	f8b0 2072 	ldrh.w	r2, [r0, #114]	; 0x72
 80068b8:	f002 0201 	and.w	r2, r2, #1
 80068bc:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80068c0:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80068c2:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80068c6:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80068ca:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80068cc:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80068d0:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80068d4:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80068d6:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80068da:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80068de:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80068e0:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80068e4:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80068e8:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80068ea:	f3c2 2281 	ubfx	r2, r2, #10, #2
 80068ee:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80068f2:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80068f4:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80068f8:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80068fc:	6f02      	ldr	r2, [r0, #112]	; 0x70
 80068fe:	f3c2 0246 	ubfx	r2, r2, #1, #7
 8006902:	f881 2029 	strb.w	r2, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8006906:	2201      	movs	r2, #1
 8006908:	f881 202a 	strb.w	r2, [r1, #42]	; 0x2a
  return HAL_OK;
 800690c:	4618      	mov	r0, r3
}
 800690e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006912:	4770      	bx	lr
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006914:	2b01      	cmp	r3, #1
 8006916:	d00b      	beq.n	8006930 <HAL_SD_GetCardCSD+0x194>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006918:	6803      	ldr	r3, [r0, #0]
 800691a:	4a0e      	ldr	r2, [pc, #56]	; (8006954 <HAL_SD_GetCardCSD+0x1b8>)
 800691c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800691e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006924:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006926:	2301      	movs	r3, #1
 8006928:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800692c:	4618      	mov	r0, r3
 800692e:	e7ee      	b.n	800690e <HAL_SD_GetCardCSD+0x172>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006930:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8006932:	041b      	lsls	r3, r3, #16
 8006934:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006938:	f8b0 206e 	ldrh.w	r2, [r0, #110]	; 0x6e
 800693c:	4313      	orrs	r3, r2
 800693e:	610b      	str	r3, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006940:	690b      	ldr	r3, [r1, #16]
 8006942:	3301      	adds	r3, #1
 8006944:	029b      	lsls	r3, r3, #10
 8006946:	6543      	str	r3, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006948:	65c3      	str	r3, [r0, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800694a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800694e:	6583      	str	r3, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006950:	6603      	str	r3, [r0, #96]	; 0x60
 8006952:	e78c      	b.n	800686e <HAL_SD_GetCardCSD+0xd2>
 8006954:	004005ff 	.word	0x004005ff

08006958 <SD_InitCard>:
{
 8006958:	b570      	push	{r4, r5, r6, lr}
 800695a:	b090      	sub	sp, #64	; 0x40
 800695c:	4604      	mov	r4, r0
  uint16_t sd_rca = 1U;
 800695e:	2301      	movs	r3, #1
 8006960:	f8ad 3012 	strh.w	r3, [sp, #18]
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006964:	6800      	ldr	r0, [r0, #0]
 8006966:	f001 f87c 	bl	8007a62 <SDIO_GetPowerState>
 800696a:	2800      	cmp	r0, #0
 800696c:	d06c      	beq.n	8006a48 <SD_InitCard+0xf0>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800696e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006970:	2b03      	cmp	r3, #3
 8006972:	d145      	bne.n	8006a00 <SD_InitCard+0xa8>
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006974:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006976:	2b03      	cmp	r3, #3
 8006978:	d15d      	bne.n	8006a36 <SD_InitCard+0xde>
  if(hsd->SdCard.CardType != CARD_SECURED)
 800697a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800697c:	2b03      	cmp	r3, #3
 800697e:	d01d      	beq.n	80069bc <SD_InitCard+0x64>
    hsd->SdCard.RelCardAdd = sd_rca;
 8006980:	f8bd 1012 	ldrh.w	r1, [sp, #18]
 8006984:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006986:	0409      	lsls	r1, r1, #16
 8006988:	6820      	ldr	r0, [r4, #0]
 800698a:	f001 fae1 	bl	8007f50 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 800698e:	4605      	mov	r5, r0
 8006990:	2800      	cmp	r0, #0
 8006992:	d15b      	bne.n	8006a4c <SD_InitCard+0xf4>
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006994:	2100      	movs	r1, #0
 8006996:	6820      	ldr	r0, [r4, #0]
 8006998:	f001 f87c 	bl	8007a94 <SDIO_GetResponse>
 800699c:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800699e:	2104      	movs	r1, #4
 80069a0:	6820      	ldr	r0, [r4, #0]
 80069a2:	f001 f877 	bl	8007a94 <SDIO_GetResponse>
 80069a6:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80069a8:	2108      	movs	r1, #8
 80069aa:	6820      	ldr	r0, [r4, #0]
 80069ac:	f001 f872 	bl	8007a94 <SDIO_GetResponse>
 80069b0:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80069b2:	210c      	movs	r1, #12
 80069b4:	6820      	ldr	r0, [r4, #0]
 80069b6:	f001 f86d 	bl	8007a94 <SDIO_GetResponse>
 80069ba:	6720      	str	r0, [r4, #112]	; 0x70
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80069bc:	2104      	movs	r1, #4
 80069be:	6820      	ldr	r0, [r4, #0]
 80069c0:	f001 f868 	bl	8007a94 <SDIO_GetResponse>
 80069c4:	0d00      	lsrs	r0, r0, #20
 80069c6:	64e0      	str	r0, [r4, #76]	; 0x4c
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80069c8:	a905      	add	r1, sp, #20
 80069ca:	4620      	mov	r0, r4
 80069cc:	f7ff fee6 	bl	800679c <HAL_SD_GetCardCSD>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	d13e      	bne.n	8006a52 <SD_InitCard+0xfa>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80069d4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80069d6:	0412      	lsls	r2, r2, #16
 80069d8:	2300      	movs	r3, #0
 80069da:	6820      	ldr	r0, [r4, #0]
 80069dc:	f001 fa00 	bl	8007de0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80069e0:	4605      	mov	r5, r0
 80069e2:	bb98      	cbnz	r0, 8006a4c <SD_InitCard+0xf4>
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80069e4:	4623      	mov	r3, r4
 80069e6:	f853 6b10 	ldr.w	r6, [r3], #16
 80069ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80069ee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80069f2:	3404      	adds	r4, #4
 80069f4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80069f8:	4630      	mov	r0, r6
 80069fa:	f001 f80b 	bl	8007a14 <SDIO_Init>
  return HAL_SD_ERROR_NONE;
 80069fe:	e025      	b.n	8006a4c <SD_InitCard+0xf4>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006a00:	6820      	ldr	r0, [r4, #0]
 8006a02:	f001 fa90 	bl	8007f26 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a06:	4605      	mov	r5, r0
 8006a08:	bb00      	cbnz	r0, 8006a4c <SD_InitCard+0xf4>
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	6820      	ldr	r0, [r4, #0]
 8006a0e:	f001 f841 	bl	8007a94 <SDIO_GetResponse>
 8006a12:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006a14:	2104      	movs	r1, #4
 8006a16:	6820      	ldr	r0, [r4, #0]
 8006a18:	f001 f83c 	bl	8007a94 <SDIO_GetResponse>
 8006a1c:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006a1e:	2108      	movs	r1, #8
 8006a20:	6820      	ldr	r0, [r4, #0]
 8006a22:	f001 f837 	bl	8007a94 <SDIO_GetResponse>
 8006a26:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006a28:	210c      	movs	r1, #12
 8006a2a:	6820      	ldr	r0, [r4, #0]
 8006a2c:	f001 f832 	bl	8007a94 <SDIO_GetResponse>
 8006a30:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8006a34:	e79e      	b.n	8006974 <SD_InitCard+0x1c>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006a36:	f10d 0112 	add.w	r1, sp, #18
 8006a3a:	6820      	ldr	r0, [r4, #0]
 8006a3c:	f001 fa9d 	bl	8007f7a <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8006a40:	4605      	mov	r5, r0
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d099      	beq.n	800697a <SD_InitCard+0x22>
 8006a46:	e001      	b.n	8006a4c <SD_InitCard+0xf4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a48:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
}
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	b010      	add	sp, #64	; 0x40
 8006a50:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a52:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006a56:	e7f9      	b.n	8006a4c <SD_InitCard+0xf4>

08006a58 <HAL_SD_InitCard>:
{
 8006a58:	b570      	push	{r4, r5, r6, lr}
 8006a5a:	b08a      	sub	sp, #40	; 0x28
 8006a5c:	4605      	mov	r5, r0
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9304      	str	r3, [sp, #16]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006a62:	9305      	str	r3, [sp, #20]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006a64:	9306      	str	r3, [sp, #24]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006a66:	9307      	str	r3, [sp, #28]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006a68:	9308      	str	r3, [sp, #32]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006a6a:	2376      	movs	r3, #118	; 0x76
 8006a6c:	9309      	str	r3, [sp, #36]	; 0x24
  status = SDIO_Init(hsd->Instance, Init);
 8006a6e:	ab0a      	add	r3, sp, #40	; 0x28
 8006a70:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006a74:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006a78:	ab04      	add	r3, sp, #16
 8006a7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a7c:	6828      	ldr	r0, [r5, #0]
 8006a7e:	f000 ffc9 	bl	8007a14 <SDIO_Init>
  if(status != HAL_OK)
 8006a82:	b118      	cbz	r0, 8006a8c <HAL_SD_InitCard+0x34>
    return HAL_ERROR;
 8006a84:	2401      	movs	r4, #1
}
 8006a86:	4620      	mov	r0, r4
 8006a88:	b00a      	add	sp, #40	; 0x28
 8006a8a:	bd70      	pop	{r4, r5, r6, pc}
 8006a8c:	4604      	mov	r4, r0
  __HAL_SD_DISABLE(hsd);
 8006a8e:	4e10      	ldr	r6, [pc, #64]	; (8006ad0 <HAL_SD_InitCard+0x78>)
 8006a90:	2300      	movs	r3, #0
 8006a92:	6033      	str	r3, [r6, #0]
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006a94:	6828      	ldr	r0, [r5, #0]
 8006a96:	f000 ffdc 	bl	8007a52 <SDIO_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	6033      	str	r3, [r6, #0]
  errorstate = SD_PowerON(hsd);
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f7ff fbc6 	bl	8006230 <SD_PowerON>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	b130      	cbz	r0, 8006ab6 <HAL_SD_InitCard+0x5e>
    hsd->State = HAL_SD_STATE_READY;
 8006aa8:	2401      	movs	r4, #1
 8006aaa:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006aae:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8006ab0:	4318      	orrs	r0, r3
 8006ab2:	63a8      	str	r0, [r5, #56]	; 0x38
    return HAL_ERROR;
 8006ab4:	e7e7      	b.n	8006a86 <HAL_SD_InitCard+0x2e>
  errorstate = SD_InitCard(hsd);
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f7ff ff4e 	bl	8006958 <SD_InitCard>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006abc:	4603      	mov	r3, r0
 8006abe:	2800      	cmp	r0, #0
 8006ac0:	d0e1      	beq.n	8006a86 <HAL_SD_InitCard+0x2e>
    hsd->State = HAL_SD_STATE_READY;
 8006ac2:	2401      	movs	r4, #1
 8006ac4:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006ac8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8006aca:	4318      	orrs	r0, r3
 8006acc:	63a8      	str	r0, [r5, #56]	; 0x38
    return HAL_ERROR;
 8006ace:	e7da      	b.n	8006a86 <HAL_SD_InitCard+0x2e>
 8006ad0:	422580a0 	.word	0x422580a0

08006ad4 <HAL_SD_Init>:
  if(hsd == NULL)
 8006ad4:	b1c0      	cbz	r0, 8006b08 <HAL_SD_Init+0x34>
{
 8006ad6:	b510      	push	{r4, lr}
 8006ad8:	4604      	mov	r4, r0
  if(hsd->State == HAL_SD_STATE_RESET)
 8006ada:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8006ade:	b17b      	cbz	r3, 8006b00 <HAL_SD_Init+0x2c>
  hsd->State = HAL_SD_STATE_BUSY;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f7ff ffb6 	bl	8006a58 <HAL_SD_InitCard>
 8006aec:	4603      	mov	r3, r0
 8006aee:	b970      	cbnz	r0, 8006b0e <HAL_SD_Init+0x3a>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006af0:	2200      	movs	r2, #0
 8006af2:	63a2      	str	r2, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8006af4:	6322      	str	r2, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8006af6:	2201      	movs	r2, #1
 8006af8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8006b00:	7703      	strb	r3, [r0, #28]
    HAL_SD_MspInit(hsd);
 8006b02:	f7fb f9e3 	bl	8001ecc <HAL_SD_MspInit>
 8006b06:	e7eb      	b.n	8006ae0 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	4770      	bx	lr
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e7f4      	b.n	8006afc <HAL_SD_Init+0x28>

08006b12 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006b12:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006b14:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006b16:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8006b18:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006b1a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8006b1c:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006b1e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006b20:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006b22:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8006b24:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006b26:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8006b28:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006b2a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8006b2c:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006b2e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8006b30:	61cb      	str	r3, [r1, #28]
}
 8006b32:	2000      	movs	r0, #0
 8006b34:	4770      	bx	lr
	...

08006b38 <HAL_SD_ConfigWideBusOperation>:
{
 8006b38:	b530      	push	{r4, r5, lr}
 8006b3a:	b08b      	sub	sp, #44	; 0x2c
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 8006b40:	2303      	movs	r3, #3
 8006b42:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b46:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006b48:	2b03      	cmp	r3, #3
 8006b4a:	d01c      	beq.n	8006b86 <HAL_SD_ConfigWideBusOperation+0x4e>
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006b4c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006b50:	d008      	beq.n	8006b64 <HAL_SD_ConfigWideBusOperation+0x2c>
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006b52:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8006b56:	d00a      	beq.n	8006b6e <HAL_SD_ConfigWideBusOperation+0x36>
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006b58:	b179      	cbz	r1, 8006b7a <HAL_SD_ConfigWideBusOperation+0x42>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006b5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006b5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b60:	6383      	str	r3, [r0, #56]	; 0x38
 8006b62:	e014      	b.n	8006b8e <HAL_SD_ConfigWideBusOperation+0x56>
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b64:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b6a:	6383      	str	r3, [r0, #56]	; 0x38
 8006b6c:	e00f      	b.n	8006b8e <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Enable(hsd);
 8006b6e:	f7ff fc42 	bl	80063f6 <SD_WideBus_Enable>
      hsd->ErrorCode |= errorstate;
 8006b72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b74:	4318      	orrs	r0, r3
 8006b76:	63a0      	str	r0, [r4, #56]	; 0x38
 8006b78:	e009      	b.n	8006b8e <HAL_SD_ConfigWideBusOperation+0x56>
      errorstate = SD_WideBus_Disable(hsd);
 8006b7a:	f7ff fc67 	bl	800644c <SD_WideBus_Disable>
      hsd->ErrorCode |= errorstate;
 8006b7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b80:	4318      	orrs	r0, r3
 8006b82:	63a0      	str	r0, [r4, #56]	; 0x38
 8006b84:	e003      	b.n	8006b8e <HAL_SD_ConfigWideBusOperation+0x56>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006b86:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b8c:	6383      	str	r3, [r0, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006b8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b90:	b13b      	cbz	r3, 8006ba2 <HAL_SD_ConfigWideBusOperation+0x6a>
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b92:	6823      	ldr	r3, [r4, #0]
 8006b94:	4a10      	ldr	r2, [pc, #64]	; (8006bd8 <HAL_SD_ConfigWideBusOperation+0xa0>)
 8006b96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006b98:	2001      	movs	r0, #1
 8006b9a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8006b9e:	b00b      	add	sp, #44	; 0x2c
 8006ba0:	bd30      	pop	{r4, r5, pc}
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006ba2:	6863      	ldr	r3, [r4, #4]
 8006ba4:	9304      	str	r3, [sp, #16]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006ba6:	68a3      	ldr	r3, [r4, #8]
 8006ba8:	9305      	str	r3, [sp, #20]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006baa:	68e3      	ldr	r3, [r4, #12]
 8006bac:	9306      	str	r3, [sp, #24]
    Init.BusWide             = WideMode;
 8006bae:	9507      	str	r5, [sp, #28]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006bb0:	6963      	ldr	r3, [r4, #20]
 8006bb2:	9308      	str	r3, [sp, #32]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006bb4:	69a3      	ldr	r3, [r4, #24]
 8006bb6:	9309      	str	r3, [sp, #36]	; 0x24
    (void)SDIO_Init(hsd->Instance, Init);
 8006bb8:	ab0a      	add	r3, sp, #40	; 0x28
 8006bba:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8006bbe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8006bc2:	ab04      	add	r3, sp, #16
 8006bc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bc6:	6820      	ldr	r0, [r4, #0]
 8006bc8:	f000 ff24 	bl	8007a14 <SDIO_Init>
  hsd->State = HAL_SD_STATE_READY;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8006bd2:	2000      	movs	r0, #0
 8006bd4:	e7e3      	b.n	8006b9e <HAL_SD_ConfigWideBusOperation+0x66>
 8006bd6:	bf00      	nop
 8006bd8:	004005ff 	.word	0x004005ff

08006bdc <HAL_SD_GetCardState>:
{
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	4604      	mov	r4, r0
  uint32_t resp1 = 0;
 8006be2:	a902      	add	r1, sp, #8
 8006be4:	2300      	movs	r3, #0
 8006be6:	f841 3d04 	str.w	r3, [r1, #-4]!
  errorstate = SD_SendStatus(hsd, &resp1);
 8006bea:	f7ff fc5a 	bl	80064a2 <SD_SendStatus>
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bee:	b118      	cbz	r0, 8006bf8 <HAL_SD_GetCardState+0x1c>
 8006bf0:	4603      	mov	r3, r0
    hsd->ErrorCode |= errorstate;
 8006bf2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006bf4:	4318      	orrs	r0, r3
 8006bf6:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8006bf8:	9801      	ldr	r0, [sp, #4]
 8006bfa:	f3c0 2043 	ubfx	r0, r0, #9, #4
 8006bfe:	b002      	add	sp, #8
 8006c00:	bd10      	pop	{r4, pc}
	...

08006c04 <SD_DMAError>:
{
 8006c04:	b510      	push	{r4, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006c06:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006c08:	f7fc f998 	bl	8002f3c <HAL_DMA_GetError>
 8006c0c:	2802      	cmp	r0, #2
 8006c0e:	d00a      	beq.n	8006c26 <SD_DMAError+0x22>
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006c10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006c14:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006c16:	6d52      	ldr	r2, [r2, #84]	; 0x54
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d005      	beq.n	8006c28 <SD_DMAError+0x24>
 8006c1c:	2a01      	cmp	r2, #1
 8006c1e:	d003      	beq.n	8006c28 <SD_DMAError+0x24>
    HAL_SD_ErrorCallback(hsd);
 8006c20:	4620      	mov	r0, r4
 8006c22:	f7ff fd95 	bl	8006750 <HAL_SD_ErrorCallback>
}
 8006c26:	bd10      	pop	{r4, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	4a0f      	ldr	r2, [pc, #60]	; (8006c68 <SD_DMAError+0x64>)
 8006c2c:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006c2e:	6822      	ldr	r2, [r4, #0]
 8006c30:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8006c32:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8006c36:	63d3      	str	r3, [r2, #60]	; 0x3c
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006c38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c3e:	63a3      	str	r3, [r4, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006c40:	4620      	mov	r0, r4
 8006c42:	f7ff ffcb 	bl	8006bdc <HAL_SD_GetCardState>
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006c46:	3805      	subs	r0, #5
 8006c48:	2801      	cmp	r0, #1
 8006c4a:	d905      	bls.n	8006c58 <SD_DMAError+0x54>
      hsd->State= HAL_SD_STATE_READY;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c52:	2300      	movs	r3, #0
 8006c54:	6323      	str	r3, [r4, #48]	; 0x30
 8006c56:	e7e3      	b.n	8006c20 <SD_DMAError+0x1c>
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c58:	6820      	ldr	r0, [r4, #0]
 8006c5a:	f001 f8a7 	bl	8007dac <SDMMC_CmdStopTransfer>
 8006c5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006c60:	4318      	orrs	r0, r3
 8006c62:	63a0      	str	r0, [r4, #56]	; 0x38
 8006c64:	e7f2      	b.n	8006c4c <SD_DMAError+0x48>
 8006c66:	bf00      	nop
 8006c68:	004005ff 	.word	0x004005ff

08006c6c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006c6c:	b1d8      	cbz	r0, 8006ca6 <HAL_SDRAM_Init+0x3a>
{   
 8006c6e:	b538      	push	{r3, r4, r5, lr}
 8006c70:	4604      	mov	r4, r0
 8006c72:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006c74:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006c78:	b183      	cbz	r3, 8006c9c <HAL_SDRAM_Init+0x30>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006c7a:	2302      	movs	r3, #2
 8006c7c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006c80:	1d21      	adds	r1, r4, #4
 8006c82:	6820      	ldr	r0, [r4, #0]
 8006c84:	f000 fd64 	bl	8007750 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006c88:	6862      	ldr	r2, [r4, #4]
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	6820      	ldr	r0, [r4, #0]
 8006c8e:	f000 fd9b 	bl	80077c8 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006c92:	2301      	movs	r3, #1
 8006c94:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8006c98:	2000      	movs	r0, #0
}
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8006c9c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8006ca0:	f006 ff52 	bl	800db48 <HAL_SDRAM_MspInit>
 8006ca4:	e7e9      	b.n	8006c7a <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8006ca6:	2001      	movs	r0, #1
}
 8006ca8:	4770      	bx	lr

08006caa <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006caa:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006cac:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d014      	beq.n	8006ce0 <HAL_SDRAM_SendCommand+0x36>
 8006cb6:	460d      	mov	r5, r1
 8006cb8:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006cba:	2302      	movs	r3, #2
 8006cbc:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006cc0:	6800      	ldr	r0, [r0, #0]
 8006cc2:	f000 fdcc 	bl	800785e <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006cc6:	682b      	ldr	r3, [r5, #0]
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d004      	beq.n	8006cd6 <HAL_SDRAM_SendCommand+0x2c>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8006cd2:	2000      	movs	r0, #0
}
 8006cd4:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006cd6:	2305      	movs	r3, #5
 8006cd8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;  
 8006cdc:	2000      	movs	r0, #0
 8006cde:	e7f9      	b.n	8006cd4 <HAL_SDRAM_SendCommand+0x2a>
    return HAL_BUSY;
 8006ce0:	2002      	movs	r0, #2
 8006ce2:	e7f7      	b.n	8006cd4 <HAL_SDRAM_SendCommand+0x2a>

08006ce4 <HAL_SDRAM_ProgramRefreshRate>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006ce4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	d00c      	beq.n	8006d08 <HAL_SDRAM_ProgramRefreshRate+0x24>
{
 8006cee:	b510      	push	{r4, lr}
 8006cf0:	4604      	mov	r4, r0
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006cf2:	2302      	movs	r3, #2
 8006cf4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8006cf8:	6800      	ldr	r0, [r0, #0]
 8006cfa:	f000 fdda 	bl	80078b2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 8006d04:	2000      	movs	r0, #0
}
 8006d06:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006d08:	2002      	movs	r0, #2
}
 8006d0a:	4770      	bx	lr

08006d0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d0c:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d0e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d10:	6a04      	ldr	r4, [r0, #32]
 8006d12:	f024 0401 	bic.w	r4, r4, #1
 8006d16:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d18:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d1a:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d1e:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d22:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8006d26:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d28:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006d2a:	6203      	str	r3, [r0, #32]
}
 8006d2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d32:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d34:	6a03      	ldr	r3, [r0, #32]
 8006d36:	f023 0310 	bic.w	r3, r3, #16
 8006d3a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d3c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8006d3e:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d40:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d44:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d4c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d50:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006d52:	6203      	str	r3, [r0, #32]
}
 8006d54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d5a:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d60:	4319      	orrs	r1, r3
 8006d62:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d66:	6081      	str	r1, [r0, #8]
}
 8006d68:	4770      	bx	lr

08006d6a <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d70:	6802      	ldr	r2, [r0, #0]
 8006d72:	6893      	ldr	r3, [r2, #8]
 8006d74:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d78:	2b06      	cmp	r3, #6
 8006d7a:	d003      	beq.n	8006d84 <HAL_TIM_Base_Start+0x1a>
    __HAL_TIM_ENABLE(htim);
 8006d7c:	6813      	ldr	r3, [r2, #0]
 8006d7e:	f043 0301 	orr.w	r3, r3, #1
 8006d82:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006d84:	2301      	movs	r3, #1
 8006d86:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	4770      	bx	lr

08006d8e <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d8e:	6802      	ldr	r2, [r0, #0]
 8006d90:	68d3      	ldr	r3, [r2, #12]
 8006d92:	f043 0301 	orr.w	r3, r3, #1
 8006d96:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d98:	6802      	ldr	r2, [r0, #0]
 8006d9a:	6893      	ldr	r3, [r2, #8]
 8006d9c:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da0:	2b06      	cmp	r3, #6
 8006da2:	d003      	beq.n	8006dac <HAL_TIM_Base_Start_IT+0x1e>
    __HAL_TIM_ENABLE(htim);
 8006da4:	6813      	ldr	r3, [r2, #0]
 8006da6:	f043 0301 	orr.w	r3, r3, #1
 8006daa:	6013      	str	r3, [r2, #0]
}
 8006dac:	2000      	movs	r0, #0
 8006dae:	4770      	bx	lr

08006db0 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8006db0:	4770      	bx	lr

08006db2 <HAL_TIM_IC_CaptureCallback>:
}
 8006db2:	4770      	bx	lr

08006db4 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8006db4:	4770      	bx	lr

08006db6 <HAL_TIM_TriggerCallback>:
}
 8006db6:	4770      	bx	lr

08006db8 <HAL_TIM_IRQHandler>:
{
 8006db8:	b510      	push	{r4, lr}
 8006dba:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006dbc:	6803      	ldr	r3, [r0, #0]
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	f012 0f02 	tst.w	r2, #2
 8006dc4:	d011      	beq.n	8006dea <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	f012 0f02 	tst.w	r2, #2
 8006dcc:	d00d      	beq.n	8006dea <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dce:	f06f 0202 	mvn.w	r2, #2
 8006dd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dd8:	6803      	ldr	r3, [r0, #0]
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f013 0f03 	tst.w	r3, #3
 8006de0:	d070      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8006de2:	f7ff ffe6 	bl	8006db2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006de6:	2300      	movs	r3, #0
 8006de8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006dea:	6823      	ldr	r3, [r4, #0]
 8006dec:	691a      	ldr	r2, [r3, #16]
 8006dee:	f012 0f04 	tst.w	r2, #4
 8006df2:	d012      	beq.n	8006e1a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	f012 0f04 	tst.w	r2, #4
 8006dfa:	d00e      	beq.n	8006e1a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006dfc:	f06f 0204 	mvn.w	r2, #4
 8006e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e02:	2302      	movs	r3, #2
 8006e04:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006e0e:	d05f      	beq.n	8006ed0 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8006e10:	4620      	mov	r0, r4
 8006e12:	f7ff ffce 	bl	8006db2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e16:	2300      	movs	r3, #0
 8006e18:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	691a      	ldr	r2, [r3, #16]
 8006e1e:	f012 0f08 	tst.w	r2, #8
 8006e22:	d012      	beq.n	8006e4a <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	f012 0f08 	tst.w	r2, #8
 8006e2a:	d00e      	beq.n	8006e4a <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e2c:	f06f 0208 	mvn.w	r2, #8
 8006e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e32:	2304      	movs	r3, #4
 8006e34:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	f013 0f03 	tst.w	r3, #3
 8006e3e:	d04e      	beq.n	8006ede <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8006e40:	4620      	mov	r0, r4
 8006e42:	f7ff ffb6 	bl	8006db2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e46:	2300      	movs	r3, #0
 8006e48:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	691a      	ldr	r2, [r3, #16]
 8006e4e:	f012 0f10 	tst.w	r2, #16
 8006e52:	d012      	beq.n	8006e7a <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e54:	68da      	ldr	r2, [r3, #12]
 8006e56:	f012 0f10 	tst.w	r2, #16
 8006e5a:	d00e      	beq.n	8006e7a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006e5c:	f06f 0210 	mvn.w	r2, #16
 8006e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e62:	2308      	movs	r3, #8
 8006e64:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006e6e:	d03d      	beq.n	8006eec <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 8006e70:	4620      	mov	r0, r4
 8006e72:	f7ff ff9e 	bl	8006db2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e76:	2300      	movs	r3, #0
 8006e78:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	691a      	ldr	r2, [r3, #16]
 8006e7e:	f012 0f01 	tst.w	r2, #1
 8006e82:	d003      	beq.n	8006e8c <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	f012 0f01 	tst.w	r2, #1
 8006e8a:	d136      	bne.n	8006efa <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	691a      	ldr	r2, [r3, #16]
 8006e90:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006e94:	d003      	beq.n	8006e9e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e96:	68da      	ldr	r2, [r3, #12]
 8006e98:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006e9c:	d134      	bne.n	8006f08 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	691a      	ldr	r2, [r3, #16]
 8006ea2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006ea6:	d003      	beq.n	8006eb0 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	f012 0f40 	tst.w	r2, #64	; 0x40
 8006eae:	d132      	bne.n	8006f16 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	f012 0f20 	tst.w	r2, #32
 8006eb8:	d003      	beq.n	8006ec2 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006eba:	68da      	ldr	r2, [r3, #12]
 8006ebc:	f012 0f20 	tst.w	r2, #32
 8006ec0:	d130      	bne.n	8006f24 <HAL_TIM_IRQHandler+0x16c>
}
 8006ec2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec4:	f7ff ff74 	bl	8006db0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec8:	4620      	mov	r0, r4
 8006eca:	f7ff ff73 	bl	8006db4 <HAL_TIM_PWM_PulseFinishedCallback>
 8006ece:	e78a      	b.n	8006de6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed0:	4620      	mov	r0, r4
 8006ed2:	f7ff ff6d 	bl	8006db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	f7ff ff6c 	bl	8006db4 <HAL_TIM_PWM_PulseFinishedCallback>
 8006edc:	e79b      	b.n	8006e16 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ede:	4620      	mov	r0, r4
 8006ee0:	f7ff ff66 	bl	8006db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	f7ff ff65 	bl	8006db4 <HAL_TIM_PWM_PulseFinishedCallback>
 8006eea:	e7ac      	b.n	8006e46 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eec:	4620      	mov	r0, r4
 8006eee:	f7ff ff5f 	bl	8006db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f7ff ff5e 	bl	8006db4 <HAL_TIM_PWM_PulseFinishedCallback>
 8006ef8:	e7bd      	b.n	8006e76 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006efa:	f06f 0201 	mvn.w	r2, #1
 8006efe:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f00:	4620      	mov	r0, r4
 8006f02:	f7fa feb3 	bl	8001c6c <HAL_TIM_PeriodElapsedCallback>
 8006f06:	e7c1      	b.n	8006e8c <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f0c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 f94b 	bl	80071aa <HAL_TIMEx_BreakCallback>
 8006f14:	e7c3      	b.n	8006e9e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f1a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f7ff ff4a 	bl	8006db6 <HAL_TIM_TriggerCallback>
 8006f22:	e7c5      	b.n	8006eb0 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006f24:	f06f 0220 	mvn.w	r2, #32
 8006f28:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f000 f93c 	bl	80071a8 <HAL_TIMEx_CommutCallback>
}
 8006f30:	e7c7      	b.n	8006ec2 <HAL_TIM_IRQHandler+0x10a>
	...

08006f34 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8006f34:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f36:	4a30      	ldr	r2, [pc, #192]	; (8006ff8 <TIM_Base_SetConfig+0xc4>)
 8006f38:	4290      	cmp	r0, r2
 8006f3a:	d012      	beq.n	8006f62 <TIM_Base_SetConfig+0x2e>
 8006f3c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006f40:	d00f      	beq.n	8006f62 <TIM_Base_SetConfig+0x2e>
 8006f42:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006f46:	4290      	cmp	r0, r2
 8006f48:	d00b      	beq.n	8006f62 <TIM_Base_SetConfig+0x2e>
 8006f4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f4e:	4290      	cmp	r0, r2
 8006f50:	d007      	beq.n	8006f62 <TIM_Base_SetConfig+0x2e>
 8006f52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f56:	4290      	cmp	r0, r2
 8006f58:	d003      	beq.n	8006f62 <TIM_Base_SetConfig+0x2e>
 8006f5a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006f5e:	4290      	cmp	r0, r2
 8006f60:	d103      	bne.n	8006f6a <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8006f66:	684a      	ldr	r2, [r1, #4]
 8006f68:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f6a:	4a23      	ldr	r2, [pc, #140]	; (8006ff8 <TIM_Base_SetConfig+0xc4>)
 8006f6c:	4290      	cmp	r0, r2
 8006f6e:	d02a      	beq.n	8006fc6 <TIM_Base_SetConfig+0x92>
 8006f70:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006f74:	d027      	beq.n	8006fc6 <TIM_Base_SetConfig+0x92>
 8006f76:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8006f7a:	4290      	cmp	r0, r2
 8006f7c:	d023      	beq.n	8006fc6 <TIM_Base_SetConfig+0x92>
 8006f7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f82:	4290      	cmp	r0, r2
 8006f84:	d01f      	beq.n	8006fc6 <TIM_Base_SetConfig+0x92>
 8006f86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f8a:	4290      	cmp	r0, r2
 8006f8c:	d01b      	beq.n	8006fc6 <TIM_Base_SetConfig+0x92>
 8006f8e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8006f92:	4290      	cmp	r0, r2
 8006f94:	d017      	beq.n	8006fc6 <TIM_Base_SetConfig+0x92>
 8006f96:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8006f9a:	4290      	cmp	r0, r2
 8006f9c:	d013      	beq.n	8006fc6 <TIM_Base_SetConfig+0x92>
 8006f9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fa2:	4290      	cmp	r0, r2
 8006fa4:	d00f      	beq.n	8006fc6 <TIM_Base_SetConfig+0x92>
 8006fa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006faa:	4290      	cmp	r0, r2
 8006fac:	d00b      	beq.n	8006fc6 <TIM_Base_SetConfig+0x92>
 8006fae:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8006fb2:	4290      	cmp	r0, r2
 8006fb4:	d007      	beq.n	8006fc6 <TIM_Base_SetConfig+0x92>
 8006fb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fba:	4290      	cmp	r0, r2
 8006fbc:	d003      	beq.n	8006fc6 <TIM_Base_SetConfig+0x92>
 8006fbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006fc2:	4290      	cmp	r0, r2
 8006fc4:	d103      	bne.n	8006fce <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fca:	68ca      	ldr	r2, [r1, #12]
 8006fcc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fd2:	694a      	ldr	r2, [r1, #20]
 8006fd4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006fd6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fd8:	688b      	ldr	r3, [r1, #8]
 8006fda:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006fdc:	680b      	ldr	r3, [r1, #0]
 8006fde:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fe0:	4b05      	ldr	r3, [pc, #20]	; (8006ff8 <TIM_Base_SetConfig+0xc4>)
 8006fe2:	4298      	cmp	r0, r3
 8006fe4:	d003      	beq.n	8006fee <TIM_Base_SetConfig+0xba>
 8006fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fea:	4298      	cmp	r0, r3
 8006fec:	d101      	bne.n	8006ff2 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 8006fee:	690b      	ldr	r3, [r1, #16]
 8006ff0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	6143      	str	r3, [r0, #20]
}
 8006ff6:	4770      	bx	lr
 8006ff8:	40010000 	.word	0x40010000

08006ffc <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8006ffc:	b1a8      	cbz	r0, 800702a <HAL_TIM_Base_Init+0x2e>
{
 8006ffe:	b510      	push	{r4, lr}
 8007000:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007002:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007006:	b15b      	cbz	r3, 8007020 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8007008:	2302      	movs	r3, #2
 800700a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800700e:	1d21      	adds	r1, r4, #4
 8007010:	6820      	ldr	r0, [r4, #0]
 8007012:	f7ff ff8f 	bl	8006f34 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007016:	2301      	movs	r3, #1
 8007018:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800701c:	2000      	movs	r0, #0
}
 800701e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007020:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007024:	f7fa ffa2 	bl	8001f6c <HAL_TIM_Base_MspInit>
 8007028:	e7ee      	b.n	8007008 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800702a:	2001      	movs	r0, #1
}
 800702c:	4770      	bx	lr

0800702e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800702e:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007030:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007032:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007036:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800703a:	430b      	orrs	r3, r1
 800703c:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800703e:	6083      	str	r3, [r0, #8]
}
 8007040:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007044:	4770      	bx	lr

08007046 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007046:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800704a:	2b01      	cmp	r3, #1
 800704c:	d066      	beq.n	800711c <HAL_TIM_ConfigClockSource+0xd6>
{
 800704e:	b510      	push	{r4, lr}
 8007050:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007052:	2301      	movs	r3, #1
 8007054:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8007058:	2302      	movs	r3, #2
 800705a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800705e:	6802      	ldr	r2, [r0, #0]
 8007060:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007066:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800706a:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800706c:	680b      	ldr	r3, [r1, #0]
 800706e:	2b40      	cmp	r3, #64	; 0x40
 8007070:	d04a      	beq.n	8007108 <HAL_TIM_ConfigClockSource+0xc2>
 8007072:	d913      	bls.n	800709c <HAL_TIM_ConfigClockSource+0x56>
 8007074:	2b60      	cmp	r3, #96	; 0x60
 8007076:	d03d      	beq.n	80070f4 <HAL_TIM_ConfigClockSource+0xae>
 8007078:	d91e      	bls.n	80070b8 <HAL_TIM_ConfigClockSource+0x72>
 800707a:	2b70      	cmp	r3, #112	; 0x70
 800707c:	d028      	beq.n	80070d0 <HAL_TIM_ConfigClockSource+0x8a>
 800707e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007082:	d130      	bne.n	80070e6 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 8007084:	68cb      	ldr	r3, [r1, #12]
 8007086:	684a      	ldr	r2, [r1, #4]
 8007088:	6889      	ldr	r1, [r1, #8]
 800708a:	6800      	ldr	r0, [r0, #0]
 800708c:	f7ff ffcf 	bl	800702e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007090:	6822      	ldr	r2, [r4, #0]
 8007092:	6893      	ldr	r3, [r2, #8]
 8007094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007098:	6093      	str	r3, [r2, #8]
      break;
 800709a:	e024      	b.n	80070e6 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 800709c:	2b10      	cmp	r3, #16
 800709e:	d006      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x68>
 80070a0:	d904      	bls.n	80070ac <HAL_TIM_ConfigClockSource+0x66>
 80070a2:	2b20      	cmp	r3, #32
 80070a4:	d003      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x68>
 80070a6:	2b30      	cmp	r3, #48	; 0x30
 80070a8:	d001      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0x68>
 80070aa:	e01c      	b.n	80070e6 <HAL_TIM_ConfigClockSource+0xa0>
 80070ac:	b9db      	cbnz	r3, 80070e6 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80070ae:	4619      	mov	r1, r3
 80070b0:	6820      	ldr	r0, [r4, #0]
 80070b2:	f7ff fe52 	bl	8006d5a <TIM_ITRx_SetConfig>
      break;
 80070b6:	e016      	b.n	80070e6 <HAL_TIM_ConfigClockSource+0xa0>
  switch (sClockSourceConfig->ClockSource)
 80070b8:	2b50      	cmp	r3, #80	; 0x50
 80070ba:	d114      	bne.n	80070e6 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070bc:	68ca      	ldr	r2, [r1, #12]
 80070be:	6849      	ldr	r1, [r1, #4]
 80070c0:	6800      	ldr	r0, [r0, #0]
 80070c2:	f7ff fe23 	bl	8006d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070c6:	2150      	movs	r1, #80	; 0x50
 80070c8:	6820      	ldr	r0, [r4, #0]
 80070ca:	f7ff fe46 	bl	8006d5a <TIM_ITRx_SetConfig>
      break;
 80070ce:	e00a      	b.n	80070e6 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_ETR_SetConfig(htim->Instance,
 80070d0:	68cb      	ldr	r3, [r1, #12]
 80070d2:	684a      	ldr	r2, [r1, #4]
 80070d4:	6889      	ldr	r1, [r1, #8]
 80070d6:	6800      	ldr	r0, [r0, #0]
 80070d8:	f7ff ffa9 	bl	800702e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80070dc:	6822      	ldr	r2, [r4, #0]
 80070de:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 80070e4:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80070e6:	2301      	movs	r3, #1
 80070e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80070ec:	2000      	movs	r0, #0
 80070ee:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80070f2:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070f4:	68ca      	ldr	r2, [r1, #12]
 80070f6:	6849      	ldr	r1, [r1, #4]
 80070f8:	6800      	ldr	r0, [r0, #0]
 80070fa:	f7ff fe1a 	bl	8006d32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070fe:	2160      	movs	r1, #96	; 0x60
 8007100:	6820      	ldr	r0, [r4, #0]
 8007102:	f7ff fe2a 	bl	8006d5a <TIM_ITRx_SetConfig>
      break;
 8007106:	e7ee      	b.n	80070e6 <HAL_TIM_ConfigClockSource+0xa0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007108:	68ca      	ldr	r2, [r1, #12]
 800710a:	6849      	ldr	r1, [r1, #4]
 800710c:	6800      	ldr	r0, [r0, #0]
 800710e:	f7ff fdfd 	bl	8006d0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007112:	2140      	movs	r1, #64	; 0x40
 8007114:	6820      	ldr	r0, [r4, #0]
 8007116:	f7ff fe20 	bl	8006d5a <TIM_ITRx_SetConfig>
      break;
 800711a:	e7e4      	b.n	80070e6 <HAL_TIM_ConfigClockSource+0xa0>
  __HAL_LOCK(htim);
 800711c:	2002      	movs	r0, #2
}
 800711e:	4770      	bx	lr

08007120 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007120:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007124:	2b01      	cmp	r3, #1
 8007126:	d03b      	beq.n	80071a0 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8007128:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800712a:	2301      	movs	r3, #1
 800712c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007130:	2302      	movs	r3, #2
 8007132:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007136:	6803      	ldr	r3, [r0, #0]
 8007138:	685c      	ldr	r4, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800713a:	689d      	ldr	r5, [r3, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800713c:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007140:	680a      	ldr	r2, [r1, #0]
 8007142:	4322      	orrs	r2, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007146:	6803      	ldr	r3, [r0, #0]
 8007148:	4a16      	ldr	r2, [pc, #88]	; (80071a4 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d01a      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800714e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007152:	d017      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007154:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8007158:	4293      	cmp	r3, r2
 800715a:	d013      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800715c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007160:	4293      	cmp	r3, r2
 8007162:	d00f      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007164:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007168:	4293      	cmp	r3, r2
 800716a:	d00b      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800716c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8007170:	4293      	cmp	r3, r2
 8007172:	d007      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8007174:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8007178:	4293      	cmp	r3, r2
 800717a:	d003      	beq.n	8007184 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800717c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8007180:	4293      	cmp	r3, r2
 8007182:	d104      	bne.n	800718e <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007184:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007188:	684a      	ldr	r2, [r1, #4]
 800718a:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800718c:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800718e:	2301      	movs	r3, #1
 8007190:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007194:	2300      	movs	r3, #0
 8007196:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 800719a:	4618      	mov	r0, r3
}
 800719c:	bc30      	pop	{r4, r5}
 800719e:	4770      	bx	lr
  __HAL_LOCK(htim);
 80071a0:	2002      	movs	r0, #2
}
 80071a2:	4770      	bx	lr
 80071a4:	40010000 	.word	0x40010000

080071a8 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071a8:	4770      	bx	lr

080071aa <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071aa:	4770      	bx	lr

080071ac <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80071ac:	6802      	ldr	r2, [r0, #0]
 80071ae:	68d3      	ldr	r3, [r2, #12]
 80071b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80071b4:	60d3      	str	r3, [r2, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071b6:	2320      	movs	r3, #32
 80071b8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 80071bc:	4770      	bx	lr

080071be <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071be:	6802      	ldr	r2, [r0, #0]
 80071c0:	68d3      	ldr	r3, [r2, #12]
 80071c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071c6:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c8:	6802      	ldr	r2, [r0, #0]
 80071ca:	6953      	ldr	r3, [r2, #20]
 80071cc:	f023 0301 	bic.w	r3, r3, #1
 80071d0:	6153      	str	r3, [r2, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071d2:	2320      	movs	r3, #32
 80071d4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 80071d8:	4770      	bx	lr
	...

080071dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071dc:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80071e0:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071e2:	6802      	ldr	r2, [r0, #0]
 80071e4:	6913      	ldr	r3, [r2, #16]
 80071e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80071ea:	68c1      	ldr	r1, [r0, #12]
 80071ec:	430b      	orrs	r3, r1
 80071ee:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071f0:	6883      	ldr	r3, [r0, #8]
 80071f2:	6902      	ldr	r2, [r0, #16]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	6942      	ldr	r2, [r0, #20]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	69c2      	ldr	r2, [r0, #28]
 80071fc:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 80071fe:	6801      	ldr	r1, [r0, #0]
 8007200:	68cb      	ldr	r3, [r1, #12]
 8007202:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007206:	f023 030c 	bic.w	r3, r3, #12
 800720a:	4313      	orrs	r3, r2
 800720c:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800720e:	6802      	ldr	r2, [r0, #0]
 8007210:	6953      	ldr	r3, [r2, #20]
 8007212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007216:	6981      	ldr	r1, [r0, #24]
 8007218:	430b      	orrs	r3, r1
 800721a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800721c:	69c3      	ldr	r3, [r0, #28]
 800721e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007222:	d03b      	beq.n	800729c <UART_SetConfig+0xc0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007224:	6803      	ldr	r3, [r0, #0]
 8007226:	4a71      	ldr	r2, [pc, #452]	; (80073ec <UART_SetConfig+0x210>)
 8007228:	4293      	cmp	r3, r2
 800722a:	f000 80ab 	beq.w	8007384 <UART_SetConfig+0x1a8>
 800722e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007232:	4293      	cmp	r3, r2
 8007234:	f000 80a6 	beq.w	8007384 <UART_SetConfig+0x1a8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007238:	f7fe fb0a 	bl	8005850 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800723c:	f04f 0900 	mov.w	r9, #0
 8007240:	1806      	adds	r6, r0, r0
 8007242:	eb49 0709 	adc.w	r7, r9, r9
 8007246:	eb16 0b00 	adds.w	fp, r6, r0
 800724a:	eb47 0c09 	adc.w	ip, r7, r9
 800724e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8007252:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8007256:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 800725a:	4693      	mov	fp, r2
 800725c:	469c      	mov	ip, r3
 800725e:	6863      	ldr	r3, [r4, #4]
 8007260:	009a      	lsls	r2, r3, #2
 8007262:	0f9b      	lsrs	r3, r3, #30
 8007264:	eb10 000b 	adds.w	r0, r0, fp
 8007268:	eb49 010c 	adc.w	r1, r9, ip
 800726c:	f7f9 fc76 	bl	8000b5c <__aeabi_uldivmod>
 8007270:	4d5f      	ldr	r5, [pc, #380]	; (80073f0 <UART_SetConfig+0x214>)
 8007272:	fba5 3200 	umull	r3, r2, r5, r0
 8007276:	0951      	lsrs	r1, r2, #5
 8007278:	2264      	movs	r2, #100	; 0x64
 800727a:	fb02 0211 	mls	r2, r2, r1, r0
 800727e:	0113      	lsls	r3, r2, #4
 8007280:	3332      	adds	r3, #50	; 0x32
 8007282:	fba5 2303 	umull	r2, r3, r5, r3
 8007286:	095b      	lsrs	r3, r3, #5
 8007288:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800728c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007290:	f003 030f 	and.w	r3, r3, #15
 8007294:	6821      	ldr	r1, [r4, #0]
 8007296:	4413      	add	r3, r2
 8007298:	608b      	str	r3, [r1, #8]
    }
  }
}
 800729a:	e0a4      	b.n	80073e6 <UART_SetConfig+0x20a>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800729c:	6803      	ldr	r3, [r0, #0]
 800729e:	4a53      	ldr	r2, [pc, #332]	; (80073ec <UART_SetConfig+0x210>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d039      	beq.n	8007318 <UART_SetConfig+0x13c>
 80072a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d035      	beq.n	8007318 <UART_SetConfig+0x13c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80072ac:	f7fe fad0 	bl	8005850 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80072b0:	4683      	mov	fp, r0
 80072b2:	f04f 0c00 	mov.w	ip, #0
 80072b6:	1806      	adds	r6, r0, r0
 80072b8:	eb4c 070c 	adc.w	r7, ip, ip
 80072bc:	eb16 0800 	adds.w	r8, r6, r0
 80072c0:	eb47 090c 	adc.w	r9, r7, ip
 80072c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072d0:	4690      	mov	r8, r2
 80072d2:	4699      	mov	r9, r3
 80072d4:	6862      	ldr	r2, [r4, #4]
 80072d6:	2100      	movs	r1, #0
 80072d8:	1892      	adds	r2, r2, r2
 80072da:	eb41 0301 	adc.w	r3, r1, r1
 80072de:	eb1b 0008 	adds.w	r0, fp, r8
 80072e2:	eb4c 0109 	adc.w	r1, ip, r9
 80072e6:	f7f9 fc39 	bl	8000b5c <__aeabi_uldivmod>
 80072ea:	4d41      	ldr	r5, [pc, #260]	; (80073f0 <UART_SetConfig+0x214>)
 80072ec:	fba5 3200 	umull	r3, r2, r5, r0
 80072f0:	0951      	lsrs	r1, r2, #5
 80072f2:	2264      	movs	r2, #100	; 0x64
 80072f4:	fb02 0211 	mls	r2, r2, r1, r0
 80072f8:	00d3      	lsls	r3, r2, #3
 80072fa:	3332      	adds	r3, #50	; 0x32
 80072fc:	fba5 2303 	umull	r2, r3, r5, r3
 8007300:	095b      	lsrs	r3, r3, #5
 8007302:	005a      	lsls	r2, r3, #1
 8007304:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8007308:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	6821      	ldr	r1, [r4, #0]
 8007312:	4413      	add	r3, r2
 8007314:	608b      	str	r3, [r1, #8]
 8007316:	e066      	b.n	80073e6 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007318:	f7fe faaa 	bl	8005870 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800731c:	4680      	mov	r8, r0
 800731e:	f04f 0900 	mov.w	r9, #0
 8007322:	1806      	adds	r6, r0, r0
 8007324:	eb49 0709 	adc.w	r7, r9, r9
 8007328:	eb16 0b00 	adds.w	fp, r6, r0
 800732c:	eb47 0c09 	adc.w	ip, r7, r9
 8007330:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8007334:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 8007338:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 800733c:	4693      	mov	fp, r2
 800733e:	469c      	mov	ip, r3
 8007340:	6862      	ldr	r2, [r4, #4]
 8007342:	2100      	movs	r1, #0
 8007344:	1892      	adds	r2, r2, r2
 8007346:	eb41 0301 	adc.w	r3, r1, r1
 800734a:	eb18 000b 	adds.w	r0, r8, fp
 800734e:	eb49 010c 	adc.w	r1, r9, ip
 8007352:	f7f9 fc03 	bl	8000b5c <__aeabi_uldivmod>
 8007356:	4d26      	ldr	r5, [pc, #152]	; (80073f0 <UART_SetConfig+0x214>)
 8007358:	fba5 3200 	umull	r3, r2, r5, r0
 800735c:	0951      	lsrs	r1, r2, #5
 800735e:	2264      	movs	r2, #100	; 0x64
 8007360:	fb02 0211 	mls	r2, r2, r1, r0
 8007364:	00d3      	lsls	r3, r2, #3
 8007366:	3332      	adds	r3, #50	; 0x32
 8007368:	fba5 2303 	umull	r2, r3, r5, r3
 800736c:	095b      	lsrs	r3, r3, #5
 800736e:	005a      	lsls	r2, r3, #1
 8007370:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8007374:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8007378:	f003 0307 	and.w	r3, r3, #7
 800737c:	6821      	ldr	r1, [r4, #0]
 800737e:	4413      	add	r3, r2
 8007380:	608b      	str	r3, [r1, #8]
 8007382:	e030      	b.n	80073e6 <UART_SetConfig+0x20a>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007384:	f7fe fa74 	bl	8005870 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007388:	f04f 0900 	mov.w	r9, #0
 800738c:	1806      	adds	r6, r0, r0
 800738e:	eb49 0709 	adc.w	r7, r9, r9
 8007392:	eb16 0b00 	adds.w	fp, r6, r0
 8007396:	eb47 0c09 	adc.w	ip, r7, r9
 800739a:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 800739e:	ea43 735b 	orr.w	r3, r3, fp, lsr #29
 80073a2:	ea4f 02cb 	mov.w	r2, fp, lsl #3
 80073a6:	4693      	mov	fp, r2
 80073a8:	469c      	mov	ip, r3
 80073aa:	6863      	ldr	r3, [r4, #4]
 80073ac:	009a      	lsls	r2, r3, #2
 80073ae:	0f9b      	lsrs	r3, r3, #30
 80073b0:	eb10 000b 	adds.w	r0, r0, fp
 80073b4:	eb49 010c 	adc.w	r1, r9, ip
 80073b8:	f7f9 fbd0 	bl	8000b5c <__aeabi_uldivmod>
 80073bc:	4d0c      	ldr	r5, [pc, #48]	; (80073f0 <UART_SetConfig+0x214>)
 80073be:	fba5 3200 	umull	r3, r2, r5, r0
 80073c2:	0951      	lsrs	r1, r2, #5
 80073c4:	2264      	movs	r2, #100	; 0x64
 80073c6:	fb02 0211 	mls	r2, r2, r1, r0
 80073ca:	0113      	lsls	r3, r2, #4
 80073cc:	3332      	adds	r3, #50	; 0x32
 80073ce:	fba5 2303 	umull	r2, r3, r5, r3
 80073d2:	095b      	lsrs	r3, r3, #5
 80073d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80073d8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80073dc:	f003 030f 	and.w	r3, r3, #15
 80073e0:	6821      	ldr	r1, [r4, #0]
 80073e2:	4413      	add	r3, r2
 80073e4:	608b      	str	r3, [r1, #8]
}
 80073e6:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 80073ea:	bf00      	nop
 80073ec:	40011000 	.word	0x40011000
 80073f0:	51eb851f 	.word	0x51eb851f

080073f4 <HAL_UART_Init>:
  if (huart == NULL)
 80073f4:	b358      	cbz	r0, 800744e <HAL_UART_Init+0x5a>
{
 80073f6:	b510      	push	{r4, lr}
 80073f8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80073fa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80073fe:	b30b      	cbz	r3, 8007444 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007400:	2324      	movs	r3, #36	; 0x24
 8007402:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8007406:	6822      	ldr	r2, [r4, #0]
 8007408:	68d3      	ldr	r3, [r2, #12]
 800740a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800740e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8007410:	4620      	mov	r0, r4
 8007412:	f7ff fee3 	bl	80071dc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007416:	6822      	ldr	r2, [r4, #0]
 8007418:	6913      	ldr	r3, [r2, #16]
 800741a:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800741e:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007420:	6822      	ldr	r2, [r4, #0]
 8007422:	6953      	ldr	r3, [r2, #20]
 8007424:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007428:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800742a:	6822      	ldr	r2, [r4, #0]
 800742c:	68d3      	ldr	r3, [r2, #12]
 800742e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007432:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007434:	2000      	movs	r0, #0
 8007436:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007438:	2320      	movs	r3, #32
 800743a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800743e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8007442:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007444:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8007448:	f7fa fdf8 	bl	800203c <HAL_UART_MspInit>
 800744c:	e7d8      	b.n	8007400 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800744e:	2001      	movs	r0, #1
}
 8007450:	4770      	bx	lr
	...

08007454 <HAL_UART_Transmit_DMA>:
{
 8007454:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 8007456:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
 800745a:	b2e4      	uxtb	r4, r4
 800745c:	2c20      	cmp	r4, #32
 800745e:	d131      	bne.n	80074c4 <HAL_UART_Transmit_DMA+0x70>
    if ((pData == NULL) || (Size == 0U))
 8007460:	2900      	cmp	r1, #0
 8007462:	d031      	beq.n	80074c8 <HAL_UART_Transmit_DMA+0x74>
 8007464:	2a00      	cmp	r2, #0
 8007466:	d031      	beq.n	80074cc <HAL_UART_Transmit_DMA+0x78>
    __HAL_LOCK(huart);
 8007468:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800746c:	2b01      	cmp	r3, #1
 800746e:	d02f      	beq.n	80074d0 <HAL_UART_Transmit_DMA+0x7c>
 8007470:	4613      	mov	r3, r2
 8007472:	4604      	mov	r4, r0
 8007474:	2201      	movs	r2, #1
 8007476:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->pTxBuffPtr = pData;
 800747a:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800747c:	8483      	strh	r3, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 800747e:	84c3      	strh	r3, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007480:	2500      	movs	r5, #0
 8007482:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007484:	2221      	movs	r2, #33	; 0x21
 8007486:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800748a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800748c:	4811      	ldr	r0, [pc, #68]	; (80074d4 <HAL_UART_Transmit_DMA+0x80>)
 800748e:	63d0      	str	r0, [r2, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007490:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007492:	4811      	ldr	r0, [pc, #68]	; (80074d8 <HAL_UART_Transmit_DMA+0x84>)
 8007494:	6410      	str	r0, [r2, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007496:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007498:	4810      	ldr	r0, [pc, #64]	; (80074dc <HAL_UART_Transmit_DMA+0x88>)
 800749a:	64d0      	str	r0, [r2, #76]	; 0x4c
    huart->hdmatx->XferAbortCallback = NULL;
 800749c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800749e:	6515      	str	r5, [r2, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80074a0:	6822      	ldr	r2, [r4, #0]
 80074a2:	3204      	adds	r2, #4
 80074a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80074a6:	f7fb fc25 	bl	8002cf4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80074b0:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 80074b2:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80074b6:	6822      	ldr	r2, [r4, #0]
 80074b8:	6953      	ldr	r3, [r2, #20]
 80074ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074be:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 80074c0:	4628      	mov	r0, r5
 80074c2:	e000      	b.n	80074c6 <HAL_UART_Transmit_DMA+0x72>
    return HAL_BUSY;
 80074c4:	2002      	movs	r0, #2
}
 80074c6:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80074c8:	2001      	movs	r0, #1
 80074ca:	e7fc      	b.n	80074c6 <HAL_UART_Transmit_DMA+0x72>
 80074cc:	2001      	movs	r0, #1
 80074ce:	e7fa      	b.n	80074c6 <HAL_UART_Transmit_DMA+0x72>
    __HAL_LOCK(huart);
 80074d0:	2002      	movs	r0, #2
 80074d2:	e7f8      	b.n	80074c6 <HAL_UART_Transmit_DMA+0x72>
 80074d4:	08007671 	.word	0x08007671
 80074d8:	080076a3 	.word	0x080076a3
 80074dc:	080076f9 	.word	0x080076f9

080074e0 <HAL_UART_Receive_DMA>:
{
 80074e0:	b530      	push	{r4, r5, lr}
 80074e2:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 80074e4:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 80074e8:	b2e4      	uxtb	r4, r4
 80074ea:	2c20      	cmp	r4, #32
 80074ec:	d13d      	bne.n	800756a <HAL_UART_Receive_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 80074ee:	2900      	cmp	r1, #0
 80074f0:	d03e      	beq.n	8007570 <HAL_UART_Receive_DMA+0x90>
 80074f2:	2a00      	cmp	r2, #0
 80074f4:	d03e      	beq.n	8007574 <HAL_UART_Receive_DMA+0x94>
    __HAL_LOCK(huart);
 80074f6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d03c      	beq.n	8007578 <HAL_UART_Receive_DMA+0x98>
 80074fe:	4613      	mov	r3, r2
 8007500:	460a      	mov	r2, r1
 8007502:	4604      	mov	r4, r0
 8007504:	2101      	movs	r1, #1
 8007506:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->pRxBuffPtr = pData;
 800750a:	6282      	str	r2, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 800750c:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800750e:	2500      	movs	r5, #0
 8007510:	63c5      	str	r5, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007512:	2122      	movs	r1, #34	; 0x22
 8007514:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007518:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800751a:	4818      	ldr	r0, [pc, #96]	; (800757c <HAL_UART_Receive_DMA+0x9c>)
 800751c:	63c8      	str	r0, [r1, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800751e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007520:	4817      	ldr	r0, [pc, #92]	; (8007580 <HAL_UART_Receive_DMA+0xa0>)
 8007522:	6408      	str	r0, [r1, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007526:	4817      	ldr	r0, [pc, #92]	; (8007584 <HAL_UART_Receive_DMA+0xa4>)
 8007528:	64c8      	str	r0, [r1, #76]	; 0x4c
    huart->hdmarx->XferAbortCallback = NULL;
 800752a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800752c:	650d      	str	r5, [r1, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800752e:	6821      	ldr	r1, [r4, #0]
 8007530:	3104      	adds	r1, #4
 8007532:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007534:	f7fb fbde 	bl	8002cf4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007538:	9501      	str	r5, [sp, #4]
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	9201      	str	r2, [sp, #4]
 8007540:	685a      	ldr	r2, [r3, #4]
 8007542:	9201      	str	r2, [sp, #4]
 8007544:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8007546:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800754a:	68da      	ldr	r2, [r3, #12]
 800754c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007550:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007552:	6822      	ldr	r2, [r4, #0]
 8007554:	6953      	ldr	r3, [r2, #20]
 8007556:	f043 0301 	orr.w	r3, r3, #1
 800755a:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800755c:	6822      	ldr	r2, [r4, #0]
 800755e:	6953      	ldr	r3, [r2, #20]
 8007560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007564:	6153      	str	r3, [r2, #20]
    return HAL_OK;
 8007566:	4628      	mov	r0, r5
 8007568:	e000      	b.n	800756c <HAL_UART_Receive_DMA+0x8c>
    return HAL_BUSY;
 800756a:	2002      	movs	r0, #2
}
 800756c:	b003      	add	sp, #12
 800756e:	bd30      	pop	{r4, r5, pc}
      return HAL_ERROR;
 8007570:	2001      	movs	r0, #1
 8007572:	e7fb      	b.n	800756c <HAL_UART_Receive_DMA+0x8c>
 8007574:	2001      	movs	r0, #1
 8007576:	e7f9      	b.n	800756c <HAL_UART_Receive_DMA+0x8c>
    __HAL_LOCK(huart);
 8007578:	2002      	movs	r0, #2
 800757a:	e7f7      	b.n	800756c <HAL_UART_Receive_DMA+0x8c>
 800757c:	080076ad 	.word	0x080076ad
 8007580:	080076ed 	.word	0x080076ed
 8007584:	080076f9 	.word	0x080076f9

08007588 <HAL_UART_DMAPause>:
  __HAL_LOCK(huart);
 8007588:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800758c:	2b01      	cmp	r3, #1
 800758e:	d031      	beq.n	80075f4 <HAL_UART_DMAPause+0x6c>
 8007590:	2301      	movs	r3, #1
 8007592:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007596:	6801      	ldr	r1, [r0, #0]
 8007598:	694a      	ldr	r2, [r1, #20]
 800759a:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800759e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b21      	cmp	r3, #33	; 0x21
 80075a6:	d00d      	beq.n	80075c4 <HAL_UART_DMAPause+0x3c>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80075a8:	6801      	ldr	r1, [r0, #0]
 80075aa:	694a      	ldr	r2, [r1, #20]
 80075ac:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80075b0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b22      	cmp	r3, #34	; 0x22
 80075b8:	d00b      	beq.n	80075d2 <HAL_UART_DMAPause+0x4a>
  __HAL_UNLOCK(huart);
 80075ba:	2300      	movs	r3, #0
 80075bc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 80075c0:	4618      	mov	r0, r3
 80075c2:	4770      	bx	lr
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80075c4:	2a00      	cmp	r2, #0
 80075c6:	d0ef      	beq.n	80075a8 <HAL_UART_DMAPause+0x20>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075c8:	694b      	ldr	r3, [r1, #20]
 80075ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075ce:	614b      	str	r3, [r1, #20]
 80075d0:	e7ea      	b.n	80075a8 <HAL_UART_DMAPause+0x20>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80075d2:	2a00      	cmp	r2, #0
 80075d4:	d0f1      	beq.n	80075ba <HAL_UART_DMAPause+0x32>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075d6:	68cb      	ldr	r3, [r1, #12]
 80075d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075dc:	60cb      	str	r3, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075de:	6802      	ldr	r2, [r0, #0]
 80075e0:	6953      	ldr	r3, [r2, #20]
 80075e2:	f023 0301 	bic.w	r3, r3, #1
 80075e6:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075e8:	6802      	ldr	r2, [r0, #0]
 80075ea:	6953      	ldr	r3, [r2, #20]
 80075ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075f0:	6153      	str	r3, [r2, #20]
 80075f2:	e7e2      	b.n	80075ba <HAL_UART_DMAPause+0x32>
  __HAL_LOCK(huart);
 80075f4:	2002      	movs	r0, #2
}
 80075f6:	4770      	bx	lr

080075f8 <HAL_UART_DMAResume>:
  __HAL_LOCK(huart);
 80075f8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d034      	beq.n	800766a <HAL_UART_DMAResume+0x72>
 8007600:	2301      	movs	r3, #1
 8007602:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007606:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b21      	cmp	r3, #33	; 0x21
 800760e:	d009      	beq.n	8007624 <HAL_UART_DMAResume+0x2c>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007610:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b22      	cmp	r3, #34	; 0x22
 8007618:	d00a      	beq.n	8007630 <HAL_UART_DMAResume+0x38>
  __HAL_UNLOCK(huart);
 800761a:	2300      	movs	r3, #0
 800761c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8007620:	4618      	mov	r0, r3
}
 8007622:	4770      	bx	lr
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007624:	6802      	ldr	r2, [r0, #0]
 8007626:	6953      	ldr	r3, [r2, #20]
 8007628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800762c:	6153      	str	r3, [r2, #20]
 800762e:	e7ef      	b.n	8007610 <HAL_UART_DMAResume+0x18>
{
 8007630:	b082      	sub	sp, #8
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007632:	2300      	movs	r3, #0
 8007634:	9301      	str	r3, [sp, #4]
 8007636:	6803      	ldr	r3, [r0, #0]
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	9201      	str	r2, [sp, #4]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	9201      	str	r2, [sp, #4]
 8007640:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007648:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764a:	6802      	ldr	r2, [r0, #0]
 800764c:	6953      	ldr	r3, [r2, #20]
 800764e:	f043 0301 	orr.w	r3, r3, #1
 8007652:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007654:	6802      	ldr	r2, [r0, #0]
 8007656:	6953      	ldr	r3, [r2, #20]
 8007658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800765c:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(huart);
 800765e:	2300      	movs	r3, #0
 8007660:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  return HAL_OK;
 8007664:	4618      	mov	r0, r3
}
 8007666:	b002      	add	sp, #8
 8007668:	4770      	bx	lr
  __HAL_LOCK(huart);
 800766a:	2002      	movs	r0, #2
 800766c:	4770      	bx	lr

0800766e <HAL_UART_TxCpltCallback>:
}
 800766e:	4770      	bx	lr

08007670 <UART_DMATransmitCplt>:
{
 8007670:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007672:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007674:	6802      	ldr	r2, [r0, #0]
 8007676:	6812      	ldr	r2, [r2, #0]
 8007678:	f412 7f80 	tst.w	r2, #256	; 0x100
 800767c:	d10c      	bne.n	8007698 <UART_DMATransmitCplt+0x28>
    huart->TxXferCount = 0x00U;
 800767e:	2200      	movs	r2, #0
 8007680:	84da      	strh	r2, [r3, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007682:	6819      	ldr	r1, [r3, #0]
 8007684:	694a      	ldr	r2, [r1, #20]
 8007686:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800768a:	614a      	str	r2, [r1, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	68d3      	ldr	r3, [r2, #12]
 8007690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007694:	60d3      	str	r3, [r2, #12]
}
 8007696:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff ffe8 	bl	800766e <HAL_UART_TxCpltCallback>
}
 800769e:	e7fa      	b.n	8007696 <UART_DMATransmitCplt+0x26>

080076a0 <HAL_UART_TxHalfCpltCallback>:
}
 80076a0:	4770      	bx	lr

080076a2 <UART_DMATxHalfCplt>:
{
 80076a2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80076a4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80076a6:	f7ff fffb 	bl	80076a0 <HAL_UART_TxHalfCpltCallback>
}
 80076aa:	bd08      	pop	{r3, pc}

080076ac <UART_DMAReceiveCplt>:
{
 80076ac:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80076b0:	6802      	ldr	r2, [r0, #0]
 80076b2:	6812      	ldr	r2, [r2, #0]
 80076b4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80076b8:	d113      	bne.n	80076e2 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 80076ba:	2200      	movs	r2, #0
 80076bc:	85da      	strh	r2, [r3, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076be:	6819      	ldr	r1, [r3, #0]
 80076c0:	68ca      	ldr	r2, [r1, #12]
 80076c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076c6:	60ca      	str	r2, [r1, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c8:	6819      	ldr	r1, [r3, #0]
 80076ca:	694a      	ldr	r2, [r1, #20]
 80076cc:	f022 0201 	bic.w	r2, r2, #1
 80076d0:	614a      	str	r2, [r1, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076d2:	6819      	ldr	r1, [r3, #0]
 80076d4:	694a      	ldr	r2, [r1, #20]
 80076d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076da:	614a      	str	r2, [r1, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80076dc:	2220      	movs	r2, #32
 80076de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 80076e2:	4618      	mov	r0, r3
 80076e4:	f003 fda6 	bl	800b234 <HAL_UART_RxCpltCallback>
}
 80076e8:	bd08      	pop	{r3, pc}

080076ea <HAL_UART_RxHalfCpltCallback>:
}
 80076ea:	4770      	bx	lr

080076ec <UART_DMARxHalfCplt>:
{
 80076ec:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 80076ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80076f0:	f7ff fffb 	bl	80076ea <HAL_UART_RxHalfCpltCallback>
}
 80076f4:	bd08      	pop	{r3, pc}

080076f6 <HAL_UART_ErrorCallback>:
}
 80076f6:	4770      	bx	lr

080076f8 <UART_DMAError>:
{
 80076f8:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076fa:	6b84      	ldr	r4, [r0, #56]	; 0x38
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007700:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b21      	cmp	r3, #33	; 0x21
 8007708:	d010      	beq.n	800772c <UART_DMAError+0x34>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	695a      	ldr	r2, [r3, #20]
 800770e:	f002 0240 	and.w	r2, r2, #64	; 0x40
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007712:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b22      	cmp	r3, #34	; 0x22
 800771a:	d011      	beq.n	8007740 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800771c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800771e:	f043 0310 	orr.w	r3, r3, #16
 8007722:	63e3      	str	r3, [r4, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8007724:	4620      	mov	r0, r4
 8007726:	f7ff ffe6 	bl	80076f6 <HAL_UART_ErrorCallback>
}
 800772a:	bd10      	pop	{r4, pc}
 800772c:	f002 0280 	and.w	r2, r2, #128	; 0x80
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007730:	2a00      	cmp	r2, #0
 8007732:	d0ea      	beq.n	800770a <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8007734:	2300      	movs	r3, #0
 8007736:	84e3      	strh	r3, [r4, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007738:	4620      	mov	r0, r4
 800773a:	f7ff fd37 	bl	80071ac <UART_EndTxTransfer>
 800773e:	e7e4      	b.n	800770a <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007740:	2a00      	cmp	r2, #0
 8007742:	d0eb      	beq.n	800771c <UART_DMAError+0x24>
    huart->RxXferCount = 0x00U;
 8007744:	2300      	movs	r3, #0
 8007746:	85e3      	strh	r3, [r4, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007748:	4620      	mov	r0, r4
 800774a:	f7ff fd38 	bl	80071be <UART_EndRxTransfer>
 800774e:	e7e5      	b.n	800771c <UART_DMAError+0x24>

08007750 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007750:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8007752:	680b      	ldr	r3, [r1, #0]
 8007754:	2b01      	cmp	r3, #1
 8007756:	d01a      	beq.n	800778e <FMC_SDRAM_Init+0x3e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8007758:	6802      	ldr	r2, [r0, #0]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800775a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 800775e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007762:	684b      	ldr	r3, [r1, #4]
                                               Init->RowBitsNumber      |\
 8007764:	688c      	ldr	r4, [r1, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007766:	4323      	orrs	r3, r4
                                               Init->MemoryDataWidth    |\
 8007768:	68cc      	ldr	r4, [r1, #12]
                                               Init->RowBitsNumber      |\
 800776a:	4323      	orrs	r3, r4
                                               Init->InternalBankNumber |\
 800776c:	690c      	ldr	r4, [r1, #16]
                                               Init->MemoryDataWidth    |\
 800776e:	4323      	orrs	r3, r4
                                               Init->CASLatency         |\
 8007770:	694c      	ldr	r4, [r1, #20]
                                               Init->InternalBankNumber |\
 8007772:	4323      	orrs	r3, r4
                                               Init->WriteProtection    |\
 8007774:	698c      	ldr	r4, [r1, #24]
                                               Init->CASLatency         |\
 8007776:	4323      	orrs	r3, r4
                                               Init->SDClockPeriod      |\
 8007778:	69cc      	ldr	r4, [r1, #28]
                                               Init->WriteProtection    |\
 800777a:	4323      	orrs	r3, r4
                                               Init->ReadBurst          |\
 800777c:	6a0c      	ldr	r4, [r1, #32]
                                               Init->SDClockPeriod      |\
 800777e:	4323      	orrs	r3, r4
                                               Init->ReadPipeDelay
 8007780:	6a49      	ldr	r1, [r1, #36]	; 0x24
                                               Init->ReadBurst          |\
 8007782:	430b      	orrs	r3, r1
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007784:	4313      	orrs	r3, r2
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007786:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 8007788:	2000      	movs	r0, #0
 800778a:	bc30      	pop	{r4, r5}
 800778c:	4770      	bx	lr
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800778e:	6802      	ldr	r2, [r0, #0]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007790:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007794:	69cb      	ldr	r3, [r1, #28]
                        Init->ReadBurst          |\
 8007796:	6a0c      	ldr	r4, [r1, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007798:	431c      	orrs	r4, r3
                        Init->ReadPipeDelay);  
 800779a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
                        Init->ReadBurst          |\
 800779c:	431c      	orrs	r4, r3
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800779e:	4314      	orrs	r4, r2
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80077a0:	6842      	ldr	r2, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80077a2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80077a6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80077aa:	684b      	ldr	r3, [r1, #4]
                       Init->RowBitsNumber      |\
 80077ac:	688d      	ldr	r5, [r1, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80077ae:	432b      	orrs	r3, r5
                       Init->MemoryDataWidth    |\
 80077b0:	68cd      	ldr	r5, [r1, #12]
                       Init->RowBitsNumber      |\
 80077b2:	432b      	orrs	r3, r5
                       Init->InternalBankNumber |\
 80077b4:	690d      	ldr	r5, [r1, #16]
                       Init->MemoryDataWidth    |\
 80077b6:	432b      	orrs	r3, r5
                       Init->CASLatency         |\
 80077b8:	694d      	ldr	r5, [r1, #20]
                       Init->InternalBankNumber |\
 80077ba:	432b      	orrs	r3, r5
                       Init->WriteProtection);
 80077bc:	6989      	ldr	r1, [r1, #24]
                       Init->CASLatency         |\
 80077be:	430b      	orrs	r3, r1
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80077c0:	4313      	orrs	r3, r2
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80077c2:	6004      	str	r4, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80077c4:	6043      	str	r3, [r0, #4]
 80077c6:	e7df      	b.n	8007788 <FMC_SDRAM_Init+0x38>

080077c8 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80077c8:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80077ca:	2a01      	cmp	r2, #1
 80077cc:	d021      	beq.n	8007812 <FMC_SDRAM_Timing_Init+0x4a>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80077ce:	6882      	ldr	r2, [r0, #8]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80077d0:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80077d4:	680b      	ldr	r3, [r1, #0]
 80077d6:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80077d8:	684c      	ldr	r4, [r1, #4]
 80077da:	3c01      	subs	r4, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 80077dc:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80077e0:	688c      	ldr	r4, [r1, #8]
 80077e2:	3c01      	subs	r4, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 80077e4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80077e8:	68cc      	ldr	r4, [r1, #12]
 80077ea:	3c01      	subs	r4, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 80077ec:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80077f0:	690c      	ldr	r4, [r1, #16]
 80077f2:	3c01      	subs	r4, #1
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 80077f4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
                       (((Timing->RPDelay)-1U) << 20U)             |\
 80077f8:	694c      	ldr	r4, [r1, #20]
 80077fa:	3c01      	subs	r4, #1
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 80077fc:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                       (((Timing->RCDDelay)-1U) << 24U));
 8007800:	6989      	ldr	r1, [r1, #24]
 8007802:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007804:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007808:	4313      	orrs	r3, r2
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800780a:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 800780c:	2000      	movs	r0, #0
 800780e:	bc30      	pop	{r4, r5}
 8007810:	4770      	bx	lr
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007812:	6884      	ldr	r4, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8007814:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
 8007818:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 800781c:	68ca      	ldr	r2, [r1, #12]
 800781e:	1e55      	subs	r5, r2, #1
                        (((Timing->RPDelay)-1U) << 20U)); 
 8007820:	694b      	ldr	r3, [r1, #20]
 8007822:	1e5a      	subs	r2, r3, #1
 8007824:	0512      	lsls	r2, r2, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007826:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 800782a:	4322      	orrs	r2, r4
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800782c:	68c4      	ldr	r4, [r0, #12]
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800782e:	f004 4470 	and.w	r4, r4, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007832:	680b      	ldr	r3, [r1, #0]
 8007834:	3b01      	subs	r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007836:	684d      	ldr	r5, [r1, #4]
 8007838:	3d01      	subs	r5, #1
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 800783a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800783e:	688d      	ldr	r5, [r1, #8]
 8007840:	3d01      	subs	r5, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8007842:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8007846:	690d      	ldr	r5, [r1, #16]
 8007848:	3d01      	subs	r5, #1
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800784a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RCDDelay)-1U) << 24U)));   
 800784e:	6989      	ldr	r1, [r1, #24]
 8007850:	3901      	subs	r1, #1
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007852:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007856:	4323      	orrs	r3, r4
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007858:	6082      	str	r2, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800785a:	60c3      	str	r3, [r0, #12]
 800785c:	e7d6      	b.n	800780c <FMC_SDRAM_Timing_Init+0x44>

0800785e <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800785e:	b570      	push	{r4, r5, r6, lr}
 8007860:	b082      	sub	sp, #8
 8007862:	4604      	mov	r4, r0
 8007864:	4615      	mov	r5, r2
  __IO uint32_t tmpr = 0U;
 8007866:	2300      	movs	r3, #0
 8007868:	9301      	str	r3, [sp, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800786a:	680b      	ldr	r3, [r1, #0]
                    (Command->CommandTarget)                |\
 800786c:	684a      	ldr	r2, [r1, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800786e:	4313      	orrs	r3, r2
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8007870:	688a      	ldr	r2, [r1, #8]
 8007872:	3a01      	subs	r2, #1
                    (Command->CommandTarget)                |\
 8007874:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
                    ((Command->ModeRegisterDefinition) << 9U)
 8007878:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800787a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 800787e:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8007880:	9b01      	ldr	r3, [sp, #4]
 8007882:	6103      	str	r3, [r0, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007884:	f7fb f8c4 	bl	8002a10 <HAL_GetTick>
 8007888:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800788a:	69a3      	ldr	r3, [r4, #24]
 800788c:	f013 0f20 	tst.w	r3, #32
 8007890:	d00a      	beq.n	80078a8 <FMC_SDRAM_SendCommand+0x4a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007892:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8007896:	d0f8      	beq.n	800788a <FMC_SDRAM_SendCommand+0x2c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007898:	b14d      	cbz	r5, 80078ae <FMC_SDRAM_SendCommand+0x50>
 800789a:	f7fb f8b9 	bl	8002a10 <HAL_GetTick>
 800789e:	1b80      	subs	r0, r0, r6
 80078a0:	42a8      	cmp	r0, r5
 80078a2:	d9f2      	bls.n	800788a <FMC_SDRAM_SendCommand+0x2c>
      {
        return HAL_TIMEOUT;
 80078a4:	2003      	movs	r0, #3
 80078a6:	e000      	b.n	80078aa <FMC_SDRAM_SendCommand+0x4c>
      }
    }
  }

  return HAL_OK;
 80078a8:	2000      	movs	r0, #0
}
 80078aa:	b002      	add	sp, #8
 80078ac:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 80078ae:	2003      	movs	r0, #3
 80078b0:	e7fb      	b.n	80078aa <FMC_SDRAM_SendCommand+0x4c>

080078b2 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 80078b2:	6943      	ldr	r3, [r0, #20]
 80078b4:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80078b8:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 80078ba:	2000      	movs	r0, #0
 80078bc:	4770      	bx	lr
	...

080078c0 <SDMMC_GetCmdError>:
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078c0:	4b0b      	ldr	r3, [pc, #44]	; (80078f0 <SDMMC_GetCmdError+0x30>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a0b      	ldr	r2, [pc, #44]	; (80078f4 <SDMMC_GetCmdError+0x34>)
 80078c6:	fba2 2303 	umull	r2, r3, r2, r3
 80078ca:	0a5a      	lsrs	r2, r3, #9
 80078cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80078d0:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80078d4:	1e5a      	subs	r2, r3, #1
 80078d6:	b143      	cbz	r3, 80078ea <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80078d8:	6b41      	ldr	r1, [r0, #52]	; 0x34
    if (count-- == 0U)
 80078da:	4613      	mov	r3, r2
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80078dc:	f011 0f80 	tst.w	r1, #128	; 0x80
 80078e0:	d0f8      	beq.n	80078d4 <SDMMC_GetCmdError+0x14>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80078e2:	23c5      	movs	r3, #197	; 0xc5
 80078e4:	6383      	str	r3, [r0, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80078e6:	2000      	movs	r0, #0
 80078e8:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80078ea:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80078ee:	4770      	bx	lr
 80078f0:	2000001c 	.word	0x2000001c
 80078f4:	10624dd3 	.word	0x10624dd3

080078f8 <SDMMC_GetCmdResp2>:
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80078f8:	4b15      	ldr	r3, [pc, #84]	; (8007950 <SDMMC_GetCmdResp2+0x58>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a15      	ldr	r2, [pc, #84]	; (8007954 <SDMMC_GetCmdResp2+0x5c>)
 80078fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007902:	0a5a      	lsrs	r2, r3, #9
 8007904:	f241 3388 	movw	r3, #5000	; 0x1388
 8007908:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 800790c:	1e5a      	subs	r2, r3, #1
 800790e:	b1db      	cbz	r3, 8007948 <SDMMC_GetCmdResp2+0x50>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8007910:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007912:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007914:	f011 0f45 	tst.w	r1, #69	; 0x45
 8007918:	d0f8      	beq.n	800790c <SDMMC_GetCmdResp2+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800791a:	f411 6f00 	tst.w	r1, #2048	; 0x800
 800791e:	d1f5      	bne.n	800790c <SDMMC_GetCmdResp2+0x14>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007920:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007922:	f013 0f04 	tst.w	r3, #4
 8007926:	d107      	bne.n	8007938 <SDMMC_GetCmdResp2+0x40>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007928:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800792a:	f013 0f01 	tst.w	r3, #1
 800792e:	d107      	bne.n	8007940 <SDMMC_GetCmdResp2+0x48>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007930:	23c5      	movs	r3, #197	; 0xc5
 8007932:	6383      	str	r3, [r0, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007934:	2000      	movs	r0, #0
 8007936:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007938:	2304      	movs	r3, #4
 800793a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800793c:	4618      	mov	r0, r3
 800793e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007940:	2301      	movs	r3, #1
 8007942:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007944:	4618      	mov	r0, r3
 8007946:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007948:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	2000001c 	.word	0x2000001c
 8007954:	10624dd3 	.word	0x10624dd3

08007958 <SDMMC_GetCmdResp3>:
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007958:	4b11      	ldr	r3, [pc, #68]	; (80079a0 <SDMMC_GetCmdResp3+0x48>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a11      	ldr	r2, [pc, #68]	; (80079a4 <SDMMC_GetCmdResp3+0x4c>)
 800795e:	fba2 2303 	umull	r2, r3, r2, r3
 8007962:	0a5a      	lsrs	r2, r3, #9
 8007964:	f241 3388 	movw	r3, #5000	; 0x1388
 8007968:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 800796c:	1e5a      	subs	r2, r3, #1
 800796e:	b19b      	cbz	r3, 8007998 <SDMMC_GetCmdResp3+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 8007970:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007972:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007974:	f011 0f45 	tst.w	r1, #69	; 0x45
 8007978:	d0f8      	beq.n	800796c <SDMMC_GetCmdResp3+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800797a:	f411 6f00 	tst.w	r1, #2048	; 0x800
 800797e:	d1f5      	bne.n	800796c <SDMMC_GetCmdResp3+0x14>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007980:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007982:	f013 0f04 	tst.w	r3, #4
 8007986:	d103      	bne.n	8007990 <SDMMC_GetCmdResp3+0x38>
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007988:	23c5      	movs	r3, #197	; 0xc5
 800798a:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800798c:	2000      	movs	r0, #0
 800798e:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007990:	2304      	movs	r3, #4
 8007992:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007994:	4618      	mov	r0, r3
 8007996:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007998:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	2000001c 	.word	0x2000001c
 80079a4:	10624dd3 	.word	0x10624dd3

080079a8 <SDMMC_GetCmdResp7>:
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80079a8:	4b18      	ldr	r3, [pc, #96]	; (8007a0c <SDMMC_GetCmdResp7+0x64>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a18      	ldr	r2, [pc, #96]	; (8007a10 <SDMMC_GetCmdResp7+0x68>)
 80079ae:	fba2 2303 	umull	r2, r3, r2, r3
 80079b2:	0a5a      	lsrs	r2, r3, #9
 80079b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80079b8:	fb03 f302 	mul.w	r3, r3, r2
  
  do
  {
    if (count-- == 0U)
 80079bc:	1e5a      	subs	r2, r3, #1
 80079be:	b1fb      	cbz	r3, 8007a00 <SDMMC_GetCmdResp7+0x58>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDIOx->STA;
 80079c0:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80079c2:	4613      	mov	r3, r2
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80079c4:	f011 0f45 	tst.w	r1, #69	; 0x45
 80079c8:	d0f8      	beq.n	80079bc <SDMMC_GetCmdResp7+0x14>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079ca:	f411 6f00 	tst.w	r1, #2048	; 0x800
 80079ce:	d1f5      	bne.n	80079bc <SDMMC_GetCmdResp7+0x14>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80079d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80079d2:	f013 0f04 	tst.w	r3, #4
 80079d6:	d10b      	bne.n	80079f0 <SDMMC_GetCmdResp7+0x48>
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80079d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80079da:	f013 0f01 	tst.w	r3, #1
 80079de:	d10b      	bne.n	80079f8 <SDMMC_GetCmdResp7+0x50>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80079e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80079e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80079e6:	d00e      	beq.n	8007a06 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80079e8:	2340      	movs	r3, #64	; 0x40
 80079ea:	6383      	str	r3, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80079ec:	2000      	movs	r0, #0
 80079ee:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80079f0:	2304      	movs	r3, #4
 80079f2:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079f4:	4618      	mov	r0, r3
 80079f6:	4770      	bx	lr
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80079f8:	2301      	movs	r3, #1
 80079fa:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079fc:	4618      	mov	r0, r3
 80079fe:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007a00:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007a04:	4770      	bx	lr
  return SDMMC_ERROR_NONE;
 8007a06:	2000      	movs	r0, #0
  
}
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	2000001c 	.word	0x2000001c
 8007a10:	10624dd3 	.word	0x10624dd3

08007a14 <SDIO_Init>:
{
 8007a14:	b084      	sub	sp, #16
 8007a16:	b410      	push	{r4}
 8007a18:	ac02      	add	r4, sp, #8
 8007a1a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 8007a1e:	460b      	mov	r3, r1
 8007a20:	9a03      	ldr	r2, [sp, #12]
 8007a22:	4313      	orrs	r3, r2
             Init.ClockPowerSave      |\
 8007a24:	9a04      	ldr	r2, [sp, #16]
             Init.ClockBypass         |\
 8007a26:	4313      	orrs	r3, r2
             Init.BusWide             |\
 8007a28:	9a05      	ldr	r2, [sp, #20]
             Init.ClockPowerSave      |\
 8007a2a:	4313      	orrs	r3, r2
             Init.HardwareFlowControl |\
 8007a2c:	9a06      	ldr	r2, [sp, #24]
             Init.BusWide             |\
 8007a2e:	4313      	orrs	r3, r2
             Init.ClockDiv
 8007a30:	9a07      	ldr	r2, [sp, #28]
             Init.HardwareFlowControl |\
 8007a32:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007a34:	6842      	ldr	r2, [r0, #4]
 8007a36:	f422 42fd 	bic.w	r2, r2, #32384	; 0x7e80
 8007a3a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	6043      	str	r3, [r0, #4]
}
 8007a42:	2000      	movs	r0, #0
 8007a44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a48:	b004      	add	sp, #16
 8007a4a:	4770      	bx	lr

08007a4c <SDIO_ReadFIFO>:
  return (SDIOx->FIFO);
 8007a4c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8007a50:	4770      	bx	lr

08007a52 <SDIO_PowerState_ON>:
{  
 8007a52:	b508      	push	{r3, lr}
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007a54:	2303      	movs	r3, #3
 8007a56:	6003      	str	r3, [r0, #0]
  HAL_Delay(2);
 8007a58:	2002      	movs	r0, #2
 8007a5a:	f7fa ffdf 	bl	8002a1c <HAL_Delay>
}
 8007a5e:	2000      	movs	r0, #0
 8007a60:	bd08      	pop	{r3, pc}

08007a62 <SDIO_GetPowerState>:
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007a62:	6800      	ldr	r0, [r0, #0]
}
 8007a64:	f000 0003 	and.w	r0, r0, #3
 8007a68:	4770      	bx	lr

08007a6a <SDIO_SendCommand>:
  SDIOx->ARG = Command->Argument;
 8007a6a:	680b      	ldr	r3, [r1, #0]
 8007a6c:	6083      	str	r3, [r0, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007a6e:	684b      	ldr	r3, [r1, #4]
                       Command->Response         |\
 8007a70:	688a      	ldr	r2, [r1, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007a72:	4313      	orrs	r3, r2
                       Command->WaitForInterrupt |\
 8007a74:	68ca      	ldr	r2, [r1, #12]
                       Command->Response         |\
 8007a76:	4313      	orrs	r3, r2
                       Command->CPSM);
 8007a78:	690a      	ldr	r2, [r1, #16]
                       Command->WaitForInterrupt |\
 8007a7a:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007a7c:	68c2      	ldr	r2, [r0, #12]
 8007a7e:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8007a82:	f022 020f 	bic.w	r2, r2, #15
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60c3      	str	r3, [r0, #12]
}
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	4770      	bx	lr

08007a8e <SDIO_GetCommandResponse>:
  return (uint8_t)(SDIOx->RESPCMD);
 8007a8e:	6900      	ldr	r0, [r0, #16]
}
 8007a90:	b2c0      	uxtb	r0, r0
 8007a92:	4770      	bx	lr

08007a94 <SDIO_GetResponse>:
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007a94:	3014      	adds	r0, #20
  return (*(__IO uint32_t *) tmp);
 8007a96:	5840      	ldr	r0, [r0, r1]
}  
 8007a98:	4770      	bx	lr
	...

08007a9c <SDMMC_GetCmdResp1>:
{
 8007a9c:	b538      	push	{r3, r4, r5, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007a9e:	4b52      	ldr	r3, [pc, #328]	; (8007be8 <SDMMC_GetCmdResp1+0x14c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4c52      	ldr	r4, [pc, #328]	; (8007bec <SDMMC_GetCmdResp1+0x150>)
 8007aa4:	fba4 4303 	umull	r4, r3, r4, r3
 8007aa8:	0a5b      	lsrs	r3, r3, #9
 8007aaa:	fb02 f203 	mul.w	r2, r2, r3
    if (count-- == 0U)
 8007aae:	1e53      	subs	r3, r2, #1
 8007ab0:	2a00      	cmp	r2, #0
 8007ab2:	d060      	beq.n	8007b76 <SDMMC_GetCmdResp1+0xda>
    sta_reg = SDIOx->STA;
 8007ab4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007ab6:	461a      	mov	r2, r3
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007ab8:	f014 0f45 	tst.w	r4, #69	; 0x45
 8007abc:	d0f7      	beq.n	8007aae <SDMMC_GetCmdResp1+0x12>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007abe:	f414 6f00 	tst.w	r4, #2048	; 0x800
 8007ac2:	d1f4      	bne.n	8007aae <SDMMC_GetCmdResp1+0x12>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ac4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007ac6:	f013 0f04 	tst.w	r3, #4
 8007aca:	d107      	bne.n	8007adc <SDMMC_GetCmdResp1+0x40>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007acc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007ace:	f013 0f01 	tst.w	r3, #1
 8007ad2:	d007      	beq.n	8007ae4 <SDMMC_GetCmdResp1+0x48>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ad8:	4618      	mov	r0, r3
 8007ada:	e04e      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007adc:	2304      	movs	r3, #4
 8007ade:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	e04a      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
 8007ae4:	460d      	mov	r5, r1
 8007ae6:	4604      	mov	r4, r0
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007ae8:	23c5      	movs	r3, #197	; 0xc5
 8007aea:	6383      	str	r3, [r0, #56]	; 0x38
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007aec:	f7ff ffcf 	bl	8007a8e <SDIO_GetCommandResponse>
 8007af0:	42a8      	cmp	r0, r5
 8007af2:	d001      	beq.n	8007af8 <SDMMC_GetCmdResp1+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007af4:	2001      	movs	r0, #1
 8007af6:	e040      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007af8:	2100      	movs	r1, #0
 8007afa:	4620      	mov	r0, r4
 8007afc:	f7ff ffca 	bl	8007a94 <SDIO_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007b00:	4b3b      	ldr	r3, [pc, #236]	; (8007bf0 <SDMMC_GetCmdResp1+0x154>)
 8007b02:	4003      	ands	r3, r0
 8007b04:	b3d3      	cbz	r3, 8007b7c <SDMMC_GetCmdResp1+0xe0>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007b06:	2800      	cmp	r0, #0
 8007b08:	db3a      	blt.n	8007b80 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007b0a:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007b0e:	d13a      	bne.n	8007b86 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007b10:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8007b14:	d139      	bne.n	8007b8a <SDMMC_GetCmdResp1+0xee>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007b16:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8007b1a:	d138      	bne.n	8007b8e <SDMMC_GetCmdResp1+0xf2>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007b1c:	f010 6f00 	tst.w	r0, #134217728	; 0x8000000
 8007b20:	d138      	bne.n	8007b94 <SDMMC_GetCmdResp1+0xf8>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007b22:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8007b26:	d138      	bne.n	8007b9a <SDMMC_GetCmdResp1+0xfe>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007b28:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8007b2c:	d138      	bne.n	8007ba0 <SDMMC_GetCmdResp1+0x104>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007b2e:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8007b32:	d138      	bne.n	8007ba6 <SDMMC_GetCmdResp1+0x10a>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007b34:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 8007b38:	d138      	bne.n	8007bac <SDMMC_GetCmdResp1+0x110>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007b3a:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8007b3e:	d138      	bne.n	8007bb2 <SDMMC_GetCmdResp1+0x116>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007b40:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8007b44:	d138      	bne.n	8007bb8 <SDMMC_GetCmdResp1+0x11c>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007b46:	f410 2f80 	tst.w	r0, #262144	; 0x40000
 8007b4a:	d138      	bne.n	8007bbe <SDMMC_GetCmdResp1+0x122>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007b4c:	f410 3f00 	tst.w	r0, #131072	; 0x20000
 8007b50:	d138      	bne.n	8007bc4 <SDMMC_GetCmdResp1+0x128>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007b52:	f410 3f80 	tst.w	r0, #65536	; 0x10000
 8007b56:	d138      	bne.n	8007bca <SDMMC_GetCmdResp1+0x12e>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007b58:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007b5c:	d138      	bne.n	8007bd0 <SDMMC_GetCmdResp1+0x134>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007b5e:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8007b62:	d138      	bne.n	8007bd6 <SDMMC_GetCmdResp1+0x13a>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007b64:	f410 5f00 	tst.w	r0, #8192	; 0x2000
 8007b68:	d138      	bne.n	8007bdc <SDMMC_GetCmdResp1+0x140>
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007b6a:	f010 0f08 	tst.w	r0, #8
 8007b6e:	d038      	beq.n	8007be2 <SDMMC_GetCmdResp1+0x146>
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007b70:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007b74:	e001      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
      return SDMMC_ERROR_TIMEOUT;
 8007b76:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
    return SDMMC_ERROR_NONE;
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	e7fc      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007b80:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8007b84:	e7f9      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007b86:	2040      	movs	r0, #64	; 0x40
 8007b88:	e7f7      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007b8a:	2080      	movs	r0, #128	; 0x80
 8007b8c:	e7f5      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007b8e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007b92:	e7f2      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007b94:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007b98:	e7ef      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007b9a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007b9e:	e7ec      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007ba0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007ba4:	e7e9      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007ba6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007baa:	e7e6      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007bac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007bb0:	e7e3      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007bb2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007bb6:	e7e0      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CC_ERR;
 8007bb8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007bbc:	e7dd      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007bbe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007bc2:	e7da      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007bc4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007bc8:	e7d7      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007bca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007bce:	e7d4      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007bd0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007bd4:	e7d1      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007bd6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8007bda:	e7ce      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_ERASE_RESET;
 8007bdc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8007be0:	e7cb      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007be2:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007be6:	e7c8      	b.n	8007b7a <SDMMC_GetCmdResp1+0xde>
 8007be8:	2000001c 	.word	0x2000001c
 8007bec:	10624dd3 	.word	0x10624dd3
 8007bf0:	fdffe008 	.word	0xfdffe008

08007bf4 <SDMMC_GetCmdResp6>:
{
 8007bf4:	b570      	push	{r4, r5, r6, lr}
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007bf6:	4b26      	ldr	r3, [pc, #152]	; (8007c90 <SDMMC_GetCmdResp6+0x9c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4c26      	ldr	r4, [pc, #152]	; (8007c94 <SDMMC_GetCmdResp6+0xa0>)
 8007bfc:	fba4 4303 	umull	r4, r3, r4, r3
 8007c00:	0a5c      	lsrs	r4, r3, #9
 8007c02:	f241 3388 	movw	r3, #5000	; 0x1388
 8007c06:	fb03 f304 	mul.w	r3, r3, r4
    if (count-- == 0U)
 8007c0a:	1e5c      	subs	r4, r3, #1
 8007c0c:	b3b3      	cbz	r3, 8007c7c <SDMMC_GetCmdResp6+0x88>
    sta_reg = SDIOx->STA;
 8007c0e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8007c10:	4623      	mov	r3, r4
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007c12:	f015 0f45 	tst.w	r5, #69	; 0x45
 8007c16:	d0f8      	beq.n	8007c0a <SDMMC_GetCmdResp6+0x16>
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007c18:	f415 6f00 	tst.w	r5, #2048	; 0x800
 8007c1c:	d1f5      	bne.n	8007c0a <SDMMC_GetCmdResp6+0x16>
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007c1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007c20:	f013 0f04 	tst.w	r3, #4
 8007c24:	d107      	bne.n	8007c36 <SDMMC_GetCmdResp6+0x42>
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007c26:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007c28:	f013 0f01 	tst.w	r3, #1
 8007c2c:	d007      	beq.n	8007c3e <SDMMC_GetCmdResp6+0x4a>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007c2e:	2301      	movs	r3, #1
 8007c30:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c32:	4618      	mov	r0, r3
 8007c34:	e024      	b.n	8007c80 <SDMMC_GetCmdResp6+0x8c>
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007c36:	2304      	movs	r3, #4
 8007c38:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	e020      	b.n	8007c80 <SDMMC_GetCmdResp6+0x8c>
 8007c3e:	4616      	mov	r6, r2
 8007c40:	460d      	mov	r5, r1
 8007c42:	4604      	mov	r4, r0
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007c44:	f7ff ff23 	bl	8007a8e <SDIO_GetCommandResponse>
 8007c48:	42a8      	cmp	r0, r5
 8007c4a:	d001      	beq.n	8007c50 <SDMMC_GetCmdResp6+0x5c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007c4c:	2001      	movs	r0, #1
 8007c4e:	e017      	b.n	8007c80 <SDMMC_GetCmdResp6+0x8c>
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007c50:	23c5      	movs	r3, #197	; 0xc5
 8007c52:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007c54:	2100      	movs	r1, #0
 8007c56:	4620      	mov	r0, r4
 8007c58:	f7ff ff1c 	bl	8007a94 <SDIO_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007c5c:	f410 4f60 	tst.w	r0, #57344	; 0xe000
 8007c60:	d008      	beq.n	8007c74 <SDMMC_GetCmdResp6+0x80>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007c62:	f410 4f80 	tst.w	r0, #16384	; 0x4000
 8007c66:	d10c      	bne.n	8007c82 <SDMMC_GetCmdResp6+0x8e>
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007c68:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007c6c:	d00c      	beq.n	8007c88 <SDMMC_GetCmdResp6+0x94>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007c6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007c72:	e005      	b.n	8007c80 <SDMMC_GetCmdResp6+0x8c>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007c74:	0c00      	lsrs	r0, r0, #16
 8007c76:	8030      	strh	r0, [r6, #0]
    return SDMMC_ERROR_NONE;
 8007c78:	2000      	movs	r0, #0
 8007c7a:	e001      	b.n	8007c80 <SDMMC_GetCmdResp6+0x8c>
      return SDMMC_ERROR_TIMEOUT;
 8007c7c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007c80:	bd70      	pop	{r4, r5, r6, pc}
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007c82:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007c86:	e7fb      	b.n	8007c80 <SDMMC_GetCmdResp6+0x8c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007c88:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007c8c:	e7f8      	b.n	8007c80 <SDMMC_GetCmdResp6+0x8c>
 8007c8e:	bf00      	nop
 8007c90:	2000001c 	.word	0x2000001c
 8007c94:	10624dd3 	.word	0x10624dd3

08007c98 <SDIO_ConfigData>:
  SDIOx->DTIMER = Data->DataTimeOut;
 8007c98:	680b      	ldr	r3, [r1, #0]
 8007c9a:	6243      	str	r3, [r0, #36]	; 0x24
  SDIOx->DLEN = Data->DataLength;
 8007c9c:	684b      	ldr	r3, [r1, #4]
 8007c9e:	6283      	str	r3, [r0, #40]	; 0x28
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007ca0:	688b      	ldr	r3, [r1, #8]
                       Data->TransferDir   |\
 8007ca2:	68ca      	ldr	r2, [r1, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007ca4:	4313      	orrs	r3, r2
                       Data->TransferMode  |\
 8007ca6:	690a      	ldr	r2, [r1, #16]
                       Data->TransferDir   |\
 8007ca8:	4313      	orrs	r3, r2
                       Data->DPSM);
 8007caa:	694a      	ldr	r2, [r1, #20]
                       Data->TransferMode  |\
 8007cac:	4313      	orrs	r3, r2
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007cae:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007cb0:	f022 02f7 	bic.w	r2, r2, #247	; 0xf7
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8007cb8:	2000      	movs	r0, #0
 8007cba:	4770      	bx	lr

08007cbc <SDMMC_CmdBlockLength>:
{
 8007cbc:	b530      	push	{r4, r5, lr}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007cc2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007cc4:	2410      	movs	r4, #16
 8007cc6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007cc8:	2340      	movs	r3, #64	; 0x40
 8007cca:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cd4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007cd6:	a901      	add	r1, sp, #4
 8007cd8:	f7ff fec7 	bl	8007a6a <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ce0:	4621      	mov	r1, r4
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f7ff feda 	bl	8007a9c <SDMMC_GetCmdResp1>
}
 8007ce8:	b007      	add	sp, #28
 8007cea:	bd30      	pop	{r4, r5, pc}

08007cec <SDMMC_CmdReadSingleBlock>:
{
 8007cec:	b530      	push	{r4, r5, lr}
 8007cee:	b087      	sub	sp, #28
 8007cf0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007cf2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007cf4:	2411      	movs	r4, #17
 8007cf6:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007cf8:	2340      	movs	r3, #64	; 0x40
 8007cfa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d04:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d06:	a901      	add	r1, sp, #4
 8007d08:	f7ff feaf 	bl	8007a6a <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d10:	4621      	mov	r1, r4
 8007d12:	4628      	mov	r0, r5
 8007d14:	f7ff fec2 	bl	8007a9c <SDMMC_GetCmdResp1>
}
 8007d18:	b007      	add	sp, #28
 8007d1a:	bd30      	pop	{r4, r5, pc}

08007d1c <SDMMC_CmdReadMultiBlock>:
{
 8007d1c:	b530      	push	{r4, r5, lr}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007d22:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007d24:	2412      	movs	r4, #18
 8007d26:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d28:	2340      	movs	r3, #64	; 0x40
 8007d2a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d34:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d36:	a901      	add	r1, sp, #4
 8007d38:	f7ff fe97 	bl	8007a6a <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d40:	4621      	mov	r1, r4
 8007d42:	4628      	mov	r0, r5
 8007d44:	f7ff feaa 	bl	8007a9c <SDMMC_GetCmdResp1>
}
 8007d48:	b007      	add	sp, #28
 8007d4a:	bd30      	pop	{r4, r5, pc}

08007d4c <SDMMC_CmdWriteSingleBlock>:
{
 8007d4c:	b530      	push	{r4, r5, lr}
 8007d4e:	b087      	sub	sp, #28
 8007d50:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007d52:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007d54:	2418      	movs	r4, #24
 8007d56:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d58:	2340      	movs	r3, #64	; 0x40
 8007d5a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d64:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d66:	a901      	add	r1, sp, #4
 8007d68:	f7ff fe7f 	bl	8007a6a <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d70:	4621      	mov	r1, r4
 8007d72:	4628      	mov	r0, r5
 8007d74:	f7ff fe92 	bl	8007a9c <SDMMC_GetCmdResp1>
}
 8007d78:	b007      	add	sp, #28
 8007d7a:	bd30      	pop	{r4, r5, pc}

08007d7c <SDMMC_CmdWriteMultiBlock>:
{
 8007d7c:	b530      	push	{r4, r5, lr}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007d82:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007d84:	2419      	movs	r4, #25
 8007d86:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d88:	2340      	movs	r3, #64	; 0x40
 8007d8a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d94:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d96:	a901      	add	r1, sp, #4
 8007d98:	f7ff fe67 	bl	8007a6a <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da0:	4621      	mov	r1, r4
 8007da2:	4628      	mov	r0, r5
 8007da4:	f7ff fe7a 	bl	8007a9c <SDMMC_GetCmdResp1>
}
 8007da8:	b007      	add	sp, #28
 8007daa:	bd30      	pop	{r4, r5, pc}

08007dac <SDMMC_CmdStopTransfer>:
{
 8007dac:	b530      	push	{r4, r5, lr}
 8007dae:	b087      	sub	sp, #28
 8007db0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007db6:	240c      	movs	r4, #12
 8007db8:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007dba:	2240      	movs	r2, #64	; 0x40
 8007dbc:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007dbe:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dc4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007dc6:	a901      	add	r1, sp, #4
 8007dc8:	f7ff fe4f 	bl	8007a6a <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007dcc:	4a03      	ldr	r2, [pc, #12]	; (8007ddc <SDMMC_CmdStopTransfer+0x30>)
 8007dce:	4621      	mov	r1, r4
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	f7ff fe63 	bl	8007a9c <SDMMC_GetCmdResp1>
}
 8007dd6:	b007      	add	sp, #28
 8007dd8:	bd30      	pop	{r4, r5, pc}
 8007dda:	bf00      	nop
 8007ddc:	05f5e100 	.word	0x05f5e100

08007de0 <SDMMC_CmdSelDesel>:
{
 8007de0:	b530      	push	{r4, r5, lr}
 8007de2:	b087      	sub	sp, #28
 8007de4:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007de6:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007de8:	2407      	movs	r4, #7
 8007dea:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007dec:	2340      	movs	r3, #64	; 0x40
 8007dee:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007df0:	2300      	movs	r3, #0
 8007df2:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007df8:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007dfa:	a901      	add	r1, sp, #4
 8007dfc:	f7ff fe35 	bl	8007a6a <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e04:	4621      	mov	r1, r4
 8007e06:	4628      	mov	r0, r5
 8007e08:	f7ff fe48 	bl	8007a9c <SDMMC_GetCmdResp1>
}
 8007e0c:	b007      	add	sp, #28
 8007e0e:	bd30      	pop	{r4, r5, pc}

08007e10 <SDMMC_CmdGoIdleState>:
{
 8007e10:	b510      	push	{r4, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007e16:	2300      	movs	r3, #0
 8007e18:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007e1a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007e1c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e1e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e24:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e26:	a901      	add	r1, sp, #4
 8007e28:	f7ff fe1f 	bl	8007a6a <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	f7ff fd47 	bl	80078c0 <SDMMC_GetCmdError>
}
 8007e32:	b006      	add	sp, #24
 8007e34:	bd10      	pop	{r4, pc}

08007e36 <SDMMC_CmdOperCond>:
{
 8007e36:	b510      	push	{r4, lr}
 8007e38:	b086      	sub	sp, #24
 8007e3a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007e3c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007e40:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007e42:	2308      	movs	r3, #8
 8007e44:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e46:	2340      	movs	r3, #64	; 0x40
 8007e48:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e52:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e54:	a901      	add	r1, sp, #4
 8007e56:	f7ff fe08 	bl	8007a6a <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f7ff fda4 	bl	80079a8 <SDMMC_GetCmdResp7>
}
 8007e60:	b006      	add	sp, #24
 8007e62:	bd10      	pop	{r4, pc}

08007e64 <SDMMC_CmdAppCommand>:
{
 8007e64:	b530      	push	{r4, r5, lr}
 8007e66:	b087      	sub	sp, #28
 8007e68:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007e6a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007e6c:	2437      	movs	r4, #55	; 0x37
 8007e6e:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e70:	2340      	movs	r3, #64	; 0x40
 8007e72:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e74:	2300      	movs	r3, #0
 8007e76:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e7c:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e7e:	a901      	add	r1, sp, #4
 8007e80:	f7ff fdf3 	bl	8007a6a <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e88:	4621      	mov	r1, r4
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f7ff fe06 	bl	8007a9c <SDMMC_GetCmdResp1>
}
 8007e90:	b007      	add	sp, #28
 8007e92:	bd30      	pop	{r4, r5, pc}

08007e94 <SDMMC_CmdAppOperCommand>:
{
 8007e94:	b510      	push	{r4, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007e9a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007e9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007ea2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007ea4:	2329      	movs	r3, #41	; 0x29
 8007ea6:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ea8:	2340      	movs	r3, #64	; 0x40
 8007eaa:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007eac:	2300      	movs	r3, #0
 8007eae:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007eb4:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007eb6:	a901      	add	r1, sp, #4
 8007eb8:	f7ff fdd7 	bl	8007a6a <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f7ff fd4b 	bl	8007958 <SDMMC_GetCmdResp3>
}
 8007ec2:	b006      	add	sp, #24
 8007ec4:	bd10      	pop	{r4, pc}

08007ec6 <SDMMC_CmdBusWidth>:
{
 8007ec6:	b530      	push	{r4, r5, lr}
 8007ec8:	b087      	sub	sp, #28
 8007eca:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007ecc:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007ece:	2406      	movs	r4, #6
 8007ed0:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ed2:	2340      	movs	r3, #64	; 0x40
 8007ed4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ede:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ee0:	a901      	add	r1, sp, #4
 8007ee2:	f7ff fdc2 	bl	8007a6a <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eea:	4621      	mov	r1, r4
 8007eec:	4628      	mov	r0, r5
 8007eee:	f7ff fdd5 	bl	8007a9c <SDMMC_GetCmdResp1>
}
 8007ef2:	b007      	add	sp, #28
 8007ef4:	bd30      	pop	{r4, r5, pc}

08007ef6 <SDMMC_CmdSendSCR>:
{
 8007ef6:	b530      	push	{r4, r5, lr}
 8007ef8:	b087      	sub	sp, #28
 8007efa:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007efc:	2300      	movs	r3, #0
 8007efe:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007f00:	2433      	movs	r4, #51	; 0x33
 8007f02:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f04:	2240      	movs	r2, #64	; 0x40
 8007f06:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f08:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f0e:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f10:	a901      	add	r1, sp, #4
 8007f12:	f7ff fdaa 	bl	8007a6a <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f1a:	4621      	mov	r1, r4
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	f7ff fdbd 	bl	8007a9c <SDMMC_GetCmdResp1>
}
 8007f22:	b007      	add	sp, #28
 8007f24:	bd30      	pop	{r4, r5, pc}

08007f26 <SDMMC_CmdSendCID>:
{
 8007f26:	b510      	push	{r4, lr}
 8007f28:	b086      	sub	sp, #24
 8007f2a:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0U;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007f30:	2202      	movs	r2, #2
 8007f32:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007f34:	22c0      	movs	r2, #192	; 0xc0
 8007f36:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f38:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f3e:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f40:	a901      	add	r1, sp, #4
 8007f42:	f7ff fd92 	bl	8007a6a <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007f46:	4620      	mov	r0, r4
 8007f48:	f7ff fcd6 	bl	80078f8 <SDMMC_GetCmdResp2>
}
 8007f4c:	b006      	add	sp, #24
 8007f4e:	bd10      	pop	{r4, pc}

08007f50 <SDMMC_CmdSendCSD>:
{
 8007f50:	b510      	push	{r4, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007f56:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007f58:	2309      	movs	r3, #9
 8007f5a:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007f5c:	23c0      	movs	r3, #192	; 0xc0
 8007f5e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f60:	2300      	movs	r3, #0
 8007f62:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f68:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f6a:	a901      	add	r1, sp, #4
 8007f6c:	f7ff fd7d 	bl	8007a6a <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007f70:	4620      	mov	r0, r4
 8007f72:	f7ff fcc1 	bl	80078f8 <SDMMC_GetCmdResp2>
}
 8007f76:	b006      	add	sp, #24
 8007f78:	bd10      	pop	{r4, pc}

08007f7a <SDMMC_CmdSetRelAdd>:
{
 8007f7a:	b570      	push	{r4, r5, r6, lr}
 8007f7c:	b086      	sub	sp, #24
 8007f7e:	4605      	mov	r5, r0
 8007f80:	460e      	mov	r6, r1
  sdmmc_cmdinit.Argument         = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007f86:	2403      	movs	r4, #3
 8007f88:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f8a:	2240      	movs	r2, #64	; 0x40
 8007f8c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f8e:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f94:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f96:	a901      	add	r1, sp, #4
 8007f98:	f7ff fd67 	bl	8007a6a <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007f9c:	4632      	mov	r2, r6
 8007f9e:	4621      	mov	r1, r4
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	f7ff fe27 	bl	8007bf4 <SDMMC_GetCmdResp6>
}
 8007fa6:	b006      	add	sp, #24
 8007fa8:	bd70      	pop	{r4, r5, r6, pc}

08007faa <SDMMC_CmdSendStatus>:
{
 8007faa:	b530      	push	{r4, r5, lr}
 8007fac:	b087      	sub	sp, #28
 8007fae:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007fb0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007fb2:	240d      	movs	r4, #13
 8007fb4:	9402      	str	r4, [sp, #8]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fb6:	2340      	movs	r3, #64	; 0x40
 8007fb8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fc2:	9305      	str	r3, [sp, #20]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fc4:	a901      	add	r1, sp, #4
 8007fc6:	f7ff fd50 	bl	8007a6a <SDIO_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fce:	4621      	mov	r1, r4
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	f7ff fd63 	bl	8007a9c <SDMMC_GetCmdResp1>
}
 8007fd6:	b007      	add	sp, #28
 8007fd8:	bd30      	pop	{r4, r5, pc}
	...

08007fdc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007fdc:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007fde:	4903      	ldr	r1, [pc, #12]	; (8007fec <MX_FATFS_Init+0x10>)
 8007fe0:	4803      	ldr	r0, [pc, #12]	; (8007ff0 <MX_FATFS_Init+0x14>)
 8007fe2:	f000 fa3d 	bl	8008460 <FATFS_LinkDriver>
 8007fe6:	4b03      	ldr	r3, [pc, #12]	; (8007ff4 <MX_FATFS_Init+0x18>)
 8007fe8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8007fea:	bd08      	pop	{r3, pc}
 8007fec:	200301b8 	.word	0x200301b8
 8007ff0:	0801ef38 	.word	0x0801ef38
 8007ff4:	200301b4 	.word	0x200301b4

08007ff8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007ff8:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	460a      	mov	r2, r1
 8007ffe:	4601      	mov	r1, r0
 8008000:	4802      	ldr	r0, [pc, #8]	; (800800c <BSP_SD_ReadBlocks_DMA+0x14>)
 8008002:	f7fe fa65 	bl	80064d0 <HAL_SD_ReadBlocks_DMA>
 8008006:	b100      	cbz	r0, 800800a <BSP_SD_ReadBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 8008008:	2001      	movs	r0, #1
  }
  
  return sd_state; 
}
 800800a:	bd08      	pop	{r3, pc}
 800800c:	2002ffd4 	.word	0x2002ffd4

08008010 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008010:	b508      	push	{r3, lr}
  uint8_t sd_state = MSD_OK;
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008012:	4613      	mov	r3, r2
 8008014:	460a      	mov	r2, r1
 8008016:	4601      	mov	r1, r0
 8008018:	4802      	ldr	r0, [pc, #8]	; (8008024 <BSP_SD_WriteBlocks_DMA+0x14>)
 800801a:	f7fe faf9 	bl	8006610 <HAL_SD_WriteBlocks_DMA>
 800801e:	b100      	cbz	r0, 8008022 <BSP_SD_WriteBlocks_DMA+0x12>
  {
    sd_state = MSD_ERROR;
 8008020:	2001      	movs	r0, #1
  }
  
  return sd_state; 
}
 8008022:	bd08      	pop	{r3, pc}
 8008024:	2002ffd4 	.word	0x2002ffd4

08008028 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8008028:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800802a:	4803      	ldr	r0, [pc, #12]	; (8008038 <BSP_SD_GetCardState+0x10>)
 800802c:	f7fe fdd6 	bl	8006bdc <HAL_SD_GetCardState>
}
 8008030:	3804      	subs	r0, #4
 8008032:	bf18      	it	ne
 8008034:	2001      	movne	r0, #1
 8008036:	bd08      	pop	{r3, pc}
 8008038:	2002ffd4 	.word	0x2002ffd4

0800803c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800803c:	b508      	push	{r3, lr}
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800803e:	4601      	mov	r1, r0
 8008040:	4801      	ldr	r0, [pc, #4]	; (8008048 <BSP_SD_GetCardInfo+0xc>)
 8008042:	f7fe fd66 	bl	8006b12 <HAL_SD_GetCardInfo>
}
 8008046:	bd08      	pop	{r3, pc}
 8008048:	2002ffd4 	.word	0x2002ffd4

0800804c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800804c:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800804e:	f000 f9a1 	bl	8008394 <BSP_SD_ReadCpltCallback>
}
 8008052:	bd08      	pop	{r3, pc}

08008054 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 8008054:	b500      	push	{lr}
 8008056:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8008058:	2301      	movs	r3, #1
 800805a:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800805e:	f000 f823 	bl	80080a8 <BSP_PlatformIsDetected>
 8008062:	b910      	cbnz	r0, 800806a <BSP_SD_IsDetected+0x16>
  {
    status = SD_NOT_PRESENT;
 8008064:	2300      	movs	r3, #0
 8008066:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  return status;
 800806a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800806e:	b003      	add	sp, #12
 8008070:	f85d fb04 	ldr.w	pc, [sp], #4

08008074 <BSP_SD_Init>:
{
 8008074:	b510      	push	{r4, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008076:	f7ff ffed 	bl	8008054 <BSP_SD_IsDetected>
 800807a:	2801      	cmp	r0, #1
 800807c:	d002      	beq.n	8008084 <BSP_SD_Init+0x10>
    return MSD_ERROR;
 800807e:	2401      	movs	r4, #1
}
 8008080:	4620      	mov	r0, r4
 8008082:	bd10      	pop	{r4, pc}
  sd_state = HAL_SD_Init(&hsd);
 8008084:	4807      	ldr	r0, [pc, #28]	; (80080a4 <BSP_SD_Init+0x30>)
 8008086:	f7fe fd25 	bl	8006ad4 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800808a:	4604      	mov	r4, r0
 800808c:	2800      	cmp	r0, #0
 800808e:	d1f7      	bne.n	8008080 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008090:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008094:	4803      	ldr	r0, [pc, #12]	; (80080a4 <BSP_SD_Init+0x30>)
 8008096:	f7fe fd4f 	bl	8006b38 <HAL_SD_ConfigWideBusOperation>
 800809a:	2800      	cmp	r0, #0
 800809c:	d0f0      	beq.n	8008080 <BSP_SD_Init+0xc>
      sd_state = MSD_ERROR;
 800809e:	2401      	movs	r4, #1
 80080a0:	e7ee      	b.n	8008080 <BSP_SD_Init+0xc>
 80080a2:	bf00      	nop
 80080a4:	2002ffd4 	.word	0x2002ffd4

080080a8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80080a8:	b508      	push	{r3, lr}
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80080aa:	2104      	movs	r1, #4
 80080ac:	4803      	ldr	r0, [pc, #12]	; (80080bc <BSP_PlatformIsDetected+0x14>)
 80080ae:	f7fb fe57 	bl	8003d60 <HAL_GPIO_ReadPin>
 80080b2:	b108      	cbz	r0, 80080b8 <BSP_PlatformIsDetected+0x10>
    {
        status = SD_NOT_PRESENT;
 80080b4:	2000      	movs	r0, #0
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 80080b6:	bd08      	pop	{r3, pc}
    uint8_t status = SD_PRESENT;
 80080b8:	2001      	movs	r0, #1
 80080ba:	e7fc      	b.n	80080b6 <BSP_PlatformIsDetected+0xe>
 80080bc:	40021800 	.word	0x40021800

080080c0 <SD_CheckStatus>:

  return -1;
}

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80080c0:	b508      	push	{r3, lr}
  Stat = STA_NOINIT;
 80080c2:	4b07      	ldr	r3, [pc, #28]	; (80080e0 <SD_CheckStatus+0x20>)
 80080c4:	2201      	movs	r2, #1
 80080c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80080c8:	f7ff ffae 	bl	8008028 <BSP_SD_GetCardState>
 80080cc:	b920      	cbnz	r0, 80080d8 <SD_CheckStatus+0x18>
  {
    Stat &= ~STA_NOINIT;
 80080ce:	4a04      	ldr	r2, [pc, #16]	; (80080e0 <SD_CheckStatus+0x20>)
 80080d0:	7813      	ldrb	r3, [r2, #0]
 80080d2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80080d6:	7013      	strb	r3, [r2, #0]
  }

  return Stat;
 80080d8:	4b01      	ldr	r3, [pc, #4]	; (80080e0 <SD_CheckStatus+0x20>)
 80080da:	7818      	ldrb	r0, [r3, #0]
}
 80080dc:	bd08      	pop	{r3, pc}
 80080de:	bf00      	nop
 80080e0:	20000050 	.word	0x20000050

080080e4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80080e4:	b510      	push	{r4, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	4604      	mov	r4, r0
Stat = STA_NOINIT; 
 80080ea:	4b14      	ldr	r3, [pc, #80]	; (800813c <SD_initialize+0x58>)
 80080ec:	2201      	movs	r2, #1
 80080ee:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 80080f0:	f000 f9cc 	bl	800848c <osKernelRunning>
 80080f4:	b918      	cbnz	r0, 80080fe <SD_initialize+0x1a>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
    }
  }
  return Stat;
 80080f6:	4b11      	ldr	r3, [pc, #68]	; (800813c <SD_initialize+0x58>)
 80080f8:	7818      	ldrb	r0, [r3, #0]
}
 80080fa:	b004      	add	sp, #16
 80080fc:	bd10      	pop	{r4, pc}
    if(BSP_SD_Init() == MSD_OK)
 80080fe:	f7ff ffb9 	bl	8008074 <BSP_SD_Init>
 8008102:	b1a0      	cbz	r0, 800812e <SD_initialize+0x4a>
    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 8008104:	4b0d      	ldr	r3, [pc, #52]	; (800813c <SD_initialize+0x58>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b01      	cmp	r3, #1
 800810c:	d0f3      	beq.n	80080f6 <SD_initialize+0x12>
 800810e:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <SD_initialize+0x5c>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1ef      	bne.n	80080f6 <SD_initialize+0x12>
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8008116:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <SD_initialize+0x60>)
 8008118:	466c      	mov	r4, sp
 800811a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800811c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8008120:	2100      	movs	r1, #0
 8008122:	4620      	mov	r0, r4
 8008124:	f000 faa6 	bl	8008674 <osMessageCreate>
 8008128:	4b05      	ldr	r3, [pc, #20]	; (8008140 <SD_initialize+0x5c>)
 800812a:	6018      	str	r0, [r3, #0]
 800812c:	e7e3      	b.n	80080f6 <SD_initialize+0x12>
      Stat = SD_CheckStatus(lun);
 800812e:	4620      	mov	r0, r4
 8008130:	f7ff ffc6 	bl	80080c0 <SD_CheckStatus>
 8008134:	4b01      	ldr	r3, [pc, #4]	; (800813c <SD_initialize+0x58>)
 8008136:	7018      	strb	r0, [r3, #0]
 8008138:	e7e4      	b.n	8008104 <SD_initialize+0x20>
 800813a:	bf00      	nop
 800813c:	20000050 	.word	0x20000050
 8008140:	200004bc 	.word	0x200004bc
 8008144:	0801ef28 	.word	0x0801ef28

08008148 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008148:	b508      	push	{r3, lr}
  return SD_CheckStatus(lun);
 800814a:	f7ff ffb9 	bl	80080c0 <SD_CheckStatus>
}
 800814e:	bd08      	pop	{r3, pc}

08008150 <SD_CheckStatusWithTimeout>:
{
 8008150:	b538      	push	{r3, r4, r5, lr}
 8008152:	4605      	mov	r5, r0
  uint32_t timer = osKernelSysTick();
 8008154:	f000 f9a3 	bl	800849e <osKernelSysTick>
 8008158:	4604      	mov	r4, r0
  while( osKernelSysTick() - timer < timeout)
 800815a:	f000 f9a0 	bl	800849e <osKernelSysTick>
 800815e:	1b00      	subs	r0, r0, r4
 8008160:	42a8      	cmp	r0, r5
 8008162:	d205      	bcs.n	8008170 <SD_CheckStatusWithTimeout+0x20>
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008164:	f7ff ff60 	bl	8008028 <BSP_SD_GetCardState>
 8008168:	2800      	cmp	r0, #0
 800816a:	d1f6      	bne.n	800815a <SD_CheckStatusWithTimeout+0xa>
      return 0;
 800816c:	2000      	movs	r0, #0
 800816e:	e001      	b.n	8008174 <SD_CheckStatusWithTimeout+0x24>
  return -1;
 8008170:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8008174:	bd38      	pop	{r3, r4, r5, pc}
	...

08008178 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800817c:	b088      	sub	sp, #32
 800817e:	4689      	mov	r9, r1
 8008180:	4614      	mov	r4, r2
 8008182:	461f      	mov	r7, r3
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008184:	f247 5030 	movw	r0, #30000	; 0x7530
 8008188:	f7ff ffe2 	bl	8008150 <SD_CheckStatusWithTimeout>
 800818c:	2800      	cmp	r0, #0
 800818e:	db51      	blt.n	8008234 <SD_read+0xbc>
  {
    return res;
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8008190:	f019 0f03 	tst.w	r9, #3
 8008194:	d001      	beq.n	800819a <SD_read+0x22>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 8008196:	2500      	movs	r5, #0
 8008198:	e01a      	b.n	80081d0 <SD_read+0x58>
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800819a:	463a      	mov	r2, r7
 800819c:	4621      	mov	r1, r4
 800819e:	4648      	mov	r0, r9
 80081a0:	f7ff ff2a 	bl	8007ff8 <BSP_SD_ReadBlocks_DMA>
    if (ret == MSD_OK) {
 80081a4:	b108      	cbz	r0, 80081aa <SD_read+0x32>
  DRESULT res = RES_ERROR;
 80081a6:	2001      	movs	r0, #1
 80081a8:	e045      	b.n	8008236 <SD_read+0xbe>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80081aa:	f247 5230 	movw	r2, #30000	; 0x7530
 80081ae:	4b24      	ldr	r3, [pc, #144]	; (8008240 <SD_read+0xc8>)
 80081b0:	6819      	ldr	r1, [r3, #0]
 80081b2:	a805      	add	r0, sp, #20
 80081b4:	f000 faa6 	bl	8008704 <osMessageGet>
      if (event.status == osEventMessage) {
 80081b8:	9b05      	ldr	r3, [sp, #20]
 80081ba:	2b10      	cmp	r3, #16
 80081bc:	d001      	beq.n	80081c2 <SD_read+0x4a>
  DRESULT res = RES_ERROR;
 80081be:	2001      	movs	r0, #1
 80081c0:	e039      	b.n	8008236 <SD_read+0xbe>
        if (event.value.v == READ_CPLT_MSG) {
 80081c2:	9b06      	ldr	r3, [sp, #24]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d039      	beq.n	800823c <SD_read+0xc4>
  DRESULT res = RES_ERROR;
 80081c8:	2001      	movs	r0, #1
 80081ca:	e034      	b.n	8008236 <SD_read+0xbe>
    for (i = 0; i < count; i++) {
 80081cc:	3501      	adds	r5, #1
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80081ce:	4634      	mov	r4, r6
    for (i = 0; i < count; i++) {
 80081d0:	46aa      	mov	sl, r5
 80081d2:	42bd      	cmp	r5, r7
 80081d4:	d223      	bcs.n	800821e <SD_read+0xa6>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80081d6:	1c66      	adds	r6, r4, #1
 80081d8:	2201      	movs	r2, #1
 80081da:	4621      	mov	r1, r4
 80081dc:	4819      	ldr	r0, [pc, #100]	; (8008244 <SD_read+0xcc>)
 80081de:	f7ff ff0b 	bl	8007ff8 <BSP_SD_ReadBlocks_DMA>
      if (ret == MSD_OK) {
 80081e2:	4680      	mov	r8, r0
 80081e4:	b9d8      	cbnz	r0, 800821e <SD_read+0xa6>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80081e6:	466c      	mov	r4, sp
 80081e8:	f247 5230 	movw	r2, #30000	; 0x7530
 80081ec:	4b14      	ldr	r3, [pc, #80]	; (8008240 <SD_read+0xc8>)
 80081ee:	6819      	ldr	r1, [r3, #0]
 80081f0:	4620      	mov	r0, r4
 80081f2:	f000 fa87 	bl	8008704 <osMessageGet>
 80081f6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80081fa:	ab08      	add	r3, sp, #32
 80081fc:	e903 0007 	stmdb	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 8008200:	9b05      	ldr	r3, [sp, #20]
 8008202:	2b10      	cmp	r3, #16
 8008204:	d1e2      	bne.n	80081cc <SD_read+0x54>
          if (event.value.v == READ_CPLT_MSG) {
 8008206:	9b06      	ldr	r3, [sp, #24]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d1df      	bne.n	80081cc <SD_read+0x54>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 800820c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008210:	490c      	ldr	r1, [pc, #48]	; (8008244 <SD_read+0xcc>)
 8008212:	4648      	mov	r0, r9
 8008214:	f016 fc1b 	bl	801ea4e <memcpy>
            buff += BLOCKSIZE;
 8008218:	f509 7900 	add.w	r9, r9, #512	; 0x200
 800821c:	e7d6      	b.n	80081cc <SD_read+0x54>
      {
        break;
      }
    }

    if ((i == count) && (ret == MSD_OK))
 800821e:	45ba      	cmp	sl, r7
 8008220:	d001      	beq.n	8008226 <SD_read+0xae>
  DRESULT res = RES_ERROR;
 8008222:	2001      	movs	r0, #1
 8008224:	e007      	b.n	8008236 <SD_read+0xbe>
    if ((i == count) && (ret == MSD_OK))
 8008226:	f1b8 0f00 	cmp.w	r8, #0
 800822a:	d101      	bne.n	8008230 <SD_read+0xb8>
      res = RES_OK;
 800822c:	2000      	movs	r0, #0
 800822e:	e002      	b.n	8008236 <SD_read+0xbe>
  DRESULT res = RES_ERROR;
 8008230:	2001      	movs	r0, #1
 8008232:	e000      	b.n	8008236 <SD_read+0xbe>
    return res;
 8008234:	2001      	movs	r0, #1
  }

#endif

  return res;
} 
 8008236:	b008      	add	sp, #32
 8008238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          res = RES_OK;
 800823c:	2000      	movs	r0, #0
 800823e:	e7fa      	b.n	8008236 <SD_read+0xbe>
 8008240:	200004bc 	.word	0x200004bc
 8008244:	200004c0 	.word	0x200004c0

08008248 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800824c:	b088      	sub	sp, #32
 800824e:	4689      	mov	r9, r1
 8008250:	4614      	mov	r4, r2
 8008252:	461f      	mov	r7, r3

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008254:	f247 5030 	movw	r0, #30000	; 0x7530
 8008258:	f7ff ff7a 	bl	8008150 <SD_CheckStatusWithTimeout>
 800825c:	2800      	cmp	r0, #0
 800825e:	db62      	blt.n	8008326 <SD_write+0xde>
  {
    return res;
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8008260:	f019 0f03 	tst.w	r9, #3
 8008264:	d001      	beq.n	800826a <SD_write+0x22>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 8008266:	2500      	movs	r5, #0
 8008268:	e02b      	b.n	80082c2 <SD_write+0x7a>
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800826a:	463a      	mov	r2, r7
 800826c:	4621      	mov	r1, r4
 800826e:	4648      	mov	r0, r9
 8008270:	f7ff fece 	bl	8008010 <BSP_SD_WriteBlocks_DMA>
 8008274:	b108      	cbz	r0, 800827a <SD_write+0x32>
  DRESULT res = RES_ERROR;
 8008276:	2001      	movs	r0, #1
 8008278:	e056      	b.n	8008328 <SD_write+0xe0>
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800827a:	f247 5230 	movw	r2, #30000	; 0x7530
 800827e:	4b2c      	ldr	r3, [pc, #176]	; (8008330 <SD_write+0xe8>)
 8008280:	6819      	ldr	r1, [r3, #0]
 8008282:	a805      	add	r0, sp, #20
 8008284:	f000 fa3e 	bl	8008704 <osMessageGet>
      if (event.status == osEventMessage)
 8008288:	9b05      	ldr	r3, [sp, #20]
 800828a:	2b10      	cmp	r3, #16
 800828c:	d001      	beq.n	8008292 <SD_write+0x4a>
  DRESULT res = RES_ERROR;
 800828e:	2001      	movs	r0, #1
 8008290:	e04a      	b.n	8008328 <SD_write+0xe0>
        if (event.value.v == WRITE_CPLT_MSG)
 8008292:	9b06      	ldr	r3, [sp, #24]
 8008294:	2b02      	cmp	r3, #2
 8008296:	d001      	beq.n	800829c <SD_write+0x54>
  DRESULT res = RES_ERROR;
 8008298:	2001      	movs	r0, #1
 800829a:	e045      	b.n	8008328 <SD_write+0xe0>
          timer = osKernelSysTick() + SD_TIMEOUT;
 800829c:	f000 f8ff 	bl	800849e <osKernelSysTick>
 80082a0:	f500 44ea 	add.w	r4, r0, #29952	; 0x7500
 80082a4:	3430      	adds	r4, #48	; 0x30
          while(timer > osKernelSysTick())
 80082a6:	f000 f8fa 	bl	800849e <osKernelSysTick>
 80082aa:	42a0      	cmp	r0, r4
 80082ac:	d205      	bcs.n	80082ba <SD_write+0x72>
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80082ae:	f7ff febb 	bl	8008028 <BSP_SD_GetCardState>
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d1f7      	bne.n	80082a6 <SD_write+0x5e>
              res = RES_OK;
 80082b6:	2000      	movs	r0, #0
 80082b8:	e036      	b.n	8008328 <SD_write+0xe0>
  DRESULT res = RES_ERROR;
 80082ba:	2001      	movs	r0, #1
 80082bc:	e034      	b.n	8008328 <SD_write+0xe0>
    for (i = 0; i < count; i++) {
 80082be:	3501      	adds	r5, #1
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80082c0:	4634      	mov	r4, r6
    for (i = 0; i < count; i++) {
 80082c2:	46aa      	mov	sl, r5
 80082c4:	42bd      	cmp	r5, r7
 80082c6:	d223      	bcs.n	8008310 <SD_write+0xc8>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80082c8:	1c66      	adds	r6, r4, #1
 80082ca:	2201      	movs	r2, #1
 80082cc:	4621      	mov	r1, r4
 80082ce:	4819      	ldr	r0, [pc, #100]	; (8008334 <SD_write+0xec>)
 80082d0:	f7ff fe9e 	bl	8008010 <BSP_SD_WriteBlocks_DMA>
      if (ret == MSD_OK) {
 80082d4:	4680      	mov	r8, r0
 80082d6:	b9d8      	cbnz	r0, 8008310 <SD_write+0xc8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80082d8:	466c      	mov	r4, sp
 80082da:	f247 5230 	movw	r2, #30000	; 0x7530
 80082de:	4b14      	ldr	r3, [pc, #80]	; (8008330 <SD_write+0xe8>)
 80082e0:	6819      	ldr	r1, [r3, #0]
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 fa0e 	bl	8008704 <osMessageGet>
 80082e8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80082ec:	ab08      	add	r3, sp, #32
 80082ee:	e903 0007 	stmdb	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 80082f2:	9b05      	ldr	r3, [sp, #20]
 80082f4:	2b10      	cmp	r3, #16
 80082f6:	d1e2      	bne.n	80082be <SD_write+0x76>
          if (event.value.v == WRITE_CPLT_MSG) {
 80082f8:	9b06      	ldr	r3, [sp, #24]
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d1df      	bne.n	80082be <SD_write+0x76>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 80082fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008302:	490c      	ldr	r1, [pc, #48]	; (8008334 <SD_write+0xec>)
 8008304:	4648      	mov	r0, r9
 8008306:	f016 fba2 	bl	801ea4e <memcpy>
            buff += BLOCKSIZE;
 800830a:	f509 7900 	add.w	r9, r9, #512	; 0x200
 800830e:	e7d6      	b.n	80082be <SD_write+0x76>
      {
        break;
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8008310:	45ba      	cmp	sl, r7
 8008312:	d001      	beq.n	8008318 <SD_write+0xd0>
  DRESULT res = RES_ERROR;
 8008314:	2001      	movs	r0, #1
 8008316:	e007      	b.n	8008328 <SD_write+0xe0>
    if ((i == count) && (ret == MSD_OK))
 8008318:	f1b8 0f00 	cmp.w	r8, #0
 800831c:	d101      	bne.n	8008322 <SD_write+0xda>
      res = RES_OK;
 800831e:	2000      	movs	r0, #0
 8008320:	e002      	b.n	8008328 <SD_write+0xe0>
  DRESULT res = RES_ERROR;
 8008322:	2001      	movs	r0, #1
 8008324:	e000      	b.n	8008328 <SD_write+0xe0>
    return res;
 8008326:	2001      	movs	r0, #1
  }
#endif
  return res;
} 
 8008328:	b008      	add	sp, #32
 800832a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832e:	bf00      	nop
 8008330:	200004bc 	.word	0x200004bc
 8008334:	200004c0 	.word	0x200004c0

08008338 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008338:	4b15      	ldr	r3, [pc, #84]	; (8008390 <SD_ioctl+0x58>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	f013 0f01 	tst.w	r3, #1
 8008340:	d121      	bne.n	8008386 <SD_ioctl+0x4e>
{
 8008342:	b510      	push	{r4, lr}
 8008344:	b088      	sub	sp, #32
 8008346:	4614      	mov	r4, r2

  switch (cmd)
 8008348:	2903      	cmp	r1, #3
 800834a:	d81e      	bhi.n	800838a <SD_ioctl+0x52>
 800834c:	e8df f001 	tbb	[pc, r1]
 8008350:	130c0502 	.word	0x130c0502
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008354:	2000      	movs	r0, #0
  default:
    res = RES_PARERR;
  }

  return res;
}
 8008356:	b008      	add	sp, #32
 8008358:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800835a:	4668      	mov	r0, sp
 800835c:	f7ff fe6e 	bl	800803c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008360:	9b06      	ldr	r3, [sp, #24]
 8008362:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8008364:	2000      	movs	r0, #0
    break;
 8008366:	e7f6      	b.n	8008356 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8008368:	4668      	mov	r0, sp
 800836a:	f7ff fe67 	bl	800803c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800836e:	9b07      	ldr	r3, [sp, #28]
 8008370:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 8008372:	2000      	movs	r0, #0
    break;
 8008374:	e7ef      	b.n	8008356 <SD_ioctl+0x1e>
    BSP_SD_GetCardInfo(&CardInfo);
 8008376:	4668      	mov	r0, sp
 8008378:	f7ff fe60 	bl	800803c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800837c:	9b07      	ldr	r3, [sp, #28]
 800837e:	0a5b      	lsrs	r3, r3, #9
 8008380:	6023      	str	r3, [r4, #0]
    res = RES_OK;
 8008382:	2000      	movs	r0, #0
    break;
 8008384:	e7e7      	b.n	8008356 <SD_ioctl+0x1e>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008386:	2003      	movs	r0, #3
}
 8008388:	4770      	bx	lr
    res = RES_PARERR;
 800838a:	2004      	movs	r0, #4
 800838c:	e7e3      	b.n	8008356 <SD_ioctl+0x1e>
 800838e:	bf00      	nop
 8008390:	20000050 	.word	0x20000050

08008394 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8008394:	b508      	push	{r3, lr}
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8008396:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800839a:	2101      	movs	r1, #1
 800839c:	4b02      	ldr	r3, [pc, #8]	; (80083a8 <BSP_SD_ReadCpltCallback+0x14>)
 800839e:	6818      	ldr	r0, [r3, #0]
 80083a0:	f000 f97c 	bl	800869c <osMessagePut>
}
 80083a4:	bd08      	pop	{r3, pc}
 80083a6:	bf00      	nop
 80083a8:	200004bc 	.word	0x200004bc

080083ac <GUI_X_GetTime>:
and delay function. Default time unit (tick), normally is
1 ms.
*/

int GUI_X_GetTime(void)
{
 80083ac:	b508      	push	{r3, lr}
  return ((int) osKernelSysTick());
 80083ae:	f000 f876 	bl	800849e <osKernelSysTick>
}
 80083b2:	bd08      	pop	{r3, pc}

080083b4 <GUI_X_Delay>:

void GUI_X_Delay(int ms)
{
 80083b4:	b508      	push	{r3, lr}
  osDelay( ms );
 80083b6:	f000 f8b6 	bl	8008526 <osDelay>
}
 80083ba:	bd08      	pop	{r3, pc}

080083bc <GUI_X_Init>:
* some hardware which needs to be up and running before the GUI.
* If not required, leave this routine blank.
*/

void GUI_X_Init(void) {
}
 80083bc:	4770      	bx	lr
	...

080083c0 <GUI_X_InitOS>:
* needs to be in GUIConf.h
*/

/* Init OS */
void GUI_X_InitOS(void)
{ 
 80083c0:	b530      	push	{r4, r5, lr}
 80083c2:	b085      	sub	sp, #20
  /* Create Mutex lock */
  osMutexDef(MUTEX);
 80083c4:	2400      	movs	r4, #0
 80083c6:	9402      	str	r4, [sp, #8]
 80083c8:	9403      	str	r4, [sp, #12]
  
  /* Create the Mutex used by the two threads */
  osMutex = osMutexCreate(osMutex(MUTEX));
 80083ca:	a802      	add	r0, sp, #8
 80083cc:	f000 f8b4 	bl	8008538 <osMutexCreate>
 80083d0:	4d05      	ldr	r5, [pc, #20]	; (80083e8 <GUI_X_InitOS+0x28>)
 80083d2:	6028      	str	r0, [r5, #0]
  
  /* Create Semaphore lock */
  osSemaphoreDef(SEM);
 80083d4:	9400      	str	r4, [sp, #0]
 80083d6:	9401      	str	r4, [sp, #4]
  
  /* Create the Semaphore used by the two threads */
  osSemaphore= osSemaphoreCreate(osSemaphore(SEM), 1);  
 80083d8:	2101      	movs	r1, #1
 80083da:	4668      	mov	r0, sp
 80083dc:	f000 f91e 	bl	800861c <osSemaphoreCreate>
 80083e0:	6068      	str	r0, [r5, #4]
}
 80083e2:	b005      	add	sp, #20
 80083e4:	bd30      	pop	{r4, r5, pc}
 80083e6:	bf00      	nop
 80083e8:	200006c0 	.word	0x200006c0

080083ec <GUI_X_Unlock>:

void GUI_X_Unlock(void)
{ 
 80083ec:	b508      	push	{r3, lr}
  osMutexRelease(osMutex);
 80083ee:	4b02      	ldr	r3, [pc, #8]	; (80083f8 <GUI_X_Unlock+0xc>)
 80083f0:	6818      	ldr	r0, [r3, #0]
 80083f2:	f000 f8e5 	bl	80085c0 <osMutexRelease>
}
 80083f6:	bd08      	pop	{r3, pc}
 80083f8:	200006c0 	.word	0x200006c0

080083fc <GUI_X_Lock>:

void GUI_X_Lock(void)
{
 80083fc:	b508      	push	{r3, lr}
  osMutexWait(osMutex , osWaitForever) ;
 80083fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008402:	4b02      	ldr	r3, [pc, #8]	; (800840c <GUI_X_Lock+0x10>)
 8008404:	6818      	ldr	r0, [r3, #0]
 8008406:	f000 f8a3 	bl	8008550 <osMutexWait>
}
 800840a:	bd08      	pop	{r3, pc}
 800840c:	200006c0 	.word	0x200006c0

08008410 <GUI_X_GetTaskId>:

/* Get Task handle */
U32 GUI_X_GetTaskId(void) 
{ 
 8008410:	b508      	push	{r3, lr}
  return ((U32) osThreadGetId());
 8008412:	f000 f884 	bl	800851e <osThreadGetId>
}
 8008416:	bd08      	pop	{r3, pc}

08008418 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8008418:	4b10      	ldr	r3, [pc, #64]	; (800845c <FATFS_LinkDriverEx+0x44>)
 800841a:	7a5b      	ldrb	r3, [r3, #9]
 800841c:	b9db      	cbnz	r3, 8008456 <FATFS_LinkDriverEx+0x3e>
{
 800841e:	b430      	push	{r4, r5}
  {
    disk.is_initialized[disk.nbr] = 0;
 8008420:	4b0e      	ldr	r3, [pc, #56]	; (800845c <FATFS_LinkDriverEx+0x44>)
 8008422:	7a5d      	ldrb	r5, [r3, #9]
 8008424:	b2ed      	uxtb	r5, r5
 8008426:	2400      	movs	r4, #0
 8008428:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800842a:	7a5d      	ldrb	r5, [r3, #9]
 800842c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8008430:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8008432:	7a58      	ldrb	r0, [r3, #9]
 8008434:	4418      	add	r0, r3
 8008436:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8008438:	7a5a      	ldrb	r2, [r3, #9]
 800843a:	b2d2      	uxtb	r2, r2
 800843c:	1c50      	adds	r0, r2, #1
 800843e:	b2c0      	uxtb	r0, r0
 8008440:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
 8008442:	3230      	adds	r2, #48	; 0x30
 8008444:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8008446:	233a      	movs	r3, #58	; 0x3a
 8008448:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800844a:	232f      	movs	r3, #47	; 0x2f
 800844c:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 800844e:	70cc      	strb	r4, [r1, #3]
    ret = 0;
 8008450:	4620      	mov	r0, r4
  }

  return ret;
}
 8008452:	bc30      	pop	{r4, r5}
 8008454:	4770      	bx	lr
  uint8_t ret = 1;
 8008456:	2001      	movs	r0, #1
}
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	200006c8 	.word	0x200006c8

08008460 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008460:	b508      	push	{r3, lr}
  return FATFS_LinkDriverEx(drv, path, 0);
 8008462:	2200      	movs	r2, #0
 8008464:	f7ff ffd8 	bl	8008418 <FATFS_LinkDriverEx>
}
 8008468:	bd08      	pop	{r3, pc}

0800846a <makeFreeRtosPriority>:
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800846a:	2884      	cmp	r0, #132	; 0x84
 800846c:	d001      	beq.n	8008472 <makeFreeRtosPriority+0x8>
    fpriority += (priority - osPriorityIdle);
 800846e:	3003      	adds	r0, #3
 8008470:	4770      	bx	lr
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008472:	2000      	movs	r0, #0
  }
  
  return fpriority;
}
 8008474:	4770      	bx	lr

08008476 <inHandlerMode>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008476:	f3ef 8005 	mrs	r0, IPSR

/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
  return __get_IPSR() != 0;
}
 800847a:	3000      	adds	r0, #0
 800847c:	bf18      	it	ne
 800847e:	2001      	movne	r0, #1
 8008480:	4770      	bx	lr

08008482 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008482:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8008484:	f001 f8dc 	bl	8009640 <vTaskStartScheduler>
  
  return osOK;
}
 8008488:	2000      	movs	r0, #0
 800848a:	bd08      	pop	{r3, pc}

0800848c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800848c:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800848e:	f001 fb5f 	bl	8009b50 <xTaskGetSchedulerState>
 8008492:	2801      	cmp	r0, #1
 8008494:	d001      	beq.n	800849a <osKernelRunning+0xe>
    return 0;
  else
    return 1;
 8008496:	2001      	movs	r0, #1
#else
	return (-1);
#endif	
}
 8008498:	bd08      	pop	{r3, pc}
    return 0;
 800849a:	2000      	movs	r0, #0
 800849c:	e7fc      	b.n	8008498 <osKernelRunning+0xc>

0800849e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800849e:	b508      	push	{r3, lr}
  if (inHandlerMode()) {
 80084a0:	f7ff ffe9 	bl	8008476 <inHandlerMode>
 80084a4:	b910      	cbnz	r0, 80084ac <osKernelSysTick+0xe>
    return xTaskGetTickCountFromISR();
  }
  else {
    return xTaskGetTickCount();
 80084a6:	f001 f907 	bl	80096b8 <xTaskGetTickCount>
  }
}
 80084aa:	bd08      	pop	{r3, pc}
    return xTaskGetTickCountFromISR();
 80084ac:	f001 f90a 	bl	80096c4 <xTaskGetTickCountFromISR>
 80084b0:	e7fb      	b.n	80084aa <osKernelSysTick+0xc>

080084b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80084b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084b6:	b087      	sub	sp, #28
 80084b8:	4604      	mov	r4, r0
 80084ba:	460f      	mov	r7, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80084bc:	6945      	ldr	r5, [r0, #20]
 80084be:	b1a5      	cbz	r5, 80084ea <osThreadCreate+0x38>
 80084c0:	6986      	ldr	r6, [r0, #24]
 80084c2:	b196      	cbz	r6, 80084ea <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80084c4:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80084c8:	f8d0 9000 	ldr.w	r9, [r0]
 80084cc:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80084d0:	f7ff ffcb 	bl	800846a <makeFreeRtosPriority>
 80084d4:	6922      	ldr	r2, [r4, #16]
 80084d6:	9602      	str	r6, [sp, #8]
 80084d8:	9501      	str	r5, [sp, #4]
 80084da:	9000      	str	r0, [sp, #0]
 80084dc:	463b      	mov	r3, r7
 80084de:	4649      	mov	r1, r9
 80084e0:	4640      	mov	r0, r8
 80084e2:	f001 f841 	bl	8009568 <xTaskCreateStatic>
 80084e6:	9005      	str	r0, [sp, #20]
 80084e8:	e013      	b.n	8008512 <osThreadCreate+0x60>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80084ea:	6865      	ldr	r5, [r4, #4]
 80084ec:	6826      	ldr	r6, [r4, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80084ee:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80084f2:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
 80084f6:	f7ff ffb8 	bl	800846a <makeFreeRtosPriority>
 80084fa:	ab05      	add	r3, sp, #20
 80084fc:	9301      	str	r3, [sp, #4]
 80084fe:	9000      	str	r0, [sp, #0]
 8008500:	463b      	mov	r3, r7
 8008502:	fa1f f288 	uxth.w	r2, r8
 8008506:	4631      	mov	r1, r6
 8008508:	4628      	mov	r0, r5
 800850a:	f001 f866 	bl	80095da <xTaskCreate>
 800850e:	2801      	cmp	r0, #1
 8008510:	d103      	bne.n	800851a <osThreadCreate+0x68>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008512:	9805      	ldr	r0, [sp, #20]
}
 8008514:	b007      	add	sp, #28
 8008516:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 800851a:	2000      	movs	r0, #0
 800851c:	e7fa      	b.n	8008514 <osThreadCreate+0x62>

0800851e <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 800851e:	b508      	push	{r3, lr}
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 8008520:	f001 fb10 	bl	8009b44 <xTaskGetCurrentTaskHandle>
#else
	return NULL;
#endif
}
 8008524:	bd08      	pop	{r3, pc}

08008526 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008526:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008528:	4603      	mov	r3, r0
 800852a:	b900      	cbnz	r0, 800852e <osDelay+0x8>
 800852c:	2301      	movs	r3, #1
 800852e:	4618      	mov	r0, r3
 8008530:	f001 f9d0 	bl	80098d4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008534:	2000      	movs	r0, #0
 8008536:	bd08      	pop	{r3, pc}

08008538 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008538:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800853a:	6841      	ldr	r1, [r0, #4]
 800853c:	b119      	cbz	r1, 8008546 <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800853e:	2001      	movs	r0, #1
 8008540:	f000 fbfb 	bl	8008d3a <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008544:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 8008546:	2001      	movs	r0, #1
 8008548:	f000 fbec 	bl	8008d24 <xQueueCreateMutex>
 800854c:	e7fa      	b.n	8008544 <osMutexCreate+0xc>
	...

08008550 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008550:	b530      	push	{r4, r5, lr}
 8008552:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008554:	2300      	movs	r3, #0
 8008556:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8008558:	b350      	cbz	r0, 80085b0 <osMutexWait+0x60>
 800855a:	460c      	mov	r4, r1
 800855c:	4605      	mov	r5, r0
    return osErrorParameter;
  }
  
  ticks = 0;
  if (millisec == osWaitForever) {
 800855e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8008562:	d002      	beq.n	800856a <osMutexWait+0x1a>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8008564:	b919      	cbnz	r1, 800856e <osMutexWait+0x1e>
  ticks = 0;
 8008566:	461c      	mov	r4, r3
 8008568:	e001      	b.n	800856e <osMutexWait+0x1e>
    ticks = portMAX_DELAY;
 800856a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800856e:	f7ff ff82 	bl	8008476 <inHandlerMode>
 8008572:	b190      	cbz	r0, 800859a <osMutexWait+0x4a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008574:	aa01      	add	r2, sp, #4
 8008576:	2100      	movs	r1, #0
 8008578:	4628      	mov	r0, r5
 800857a:	f000 fe27 	bl	80091cc <xQueueReceiveFromISR>
 800857e:	2801      	cmp	r0, #1
 8008580:	d118      	bne.n	80085b4 <osMutexWait+0x64>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008582:	9b01      	ldr	r3, [sp, #4]
 8008584:	b1c3      	cbz	r3, 80085b8 <osMutexWait+0x68>
 8008586:	4b0d      	ldr	r3, [pc, #52]	; (80085bc <osMutexWait+0x6c>)
 8008588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8008596:	2000      	movs	r0, #0
 8008598:	e006      	b.n	80085a8 <osMutexWait+0x58>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800859a:	4621      	mov	r1, r4
 800859c:	4628      	mov	r0, r5
 800859e:	f000 fd47 	bl	8009030 <xQueueSemaphoreTake>
 80085a2:	2801      	cmp	r0, #1
 80085a4:	d102      	bne.n	80085ac <osMutexWait+0x5c>
  return osOK;
 80085a6:	2000      	movs	r0, #0
}
 80085a8:	b003      	add	sp, #12
 80085aa:	bd30      	pop	{r4, r5, pc}
    return osErrorOS;
 80085ac:	20ff      	movs	r0, #255	; 0xff
 80085ae:	e7fb      	b.n	80085a8 <osMutexWait+0x58>
    return osErrorParameter;
 80085b0:	2080      	movs	r0, #128	; 0x80
 80085b2:	e7f9      	b.n	80085a8 <osMutexWait+0x58>
      return osErrorOS;
 80085b4:	20ff      	movs	r0, #255	; 0xff
 80085b6:	e7f7      	b.n	80085a8 <osMutexWait+0x58>
  return osOK;
 80085b8:	2000      	movs	r0, #0
 80085ba:	e7f5      	b.n	80085a8 <osMutexWait+0x58>
 80085bc:	e000ed04 	.word	0xe000ed04

080085c0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80085c0:	b510      	push	{r4, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	4604      	mov	r4, r0
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80085c6:	2300      	movs	r3, #0
 80085c8:	9301      	str	r3, [sp, #4]
  
  if (inHandlerMode()) {
 80085ca:	f7ff ff54 	bl	8008476 <inHandlerMode>
 80085ce:	b188      	cbz	r0, 80085f4 <osMutexRelease+0x34>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80085d0:	a901      	add	r1, sp, #4
 80085d2:	4620      	mov	r0, r4
 80085d4:	f000 fc26 	bl	8008e24 <xQueueGiveFromISR>
 80085d8:	2801      	cmp	r0, #1
 80085da:	d116      	bne.n	800860a <osMutexRelease+0x4a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80085dc:	9b01      	ldr	r3, [sp, #4]
 80085de:	b1b3      	cbz	r3, 800860e <osMutexRelease+0x4e>
 80085e0:	4b0d      	ldr	r3, [pc, #52]	; (8008618 <osMutexRelease+0x58>)
 80085e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	f3bf 8f4f 	dsb	sy
 80085ec:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 80085f0:	2000      	movs	r0, #0
 80085f2:	e008      	b.n	8008606 <osMutexRelease+0x46>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80085f4:	2300      	movs	r3, #0
 80085f6:	461a      	mov	r2, r3
 80085f8:	4619      	mov	r1, r3
 80085fa:	4620      	mov	r0, r4
 80085fc:	f000 fac8 	bl	8008b90 <xQueueGenericSend>
 8008600:	2801      	cmp	r0, #1
 8008602:	d106      	bne.n	8008612 <osMutexRelease+0x52>
  osStatus result = osOK;
 8008604:	2000      	movs	r0, #0
  {
    result = osErrorOS;
  }
  return result;
}
 8008606:	b002      	add	sp, #8
 8008608:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800860a:	20ff      	movs	r0, #255	; 0xff
 800860c:	e7fb      	b.n	8008606 <osMutexRelease+0x46>
  osStatus result = osOK;
 800860e:	2000      	movs	r0, #0
 8008610:	e7f9      	b.n	8008606 <osMutexRelease+0x46>
    result = osErrorOS;
 8008612:	20ff      	movs	r0, #255	; 0xff
 8008614:	e7f7      	b.n	8008606 <osMutexRelease+0x46>
 8008616:	bf00      	nop
 8008618:	e000ed04 	.word	0xe000ed04

0800861c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800861c:	b510      	push	{r4, lr}
 800861e:	b082      	sub	sp, #8
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008620:	6842      	ldr	r2, [r0, #4]
 8008622:	b192      	cbz	r2, 800864a <osSemaphoreCreate+0x2e>
    if (count == 1) {
 8008624:	2901      	cmp	r1, #1
 8008626:	d006      	beq.n	8008636 <osSemaphoreCreate+0x1a>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8008628:	4608      	mov	r0, r1
 800862a:	f000 fa6c 	bl	8008b06 <xQueueCreateCountingSemaphoreStatic>
 800862e:	4604      	mov	r4, r0
#else
    return NULL;
#endif
  }
#endif
}
 8008630:	4620      	mov	r0, r4
 8008632:	b002      	add	sp, #8
 8008634:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008636:	2303      	movs	r3, #3
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	4613      	mov	r3, r2
 800863c:	2200      	movs	r2, #0
 800863e:	4611      	mov	r1, r2
 8008640:	2001      	movs	r0, #1
 8008642:	f000 f9f1 	bl	8008a28 <xQueueGenericCreateStatic>
 8008646:	4604      	mov	r4, r0
 8008648:	e7f2      	b.n	8008630 <osSemaphoreCreate+0x14>
    if (count == 1) {
 800864a:	2901      	cmp	r1, #1
 800864c:	d004      	beq.n	8008658 <osSemaphoreCreate+0x3c>
      return xSemaphoreCreateCounting(count, count);
 800864e:	4608      	mov	r0, r1
 8008650:	f000 fa7e 	bl	8008b50 <xQueueCreateCountingSemaphore>
 8008654:	4604      	mov	r4, r0
 8008656:	e7eb      	b.n	8008630 <osSemaphoreCreate+0x14>
      vSemaphoreCreateBinary(sema);
 8008658:	2203      	movs	r2, #3
 800865a:	2100      	movs	r1, #0
 800865c:	2001      	movs	r0, #1
 800865e:	f000 fa2b 	bl	8008ab8 <xQueueGenericCreate>
 8008662:	4604      	mov	r4, r0
 8008664:	2800      	cmp	r0, #0
 8008666:	d0e3      	beq.n	8008630 <osSemaphoreCreate+0x14>
 8008668:	2300      	movs	r3, #0
 800866a:	461a      	mov	r2, r3
 800866c:	4619      	mov	r1, r3
 800866e:	f000 fa8f 	bl	8008b90 <xQueueGenericSend>
 8008672:	e7dd      	b.n	8008630 <osSemaphoreCreate+0x14>

08008674 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008674:	b510      	push	{r4, lr}
 8008676:	b082      	sub	sp, #8
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008678:	6882      	ldr	r2, [r0, #8]
 800867a:	b10a      	cbz	r2, 8008680 <osMessageCreate+0xc>
 800867c:	68c3      	ldr	r3, [r0, #12]
 800867e:	b933      	cbnz	r3, 800868e <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008680:	2200      	movs	r2, #0
 8008682:	6841      	ldr	r1, [r0, #4]
 8008684:	6800      	ldr	r0, [r0, #0]
 8008686:	f000 fa17 	bl	8008ab8 <xQueueGenericCreate>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800868a:	b002      	add	sp, #8
 800868c:	bd10      	pop	{r4, pc}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800868e:	6841      	ldr	r1, [r0, #4]
 8008690:	6800      	ldr	r0, [r0, #0]
 8008692:	2400      	movs	r4, #0
 8008694:	9400      	str	r4, [sp, #0]
 8008696:	f000 f9c7 	bl	8008a28 <xQueueGenericCreateStatic>
 800869a:	e7f6      	b.n	800868a <osMessageCreate+0x16>

0800869c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800869c:	b530      	push	{r4, r5, lr}
 800869e:	b085      	sub	sp, #20
 80086a0:	4604      	mov	r4, r0
 80086a2:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80086a4:	2300      	movs	r3, #0
 80086a6:	9303      	str	r3, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
 80086a8:	4615      	mov	r5, r2
 80086aa:	b902      	cbnz	r2, 80086ae <osMessagePut+0x12>
    ticks = 1;
 80086ac:	2501      	movs	r5, #1
  }
  
  if (inHandlerMode()) {
 80086ae:	f7ff fee2 	bl	8008476 <inHandlerMode>
 80086b2:	b198      	cbz	r0, 80086dc <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80086b4:	2300      	movs	r3, #0
 80086b6:	aa03      	add	r2, sp, #12
 80086b8:	a901      	add	r1, sp, #4
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 fb4c 	bl	8008d58 <xQueueGenericSendFromISR>
 80086c0:	2801      	cmp	r0, #1
 80086c2:	d118      	bne.n	80086f6 <osMessagePut+0x5a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80086c4:	9b03      	ldr	r3, [sp, #12]
 80086c6:	b1c3      	cbz	r3, 80086fa <osMessagePut+0x5e>
 80086c8:	4b0d      	ldr	r3, [pc, #52]	; (8008700 <osMessagePut+0x64>)
 80086ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ce:	601a      	str	r2, [r3, #0]
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	f3bf 8f6f 	isb	sy
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 80086d8:	2000      	movs	r0, #0
 80086da:	e008      	b.n	80086ee <osMessagePut+0x52>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80086dc:	2300      	movs	r3, #0
 80086de:	462a      	mov	r2, r5
 80086e0:	a901      	add	r1, sp, #4
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 fa54 	bl	8008b90 <xQueueGenericSend>
 80086e8:	2801      	cmp	r0, #1
 80086ea:	d102      	bne.n	80086f2 <osMessagePut+0x56>
  return osOK;
 80086ec:	2000      	movs	r0, #0
}
 80086ee:	b005      	add	sp, #20
 80086f0:	bd30      	pop	{r4, r5, pc}
      return osErrorOS;
 80086f2:	20ff      	movs	r0, #255	; 0xff
 80086f4:	e7fb      	b.n	80086ee <osMessagePut+0x52>
      return osErrorOS;
 80086f6:	20ff      	movs	r0, #255	; 0xff
 80086f8:	e7f9      	b.n	80086ee <osMessagePut+0x52>
  return osOK;
 80086fa:	2000      	movs	r0, #0
 80086fc:	e7f7      	b.n	80086ee <osMessagePut+0x52>
 80086fe:	bf00      	nop
 8008700:	e000ed04 	.word	0xe000ed04

08008704 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008704:	b570      	push	{r4, r5, r6, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	4604      	mov	r4, r0
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800870a:	9102      	str	r1, [sp, #8]
  event.value.v = 0;
 800870c:	2300      	movs	r3, #0
 800870e:	9301      	str	r3, [sp, #4]
  
  if (queue_id == NULL) {
 8008710:	b149      	cbz	r1, 8008726 <osMessageGet+0x22>
 8008712:	460d      	mov	r5, r1
 8008714:	4616      	mov	r6, r2
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 8008716:	2300      	movs	r3, #0
 8008718:	9303      	str	r3, [sp, #12]
  
  ticks = 0;
  if (millisec == osWaitForever) {
 800871a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800871e:	d00b      	beq.n	8008738 <osMessageGet+0x34>
    ticks = portMAX_DELAY;
  }
  else if (millisec != 0) {
 8008720:	b962      	cbnz	r2, 800873c <osMessageGet+0x38>
  ticks = 0;
 8008722:	461e      	mov	r6, r3
 8008724:	e00a      	b.n	800873c <osMessageGet+0x38>
    event.status = osErrorParameter;
 8008726:	ab04      	add	r3, sp, #16
 8008728:	2280      	movs	r2, #128	; 0x80
 800872a:	f843 2d10 	str.w	r2, [r3, #-16]!
    return event;
 800872e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008736:	e02a      	b.n	800878e <osMessageGet+0x8a>
    ticks = portMAX_DELAY;
 8008738:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800873c:	f7ff fe9b 	bl	8008476 <inHandlerMode>
 8008740:	b1b0      	cbz	r0, 8008770 <osMessageGet+0x6c>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008742:	aa03      	add	r2, sp, #12
 8008744:	a901      	add	r1, sp, #4
 8008746:	4628      	mov	r0, r5
 8008748:	f000 fd40 	bl	80091cc <xQueueReceiveFromISR>
 800874c:	2801      	cmp	r0, #1
 800874e:	d00c      	beq.n	800876a <osMessageGet+0x66>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = osOK;
 8008750:	2300      	movs	r3, #0
 8008752:	9300      	str	r3, [sp, #0]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008754:	9b03      	ldr	r3, [sp, #12]
 8008756:	b1ab      	cbz	r3, 8008784 <osMessageGet+0x80>
 8008758:	4b11      	ldr	r3, [pc, #68]	; (80087a0 <osMessageGet+0x9c>)
 800875a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800875e:	601a      	str	r2, [r3, #0]
 8008760:	f3bf 8f4f 	dsb	sy
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	e00c      	b.n	8008784 <osMessageGet+0x80>
      event.status = osEventMessage;
 800876a:	2310      	movs	r3, #16
 800876c:	9300      	str	r3, [sp, #0]
 800876e:	e7f1      	b.n	8008754 <osMessageGet+0x50>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008770:	4632      	mov	r2, r6
 8008772:	a901      	add	r1, sp, #4
 8008774:	4628      	mov	r0, r5
 8008776:	f000 fbaf 	bl	8008ed8 <xQueueReceive>
 800877a:	2801      	cmp	r0, #1
 800877c:	d00a      	beq.n	8008794 <osMessageGet+0x90>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800877e:	b966      	cbnz	r6, 800879a <osMessageGet+0x96>
 8008780:	2300      	movs	r3, #0
 8008782:	9300      	str	r3, [sp, #0]
    }
  }
  
  return event;
 8008784:	466b      	mov	r3, sp
 8008786:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800878a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800878e:	4620      	mov	r0, r4
 8008790:	b004      	add	sp, #16
 8008792:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 8008794:	2310      	movs	r3, #16
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	e7f4      	b.n	8008784 <osMessageGet+0x80>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800879a:	2340      	movs	r3, #64	; 0x40
 800879c:	e7f1      	b.n	8008782 <osMessageGet+0x7e>
 800879e:	bf00      	nop
 80087a0:	e000ed04 	.word	0xe000ed04

080087a4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087a4:	f100 0308 	add.w	r3, r0, #8
 80087a8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80087aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087ae:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087b0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087b2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80087b8:	4770      	bx	lr

080087ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80087be:	4770      	bx	lr

080087c0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80087c0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80087c2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80087c4:	689a      	ldr	r2, [r3, #8]
 80087c6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80087c8:	689a      	ldr	r2, [r3, #8]
 80087ca:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80087cc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80087ce:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80087d0:	6803      	ldr	r3, [r0, #0]
 80087d2:	3301      	adds	r3, #1
 80087d4:	6003      	str	r3, [r0, #0]
}
 80087d6:	4770      	bx	lr

080087d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80087d8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80087da:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80087dc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80087e0:	d002      	beq.n	80087e8 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087e2:	f100 0208 	add.w	r2, r0, #8
 80087e6:	e002      	b.n	80087ee <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 80087e8:	6902      	ldr	r2, [r0, #16]
 80087ea:	e004      	b.n	80087f6 <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80087ec:	461a      	mov	r2, r3
 80087ee:	6853      	ldr	r3, [r2, #4]
 80087f0:	681c      	ldr	r4, [r3, #0]
 80087f2:	42ac      	cmp	r4, r5
 80087f4:	d9fa      	bls.n	80087ec <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80087f6:	6853      	ldr	r3, [r2, #4]
 80087f8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80087fa:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80087fc:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80087fe:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008800:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8008802:	6803      	ldr	r3, [r0, #0]
 8008804:	3301      	adds	r3, #1
 8008806:	6003      	str	r3, [r0, #0]
}
 8008808:	bc30      	pop	{r4, r5}
 800880a:	4770      	bx	lr

0800880c <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800880c:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800880e:	6842      	ldr	r2, [r0, #4]
 8008810:	6881      	ldr	r1, [r0, #8]
 8008812:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008814:	6882      	ldr	r2, [r0, #8]
 8008816:	6841      	ldr	r1, [r0, #4]
 8008818:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800881a:	685a      	ldr	r2, [r3, #4]
 800881c:	4282      	cmp	r2, r0
 800881e:	d006      	beq.n	800882e <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008820:	2200      	movs	r2, #0
 8008822:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	3a01      	subs	r2, #1
 8008828:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800882a:	6818      	ldr	r0, [r3, #0]
}
 800882c:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800882e:	6882      	ldr	r2, [r0, #8]
 8008830:	605a      	str	r2, [r3, #4]
 8008832:	e7f5      	b.n	8008820 <uxListRemove+0x14>

08008834 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008834:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008836:	b123      	cbz	r3, 8008842 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008838:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800883a:	6818      	ldr	r0, [r3, #0]
 800883c:	f1c0 0007 	rsb	r0, r0, #7
 8008840:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008842:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 8008844:	4770      	bx	lr

08008846 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008846:	b510      	push	{r4, lr}
 8008848:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800884a:	f001 fb23 	bl	8009e94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800884e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008850:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008852:	429a      	cmp	r2, r3
 8008854:	d004      	beq.n	8008860 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 8008856:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 8008858:	f001 fb3e 	bl	8009ed8 <vPortExitCritical>

	return xReturn;
}
 800885c:	4620      	mov	r0, r4
 800885e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 8008860:	2401      	movs	r4, #1
 8008862:	e7f9      	b.n	8008858 <prvIsQueueFull+0x12>

08008864 <prvIsQueueEmpty>:
{
 8008864:	b510      	push	{r4, lr}
 8008866:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008868:	f001 fb14 	bl	8009e94 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800886c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800886e:	b123      	cbz	r3, 800887a <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 8008870:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8008872:	f001 fb31 	bl	8009ed8 <vPortExitCritical>
}
 8008876:	4620      	mov	r0, r4
 8008878:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800887a:	2401      	movs	r4, #1
 800887c:	e7f9      	b.n	8008872 <prvIsQueueEmpty+0xe>

0800887e <prvCopyDataToQueue>:
{
 800887e:	b570      	push	{r4, r5, r6, lr}
 8008880:	4604      	mov	r4, r0
 8008882:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008884:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008886:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008888:	b95a      	cbnz	r2, 80088a2 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800888a:	6803      	ldr	r3, [r0, #0]
 800888c:	b11b      	cbz	r3, 8008896 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800888e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008890:	3501      	adds	r5, #1
 8008892:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8008894:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008896:	6840      	ldr	r0, [r0, #4]
 8008898:	f001 f9cc 	bl	8009c34 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800889c:	2300      	movs	r3, #0
 800889e:	6063      	str	r3, [r4, #4]
 80088a0:	e7f6      	b.n	8008890 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 80088a2:	b96e      	cbnz	r6, 80088c0 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80088a4:	6880      	ldr	r0, [r0, #8]
 80088a6:	f016 f8d2 	bl	801ea4e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80088aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80088ac:	68a3      	ldr	r3, [r4, #8]
 80088ae:	4413      	add	r3, r2
 80088b0:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088b2:	6862      	ldr	r2, [r4, #4]
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d319      	bcc.n	80088ec <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80088bc:	2000      	movs	r0, #0
 80088be:	e7e7      	b.n	8008890 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088c0:	68c0      	ldr	r0, [r0, #12]
 80088c2:	f016 f8c4 	bl	801ea4e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80088c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80088c8:	4252      	negs	r2, r2
 80088ca:	68e3      	ldr	r3, [r4, #12]
 80088cc:	4413      	add	r3, r2
 80088ce:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088d0:	6821      	ldr	r1, [r4, #0]
 80088d2:	428b      	cmp	r3, r1
 80088d4:	d202      	bcs.n	80088dc <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80088d6:	6863      	ldr	r3, [r4, #4]
 80088d8:	441a      	add	r2, r3
 80088da:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80088dc:	2e02      	cmp	r6, #2
 80088de:	d001      	beq.n	80088e4 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 80088e0:	2000      	movs	r0, #0
 80088e2:	e7d5      	b.n	8008890 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088e4:	b125      	cbz	r5, 80088f0 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80088e6:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 80088e8:	2000      	movs	r0, #0
 80088ea:	e7d1      	b.n	8008890 <prvCopyDataToQueue+0x12>
 80088ec:	2000      	movs	r0, #0
 80088ee:	e7cf      	b.n	8008890 <prvCopyDataToQueue+0x12>
 80088f0:	2000      	movs	r0, #0
 80088f2:	e7cd      	b.n	8008890 <prvCopyDataToQueue+0x12>

080088f4 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80088f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80088f6:	b172      	cbz	r2, 8008916 <prvCopyDataFromQueue+0x22>
{
 80088f8:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80088fa:	68c3      	ldr	r3, [r0, #12]
 80088fc:	4413      	add	r3, r2
 80088fe:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008900:	6844      	ldr	r4, [r0, #4]
 8008902:	42a3      	cmp	r3, r4
 8008904:	d301      	bcc.n	800890a <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008906:	6803      	ldr	r3, [r0, #0]
 8008908:	60c3      	str	r3, [r0, #12]
 800890a:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800890c:	68c1      	ldr	r1, [r0, #12]
 800890e:	4620      	mov	r0, r4
 8008910:	f016 f89d 	bl	801ea4e <memcpy>
}
 8008914:	bd10      	pop	{r4, pc}
 8008916:	4770      	bx	lr

08008918 <prvUnlockQueue>:
{
 8008918:	b538      	push	{r3, r4, r5, lr}
 800891a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800891c:	f001 faba 	bl	8009e94 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008920:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8008924:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008926:	e003      	b.n	8008930 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8008928:	f001 f904 	bl	8009b34 <vTaskMissedYield>
			--cTxLock;
 800892c:	3c01      	subs	r4, #1
 800892e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008930:	2c00      	cmp	r4, #0
 8008932:	dd08      	ble.n	8008946 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008934:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008936:	b133      	cbz	r3, 8008946 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008938:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800893c:	f001 f86e 	bl	8009a1c <xTaskRemoveFromEventList>
 8008940:	2800      	cmp	r0, #0
 8008942:	d0f3      	beq.n	800892c <prvUnlockQueue+0x14>
 8008944:	e7f0      	b.n	8008928 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 8008946:	23ff      	movs	r3, #255	; 0xff
 8008948:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800894c:	f001 fac4 	bl	8009ed8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008950:	f001 faa0 	bl	8009e94 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008954:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8008958:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800895a:	e003      	b.n	8008964 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 800895c:	f001 f8ea 	bl	8009b34 <vTaskMissedYield>
				--cRxLock;
 8008960:	3c01      	subs	r4, #1
 8008962:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008964:	2c00      	cmp	r4, #0
 8008966:	dd08      	ble.n	800897a <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008968:	692b      	ldr	r3, [r5, #16]
 800896a:	b133      	cbz	r3, 800897a <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800896c:	f105 0010 	add.w	r0, r5, #16
 8008970:	f001 f854 	bl	8009a1c <xTaskRemoveFromEventList>
 8008974:	2800      	cmp	r0, #0
 8008976:	d0f3      	beq.n	8008960 <prvUnlockQueue+0x48>
 8008978:	e7f0      	b.n	800895c <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800897a:	23ff      	movs	r3, #255	; 0xff
 800897c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8008980:	f001 faaa 	bl	8009ed8 <vPortExitCritical>
}
 8008984:	bd38      	pop	{r3, r4, r5, pc}
	...

08008988 <xQueueGenericReset>:
{
 8008988:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800898a:	b940      	cbnz	r0, 800899e <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	e7fe      	b.n	800899c <xQueueGenericReset+0x14>
 800899e:	4604      	mov	r4, r0
 80089a0:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80089a2:	f001 fa77 	bl	8009e94 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80089a6:	6821      	ldr	r1, [r4, #0]
 80089a8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80089aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089ac:	fb03 1002 	mla	r0, r3, r2, r1
 80089b0:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80089b2:	2000      	movs	r0, #0
 80089b4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80089b6:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80089b8:	3a01      	subs	r2, #1
 80089ba:	fb02 1303 	mla	r3, r2, r3, r1
 80089be:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089c0:	23ff      	movs	r3, #255	; 0xff
 80089c2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80089ca:	b9a5      	cbnz	r5, 80089f6 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	b91b      	cbnz	r3, 80089d8 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 80089d0:	f001 fa82 	bl	8009ed8 <vPortExitCritical>
}
 80089d4:	2001      	movs	r0, #1
 80089d6:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089d8:	f104 0010 	add.w	r0, r4, #16
 80089dc:	f001 f81e 	bl	8009a1c <xTaskRemoveFromEventList>
 80089e0:	2800      	cmp	r0, #0
 80089e2:	d0f5      	beq.n	80089d0 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 80089e4:	4b08      	ldr	r3, [pc, #32]	; (8008a08 <xQueueGenericReset+0x80>)
 80089e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ea:	601a      	str	r2, [r3, #0]
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	e7ec      	b.n	80089d0 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80089f6:	f104 0010 	add.w	r0, r4, #16
 80089fa:	f7ff fed3 	bl	80087a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80089fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a02:	f7ff fecf 	bl	80087a4 <vListInitialise>
 8008a06:	e7e3      	b.n	80089d0 <xQueueGenericReset+0x48>
 8008a08:	e000ed04 	.word	0xe000ed04

08008a0c <prvInitialiseNewQueue>:
{
 8008a0c:	b510      	push	{r4, lr}
 8008a0e:	9b02      	ldr	r3, [sp, #8]
	if( uxItemSize == ( UBaseType_t ) 0 )
 8008a10:	460c      	mov	r4, r1
 8008a12:	b139      	cbz	r1, 8008a24 <prvInitialiseNewQueue+0x18>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008a14:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8008a16:	63d8      	str	r0, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008a18:	641c      	str	r4, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7ff ffb3 	bl	8008988 <xQueueGenericReset>
}
 8008a22:	bd10      	pop	{r4, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008a24:	601b      	str	r3, [r3, #0]
 8008a26:	e7f6      	b.n	8008a16 <prvInitialiseNewQueue+0xa>

08008a28 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a28:	b940      	cbnz	r0, 8008a3c <xQueueGenericCreateStatic+0x14>
 8008a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2e:	f383 8811 	msr	BASEPRI, r3
 8008a32:	f3bf 8f6f 	isb	sy
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	e7fe      	b.n	8008a3a <xQueueGenericCreateStatic+0x12>
	{
 8008a3c:	b510      	push	{r4, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 8008a42:	b153      	cbz	r3, 8008a5a <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008a44:	b192      	cbz	r2, 8008a6c <xQueueGenericCreateStatic+0x44>
 8008a46:	b989      	cbnz	r1, 8008a6c <xQueueGenericCreateStatic+0x44>
 8008a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4c:	f383 8811 	msr	BASEPRI, r3
 8008a50:	f3bf 8f6f 	isb	sy
 8008a54:	f3bf 8f4f 	dsb	sy
 8008a58:	e7fe      	b.n	8008a58 <xQueueGenericCreateStatic+0x30>
 8008a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5e:	f383 8811 	msr	BASEPRI, r3
 8008a62:	f3bf 8f6f 	isb	sy
 8008a66:	f3bf 8f4f 	dsb	sy
 8008a6a:	e7fe      	b.n	8008a6a <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008a6c:	b94a      	cbnz	r2, 8008a82 <xQueueGenericCreateStatic+0x5a>
 8008a6e:	b141      	cbz	r1, 8008a82 <xQueueGenericCreateStatic+0x5a>
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	e7fe      	b.n	8008a80 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008a82:	2048      	movs	r0, #72	; 0x48
 8008a84:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008a86:	9803      	ldr	r0, [sp, #12]
 8008a88:	2848      	cmp	r0, #72	; 0x48
 8008a8a:	d008      	beq.n	8008a9e <xQueueGenericCreateStatic+0x76>
 8008a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	e7fe      	b.n	8008a9c <xQueueGenericCreateStatic+0x74>
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008aa8:	9400      	str	r4, [sp, #0]
 8008aaa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8008aae:	f7ff ffad 	bl	8008a0c <prvInitialiseNewQueue>
	}
 8008ab2:	4620      	mov	r0, r4
 8008ab4:	b004      	add	sp, #16
 8008ab6:	bd10      	pop	{r4, pc}

08008ab8 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008ab8:	b940      	cbnz	r0, 8008acc <xQueueGenericCreate+0x14>
 8008aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	e7fe      	b.n	8008aca <xQueueGenericCreate+0x12>
	{
 8008acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8008ad2:	b111      	cbz	r1, 8008ada <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ad4:	fb01 f000 	mul.w	r0, r1, r0
 8008ad8:	e000      	b.n	8008adc <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 8008ada:	2000      	movs	r0, #0
 8008adc:	4617      	mov	r7, r2
 8008ade:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008ae0:	3048      	adds	r0, #72	; 0x48
 8008ae2:	f001 fb79 	bl	800a1d8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	b150      	cbz	r0, 8008b00 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008aea:	2300      	movs	r3, #0
 8008aec:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008af0:	9000      	str	r0, [sp, #0]
 8008af2:	463b      	mov	r3, r7
 8008af4:	f100 0248 	add.w	r2, r0, #72	; 0x48
 8008af8:	4621      	mov	r1, r4
 8008afa:	4630      	mov	r0, r6
 8008afc:	f7ff ff86 	bl	8008a0c <prvInitialiseNewQueue>
	}
 8008b00:	4628      	mov	r0, r5
 8008b02:	b003      	add	sp, #12
 8008b04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b06 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8008b06:	b940      	cbnz	r0, 8008b1a <xQueueCreateCountingSemaphoreStatic+0x14>
 8008b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	e7fe      	b.n	8008b18 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008b1a:	4288      	cmp	r0, r1
 8008b1c:	d208      	bcs.n	8008b30 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8008b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	e7fe      	b.n	8008b2e <xQueueCreateCountingSemaphoreStatic+0x28>
	{
 8008b30:	b510      	push	{r4, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	4613      	mov	r3, r2
 8008b36:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008b38:	2202      	movs	r2, #2
 8008b3a:	9200      	str	r2, [sp, #0]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	4611      	mov	r1, r2
 8008b40:	f7ff ff72 	bl	8008a28 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8008b44:	4603      	mov	r3, r0
 8008b46:	b100      	cbz	r0, 8008b4a <xQueueCreateCountingSemaphoreStatic+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008b48:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	b002      	add	sp, #8
 8008b4e:	bd10      	pop	{r4, pc}

08008b50 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8008b50:	b940      	cbnz	r0, 8008b64 <xQueueCreateCountingSemaphore+0x14>
 8008b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	e7fe      	b.n	8008b62 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008b64:	4288      	cmp	r0, r1
 8008b66:	d208      	bcs.n	8008b7a <xQueueCreateCountingSemaphore+0x2a>
 8008b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b6c:	f383 8811 	msr	BASEPRI, r3
 8008b70:	f3bf 8f6f 	isb	sy
 8008b74:	f3bf 8f4f 	dsb	sy
 8008b78:	e7fe      	b.n	8008b78 <xQueueCreateCountingSemaphore+0x28>
	{
 8008b7a:	b510      	push	{r4, lr}
 8008b7c:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008b7e:	2202      	movs	r2, #2
 8008b80:	2100      	movs	r1, #0
 8008b82:	f7ff ff99 	bl	8008ab8 <xQueueGenericCreate>
		if( xHandle != NULL )
 8008b86:	4603      	mov	r3, r0
 8008b88:	b100      	cbz	r0, 8008b8c <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008b8a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	bd10      	pop	{r4, pc}

08008b90 <xQueueGenericSend>:
{
 8008b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b92:	b085      	sub	sp, #20
 8008b94:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8008b96:	b160      	cbz	r0, 8008bb2 <xQueueGenericSend+0x22>
 8008b98:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b9a:	b999      	cbnz	r1, 8008bc4 <xQueueGenericSend+0x34>
 8008b9c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008b9e:	b18a      	cbz	r2, 8008bc4 <xQueueGenericSend+0x34>
 8008ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	e7fe      	b.n	8008bb0 <xQueueGenericSend+0x20>
 8008bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	e7fe      	b.n	8008bc2 <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d10b      	bne.n	8008be0 <xQueueGenericSend+0x50>
 8008bc8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8008bca:	2a01      	cmp	r2, #1
 8008bcc:	d008      	beq.n	8008be0 <xQueueGenericSend+0x50>
 8008bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	e7fe      	b.n	8008bde <xQueueGenericSend+0x4e>
 8008be0:	461e      	mov	r6, r3
 8008be2:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008be4:	f000 ffb4 	bl	8009b50 <xTaskGetSchedulerState>
 8008be8:	b950      	cbnz	r0, 8008c00 <xQueueGenericSend+0x70>
 8008bea:	9b01      	ldr	r3, [sp, #4]
 8008bec:	b153      	cbz	r3, 8008c04 <xQueueGenericSend+0x74>
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	e7fe      	b.n	8008bfe <xQueueGenericSend+0x6e>
 8008c00:	2500      	movs	r5, #0
 8008c02:	e03a      	b.n	8008c7a <xQueueGenericSend+0xea>
 8008c04:	2500      	movs	r5, #0
 8008c06:	e038      	b.n	8008c7a <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c08:	4632      	mov	r2, r6
 8008c0a:	4639      	mov	r1, r7
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	f7ff fe36 	bl	800887e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c14:	b94b      	cbnz	r3, 8008c2a <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 8008c16:	b1a8      	cbz	r0, 8008c44 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 8008c18:	4b3b      	ldr	r3, [pc, #236]	; (8008d08 <xQueueGenericSend+0x178>)
 8008c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c1e:	601a      	str	r2, [r3, #0]
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	e00c      	b.n	8008c44 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008c2e:	f000 fef5 	bl	8009a1c <xTaskRemoveFromEventList>
 8008c32:	b138      	cbz	r0, 8008c44 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 8008c34:	4b34      	ldr	r3, [pc, #208]	; (8008d08 <xQueueGenericSend+0x178>)
 8008c36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c3a:	601a      	str	r2, [r3, #0]
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008c44:	f001 f948 	bl	8009ed8 <vPortExitCritical>
				return pdPASS;
 8008c48:	2001      	movs	r0, #1
}
 8008c4a:	b005      	add	sp, #20
 8008c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 8008c4e:	f001 f943 	bl	8009ed8 <vPortExitCritical>
					return errQUEUE_FULL;
 8008c52:	2000      	movs	r0, #0
 8008c54:	e7f9      	b.n	8008c4a <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c56:	a802      	add	r0, sp, #8
 8008c58:	f000 ff22 	bl	8009aa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c5c:	2501      	movs	r5, #1
 8008c5e:	e019      	b.n	8008c94 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 8008c60:	2300      	movs	r3, #0
 8008c62:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008c66:	e021      	b.n	8008cac <xQueueGenericSend+0x11c>
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008c6e:	e023      	b.n	8008cb8 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 8008c70:	4620      	mov	r0, r4
 8008c72:	f7ff fe51 	bl	8008918 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c76:	f000 fdb5 	bl	80097e4 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8008c7a:	f001 f90b 	bl	8009e94 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c7e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008c80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d3c0      	bcc.n	8008c08 <xQueueGenericSend+0x78>
 8008c86:	2e02      	cmp	r6, #2
 8008c88:	d0be      	beq.n	8008c08 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c8a:	9b01      	ldr	r3, [sp, #4]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d0de      	beq.n	8008c4e <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 8008c90:	2d00      	cmp	r5, #0
 8008c92:	d0e0      	beq.n	8008c56 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 8008c94:	f001 f920 	bl	8009ed8 <vPortExitCritical>
		vTaskSuspendAll();
 8008c98:	f000 fd04 	bl	80096a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c9c:	f001 f8fa 	bl	8009e94 <vPortEnterCritical>
 8008ca0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008ca4:	b25b      	sxtb	r3, r3
 8008ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008caa:	d0d9      	beq.n	8008c60 <xQueueGenericSend+0xd0>
 8008cac:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008cb0:	b25b      	sxtb	r3, r3
 8008cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cb6:	d0d7      	beq.n	8008c68 <xQueueGenericSend+0xd8>
 8008cb8:	f001 f90e 	bl	8009ed8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cbc:	a901      	add	r1, sp, #4
 8008cbe:	a802      	add	r0, sp, #8
 8008cc0:	f000 fef8 	bl	8009ab4 <xTaskCheckForTimeOut>
 8008cc4:	b9c8      	cbnz	r0, 8008cfa <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f7ff fdbd 	bl	8008846 <prvIsQueueFull>
 8008ccc:	2800      	cmp	r0, #0
 8008cce:	d0cf      	beq.n	8008c70 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008cd0:	9901      	ldr	r1, [sp, #4]
 8008cd2:	f104 0010 	add.w	r0, r4, #16
 8008cd6:	f000 fe87 	bl	80099e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f7ff fe1c 	bl	8008918 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ce0:	f000 fd80 	bl	80097e4 <xTaskResumeAll>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d1c8      	bne.n	8008c7a <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8008ce8:	4b07      	ldr	r3, [pc, #28]	; (8008d08 <xQueueGenericSend+0x178>)
 8008cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cee:	601a      	str	r2, [r3, #0]
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	e7bf      	b.n	8008c7a <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f7ff fe0c 	bl	8008918 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d00:	f000 fd70 	bl	80097e4 <xTaskResumeAll>
			return errQUEUE_FULL;
 8008d04:	2000      	movs	r0, #0
 8008d06:	e7a0      	b.n	8008c4a <xQueueGenericSend+0xba>
 8008d08:	e000ed04 	.word	0xe000ed04

08008d0c <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8008d0c:	b148      	cbz	r0, 8008d22 <prvInitialiseMutex+0x16>
	{
 8008d0e:	b508      	push	{r3, lr}
			pxNewQueue->pxMutexHolder = NULL;
 8008d10:	2100      	movs	r1, #0
 8008d12:	6041      	str	r1, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008d14:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8008d16:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008d18:	460b      	mov	r3, r1
 8008d1a:	460a      	mov	r2, r1
 8008d1c:	f7ff ff38 	bl	8008b90 <xQueueGenericSend>
	}
 8008d20:	bd08      	pop	{r3, pc}
 8008d22:	4770      	bx	lr

08008d24 <xQueueCreateMutex>:
	{
 8008d24:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008d26:	4602      	mov	r2, r0
 8008d28:	2100      	movs	r1, #0
 8008d2a:	2001      	movs	r0, #1
 8008d2c:	f7ff fec4 	bl	8008ab8 <xQueueGenericCreate>
 8008d30:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8008d32:	f7ff ffeb 	bl	8008d0c <prvInitialiseMutex>
	}
 8008d36:	4620      	mov	r0, r4
 8008d38:	bd10      	pop	{r4, pc}

08008d3a <xQueueCreateMutexStatic>:
	{
 8008d3a:	b510      	push	{r4, lr}
 8008d3c:	b082      	sub	sp, #8
		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008d3e:	9000      	str	r0, [sp, #0]
 8008d40:	460b      	mov	r3, r1
 8008d42:	2200      	movs	r2, #0
 8008d44:	4611      	mov	r1, r2
 8008d46:	2001      	movs	r0, #1
 8008d48:	f7ff fe6e 	bl	8008a28 <xQueueGenericCreateStatic>
 8008d4c:	4604      	mov	r4, r0
		prvInitialiseMutex( pxNewQueue );
 8008d4e:	f7ff ffdd 	bl	8008d0c <prvInitialiseMutex>
	}
 8008d52:	4620      	mov	r0, r4
 8008d54:	b002      	add	sp, #8
 8008d56:	bd10      	pop	{r4, pc}

08008d58 <xQueueGenericSendFromISR>:
{
 8008d58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8008d5c:	b160      	cbz	r0, 8008d78 <xQueueGenericSendFromISR+0x20>
 8008d5e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d60:	b999      	cbnz	r1, 8008d8a <xQueueGenericSendFromISR+0x32>
 8008d62:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8008d64:	b188      	cbz	r0, 8008d8a <xQueueGenericSendFromISR+0x32>
 8008d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d6a:	f383 8811 	msr	BASEPRI, r3
 8008d6e:	f3bf 8f6f 	isb	sy
 8008d72:	f3bf 8f4f 	dsb	sy
 8008d76:	e7fe      	b.n	8008d76 <xQueueGenericSendFromISR+0x1e>
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	e7fe      	b.n	8008d88 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d10b      	bne.n	8008da6 <xQueueGenericSendFromISR+0x4e>
 8008d8e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008d90:	2801      	cmp	r0, #1
 8008d92:	d008      	beq.n	8008da6 <xQueueGenericSendFromISR+0x4e>
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	e7fe      	b.n	8008da4 <xQueueGenericSendFromISR+0x4c>
 8008da6:	461f      	mov	r7, r3
 8008da8:	4690      	mov	r8, r2
 8008daa:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008dac:	f001 f998 	bl	800a0e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008db0:	f3ef 8611 	mrs	r6, BASEPRI
 8008db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008dc4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008dc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d303      	bcc.n	8008dd4 <xQueueGenericSendFromISR+0x7c>
 8008dcc:	2f02      	cmp	r7, #2
 8008dce:	d001      	beq.n	8008dd4 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	e00f      	b.n	8008df4 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008dd4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8008dd8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008dda:	463a      	mov	r2, r7
 8008ddc:	4649      	mov	r1, r9
 8008dde:	4620      	mov	r0, r4
 8008de0:	f7ff fd4d 	bl	800887e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008de4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008de8:	d008      	beq.n	8008dfc <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008dea:	1c6b      	adds	r3, r5, #1
 8008dec:	b25b      	sxtb	r3, r3
 8008dee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8008df2:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008df4:	f386 8811 	msr	BASEPRI, r6
}
 8008df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008dfe:	b15b      	cbz	r3, 8008e18 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e00:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008e04:	f000 fe0a 	bl	8009a1c <xTaskRemoveFromEventList>
 8008e08:	b140      	cbz	r0, 8008e1c <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8008e0a:	f1b8 0f00 	cmp.w	r8, #0
 8008e0e:	d007      	beq.n	8008e20 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e10:	2001      	movs	r0, #1
 8008e12:	f8c8 0000 	str.w	r0, [r8]
 8008e16:	e7ed      	b.n	8008df4 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 8008e18:	2001      	movs	r0, #1
 8008e1a:	e7eb      	b.n	8008df4 <xQueueGenericSendFromISR+0x9c>
 8008e1c:	2001      	movs	r0, #1
 8008e1e:	e7e9      	b.n	8008df4 <xQueueGenericSendFromISR+0x9c>
 8008e20:	2001      	movs	r0, #1
 8008e22:	e7e7      	b.n	8008df4 <xQueueGenericSendFromISR+0x9c>

08008e24 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8008e24:	b160      	cbz	r0, 8008e40 <xQueueGiveFromISR+0x1c>
{
 8008e26:	b570      	push	{r4, r5, r6, lr}
 8008e28:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8008e2a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008e2c:	b18b      	cbz	r3, 8008e52 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8008e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e32:	f383 8811 	msr	BASEPRI, r3
 8008e36:	f3bf 8f6f 	isb	sy
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	e7fe      	b.n	8008e3e <xQueueGiveFromISR+0x1a>
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	e7fe      	b.n	8008e50 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008e52:	6803      	ldr	r3, [r0, #0]
 8008e54:	b32b      	cbz	r3, 8008ea2 <xQueueGiveFromISR+0x7e>
 8008e56:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e58:	f001 f942 	bl	800a0e0 <vPortValidateInterruptPriority>
	__asm volatile
 8008e5c:	f3ef 8511 	mrs	r5, BASEPRI
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e70:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008e72:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d926      	bls.n	8008ec6 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e78:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008e7c:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008e7e:	3201      	adds	r2, #1
 8008e80:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8008e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e86:	d118      	bne.n	8008eba <xQueueGiveFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e8a:	b1f3      	cbz	r3, 8008eca <xQueueGiveFromISR+0xa6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008e90:	f000 fdc4 	bl	8009a1c <xTaskRemoveFromEventList>
 8008e94:	b1d8      	cbz	r0, 8008ece <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8008e96:	b1e6      	cbz	r6, 8008ed2 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008e98:	2001      	movs	r0, #1
 8008e9a:	6030      	str	r0, [r6, #0]
	__asm volatile
 8008e9c:	f385 8811 	msr	BASEPRI, r5
}
 8008ea0:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8008ea2:	6843      	ldr	r3, [r0, #4]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0d6      	beq.n	8008e56 <xQueueGiveFromISR+0x32>
	__asm volatile
 8008ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	e7fe      	b.n	8008eb8 <xQueueGiveFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008eba:	3301      	adds	r3, #1
 8008ebc:	b25b      	sxtb	r3, r3
 8008ebe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8008ec2:	2001      	movs	r0, #1
 8008ec4:	e7ea      	b.n	8008e9c <xQueueGiveFromISR+0x78>
			xReturn = errQUEUE_FULL;
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	e7e8      	b.n	8008e9c <xQueueGiveFromISR+0x78>
			xReturn = pdPASS;
 8008eca:	2001      	movs	r0, #1
 8008ecc:	e7e6      	b.n	8008e9c <xQueueGiveFromISR+0x78>
 8008ece:	2001      	movs	r0, #1
 8008ed0:	e7e4      	b.n	8008e9c <xQueueGiveFromISR+0x78>
 8008ed2:	2001      	movs	r0, #1
 8008ed4:	e7e2      	b.n	8008e9c <xQueueGiveFromISR+0x78>
	...

08008ed8 <xQueueReceive>:
{
 8008ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eda:	b085      	sub	sp, #20
 8008edc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008ede:	b160      	cbz	r0, 8008efa <xQueueReceive+0x22>
 8008ee0:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ee2:	b999      	cbnz	r1, 8008f0c <xQueueReceive+0x34>
 8008ee4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008ee6:	b18b      	cbz	r3, 8008f0c <xQueueReceive+0x34>
 8008ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eec:	f383 8811 	msr	BASEPRI, r3
 8008ef0:	f3bf 8f6f 	isb	sy
 8008ef4:	f3bf 8f4f 	dsb	sy
 8008ef8:	e7fe      	b.n	8008ef8 <xQueueReceive+0x20>
 8008efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efe:	f383 8811 	msr	BASEPRI, r3
 8008f02:	f3bf 8f6f 	isb	sy
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	e7fe      	b.n	8008f0a <xQueueReceive+0x32>
 8008f0c:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f0e:	f000 fe1f 	bl	8009b50 <xTaskGetSchedulerState>
 8008f12:	b950      	cbnz	r0, 8008f2a <xQueueReceive+0x52>
 8008f14:	9b01      	ldr	r3, [sp, #4]
 8008f16:	b153      	cbz	r3, 8008f2e <xQueueReceive+0x56>
 8008f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	e7fe      	b.n	8008f28 <xQueueReceive+0x50>
 8008f2a:	2600      	movs	r6, #0
 8008f2c:	e03e      	b.n	8008fac <xQueueReceive+0xd4>
 8008f2e:	2600      	movs	r6, #0
 8008f30:	e03c      	b.n	8008fac <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008f32:	4639      	mov	r1, r7
 8008f34:	4620      	mov	r0, r4
 8008f36:	f7ff fcdd 	bl	80088f4 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008f3a:	3d01      	subs	r5, #1
 8008f3c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f3e:	6923      	ldr	r3, [r4, #16]
 8008f40:	b923      	cbnz	r3, 8008f4c <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 8008f42:	f000 ffc9 	bl	8009ed8 <vPortExitCritical>
				return pdPASS;
 8008f46:	2001      	movs	r0, #1
}
 8008f48:	b005      	add	sp, #20
 8008f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f4c:	f104 0010 	add.w	r0, r4, #16
 8008f50:	f000 fd64 	bl	8009a1c <xTaskRemoveFromEventList>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	d0f4      	beq.n	8008f42 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 8008f58:	4b34      	ldr	r3, [pc, #208]	; (800902c <xQueueReceive+0x154>)
 8008f5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	f3bf 8f4f 	dsb	sy
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	e7eb      	b.n	8008f42 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 8008f6a:	f000 ffb5 	bl	8009ed8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8008f6e:	2000      	movs	r0, #0
 8008f70:	e7ea      	b.n	8008f48 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f72:	a802      	add	r0, sp, #8
 8008f74:	f000 fd94 	bl	8009aa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f78:	2601      	movs	r6, #1
 8008f7a:	e021      	b.n	8008fc0 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008f82:	e029      	b.n	8008fd8 <xQueueReceive+0x100>
 8008f84:	2300      	movs	r3, #0
 8008f86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f8a:	e02b      	b.n	8008fe4 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f7ff fcc3 	bl	8008918 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f92:	f000 fc27 	bl	80097e4 <xTaskResumeAll>
 8008f96:	e009      	b.n	8008fac <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f7ff fcbd 	bl	8008918 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f9e:	f000 fc21 	bl	80097e4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008fa2:	4620      	mov	r0, r4
 8008fa4:	f7ff fc5e 	bl	8008864 <prvIsQueueEmpty>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d13d      	bne.n	8009028 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 8008fac:	f000 ff72 	bl	8009e94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008fb0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008fb2:	2d00      	cmp	r5, #0
 8008fb4:	d1bd      	bne.n	8008f32 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fb6:	9b01      	ldr	r3, [sp, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d0d6      	beq.n	8008f6a <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8008fbc:	2e00      	cmp	r6, #0
 8008fbe:	d0d8      	beq.n	8008f72 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 8008fc0:	f000 ff8a 	bl	8009ed8 <vPortExitCritical>
		vTaskSuspendAll();
 8008fc4:	f000 fb6e 	bl	80096a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008fc8:	f000 ff64 	bl	8009e94 <vPortEnterCritical>
 8008fcc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008fd0:	b25b      	sxtb	r3, r3
 8008fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fd6:	d0d1      	beq.n	8008f7c <xQueueReceive+0xa4>
 8008fd8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008fdc:	b25b      	sxtb	r3, r3
 8008fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008fe2:	d0cf      	beq.n	8008f84 <xQueueReceive+0xac>
 8008fe4:	f000 ff78 	bl	8009ed8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008fe8:	a901      	add	r1, sp, #4
 8008fea:	a802      	add	r0, sp, #8
 8008fec:	f000 fd62 	bl	8009ab4 <xTaskCheckForTimeOut>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	d1d1      	bne.n	8008f98 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f7ff fc35 	bl	8008864 <prvIsQueueEmpty>
 8008ffa:	2800      	cmp	r0, #0
 8008ffc:	d0c6      	beq.n	8008f8c <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ffe:	9901      	ldr	r1, [sp, #4]
 8009000:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009004:	f000 fcf0 	bl	80099e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009008:	4620      	mov	r0, r4
 800900a:	f7ff fc85 	bl	8008918 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800900e:	f000 fbe9 	bl	80097e4 <xTaskResumeAll>
 8009012:	2800      	cmp	r0, #0
 8009014:	d1ca      	bne.n	8008fac <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 8009016:	4b05      	ldr	r3, [pc, #20]	; (800902c <xQueueReceive+0x154>)
 8009018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	e7c1      	b.n	8008fac <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 8009028:	2000      	movs	r0, #0
 800902a:	e78d      	b.n	8008f48 <xQueueReceive+0x70>
 800902c:	e000ed04 	.word	0xe000ed04

08009030 <xQueueSemaphoreTake>:
{
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8009036:	b940      	cbnz	r0, 800904a <xQueueSemaphoreTake+0x1a>
 8009038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	e7fe      	b.n	8009048 <xQueueSemaphoreTake+0x18>
 800904a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800904c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800904e:	b143      	cbz	r3, 8009062 <xQueueSemaphoreTake+0x32>
 8009050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009054:	f383 8811 	msr	BASEPRI, r3
 8009058:	f3bf 8f6f 	isb	sy
 800905c:	f3bf 8f4f 	dsb	sy
 8009060:	e7fe      	b.n	8009060 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009062:	f000 fd75 	bl	8009b50 <xTaskGetSchedulerState>
 8009066:	b950      	cbnz	r0, 800907e <xQueueSemaphoreTake+0x4e>
 8009068:	9b01      	ldr	r3, [sp, #4]
 800906a:	b15b      	cbz	r3, 8009084 <xQueueSemaphoreTake+0x54>
 800906c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009070:	f383 8811 	msr	BASEPRI, r3
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	e7fe      	b.n	800907c <xQueueSemaphoreTake+0x4c>
 800907e:	2500      	movs	r5, #0
 8009080:	462e      	mov	r6, r5
 8009082:	e051      	b.n	8009128 <xQueueSemaphoreTake+0xf8>
 8009084:	2500      	movs	r5, #0
 8009086:	462e      	mov	r6, r5
 8009088:	e04e      	b.n	8009128 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800908a:	3b01      	subs	r3, #1
 800908c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	b913      	cbnz	r3, 8009098 <xQueueSemaphoreTake+0x68>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009092:	f000 fe89 	bl	8009da8 <pvTaskIncrementMutexHeldCount>
 8009096:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009098:	6923      	ldr	r3, [r4, #16]
 800909a:	b163      	cbz	r3, 80090b6 <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800909c:	f104 0010 	add.w	r0, r4, #16
 80090a0:	f000 fcbc 	bl	8009a1c <xTaskRemoveFromEventList>
 80090a4:	b138      	cbz	r0, 80090b6 <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
 80090a6:	4b48      	ldr	r3, [pc, #288]	; (80091c8 <xQueueSemaphoreTake+0x198>)
 80090a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090ac:	601a      	str	r2, [r3, #0]
 80090ae:	f3bf 8f4f 	dsb	sy
 80090b2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80090b6:	f000 ff0f 	bl	8009ed8 <vPortExitCritical>
				return pdPASS;
 80090ba:	2501      	movs	r5, #1
}
 80090bc:	4628      	mov	r0, r5
 80090be:	b004      	add	sp, #16
 80090c0:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 80090c2:	b145      	cbz	r5, 80090d6 <xQueueSemaphoreTake+0xa6>
 80090c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	e7fe      	b.n	80090d4 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
 80090d6:	f000 feff 	bl	8009ed8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80090da:	e7ef      	b.n	80090bc <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090dc:	a802      	add	r0, sp, #8
 80090de:	f000 fcdf 	bl	8009aa0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090e2:	2601      	movs	r6, #1
 80090e4:	e02a      	b.n	800913c <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
 80090e6:	2300      	movs	r3, #0
 80090e8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80090ec:	e032      	b.n	8009154 <xQueueSemaphoreTake+0x124>
 80090ee:	2300      	movs	r3, #0
 80090f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090f4:	e034      	b.n	8009160 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
 80090f6:	f000 fecd 	bl	8009e94 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80090fa:	6860      	ldr	r0, [r4, #4]
 80090fc:	f000 fd38 	bl	8009b70 <xTaskPriorityInherit>
 8009100:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8009102:	f000 fee9 	bl	8009ed8 <vPortExitCritical>
 8009106:	e03b      	b.n	8009180 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
 8009108:	4620      	mov	r0, r4
 800910a:	f7ff fc05 	bl	8008918 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800910e:	f000 fb69 	bl	80097e4 <xTaskResumeAll>
 8009112:	e009      	b.n	8009128 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
 8009114:	4620      	mov	r0, r4
 8009116:	f7ff fbff 	bl	8008918 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800911a:	f000 fb63 	bl	80097e4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800911e:	4620      	mov	r0, r4
 8009120:	f7ff fba0 	bl	8008864 <prvIsQueueEmpty>
 8009124:	2800      	cmp	r0, #0
 8009126:	d140      	bne.n	80091aa <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
 8009128:	f000 feb4 	bl	8009e94 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800912c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800912e:	2b00      	cmp	r3, #0
 8009130:	d1ab      	bne.n	800908a <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8009132:	9b01      	ldr	r3, [sp, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d0c4      	beq.n	80090c2 <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
 8009138:	2e00      	cmp	r6, #0
 800913a:	d0cf      	beq.n	80090dc <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
 800913c:	f000 fecc 	bl	8009ed8 <vPortExitCritical>
		vTaskSuspendAll();
 8009140:	f000 fab0 	bl	80096a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009144:	f000 fea6 	bl	8009e94 <vPortEnterCritical>
 8009148:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800914c:	b25b      	sxtb	r3, r3
 800914e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009152:	d0c8      	beq.n	80090e6 <xQueueSemaphoreTake+0xb6>
 8009154:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009158:	b25b      	sxtb	r3, r3
 800915a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800915e:	d0c6      	beq.n	80090ee <xQueueSemaphoreTake+0xbe>
 8009160:	f000 feba 	bl	8009ed8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009164:	a901      	add	r1, sp, #4
 8009166:	a802      	add	r0, sp, #8
 8009168:	f000 fca4 	bl	8009ab4 <xTaskCheckForTimeOut>
 800916c:	2800      	cmp	r0, #0
 800916e:	d1d1      	bne.n	8009114 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009170:	4620      	mov	r0, r4
 8009172:	f7ff fb77 	bl	8008864 <prvIsQueueEmpty>
 8009176:	2800      	cmp	r0, #0
 8009178:	d0c6      	beq.n	8009108 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800917a:	6823      	ldr	r3, [r4, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d0ba      	beq.n	80090f6 <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009180:	9901      	ldr	r1, [sp, #4]
 8009182:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009186:	f000 fc2f 	bl	80099e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800918a:	4620      	mov	r0, r4
 800918c:	f7ff fbc4 	bl	8008918 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009190:	f000 fb28 	bl	80097e4 <xTaskResumeAll>
 8009194:	2800      	cmp	r0, #0
 8009196:	d1c7      	bne.n	8009128 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
 8009198:	4b0b      	ldr	r3, [pc, #44]	; (80091c8 <xQueueSemaphoreTake+0x198>)
 800919a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800919e:	601a      	str	r2, [r3, #0]
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	e7be      	b.n	8009128 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
 80091aa:	2d00      	cmp	r5, #0
 80091ac:	d086      	beq.n	80090bc <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
 80091ae:	f000 fe71 	bl	8009e94 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80091b2:	4620      	mov	r0, r4
 80091b4:	f7ff fb3e 	bl	8008834 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80091b8:	4601      	mov	r1, r0
 80091ba:	6860      	ldr	r0, [r4, #4]
 80091bc:	f000 fd92 	bl	8009ce4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80091c0:	f000 fe8a 	bl	8009ed8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80091c4:	2500      	movs	r5, #0
 80091c6:	e779      	b.n	80090bc <xQueueSemaphoreTake+0x8c>
 80091c8:	e000ed04 	.word	0xe000ed04

080091cc <xQueueReceiveFromISR>:
{
 80091cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80091d0:	b160      	cbz	r0, 80091ec <xQueueReceiveFromISR+0x20>
 80091d2:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091d4:	b999      	cbnz	r1, 80091fe <xQueueReceiveFromISR+0x32>
 80091d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80091d8:	b18b      	cbz	r3, 80091fe <xQueueReceiveFromISR+0x32>
 80091da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091de:	f383 8811 	msr	BASEPRI, r3
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	e7fe      	b.n	80091ea <xQueueReceiveFromISR+0x1e>
 80091ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f0:	f383 8811 	msr	BASEPRI, r3
 80091f4:	f3bf 8f6f 	isb	sy
 80091f8:	f3bf 8f4f 	dsb	sy
 80091fc:	e7fe      	b.n	80091fc <xQueueReceiveFromISR+0x30>
 80091fe:	4617      	mov	r7, r2
 8009200:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009202:	f000 ff6d 	bl	800a0e0 <vPortValidateInterruptPriority>
	__asm volatile
 8009206:	f3ef 8611 	mrs	r6, BASEPRI
 800920a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800920e:	f383 8811 	msr	BASEPRI, r3
 8009212:	f3bf 8f6f 	isb	sy
 8009216:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800921a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800921e:	f1b8 0f00 	cmp.w	r8, #0
 8009222:	d01d      	beq.n	8009260 <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
 8009224:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8009228:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800922a:	4649      	mov	r1, r9
 800922c:	4620      	mov	r0, r4
 800922e:	f7ff fb61 	bl	80088f4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009232:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8009236:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8009238:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800923c:	d005      	beq.n	800924a <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800923e:	1c6b      	adds	r3, r5, #1
 8009240:	b25b      	sxtb	r3, r3
 8009242:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8009246:	2001      	movs	r0, #1
 8009248:	e00b      	b.n	8009262 <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800924a:	6923      	ldr	r3, [r4, #16]
 800924c:	b16b      	cbz	r3, 800926a <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800924e:	f104 0010 	add.w	r0, r4, #16
 8009252:	f000 fbe3 	bl	8009a1c <xTaskRemoveFromEventList>
 8009256:	b150      	cbz	r0, 800926e <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
 8009258:	b15f      	cbz	r7, 8009272 <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800925a:	2001      	movs	r0, #1
 800925c:	6038      	str	r0, [r7, #0]
 800925e:	e000      	b.n	8009262 <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
 8009260:	2000      	movs	r0, #0
	__asm volatile
 8009262:	f386 8811 	msr	BASEPRI, r6
}
 8009266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
 800926a:	2001      	movs	r0, #1
 800926c:	e7f9      	b.n	8009262 <xQueueReceiveFromISR+0x96>
 800926e:	2001      	movs	r0, #1
 8009270:	e7f7      	b.n	8009262 <xQueueReceiveFromISR+0x96>
 8009272:	2001      	movs	r0, #1
 8009274:	e7f5      	b.n	8009262 <xQueueReceiveFromISR+0x96>
	...

08009278 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009278:	4b07      	ldr	r3, [pc, #28]	; (8009298 <prvResetNextTaskUnblockTime+0x20>)
 800927a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	b133      	cbz	r3, 800928e <prvResetNextTaskUnblockTime+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009280:	4b05      	ldr	r3, [pc, #20]	; (8009298 <prvResetNextTaskUnblockTime+0x20>)
 8009282:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009284:	68d2      	ldr	r2, [r2, #12]
 8009286:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009288:	6852      	ldr	r2, [r2, #4]
 800928a:	62da      	str	r2, [r3, #44]	; 0x2c
	}
}
 800928c:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800928e:	4b02      	ldr	r3, [pc, #8]	; (8009298 <prvResetNextTaskUnblockTime+0x20>)
 8009290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009294:	62da      	str	r2, [r3, #44]	; 0x2c
 8009296:	4770      	bx	lr
 8009298:	200006d4 	.word	0x200006d4

0800929c <prvInitialiseNewTask>:
{
 800929c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a0:	4681      	mov	r9, r0
 80092a2:	460d      	mov	r5, r1
 80092a4:	4617      	mov	r7, r2
 80092a6:	469a      	mov	sl, r3
 80092a8:	9e08      	ldr	r6, [sp, #32]
 80092aa:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80092ae:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80092b0:	0092      	lsls	r2, r2, #2
 80092b2:	21a5      	movs	r1, #165	; 0xa5
 80092b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80092b6:	f015 fbee 	bl	801ea96 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80092ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80092bc:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
 80092c0:	3a01      	subs	r2, #1
 80092c2:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80092c6:	f027 0707 	bic.w	r7, r7, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092ca:	2300      	movs	r3, #0
 80092cc:	2b0f      	cmp	r3, #15
 80092ce:	d807      	bhi.n	80092e0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80092d0:	5ce9      	ldrb	r1, [r5, r3]
 80092d2:	18e2      	adds	r2, r4, r3
 80092d4:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 80092d8:	5cea      	ldrb	r2, [r5, r3]
 80092da:	b10a      	cbz	r2, 80092e0 <prvInitialiseNewTask+0x44>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80092dc:	3301      	adds	r3, #1
 80092de:	e7f5      	b.n	80092cc <prvInitialiseNewTask+0x30>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092e0:	2300      	movs	r3, #0
 80092e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80092e6:	2e06      	cmp	r6, #6
 80092e8:	d900      	bls.n	80092ec <prvInitialiseNewTask+0x50>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80092ea:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
 80092ec:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80092ee:	6466      	str	r6, [r4, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80092f0:	2500      	movs	r5, #0
 80092f2:	64a5      	str	r5, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80092f4:	1d20      	adds	r0, r4, #4
 80092f6:	f7ff fa60 	bl	80087ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80092fa:	f104 0018 	add.w	r0, r4, #24
 80092fe:	f7ff fa5c 	bl	80087ba <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009302:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009304:	f1c6 0607 	rsb	r6, r6, #7
 8009308:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800930a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
 800930c:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxNewTCB->ulNotifiedValue = 0;
 800930e:	6525      	str	r5, [r4, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009310:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009314:	4652      	mov	r2, sl
 8009316:	4649      	mov	r1, r9
 8009318:	4638      	mov	r0, r7
 800931a:	f000 fd93 	bl	8009e44 <pxPortInitialiseStack>
 800931e:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8009320:	f1b8 0f00 	cmp.w	r8, #0
 8009324:	d001      	beq.n	800932a <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009326:	f8c8 4000 	str.w	r4, [r8]
}
 800932a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08009330 <prvInitialiseTaskLists>:
{
 8009330:	b570      	push	{r4, r5, r6, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009332:	2400      	movs	r4, #0
 8009334:	e007      	b.n	8009346 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009336:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800933a:	0093      	lsls	r3, r2, #2
 800933c:	4810      	ldr	r0, [pc, #64]	; (8009380 <prvInitialiseTaskLists+0x50>)
 800933e:	4418      	add	r0, r3
 8009340:	f7ff fa30 	bl	80087a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009344:	3401      	adds	r4, #1
 8009346:	2c06      	cmp	r4, #6
 8009348:	d9f5      	bls.n	8009336 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800934a:	4c0e      	ldr	r4, [pc, #56]	; (8009384 <prvInitialiseTaskLists+0x54>)
 800934c:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
 8009350:	4630      	mov	r0, r6
 8009352:	f7ff fa27 	bl	80087a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009356:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
 800935a:	4628      	mov	r0, r5
 800935c:	f7ff fa22 	bl	80087a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009360:	f104 0014 	add.w	r0, r4, #20
 8009364:	f7ff fa1e 	bl	80087a4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8009368:	f104 00e4 	add.w	r0, r4, #228	; 0xe4
 800936c:	f7ff fa1a 	bl	80087a4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8009370:	4620      	mov	r0, r4
 8009372:	f7ff fa17 	bl	80087a4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8009376:	62a6      	str	r6, [r4, #40]	; 0x28
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009378:	f8c4 50f8 	str.w	r5, [r4, #248]	; 0xf8
}
 800937c:	bd70      	pop	{r4, r5, r6, pc}
 800937e:	bf00      	nop
 8009380:	20000704 	.word	0x20000704
 8009384:	200006d4 	.word	0x200006d4

08009388 <prvAddNewTaskToReadyList>:
{
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800938c:	f000 fd82 	bl	8009e94 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8009390:	4b26      	ldr	r3, [pc, #152]	; (800942c <prvAddNewTaskToReadyList+0xa4>)
 8009392:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8009396:	3201      	adds	r2, #1
 8009398:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		if( pxCurrentTCB == NULL )
 800939c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80093a0:	b173      	cbz	r3, 80093c0 <prvAddNewTaskToReadyList+0x38>
			if( xSchedulerRunning == pdFALSE )
 80093a2:	4b22      	ldr	r3, [pc, #136]	; (800942c <prvAddNewTaskToReadyList+0xa4>)
 80093a4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80093a8:	b98b      	cbnz	r3, 80093ce <prvAddNewTaskToReadyList+0x46>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80093aa:	4b20      	ldr	r3, [pc, #128]	; (800942c <prvAddNewTaskToReadyList+0xa4>)
 80093ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80093b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d80a      	bhi.n	80093ce <prvAddNewTaskToReadyList+0x46>
					pxCurrentTCB = pxNewTCB;
 80093b8:	4b1c      	ldr	r3, [pc, #112]	; (800942c <prvAddNewTaskToReadyList+0xa4>)
 80093ba:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
 80093be:	e006      	b.n	80093ce <prvAddNewTaskToReadyList+0x46>
			pxCurrentTCB = pxNewTCB;
 80093c0:	4b1a      	ldr	r3, [pc, #104]	; (800942c <prvAddNewTaskToReadyList+0xa4>)
 80093c2:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80093c6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d02a      	beq.n	8009424 <prvAddNewTaskToReadyList+0x9c>
		uxTaskNumber++;
 80093ce:	4c17      	ldr	r4, [pc, #92]	; (800942c <prvAddNewTaskToReadyList+0xa4>)
 80093d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80093d4:	3301      	adds	r3, #1
 80093d6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		prvAddTaskToReadyList( pxNewTCB );
 80093da:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80093dc:	2201      	movs	r2, #1
 80093de:	409a      	lsls	r2, r3
 80093e0:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
 80093e4:	430a      	orrs	r2, r1
 80093e6:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
 80093ea:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80093ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80093f2:	009a      	lsls	r2, r3, #2
 80093f4:	1d29      	adds	r1, r5, #4
 80093f6:	4410      	add	r0, r2
 80093f8:	f7ff f9e2 	bl	80087c0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80093fc:	f000 fd6c 	bl	8009ed8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8009400:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8009404:	b16b      	cbz	r3, 8009422 <prvAddNewTaskToReadyList+0x9a>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009406:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800940a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800940c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800940e:	429a      	cmp	r2, r3
 8009410:	d207      	bcs.n	8009422 <prvAddNewTaskToReadyList+0x9a>
			taskYIELD_IF_USING_PREEMPTION();
 8009412:	4b07      	ldr	r3, [pc, #28]	; (8009430 <prvAddNewTaskToReadyList+0xa8>)
 8009414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009418:	601a      	str	r2, [r3, #0]
 800941a:	f3bf 8f4f 	dsb	sy
 800941e:	f3bf 8f6f 	isb	sy
}
 8009422:	bd38      	pop	{r3, r4, r5, pc}
				prvInitialiseTaskLists();
 8009424:	f7ff ff84 	bl	8009330 <prvInitialiseTaskLists>
 8009428:	e7d1      	b.n	80093ce <prvAddNewTaskToReadyList+0x46>
 800942a:	bf00      	nop
 800942c:	200006d4 	.word	0x200006d4
 8009430:	e000ed04 	.word	0xe000ed04

08009434 <prvDeleteTCB>:
	{
 8009434:	b510      	push	{r4, lr}
 8009436:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009438:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 800943c:	b933      	cbnz	r3, 800944c <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 800943e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8009440:	f000 ff50 	bl	800a2e4 <vPortFree>
				vPortFree( pxTCB );
 8009444:	4620      	mov	r0, r4
 8009446:	f000 ff4d 	bl	800a2e4 <vPortFree>
	}
 800944a:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800944c:	2b01      	cmp	r3, #1
 800944e:	d00a      	beq.n	8009466 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009450:	2b02      	cmp	r3, #2
 8009452:	d0fa      	beq.n	800944a <prvDeleteTCB+0x16>
	__asm volatile
 8009454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	e7fe      	b.n	8009464 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 8009466:	f000 ff3d 	bl	800a2e4 <vPortFree>
 800946a:	e7ee      	b.n	800944a <prvDeleteTCB+0x16>

0800946c <prvCheckTasksWaitingTermination>:
{
 800946c:	b538      	push	{r3, r4, r5, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800946e:	e017      	b.n	80094a0 <prvCheckTasksWaitingTermination+0x34>
			taskENTER_CRITICAL();
 8009470:	f000 fd10 	bl	8009e94 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009474:	4c0d      	ldr	r4, [pc, #52]	; (80094ac <prvCheckTasksWaitingTermination+0x40>)
 8009476:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 800947a:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800947c:	1d28      	adds	r0, r5, #4
 800947e:	f7ff f9c5 	bl	800880c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009482:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8009486:	3b01      	subs	r3, #1
 8009488:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
				--uxDeletedTasksWaitingCleanUp;
 800948c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8009490:	3b01      	subs	r3, #1
 8009492:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
			taskEXIT_CRITICAL();
 8009496:	f000 fd1f 	bl	8009ed8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800949a:	4628      	mov	r0, r5
 800949c:	f7ff ffca 	bl	8009434 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094a0:	4b02      	ldr	r3, [pc, #8]	; (80094ac <prvCheckTasksWaitingTermination+0x40>)
 80094a2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1e2      	bne.n	8009470 <prvCheckTasksWaitingTermination+0x4>
}
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	200006d4 	.word	0x200006d4

080094b0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80094b0:	b570      	push	{r4, r5, r6, lr}
 80094b2:	4604      	mov	r4, r0
 80094b4:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80094b6:	4b1f      	ldr	r3, [pc, #124]	; (8009534 <prvAddCurrentTaskToDelayedList+0x84>)
 80094b8:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094bc:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 80094c0:	3004      	adds	r0, #4
 80094c2:	f7ff f9a3 	bl	800880c <uxListRemove>
 80094c6:	b960      	cbnz	r0, 80094e2 <prvAddCurrentTaskToDelayedList+0x32>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80094c8:	4b1a      	ldr	r3, [pc, #104]	; (8009534 <prvAddCurrentTaskToDelayedList+0x84>)
 80094ca:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80094ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80094d0:	2201      	movs	r2, #1
 80094d2:	fa02 f101 	lsl.w	r1, r2, r1
 80094d6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80094da:	ea22 0201 	bic.w	r2, r2, r1
 80094de:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094e2:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80094e6:	d012      	beq.n	800950e <prvAddCurrentTaskToDelayedList+0x5e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094e8:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094ea:	4b12      	ldr	r3, [pc, #72]	; (8009534 <prvAddCurrentTaskToDelayedList+0x84>)
 80094ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80094f0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80094f2:	42a5      	cmp	r5, r4
 80094f4:	d814      	bhi.n	8009520 <prvAddCurrentTaskToDelayedList+0x70>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094f6:	4d0f      	ldr	r5, [pc, #60]	; (8009534 <prvAddCurrentTaskToDelayedList+0x84>)
 80094f8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 80094fa:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 80094fe:	3104      	adds	r1, #4
 8009500:	f7ff f96a 	bl	80087d8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8009504:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009506:	42a3      	cmp	r3, r4
 8009508:	d912      	bls.n	8009530 <prvAddCurrentTaskToDelayedList+0x80>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800950a:	62ec      	str	r4, [r5, #44]	; 0x2c

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800950c:	e010      	b.n	8009530 <prvAddCurrentTaskToDelayedList+0x80>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800950e:	2e00      	cmp	r6, #0
 8009510:	d0ea      	beq.n	80094e8 <prvAddCurrentTaskToDelayedList+0x38>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009512:	4808      	ldr	r0, [pc, #32]	; (8009534 <prvAddCurrentTaskToDelayedList+0x84>)
 8009514:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8009518:	3104      	adds	r1, #4
 800951a:	f7ff f951 	bl	80087c0 <vListInsertEnd>
 800951e:	e007      	b.n	8009530 <prvAddCurrentTaskToDelayedList+0x80>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009520:	4b04      	ldr	r3, [pc, #16]	; (8009534 <prvAddCurrentTaskToDelayedList+0x84>)
 8009522:	f8d3 00f8 	ldr.w	r0, [r3, #248]	; 0xf8
 8009526:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 800952a:	3104      	adds	r1, #4
 800952c:	f7ff f954 	bl	80087d8 <vListInsert>
}
 8009530:	bd70      	pop	{r4, r5, r6, pc}
 8009532:	bf00      	nop
 8009534:	200006d4 	.word	0x200006d4

08009538 <prvIdleTask>:
{
 8009538:	b508      	push	{r3, lr}
 800953a:	e001      	b.n	8009540 <prvIdleTask+0x8>
			vApplicationIdleHook();
 800953c:	f7f7 ffc6 	bl	80014cc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009540:	f7ff ff94 	bl	800946c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009544:	4b06      	ldr	r3, [pc, #24]	; (8009560 <prvIdleTask+0x28>)
 8009546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009548:	2b01      	cmp	r3, #1
 800954a:	d9f7      	bls.n	800953c <prvIdleTask+0x4>
				taskYIELD();
 800954c:	4b05      	ldr	r3, [pc, #20]	; (8009564 <prvIdleTask+0x2c>)
 800954e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	e7ee      	b.n	800953c <prvIdleTask+0x4>
 800955e:	bf00      	nop
 8009560:	200006d4 	.word	0x200006d4
 8009564:	e000ed04 	.word	0xe000ed04

08009568 <xTaskCreateStatic>:
	{
 8009568:	b570      	push	{r4, r5, r6, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800956e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8009570:	b945      	cbnz	r5, 8009584 <xTaskCreateStatic+0x1c>
 8009572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	e7fe      	b.n	8009582 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8009584:	b944      	cbnz	r4, 8009598 <xTaskCreateStatic+0x30>
 8009586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	e7fe      	b.n	8009596 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8009598:	2658      	movs	r6, #88	; 0x58
 800959a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800959c:	9e04      	ldr	r6, [sp, #16]
 800959e:	2e58      	cmp	r6, #88	; 0x58
 80095a0:	d008      	beq.n	80095b4 <xTaskCreateStatic+0x4c>
 80095a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095a6:	f383 8811 	msr	BASEPRI, r3
 80095aa:	f3bf 8f6f 	isb	sy
 80095ae:	f3bf 8f4f 	dsb	sy
 80095b2:	e7fe      	b.n	80095b2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80095b4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80095b6:	2502      	movs	r5, #2
 80095b8:	f884 5055 	strb.w	r5, [r4, #85]	; 0x55
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80095bc:	2500      	movs	r5, #0
 80095be:	9503      	str	r5, [sp, #12]
 80095c0:	9402      	str	r4, [sp, #8]
 80095c2:	ad05      	add	r5, sp, #20
 80095c4:	9501      	str	r5, [sp, #4]
 80095c6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80095c8:	9500      	str	r5, [sp, #0]
 80095ca:	f7ff fe67 	bl	800929c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80095ce:	4620      	mov	r0, r4
 80095d0:	f7ff feda 	bl	8009388 <prvAddNewTaskToReadyList>
	}
 80095d4:	9805      	ldr	r0, [sp, #20]
 80095d6:	b006      	add	sp, #24
 80095d8:	bd70      	pop	{r4, r5, r6, pc}

080095da <xTaskCreate>:
	{
 80095da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095de:	b085      	sub	sp, #20
 80095e0:	4607      	mov	r7, r0
 80095e2:	4688      	mov	r8, r1
 80095e4:	4615      	mov	r5, r2
 80095e6:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095e8:	0090      	lsls	r0, r2, #2
 80095ea:	f000 fdf5 	bl	800a1d8 <pvPortMalloc>
			if( pxStack != NULL )
 80095ee:	b308      	cbz	r0, 8009634 <xTaskCreate+0x5a>
 80095f0:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80095f2:	2058      	movs	r0, #88	; 0x58
 80095f4:	f000 fdf0 	bl	800a1d8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80095f8:	4604      	mov	r4, r0
 80095fa:	b1b8      	cbz	r0, 800962c <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 80095fc:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 80095fe:	b1e4      	cbz	r4, 800963a <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009600:	2300      	movs	r3, #0
 8009602:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009606:	9303      	str	r3, [sp, #12]
 8009608:	9402      	str	r4, [sp, #8]
 800960a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800960c:	9301      	str	r3, [sp, #4]
 800960e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	464b      	mov	r3, r9
 8009614:	462a      	mov	r2, r5
 8009616:	4641      	mov	r1, r8
 8009618:	4638      	mov	r0, r7
 800961a:	f7ff fe3f 	bl	800929c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800961e:	4620      	mov	r0, r4
 8009620:	f7ff feb2 	bl	8009388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009624:	2001      	movs	r0, #1
	}
 8009626:	b005      	add	sp, #20
 8009628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800962c:	4630      	mov	r0, r6
 800962e:	f000 fe59 	bl	800a2e4 <vPortFree>
 8009632:	e7e4      	b.n	80095fe <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009638:	e7f5      	b.n	8009626 <xTaskCreate+0x4c>
 800963a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800963e:	e7f2      	b.n	8009626 <xTaskCreate+0x4c>

08009640 <vTaskStartScheduler>:
{
 8009640:	b510      	push	{r4, lr}
 8009642:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009644:	2400      	movs	r4, #0
 8009646:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009648:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800964a:	aa07      	add	r2, sp, #28
 800964c:	a906      	add	r1, sp, #24
 800964e:	a805      	add	r0, sp, #20
 8009650:	f7f7 ff40 	bl	80014d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009654:	9b05      	ldr	r3, [sp, #20]
 8009656:	9302      	str	r3, [sp, #8]
 8009658:	9b06      	ldr	r3, [sp, #24]
 800965a:	9301      	str	r3, [sp, #4]
 800965c:	9400      	str	r4, [sp, #0]
 800965e:	4623      	mov	r3, r4
 8009660:	9a07      	ldr	r2, [sp, #28]
 8009662:	490d      	ldr	r1, [pc, #52]	; (8009698 <vTaskStartScheduler+0x58>)
 8009664:	480d      	ldr	r0, [pc, #52]	; (800969c <vTaskStartScheduler+0x5c>)
 8009666:	f7ff ff7f 	bl	8009568 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800966a:	b908      	cbnz	r0, 8009670 <vTaskStartScheduler+0x30>
}
 800966c:	b008      	add	sp, #32
 800966e:	bd10      	pop	{r4, pc}
 8009670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009674:	f383 8811 	msr	BASEPRI, r3
 8009678:	f3bf 8f6f 	isb	sy
 800967c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8009680:	4b07      	ldr	r3, [pc, #28]	; (80096a0 <vTaskStartScheduler+0x60>)
 8009682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009686:	62da      	str	r2, [r3, #44]	; 0x2c
		xSchedulerRunning = pdTRUE;
 8009688:	2201      	movs	r2, #1
 800968a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		xTickCount = ( TickType_t ) 0U;
 800968e:	f8c3 4114 	str.w	r4, [r3, #276]	; 0x114
		if( xPortStartScheduler() != pdFALSE )
 8009692:	f000 fca1 	bl	8009fd8 <xPortStartScheduler>
 8009696:	e7e9      	b.n	800966c <vTaskStartScheduler+0x2c>
 8009698:	080328d8 	.word	0x080328d8
 800969c:	08009539 	.word	0x08009539
 80096a0:	200006d4 	.word	0x200006d4

080096a4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80096a4:	4a03      	ldr	r2, [pc, #12]	; (80096b4 <vTaskSuspendAll+0x10>)
 80096a6:	f8d2 3118 	ldr.w	r3, [r2, #280]	; 0x118
 80096aa:	3301      	adds	r3, #1
 80096ac:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
}
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	200006d4 	.word	0x200006d4

080096b8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80096b8:	4b01      	ldr	r3, [pc, #4]	; (80096c0 <xTaskGetTickCount+0x8>)
 80096ba:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
 80096be:	4770      	bx	lr
 80096c0:	200006d4 	.word	0x200006d4

080096c4 <xTaskGetTickCountFromISR>:
{
 80096c4:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096c6:	f000 fd0b 	bl	800a0e0 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80096ca:	4b02      	ldr	r3, [pc, #8]	; (80096d4 <xTaskGetTickCountFromISR+0x10>)
 80096cc:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
 80096d0:	bd08      	pop	{r3, pc}
 80096d2:	bf00      	nop
 80096d4:	200006d4 	.word	0x200006d4

080096d8 <xTaskIncrementTick>:
{
 80096d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096dc:	4b40      	ldr	r3, [pc, #256]	; (80097e0 <xTaskIncrementTick+0x108>)
 80096de:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d16c      	bne.n	80097c0 <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80096e6:	4b3e      	ldr	r3, [pc, #248]	; (80097e0 <xTaskIncrementTick+0x108>)
 80096e8:	f8d3 5114 	ldr.w	r5, [r3, #276]	; 0x114
 80096ec:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 80096ee:	f8c3 5114 	str.w	r5, [r3, #276]	; 0x114
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80096f2:	b9cd      	cbnz	r5, 8009728 <xTaskIncrementTick+0x50>
			taskSWITCH_DELAYED_LISTS();
 80096f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	b143      	cbz	r3, 800970c <xTaskIncrementTick+0x34>
 80096fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	e7fe      	b.n	800970a <xTaskIncrementTick+0x32>
 800970c:	4b34      	ldr	r3, [pc, #208]	; (80097e0 <xTaskIncrementTick+0x108>)
 800970e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009710:	f8d3 10f8 	ldr.w	r1, [r3, #248]	; 0xf8
 8009714:	6299      	str	r1, [r3, #40]	; 0x28
 8009716:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 800971a:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 800971e:	3201      	adds	r2, #1
 8009720:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
 8009724:	f7ff fda8 	bl	8009278 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009728:	4b2d      	ldr	r3, [pc, #180]	; (80097e0 <xTaskIncrementTick+0x108>)
 800972a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972c:	42ab      	cmp	r3, r5
 800972e:	d93d      	bls.n	80097ac <xTaskIncrementTick+0xd4>
BaseType_t xSwitchRequired = pdFALSE;
 8009730:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009732:	4a2b      	ldr	r2, [pc, #172]	; (80097e0 <xTaskIncrementTick+0x108>)
 8009734:	f8d2 3100 	ldr.w	r3, [r2, #256]	; 0x100
 8009738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800973a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800973e:	0099      	lsls	r1, r3, #2
 8009740:	440a      	add	r2, r1
 8009742:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8009744:	2b01      	cmp	r3, #1
 8009746:	d942      	bls.n	80097ce <xTaskIncrementTick+0xf6>
				xSwitchRequired = pdTRUE;
 8009748:	2401      	movs	r4, #1
 800974a:	e040      	b.n	80097ce <xTaskIncrementTick+0xf6>
							xSwitchRequired = pdTRUE;
 800974c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800974e:	4b24      	ldr	r3, [pc, #144]	; (80097e0 <xTaskIncrementTick+0x108>)
 8009750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	b363      	cbz	r3, 80097b0 <xTaskIncrementTick+0xd8>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009756:	4b22      	ldr	r3, [pc, #136]	; (80097e0 <xTaskIncrementTick+0x108>)
 8009758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800975e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8009760:	429d      	cmp	r5, r3
 8009762:	d32a      	bcc.n	80097ba <xTaskIncrementTick+0xe2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009764:	f106 0804 	add.w	r8, r6, #4
 8009768:	4640      	mov	r0, r8
 800976a:	f7ff f84f 	bl	800880c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800976e:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8009770:	b11b      	cbz	r3, 800977a <xTaskIncrementTick+0xa2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009772:	f106 0018 	add.w	r0, r6, #24
 8009776:	f7ff f849 	bl	800880c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800977a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800977c:	2201      	movs	r2, #1
 800977e:	409a      	lsls	r2, r3
 8009780:	4f17      	ldr	r7, [pc, #92]	; (80097e0 <xTaskIncrementTick+0x108>)
 8009782:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8009786:	430a      	orrs	r2, r1
 8009788:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800978c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8009790:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009794:	009a      	lsls	r2, r3, #2
 8009796:	4641      	mov	r1, r8
 8009798:	4410      	add	r0, r2
 800979a:	f7ff f811 	bl	80087c0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800979e:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80097a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80097a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d2d0      	bcs.n	800974c <xTaskIncrementTick+0x74>
 80097aa:	e7d0      	b.n	800974e <xTaskIncrementTick+0x76>
BaseType_t xSwitchRequired = pdFALSE;
 80097ac:	2400      	movs	r4, #0
 80097ae:	e7ce      	b.n	800974e <xTaskIncrementTick+0x76>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097b0:	4b0b      	ldr	r3, [pc, #44]	; (80097e0 <xTaskIncrementTick+0x108>)
 80097b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097b6:	62da      	str	r2, [r3, #44]	; 0x2c
					break;
 80097b8:	e7bb      	b.n	8009732 <xTaskIncrementTick+0x5a>
						xNextTaskUnblockTime = xItemValue;
 80097ba:	4a09      	ldr	r2, [pc, #36]	; (80097e0 <xTaskIncrementTick+0x108>)
 80097bc:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
 80097be:	e7b8      	b.n	8009732 <xTaskIncrementTick+0x5a>
		++uxPendedTicks;
 80097c0:	4a07      	ldr	r2, [pc, #28]	; (80097e0 <xTaskIncrementTick+0x108>)
 80097c2:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
 80097c6:	3301      	adds	r3, #1
 80097c8:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
BaseType_t xSwitchRequired = pdFALSE;
 80097cc:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 80097ce:	4b04      	ldr	r3, [pc, #16]	; (80097e0 <xTaskIncrementTick+0x108>)
 80097d0:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80097d4:	b103      	cbz	r3, 80097d8 <xTaskIncrementTick+0x100>
			xSwitchRequired = pdTRUE;
 80097d6:	2401      	movs	r4, #1
}
 80097d8:	4620      	mov	r0, r4
 80097da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097de:	bf00      	nop
 80097e0:	200006d4 	.word	0x200006d4

080097e4 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80097e4:	4b39      	ldr	r3, [pc, #228]	; (80098cc <xTaskResumeAll+0xe8>)
 80097e6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80097ea:	b943      	cbnz	r3, 80097fe <xTaskResumeAll+0x1a>
 80097ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	e7fe      	b.n	80097fc <xTaskResumeAll+0x18>
{
 80097fe:	b570      	push	{r4, r5, r6, lr}
	taskENTER_CRITICAL();
 8009800:	f000 fb48 	bl	8009e94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009804:	4b31      	ldr	r3, [pc, #196]	; (80098cc <xTaskResumeAll+0xe8>)
 8009806:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 800980a:	3a01      	subs	r2, #1
 800980c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009810:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009814:	2b00      	cmp	r3, #0
 8009816:	d154      	bne.n	80098c2 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009818:	4b2c      	ldr	r3, [pc, #176]	; (80098cc <xTaskResumeAll+0xe8>)
 800981a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800981e:	b923      	cbnz	r3, 800982a <xTaskResumeAll+0x46>
BaseType_t xAlreadyYielded = pdFALSE;
 8009820:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009822:	f000 fb59 	bl	8009ed8 <vPortExitCritical>
}
 8009826:	4620      	mov	r0, r4
 8009828:	bd70      	pop	{r4, r5, r6, pc}
TCB_t *pxTCB = NULL;
 800982a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800982c:	4b27      	ldr	r3, [pc, #156]	; (80098cc <xTaskResumeAll+0xe8>)
 800982e:	695b      	ldr	r3, [r3, #20]
 8009830:	b32b      	cbz	r3, 800987e <xTaskResumeAll+0x9a>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009832:	4d26      	ldr	r5, [pc, #152]	; (80098cc <xTaskResumeAll+0xe8>)
 8009834:	6a2b      	ldr	r3, [r5, #32]
 8009836:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009838:	f104 0018 	add.w	r0, r4, #24
 800983c:	f7fe ffe6 	bl	800880c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009840:	1d26      	adds	r6, r4, #4
 8009842:	4630      	mov	r0, r6
 8009844:	f7fe ffe2 	bl	800880c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009848:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800984a:	2201      	movs	r2, #1
 800984c:	409a      	lsls	r2, r3
 800984e:	f8d5 110c 	ldr.w	r1, [r5, #268]	; 0x10c
 8009852:	430a      	orrs	r2, r1
 8009854:	f8c5 210c 	str.w	r2, [r5, #268]	; 0x10c
 8009858:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800985c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009860:	009a      	lsls	r2, r3, #2
 8009862:	4631      	mov	r1, r6
 8009864:	4410      	add	r0, r2
 8009866:	f7fe ffab 	bl	80087c0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800986a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800986c:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
 8009870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009872:	429a      	cmp	r2, r3
 8009874:	d3da      	bcc.n	800982c <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8009876:	2201      	movs	r2, #1
 8009878:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
 800987c:	e7d6      	b.n	800982c <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800987e:	b10c      	cbz	r4, 8009884 <xTaskResumeAll+0xa0>
					prvResetNextTaskUnblockTime();
 8009880:	f7ff fcfa 	bl	8009278 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009884:	4b11      	ldr	r3, [pc, #68]	; (80098cc <xTaskResumeAll+0xe8>)
 8009886:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800988a:	b164      	cbz	r4, 80098a6 <xTaskResumeAll+0xc2>
							if( xTaskIncrementTick() != pdFALSE )
 800988c:	f7ff ff24 	bl	80096d8 <xTaskIncrementTick>
 8009890:	b118      	cbz	r0, 800989a <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 8009892:	4b0e      	ldr	r3, [pc, #56]	; (80098cc <xTaskResumeAll+0xe8>)
 8009894:	2201      	movs	r2, #1
 8009896:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800989a:	3c01      	subs	r4, #1
 800989c:	d1f6      	bne.n	800988c <xTaskResumeAll+0xa8>
						uxPendedTicks = 0;
 800989e:	4b0b      	ldr	r3, [pc, #44]	; (80098cc <xTaskResumeAll+0xe8>)
 80098a0:	2200      	movs	r2, #0
 80098a2:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				if( xYieldPending != pdFALSE )
 80098a6:	4b09      	ldr	r3, [pc, #36]	; (80098cc <xTaskResumeAll+0xe8>)
 80098a8:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80098ac:	b15b      	cbz	r3, 80098c6 <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
 80098ae:	4b08      	ldr	r3, [pc, #32]	; (80098d0 <xTaskResumeAll+0xec>)
 80098b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	f3bf 8f4f 	dsb	sy
 80098ba:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80098be:	2401      	movs	r4, #1
 80098c0:	e7af      	b.n	8009822 <xTaskResumeAll+0x3e>
BaseType_t xAlreadyYielded = pdFALSE;
 80098c2:	2400      	movs	r4, #0
 80098c4:	e7ad      	b.n	8009822 <xTaskResumeAll+0x3e>
 80098c6:	2400      	movs	r4, #0
 80098c8:	e7ab      	b.n	8009822 <xTaskResumeAll+0x3e>
 80098ca:	bf00      	nop
 80098cc:	200006d4 	.word	0x200006d4
 80098d0:	e000ed04 	.word	0xe000ed04

080098d4 <vTaskDelay>:
	{
 80098d4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80098d6:	b1b0      	cbz	r0, 8009906 <vTaskDelay+0x32>
 80098d8:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 80098da:	4b0f      	ldr	r3, [pc, #60]	; (8009918 <vTaskDelay+0x44>)
 80098dc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80098e0:	b143      	cbz	r3, 80098f4 <vTaskDelay+0x20>
 80098e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e6:	f383 8811 	msr	BASEPRI, r3
 80098ea:	f3bf 8f6f 	isb	sy
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	e7fe      	b.n	80098f2 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 80098f4:	f7ff fed6 	bl	80096a4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80098f8:	2100      	movs	r1, #0
 80098fa:	4620      	mov	r0, r4
 80098fc:	f7ff fdd8 	bl	80094b0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8009900:	f7ff ff70 	bl	80097e4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009904:	b938      	cbnz	r0, 8009916 <vTaskDelay+0x42>
			portYIELD_WITHIN_API();
 8009906:	4b05      	ldr	r3, [pc, #20]	; (800991c <vTaskDelay+0x48>)
 8009908:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	f3bf 8f4f 	dsb	sy
 8009912:	f3bf 8f6f 	isb	sy
	}
 8009916:	bd10      	pop	{r4, pc}
 8009918:	200006d4 	.word	0x200006d4
 800991c:	e000ed04 	.word	0xe000ed04

08009920 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009920:	4b30      	ldr	r3, [pc, #192]	; (80099e4 <vTaskSwitchContext+0xc4>)
 8009922:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009926:	b123      	cbz	r3, 8009932 <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 8009928:	4b2e      	ldr	r3, [pc, #184]	; (80099e4 <vTaskSwitchContext+0xc4>)
 800992a:	2201      	movs	r2, #1
 800992c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8009930:	4770      	bx	lr
{
 8009932:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
 8009934:	4b2b      	ldr	r3, [pc, #172]	; (80099e4 <vTaskSwitchContext+0xc4>)
 8009936:	2200      	movs	r2, #0
 8009938:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		taskCHECK_FOR_STACK_OVERFLOW();
 800993c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8009948:	d103      	bne.n	8009952 <vTaskSwitchContext+0x32>
 800994a:	685a      	ldr	r2, [r3, #4]
 800994c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8009950:	d01e      	beq.n	8009990 <vTaskSwitchContext+0x70>
 8009952:	4b24      	ldr	r3, [pc, #144]	; (80099e4 <vTaskSwitchContext+0xc4>)
 8009954:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 8009958:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 800995c:	3134      	adds	r1, #52	; 0x34
 800995e:	f7f7 fdb6 	bl	80014ce <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009962:	4a20      	ldr	r2, [pc, #128]	; (80099e4 <vTaskSwitchContext+0xc4>)
 8009964:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009968:	fab3 f383 	clz	r3, r3
 800996c:	b2db      	uxtb	r3, r3
 800996e:	f1c3 031f 	rsb	r3, r3, #31
 8009972:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8009976:	0081      	lsls	r1, r0, #2
 8009978:	440a      	add	r2, r1
 800997a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800997c:	b98a      	cbnz	r2, 80099a2 <vTaskSwitchContext+0x82>
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	e7fe      	b.n	800998e <vTaskSwitchContext+0x6e>
		taskCHECK_FOR_STACK_OVERFLOW();
 8009990:	689a      	ldr	r2, [r3, #8]
 8009992:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 8009996:	d1dc      	bne.n	8009952 <vTaskSwitchContext+0x32>
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 800999e:	d1d8      	bne.n	8009952 <vTaskSwitchContext+0x32>
 80099a0:	e7df      	b.n	8009962 <vTaskSwitchContext+0x42>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80099a2:	4a10      	ldr	r2, [pc, #64]	; (80099e4 <vTaskSwitchContext+0xc4>)
 80099a4:	0099      	lsls	r1, r3, #2
 80099a6:	18cc      	adds	r4, r1, r3
 80099a8:	00a0      	lsls	r0, r4, #2
 80099aa:	4410      	add	r0, r2
 80099ac:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80099ae:	6864      	ldr	r4, [r4, #4]
 80099b0:	6344      	str	r4, [r0, #52]	; 0x34
 80099b2:	3230      	adds	r2, #48	; 0x30
 80099b4:	4419      	add	r1, r3
 80099b6:	0088      	lsls	r0, r1, #2
 80099b8:	3008      	adds	r0, #8
 80099ba:	4402      	add	r2, r0
 80099bc:	4294      	cmp	r4, r2
 80099be:	d009      	beq.n	80099d4 <vTaskSwitchContext+0xb4>
 80099c0:	4908      	ldr	r1, [pc, #32]	; (80099e4 <vTaskSwitchContext+0xc4>)
 80099c2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80099c6:	009a      	lsls	r2, r3, #2
 80099c8:	440a      	add	r2, r1
 80099ca:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	f8c1 3100 	str.w	r3, [r1, #256]	; 0x100
}
 80099d2:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80099d4:	6861      	ldr	r1, [r4, #4]
 80099d6:	4803      	ldr	r0, [pc, #12]	; (80099e4 <vTaskSwitchContext+0xc4>)
 80099d8:	2214      	movs	r2, #20
 80099da:	fb02 0203 	mla	r2, r2, r3, r0
 80099de:	6351      	str	r1, [r2, #52]	; 0x34
 80099e0:	e7ee      	b.n	80099c0 <vTaskSwitchContext+0xa0>
 80099e2:	bf00      	nop
 80099e4:	200006d4 	.word	0x200006d4

080099e8 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80099e8:	b940      	cbnz	r0, 80099fc <vTaskPlaceOnEventList+0x14>
 80099ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	e7fe      	b.n	80099fa <vTaskPlaceOnEventList+0x12>
{
 80099fc:	b510      	push	{r4, lr}
 80099fe:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009a00:	4b05      	ldr	r3, [pc, #20]	; (8009a18 <vTaskPlaceOnEventList+0x30>)
 8009a02:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 8009a06:	3118      	adds	r1, #24
 8009a08:	f7fe fee6 	bl	80087d8 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009a0c:	2101      	movs	r1, #1
 8009a0e:	4620      	mov	r0, r4
 8009a10:	f7ff fd4e 	bl	80094b0 <prvAddCurrentTaskToDelayedList>
}
 8009a14:	bd10      	pop	{r4, pc}
 8009a16:	bf00      	nop
 8009a18:	200006d4 	.word	0x200006d4

08009a1c <xTaskRemoveFromEventList>:
{
 8009a1c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009a1e:	68c3      	ldr	r3, [r0, #12]
 8009a20:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009a22:	b944      	cbnz	r4, 8009a36 <xTaskRemoveFromEventList+0x1a>
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	e7fe      	b.n	8009a34 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009a36:	f104 0518 	add.w	r5, r4, #24
 8009a3a:	4628      	mov	r0, r5
 8009a3c:	f7fe fee6 	bl	800880c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a40:	4b15      	ldr	r3, [pc, #84]	; (8009a98 <xTaskRemoveFromEventList+0x7c>)
 8009a42:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009a46:	bb03      	cbnz	r3, 8009a8a <xTaskRemoveFromEventList+0x6e>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a48:	1d25      	adds	r5, r4, #4
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	f7fe fede 	bl	800880c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009a50:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a52:	2101      	movs	r1, #1
 8009a54:	4099      	lsls	r1, r3
 8009a56:	4a10      	ldr	r2, [pc, #64]	; (8009a98 <xTaskRemoveFromEventList+0x7c>)
 8009a58:	f8d2 010c 	ldr.w	r0, [r2, #268]	; 0x10c
 8009a5c:	4301      	orrs	r1, r0
 8009a5e:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
 8009a62:	3230      	adds	r2, #48	; 0x30
 8009a64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009a68:	0098      	lsls	r0, r3, #2
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	4410      	add	r0, r2
 8009a6e:	f7fe fea7 	bl	80087c0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009a74:	4b08      	ldr	r3, [pc, #32]	; (8009a98 <xTaskRemoveFromEventList+0x7c>)
 8009a76:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d909      	bls.n	8009a94 <xTaskRemoveFromEventList+0x78>
		xYieldPending = pdTRUE;
 8009a80:	2001      	movs	r0, #1
 8009a82:	4b05      	ldr	r3, [pc, #20]	; (8009a98 <xTaskRemoveFromEventList+0x7c>)
 8009a84:	f8c3 0124 	str.w	r0, [r3, #292]	; 0x124
}
 8009a88:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009a8a:	4629      	mov	r1, r5
 8009a8c:	4803      	ldr	r0, [pc, #12]	; (8009a9c <xTaskRemoveFromEventList+0x80>)
 8009a8e:	f7fe fe97 	bl	80087c0 <vListInsertEnd>
 8009a92:	e7ee      	b.n	8009a72 <xTaskRemoveFromEventList+0x56>
		xReturn = pdFALSE;
 8009a94:	2000      	movs	r0, #0
	return xReturn;
 8009a96:	e7f7      	b.n	8009a88 <xTaskRemoveFromEventList+0x6c>
 8009a98:	200006d4 	.word	0x200006d4
 8009a9c:	200006e8 	.word	0x200006e8

08009aa0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009aa0:	4b03      	ldr	r3, [pc, #12]	; (8009ab0 <vTaskInternalSetTimeOutState+0x10>)
 8009aa2:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8009aa6:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009aa8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8009aac:	6043      	str	r3, [r0, #4]
}
 8009aae:	4770      	bx	lr
 8009ab0:	200006d4 	.word	0x200006d4

08009ab4 <xTaskCheckForTimeOut>:
{
 8009ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8009ab6:	b150      	cbz	r0, 8009ace <xTaskCheckForTimeOut+0x1a>
 8009ab8:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8009aba:	b989      	cbnz	r1, 8009ae0 <xTaskCheckForTimeOut+0x2c>
 8009abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac0:	f383 8811 	msr	BASEPRI, r3
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	f3bf 8f4f 	dsb	sy
 8009acc:	e7fe      	b.n	8009acc <xTaskCheckForTimeOut+0x18>
 8009ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	e7fe      	b.n	8009ade <xTaskCheckForTimeOut+0x2a>
 8009ae0:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 8009ae2:	f000 f9d7 	bl	8009e94 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009ae6:	4b12      	ldr	r3, [pc, #72]	; (8009b30 <xTaskCheckForTimeOut+0x7c>)
 8009ae8:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009aec:	6868      	ldr	r0, [r5, #4]
 8009aee:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 8009af0:	6823      	ldr	r3, [r4, #0]
 8009af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009af6:	d017      	beq.n	8009b28 <xTaskCheckForTimeOut+0x74>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009af8:	682f      	ldr	r7, [r5, #0]
 8009afa:	4e0d      	ldr	r6, [pc, #52]	; (8009b30 <xTaskCheckForTimeOut+0x7c>)
 8009afc:	f8d6 611c 	ldr.w	r6, [r6, #284]	; 0x11c
 8009b00:	42b7      	cmp	r7, r6
 8009b02:	d001      	beq.n	8009b08 <xTaskCheckForTimeOut+0x54>
 8009b04:	4288      	cmp	r0, r1
 8009b06:	d911      	bls.n	8009b2c <xTaskCheckForTimeOut+0x78>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d803      	bhi.n	8009b14 <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait = 0;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009b10:	2401      	movs	r4, #1
 8009b12:	e005      	b.n	8009b20 <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait -= xElapsedTime;
 8009b14:	1a9b      	subs	r3, r3, r2
 8009b16:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009b18:	4628      	mov	r0, r5
 8009b1a:	f7ff ffc1 	bl	8009aa0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009b1e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009b20:	f000 f9da 	bl	8009ed8 <vPortExitCritical>
}
 8009b24:	4620      	mov	r0, r4
 8009b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8009b28:	2400      	movs	r4, #0
 8009b2a:	e7f9      	b.n	8009b20 <xTaskCheckForTimeOut+0x6c>
			xReturn = pdTRUE;
 8009b2c:	2401      	movs	r4, #1
 8009b2e:	e7f7      	b.n	8009b20 <xTaskCheckForTimeOut+0x6c>
 8009b30:	200006d4 	.word	0x200006d4

08009b34 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009b34:	4b02      	ldr	r3, [pc, #8]	; (8009b40 <vTaskMissedYield+0xc>)
 8009b36:	2201      	movs	r2, #1
 8009b38:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
}
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	200006d4 	.word	0x200006d4

08009b44 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8009b44:	4b01      	ldr	r3, [pc, #4]	; (8009b4c <xTaskGetCurrentTaskHandle+0x8>)
 8009b46:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	}
 8009b4a:	4770      	bx	lr
 8009b4c:	200006d4 	.word	0x200006d4

08009b50 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009b50:	4b06      	ldr	r3, [pc, #24]	; (8009b6c <xTaskGetSchedulerState+0x1c>)
 8009b52:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009b56:	b13b      	cbz	r3, 8009b68 <xTaskGetSchedulerState+0x18>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b58:	4b04      	ldr	r3, [pc, #16]	; (8009b6c <xTaskGetSchedulerState+0x1c>)
 8009b5a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009b5e:	b10b      	cbz	r3, 8009b64 <xTaskGetSchedulerState+0x14>
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b60:	2000      	movs	r0, #0
	}
 8009b62:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 8009b64:	2002      	movs	r0, #2
 8009b66:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b68:	2001      	movs	r0, #1
 8009b6a:	4770      	bx	lr
 8009b6c:	200006d4 	.word	0x200006d4

08009b70 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d059      	beq.n	8009c28 <xTaskPriorityInherit+0xb8>
	{
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009b78:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8009b7a:	492c      	ldr	r1, [pc, #176]	; (8009c2c <xTaskPriorityInherit+0xbc>)
 8009b7c:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
 8009b80:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009b82:	428a      	cmp	r2, r1
 8009b84:	d245      	bcs.n	8009c12 <xTaskPriorityInherit+0xa2>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b86:	6981      	ldr	r1, [r0, #24]
 8009b88:	2900      	cmp	r1, #0
 8009b8a:	db06      	blt.n	8009b9a <xTaskPriorityInherit+0x2a>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b8c:	4927      	ldr	r1, [pc, #156]	; (8009c2c <xTaskPriorityInherit+0xbc>)
 8009b8e:	f8d1 1100 	ldr.w	r1, [r1, #256]	; 0x100
 8009b92:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8009b94:	f1c1 0107 	rsb	r1, r1, #7
 8009b98:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009b9a:	6960      	ldr	r0, [r4, #20]
 8009b9c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009ba0:	0091      	lsls	r1, r2, #2
 8009ba2:	4a23      	ldr	r2, [pc, #140]	; (8009c30 <xTaskPriorityInherit+0xc0>)
 8009ba4:	440a      	add	r2, r1
 8009ba6:	4290      	cmp	r0, r2
 8009ba8:	d006      	beq.n	8009bb8 <xTaskPriorityInherit+0x48>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009baa:	4a20      	ldr	r2, [pc, #128]	; (8009c2c <xTaskPriorityInherit+0xbc>)
 8009bac:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 8009bb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009bb2:	62e2      	str	r2, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8009bb4:	2001      	movs	r0, #1
	}
 8009bb6:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bb8:	1d25      	adds	r5, r4, #4
 8009bba:	4628      	mov	r0, r5
 8009bbc:	f7fe fe26 	bl	800880c <uxListRemove>
 8009bc0:	b980      	cbnz	r0, 8009be4 <xTaskPriorityInherit+0x74>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009bc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009bc4:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8009bc8:	0099      	lsls	r1, r3, #2
 8009bca:	4b18      	ldr	r3, [pc, #96]	; (8009c2c <xTaskPriorityInherit+0xbc>)
 8009bcc:	440b      	add	r3, r1
 8009bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bd0:	b943      	cbnz	r3, 8009be4 <xTaskPriorityInherit+0x74>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	4093      	lsls	r3, r2
 8009bd6:	4915      	ldr	r1, [pc, #84]	; (8009c2c <xTaskPriorityInherit+0xbc>)
 8009bd8:	f8d1 210c 	ldr.w	r2, [r1, #268]	; 0x10c
 8009bdc:	ea22 0203 	bic.w	r2, r2, r3
 8009be0:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009be4:	4811      	ldr	r0, [pc, #68]	; (8009c2c <xTaskPriorityInherit+0xbc>)
 8009be6:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8009bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bec:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009bee:	2401      	movs	r4, #1
 8009bf0:	fa04 f203 	lsl.w	r2, r4, r3
 8009bf4:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 8009bf8:	430a      	orrs	r2, r1
 8009bfa:	f8c0 210c 	str.w	r2, [r0, #268]	; 0x10c
 8009bfe:	3030      	adds	r0, #48	; 0x30
 8009c00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009c04:	009a      	lsls	r2, r3, #2
 8009c06:	4629      	mov	r1, r5
 8009c08:	4410      	add	r0, r2
 8009c0a:	f7fe fdd9 	bl	80087c0 <vListInsertEnd>
				xReturn = pdTRUE;
 8009c0e:	4620      	mov	r0, r4
 8009c10:	e7d1      	b.n	8009bb6 <xTaskPriorityInherit+0x46>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009c12:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c14:	4b05      	ldr	r3, [pc, #20]	; (8009c2c <xTaskPriorityInherit+0xbc>)
 8009c16:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d201      	bcs.n	8009c24 <xTaskPriorityInherit+0xb4>
					xReturn = pdTRUE;
 8009c20:	2001      	movs	r0, #1
		return xReturn;
 8009c22:	e7c8      	b.n	8009bb6 <xTaskPriorityInherit+0x46>
	BaseType_t xReturn = pdFALSE;
 8009c24:	2000      	movs	r0, #0
 8009c26:	e7c6      	b.n	8009bb6 <xTaskPriorityInherit+0x46>
 8009c28:	2000      	movs	r0, #0
	}
 8009c2a:	4770      	bx	lr
 8009c2c:	200006d4 	.word	0x200006d4
 8009c30:	20000704 	.word	0x20000704

08009c34 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8009c34:	2800      	cmp	r0, #0
 8009c36:	d04d      	beq.n	8009cd4 <xTaskPriorityDisinherit+0xa0>
	{
 8009c38:	b538      	push	{r3, r4, r5, lr}
 8009c3a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8009c3c:	4a28      	ldr	r2, [pc, #160]	; (8009ce0 <xTaskPriorityDisinherit+0xac>)
 8009c3e:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 8009c42:	4282      	cmp	r2, r0
 8009c44:	d008      	beq.n	8009c58 <xTaskPriorityDisinherit+0x24>
 8009c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c4a:	f383 8811 	msr	BASEPRI, r3
 8009c4e:	f3bf 8f6f 	isb	sy
 8009c52:	f3bf 8f4f 	dsb	sy
 8009c56:	e7fe      	b.n	8009c56 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c58:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8009c5a:	b942      	cbnz	r2, 8009c6e <xTaskPriorityDisinherit+0x3a>
 8009c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c60:	f383 8811 	msr	BASEPRI, r3
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	e7fe      	b.n	8009c6c <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;
 8009c6e:	3a01      	subs	r2, #1
 8009c70:	6482      	str	r2, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c72:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8009c74:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009c76:	4288      	cmp	r0, r1
 8009c78:	d02e      	beq.n	8009cd8 <xTaskPriorityDisinherit+0xa4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c7a:	bb7a      	cbnz	r2, 8009cdc <xTaskPriorityDisinherit+0xa8>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c7c:	1d25      	adds	r5, r4, #4
 8009c7e:	4628      	mov	r0, r5
 8009c80:	f7fe fdc4 	bl	800880c <uxListRemove>
 8009c84:	b978      	cbnz	r0, 8009ca6 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009c86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009c88:	4915      	ldr	r1, [pc, #84]	; (8009ce0 <xTaskPriorityDisinherit+0xac>)
 8009c8a:	2314      	movs	r3, #20
 8009c8c:	fb03 1302 	mla	r3, r3, r2, r1
 8009c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c92:	b943      	cbnz	r3, 8009ca6 <xTaskPriorityDisinherit+0x72>
 8009c94:	2301      	movs	r3, #1
 8009c96:	fa03 f202 	lsl.w	r2, r3, r2
 8009c9a:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 8009c9e:	ea23 0302 	bic.w	r3, r3, r2
 8009ca2:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ca6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009ca8:	62e2      	str	r2, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009caa:	f1c2 0307 	rsb	r3, r2, #7
 8009cae:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009cb0:	2401      	movs	r4, #1
 8009cb2:	fa04 f102 	lsl.w	r1, r4, r2
 8009cb6:	4b0a      	ldr	r3, [pc, #40]	; (8009ce0 <xTaskPriorityDisinherit+0xac>)
 8009cb8:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
 8009cbc:	4301      	orrs	r1, r0
 8009cbe:	f8c3 110c 	str.w	r1, [r3, #268]	; 0x10c
 8009cc2:	3330      	adds	r3, #48	; 0x30
 8009cc4:	4629      	mov	r1, r5
 8009cc6:	2014      	movs	r0, #20
 8009cc8:	fb00 3002 	mla	r0, r0, r2, r3
 8009ccc:	f7fe fd78 	bl	80087c0 <vListInsertEnd>
					xReturn = pdTRUE;
 8009cd0:	4620      	mov	r0, r4
	}
 8009cd2:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8009cd4:	2000      	movs	r0, #0
	}
 8009cd6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8009cd8:	2000      	movs	r0, #0
 8009cda:	e7fa      	b.n	8009cd2 <xTaskPriorityDisinherit+0x9e>
 8009cdc:	2000      	movs	r0, #0
		return xReturn;
 8009cde:	e7f8      	b.n	8009cd2 <xTaskPriorityDisinherit+0x9e>
 8009ce0:	200006d4 	.word	0x200006d4

08009ce4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	d059      	beq.n	8009d9c <vTaskPriorityDisinheritAfterTimeout+0xb8>
	{
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8009cec:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8009cee:	b940      	cbnz	r0, 8009d02 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8009cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	e7fe      	b.n	8009d00 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009d02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d04:	428a      	cmp	r2, r1
 8009d06:	d200      	bcs.n	8009d0a <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009d08:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009d0a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009d0c:	4291      	cmp	r1, r2
 8009d0e:	d001      	beq.n	8009d14 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009d10:	2801      	cmp	r0, #1
 8009d12:	d000      	beq.n	8009d16 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8009d14:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8009d16:	4822      	ldr	r0, [pc, #136]	; (8009da0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8009d18:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 8009d1c:	4298      	cmp	r0, r3
 8009d1e:	d108      	bne.n	8009d32 <vTaskPriorityDisinheritAfterTimeout+0x4e>
 8009d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d24:	f383 8811 	msr	BASEPRI, r3
 8009d28:	f3bf 8f6f 	isb	sy
 8009d2c:	f3bf 8f4f 	dsb	sy
 8009d30:	e7fe      	b.n	8009d30 <vTaskPriorityDisinheritAfterTimeout+0x4c>
					pxTCB->uxPriority = uxPriorityToUse;
 8009d32:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d34:	6998      	ldr	r0, [r3, #24]
 8009d36:	2800      	cmp	r0, #0
 8009d38:	db02      	blt.n	8009d40 <vTaskPriorityDisinheritAfterTimeout+0x5c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d3a:	f1c2 0207 	rsb	r2, r2, #7
 8009d3e:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009d40:	695a      	ldr	r2, [r3, #20]
 8009d42:	4818      	ldr	r0, [pc, #96]	; (8009da4 <vTaskPriorityDisinheritAfterTimeout+0xc0>)
 8009d44:	2414      	movs	r4, #20
 8009d46:	fb04 0101 	mla	r1, r4, r1, r0
 8009d4a:	428a      	cmp	r2, r1
 8009d4c:	d1e2      	bne.n	8009d14 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8009d4e:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d50:	1d1d      	adds	r5, r3, #4
 8009d52:	4628      	mov	r0, r5
 8009d54:	f7fe fd5a 	bl	800880c <uxListRemove>
 8009d58:	b978      	cbnz	r0, 8009d7a <vTaskPriorityDisinheritAfterTimeout+0x96>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009d5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8009d5c:	4910      	ldr	r1, [pc, #64]	; (8009da0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8009d5e:	2314      	movs	r3, #20
 8009d60:	fb03 1302 	mla	r3, r3, r2, r1
 8009d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d66:	b943      	cbnz	r3, 8009d7a <vTaskPriorityDisinheritAfterTimeout+0x96>
 8009d68:	2301      	movs	r3, #1
 8009d6a:	fa03 f202 	lsl.w	r2, r3, r2
 8009d6e:	f8d1 310c 	ldr.w	r3, [r1, #268]	; 0x10c
 8009d72:	ea23 0302 	bic.w	r3, r3, r2
 8009d76:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
						prvAddTaskToReadyList( pxTCB );
 8009d7a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	4082      	lsls	r2, r0
 8009d80:	4b07      	ldr	r3, [pc, #28]	; (8009da0 <vTaskPriorityDisinheritAfterTimeout+0xbc>)
 8009d82:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8009d86:	430a      	orrs	r2, r1
 8009d88:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8009d8c:	3330      	adds	r3, #48	; 0x30
 8009d8e:	4629      	mov	r1, r5
 8009d90:	2214      	movs	r2, #20
 8009d92:	fb02 3000 	mla	r0, r2, r0, r3
 8009d96:	f7fe fd13 	bl	80087c0 <vListInsertEnd>
	}
 8009d9a:	e7bb      	b.n	8009d14 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	200006d4 	.word	0x200006d4
 8009da4:	20000704 	.word	0x20000704

08009da8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009da8:	4b06      	ldr	r3, [pc, #24]	; (8009dc4 <pvTaskIncrementMutexHeldCount+0x1c>)
 8009daa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009dae:	b12b      	cbz	r3, 8009dbc <pvTaskIncrementMutexHeldCount+0x14>
			( pxCurrentTCB->uxMutexesHeld )++;
 8009db0:	4b04      	ldr	r3, [pc, #16]	; (8009dc4 <pvTaskIncrementMutexHeldCount+0x1c>)
 8009db2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8009db6:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8009db8:	3301      	adds	r3, #1
 8009dba:	6493      	str	r3, [r2, #72]	; 0x48
		return pxCurrentTCB;
 8009dbc:	4b01      	ldr	r3, [pc, #4]	; (8009dc4 <pvTaskIncrementMutexHeldCount+0x1c>)
 8009dbe:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	}
 8009dc2:	4770      	bx	lr
 8009dc4:	200006d4 	.word	0x200006d4

08009dc8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009dc8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009dce:	4b0d      	ldr	r3, [pc, #52]	; (8009e04 <prvTaskExitError+0x3c>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dd6:	d008      	beq.n	8009dea <prvTaskExitError+0x22>
 8009dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	e7fe      	b.n	8009de8 <prvTaskExitError+0x20>
 8009dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009dfa:	9b01      	ldr	r3, [sp, #4]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d0fc      	beq.n	8009dfa <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009e00:	b002      	add	sp, #8
 8009e02:	4770      	bx	lr
 8009e04:	20000054 	.word	0x20000054

08009e08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009e08:	4808      	ldr	r0, [pc, #32]	; (8009e2c <prvPortStartFirstTask+0x24>)
 8009e0a:	6800      	ldr	r0, [r0, #0]
 8009e0c:	6800      	ldr	r0, [r0, #0]
 8009e0e:	f380 8808 	msr	MSP, r0
 8009e12:	f04f 0000 	mov.w	r0, #0
 8009e16:	f380 8814 	msr	CONTROL, r0
 8009e1a:	b662      	cpsie	i
 8009e1c:	b661      	cpsie	f
 8009e1e:	f3bf 8f4f 	dsb	sy
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	df00      	svc	0
 8009e28:	bf00      	nop
 8009e2a:	0000      	.short	0x0000
 8009e2c:	e000ed08 	.word	0xe000ed08

08009e30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e40 <vPortEnableVFP+0x10>
 8009e34:	6801      	ldr	r1, [r0, #0]
 8009e36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e3a:	6001      	str	r1, [r0, #0]
 8009e3c:	4770      	bx	lr
 8009e3e:	0000      	.short	0x0000
 8009e40:	e000ed88 	.word	0xe000ed88

08009e44 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e48:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e4c:	f021 0101 	bic.w	r1, r1, #1
 8009e50:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e54:	4b05      	ldr	r3, [pc, #20]	; (8009e6c <pxPortInitialiseStack+0x28>)
 8009e56:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e5a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e5e:	f06f 0302 	mvn.w	r3, #2
 8009e62:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8009e66:	3844      	subs	r0, #68	; 0x44
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	08009dc9 	.word	0x08009dc9

08009e70 <SVC_Handler>:
	__asm volatile (
 8009e70:	4b07      	ldr	r3, [pc, #28]	; (8009e90 <pxCurrentTCBConst2>)
 8009e72:	6819      	ldr	r1, [r3, #0]
 8009e74:	6808      	ldr	r0, [r1, #0]
 8009e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7a:	f380 8809 	msr	PSP, r0
 8009e7e:	f3bf 8f6f 	isb	sy
 8009e82:	f04f 0000 	mov.w	r0, #0
 8009e86:	f380 8811 	msr	BASEPRI, r0
 8009e8a:	4770      	bx	lr
 8009e8c:	f3af 8000 	nop.w

08009e90 <pxCurrentTCBConst2>:
 8009e90:	200007d4 	.word	0x200007d4

08009e94 <vPortEnterCritical>:
 8009e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009ea4:	4a0a      	ldr	r2, [pc, #40]	; (8009ed0 <vPortEnterCritical+0x3c>)
 8009ea6:	6813      	ldr	r3, [r2, #0]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d000      	beq.n	8009eb2 <vPortEnterCritical+0x1e>
}
 8009eb0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009eb2:	4b08      	ldr	r3, [pc, #32]	; (8009ed4 <vPortEnterCritical+0x40>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009eba:	d0f9      	beq.n	8009eb0 <vPortEnterCritical+0x1c>
 8009ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec0:	f383 8811 	msr	BASEPRI, r3
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	f3bf 8f4f 	dsb	sy
 8009ecc:	e7fe      	b.n	8009ecc <vPortEnterCritical+0x38>
 8009ece:	bf00      	nop
 8009ed0:	20000054 	.word	0x20000054
 8009ed4:	e000ed04 	.word	0xe000ed04

08009ed8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009ed8:	4b09      	ldr	r3, [pc, #36]	; (8009f00 <vPortExitCritical+0x28>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	b943      	cbnz	r3, 8009ef0 <vPortExitCritical+0x18>
 8009ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	e7fe      	b.n	8009eee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	4a03      	ldr	r2, [pc, #12]	; (8009f00 <vPortExitCritical+0x28>)
 8009ef4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ef6:	b90b      	cbnz	r3, 8009efc <vPortExitCritical+0x24>
	__asm volatile
 8009ef8:	f383 8811 	msr	BASEPRI, r3
}
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	20000054 	.word	0x20000054
	...

08009f10 <PendSV_Handler>:
	__asm volatile
 8009f10:	f3ef 8009 	mrs	r0, PSP
 8009f14:	f3bf 8f6f 	isb	sy
 8009f18:	4b15      	ldr	r3, [pc, #84]	; (8009f70 <pxCurrentTCBConst>)
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	f01e 0f10 	tst.w	lr, #16
 8009f20:	bf08      	it	eq
 8009f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f2a:	6010      	str	r0, [r2, #0]
 8009f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f34:	f380 8811 	msr	BASEPRI, r0
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f7ff fcee 	bl	8009920 <vTaskSwitchContext>
 8009f44:	f04f 0000 	mov.w	r0, #0
 8009f48:	f380 8811 	msr	BASEPRI, r0
 8009f4c:	bc09      	pop	{r0, r3}
 8009f4e:	6819      	ldr	r1, [r3, #0]
 8009f50:	6808      	ldr	r0, [r1, #0]
 8009f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f56:	f01e 0f10 	tst.w	lr, #16
 8009f5a:	bf08      	it	eq
 8009f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f60:	f380 8809 	msr	PSP, r0
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	f3af 8000 	nop.w

08009f70 <pxCurrentTCBConst>:
 8009f70:	200007d4 	.word	0x200007d4

08009f74 <SysTick_Handler>:
{
 8009f74:	b508      	push	{r3, lr}
	__asm volatile
 8009f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7a:	f383 8811 	msr	BASEPRI, r3
 8009f7e:	f3bf 8f6f 	isb	sy
 8009f82:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8009f86:	f7ff fba7 	bl	80096d8 <xTaskIncrementTick>
 8009f8a:	b118      	cbz	r0, 8009f94 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f8c:	4b03      	ldr	r3, [pc, #12]	; (8009f9c <SysTick_Handler+0x28>)
 8009f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f92:	601a      	str	r2, [r3, #0]
	__asm volatile
 8009f94:	2300      	movs	r3, #0
 8009f96:	f383 8811 	msr	BASEPRI, r3
}
 8009f9a:	bd08      	pop	{r3, pc}
 8009f9c:	e000ed04 	.word	0xe000ed04

08009fa0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009fa0:	4a08      	ldr	r2, [pc, #32]	; (8009fc4 <vPortSetupTimerInterrupt+0x24>)
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009fa6:	4908      	ldr	r1, [pc, #32]	; (8009fc8 <vPortSetupTimerInterrupt+0x28>)
 8009fa8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009faa:	4b08      	ldr	r3, [pc, #32]	; (8009fcc <vPortSetupTimerInterrupt+0x2c>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4908      	ldr	r1, [pc, #32]	; (8009fd0 <vPortSetupTimerInterrupt+0x30>)
 8009fb0:	fba1 1303 	umull	r1, r3, r1, r3
 8009fb4:	099b      	lsrs	r3, r3, #6
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	4906      	ldr	r1, [pc, #24]	; (8009fd4 <vPortSetupTimerInterrupt+0x34>)
 8009fba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fbc:	2307      	movs	r3, #7
 8009fbe:	6013      	str	r3, [r2, #0]
}
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	e000e010 	.word	0xe000e010
 8009fc8:	e000e018 	.word	0xe000e018
 8009fcc:	2000001c 	.word	0x2000001c
 8009fd0:	10624dd3 	.word	0x10624dd3
 8009fd4:	e000e014 	.word	0xe000e014

08009fd8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009fd8:	4b39      	ldr	r3, [pc, #228]	; (800a0c0 <xPortStartScheduler+0xe8>)
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	4b39      	ldr	r3, [pc, #228]	; (800a0c4 <xPortStartScheduler+0xec>)
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	d00d      	beq.n	8009ffe <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009fe2:	4b37      	ldr	r3, [pc, #220]	; (800a0c0 <xPortStartScheduler+0xe8>)
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	4b38      	ldr	r3, [pc, #224]	; (800a0c8 <xPortStartScheduler+0xf0>)
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d111      	bne.n	800a010 <xPortStartScheduler+0x38>
	__asm volatile
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	e7fe      	b.n	8009ffc <xPortStartScheduler+0x24>
 8009ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a002:	f383 8811 	msr	BASEPRI, r3
 800a006:	f3bf 8f6f 	isb	sy
 800a00a:	f3bf 8f4f 	dsb	sy
 800a00e:	e7fe      	b.n	800a00e <xPortStartScheduler+0x36>
{
 800a010:	b510      	push	{r4, lr}
 800a012:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a014:	4b2d      	ldr	r3, [pc, #180]	; (800a0cc <xPortStartScheduler+0xf4>)
 800a016:	781a      	ldrb	r2, [r3, #0]
 800a018:	b2d2      	uxtb	r2, r2
 800a01a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a01c:	22ff      	movs	r2, #255	; 0xff
 800a01e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	b2db      	uxtb	r3, r3
 800a024:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a028:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a02c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a030:	4a27      	ldr	r2, [pc, #156]	; (800a0d0 <xPortStartScheduler+0xf8>)
 800a032:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a034:	2307      	movs	r3, #7
 800a036:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a038:	e009      	b.n	800a04e <xPortStartScheduler+0x76>
			ulMaxPRIGROUPValue--;
 800a03a:	4a25      	ldr	r2, [pc, #148]	; (800a0d0 <xPortStartScheduler+0xf8>)
 800a03c:	6853      	ldr	r3, [r2, #4]
 800a03e:	3b01      	subs	r3, #1
 800a040:	6053      	str	r3, [r2, #4]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a042:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a046:	005b      	lsls	r3, r3, #1
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a04e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a052:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a056:	d1f0      	bne.n	800a03a <xPortStartScheduler+0x62>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a058:	4b1d      	ldr	r3, [pc, #116]	; (800a0d0 <xPortStartScheduler+0xf8>)
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	2b03      	cmp	r3, #3
 800a05e:	d008      	beq.n	800a072 <xPortStartScheduler+0x9a>
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	e7fe      	b.n	800a070 <xPortStartScheduler+0x98>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a072:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a074:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a078:	4a15      	ldr	r2, [pc, #84]	; (800a0d0 <xPortStartScheduler+0xf8>)
 800a07a:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a07c:	9b01      	ldr	r3, [sp, #4]
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	4a12      	ldr	r2, [pc, #72]	; (800a0cc <xPortStartScheduler+0xf4>)
 800a082:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a084:	4b13      	ldr	r3, [pc, #76]	; (800a0d4 <xPortStartScheduler+0xfc>)
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800a08c:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a08e:	681a      	ldr	r2, [r3, #0]
 800a090:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800a094:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800a096:	f7ff ff83 	bl	8009fa0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a09a:	2400      	movs	r4, #0
 800a09c:	4b0e      	ldr	r3, [pc, #56]	; (800a0d8 <xPortStartScheduler+0x100>)
 800a09e:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800a0a0:	f7ff fec6 	bl	8009e30 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a0a4:	4a0d      	ldr	r2, [pc, #52]	; (800a0dc <xPortStartScheduler+0x104>)
 800a0a6:	6813      	ldr	r3, [r2, #0]
 800a0a8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a0ac:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800a0ae:	f7ff feab 	bl	8009e08 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a0b2:	f7ff fc35 	bl	8009920 <vTaskSwitchContext>
	prvTaskExitError();
 800a0b6:	f7ff fe87 	bl	8009dc8 <prvTaskExitError>
}
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	b002      	add	sp, #8
 800a0be:	bd10      	pop	{r4, pc}
 800a0c0:	e000ed00 	.word	0xe000ed00
 800a0c4:	410fc271 	.word	0x410fc271
 800a0c8:	410fc270 	.word	0x410fc270
 800a0cc:	e000e400 	.word	0xe000e400
 800a0d0:	200007fc 	.word	0x200007fc
 800a0d4:	e000ed20 	.word	0xe000ed20
 800a0d8:	20000054 	.word	0x20000054
 800a0dc:	e000ef34 	.word	0xe000ef34

0800a0e0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0e0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0e4:	2b0f      	cmp	r3, #15
 800a0e6:	d90f      	bls.n	800a108 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0e8:	4a10      	ldr	r2, [pc, #64]	; (800a12c <vPortValidateInterruptPriority+0x4c>)
 800a0ea:	5c9b      	ldrb	r3, [r3, r2]
 800a0ec:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0ee:	4a10      	ldr	r2, [pc, #64]	; (800a130 <vPortValidateInterruptPriority+0x50>)
 800a0f0:	7812      	ldrb	r2, [r2, #0]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d908      	bls.n	800a108 <vPortValidateInterruptPriority+0x28>
 800a0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	e7fe      	b.n	800a106 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a108:	4b0a      	ldr	r3, [pc, #40]	; (800a134 <vPortValidateInterruptPriority+0x54>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a110:	4a07      	ldr	r2, [pc, #28]	; (800a130 <vPortValidateInterruptPriority+0x50>)
 800a112:	6852      	ldr	r2, [r2, #4]
 800a114:	4293      	cmp	r3, r2
 800a116:	d908      	bls.n	800a12a <vPortValidateInterruptPriority+0x4a>
 800a118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11c:	f383 8811 	msr	BASEPRI, r3
 800a120:	f3bf 8f6f 	isb	sy
 800a124:	f3bf 8f4f 	dsb	sy
 800a128:	e7fe      	b.n	800a128 <vPortValidateInterruptPriority+0x48>
	}
 800a12a:	4770      	bx	lr
 800a12c:	e000e3f0 	.word	0xe000e3f0
 800a130:	200007fc 	.word	0x200007fc
 800a134:	e000ed0c 	.word	0xe000ed0c

0800a138 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a138:	4a10      	ldr	r2, [pc, #64]	; (800a17c <prvHeapInit+0x44>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a13a:	f012 0f07 	tst.w	r2, #7
 800a13e:	d01a      	beq.n	800a176 <prvHeapInit+0x3e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a140:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a142:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a146:	f5c1 4300 	rsb	r3, r1, #32768	; 0x8000
 800a14a:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a14c:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a14e:	490c      	ldr	r1, [pc, #48]	; (800a180 <prvHeapInit+0x48>)
 800a150:	600a      	str	r2, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a152:	2000      	movs	r0, #0
 800a154:	6048      	str	r0, [r1, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a156:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800a158:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a15a:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800a15e:	608b      	str	r3, [r1, #8]
	pxEnd->xBlockSize = 0;
 800a160:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a162:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a164:	1a98      	subs	r0, r3, r2
 800a166:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a168:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a16a:	60c8      	str	r0, [r1, #12]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a16c:	6108      	str	r0, [r1, #16]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a16e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a172:	614b      	str	r3, [r1, #20]
}
 800a174:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a17a:	e7e8      	b.n	800a14e <prvHeapInit+0x16>
 800a17c:	2000081c 	.word	0x2000081c
 800a180:	20000804 	.word	0x20000804

0800a184 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a184:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a186:	4b13      	ldr	r3, [pc, #76]	; (800a1d4 <prvInsertBlockIntoFreeList+0x50>)
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	4282      	cmp	r2, r0
 800a18c:	d31b      	bcc.n	800a1c6 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a18e:	6859      	ldr	r1, [r3, #4]
 800a190:	185c      	adds	r4, r3, r1
 800a192:	4284      	cmp	r4, r0
 800a194:	d103      	bne.n	800a19e <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a196:	6840      	ldr	r0, [r0, #4]
 800a198:	4401      	add	r1, r0
 800a19a:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a19c:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a19e:	6841      	ldr	r1, [r0, #4]
 800a1a0:	1844      	adds	r4, r0, r1
 800a1a2:	42a2      	cmp	r2, r4
 800a1a4:	d113      	bne.n	800a1ce <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a1a6:	4c0b      	ldr	r4, [pc, #44]	; (800a1d4 <prvInsertBlockIntoFreeList+0x50>)
 800a1a8:	68a4      	ldr	r4, [r4, #8]
 800a1aa:	42a2      	cmp	r2, r4
 800a1ac:	d00d      	beq.n	800a1ca <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a1ae:	6852      	ldr	r2, [r2, #4]
 800a1b0:	4411      	add	r1, r2
 800a1b2:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	6812      	ldr	r2, [r2, #0]
 800a1b8:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a1ba:	4298      	cmp	r0, r3
 800a1bc:	d000      	beq.n	800a1c0 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a1be:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a1c4:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	e7de      	b.n	800a188 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a1ca:	6004      	str	r4, [r0, #0]
 800a1cc:	e7f5      	b.n	800a1ba <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a1ce:	6002      	str	r2, [r0, #0]
 800a1d0:	e7f3      	b.n	800a1ba <prvInsertBlockIntoFreeList+0x36>
 800a1d2:	bf00      	nop
 800a1d4:	20000804 	.word	0x20000804

0800a1d8 <pvPortMalloc>:
{
 800a1d8:	b570      	push	{r4, r5, r6, lr}
 800a1da:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a1dc:	f7ff fa62 	bl	80096a4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a1e0:	4b3f      	ldr	r3, [pc, #252]	; (800a2e0 <pvPortMalloc+0x108>)
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	b1a3      	cbz	r3, 800a210 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a1e6:	4b3e      	ldr	r3, [pc, #248]	; (800a2e0 <pvPortMalloc+0x108>)
 800a1e8:	695b      	ldr	r3, [r3, #20]
 800a1ea:	421c      	tst	r4, r3
 800a1ec:	d013      	beq.n	800a216 <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
 800a1ee:	f7ff faf9 	bl	80097e4 <xTaskResumeAll>
void *pvReturn = NULL;
 800a1f2:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 800a1f4:	f7f7 f96c 	bl	80014d0 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1f8:	f016 0f07 	tst.w	r6, #7
 800a1fc:	d06d      	beq.n	800a2da <pvPortMalloc+0x102>
 800a1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	e7fe      	b.n	800a20e <pvPortMalloc+0x36>
			prvHeapInit();
 800a210:	f7ff ff92 	bl	800a138 <prvHeapInit>
 800a214:	e7e7      	b.n	800a1e6 <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
 800a216:	b194      	cbz	r4, 800a23e <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
 800a218:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a21a:	f014 0f07 	tst.w	r4, #7
 800a21e:	d00e      	beq.n	800a23e <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a220:	f024 0407 	bic.w	r4, r4, #7
 800a224:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a226:	f004 0307 	and.w	r3, r4, #7
 800a22a:	b143      	cbz	r3, 800a23e <pvPortMalloc+0x66>
 800a22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a230:	f383 8811 	msr	BASEPRI, r3
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	e7fe      	b.n	800a23c <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a23e:	b134      	cbz	r4, 800a24e <pvPortMalloc+0x76>
 800a240:	4b27      	ldr	r3, [pc, #156]	; (800a2e0 <pvPortMalloc+0x108>)
 800a242:	691b      	ldr	r3, [r3, #16]
 800a244:	42a3      	cmp	r3, r4
 800a246:	d306      	bcc.n	800a256 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
 800a248:	4b25      	ldr	r3, [pc, #148]	; (800a2e0 <pvPortMalloc+0x108>)
 800a24a:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a24c:	e009      	b.n	800a262 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 800a24e:	f7ff fac9 	bl	80097e4 <xTaskResumeAll>
void *pvReturn = NULL;
 800a252:	2600      	movs	r6, #0
 800a254:	e7ce      	b.n	800a1f4 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
 800a256:	f7ff fac5 	bl	80097e4 <xTaskResumeAll>
void *pvReturn = NULL;
 800a25a:	2600      	movs	r6, #0
 800a25c:	e7ca      	b.n	800a1f4 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
 800a25e:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 800a260:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a262:	686a      	ldr	r2, [r5, #4]
 800a264:	42a2      	cmp	r2, r4
 800a266:	d202      	bcs.n	800a26e <pvPortMalloc+0x96>
 800a268:	682a      	ldr	r2, [r5, #0]
 800a26a:	2a00      	cmp	r2, #0
 800a26c:	d1f7      	bne.n	800a25e <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
 800a26e:	4a1c      	ldr	r2, [pc, #112]	; (800a2e0 <pvPortMalloc+0x108>)
 800a270:	6892      	ldr	r2, [r2, #8]
 800a272:	42aa      	cmp	r2, r5
 800a274:	d014      	beq.n	800a2a0 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a276:	681e      	ldr	r6, [r3, #0]
 800a278:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a27a:	682a      	ldr	r2, [r5, #0]
 800a27c:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a27e:	686b      	ldr	r3, [r5, #4]
 800a280:	1b1b      	subs	r3, r3, r4
 800a282:	2b10      	cmp	r3, #16
 800a284:	d914      	bls.n	800a2b0 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a286:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a288:	f010 0f07 	tst.w	r0, #7
 800a28c:	d00c      	beq.n	800a2a8 <pvPortMalloc+0xd0>
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	e7fe      	b.n	800a29e <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
 800a2a0:	f7ff faa0 	bl	80097e4 <xTaskResumeAll>
void *pvReturn = NULL;
 800a2a4:	2600      	movs	r6, #0
 800a2a6:	e7a5      	b.n	800a1f4 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a2a8:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a2aa:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a2ac:	f7ff ff6a 	bl	800a184 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a2b0:	6869      	ldr	r1, [r5, #4]
 800a2b2:	4a0b      	ldr	r2, [pc, #44]	; (800a2e0 <pvPortMalloc+0x108>)
 800a2b4:	6913      	ldr	r3, [r2, #16]
 800a2b6:	1a5b      	subs	r3, r3, r1
 800a2b8:	6113      	str	r3, [r2, #16]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a2ba:	68d2      	ldr	r2, [r2, #12]
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d201      	bcs.n	800a2c4 <pvPortMalloc+0xec>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a2c0:	4a07      	ldr	r2, [pc, #28]	; (800a2e0 <pvPortMalloc+0x108>)
 800a2c2:	60d3      	str	r3, [r2, #12]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a2c4:	4b06      	ldr	r3, [pc, #24]	; (800a2e0 <pvPortMalloc+0x108>)
 800a2c6:	695b      	ldr	r3, [r3, #20]
 800a2c8:	430b      	orrs	r3, r1
 800a2ca:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800a2d0:	f7ff fa88 	bl	80097e4 <xTaskResumeAll>
		if( pvReturn == NULL )
 800a2d4:	2e00      	cmp	r6, #0
 800a2d6:	d18f      	bne.n	800a1f8 <pvPortMalloc+0x20>
 800a2d8:	e78c      	b.n	800a1f4 <pvPortMalloc+0x1c>
}
 800a2da:	4630      	mov	r0, r6
 800a2dc:	bd70      	pop	{r4, r5, r6, pc}
 800a2de:	bf00      	nop
 800a2e0:	20000804 	.word	0x20000804

0800a2e4 <vPortFree>:
	if( pv != NULL )
 800a2e4:	b380      	cbz	r0, 800a348 <vPortFree+0x64>
{
 800a2e6:	b538      	push	{r3, r4, r5, lr}
 800a2e8:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 800a2ea:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2ee:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a2f2:	4916      	ldr	r1, [pc, #88]	; (800a34c <vPortFree+0x68>)
 800a2f4:	6949      	ldr	r1, [r1, #20]
 800a2f6:	420a      	tst	r2, r1
 800a2f8:	d108      	bne.n	800a30c <vPortFree+0x28>
 800a2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2fe:	f383 8811 	msr	BASEPRI, r3
 800a302:	f3bf 8f6f 	isb	sy
 800a306:	f3bf 8f4f 	dsb	sy
 800a30a:	e7fe      	b.n	800a30a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a30c:	f850 0c08 	ldr.w	r0, [r0, #-8]
 800a310:	b140      	cbz	r0, 800a324 <vPortFree+0x40>
 800a312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	e7fe      	b.n	800a322 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a324:	ea22 0201 	bic.w	r2, r2, r1
 800a328:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 800a32c:	f7ff f9ba 	bl	80096a4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a330:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800a334:	4a05      	ldr	r2, [pc, #20]	; (800a34c <vPortFree+0x68>)
 800a336:	6913      	ldr	r3, [r2, #16]
 800a338:	440b      	add	r3, r1
 800a33a:	6113      	str	r3, [r2, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a33c:	4628      	mov	r0, r5
 800a33e:	f7ff ff21 	bl	800a184 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 800a342:	f7ff fa4f 	bl	80097e4 <xTaskResumeAll>
}
 800a346:	bd38      	pop	{r3, r4, r5, pc}
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	20000804 	.word	0x20000804

0800a350 <BUFFERVALUEUPDATE>:

#include "valueTable.h"

#include "../tasks/SerialHandleTask/UART_IO.h"

void BUFFERVALUEUPDATE(){
 800a350:	b538      	push	{r3, r4, r5, lr}
 800a352:	ed2d 8b02 	vpush	{d8}


	  if (i_inputLeft_Indicator > i_inputLeft_Indicator_bufferd){i_inputLeft_Indicator_bufferd = i_inputLeft_Indicator;}
 800a356:	4be0      	ldr	r3, [pc, #896]	; (800a6d8 <BUFFERVALUEUPDATE+0x388>)
 800a358:	ed93 8a00 	vldr	s16, [r3]
 800a35c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800a360:	4bde      	ldr	r3, [pc, #888]	; (800a6dc <BUFFERVALUEUPDATE+0x38c>)
 800a362:	edd3 8a00 	vldr	s17, [r3]
 800a366:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a36e:	f340 82b4 	ble.w	800a8da <BUFFERVALUEUPDATE+0x58a>
 800a372:	ed83 8a00 	vstr	s16, [r3]
	  else {i_inputLeft_Indicator_bufferd -=0.01*(i_inputLeft_Indicator_bufferd-i_inputLeft_Indicator);}

	  if (i_inputLeft_Waveform > i_inputLeft_Indicator_MAXbufferd){i_inputLeft_Indicator_MAXbufferd = i_inputLeft_Indicator;}
 800a376:	4bda      	ldr	r3, [pc, #872]	; (800a6e0 <BUFFERVALUEUPDATE+0x390>)
 800a378:	edd3 7a00 	vldr	s15, [r3]
 800a37c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a380:	4bd8      	ldr	r3, [pc, #864]	; (800a6e4 <BUFFERVALUEUPDATE+0x394>)
 800a382:	edd3 8a00 	vldr	s17, [r3]
 800a386:	eef4 7ae8 	vcmpe.f32	s15, s17
 800a38a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a38e:	f340 82be 	ble.w	800a90e <BUFFERVALUEUPDATE+0x5be>
 800a392:	ed83 8a00 	vstr	s16, [r3]
	  else {i_inputLeft_Indicator_MAXbufferd -=0.001*(i_inputLeft_Indicator_MAXbufferd-i_inputLeft_Indicator);}


	  if (i_inputRight_Indicator > i_inputRight_Indicator_bufferd){i_inputRight_Indicator_bufferd = i_inputRight_Indicator;}
 800a396:	4bd4      	ldr	r3, [pc, #848]	; (800a6e8 <BUFFERVALUEUPDATE+0x398>)
 800a398:	ed93 8a00 	vldr	s16, [r3]
 800a39c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800a3a0:	4bd2      	ldr	r3, [pc, #840]	; (800a6ec <BUFFERVALUEUPDATE+0x39c>)
 800a3a2:	edd3 8a00 	vldr	s17, [r3]
 800a3a6:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ae:	f340 82c8 	ble.w	800a942 <BUFFERVALUEUPDATE+0x5f2>
 800a3b2:	ed83 8a00 	vstr	s16, [r3]
	  else {i_inputRight_Indicator_bufferd -=0.01*(i_inputRight_Indicator_bufferd-i_inputRight_Indicator);}

	  if (i_inputRight_Indicator > i_inputRight_Indicator_MAXbufferd){i_inputRight_Indicator_MAXbufferd = i_inputRight_Indicator;}
 800a3b6:	4bce      	ldr	r3, [pc, #824]	; (800a6f0 <BUFFERVALUEUPDATE+0x3a0>)
 800a3b8:	edd3 8a00 	vldr	s17, [r3]
 800a3bc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3c4:	f340 82d7 	ble.w	800a976 <BUFFERVALUEUPDATE+0x626>
 800a3c8:	ed83 8a00 	vstr	s16, [r3]
	  else {i_inputRight_Indicator_MAXbufferd -=0.001*(i_inputRight_Indicator_MAXbufferd-i_inputRight_Indicator);}


	  if (i_outputLeft_Indicator > i_outputLeft_Indicator_bufferd){i_outputLeft_Indicator_bufferd = i_outputLeft_Indicator;}
 800a3cc:	4bc9      	ldr	r3, [pc, #804]	; (800a6f4 <BUFFERVALUEUPDATE+0x3a4>)
 800a3ce:	ed93 8a00 	vldr	s16, [r3]
 800a3d2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800a3d6:	4bc8      	ldr	r3, [pc, #800]	; (800a6f8 <BUFFERVALUEUPDATE+0x3a8>)
 800a3d8:	edd3 8a00 	vldr	s17, [r3]
 800a3dc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e4:	f340 82e1 	ble.w	800a9aa <BUFFERVALUEUPDATE+0x65a>
 800a3e8:	ed83 8a00 	vstr	s16, [r3]
	  else {i_outputLeft_Indicator_bufferd -=0.01*(i_outputLeft_Indicator_bufferd-i_outputLeft_Indicator);}

	  if (i_outputLeft_Indicator> i_outputLeft_Indicator_MAXbufferd){i_outputLeft_Indicator_MAXbufferd = i_outputLeft_Indicator;}
 800a3ec:	4bc3      	ldr	r3, [pc, #780]	; (800a6fc <BUFFERVALUEUPDATE+0x3ac>)
 800a3ee:	edd3 8a00 	vldr	s17, [r3]
 800a3f2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a3f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3fa:	f340 82f0 	ble.w	800a9de <BUFFERVALUEUPDATE+0x68e>
 800a3fe:	ed83 8a00 	vstr	s16, [r3]
	  else {i_outputLeft_Indicator_MAXbufferd -=0.001*(i_outputLeft_Indicator_MAXbufferd-i_outputLeft_Indicator);}


	  if (i_outputRight_Indicator > i_outputRight_Indicator_bufferd){i_outputRight_Indicator_bufferd = i_outputRight_Indicator;}
 800a402:	4bbf      	ldr	r3, [pc, #764]	; (800a700 <BUFFERVALUEUPDATE+0x3b0>)
 800a404:	ed93 8a00 	vldr	s16, [r3]
 800a408:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 800a40c:	4bbd      	ldr	r3, [pc, #756]	; (800a704 <BUFFERVALUEUPDATE+0x3b4>)
 800a40e:	edd3 8a00 	vldr	s17, [r3]
 800a412:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a41a:	f340 82fa 	ble.w	800aa12 <BUFFERVALUEUPDATE+0x6c2>
 800a41e:	ed83 8a00 	vstr	s16, [r3]
	  else {i_outputRight_Indicator_bufferd -=0.01*(i_outputRight_Indicator_bufferd-i_outputRight_Indicator);}

	  if (i_outputRight_Indicator > i_outputRight_Indicator_MAXbufferd){i_outputRight_Indicator_MAXbufferd = i_outputRight_Indicator;}
 800a422:	4bb9      	ldr	r3, [pc, #740]	; (800a708 <BUFFERVALUEUPDATE+0x3b8>)
 800a424:	edd3 8a00 	vldr	s17, [r3]
 800a428:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a430:	f340 8309 	ble.w	800aa46 <BUFFERVALUEUPDATE+0x6f6>
 800a434:	ed83 8a00 	vstr	s16, [r3]
//*****************************************************************************************************************//


/////////INPUT LEFT
	  float diff1=0;
	  diff1 = (f_inputLeft_DB_bufferd-f_inputLeft_DB);
 800a438:	4bb4      	ldr	r3, [pc, #720]	; (800a70c <BUFFERVALUEUPDATE+0x3bc>)
 800a43a:	ed93 7a00 	vldr	s14, [r3]
 800a43e:	4bb4      	ldr	r3, [pc, #720]	; (800a710 <BUFFERVALUEUPDATE+0x3c0>)
 800a440:	edd3 7a00 	vldr	s15, [r3]
 800a444:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff1<0){diff1=(-1)*diff1;}
 800a448:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a44c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a450:	f100 8313 	bmi.w	800aa7a <BUFFERVALUEUPDATE+0x72a>
	  if (f_inputLeft_DB > f_inputLeft_DB_bufferd){f_inputLeft_DB_bufferd = f_inputLeft_DB;}
 800a454:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a45c:	f140 8310 	bpl.w	800aa80 <BUFFERVALUEUPDATE+0x730>
 800a460:	4baa      	ldr	r3, [pc, #680]	; (800a70c <BUFFERVALUEUPDATE+0x3bc>)
 800a462:	edc3 7a00 	vstr	s15, [r3]
	  else {f_inputLeft_DB_bufferd -=p_Bufferd*diff1;}

	  float diff2=0;
	  diff2 = (f_inputLeft_DB_MAXbufferd-f_inputLeft_DB);
 800a466:	4bab      	ldr	r3, [pc, #684]	; (800a714 <BUFFERVALUEUPDATE+0x3c4>)
 800a468:	ed93 7a00 	vldr	s14, [r3]
 800a46c:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff2<0){diff2=(-1)*diff2;}
 800a470:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a478:	f100 830d 	bmi.w	800aa96 <BUFFERVALUEUPDATE+0x746>
	  if (f_inputLeft_DB > f_inputLeft_DB_MAXbufferd){f_inputLeft_DB_MAXbufferd = f_inputLeft_DB;}
 800a47c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a484:	f340 830a 	ble.w	800aa9c <BUFFERVALUEUPDATE+0x74c>
 800a488:	4ba2      	ldr	r3, [pc, #648]	; (800a714 <BUFFERVALUEUPDATE+0x3c4>)
 800a48a:	edc3 7a00 	vstr	s15, [r3]
	  else {f_inputLeft_DB_MAXbufferd -=p_MAXBufferd*diff2;}
/////////INPUT RIGHT
	  float diff3=0;
	  diff3 = (f_inputRight_DB_bufferd-f_inputRight_DB);
 800a48e:	4ba2      	ldr	r3, [pc, #648]	; (800a718 <BUFFERVALUEUPDATE+0x3c8>)
 800a490:	ed93 7a00 	vldr	s14, [r3]
 800a494:	4ba1      	ldr	r3, [pc, #644]	; (800a71c <BUFFERVALUEUPDATE+0x3cc>)
 800a496:	edd3 7a00 	vldr	s15, [r3]
 800a49a:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff3<0){diff3=(-1)*diff3;}
 800a49e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a4a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4a6:	f100 8304 	bmi.w	800aab2 <BUFFERVALUEUPDATE+0x762>
	  if (f_inputRight_DB > f_inputRight_DB_bufferd){f_inputRight_DB_bufferd = f_inputRight_DB;}
 800a4aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4b2:	f140 8301 	bpl.w	800aab8 <BUFFERVALUEUPDATE+0x768>
 800a4b6:	4b98      	ldr	r3, [pc, #608]	; (800a718 <BUFFERVALUEUPDATE+0x3c8>)
 800a4b8:	edc3 7a00 	vstr	s15, [r3]
	  else {f_inputRight_DB_bufferd -=p_Bufferd*diff3;}

	  float diff4=0;
	  diff4 = (f_inputRight_DB_MAXbufferd-f_inputRight_DB);
 800a4bc:	4b98      	ldr	r3, [pc, #608]	; (800a720 <BUFFERVALUEUPDATE+0x3d0>)
 800a4be:	ed93 7a00 	vldr	s14, [r3]
 800a4c2:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff4<0){diff4=(-1)*diff4;}
 800a4c6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ce:	f100 82fe 	bmi.w	800aace <BUFFERVALUEUPDATE+0x77e>
	  if (f_inputRight_DB > f_inputRight_DB_MAXbufferd){f_inputRight_DB_MAXbufferd = f_inputRight_DB;}
 800a4d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4da:	f340 8339 	ble.w	800ab50 <BUFFERVALUEUPDATE+0x800>
 800a4de:	4b90      	ldr	r3, [pc, #576]	; (800a720 <BUFFERVALUEUPDATE+0x3d0>)
 800a4e0:	edc3 7a00 	vstr	s15, [r3]
	  else {f_inputRight_DB_MAXbufferd -=p_MAXBufferd*diff4;}

/////////INPUT LEFT_RMS
	  float diff5=0;
	  diff5 = (f_inputLeft_DB_RMS_bufferd-f_inputLeft_DB_RMS);
 800a4e4:	4b8f      	ldr	r3, [pc, #572]	; (800a724 <BUFFERVALUEUPDATE+0x3d4>)
 800a4e6:	ed93 7a00 	vldr	s14, [r3]
 800a4ea:	4b8f      	ldr	r3, [pc, #572]	; (800a728 <BUFFERVALUEUPDATE+0x3d8>)
 800a4ec:	edd3 7a00 	vldr	s15, [r3]
 800a4f0:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff5<0){diff5=(-1)*diff5;}
 800a4f4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a4f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4fc:	f100 8333 	bmi.w	800ab66 <BUFFERVALUEUPDATE+0x816>
	  if (f_inputLeft_DB_RMS > f_inputLeft_DB_RMS_bufferd){f_inputLeft_DB_RMS_bufferd = f_inputLeft_DB_RMS;}
 800a500:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a508:	f140 8330 	bpl.w	800ab6c <BUFFERVALUEUPDATE+0x81c>
 800a50c:	4b85      	ldr	r3, [pc, #532]	; (800a724 <BUFFERVALUEUPDATE+0x3d4>)
 800a50e:	edc3 7a00 	vstr	s15, [r3]
	  else {f_inputLeft_DB_RMS_bufferd -=p_Bufferd*diff5;}

	  float diff6=0;
	  diff6 = (f_inputLeft_DB_RMS_MAXbufferd-f_inputLeft_DB_RMS);
 800a512:	4b86      	ldr	r3, [pc, #536]	; (800a72c <BUFFERVALUEUPDATE+0x3dc>)
 800a514:	ed93 7a00 	vldr	s14, [r3]
 800a518:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff6<0){diff6=(-1)*diff6;}
 800a51c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a524:	f100 832d 	bmi.w	800ab82 <BUFFERVALUEUPDATE+0x832>
	  if (f_inputLeft_DB_RMS > f_inputLeft_DB_RMS_MAXbufferd){f_inputLeft_DB_RMS_MAXbufferd = f_inputLeft_DB_RMS;}
 800a528:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a52c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a530:	f340 832a 	ble.w	800ab88 <BUFFERVALUEUPDATE+0x838>
 800a534:	4b7d      	ldr	r3, [pc, #500]	; (800a72c <BUFFERVALUEUPDATE+0x3dc>)
 800a536:	edc3 7a00 	vstr	s15, [r3]
	  else {f_inputLeft_DB_RMS_MAXbufferd -=p_MAXBufferd*diff6;}
/////////INPUT RIGHT_RMS
	  float diff7=0;
	  diff7 = (f_inputRight_DB_RMS_bufferd-f_inputRight_DB_RMS);
 800a53a:	4b7d      	ldr	r3, [pc, #500]	; (800a730 <BUFFERVALUEUPDATE+0x3e0>)
 800a53c:	ed93 7a00 	vldr	s14, [r3]
 800a540:	4b7c      	ldr	r3, [pc, #496]	; (800a734 <BUFFERVALUEUPDATE+0x3e4>)
 800a542:	edd3 7a00 	vldr	s15, [r3]
 800a546:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff7<0){diff7=(-1)*diff7;}
 800a54a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a54e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a552:	f100 8324 	bmi.w	800ab9e <BUFFERVALUEUPDATE+0x84e>
	  if (f_inputRight_DB_RMS > f_inputRight_DB_RMS_bufferd){f_inputRight_DB_RMS_bufferd = f_inputRight_DB_RMS;}
 800a556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a55a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a55e:	f140 8321 	bpl.w	800aba4 <BUFFERVALUEUPDATE+0x854>
 800a562:	4b73      	ldr	r3, [pc, #460]	; (800a730 <BUFFERVALUEUPDATE+0x3e0>)
 800a564:	edc3 7a00 	vstr	s15, [r3]
	  else {f_inputRight_DB_RMS_bufferd -=p_Bufferd*diff7;}

	  float diff8=0;
	  diff8 = (f_inputRight_DB_RMS_MAXbufferd-f_inputRight_DB_RMS);
 800a568:	4b73      	ldr	r3, [pc, #460]	; (800a738 <BUFFERVALUEUPDATE+0x3e8>)
 800a56a:	ed93 7a00 	vldr	s14, [r3]
 800a56e:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff8<0){diff8=(-1)*diff8;}
 800a572:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a57a:	f100 831e 	bmi.w	800abba <BUFFERVALUEUPDATE+0x86a>
	  if (f_inputRight_DB_RMS > f_inputRight_DB_RMS_MAXbufferd){f_inputRight_DB_RMS_MAXbufferd = f_inputRight_DB_RMS;}
 800a57e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a586:	f340 831b 	ble.w	800abc0 <BUFFERVALUEUPDATE+0x870>
 800a58a:	4b6b      	ldr	r3, [pc, #428]	; (800a738 <BUFFERVALUEUPDATE+0x3e8>)
 800a58c:	edc3 7a00 	vstr	s15, [r3]
//*****************************************************************************************************************//
//*****************************************************************************************************************//

/////////VCA LEFT
	  float diff9=0;
	  diff9 = (f_VCALeft_DB_bufferd-f_VCALeft_DB);
 800a590:	4b6a      	ldr	r3, [pc, #424]	; (800a73c <BUFFERVALUEUPDATE+0x3ec>)
 800a592:	ed93 7a00 	vldr	s14, [r3]
 800a596:	4b6a      	ldr	r3, [pc, #424]	; (800a740 <BUFFERVALUEUPDATE+0x3f0>)
 800a598:	edd3 7a00 	vldr	s15, [r3]
 800a59c:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff9<0){diff9=(-1)*diff9;}
 800a5a0:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5a8:	f100 8315 	bmi.w	800abd6 <BUFFERVALUEUPDATE+0x886>
	  if (f_VCALeft_DB > f_VCALeft_DB_bufferd){f_VCALeft_DB_bufferd = f_VCALeft_DB;}
 800a5ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b4:	f140 8312 	bpl.w	800abdc <BUFFERVALUEUPDATE+0x88c>
 800a5b8:	4b60      	ldr	r3, [pc, #384]	; (800a73c <BUFFERVALUEUPDATE+0x3ec>)
 800a5ba:	edc3 7a00 	vstr	s15, [r3]
	  else {f_VCALeft_DB_bufferd -=p_Bufferd*diff9;}

	  float diff10=0;
	  diff10 = (f_VCALeft_DB_MAXbufferd-f_VCALeft_DB);
 800a5be:	4b61      	ldr	r3, [pc, #388]	; (800a744 <BUFFERVALUEUPDATE+0x3f4>)
 800a5c0:	ed93 7a00 	vldr	s14, [r3]
 800a5c4:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff10<0){diff10=(-1)*diff10;}
 800a5c8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a5cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5d0:	f100 830f 	bmi.w	800abf2 <BUFFERVALUEUPDATE+0x8a2>
	  if (f_VCALeft_DB > f_VCALeft_DB_MAXbufferd){f_VCALeft_DB_MAXbufferd = f_VCALeft_DB;}
 800a5d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5dc:	f340 830c 	ble.w	800abf8 <BUFFERVALUEUPDATE+0x8a8>
 800a5e0:	4b58      	ldr	r3, [pc, #352]	; (800a744 <BUFFERVALUEUPDATE+0x3f4>)
 800a5e2:	edc3 7a00 	vstr	s15, [r3]
	  else {f_VCALeft_DB_MAXbufferd -=p_MAXBufferd*diff10;}
/////////VCA RIGHT
	  float diff11=0;
	  diff11 = (f_VCARight_DB_bufferd-f_VCARight_DB);
 800a5e6:	4b58      	ldr	r3, [pc, #352]	; (800a748 <BUFFERVALUEUPDATE+0x3f8>)
 800a5e8:	ed93 7a00 	vldr	s14, [r3]
 800a5ec:	4b57      	ldr	r3, [pc, #348]	; (800a74c <BUFFERVALUEUPDATE+0x3fc>)
 800a5ee:	edd3 7a00 	vldr	s15, [r3]
 800a5f2:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff11<0){diff11=(-1)*diff11;}
 800a5f6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5fe:	f100 8306 	bmi.w	800ac0e <BUFFERVALUEUPDATE+0x8be>
	  if (f_VCARight_DB > f_VCARight_DB_bufferd){f_VCARight_DB_bufferd = f_VCARight_DB;}
 800a602:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a60a:	f140 8303 	bpl.w	800ac14 <BUFFERVALUEUPDATE+0x8c4>
 800a60e:	4b4e      	ldr	r3, [pc, #312]	; (800a748 <BUFFERVALUEUPDATE+0x3f8>)
 800a610:	edc3 7a00 	vstr	s15, [r3]
	  else {f_VCARight_DB_bufferd -=p_Bufferd*diff11;}

	  float diff12=0;
	  diff12 = (f_VCARight_DB_MAXbufferd-f_VCARight_DB);
 800a614:	4b4e      	ldr	r3, [pc, #312]	; (800a750 <BUFFERVALUEUPDATE+0x400>)
 800a616:	ed93 7a00 	vldr	s14, [r3]
 800a61a:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff12<0){diff12=(-1)*diff12;}
 800a61e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a626:	f100 8300 	bmi.w	800ac2a <BUFFERVALUEUPDATE+0x8da>
	  if (f_VCARight_DB > f_VCARight_DB_MAXbufferd){f_VCARight_DB_MAXbufferd = f_VCARight_DB;}
 800a62a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a62e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a632:	f340 82fd 	ble.w	800ac30 <BUFFERVALUEUPDATE+0x8e0>
 800a636:	4b46      	ldr	r3, [pc, #280]	; (800a750 <BUFFERVALUEUPDATE+0x400>)
 800a638:	edc3 7a00 	vstr	s15, [r3]
	  else {f_VCARight_DB_MAXbufferd -=p_MAXBufferd*diff12;}

/////////VCA LEFT RMS
	  float diff13=0;
	  diff13 = (f_VCALeft_DB_RMS_bufferd-f_VCALeft_DB_RMS);
 800a63c:	4b45      	ldr	r3, [pc, #276]	; (800a754 <BUFFERVALUEUPDATE+0x404>)
 800a63e:	ed93 7a00 	vldr	s14, [r3]
 800a642:	4b45      	ldr	r3, [pc, #276]	; (800a758 <BUFFERVALUEUPDATE+0x408>)
 800a644:	edd3 7a00 	vldr	s15, [r3]
 800a648:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff13<0){diff13=(-1)*diff13;}
 800a64c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a654:	f100 82f7 	bmi.w	800ac46 <BUFFERVALUEUPDATE+0x8f6>
	  if (f_VCALeft_DB_RMS > f_VCALeft_DB_RMS_bufferd){f_VCALeft_DB_RMS_bufferd = f_VCALeft_DB_RMS;}
 800a658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a660:	f140 82f4 	bpl.w	800ac4c <BUFFERVALUEUPDATE+0x8fc>
 800a664:	4b3b      	ldr	r3, [pc, #236]	; (800a754 <BUFFERVALUEUPDATE+0x404>)
 800a666:	edc3 7a00 	vstr	s15, [r3]
	  else {f_VCALeft_DB_RMS_bufferd -=p_Bufferd*diff13;}

	  float diff14=0;
	  diff14 = (f_VCALeft_DB_RMS_MAXbufferd-f_VCALeft_DB_RMS);
 800a66a:	4b3c      	ldr	r3, [pc, #240]	; (800a75c <BUFFERVALUEUPDATE+0x40c>)
 800a66c:	ed93 7a00 	vldr	s14, [r3]
 800a670:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff14<0){diff14=(-1)*diff14;}
 800a674:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a67c:	f100 82f1 	bmi.w	800ac62 <BUFFERVALUEUPDATE+0x912>
	  if (f_VCALeft_DB_RMS > f_VCALeft_DB_RMS_MAXbufferd){f_VCALeft_DB_RMS_MAXbufferd = f_VCALeft_DB_RMS;}
 800a680:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a688:	f340 82ee 	ble.w	800ac68 <BUFFERVALUEUPDATE+0x918>
 800a68c:	4b33      	ldr	r3, [pc, #204]	; (800a75c <BUFFERVALUEUPDATE+0x40c>)
 800a68e:	edc3 7a00 	vstr	s15, [r3]
	  else {f_VCALeft_DB_RMS_MAXbufferd -=p_MAXBufferd*diff14;}
/////////VCA RIGHT RMS
	  float diff15=0;
	  diff15 = (f_VCARight_DB_RMS_bufferd-f_VCARight_DB_RMS);
 800a692:	4b33      	ldr	r3, [pc, #204]	; (800a760 <BUFFERVALUEUPDATE+0x410>)
 800a694:	ed93 7a00 	vldr	s14, [r3]
 800a698:	4b32      	ldr	r3, [pc, #200]	; (800a764 <BUFFERVALUEUPDATE+0x414>)
 800a69a:	edd3 7a00 	vldr	s15, [r3]
 800a69e:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff15<0){diff15=(-1)*diff15;}
 800a6a2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6aa:	f100 82e8 	bmi.w	800ac7e <BUFFERVALUEUPDATE+0x92e>
	  if (f_VCARight_DB_RMS > f_VCARight_DB_RMS_bufferd){f_VCARight_DB_RMS_bufferd = f_VCARight_DB_RMS;}
 800a6ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6b6:	f140 82e5 	bpl.w	800ac84 <BUFFERVALUEUPDATE+0x934>
 800a6ba:	4b29      	ldr	r3, [pc, #164]	; (800a760 <BUFFERVALUEUPDATE+0x410>)
 800a6bc:	edc3 7a00 	vstr	s15, [r3]
	  else {f_VCARight_DB_RMS_bufferd -=p_Bufferd*diff15;}

	  float diff16=0;
	  diff16 = (f_VCARight_DB_RMS_MAXbufferd-f_VCARight_DB_RMS);
 800a6c0:	4b29      	ldr	r3, [pc, #164]	; (800a768 <BUFFERVALUEUPDATE+0x418>)
 800a6c2:	ed93 7a00 	vldr	s14, [r3]
 800a6c6:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff16<0){diff16=(-1)*diff16;}
 800a6ca:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d2:	f100 82e2 	bmi.w	800ac9a <BUFFERVALUEUPDATE+0x94a>
 800a6d6:	e049      	b.n	800a76c <BUFFERVALUEUPDATE+0x41c>
 800a6d8:	2002f148 	.word	0x2002f148
 800a6dc:	2002f860 	.word	0x2002f860
 800a6e0:	2002fa1c 	.word	0x2002fa1c
 800a6e4:	2002fb2c 	.word	0x2002fb2c
 800a6e8:	2002f868 	.word	0x2002f868
 800a6ec:	2002f14c 	.word	0x2002f14c
 800a6f0:	2002f360 	.word	0x2002f360
 800a6f4:	2002f154 	.word	0x2002f154
 800a6f8:	2002f844 	.word	0x2002f844
 800a6fc:	2002f36c 	.word	0x2002f36c
 800a700:	2002fb18 	.word	0x2002fb18
 800a704:	2002f168 	.word	0x2002f168
 800a708:	2002fa24 	.word	0x2002fa24
 800a70c:	2002f368 	.word	0x2002f368
 800a710:	2002fa20 	.word	0x2002fa20
 800a714:	2002f144 	.word	0x2002f144
 800a718:	2002fd90 	.word	0x2002fd90
 800a71c:	2002fa3c 	.word	0x2002fa3c
 800a720:	2002f51c 	.word	0x2002f51c
 800a724:	2002fb1c 	.word	0x2002fb1c
 800a728:	2002f864 	.word	0x2002f864
 800a72c:	2002f160 	.word	0x2002f160
 800a730:	2002f15c 	.word	0x2002f15c
 800a734:	2002f870 	.word	0x2002f870
 800a738:	2002f848 	.word	0x2002f848
 800a73c:	2002fa38 	.word	0x2002fa38
 800a740:	2002f858 	.word	0x2002f858
 800a744:	2002fb34 	.word	0x2002fb34
 800a748:	2002fa10 	.word	0x2002fa10
 800a74c:	2002fb10 	.word	0x2002fb10
 800a750:	2002fb08 	.word	0x2002fb08
 800a754:	2002f514 	.word	0x2002f514
 800a758:	2002fb0c 	.word	0x2002fb0c
 800a75c:	2002f850 	.word	0x2002f850
 800a760:	2002f35c 	.word	0x2002f35c
 800a764:	2002f150 	.word	0x2002f150
 800a768:	2002fb30 	.word	0x2002fb30
	  if (f_VCARight_DB_RMS > f_VCARight_DB_RMS_MAXbufferd){f_VCARight_DB_RMS_MAXbufferd = f_VCARight_DB_RMS;}
 800a76c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a774:	f340 8294 	ble.w	800aca0 <BUFFERVALUEUPDATE+0x950>
 800a778:	4bdb      	ldr	r3, [pc, #876]	; (800aae8 <BUFFERVALUEUPDATE+0x798>)
 800a77a:	edc3 7a00 	vstr	s15, [r3]
//*****************************************************************************************************************//

	  float diff=0;
/////////OUTPUT LEFT
	  diff=0;
	  diff = (f_outputLeft_DB_bufferd-f_outputLeft_DB);
 800a77e:	4bdb      	ldr	r3, [pc, #876]	; (800aaec <BUFFERVALUEUPDATE+0x79c>)
 800a780:	ed93 7a00 	vldr	s14, [r3]
 800a784:	4bda      	ldr	r3, [pc, #872]	; (800aaf0 <BUFFERVALUEUPDATE+0x7a0>)
 800a786:	edd3 7a00 	vldr	s15, [r3]
 800a78a:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff<0){diff=(-1)*diff;}
 800a78e:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a796:	f100 828e 	bmi.w	800acb6 <BUFFERVALUEUPDATE+0x966>
	  if (f_outputLeft_DB > f_outputLeft_DB_bufferd){f_outputLeft_DB_bufferd = f_outputLeft_DB;}
 800a79a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a2:	f140 828b 	bpl.w	800acbc <BUFFERVALUEUPDATE+0x96c>
 800a7a6:	4bd1      	ldr	r3, [pc, #836]	; (800aaec <BUFFERVALUEUPDATE+0x79c>)
 800a7a8:	edc3 7a00 	vstr	s15, [r3]
	  else {f_outputLeft_DB_bufferd -=p_Bufferd*diff;}

	  diff=0;
	  diff = (f_outputLeft_DB_MAXbufferd-f_outputLeft_DB);
 800a7ac:	4bd1      	ldr	r3, [pc, #836]	; (800aaf4 <BUFFERVALUEUPDATE+0x7a4>)
 800a7ae:	ed93 7a00 	vldr	s14, [r3]
 800a7b2:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff<0){diff=(-1)*diff;}
 800a7b6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a7ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7be:	f100 8288 	bmi.w	800acd2 <BUFFERVALUEUPDATE+0x982>
	  if (f_outputLeft_DB > f_outputLeft_DB_MAXbufferd){f_outputLeft_DB_MAXbufferd = f_outputLeft_DB;}
 800a7c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a7c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ca:	f340 8285 	ble.w	800acd8 <BUFFERVALUEUPDATE+0x988>
 800a7ce:	4bc9      	ldr	r3, [pc, #804]	; (800aaf4 <BUFFERVALUEUPDATE+0x7a4>)
 800a7d0:	edc3 7a00 	vstr	s15, [r3]
	  else {f_outputLeft_DB_MAXbufferd -=p_MAXBufferd*diff;}
/////////OUTPUT RIGHT
	  diff=0;
	  diff = (f_outputRight_DB_bufferd-f_outputRight_DB);
 800a7d4:	4bc8      	ldr	r3, [pc, #800]	; (800aaf8 <BUFFERVALUEUPDATE+0x7a8>)
 800a7d6:	ed93 7a00 	vldr	s14, [r3]
 800a7da:	4bc8      	ldr	r3, [pc, #800]	; (800aafc <BUFFERVALUEUPDATE+0x7ac>)
 800a7dc:	edd3 7a00 	vldr	s15, [r3]
 800a7e0:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff<0){diff=(-1)*diff;}
 800a7e4:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a7e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ec:	f100 827f 	bmi.w	800acee <BUFFERVALUEUPDATE+0x99e>
	  if (f_outputRight_DB > f_outputRight_DB_bufferd){f_outputRight_DB_bufferd = f_outputRight_DB;}
 800a7f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a7f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7f8:	f140 827c 	bpl.w	800acf4 <BUFFERVALUEUPDATE+0x9a4>
 800a7fc:	4bbe      	ldr	r3, [pc, #760]	; (800aaf8 <BUFFERVALUEUPDATE+0x7a8>)
 800a7fe:	edc3 7a00 	vstr	s15, [r3]
	  else {f_outputRight_DB_bufferd -=p_Bufferd*diff;}

	  diff=0;
	  diff = (f_outputRight_DB_MAXbufferd-f_outputRight_DB);
 800a802:	4bbf      	ldr	r3, [pc, #764]	; (800ab00 <BUFFERVALUEUPDATE+0x7b0>)
 800a804:	ed93 7a00 	vldr	s14, [r3]
 800a808:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff<0){diff=(-1)*diff;}
 800a80c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a814:	f100 8279 	bmi.w	800ad0a <BUFFERVALUEUPDATE+0x9ba>
	  if (f_outputRight_DB > f_outputRight_DB_MAXbufferd){f_outputRight_DB_MAXbufferd = f_outputRight_DB;}
 800a818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a820:	f340 8276 	ble.w	800ad10 <BUFFERVALUEUPDATE+0x9c0>
 800a824:	4bb6      	ldr	r3, [pc, #728]	; (800ab00 <BUFFERVALUEUPDATE+0x7b0>)
 800a826:	edc3 7a00 	vstr	s15, [r3]
	  else {f_outputRight_DB_MAXbufferd -=p_MAXBufferd*diff;}

/////////OUTPUT LEFT RMS
	  diff=0;
	  diff = (f_outputLeft_DB_RMS_bufferd-f_outputLeft_DB_RMS);
 800a82a:	4bb6      	ldr	r3, [pc, #728]	; (800ab04 <BUFFERVALUEUPDATE+0x7b4>)
 800a82c:	ed93 7a00 	vldr	s14, [r3]
 800a830:	4bb5      	ldr	r3, [pc, #724]	; (800ab08 <BUFFERVALUEUPDATE+0x7b8>)
 800a832:	edd3 7a00 	vldr	s15, [r3]
 800a836:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff<0){diff=(-1)*diff;}
 800a83a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a842:	f100 8270 	bmi.w	800ad26 <BUFFERVALUEUPDATE+0x9d6>
	  if (f_outputLeft_DB_RMS > f_outputLeft_DB_RMS_bufferd){f_outputLeft_DB_RMS_bufferd = f_outputLeft_DB_RMS;}
 800a846:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a84e:	f140 826d 	bpl.w	800ad2c <BUFFERVALUEUPDATE+0x9dc>
 800a852:	4bac      	ldr	r3, [pc, #688]	; (800ab04 <BUFFERVALUEUPDATE+0x7b4>)
 800a854:	edc3 7a00 	vstr	s15, [r3]
	  else {f_outputLeft_DB_RMS_bufferd -=p_Bufferd*diff;}

	  diff=0;
	  diff = (f_outputLeft_DB_RMS_MAXbufferd-f_outputLeft_DB_RMS);
 800a858:	4bac      	ldr	r3, [pc, #688]	; (800ab0c <BUFFERVALUEUPDATE+0x7bc>)
 800a85a:	ed93 7a00 	vldr	s14, [r3]
 800a85e:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff<0){diff=(-1)*diff;}
 800a862:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a86a:	f100 826a 	bmi.w	800ad42 <BUFFERVALUEUPDATE+0x9f2>
	  if (f_outputLeft_DB_RMS > f_outputLeft_DB_RMS_MAXbufferd){f_outputLeft_DB_RMS_MAXbufferd = f_outputLeft_DB_RMS;}
 800a86e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a876:	f340 8267 	ble.w	800ad48 <BUFFERVALUEUPDATE+0x9f8>
 800a87a:	4ba4      	ldr	r3, [pc, #656]	; (800ab0c <BUFFERVALUEUPDATE+0x7bc>)
 800a87c:	edc3 7a00 	vstr	s15, [r3]
	  else {f_outputLeft_DB_RMS_MAXbufferd -=p_MAXBufferd*diff;}
/////////OUTPUT RIGHT RMS
	  diff=0;
	  diff = (f_outputRight_DB_RMS_bufferd-f_outputRight_DB_RMS);
 800a880:	4ba3      	ldr	r3, [pc, #652]	; (800ab10 <BUFFERVALUEUPDATE+0x7c0>)
 800a882:	ed93 7a00 	vldr	s14, [r3]
 800a886:	4ba3      	ldr	r3, [pc, #652]	; (800ab14 <BUFFERVALUEUPDATE+0x7c4>)
 800a888:	edd3 7a00 	vldr	s15, [r3]
 800a88c:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff<0){diff=(-1)*diff;}
 800a890:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a898:	f100 8261 	bmi.w	800ad5e <BUFFERVALUEUPDATE+0xa0e>
	  if (f_outputRight_DB_RMS > f_outputRight_DB_RMS_bufferd){f_outputRight_DB_RMS_bufferd = f_outputRight_DB_RMS;}
 800a89c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8a4:	f140 825e 	bpl.w	800ad64 <BUFFERVALUEUPDATE+0xa14>
 800a8a8:	4b99      	ldr	r3, [pc, #612]	; (800ab10 <BUFFERVALUEUPDATE+0x7c0>)
 800a8aa:	edc3 7a00 	vstr	s15, [r3]
	  else {f_outputRight_DB_RMS_bufferd -=p_Bufferd*diff;}

	  diff=0;
	  diff = (f_outputRight_DB_RMS_MAXbufferd-f_outputRight_DB_RMS);
 800a8ae:	4b9a      	ldr	r3, [pc, #616]	; (800ab18 <BUFFERVALUEUPDATE+0x7c8>)
 800a8b0:	ed93 7a00 	vldr	s14, [r3]
 800a8b4:	ee77 6a67 	vsub.f32	s13, s14, s15
	  if(diff<0){diff=(-1)*diff;}
 800a8b8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c0:	f100 825b 	bmi.w	800ad7a <BUFFERVALUEUPDATE+0xa2a>
	  if (f_outputRight_DB_RMS > f_outputRight_DB_RMS_MAXbufferd){f_outputRight_DB_RMS_MAXbufferd = f_outputRight_DB_RMS;}
 800a8c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a8c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8cc:	f340 8258 	ble.w	800ad80 <BUFFERVALUEUPDATE+0xa30>
 800a8d0:	4b91      	ldr	r3, [pc, #580]	; (800ab18 <BUFFERVALUEUPDATE+0x7c8>)
 800a8d2:	edc3 7a00 	vstr	s15, [r3]
void BUFFERVALUEUPDATE(){
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	e26c      	b.n	800adb4 <BUFFERVALUEUPDATE+0xa64>
	  else {i_inputLeft_Indicator_bufferd -=0.01*(i_inputLeft_Indicator_bufferd-i_inputLeft_Indicator);}
 800a8da:	ee78 7ac8 	vsub.f32	s15, s17, s16
 800a8de:	ee17 0a90 	vmov	r0, s15
 800a8e2:	f7f5 fdf9 	bl	80004d8 <__aeabi_f2d>
 800a8e6:	a37c      	add	r3, pc, #496	; (adr r3, 800aad8 <BUFFERVALUEUPDATE+0x788>)
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	f7f5 fe4c 	bl	8000588 <__aeabi_dmul>
 800a8f0:	4604      	mov	r4, r0
 800a8f2:	460d      	mov	r5, r1
 800a8f4:	ee18 0a90 	vmov	r0, s17
 800a8f8:	f7f5 fdee 	bl	80004d8 <__aeabi_f2d>
 800a8fc:	4622      	mov	r2, r4
 800a8fe:	462b      	mov	r3, r5
 800a900:	f7f5 fc8a 	bl	8000218 <__aeabi_dsub>
 800a904:	f7f6 f8da 	bl	8000abc <__aeabi_d2f>
 800a908:	4b84      	ldr	r3, [pc, #528]	; (800ab1c <BUFFERVALUEUPDATE+0x7cc>)
 800a90a:	6018      	str	r0, [r3, #0]
 800a90c:	e533      	b.n	800a376 <BUFFERVALUEUPDATE+0x26>
	  else {i_inputLeft_Indicator_MAXbufferd -=0.001*(i_inputLeft_Indicator_MAXbufferd-i_inputLeft_Indicator);}
 800a90e:	ee78 7ac8 	vsub.f32	s15, s17, s16
 800a912:	ee17 0a90 	vmov	r0, s15
 800a916:	f7f5 fddf 	bl	80004d8 <__aeabi_f2d>
 800a91a:	a371      	add	r3, pc, #452	; (adr r3, 800aae0 <BUFFERVALUEUPDATE+0x790>)
 800a91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a920:	f7f5 fe32 	bl	8000588 <__aeabi_dmul>
 800a924:	4604      	mov	r4, r0
 800a926:	460d      	mov	r5, r1
 800a928:	ee18 0a90 	vmov	r0, s17
 800a92c:	f7f5 fdd4 	bl	80004d8 <__aeabi_f2d>
 800a930:	4622      	mov	r2, r4
 800a932:	462b      	mov	r3, r5
 800a934:	f7f5 fc70 	bl	8000218 <__aeabi_dsub>
 800a938:	f7f6 f8c0 	bl	8000abc <__aeabi_d2f>
 800a93c:	4b78      	ldr	r3, [pc, #480]	; (800ab20 <BUFFERVALUEUPDATE+0x7d0>)
 800a93e:	6018      	str	r0, [r3, #0]
 800a940:	e529      	b.n	800a396 <BUFFERVALUEUPDATE+0x46>
	  else {i_inputRight_Indicator_bufferd -=0.01*(i_inputRight_Indicator_bufferd-i_inputRight_Indicator);}
 800a942:	ee78 7ac8 	vsub.f32	s15, s17, s16
 800a946:	ee17 0a90 	vmov	r0, s15
 800a94a:	f7f5 fdc5 	bl	80004d8 <__aeabi_f2d>
 800a94e:	a362      	add	r3, pc, #392	; (adr r3, 800aad8 <BUFFERVALUEUPDATE+0x788>)
 800a950:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a954:	f7f5 fe18 	bl	8000588 <__aeabi_dmul>
 800a958:	4604      	mov	r4, r0
 800a95a:	460d      	mov	r5, r1
 800a95c:	ee18 0a90 	vmov	r0, s17
 800a960:	f7f5 fdba 	bl	80004d8 <__aeabi_f2d>
 800a964:	4622      	mov	r2, r4
 800a966:	462b      	mov	r3, r5
 800a968:	f7f5 fc56 	bl	8000218 <__aeabi_dsub>
 800a96c:	f7f6 f8a6 	bl	8000abc <__aeabi_d2f>
 800a970:	4b6c      	ldr	r3, [pc, #432]	; (800ab24 <BUFFERVALUEUPDATE+0x7d4>)
 800a972:	6018      	str	r0, [r3, #0]
 800a974:	e51f      	b.n	800a3b6 <BUFFERVALUEUPDATE+0x66>
	  else {i_inputRight_Indicator_MAXbufferd -=0.001*(i_inputRight_Indicator_MAXbufferd-i_inputRight_Indicator);}
 800a976:	ee78 7ac8 	vsub.f32	s15, s17, s16
 800a97a:	ee17 0a90 	vmov	r0, s15
 800a97e:	f7f5 fdab 	bl	80004d8 <__aeabi_f2d>
 800a982:	a357      	add	r3, pc, #348	; (adr r3, 800aae0 <BUFFERVALUEUPDATE+0x790>)
 800a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a988:	f7f5 fdfe 	bl	8000588 <__aeabi_dmul>
 800a98c:	4604      	mov	r4, r0
 800a98e:	460d      	mov	r5, r1
 800a990:	ee18 0a90 	vmov	r0, s17
 800a994:	f7f5 fda0 	bl	80004d8 <__aeabi_f2d>
 800a998:	4622      	mov	r2, r4
 800a99a:	462b      	mov	r3, r5
 800a99c:	f7f5 fc3c 	bl	8000218 <__aeabi_dsub>
 800a9a0:	f7f6 f88c 	bl	8000abc <__aeabi_d2f>
 800a9a4:	4b60      	ldr	r3, [pc, #384]	; (800ab28 <BUFFERVALUEUPDATE+0x7d8>)
 800a9a6:	6018      	str	r0, [r3, #0]
 800a9a8:	e510      	b.n	800a3cc <BUFFERVALUEUPDATE+0x7c>
	  else {i_outputLeft_Indicator_bufferd -=0.01*(i_outputLeft_Indicator_bufferd-i_outputLeft_Indicator);}
 800a9aa:	ee78 7ac8 	vsub.f32	s15, s17, s16
 800a9ae:	ee17 0a90 	vmov	r0, s15
 800a9b2:	f7f5 fd91 	bl	80004d8 <__aeabi_f2d>
 800a9b6:	a348      	add	r3, pc, #288	; (adr r3, 800aad8 <BUFFERVALUEUPDATE+0x788>)
 800a9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9bc:	f7f5 fde4 	bl	8000588 <__aeabi_dmul>
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	460d      	mov	r5, r1
 800a9c4:	ee18 0a90 	vmov	r0, s17
 800a9c8:	f7f5 fd86 	bl	80004d8 <__aeabi_f2d>
 800a9cc:	4622      	mov	r2, r4
 800a9ce:	462b      	mov	r3, r5
 800a9d0:	f7f5 fc22 	bl	8000218 <__aeabi_dsub>
 800a9d4:	f7f6 f872 	bl	8000abc <__aeabi_d2f>
 800a9d8:	4b54      	ldr	r3, [pc, #336]	; (800ab2c <BUFFERVALUEUPDATE+0x7dc>)
 800a9da:	6018      	str	r0, [r3, #0]
 800a9dc:	e506      	b.n	800a3ec <BUFFERVALUEUPDATE+0x9c>
	  else {i_outputLeft_Indicator_MAXbufferd -=0.001*(i_outputLeft_Indicator_MAXbufferd-i_outputLeft_Indicator);}
 800a9de:	ee78 7ac8 	vsub.f32	s15, s17, s16
 800a9e2:	ee17 0a90 	vmov	r0, s15
 800a9e6:	f7f5 fd77 	bl	80004d8 <__aeabi_f2d>
 800a9ea:	a33d      	add	r3, pc, #244	; (adr r3, 800aae0 <BUFFERVALUEUPDATE+0x790>)
 800a9ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f0:	f7f5 fdca 	bl	8000588 <__aeabi_dmul>
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	460d      	mov	r5, r1
 800a9f8:	ee18 0a90 	vmov	r0, s17
 800a9fc:	f7f5 fd6c 	bl	80004d8 <__aeabi_f2d>
 800aa00:	4622      	mov	r2, r4
 800aa02:	462b      	mov	r3, r5
 800aa04:	f7f5 fc08 	bl	8000218 <__aeabi_dsub>
 800aa08:	f7f6 f858 	bl	8000abc <__aeabi_d2f>
 800aa0c:	4b48      	ldr	r3, [pc, #288]	; (800ab30 <BUFFERVALUEUPDATE+0x7e0>)
 800aa0e:	6018      	str	r0, [r3, #0]
 800aa10:	e4f7      	b.n	800a402 <BUFFERVALUEUPDATE+0xb2>
	  else {i_outputRight_Indicator_bufferd -=0.01*(i_outputRight_Indicator_bufferd-i_outputRight_Indicator);}
 800aa12:	ee78 7ac8 	vsub.f32	s15, s17, s16
 800aa16:	ee17 0a90 	vmov	r0, s15
 800aa1a:	f7f5 fd5d 	bl	80004d8 <__aeabi_f2d>
 800aa1e:	a32e      	add	r3, pc, #184	; (adr r3, 800aad8 <BUFFERVALUEUPDATE+0x788>)
 800aa20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa24:	f7f5 fdb0 	bl	8000588 <__aeabi_dmul>
 800aa28:	4604      	mov	r4, r0
 800aa2a:	460d      	mov	r5, r1
 800aa2c:	ee18 0a90 	vmov	r0, s17
 800aa30:	f7f5 fd52 	bl	80004d8 <__aeabi_f2d>
 800aa34:	4622      	mov	r2, r4
 800aa36:	462b      	mov	r3, r5
 800aa38:	f7f5 fbee 	bl	8000218 <__aeabi_dsub>
 800aa3c:	f7f6 f83e 	bl	8000abc <__aeabi_d2f>
 800aa40:	4b3c      	ldr	r3, [pc, #240]	; (800ab34 <BUFFERVALUEUPDATE+0x7e4>)
 800aa42:	6018      	str	r0, [r3, #0]
 800aa44:	e4ed      	b.n	800a422 <BUFFERVALUEUPDATE+0xd2>
	  else {i_outputRight_Indicator_MAXbufferd -=0.001*(i_outputRight_Indicator_MAXbufferd-i_outputRight_Indicator);}
 800aa46:	ee78 7ac8 	vsub.f32	s15, s17, s16
 800aa4a:	ee17 0a90 	vmov	r0, s15
 800aa4e:	f7f5 fd43 	bl	80004d8 <__aeabi_f2d>
 800aa52:	a323      	add	r3, pc, #140	; (adr r3, 800aae0 <BUFFERVALUEUPDATE+0x790>)
 800aa54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa58:	f7f5 fd96 	bl	8000588 <__aeabi_dmul>
 800aa5c:	4604      	mov	r4, r0
 800aa5e:	460d      	mov	r5, r1
 800aa60:	ee18 0a90 	vmov	r0, s17
 800aa64:	f7f5 fd38 	bl	80004d8 <__aeabi_f2d>
 800aa68:	4622      	mov	r2, r4
 800aa6a:	462b      	mov	r3, r5
 800aa6c:	f7f5 fbd4 	bl	8000218 <__aeabi_dsub>
 800aa70:	f7f6 f824 	bl	8000abc <__aeabi_d2f>
 800aa74:	4b30      	ldr	r3, [pc, #192]	; (800ab38 <BUFFERVALUEUPDATE+0x7e8>)
 800aa76:	6018      	str	r0, [r3, #0]
 800aa78:	e4de      	b.n	800a438 <BUFFERVALUEUPDATE+0xe8>
	  if(diff1<0){diff1=(-1)*diff1;}
 800aa7a:	eef1 6a66 	vneg.f32	s13, s13
 800aa7e:	e4e9      	b.n	800a454 <BUFFERVALUEUPDATE+0x104>
	  else {f_inputLeft_DB_bufferd -=p_Bufferd*diff1;}
 800aa80:	4b2e      	ldr	r3, [pc, #184]	; (800ab3c <BUFFERVALUEUPDATE+0x7ec>)
 800aa82:	ed93 6a00 	vldr	s12, [r3]
 800aa86:	ee66 6a86 	vmul.f32	s13, s13, s12
 800aa8a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800aa8e:	4b2c      	ldr	r3, [pc, #176]	; (800ab40 <BUFFERVALUEUPDATE+0x7f0>)
 800aa90:	ed83 7a00 	vstr	s14, [r3]
 800aa94:	e4e7      	b.n	800a466 <BUFFERVALUEUPDATE+0x116>
	  if(diff2<0){diff2=(-1)*diff2;}
 800aa96:	eef1 6a66 	vneg.f32	s13, s13
 800aa9a:	e4ef      	b.n	800a47c <BUFFERVALUEUPDATE+0x12c>
	  else {f_inputLeft_DB_MAXbufferd -=p_MAXBufferd*diff2;}
 800aa9c:	4b29      	ldr	r3, [pc, #164]	; (800ab44 <BUFFERVALUEUPDATE+0x7f4>)
 800aa9e:	edd3 7a00 	vldr	s15, [r3]
 800aaa2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800aaa6:	ee37 7a66 	vsub.f32	s14, s14, s13
 800aaaa:	4b27      	ldr	r3, [pc, #156]	; (800ab48 <BUFFERVALUEUPDATE+0x7f8>)
 800aaac:	ed83 7a00 	vstr	s14, [r3]
 800aab0:	e4ed      	b.n	800a48e <BUFFERVALUEUPDATE+0x13e>
	  if(diff3<0){diff3=(-1)*diff3;}
 800aab2:	eef1 6a66 	vneg.f32	s13, s13
 800aab6:	e4f8      	b.n	800a4aa <BUFFERVALUEUPDATE+0x15a>
	  else {f_inputRight_DB_bufferd -=p_Bufferd*diff3;}
 800aab8:	4b20      	ldr	r3, [pc, #128]	; (800ab3c <BUFFERVALUEUPDATE+0x7ec>)
 800aaba:	ed93 6a00 	vldr	s12, [r3]
 800aabe:	ee66 6a86 	vmul.f32	s13, s13, s12
 800aac2:	ee37 7a66 	vsub.f32	s14, s14, s13
 800aac6:	4b21      	ldr	r3, [pc, #132]	; (800ab4c <BUFFERVALUEUPDATE+0x7fc>)
 800aac8:	ed83 7a00 	vstr	s14, [r3]
 800aacc:	e4f6      	b.n	800a4bc <BUFFERVALUEUPDATE+0x16c>
	  if(diff4<0){diff4=(-1)*diff4;}
 800aace:	eef1 6a66 	vneg.f32	s13, s13
 800aad2:	e4fe      	b.n	800a4d2 <BUFFERVALUEUPDATE+0x182>
 800aad4:	f3af 8000 	nop.w
 800aad8:	47ae147b 	.word	0x47ae147b
 800aadc:	3f847ae1 	.word	0x3f847ae1
 800aae0:	d2f1a9fc 	.word	0xd2f1a9fc
 800aae4:	3f50624d 	.word	0x3f50624d
 800aae8:	2002fb30 	.word	0x2002fb30
 800aaec:	2002f84c 	.word	0x2002f84c
 800aaf0:	2002f85c 	.word	0x2002f85c
 800aaf4:	2002fa18 	.word	0x2002fa18
 800aaf8:	2002fb24 	.word	0x2002fb24
 800aafc:	2002fa14 	.word	0x2002fa14
 800ab00:	2002fa08 	.word	0x2002fa08
 800ab04:	2002f370 	.word	0x2002f370
 800ab08:	2002f508 	.word	0x2002f508
 800ab0c:	2002f6b0 	.word	0x2002f6b0
 800ab10:	2002f510 	.word	0x2002f510
 800ab14:	2002f164 	.word	0x2002f164
 800ab18:	2002fd94 	.word	0x2002fd94
 800ab1c:	2002f860 	.word	0x2002f860
 800ab20:	2002fb2c 	.word	0x2002fb2c
 800ab24:	2002f14c 	.word	0x2002f14c
 800ab28:	2002f360 	.word	0x2002f360
 800ab2c:	2002f844 	.word	0x2002f844
 800ab30:	2002f36c 	.word	0x2002f36c
 800ab34:	2002f168 	.word	0x2002f168
 800ab38:	2002fa24 	.word	0x2002fa24
 800ab3c:	2002e5a0 	.word	0x2002e5a0
 800ab40:	2002f368 	.word	0x2002f368
 800ab44:	2002f130 	.word	0x2002f130
 800ab48:	2002f144 	.word	0x2002f144
 800ab4c:	2002fd90 	.word	0x2002fd90
	  else {f_inputRight_DB_MAXbufferd -=p_MAXBufferd*diff4;}
 800ab50:	4ba8      	ldr	r3, [pc, #672]	; (800adf4 <BUFFERVALUEUPDATE+0xaa4>)
 800ab52:	edd3 7a00 	vldr	s15, [r3]
 800ab56:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ab5a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ab5e:	4ba6      	ldr	r3, [pc, #664]	; (800adf8 <BUFFERVALUEUPDATE+0xaa8>)
 800ab60:	ed83 7a00 	vstr	s14, [r3]
 800ab64:	e4be      	b.n	800a4e4 <BUFFERVALUEUPDATE+0x194>
	  if(diff5<0){diff5=(-1)*diff5;}
 800ab66:	eef1 6a66 	vneg.f32	s13, s13
 800ab6a:	e4c9      	b.n	800a500 <BUFFERVALUEUPDATE+0x1b0>
	  else {f_inputLeft_DB_RMS_bufferd -=p_Bufferd*diff5;}
 800ab6c:	4ba3      	ldr	r3, [pc, #652]	; (800adfc <BUFFERVALUEUPDATE+0xaac>)
 800ab6e:	ed93 6a00 	vldr	s12, [r3]
 800ab72:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ab76:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ab7a:	4ba1      	ldr	r3, [pc, #644]	; (800ae00 <BUFFERVALUEUPDATE+0xab0>)
 800ab7c:	ed83 7a00 	vstr	s14, [r3]
 800ab80:	e4c7      	b.n	800a512 <BUFFERVALUEUPDATE+0x1c2>
	  if(diff6<0){diff6=(-1)*diff6;}
 800ab82:	eef1 6a66 	vneg.f32	s13, s13
 800ab86:	e4cf      	b.n	800a528 <BUFFERVALUEUPDATE+0x1d8>
	  else {f_inputLeft_DB_RMS_MAXbufferd -=p_MAXBufferd*diff6;}
 800ab88:	4b9a      	ldr	r3, [pc, #616]	; (800adf4 <BUFFERVALUEUPDATE+0xaa4>)
 800ab8a:	edd3 7a00 	vldr	s15, [r3]
 800ab8e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ab92:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ab96:	4b9b      	ldr	r3, [pc, #620]	; (800ae04 <BUFFERVALUEUPDATE+0xab4>)
 800ab98:	ed83 7a00 	vstr	s14, [r3]
 800ab9c:	e4cd      	b.n	800a53a <BUFFERVALUEUPDATE+0x1ea>
	  if(diff7<0){diff7=(-1)*diff7;}
 800ab9e:	eef1 6a66 	vneg.f32	s13, s13
 800aba2:	e4d8      	b.n	800a556 <BUFFERVALUEUPDATE+0x206>
	  else {f_inputRight_DB_RMS_bufferd -=p_Bufferd*diff7;}
 800aba4:	4b95      	ldr	r3, [pc, #596]	; (800adfc <BUFFERVALUEUPDATE+0xaac>)
 800aba6:	ed93 6a00 	vldr	s12, [r3]
 800abaa:	ee66 6a86 	vmul.f32	s13, s13, s12
 800abae:	ee37 7a66 	vsub.f32	s14, s14, s13
 800abb2:	4b95      	ldr	r3, [pc, #596]	; (800ae08 <BUFFERVALUEUPDATE+0xab8>)
 800abb4:	ed83 7a00 	vstr	s14, [r3]
 800abb8:	e4d6      	b.n	800a568 <BUFFERVALUEUPDATE+0x218>
	  if(diff8<0){diff8=(-1)*diff8;}
 800abba:	eef1 6a66 	vneg.f32	s13, s13
 800abbe:	e4de      	b.n	800a57e <BUFFERVALUEUPDATE+0x22e>
	  else {f_inputRight_DB_RMS_MAXbufferd -=p_MAXBufferd*diff8;}
 800abc0:	4b8c      	ldr	r3, [pc, #560]	; (800adf4 <BUFFERVALUEUPDATE+0xaa4>)
 800abc2:	edd3 7a00 	vldr	s15, [r3]
 800abc6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800abca:	ee37 7a66 	vsub.f32	s14, s14, s13
 800abce:	4b8f      	ldr	r3, [pc, #572]	; (800ae0c <BUFFERVALUEUPDATE+0xabc>)
 800abd0:	ed83 7a00 	vstr	s14, [r3]
 800abd4:	e4dc      	b.n	800a590 <BUFFERVALUEUPDATE+0x240>
	  if(diff9<0){diff9=(-1)*diff9;}
 800abd6:	eef1 6a66 	vneg.f32	s13, s13
 800abda:	e4e7      	b.n	800a5ac <BUFFERVALUEUPDATE+0x25c>
	  else {f_VCALeft_DB_bufferd -=p_Bufferd*diff9;}
 800abdc:	4b87      	ldr	r3, [pc, #540]	; (800adfc <BUFFERVALUEUPDATE+0xaac>)
 800abde:	ed93 6a00 	vldr	s12, [r3]
 800abe2:	ee66 6a86 	vmul.f32	s13, s13, s12
 800abe6:	ee37 7a66 	vsub.f32	s14, s14, s13
 800abea:	4b89      	ldr	r3, [pc, #548]	; (800ae10 <BUFFERVALUEUPDATE+0xac0>)
 800abec:	ed83 7a00 	vstr	s14, [r3]
 800abf0:	e4e5      	b.n	800a5be <BUFFERVALUEUPDATE+0x26e>
	  if(diff10<0){diff10=(-1)*diff10;}
 800abf2:	eef1 6a66 	vneg.f32	s13, s13
 800abf6:	e4ed      	b.n	800a5d4 <BUFFERVALUEUPDATE+0x284>
	  else {f_VCALeft_DB_MAXbufferd -=p_MAXBufferd*diff10;}
 800abf8:	4b7e      	ldr	r3, [pc, #504]	; (800adf4 <BUFFERVALUEUPDATE+0xaa4>)
 800abfa:	edd3 7a00 	vldr	s15, [r3]
 800abfe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ac02:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ac06:	4b83      	ldr	r3, [pc, #524]	; (800ae14 <BUFFERVALUEUPDATE+0xac4>)
 800ac08:	ed83 7a00 	vstr	s14, [r3]
 800ac0c:	e4eb      	b.n	800a5e6 <BUFFERVALUEUPDATE+0x296>
	  if(diff11<0){diff11=(-1)*diff11;}
 800ac0e:	eef1 6a66 	vneg.f32	s13, s13
 800ac12:	e4f6      	b.n	800a602 <BUFFERVALUEUPDATE+0x2b2>
	  else {f_VCARight_DB_bufferd -=p_Bufferd*diff11;}
 800ac14:	4b79      	ldr	r3, [pc, #484]	; (800adfc <BUFFERVALUEUPDATE+0xaac>)
 800ac16:	ed93 6a00 	vldr	s12, [r3]
 800ac1a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ac1e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ac22:	4b7d      	ldr	r3, [pc, #500]	; (800ae18 <BUFFERVALUEUPDATE+0xac8>)
 800ac24:	ed83 7a00 	vstr	s14, [r3]
 800ac28:	e4f4      	b.n	800a614 <BUFFERVALUEUPDATE+0x2c4>
	  if(diff12<0){diff12=(-1)*diff12;}
 800ac2a:	eef1 6a66 	vneg.f32	s13, s13
 800ac2e:	e4fc      	b.n	800a62a <BUFFERVALUEUPDATE+0x2da>
	  else {f_VCARight_DB_MAXbufferd -=p_MAXBufferd*diff12;}
 800ac30:	4b70      	ldr	r3, [pc, #448]	; (800adf4 <BUFFERVALUEUPDATE+0xaa4>)
 800ac32:	edd3 7a00 	vldr	s15, [r3]
 800ac36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ac3a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ac3e:	4b77      	ldr	r3, [pc, #476]	; (800ae1c <BUFFERVALUEUPDATE+0xacc>)
 800ac40:	ed83 7a00 	vstr	s14, [r3]
 800ac44:	e4fa      	b.n	800a63c <BUFFERVALUEUPDATE+0x2ec>
	  if(diff13<0){diff13=(-1)*diff13;}
 800ac46:	eef1 6a66 	vneg.f32	s13, s13
 800ac4a:	e505      	b.n	800a658 <BUFFERVALUEUPDATE+0x308>
	  else {f_VCALeft_DB_RMS_bufferd -=p_Bufferd*diff13;}
 800ac4c:	4b6b      	ldr	r3, [pc, #428]	; (800adfc <BUFFERVALUEUPDATE+0xaac>)
 800ac4e:	ed93 6a00 	vldr	s12, [r3]
 800ac52:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ac56:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ac5a:	4b71      	ldr	r3, [pc, #452]	; (800ae20 <BUFFERVALUEUPDATE+0xad0>)
 800ac5c:	ed83 7a00 	vstr	s14, [r3]
 800ac60:	e503      	b.n	800a66a <BUFFERVALUEUPDATE+0x31a>
	  if(diff14<0){diff14=(-1)*diff14;}
 800ac62:	eef1 6a66 	vneg.f32	s13, s13
 800ac66:	e50b      	b.n	800a680 <BUFFERVALUEUPDATE+0x330>
	  else {f_VCALeft_DB_RMS_MAXbufferd -=p_MAXBufferd*diff14;}
 800ac68:	4b62      	ldr	r3, [pc, #392]	; (800adf4 <BUFFERVALUEUPDATE+0xaa4>)
 800ac6a:	edd3 7a00 	vldr	s15, [r3]
 800ac6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ac72:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ac76:	4b6b      	ldr	r3, [pc, #428]	; (800ae24 <BUFFERVALUEUPDATE+0xad4>)
 800ac78:	ed83 7a00 	vstr	s14, [r3]
 800ac7c:	e509      	b.n	800a692 <BUFFERVALUEUPDATE+0x342>
	  if(diff15<0){diff15=(-1)*diff15;}
 800ac7e:	eef1 6a66 	vneg.f32	s13, s13
 800ac82:	e514      	b.n	800a6ae <BUFFERVALUEUPDATE+0x35e>
	  else {f_VCARight_DB_RMS_bufferd -=p_Bufferd*diff15;}
 800ac84:	4b5d      	ldr	r3, [pc, #372]	; (800adfc <BUFFERVALUEUPDATE+0xaac>)
 800ac86:	ed93 6a00 	vldr	s12, [r3]
 800ac8a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ac8e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ac92:	4b65      	ldr	r3, [pc, #404]	; (800ae28 <BUFFERVALUEUPDATE+0xad8>)
 800ac94:	ed83 7a00 	vstr	s14, [r3]
 800ac98:	e512      	b.n	800a6c0 <BUFFERVALUEUPDATE+0x370>
	  if(diff16<0){diff16=(-1)*diff16;}
 800ac9a:	eef1 6a66 	vneg.f32	s13, s13
 800ac9e:	e565      	b.n	800a76c <BUFFERVALUEUPDATE+0x41c>
	  else {f_VCARight_DB_RMS_MAXbufferd -=p_MAXBufferd*diff16;}
 800aca0:	4b54      	ldr	r3, [pc, #336]	; (800adf4 <BUFFERVALUEUPDATE+0xaa4>)
 800aca2:	edd3 7a00 	vldr	s15, [r3]
 800aca6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800acaa:	ee37 7a66 	vsub.f32	s14, s14, s13
 800acae:	4b5f      	ldr	r3, [pc, #380]	; (800ae2c <BUFFERVALUEUPDATE+0xadc>)
 800acb0:	ed83 7a00 	vstr	s14, [r3]
 800acb4:	e563      	b.n	800a77e <BUFFERVALUEUPDATE+0x42e>
	  if(diff<0){diff=(-1)*diff;}
 800acb6:	eef1 6a66 	vneg.f32	s13, s13
 800acba:	e56e      	b.n	800a79a <BUFFERVALUEUPDATE+0x44a>
	  else {f_outputLeft_DB_bufferd -=p_Bufferd*diff;}
 800acbc:	4b4f      	ldr	r3, [pc, #316]	; (800adfc <BUFFERVALUEUPDATE+0xaac>)
 800acbe:	ed93 6a00 	vldr	s12, [r3]
 800acc2:	ee66 6a86 	vmul.f32	s13, s13, s12
 800acc6:	ee37 7a66 	vsub.f32	s14, s14, s13
 800acca:	4b59      	ldr	r3, [pc, #356]	; (800ae30 <BUFFERVALUEUPDATE+0xae0>)
 800accc:	ed83 7a00 	vstr	s14, [r3]
 800acd0:	e56c      	b.n	800a7ac <BUFFERVALUEUPDATE+0x45c>
	  if(diff<0){diff=(-1)*diff;}
 800acd2:	eef1 6a66 	vneg.f32	s13, s13
 800acd6:	e574      	b.n	800a7c2 <BUFFERVALUEUPDATE+0x472>
	  else {f_outputLeft_DB_MAXbufferd -=p_MAXBufferd*diff;}
 800acd8:	4b46      	ldr	r3, [pc, #280]	; (800adf4 <BUFFERVALUEUPDATE+0xaa4>)
 800acda:	edd3 7a00 	vldr	s15, [r3]
 800acde:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ace2:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ace6:	4b53      	ldr	r3, [pc, #332]	; (800ae34 <BUFFERVALUEUPDATE+0xae4>)
 800ace8:	ed83 7a00 	vstr	s14, [r3]
 800acec:	e572      	b.n	800a7d4 <BUFFERVALUEUPDATE+0x484>
	  if(diff<0){diff=(-1)*diff;}
 800acee:	eef1 6a66 	vneg.f32	s13, s13
 800acf2:	e57d      	b.n	800a7f0 <BUFFERVALUEUPDATE+0x4a0>
	  else {f_outputRight_DB_bufferd -=p_Bufferd*diff;}
 800acf4:	4b41      	ldr	r3, [pc, #260]	; (800adfc <BUFFERVALUEUPDATE+0xaac>)
 800acf6:	ed93 6a00 	vldr	s12, [r3]
 800acfa:	ee66 6a86 	vmul.f32	s13, s13, s12
 800acfe:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ad02:	4b4d      	ldr	r3, [pc, #308]	; (800ae38 <BUFFERVALUEUPDATE+0xae8>)
 800ad04:	ed83 7a00 	vstr	s14, [r3]
 800ad08:	e57b      	b.n	800a802 <BUFFERVALUEUPDATE+0x4b2>
	  if(diff<0){diff=(-1)*diff;}
 800ad0a:	eef1 6a66 	vneg.f32	s13, s13
 800ad0e:	e583      	b.n	800a818 <BUFFERVALUEUPDATE+0x4c8>
	  else {f_outputRight_DB_MAXbufferd -=p_MAXBufferd*diff;}
 800ad10:	4b38      	ldr	r3, [pc, #224]	; (800adf4 <BUFFERVALUEUPDATE+0xaa4>)
 800ad12:	edd3 7a00 	vldr	s15, [r3]
 800ad16:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ad1a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ad1e:	4b47      	ldr	r3, [pc, #284]	; (800ae3c <BUFFERVALUEUPDATE+0xaec>)
 800ad20:	ed83 7a00 	vstr	s14, [r3]
 800ad24:	e581      	b.n	800a82a <BUFFERVALUEUPDATE+0x4da>
	  if(diff<0){diff=(-1)*diff;}
 800ad26:	eef1 6a66 	vneg.f32	s13, s13
 800ad2a:	e58c      	b.n	800a846 <BUFFERVALUEUPDATE+0x4f6>
	  else {f_outputLeft_DB_RMS_bufferd -=p_Bufferd*diff;}
 800ad2c:	4b33      	ldr	r3, [pc, #204]	; (800adfc <BUFFERVALUEUPDATE+0xaac>)
 800ad2e:	ed93 6a00 	vldr	s12, [r3]
 800ad32:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ad36:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ad3a:	4b41      	ldr	r3, [pc, #260]	; (800ae40 <BUFFERVALUEUPDATE+0xaf0>)
 800ad3c:	ed83 7a00 	vstr	s14, [r3]
 800ad40:	e58a      	b.n	800a858 <BUFFERVALUEUPDATE+0x508>
	  if(diff<0){diff=(-1)*diff;}
 800ad42:	eef1 6a66 	vneg.f32	s13, s13
 800ad46:	e592      	b.n	800a86e <BUFFERVALUEUPDATE+0x51e>
	  else {f_outputLeft_DB_RMS_MAXbufferd -=p_MAXBufferd*diff;}
 800ad48:	4b2a      	ldr	r3, [pc, #168]	; (800adf4 <BUFFERVALUEUPDATE+0xaa4>)
 800ad4a:	edd3 7a00 	vldr	s15, [r3]
 800ad4e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ad52:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ad56:	4b3b      	ldr	r3, [pc, #236]	; (800ae44 <BUFFERVALUEUPDATE+0xaf4>)
 800ad58:	ed83 7a00 	vstr	s14, [r3]
 800ad5c:	e590      	b.n	800a880 <BUFFERVALUEUPDATE+0x530>
	  if(diff<0){diff=(-1)*diff;}
 800ad5e:	eef1 6a66 	vneg.f32	s13, s13
 800ad62:	e59b      	b.n	800a89c <BUFFERVALUEUPDATE+0x54c>
	  else {f_outputRight_DB_RMS_bufferd -=p_Bufferd*diff;}
 800ad64:	4b25      	ldr	r3, [pc, #148]	; (800adfc <BUFFERVALUEUPDATE+0xaac>)
 800ad66:	ed93 6a00 	vldr	s12, [r3]
 800ad6a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ad6e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ad72:	4b35      	ldr	r3, [pc, #212]	; (800ae48 <BUFFERVALUEUPDATE+0xaf8>)
 800ad74:	ed83 7a00 	vstr	s14, [r3]
 800ad78:	e599      	b.n	800a8ae <BUFFERVALUEUPDATE+0x55e>
	  if(diff<0){diff=(-1)*diff;}
 800ad7a:	eef1 6a66 	vneg.f32	s13, s13
 800ad7e:	e5a1      	b.n	800a8c4 <BUFFERVALUEUPDATE+0x574>
	  else {f_outputRight_DB_RMS_MAXbufferd -=p_MAXBufferd*diff;}
 800ad80:	4b1c      	ldr	r3, [pc, #112]	; (800adf4 <BUFFERVALUEUPDATE+0xaa4>)
 800ad82:	edd3 7a00 	vldr	s15, [r3]
 800ad86:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ad8a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800ad8e:	4b2f      	ldr	r3, [pc, #188]	; (800ae4c <BUFFERVALUEUPDATE+0xafc>)
 800ad90:	ed83 7a00 	vstr	s14, [r3]
 800ad94:	e59f      	b.n	800a8d6 <BUFFERVALUEUPDATE+0x586>



		for(int i=0; i<50; i++){
			if (f_spectrumLeft_bufferd[i]<UARTDATA[i+50]){f_spectrumLeft_bufferd[i] = UARTDATA[i+50];}
			else {f_spectrumLeft_bufferd[i] -=p_Bufferd*(f_spectrumLeft_bufferd[i]-UARTDATA[i+50]);}
 800ad96:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad9a:	4a18      	ldr	r2, [pc, #96]	; (800adfc <BUFFERVALUEUPDATE+0xaac>)
 800ad9c:	edd2 6a00 	vldr	s13, [r2]
 800ada0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ada4:	4a2a      	ldr	r2, [pc, #168]	; (800ae50 <BUFFERVALUEUPDATE+0xb00>)
 800ada6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800adaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800adae:	edc2 7a00 	vstr	s15, [r2]
		for(int i=0; i<50; i++){
 800adb2:	3301      	adds	r3, #1
 800adb4:	2b31      	cmp	r3, #49	; 0x31
 800adb6:	dc19      	bgt.n	800adec <BUFFERVALUEUPDATE+0xa9c>
			if (f_spectrumLeft_bufferd[i]<UARTDATA[i+50]){f_spectrumLeft_bufferd[i] = UARTDATA[i+50];}
 800adb8:	4a25      	ldr	r2, [pc, #148]	; (800ae50 <BUFFERVALUEUPDATE+0xb00>)
 800adba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800adbe:	ed92 7a00 	vldr	s14, [r2]
 800adc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800adc6:	4923      	ldr	r1, [pc, #140]	; (800ae54 <BUFFERVALUEUPDATE+0xb04>)
 800adc8:	5c8a      	ldrb	r2, [r1, r2]
 800adca:	ee06 2a90 	vmov	s13, r2
 800adce:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 800add2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800add6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adda:	d5dc      	bpl.n	800ad96 <BUFFERVALUEUPDATE+0xa46>
 800addc:	4a1c      	ldr	r2, [pc, #112]	; (800ae50 <BUFFERVALUEUPDATE+0xb00>)
 800adde:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800ade2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800ade6:	edc2 6a00 	vstr	s13, [r2]
 800adea:	e7e2      	b.n	800adb2 <BUFFERVALUEUPDATE+0xa62>
		}
}
 800adec:	ecbd 8b02 	vpop	{d8}
 800adf0:	bd38      	pop	{r3, r4, r5, pc}
 800adf2:	bf00      	nop
 800adf4:	2002f130 	.word	0x2002f130
 800adf8:	2002f51c 	.word	0x2002f51c
 800adfc:	2002e5a0 	.word	0x2002e5a0
 800ae00:	2002fb1c 	.word	0x2002fb1c
 800ae04:	2002f160 	.word	0x2002f160
 800ae08:	2002f15c 	.word	0x2002f15c
 800ae0c:	2002f848 	.word	0x2002f848
 800ae10:	2002fa38 	.word	0x2002fa38
 800ae14:	2002fb34 	.word	0x2002fb34
 800ae18:	2002fa10 	.word	0x2002fa10
 800ae1c:	2002fb08 	.word	0x2002fb08
 800ae20:	2002f514 	.word	0x2002f514
 800ae24:	2002f850 	.word	0x2002f850
 800ae28:	2002f35c 	.word	0x2002f35c
 800ae2c:	2002fb30 	.word	0x2002fb30
 800ae30:	2002f84c 	.word	0x2002f84c
 800ae34:	2002fa18 	.word	0x2002fa18
 800ae38:	2002fb24 	.word	0x2002fb24
 800ae3c:	2002fa08 	.word	0x2002fa08
 800ae40:	2002f370 	.word	0x2002f370
 800ae44:	2002f6b0 	.word	0x2002f6b0
 800ae48:	2002f510 	.word	0x2002f510
 800ae4c:	2002fd94 	.word	0x2002fd94
 800ae50:	2002fcc8 	.word	0x2002fcc8
 800ae54:	2002e7cc 	.word	0x2002e7cc

0800ae58 <GRAPHICS_MainTask>:
char checksum;
uint16_t checksum16;
int CheckSumOK = 0;


void GRAPHICS_MainTask(void) {
 800ae58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	//GUI_Clear();
	//GUI_SetBkColor(GUI_DARKGRAY);

/////////////////////////////////////////////////////////////////////////
////////CREATION OF ALL WINDOWS//////////////////////////////////////////
	InfoWindow = CreateInfoWindow();
 800ae5a:	f000 fb71 	bl	800b540 <CreateInfoWindow>
 800ae5e:	4c9b      	ldr	r4, [pc, #620]	; (800b0cc <GRAPHICS_MainTask+0x274>)
 800ae60:	6020      	str	r0, [r4, #0]
	SettingsButtonWindow = CreateSettingsButtonWindow();
 800ae62:	f001 f963 	bl	800c12c <CreateSettingsButtonWindow>
 800ae66:	4b9a      	ldr	r3, [pc, #616]	; (800b0d0 <GRAPHICS_MainTask+0x278>)
 800ae68:	6018      	str	r0, [r3, #0]
	IndicatorWindow1 = CreateIndicatorWindow1();
 800ae6a:	f002 fa4b 	bl	800d304 <CreateIndicatorWindow1>
 800ae6e:	4b99      	ldr	r3, [pc, #612]	; (800b0d4 <GRAPHICS_MainTask+0x27c>)
 800ae70:	6018      	str	r0, [r3, #0]
	IndicatorWindow2 = CreateIndicatorWindow2();
 800ae72:	f002 facd 	bl	800d410 <CreateIndicatorWindow2>
 800ae76:	4b98      	ldr	r3, [pc, #608]	; (800b0d8 <GRAPHICS_MainTask+0x280>)
 800ae78:	6018      	str	r0, [r3, #0]
	IndicatorWindow3 = CreateIndicatorWindow3();
 800ae7a:	f002 fb4f 	bl	800d51c <CreateIndicatorWindow3>
 800ae7e:	4b97      	ldr	r3, [pc, #604]	; (800b0dc <GRAPHICS_MainTask+0x284>)
 800ae80:	6018      	str	r0, [r3, #0]

	Enc_InputWindow = CreateEnc_InputWindow();
 800ae82:	f001 fce1 	bl	800c848 <CreateEnc_InputWindow>
 800ae86:	4b96      	ldr	r3, [pc, #600]	; (800b0e0 <GRAPHICS_MainTask+0x288>)
 800ae88:	6018      	str	r0, [r3, #0]
	Enc_AttackWindow = CreateEnc_AttackWindow();
 800ae8a:	f001 fa81 	bl	800c390 <CreateEnc_AttackWindow>
 800ae8e:	4b95      	ldr	r3, [pc, #596]	; (800b0e4 <GRAPHICS_MainTask+0x28c>)
 800ae90:	6018      	str	r0, [r3, #0]
	Enc_OutputWindow = CreateEnc_OutputWindow();
 800ae92:	f001 ff39 	bl	800cd08 <CreateEnc_OutputWindow>
 800ae96:	4b94      	ldr	r3, [pc, #592]	; (800b0e8 <GRAPHICS_MainTask+0x290>)
 800ae98:	6018      	str	r0, [r3, #0]
	Enc_DistortionWindow = CreateEnc_DistortionWindow();
 800ae9a:	f001 fba7 	bl	800c5ec <CreateEnc_DistortionWindow>
 800ae9e:	4b93      	ldr	r3, [pc, #588]	; (800b0ec <GRAPHICS_MainTask+0x294>)
 800aea0:	6018      	str	r0, [r3, #0]
	Enc_MakeUpGainWindow = CreateEnc_MakeUpGainWindow();
 800aea2:	f001 fe03 	bl	800caac <CreateEnc_MakeUpGainWindow>
 800aea6:	4b92      	ldr	r3, [pc, #584]	; (800b0f0 <GRAPHICS_MainTask+0x298>)
 800aea8:	6018      	str	r0, [r3, #0]
	Enc_RatioWindow = CreateEnc_RatioWindow();
 800aeaa:	f002 f85d 	bl	800cf68 <CreateEnc_RatioWindow>
 800aeae:	4b91      	ldr	r3, [pc, #580]	; (800b0f4 <GRAPHICS_MainTask+0x29c>)
 800aeb0:	6018      	str	r0, [r3, #0]
	Enc_ReleaseWindow = CreateEnc_ReleaseWindow();
 800aeb2:	f002 f98b 	bl	800d1cc <CreateEnc_ReleaseWindow>
 800aeb6:	4b90      	ldr	r3, [pc, #576]	; (800b0f8 <GRAPHICS_MainTask+0x2a0>)
 800aeb8:	6018      	str	r0, [r3, #0]

	MainWindow = CreateMainWindow();
 800aeba:	f000 fe91 	bl	800bbe0 <CreateMainWindow>
 800aebe:	4b8f      	ldr	r3, [pc, #572]	; (800b0fc <GRAPHICS_MainTask+0x2a4>)
 800aec0:	6018      	str	r0, [r3, #0]

////////////////////////////////////////////////////////////////////////
///////////Show InfoWindow on Startup///////////////////////////////////
	WM_ShowWindow (InfoWindow);
 800aec2:	6820      	ldr	r0, [r4, #0]
 800aec4:	f00e fa42 	bl	801934c <WM_ShowWindow>
////////////////////////////////////////////////////////////////////////

	int timer = 0;

	HAL_TIM_Base_Start(&htim1);
 800aec8:	488d      	ldr	r0, [pc, #564]	; (800b100 <GRAPHICS_MainTask+0x2a8>)
 800aeca:	f7fb ff4e 	bl	8006d6a <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 800aece:	488d      	ldr	r0, [pc, #564]	; (800b104 <GRAPHICS_MainTask+0x2ac>)
 800aed0:	f7fb ff4b 	bl	8006d6a <HAL_TIM_Base_Start>

	strcpy( gain.name, "input");
 800aed4:	4b8c      	ldr	r3, [pc, #560]	; (800b108 <GRAPHICS_MainTask+0x2b0>)
 800aed6:	4a8d      	ldr	r2, [pc, #564]	; (800b10c <GRAPHICS_MainTask+0x2b4>)
 800aed8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aedc:	6018      	str	r0, [r3, #0]
 800aede:	8099      	strh	r1, [r3, #4]
	input.value = 0;
 800aee0:	4a8b      	ldr	r2, [pc, #556]	; (800b110 <GRAPHICS_MainTask+0x2b8>)
 800aee2:	2300      	movs	r3, #0
 800aee4:	6013      	str	r3, [r2, #0]
	input.Color = GUI_LIGHTGREEN;
 800aee6:	f06f 117f 	mvn.w	r1, #8323199	; 0x7f007f
 800aeea:	6251      	str	r1, [r2, #36]	; 0x24
	input.assignedPot = 1;
 800aeec:	2001      	movs	r0, #1
 800aeee:	6190      	str	r0, [r2, #24]
	Encoder1.Color = GUI_LIGHTGREEN;
 800aef0:	4a88      	ldr	r2, [pc, #544]	; (800b114 <GRAPHICS_MainTask+0x2bc>)
 800aef2:	6111      	str	r1, [r2, #16]

	strcpy( attack.name, "attack");
 800aef4:	4a88      	ldr	r2, [pc, #544]	; (800b118 <GRAPHICS_MainTask+0x2c0>)
 800aef6:	4989      	ldr	r1, [pc, #548]	; (800b11c <GRAPHICS_MainTask+0x2c4>)
 800aef8:	c903      	ldmia	r1, {r0, r1}
 800aefa:	6010      	str	r0, [r2, #0]
 800aefc:	8091      	strh	r1, [r2, #4]
 800aefe:	0c09      	lsrs	r1, r1, #16
 800af00:	7191      	strb	r1, [r2, #6]
	attack.value = 0;
 800af02:	f842 3c04 	str.w	r3, [r2, #-4]
	attack.Color = GUI_LIGHTGRAY;
 800af06:	4e86      	ldr	r6, [pc, #536]	; (800b120 <GRAPHICS_MainTask+0x2c8>)
 800af08:	6216      	str	r6, [r2, #32]
	attack.assignedPot = 0;
 800af0a:	2400      	movs	r4, #0
 800af0c:	6154      	str	r4, [r2, #20]

	strcpy( makeUpGain.name, "makeUpGain");
 800af0e:	4f85      	ldr	r7, [pc, #532]	; (800b124 <GRAPHICS_MainTask+0x2cc>)
 800af10:	4a85      	ldr	r2, [pc, #532]	; (800b128 <GRAPHICS_MainTask+0x2d0>)
 800af12:	463d      	mov	r5, r7
 800af14:	ca07      	ldmia	r2, {r0, r1, r2}
 800af16:	c503      	stmia	r5!, {r0, r1}
 800af18:	f825 2b02 	strh.w	r2, [r5], #2
 800af1c:	0c12      	lsrs	r2, r2, #16
 800af1e:	702a      	strb	r2, [r5, #0]
	makeUpGain.value = 0;
 800af20:	f847 3c04 	str.w	r3, [r7, #-4]
	makeUpGain.Color = GUI_MAGENTA;
 800af24:	f46f 427f 	mvn.w	r2, #65280	; 0xff00
 800af28:	623a      	str	r2, [r7, #32]
	makeUpGain.assignedPot = 3 ;
 800af2a:	2003      	movs	r0, #3
 800af2c:	6178      	str	r0, [r7, #20]
	Encoder3.Color = GUI_MAGENTA;
 800af2e:	497f      	ldr	r1, [pc, #508]	; (800b12c <GRAPHICS_MainTask+0x2d4>)
 800af30:	610a      	str	r2, [r1, #16]

	strcpy( release.name, "release");
 800af32:	4a7f      	ldr	r2, [pc, #508]	; (800b130 <GRAPHICS_MainTask+0x2d8>)
 800af34:	497f      	ldr	r1, [pc, #508]	; (800b134 <GRAPHICS_MainTask+0x2dc>)
 800af36:	c903      	ldmia	r1, {r0, r1}
 800af38:	e882 0003 	stmia.w	r2, {r0, r1}
	release.value = 0;
 800af3c:	1f11      	subs	r1, r2, #4
 800af3e:	f842 3c04 	str.w	r3, [r2, #-4]
	release.Color = GUI_CYAN;
 800af42:	f46f 027f 	mvn.w	r2, #16711680	; 0xff0000
 800af46:	624a      	str	r2, [r1, #36]	; 0x24
	release.assignedPot = 2;
 800af48:	2002      	movs	r0, #2
 800af4a:	6188      	str	r0, [r1, #24]
	Encoder2.Color = GUI_CYAN;
 800af4c:	497a      	ldr	r1, [pc, #488]	; (800b138 <GRAPHICS_MainTask+0x2e0>)
 800af4e:	610a      	str	r2, [r1, #16]

	strcpy( ratio.name, "ratio");
 800af50:	4a7a      	ldr	r2, [pc, #488]	; (800b13c <GRAPHICS_MainTask+0x2e4>)
 800af52:	497b      	ldr	r1, [pc, #492]	; (800b140 <GRAPHICS_MainTask+0x2e8>)
 800af54:	c903      	ldmia	r1, {r0, r1}
 800af56:	6010      	str	r0, [r2, #0]
 800af58:	8091      	strh	r1, [r2, #4]
	ratio.value = 0;
 800af5a:	1f11      	subs	r1, r2, #4
 800af5c:	f842 3c04 	str.w	r3, [r2, #-4]
	ratio.Color = GUI_ORANGE;
 800af60:	4a78      	ldr	r2, [pc, #480]	; (800b144 <GRAPHICS_MainTask+0x2ec>)
 800af62:	624a      	str	r2, [r1, #36]	; 0x24
	ratio.assignedPot = 4;
 800af64:	2004      	movs	r0, #4
 800af66:	6188      	str	r0, [r1, #24]
	Encoder4.Color = GUI_ORANGE;
 800af68:	4977      	ldr	r1, [pc, #476]	; (800b148 <GRAPHICS_MainTask+0x2f0>)
 800af6a:	610a      	str	r2, [r1, #16]

	strcpy( distortion.name, "distortion");
 800af6c:	4f77      	ldr	r7, [pc, #476]	; (800b14c <GRAPHICS_MainTask+0x2f4>)
 800af6e:	4a78      	ldr	r2, [pc, #480]	; (800b150 <GRAPHICS_MainTask+0x2f8>)
 800af70:	463d      	mov	r5, r7
 800af72:	ca07      	ldmia	r2, {r0, r1, r2}
 800af74:	c503      	stmia	r5!, {r0, r1}
 800af76:	f825 2b02 	strh.w	r2, [r5], #2
 800af7a:	0c12      	lsrs	r2, r2, #16
 800af7c:	702a      	strb	r2, [r5, #0]
	distortion.value = 0;
 800af7e:	f847 3c04 	str.w	r3, [r7, #-4]
	distortion.Color = GUI_LIGHTGRAY;
 800af82:	623e      	str	r6, [r7, #32]
	distortion.assignedPot = 0;
 800af84:	617c      	str	r4, [r7, #20]

	strcpy( threshold.name, "threshold");
 800af86:	4f73      	ldr	r7, [pc, #460]	; (800b154 <GRAPHICS_MainTask+0x2fc>)
 800af88:	4a73      	ldr	r2, [pc, #460]	; (800b158 <GRAPHICS_MainTask+0x300>)
 800af8a:	463d      	mov	r5, r7
 800af8c:	ca07      	ldmia	r2, {r0, r1, r2}
 800af8e:	c503      	stmia	r5!, {r0, r1}
 800af90:	802a      	strh	r2, [r5, #0]
	threshold.value = 0;
 800af92:	f847 3c04 	str.w	r3, [r7, #-4]
	threshold.Color = GUI_LIGHTGRAY;
 800af96:	623e      	str	r6, [r7, #32]
	threshold.assignedPot = 0;
 800af98:	617c      	str	r4, [r7, #20]

	strcpy( outputgain.name, "outgain");
 800af9a:	4a70      	ldr	r2, [pc, #448]	; (800b15c <GRAPHICS_MainTask+0x304>)
 800af9c:	4970      	ldr	r1, [pc, #448]	; (800b160 <GRAPHICS_MainTask+0x308>)
 800af9e:	c903      	ldmia	r1, {r0, r1}
 800afa0:	e882 0003 	stmia.w	r2, {r0, r1}
	outputgain.value = 0;
 800afa4:	f842 3c04 	str.w	r3, [r2, #-4]
	outputgain.Color = GUI_LIGHTGRAY;
 800afa8:	6216      	str	r6, [r2, #32]
	outputgain.assignedPot = 0;
 800afaa:	6154      	str	r4, [r2, #20]
 800afac:	e04b      	b.n	800b046 <GRAPHICS_MainTask+0x1ee>


	  reset = 1; //Reset Input Buffer collection

	  for (int i=0; i<100;i++){
		  UART_TRANSFER[i]=0x00;
 800afae:	4a6d      	ldr	r2, [pc, #436]	; (800b164 <GRAPHICS_MainTask+0x30c>)
 800afb0:	2100      	movs	r1, #0
 800afb2:	54d1      	strb	r1, [r2, r3]
	  for (int i=0; i<100;i++){
 800afb4:	3301      	adds	r3, #1
 800afb6:	2b63      	cmp	r3, #99	; 0x63
 800afb8:	ddf9      	ble.n	800afae <GRAPHICS_MainTask+0x156>
	  }


      UART_TRANSFER[0]='#';
 800afba:	4b6a      	ldr	r3, [pc, #424]	; (800b164 <GRAPHICS_MainTask+0x30c>)
 800afbc:	2223      	movs	r2, #35	; 0x23
 800afbe:	701a      	strb	r2, [r3, #0]
      UART_TRANSFER[1]='s';
 800afc0:	2273      	movs	r2, #115	; 0x73
 800afc2:	705a      	strb	r2, [r3, #1]
      UART_TRANSFER[2]='t';
 800afc4:	2274      	movs	r2, #116	; 0x74
 800afc6:	709a      	strb	r2, [r3, #2]
      UART_TRANSFER[3]='a';
 800afc8:	2261      	movs	r2, #97	; 0x61
 800afca:	70da      	strb	r2, [r3, #3]
      UART_TRANSFER[4]=0xFF;//0
 800afcc:	22ff      	movs	r2, #255	; 0xff
 800afce:	711a      	strb	r2, [r3, #4]
      UART_TRANSFER[5]=0x00;
 800afd0:	2100      	movs	r1, #0
 800afd2:	7159      	strb	r1, [r3, #5]
      UART_TRANSFER[6]=pots[1];//2
 800afd4:	4a64      	ldr	r2, [pc, #400]	; (800b168 <GRAPHICS_MainTask+0x310>)
 800afd6:	6850      	ldr	r0, [r2, #4]
 800afd8:	7198      	strb	r0, [r3, #6]
      UART_TRANSFER[7]=pots[2];//3
 800afda:	6890      	ldr	r0, [r2, #8]
 800afdc:	71d8      	strb	r0, [r3, #7]
      UART_TRANSFER[8]=pots[3];//4
 800afde:	68d0      	ldr	r0, [r2, #12]
 800afe0:	7218      	strb	r0, [r3, #8]
      UART_TRANSFER[9]=pots[4];//5
 800afe2:	6912      	ldr	r2, [r2, #16]
 800afe4:	725a      	strb	r2, [r3, #9]
      UART_TRANSFER[10]=Button_okState;
 800afe6:	4a61      	ldr	r2, [pc, #388]	; (800b16c <GRAPHICS_MainTask+0x314>)
 800afe8:	6812      	ldr	r2, [r2, #0]
 800afea:	729a      	strb	r2, [r3, #10]
      UART_TRANSFER[11]=0x00;
 800afec:	72d9      	strb	r1, [r3, #11]
      UART_TRANSFER[12]=0x02;//8
 800afee:	2202      	movs	r2, #2
 800aff0:	731a      	strb	r2, [r3, #12]
	  UART_TRANSFER[13]=0x03;//9
 800aff2:	2203      	movs	r2, #3
 800aff4:	735a      	strb	r2, [r3, #13]

///////////////INFO-WINDOW SHOW HANDLER//////////////////////////////
	    if(TouchDetected){touch++;}
 800aff6:	4b5e      	ldr	r3, [pc, #376]	; (800b170 <GRAPHICS_MainTask+0x318>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	b34b      	cbz	r3, 800b050 <GRAPHICS_MainTask+0x1f8>
 800affc:	4a5d      	ldr	r2, [pc, #372]	; (800b174 <GRAPHICS_MainTask+0x31c>)
 800affe:	6813      	ldr	r3, [r2, #0]
 800b000:	3301      	adds	r3, #1
 800b002:	6013      	str	r3, [r2, #0]
	    else{touch=0;}




	    if (touch>50){
 800b004:	4b5b      	ldr	r3, [pc, #364]	; (800b174 <GRAPHICS_MainTask+0x31c>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b32      	cmp	r3, #50	; 0x32
 800b00a:	dc25      	bgt.n	800b058 <GRAPHICS_MainTask+0x200>
	    	WM_ShowWindow(InfoWindow);
	    	touch = 0;
	    	timer = 0;
	    }

	    if (timer==50){
 800b00c:	2c32      	cmp	r4, #50	; 0x32
 800b00e:	f000 80c1 	beq.w	800b194 <GRAPHICS_MainTask+0x33c>
	    	WM_HideWindow(InfoWindow);


	    }

	    timer++;
 800b012:	3401      	adds	r4, #1




///////////////////////////////////////////////////////////////////
	    p_Bufferd = 0.01;
 800b014:	4b58      	ldr	r3, [pc, #352]	; (800b178 <GRAPHICS_MainTask+0x320>)
 800b016:	4a59      	ldr	r2, [pc, #356]	; (800b17c <GRAPHICS_MainTask+0x324>)
 800b018:	601a      	str	r2, [r3, #0]
	    p_MAXBufferd = 0.001;
 800b01a:	4b59      	ldr	r3, [pc, #356]	; (800b180 <GRAPHICS_MainTask+0x328>)
 800b01c:	4a59      	ldr	r2, [pc, #356]	; (800b184 <GRAPHICS_MainTask+0x32c>)
 800b01e:	601a      	str	r2, [r3, #0]

///////////////////ALWAYS Update Main Window///////////////////////
	   WM_Invalidate(MainWindow);
 800b020:	4d36      	ldr	r5, [pc, #216]	; (800b0fc <GRAPHICS_MainTask+0x2a4>)
 800b022:	6828      	ldr	r0, [r5, #0]
 800b024:	f00c fc48 	bl	80178b8 <WM_InvalidateWindow>
	   WM_SendMessageNoPara(MainWindow, WM_Paint);
 800b028:	4957      	ldr	r1, [pc, #348]	; (800b188 <GRAPHICS_MainTask+0x330>)
 800b02a:	6828      	ldr	r0, [r5, #0]
 800b02c:	f00d ffa2 	bl	8018f74 <WM_SendMessageNoPara>

	   UARTSENDER();
 800b030:	f7f7 f9fe 	bl	8002430 <UARTSENDER>

	   GUI_Delay(1);
 800b034:	2001      	movs	r0, #1
 800b036:	f006 fc03 	bl	8011840 <GUI_Delay>
	   HAL_UART_DMAResume(&huart6);
 800b03a:	4854      	ldr	r0, [pc, #336]	; (800b18c <GRAPHICS_MainTask+0x334>)
 800b03c:	f7fc fadc 	bl	80075f8 <HAL_UART_DMAResume>
	   GUI_SetTimeSlice(1);
 800b040:	2001      	movs	r0, #1
 800b042:	f006 fbf7 	bl	8011834 <GUI_SetTimeSlice>
	  reset = 1; //Reset Input Buffer collection
 800b046:	4b52      	ldr	r3, [pc, #328]	; (800b190 <GRAPHICS_MainTask+0x338>)
 800b048:	2201      	movs	r2, #1
 800b04a:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<100;i++){
 800b04c:	2300      	movs	r3, #0
 800b04e:	e7b2      	b.n	800afb6 <GRAPHICS_MainTask+0x15e>
	    else{touch=0;}
 800b050:	4b48      	ldr	r3, [pc, #288]	; (800b174 <GRAPHICS_MainTask+0x31c>)
 800b052:	2200      	movs	r2, #0
 800b054:	601a      	str	r2, [r3, #0]
 800b056:	e7d5      	b.n	800b004 <GRAPHICS_MainTask+0x1ac>
	    	GUI_Clear();
 800b058:	f005 fa60 	bl	801051c <GUI_Clear>
	    	GUI_SetBkColor(GUI_WHITE);
 800b05c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b060:	f005 f94c 	bl	80102fc <GUI_SetBkColor>
	    	WM_HideWindow (IndicatorWindow1);
 800b064:	4b1b      	ldr	r3, [pc, #108]	; (800b0d4 <GRAPHICS_MainTask+0x27c>)
 800b066:	6818      	ldr	r0, [r3, #0]
 800b068:	f00d fbc6 	bl	80187f8 <WM_HideWindow>
	    	WM_HideWindow (IndicatorWindow2);
 800b06c:	4b1a      	ldr	r3, [pc, #104]	; (800b0d8 <GRAPHICS_MainTask+0x280>)
 800b06e:	6818      	ldr	r0, [r3, #0]
 800b070:	f00d fbc2 	bl	80187f8 <WM_HideWindow>
	    	WM_HideWindow (IndicatorWindow3);
 800b074:	4b19      	ldr	r3, [pc, #100]	; (800b0dc <GRAPHICS_MainTask+0x284>)
 800b076:	6818      	ldr	r0, [r3, #0]
 800b078:	f00d fbbe 	bl	80187f8 <WM_HideWindow>
	    	WM_HideWindow (SettingsButtonWindow);
 800b07c:	4b14      	ldr	r3, [pc, #80]	; (800b0d0 <GRAPHICS_MainTask+0x278>)
 800b07e:	6818      	ldr	r0, [r3, #0]
 800b080:	f00d fbba 	bl	80187f8 <WM_HideWindow>
	    	WM_HideWindow(Enc_InputWindow);
 800b084:	4b16      	ldr	r3, [pc, #88]	; (800b0e0 <GRAPHICS_MainTask+0x288>)
 800b086:	6818      	ldr	r0, [r3, #0]
 800b088:	f00d fbb6 	bl	80187f8 <WM_HideWindow>
	    	WM_HideWindow(Enc_AttackWindow);
 800b08c:	4b15      	ldr	r3, [pc, #84]	; (800b0e4 <GRAPHICS_MainTask+0x28c>)
 800b08e:	6818      	ldr	r0, [r3, #0]
 800b090:	f00d fbb2 	bl	80187f8 <WM_HideWindow>
	    	WM_HideWindow(Enc_ReleaseWindow);
 800b094:	4b18      	ldr	r3, [pc, #96]	; (800b0f8 <GRAPHICS_MainTask+0x2a0>)
 800b096:	6818      	ldr	r0, [r3, #0]
 800b098:	f00d fbae 	bl	80187f8 <WM_HideWindow>
	    	WM_HideWindow(Enc_OutputWindow);
 800b09c:	4b12      	ldr	r3, [pc, #72]	; (800b0e8 <GRAPHICS_MainTask+0x290>)
 800b09e:	6818      	ldr	r0, [r3, #0]
 800b0a0:	f00d fbaa 	bl	80187f8 <WM_HideWindow>
	    	WM_HideWindow(Enc_DistortionWindow);
 800b0a4:	4b11      	ldr	r3, [pc, #68]	; (800b0ec <GRAPHICS_MainTask+0x294>)
 800b0a6:	6818      	ldr	r0, [r3, #0]
 800b0a8:	f00d fba6 	bl	80187f8 <WM_HideWindow>
	    	WM_HideWindow(Enc_MakeUpGainWindow);
 800b0ac:	4b10      	ldr	r3, [pc, #64]	; (800b0f0 <GRAPHICS_MainTask+0x298>)
 800b0ae:	6818      	ldr	r0, [r3, #0]
 800b0b0:	f00d fba2 	bl	80187f8 <WM_HideWindow>
	    	WM_HideWindow(Enc_RatioWindow);
 800b0b4:	4b0f      	ldr	r3, [pc, #60]	; (800b0f4 <GRAPHICS_MainTask+0x29c>)
 800b0b6:	6818      	ldr	r0, [r3, #0]
 800b0b8:	f00d fb9e 	bl	80187f8 <WM_HideWindow>
	    	WM_ShowWindow(InfoWindow);
 800b0bc:	4b03      	ldr	r3, [pc, #12]	; (800b0cc <GRAPHICS_MainTask+0x274>)
 800b0be:	6818      	ldr	r0, [r3, #0]
 800b0c0:	f00e f944 	bl	801934c <WM_ShowWindow>
	    	touch = 0;
 800b0c4:	2400      	movs	r4, #0
 800b0c6:	4b2b      	ldr	r3, [pc, #172]	; (800b174 <GRAPHICS_MainTask+0x31c>)
 800b0c8:	601c      	str	r4, [r3, #0]
 800b0ca:	e7a2      	b.n	800b012 <GRAPHICS_MainTask+0x1ba>
 800b0cc:	2002e5f8 	.word	0x2002e5f8
 800b0d0:	2002e594 	.word	0x2002e594
 800b0d4:	2002e514 	.word	0x2002e514
 800b0d8:	2002e518 	.word	0x2002e518
 800b0dc:	2002e6c8 	.word	0x2002e6c8
 800b0e0:	2002e6e4 	.word	0x2002e6e4
 800b0e4:	2002eecc 	.word	0x2002eecc
 800b0e8:	2002e51c 	.word	0x2002e51c
 800b0ec:	2002ede8 	.word	0x2002ede8
 800b0f0:	2002e894 	.word	0x2002e894
 800b0f4:	2002e598 	.word	0x2002e598
 800b0f8:	2002f138 	.word	0x2002f138
 800b0fc:	2002e988 	.word	0x2002e988
 800b100:	2002ff94 	.word	0x2002ff94
 800b104:	2002fdfc 	.word	0x2002fdfc
 800b108:	2002ed24 	.word	0x2002ed24
 800b10c:	080328e0 	.word	0x080328e0
 800b110:	2002e5a4 	.word	0x2002e5a4
 800b114:	2002eeb4 	.word	0x2002eeb4
 800b118:	2002e5d4 	.word	0x2002e5d4
 800b11c:	080328e8 	.word	0x080328e8
 800b120:	ffd3d3d3 	.word	0xffd3d3d3
 800b124:	2002e4f0 	.word	0x2002e4f0
 800b128:	080328f0 	.word	0x080328f0
 800b12c:	2002e520 	.word	0x2002e520
 800b130:	2002e89c 	.word	0x2002e89c
 800b134:	080328fc 	.word	0x080328fc
 800b138:	2002ed0c 	.word	0x2002ed0c
 800b13c:	2002ece8 	.word	0x2002ece8
 800b140:	08032904 	.word	0x08032904
 800b144:	ffffa500 	.word	0xffffa500
 800b148:	2002e6cc 	.word	0x2002e6cc
 800b14c:	2002eb28 	.word	0x2002eb28
 800b150:	0803290c 	.word	0x0803290c
 800b154:	2002e53c 	.word	0x2002e53c
 800b158:	08032918 	.word	0x08032918
 800b15c:	2002e568 	.word	0x2002e568
 800b160:	08032924 	.word	0x08032924
 800b164:	2002ed50 	.word	0x2002ed50
 800b168:	2002e7b0 	.word	0x2002e7b0
 800b16c:	2002eec8 	.word	0x2002eec8
 800b170:	2002e590 	.word	0x2002e590
 800b174:	2002e560 	.word	0x2002e560
 800b178:	2002e5a0 	.word	0x2002e5a0
 800b17c:	3c23d70a 	.word	0x3c23d70a
 800b180:	2002f130 	.word	0x2002f130
 800b184:	3a83126f 	.word	0x3a83126f
 800b188:	08018f25 	.word	0x08018f25
 800b18c:	20030058 	.word	0x20030058
 800b190:	2002e58c 	.word	0x2002e58c
	    	GUI_Clear();
 800b194:	f005 f9c2 	bl	801051c <GUI_Clear>
	    	GUI_SetBkColor(GUI_DARKGRAY);
 800b198:	4819      	ldr	r0, [pc, #100]	; (800b200 <GRAPHICS_MainTask+0x3a8>)
 800b19a:	f005 f8af 	bl	80102fc <GUI_SetBkColor>
	    	WM_ShowWindow(SettingsButtonWindow);
 800b19e:	4b19      	ldr	r3, [pc, #100]	; (800b204 <GRAPHICS_MainTask+0x3ac>)
 800b1a0:	6818      	ldr	r0, [r3, #0]
 800b1a2:	f00e f8d3 	bl	801934c <WM_ShowWindow>
	    	WM_ShowWindow(IndicatorWindow1);
 800b1a6:	4b18      	ldr	r3, [pc, #96]	; (800b208 <GRAPHICS_MainTask+0x3b0>)
 800b1a8:	6818      	ldr	r0, [r3, #0]
 800b1aa:	f00e f8cf 	bl	801934c <WM_ShowWindow>
	    	WM_ShowWindow(IndicatorWindow2);
 800b1ae:	4b17      	ldr	r3, [pc, #92]	; (800b20c <GRAPHICS_MainTask+0x3b4>)
 800b1b0:	6818      	ldr	r0, [r3, #0]
 800b1b2:	f00e f8cb 	bl	801934c <WM_ShowWindow>
	    	WM_ShowWindow(IndicatorWindow3);
 800b1b6:	4b16      	ldr	r3, [pc, #88]	; (800b210 <GRAPHICS_MainTask+0x3b8>)
 800b1b8:	6818      	ldr	r0, [r3, #0]
 800b1ba:	f00e f8c7 	bl	801934c <WM_ShowWindow>
	    	WM_ShowWindow(Enc_InputWindow);
 800b1be:	4b15      	ldr	r3, [pc, #84]	; (800b214 <GRAPHICS_MainTask+0x3bc>)
 800b1c0:	6818      	ldr	r0, [r3, #0]
 800b1c2:	f00e f8c3 	bl	801934c <WM_ShowWindow>
	    	WM_ShowWindow(Enc_AttackWindow);
 800b1c6:	4b14      	ldr	r3, [pc, #80]	; (800b218 <GRAPHICS_MainTask+0x3c0>)
 800b1c8:	6818      	ldr	r0, [r3, #0]
 800b1ca:	f00e f8bf 	bl	801934c <WM_ShowWindow>
	    	WM_ShowWindow(Enc_OutputWindow);
 800b1ce:	4b13      	ldr	r3, [pc, #76]	; (800b21c <GRAPHICS_MainTask+0x3c4>)
 800b1d0:	6818      	ldr	r0, [r3, #0]
 800b1d2:	f00e f8bb 	bl	801934c <WM_ShowWindow>
	    	WM_ShowWindow(Enc_DistortionWindow);
 800b1d6:	4b12      	ldr	r3, [pc, #72]	; (800b220 <GRAPHICS_MainTask+0x3c8>)
 800b1d8:	6818      	ldr	r0, [r3, #0]
 800b1da:	f00e f8b7 	bl	801934c <WM_ShowWindow>
	    	WM_ShowWindow(Enc_MakeUpGainWindow);
 800b1de:	4b11      	ldr	r3, [pc, #68]	; (800b224 <GRAPHICS_MainTask+0x3cc>)
 800b1e0:	6818      	ldr	r0, [r3, #0]
 800b1e2:	f00e f8b3 	bl	801934c <WM_ShowWindow>
	    	WM_ShowWindow(Enc_RatioWindow);
 800b1e6:	4b10      	ldr	r3, [pc, #64]	; (800b228 <GRAPHICS_MainTask+0x3d0>)
 800b1e8:	6818      	ldr	r0, [r3, #0]
 800b1ea:	f00e f8af 	bl	801934c <WM_ShowWindow>
	    	WM_ShowWindow(Enc_ReleaseWindow);
 800b1ee:	4b0f      	ldr	r3, [pc, #60]	; (800b22c <GRAPHICS_MainTask+0x3d4>)
 800b1f0:	6818      	ldr	r0, [r3, #0]
 800b1f2:	f00e f8ab 	bl	801934c <WM_ShowWindow>
	    	WM_HideWindow(InfoWindow);
 800b1f6:	4b0e      	ldr	r3, [pc, #56]	; (800b230 <GRAPHICS_MainTask+0x3d8>)
 800b1f8:	6818      	ldr	r0, [r3, #0]
 800b1fa:	f00d fafd 	bl	80187f8 <WM_HideWindow>
 800b1fe:	e708      	b.n	800b012 <GRAPHICS_MainTask+0x1ba>
 800b200:	ff404040 	.word	0xff404040
 800b204:	2002e594 	.word	0x2002e594
 800b208:	2002e514 	.word	0x2002e514
 800b20c:	2002e518 	.word	0x2002e518
 800b210:	2002e6c8 	.word	0x2002e6c8
 800b214:	2002e6e4 	.word	0x2002e6e4
 800b218:	2002eecc 	.word	0x2002eecc
 800b21c:	2002e51c 	.word	0x2002e51c
 800b220:	2002ede8 	.word	0x2002ede8
 800b224:	2002e894 	.word	0x2002e894
 800b228:	2002e598 	.word	0x2002e598
 800b22c:	2002f138 	.word	0x2002f138
 800b230:	2002e5f8 	.word	0x2002e5f8

0800b234 <HAL_UART_RxCpltCallback>:





void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart6){
 800b234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


	UARTRECIVER(); //Recive Data from UART --> UARTDATA
 800b236:	f7f7 f885 	bl	8002344 <UARTRECIVER>

	BSP_LED_Toggle(LED1);
 800b23a:	2000      	movs	r0, #0
 800b23c:	f003 fc6a 	bl	800eb14 <BSP_LED_Toggle>
	TOUCHUPDATE(); //Recive Data from Touchpanel and Encoder
 800b240:	f7f5 fe7a 	bl	8000f38 <TOUCHUPDATE>
	BUFFERVALUEUPDATE(); //create Buffered Values
 800b244:	f7ff f884 	bl	800a350 <BUFFERVALUEUPDATE>


	//Temporary assign pot to variabale

	pots[1] = Encoder1.value;
 800b248:	4b79      	ldr	r3, [pc, #484]	; (800b430 <HAL_UART_RxCpltCallback+0x1fc>)
 800b24a:	ed93 6a00 	vldr	s12, [r3]
 800b24e:	4b79      	ldr	r3, [pc, #484]	; (800b434 <HAL_UART_RxCpltCallback+0x200>)
 800b250:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 800b254:	edc3 7a01 	vstr	s15, [r3, #4]
	pots[2] = Encoder2.value;
 800b258:	4a77      	ldr	r2, [pc, #476]	; (800b438 <HAL_UART_RxCpltCallback+0x204>)
 800b25a:	edd2 6a00 	vldr	s13, [r2]
 800b25e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b262:	edc3 7a02 	vstr	s15, [r3, #8]
	pots[3] = Encoder3.value;
 800b266:	4a75      	ldr	r2, [pc, #468]	; (800b43c <HAL_UART_RxCpltCallback+0x208>)
 800b268:	ed92 7a00 	vldr	s14, [r2]
 800b26c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800b270:	edc3 7a03 	vstr	s15, [r3, #12]
	pots[4] = Encoder4.value;
 800b274:	4a72      	ldr	r2, [pc, #456]	; (800b440 <HAL_UART_RxCpltCallback+0x20c>)
 800b276:	edd2 7a00 	vldr	s15, [r2]
 800b27a:	eefd 5ae7 	vcvt.s32.f32	s11, s15
 800b27e:	edc3 5a04 	vstr	s11, [r3, #16]



	input.value = Encoder1.value;
 800b282:	4b70      	ldr	r3, [pc, #448]	; (800b444 <HAL_UART_RxCpltCallback+0x210>)
 800b284:	ed83 6a00 	vstr	s12, [r3]
	attack.value = 0;
 800b288:	2300      	movs	r3, #0
 800b28a:	4a6f      	ldr	r2, [pc, #444]	; (800b448 <HAL_UART_RxCpltCallback+0x214>)
 800b28c:	6013      	str	r3, [r2, #0]
	release.value = Encoder2.value;
 800b28e:	4a6f      	ldr	r2, [pc, #444]	; (800b44c <HAL_UART_RxCpltCallback+0x218>)
 800b290:	edc2 6a00 	vstr	s13, [r2]

	distortion.value = 0;
 800b294:	4a6e      	ldr	r2, [pc, #440]	; (800b450 <HAL_UART_RxCpltCallback+0x21c>)
 800b296:	6013      	str	r3, [r2, #0]
	makeUpGain.value = Encoder3.value;
 800b298:	4a6e      	ldr	r2, [pc, #440]	; (800b454 <HAL_UART_RxCpltCallback+0x220>)
 800b29a:	ed82 7a00 	vstr	s14, [r2]
	ratio.value = Encoder4.value;
 800b29e:	4a6e      	ldr	r2, [pc, #440]	; (800b458 <HAL_UART_RxCpltCallback+0x224>)
 800b2a0:	edc2 7a00 	vstr	s15, [r2]
	outputgain.value = 0;
 800b2a4:	4a6d      	ldr	r2, [pc, #436]	; (800b45c <HAL_UART_RxCpltCallback+0x228>)
 800b2a6:	6013      	str	r3, [r2, #0]



	gain.value = 0;
 800b2a8:	4a6d      	ldr	r2, [pc, #436]	; (800b460 <HAL_UART_RxCpltCallback+0x22c>)
 800b2aa:	6013      	str	r3, [r2, #0]
	threshold.value = 0;
 800b2ac:	4a6d      	ldr	r2, [pc, #436]	; (800b464 <HAL_UART_RxCpltCallback+0x230>)
 800b2ae:	6013      	str	r3, [r2, #0]





    upcounter = UARTDATA[4]; //Watchdog coming from the MotherEngine is used to identify new Value
 800b2b0:	4b6d      	ldr	r3, [pc, #436]	; (800b468 <HAL_UART_RxCpltCallback+0x234>)
 800b2b2:	791c      	ldrb	r4, [r3, #4]
 800b2b4:	4b6d      	ldr	r3, [pc, #436]	; (800b46c <HAL_UART_RxCpltCallback+0x238>)
 800b2b6:	701c      	strb	r4, [r3, #0]

    //CheckSum check
    checksum = 0;
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	4b6d      	ldr	r3, [pc, #436]	; (800b470 <HAL_UART_RxCpltCallback+0x23c>)
 800b2bc:	701a      	strb	r2, [r3, #0]
    checksum16 = 0;
 800b2be:	4b6d      	ldr	r3, [pc, #436]	; (800b474 <HAL_UART_RxCpltCallback+0x240>)
 800b2c0:	801a      	strh	r2, [r3, #0]
    CheckSumOK = 0;
 800b2c2:	4b6d      	ldr	r3, [pc, #436]	; (800b478 <HAL_UART_RxCpltCallback+0x244>)
 800b2c4:	601a      	str	r2, [r3, #0]

    for(int i = 0; i < 98; i++) {
 800b2c6:	e00a      	b.n	800b2de <HAL_UART_RxCpltCallback+0xaa>
    	checksum += UARTDATA[i];
 800b2c8:	4b67      	ldr	r3, [pc, #412]	; (800b468 <HAL_UART_RxCpltCallback+0x234>)
 800b2ca:	5c9b      	ldrb	r3, [r3, r2]
 800b2cc:	4868      	ldr	r0, [pc, #416]	; (800b470 <HAL_UART_RxCpltCallback+0x23c>)
 800b2ce:	7801      	ldrb	r1, [r0, #0]
 800b2d0:	4419      	add	r1, r3
 800b2d2:	7001      	strb	r1, [r0, #0]
    	checksum16 += UARTDATA[i];
 800b2d4:	4967      	ldr	r1, [pc, #412]	; (800b474 <HAL_UART_RxCpltCallback+0x240>)
 800b2d6:	8808      	ldrh	r0, [r1, #0]
 800b2d8:	4403      	add	r3, r0
 800b2da:	800b      	strh	r3, [r1, #0]
    for(int i = 0; i < 98; i++) {
 800b2dc:	3201      	adds	r2, #1
 800b2de:	2a61      	cmp	r2, #97	; 0x61
 800b2e0:	ddf2      	ble.n	800b2c8 <HAL_UART_RxCpltCallback+0x94>
    }

    if(((checksum16 & 0x00FF) == UARTDATA[98]) && ((checksum16 >> 8) == UARTDATA[99])){
 800b2e2:	4b64      	ldr	r3, [pc, #400]	; (800b474 <HAL_UART_RxCpltCallback+0x240>)
 800b2e4:	881b      	ldrh	r3, [r3, #0]
 800b2e6:	b2d9      	uxtb	r1, r3
 800b2e8:	4a5f      	ldr	r2, [pc, #380]	; (800b468 <HAL_UART_RxCpltCallback+0x234>)
 800b2ea:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 800b2ee:	4291      	cmp	r1, r2
 800b2f0:	d007      	beq.n	800b302 <HAL_UART_RxCpltCallback+0xce>

    }


    //if((upcounter != upcounterLast)){
	if((upcounter != upcounterLast)&&CheckSumOK){
 800b2f2:	4b62      	ldr	r3, [pc, #392]	; (800b47c <HAL_UART_RxCpltCallback+0x248>)
 800b2f4:	781b      	ldrb	r3, [r3, #0]
 800b2f6:	429c      	cmp	r4, r3
 800b2f8:	d002      	beq.n	800b300 <HAL_UART_RxCpltCallback+0xcc>
 800b2fa:	4b5f      	ldr	r3, [pc, #380]	; (800b478 <HAL_UART_RxCpltCallback+0x244>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	b953      	cbnz	r3, 800b316 <HAL_UART_RxCpltCallback+0xe2>





}
 800b300:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(((checksum16 & 0x00FF) == UARTDATA[98]) && ((checksum16 >> 8) == UARTDATA[99])){
 800b302:	4a59      	ldr	r2, [pc, #356]	; (800b468 <HAL_UART_RxCpltCallback+0x234>)
 800b304:	f892 2063 	ldrb.w	r2, [r2, #99]	; 0x63
 800b308:	ebb2 2f13 	cmp.w	r2, r3, lsr #8
 800b30c:	d1f1      	bne.n	800b2f2 <HAL_UART_RxCpltCallback+0xbe>
    	CheckSumOK = 1;
 800b30e:	4b5a      	ldr	r3, [pc, #360]	; (800b478 <HAL_UART_RxCpltCallback+0x244>)
 800b310:	2201      	movs	r2, #1
 800b312:	601a      	str	r2, [r3, #0]
 800b314:	e7ed      	b.n	800b2f2 <HAL_UART_RxCpltCallback+0xbe>
       	 	f_inputLeft_DB = createFloat(12);
 800b316:	200c      	movs	r0, #12
 800b318:	f7f5 fda0 	bl	8000e5c <createFloat>
 800b31c:	4b58      	ldr	r3, [pc, #352]	; (800b480 <HAL_UART_RxCpltCallback+0x24c>)
 800b31e:	ed83 0a00 	vstr	s0, [r3]
			f_inputRight_DB = createFloat(16);
 800b322:	2010      	movs	r0, #16
 800b324:	f7f5 fd9a 	bl	8000e5c <createFloat>
 800b328:	4b56      	ldr	r3, [pc, #344]	; (800b484 <HAL_UART_RxCpltCallback+0x250>)
 800b32a:	ed83 0a00 	vstr	s0, [r3]
			f_VCALeft_DB = createFloat(20);
 800b32e:	2014      	movs	r0, #20
 800b330:	f7f5 fd94 	bl	8000e5c <createFloat>
 800b334:	4b54      	ldr	r3, [pc, #336]	; (800b488 <HAL_UART_RxCpltCallback+0x254>)
 800b336:	ed83 0a00 	vstr	s0, [r3]
			f_VCARight_DB = createFloat(24);
 800b33a:	2018      	movs	r0, #24
 800b33c:	f7f5 fd8e 	bl	8000e5c <createFloat>
 800b340:	4b52      	ldr	r3, [pc, #328]	; (800b48c <HAL_UART_RxCpltCallback+0x258>)
 800b342:	ed83 0a00 	vstr	s0, [r3]
			f_outputLeft_DB = createFloat(28);
 800b346:	201c      	movs	r0, #28
 800b348:	f7f5 fd88 	bl	8000e5c <createFloat>
 800b34c:	4b50      	ldr	r3, [pc, #320]	; (800b490 <HAL_UART_RxCpltCallback+0x25c>)
 800b34e:	ed83 0a00 	vstr	s0, [r3]
			f_outputRight_DB = createFloat(32);
 800b352:	2020      	movs	r0, #32
 800b354:	f7f5 fd82 	bl	8000e5c <createFloat>
 800b358:	4b4e      	ldr	r3, [pc, #312]	; (800b494 <HAL_UART_RxCpltCallback+0x260>)
 800b35a:	ed83 0a00 	vstr	s0, [r3]
			f_inputLeft_DB_RMS = createFloat(36);
 800b35e:	2024      	movs	r0, #36	; 0x24
 800b360:	f7f5 fd7c 	bl	8000e5c <createFloat>
 800b364:	4b4c      	ldr	r3, [pc, #304]	; (800b498 <HAL_UART_RxCpltCallback+0x264>)
 800b366:	ed83 0a00 	vstr	s0, [r3]
			f_inputRight_DB_RMS = createFloat(40);
 800b36a:	2028      	movs	r0, #40	; 0x28
 800b36c:	f7f5 fd76 	bl	8000e5c <createFloat>
 800b370:	4b4a      	ldr	r3, [pc, #296]	; (800b49c <HAL_UART_RxCpltCallback+0x268>)
 800b372:	ed83 0a00 	vstr	s0, [r3]
			f_VCALeft_DB_RMS = createFloat(44);
 800b376:	202c      	movs	r0, #44	; 0x2c
 800b378:	f7f5 fd70 	bl	8000e5c <createFloat>
 800b37c:	4b48      	ldr	r3, [pc, #288]	; (800b4a0 <HAL_UART_RxCpltCallback+0x26c>)
 800b37e:	ed83 0a00 	vstr	s0, [r3]
			f_VCARight_DB_RMS = createFloat(48);
 800b382:	2030      	movs	r0, #48	; 0x30
 800b384:	f7f5 fd6a 	bl	8000e5c <createFloat>
 800b388:	4b46      	ldr	r3, [pc, #280]	; (800b4a4 <HAL_UART_RxCpltCallback+0x270>)
 800b38a:	ed83 0a00 	vstr	s0, [r3]
			f_outputLeft_DB_RMS = createFloat(52);
 800b38e:	2034      	movs	r0, #52	; 0x34
 800b390:	f7f5 fd64 	bl	8000e5c <createFloat>
 800b394:	4b44      	ldr	r3, [pc, #272]	; (800b4a8 <HAL_UART_RxCpltCallback+0x274>)
 800b396:	ed83 0a00 	vstr	s0, [r3]
			f_outputRight_DB_RMS = createFloat(56);
 800b39a:	2038      	movs	r0, #56	; 0x38
 800b39c:	f7f5 fd5e 	bl	8000e5c <createFloat>
 800b3a0:	4b42      	ldr	r3, [pc, #264]	; (800b4ac <HAL_UART_RxCpltCallback+0x278>)
 800b3a2:	ed83 0a00 	vstr	s0, [r3]
		i_inputLeft_Waveform = UARTDATA[6];
 800b3a6:	4b30      	ldr	r3, [pc, #192]	; (800b468 <HAL_UART_RxCpltCallback+0x234>)
 800b3a8:	799d      	ldrb	r5, [r3, #6]
 800b3aa:	4a41      	ldr	r2, [pc, #260]	; (800b4b0 <HAL_UART_RxCpltCallback+0x27c>)
 800b3ac:	6015      	str	r5, [r2, #0]
		i_inputRight_Waveform = UARTDATA[7];
 800b3ae:	79dc      	ldrb	r4, [r3, #7]
 800b3b0:	4a40      	ldr	r2, [pc, #256]	; (800b4b4 <HAL_UART_RxCpltCallback+0x280>)
 800b3b2:	6014      	str	r4, [r2, #0]
		i_VCALeft_Waveform = UARTDATA[8];
 800b3b4:	f893 c008 	ldrb.w	ip, [r3, #8]
		i_VCALeft_Waveform = UARTDATA[9];
 800b3b8:	7a5f      	ldrb	r7, [r3, #9]
 800b3ba:	4a3f      	ldr	r2, [pc, #252]	; (800b4b8 <HAL_UART_RxCpltCallback+0x284>)
 800b3bc:	6017      	str	r7, [r2, #0]
		i_outputLeft_Waveform = UARTDATA[10];
 800b3be:	7a9e      	ldrb	r6, [r3, #10]
 800b3c0:	4a3e      	ldr	r2, [pc, #248]	; (800b4bc <HAL_UART_RxCpltCallback+0x288>)
 800b3c2:	6016      	str	r6, [r2, #0]
		i_outputRight_Waveform = UARTDATA[11];
 800b3c4:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800b3c8:	4b3d      	ldr	r3, [pc, #244]	; (800b4c0 <HAL_UART_RxCpltCallback+0x28c>)
 800b3ca:	f8c3 e000 	str.w	lr, [r3]
		inputLeftStream[399] = i_inputLeft_Waveform;
 800b3ce:	4b3d      	ldr	r3, [pc, #244]	; (800b4c4 <HAL_UART_RxCpltCallback+0x290>)
 800b3d0:	f883 518f 	strb.w	r5, [r3, #399]	; 0x18f
		for(int i=0; i<399;i++){inputLeftStream[i] = inputLeftStream[i+1];}
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	e004      	b.n	800b3e2 <HAL_UART_RxCpltCallback+0x1ae>
 800b3d8:	1c5a      	adds	r2, r3, #1
 800b3da:	493a      	ldr	r1, [pc, #232]	; (800b4c4 <HAL_UART_RxCpltCallback+0x290>)
 800b3dc:	5c88      	ldrb	r0, [r1, r2]
 800b3de:	54c8      	strb	r0, [r1, r3]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 800b3e6:	ddf7      	ble.n	800b3d8 <HAL_UART_RxCpltCallback+0x1a4>
		inputRightStream[399] = i_inputRight_Waveform;
 800b3e8:	4b37      	ldr	r3, [pc, #220]	; (800b4c8 <HAL_UART_RxCpltCallback+0x294>)
 800b3ea:	f883 418f 	strb.w	r4, [r3, #399]	; 0x18f
		for(int i=0; i<399;i++){inputRightStream[i] = inputRightStream[i+1];}
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	e004      	b.n	800b3fc <HAL_UART_RxCpltCallback+0x1c8>
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	4934      	ldr	r1, [pc, #208]	; (800b4c8 <HAL_UART_RxCpltCallback+0x294>)
 800b3f6:	5c88      	ldrb	r0, [r1, r2]
 800b3f8:	54c8      	strb	r0, [r1, r3]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	f5b3 7fc7 	cmp.w	r3, #398	; 0x18e
 800b400:	ddf7      	ble.n	800b3f2 <HAL_UART_RxCpltCallback+0x1be>
		i_inputLeft_Indicator = UARTDATA[6];
 800b402:	4b32      	ldr	r3, [pc, #200]	; (800b4cc <HAL_UART_RxCpltCallback+0x298>)
 800b404:	601d      	str	r5, [r3, #0]
		i_inputRight_Indicator = UARTDATA[7];
 800b406:	4b32      	ldr	r3, [pc, #200]	; (800b4d0 <HAL_UART_RxCpltCallback+0x29c>)
 800b408:	601c      	str	r4, [r3, #0]
		i_VCALeft_Indicator = UARTDATA[8];
 800b40a:	4b32      	ldr	r3, [pc, #200]	; (800b4d4 <HAL_UART_RxCpltCallback+0x2a0>)
 800b40c:	f8c3 c000 	str.w	ip, [r3]
		i_VCARight_Indicator = UARTDATA[9];
 800b410:	4b31      	ldr	r3, [pc, #196]	; (800b4d8 <HAL_UART_RxCpltCallback+0x2a4>)
 800b412:	601f      	str	r7, [r3, #0]
		i_outputLeft_Indicator = UARTDATA[10];
 800b414:	4b31      	ldr	r3, [pc, #196]	; (800b4dc <HAL_UART_RxCpltCallback+0x2a8>)
 800b416:	601e      	str	r6, [r3, #0]
		i_outputRight_Indicator = UARTDATA[11];
 800b418:	4b31      	ldr	r3, [pc, #196]	; (800b4e0 <HAL_UART_RxCpltCallback+0x2ac>)
 800b41a:	f8c3 e000 	str.w	lr, [r3]
	reset = 0;
 800b41e:	4b31      	ldr	r3, [pc, #196]	; (800b4e4 <HAL_UART_RxCpltCallback+0x2b0>)
 800b420:	2200      	movs	r2, #0
 800b422:	601a      	str	r2, [r3, #0]
	upcounterLast = upcounter;
 800b424:	4b11      	ldr	r3, [pc, #68]	; (800b46c <HAL_UART_RxCpltCallback+0x238>)
 800b426:	781a      	ldrb	r2, [r3, #0]
 800b428:	4b14      	ldr	r3, [pc, #80]	; (800b47c <HAL_UART_RxCpltCallback+0x248>)
 800b42a:	701a      	strb	r2, [r3, #0]
}
 800b42c:	e768      	b.n	800b300 <HAL_UART_RxCpltCallback+0xcc>
 800b42e:	bf00      	nop
 800b430:	2002eeb4 	.word	0x2002eeb4
 800b434:	2002e7b0 	.word	0x2002e7b0
 800b438:	2002ed0c 	.word	0x2002ed0c
 800b43c:	2002e520 	.word	0x2002e520
 800b440:	2002e6cc 	.word	0x2002e6cc
 800b444:	2002e5a4 	.word	0x2002e5a4
 800b448:	2002e5d0 	.word	0x2002e5d0
 800b44c:	2002e898 	.word	0x2002e898
 800b450:	2002eb24 	.word	0x2002eb24
 800b454:	2002e4ec 	.word	0x2002e4ec
 800b458:	2002ece4 	.word	0x2002ece4
 800b45c:	2002e564 	.word	0x2002e564
 800b460:	2002ed20 	.word	0x2002ed20
 800b464:	2002e538 	.word	0x2002e538
 800b468:	2002e7cc 	.word	0x2002e7cc
 800b46c:	2002eb4c 	.word	0x2002eb4c
 800b470:	20030622 	.word	0x20030622
 800b474:	20030620 	.word	0x20030620
 800b478:	2000881c 	.word	0x2000881c
 800b47c:	2002e59c 	.word	0x2002e59c
 800b480:	2002fa20 	.word	0x2002fa20
 800b484:	2002fa3c 	.word	0x2002fa3c
 800b488:	2002f858 	.word	0x2002f858
 800b48c:	2002fb10 	.word	0x2002fb10
 800b490:	2002f85c 	.word	0x2002f85c
 800b494:	2002fa14 	.word	0x2002fa14
 800b498:	2002f864 	.word	0x2002f864
 800b49c:	2002f870 	.word	0x2002f870
 800b4a0:	2002fb0c 	.word	0x2002fb0c
 800b4a4:	2002f150 	.word	0x2002f150
 800b4a8:	2002f508 	.word	0x2002f508
 800b4ac:	2002f164 	.word	0x2002f164
 800b4b0:	2002fa1c 	.word	0x2002fa1c
 800b4b4:	2002f854 	.word	0x2002f854
 800b4b8:	2002f158 	.word	0x2002f158
 800b4bc:	2002f364 	.word	0x2002f364
 800b4c0:	2002f50c 	.word	0x2002f50c
 800b4c4:	2002f520 	.word	0x2002f520
 800b4c8:	2002f1c0 	.word	0x2002f1c0
 800b4cc:	2002f148 	.word	0x2002f148
 800b4d0:	2002f868 	.word	0x2002f868
 800b4d4:	2002fb28 	.word	0x2002fb28
 800b4d8:	2002f504 	.word	0x2002f504
 800b4dc:	2002f154 	.word	0x2002f154
 800b4e0:	2002fb18 	.word	0x2002fb18
 800b4e4:	2002e58c 	.word	0x2002e58c

0800b4e8 <_cbDialog>:
#include "GuiElements/AudioMeter.h"
#include "GuiElements/Controlls.h"

static int i = 0;

static void _cbDialog(WM_MESSAGE * pMsg) {
 800b4e8:	b508      	push	{r3, lr}


  switch (pMsg->MsgId) {
 800b4ea:	6803      	ldr	r3, [r0, #0]
 800b4ec:	2b0f      	cmp	r3, #15
 800b4ee:	d002      	beq.n	800b4f6 <_cbDialog+0xe>
	  	GUI_SetFont(&GUI_Font32B_1);
	  	GUI_DispStringAt("Version: 1.2",250,350);
	  	GUI_DispStringAt("IP Adress: 192.168.1.205",250,380);
    break;
  default:
    WM_DefaultProc(pMsg);
 800b4f0:	f00d f8a4 	bl	801863c <WM_DefaultProc>
  }



}
 800b4f4:	bd08      	pop	{r3, pc}
	  	GUI_SetBkColor(GUI_WHITE);
 800b4f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4fa:	f004 feff 	bl	80102fc <GUI_SetBkColor>
	  	GUI_DrawBitmap(&bmAURORA_BACKSCREEN, 0, 0);
 800b4fe:	2200      	movs	r2, #0
 800b500:	4611      	mov	r1, r2
 800b502:	480b      	ldr	r0, [pc, #44]	; (800b530 <_cbDialog+0x48>)
 800b504:	f005 fd3a 	bl	8010f7c <GUI_DrawBitmap>
	  	GUI_SetColor( GUI_BLACK );
 800b508:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800b50c:	f004 ff02 	bl	8010314 <GUI_SetColor>
	  	GUI_SetFont(&GUI_Font32B_1);
 800b510:	4808      	ldr	r0, [pc, #32]	; (800b534 <_cbDialog+0x4c>)
 800b512:	f004 ff61 	bl	80103d8 <GUI_SetFont>
	  	GUI_DispStringAt("Version: 1.2",250,350);
 800b516:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b51a:	21fa      	movs	r1, #250	; 0xfa
 800b51c:	4806      	ldr	r0, [pc, #24]	; (800b538 <_cbDialog+0x50>)
 800b51e:	f005 fc25 	bl	8010d6c <GUI_DispStringAt>
	  	GUI_DispStringAt("IP Adress: 192.168.1.205",250,380);
 800b522:	f44f 72be 	mov.w	r2, #380	; 0x17c
 800b526:	21fa      	movs	r1, #250	; 0xfa
 800b528:	4804      	ldr	r0, [pc, #16]	; (800b53c <_cbDialog+0x54>)
 800b52a:	f005 fc1f 	bl	8010d6c <GUI_DispStringAt>
    break;
 800b52e:	e7e1      	b.n	800b4f4 <_cbDialog+0xc>
 800b530:	0801ef4c 	.word	0x0801ef4c
 800b534:	08028448 	.word	0x08028448
 800b538:	0803292c 	.word	0x0803292c
 800b53c:	0803293c 	.word	0x0803293c

0800b540 <CreateInfoWindow>:


WM_HWIN CreateInfoWindow(void) {
 800b540:	b510      	push	{r4, lr}
 800b542:	b084      	sub	sp, #16

  WM_HWIN Window;

  Window = WM_CreateWindow(0, 0, 800, 480,WM_CF_SHOW , _cbDialog, 0);
 800b544:	2000      	movs	r0, #0
 800b546:	9002      	str	r0, [sp, #8]
 800b548:	4b08      	ldr	r3, [pc, #32]	; (800b56c <CreateInfoWindow+0x2c>)
 800b54a:	9301      	str	r3, [sp, #4]
 800b54c:	2302      	movs	r3, #2
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800b554:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b558:	4601      	mov	r1, r0
 800b55a:	f00c faf7 	bl	8017b4c <WM_CreateWindow>
 800b55e:	4604      	mov	r4, r0

  WM_MULTIBUF_Enable(1);
 800b560:	2001      	movs	r0, #1
 800b562:	f00d ff65 	bl	8019430 <WM_MULTIBUF_Enable>

  return Window;
}
 800b566:	4620      	mov	r0, r4
 800b568:	b004      	add	sp, #16
 800b56a:	bd10      	pop	{r4, pc}
 800b56c:	0800b4e9 	.word	0x0800b4e9

0800b570 <_cbDialog>:
int y=-348;
//int y=-52;



static void _cbDialog(WM_MESSAGE * pMsg) {
 800b570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b574:	ed2d 8b02 	vpush	{d8}
 800b578:	4604      	mov	r4, r0

if(Enc_AttackSelected+
 800b57a:	4b78      	ldr	r3, [pc, #480]	; (800b75c <_cbDialog+0x1ec>)
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	4a78      	ldr	r2, [pc, #480]	; (800b760 <_cbDialog+0x1f0>)
 800b580:	6812      	ldr	r2, [r2, #0]
 800b582:	4413      	add	r3, r2
	Enc_ReleaseSelected+
 800b584:	4a77      	ldr	r2, [pc, #476]	; (800b764 <_cbDialog+0x1f4>)
 800b586:	6812      	ldr	r2, [r2, #0]
 800b588:	4413      	add	r3, r2
	Enc_InputSelected+
 800b58a:	4a77      	ldr	r2, [pc, #476]	; (800b768 <_cbDialog+0x1f8>)
 800b58c:	6812      	ldr	r2, [r2, #0]
 800b58e:	4413      	add	r3, r2
	Enc_DistortionSelected+
 800b590:	4a76      	ldr	r2, [pc, #472]	; (800b76c <_cbDialog+0x1fc>)
 800b592:	6812      	ldr	r2, [r2, #0]
 800b594:	4413      	add	r3, r2
	Enc_MakeUpGainSelected+
 800b596:	4a76      	ldr	r2, [pc, #472]	; (800b770 <_cbDialog+0x200>)
 800b598:	6812      	ldr	r2, [r2, #0]
 800b59a:	4413      	add	r3, r2
	Enc_OutputSelected+
 800b59c:	4a75      	ldr	r2, [pc, #468]	; (800b774 <_cbDialog+0x204>)
 800b59e:	6812      	ldr	r2, [r2, #0]
if(Enc_AttackSelected+
 800b5a0:	42d3      	cmn	r3, r2
 800b5a2:	f040 809e 	bne.w	800b6e2 <_cbDialog+0x172>
	Enc_RatioSelected == 0){
	nothingSelected = 1;
 800b5a6:	4b74      	ldr	r3, [pc, #464]	; (800b778 <_cbDialog+0x208>)
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	601a      	str	r2, [r3, #0]



//############################################################//

	WM_Invalidate(Enc_InputWindow);
 800b5ac:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 800b79c <_cbDialog+0x22c>
 800b5b0:	f8db 0000 	ldr.w	r0, [fp]
 800b5b4:	f00c f980 	bl	80178b8 <WM_InvalidateWindow>
	WM_Invalidate(Enc_AttackWindow);
 800b5b8:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 800b7a0 <_cbDialog+0x230>
 800b5bc:	f8da 0000 	ldr.w	r0, [sl]
 800b5c0:	f00c f97a 	bl	80178b8 <WM_InvalidateWindow>
	WM_Invalidate(Enc_OutputWindow);
 800b5c4:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 800b7a4 <_cbDialog+0x234>
 800b5c8:	f8d9 0000 	ldr.w	r0, [r9]
 800b5cc:	f00c f974 	bl	80178b8 <WM_InvalidateWindow>
	WM_Invalidate(Enc_DistortionWindow);
 800b5d0:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 800b7a8 <_cbDialog+0x238>
 800b5d4:	f8d8 0000 	ldr.w	r0, [r8]
 800b5d8:	f00c f96e 	bl	80178b8 <WM_InvalidateWindow>
	WM_Invalidate(Enc_MakeUpGainWindow);
 800b5dc:	4f67      	ldr	r7, [pc, #412]	; (800b77c <_cbDialog+0x20c>)
 800b5de:	6838      	ldr	r0, [r7, #0]
 800b5e0:	f00c f96a 	bl	80178b8 <WM_InvalidateWindow>
	WM_Invalidate(Enc_RatioWindow);
 800b5e4:	4b66      	ldr	r3, [pc, #408]	; (800b780 <_cbDialog+0x210>)
 800b5e6:	6818      	ldr	r0, [r3, #0]
 800b5e8:	f00c f966 	bl	80178b8 <WM_InvalidateWindow>
	WM_Invalidate(Enc_ReleaseWindow);
 800b5ec:	4a65      	ldr	r2, [pc, #404]	; (800b784 <_cbDialog+0x214>)
 800b5ee:	6810      	ldr	r0, [r2, #0]
 800b5f0:	f00c f962 	bl	80178b8 <WM_InvalidateWindow>

//############################################################//
	pMsg->MsgId = WM_USER;
 800b5f4:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800b5f8:	6026      	str	r6, [r4, #0]
	pMsg->Data.v = 0; //MEANS update color & value
 800b5fa:	2500      	movs	r5, #0
 800b5fc:	60e5      	str	r5, [r4, #12]
 	WM_SendMessage (Enc_InputWindow, pMsg);
 800b5fe:	4621      	mov	r1, r4
 800b600:	f8db 0000 	ldr.w	r0, [fp]
 800b604:	f00c f92e 	bl	8017864 <WM_SendMessage>
//############################################################//
 	pMsg->MsgId = WM_USER;
 800b608:	6026      	str	r6, [r4, #0]
 	pMsg->Data.v = 0; //MEANS update color & value
 800b60a:	60e5      	str	r5, [r4, #12]
 	WM_SendMessage (Enc_AttackWindow, pMsg);
 800b60c:	4621      	mov	r1, r4
 800b60e:	f8da 0000 	ldr.w	r0, [sl]
 800b612:	f00c f927 	bl	8017864 <WM_SendMessage>
//############################################################//
 	pMsg->MsgId = WM_USER;
 800b616:	6026      	str	r6, [r4, #0]
 	pMsg->Data.v = 0; //MEANS update color & value
 800b618:	60e5      	str	r5, [r4, #12]
 	WM_SendMessage (Enc_OutputWindow, pMsg);
 800b61a:	4621      	mov	r1, r4
 800b61c:	f8d9 0000 	ldr.w	r0, [r9]
 800b620:	f00c f920 	bl	8017864 <WM_SendMessage>
//############################################################//
 	pMsg->MsgId = WM_USER;
 800b624:	6026      	str	r6, [r4, #0]
 	pMsg->Data.v = 0; //MEANS update color & value
 800b626:	60e5      	str	r5, [r4, #12]
 	WM_SendMessage (Enc_DistortionWindow, pMsg);
 800b628:	4621      	mov	r1, r4
 800b62a:	f8d8 0000 	ldr.w	r0, [r8]
 800b62e:	f00c f919 	bl	8017864 <WM_SendMessage>
//############################################################//
 	pMsg->MsgId = WM_USER;
 800b632:	6026      	str	r6, [r4, #0]
 	pMsg->Data.v = 0; //MEANS update color & value
 800b634:	60e5      	str	r5, [r4, #12]
 	WM_SendMessage (Enc_MakeUpGainWindow, pMsg);
 800b636:	4621      	mov	r1, r4
 800b638:	6838      	ldr	r0, [r7, #0]
 800b63a:	f00c f913 	bl	8017864 <WM_SendMessage>
//############################################################//
 	pMsg->MsgId = WM_USER;
 800b63e:	6026      	str	r6, [r4, #0]
 	pMsg->Data.v = 0; //MEANS update color & value
 800b640:	60e5      	str	r5, [r4, #12]
 	WM_SendMessage (Enc_RatioWindow, pMsg);
 800b642:	4621      	mov	r1, r4
 800b644:	4b4e      	ldr	r3, [pc, #312]	; (800b780 <_cbDialog+0x210>)
 800b646:	6818      	ldr	r0, [r3, #0]
 800b648:	f00c f90c 	bl	8017864 <WM_SendMessage>
//############################################################//
 	pMsg->MsgId = WM_USER;
 800b64c:	6026      	str	r6, [r4, #0]
 	pMsg->Data.v = 0; //MEANS update color & value
 800b64e:	60e5      	str	r5, [r4, #12]
 	WM_SendMessage (Enc_ReleaseWindow, pMsg);
 800b650:	4621      	mov	r1, r4
 800b652:	4a4c      	ldr	r2, [pc, #304]	; (800b784 <_cbDialog+0x214>)
 800b654:	6810      	ldr	r0, [r2, #0]
 800b656:	f00c f905 	bl	8017864 <WM_SendMessage>
//############################################################//

	  GUI_DCACHE_Clear(1);
 800b65a:	2001      	movs	r0, #1
 800b65c:	f005 f86e 	bl	801073c <GUI_DCACHE_Clear>
	  GUI_Clear();
 800b660:	f004 ff5c 	bl	801051c <GUI_Clear>
	  GUI_SetColor( GUI_LIGHTGRAY );
 800b664:	4848      	ldr	r0, [pc, #288]	; (800b788 <_cbDialog+0x218>)
 800b666:	f004 fe55 	bl	8010314 <GUI_SetColor>



	  switch (pMsg->MsgId) {
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	2b0f      	cmp	r3, #15
 800b66e:	d13c      	bne.n	800b6ea <_cbDialog+0x17a>





	  	GUI_SetPenSize   (25);
 800b670:	2019      	movs	r0, #25
 800b672:	f004 fdf5 	bl	8010260 <GUI_SetPenSize>
	  	GUI_SetColor(Encoder1.Color);
 800b676:	4c45      	ldr	r4, [pc, #276]	; (800b78c <_cbDialog+0x21c>)
 800b678:	6920      	ldr	r0, [r4, #16]
 800b67a:	f004 fe4b 	bl	8010314 <GUI_SetColor>
	  	if(Encoder1.buttonState){GUI_DrawPoint(50, 440);}
 800b67e:	68a3      	ldr	r3, [r4, #8]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d136      	bne.n	800b6f2 <_cbDialog+0x182>
	  	GUI_SetColor(Encoder2.Color);
 800b684:	4c42      	ldr	r4, [pc, #264]	; (800b790 <_cbDialog+0x220>)
 800b686:	6920      	ldr	r0, [r4, #16]
 800b688:	f004 fe44 	bl	8010314 <GUI_SetColor>
	  	if(Encoder2.buttonState){GUI_DrawPoint(80, 440);}
 800b68c:	68a3      	ldr	r3, [r4, #8]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d135      	bne.n	800b6fe <_cbDialog+0x18e>
	  	GUI_SetColor(Encoder3.Color);
 800b692:	4c40      	ldr	r4, [pc, #256]	; (800b794 <_cbDialog+0x224>)
 800b694:	6920      	ldr	r0, [r4, #16]
 800b696:	f004 fe3d 	bl	8010314 <GUI_SetColor>
	  	if(Encoder3.buttonState){GUI_DrawPoint(110, 440);}
 800b69a:	68a3      	ldr	r3, [r4, #8]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d134      	bne.n	800b70a <_cbDialog+0x19a>
	  	GUI_SetColor(Encoder4.Color);
 800b6a0:	4c3d      	ldr	r4, [pc, #244]	; (800b798 <_cbDialog+0x228>)
 800b6a2:	6920      	ldr	r0, [r4, #16]
 800b6a4:	f004 fe36 	bl	8010314 <GUI_SetColor>
	  	if(Encoder4.buttonState){GUI_DrawPoint(140, 440);}
 800b6a8:	68a3      	ldr	r3, [r4, #8]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d133      	bne.n	800b716 <_cbDialog+0x1a6>

	  	GUI_SetColor(Encoder1.Color);
 800b6ae:	4c37      	ldr	r4, [pc, #220]	; (800b78c <_cbDialog+0x21c>)
 800b6b0:	6920      	ldr	r0, [r4, #16]
 800b6b2:	f004 fe2f 	bl	8010314 <GUI_SetColor>
	  	if(Encoder1.doubleclickEvent){GUI_DrawPoint(650, 450);}
 800b6b6:	68e3      	ldr	r3, [r4, #12]
 800b6b8:	bb9b      	cbnz	r3, 800b722 <_cbDialog+0x1b2>
	  	GUI_SetColor(Encoder2.Color);
 800b6ba:	4c35      	ldr	r4, [pc, #212]	; (800b790 <_cbDialog+0x220>)
 800b6bc:	6920      	ldr	r0, [r4, #16]
 800b6be:	f004 fe29 	bl	8010314 <GUI_SetColor>
	  	if(Encoder2.doubleclickEvent){GUI_DrawPoint(680, 450);}
 800b6c2:	68e3      	ldr	r3, [r4, #12]
 800b6c4:	bba3      	cbnz	r3, 800b730 <_cbDialog+0x1c0>
		GUI_SetColor(Encoder3.Color);
 800b6c6:	4c33      	ldr	r4, [pc, #204]	; (800b794 <_cbDialog+0x224>)
 800b6c8:	6920      	ldr	r0, [r4, #16]
 800b6ca:	f004 fe23 	bl	8010314 <GUI_SetColor>
		if(Encoder3.doubleclickEvent){GUI_DrawPoint(710, 450);}
 800b6ce:	68e3      	ldr	r3, [r4, #12]
 800b6d0:	bbab      	cbnz	r3, 800b73e <_cbDialog+0x1ce>
	  	GUI_SetColor(Encoder4.Color);
 800b6d2:	4c31      	ldr	r4, [pc, #196]	; (800b798 <_cbDialog+0x228>)
 800b6d4:	6920      	ldr	r0, [r4, #16]
 800b6d6:	f004 fe1d 	bl	8010314 <GUI_SetColor>
	  	if(Encoder4.doubleclickEvent){GUI_DrawPoint(740, 450);}
 800b6da:	68e3      	ldr	r3, [r4, #12]
 800b6dc:	bbb3      	cbnz	r3, 800b74c <_cbDialog+0x1dc>

  //////////////////////////DRAWING WAVEFORM////////////////////////
   	 for(int i=200; i<400;i++){
 800b6de:	23c8      	movs	r3, #200	; 0xc8
 800b6e0:	e065      	b.n	800b7ae <_cbDialog+0x23e>
	nothingSelected = 0;
 800b6e2:	4b25      	ldr	r3, [pc, #148]	; (800b778 <_cbDialog+0x208>)
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	601a      	str	r2, [r3, #0]
 800b6e8:	e760      	b.n	800b5ac <_cbDialog+0x3c>
	  		  WM_DefaultProc(pMsg);
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	f00c ffa6 	bl	801863c <WM_DefaultProc>
 800b6f0:	e7be      	b.n	800b670 <_cbDialog+0x100>
	  	if(Encoder1.buttonState){GUI_DrawPoint(50, 440);}
 800b6f2:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800b6f6:	2032      	movs	r0, #50	; 0x32
 800b6f8:	f005 fdc2 	bl	8011280 <GUI_DrawPoint>
 800b6fc:	e7c2      	b.n	800b684 <_cbDialog+0x114>
	  	if(Encoder2.buttonState){GUI_DrawPoint(80, 440);}
 800b6fe:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800b702:	2050      	movs	r0, #80	; 0x50
 800b704:	f005 fdbc 	bl	8011280 <GUI_DrawPoint>
 800b708:	e7c3      	b.n	800b692 <_cbDialog+0x122>
	  	if(Encoder3.buttonState){GUI_DrawPoint(110, 440);}
 800b70a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800b70e:	206e      	movs	r0, #110	; 0x6e
 800b710:	f005 fdb6 	bl	8011280 <GUI_DrawPoint>
 800b714:	e7c4      	b.n	800b6a0 <_cbDialog+0x130>
	  	if(Encoder4.buttonState){GUI_DrawPoint(140, 440);}
 800b716:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800b71a:	208c      	movs	r0, #140	; 0x8c
 800b71c:	f005 fdb0 	bl	8011280 <GUI_DrawPoint>
 800b720:	e7c5      	b.n	800b6ae <_cbDialog+0x13e>
	  	if(Encoder1.doubleclickEvent){GUI_DrawPoint(650, 450);}
 800b722:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800b726:	f240 208a 	movw	r0, #650	; 0x28a
 800b72a:	f005 fda9 	bl	8011280 <GUI_DrawPoint>
 800b72e:	e7c4      	b.n	800b6ba <_cbDialog+0x14a>
	  	if(Encoder2.doubleclickEvent){GUI_DrawPoint(680, 450);}
 800b730:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800b734:	f44f 702a 	mov.w	r0, #680	; 0x2a8
 800b738:	f005 fda2 	bl	8011280 <GUI_DrawPoint>
 800b73c:	e7c3      	b.n	800b6c6 <_cbDialog+0x156>
		if(Encoder3.doubleclickEvent){GUI_DrawPoint(710, 450);}
 800b73e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800b742:	f240 20c6 	movw	r0, #710	; 0x2c6
 800b746:	f005 fd9b 	bl	8011280 <GUI_DrawPoint>
 800b74a:	e7c2      	b.n	800b6d2 <_cbDialog+0x162>
	  	if(Encoder4.doubleclickEvent){GUI_DrawPoint(740, 450);}
 800b74c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800b750:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 800b754:	f005 fd94 	bl	8011280 <GUI_DrawPoint>
 800b758:	e7c1      	b.n	800b6de <_cbDialog+0x16e>
 800b75a:	bf00      	nop
 800b75c:	2000883c 	.word	0x2000883c
 800b760:	200088ac 	.word	0x200088ac
 800b764:	20008864 	.word	0x20008864
 800b768:	20008850 	.word	0x20008850
 800b76c:	20008874 	.word	0x20008874
 800b770:	20008888 	.word	0x20008888
 800b774:	2000889c 	.word	0x2000889c
 800b778:	2002e534 	.word	0x2002e534
 800b77c:	2002e894 	.word	0x2002e894
 800b780:	2002e598 	.word	0x2002e598
 800b784:	2002f138 	.word	0x2002f138
 800b788:	ffd3d3d3 	.word	0xffd3d3d3
 800b78c:	2002eeb4 	.word	0x2002eeb4
 800b790:	2002ed0c 	.word	0x2002ed0c
 800b794:	2002e520 	.word	0x2002e520
 800b798:	2002e6cc 	.word	0x2002e6cc
 800b79c:	2002e6e4 	.word	0x2002e6e4
 800b7a0:	2002eecc 	.word	0x2002eecc
 800b7a4:	2002e51c 	.word	0x2002e51c
 800b7a8:	2002ede8 	.word	0x2002ede8
   	 for(int i=200; i<400;i++){
 800b7ac:	3301      	adds	r3, #1
 800b7ae:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800b7b2:	dbfb      	blt.n	800b7ac <_cbDialog+0x23c>




//INPUT INDICATOR///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
GUI_SetColor(GUI_LIGHTGRAY);
 800b7b4:	4cea      	ldr	r4, [pc, #936]	; (800bb60 <_cbDialog+0x5f0>)
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f004 fdac 	bl	8010314 <GUI_SetColor>
GUI_SetFont(&GUI_Font32_1);
 800b7bc:	4fe9      	ldr	r7, [pc, #932]	; (800bb64 <_cbDialog+0x5f4>)
 800b7be:	4638      	mov	r0, r7
 800b7c0:	f004 fe0a 	bl	80103d8 <GUI_SetFont>
GUI_DispStringAt("input", 222, 440);
 800b7c4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b7c8:	21de      	movs	r1, #222	; 0xde
 800b7ca:	48e7      	ldr	r0, [pc, #924]	; (800bb68 <_cbDialog+0x5f8>)
 800b7cc:	f005 face 	bl	8010d6c <GUI_DispStringAt>

GUI_SetFont(&GUI_Font20_1);
 800b7d0:	4ee6      	ldr	r6, [pc, #920]	; (800bb6c <_cbDialog+0x5fc>)
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	f004 fe00 	bl	80103d8 <GUI_SetFont>

GUI_SetColor(GUI_GRAY);
 800b7d8:	48e5      	ldr	r0, [pc, #916]	; (800bb70 <_cbDialog+0x600>)
 800b7da:	f004 fd9b 	bl	8010314 <GUI_SetColor>
GUI_GotoXY(210,20);
 800b7de:	2114      	movs	r1, #20
 800b7e0:	20d2      	movs	r0, #210	; 0xd2
 800b7e2:	f004 fd2d 	bl	8010240 <GUI_GotoXY>
GUI_DispFloatMin(f_inputLeft_DB_MAXbufferd, 1);
 800b7e6:	4de3      	ldr	r5, [pc, #908]	; (800bb74 <_cbDialog+0x604>)
 800b7e8:	2001      	movs	r0, #1
 800b7ea:	ed95 0a00 	vldr	s0, [r5]
 800b7ee:	f006 f899 	bl	8011924 <GUI_DispFloatMin>
GUI_GotoXY(260,20);
 800b7f2:	2114      	movs	r1, #20
 800b7f4:	f44f 7082 	mov.w	r0, #260	; 0x104
 800b7f8:	f004 fd22 	bl	8010240 <GUI_GotoXY>
GUI_DispFloatMin(f_inputRight_DB_MAXbufferd, 1);
 800b7fc:	f8df a3bc 	ldr.w	sl, [pc, #956]	; 800bbbc <_cbDialog+0x64c>
 800b800:	2001      	movs	r0, #1
 800b802:	ed9a 0a00 	vldr	s0, [sl]
 800b806:	f006 f88d 	bl	8011924 <GUI_DispFloatMin>

GUI_SetColor(GUI_LIGHTGRAY);
 800b80a:	4620      	mov	r0, r4
 800b80c:	f004 fd82 	bl	8010314 <GUI_SetColor>
GUI_GotoXY(210,40);
 800b810:	2128      	movs	r1, #40	; 0x28
 800b812:	20d2      	movs	r0, #210	; 0xd2
 800b814:	f004 fd14 	bl	8010240 <GUI_GotoXY>
GUI_DispFloatMin(f_inputLeft_DB_RMS_MAXbufferd, 1);
 800b818:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 800bbc0 <_cbDialog+0x650>
 800b81c:	2001      	movs	r0, #1
 800b81e:	ed99 0a00 	vldr	s0, [r9]
 800b822:	f006 f87f 	bl	8011924 <GUI_DispFloatMin>
GUI_GotoXY(260,40);
 800b826:	2128      	movs	r1, #40	; 0x28
 800b828:	f44f 7082 	mov.w	r0, #260	; 0x104
 800b82c:	f004 fd08 	bl	8010240 <GUI_GotoXY>
GUI_DispFloatMin(f_inputRight_DB_RMS_MAXbufferd, 1);
 800b830:	f8df 8390 	ldr.w	r8, [pc, #912]	; 800bbc4 <_cbDialog+0x654>
 800b834:	2001      	movs	r0, #1
 800b836:	ed98 0a00 	vldr	s0, [r8]
 800b83a:	f006 f873 	bl	8011924 <GUI_DispFloatMin>


drawBarDottedVertical (222, 440,(f_inputLeft_DB_MAXbufferd+30)*10,(f_inputLeft_DB_bufferd+30)*10,GUI_GRAY_AA,30);
 800b83e:	ed95 0a00 	vldr	s0, [r5]
 800b842:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
 800b846:	ee30 0a28 	vadd.f32	s0, s0, s17
 800b84a:	4bcb      	ldr	r3, [pc, #812]	; (800bb78 <_cbDialog+0x608>)
 800b84c:	edd3 0a00 	vldr	s1, [r3]
 800b850:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800b854:	4dc9      	ldr	r5, [pc, #804]	; (800bb7c <_cbDialog+0x60c>)
 800b856:	eeb2 8a04 	vmov.f32	s16, #36	; 0x41200000  10.0
 800b85a:	231e      	movs	r3, #30
 800b85c:	462a      	mov	r2, r5
 800b85e:	ee60 0a88 	vmul.f32	s1, s1, s16
 800b862:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b866:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800b86a:	20de      	movs	r0, #222	; 0xde
 800b86c:	f001 fcc8 	bl	800d200 <drawBarDottedVertical>
drawBarDottedVertical (256, 440,(f_inputRight_DB_MAXbufferd+30)*10,(f_inputRight_DB_bufferd+30)*10,GUI_GRAY_AA,30);
 800b870:	ed9a 0a00 	vldr	s0, [sl]
 800b874:	ee30 0a28 	vadd.f32	s0, s0, s17
 800b878:	4bc1      	ldr	r3, [pc, #772]	; (800bb80 <_cbDialog+0x610>)
 800b87a:	edd3 0a00 	vldr	s1, [r3]
 800b87e:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800b882:	231e      	movs	r3, #30
 800b884:	462a      	mov	r2, r5
 800b886:	ee60 0a88 	vmul.f32	s1, s1, s16
 800b88a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b88e:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800b892:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b896:	f001 fcb3 	bl	800d200 <drawBarDottedVertical>

drawBarDottedVertical (222, 440,(f_inputLeft_DB_RMS_MAXbufferd+30)*10,(f_inputLeft_DB_RMS_bufferd+30)*10,GUI_LIGHTGRAY,30);
 800b89a:	ed99 0a00 	vldr	s0, [r9]
 800b89e:	ee30 0a28 	vadd.f32	s0, s0, s17
 800b8a2:	4bb8      	ldr	r3, [pc, #736]	; (800bb84 <_cbDialog+0x614>)
 800b8a4:	edd3 0a00 	vldr	s1, [r3]
 800b8a8:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800b8ac:	231e      	movs	r3, #30
 800b8ae:	4622      	mov	r2, r4
 800b8b0:	ee60 0a88 	vmul.f32	s1, s1, s16
 800b8b4:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b8b8:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800b8bc:	20de      	movs	r0, #222	; 0xde
 800b8be:	f001 fc9f 	bl	800d200 <drawBarDottedVertical>
drawBarDottedVertical (256, 440,(f_inputRight_DB_RMS_MAXbufferd+30)*10,(f_inputRight_DB_RMS_bufferd+30)*10,GUI_LIGHTGRAY,30);
 800b8c2:	ed98 0a00 	vldr	s0, [r8]
 800b8c6:	ee30 0a28 	vadd.f32	s0, s0, s17
 800b8ca:	4baf      	ldr	r3, [pc, #700]	; (800bb88 <_cbDialog+0x618>)
 800b8cc:	edd3 0a00 	vldr	s1, [r3]
 800b8d0:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800b8d4:	231e      	movs	r3, #30
 800b8d6:	4622      	mov	r2, r4
 800b8d8:	ee60 0a88 	vmul.f32	s1, s1, s16
 800b8dc:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b8e0:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800b8e4:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b8e8:	f001 fc8a 	bl	800d200 <drawBarDottedVertical>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//AFTER VCA INDICATOR/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
GUI_SetColor(GUI_LIGHTGRAY);
 800b8ec:	4620      	mov	r0, r4
 800b8ee:	f004 fd11 	bl	8010314 <GUI_SetColor>
GUI_SetFont(&GUI_Font32_1);
 800b8f2:	4638      	mov	r0, r7
 800b8f4:	f004 fd70 	bl	80103d8 <GUI_SetFont>
GUI_DispStringAt("VCA", 348, 440);
 800b8f8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800b8fc:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800b900:	48a2      	ldr	r0, [pc, #648]	; (800bb8c <_cbDialog+0x61c>)
 800b902:	f005 fa33 	bl	8010d6c <GUI_DispStringAt>

GUI_SetFont(&GUI_Font20_1);
 800b906:	4630      	mov	r0, r6
 800b908:	f004 fd66 	bl	80103d8 <GUI_SetFont>

GUI_SetColor(GUI_GRAY);
 800b90c:	4898      	ldr	r0, [pc, #608]	; (800bb70 <_cbDialog+0x600>)
 800b90e:	f004 fd01 	bl	8010314 <GUI_SetColor>
GUI_GotoXY(336,20);
 800b912:	2114      	movs	r1, #20
 800b914:	f44f 70a8 	mov.w	r0, #336	; 0x150
 800b918:	f004 fc92 	bl	8010240 <GUI_GotoXY>
GUI_DispFloatMin(f_VCALeft_DB_MAXbufferd, 1);
 800b91c:	f8df b2a8 	ldr.w	fp, [pc, #680]	; 800bbc8 <_cbDialog+0x658>
 800b920:	2001      	movs	r0, #1
 800b922:	ed9b 0a00 	vldr	s0, [fp]
 800b926:	f005 fffd 	bl	8011924 <GUI_DispFloatMin>
GUI_GotoXY(386,20);
 800b92a:	2114      	movs	r1, #20
 800b92c:	f44f 70c1 	mov.w	r0, #386	; 0x182
 800b930:	f004 fc86 	bl	8010240 <GUI_GotoXY>
GUI_DispFloatMin(f_VCARight_DB_MAXbufferd, 1);
 800b934:	f8df a294 	ldr.w	sl, [pc, #660]	; 800bbcc <_cbDialog+0x65c>
 800b938:	2001      	movs	r0, #1
 800b93a:	ed9a 0a00 	vldr	s0, [sl]
 800b93e:	f005 fff1 	bl	8011924 <GUI_DispFloatMin>

GUI_SetColor(GUI_LIGHTGRAY);
 800b942:	4620      	mov	r0, r4
 800b944:	f004 fce6 	bl	8010314 <GUI_SetColor>
GUI_GotoXY(336,40);
 800b948:	2128      	movs	r1, #40	; 0x28
 800b94a:	f44f 70a8 	mov.w	r0, #336	; 0x150
 800b94e:	f004 fc77 	bl	8010240 <GUI_GotoXY>
GUI_DispFloatMin(f_VCALeft_DB_RMS_MAXbufferd, 1);
 800b952:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800bbd0 <_cbDialog+0x660>
 800b956:	2001      	movs	r0, #1
 800b958:	ed99 0a00 	vldr	s0, [r9]
 800b95c:	f005 ffe2 	bl	8011924 <GUI_DispFloatMin>
GUI_GotoXY(386,40);
 800b960:	2128      	movs	r1, #40	; 0x28
 800b962:	f44f 70c1 	mov.w	r0, #386	; 0x182
 800b966:	f004 fc6b 	bl	8010240 <GUI_GotoXY>
GUI_DispFloatMin(f_VCARight_DB_RMS_MAXbufferd, 1);
 800b96a:	f8df 8268 	ldr.w	r8, [pc, #616]	; 800bbd4 <_cbDialog+0x664>
 800b96e:	2001      	movs	r0, #1
 800b970:	ed98 0a00 	vldr	s0, [r8]
 800b974:	f005 ffd6 	bl	8011924 <GUI_DispFloatMin>

 drawBarDottedVertical (348, 440,(f_VCALeft_DB_MAXbufferd+30)*10,(f_VCALeft_DB_bufferd+30)*10,GUI_GRAY_AA,30);
 800b978:	ed9b 0a00 	vldr	s0, [fp]
 800b97c:	ee30 0a28 	vadd.f32	s0, s0, s17
 800b980:	4b83      	ldr	r3, [pc, #524]	; (800bb90 <_cbDialog+0x620>)
 800b982:	edd3 0a00 	vldr	s1, [r3]
 800b986:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800b98a:	231e      	movs	r3, #30
 800b98c:	462a      	mov	r2, r5
 800b98e:	ee60 0a88 	vmul.f32	s1, s1, s16
 800b992:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b996:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800b99a:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 800b99e:	f001 fc2f 	bl	800d200 <drawBarDottedVertical>
 drawBarDottedVertical (382, 440,(f_VCARight_DB_MAXbufferd+30)*10,(f_VCARight_DB_bufferd+30)*10,GUI_GRAY_AA,30);
 800b9a2:	ed9a 0a00 	vldr	s0, [sl]
 800b9a6:	ee30 0a28 	vadd.f32	s0, s0, s17
 800b9aa:	4b7a      	ldr	r3, [pc, #488]	; (800bb94 <_cbDialog+0x624>)
 800b9ac:	edd3 0a00 	vldr	s1, [r3]
 800b9b0:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800b9b4:	231e      	movs	r3, #30
 800b9b6:	462a      	mov	r2, r5
 800b9b8:	ee60 0a88 	vmul.f32	s1, s1, s16
 800b9bc:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b9c0:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800b9c4:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800b9c8:	f001 fc1a 	bl	800d200 <drawBarDottedVertical>

 drawBarDottedVertical (348, 440,(f_VCALeft_DB_RMS_MAXbufferd+30)*10,(f_VCALeft_DB_RMS_bufferd+30)*10,GUI_LIGHTGRAY,30);
 800b9cc:	ed99 0a00 	vldr	s0, [r9]
 800b9d0:	ee30 0a28 	vadd.f32	s0, s0, s17
 800b9d4:	4b70      	ldr	r3, [pc, #448]	; (800bb98 <_cbDialog+0x628>)
 800b9d6:	edd3 0a00 	vldr	s1, [r3]
 800b9da:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800b9de:	231e      	movs	r3, #30
 800b9e0:	4622      	mov	r2, r4
 800b9e2:	ee60 0a88 	vmul.f32	s1, s1, s16
 800b9e6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b9ea:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800b9ee:	f44f 70ae 	mov.w	r0, #348	; 0x15c
 800b9f2:	f001 fc05 	bl	800d200 <drawBarDottedVertical>
 drawBarDottedVertical (382, 440,(f_VCARight_DB_RMS_MAXbufferd+30)*10,(f_VCARight_DB_RMS_bufferd+30)*10,GUI_LIGHTGRAY,30);
 800b9f6:	ed98 0a00 	vldr	s0, [r8]
 800b9fa:	ee30 0a28 	vadd.f32	s0, s0, s17
 800b9fe:	4b67      	ldr	r3, [pc, #412]	; (800bb9c <_cbDialog+0x62c>)
 800ba00:	edd3 0a00 	vldr	s1, [r3]
 800ba04:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800ba08:	231e      	movs	r3, #30
 800ba0a:	4622      	mov	r2, r4
 800ba0c:	ee60 0a88 	vmul.f32	s1, s1, s16
 800ba10:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ba14:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800ba18:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800ba1c:	f001 fbf0 	bl	800d200 <drawBarDottedVertical>
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//OUTPUT INDICATOR///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 GUI_SetColor(GUI_LIGHTGRAY);
 800ba20:	4620      	mov	r0, r4
 800ba22:	f004 fc77 	bl	8010314 <GUI_SetColor>
 GUI_SetFont(&GUI_Font32_1);
 800ba26:	4638      	mov	r0, r7
 800ba28:	f004 fcd6 	bl	80103d8 <GUI_SetFont>
 GUI_DispStringAt("output", 480, 440);
 800ba2c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800ba30:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800ba34:	485a      	ldr	r0, [pc, #360]	; (800bba0 <_cbDialog+0x630>)
 800ba36:	f005 f999 	bl	8010d6c <GUI_DispStringAt>

 GUI_SetFont(&GUI_Font20_1);
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f004 fccc 	bl	80103d8 <GUI_SetFont>

 GUI_SetColor(GUI_GRAY);
 800ba40:	484b      	ldr	r0, [pc, #300]	; (800bb70 <_cbDialog+0x600>)
 800ba42:	f004 fc67 	bl	8010314 <GUI_SetColor>
 GUI_GotoXY(468,20);
 800ba46:	2114      	movs	r1, #20
 800ba48:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 800ba4c:	f004 fbf8 	bl	8010240 <GUI_GotoXY>
 GUI_DispFloatMin(f_outputLeft_DB_MAXbufferd, 1);
 800ba50:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800bbd8 <_cbDialog+0x668>
 800ba54:	2001      	movs	r0, #1
 800ba56:	ed99 0a00 	vldr	s0, [r9]
 800ba5a:	f005 ff63 	bl	8011924 <GUI_DispFloatMin>
 GUI_GotoXY(518,20);
 800ba5e:	2114      	movs	r1, #20
 800ba60:	f240 2006 	movw	r0, #518	; 0x206
 800ba64:	f004 fbec 	bl	8010240 <GUI_GotoXY>
 GUI_DispFloatMin(f_outputRight_DB_MAXbufferd, 1);
 800ba68:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800bbdc <_cbDialog+0x66c>
 800ba6c:	2001      	movs	r0, #1
 800ba6e:	ed98 0a00 	vldr	s0, [r8]
 800ba72:	f005 ff57 	bl	8011924 <GUI_DispFloatMin>

 GUI_SetColor(GUI_LIGHTGRAY);
 800ba76:	4620      	mov	r0, r4
 800ba78:	f004 fc4c 	bl	8010314 <GUI_SetColor>
 GUI_GotoXY(468,40);
 800ba7c:	2128      	movs	r1, #40	; 0x28
 800ba7e:	f44f 70ea 	mov.w	r0, #468	; 0x1d4
 800ba82:	f004 fbdd 	bl	8010240 <GUI_GotoXY>
 GUI_DispFloatMin(f_outputLeft_DB_RMS_MAXbufferd, 1);
 800ba86:	4f47      	ldr	r7, [pc, #284]	; (800bba4 <_cbDialog+0x634>)
 800ba88:	2001      	movs	r0, #1
 800ba8a:	ed97 0a00 	vldr	s0, [r7]
 800ba8e:	f005 ff49 	bl	8011924 <GUI_DispFloatMin>
 GUI_GotoXY(518,40);
 800ba92:	2128      	movs	r1, #40	; 0x28
 800ba94:	f240 2006 	movw	r0, #518	; 0x206
 800ba98:	f004 fbd2 	bl	8010240 <GUI_GotoXY>
 GUI_DispFloatMin(f_outputRight_DB_RMS_MAXbufferd, 1);
 800ba9c:	4e42      	ldr	r6, [pc, #264]	; (800bba8 <_cbDialog+0x638>)
 800ba9e:	2001      	movs	r0, #1
 800baa0:	ed96 0a00 	vldr	s0, [r6]
 800baa4:	f005 ff3e 	bl	8011924 <GUI_DispFloatMin>

 drawBarDottedVertical (480, 440,(f_outputLeft_DB_MAXbufferd+30)*10,(f_outputLeft_DB_bufferd+30)*10,GUI_GRAY_AA,30);
 800baa8:	ed99 0a00 	vldr	s0, [r9]
 800baac:	ee30 0a28 	vadd.f32	s0, s0, s17
 800bab0:	4b3e      	ldr	r3, [pc, #248]	; (800bbac <_cbDialog+0x63c>)
 800bab2:	edd3 0a00 	vldr	s1, [r3]
 800bab6:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800baba:	231e      	movs	r3, #30
 800babc:	462a      	mov	r2, r5
 800babe:	ee60 0a88 	vmul.f32	s1, s1, s16
 800bac2:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bac6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800baca:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800bace:	f001 fb97 	bl	800d200 <drawBarDottedVertical>
 drawBarDottedVertical (514, 440,(f_outputRight_DB_MAXbufferd+30)*10,(f_outputRight_DB_bufferd+30)*10,GUI_GRAY_AA,30);
 800bad2:	ed98 0a00 	vldr	s0, [r8]
 800bad6:	ee30 0a28 	vadd.f32	s0, s0, s17
 800bada:	4b35      	ldr	r3, [pc, #212]	; (800bbb0 <_cbDialog+0x640>)
 800badc:	edd3 0a00 	vldr	s1, [r3]
 800bae0:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800bae4:	231e      	movs	r3, #30
 800bae6:	462a      	mov	r2, r5
 800bae8:	ee60 0a88 	vmul.f32	s1, s1, s16
 800baec:	ee20 0a08 	vmul.f32	s0, s0, s16
 800baf0:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800baf4:	f240 2002 	movw	r0, #514	; 0x202
 800baf8:	f001 fb82 	bl	800d200 <drawBarDottedVertical>

 drawBarDottedVertical (480, 440,(f_outputLeft_DB_RMS_MAXbufferd+30)*10,(f_outputLeft_DB_RMS_bufferd+30)*10,GUI_LIGHTGRAY,30);
 800bafc:	ed97 0a00 	vldr	s0, [r7]
 800bb00:	ee30 0a28 	vadd.f32	s0, s0, s17
 800bb04:	4b2b      	ldr	r3, [pc, #172]	; (800bbb4 <_cbDialog+0x644>)
 800bb06:	edd3 0a00 	vldr	s1, [r3]
 800bb0a:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800bb0e:	231e      	movs	r3, #30
 800bb10:	4622      	mov	r2, r4
 800bb12:	ee60 0a88 	vmul.f32	s1, s1, s16
 800bb16:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bb1a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800bb1e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800bb22:	f001 fb6d 	bl	800d200 <drawBarDottedVertical>
 drawBarDottedVertical (514, 440,(f_outputRight_DB_RMS_MAXbufferd+30)*10,(f_outputRight_DB_RMS_bufferd+30)*10,GUI_LIGHTGRAY,30);
 800bb26:	ed96 0a00 	vldr	s0, [r6]
 800bb2a:	ee30 0a28 	vadd.f32	s0, s0, s17
 800bb2e:	4b22      	ldr	r3, [pc, #136]	; (800bbb8 <_cbDialog+0x648>)
 800bb30:	edd3 0a00 	vldr	s1, [r3]
 800bb34:	ee70 0aa8 	vadd.f32	s1, s1, s17
 800bb38:	231e      	movs	r3, #30
 800bb3a:	4622      	mov	r2, r4
 800bb3c:	ee60 0a88 	vmul.f32	s1, s1, s16
 800bb40:	ee20 0a08 	vmul.f32	s0, s0, s16
 800bb44:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800bb48:	f240 2002 	movw	r0, #514	; 0x202
 800bb4c:	f001 fb58 	bl	800d200 <drawBarDottedVertical>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


 BSP_LED_Toggle(LED3); //Toggle LED to check Performance
 800bb50:	2002      	movs	r0, #2
 800bb52:	f002 ffdf 	bl	800eb14 <BSP_LED_Toggle>

}
 800bb56:	ecbd 8b02 	vpop	{d8}
 800bb5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb5e:	bf00      	nop
 800bb60:	ffd3d3d3 	.word	0xffd3d3d3
 800bb64:	0802c2a0 	.word	0x0802c2a0
 800bb68:	080328e0 	.word	0x080328e0
 800bb6c:	080263ec 	.word	0x080263ec
 800bb70:	ff808080 	.word	0xff808080
 800bb74:	2002f144 	.word	0x2002f144
 800bb78:	2002f368 	.word	0x2002f368
 800bb7c:	ffaaaaaa 	.word	0xffaaaaaa
 800bb80:	2002fd90 	.word	0x2002fd90
 800bb84:	2002fb1c 	.word	0x2002fb1c
 800bb88:	2002f15c 	.word	0x2002f15c
 800bb8c:	08032958 	.word	0x08032958
 800bb90:	2002fa38 	.word	0x2002fa38
 800bb94:	2002fa10 	.word	0x2002fa10
 800bb98:	2002f514 	.word	0x2002f514
 800bb9c:	2002f35c 	.word	0x2002f35c
 800bba0:	0803295c 	.word	0x0803295c
 800bba4:	2002f6b0 	.word	0x2002f6b0
 800bba8:	2002fd94 	.word	0x2002fd94
 800bbac:	2002f84c 	.word	0x2002f84c
 800bbb0:	2002fb24 	.word	0x2002fb24
 800bbb4:	2002f370 	.word	0x2002f370
 800bbb8:	2002f510 	.word	0x2002f510
 800bbbc:	2002f51c 	.word	0x2002f51c
 800bbc0:	2002f160 	.word	0x2002f160
 800bbc4:	2002f848 	.word	0x2002f848
 800bbc8:	2002fb34 	.word	0x2002fb34
 800bbcc:	2002fb08 	.word	0x2002fb08
 800bbd0:	2002f850 	.word	0x2002f850
 800bbd4:	2002fb30 	.word	0x2002fb30
 800bbd8:	2002fa18 	.word	0x2002fa18
 800bbdc:	2002fa08 	.word	0x2002fa08

0800bbe0 <CreateMainWindow>:



WM_HWIN CreateMainWindow(void) {
 800bbe0:	b510      	push	{r4, lr}
 800bbe2:	b084      	sub	sp, #16

  WM_HWIN Window;

  Window = WM_CreateWindow(0, 0, 1, 1,WM_CF_SHOW, _cbDialog, 0);
 800bbe4:	2000      	movs	r0, #0
 800bbe6:	9002      	str	r0, [sp, #8]
 800bbe8:	4b07      	ldr	r3, [pc, #28]	; (800bc08 <CreateMainWindow+0x28>)
 800bbea:	9301      	str	r3, [sp, #4]
 800bbec:	2302      	movs	r3, #2
 800bbee:	9300      	str	r3, [sp, #0]
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	461a      	mov	r2, r3
 800bbf4:	4601      	mov	r1, r0
 800bbf6:	f00b ffa9 	bl	8017b4c <WM_CreateWindow>
 800bbfa:	4604      	mov	r4, r0

  WM_MULTIBUF_Enable(1);
 800bbfc:	2001      	movs	r0, #1
 800bbfe:	f00d fc17 	bl	8019430 <WM_MULTIBUF_Enable>

  return Window;
}
 800bc02:	4620      	mov	r0, r4
 800bc04:	b004      	add	sp, #16
 800bc06:	bd10      	pop	{r4, pc}
 800bc08:	0800b571 	.word	0x0800b571

0800bc0c <_cbDialog>:





static void _cbDialog(WM_MESSAGE * pMsg) {
 800bc0c:	b570      	push	{r4, r5, r6, lr}
 800bc0e:	4604      	mov	r4, r0

  WM_HWIN      hItem;
  int          NCode;
  int          Id;

  switch (pMsg->MsgId) {
 800bc10:	6803      	ldr	r3, [r0, #0]
 800bc12:	2b1d      	cmp	r3, #29
 800bc14:	d008      	beq.n	800bc28 <_cbDialog+0x1c>
 800bc16:	2b26      	cmp	r3, #38	; 0x26
 800bc18:	f000 80b9 	beq.w	800bd8e <_cbDialog+0x182>
 800bc1c:	2b0f      	cmp	r3, #15
 800bc1e:	f000 80b0 	beq.w	800bd82 <_cbDialog+0x176>
      break;
//////////////////////////////////////////////////////////////////
    }
    break;
  default:
    WM_DefaultProc(pMsg);
 800bc22:	f00c fd0b 	bl	801863c <WM_DefaultProc>
    break;
  }
}
 800bc26:	e0b1      	b.n	800bd8c <_cbDialog+0x180>
	hItem = WM_GetDialogItem(pMsg->hWin, ID_SpectrumButton);
 800bc28:	f640 0104 	movw	r1, #2052	; 0x804
 800bc2c:	6840      	ldr	r0, [r0, #4]
 800bc2e:	f00d f84d 	bl	8018ccc <WM_GetDialogItem>
	WM_SetCallback(hItem, _cbButton_spectrum);
 800bc32:	4999      	ldr	r1, [pc, #612]	; (800be98 <_cbDialog+0x28c>)
 800bc34:	f00d f9cc 	bl	8018fd0 <WM_SetCallback>
	hItem = WM_GetDialogItem(pMsg->hWin, ID_NetworkButton);
 800bc38:	f640 0105 	movw	r1, #2053	; 0x805
 800bc3c:	6860      	ldr	r0, [r4, #4]
 800bc3e:	f00d f845 	bl	8018ccc <WM_GetDialogItem>
	WM_SetCallback(hItem, _cbButtonNetwork);
 800bc42:	4996      	ldr	r1, [pc, #600]	; (800be9c <_cbDialog+0x290>)
 800bc44:	f00d f9c4 	bl	8018fd0 <WM_SetCallback>
	hItem = WM_GetDialogItem(pMsg->hWin, ID_addButton);
 800bc48:	f640 0106 	movw	r1, #2054	; 0x806
 800bc4c:	6860      	ldr	r0, [r4, #4]
 800bc4e:	f00d f83d 	bl	8018ccc <WM_GetDialogItem>
	WM_SetCallback(hItem, _cbButton_add);
 800bc52:	4993      	ldr	r1, [pc, #588]	; (800bea0 <_cbDialog+0x294>)
 800bc54:	f00d f9bc 	bl	8018fd0 <WM_SetCallback>
	hItem = WM_GetDialogItem(pMsg->hWin, ID_okButton);
 800bc58:	f640 0107 	movw	r1, #2055	; 0x807
 800bc5c:	6860      	ldr	r0, [r4, #4]
 800bc5e:	f00d f835 	bl	8018ccc <WM_GetDialogItem>
	WM_SetCallback(hItem, _cbButton_ok);
 800bc62:	4990      	ldr	r1, [pc, #576]	; (800bea4 <_cbDialog+0x298>)
 800bc64:	f00d f9b4 	bl	8018fd0 <WM_SetCallback>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_0);
 800bc68:	f640 0108 	movw	r1, #2056	; 0x808
 800bc6c:	6860      	ldr	r0, [r4, #4]
 800bc6e:	f00d f82d 	bl	8018ccc <WM_GetDialogItem>
 800bc72:	4605      	mov	r5, r0
    TEXT_SetText(hItem, "MODE");
 800bc74:	498c      	ldr	r1, [pc, #560]	; (800bea8 <_cbDialog+0x29c>)
 800bc76:	f00e ff8d 	bl	801ab94 <TEXT_SetText>
    TEXT_SetTextAlign(hItem, GUI_TA_VCENTER|GUI_TA_HCENTER);
 800bc7a:	210e      	movs	r1, #14
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	f00e ffbb 	bl	801abf8 <TEXT_SetTextAlign>
    TEXT_SetFont(hItem, GUI_FONT_32B_1);
 800bc82:	4e8a      	ldr	r6, [pc, #552]	; (800beac <_cbDialog+0x2a0>)
 800bc84:	4631      	mov	r1, r6
 800bc86:	4628      	mov	r0, r5
 800bc88:	f00e ff6a 	bl	801ab60 <TEXT_SetFont>
    TEXT_SetTextColor(hItem,GUI_LIGHTGRAY);
 800bc8c:	4988      	ldr	r1, [pc, #544]	; (800beb0 <_cbDialog+0x2a4>)
 800bc8e:	4628      	mov	r0, r5
 800bc90:	f00e ffcc 	bl	801ac2c <TEXT_SetTextColor>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_1);
 800bc94:	f640 0109 	movw	r1, #2057	; 0x809
 800bc98:	6860      	ldr	r0, [r4, #4]
 800bc9a:	f00d f817 	bl	8018ccc <WM_GetDialogItem>
 800bc9e:	4605      	mov	r5, r0
    TEXT_SetText(hItem, "M/S");
 800bca0:	4984      	ldr	r1, [pc, #528]	; (800beb4 <_cbDialog+0x2a8>)
 800bca2:	f00e ff77 	bl	801ab94 <TEXT_SetText>
    TEXT_SetTextAlign(hItem, GUI_TA_VCENTER|GUI_TA_HCENTER);
 800bca6:	210e      	movs	r1, #14
 800bca8:	4628      	mov	r0, r5
 800bcaa:	f00e ffa5 	bl	801abf8 <TEXT_SetTextAlign>
    TEXT_SetFont(hItem, GUI_FONT_32B_1);
 800bcae:	4631      	mov	r1, r6
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	f00e ff55 	bl	801ab60 <TEXT_SetFont>
 	 if (Button_spectrumState){TEXT_SetTextColor(hItem,GUI_ORANGE);}
 800bcb6:	4b80      	ldr	r3, [pc, #512]	; (800beb8 <_cbDialog+0x2ac>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d04d      	beq.n	800bd5a <_cbDialog+0x14e>
 800bcbe:	497f      	ldr	r1, [pc, #508]	; (800bebc <_cbDialog+0x2b0>)
 800bcc0:	4628      	mov	r0, r5
 800bcc2:	f00e ffb3 	bl	801ac2c <TEXT_SetTextColor>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_2);
 800bcc6:	f640 010a 	movw	r1, #2058	; 0x80a
 800bcca:	6860      	ldr	r0, [r4, #4]
 800bccc:	f00c fffe 	bl	8018ccc <WM_GetDialogItem>
 800bcd0:	4605      	mov	r5, r0
    TEXT_SetText(hItem, "Stereo");
 800bcd2:	497b      	ldr	r1, [pc, #492]	; (800bec0 <_cbDialog+0x2b4>)
 800bcd4:	f00e ff5e 	bl	801ab94 <TEXT_SetText>
    TEXT_SetTextAlign(hItem, GUI_TA_VCENTER|GUI_TA_HCENTER);
 800bcd8:	210e      	movs	r1, #14
 800bcda:	4628      	mov	r0, r5
 800bcdc:	f00e ff8c 	bl	801abf8 <TEXT_SetTextAlign>
    TEXT_SetFont(hItem, GUI_FONT_32B_1);
 800bce0:	4972      	ldr	r1, [pc, #456]	; (800beac <_cbDialog+0x2a0>)
 800bce2:	4628      	mov	r0, r5
 800bce4:	f00e ff3c 	bl	801ab60 <TEXT_SetFont>
 	 if (Button_NetworkState){TEXT_SetTextColor(hItem,GUI_ORANGE);}
 800bce8:	4b73      	ldr	r3, [pc, #460]	; (800beb8 <_cbDialog+0x2ac>)
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d039      	beq.n	800bd64 <_cbDialog+0x158>
 800bcf0:	4972      	ldr	r1, [pc, #456]	; (800bebc <_cbDialog+0x2b0>)
 800bcf2:	4628      	mov	r0, r5
 800bcf4:	f00e ff9a 	bl	801ac2c <TEXT_SetTextColor>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_3);
 800bcf8:	f640 010c 	movw	r1, #2060	; 0x80c
 800bcfc:	6860      	ldr	r0, [r4, #4]
 800bcfe:	f00c ffe5 	bl	8018ccc <WM_GetDialogItem>
 800bd02:	4605      	mov	r5, r0
    TEXT_SetText(hItem, "DualMono");
 800bd04:	496f      	ldr	r1, [pc, #444]	; (800bec4 <_cbDialog+0x2b8>)
 800bd06:	f00e ff45 	bl	801ab94 <TEXT_SetText>
    TEXT_SetTextAlign(hItem, GUI_TA_VCENTER|GUI_TA_HCENTER);
 800bd0a:	210e      	movs	r1, #14
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	f00e ff73 	bl	801abf8 <TEXT_SetTextAlign>
    TEXT_SetFont(hItem, GUI_FONT_32B_1);
 800bd12:	4966      	ldr	r1, [pc, #408]	; (800beac <_cbDialog+0x2a0>)
 800bd14:	4628      	mov	r0, r5
 800bd16:	f00e ff23 	bl	801ab60 <TEXT_SetFont>
  	 if (Button_addState){TEXT_SetTextColor(hItem,GUI_ORANGE);}
 800bd1a:	4b67      	ldr	r3, [pc, #412]	; (800beb8 <_cbDialog+0x2ac>)
 800bd1c:	689b      	ldr	r3, [r3, #8]
 800bd1e:	b333      	cbz	r3, 800bd6e <_cbDialog+0x162>
 800bd20:	4966      	ldr	r1, [pc, #408]	; (800bebc <_cbDialog+0x2b0>)
 800bd22:	4628      	mov	r0, r5
 800bd24:	f00e ff82 	bl	801ac2c <TEXT_SetTextColor>
    hItem = WM_GetDialogItem(pMsg->hWin, ID_TEXT_4);
 800bd28:	f640 010b 	movw	r1, #2059	; 0x80b
 800bd2c:	6860      	ldr	r0, [r4, #4]
 800bd2e:	f00c ffcd 	bl	8018ccc <WM_GetDialogItem>
 800bd32:	4604      	mov	r4, r0
    TEXT_SetText(hItem, "Bypass");
 800bd34:	4964      	ldr	r1, [pc, #400]	; (800bec8 <_cbDialog+0x2bc>)
 800bd36:	f00e ff2d 	bl	801ab94 <TEXT_SetText>
    TEXT_SetTextAlign(hItem, GUI_TA_VCENTER|GUI_TA_HCENTER);
 800bd3a:	210e      	movs	r1, #14
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f00e ff5b 	bl	801abf8 <TEXT_SetTextAlign>
    TEXT_SetFont(hItem, GUI_FONT_32B_1);
 800bd42:	495a      	ldr	r1, [pc, #360]	; (800beac <_cbDialog+0x2a0>)
 800bd44:	4620      	mov	r0, r4
 800bd46:	f00e ff0b 	bl	801ab60 <TEXT_SetFont>
 	 if (Button_okState){TEXT_SetTextColor(hItem,GUI_ORANGE);}
 800bd4a:	4b60      	ldr	r3, [pc, #384]	; (800becc <_cbDialog+0x2c0>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	b19b      	cbz	r3, 800bd78 <_cbDialog+0x16c>
 800bd50:	495a      	ldr	r1, [pc, #360]	; (800bebc <_cbDialog+0x2b0>)
 800bd52:	4620      	mov	r0, r4
 800bd54:	f00e ff6a 	bl	801ac2c <TEXT_SetTextColor>
 800bd58:	e018      	b.n	800bd8c <_cbDialog+0x180>
 	 else{TEXT_SetTextColor(hItem,GUI_LIGHTGRAY);}
 800bd5a:	4955      	ldr	r1, [pc, #340]	; (800beb0 <_cbDialog+0x2a4>)
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	f00e ff65 	bl	801ac2c <TEXT_SetTextColor>
 800bd62:	e7b0      	b.n	800bcc6 <_cbDialog+0xba>
 	 else{TEXT_SetTextColor(hItem,GUI_LIGHTGRAY);}
 800bd64:	4952      	ldr	r1, [pc, #328]	; (800beb0 <_cbDialog+0x2a4>)
 800bd66:	4628      	mov	r0, r5
 800bd68:	f00e ff60 	bl	801ac2c <TEXT_SetTextColor>
 800bd6c:	e7c4      	b.n	800bcf8 <_cbDialog+0xec>
  	 else{TEXT_SetTextColor(hItem,GUI_LIGHTGRAY);}
 800bd6e:	4950      	ldr	r1, [pc, #320]	; (800beb0 <_cbDialog+0x2a4>)
 800bd70:	4628      	mov	r0, r5
 800bd72:	f00e ff5b 	bl	801ac2c <TEXT_SetTextColor>
 800bd76:	e7d7      	b.n	800bd28 <_cbDialog+0x11c>
 	 else{TEXT_SetTextColor(hItem,GUI_LIGHTGRAY);}
 800bd78:	494d      	ldr	r1, [pc, #308]	; (800beb0 <_cbDialog+0x2a4>)
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f00e ff56 	bl	801ac2c <TEXT_SetTextColor>
 800bd80:	e004      	b.n	800bd8c <_cbDialog+0x180>
		GUI_SetBkColor(GUI_DARKGRAY);
 800bd82:	4853      	ldr	r0, [pc, #332]	; (800bed0 <_cbDialog+0x2c4>)
 800bd84:	f004 faba 	bl	80102fc <GUI_SetBkColor>
		GUI_Clear();
 800bd88:	f004 fbc8 	bl	801051c <GUI_Clear>
}
 800bd8c:	bd70      	pop	{r4, r5, r6, pc}
    Id    = WM_GetId(pMsg->hWinSrc);
 800bd8e:	6880      	ldr	r0, [r0, #8]
 800bd90:	f00d f81c 	bl	8018dcc <WM_GetId>
    NCode = pMsg->Data.v;
 800bd94:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 800bd96:	f6a0 0004 	subw	r0, r0, #2052	; 0x804
 800bd9a:	2803      	cmp	r0, #3
 800bd9c:	d8f6      	bhi.n	800bd8c <_cbDialog+0x180>
 800bd9e:	e8df f000 	tbb	[pc, r0]
 800bda2:	1d02      	.short	0x1d02
 800bda4:	5338      	.short	0x5338
      switch(NCode) {
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	d1f0      	bne.n	800bd8c <_cbDialog+0x180>
    	  Button_spectrumState = !Button_spectrumState;
 800bdaa:	4a43      	ldr	r2, [pc, #268]	; (800beb8 <_cbDialog+0x2ac>)
 800bdac:	6813      	ldr	r3, [r2, #0]
 800bdae:	fab3 f383 	clz	r3, r3
 800bdb2:	095b      	lsrs	r3, r3, #5
 800bdb4:	6013      	str	r3, [r2, #0]
    	  if (Button_spectrumState){TEXT_SetTextColor(WM_GetDialogItem(pMsg->hWin, ID_TEXT_1),GUI_ORANGE);}
 800bdb6:	b143      	cbz	r3, 800bdca <_cbDialog+0x1be>
 800bdb8:	f640 0109 	movw	r1, #2057	; 0x809
 800bdbc:	6860      	ldr	r0, [r4, #4]
 800bdbe:	f00c ff85 	bl	8018ccc <WM_GetDialogItem>
 800bdc2:	493e      	ldr	r1, [pc, #248]	; (800bebc <_cbDialog+0x2b0>)
 800bdc4:	f00e ff32 	bl	801ac2c <TEXT_SetTextColor>
 800bdc8:	e7e0      	b.n	800bd8c <_cbDialog+0x180>
          else{TEXT_SetTextColor(WM_GetDialogItem(pMsg->hWin, ID_TEXT_1),GUI_LIGHTGRAY);}
 800bdca:	f640 0109 	movw	r1, #2057	; 0x809
 800bdce:	6860      	ldr	r0, [r4, #4]
 800bdd0:	f00c ff7c 	bl	8018ccc <WM_GetDialogItem>
 800bdd4:	4936      	ldr	r1, [pc, #216]	; (800beb0 <_cbDialog+0x2a4>)
 800bdd6:	f00e ff29 	bl	801ac2c <TEXT_SetTextColor>
 800bdda:	e7d7      	b.n	800bd8c <_cbDialog+0x180>
      switch(NCode) {
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d1d5      	bne.n	800bd8c <_cbDialog+0x180>
    	  Button_NetworkState = !Button_NetworkState;
 800bde0:	4a35      	ldr	r2, [pc, #212]	; (800beb8 <_cbDialog+0x2ac>)
 800bde2:	6853      	ldr	r3, [r2, #4]
 800bde4:	fab3 f383 	clz	r3, r3
 800bde8:	095b      	lsrs	r3, r3, #5
 800bdea:	6053      	str	r3, [r2, #4]
    	  if (Button_NetworkState){TEXT_SetTextColor(WM_GetDialogItem(pMsg->hWin, ID_TEXT_2),GUI_ORANGE);}
 800bdec:	b143      	cbz	r3, 800be00 <_cbDialog+0x1f4>
 800bdee:	f640 010a 	movw	r1, #2058	; 0x80a
 800bdf2:	6860      	ldr	r0, [r4, #4]
 800bdf4:	f00c ff6a 	bl	8018ccc <WM_GetDialogItem>
 800bdf8:	4930      	ldr	r1, [pc, #192]	; (800bebc <_cbDialog+0x2b0>)
 800bdfa:	f00e ff17 	bl	801ac2c <TEXT_SetTextColor>
 800bdfe:	e7c5      	b.n	800bd8c <_cbDialog+0x180>
          else{TEXT_SetTextColor(WM_GetDialogItem(pMsg->hWin, ID_TEXT_2),GUI_LIGHTGRAY);}
 800be00:	f640 010a 	movw	r1, #2058	; 0x80a
 800be04:	6860      	ldr	r0, [r4, #4]
 800be06:	f00c ff61 	bl	8018ccc <WM_GetDialogItem>
 800be0a:	4929      	ldr	r1, [pc, #164]	; (800beb0 <_cbDialog+0x2a4>)
 800be0c:	f00e ff0e 	bl	801ac2c <TEXT_SetTextColor>
 800be10:	e7bc      	b.n	800bd8c <_cbDialog+0x180>
      switch(NCode) {
 800be12:	2b01      	cmp	r3, #1
 800be14:	d1ba      	bne.n	800bd8c <_cbDialog+0x180>
    	  Button_addState = !Button_addState;
 800be16:	4a28      	ldr	r2, [pc, #160]	; (800beb8 <_cbDialog+0x2ac>)
 800be18:	6893      	ldr	r3, [r2, #8]
 800be1a:	fab3 f383 	clz	r3, r3
 800be1e:	095b      	lsrs	r3, r3, #5
 800be20:	6093      	str	r3, [r2, #8]
    	  if (Button_addState){TEXT_SetTextColor(WM_GetDialogItem(pMsg->hWin, ID_TEXT_3),GUI_ORANGE);}
 800be22:	b143      	cbz	r3, 800be36 <_cbDialog+0x22a>
 800be24:	f640 010c 	movw	r1, #2060	; 0x80c
 800be28:	6860      	ldr	r0, [r4, #4]
 800be2a:	f00c ff4f 	bl	8018ccc <WM_GetDialogItem>
 800be2e:	4923      	ldr	r1, [pc, #140]	; (800bebc <_cbDialog+0x2b0>)
 800be30:	f00e fefc 	bl	801ac2c <TEXT_SetTextColor>
 800be34:	e7aa      	b.n	800bd8c <_cbDialog+0x180>
          else{TEXT_SetTextColor(WM_GetDialogItem(pMsg->hWin, ID_TEXT_3),GUI_LIGHTGRAY);}
 800be36:	f640 010c 	movw	r1, #2060	; 0x80c
 800be3a:	6860      	ldr	r0, [r4, #4]
 800be3c:	f00c ff46 	bl	8018ccc <WM_GetDialogItem>
 800be40:	491b      	ldr	r1, [pc, #108]	; (800beb0 <_cbDialog+0x2a4>)
 800be42:	f00e fef3 	bl	801ac2c <TEXT_SetTextColor>
 800be46:	e7a1      	b.n	800bd8c <_cbDialog+0x180>
      switch(NCode) {
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d19f      	bne.n	800bd8c <_cbDialog+0x180>
       	  Button_okState =!Button_okState;
 800be4c:	4a1f      	ldr	r2, [pc, #124]	; (800becc <_cbDialog+0x2c0>)
 800be4e:	6813      	ldr	r3, [r2, #0]
 800be50:	fab3 f383 	clz	r3, r3
 800be54:	095b      	lsrs	r3, r3, #5
 800be56:	6013      	str	r3, [r2, #0]
      	 if (Button_okState){TEXT_SetTextColor(WM_GetDialogItem(pMsg->hWin, ID_TEXT_4),GUI_ORANGE);}
 800be58:	b1ab      	cbz	r3, 800be86 <_cbDialog+0x27a>
 800be5a:	f640 010b 	movw	r1, #2059	; 0x80b
 800be5e:	6860      	ldr	r0, [r4, #4]
 800be60:	f00c ff34 	bl	8018ccc <WM_GetDialogItem>
 800be64:	4915      	ldr	r1, [pc, #84]	; (800bebc <_cbDialog+0x2b0>)
 800be66:	f00e fee1 	bl	801ac2c <TEXT_SetTextColor>
       	  pMsg->Data.v = 5; //Payload: Maybe used to select right Widget
 800be6a:	2305      	movs	r3, #5
 800be6c:	60e3      	str	r3, [r4, #12]
       	  pMsg->MsgId = WM_USER; //Message
 800be6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be72:	6023      	str	r3, [r4, #0]
       	  WM_SendMessage (SettingsButtonWindow, pMsg);
 800be74:	4d17      	ldr	r5, [pc, #92]	; (800bed4 <_cbDialog+0x2c8>)
 800be76:	4621      	mov	r1, r4
 800be78:	6828      	ldr	r0, [r5, #0]
 800be7a:	f00b fcf3 	bl	8017864 <WM_SendMessage>
       	  WM_Invalidate(SettingsButtonWindow);
 800be7e:	6828      	ldr	r0, [r5, #0]
 800be80:	f00b fd1a 	bl	80178b8 <WM_InvalidateWindow>
        break;
 800be84:	e782      	b.n	800bd8c <_cbDialog+0x180>
         else{TEXT_SetTextColor(WM_GetDialogItem(pMsg->hWin, ID_TEXT_4),GUI_LIGHTGRAY);}
 800be86:	f640 010b 	movw	r1, #2059	; 0x80b
 800be8a:	6860      	ldr	r0, [r4, #4]
 800be8c:	f00c ff1e 	bl	8018ccc <WM_GetDialogItem>
 800be90:	4907      	ldr	r1, [pc, #28]	; (800beb0 <_cbDialog+0x2a4>)
 800be92:	f00e fecb 	bl	801ac2c <TEXT_SetTextColor>
 800be96:	e7e8      	b.n	800be6a <_cbDialog+0x25e>
 800be98:	0800bf99 	.word	0x0800bf99
 800be9c:	0800bf59 	.word	0x0800bf59
 800bea0:	0800bf19 	.word	0x0800bf19
 800bea4:	0800bed9 	.word	0x0800bed9
 800bea8:	08032964 	.word	0x08032964
 800beac:	08028448 	.word	0x08028448
 800beb0:	ffd3d3d3 	.word	0xffd3d3d3
 800beb4:	0803296c 	.word	0x0803296c
 800beb8:	20008820 	.word	0x20008820
 800bebc:	ffffa500 	.word	0xffffa500
 800bec0:	08032970 	.word	0x08032970
 800bec4:	08032978 	.word	0x08032978
 800bec8:	08032984 	.word	0x08032984
 800becc:	2002eec8 	.word	0x2002eec8
 800bed0:	ff404040 	.word	0xff404040
 800bed4:	2002e594 	.word	0x2002e594

0800bed8 <_cbButton_ok>:
{
 800bed8:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 800beda:	6803      	ldr	r3, [r0, #0]
 800bedc:	2b0f      	cmp	r3, #15
 800bede:	d10f      	bne.n	800bf00 <_cbButton_ok+0x28>
    	if(!Button_okState){
 800bee0:	4b09      	ldr	r3, [pc, #36]	; (800bf08 <_cbButton_ok+0x30>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	b943      	cbnz	r3, 800bef8 <_cbButton_ok+0x20>
    		GUI_SetColor( GUI_LIGHTGRAY );
 800bee6:	4809      	ldr	r0, [pc, #36]	; (800bf0c <_cbButton_ok+0x34>)
 800bee8:	f004 fa14 	bl	8010314 <GUI_SetColor>
      GUI_DrawBitmap(&bmOK, 35, 0);
 800beec:	2200      	movs	r2, #0
 800beee:	2123      	movs	r1, #35	; 0x23
 800bef0:	4807      	ldr	r0, [pc, #28]	; (800bf10 <_cbButton_ok+0x38>)
 800bef2:	f005 f843 	bl	8010f7c <GUI_DrawBitmap>
}
 800bef6:	bd08      	pop	{r3, pc}
    		GUI_SetColor( GUI_ORANGE );
 800bef8:	4806      	ldr	r0, [pc, #24]	; (800bf14 <_cbButton_ok+0x3c>)
 800befa:	f004 fa0b 	bl	8010314 <GUI_SetColor>
 800befe:	e7f5      	b.n	800beec <_cbButton_ok+0x14>
      BUTTON_Callback(pMsg);
 800bf00:	f00e f9dc 	bl	801a2bc <BUTTON_Callback>
}
 800bf04:	e7f7      	b.n	800bef6 <_cbButton_ok+0x1e>
 800bf06:	bf00      	nop
 800bf08:	2002eec8 	.word	0x2002eec8
 800bf0c:	ffd3d3d3 	.word	0xffd3d3d3
 800bf10:	08022e40 	.word	0x08022e40
 800bf14:	ffffa500 	.word	0xffffa500

0800bf18 <_cbButton_add>:
{
 800bf18:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 800bf1a:	6803      	ldr	r3, [r0, #0]
 800bf1c:	2b0f      	cmp	r3, #15
 800bf1e:	d10f      	bne.n	800bf40 <_cbButton_add+0x28>
    	if(!Button_addState){
 800bf20:	4b09      	ldr	r3, [pc, #36]	; (800bf48 <_cbButton_add+0x30>)
 800bf22:	689b      	ldr	r3, [r3, #8]
 800bf24:	b943      	cbnz	r3, 800bf38 <_cbButton_add+0x20>
    		GUI_SetColor( GUI_LIGHTGRAY );
 800bf26:	4809      	ldr	r0, [pc, #36]	; (800bf4c <_cbButton_add+0x34>)
 800bf28:	f004 f9f4 	bl	8010314 <GUI_SetColor>
      GUI_DrawBitmap(&bmadd, 35, 0);
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	2123      	movs	r1, #35	; 0x23
 800bf30:	4807      	ldr	r0, [pc, #28]	; (800bf50 <_cbButton_add+0x38>)
 800bf32:	f005 f823 	bl	8010f7c <GUI_DrawBitmap>
}
 800bf36:	bd08      	pop	{r3, pc}
    		GUI_SetColor( GUI_ORANGE );
 800bf38:	4806      	ldr	r0, [pc, #24]	; (800bf54 <_cbButton_add+0x3c>)
 800bf3a:	f004 f9eb 	bl	8010314 <GUI_SetColor>
 800bf3e:	e7f5      	b.n	800bf2c <_cbButton_add+0x14>
      BUTTON_Callback(pMsg);
 800bf40:	f00e f9bc 	bl	801a2bc <BUTTON_Callback>
}
 800bf44:	e7f7      	b.n	800bf36 <_cbButton_add+0x1e>
 800bf46:	bf00      	nop
 800bf48:	20008820 	.word	0x20008820
 800bf4c:	ffd3d3d3 	.word	0xffd3d3d3
 800bf50:	08022e54 	.word	0x08022e54
 800bf54:	ffffa500 	.word	0xffffa500

0800bf58 <_cbButtonNetwork>:
{
 800bf58:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 800bf5a:	6803      	ldr	r3, [r0, #0]
 800bf5c:	2b0f      	cmp	r3, #15
 800bf5e:	d10f      	bne.n	800bf80 <_cbButtonNetwork+0x28>
    	if(!Button_NetworkState){
 800bf60:	4b09      	ldr	r3, [pc, #36]	; (800bf88 <_cbButtonNetwork+0x30>)
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	b943      	cbnz	r3, 800bf78 <_cbButtonNetwork+0x20>
    		GUI_SetColor( GUI_LIGHTGRAY );
 800bf66:	4809      	ldr	r0, [pc, #36]	; (800bf8c <_cbButtonNetwork+0x34>)
 800bf68:	f004 f9d4 	bl	8010314 <GUI_SetColor>
      GUI_DrawBitmap(&bmnetwork, 35, 0);
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	2123      	movs	r1, #35	; 0x23
 800bf70:	4807      	ldr	r0, [pc, #28]	; (800bf90 <_cbButtonNetwork+0x38>)
 800bf72:	f005 f803 	bl	8010f7c <GUI_DrawBitmap>
}
 800bf76:	bd08      	pop	{r3, pc}
    		GUI_SetColor( GUI_ORANGE );
 800bf78:	4806      	ldr	r0, [pc, #24]	; (800bf94 <_cbButtonNetwork+0x3c>)
 800bf7a:	f004 f9cb 	bl	8010314 <GUI_SetColor>
 800bf7e:	e7f5      	b.n	800bf6c <_cbButtonNetwork+0x14>
      BUTTON_Callback(pMsg);
 800bf80:	f00e f99c 	bl	801a2bc <BUTTON_Callback>
}
 800bf84:	e7f7      	b.n	800bf76 <_cbButtonNetwork+0x1e>
 800bf86:	bf00      	nop
 800bf88:	20008820 	.word	0x20008820
 800bf8c:	ffd3d3d3 	.word	0xffd3d3d3
 800bf90:	08022e68 	.word	0x08022e68
 800bf94:	ffffa500 	.word	0xffffa500

0800bf98 <_cbButton_spectrum>:
{
 800bf98:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 800bf9a:	6803      	ldr	r3, [r0, #0]
 800bf9c:	2b0f      	cmp	r3, #15
 800bf9e:	d10f      	bne.n	800bfc0 <_cbButton_spectrum+0x28>
    	if(!Button_spectrumState){
 800bfa0:	4b09      	ldr	r3, [pc, #36]	; (800bfc8 <_cbButton_spectrum+0x30>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	b943      	cbnz	r3, 800bfb8 <_cbButton_spectrum+0x20>
    		GUI_SetColor( GUI_LIGHTGRAY );
 800bfa6:	4809      	ldr	r0, [pc, #36]	; (800bfcc <_cbButton_spectrum+0x34>)
 800bfa8:	f004 f9b4 	bl	8010314 <GUI_SetColor>
      GUI_DrawBitmap(&bmspectrum, 35, 0);
 800bfac:	2200      	movs	r2, #0
 800bfae:	2123      	movs	r1, #35	; 0x23
 800bfb0:	4807      	ldr	r0, [pc, #28]	; (800bfd0 <_cbButton_spectrum+0x38>)
 800bfb2:	f004 ffe3 	bl	8010f7c <GUI_DrawBitmap>
}
 800bfb6:	bd08      	pop	{r3, pc}
    		GUI_SetColor( GUI_ORANGE );
 800bfb8:	4806      	ldr	r0, [pc, #24]	; (800bfd4 <_cbButton_spectrum+0x3c>)
 800bfba:	f004 f9ab 	bl	8010314 <GUI_SetColor>
 800bfbe:	e7f5      	b.n	800bfac <_cbButton_spectrum+0x14>
      BUTTON_Callback(pMsg);
 800bfc0:	f00e f97c 	bl	801a2bc <BUTTON_Callback>
}
 800bfc4:	e7f7      	b.n	800bfb6 <_cbButton_spectrum+0x1e>
 800bfc6:	bf00      	nop
 800bfc8:	20008820 	.word	0x20008820
 800bfcc:	ffd3d3d3 	.word	0xffd3d3d3
 800bfd0:	08022e7c 	.word	0x08022e7c
 800bfd4:	ffffa500 	.word	0xffffa500

0800bfd8 <CreateSettingsDialog>:
*/




WM_HWIN CreateSettingsDialog(void) {
 800bfd8:	b510      	push	{r4, lr}
 800bfda:	b082      	sub	sp, #8
  //SettingsButtonParent = parentRef;
  WM_HWIN hWin;

  hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
 800bfdc:	f00c fe0c 	bl	8018bf8 <WM_GetDesktopWindow>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	9301      	str	r3, [sp, #4]
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	4a05      	ldr	r2, [pc, #20]	; (800c000 <CreateSettingsDialog+0x28>)
 800bfea:	210a      	movs	r1, #10
 800bfec:	4805      	ldr	r0, [pc, #20]	; (800c004 <CreateSettingsDialog+0x2c>)
 800bfee:	f00e fc6f 	bl	801a8d0 <GUI_CreateDialogBox>
 800bff2:	4604      	mov	r4, r0

  WM_Paint(hWin);
 800bff4:	f00c ff96 	bl	8018f24 <WM_Paint>
  return hWin;
}
 800bff8:	4620      	mov	r0, r4
 800bffa:	b002      	add	sp, #8
 800bffc:	bd10      	pop	{r4, pc}
 800bffe:	bf00      	nop
 800c000:	0800bc0d 	.word	0x0800bc0d
 800c004:	08022e90 	.word	0x08022e90

0800c008 <_cbSettingsButtonDialog>:
  }
}


BUTTON_Handle hButton;
static void _cbSettingsButtonDialog(WM_MESSAGE * pMsg) {
 800c008:	b510      	push	{r4, lr}
 800c00a:	b084      	sub	sp, #16
  int           Id, NotificationCode;


  switch(pMsg->MsgId) {
 800c00c:	6803      	ldr	r3, [r0, #0]
 800c00e:	2b0f      	cmp	r3, #15
 800c010:	d02f      	beq.n	800c072 <_cbSettingsButtonDialog+0x6a>
 800c012:	4604      	mov	r4, r0
 800c014:	dd17      	ble.n	800c046 <_cbSettingsButtonDialog+0x3e>
 800c016:	2b26      	cmp	r3, #38	; 0x26
 800c018:	d031      	beq.n	800c07e <_cbSettingsButtonDialog+0x76>
 800c01a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c01e:	d156      	bne.n	800c0ce <_cbSettingsButtonDialog+0xc6>
    }
    break;
//////////////////////////////////////////////////////////////////
    case WM_USER:
    	//NotificationCode = pMsg->Data.v;
    	WM_DeleteWindow(SettingsDialog);
 800c020:	4b2d      	ldr	r3, [pc, #180]	; (800c0d8 <_cbSettingsButtonDialog+0xd0>)
 800c022:	6818      	ldr	r0, [r3, #0]
 800c024:	f00b fe7c 	bl	8017d20 <WM_DeleteWindow>
    	SettingsButtonState = !SettingsButtonState;
 800c028:	4a2c      	ldr	r2, [pc, #176]	; (800c0dc <_cbSettingsButtonDialog+0xd4>)
 800c02a:	6813      	ldr	r3, [r2, #0]
 800c02c:	fab3 f383 	clz	r3, r3
 800c030:	095b      	lsrs	r3, r3, #5
 800c032:	6013      	str	r3, [r2, #0]
    	if(SettingsButtonState){SettingsDialog = CreateSettingsDialog();}
 800c034:	2b00      	cmp	r3, #0
 800c036:	d145      	bne.n	800c0c4 <_cbSettingsButtonDialog+0xbc>
    	BUTTON_SetState(hButton, SettingsButtonState);
 800c038:	4b28      	ldr	r3, [pc, #160]	; (800c0dc <_cbSettingsButtonDialog+0xd4>)
 800c03a:	6819      	ldr	r1, [r3, #0]
 800c03c:	4b28      	ldr	r3, [pc, #160]	; (800c0e0 <_cbSettingsButtonDialog+0xd8>)
 800c03e:	6818      	ldr	r0, [r3, #0]
 800c040:	f00e fab6 	bl	801a5b0 <BUTTON_SetState>

    break;
 800c044:	e013      	b.n	800c06e <_cbSettingsButtonDialog+0x66>
  switch(pMsg->MsgId) {
 800c046:	2b01      	cmp	r3, #1
 800c048:	d141      	bne.n	800c0ce <_cbSettingsButtonDialog+0xc6>
    hButton = BUTTON_CreateEx(0, 0, 80, 80, pMsg->hWin, WM_CF_SHOW, 0, ID_SettingsButton);
 800c04a:	2301      	movs	r3, #1
 800c04c:	9303      	str	r3, [sp, #12]
 800c04e:	2000      	movs	r0, #0
 800c050:	9002      	str	r0, [sp, #8]
 800c052:	2302      	movs	r3, #2
 800c054:	9301      	str	r3, [sp, #4]
 800c056:	6863      	ldr	r3, [r4, #4]
 800c058:	9300      	str	r3, [sp, #0]
 800c05a:	2350      	movs	r3, #80	; 0x50
 800c05c:	461a      	mov	r2, r3
 800c05e:	4601      	mov	r1, r0
 800c060:	f00e f9e4 	bl	801a42c <BUTTON_CreateEx>
 800c064:	4b1e      	ldr	r3, [pc, #120]	; (800c0e0 <_cbSettingsButtonDialog+0xd8>)
 800c066:	6018      	str	r0, [r3, #0]
    WM_SetCallback(hButton, _cbButton_spectrum);
 800c068:	491e      	ldr	r1, [pc, #120]	; (800c0e4 <_cbSettingsButtonDialog+0xdc>)
 800c06a:	f00c ffb1 	bl	8018fd0 <WM_SetCallback>
/////////////////////////////////////////////////////////////////
   default:
    WM_DefaultProc(pMsg);
  }

}
 800c06e:	b004      	add	sp, #16
 800c070:	bd10      	pop	{r4, pc}
    GUI_SetBkColor(GUI_DARKGRAY);
 800c072:	481d      	ldr	r0, [pc, #116]	; (800c0e8 <_cbSettingsButtonDialog+0xe0>)
 800c074:	f004 f942 	bl	80102fc <GUI_SetBkColor>
    GUI_Clear();
 800c078:	f004 fa50 	bl	801051c <GUI_Clear>
    break;
 800c07c:	e7f7      	b.n	800c06e <_cbSettingsButtonDialog+0x66>
    Id    = WM_GetId(pMsg->hWinSrc);
 800c07e:	6880      	ldr	r0, [r0, #8]
 800c080:	f00c fea4 	bl	8018dcc <WM_GetId>
    NotificationCode = pMsg->Data.v;
 800c084:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 800c086:	2801      	cmp	r0, #1
 800c088:	d1f1      	bne.n	800c06e <_cbSettingsButtonDialog+0x66>
      switch(NotificationCode) {
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d1ef      	bne.n	800c06e <_cbSettingsButtonDialog+0x66>
    	  SettingsButtonState = !SettingsButtonState;
 800c08e:	4a13      	ldr	r2, [pc, #76]	; (800c0dc <_cbSettingsButtonDialog+0xd4>)
 800c090:	6813      	ldr	r3, [r2, #0]
 800c092:	fab3 f383 	clz	r3, r3
 800c096:	095b      	lsrs	r3, r3, #5
 800c098:	6013      	str	r3, [r2, #0]
    	  if(SettingsButtonState){
 800c09a:	b14b      	cbz	r3, 800c0b0 <_cbSettingsButtonDialog+0xa8>
    	      SettingsDialog = CreateSettingsDialog();
 800c09c:	f7ff ff9c 	bl	800bfd8 <CreateSettingsDialog>
 800c0a0:	4b0d      	ldr	r3, [pc, #52]	; (800c0d8 <_cbSettingsButtonDialog+0xd0>)
 800c0a2:	6018      	str	r0, [r3, #0]
    	      BUTTON_SetState(hButton, 1);
 800c0a4:	2101      	movs	r1, #1
 800c0a6:	4b0e      	ldr	r3, [pc, #56]	; (800c0e0 <_cbSettingsButtonDialog+0xd8>)
 800c0a8:	6818      	ldr	r0, [r3, #0]
 800c0aa:	f00e fa81 	bl	801a5b0 <BUTTON_SetState>
 800c0ae:	e7de      	b.n	800c06e <_cbSettingsButtonDialog+0x66>
    	      WM_DeleteWindow(SettingsDialog);
 800c0b0:	4b09      	ldr	r3, [pc, #36]	; (800c0d8 <_cbSettingsButtonDialog+0xd0>)
 800c0b2:	6818      	ldr	r0, [r3, #0]
 800c0b4:	f00b fe34 	bl	8017d20 <WM_DeleteWindow>
    	      BUTTON_SetState(hButton, 0);
 800c0b8:	2100      	movs	r1, #0
 800c0ba:	4b09      	ldr	r3, [pc, #36]	; (800c0e0 <_cbSettingsButtonDialog+0xd8>)
 800c0bc:	6818      	ldr	r0, [r3, #0]
 800c0be:	f00e fa77 	bl	801a5b0 <BUTTON_SetState>
 800c0c2:	e7d4      	b.n	800c06e <_cbSettingsButtonDialog+0x66>
    	if(SettingsButtonState){SettingsDialog = CreateSettingsDialog();}
 800c0c4:	f7ff ff88 	bl	800bfd8 <CreateSettingsDialog>
 800c0c8:	4b03      	ldr	r3, [pc, #12]	; (800c0d8 <_cbSettingsButtonDialog+0xd0>)
 800c0ca:	6018      	str	r0, [r3, #0]
 800c0cc:	e7b4      	b.n	800c038 <_cbSettingsButtonDialog+0x30>
    WM_DefaultProc(pMsg);
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	f00c fab4 	bl	801863c <WM_DefaultProc>
}
 800c0d4:	e7cb      	b.n	800c06e <_cbSettingsButtonDialog+0x66>
 800c0d6:	bf00      	nop
 800c0d8:	2002e5cc 	.word	0x2002e5cc
 800c0dc:	2000882c 	.word	0x2000882c
 800c0e0:	20030624 	.word	0x20030624
 800c0e4:	0800c0ed 	.word	0x0800c0ed
 800c0e8:	ff404040 	.word	0xff404040

0800c0ec <_cbButton_spectrum>:
{
 800c0ec:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 800c0ee:	6803      	ldr	r3, [r0, #0]
 800c0f0:	2b0f      	cmp	r3, #15
 800c0f2:	d110      	bne.n	800c116 <_cbButton_spectrum+0x2a>
    	if(SettingsButtonState == 1){
 800c0f4:	4b09      	ldr	r3, [pc, #36]	; (800c11c <_cbButton_spectrum+0x30>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d008      	beq.n	800c10e <_cbButton_spectrum+0x22>
    		GUI_SetColor( GUI_GRAY );
 800c0fc:	4808      	ldr	r0, [pc, #32]	; (800c120 <_cbButton_spectrum+0x34>)
 800c0fe:	f004 f909 	bl	8010314 <GUI_SetColor>
      GUI_DrawBitmap(&bmmenu, 0, 0);
 800c102:	2200      	movs	r2, #0
 800c104:	4611      	mov	r1, r2
 800c106:	4807      	ldr	r0, [pc, #28]	; (800c124 <_cbButton_spectrum+0x38>)
 800c108:	f004 ff38 	bl	8010f7c <GUI_DrawBitmap>
}
 800c10c:	bd08      	pop	{r3, pc}
    		GUI_SetColor( GUI_ORANGE );
 800c10e:	4806      	ldr	r0, [pc, #24]	; (800c128 <_cbButton_spectrum+0x3c>)
 800c110:	f004 f900 	bl	8010314 <GUI_SetColor>
 800c114:	e7f5      	b.n	800c102 <_cbButton_spectrum+0x16>
      BUTTON_Callback(pMsg);
 800c116:	f00e f8d1 	bl	801a2bc <BUTTON_Callback>
}
 800c11a:	e7f7      	b.n	800c10c <_cbButton_spectrum+0x20>
 800c11c:	2000882c 	.word	0x2000882c
 800c120:	ff808080 	.word	0xff808080
 800c124:	08025e10 	.word	0x08025e10
 800c128:	ffffa500 	.word	0xffffa500

0800c12c <CreateSettingsButtonWindow>:


WM_HWIN CreateSettingsButtonWindow(void) {
 800c12c:	b510      	push	{r4, lr}
 800c12e:	b084      	sub	sp, #16



  SettingsButtonWindow = WM_CreateWindow(50, 350, 80, 80, WM_CF_HIDE, _cbSettingsButtonDialog, 0);
 800c130:	2300      	movs	r3, #0
 800c132:	9302      	str	r3, [sp, #8]
 800c134:	4a08      	ldr	r2, [pc, #32]	; (800c158 <CreateSettingsButtonWindow+0x2c>)
 800c136:	9201      	str	r2, [sp, #4]
 800c138:	9300      	str	r3, [sp, #0]
 800c13a:	2350      	movs	r3, #80	; 0x50
 800c13c:	461a      	mov	r2, r3
 800c13e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800c142:	2032      	movs	r0, #50	; 0x32
 800c144:	f00b fd02 	bl	8017b4c <WM_CreateWindow>
 800c148:	4c04      	ldr	r4, [pc, #16]	; (800c15c <CreateSettingsButtonWindow+0x30>)
 800c14a:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 800c14c:	2001      	movs	r0, #1
 800c14e:	f00d f96f 	bl	8019430 <WM_MULTIBUF_Enable>

  return SettingsButtonWindow;
}
 800c152:	6820      	ldr	r0, [r4, #0]
 800c154:	b004      	add	sp, #16
 800c156:	bd10      	pop	{r4, pc}
 800c158:	0800c009 	.word	0x0800c009
 800c15c:	2002e594 	.word	0x2002e594

0800c160 <_cbDialog>:
}




static void _cbDialog(WM_MESSAGE * pMsg) {
 800c160:	b510      	push	{r4, lr}
 800c162:	b084      	sub	sp, #16
  int           Id, NotificationCode;


  switch(pMsg->MsgId) {
 800c164:	6803      	ldr	r3, [r0, #0]
 800c166:	2b0f      	cmp	r3, #15
 800c168:	d02f      	beq.n	800c1ca <_cbDialog+0x6a>
 800c16a:	4604      	mov	r4, r0
 800c16c:	dd16      	ble.n	800c19c <_cbDialog+0x3c>
 800c16e:	2b26      	cmp	r3, #38	; 0x26
 800c170:	d04b      	beq.n	800c20a <_cbDialog+0xaa>
 800c172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c176:	f040 80c6 	bne.w	800c306 <_cbDialog+0x1a6>
    }
    break;
//////////////////////////////////////////////////////////////////
    case WM_USER:
    	//#########UPDATE Color & value#############//
		if(pMsg->Data.v==0){
 800c17a:	68c3      	ldr	r3, [r0, #12]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f000 80b7 	beq.w	800c2f0 <_cbDialog+0x190>
		    value = attack.value;
		}
		//#########################################//

		//#########Remote unselect#################//
		else if(pMsg->Data.v==1){
 800c182:	2b01      	cmp	r3, #1
 800c184:	d11f      	bne.n	800c1c6 <_cbDialog+0x66>
			Enc_AttackSelected = !Enc_AttackSelected;
 800c186:	4b62      	ldr	r3, [pc, #392]	; (800c310 <_cbDialog+0x1b0>)
 800c188:	68d9      	ldr	r1, [r3, #12]
 800c18a:	fab1 f181 	clz	r1, r1
 800c18e:	0949      	lsrs	r1, r1, #5
 800c190:	60d9      	str	r1, [r3, #12]
			BUTTON_SetState(hButton, Enc_AttackSelected);
 800c192:	4b60      	ldr	r3, [pc, #384]	; (800c314 <_cbDialog+0x1b4>)
 800c194:	6818      	ldr	r0, [r3, #0]
 800c196:	f00e fa0b 	bl	801a5b0 <BUTTON_SetState>
 800c19a:	e014      	b.n	800c1c6 <_cbDialog+0x66>
  switch(pMsg->MsgId) {
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	f040 80b2 	bne.w	800c306 <_cbDialog+0x1a6>
   hButton = BUTTON_CreateEx(0, 0, 140, 100, pMsg->hWin, WM_CF_SHOW, 0, ID_ENC_Button);
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	9303      	str	r3, [sp, #12]
 800c1a6:	2000      	movs	r0, #0
 800c1a8:	9002      	str	r0, [sp, #8]
 800c1aa:	2302      	movs	r3, #2
 800c1ac:	9301      	str	r3, [sp, #4]
 800c1ae:	6863      	ldr	r3, [r4, #4]
 800c1b0:	9300      	str	r3, [sp, #0]
 800c1b2:	2364      	movs	r3, #100	; 0x64
 800c1b4:	228c      	movs	r2, #140	; 0x8c
 800c1b6:	4601      	mov	r1, r0
 800c1b8:	f00e f938 	bl	801a42c <BUTTON_CreateEx>
 800c1bc:	4b55      	ldr	r3, [pc, #340]	; (800c314 <_cbDialog+0x1b4>)
 800c1be:	6018      	str	r0, [r3, #0]
   WM_SetCallback(hButton, _cbENC_Button);
 800c1c0:	4955      	ldr	r1, [pc, #340]	; (800c318 <_cbDialog+0x1b8>)
 800c1c2:	f00c ff05 	bl	8018fd0 <WM_SetCallback>
    break;
/////////////////////////////////////////////////////////////////
   default:
    WM_DefaultProc(pMsg);
  }
}
 800c1c6:	b004      	add	sp, #16
 800c1c8:	bd10      	pop	{r4, pc}
  	GUI_SetBkColor(COLOR);
 800c1ca:	4c51      	ldr	r4, [pc, #324]	; (800c310 <_cbDialog+0x1b0>)
 800c1cc:	6820      	ldr	r0, [r4, #0]
 800c1ce:	f004 f895 	bl	80102fc <GUI_SetBkColor>
  	GUI_Clear();
 800c1d2:	f004 f9a3 	bl	801051c <GUI_Clear>
    GUI_SetColor(TEXTCOLOR);
 800c1d6:	6860      	ldr	r0, [r4, #4]
 800c1d8:	f004 f89c 	bl	8010314 <GUI_SetColor>
    GUI_SetFont(&GUI_Font32B_1);
 800c1dc:	484f      	ldr	r0, [pc, #316]	; (800c31c <_cbDialog+0x1bc>)
 800c1de:	f004 f8fb 	bl	80103d8 <GUI_SetFont>
    GUI_DispStringAt("attack", 0, 0);
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	4611      	mov	r1, r2
 800c1e6:	484e      	ldr	r0, [pc, #312]	; (800c320 <_cbDialog+0x1c0>)
 800c1e8:	f004 fdc0 	bl	8010d6c <GUI_DispStringAt>
    GUI_SetFont(&GUI_FontD36x48);
 800c1ec:	484d      	ldr	r0, [pc, #308]	; (800c324 <_cbDialog+0x1c4>)
 800c1ee:	f004 f8f3 	bl	80103d8 <GUI_SetFont>
    GUI_GotoXY(0,30);
 800c1f2:	211e      	movs	r1, #30
 800c1f4:	2000      	movs	r0, #0
 800c1f6:	f004 f823 	bl	8010240 <GUI_GotoXY>
    GUI_DispFloatMin(value, 1);
 800c1fa:	ed94 0a02 	vldr	s0, [r4, #8]
 800c1fe:	2001      	movs	r0, #1
 800c200:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c204:	f005 fb8e 	bl	8011924 <GUI_DispFloatMin>
    break;
 800c208:	e7dd      	b.n	800c1c6 <_cbDialog+0x66>
    Id    = WM_GetId(pMsg->hWinSrc);
 800c20a:	6880      	ldr	r0, [r0, #8]
 800c20c:	f00c fdde 	bl	8018dcc <WM_GetId>
    NotificationCode = pMsg->Data.v;
 800c210:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 800c212:	2801      	cmp	r0, #1
 800c214:	d1d7      	bne.n	800c1c6 <_cbDialog+0x66>
      switch(NotificationCode) {
 800c216:	2b01      	cmp	r3, #1
 800c218:	d1d5      	bne.n	800c1c6 <_cbDialog+0x66>
		  if 	  (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 800c21a:	4b43      	ldr	r3, [pc, #268]	; (800c328 <_cbDialog+0x1c8>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	b9eb      	cbnz	r3, 800c25c <_cbDialog+0xfc>
		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 800c220:	4b42      	ldr	r3, [pc, #264]	; (800c32c <_cbDialog+0x1cc>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d131      	bne.n	800c28c <_cbDialog+0x12c>
		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 800c228:	4b41      	ldr	r3, [pc, #260]	; (800c330 <_cbDialog+0x1d0>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d138      	bne.n	800c2a2 <_cbDialog+0x142>
		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 800c230:	4b40      	ldr	r3, [pc, #256]	; (800c334 <_cbDialog+0x1d4>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d13f      	bne.n	800c2b8 <_cbDialog+0x158>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 800c238:	4b3f      	ldr	r3, [pc, #252]	; (800c338 <_cbDialog+0x1d8>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d146      	bne.n	800c2ce <_cbDialog+0x16e>
		  else if (Enc_InputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_InputWindow, pMsg);}
 800c240:	4b3e      	ldr	r3, [pc, #248]	; (800c33c <_cbDialog+0x1dc>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	b1a3      	cbz	r3, 800c270 <_cbDialog+0x110>
 800c246:	2301      	movs	r3, #1
 800c248:	60e3      	str	r3, [r4, #12]
 800c24a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c24e:	6023      	str	r3, [r4, #0]
 800c250:	4621      	mov	r1, r4
 800c252:	4b3b      	ldr	r3, [pc, #236]	; (800c340 <_cbDialog+0x1e0>)
 800c254:	6818      	ldr	r0, [r3, #0]
 800c256:	f00b fb05 	bl	8017864 <WM_SendMessage>
 800c25a:	e009      	b.n	800c270 <_cbDialog+0x110>
		  if 	  (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 800c25c:	2301      	movs	r3, #1
 800c25e:	60e3      	str	r3, [r4, #12]
 800c260:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c264:	6023      	str	r3, [r4, #0]
 800c266:	4621      	mov	r1, r4
 800c268:	4b36      	ldr	r3, [pc, #216]	; (800c344 <_cbDialog+0x1e4>)
 800c26a:	6818      	ldr	r0, [r3, #0]
 800c26c:	f00b fafa 	bl	8017864 <WM_SendMessage>
    	  Enc_AttackSelected = !Enc_AttackSelected;
 800c270:	4a27      	ldr	r2, [pc, #156]	; (800c310 <_cbDialog+0x1b0>)
 800c272:	68d3      	ldr	r3, [r2, #12]
 800c274:	fab3 f383 	clz	r3, r3
 800c278:	095b      	lsrs	r3, r3, #5
 800c27a:	60d3      	str	r3, [r2, #12]
    	  if(Enc_AttackSelected){
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d031      	beq.n	800c2e4 <_cbDialog+0x184>
    	      BUTTON_SetState(hButton, 1);
 800c280:	2101      	movs	r1, #1
 800c282:	4b24      	ldr	r3, [pc, #144]	; (800c314 <_cbDialog+0x1b4>)
 800c284:	6818      	ldr	r0, [r3, #0]
 800c286:	f00e f993 	bl	801a5b0 <BUTTON_SetState>
 800c28a:	e79c      	b.n	800c1c6 <_cbDialog+0x66>
		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 800c28c:	2301      	movs	r3, #1
 800c28e:	60e3      	str	r3, [r4, #12]
 800c290:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	4621      	mov	r1, r4
 800c298:	4b2b      	ldr	r3, [pc, #172]	; (800c348 <_cbDialog+0x1e8>)
 800c29a:	6818      	ldr	r0, [r3, #0]
 800c29c:	f00b fae2 	bl	8017864 <WM_SendMessage>
 800c2a0:	e7e6      	b.n	800c270 <_cbDialog+0x110>
		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	60e3      	str	r3, [r4, #12]
 800c2a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2aa:	6023      	str	r3, [r4, #0]
 800c2ac:	4621      	mov	r1, r4
 800c2ae:	4b27      	ldr	r3, [pc, #156]	; (800c34c <_cbDialog+0x1ec>)
 800c2b0:	6818      	ldr	r0, [r3, #0]
 800c2b2:	f00b fad7 	bl	8017864 <WM_SendMessage>
 800c2b6:	e7db      	b.n	800c270 <_cbDialog+0x110>
		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	60e3      	str	r3, [r4, #12]
 800c2bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2c0:	6023      	str	r3, [r4, #0]
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	4b22      	ldr	r3, [pc, #136]	; (800c350 <_cbDialog+0x1f0>)
 800c2c6:	6818      	ldr	r0, [r3, #0]
 800c2c8:	f00b facc 	bl	8017864 <WM_SendMessage>
 800c2cc:	e7d0      	b.n	800c270 <_cbDialog+0x110>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	60e3      	str	r3, [r4, #12]
 800c2d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2d6:	6023      	str	r3, [r4, #0]
 800c2d8:	4621      	mov	r1, r4
 800c2da:	4b1e      	ldr	r3, [pc, #120]	; (800c354 <_cbDialog+0x1f4>)
 800c2dc:	6818      	ldr	r0, [r3, #0]
 800c2de:	f00b fac1 	bl	8017864 <WM_SendMessage>
 800c2e2:	e7c5      	b.n	800c270 <_cbDialog+0x110>
    	      BUTTON_SetState(hButton, 0);
 800c2e4:	2100      	movs	r1, #0
 800c2e6:	4b0b      	ldr	r3, [pc, #44]	; (800c314 <_cbDialog+0x1b4>)
 800c2e8:	6818      	ldr	r0, [r3, #0]
 800c2ea:	f00e f961 	bl	801a5b0 <BUTTON_SetState>
 800c2ee:	e76a      	b.n	800c1c6 <_cbDialog+0x66>
			TEXTCOLOR = attack.Color;
 800c2f0:	4a19      	ldr	r2, [pc, #100]	; (800c358 <_cbDialog+0x1f8>)
 800c2f2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800c2f4:	4b06      	ldr	r3, [pc, #24]	; (800c310 <_cbDialog+0x1b0>)
 800c2f6:	6059      	str	r1, [r3, #4]
		    value = attack.value;
 800c2f8:	edd2 7a00 	vldr	s15, [r2]
 800c2fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c300:	edc3 7a02 	vstr	s15, [r3, #8]
 800c304:	e75f      	b.n	800c1c6 <_cbDialog+0x66>
    WM_DefaultProc(pMsg);
 800c306:	4620      	mov	r0, r4
 800c308:	f00c f998 	bl	801863c <WM_DefaultProc>
}
 800c30c:	e75b      	b.n	800c1c6 <_cbDialog+0x66>
 800c30e:	bf00      	nop
 800c310:	20008830 	.word	0x20008830
 800c314:	20030624 	.word	0x20030624
 800c318:	0800c35d 	.word	0x0800c35d
 800c31c:	08028448 	.word	0x08028448
 800c320:	080328e8 	.word	0x080328e8
 800c324:	08030454 	.word	0x08030454
 800c328:	20008850 	.word	0x20008850
 800c32c:	20008874 	.word	0x20008874
 800c330:	20008888 	.word	0x20008888
 800c334:	2000889c 	.word	0x2000889c
 800c338:	200088ac 	.word	0x200088ac
 800c33c:	20008864 	.word	0x20008864
 800c340:	2002e6e4 	.word	0x2002e6e4
 800c344:	2002ede8 	.word	0x2002ede8
 800c348:	2002e894 	.word	0x2002e894
 800c34c:	2002e51c 	.word	0x2002e51c
 800c350:	2002e598 	.word	0x2002e598
 800c354:	2002f138 	.word	0x2002f138
 800c358:	2002e5d0 	.word	0x2002e5d0

0800c35c <_cbENC_Button>:
{
 800c35c:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 800c35e:	6803      	ldr	r3, [r0, #0]
 800c360:	2b0f      	cmp	r3, #15
 800c362:	d10b      	bne.n	800c37c <_cbENC_Button+0x20>
    	if(Enc_AttackSelected == 1){
 800c364:	4b07      	ldr	r3, [pc, #28]	; (800c384 <_cbENC_Button+0x28>)
 800c366:	68db      	ldr	r3, [r3, #12]
 800c368:	2b01      	cmp	r3, #1
 800c36a:	d003      	beq.n	800c374 <_cbENC_Button+0x18>
    	    	COLOR = GUI_DARKGRAY;
 800c36c:	4b05      	ldr	r3, [pc, #20]	; (800c384 <_cbENC_Button+0x28>)
 800c36e:	4a06      	ldr	r2, [pc, #24]	; (800c388 <_cbENC_Button+0x2c>)
 800c370:	601a      	str	r2, [r3, #0]
}
 800c372:	bd08      	pop	{r3, pc}
    			COLOR = GUI_GRAY;
 800c374:	4b03      	ldr	r3, [pc, #12]	; (800c384 <_cbENC_Button+0x28>)
 800c376:	4a05      	ldr	r2, [pc, #20]	; (800c38c <_cbENC_Button+0x30>)
 800c378:	601a      	str	r2, [r3, #0]
 800c37a:	e7fa      	b.n	800c372 <_cbENC_Button+0x16>
      BUTTON_Callback(pMsg);
 800c37c:	f00d ff9e 	bl	801a2bc <BUTTON_Callback>
}
 800c380:	e7f7      	b.n	800c372 <_cbENC_Button+0x16>
 800c382:	bf00      	nop
 800c384:	20008830 	.word	0x20008830
 800c388:	ff404040 	.word	0xff404040
 800c38c:	ff808080 	.word	0xff808080

0800c390 <CreateEnc_AttackWindow>:


WM_HWIN CreateEnc_AttackWindow(void) {
 800c390:	b510      	push	{r4, lr}
 800c392:	b084      	sub	sp, #16

	Enc_AttackWindow = WM_CreateWindow(20, 130, 180, 100, WM_CF_HIDE, _cbDialog, 0);
 800c394:	2300      	movs	r3, #0
 800c396:	9302      	str	r3, [sp, #8]
 800c398:	4a08      	ldr	r2, [pc, #32]	; (800c3bc <CreateEnc_AttackWindow+0x2c>)
 800c39a:	9201      	str	r2, [sp, #4]
 800c39c:	9300      	str	r3, [sp, #0]
 800c39e:	2364      	movs	r3, #100	; 0x64
 800c3a0:	22b4      	movs	r2, #180	; 0xb4
 800c3a2:	2182      	movs	r1, #130	; 0x82
 800c3a4:	2014      	movs	r0, #20
 800c3a6:	f00b fbd1 	bl	8017b4c <WM_CreateWindow>
 800c3aa:	4c05      	ldr	r4, [pc, #20]	; (800c3c0 <CreateEnc_AttackWindow+0x30>)
 800c3ac:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 800c3ae:	2001      	movs	r0, #1
 800c3b0:	f00d f83e 	bl	8019430 <WM_MULTIBUF_Enable>

  return Enc_AttackWindow;
}
 800c3b4:	6820      	ldr	r0, [r4, #0]
 800c3b6:	b004      	add	sp, #16
 800c3b8:	bd10      	pop	{r4, pc}
 800c3ba:	bf00      	nop
 800c3bc:	0800c161 	.word	0x0800c161
 800c3c0:	2002eecc 	.word	0x2002eecc

0800c3c4 <_cbDialog>:
}




static void _cbDialog(WM_MESSAGE * pMsg) {
 800c3c4:	b510      	push	{r4, lr}
 800c3c6:	b084      	sub	sp, #16
  int           Id, NotificationCode;


  switch(pMsg->MsgId) {
 800c3c8:	6803      	ldr	r3, [r0, #0]
 800c3ca:	2b0f      	cmp	r3, #15
 800c3cc:	d02e      	beq.n	800c42c <_cbDialog+0x68>
 800c3ce:	4604      	mov	r4, r0
 800c3d0:	dd15      	ble.n	800c3fe <_cbDialog+0x3a>
 800c3d2:	2b26      	cmp	r3, #38	; 0x26
 800c3d4:	d04a      	beq.n	800c46c <_cbDialog+0xa8>
 800c3d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c3da:	f040 80c4 	bne.w	800c566 <_cbDialog+0x1a2>
    }
    break;
//////////////////////////////////////////////////////////////////
    case WM_USER:
    	//#########UPDATE Color & value#############//
    		if(pMsg->Data.v==0){
 800c3de:	68c3      	ldr	r3, [r0, #12]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f000 80b5 	beq.w	800c550 <_cbDialog+0x18c>
    			 value = distortion.value;
    		}
    		//#########################################//

    		//#########Remote unselect#################//
    		else if(pMsg->Data.v==1){
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d11e      	bne.n	800c428 <_cbDialog+0x64>
    			Enc_DistortionSelected = !Enc_DistortionSelected;
 800c3ea:	4b61      	ldr	r3, [pc, #388]	; (800c570 <_cbDialog+0x1ac>)
 800c3ec:	6919      	ldr	r1, [r3, #16]
 800c3ee:	fab1 f181 	clz	r1, r1
 800c3f2:	0949      	lsrs	r1, r1, #5
 800c3f4:	6119      	str	r1, [r3, #16]
    			BUTTON_SetState(hButton, Enc_DistortionSelected);
 800c3f6:	6818      	ldr	r0, [r3, #0]
 800c3f8:	f00e f8da 	bl	801a5b0 <BUTTON_SetState>
 800c3fc:	e014      	b.n	800c428 <_cbDialog+0x64>
  switch(pMsg->MsgId) {
 800c3fe:	2b01      	cmp	r3, #1
 800c400:	f040 80b1 	bne.w	800c566 <_cbDialog+0x1a2>
   hButton = BUTTON_CreateEx(0, 0, 200, 100, pMsg->hWin, WM_CF_SHOW, 0, ID_ENC_Button);
 800c404:	2301      	movs	r3, #1
 800c406:	9303      	str	r3, [sp, #12]
 800c408:	2000      	movs	r0, #0
 800c40a:	9002      	str	r0, [sp, #8]
 800c40c:	2302      	movs	r3, #2
 800c40e:	9301      	str	r3, [sp, #4]
 800c410:	6863      	ldr	r3, [r4, #4]
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	2364      	movs	r3, #100	; 0x64
 800c416:	22c8      	movs	r2, #200	; 0xc8
 800c418:	4601      	mov	r1, r0
 800c41a:	f00e f807 	bl	801a42c <BUTTON_CreateEx>
 800c41e:	4b54      	ldr	r3, [pc, #336]	; (800c570 <_cbDialog+0x1ac>)
 800c420:	6018      	str	r0, [r3, #0]
   WM_SetCallback(hButton, _cbENC_Button);
 800c422:	4954      	ldr	r1, [pc, #336]	; (800c574 <_cbDialog+0x1b0>)
 800c424:	f00c fdd4 	bl	8018fd0 <WM_SetCallback>
    break;
/////////////////////////////////////////////////////////////////
   default:
    WM_DefaultProc(pMsg);
  }
}
 800c428:	b004      	add	sp, #16
 800c42a:	bd10      	pop	{r4, pc}
  	GUI_SetBkColor(COLOR);
 800c42c:	4c50      	ldr	r4, [pc, #320]	; (800c570 <_cbDialog+0x1ac>)
 800c42e:	6860      	ldr	r0, [r4, #4]
 800c430:	f003 ff64 	bl	80102fc <GUI_SetBkColor>
  	GUI_Clear();
 800c434:	f004 f872 	bl	801051c <GUI_Clear>
      GUI_SetColor(TEXTCOLOR);
 800c438:	68a0      	ldr	r0, [r4, #8]
 800c43a:	f003 ff6b 	bl	8010314 <GUI_SetColor>
      GUI_SetFont(&GUI_Font32B_1);
 800c43e:	484e      	ldr	r0, [pc, #312]	; (800c578 <_cbDialog+0x1b4>)
 800c440:	f003 ffca 	bl	80103d8 <GUI_SetFont>
      GUI_DispStringAt("distortion", 0, 0);
 800c444:	2200      	movs	r2, #0
 800c446:	4611      	mov	r1, r2
 800c448:	484c      	ldr	r0, [pc, #304]	; (800c57c <_cbDialog+0x1b8>)
 800c44a:	f004 fc8f 	bl	8010d6c <GUI_DispStringAt>
      GUI_SetFont(&GUI_FontD36x48);
 800c44e:	484c      	ldr	r0, [pc, #304]	; (800c580 <_cbDialog+0x1bc>)
 800c450:	f003 ffc2 	bl	80103d8 <GUI_SetFont>
      GUI_GotoXY(0,30);
 800c454:	211e      	movs	r1, #30
 800c456:	2000      	movs	r0, #0
 800c458:	f003 fef2 	bl	8010240 <GUI_GotoXY>
      GUI_DispFloatMin(value, 1);
 800c45c:	ed94 0a03 	vldr	s0, [r4, #12]
 800c460:	2001      	movs	r0, #1
 800c462:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c466:	f005 fa5d 	bl	8011924 <GUI_DispFloatMin>
    break;
 800c46a:	e7dd      	b.n	800c428 <_cbDialog+0x64>
    Id    = WM_GetId(pMsg->hWinSrc);
 800c46c:	6880      	ldr	r0, [r0, #8]
 800c46e:	f00c fcad 	bl	8018dcc <WM_GetId>
    NotificationCode = pMsg->Data.v;
 800c472:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 800c474:	2801      	cmp	r0, #1
 800c476:	d1d7      	bne.n	800c428 <_cbDialog+0x64>
      switch(NotificationCode) {
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d1d5      	bne.n	800c428 <_cbDialog+0x64>
		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 800c47c:	4b41      	ldr	r3, [pc, #260]	; (800c584 <_cbDialog+0x1c0>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	b9eb      	cbnz	r3, 800c4be <_cbDialog+0xfa>
		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 800c482:	4b41      	ldr	r3, [pc, #260]	; (800c588 <_cbDialog+0x1c4>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d130      	bne.n	800c4ec <_cbDialog+0x128>
		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 800c48a:	4b40      	ldr	r3, [pc, #256]	; (800c58c <_cbDialog+0x1c8>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d137      	bne.n	800c502 <_cbDialog+0x13e>
		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 800c492:	4b3f      	ldr	r3, [pc, #252]	; (800c590 <_cbDialog+0x1cc>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d13e      	bne.n	800c518 <_cbDialog+0x154>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 800c49a:	4b3e      	ldr	r3, [pc, #248]	; (800c594 <_cbDialog+0x1d0>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d145      	bne.n	800c52e <_cbDialog+0x16a>
		  else if (Enc_InputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_InputWindow, pMsg);}
 800c4a2:	4b3d      	ldr	r3, [pc, #244]	; (800c598 <_cbDialog+0x1d4>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	b1a3      	cbz	r3, 800c4d2 <_cbDialog+0x10e>
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	60e3      	str	r3, [r4, #12]
 800c4ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4b0:	6023      	str	r3, [r4, #0]
 800c4b2:	4621      	mov	r1, r4
 800c4b4:	4b39      	ldr	r3, [pc, #228]	; (800c59c <_cbDialog+0x1d8>)
 800c4b6:	6818      	ldr	r0, [r3, #0]
 800c4b8:	f00b f9d4 	bl	8017864 <WM_SendMessage>
 800c4bc:	e009      	b.n	800c4d2 <_cbDialog+0x10e>
		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 800c4be:	2301      	movs	r3, #1
 800c4c0:	60e3      	str	r3, [r4, #12]
 800c4c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4c6:	6023      	str	r3, [r4, #0]
 800c4c8:	4621      	mov	r1, r4
 800c4ca:	4b35      	ldr	r3, [pc, #212]	; (800c5a0 <_cbDialog+0x1dc>)
 800c4cc:	6818      	ldr	r0, [r3, #0]
 800c4ce:	f00b f9c9 	bl	8017864 <WM_SendMessage>
    	  Enc_DistortionSelected = !Enc_DistortionSelected;
 800c4d2:	4a27      	ldr	r2, [pc, #156]	; (800c570 <_cbDialog+0x1ac>)
 800c4d4:	6913      	ldr	r3, [r2, #16]
 800c4d6:	fab3 f383 	clz	r3, r3
 800c4da:	095b      	lsrs	r3, r3, #5
 800c4dc:	6113      	str	r3, [r2, #16]
    	  if(Enc_DistortionSelected){
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d030      	beq.n	800c544 <_cbDialog+0x180>
    	      BUTTON_SetState(hButton, 1);
 800c4e2:	2101      	movs	r1, #1
 800c4e4:	6810      	ldr	r0, [r2, #0]
 800c4e6:	f00e f863 	bl	801a5b0 <BUTTON_SetState>
 800c4ea:	e79d      	b.n	800c428 <_cbDialog+0x64>
		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	60e3      	str	r3, [r4, #12]
 800c4f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4f4:	6023      	str	r3, [r4, #0]
 800c4f6:	4621      	mov	r1, r4
 800c4f8:	4b2a      	ldr	r3, [pc, #168]	; (800c5a4 <_cbDialog+0x1e0>)
 800c4fa:	6818      	ldr	r0, [r3, #0]
 800c4fc:	f00b f9b2 	bl	8017864 <WM_SendMessage>
 800c500:	e7e7      	b.n	800c4d2 <_cbDialog+0x10e>
		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 800c502:	2301      	movs	r3, #1
 800c504:	60e3      	str	r3, [r4, #12]
 800c506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c50a:	6023      	str	r3, [r4, #0]
 800c50c:	4621      	mov	r1, r4
 800c50e:	4b26      	ldr	r3, [pc, #152]	; (800c5a8 <_cbDialog+0x1e4>)
 800c510:	6818      	ldr	r0, [r3, #0]
 800c512:	f00b f9a7 	bl	8017864 <WM_SendMessage>
 800c516:	e7dc      	b.n	800c4d2 <_cbDialog+0x10e>
		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 800c518:	2301      	movs	r3, #1
 800c51a:	60e3      	str	r3, [r4, #12]
 800c51c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	4621      	mov	r1, r4
 800c524:	4b21      	ldr	r3, [pc, #132]	; (800c5ac <_cbDialog+0x1e8>)
 800c526:	6818      	ldr	r0, [r3, #0]
 800c528:	f00b f99c 	bl	8017864 <WM_SendMessage>
 800c52c:	e7d1      	b.n	800c4d2 <_cbDialog+0x10e>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 800c52e:	2301      	movs	r3, #1
 800c530:	60e3      	str	r3, [r4, #12]
 800c532:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c536:	6023      	str	r3, [r4, #0]
 800c538:	4621      	mov	r1, r4
 800c53a:	4b1d      	ldr	r3, [pc, #116]	; (800c5b0 <_cbDialog+0x1ec>)
 800c53c:	6818      	ldr	r0, [r3, #0]
 800c53e:	f00b f991 	bl	8017864 <WM_SendMessage>
 800c542:	e7c6      	b.n	800c4d2 <_cbDialog+0x10e>
    	      BUTTON_SetState(hButton, 0);
 800c544:	2100      	movs	r1, #0
 800c546:	4b0a      	ldr	r3, [pc, #40]	; (800c570 <_cbDialog+0x1ac>)
 800c548:	6818      	ldr	r0, [r3, #0]
 800c54a:	f00e f831 	bl	801a5b0 <BUTTON_SetState>
 800c54e:	e76b      	b.n	800c428 <_cbDialog+0x64>
    			TEXTCOLOR = distortion.Color;
 800c550:	4a18      	ldr	r2, [pc, #96]	; (800c5b4 <_cbDialog+0x1f0>)
 800c552:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800c554:	4b06      	ldr	r3, [pc, #24]	; (800c570 <_cbDialog+0x1ac>)
 800c556:	6099      	str	r1, [r3, #8]
    			 value = distortion.value;
 800c558:	edd2 7a00 	vldr	s15, [r2]
 800c55c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c560:	edc3 7a03 	vstr	s15, [r3, #12]
 800c564:	e760      	b.n	800c428 <_cbDialog+0x64>
    WM_DefaultProc(pMsg);
 800c566:	4620      	mov	r0, r4
 800c568:	f00c f868 	bl	801863c <WM_DefaultProc>
}
 800c56c:	e75c      	b.n	800c428 <_cbDialog+0x64>
 800c56e:	bf00      	nop
 800c570:	20008840 	.word	0x20008840
 800c574:	0800c5b9 	.word	0x0800c5b9
 800c578:	08028448 	.word	0x08028448
 800c57c:	0803290c 	.word	0x0803290c
 800c580:	08030454 	.word	0x08030454
 800c584:	2000883c 	.word	0x2000883c
 800c588:	20008874 	.word	0x20008874
 800c58c:	20008888 	.word	0x20008888
 800c590:	2000889c 	.word	0x2000889c
 800c594:	200088ac 	.word	0x200088ac
 800c598:	20008864 	.word	0x20008864
 800c59c:	2002e6e4 	.word	0x2002e6e4
 800c5a0:	2002eecc 	.word	0x2002eecc
 800c5a4:	2002e894 	.word	0x2002e894
 800c5a8:	2002e51c 	.word	0x2002e51c
 800c5ac:	2002e598 	.word	0x2002e598
 800c5b0:	2002f138 	.word	0x2002f138
 800c5b4:	2002eb24 	.word	0x2002eb24

0800c5b8 <_cbENC_Button>:
{
 800c5b8:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 800c5ba:	6803      	ldr	r3, [r0, #0]
 800c5bc:	2b0f      	cmp	r3, #15
 800c5be:	d10b      	bne.n	800c5d8 <_cbENC_Button+0x20>
    	if(Enc_DistortionSelected == 1){
 800c5c0:	4b07      	ldr	r3, [pc, #28]	; (800c5e0 <_cbENC_Button+0x28>)
 800c5c2:	691b      	ldr	r3, [r3, #16]
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d003      	beq.n	800c5d0 <_cbENC_Button+0x18>
    	    	COLOR = GUI_DARKGRAY;
 800c5c8:	4b05      	ldr	r3, [pc, #20]	; (800c5e0 <_cbENC_Button+0x28>)
 800c5ca:	4a06      	ldr	r2, [pc, #24]	; (800c5e4 <_cbENC_Button+0x2c>)
 800c5cc:	605a      	str	r2, [r3, #4]
}
 800c5ce:	bd08      	pop	{r3, pc}
    			COLOR = GUI_GRAY;
 800c5d0:	4b03      	ldr	r3, [pc, #12]	; (800c5e0 <_cbENC_Button+0x28>)
 800c5d2:	4a05      	ldr	r2, [pc, #20]	; (800c5e8 <_cbENC_Button+0x30>)
 800c5d4:	605a      	str	r2, [r3, #4]
 800c5d6:	e7fa      	b.n	800c5ce <_cbENC_Button+0x16>
      BUTTON_Callback(pMsg);
 800c5d8:	f00d fe70 	bl	801a2bc <BUTTON_Callback>
}
 800c5dc:	e7f7      	b.n	800c5ce <_cbENC_Button+0x16>
 800c5de:	bf00      	nop
 800c5e0:	20008840 	.word	0x20008840
 800c5e4:	ff404040 	.word	0xff404040
 800c5e8:	ff808080 	.word	0xff808080

0800c5ec <CreateEnc_DistortionWindow>:


WM_HWIN CreateEnc_DistortionWindow(void) {
 800c5ec:	b510      	push	{r4, lr}
 800c5ee:	b084      	sub	sp, #16

  Enc_DistortionWindow = WM_CreateWindow(600, 20, 180, 100, WM_CF_HIDE, _cbDialog, 0);
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	9302      	str	r3, [sp, #8]
 800c5f4:	4a08      	ldr	r2, [pc, #32]	; (800c618 <CreateEnc_DistortionWindow+0x2c>)
 800c5f6:	9201      	str	r2, [sp, #4]
 800c5f8:	9300      	str	r3, [sp, #0]
 800c5fa:	2364      	movs	r3, #100	; 0x64
 800c5fc:	22b4      	movs	r2, #180	; 0xb4
 800c5fe:	2114      	movs	r1, #20
 800c600:	f44f 7016 	mov.w	r0, #600	; 0x258
 800c604:	f00b faa2 	bl	8017b4c <WM_CreateWindow>
 800c608:	4c04      	ldr	r4, [pc, #16]	; (800c61c <CreateEnc_DistortionWindow+0x30>)
 800c60a:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 800c60c:	2001      	movs	r0, #1
 800c60e:	f00c ff0f 	bl	8019430 <WM_MULTIBUF_Enable>

  return Enc_DistortionWindow;
}
 800c612:	6820      	ldr	r0, [r4, #0]
 800c614:	b004      	add	sp, #16
 800c616:	bd10      	pop	{r4, pc}
 800c618:	0800c3c5 	.word	0x0800c3c5
 800c61c:	2002ede8 	.word	0x2002ede8

0800c620 <_cbDialog>:
}




static void _cbDialog(WM_MESSAGE * pMsg) {
 800c620:	b510      	push	{r4, lr}
 800c622:	b084      	sub	sp, #16
  int           Id, NotificationCode;


  switch(pMsg->MsgId) {
 800c624:	6803      	ldr	r3, [r0, #0]
 800c626:	2b0f      	cmp	r3, #15
 800c628:	d02e      	beq.n	800c688 <_cbDialog+0x68>
 800c62a:	4604      	mov	r4, r0
 800c62c:	dd15      	ble.n	800c65a <_cbDialog+0x3a>
 800c62e:	2b26      	cmp	r3, #38	; 0x26
 800c630:	d04a      	beq.n	800c6c8 <_cbDialog+0xa8>
 800c632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c636:	f040 80c4 	bne.w	800c7c2 <_cbDialog+0x1a2>
    }
    break;
//////////////////////////////////////////////////////////////////
    case WM_USER:
    	//#########UPDATE Color & value#############//
		if(pMsg->Data.v==0){
 800c63a:	68c3      	ldr	r3, [r0, #12]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f000 80b5 	beq.w	800c7ac <_cbDialog+0x18c>
		    value = input.value;
		}
		//#########################################//

		//#########Remote unselect#################//
		else if(pMsg->Data.v==1){
 800c642:	2b01      	cmp	r3, #1
 800c644:	d11e      	bne.n	800c684 <_cbDialog+0x64>
			Enc_InputSelected = !Enc_InputSelected;
 800c646:	4b61      	ldr	r3, [pc, #388]	; (800c7cc <_cbDialog+0x1ac>)
 800c648:	6919      	ldr	r1, [r3, #16]
 800c64a:	fab1 f181 	clz	r1, r1
 800c64e:	0949      	lsrs	r1, r1, #5
 800c650:	6119      	str	r1, [r3, #16]
			BUTTON_SetState(hButton, Enc_InputSelected);
 800c652:	6818      	ldr	r0, [r3, #0]
 800c654:	f00d ffac 	bl	801a5b0 <BUTTON_SetState>
 800c658:	e014      	b.n	800c684 <_cbDialog+0x64>
  switch(pMsg->MsgId) {
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	f040 80b1 	bne.w	800c7c2 <_cbDialog+0x1a2>
   hButton = BUTTON_CreateEx(0, 0, 180, 100, pMsg->hWin, WM_CF_SHOW, 0, ID_ENC_Button);
 800c660:	2301      	movs	r3, #1
 800c662:	9303      	str	r3, [sp, #12]
 800c664:	2000      	movs	r0, #0
 800c666:	9002      	str	r0, [sp, #8]
 800c668:	2302      	movs	r3, #2
 800c66a:	9301      	str	r3, [sp, #4]
 800c66c:	6863      	ldr	r3, [r4, #4]
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	2364      	movs	r3, #100	; 0x64
 800c672:	22b4      	movs	r2, #180	; 0xb4
 800c674:	4601      	mov	r1, r0
 800c676:	f00d fed9 	bl	801a42c <BUTTON_CreateEx>
 800c67a:	4b54      	ldr	r3, [pc, #336]	; (800c7cc <_cbDialog+0x1ac>)
 800c67c:	6018      	str	r0, [r3, #0]
   WM_SetCallback(hButton, _cbENC_Button);
 800c67e:	4954      	ldr	r1, [pc, #336]	; (800c7d0 <_cbDialog+0x1b0>)
 800c680:	f00c fca6 	bl	8018fd0 <WM_SetCallback>
    break;
/////////////////////////////////////////////////////////////////
   default:
    WM_DefaultProc(pMsg);
  }
}
 800c684:	b004      	add	sp, #16
 800c686:	bd10      	pop	{r4, pc}
  	GUI_SetBkColor(COLOR);
 800c688:	4c50      	ldr	r4, [pc, #320]	; (800c7cc <_cbDialog+0x1ac>)
 800c68a:	6860      	ldr	r0, [r4, #4]
 800c68c:	f003 fe36 	bl	80102fc <GUI_SetBkColor>
  	GUI_Clear();
 800c690:	f003 ff44 	bl	801051c <GUI_Clear>
      GUI_SetColor(TEXTCOLOR);
 800c694:	68a0      	ldr	r0, [r4, #8]
 800c696:	f003 fe3d 	bl	8010314 <GUI_SetColor>
      GUI_SetFont(&GUI_Font32B_1);
 800c69a:	484e      	ldr	r0, [pc, #312]	; (800c7d4 <_cbDialog+0x1b4>)
 800c69c:	f003 fe9c 	bl	80103d8 <GUI_SetFont>
      GUI_DispStringAt("input", 0, 0);
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	4611      	mov	r1, r2
 800c6a4:	484c      	ldr	r0, [pc, #304]	; (800c7d8 <_cbDialog+0x1b8>)
 800c6a6:	f004 fb61 	bl	8010d6c <GUI_DispStringAt>
      GUI_SetFont(&GUI_FontD36x48);
 800c6aa:	484c      	ldr	r0, [pc, #304]	; (800c7dc <_cbDialog+0x1bc>)
 800c6ac:	f003 fe94 	bl	80103d8 <GUI_SetFont>
      GUI_GotoXY(0,30);
 800c6b0:	211e      	movs	r1, #30
 800c6b2:	2000      	movs	r0, #0
 800c6b4:	f003 fdc4 	bl	8010240 <GUI_GotoXY>
      GUI_DispFloatMin(value, 1);
 800c6b8:	ed94 0a03 	vldr	s0, [r4, #12]
 800c6bc:	2001      	movs	r0, #1
 800c6be:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c6c2:	f005 f92f 	bl	8011924 <GUI_DispFloatMin>
    break;
 800c6c6:	e7dd      	b.n	800c684 <_cbDialog+0x64>
    Id    = WM_GetId(pMsg->hWinSrc);
 800c6c8:	6880      	ldr	r0, [r0, #8]
 800c6ca:	f00c fb7f 	bl	8018dcc <WM_GetId>
    NotificationCode = pMsg->Data.v;
 800c6ce:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 800c6d0:	2801      	cmp	r0, #1
 800c6d2:	d1d7      	bne.n	800c684 <_cbDialog+0x64>
      switch(NotificationCode) {
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d1d5      	bne.n	800c684 <_cbDialog+0x64>
    		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 800c6d8:	4b41      	ldr	r3, [pc, #260]	; (800c7e0 <_cbDialog+0x1c0>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	b9eb      	cbnz	r3, 800c71a <_cbDialog+0xfa>
    		  else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 800c6de:	4b41      	ldr	r3, [pc, #260]	; (800c7e4 <_cbDialog+0x1c4>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d130      	bne.n	800c748 <_cbDialog+0x128>
    		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 800c6e6:	4b40      	ldr	r3, [pc, #256]	; (800c7e8 <_cbDialog+0x1c8>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d137      	bne.n	800c75e <_cbDialog+0x13e>
    		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 800c6ee:	4b3f      	ldr	r3, [pc, #252]	; (800c7ec <_cbDialog+0x1cc>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d13e      	bne.n	800c774 <_cbDialog+0x154>
    		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 800c6f6:	4b3e      	ldr	r3, [pc, #248]	; (800c7f0 <_cbDialog+0x1d0>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d145      	bne.n	800c78a <_cbDialog+0x16a>
    		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 800c6fe:	4b3d      	ldr	r3, [pc, #244]	; (800c7f4 <_cbDialog+0x1d4>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	b1a3      	cbz	r3, 800c72e <_cbDialog+0x10e>
 800c704:	2301      	movs	r3, #1
 800c706:	60e3      	str	r3, [r4, #12]
 800c708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c70c:	6023      	str	r3, [r4, #0]
 800c70e:	4621      	mov	r1, r4
 800c710:	4b39      	ldr	r3, [pc, #228]	; (800c7f8 <_cbDialog+0x1d8>)
 800c712:	6818      	ldr	r0, [r3, #0]
 800c714:	f00b f8a6 	bl	8017864 <WM_SendMessage>
 800c718:	e009      	b.n	800c72e <_cbDialog+0x10e>
    		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 800c71a:	2301      	movs	r3, #1
 800c71c:	60e3      	str	r3, [r4, #12]
 800c71e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c722:	6023      	str	r3, [r4, #0]
 800c724:	4621      	mov	r1, r4
 800c726:	4b35      	ldr	r3, [pc, #212]	; (800c7fc <_cbDialog+0x1dc>)
 800c728:	6818      	ldr	r0, [r3, #0]
 800c72a:	f00b f89b 	bl	8017864 <WM_SendMessage>
        	  Enc_InputSelected = !Enc_InputSelected;
 800c72e:	4a27      	ldr	r2, [pc, #156]	; (800c7cc <_cbDialog+0x1ac>)
 800c730:	6913      	ldr	r3, [r2, #16]
 800c732:	fab3 f383 	clz	r3, r3
 800c736:	095b      	lsrs	r3, r3, #5
 800c738:	6113      	str	r3, [r2, #16]
        	  if(Enc_InputSelected){
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d030      	beq.n	800c7a0 <_cbDialog+0x180>
        	      BUTTON_SetState(hButton, 1);
 800c73e:	2101      	movs	r1, #1
 800c740:	6810      	ldr	r0, [r2, #0]
 800c742:	f00d ff35 	bl	801a5b0 <BUTTON_SetState>
 800c746:	e79d      	b.n	800c684 <_cbDialog+0x64>
    		  else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 800c748:	2301      	movs	r3, #1
 800c74a:	60e3      	str	r3, [r4, #12]
 800c74c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c750:	6023      	str	r3, [r4, #0]
 800c752:	4621      	mov	r1, r4
 800c754:	4b2a      	ldr	r3, [pc, #168]	; (800c800 <_cbDialog+0x1e0>)
 800c756:	6818      	ldr	r0, [r3, #0]
 800c758:	f00b f884 	bl	8017864 <WM_SendMessage>
 800c75c:	e7e7      	b.n	800c72e <_cbDialog+0x10e>
    		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 800c75e:	2301      	movs	r3, #1
 800c760:	60e3      	str	r3, [r4, #12]
 800c762:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c766:	6023      	str	r3, [r4, #0]
 800c768:	4621      	mov	r1, r4
 800c76a:	4b26      	ldr	r3, [pc, #152]	; (800c804 <_cbDialog+0x1e4>)
 800c76c:	6818      	ldr	r0, [r3, #0]
 800c76e:	f00b f879 	bl	8017864 <WM_SendMessage>
 800c772:	e7dc      	b.n	800c72e <_cbDialog+0x10e>
    		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 800c774:	2301      	movs	r3, #1
 800c776:	60e3      	str	r3, [r4, #12]
 800c778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c77c:	6023      	str	r3, [r4, #0]
 800c77e:	4621      	mov	r1, r4
 800c780:	4b21      	ldr	r3, [pc, #132]	; (800c808 <_cbDialog+0x1e8>)
 800c782:	6818      	ldr	r0, [r3, #0]
 800c784:	f00b f86e 	bl	8017864 <WM_SendMessage>
 800c788:	e7d1      	b.n	800c72e <_cbDialog+0x10e>
    		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 800c78a:	2301      	movs	r3, #1
 800c78c:	60e3      	str	r3, [r4, #12]
 800c78e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c792:	6023      	str	r3, [r4, #0]
 800c794:	4621      	mov	r1, r4
 800c796:	4b1d      	ldr	r3, [pc, #116]	; (800c80c <_cbDialog+0x1ec>)
 800c798:	6818      	ldr	r0, [r3, #0]
 800c79a:	f00b f863 	bl	8017864 <WM_SendMessage>
 800c79e:	e7c6      	b.n	800c72e <_cbDialog+0x10e>
        	      BUTTON_SetState(hButton, 0);
 800c7a0:	2100      	movs	r1, #0
 800c7a2:	4b0a      	ldr	r3, [pc, #40]	; (800c7cc <_cbDialog+0x1ac>)
 800c7a4:	6818      	ldr	r0, [r3, #0]
 800c7a6:	f00d ff03 	bl	801a5b0 <BUTTON_SetState>
 800c7aa:	e76b      	b.n	800c684 <_cbDialog+0x64>
			TEXTCOLOR = input.Color;
 800c7ac:	4a18      	ldr	r2, [pc, #96]	; (800c810 <_cbDialog+0x1f0>)
 800c7ae:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800c7b0:	4b06      	ldr	r3, [pc, #24]	; (800c7cc <_cbDialog+0x1ac>)
 800c7b2:	6099      	str	r1, [r3, #8]
		    value = input.value;
 800c7b4:	edd2 7a00 	vldr	s15, [r2]
 800c7b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c7bc:	edc3 7a03 	vstr	s15, [r3, #12]
 800c7c0:	e760      	b.n	800c684 <_cbDialog+0x64>
    WM_DefaultProc(pMsg);
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f00b ff3a 	bl	801863c <WM_DefaultProc>
}
 800c7c8:	e75c      	b.n	800c684 <_cbDialog+0x64>
 800c7ca:	bf00      	nop
 800c7cc:	20008854 	.word	0x20008854
 800c7d0:	0800c815 	.word	0x0800c815
 800c7d4:	08028448 	.word	0x08028448
 800c7d8:	080328e0 	.word	0x080328e0
 800c7dc:	08030454 	.word	0x08030454
 800c7e0:	2000883c 	.word	0x2000883c
 800c7e4:	20008850 	.word	0x20008850
 800c7e8:	20008874 	.word	0x20008874
 800c7ec:	20008888 	.word	0x20008888
 800c7f0:	2000889c 	.word	0x2000889c
 800c7f4:	200088ac 	.word	0x200088ac
 800c7f8:	2002f138 	.word	0x2002f138
 800c7fc:	2002eecc 	.word	0x2002eecc
 800c800:	2002ede8 	.word	0x2002ede8
 800c804:	2002e894 	.word	0x2002e894
 800c808:	2002e51c 	.word	0x2002e51c
 800c80c:	2002e598 	.word	0x2002e598
 800c810:	2002e5a4 	.word	0x2002e5a4

0800c814 <_cbENC_Button>:
{
 800c814:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 800c816:	6803      	ldr	r3, [r0, #0]
 800c818:	2b0f      	cmp	r3, #15
 800c81a:	d10b      	bne.n	800c834 <_cbENC_Button+0x20>
    	if(Enc_InputSelected == 1){
 800c81c:	4b07      	ldr	r3, [pc, #28]	; (800c83c <_cbENC_Button+0x28>)
 800c81e:	691b      	ldr	r3, [r3, #16]
 800c820:	2b01      	cmp	r3, #1
 800c822:	d003      	beq.n	800c82c <_cbENC_Button+0x18>
    	    	COLOR = GUI_DARKGRAY;
 800c824:	4b05      	ldr	r3, [pc, #20]	; (800c83c <_cbENC_Button+0x28>)
 800c826:	4a06      	ldr	r2, [pc, #24]	; (800c840 <_cbENC_Button+0x2c>)
 800c828:	605a      	str	r2, [r3, #4]
}
 800c82a:	bd08      	pop	{r3, pc}
    			COLOR = GUI_GRAY;
 800c82c:	4b03      	ldr	r3, [pc, #12]	; (800c83c <_cbENC_Button+0x28>)
 800c82e:	4a05      	ldr	r2, [pc, #20]	; (800c844 <_cbENC_Button+0x30>)
 800c830:	605a      	str	r2, [r3, #4]
 800c832:	e7fa      	b.n	800c82a <_cbENC_Button+0x16>
      BUTTON_Callback(pMsg);
 800c834:	f00d fd42 	bl	801a2bc <BUTTON_Callback>
}
 800c838:	e7f7      	b.n	800c82a <_cbENC_Button+0x16>
 800c83a:	bf00      	nop
 800c83c:	20008854 	.word	0x20008854
 800c840:	ff404040 	.word	0xff404040
 800c844:	ff808080 	.word	0xff808080

0800c848 <CreateEnc_InputWindow>:


WM_HWIN CreateEnc_InputWindow(void) {
 800c848:	b510      	push	{r4, lr}
 800c84a:	b084      	sub	sp, #16

  Enc_InputWindow = WM_CreateWindow(20, 20, 180, 100, WM_CF_HIDE, _cbDialog, 0);
 800c84c:	2300      	movs	r3, #0
 800c84e:	9302      	str	r3, [sp, #8]
 800c850:	4a08      	ldr	r2, [pc, #32]	; (800c874 <CreateEnc_InputWindow+0x2c>)
 800c852:	9201      	str	r2, [sp, #4]
 800c854:	9300      	str	r3, [sp, #0]
 800c856:	2364      	movs	r3, #100	; 0x64
 800c858:	22b4      	movs	r2, #180	; 0xb4
 800c85a:	2114      	movs	r1, #20
 800c85c:	4608      	mov	r0, r1
 800c85e:	f00b f975 	bl	8017b4c <WM_CreateWindow>
 800c862:	4c05      	ldr	r4, [pc, #20]	; (800c878 <CreateEnc_InputWindow+0x30>)
 800c864:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 800c866:	2001      	movs	r0, #1
 800c868:	f00c fde2 	bl	8019430 <WM_MULTIBUF_Enable>

  return Enc_InputWindow;
}
 800c86c:	6820      	ldr	r0, [r4, #0]
 800c86e:	b004      	add	sp, #16
 800c870:	bd10      	pop	{r4, pc}
 800c872:	bf00      	nop
 800c874:	0800c621 	.word	0x0800c621
 800c878:	2002e6e4 	.word	0x2002e6e4

0800c87c <_cbDialog>:
}




static void _cbDialog(WM_MESSAGE * pMsg) {
 800c87c:	b510      	push	{r4, lr}
 800c87e:	b084      	sub	sp, #16
  int           Id, NotificationCode;


  switch(pMsg->MsgId) {
 800c880:	6803      	ldr	r3, [r0, #0]
 800c882:	2b0f      	cmp	r3, #15
 800c884:	d02f      	beq.n	800c8e6 <_cbDialog+0x6a>
 800c886:	4604      	mov	r4, r0
 800c888:	dd16      	ble.n	800c8b8 <_cbDialog+0x3c>
 800c88a:	2b26      	cmp	r3, #38	; 0x26
 800c88c:	d04b      	beq.n	800c926 <_cbDialog+0xaa>
 800c88e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c892:	f040 80c6 	bne.w	800ca22 <_cbDialog+0x1a6>
    }
    break;
//////////////////////////////////////////////////////////////////
    case WM_USER:
    	//#########UPDATE Color & value#############//
		if(pMsg->Data.v==0){
 800c896:	68c3      	ldr	r3, [r0, #12]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	f000 80b7 	beq.w	800ca0c <_cbDialog+0x190>
		    value = makeUpGain.value;
		}
		//#########################################//

		//#########Remote unselect#################//
		else if(pMsg->Data.v==1){
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d11f      	bne.n	800c8e2 <_cbDialog+0x66>
			Enc_MakeUpGainSelected = !Enc_MakeUpGainSelected;
 800c8a2:	4b62      	ldr	r3, [pc, #392]	; (800ca2c <_cbDialog+0x1b0>)
 800c8a4:	68d9      	ldr	r1, [r3, #12]
 800c8a6:	fab1 f181 	clz	r1, r1
 800c8aa:	0949      	lsrs	r1, r1, #5
 800c8ac:	60d9      	str	r1, [r3, #12]
			BUTTON_SetState(hButton, Enc_MakeUpGainSelected);
 800c8ae:	4b60      	ldr	r3, [pc, #384]	; (800ca30 <_cbDialog+0x1b4>)
 800c8b0:	6818      	ldr	r0, [r3, #0]
 800c8b2:	f00d fe7d 	bl	801a5b0 <BUTTON_SetState>
 800c8b6:	e014      	b.n	800c8e2 <_cbDialog+0x66>
  switch(pMsg->MsgId) {
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	f040 80b2 	bne.w	800ca22 <_cbDialog+0x1a6>
   hButton = BUTTON_CreateEx(0, 0, 180, 100, pMsg->hWin, WM_CF_SHOW, 0, ID_ENC_Button);
 800c8be:	2301      	movs	r3, #1
 800c8c0:	9303      	str	r3, [sp, #12]
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	9002      	str	r0, [sp, #8]
 800c8c6:	2302      	movs	r3, #2
 800c8c8:	9301      	str	r3, [sp, #4]
 800c8ca:	6863      	ldr	r3, [r4, #4]
 800c8cc:	9300      	str	r3, [sp, #0]
 800c8ce:	2364      	movs	r3, #100	; 0x64
 800c8d0:	22b4      	movs	r2, #180	; 0xb4
 800c8d2:	4601      	mov	r1, r0
 800c8d4:	f00d fdaa 	bl	801a42c <BUTTON_CreateEx>
 800c8d8:	4b55      	ldr	r3, [pc, #340]	; (800ca30 <_cbDialog+0x1b4>)
 800c8da:	6018      	str	r0, [r3, #0]
   WM_SetCallback(hButton, _cbENC_Button);
 800c8dc:	4955      	ldr	r1, [pc, #340]	; (800ca34 <_cbDialog+0x1b8>)
 800c8de:	f00c fb77 	bl	8018fd0 <WM_SetCallback>
    break;
/////////////////////////////////////////////////////////////////
   default:
    WM_DefaultProc(pMsg);
  }
}
 800c8e2:	b004      	add	sp, #16
 800c8e4:	bd10      	pop	{r4, pc}
  	GUI_SetBkColor(COLOR);
 800c8e6:	4c51      	ldr	r4, [pc, #324]	; (800ca2c <_cbDialog+0x1b0>)
 800c8e8:	6820      	ldr	r0, [r4, #0]
 800c8ea:	f003 fd07 	bl	80102fc <GUI_SetBkColor>
  	GUI_Clear();
 800c8ee:	f003 fe15 	bl	801051c <GUI_Clear>
    GUI_SetColor(TEXTCOLOR);
 800c8f2:	6860      	ldr	r0, [r4, #4]
 800c8f4:	f003 fd0e 	bl	8010314 <GUI_SetColor>
    GUI_SetFont(&GUI_Font32B_1);
 800c8f8:	484f      	ldr	r0, [pc, #316]	; (800ca38 <_cbDialog+0x1bc>)
 800c8fa:	f003 fd6d 	bl	80103d8 <GUI_SetFont>
    GUI_DispStringAt("make up gain", 0, 0);
 800c8fe:	2200      	movs	r2, #0
 800c900:	4611      	mov	r1, r2
 800c902:	484e      	ldr	r0, [pc, #312]	; (800ca3c <_cbDialog+0x1c0>)
 800c904:	f004 fa32 	bl	8010d6c <GUI_DispStringAt>
    GUI_SetFont(&GUI_FontD36x48);
 800c908:	484d      	ldr	r0, [pc, #308]	; (800ca40 <_cbDialog+0x1c4>)
 800c90a:	f003 fd65 	bl	80103d8 <GUI_SetFont>
    GUI_GotoXY(0,30);
 800c90e:	211e      	movs	r1, #30
 800c910:	2000      	movs	r0, #0
 800c912:	f003 fc95 	bl	8010240 <GUI_GotoXY>
    GUI_DispFloatMin(value, 1);
 800c916:	ed94 0a02 	vldr	s0, [r4, #8]
 800c91a:	2001      	movs	r0, #1
 800c91c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800c920:	f005 f800 	bl	8011924 <GUI_DispFloatMin>
    break;
 800c924:	e7dd      	b.n	800c8e2 <_cbDialog+0x66>
    Id    = WM_GetId(pMsg->hWinSrc);
 800c926:	6880      	ldr	r0, [r0, #8]
 800c928:	f00c fa50 	bl	8018dcc <WM_GetId>
    NotificationCode = pMsg->Data.v;
 800c92c:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 800c92e:	2801      	cmp	r0, #1
 800c930:	d1d7      	bne.n	800c8e2 <_cbDialog+0x66>
      switch(NotificationCode) {
 800c932:	2b01      	cmp	r3, #1
 800c934:	d1d5      	bne.n	800c8e2 <_cbDialog+0x66>
		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 800c936:	4b43      	ldr	r3, [pc, #268]	; (800ca44 <_cbDialog+0x1c8>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	b9eb      	cbnz	r3, 800c978 <_cbDialog+0xfc>
		  else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 800c93c:	4b42      	ldr	r3, [pc, #264]	; (800ca48 <_cbDialog+0x1cc>)
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d131      	bne.n	800c9a8 <_cbDialog+0x12c>
		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 800c944:	4b41      	ldr	r3, [pc, #260]	; (800ca4c <_cbDialog+0x1d0>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d138      	bne.n	800c9be <_cbDialog+0x142>
		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 800c94c:	4b40      	ldr	r3, [pc, #256]	; (800ca50 <_cbDialog+0x1d4>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d13f      	bne.n	800c9d4 <_cbDialog+0x158>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 800c954:	4b3f      	ldr	r3, [pc, #252]	; (800ca54 <_cbDialog+0x1d8>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d146      	bne.n	800c9ea <_cbDialog+0x16e>
		  else if (Enc_InputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_InputWindow, pMsg);}
 800c95c:	4b3e      	ldr	r3, [pc, #248]	; (800ca58 <_cbDialog+0x1dc>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	b1a3      	cbz	r3, 800c98c <_cbDialog+0x110>
 800c962:	2301      	movs	r3, #1
 800c964:	60e3      	str	r3, [r4, #12]
 800c966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c96a:	6023      	str	r3, [r4, #0]
 800c96c:	4621      	mov	r1, r4
 800c96e:	4b3b      	ldr	r3, [pc, #236]	; (800ca5c <_cbDialog+0x1e0>)
 800c970:	6818      	ldr	r0, [r3, #0]
 800c972:	f00a ff77 	bl	8017864 <WM_SendMessage>
 800c976:	e009      	b.n	800c98c <_cbDialog+0x110>
		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 800c978:	2301      	movs	r3, #1
 800c97a:	60e3      	str	r3, [r4, #12]
 800c97c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c980:	6023      	str	r3, [r4, #0]
 800c982:	4621      	mov	r1, r4
 800c984:	4b36      	ldr	r3, [pc, #216]	; (800ca60 <_cbDialog+0x1e4>)
 800c986:	6818      	ldr	r0, [r3, #0]
 800c988:	f00a ff6c 	bl	8017864 <WM_SendMessage>
    	  Enc_MakeUpGainSelected = !Enc_MakeUpGainSelected;
 800c98c:	4a27      	ldr	r2, [pc, #156]	; (800ca2c <_cbDialog+0x1b0>)
 800c98e:	68d3      	ldr	r3, [r2, #12]
 800c990:	fab3 f383 	clz	r3, r3
 800c994:	095b      	lsrs	r3, r3, #5
 800c996:	60d3      	str	r3, [r2, #12]
    	  if(Enc_MakeUpGainSelected){
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d031      	beq.n	800ca00 <_cbDialog+0x184>
    	      BUTTON_SetState(hButton, 1);
 800c99c:	2101      	movs	r1, #1
 800c99e:	4b24      	ldr	r3, [pc, #144]	; (800ca30 <_cbDialog+0x1b4>)
 800c9a0:	6818      	ldr	r0, [r3, #0]
 800c9a2:	f00d fe05 	bl	801a5b0 <BUTTON_SetState>
 800c9a6:	e79c      	b.n	800c8e2 <_cbDialog+0x66>
		  else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	60e3      	str	r3, [r4, #12]
 800c9ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9b0:	6023      	str	r3, [r4, #0]
 800c9b2:	4621      	mov	r1, r4
 800c9b4:	4b2b      	ldr	r3, [pc, #172]	; (800ca64 <_cbDialog+0x1e8>)
 800c9b6:	6818      	ldr	r0, [r3, #0]
 800c9b8:	f00a ff54 	bl	8017864 <WM_SendMessage>
 800c9bc:	e7e6      	b.n	800c98c <_cbDialog+0x110>
		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 800c9be:	2301      	movs	r3, #1
 800c9c0:	60e3      	str	r3, [r4, #12]
 800c9c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9c6:	6023      	str	r3, [r4, #0]
 800c9c8:	4621      	mov	r1, r4
 800c9ca:	4b27      	ldr	r3, [pc, #156]	; (800ca68 <_cbDialog+0x1ec>)
 800c9cc:	6818      	ldr	r0, [r3, #0]
 800c9ce:	f00a ff49 	bl	8017864 <WM_SendMessage>
 800c9d2:	e7db      	b.n	800c98c <_cbDialog+0x110>
		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	60e3      	str	r3, [r4, #12]
 800c9d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9dc:	6023      	str	r3, [r4, #0]
 800c9de:	4621      	mov	r1, r4
 800c9e0:	4b22      	ldr	r3, [pc, #136]	; (800ca6c <_cbDialog+0x1f0>)
 800c9e2:	6818      	ldr	r0, [r3, #0]
 800c9e4:	f00a ff3e 	bl	8017864 <WM_SendMessage>
 800c9e8:	e7d0      	b.n	800c98c <_cbDialog+0x110>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	60e3      	str	r3, [r4, #12]
 800c9ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9f2:	6023      	str	r3, [r4, #0]
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	4b1e      	ldr	r3, [pc, #120]	; (800ca70 <_cbDialog+0x1f4>)
 800c9f8:	6818      	ldr	r0, [r3, #0]
 800c9fa:	f00a ff33 	bl	8017864 <WM_SendMessage>
 800c9fe:	e7c5      	b.n	800c98c <_cbDialog+0x110>
    	      BUTTON_SetState(hButton, 0);
 800ca00:	2100      	movs	r1, #0
 800ca02:	4b0b      	ldr	r3, [pc, #44]	; (800ca30 <_cbDialog+0x1b4>)
 800ca04:	6818      	ldr	r0, [r3, #0]
 800ca06:	f00d fdd3 	bl	801a5b0 <BUTTON_SetState>
 800ca0a:	e76a      	b.n	800c8e2 <_cbDialog+0x66>
			TEXTCOLOR = makeUpGain.Color;
 800ca0c:	4a19      	ldr	r2, [pc, #100]	; (800ca74 <_cbDialog+0x1f8>)
 800ca0e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800ca10:	4b06      	ldr	r3, [pc, #24]	; (800ca2c <_cbDialog+0x1b0>)
 800ca12:	6059      	str	r1, [r3, #4]
		    value = makeUpGain.value;
 800ca14:	edd2 7a00 	vldr	s15, [r2]
 800ca18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca1c:	edc3 7a02 	vstr	s15, [r3, #8]
 800ca20:	e75f      	b.n	800c8e2 <_cbDialog+0x66>
    WM_DefaultProc(pMsg);
 800ca22:	4620      	mov	r0, r4
 800ca24:	f00b fe0a 	bl	801863c <WM_DefaultProc>
}
 800ca28:	e75b      	b.n	800c8e2 <_cbDialog+0x66>
 800ca2a:	bf00      	nop
 800ca2c:	20008868 	.word	0x20008868
 800ca30:	20030624 	.word	0x20030624
 800ca34:	0800ca79 	.word	0x0800ca79
 800ca38:	08028448 	.word	0x08028448
 800ca3c:	080329d4 	.word	0x080329d4
 800ca40:	08030454 	.word	0x08030454
 800ca44:	2000883c 	.word	0x2000883c
 800ca48:	20008850 	.word	0x20008850
 800ca4c:	20008888 	.word	0x20008888
 800ca50:	2000889c 	.word	0x2000889c
 800ca54:	200088ac 	.word	0x200088ac
 800ca58:	20008864 	.word	0x20008864
 800ca5c:	2002e6e4 	.word	0x2002e6e4
 800ca60:	2002eecc 	.word	0x2002eecc
 800ca64:	2002ede8 	.word	0x2002ede8
 800ca68:	2002e51c 	.word	0x2002e51c
 800ca6c:	2002e598 	.word	0x2002e598
 800ca70:	2002f138 	.word	0x2002f138
 800ca74:	2002e4ec 	.word	0x2002e4ec

0800ca78 <_cbENC_Button>:
{
 800ca78:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 800ca7a:	6803      	ldr	r3, [r0, #0]
 800ca7c:	2b0f      	cmp	r3, #15
 800ca7e:	d10b      	bne.n	800ca98 <_cbENC_Button+0x20>
    	if(Enc_MakeUpGainSelected == 1){
 800ca80:	4b07      	ldr	r3, [pc, #28]	; (800caa0 <_cbENC_Button+0x28>)
 800ca82:	68db      	ldr	r3, [r3, #12]
 800ca84:	2b01      	cmp	r3, #1
 800ca86:	d003      	beq.n	800ca90 <_cbENC_Button+0x18>
    	    	COLOR = GUI_DARKGRAY;
 800ca88:	4b05      	ldr	r3, [pc, #20]	; (800caa0 <_cbENC_Button+0x28>)
 800ca8a:	4a06      	ldr	r2, [pc, #24]	; (800caa4 <_cbENC_Button+0x2c>)
 800ca8c:	601a      	str	r2, [r3, #0]
}
 800ca8e:	bd08      	pop	{r3, pc}
    			COLOR = GUI_GRAY;
 800ca90:	4b03      	ldr	r3, [pc, #12]	; (800caa0 <_cbENC_Button+0x28>)
 800ca92:	4a05      	ldr	r2, [pc, #20]	; (800caa8 <_cbENC_Button+0x30>)
 800ca94:	601a      	str	r2, [r3, #0]
 800ca96:	e7fa      	b.n	800ca8e <_cbENC_Button+0x16>
      BUTTON_Callback(pMsg);
 800ca98:	f00d fc10 	bl	801a2bc <BUTTON_Callback>
}
 800ca9c:	e7f7      	b.n	800ca8e <_cbENC_Button+0x16>
 800ca9e:	bf00      	nop
 800caa0:	20008868 	.word	0x20008868
 800caa4:	ff404040 	.word	0xff404040
 800caa8:	ff808080 	.word	0xff808080

0800caac <CreateEnc_MakeUpGainWindow>:


WM_HWIN CreateEnc_MakeUpGainWindow(void) {
 800caac:	b510      	push	{r4, lr}
 800caae:	b084      	sub	sp, #16

	Enc_MakeUpGainWindow = WM_CreateWindow(600, 130, 180, 100, WM_CF_HIDE, _cbDialog, 0);
 800cab0:	2300      	movs	r3, #0
 800cab2:	9302      	str	r3, [sp, #8]
 800cab4:	4a08      	ldr	r2, [pc, #32]	; (800cad8 <CreateEnc_MakeUpGainWindow+0x2c>)
 800cab6:	9201      	str	r2, [sp, #4]
 800cab8:	9300      	str	r3, [sp, #0]
 800caba:	2364      	movs	r3, #100	; 0x64
 800cabc:	22b4      	movs	r2, #180	; 0xb4
 800cabe:	2182      	movs	r1, #130	; 0x82
 800cac0:	f44f 7016 	mov.w	r0, #600	; 0x258
 800cac4:	f00b f842 	bl	8017b4c <WM_CreateWindow>
 800cac8:	4c04      	ldr	r4, [pc, #16]	; (800cadc <CreateEnc_MakeUpGainWindow+0x30>)
 800caca:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 800cacc:	2001      	movs	r0, #1
 800cace:	f00c fcaf 	bl	8019430 <WM_MULTIBUF_Enable>

  return Enc_MakeUpGainWindow;
}
 800cad2:	6820      	ldr	r0, [r4, #0]
 800cad4:	b004      	add	sp, #16
 800cad6:	bd10      	pop	{r4, pc}
 800cad8:	0800c87d 	.word	0x0800c87d
 800cadc:	2002e894 	.word	0x2002e894

0800cae0 <_cbDialog>:
}




static void _cbDialog(WM_MESSAGE * pMsg) {
 800cae0:	b510      	push	{r4, lr}
 800cae2:	b084      	sub	sp, #16
  int           Id, NotificationCode;


  switch(pMsg->MsgId) {
 800cae4:	6803      	ldr	r3, [r0, #0]
 800cae6:	2b0f      	cmp	r3, #15
 800cae8:	d02e      	beq.n	800cb48 <_cbDialog+0x68>
 800caea:	4604      	mov	r4, r0
 800caec:	dd15      	ble.n	800cb1a <_cbDialog+0x3a>
 800caee:	2b26      	cmp	r3, #38	; 0x26
 800caf0:	d04a      	beq.n	800cb88 <_cbDialog+0xa8>
 800caf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800caf6:	f040 80c4 	bne.w	800cc82 <_cbDialog+0x1a2>
    }
    break;
//////////////////////////////////////////////////////////////////
    case WM_USER:
    	//#########UPDATE Color & value#############//
		if(pMsg->Data.v==0){
 800cafa:	68c3      	ldr	r3, [r0, #12]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	f000 80b5 	beq.w	800cc6c <_cbDialog+0x18c>
		    value = outputgain.value;
		}
		//#########################################//

		//#########Remote unselect#################//
		else if(pMsg->Data.v==1){
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d11e      	bne.n	800cb44 <_cbDialog+0x64>
			Enc_OutputSelected = !Enc_OutputSelected;
 800cb06:	4b61      	ldr	r3, [pc, #388]	; (800cc8c <_cbDialog+0x1ac>)
 800cb08:	6919      	ldr	r1, [r3, #16]
 800cb0a:	fab1 f181 	clz	r1, r1
 800cb0e:	0949      	lsrs	r1, r1, #5
 800cb10:	6119      	str	r1, [r3, #16]
			BUTTON_SetState(hButton, Enc_OutputSelected);
 800cb12:	6818      	ldr	r0, [r3, #0]
 800cb14:	f00d fd4c 	bl	801a5b0 <BUTTON_SetState>
 800cb18:	e014      	b.n	800cb44 <_cbDialog+0x64>
  switch(pMsg->MsgId) {
 800cb1a:	2b01      	cmp	r3, #1
 800cb1c:	f040 80b1 	bne.w	800cc82 <_cbDialog+0x1a2>
   hButton = BUTTON_CreateEx(0, 0, 180, 100, pMsg->hWin, WM_CF_SHOW, 0, ID_ENC_Button);
 800cb20:	2301      	movs	r3, #1
 800cb22:	9303      	str	r3, [sp, #12]
 800cb24:	2000      	movs	r0, #0
 800cb26:	9002      	str	r0, [sp, #8]
 800cb28:	2302      	movs	r3, #2
 800cb2a:	9301      	str	r3, [sp, #4]
 800cb2c:	6863      	ldr	r3, [r4, #4]
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	2364      	movs	r3, #100	; 0x64
 800cb32:	22b4      	movs	r2, #180	; 0xb4
 800cb34:	4601      	mov	r1, r0
 800cb36:	f00d fc79 	bl	801a42c <BUTTON_CreateEx>
 800cb3a:	4b54      	ldr	r3, [pc, #336]	; (800cc8c <_cbDialog+0x1ac>)
 800cb3c:	6018      	str	r0, [r3, #0]
   WM_SetCallback(hButton, _cbENC_Button);
 800cb3e:	4954      	ldr	r1, [pc, #336]	; (800cc90 <_cbDialog+0x1b0>)
 800cb40:	f00c fa46 	bl	8018fd0 <WM_SetCallback>
    break;
/////////////////////////////////////////////////////////////////
   default:
    WM_DefaultProc(pMsg);
  }
}
 800cb44:	b004      	add	sp, #16
 800cb46:	bd10      	pop	{r4, pc}
  	GUI_SetBkColor(COLOR);
 800cb48:	4c50      	ldr	r4, [pc, #320]	; (800cc8c <_cbDialog+0x1ac>)
 800cb4a:	6860      	ldr	r0, [r4, #4]
 800cb4c:	f003 fbd6 	bl	80102fc <GUI_SetBkColor>
  	GUI_Clear();
 800cb50:	f003 fce4 	bl	801051c <GUI_Clear>
      GUI_SetColor(TEXTCOLOR);
 800cb54:	68a0      	ldr	r0, [r4, #8]
 800cb56:	f003 fbdd 	bl	8010314 <GUI_SetColor>
      GUI_SetFont(&GUI_Font32B_1);
 800cb5a:	484e      	ldr	r0, [pc, #312]	; (800cc94 <_cbDialog+0x1b4>)
 800cb5c:	f003 fc3c 	bl	80103d8 <GUI_SetFont>
      GUI_DispStringAt("output gain", 0, 0);
 800cb60:	2200      	movs	r2, #0
 800cb62:	4611      	mov	r1, r2
 800cb64:	484c      	ldr	r0, [pc, #304]	; (800cc98 <_cbDialog+0x1b8>)
 800cb66:	f004 f901 	bl	8010d6c <GUI_DispStringAt>
      GUI_SetFont(&GUI_FontD36x48);
 800cb6a:	484c      	ldr	r0, [pc, #304]	; (800cc9c <_cbDialog+0x1bc>)
 800cb6c:	f003 fc34 	bl	80103d8 <GUI_SetFont>
      GUI_GotoXY(0,30);
 800cb70:	211e      	movs	r1, #30
 800cb72:	2000      	movs	r0, #0
 800cb74:	f003 fb64 	bl	8010240 <GUI_GotoXY>
      GUI_DispFloatMin(value, 1);
 800cb78:	ed94 0a03 	vldr	s0, [r4, #12]
 800cb7c:	2001      	movs	r0, #1
 800cb7e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800cb82:	f004 fecf 	bl	8011924 <GUI_DispFloatMin>
    break;
 800cb86:	e7dd      	b.n	800cb44 <_cbDialog+0x64>
    Id    = WM_GetId(pMsg->hWinSrc);
 800cb88:	6880      	ldr	r0, [r0, #8]
 800cb8a:	f00c f91f 	bl	8018dcc <WM_GetId>
    NotificationCode = pMsg->Data.v;
 800cb8e:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 800cb90:	2801      	cmp	r0, #1
 800cb92:	d1d7      	bne.n	800cb44 <_cbDialog+0x64>
      switch(NotificationCode) {
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	d1d5      	bne.n	800cb44 <_cbDialog+0x64>
		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 800cb98:	4b41      	ldr	r3, [pc, #260]	; (800cca0 <_cbDialog+0x1c0>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	b9eb      	cbnz	r3, 800cbda <_cbDialog+0xfa>
		  else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 800cb9e:	4b41      	ldr	r3, [pc, #260]	; (800cca4 <_cbDialog+0x1c4>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d130      	bne.n	800cc08 <_cbDialog+0x128>
		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 800cba6:	4b40      	ldr	r3, [pc, #256]	; (800cca8 <_cbDialog+0x1c8>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d137      	bne.n	800cc1e <_cbDialog+0x13e>
		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 800cbae:	4b3f      	ldr	r3, [pc, #252]	; (800ccac <_cbDialog+0x1cc>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d13e      	bne.n	800cc34 <_cbDialog+0x154>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 800cbb6:	4b3e      	ldr	r3, [pc, #248]	; (800ccb0 <_cbDialog+0x1d0>)
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d145      	bne.n	800cc4a <_cbDialog+0x16a>
		  else if (Enc_InputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_InputWindow, pMsg);}
 800cbbe:	4b3d      	ldr	r3, [pc, #244]	; (800ccb4 <_cbDialog+0x1d4>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	b1a3      	cbz	r3, 800cbee <_cbDialog+0x10e>
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	60e3      	str	r3, [r4, #12]
 800cbc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbcc:	6023      	str	r3, [r4, #0]
 800cbce:	4621      	mov	r1, r4
 800cbd0:	4b39      	ldr	r3, [pc, #228]	; (800ccb8 <_cbDialog+0x1d8>)
 800cbd2:	6818      	ldr	r0, [r3, #0]
 800cbd4:	f00a fe46 	bl	8017864 <WM_SendMessage>
 800cbd8:	e009      	b.n	800cbee <_cbDialog+0x10e>
		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 800cbda:	2301      	movs	r3, #1
 800cbdc:	60e3      	str	r3, [r4, #12]
 800cbde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbe2:	6023      	str	r3, [r4, #0]
 800cbe4:	4621      	mov	r1, r4
 800cbe6:	4b35      	ldr	r3, [pc, #212]	; (800ccbc <_cbDialog+0x1dc>)
 800cbe8:	6818      	ldr	r0, [r3, #0]
 800cbea:	f00a fe3b 	bl	8017864 <WM_SendMessage>
    	  Enc_OutputSelected = !Enc_OutputSelected;
 800cbee:	4a27      	ldr	r2, [pc, #156]	; (800cc8c <_cbDialog+0x1ac>)
 800cbf0:	6913      	ldr	r3, [r2, #16]
 800cbf2:	fab3 f383 	clz	r3, r3
 800cbf6:	095b      	lsrs	r3, r3, #5
 800cbf8:	6113      	str	r3, [r2, #16]
    	  if(Enc_OutputSelected){
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d030      	beq.n	800cc60 <_cbDialog+0x180>
    	      BUTTON_SetState(hButton, 1);
 800cbfe:	2101      	movs	r1, #1
 800cc00:	6810      	ldr	r0, [r2, #0]
 800cc02:	f00d fcd5 	bl	801a5b0 <BUTTON_SetState>
 800cc06:	e79d      	b.n	800cb44 <_cbDialog+0x64>
		  else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 800cc08:	2301      	movs	r3, #1
 800cc0a:	60e3      	str	r3, [r4, #12]
 800cc0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc10:	6023      	str	r3, [r4, #0]
 800cc12:	4621      	mov	r1, r4
 800cc14:	4b2a      	ldr	r3, [pc, #168]	; (800ccc0 <_cbDialog+0x1e0>)
 800cc16:	6818      	ldr	r0, [r3, #0]
 800cc18:	f00a fe24 	bl	8017864 <WM_SendMessage>
 800cc1c:	e7e7      	b.n	800cbee <_cbDialog+0x10e>
		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 800cc1e:	2301      	movs	r3, #1
 800cc20:	60e3      	str	r3, [r4, #12]
 800cc22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc26:	6023      	str	r3, [r4, #0]
 800cc28:	4621      	mov	r1, r4
 800cc2a:	4b26      	ldr	r3, [pc, #152]	; (800ccc4 <_cbDialog+0x1e4>)
 800cc2c:	6818      	ldr	r0, [r3, #0]
 800cc2e:	f00a fe19 	bl	8017864 <WM_SendMessage>
 800cc32:	e7dc      	b.n	800cbee <_cbDialog+0x10e>
		  else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 800cc34:	2301      	movs	r3, #1
 800cc36:	60e3      	str	r3, [r4, #12]
 800cc38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc3c:	6023      	str	r3, [r4, #0]
 800cc3e:	4621      	mov	r1, r4
 800cc40:	4b21      	ldr	r3, [pc, #132]	; (800ccc8 <_cbDialog+0x1e8>)
 800cc42:	6818      	ldr	r0, [r3, #0]
 800cc44:	f00a fe0e 	bl	8017864 <WM_SendMessage>
 800cc48:	e7d1      	b.n	800cbee <_cbDialog+0x10e>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	60e3      	str	r3, [r4, #12]
 800cc4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc52:	6023      	str	r3, [r4, #0]
 800cc54:	4621      	mov	r1, r4
 800cc56:	4b1d      	ldr	r3, [pc, #116]	; (800cccc <_cbDialog+0x1ec>)
 800cc58:	6818      	ldr	r0, [r3, #0]
 800cc5a:	f00a fe03 	bl	8017864 <WM_SendMessage>
 800cc5e:	e7c6      	b.n	800cbee <_cbDialog+0x10e>
    	      BUTTON_SetState(hButton, 0);
 800cc60:	2100      	movs	r1, #0
 800cc62:	4b0a      	ldr	r3, [pc, #40]	; (800cc8c <_cbDialog+0x1ac>)
 800cc64:	6818      	ldr	r0, [r3, #0]
 800cc66:	f00d fca3 	bl	801a5b0 <BUTTON_SetState>
 800cc6a:	e76b      	b.n	800cb44 <_cbDialog+0x64>
			TEXTCOLOR = outputgain.Color;
 800cc6c:	4a18      	ldr	r2, [pc, #96]	; (800ccd0 <_cbDialog+0x1f0>)
 800cc6e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800cc70:	4b06      	ldr	r3, [pc, #24]	; (800cc8c <_cbDialog+0x1ac>)
 800cc72:	6099      	str	r1, [r3, #8]
		    value = outputgain.value;
 800cc74:	edd2 7a00 	vldr	s15, [r2]
 800cc78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc7c:	edc3 7a03 	vstr	s15, [r3, #12]
 800cc80:	e760      	b.n	800cb44 <_cbDialog+0x64>
    WM_DefaultProc(pMsg);
 800cc82:	4620      	mov	r0, r4
 800cc84:	f00b fcda 	bl	801863c <WM_DefaultProc>
}
 800cc88:	e75c      	b.n	800cb44 <_cbDialog+0x64>
 800cc8a:	bf00      	nop
 800cc8c:	20008878 	.word	0x20008878
 800cc90:	0800ccd5 	.word	0x0800ccd5
 800cc94:	08028448 	.word	0x08028448
 800cc98:	080329e4 	.word	0x080329e4
 800cc9c:	08030454 	.word	0x08030454
 800cca0:	2000883c 	.word	0x2000883c
 800cca4:	20008850 	.word	0x20008850
 800cca8:	20008874 	.word	0x20008874
 800ccac:	2000889c 	.word	0x2000889c
 800ccb0:	200088ac 	.word	0x200088ac
 800ccb4:	20008864 	.word	0x20008864
 800ccb8:	2002e6e4 	.word	0x2002e6e4
 800ccbc:	2002eecc 	.word	0x2002eecc
 800ccc0:	2002ede8 	.word	0x2002ede8
 800ccc4:	2002e894 	.word	0x2002e894
 800ccc8:	2002e598 	.word	0x2002e598
 800cccc:	2002f138 	.word	0x2002f138
 800ccd0:	2002e564 	.word	0x2002e564

0800ccd4 <_cbENC_Button>:
{
 800ccd4:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 800ccd6:	6803      	ldr	r3, [r0, #0]
 800ccd8:	2b0f      	cmp	r3, #15
 800ccda:	d10b      	bne.n	800ccf4 <_cbENC_Button+0x20>
    	if(Enc_OutputSelected == 1){
 800ccdc:	4b07      	ldr	r3, [pc, #28]	; (800ccfc <_cbENC_Button+0x28>)
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	2b01      	cmp	r3, #1
 800cce2:	d003      	beq.n	800ccec <_cbENC_Button+0x18>
    	    	COLOR = GUI_DARKGRAY;
 800cce4:	4b05      	ldr	r3, [pc, #20]	; (800ccfc <_cbENC_Button+0x28>)
 800cce6:	4a06      	ldr	r2, [pc, #24]	; (800cd00 <_cbENC_Button+0x2c>)
 800cce8:	605a      	str	r2, [r3, #4]
}
 800ccea:	bd08      	pop	{r3, pc}
    			COLOR = GUI_GRAY;
 800ccec:	4b03      	ldr	r3, [pc, #12]	; (800ccfc <_cbENC_Button+0x28>)
 800ccee:	4a05      	ldr	r2, [pc, #20]	; (800cd04 <_cbENC_Button+0x30>)
 800ccf0:	605a      	str	r2, [r3, #4]
 800ccf2:	e7fa      	b.n	800ccea <_cbENC_Button+0x16>
      BUTTON_Callback(pMsg);
 800ccf4:	f00d fae2 	bl	801a2bc <BUTTON_Callback>
}
 800ccf8:	e7f7      	b.n	800ccea <_cbENC_Button+0x16>
 800ccfa:	bf00      	nop
 800ccfc:	20008878 	.word	0x20008878
 800cd00:	ff404040 	.word	0xff404040
 800cd04:	ff808080 	.word	0xff808080

0800cd08 <CreateEnc_OutputWindow>:


WM_HWIN CreateEnc_OutputWindow(void) {
 800cd08:	b510      	push	{r4, lr}
 800cd0a:	b084      	sub	sp, #16

  Enc_OutputWindow = WM_CreateWindow(600, 350, 180, 100, WM_CF_HIDE, _cbDialog, 0);
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	9302      	str	r3, [sp, #8]
 800cd10:	4a09      	ldr	r2, [pc, #36]	; (800cd38 <CreateEnc_OutputWindow+0x30>)
 800cd12:	9201      	str	r2, [sp, #4]
 800cd14:	9300      	str	r3, [sp, #0]
 800cd16:	2364      	movs	r3, #100	; 0x64
 800cd18:	22b4      	movs	r2, #180	; 0xb4
 800cd1a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800cd1e:	f44f 7016 	mov.w	r0, #600	; 0x258
 800cd22:	f00a ff13 	bl	8017b4c <WM_CreateWindow>
 800cd26:	4c05      	ldr	r4, [pc, #20]	; (800cd3c <CreateEnc_OutputWindow+0x34>)
 800cd28:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 800cd2a:	2001      	movs	r0, #1
 800cd2c:	f00c fb80 	bl	8019430 <WM_MULTIBUF_Enable>

  return Enc_OutputWindow;
}
 800cd30:	6820      	ldr	r0, [r4, #0]
 800cd32:	b004      	add	sp, #16
 800cd34:	bd10      	pop	{r4, pc}
 800cd36:	bf00      	nop
 800cd38:	0800cae1 	.word	0x0800cae1
 800cd3c:	2002e51c 	.word	0x2002e51c

0800cd40 <_cbDialog>:
}




static void _cbDialog(WM_MESSAGE * pMsg) {
 800cd40:	b510      	push	{r4, lr}
 800cd42:	b084      	sub	sp, #16
  int           Id, NotificationCode;


  switch(pMsg->MsgId) {
 800cd44:	6803      	ldr	r3, [r0, #0]
 800cd46:	2b0f      	cmp	r3, #15
 800cd48:	d02e      	beq.n	800cda8 <_cbDialog+0x68>
 800cd4a:	4604      	mov	r4, r0
 800cd4c:	dd15      	ble.n	800cd7a <_cbDialog+0x3a>
 800cd4e:	2b26      	cmp	r3, #38	; 0x26
 800cd50:	d04a      	beq.n	800cde8 <_cbDialog+0xa8>
 800cd52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd56:	f040 80c4 	bne.w	800cee2 <_cbDialog+0x1a2>
    }
    break;
//////////////////////////////////////////////////////////////////
    case WM_USER:
    	//#########UPDATE Color & value#############//
		if(pMsg->Data.v==0){
 800cd5a:	68c3      	ldr	r3, [r0, #12]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f000 80b5 	beq.w	800cecc <_cbDialog+0x18c>
		    value = ratio.value;
		}
		//#########################################//

		//#########Remote unselect#################//
		else if(pMsg->Data.v==1){
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d11e      	bne.n	800cda4 <_cbDialog+0x64>
			Enc_RatioSelected = !Enc_RatioSelected;
 800cd66:	4b61      	ldr	r3, [pc, #388]	; (800ceec <_cbDialog+0x1ac>)
 800cd68:	6919      	ldr	r1, [r3, #16]
 800cd6a:	fab1 f181 	clz	r1, r1
 800cd6e:	0949      	lsrs	r1, r1, #5
 800cd70:	6119      	str	r1, [r3, #16]
			BUTTON_SetState(hButton, Enc_RatioSelected);
 800cd72:	6818      	ldr	r0, [r3, #0]
 800cd74:	f00d fc1c 	bl	801a5b0 <BUTTON_SetState>
 800cd78:	e014      	b.n	800cda4 <_cbDialog+0x64>
  switch(pMsg->MsgId) {
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	f040 80b1 	bne.w	800cee2 <_cbDialog+0x1a2>
   hButton = BUTTON_CreateEx(0, 0, 180, 100, pMsg->hWin, WM_CF_SHOW, 0, ID_ENC_Button);
 800cd80:	2301      	movs	r3, #1
 800cd82:	9303      	str	r3, [sp, #12]
 800cd84:	2000      	movs	r0, #0
 800cd86:	9002      	str	r0, [sp, #8]
 800cd88:	2302      	movs	r3, #2
 800cd8a:	9301      	str	r3, [sp, #4]
 800cd8c:	6863      	ldr	r3, [r4, #4]
 800cd8e:	9300      	str	r3, [sp, #0]
 800cd90:	2364      	movs	r3, #100	; 0x64
 800cd92:	22b4      	movs	r2, #180	; 0xb4
 800cd94:	4601      	mov	r1, r0
 800cd96:	f00d fb49 	bl	801a42c <BUTTON_CreateEx>
 800cd9a:	4b54      	ldr	r3, [pc, #336]	; (800ceec <_cbDialog+0x1ac>)
 800cd9c:	6018      	str	r0, [r3, #0]
   WM_SetCallback(hButton, _cbENC_Button);
 800cd9e:	4954      	ldr	r1, [pc, #336]	; (800cef0 <_cbDialog+0x1b0>)
 800cda0:	f00c f916 	bl	8018fd0 <WM_SetCallback>
    break;
/////////////////////////////////////////////////////////////////
   default:
    WM_DefaultProc(pMsg);
  }
}
 800cda4:	b004      	add	sp, #16
 800cda6:	bd10      	pop	{r4, pc}
  	GUI_SetBkColor(COLOR);
 800cda8:	4c50      	ldr	r4, [pc, #320]	; (800ceec <_cbDialog+0x1ac>)
 800cdaa:	6860      	ldr	r0, [r4, #4]
 800cdac:	f003 faa6 	bl	80102fc <GUI_SetBkColor>
  	GUI_Clear();
 800cdb0:	f003 fbb4 	bl	801051c <GUI_Clear>
      GUI_SetColor(TEXTCOLOR);
 800cdb4:	68a0      	ldr	r0, [r4, #8]
 800cdb6:	f003 faad 	bl	8010314 <GUI_SetColor>
      GUI_SetFont(&GUI_Font32B_1);
 800cdba:	484e      	ldr	r0, [pc, #312]	; (800cef4 <_cbDialog+0x1b4>)
 800cdbc:	f003 fb0c 	bl	80103d8 <GUI_SetFont>
      GUI_DispStringAt("ratio", 0, 0);
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	4611      	mov	r1, r2
 800cdc4:	484c      	ldr	r0, [pc, #304]	; (800cef8 <_cbDialog+0x1b8>)
 800cdc6:	f003 ffd1 	bl	8010d6c <GUI_DispStringAt>
      GUI_SetFont(&GUI_FontD36x48);
 800cdca:	484c      	ldr	r0, [pc, #304]	; (800cefc <_cbDialog+0x1bc>)
 800cdcc:	f003 fb04 	bl	80103d8 <GUI_SetFont>
      GUI_GotoXY(0,30);
 800cdd0:	211e      	movs	r1, #30
 800cdd2:	2000      	movs	r0, #0
 800cdd4:	f003 fa34 	bl	8010240 <GUI_GotoXY>
      GUI_DispFloatMin(value, 1);
 800cdd8:	ed94 0a03 	vldr	s0, [r4, #12]
 800cddc:	2001      	movs	r0, #1
 800cdde:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800cde2:	f004 fd9f 	bl	8011924 <GUI_DispFloatMin>
    break;
 800cde6:	e7dd      	b.n	800cda4 <_cbDialog+0x64>
    Id    = WM_GetId(pMsg->hWinSrc);
 800cde8:	6880      	ldr	r0, [r0, #8]
 800cdea:	f00b ffef 	bl	8018dcc <WM_GetId>
    NotificationCode = pMsg->Data.v;
 800cdee:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 800cdf0:	2801      	cmp	r0, #1
 800cdf2:	d1d7      	bne.n	800cda4 <_cbDialog+0x64>
      switch(NotificationCode) {
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d1d5      	bne.n	800cda4 <_cbDialog+0x64>
		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 800cdf8:	4b41      	ldr	r3, [pc, #260]	; (800cf00 <_cbDialog+0x1c0>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	b9eb      	cbnz	r3, 800ce3a <_cbDialog+0xfa>
		  else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 800cdfe:	4b41      	ldr	r3, [pc, #260]	; (800cf04 <_cbDialog+0x1c4>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d130      	bne.n	800ce68 <_cbDialog+0x128>
		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 800ce06:	4b40      	ldr	r3, [pc, #256]	; (800cf08 <_cbDialog+0x1c8>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d137      	bne.n	800ce7e <_cbDialog+0x13e>
		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 800ce0e:	4b3f      	ldr	r3, [pc, #252]	; (800cf0c <_cbDialog+0x1cc>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d13e      	bne.n	800ce94 <_cbDialog+0x154>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 800ce16:	4b3e      	ldr	r3, [pc, #248]	; (800cf10 <_cbDialog+0x1d0>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d145      	bne.n	800ceaa <_cbDialog+0x16a>
		  else if (Enc_InputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_InputWindow, pMsg);}
 800ce1e:	4b3d      	ldr	r3, [pc, #244]	; (800cf14 <_cbDialog+0x1d4>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	b1a3      	cbz	r3, 800ce4e <_cbDialog+0x10e>
 800ce24:	2301      	movs	r3, #1
 800ce26:	60e3      	str	r3, [r4, #12]
 800ce28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce2c:	6023      	str	r3, [r4, #0]
 800ce2e:	4621      	mov	r1, r4
 800ce30:	4b39      	ldr	r3, [pc, #228]	; (800cf18 <_cbDialog+0x1d8>)
 800ce32:	6818      	ldr	r0, [r3, #0]
 800ce34:	f00a fd16 	bl	8017864 <WM_SendMessage>
 800ce38:	e009      	b.n	800ce4e <_cbDialog+0x10e>
		  if 	  (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	60e3      	str	r3, [r4, #12]
 800ce3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce42:	6023      	str	r3, [r4, #0]
 800ce44:	4621      	mov	r1, r4
 800ce46:	4b35      	ldr	r3, [pc, #212]	; (800cf1c <_cbDialog+0x1dc>)
 800ce48:	6818      	ldr	r0, [r3, #0]
 800ce4a:	f00a fd0b 	bl	8017864 <WM_SendMessage>
    	  Enc_RatioSelected = !Enc_RatioSelected;
 800ce4e:	4a27      	ldr	r2, [pc, #156]	; (800ceec <_cbDialog+0x1ac>)
 800ce50:	6913      	ldr	r3, [r2, #16]
 800ce52:	fab3 f383 	clz	r3, r3
 800ce56:	095b      	lsrs	r3, r3, #5
 800ce58:	6113      	str	r3, [r2, #16]
    	  if(Enc_RatioSelected){
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d030      	beq.n	800cec0 <_cbDialog+0x180>
    	      BUTTON_SetState(hButton, 1);
 800ce5e:	2101      	movs	r1, #1
 800ce60:	6810      	ldr	r0, [r2, #0]
 800ce62:	f00d fba5 	bl	801a5b0 <BUTTON_SetState>
 800ce66:	e79d      	b.n	800cda4 <_cbDialog+0x64>
		  else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 800ce68:	2301      	movs	r3, #1
 800ce6a:	60e3      	str	r3, [r4, #12]
 800ce6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce70:	6023      	str	r3, [r4, #0]
 800ce72:	4621      	mov	r1, r4
 800ce74:	4b2a      	ldr	r3, [pc, #168]	; (800cf20 <_cbDialog+0x1e0>)
 800ce76:	6818      	ldr	r0, [r3, #0]
 800ce78:	f00a fcf4 	bl	8017864 <WM_SendMessage>
 800ce7c:	e7e7      	b.n	800ce4e <_cbDialog+0x10e>
		  else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 800ce7e:	2301      	movs	r3, #1
 800ce80:	60e3      	str	r3, [r4, #12]
 800ce82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce86:	6023      	str	r3, [r4, #0]
 800ce88:	4621      	mov	r1, r4
 800ce8a:	4b26      	ldr	r3, [pc, #152]	; (800cf24 <_cbDialog+0x1e4>)
 800ce8c:	6818      	ldr	r0, [r3, #0]
 800ce8e:	f00a fce9 	bl	8017864 <WM_SendMessage>
 800ce92:	e7dc      	b.n	800ce4e <_cbDialog+0x10e>
		  else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 800ce94:	2301      	movs	r3, #1
 800ce96:	60e3      	str	r3, [r4, #12]
 800ce98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce9c:	6023      	str	r3, [r4, #0]
 800ce9e:	4621      	mov	r1, r4
 800cea0:	4b21      	ldr	r3, [pc, #132]	; (800cf28 <_cbDialog+0x1e8>)
 800cea2:	6818      	ldr	r0, [r3, #0]
 800cea4:	f00a fcde 	bl	8017864 <WM_SendMessage>
 800cea8:	e7d1      	b.n	800ce4e <_cbDialog+0x10e>
		  else if (Enc_ReleaseSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_ReleaseWindow, pMsg);}
 800ceaa:	2301      	movs	r3, #1
 800ceac:	60e3      	str	r3, [r4, #12]
 800ceae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ceb2:	6023      	str	r3, [r4, #0]
 800ceb4:	4621      	mov	r1, r4
 800ceb6:	4b1d      	ldr	r3, [pc, #116]	; (800cf2c <_cbDialog+0x1ec>)
 800ceb8:	6818      	ldr	r0, [r3, #0]
 800ceba:	f00a fcd3 	bl	8017864 <WM_SendMessage>
 800cebe:	e7c6      	b.n	800ce4e <_cbDialog+0x10e>
    	      BUTTON_SetState(hButton, 0);
 800cec0:	2100      	movs	r1, #0
 800cec2:	4b0a      	ldr	r3, [pc, #40]	; (800ceec <_cbDialog+0x1ac>)
 800cec4:	6818      	ldr	r0, [r3, #0]
 800cec6:	f00d fb73 	bl	801a5b0 <BUTTON_SetState>
 800ceca:	e76b      	b.n	800cda4 <_cbDialog+0x64>
			TEXTCOLOR = ratio.Color;
 800cecc:	4a18      	ldr	r2, [pc, #96]	; (800cf30 <_cbDialog+0x1f0>)
 800cece:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800ced0:	4b06      	ldr	r3, [pc, #24]	; (800ceec <_cbDialog+0x1ac>)
 800ced2:	6099      	str	r1, [r3, #8]
		    value = ratio.value;
 800ced4:	edd2 7a00 	vldr	s15, [r2]
 800ced8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cedc:	edc3 7a03 	vstr	s15, [r3, #12]
 800cee0:	e760      	b.n	800cda4 <_cbDialog+0x64>
    WM_DefaultProc(pMsg);
 800cee2:	4620      	mov	r0, r4
 800cee4:	f00b fbaa 	bl	801863c <WM_DefaultProc>
}
 800cee8:	e75c      	b.n	800cda4 <_cbDialog+0x64>
 800ceea:	bf00      	nop
 800ceec:	2000888c 	.word	0x2000888c
 800cef0:	0800cf35 	.word	0x0800cf35
 800cef4:	08028448 	.word	0x08028448
 800cef8:	08032904 	.word	0x08032904
 800cefc:	08030454 	.word	0x08030454
 800cf00:	2000883c 	.word	0x2000883c
 800cf04:	20008850 	.word	0x20008850
 800cf08:	20008874 	.word	0x20008874
 800cf0c:	20008888 	.word	0x20008888
 800cf10:	200088ac 	.word	0x200088ac
 800cf14:	20008864 	.word	0x20008864
 800cf18:	2002e6e4 	.word	0x2002e6e4
 800cf1c:	2002eecc 	.word	0x2002eecc
 800cf20:	2002ede8 	.word	0x2002ede8
 800cf24:	2002e894 	.word	0x2002e894
 800cf28:	2002e51c 	.word	0x2002e51c
 800cf2c:	2002f138 	.word	0x2002f138
 800cf30:	2002ece4 	.word	0x2002ece4

0800cf34 <_cbENC_Button>:
{
 800cf34:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 800cf36:	6803      	ldr	r3, [r0, #0]
 800cf38:	2b0f      	cmp	r3, #15
 800cf3a:	d10b      	bne.n	800cf54 <_cbENC_Button+0x20>
    	if(Enc_RatioSelected == 1){
 800cf3c:	4b07      	ldr	r3, [pc, #28]	; (800cf5c <_cbENC_Button+0x28>)
 800cf3e:	691b      	ldr	r3, [r3, #16]
 800cf40:	2b01      	cmp	r3, #1
 800cf42:	d003      	beq.n	800cf4c <_cbENC_Button+0x18>
    	    	COLOR = GUI_DARKGRAY;
 800cf44:	4b05      	ldr	r3, [pc, #20]	; (800cf5c <_cbENC_Button+0x28>)
 800cf46:	4a06      	ldr	r2, [pc, #24]	; (800cf60 <_cbENC_Button+0x2c>)
 800cf48:	605a      	str	r2, [r3, #4]
}
 800cf4a:	bd08      	pop	{r3, pc}
    			COLOR = GUI_GRAY;
 800cf4c:	4b03      	ldr	r3, [pc, #12]	; (800cf5c <_cbENC_Button+0x28>)
 800cf4e:	4a05      	ldr	r2, [pc, #20]	; (800cf64 <_cbENC_Button+0x30>)
 800cf50:	605a      	str	r2, [r3, #4]
 800cf52:	e7fa      	b.n	800cf4a <_cbENC_Button+0x16>
      BUTTON_Callback(pMsg);
 800cf54:	f00d f9b2 	bl	801a2bc <BUTTON_Callback>
}
 800cf58:	e7f7      	b.n	800cf4a <_cbENC_Button+0x16>
 800cf5a:	bf00      	nop
 800cf5c:	2000888c 	.word	0x2000888c
 800cf60:	ff404040 	.word	0xff404040
 800cf64:	ff808080 	.word	0xff808080

0800cf68 <CreateEnc_RatioWindow>:


WM_HWIN CreateEnc_RatioWindow(void) {
 800cf68:	b510      	push	{r4, lr}
 800cf6a:	b084      	sub	sp, #16

	Enc_RatioWindow = WM_CreateWindow(600, 240, 180, 100, WM_CF_HIDE, _cbDialog, 0);
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	9302      	str	r3, [sp, #8]
 800cf70:	4a08      	ldr	r2, [pc, #32]	; (800cf94 <CreateEnc_RatioWindow+0x2c>)
 800cf72:	9201      	str	r2, [sp, #4]
 800cf74:	9300      	str	r3, [sp, #0]
 800cf76:	2364      	movs	r3, #100	; 0x64
 800cf78:	22b4      	movs	r2, #180	; 0xb4
 800cf7a:	21f0      	movs	r1, #240	; 0xf0
 800cf7c:	f44f 7016 	mov.w	r0, #600	; 0x258
 800cf80:	f00a fde4 	bl	8017b4c <WM_CreateWindow>
 800cf84:	4c04      	ldr	r4, [pc, #16]	; (800cf98 <CreateEnc_RatioWindow+0x30>)
 800cf86:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 800cf88:	2001      	movs	r0, #1
 800cf8a:	f00c fa51 	bl	8019430 <WM_MULTIBUF_Enable>

  return Enc_RatioWindow;
}
 800cf8e:	6820      	ldr	r0, [r4, #0]
 800cf90:	b004      	add	sp, #16
 800cf92:	bd10      	pop	{r4, pc}
 800cf94:	0800cd41 	.word	0x0800cd41
 800cf98:	2002e598 	.word	0x2002e598

0800cf9c <_cbDialog>:
}




static void _cbDialog(WM_MESSAGE * pMsg) {
 800cf9c:	b510      	push	{r4, lr}
 800cf9e:	b084      	sub	sp, #16
  int           Id, NotificationCode;


  switch(pMsg->MsgId) {
 800cfa0:	6803      	ldr	r3, [r0, #0]
 800cfa2:	2b0f      	cmp	r3, #15
 800cfa4:	d02f      	beq.n	800d006 <_cbDialog+0x6a>
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	dd16      	ble.n	800cfd8 <_cbDialog+0x3c>
 800cfaa:	2b26      	cmp	r3, #38	; 0x26
 800cfac:	d04b      	beq.n	800d046 <_cbDialog+0xaa>
 800cfae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cfb2:	f040 80c6 	bne.w	800d142 <_cbDialog+0x1a6>
    }
    break;
//////////////////////////////////////////////////////////////////
    case WM_USER:
    	//#########UPDATE Color & value#############//
		if(pMsg->Data.v==0){
 800cfb6:	68c3      	ldr	r3, [r0, #12]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f000 80b7 	beq.w	800d12c <_cbDialog+0x190>
		    value = release.value;
		}
		//#########################################//

		//#########Remote unselect#################//
		else if(pMsg->Data.v==1){
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d11f      	bne.n	800d002 <_cbDialog+0x66>
			Enc_ReleaseSelected = !Enc_ReleaseSelected;
 800cfc2:	4b62      	ldr	r3, [pc, #392]	; (800d14c <_cbDialog+0x1b0>)
 800cfc4:	68d9      	ldr	r1, [r3, #12]
 800cfc6:	fab1 f181 	clz	r1, r1
 800cfca:	0949      	lsrs	r1, r1, #5
 800cfcc:	60d9      	str	r1, [r3, #12]
			BUTTON_SetState(hButton, Enc_ReleaseSelected);
 800cfce:	4b60      	ldr	r3, [pc, #384]	; (800d150 <_cbDialog+0x1b4>)
 800cfd0:	6818      	ldr	r0, [r3, #0]
 800cfd2:	f00d faed 	bl	801a5b0 <BUTTON_SetState>
 800cfd6:	e014      	b.n	800d002 <_cbDialog+0x66>
  switch(pMsg->MsgId) {
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	f040 80b2 	bne.w	800d142 <_cbDialog+0x1a6>
   hButton = BUTTON_CreateEx(0, 0, 180, 100, pMsg->hWin, WM_CF_SHOW, 0, ID_ENC_Button);
 800cfde:	2301      	movs	r3, #1
 800cfe0:	9303      	str	r3, [sp, #12]
 800cfe2:	2000      	movs	r0, #0
 800cfe4:	9002      	str	r0, [sp, #8]
 800cfe6:	2302      	movs	r3, #2
 800cfe8:	9301      	str	r3, [sp, #4]
 800cfea:	6863      	ldr	r3, [r4, #4]
 800cfec:	9300      	str	r3, [sp, #0]
 800cfee:	2364      	movs	r3, #100	; 0x64
 800cff0:	22b4      	movs	r2, #180	; 0xb4
 800cff2:	4601      	mov	r1, r0
 800cff4:	f00d fa1a 	bl	801a42c <BUTTON_CreateEx>
 800cff8:	4b55      	ldr	r3, [pc, #340]	; (800d150 <_cbDialog+0x1b4>)
 800cffa:	6018      	str	r0, [r3, #0]
   WM_SetCallback(hButton, _cbENC_Button);
 800cffc:	4955      	ldr	r1, [pc, #340]	; (800d154 <_cbDialog+0x1b8>)
 800cffe:	f00b ffe7 	bl	8018fd0 <WM_SetCallback>
    break;
/////////////////////////////////////////////////////////////////
   default:
    WM_DefaultProc(pMsg);
  }
}
 800d002:	b004      	add	sp, #16
 800d004:	bd10      	pop	{r4, pc}
  	GUI_SetBkColor(COLOR);
 800d006:	4c51      	ldr	r4, [pc, #324]	; (800d14c <_cbDialog+0x1b0>)
 800d008:	6820      	ldr	r0, [r4, #0]
 800d00a:	f003 f977 	bl	80102fc <GUI_SetBkColor>
  	GUI_Clear();
 800d00e:	f003 fa85 	bl	801051c <GUI_Clear>
    GUI_SetColor(TEXTCOLOR);
 800d012:	6860      	ldr	r0, [r4, #4]
 800d014:	f003 f97e 	bl	8010314 <GUI_SetColor>
    GUI_SetFont(&GUI_Font32B_1);
 800d018:	484f      	ldr	r0, [pc, #316]	; (800d158 <_cbDialog+0x1bc>)
 800d01a:	f003 f9dd 	bl	80103d8 <GUI_SetFont>
    GUI_DispStringAt("release", 0, 0);
 800d01e:	2200      	movs	r2, #0
 800d020:	4611      	mov	r1, r2
 800d022:	484e      	ldr	r0, [pc, #312]	; (800d15c <_cbDialog+0x1c0>)
 800d024:	f003 fea2 	bl	8010d6c <GUI_DispStringAt>
    GUI_SetFont(&GUI_FontD36x48);
 800d028:	484d      	ldr	r0, [pc, #308]	; (800d160 <_cbDialog+0x1c4>)
 800d02a:	f003 f9d5 	bl	80103d8 <GUI_SetFont>
    GUI_GotoXY(0,30);
 800d02e:	211e      	movs	r1, #30
 800d030:	2000      	movs	r0, #0
 800d032:	f003 f905 	bl	8010240 <GUI_GotoXY>
    GUI_DispFloatMin(value, 1);
 800d036:	ed94 0a02 	vldr	s0, [r4, #8]
 800d03a:	2001      	movs	r0, #1
 800d03c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800d040:	f004 fc70 	bl	8011924 <GUI_DispFloatMin>
    break;
 800d044:	e7dd      	b.n	800d002 <_cbDialog+0x66>
    Id    = WM_GetId(pMsg->hWinSrc);
 800d046:	6880      	ldr	r0, [r0, #8]
 800d048:	f00b fec0 	bl	8018dcc <WM_GetId>
    NotificationCode = pMsg->Data.v;
 800d04c:	68e3      	ldr	r3, [r4, #12]
    switch(Id) {
 800d04e:	2801      	cmp	r0, #1
 800d050:	d1d7      	bne.n	800d002 <_cbDialog+0x66>
      switch(NotificationCode) {
 800d052:	2b01      	cmp	r3, #1
 800d054:	d1d5      	bne.n	800d002 <_cbDialog+0x66>
    	 if 	 (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 800d056:	4b43      	ldr	r3, [pc, #268]	; (800d164 <_cbDialog+0x1c8>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	b9eb      	cbnz	r3, 800d098 <_cbDialog+0xfc>
    	 else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 800d05c:	4b42      	ldr	r3, [pc, #264]	; (800d168 <_cbDialog+0x1cc>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d131      	bne.n	800d0c8 <_cbDialog+0x12c>
    	 else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 800d064:	4b41      	ldr	r3, [pc, #260]	; (800d16c <_cbDialog+0x1d0>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d138      	bne.n	800d0de <_cbDialog+0x142>
    	 else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 800d06c:	4b40      	ldr	r3, [pc, #256]	; (800d170 <_cbDialog+0x1d4>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d13f      	bne.n	800d0f4 <_cbDialog+0x158>
    	 else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 800d074:	4b3f      	ldr	r3, [pc, #252]	; (800d174 <_cbDialog+0x1d8>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d146      	bne.n	800d10a <_cbDialog+0x16e>
    	 else if (Enc_InputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_InputWindow, pMsg);}
 800d07c:	4b3e      	ldr	r3, [pc, #248]	; (800d178 <_cbDialog+0x1dc>)
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	b1a3      	cbz	r3, 800d0ac <_cbDialog+0x110>
 800d082:	2301      	movs	r3, #1
 800d084:	60e3      	str	r3, [r4, #12]
 800d086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d08a:	6023      	str	r3, [r4, #0]
 800d08c:	4621      	mov	r1, r4
 800d08e:	4b3b      	ldr	r3, [pc, #236]	; (800d17c <_cbDialog+0x1e0>)
 800d090:	6818      	ldr	r0, [r3, #0]
 800d092:	f00a fbe7 	bl	8017864 <WM_SendMessage>
 800d096:	e009      	b.n	800d0ac <_cbDialog+0x110>
    	 if 	 (Enc_AttackSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_AttackWindow, pMsg);}
 800d098:	2301      	movs	r3, #1
 800d09a:	60e3      	str	r3, [r4, #12]
 800d09c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0a0:	6023      	str	r3, [r4, #0]
 800d0a2:	4621      	mov	r1, r4
 800d0a4:	4b36      	ldr	r3, [pc, #216]	; (800d180 <_cbDialog+0x1e4>)
 800d0a6:	6818      	ldr	r0, [r3, #0]
 800d0a8:	f00a fbdc 	bl	8017864 <WM_SendMessage>
    	  Enc_ReleaseSelected = !Enc_ReleaseSelected;
 800d0ac:	4a27      	ldr	r2, [pc, #156]	; (800d14c <_cbDialog+0x1b0>)
 800d0ae:	68d3      	ldr	r3, [r2, #12]
 800d0b0:	fab3 f383 	clz	r3, r3
 800d0b4:	095b      	lsrs	r3, r3, #5
 800d0b6:	60d3      	str	r3, [r2, #12]
    	  if(Enc_ReleaseSelected){
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d031      	beq.n	800d120 <_cbDialog+0x184>
    	      BUTTON_SetState(hButton, 1);
 800d0bc:	2101      	movs	r1, #1
 800d0be:	4b24      	ldr	r3, [pc, #144]	; (800d150 <_cbDialog+0x1b4>)
 800d0c0:	6818      	ldr	r0, [r3, #0]
 800d0c2:	f00d fa75 	bl	801a5b0 <BUTTON_SetState>
 800d0c6:	e79c      	b.n	800d002 <_cbDialog+0x66>
    	 else if (Enc_DistortionSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_DistortionWindow, pMsg);}
 800d0c8:	2301      	movs	r3, #1
 800d0ca:	60e3      	str	r3, [r4, #12]
 800d0cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0d0:	6023      	str	r3, [r4, #0]
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	4b2b      	ldr	r3, [pc, #172]	; (800d184 <_cbDialog+0x1e8>)
 800d0d6:	6818      	ldr	r0, [r3, #0]
 800d0d8:	f00a fbc4 	bl	8017864 <WM_SendMessage>
 800d0dc:	e7e6      	b.n	800d0ac <_cbDialog+0x110>
    	 else if (Enc_MakeUpGainSelected)	{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_MakeUpGainWindow, pMsg);}
 800d0de:	2301      	movs	r3, #1
 800d0e0:	60e3      	str	r3, [r4, #12]
 800d0e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0e6:	6023      	str	r3, [r4, #0]
 800d0e8:	4621      	mov	r1, r4
 800d0ea:	4b27      	ldr	r3, [pc, #156]	; (800d188 <_cbDialog+0x1ec>)
 800d0ec:	6818      	ldr	r0, [r3, #0]
 800d0ee:	f00a fbb9 	bl	8017864 <WM_SendMessage>
 800d0f2:	e7db      	b.n	800d0ac <_cbDialog+0x110>
    	 else if (Enc_OutputSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_OutputWindow, pMsg);}
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	60e3      	str	r3, [r4, #12]
 800d0f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0fc:	6023      	str	r3, [r4, #0]
 800d0fe:	4621      	mov	r1, r4
 800d100:	4b22      	ldr	r3, [pc, #136]	; (800d18c <_cbDialog+0x1f0>)
 800d102:	6818      	ldr	r0, [r3, #0]
 800d104:	f00a fbae 	bl	8017864 <WM_SendMessage>
 800d108:	e7d0      	b.n	800d0ac <_cbDialog+0x110>
    	 else if (Enc_RatioSelected)		{pMsg->Data.v = 1; pMsg->MsgId = WM_USER;  WM_SendMessage (Enc_RatioWindow, pMsg);}
 800d10a:	2301      	movs	r3, #1
 800d10c:	60e3      	str	r3, [r4, #12]
 800d10e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d112:	6023      	str	r3, [r4, #0]
 800d114:	4621      	mov	r1, r4
 800d116:	4b1e      	ldr	r3, [pc, #120]	; (800d190 <_cbDialog+0x1f4>)
 800d118:	6818      	ldr	r0, [r3, #0]
 800d11a:	f00a fba3 	bl	8017864 <WM_SendMessage>
 800d11e:	e7c5      	b.n	800d0ac <_cbDialog+0x110>
    	      BUTTON_SetState(hButton, 0);
 800d120:	2100      	movs	r1, #0
 800d122:	4b0b      	ldr	r3, [pc, #44]	; (800d150 <_cbDialog+0x1b4>)
 800d124:	6818      	ldr	r0, [r3, #0]
 800d126:	f00d fa43 	bl	801a5b0 <BUTTON_SetState>
 800d12a:	e76a      	b.n	800d002 <_cbDialog+0x66>
			TEXTCOLOR = release.Color;
 800d12c:	4a19      	ldr	r2, [pc, #100]	; (800d194 <_cbDialog+0x1f8>)
 800d12e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800d130:	4b06      	ldr	r3, [pc, #24]	; (800d14c <_cbDialog+0x1b0>)
 800d132:	6059      	str	r1, [r3, #4]
		    value = release.value;
 800d134:	edd2 7a00 	vldr	s15, [r2]
 800d138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d13c:	edc3 7a02 	vstr	s15, [r3, #8]
 800d140:	e75f      	b.n	800d002 <_cbDialog+0x66>
    WM_DefaultProc(pMsg);
 800d142:	4620      	mov	r0, r4
 800d144:	f00b fa7a 	bl	801863c <WM_DefaultProc>
}
 800d148:	e75b      	b.n	800d002 <_cbDialog+0x66>
 800d14a:	bf00      	nop
 800d14c:	200088a0 	.word	0x200088a0
 800d150:	20030624 	.word	0x20030624
 800d154:	0800d199 	.word	0x0800d199
 800d158:	08028448 	.word	0x08028448
 800d15c:	080328fc 	.word	0x080328fc
 800d160:	08030454 	.word	0x08030454
 800d164:	2000883c 	.word	0x2000883c
 800d168:	20008850 	.word	0x20008850
 800d16c:	20008874 	.word	0x20008874
 800d170:	20008888 	.word	0x20008888
 800d174:	2000889c 	.word	0x2000889c
 800d178:	20008864 	.word	0x20008864
 800d17c:	2002e6e4 	.word	0x2002e6e4
 800d180:	2002eecc 	.word	0x2002eecc
 800d184:	2002ede8 	.word	0x2002ede8
 800d188:	2002e894 	.word	0x2002e894
 800d18c:	2002e51c 	.word	0x2002e51c
 800d190:	2002e598 	.word	0x2002e598
 800d194:	2002e898 	.word	0x2002e898

0800d198 <_cbENC_Button>:
{
 800d198:	b508      	push	{r3, lr}
  switch (pMsg->MsgId)
 800d19a:	6803      	ldr	r3, [r0, #0]
 800d19c:	2b0f      	cmp	r3, #15
 800d19e:	d10b      	bne.n	800d1b8 <_cbENC_Button+0x20>
    	if(Enc_ReleaseSelected == 1){
 800d1a0:	4b07      	ldr	r3, [pc, #28]	; (800d1c0 <_cbENC_Button+0x28>)
 800d1a2:	68db      	ldr	r3, [r3, #12]
 800d1a4:	2b01      	cmp	r3, #1
 800d1a6:	d003      	beq.n	800d1b0 <_cbENC_Button+0x18>
    	    	COLOR = GUI_DARKGRAY;
 800d1a8:	4b05      	ldr	r3, [pc, #20]	; (800d1c0 <_cbENC_Button+0x28>)
 800d1aa:	4a06      	ldr	r2, [pc, #24]	; (800d1c4 <_cbENC_Button+0x2c>)
 800d1ac:	601a      	str	r2, [r3, #0]
}
 800d1ae:	bd08      	pop	{r3, pc}
    			COLOR = GUI_GRAY;
 800d1b0:	4b03      	ldr	r3, [pc, #12]	; (800d1c0 <_cbENC_Button+0x28>)
 800d1b2:	4a05      	ldr	r2, [pc, #20]	; (800d1c8 <_cbENC_Button+0x30>)
 800d1b4:	601a      	str	r2, [r3, #0]
 800d1b6:	e7fa      	b.n	800d1ae <_cbENC_Button+0x16>
      BUTTON_Callback(pMsg);
 800d1b8:	f00d f880 	bl	801a2bc <BUTTON_Callback>
}
 800d1bc:	e7f7      	b.n	800d1ae <_cbENC_Button+0x16>
 800d1be:	bf00      	nop
 800d1c0:	200088a0 	.word	0x200088a0
 800d1c4:	ff404040 	.word	0xff404040
 800d1c8:	ff808080 	.word	0xff808080

0800d1cc <CreateEnc_ReleaseWindow>:


WM_HWIN CreateEnc_ReleaseWindow(void) {
 800d1cc:	b510      	push	{r4, lr}
 800d1ce:	b084      	sub	sp, #16

	Enc_ReleaseWindow = WM_CreateWindow(20, 240, 180, 100, WM_CF_HIDE, _cbDialog, 0);
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	9302      	str	r3, [sp, #8]
 800d1d4:	4a08      	ldr	r2, [pc, #32]	; (800d1f8 <CreateEnc_ReleaseWindow+0x2c>)
 800d1d6:	9201      	str	r2, [sp, #4]
 800d1d8:	9300      	str	r3, [sp, #0]
 800d1da:	2364      	movs	r3, #100	; 0x64
 800d1dc:	22b4      	movs	r2, #180	; 0xb4
 800d1de:	21f0      	movs	r1, #240	; 0xf0
 800d1e0:	2014      	movs	r0, #20
 800d1e2:	f00a fcb3 	bl	8017b4c <WM_CreateWindow>
 800d1e6:	4c05      	ldr	r4, [pc, #20]	; (800d1fc <CreateEnc_ReleaseWindow+0x30>)
 800d1e8:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 800d1ea:	2001      	movs	r0, #1
 800d1ec:	f00c f920 	bl	8019430 <WM_MULTIBUF_Enable>

  return Enc_ReleaseWindow;
}
 800d1f0:	6820      	ldr	r0, [r4, #0]
 800d1f2:	b004      	add	sp, #16
 800d1f4:	bd10      	pop	{r4, pc}
 800d1f6:	bf00      	nop
 800d1f8:	0800cf9d 	.word	0x0800cf9d
 800d1fc:	2002f138 	.word	0x2002f138

0800d200 <drawBarDottedVertical>:



}

void drawBarDottedVertical (int pos_x, int pos_y, float PeakVal,float AvVal, GUI_COLOR color, int width){
 800d200:	b500      	push	{lr}
 800d202:	b085      	sub	sp, #20
 800d204:	9103      	str	r1, [sp, #12]

	GUI_DrawGradientV(pos_x,pos_y-AvVal,pos_x+width,pos_y, color,color);
 800d206:	ee07 1a90 	vmov	s15, r1
 800d20a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d20e:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800d212:	18c1      	adds	r1, r0, r3
 800d214:	9201      	str	r2, [sp, #4]
 800d216:	9200      	str	r2, [sp, #0]
 800d218:	9b03      	ldr	r3, [sp, #12]
 800d21a:	460a      	mov	r2, r1
 800d21c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 800d220:	ee17 1a90 	vmov	r1, s15
 800d224:	f003 ff2c 	bl	8011080 <GUI_DrawGradientV>


}
 800d228:	b005      	add	sp, #20
 800d22a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800d230 <_cbDialog>:
#include "stm32f4xx_hal.h"


static void _cbDialog(WM_MESSAGE * pMsg) {

  switch (pMsg->MsgId) {
 800d230:	6803      	ldr	r3, [r0, #0]
 800d232:	2b01      	cmp	r3, #1
 800d234:	d05c      	beq.n	800d2f0 <_cbDialog+0xc0>
static void _cbDialog(WM_MESSAGE * pMsg) {
 800d236:	b510      	push	{r4, lr}
  switch (pMsg->MsgId) {
 800d238:	2b0f      	cmp	r3, #15
 800d23a:	d156      	bne.n	800d2ea <_cbDialog+0xba>
  case WM_CREATE:

    break;
  case WM_PAINT:
	  GUI_SetBkColor(GUI_DARKGRAY);
 800d23c:	482d      	ldr	r0, [pc, #180]	; (800d2f4 <_cbDialog+0xc4>)
 800d23e:	f003 f85d 	bl	80102fc <GUI_SetBkColor>

	  GUI_Clear();
 800d242:	f003 f96b 	bl	801051c <GUI_Clear>
		for(int i=0; i<400;i++){
 800d246:	2400      	movs	r4, #0
 800d248:	e007      	b.n	800d25a <_cbDialog+0x2a>
			GUI_SetColor(GUI_LIGHTGRAY);
			if(i % 25 == 0){
				GUI_DrawHLine(400-i-20,2,+12);
 800d24a:	220c      	movs	r2, #12
 800d24c:	2102      	movs	r1, #2
 800d24e:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 800d252:	f003 ffe9 	bl	8011228 <GUI_DrawHLine>
 800d256:	e012      	b.n	800d27e <_cbDialog+0x4e>
		for(int i=0; i<400;i++){
 800d258:	3401      	adds	r4, #1
 800d25a:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 800d25e:	da46      	bge.n	800d2ee <_cbDialog+0xbe>
			GUI_SetColor(GUI_LIGHTGRAY);
 800d260:	4825      	ldr	r0, [pc, #148]	; (800d2f8 <_cbDialog+0xc8>)
 800d262:	f003 f857 	bl	8010314 <GUI_SetColor>
			if(i % 25 == 0){
 800d266:	4a25      	ldr	r2, [pc, #148]	; (800d2fc <_cbDialog+0xcc>)
 800d268:	fb82 3204 	smull	r3, r2, r2, r4
 800d26c:	17e3      	asrs	r3, r4, #31
 800d26e:	ebc3 03e2 	rsb	r3, r3, r2, asr #3
 800d272:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d276:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d27a:	429c      	cmp	r4, r3
 800d27c:	d0e5      	beq.n	800d24a <_cbDialog+0x1a>
			}
			if(i % 50 == 0){
 800d27e:	4a1f      	ldr	r2, [pc, #124]	; (800d2fc <_cbDialog+0xcc>)
 800d280:	fb82 3204 	smull	r3, r2, r2, r4
 800d284:	17e3      	asrs	r3, r4, #31
 800d286:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 800d28a:	2232      	movs	r2, #50	; 0x32
 800d28c:	fb02 4313 	mls	r3, r2, r3, r4
 800d290:	2b00      	cmp	r3, #0
 800d292:	d1e1      	bne.n	800d258 <_cbDialog+0x28>
				GUI_DrawHLine(400-i-20+1,2,+12);
 800d294:	220c      	movs	r2, #12
 800d296:	2102      	movs	r1, #2
 800d298:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 800d29c:	3001      	adds	r0, #1
 800d29e:	f003 ffc3 	bl	8011228 <GUI_DrawHLine>
				GUI_DrawHLine(400-i-20,2,+12);
 800d2a2:	220c      	movs	r2, #12
 800d2a4:	2102      	movs	r1, #2
 800d2a6:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 800d2aa:	f003 ffbd 	bl	8011228 <GUI_DrawHLine>
				GUI_DrawHLine(400-i-20-1,2,+12);
 800d2ae:	220c      	movs	r2, #12
 800d2b0:	2102      	movs	r1, #2
 800d2b2:	f5c4 70bd 	rsb	r0, r4, #378	; 0x17a
 800d2b6:	3001      	adds	r0, #1
 800d2b8:	f003 ffb6 	bl	8011228 <GUI_DrawHLine>

				GUI_GotoXY(20,400-i-20-5);
 800d2bc:	f5c4 71bb 	rsb	r1, r4, #374	; 0x176
 800d2c0:	3101      	adds	r1, #1
 800d2c2:	2014      	movs	r0, #20
 800d2c4:	f002 ffbc 	bl	8010240 <GUI_GotoXY>
				GUI_DispFloatMin(((i-400-20+100)/10)+2, 1);
 800d2c8:	f5a4 73a0 	sub.w	r3, r4, #320	; 0x140
 800d2cc:	4a0c      	ldr	r2, [pc, #48]	; (800d300 <_cbDialog+0xd0>)
 800d2ce:	fb82 1203 	smull	r1, r2, r2, r3
 800d2d2:	17db      	asrs	r3, r3, #31
 800d2d4:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800d2d8:	3302      	adds	r3, #2
 800d2da:	ee00 3a10 	vmov	s0, r3
 800d2de:	2001      	movs	r0, #1
 800d2e0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800d2e4:	f004 fb1e 	bl	8011924 <GUI_DispFloatMin>
 800d2e8:	e7b6      	b.n	800d258 <_cbDialog+0x28>
			}
		}

    break;
  default:
    WM_DefaultProc(pMsg);
 800d2ea:	f00b f9a7 	bl	801863c <WM_DefaultProc>

	}

}
 800d2ee:	bd10      	pop	{r4, pc}
 800d2f0:	4770      	bx	lr
 800d2f2:	bf00      	nop
 800d2f4:	ff404040 	.word	0xff404040
 800d2f8:	ffd3d3d3 	.word	0xffd3d3d3
 800d2fc:	51eb851f 	.word	0x51eb851f
 800d300:	66666667 	.word	0x66666667

0800d304 <CreateIndicatorWindow1>:


WM_HWIN CreateIndicatorWindow1(void) {
 800d304:	b510      	push	{r4, lr}
 800d306:	b084      	sub	sp, #16



  IndicatorWindow1 = WM_CreateWindow(290, 60, 50, 390,WM_CF_HIDE , _cbDialog, 0);
 800d308:	2300      	movs	r3, #0
 800d30a:	9302      	str	r3, [sp, #8]
 800d30c:	4a09      	ldr	r2, [pc, #36]	; (800d334 <CreateIndicatorWindow1+0x30>)
 800d30e:	9201      	str	r2, [sp, #4]
 800d310:	9300      	str	r3, [sp, #0]
 800d312:	f44f 73c3 	mov.w	r3, #390	; 0x186
 800d316:	2232      	movs	r2, #50	; 0x32
 800d318:	213c      	movs	r1, #60	; 0x3c
 800d31a:	f44f 7091 	mov.w	r0, #290	; 0x122
 800d31e:	f00a fc15 	bl	8017b4c <WM_CreateWindow>
 800d322:	4c05      	ldr	r4, [pc, #20]	; (800d338 <CreateIndicatorWindow1+0x34>)
 800d324:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 800d326:	2001      	movs	r0, #1
 800d328:	f00c f882 	bl	8019430 <WM_MULTIBUF_Enable>

  return IndicatorWindow1;
}
 800d32c:	6820      	ldr	r0, [r4, #0]
 800d32e:	b004      	add	sp, #16
 800d330:	bd10      	pop	{r4, pc}
 800d332:	bf00      	nop
 800d334:	0800d231 	.word	0x0800d231
 800d338:	2002e514 	.word	0x2002e514

0800d33c <_cbDialog>:
#include "stm32f4xx_hal.h"


static void _cbDialog(WM_MESSAGE * pMsg) {

  switch (pMsg->MsgId) {
 800d33c:	6803      	ldr	r3, [r0, #0]
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d05c      	beq.n	800d3fc <_cbDialog+0xc0>
static void _cbDialog(WM_MESSAGE * pMsg) {
 800d342:	b510      	push	{r4, lr}
  switch (pMsg->MsgId) {
 800d344:	2b0f      	cmp	r3, #15
 800d346:	d156      	bne.n	800d3f6 <_cbDialog+0xba>
  case WM_CREATE:

    break;
  case WM_PAINT:
	  GUI_SetBkColor(GUI_DARKGRAY);
 800d348:	482d      	ldr	r0, [pc, #180]	; (800d400 <_cbDialog+0xc4>)
 800d34a:	f002 ffd7 	bl	80102fc <GUI_SetBkColor>

	  GUI_Clear();
 800d34e:	f003 f8e5 	bl	801051c <GUI_Clear>
	  		for(int i=0; i<400;i++){
 800d352:	2400      	movs	r4, #0
 800d354:	e007      	b.n	800d366 <_cbDialog+0x2a>
	  			GUI_SetColor(GUI_LIGHTGRAY);
	  			if(i % 25 == 0){
	  				GUI_DrawHLine(400-i-20,2,+12);
 800d356:	220c      	movs	r2, #12
 800d358:	2102      	movs	r1, #2
 800d35a:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 800d35e:	f003 ff63 	bl	8011228 <GUI_DrawHLine>
 800d362:	e012      	b.n	800d38a <_cbDialog+0x4e>
	  		for(int i=0; i<400;i++){
 800d364:	3401      	adds	r4, #1
 800d366:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 800d36a:	da46      	bge.n	800d3fa <_cbDialog+0xbe>
	  			GUI_SetColor(GUI_LIGHTGRAY);
 800d36c:	4825      	ldr	r0, [pc, #148]	; (800d404 <_cbDialog+0xc8>)
 800d36e:	f002 ffd1 	bl	8010314 <GUI_SetColor>
	  			if(i % 25 == 0){
 800d372:	4a25      	ldr	r2, [pc, #148]	; (800d408 <_cbDialog+0xcc>)
 800d374:	fb82 3204 	smull	r3, r2, r2, r4
 800d378:	17e3      	asrs	r3, r4, #31
 800d37a:	ebc3 03e2 	rsb	r3, r3, r2, asr #3
 800d37e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d382:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d386:	429c      	cmp	r4, r3
 800d388:	d0e5      	beq.n	800d356 <_cbDialog+0x1a>
	  			}
	  			if(i % 50 == 0){
 800d38a:	4a1f      	ldr	r2, [pc, #124]	; (800d408 <_cbDialog+0xcc>)
 800d38c:	fb82 3204 	smull	r3, r2, r2, r4
 800d390:	17e3      	asrs	r3, r4, #31
 800d392:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 800d396:	2232      	movs	r2, #50	; 0x32
 800d398:	fb02 4313 	mls	r3, r2, r3, r4
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d1e1      	bne.n	800d364 <_cbDialog+0x28>
	  				GUI_DrawHLine(400-i-20+1,2,+12);
 800d3a0:	220c      	movs	r2, #12
 800d3a2:	2102      	movs	r1, #2
 800d3a4:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 800d3a8:	3001      	adds	r0, #1
 800d3aa:	f003 ff3d 	bl	8011228 <GUI_DrawHLine>
	  				GUI_DrawHLine(400-i-20,2,+12);
 800d3ae:	220c      	movs	r2, #12
 800d3b0:	2102      	movs	r1, #2
 800d3b2:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 800d3b6:	f003 ff37 	bl	8011228 <GUI_DrawHLine>
	  				GUI_DrawHLine(400-i-20-1,2,+12);
 800d3ba:	220c      	movs	r2, #12
 800d3bc:	2102      	movs	r1, #2
 800d3be:	f5c4 70bd 	rsb	r0, r4, #378	; 0x17a
 800d3c2:	3001      	adds	r0, #1
 800d3c4:	f003 ff30 	bl	8011228 <GUI_DrawHLine>

	  				GUI_GotoXY(20,400-i-20-5);
 800d3c8:	f5c4 71bb 	rsb	r1, r4, #374	; 0x176
 800d3cc:	3101      	adds	r1, #1
 800d3ce:	2014      	movs	r0, #20
 800d3d0:	f002 ff36 	bl	8010240 <GUI_GotoXY>
	  				GUI_DispFloatMin(((i-400-20+100)/10)+2, 1);
 800d3d4:	f5a4 73a0 	sub.w	r3, r4, #320	; 0x140
 800d3d8:	4a0c      	ldr	r2, [pc, #48]	; (800d40c <_cbDialog+0xd0>)
 800d3da:	fb82 1203 	smull	r1, r2, r2, r3
 800d3de:	17db      	asrs	r3, r3, #31
 800d3e0:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800d3e4:	3302      	adds	r3, #2
 800d3e6:	ee00 3a10 	vmov	s0, r3
 800d3ea:	2001      	movs	r0, #1
 800d3ec:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800d3f0:	f004 fa98 	bl	8011924 <GUI_DispFloatMin>
 800d3f4:	e7b6      	b.n	800d364 <_cbDialog+0x28>
	  			}
	  		}

    break;
  default:
    WM_DefaultProc(pMsg);
 800d3f6:	f00b f921 	bl	801863c <WM_DefaultProc>

	}

}
 800d3fa:	bd10      	pop	{r4, pc}
 800d3fc:	4770      	bx	lr
 800d3fe:	bf00      	nop
 800d400:	ff404040 	.word	0xff404040
 800d404:	ffd3d3d3 	.word	0xffd3d3d3
 800d408:	51eb851f 	.word	0x51eb851f
 800d40c:	66666667 	.word	0x66666667

0800d410 <CreateIndicatorWindow2>:


WM_HWIN CreateIndicatorWindow2(void) {
 800d410:	b510      	push	{r4, lr}
 800d412:	b084      	sub	sp, #16



  IndicatorWindow2 = WM_CreateWindow(415, 60, 50, 390,WM_CF_HIDE , _cbDialog, 0);
 800d414:	2300      	movs	r3, #0
 800d416:	9302      	str	r3, [sp, #8]
 800d418:	4a09      	ldr	r2, [pc, #36]	; (800d440 <CreateIndicatorWindow2+0x30>)
 800d41a:	9201      	str	r2, [sp, #4]
 800d41c:	9300      	str	r3, [sp, #0]
 800d41e:	f44f 73c3 	mov.w	r3, #390	; 0x186
 800d422:	2232      	movs	r2, #50	; 0x32
 800d424:	213c      	movs	r1, #60	; 0x3c
 800d426:	f240 109f 	movw	r0, #415	; 0x19f
 800d42a:	f00a fb8f 	bl	8017b4c <WM_CreateWindow>
 800d42e:	4c05      	ldr	r4, [pc, #20]	; (800d444 <CreateIndicatorWindow2+0x34>)
 800d430:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 800d432:	2001      	movs	r0, #1
 800d434:	f00b fffc 	bl	8019430 <WM_MULTIBUF_Enable>

  return IndicatorWindow2;
}
 800d438:	6820      	ldr	r0, [r4, #0]
 800d43a:	b004      	add	sp, #16
 800d43c:	bd10      	pop	{r4, pc}
 800d43e:	bf00      	nop
 800d440:	0800d33d 	.word	0x0800d33d
 800d444:	2002e518 	.word	0x2002e518

0800d448 <_cbDialog>:
#include "stm32f4xx_hal.h"


static void _cbDialog(WM_MESSAGE * pMsg) {

  switch (pMsg->MsgId) {
 800d448:	6803      	ldr	r3, [r0, #0]
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	d05c      	beq.n	800d508 <_cbDialog+0xc0>
static void _cbDialog(WM_MESSAGE * pMsg) {
 800d44e:	b510      	push	{r4, lr}
  switch (pMsg->MsgId) {
 800d450:	2b0f      	cmp	r3, #15
 800d452:	d156      	bne.n	800d502 <_cbDialog+0xba>
  case WM_CREATE:

    break;
  case WM_PAINT:
	  GUI_SetBkColor(GUI_DARKGRAY);
 800d454:	482d      	ldr	r0, [pc, #180]	; (800d50c <_cbDialog+0xc4>)
 800d456:	f002 ff51 	bl	80102fc <GUI_SetBkColor>

	  GUI_Clear();
 800d45a:	f003 f85f 	bl	801051c <GUI_Clear>
	  		for(int i=0; i<400;i++){
 800d45e:	2400      	movs	r4, #0
 800d460:	e007      	b.n	800d472 <_cbDialog+0x2a>
	  			GUI_SetColor(GUI_LIGHTGRAY);
	  			if(i % 25 == 0){
	  				GUI_DrawHLine(400-i-20,2,+12);
 800d462:	220c      	movs	r2, #12
 800d464:	2102      	movs	r1, #2
 800d466:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 800d46a:	f003 fedd 	bl	8011228 <GUI_DrawHLine>
 800d46e:	e012      	b.n	800d496 <_cbDialog+0x4e>
	  		for(int i=0; i<400;i++){
 800d470:	3401      	adds	r4, #1
 800d472:	f5b4 7fc8 	cmp.w	r4, #400	; 0x190
 800d476:	da46      	bge.n	800d506 <_cbDialog+0xbe>
	  			GUI_SetColor(GUI_LIGHTGRAY);
 800d478:	4825      	ldr	r0, [pc, #148]	; (800d510 <_cbDialog+0xc8>)
 800d47a:	f002 ff4b 	bl	8010314 <GUI_SetColor>
	  			if(i % 25 == 0){
 800d47e:	4a25      	ldr	r2, [pc, #148]	; (800d514 <_cbDialog+0xcc>)
 800d480:	fb82 3204 	smull	r3, r2, r2, r4
 800d484:	17e3      	asrs	r3, r4, #31
 800d486:	ebc3 03e2 	rsb	r3, r3, r2, asr #3
 800d48a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d48e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d492:	429c      	cmp	r4, r3
 800d494:	d0e5      	beq.n	800d462 <_cbDialog+0x1a>
	  			}
	  			if(i % 50 == 0){
 800d496:	4a1f      	ldr	r2, [pc, #124]	; (800d514 <_cbDialog+0xcc>)
 800d498:	fb82 3204 	smull	r3, r2, r2, r4
 800d49c:	17e3      	asrs	r3, r4, #31
 800d49e:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 800d4a2:	2232      	movs	r2, #50	; 0x32
 800d4a4:	fb02 4313 	mls	r3, r2, r3, r4
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d1e1      	bne.n	800d470 <_cbDialog+0x28>
	  				GUI_DrawHLine(400-i-20+1,2,+12);
 800d4ac:	220c      	movs	r2, #12
 800d4ae:	2102      	movs	r1, #2
 800d4b0:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 800d4b4:	3001      	adds	r0, #1
 800d4b6:	f003 feb7 	bl	8011228 <GUI_DrawHLine>
	  				GUI_DrawHLine(400-i-20,2,+12);
 800d4ba:	220c      	movs	r2, #12
 800d4bc:	2102      	movs	r1, #2
 800d4be:	f5c4 70be 	rsb	r0, r4, #380	; 0x17c
 800d4c2:	f003 feb1 	bl	8011228 <GUI_DrawHLine>
	  				GUI_DrawHLine(400-i-20-1,2,+12);
 800d4c6:	220c      	movs	r2, #12
 800d4c8:	2102      	movs	r1, #2
 800d4ca:	f5c4 70bd 	rsb	r0, r4, #378	; 0x17a
 800d4ce:	3001      	adds	r0, #1
 800d4d0:	f003 feaa 	bl	8011228 <GUI_DrawHLine>

	  				GUI_GotoXY(20,400-i-20-5);
 800d4d4:	f5c4 71bb 	rsb	r1, r4, #374	; 0x176
 800d4d8:	3101      	adds	r1, #1
 800d4da:	2014      	movs	r0, #20
 800d4dc:	f002 feb0 	bl	8010240 <GUI_GotoXY>
	  				GUI_DispFloatMin(((i-400-20+100)/10)+2, 1);
 800d4e0:	f5a4 73a0 	sub.w	r3, r4, #320	; 0x140
 800d4e4:	4a0c      	ldr	r2, [pc, #48]	; (800d518 <_cbDialog+0xd0>)
 800d4e6:	fb82 1203 	smull	r1, r2, r2, r3
 800d4ea:	17db      	asrs	r3, r3, #31
 800d4ec:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 800d4f0:	3302      	adds	r3, #2
 800d4f2:	ee00 3a10 	vmov	s0, r3
 800d4f6:	2001      	movs	r0, #1
 800d4f8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800d4fc:	f004 fa12 	bl	8011924 <GUI_DispFloatMin>
 800d500:	e7b6      	b.n	800d470 <_cbDialog+0x28>
	  			}
	  		}

    break;
  default:
    WM_DefaultProc(pMsg);
 800d502:	f00b f89b 	bl	801863c <WM_DefaultProc>

	}

}
 800d506:	bd10      	pop	{r4, pc}
 800d508:	4770      	bx	lr
 800d50a:	bf00      	nop
 800d50c:	ff404040 	.word	0xff404040
 800d510:	ffd3d3d3 	.word	0xffd3d3d3
 800d514:	51eb851f 	.word	0x51eb851f
 800d518:	66666667 	.word	0x66666667

0800d51c <CreateIndicatorWindow3>:


WM_HWIN CreateIndicatorWindow3(void) {
 800d51c:	b510      	push	{r4, lr}
 800d51e:	b084      	sub	sp, #16



  IndicatorWindow3 = WM_CreateWindow(545, 60, 50, 390,WM_CF_HIDE , _cbDialog, 0);
 800d520:	2300      	movs	r3, #0
 800d522:	9302      	str	r3, [sp, #8]
 800d524:	4a09      	ldr	r2, [pc, #36]	; (800d54c <CreateIndicatorWindow3+0x30>)
 800d526:	9201      	str	r2, [sp, #4]
 800d528:	9300      	str	r3, [sp, #0]
 800d52a:	f44f 73c3 	mov.w	r3, #390	; 0x186
 800d52e:	2232      	movs	r2, #50	; 0x32
 800d530:	213c      	movs	r1, #60	; 0x3c
 800d532:	f240 2021 	movw	r0, #545	; 0x221
 800d536:	f00a fb09 	bl	8017b4c <WM_CreateWindow>
 800d53a:	4c05      	ldr	r4, [pc, #20]	; (800d550 <CreateIndicatorWindow3+0x34>)
 800d53c:	6020      	str	r0, [r4, #0]

  WM_MULTIBUF_Enable(1);
 800d53e:	2001      	movs	r0, #1
 800d540:	f00b ff76 	bl	8019430 <WM_MULTIBUF_Enable>

  return IndicatorWindow3;
}
 800d544:	6820      	ldr	r0, [r4, #0]
 800d546:	b004      	add	sp, #16
 800d548:	bd10      	pop	{r4, pc}
 800d54a:	bf00      	nop
 800d54c:	0800d449 	.word	0x0800d449
 800d550:	2002e6c8 	.word	0x2002e6c8

0800d554 <GUI_X_Config>:
* Purpose:
*   Called during the initialization process in order to set up the
*   available memory for the GUI.
*/
void GUI_X_Config(void)
{
 800d554:	b508      	push	{r3, lr}

  GUI_ALLOC_AssignMemory(extMem, GUI_NUMBYTES);
 800d556:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 800d55a:	4802      	ldr	r0, [pc, #8]	; (800d564 <GUI_X_Config+0x10>)
 800d55c:	f002 fb92 	bl	800fc84 <GUI_ALLOC_AssignMemory>

}
 800d560:	bd08      	pop	{r3, pc}
 800d562:	bf00      	nop
 800d564:	200088b0 	.word	0x200088b0

0800d568 <HAL_FMC_MspInit>:
  }
}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800d568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d56c:	b086      	sub	sp, #24
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800d56e:	2300      	movs	r3, #0
 800d570:	9301      	str	r3, [sp, #4]
 800d572:	9302      	str	r3, [sp, #8]
 800d574:	9303      	str	r3, [sp, #12]
 800d576:	9304      	str	r3, [sp, #16]
 800d578:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 800d57a:	4b33      	ldr	r3, [pc, #204]	; (800d648 <HAL_FMC_MspInit+0xe0>)
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	b113      	cbz	r3, 800d586 <HAL_FMC_MspInit+0x1e>
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800d580:	b006      	add	sp, #24
 800d582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  FMC_Initialized = 1;
 800d586:	f04f 0801 	mov.w	r8, #1
 800d58a:	4b2f      	ldr	r3, [pc, #188]	; (800d648 <HAL_FMC_MspInit+0xe0>)
 800d58c:	f8c3 8000 	str.w	r8, [r3]
  __HAL_RCC_FMC_CLK_ENABLE();
 800d590:	2600      	movs	r6, #0
 800d592:	9600      	str	r6, [sp, #0]
 800d594:	4b2d      	ldr	r3, [pc, #180]	; (800d64c <HAL_FMC_MspInit+0xe4>)
 800d596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d598:	ea42 0208 	orr.w	r2, r2, r8
 800d59c:	639a      	str	r2, [r3, #56]	; 0x38
 800d59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5a0:	ea03 0308 	and.w	r3, r3, r8
 800d5a4:	9300      	str	r3, [sp, #0]
 800d5a6:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D5_Pin|D6_Pin 
 800d5a8:	f64f 7383 	movw	r3, #65411	; 0xff83
 800d5ac:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5ae:	2702      	movs	r7, #2
 800d5b0:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5b2:	2503      	movs	r5, #3
 800d5b4:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d5b6:	240c      	movs	r4, #12
 800d5b8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d5ba:	a901      	add	r1, sp, #4
 800d5bc:	4824      	ldr	r0, [pc, #144]	; (800d650 <HAL_FMC_MspInit+0xe8>)
 800d5be:	f7f6 fa3f 	bl	8003a40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDNCAS_Pin|SDCLK_Pin|A11_Pin|A10_Pin 
 800d5c2:	f248 1333 	movw	r3, #33075	; 0x8133
 800d5c6:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5c8:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5ca:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5cc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d5ce:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800d5d0:	a901      	add	r1, sp, #4
 800d5d2:	4820      	ldr	r0, [pc, #128]	; (800d654 <HAL_FMC_MspInit+0xec>)
 800d5d4:	f7f6 fa34 	bl	8003a40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin|D1_Pin|D15_Pin 
 800d5d8:	f24c 7303 	movw	r3, #50947	; 0xc703
 800d5dc:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5de:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5e0:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5e2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d5e4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d5e6:	a901      	add	r1, sp, #4
 800d5e8:	481b      	ldr	r0, [pc, #108]	; (800d658 <HAL_FMC_MspInit+0xf0>)
 800d5ea:	f7f6 fa29 	bl	8003a40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin 
 800d5ee:	f240 63ff 	movw	r3, #1791	; 0x6ff
 800d5f2:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d5f4:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5f6:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d5f8:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d5fa:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800d5fc:	a901      	add	r1, sp, #4
 800d5fe:	4817      	ldr	r0, [pc, #92]	; (800d65c <HAL_FMC_MspInit+0xf4>)
 800d600:	f7f6 fa1e 	bl	8003a40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin 
 800d604:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800d608:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d60a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d60c:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d60e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d610:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800d612:	a901      	add	r1, sp, #4
 800d614:	4812      	ldr	r0, [pc, #72]	; (800d660 <HAL_FMC_MspInit+0xf8>)
 800d616:	f7f6 fa13 	bl	8003a40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|SDNE0_Pin 
 800d61a:	f64f 730c 	movw	r3, #65292	; 0xff0c
 800d61e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d620:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d622:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d624:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d626:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800d628:	a901      	add	r1, sp, #4
 800d62a:	480e      	ldr	r0, [pc, #56]	; (800d664 <HAL_FMC_MspInit+0xfc>)
 800d62c:	f7f6 fa08 	bl	8003a40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800d630:	f8cd 8004 	str.w	r8, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d634:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d636:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d638:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800d63a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800d63c:	a901      	add	r1, sp, #4
 800d63e:	480a      	ldr	r0, [pc, #40]	; (800d668 <HAL_FMC_MspInit+0x100>)
 800d640:	f7f6 f9fe 	bl	8003a40 <HAL_GPIO_Init>
 800d644:	e79c      	b.n	800d580 <HAL_FMC_MspInit+0x18>
 800d646:	bf00      	nop
 800d648:	2002e0b0 	.word	0x2002e0b0
 800d64c:	40023800 	.word	0x40023800
 800d650:	40021000 	.word	0x40021000
 800d654:	40021800 	.word	0x40021800
 800d658:	40020c00 	.word	0x40020c00
 800d65c:	40022000 	.word	0x40022000
 800d660:	40021400 	.word	0x40021400
 800d664:	40021c00 	.word	0x40021c00
 800d668:	40020800 	.word	0x40020800

0800d66c <MX_DMA2D_Init>:
{
 800d66c:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 800d66e:	480d      	ldr	r0, [pc, #52]	; (800d6a4 <MX_DMA2D_Init+0x38>)
 800d670:	4b0d      	ldr	r3, [pc, #52]	; (800d6a8 <MX_DMA2D_Init+0x3c>)
 800d672:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800d674:	2300      	movs	r3, #0
 800d676:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800d678:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 800d67a:	60c3      	str	r3, [r0, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800d67c:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800d67e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800d680:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800d682:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800d684:	f7f5 fc5c 	bl	8002f40 <HAL_DMA2D_Init>
 800d688:	b928      	cbnz	r0, 800d696 <MX_DMA2D_Init+0x2a>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800d68a:	2101      	movs	r1, #1
 800d68c:	4805      	ldr	r0, [pc, #20]	; (800d6a4 <MX_DMA2D_Init+0x38>)
 800d68e:	f7f5 fd25 	bl	80030dc <HAL_DMA2D_ConfigLayer>
 800d692:	b918      	cbnz	r0, 800d69c <MX_DMA2D_Init+0x30>
}
 800d694:	bd08      	pop	{r3, pc}
    Error_Handler( );
 800d696:	f7f4 faf5 	bl	8001c84 <Error_Handler>
 800d69a:	e7f6      	b.n	800d68a <MX_DMA2D_Init+0x1e>
    Error_Handler( );
 800d69c:	f7f4 faf2 	bl	8001c84 <Error_Handler>
}
 800d6a0:	e7f8      	b.n	800d694 <MX_DMA2D_Init+0x28>
 800d6a2:	bf00      	nop
 800d6a4:	200306ec 	.word	0x200306ec
 800d6a8:	4002b000 	.word	0x4002b000

0800d6ac <MX_LCD_Init>:
{
 800d6ac:	b510      	push	{r4, lr}
 800d6ae:	b08e      	sub	sp, #56	; 0x38
  HAL_LTDC_DeInit(&hltdc);
 800d6b0:	4c27      	ldr	r4, [pc, #156]	; (800d750 <MX_LCD_Init+0xa4>)
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	f7f7 fd20 	bl	80050f8 <HAL_LTDC_DeInit>
  hltdc.Instance = LTDC;
 800d6b8:	4b26      	ldr	r3, [pc, #152]	; (800d754 <MX_LCD_Init+0xa8>)
 800d6ba:	6023      	str	r3, [r4, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	6063      	str	r3, [r4, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800d6c0:	60a3      	str	r3, [r4, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800d6c2:	60e3      	str	r3, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800d6c4:	6123      	str	r3, [r4, #16]
  hltdc.Init.HorizontalSync = 0;
 800d6c6:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 0;
 800d6c8:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 1;
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	61e2      	str	r2, [r4, #28]
  hltdc.Init.AccumulatedVBP = 1;
 800d6ce:	6222      	str	r2, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 401;
 800d6d0:	f240 1291 	movw	r2, #401	; 0x191
 800d6d4:	6262      	str	r2, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 481;
 800d6d6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d6da:	62a2      	str	r2, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 402;
 800d6dc:	f44f 72c9 	mov.w	r2, #402	; 0x192
 800d6e0:	62e2      	str	r2, [r4, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 482;
 800d6e2:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800d6e6:	6322      	str	r2, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800d6e8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800d6ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800d6f0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f7f7 fc85 	bl	8005004 <HAL_LTDC_Init>
 800d6fa:	bb18      	cbnz	r0, 800d744 <MX_LCD_Init+0x98>
  pLayerCfg.WindowX0 = 0;
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	9201      	str	r2, [sp, #4]
  pLayerCfg.WindowX1 = 400;
 800d700:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800d704:	9102      	str	r1, [sp, #8]
  pLayerCfg.WindowY0 = 0;
 800d706:	9203      	str	r2, [sp, #12]
  pLayerCfg.WindowY1 = 480;
 800d708:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800d70c:	9304      	str	r3, [sp, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800d70e:	9205      	str	r2, [sp, #20]
  pLayerCfg.Alpha = 255;
 800d710:	20ff      	movs	r0, #255	; 0xff
 800d712:	9006      	str	r0, [sp, #24]
  pLayerCfg.Alpha0 = 0;
 800d714:	9207      	str	r2, [sp, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800d716:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 800d71a:	9008      	str	r0, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800d71c:	2007      	movs	r0, #7
 800d71e:	9009      	str	r0, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800d720:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
 800d724:	900a      	str	r0, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 400;
 800d726:	910b      	str	r1, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 800d728:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 800d72a:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800d72e:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800d732:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800d736:	a901      	add	r1, sp, #4
 800d738:	4805      	ldr	r0, [pc, #20]	; (800d750 <MX_LCD_Init+0xa4>)
 800d73a:	f7f7 fd59 	bl	80051f0 <HAL_LTDC_ConfigLayer>
 800d73e:	b920      	cbnz	r0, 800d74a <MX_LCD_Init+0x9e>
}
 800d740:	b00e      	add	sp, #56	; 0x38
 800d742:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800d744:	f7f4 fa9e 	bl	8001c84 <Error_Handler>
 800d748:	e7d8      	b.n	800d6fc <MX_LCD_Init+0x50>
    Error_Handler( );
 800d74a:	f7f4 fa9b 	bl	8001c84 <Error_Handler>
}
 800d74e:	e7f7      	b.n	800d740 <MX_LCD_Init+0x94>
 800d750:	20030644 	.word	0x20030644
 800d754:	40016800 	.word	0x40016800

0800d758 <MX_FMC_Init>:
{  
 800d758:	b500      	push	{lr}
 800d75a:	b089      	sub	sp, #36	; 0x24
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800d75c:	4815      	ldr	r0, [pc, #84]	; (800d7b4 <MX_FMC_Init+0x5c>)
 800d75e:	4b16      	ldr	r3, [pc, #88]	; (800d7b8 <MX_FMC_Init+0x60>)
 800d760:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800d762:	2300      	movs	r3, #0
 800d764:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800d766:	6083      	str	r3, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800d768:	2104      	movs	r1, #4
 800d76a:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800d76c:	2220      	movs	r2, #32
 800d76e:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800d770:	2240      	movs	r2, #64	; 0x40
 800d772:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800d774:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800d778:	6182      	str	r2, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800d77a:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800d77c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d780:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800d782:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d786:	6242      	str	r2, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800d788:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 800d78a:	2302      	movs	r3, #2
 800d78c:	9301      	str	r3, [sp, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800d78e:	2207      	movs	r2, #7
 800d790:	9202      	str	r2, [sp, #8]
  SdramTiming.SelfRefreshTime = 4;
 800d792:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 7;
 800d794:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800d796:	2203      	movs	r2, #3
 800d798:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 800d79a:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 800d79c:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800d79e:	4469      	add	r1, sp
 800d7a0:	f7f9 fa64 	bl	8006c6c <HAL_SDRAM_Init>
 800d7a4:	b910      	cbnz	r0, 800d7ac <MX_FMC_Init+0x54>
}
 800d7a6:	b009      	add	sp, #36	; 0x24
 800d7a8:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 800d7ac:	f7f4 fa6a 	bl	8001c84 <Error_Handler>
}
 800d7b0:	e7f9      	b.n	800d7a6 <MX_FMC_Init+0x4e>
 800d7b2:	bf00      	nop
 800d7b4:	2003072c 	.word	0x2003072c
 800d7b8:	a0000140 	.word	0xa0000140

0800d7bc <MX_SDRAM_InitEx>:
{
 800d7bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d7c0:	b083      	sub	sp, #12
  __IO uint32_t tmpmrd = 0;
 800d7c2:	f04f 0900 	mov.w	r9, #0
 800d7c6:	f8cd 9004 	str.w	r9, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800d7ca:	4c24      	ldr	r4, [pc, #144]	; (800d85c <MX_SDRAM_InitEx+0xa0>)
 800d7cc:	2601      	movs	r6, #1
 800d7ce:	60a6      	str	r6, [r4, #8]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 800d7d0:	f04f 0810 	mov.w	r8, #16
 800d7d4:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.AutoRefreshNumber      = 1;
 800d7d8:	6126      	str	r6, [r4, #16]
  Command.ModeRegisterDefinition = 0;
 800d7da:	f8c4 9014 	str.w	r9, [r4, #20]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800d7de:	f104 0708 	add.w	r7, r4, #8
 800d7e2:	4d1f      	ldr	r5, [pc, #124]	; (800d860 <MX_SDRAM_InitEx+0xa4>)
 800d7e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d7e8:	4639      	mov	r1, r7
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	f7f9 fa5d 	bl	8006caa <HAL_SDRAM_SendCommand>
  HAL_Delay(1);
 800d7f0:	4630      	mov	r0, r6
 800d7f2:	f7f5 f913 	bl	8002a1c <HAL_Delay>
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800d7f6:	2302      	movs	r3, #2
 800d7f8:	60a3      	str	r3, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800d7fa:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.AutoRefreshNumber      = 1;
 800d7fe:	6126      	str	r6, [r4, #16]
  Command.ModeRegisterDefinition = 0;
 800d800:	f8c4 9014 	str.w	r9, [r4, #20]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 800d804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d808:	4639      	mov	r1, r7
 800d80a:	4628      	mov	r0, r5
 800d80c:	f7f9 fa4d 	bl	8006caa <HAL_SDRAM_SendCommand>
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800d810:	2303      	movs	r3, #3
 800d812:	60a3      	str	r3, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800d814:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.AutoRefreshNumber      = 8;
 800d818:	2308      	movs	r3, #8
 800d81a:	6123      	str	r3, [r4, #16]
  Command.ModeRegisterDefinition = 0;
 800d81c:	f8c4 9014 	str.w	r9, [r4, #20]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800d820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d824:	4639      	mov	r1, r7
 800d826:	4628      	mov	r0, r5
 800d828:	f7f9 fa3f 	bl	8006caa <HAL_SDRAM_SendCommand>
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800d82c:	f44f 730c 	mov.w	r3, #560	; 0x230
 800d830:	9301      	str	r3, [sp, #4]
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800d832:	2304      	movs	r3, #4
 800d834:	60a3      	str	r3, [r4, #8]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800d836:	f8c4 800c 	str.w	r8, [r4, #12]
  Command.AutoRefreshNumber      = 1;
 800d83a:	6126      	str	r6, [r4, #16]
  Command.ModeRegisterDefinition = tmpmrd;
 800d83c:	9b01      	ldr	r3, [sp, #4]
 800d83e:	6163      	str	r3, [r4, #20]
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800d840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d844:	4639      	mov	r1, r7
 800d846:	4628      	mov	r0, r5
 800d848:	f7f9 fa2f 	bl	8006caa <HAL_SDRAM_SendCommand>
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 800d84c:	f240 617d 	movw	r1, #1661	; 0x67d
 800d850:	4628      	mov	r0, r5
 800d852:	f7f9 fa47 	bl	8006ce4 <HAL_SDRAM_ProgramRefreshRate>
}
 800d856:	b003      	add	sp, #12
 800d858:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d85c:	2002e0b0 	.word	0x2002e0b0
 800d860:	2003072c 	.word	0x2003072c

0800d864 <MX_DSI_Init>:
{
 800d864:	b530      	push	{r4, r5, lr}
 800d866:	b0ad      	sub	sp, #180	; 0xb4
  hdsi.Instance = DSI;
 800d868:	486c      	ldr	r0, [pc, #432]	; (800da1c <MX_DSI_Init+0x1b8>)
 800d86a:	4b6d      	ldr	r3, [pc, #436]	; (800da20 <MX_DSI_Init+0x1bc>)
 800d86c:	6003      	str	r3, [r0, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800d86e:	2300      	movs	r3, #0
 800d870:	6043      	str	r3, [r0, #4]
  hdsi.Init.TXEscapeCkdiv = 4;
 800d872:	2204      	movs	r2, #4
 800d874:	6082      	str	r2, [r0, #8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800d876:	2201      	movs	r2, #1
 800d878:	60c2      	str	r2, [r0, #12]
  PLLInit.PLLNDIV = 125;
 800d87a:	227d      	movs	r2, #125	; 0x7d
 800d87c:	9202      	str	r2, [sp, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV2;
 800d87e:	2202      	movs	r2, #2
 800d880:	9203      	str	r2, [sp, #12]
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800d882:	9304      	str	r3, [sp, #16]
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 800d884:	a902      	add	r1, sp, #8
 800d886:	f7f5 fd2f 	bl	80032e8 <HAL_DSI_Init>
 800d88a:	2800      	cmp	r0, #0
 800d88c:	f040 80aa 	bne.w	800d9e4 <MX_DSI_Init+0x180>
  HostTimeouts.TimeoutCkdiv = 1;
 800d890:	2301      	movs	r3, #1
 800d892:	931d      	str	r3, [sp, #116]	; 0x74
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 800d894:	2300      	movs	r3, #0
 800d896:	931e      	str	r3, [sp, #120]	; 0x78
  HostTimeouts.LowPowerReceptionTimeout = 0;
 800d898:	931f      	str	r3, [sp, #124]	; 0x7c
  HostTimeouts.HighSpeedReadTimeout = 0;
 800d89a:	9320      	str	r3, [sp, #128]	; 0x80
  HostTimeouts.LowPowerReadTimeout = 0;
 800d89c:	9321      	str	r3, [sp, #132]	; 0x84
  HostTimeouts.HighSpeedWriteTimeout = 0;
 800d89e:	9322      	str	r3, [sp, #136]	; 0x88
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 800d8a0:	9323      	str	r3, [sp, #140]	; 0x8c
  HostTimeouts.LowPowerWriteTimeout = 0;
 800d8a2:	9324      	str	r3, [sp, #144]	; 0x90
  HostTimeouts.BTATimeout = 0;
 800d8a4:	9325      	str	r3, [sp, #148]	; 0x94
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 800d8a6:	a91d      	add	r1, sp, #116	; 0x74
 800d8a8:	485c      	ldr	r0, [pc, #368]	; (800da1c <MX_DSI_Init+0x1b8>)
 800d8aa:	f7f5 ff8f 	bl	80037cc <HAL_DSI_ConfigHostTimeouts>
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	f040 809b 	bne.w	800d9ea <MX_DSI_Init+0x186>
  PhyTimings.ClockLaneHS2LPTime = 28;
 800d8b4:	231c      	movs	r3, #28
 800d8b6:	9326      	str	r3, [sp, #152]	; 0x98
  PhyTimings.ClockLaneLP2HSTime = 33;
 800d8b8:	2321      	movs	r3, #33	; 0x21
 800d8ba:	9327      	str	r3, [sp, #156]	; 0x9c
  PhyTimings.DataLaneHS2LPTime = 15;
 800d8bc:	230f      	movs	r3, #15
 800d8be:	9328      	str	r3, [sp, #160]	; 0xa0
  PhyTimings.DataLaneLP2HSTime = 25;
 800d8c0:	2319      	movs	r3, #25
 800d8c2:	9329      	str	r3, [sp, #164]	; 0xa4
  PhyTimings.DataLaneMaxReadTime = 0;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	932a      	str	r3, [sp, #168]	; 0xa8
  PhyTimings.StopWaitTime = 10;
 800d8c8:	230a      	movs	r3, #10
 800d8ca:	932b      	str	r3, [sp, #172]	; 0xac
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 800d8cc:	a926      	add	r1, sp, #152	; 0x98
 800d8ce:	4853      	ldr	r0, [pc, #332]	; (800da1c <MX_DSI_Init+0x1b8>)
 800d8d0:	f7f5 ff38 	bl	8003744 <HAL_DSI_ConfigPhyTimer>
 800d8d4:	2800      	cmp	r0, #0
 800d8d6:	f040 808b 	bne.w	800d9f0 <MX_DSI_Init+0x18c>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 800d8da:	2104      	movs	r1, #4
 800d8dc:	484f      	ldr	r0, [pc, #316]	; (800da1c <MX_DSI_Init+0x1b8>)
 800d8de:	f7f5 ff1d 	bl	800371c <HAL_DSI_ConfigFlowControl>
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	f040 8087 	bne.w	800d9f6 <MX_DSI_Init+0x192>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 800d8e8:	f242 7110 	movw	r1, #10000	; 0x2710
 800d8ec:	484b      	ldr	r0, [pc, #300]	; (800da1c <MX_DSI_Init+0x1b8>)
 800d8ee:	f7f6 f88d 	bl	8003a0c <HAL_DSI_SetLowPowerRXFilter>
 800d8f2:	2800      	cmp	r0, #0
 800d8f4:	f040 8082 	bne.w	800d9fc <MX_DSI_Init+0x198>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 800d8f8:	2100      	movs	r1, #0
 800d8fa:	4848      	ldr	r0, [pc, #288]	; (800da1c <MX_DSI_Init+0x1b8>)
 800d8fc:	f7f5 fc7a 	bl	80031f4 <HAL_DSI_ConfigErrorMonitor>
 800d900:	2800      	cmp	r0, #0
 800d902:	d17e      	bne.n	800da02 <MX_DSI_Init+0x19e>
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_ENABLE;
 800d904:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d908:	9305      	str	r3, [sp, #20]
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 800d90a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d90e:	9306      	str	r3, [sp, #24]
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_ENABLE;
 800d910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d914:	9307      	str	r3, [sp, #28]
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 800d916:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d91a:	9308      	str	r3, [sp, #32]
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_ENABLE;
 800d91c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d920:	9309      	str	r3, [sp, #36]	; 0x24
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 800d922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d926:	930a      	str	r3, [sp, #40]	; 0x28
  LPCmd.LPGenLongWrite = DSI_LP_GLW_ENABLE;
 800d928:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d92c:	930b      	str	r3, [sp, #44]	; 0x2c
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 800d92e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d932:	930c      	str	r3, [sp, #48]	; 0x30
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_ENABLE;
 800d934:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d938:	930d      	str	r3, [sp, #52]	; 0x34
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 800d93a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d93e:	930e      	str	r3, [sp, #56]	; 0x38
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_ENABLE;
 800d940:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d944:	930f      	str	r3, [sp, #60]	; 0x3c
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 800d946:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d94a:	9310      	str	r3, [sp, #64]	; 0x40
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 800d94c:	2300      	movs	r3, #0
 800d94e:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 800d950:	a905      	add	r1, sp, #20
 800d952:	4832      	ldr	r0, [pc, #200]	; (800da1c <MX_DSI_Init+0x1b8>)
 800d954:	f7f5 fea8 	bl	80036a8 <HAL_DSI_ConfigCommand>
 800d958:	2800      	cmp	r0, #0
 800d95a:	d155      	bne.n	800da08 <MX_DSI_Init+0x1a4>
  CmdCfg.VirtualChannelID = 0;
 800d95c:	2300      	movs	r3, #0
 800d95e:	9312      	str	r3, [sp, #72]	; 0x48
  CmdCfg.ColorCoding = DSI_RGB888;
 800d960:	2205      	movs	r2, #5
 800d962:	9213      	str	r2, [sp, #76]	; 0x4c
  CmdCfg.CommandSize = 400;
 800d964:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800d968:	9214      	str	r2, [sp, #80]	; 0x50
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 800d96a:	2210      	movs	r2, #16
 800d96c:	9215      	str	r2, [sp, #84]	; 0x54
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800d96e:	9316      	str	r3, [sp, #88]	; 0x58
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800d970:	2204      	movs	r2, #4
 800d972:	9217      	str	r2, [sp, #92]	; 0x5c
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 800d974:	2202      	movs	r2, #2
 800d976:	9218      	str	r2, [sp, #96]	; 0x60
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800d978:	9319      	str	r3, [sp, #100]	; 0x64
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 800d97a:	931a      	str	r3, [sp, #104]	; 0x68
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 800d97c:	2340      	movs	r3, #64	; 0x40
 800d97e:	931b      	str	r3, [sp, #108]	; 0x6c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 800d980:	2301      	movs	r3, #1
 800d982:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800d984:	a912      	add	r1, sp, #72	; 0x48
 800d986:	4825      	ldr	r0, [pc, #148]	; (800da1c <MX_DSI_Init+0x1b8>)
 800d988:	f7f5 fe06 	bl	8003598 <HAL_DSI_ConfigAdaptedCommandMode>
 800d98c:	2800      	cmp	r0, #0
 800d98e:	d13e      	bne.n	800da0e <MX_DSI_Init+0x1aa>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 800d990:	2100      	movs	r1, #0
 800d992:	4822      	ldr	r0, [pc, #136]	; (800da1c <MX_DSI_Init+0x1b8>)
 800d994:	f7f5 fdec 	bl	8003570 <HAL_DSI_SetGenericVCID>
 800d998:	2800      	cmp	r0, #0
 800d99a:	d13b      	bne.n	800da14 <MX_DSI_Init+0x1b0>
  HAL_DSI_Start(&(hdsi));
 800d99c:	4d1f      	ldr	r5, [pc, #124]	; (800da1c <MX_DSI_Init+0x1b8>)
 800d99e:	4628      	mov	r0, r5
 800d9a0:	f7f5 ff91 	bl	80038c6 <HAL_DSI_Start>
  HAL_DSI_ShortWrite(&(hdsi),
 800d9a4:	2400      	movs	r4, #0
 800d9a6:	9400      	str	r4, [sp, #0]
 800d9a8:	2328      	movs	r3, #40	; 0x28
 800d9aa:	2215      	movs	r2, #21
 800d9ac:	4621      	mov	r1, r4
 800d9ae:	4628      	mov	r0, r5
 800d9b0:	f7f5 ffc2 	bl	8003938 <HAL_DSI_ShortWrite>
  OTM8009A_Init(OTM8009A_FORMAT, OTM8009A_ORIENTATION_LANDSCAPE);
 800d9b4:	2101      	movs	r1, #1
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	f7f4 fdf2 	bl	80025a0 <OTM8009A_Init>
  LPCmd.LPGenShortWriteNoP    = DSI_LP_GSW0P_DISABLE;
 800d9bc:	9405      	str	r4, [sp, #20]
  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_DISABLE;
 800d9be:	9406      	str	r4, [sp, #24]
  LPCmd.LPGenShortWriteTwoP   = DSI_LP_GSW2P_DISABLE;
 800d9c0:	9407      	str	r4, [sp, #28]
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_DISABLE;
 800d9c2:	9408      	str	r4, [sp, #32]
  LPCmd.LPGenShortReadOneP    = DSI_LP_GSR1P_DISABLE;
 800d9c4:	9409      	str	r4, [sp, #36]	; 0x24
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_DISABLE;
 800d9c6:	940a      	str	r4, [sp, #40]	; 0x28
  LPCmd.LPGenLongWrite        = DSI_LP_GLW_DISABLE;
 800d9c8:	940b      	str	r4, [sp, #44]	; 0x2c
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_DISABLE;
 800d9ca:	940c      	str	r4, [sp, #48]	; 0x30
  LPCmd.LPDcsShortWriteOneP   = DSI_LP_DSW1P_DISABLE;
 800d9cc:	940d      	str	r4, [sp, #52]	; 0x34
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_DISABLE;
 800d9ce:	940e      	str	r4, [sp, #56]	; 0x38
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_DISABLE;
 800d9d0:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 800d9d2:	a905      	add	r1, sp, #20
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	f7f5 fe67 	bl	80036a8 <HAL_DSI_ConfigCommand>
  HAL_DSI_Refresh(&hdsi);
 800d9da:	4628      	mov	r0, r5
 800d9dc:	f7f5 ff9a 	bl	8003914 <HAL_DSI_Refresh>
  }
 800d9e0:	b02d      	add	sp, #180	; 0xb4
 800d9e2:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800d9e4:	f7f4 f94e 	bl	8001c84 <Error_Handler>
 800d9e8:	e752      	b.n	800d890 <MX_DSI_Init+0x2c>
    Error_Handler();
 800d9ea:	f7f4 f94b 	bl	8001c84 <Error_Handler>
 800d9ee:	e761      	b.n	800d8b4 <MX_DSI_Init+0x50>
    Error_Handler();
 800d9f0:	f7f4 f948 	bl	8001c84 <Error_Handler>
 800d9f4:	e771      	b.n	800d8da <MX_DSI_Init+0x76>
    Error_Handler();
 800d9f6:	f7f4 f945 	bl	8001c84 <Error_Handler>
 800d9fa:	e775      	b.n	800d8e8 <MX_DSI_Init+0x84>
    Error_Handler();
 800d9fc:	f7f4 f942 	bl	8001c84 <Error_Handler>
 800da00:	e77a      	b.n	800d8f8 <MX_DSI_Init+0x94>
    Error_Handler();
 800da02:	f7f4 f93f 	bl	8001c84 <Error_Handler>
 800da06:	e77d      	b.n	800d904 <MX_DSI_Init+0xa0>
    Error_Handler();
 800da08:	f7f4 f93c 	bl	8001c84 <Error_Handler>
 800da0c:	e7a6      	b.n	800d95c <MX_DSI_Init+0xf8>
    Error_Handler();
 800da0e:	f7f4 f939 	bl	8001c84 <Error_Handler>
 800da12:	e7bd      	b.n	800d990 <MX_DSI_Init+0x12c>
    Error_Handler();
 800da14:	f7f4 f936 	bl	8001c84 <Error_Handler>
 800da18:	e7c0      	b.n	800d99c <MX_DSI_Init+0x138>
 800da1a:	bf00      	nop
 800da1c:	20030628 	.word	0x20030628
 800da20:	40016c00 	.word	0x40016c00

0800da24 <HAL_LTDC_MspInit>:
  if(ltdcHandle->Instance==LTDC)
 800da24:	6802      	ldr	r2, [r0, #0]
 800da26:	4b0e      	ldr	r3, [pc, #56]	; (800da60 <HAL_LTDC_MspInit+0x3c>)
 800da28:	429a      	cmp	r2, r3
 800da2a:	d000      	beq.n	800da2e <HAL_LTDC_MspInit+0xa>
 800da2c:	4770      	bx	lr
{
 800da2e:	b500      	push	{lr}
 800da30:	b083      	sub	sp, #12
    __HAL_RCC_LTDC_CLK_ENABLE();
 800da32:	2200      	movs	r2, #0
 800da34:	9201      	str	r2, [sp, #4]
 800da36:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 800da3a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800da3c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 800da40:	6459      	str	r1, [r3, #68]	; 0x44
 800da42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800da48:	9301      	str	r3, [sp, #4]
 800da4a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800da4c:	2105      	movs	r1, #5
 800da4e:	2058      	movs	r0, #88	; 0x58
 800da50:	f7f5 f80a 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800da54:	2058      	movs	r0, #88	; 0x58
 800da56:	f7f5 f83b 	bl	8002ad0 <HAL_NVIC_EnableIRQ>
}
 800da5a:	b003      	add	sp, #12
 800da5c:	f85d fb04 	ldr.w	pc, [sp], #4
 800da60:	40016800 	.word	0x40016800

0800da64 <HAL_LTDC_MspDeInit>:
{
 800da64:	b508      	push	{r3, lr}
  if(ltdcHandle->Instance==LTDC)
 800da66:	6802      	ldr	r2, [r0, #0]
 800da68:	4b06      	ldr	r3, [pc, #24]	; (800da84 <HAL_LTDC_MspDeInit+0x20>)
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d000      	beq.n	800da70 <HAL_LTDC_MspDeInit+0xc>
}
 800da6e:	bd08      	pop	{r3, pc}
    __HAL_RCC_LTDC_CLK_DISABLE();
 800da70:	4a05      	ldr	r2, [pc, #20]	; (800da88 <HAL_LTDC_MspDeInit+0x24>)
 800da72:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800da74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800da78:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 800da7a:	2058      	movs	r0, #88	; 0x58
 800da7c:	f7f5 f836 	bl	8002aec <HAL_NVIC_DisableIRQ>
}
 800da80:	e7f5      	b.n	800da6e <HAL_LTDC_MspDeInit+0xa>
 800da82:	bf00      	nop
 800da84:	40016800 	.word	0x40016800
 800da88:	40023800 	.word	0x40023800

0800da8c <HAL_DSI_MspInit>:
{
 800da8c:	b510      	push	{r4, lr}
 800da8e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da90:	2300      	movs	r3, #0
 800da92:	9303      	str	r3, [sp, #12]
 800da94:	9304      	str	r3, [sp, #16]
 800da96:	9305      	str	r3, [sp, #20]
 800da98:	9306      	str	r3, [sp, #24]
 800da9a:	9307      	str	r3, [sp, #28]
  if(dsiHandle->Instance==DSI)
 800da9c:	6802      	ldr	r2, [r0, #0]
 800da9e:	4b18      	ldr	r3, [pc, #96]	; (800db00 <HAL_DSI_MspInit+0x74>)
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d001      	beq.n	800daa8 <HAL_DSI_MspInit+0x1c>
}
 800daa4:	b008      	add	sp, #32
 800daa6:	bd10      	pop	{r4, pc}
    __HAL_RCC_DSI_CLK_ENABLE();
 800daa8:	2400      	movs	r4, #0
 800daaa:	9401      	str	r4, [sp, #4]
 800daac:	f503 434c 	add.w	r3, r3, #52224	; 0xcc00
 800dab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dab2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800dab6:	645a      	str	r2, [r3, #68]	; 0x44
 800dab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800daba:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800dabe:	9201      	str	r2, [sp, #4]
 800dac0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800dac2:	9402      	str	r4, [sp, #8]
 800dac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800daca:	631a      	str	r2, [r3, #48]	; 0x30
 800dacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dad2:	9302      	str	r3, [sp, #8]
 800dad4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DSI_TE_Pin;
 800dad6:	2304      	movs	r3, #4
 800dad8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dada:	2302      	movs	r3, #2
 800dadc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dade:	2303      	movs	r3, #3
 800dae0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800dae2:	230d      	movs	r3, #13
 800dae4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(DSI_TE_GPIO_Port, &GPIO_InitStruct);
 800dae6:	a903      	add	r1, sp, #12
 800dae8:	4806      	ldr	r0, [pc, #24]	; (800db04 <HAL_DSI_MspInit+0x78>)
 800daea:	f7f5 ffa9 	bl	8003a40 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(DSI_IRQn, 5, 0);
 800daee:	4622      	mov	r2, r4
 800daf0:	2105      	movs	r1, #5
 800daf2:	205c      	movs	r0, #92	; 0x5c
 800daf4:	f7f4 ffb8 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800daf8:	205c      	movs	r0, #92	; 0x5c
 800dafa:	f7f4 ffe9 	bl	8002ad0 <HAL_NVIC_EnableIRQ>
}
 800dafe:	e7d1      	b.n	800daa4 <HAL_DSI_MspInit+0x18>
 800db00:	40016c00 	.word	0x40016c00
 800db04:	40022400 	.word	0x40022400

0800db08 <HAL_DMA2D_MspInit>:
  if(dma2dHandle->Instance==DMA2D)
 800db08:	6802      	ldr	r2, [r0, #0]
 800db0a:	4b0e      	ldr	r3, [pc, #56]	; (800db44 <HAL_DMA2D_MspInit+0x3c>)
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d000      	beq.n	800db12 <HAL_DMA2D_MspInit+0xa>
 800db10:	4770      	bx	lr
{
 800db12:	b500      	push	{lr}
 800db14:	b083      	sub	sp, #12
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800db16:	2200      	movs	r2, #0
 800db18:	9201      	str	r2, [sp, #4]
 800db1a:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 800db1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800db20:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800db24:	6319      	str	r1, [r3, #48]	; 0x30
 800db26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db2c:	9301      	str	r3, [sp, #4]
 800db2e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800db30:	2105      	movs	r1, #5
 800db32:	205a      	movs	r0, #90	; 0x5a
 800db34:	f7f4 ff98 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800db38:	205a      	movs	r0, #90	; 0x5a
 800db3a:	f7f4 ffc9 	bl	8002ad0 <HAL_NVIC_EnableIRQ>
}
 800db3e:	b003      	add	sp, #12
 800db40:	f85d fb04 	ldr.w	pc, [sp], #4
 800db44:	4002b000 	.word	0x4002b000

0800db48 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800db48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800db4a:	f7ff fd0d 	bl	800d568 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800db4e:	bd08      	pop	{r3, pc}

0800db50 <_DMA_ExecOperation>:
*       _DMA_ExecOperation
*/
static void _DMA_ExecOperation(void) {

  /* Wait until transfer is done */
  if ( TransferInProgress == 0 )
 800db50:	4b03      	ldr	r3, [pc, #12]	; (800db60 <_DMA_ExecOperation+0x10>)
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	b11b      	cbz	r3, 800db5e <_DMA_ExecOperation+0xe>
    return;
  
  while(TransferInProgress) {
 800db56:	4b02      	ldr	r3, [pc, #8]	; (800db60 <_DMA_ExecOperation+0x10>)
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d1fb      	bne.n	800db56 <_DMA_ExecOperation+0x6>
  }
}
 800db5e:	4770      	bx	lr
 800db60:	2002e0c8 	.word	0x2002e0c8

0800db64 <GetPixelformat>:
    return LTDC_PIXEL_FORMAT_AL44;
  } else if (apColorConvAPI[LayerIndex] == GUICC_88666I) {
    return LTDC_PIXEL_FORMAT_AL88;
  }
  while (1); // Error
} 
 800db64:	2000      	movs	r0, #0
 800db66:	4770      	bx	lr

0800db68 <TransferComplete>:
  *         you can add your own implementation.
  * @retval None
  */
static void TransferComplete(DMA2D_HandleTypeDef *hdma2d)
{
  TransferInProgress = 0; 
 800db68:	4b01      	ldr	r3, [pc, #4]	; (800db70 <TransferComplete+0x8>)
 800db6a:	2200      	movs	r2, #0
 800db6c:	701a      	strb	r2, [r3, #0]
}
 800db6e:	4770      	bx	lr
 800db70:	2002e0c8 	.word	0x2002e0c8

0800db74 <DMA2D_CopyBuffer>:
  * @brief  Return Pixel format for a given layer
  * @param  LayerIndex : Layer Index 
  * @retval Status ( 0 : 0k , 1: error)
  */
static void DMA2D_CopyBuffer(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 800db74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db76:	4607      	mov	r7, r0
 800db78:	460e      	mov	r6, r1
 800db7a:	4615      	mov	r5, r2
 800db7c:	461c      	mov	r4, r3
  U32 PixelFormat;

  _DMA_ExecOperation();
 800db7e:	f7ff ffe7 	bl	800db50 <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 800db82:	4b0e      	ldr	r3, [pc, #56]	; (800dbbc <DMA2D_CopyBuffer+0x48>)
 800db84:	2201      	movs	r2, #1
 800db86:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 800db88:	4638      	mov	r0, r7
 800db8a:	f7ff ffeb 	bl	800db64 <GetPixelformat>
  DMA2D->CR      = 0x00000000UL | (1 << 9);  
 800db8e:	4a0c      	ldr	r2, [pc, #48]	; (800dbc0 <DMA2D_CopyBuffer+0x4c>)
 800db90:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db94:	6013      	str	r3, [r2, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 800db96:	60d6      	str	r6, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 800db98:	63d5      	str	r5, [r2, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      
 800db9a:	9b07      	ldr	r3, [sp, #28]
 800db9c:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 800db9e:	9b08      	ldr	r3, [sp, #32]
 800dba0:	6413      	str	r3, [r2, #64]	; 0x40

  /* Set up pixel format */  
  DMA2D->FGPFCCR = PixelFormat;  
 800dba2:	61d0      	str	r0, [r2, #28]

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 800dba4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800dba8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dbac:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 800dbae:	6813      	ldr	r3, [r2, #0]
 800dbb0:	f043 0301 	orr.w	r3, r3, #1
 800dbb4:	6013      	str	r3, [r2, #0]

_DMA_ExecOperation();
 800dbb6:	f7ff ffcb 	bl	800db50 <_DMA_ExecOperation>

}
 800dbba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dbbc:	2002e0c8 	.word	0x2002e0c8
 800dbc0:	4002b000 	.word	0x4002b000

0800dbc4 <DMA2D_CopyBufferWithAlpha>:
/*********************************************************************
*
*       CopyBuffer
*/
static void DMA2D_CopyBufferWithAlpha(U32 LayerIndex, void * pSrc, void * pDst, U32 xSize, U32 ySize, U32 OffLineSrc, U32 OffLineDst)
{
 800dbc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbc8:	4680      	mov	r8, r0
 800dbca:	460f      	mov	r7, r1
 800dbcc:	4615      	mov	r5, r2
 800dbce:	461e      	mov	r6, r3
 800dbd0:	9c08      	ldr	r4, [sp, #32]
  uint32_t PixelFormat;

  _DMA_ExecOperation();
 800dbd2:	f7ff ffbd 	bl	800db50 <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 800dbd6:	4b10      	ldr	r3, [pc, #64]	; (800dc18 <DMA2D_CopyBufferWithAlpha+0x54>)
 800dbd8:	2201      	movs	r2, #1
 800dbda:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 800dbdc:	4640      	mov	r0, r8
 800dbde:	f7ff ffc1 	bl	800db64 <GetPixelformat>
  DMA2D->CR      = 0x00000000UL | (1 << 9) | (0x2 << 16);   
 800dbe2:	4a0e      	ldr	r2, [pc, #56]	; (800dc1c <DMA2D_CopyBufferWithAlpha+0x58>)
 800dbe4:	4b0e      	ldr	r3, [pc, #56]	; (800dc20 <DMA2D_CopyBufferWithAlpha+0x5c>)
 800dbe6:	6013      	str	r3, [r2, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       
 800dbe8:	60d7      	str	r7, [r2, #12]
  DMA2D->OMAR    = (U32)pDst;                       
 800dbea:	63d5      	str	r5, [r2, #60]	; 0x3c
  DMA2D->BGMAR   = (U32)pDst; 
 800dbec:	6155      	str	r5, [r2, #20]
  DMA2D->FGOR    = OffLineSrc;                      
 800dbee:	9b07      	ldr	r3, [sp, #28]
 800dbf0:	6113      	str	r3, [r2, #16]
  DMA2D->OOR     = OffLineDst; 
 800dbf2:	6414      	str	r4, [r2, #64]	; 0x40
  DMA2D->BGOR     = OffLineDst; 
 800dbf4:	6194      	str	r4, [r2, #24]

  /* Set up pixel format */  
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;  
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	61d3      	str	r3, [r2, #28]
  DMA2D->BGPFCCR = PixelFormat;
 800dbfa:	6250      	str	r0, [r2, #36]	; 0x24
  DMA2D->OPFCCR = PixelFormat;
 800dbfc:	6350      	str	r0, [r2, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; 
 800dbfe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800dc02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800dc06:	6453      	str	r3, [r2, #68]	; 0x44

  DMA2D->CR     |= DMA2D_CR_START;   
 800dc08:	6813      	ldr	r3, [r2, #0]
 800dc0a:	f043 0301 	orr.w	r3, r3, #1
 800dc0e:	6013      	str	r3, [r2, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();
 800dc10:	f7ff ff9e 	bl	800db50 <_DMA_ExecOperation>
}
 800dc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc18:	2002e0c8 	.word	0x2002e0c8
 800dc1c:	4002b000 	.word	0x4002b000
 800dc20:	00020200 	.word	0x00020200

0800dc24 <DMA2D_FillBuffer>:
  * @param  OffLine:     offset after each line
  * @param  ColorIndex:  color to be used.           
  * @retval None.
  */
static void DMA2D_FillBuffer(U32 LayerIndex, void * pDst, U32 xSize, U32 ySize, U32 OffLine, U32 ColorIndex) 
{
 800dc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc26:	4607      	mov	r7, r0
 800dc28:	460e      	mov	r6, r1
 800dc2a:	4615      	mov	r5, r2
 800dc2c:	461c      	mov	r4, r3
  U32 PixelFormat;

  _DMA_ExecOperation();
 800dc2e:	f7ff ff8f 	bl	800db50 <_DMA_ExecOperation>
   
  TransferInProgress = 1;	
 800dc32:	4b0e      	ldr	r3, [pc, #56]	; (800dc6c <DMA2D_FillBuffer+0x48>)
 800dc34:	2201      	movs	r2, #1
 800dc36:	701a      	strb	r2, [r3, #0]
	
  PixelFormat = GetPixelformat(LayerIndex);
 800dc38:	4638      	mov	r0, r7
 800dc3a:	f7ff ff93 	bl	800db64 <GetPixelformat>

  /* Set up mode */
  DMA2D->CR      = 0x00030000UL | (1 << 9);        
 800dc3e:	490c      	ldr	r1, [pc, #48]	; (800dc70 <DMA2D_FillBuffer+0x4c>)
 800dc40:	4b0c      	ldr	r3, [pc, #48]	; (800dc74 <DMA2D_FillBuffer+0x50>)
 800dc42:	600b      	str	r3, [r1, #0]
  DMA2D->OCOLR   = ColorIndex;                     
 800dc44:	9b07      	ldr	r3, [sp, #28]
 800dc46:	638b      	str	r3, [r1, #56]	; 0x38

  /* Set up pointers */
  DMA2D->OMAR    = (U32)pDst;                      
 800dc48:	63ce      	str	r6, [r1, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->OOR     = OffLine;                        
 800dc4a:	9b06      	ldr	r3, [sp, #24]
 800dc4c:	640b      	str	r3, [r1, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->OPFCCR  = PixelFormat;                    
 800dc4e:	6348      	str	r0, [r1, #52]	; 0x34

  /*  Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize;
 800dc50:	b2a4      	uxth	r4, r4
 800dc52:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800dc56:	644c      	str	r4, [r1, #68]	; 0x44

  DMA2D->CR     |= (DMA2D_CR_START | DMA2D_IT_TC); 
 800dc58:	680b      	ldr	r3, [r1, #0]
 800dc5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dc5e:	f043 0301 	orr.w	r3, r3, #1
 800dc62:	600b      	str	r3, [r1, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();
 800dc64:	f7ff ff74 	bl	800db50 <_DMA_ExecOperation>
}
 800dc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	2002e0c8 	.word	0x2002e0c8
 800dc70:	4002b000 	.word	0x4002b000
 800dc74:	00030200 	.word	0x00030200

0800dc78 <_DMA_ConvertColor>:

/*********************************************************************
*
*       _DMA_ConvertColor
*/
static void _DMA_ConvertColor(void * pSrc, void * pDst,  U32 PixelFormatSrc, U32 PixelFormatDst, U32 NumItems) {
 800dc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc7a:	4607      	mov	r7, r0
 800dc7c:	460e      	mov	r6, r1
 800dc7e:	4615      	mov	r5, r2
 800dc80:	461c      	mov	r4, r3

  /* Set up mode */
  _DMA_ExecOperation();
 800dc82:	f7ff ff65 	bl	800db50 <_DMA_ExecOperation>
  
  TransferInProgress = 1;
 800dc86:	4b0e      	ldr	r3, [pc, #56]	; (800dcc0 <_DMA_ConvertColor+0x48>)
 800dc88:	2201      	movs	r2, #1
 800dc8a:	701a      	strb	r2, [r3, #0]

  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 800dc8c:	4b0d      	ldr	r3, [pc, #52]	; (800dcc4 <_DMA_ConvertColor+0x4c>)
 800dc8e:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 800dc92:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)  */
 800dc94:	60df      	str	r7, [r3, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 800dc96:	63de      	str	r6, [r3, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = 0;                               /* Foreground Offset Register (Source line offset)  */
 800dc98:	2200      	movs	r2, #0
 800dc9a:	611a      	str	r2, [r3, #16]
  DMA2D->OOR     = 0;                               /* Output Offset Register (Destination line offset) */
 800dc9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = PixelFormatSrc;                  /* Foreground PFC Control Register (Defines the input pixel format) */
 800dc9e:	61dd      	str	r5, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                  /* Output PFC Control Register (Defines the output pixel format)    */
 800dca0:	635c      	str	r4, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (U32)(NumItems << 16) | 1;       /* Number of Line Register (Size configuration of area to be transfered) */
 800dca2:	9a06      	ldr	r2, [sp, #24]
 800dca4:	0412      	lsls	r2, r2, #16
 800dca6:	f042 0201 	orr.w	r2, r2, #1
 800dcaa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dcb2:	f042 0201 	orr.w	r2, r2, #1
 800dcb6:	601a      	str	r2, [r3, #0]
  
  _DMA_ExecOperation();
 800dcb8:	f7ff ff4a 	bl	800db50 <_DMA_ExecOperation>
}
 800dcbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	2002e0c8 	.word	0x2002e0c8
 800dcc4:	4002b000 	.word	0x4002b000

0800dcc8 <_DMA_Index2ColorBulk>:
*   This routine is used by the emWin color conversion routines to use DMA2D for
*   color conversion. It converts the given index values to 32 bit colors.
*   Because emWin uses ABGR internally and 0x00 and 0xFF for opaque and fully
*   transparent the color array needs to be converted after DMA2D has been used.
*/
static void _DMA_Index2ColorBulk(void * pIndex, LCD_COLOR * pColor, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 800dcc8:	b500      	push	{lr}
 800dcca:	b083      	sub	sp, #12
#if (GUI_USE_ARGB)

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);
 800dccc:	9200      	str	r2, [sp, #0]
 800dcce:	2300      	movs	r3, #0
 800dcd0:	9a04      	ldr	r2, [sp, #16]
 800dcd2:	f7ff ffd1 	bl	800dc78 <_DMA_ConvertColor>
  _DMA_ConvertColor(pIndex, pColor, PixelFormat, LTDC_PIXEL_FORMAT_ARGB8888, NumItems);

  /* Convert colors from ARGB to ABGR and invert alpha values */
  _InvertAlpha_SwapRB_MOD(pColor, NumItems);
#endif
}
 800dcd6:	b003      	add	sp, #12
 800dcd8:	f85d fb04 	ldr.w	pc, [sp], #4

0800dcdc <_Index2ColorBulk_M8888I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 800dcdc:	b510      	push	{r4, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	2400      	movs	r4, #0
 800dce2:	9400      	str	r4, [sp, #0]
 800dce4:	f7ff fff0 	bl	800dcc8 <_DMA_Index2ColorBulk>
 800dce8:	b002      	add	sp, #8
 800dcea:	bd10      	pop	{r4, pc}

0800dcec <_Index2ColorBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 800dcec:	b510      	push	{r4, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	2400      	movs	r4, #0
 800dcf2:	9400      	str	r4, [sp, #0]
 800dcf4:	f7ff ffe8 	bl	800dcc8 <_DMA_Index2ColorBulk>
 800dcf8:	b002      	add	sp, #8
 800dcfa:	bd10      	pop	{r4, pc}

0800dcfc <_Index2ColorBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 800dcfc:	b510      	push	{r4, lr}
 800dcfe:	b082      	sub	sp, #8
 800dd00:	2404      	movs	r4, #4
 800dd02:	9400      	str	r4, [sp, #0]
 800dd04:	f7ff ffe0 	bl	800dcc8 <_DMA_Index2ColorBulk>
 800dd08:	b002      	add	sp, #8
 800dd0a:	bd10      	pop	{r4, pc}

0800dd0c <_Index2ColorBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 800dd0c:	b510      	push	{r4, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	2402      	movs	r4, #2
 800dd12:	9400      	str	r4, [sp, #0]
 800dd14:	f7ff ffd8 	bl	800dcc8 <_DMA_Index2ColorBulk>
 800dd18:	b002      	add	sp, #8
 800dd1a:	bd10      	pop	{r4, pc}

0800dd1c <_Index2ColorBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 800dd1c:	b510      	push	{r4, lr}
 800dd1e:	b082      	sub	sp, #8
 800dd20:	2403      	movs	r4, #3
 800dd22:	9400      	str	r4, [sp, #0]
 800dd24:	f7ff ffd0 	bl	800dcc8 <_DMA_Index2ColorBulk>
 800dd28:	b002      	add	sp, #8
 800dd2a:	bd10      	pop	{r4, pc}

0800dd2c <_DMA_Color2IndexBulk>:
*   This routine is used by the emWin color conversion routines to use DMA2D for
*   color conversion. It converts the given 32 bit color array to index values.
*   Because emWin uses ABGR internally and 0x00 and 0xFF for opaque and fully
*   transparent the given color array needs to be converted before DMA2D can be used.
*/
static void _DMA_Color2IndexBulk(LCD_COLOR * pColor, void * pIndex, U32 NumItems, U8 SizeOfIndex, U32 PixelFormat) {
 800dd2c:	b500      	push	{lr}
 800dd2e:	b083      	sub	sp, #12
#if (GUI_USE_ARGB)

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(pColor, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
 800dd30:	9200      	str	r2, [sp, #0]
 800dd32:	9b04      	ldr	r3, [sp, #16]
 800dd34:	2200      	movs	r2, #0
 800dd36:	f7ff ff9f 	bl	800dc78 <_DMA_ConvertColor>
  _InvertAlpha_SwapRB_CPY(pColor, _pBuffer_DMA2D, NumItems);

  /* Use DMA2D for the conversion */
  _DMA_ConvertColor(_pBuffer_DMA2D, pIndex, LTDC_PIXEL_FORMAT_ARGB8888, PixelFormat, NumItems);
#endif
}
 800dd3a:	b003      	add	sp, #12
 800dd3c:	f85d fb04 	ldr.w	pc, [sp], #4

0800dd40 <_Color2IndexBulk_M8888I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M8888I, LTDC_PIXEL_FORMAT_ARGB8888)
 800dd40:	b510      	push	{r4, lr}
 800dd42:	b082      	sub	sp, #8
 800dd44:	2400      	movs	r4, #0
 800dd46:	9400      	str	r4, [sp, #0]
 800dd48:	f7ff fff0 	bl	800dd2c <_DMA_Color2IndexBulk>
 800dd4c:	b002      	add	sp, #8
 800dd4e:	bd10      	pop	{r4, pc}

0800dd50 <_Color2IndexBulk_M888_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M888,   LTDC_PIXEL_FORMAT_ARGB8888) // Internal pixel format of emWin is 32 bit, because of that ARGB8888
 800dd50:	b510      	push	{r4, lr}
 800dd52:	b082      	sub	sp, #8
 800dd54:	2400      	movs	r4, #0
 800dd56:	9400      	str	r4, [sp, #0]
 800dd58:	f7ff ffe8 	bl	800dd2c <_DMA_Color2IndexBulk>
 800dd5c:	b002      	add	sp, #8
 800dd5e:	bd10      	pop	{r4, pc}

0800dd60 <_Color2IndexBulk_M4444I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M4444I, LTDC_PIXEL_FORMAT_ARGB4444)
 800dd60:	b510      	push	{r4, lr}
 800dd62:	b082      	sub	sp, #8
 800dd64:	2404      	movs	r4, #4
 800dd66:	9400      	str	r4, [sp, #0]
 800dd68:	f7ff ffe0 	bl	800dd2c <_DMA_Color2IndexBulk>
 800dd6c:	b002      	add	sp, #8
 800dd6e:	bd10      	pop	{r4, pc}

0800dd70 <_Color2IndexBulk_M565_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M565,   LTDC_PIXEL_FORMAT_RGB565)
 800dd70:	b510      	push	{r4, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	2402      	movs	r4, #2
 800dd76:	9400      	str	r4, [sp, #0]
 800dd78:	f7ff ffd8 	bl	800dd2c <_DMA_Color2IndexBulk>
 800dd7c:	b002      	add	sp, #8
 800dd7e:	bd10      	pop	{r4, pc}

0800dd80 <_Color2IndexBulk_M1555I_DMA2D>:
DEFINE_DMA2D_COLORCONVERSION(M1555I, LTDC_PIXEL_FORMAT_ARGB1555)
 800dd80:	b510      	push	{r4, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	2403      	movs	r4, #3
 800dd86:	9400      	str	r4, [sp, #0]
 800dd88:	f7ff ffd0 	bl	800dd2c <_DMA_Color2IndexBulk>
 800dd8c:	b002      	add	sp, #8
 800dd8e:	bd10      	pop	{r4, pc}

0800dd90 <GetBufferSize>:
  * @brief  Get buffer size
  * @param  LayerIndex : Layer Index           
  * @retval None.
  */
static U32 GetBufferSize(U32 LayerIndex) 
{
 800dd90:	b410      	push	{r4}
  return (layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel);
 800dd92:	4909      	ldr	r1, [pc, #36]	; (800ddb8 <GetBufferSize+0x28>)
 800dd94:	00c3      	lsls	r3, r0, #3
 800dd96:	1a1c      	subs	r4, r3, r0
 800dd98:	00a2      	lsls	r2, r4, #2
 800dd9a:	440a      	add	r2, r1
 800dd9c:	6914      	ldr	r4, [r2, #16]
 800dd9e:	6952      	ldr	r2, [r2, #20]
 800dda0:	fb02 f204 	mul.w	r2, r2, r4
 800dda4:	1a1b      	subs	r3, r3, r0
 800dda6:	0098      	lsls	r0, r3, #2
 800dda8:	4401      	add	r1, r0
 800ddaa:	6988      	ldr	r0, [r1, #24]
}
 800ddac:	fb00 f002 	mul.w	r0, r0, r2
 800ddb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddb4:	4770      	bx	lr
 800ddb6:	bf00      	nop
 800ddb8:	2002e0c8 	.word	0x2002e0c8

0800ddbc <LCD_LL_CopyBuffer>:
  * @param  IndexSrc:    index source
  * @param  IndexDst:    index destination           
  * @retval None.
  */
static void LCD_LL_CopyBuffer(int LayerIndex, int IndexSrc, int IndexDst) 
{
 800ddbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddc0:	b084      	sub	sp, #16
 800ddc2:	4606      	mov	r6, r0
 800ddc4:	4688      	mov	r8, r1
 800ddc6:	4617      	mov	r7, r2
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 800ddc8:	f7ff ffe2 	bl	800dd90 <GetBufferSize>
  AddrSrc    = layer_prop[LayerIndex].address + BufferSize * IndexSrc;
 800ddcc:	4d0c      	ldr	r5, [pc, #48]	; (800de00 <LCD_LL_CopyBuffer+0x44>)
 800ddce:	00f4      	lsls	r4, r6, #3
 800ddd0:	1ba3      	subs	r3, r4, r6
 800ddd2:	009a      	lsls	r2, r3, #2
 800ddd4:	442a      	add	r2, r5
 800ddd6:	6851      	ldr	r1, [r2, #4]
  AddrDst    = layer_prop[LayerIndex].address + BufferSize * IndexDst;
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, layer_prop[LayerIndex].xSize, layer_prop[LayerIndex].ySize, 0, 0);
 800ddd8:	6913      	ldr	r3, [r2, #16]
 800ddda:	6952      	ldr	r2, [r2, #20]
 800dddc:	9200      	str	r2, [sp, #0]
 800ddde:	2200      	movs	r2, #0
 800dde0:	9202      	str	r2, [sp, #8]
 800dde2:	9201      	str	r2, [sp, #4]
 800dde4:	fb00 1207 	mla	r2, r0, r7, r1
 800dde8:	fb00 1108 	mla	r1, r0, r8, r1
 800ddec:	4630      	mov	r0, r6
 800ddee:	f7ff fec1 	bl	800db74 <DMA2D_CopyBuffer>
  layer_prop[LayerIndex].buffer_index = IndexDst;
 800ddf2:	1ba4      	subs	r4, r4, r6
 800ddf4:	00a3      	lsls	r3, r4, #2
 800ddf6:	441d      	add	r5, r3
 800ddf8:	60ef      	str	r7, [r5, #12]
}
 800ddfa:	b004      	add	sp, #16
 800ddfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de00:	2002e0c8 	.word	0x2002e0c8

0800de04 <LCD_LL_CopyRect>:
  * @param  xSize:       X size. 
  * @param  ySize:       Y size.            
  * @retval None.
  */
static void LCD_LL_CopyRect(int LayerIndex, int x0, int y0, int x1, int y1, int xSize, int ySize) 
{
 800de04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de08:	b085      	sub	sp, #20
 800de0a:	4607      	mov	r7, r0
 800de0c:	460c      	mov	r4, r1
 800de0e:	4691      	mov	r9, r2
 800de10:	4698      	mov	r8, r3
  U32 BufferSize, AddrSrc, AddrDst;

  BufferSize = GetBufferSize(LayerIndex);
 800de12:	f7ff ffbd 	bl	800dd90 <GetBufferSize>
  AddrSrc = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800de16:	4d16      	ldr	r5, [pc, #88]	; (800de70 <LCD_LL_CopyRect+0x6c>)
 800de18:	ea4f 0cc7 	mov.w	ip, r7, lsl #3
 800de1c:	ebac 0207 	sub.w	r2, ip, r7
 800de20:	0093      	lsls	r3, r2, #2
 800de22:	442b      	add	r3, r5
 800de24:	6859      	ldr	r1, [r3, #4]
 800de26:	691e      	ldr	r6, [r3, #16]
 800de28:	fb09 4406 	mla	r4, r9, r6, r4
 800de2c:	699a      	ldr	r2, [r3, #24]
 800de2e:	ebac 0307 	sub.w	r3, ip, r7
 800de32:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800de36:	eb05 0e0c 	add.w	lr, r5, ip
 800de3a:	f8de 3008 	ldr.w	r3, [lr, #8]
 800de3e:	fb00 f003 	mul.w	r0, r0, r3
 800de42:	fb02 0404 	mla	r4, r2, r4, r0
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].pending_buffer + (y1 * layer_prop[LayerIndex].xSize + x1) * layer_prop[LayerIndex].BytesPerPixel;
 800de46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800de48:	fb03 8806 	mla	r8, r3, r6, r8
 800de4c:	fb08 0202 	mla	r2, r8, r2, r0
  DMA2D_CopyBuffer(LayerIndex, (void *)AddrSrc, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, 0);
 800de50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de52:	1af6      	subs	r6, r6, r3
 800de54:	2300      	movs	r3, #0
 800de56:	9302      	str	r3, [sp, #8]
 800de58:	9601      	str	r6, [sp, #4]
 800de5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de60:	440a      	add	r2, r1
 800de62:	4421      	add	r1, r4
 800de64:	4638      	mov	r0, r7
 800de66:	f7ff fe85 	bl	800db74 <DMA2D_CopyBuffer>
}
 800de6a:	b005      	add	sp, #20
 800de6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de70:	2002e0c8 	.word	0x2002e0c8

0800de74 <DMA2D_DrawBitmapL8>:
  * @param  xSize: X size
  * @param  ySize: Y size
  * @retval None
  */
static void DMA2D_DrawBitmapL8(void * pSrc, void * pDst,  U32 OffSrc, U32 OffDst, U32 PixelFormatDst, U32 xSize, U32 ySize)
{	
 800de74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de76:	4607      	mov	r7, r0
 800de78:	460e      	mov	r6, r1
 800de7a:	4615      	mov	r5, r2
 800de7c:	461c      	mov	r4, r3
	
  _DMA_ExecOperation();
 800de7e:	f7ff fe67 	bl	800db50 <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 800de82:	4b0d      	ldr	r3, [pc, #52]	; (800deb8 <DMA2D_DrawBitmapL8+0x44>)
 800de84:	2201      	movs	r2, #1
 800de86:	701a      	strb	r2, [r3, #0]
	
  /* Set up mode */
  DMA2D->CR      = 0x00010000UL | (1 << 9);         /* Control Register (Memory to memory with pixel format conversion and TCIE) */
 800de88:	4b0c      	ldr	r3, [pc, #48]	; (800debc <DMA2D_DrawBitmapL8+0x48>)
 800de8a:	f44f 3281 	mov.w	r2, #66048	; 0x10200
 800de8e:	601a      	str	r2, [r3, #0]

  /* Set up pointers */
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address) */
 800de90:	60df      	str	r7, [r3, #12]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address) */
 800de92:	63de      	str	r6, [r3, #60]	; 0x3c

  /* Set up offsets */
  DMA2D->FGOR    = OffSrc;                          /* Foreground Offset Register (Source line offset) */
 800de94:	611d      	str	r5, [r3, #16]
  DMA2D->OOR     = OffDst;                          /* Output Offset Register (Destination line offset) */
 800de96:	641c      	str	r4, [r3, #64]	; 0x40

  /* Set up pixel format */
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_L8;             /* Foreground PFC Control Register (Defines the input pixel format) */
 800de98:	2205      	movs	r2, #5
 800de9a:	61da      	str	r2, [r3, #28]
  DMA2D->OPFCCR  = PixelFormatDst;                   /* Output PFC Control Register (Defines the output pixel format) */
 800de9c:	9a06      	ldr	r2, [sp, #24]
 800de9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set up size */
  DMA2D->NLR     = (U32)(xSize << 16) | ySize;       /* Number of Line Register (Size configuration of area to be transfered) */
 800dea0:	9907      	ldr	r1, [sp, #28]
 800dea2:	9a08      	ldr	r2, [sp, #32]
 800dea4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800dea8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Execute operation */
  DMA2D->CR     |= DMA2D_CR_START;                   /* Start operation */
 800deaa:	681a      	ldr	r2, [r3, #0]
 800deac:	f042 0201 	orr.w	r2, r2, #1
 800deb0:	601a      	str	r2, [r3, #0]

  /* Wait until transfer is done */
  _DMA_ExecOperation();	
 800deb2:	f7ff fe4d 	bl	800db50 <_DMA_ExecOperation>
}
 800deb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800deb8:	2002e0c8 	.word	0x2002e0c8
 800debc:	4002b000 	.word	0x4002b000

0800dec0 <_DMA_DrawAlphaBitmap>:
/*********************************************************************
*
*       _DMA_DrawAlphaBitmap
*/
/**/
static void _DMA_DrawAlphaBitmap(void * pDst, const void * pSrc, int xSize, int ySize, int OffLineSrc, int OffLineDst, int PixelFormat) {
 800dec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dec4:	4607      	mov	r7, r0
 800dec6:	4689      	mov	r9, r1
 800dec8:	4690      	mov	r8, r2
 800deca:	461c      	mov	r4, r3
 800decc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dece:	9d0a      	ldr	r5, [sp, #40]	; 0x28

  _DMA_ExecOperation();
 800ded0:	f7ff fe3e 	bl	800db50 <_DMA_ExecOperation>
   
  TransferInProgress = 1;
 800ded4:	4b0f      	ldr	r3, [pc, #60]	; (800df14 <_DMA_DrawAlphaBitmap+0x54>)
 800ded6:	2201      	movs	r2, #1
 800ded8:	701a      	strb	r2, [r3, #0]
	
  DMA2D->CR      = 0x00020000UL | (1 << 9);         /* Control Register (Memory to memory with blending of FG and BG and TCIE) */
 800deda:	490f      	ldr	r1, [pc, #60]	; (800df18 <_DMA_DrawAlphaBitmap+0x58>)
 800dedc:	4b0f      	ldr	r3, [pc, #60]	; (800df1c <_DMA_DrawAlphaBitmap+0x5c>)
 800dede:	600b      	str	r3, [r1, #0]
  DMA2D->FGMAR   = (U32)pSrc;                       /* Foreground Memory Address Register (Source address)                     */
 800dee0:	f8c1 900c 	str.w	r9, [r1, #12]
  DMA2D->BGMAR   = (U32)pDst;                       /* Background Memory Address Register (Destination address)                */
 800dee4:	614f      	str	r7, [r1, #20]
  DMA2D->OMAR    = (U32)pDst;                       /* Output Memory Address Register (Destination address)                    */
 800dee6:	63cf      	str	r7, [r1, #60]	; 0x3c
  DMA2D->FGOR    = OffLineSrc;                      /* Foreground Offset Register (Source line offset)                         */
 800dee8:	9b08      	ldr	r3, [sp, #32]
 800deea:	610b      	str	r3, [r1, #16]
  DMA2D->BGOR    = OffLineDst;                      /* Background Offset Register (Destination line offset)                    */
 800deec:	618e      	str	r6, [r1, #24]
  DMA2D->OOR     = OffLineDst;                      /* Output Offset Register (Destination line offset)                        */
 800deee:	640e      	str	r6, [r1, #64]	; 0x40
  DMA2D->FGPFCCR = LTDC_PIXEL_FORMAT_ARGB8888;      /* Foreground PFC Control Register (Defines the input pixel format)        */
 800def0:	2300      	movs	r3, #0
 800def2:	61cb      	str	r3, [r1, #28]
  DMA2D->BGPFCCR = PixelFormat;                     /* Background PFC Control Register (Defines the destination pixel format)  */
 800def4:	624d      	str	r5, [r1, #36]	; 0x24
  DMA2D->OPFCCR  = PixelFormat;                     /* Output     PFC Control Register (Defines the output pixel format)       */
 800def6:	634d      	str	r5, [r1, #52]	; 0x34
  DMA2D->NLR     = (U32)(xSize << 16) | (U16)ySize; /* Number of Line Register (Size configuration of area to be transfered)   */
 800def8:	b2a4      	uxth	r4, r4
 800defa:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800defe:	644c      	str	r4, [r1, #68]	; 0x44
  
  DMA2D->CR     |= (1|DMA2D_IT_TC);
 800df00:	680b      	ldr	r3, [r1, #0]
 800df02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800df06:	4313      	orrs	r3, r2
 800df08:	600b      	str	r3, [r1, #0]

_DMA_ExecOperation();  
 800df0a:	f7ff fe21 	bl	800db50 <_DMA_ExecOperation>
}
 800df0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df12:	bf00      	nop
 800df14:	2002e0c8 	.word	0x2002e0c8
 800df18:	4002b000 	.word	0x4002b000
 800df1c:	00020200 	.word	0x00020200

0800df20 <_LCD_DrawBitmapAlpha>:

/*********************************************************************
*
*       _LCD_DrawBitmapAlpha
*/
static void _LCD_DrawBitmapAlpha(int LayerIndex, int x, int y, const void * p, int xSize, int ySize, int BytesPerLine) {
 800df20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df24:	b084      	sub	sp, #16
 800df26:	4605      	mov	r5, r0
 800df28:	460c      	mov	r4, r1
 800df2a:	4692      	mov	sl, r2
 800df2c:	4698      	mov	r8, r3
 800df2e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800df30:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  PixelFormat = GetPixelformat(LayerIndex);
 800df32:	f7ff fe17 	bl	800db64 <GetPixelformat>
 800df36:	4681      	mov	r9, r0
  BufferSize = GetBufferSize(LayerIndex);
 800df38:	4628      	mov	r0, r5
 800df3a:	f7ff ff29 	bl	800dd90 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800df3e:	f8df c054 	ldr.w	ip, [pc, #84]	; 800df94 <_LCD_DrawBitmapAlpha+0x74>
 800df42:	00ea      	lsls	r2, r5, #3
 800df44:	1b51      	subs	r1, r2, r5
 800df46:	008b      	lsls	r3, r1, #2
 800df48:	4463      	add	r3, ip
 800df4a:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800df4e:	6919      	ldr	r1, [r3, #16]
 800df50:	fb0a 4401 	mla	r4, sl, r1, r4
 800df54:	699b      	ldr	r3, [r3, #24]
 800df56:	1b55      	subs	r5, r2, r5
 800df58:	00aa      	lsls	r2, r5, #2
 800df5a:	4494      	add	ip, r2
 800df5c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800df60:	fb00 f002 	mul.w	r0, r0, r2
 800df64:	fb03 0404 	mla	r4, r3, r4, r0
 800df68:	eb0e 0004 	add.w	r0, lr, r4
  OffLineSrc = (BytesPerLine / 4) - xSize;
 800df6c:	463b      	mov	r3, r7
 800df6e:	2f00      	cmp	r7, #0
 800df70:	db0e      	blt.n	800df90 <_LCD_DrawBitmapAlpha+0x70>
 800df72:	ebc6 03a3 	rsb	r3, r6, r3, asr #2
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 800df76:	1b89      	subs	r1, r1, r6
  _DMA_DrawAlphaBitmap((void *)AddrDst, p, xSize, ySize, OffLineSrc, OffLineDst, PixelFormat);
 800df78:	f8cd 9008 	str.w	r9, [sp, #8]
 800df7c:	9101      	str	r1, [sp, #4]
 800df7e:	9300      	str	r3, [sp, #0]
 800df80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df82:	4632      	mov	r2, r6
 800df84:	4641      	mov	r1, r8
 800df86:	f7ff ff9b 	bl	800dec0 <_DMA_DrawAlphaBitmap>
}
 800df8a:	b004      	add	sp, #16
 800df8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  OffLineSrc = (BytesPerLine / 4) - xSize;
 800df90:	1cfb      	adds	r3, r7, #3
 800df92:	e7ee      	b.n	800df72 <_LCD_DrawBitmapAlpha+0x52>
 800df94:	2002e0c8 	.word	0x2002e0c8

0800df98 <_LCD_DrawMemdevAlpha>:

/*********************************************************************
*
*       _LCD_DrawMemdevAlpha
*/
static void _LCD_DrawMemdevAlpha(void * pDst, const void * pSrc, int xSize, int ySize, int BytesPerLineDst, int BytesPerLineSrc) {
 800df98:	b570      	push	{r4, r5, r6, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	9e08      	ldr	r6, [sp, #32]
 800df9e:	9d09      	ldr	r5, [sp, #36]	; 0x24
  int OffLineSrc, OffLineDst;

  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 800dfa0:	462c      	mov	r4, r5
 800dfa2:	2d00      	cmp	r5, #0
 800dfa4:	db0e      	blt.n	800dfc4 <_LCD_DrawMemdevAlpha+0x2c>
 800dfa6:	ebc2 04a4 	rsb	r4, r2, r4, asr #2
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 800dfaa:	4635      	mov	r5, r6
 800dfac:	2e00      	cmp	r6, #0
 800dfae:	db0b      	blt.n	800dfc8 <_LCD_DrawMemdevAlpha+0x30>
 800dfb0:	ebc2 05a5 	rsb	r5, r2, r5, asr #2
  _DMA_DrawAlphaBitmap(pDst, pSrc, xSize, ySize, OffLineSrc, OffLineDst, LTDC_PIXEL_FORMAT_ARGB8888);
 800dfb4:	2600      	movs	r6, #0
 800dfb6:	9602      	str	r6, [sp, #8]
 800dfb8:	9501      	str	r5, [sp, #4]
 800dfba:	9400      	str	r4, [sp, #0]
 800dfbc:	f7ff ff80 	bl	800dec0 <_DMA_DrawAlphaBitmap>
}
 800dfc0:	b004      	add	sp, #16
 800dfc2:	bd70      	pop	{r4, r5, r6, pc}
  OffLineSrc = (BytesPerLineSrc / 4) - xSize;
 800dfc4:	1cec      	adds	r4, r5, #3
 800dfc6:	e7ee      	b.n	800dfa6 <_LCD_DrawMemdevAlpha+0xe>
  OffLineDst = (BytesPerLineDst / 4) - xSize;
 800dfc8:	1cf5      	adds	r5, r6, #3
 800dfca:	e7f1      	b.n	800dfb0 <_LCD_DrawMemdevAlpha+0x18>

0800dfcc <LCD_LL_DrawBitmap16bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
void LCD_LL_DrawBitmap16bpp(int LayerIndex, int x, int y, U16 const * p, int xSize, int ySize, int BytesPerLine)
{
 800dfcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfd0:	b085      	sub	sp, #20
 800dfd2:	4605      	mov	r5, r0
 800dfd4:	4688      	mov	r8, r1
 800dfd6:	4691      	mov	r9, r2
 800dfd8:	461f      	mov	r7, r3
 800dfda:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800dfdc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 800dfde:	f7ff fed7 	bl	800dd90 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800dfe2:	f8df e050 	ldr.w	lr, [pc, #80]	; 800e034 <LCD_LL_DrawBitmap16bpp+0x68>
 800dfe6:	00e9      	lsls	r1, r5, #3
 800dfe8:	1b4a      	subs	r2, r1, r5
 800dfea:	0093      	lsls	r3, r2, #2
 800dfec:	4473      	add	r3, lr
 800dfee:	685a      	ldr	r2, [r3, #4]
 800dff0:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800dff4:	fb09 880c 	mla	r8, r9, ip, r8
 800dff8:	f8d3 9018 	ldr.w	r9, [r3, #24]
 800dffc:	1b4b      	subs	r3, r1, r5
 800dffe:	0099      	lsls	r1, r3, #2
 800e000:	448e      	add	lr, r1
 800e002:	f8de 300c 	ldr.w	r3, [lr, #12]
 800e006:	fb00 f003 	mul.w	r0, r0, r3
 800e00a:	fb09 0808 	mla	r8, r9, r8, r0
  OffLineSrc = (BytesPerLine / 2) - xSize;
 800e00e:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800e012:	ebc6 0464 	rsb	r4, r6, r4, asr #1
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 800e016:	ebac 0306 	sub.w	r3, ip, r6
  DMA2D_CopyBuffer(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 800e01a:	9302      	str	r3, [sp, #8]
 800e01c:	9401      	str	r4, [sp, #4]
 800e01e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e020:	9300      	str	r3, [sp, #0]
 800e022:	4633      	mov	r3, r6
 800e024:	4442      	add	r2, r8
 800e026:	4639      	mov	r1, r7
 800e028:	4628      	mov	r0, r5
 800e02a:	f7ff fda3 	bl	800db74 <DMA2D_CopyBuffer>
}
 800e02e:	b005      	add	sp, #20
 800e030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e034:	2002e0c8 	.word	0x2002e0c8

0800e038 <LCD_LL_DrawBitmap32bpp>:

static void LCD_LL_DrawBitmap32bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 800e038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e03c:	b085      	sub	sp, #20
 800e03e:	4605      	mov	r5, r0
 800e040:	460c      	mov	r4, r1
 800e042:	4691      	mov	r9, r2
 800e044:	4698      	mov	r8, r3
 800e046:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e048:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;

  BufferSize = GetBufferSize(LayerIndex);
 800e04a:	f7ff fea1 	bl	800dd90 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800e04e:	4a17      	ldr	r2, [pc, #92]	; (800e0ac <LCD_LL_DrawBitmap32bpp+0x74>)
 800e050:	00e9      	lsls	r1, r5, #3
 800e052:	eba1 0c05 	sub.w	ip, r1, r5
 800e056:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800e05a:	4413      	add	r3, r2
 800e05c:	f8d3 e004 	ldr.w	lr, [r3, #4]
 800e060:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800e064:	fb09 440c 	mla	r4, r9, ip, r4
 800e068:	f8d3 9018 	ldr.w	r9, [r3, #24]
 800e06c:	1b4b      	subs	r3, r1, r5
 800e06e:	0099      	lsls	r1, r3, #2
 800e070:	440a      	add	r2, r1
 800e072:	68d3      	ldr	r3, [r2, #12]
 800e074:	fb00 f303 	mul.w	r3, r0, r3
 800e078:	fb09 3404 	mla	r4, r9, r4, r3
 800e07c:	eb0e 0204 	add.w	r2, lr, r4
  OffLineSrc = (BytesPerLine / 4) - xSize;
 800e080:	463b      	mov	r3, r7
 800e082:	2f00      	cmp	r7, #0
 800e084:	db0f      	blt.n	800e0a6 <LCD_LL_DrawBitmap32bpp+0x6e>
 800e086:	ebc6 01a3 	rsb	r1, r6, r3, asr #2
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 800e08a:	ebac 0306 	sub.w	r3, ip, r6
  DMA2D_CopyBufferWithAlpha(LayerIndex, (void *)p, (void *)AddrDst, xSize, ySize, OffLineSrc, OffLineDst);
 800e08e:	9302      	str	r3, [sp, #8]
 800e090:	9101      	str	r1, [sp, #4]
 800e092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e094:	9300      	str	r3, [sp, #0]
 800e096:	4633      	mov	r3, r6
 800e098:	4641      	mov	r1, r8
 800e09a:	4628      	mov	r0, r5
 800e09c:	f7ff fd92 	bl	800dbc4 <DMA2D_CopyBufferWithAlpha>
}
 800e0a0:	b005      	add	sp, #20
 800e0a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  OffLineSrc = (BytesPerLine / 4) - xSize;
 800e0a6:	1cfb      	adds	r3, r7, #3
 800e0a8:	e7ed      	b.n	800e086 <LCD_LL_DrawBitmap32bpp+0x4e>
 800e0aa:	bf00      	nop
 800e0ac:	2002e0c8 	.word	0x2002e0c8

0800e0b0 <LCD_LL_DrawBitmap8bpp>:
  * @param  ySize:      Y size
  * @param  BytesPerLine
  * @retval None
  */
static void LCD_LL_DrawBitmap8bpp(int LayerIndex, int x, int y, U8 const * p, int xSize, int ySize, int BytesPerLine)
{
 800e0b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0b4:	b085      	sub	sp, #20
 800e0b6:	4606      	mov	r6, r0
 800e0b8:	460d      	mov	r5, r1
 800e0ba:	4691      	mov	r9, r2
 800e0bc:	4698      	mov	r8, r3
 800e0be:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  U32 BufferSize, AddrDst;
  int OffLineSrc, OffLineDst;
  U32 PixelFormat;

  BufferSize = GetBufferSize(LayerIndex);
 800e0c0:	f7ff fe66 	bl	800dd90 <GetBufferSize>
  AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y * layer_prop[LayerIndex].xSize + x) * layer_prop[LayerIndex].BytesPerPixel;
 800e0c4:	4b14      	ldr	r3, [pc, #80]	; (800e118 <LCD_LL_DrawBitmap8bpp+0x68>)
 800e0c6:	00f2      	lsls	r2, r6, #3
 800e0c8:	1b91      	subs	r1, r2, r6
 800e0ca:	008c      	lsls	r4, r1, #2
 800e0cc:	441c      	add	r4, r3
 800e0ce:	f8d4 c004 	ldr.w	ip, [r4, #4]
 800e0d2:	6921      	ldr	r1, [r4, #16]
 800e0d4:	fb09 5501 	mla	r5, r9, r1, r5
 800e0d8:	69a4      	ldr	r4, [r4, #24]
 800e0da:	1b92      	subs	r2, r2, r6
 800e0dc:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 800e0e0:	4473      	add	r3, lr
 800e0e2:	68db      	ldr	r3, [r3, #12]
 800e0e4:	fb00 f003 	mul.w	r0, r0, r3
 800e0e8:	fb04 0505 	mla	r5, r4, r5, r0
 800e0ec:	eb0c 0405 	add.w	r4, ip, r5
  OffLineSrc = BytesPerLine - xSize;
 800e0f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e0f2:	eba3 0907 	sub.w	r9, r3, r7
  OffLineDst = layer_prop[LayerIndex].xSize - xSize;
 800e0f6:	1bcd      	subs	r5, r1, r7
  PixelFormat = GetPixelformat(LayerIndex);
 800e0f8:	4630      	mov	r0, r6
 800e0fa:	f7ff fd33 	bl	800db64 <GetPixelformat>
  DMA2D_DrawBitmapL8((void *)p, (void *)AddrDst, OffLineSrc, OffLineDst, PixelFormat, xSize, ySize);
 800e0fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e100:	9302      	str	r3, [sp, #8]
 800e102:	9701      	str	r7, [sp, #4]
 800e104:	9000      	str	r0, [sp, #0]
 800e106:	462b      	mov	r3, r5
 800e108:	464a      	mov	r2, r9
 800e10a:	4621      	mov	r1, r4
 800e10c:	4640      	mov	r0, r8
 800e10e:	f7ff feb1 	bl	800de74 <DMA2D_DrawBitmapL8>
}
 800e112:	b005      	add	sp, #20
 800e114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e118:	2002e0c8 	.word	0x2002e0c8

0800e11c <LCD_LL_FillRect>:
{
 800e11c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e120:	b082      	sub	sp, #8
 800e122:	4606      	mov	r6, r0
 800e124:	460c      	mov	r4, r1
 800e126:	4690      	mov	r8, r2
 800e128:	461d      	mov	r5, r3
  if (GUI_GetDrawMode() == GUI_DM_XOR) 
 800e12a:	f001 ff99 	bl	8010060 <GUI_GetDrawMode>
 800e12e:	2801      	cmp	r0, #1
 800e130:	d02e      	beq.n	800e190 <LCD_LL_FillRect+0x74>
    xSize = x1 - x0 + 1;
 800e132:	1b2d      	subs	r5, r5, r4
 800e134:	3501      	adds	r5, #1
    ySize = y1 - y0 + 1;
 800e136:	9b08      	ldr	r3, [sp, #32]
 800e138:	eba3 0708 	sub.w	r7, r3, r8
 800e13c:	3701      	adds	r7, #1
    BufferSize = GetBufferSize(LayerIndex);
 800e13e:	4630      	mov	r0, r6
 800e140:	f7ff fe26 	bl	800dd90 <GetBufferSize>
    AddrDst = layer_prop[LayerIndex].address + BufferSize * layer_prop[LayerIndex].buffer_index + (y0 * layer_prop[LayerIndex].xSize + x0) * layer_prop[LayerIndex].BytesPerPixel;
 800e144:	f8df e070 	ldr.w	lr, [pc, #112]	; 800e1b8 <LCD_LL_FillRect+0x9c>
 800e148:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 800e14c:	ebac 0206 	sub.w	r2, ip, r6
 800e150:	0093      	lsls	r3, r2, #2
 800e152:	4473      	add	r3, lr
 800e154:	6859      	ldr	r1, [r3, #4]
 800e156:	691a      	ldr	r2, [r3, #16]
 800e158:	fb08 4402 	mla	r4, r8, r2, r4
 800e15c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800e160:	ebac 0306 	sub.w	r3, ip, r6
 800e164:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800e168:	44e6      	add	lr, ip
 800e16a:	f8de 300c 	ldr.w	r3, [lr, #12]
 800e16e:	fb00 f003 	mul.w	r0, r0, r3
 800e172:	fb08 0404 	mla	r4, r8, r4, r0
    DMA2D_FillBuffer(LayerIndex, (void *)AddrDst, xSize, ySize, layer_prop[LayerIndex].xSize - xSize, PixelIndex);
 800e176:	1b52      	subs	r2, r2, r5
 800e178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e17a:	9301      	str	r3, [sp, #4]
 800e17c:	9200      	str	r2, [sp, #0]
 800e17e:	463b      	mov	r3, r7
 800e180:	462a      	mov	r2, r5
 800e182:	4421      	add	r1, r4
 800e184:	4630      	mov	r0, r6
 800e186:	f7ff fd4d 	bl	800dc24 <DMA2D_FillBuffer>
}
 800e18a:	b002      	add	sp, #8
 800e18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, NULL);
 800e190:	2200      	movs	r2, #0
 800e192:	2119      	movs	r1, #25
 800e194:	4630      	mov	r0, r6
 800e196:	f005 ff19 	bl	8013fcc <LCD_SetDevFunc>
    LCD_FillRect(x0, y0, x1, y1);
 800e19a:	9b08      	ldr	r3, [sp, #32]
 800e19c:	462a      	mov	r2, r5
 800e19e:	4641      	mov	r1, r8
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	f004 fbef 	bl	8012984 <LCD_FillRect>
    LCD_SetDevFunc(LayerIndex, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 800e1a6:	4a03      	ldr	r2, [pc, #12]	; (800e1b4 <LCD_LL_FillRect+0x98>)
 800e1a8:	2119      	movs	r1, #25
 800e1aa:	4630      	mov	r0, r6
 800e1ac:	f005 ff0e 	bl	8013fcc <LCD_SetDevFunc>
 800e1b0:	e7eb      	b.n	800e18a <LCD_LL_FillRect+0x6e>
 800e1b2:	bf00      	nop
 800e1b4:	0800e11d 	.word	0x0800e11d
 800e1b8:	2002e0c8 	.word	0x2002e0c8

0800e1bc <LCD_LL_Reset>:
{
 800e1bc:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_RESET);
 800e1be:	4c09      	ldr	r4, [pc, #36]	; (800e1e4 <LCD_LL_Reset+0x28>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	2180      	movs	r1, #128	; 0x80
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	f7f5 fdd2 	bl	8003d6e <HAL_GPIO_WritePin>
    HAL_Delay(20); /* wait 20 ms */
 800e1ca:	2014      	movs	r0, #20
 800e1cc:	f7f4 fc26 	bl	8002a1c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	2180      	movs	r1, #128	; 0x80
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	f7f5 fdca 	bl	8003d6e <HAL_GPIO_WritePin>
    HAL_Delay(10); 
 800e1da:	200a      	movs	r0, #10
 800e1dc:	f7f4 fc1e 	bl	8002a1c <HAL_Delay>
}
 800e1e0:	bd10      	pop	{r4, pc}
 800e1e2:	bf00      	nop
 800e1e4:	40021c00 	.word	0x40021c00

0800e1e8 <DSI_IO_WriteCmd>:
{
 800e1e8:	b500      	push	{lr}
 800e1ea:	b083      	sub	sp, #12
  if(NbrParams <= 1)
 800e1ec:	2801      	cmp	r0, #1
 800e1ee:	d90b      	bls.n	800e208 <DSI_IO_WriteCmd+0x20>
    HAL_DSI_LongWrite(&hdsi,  0, DSI_DCS_LONG_PKT_WRITE, NbrParams, pParams[NbrParams], pParams); 
 800e1f0:	5c0b      	ldrb	r3, [r1, r0]
 800e1f2:	9101      	str	r1, [sp, #4]
 800e1f4:	9300      	str	r3, [sp, #0]
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	2239      	movs	r2, #57	; 0x39
 800e1fa:	2100      	movs	r1, #0
 800e1fc:	4807      	ldr	r0, [pc, #28]	; (800e21c <DSI_IO_WriteCmd+0x34>)
 800e1fe:	f7f5 fbae 	bl	800395e <HAL_DSI_LongWrite>
} 
 800e202:	b003      	add	sp, #12
 800e204:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, pParams[0], pParams[1]); 
 800e208:	780b      	ldrb	r3, [r1, #0]
 800e20a:	784a      	ldrb	r2, [r1, #1]
 800e20c:	9200      	str	r2, [sp, #0]
 800e20e:	2215      	movs	r2, #21
 800e210:	2100      	movs	r1, #0
 800e212:	4802      	ldr	r0, [pc, #8]	; (800e21c <DSI_IO_WriteCmd+0x34>)
 800e214:	f7f5 fb90 	bl	8003938 <HAL_DSI_ShortWrite>
 800e218:	e7f3      	b.n	800e202 <DSI_IO_WriteCmd+0x1a>
 800e21a:	bf00      	nop
 800e21c:	20030628 	.word	0x20030628

0800e220 <OTM8009A_IO_Delay>:
{
 800e220:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 800e222:	f7f4 fbfb 	bl	8002a1c <HAL_Delay>
}
 800e226:	bd08      	pop	{r3, pc}

0800e228 <DMA2D_Init>:
{
 800e228:	b508      	push	{r3, lr}
	hdma2d.XferCpltCallback  = TransferComplete;	
 800e22a:	4809      	ldr	r0, [pc, #36]	; (800e250 <DMA2D_Init+0x28>)
 800e22c:	4b09      	ldr	r3, [pc, #36]	; (800e254 <DMA2D_Init+0x2c>)
 800e22e:	6103      	str	r3, [r0, #16]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800e230:	f7f4 fe86 	bl	8002f40 <HAL_DMA2D_Init>
 800e234:	b928      	cbnz	r0, 800e242 <DMA2D_Init+0x1a>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800e236:	2101      	movs	r1, #1
 800e238:	4805      	ldr	r0, [pc, #20]	; (800e250 <DMA2D_Init+0x28>)
 800e23a:	f7f4 ff4f 	bl	80030dc <HAL_DMA2D_ConfigLayer>
 800e23e:	b918      	cbnz	r0, 800e248 <DMA2D_Init+0x20>
}
 800e240:	bd08      	pop	{r3, pc}
    Error_Handler( );
 800e242:	f7f3 fd1f 	bl	8001c84 <Error_Handler>
 800e246:	e7f6      	b.n	800e236 <DMA2D_Init+0xe>
    Error_Handler( );
 800e248:	f7f3 fd1c 	bl	8001c84 <Error_Handler>
}
 800e24c:	e7f8      	b.n	800e240 <DMA2D_Init+0x18>
 800e24e:	bf00      	nop
 800e250:	200306ec 	.word	0x200306ec
 800e254:	0800db69 	.word	0x0800db69

0800e258 <LCD_SetUpdateRegion>:
  * @brief  Set LCD updated region.
  * @param  idx: active region index.
  * @retval None
  */
void LCD_SetUpdateRegion(int idx)
{
 800e258:	b500      	push	{lr}
 800e25a:	b083      	sub	sp, #12
  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
 800e25c:	4b07      	ldr	r3, [pc, #28]	; (800e27c <LCD_SetUpdateRegion+0x24>)
 800e25e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e262:	9001      	str	r0, [sp, #4]
 800e264:	232a      	movs	r3, #42	; 0x2a
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	2304      	movs	r3, #4
 800e26a:	2239      	movs	r2, #57	; 0x39
 800e26c:	2100      	movs	r1, #0
 800e26e:	4804      	ldr	r0, [pc, #16]	; (800e280 <LCD_SetUpdateRegion+0x28>)
 800e270:	f7f5 fb75 	bl	800395e <HAL_DSI_LongWrite>
}
 800e274:	b003      	add	sp, #12
 800e276:	f85d fb04 	ldr.w	pc, [sp], #4
 800e27a:	bf00      	nop
 800e27c:	20000058 	.word	0x20000058
 800e280:	20030628 	.word	0x20030628

0800e284 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi: pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 800e284:	b538      	push	{r3, r4, r5, lr}
 800e286:	4605      	mov	r5, r0
  uint32_t index = 0;

	__DSI_MASK_TE();
 800e288:	4a11      	ldr	r2, [pc, #68]	; (800e2d0 <HAL_DSI_TearingEffectCallback+0x4c>)
 800e28a:	6a13      	ldr	r3, [r2, #32]
 800e28c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e290:	6213      	str	r3, [r2, #32]
	
  for(index = 0; index < GUI_NUM_LAYERS; index ++)
 800e292:	2400      	movs	r4, #0
 800e294:	b104      	cbz	r4, 800e298 <HAL_DSI_TearingEffectCallback+0x14>
    }    
			
    LCD_ActiveRegion = 1;
    HAL_DSI_Refresh(hdsi); 
  }
}  
 800e296:	bd38      	pop	{r3, r4, r5, pc}
    if(layer_prop[index].pending_buffer >= 0)
 800e298:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800e29c:	009a      	lsls	r2, r3, #2
 800e29e:	4b0d      	ldr	r3, [pc, #52]	; (800e2d4 <HAL_DSI_TearingEffectCallback+0x50>)
 800e2a0:	4413      	add	r3, r2
 800e2a2:	6899      	ldr	r1, [r3, #8]
 800e2a4:	2900      	cmp	r1, #0
 800e2a6:	da07      	bge.n	800e2b8 <HAL_DSI_TearingEffectCallback+0x34>
    LCD_ActiveRegion = 1;
 800e2a8:	4b0b      	ldr	r3, [pc, #44]	; (800e2d8 <HAL_DSI_TearingEffectCallback+0x54>)
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	609a      	str	r2, [r3, #8]
    HAL_DSI_Refresh(hdsi); 
 800e2ae:	4628      	mov	r0, r5
 800e2b0:	f7f5 fb30 	bl	8003914 <HAL_DSI_Refresh>
  for(index = 0; index < GUI_NUM_LAYERS; index ++)
 800e2b4:	3401      	adds	r4, #1
 800e2b6:	e7ed      	b.n	800e294 <HAL_DSI_TearingEffectCallback+0x10>
      GUI_MULTIBUF_ConfirmEx(index,  layer_prop[index].pending_buffer);
 800e2b8:	4620      	mov	r0, r4
 800e2ba:	f003 f8f3 	bl	80114a4 <GUI_MULTIBUF_ConfirmEx>
      layer_prop[index].pending_buffer = -1;
 800e2be:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800e2c2:	009a      	lsls	r2, r3, #2
 800e2c4:	4b03      	ldr	r3, [pc, #12]	; (800e2d4 <HAL_DSI_TearingEffectCallback+0x50>)
 800e2c6:	4413      	add	r3, r2
 800e2c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e2cc:	609a      	str	r2, [r3, #8]
 800e2ce:	e7eb      	b.n	800e2a8 <HAL_DSI_TearingEffectCallback+0x24>
 800e2d0:	40022400 	.word	0x40022400
 800e2d4:	2002e0c8 	.word	0x2002e0c8
 800e2d8:	20000058 	.word	0x20000058

0800e2dc <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi: pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 800e2dc:	b530      	push	{r4, r5, lr}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	4604      	mov	r4, r0
  uint32_t index = 0;

  if(LCD_ActiveRegion < ZONES )
 800e2e2:	4b43      	ldr	r3, [pc, #268]	; (800e3f0 <HAL_DSI_EndOfRefreshCallback+0x114>)
 800e2e4:	689b      	ldr	r3, [r3, #8]
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	dd2e      	ble.n	800e348 <HAL_DSI_EndOfRefreshCallback+0x6c>
    /* Refresh the right part of the display */
    HAL_DSI_Refresh(hdsi);
  }
  else
  {
    __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	9302      	str	r3, [sp, #8]
 800e2ee:	6801      	ldr	r1, [r0, #0]
 800e2f0:	f8d1 2404 	ldr.w	r2, [r1, #1028]	; 0x404
 800e2f4:	f022 0208 	bic.w	r2, r2, #8
 800e2f8:	f8c1 2404 	str.w	r2, [r1, #1028]	; 0x404
 800e2fc:	6802      	ldr	r2, [r0, #0]
 800e2fe:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800e302:	f002 0208 	and.w	r2, r2, #8
 800e306:	9202      	str	r2, [sp, #8]
 800e308:	9a02      	ldr	r2, [sp, #8]
    for(index = 0; index < GUI_NUM_LAYERS; index ++)
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d064      	beq.n	800e3d8 <HAL_DSI_EndOfRefreshCallback+0xfc>
    {
      LTDC_LAYER(&hltdc, index)->CFBAR  = LCD_Addr[index];
    }
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 800e30e:	4b39      	ldr	r3, [pc, #228]	; (800e3f4 <HAL_DSI_EndOfRefreshCallback+0x118>)
 800e310:	681a      	ldr	r2, [r3, #0]
 800e312:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e314:	f043 0301 	orr.w	r3, r3, #1
 800e318:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_DSI_WRAPPER_ENABLE(hdsi); 
 800e31a:	2500      	movs	r5, #0
 800e31c:	9503      	str	r5, [sp, #12]
 800e31e:	6822      	ldr	r2, [r4, #0]
 800e320:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800e324:	f043 0308 	orr.w	r3, r3, #8
 800e328:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 800e32c:	6823      	ldr	r3, [r4, #0]
 800e32e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e332:	f003 0308 	and.w	r3, r3, #8
 800e336:	9303      	str	r3, [sp, #12]
 800e338:	9b03      	ldr	r3, [sp, #12]
    LCD_SetUpdateRegion(0);
 800e33a:	4628      	mov	r0, r5
 800e33c:	f7ff ff8c 	bl	800e258 <LCD_SetUpdateRegion>
LCD_Refershing = 0;		
 800e340:	4b2d      	ldr	r3, [pc, #180]	; (800e3f8 <HAL_DSI_EndOfRefreshCallback+0x11c>)
 800e342:	621d      	str	r5, [r3, #32]
  }
}
 800e344:	b005      	add	sp, #20
 800e346:	bd30      	pop	{r4, r5, pc}
    __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800e348:	2300      	movs	r3, #0
 800e34a:	9300      	str	r3, [sp, #0]
 800e34c:	6801      	ldr	r1, [r0, #0]
 800e34e:	f8d1 2404 	ldr.w	r2, [r1, #1028]	; 0x404
 800e352:	f022 0208 	bic.w	r2, r2, #8
 800e356:	f8c1 2404 	str.w	r2, [r1, #1028]	; 0x404
 800e35a:	6802      	ldr	r2, [r0, #0]
 800e35c:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800e360:	f002 0208 	and.w	r2, r2, #8
 800e364:	9200      	str	r2, [sp, #0]
 800e366:	9a00      	ldr	r2, [sp, #0]
    for(index = 0; index < GUI_NUM_LAYERS; index ++)
 800e368:	b1fb      	cbz	r3, 800e3aa <HAL_DSI_EndOfRefreshCallback+0xce>
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 800e36a:	4b22      	ldr	r3, [pc, #136]	; (800e3f4 <HAL_DSI_EndOfRefreshCallback+0x118>)
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e370:	f043 0301 	orr.w	r3, r3, #1
 800e374:	6253      	str	r3, [r2, #36]	; 0x24
    __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800e376:	2300      	movs	r3, #0
 800e378:	9301      	str	r3, [sp, #4]
 800e37a:	6822      	ldr	r2, [r4, #0]
 800e37c:	f8d2 3404 	ldr.w	r3, [r2, #1028]	; 0x404
 800e380:	f043 0308 	orr.w	r3, r3, #8
 800e384:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
 800e388:	6823      	ldr	r3, [r4, #0]
 800e38a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e38e:	f003 0308 	and.w	r3, r3, #8
 800e392:	9301      	str	r3, [sp, #4]
 800e394:	9b01      	ldr	r3, [sp, #4]
    LCD_SetUpdateRegion(LCD_ActiveRegion++);
 800e396:	4b16      	ldr	r3, [pc, #88]	; (800e3f0 <HAL_DSI_EndOfRefreshCallback+0x114>)
 800e398:	6898      	ldr	r0, [r3, #8]
 800e39a:	1c42      	adds	r2, r0, #1
 800e39c:	609a      	str	r2, [r3, #8]
 800e39e:	f7ff ff5b 	bl	800e258 <LCD_SetUpdateRegion>
    HAL_DSI_Refresh(hdsi);
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f7f5 fab6 	bl	8003914 <HAL_DSI_Refresh>
 800e3a8:	e7cc      	b.n	800e344 <HAL_DSI_EndOfRefreshCallback+0x68>
      LTDC_LAYER(&hltdc, index)->CFBAR  = LCD_Addr[index] + LCD_ActiveRegion  * (layer_prop[0].xSize/ZONES) * layer_prop[0].BytesPerPixel;
 800e3aa:	4911      	ldr	r1, [pc, #68]	; (800e3f0 <HAL_DSI_EndOfRefreshCallback+0x114>)
 800e3ac:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800e3b0:	68d5      	ldr	r5, [r2, #12]
 800e3b2:	4811      	ldr	r0, [pc, #68]	; (800e3f8 <HAL_DSI_EndOfRefreshCallback+0x11c>)
 800e3b4:	6902      	ldr	r2, [r0, #16]
 800e3b6:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800e3ba:	1052      	asrs	r2, r2, #1
 800e3bc:	6889      	ldr	r1, [r1, #8]
 800e3be:	fb01 f202 	mul.w	r2, r1, r2
 800e3c2:	6980      	ldr	r0, [r0, #24]
 800e3c4:	490b      	ldr	r1, [pc, #44]	; (800e3f4 <HAL_DSI_EndOfRefreshCallback+0x118>)
 800e3c6:	6809      	ldr	r1, [r1, #0]
 800e3c8:	eb01 11c3 	add.w	r1, r1, r3, lsl #7
 800e3cc:	fb00 5202 	mla	r2, r0, r2, r5
 800e3d0:	f8c1 20ac 	str.w	r2, [r1, #172]	; 0xac
    for(index = 0; index < GUI_NUM_LAYERS; index ++)
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	e7c7      	b.n	800e368 <HAL_DSI_EndOfRefreshCallback+0x8c>
      LTDC_LAYER(&hltdc, index)->CFBAR  = LCD_Addr[index];
 800e3d8:	4a06      	ldr	r2, [pc, #24]	; (800e3f4 <HAL_DSI_EndOfRefreshCallback+0x118>)
 800e3da:	6812      	ldr	r2, [r2, #0]
 800e3dc:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
 800e3e0:	4903      	ldr	r1, [pc, #12]	; (800e3f0 <HAL_DSI_EndOfRefreshCallback+0x114>)
 800e3e2:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800e3e6:	68c9      	ldr	r1, [r1, #12]
 800e3e8:	f8c2 10ac 	str.w	r1, [r2, #172]	; 0xac
    for(index = 0; index < GUI_NUM_LAYERS; index ++)
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	e78c      	b.n	800e30a <HAL_DSI_EndOfRefreshCallback+0x2e>
 800e3f0:	20000058 	.word	0x20000058
 800e3f4:	20030644 	.word	0x20030644
 800e3f8:	2002e0c8 	.word	0x2002e0c8

0800e3fc <LCD_ReqTear>:
  * @brief  Request TE at scanline.
  * @param  None
  * @retval None
  */
void LCD_ReqTear(void)
{
 800e3fc:	b530      	push	{r4, r5, lr}
 800e3fe:	b083      	sub	sp, #12
  static uint8_t ScanLineParams[2];

  ScanLineParams[0] = 0x02;
 800e400:	4a0c      	ldr	r2, [pc, #48]	; (800e434 <LCD_ReqTear+0x38>)
 800e402:	2302      	movs	r3, #2
 800e404:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  ScanLineParams[1] = 0x15;
 800e408:	2515      	movs	r5, #21
 800e40a:	f882 5025 	strb.w	r5, [r2, #37]	; 0x25
  
  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);     
 800e40e:	4c0a      	ldr	r4, [pc, #40]	; (800e438 <LCD_ReqTear+0x3c>)
 800e410:	3224      	adds	r2, #36	; 0x24
 800e412:	9201      	str	r2, [sp, #4]
 800e414:	2244      	movs	r2, #68	; 0x44
 800e416:	9200      	str	r2, [sp, #0]
 800e418:	2239      	movs	r2, #57	; 0x39
 800e41a:	2100      	movs	r1, #0
 800e41c:	4620      	mov	r0, r4
 800e41e:	f7f5 fa9e 	bl	800395e <HAL_DSI_LongWrite>
  /* set_tear_on */
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);	
 800e422:	2100      	movs	r1, #0
 800e424:	9100      	str	r1, [sp, #0]
 800e426:	2335      	movs	r3, #53	; 0x35
 800e428:	462a      	mov	r2, r5
 800e42a:	4620      	mov	r0, r4
 800e42c:	f7f5 fa84 	bl	8003938 <HAL_DSI_ShortWrite>
	
}
 800e430:	b003      	add	sp, #12
 800e432:	bd30      	pop	{r4, r5, pc}
 800e434:	2002e0c8 	.word	0x2002e0c8
 800e438:	20030628 	.word	0x20030628

0800e43c <LCD_X_Config>:
  *         display driver configuration
  * @param  None
  * @retval None
  */
void LCD_X_Config(void) 
{
 800e43c:	b570      	push	{r4, r5, r6, lr}
 800e43e:	b084      	sub	sp, #16
  U32 i;

  /* At first initialize use of multiple buffers on demand */
#if (NUM_BUFFERS > 1)
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 800e440:	2400      	movs	r4, #0
 800e442:	2c00      	cmp	r4, #0
 800e444:	d07d      	beq.n	800e542 <LCD_X_Config+0x106>
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
  }
#endif

  /* Set display driver and color conversion for 1st layer */
  GUI_DEVICE_CreateAndLink(DISPLAY_DRIVER_0, COLOR_CONVERSION_0, 0, 0);
 800e446:	2300      	movs	r3, #0
 800e448:	461a      	mov	r2, r3
 800e44a:	4962      	ldr	r1, [pc, #392]	; (800e5d4 <LCD_X_Config+0x198>)
 800e44c:	4862      	ldr	r0, [pc, #392]	; (800e5d8 <LCD_X_Config+0x19c>)
 800e44e:	f002 fa35 	bl	80108bc <GUI_DEVICE_CreateAndLink>

  /* Set size of 1st layer */
  if (LCD_GetSwapXYEx(0)) {
 800e452:	2000      	movs	r0, #0
 800e454:	f004 ffce 	bl	80133f4 <LCD_GetSwapXYEx>
 800e458:	2800      	cmp	r0, #0
 800e45a:	d078      	beq.n	800e54e <LCD_X_Config+0x112>
    LCD_SetSizeEx (0, YSIZE_PHYS, XSIZE_PHYS);
 800e45c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e460:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800e464:	2000      	movs	r0, #0
 800e466:	f005 fdff 	bl	8014068 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, YSIZE_PHYS * NUM_VSCREENS, XSIZE_PHYS);
 800e46a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e46e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800e472:	2000      	movs	r0, #0
 800e474:	f005 fe2a 	bl	80140cc <LCD_SetVSizeEx>
    LCD_SetVSizeEx(1, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
  }
#endif

  /*Initialize GUI Layer structure */
  layer_prop[0].address = LCD_LAYER0_FRAME_BUFFER;
 800e478:	4b58      	ldr	r3, [pc, #352]	; (800e5dc <LCD_X_Config+0x1a0>)
 800e47a:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800e47e:	605a      	str	r2, [r3, #4]
#if (GUI_NUM_LAYERS > 1)    
  layer_prop[1].address = LCD_LAYER1_FRAME_BUFFER; 
#endif

  /* Setting up VRam address and custom functions for CopyBuffer-, CopyRect- and FillRect operations */
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 800e480:	2400      	movs	r4, #0
 800e482:	2c00      	cmp	r4, #0
 800e484:	d072      	beq.n	800e56c <LCD_X_Config+0x130>
    /* Set VRAM address */
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
  }
  // Set up custom color conversion using DMA2D, works only for direct color modes because of missing LUT for DMA2D destination
  
  GUICC_M1555I_SetCustColorConv(_Color2IndexBulk_M1555I_DMA2D, _Index2ColorBulk_M1555I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB1555
 800e486:	4956      	ldr	r1, [pc, #344]	; (800e5e0 <LCD_X_Config+0x1a4>)
 800e488:	4856      	ldr	r0, [pc, #344]	; (800e5e4 <LCD_X_Config+0x1a8>)
 800e48a:	f000 fc4f 	bl	800ed2c <GUICC_M1555I_SetCustColorConv>
  GUICC_M565_SetCustColorConv  (_Color2IndexBulk_M565_DMA2D,   _Index2ColorBulk_M565_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB565 (does not speed up conversion, default method is slightly faster!)
 800e48e:	4956      	ldr	r1, [pc, #344]	; (800e5e8 <LCD_X_Config+0x1ac>)
 800e490:	4856      	ldr	r0, [pc, #344]	; (800e5ec <LCD_X_Config+0x1b0>)
 800e492:	f000 fc73 	bl	800ed7c <GUICC_M565_SetCustColorConv>
  GUICC_M4444I_SetCustColorConv(_Color2IndexBulk_M4444I_DMA2D, _Index2ColorBulk_M4444I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB4444
 800e496:	4956      	ldr	r1, [pc, #344]	; (800e5f0 <LCD_X_Config+0x1b4>)
 800e498:	4856      	ldr	r0, [pc, #344]	; (800e5f4 <LCD_X_Config+0x1b8>)
 800e49a:	f000 fc4d 	bl	800ed38 <GUICC_M4444I_SetCustColorConv>
  GUICC_M888_SetCustColorConv  (_Color2IndexBulk_M888_DMA2D,   _Index2ColorBulk_M888_DMA2D);   // Set up custom bulk color conversion using DMA2D for RGB888
 800e49e:	4956      	ldr	r1, [pc, #344]	; (800e5f8 <LCD_X_Config+0x1bc>)
 800e4a0:	4856      	ldr	r0, [pc, #344]	; (800e5fc <LCD_X_Config+0x1c0>)
 800e4a2:	f000 fc71 	bl	800ed88 <GUICC_M888_SetCustColorConv>
  GUICC_M8888I_SetCustColorConv(_Color2IndexBulk_M8888I_DMA2D, _Index2ColorBulk_M8888I_DMA2D); // Set up custom bulk color conversion using DMA2D for ARGB8888
 800e4a6:	4956      	ldr	r1, [pc, #344]	; (800e600 <LCD_X_Config+0x1c4>)
 800e4a8:	4856      	ldr	r0, [pc, #344]	; (800e604 <LCD_X_Config+0x1c8>)
 800e4aa:	f000 fc65 	bl	800ed78 <GUICC_M8888I_SetCustColorConv>
 	
	GUI_SetFuncDrawAlpha(_LCD_DrawMemdevAlpha, _LCD_DrawBitmapAlpha);
 800e4ae:	4956      	ldr	r1, [pc, #344]	; (800e608 <LCD_X_Config+0x1cc>)
 800e4b0:	4856      	ldr	r0, [pc, #344]	; (800e60c <LCD_X_Config+0x1d0>)
 800e4b2:	f003 fdcd 	bl	8012050 <GUI_SetFuncDrawAlpha>
	__HAL_DSI_WRAPPER_DISABLE(&hdsi);
 800e4b6:	2400      	movs	r4, #0
 800e4b8:	9402      	str	r4, [sp, #8]
 800e4ba:	4d55      	ldr	r5, [pc, #340]	; (800e610 <LCD_X_Config+0x1d4>)
 800e4bc:	682b      	ldr	r3, [r5, #0]
 800e4be:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e4c2:	f022 0208 	bic.w	r2, r2, #8
 800e4c6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800e4ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4ce:	f003 0308 	and.w	r3, r3, #8
 800e4d2:	9302      	str	r3, [sp, #8]
 800e4d4:	9b02      	ldr	r3, [sp, #8]
  /* Update pitch : the draw is done on the whole physical X Size */
  HAL_LTDC_SetPitch(&hltdc, XSIZE_PHYS, 0);
 800e4d6:	4622      	mov	r2, r4
 800e4d8:	f44f 7148 	mov.w	r1, #800	; 0x320
 800e4dc:	484d      	ldr	r0, [pc, #308]	; (800e614 <LCD_X_Config+0x1d8>)
 800e4de:	f7f6 ff81 	bl	80053e4 <HAL_LTDC_SetPitch>
#if (GUI_NUM_LAYERS > 1)    
  HAL_LTDC_SetPitch(&hltdc, XSIZE_PHYS, 1);
#endif
__HAL_DSI_WRAPPER_ENABLE(&hdsi); 
 800e4e2:	9403      	str	r4, [sp, #12]
 800e4e4:	682b      	ldr	r3, [r5, #0]
 800e4e6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e4ea:	f042 0208 	orr.w	r2, r2, #8
 800e4ee:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800e4f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4f6:	f003 0308 	and.w	r3, r3, #8
 800e4fa:	9303      	str	r3, [sp, #12]
 800e4fc:	9b03      	ldr	r3, [sp, #12]
  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[0]);
 800e4fe:	4e46      	ldr	r6, [pc, #280]	; (800e618 <LCD_X_Config+0x1dc>)
 800e500:	9601      	str	r6, [sp, #4]
 800e502:	232a      	movs	r3, #42	; 0x2a
 800e504:	9300      	str	r3, [sp, #0]
 800e506:	2304      	movs	r3, #4
 800e508:	2239      	movs	r2, #57	; 0x39
 800e50a:	4621      	mov	r1, r4
 800e50c:	4628      	mov	r0, r5
 800e50e:	f7f5 fa26 	bl	800395e <HAL_DSI_LongWrite>
  HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_PASET, pPage);
 800e512:	3610      	adds	r6, #16
 800e514:	9601      	str	r6, [sp, #4]
 800e516:	232b      	movs	r3, #43	; 0x2b
 800e518:	9300      	str	r3, [sp, #0]
 800e51a:	2304      	movs	r3, #4
 800e51c:	2239      	movs	r2, #57	; 0x39
 800e51e:	4621      	mov	r1, r4
 800e520:	4628      	mov	r0, r5
 800e522:	f7f5 fa1c 	bl	800395e <HAL_DSI_LongWrite>
  HAL_Delay(20);
 800e526:	2014      	movs	r0, #20
 800e528:	f7f4 fa78 	bl	8002a1c <HAL_Delay>
  LCD_ReqTear();
 800e52c:	f7ff ff66 	bl	800e3fc <LCD_ReqTear>
  /* Send Display off DCS Command to display */
  HAL_DSI_ShortWrite(&(hdsi),
 800e530:	9400      	str	r4, [sp, #0]
 800e532:	2329      	movs	r3, #41	; 0x29
 800e534:	2215      	movs	r2, #21
 800e536:	4621      	mov	r1, r4
 800e538:	4628      	mov	r0, r5
 800e53a:	f7f5 f9fd 	bl	8003938 <HAL_DSI_ShortWrite>
                     0,
                     DSI_DCS_SHORT_PKT_WRITE_P1,
                     OTM8009A_CMD_DISPON,
                     0x00);
}
 800e53e:	b004      	add	sp, #16
 800e540:	bd70      	pop	{r4, r5, r6, pc}
    GUI_MULTIBUF_ConfigEx(i, NUM_BUFFERS);
 800e542:	2102      	movs	r1, #2
 800e544:	4620      	mov	r0, r4
 800e546:	f002 ffc3 	bl	80114d0 <GUI_MULTIBUF_ConfigEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 800e54a:	3401      	adds	r4, #1
 800e54c:	e779      	b.n	800e442 <LCD_X_Config+0x6>
    LCD_SetSizeEx (0, XSIZE_PHYS, YSIZE_PHYS);
 800e54e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e552:	f44f 7148 	mov.w	r1, #800	; 0x320
 800e556:	2000      	movs	r0, #0
 800e558:	f005 fd86 	bl	8014068 <LCD_SetSizeEx>
    LCD_SetVSizeEx(0, XSIZE_PHYS, YSIZE_PHYS * NUM_VSCREENS);
 800e55c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e560:	f44f 7148 	mov.w	r1, #800	; 0x320
 800e564:	2000      	movs	r0, #0
 800e566:	f005 fdb1 	bl	80140cc <LCD_SetVSizeEx>
 800e56a:	e785      	b.n	800e478 <LCD_X_Config+0x3c>
    layer_prop[i].pColorConvAPI = (LCD_API_COLOR_CONV *)apColorConvAPI[i];
 800e56c:	00e3      	lsls	r3, r4, #3
 800e56e:	1b1b      	subs	r3, r3, r4
 800e570:	009a      	lsls	r2, r3, #2
 800e572:	4d1a      	ldr	r5, [pc, #104]	; (800e5dc <LCD_X_Config+0x1a0>)
 800e574:	4415      	add	r5, r2
 800e576:	4b17      	ldr	r3, [pc, #92]	; (800e5d4 <LCD_X_Config+0x198>)
 800e578:	61eb      	str	r3, [r5, #28]
    layer_prop[i].pending_buffer = -1;
 800e57a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e57e:	60ab      	str	r3, [r5, #8]
    layer_prop[i].BytesPerPixel = LCD_GetBitsPerPixelEx(i) >> 3;
 800e580:	4620      	mov	r0, r4
 800e582:	f004 fef7 	bl	8013374 <LCD_GetBitsPerPixelEx>
 800e586:	10c0      	asrs	r0, r0, #3
 800e588:	61a8      	str	r0, [r5, #24]
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYBUFFER, (void(*)(void))LCD_LL_CopyBuffer);
 800e58a:	4a24      	ldr	r2, [pc, #144]	; (800e61c <LCD_X_Config+0x1e0>)
 800e58c:	2121      	movs	r1, #33	; 0x21
 800e58e:	4620      	mov	r0, r4
 800e590:	f005 fd1c 	bl	8013fcc <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_COPYRECT,   (void(*)(void))LCD_LL_CopyRect);
 800e594:	4a22      	ldr	r2, [pc, #136]	; (800e620 <LCD_X_Config+0x1e4>)
 800e596:	2123      	movs	r1, #35	; 0x23
 800e598:	4620      	mov	r0, r4
 800e59a:	f005 fd17 	bl	8013fcc <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_FILLRECT, (void(*)(void))LCD_LL_FillRect);
 800e59e:	4a21      	ldr	r2, [pc, #132]	; (800e624 <LCD_X_Config+0x1e8>)
 800e5a0:	2119      	movs	r1, #25
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	f005 fd12 	bl	8013fcc <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_8BPP, (void(*)(void))LCD_LL_DrawBitmap8bpp);
 800e5a8:	4a1f      	ldr	r2, [pc, #124]	; (800e628 <LCD_X_Config+0x1ec>)
 800e5aa:	2125      	movs	r1, #37	; 0x25
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	f005 fd0d 	bl	8013fcc <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_16BPP, (void(*)(void))LCD_LL_DrawBitmap16bpp);  
 800e5b2:	4a1e      	ldr	r2, [pc, #120]	; (800e62c <LCD_X_Config+0x1f0>)
 800e5b4:	2124      	movs	r1, #36	; 0x24
 800e5b6:	4620      	mov	r0, r4
 800e5b8:	f005 fd08 	bl	8013fcc <LCD_SetDevFunc>
    LCD_SetDevFunc(i, LCD_DEVFUNC_DRAWBMP_32BPP, (void(*)(void))LCD_LL_DrawBitmap32bpp);
 800e5bc:	4a1c      	ldr	r2, [pc, #112]	; (800e630 <LCD_X_Config+0x1f4>)
 800e5be:	2128      	movs	r1, #40	; 0x28
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	f005 fd03 	bl	8013fcc <LCD_SetDevFunc>
    LCD_SetVRAMAddrEx(i, (void *)(layer_prop[i].address));
 800e5c6:	6869      	ldr	r1, [r5, #4]
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	f005 fd67 	bl	801409c <LCD_SetVRAMAddrEx>
  for (i = 0; i < GUI_NUM_LAYERS; i++) 
 800e5ce:	3401      	adds	r4, #1
 800e5d0:	e757      	b.n	800e482 <LCD_X_Config+0x46>
 800e5d2:	bf00      	nop
 800e5d4:	08026304 	.word	0x08026304
 800e5d8:	080263b8 	.word	0x080263b8
 800e5dc:	2002e0c8 	.word	0x2002e0c8
 800e5e0:	0800dd1d 	.word	0x0800dd1d
 800e5e4:	0800dd81 	.word	0x0800dd81
 800e5e8:	0800dd0d 	.word	0x0800dd0d
 800e5ec:	0800dd71 	.word	0x0800dd71
 800e5f0:	0800dcfd 	.word	0x0800dcfd
 800e5f4:	0800dd61 	.word	0x0800dd61
 800e5f8:	0800dced 	.word	0x0800dced
 800e5fc:	0800dd51 	.word	0x0800dd51
 800e600:	0800dcdd 	.word	0x0800dcdd
 800e604:	0800dd41 	.word	0x0800dd41
 800e608:	0800df21 	.word	0x0800df21
 800e60c:	0800df99 	.word	0x0800df99
 800e610:	20030628 	.word	0x20030628
 800e614:	20030644 	.word	0x20030644
 800e618:	20000058 	.word	0x20000058
 800e61c:	0800ddbd 	.word	0x0800ddbd
 800e620:	0800de05 	.word	0x0800de05
 800e624:	0800e11d 	.word	0x0800e11d
 800e628:	0800e0b1 	.word	0x0800e0b1
 800e62c:	0800dfcd 	.word	0x0800dfcd
 800e630:	0800e039 	.word	0x0800e039

0800e634 <LCD_X_DisplayDriver>:
  * @param  Cmd       :Please refer to the details in the switch statement below
  * @param  pData     :Pointer to a LCD_X_DATA structure
  * @retval Status (-1 : Error,  0 : Ok)
  */
int LCD_X_DisplayDriver(unsigned LayerIndex, unsigned Cmd, void * pData) 
{
 800e634:	b570      	push	{r4, r5, r6, lr}
 800e636:	b088      	sub	sp, #32
 800e638:	4604      	mov	r4, r0
 800e63a:	4615      	mov	r5, r2
  U32 addr;
  int xPos, yPos;
  U32 Color;

  //LCD_X_SHOWBUFFER_INFO * p;  
  switch (Cmd) 
 800e63c:	3903      	subs	r1, #3
 800e63e:	290b      	cmp	r1, #11
 800e640:	f200 8119 	bhi.w	800e876 <LCD_X_DisplayDriver+0x242>
 800e644:	e8df f011 	tbh	[pc, r1, lsl #1]
 800e648:	0117000c 	.word	0x0117000c
 800e64c:	0073006b 	.word	0x0073006b
 800e650:	00d600de 	.word	0x00d600de
 800e654:	00f3007b 	.word	0x00f3007b
 800e658:	00fa0117 	.word	0x00fa0117
 800e65c:	00210107 	.word	0x00210107
  {   
  case LCD_X_SETORG: 
    addr = layer_prop[LayerIndex].address + ((LCD_X_SETORG_INFO *)pData)->yPos * layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].BytesPerPixel;
 800e660:	00c2      	lsls	r2, r0, #3
 800e662:	1a12      	subs	r2, r2, r0
 800e664:	0091      	lsls	r1, r2, #2
 800e666:	4b85      	ldr	r3, [pc, #532]	; (800e87c <LCD_X_DisplayDriver+0x248>)
 800e668:	440b      	add	r3, r1
 800e66a:	685e      	ldr	r6, [r3, #4]
 800e66c:	6868      	ldr	r0, [r5, #4]
 800e66e:	691a      	ldr	r2, [r3, #16]
 800e670:	fb02 f000 	mul.w	r0, r2, r0
 800e674:	6999      	ldr	r1, [r3, #24]
    HAL_LTDC_SetAddress(&hltdc, addr, LayerIndex);
 800e676:	4622      	mov	r2, r4
 800e678:	fb01 6100 	mla	r1, r1, r0, r6
 800e67c:	4880      	ldr	r0, [pc, #512]	; (800e880 <LCD_X_DisplayDriver+0x24c>)
 800e67e:	f7f6 fe8f 	bl	80053a0 <HAL_LTDC_SetAddress>
  int r = 0;
 800e682:	2500      	movs	r5, #0

  default:
    r = -1;
  }
  return r;
}
 800e684:	4628      	mov	r0, r5
 800e686:	b008      	add	sp, #32
 800e688:	bd70      	pop	{r4, r5, r6, pc}
             __DSI_UNMASK_TE();
 800e68a:	4a7e      	ldr	r2, [pc, #504]	; (800e884 <LCD_X_DisplayDriver+0x250>)
 800e68c:	6a13      	ldr	r3, [r2, #32]
 800e68e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800e692:	6213      	str	r3, [r2, #32]
       LCD_Refershing = 1;
 800e694:	4b79      	ldr	r3, [pc, #484]	; (800e87c <LCD_X_DisplayDriver+0x248>)
 800e696:	2201      	movs	r2, #1
 800e698:	621a      	str	r2, [r3, #32]
       while(LCD_Refershing);
 800e69a:	4b78      	ldr	r3, [pc, #480]	; (800e87c <LCD_X_DisplayDriver+0x248>)
 800e69c:	6a1b      	ldr	r3, [r3, #32]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d1fb      	bne.n	800e69a <LCD_X_DisplayDriver+0x66>
      LCD_Addr[LayerIndex] = layer_prop[LayerIndex].address + layer_prop[LayerIndex].xSize * layer_prop[LayerIndex].ySize * layer_prop[LayerIndex].BytesPerPixel * p->Index;
 800e6a2:	00e2      	lsls	r2, r4, #3
 800e6a4:	1b12      	subs	r2, r2, r4
 800e6a6:	0091      	lsls	r1, r2, #2
 800e6a8:	4b74      	ldr	r3, [pc, #464]	; (800e87c <LCD_X_DisplayDriver+0x248>)
 800e6aa:	440b      	add	r3, r1
 800e6ac:	6858      	ldr	r0, [r3, #4]
 800e6ae:	691a      	ldr	r2, [r3, #16]
 800e6b0:	6959      	ldr	r1, [r3, #20]
 800e6b2:	fb01 f202 	mul.w	r2, r1, r2
 800e6b6:	6999      	ldr	r1, [r3, #24]
 800e6b8:	fb01 f102 	mul.w	r1, r1, r2
 800e6bc:	682a      	ldr	r2, [r5, #0]
 800e6be:	fb02 0201 	mla	r2, r2, r1, r0
 800e6c2:	4971      	ldr	r1, [pc, #452]	; (800e888 <LCD_X_DisplayDriver+0x254>)
 800e6c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e6c8:	60ca      	str	r2, [r1, #12]
      layer_prop[LayerIndex].pending_buffer = p->Index;
 800e6ca:	6829      	ldr	r1, [r5, #0]
 800e6cc:	6099      	str	r1, [r3, #8]
     __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 800e6ce:	2500      	movs	r5, #0
 800e6d0:	9500      	str	r5, [sp, #0]
 800e6d2:	4b6e      	ldr	r3, [pc, #440]	; (800e88c <LCD_X_DisplayDriver+0x258>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 800e6da:	f021 0108 	bic.w	r1, r1, #8
 800e6de:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
 800e6e2:	f8d3 1404 	ldr.w	r1, [r3, #1028]	; 0x404
 800e6e6:	f001 0108 	and.w	r1, r1, #8
 800e6ea:	9100      	str	r1, [sp, #0]
 800e6ec:	9900      	ldr	r1, [sp, #0]
      LTDC_LAYER(&hltdc, LayerIndex)->CFBAR  = LCD_Addr[LayerIndex];
 800e6ee:	4964      	ldr	r1, [pc, #400]	; (800e880 <LCD_X_DisplayDriver+0x24c>)
 800e6f0:	6809      	ldr	r1, [r1, #0]
 800e6f2:	eb01 14c4 	add.w	r4, r1, r4, lsl #7
 800e6f6:	f8c4 20ac 	str.w	r2, [r4, #172]	; 0xac
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);
 800e6fa:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800e6fc:	f042 0201 	orr.w	r2, r2, #1
 800e700:	624a      	str	r2, [r1, #36]	; 0x24
    __HAL_DSI_WRAPPER_ENABLE(&hdsi);  	
 800e702:	9501      	str	r5, [sp, #4]
 800e704:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e708:	f042 0208 	orr.w	r2, r2, #8
 800e70c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800e710:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e714:	f003 0308 	and.w	r3, r3, #8
 800e718:	9301      	str	r3, [sp, #4]
 800e71a:	9b01      	ldr	r3, [sp, #4]
    break;
 800e71c:	e7b2      	b.n	800e684 <LCD_X_DisplayDriver+0x50>
    __HAL_LTDC_ENABLE(&hltdc);
 800e71e:	4b58      	ldr	r3, [pc, #352]	; (800e880 <LCD_X_DisplayDriver+0x24c>)
 800e720:	681a      	ldr	r2, [r3, #0]
 800e722:	6993      	ldr	r3, [r2, #24]
 800e724:	f043 0301 	orr.w	r3, r3, #1
 800e728:	6193      	str	r3, [r2, #24]
  int r = 0;
 800e72a:	2500      	movs	r5, #0
    break;
 800e72c:	e7aa      	b.n	800e684 <LCD_X_DisplayDriver+0x50>
    __HAL_LTDC_DISABLE(&hltdc);
 800e72e:	4b54      	ldr	r3, [pc, #336]	; (800e880 <LCD_X_DisplayDriver+0x24c>)
 800e730:	681a      	ldr	r2, [r3, #0]
 800e732:	6993      	ldr	r3, [r2, #24]
 800e734:	f023 0301 	bic.w	r3, r3, #1
 800e738:	6193      	str	r3, [r2, #24]
  int r = 0;
 800e73a:	2500      	movs	r5, #0
    break;
 800e73c:	e7a2      	b.n	800e684 <LCD_X_DisplayDriver+0x50>
    if(((LCD_X_SETVIS_INFO *)pData)->OnOff  == ENABLE )
 800e73e:	6813      	ldr	r3, [r2, #0]
 800e740:	2b01      	cmp	r3, #1
 800e742:	d030      	beq.n	800e7a6 <LCD_X_DisplayDriver+0x172>
      __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 800e744:	2000      	movs	r0, #0
 800e746:	9004      	str	r0, [sp, #16]
 800e748:	4950      	ldr	r1, [pc, #320]	; (800e88c <LCD_X_DisplayDriver+0x258>)
 800e74a:	680b      	ldr	r3, [r1, #0]
 800e74c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e750:	f022 0208 	bic.w	r2, r2, #8
 800e754:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800e758:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e75c:	f002 0208 	and.w	r2, r2, #8
 800e760:	9204      	str	r2, [sp, #16]
 800e762:	9a04      	ldr	r2, [sp, #16]
      __HAL_LTDC_LAYER_DISABLE(&hdsi, LayerIndex); 
 800e764:	eb03 14c4 	add.w	r4, r3, r4, lsl #7
 800e768:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e76c:	f023 0301 	bic.w	r3, r3, #1
 800e770:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 800e774:	9005      	str	r0, [sp, #20]
 800e776:	680b      	ldr	r3, [r1, #0]
 800e778:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e77c:	f042 0208 	orr.w	r2, r2, #8
 800e780:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800e784:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e788:	f003 0308 	and.w	r3, r3, #8
 800e78c:	9305      	str	r3, [sp, #20]
 800e78e:	9b05      	ldr	r3, [sp, #20]
    __HAL_LTDC_RELOAD_CONFIG(&hltdc);  
 800e790:	4b3b      	ldr	r3, [pc, #236]	; (800e880 <LCD_X_DisplayDriver+0x24c>)
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800e796:	f043 0301 	orr.w	r3, r3, #1
 800e79a:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_DSI_Refresh(&hdsi); 
 800e79c:	483b      	ldr	r0, [pc, #236]	; (800e88c <LCD_X_DisplayDriver+0x258>)
 800e79e:	f7f5 f8b9 	bl	8003914 <HAL_DSI_Refresh>
  int r = 0;
 800e7a2:	2500      	movs	r5, #0
    break;
 800e7a4:	e76e      	b.n	800e684 <LCD_X_DisplayDriver+0x50>
      __HAL_DSI_WRAPPER_DISABLE(&hdsi);
 800e7a6:	2000      	movs	r0, #0
 800e7a8:	9002      	str	r0, [sp, #8]
 800e7aa:	4938      	ldr	r1, [pc, #224]	; (800e88c <LCD_X_DisplayDriver+0x258>)
 800e7ac:	680b      	ldr	r3, [r1, #0]
 800e7ae:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e7b2:	f022 0208 	bic.w	r2, r2, #8
 800e7b6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800e7ba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e7be:	f002 0208 	and.w	r2, r2, #8
 800e7c2:	9202      	str	r2, [sp, #8]
 800e7c4:	9a02      	ldr	r2, [sp, #8]
      __HAL_LTDC_LAYER_ENABLE(&hdsi, LayerIndex); 
 800e7c6:	eb03 14c4 	add.w	r4, r3, r4, lsl #7
 800e7ca:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800e7ce:	f043 0301 	orr.w	r3, r3, #1
 800e7d2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_DSI_WRAPPER_ENABLE(&hdsi);
 800e7d6:	9003      	str	r0, [sp, #12]
 800e7d8:	680b      	ldr	r3, [r1, #0]
 800e7da:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e7de:	f042 0208 	orr.w	r2, r2, #8
 800e7e2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800e7e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e7ea:	f003 0308 	and.w	r3, r3, #8
 800e7ee:	9303      	str	r3, [sp, #12]
 800e7f0:	9b03      	ldr	r3, [sp, #12]
 800e7f2:	e7cd      	b.n	800e790 <LCD_X_DisplayDriver+0x15c>
    HAL_LTDC_SetWindowPosition(&hltdc, 
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	6852      	ldr	r2, [r2, #4]
 800e7f8:	6829      	ldr	r1, [r5, #0]
 800e7fa:	4821      	ldr	r0, [pc, #132]	; (800e880 <LCD_X_DisplayDriver+0x24c>)
 800e7fc:	f7f6 fd86 	bl	800530c <HAL_LTDC_SetWindowPosition>
  int r = 0;
 800e800:	2500      	movs	r5, #0
    break;
 800e802:	e73f      	b.n	800e684 <LCD_X_DisplayDriver+0x50>
    GUI_GetLayerPosEx(LayerIndex, &xPos, &yPos);
 800e804:	aa06      	add	r2, sp, #24
 800e806:	a907      	add	r1, sp, #28
 800e808:	f002 feb6 	bl	8011578 <GUI_GetLayerPosEx>
    layer_prop[LayerIndex].xSize = ((LCD_X_SETSIZE_INFO *)pData)->xSize;
 800e80c:	6828      	ldr	r0, [r5, #0]
 800e80e:	00e2      	lsls	r2, r4, #3
 800e810:	1b12      	subs	r2, r2, r4
 800e812:	0091      	lsls	r1, r2, #2
 800e814:	4b19      	ldr	r3, [pc, #100]	; (800e87c <LCD_X_DisplayDriver+0x248>)
 800e816:	440b      	add	r3, r1
 800e818:	6118      	str	r0, [r3, #16]
    layer_prop[LayerIndex].ySize = ((LCD_X_SETSIZE_INFO *)pData)->ySize;
 800e81a:	686a      	ldr	r2, [r5, #4]
 800e81c:	615a      	str	r2, [r3, #20]
    HAL_LTDC_SetWindowPosition(&hltdc, xPos, yPos, LayerIndex);
 800e81e:	4623      	mov	r3, r4
 800e820:	9a06      	ldr	r2, [sp, #24]
 800e822:	9907      	ldr	r1, [sp, #28]
 800e824:	4816      	ldr	r0, [pc, #88]	; (800e880 <LCD_X_DisplayDriver+0x24c>)
 800e826:	f7f6 fd71 	bl	800530c <HAL_LTDC_SetWindowPosition>
  int r = 0;
 800e82a:	2500      	movs	r5, #0
    break;
 800e82c:	e72a      	b.n	800e684 <LCD_X_DisplayDriver+0x50>
    HAL_LTDC_SetAlpha(&hltdc, ((LCD_X_SETALPHA_INFO *)pData)->Alpha, LayerIndex);
 800e82e:	4602      	mov	r2, r0
 800e830:	6829      	ldr	r1, [r5, #0]
 800e832:	4813      	ldr	r0, [pc, #76]	; (800e880 <LCD_X_DisplayDriver+0x24c>)
 800e834:	f7f6 fd93 	bl	800535e <HAL_LTDC_SetAlpha>
  int r = 0;
 800e838:	2500      	movs	r5, #0
    break;
 800e83a:	e723      	b.n	800e684 <LCD_X_DisplayDriver+0x50>
    if(((LCD_X_SETCHROMAMODE_INFO *)pData)->ChromaMode != 0)
 800e83c:	6815      	ldr	r5, [r2, #0]
 800e83e:	b12d      	cbz	r5, 800e84c <LCD_X_DisplayDriver+0x218>
      HAL_LTDC_EnableColorKeying(&hltdc, LayerIndex);
 800e840:	4601      	mov	r1, r0
 800e842:	480f      	ldr	r0, [pc, #60]	; (800e880 <LCD_X_DisplayDriver+0x24c>)
 800e844:	f7f6 fd26 	bl	8005294 <HAL_LTDC_EnableColorKeying>
  int r = 0;
 800e848:	2500      	movs	r5, #0
 800e84a:	e71b      	b.n	800e684 <LCD_X_DisplayDriver+0x50>
      HAL_LTDC_DisableColorKeying(&hltdc, LayerIndex);      
 800e84c:	4601      	mov	r1, r0
 800e84e:	480c      	ldr	r0, [pc, #48]	; (800e880 <LCD_X_DisplayDriver+0x24c>)
 800e850:	f7f6 fd3e 	bl	80052d0 <HAL_LTDC_DisableColorKeying>
 800e854:	e716      	b.n	800e684 <LCD_X_DisplayDriver+0x50>
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800e856:	6813      	ldr	r3, [r2, #0]
 800e858:	f3c3 4107 	ubfx	r1, r3, #16, #8
             (((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x00FF00) |\
 800e85c:	f403 427f 	and.w	r2, r3, #65280	; 0xff00
    Color = ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0xFF0000) >> 16) |\
 800e860:	4311      	orrs	r1, r2
            ((((LCD_X_SETCHROMA_INFO *)pData)->ChromaMin & 0x0000FF) << 16);
 800e862:	041b      	lsls	r3, r3, #16
 800e864:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    HAL_LTDC_ConfigColorKeying(&hltdc, Color, LayerIndex);
 800e868:	4602      	mov	r2, r0
 800e86a:	4319      	orrs	r1, r3
 800e86c:	4804      	ldr	r0, [pc, #16]	; (800e880 <LCD_X_DisplayDriver+0x24c>)
 800e86e:	f7f6 fced 	bl	800524c <HAL_LTDC_ConfigColorKeying>
  int r = 0;
 800e872:	2500      	movs	r5, #0
    break;
 800e874:	e706      	b.n	800e684 <LCD_X_DisplayDriver+0x50>
    r = -1;
 800e876:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  return r;
 800e87a:	e703      	b.n	800e684 <LCD_X_DisplayDriver+0x50>
 800e87c:	2002e0c8 	.word	0x2002e0c8
 800e880:	20030644 	.word	0x20030644
 800e884:	40022400 	.word	0x40022400
 800e888:	20000058 	.word	0x20000058
 800e88c:	20030628 	.word	0x20030628

0800e890 <GRAPHICS_HW_Init>:

void GRAPHICS_HW_Init(void)
{ 
 800e890:	b508      	push	{r3, lr}
  MX_FMC_Init(); 
 800e892:	f7fe ff61 	bl	800d758 <MX_FMC_Init>
  MX_SDRAM_InitEx();
 800e896:	f7fe ff91 	bl	800d7bc <MX_SDRAM_InitEx>
  LCD_LL_Reset();
 800e89a:	f7ff fc8f 	bl	800e1bc <LCD_LL_Reset>
  MX_LCD_Init();      /* LTDC struc, layer struct */
 800e89e:	f7fe ff05 	bl	800d6ac <MX_LCD_Init>
  MX_DMA2D_Init();
 800e8a2:	f7fe fee3 	bl	800d66c <MX_DMA2D_Init>
  DMA2D_Init();
 800e8a6:	f7ff fcbf 	bl	800e228 <DMA2D_Init>
  MX_DSI_Init();
 800e8aa:	f7fe ffdb 	bl	800d864 <MX_DSI_Init>
}
 800e8ae:	bd08      	pop	{r3, pc}

0800e8b0 <GRAPHICS_Init>:

void GRAPHICS_Init(void)
{
 800e8b0:	b508      	push	{r3, lr}
  /* Initialize the GUI */
  GUI_Init();
 800e8b2:	f001 feb1 	bl	8010618 <GUI_Init>

   WM_MULTIBUF_Enable(1);
 800e8b6:	2001      	movs	r0, #1
 800e8b8:	f00a fdba 	bl	8019430 <WM_MULTIBUF_Enable>

  /* Activate the use of memory device feature */
   /* USER CODE BEGIN WM_SetCreateFlags */
     //WM_SetCreateFlags(WM_CF_MEMDEV);
  /* USER CODE END WM_SetCreateFlags */
}
 800e8bc:	bd08      	pop	{r3, pc}
	...

0800e8c0 <I2C1_MspInit>:
/******************************* I2C Routines *********************************/
/**
  * @brief  Initializes I2C MSP.
  */
static void I2C1_MspInit(void)
{
 800e8c0:	b570      	push	{r4, r5, r6, lr}
 800e8c2:	b088      	sub	sp, #32
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCO_I2C1_SCL_SDA_GPIO_CLK_ENABLE();
 800e8c4:	2500      	movs	r5, #0
 800e8c6:	9501      	str	r5, [sp, #4]
 800e8c8:	4c21      	ldr	r4, [pc, #132]	; (800e950 <I2C1_MspInit+0x90>)
 800e8ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e8cc:	f043 0302 	orr.w	r3, r3, #2
 800e8d0:	6323      	str	r3, [r4, #48]	; 0x30
 800e8d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e8d4:	f003 0302 	and.w	r3, r3, #2
 800e8d8:	9301      	str	r3, [sp, #4]
 800e8da:	9b01      	ldr	r3, [sp, #4]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C1_SCL_PIN;
 800e8dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e8e0:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800e8e2:	2312      	movs	r3, #18
 800e8e4:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800e8e6:	9505      	str	r5, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800e8e8:	2302      	movs	r3, #2
 800e8ea:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Alternate = DISCO_I2C1_SCL_SDA_AF;
 800e8ec:	2304      	movs	r3, #4
 800e8ee:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800e8f0:	4e18      	ldr	r6, [pc, #96]	; (800e954 <I2C1_MspInit+0x94>)
 800e8f2:	a903      	add	r1, sp, #12
 800e8f4:	4630      	mov	r0, r6
 800e8f6:	f7f5 f8a3 	bl	8003a40 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin = DISCO_I2C1_SDA_PIN;
 800e8fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e8fe:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(DISCO_I2C1_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800e900:	a903      	add	r1, sp, #12
 800e902:	4630      	mov	r0, r6
 800e904:	f7f5 f89c 	bl	8003a40 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCO_I2C1_CLK_ENABLE();
 800e908:	9502      	str	r5, [sp, #8]
 800e90a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e90c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e910:	6423      	str	r3, [r4, #64]	; 0x40
 800e912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e918:	9302      	str	r3, [sp, #8]
 800e91a:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  DISCO_I2C1_FORCE_RESET();
 800e91c:	6a23      	ldr	r3, [r4, #32]
 800e91e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e922:	6223      	str	r3, [r4, #32]

  /* Release the I2C peripheral clock reset */
  DISCO_I2C1_RELEASE_RESET();
 800e924:	6a23      	ldr	r3, [r4, #32]
 800e926:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e92a:	6223      	str	r3, [r4, #32]

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C1_EV_IRQn, 0x05, 0);
 800e92c:	462a      	mov	r2, r5
 800e92e:	2105      	movs	r1, #5
 800e930:	201f      	movs	r0, #31
 800e932:	f7f4 f899 	bl	8002a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_EV_IRQn);
 800e936:	201f      	movs	r0, #31
 800e938:	f7f4 f8ca 	bl	8002ad0 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2C1 Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCO_I2C1_ER_IRQn, 0x05, 0);
 800e93c:	462a      	mov	r2, r5
 800e93e:	2105      	movs	r1, #5
 800e940:	2020      	movs	r0, #32
 800e942:	f7f4 f891 	bl	8002a68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCO_I2C1_ER_IRQn);
 800e946:	2020      	movs	r0, #32
 800e948:	f7f4 f8c2 	bl	8002ad0 <HAL_NVIC_EnableIRQ>
}
 800e94c:	b008      	add	sp, #32
 800e94e:	bd70      	pop	{r4, r5, r6, pc}
 800e950:	40023800 	.word	0x40023800
 800e954:	40020400 	.word	0x40020400

0800e958 <I2C1_Init>:

/**
  * @brief  Initializes I2C HAL.
  */
static void I2C1_Init(void)
{
 800e958:	b510      	push	{r4, lr}
  if(HAL_I2C_GetState(&heval_I2c1) == HAL_I2C_STATE_RESET)
 800e95a:	480d      	ldr	r0, [pc, #52]	; (800e990 <I2C1_Init+0x38>)
 800e95c:	f7f6 fa86 	bl	8004e6c <HAL_I2C_GetState>
 800e960:	b100      	cbz	r0, 800e964 <I2C1_Init+0xc>

    /* Init the I2C */
    I2C1_MspInit();
    HAL_I2C_Init(&heval_I2c1);
  }
}
 800e962:	bd10      	pop	{r4, pc}
    heval_I2c1.Instance = I2C1;
 800e964:	4c0b      	ldr	r4, [pc, #44]	; (800e994 <I2C1_Init+0x3c>)
 800e966:	4b0c      	ldr	r3, [pc, #48]	; (800e998 <I2C1_Init+0x40>)
 800e968:	6563      	str	r3, [r4, #84]	; 0x54
    heval_I2c1.Init.ClockSpeed      = I2C1_SCL_FREQ_KHZ;
 800e96a:	4b0c      	ldr	r3, [pc, #48]	; (800e99c <I2C1_Init+0x44>)
 800e96c:	65a3      	str	r3, [r4, #88]	; 0x58
    heval_I2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
 800e96e:	2300      	movs	r3, #0
 800e970:	65e3      	str	r3, [r4, #92]	; 0x5c
    heval_I2c1.Init.OwnAddress1     = 0;
 800e972:	6623      	str	r3, [r4, #96]	; 0x60
    heval_I2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 800e974:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e978:	6662      	str	r2, [r4, #100]	; 0x64
    heval_I2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800e97a:	66a3      	str	r3, [r4, #104]	; 0x68
    heval_I2c1.Init.OwnAddress2     = 0;
 800e97c:	66e3      	str	r3, [r4, #108]	; 0x6c
    heval_I2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800e97e:	6723      	str	r3, [r4, #112]	; 0x70
    heval_I2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 800e980:	6763      	str	r3, [r4, #116]	; 0x74
    I2C1_MspInit();
 800e982:	f7ff ff9d 	bl	800e8c0 <I2C1_MspInit>
    HAL_I2C_Init(&heval_I2c1);
 800e986:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800e98a:	f7f5 fd3d 	bl	8004408 <HAL_I2C_Init>
}
 800e98e:	e7e8      	b.n	800e962 <I2C1_Init+0xa>
 800e990:	2002e144 	.word	0x2002e144
 800e994:	2002e0f0 	.word	0x2002e0f0
 800e998:	40005400 	.word	0x40005400
 800e99c:	00061a80 	.word	0x00061a80

0800e9a0 <I2C1_Error>:
/**
  * @brief  Manages error callback by re-initializing I2C.
  * @param  Addr: I2C Address
  */
static void I2C1_Error(uint8_t Addr)
{
 800e9a0:	b508      	push	{r3, lr}
  /* De-initialize the I2C comunication bus */
  HAL_I2C_DeInit(&heval_I2c1);
 800e9a2:	4803      	ldr	r0, [pc, #12]	; (800e9b0 <I2C1_Error+0x10>)
 800e9a4:	f7f5 fe0a 	bl	80045bc <HAL_I2C_DeInit>

  /* Re-Initiaize the I2C comunication bus */
  I2C1_Init();
 800e9a8:	f7ff ffd6 	bl	800e958 <I2C1_Init>
}
 800e9ac:	bd08      	pop	{r3, pc}
 800e9ae:	bf00      	nop
 800e9b0:	2002e144 	.word	0x2002e144

0800e9b4 <I2C1_Write>:
{
 800e9b4:	b510      	push	{r4, lr}
 800e9b6:	b086      	sub	sp, #24
 800e9b8:	4604      	mov	r4, r0
 800e9ba:	a806      	add	r0, sp, #24
 800e9bc:	f800 2d01 	strb.w	r2, [r0, #-1]!
  status = HAL_I2C_Mem_Write(&heval_I2c1,
 800e9c0:	2364      	movs	r3, #100	; 0x64
 800e9c2:	9302      	str	r3, [sp, #8]
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	9301      	str	r3, [sp, #4]
 800e9c8:	9000      	str	r0, [sp, #0]
 800e9ca:	460a      	mov	r2, r1
 800e9cc:	4621      	mov	r1, r4
 800e9ce:	4805      	ldr	r0, [pc, #20]	; (800e9e4 <I2C1_Write+0x30>)
 800e9d0:	f7f6 f830 	bl	8004a34 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800e9d4:	b908      	cbnz	r0, 800e9da <I2C1_Write+0x26>
}
 800e9d6:	b006      	add	sp, #24
 800e9d8:	bd10      	pop	{r4, pc}
    I2C1_Error(Addr);
 800e9da:	4620      	mov	r0, r4
 800e9dc:	f7ff ffe0 	bl	800e9a0 <I2C1_Error>
}
 800e9e0:	e7f9      	b.n	800e9d6 <I2C1_Write+0x22>
 800e9e2:	bf00      	nop
 800e9e4:	2002e144 	.word	0x2002e144

0800e9e8 <I2C1_ReadMultiple>:
{
 800e9e8:	b530      	push	{r4, r5, lr}
 800e9ea:	b085      	sub	sp, #20
 800e9ec:	4604      	mov	r4, r0
  status = HAL_I2C_Mem_Read(&heval_I2c1,
 800e9ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e9f2:	9002      	str	r0, [sp, #8]
 800e9f4:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800e9f8:	9001      	str	r0, [sp, #4]
 800e9fa:	9300      	str	r3, [sp, #0]
 800e9fc:	4613      	mov	r3, r2
 800e9fe:	460a      	mov	r2, r1
 800ea00:	4621      	mov	r1, r4
 800ea02:	4806      	ldr	r0, [pc, #24]	; (800ea1c <I2C1_ReadMultiple+0x34>)
 800ea04:	f7f6 f8ca 	bl	8004b9c <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800ea08:	4605      	mov	r5, r0
 800ea0a:	b910      	cbnz	r0, 800ea12 <I2C1_ReadMultiple+0x2a>
}
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	b005      	add	sp, #20
 800ea10:	bd30      	pop	{r4, r5, pc}
    I2C1_Error(Addr);
 800ea12:	4620      	mov	r0, r4
 800ea14:	f7ff ffc4 	bl	800e9a0 <I2C1_Error>
 800ea18:	e7f8      	b.n	800ea0c <I2C1_ReadMultiple+0x24>
 800ea1a:	bf00      	nop
 800ea1c:	2002e144 	.word	0x2002e144

0800ea20 <I2C1_Read>:
{
 800ea20:	b510      	push	{r4, lr}
 800ea22:	b086      	sub	sp, #24
 800ea24:	4604      	mov	r4, r0
  uint8_t Value = 0;
 800ea26:	aa06      	add	r2, sp, #24
 800ea28:	2300      	movs	r3, #0
 800ea2a:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(&heval_I2c1,
 800ea2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ea32:	9302      	str	r3, [sp, #8]
 800ea34:	2301      	movs	r3, #1
 800ea36:	9301      	str	r3, [sp, #4]
 800ea38:	9200      	str	r2, [sp, #0]
 800ea3a:	460a      	mov	r2, r1
 800ea3c:	4601      	mov	r1, r0
 800ea3e:	4806      	ldr	r0, [pc, #24]	; (800ea58 <I2C1_Read+0x38>)
 800ea40:	f7f6 f8ac 	bl	8004b9c <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 800ea44:	b918      	cbnz	r0, 800ea4e <I2C1_Read+0x2e>
}
 800ea46:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800ea4a:	b006      	add	sp, #24
 800ea4c:	bd10      	pop	{r4, pc}
    I2C1_Error(Addr);
 800ea4e:	4620      	mov	r0, r4
 800ea50:	f7ff ffa6 	bl	800e9a0 <I2C1_Error>
 800ea54:	e7f7      	b.n	800ea46 <I2C1_Read+0x26>
 800ea56:	bf00      	nop
 800ea58:	2002e144 	.word	0x2002e144

0800ea5c <BSP_LED_Init>:
  if (Led <= LED4)
 800ea5c:	2803      	cmp	r0, #3
 800ea5e:	d853      	bhi.n	800eb08 <BSP_LED_Init+0xac>
{
 800ea60:	b570      	push	{r4, r5, r6, lr}
 800ea62:	b08a      	sub	sp, #40	; 0x28
    gpio_init_structure.Pin   = GPIO_PIN[Led];
 800ea64:	4b29      	ldr	r3, [pc, #164]	; (800eb0c <BSP_LED_Init+0xb0>)
 800ea66:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800ea6a:	9305      	str	r3, [sp, #20]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	9306      	str	r3, [sp, #24]
    gpio_init_structure.Pull  = GPIO_PULLUP;
 800ea70:	9307      	str	r3, [sp, #28]
    gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800ea72:	2303      	movs	r3, #3
 800ea74:	9308      	str	r3, [sp, #32]
    switch(Led)
 800ea76:	2803      	cmp	r0, #3
 800ea78:	d80f      	bhi.n	800ea9a <BSP_LED_Init+0x3e>
 800ea7a:	e8df f000 	tbb	[pc, r0]
 800ea7e:	1e02      	.short	0x1e02
 800ea80:	382b      	.short	0x382b
      LED1_GPIO_CLK_ENABLE();
 800ea82:	2300      	movs	r3, #0
 800ea84:	9301      	str	r3, [sp, #4]
 800ea86:	4b22      	ldr	r3, [pc, #136]	; (800eb10 <BSP_LED_Init+0xb4>)
 800ea88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea8e:	631a      	str	r2, [r3, #48]	; 0x30
 800ea90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea96:	9301      	str	r3, [sp, #4]
 800ea98:	9b01      	ldr	r3, [sp, #4]
 800ea9a:	4604      	mov	r4, r0
    HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 800ea9c:	4e1b      	ldr	r6, [pc, #108]	; (800eb0c <BSP_LED_Init+0xb0>)
 800ea9e:	eb06 0580 	add.w	r5, r6, r0, lsl #2
 800eaa2:	a905      	add	r1, sp, #20
 800eaa4:	6928      	ldr	r0, [r5, #16]
 800eaa6:	f7f4 ffcb 	bl	8003a40 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 800eaaa:	2201      	movs	r2, #1
 800eaac:	f836 1024 	ldrh.w	r1, [r6, r4, lsl #2]
 800eab0:	6928      	ldr	r0, [r5, #16]
 800eab2:	f7f5 f95c 	bl	8003d6e <HAL_GPIO_WritePin>
}
 800eab6:	b00a      	add	sp, #40	; 0x28
 800eab8:	bd70      	pop	{r4, r5, r6, pc}
      LED2_GPIO_CLK_ENABLE();
 800eaba:	2300      	movs	r3, #0
 800eabc:	9302      	str	r3, [sp, #8]
 800eabe:	4b14      	ldr	r3, [pc, #80]	; (800eb10 <BSP_LED_Init+0xb4>)
 800eac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eac2:	f042 0208 	orr.w	r2, r2, #8
 800eac6:	631a      	str	r2, [r3, #48]	; 0x30
 800eac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaca:	f003 0308 	and.w	r3, r3, #8
 800eace:	9302      	str	r3, [sp, #8]
 800ead0:	9b02      	ldr	r3, [sp, #8]
      break;
 800ead2:	e7e2      	b.n	800ea9a <BSP_LED_Init+0x3e>
      LED3_GPIO_CLK_ENABLE();
 800ead4:	2300      	movs	r3, #0
 800ead6:	9303      	str	r3, [sp, #12]
 800ead8:	4b0d      	ldr	r3, [pc, #52]	; (800eb10 <BSP_LED_Init+0xb4>)
 800eada:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eadc:	f042 0208 	orr.w	r2, r2, #8
 800eae0:	631a      	str	r2, [r3, #48]	; 0x30
 800eae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eae4:	f003 0308 	and.w	r3, r3, #8
 800eae8:	9303      	str	r3, [sp, #12]
 800eaea:	9b03      	ldr	r3, [sp, #12]
      break;
 800eaec:	e7d5      	b.n	800ea9a <BSP_LED_Init+0x3e>
      LED4_GPIO_CLK_ENABLE();
 800eaee:	2300      	movs	r3, #0
 800eaf0:	9304      	str	r3, [sp, #16]
 800eaf2:	4b07      	ldr	r3, [pc, #28]	; (800eb10 <BSP_LED_Init+0xb4>)
 800eaf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eaf6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eafa:	631a      	str	r2, [r3, #48]	; 0x30
 800eafc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eafe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eb02:	9304      	str	r3, [sp, #16]
 800eb04:	9b04      	ldr	r3, [sp, #16]
      break;
 800eb06:	e7c8      	b.n	800ea9a <BSP_LED_Init+0x3e>
 800eb08:	4770      	bx	lr
 800eb0a:	bf00      	nop
 800eb0c:	2000006c 	.word	0x2000006c
 800eb10:	40023800 	.word	0x40023800

0800eb14 <BSP_LED_Toggle>:
  if (Led <= LED4)
 800eb14:	2803      	cmp	r0, #3
 800eb16:	d900      	bls.n	800eb1a <BSP_LED_Toggle+0x6>
 800eb18:	4770      	bx	lr
{
 800eb1a:	b508      	push	{r3, lr}
     HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 800eb1c:	4b04      	ldr	r3, [pc, #16]	; (800eb30 <BSP_LED_Toggle+0x1c>)
 800eb1e:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800eb22:	f833 1020 	ldrh.w	r1, [r3, r0, lsl #2]
 800eb26:	6910      	ldr	r0, [r2, #16]
 800eb28:	f7f5 f927 	bl	8003d7a <HAL_GPIO_TogglePin>
}
 800eb2c:	bd08      	pop	{r3, pc}
 800eb2e:	bf00      	nop
 800eb30:	2000006c 	.word	0x2000006c

0800eb34 <TS_IO_Init>:
/**
  * @brief  Initialize I2C communication
  *         channel from MCU to TouchScreen (TS).
  */
void TS_IO_Init(void)
{
 800eb34:	b508      	push	{r3, lr}
  I2C1_Init();
 800eb36:	f7ff ff0f 	bl	800e958 <I2C1_Init>
}
 800eb3a:	bd08      	pop	{r3, pc}

0800eb3c <TS_IO_Write>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @param  Value: Data to be written
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800eb3c:	b508      	push	{r3, lr}
  I2C1_Write(Addr, Reg, Value);
 800eb3e:	f7ff ff39 	bl	800e9b4 <I2C1_Write>
}
 800eb42:	bd08      	pop	{r3, pc}

0800eb44 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800eb44:	b508      	push	{r3, lr}
  return I2C1_Read(Addr, Reg);
 800eb46:	f7ff ff6b 	bl	800ea20 <I2C1_Read>
}
 800eb4a:	bd08      	pop	{r3, pc}

0800eb4c <TS_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t TS_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800eb4c:	b500      	push	{lr}
 800eb4e:	b083      	sub	sp, #12
 return I2C1_ReadMultiple(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800eb50:	9300      	str	r3, [sp, #0]
 800eb52:	4613      	mov	r3, r2
 800eb54:	2201      	movs	r2, #1
 800eb56:	f7ff ff47 	bl	800e9e8 <I2C1_ReadMultiple>
}
 800eb5a:	b003      	add	sp, #12
 800eb5c:	f85d fb04 	ldr.w	pc, [sp], #4

0800eb60 <BSP_TS_Init>:
  * @param  ts_SizeX : Maximum X size of the TS area on LCD
  * @param  ts_SizeY : Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800eb60:	b570      	push	{r4, r5, r6, lr}
 800eb62:	4606      	mov	r6, r0
 800eb64:	460d      	mov	r5, r1
  /* Note : I2C_Address is un-initialized here, but is not used at all in init function */
  /* but the prototype of Init() is like that in template and should be respected       */

  /* Initialize the communication channel to sensor (I2C) if necessary */
  /* that is initialization is done only once after a power up         */
  ft6x06_ts_drv.Init(I2C_Address);
 800eb66:	4c1a      	ldr	r4, [pc, #104]	; (800ebd0 <BSP_TS_Init+0x70>)
 800eb68:	6823      	ldr	r3, [r4, #0]
 800eb6a:	4a1a      	ldr	r2, [pc, #104]	; (800ebd4 <BSP_TS_Init+0x74>)
 800eb6c:	7810      	ldrb	r0, [r2, #0]
 800eb6e:	4798      	blx	r3

  ts_id1 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS);
 800eb70:	6863      	ldr	r3, [r4, #4]
 800eb72:	2054      	movs	r0, #84	; 0x54
 800eb74:	4798      	blx	r3
 800eb76:	b2c4      	uxtb	r4, r0
  if(ts_id1 != FT6206_ID_VALUE)
 800eb78:	2c11      	cmp	r4, #17
 800eb7a:	d01d      	beq.n	800ebb8 <BSP_TS_Init+0x58>
  {
    ts_id2 = ft6x06_ts_drv.ReadID(TS_I2C_ADDRESS_A02);
 800eb7c:	4b14      	ldr	r3, [pc, #80]	; (800ebd0 <BSP_TS_Init+0x70>)
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	2070      	movs	r0, #112	; 0x70
 800eb82:	4798      	blx	r3
 800eb84:	b2c0      	uxtb	r0, r0
    I2C_Address    = TS_I2C_ADDRESS_A02;    
 800eb86:	4b13      	ldr	r3, [pc, #76]	; (800ebd4 <BSP_TS_Init+0x74>)
 800eb88:	2270      	movs	r2, #112	; 0x70
 800eb8a:	701a      	strb	r2, [r3, #0]
    I2C_Address    = TS_I2C_ADDRESS;    
  }
  
  /* Scan FT6xx6 TouchScreen IC controller ID register by I2C Read       */
  /* Verify this is a FT6206 or FT6336G, otherwise this is an error case */
  if((ts_id1 == FT6206_ID_VALUE) || (ts_id2 == FT6206_ID_VALUE))
 800eb8c:	2c11      	cmp	r4, #17
 800eb8e:	d001      	beq.n	800eb94 <BSP_TS_Init+0x34>
 800eb90:	2811      	cmp	r0, #17
 800eb92:	d11a      	bne.n	800ebca <BSP_TS_Init+0x6a>
  {
    /* Found FT6206 : Initialize the TS driver structure */
    ts_driver = &ft6x06_ts_drv;
 800eb94:	4b0f      	ldr	r3, [pc, #60]	; (800ebd4 <BSP_TS_Init+0x74>)
 800eb96:	4a0e      	ldr	r2, [pc, #56]	; (800ebd0 <BSP_TS_Init+0x70>)
 800eb98:	605a      	str	r2, [r3, #4]

    /* Get LCD chosen orientation */
    if(ts_SizeX < ts_SizeY)
 800eb9a:	42ae      	cmp	r6, r5
 800eb9c:	d211      	bcs.n	800ebc2 <BSP_TS_Init+0x62>
    {
      ts_orientation = TS_SWAP_NONE;                
 800eb9e:	2201      	movs	r2, #1
 800eba0:	721a      	strb	r2, [r3, #8]
    }

    if(ts_status == TS_OK)
    {
      /* Software reset the TouchScreen */
      ts_driver->Reset(I2C_Address);
 800eba2:	4b0b      	ldr	r3, [pc, #44]	; (800ebd0 <BSP_TS_Init+0x70>)
 800eba4:	689b      	ldr	r3, [r3, #8]
 800eba6:	4c0b      	ldr	r4, [pc, #44]	; (800ebd4 <BSP_TS_Init+0x74>)
 800eba8:	7820      	ldrb	r0, [r4, #0]
 800ebaa:	4798      	blx	r3

      /* Calibrate, Configure and Start the TouchScreen driver */
      ts_driver->Start(I2C_Address);
 800ebac:	6863      	ldr	r3, [r4, #4]
 800ebae:	68db      	ldr	r3, [r3, #12]
 800ebb0:	7820      	ldrb	r0, [r4, #0]
 800ebb2:	4798      	blx	r3
  uint8_t ts_status = TS_OK;
 800ebb4:	2000      	movs	r0, #0
  {
    ts_status = TS_DEVICE_NOT_FOUND;
  }

  return (ts_status);
}
 800ebb6:	bd70      	pop	{r4, r5, r6, pc}
    I2C_Address    = TS_I2C_ADDRESS;    
 800ebb8:	4b06      	ldr	r3, [pc, #24]	; (800ebd4 <BSP_TS_Init+0x74>)
 800ebba:	2254      	movs	r2, #84	; 0x54
 800ebbc:	701a      	strb	r2, [r3, #0]
  uint8_t ts_id1, ts_id2 = 0;
 800ebbe:	2000      	movs	r0, #0
 800ebc0:	e7e4      	b.n	800eb8c <BSP_TS_Init+0x2c>
      ts_orientation = TS_SWAP_XY | TS_SWAP_Y;                 
 800ebc2:	4b04      	ldr	r3, [pc, #16]	; (800ebd4 <BSP_TS_Init+0x74>)
 800ebc4:	220c      	movs	r2, #12
 800ebc6:	721a      	strb	r2, [r3, #8]
 800ebc8:	e7eb      	b.n	800eba2 <BSP_TS_Init+0x42>
    ts_status = TS_DEVICE_NOT_FOUND;
 800ebca:	2003      	movs	r0, #3
 800ebcc:	e7f3      	b.n	800ebb6 <BSP_TS_Init+0x56>
 800ebce:	bf00      	nop
 800ebd0:	20000020 	.word	0x20000020
 800ebd4:	2002e198 	.word	0x2002e198

0800ebd8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800ebd8:	b570      	push	{r4, r5, r6, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	4605      	mov	r5, r0
  uint32_t area = 0;
  uint32_t event = 0;
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = ts_driver->DetectTouch(I2C_Address);
 800ebde:	4b3d      	ldr	r3, [pc, #244]	; (800ecd4 <BSP_TS_GetState+0xfc>)
 800ebe0:	685a      	ldr	r2, [r3, #4]
 800ebe2:	6912      	ldr	r2, [r2, #16]
 800ebe4:	7818      	ldrb	r0, [r3, #0]
 800ebe6:	4790      	blx	r2
 800ebe8:	7028      	strb	r0, [r5, #0]
  if(TS_State->touchDetected)
 800ebea:	2800      	cmp	r0, #0
 800ebec:	d06e      	beq.n	800eccc <BSP_TS_GetState+0xf4>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800ebee:	2400      	movs	r4, #0
 800ebf0:	e011      	b.n	800ec16 <BSP_TS_GetState+0x3e>
      if(ts_orientation & TS_SWAP_Y)
      {
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
      }
            
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	1a5b      	subs	r3, r3, r1
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	e051      	b.n	800ec9e <BSP_TS_GetState+0xc6>
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 800ebfa:	b292      	uxth	r2, r2
 800ebfc:	1a12      	subs	r2, r2, r0
 800ebfe:	b292      	uxth	r2, r2
 800ec00:	e05b      	b.n	800ecba <BSP_TS_GetState+0xe2>
        _x[index] = Raw_x[index];
        _y[index] = Raw_y[index];
      }


      TS_State->touchX[index] = _x[index];
 800ec02:	4b34      	ldr	r3, [pc, #208]	; (800ecd4 <BSP_TS_GetState+0xfc>)
 800ec04:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ec08:	68d9      	ldr	r1, [r3, #12]
 800ec0a:	eb05 0244 	add.w	r2, r5, r4, lsl #1
 800ec0e:	8051      	strh	r1, [r2, #2]
      TS_State->touchY[index] = _y[index];
 800ec10:	695b      	ldr	r3, [r3, #20]
 800ec12:	80d3      	strh	r3, [r2, #6]
    for(index=0; index < TS_State->touchDetected; index++)
 800ec14:	3401      	adds	r4, #1
 800ec16:	782b      	ldrb	r3, [r5, #0]
 800ec18:	42a3      	cmp	r3, r4
 800ec1a:	d957      	bls.n	800eccc <BSP_TS_GetState+0xf4>
      ts_driver->GetXY(I2C_Address, &(Raw_x[index]), &(Raw_y[index]));
 800ec1c:	4e2d      	ldr	r6, [pc, #180]	; (800ecd4 <BSP_TS_GetState+0xfc>)
 800ec1e:	6873      	ldr	r3, [r6, #4]
 800ec20:	695b      	ldr	r3, [r3, #20]
 800ec22:	0061      	lsls	r1, r4, #1
 800ec24:	eb0d 0201 	add.w	r2, sp, r1
 800ec28:	a801      	add	r0, sp, #4
 800ec2a:	4401      	add	r1, r0
 800ec2c:	7830      	ldrb	r0, [r6, #0]
 800ec2e:	4798      	blx	r3
      if(ts_orientation & TS_SWAP_XY)
 800ec30:	7a33      	ldrb	r3, [r6, #8]
 800ec32:	f013 0f08 	tst.w	r3, #8
 800ec36:	d00a      	beq.n	800ec4e <BSP_TS_GetState+0x76>
        tmp = Raw_x[index];
 800ec38:	aa02      	add	r2, sp, #8
 800ec3a:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800ec3e:	f832 1c04 	ldrh.w	r1, [r2, #-4]
        Raw_x[index] = Raw_y[index]; 
 800ec42:	f832 0c08 	ldrh.w	r0, [r2, #-8]
 800ec46:	f822 0c04 	strh.w	r0, [r2, #-4]
        Raw_y[index] = tmp;
 800ec4a:	f822 1c08 	strh.w	r1, [r2, #-8]
      if(ts_orientation & TS_SWAP_X)
 800ec4e:	f013 0f02 	tst.w	r3, #2
 800ec52:	d009      	beq.n	800ec68 <BSP_TS_GetState+0x90>
        Raw_x[index] = FT_6206_MAX_WIDTH - 1 - Raw_x[index];
 800ec54:	aa02      	add	r2, sp, #8
 800ec56:	eb02 0144 	add.w	r1, r2, r4, lsl #1
 800ec5a:	f831 2c04 	ldrh.w	r2, [r1, #-4]
 800ec5e:	f5c2 7247 	rsb	r2, r2, #796	; 0x31c
 800ec62:	3203      	adds	r2, #3
 800ec64:	f821 2c04 	strh.w	r2, [r1, #-4]
      if(ts_orientation & TS_SWAP_Y)
 800ec68:	f013 0f04 	tst.w	r3, #4
 800ec6c:	d009      	beq.n	800ec82 <BSP_TS_GetState+0xaa>
        Raw_y[index] = FT_6206_MAX_HEIGHT - 1 - Raw_y[index];
 800ec6e:	ab02      	add	r3, sp, #8
 800ec70:	eb03 0244 	add.w	r2, r3, r4, lsl #1
 800ec74:	f832 3c08 	ldrh.w	r3, [r2, #-8]
 800ec78:	f5c3 73ef 	rsb	r3, r3, #478	; 0x1de
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	f822 3c08 	strh.w	r3, [r2, #-8]
      xDiff = Raw_x[index] > _x[index]? (Raw_x[index] - _x[index]): (_x[index] - Raw_x[index]);
 800ec82:	ab02      	add	r3, sp, #8
 800ec84:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 800ec88:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 800ec8c:	4b11      	ldr	r3, [pc, #68]	; (800ecd4 <BSP_TS_GetState+0xfc>)
 800ec8e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ec92:	68db      	ldr	r3, [r3, #12]
 800ec94:	4299      	cmp	r1, r3
 800ec96:	d9ac      	bls.n	800ebf2 <BSP_TS_GetState+0x1a>
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	1acb      	subs	r3, r1, r3
 800ec9c:	b29b      	uxth	r3, r3
      yDiff = Raw_y[index] > _y[index]? (Raw_y[index] - _y[index]): (_y[index] - Raw_y[index]);
 800ec9e:	aa02      	add	r2, sp, #8
 800eca0:	eb02 0244 	add.w	r2, r2, r4, lsl #1
 800eca4:	f832 0c08 	ldrh.w	r0, [r2, #-8]
 800eca8:	4a0a      	ldr	r2, [pc, #40]	; (800ecd4 <BSP_TS_GetState+0xfc>)
 800ecaa:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800ecae:	6952      	ldr	r2, [r2, #20]
 800ecb0:	4290      	cmp	r0, r2
 800ecb2:	d9a2      	bls.n	800ebfa <BSP_TS_GetState+0x22>
 800ecb4:	b292      	uxth	r2, r2
 800ecb6:	1a82      	subs	r2, r0, r2
 800ecb8:	b292      	uxth	r2, r2
      if ((xDiff + yDiff) > 5)
 800ecba:	4413      	add	r3, r2
 800ecbc:	2b05      	cmp	r3, #5
 800ecbe:	dda0      	ble.n	800ec02 <BSP_TS_GetState+0x2a>
        _x[index] = Raw_x[index];
 800ecc0:	4b04      	ldr	r3, [pc, #16]	; (800ecd4 <BSP_TS_GetState+0xfc>)
 800ecc2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ecc6:	60d9      	str	r1, [r3, #12]
        _y[index] = Raw_y[index];
 800ecc8:	6158      	str	r0, [r3, #20]
 800ecca:	e79a      	b.n	800ec02 <BSP_TS_GetState+0x2a>
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
}
 800eccc:	2000      	movs	r0, #0
 800ecce:	b002      	add	sp, #8
 800ecd0:	bd70      	pop	{r4, r5, r6, pc}
 800ecd2:	bf00      	nop
 800ecd4:	2002e198 	.word	0x2002e198

0800ecd8 <Reset_Handler>:
 800ecd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ed10 <LoopFillZerobss+0x14>
 800ecdc:	2100      	movs	r1, #0
 800ecde:	e003      	b.n	800ece8 <LoopCopyDataInit>

0800ece0 <CopyDataInit>:
 800ece0:	4b0c      	ldr	r3, [pc, #48]	; (800ed14 <LoopFillZerobss+0x18>)
 800ece2:	585b      	ldr	r3, [r3, r1]
 800ece4:	5043      	str	r3, [r0, r1]
 800ece6:	3104      	adds	r1, #4

0800ece8 <LoopCopyDataInit>:
 800ece8:	480b      	ldr	r0, [pc, #44]	; (800ed18 <LoopFillZerobss+0x1c>)
 800ecea:	4b0c      	ldr	r3, [pc, #48]	; (800ed1c <LoopFillZerobss+0x20>)
 800ecec:	1842      	adds	r2, r0, r1
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	d3f6      	bcc.n	800ece0 <CopyDataInit>
 800ecf2:	4a0b      	ldr	r2, [pc, #44]	; (800ed20 <LoopFillZerobss+0x24>)
 800ecf4:	e002      	b.n	800ecfc <LoopFillZerobss>

0800ecf6 <FillZerobss>:
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	f842 3b04 	str.w	r3, [r2], #4

0800ecfc <LoopFillZerobss>:
 800ecfc:	4b09      	ldr	r3, [pc, #36]	; (800ed24 <LoopFillZerobss+0x28>)
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d3f9      	bcc.n	800ecf6 <FillZerobss>
 800ed02:	f7f3 fb11 	bl	8002328 <SystemInit>
 800ed06:	f00f fe6f 	bl	801e9e8 <__libc_init_array>
 800ed0a:	f7f2 ff51 	bl	8001bb0 <main>
 800ed0e:	4770      	bx	lr
 800ed10:	20050000 	.word	0x20050000
 800ed14:	08032a00 	.word	0x08032a00
 800ed18:	20000000 	.word	0x20000000
 800ed1c:	200001e8 	.word	0x200001e8
 800ed20:	200001e8 	.word	0x200001e8
 800ed24:	20030918 	.word	0x20030918

0800ed28 <ADC_IRQHandler>:
 800ed28:	e7fe      	b.n	800ed28 <ADC_IRQHandler>
	...

0800ed2c <GUICC_M1555I_SetCustColorConv>:
 800ed2c:	4b01      	ldr	r3, [pc, #4]	; (800ed34 <GUICC_M1555I_SetCustColorConv+0x8>)
 800ed2e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed32:	4770      	bx	lr
 800ed34:	2002e1b4 	.word	0x2002e1b4

0800ed38 <GUICC_M4444I_SetCustColorConv>:
 800ed38:	4b01      	ldr	r3, [pc, #4]	; (800ed40 <GUICC_M4444I_SetCustColorConv+0x8>)
 800ed3a:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed3e:	4770      	bx	lr
 800ed40:	2002e1bc 	.word	0x2002e1bc

0800ed44 <_Color2Index_M8888I>:
 800ed44:	4770      	bx	lr
 800ed46:	bf00      	nop

0800ed48 <_GetIndexMask_M8888I>:
 800ed48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed4c:	4770      	bx	lr
 800ed4e:	bf00      	nop

0800ed50 <_Color2IndexBulk_M8888I>:
 800ed50:	b410      	push	{r4}
 800ed52:	f850 4b04 	ldr.w	r4, [r0], #4
 800ed56:	600c      	str	r4, [r1, #0]
 800ed58:	3a01      	subs	r2, #1
 800ed5a:	4419      	add	r1, r3
 800ed5c:	d1f9      	bne.n	800ed52 <_Color2IndexBulk_M8888I+0x2>
 800ed5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed62:	4770      	bx	lr

0800ed64 <_Index2ColorBulk_M8888I>:
 800ed64:	b410      	push	{r4}
 800ed66:	6804      	ldr	r4, [r0, #0]
 800ed68:	f841 4b04 	str.w	r4, [r1], #4
 800ed6c:	3a01      	subs	r2, #1
 800ed6e:	4418      	add	r0, r3
 800ed70:	d1f9      	bne.n	800ed66 <_Index2ColorBulk_M8888I+0x2>
 800ed72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ed76:	4770      	bx	lr

0800ed78 <GUICC_M8888I_SetCustColorConv>:
 800ed78:	4770      	bx	lr
 800ed7a:	bf00      	nop

0800ed7c <GUICC_M565_SetCustColorConv>:
 800ed7c:	4b01      	ldr	r3, [pc, #4]	; (800ed84 <GUICC_M565_SetCustColorConv+0x8>)
 800ed7e:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed82:	4770      	bx	lr
 800ed84:	2002e1c4 	.word	0x2002e1c4

0800ed88 <GUICC_M888_SetCustColorConv>:
 800ed88:	4770      	bx	lr
 800ed8a:	bf00      	nop

0800ed8c <LCD_Index2Color_M8888I>:
 800ed8c:	4770      	bx	lr
 800ed8e:	bf00      	nop

0800ed90 <LCD_Index2Color_M888>:
 800ed90:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 800ed94:	4770      	bx	lr
 800ed96:	bf00      	nop

0800ed98 <_AddFreeMemory>:
 800ed98:	4bc0      	ldr	r3, [pc, #768]	; (800f09c <_AddFreeMemory+0x304>)
 800ed9a:	68da      	ldr	r2, [r3, #12]
 800ed9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ed9e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800eda0:	3a01      	subs	r2, #1
 800eda2:	4422      	add	r2, r4
 800eda4:	180d      	adds	r5, r1, r0
 800eda6:	42aa      	cmp	r2, r5
 800eda8:	d303      	bcc.n	800edb2 <_AddFreeMemory+0x1a>
 800edaa:	580a      	ldr	r2, [r1, r0]
 800edac:	2a00      	cmp	r2, #0
 800edae:	f000 80a1 	beq.w	800eef4 <_AddFreeMemory+0x15c>
 800edb2:	428c      	cmp	r4, r1
 800edb4:	d205      	bcs.n	800edc2 <_AddFreeMemory+0x2a>
 800edb6:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800edba:	1a8a      	subs	r2, r1, r2
 800edbc:	6814      	ldr	r4, [r2, #0]
 800edbe:	2c00      	cmp	r4, #0
 800edc0:	d04a      	beq.n	800ee58 <_AddFreeMemory+0xc0>
 800edc2:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 800edc6:	4ab5      	ldr	r2, [pc, #724]	; (800f09c <_AddFreeMemory+0x304>)
 800edc8:	42a0      	cmp	r0, r4
 800edca:	f080 811e 	bcs.w	800f00a <_AddFreeMemory+0x272>
 800edce:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 800edd2:	42a0      	cmp	r0, r4
 800edd4:	f080 811b 	bcs.w	800f00e <_AddFreeMemory+0x276>
 800edd8:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 800eddc:	42a0      	cmp	r0, r4
 800edde:	f080 8118 	bcs.w	800f012 <_AddFreeMemory+0x27a>
 800ede2:	f8d2 40a0 	ldr.w	r4, [r2, #160]	; 0xa0
 800ede6:	42a0      	cmp	r0, r4
 800ede8:	f080 8115 	bcs.w	800f016 <_AddFreeMemory+0x27e>
 800edec:	f8d2 4098 	ldr.w	r4, [r2, #152]	; 0x98
 800edf0:	42a0      	cmp	r0, r4
 800edf2:	f080 8112 	bcs.w	800f01a <_AddFreeMemory+0x282>
 800edf6:	f8d2 4090 	ldr.w	r4, [r2, #144]	; 0x90
 800edfa:	42a0      	cmp	r0, r4
 800edfc:	f080 810f 	bcs.w	800f01e <_AddFreeMemory+0x286>
 800ee00:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
 800ee04:	42a0      	cmp	r0, r4
 800ee06:	f080 810c 	bcs.w	800f022 <_AddFreeMemory+0x28a>
 800ee0a:	f8d2 4080 	ldr.w	r4, [r2, #128]	; 0x80
 800ee0e:	42a0      	cmp	r0, r4
 800ee10:	f080 8109 	bcs.w	800f026 <_AddFreeMemory+0x28e>
 800ee14:	6f94      	ldr	r4, [r2, #120]	; 0x78
 800ee16:	42a0      	cmp	r0, r4
 800ee18:	f080 8107 	bcs.w	800f02a <_AddFreeMemory+0x292>
 800ee1c:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800ee1e:	4290      	cmp	r0, r2
 800ee20:	f080 8105 	bcs.w	800f02e <_AddFreeMemory+0x296>
 800ee24:	6e9c      	ldr	r4, [r3, #104]	; 0x68
 800ee26:	4a9d      	ldr	r2, [pc, #628]	; (800f09c <_AddFreeMemory+0x304>)
 800ee28:	42a0      	cmp	r0, r4
 800ee2a:	f080 8102 	bcs.w	800f032 <_AddFreeMemory+0x29a>
 800ee2e:	6e14      	ldr	r4, [r2, #96]	; 0x60
 800ee30:	42a0      	cmp	r0, r4
 800ee32:	f080 8100 	bcs.w	800f036 <_AddFreeMemory+0x29e>
 800ee36:	6d94      	ldr	r4, [r2, #88]	; 0x58
 800ee38:	42a0      	cmp	r0, r4
 800ee3a:	f080 80fe 	bcs.w	800f03a <_AddFreeMemory+0x2a2>
 800ee3e:	6d14      	ldr	r4, [r2, #80]	; 0x50
 800ee40:	42a0      	cmp	r0, r4
 800ee42:	f080 80fc 	bcs.w	800f03e <_AddFreeMemory+0x2a6>
 800ee46:	6c94      	ldr	r4, [r2, #72]	; 0x48
 800ee48:	42a0      	cmp	r0, r4
 800ee4a:	f080 80fa 	bcs.w	800f042 <_AddFreeMemory+0x2aa>
 800ee4e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ee50:	4290      	cmp	r0, r2
 800ee52:	f080 80a6 	bcs.w	800efa2 <_AddFreeMemory+0x20a>
 800ee56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee58:	6851      	ldr	r1, [r2, #4]
 800ee5a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 800ee5e:	4c8f      	ldr	r4, [pc, #572]	; (800f09c <_AddFreeMemory+0x304>)
 800ee60:	42a9      	cmp	r1, r5
 800ee62:	4408      	add	r0, r1
 800ee64:	f080 80f9 	bcs.w	800f05a <_AddFreeMemory+0x2c2>
 800ee68:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 800ee6c:	42a9      	cmp	r1, r5
 800ee6e:	f080 8106 	bcs.w	800f07e <_AddFreeMemory+0x2e6>
 800ee72:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
 800ee76:	42a9      	cmp	r1, r5
 800ee78:	f080 80ff 	bcs.w	800f07a <_AddFreeMemory+0x2e2>
 800ee7c:	f8d4 50a0 	ldr.w	r5, [r4, #160]	; 0xa0
 800ee80:	42a9      	cmp	r1, r5
 800ee82:	f080 80f8 	bcs.w	800f076 <_AddFreeMemory+0x2de>
 800ee86:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
 800ee8a:	42a9      	cmp	r1, r5
 800ee8c:	f080 80fc 	bcs.w	800f088 <_AddFreeMemory+0x2f0>
 800ee90:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 800ee94:	42a9      	cmp	r1, r5
 800ee96:	f080 80ff 	bcs.w	800f098 <_AddFreeMemory+0x300>
 800ee9a:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
 800ee9e:	42a9      	cmp	r1, r5
 800eea0:	f080 80f8 	bcs.w	800f094 <_AddFreeMemory+0x2fc>
 800eea4:	f8d4 4080 	ldr.w	r4, [r4, #128]	; 0x80
 800eea8:	42a1      	cmp	r1, r4
 800eeaa:	f080 80f1 	bcs.w	800f090 <_AddFreeMemory+0x2f8>
 800eeae:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 800eeb0:	4c7a      	ldr	r4, [pc, #488]	; (800f09c <_AddFreeMemory+0x304>)
 800eeb2:	42a9      	cmp	r1, r5
 800eeb4:	f080 80ea 	bcs.w	800f08c <_AddFreeMemory+0x2f4>
 800eeb8:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800eeba:	42a9      	cmp	r1, r5
 800eebc:	f080 8113 	bcs.w	800f0e6 <_AddFreeMemory+0x34e>
 800eec0:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 800eec2:	42a9      	cmp	r1, r5
 800eec4:	f080 810d 	bcs.w	800f0e2 <_AddFreeMemory+0x34a>
 800eec8:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800eeca:	42a9      	cmp	r1, r5
 800eecc:	f080 8107 	bcs.w	800f0de <_AddFreeMemory+0x346>
 800eed0:	6da5      	ldr	r5, [r4, #88]	; 0x58
 800eed2:	42a9      	cmp	r1, r5
 800eed4:	f080 8101 	bcs.w	800f0da <_AddFreeMemory+0x342>
 800eed8:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800eeda:	42a9      	cmp	r1, r5
 800eedc:	f080 80fb 	bcs.w	800f0d6 <_AddFreeMemory+0x33e>
 800eee0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800eee2:	42a9      	cmp	r1, r5
 800eee4:	f080 8104 	bcs.w	800f0f0 <_AddFreeMemory+0x358>
 800eee8:	6c24      	ldr	r4, [r4, #64]	; 0x40
 800eeea:	42a1      	cmp	r1, r4
 800eeec:	f080 8081 	bcs.w	800eff2 <_AddFreeMemory+0x25a>
 800eef0:	4611      	mov	r1, r2
 800eef2:	e766      	b.n	800edc2 <_AddFreeMemory+0x2a>
 800eef4:	686a      	ldr	r2, [r5, #4]
 800eef6:	f8d3 60b8 	ldr.w	r6, [r3, #184]	; 0xb8
 800eefa:	42b2      	cmp	r2, r6
 800eefc:	4410      	add	r0, r2
 800eefe:	f080 80ae 	bcs.w	800f05e <_AddFreeMemory+0x2c6>
 800ef02:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0
 800ef06:	42b2      	cmp	r2, r6
 800ef08:	f080 80b2 	bcs.w	800f070 <_AddFreeMemory+0x2d8>
 800ef0c:	f8d3 60a8 	ldr.w	r6, [r3, #168]	; 0xa8
 800ef10:	42b2      	cmp	r2, r6
 800ef12:	f080 80aa 	bcs.w	800f06a <_AddFreeMemory+0x2d2>
 800ef16:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 800ef1a:	42b2      	cmp	r2, r6
 800ef1c:	f080 80a2 	bcs.w	800f064 <_AddFreeMemory+0x2cc>
 800ef20:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 800ef24:	42b2      	cmp	r2, r6
 800ef26:	f080 80ac 	bcs.w	800f082 <_AddFreeMemory+0x2ea>
 800ef2a:	f8d3 6090 	ldr.w	r6, [r3, #144]	; 0x90
 800ef2e:	42b2      	cmp	r2, r6
 800ef30:	f080 80bf 	bcs.w	800f0b2 <_AddFreeMemory+0x31a>
 800ef34:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 800ef38:	42b2      	cmp	r2, r6
 800ef3a:	f080 80b7 	bcs.w	800f0ac <_AddFreeMemory+0x314>
 800ef3e:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
 800ef42:	42b2      	cmp	r2, r6
 800ef44:	f080 80af 	bcs.w	800f0a6 <_AddFreeMemory+0x30e>
 800ef48:	6f9f      	ldr	r7, [r3, #120]	; 0x78
 800ef4a:	42ba      	cmp	r2, r7
 800ef4c:	f080 80a8 	bcs.w	800f0a0 <_AddFreeMemory+0x308>
 800ef50:	6f1f      	ldr	r7, [r3, #112]	; 0x70
 800ef52:	42ba      	cmp	r2, r7
 800ef54:	f080 80b9 	bcs.w	800f0ca <_AddFreeMemory+0x332>
 800ef58:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 800ef5a:	42ba      	cmp	r2, r7
 800ef5c:	f080 80b2 	bcs.w	800f0c4 <_AddFreeMemory+0x32c>
 800ef60:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 800ef62:	42ba      	cmp	r2, r7
 800ef64:	f080 80ab 	bcs.w	800f0be <_AddFreeMemory+0x326>
 800ef68:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 800ef6a:	42ba      	cmp	r2, r7
 800ef6c:	f080 80a4 	bcs.w	800f0b8 <_AddFreeMemory+0x320>
 800ef70:	6d1f      	ldr	r7, [r3, #80]	; 0x50
 800ef72:	42ba      	cmp	r2, r7
 800ef74:	f080 80ac 	bcs.w	800f0d0 <_AddFreeMemory+0x338>
 800ef78:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 800ef7a:	42ba      	cmp	r2, r7
 800ef7c:	f080 80b5 	bcs.w	800f0ea <_AddFreeMemory+0x352>
 800ef80:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 800ef82:	42b2      	cmp	r2, r6
 800ef84:	f4ff af15 	bcc.w	800edb2 <_AddFreeMemory+0x1a>
 800ef88:	f04f 0e00 	mov.w	lr, #0
 800ef8c:	681e      	ldr	r6, [r3, #0]
 800ef8e:	68af      	ldr	r7, [r5, #8]
 800ef90:	68ed      	ldr	r5, [r5, #12]
 800ef92:	1ab2      	subs	r2, r6, r2
 800ef94:	601a      	str	r2, [r3, #0]
 800ef96:	b107      	cbz	r7, 800ef9a <_AddFreeMemory+0x202>
 800ef98:	607d      	str	r5, [r7, #4]
 800ef9a:	2d00      	cmp	r5, #0
 800ef9c:	d058      	beq.n	800f050 <_AddFreeMemory+0x2b8>
 800ef9e:	602f      	str	r7, [r5, #0]
 800efa0:	e707      	b.n	800edb2 <_AddFreeMemory+0x1a>
 800efa2:	2200      	movs	r2, #0
 800efa4:	3208      	adds	r2, #8
 800efa6:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 800efaa:	180d      	adds	r5, r1, r0
 800efac:	6864      	ldr	r4, [r4, #4]
 800efae:	608c      	str	r4, [r1, #8]
 800efb0:	2600      	movs	r6, #0
 800efb2:	600e      	str	r6, [r1, #0]
 800efb4:	6048      	str	r0, [r1, #4]
 800efb6:	6109      	str	r1, [r1, #16]
 800efb8:	f101 0608 	add.w	r6, r1, #8
 800efbc:	f845 0c04 	str.w	r0, [r5, #-4]
 800efc0:	b104      	cbz	r4, 800efc4 <_AddFreeMemory+0x22c>
 800efc2:	6066      	str	r6, [r4, #4]
 800efc4:	2500      	movs	r5, #0
 800efc6:	608c      	str	r4, [r1, #8]
 800efc8:	60cd      	str	r5, [r1, #12]
 800efca:	6819      	ldr	r1, [r3, #0]
 800efcc:	f893 5029 	ldrb.w	r5, [r3, #41]	; 0x29
 800efd0:	4c32      	ldr	r4, [pc, #200]	; (800f09c <_AddFreeMemory+0x304>)
 800efd2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800efd6:	4401      	add	r1, r0
 800efd8:	6056      	str	r6, [r2, #4]
 800efda:	6019      	str	r1, [r3, #0]
 800efdc:	2d00      	cmp	r5, #0
 800efde:	f47f af3a 	bne.w	800ee56 <_AddFreeMemory+0xbe>
 800efe2:	68e3      	ldr	r3, [r4, #12]
 800efe4:	68a2      	ldr	r2, [r4, #8]
 800efe6:	1a59      	subs	r1, r3, r1
 800efe8:	4291      	cmp	r1, r2
 800efea:	f67f af34 	bls.w	800ee56 <_AddFreeMemory+0xbe>
 800efee:	60a1      	str	r1, [r4, #8]
 800eff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eff2:	2700      	movs	r7, #0
 800eff4:	681c      	ldr	r4, [r3, #0]
 800eff6:	6895      	ldr	r5, [r2, #8]
 800eff8:	68d6      	ldr	r6, [r2, #12]
 800effa:	1a61      	subs	r1, r4, r1
 800effc:	6019      	str	r1, [r3, #0]
 800effe:	b105      	cbz	r5, 800f002 <_AddFreeMemory+0x26a>
 800f000:	606e      	str	r6, [r5, #4]
 800f002:	b306      	cbz	r6, 800f046 <_AddFreeMemory+0x2ae>
 800f004:	6035      	str	r5, [r6, #0]
 800f006:	4611      	mov	r1, r2
 800f008:	e6db      	b.n	800edc2 <_AddFreeMemory+0x2a>
 800f00a:	220f      	movs	r2, #15
 800f00c:	e7ca      	b.n	800efa4 <_AddFreeMemory+0x20c>
 800f00e:	220e      	movs	r2, #14
 800f010:	e7c8      	b.n	800efa4 <_AddFreeMemory+0x20c>
 800f012:	220d      	movs	r2, #13
 800f014:	e7c6      	b.n	800efa4 <_AddFreeMemory+0x20c>
 800f016:	220c      	movs	r2, #12
 800f018:	e7c4      	b.n	800efa4 <_AddFreeMemory+0x20c>
 800f01a:	220b      	movs	r2, #11
 800f01c:	e7c2      	b.n	800efa4 <_AddFreeMemory+0x20c>
 800f01e:	220a      	movs	r2, #10
 800f020:	e7c0      	b.n	800efa4 <_AddFreeMemory+0x20c>
 800f022:	2209      	movs	r2, #9
 800f024:	e7be      	b.n	800efa4 <_AddFreeMemory+0x20c>
 800f026:	2208      	movs	r2, #8
 800f028:	e7bc      	b.n	800efa4 <_AddFreeMemory+0x20c>
 800f02a:	2207      	movs	r2, #7
 800f02c:	e7ba      	b.n	800efa4 <_AddFreeMemory+0x20c>
 800f02e:	2206      	movs	r2, #6
 800f030:	e7b8      	b.n	800efa4 <_AddFreeMemory+0x20c>
 800f032:	2205      	movs	r2, #5
 800f034:	e7b6      	b.n	800efa4 <_AddFreeMemory+0x20c>
 800f036:	2204      	movs	r2, #4
 800f038:	e7b4      	b.n	800efa4 <_AddFreeMemory+0x20c>
 800f03a:	2203      	movs	r2, #3
 800f03c:	e7b2      	b.n	800efa4 <_AddFreeMemory+0x20c>
 800f03e:	2202      	movs	r2, #2
 800f040:	e7b0      	b.n	800efa4 <_AddFreeMemory+0x20c>
 800f042:	2201      	movs	r2, #1
 800f044:	e7ae      	b.n	800efa4 <_AddFreeMemory+0x20c>
 800f046:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f04a:	4611      	mov	r1, r2
 800f04c:	647d      	str	r5, [r7, #68]	; 0x44
 800f04e:	e6b8      	b.n	800edc2 <_AddFreeMemory+0x2a>
 800f050:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
 800f054:	f8ce 7044 	str.w	r7, [lr, #68]	; 0x44
 800f058:	e6ab      	b.n	800edb2 <_AddFreeMemory+0x1a>
 800f05a:	270f      	movs	r7, #15
 800f05c:	e7ca      	b.n	800eff4 <_AddFreeMemory+0x25c>
 800f05e:	f04f 0e0f 	mov.w	lr, #15
 800f062:	e793      	b.n	800ef8c <_AddFreeMemory+0x1f4>
 800f064:	f04f 0e0c 	mov.w	lr, #12
 800f068:	e790      	b.n	800ef8c <_AddFreeMemory+0x1f4>
 800f06a:	f04f 0e0d 	mov.w	lr, #13
 800f06e:	e78d      	b.n	800ef8c <_AddFreeMemory+0x1f4>
 800f070:	f04f 0e0e 	mov.w	lr, #14
 800f074:	e78a      	b.n	800ef8c <_AddFreeMemory+0x1f4>
 800f076:	270c      	movs	r7, #12
 800f078:	e7bc      	b.n	800eff4 <_AddFreeMemory+0x25c>
 800f07a:	270d      	movs	r7, #13
 800f07c:	e7ba      	b.n	800eff4 <_AddFreeMemory+0x25c>
 800f07e:	270e      	movs	r7, #14
 800f080:	e7b8      	b.n	800eff4 <_AddFreeMemory+0x25c>
 800f082:	f04f 0e0b 	mov.w	lr, #11
 800f086:	e781      	b.n	800ef8c <_AddFreeMemory+0x1f4>
 800f088:	270b      	movs	r7, #11
 800f08a:	e7b3      	b.n	800eff4 <_AddFreeMemory+0x25c>
 800f08c:	2707      	movs	r7, #7
 800f08e:	e7b1      	b.n	800eff4 <_AddFreeMemory+0x25c>
 800f090:	2708      	movs	r7, #8
 800f092:	e7af      	b.n	800eff4 <_AddFreeMemory+0x25c>
 800f094:	2709      	movs	r7, #9
 800f096:	e7ad      	b.n	800eff4 <_AddFreeMemory+0x25c>
 800f098:	270a      	movs	r7, #10
 800f09a:	e7ab      	b.n	800eff4 <_AddFreeMemory+0x25c>
 800f09c:	20030760 	.word	0x20030760
 800f0a0:	f04f 0e07 	mov.w	lr, #7
 800f0a4:	e772      	b.n	800ef8c <_AddFreeMemory+0x1f4>
 800f0a6:	f04f 0e08 	mov.w	lr, #8
 800f0aa:	e76f      	b.n	800ef8c <_AddFreeMemory+0x1f4>
 800f0ac:	f04f 0e09 	mov.w	lr, #9
 800f0b0:	e76c      	b.n	800ef8c <_AddFreeMemory+0x1f4>
 800f0b2:	f04f 0e0a 	mov.w	lr, #10
 800f0b6:	e769      	b.n	800ef8c <_AddFreeMemory+0x1f4>
 800f0b8:	f04f 0e03 	mov.w	lr, #3
 800f0bc:	e766      	b.n	800ef8c <_AddFreeMemory+0x1f4>
 800f0be:	f04f 0e04 	mov.w	lr, #4
 800f0c2:	e763      	b.n	800ef8c <_AddFreeMemory+0x1f4>
 800f0c4:	f04f 0e05 	mov.w	lr, #5
 800f0c8:	e760      	b.n	800ef8c <_AddFreeMemory+0x1f4>
 800f0ca:	f04f 0e06 	mov.w	lr, #6
 800f0ce:	e75d      	b.n	800ef8c <_AddFreeMemory+0x1f4>
 800f0d0:	f04f 0e02 	mov.w	lr, #2
 800f0d4:	e75a      	b.n	800ef8c <_AddFreeMemory+0x1f4>
 800f0d6:	2702      	movs	r7, #2
 800f0d8:	e78c      	b.n	800eff4 <_AddFreeMemory+0x25c>
 800f0da:	2703      	movs	r7, #3
 800f0dc:	e78a      	b.n	800eff4 <_AddFreeMemory+0x25c>
 800f0de:	2704      	movs	r7, #4
 800f0e0:	e788      	b.n	800eff4 <_AddFreeMemory+0x25c>
 800f0e2:	2705      	movs	r7, #5
 800f0e4:	e786      	b.n	800eff4 <_AddFreeMemory+0x25c>
 800f0e6:	2706      	movs	r7, #6
 800f0e8:	e784      	b.n	800eff4 <_AddFreeMemory+0x25c>
 800f0ea:	f04f 0e01 	mov.w	lr, #1
 800f0ee:	e74d      	b.n	800ef8c <_AddFreeMemory+0x1f4>
 800f0f0:	2701      	movs	r7, #1
 800f0f2:	e77f      	b.n	800eff4 <_AddFreeMemory+0x25c>

0800f0f4 <_RemoveHoles>:
 800f0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0f8:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800f2a0 <_RemoveHoles+0x1ac>
 800f0fc:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800f100:	f8d8 700c 	ldr.w	r7, [r8, #12]
 800f104:	e893 0060 	ldmia.w	r3, {r5, r6}
 800f108:	3f01      	subs	r7, #1
 800f10a:	b083      	sub	sp, #12
 800f10c:	4683      	mov	fp, r0
 800f10e:	441f      	add	r7, r3
 800f110:	46c1      	mov	r9, r8
 800f112:	b135      	cbz	r5, 800f122 <_RemoveHoles+0x2e>
 800f114:	4433      	add	r3, r6
 800f116:	429f      	cmp	r7, r3
 800f118:	d906      	bls.n	800f128 <_RemoveHoles+0x34>
 800f11a:	e893 0060 	ldmia.w	r3, {r5, r6}
 800f11e:	2d00      	cmp	r5, #0
 800f120:	d1f8      	bne.n	800f114 <_RemoveHoles+0x20>
 800f122:	1999      	adds	r1, r3, r6
 800f124:	428f      	cmp	r7, r1
 800f126:	d803      	bhi.n	800f130 <_RemoveHoles+0x3c>
 800f128:	2001      	movs	r0, #1
 800f12a:	b003      	add	sp, #12
 800f12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f130:	599d      	ldr	r5, [r3, r6]
 800f132:	684c      	ldr	r4, [r1, #4]
 800f134:	b155      	cbz	r5, 800f14c <_RemoveHoles+0x58>
 800f136:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800f13a:	f812 0035 	ldrb.w	r0, [r2, r5, lsl #3]
 800f13e:	2801      	cmp	r0, #1
 800f140:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 800f144:	d005      	beq.n	800f152 <_RemoveHoles+0x5e>
 800f146:	4626      	mov	r6, r4
 800f148:	460b      	mov	r3, r1
 800f14a:	e7e2      	b.n	800f112 <_RemoveHoles+0x1e>
 800f14c:	4626      	mov	r6, r4
 800f14e:	460b      	mov	r3, r1
 800f150:	e7e7      	b.n	800f122 <_RemoveHoles+0x2e>
 800f152:	f8d9 00b8 	ldr.w	r0, [r9, #184]	; 0xb8
 800f156:	f8d9 a02c 	ldr.w	sl, [r9, #44]	; 0x2c
 800f15a:	42b0      	cmp	r0, r6
 800f15c:	d976      	bls.n	800f24c <_RemoveHoles+0x158>
 800f15e:	f8d9 00b0 	ldr.w	r0, [r9, #176]	; 0xb0
 800f162:	42b0      	cmp	r0, r6
 800f164:	d975      	bls.n	800f252 <_RemoveHoles+0x15e>
 800f166:	f8d9 00a8 	ldr.w	r0, [r9, #168]	; 0xa8
 800f16a:	42b0      	cmp	r0, r6
 800f16c:	d974      	bls.n	800f258 <_RemoveHoles+0x164>
 800f16e:	f8d9 00a0 	ldr.w	r0, [r9, #160]	; 0xa0
 800f172:	42b0      	cmp	r0, r6
 800f174:	d973      	bls.n	800f25e <_RemoveHoles+0x16a>
 800f176:	f8d9 0098 	ldr.w	r0, [r9, #152]	; 0x98
 800f17a:	4286      	cmp	r6, r0
 800f17c:	d278      	bcs.n	800f270 <_RemoveHoles+0x17c>
 800f17e:	f8d9 0090 	ldr.w	r0, [r9, #144]	; 0x90
 800f182:	4286      	cmp	r6, r0
 800f184:	d277      	bcs.n	800f276 <_RemoveHoles+0x182>
 800f186:	f8d8 0088 	ldr.w	r0, [r8, #136]	; 0x88
 800f18a:	4286      	cmp	r6, r0
 800f18c:	d26a      	bcs.n	800f264 <_RemoveHoles+0x170>
 800f18e:	f8d9 0080 	ldr.w	r0, [r9, #128]	; 0x80
 800f192:	4286      	cmp	r6, r0
 800f194:	d269      	bcs.n	800f26a <_RemoveHoles+0x176>
 800f196:	f8d9 0078 	ldr.w	r0, [r9, #120]	; 0x78
 800f19a:	4286      	cmp	r6, r0
 800f19c:	d274      	bcs.n	800f288 <_RemoveHoles+0x194>
 800f19e:	f8d9 0070 	ldr.w	r0, [r9, #112]	; 0x70
 800f1a2:	4286      	cmp	r6, r0
 800f1a4:	d273      	bcs.n	800f28e <_RemoveHoles+0x19a>
 800f1a6:	f8d9 0068 	ldr.w	r0, [r9, #104]	; 0x68
 800f1aa:	4286      	cmp	r6, r0
 800f1ac:	d272      	bcs.n	800f294 <_RemoveHoles+0x1a0>
 800f1ae:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
 800f1b2:	4286      	cmp	r6, r0
 800f1b4:	d262      	bcs.n	800f27c <_RemoveHoles+0x188>
 800f1b6:	f8d9 0058 	ldr.w	r0, [r9, #88]	; 0x58
 800f1ba:	4286      	cmp	r6, r0
 800f1bc:	d261      	bcs.n	800f282 <_RemoveHoles+0x18e>
 800f1be:	f8d9 0050 	ldr.w	r0, [r9, #80]	; 0x50
 800f1c2:	4286      	cmp	r6, r0
 800f1c4:	d269      	bcs.n	800f29a <_RemoveHoles+0x1a6>
 800f1c6:	f8d9 0048 	ldr.w	r0, [r9, #72]	; 0x48
 800f1ca:	4286      	cmp	r6, r0
 800f1cc:	d21f      	bcs.n	800f20e <_RemoveHoles+0x11a>
 800f1ce:	f8d9 0040 	ldr.w	r0, [r9, #64]	; 0x40
 800f1d2:	4286      	cmp	r6, r0
 800f1d4:	d231      	bcs.n	800f23a <_RemoveHoles+0x146>
 800f1d6:	6053      	str	r3, [r2, #4]
 800f1d8:	4618      	mov	r0, r3
 800f1da:	4622      	mov	r2, r4
 800f1dc:	f00f fc42 	bl	801ea64 <memmove>
 800f1e0:	4555      	cmp	r5, sl
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	d00b      	beq.n	800f1fe <_RemoveHoles+0x10a>
 800f1e6:	441c      	add	r4, r3
 800f1e8:	4630      	mov	r0, r6
 800f1ea:	4621      	mov	r1, r4
 800f1ec:	f7ff fdd4 	bl	800ed98 <_AddFreeMemory>
 800f1f0:	f1bb 0f00 	cmp.w	fp, #0
 800f1f4:	d001      	beq.n	800f1fa <_RemoveHoles+0x106>
 800f1f6:	4558      	cmp	r0, fp
 800f1f8:	d207      	bcs.n	800f20a <_RemoveHoles+0x116>
 800f1fa:	4623      	mov	r3, r4
 800f1fc:	e78b      	b.n	800f116 <_RemoveHoles+0x22>
 800f1fe:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800f202:	1b92      	subs	r2, r2, r6
 800f204:	f8c8 2034 	str.w	r2, [r8, #52]	; 0x34
 800f208:	e7ed      	b.n	800f1e6 <_RemoveHoles+0xf2>
 800f20a:	2000      	movs	r0, #0
 800f20c:	e78d      	b.n	800f12a <_RemoveHoles+0x36>
 800f20e:	2001      	movs	r0, #1
 800f210:	9001      	str	r0, [sp, #4]
 800f212:	f8d8 0000 	ldr.w	r0, [r8]
 800f216:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800f21a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800f21e:	1b80      	subs	r0, r0, r6
 800f220:	f8c8 0000 	str.w	r0, [r8]
 800f224:	f1be 0f00 	cmp.w	lr, #0
 800f228:	d001      	beq.n	800f22e <_RemoveHoles+0x13a>
 800f22a:	f8ce c004 	str.w	ip, [lr, #4]
 800f22e:	f1bc 0f00 	cmp.w	ip, #0
 800f232:	d005      	beq.n	800f240 <_RemoveHoles+0x14c>
 800f234:	f8cc e000 	str.w	lr, [ip]
 800f238:	e7cd      	b.n	800f1d6 <_RemoveHoles+0xe2>
 800f23a:	2000      	movs	r0, #0
 800f23c:	9001      	str	r0, [sp, #4]
 800f23e:	e7e8      	b.n	800f212 <_RemoveHoles+0x11e>
 800f240:	9801      	ldr	r0, [sp, #4]
 800f242:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
 800f246:	f8c0 e044 	str.w	lr, [r0, #68]	; 0x44
 800f24a:	e7c4      	b.n	800f1d6 <_RemoveHoles+0xe2>
 800f24c:	200f      	movs	r0, #15
 800f24e:	9001      	str	r0, [sp, #4]
 800f250:	e7df      	b.n	800f212 <_RemoveHoles+0x11e>
 800f252:	200e      	movs	r0, #14
 800f254:	9001      	str	r0, [sp, #4]
 800f256:	e7dc      	b.n	800f212 <_RemoveHoles+0x11e>
 800f258:	200d      	movs	r0, #13
 800f25a:	9001      	str	r0, [sp, #4]
 800f25c:	e7d9      	b.n	800f212 <_RemoveHoles+0x11e>
 800f25e:	200c      	movs	r0, #12
 800f260:	9001      	str	r0, [sp, #4]
 800f262:	e7d6      	b.n	800f212 <_RemoveHoles+0x11e>
 800f264:	2009      	movs	r0, #9
 800f266:	9001      	str	r0, [sp, #4]
 800f268:	e7d3      	b.n	800f212 <_RemoveHoles+0x11e>
 800f26a:	2008      	movs	r0, #8
 800f26c:	9001      	str	r0, [sp, #4]
 800f26e:	e7d0      	b.n	800f212 <_RemoveHoles+0x11e>
 800f270:	200b      	movs	r0, #11
 800f272:	9001      	str	r0, [sp, #4]
 800f274:	e7cd      	b.n	800f212 <_RemoveHoles+0x11e>
 800f276:	200a      	movs	r0, #10
 800f278:	9001      	str	r0, [sp, #4]
 800f27a:	e7ca      	b.n	800f212 <_RemoveHoles+0x11e>
 800f27c:	2004      	movs	r0, #4
 800f27e:	9001      	str	r0, [sp, #4]
 800f280:	e7c7      	b.n	800f212 <_RemoveHoles+0x11e>
 800f282:	2003      	movs	r0, #3
 800f284:	9001      	str	r0, [sp, #4]
 800f286:	e7c4      	b.n	800f212 <_RemoveHoles+0x11e>
 800f288:	2007      	movs	r0, #7
 800f28a:	9001      	str	r0, [sp, #4]
 800f28c:	e7c1      	b.n	800f212 <_RemoveHoles+0x11e>
 800f28e:	2006      	movs	r0, #6
 800f290:	9001      	str	r0, [sp, #4]
 800f292:	e7be      	b.n	800f212 <_RemoveHoles+0x11e>
 800f294:	2005      	movs	r0, #5
 800f296:	9001      	str	r0, [sp, #4]
 800f298:	e7bb      	b.n	800f212 <_RemoveHoles+0x11e>
 800f29a:	2002      	movs	r0, #2
 800f29c:	9001      	str	r0, [sp, #4]
 800f29e:	e7b8      	b.n	800f212 <_RemoveHoles+0x11e>
 800f2a0:	20030760 	.word	0x20030760

0800f2a4 <_EnlargeBlocks>:
 800f2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2a8:	4c32      	ldr	r4, [pc, #200]	; (800f374 <_EnlargeBlocks+0xd0>)
 800f2aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f2ac:	b973      	cbnz	r3, 800f2cc <_EnlargeBlocks+0x28>
 800f2ae:	4b32      	ldr	r3, [pc, #200]	; (800f378 <_EnlargeBlocks+0xd4>)
 800f2b0:	689d      	ldr	r5, [r3, #8]
 800f2b2:	685b      	ldr	r3, [r3, #4]
 800f2b4:	3508      	adds	r5, #8
 800f2b6:	fbb3 f5f5 	udiv	r5, r3, r5
 800f2ba:	3502      	adds	r5, #2
 800f2bc:	00e8      	lsls	r0, r5, #3
 800f2be:	f000 f85f 	bl	800f380 <_Alloc>
 800f2c2:	4607      	mov	r7, r0
 800f2c4:	b960      	cbnz	r0, 800f2e0 <_EnlargeBlocks+0x3c>
 800f2c6:	2001      	movs	r0, #1
 800f2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2cc:	6923      	ldr	r3, [r4, #16]
 800f2ce:	1d1d      	adds	r5, r3, #4
 800f2d0:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
 800f2d4:	00e8      	lsls	r0, r5, #3
 800f2d6:	f000 f853 	bl	800f380 <_Alloc>
 800f2da:	4607      	mov	r7, r0
 800f2dc:	2800      	cmp	r0, #0
 800f2de:	d0f2      	beq.n	800f2c6 <_EnlargeBlocks+0x22>
 800f2e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2e2:	6922      	ldr	r2, [r4, #16]
 800f2e4:	4b25      	ldr	r3, [pc, #148]	; (800f37c <_EnlargeBlocks+0xd8>)
 800f2e6:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800f2f0:	00d2      	lsls	r2, r2, #3
 800f2f2:	6846      	ldr	r6, [r0, #4]
 800f2f4:	3608      	adds	r6, #8
 800f2f6:	4630      	mov	r0, r6
 800f2f8:	4798      	blx	r3
 800f2fa:	6920      	ldr	r0, [r4, #16]
 800f2fc:	6366      	str	r6, [r4, #52]	; 0x34
 800f2fe:	1e69      	subs	r1, r5, #1
 800f300:	4288      	cmp	r0, r1
 800f302:	62e7      	str	r7, [r4, #44]	; 0x2c
 800f304:	d233      	bcs.n	800f36e <_EnlargeBlocks+0xca>
 800f306:	eb06 02c0 	add.w	r2, r6, r0, lsl #3
 800f30a:	4603      	mov	r3, r0
 800f30c:	3301      	adds	r3, #1
 800f30e:	428b      	cmp	r3, r1
 800f310:	6053      	str	r3, [r2, #4]
 800f312:	f102 0208 	add.w	r2, r2, #8
 800f316:	d1f9      	bne.n	800f30c <_EnlargeBlocks+0x68>
 800f318:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800f31c:	2600      	movs	r6, #0
 800f31e:	604e      	str	r6, [r1, #4]
 800f320:	6863      	ldr	r3, [r4, #4]
 800f322:	6260      	str	r0, [r4, #36]	; 0x24
 800f324:	1a1b      	subs	r3, r3, r0
 800f326:	442b      	add	r3, r5
 800f328:	6125      	str	r5, [r4, #16]
 800f32a:	6063      	str	r3, [r4, #4]
 800f32c:	4c11      	ldr	r4, [pc, #68]	; (800f374 <_EnlargeBlocks+0xd0>)
 800f32e:	f1b8 0f00 	cmp.w	r8, #0
 800f332:	d019      	beq.n	800f368 <_EnlargeBlocks+0xc4>
 800f334:	f002 f9a2 	bl	801167c <GUI_Lock>
 800f338:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f33a:	ea4f 05c8 	mov.w	r5, r8, lsl #3
 800f33e:	442b      	add	r3, r5
 800f340:	6859      	ldr	r1, [r3, #4]
 800f342:	6848      	ldr	r0, [r1, #4]
 800f344:	f7ff fd28 	bl	800ed98 <_AddFreeMemory>
 800f348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f34a:	6863      	ldr	r3, [r4, #4]
 800f34c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800f34e:	440d      	add	r5, r1
 800f350:	3301      	adds	r3, #1
 800f352:	6063      	str	r3, [r4, #4]
 800f354:	606a      	str	r2, [r5, #4]
 800f356:	f801 6038 	strb.w	r6, [r1, r8, lsl #3]
 800f35a:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
 800f35e:	f002 f983 	bl	8011668 <GUI_Unlock>
 800f362:	4630      	mov	r0, r6
 800f364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f368:	4640      	mov	r0, r8
 800f36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f36e:	4601      	mov	r1, r0
 800f370:	e7d2      	b.n	800f318 <_EnlargeBlocks+0x74>
 800f372:	bf00      	nop
 800f374:	20030760 	.word	0x20030760
 800f378:	2002e1cc 	.word	0x2002e1cc
 800f37c:	200000c8 	.word	0x200000c8

0800f380 <_Alloc>:
 800f380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f384:	4cc0      	ldr	r4, [pc, #768]	; (800f688 <_Alloc+0x308>)
 800f386:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f38a:	4605      	mov	r5, r0
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	f000 80f8 	beq.w	800f582 <_Alloc+0x202>
 800f392:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800f394:	6823      	ldr	r3, [r4, #0]
 800f396:	4285      	cmp	r5, r0
 800f398:	bf24      	itt	cs
 800f39a:	1ce8      	addcs	r0, r5, #3
 800f39c:	f020 0003 	biccs.w	r0, r0, #3
 800f3a0:	f100 060c 	add.w	r6, r0, #12
 800f3a4:	42b3      	cmp	r3, r6
 800f3a6:	4db8      	ldr	r5, [pc, #736]	; (800f688 <_Alloc+0x308>)
 800f3a8:	d202      	bcs.n	800f3b0 <_Alloc+0x30>
 800f3aa:	2000      	movs	r0, #0
 800f3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3b0:	686b      	ldr	r3, [r5, #4]
 800f3b2:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800f3b4:	4293      	cmp	r3, r2
 800f3b6:	f240 8154 	bls.w	800f662 <_Alloc+0x2e2>
 800f3ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f3bc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f3be:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800f3c2:	3b01      	subs	r3, #1
 800f3c4:	eb02 0108 	add.w	r1, r2, r8
 800f3c8:	6063      	str	r3, [r4, #4]
 800f3ca:	684b      	ldr	r3, [r1, #4]
 800f3cc:	6263      	str	r3, [r4, #36]	; 0x24
 800f3ce:	2301      	movs	r3, #1
 800f3d0:	f802 3035 	strb.w	r3, [r2, r5, lsl #3]
 800f3d4:	2d00      	cmp	r5, #0
 800f3d6:	d0e8      	beq.n	800f3aa <_Alloc+0x2a>
 800f3d8:	4fab      	ldr	r7, [pc, #684]	; (800f688 <_Alloc+0x308>)
 800f3da:	f8d4 e0b8 	ldr.w	lr, [r4, #184]	; 0xb8
 800f3de:	4576      	cmp	r6, lr
 800f3e0:	f080 8121 	bcs.w	800f626 <_Alloc+0x2a6>
 800f3e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f3e8:	429e      	cmp	r6, r3
 800f3ea:	f080 811e 	bcs.w	800f62a <_Alloc+0x2aa>
 800f3ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f3f2:	429e      	cmp	r6, r3
 800f3f4:	f080 811b 	bcs.w	800f62e <_Alloc+0x2ae>
 800f3f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f3fc:	429e      	cmp	r6, r3
 800f3fe:	f080 811a 	bcs.w	800f636 <_Alloc+0x2b6>
 800f402:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800f406:	429e      	cmp	r6, r3
 800f408:	f080 8113 	bcs.w	800f632 <_Alloc+0x2b2>
 800f40c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f410:	429e      	cmp	r6, r3
 800f412:	f080 8114 	bcs.w	800f63e <_Alloc+0x2be>
 800f416:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f41a:	429e      	cmp	r6, r3
 800f41c:	f080 810d 	bcs.w	800f63a <_Alloc+0x2ba>
 800f420:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f424:	429e      	cmp	r6, r3
 800f426:	f080 810e 	bcs.w	800f646 <_Alloc+0x2c6>
 800f42a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f42c:	429e      	cmp	r6, r3
 800f42e:	f080 8108 	bcs.w	800f642 <_Alloc+0x2c2>
 800f432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f434:	429e      	cmp	r6, r3
 800f436:	f080 810a 	bcs.w	800f64e <_Alloc+0x2ce>
 800f43a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800f43c:	429e      	cmp	r6, r3
 800f43e:	f080 8104 	bcs.w	800f64a <_Alloc+0x2ca>
 800f442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f444:	429e      	cmp	r6, r3
 800f446:	f080 8104 	bcs.w	800f652 <_Alloc+0x2d2>
 800f44a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f44c:	429e      	cmp	r6, r3
 800f44e:	f080 8102 	bcs.w	800f656 <_Alloc+0x2d6>
 800f452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f454:	429e      	cmp	r6, r3
 800f456:	f080 8102 	bcs.w	800f65e <_Alloc+0x2de>
 800f45a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f45c:	429e      	cmp	r6, r3
 800f45e:	f080 80fc 	bcs.w	800f65a <_Alloc+0x2da>
 800f462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f464:	429e      	cmp	r6, r3
 800f466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f46a:	bf28      	it	cs
 800f46c:	2300      	movcs	r3, #0
 800f46e:	2b0f      	cmp	r3, #15
 800f470:	d812      	bhi.n	800f498 <_Alloc+0x118>
 800f472:	2100      	movs	r1, #0
 800f474:	eb04 00c1 	add.w	r0, r4, r1, lsl #3
 800f478:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800f47a:	b92b      	cbnz	r3, 800f488 <_Alloc+0x108>
 800f47c:	e007      	b.n	800f48e <_Alloc+0x10e>
 800f47e:	685a      	ldr	r2, [r3, #4]
 800f480:	4296      	cmp	r6, r2
 800f482:	d91d      	bls.n	800f4c0 <_Alloc+0x140>
 800f484:	689b      	ldr	r3, [r3, #8]
 800f486:	b113      	cbz	r3, 800f48e <_Alloc+0x10e>
 800f488:	689b      	ldr	r3, [r3, #8]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d1f7      	bne.n	800f47e <_Alloc+0xfe>
 800f48e:	3101      	adds	r1, #1
 800f490:	2910      	cmp	r1, #16
 800f492:	f100 0008 	add.w	r0, r0, #8
 800f496:	d1ef      	bne.n	800f478 <_Alloc+0xf8>
 800f498:	4630      	mov	r0, r6
 800f49a:	f7ff fe2b 	bl	800f0f4 <_RemoveHoles>
 800f49e:	2800      	cmp	r0, #0
 800f4a0:	d09b      	beq.n	800f3da <_Alloc+0x5a>
 800f4a2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f4a4:	6863      	ldr	r3, [r4, #4]
 800f4a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f4a8:	4490      	add	r8, r2
 800f4aa:	2600      	movs	r6, #0
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	6063      	str	r3, [r4, #4]
 800f4b0:	f8c8 1004 	str.w	r1, [r8, #4]
 800f4b4:	f802 6035 	strb.w	r6, [r2, r5, lsl #3]
 800f4b8:	4630      	mov	r0, r6
 800f4ba:	6265      	str	r5, [r4, #36]	; 0x24
 800f4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4c0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f4c2:	1b97      	subs	r7, r2, r6
 800f4c4:	f101 000c 	add.w	r0, r1, #12
 800f4c8:	4287      	cmp	r7, r0
 800f4ca:	bf2c      	ite	cs
 800f4cc:	4630      	movcs	r0, r6
 800f4ce:	4610      	movcc	r0, r2
 800f4d0:	4596      	cmp	lr, r2
 800f4d2:	f240 80f5 	bls.w	800f6c0 <_Alloc+0x340>
 800f4d6:	f8d4 70b0 	ldr.w	r7, [r4, #176]	; 0xb0
 800f4da:	4e6b      	ldr	r6, [pc, #428]	; (800f688 <_Alloc+0x308>)
 800f4dc:	42ba      	cmp	r2, r7
 800f4de:	f080 80f1 	bcs.w	800f6c4 <_Alloc+0x344>
 800f4e2:	f8d6 70a8 	ldr.w	r7, [r6, #168]	; 0xa8
 800f4e6:	42ba      	cmp	r2, r7
 800f4e8:	f080 80e8 	bcs.w	800f6bc <_Alloc+0x33c>
 800f4ec:	f8d6 70a0 	ldr.w	r7, [r6, #160]	; 0xa0
 800f4f0:	42ba      	cmp	r2, r7
 800f4f2:	f080 80cd 	bcs.w	800f690 <_Alloc+0x310>
 800f4f6:	f8d6 7098 	ldr.w	r7, [r6, #152]	; 0x98
 800f4fa:	42ba      	cmp	r2, r7
 800f4fc:	f080 80d8 	bcs.w	800f6b0 <_Alloc+0x330>
 800f500:	f8d6 7090 	ldr.w	r7, [r6, #144]	; 0x90
 800f504:	4297      	cmp	r7, r2
 800f506:	f240 80df 	bls.w	800f6c8 <_Alloc+0x348>
 800f50a:	f8d6 7088 	ldr.w	r7, [r6, #136]	; 0x88
 800f50e:	4297      	cmp	r7, r2
 800f510:	f240 80de 	bls.w	800f6d0 <_Alloc+0x350>
 800f514:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 800f518:	4297      	cmp	r7, r2
 800f51a:	f240 80d7 	bls.w	800f6cc <_Alloc+0x34c>
 800f51e:	6fb7      	ldr	r7, [r6, #120]	; 0x78
 800f520:	4297      	cmp	r7, r2
 800f522:	f240 80e5 	bls.w	800f6f0 <_Alloc+0x370>
 800f526:	6f36      	ldr	r6, [r6, #112]	; 0x70
 800f528:	4296      	cmp	r6, r2
 800f52a:	f240 80df 	bls.w	800f6ec <_Alloc+0x36c>
 800f52e:	6ea6      	ldr	r6, [r4, #104]	; 0x68
 800f530:	4f55      	ldr	r7, [pc, #340]	; (800f688 <_Alloc+0x308>)
 800f532:	4296      	cmp	r6, r2
 800f534:	f240 80d8 	bls.w	800f6e8 <_Alloc+0x368>
 800f538:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 800f53a:	4296      	cmp	r6, r2
 800f53c:	f240 80d2 	bls.w	800f6e4 <_Alloc+0x364>
 800f540:	6dbe      	ldr	r6, [r7, #88]	; 0x58
 800f542:	42b2      	cmp	r2, r6
 800f544:	f080 80cc 	bcs.w	800f6e0 <_Alloc+0x360>
 800f548:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800f54a:	4296      	cmp	r6, r2
 800f54c:	f240 80c6 	bls.w	800f6dc <_Alloc+0x35c>
 800f550:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 800f552:	42b2      	cmp	r2, r6
 800f554:	f080 80c0 	bcs.w	800f6d8 <_Alloc+0x358>
 800f558:	4291      	cmp	r1, r2
 800f55a:	f240 80bb 	bls.w	800f6d4 <_Alloc+0x354>
 800f55e:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800f560:	1819      	adds	r1, r3, r0
 800f562:	44a0      	add	r8, r4
 800f564:	4290      	cmp	r0, r2
 800f566:	f04f 0400 	mov.w	r4, #0
 800f56a:	f8c8 3004 	str.w	r3, [r8, #4]
 800f56e:	601d      	str	r5, [r3, #0]
 800f570:	6058      	str	r0, [r3, #4]
 800f572:	611b      	str	r3, [r3, #16]
 800f574:	609c      	str	r4, [r3, #8]
 800f576:	f841 0c04 	str.w	r0, [r1, #-4]
 800f57a:	db7e      	blt.n	800f67a <_Alloc+0x2fa>
 800f57c:	4628      	mov	r0, r5
 800f57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f582:	4b42      	ldr	r3, [pc, #264]	; (800f68c <_Alloc+0x30c>)
 800f584:	689a      	ldr	r2, [r3, #8]
 800f586:	6858      	ldr	r0, [r3, #4]
 800f588:	2101      	movs	r1, #1
 800f58a:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 800f58e:	b90a      	cbnz	r2, 800f594 <_Alloc+0x214>
 800f590:	0882      	lsrs	r2, r0, #2
 800f592:	609a      	str	r2, [r3, #8]
 800f594:	265a      	movs	r6, #90	; 0x5a
 800f596:	6226      	str	r6, [r4, #32]
 800f598:	2710      	movs	r7, #16
 800f59a:	2220      	movs	r2, #32
 800f59c:	2640      	movs	r6, #64	; 0x40
 800f59e:	6819      	ldr	r1, [r3, #0]
 800f5a0:	6427      	str	r7, [r4, #64]	; 0x40
 800f5a2:	64a2      	str	r2, [r4, #72]	; 0x48
 800f5a4:	6526      	str	r6, [r4, #80]	; 0x50
 800f5a6:	2780      	movs	r7, #128	; 0x80
 800f5a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f5ac:	f44f 7600 	mov.w	r6, #512	; 0x200
 800f5b0:	65a7      	str	r7, [r4, #88]	; 0x58
 800f5b2:	6622      	str	r2, [r4, #96]	; 0x60
 800f5b4:	66a6      	str	r6, [r4, #104]	; 0x68
 800f5b6:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800f5ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f5be:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800f5c2:	f1a1 0314 	sub.w	r3, r1, #20
 800f5c6:	6727      	str	r7, [r4, #112]	; 0x70
 800f5c8:	67a2      	str	r2, [r4, #120]	; 0x78
 800f5ca:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 800f5ce:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 800f5d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f5d6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 800f5da:	4403      	add	r3, r0
 800f5dc:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
 800f5e0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800f5e4:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 800f5e8:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800f5ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f5f0:	f44f 2680 	mov.w	r6, #262144	; 0x40000
 800f5f4:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
 800f5f8:	f8c4 20a8 	str.w	r2, [r4, #168]	; 0xa8
 800f5fc:	f8c4 60b0 	str.w	r6, [r4, #176]	; 0xb0
 800f600:	2202      	movs	r2, #2
 800f602:	2601      	movs	r6, #1
 800f604:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 800f608:	63a1      	str	r1, [r4, #56]	; 0x38
 800f60a:	6363      	str	r3, [r4, #52]	; 0x34
 800f60c:	6122      	str	r2, [r4, #16]
 800f60e:	60e0      	str	r0, [r4, #12]
 800f610:	f8c4 70b8 	str.w	r7, [r4, #184]	; 0xb8
 800f614:	605e      	str	r6, [r3, #4]
 800f616:	6266      	str	r6, [r4, #36]	; 0x24
 800f618:	6066      	str	r6, [r4, #4]
 800f61a:	f7ff fbbd 	bl	800ed98 <_AddFreeMemory>
 800f61e:	f7ff fe41 	bl	800f2a4 <_EnlargeBlocks>
 800f622:	6326      	str	r6, [r4, #48]	; 0x30
 800f624:	e6b5      	b.n	800f392 <_Alloc+0x12>
 800f626:	210f      	movs	r1, #15
 800f628:	e724      	b.n	800f474 <_Alloc+0xf4>
 800f62a:	210e      	movs	r1, #14
 800f62c:	e722      	b.n	800f474 <_Alloc+0xf4>
 800f62e:	210d      	movs	r1, #13
 800f630:	e720      	b.n	800f474 <_Alloc+0xf4>
 800f632:	210b      	movs	r1, #11
 800f634:	e71e      	b.n	800f474 <_Alloc+0xf4>
 800f636:	210c      	movs	r1, #12
 800f638:	e71c      	b.n	800f474 <_Alloc+0xf4>
 800f63a:	2109      	movs	r1, #9
 800f63c:	e71a      	b.n	800f474 <_Alloc+0xf4>
 800f63e:	210a      	movs	r1, #10
 800f640:	e718      	b.n	800f474 <_Alloc+0xf4>
 800f642:	2107      	movs	r1, #7
 800f644:	e716      	b.n	800f474 <_Alloc+0xf4>
 800f646:	2108      	movs	r1, #8
 800f648:	e714      	b.n	800f474 <_Alloc+0xf4>
 800f64a:	2105      	movs	r1, #5
 800f64c:	e712      	b.n	800f474 <_Alloc+0xf4>
 800f64e:	2106      	movs	r1, #6
 800f650:	e710      	b.n	800f474 <_Alloc+0xf4>
 800f652:	2104      	movs	r1, #4
 800f654:	e70e      	b.n	800f474 <_Alloc+0xf4>
 800f656:	2103      	movs	r1, #3
 800f658:	e70c      	b.n	800f474 <_Alloc+0xf4>
 800f65a:	2101      	movs	r1, #1
 800f65c:	e70a      	b.n	800f474 <_Alloc+0xf4>
 800f65e:	2102      	movs	r1, #2
 800f660:	e708      	b.n	800f474 <_Alloc+0xf4>
 800f662:	3a01      	subs	r2, #1
 800f664:	632a      	str	r2, [r5, #48]	; 0x30
 800f666:	f7ff fe1d 	bl	800f2a4 <_EnlargeBlocks>
 800f66a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800f66c:	3301      	adds	r3, #1
 800f66e:	632b      	str	r3, [r5, #48]	; 0x30
 800f670:	2800      	cmp	r0, #0
 800f672:	f47f ae9a 	bne.w	800f3aa <_Alloc+0x2a>
 800f676:	686b      	ldr	r3, [r5, #4]
 800f678:	e69f      	b.n	800f3ba <_Alloc+0x3a>
 800f67a:	1a10      	subs	r0, r2, r0
 800f67c:	f7ff fb8c 	bl	800ed98 <_AddFreeMemory>
 800f680:	4628      	mov	r0, r5
 800f682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f686:	bf00      	nop
 800f688:	20030760 	.word	0x20030760
 800f68c:	2002e1cc 	.word	0x2002e1cc
 800f690:	210c      	movs	r1, #12
 800f692:	6826      	ldr	r6, [r4, #0]
 800f694:	689f      	ldr	r7, [r3, #8]
 800f696:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800f69a:	1ab6      	subs	r6, r6, r2
 800f69c:	6026      	str	r6, [r4, #0]
 800f69e:	b10f      	cbz	r7, 800f6a4 <_Alloc+0x324>
 800f6a0:	f8c7 e004 	str.w	lr, [r7, #4]
 800f6a4:	f1be 0f00 	cmp.w	lr, #0
 800f6a8:	d004      	beq.n	800f6b4 <_Alloc+0x334>
 800f6aa:	f8ce 7000 	str.w	r7, [lr]
 800f6ae:	e756      	b.n	800f55e <_Alloc+0x1de>
 800f6b0:	210b      	movs	r1, #11
 800f6b2:	e7ee      	b.n	800f692 <_Alloc+0x312>
 800f6b4:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800f6b8:	644f      	str	r7, [r1, #68]	; 0x44
 800f6ba:	e750      	b.n	800f55e <_Alloc+0x1de>
 800f6bc:	210d      	movs	r1, #13
 800f6be:	e7e8      	b.n	800f692 <_Alloc+0x312>
 800f6c0:	210f      	movs	r1, #15
 800f6c2:	e7e6      	b.n	800f692 <_Alloc+0x312>
 800f6c4:	210e      	movs	r1, #14
 800f6c6:	e7e4      	b.n	800f692 <_Alloc+0x312>
 800f6c8:	210a      	movs	r1, #10
 800f6ca:	e7e2      	b.n	800f692 <_Alloc+0x312>
 800f6cc:	2108      	movs	r1, #8
 800f6ce:	e7e0      	b.n	800f692 <_Alloc+0x312>
 800f6d0:	2109      	movs	r1, #9
 800f6d2:	e7de      	b.n	800f692 <_Alloc+0x312>
 800f6d4:	2100      	movs	r1, #0
 800f6d6:	e7dc      	b.n	800f692 <_Alloc+0x312>
 800f6d8:	2101      	movs	r1, #1
 800f6da:	e7da      	b.n	800f692 <_Alloc+0x312>
 800f6dc:	2102      	movs	r1, #2
 800f6de:	e7d8      	b.n	800f692 <_Alloc+0x312>
 800f6e0:	2103      	movs	r1, #3
 800f6e2:	e7d6      	b.n	800f692 <_Alloc+0x312>
 800f6e4:	2104      	movs	r1, #4
 800f6e6:	e7d4      	b.n	800f692 <_Alloc+0x312>
 800f6e8:	2105      	movs	r1, #5
 800f6ea:	e7d2      	b.n	800f692 <_Alloc+0x312>
 800f6ec:	2106      	movs	r1, #6
 800f6ee:	e7d0      	b.n	800f692 <_Alloc+0x312>
 800f6f0:	2107      	movs	r1, #7
 800f6f2:	e7ce      	b.n	800f692 <_Alloc+0x312>

0800f6f4 <GUI_ALLOC_FreeFixedBlock>:
 800f6f4:	b128      	cbz	r0, 800f702 <GUI_ALLOC_FreeFixedBlock+0xe>
 800f6f6:	4a03      	ldr	r2, [pc, #12]	; (800f704 <GUI_ALLOC_FreeFixedBlock+0x10>)
 800f6f8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800f6fa:	6003      	str	r3, [r0, #0]
 800f6fc:	b103      	cbz	r3, 800f700 <GUI_ALLOC_FreeFixedBlock+0xc>
 800f6fe:	6058      	str	r0, [r3, #4]
 800f700:	63d0      	str	r0, [r2, #60]	; 0x3c
 800f702:	4770      	bx	lr
 800f704:	20030760 	.word	0x20030760

0800f708 <GUI_ALLOC_GetFixedBlock>:
 800f708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f70a:	4e89      	ldr	r6, [pc, #548]	; (800f930 <GUI_ALLOC_GetFixedBlock+0x228>)
 800f70c:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
 800f710:	4604      	mov	r4, r0
 800f712:	2b00      	cmp	r3, #0
 800f714:	d02f      	beq.n	800f776 <GUI_ALLOC_GetFixedBlock+0x6e>
 800f716:	3403      	adds	r4, #3
 800f718:	6c35      	ldr	r5, [r6, #64]	; 0x40
 800f71a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 800f71c:	f024 0403 	bic.w	r4, r4, #3
 800f720:	3404      	adds	r4, #4
 800f722:	42a5      	cmp	r5, r4
 800f724:	bf38      	it	cc
 800f726:	4625      	movcc	r5, r4
 800f728:	b162      	cbz	r2, 800f744 <GUI_ALLOC_GetFixedBlock+0x3c>
 800f72a:	f852 3c04 	ldr.w	r3, [r2, #-4]
 800f72e:	429d      	cmp	r5, r3
 800f730:	4614      	mov	r4, r2
 800f732:	d104      	bne.n	800f73e <GUI_ALLOC_GetFixedBlock+0x36>
 800f734:	e014      	b.n	800f760 <GUI_ALLOC_GetFixedBlock+0x58>
 800f736:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f73a:	429d      	cmp	r5, r3
 800f73c:	d010      	beq.n	800f760 <GUI_ALLOC_GetFixedBlock+0x58>
 800f73e:	6824      	ldr	r4, [r4, #0]
 800f740:	2c00      	cmp	r4, #0
 800f742:	d1f8      	bne.n	800f736 <GUI_ALLOC_GetFixedBlock+0x2e>
 800f744:	68f3      	ldr	r3, [r6, #12]
 800f746:	6bb4      	ldr	r4, [r6, #56]	; 0x38
 800f748:	441c      	add	r4, r3
 800f74a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800f74e:	1a61      	subs	r1, r4, r1
 800f750:	680b      	ldr	r3, [r1, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d165      	bne.n	800f822 <GUI_ALLOC_GetFixedBlock+0x11a>
 800f756:	684b      	ldr	r3, [r1, #4]
 800f758:	429d      	cmp	r5, r3
 800f75a:	dd6c      	ble.n	800f836 <GUI_ALLOC_GetFixedBlock+0x12e>
 800f75c:	2400      	movs	r4, #0
 800f75e:	e008      	b.n	800f772 <GUI_ALLOC_GetFixedBlock+0x6a>
 800f760:	6823      	ldr	r3, [r4, #0]
 800f762:	b10b      	cbz	r3, 800f768 <GUI_ALLOC_GetFixedBlock+0x60>
 800f764:	6861      	ldr	r1, [r4, #4]
 800f766:	6059      	str	r1, [r3, #4]
 800f768:	6861      	ldr	r1, [r4, #4]
 800f76a:	b101      	cbz	r1, 800f76e <GUI_ALLOC_GetFixedBlock+0x66>
 800f76c:	600b      	str	r3, [r1, #0]
 800f76e:	42a2      	cmp	r2, r4
 800f770:	d053      	beq.n	800f81a <GUI_ALLOC_GetFixedBlock+0x112>
 800f772:	4620      	mov	r0, r4
 800f774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f776:	4b6f      	ldr	r3, [pc, #444]	; (800f934 <GUI_ALLOC_GetFixedBlock+0x22c>)
 800f778:	689a      	ldr	r2, [r3, #8]
 800f77a:	6858      	ldr	r0, [r3, #4]
 800f77c:	2101      	movs	r1, #1
 800f77e:	f886 1028 	strb.w	r1, [r6, #40]	; 0x28
 800f782:	b90a      	cbnz	r2, 800f788 <GUI_ALLOC_GetFixedBlock+0x80>
 800f784:	0882      	lsrs	r2, r0, #2
 800f786:	609a      	str	r2, [r3, #8]
 800f788:	255a      	movs	r5, #90	; 0x5a
 800f78a:	6235      	str	r5, [r6, #32]
 800f78c:	2710      	movs	r7, #16
 800f78e:	2220      	movs	r2, #32
 800f790:	2540      	movs	r5, #64	; 0x40
 800f792:	6819      	ldr	r1, [r3, #0]
 800f794:	6437      	str	r7, [r6, #64]	; 0x40
 800f796:	64b2      	str	r2, [r6, #72]	; 0x48
 800f798:	6535      	str	r5, [r6, #80]	; 0x50
 800f79a:	2780      	movs	r7, #128	; 0x80
 800f79c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f7a0:	f44f 7500 	mov.w	r5, #512	; 0x200
 800f7a4:	65b7      	str	r7, [r6, #88]	; 0x58
 800f7a6:	6632      	str	r2, [r6, #96]	; 0x60
 800f7a8:	66b5      	str	r5, [r6, #104]	; 0x68
 800f7aa:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800f7ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f7b2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 800f7b6:	f1a1 0314 	sub.w	r3, r1, #20
 800f7ba:	6737      	str	r7, [r6, #112]	; 0x70
 800f7bc:	67b2      	str	r2, [r6, #120]	; 0x78
 800f7be:	f8c6 5080 	str.w	r5, [r6, #128]	; 0x80
 800f7c2:	f44f 5700 	mov.w	r7, #8192	; 0x2000
 800f7c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f7ca:	f44f 4500 	mov.w	r5, #32768	; 0x8000
 800f7ce:	4403      	add	r3, r0
 800f7d0:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
 800f7d4:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 800f7d8:	f8c6 5098 	str.w	r5, [r6, #152]	; 0x98
 800f7dc:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800f7e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f7e4:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800f7e8:	f8c6 70a0 	str.w	r7, [r6, #160]	; 0xa0
 800f7ec:	f8c6 20a8 	str.w	r2, [r6, #168]	; 0xa8
 800f7f0:	f8c6 50b0 	str.w	r5, [r6, #176]	; 0xb0
 800f7f4:	2202      	movs	r2, #2
 800f7f6:	2501      	movs	r5, #1
 800f7f8:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 800f7fc:	63b1      	str	r1, [r6, #56]	; 0x38
 800f7fe:	6373      	str	r3, [r6, #52]	; 0x34
 800f800:	6132      	str	r2, [r6, #16]
 800f802:	60f0      	str	r0, [r6, #12]
 800f804:	f8c6 70b8 	str.w	r7, [r6, #184]	; 0xb8
 800f808:	605d      	str	r5, [r3, #4]
 800f80a:	6275      	str	r5, [r6, #36]	; 0x24
 800f80c:	6075      	str	r5, [r6, #4]
 800f80e:	f7ff fac3 	bl	800ed98 <_AddFreeMemory>
 800f812:	f7ff fd47 	bl	800f2a4 <_EnlargeBlocks>
 800f816:	6335      	str	r5, [r6, #48]	; 0x30
 800f818:	e77d      	b.n	800f716 <GUI_ALLOC_GetFixedBlock+0xe>
 800f81a:	6823      	ldr	r3, [r4, #0]
 800f81c:	63f3      	str	r3, [r6, #60]	; 0x3c
 800f81e:	4620      	mov	r0, r4
 800f820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f822:	2000      	movs	r0, #0
 800f824:	f7ff fc66 	bl	800f0f4 <_RemoveHoles>
 800f828:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800f82c:	1a61      	subs	r1, r4, r1
 800f82e:	680b      	ldr	r3, [r1, #0]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d193      	bne.n	800f75c <GUI_ALLOC_GetFixedBlock+0x54>
 800f834:	e78f      	b.n	800f756 <GUI_ALLOC_GetFixedBlock+0x4e>
 800f836:	f8d6 70b8 	ldr.w	r7, [r6, #184]	; 0xb8
 800f83a:	4a3d      	ldr	r2, [pc, #244]	; (800f930 <GUI_ALLOC_GetFixedBlock+0x228>)
 800f83c:	1b58      	subs	r0, r3, r5
 800f83e:	1d04      	adds	r4, r0, #4
 800f840:	42bb      	cmp	r3, r7
 800f842:	440c      	add	r4, r1
 800f844:	d272      	bcs.n	800f92c <GUI_ALLOC_GetFixedBlock+0x224>
 800f846:	f8d2 70b0 	ldr.w	r7, [r2, #176]	; 0xb0
 800f84a:	42bb      	cmp	r3, r7
 800f84c:	d26c      	bcs.n	800f928 <GUI_ALLOC_GetFixedBlock+0x220>
 800f84e:	f8d2 70a8 	ldr.w	r7, [r2, #168]	; 0xa8
 800f852:	42bb      	cmp	r3, r7
 800f854:	d266      	bcs.n	800f924 <GUI_ALLOC_GetFixedBlock+0x21c>
 800f856:	f8d2 70a0 	ldr.w	r7, [r2, #160]	; 0xa0
 800f85a:	42bb      	cmp	r3, r7
 800f85c:	d260      	bcs.n	800f920 <GUI_ALLOC_GetFixedBlock+0x218>
 800f85e:	f8d2 7098 	ldr.w	r7, [r2, #152]	; 0x98
 800f862:	429f      	cmp	r7, r3
 800f864:	d95a      	bls.n	800f91c <GUI_ALLOC_GetFixedBlock+0x214>
 800f866:	f8d2 7090 	ldr.w	r7, [r2, #144]	; 0x90
 800f86a:	42bb      	cmp	r3, r7
 800f86c:	d254      	bcs.n	800f918 <GUI_ALLOC_GetFixedBlock+0x210>
 800f86e:	f8d2 7088 	ldr.w	r7, [r2, #136]	; 0x88
 800f872:	42bb      	cmp	r3, r7
 800f874:	d24e      	bcs.n	800f914 <GUI_ALLOC_GetFixedBlock+0x20c>
 800f876:	f8d2 7080 	ldr.w	r7, [r2, #128]	; 0x80
 800f87a:	42bb      	cmp	r3, r7
 800f87c:	d248      	bcs.n	800f910 <GUI_ALLOC_GetFixedBlock+0x208>
 800f87e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800f880:	4293      	cmp	r3, r2
 800f882:	d243      	bcs.n	800f90c <GUI_ALLOC_GetFixedBlock+0x204>
 800f884:	6f37      	ldr	r7, [r6, #112]	; 0x70
 800f886:	4a2a      	ldr	r2, [pc, #168]	; (800f930 <GUI_ALLOC_GetFixedBlock+0x228>)
 800f888:	42bb      	cmp	r3, r7
 800f88a:	d23d      	bcs.n	800f908 <GUI_ALLOC_GetFixedBlock+0x200>
 800f88c:	6e97      	ldr	r7, [r2, #104]	; 0x68
 800f88e:	42bb      	cmp	r3, r7
 800f890:	d238      	bcs.n	800f904 <GUI_ALLOC_GetFixedBlock+0x1fc>
 800f892:	6e17      	ldr	r7, [r2, #96]	; 0x60
 800f894:	42bb      	cmp	r3, r7
 800f896:	d233      	bcs.n	800f900 <GUI_ALLOC_GetFixedBlock+0x1f8>
 800f898:	6d97      	ldr	r7, [r2, #88]	; 0x58
 800f89a:	42bb      	cmp	r3, r7
 800f89c:	d22e      	bcs.n	800f8fc <GUI_ALLOC_GetFixedBlock+0x1f4>
 800f89e:	6d17      	ldr	r7, [r2, #80]	; 0x50
 800f8a0:	42bb      	cmp	r3, r7
 800f8a2:	d229      	bcs.n	800f8f8 <GUI_ALLOC_GetFixedBlock+0x1f0>
 800f8a4:	6c97      	ldr	r7, [r2, #72]	; 0x48
 800f8a6:	42bb      	cmp	r3, r7
 800f8a8:	d224      	bcs.n	800f8f4 <GUI_ALLOC_GetFixedBlock+0x1ec>
 800f8aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f8ac:	4293      	cmp	r3, r2
 800f8ae:	d20c      	bcs.n	800f8ca <GUI_ALLOC_GetFixedBlock+0x1c2>
 800f8b0:	68f2      	ldr	r2, [r6, #12]
 800f8b2:	6973      	ldr	r3, [r6, #20]
 800f8b4:	1b52      	subs	r2, r2, r5
 800f8b6:	442b      	add	r3, r5
 800f8b8:	60f2      	str	r2, [r6, #12]
 800f8ba:	6173      	str	r3, [r6, #20]
 800f8bc:	b910      	cbnz	r0, 800f8c4 <GUI_ALLOC_GetFixedBlock+0x1bc>
 800f8be:	f844 5c04 	str.w	r5, [r4, #-4]
 800f8c2:	e756      	b.n	800f772 <GUI_ALLOC_GetFixedBlock+0x6a>
 800f8c4:	f7ff fa68 	bl	800ed98 <_AddFreeMemory>
 800f8c8:	e7f9      	b.n	800f8be <GUI_ALLOC_GetFixedBlock+0x1b6>
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	6837      	ldr	r7, [r6, #0]
 800f8ce:	f8d1 e008 	ldr.w	lr, [r1, #8]
 800f8d2:	1afb      	subs	r3, r7, r3
 800f8d4:	6033      	str	r3, [r6, #0]
 800f8d6:	68cb      	ldr	r3, [r1, #12]
 800f8d8:	f1be 0f00 	cmp.w	lr, #0
 800f8dc:	d001      	beq.n	800f8e2 <GUI_ALLOC_GetFixedBlock+0x1da>
 800f8de:	f8ce 3004 	str.w	r3, [lr, #4]
 800f8e2:	b113      	cbz	r3, 800f8ea <GUI_ALLOC_GetFixedBlock+0x1e2>
 800f8e4:	f8c3 e000 	str.w	lr, [r3]
 800f8e8:	e7e2      	b.n	800f8b0 <GUI_ALLOC_GetFixedBlock+0x1a8>
 800f8ea:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800f8ee:	f8c2 e044 	str.w	lr, [r2, #68]	; 0x44
 800f8f2:	e7dd      	b.n	800f8b0 <GUI_ALLOC_GetFixedBlock+0x1a8>
 800f8f4:	2201      	movs	r2, #1
 800f8f6:	e7e9      	b.n	800f8cc <GUI_ALLOC_GetFixedBlock+0x1c4>
 800f8f8:	2202      	movs	r2, #2
 800f8fa:	e7e7      	b.n	800f8cc <GUI_ALLOC_GetFixedBlock+0x1c4>
 800f8fc:	2203      	movs	r2, #3
 800f8fe:	e7e5      	b.n	800f8cc <GUI_ALLOC_GetFixedBlock+0x1c4>
 800f900:	2204      	movs	r2, #4
 800f902:	e7e3      	b.n	800f8cc <GUI_ALLOC_GetFixedBlock+0x1c4>
 800f904:	2205      	movs	r2, #5
 800f906:	e7e1      	b.n	800f8cc <GUI_ALLOC_GetFixedBlock+0x1c4>
 800f908:	2206      	movs	r2, #6
 800f90a:	e7df      	b.n	800f8cc <GUI_ALLOC_GetFixedBlock+0x1c4>
 800f90c:	2207      	movs	r2, #7
 800f90e:	e7dd      	b.n	800f8cc <GUI_ALLOC_GetFixedBlock+0x1c4>
 800f910:	2208      	movs	r2, #8
 800f912:	e7db      	b.n	800f8cc <GUI_ALLOC_GetFixedBlock+0x1c4>
 800f914:	2209      	movs	r2, #9
 800f916:	e7d9      	b.n	800f8cc <GUI_ALLOC_GetFixedBlock+0x1c4>
 800f918:	220a      	movs	r2, #10
 800f91a:	e7d7      	b.n	800f8cc <GUI_ALLOC_GetFixedBlock+0x1c4>
 800f91c:	220b      	movs	r2, #11
 800f91e:	e7d5      	b.n	800f8cc <GUI_ALLOC_GetFixedBlock+0x1c4>
 800f920:	220c      	movs	r2, #12
 800f922:	e7d3      	b.n	800f8cc <GUI_ALLOC_GetFixedBlock+0x1c4>
 800f924:	220d      	movs	r2, #13
 800f926:	e7d1      	b.n	800f8cc <GUI_ALLOC_GetFixedBlock+0x1c4>
 800f928:	220e      	movs	r2, #14
 800f92a:	e7cf      	b.n	800f8cc <GUI_ALLOC_GetFixedBlock+0x1c4>
 800f92c:	220f      	movs	r2, #15
 800f92e:	e7cd      	b.n	800f8cc <GUI_ALLOC_GetFixedBlock+0x1c4>
 800f930:	20030760 	.word	0x20030760
 800f934:	2002e1cc 	.word	0x2002e1cc

0800f938 <GUI_ALLOC_AllocNoInit>:
 800f938:	b900      	cbnz	r0, 800f93c <GUI_ALLOC_AllocNoInit+0x4>
 800f93a:	4770      	bx	lr
 800f93c:	b510      	push	{r4, lr}
 800f93e:	4604      	mov	r4, r0
 800f940:	f001 fe9c 	bl	801167c <GUI_Lock>
 800f944:	4620      	mov	r0, r4
 800f946:	f7ff fd1b 	bl	800f380 <_Alloc>
 800f94a:	4604      	mov	r4, r0
 800f94c:	f001 fe8c 	bl	8011668 <GUI_Unlock>
 800f950:	4620      	mov	r0, r4
 800f952:	bd10      	pop	{r4, pc}

0800f954 <GUI_ALLOC_h2p>:
 800f954:	4b03      	ldr	r3, [pc, #12]	; (800f964 <GUI_ALLOC_h2p+0x10>)
 800f956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f958:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800f95c:	6840      	ldr	r0, [r0, #4]
 800f95e:	3008      	adds	r0, #8
 800f960:	4770      	bx	lr
 800f962:	bf00      	nop
 800f964:	20030760 	.word	0x20030760

0800f968 <GUI_ALLOC_LockH>:
 800f968:	4a07      	ldr	r2, [pc, #28]	; (800f988 <GUI_ALLOC_LockH+0x20>)
 800f96a:	69d1      	ldr	r1, [r2, #28]
 800f96c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800f96e:	3101      	adds	r1, #1
 800f970:	61d1      	str	r1, [r2, #28]
 800f972:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
 800f976:	3201      	adds	r2, #1
 800f978:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
 800f97c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800f980:	6858      	ldr	r0, [r3, #4]
 800f982:	3008      	adds	r0, #8
 800f984:	4770      	bx	lr
 800f986:	bf00      	nop
 800f988:	20030760 	.word	0x20030760

0800f98c <GUI_ALLOC_UnlockH>:
 800f98c:	b430      	push	{r4, r5}
 800f98e:	6803      	ldr	r3, [r0, #0]
 800f990:	4a0a      	ldr	r2, [pc, #40]	; (800f9bc <GUI_ALLOC_UnlockH+0x30>)
 800f992:	f853 5c08 	ldr.w	r5, [r3, #-8]
 800f996:	4604      	mov	r4, r0
 800f998:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800f99a:	f810 3035 	ldrb.w	r3, [r0, r5, lsl #3]
 800f99e:	2b01      	cmp	r3, #1
 800f9a0:	d903      	bls.n	800f9aa <GUI_ALLOC_UnlockH+0x1e>
 800f9a2:	69d1      	ldr	r1, [r2, #28]
 800f9a4:	b109      	cbz	r1, 800f9aa <GUI_ALLOC_UnlockH+0x1e>
 800f9a6:	3901      	subs	r1, #1
 800f9a8:	61d1      	str	r1, [r2, #28]
 800f9aa:	3b01      	subs	r3, #1
 800f9ac:	f800 3035 	strb.w	r3, [r0, r5, lsl #3]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	4610      	mov	r0, r2
 800f9b4:	6022      	str	r2, [r4, #0]
 800f9b6:	bc30      	pop	{r4, r5}
 800f9b8:	4770      	bx	lr
 800f9ba:	bf00      	nop
 800f9bc:	20030760 	.word	0x20030760

0800f9c0 <GUI_ALLOC_GetMaxSize>:
 800f9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9c2:	4c4a      	ldr	r4, [pc, #296]	; (800faec <GUI_ALLOC_GetMaxSize+0x12c>)
 800f9c4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d03d      	beq.n	800fa48 <GUI_ALLOC_GetMaxSize+0x88>
 800f9cc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800f9d0:	4a46      	ldr	r2, [pc, #280]	; (800faec <GUI_ALLOC_GetMaxSize+0x12c>)
 800f9d2:	bb3b      	cbnz	r3, 800fa24 <GUI_ALLOC_GetMaxSize+0x64>
 800f9d4:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 800f9d8:	bb23      	cbnz	r3, 800fa24 <GUI_ALLOC_GetMaxSize+0x64>
 800f9da:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 800f9de:	bb0b      	cbnz	r3, 800fa24 <GUI_ALLOC_GetMaxSize+0x64>
 800f9e0:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 800f9e4:	b9f3      	cbnz	r3, 800fa24 <GUI_ALLOC_GetMaxSize+0x64>
 800f9e6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800f9ea:	b9db      	cbnz	r3, 800fa24 <GUI_ALLOC_GetMaxSize+0x64>
 800f9ec:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800f9f0:	b9c3      	cbnz	r3, 800fa24 <GUI_ALLOC_GetMaxSize+0x64>
 800f9f2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800f9f6:	b9ab      	cbnz	r3, 800fa24 <GUI_ALLOC_GetMaxSize+0x64>
 800f9f8:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800f9fc:	b993      	cbnz	r3, 800fa24 <GUI_ALLOC_GetMaxSize+0x64>
 800f9fe:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 800fa00:	b983      	cbnz	r3, 800fa24 <GUI_ALLOC_GetMaxSize+0x64>
 800fa02:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800fa04:	b973      	cbnz	r3, 800fa24 <GUI_ALLOC_GetMaxSize+0x64>
 800fa06:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800fa08:	b963      	cbnz	r3, 800fa24 <GUI_ALLOC_GetMaxSize+0x64>
 800fa0a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800fa0c:	b953      	cbnz	r3, 800fa24 <GUI_ALLOC_GetMaxSize+0x64>
 800fa0e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800fa10:	b943      	cbnz	r3, 800fa24 <GUI_ALLOC_GetMaxSize+0x64>
 800fa12:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800fa14:	b933      	cbnz	r3, 800fa24 <GUI_ALLOC_GetMaxSize+0x64>
 800fa16:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800fa18:	b923      	cbnz	r3, 800fa24 <GUI_ALLOC_GetMaxSize+0x64>
 800fa1a:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800fa1c:	b913      	cbnz	r3, 800fa24 <GUI_ALLOC_GetMaxSize+0x64>
 800fa1e:	f06f 000b 	mvn.w	r0, #11
 800fa22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa24:	689b      	ldr	r3, [r3, #8]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d0f9      	beq.n	800fa1e <GUI_ALLOC_GetMaxSize+0x5e>
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	e001      	b.n	800fa32 <GUI_ALLOC_GetMaxSize+0x72>
 800fa2e:	689b      	ldr	r3, [r3, #8]
 800fa30:	b143      	cbz	r3, 800fa44 <GUI_ALLOC_GetMaxSize+0x84>
 800fa32:	6859      	ldr	r1, [r3, #4]
 800fa34:	689b      	ldr	r3, [r3, #8]
 800fa36:	4291      	cmp	r1, r2
 800fa38:	4610      	mov	r0, r2
 800fa3a:	bf84      	itt	hi
 800fa3c:	460a      	movhi	r2, r1
 800fa3e:	4610      	movhi	r0, r2
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d1f4      	bne.n	800fa2e <GUI_ALLOC_GetMaxSize+0x6e>
 800fa44:	380c      	subs	r0, #12
 800fa46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa48:	4b29      	ldr	r3, [pc, #164]	; (800faf0 <GUI_ALLOC_GetMaxSize+0x130>)
 800fa4a:	689a      	ldr	r2, [r3, #8]
 800fa4c:	6858      	ldr	r0, [r3, #4]
 800fa4e:	2101      	movs	r1, #1
 800fa50:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 800fa54:	b90a      	cbnz	r2, 800fa5a <GUI_ALLOC_GetMaxSize+0x9a>
 800fa56:	0882      	lsrs	r2, r0, #2
 800fa58:	609a      	str	r2, [r3, #8]
 800fa5a:	6819      	ldr	r1, [r3, #0]
 800fa5c:	63a1      	str	r1, [r4, #56]	; 0x38
 800fa5e:	265a      	movs	r6, #90	; 0x5a
 800fa60:	2210      	movs	r2, #16
 800fa62:	2520      	movs	r5, #32
 800fa64:	6226      	str	r6, [r4, #32]
 800fa66:	6422      	str	r2, [r4, #64]	; 0x40
 800fa68:	64a5      	str	r5, [r4, #72]	; 0x48
 800fa6a:	2740      	movs	r7, #64	; 0x40
 800fa6c:	2680      	movs	r6, #128	; 0x80
 800fa6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fa72:	f44f 7500 	mov.w	r5, #512	; 0x200
 800fa76:	f1a1 0314 	sub.w	r3, r1, #20
 800fa7a:	6527      	str	r7, [r4, #80]	; 0x50
 800fa7c:	65a6      	str	r6, [r4, #88]	; 0x58
 800fa7e:	6622      	str	r2, [r4, #96]	; 0x60
 800fa80:	66a5      	str	r5, [r4, #104]	; 0x68
 800fa82:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800fa86:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800fa8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fa8e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 800fa92:	4403      	add	r3, r0
 800fa94:	6727      	str	r7, [r4, #112]	; 0x70
 800fa96:	67a6      	str	r6, [r4, #120]	; 0x78
 800fa98:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800fa9c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 800faa0:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 800faa4:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 800faa8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800faac:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800fab0:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 800fab4:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 800fab8:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 800fabc:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 800fac0:	2202      	movs	r2, #2
 800fac2:	2501      	movs	r5, #1
 800fac4:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800fac8:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 800facc:	6363      	str	r3, [r4, #52]	; 0x34
 800face:	6122      	str	r2, [r4, #16]
 800fad0:	60e0      	str	r0, [r4, #12]
 800fad2:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 800fad6:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 800fada:	605d      	str	r5, [r3, #4]
 800fadc:	6265      	str	r5, [r4, #36]	; 0x24
 800fade:	6065      	str	r5, [r4, #4]
 800fae0:	f7ff f95a 	bl	800ed98 <_AddFreeMemory>
 800fae4:	f7ff fbde 	bl	800f2a4 <_EnlargeBlocks>
 800fae8:	6325      	str	r5, [r4, #48]	; 0x30
 800faea:	e76f      	b.n	800f9cc <GUI_ALLOC_GetMaxSize+0xc>
 800faec:	20030760 	.word	0x20030760
 800faf0:	2002e1cc 	.word	0x2002e1cc

0800faf4 <GUI_ALLOC_RequestSize>:
 800faf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faf6:	4c58      	ldr	r4, [pc, #352]	; (800fc58 <GUI_ALLOC_RequestSize+0x164>)
 800faf8:	f001 fdc0 	bl	801167c <GUI_Lock>
 800fafc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d057      	beq.n	800fbb4 <GUI_ALLOC_RequestSize+0xc0>
 800fb04:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 800fb08:	4a53      	ldr	r2, [pc, #332]	; (800fc58 <GUI_ALLOC_RequestSize+0x164>)
 800fb0a:	bb9b      	cbnz	r3, 800fb74 <GUI_ALLOC_RequestSize+0x80>
 800fb0c:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 800fb10:	bb83      	cbnz	r3, 800fb74 <GUI_ALLOC_RequestSize+0x80>
 800fb12:	f8d2 30ac 	ldr.w	r3, [r2, #172]	; 0xac
 800fb16:	bb6b      	cbnz	r3, 800fb74 <GUI_ALLOC_RequestSize+0x80>
 800fb18:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 800fb1c:	bb53      	cbnz	r3, 800fb74 <GUI_ALLOC_RequestSize+0x80>
 800fb1e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800fb22:	bb3b      	cbnz	r3, 800fb74 <GUI_ALLOC_RequestSize+0x80>
 800fb24:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800fb28:	bb23      	cbnz	r3, 800fb74 <GUI_ALLOC_RequestSize+0x80>
 800fb2a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800fb2e:	bb0b      	cbnz	r3, 800fb74 <GUI_ALLOC_RequestSize+0x80>
 800fb30:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800fb34:	b9f3      	cbnz	r3, 800fb74 <GUI_ALLOC_RequestSize+0x80>
 800fb36:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
 800fb38:	b9e3      	cbnz	r3, 800fb74 <GUI_ALLOC_RequestSize+0x80>
 800fb3a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800fb3c:	b9d3      	cbnz	r3, 800fb74 <GUI_ALLOC_RequestSize+0x80>
 800fb3e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800fb40:	b9c3      	cbnz	r3, 800fb74 <GUI_ALLOC_RequestSize+0x80>
 800fb42:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800fb44:	b9b3      	cbnz	r3, 800fb74 <GUI_ALLOC_RequestSize+0x80>
 800fb46:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800fb48:	b9a3      	cbnz	r3, 800fb74 <GUI_ALLOC_RequestSize+0x80>
 800fb4a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800fb4c:	b993      	cbnz	r3, 800fb74 <GUI_ALLOC_RequestSize+0x80>
 800fb4e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800fb50:	b983      	cbnz	r3, 800fb74 <GUI_ALLOC_RequestSize+0x80>
 800fb52:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800fb54:	b973      	cbnz	r3, 800fb74 <GUI_ALLOC_RequestSize+0x80>
 800fb56:	f06f 030b 	mvn.w	r3, #11
 800fb5a:	4940      	ldr	r1, [pc, #256]	; (800fc5c <GUI_ALLOC_RequestSize+0x168>)
 800fb5c:	17da      	asrs	r2, r3, #31
 800fb5e:	fb81 1303 	smull	r1, r3, r1, r3
 800fb62:	ebc2 1363 	rsb	r3, r2, r3, asr #5
 800fb66:	6a24      	ldr	r4, [r4, #32]
 800fb68:	fb04 f403 	mul.w	r4, r4, r3
 800fb6c:	f001 fd7c 	bl	8011668 <GUI_Unlock>
 800fb70:	4620      	mov	r0, r4
 800fb72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d0f5      	beq.n	800fb66 <GUI_ALLOC_RequestSize+0x72>
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	e001      	b.n	800fb82 <GUI_ALLOC_RequestSize+0x8e>
 800fb7e:	689b      	ldr	r3, [r3, #8]
 800fb80:	b143      	cbz	r3, 800fb94 <GUI_ALLOC_RequestSize+0xa0>
 800fb82:	6859      	ldr	r1, [r3, #4]
 800fb84:	689b      	ldr	r3, [r3, #8]
 800fb86:	4291      	cmp	r1, r2
 800fb88:	4610      	mov	r0, r2
 800fb8a:	bf84      	itt	hi
 800fb8c:	460a      	movhi	r2, r1
 800fb8e:	4610      	movhi	r0, r2
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d1f4      	bne.n	800fb7e <GUI_ALLOC_RequestSize+0x8a>
 800fb94:	380c      	subs	r0, #12
 800fb96:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	d8dd      	bhi.n	800fb5a <GUI_ALLOC_RequestSize+0x66>
 800fb9e:	6a22      	ldr	r2, [r4, #32]
 800fba0:	4b2e      	ldr	r3, [pc, #184]	; (800fc5c <GUI_ALLOC_RequestSize+0x168>)
 800fba2:	fb02 f000 	mul.w	r0, r2, r0
 800fba6:	fba3 2300 	umull	r2, r3, r3, r0
 800fbaa:	095c      	lsrs	r4, r3, #5
 800fbac:	f001 fd5c 	bl	8011668 <GUI_Unlock>
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbb4:	4b2a      	ldr	r3, [pc, #168]	; (800fc60 <GUI_ALLOC_RequestSize+0x16c>)
 800fbb6:	689a      	ldr	r2, [r3, #8]
 800fbb8:	6858      	ldr	r0, [r3, #4]
 800fbba:	2101      	movs	r1, #1
 800fbbc:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 800fbc0:	b90a      	cbnz	r2, 800fbc6 <GUI_ALLOC_RequestSize+0xd2>
 800fbc2:	0882      	lsrs	r2, r0, #2
 800fbc4:	609a      	str	r2, [r3, #8]
 800fbc6:	6819      	ldr	r1, [r3, #0]
 800fbc8:	63a1      	str	r1, [r4, #56]	; 0x38
 800fbca:	265a      	movs	r6, #90	; 0x5a
 800fbcc:	2210      	movs	r2, #16
 800fbce:	2520      	movs	r5, #32
 800fbd0:	6226      	str	r6, [r4, #32]
 800fbd2:	6422      	str	r2, [r4, #64]	; 0x40
 800fbd4:	64a5      	str	r5, [r4, #72]	; 0x48
 800fbd6:	2740      	movs	r7, #64	; 0x40
 800fbd8:	2680      	movs	r6, #128	; 0x80
 800fbda:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fbde:	f44f 7500 	mov.w	r5, #512	; 0x200
 800fbe2:	f1a1 0314 	sub.w	r3, r1, #20
 800fbe6:	6527      	str	r7, [r4, #80]	; 0x50
 800fbe8:	65a6      	str	r6, [r4, #88]	; 0x58
 800fbea:	6622      	str	r2, [r4, #96]	; 0x60
 800fbec:	66a5      	str	r5, [r4, #104]	; 0x68
 800fbee:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800fbf2:	f44f 6600 	mov.w	r6, #2048	; 0x800
 800fbf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800fbfa:	f44f 5500 	mov.w	r5, #8192	; 0x2000
 800fbfe:	4403      	add	r3, r0
 800fc00:	6727      	str	r7, [r4, #112]	; 0x70
 800fc02:	67a6      	str	r6, [r4, #120]	; 0x78
 800fc04:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
 800fc08:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
 800fc0c:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 800fc10:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 800fc14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800fc18:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 800fc1c:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
 800fc20:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
 800fc24:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 800fc28:	f8c4 50a8 	str.w	r5, [r4, #168]	; 0xa8
 800fc2c:	2202      	movs	r2, #2
 800fc2e:	2501      	movs	r5, #1
 800fc30:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800fc34:	f44f 2600 	mov.w	r6, #524288	; 0x80000
 800fc38:	6363      	str	r3, [r4, #52]	; 0x34
 800fc3a:	6122      	str	r2, [r4, #16]
 800fc3c:	60e0      	str	r0, [r4, #12]
 800fc3e:	f8c4 70b0 	str.w	r7, [r4, #176]	; 0xb0
 800fc42:	f8c4 60b8 	str.w	r6, [r4, #184]	; 0xb8
 800fc46:	605d      	str	r5, [r3, #4]
 800fc48:	6265      	str	r5, [r4, #36]	; 0x24
 800fc4a:	6065      	str	r5, [r4, #4]
 800fc4c:	f7ff f8a4 	bl	800ed98 <_AddFreeMemory>
 800fc50:	f7ff fb28 	bl	800f2a4 <_EnlargeBlocks>
 800fc54:	6325      	str	r5, [r4, #48]	; 0x30
 800fc56:	e755      	b.n	800fb04 <GUI_ALLOC_RequestSize+0x10>
 800fc58:	20030760 	.word	0x20030760
 800fc5c:	51eb851f 	.word	0x51eb851f
 800fc60:	2002e1cc 	.word	0x2002e1cc

0800fc64 <GUI_ALLOC_Lock>:
 800fc64:	4a02      	ldr	r2, [pc, #8]	; (800fc70 <GUI_ALLOC_Lock+0xc>)
 800fc66:	6993      	ldr	r3, [r2, #24]
 800fc68:	3301      	adds	r3, #1
 800fc6a:	6193      	str	r3, [r2, #24]
 800fc6c:	4770      	bx	lr
 800fc6e:	bf00      	nop
 800fc70:	20030760 	.word	0x20030760

0800fc74 <GUI_ALLOC_Unlock>:
 800fc74:	4a02      	ldr	r2, [pc, #8]	; (800fc80 <GUI_ALLOC_Unlock+0xc>)
 800fc76:	6993      	ldr	r3, [r2, #24]
 800fc78:	3b01      	subs	r3, #1
 800fc7a:	6193      	str	r3, [r2, #24]
 800fc7c:	4770      	bx	lr
 800fc7e:	bf00      	nop
 800fc80:	20030760 	.word	0x20030760

0800fc84 <GUI_ALLOC_AssignMemory>:
 800fc84:	4b02      	ldr	r3, [pc, #8]	; (800fc90 <GUI_ALLOC_AssignMemory+0xc>)
 800fc86:	f021 0103 	bic.w	r1, r1, #3
 800fc8a:	e883 0003 	stmia.w	r3, {r0, r1}
 800fc8e:	4770      	bx	lr
 800fc90:	2002e1cc 	.word	0x2002e1cc

0800fc94 <GUI_ALLOC_GetSize>:
 800fc94:	b130      	cbz	r0, 800fca4 <GUI_ALLOC_GetSize+0x10>
 800fc96:	4b04      	ldr	r3, [pc, #16]	; (800fca8 <GUI_ALLOC_GetSize+0x14>)
 800fc98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc9a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800fc9e:	6843      	ldr	r3, [r0, #4]
 800fca0:	6858      	ldr	r0, [r3, #4]
 800fca2:	380c      	subs	r0, #12
 800fca4:	4770      	bx	lr
 800fca6:	bf00      	nop
 800fca8:	20030760 	.word	0x20030760

0800fcac <GUI_ALLOC_Free>:
 800fcac:	b900      	cbnz	r0, 800fcb0 <GUI_ALLOC_Free+0x4>
 800fcae:	4770      	bx	lr
 800fcb0:	b570      	push	{r4, r5, r6, lr}
 800fcb2:	4c0d      	ldr	r4, [pc, #52]	; (800fce8 <GUI_ALLOC_Free+0x3c>)
 800fcb4:	4605      	mov	r5, r0
 800fcb6:	f001 fce1 	bl	801167c <GUI_Lock>
 800fcba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fcbc:	00ee      	lsls	r6, r5, #3
 800fcbe:	4433      	add	r3, r6
 800fcc0:	6859      	ldr	r1, [r3, #4]
 800fcc2:	6848      	ldr	r0, [r1, #4]
 800fcc4:	f7ff f868 	bl	800ed98 <_AddFreeMemory>
 800fcc8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800fcca:	6863      	ldr	r3, [r4, #4]
 800fccc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fcce:	4416      	add	r6, r2
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	2000      	movs	r0, #0
 800fcd4:	6063      	str	r3, [r4, #4]
 800fcd6:	6071      	str	r1, [r6, #4]
 800fcd8:	f802 0035 	strb.w	r0, [r2, r5, lsl #3]
 800fcdc:	6265      	str	r5, [r4, #36]	; 0x24
 800fcde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fce2:	f001 bcc1 	b.w	8011668 <GUI_Unlock>
 800fce6:	bf00      	nop
 800fce8:	20030760 	.word	0x20030760

0800fcec <GUI_ALLOC_FreePtr>:
 800fcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcee:	4605      	mov	r5, r0
 800fcf0:	f001 fcc4 	bl	801167c <GUI_Lock>
 800fcf4:	682c      	ldr	r4, [r5, #0]
 800fcf6:	b1b4      	cbz	r4, 800fd26 <GUI_ALLOC_FreePtr+0x3a>
 800fcf8:	4e0e      	ldr	r6, [pc, #56]	; (800fd34 <GUI_ALLOC_FreePtr+0x48>)
 800fcfa:	f001 fcbf 	bl	801167c <GUI_Lock>
 800fcfe:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800fd00:	00e7      	lsls	r7, r4, #3
 800fd02:	443b      	add	r3, r7
 800fd04:	6859      	ldr	r1, [r3, #4]
 800fd06:	6848      	ldr	r0, [r1, #4]
 800fd08:	f7ff f846 	bl	800ed98 <_AddFreeMemory>
 800fd0c:	6b71      	ldr	r1, [r6, #52]	; 0x34
 800fd0e:	6873      	ldr	r3, [r6, #4]
 800fd10:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800fd12:	440f      	add	r7, r1
 800fd14:	3301      	adds	r3, #1
 800fd16:	2000      	movs	r0, #0
 800fd18:	6073      	str	r3, [r6, #4]
 800fd1a:	607a      	str	r2, [r7, #4]
 800fd1c:	f801 0034 	strb.w	r0, [r1, r4, lsl #3]
 800fd20:	6274      	str	r4, [r6, #36]	; 0x24
 800fd22:	f001 fca1 	bl	8011668 <GUI_Unlock>
 800fd26:	2300      	movs	r3, #0
 800fd28:	602b      	str	r3, [r5, #0]
 800fd2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fd2e:	f001 bc9b 	b.w	8011668 <GUI_Unlock>
 800fd32:	bf00      	nop
 800fd34:	20030760 	.word	0x20030760

0800fd38 <GUI_ALLOC_FreePtrArray>:
 800fd38:	2900      	cmp	r1, #0
 800fd3a:	dd2b      	ble.n	800fd94 <GUI_ALLOC_FreePtrArray+0x5c>
 800fd3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd40:	2500      	movs	r5, #0
 800fd42:	4f15      	ldr	r7, [pc, #84]	; (800fd98 <GUI_ALLOC_FreePtrArray+0x60>)
 800fd44:	468a      	mov	sl, r1
 800fd46:	1f04      	subs	r4, r0, #4
 800fd48:	46a9      	mov	r9, r5
 800fd4a:	f001 fc97 	bl	801167c <GUI_Lock>
 800fd4e:	f854 6f04 	ldr.w	r6, [r4, #4]!
 800fd52:	3501      	adds	r5, #1
 800fd54:	b1b6      	cbz	r6, 800fd84 <GUI_ALLOC_FreePtrArray+0x4c>
 800fd56:	f001 fc91 	bl	801167c <GUI_Lock>
 800fd5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd5c:	ea4f 08c6 	mov.w	r8, r6, lsl #3
 800fd60:	4443      	add	r3, r8
 800fd62:	6859      	ldr	r1, [r3, #4]
 800fd64:	6848      	ldr	r0, [r1, #4]
 800fd66:	f7ff f817 	bl	800ed98 <_AddFreeMemory>
 800fd6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd70:	4488      	add	r8, r1
 800fd72:	3301      	adds	r3, #1
 800fd74:	607b      	str	r3, [r7, #4]
 800fd76:	f8c8 2004 	str.w	r2, [r8, #4]
 800fd7a:	f801 9036 	strb.w	r9, [r1, r6, lsl #3]
 800fd7e:	627e      	str	r6, [r7, #36]	; 0x24
 800fd80:	f001 fc72 	bl	8011668 <GUI_Unlock>
 800fd84:	f8c4 9000 	str.w	r9, [r4]
 800fd88:	f001 fc6e 	bl	8011668 <GUI_Unlock>
 800fd8c:	45aa      	cmp	sl, r5
 800fd8e:	d1dc      	bne.n	800fd4a <GUI_ALLOC_FreePtrArray+0x12>
 800fd90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd94:	4770      	bx	lr
 800fd96:	bf00      	nop
 800fd98:	20030760 	.word	0x20030760

0800fd9c <GUI_ALLOC_AllocZero>:
 800fd9c:	b570      	push	{r4, r5, r6, lr}
 800fd9e:	4605      	mov	r5, r0
 800fda0:	f001 fc6c 	bl	801167c <GUI_Lock>
 800fda4:	b925      	cbnz	r5, 800fdb0 <GUI_ALLOC_AllocZero+0x14>
 800fda6:	2400      	movs	r4, #0
 800fda8:	f001 fc5e 	bl	8011668 <GUI_Unlock>
 800fdac:	4620      	mov	r0, r4
 800fdae:	bd70      	pop	{r4, r5, r6, pc}
 800fdb0:	f001 fc64 	bl	801167c <GUI_Lock>
 800fdb4:	4628      	mov	r0, r5
 800fdb6:	f7ff fae3 	bl	800f380 <_Alloc>
 800fdba:	4604      	mov	r4, r0
 800fdbc:	f001 fc54 	bl	8011668 <GUI_Unlock>
 800fdc0:	2c00      	cmp	r4, #0
 800fdc2:	d0f0      	beq.n	800fda6 <GUI_ALLOC_AllocZero+0xa>
 800fdc4:	4e14      	ldr	r6, [pc, #80]	; (800fe18 <GUI_ALLOC_AllocZero+0x7c>)
 800fdc6:	4915      	ldr	r1, [pc, #84]	; (800fe1c <GUI_ALLOC_AllocZero+0x80>)
 800fdc8:	69f2      	ldr	r2, [r6, #28]
 800fdca:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800fdcc:	3201      	adds	r2, #1
 800fdce:	61f2      	str	r2, [r6, #28]
 800fdd0:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
 800fdd4:	3201      	adds	r2, #1
 800fdd6:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
 800fdda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fdde:	462a      	mov	r2, r5
 800fde0:	685d      	ldr	r5, [r3, #4]
 800fde2:	680b      	ldr	r3, [r1, #0]
 800fde4:	f105 0008 	add.w	r0, r5, #8
 800fde8:	2100      	movs	r1, #0
 800fdea:	4798      	blx	r3
 800fdec:	6829      	ldr	r1, [r5, #0]
 800fdee:	6b72      	ldr	r2, [r6, #52]	; 0x34
 800fdf0:	f812 3031 	ldrb.w	r3, [r2, r1, lsl #3]
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d901      	bls.n	800fdfc <GUI_ALLOC_AllocZero+0x60>
 800fdf8:	69f0      	ldr	r0, [r6, #28]
 800fdfa:	b930      	cbnz	r0, 800fe0a <GUI_ALLOC_AllocZero+0x6e>
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
 800fe02:	f001 fc31 	bl	8011668 <GUI_Unlock>
 800fe06:	4620      	mov	r0, r4
 800fe08:	bd70      	pop	{r4, r5, r6, pc}
 800fe0a:	3801      	subs	r0, #1
 800fe0c:	3b01      	subs	r3, #1
 800fe0e:	61f0      	str	r0, [r6, #28]
 800fe10:	f802 3031 	strb.w	r3, [r2, r1, lsl #3]
 800fe14:	e7f5      	b.n	800fe02 <GUI_ALLOC_AllocZero+0x66>
 800fe16:	bf00      	nop
 800fe18:	20030760 	.word	0x20030760
 800fe1c:	200000cc 	.word	0x200000cc

0800fe20 <GUI_Long2Len>:
 800fe20:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 800fe24:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 800fe28:	2b09      	cmp	r3, #9
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	dd1f      	ble.n	800fe6e <GUI_Long2Len+0x4e>
 800fe2e:	2b63      	cmp	r3, #99	; 0x63
 800fe30:	d920      	bls.n	800fe74 <GUI_Long2Len+0x54>
 800fe32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fe36:	d320      	bcc.n	800fe7a <GUI_Long2Len+0x5a>
 800fe38:	f242 710f 	movw	r1, #9999	; 0x270f
 800fe3c:	428b      	cmp	r3, r1
 800fe3e:	d91f      	bls.n	800fe80 <GUI_Long2Len+0x60>
 800fe40:	4917      	ldr	r1, [pc, #92]	; (800fea0 <GUI_Long2Len+0x80>)
 800fe42:	428b      	cmp	r3, r1
 800fe44:	d91f      	bls.n	800fe86 <GUI_Long2Len+0x66>
 800fe46:	4917      	ldr	r1, [pc, #92]	; (800fea4 <GUI_Long2Len+0x84>)
 800fe48:	428b      	cmp	r3, r1
 800fe4a:	d91f      	bls.n	800fe8c <GUI_Long2Len+0x6c>
 800fe4c:	4916      	ldr	r1, [pc, #88]	; (800fea8 <GUI_Long2Len+0x88>)
 800fe4e:	428b      	cmp	r3, r1
 800fe50:	d91f      	bls.n	800fe92 <GUI_Long2Len+0x72>
 800fe52:	4916      	ldr	r1, [pc, #88]	; (800feac <GUI_Long2Len+0x8c>)
 800fe54:	428b      	cmp	r3, r1
 800fe56:	d91f      	bls.n	800fe98 <GUI_Long2Len+0x78>
 800fe58:	4915      	ldr	r1, [pc, #84]	; (800feb0 <GUI_Long2Len+0x90>)
 800fe5a:	428b      	cmp	r3, r1
 800fe5c:	bf8b      	itete	hi
 800fe5e:	200a      	movhi	r0, #10
 800fe60:	2009      	movls	r0, #9
 800fe62:	2309      	movhi	r3, #9
 800fe64:	2308      	movls	r3, #8
 800fe66:	2a00      	cmp	r2, #0
 800fe68:	bfb8      	it	lt
 800fe6a:	1c98      	addlt	r0, r3, #2
 800fe6c:	4770      	bx	lr
 800fe6e:	2001      	movs	r0, #1
 800fe70:	2300      	movs	r3, #0
 800fe72:	e7f8      	b.n	800fe66 <GUI_Long2Len+0x46>
 800fe74:	2002      	movs	r0, #2
 800fe76:	2301      	movs	r3, #1
 800fe78:	e7f5      	b.n	800fe66 <GUI_Long2Len+0x46>
 800fe7a:	2003      	movs	r0, #3
 800fe7c:	2302      	movs	r3, #2
 800fe7e:	e7f2      	b.n	800fe66 <GUI_Long2Len+0x46>
 800fe80:	2004      	movs	r0, #4
 800fe82:	2303      	movs	r3, #3
 800fe84:	e7ef      	b.n	800fe66 <GUI_Long2Len+0x46>
 800fe86:	2005      	movs	r0, #5
 800fe88:	2304      	movs	r3, #4
 800fe8a:	e7ec      	b.n	800fe66 <GUI_Long2Len+0x46>
 800fe8c:	2006      	movs	r0, #6
 800fe8e:	2305      	movs	r3, #5
 800fe90:	e7e9      	b.n	800fe66 <GUI_Long2Len+0x46>
 800fe92:	2007      	movs	r0, #7
 800fe94:	2306      	movs	r3, #6
 800fe96:	e7e6      	b.n	800fe66 <GUI_Long2Len+0x46>
 800fe98:	2008      	movs	r0, #8
 800fe9a:	2307      	movs	r3, #7
 800fe9c:	e7e3      	b.n	800fe66 <GUI_Long2Len+0x46>
 800fe9e:	bf00      	nop
 800fea0:	0001869f 	.word	0x0001869f
 800fea4:	000f423f 	.word	0x000f423f
 800fea8:	0098967f 	.word	0x0098967f
 800feac:	05f5e0ff 	.word	0x05f5e0ff
 800feb0:	3b9ac9ff 	.word	0x3b9ac9ff

0800feb4 <GUI_AddDecShift>:
 800feb4:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800feb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800febc:	d075      	beq.n	800ffaa <GUI_AddDecShift+0xf6>
 800febe:	2800      	cmp	r0, #0
 800fec0:	db7e      	blt.n	800ffc0 <GUI_AddDecShift+0x10c>
 800fec2:	2400      	movs	r4, #0
 800fec4:	1b0c      	subs	r4, r1, r4
 800fec6:	b2e4      	uxtb	r4, r4
 800fec8:	2100      	movs	r1, #0
 800feca:	b10a      	cbz	r2, 800fed0 <GUI_AddDecShift+0x1c>
 800fecc:	3c01      	subs	r4, #1
 800fece:	b2e4      	uxtb	r4, r4
 800fed0:	b384      	cbz	r4, 800ff34 <GUI_AddDecShift+0x80>
 800fed2:	4f3f      	ldr	r7, [pc, #252]	; (800ffd0 <GUI_AddDecShift+0x11c>)
 800fed4:	b399      	cbz	r1, 800ff3e <GUI_AddDecShift+0x8a>
 800fed6:	1e65      	subs	r5, r4, #1
 800fed8:	4294      	cmp	r4, r2
 800feda:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800ffd4 <GUI_AddDecShift+0x120>
 800fede:	f04f 0c31 	mov.w	ip, #49	; 0x31
 800fee2:	b2ed      	uxtb	r5, r5
 800fee4:	d019      	beq.n	800ff1a <GUI_AddDecShift+0x66>
 800fee6:	f857 6025 	ldr.w	r6, [r7, r5, lsl #2]
 800feea:	fb90 f1f6 	sdiv	r1, r0, r6
 800feee:	b2c9      	uxtb	r1, r1
 800fef0:	290a      	cmp	r1, #10
 800fef2:	d81f      	bhi.n	800ff34 <GUI_AddDecShift+0x80>
 800fef4:	fb06 0011 	mls	r0, r6, r1, r0
 800fef8:	b90d      	cbnz	r5, 800fefe <GUI_AddDecShift+0x4a>
 800fefa:	3101      	adds	r1, #1
 800fefc:	b2c9      	uxtb	r1, r1
 800fefe:	290a      	cmp	r1, #10
 800ff00:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800ff04:	d049      	beq.n	800ff9a <GUI_AddDecShift+0xe6>
 800ff06:	681c      	ldr	r4, [r3, #0]
 800ff08:	1c66      	adds	r6, r4, #1
 800ff0a:	601e      	str	r6, [r3, #0]
 800ff0c:	7021      	strb	r1, [r4, #0]
 800ff0e:	b18d      	cbz	r5, 800ff34 <GUI_AddDecShift+0x80>
 800ff10:	462c      	mov	r4, r5
 800ff12:	1e65      	subs	r5, r4, #1
 800ff14:	4294      	cmp	r4, r2
 800ff16:	b2ed      	uxtb	r5, r5
 800ff18:	d1e5      	bne.n	800fee6 <GUI_AddDecShift+0x32>
 800ff1a:	6819      	ldr	r1, [r3, #0]
 800ff1c:	1c4e      	adds	r6, r1, #1
 800ff1e:	601e      	str	r6, [r3, #0]
 800ff20:	f89e 6000 	ldrb.w	r6, [lr]
 800ff24:	700e      	strb	r6, [r1, #0]
 800ff26:	f857 6025 	ldr.w	r6, [r7, r5, lsl #2]
 800ff2a:	fb90 f1f6 	sdiv	r1, r0, r6
 800ff2e:	b2c9      	uxtb	r1, r1
 800ff30:	290a      	cmp	r1, #10
 800ff32:	d9df      	bls.n	800fef4 <GUI_AddDecShift+0x40>
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	2200      	movs	r2, #0
 800ff38:	701a      	strb	r2, [r3, #0]
 800ff3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff3e:	1e65      	subs	r5, r4, #1
 800ff40:	4294      	cmp	r4, r2
 800ff42:	f8df c090 	ldr.w	ip, [pc, #144]	; 800ffd4 <GUI_AddDecShift+0x120>
 800ff46:	f04f 0831 	mov.w	r8, #49	; 0x31
 800ff4a:	b2ed      	uxtb	r5, r5
 800ff4c:	d017      	beq.n	800ff7e <GUI_AddDecShift+0xca>
 800ff4e:	f857 6025 	ldr.w	r6, [r7, r5, lsl #2]
 800ff52:	fb90 f1f6 	sdiv	r1, r0, r6
 800ff56:	b2c9      	uxtb	r1, r1
 800ff58:	290a      	cmp	r1, #10
 800ff5a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800ff5e:	d8e9      	bhi.n	800ff34 <GUI_AddDecShift+0x80>
 800ff60:	fb06 0011 	mls	r0, r6, r1, r0
 800ff64:	6819      	ldr	r1, [r3, #0]
 800ff66:	d011      	beq.n	800ff8c <GUI_AddDecShift+0xd8>
 800ff68:	1c4c      	adds	r4, r1, #1
 800ff6a:	601c      	str	r4, [r3, #0]
 800ff6c:	f881 e000 	strb.w	lr, [r1]
 800ff70:	2d00      	cmp	r5, #0
 800ff72:	d0df      	beq.n	800ff34 <GUI_AddDecShift+0x80>
 800ff74:	462c      	mov	r4, r5
 800ff76:	1e65      	subs	r5, r4, #1
 800ff78:	4294      	cmp	r4, r2
 800ff7a:	b2ed      	uxtb	r5, r5
 800ff7c:	d1e7      	bne.n	800ff4e <GUI_AddDecShift+0x9a>
 800ff7e:	6819      	ldr	r1, [r3, #0]
 800ff80:	1c4e      	adds	r6, r1, #1
 800ff82:	601e      	str	r6, [r3, #0]
 800ff84:	f89c 6000 	ldrb.w	r6, [ip]
 800ff88:	700e      	strb	r6, [r1, #0]
 800ff8a:	e7e0      	b.n	800ff4e <GUI_AddDecShift+0x9a>
 800ff8c:	1c4e      	adds	r6, r1, #1
 800ff8e:	4625      	mov	r5, r4
 800ff90:	601e      	str	r6, [r3, #0]
 800ff92:	462c      	mov	r4, r5
 800ff94:	f881 8000 	strb.w	r8, [r1]
 800ff98:	e7ed      	b.n	800ff76 <GUI_AddDecShift+0xc2>
 800ff9a:	6819      	ldr	r1, [r3, #0]
 800ff9c:	4625      	mov	r5, r4
 800ff9e:	1c4e      	adds	r6, r1, #1
 800ffa0:	601e      	str	r6, [r3, #0]
 800ffa2:	462c      	mov	r4, r5
 800ffa4:	f881 c000 	strb.w	ip, [r1]
 800ffa8:	e7b3      	b.n	800ff12 <GUI_AddDecShift+0x5e>
 800ffaa:	681d      	ldr	r5, [r3, #0]
 800ffac:	1e4c      	subs	r4, r1, #1
 800ffae:	1c68      	adds	r0, r5, #1
 800ffb0:	212d      	movs	r1, #45	; 0x2d
 800ffb2:	6018      	str	r0, [r3, #0]
 800ffb4:	b2e4      	uxtb	r4, r4
 800ffb6:	7029      	strb	r1, [r5, #0]
 800ffb8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800ffbc:	2101      	movs	r1, #1
 800ffbe:	e784      	b.n	800feca <GUI_AddDecShift+0x16>
 800ffc0:	681d      	ldr	r5, [r3, #0]
 800ffc2:	262d      	movs	r6, #45	; 0x2d
 800ffc4:	1c6c      	adds	r4, r5, #1
 800ffc6:	601c      	str	r4, [r3, #0]
 800ffc8:	4240      	negs	r0, r0
 800ffca:	2401      	movs	r4, #1
 800ffcc:	702e      	strb	r6, [r5, #0]
 800ffce:	e779      	b.n	800fec4 <GUI_AddDecShift+0x10>
 800ffd0:	0802631c 	.word	0x0802631c
 800ffd4:	20030828 	.word	0x20030828

0800ffd8 <GUI_CalcColorDist>:
 800ffd8:	b2c3      	uxtb	r3, r0
 800ffda:	b2ca      	uxtb	r2, r1
 800ffdc:	1a9a      	subs	r2, r3, r2
 800ffde:	b292      	uxth	r2, r2
 800ffe0:	b430      	push	{r4, r5}
 800ffe2:	b215      	sxth	r5, r2
 800ffe4:	2d00      	cmp	r5, #0
 800ffe6:	bfbc      	itt	lt
 800ffe8:	4252      	neglt	r2, r2
 800ffea:	b215      	sxthlt	r5, r2
 800ffec:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800fff0:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800fff4:	1a9b      	subs	r3, r3, r2
 800fff6:	b29b      	uxth	r3, r3
 800fff8:	0c09      	lsrs	r1, r1, #16
 800fffa:	b21a      	sxth	r2, r3
 800fffc:	ebc1 4110 	rsb	r1, r1, r0, lsr #16
 8010000:	2a00      	cmp	r2, #0
 8010002:	b289      	uxth	r1, r1
 8010004:	b20c      	sxth	r4, r1
 8010006:	bfbc      	itt	lt
 8010008:	425b      	neglt	r3, r3
 801000a:	b21a      	sxthlt	r2, r3
 801000c:	2c00      	cmp	r4, #0
 801000e:	bfbc      	itt	lt
 8010010:	4249      	neglt	r1, r1
 8010012:	b20c      	sxthlt	r4, r1
 8010014:	fb02 f202 	mul.w	r2, r2, r2
 8010018:	fb05 2005 	mla	r0, r5, r5, r2
 801001c:	b2a1      	uxth	r1, r4
 801001e:	fb01 0001 	mla	r0, r1, r1, r0
 8010022:	bc30      	pop	{r4, r5}
 8010024:	4770      	bx	lr
 8010026:	bf00      	nop

08010028 <GUI_GetClientRect>:
 8010028:	b108      	cbz	r0, 801002e <GUI_GetClientRect+0x6>
 801002a:	f008 bdbd 	b.w	8018ba8 <WM_GetClientRect>
 801002e:	4770      	bx	lr

08010030 <GUI_GetBkColor>:
 8010030:	b510      	push	{r4, lr}
 8010032:	f001 fb23 	bl	801167c <GUI_Lock>
 8010036:	f003 f94d 	bl	80132d4 <LCD_GetBkColorIndex>
 801003a:	f003 f80b 	bl	8013054 <LCD_Index2Color>
 801003e:	4604      	mov	r4, r0
 8010040:	f001 fb12 	bl	8011668 <GUI_Unlock>
 8010044:	4620      	mov	r0, r4
 8010046:	bd10      	pop	{r4, pc}

08010048 <GUI_GetColor>:
 8010048:	b510      	push	{r4, lr}
 801004a:	f001 fb17 	bl	801167c <GUI_Lock>
 801004e:	f003 f949 	bl	80132e4 <LCD_GetColorIndex>
 8010052:	f002 ffff 	bl	8013054 <LCD_Index2Color>
 8010056:	4604      	mov	r4, r0
 8010058:	f001 fb06 	bl	8011668 <GUI_Unlock>
 801005c:	4620      	mov	r0, r4
 801005e:	bd10      	pop	{r4, pc}

08010060 <GUI_GetDrawMode>:
 8010060:	b510      	push	{r4, lr}
 8010062:	f001 fb0b 	bl	801167c <GUI_Lock>
 8010066:	4b03      	ldr	r3, [pc, #12]	; (8010074 <GUI_GetDrawMode+0x14>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	7c1c      	ldrb	r4, [r3, #16]
 801006c:	f001 fafc 	bl	8011668 <GUI_Unlock>
 8010070:	4620      	mov	r0, r4
 8010072:	bd10      	pop	{r4, pc}
 8010074:	200000a8 	.word	0x200000a8

08010078 <GUI_GetOrg>:
 8010078:	b538      	push	{r3, r4, r5, lr}
 801007a:	4605      	mov	r5, r0
 801007c:	460c      	mov	r4, r1
 801007e:	f001 fafd 	bl	801167c <GUI_Lock>
 8010082:	4a06      	ldr	r2, [pc, #24]	; (801009c <GUI_GetOrg+0x24>)
 8010084:	4b06      	ldr	r3, [pc, #24]	; (80100a0 <GUI_GetOrg+0x28>)
 8010086:	f9b2 2000 	ldrsh.w	r2, [r2]
 801008a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801008e:	602a      	str	r2, [r5, #0]
 8010090:	6023      	str	r3, [r4, #0]
 8010092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010096:	f001 bae7 	b.w	8011668 <GUI_Unlock>
 801009a:	bf00      	nop
 801009c:	20030848 	.word	0x20030848
 80100a0:	20030838 	.word	0x20030838

080100a4 <GUI_GetVersionString>:
 80100a4:	4804      	ldr	r0, [pc, #16]	; (80100b8 <GUI_GetVersionString+0x14>)
 80100a6:	2334      	movs	r3, #52	; 0x34
 80100a8:	2135      	movs	r1, #53	; 0x35
 80100aa:	2261      	movs	r2, #97	; 0x61
 80100ac:	7001      	strb	r1, [r0, #0]
 80100ae:	7102      	strb	r2, [r0, #4]
 80100b0:	7083      	strb	r3, [r0, #2]
 80100b2:	70c3      	strb	r3, [r0, #3]
 80100b4:	4770      	bx	lr
 80100b6:	bf00      	nop
 80100b8:	20000090 	.word	0x20000090

080100bc <GUI_MergeRect>:
 80100bc:	b320      	cbz	r0, 8010108 <GUI_MergeRect+0x4c>
 80100be:	b321      	cbz	r1, 801010a <GUI_MergeRect+0x4e>
 80100c0:	b322      	cbz	r2, 801010c <GUI_MergeRect+0x50>
 80100c2:	f9b2 c000 	ldrsh.w	ip, [r2]
 80100c6:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80100ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100cc:	f9b1 5000 	ldrsh.w	r5, [r1]
 80100d0:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 80100d4:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 80100d8:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 80100dc:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80100e0:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 80100e4:	4565      	cmp	r5, ip
 80100e6:	bfa8      	it	ge
 80100e8:	4665      	movge	r5, ip
 80100ea:	45a6      	cmp	lr, r4
 80100ec:	4671      	mov	r1, lr
 80100ee:	bfa8      	it	ge
 80100f0:	4621      	movge	r1, r4
 80100f2:	42ba      	cmp	r2, r7
 80100f4:	bfb8      	it	lt
 80100f6:	463a      	movlt	r2, r7
 80100f8:	42b3      	cmp	r3, r6
 80100fa:	bfb8      	it	lt
 80100fc:	4633      	movlt	r3, r6
 80100fe:	8005      	strh	r5, [r0, #0]
 8010100:	8041      	strh	r1, [r0, #2]
 8010102:	8082      	strh	r2, [r0, #4]
 8010104:	80c3      	strh	r3, [r0, #6]
 8010106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010108:	4770      	bx	lr
 801010a:	4611      	mov	r1, r2
 801010c:	680b      	ldr	r3, [r1, #0]
 801010e:	684a      	ldr	r2, [r1, #4]
 8010110:	6042      	str	r2, [r0, #4]
 8010112:	6003      	str	r3, [r0, #0]
 8010114:	4770      	bx	lr
 8010116:	bf00      	nop

08010118 <GUI_MoveRect>:
 8010118:	b178      	cbz	r0, 801013a <GUI_MoveRect+0x22>
 801011a:	b470      	push	{r4, r5, r6}
 801011c:	8806      	ldrh	r6, [r0, #0]
 801011e:	8844      	ldrh	r4, [r0, #2]
 8010120:	8885      	ldrh	r5, [r0, #4]
 8010122:	88c3      	ldrh	r3, [r0, #6]
 8010124:	b289      	uxth	r1, r1
 8010126:	b292      	uxth	r2, r2
 8010128:	440e      	add	r6, r1
 801012a:	4414      	add	r4, r2
 801012c:	4429      	add	r1, r5
 801012e:	8006      	strh	r6, [r0, #0]
 8010130:	8044      	strh	r4, [r0, #2]
 8010132:	bc70      	pop	{r4, r5, r6}
 8010134:	441a      	add	r2, r3
 8010136:	8081      	strh	r1, [r0, #4]
 8010138:	80c2      	strh	r2, [r0, #6]
 801013a:	4770      	bx	lr

0801013c <GUI_Exec>:
 801013c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010140:	4f12      	ldr	r7, [pc, #72]	; (801018c <GUI_Exec+0x50>)
 8010142:	4e13      	ldr	r6, [pc, #76]	; (8010190 <GUI_Exec+0x54>)
 8010144:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8010194 <GUI_Exec+0x58>
 8010148:	2500      	movs	r5, #0
 801014a:	683c      	ldr	r4, [r7, #0]
 801014c:	b11c      	cbz	r4, 8010156 <GUI_Exec+0x1a>
 801014e:	47a0      	blx	r4
 8010150:	1c04      	adds	r4, r0, #0
 8010152:	bf18      	it	ne
 8010154:	2401      	movne	r4, #1
 8010156:	f008 f90b 	bl	8018370 <WM_Exec>
 801015a:	6833      	ldr	r3, [r6, #0]
 801015c:	2800      	cmp	r0, #0
 801015e:	bf18      	it	ne
 8010160:	2401      	movne	r4, #1
 8010162:	b14b      	cbz	r3, 8010178 <GUI_Exec+0x3c>
 8010164:	4798      	blx	r3
 8010166:	b138      	cbz	r0, 8010178 <GUI_Exec+0x3c>
 8010168:	f8d8 3000 	ldr.w	r3, [r8]
 801016c:	b113      	cbz	r3, 8010174 <GUI_Exec+0x38>
 801016e:	2401      	movs	r4, #1
 8010170:	4798      	blx	r3
 8010172:	b13c      	cbz	r4, 8010184 <GUI_Exec+0x48>
 8010174:	2501      	movs	r5, #1
 8010176:	e7e8      	b.n	801014a <GUI_Exec+0xe>
 8010178:	f8d8 3000 	ldr.w	r3, [r8]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d1f7      	bne.n	8010170 <GUI_Exec+0x34>
 8010180:	2c00      	cmp	r4, #0
 8010182:	d1f7      	bne.n	8010174 <GUI_Exec+0x38>
 8010184:	4628      	mov	r0, r5
 8010186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801018a:	bf00      	nop
 801018c:	20030844 	.word	0x20030844
 8010190:	2003086c 	.word	0x2003086c
 8010194:	20030864 	.word	0x20030864

08010198 <GUI_GetBitmapPixelIndex>:
 8010198:	2800      	cmp	r0, #0
 801019a:	d050      	beq.n	801023e <GUI_GetBitmapPixelIndex+0xa6>
 801019c:	88c3      	ldrh	r3, [r0, #6]
 801019e:	3b01      	subs	r3, #1
 80101a0:	b510      	push	{r4, lr}
 80101a2:	8884      	ldrh	r4, [r0, #4]
 80101a4:	6880      	ldr	r0, [r0, #8]
 80101a6:	2b1f      	cmp	r3, #31
 80101a8:	d847      	bhi.n	801023a <GUI_GetBitmapPixelIndex+0xa2>
 80101aa:	e8df f003 	tbb	[pc, r3]
 80101ae:	2316      	.short	0x2316
 80101b0:	46463146 	.word	0x46463146
 80101b4:	46463c46 	.word	0x46463c46
 80101b8:	46464646 	.word	0x46464646
 80101bc:	46464046 	.word	0x46464046
 80101c0:	46464646 	.word	0x46464646
 80101c4:	46464646 	.word	0x46464646
 80101c8:	46464646 	.word	0x46464646
 80101cc:	1046      	.short	0x1046
 80101ce:	10a3      	asrs	r3, r4, #2
 80101d0:	fb02 1103 	mla	r1, r2, r3, r1
 80101d4:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 80101d8:	bd10      	pop	{r4, pc}
 80101da:	fb02 f204 	mul.w	r2, r2, r4
 80101de:	eb00 04d1 	add.w	r4, r0, r1, lsr #3
 80101e2:	43c8      	mvns	r0, r1
 80101e4:	5ca3      	ldrb	r3, [r4, r2]
 80101e6:	f000 0007 	and.w	r0, r0, #7
 80101ea:	fa23 f000 	lsr.w	r0, r3, r0
 80101ee:	f000 0001 	and.w	r0, r0, #1
 80101f2:	bd10      	pop	{r4, pc}
 80101f4:	fb02 f204 	mul.w	r2, r2, r4
 80101f8:	eb00 0491 	add.w	r4, r0, r1, lsr #2
 80101fc:	ea6f 0041 	mvn.w	r0, r1, lsl #1
 8010200:	5ca3      	ldrb	r3, [r4, r2]
 8010202:	f000 0006 	and.w	r0, r0, #6
 8010206:	fa23 f000 	lsr.w	r0, r3, r0
 801020a:	f000 0003 	and.w	r0, r0, #3
 801020e:	bd10      	pop	{r4, pc}
 8010210:	fb02 f204 	mul.w	r2, r2, r4
 8010214:	eb00 0451 	add.w	r4, r0, r1, lsr #1
 8010218:	07cb      	lsls	r3, r1, #31
 801021a:	5ca0      	ldrb	r0, [r4, r2]
 801021c:	bf4c      	ite	mi
 801021e:	f000 000f 	andmi.w	r0, r0, #15
 8010222:	0900      	lsrpl	r0, r0, #4
 8010224:	bd10      	pop	{r4, pc}
 8010226:	fb02 0404 	mla	r4, r2, r4, r0
 801022a:	5c60      	ldrb	r0, [r4, r1]
 801022c:	bd10      	pop	{r4, pc}
 801022e:	1063      	asrs	r3, r4, #1
 8010230:	fb02 1103 	mla	r1, r2, r3, r1
 8010234:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 8010238:	bd10      	pop	{r4, pc}
 801023a:	2000      	movs	r0, #0
 801023c:	bd10      	pop	{r4, pc}
 801023e:	4770      	bx	lr

08010240 <GUI_GotoXY>:
 8010240:	b538      	push	{r3, r4, r5, lr}
 8010242:	4605      	mov	r5, r0
 8010244:	460c      	mov	r4, r1
 8010246:	f001 fa19 	bl	801167c <GUI_Lock>
 801024a:	4b04      	ldr	r3, [pc, #16]	; (801025c <GUI_GotoXY+0x1c>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	845d      	strh	r5, [r3, #34]	; 0x22
 8010250:	849c      	strh	r4, [r3, #36]	; 0x24
 8010252:	f001 fa09 	bl	8011668 <GUI_Unlock>
 8010256:	2000      	movs	r0, #0
 8010258:	bd38      	pop	{r3, r4, r5, pc}
 801025a:	bf00      	nop
 801025c:	200000a8 	.word	0x200000a8

08010260 <GUI_SetPenSize>:
 8010260:	b538      	push	{r3, r4, r5, lr}
 8010262:	4605      	mov	r5, r0
 8010264:	f001 fa0a 	bl	801167c <GUI_Lock>
 8010268:	4b03      	ldr	r3, [pc, #12]	; (8010278 <GUI_SetPenSize+0x18>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	7e1c      	ldrb	r4, [r3, #24]
 801026e:	761d      	strb	r5, [r3, #24]
 8010270:	f001 f9fa 	bl	8011668 <GUI_Unlock>
 8010274:	4620      	mov	r0, r4
 8010276:	bd38      	pop	{r3, r4, r5, pc}
 8010278:	200000a8 	.word	0x200000a8

0801027c <GUI_RectsIntersect>:
 801027c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8010280:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8010284:	429a      	cmp	r2, r3
 8010286:	dc14      	bgt.n	80102b2 <GUI_RectsIntersect+0x36>
 8010288:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801028c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8010290:	429a      	cmp	r2, r3
 8010292:	dc0e      	bgt.n	80102b2 <GUI_RectsIntersect+0x36>
 8010294:	f9b0 2000 	ldrsh.w	r2, [r0]
 8010298:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801029c:	429a      	cmp	r2, r3
 801029e:	dc08      	bgt.n	80102b2 <GUI_RectsIntersect+0x36>
 80102a0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80102a4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80102a8:	4283      	cmp	r3, r0
 80102aa:	bfcc      	ite	gt
 80102ac:	2000      	movgt	r0, #0
 80102ae:	2001      	movle	r0, #1
 80102b0:	4770      	bx	lr
 80102b2:	2000      	movs	r0, #0
 80102b4:	4770      	bx	lr
 80102b6:	bf00      	nop

080102b8 <GUI_SaveContext_W>:
 80102b8:	b508      	push	{r3, lr}
 80102ba:	4b03      	ldr	r3, [pc, #12]	; (80102c8 <GUI_SaveContext_W+0x10>)
 80102bc:	2274      	movs	r2, #116	; 0x74
 80102be:	6819      	ldr	r1, [r3, #0]
 80102c0:	f00e fbc5 	bl	801ea4e <memcpy>
 80102c4:	bd08      	pop	{r3, pc}
 80102c6:	bf00      	nop
 80102c8:	200000a8 	.word	0x200000a8

080102cc <GUI_RestoreContext>:
 80102cc:	b508      	push	{r3, lr}
 80102ce:	4b03      	ldr	r3, [pc, #12]	; (80102dc <GUI_RestoreContext+0x10>)
 80102d0:	4601      	mov	r1, r0
 80102d2:	2274      	movs	r2, #116	; 0x74
 80102d4:	6818      	ldr	r0, [r3, #0]
 80102d6:	f00e fbba 	bl	801ea4e <memcpy>
 80102da:	bd08      	pop	{r3, pc}
 80102dc:	200000a8 	.word	0x200000a8

080102e0 <GUI_SelectLCD>:
 80102e0:	b508      	push	{r3, lr}
 80102e2:	f001 f9cb 	bl	801167c <GUI_Lock>
 80102e6:	f003 fe35 	bl	8013f54 <LCD_SelectLCD>
 80102ea:	f003 ff09 	bl	8014100 <LCD_UpdateColorIndices>
 80102ee:	f008 f98d 	bl	801860c <WM_Activate>
 80102f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80102f6:	f001 b9b7 	b.w	8011668 <GUI_Unlock>
 80102fa:	bf00      	nop

080102fc <GUI_SetBkColor>:
 80102fc:	b510      	push	{r4, lr}
 80102fe:	4604      	mov	r4, r0
 8010300:	f001 f9bc 	bl	801167c <GUI_Lock>
 8010304:	4620      	mov	r0, r4
 8010306:	f002 fecb 	bl	80130a0 <LCD_SetBkColor>
 801030a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801030e:	f001 b9ab 	b.w	8011668 <GUI_Unlock>
 8010312:	bf00      	nop

08010314 <GUI_SetColor>:
 8010314:	b510      	push	{r4, lr}
 8010316:	4604      	mov	r4, r0
 8010318:	f001 f9b0 	bl	801167c <GUI_Lock>
 801031c:	4620      	mov	r0, r4
 801031e:	f002 fec5 	bl	80130ac <LCD_SetColor>
 8010322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010326:	f001 b99f 	b.w	8011668 <GUI_Unlock>
 801032a:	bf00      	nop

0801032c <GL_SetDefault>:
 801032c:	b538      	push	{r3, r4, r5, lr}
 801032e:	4b20      	ldr	r3, [pc, #128]	; (80103b0 <GL_SetDefault+0x84>)
 8010330:	4c20      	ldr	r4, [pc, #128]	; (80103b4 <GL_SetDefault+0x88>)
 8010332:	681d      	ldr	r5, [r3, #0]
 8010334:	f001 f9a2 	bl	801167c <GUI_Lock>
 8010338:	4628      	mov	r0, r5
 801033a:	f002 feb1 	bl	80130a0 <LCD_SetBkColor>
 801033e:	f001 f993 	bl	8011668 <GUI_Unlock>
 8010342:	4b1d      	ldr	r3, [pc, #116]	; (80103b8 <GL_SetDefault+0x8c>)
 8010344:	681d      	ldr	r5, [r3, #0]
 8010346:	f001 f999 	bl	801167c <GUI_Lock>
 801034a:	4628      	mov	r0, r5
 801034c:	f002 feae 	bl	80130ac <LCD_SetColor>
 8010350:	f001 f98a 	bl	8011668 <GUI_Unlock>
 8010354:	f001 f992 	bl	801167c <GUI_Lock>
 8010358:	6823      	ldr	r3, [r4, #0]
 801035a:	2201      	movs	r2, #1
 801035c:	761a      	strb	r2, [r3, #24]
 801035e:	f001 f983 	bl	8011668 <GUI_Unlock>
 8010362:	f001 f98b 	bl	801167c <GUI_Lock>
 8010366:	6823      	ldr	r3, [r4, #0]
 8010368:	2500      	movs	r5, #0
 801036a:	859d      	strh	r5, [r3, #44]	; 0x2c
 801036c:	f001 f97c 	bl	8011668 <GUI_Unlock>
 8010370:	f001 f984 	bl	801167c <GUI_Lock>
 8010374:	6823      	ldr	r3, [r4, #0]
 8010376:	855d      	strh	r5, [r3, #42]	; 0x2a
 8010378:	f001 f976 	bl	8011668 <GUI_Unlock>
 801037c:	f001 f97e 	bl	801167c <GUI_Lock>
 8010380:	4628      	mov	r0, r5
 8010382:	f002 fa6f 	bl	8012864 <LCD_SetDrawMode>
 8010386:	f001 f96f 	bl	8011668 <GUI_Unlock>
 801038a:	4b0c      	ldr	r3, [pc, #48]	; (80103bc <GL_SetDefault+0x90>)
 801038c:	681d      	ldr	r5, [r3, #0]
 801038e:	f001 f975 	bl	801167c <GUI_Lock>
 8010392:	6823      	ldr	r3, [r4, #0]
 8010394:	b105      	cbz	r5, 8010398 <GL_SetDefault+0x6c>
 8010396:	61dd      	str	r5, [r3, #28]
 8010398:	f001 f966 	bl	8011668 <GUI_Unlock>
 801039c:	f001 f96e 	bl	801167c <GUI_Lock>
 80103a0:	6823      	ldr	r3, [r4, #0]
 80103a2:	2200      	movs	r2, #0
 80103a4:	769a      	strb	r2, [r3, #26]
 80103a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80103aa:	f001 b95d 	b.w	8011668 <GUI_Unlock>
 80103ae:	bf00      	nop
 80103b0:	200000a4 	.word	0x200000a4
 80103b4:	200000a8 	.word	0x200000a8
 80103b8:	200000a0 	.word	0x200000a0
 80103bc:	2000009c 	.word	0x2000009c

080103c0 <GUI_SetDrawMode>:
 80103c0:	b510      	push	{r4, lr}
 80103c2:	4604      	mov	r4, r0
 80103c4:	f001 f95a 	bl	801167c <GUI_Lock>
 80103c8:	4620      	mov	r0, r4
 80103ca:	f002 fa4b 	bl	8012864 <LCD_SetDrawMode>
 80103ce:	4604      	mov	r4, r0
 80103d0:	f001 f94a 	bl	8011668 <GUI_Unlock>
 80103d4:	4620      	mov	r0, r4
 80103d6:	bd10      	pop	{r4, pc}

080103d8 <GUI_SetFont>:
 80103d8:	b538      	push	{r3, r4, r5, lr}
 80103da:	4604      	mov	r4, r0
 80103dc:	f001 f94e 	bl	801167c <GUI_Lock>
 80103e0:	4b04      	ldr	r3, [pc, #16]	; (80103f4 <GUI_SetFont+0x1c>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	69dd      	ldr	r5, [r3, #28]
 80103e6:	b104      	cbz	r4, 80103ea <GUI_SetFont+0x12>
 80103e8:	61dc      	str	r4, [r3, #28]
 80103ea:	f001 f93d 	bl	8011668 <GUI_Unlock>
 80103ee:	4628      	mov	r0, r5
 80103f0:	bd38      	pop	{r3, r4, r5, pc}
 80103f2:	bf00      	nop
 80103f4:	200000a8 	.word	0x200000a8

080103f8 <GUI_SetOrg>:
 80103f8:	b538      	push	{r3, r4, r5, lr}
 80103fa:	4605      	mov	r5, r0
 80103fc:	460c      	mov	r4, r1
 80103fe:	f001 f93d 	bl	801167c <GUI_Lock>
 8010402:	4a09      	ldr	r2, [pc, #36]	; (8010428 <GUI_SetOrg+0x30>)
 8010404:	4b09      	ldr	r3, [pc, #36]	; (801042c <GUI_SetOrg+0x34>)
 8010406:	6812      	ldr	r2, [r2, #0]
 8010408:	4909      	ldr	r1, [pc, #36]	; (8010430 <GUI_SetOrg+0x38>)
 801040a:	7c50      	ldrb	r0, [r2, #17]
 801040c:	4a09      	ldr	r2, [pc, #36]	; (8010434 <GUI_SetOrg+0x3c>)
 801040e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8010412:	800d      	strh	r5, [r1, #0]
 8010414:	68c3      	ldr	r3, [r0, #12]
 8010416:	8014      	strh	r4, [r2, #0]
 8010418:	4629      	mov	r1, r5
 801041a:	4622      	mov	r2, r4
 801041c:	6a1c      	ldr	r4, [r3, #32]
 801041e:	47a0      	blx	r4
 8010420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010424:	f001 b920 	b.w	8011668 <GUI_Unlock>
 8010428:	200000a8 	.word	0x200000a8
 801042c:	20030870 	.word	0x20030870
 8010430:	20030848 	.word	0x20030848
 8010434:	20030838 	.word	0x20030838

08010438 <GUI_SetTextMode>:
 8010438:	b538      	push	{r3, r4, r5, lr}
 801043a:	4605      	mov	r5, r0
 801043c:	f001 f91e 	bl	801167c <GUI_Lock>
 8010440:	4b04      	ldr	r3, [pc, #16]	; (8010454 <GUI_SetTextMode+0x1c>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	f9b3 402a 	ldrsh.w	r4, [r3, #42]	; 0x2a
 8010448:	855d      	strh	r5, [r3, #42]	; 0x2a
 801044a:	f001 f90d 	bl	8011668 <GUI_Unlock>
 801044e:	4620      	mov	r0, r4
 8010450:	bd38      	pop	{r3, r4, r5, pc}
 8010452:	bf00      	nop
 8010454:	200000a8 	.word	0x200000a8

08010458 <_InitContext>:
 8010458:	b570      	push	{r4, r5, r6, lr}
 801045a:	4d19      	ldr	r5, [pc, #100]	; (80104c0 <_InitContext+0x68>)
 801045c:	4e19      	ldr	r6, [pc, #100]	; (80104c4 <_InitContext+0x6c>)
 801045e:	692b      	ldr	r3, [r5, #16]
 8010460:	4a19      	ldr	r2, [pc, #100]	; (80104c8 <_InitContext+0x70>)
 8010462:	4604      	mov	r4, r0
 8010464:	f103 0108 	add.w	r1, r3, #8
 8010468:	1d18      	adds	r0, r3, #4
 801046a:	6726      	str	r6, [r4, #112]	; 0x70
 801046c:	63d8      	str	r0, [r3, #60]	; 0x3c
 801046e:	639b      	str	r3, [r3, #56]	; 0x38
 8010470:	641b      	str	r3, [r3, #64]	; 0x40
 8010472:	6161      	str	r1, [r4, #20]
 8010474:	7c5b      	ldrb	r3, [r3, #17]
 8010476:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801047a:	68c3      	ldr	r3, [r0, #12]
 801047c:	f104 0108 	add.w	r1, r4, #8
 8010480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010482:	4798      	blx	r3
 8010484:	692b      	ldr	r3, [r5, #16]
 8010486:	4a11      	ldr	r2, [pc, #68]	; (80104cc <_InitContext+0x74>)
 8010488:	6869      	ldr	r1, [r5, #4]
 801048a:	6662      	str	r2, [r4, #100]	; 0x64
 801048c:	3308      	adds	r3, #8
 801048e:	2201      	movs	r2, #1
 8010490:	61e1      	str	r1, [r4, #28]
 8010492:	6163      	str	r3, [r4, #20]
 8010494:	7622      	strb	r2, [r4, #24]
 8010496:	76e2      	strb	r2, [r4, #27]
 8010498:	f008 fbae 	bl	8018bf8 <WM_GetDesktopWindow>
 801049c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80104a0:	2203      	movs	r2, #3
 80104a2:	f884 2068 	strb.w	r2, [r4, #104]	; 0x68
 80104a6:	6323      	str	r3, [r4, #48]	; 0x30
 80104a8:	6363      	str	r3, [r4, #52]	; 0x34
 80104aa:	64a0      	str	r0, [r4, #72]	; 0x48
 80104ac:	68e8      	ldr	r0, [r5, #12]
 80104ae:	f002 fdf7 	bl	80130a0 <LCD_SetBkColor>
 80104b2:	68a8      	ldr	r0, [r5, #8]
 80104b4:	f002 fdfa 	bl	80130ac <LCD_SetColor>
 80104b8:	4b05      	ldr	r3, [pc, #20]	; (80104d0 <_InitContext+0x78>)
 80104ba:	4a06      	ldr	r2, [pc, #24]	; (80104d4 <_InitContext+0x7c>)
 80104bc:	601a      	str	r2, [r3, #0]
 80104be:	bd70      	pop	{r4, r5, r6, pc}
 80104c0:	20000098 	.word	0x20000098
 80104c4:	2002e260 	.word	0x2002e260
 80104c8:	20030870 	.word	0x20030870
 80104cc:	08026354 	.word	0x08026354
 80104d0:	20030868 	.word	0x20030868
 80104d4:	0802636c 	.word	0x0802636c

080104d8 <_OnExit>:
 80104d8:	b570      	push	{r4, r5, r6, lr}
 80104da:	4d0a      	ldr	r5, [pc, #40]	; (8010504 <_OnExit+0x2c>)
 80104dc:	4e0a      	ldr	r6, [pc, #40]	; (8010508 <_OnExit+0x30>)
 80104de:	2400      	movs	r4, #0
 80104e0:	4621      	mov	r1, r4
 80104e2:	6833      	ldr	r3, [r6, #0]
 80104e4:	67ec      	str	r4, [r5, #124]	; 0x7c
 80104e6:	2274      	movs	r2, #116	; 0x74
 80104e8:	4628      	mov	r0, r5
 80104ea:	4798      	blx	r3
 80104ec:	6833      	ldr	r3, [r6, #0]
 80104ee:	4807      	ldr	r0, [pc, #28]	; (801050c <_OnExit+0x34>)
 80104f0:	4621      	mov	r1, r4
 80104f2:	2208      	movs	r2, #8
 80104f4:	4798      	blx	r3
 80104f6:	4a06      	ldr	r2, [pc, #24]	; (8010510 <_OnExit+0x38>)
 80104f8:	4906      	ldr	r1, [pc, #24]	; (8010514 <_OnExit+0x3c>)
 80104fa:	4b07      	ldr	r3, [pc, #28]	; (8010518 <_OnExit+0x40>)
 80104fc:	7014      	strb	r4, [r2, #0]
 80104fe:	610d      	str	r5, [r1, #16]
 8010500:	601c      	str	r4, [r3, #0]
 8010502:	bd70      	pop	{r4, r5, r6, pc}
 8010504:	2002e1e0 	.word	0x2002e1e0
 8010508:	200000cc 	.word	0x200000cc
 801050c:	20030870 	.word	0x20030870
 8010510:	20030858 	.word	0x20030858
 8010514:	20000098 	.word	0x20000098
 8010518:	20030834 	.word	0x20030834

0801051c <GUI_Clear>:
 801051c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010520:	2100      	movs	r1, #0
 8010522:	b082      	sub	sp, #8
 8010524:	4608      	mov	r0, r1
 8010526:	f7ff fe8b 	bl	8010240 <GUI_GotoXY>
 801052a:	f001 f8a7 	bl	801167c <GUI_Lock>
 801052e:	2004      	movs	r0, #4
 8010530:	f002 f998 	bl	8012864 <LCD_SetDrawMode>
 8010534:	4b17      	ldr	r3, [pc, #92]	; (8010594 <GUI_Clear+0x78>)
 8010536:	691b      	ldr	r3, [r3, #16]
 8010538:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 801053a:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 801053c:	f5a5 577f 	sub.w	r7, r5, #16320	; 0x3fc0
 8010540:	f5a4 567f 	sub.w	r6, r4, #16320	; 0x3fc0
 8010544:	f505 557f 	add.w	r5, r5, #16320	; 0x3fc0
 8010548:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
 801054c:	4680      	mov	r8, r0
 801054e:	3f3f      	subs	r7, #63	; 0x3f
 8010550:	353f      	adds	r5, #63	; 0x3f
 8010552:	3e3f      	subs	r6, #63	; 0x3f
 8010554:	343f      	adds	r4, #63	; 0x3f
 8010556:	4668      	mov	r0, sp
 8010558:	f8ad 7000 	strh.w	r7, [sp]
 801055c:	f8ad 5004 	strh.w	r5, [sp, #4]
 8010560:	f8ad 6002 	strh.w	r6, [sp, #2]
 8010564:	f8ad 4006 	strh.w	r4, [sp, #6]
 8010568:	f007 fd24 	bl	8017fb4 <WM__InitIVRSearch>
 801056c:	b148      	cbz	r0, 8010582 <GUI_Clear+0x66>
 801056e:	4623      	mov	r3, r4
 8010570:	462a      	mov	r2, r5
 8010572:	4631      	mov	r1, r6
 8010574:	4638      	mov	r0, r7
 8010576:	f002 fa05 	bl	8012984 <LCD_FillRect>
 801057a:	f007 fbf5 	bl	8017d68 <WM__GetNextIVR>
 801057e:	2800      	cmp	r0, #0
 8010580:	d1f5      	bne.n	801056e <GUI_Clear+0x52>
 8010582:	4640      	mov	r0, r8
 8010584:	f002 f96e 	bl	8012864 <LCD_SetDrawMode>
 8010588:	f001 f86e 	bl	8011668 <GUI_Unlock>
 801058c:	b002      	add	sp, #8
 801058e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010592:	bf00      	nop
 8010594:	20000098 	.word	0x20000098

08010598 <GUI__Config>:
 8010598:	b530      	push	{r4, r5, lr}
 801059a:	4d1b      	ldr	r5, [pc, #108]	; (8010608 <GUI__Config+0x70>)
 801059c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801059e:	b085      	sub	sp, #20
 80105a0:	b10b      	cbz	r3, 80105a6 <GUI__Config+0xe>
 80105a2:	b005      	add	sp, #20
 80105a4:	bd30      	pop	{r4, r5, pc}
 80105a6:	4b19      	ldr	r3, [pc, #100]	; (801060c <GUI__Config+0x74>)
 80105a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80105aa:	466c      	mov	r4, sp
 80105ac:	c407      	stmia	r4!, {r0, r1, r2}
 80105ae:	a904      	add	r1, sp, #16
 80105b0:	f824 3b02 	strh.w	r3, [r4], #2
 80105b4:	0c1b      	lsrs	r3, r3, #16
 80105b6:	7023      	strb	r3, [r4, #0]
 80105b8:	f811 2d10 	ldrb.w	r2, [r1, #-16]!
 80105bc:	2301      	movs	r3, #1
 80105be:	67eb      	str	r3, [r5, #124]	; 0x7c
 80105c0:	f105 0480 	add.w	r4, r5, #128	; 0x80
 80105c4:	f804 2b01 	strb.w	r2, [r4], #1
 80105c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80105cc:	2a00      	cmp	r2, #0
 80105ce:	d1f9      	bne.n	80105c4 <GUI__Config+0x2c>
 80105d0:	f7ff fd68 	bl	80100a4 <GUI_GetVersionString>
 80105d4:	4623      	mov	r3, r4
 80105d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105da:	4619      	mov	r1, r3
 80105dc:	f803 2b01 	strb.w	r2, [r3], #1
 80105e0:	7802      	ldrb	r2, [r0, #0]
 80105e2:	2a00      	cmp	r2, #0
 80105e4:	d1f7      	bne.n	80105d6 <GUI__Config+0x3e>
 80105e6:	704a      	strb	r2, [r1, #1]
 80105e8:	f7fc ffb4 	bl	800d554 <GUI_X_Config>
 80105ec:	f001 f896 	bl	801171c <GUITASK_Init>
 80105f0:	f7fd ff24 	bl	800e43c <LCD_X_Config>
 80105f4:	4b06      	ldr	r3, [pc, #24]	; (8010610 <GUI__Config+0x78>)
 80105f6:	4807      	ldr	r0, [pc, #28]	; (8010614 <GUI__Config+0x7c>)
 80105f8:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
 80105fc:	b005      	add	sp, #20
 80105fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010602:	f000 b887 	b.w	8010714 <GUI__RegisterExit>
 8010606:	bf00      	nop
 8010608:	2002e1e0 	.word	0x2002e1e0
 801060c:	0802635c 	.word	0x0802635c
 8010610:	080104d9 	.word	0x080104d9
 8010614:	2002e274 	.word	0x2002e274

08010618 <GUI_Init>:
 8010618:	b590      	push	{r4, r7, lr}
 801061a:	b083      	sub	sp, #12
 801061c:	af00      	add	r7, sp, #0
 801061e:	4a34      	ldr	r2, [pc, #208]	; (80106f0 <GUI_Init+0xd8>)
 8010620:	4b33      	ldr	r3, [pc, #204]	; (80106f0 <GUI_Init+0xd8>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f023 0301 	bic.w	r3, r3, #1
 8010628:	6013      	str	r3, [r2, #0]
 801062a:	4b32      	ldr	r3, [pc, #200]	; (80106f4 <GUI_Init+0xdc>)
 801062c:	2201      	movs	r2, #1
 801062e:	601a      	str	r2, [r3, #0]
 8010630:	bf00      	nop
 8010632:	4b30      	ldr	r3, [pc, #192]	; (80106f4 <GUI_Init+0xdc>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d1fb      	bne.n	8010632 <GUI_Init+0x1a>
 801063a:	4b2f      	ldr	r3, [pc, #188]	; (80106f8 <GUI_Init+0xe0>)
 801063c:	4a2f      	ldr	r2, [pc, #188]	; (80106fc <GUI_Init+0xe4>)
 801063e:	601a      	str	r2, [r3, #0]
 8010640:	4b2d      	ldr	r3, [pc, #180]	; (80106f8 <GUI_Init+0xe0>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	4a2e      	ldr	r2, [pc, #184]	; (8010700 <GUI_Init+0xe8>)
 8010646:	4293      	cmp	r3, r2
 8010648:	d000      	beq.n	801064c <GUI_Init+0x34>
 801064a:	e7fe      	b.n	801064a <GUI_Init+0x32>
 801064c:	f7ff ffa4 	bl	8010598 <GUI__Config>
 8010650:	4b2c      	ldr	r3, [pc, #176]	; (8010704 <GUI_Init+0xec>)
 8010652:	222e      	movs	r2, #46	; 0x2e
 8010654:	701a      	strb	r2, [r3, #0]
 8010656:	f7f7 feb1 	bl	80083bc <GUI_X_Init>
 801065a:	482b      	ldr	r0, [pc, #172]	; (8010708 <GUI_Init+0xf0>)
 801065c:	f7ff fefc 	bl	8010458 <_InitContext>
 8010660:	f002 fc62 	bl	8012f28 <emWin_LCD_Init>
 8010664:	6078      	str	r0, [r7, #4]
 8010666:	f002 ff95 	bl	8013594 <LCD_GetXSizeDisplay>
 801066a:	4603      	mov	r3, r0
 801066c:	2b00      	cmp	r3, #0
 801066e:	bf0c      	ite	eq
 8010670:	2301      	moveq	r3, #1
 8010672:	2300      	movne	r3, #0
 8010674:	b2dc      	uxtb	r4, r3
 8010676:	f002 ff93 	bl	80135a0 <LCD_GetYSizeDisplay>
 801067a:	4603      	mov	r3, r0
 801067c:	2b00      	cmp	r3, #0
 801067e:	bf0c      	ite	eq
 8010680:	2301      	moveq	r3, #1
 8010682:	2300      	movne	r3, #0
 8010684:	b2db      	uxtb	r3, r3
 8010686:	4323      	orrs	r3, r4
 8010688:	b2db      	uxtb	r3, r3
 801068a:	2b00      	cmp	r3, #0
 801068c:	d009      	beq.n	80106a2 <GUI_Init+0x8a>
 801068e:	f002 ff2d 	bl	80134ec <LCD_GetXSizeMax>
 8010692:	4604      	mov	r4, r0
 8010694:	f002 ff44 	bl	8013520 <LCD_GetYSizeMax>
 8010698:	4603      	mov	r3, r0
 801069a:	4619      	mov	r1, r3
 801069c:	4620      	mov	r0, r4
 801069e:	f002 ff73 	bl	8013588 <LCD_SetDisplaySize>
 80106a2:	2100      	movs	r1, #0
 80106a4:	2000      	movs	r0, #0
 80106a6:	f7ff fea7 	bl	80103f8 <GUI_SetOrg>
 80106aa:	f007 fff7 	bl	801869c <WM_Init>
 80106ae:	f001 f871 	bl	8011794 <GUITASK_CopyContext>
 80106b2:	4b16      	ldr	r3, [pc, #88]	; (801070c <GUI_Init+0xf4>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d012      	beq.n	80106e0 <GUI_Init+0xc8>
 80106ba:	e00d      	b.n	80106d8 <GUI_Init+0xc0>
 80106bc:	4b13      	ldr	r3, [pc, #76]	; (801070c <GUI_Init+0xf4>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d003      	beq.n	80106ce <GUI_Init+0xb6>
 80106c6:	4b11      	ldr	r3, [pc, #68]	; (801070c <GUI_Init+0xf4>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	4798      	blx	r3
 80106ce:	4b0f      	ldr	r3, [pc, #60]	; (801070c <GUI_Init+0xf4>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	685b      	ldr	r3, [r3, #4]
 80106d4:	4a0d      	ldr	r2, [pc, #52]	; (801070c <GUI_Init+0xf4>)
 80106d6:	6013      	str	r3, [r2, #0]
 80106d8:	4b0c      	ldr	r3, [pc, #48]	; (801070c <GUI_Init+0xf4>)
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d1ed      	bne.n	80106bc <GUI_Init+0xa4>
 80106e0:	4b0b      	ldr	r3, [pc, #44]	; (8010710 <GUI_Init+0xf8>)
 80106e2:	2201      	movs	r2, #1
 80106e4:	701a      	strb	r2, [r3, #0]
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	4618      	mov	r0, r3
 80106ea:	370c      	adds	r7, #12
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd90      	pop	{r4, r7, pc}
 80106f0:	e0002000 	.word	0xe0002000
 80106f4:	40023008 	.word	0x40023008
 80106f8:	40023000 	.word	0x40023000
 80106fc:	f407a5c2 	.word	0xf407a5c2
 8010700:	b5e8b5cd 	.word	0xb5e8b5cd
 8010704:	20030828 	.word	0x20030828
 8010708:	2002e1e0 	.word	0x2002e1e0
 801070c:	2002e258 	.word	0x2002e258
 8010710:	20030850 	.word	0x20030850

08010714 <GUI__RegisterExit>:
 8010714:	b480      	push	{r7}
 8010716:	b083      	sub	sp, #12
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	4b06      	ldr	r3, [pc, #24]	; (8010738 <GUI__RegisterExit+0x24>)
 801071e:	681a      	ldr	r2, [r3, #0]
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	605a      	str	r2, [r3, #4]
 8010724:	4a04      	ldr	r2, [pc, #16]	; (8010738 <GUI__RegisterExit+0x24>)
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6013      	str	r3, [r2, #0]
 801072a:	bf00      	nop
 801072c:	370c      	adds	r7, #12
 801072e:	46bd      	mov	sp, r7
 8010730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010734:	4770      	bx	lr
 8010736:	bf00      	nop
 8010738:	2002e254 	.word	0x2002e254

0801073c <GUI_DCACHE_Clear>:
 801073c:	b580      	push	{r7, lr}
 801073e:	b082      	sub	sp, #8
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	4b05      	ldr	r3, [pc, #20]	; (801075c <GUI_DCACHE_Clear+0x20>)
 8010746:	681b      	ldr	r3, [r3, #0]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d003      	beq.n	8010754 <GUI_DCACHE_Clear+0x18>
 801074c:	4b03      	ldr	r3, [pc, #12]	; (801075c <GUI_DCACHE_Clear+0x20>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	6878      	ldr	r0, [r7, #4]
 8010752:	4798      	blx	r3
 8010754:	bf00      	nop
 8010756:	3708      	adds	r7, #8
 8010758:	46bd      	mov	sp, r7
 801075a:	bd80      	pop	{r7, pc}
 801075c:	20030834 	.word	0x20030834

08010760 <GUI_DEVICE__GetpDriver>:
 8010760:	2801      	cmp	r0, #1
 8010762:	dc0e      	bgt.n	8010782 <GUI_DEVICE__GetpDriver+0x22>
 8010764:	4b08      	ldr	r3, [pc, #32]	; (8010788 <GUI_DEVICE__GetpDriver+0x28>)
 8010766:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801076a:	b158      	cbz	r0, 8010784 <GUI_DEVICE__GetpDriver+0x24>
 801076c:	68c3      	ldr	r3, [r0, #12]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	b91b      	cbnz	r3, 801077a <GUI_DEVICE__GetpDriver+0x1a>
 8010772:	e008      	b.n	8010786 <GUI_DEVICE__GetpDriver+0x26>
 8010774:	68c3      	ldr	r3, [r0, #12]
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	b123      	cbz	r3, 8010784 <GUI_DEVICE__GetpDriver+0x24>
 801077a:	6800      	ldr	r0, [r0, #0]
 801077c:	2800      	cmp	r0, #0
 801077e:	d1f9      	bne.n	8010774 <GUI_DEVICE__GetpDriver+0x14>
 8010780:	4770      	bx	lr
 8010782:	2000      	movs	r0, #0
 8010784:	4770      	bx	lr
 8010786:	4770      	bx	lr
 8010788:	20030870 	.word	0x20030870

0801078c <GUI_DEVICE_Delete>:
 801078c:	f7fe bfb2 	b.w	800f6f4 <GUI_ALLOC_FreeFixedBlock>

08010790 <GUI_DEVICE_Create>:
 8010790:	2b01      	cmp	r3, #1
 8010792:	dc12      	bgt.n	80107ba <GUI_DEVICE_Create+0x2a>
 8010794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010796:	4606      	mov	r6, r0
 8010798:	201c      	movs	r0, #28
 801079a:	4617      	mov	r7, r2
 801079c:	460c      	mov	r4, r1
 801079e:	461d      	mov	r5, r3
 80107a0:	f7fe ffb2 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 80107a4:	b1b8      	cbz	r0, 80107d6 <GUI_DEVICE_Create+0x46>
 80107a6:	b154      	cbz	r4, 80107be <GUI_DEVICE_Create+0x2e>
 80107a8:	6104      	str	r4, [r0, #16]
 80107aa:	2300      	movs	r3, #0
 80107ac:	6083      	str	r3, [r0, #8]
 80107ae:	6185      	str	r5, [r0, #24]
 80107b0:	8287      	strh	r7, [r0, #20]
 80107b2:	60c6      	str	r6, [r0, #12]
 80107b4:	6003      	str	r3, [r0, #0]
 80107b6:	6043      	str	r3, [r0, #4]
 80107b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107ba:	2000      	movs	r0, #0
 80107bc:	4770      	bx	lr
 80107be:	4b07      	ldr	r3, [pc, #28]	; (80107dc <GUI_DEVICE_Create+0x4c>)
 80107c0:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 80107c4:	b90a      	cbnz	r2, 80107ca <GUI_DEVICE_Create+0x3a>
 80107c6:	e7f0      	b.n	80107aa <GUI_DEVICE_Create+0x1a>
 80107c8:	461a      	mov	r2, r3
 80107ca:	6813      	ldr	r3, [r2, #0]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d1fb      	bne.n	80107c8 <GUI_DEVICE_Create+0x38>
 80107d0:	6913      	ldr	r3, [r2, #16]
 80107d2:	6103      	str	r3, [r0, #16]
 80107d4:	e7e9      	b.n	80107aa <GUI_DEVICE_Create+0x1a>
 80107d6:	2000      	movs	r0, #0
 80107d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107da:	bf00      	nop
 80107dc:	20030870 	.word	0x20030870

080107e0 <GUI_DEVICE_Unlink>:
 80107e0:	4a0f      	ldr	r2, [pc, #60]	; (8010820 <GUI_DEVICE_Unlink+0x40>)
 80107e2:	6981      	ldr	r1, [r0, #24]
 80107e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80107e8:	4298      	cmp	r0, r3
 80107ea:	d00a      	beq.n	8010802 <GUI_DEVICE_Unlink+0x22>
 80107ec:	6842      	ldr	r2, [r0, #4]
 80107ee:	b10a      	cbz	r2, 80107f4 <GUI_DEVICE_Unlink+0x14>
 80107f0:	6803      	ldr	r3, [r0, #0]
 80107f2:	6013      	str	r3, [r2, #0]
 80107f4:	6803      	ldr	r3, [r0, #0]
 80107f6:	b103      	cbz	r3, 80107fa <GUI_DEVICE_Unlink+0x1a>
 80107f8:	605a      	str	r2, [r3, #4]
 80107fa:	2300      	movs	r3, #0
 80107fc:	6003      	str	r3, [r0, #0]
 80107fe:	6043      	str	r3, [r0, #4]
 8010800:	4770      	bx	lr
 8010802:	6803      	ldr	r3, [r0, #0]
 8010804:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010808:	b12b      	cbz	r3, 8010816 <GUI_DEVICE_Unlink+0x36>
 801080a:	2200      	movs	r2, #0
 801080c:	605a      	str	r2, [r3, #4]
 801080e:	6842      	ldr	r2, [r0, #4]
 8010810:	2a00      	cmp	r2, #0
 8010812:	d1ee      	bne.n	80107f2 <GUI_DEVICE_Unlink+0x12>
 8010814:	e7f0      	b.n	80107f8 <GUI_DEVICE_Unlink+0x18>
 8010816:	6842      	ldr	r2, [r0, #4]
 8010818:	2a00      	cmp	r2, #0
 801081a:	d1ea      	bne.n	80107f2 <GUI_DEVICE_Unlink+0x12>
 801081c:	e7ed      	b.n	80107fa <GUI_DEVICE_Unlink+0x1a>
 801081e:	bf00      	nop
 8010820:	20030870 	.word	0x20030870

08010824 <GUI_DEVICE_Link>:
 8010824:	2800      	cmp	r0, #0
 8010826:	d03c      	beq.n	80108a2 <GUI_DEVICE_Link+0x7e>
 8010828:	b470      	push	{r4, r5, r6}
 801082a:	6984      	ldr	r4, [r0, #24]
 801082c:	2c01      	cmp	r4, #1
 801082e:	dd03      	ble.n	8010838 <GUI_DEVICE_Link+0x14>
 8010830:	2301      	movs	r3, #1
 8010832:	4618      	mov	r0, r3
 8010834:	bc70      	pop	{r4, r5, r6}
 8010836:	4770      	bx	lr
 8010838:	4b1e      	ldr	r3, [pc, #120]	; (80108b4 <GUI_DEVICE_Link+0x90>)
 801083a:	4d1f      	ldr	r5, [pc, #124]	; (80108b8 <GUI_DEVICE_Link+0x94>)
 801083c:	781a      	ldrb	r2, [r3, #0]
 801083e:	4294      	cmp	r4, r2
 8010840:	bfa4      	itt	ge
 8010842:	1c62      	addge	r2, r4, #1
 8010844:	701a      	strbge	r2, [r3, #0]
 8010846:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801084a:	b90b      	cbnz	r3, 8010850 <GUI_DEVICE_Link+0x2c>
 801084c:	e02f      	b.n	80108ae <GUI_DEVICE_Link+0x8a>
 801084e:	4613      	mov	r3, r2
 8010850:	685a      	ldr	r2, [r3, #4]
 8010852:	2a00      	cmp	r2, #0
 8010854:	d1fb      	bne.n	801084e <GUI_DEVICE_Link+0x2a>
 8010856:	68c2      	ldr	r2, [r0, #12]
 8010858:	6811      	ldr	r1, [r2, #0]
 801085a:	e002      	b.n	8010862 <GUI_DEVICE_Link+0x3e>
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d0e6      	beq.n	8010830 <GUI_DEVICE_Link+0xc>
 8010862:	68da      	ldr	r2, [r3, #12]
 8010864:	6812      	ldr	r2, [r2, #0]
 8010866:	4291      	cmp	r1, r2
 8010868:	dbf8      	blt.n	801085c <GUI_DEVICE_Link+0x38>
 801086a:	d00d      	beq.n	8010888 <GUI_DEVICE_Link+0x64>
 801086c:	685a      	ldr	r2, [r3, #4]
 801086e:	b1da      	cbz	r2, 80108a8 <GUI_DEVICE_Link+0x84>
 8010870:	6010      	str	r0, [r2, #0]
 8010872:	6042      	str	r2, [r0, #4]
 8010874:	4298      	cmp	r0, r3
 8010876:	bf14      	ite	ne
 8010878:	461a      	movne	r2, r3
 801087a:	2200      	moveq	r2, #0
 801087c:	6058      	str	r0, [r3, #4]
 801087e:	2300      	movs	r3, #0
 8010880:	6002      	str	r2, [r0, #0]
 8010882:	bc70      	pop	{r4, r5, r6}
 8010884:	4618      	mov	r0, r3
 8010886:	4770      	bx	lr
 8010888:	8a82      	ldrh	r2, [r0, #20]
 801088a:	2a01      	cmp	r2, #1
 801088c:	d1ee      	bne.n	801086c <GUI_DEVICE_Link+0x48>
 801088e:	e004      	b.n	801089a <GUI_DEVICE_Link+0x76>
 8010890:	68d3      	ldr	r3, [r2, #12]
 8010892:	681e      	ldr	r6, [r3, #0]
 8010894:	42b1      	cmp	r1, r6
 8010896:	4613      	mov	r3, r2
 8010898:	dce8      	bgt.n	801086c <GUI_DEVICE_Link+0x48>
 801089a:	681a      	ldr	r2, [r3, #0]
 801089c:	2a00      	cmp	r2, #0
 801089e:	d1f7      	bne.n	8010890 <GUI_DEVICE_Link+0x6c>
 80108a0:	e7e4      	b.n	801086c <GUI_DEVICE_Link+0x48>
 80108a2:	2301      	movs	r3, #1
 80108a4:	4618      	mov	r0, r3
 80108a6:	4770      	bx	lr
 80108a8:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 80108ac:	e7e2      	b.n	8010874 <GUI_DEVICE_Link+0x50>
 80108ae:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 80108b2:	e7be      	b.n	8010832 <GUI_DEVICE_Link+0xe>
 80108b4:	20030822 	.word	0x20030822
 80108b8:	20030870 	.word	0x20030870

080108bc <GUI_DEVICE_CreateAndLink>:
 80108bc:	2b01      	cmp	r3, #1
 80108be:	dc3b      	bgt.n	8010938 <GUI_DEVICE_CreateAndLink+0x7c>
 80108c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108c4:	4681      	mov	r9, r0
 80108c6:	201c      	movs	r0, #28
 80108c8:	4690      	mov	r8, r2
 80108ca:	460f      	mov	r7, r1
 80108cc:	461e      	mov	r6, r3
 80108ce:	f7fe ff1b 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 80108d2:	4605      	mov	r5, r0
 80108d4:	2800      	cmp	r0, #0
 80108d6:	d07f      	beq.n	80109d8 <GUI_DEVICE_CreateAndLink+0x11c>
 80108d8:	4a41      	ldr	r2, [pc, #260]	; (80109e0 <GUI_DEVICE_CreateAndLink+0x124>)
 80108da:	2f00      	cmp	r7, #0
 80108dc:	d031      	beq.n	8010942 <GUI_DEVICE_CreateAndLink+0x86>
 80108de:	2300      	movs	r3, #0
 80108e0:	f8df e104 	ldr.w	lr, [pc, #260]	; 80109e8 <GUI_DEVICE_CreateAndLink+0x12c>
 80108e4:	f852 4026 	ldr.w	r4, [r2, r6, lsl #2]
 80108e8:	6003      	str	r3, [r0, #0]
 80108ea:	f89e 1000 	ldrb.w	r1, [lr]
 80108ee:	6107      	str	r7, [r0, #16]
 80108f0:	428e      	cmp	r6, r1
 80108f2:	6186      	str	r6, [r0, #24]
 80108f4:	f8a0 8014 	strh.w	r8, [r0, #20]
 80108f8:	f8c0 900c 	str.w	r9, [r0, #12]
 80108fc:	6043      	str	r3, [r0, #4]
 80108fe:	6083      	str	r3, [r0, #8]
 8010900:	db02      	blt.n	8010908 <GUI_DEVICE_CreateAndLink+0x4c>
 8010902:	1c73      	adds	r3, r6, #1
 8010904:	f88e 3000 	strb.w	r3, [lr]
 8010908:	2c00      	cmp	r4, #0
 801090a:	d05d      	beq.n	80109c8 <GUI_DEVICE_CreateAndLink+0x10c>
 801090c:	4621      	mov	r1, r4
 801090e:	684c      	ldr	r4, [r1, #4]
 8010910:	2c00      	cmp	r4, #0
 8010912:	d1fb      	bne.n	801090c <GUI_DEVICE_CreateAndLink+0x50>
 8010914:	f8d9 0000 	ldr.w	r0, [r9]
 8010918:	68cb      	ldr	r3, [r1, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	4283      	cmp	r3, r0
 801091e:	dd2c      	ble.n	801097a <GUI_DEVICE_CreateAndLink+0xbe>
 8010920:	6809      	ldr	r1, [r1, #0]
 8010922:	2900      	cmp	r1, #0
 8010924:	d1f8      	bne.n	8010918 <GUI_DEVICE_CreateAndLink+0x5c>
 8010926:	b948      	cbnz	r0, 801093c <GUI_DEVICE_CreateAndLink+0x80>
 8010928:	4b2e      	ldr	r3, [pc, #184]	; (80109e4 <GUI_DEVICE_CreateAndLink+0x128>)
 801092a:	3616      	adds	r6, #22
 801092c:	681a      	ldr	r2, [r3, #0]
 801092e:	4628      	mov	r0, r5
 8010930:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 8010934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010938:	2000      	movs	r0, #0
 801093a:	4770      	bx	lr
 801093c:	4628      	mov	r0, r5
 801093e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010942:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 8010946:	2900      	cmp	r1, #0
 8010948:	d030      	beq.n	80109ac <GUI_DEVICE_CreateAndLink+0xf0>
 801094a:	4608      	mov	r0, r1
 801094c:	e000      	b.n	8010950 <GUI_DEVICE_CreateAndLink+0x94>
 801094e:	4618      	mov	r0, r3
 8010950:	6803      	ldr	r3, [r0, #0]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d1fb      	bne.n	801094e <GUI_DEVICE_CreateAndLink+0x92>
 8010956:	f8df e090 	ldr.w	lr, [pc, #144]	; 80109e8 <GUI_DEVICE_CreateAndLink+0x12c>
 801095a:	6900      	ldr	r0, [r0, #16]
 801095c:	602b      	str	r3, [r5, #0]
 801095e:	6128      	str	r0, [r5, #16]
 8010960:	f89e 0000 	ldrb.w	r0, [lr]
 8010964:	61ae      	str	r6, [r5, #24]
 8010966:	4286      	cmp	r6, r0
 8010968:	f8a5 8014 	strh.w	r8, [r5, #20]
 801096c:	f8c5 900c 	str.w	r9, [r5, #12]
 8010970:	606b      	str	r3, [r5, #4]
 8010972:	60ab      	str	r3, [r5, #8]
 8010974:	dbcb      	blt.n	801090e <GUI_DEVICE_CreateAndLink+0x52>
 8010976:	460c      	mov	r4, r1
 8010978:	e7c3      	b.n	8010902 <GUI_DEVICE_CreateAndLink+0x46>
 801097a:	d00a      	beq.n	8010992 <GUI_DEVICE_CreateAndLink+0xd6>
 801097c:	684b      	ldr	r3, [r1, #4]
 801097e:	b343      	cbz	r3, 80109d2 <GUI_DEVICE_CreateAndLink+0x116>
 8010980:	601d      	str	r5, [r3, #0]
 8010982:	606b      	str	r3, [r5, #4]
 8010984:	428d      	cmp	r5, r1
 8010986:	bf14      	ite	ne
 8010988:	460b      	movne	r3, r1
 801098a:	2300      	moveq	r3, #0
 801098c:	604d      	str	r5, [r1, #4]
 801098e:	602b      	str	r3, [r5, #0]
 8010990:	e7c9      	b.n	8010926 <GUI_DEVICE_CreateAndLink+0x6a>
 8010992:	f1b8 0f01 	cmp.w	r8, #1
 8010996:	d1f1      	bne.n	801097c <GUI_DEVICE_CreateAndLink+0xc0>
 8010998:	e004      	b.n	80109a4 <GUI_DEVICE_CreateAndLink+0xe8>
 801099a:	68d9      	ldr	r1, [r3, #12]
 801099c:	680c      	ldr	r4, [r1, #0]
 801099e:	4284      	cmp	r4, r0
 80109a0:	4619      	mov	r1, r3
 80109a2:	dbeb      	blt.n	801097c <GUI_DEVICE_CreateAndLink+0xc0>
 80109a4:	680b      	ldr	r3, [r1, #0]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d1f7      	bne.n	801099a <GUI_DEVICE_CreateAndLink+0xde>
 80109aa:	e7e7      	b.n	801097c <GUI_DEVICE_CreateAndLink+0xc0>
 80109ac:	f8df e038 	ldr.w	lr, [pc, #56]	; 80109e8 <GUI_DEVICE_CreateAndLink+0x12c>
 80109b0:	6001      	str	r1, [r0, #0]
 80109b2:	f89e 3000 	ldrb.w	r3, [lr]
 80109b6:	6186      	str	r6, [r0, #24]
 80109b8:	429e      	cmp	r6, r3
 80109ba:	f8a0 8014 	strh.w	r8, [r0, #20]
 80109be:	f8c0 900c 	str.w	r9, [r0, #12]
 80109c2:	6041      	str	r1, [r0, #4]
 80109c4:	6081      	str	r1, [r0, #8]
 80109c6:	dad6      	bge.n	8010976 <GUI_DEVICE_CreateAndLink+0xba>
 80109c8:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 80109cc:	f8d9 0000 	ldr.w	r0, [r9]
 80109d0:	e7a9      	b.n	8010926 <GUI_DEVICE_CreateAndLink+0x6a>
 80109d2:	f842 5026 	str.w	r5, [r2, r6, lsl #2]
 80109d6:	e7d5      	b.n	8010984 <GUI_DEVICE_CreateAndLink+0xc8>
 80109d8:	2000      	movs	r0, #0
 80109da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109de:	bf00      	nop
 80109e0:	20030870 	.word	0x20030870
 80109e4:	200000a8 	.word	0x200000a8
 80109e8:	20030822 	.word	0x20030822

080109ec <GUI_DEVICE_UnlinkTaskDevices>:
 80109ec:	2000      	movs	r0, #0
 80109ee:	4770      	bx	lr

080109f0 <GUI_DEVICE_LinkDevices>:
 80109f0:	2800      	cmp	r0, #0
 80109f2:	d04d      	beq.n	8010a90 <GUI_DEVICE_LinkDevices+0xa0>
 80109f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109f8:	f8df e09c 	ldr.w	lr, [pc, #156]	; 8010a98 <GUI_DEVICE_LinkDevices+0xa8>
 80109fc:	4f25      	ldr	r7, [pc, #148]	; (8010a94 <GUI_DEVICE_LinkDevices+0xa4>)
 80109fe:	f89e 6000 	ldrb.w	r6, [lr]
 8010a02:	46bc      	mov	ip, r7
 8010a04:	e002      	b.n	8010a0c <GUI_DEVICE_LinkDevices+0x1c>
 8010a06:	4628      	mov	r0, r5
 8010a08:	2d00      	cmp	r5, #0
 8010a0a:	d027      	beq.n	8010a5c <GUI_DEVICE_LinkDevices+0x6c>
 8010a0c:	6984      	ldr	r4, [r0, #24]
 8010a0e:	6805      	ldr	r5, [r0, #0]
 8010a10:	2c01      	cmp	r4, #1
 8010a12:	dcf8      	bgt.n	8010a06 <GUI_DEVICE_LinkDevices+0x16>
 8010a14:	42b4      	cmp	r4, r6
 8010a16:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8010a1a:	bfa4      	itt	ge
 8010a1c:	1c66      	addge	r6, r4, #1
 8010a1e:	b2f6      	uxtbge	r6, r6
 8010a20:	b90b      	cbnz	r3, 8010a26 <GUI_DEVICE_LinkDevices+0x36>
 8010a22:	e032      	b.n	8010a8a <GUI_DEVICE_LinkDevices+0x9a>
 8010a24:	4613      	mov	r3, r2
 8010a26:	685a      	ldr	r2, [r3, #4]
 8010a28:	2a00      	cmp	r2, #0
 8010a2a:	d1fb      	bne.n	8010a24 <GUI_DEVICE_LinkDevices+0x34>
 8010a2c:	68c2      	ldr	r2, [r0, #12]
 8010a2e:	6811      	ldr	r1, [r2, #0]
 8010a30:	e002      	b.n	8010a38 <GUI_DEVICE_LinkDevices+0x48>
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d0e6      	beq.n	8010a06 <GUI_DEVICE_LinkDevices+0x16>
 8010a38:	68da      	ldr	r2, [r3, #12]
 8010a3a:	6812      	ldr	r2, [r2, #0]
 8010a3c:	428a      	cmp	r2, r1
 8010a3e:	dcf8      	bgt.n	8010a32 <GUI_DEVICE_LinkDevices+0x42>
 8010a40:	d010      	beq.n	8010a64 <GUI_DEVICE_LinkDevices+0x74>
 8010a42:	685a      	ldr	r2, [r3, #4]
 8010a44:	b1a2      	cbz	r2, 8010a70 <GUI_DEVICE_LinkDevices+0x80>
 8010a46:	6010      	str	r0, [r2, #0]
 8010a48:	6042      	str	r2, [r0, #4]
 8010a4a:	4298      	cmp	r0, r3
 8010a4c:	bf14      	ite	ne
 8010a4e:	461a      	movne	r2, r3
 8010a50:	2200      	moveq	r2, #0
 8010a52:	6058      	str	r0, [r3, #4]
 8010a54:	6002      	str	r2, [r0, #0]
 8010a56:	4628      	mov	r0, r5
 8010a58:	2d00      	cmp	r5, #0
 8010a5a:	d1d7      	bne.n	8010a0c <GUI_DEVICE_LinkDevices+0x1c>
 8010a5c:	f88e 6000 	strb.w	r6, [lr]
 8010a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a64:	8a82      	ldrh	r2, [r0, #20]
 8010a66:	2a01      	cmp	r2, #1
 8010a68:	d00b      	beq.n	8010a82 <GUI_DEVICE_LinkDevices+0x92>
 8010a6a:	685a      	ldr	r2, [r3, #4]
 8010a6c:	2a00      	cmp	r2, #0
 8010a6e:	d1ea      	bne.n	8010a46 <GUI_DEVICE_LinkDevices+0x56>
 8010a70:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8010a74:	e7e9      	b.n	8010a4a <GUI_DEVICE_LinkDevices+0x5a>
 8010a76:	68d3      	ldr	r3, [r2, #12]
 8010a78:	f8d3 8000 	ldr.w	r8, [r3]
 8010a7c:	4588      	cmp	r8, r1
 8010a7e:	4613      	mov	r3, r2
 8010a80:	dbdf      	blt.n	8010a42 <GUI_DEVICE_LinkDevices+0x52>
 8010a82:	681a      	ldr	r2, [r3, #0]
 8010a84:	2a00      	cmp	r2, #0
 8010a86:	d1f6      	bne.n	8010a76 <GUI_DEVICE_LinkDevices+0x86>
 8010a88:	e7db      	b.n	8010a42 <GUI_DEVICE_LinkDevices+0x52>
 8010a8a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8010a8e:	e7ba      	b.n	8010a06 <GUI_DEVICE_LinkDevices+0x16>
 8010a90:	4770      	bx	lr
 8010a92:	bf00      	nop
 8010a94:	20030870 	.word	0x20030870
 8010a98:	20030822 	.word	0x20030822

08010a9c <GUI_DispString.part.0>:
 8010a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010aa0:	4e47      	ldr	r6, [pc, #284]	; (8010bc0 <GUI_DispString.part.0+0x124>)
 8010aa2:	b083      	sub	sp, #12
 8010aa4:	4604      	mov	r4, r0
 8010aa6:	f000 fde9 	bl	801167c <GUI_Lock>
 8010aaa:	f00a fc91 	bl	801b3d0 <GUI_GetFontDistY>
 8010aae:	6833      	ldr	r3, [r6, #0]
 8010ab0:	4607      	mov	r7, r0
 8010ab2:	f9b3 9022 	ldrsh.w	r9, [r3, #34]	; 0x22
 8010ab6:	f00a fc67 	bl	801b388 <GUI_GetYAdjust>
 8010aba:	6832      	ldr	r2, [r6, #0]
 8010abc:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8010abe:	fa1f fa80 	uxth.w	sl, r0
 8010ac2:	ebca 0303 	rsb	r3, sl, r3
 8010ac6:	b21b      	sxth	r3, r3
 8010ac8:	8493      	strh	r3, [r2, #36]	; 0x24
 8010aca:	7821      	ldrb	r1, [r4, #0]
 8010acc:	2900      	cmp	r1, #0
 8010ace:	d04d      	beq.n	8010b6c <GUI_DispString.part.0+0xd0>
 8010ad0:	b2bf      	uxth	r7, r7
 8010ad2:	46b0      	mov	r8, r6
 8010ad4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8010ad8:	4620      	mov	r0, r4
 8010ada:	f00a fcfd 	bl	801b4d8 <GUI__GetLineNumChars>
 8010ade:	4601      	mov	r1, r0
 8010ae0:	4683      	mov	fp, r0
 8010ae2:	4620      	mov	r0, r4
 8010ae4:	f00a fd22 	bl	801b52c <GUI__GetLineDistX>
 8010ae8:	6831      	ldr	r1, [r6, #0]
 8010aea:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
 8010aec:	f003 0303 	and.w	r3, r3, #3
 8010af0:	2b01      	cmp	r3, #1
 8010af2:	d05a      	beq.n	8010baa <GUI_DispString.part.0+0x10e>
 8010af4:	2b02      	cmp	r3, #2
 8010af6:	d05c      	beq.n	8010bb2 <GUI_DispString.part.0+0x116>
 8010af8:	b285      	uxth	r5, r0
 8010afa:	f04f 0e00 	mov.w	lr, #0
 8010afe:	8c4a      	ldrh	r2, [r1, #34]	; 0x22
 8010b00:	f9b1 3024 	ldrsh.w	r3, [r1, #36]	; 0x24
 8010b04:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010b08:	ebce 0202 	rsb	r2, lr, r2
 8010b0c:	b292      	uxth	r2, r2
 8010b0e:	b210      	sxth	r0, r2
 8010b10:	3b01      	subs	r3, #1
 8010b12:	f105 3eff 	add.w	lr, r5, #4294967295	; 0xffffffff
 8010b16:	4496      	add	lr, r2
 8010b18:	8448      	strh	r0, [r1, #34]	; 0x22
 8010b1a:	443b      	add	r3, r7
 8010b1c:	466a      	mov	r2, sp
 8010b1e:	4659      	mov	r1, fp
 8010b20:	f8ad 0000 	strh.w	r0, [sp]
 8010b24:	4620      	mov	r0, r4
 8010b26:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010b2a:	f8ad e004 	strh.w	lr, [sp, #4]
 8010b2e:	f00a fd3f 	bl	801b5b0 <GUI__DispLine>
 8010b32:	6833      	ldr	r3, [r6, #0]
 8010b34:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8010b38:	849a      	strh	r2, [r3, #36]	; 0x24
 8010b3a:	4659      	mov	r1, fp
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	f000 fed3 	bl	80118e8 <GUI_UC__NumChars2NumBytes>
 8010b42:	5c22      	ldrb	r2, [r4, r0]
 8010b44:	2a0a      	cmp	r2, #10
 8010b46:	eb04 0300 	add.w	r3, r4, r0
 8010b4a:	d01b      	beq.n	8010b84 <GUI_DispString.part.0+0xe8>
 8010b4c:	2a0d      	cmp	r2, #13
 8010b4e:	d019      	beq.n	8010b84 <GUI_DispString.part.0+0xe8>
 8010b50:	f8bd 0000 	ldrh.w	r0, [sp]
 8010b54:	f8d8 2000 	ldr.w	r2, [r8]
 8010b58:	4405      	add	r5, r0
 8010b5a:	8455      	strh	r5, [r2, #34]	; 0x22
 8010b5c:	7819      	ldrb	r1, [r3, #0]
 8010b5e:	b119      	cbz	r1, 8010b68 <GUI_DispString.part.0+0xcc>
 8010b60:	7859      	ldrb	r1, [r3, #1]
 8010b62:	1c5c      	adds	r4, r3, #1
 8010b64:	2900      	cmp	r1, #0
 8010b66:	d1b5      	bne.n	8010ad4 <GUI_DispString.part.0+0x38>
 8010b68:	f9b2 3024 	ldrsh.w	r3, [r2, #36]	; 0x24
 8010b6c:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8010b6e:	449a      	add	sl, r3
 8010b70:	f021 0303 	bic.w	r3, r1, #3
 8010b74:	f8a2 a024 	strh.w	sl, [r2, #36]	; 0x24
 8010b78:	8593      	strh	r3, [r2, #44]	; 0x2c
 8010b7a:	f000 fd75 	bl	8011668 <GUI_Unlock>
 8010b7e:	b003      	add	sp, #12
 8010b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b84:	6832      	ldr	r2, [r6, #0]
 8010b86:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 8010b88:	f001 0103 	and.w	r1, r1, #3
 8010b8c:	3901      	subs	r1, #1
 8010b8e:	2901      	cmp	r1, #1
 8010b90:	bf8a      	itet	hi
 8010b92:	8c11      	ldrhhi	r1, [r2, #32]
 8010b94:	f8a2 9022 	strhls.w	r9, [r2, #34]	; 0x22
 8010b98:	8451      	strhhi	r1, [r2, #34]	; 0x22
 8010b9a:	7819      	ldrb	r1, [r3, #0]
 8010b9c:	290a      	cmp	r1, #10
 8010b9e:	d1de      	bne.n	8010b5e <GUI_DispString.part.0+0xc2>
 8010ba0:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8010ba2:	4439      	add	r1, r7
 8010ba4:	8491      	strh	r1, [r2, #36]	; 0x24
 8010ba6:	7819      	ldrb	r1, [r3, #0]
 8010ba8:	e7d9      	b.n	8010b5e <GUI_DispString.part.0+0xc2>
 8010baa:	fa1f fe80 	uxth.w	lr, r0
 8010bae:	4675      	mov	r5, lr
 8010bb0:	e7a5      	b.n	8010afe <GUI_DispString.part.0+0x62>
 8010bb2:	eb00 72d0 	add.w	r2, r0, r0, lsr #31
 8010bb6:	f3c2 0e4f 	ubfx	lr, r2, #1, #16
 8010bba:	b285      	uxth	r5, r0
 8010bbc:	e79f      	b.n	8010afe <GUI_DispString.part.0+0x62>
 8010bbe:	bf00      	nop
 8010bc0:	200000a8 	.word	0x200000a8

08010bc4 <GUI_DispStringInRectWrap.part.1>:
 8010bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bc8:	4689      	mov	r9, r1
 8010bca:	b08b      	sub	sp, #44	; 0x2c
 8010bcc:	4615      	mov	r5, r2
 8010bce:	4604      	mov	r4, r0
 8010bd0:	9203      	str	r2, [sp, #12]
 8010bd2:	461f      	mov	r7, r3
 8010bd4:	f000 fd52 	bl	801167c <GUI_Lock>
 8010bd8:	f9b9 3000 	ldrsh.w	r3, [r9]
 8010bdc:	f9b9 1004 	ldrsh.w	r1, [r9, #4]
 8010be0:	f9b9 0006 	ldrsh.w	r0, [r9, #6]
 8010be4:	9301      	str	r3, [sp, #4]
 8010be6:	1ace      	subs	r6, r1, r3
 8010be8:	9102      	str	r1, [sp, #8]
 8010bea:	f9b9 b002 	ldrsh.w	fp, [r9, #2]
 8010bee:	9005      	str	r0, [sp, #20]
 8010bf0:	f00a fbee 	bl	801b3d0 <GUI_GetFontDistY>
 8010bf4:	f015 080c 	ands.w	r8, r5, #12
 8010bf8:	f106 0601 	add.w	r6, r6, #1
 8010bfc:	9004      	str	r0, [sp, #16]
 8010bfe:	d176      	bne.n	8010cee <GUI_DispStringInRectWrap.part.1+0x12a>
 8010c00:	fa1f fa80 	uxth.w	sl, r0
 8010c04:	4648      	mov	r0, r9
 8010c06:	f008 fa9f 	bl	8019148 <WM_SetUserClipRect>
 8010c0a:	4602      	mov	r2, r0
 8010c0c:	9004      	str	r0, [sp, #16]
 8010c0e:	b1a8      	cbz	r0, 8010c3c <GUI_DispStringInRectWrap.part.1+0x78>
 8010c10:	9801      	ldr	r0, [sp, #4]
 8010c12:	2100      	movs	r1, #0
 8010c14:	460b      	mov	r3, r1
 8010c16:	f360 010f 	bfi	r1, r0, #0, #16
 8010c1a:	9802      	ldr	r0, [sp, #8]
 8010c1c:	f360 030f 	bfi	r3, r0, #0, #16
 8010c20:	9805      	ldr	r0, [sp, #20]
 8010c22:	f36b 411f 	bfi	r1, fp, #16, #16
 8010c26:	f360 431f 	bfi	r3, r0, #16, #16
 8010c2a:	9106      	str	r1, [sp, #24]
 8010c2c:	a806      	add	r0, sp, #24
 8010c2e:	4649      	mov	r1, r9
 8010c30:	9307      	str	r3, [sp, #28]
 8010c32:	f001 fb23 	bl	801227c <GUI__IntersectRects>
 8010c36:	a806      	add	r0, sp, #24
 8010c38:	f008 fa86 	bl	8019148 <WM_SetUserClipRect>
 8010c3c:	9b03      	ldr	r3, [sp, #12]
 8010c3e:	f003 0803 	and.w	r8, r3, #3
 8010c42:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8010c46:	9303      	str	r3, [sp, #12]
 8010c48:	4643      	mov	r3, r8
 8010c4a:	fa1f f58b 	uxth.w	r5, fp
 8010c4e:	46b0      	mov	r8, r6
 8010c50:	461e      	mov	r6, r3
 8010c52:	e015      	b.n	8010c80 <GUI_DispStringInRectWrap.part.1+0xbc>
 8010c54:	2e02      	cmp	r6, #2
 8010c56:	d034      	beq.n	8010cc2 <GUI_DispStringInRectWrap.part.1+0xfe>
 8010c58:	b91e      	cbnz	r6, 8010c62 <GUI_DispStringInRectWrap.part.1+0x9e>
 8010c5a:	f8b9 3000 	ldrh.w	r3, [r9]
 8010c5e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010c62:	4620      	mov	r0, r4
 8010c64:	4659      	mov	r1, fp
 8010c66:	aa08      	add	r2, sp, #32
 8010c68:	f00a fca2 	bl	801b5b0 <GUI__DispLine>
 8010c6c:	4620      	mov	r0, r4
 8010c6e:	463a      	mov	r2, r7
 8010c70:	4641      	mov	r1, r8
 8010c72:	f001 fd3d 	bl	80126f0 <GUI__WrapGetNumBytesToNextLine>
 8010c76:	4404      	add	r4, r0
 8010c78:	4455      	add	r5, sl
 8010c7a:	7823      	ldrb	r3, [r4, #0]
 8010c7c:	b2ad      	uxth	r5, r5
 8010c7e:	b373      	cbz	r3, 8010cde <GUI_DispStringInRectWrap.part.1+0x11a>
 8010c80:	463a      	mov	r2, r7
 8010c82:	4641      	mov	r1, r8
 8010c84:	4620      	mov	r0, r4
 8010c86:	f001 fd21 	bl	80126cc <GUI__WrapGetNumCharsDisp>
 8010c8a:	9b03      	ldr	r3, [sp, #12]
 8010c8c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8010c90:	f8ad 2020 	strh.w	r2, [sp, #32]
 8010c94:	4601      	mov	r1, r0
 8010c96:	18eb      	adds	r3, r5, r3
 8010c98:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8010c9c:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
 8010ca0:	4683      	mov	fp, r0
 8010ca2:	4620      	mov	r0, r4
 8010ca4:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
 8010ca8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8010cac:	f00a fc3e 	bl	801b52c <GUI__GetLineDistX>
 8010cb0:	2e01      	cmp	r6, #1
 8010cb2:	d1cf      	bne.n	8010c54 <GUI_DispStringInRectWrap.part.1+0x90>
 8010cb4:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8010cb8:	3301      	adds	r3, #1
 8010cba:	1a18      	subs	r0, r3, r0
 8010cbc:	f8ad 0020 	strh.w	r0, [sp, #32]
 8010cc0:	e7cf      	b.n	8010c62 <GUI_DispStringInRectWrap.part.1+0x9e>
 8010cc2:	f9b9 1000 	ldrsh.w	r1, [r9]
 8010cc6:	f9b9 3004 	ldrsh.w	r3, [r9, #4]
 8010cca:	1a5b      	subs	r3, r3, r1
 8010ccc:	1a18      	subs	r0, r3, r0
 8010cce:	3001      	adds	r0, #1
 8010cd0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8010cd4:	eb01 0060 	add.w	r0, r1, r0, asr #1
 8010cd8:	f8ad 0020 	strh.w	r0, [sp, #32]
 8010cdc:	e7c1      	b.n	8010c62 <GUI_DispStringInRectWrap.part.1+0x9e>
 8010cde:	9804      	ldr	r0, [sp, #16]
 8010ce0:	f008 fa32 	bl	8019148 <WM_SetUserClipRect>
 8010ce4:	f000 fcc0 	bl	8011668 <GUI_Unlock>
 8010ce8:	b00b      	add	sp, #44	; 0x2c
 8010cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cee:	46a2      	mov	sl, r4
 8010cf0:	f000 fcc4 	bl	801167c <GUI_Lock>
 8010cf4:	463a      	mov	r2, r7
 8010cf6:	4631      	mov	r1, r6
 8010cf8:	4650      	mov	r0, sl
 8010cfa:	2500      	movs	r5, #0
 8010cfc:	f001 fcf8 	bl	80126f0 <GUI__WrapGetNumBytesToNextLine>
 8010d00:	b140      	cbz	r0, 8010d14 <GUI_DispStringInRectWrap.part.1+0x150>
 8010d02:	4482      	add	sl, r0
 8010d04:	463a      	mov	r2, r7
 8010d06:	4631      	mov	r1, r6
 8010d08:	4650      	mov	r0, sl
 8010d0a:	3501      	adds	r5, #1
 8010d0c:	f001 fcf0 	bl	80126f0 <GUI__WrapGetNumBytesToNextLine>
 8010d10:	2800      	cmp	r0, #0
 8010d12:	d1f6      	bne.n	8010d02 <GUI_DispStringInRectWrap.part.1+0x13e>
 8010d14:	f000 fca8 	bl	8011668 <GUI_Unlock>
 8010d18:	f1b8 0f08 	cmp.w	r8, #8
 8010d1c:	d008      	beq.n	8010d30 <GUI_DispStringInRectWrap.part.1+0x16c>
 8010d1e:	f1b8 0f0c 	cmp.w	r8, #12
 8010d22:	d00f      	beq.n	8010d44 <GUI_DispStringInRectWrap.part.1+0x180>
 8010d24:	f1b8 0f04 	cmp.w	r8, #4
 8010d28:	d002      	beq.n	8010d30 <GUI_DispStringInRectWrap.part.1+0x16c>
 8010d2a:	f8bd a010 	ldrh.w	sl, [sp, #16]
 8010d2e:	e769      	b.n	8010c04 <GUI_DispStringInRectWrap.part.1+0x40>
 8010d30:	f8bd a010 	ldrh.w	sl, [sp, #16]
 8010d34:	9b05      	ldr	r3, [sp, #20]
 8010d36:	fb15 f50a 	smulbb	r5, r5, sl
 8010d3a:	3301      	adds	r3, #1
 8010d3c:	1b5d      	subs	r5, r3, r5
 8010d3e:	fa0f fb85 	sxth.w	fp, r5
 8010d42:	e75f      	b.n	8010c04 <GUI_DispStringInRectWrap.part.1+0x40>
 8010d44:	9b05      	ldr	r3, [sp, #20]
 8010d46:	9904      	ldr	r1, [sp, #16]
 8010d48:	ebcb 0303 	rsb	r3, fp, r3
 8010d4c:	3301      	adds	r3, #1
 8010d4e:	fb05 3511 	mls	r5, r5, r1, r3
 8010d52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d56:	eb0b 0565 	add.w	r5, fp, r5, asr #1
 8010d5a:	fa0f fb85 	sxth.w	fp, r5
 8010d5e:	fa1f fa81 	uxth.w	sl, r1
 8010d62:	e74f      	b.n	8010c04 <GUI_DispStringInRectWrap.part.1+0x40>

08010d64 <GUI_DispString>:
 8010d64:	b108      	cbz	r0, 8010d6a <GUI_DispString+0x6>
 8010d66:	f7ff be99 	b.w	8010a9c <GUI_DispString.part.0>
 8010d6a:	4770      	bx	lr

08010d6c <GUI_DispStringAt>:
 8010d6c:	b570      	push	{r4, r5, r6, lr}
 8010d6e:	460e      	mov	r6, r1
 8010d70:	4615      	mov	r5, r2
 8010d72:	4604      	mov	r4, r0
 8010d74:	f000 fc82 	bl	801167c <GUI_Lock>
 8010d78:	4b05      	ldr	r3, [pc, #20]	; (8010d90 <GUI_DispStringAt+0x24>)
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	845e      	strh	r6, [r3, #34]	; 0x22
 8010d7e:	849d      	strh	r5, [r3, #36]	; 0x24
 8010d80:	b114      	cbz	r4, 8010d88 <GUI_DispStringAt+0x1c>
 8010d82:	4620      	mov	r0, r4
 8010d84:	f7ff fe8a 	bl	8010a9c <GUI_DispString.part.0>
 8010d88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d8c:	f000 bc6c 	b.w	8011668 <GUI_Unlock>
 8010d90:	200000a8 	.word	0x200000a8

08010d94 <GUI__DispStringInRect>:
 8010d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d98:	b087      	sub	sp, #28
 8010d9a:	460c      	mov	r4, r1
 8010d9c:	9001      	str	r0, [sp, #4]
 8010d9e:	4617      	mov	r7, r2
 8010da0:	461d      	mov	r5, r3
 8010da2:	f00a fb15 	bl	801b3d0 <GUI_GetFontDistY>
 8010da6:	f8dd b004 	ldr.w	fp, [sp, #4]
 8010daa:	4681      	mov	r9, r0
 8010dac:	2c00      	cmp	r4, #0
 8010dae:	f000 80a5 	beq.w	8010efc <GUI__DispStringInRect+0x168>
 8010db2:	6820      	ldr	r0, [r4, #0]
 8010db4:	6861      	ldr	r1, [r4, #4]
 8010db6:	ab04      	add	r3, sp, #16
 8010db8:	c303      	stmia	r3!, {r0, r1}
 8010dba:	f017 0a0c 	ands.w	sl, r7, #12
 8010dbe:	d160      	bne.n	8010e82 <GUI__DispStringInRect+0xee>
 8010dc0:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8010dc4:	f8cd b004 	str.w	fp, [sp, #4]
 8010dc8:	2d00      	cmp	r5, #0
 8010dca:	d057      	beq.n	8010e7c <GUI__DispStringInRect+0xe8>
 8010dcc:	f10d 0804 	add.w	r8, sp, #4
 8010dd0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8010dd4:	f8df a148 	ldr.w	sl, [pc, #328]	; 8010f20 <GUI__DispStringInRect+0x18c>
 8010dd8:	fa1f f989 	uxth.w	r9, r9
 8010ddc:	f007 0703 	and.w	r7, r7, #3
 8010de0:	4658      	mov	r0, fp
 8010de2:	2400      	movs	r4, #0
 8010de4:	e02d      	b.n	8010e42 <GUI__DispStringInRect+0xae>
 8010de6:	2f02      	cmp	r7, #2
 8010de8:	d03d      	beq.n	8010e66 <GUI__DispStringInRect+0xd2>
 8010dea:	b90f      	cbnz	r7, 8010df0 <GUI__DispStringInRect+0x5c>
 8010dec:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 8010df0:	f8da 2000 	ldr.w	r2, [sl]
 8010df4:	9801      	ldr	r0, [sp, #4]
 8010df6:	fa0f fe86 	sxth.w	lr, r6
 8010dfa:	b221      	sxth	r1, r4
 8010dfc:	3b01      	subs	r3, #1
 8010dfe:	eb09 0c06 	add.w	ip, r9, r6
 8010e02:	4423      	add	r3, r4
 8010e04:	f8a2 e024 	strh.w	lr, [r2, #36]	; 0x24
 8010e08:	8451      	strh	r1, [r2, #34]	; 0x22
 8010e0a:	f8ad 1008 	strh.w	r1, [sp, #8]
 8010e0e:	aa02      	add	r2, sp, #8
 8010e10:	4659      	mov	r1, fp
 8010e12:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010e16:	f8ad e00a 	strh.w	lr, [sp, #10]
 8010e1a:	f8ad c00e 	strh.w	ip, [sp, #14]
 8010e1e:	f00a fbc7 	bl	801b5b0 <GUI__DispLine>
 8010e22:	4659      	mov	r1, fp
 8010e24:	9801      	ldr	r0, [sp, #4]
 8010e26:	f000 fd5f 	bl	80118e8 <GUI_UC__NumChars2NumBytes>
 8010e2a:	9b01      	ldr	r3, [sp, #4]
 8010e2c:	4418      	add	r0, r3
 8010e2e:	9001      	str	r0, [sp, #4]
 8010e30:	f00a face 	bl	801b3d0 <GUI_GetFontDistY>
 8010e34:	4406      	add	r6, r0
 8010e36:	4640      	mov	r0, r8
 8010e38:	f001 f9ea 	bl	8012210 <GUI__HandleEOLine>
 8010e3c:	b9f0      	cbnz	r0, 8010e7c <GUI__DispStringInRect+0xe8>
 8010e3e:	b1ed      	cbz	r5, 8010e7c <GUI__DispStringInRect+0xe8>
 8010e40:	9801      	ldr	r0, [sp, #4]
 8010e42:	4629      	mov	r1, r5
 8010e44:	f00a fb48 	bl	801b4d8 <GUI__GetLineNumChars>
 8010e48:	4683      	mov	fp, r0
 8010e4a:	4601      	mov	r1, r0
 8010e4c:	9801      	ldr	r0, [sp, #4]
 8010e4e:	f00a fb6d 	bl	801b52c <GUI__GetLineDistX>
 8010e52:	2f01      	cmp	r7, #1
 8010e54:	ebcb 0505 	rsb	r5, fp, r5
 8010e58:	4603      	mov	r3, r0
 8010e5a:	d1c4      	bne.n	8010de6 <GUI__DispStringInRect+0x52>
 8010e5c:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8010e60:	1a24      	subs	r4, r4, r0
 8010e62:	3401      	adds	r4, #1
 8010e64:	e7c4      	b.n	8010df0 <GUI__DispStringInRect+0x5c>
 8010e66:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 8010e6a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8010e6e:	1b12      	subs	r2, r2, r4
 8010e70:	1a12      	subs	r2, r2, r0
 8010e72:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8010e76:	eb04 0462 	add.w	r4, r4, r2, asr #1
 8010e7a:	e7b9      	b.n	8010df0 <GUI__DispStringInRect+0x5c>
 8010e7c:	b007      	add	sp, #28
 8010e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e82:	2d00      	cmp	r5, #0
 8010e84:	d03e      	beq.n	8010f04 <GUI__DispStringInRect+0x170>
 8010e86:	462c      	mov	r4, r5
 8010e88:	2600      	movs	r6, #0
 8010e8a:	f10d 0804 	add.w	r8, sp, #4
 8010e8e:	e000      	b.n	8010e92 <GUI__DispStringInRect+0xfe>
 8010e90:	b194      	cbz	r4, 8010eb8 <GUI__DispStringInRect+0x124>
 8010e92:	4621      	mov	r1, r4
 8010e94:	9801      	ldr	r0, [sp, #4]
 8010e96:	f00a fb1f 	bl	801b4d8 <GUI__GetLineNumChars>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	4601      	mov	r1, r0
 8010e9e:	9801      	ldr	r0, [sp, #4]
 8010ea0:	1ae4      	subs	r4, r4, r3
 8010ea2:	f000 fd21 	bl	80118e8 <GUI_UC__NumChars2NumBytes>
 8010ea6:	9b01      	ldr	r3, [sp, #4]
 8010ea8:	4403      	add	r3, r0
 8010eaa:	4640      	mov	r0, r8
 8010eac:	3601      	adds	r6, #1
 8010eae:	9301      	str	r3, [sp, #4]
 8010eb0:	f001 f9ae 	bl	8012210 <GUI__HandleEOLine>
 8010eb4:	2800      	cmp	r0, #0
 8010eb6:	d0eb      	beq.n	8010e90 <GUI__DispStringInRect+0xfc>
 8010eb8:	f1ba 0f08 	cmp.w	sl, #8
 8010ebc:	d009      	beq.n	8010ed2 <GUI__DispStringInRect+0x13e>
 8010ebe:	f1ba 0f0c 	cmp.w	sl, #12
 8010ec2:	d00d      	beq.n	8010ee0 <GUI__DispStringInRect+0x14c>
 8010ec4:	f1ba 0f04 	cmp.w	sl, #4
 8010ec8:	d003      	beq.n	8010ed2 <GUI__DispStringInRect+0x13e>
 8010eca:	f8cd b004 	str.w	fp, [sp, #4]
 8010ece:	2600      	movs	r6, #0
 8010ed0:	e77e      	b.n	8010dd0 <GUI__DispStringInRect+0x3c>
 8010ed2:	fb06 f609 	mul.w	r6, r6, r9
 8010ed6:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8010eda:	1b9e      	subs	r6, r3, r6
 8010edc:	3601      	adds	r6, #1
 8010ede:	e771      	b.n	8010dc4 <GUI__DispStringInRect+0x30>
 8010ee0:	fb06 f609 	mul.w	r6, r6, r9
 8010ee4:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 8010ee8:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8010eec:	1a9b      	subs	r3, r3, r2
 8010eee:	3301      	adds	r3, #1
 8010ef0:	1b9b      	subs	r3, r3, r6
 8010ef2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8010ef6:	eb02 0663 	add.w	r6, r2, r3, asr #1
 8010efa:	e763      	b.n	8010dc4 <GUI__DispStringInRect+0x30>
 8010efc:	a804      	add	r0, sp, #16
 8010efe:	f7ff f893 	bl	8010028 <GUI_GetClientRect>
 8010f02:	e75a      	b.n	8010dba <GUI__DispStringInRect+0x26>
 8010f04:	f1ba 0f08 	cmp.w	sl, #8
 8010f08:	d005      	beq.n	8010f16 <GUI__DispStringInRect+0x182>
 8010f0a:	f1ba 0f0c 	cmp.w	sl, #12
 8010f0e:	d004      	beq.n	8010f1a <GUI__DispStringInRect+0x186>
 8010f10:	f1ba 0f04 	cmp.w	sl, #4
 8010f14:	d1b2      	bne.n	8010e7c <GUI__DispStringInRect+0xe8>
 8010f16:	2600      	movs	r6, #0
 8010f18:	e7dd      	b.n	8010ed6 <GUI__DispStringInRect+0x142>
 8010f1a:	462e      	mov	r6, r5
 8010f1c:	e7e2      	b.n	8010ee4 <GUI__DispStringInRect+0x150>
 8010f1e:	bf00      	nop
 8010f20:	200000a8 	.word	0x200000a8

08010f24 <GUI_DispStringInRect>:
 8010f24:	b320      	cbz	r0, 8010f70 <GUI_DispStringInRect+0x4c>
 8010f26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f28:	460c      	mov	r4, r1
 8010f2a:	b083      	sub	sp, #12
 8010f2c:	4605      	mov	r5, r0
 8010f2e:	4616      	mov	r6, r2
 8010f30:	f000 fba4 	bl	801167c <GUI_Lock>
 8010f34:	b1d4      	cbz	r4, 8010f6c <GUI_DispStringInRect+0x48>
 8010f36:	4620      	mov	r0, r4
 8010f38:	f008 f906 	bl	8019148 <WM_SetUserClipRect>
 8010f3c:	4607      	mov	r7, r0
 8010f3e:	b138      	cbz	r0, 8010f50 <GUI_DispStringInRect+0x2c>
 8010f40:	4668      	mov	r0, sp
 8010f42:	463a      	mov	r2, r7
 8010f44:	4621      	mov	r1, r4
 8010f46:	f001 f999 	bl	801227c <GUI__IntersectRects>
 8010f4a:	4668      	mov	r0, sp
 8010f4c:	f008 f8fc 	bl	8019148 <WM_SetUserClipRect>
 8010f50:	4632      	mov	r2, r6
 8010f52:	4621      	mov	r1, r4
 8010f54:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8010f58:	4628      	mov	r0, r5
 8010f5a:	f7ff ff1b 	bl	8010d94 <GUI__DispStringInRect>
 8010f5e:	4638      	mov	r0, r7
 8010f60:	f008 f8f2 	bl	8019148 <WM_SetUserClipRect>
 8010f64:	f000 fb80 	bl	8011668 <GUI_Unlock>
 8010f68:	b003      	add	sp, #12
 8010f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f6c:	4627      	mov	r7, r4
 8010f6e:	e7ef      	b.n	8010f50 <GUI_DispStringInRect+0x2c>
 8010f70:	4770      	bx	lr
 8010f72:	bf00      	nop

08010f74 <GUI_DispStringInRectWrap>:
 8010f74:	b108      	cbz	r0, 8010f7a <GUI_DispStringInRectWrap+0x6>
 8010f76:	f7ff be25 	b.w	8010bc4 <GUI_DispStringInRectWrap.part.1>
 8010f7a:	4770      	bx	lr

08010f7c <GUI_DrawBitmap>:
 8010f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f80:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8011078 <GUI_DrawBitmap+0xfc>
 8010f84:	b089      	sub	sp, #36	; 0x24
 8010f86:	4604      	mov	r4, r0
 8010f88:	4690      	mov	r8, r2
 8010f8a:	460f      	mov	r7, r1
 8010f8c:	f000 fb76 	bl	801167c <GUI_Lock>
 8010f90:	f8d9 3000 	ldr.w	r3, [r9]
 8010f94:	8820      	ldrh	r0, [r4, #0]
 8010f96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f98:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8010f9a:	8863      	ldrh	r3, [r4, #2]
 8010f9c:	4417      	add	r7, r2
 8010f9e:	44a8      	add	r8, r5
 8010fa0:	1e42      	subs	r2, r0, #1
 8010fa2:	3b01      	subs	r3, #1
 8010fa4:	443a      	add	r2, r7
 8010fa6:	4443      	add	r3, r8
 8010fa8:	a806      	add	r0, sp, #24
 8010faa:	f8ad 7018 	strh.w	r7, [sp, #24]
 8010fae:	f8ad 801a 	strh.w	r8, [sp, #26]
 8010fb2:	f8ad 201c 	strh.w	r2, [sp, #28]
 8010fb6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010fba:	f006 fffb 	bl	8017fb4 <WM__InitIVRSearch>
 8010fbe:	2800      	cmp	r0, #0
 8010fc0:	d04e      	beq.n	8011060 <GUI_DrawBitmap+0xe4>
 8010fc2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 801107c <GUI_DrawBitmap+0x100>
 8010fc6:	46cb      	mov	fp, r9
 8010fc8:	e01a      	b.n	8011000 <GUI_DrawBitmap+0x84>
 8010fca:	f040 0002 	orr.w	r0, r0, #2
 8010fce:	f7ff f9f7 	bl	80103c0 <GUI_SetDrawMode>
 8010fd2:	6921      	ldr	r1, [r4, #16]
 8010fd4:	b321      	cbz	r1, 8011020 <GUI_DrawBitmap+0xa4>
 8010fd6:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8010fda:	68a6      	ldr	r6, [r4, #8]
 8010fdc:	8863      	ldrh	r3, [r4, #2]
 8010fde:	8822      	ldrh	r2, [r4, #0]
 8010fe0:	e88d 4040 	stmia.w	sp, {r6, lr}
 8010fe4:	2001      	movs	r0, #1
 8010fe6:	9003      	str	r0, [sp, #12]
 8010fe8:	9002      	str	r0, [sp, #8]
 8010fea:	680e      	ldr	r6, [r1, #0]
 8010fec:	4638      	mov	r0, r7
 8010fee:	4641      	mov	r1, r8
 8010ff0:	47b0      	blx	r6
 8010ff2:	4628      	mov	r0, r5
 8010ff4:	f7ff f9e4 	bl	80103c0 <GUI_SetDrawMode>
 8010ff8:	f006 feb6 	bl	8017d68 <WM__GetNextIVR>
 8010ffc:	2800      	cmp	r0, #0
 8010ffe:	d02f      	beq.n	8011060 <GUI_DrawBitmap+0xe4>
 8011000:	2000      	movs	r0, #0
 8011002:	68e6      	ldr	r6, [r4, #12]
 8011004:	f7ff f9dc 	bl	80103c0 <GUI_SetDrawMode>
 8011008:	4605      	mov	r5, r0
 801100a:	b116      	cbz	r6, 8011012 <GUI_DrawBitmap+0x96>
 801100c:	7933      	ldrb	r3, [r6, #4]
 801100e:	2b00      	cmp	r3, #0
 8011010:	d1db      	bne.n	8010fca <GUI_DrawBitmap+0x4e>
 8011012:	f025 0002 	bic.w	r0, r5, #2
 8011016:	f7ff f9d3 	bl	80103c0 <GUI_SetDrawMode>
 801101a:	6921      	ldr	r1, [r4, #16]
 801101c:	2900      	cmp	r1, #0
 801101e:	d1da      	bne.n	8010fd6 <GUI_DrawBitmap+0x5a>
 8011020:	f8d9 2000 	ldr.w	r2, [r9]
 8011024:	f8da 3000 	ldr.w	r3, [sl]
 8011028:	7c52      	ldrb	r2, [r2, #17]
 801102a:	68e0      	ldr	r0, [r4, #12]
 801102c:	4621      	mov	r1, r4
 801102e:	4798      	blx	r3
 8011030:	88e1      	ldrh	r1, [r4, #6]
 8011032:	b1d0      	cbz	r0, 801106a <GUI_DrawBitmap+0xee>
 8011034:	8863      	ldrh	r3, [r4, #2]
 8011036:	8822      	ldrh	r2, [r4, #0]
 8011038:	68a6      	ldr	r6, [r4, #8]
 801103a:	9005      	str	r0, [sp, #20]
 801103c:	88a0      	ldrh	r0, [r4, #4]
 801103e:	9102      	str	r1, [sp, #8]
 8011040:	2101      	movs	r1, #1
 8011042:	9003      	str	r0, [sp, #12]
 8011044:	9101      	str	r1, [sp, #4]
 8011046:	9100      	str	r1, [sp, #0]
 8011048:	4638      	mov	r0, r7
 801104a:	4641      	mov	r1, r8
 801104c:	9604      	str	r6, [sp, #16]
 801104e:	f001 fdd7 	bl	8012c00 <LCD_DrawBitmap>
 8011052:	4628      	mov	r0, r5
 8011054:	f7ff f9b4 	bl	80103c0 <GUI_SetDrawMode>
 8011058:	f006 fe86 	bl	8017d68 <WM__GetNextIVR>
 801105c:	2800      	cmp	r0, #0
 801105e:	d1cf      	bne.n	8011000 <GUI_DrawBitmap+0x84>
 8011060:	f000 fb02 	bl	8011668 <GUI_Unlock>
 8011064:	b009      	add	sp, #36	; 0x24
 8011066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801106a:	2901      	cmp	r1, #1
 801106c:	bf04      	itt	eq
 801106e:	f8db 3000 	ldreq.w	r3, [fp]
 8011072:	6b98      	ldreq	r0, [r3, #56]	; 0x38
 8011074:	e7de      	b.n	8011034 <GUI_DrawBitmap+0xb8>
 8011076:	bf00      	nop
 8011078:	200000a8 	.word	0x200000a8
 801107c:	20000098 	.word	0x20000098

08011080 <GUI_DrawGradientV>:
 8011080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011084:	b091      	sub	sp, #68	; 0x44
 8011086:	4681      	mov	r9, r0
 8011088:	461e      	mov	r6, r3
 801108a:	460f      	mov	r7, r1
 801108c:	4690      	mov	r8, r2
 801108e:	f000 faf5 	bl	801167c <GUI_Lock>
 8011092:	4b64      	ldr	r3, [pc, #400]	; (8011224 <GUI_DrawGradientV+0x1a4>)
 8011094:	681c      	ldr	r4, [r3, #0]
 8011096:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8011098:	6d24      	ldr	r4, [r4, #80]	; 0x50
 801109a:	19a0      	adds	r0, r4, r6
 801109c:	19e1      	adds	r1, r4, r7
 801109e:	eb05 0309 	add.w	r3, r5, r9
 80110a2:	eb05 0208 	add.w	r2, r5, r8
 80110a6:	4604      	mov	r4, r0
 80110a8:	9001      	str	r0, [sp, #4]
 80110aa:	a80e      	add	r0, sp, #56	; 0x38
 80110ac:	9307      	str	r3, [sp, #28]
 80110ae:	9208      	str	r2, [sp, #32]
 80110b0:	9102      	str	r1, [sp, #8]
 80110b2:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80110b6:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
 80110ba:	f8ad 103a 	strh.w	r1, [sp, #58]	; 0x3a
 80110be:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
 80110c2:	f006 ff77 	bl	8017fb4 <WM__InitIVRSearch>
 80110c6:	2800      	cmp	r0, #0
 80110c8:	f000 8091 	beq.w	80111ee <GUI_DrawGradientV+0x16e>
 80110cc:	9b01      	ldr	r3, [sp, #4]
 80110ce:	9a02      	ldr	r2, [sp, #8]
 80110d0:	f89d 4068 	ldrb.w	r4, [sp, #104]	; 0x68
 80110d4:	f89d 706c 	ldrb.w	r7, [sp, #108]	; 0x6c
 80110d8:	ebc2 0b03 	rsb	fp, r2, r3
 80110dc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80110de:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80110e2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80110e4:	f3c2 2607 	ubfx	r6, r2, #8, #8
 80110e8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80110ea:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80110ee:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80110f0:	eb0b 73db 	add.w	r3, fp, fp, lsr #31
 80110f4:	105b      	asrs	r3, r3, #1
 80110f6:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 80110fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80110fc:	fb0b 3504 	mla	r5, fp, r4, r3
 8011100:	1b3c      	subs	r4, r7, r4
 8011102:	0e12      	lsrs	r2, r2, #24
 8011104:	9406      	str	r4, [sp, #24]
 8011106:	fb0b 3400 	mla	r4, fp, r0, r3
 801110a:	1a30      	subs	r0, r6, r0
 801110c:	9003      	str	r0, [sp, #12]
 801110e:	fb0b 3001 	mla	r0, fp, r1, r3
 8011112:	fb0b 3302 	mla	r3, fp, r2, r3
 8011116:	930d      	str	r3, [sp, #52]	; 0x34
 8011118:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801111a:	950a      	str	r5, [sp, #40]	; 0x28
 801111c:	ebc1 010e 	rsb	r1, r1, lr
 8011120:	ebc2 6313 	rsb	r3, r2, r3, lsr #24
 8011124:	940b      	str	r4, [sp, #44]	; 0x2c
 8011126:	900c      	str	r0, [sp, #48]	; 0x30
 8011128:	9104      	str	r1, [sp, #16]
 801112a:	9305      	str	r3, [sp, #20]
 801112c:	465e      	mov	r6, fp
 801112e:	f7fe ff8b 	bl	8010048 <GUI_GetColor>
 8011132:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011134:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011136:	9009      	str	r0, [sp, #36]	; 0x24
 8011138:	4293      	cmp	r3, r2
 801113a:	d069      	beq.n	8011210 <GUI_DrawGradientV+0x190>
 801113c:	2e00      	cmp	r6, #0
 801113e:	d052      	beq.n	80111e6 <GUI_DrawGradientV+0x166>
 8011140:	9d02      	ldr	r5, [sp, #8]
 8011142:	9a01      	ldr	r2, [sp, #4]
 8011144:	4295      	cmp	r5, r2
 8011146:	dc5b      	bgt.n	8011200 <GUI_DrawGradientV+0x180>
 8011148:	af0a      	add	r7, sp, #40	; 0x28
 801114a:	4602      	mov	r2, r0
 801114c:	e897 0780 	ldmia.w	r7, {r7, r8, r9, sl}
 8011150:	f04f 0b01 	mov.w	fp, #1
 8011154:	e006      	b.n	8011164 <GUI_DrawGradientV+0xe4>
 8011156:	f10b 0b01 	add.w	fp, fp, #1
 801115a:	9b01      	ldr	r3, [sp, #4]
 801115c:	3501      	adds	r5, #1
 801115e:	42ab      	cmp	r3, r5
 8011160:	4622      	mov	r2, r4
 8011162:	db2f      	blt.n	80111c4 <GUI_DrawGradientV+0x144>
 8011164:	fb9a f3f6 	sdiv	r3, sl, r6
 8011168:	fb99 f4f6 	sdiv	r4, r9, r6
 801116c:	061b      	lsls	r3, r3, #24
 801116e:	fb97 f1f6 	sdiv	r1, r7, r6
 8011172:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011176:	fb98 f4f6 	sdiv	r4, r8, r6
 801117a:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
 801117e:	9905      	ldr	r1, [sp, #20]
 8011180:	431c      	orrs	r4, r3
 8011182:	9b03      	ldr	r3, [sp, #12]
 8011184:	448a      	add	sl, r1
 8011186:	9904      	ldr	r1, [sp, #16]
 8011188:	4498      	add	r8, r3
 801118a:	9b02      	ldr	r3, [sp, #8]
 801118c:	4489      	add	r9, r1
 801118e:	9906      	ldr	r1, [sp, #24]
 8011190:	42ab      	cmp	r3, r5
 8011192:	4610      	mov	r0, r2
 8011194:	440f      	add	r7, r1
 8011196:	dae0      	bge.n	801115a <GUI_DrawGradientV+0xda>
 8011198:	4294      	cmp	r4, r2
 801119a:	d0dc      	beq.n	8011156 <GUI_DrawGradientV+0xd6>
 801119c:	f001 ff86 	bl	80130ac <LCD_SetColor>
 80111a0:	f1bb 0f01 	cmp.w	fp, #1
 80111a4:	ebcb 0105 	rsb	r1, fp, r5
 80111a8:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80111ac:	9a08      	ldr	r2, [sp, #32]
 80111ae:	9807      	ldr	r0, [sp, #28]
 80111b0:	d022      	beq.n	80111f8 <GUI_DrawGradientV+0x178>
 80111b2:	f001 fbe7 	bl	8012984 <LCD_FillRect>
 80111b6:	9b01      	ldr	r3, [sp, #4]
 80111b8:	3501      	adds	r5, #1
 80111ba:	42ab      	cmp	r3, r5
 80111bc:	f04f 0b01 	mov.w	fp, #1
 80111c0:	4622      	mov	r2, r4
 80111c2:	dacf      	bge.n	8011164 <GUI_DrawGradientV+0xe4>
 80111c4:	4620      	mov	r0, r4
 80111c6:	f001 ff71 	bl	80130ac <LCD_SetColor>
 80111ca:	f1bb 0f01 	cmp.w	fp, #1
 80111ce:	d019      	beq.n	8011204 <GUI_DrawGradientV+0x184>
 80111d0:	9b01      	ldr	r3, [sp, #4]
 80111d2:	9a08      	ldr	r2, [sp, #32]
 80111d4:	9807      	ldr	r0, [sp, #28]
 80111d6:	ebcb 0103 	rsb	r1, fp, r3
 80111da:	3101      	adds	r1, #1
 80111dc:	f001 fbd2 	bl	8012984 <LCD_FillRect>
 80111e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111e2:	f001 ff63 	bl	80130ac <LCD_SetColor>
 80111e6:	f006 fdbf 	bl	8017d68 <WM__GetNextIVR>
 80111ea:	2800      	cmp	r0, #0
 80111ec:	d19f      	bne.n	801112e <GUI_DrawGradientV+0xae>
 80111ee:	f000 fa3b 	bl	8011668 <GUI_Unlock>
 80111f2:	b011      	add	sp, #68	; 0x44
 80111f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111f8:	1e69      	subs	r1, r5, #1
 80111fa:	f001 fb6f 	bl	80128dc <LCD_DrawHLine>
 80111fe:	e7ac      	b.n	801115a <GUI_DrawGradientV+0xda>
 8011200:	f001 ff54 	bl	80130ac <LCD_SetColor>
 8011204:	9a08      	ldr	r2, [sp, #32]
 8011206:	9901      	ldr	r1, [sp, #4]
 8011208:	9807      	ldr	r0, [sp, #28]
 801120a:	f001 fb67 	bl	80128dc <LCD_DrawHLine>
 801120e:	e7e7      	b.n	80111e0 <GUI_DrawGradientV+0x160>
 8011210:	4618      	mov	r0, r3
 8011212:	f001 ff4b 	bl	80130ac <LCD_SetColor>
 8011216:	9b01      	ldr	r3, [sp, #4]
 8011218:	9a08      	ldr	r2, [sp, #32]
 801121a:	9902      	ldr	r1, [sp, #8]
 801121c:	9807      	ldr	r0, [sp, #28]
 801121e:	f001 fbb1 	bl	8012984 <LCD_FillRect>
 8011222:	e7dd      	b.n	80111e0 <GUI_DrawGradientV+0x160>
 8011224:	200000a8 	.word	0x200000a8

08011228 <GUI_DrawHLine>:
 8011228:	b5f0      	push	{r4, r5, r6, r7, lr}
 801122a:	4f14      	ldr	r7, [pc, #80]	; (801127c <GUI_DrawHLine+0x54>)
 801122c:	b083      	sub	sp, #12
 801122e:	4606      	mov	r6, r0
 8011230:	460d      	mov	r5, r1
 8011232:	4614      	mov	r4, r2
 8011234:	f000 fa22 	bl	801167c <GUI_Lock>
 8011238:	683b      	ldr	r3, [r7, #0]
 801123a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801123c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801123e:	440e      	add	r6, r1
 8011240:	b233      	sxth	r3, r6
 8011242:	4415      	add	r5, r2
 8011244:	4414      	add	r4, r2
 8011246:	4668      	mov	r0, sp
 8011248:	f8ad 5000 	strh.w	r5, [sp]
 801124c:	f8ad 4004 	strh.w	r4, [sp, #4]
 8011250:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011254:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011258:	f006 feac 	bl	8017fb4 <WM__InitIVRSearch>
 801125c:	b150      	cbz	r0, 8011274 <GUI_DrawHLine+0x4c>
 801125e:	683b      	ldr	r3, [r7, #0]
 8011260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011262:	4622      	mov	r2, r4
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	4631      	mov	r1, r6
 8011268:	4628      	mov	r0, r5
 801126a:	4798      	blx	r3
 801126c:	f006 fd7c 	bl	8017d68 <WM__GetNextIVR>
 8011270:	2800      	cmp	r0, #0
 8011272:	d1f4      	bne.n	801125e <GUI_DrawHLine+0x36>
 8011274:	f000 f9f8 	bl	8011668 <GUI_Unlock>
 8011278:	b003      	add	sp, #12
 801127a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801127c:	200000a8 	.word	0x200000a8

08011280 <GUI_DrawPoint>:
 8011280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011284:	4f15      	ldr	r7, [pc, #84]	; (80112dc <GUI_DrawPoint+0x5c>)
 8011286:	4606      	mov	r6, r0
 8011288:	460c      	mov	r4, r1
 801128a:	f000 f9f7 	bl	801167c <GUI_Lock>
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	2000      	movs	r0, #0
 8011292:	f8d3 804c 	ldr.w	r8, [r3, #76]	; 0x4c
 8011296:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 8011298:	f006 fe8c 	bl	8017fb4 <WM__InitIVRSearch>
 801129c:	b1c8      	cbz	r0, 80112d2 <GUI_DrawPoint+0x52>
 801129e:	4446      	add	r6, r8
 80112a0:	4425      	add	r5, r4
 80112a2:	e004      	b.n	80112ae <GUI_DrawPoint+0x2e>
 80112a4:	f00a fb68 	bl	801b978 <GL_FillCircle>
 80112a8:	f006 fd5e 	bl	8017d68 <WM__GetNextIVR>
 80112ac:	b188      	cbz	r0, 80112d2 <GUI_DrawPoint+0x52>
 80112ae:	683c      	ldr	r4, [r7, #0]
 80112b0:	7e23      	ldrb	r3, [r4, #24]
 80112b2:	1e5a      	subs	r2, r3, #1
 80112b4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80112b8:	2b01      	cmp	r3, #1
 80112ba:	ea4f 0262 	mov.w	r2, r2, asr #1
 80112be:	4629      	mov	r1, r5
 80112c0:	4630      	mov	r0, r6
 80112c2:	d1ef      	bne.n	80112a4 <GUI_DrawPoint+0x24>
 80112c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80112c6:	685b      	ldr	r3, [r3, #4]
 80112c8:	4798      	blx	r3
 80112ca:	f006 fd4d 	bl	8017d68 <WM__GetNextIVR>
 80112ce:	2800      	cmp	r0, #0
 80112d0:	d1ed      	bne.n	80112ae <GUI_DrawPoint+0x2e>
 80112d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80112d6:	f000 b9c7 	b.w	8011668 <GUI_Unlock>
 80112da:	bf00      	nop
 80112dc:	200000a8 	.word	0x200000a8

080112e0 <GUI_DrawVLine>:
 80112e0:	b570      	push	{r4, r5, r6, lr}
 80112e2:	b082      	sub	sp, #8
 80112e4:	4606      	mov	r6, r0
 80112e6:	4614      	mov	r4, r2
 80112e8:	460d      	mov	r5, r1
 80112ea:	f000 f9c7 	bl	801167c <GUI_Lock>
 80112ee:	4b10      	ldr	r3, [pc, #64]	; (8011330 <GUI_DrawVLine+0x50>)
 80112f0:	681a      	ldr	r2, [r3, #0]
 80112f2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80112f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80112f6:	441e      	add	r6, r3
 80112f8:	b233      	sxth	r3, r6
 80112fa:	4415      	add	r5, r2
 80112fc:	4414      	add	r4, r2
 80112fe:	4668      	mov	r0, sp
 8011300:	f8ad 5002 	strh.w	r5, [sp, #2]
 8011304:	f8ad 4006 	strh.w	r4, [sp, #6]
 8011308:	f8ad 3000 	strh.w	r3, [sp]
 801130c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011310:	f006 fe50 	bl	8017fb4 <WM__InitIVRSearch>
 8011314:	b140      	cbz	r0, 8011328 <GUI_DrawVLine+0x48>
 8011316:	4622      	mov	r2, r4
 8011318:	4629      	mov	r1, r5
 801131a:	4630      	mov	r0, r6
 801131c:	f001 fb08 	bl	8012930 <LCD_DrawVLine>
 8011320:	f006 fd22 	bl	8017d68 <WM__GetNextIVR>
 8011324:	2800      	cmp	r0, #0
 8011326:	d1f6      	bne.n	8011316 <GUI_DrawVLine+0x36>
 8011328:	f000 f99e 	bl	8011668 <GUI_Unlock>
 801132c:	b002      	add	sp, #8
 801132e:	bd70      	pop	{r4, r5, r6, pc}
 8011330:	200000a8 	.word	0x200000a8

08011334 <GUI_FillRect>:
 8011334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011336:	b083      	sub	sp, #12
 8011338:	4607      	mov	r7, r0
 801133a:	4616      	mov	r6, r2
 801133c:	461c      	mov	r4, r3
 801133e:	460d      	mov	r5, r1
 8011340:	f000 f99c 	bl	801167c <GUI_Lock>
 8011344:	4b10      	ldr	r3, [pc, #64]	; (8011388 <GUI_FillRect+0x54>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801134a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801134c:	4417      	add	r7, r2
 801134e:	4416      	add	r6, r2
 8011350:	441d      	add	r5, r3
 8011352:	441c      	add	r4, r3
 8011354:	4668      	mov	r0, sp
 8011356:	f8ad 7000 	strh.w	r7, [sp]
 801135a:	f8ad 6004 	strh.w	r6, [sp, #4]
 801135e:	f8ad 5002 	strh.w	r5, [sp, #2]
 8011362:	f8ad 4006 	strh.w	r4, [sp, #6]
 8011366:	f006 fe25 	bl	8017fb4 <WM__InitIVRSearch>
 801136a:	b148      	cbz	r0, 8011380 <GUI_FillRect+0x4c>
 801136c:	4623      	mov	r3, r4
 801136e:	4632      	mov	r2, r6
 8011370:	4629      	mov	r1, r5
 8011372:	4638      	mov	r0, r7
 8011374:	f001 fb06 	bl	8012984 <LCD_FillRect>
 8011378:	f006 fcf6 	bl	8017d68 <WM__GetNextIVR>
 801137c:	2800      	cmp	r0, #0
 801137e:	d1f5      	bne.n	801136c <GUI_FillRect+0x38>
 8011380:	f000 f972 	bl	8011668 <GUI_Unlock>
 8011384:	b003      	add	sp, #12
 8011386:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011388:	200000a8 	.word	0x200000a8

0801138c <_OnExit>:
 801138c:	b538      	push	{r3, r4, r5, lr}
 801138e:	4c0e      	ldr	r4, [pc, #56]	; (80113c8 <_OnExit+0x3c>)
 8011390:	4d0e      	ldr	r5, [pc, #56]	; (80113cc <_OnExit+0x40>)
 8011392:	2208      	movs	r2, #8
 8011394:	682b      	ldr	r3, [r5, #0]
 8011396:	2100      	movs	r1, #0
 8011398:	4620      	mov	r0, r4
 801139a:	4798      	blx	r3
 801139c:	682b      	ldr	r3, [r5, #0]
 801139e:	2208      	movs	r2, #8
 80113a0:	2100      	movs	r1, #0
 80113a2:	f104 0008 	add.w	r0, r4, #8
 80113a6:	4798      	blx	r3
 80113a8:	682b      	ldr	r3, [r5, #0]
 80113aa:	2208      	movs	r2, #8
 80113ac:	2100      	movs	r1, #0
 80113ae:	f104 0010 	add.w	r0, r4, #16
 80113b2:	4798      	blx	r3
 80113b4:	682b      	ldr	r3, [r5, #0]
 80113b6:	2208      	movs	r2, #8
 80113b8:	f104 0018 	add.w	r0, r4, #24
 80113bc:	2100      	movs	r1, #0
 80113be:	4798      	blx	r3
 80113c0:	4b03      	ldr	r3, [pc, #12]	; (80113d0 <_OnExit+0x44>)
 80113c2:	2200      	movs	r2, #0
 80113c4:	601a      	str	r2, [r3, #0]
 80113c6:	bd38      	pop	{r3, r4, r5, pc}
 80113c8:	2002e27c 	.word	0x2002e27c
 80113cc:	200000cc 	.word	0x200000cc
 80113d0:	20030824 	.word	0x20030824

080113d4 <GUI_MULTIBUF_BeginEx>:
 80113d4:	4b18      	ldr	r3, [pc, #96]	; (8011438 <GUI_MULTIBUF_BeginEx+0x64>)
 80113d6:	4a19      	ldr	r2, [pc, #100]	; (801143c <GUI_MULTIBUF_BeginEx+0x68>)
 80113d8:	6a19      	ldr	r1, [r3, #32]
 80113da:	b570      	push	{r4, r5, r6, lr}
 80113dc:	2900      	cmp	r1, #0
 80113de:	bf0c      	ite	eq
 80113e0:	4606      	moveq	r6, r0
 80113e2:	2600      	movne	r6, #0
 80113e4:	b082      	sub	sp, #8
 80113e6:	5791      	ldrsb	r1, [r2, r6]
 80113e8:	2901      	cmp	r1, #1
 80113ea:	dd23      	ble.n	8011434 <GUI_MULTIBUF_BeginEx+0x60>
 80113ec:	eb03 0286 	add.w	r2, r3, r6, lsl #2
 80113f0:	6914      	ldr	r4, [r2, #16]
 80113f2:	1c65      	adds	r5, r4, #1
 80113f4:	6115      	str	r5, [r2, #16]
 80113f6:	b9ec      	cbnz	r4, 8011434 <GUI_MULTIBUF_BeginEx+0x60>
 80113f8:	6895      	ldr	r5, [r2, #8]
 80113fa:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80113fe:	4626      	mov	r6, r4
 8011400:	462c      	mov	r4, r5
 8011402:	e000      	b.n	8011406 <GUI_MULTIBUF_BeginEx+0x32>
 8011404:	461c      	mov	r4, r3
 8011406:	3401      	adds	r4, #1
 8011408:	428c      	cmp	r4, r1
 801140a:	bf0a      	itet	eq
 801140c:	2400      	moveq	r4, #0
 801140e:	6094      	strne	r4, [r2, #8]
 8011410:	6096      	streq	r6, [r2, #8]
 8011412:	42a3      	cmp	r3, r4
 8011414:	d0f6      	beq.n	8011404 <GUI_MULTIBUF_BeginEx+0x30>
 8011416:	f7ff f9a3 	bl	8010760 <GUI_DEVICE__GetpDriver>
 801141a:	9001      	str	r0, [sp, #4]
 801141c:	b150      	cbz	r0, 8011434 <GUI_MULTIBUF_BeginEx+0x60>
 801141e:	68c3      	ldr	r3, [r0, #12]
 8011420:	2121      	movs	r1, #33	; 0x21
 8011422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011424:	a801      	add	r0, sp, #4
 8011426:	4798      	blx	r3
 8011428:	4603      	mov	r3, r0
 801142a:	b118      	cbz	r0, 8011434 <GUI_MULTIBUF_BeginEx+0x60>
 801142c:	4622      	mov	r2, r4
 801142e:	4629      	mov	r1, r5
 8011430:	9801      	ldr	r0, [sp, #4]
 8011432:	4798      	blx	r3
 8011434:	b002      	add	sp, #8
 8011436:	bd70      	pop	{r4, r5, r6, pc}
 8011438:	2002e27c 	.word	0x2002e27c
 801143c:	20030820 	.word	0x20030820

08011440 <GUI_MULTIBUF_EndEx>:
 8011440:	4b16      	ldr	r3, [pc, #88]	; (801149c <GUI_MULTIBUF_EndEx+0x5c>)
 8011442:	4a17      	ldr	r2, [pc, #92]	; (80114a0 <GUI_MULTIBUF_EndEx+0x60>)
 8011444:	6a19      	ldr	r1, [r3, #32]
 8011446:	b530      	push	{r4, r5, lr}
 8011448:	2900      	cmp	r1, #0
 801144a:	bf0c      	ite	eq
 801144c:	4604      	moveq	r4, r0
 801144e:	2400      	movne	r4, #0
 8011450:	b083      	sub	sp, #12
 8011452:	5712      	ldrsb	r2, [r2, r4]
 8011454:	2a01      	cmp	r2, #1
 8011456:	dd05      	ble.n	8011464 <GUI_MULTIBUF_EndEx+0x24>
 8011458:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801145c:	6923      	ldr	r3, [r4, #16]
 801145e:	3b01      	subs	r3, #1
 8011460:	6123      	str	r3, [r4, #16]
 8011462:	b10b      	cbz	r3, 8011468 <GUI_MULTIBUF_EndEx+0x28>
 8011464:	b003      	add	sp, #12
 8011466:	bd30      	pop	{r4, r5, pc}
 8011468:	4605      	mov	r5, r0
 801146a:	2001      	movs	r0, #1
 801146c:	40a8      	lsls	r0, r5
 801146e:	f7ff f965 	bl	801073c <GUI_DCACHE_Clear>
 8011472:	4628      	mov	r0, r5
 8011474:	68a5      	ldr	r5, [r4, #8]
 8011476:	61a5      	str	r5, [r4, #24]
 8011478:	f7ff f972 	bl	8010760 <GUI_DEVICE__GetpDriver>
 801147c:	9001      	str	r0, [sp, #4]
 801147e:	2800      	cmp	r0, #0
 8011480:	d0f0      	beq.n	8011464 <GUI_MULTIBUF_EndEx+0x24>
 8011482:	68c3      	ldr	r3, [r0, #12]
 8011484:	2122      	movs	r1, #34	; 0x22
 8011486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011488:	a801      	add	r0, sp, #4
 801148a:	4798      	blx	r3
 801148c:	4603      	mov	r3, r0
 801148e:	2800      	cmp	r0, #0
 8011490:	d0e8      	beq.n	8011464 <GUI_MULTIBUF_EndEx+0x24>
 8011492:	4629      	mov	r1, r5
 8011494:	9801      	ldr	r0, [sp, #4]
 8011496:	4798      	blx	r3
 8011498:	b003      	add	sp, #12
 801149a:	bd30      	pop	{r4, r5, pc}
 801149c:	2002e27c 	.word	0x2002e27c
 80114a0:	20030820 	.word	0x20030820

080114a4 <GUI_MULTIBUF_ConfirmEx>:
 80114a4:	4b09      	ldr	r3, [pc, #36]	; (80114cc <GUI_MULTIBUF_ConfirmEx+0x28>)
 80114a6:	6a1a      	ldr	r2, [r3, #32]
 80114a8:	2a00      	cmp	r2, #0
 80114aa:	bf18      	it	ne
 80114ac:	2000      	movne	r0, #0
 80114ae:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80114b2:	b410      	push	{r4}
 80114b4:	6994      	ldr	r4, [r2, #24]
 80114b6:	2c00      	cmp	r4, #0
 80114b8:	db04      	blt.n	80114c4 <GUI_MULTIBUF_ConfirmEx+0x20>
 80114ba:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80114be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114c2:	6193      	str	r3, [r2, #24]
 80114c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80114c8:	4770      	bx	lr
 80114ca:	bf00      	nop
 80114cc:	2002e27c 	.word	0x2002e27c

080114d0 <GUI_MULTIBUF_ConfigEx>:
 80114d0:	b530      	push	{r4, r5, lr}
 80114d2:	4d0c      	ldr	r5, [pc, #48]	; (8011504 <GUI_MULTIBUF_ConfigEx+0x34>)
 80114d4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80114d6:	b083      	sub	sp, #12
 80114d8:	4604      	mov	r4, r0
 80114da:	b153      	cbz	r3, 80114f2 <GUI_MULTIBUF_ConfigEx+0x22>
 80114dc:	6a2a      	ldr	r2, [r5, #32]
 80114de:	4b0a      	ldr	r3, [pc, #40]	; (8011508 <GUI_MULTIBUF_ConfigEx+0x38>)
 80114e0:	2a00      	cmp	r2, #0
 80114e2:	bf18      	it	ne
 80114e4:	2400      	movne	r4, #0
 80114e6:	2901      	cmp	r1, #1
 80114e8:	bfb8      	it	lt
 80114ea:	2101      	movlt	r1, #1
 80114ec:	5519      	strb	r1, [r3, r4]
 80114ee:	b003      	add	sp, #12
 80114f0:	bd30      	pop	{r4, r5, pc}
 80114f2:	4628      	mov	r0, r5
 80114f4:	4b05      	ldr	r3, [pc, #20]	; (801150c <GUI_MULTIBUF_ConfigEx+0x3c>)
 80114f6:	f840 3f24 	str.w	r3, [r0, #36]!
 80114fa:	9101      	str	r1, [sp, #4]
 80114fc:	f7ff f90a 	bl	8010714 <GUI__RegisterExit>
 8011500:	9901      	ldr	r1, [sp, #4]
 8011502:	e7eb      	b.n	80114dc <GUI_MULTIBUF_ConfigEx+0xc>
 8011504:	2002e27c 	.word	0x2002e27c
 8011508:	20030820 	.word	0x20030820
 801150c:	0801138d 	.word	0x0801138d

08011510 <GUI_StoreKey>:
 8011510:	4b02      	ldr	r3, [pc, #8]	; (801151c <GUI_StoreKey+0xc>)
 8011512:	681a      	ldr	r2, [r3, #0]
 8011514:	b902      	cbnz	r2, 8011518 <GUI_StoreKey+0x8>
 8011516:	6018      	str	r0, [r3, #0]
 8011518:	f000 bb16 	b.w	8011b48 <GUI_SignalEvent>
 801151c:	2002e2a8 	.word	0x2002e2a8

08011520 <GUI_PollKeyMsg>:
 8011520:	b510      	push	{r4, lr}
 8011522:	f000 f8ab 	bl	801167c <GUI_Lock>
 8011526:	4a0d      	ldr	r2, [pc, #52]	; (801155c <GUI_PollKeyMsg+0x3c>)
 8011528:	6813      	ldr	r3, [r2, #0]
 801152a:	6851      	ldr	r1, [r2, #4]
 801152c:	428b      	cmp	r3, r1
 801152e:	d00f      	beq.n	8011550 <GUI_PollKeyMsg+0x30>
 8011530:	4c0b      	ldr	r4, [pc, #44]	; (8011560 <GUI_PollKeyMsg+0x40>)
 8011532:	42a3      	cmp	r3, r4
 8011534:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011538:	f04f 0401 	mov.w	r4, #1
 801153c:	bf14      	ite	ne
 801153e:	3308      	addne	r3, #8
 8011540:	3b50      	subeq	r3, #80	; 0x50
 8011542:	6013      	str	r3, [r2, #0]
 8011544:	f007 fcc8 	bl	8018ed8 <WM_OnKey>
 8011548:	f000 f88e 	bl	8011668 <GUI_Unlock>
 801154c:	4620      	mov	r0, r4
 801154e:	bd10      	pop	{r4, pc}
 8011550:	2400      	movs	r4, #0
 8011552:	f000 f889 	bl	8011668 <GUI_Unlock>
 8011556:	4620      	mov	r0, r4
 8011558:	bd10      	pop	{r4, pc}
 801155a:	bf00      	nop
 801155c:	200000ac 	.word	0x200000ac
 8011560:	2002e2fc 	.word	0x2002e2fc

08011564 <GUI_GetCursorLayer>:
 8011564:	2801      	cmp	r0, #1
 8011566:	bf9a      	itte	ls
 8011568:	4b02      	ldrls	r3, [pc, #8]	; (8011574 <GUI_GetCursorLayer+0x10>)
 801156a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801156e:	2000      	movhi	r0, #0
 8011570:	4770      	bx	lr
 8011572:	bf00      	nop
 8011574:	2002e308 	.word	0x2002e308

08011578 <GUI_GetLayerPosEx>:
 8011578:	b570      	push	{r4, r5, r6, lr}
 801157a:	4604      	mov	r4, r0
 801157c:	460e      	mov	r6, r1
 801157e:	4615      	mov	r5, r2
 8011580:	f000 f87c 	bl	801167c <GUI_Lock>
 8011584:	4620      	mov	r0, r4
 8011586:	462a      	mov	r2, r5
 8011588:	4631      	mov	r1, r6
 801158a:	f002 fd05 	bl	8013f98 <LCD_GetPosEx>
 801158e:	4604      	mov	r4, r0
 8011590:	b110      	cbz	r0, 8011598 <GUI_GetLayerPosEx+0x20>
 8011592:	2300      	movs	r3, #0
 8011594:	6033      	str	r3, [r6, #0]
 8011596:	602b      	str	r3, [r5, #0]
 8011598:	f000 f866 	bl	8011668 <GUI_Unlock>
 801159c:	4620      	mov	r0, r4
 801159e:	bd70      	pop	{r4, r5, r6, pc}

080115a0 <GUI_SelectLayer>:
 80115a0:	b570      	push	{r4, r5, r6, lr}
 80115a2:	4d0d      	ldr	r5, [pc, #52]	; (80115d8 <GUI_SelectLayer+0x38>)
 80115a4:	682b      	ldr	r3, [r5, #0]
 80115a6:	4604      	mov	r4, r0
 80115a8:	7c5e      	ldrb	r6, [r3, #17]
 80115aa:	f000 f867 	bl	801167c <GUI_Lock>
 80115ae:	2c01      	cmp	r4, #1
 80115b0:	d903      	bls.n	80115ba <GUI_SelectLayer+0x1a>
 80115b2:	f000 f859 	bl	8011668 <GUI_Unlock>
 80115b6:	4630      	mov	r0, r6
 80115b8:	bd70      	pop	{r4, r5, r6, pc}
 80115ba:	4620      	mov	r0, r4
 80115bc:	f7ff f8d0 	bl	8010760 <GUI_DEVICE__GetpDriver>
 80115c0:	2800      	cmp	r0, #0
 80115c2:	d0f6      	beq.n	80115b2 <GUI_SelectLayer+0x12>
 80115c4:	682b      	ldr	r3, [r5, #0]
 80115c6:	745c      	strb	r4, [r3, #17]
 80115c8:	f7fe fe8a 	bl	80102e0 <GUI_SelectLCD>
 80115cc:	4b03      	ldr	r3, [pc, #12]	; (80115dc <GUI_SelectLayer+0x3c>)
 80115ce:	601c      	str	r4, [r3, #0]
 80115d0:	f000 f84a 	bl	8011668 <GUI_Unlock>
 80115d4:	4630      	mov	r0, r6
 80115d6:	bd70      	pop	{r4, r5, r6, pc}
 80115d8:	200000a8 	.word	0x200000a8
 80115dc:	200308b4 	.word	0x200308b4

080115e0 <GUI_SetLayerPosEx>:
 80115e0:	b570      	push	{r4, r5, r6, lr}
 80115e2:	4604      	mov	r4, r0
 80115e4:	460d      	mov	r5, r1
 80115e6:	4616      	mov	r6, r2
 80115e8:	f000 f848 	bl	801167c <GUI_Lock>
 80115ec:	4632      	mov	r2, r6
 80115ee:	4629      	mov	r1, r5
 80115f0:	4620      	mov	r0, r4
 80115f2:	f002 fd1f 	bl	8014034 <LCD_SetPosEx>
 80115f6:	4604      	mov	r4, r0
 80115f8:	f000 f836 	bl	8011668 <GUI_Unlock>
 80115fc:	4620      	mov	r0, r4
 80115fe:	bd70      	pop	{r4, r5, r6, pc}

08011600 <GUI_TOUCH_StoreStateEx>:
 8011600:	b530      	push	{r4, r5, lr}
 8011602:	4c13      	ldr	r4, [pc, #76]	; (8011650 <GUI_TOUCH_StoreStateEx+0x50>)
 8011604:	b085      	sub	sp, #20
 8011606:	220c      	movs	r2, #12
 8011608:	4621      	mov	r1, r4
 801160a:	4605      	mov	r5, r0
 801160c:	f00d fa10 	bl	801ea30 <memcmp>
 8011610:	b178      	cbz	r0, 8011632 <GUI_TOUCH_StoreStateEx+0x32>
 8011612:	68e3      	ldr	r3, [r4, #12]
 8011614:	b1a3      	cbz	r3, 8011640 <GUI_TOUCH_StoreStateEx+0x40>
 8011616:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801161a:	ad01      	add	r5, sp, #4
 801161c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8011620:	a902      	add	r1, sp, #8
 8011622:	4628      	mov	r0, r5
 8011624:	4798      	blx	r3
 8011626:	4603      	mov	r3, r0
 8011628:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801162c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011630:	b10b      	cbz	r3, 8011636 <GUI_TOUCH_StoreStateEx+0x36>
 8011632:	b005      	add	sp, #20
 8011634:	bd30      	pop	{r4, r5, pc}
 8011636:	4628      	mov	r0, r5
 8011638:	f00a fa8c 	bl	801bb54 <GUI_PID_StoreState>
 801163c:	b005      	add	sp, #20
 801163e:	bd30      	pop	{r4, r5, pc}
 8011640:	4628      	mov	r0, r5
 8011642:	f00a fa87 	bl	801bb54 <GUI_PID_StoreState>
 8011646:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801164a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801164e:	e7f0      	b.n	8011632 <GUI_TOUCH_StoreStateEx+0x32>
 8011650:	2002e310 	.word	0x2002e310

08011654 <_OnExit>:
 8011654:	b510      	push	{r4, lr}
 8011656:	4c03      	ldr	r4, [pc, #12]	; (8011664 <_OnExit+0x10>)
 8011658:	6820      	ldr	r0, [r4, #0]
 801165a:	f7fe f84b 	bl	800f6f4 <GUI_ALLOC_FreeFixedBlock>
 801165e:	2300      	movs	r3, #0
 8011660:	6023      	str	r3, [r4, #0]
 8011662:	bd10      	pop	{r4, pc}
 8011664:	2002e320 	.word	0x2002e320

08011668 <GUI_Unlock>:
 8011668:	4a03      	ldr	r2, [pc, #12]	; (8011678 <GUI_Unlock+0x10>)
 801166a:	6853      	ldr	r3, [r2, #4]
 801166c:	3b01      	subs	r3, #1
 801166e:	6053      	str	r3, [r2, #4]
 8011670:	b103      	cbz	r3, 8011674 <GUI_Unlock+0xc>
 8011672:	4770      	bx	lr
 8011674:	f7f6 beba 	b.w	80083ec <GUI_X_Unlock>
 8011678:	2002e320 	.word	0x2002e320

0801167c <GUI_Lock>:
 801167c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011680:	4d23      	ldr	r5, [pc, #140]	; (8011710 <GUI_Lock+0x94>)
 8011682:	686b      	ldr	r3, [r5, #4]
 8011684:	b123      	cbz	r3, 8011690 <GUI_Lock+0x14>
 8011686:	f7f6 fec3 	bl	8008410 <GUI_X_GetTaskId>
 801168a:	68ab      	ldr	r3, [r5, #8]
 801168c:	4298      	cmp	r0, r3
 801168e:	d004      	beq.n	801169a <GUI_Lock+0x1e>
 8011690:	f7f6 feb4 	bl	80083fc <GUI_X_Lock>
 8011694:	f7f6 febc 	bl	8008410 <GUI_X_GetTaskId>
 8011698:	60a8      	str	r0, [r5, #8]
 801169a:	686b      	ldr	r3, [r5, #4]
 801169c:	3301      	adds	r3, #1
 801169e:	2b01      	cmp	r3, #1
 80116a0:	606b      	str	r3, [r5, #4]
 80116a2:	d001      	beq.n	80116a8 <GUI_Lock+0x2c>
 80116a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116a8:	4f1a      	ldr	r7, [pc, #104]	; (8011714 <GUI_Lock+0x98>)
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	dd29      	ble.n	8011704 <GUI_Lock+0x88>
 80116b0:	2400      	movs	r4, #0
 80116b2:	4626      	mov	r6, r4
 80116b4:	e006      	b.n	80116c4 <GUI_Lock+0x48>
 80116b6:	b342      	cbz	r2, 801170a <GUI_Lock+0x8e>
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	3601      	adds	r6, #1
 80116bc:	429e      	cmp	r6, r3
 80116be:	f104 047c 	add.w	r4, r4, #124	; 0x7c
 80116c2:	da1f      	bge.n	8011704 <GUI_Lock+0x88>
 80116c4:	f7f6 fea4 	bl	8008410 <GUI_X_GetTaskId>
 80116c8:	682b      	ldr	r3, [r5, #0]
 80116ca:	591a      	ldr	r2, [r3, r4]
 80116cc:	4290      	cmp	r0, r2
 80116ce:	4423      	add	r3, r4
 80116d0:	d1f1      	bne.n	80116b6 <GUI_Lock+0x3a>
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	42b3      	cmp	r3, r6
 80116d6:	d0e5      	beq.n	80116a4 <GUI_Lock+0x28>
 80116d8:	2b00      	cmp	r3, #0
 80116da:	db10      	blt.n	80116fe <GUI_Lock+0x82>
 80116dc:	682a      	ldr	r2, [r5, #0]
 80116de:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 80116e2:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 80116e6:	f7ff f981 	bl	80109ec <GUI_DEVICE_UnlinkTaskDevices>
 80116ea:	682b      	ldr	r3, [r5, #0]
 80116ec:	f8c8 0078 	str.w	r0, [r8, #120]	; 0x78
 80116f0:	441c      	add	r4, r3
 80116f2:	4b09      	ldr	r3, [pc, #36]	; (8011718 <GUI_Lock+0x9c>)
 80116f4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80116f6:	3404      	adds	r4, #4
 80116f8:	601c      	str	r4, [r3, #0]
 80116fa:	f7ff f979 	bl	80109f0 <GUI_DEVICE_LinkDevices>
 80116fe:	607e      	str	r6, [r7, #4]
 8011700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011704:	2400      	movs	r4, #0
 8011706:	4626      	mov	r6, r4
 8011708:	e7e3      	b.n	80116d2 <GUI_Lock+0x56>
 801170a:	6018      	str	r0, [r3, #0]
 801170c:	e7e1      	b.n	80116d2 <GUI_Lock+0x56>
 801170e:	bf00      	nop
 8011710:	2002e320 	.word	0x2002e320
 8011714:	200000b4 	.word	0x200000b4
 8011718:	200000a8 	.word	0x200000a8

0801171c <GUITASK_Init>:
 801171c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801171e:	4f19      	ldr	r7, [pc, #100]	; (8011784 <GUITASK_Init+0x68>)
 8011720:	4b19      	ldr	r3, [pc, #100]	; (8011788 <GUITASK_Init+0x6c>)
 8011722:	4e1a      	ldr	r6, [pc, #104]	; (801178c <GUITASK_Init+0x70>)
 8011724:	4638      	mov	r0, r7
 8011726:	f840 3f0c 	str.w	r3, [r0, #12]!
 801172a:	f7fe fff3 	bl	8010714 <GUI__RegisterExit>
 801172e:	6834      	ldr	r4, [r6, #0]
 8011730:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 8011734:	00a4      	lsls	r4, r4, #2
 8011736:	4620      	mov	r0, r4
 8011738:	f7fd ffe6 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 801173c:	4b14      	ldr	r3, [pc, #80]	; (8011790 <GUITASK_Init+0x74>)
 801173e:	6038      	str	r0, [r7, #0]
 8011740:	4622      	mov	r2, r4
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	2100      	movs	r1, #0
 8011746:	4798      	blx	r3
 8011748:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801174c:	6073      	str	r3, [r6, #4]
 801174e:	f7f6 fe37 	bl	80083c0 <GUI_X_InitOS>
 8011752:	6833      	ldr	r3, [r6, #0]
 8011754:	2b00      	cmp	r3, #0
 8011756:	dd11      	ble.n	801177c <GUITASK_Init+0x60>
 8011758:	2400      	movs	r4, #0
 801175a:	4625      	mov	r5, r4
 801175c:	e003      	b.n	8011766 <GUITASK_Init+0x4a>
 801175e:	b172      	cbz	r2, 801177e <GUITASK_Init+0x62>
 8011760:	6833      	ldr	r3, [r6, #0]
 8011762:	429d      	cmp	r5, r3
 8011764:	da0a      	bge.n	801177c <GUITASK_Init+0x60>
 8011766:	f7f6 fe53 	bl	8008410 <GUI_X_GetTaskId>
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	591a      	ldr	r2, [r3, r4]
 801176e:	4290      	cmp	r0, r2
 8011770:	4423      	add	r3, r4
 8011772:	f105 0501 	add.w	r5, r5, #1
 8011776:	f104 047c 	add.w	r4, r4, #124	; 0x7c
 801177a:	d1f0      	bne.n	801175e <GUITASK_Init+0x42>
 801177c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801177e:	6018      	str	r0, [r3, #0]
 8011780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011782:	bf00      	nop
 8011784:	2002e320 	.word	0x2002e320
 8011788:	08011655 	.word	0x08011655
 801178c:	200000b4 	.word	0x200000b4
 8011790:	200000cc 	.word	0x200000cc

08011794 <GUITASK_CopyContext>:
 8011794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011798:	4e23      	ldr	r6, [pc, #140]	; (8011828 <GUITASK_CopyContext+0x94>)
 801179a:	6833      	ldr	r3, [r6, #0]
 801179c:	2b00      	cmp	r3, #0
 801179e:	dd3f      	ble.n	8011820 <GUITASK_CopyContext+0x8c>
 80117a0:	4d22      	ldr	r5, [pc, #136]	; (801182c <GUITASK_CopyContext+0x98>)
 80117a2:	4f23      	ldr	r7, [pc, #140]	; (8011830 <GUITASK_CopyContext+0x9c>)
 80117a4:	682c      	ldr	r4, [r5, #0]
 80117a6:	f8d7 9000 	ldr.w	r9, [r7]
 80117aa:	ebc3 1843 	rsb	r8, r3, r3, lsl #5
 80117ae:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80117b2:	f108 080c 	add.w	r8, r8, #12
 80117b6:	340c      	adds	r4, #12
 80117b8:	f04f 0a00 	mov.w	sl, #0
 80117bc:	f1a4 0308 	sub.w	r3, r4, #8
 80117c0:	2274      	movs	r2, #116	; 0x74
 80117c2:	4618      	mov	r0, r3
 80117c4:	4649      	mov	r1, r9
 80117c6:	f00d f942 	bl	801ea4e <memcpy>
 80117ca:	1f22      	subs	r2, r4, #4
 80117cc:	6320      	str	r0, [r4, #48]	; 0x30
 80117ce:	63a0      	str	r0, [r4, #56]	; 0x38
 80117d0:	f844 ac0c 	str.w	sl, [r4, #-12]
 80117d4:	6362      	str	r2, [r4, #52]	; 0x34
 80117d6:	60e4      	str	r4, [r4, #12]
 80117d8:	347c      	adds	r4, #124	; 0x7c
 80117da:	45a0      	cmp	r8, r4
 80117dc:	d1ee      	bne.n	80117bc <GUITASK_CopyContext+0x28>
 80117de:	2400      	movs	r4, #0
 80117e0:	46a0      	mov	r8, r4
 80117e2:	e003      	b.n	80117ec <GUITASK_CopyContext+0x58>
 80117e4:	b192      	cbz	r2, 801180c <GUITASK_CopyContext+0x78>
 80117e6:	6832      	ldr	r2, [r6, #0]
 80117e8:	4590      	cmp	r8, r2
 80117ea:	da14      	bge.n	8011816 <GUITASK_CopyContext+0x82>
 80117ec:	f7f6 fe10 	bl	8008410 <GUI_X_GetTaskId>
 80117f0:	682b      	ldr	r3, [r5, #0]
 80117f2:	591a      	ldr	r2, [r3, r4]
 80117f4:	4290      	cmp	r0, r2
 80117f6:	eb03 0104 	add.w	r1, r3, r4
 80117fa:	f108 0801 	add.w	r8, r8, #1
 80117fe:	f104 047c 	add.w	r4, r4, #124	; 0x7c
 8011802:	d1ef      	bne.n	80117e4 <GUITASK_CopyContext+0x50>
 8011804:	3104      	adds	r1, #4
 8011806:	6039      	str	r1, [r7, #0]
 8011808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801180c:	6008      	str	r0, [r1, #0]
 801180e:	3104      	adds	r1, #4
 8011810:	6039      	str	r1, [r7, #0]
 8011812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011816:	4619      	mov	r1, r3
 8011818:	3104      	adds	r1, #4
 801181a:	6039      	str	r1, [r7, #0]
 801181c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011820:	4b02      	ldr	r3, [pc, #8]	; (801182c <GUITASK_CopyContext+0x98>)
 8011822:	4f03      	ldr	r7, [pc, #12]	; (8011830 <GUITASK_CopyContext+0x9c>)
 8011824:	6819      	ldr	r1, [r3, #0]
 8011826:	e7ed      	b.n	8011804 <GUITASK_CopyContext+0x70>
 8011828:	200000b4 	.word	0x200000b4
 801182c:	2002e320 	.word	0x2002e320
 8011830:	200000a8 	.word	0x200000a8

08011834 <GUI_SetTimeSlice>:
 8011834:	4b01      	ldr	r3, [pc, #4]	; (801183c <GUI_SetTimeSlice+0x8>)
 8011836:	6018      	str	r0, [r3, #0]
 8011838:	4770      	bx	lr
 801183a:	bf00      	nop
 801183c:	200000bc 	.word	0x200000bc

08011840 <GUI_Delay>:
 8011840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011844:	4607      	mov	r7, r0
 8011846:	f7f6 fdb1 	bl	80083ac <GUI_X_GetTime>
 801184a:	4407      	add	r7, r0
 801184c:	f7f6 fdae 	bl	80083ac <GUI_X_GetTime>
 8011850:	1a3e      	subs	r6, r7, r0
 8011852:	2e00      	cmp	r6, #0
 8011854:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80118b8 <GUI_Delay+0x78>
 8011858:	f8df 8060 	ldr.w	r8, [pc, #96]	; 80118bc <GUI_Delay+0x7c>
 801185c:	dd22      	ble.n	80118a4 <GUI_Delay+0x64>
 801185e:	f7fe fc6d 	bl	801013c <GUI_Exec>
 8011862:	f8d9 3000 	ldr.w	r3, [r9]
 8011866:	429e      	cmp	r6, r3
 8011868:	bfa8      	it	ge
 801186a:	461e      	movge	r6, r3
 801186c:	f7ff ff06 	bl	801167c <GUI_Lock>
 8011870:	f8d8 4000 	ldr.w	r4, [r8]
 8011874:	f7fe f9f6 	bl	800fc64 <GUI_ALLOC_Lock>
 8011878:	b1b4      	cbz	r4, 80118a8 <GUI_Delay+0x68>
 801187a:	4625      	mov	r5, r4
 801187c:	f7ff fef4 	bl	8011668 <GUI_Unlock>
 8011880:	3d01      	subs	r5, #1
 8011882:	d1fb      	bne.n	801187c <GUI_Delay+0x3c>
 8011884:	4630      	mov	r0, r6
 8011886:	f7f6 fd95 	bl	80083b4 <GUI_X_Delay>
 801188a:	f7ff fef7 	bl	801167c <GUI_Lock>
 801188e:	3c01      	subs	r4, #1
 8011890:	d1fb      	bne.n	801188a <GUI_Delay+0x4a>
 8011892:	f7fe f9ef 	bl	800fc74 <GUI_ALLOC_Unlock>
 8011896:	f7ff fee7 	bl	8011668 <GUI_Unlock>
 801189a:	f7f6 fd87 	bl	80083ac <GUI_X_GetTime>
 801189e:	1a3e      	subs	r6, r7, r0
 80118a0:	2e00      	cmp	r6, #0
 80118a2:	dcdc      	bgt.n	801185e <GUI_Delay+0x1e>
 80118a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118a8:	4630      	mov	r0, r6
 80118aa:	f7f6 fd83 	bl	80083b4 <GUI_X_Delay>
 80118ae:	f7fe f9e1 	bl	800fc74 <GUI_ALLOC_Unlock>
 80118b2:	f7ff fed9 	bl	8011668 <GUI_Unlock>
 80118b6:	e7f0      	b.n	801189a <GUI_Delay+0x5a>
 80118b8:	200000bc 	.word	0x200000bc
 80118bc:	2002e324 	.word	0x2002e324

080118c0 <GUI_UC__GetCharCodeInc>:
 80118c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118c2:	4e08      	ldr	r6, [pc, #32]	; (80118e4 <GUI_UC__GetCharCodeInc+0x24>)
 80118c4:	6804      	ldr	r4, [r0, #0]
 80118c6:	6833      	ldr	r3, [r6, #0]
 80118c8:	4605      	mov	r5, r0
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	4620      	mov	r0, r4
 80118ce:	4798      	blx	r3
 80118d0:	6833      	ldr	r3, [r6, #0]
 80118d2:	4607      	mov	r7, r0
 80118d4:	685b      	ldr	r3, [r3, #4]
 80118d6:	4620      	mov	r0, r4
 80118d8:	4798      	blx	r3
 80118da:	4420      	add	r0, r4
 80118dc:	6028      	str	r0, [r5, #0]
 80118de:	4638      	mov	r0, r7
 80118e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118e2:	bf00      	nop
 80118e4:	20030868 	.word	0x20030868

080118e8 <GUI_UC__NumChars2NumBytes>:
 80118e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118ea:	b169      	cbz	r1, 8011908 <GUI_UC__NumChars2NumBytes+0x20>
 80118ec:	4f07      	ldr	r7, [pc, #28]	; (801190c <GUI_UC__NumChars2NumBytes+0x24>)
 80118ee:	4605      	mov	r5, r0
 80118f0:	460c      	mov	r4, r1
 80118f2:	2600      	movs	r6, #0
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	4628      	mov	r0, r5
 80118f8:	685b      	ldr	r3, [r3, #4]
 80118fa:	4798      	blx	r3
 80118fc:	3c01      	subs	r4, #1
 80118fe:	4405      	add	r5, r0
 8011900:	4406      	add	r6, r0
 8011902:	d1f7      	bne.n	80118f4 <GUI_UC__NumChars2NumBytes+0xc>
 8011904:	4630      	mov	r0, r6
 8011906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011908:	460e      	mov	r6, r1
 801190a:	e7fb      	b.n	8011904 <GUI_UC__NumChars2NumBytes+0x1c>
 801190c:	20030868 	.word	0x20030868

08011910 <_GetCharCode>:
 8011910:	7800      	ldrb	r0, [r0, #0]
 8011912:	4770      	bx	lr

08011914 <_GetCharSize>:
 8011914:	2001      	movs	r0, #1
 8011916:	4770      	bx	lr

08011918 <_CalcSizeOfChar>:
 8011918:	2001      	movs	r0, #1
 801191a:	4770      	bx	lr

0801191c <_Encode>:
 801191c:	7001      	strb	r1, [r0, #0]
 801191e:	2001      	movs	r0, #1
 8011920:	4770      	bx	lr
 8011922:	bf00      	nop

08011924 <GUI_DispFloatMin>:
 8011924:	b530      	push	{r4, r5, lr}
 8011926:	ed2d 8b02 	vpush	{d8}
 801192a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801192e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011932:	b083      	sub	sp, #12
 8011934:	4604      	mov	r4, r0
 8011936:	d15a      	bne.n	80119ee <GUI_DispFloatMin+0xca>
 8011938:	eddf 8a7f 	vldr	s17, [pc, #508]	; 8011b38 <GUI_DispFloatMin+0x214>
 801193c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011940:	4b7e      	ldr	r3, [pc, #504]	; (8011b3c <GUI_DispFloatMin+0x218>)
 8011942:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011946:	ee00 3a10 	vmov	s0, r3
 801194a:	eeb8 8a40 	vcvt.f32.u32	s16, s0
 801194e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011952:	ee68 7a27 	vmul.f32	s15, s16, s15
 8011956:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801195e:	f100 8084 	bmi.w	8011a6a <GUI_DispFloatMin+0x146>
 8011962:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011966:	ee17 0a90 	vmov	r0, s15
 801196a:	f7ee fdb5 	bl	80004d8 <__aeabi_f2d>
 801196e:	ec41 0b10 	vmov	d0, r0, r1
 8011972:	f00d f921 	bl	801ebb8 <floor>
 8011976:	ec51 0b10 	vmov	r0, r1, d0
 801197a:	f7ef f89f 	bl	8000abc <__aeabi_d2f>
 801197e:	ee07 0a90 	vmov	s15, r0
 8011982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011986:	ee17 0a90 	vmov	r0, s15
 801198a:	f7fe fa49 	bl	800fe20 <GUI_Long2Len>
 801198e:	ee28 0a28 	vmul.f32	s0, s16, s17
 8011992:	2c00      	cmp	r4, #0
 8011994:	bf0c      	ite	eq
 8011996:	4623      	moveq	r3, r4
 8011998:	1c63      	addne	r3, r4, #1
 801199a:	1b00      	subs	r0, r0, r4
 801199c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80119a0:	2800      	cmp	r0, #0
 80119a2:	bfac      	ite	ge
 80119a4:	181d      	addge	r5, r3, r0
 80119a6:	1c1d      	addlt	r5, r3, #0
 80119a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119ac:	b2ed      	uxtb	r5, r5
 80119ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80119b2:	d46d      	bmi.n	8011a90 <GUI_DispFloatMin+0x16c>
 80119b4:	ee70 7a27 	vadd.f32	s15, s0, s15
 80119b8:	ee17 0a90 	vmov	r0, s15
 80119bc:	f7ee fd8c 	bl	80004d8 <__aeabi_f2d>
 80119c0:	ec41 0b10 	vmov	d0, r0, r1
 80119c4:	f00d f8f8 	bl	801ebb8 <floor>
 80119c8:	ec51 0b10 	vmov	r0, r1, d0
 80119cc:	f7ef f876 	bl	8000abc <__aeabi_d2f>
 80119d0:	ee07 0a90 	vmov	s15, r0
 80119d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80119d8:	4622      	mov	r2, r4
 80119da:	ee17 0a90 	vmov	r0, s15
 80119de:	4629      	mov	r1, r5
 80119e0:	b003      	add	sp, #12
 80119e2:	ecbd 8b02 	vpop	{d8}
 80119e6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80119ea:	f00a be51 	b.w	801c690 <GUI_DispDecShift>
 80119ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80119f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119f6:	eef0 8a40 	vmov.f32	s17, s0
 80119fa:	db09      	blt.n	8011a10 <GUI_DispFloatMin+0xec>
 80119fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011a00:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a08:	d453      	bmi.n	8011ab2 <GUI_DispFloatMin+0x18e>
 8011a0a:	eef0 7a68 	vmov.f32	s15, s17
 8011a0e:	e797      	b.n	8011940 <GUI_DispFloatMin+0x1c>
 8011a10:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8011a14:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a1c:	ddf5      	ble.n	8011a0a <GUI_DispFloatMin+0xe6>
 8011a1e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8011b40 <GUI_DispFloatMin+0x21c>
 8011a22:	eef0 7ac0 	vabs.f32	s15, s0
 8011a26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011a2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a32:	d071      	beq.n	8011b18 <GUI_DispFloatMin+0x1f4>
 8011a34:	2300      	movs	r3, #0
 8011a36:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8011a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011a3e:	3301      	adds	r3, #1
 8011a40:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8011a44:	b2db      	uxtb	r3, r3
 8011a46:	ee16 2a90 	vmov	r2, s13
 8011a4a:	2a00      	cmp	r2, #0
 8011a4c:	d0f5      	beq.n	8011a3a <GUI_DispFloatMin+0x116>
 8011a4e:	42a3      	cmp	r3, r4
 8011a50:	dd62      	ble.n	8011b18 <GUI_DispFloatMin+0x1f4>
 8011a52:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8011a56:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a5e:	d860      	bhi.n	8011b22 <GUI_DispFloatMin+0x1fe>
 8011a60:	2c00      	cmp	r4, #0
 8011a62:	d15f      	bne.n	8011b24 <GUI_DispFloatMin+0x200>
 8011a64:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 8011a68:	e7cf      	b.n	8011a0a <GUI_DispFloatMin+0xe6>
 8011a6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a6e:	ee17 0a90 	vmov	r0, s15
 8011a72:	f7ee fd31 	bl	80004d8 <__aeabi_f2d>
 8011a76:	ec41 0b10 	vmov	d0, r0, r1
 8011a7a:	f00d f81d 	bl	801eab8 <ceil>
 8011a7e:	ec51 0b10 	vmov	r0, r1, d0
 8011a82:	f7ef f81b 	bl	8000abc <__aeabi_d2f>
 8011a86:	ee07 0a90 	vmov	s15, r0
 8011a8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011a8e:	e77a      	b.n	8011986 <GUI_DispFloatMin+0x62>
 8011a90:	ee70 7a67 	vsub.f32	s15, s0, s15
 8011a94:	ee17 0a90 	vmov	r0, s15
 8011a98:	f7ee fd1e 	bl	80004d8 <__aeabi_f2d>
 8011a9c:	ec41 0b10 	vmov	d0, r0, r1
 8011aa0:	f00d f80a 	bl	801eab8 <ceil>
 8011aa4:	ec51 0b10 	vmov	r0, r1, d0
 8011aa8:	f7ef f808 	bl	8000abc <__aeabi_d2f>
 8011aac:	ee07 0a90 	vmov	s15, r0
 8011ab0:	e790      	b.n	80119d4 <GUI_DispFloatMin+0xb0>
 8011ab2:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8011b40 <GUI_DispFloatMin+0x21c>
 8011ab6:	eef0 7ac0 	vabs.f32	s15, s0
 8011aba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011abe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ac6:	d022      	beq.n	8011b0e <GUI_DispFloatMin+0x1ea>
 8011ac8:	2300      	movs	r3, #0
 8011aca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8011ace:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8011ad8:	b2db      	uxtb	r3, r3
 8011ada:	ee16 2a90 	vmov	r2, s13
 8011ade:	2a00      	cmp	r2, #0
 8011ae0:	d0f5      	beq.n	8011ace <GUI_DispFloatMin+0x1aa>
 8011ae2:	42a3      	cmp	r3, r4
 8011ae4:	dd13      	ble.n	8011b0e <GUI_DispFloatMin+0x1ea>
 8011ae6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011aea:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af2:	db1a      	blt.n	8011b2a <GUI_DispFloatMin+0x206>
 8011af4:	b9b4      	cbnz	r4, 8011b24 <GUI_DispFloatMin+0x200>
 8011af6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8011afa:	4b10      	ldr	r3, [pc, #64]	; (8011b3c <GUI_DispFloatMin+0x218>)
 8011afc:	eddf 7a11 	vldr	s15, [pc, #68]	; 8011b44 <GUI_DispFloatMin+0x220>
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	9301      	str	r3, [sp, #4]
 8011b04:	ee07 3a10 	vmov	s14, r3
 8011b08:	eeb8 8a47 	vcvt.f32.u32	s16, s14
 8011b0c:	e73b      	b.n	8011986 <GUI_DispFloatMin+0x62>
 8011b0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011b12:	ee78 7aa7 	vadd.f32	s15, s17, s15
 8011b16:	e713      	b.n	8011940 <GUI_DispFloatMin+0x1c>
 8011b18:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011b1c:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8011b20:	e70e      	b.n	8011940 <GUI_DispFloatMin+0x1c>
 8011b22:	b12c      	cbz	r4, 8011b30 <GUI_DispFloatMin+0x20c>
 8011b24:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011b28:	e70a      	b.n	8011940 <GUI_DispFloatMin+0x1c>
 8011b2a:	2c00      	cmp	r4, #0
 8011b2c:	f47f af04 	bne.w	8011938 <GUI_DispFloatMin+0x14>
 8011b30:	eddf 8a01 	vldr	s17, [pc, #4]	; 8011b38 <GUI_DispFloatMin+0x214>
 8011b34:	e7e1      	b.n	8011afa <GUI_DispFloatMin+0x1d6>
 8011b36:	bf00      	nop
 8011b38:	00000000 	.word	0x00000000
 8011b3c:	0802631c 	.word	0x0802631c
 8011b40:	3089705f 	.word	0x3089705f
 8011b44:	00000000 	.word	0x00000000

08011b48 <GUI_SignalEvent>:
 8011b48:	4b02      	ldr	r3, [pc, #8]	; (8011b54 <GUI_SignalEvent+0xc>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	b103      	cbz	r3, 8011b50 <GUI_SignalEvent+0x8>
 8011b4e:	4718      	bx	r3
 8011b50:	4770      	bx	lr
 8011b52:	bf00      	nop
 8011b54:	2002e334 	.word	0x2002e334

08011b58 <GUI__MixColorsBulk>:
 8011b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b5c:	b087      	sub	sp, #28
 8011b5e:	4692      	mov	sl, r2
 8011b60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011b62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011b64:	f89d 9050 	ldrb.w	r9, [sp, #80]	; 0x50
 8011b68:	9001      	str	r0, [sp, #4]
 8011b6a:	9102      	str	r1, [sp, #8]
 8011b6c:	2a00      	cmp	r2, #0
 8011b6e:	d035      	beq.n	8011bdc <GUI__MixColorsBulk+0x84>
 8011b70:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011b72:	f8df b070 	ldr.w	fp, [pc, #112]	; 8011be4 <GUI__MixColorsBulk+0x8c>
 8011b76:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8011be8 <GUI__MixColorsBulk+0x90>
 8011b7a:	0092      	lsls	r2, r2, #2
 8011b7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011b80:	9304      	str	r3, [sp, #16]
 8011b82:	2300      	movs	r3, #0
 8011b84:	9205      	str	r2, [sp, #20]
 8011b86:	9303      	str	r3, [sp, #12]
 8011b88:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8011b8a:	9e02      	ldr	r6, [sp, #8]
 8011b8c:	9d01      	ldr	r5, [sp, #4]
 8011b8e:	4657      	mov	r7, sl
 8011b90:	f855 0b04 	ldr.w	r0, [r5], #4
 8011b94:	f8db 3000 	ldr.w	r3, [fp]
 8011b98:	f856 1b04 	ldr.w	r1, [r6], #4
 8011b9c:	0e02      	lsrs	r2, r0, #24
 8011b9e:	fb09 f202 	mul.w	r2, r9, r2
 8011ba2:	fba8 e202 	umull	lr, r2, r8, r2
 8011ba6:	f3c2 12c7 	ubfx	r2, r2, #7, #8
 8011baa:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8011bae:	4798      	blx	r3
 8011bb0:	3c01      	subs	r4, #1
 8011bb2:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8011bb6:	f847 0b04 	str.w	r0, [r7], #4
 8011bba:	d1e9      	bne.n	8011b90 <GUI__MixColorsBulk+0x38>
 8011bbc:	9a01      	ldr	r2, [sp, #4]
 8011bbe:	9905      	ldr	r1, [sp, #20]
 8011bc0:	9b03      	ldr	r3, [sp, #12]
 8011bc2:	4610      	mov	r0, r2
 8011bc4:	4408      	add	r0, r1
 8011bc6:	9a02      	ldr	r2, [sp, #8]
 8011bc8:	9001      	str	r0, [sp, #4]
 8011bca:	448a      	add	sl, r1
 8011bcc:	9904      	ldr	r1, [sp, #16]
 8011bce:	440a      	add	r2, r1
 8011bd0:	9202      	str	r2, [sp, #8]
 8011bd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011bd4:	3301      	adds	r3, #1
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	9303      	str	r3, [sp, #12]
 8011bda:	d1d5      	bne.n	8011b88 <GUI__MixColorsBulk+0x30>
 8011bdc:	b007      	add	sp, #28
 8011bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011be2:	bf00      	nop
 8011be4:	200000c0 	.word	0x200000c0
 8011be8:	80808081 	.word	0x80808081

08011bec <GUI__MixColors>:
 8011bec:	b4f0      	push	{r4, r5, r6, r7}
 8011bee:	0e0b      	lsrs	r3, r1, #24
 8011bf0:	ea4f 6410 	mov.w	r4, r0, lsr #24
 8011bf4:	4b12      	ldr	r3, [pc, #72]	; (8011c40 <GUI__MixColors+0x54>)
 8011bf6:	fb02 f204 	mul.w	r2, r2, r4
 8011bfa:	bf08      	it	eq
 8011bfc:	f020 417f 	biceq.w	r1, r0, #4278190080	; 0xff000000
 8011c00:	fba3 3202 	umull	r3, r2, r3, r2
 8011c04:	09d2      	lsrs	r2, r2, #7
 8011c06:	f000 16ff 	and.w	r6, r0, #16711935	; 0xff00ff
 8011c0a:	0a0d      	lsrs	r5, r1, #8
 8011c0c:	f1c2 07ff 	rsb	r7, r2, #255	; 0xff
 8011c10:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8011c14:	f001 13ff 	and.w	r3, r1, #16711935	; 0xff00ff
 8011c18:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8011c1c:	fb02 f106 	mul.w	r1, r2, r6
 8011c20:	fb07 f005 	mul.w	r0, r7, r5
 8011c24:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 8011c28:	fb07 1103 	mla	r1, r7, r3, r1
 8011c2c:	fb02 0004 	mla	r0, r2, r4, r0
 8011c30:	0a09      	lsrs	r1, r1, #8
 8011c32:	f000 20ff 	and.w	r0, r0, #4278255360	; 0xff00ff00
 8011c36:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8011c3a:	4308      	orrs	r0, r1
 8011c3c:	bcf0      	pop	{r4, r5, r6, r7}
 8011c3e:	4770      	bx	lr
 8011c40:	80808081 	.word	0x80808081

08011c44 <_OnExit>:
 8011c44:	b510      	push	{r4, lr}
 8011c46:	4c08      	ldr	r4, [pc, #32]	; (8011c68 <_OnExit+0x24>)
 8011c48:	6820      	ldr	r0, [r4, #0]
 8011c4a:	f7fd fd53 	bl	800f6f4 <GUI_ALLOC_FreeFixedBlock>
 8011c4e:	6860      	ldr	r0, [r4, #4]
 8011c50:	f7fd fd50 	bl	800f6f4 <GUI_ALLOC_FreeFixedBlock>
 8011c54:	68a0      	ldr	r0, [r4, #8]
 8011c56:	f7fd fd4d 	bl	800f6f4 <GUI_ALLOC_FreeFixedBlock>
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	60a3      	str	r3, [r4, #8]
 8011c5e:	6063      	str	r3, [r4, #4]
 8011c60:	6023      	str	r3, [r4, #0]
 8011c62:	60e3      	str	r3, [r4, #12]
 8011c64:	6123      	str	r3, [r4, #16]
 8011c66:	bd10      	pop	{r4, pc}
 8011c68:	2002e33c 	.word	0x2002e33c

08011c6c <GUI__DoAlphaBlending>:
 8011c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c70:	4c96      	ldr	r4, [pc, #600]	; (8011ecc <GUI__DoAlphaBlending+0x260>)
 8011c72:	b08f      	sub	sp, #60	; 0x3c
 8011c74:	461d      	mov	r5, r3
 8011c76:	6924      	ldr	r4, [r4, #16]
 8011c78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011c7a:	9005      	str	r0, [sp, #20]
 8011c7c:	2600      	movs	r6, #0
 8011c7e:	9107      	str	r1, [sp, #28]
 8011c80:	4693      	mov	fp, r2
 8011c82:	601e      	str	r6, [r3, #0]
 8011c84:	2c00      	cmp	r4, #0
 8011c86:	f000 80f0 	beq.w	8011e6a <GUI__DoAlphaBlending+0x1fe>
 8011c8a:	4b90      	ldr	r3, [pc, #576]	; (8011ecc <GUI__DoAlphaBlending+0x260>)
 8011c8c:	68df      	ldr	r7, [r3, #12]
 8011c8e:	461c      	mov	r4, r3
 8011c90:	b92f      	cbnz	r7, 8011c9e <GUI__DoAlphaBlending+0x32>
 8011c92:	4b8f      	ldr	r3, [pc, #572]	; (8011ed0 <GUI__DoAlphaBlending+0x264>)
 8011c94:	681f      	ldr	r7, [r3, #0]
 8011c96:	60e7      	str	r7, [r4, #12]
 8011c98:	2f00      	cmp	r7, #0
 8011c9a:	f000 80f0 	beq.w	8011e7e <GUI__DoAlphaBlending+0x212>
 8011c9e:	4b8b      	ldr	r3, [pc, #556]	; (8011ecc <GUI__DoAlphaBlending+0x260>)
 8011ca0:	4e8a      	ldr	r6, [pc, #552]	; (8011ecc <GUI__DoAlphaBlending+0x260>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	9302      	str	r3, [sp, #8]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	f000 80ff 	beq.w	8011eaa <GUI__DoAlphaBlending+0x23e>
 8011cac:	4b87      	ldr	r3, [pc, #540]	; (8011ecc <GUI__DoAlphaBlending+0x260>)
 8011cae:	4c87      	ldr	r4, [pc, #540]	; (8011ecc <GUI__DoAlphaBlending+0x260>)
 8011cb0:	685b      	ldr	r3, [r3, #4]
 8011cb2:	9303      	str	r3, [sp, #12]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	f000 80ea 	beq.w	8011e8e <GUI__DoAlphaBlending+0x222>
 8011cba:	4a86      	ldr	r2, [pc, #536]	; (8011ed4 <GUI__DoAlphaBlending+0x268>)
 8011cbc:	4b86      	ldr	r3, [pc, #536]	; (8011ed8 <GUI__DoAlphaBlending+0x26c>)
 8011cbe:	6812      	ldr	r2, [r2, #0]
 8011cc0:	7c50      	ldrb	r0, [r2, #17]
 8011cc2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8011cc6:	9308      	str	r3, [sp, #32]
 8011cc8:	691b      	ldr	r3, [r3, #16]
 8011cca:	930d      	str	r3, [sp, #52]	; 0x34
 8011ccc:	f001 fbe4 	bl	8013498 <GUI_GetBitsPerPixelEx>
 8011cd0:	4b80      	ldr	r3, [pc, #512]	; (8011ed4 <GUI__DoAlphaBlending+0x268>)
 8011cd2:	9004      	str	r0, [sp, #16]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	7c58      	ldrb	r0, [r3, #17]
 8011cd8:	f001 fbf8 	bl	80134cc <GUI_GetpfIndex2ColorEx>
 8011cdc:	4b7f      	ldr	r3, [pc, #508]	; (8011edc <GUI__DoAlphaBlending+0x270>)
 8011cde:	900b      	str	r0, [sp, #44]	; 0x2c
 8011ce0:	42af      	cmp	r7, r5
 8011ce2:	bfa8      	it	ge
 8011ce4:	462f      	movge	r7, r5
 8011ce6:	4298      	cmp	r0, r3
 8011ce8:	f000 80ce 	beq.w	8011e88 <GUI__DoAlphaBlending+0x21c>
 8011cec:	4b7c      	ldr	r3, [pc, #496]	; (8011ee0 <GUI__DoAlphaBlending+0x274>)
 8011cee:	1ac3      	subs	r3, r0, r3
 8011cf0:	bf18      	it	ne
 8011cf2:	2301      	movne	r3, #1
 8011cf4:	930a      	str	r3, [sp, #40]	; 0x28
 8011cf6:	9b05      	ldr	r3, [sp, #20]
 8011cf8:	443b      	add	r3, r7
 8011cfa:	930c      	str	r3, [sp, #48]	; 0x30
 8011cfc:	2600      	movs	r6, #0
 8011cfe:	3b01      	subs	r3, #1
 8011d00:	9309      	str	r3, [sp, #36]	; 0x24
 8011d02:	4634      	mov	r4, r6
 8011d04:	46ba      	mov	sl, r7
 8011d06:	465f      	mov	r7, fp
 8011d08:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011d0a:	f857 0b04 	ldr.w	r0, [r7], #4
 8011d0e:	4798      	blx	r3
 8011d10:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8011d14:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8011d18:	4681      	mov	r9, r0
 8011d1a:	d047      	beq.n	8011dac <GUI__DoAlphaBlending+0x140>
 8011d1c:	2c00      	cmp	r4, #0
 8011d1e:	d12b      	bne.n	8011d78 <GUI__DoAlphaBlending+0x10c>
 8011d20:	4b6c      	ldr	r3, [pc, #432]	; (8011ed4 <GUI__DoAlphaBlending+0x268>)
 8011d22:	9a05      	ldr	r2, [sp, #20]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011d2a:	1995      	adds	r5, r2, r6
 8011d2c:	42ab      	cmp	r3, r5
 8011d2e:	dd59      	ble.n	8011de4 <GUI__DoAlphaBlending+0x178>
 8011d30:	1b5a      	subs	r2, r3, r5
 8011d32:	9206      	str	r2, [sp, #24]
 8011d34:	4614      	mov	r4, r2
 8011d36:	461d      	mov	r5, r3
 8011d38:	9b02      	ldr	r3, [sp, #8]
 8011d3a:	9907      	ldr	r1, [sp, #28]
 8011d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011d3e:	4434      	add	r4, r6
 8011d40:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011d44:	9b08      	ldr	r3, [sp, #32]
 8011d46:	9301      	str	r3, [sp, #4]
 8011d48:	9400      	str	r4, [sp, #0]
 8011d4a:	460b      	mov	r3, r1
 8011d4c:	4628      	mov	r0, r5
 8011d4e:	f002 f8d1 	bl	8013ef4 <GUI_ReadRectEx>
 8011d52:	9b04      	ldr	r3, [sp, #16]
 8011d54:	2b17      	cmp	r3, #23
 8011d56:	dd7e      	ble.n	8011e56 <GUI__DoAlphaBlending+0x1ea>
 8011d58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d044      	beq.n	8011de8 <GUI__DoAlphaBlending+0x17c>
 8011d5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d60:	9606      	str	r6, [sp, #24]
 8011d62:	1b5d      	subs	r5, r3, r5
 8011d64:	462e      	mov	r6, r5
 8011d66:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8011d68:	6820      	ldr	r0, [r4, #0]
 8011d6a:	47a8      	blx	r5
 8011d6c:	3e01      	subs	r6, #1
 8011d6e:	f844 0b04 	str.w	r0, [r4], #4
 8011d72:	d1f9      	bne.n	8011d68 <GUI__DoAlphaBlending+0xfc>
 8011d74:	9e06      	ldr	r6, [sp, #24]
 8011d76:	2401      	movs	r4, #1
 8011d78:	4b54      	ldr	r3, [pc, #336]	; (8011ecc <GUI__DoAlphaBlending+0x260>)
 8011d7a:	69dd      	ldr	r5, [r3, #28]
 8011d7c:	2d00      	cmp	r5, #0
 8011d7e:	d138      	bne.n	8011df2 <GUI__DoAlphaBlending+0x186>
 8011d80:	fa5f f288 	uxtb.w	r2, r8
 8011d84:	f1b8 0f00 	cmp.w	r8, #0
 8011d88:	d11a      	bne.n	8011dc0 <GUI__DoAlphaBlending+0x154>
 8011d8a:	9b02      	ldr	r3, [sp, #8]
 8011d8c:	9a03      	ldr	r2, [sp, #12]
 8011d8e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8011d92:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8011d96:	f1ba 0a01 	subs.w	sl, sl, #1
 8011d9a:	f106 0601 	add.w	r6, r6, #1
 8011d9e:	46bb      	mov	fp, r7
 8011da0:	d1b1      	bne.n	8011d06 <GUI__DoAlphaBlending+0x9a>
 8011da2:	9c03      	ldr	r4, [sp, #12]
 8011da4:	4620      	mov	r0, r4
 8011da6:	b00f      	add	sp, #60	; 0x3c
 8011da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011dae:	9a03      	ldr	r2, [sp, #12]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
 8011db6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011db8:	f043 0301 	orr.w	r3, r3, #1
 8011dbc:	6013      	str	r3, [r2, #0]
 8011dbe:	e7ea      	b.n	8011d96 <GUI__DoAlphaBlending+0x12a>
 8011dc0:	9902      	ldr	r1, [sp, #8]
 8011dc2:	4b48      	ldr	r3, [pc, #288]	; (8011ee4 <GUI__DoAlphaBlending+0x278>)
 8011dc4:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	f049 407f 	orr.w	r0, r9, #4278190080	; 0xff000000
 8011dce:	4798      	blx	r3
 8011dd0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011dd2:	9a03      	ldr	r2, [sp, #12]
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
 8011dda:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011ddc:	f043 0301 	orr.w	r3, r3, #1
 8011de0:	6013      	str	r3, [r2, #0]
 8011de2:	e7d8      	b.n	8011d96 <GUI__DoAlphaBlending+0x12a>
 8011de4:	9406      	str	r4, [sp, #24]
 8011de6:	e7a7      	b.n	8011d38 <GUI__DoAlphaBlending+0xcc>
 8011de8:	4b38      	ldr	r3, [pc, #224]	; (8011ecc <GUI__DoAlphaBlending+0x260>)
 8011dea:	69dd      	ldr	r5, [r3, #28]
 8011dec:	2401      	movs	r4, #1
 8011dee:	2d00      	cmp	r5, #0
 8011df0:	d0c6      	beq.n	8011d80 <GUI__DoAlphaBlending+0x114>
 8011df2:	9b02      	ldr	r3, [sp, #8]
 8011df4:	00b6      	lsls	r6, r6, #2
 8011df6:	4433      	add	r3, r6
 8011df8:	461c      	mov	r4, r3
 8011dfa:	9b03      	ldr	r3, [sp, #12]
 8011dfc:	441e      	add	r6, r3
 8011dfe:	4632      	mov	r2, r6
 8011e00:	4621      	mov	r1, r4
 8011e02:	4653      	mov	r3, sl
 8011e04:	4658      	mov	r0, fp
 8011e06:	47a8      	blx	r5
 8011e08:	4657      	mov	r7, sl
 8011e0a:	f1ab 0204 	sub.w	r2, fp, #4
 8011e0e:	e007      	b.n	8011e20 <GUI__DoAlphaBlending+0x1b4>
 8011e10:	6823      	ldr	r3, [r4, #0]
 8011e12:	6033      	str	r3, [r6, #0]
 8011e14:	3f01      	subs	r7, #1
 8011e16:	f104 0404 	add.w	r4, r4, #4
 8011e1a:	f106 0604 	add.w	r6, r6, #4
 8011e1e:	d00f      	beq.n	8011e40 <GUI__DoAlphaBlending+0x1d4>
 8011e20:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8011e24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8011e28:	d0f2      	beq.n	8011e10 <GUI__DoAlphaBlending+0x1a4>
 8011e2a:	6821      	ldr	r1, [r4, #0]
 8011e2c:	f011 4f7f 	tst.w	r1, #4278190080	; 0xff000000
 8011e30:	bf08      	it	eq
 8011e32:	6033      	streq	r3, [r6, #0]
 8011e34:	3f01      	subs	r7, #1
 8011e36:	f104 0404 	add.w	r4, r4, #4
 8011e3a:	f106 0604 	add.w	r6, r6, #4
 8011e3e:	d1ef      	bne.n	8011e20 <GUI__DoAlphaBlending+0x1b4>
 8011e40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011e42:	9c03      	ldr	r4, [sp, #12]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011e48:	f043 0301 	orr.w	r3, r3, #1
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	6013      	str	r3, [r2, #0]
 8011e50:	b00f      	add	sp, #60	; 0x3c
 8011e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e56:	461a      	mov	r2, r3
 8011e58:	9b06      	ldr	r3, [sp, #24]
 8011e5a:	4620      	mov	r0, r4
 8011e5c:	ebc3 010a 	rsb	r1, r3, sl
 8011e60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e62:	f000 f909 	bl	8012078 <GUI__ExpandPixelIndicesEx>
 8011e66:	2401      	movs	r4, #1
 8011e68:	e786      	b.n	8011d78 <GUI__DoAlphaBlending+0x10c>
 8011e6a:	4818      	ldr	r0, [pc, #96]	; (8011ecc <GUI__DoAlphaBlending+0x260>)
 8011e6c:	4b1e      	ldr	r3, [pc, #120]	; (8011ee8 <GUI__DoAlphaBlending+0x27c>)
 8011e6e:	4a17      	ldr	r2, [pc, #92]	; (8011ecc <GUI__DoAlphaBlending+0x260>)
 8011e70:	f840 3f14 	str.w	r3, [r0, #20]!
 8011e74:	2301      	movs	r3, #1
 8011e76:	6113      	str	r3, [r2, #16]
 8011e78:	f7fe fc4c 	bl	8010714 <GUI__RegisterExit>
 8011e7c:	e705      	b.n	8011c8a <GUI__DoAlphaBlending+0x1e>
 8011e7e:	f001 fb69 	bl	8013554 <LCD_GetVXSizeMax>
 8011e82:	4607      	mov	r7, r0
 8011e84:	60e0      	str	r0, [r4, #12]
 8011e86:	e70a      	b.n	8011c9e <GUI__DoAlphaBlending+0x32>
 8011e88:	2300      	movs	r3, #0
 8011e8a:	930a      	str	r3, [sp, #40]	; 0x28
 8011e8c:	e733      	b.n	8011cf6 <GUI__DoAlphaBlending+0x8a>
 8011e8e:	68e0      	ldr	r0, [r4, #12]
 8011e90:	0080      	lsls	r0, r0, #2
 8011e92:	f7fd fc39 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8011e96:	9003      	str	r0, [sp, #12]
 8011e98:	6060      	str	r0, [r4, #4]
 8011e9a:	2800      	cmp	r0, #0
 8011e9c:	f47f af0d 	bne.w	8011cba <GUI__DoAlphaBlending+0x4e>
 8011ea0:	2400      	movs	r4, #0
 8011ea2:	4620      	mov	r0, r4
 8011ea4:	b00f      	add	sp, #60	; 0x3c
 8011ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eaa:	00b8      	lsls	r0, r7, #2
 8011eac:	f7fd fc2c 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8011eb0:	6030      	str	r0, [r6, #0]
 8011eb2:	b108      	cbz	r0, 8011eb8 <GUI__DoAlphaBlending+0x24c>
 8011eb4:	9002      	str	r0, [sp, #8]
 8011eb6:	e6f9      	b.n	8011cac <GUI__DoAlphaBlending+0x40>
 8011eb8:	6874      	ldr	r4, [r6, #4]
 8011eba:	2c00      	cmp	r4, #0
 8011ebc:	d1f0      	bne.n	8011ea0 <GUI__DoAlphaBlending+0x234>
 8011ebe:	68f0      	ldr	r0, [r6, #12]
 8011ec0:	0080      	lsls	r0, r0, #2
 8011ec2:	f7fd fc21 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8011ec6:	6070      	str	r0, [r6, #4]
 8011ec8:	e76c      	b.n	8011da4 <GUI__DoAlphaBlending+0x138>
 8011eca:	bf00      	nop
 8011ecc:	2002e33c 	.word	0x2002e33c
 8011ed0:	20030878 	.word	0x20030878
 8011ed4:	200000a8 	.word	0x200000a8
 8011ed8:	20030870 	.word	0x20030870
 8011edc:	0800ed8d 	.word	0x0800ed8d
 8011ee0:	0800ed91 	.word	0x0800ed91
 8011ee4:	200000c0 	.word	0x200000c0
 8011ee8:	08011c45 	.word	0x08011c45

08011eec <GUI__GetAlphaBuffer>:
 8011eec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ef0:	4c2d      	ldr	r4, [pc, #180]	; (8011fa8 <GUI__GetAlphaBuffer+0xbc>)
 8011ef2:	6927      	ldr	r7, [r4, #16]
 8011ef4:	b083      	sub	sp, #12
 8011ef6:	4605      	mov	r5, r0
 8011ef8:	4688      	mov	r8, r1
 8011efa:	4616      	mov	r6, r2
 8011efc:	4699      	mov	r9, r3
 8011efe:	b31f      	cbz	r7, 8011f48 <GUI__GetAlphaBuffer+0x5c>
 8011f00:	68e0      	ldr	r0, [r4, #12]
 8011f02:	4f29      	ldr	r7, [pc, #164]	; (8011fa8 <GUI__GetAlphaBuffer+0xbc>)
 8011f04:	b918      	cbnz	r0, 8011f0e <GUI__GetAlphaBuffer+0x22>
 8011f06:	4b29      	ldr	r3, [pc, #164]	; (8011fac <GUI__GetAlphaBuffer+0xc0>)
 8011f08:	6818      	ldr	r0, [r3, #0]
 8011f0a:	60f8      	str	r0, [r7, #12]
 8011f0c:	b328      	cbz	r0, 8011f5a <GUI__GetAlphaBuffer+0x6e>
 8011f0e:	f1b9 0f00 	cmp.w	r9, #0
 8011f12:	d001      	beq.n	8011f18 <GUI__GetAlphaBuffer+0x2c>
 8011f14:	f8c9 0000 	str.w	r0, [r9]
 8011f18:	b31d      	cbz	r5, 8011f62 <GUI__GetAlphaBuffer+0x76>
 8011f1a:	6823      	ldr	r3, [r4, #0]
 8011f1c:	4a22      	ldr	r2, [pc, #136]	; (8011fa8 <GUI__GetAlphaBuffer+0xbc>)
 8011f1e:	2700      	movs	r7, #0
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d036      	beq.n	8011f92 <GUI__GetAlphaBuffer+0xa6>
 8011f24:	602b      	str	r3, [r5, #0]
 8011f26:	f1b8 0f00 	cmp.w	r8, #0
 8011f2a:	d004      	beq.n	8011f36 <GUI__GetAlphaBuffer+0x4a>
 8011f2c:	6865      	ldr	r5, [r4, #4]
 8011f2e:	4b1e      	ldr	r3, [pc, #120]	; (8011fa8 <GUI__GetAlphaBuffer+0xbc>)
 8011f30:	b31d      	cbz	r5, 8011f7a <GUI__GetAlphaBuffer+0x8e>
 8011f32:	f8c8 5000 	str.w	r5, [r8]
 8011f36:	b11e      	cbz	r6, 8011f40 <GUI__GetAlphaBuffer+0x54>
 8011f38:	68a4      	ldr	r4, [r4, #8]
 8011f3a:	4d1b      	ldr	r5, [pc, #108]	; (8011fa8 <GUI__GetAlphaBuffer+0xbc>)
 8011f3c:	b19c      	cbz	r4, 8011f66 <GUI__GetAlphaBuffer+0x7a>
 8011f3e:	6034      	str	r4, [r6, #0]
 8011f40:	4638      	mov	r0, r7
 8011f42:	b003      	add	sp, #12
 8011f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f48:	4620      	mov	r0, r4
 8011f4a:	4b19      	ldr	r3, [pc, #100]	; (8011fb0 <GUI__GetAlphaBuffer+0xc4>)
 8011f4c:	f840 3f14 	str.w	r3, [r0, #20]!
 8011f50:	2301      	movs	r3, #1
 8011f52:	6123      	str	r3, [r4, #16]
 8011f54:	f7fe fbde 	bl	8010714 <GUI__RegisterExit>
 8011f58:	e7d2      	b.n	8011f00 <GUI__GetAlphaBuffer+0x14>
 8011f5a:	f001 fafb 	bl	8013554 <LCD_GetVXSizeMax>
 8011f5e:	60f8      	str	r0, [r7, #12]
 8011f60:	e7d5      	b.n	8011f0e <GUI__GetAlphaBuffer+0x22>
 8011f62:	462f      	mov	r7, r5
 8011f64:	e7df      	b.n	8011f26 <GUI__GetAlphaBuffer+0x3a>
 8011f66:	68e8      	ldr	r0, [r5, #12]
 8011f68:	0080      	lsls	r0, r0, #2
 8011f6a:	f7fd fbcd 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8011f6e:	2800      	cmp	r0, #0
 8011f70:	bf0c      	ite	eq
 8011f72:	2701      	moveq	r7, #1
 8011f74:	4604      	movne	r4, r0
 8011f76:	60a8      	str	r0, [r5, #8]
 8011f78:	e7e1      	b.n	8011f3e <GUI__GetAlphaBuffer+0x52>
 8011f7a:	68d8      	ldr	r0, [r3, #12]
 8011f7c:	9301      	str	r3, [sp, #4]
 8011f7e:	0080      	lsls	r0, r0, #2
 8011f80:	f7fd fbc2 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8011f84:	9b01      	ldr	r3, [sp, #4]
 8011f86:	2800      	cmp	r0, #0
 8011f88:	bf0c      	ite	eq
 8011f8a:	2701      	moveq	r7, #1
 8011f8c:	4605      	movne	r5, r0
 8011f8e:	6058      	str	r0, [r3, #4]
 8011f90:	e7cf      	b.n	8011f32 <GUI__GetAlphaBuffer+0x46>
 8011f92:	0080      	lsls	r0, r0, #2
 8011f94:	9201      	str	r2, [sp, #4]
 8011f96:	f7fd fbb7 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8011f9a:	9a01      	ldr	r2, [sp, #4]
 8011f9c:	fab0 f780 	clz	r7, r0
 8011fa0:	6010      	str	r0, [r2, #0]
 8011fa2:	097f      	lsrs	r7, r7, #5
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	e7bd      	b.n	8011f24 <GUI__GetAlphaBuffer+0x38>
 8011fa8:	2002e33c 	.word	0x2002e33c
 8011fac:	20030878 	.word	0x20030878
 8011fb0:	08011c45 	.word	0x08011c45

08011fb4 <GUI__AllocAlphaBuffer>:
 8011fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fb6:	b083      	sub	sp, #12
 8011fb8:	b9c0      	cbnz	r0, 8011fec <GUI__AllocAlphaBuffer+0x38>
 8011fba:	4c22      	ldr	r4, [pc, #136]	; (8012044 <GUI__AllocAlphaBuffer+0x90>)
 8011fbc:	6923      	ldr	r3, [r4, #16]
 8011fbe:	4605      	mov	r5, r0
 8011fc0:	b1cb      	cbz	r3, 8011ff6 <GUI__AllocAlphaBuffer+0x42>
 8011fc2:	68e0      	ldr	r0, [r4, #12]
 8011fc4:	4e1f      	ldr	r6, [pc, #124]	; (8012044 <GUI__AllocAlphaBuffer+0x90>)
 8011fc6:	b918      	cbnz	r0, 8011fd0 <GUI__AllocAlphaBuffer+0x1c>
 8011fc8:	4b1f      	ldr	r3, [pc, #124]	; (8012048 <GUI__AllocAlphaBuffer+0x94>)
 8011fca:	6818      	ldr	r0, [r3, #0]
 8011fcc:	60f0      	str	r0, [r6, #12]
 8011fce:	b1d8      	cbz	r0, 8012008 <GUI__AllocAlphaBuffer+0x54>
 8011fd0:	6823      	ldr	r3, [r4, #0]
 8011fd2:	4f1c      	ldr	r7, [pc, #112]	; (8012044 <GUI__AllocAlphaBuffer+0x90>)
 8011fd4:	2600      	movs	r6, #0
 8011fd6:	b323      	cbz	r3, 8012022 <GUI__AllocAlphaBuffer+0x6e>
 8011fd8:	6863      	ldr	r3, [r4, #4]
 8011fda:	4f1a      	ldr	r7, [pc, #104]	; (8012044 <GUI__AllocAlphaBuffer+0x90>)
 8011fdc:	b1c3      	cbz	r3, 8012010 <GUI__AllocAlphaBuffer+0x5c>
 8011fde:	b115      	cbz	r5, 8011fe6 <GUI__AllocAlphaBuffer+0x32>
 8011fe0:	68a3      	ldr	r3, [r4, #8]
 8011fe2:	4c18      	ldr	r4, [pc, #96]	; (8012044 <GUI__AllocAlphaBuffer+0x90>)
 8011fe4:	b32b      	cbz	r3, 8012032 <GUI__AllocAlphaBuffer+0x7e>
 8011fe6:	4630      	mov	r0, r6
 8011fe8:	b003      	add	sp, #12
 8011fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fec:	4c15      	ldr	r4, [pc, #84]	; (8012044 <GUI__AllocAlphaBuffer+0x90>)
 8011fee:	6923      	ldr	r3, [r4, #16]
 8011ff0:	ad01      	add	r5, sp, #4
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d1e5      	bne.n	8011fc2 <GUI__AllocAlphaBuffer+0xe>
 8011ff6:	4620      	mov	r0, r4
 8011ff8:	4b14      	ldr	r3, [pc, #80]	; (801204c <GUI__AllocAlphaBuffer+0x98>)
 8011ffa:	f840 3f14 	str.w	r3, [r0, #20]!
 8011ffe:	2301      	movs	r3, #1
 8012000:	6123      	str	r3, [r4, #16]
 8012002:	f7fe fb87 	bl	8010714 <GUI__RegisterExit>
 8012006:	e7dc      	b.n	8011fc2 <GUI__AllocAlphaBuffer+0xe>
 8012008:	f001 faa4 	bl	8013554 <LCD_GetVXSizeMax>
 801200c:	60f0      	str	r0, [r6, #12]
 801200e:	e7df      	b.n	8011fd0 <GUI__AllocAlphaBuffer+0x1c>
 8012010:	68f8      	ldr	r0, [r7, #12]
 8012012:	0080      	lsls	r0, r0, #2
 8012014:	f7fd fb78 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8012018:	2800      	cmp	r0, #0
 801201a:	bf08      	it	eq
 801201c:	2601      	moveq	r6, #1
 801201e:	6078      	str	r0, [r7, #4]
 8012020:	e7dd      	b.n	8011fde <GUI__AllocAlphaBuffer+0x2a>
 8012022:	0080      	lsls	r0, r0, #2
 8012024:	f7fd fb70 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8012028:	fab0 f680 	clz	r6, r0
 801202c:	6038      	str	r0, [r7, #0]
 801202e:	0976      	lsrs	r6, r6, #5
 8012030:	e7d2      	b.n	8011fd8 <GUI__AllocAlphaBuffer+0x24>
 8012032:	68e0      	ldr	r0, [r4, #12]
 8012034:	0080      	lsls	r0, r0, #2
 8012036:	f7fd fb67 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 801203a:	2800      	cmp	r0, #0
 801203c:	bf08      	it	eq
 801203e:	2601      	moveq	r6, #1
 8012040:	60a0      	str	r0, [r4, #8]
 8012042:	e7d0      	b.n	8011fe6 <GUI__AllocAlphaBuffer+0x32>
 8012044:	2002e33c 	.word	0x2002e33c
 8012048:	20030878 	.word	0x20030878
 801204c:	08011c45 	.word	0x08011c45

08012050 <GUI_SetFuncDrawAlpha>:
 8012050:	b410      	push	{r4}
 8012052:	b148      	cbz	r0, 8012068 <GUI_SetFuncDrawAlpha+0x18>
 8012054:	b149      	cbz	r1, 801206a <GUI_SetFuncDrawAlpha+0x1a>
 8012056:	4603      	mov	r3, r0
 8012058:	2000      	movs	r0, #0
 801205a:	4c05      	ldr	r4, [pc, #20]	; (8012070 <GUI_SetFuncDrawAlpha+0x20>)
 801205c:	4a05      	ldr	r2, [pc, #20]	; (8012074 <GUI_SetFuncDrawAlpha+0x24>)
 801205e:	6021      	str	r1, [r4, #0]
 8012060:	6013      	str	r3, [r2, #0]
 8012062:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012066:	4770      	bx	lr
 8012068:	4601      	mov	r1, r0
 801206a:	460b      	mov	r3, r1
 801206c:	2001      	movs	r0, #1
 801206e:	e7f4      	b.n	801205a <GUI_SetFuncDrawAlpha+0xa>
 8012070:	20030880 	.word	0x20030880
 8012074:	20030884 	.word	0x20030884

08012078 <GUI__ExpandPixelIndicesEx>:
 8012078:	2900      	cmp	r1, #0
 801207a:	dd2a      	ble.n	80120d2 <GUI__ExpandPixelIndicesEx+0x5a>
 801207c:	2a08      	cmp	r2, #8
 801207e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012082:	4604      	mov	r4, r0
 8012084:	685e      	ldr	r6, [r3, #4]
 8012086:	dd03      	ble.n	8012090 <GUI__ExpandPixelIndicesEx+0x18>
 8012088:	2a10      	cmp	r2, #16
 801208a:	dd0c      	ble.n	80120a6 <GUI__ExpandPixelIndicesEx+0x2e>
 801208c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012090:	1e53      	subs	r3, r2, #1
 8012092:	2b07      	cmp	r3, #7
 8012094:	d805      	bhi.n	80120a2 <GUI__ExpandPixelIndicesEx+0x2a>
 8012096:	e8df f003 	tbb	[pc, r3]
 801209a:	532a      	.short	0x532a
 801209c:	04047c04 	.word	0x04047c04
 80120a0:	1d04      	.short	0x1d04
 80120a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120a6:	695d      	ldr	r5, [r3, #20]
 80120a8:	b135      	cbz	r5, 80120b8 <GUI__ExpandPixelIndicesEx+0x40>
 80120aa:	460a      	mov	r2, r1
 80120ac:	46ac      	mov	ip, r5
 80120ae:	4621      	mov	r1, r4
 80120b0:	2302      	movs	r3, #2
 80120b2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120b6:	4760      	bx	ip
 80120b8:	0049      	lsls	r1, r1, #1
 80120ba:	440c      	add	r4, r1
 80120bc:	1865      	adds	r5, r4, r1
 80120be:	1a67      	subs	r7, r4, r1
 80120c0:	f834 0d02 	ldrh.w	r0, [r4, #-2]!
 80120c4:	47b0      	blx	r6
 80120c6:	42bc      	cmp	r4, r7
 80120c8:	f845 0d04 	str.w	r0, [r5, #-4]!
 80120cc:	d1f8      	bne.n	80120c0 <GUI__ExpandPixelIndicesEx+0x48>
 80120ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120d2:	4770      	bx	lr
 80120d4:	1865      	adds	r5, r4, r1
 80120d6:	1a6f      	subs	r7, r5, r1
 80120d8:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80120dc:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 80120e0:	47b0      	blx	r6
 80120e2:	42bd      	cmp	r5, r7
 80120e4:	f844 0d04 	str.w	r0, [r4, #-4]!
 80120e8:	d1f8      	bne.n	80120dc <GUI__ExpandPixelIndicesEx+0x64>
 80120ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120ee:	1e4f      	subs	r7, r1, #1
 80120f0:	10fb      	asrs	r3, r7, #3
 80120f2:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80120f6:	f007 0a07 	and.w	sl, r7, #7
 80120fa:	f04f 0880 	mov.w	r8, #128	; 0x80
 80120fe:	3901      	subs	r1, #1
 8012100:	1e5a      	subs	r2, r3, #1
 8012102:	fa48 f80a 	asr.w	r8, r8, sl
 8012106:	f814 9003 	ldrb.w	r9, [r4, r3]
 801210a:	eb04 0581 	add.w	r5, r4, r1, lsl #2
 801210e:	fa5f f888 	uxtb.w	r8, r8
 8012112:	4414      	add	r4, r2
 8012114:	f1ca 0307 	rsb	r3, sl, #7
 8012118:	ea08 0009 	and.w	r0, r8, r9
 801211c:	4118      	asrs	r0, r3
 801211e:	47b0      	blx	r6
 8012120:	f845 0904 	str.w	r0, [r5], #-4
 8012124:	f1ba 0f00 	cmp.w	sl, #0
 8012128:	d15f      	bne.n	80121ea <GUI__ExpandPixelIndicesEx+0x172>
 801212a:	f894 9000 	ldrb.w	r9, [r4]
 801212e:	f04f 0801 	mov.w	r8, #1
 8012132:	3c01      	subs	r4, #1
 8012134:	f04f 0a07 	mov.w	sl, #7
 8012138:	2f00      	cmp	r7, #0
 801213a:	d0b2      	beq.n	80120a2 <GUI__ExpandPixelIndicesEx+0x2a>
 801213c:	3f01      	subs	r7, #1
 801213e:	e7e9      	b.n	8012114 <GUI__ExpandPixelIndicesEx+0x9c>
 8012140:	1e4f      	subs	r7, r1, #1
 8012142:	f007 0903 	and.w	r9, r7, #3
 8012146:	10bb      	asrs	r3, r7, #2
 8012148:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 801214c:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8012150:	25c0      	movs	r5, #192	; 0xc0
 8012152:	3901      	subs	r1, #1
 8012154:	4105      	asrs	r5, r0
 8012156:	1e5a      	subs	r2, r3, #1
 8012158:	f814 8003 	ldrb.w	r8, [r4, r3]
 801215c:	eb04 0a81 	add.w	sl, r4, r1, lsl #2
 8012160:	b2ed      	uxtb	r5, r5
 8012162:	4414      	add	r4, r2
 8012164:	ea05 0308 	and.w	r3, r5, r8
 8012168:	f1c0 0006 	rsb	r0, r0, #6
 801216c:	fa43 f000 	asr.w	r0, r3, r0
 8012170:	47b0      	blx	r6
 8012172:	f84a 0904 	str.w	r0, [sl], #-4
 8012176:	f1b9 0f00 	cmp.w	r9, #0
 801217a:	d144      	bne.n	8012206 <GUI__ExpandPixelIndicesEx+0x18e>
 801217c:	2503      	movs	r5, #3
 801217e:	f894 8000 	ldrb.w	r8, [r4]
 8012182:	46a9      	mov	r9, r5
 8012184:	3c01      	subs	r4, #1
 8012186:	2f00      	cmp	r7, #0
 8012188:	d08b      	beq.n	80120a2 <GUI__ExpandPixelIndicesEx+0x2a>
 801218a:	3f01      	subs	r7, #1
 801218c:	ea4f 0049 	mov.w	r0, r9, lsl #1
 8012190:	e7e8      	b.n	8012164 <GUI__ExpandPixelIndicesEx+0xec>
 8012192:	1e4f      	subs	r7, r1, #1
 8012194:	f007 0801 	and.w	r8, r7, #1
 8012198:	107a      	asrs	r2, r7, #1
 801219a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 801219e:	ea4f 0088 	mov.w	r0, r8, lsl #2
 80121a2:	23f0      	movs	r3, #240	; 0xf0
 80121a4:	3901      	subs	r1, #1
 80121a6:	4103      	asrs	r3, r0
 80121a8:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
 80121ac:	5ca5      	ldrb	r5, [r4, r2]
 80121ae:	eb04 0981 	add.w	r9, r4, r1, lsl #2
 80121b2:	fa5f fa83 	uxtb.w	sl, r3
 80121b6:	4474      	add	r4, lr
 80121b8:	ea0a 0305 	and.w	r3, sl, r5
 80121bc:	f1c0 0004 	rsb	r0, r0, #4
 80121c0:	fa43 f000 	asr.w	r0, r3, r0
 80121c4:	47b0      	blx	r6
 80121c6:	f849 0904 	str.w	r0, [r9], #-4
 80121ca:	f1b8 0f00 	cmp.w	r8, #0
 80121ce:	d113      	bne.n	80121f8 <GUI__ExpandPixelIndicesEx+0x180>
 80121d0:	7825      	ldrb	r5, [r4, #0]
 80121d2:	f04f 0a0f 	mov.w	sl, #15
 80121d6:	3c01      	subs	r4, #1
 80121d8:	f04f 0801 	mov.w	r8, #1
 80121dc:	2f00      	cmp	r7, #0
 80121de:	f43f af60 	beq.w	80120a2 <GUI__ExpandPixelIndicesEx+0x2a>
 80121e2:	3f01      	subs	r7, #1
 80121e4:	ea4f 0088 	mov.w	r0, r8, lsl #2
 80121e8:	e7e6      	b.n	80121b8 <GUI__ExpandPixelIndicesEx+0x140>
 80121ea:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80121ee:	fa5f f888 	uxtb.w	r8, r8
 80121f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80121f6:	e79f      	b.n	8012138 <GUI__ExpandPixelIndicesEx+0xc0>
 80121f8:	ea4f 130a 	mov.w	r3, sl, lsl #4
 80121fc:	fa5f fa83 	uxtb.w	sl, r3
 8012200:	f04f 0800 	mov.w	r8, #0
 8012204:	e7ea      	b.n	80121dc <GUI__ExpandPixelIndicesEx+0x164>
 8012206:	00ad      	lsls	r5, r5, #2
 8012208:	b2ed      	uxtb	r5, r5
 801220a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 801220e:	e7ba      	b.n	8012186 <GUI__ExpandPixelIndicesEx+0x10e>

08012210 <GUI__HandleEOLine>:
 8012210:	b510      	push	{r4, lr}
 8012212:	4604      	mov	r4, r0
 8012214:	b082      	sub	sp, #8
 8012216:	a802      	add	r0, sp, #8
 8012218:	6823      	ldr	r3, [r4, #0]
 801221a:	f840 3d04 	str.w	r3, [r0, #-4]!
 801221e:	f7ff fb4f 	bl	80118c0 <GUI_UC__GetCharCodeInc>
 8012222:	b148      	cbz	r0, 8012238 <GUI__HandleEOLine+0x28>
 8012224:	280a      	cmp	r0, #10
 8012226:	d002      	beq.n	801222e <GUI__HandleEOLine+0x1e>
 8012228:	2000      	movs	r0, #0
 801222a:	b002      	add	sp, #8
 801222c:	bd10      	pop	{r4, pc}
 801222e:	9b01      	ldr	r3, [sp, #4]
 8012230:	6023      	str	r3, [r4, #0]
 8012232:	2000      	movs	r0, #0
 8012234:	b002      	add	sp, #8
 8012236:	bd10      	pop	{r4, pc}
 8012238:	2001      	movs	r0, #1
 801223a:	b002      	add	sp, #8
 801223c:	bd10      	pop	{r4, pc}
 801223e:	bf00      	nop

08012240 <GUI__IntersectRect>:
 8012240:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012244:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012248:	429a      	cmp	r2, r3
 801224a:	bfb8      	it	lt
 801224c:	8003      	strhlt	r3, [r0, #0]
 801224e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012252:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012256:	429a      	cmp	r2, r3
 8012258:	bfb8      	it	lt
 801225a:	8043      	strhlt	r3, [r0, #2]
 801225c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8012260:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8012264:	429a      	cmp	r2, r3
 8012266:	bfc8      	it	gt
 8012268:	8083      	strhgt	r3, [r0, #4]
 801226a:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801226e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8012272:	429a      	cmp	r2, r3
 8012274:	bfc8      	it	gt
 8012276:	80c3      	strhgt	r3, [r0, #6]
 8012278:	4770      	bx	lr
 801227a:	bf00      	nop

0801227c <GUI__IntersectRects>:
 801227c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801227e:	f9b2 c000 	ldrsh.w	ip, [r2]
 8012282:	f9b1 5000 	ldrsh.w	r5, [r1]
 8012286:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801228a:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 801228e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8012292:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8012296:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801229a:	f9b1 6006 	ldrsh.w	r6, [r1, #6]
 801229e:	45ac      	cmp	ip, r5
 80122a0:	4661      	mov	r1, ip
 80122a2:	bfb8      	it	lt
 80122a4:	4629      	movlt	r1, r5
 80122a6:	42a3      	cmp	r3, r4
 80122a8:	bfb8      	it	lt
 80122aa:	4623      	movlt	r3, r4
 80122ac:	4572      	cmp	r2, lr
 80122ae:	bfa8      	it	ge
 80122b0:	4672      	movge	r2, lr
 80122b2:	42b7      	cmp	r7, r6
 80122b4:	463c      	mov	r4, r7
 80122b6:	bfa8      	it	ge
 80122b8:	4634      	movge	r4, r6
 80122ba:	4291      	cmp	r1, r2
 80122bc:	8001      	strh	r1, [r0, #0]
 80122be:	8043      	strh	r3, [r0, #2]
 80122c0:	8082      	strh	r2, [r0, #4]
 80122c2:	80c4      	strh	r4, [r0, #6]
 80122c4:	dc04      	bgt.n	80122d0 <GUI__IntersectRects+0x54>
 80122c6:	42a3      	cmp	r3, r4
 80122c8:	bfcc      	ite	gt
 80122ca:	2000      	movgt	r0, #0
 80122cc:	2001      	movle	r0, #1
 80122ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122d0:	2000      	movs	r0, #0
 80122d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080122d4 <GUI__memset>:
 80122d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122d6:	4606      	mov	r6, r0
 80122d8:	b14a      	cbz	r2, 80122ee <GUI__memset+0x1a>
 80122da:	0784      	lsls	r4, r0, #30
 80122dc:	b2c9      	uxtb	r1, r1
 80122de:	d008      	beq.n	80122f2 <GUI__memset+0x1e>
 80122e0:	e001      	b.n	80122e6 <GUI__memset+0x12>
 80122e2:	0783      	lsls	r3, r0, #30
 80122e4:	d005      	beq.n	80122f2 <GUI__memset+0x1e>
 80122e6:	3a01      	subs	r2, #1
 80122e8:	f800 1b01 	strb.w	r1, [r0], #1
 80122ec:	d1f9      	bne.n	80122e2 <GUI__memset+0xe>
 80122ee:	4630      	mov	r0, r6
 80122f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122f2:	0897      	lsrs	r7, r2, #2
 80122f4:	463b      	mov	r3, r7
 80122f6:	b357      	cbz	r7, 801234e <GUI__memset+0x7a>
 80122f8:	eb01 2401 	add.w	r4, r1, r1, lsl #8
 80122fc:	2f03      	cmp	r7, #3
 80122fe:	f002 0203 	and.w	r2, r2, #3
 8012302:	eb04 4404 	add.w	r4, r4, r4, lsl #16
 8012306:	d916      	bls.n	8012336 <GUI__memset+0x62>
 8012308:	f100 0310 	add.w	r3, r0, #16
 801230c:	463d      	mov	r5, r7
 801230e:	3d04      	subs	r5, #4
 8012310:	2d03      	cmp	r5, #3
 8012312:	f843 4c10 	str.w	r4, [r3, #-16]
 8012316:	f843 4c0c 	str.w	r4, [r3, #-12]
 801231a:	f843 4c08 	str.w	r4, [r3, #-8]
 801231e:	f843 4c04 	str.w	r4, [r3, #-4]
 8012322:	f103 0310 	add.w	r3, r3, #16
 8012326:	dcf2      	bgt.n	801230e <GUI__memset+0x3a>
 8012328:	3f04      	subs	r7, #4
 801232a:	08bb      	lsrs	r3, r7, #2
 801232c:	1c5d      	adds	r5, r3, #1
 801232e:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8012332:	eba7 0383 	sub.w	r3, r7, r3, lsl #2
 8012336:	b143      	cbz	r3, 801234a <GUI__memset+0x76>
 8012338:	2b01      	cmp	r3, #1
 801233a:	6004      	str	r4, [r0, #0]
 801233c:	d003      	beq.n	8012346 <GUI__memset+0x72>
 801233e:	2b02      	cmp	r3, #2
 8012340:	6044      	str	r4, [r0, #4]
 8012342:	bf18      	it	ne
 8012344:	6084      	strne	r4, [r0, #8]
 8012346:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801234a:	2a00      	cmp	r2, #0
 801234c:	d0cf      	beq.n	80122ee <GUI__memset+0x1a>
 801234e:	f00c fba2 	bl	801ea96 <memset>
 8012352:	4630      	mov	r0, r6
 8012354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012356:	bf00      	nop

08012358 <GUI__ReduceRect>:
 8012358:	b470      	push	{r4, r5, r6}
 801235a:	88cb      	ldrh	r3, [r1, #6]
 801235c:	880e      	ldrh	r6, [r1, #0]
 801235e:	888d      	ldrh	r5, [r1, #4]
 8012360:	884c      	ldrh	r4, [r1, #2]
 8012362:	b292      	uxth	r2, r2
 8012364:	4416      	add	r6, r2
 8012366:	1aad      	subs	r5, r5, r2
 8012368:	4414      	add	r4, r2
 801236a:	1a9a      	subs	r2, r3, r2
 801236c:	8006      	strh	r6, [r0, #0]
 801236e:	8085      	strh	r5, [r0, #4]
 8012370:	8044      	strh	r4, [r0, #2]
 8012372:	80c2      	strh	r2, [r0, #6]
 8012374:	bc70      	pop	{r4, r5, r6}
 8012376:	4770      	bx	lr

08012378 <GUI__SetText>:
 8012378:	b5f0      	push	{r4, r5, r6, r7, lr}
 801237a:	6807      	ldr	r7, [r0, #0]
 801237c:	b083      	sub	sp, #12
 801237e:	4605      	mov	r5, r0
 8012380:	460e      	mov	r6, r1
 8012382:	b9cf      	cbnz	r7, 80123b8 <GUI__SetText+0x40>
 8012384:	2e00      	cmp	r6, #0
 8012386:	d058      	beq.n	801243a <GUI__SetText+0xc2>
 8012388:	4633      	mov	r3, r6
 801238a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801238e:	e000      	b.n	8012392 <GUI__SetText+0x1a>
 8012390:	4622      	mov	r2, r4
 8012392:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012396:	1c54      	adds	r4, r2, #1
 8012398:	2800      	cmp	r0, #0
 801239a:	d1f9      	bne.n	8012390 <GUI__SetText+0x18>
 801239c:	4638      	mov	r0, r7
 801239e:	1c94      	adds	r4, r2, #2
 80123a0:	f7fd fc78 	bl	800fc94 <GUI_ALLOC_GetSize>
 80123a4:	4284      	cmp	r4, r0
 80123a6:	d022      	beq.n	80123ee <GUI__SetText+0x76>
 80123a8:	4620      	mov	r0, r4
 80123aa:	f7fd fac5 	bl	800f938 <GUI_ALLOC_AllocNoInit>
 80123ae:	4607      	mov	r7, r0
 80123b0:	bb68      	cbnz	r0, 801240e <GUI__SetText+0x96>
 80123b2:	2000      	movs	r0, #0
 80123b4:	b003      	add	sp, #12
 80123b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80123b8:	4638      	mov	r0, r7
 80123ba:	f7fd fad5 	bl	800f968 <GUI_ALLOC_LockH>
 80123be:	4b22      	ldr	r3, [pc, #136]	; (8012448 <GUI__SetText+0xd0>)
 80123c0:	9001      	str	r0, [sp, #4]
 80123c2:	2e00      	cmp	r6, #0
 80123c4:	bf14      	ite	ne
 80123c6:	4632      	movne	r2, r6
 80123c8:	461a      	moveq	r2, r3
 80123ca:	2800      	cmp	r0, #0
 80123cc:	bf08      	it	eq
 80123ce:	4618      	moveq	r0, r3
 80123d0:	7813      	ldrb	r3, [r2, #0]
 80123d2:	7801      	ldrb	r1, [r0, #0]
 80123d4:	428b      	cmp	r3, r1
 80123d6:	d106      	bne.n	80123e6 <GUI__SetText+0x6e>
 80123d8:	b35b      	cbz	r3, 8012432 <GUI__SetText+0xba>
 80123da:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 80123de:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 80123e2:	428b      	cmp	r3, r1
 80123e4:	d0f8      	beq.n	80123d8 <GUI__SetText+0x60>
 80123e6:	a801      	add	r0, sp, #4
 80123e8:	f7fd fad0 	bl	800f98c <GUI_ALLOC_UnlockH>
 80123ec:	e7ca      	b.n	8012384 <GUI__SetText+0xc>
 80123ee:	4638      	mov	r0, r7
 80123f0:	f7fd faba 	bl	800f968 <GUI_ALLOC_LockH>
 80123f4:	ad02      	add	r5, sp, #8
 80123f6:	4b15      	ldr	r3, [pc, #84]	; (801244c <GUI__SetText+0xd4>)
 80123f8:	f845 0d04 	str.w	r0, [r5, #-4]!
 80123fc:	4622      	mov	r2, r4
 80123fe:	4631      	mov	r1, r6
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	4798      	blx	r3
 8012404:	4628      	mov	r0, r5
 8012406:	f7fd fac1 	bl	800f98c <GUI_ALLOC_UnlockH>
 801240a:	2001      	movs	r0, #1
 801240c:	e7d2      	b.n	80123b4 <GUI__SetText+0x3c>
 801240e:	f7fd faab 	bl	800f968 <GUI_ALLOC_LockH>
 8012412:	ac02      	add	r4, sp, #8
 8012414:	4631      	mov	r1, r6
 8012416:	f844 0d04 	str.w	r0, [r4, #-4]!
 801241a:	f00c fb44 	bl	801eaa6 <strcpy>
 801241e:	4620      	mov	r0, r4
 8012420:	f7fd fab4 	bl	800f98c <GUI_ALLOC_UnlockH>
 8012424:	4628      	mov	r0, r5
 8012426:	f7fd fc61 	bl	800fcec <GUI_ALLOC_FreePtr>
 801242a:	2001      	movs	r0, #1
 801242c:	602f      	str	r7, [r5, #0]
 801242e:	b003      	add	sp, #12
 8012430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012432:	a801      	add	r0, sp, #4
 8012434:	f7fd faaa 	bl	800f98c <GUI_ALLOC_UnlockH>
 8012438:	e7bb      	b.n	80123b2 <GUI__SetText+0x3a>
 801243a:	4638      	mov	r0, r7
 801243c:	f7fd fc2a 	bl	800fc94 <GUI_ALLOC_GetSize>
 8012440:	2800      	cmp	r0, #0
 8012442:	d0b6      	beq.n	80123b2 <GUI__SetText+0x3a>
 8012444:	4634      	mov	r4, r6
 8012446:	e7af      	b.n	80123a8 <GUI__SetText+0x30>
 8012448:	08032938 	.word	0x08032938
 801244c:	200000c8 	.word	0x200000c8

08012450 <GUI__sqrt32>:
 8012450:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8012454:	bf2b      	itete	cs
 8012456:	f04f 4300 	movcs.w	r3, #2147483648	; 0x80000000
 801245a:	2300      	movcc	r3, #0
 801245c:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8012460:	2200      	movcc	r2, #0
 8012462:	085b      	lsrs	r3, r3, #1
 8012464:	1a80      	subs	r0, r0, r2
 8012466:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 801246a:	4290      	cmp	r0, r2
 801246c:	f103 5100 	add.w	r1, r3, #536870912	; 0x20000000
 8012470:	bf28      	it	cs
 8012472:	460b      	movcs	r3, r1
 8012474:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8012478:	bf38      	it	cc
 801247a:	2200      	movcc	r2, #0
 801247c:	f103 6180 	add.w	r1, r3, #67108864	; 0x4000000
 8012480:	1a82      	subs	r2, r0, r2
 8012482:	428a      	cmp	r2, r1
 8012484:	f103 6000 	add.w	r0, r3, #134217728	; 0x8000000
 8012488:	bf2c      	ite	cs
 801248a:	4603      	movcs	r3, r0
 801248c:	2100      	movcc	r1, #0
 801248e:	085b      	lsrs	r3, r3, #1
 8012490:	1a50      	subs	r0, r2, r1
 8012492:	f103 7280 	add.w	r2, r3, #16777216	; 0x1000000
 8012496:	4290      	cmp	r0, r2
 8012498:	f103 7100 	add.w	r1, r3, #33554432	; 0x2000000
 801249c:	bf2c      	ite	cs
 801249e:	460b      	movcs	r3, r1
 80124a0:	2200      	movcc	r2, #0
 80124a2:	085b      	lsrs	r3, r3, #1
 80124a4:	1a81      	subs	r1, r0, r2
 80124a6:	f503 0280 	add.w	r2, r3, #4194304	; 0x400000
 80124aa:	4291      	cmp	r1, r2
 80124ac:	f503 0000 	add.w	r0, r3, #8388608	; 0x800000
 80124b0:	bf28      	it	cs
 80124b2:	4603      	movcs	r3, r0
 80124b4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80124b8:	bf38      	it	cc
 80124ba:	2200      	movcc	r2, #0
 80124bc:	1a8a      	subs	r2, r1, r2
 80124be:	f503 1180 	add.w	r1, r3, #1048576	; 0x100000
 80124c2:	428a      	cmp	r2, r1
 80124c4:	f503 1000 	add.w	r0, r3, #2097152	; 0x200000
 80124c8:	bf2c      	ite	cs
 80124ca:	4603      	movcs	r3, r0
 80124cc:	2100      	movcc	r1, #0
 80124ce:	085b      	lsrs	r3, r3, #1
 80124d0:	1a50      	subs	r0, r2, r1
 80124d2:	f503 2280 	add.w	r2, r3, #262144	; 0x40000
 80124d6:	4290      	cmp	r0, r2
 80124d8:	f503 2100 	add.w	r1, r3, #524288	; 0x80000
 80124dc:	bf2c      	ite	cs
 80124de:	460b      	movcs	r3, r1
 80124e0:	2200      	movcc	r2, #0
 80124e2:	085b      	lsrs	r3, r3, #1
 80124e4:	1a81      	subs	r1, r0, r2
 80124e6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80124ea:	4291      	cmp	r1, r2
 80124ec:	f503 3000 	add.w	r0, r3, #131072	; 0x20000
 80124f0:	bf28      	it	cs
 80124f2:	4603      	movcs	r3, r0
 80124f4:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80124f8:	bf38      	it	cc
 80124fa:	2200      	movcc	r2, #0
 80124fc:	1a8a      	subs	r2, r1, r2
 80124fe:	f503 4180 	add.w	r1, r3, #16384	; 0x4000
 8012502:	428a      	cmp	r2, r1
 8012504:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
 8012508:	bf2c      	ite	cs
 801250a:	4603      	movcs	r3, r0
 801250c:	2100      	movcc	r1, #0
 801250e:	085b      	lsrs	r3, r3, #1
 8012510:	1a50      	subs	r0, r2, r1
 8012512:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8012516:	4290      	cmp	r0, r2
 8012518:	f503 5100 	add.w	r1, r3, #8192	; 0x2000
 801251c:	bf2c      	ite	cs
 801251e:	460b      	movcs	r3, r1
 8012520:	2200      	movcc	r2, #0
 8012522:	085b      	lsrs	r3, r3, #1
 8012524:	1a81      	subs	r1, r0, r2
 8012526:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 801252a:	4291      	cmp	r1, r2
 801252c:	f503 6000 	add.w	r0, r3, #2048	; 0x800
 8012530:	bf28      	it	cs
 8012532:	4603      	movcs	r3, r0
 8012534:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8012538:	bf38      	it	cc
 801253a:	2200      	movcc	r2, #0
 801253c:	1a8a      	subs	r2, r1, r2
 801253e:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8012542:	428a      	cmp	r2, r1
 8012544:	f503 7000 	add.w	r0, r3, #512	; 0x200
 8012548:	bf2c      	ite	cs
 801254a:	4603      	movcs	r3, r0
 801254c:	2100      	movcc	r1, #0
 801254e:	085b      	lsrs	r3, r3, #1
 8012550:	1a50      	subs	r0, r2, r1
 8012552:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8012556:	4290      	cmp	r0, r2
 8012558:	f103 0180 	add.w	r1, r3, #128	; 0x80
 801255c:	bf2c      	ite	cs
 801255e:	460b      	movcs	r3, r1
 8012560:	2200      	movcc	r2, #0
 8012562:	085b      	lsrs	r3, r3, #1
 8012564:	1a81      	subs	r1, r0, r2
 8012566:	f103 0210 	add.w	r2, r3, #16
 801256a:	4291      	cmp	r1, r2
 801256c:	f103 0020 	add.w	r0, r3, #32
 8012570:	bf28      	it	cs
 8012572:	4603      	movcs	r3, r0
 8012574:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8012578:	bf38      	it	cc
 801257a:	2200      	movcc	r2, #0
 801257c:	1a8a      	subs	r2, r1, r2
 801257e:	1d19      	adds	r1, r3, #4
 8012580:	428a      	cmp	r2, r1
 8012582:	f103 0008 	add.w	r0, r3, #8
 8012586:	bf2c      	ite	cs
 8012588:	4603      	movcs	r3, r0
 801258a:	2100      	movcc	r1, #0
 801258c:	085b      	lsrs	r3, r3, #1
 801258e:	1a52      	subs	r2, r2, r1
 8012590:	1c58      	adds	r0, r3, #1
 8012592:	1c99      	adds	r1, r3, #2
 8012594:	4290      	cmp	r0, r2
 8012596:	bf94      	ite	ls
 8012598:	4608      	movls	r0, r1
 801259a:	4618      	movhi	r0, r3
 801259c:	0840      	lsrs	r0, r0, #1
 801259e:	4770      	bx	lr

080125a0 <_GetWordWrap>:
 80125a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125a4:	b083      	sub	sp, #12
 80125a6:	ad02      	add	r5, sp, #8
 80125a8:	460f      	mov	r7, r1
 80125aa:	f845 0d04 	str.w	r0, [r5, #-4]!
 80125ae:	4628      	mov	r0, r5
 80125b0:	9200      	str	r2, [sp, #0]
 80125b2:	f7ff f985 	bl	80118c0 <GUI_UC__GetCharCodeInc>
 80125b6:	f04f 0800 	mov.w	r8, #0
 80125ba:	4e34      	ldr	r6, [pc, #208]	; (801268c <_GetWordWrap+0xec>)
 80125bc:	4682      	mov	sl, r0
 80125be:	4644      	mov	r4, r8
 80125c0:	46c3      	mov	fp, r8
 80125c2:	46c1      	mov	r9, r8
 80125c4:	2800      	cmp	r0, #0
 80125c6:	d03a      	beq.n	801263e <_GetWordWrap+0x9e>
 80125c8:	280a      	cmp	r0, #10
 80125ca:	d038      	beq.n	801263e <_GetWordWrap+0x9e>
 80125cc:	2820      	cmp	r0, #32
 80125ce:	d041      	beq.n	8012654 <_GetWordWrap+0xb4>
 80125d0:	f1ba 0f20 	cmp.w	sl, #32
 80125d4:	d046      	beq.n	8012664 <_GetWordWrap+0xc4>
 80125d6:	6871      	ldr	r1, [r6, #4]
 80125d8:	6832      	ldr	r2, [r6, #0]
 80125da:	2900      	cmp	r1, #0
 80125dc:	dd0f      	ble.n	80125fe <_GetWordWrap+0x5e>
 80125de:	f8b2 e000 	ldrh.w	lr, [r2]
 80125e2:	4586      	cmp	lr, r0
 80125e4:	f102 0302 	add.w	r3, r2, #2
 80125e8:	bf18      	it	ne
 80125ea:	eb02 0141 	addne.w	r1, r2, r1, lsl #1
 80125ee:	d104      	bne.n	80125fa <_GetWordWrap+0x5a>
 80125f0:	e027      	b.n	8012642 <_GetWordWrap+0xa2>
 80125f2:	f833 2b02 	ldrh.w	r2, [r3], #2
 80125f6:	4282      	cmp	r2, r0
 80125f8:	d023      	beq.n	8012642 <_GetWordWrap+0xa2>
 80125fa:	428b      	cmp	r3, r1
 80125fc:	d1f9      	bne.n	80125f2 <_GetWordWrap+0x52>
 80125fe:	f008 fef5 	bl	801b3ec <GUI_GetCharDistX>
 8012602:	4481      	add	r9, r0
 8012604:	45b9      	cmp	r9, r7
 8012606:	4680      	mov	r8, r0
 8012608:	dd0e      	ble.n	8012628 <_GetWordWrap+0x88>
 801260a:	f1bb 0f00 	cmp.w	fp, #0
 801260e:	d00b      	beq.n	8012628 <_GetWordWrap+0x88>
 8012610:	9b00      	ldr	r3, [sp, #0]
 8012612:	2c00      	cmp	r4, #0
 8012614:	bf08      	it	eq
 8012616:	465c      	moveq	r4, fp
 8012618:	b113      	cbz	r3, 8012620 <_GetWordWrap+0x80>
 801261a:	ebc8 0009 	rsb	r0, r8, r9
 801261e:	6018      	str	r0, [r3, #0]
 8012620:	4620      	mov	r0, r4
 8012622:	b003      	add	sp, #12
 8012624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012628:	4628      	mov	r0, r5
 801262a:	f7ff f949 	bl	80118c0 <GUI_UC__GetCharCodeInc>
 801262e:	f10b 0b01 	add.w	fp, fp, #1
 8012632:	f1ba 0f00 	cmp.w	sl, #0
 8012636:	bf08      	it	eq
 8012638:	4682      	moveq	sl, r0
 801263a:	2800      	cmp	r0, #0
 801263c:	d1c4      	bne.n	80125c8 <_GetWordWrap+0x28>
 801263e:	465c      	mov	r4, fp
 8012640:	e7e6      	b.n	8012610 <_GetWordWrap+0x70>
 8012642:	f008 fed3 	bl	801b3ec <GUI_GetCharDistX>
 8012646:	4481      	add	r9, r0
 8012648:	45b9      	cmp	r9, r7
 801264a:	f10b 0401 	add.w	r4, fp, #1
 801264e:	4680      	mov	r8, r0
 8012650:	ddea      	ble.n	8012628 <_GetWordWrap+0x88>
 8012652:	e7da      	b.n	801260a <_GetWordWrap+0x6a>
 8012654:	f008 feca 	bl	801b3ec <GUI_GetCharDistX>
 8012658:	4481      	add	r9, r0
 801265a:	45b9      	cmp	r9, r7
 801265c:	465c      	mov	r4, fp
 801265e:	4680      	mov	r8, r0
 8012660:	dde2      	ble.n	8012628 <_GetWordWrap+0x88>
 8012662:	e7d2      	b.n	801260a <_GetWordWrap+0x6a>
 8012664:	f008 fec2 	bl	801b3ec <GUI_GetCharDistX>
 8012668:	4481      	add	r9, r0
 801266a:	454f      	cmp	r7, r9
 801266c:	4680      	mov	r8, r0
 801266e:	db08      	blt.n	8012682 <_GetWordWrap+0xe2>
 8012670:	4628      	mov	r0, r5
 8012672:	f7ff f925 	bl	80118c0 <GUI_UC__GetCharCodeInc>
 8012676:	f10b 0201 	add.w	r2, fp, #1
 801267a:	465c      	mov	r4, fp
 801267c:	4682      	mov	sl, r0
 801267e:	4693      	mov	fp, r2
 8012680:	e7a0      	b.n	80125c4 <_GetWordWrap+0x24>
 8012682:	465c      	mov	r4, fp
 8012684:	f04f 0a00 	mov.w	sl, #0
 8012688:	e7bf      	b.n	801260a <_GetWordWrap+0x6a>
 801268a:	bf00      	nop
 801268c:	2002e35c 	.word	0x2002e35c

08012690 <_GetCharWrap>:
 8012690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012694:	b082      	sub	sp, #8
 8012696:	af02      	add	r7, sp, #8
 8012698:	2400      	movs	r4, #0
 801269a:	4688      	mov	r8, r1
 801269c:	f847 0d04 	str.w	r0, [r7, #-4]!
 80126a0:	4625      	mov	r5, r4
 80126a2:	e008      	b.n	80126b6 <_GetCharWrap+0x26>
 80126a4:	f008 fea2 	bl	801b3ec <GUI_GetCharDistX>
 80126a8:	4405      	add	r5, r0
 80126aa:	b10c      	cbz	r4, 80126b0 <_GetCharWrap+0x20>
 80126ac:	4545      	cmp	r5, r8
 80126ae:	dc08      	bgt.n	80126c2 <_GetCharWrap+0x32>
 80126b0:	2e0a      	cmp	r6, #10
 80126b2:	d006      	beq.n	80126c2 <_GetCharWrap+0x32>
 80126b4:	3401      	adds	r4, #1
 80126b6:	4638      	mov	r0, r7
 80126b8:	f7ff f902 	bl	80118c0 <GUI_UC__GetCharCodeInc>
 80126bc:	4606      	mov	r6, r0
 80126be:	2800      	cmp	r0, #0
 80126c0:	d1f0      	bne.n	80126a4 <_GetCharWrap+0x14>
 80126c2:	4620      	mov	r0, r4
 80126c4:	b002      	add	sp, #8
 80126c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126ca:	bf00      	nop

080126cc <GUI__WrapGetNumCharsDisp>:
 80126cc:	2a01      	cmp	r2, #1
 80126ce:	d008      	beq.n	80126e2 <GUI__WrapGetNumCharsDisp+0x16>
 80126d0:	2a02      	cmp	r2, #2
 80126d2:	d102      	bne.n	80126da <GUI__WrapGetNumCharsDisp+0xe>
 80126d4:	4b05      	ldr	r3, [pc, #20]	; (80126ec <GUI__WrapGetNumCharsDisp+0x20>)
 80126d6:	685b      	ldr	r3, [r3, #4]
 80126d8:	4718      	bx	r3
 80126da:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80126de:	f008 befb 	b.w	801b4d8 <GUI__GetLineNumChars>
 80126e2:	4b02      	ldr	r3, [pc, #8]	; (80126ec <GUI__WrapGetNumCharsDisp+0x20>)
 80126e4:	2200      	movs	r2, #0
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	4718      	bx	r3
 80126ea:	bf00      	nop
 80126ec:	200000d0 	.word	0x200000d0

080126f0 <GUI__WrapGetNumBytesToNextLine>:
 80126f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126f4:	b082      	sub	sp, #8
 80126f6:	2a01      	cmp	r2, #1
 80126f8:	4606      	mov	r6, r0
 80126fa:	9000      	str	r0, [sp, #0]
 80126fc:	4688      	mov	r8, r1
 80126fe:	d038      	beq.n	8012772 <GUI__WrapGetNumBytesToNextLine+0x82>
 8012700:	2a02      	cmp	r2, #2
 8012702:	4617      	mov	r7, r2
 8012704:	d01b      	beq.n	801273e <GUI__WrapGetNumBytesToNextLine+0x4e>
 8012706:	f647 71ff 	movw	r1, #32767	; 0x7fff
 801270a:	f008 fee5 	bl	801b4d8 <GUI__GetLineNumChars>
 801270e:	4601      	mov	r1, r0
 8012710:	4604      	mov	r4, r0
 8012712:	9800      	ldr	r0, [sp, #0]
 8012714:	f7ff f8e8 	bl	80118e8 <GUI_UC__NumChars2NumBytes>
 8012718:	9b00      	ldr	r3, [sp, #0]
 801271a:	ad02      	add	r5, sp, #8
 801271c:	4418      	add	r0, r3
 801271e:	f845 0d08 	str.w	r0, [r5, #-8]!
 8012722:	4628      	mov	r0, r5
 8012724:	f7ff f8cc 	bl	80118c0 <GUI_UC__GetCharCodeInc>
 8012728:	280a      	cmp	r0, #10
 801272a:	d01a      	beq.n	8012762 <GUI__WrapGetNumBytesToNextLine+0x72>
 801272c:	2f01      	cmp	r7, #1
 801272e:	d033      	beq.n	8012798 <GUI__WrapGetNumBytesToNextLine+0xa8>
 8012730:	4621      	mov	r1, r4
 8012732:	4630      	mov	r0, r6
 8012734:	f7ff f8d8 	bl	80118e8 <GUI_UC__NumChars2NumBytes>
 8012738:	b002      	add	sp, #8
 801273a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801273e:	4b20      	ldr	r3, [pc, #128]	; (80127c0 <GUI__WrapGetNumBytesToNextLine+0xd0>)
 8012740:	685b      	ldr	r3, [r3, #4]
 8012742:	4798      	blx	r3
 8012744:	4601      	mov	r1, r0
 8012746:	4604      	mov	r4, r0
 8012748:	9800      	ldr	r0, [sp, #0]
 801274a:	f7ff f8cd 	bl	80118e8 <GUI_UC__NumChars2NumBytes>
 801274e:	9a00      	ldr	r2, [sp, #0]
 8012750:	ab02      	add	r3, sp, #8
 8012752:	4410      	add	r0, r2
 8012754:	f843 0d08 	str.w	r0, [r3, #-8]!
 8012758:	4618      	mov	r0, r3
 801275a:	f7ff f8b1 	bl	80118c0 <GUI_UC__GetCharCodeInc>
 801275e:	280a      	cmp	r0, #10
 8012760:	d1e6      	bne.n	8012730 <GUI__WrapGetNumBytesToNextLine+0x40>
 8012762:	3401      	adds	r4, #1
 8012764:	4621      	mov	r1, r4
 8012766:	4630      	mov	r0, r6
 8012768:	f7ff f8be 	bl	80118e8 <GUI_UC__NumChars2NumBytes>
 801276c:	b002      	add	sp, #8
 801276e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012772:	4b13      	ldr	r3, [pc, #76]	; (80127c0 <GUI__WrapGetNumBytesToNextLine+0xd0>)
 8012774:	aa01      	add	r2, sp, #4
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	4798      	blx	r3
 801277a:	4601      	mov	r1, r0
 801277c:	4604      	mov	r4, r0
 801277e:	9800      	ldr	r0, [sp, #0]
 8012780:	f7ff f8b2 	bl	80118e8 <GUI_UC__NumChars2NumBytes>
 8012784:	9b00      	ldr	r3, [sp, #0]
 8012786:	ad02      	add	r5, sp, #8
 8012788:	4418      	add	r0, r3
 801278a:	f845 0d08 	str.w	r0, [r5, #-8]!
 801278e:	4628      	mov	r0, r5
 8012790:	f7ff f896 	bl	80118c0 <GUI_UC__GetCharCodeInc>
 8012794:	280a      	cmp	r0, #10
 8012796:	d0e4      	beq.n	8012762 <GUI__WrapGetNumBytesToNextLine+0x72>
 8012798:	2820      	cmp	r0, #32
 801279a:	d1c9      	bne.n	8012730 <GUI__WrapGetNumBytesToNextLine+0x40>
 801279c:	f008 fe26 	bl	801b3ec <GUI_GetCharDistX>
 80127a0:	4607      	mov	r7, r0
 80127a2:	9b01      	ldr	r3, [sp, #4]
 80127a4:	4598      	cmp	r8, r3
 80127a6:	4628      	mov	r0, r5
 80127a8:	eb07 0203 	add.w	r2, r7, r3
 80127ac:	dbc0      	blt.n	8012730 <GUI__WrapGetNumBytesToNextLine+0x40>
 80127ae:	9201      	str	r2, [sp, #4]
 80127b0:	f7ff f886 	bl	80118c0 <GUI_UC__GetCharCodeInc>
 80127b4:	2820      	cmp	r0, #32
 80127b6:	f104 0401 	add.w	r4, r4, #1
 80127ba:	d0f2      	beq.n	80127a2 <GUI__WrapGetNumBytesToNextLine+0xb2>
 80127bc:	e7b8      	b.n	8012730 <GUI__WrapGetNumBytesToNextLine+0x40>
 80127be:	bf00      	nop
 80127c0:	200000d0 	.word	0x200000d0

080127c4 <_SetBkColor>:
 80127c4:	b538      	push	{r3, r4, r5, lr}
 80127c6:	4c0b      	ldr	r4, [pc, #44]	; (80127f4 <_SetBkColor+0x30>)
 80127c8:	6822      	ldr	r2, [r4, #0]
 80127ca:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80127cc:	4281      	cmp	r1, r0
 80127ce:	d00d      	beq.n	80127ec <_SetBkColor+0x28>
 80127d0:	7c55      	ldrb	r5, [r2, #17]
 80127d2:	4909      	ldr	r1, [pc, #36]	; (80127f8 <_SetBkColor+0x34>)
 80127d4:	6350      	str	r0, [r2, #52]	; 0x34
 80127d6:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 80127da:	691b      	ldr	r3, [r3, #16]
 80127dc:	681b      	ldr	r3, [r3, #0]
 80127de:	4798      	blx	r3
 80127e0:	6823      	ldr	r3, [r4, #0]
 80127e2:	7c1a      	ldrb	r2, [r3, #16]
 80127e4:	0752      	lsls	r2, r2, #29
 80127e6:	d402      	bmi.n	80127ee <_SetBkColor+0x2a>
 80127e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127ea:	6018      	str	r0, [r3, #0]
 80127ec:	bd38      	pop	{r3, r4, r5, pc}
 80127ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127f0:	6018      	str	r0, [r3, #0]
 80127f2:	bd38      	pop	{r3, r4, r5, pc}
 80127f4:	200000a8 	.word	0x200000a8
 80127f8:	20030870 	.word	0x20030870

080127fc <_SetColor>:
 80127fc:	b538      	push	{r3, r4, r5, lr}
 80127fe:	4c0b      	ldr	r4, [pc, #44]	; (801282c <_SetColor+0x30>)
 8012800:	6822      	ldr	r2, [r4, #0]
 8012802:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8012804:	4281      	cmp	r1, r0
 8012806:	d00d      	beq.n	8012824 <_SetColor+0x28>
 8012808:	7c55      	ldrb	r5, [r2, #17]
 801280a:	4909      	ldr	r1, [pc, #36]	; (8012830 <_SetColor+0x34>)
 801280c:	6310      	str	r0, [r2, #48]	; 0x30
 801280e:	f851 3025 	ldr.w	r3, [r1, r5, lsl #2]
 8012812:	691b      	ldr	r3, [r3, #16]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	4798      	blx	r3
 8012818:	6823      	ldr	r3, [r4, #0]
 801281a:	7c1a      	ldrb	r2, [r3, #16]
 801281c:	0752      	lsls	r2, r2, #29
 801281e:	d402      	bmi.n	8012826 <_SetColor+0x2a>
 8012820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012822:	6018      	str	r0, [r3, #0]
 8012824:	bd38      	pop	{r3, r4, r5, pc}
 8012826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012828:	6018      	str	r0, [r3, #0]
 801282a:	bd38      	pop	{r3, r4, r5, pc}
 801282c:	200000a8 	.word	0x200000a8
 8012830:	20030870 	.word	0x20030870

08012834 <_SetDrawMode>:
 8012834:	4b0a      	ldr	r3, [pc, #40]	; (8012860 <_SetDrawMode+0x2c>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	7c1a      	ldrb	r2, [r3, #16]
 801283a:	ea82 0100 	eor.w	r1, r2, r0
 801283e:	0749      	lsls	r1, r1, #29
 8012840:	d50a      	bpl.n	8012858 <_SetDrawMode+0x24>
 8012842:	b470      	push	{r4, r5, r6}
 8012844:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8012846:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8012848:	680e      	ldr	r6, [r1, #0]
 801284a:	6825      	ldr	r5, [r4, #0]
 801284c:	6026      	str	r6, [r4, #0]
 801284e:	600d      	str	r5, [r1, #0]
 8012850:	7418      	strb	r0, [r3, #16]
 8012852:	bc70      	pop	{r4, r5, r6}
 8012854:	4610      	mov	r0, r2
 8012856:	4770      	bx	lr
 8012858:	7418      	strb	r0, [r3, #16]
 801285a:	4610      	mov	r0, r2
 801285c:	4770      	bx	lr
 801285e:	bf00      	nop
 8012860:	200000a8 	.word	0x200000a8

08012864 <LCD_SetDrawMode>:
 8012864:	4b01      	ldr	r3, [pc, #4]	; (801286c <LCD_SetDrawMode+0x8>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	689b      	ldr	r3, [r3, #8]
 801286a:	4718      	bx	r3
 801286c:	200000d8 	.word	0x200000d8

08012870 <LCD_DrawPixel>:
 8012870:	4b18      	ldr	r3, [pc, #96]	; (80128d4 <LCD_DrawPixel+0x64>)
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8012878:	428a      	cmp	r2, r1
 801287a:	dc1d      	bgt.n	80128b8 <LCD_DrawPixel+0x48>
 801287c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8012880:	4291      	cmp	r1, r2
 8012882:	dc19      	bgt.n	80128b8 <LCD_DrawPixel+0x48>
 8012884:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8012888:	4282      	cmp	r2, r0
 801288a:	dc15      	bgt.n	80128b8 <LCD_DrawPixel+0x48>
 801288c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8012890:	4290      	cmp	r0, r2
 8012892:	dc11      	bgt.n	80128b8 <LCD_DrawPixel+0x48>
 8012894:	b430      	push	{r4, r5}
 8012896:	7c1a      	ldrb	r2, [r3, #16]
 8012898:	07d2      	lsls	r2, r2, #31
 801289a:	d40e      	bmi.n	80128ba <LCD_DrawPixel+0x4a>
 801289c:	4a0e      	ldr	r2, [pc, #56]	; (80128d8 <LCD_DrawPixel+0x68>)
 801289e:	7c5c      	ldrb	r4, [r3, #17]
 80128a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128a2:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	68e5      	ldr	r5, [r4, #12]
 80128aa:	69ad      	ldr	r5, [r5, #24]
 80128ac:	460a      	mov	r2, r1
 80128ae:	46ac      	mov	ip, r5
 80128b0:	4601      	mov	r1, r0
 80128b2:	4620      	mov	r0, r4
 80128b4:	bc30      	pop	{r4, r5}
 80128b6:	4760      	bx	ip
 80128b8:	4770      	bx	lr
 80128ba:	7c5a      	ldrb	r2, [r3, #17]
 80128bc:	4b06      	ldr	r3, [pc, #24]	; (80128d8 <LCD_DrawPixel+0x68>)
 80128be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128c2:	68dc      	ldr	r4, [r3, #12]
 80128c4:	69e4      	ldr	r4, [r4, #28]
 80128c6:	460a      	mov	r2, r1
 80128c8:	4601      	mov	r1, r0
 80128ca:	4618      	mov	r0, r3
 80128cc:	4623      	mov	r3, r4
 80128ce:	bc30      	pop	{r4, r5}
 80128d0:	4718      	bx	r3
 80128d2:	bf00      	nop
 80128d4:	200000a8 	.word	0x200000a8
 80128d8:	20030870 	.word	0x20030870

080128dc <LCD_DrawHLine>:
 80128dc:	4b12      	ldr	r3, [pc, #72]	; (8012928 <LCD_DrawHLine+0x4c>)
 80128de:	b430      	push	{r4, r5}
 80128e0:	681c      	ldr	r4, [r3, #0]
 80128e2:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80128e6:	428b      	cmp	r3, r1
 80128e8:	dc0f      	bgt.n	801290a <LCD_DrawHLine+0x2e>
 80128ea:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80128ee:	4299      	cmp	r1, r3
 80128f0:	dc0b      	bgt.n	801290a <LCD_DrawHLine+0x2e>
 80128f2:	f9b4 5008 	ldrsh.w	r5, [r4, #8]
 80128f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128fa:	42a8      	cmp	r0, r5
 80128fc:	bfb8      	it	lt
 80128fe:	4628      	movlt	r0, r5
 8012900:	429a      	cmp	r2, r3
 8012902:	bfa8      	it	ge
 8012904:	461a      	movge	r2, r3
 8012906:	4290      	cmp	r0, r2
 8012908:	dd01      	ble.n	801290e <LCD_DrawHLine+0x32>
 801290a:	bc30      	pop	{r4, r5}
 801290c:	4770      	bx	lr
 801290e:	4b07      	ldr	r3, [pc, #28]	; (801292c <LCD_DrawHLine+0x50>)
 8012910:	7c64      	ldrb	r4, [r4, #17]
 8012912:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8012916:	68e5      	ldr	r5, [r4, #12]
 8012918:	68ad      	ldr	r5, [r5, #8]
 801291a:	4613      	mov	r3, r2
 801291c:	46ac      	mov	ip, r5
 801291e:	460a      	mov	r2, r1
 8012920:	4601      	mov	r1, r0
 8012922:	4620      	mov	r0, r4
 8012924:	bc30      	pop	{r4, r5}
 8012926:	4760      	bx	ip
 8012928:	200000a8 	.word	0x200000a8
 801292c:	20030870 	.word	0x20030870

08012930 <LCD_DrawVLine>:
 8012930:	4b12      	ldr	r3, [pc, #72]	; (801297c <LCD_DrawVLine+0x4c>)
 8012932:	b430      	push	{r4, r5}
 8012934:	681c      	ldr	r4, [r3, #0]
 8012936:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 801293a:	4283      	cmp	r3, r0
 801293c:	dc0f      	bgt.n	801295e <LCD_DrawVLine+0x2e>
 801293e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012942:	4298      	cmp	r0, r3
 8012944:	dc0b      	bgt.n	801295e <LCD_DrawVLine+0x2e>
 8012946:	f9b4 500a 	ldrsh.w	r5, [r4, #10]
 801294a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801294e:	42a9      	cmp	r1, r5
 8012950:	bfb8      	it	lt
 8012952:	4629      	movlt	r1, r5
 8012954:	429a      	cmp	r2, r3
 8012956:	bfa8      	it	ge
 8012958:	461a      	movge	r2, r3
 801295a:	4291      	cmp	r1, r2
 801295c:	dd01      	ble.n	8012962 <LCD_DrawVLine+0x32>
 801295e:	bc30      	pop	{r4, r5}
 8012960:	4770      	bx	lr
 8012962:	4b07      	ldr	r3, [pc, #28]	; (8012980 <LCD_DrawVLine+0x50>)
 8012964:	7c64      	ldrb	r4, [r4, #17]
 8012966:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 801296a:	68e5      	ldr	r5, [r4, #12]
 801296c:	68ed      	ldr	r5, [r5, #12]
 801296e:	4613      	mov	r3, r2
 8012970:	46ac      	mov	ip, r5
 8012972:	460a      	mov	r2, r1
 8012974:	4601      	mov	r1, r0
 8012976:	4620      	mov	r0, r4
 8012978:	bc30      	pop	{r4, r5}
 801297a:	4760      	bx	ip
 801297c:	200000a8 	.word	0x200000a8
 8012980:	20030870 	.word	0x20030870

08012984 <LCD_FillRect>:
 8012984:	b570      	push	{r4, r5, r6, lr}
 8012986:	4c15      	ldr	r4, [pc, #84]	; (80129dc <LCD_FillRect+0x58>)
 8012988:	6824      	ldr	r4, [r4, #0]
 801298a:	f9b4 6008 	ldrsh.w	r6, [r4, #8]
 801298e:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012992:	42b0      	cmp	r0, r6
 8012994:	bfb8      	it	lt
 8012996:	4630      	movlt	r0, r6
 8012998:	42aa      	cmp	r2, r5
 801299a:	bfa8      	it	ge
 801299c:	462a      	movge	r2, r5
 801299e:	4282      	cmp	r2, r0
 80129a0:	b082      	sub	sp, #8
 80129a2:	db0b      	blt.n	80129bc <LCD_FillRect+0x38>
 80129a4:	f9b4 600a 	ldrsh.w	r6, [r4, #10]
 80129a8:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 80129ac:	42b1      	cmp	r1, r6
 80129ae:	bfb8      	it	lt
 80129b0:	4631      	movlt	r1, r6
 80129b2:	42ab      	cmp	r3, r5
 80129b4:	bfa8      	it	ge
 80129b6:	462b      	movge	r3, r5
 80129b8:	4299      	cmp	r1, r3
 80129ba:	dd01      	ble.n	80129c0 <LCD_FillRect+0x3c>
 80129bc:	b002      	add	sp, #8
 80129be:	bd70      	pop	{r4, r5, r6, pc}
 80129c0:	7c65      	ldrb	r5, [r4, #17]
 80129c2:	4c07      	ldr	r4, [pc, #28]	; (80129e0 <LCD_FillRect+0x5c>)
 80129c4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80129c8:	68e5      	ldr	r5, [r4, #12]
 80129ca:	9300      	str	r3, [sp, #0]
 80129cc:	4613      	mov	r3, r2
 80129ce:	460a      	mov	r2, r1
 80129d0:	4601      	mov	r1, r0
 80129d2:	4620      	mov	r0, r4
 80129d4:	692c      	ldr	r4, [r5, #16]
 80129d6:	47a0      	blx	r4
 80129d8:	b002      	add	sp, #8
 80129da:	bd70      	pop	{r4, r5, r6, pc}
 80129dc:	200000a8 	.word	0x200000a8
 80129e0:	20030870 	.word	0x20030870

080129e4 <LCD__DrawBitmap_1bpp>:
 80129e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129e8:	b091      	sub	sp, #68	; 0x44
 80129ea:	4c82      	ldr	r4, [pc, #520]	; (8012bf4 <LCD__DrawBitmap_1bpp+0x210>)
 80129ec:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80129ee:	950e      	str	r5, [sp, #56]	; 0x38
 80129f0:	462e      	mov	r6, r5
 80129f2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80129f4:	950c      	str	r5, [sp, #48]	; 0x30
 80129f6:	6824      	ldr	r4, [r4, #0]
 80129f8:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80129fa:	9506      	str	r5, [sp, #24]
 80129fc:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80129fe:	9508      	str	r5, [sp, #32]
 8012a00:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8012a04:	f8dd e070 	ldr.w	lr, [sp, #112]	; 0x70
 8012a08:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8012a0a:	900f      	str	r0, [sp, #60]	; 0x3c
 8012a0c:	9205      	str	r2, [sp, #20]
 8012a0e:	930d      	str	r3, [sp, #52]	; 0x34
 8012a10:	b12c      	cbz	r4, 8012a1e <LCD__DrawBitmap_1bpp+0x3a>
 8012a12:	6824      	ldr	r4, [r4, #0]
 8012a14:	46a4      	mov	ip, r4
 8012a16:	b011      	add	sp, #68	; 0x44
 8012a18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a1c:	4760      	bx	ip
 8012a1e:	ea4a 0306 	orr.w	r3, sl, r6
 8012a22:	2b01      	cmp	r3, #1
 8012a24:	4689      	mov	r9, r1
 8012a26:	f000 8091 	beq.w	8012b4c <LCD__DrawBitmap_1bpp+0x168>
 8012a2a:	f1ce 0308 	rsb	r3, lr, #8
 8012a2e:	9302      	str	r3, [sp, #8]
 8012a30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	f340 8087 	ble.w	8012b46 <LCD__DrawBitmap_1bpp+0x162>
 8012a38:	4b6f      	ldr	r3, [pc, #444]	; (8012bf8 <LCD__DrawBitmap_1bpp+0x214>)
 8012a3a:	940a      	str	r4, [sp, #40]	; 0x28
 8012a3c:	6818      	ldr	r0, [r3, #0]
 8012a3e:	9104      	str	r1, [sp, #16]
 8012a40:	46a0      	mov	r8, r4
 8012a42:	46f1      	mov	r9, lr
 8012a44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012a46:	9904      	ldr	r1, [sp, #16]
 8012a48:	1853      	adds	r3, r2, r1
 8012a4a:	461a      	mov	r2, r3
 8012a4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a4e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8012a52:	3a01      	subs	r2, #1
 8012a54:	4293      	cmp	r3, r2
 8012a56:	9209      	str	r2, [sp, #36]	; 0x24
 8012a58:	dc68      	bgt.n	8012b2c <LCD__DrawBitmap_1bpp+0x148>
 8012a5a:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8012a5e:	428b      	cmp	r3, r1
 8012a60:	db64      	blt.n	8012b2c <LCD__DrawBitmap_1bpp+0x148>
 8012a62:	9b05      	ldr	r3, [sp, #20]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	dd61      	ble.n	8012b2c <LCD__DrawBitmap_1bpp+0x148>
 8012a68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a6a:	9f06      	ldr	r7, [sp, #24]
 8012a6c:	9707      	str	r7, [sp, #28]
 8012a6e:	2600      	movs	r6, #0
 8012a70:	4635      	mov	r5, r6
 8012a72:	eb03 040a 	add.w	r4, r3, sl
 8012a76:	e04c      	b.n	8012b12 <LCD__DrawBitmap_1bpp+0x12e>
 8012a78:	9b02      	ldr	r3, [sp, #8]
 8012a7a:	ebc9 0606 	rsb	r6, r9, r6
 8012a7e:	fa48 f303 	asr.w	r3, r8, r3
 8012a82:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8012a86:	fa08 f809 	lsl.w	r8, r8, r9
 8012a8a:	fa5f f888 	uxtb.w	r8, r8
 8012a8e:	d102      	bne.n	8012a96 <LCD__DrawBitmap_1bpp+0xb2>
 8012a90:	7c02      	ldrb	r2, [r0, #16]
 8012a92:	0792      	lsls	r2, r2, #30
 8012a94:	d438      	bmi.n	8012b08 <LCD__DrawBitmap_1bpp+0x124>
 8012a96:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8012a9a:	f8de 2000 	ldr.w	r2, [lr]
 8012a9e:	9203      	str	r2, [sp, #12]
 8012aa0:	9a08      	ldr	r2, [sp, #32]
 8012aa2:	b10a      	cbz	r2, 8012aa8 <LCD__DrawBitmap_1bpp+0xc4>
 8012aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012aa8:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 8012aac:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8012ab0:	f8ce 3000 	str.w	r3, [lr]
 8012ab4:	1e62      	subs	r2, r4, #1
 8012ab6:	4559      	cmp	r1, fp
 8012ab8:	bfb8      	it	lt
 8012aba:	4659      	movlt	r1, fp
 8012abc:	4562      	cmp	r2, ip
 8012abe:	4613      	mov	r3, r2
 8012ac0:	bfa8      	it	ge
 8012ac2:	4663      	movge	r3, ip
 8012ac4:	428b      	cmp	r3, r1
 8012ac6:	db1c      	blt.n	8012b02 <LCD__DrawBitmap_1bpp+0x11e>
 8012ac8:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012acc:	9f04      	ldr	r7, [sp, #16]
 8012ace:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8012ad2:	42ba      	cmp	r2, r7
 8012ad4:	bfb8      	it	lt
 8012ad6:	463a      	movlt	r2, r7
 8012ad8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012ada:	45bc      	cmp	ip, r7
 8012adc:	bfa8      	it	ge
 8012ade:	46bc      	movge	ip, r7
 8012ae0:	4562      	cmp	r2, ip
 8012ae2:	dc0e      	bgt.n	8012b02 <LCD__DrawBitmap_1bpp+0x11e>
 8012ae4:	7c40      	ldrb	r0, [r0, #17]
 8012ae6:	4f45      	ldr	r7, [pc, #276]	; (8012bfc <LCD__DrawBitmap_1bpp+0x218>)
 8012ae8:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8012aec:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8012af0:	f8cd c000 	str.w	ip, [sp]
 8012af4:	f8de b010 	ldr.w	fp, [lr, #16]
 8012af8:	47d8      	blx	fp
 8012afa:	4b3f      	ldr	r3, [pc, #252]	; (8012bf8 <LCD__DrawBitmap_1bpp+0x214>)
 8012afc:	6818      	ldr	r0, [r3, #0]
 8012afe:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8012b02:	9b03      	ldr	r3, [sp, #12]
 8012b04:	f8ce 3000 	str.w	r3, [lr]
 8012b08:	9b05      	ldr	r3, [sp, #20]
 8012b0a:	3501      	adds	r5, #1
 8012b0c:	42ab      	cmp	r3, r5
 8012b0e:	4454      	add	r4, sl
 8012b10:	d00c      	beq.n	8012b2c <LCD__DrawBitmap_1bpp+0x148>
 8012b12:	ebca 0104 	rsb	r1, sl, r4
 8012b16:	2e00      	cmp	r6, #0
 8012b18:	d1ae      	bne.n	8012a78 <LCD__DrawBitmap_1bpp+0x94>
 8012b1a:	9a07      	ldr	r2, [sp, #28]
 8012b1c:	9e02      	ldr	r6, [sp, #8]
 8012b1e:	f892 8000 	ldrb.w	r8, [r2]
 8012b22:	4613      	mov	r3, r2
 8012b24:	3301      	adds	r3, #1
 8012b26:	9307      	str	r3, [sp, #28]
 8012b28:	4633      	mov	r3, r6
 8012b2a:	e7a8      	b.n	8012a7e <LCD__DrawBitmap_1bpp+0x9a>
 8012b2c:	9a06      	ldr	r2, [sp, #24]
 8012b2e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012b30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b32:	440a      	add	r2, r1
 8012b34:	9206      	str	r2, [sp, #24]
 8012b36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012b38:	9204      	str	r2, [sp, #16]
 8012b3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012b3c:	3301      	adds	r3, #1
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	930a      	str	r3, [sp, #40]	; 0x28
 8012b42:	f47f af7f 	bne.w	8012a44 <LCD__DrawBitmap_1bpp+0x60>
 8012b46:	b011      	add	sp, #68	; 0x44
 8012b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b4c:	4b2a      	ldr	r3, [pc, #168]	; (8012bf8 <LCD__DrawBitmap_1bpp+0x214>)
 8012b4e:	6818      	ldr	r0, [r3, #0]
 8012b50:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012b54:	1a53      	subs	r3, r2, r1
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	dd47      	ble.n	8012bea <LCD__DrawBitmap_1bpp+0x206>
 8012b5a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012b5c:	1acc      	subs	r4, r1, r3
 8012b5e:	2c00      	cmp	r4, #0
 8012b60:	ddf1      	ble.n	8012b46 <LCD__DrawBitmap_1bpp+0x162>
 8012b62:	9e06      	ldr	r6, [sp, #24]
 8012b64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012b66:	fb01 6303 	mla	r3, r1, r3, r6
 8012b6a:	9306      	str	r3, [sp, #24]
 8012b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b6e:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 8012b72:	444b      	add	r3, r9
 8012b74:	3b01      	subs	r3, #1
 8012b76:	1a5b      	subs	r3, r3, r1
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	dd02      	ble.n	8012b82 <LCD__DrawBitmap_1bpp+0x19e>
 8012b7c:	1ae4      	subs	r4, r4, r3
 8012b7e:	2c00      	cmp	r4, #0
 8012b80:	dde1      	ble.n	8012b46 <LCD__DrawBitmap_1bpp+0x162>
 8012b82:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012b84:	9e05      	ldr	r6, [sp, #20]
 8012b86:	198b      	adds	r3, r1, r6
 8012b88:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 8012b8c:	3b01      	subs	r3, #1
 8012b8e:	1a5b      	subs	r3, r3, r1
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	dd01      	ble.n	8012b98 <LCD__DrawBitmap_1bpp+0x1b4>
 8012b94:	1af3      	subs	r3, r6, r3
 8012b96:	9305      	str	r3, [sp, #20]
 8012b98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012b9a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8012b9e:	1b49      	subs	r1, r1, r5
 8012ba0:	4299      	cmp	r1, r3
 8012ba2:	da0d      	bge.n	8012bc0 <LCD__DrawBitmap_1bpp+0x1dc>
 8012ba4:	1a5b      	subs	r3, r3, r1
 8012ba6:	9f06      	ldr	r7, [sp, #24]
 8012ba8:	441d      	add	r5, r3
 8012baa:	eb07 07e5 	add.w	r7, r7, r5, asr #3
 8012bae:	9706      	str	r7, [sp, #24]
 8012bb0:	9f05      	ldr	r7, [sp, #20]
 8012bb2:	f023 0607 	bic.w	r6, r3, #7
 8012bb6:	1afb      	subs	r3, r7, r3
 8012bb8:	f005 0507 	and.w	r5, r5, #7
 8012bbc:	9305      	str	r3, [sp, #20]
 8012bbe:	4431      	add	r1, r6
 8012bc0:	9b05      	ldr	r3, [sp, #20]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	ddbf      	ble.n	8012b46 <LCD__DrawBitmap_1bpp+0x162>
 8012bc6:	7c40      	ldrb	r0, [r0, #17]
 8012bc8:	4b0c      	ldr	r3, [pc, #48]	; (8012bfc <LCD__DrawBitmap_1bpp+0x218>)
 8012bca:	9f08      	ldr	r7, [sp, #32]
 8012bcc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8012bd0:	9b05      	ldr	r3, [sp, #20]
 8012bd2:	68c6      	ldr	r6, [r0, #12]
 8012bd4:	951e      	str	r5, [sp, #120]	; 0x78
 8012bd6:	9d06      	ldr	r5, [sp, #24]
 8012bd8:	951d      	str	r5, [sp, #116]	; 0x74
 8012bda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012bdc:	971f      	str	r7, [sp, #124]	; 0x7c
 8012bde:	951c      	str	r5, [sp, #112]	; 0x70
 8012be0:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
 8012be4:	941a      	str	r4, [sp, #104]	; 0x68
 8012be6:	6874      	ldr	r4, [r6, #4]
 8012be8:	e714      	b.n	8012a14 <LCD__DrawBitmap_1bpp+0x30>
 8012bea:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8012bec:	460a      	mov	r2, r1
 8012bee:	4623      	mov	r3, r4
 8012bf0:	e7bd      	b.n	8012b6e <LCD__DrawBitmap_1bpp+0x18a>
 8012bf2:	bf00      	nop
 8012bf4:	2003082c 	.word	0x2003082c
 8012bf8:	200000a8 	.word	0x200000a8
 8012bfc:	20030870 	.word	0x20030870

08012c00 <LCD_DrawBitmap>:
 8012c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c04:	4cb6      	ldr	r4, [pc, #728]	; (8012ee0 <LCD_DrawBitmap+0x2e0>)
 8012c06:	b091      	sub	sp, #68	; 0x44
 8012c08:	f8d4 e000 	ldr.w	lr, [r4]
 8012c0c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8012c0e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8012c10:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8012c12:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8012c14:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8012c18:	950d      	str	r5, [sp, #52]	; 0x34
 8012c1a:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8012c1e:	960e      	str	r6, [sp, #56]	; 0x38
 8012c20:	9707      	str	r7, [sp, #28]
 8012c22:	9408      	str	r4, [sp, #32]
 8012c24:	900f      	str	r0, [sp, #60]	; 0x3c
 8012c26:	9205      	str	r2, [sp, #20]
 8012c28:	930c      	str	r3, [sp, #48]	; 0x30
 8012c2a:	f1be 0f00 	cmp.w	lr, #0
 8012c2e:	d006      	beq.n	8012c3e <LCD_DrawBitmap+0x3e>
 8012c30:	f8de 4000 	ldr.w	r4, [lr]
 8012c34:	46a4      	mov	ip, r4
 8012c36:	b011      	add	sp, #68	; 0x44
 8012c38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c3c:	4760      	bx	ip
 8012c3e:	ea4a 0305 	orr.w	r3, sl, r5
 8012c42:	2b01      	cmp	r3, #1
 8012c44:	4689      	mov	r9, r1
 8012c46:	f000 8092 	beq.w	8012d6e <LCD_DrawBitmap+0x16e>
 8012c4a:	f1cc 0308 	rsb	r3, ip, #8
 8012c4e:	9302      	str	r3, [sp, #8]
 8012c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	f340 8088 	ble.w	8012d68 <LCD_DrawBitmap+0x168>
 8012c58:	4ba2      	ldr	r3, [pc, #648]	; (8012ee4 <LCD_DrawBitmap+0x2e4>)
 8012c5a:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8012c5e:	6818      	ldr	r0, [r3, #0]
 8012c60:	9104      	str	r1, [sp, #16]
 8012c62:	46f0      	mov	r8, lr
 8012c64:	46e1      	mov	r9, ip
 8012c66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012c68:	9904      	ldr	r1, [sp, #16]
 8012c6a:	1853      	adds	r3, r2, r1
 8012c6c:	461a      	mov	r2, r3
 8012c6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c70:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8012c74:	3a01      	subs	r2, #1
 8012c76:	4293      	cmp	r3, r2
 8012c78:	9209      	str	r2, [sp, #36]	; 0x24
 8012c7a:	dc68      	bgt.n	8012d4e <LCD_DrawBitmap+0x14e>
 8012c7c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8012c80:	428b      	cmp	r3, r1
 8012c82:	db64      	blt.n	8012d4e <LCD_DrawBitmap+0x14e>
 8012c84:	9b05      	ldr	r3, [sp, #20]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	dd61      	ble.n	8012d4e <LCD_DrawBitmap+0x14e>
 8012c8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c8c:	9f07      	ldr	r7, [sp, #28]
 8012c8e:	9706      	str	r7, [sp, #24]
 8012c90:	2600      	movs	r6, #0
 8012c92:	4635      	mov	r5, r6
 8012c94:	eb03 040a 	add.w	r4, r3, sl
 8012c98:	e04c      	b.n	8012d34 <LCD_DrawBitmap+0x134>
 8012c9a:	9b02      	ldr	r3, [sp, #8]
 8012c9c:	ebc9 0606 	rsb	r6, r9, r6
 8012ca0:	fa48 f303 	asr.w	r3, r8, r3
 8012ca4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8012ca8:	fa08 f809 	lsl.w	r8, r8, r9
 8012cac:	fa5f f888 	uxtb.w	r8, r8
 8012cb0:	d102      	bne.n	8012cb8 <LCD_DrawBitmap+0xb8>
 8012cb2:	7c02      	ldrb	r2, [r0, #16]
 8012cb4:	0792      	lsls	r2, r2, #30
 8012cb6:	d438      	bmi.n	8012d2a <LCD_DrawBitmap+0x12a>
 8012cb8:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8012cbc:	f8de 2000 	ldr.w	r2, [lr]
 8012cc0:	9203      	str	r2, [sp, #12]
 8012cc2:	9a08      	ldr	r2, [sp, #32]
 8012cc4:	b10a      	cbz	r2, 8012cca <LCD_DrawBitmap+0xca>
 8012cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012cca:	f9b0 b008 	ldrsh.w	fp, [r0, #8]
 8012cce:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
 8012cd2:	f8ce 3000 	str.w	r3, [lr]
 8012cd6:	1e62      	subs	r2, r4, #1
 8012cd8:	4559      	cmp	r1, fp
 8012cda:	bfb8      	it	lt
 8012cdc:	4659      	movlt	r1, fp
 8012cde:	4562      	cmp	r2, ip
 8012ce0:	4613      	mov	r3, r2
 8012ce2:	bfa8      	it	ge
 8012ce4:	4663      	movge	r3, ip
 8012ce6:	428b      	cmp	r3, r1
 8012ce8:	db1c      	blt.n	8012d24 <LCD_DrawBitmap+0x124>
 8012cea:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012cee:	9f04      	ldr	r7, [sp, #16]
 8012cf0:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 8012cf4:	42ba      	cmp	r2, r7
 8012cf6:	bfb8      	it	lt
 8012cf8:	463a      	movlt	r2, r7
 8012cfa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012cfc:	45bc      	cmp	ip, r7
 8012cfe:	bfa8      	it	ge
 8012d00:	46bc      	movge	ip, r7
 8012d02:	4562      	cmp	r2, ip
 8012d04:	dc0e      	bgt.n	8012d24 <LCD_DrawBitmap+0x124>
 8012d06:	7c40      	ldrb	r0, [r0, #17]
 8012d08:	4f77      	ldr	r7, [pc, #476]	; (8012ee8 <LCD_DrawBitmap+0x2e8>)
 8012d0a:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8012d0e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8012d12:	f8cd c000 	str.w	ip, [sp]
 8012d16:	f8de b010 	ldr.w	fp, [lr, #16]
 8012d1a:	47d8      	blx	fp
 8012d1c:	4b71      	ldr	r3, [pc, #452]	; (8012ee4 <LCD_DrawBitmap+0x2e4>)
 8012d1e:	6818      	ldr	r0, [r3, #0]
 8012d20:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8012d24:	9b03      	ldr	r3, [sp, #12]
 8012d26:	f8ce 3000 	str.w	r3, [lr]
 8012d2a:	9b05      	ldr	r3, [sp, #20]
 8012d2c:	3501      	adds	r5, #1
 8012d2e:	42ab      	cmp	r3, r5
 8012d30:	4454      	add	r4, sl
 8012d32:	d00c      	beq.n	8012d4e <LCD_DrawBitmap+0x14e>
 8012d34:	ebca 0104 	rsb	r1, sl, r4
 8012d38:	2e00      	cmp	r6, #0
 8012d3a:	d1ae      	bne.n	8012c9a <LCD_DrawBitmap+0x9a>
 8012d3c:	9a06      	ldr	r2, [sp, #24]
 8012d3e:	9e02      	ldr	r6, [sp, #8]
 8012d40:	f892 8000 	ldrb.w	r8, [r2]
 8012d44:	4613      	mov	r3, r2
 8012d46:	3301      	adds	r3, #1
 8012d48:	9306      	str	r3, [sp, #24]
 8012d4a:	4633      	mov	r3, r6
 8012d4c:	e7a8      	b.n	8012ca0 <LCD_DrawBitmap+0xa0>
 8012d4e:	9a07      	ldr	r2, [sp, #28]
 8012d50:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012d52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d54:	440a      	add	r2, r1
 8012d56:	9207      	str	r2, [sp, #28]
 8012d58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012d5a:	9204      	str	r2, [sp, #16]
 8012d5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012d5e:	3301      	adds	r3, #1
 8012d60:	429a      	cmp	r2, r3
 8012d62:	930a      	str	r3, [sp, #40]	; 0x28
 8012d64:	f47f af7f 	bne.w	8012c66 <LCD_DrawBitmap+0x66>
 8012d68:	b011      	add	sp, #68	; 0x44
 8012d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d6e:	4b5d      	ldr	r3, [pc, #372]	; (8012ee4 <LCD_DrawBitmap+0x2e4>)
 8012d70:	6819      	ldr	r1, [r3, #0]
 8012d72:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8012d76:	ebc9 0302 	rsb	r3, r9, r2
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	f340 80c2 	ble.w	8012f04 <LCD_DrawBitmap+0x304>
 8012d80:	980c      	ldr	r0, [sp, #48]	; 0x30
 8012d82:	1ac4      	subs	r4, r0, r3
 8012d84:	2c00      	cmp	r4, #0
 8012d86:	ddef      	ble.n	8012d68 <LCD_DrawBitmap+0x168>
 8012d88:	fb06 7303 	mla	r3, r6, r3, r7
 8012d8c:	9307      	str	r3, [sp, #28]
 8012d8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012d90:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8012d94:	444b      	add	r3, r9
 8012d96:	3b01      	subs	r3, #1
 8012d98:	1a1b      	subs	r3, r3, r0
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	dd02      	ble.n	8012da4 <LCD_DrawBitmap+0x1a4>
 8012d9e:	1ae4      	subs	r4, r4, r3
 8012da0:	2c00      	cmp	r4, #0
 8012da2:	dde1      	ble.n	8012d68 <LCD_DrawBitmap+0x168>
 8012da4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012da6:	9d05      	ldr	r5, [sp, #20]
 8012da8:	1943      	adds	r3, r0, r5
 8012daa:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8012dae:	3b01      	subs	r3, #1
 8012db0:	1a1b      	subs	r3, r3, r0
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	dd01      	ble.n	8012dba <LCD_DrawBitmap+0x1ba>
 8012db6:	1aeb      	subs	r3, r5, r3
 8012db8:	9305      	str	r3, [sp, #20]
 8012dba:	f9b1 0008 	ldrsh.w	r0, [r1, #8]
 8012dbe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012dc0:	4285      	cmp	r5, r0
 8012dc2:	db16      	blt.n	8012df2 <LCD_DrawBitmap+0x1f2>
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	9e05      	ldr	r6, [sp, #20]
 8012dc8:	2e00      	cmp	r6, #0
 8012dca:	ddcd      	ble.n	8012d68 <LCD_DrawBitmap+0x168>
 8012dcc:	7c48      	ldrb	r0, [r1, #17]
 8012dce:	4946      	ldr	r1, [pc, #280]	; (8012ee8 <LCD_DrawBitmap+0x2e8>)
 8012dd0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8012dd4:	9908      	ldr	r1, [sp, #32]
 8012dd6:	68c5      	ldr	r5, [r0, #12]
 8012dd8:	931e      	str	r3, [sp, #120]	; 0x78
 8012dda:	9b07      	ldr	r3, [sp, #28]
 8012ddc:	931d      	str	r3, [sp, #116]	; 0x74
 8012dde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012de0:	911f      	str	r1, [sp, #124]	; 0x7c
 8012de2:	931c      	str	r3, [sp, #112]	; 0x70
 8012de4:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
 8012de8:	941a      	str	r4, [sp, #104]	; 0x68
 8012dea:	4633      	mov	r3, r6
 8012dec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8012dee:	686c      	ldr	r4, [r5, #4]
 8012df0:	e720      	b.n	8012c34 <LCD_DrawBitmap+0x34>
 8012df2:	9e05      	ldr	r6, [sp, #20]
 8012df4:	1b43      	subs	r3, r0, r5
 8012df6:	1af6      	subs	r6, r6, r3
 8012df8:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8012dfc:	9605      	str	r6, [sp, #20]
 8012dfe:	2d1f      	cmp	r5, #31
 8012e00:	d8e1      	bhi.n	8012dc6 <LCD_DrawBitmap+0x1c6>
 8012e02:	a601      	add	r6, pc, #4	; (adr r6, 8012e08 <LCD_DrawBitmap+0x208>)
 8012e04:	f856 f025 	ldr.w	pc, [r6, r5, lsl #2]
 8012e08:	08012eed 	.word	0x08012eed
 8012e0c:	08012ec9 	.word	0x08012ec9
 8012e10:	08012dc7 	.word	0x08012dc7
 8012e14:	08012eb1 	.word	0x08012eb1
 8012e18:	08012dc7 	.word	0x08012dc7
 8012e1c:	08012dc7 	.word	0x08012dc7
 8012e20:	08012dc7 	.word	0x08012dc7
 8012e24:	08012ea5 	.word	0x08012ea5
 8012e28:	08012dc7 	.word	0x08012dc7
 8012e2c:	08012dc7 	.word	0x08012dc7
 8012e30:	08012dc7 	.word	0x08012dc7
 8012e34:	08012dc7 	.word	0x08012dc7
 8012e38:	08012dc7 	.word	0x08012dc7
 8012e3c:	08012dc7 	.word	0x08012dc7
 8012e40:	08012dc7 	.word	0x08012dc7
 8012e44:	08012e97 	.word	0x08012e97
 8012e48:	08012dc7 	.word	0x08012dc7
 8012e4c:	08012dc7 	.word	0x08012dc7
 8012e50:	08012dc7 	.word	0x08012dc7
 8012e54:	08012dc7 	.word	0x08012dc7
 8012e58:	08012dc7 	.word	0x08012dc7
 8012e5c:	08012dc7 	.word	0x08012dc7
 8012e60:	08012dc7 	.word	0x08012dc7
 8012e64:	08012e89 	.word	0x08012e89
 8012e68:	08012dc7 	.word	0x08012dc7
 8012e6c:	08012dc7 	.word	0x08012dc7
 8012e70:	08012dc7 	.word	0x08012dc7
 8012e74:	08012dc7 	.word	0x08012dc7
 8012e78:	08012dc7 	.word	0x08012dc7
 8012e7c:	08012dc7 	.word	0x08012dc7
 8012e80:	08012dc7 	.word	0x08012dc7
 8012e84:	08012e89 	.word	0x08012e89
 8012e88:	9d07      	ldr	r5, [sp, #28]
 8012e8a:	900f      	str	r0, [sp, #60]	; 0x3c
 8012e8c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8012e90:	9307      	str	r3, [sp, #28]
 8012e92:	2300      	movs	r3, #0
 8012e94:	e797      	b.n	8012dc6 <LCD_DrawBitmap+0x1c6>
 8012e96:	9d07      	ldr	r5, [sp, #28]
 8012e98:	900f      	str	r0, [sp, #60]	; 0x3c
 8012e9a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8012e9e:	9307      	str	r3, [sp, #28]
 8012ea0:	2300      	movs	r3, #0
 8012ea2:	e790      	b.n	8012dc6 <LCD_DrawBitmap+0x1c6>
 8012ea4:	9d07      	ldr	r5, [sp, #28]
 8012ea6:	900f      	str	r0, [sp, #60]	; 0x3c
 8012ea8:	441d      	add	r5, r3
 8012eaa:	9507      	str	r5, [sp, #28]
 8012eac:	2300      	movs	r3, #0
 8012eae:	e78a      	b.n	8012dc6 <LCD_DrawBitmap+0x1c6>
 8012eb0:	9d07      	ldr	r5, [sp, #28]
 8012eb2:	eb05 0563 	add.w	r5, r5, r3, asr #1
 8012eb6:	9507      	str	r5, [sp, #28]
 8012eb8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012eba:	f023 0001 	bic.w	r0, r3, #1
 8012ebe:	4405      	add	r5, r0
 8012ec0:	950f      	str	r5, [sp, #60]	; 0x3c
 8012ec2:	f003 0301 	and.w	r3, r3, #1
 8012ec6:	e77e      	b.n	8012dc6 <LCD_DrawBitmap+0x1c6>
 8012ec8:	9d07      	ldr	r5, [sp, #28]
 8012eca:	eb05 05a3 	add.w	r5, r5, r3, asr #2
 8012ece:	9507      	str	r5, [sp, #28]
 8012ed0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012ed2:	f023 0003 	bic.w	r0, r3, #3
 8012ed6:	4405      	add	r5, r0
 8012ed8:	950f      	str	r5, [sp, #60]	; 0x3c
 8012eda:	f003 0303 	and.w	r3, r3, #3
 8012ede:	e772      	b.n	8012dc6 <LCD_DrawBitmap+0x1c6>
 8012ee0:	2003082c 	.word	0x2003082c
 8012ee4:	200000a8 	.word	0x200000a8
 8012ee8:	20030870 	.word	0x20030870
 8012eec:	9d07      	ldr	r5, [sp, #28]
 8012eee:	eb05 05e3 	add.w	r5, r5, r3, asr #3
 8012ef2:	9507      	str	r5, [sp, #28]
 8012ef4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012ef6:	f023 0007 	bic.w	r0, r3, #7
 8012efa:	4405      	add	r5, r0
 8012efc:	950f      	str	r5, [sp, #60]	; 0x3c
 8012efe:	f003 0307 	and.w	r3, r3, #7
 8012f02:	e760      	b.n	8012dc6 <LCD_DrawBitmap+0x1c6>
 8012f04:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8012f06:	464a      	mov	r2, r9
 8012f08:	4623      	mov	r3, r4
 8012f0a:	e741      	b.n	8012d90 <LCD_DrawBitmap+0x190>

08012f0c <LCD_SetClipRectMax>:
 8012f0c:	4a04      	ldr	r2, [pc, #16]	; (8012f20 <LCD_SetClipRectMax+0x14>)
 8012f0e:	4b05      	ldr	r3, [pc, #20]	; (8012f24 <LCD_SetClipRectMax+0x18>)
 8012f10:	6811      	ldr	r1, [r2, #0]
 8012f12:	7c4a      	ldrb	r2, [r1, #17]
 8012f14:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012f18:	68c3      	ldr	r3, [r0, #12]
 8012f1a:	3108      	adds	r1, #8
 8012f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f1e:	4718      	bx	r3
 8012f20:	200000a8 	.word	0x200000a8
 8012f24:	20030870 	.word	0x20030870

08012f28 <emWin_LCD_Init>:
 8012f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f2c:	4e3e      	ldr	r6, [pc, #248]	; (8013028 <emWin_LCD_Init+0x100>)
 8012f2e:	4f3f      	ldr	r7, [pc, #252]	; (801302c <emWin_LCD_Init+0x104>)
 8012f30:	6831      	ldr	r1, [r6, #0]
 8012f32:	7c4b      	ldrb	r3, [r1, #17]
 8012f34:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8012f38:	68c3      	ldr	r3, [r0, #12]
 8012f3a:	b084      	sub	sp, #16
 8012f3c:	3108      	adds	r1, #8
 8012f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f40:	4798      	blx	r3
 8012f42:	f000 f8f3 	bl	801312c <LCD_InitColors>
 8012f46:	4604      	mov	r4, r0
 8012f48:	2800      	cmp	r0, #0
 8012f4a:	d15c      	bne.n	8013006 <emWin_LCD_Init+0xde>
 8012f4c:	4605      	mov	r5, r0
 8012f4e:	4628      	mov	r0, r5
 8012f50:	f7fd fc06 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8012f54:	210c      	movs	r1, #12
 8012f56:	4603      	mov	r3, r0
 8012f58:	3501      	adds	r5, #1
 8012f5a:	eb0d 0001 	add.w	r0, sp, r1
 8012f5e:	9303      	str	r3, [sp, #12]
 8012f60:	b143      	cbz	r3, 8012f74 <emWin_LCD_Init+0x4c>
 8012f62:	68db      	ldr	r3, [r3, #12]
 8012f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f66:	4798      	blx	r3
 8012f68:	4603      	mov	r3, r0
 8012f6a:	2800      	cmp	r0, #0
 8012f6c:	d05a      	beq.n	8013024 <emWin_LCD_Init+0xfc>
 8012f6e:	9803      	ldr	r0, [sp, #12]
 8012f70:	4798      	blx	r3
 8012f72:	4304      	orrs	r4, r0
 8012f74:	2d02      	cmp	r5, #2
 8012f76:	d1ea      	bne.n	8012f4e <emWin_LCD_Init+0x26>
 8012f78:	2c00      	cmp	r4, #0
 8012f7a:	d144      	bne.n	8013006 <emWin_LCD_Init+0xde>
 8012f7c:	f000 f96a 	bl	8013254 <LCD_InitLUT>
 8012f80:	4b2b      	ldr	r3, [pc, #172]	; (8013030 <emWin_LCD_Init+0x108>)
 8012f82:	681a      	ldr	r2, [r3, #0]
 8012f84:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d038      	beq.n	8012ffe <emWin_LCD_Init+0xd6>
 8012f8c:	4d29      	ldr	r5, [pc, #164]	; (8013034 <emWin_LCD_Init+0x10c>)
 8012f8e:	2401      	movs	r4, #1
 8012f90:	4620      	mov	r0, r4
 8012f92:	f7fd fbe5 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8012f96:	4603      	mov	r3, r0
 8012f98:	9303      	str	r3, [sp, #12]
 8012f9a:	4620      	mov	r0, r4
 8012f9c:	3c01      	subs	r4, #1
 8012f9e:	b363      	cbz	r3, 8012ffa <emWin_LCD_Init+0xd2>
 8012fa0:	f7fe fafe 	bl	80115a0 <GUI_SelectLayer>
 8012fa4:	682b      	ldr	r3, [r5, #0]
 8012fa6:	2004      	movs	r0, #4
 8012fa8:	689b      	ldr	r3, [r3, #8]
 8012faa:	4798      	blx	r3
 8012fac:	6830      	ldr	r0, [r6, #0]
 8012fae:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8012fb2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8012fb6:	f643 7cff 	movw	ip, #16383	; 0x3fff
 8012fba:	4563      	cmp	r3, ip
 8012fbc:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8012fc0:	bfa8      	it	ge
 8012fc2:	4663      	movge	r3, ip
 8012fc4:	428b      	cmp	r3, r1
 8012fc6:	db0a      	blt.n	8012fde <emWin_LCD_Init+0xb6>
 8012fc8:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8012fcc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8012fd0:	45e6      	cmp	lr, ip
 8012fd2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8012fd6:	bfa8      	it	ge
 8012fd8:	46e6      	movge	lr, ip
 8012fda:	4596      	cmp	lr, r2
 8012fdc:	da17      	bge.n	801300e <emWin_LCD_Init+0xe6>
 8012fde:	682b      	ldr	r3, [r5, #0]
 8012fe0:	2000      	movs	r0, #0
 8012fe2:	689b      	ldr	r3, [r3, #8]
 8012fe4:	4798      	blx	r3
 8012fe6:	9b03      	ldr	r3, [sp, #12]
 8012fe8:	68db      	ldr	r3, [r3, #12]
 8012fea:	210e      	movs	r1, #14
 8012fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fee:	a803      	add	r0, sp, #12
 8012ff0:	4798      	blx	r3
 8012ff2:	4603      	mov	r3, r0
 8012ff4:	b108      	cbz	r0, 8012ffa <emWin_LCD_Init+0xd2>
 8012ff6:	9803      	ldr	r0, [sp, #12]
 8012ff8:	4798      	blx	r3
 8012ffa:	1c63      	adds	r3, r4, #1
 8012ffc:	d1c8      	bne.n	8012f90 <emWin_LCD_Init+0x68>
 8012ffe:	2000      	movs	r0, #0
 8013000:	b004      	add	sp, #16
 8013002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013006:	4620      	mov	r0, r4
 8013008:	b004      	add	sp, #16
 801300a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801300e:	7c40      	ldrb	r0, [r0, #17]
 8013010:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8013014:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8013018:	f8cd e000 	str.w	lr, [sp]
 801301c:	f8dc 8010 	ldr.w	r8, [ip, #16]
 8013020:	47c0      	blx	r8
 8013022:	e7dc      	b.n	8012fde <emWin_LCD_Init+0xb6>
 8013024:	2001      	movs	r0, #1
 8013026:	e7ef      	b.n	8013008 <emWin_LCD_Init+0xe0>
 8013028:	200000a8 	.word	0x200000a8
 801302c:	20030870 	.word	0x20030870
 8013030:	200000a4 	.word	0x200000a4
 8013034:	200000d8 	.word	0x200000d8

08013038 <LCD_Color2Index>:
 8013038:	4a04      	ldr	r2, [pc, #16]	; (801304c <LCD_Color2Index+0x14>)
 801303a:	4b05      	ldr	r3, [pc, #20]	; (8013050 <LCD_Color2Index+0x18>)
 801303c:	6812      	ldr	r2, [r2, #0]
 801303e:	7c52      	ldrb	r2, [r2, #17]
 8013040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013044:	691b      	ldr	r3, [r3, #16]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	4718      	bx	r3
 801304a:	bf00      	nop
 801304c:	200000a8 	.word	0x200000a8
 8013050:	20030870 	.word	0x20030870

08013054 <LCD_Index2Color>:
 8013054:	4a04      	ldr	r2, [pc, #16]	; (8013068 <LCD_Index2Color+0x14>)
 8013056:	4b05      	ldr	r3, [pc, #20]	; (801306c <LCD_Index2Color+0x18>)
 8013058:	6812      	ldr	r2, [r2, #0]
 801305a:	7c52      	ldrb	r2, [r2, #17]
 801305c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013060:	691b      	ldr	r3, [r3, #16]
 8013062:	685b      	ldr	r3, [r3, #4]
 8013064:	4718      	bx	r3
 8013066:	bf00      	nop
 8013068:	200000a8 	.word	0x200000a8
 801306c:	20030870 	.word	0x20030870

08013070 <LCD_SetColorIndex>:
 8013070:	4b04      	ldr	r3, [pc, #16]	; (8013084 <LCD_SetColorIndex+0x14>)
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	7c1a      	ldrb	r2, [r3, #16]
 8013076:	0752      	lsls	r2, r2, #29
 8013078:	bf4c      	ite	mi
 801307a:	6b9b      	ldrmi	r3, [r3, #56]	; 0x38
 801307c:	6bdb      	ldrpl	r3, [r3, #60]	; 0x3c
 801307e:	6018      	str	r0, [r3, #0]
 8013080:	4770      	bx	lr
 8013082:	bf00      	nop
 8013084:	200000a8 	.word	0x200000a8

08013088 <LCD_SetBkColorIndex>:
 8013088:	4b04      	ldr	r3, [pc, #16]	; (801309c <LCD_SetBkColorIndex+0x14>)
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	7c1a      	ldrb	r2, [r3, #16]
 801308e:	0752      	lsls	r2, r2, #29
 8013090:	bf4c      	ite	mi
 8013092:	6bdb      	ldrmi	r3, [r3, #60]	; 0x3c
 8013094:	6b9b      	ldrpl	r3, [r3, #56]	; 0x38
 8013096:	6018      	str	r0, [r3, #0]
 8013098:	4770      	bx	lr
 801309a:	bf00      	nop
 801309c:	200000a8 	.word	0x200000a8

080130a0 <LCD_SetBkColor>:
 80130a0:	4b01      	ldr	r3, [pc, #4]	; (80130a8 <LCD_SetBkColor+0x8>)
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	685b      	ldr	r3, [r3, #4]
 80130a6:	4718      	bx	r3
 80130a8:	200000d8 	.word	0x200000d8

080130ac <LCD_SetColor>:
 80130ac:	4b01      	ldr	r3, [pc, #4]	; (80130b4 <LCD_SetColor+0x8>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	4718      	bx	r3
 80130b4:	200000d8 	.word	0x200000d8

080130b8 <LCD_AA_MixColors16>:
 80130b8:	b508      	push	{r3, lr}
 80130ba:	0e0b      	lsrs	r3, r1, #24
 80130bc:	d103      	bne.n	80130c6 <LCD_AA_MixColors16+0xe>
 80130be:	0e03      	lsrs	r3, r0, #24
 80130c0:	2bff      	cmp	r3, #255	; 0xff
 80130c2:	d00f      	beq.n	80130e4 <LCD_AA_MixColors16+0x2c>
 80130c4:	b14b      	cbz	r3, 80130da <LCD_AA_MixColors16+0x22>
 80130c6:	4b0c      	ldr	r3, [pc, #48]	; (80130f8 <LCD_AA_MixColors16+0x40>)
 80130c8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80130cc:	b2d2      	uxtb	r2, r2
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	4798      	blx	r3
 80130d2:	4b0a      	ldr	r3, [pc, #40]	; (80130fc <LCD_AA_MixColors16+0x44>)
 80130d4:	685a      	ldr	r2, [r3, #4]
 80130d6:	4310      	orrs	r0, r2
 80130d8:	bd08      	pop	{r3, pc}
 80130da:	4b08      	ldr	r3, [pc, #32]	; (80130fc <LCD_AA_MixColors16+0x44>)
 80130dc:	685a      	ldr	r2, [r3, #4]
 80130de:	ea41 0002 	orr.w	r0, r1, r2
 80130e2:	bd08      	pop	{r3, pc}
 80130e4:	4b05      	ldr	r3, [pc, #20]	; (80130fc <LCD_AA_MixColors16+0x44>)
 80130e6:	685b      	ldr	r3, [r3, #4]
 80130e8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80130ec:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80130f0:	4318      	orrs	r0, r3
 80130f2:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 80130f6:	bd08      	pop	{r3, pc}
 80130f8:	200000c0 	.word	0x200000c0
 80130fc:	200000dc 	.word	0x200000dc

08013100 <LCD_AA_SetOrMask>:
 8013100:	4b02      	ldr	r3, [pc, #8]	; (801310c <LCD_AA_SetOrMask+0xc>)
 8013102:	685a      	ldr	r2, [r3, #4]
 8013104:	6058      	str	r0, [r3, #4]
 8013106:	4610      	mov	r0, r2
 8013108:	4770      	bx	lr
 801310a:	bf00      	nop
 801310c:	200000dc 	.word	0x200000dc

08013110 <_OnExit>:
 8013110:	b510      	push	{r4, lr}
 8013112:	4c04      	ldr	r4, [pc, #16]	; (8013124 <_OnExit+0x14>)
 8013114:	6820      	ldr	r0, [r4, #0]
 8013116:	f7fc faed 	bl	800f6f4 <GUI_ALLOC_FreeFixedBlock>
 801311a:	4a03      	ldr	r2, [pc, #12]	; (8013128 <_OnExit+0x18>)
 801311c:	2300      	movs	r3, #0
 801311e:	6023      	str	r3, [r4, #0]
 8013120:	6013      	str	r3, [r2, #0]
 8013122:	bd10      	pop	{r4, pc}
 8013124:	20030888 	.word	0x20030888
 8013128:	2002e364 	.word	0x2002e364

0801312c <LCD_InitColors>:
 801312c:	b538      	push	{r3, r4, r5, lr}
 801312e:	4d0b      	ldr	r5, [pc, #44]	; (801315c <LCD_InitColors+0x30>)
 8013130:	682c      	ldr	r4, [r5, #0]
 8013132:	b10c      	cbz	r4, 8013138 <LCD_InitColors+0xc>
 8013134:	2000      	movs	r0, #0
 8013136:	bd38      	pop	{r3, r4, r5, pc}
 8013138:	4b09      	ldr	r3, [pc, #36]	; (8013160 <LCD_InitColors+0x34>)
 801313a:	6818      	ldr	r0, [r3, #0]
 801313c:	0080      	lsls	r0, r0, #2
 801313e:	f7fc fae3 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8013142:	6028      	str	r0, [r5, #0]
 8013144:	b138      	cbz	r0, 8013156 <LCD_InitColors+0x2a>
 8013146:	4807      	ldr	r0, [pc, #28]	; (8013164 <LCD_InitColors+0x38>)
 8013148:	4b07      	ldr	r3, [pc, #28]	; (8013168 <LCD_InitColors+0x3c>)
 801314a:	f840 3f04 	str.w	r3, [r0, #4]!
 801314e:	f7fd fae1 	bl	8010714 <GUI__RegisterExit>
 8013152:	4620      	mov	r0, r4
 8013154:	bd38      	pop	{r3, r4, r5, pc}
 8013156:	2001      	movs	r0, #1
 8013158:	bd38      	pop	{r3, r4, r5, pc}
 801315a:	bf00      	nop
 801315c:	20030888 	.word	0x20030888
 8013160:	200000f4 	.word	0x200000f4
 8013164:	2002e364 	.word	0x2002e364
 8013168:	08013111 	.word	0x08013111

0801316c <LCD_GetpPalConvTable>:
 801316c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013170:	b360      	cbz	r0, 80131cc <LCD_GetpPalConvTable+0x60>
 8013172:	6885      	ldr	r5, [r0, #8]
 8013174:	b365      	cbz	r5, 80131d0 <LCD_GetpPalConvTable+0x64>
 8013176:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80131dc <LCD_GetpPalConvTable+0x70>
 801317a:	f8d8 6000 	ldr.w	r6, [r8]
 801317e:	b306      	cbz	r6, 80131c2 <LCD_GetpPalConvTable+0x56>
 8013180:	6807      	ldr	r7, [r0, #0]
 8013182:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 8013186:	dc1f      	bgt.n	80131c8 <LCD_GetpPalConvTable+0x5c>
 8013188:	4b12      	ldr	r3, [pc, #72]	; (80131d4 <LCD_GetpPalConvTable+0x68>)
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	429f      	cmp	r7, r3
 801318e:	bfa8      	it	ge
 8013190:	461f      	movge	r7, r3
 8013192:	2f00      	cmp	r7, #0
 8013194:	4681      	mov	r9, r0
 8013196:	dd0d      	ble.n	80131b4 <LCD_GetpPalConvTable+0x48>
 8013198:	3d04      	subs	r5, #4
 801319a:	2400      	movs	r4, #0
 801319c:	e001      	b.n	80131a2 <LCD_GetpPalConvTable+0x36>
 801319e:	f8d8 6000 	ldr.w	r6, [r8]
 80131a2:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80131a6:	f7ff ff47 	bl	8013038 <LCD_Color2Index>
 80131aa:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 80131ae:	3401      	adds	r4, #1
 80131b0:	42bc      	cmp	r4, r7
 80131b2:	d1f4      	bne.n	801319e <LCD_GetpPalConvTable+0x32>
 80131b4:	4b08      	ldr	r3, [pc, #32]	; (80131d8 <LCD_GetpPalConvTable+0x6c>)
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	b10b      	cbz	r3, 80131be <LCD_GetpPalConvTable+0x52>
 80131ba:	4648      	mov	r0, r9
 80131bc:	4798      	blx	r3
 80131be:	f8d8 6000 	ldr.w	r6, [r8]
 80131c2:	4630      	mov	r0, r6
 80131c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80131c8:	2600      	movs	r6, #0
 80131ca:	e7fa      	b.n	80131c2 <LCD_GetpPalConvTable+0x56>
 80131cc:	4606      	mov	r6, r0
 80131ce:	e7f8      	b.n	80131c2 <LCD_GetpPalConvTable+0x56>
 80131d0:	462e      	mov	r6, r5
 80131d2:	e7f6      	b.n	80131c2 <LCD_GetpPalConvTable+0x56>
 80131d4:	200000f4 	.word	0x200000f4
 80131d8:	2002e364 	.word	0x2002e364
 80131dc:	20030888 	.word	0x20030888

080131e0 <LCD_GetpPalConvTableBM>:
 80131e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80131e4:	b360      	cbz	r0, 8013240 <LCD_GetpPalConvTableBM+0x60>
 80131e6:	6885      	ldr	r5, [r0, #8]
 80131e8:	b365      	cbz	r5, 8013244 <LCD_GetpPalConvTableBM+0x64>
 80131ea:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8013250 <LCD_GetpPalConvTableBM+0x70>
 80131ee:	f8d8 6000 	ldr.w	r6, [r8]
 80131f2:	b306      	cbz	r6, 8013236 <LCD_GetpPalConvTableBM+0x56>
 80131f4:	6807      	ldr	r7, [r0, #0]
 80131f6:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 80131fa:	dc1f      	bgt.n	801323c <LCD_GetpPalConvTableBM+0x5c>
 80131fc:	4b12      	ldr	r3, [pc, #72]	; (8013248 <LCD_GetpPalConvTableBM+0x68>)
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	429f      	cmp	r7, r3
 8013202:	bfa8      	it	ge
 8013204:	461f      	movge	r7, r3
 8013206:	2f00      	cmp	r7, #0
 8013208:	4681      	mov	r9, r0
 801320a:	dd0d      	ble.n	8013228 <LCD_GetpPalConvTableBM+0x48>
 801320c:	3d04      	subs	r5, #4
 801320e:	2400      	movs	r4, #0
 8013210:	e001      	b.n	8013216 <LCD_GetpPalConvTableBM+0x36>
 8013212:	f8d8 6000 	ldr.w	r6, [r8]
 8013216:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801321a:	f7ff ff0d 	bl	8013038 <LCD_Color2Index>
 801321e:	f846 0024 	str.w	r0, [r6, r4, lsl #2]
 8013222:	3401      	adds	r4, #1
 8013224:	42bc      	cmp	r4, r7
 8013226:	d1f4      	bne.n	8013212 <LCD_GetpPalConvTableBM+0x32>
 8013228:	4b08      	ldr	r3, [pc, #32]	; (801324c <LCD_GetpPalConvTableBM+0x6c>)
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	b10b      	cbz	r3, 8013232 <LCD_GetpPalConvTableBM+0x52>
 801322e:	4648      	mov	r0, r9
 8013230:	4798      	blx	r3
 8013232:	f8d8 6000 	ldr.w	r6, [r8]
 8013236:	4630      	mov	r0, r6
 8013238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801323c:	2600      	movs	r6, #0
 801323e:	e7fa      	b.n	8013236 <LCD_GetpPalConvTableBM+0x56>
 8013240:	4606      	mov	r6, r0
 8013242:	e7f8      	b.n	8013236 <LCD_GetpPalConvTableBM+0x56>
 8013244:	462e      	mov	r6, r5
 8013246:	e7f6      	b.n	8013236 <LCD_GetpPalConvTableBM+0x56>
 8013248:	200000f4 	.word	0x200000f4
 801324c:	2002e364 	.word	0x2002e364
 8013250:	20030888 	.word	0x20030888

08013254 <LCD_InitLUT>:
 8013254:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013258:	f000 f9da 	bl	8013610 <LCD_GetNumLayers>
 801325c:	f1b0 0900 	subs.w	r9, r0, #0
 8013260:	dd2f      	ble.n	80132c2 <LCD_InitLUT+0x6e>
 8013262:	4f19      	ldr	r7, [pc, #100]	; (80132c8 <LCD_InitLUT+0x74>)
 8013264:	f8df b068 	ldr.w	fp, [pc, #104]	; 80132d0 <LCD_InitLUT+0x7c>
 8013268:	2500      	movs	r5, #0
 801326a:	4628      	mov	r0, r5
 801326c:	f7fd fa78 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8013270:	b320      	cbz	r0, 80132bc <LCD_InitLUT+0x68>
 8013272:	683b      	ldr	r3, [r7, #0]
 8013274:	4628      	mov	r0, r5
 8013276:	f893 8011 	ldrb.w	r8, [r3, #17]
 801327a:	745d      	strb	r5, [r3, #17]
 801327c:	f000 f87a 	bl	8013374 <LCD_GetBitsPerPixelEx>
 8013280:	2808      	cmp	r0, #8
 8013282:	dc18      	bgt.n	80132b6 <LCD_InitLUT+0x62>
 8013284:	f85b 3025 	ldr.w	r3, [fp, r5, lsl #2]
 8013288:	4a10      	ldr	r2, [pc, #64]	; (80132cc <LCD_InitLUT+0x78>)
 801328a:	691b      	ldr	r3, [r3, #16]
 801328c:	4293      	cmp	r3, r2
 801328e:	d012      	beq.n	80132b6 <LCD_InitLUT+0x62>
 8013290:	4628      	mov	r0, r5
 8013292:	f000 f87f 	bl	8013394 <LCD_GetNumColorsEx>
 8013296:	1e06      	subs	r6, r0, #0
 8013298:	dd0d      	ble.n	80132b6 <LCD_InitLUT+0x62>
 801329a:	2400      	movs	r4, #0
 801329c:	fa5f fa84 	uxtb.w	sl, r4
 80132a0:	4650      	mov	r0, sl
 80132a2:	f7ff fed7 	bl	8013054 <LCD_Index2Color>
 80132a6:	3401      	adds	r4, #1
 80132a8:	4602      	mov	r2, r0
 80132aa:	4651      	mov	r1, sl
 80132ac:	4628      	mov	r0, r5
 80132ae:	f000 fea7 	bl	8014000 <LCD_SetLUTEntryEx>
 80132b2:	42a6      	cmp	r6, r4
 80132b4:	d1f2      	bne.n	801329c <LCD_InitLUT+0x48>
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	f883 8011 	strb.w	r8, [r3, #17]
 80132bc:	3501      	adds	r5, #1
 80132be:	45a9      	cmp	r9, r5
 80132c0:	d1d3      	bne.n	801326a <LCD_InitLUT+0x16>
 80132c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132c6:	bf00      	nop
 80132c8:	200000a8 	.word	0x200000a8
 80132cc:	080314c4 	.word	0x080314c4
 80132d0:	20030870 	.word	0x20030870

080132d4 <LCD_GetBkColorIndex>:
 80132d4:	4b02      	ldr	r3, [pc, #8]	; (80132e0 <LCD_GetBkColorIndex+0xc>)
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132da:	6818      	ldr	r0, [r3, #0]
 80132dc:	4770      	bx	lr
 80132de:	bf00      	nop
 80132e0:	200000a8 	.word	0x200000a8

080132e4 <LCD_GetColorIndex>:
 80132e4:	4b02      	ldr	r3, [pc, #8]	; (80132f0 <LCD_GetColorIndex+0xc>)
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132ea:	6818      	ldr	r0, [r3, #0]
 80132ec:	4770      	bx	lr
 80132ee:	bf00      	nop
 80132f0:	200000a8 	.word	0x200000a8

080132f4 <LCD_GetXSizeEx>:
 80132f4:	2801      	cmp	r0, #1
 80132f6:	dd01      	ble.n	80132fc <LCD_GetXSizeEx+0x8>
 80132f8:	2000      	movs	r0, #0
 80132fa:	4770      	bx	lr
 80132fc:	b510      	push	{r4, lr}
 80132fe:	f7fd fa2f 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8013302:	b128      	cbz	r0, 8013310 <LCD_GetXSizeEx+0x1c>
 8013304:	68c3      	ldr	r3, [r0, #12]
 8013306:	2101      	movs	r1, #1
 8013308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801330a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801330e:	4718      	bx	r3
 8013310:	2000      	movs	r0, #0
 8013312:	bd10      	pop	{r4, pc}

08013314 <LCD_GetYSizeEx>:
 8013314:	2801      	cmp	r0, #1
 8013316:	dd01      	ble.n	801331c <LCD_GetYSizeEx+0x8>
 8013318:	2000      	movs	r0, #0
 801331a:	4770      	bx	lr
 801331c:	b510      	push	{r4, lr}
 801331e:	f7fd fa1f 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8013322:	b128      	cbz	r0, 8013330 <LCD_GetYSizeEx+0x1c>
 8013324:	68c3      	ldr	r3, [r0, #12]
 8013326:	2102      	movs	r1, #2
 8013328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801332a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801332e:	4718      	bx	r3
 8013330:	2000      	movs	r0, #0
 8013332:	bd10      	pop	{r4, pc}

08013334 <LCD_GetVXSizeEx>:
 8013334:	2801      	cmp	r0, #1
 8013336:	dd01      	ble.n	801333c <LCD_GetVXSizeEx+0x8>
 8013338:	2000      	movs	r0, #0
 801333a:	4770      	bx	lr
 801333c:	b510      	push	{r4, lr}
 801333e:	f7fd fa0f 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8013342:	b128      	cbz	r0, 8013350 <LCD_GetVXSizeEx+0x1c>
 8013344:	68c3      	ldr	r3, [r0, #12]
 8013346:	2103      	movs	r1, #3
 8013348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801334a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801334e:	4718      	bx	r3
 8013350:	2000      	movs	r0, #0
 8013352:	bd10      	pop	{r4, pc}

08013354 <LCD_GetVYSizeEx>:
 8013354:	2801      	cmp	r0, #1
 8013356:	dd01      	ble.n	801335c <LCD_GetVYSizeEx+0x8>
 8013358:	2000      	movs	r0, #0
 801335a:	4770      	bx	lr
 801335c:	b510      	push	{r4, lr}
 801335e:	f7fd f9ff 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8013362:	b128      	cbz	r0, 8013370 <LCD_GetVYSizeEx+0x1c>
 8013364:	68c3      	ldr	r3, [r0, #12]
 8013366:	2104      	movs	r1, #4
 8013368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801336a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801336e:	4718      	bx	r3
 8013370:	2000      	movs	r0, #0
 8013372:	bd10      	pop	{r4, pc}

08013374 <LCD_GetBitsPerPixelEx>:
 8013374:	2801      	cmp	r0, #1
 8013376:	dd01      	ble.n	801337c <LCD_GetBitsPerPixelEx+0x8>
 8013378:	2000      	movs	r0, #0
 801337a:	4770      	bx	lr
 801337c:	b510      	push	{r4, lr}
 801337e:	f7fd f9ef 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8013382:	b128      	cbz	r0, 8013390 <LCD_GetBitsPerPixelEx+0x1c>
 8013384:	68c3      	ldr	r3, [r0, #12]
 8013386:	2108      	movs	r1, #8
 8013388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801338a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801338e:	4718      	bx	r3
 8013390:	2000      	movs	r0, #0
 8013392:	bd10      	pop	{r4, pc}

08013394 <LCD_GetNumColorsEx>:
 8013394:	2801      	cmp	r0, #1
 8013396:	dd01      	ble.n	801339c <LCD_GetNumColorsEx+0x8>
 8013398:	2000      	movs	r0, #0
 801339a:	4770      	bx	lr
 801339c:	b510      	push	{r4, lr}
 801339e:	f7fd f9df 	bl	8010760 <GUI_DEVICE__GetpDriver>
 80133a2:	b128      	cbz	r0, 80133b0 <LCD_GetNumColorsEx+0x1c>
 80133a4:	68c3      	ldr	r3, [r0, #12]
 80133a6:	2109      	movs	r1, #9
 80133a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133ae:	4718      	bx	r3
 80133b0:	2000      	movs	r0, #0
 80133b2:	bd10      	pop	{r4, pc}

080133b4 <LCD_GetMirrorXEx>:
 80133b4:	2801      	cmp	r0, #1
 80133b6:	dd01      	ble.n	80133bc <LCD_GetMirrorXEx+0x8>
 80133b8:	2000      	movs	r0, #0
 80133ba:	4770      	bx	lr
 80133bc:	b510      	push	{r4, lr}
 80133be:	f7fd f9cf 	bl	8010760 <GUI_DEVICE__GetpDriver>
 80133c2:	b128      	cbz	r0, 80133d0 <LCD_GetMirrorXEx+0x1c>
 80133c4:	68c3      	ldr	r3, [r0, #12]
 80133c6:	210c      	movs	r1, #12
 80133c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133ce:	4718      	bx	r3
 80133d0:	2000      	movs	r0, #0
 80133d2:	bd10      	pop	{r4, pc}

080133d4 <LCD_GetMirrorYEx>:
 80133d4:	2801      	cmp	r0, #1
 80133d6:	dd01      	ble.n	80133dc <LCD_GetMirrorYEx+0x8>
 80133d8:	2000      	movs	r0, #0
 80133da:	4770      	bx	lr
 80133dc:	b510      	push	{r4, lr}
 80133de:	f7fd f9bf 	bl	8010760 <GUI_DEVICE__GetpDriver>
 80133e2:	b128      	cbz	r0, 80133f0 <LCD_GetMirrorYEx+0x1c>
 80133e4:	68c3      	ldr	r3, [r0, #12]
 80133e6:	210d      	movs	r1, #13
 80133e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133ee:	4718      	bx	r3
 80133f0:	2000      	movs	r0, #0
 80133f2:	bd10      	pop	{r4, pc}

080133f4 <LCD_GetSwapXYEx>:
 80133f4:	2801      	cmp	r0, #1
 80133f6:	dd01      	ble.n	80133fc <LCD_GetSwapXYEx+0x8>
 80133f8:	2000      	movs	r0, #0
 80133fa:	4770      	bx	lr
 80133fc:	b510      	push	{r4, lr}
 80133fe:	f7fd f9af 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8013402:	b128      	cbz	r0, 8013410 <LCD_GetSwapXYEx+0x1c>
 8013404:	68c3      	ldr	r3, [r0, #12]
 8013406:	210e      	movs	r1, #14
 8013408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801340a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801340e:	4718      	bx	r3
 8013410:	2000      	movs	r0, #0
 8013412:	bd10      	pop	{r4, pc}

08013414 <LCD_GetXSize>:
 8013414:	4b09      	ldr	r3, [pc, #36]	; (801343c <LCD_GetXSize+0x28>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	7c58      	ldrb	r0, [r3, #17]
 801341a:	2801      	cmp	r0, #1
 801341c:	dd01      	ble.n	8013422 <LCD_GetXSize+0xe>
 801341e:	2000      	movs	r0, #0
 8013420:	4770      	bx	lr
 8013422:	b510      	push	{r4, lr}
 8013424:	f7fd f99c 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8013428:	b128      	cbz	r0, 8013436 <LCD_GetXSize+0x22>
 801342a:	68c3      	ldr	r3, [r0, #12]
 801342c:	2101      	movs	r1, #1
 801342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013434:	4718      	bx	r3
 8013436:	2000      	movs	r0, #0
 8013438:	bd10      	pop	{r4, pc}
 801343a:	bf00      	nop
 801343c:	200000a8 	.word	0x200000a8

08013440 <LCD_GetYSize>:
 8013440:	4b09      	ldr	r3, [pc, #36]	; (8013468 <LCD_GetYSize+0x28>)
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	7c58      	ldrb	r0, [r3, #17]
 8013446:	2801      	cmp	r0, #1
 8013448:	dd01      	ble.n	801344e <LCD_GetYSize+0xe>
 801344a:	2000      	movs	r0, #0
 801344c:	4770      	bx	lr
 801344e:	b510      	push	{r4, lr}
 8013450:	f7fd f986 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8013454:	b128      	cbz	r0, 8013462 <LCD_GetYSize+0x22>
 8013456:	68c3      	ldr	r3, [r0, #12]
 8013458:	2102      	movs	r1, #2
 801345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801345c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013460:	4718      	bx	r3
 8013462:	2000      	movs	r0, #0
 8013464:	bd10      	pop	{r4, pc}
 8013466:	bf00      	nop
 8013468:	200000a8 	.word	0x200000a8

0801346c <LCD_GetNumColors>:
 801346c:	4b09      	ldr	r3, [pc, #36]	; (8013494 <LCD_GetNumColors+0x28>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	7c58      	ldrb	r0, [r3, #17]
 8013472:	2801      	cmp	r0, #1
 8013474:	dd01      	ble.n	801347a <LCD_GetNumColors+0xe>
 8013476:	2000      	movs	r0, #0
 8013478:	4770      	bx	lr
 801347a:	b510      	push	{r4, lr}
 801347c:	f7fd f970 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8013480:	b128      	cbz	r0, 801348e <LCD_GetNumColors+0x22>
 8013482:	68c3      	ldr	r3, [r0, #12]
 8013484:	2109      	movs	r1, #9
 8013486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801348c:	4718      	bx	r3
 801348e:	2000      	movs	r0, #0
 8013490:	bd10      	pop	{r4, pc}
 8013492:	bf00      	nop
 8013494:	200000a8 	.word	0x200000a8

08013498 <GUI_GetBitsPerPixelEx>:
 8013498:	4b03      	ldr	r3, [pc, #12]	; (80134a8 <GUI_GetBitsPerPixelEx+0x10>)
 801349a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 801349e:	68c3      	ldr	r3, [r0, #12]
 80134a0:	2108      	movs	r1, #8
 80134a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134a4:	4718      	bx	r3
 80134a6:	bf00      	nop
 80134a8:	20030870 	.word	0x20030870

080134ac <LCD_GetPalette>:
 80134ac:	b510      	push	{r4, lr}
 80134ae:	4b06      	ldr	r3, [pc, #24]	; (80134c8 <LCD_GetPalette+0x1c>)
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	7c58      	ldrb	r0, [r3, #17]
 80134b4:	f7fd f954 	bl	8010760 <GUI_DEVICE__GetpDriver>
 80134b8:	b128      	cbz	r0, 80134c6 <LCD_GetPalette+0x1a>
 80134ba:	68c3      	ldr	r3, [r0, #12]
 80134bc:	2102      	movs	r1, #2
 80134be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80134c4:	4718      	bx	r3
 80134c6:	bd10      	pop	{r4, pc}
 80134c8:	200000a8 	.word	0x200000a8

080134cc <GUI_GetpfIndex2ColorEx>:
 80134cc:	4b02      	ldr	r3, [pc, #8]	; (80134d8 <GUI_GetpfIndex2ColorEx+0xc>)
 80134ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80134d2:	691b      	ldr	r3, [r3, #16]
 80134d4:	6858      	ldr	r0, [r3, #4]
 80134d6:	4770      	bx	lr
 80134d8:	20030870 	.word	0x20030870

080134dc <GUI_GetpfColor2IndexEx>:
 80134dc:	4b02      	ldr	r3, [pc, #8]	; (80134e8 <GUI_GetpfColor2IndexEx+0xc>)
 80134de:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80134e2:	691b      	ldr	r3, [r3, #16]
 80134e4:	6818      	ldr	r0, [r3, #0]
 80134e6:	4770      	bx	lr
 80134e8:	20030870 	.word	0x20030870

080134ec <LCD_GetXSizeMax>:
 80134ec:	b538      	push	{r3, r4, r5, lr}
 80134ee:	2501      	movs	r5, #1
 80134f0:	4628      	mov	r0, r5
 80134f2:	f7fd f935 	bl	8010760 <GUI_DEVICE__GetpDriver>
 80134f6:	2400      	movs	r4, #0
 80134f8:	2101      	movs	r1, #1
 80134fa:	b178      	cbz	r0, 801351c <LCD_GetXSizeMax+0x30>
 80134fc:	68c3      	ldr	r3, [r0, #12]
 80134fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013500:	4798      	blx	r3
 8013502:	4284      	cmp	r4, r0
 8013504:	bfb8      	it	lt
 8013506:	4604      	movlt	r4, r0
 8013508:	b90d      	cbnz	r5, 801350e <LCD_GetXSizeMax+0x22>
 801350a:	4620      	mov	r0, r4
 801350c:	bd38      	pop	{r3, r4, r5, pc}
 801350e:	2500      	movs	r5, #0
 8013510:	4628      	mov	r0, r5
 8013512:	f7fd f925 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8013516:	2101      	movs	r1, #1
 8013518:	2800      	cmp	r0, #0
 801351a:	d1ef      	bne.n	80134fc <LCD_GetXSizeMax+0x10>
 801351c:	e7f1      	b.n	8013502 <LCD_GetXSizeMax+0x16>
 801351e:	bf00      	nop

08013520 <LCD_GetYSizeMax>:
 8013520:	b538      	push	{r3, r4, r5, lr}
 8013522:	2501      	movs	r5, #1
 8013524:	4628      	mov	r0, r5
 8013526:	f7fd f91b 	bl	8010760 <GUI_DEVICE__GetpDriver>
 801352a:	2400      	movs	r4, #0
 801352c:	2102      	movs	r1, #2
 801352e:	b178      	cbz	r0, 8013550 <LCD_GetYSizeMax+0x30>
 8013530:	68c3      	ldr	r3, [r0, #12]
 8013532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013534:	4798      	blx	r3
 8013536:	4284      	cmp	r4, r0
 8013538:	bfb8      	it	lt
 801353a:	4604      	movlt	r4, r0
 801353c:	b90d      	cbnz	r5, 8013542 <LCD_GetYSizeMax+0x22>
 801353e:	4620      	mov	r0, r4
 8013540:	bd38      	pop	{r3, r4, r5, pc}
 8013542:	2500      	movs	r5, #0
 8013544:	4628      	mov	r0, r5
 8013546:	f7fd f90b 	bl	8010760 <GUI_DEVICE__GetpDriver>
 801354a:	2102      	movs	r1, #2
 801354c:	2800      	cmp	r0, #0
 801354e:	d1ef      	bne.n	8013530 <LCD_GetYSizeMax+0x10>
 8013550:	e7f1      	b.n	8013536 <LCD_GetYSizeMax+0x16>
 8013552:	bf00      	nop

08013554 <LCD_GetVXSizeMax>:
 8013554:	b538      	push	{r3, r4, r5, lr}
 8013556:	2501      	movs	r5, #1
 8013558:	4628      	mov	r0, r5
 801355a:	f7fd f901 	bl	8010760 <GUI_DEVICE__GetpDriver>
 801355e:	2400      	movs	r4, #0
 8013560:	2103      	movs	r1, #3
 8013562:	b178      	cbz	r0, 8013584 <LCD_GetVXSizeMax+0x30>
 8013564:	68c3      	ldr	r3, [r0, #12]
 8013566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013568:	4798      	blx	r3
 801356a:	4284      	cmp	r4, r0
 801356c:	bfb8      	it	lt
 801356e:	4604      	movlt	r4, r0
 8013570:	b90d      	cbnz	r5, 8013576 <LCD_GetVXSizeMax+0x22>
 8013572:	4620      	mov	r0, r4
 8013574:	bd38      	pop	{r3, r4, r5, pc}
 8013576:	2500      	movs	r5, #0
 8013578:	4628      	mov	r0, r5
 801357a:	f7fd f8f1 	bl	8010760 <GUI_DEVICE__GetpDriver>
 801357e:	2103      	movs	r1, #3
 8013580:	2800      	cmp	r0, #0
 8013582:	d1ef      	bne.n	8013564 <LCD_GetVXSizeMax+0x10>
 8013584:	e7f1      	b.n	801356a <LCD_GetVXSizeMax+0x16>
 8013586:	bf00      	nop

08013588 <LCD_SetDisplaySize>:
 8013588:	4b01      	ldr	r3, [pc, #4]	; (8013590 <LCD_SetDisplaySize+0x8>)
 801358a:	e883 0003 	stmia.w	r3, {r0, r1}
 801358e:	4770      	bx	lr
 8013590:	2002e370 	.word	0x2002e370

08013594 <LCD_GetXSizeDisplay>:
 8013594:	4b01      	ldr	r3, [pc, #4]	; (801359c <LCD_GetXSizeDisplay+0x8>)
 8013596:	6818      	ldr	r0, [r3, #0]
 8013598:	4770      	bx	lr
 801359a:	bf00      	nop
 801359c:	2002e370 	.word	0x2002e370

080135a0 <LCD_GetYSizeDisplay>:
 80135a0:	4b01      	ldr	r3, [pc, #4]	; (80135a8 <LCD_GetYSizeDisplay+0x8>)
 80135a2:	6858      	ldr	r0, [r3, #4]
 80135a4:	4770      	bx	lr
 80135a6:	bf00      	nop
 80135a8:	2002e370 	.word	0x2002e370

080135ac <LCD__GetBPPDevice>:
 80135ac:	b1c8      	cbz	r0, 80135e2 <LCD__GetBPPDevice+0x36>
 80135ae:	f030 0301 	bics.w	r3, r0, #1
 80135b2:	d017      	beq.n	80135e4 <LCD__GetBPPDevice+0x38>
 80135b4:	f030 0303 	bics.w	r3, r0, #3
 80135b8:	d101      	bne.n	80135be <LCD__GetBPPDevice+0x12>
 80135ba:	2008      	movs	r0, #8
 80135bc:	4770      	bx	lr
 80135be:	f030 0307 	bics.w	r3, r0, #7
 80135c2:	d0fa      	beq.n	80135ba <LCD__GetBPPDevice+0xe>
 80135c4:	f030 030f 	bics.w	r3, r0, #15
 80135c8:	d0f7      	beq.n	80135ba <LCD__GetBPPDevice+0xe>
 80135ca:	f030 031f 	bics.w	r3, r0, #31
 80135ce:	d0f4      	beq.n	80135ba <LCD__GetBPPDevice+0xe>
 80135d0:	f030 03ff 	bics.w	r3, r0, #255	; 0xff
 80135d4:	d0f1      	beq.n	80135ba <LCD__GetBPPDevice+0xe>
 80135d6:	f420 73ff 	bic.w	r3, r0, #510	; 0x1fe
 80135da:	f023 0301 	bic.w	r3, r3, #1
 80135de:	b91b      	cbnz	r3, 80135e8 <LCD__GetBPPDevice+0x3c>
 80135e0:	2010      	movs	r0, #16
 80135e2:	4770      	bx	lr
 80135e4:	2001      	movs	r0, #1
 80135e6:	4770      	bx	lr
 80135e8:	f420 637f 	bic.w	r3, r0, #4080	; 0xff0
 80135ec:	f023 030f 	bic.w	r3, r3, #15
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d0f5      	beq.n	80135e0 <LCD__GetBPPDevice+0x34>
 80135f4:	f420 43ff 	bic.w	r3, r0, #32640	; 0x7f80
 80135f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d0ef      	beq.n	80135e0 <LCD__GetBPPDevice+0x34>
 8013600:	0c00      	lsrs	r0, r0, #16
 8013602:	0400      	lsls	r0, r0, #16
 8013604:	2800      	cmp	r0, #0
 8013606:	bf0c      	ite	eq
 8013608:	2010      	moveq	r0, #16
 801360a:	2020      	movne	r0, #32
 801360c:	4770      	bx	lr
 801360e:	bf00      	nop

08013610 <LCD_GetNumLayers>:
 8013610:	b510      	push	{r4, lr}
 8013612:	2000      	movs	r0, #0
 8013614:	f7fd f8a4 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8013618:	1c04      	adds	r4, r0, #0
 801361a:	f04f 0001 	mov.w	r0, #1
 801361e:	bf18      	it	ne
 8013620:	2401      	movne	r4, #1
 8013622:	f7fd f89d 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8013626:	b100      	cbz	r0, 801362a <LCD_GetNumLayers+0x1a>
 8013628:	3401      	adds	r4, #1
 801362a:	4620      	mov	r0, r4
 801362c:	bd10      	pop	{r4, pc}
 801362e:	bf00      	nop

08013630 <_GetByte_pPixel>:
 8013630:	4a02      	ldr	r2, [pc, #8]	; (801363c <_GetByte_pPixel+0xc>)
 8013632:	6813      	ldr	r3, [r2, #0]
 8013634:	1c59      	adds	r1, r3, #1
 8013636:	6011      	str	r1, [r2, #0]
 8013638:	7818      	ldrb	r0, [r3, #0]
 801363a:	4770      	bx	lr
 801363c:	2002e378 	.word	0x2002e378

08013640 <_DrawBitmap>:
 8013640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013644:	f8df b2d8 	ldr.w	fp, [pc, #728]	; 8013920 <_DrawBitmap+0x2e0>
 8013648:	b08b      	sub	sp, #44	; 0x2c
 801364a:	f8db 4008 	ldr.w	r4, [fp, #8]
 801364e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013650:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 8013654:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
 8013658:	9001      	str	r0, [sp, #4]
 801365a:	9103      	str	r1, [sp, #12]
 801365c:	9305      	str	r3, [sp, #20]
 801365e:	2c00      	cmp	r4, #0
 8013660:	f000 8088 	beq.w	8013774 <_DrawBitmap+0x134>
 8013664:	4bad      	ldr	r3, [pc, #692]	; (801391c <_DrawBitmap+0x2dc>)
 8013666:	f8db 6000 	ldr.w	r6, [fp]
 801366a:	4690      	mov	r8, r2
 801366c:	681a      	ldr	r2, [r3, #0]
 801366e:	7c13      	ldrb	r3, [r2, #16]
 8013670:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8013672:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8013674:	6809      	ldr	r1, [r1, #0]
 8013676:	6812      	ldr	r2, [r2, #0]
 8013678:	9108      	str	r1, [sp, #32]
 801367a:	f003 0302 	and.w	r3, r3, #2
 801367e:	b2db      	uxtb	r3, r3
 8013680:	9306      	str	r3, [sp, #24]
 8013682:	ea4a 0309 	orr.w	r3, sl, r9
 8013686:	9209      	str	r2, [sp, #36]	; 0x24
 8013688:	9302      	str	r3, [sp, #8]
 801368a:	2d00      	cmp	r5, #0
 801368c:	f000 815e 	beq.w	801394c <_DrawBitmap+0x30c>
 8013690:	68ab      	ldr	r3, [r5, #8]
 8013692:	2b00      	cmp	r3, #0
 8013694:	f000 8155 	beq.w	8013942 <_DrawBitmap+0x302>
 8013698:	4628      	mov	r0, r5
 801369a:	f7ff fd67 	bl	801316c <LCD_GetpPalConvTable>
 801369e:	9007      	str	r0, [sp, #28]
 80136a0:	2800      	cmp	r0, #0
 80136a2:	d067      	beq.n	8013774 <_DrawBitmap+0x134>
 80136a4:	f1ba 0f01 	cmp.w	sl, #1
 80136a8:	f000 813e 	beq.w	8013928 <_DrawBitmap+0x2e8>
 80136ac:	9b02      	ldr	r3, [sp, #8]
 80136ae:	2b01      	cmp	r3, #1
 80136b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80136b2:	f000 8127 	beq.w	8013904 <_DrawBitmap+0x2c4>
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	f000 8145 	beq.w	8013946 <_DrawBitmap+0x306>
 80136bc:	2700      	movs	r7, #0
 80136be:	463c      	mov	r4, r7
 80136c0:	461a      	mov	r2, r3
 80136c2:	2300      	movs	r3, #0
 80136c4:	60d6      	str	r6, [r2, #12]
 80136c6:	6096      	str	r6, [r2, #8]
 80136c8:	6053      	str	r3, [r2, #4]
 80136ca:	6013      	str	r3, [r2, #0]
 80136cc:	9b05      	ldr	r3, [sp, #20]
 80136ce:	42bb      	cmp	r3, r7
 80136d0:	dd48      	ble.n	8013764 <_DrawBitmap+0x124>
 80136d2:	f8db 3008 	ldr.w	r3, [fp, #8]
 80136d6:	4798      	blx	r3
 80136d8:	f8db 3008 	ldr.w	r3, [fp, #8]
 80136dc:	4606      	mov	r6, r0
 80136de:	4798      	blx	r3
 80136e0:	4605      	mov	r5, r0
 80136e2:	2e00      	cmp	r6, #0
 80136e4:	d058      	beq.n	8013798 <_DrawBitmap+0x158>
 80136e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80136e8:	b133      	cbz	r3, 80136f8 <_DrawBitmap+0xb8>
 80136ea:	461a      	mov	r2, r3
 80136ec:	4b8c      	ldr	r3, [pc, #560]	; (8013920 <_DrawBitmap+0x2e0>)
 80136ee:	6014      	str	r4, [r2, #0]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	6057      	str	r7, [r2, #4]
 80136f4:	3b02      	subs	r3, #2
 80136f6:	6093      	str	r3, [r2, #8]
 80136f8:	4b88      	ldr	r3, [pc, #544]	; (801391c <_DrawBitmap+0x2dc>)
 80136fa:	9907      	ldr	r1, [sp, #28]
 80136fc:	681b      	ldr	r3, [r3, #0]
 80136fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013700:	2900      	cmp	r1, #0
 8013702:	f000 80bb 	beq.w	801387c <_DrawBitmap+0x23c>
 8013706:	b22a      	sxth	r2, r5
 8013708:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801370c:	601a      	str	r2, [r3, #0]
 801370e:	2d00      	cmp	r5, #0
 8013710:	f040 8090 	bne.w	8013834 <_DrawBitmap+0x1f4>
 8013714:	9b06      	ldr	r3, [sp, #24]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d12f      	bne.n	801377a <_DrawBitmap+0x13a>
 801371a:	9b02      	ldr	r3, [sp, #8]
 801371c:	2b01      	cmp	r3, #1
 801371e:	f000 80d0 	beq.w	80138c2 <_DrawBitmap+0x282>
 8013722:	4623      	mov	r3, r4
 8013724:	9c03      	ldr	r4, [sp, #12]
 8013726:	9901      	ldr	r1, [sp, #4]
 8013728:	18f5      	adds	r5, r6, r3
 801372a:	4545      	cmp	r5, r8
 801372c:	bfa8      	it	ge
 801372e:	4645      	movge	r5, r8
 8013730:	fb03 1009 	mla	r0, r3, r9, r1
 8013734:	1aea      	subs	r2, r5, r3
 8013736:	fb07 410a 	mla	r1, r7, sl, r4
 801373a:	fb09 0202 	mla	r2, r9, r2, r0
 801373e:	1b5b      	subs	r3, r3, r5
 8013740:	eb0a 0e01 	add.w	lr, sl, r1
 8013744:	441e      	add	r6, r3
 8013746:	3a01      	subs	r2, #1
 8013748:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 801374c:	f7ff f91a 	bl	8012984 <LCD_FillRect>
 8013750:	b2f6      	uxtb	r6, r6
 8013752:	45a8      	cmp	r8, r5
 8013754:	bf06      	itte	eq
 8013756:	3701      	addeq	r7, #1
 8013758:	2300      	moveq	r3, #0
 801375a:	462b      	movne	r3, r5
 801375c:	2e00      	cmp	r6, #0
 801375e:	d1e2      	bne.n	8013726 <_DrawBitmap+0xe6>
 8013760:	461c      	mov	r4, r3
 8013762:	e7b3      	b.n	80136cc <_DrawBitmap+0x8c>
 8013764:	4b6d      	ldr	r3, [pc, #436]	; (801391c <_DrawBitmap+0x2dc>)
 8013766:	9908      	ldr	r1, [sp, #32]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801376e:	6011      	str	r1, [r2, #0]
 8013770:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013772:	601a      	str	r2, [r3, #0]
 8013774:	b00b      	add	sp, #44	; 0x2c
 8013776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801377a:	1933      	adds	r3, r6, r4
 801377c:	4543      	cmp	r3, r8
 801377e:	bfa8      	it	ge
 8013780:	4643      	movge	r3, r8
 8013782:	1ae4      	subs	r4, r4, r3
 8013784:	4426      	add	r6, r4
 8013786:	4543      	cmp	r3, r8
 8013788:	b2f6      	uxtb	r6, r6
 801378a:	bf06      	itte	eq
 801378c:	3701      	addeq	r7, #1
 801378e:	2400      	moveq	r4, #0
 8013790:	461c      	movne	r4, r3
 8013792:	2e00      	cmp	r6, #0
 8013794:	d1f1      	bne.n	801377a <_DrawBitmap+0x13a>
 8013796:	e799      	b.n	80136cc <_DrawBitmap+0x8c>
 8013798:	9b07      	ldr	r3, [sp, #28]
 801379a:	9304      	str	r3, [sp, #16]
 801379c:	e01c      	b.n	80137d8 <_DrawBitmap+0x198>
 801379e:	f7ff fc67 	bl	8013070 <LCD_SetColorIndex>
 80137a2:	9b01      	ldr	r3, [sp, #4]
 80137a4:	fb09 3004 	mla	r0, r9, r4, r3
 80137a8:	9b03      	ldr	r3, [sp, #12]
 80137aa:	fb0a 3107 	mla	r1, sl, r7, r3
 80137ae:	eb09 0200 	add.w	r2, r9, r0
 80137b2:	eb0a 0301 	add.w	r3, sl, r1
 80137b6:	3a01      	subs	r2, #1
 80137b8:	3b01      	subs	r3, #1
 80137ba:	f7ff f8e3 	bl	8012984 <LCD_FillRect>
 80137be:	3401      	adds	r4, #1
 80137c0:	45a0      	cmp	r8, r4
 80137c2:	dc04      	bgt.n	80137ce <_DrawBitmap+0x18e>
 80137c4:	9b05      	ldr	r3, [sp, #20]
 80137c6:	3701      	adds	r7, #1
 80137c8:	42bb      	cmp	r3, r7
 80137ca:	ddcb      	ble.n	8013764 <_DrawBitmap+0x124>
 80137cc:	2400      	movs	r4, #0
 80137ce:	3d01      	subs	r5, #1
 80137d0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80137d4:	f43f af7a 	beq.w	80136cc <_DrawBitmap+0x8c>
 80137d8:	f8db 3008 	ldr.w	r3, [fp, #8]
 80137dc:	4798      	blx	r3
 80137de:	b910      	cbnz	r0, 80137e6 <_DrawBitmap+0x1a6>
 80137e0:	9b06      	ldr	r3, [sp, #24]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d1eb      	bne.n	80137be <_DrawBitmap+0x17e>
 80137e6:	9b04      	ldr	r3, [sp, #16]
 80137e8:	b113      	cbz	r3, 80137f0 <_DrawBitmap+0x1b0>
 80137ea:	b200      	sxth	r0, r0
 80137ec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80137f0:	9b02      	ldr	r3, [sp, #8]
 80137f2:	2b01      	cmp	r3, #1
 80137f4:	d1d3      	bne.n	801379e <_DrawBitmap+0x15e>
 80137f6:	4b49      	ldr	r3, [pc, #292]	; (801391c <_DrawBitmap+0x2dc>)
 80137f8:	9a03      	ldr	r2, [sp, #12]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8013800:	18ba      	adds	r2, r7, r2
 8013802:	428a      	cmp	r2, r1
 8013804:	dbdb      	blt.n	80137be <_DrawBitmap+0x17e>
 8013806:	9901      	ldr	r1, [sp, #4]
 8013808:	f9b3 e008 	ldrsh.w	lr, [r3, #8]
 801380c:	1866      	adds	r6, r4, r1
 801380e:	4576      	cmp	r6, lr
 8013810:	dbd5      	blt.n	80137be <_DrawBitmap+0x17e>
 8013812:	f9b3 e00c 	ldrsh.w	lr, [r3, #12]
 8013816:	4576      	cmp	r6, lr
 8013818:	dcd1      	bgt.n	80137be <_DrawBitmap+0x17e>
 801381a:	7c5b      	ldrb	r3, [r3, #17]
 801381c:	4941      	ldr	r1, [pc, #260]	; (8013924 <_DrawBitmap+0x2e4>)
 801381e:	f851 e023 	ldr.w	lr, [r1, r3, lsl #2]
 8013822:	4603      	mov	r3, r0
 8013824:	f8de 000c 	ldr.w	r0, [lr, #12]
 8013828:	6980      	ldr	r0, [r0, #24]
 801382a:	4631      	mov	r1, r6
 801382c:	4606      	mov	r6, r0
 801382e:	4670      	mov	r0, lr
 8013830:	47b0      	blx	r6
 8013832:	e7c4      	b.n	80137be <_DrawBitmap+0x17e>
 8013834:	9b02      	ldr	r3, [sp, #8]
 8013836:	2b01      	cmp	r3, #1
 8013838:	d022      	beq.n	8013880 <_DrawBitmap+0x240>
 801383a:	4623      	mov	r3, r4
 801383c:	9c03      	ldr	r4, [sp, #12]
 801383e:	9901      	ldr	r1, [sp, #4]
 8013840:	18f5      	adds	r5, r6, r3
 8013842:	4545      	cmp	r5, r8
 8013844:	bfa8      	it	ge
 8013846:	4645      	movge	r5, r8
 8013848:	fb03 1009 	mla	r0, r3, r9, r1
 801384c:	1aea      	subs	r2, r5, r3
 801384e:	fb07 410a 	mla	r1, r7, sl, r4
 8013852:	fb09 0202 	mla	r2, r9, r2, r0
 8013856:	1b5b      	subs	r3, r3, r5
 8013858:	eb0a 0e01 	add.w	lr, sl, r1
 801385c:	441e      	add	r6, r3
 801385e:	3a01      	subs	r2, #1
 8013860:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8013864:	f7ff f88e 	bl	8012984 <LCD_FillRect>
 8013868:	b2f6      	uxtb	r6, r6
 801386a:	45a8      	cmp	r8, r5
 801386c:	bf06      	itte	eq
 801386e:	3701      	addeq	r7, #1
 8013870:	2300      	moveq	r3, #0
 8013872:	462b      	movne	r3, r5
 8013874:	2e00      	cmp	r6, #0
 8013876:	d1e2      	bne.n	801383e <_DrawBitmap+0x1fe>
 8013878:	461c      	mov	r4, r3
 801387a:	e727      	b.n	80136cc <_DrawBitmap+0x8c>
 801387c:	462a      	mov	r2, r5
 801387e:	e745      	b.n	801370c <_DrawBitmap+0xcc>
 8013880:	4620      	mov	r0, r4
 8013882:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 8013886:	9c01      	ldr	r4, [sp, #4]
 8013888:	46c1      	mov	r9, r8
 801388a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801388e:	1835      	adds	r5, r6, r0
 8013890:	454d      	cmp	r5, r9
 8013892:	bfa8      	it	ge
 8013894:	464d      	movge	r5, r9
 8013896:	1b41      	subs	r1, r0, r5
 8013898:	1962      	adds	r2, r4, r5
 801389a:	4420      	add	r0, r4
 801389c:	440e      	add	r6, r1
 801389e:	3a01      	subs	r2, #1
 80138a0:	eb08 0107 	add.w	r1, r8, r7
 80138a4:	f7ff f81a 	bl	80128dc <LCD_DrawHLine>
 80138a8:	b2f6      	uxtb	r6, r6
 80138aa:	45a9      	cmp	r9, r5
 80138ac:	bf06      	itte	eq
 80138ae:	3701      	addeq	r7, #1
 80138b0:	2000      	moveq	r0, #0
 80138b2:	4628      	movne	r0, r5
 80138b4:	2e00      	cmp	r6, #0
 80138b6:	d1ea      	bne.n	801388e <_DrawBitmap+0x24e>
 80138b8:	46c8      	mov	r8, r9
 80138ba:	4604      	mov	r4, r0
 80138bc:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 80138c0:	e704      	b.n	80136cc <_DrawBitmap+0x8c>
 80138c2:	4620      	mov	r0, r4
 80138c4:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 80138c8:	9c01      	ldr	r4, [sp, #4]
 80138ca:	46c1      	mov	r9, r8
 80138cc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80138d0:	1835      	adds	r5, r6, r0
 80138d2:	454d      	cmp	r5, r9
 80138d4:	bfa8      	it	ge
 80138d6:	464d      	movge	r5, r9
 80138d8:	1b41      	subs	r1, r0, r5
 80138da:	1962      	adds	r2, r4, r5
 80138dc:	4420      	add	r0, r4
 80138de:	440e      	add	r6, r1
 80138e0:	3a01      	subs	r2, #1
 80138e2:	eb08 0107 	add.w	r1, r8, r7
 80138e6:	f7fe fff9 	bl	80128dc <LCD_DrawHLine>
 80138ea:	b2f6      	uxtb	r6, r6
 80138ec:	45a9      	cmp	r9, r5
 80138ee:	bf06      	itte	eq
 80138f0:	3701      	addeq	r7, #1
 80138f2:	2000      	moveq	r0, #0
 80138f4:	4628      	movne	r0, r5
 80138f6:	2e00      	cmp	r6, #0
 80138f8:	d1ea      	bne.n	80138d0 <_DrawBitmap+0x290>
 80138fa:	46c8      	mov	r8, r9
 80138fc:	4604      	mov	r4, r0
 80138fe:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 8013902:	e6e3      	b.n	80136cc <_DrawBitmap+0x8c>
 8013904:	b1fb      	cbz	r3, 8013946 <_DrawBitmap+0x306>
 8013906:	68da      	ldr	r2, [r3, #12]
 8013908:	f8db 3000 	ldr.w	r3, [fp]
 801390c:	4904      	ldr	r1, [pc, #16]	; (8013920 <_DrawBitmap+0x2e0>)
 801390e:	429a      	cmp	r2, r3
 8013910:	d01e      	beq.n	8013950 <_DrawBitmap+0x310>
 8013912:	2700      	movs	r7, #0
 8013914:	463c      	mov	r4, r7
 8013916:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013918:	e6d3      	b.n	80136c2 <_DrawBitmap+0x82>
 801391a:	bf00      	nop
 801391c:	200000a8 	.word	0x200000a8
 8013920:	2002e378 	.word	0x2002e378
 8013924:	20030870 	.word	0x20030870
 8013928:	4b12      	ldr	r3, [pc, #72]	; (8013974 <_DrawBitmap+0x334>)
 801392a:	9a03      	ldr	r2, [sp, #12]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8013932:	1a9b      	subs	r3, r3, r2
 8013934:	9a05      	ldr	r2, [sp, #20]
 8013936:	3301      	adds	r3, #1
 8013938:	429a      	cmp	r2, r3
 801393a:	bfa8      	it	ge
 801393c:	461a      	movge	r2, r3
 801393e:	9205      	str	r2, [sp, #20]
 8013940:	e6b4      	b.n	80136ac <_DrawBitmap+0x6c>
 8013942:	9307      	str	r3, [sp, #28]
 8013944:	e6ae      	b.n	80136a4 <_DrawBitmap+0x64>
 8013946:	461f      	mov	r7, r3
 8013948:	461c      	mov	r4, r3
 801394a:	e6bf      	b.n	80136cc <_DrawBitmap+0x8c>
 801394c:	9507      	str	r5, [sp, #28]
 801394e:	e6a9      	b.n	80136a4 <_DrawBitmap+0x64>
 8013950:	4b08      	ldr	r3, [pc, #32]	; (8013974 <_DrawBitmap+0x334>)
 8013952:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	6857      	ldr	r7, [r2, #4]
 8013958:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801395c:	9a03      	ldr	r2, [sp, #12]
 801395e:	1a9b      	subs	r3, r3, r2
 8013960:	42bb      	cmp	r3, r7
 8013962:	ddd6      	ble.n	8013912 <_DrawBitmap+0x2d2>
 8013964:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013966:	689b      	ldr	r3, [r3, #8]
 8013968:	600b      	str	r3, [r1, #0]
 801396a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801396c:	681c      	ldr	r4, [r3, #0]
 801396e:	461a      	mov	r2, r3
 8013970:	e6a7      	b.n	80136c2 <_DrawBitmap+0x82>
 8013972:	bf00      	nop
 8013974:	200000a8 	.word	0x200000a8

08013978 <_DrawBitmap_RLE8>:
 8013978:	b4f0      	push	{r4, r5, r6, r7}
 801397a:	4c08      	ldr	r4, [pc, #32]	; (801399c <_DrawBitmap_RLE8+0x24>)
 801397c:	9f07      	ldr	r7, [sp, #28]
 801397e:	9d06      	ldr	r5, [sp, #24]
 8013980:	9706      	str	r7, [sp, #24]
 8013982:	f104 070c 	add.w	r7, r4, #12
 8013986:	9e04      	ldr	r6, [sp, #16]
 8013988:	9707      	str	r7, [sp, #28]
 801398a:	9f05      	ldr	r7, [sp, #20]
 801398c:	9505      	str	r5, [sp, #20]
 801398e:	4d04      	ldr	r5, [pc, #16]	; (80139a0 <_DrawBitmap_RLE8+0x28>)
 8013990:	9704      	str	r7, [sp, #16]
 8013992:	6026      	str	r6, [r4, #0]
 8013994:	60a5      	str	r5, [r4, #8]
 8013996:	bcf0      	pop	{r4, r5, r6, r7}
 8013998:	f7ff be52 	b.w	8013640 <_DrawBitmap>
 801399c:	2002e378 	.word	0x2002e378
 80139a0:	08013631 	.word	0x08013631

080139a4 <_DrawBitmap_RLE8Ex>:
 80139a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139a8:	4c25      	ldr	r4, [pc, #148]	; (8013a40 <_DrawBitmap_RLE8Ex+0x9c>)
 80139aa:	b087      	sub	sp, #28
 80139ac:	f8d4 b004 	ldr.w	fp, [r4, #4]
 80139b0:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 80139b4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80139b8:	f1bb 0f00 	cmp.w	fp, #0
 80139bc:	d013      	beq.n	80139e6 <_DrawBitmap_RLE8Ex+0x42>
 80139be:	4698      	mov	r8, r3
 80139c0:	4617      	mov	r7, r2
 80139c2:	460e      	mov	r6, r1
 80139c4:	4605      	mov	r5, r0
 80139c6:	f7fc f895 	bl	800faf4 <GUI_ALLOC_RequestSize>
 80139ca:	6862      	ldr	r2, [r4, #4]
 80139cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80139d0:	69d3      	ldr	r3, [r2, #28]
 80139d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80139d6:	d909      	bls.n	80139ec <_DrawBitmap_RLE8Ex+0x48>
 80139d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80139dc:	61d0      	str	r0, [r2, #28]
 80139de:	f7fc f9dd 	bl	800fd9c <GUI_ALLOC_AllocZero>
 80139e2:	4683      	mov	fp, r0
 80139e4:	b930      	cbnz	r0, 80139f4 <_DrawBitmap_RLE8Ex+0x50>
 80139e6:	b007      	add	sp, #28
 80139e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d0fa      	beq.n	80139e6 <_DrawBitmap_RLE8Ex+0x42>
 80139f0:	4618      	mov	r0, r3
 80139f2:	e7f4      	b.n	80139de <_DrawBitmap_RLE8Ex+0x3a>
 80139f4:	6861      	ldr	r1, [r4, #4]
 80139f6:	9105      	str	r1, [sp, #20]
 80139f8:	f7fb ffb6 	bl	800f968 <GUI_ALLOC_LockH>
 80139fc:	9905      	ldr	r1, [sp, #20]
 80139fe:	6863      	ldr	r3, [r4, #4]
 8013a00:	6148      	str	r0, [r1, #20]
 8013a02:	2200      	movs	r2, #0
 8013a04:	6108      	str	r0, [r1, #16]
 8013a06:	68d9      	ldr	r1, [r3, #12]
 8013a08:	619a      	str	r2, [r3, #24]
 8013a0a:	9203      	str	r2, [sp, #12]
 8013a0c:	f8cd a008 	str.w	sl, [sp, #8]
 8013a10:	f8cd 9004 	str.w	r9, [sp, #4]
 8013a14:	689b      	ldr	r3, [r3, #8]
 8013a16:	9105      	str	r1, [sp, #20]
 8013a18:	9300      	str	r3, [sp, #0]
 8013a1a:	463a      	mov	r2, r7
 8013a1c:	4643      	mov	r3, r8
 8013a1e:	4631      	mov	r1, r6
 8013a20:	4628      	mov	r0, r5
 8013a22:	f7ff fe0d 	bl	8013640 <_DrawBitmap>
 8013a26:	6860      	ldr	r0, [r4, #4]
 8013a28:	9905      	ldr	r1, [sp, #20]
 8013a2a:	60c1      	str	r1, [r0, #12]
 8013a2c:	3010      	adds	r0, #16
 8013a2e:	f7fb ffad 	bl	800f98c <GUI_ALLOC_UnlockH>
 8013a32:	4658      	mov	r0, fp
 8013a34:	b007      	add	sp, #28
 8013a36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a3a:	f7fc b937 	b.w	800fcac <GUI_ALLOC_Free>
 8013a3e:	bf00      	nop
 8013a40:	2002e378 	.word	0x2002e378

08013a44 <_DrawBitmap_RLEAlpha>:
 8013a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a48:	b08b      	sub	sp, #44	; 0x2c
 8013a4a:	4605      	mov	r5, r0
 8013a4c:	2001      	movs	r0, #1
 8013a4e:	460f      	mov	r7, r1
 8013a50:	9503      	str	r5, [sp, #12]
 8013a52:	9104      	str	r1, [sp, #16]
 8013a54:	4616      	mov	r6, r2
 8013a56:	469a      	mov	sl, r3
 8013a58:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8013a5a:	f7fe faab 	bl	8011fb4 <GUI__AllocAlphaBuffer>
 8013a5e:	b110      	cbz	r0, 8013a66 <_DrawBitmap_RLEAlpha+0x22>
 8013a60:	b00b      	add	sp, #44	; 0x2c
 8013a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a66:	4603      	mov	r3, r0
 8013a68:	a902      	add	r1, sp, #8
 8013a6a:	aa05      	add	r2, sp, #20
 8013a6c:	f7fe fa3e 	bl	8011eec <GUI__GetAlphaBuffer>
 8013a70:	2800      	cmp	r0, #0
 8013a72:	d1f5      	bne.n	8013a60 <_DrawBitmap_RLEAlpha+0x1c>
 8013a74:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8013c04 <_DrawBitmap_RLEAlpha+0x1c0>
 8013a78:	9a03      	ldr	r2, [sp, #12]
 8013a7a:	f8db 3000 	ldr.w	r3, [fp]
 8013a7e:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
 8013a82:	428a      	cmp	r2, r1
 8013a84:	dcec      	bgt.n	8013a60 <_DrawBitmap_RLEAlpha+0x1c>
 8013a86:	9904      	ldr	r1, [sp, #16]
 8013a88:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8013a8c:	4281      	cmp	r1, r0
 8013a8e:	dce7      	bgt.n	8013a60 <_DrawBitmap_RLEAlpha+0x1c>
 8013a90:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8013a94:	4432      	add	r2, r6
 8013a96:	4282      	cmp	r2, r0
 8013a98:	dde2      	ble.n	8013a60 <_DrawBitmap_RLEAlpha+0x1c>
 8013a9a:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8013a9e:	4451      	add	r1, sl
 8013aa0:	4291      	cmp	r1, r2
 8013aa2:	dddd      	ble.n	8013a60 <_DrawBitmap_RLEAlpha+0x1c>
 8013aa4:	7c5b      	ldrb	r3, [r3, #17]
 8013aa6:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8013c08 <_DrawBitmap_RLEAlpha+0x1c4>
 8013aaa:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8013aae:	68c3      	ldr	r3, [r0, #12]
 8013ab0:	2108      	movs	r1, #8
 8013ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ab4:	4798      	blx	r3
 8013ab6:	2817      	cmp	r0, #23
 8013ab8:	bf84      	itt	hi
 8013aba:	2320      	movhi	r3, #32
 8013abc:	9308      	strhi	r3, [sp, #32]
 8013abe:	f8db 3000 	ldr.w	r3, [fp]
 8013ac2:	bf98      	it	ls
 8013ac4:	9008      	strls	r0, [sp, #32]
 8013ac6:	7c5b      	ldrb	r3, [r3, #17]
 8013ac8:	4a4b      	ldr	r2, [pc, #300]	; (8013bf8 <_DrawBitmap_RLEAlpha+0x1b4>)
 8013aca:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8013ace:	691b      	ldr	r3, [r3, #16]
 8013ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ad2:	1a9b      	subs	r3, r3, r2
 8013ad4:	bf18      	it	ne
 8013ad6:	2301      	movne	r3, #1
 8013ad8:	9307      	str	r3, [sp, #28]
 8013ada:	f7fc fab5 	bl	8010048 <GUI_GetColor>
 8013ade:	f8db 2000 	ldr.w	r2, [fp]
 8013ae2:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8013ae6:	eb05 0906 	add.w	r9, r5, r6
 8013aea:	429d      	cmp	r5, r3
 8013aec:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8013af0:	db7f      	blt.n	8013bf2 <_DrawBitmap_RLEAlpha+0x1ae>
 8013af2:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 8013af6:	429f      	cmp	r7, r3
 8013af8:	db7b      	blt.n	8013bf2 <_DrawBitmap_RLEAlpha+0x1ae>
 8013afa:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8013afe:	4599      	cmp	r9, r3
 8013b00:	dc77      	bgt.n	8013bf2 <_DrawBitmap_RLEAlpha+0x1ae>
 8013b02:	eb07 030a 	add.w	r3, r7, sl
 8013b06:	493d      	ldr	r1, [pc, #244]	; (8013bfc <_DrawBitmap_RLEAlpha+0x1b8>)
 8013b08:	f9b2 700e 	ldrsh.w	r7, [r2, #14]
 8013b0c:	4a3c      	ldr	r2, [pc, #240]	; (8013c00 <_DrawBitmap_RLEAlpha+0x1bc>)
 8013b0e:	3b01      	subs	r3, #1
 8013b10:	42bb      	cmp	r3, r7
 8013b12:	bfd4      	ite	le
 8013b14:	460f      	movle	r7, r1
 8013b16:	4617      	movgt	r7, r2
 8013b18:	9903      	ldr	r1, [sp, #12]
 8013b1a:	fb0a f606 	mul.w	r6, sl, r6
 8013b1e:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
 8013b22:	f894 b000 	ldrb.w	fp, [r4]
 8013b26:	f894 a001 	ldrb.w	sl, [r4, #1]
 8013b2a:	f1bb 0f00 	cmp.w	fp, #0
 8013b2e:	d035      	beq.n	8013b9c <_DrawBitmap_RLEAlpha+0x158>
 8013b30:	1ca3      	adds	r3, r4, #2
 8013b32:	f1ca 02ff 	rsb	r2, sl, #255	; 0xff
 8013b36:	ebcb 0606 	rsb	r6, fp, r6
 8013b3a:	9301      	str	r3, [sp, #4]
 8013b3c:	ea48 6402 	orr.w	r4, r8, r2, lsl #24
 8013b40:	ebc1 0309 	rsb	r3, r1, r9
 8013b44:	459b      	cmp	fp, r3
 8013b46:	dd1f      	ble.n	8013b88 <_DrawBitmap_RLEAlpha+0x144>
 8013b48:	3301      	adds	r3, #1
 8013b4a:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8013b4e:	9306      	str	r3, [sp, #24]
 8013b50:	d009      	beq.n	8013b66 <_DrawBitmap_RLEAlpha+0x122>
 8013b52:	9905      	ldr	r1, [sp, #20]
 8013b54:	b11b      	cbz	r3, 8013b5e <_DrawBitmap_RLEAlpha+0x11a>
 8013b56:	3b01      	subs	r3, #1
 8013b58:	f841 4b04 	str.w	r4, [r1], #4
 8013b5c:	d1fb      	bne.n	8013b56 <_DrawBitmap_RLEAlpha+0x112>
 8013b5e:	a802      	add	r0, sp, #8
 8013b60:	47b8      	blx	r7
 8013b62:	9903      	ldr	r1, [sp, #12]
 8013b64:	9b06      	ldr	r3, [sp, #24]
 8013b66:	4419      	add	r1, r3
 8013b68:	4589      	cmp	r9, r1
 8013b6a:	db07      	blt.n	8013b7c <_DrawBitmap_RLEAlpha+0x138>
 8013b6c:	9103      	str	r1, [sp, #12]
 8013b6e:	ebbb 0b03 	subs.w	fp, fp, r3
 8013b72:	d1e5      	bne.n	8013b40 <_DrawBitmap_RLEAlpha+0xfc>
 8013b74:	9c01      	ldr	r4, [sp, #4]
 8013b76:	2e00      	cmp	r6, #0
 8013b78:	d1d3      	bne.n	8013b22 <_DrawBitmap_RLEAlpha+0xde>
 8013b7a:	e771      	b.n	8013a60 <_DrawBitmap_RLEAlpha+0x1c>
 8013b7c:	9904      	ldr	r1, [sp, #16]
 8013b7e:	9503      	str	r5, [sp, #12]
 8013b80:	3101      	adds	r1, #1
 8013b82:	9104      	str	r1, [sp, #16]
 8013b84:	4629      	mov	r1, r5
 8013b86:	e7f2      	b.n	8013b6e <_DrawBitmap_RLEAlpha+0x12a>
 8013b88:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8013b8c:	f8cd b018 	str.w	fp, [sp, #24]
 8013b90:	d002      	beq.n	8013b98 <_DrawBitmap_RLEAlpha+0x154>
 8013b92:	9905      	ldr	r1, [sp, #20]
 8013b94:	465b      	mov	r3, fp
 8013b96:	e7de      	b.n	8013b56 <_DrawBitmap_RLEAlpha+0x112>
 8013b98:	465b      	mov	r3, fp
 8013b9a:	e7e4      	b.n	8013b66 <_DrawBitmap_RLEAlpha+0x122>
 8013b9c:	3402      	adds	r4, #2
 8013b9e:	ebca 0606 	rsb	r6, sl, r6
 8013ba2:	ebc1 0109 	rsb	r1, r1, r9
 8013ba6:	458a      	cmp	sl, r1
 8013ba8:	bfcc      	ite	gt
 8013baa:	3101      	addgt	r1, #1
 8013bac:	4651      	movle	r1, sl
 8013bae:	9106      	str	r1, [sp, #24]
 8013bb0:	9a05      	ldr	r2, [sp, #20]
 8013bb2:	b151      	cbz	r1, 8013bca <_DrawBitmap_RLEAlpha+0x186>
 8013bb4:	4421      	add	r1, r4
 8013bb6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013bba:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8013bbe:	ea48 6303 	orr.w	r3, r8, r3, lsl #24
 8013bc2:	42a1      	cmp	r1, r4
 8013bc4:	f842 3b04 	str.w	r3, [r2], #4
 8013bc8:	d1f5      	bne.n	8013bb6 <_DrawBitmap_RLEAlpha+0x172>
 8013bca:	a802      	add	r0, sp, #8
 8013bcc:	47b8      	blx	r7
 8013bce:	9a06      	ldr	r2, [sp, #24]
 8013bd0:	9903      	ldr	r1, [sp, #12]
 8013bd2:	4411      	add	r1, r2
 8013bd4:	4589      	cmp	r9, r1
 8013bd6:	db06      	blt.n	8013be6 <_DrawBitmap_RLEAlpha+0x1a2>
 8013bd8:	9103      	str	r1, [sp, #12]
 8013bda:	ebba 0a02 	subs.w	sl, sl, r2
 8013bde:	d1e0      	bne.n	8013ba2 <_DrawBitmap_RLEAlpha+0x15e>
 8013be0:	2e00      	cmp	r6, #0
 8013be2:	d19e      	bne.n	8013b22 <_DrawBitmap_RLEAlpha+0xde>
 8013be4:	e73c      	b.n	8013a60 <_DrawBitmap_RLEAlpha+0x1c>
 8013be6:	9b04      	ldr	r3, [sp, #16]
 8013be8:	9503      	str	r5, [sp, #12]
 8013bea:	3301      	adds	r3, #1
 8013bec:	9304      	str	r3, [sp, #16]
 8013bee:	4629      	mov	r1, r5
 8013bf0:	e7f3      	b.n	8013bda <_DrawBitmap_RLEAlpha+0x196>
 8013bf2:	4f03      	ldr	r7, [pc, #12]	; (8013c00 <_DrawBitmap_RLEAlpha+0x1bc>)
 8013bf4:	e790      	b.n	8013b18 <_DrawBitmap_RLEAlpha+0xd4>
 8013bf6:	bf00      	nop
 8013bf8:	080314dc 	.word	0x080314dc
 8013bfc:	08013c0d 	.word	0x08013c0d
 8013c00:	08013c95 	.word	0x08013c95
 8013c04:	200000a8 	.word	0x200000a8
 8013c08:	20030870 	.word	0x20030870

08013c0c <_Draw>:
 8013c0c:	b570      	push	{r4, r5, r6, lr}
 8013c0e:	4d20      	ldr	r5, [pc, #128]	; (8013c90 <_Draw+0x84>)
 8013c10:	b088      	sub	sp, #32
 8013c12:	4604      	mov	r4, r0
 8013c14:	ae07      	add	r6, sp, #28
 8013c16:	3004      	adds	r0, #4
 8013c18:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8013c1a:	e88d 0060 	stmia.w	sp, {r5, r6}
 8013c1e:	f7fe f825 	bl	8011c6c <GUI__DoAlphaBlending>
 8013c22:	9a07      	ldr	r2, [sp, #28]
 8013c24:	6020      	str	r0, [r4, #0]
 8013c26:	07d3      	lsls	r3, r2, #31
 8013c28:	d510      	bpl.n	8013c4c <_Draw+0x40>
 8013c2a:	6962      	ldr	r2, [r4, #20]
 8013c2c:	b982      	cbnz	r2, 8013c50 <_Draw+0x44>
 8013c2e:	6922      	ldr	r2, [r4, #16]
 8013c30:	4603      	mov	r3, r0
 8013c32:	68a1      	ldr	r1, [r4, #8]
 8013c34:	6860      	ldr	r0, [r4, #4]
 8013c36:	69a5      	ldr	r5, [r4, #24]
 8013c38:	9304      	str	r3, [sp, #16]
 8013c3a:	2400      	movs	r4, #0
 8013c3c:	2301      	movs	r3, #1
 8013c3e:	9502      	str	r5, [sp, #8]
 8013c40:	9405      	str	r4, [sp, #20]
 8013c42:	9403      	str	r4, [sp, #12]
 8013c44:	9301      	str	r3, [sp, #4]
 8013c46:	9300      	str	r3, [sp, #0]
 8013c48:	f7fe ffda 	bl	8012c00 <LCD_DrawBitmap>
 8013c4c:	b008      	add	sp, #32
 8013c4e:	bd70      	pop	{r4, r5, r6, pc}
 8013c50:	69e3      	ldr	r3, [r4, #28]
 8013c52:	69a2      	ldr	r2, [r4, #24]
 8013c54:	6921      	ldr	r1, [r4, #16]
 8013c56:	f008 fdf1 	bl	801c83c <GUI__CompactPixelIndicesEx>
 8013c5a:	b940      	cbnz	r0, 8013c6e <_Draw+0x62>
 8013c5c:	69e3      	ldr	r3, [r4, #28]
 8013c5e:	6825      	ldr	r5, [r4, #0]
 8013c60:	691e      	ldr	r6, [r3, #16]
 8013c62:	b146      	cbz	r6, 8013c76 <_Draw+0x6a>
 8013c64:	2304      	movs	r3, #4
 8013c66:	6922      	ldr	r2, [r4, #16]
 8013c68:	4629      	mov	r1, r5
 8013c6a:	4628      	mov	r0, r5
 8013c6c:	47b0      	blx	r6
 8013c6e:	6922      	ldr	r2, [r4, #16]
 8013c70:	6823      	ldr	r3, [r4, #0]
 8013c72:	e7de      	b.n	8013c32 <_Draw+0x26>
 8013c74:	69e3      	ldr	r3, [r4, #28]
 8013c76:	6828      	ldr	r0, [r5, #0]
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	4798      	blx	r3
 8013c7c:	6922      	ldr	r2, [r4, #16]
 8013c7e:	f845 0b04 	str.w	r0, [r5], #4
 8013c82:	3a01      	subs	r2, #1
 8013c84:	6122      	str	r2, [r4, #16]
 8013c86:	2a00      	cmp	r2, #0
 8013c88:	d1f4      	bne.n	8013c74 <_Draw+0x68>
 8013c8a:	6823      	ldr	r3, [r4, #0]
 8013c8c:	e7d1      	b.n	8013c32 <_Draw+0x26>
 8013c8e:	bf00      	nop
 8013c90:	0800ed8d 	.word	0x0800ed8d

08013c94 <_DrawClip>:
 8013c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c96:	4b19      	ldr	r3, [pc, #100]	; (8013cfc <_DrawClip+0x68>)
 8013c98:	6882      	ldr	r2, [r0, #8]
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	6845      	ldr	r5, [r0, #4]
 8013c9e:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8013ca2:	68c7      	ldr	r7, [r0, #12]
 8013ca4:	6906      	ldr	r6, [r0, #16]
 8013ca6:	428a      	cmp	r2, r1
 8013ca8:	4604      	mov	r4, r0
 8013caa:	db20      	blt.n	8013cee <_DrawClip+0x5a>
 8013cac:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8013cb0:	428a      	cmp	r2, r1
 8013cb2:	dc1c      	bgt.n	8013cee <_DrawClip+0x5a>
 8013cb4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8013cb8:	4295      	cmp	r5, r2
 8013cba:	dc18      	bgt.n	8013cee <_DrawClip+0x5a>
 8013cbc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8013cc0:	19ab      	adds	r3, r5, r6
 8013cc2:	428b      	cmp	r3, r1
 8013cc4:	dd13      	ble.n	8013cee <_DrawClip+0x5a>
 8013cc6:	428d      	cmp	r5, r1
 8013cc8:	da15      	bge.n	8013cf6 <_DrawClip+0x62>
 8013cca:	1b4b      	subs	r3, r1, r5
 8013ccc:	1af0      	subs	r0, r6, r3
 8013cce:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
 8013cd2:	6061      	str	r1, [r4, #4]
 8013cd4:	6120      	str	r0, [r4, #16]
 8013cd6:	180b      	adds	r3, r1, r0
 8013cd8:	f8c4 e00c 	str.w	lr, [r4, #12]
 8013cdc:	3b01      	subs	r3, #1
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	da02      	bge.n	8013ce8 <_DrawClip+0x54>
 8013ce2:	1a9b      	subs	r3, r3, r2
 8013ce4:	1ac3      	subs	r3, r0, r3
 8013ce6:	6123      	str	r3, [r4, #16]
 8013ce8:	4620      	mov	r0, r4
 8013cea:	f7ff ff8f 	bl	8013c0c <_Draw>
 8013cee:	6065      	str	r5, [r4, #4]
 8013cf0:	60e7      	str	r7, [r4, #12]
 8013cf2:	6126      	str	r6, [r4, #16]
 8013cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cf6:	4630      	mov	r0, r6
 8013cf8:	e7f0      	b.n	8013cdc <_DrawClip+0x48>
 8013cfa:	bf00      	nop
 8013cfc:	200000a8 	.word	0x200000a8

08013d00 <LCD_ReadRectEx>:
 8013d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d04:	b085      	sub	sp, #20
 8013d06:	4681      	mov	r9, r0
 8013d08:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013d0a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8013d0c:	68ed      	ldr	r5, [r5, #12]
 8013d0e:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 8013d12:	696f      	ldr	r7, [r5, #20]
 8013d14:	4616      	mov	r6, r2
 8013d16:	460d      	mov	r5, r1
 8013d18:	469a      	mov	sl, r3
 8013d1a:	f1b8 0f00 	cmp.w	r8, #0
 8013d1e:	d00f      	beq.n	8013d40 <LCD_ReadRectEx+0x40>
 8013d20:	2101      	movs	r1, #1
 8013d22:	a80f      	add	r0, sp, #60	; 0x3c
 8013d24:	47c0      	blx	r8
 8013d26:	4680      	mov	r8, r0
 8013d28:	b150      	cbz	r0, 8013d40 <LCD_ReadRectEx+0x40>
 8013d2a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013d2c:	9401      	str	r4, [sp, #4]
 8013d2e:	f8cd a000 	str.w	sl, [sp]
 8013d32:	4633      	mov	r3, r6
 8013d34:	462a      	mov	r2, r5
 8013d36:	4649      	mov	r1, r9
 8013d38:	47c0      	blx	r8
 8013d3a:	b005      	add	sp, #20
 8013d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d40:	4b6b      	ldr	r3, [pc, #428]	; (8013ef0 <LCD_ReadRectEx+0x1f0>)
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	7c58      	ldrb	r0, [r3, #17]
 8013d46:	f7ff fba7 	bl	8013498 <GUI_GetBitsPerPixelEx>
 8013d4a:	2808      	cmp	r0, #8
 8013d4c:	dc34      	bgt.n	8013db8 <LCD_ReadRectEx+0xb8>
 8013d4e:	2301      	movs	r3, #1
 8013d50:	4555      	cmp	r5, sl
 8013d52:	dcf2      	bgt.n	8013d3a <LCD_ReadRectEx+0x3a>
 8013d54:	2b02      	cmp	r3, #2
 8013d56:	d00a      	beq.n	8013d6e <LCD_ReadRectEx+0x6e>
 8013d58:	2b04      	cmp	r3, #4
 8013d5a:	d01d      	beq.n	8013d98 <LCD_ReadRectEx+0x98>
 8013d5c:	2b01      	cmp	r3, #1
 8013d5e:	d030      	beq.n	8013dc2 <LCD_ReadRectEx+0xc2>
 8013d60:	3501      	adds	r5, #1
 8013d62:	45aa      	cmp	sl, r5
 8013d64:	daf6      	bge.n	8013d54 <LCD_ReadRectEx+0x54>
 8013d66:	e7e8      	b.n	8013d3a <LCD_ReadRectEx+0x3a>
 8013d68:	3501      	adds	r5, #1
 8013d6a:	4555      	cmp	r5, sl
 8013d6c:	dce5      	bgt.n	8013d3a <LCD_ReadRectEx+0x3a>
 8013d6e:	45b1      	cmp	r9, r6
 8013d70:	bfd8      	it	le
 8013d72:	46c8      	movle	r8, r9
 8013d74:	dcf8      	bgt.n	8013d68 <LCD_ReadRectEx+0x68>
 8013d76:	4641      	mov	r1, r8
 8013d78:	462a      	mov	r2, r5
 8013d7a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013d7c:	47b8      	blx	r7
 8013d7e:	f108 0801 	add.w	r8, r8, #1
 8013d82:	4546      	cmp	r6, r8
 8013d84:	f824 0b02 	strh.w	r0, [r4], #2
 8013d88:	daf5      	bge.n	8013d76 <LCD_ReadRectEx+0x76>
 8013d8a:	3501      	adds	r5, #1
 8013d8c:	45aa      	cmp	sl, r5
 8013d8e:	daee      	bge.n	8013d6e <LCD_ReadRectEx+0x6e>
 8013d90:	e7d3      	b.n	8013d3a <LCD_ReadRectEx+0x3a>
 8013d92:	3501      	adds	r5, #1
 8013d94:	45aa      	cmp	sl, r5
 8013d96:	dbd0      	blt.n	8013d3a <LCD_ReadRectEx+0x3a>
 8013d98:	45b1      	cmp	r9, r6
 8013d9a:	bfd8      	it	le
 8013d9c:	46c8      	movle	r8, r9
 8013d9e:	f300 80a1 	bgt.w	8013ee4 <LCD_ReadRectEx+0x1e4>
 8013da2:	4641      	mov	r1, r8
 8013da4:	462a      	mov	r2, r5
 8013da6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013da8:	47b8      	blx	r7
 8013daa:	f108 0801 	add.w	r8, r8, #1
 8013dae:	4546      	cmp	r6, r8
 8013db0:	f844 0b04 	str.w	r0, [r4], #4
 8013db4:	daf5      	bge.n	8013da2 <LCD_ReadRectEx+0xa2>
 8013db6:	e7ec      	b.n	8013d92 <LCD_ReadRectEx+0x92>
 8013db8:	2811      	cmp	r0, #17
 8013dba:	bfb4      	ite	lt
 8013dbc:	2302      	movlt	r3, #2
 8013dbe:	2304      	movge	r3, #4
 8013dc0:	e7c6      	b.n	8013d50 <LCD_ReadRectEx+0x50>
 8013dc2:	1e43      	subs	r3, r0, #1
 8013dc4:	9303      	str	r3, [sp, #12]
 8013dc6:	f04f 0800 	mov.w	r8, #0
 8013dca:	f8cd a008 	str.w	sl, [sp, #8]
 8013dce:	9b03      	ldr	r3, [sp, #12]
 8013dd0:	2b07      	cmp	r3, #7
 8013dd2:	f200 8081 	bhi.w	8013ed8 <LCD_ReadRectEx+0x1d8>
 8013dd6:	e8df f003 	tbb	[pc, r3]
 8013dda:	5833      	.short	0x5833
 8013ddc:	04041717 	.word	0x04041717
 8013de0:	0404      	.short	0x0404
 8013de2:	45b1      	cmp	r9, r6
 8013de4:	bfd8      	it	le
 8013de6:	46cb      	movle	fp, r9
 8013de8:	dc09      	bgt.n	8013dfe <LCD_ReadRectEx+0xfe>
 8013dea:	4659      	mov	r1, fp
 8013dec:	462a      	mov	r2, r5
 8013dee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013df0:	47b8      	blx	r7
 8013df2:	f10b 0b01 	add.w	fp, fp, #1
 8013df6:	455e      	cmp	r6, fp
 8013df8:	f804 0b01 	strb.w	r0, [r4], #1
 8013dfc:	daf5      	bge.n	8013dea <LCD_ReadRectEx+0xea>
 8013dfe:	9b02      	ldr	r3, [sp, #8]
 8013e00:	3501      	adds	r5, #1
 8013e02:	42ab      	cmp	r3, r5
 8013e04:	dae3      	bge.n	8013dce <LCD_ReadRectEx+0xce>
 8013e06:	e798      	b.n	8013d3a <LCD_ReadRectEx+0x3a>
 8013e08:	45b1      	cmp	r9, r6
 8013e0a:	dcf8      	bgt.n	8013dfe <LCD_ReadRectEx+0xfe>
 8013e0c:	46ca      	mov	sl, r9
 8013e0e:	f04f 0b0f 	mov.w	fp, #15
 8013e12:	4651      	mov	r1, sl
 8013e14:	462a      	mov	r2, r5
 8013e16:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013e18:	47b8      	blx	r7
 8013e1a:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8013e1e:	7821      	ldrb	r1, [r4, #0]
 8013e20:	f1c3 0204 	rsb	r2, r3, #4
 8013e24:	fa0b f303 	lsl.w	r3, fp, r3
 8013e28:	4090      	lsls	r0, r2
 8013e2a:	400b      	ands	r3, r1
 8013e2c:	f10a 0a01 	add.w	sl, sl, #1
 8013e30:	4303      	orrs	r3, r0
 8013e32:	4556      	cmp	r6, sl
 8013e34:	7023      	strb	r3, [r4, #0]
 8013e36:	4444      	add	r4, r8
 8013e38:	f088 0801 	eor.w	r8, r8, #1
 8013e3c:	dae9      	bge.n	8013e12 <LCD_ReadRectEx+0x112>
 8013e3e:	e7de      	b.n	8013dfe <LCD_ReadRectEx+0xfe>
 8013e40:	f8dd b008 	ldr.w	fp, [sp, #8]
 8013e44:	45b1      	cmp	r9, r6
 8013e46:	dcda      	bgt.n	8013dfe <LCD_ReadRectEx+0xfe>
 8013e48:	46ca      	mov	sl, r9
 8013e4a:	4651      	mov	r1, sl
 8013e4c:	462a      	mov	r2, r5
 8013e4e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013e50:	47b8      	blx	r7
 8013e52:	7821      	ldrb	r1, [r4, #0]
 8013e54:	f64f 727f 	movw	r2, #65407	; 0xff7f
 8013e58:	f1c8 0307 	rsb	r3, r8, #7
 8013e5c:	fa42 f208 	asr.w	r2, r2, r8
 8013e60:	4098      	lsls	r0, r3
 8013e62:	f10a 0a01 	add.w	sl, sl, #1
 8013e66:	ea01 0302 	and.w	r3, r1, r2
 8013e6a:	f108 0201 	add.w	r2, r8, #1
 8013e6e:	4318      	orrs	r0, r3
 8013e70:	f022 0807 	bic.w	r8, r2, #7
 8013e74:	4556      	cmp	r6, sl
 8013e76:	7020      	strb	r0, [r4, #0]
 8013e78:	fa42 f808 	asr.w	r8, r2, r8
 8013e7c:	eb04 04e2 	add.w	r4, r4, r2, asr #3
 8013e80:	dae3      	bge.n	8013e4a <LCD_ReadRectEx+0x14a>
 8013e82:	3501      	adds	r5, #1
 8013e84:	45ab      	cmp	fp, r5
 8013e86:	dadd      	bge.n	8013e44 <LCD_ReadRectEx+0x144>
 8013e88:	e757      	b.n	8013d3a <LCD_ReadRectEx+0x3a>
 8013e8a:	f64f 7b3f 	movw	fp, #65343	; 0xff3f
 8013e8e:	45b1      	cmp	r9, r6
 8013e90:	dcb5      	bgt.n	8013dfe <LCD_ReadRectEx+0xfe>
 8013e92:	46ca      	mov	sl, r9
 8013e94:	4651      	mov	r1, sl
 8013e96:	462a      	mov	r2, r5
 8013e98:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8013e9a:	47b8      	blx	r7
 8013e9c:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8013ea0:	f894 e000 	ldrb.w	lr, [r4]
 8013ea4:	f1c3 0206 	rsb	r2, r3, #6
 8013ea8:	fa4b f303 	asr.w	r3, fp, r3
 8013eac:	f108 0101 	add.w	r1, r8, #1
 8013eb0:	4090      	lsls	r0, r2
 8013eb2:	ea0e 0303 	and.w	r3, lr, r3
 8013eb6:	f10a 0a01 	add.w	sl, sl, #1
 8013eba:	4303      	orrs	r3, r0
 8013ebc:	f021 0803 	bic.w	r8, r1, #3
 8013ec0:	4556      	cmp	r6, sl
 8013ec2:	7023      	strb	r3, [r4, #0]
 8013ec4:	fa41 f808 	asr.w	r8, r1, r8
 8013ec8:	eb04 04a1 	add.w	r4, r4, r1, asr #2
 8013ecc:	dae2      	bge.n	8013e94 <LCD_ReadRectEx+0x194>
 8013ece:	9b02      	ldr	r3, [sp, #8]
 8013ed0:	3501      	adds	r5, #1
 8013ed2:	42ab      	cmp	r3, r5
 8013ed4:	dadb      	bge.n	8013e8e <LCD_ReadRectEx+0x18e>
 8013ed6:	e730      	b.n	8013d3a <LCD_ReadRectEx+0x3a>
 8013ed8:	9b02      	ldr	r3, [sp, #8]
 8013eda:	3501      	adds	r5, #1
 8013edc:	429d      	cmp	r5, r3
 8013ede:	f77f af76 	ble.w	8013dce <LCD_ReadRectEx+0xce>
 8013ee2:	e72a      	b.n	8013d3a <LCD_ReadRectEx+0x3a>
 8013ee4:	3501      	adds	r5, #1
 8013ee6:	4555      	cmp	r5, sl
 8013ee8:	f77f af56 	ble.w	8013d98 <LCD_ReadRectEx+0x98>
 8013eec:	e725      	b.n	8013d3a <LCD_ReadRectEx+0x3a>
 8013eee:	bf00      	nop
 8013ef0:	200000a8 	.word	0x200000a8

08013ef4 <GUI_ReadRectEx>:
 8013ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ef6:	4c16      	ldr	r4, [pc, #88]	; (8013f50 <GUI_ReadRectEx+0x5c>)
 8013ef8:	9e05      	ldr	r6, [sp, #20]
 8013efa:	6825      	ldr	r5, [r4, #0]
 8013efc:	9c06      	ldr	r4, [sp, #24]
 8013efe:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8013f02:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
 8013f06:	4570      	cmp	r0, lr
 8013f08:	bfb8      	it	lt
 8013f0a:	4670      	movlt	r0, lr
 8013f0c:	42ba      	cmp	r2, r7
 8013f0e:	bfa8      	it	ge
 8013f10:	463a      	movge	r2, r7
 8013f12:	4290      	cmp	r0, r2
 8013f14:	dc1a      	bgt.n	8013f4c <GUI_ReadRectEx+0x58>
 8013f16:	f9b5 700a 	ldrsh.w	r7, [r5, #10]
 8013f1a:	f9b5 500e 	ldrsh.w	r5, [r5, #14]
 8013f1e:	42b9      	cmp	r1, r7
 8013f20:	bfb8      	it	lt
 8013f22:	4639      	movlt	r1, r7
 8013f24:	42ab      	cmp	r3, r5
 8013f26:	bfa8      	it	ge
 8013f28:	462b      	movge	r3, r5
 8013f2a:	428b      	cmp	r3, r1
 8013f2c:	da03      	bge.n	8013f36 <GUI_ReadRectEx+0x42>
 8013f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f30:	6825      	ldr	r5, [r4, #0]
 8013f32:	b12d      	cbz	r5, 8013f40 <GUI_ReadRectEx+0x4c>
 8013f34:	462c      	mov	r4, r5
 8013f36:	68e5      	ldr	r5, [r4, #12]
 8013f38:	682d      	ldr	r5, [r5, #0]
 8013f3a:	f035 0504 	bics.w	r5, r5, #4
 8013f3e:	d1f7      	bne.n	8013f30 <GUI_ReadRectEx+0x3c>
 8013f40:	9406      	str	r4, [sp, #24]
 8013f42:	9605      	str	r6, [sp, #20]
 8013f44:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013f48:	f7ff beda 	b.w	8013d00 <LCD_ReadRectEx>
 8013f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f4e:	bf00      	nop
 8013f50:	200000a8 	.word	0x200000a8

08013f54 <LCD_SelectLCD>:
 8013f54:	b510      	push	{r4, lr}
 8013f56:	4c0e      	ldr	r4, [pc, #56]	; (8013f90 <LCD_SelectLCD+0x3c>)
 8013f58:	4b0e      	ldr	r3, [pc, #56]	; (8013f94 <LCD_SelectLCD+0x40>)
 8013f5a:	6822      	ldr	r2, [r4, #0]
 8013f5c:	7c51      	ldrb	r1, [r2, #17]
 8013f5e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8013f62:	b138      	cbz	r0, 8013f74 <LCD_SelectLCD+0x20>
 8013f64:	68c3      	ldr	r3, [r0, #12]
 8013f66:	b113      	cbz	r3, 8013f6e <LCD_SelectLCD+0x1a>
 8013f68:	681b      	ldr	r3, [r3, #0]
 8013f6a:	2b04      	cmp	r3, #4
 8013f6c:	d00b      	beq.n	8013f86 <LCD_SelectLCD+0x32>
 8013f6e:	6800      	ldr	r0, [r0, #0]
 8013f70:	2800      	cmp	r0, #0
 8013f72:	d1f7      	bne.n	8013f64 <LCD_SelectLCD+0x10>
 8013f74:	2100      	movs	r1, #0
 8013f76:	f102 0308 	add.w	r3, r2, #8
 8013f7a:	6611      	str	r1, [r2, #96]	; 0x60
 8013f7c:	6153      	str	r3, [r2, #20]
 8013f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013f82:	f7fe bfc3 	b.w	8012f0c <LCD_SetClipRectMax>
 8013f86:	f7fc fc2b 	bl	80107e0 <GUI_DEVICE_Unlink>
 8013f8a:	6822      	ldr	r2, [r4, #0]
 8013f8c:	e7f2      	b.n	8013f74 <LCD_SelectLCD+0x20>
 8013f8e:	bf00      	nop
 8013f90:	200000a8 	.word	0x200000a8
 8013f94:	20030870 	.word	0x20030870

08013f98 <LCD_GetPosEx>:
 8013f98:	b530      	push	{r4, r5, lr}
 8013f9a:	b083      	sub	sp, #12
 8013f9c:	460c      	mov	r4, r1
 8013f9e:	4615      	mov	r5, r2
 8013fa0:	f7fc fbde 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8013fa4:	9001      	str	r0, [sp, #4]
 8013fa6:	b170      	cbz	r0, 8013fc6 <LCD_GetPosEx+0x2e>
 8013fa8:	68c3      	ldr	r3, [r0, #12]
 8013faa:	2104      	movs	r1, #4
 8013fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fae:	eb0d 0001 	add.w	r0, sp, r1
 8013fb2:	4798      	blx	r3
 8013fb4:	4603      	mov	r3, r0
 8013fb6:	b130      	cbz	r0, 8013fc6 <LCD_GetPosEx+0x2e>
 8013fb8:	9801      	ldr	r0, [sp, #4]
 8013fba:	462a      	mov	r2, r5
 8013fbc:	4621      	mov	r1, r4
 8013fbe:	4798      	blx	r3
 8013fc0:	2000      	movs	r0, #0
 8013fc2:	b003      	add	sp, #12
 8013fc4:	bd30      	pop	{r4, r5, pc}
 8013fc6:	2001      	movs	r0, #1
 8013fc8:	b003      	add	sp, #12
 8013fca:	bd30      	pop	{r4, r5, pc}

08013fcc <LCD_SetDevFunc>:
 8013fcc:	b530      	push	{r4, r5, lr}
 8013fce:	b083      	sub	sp, #12
 8013fd0:	460c      	mov	r4, r1
 8013fd2:	4615      	mov	r5, r2
 8013fd4:	f7fc fbc4 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8013fd8:	9001      	str	r0, [sp, #4]
 8013fda:	b168      	cbz	r0, 8013ff8 <LCD_SetDevFunc+0x2c>
 8013fdc:	68c3      	ldr	r3, [r0, #12]
 8013fde:	2116      	movs	r1, #22
 8013fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fe2:	a801      	add	r0, sp, #4
 8013fe4:	4798      	blx	r3
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	b130      	cbz	r0, 8013ff8 <LCD_SetDevFunc+0x2c>
 8013fea:	9801      	ldr	r0, [sp, #4]
 8013fec:	462a      	mov	r2, r5
 8013fee:	4621      	mov	r1, r4
 8013ff0:	4798      	blx	r3
 8013ff2:	2000      	movs	r0, #0
 8013ff4:	b003      	add	sp, #12
 8013ff6:	bd30      	pop	{r4, r5, pc}
 8013ff8:	2001      	movs	r0, #1
 8013ffa:	b003      	add	sp, #12
 8013ffc:	bd30      	pop	{r4, r5, pc}
 8013ffe:	bf00      	nop

08014000 <LCD_SetLUTEntryEx>:
 8014000:	b530      	push	{r4, r5, lr}
 8014002:	b083      	sub	sp, #12
 8014004:	460c      	mov	r4, r1
 8014006:	4615      	mov	r5, r2
 8014008:	f7fc fbaa 	bl	8010760 <GUI_DEVICE__GetpDriver>
 801400c:	9001      	str	r0, [sp, #4]
 801400e:	b168      	cbz	r0, 801402c <LCD_SetLUTEntryEx+0x2c>
 8014010:	68c3      	ldr	r3, [r0, #12]
 8014012:	2110      	movs	r1, #16
 8014014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014016:	a801      	add	r0, sp, #4
 8014018:	4798      	blx	r3
 801401a:	4603      	mov	r3, r0
 801401c:	b130      	cbz	r0, 801402c <LCD_SetLUTEntryEx+0x2c>
 801401e:	9801      	ldr	r0, [sp, #4]
 8014020:	462a      	mov	r2, r5
 8014022:	4621      	mov	r1, r4
 8014024:	4798      	blx	r3
 8014026:	2000      	movs	r0, #0
 8014028:	b003      	add	sp, #12
 801402a:	bd30      	pop	{r4, r5, pc}
 801402c:	2001      	movs	r0, #1
 801402e:	b003      	add	sp, #12
 8014030:	bd30      	pop	{r4, r5, pc}
 8014032:	bf00      	nop

08014034 <LCD_SetPosEx>:
 8014034:	b530      	push	{r4, r5, lr}
 8014036:	b083      	sub	sp, #12
 8014038:	460c      	mov	r4, r1
 801403a:	4615      	mov	r5, r2
 801403c:	f7fc fb90 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8014040:	9001      	str	r0, [sp, #4]
 8014042:	b168      	cbz	r0, 8014060 <LCD_SetPosEx+0x2c>
 8014044:	68c3      	ldr	r3, [r0, #12]
 8014046:	2103      	movs	r1, #3
 8014048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801404a:	a801      	add	r0, sp, #4
 801404c:	4798      	blx	r3
 801404e:	4603      	mov	r3, r0
 8014050:	b130      	cbz	r0, 8014060 <LCD_SetPosEx+0x2c>
 8014052:	9801      	ldr	r0, [sp, #4]
 8014054:	462a      	mov	r2, r5
 8014056:	4621      	mov	r1, r4
 8014058:	4798      	blx	r3
 801405a:	2000      	movs	r0, #0
 801405c:	b003      	add	sp, #12
 801405e:	bd30      	pop	{r4, r5, pc}
 8014060:	2001      	movs	r0, #1
 8014062:	b003      	add	sp, #12
 8014064:	bd30      	pop	{r4, r5, pc}
 8014066:	bf00      	nop

08014068 <LCD_SetSizeEx>:
 8014068:	b530      	push	{r4, r5, lr}
 801406a:	b083      	sub	sp, #12
 801406c:	460c      	mov	r4, r1
 801406e:	4615      	mov	r5, r2
 8014070:	f7fc fb76 	bl	8010760 <GUI_DEVICE__GetpDriver>
 8014074:	9001      	str	r0, [sp, #4]
 8014076:	b168      	cbz	r0, 8014094 <LCD_SetSizeEx+0x2c>
 8014078:	68c3      	ldr	r3, [r0, #12]
 801407a:	210b      	movs	r1, #11
 801407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801407e:	a801      	add	r0, sp, #4
 8014080:	4798      	blx	r3
 8014082:	4603      	mov	r3, r0
 8014084:	b130      	cbz	r0, 8014094 <LCD_SetSizeEx+0x2c>
 8014086:	9801      	ldr	r0, [sp, #4]
 8014088:	462a      	mov	r2, r5
 801408a:	4621      	mov	r1, r4
 801408c:	4798      	blx	r3
 801408e:	2000      	movs	r0, #0
 8014090:	b003      	add	sp, #12
 8014092:	bd30      	pop	{r4, r5, pc}
 8014094:	2001      	movs	r0, #1
 8014096:	b003      	add	sp, #12
 8014098:	bd30      	pop	{r4, r5, pc}
 801409a:	bf00      	nop

0801409c <LCD_SetVRAMAddrEx>:
 801409c:	b510      	push	{r4, lr}
 801409e:	b082      	sub	sp, #8
 80140a0:	460c      	mov	r4, r1
 80140a2:	f7fc fb5d 	bl	8010760 <GUI_DEVICE__GetpDriver>
 80140a6:	9001      	str	r0, [sp, #4]
 80140a8:	b160      	cbz	r0, 80140c4 <LCD_SetVRAMAddrEx+0x28>
 80140aa:	68c3      	ldr	r3, [r0, #12]
 80140ac:	2109      	movs	r1, #9
 80140ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140b0:	a801      	add	r0, sp, #4
 80140b2:	4798      	blx	r3
 80140b4:	4603      	mov	r3, r0
 80140b6:	b128      	cbz	r0, 80140c4 <LCD_SetVRAMAddrEx+0x28>
 80140b8:	9801      	ldr	r0, [sp, #4]
 80140ba:	4621      	mov	r1, r4
 80140bc:	4798      	blx	r3
 80140be:	2000      	movs	r0, #0
 80140c0:	b002      	add	sp, #8
 80140c2:	bd10      	pop	{r4, pc}
 80140c4:	2001      	movs	r0, #1
 80140c6:	b002      	add	sp, #8
 80140c8:	bd10      	pop	{r4, pc}
 80140ca:	bf00      	nop

080140cc <LCD_SetVSizeEx>:
 80140cc:	b530      	push	{r4, r5, lr}
 80140ce:	b083      	sub	sp, #12
 80140d0:	460c      	mov	r4, r1
 80140d2:	4615      	mov	r5, r2
 80140d4:	f7fc fb44 	bl	8010760 <GUI_DEVICE__GetpDriver>
 80140d8:	9001      	str	r0, [sp, #4]
 80140da:	b168      	cbz	r0, 80140f8 <LCD_SetVSizeEx+0x2c>
 80140dc:	68c3      	ldr	r3, [r0, #12]
 80140de:	210a      	movs	r1, #10
 80140e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140e2:	a801      	add	r0, sp, #4
 80140e4:	4798      	blx	r3
 80140e6:	4603      	mov	r3, r0
 80140e8:	b130      	cbz	r0, 80140f8 <LCD_SetVSizeEx+0x2c>
 80140ea:	9801      	ldr	r0, [sp, #4]
 80140ec:	462a      	mov	r2, r5
 80140ee:	4621      	mov	r1, r4
 80140f0:	4798      	blx	r3
 80140f2:	2000      	movs	r0, #0
 80140f4:	b003      	add	sp, #12
 80140f6:	bd30      	pop	{r4, r5, pc}
 80140f8:	2001      	movs	r0, #1
 80140fa:	b003      	add	sp, #12
 80140fc:	bd30      	pop	{r4, r5, pc}
 80140fe:	bf00      	nop

08014100 <LCD_UpdateColorIndices>:
 8014100:	b510      	push	{r4, lr}
 8014102:	4c07      	ldr	r4, [pc, #28]	; (8014120 <LCD_UpdateColorIndices+0x20>)
 8014104:	6823      	ldr	r3, [r4, #0]
 8014106:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014108:	f7fe ff96 	bl	8013038 <LCD_Color2Index>
 801410c:	f7fe ffb0 	bl	8013070 <LCD_SetColorIndex>
 8014110:	6823      	ldr	r3, [r4, #0]
 8014112:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8014114:	f7fe ff90 	bl	8013038 <LCD_Color2Index>
 8014118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801411c:	f7fe bfb4 	b.w	8013088 <LCD_SetBkColorIndex>
 8014120:	200000a8 	.word	0x200000a8

08014124 <_GetRect>:
 8014124:	6883      	ldr	r3, [r0, #8]
 8014126:	699a      	ldr	r2, [r3, #24]
 8014128:	69db      	ldr	r3, [r3, #28]
 801412a:	2000      	movs	r0, #0
 801412c:	3a01      	subs	r2, #1
 801412e:	3b01      	subs	r3, #1
 8014130:	808a      	strh	r2, [r1, #4]
 8014132:	80cb      	strh	r3, [r1, #6]
 8014134:	8008      	strh	r0, [r1, #0]
 8014136:	8048      	strh	r0, [r1, #2]
 8014138:	4770      	bx	lr
 801413a:	bf00      	nop

0801413c <_SetPixelIndex>:
 801413c:	b410      	push	{r4}
 801413e:	6884      	ldr	r4, [r0, #8]
 8014140:	6a20      	ldr	r0, [r4, #32]
 8014142:	6824      	ldr	r4, [r4, #0]
 8014144:	fb00 1202 	mla	r2, r0, r2, r1
 8014148:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
 801414c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014150:	4770      	bx	lr
 8014152:	bf00      	nop

08014154 <_GetPixelIndex>:
 8014154:	6880      	ldr	r0, [r0, #8]
 8014156:	6a03      	ldr	r3, [r0, #32]
 8014158:	6800      	ldr	r0, [r0, #0]
 801415a:	fb03 1202 	mla	r2, r3, r2, r1
 801415e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8014162:	4770      	bx	lr

08014164 <_XorPixel>:
 8014164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014166:	460f      	mov	r7, r1
 8014168:	6881      	ldr	r1, [r0, #8]
 801416a:	6904      	ldr	r4, [r0, #16]
 801416c:	6a0b      	ldr	r3, [r1, #32]
 801416e:	4606      	mov	r6, r0
 8014170:	fb03 7302 	mla	r3, r3, r2, r7
 8014174:	6808      	ldr	r0, [r1, #0]
 8014176:	68a1      	ldr	r1, [r4, #8]
 8014178:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 801417c:	4614      	mov	r4, r2
 801417e:	4788      	blx	r1
 8014180:	68b3      	ldr	r3, [r6, #8]
 8014182:	6a19      	ldr	r1, [r3, #32]
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	fb01 7404 	mla	r4, r1, r4, r7
 801418a:	4068      	eors	r0, r5
 801418c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014192:	bf00      	nop

08014194 <_GetDevProp>:
 8014194:	3901      	subs	r1, #1
 8014196:	6883      	ldr	r3, [r0, #8]
 8014198:	290d      	cmp	r1, #13
 801419a:	d816      	bhi.n	80141ca <_GetDevProp+0x36>
 801419c:	e8df f001 	tbb	[pc, r1]
 80141a0:	0d13110f 	.word	0x0d13110f
 80141a4:	0b151515 	.word	0x0b151515
 80141a8:	07090907 	.word	0x07090907
 80141ac:	0707      	.short	0x0707
 80141ae:	2000      	movs	r0, #0
 80141b0:	4770      	bx	lr
 80141b2:	2001      	movs	r0, #1
 80141b4:	4770      	bx	lr
 80141b6:	2020      	movs	r0, #32
 80141b8:	4770      	bx	lr
 80141ba:	69d8      	ldr	r0, [r3, #28]
 80141bc:	4770      	bx	lr
 80141be:	6918      	ldr	r0, [r3, #16]
 80141c0:	4770      	bx	lr
 80141c2:	6958      	ldr	r0, [r3, #20]
 80141c4:	4770      	bx	lr
 80141c6:	6998      	ldr	r0, [r3, #24]
 80141c8:	4770      	bx	lr
 80141ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80141ce:	4770      	bx	lr

080141d0 <_GetDevData>:
 80141d0:	2901      	cmp	r1, #1
 80141d2:	4802      	ldr	r0, [pc, #8]	; (80141dc <_GetDevData+0xc>)
 80141d4:	bf18      	it	ne
 80141d6:	2000      	movne	r0, #0
 80141d8:	4770      	bx	lr
 80141da:	bf00      	nop
 80141dc:	0803141c 	.word	0x0803141c

080141e0 <_ReadRect>:
 80141e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80141e4:	6886      	ldr	r6, [r0, #8]
 80141e6:	9f08      	ldr	r7, [sp, #32]
 80141e8:	6a30      	ldr	r0, [r6, #32]
 80141ea:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80141ee:	f100 4480 	add.w	r4, r0, #1073741824	; 0x40000000
 80141f2:	1a5b      	subs	r3, r3, r1
 80141f4:	3c01      	subs	r4, #1
 80141f6:	fb00 1002 	mla	r0, r0, r2, r1
 80141fa:	1ae4      	subs	r4, r4, r3
 80141fc:	f103 0801 	add.w	r8, r3, #1
 8014200:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014204:	ebc7 0580 	rsb	r5, r7, r0, lsl #2
 8014208:	ea4f 0988 	mov.w	r9, r8, lsl #2
 801420c:	4639      	mov	r1, r7
 801420e:	4643      	mov	r3, r8
 8014210:	6830      	ldr	r0, [r6, #0]
 8014212:	186c      	adds	r4, r5, r1
 8014214:	3b01      	subs	r3, #1
 8014216:	5820      	ldr	r0, [r4, r0]
 8014218:	f841 0b04 	str.w	r0, [r1], #4
 801421c:	d1f8      	bne.n	8014210 <_ReadRect+0x30>
 801421e:	3201      	adds	r2, #1
 8014220:	1e53      	subs	r3, r2, #1
 8014222:	459e      	cmp	lr, r3
 8014224:	444f      	add	r7, r9
 8014226:	4465      	add	r5, ip
 8014228:	dcf0      	bgt.n	801420c <_ReadRect+0x2c>
 801422a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801422e:	bf00      	nop

08014230 <_GetDevFunc>:
 8014230:	3901      	subs	r1, #1
 8014232:	2928      	cmp	r1, #40	; 0x28
 8014234:	d84a      	bhi.n	80142cc <_GetDevFunc+0x9c>
 8014236:	e8df f001 	tbb	[pc, r1]
 801423a:	1d1f      	.short	0x1d1f
 801423c:	1749191b 	.word	0x1749191b
 8014240:	47154949 	.word	0x47154949
 8014244:	41494345 	.word	0x41494345
 8014248:	4949493f 	.word	0x4949493f
 801424c:	37393b3d 	.word	0x37393b3d
 8014250:	49334949 	.word	0x49334949
 8014254:	49494949 	.word	0x49494949
 8014258:	2b2d2f49 	.word	0x2b2d2f49
 801425c:	49234927 	.word	0x49234927
 8014260:	4949      	.short	0x4949
 8014262:	21          	.byte	0x21
 8014263:	00          	.byte	0x00
 8014264:	481a      	ldr	r0, [pc, #104]	; (80142d0 <_GetDevFunc+0xa0>)
 8014266:	4770      	bx	lr
 8014268:	481a      	ldr	r0, [pc, #104]	; (80142d4 <_GetDevFunc+0xa4>)
 801426a:	4770      	bx	lr
 801426c:	481a      	ldr	r0, [pc, #104]	; (80142d8 <_GetDevFunc+0xa8>)
 801426e:	4770      	bx	lr
 8014270:	481a      	ldr	r0, [pc, #104]	; (80142dc <_GetDevFunc+0xac>)
 8014272:	4770      	bx	lr
 8014274:	481a      	ldr	r0, [pc, #104]	; (80142e0 <_GetDevFunc+0xb0>)
 8014276:	4770      	bx	lr
 8014278:	481a      	ldr	r0, [pc, #104]	; (80142e4 <_GetDevFunc+0xb4>)
 801427a:	4770      	bx	lr
 801427c:	481a      	ldr	r0, [pc, #104]	; (80142e8 <_GetDevFunc+0xb8>)
 801427e:	4770      	bx	lr
 8014280:	6803      	ldr	r3, [r0, #0]
 8014282:	689b      	ldr	r3, [r3, #8]
 8014284:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8014286:	4770      	bx	lr
 8014288:	6803      	ldr	r3, [r0, #0]
 801428a:	689b      	ldr	r3, [r3, #8]
 801428c:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801428e:	4770      	bx	lr
 8014290:	4816      	ldr	r0, [pc, #88]	; (80142ec <_GetDevFunc+0xbc>)
 8014292:	4770      	bx	lr
 8014294:	4816      	ldr	r0, [pc, #88]	; (80142f0 <_GetDevFunc+0xc0>)
 8014296:	4770      	bx	lr
 8014298:	6803      	ldr	r3, [r0, #0]
 801429a:	689b      	ldr	r3, [r3, #8]
 801429c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801429e:	4770      	bx	lr
 80142a0:	6803      	ldr	r3, [r0, #0]
 80142a2:	689b      	ldr	r3, [r3, #8]
 80142a4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80142a6:	4770      	bx	lr
 80142a8:	4812      	ldr	r0, [pc, #72]	; (80142f4 <_GetDevFunc+0xc4>)
 80142aa:	4770      	bx	lr
 80142ac:	4812      	ldr	r0, [pc, #72]	; (80142f8 <_GetDevFunc+0xc8>)
 80142ae:	4770      	bx	lr
 80142b0:	4812      	ldr	r0, [pc, #72]	; (80142fc <_GetDevFunc+0xcc>)
 80142b2:	4770      	bx	lr
 80142b4:	4812      	ldr	r0, [pc, #72]	; (8014300 <_GetDevFunc+0xd0>)
 80142b6:	4770      	bx	lr
 80142b8:	4812      	ldr	r0, [pc, #72]	; (8014304 <_GetDevFunc+0xd4>)
 80142ba:	4770      	bx	lr
 80142bc:	4812      	ldr	r0, [pc, #72]	; (8014308 <_GetDevFunc+0xd8>)
 80142be:	4770      	bx	lr
 80142c0:	4812      	ldr	r0, [pc, #72]	; (801430c <_GetDevFunc+0xdc>)
 80142c2:	4770      	bx	lr
 80142c4:	4812      	ldr	r0, [pc, #72]	; (8014310 <_GetDevFunc+0xe0>)
 80142c6:	4770      	bx	lr
 80142c8:	4812      	ldr	r0, [pc, #72]	; (8014314 <_GetDevFunc+0xe4>)
 80142ca:	4770      	bx	lr
 80142cc:	2000      	movs	r0, #0
 80142ce:	4770      	bx	lr
 80142d0:	08014d95 	.word	0x08014d95
 80142d4:	08014d55 	.word	0x08014d55
 80142d8:	08014ca9 	.word	0x08014ca9
 80142dc:	08014f61 	.word	0x08014f61
 80142e0:	08014d15 	.word	0x08014d15
 80142e4:	080141e1 	.word	0x080141e1
 80142e8:	08014c7d 	.word	0x08014c7d
 80142ec:	08014cd9 	.word	0x08014cd9
 80142f0:	08014ed9 	.word	0x08014ed9
 80142f4:	08014e69 	.word	0x08014e69
 80142f8:	08014319 	.word	0x08014319
 80142fc:	08014331 	.word	0x08014331
 8014300:	08014349 	.word	0x08014349
 8014304:	08014361 	.word	0x08014361
 8014308:	0801436d 	.word	0x0801436d
 801430c:	08014c4d 	.word	0x08014c4d
 8014310:	08014e0d 	.word	0x08014e0d
 8014314:	08014dd5 	.word	0x08014dd5

08014318 <_SetChroma>:
 8014318:	b500      	push	{lr}
 801431a:	b083      	sub	sp, #12
 801431c:	e88d 0006 	stmia.w	sp, {r1, r2}
 8014320:	6980      	ldr	r0, [r0, #24]
 8014322:	466a      	mov	r2, sp
 8014324:	210d      	movs	r1, #13
 8014326:	f7fa f985 	bl	800e634 <LCD_X_DisplayDriver>
 801432a:	b003      	add	sp, #12
 801432c:	f85d fb04 	ldr.w	pc, [sp], #4

08014330 <_SetChromaMode>:
 8014330:	b500      	push	{lr}
 8014332:	b083      	sub	sp, #12
 8014334:	aa02      	add	r2, sp, #8
 8014336:	6980      	ldr	r0, [r0, #24]
 8014338:	f842 1d04 	str.w	r1, [r2, #-4]!
 801433c:	210c      	movs	r1, #12
 801433e:	f7fa f979 	bl	800e634 <LCD_X_DisplayDriver>
 8014342:	b003      	add	sp, #12
 8014344:	f85d fb04 	ldr.w	pc, [sp], #4

08014348 <_SetAlphaMode>:
 8014348:	b500      	push	{lr}
 801434a:	b083      	sub	sp, #12
 801434c:	aa02      	add	r2, sp, #8
 801434e:	6980      	ldr	r0, [r0, #24]
 8014350:	f842 1d04 	str.w	r1, [r2, #-4]!
 8014354:	210b      	movs	r1, #11
 8014356:	f7fa f96d 	bl	800e634 <LCD_X_DisplayDriver>
 801435a:	b003      	add	sp, #12
 801435c:	f85d fb04 	ldr.w	pc, [sp], #4

08014360 <_Off>:
 8014360:	6980      	ldr	r0, [r0, #24]
 8014362:	2200      	movs	r2, #0
 8014364:	2106      	movs	r1, #6
 8014366:	f7fa b965 	b.w	800e634 <LCD_X_DisplayDriver>
 801436a:	bf00      	nop

0801436c <_On>:
 801436c:	6980      	ldr	r0, [r0, #24]
 801436e:	2200      	movs	r2, #0
 8014370:	2105      	movs	r1, #5
 8014372:	f7fa b95f 	b.w	800e634 <LCD_X_DisplayDriver>
 8014376:	bf00      	nop

08014378 <_SetOrg>:
 8014378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801437c:	4604      	mov	r4, r0
 801437e:	b083      	sub	sp, #12
 8014380:	2300      	movs	r3, #0
 8014382:	6980      	ldr	r0, [r0, #24]
 8014384:	9301      	str	r3, [sp, #4]
 8014386:	460f      	mov	r7, r1
 8014388:	4690      	mov	r8, r2
 801438a:	9300      	str	r3, [sp, #0]
 801438c:	68a6      	ldr	r6, [r4, #8]
 801438e:	f7ff f811 	bl	80133b4 <LCD_GetMirrorXEx>
 8014392:	4605      	mov	r5, r0
 8014394:	69a0      	ldr	r0, [r4, #24]
 8014396:	f7ff f81d 	bl	80133d4 <LCD_GetMirrorYEx>
 801439a:	4681      	mov	r9, r0
 801439c:	69a0      	ldr	r0, [r4, #24]
 801439e:	f7ff f829 	bl	80133f4 <LCD_GetSwapXYEx>
 80143a2:	0080      	lsls	r0, r0, #2
 80143a4:	ea40 0049 	orr.w	r0, r0, r9, lsl #1
 80143a8:	4328      	orrs	r0, r5
 80143aa:	2807      	cmp	r0, #7
 80143ac:	d810      	bhi.n	80143d0 <_SetOrg+0x58>
 80143ae:	e8df f000 	tbb	[pc, r0]
 80143b2:	1a17      	.short	0x1a17
 80143b4:	3a362a22 	.word	0x3a362a22
 80143b8:	0442      	.short	0x0442
 80143ba:	69f2      	ldr	r2, [r6, #28]
 80143bc:	6970      	ldr	r0, [r6, #20]
 80143be:	69b3      	ldr	r3, [r6, #24]
 80143c0:	6931      	ldr	r1, [r6, #16]
 80143c2:	1a12      	subs	r2, r2, r0
 80143c4:	1a59      	subs	r1, r3, r1
 80143c6:	ebc8 0202 	rsb	r2, r8, r2
 80143ca:	1bcf      	subs	r7, r1, r7
 80143cc:	e88d 0084 	stmia.w	sp, {r2, r7}
 80143d0:	466a      	mov	r2, sp
 80143d2:	69a0      	ldr	r0, [r4, #24]
 80143d4:	2103      	movs	r1, #3
 80143d6:	f7fa f92d 	bl	800e634 <LCD_X_DisplayDriver>
 80143da:	b003      	add	sp, #12
 80143dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143e0:	e88d 0180 	stmia.w	sp, {r7, r8}
 80143e4:	e7f4      	b.n	80143d0 <_SetOrg+0x58>
 80143e6:	69b3      	ldr	r3, [r6, #24]
 80143e8:	6931      	ldr	r1, [r6, #16]
 80143ea:	f8cd 8004 	str.w	r8, [sp, #4]
 80143ee:	1a59      	subs	r1, r3, r1
 80143f0:	1bcf      	subs	r7, r1, r7
 80143f2:	9700      	str	r7, [sp, #0]
 80143f4:	e7ec      	b.n	80143d0 <_SetOrg+0x58>
 80143f6:	69f3      	ldr	r3, [r6, #28]
 80143f8:	6972      	ldr	r2, [r6, #20]
 80143fa:	9700      	str	r7, [sp, #0]
 80143fc:	1a9a      	subs	r2, r3, r2
 80143fe:	ebc8 0202 	rsb	r2, r8, r2
 8014402:	9201      	str	r2, [sp, #4]
 8014404:	e7e4      	b.n	80143d0 <_SetOrg+0x58>
 8014406:	69b1      	ldr	r1, [r6, #24]
 8014408:	6930      	ldr	r0, [r6, #16]
 801440a:	69f3      	ldr	r3, [r6, #28]
 801440c:	6972      	ldr	r2, [r6, #20]
 801440e:	1a09      	subs	r1, r1, r0
 8014410:	1a9a      	subs	r2, r3, r2
 8014412:	1bcf      	subs	r7, r1, r7
 8014414:	ebc8 0202 	rsb	r2, r8, r2
 8014418:	9700      	str	r7, [sp, #0]
 801441a:	9201      	str	r2, [sp, #4]
 801441c:	e7d8      	b.n	80143d0 <_SetOrg+0x58>
 801441e:	f8cd 8000 	str.w	r8, [sp]
 8014422:	9701      	str	r7, [sp, #4]
 8014424:	e7d4      	b.n	80143d0 <_SetOrg+0x58>
 8014426:	69f3      	ldr	r3, [r6, #28]
 8014428:	6972      	ldr	r2, [r6, #20]
 801442a:	9701      	str	r7, [sp, #4]
 801442c:	1a9a      	subs	r2, r3, r2
 801442e:	ebc8 0202 	rsb	r2, r8, r2
 8014432:	9200      	str	r2, [sp, #0]
 8014434:	e7cc      	b.n	80143d0 <_SetOrg+0x58>
 8014436:	69b3      	ldr	r3, [r6, #24]
 8014438:	6931      	ldr	r1, [r6, #16]
 801443a:	f8cd 8000 	str.w	r8, [sp]
 801443e:	1a59      	subs	r1, r3, r1
 8014440:	1bcf      	subs	r7, r1, r7
 8014442:	9701      	str	r7, [sp, #4]
 8014444:	e7c4      	b.n	80143d0 <_SetOrg+0x58>
 8014446:	bf00      	nop

08014448 <_FillRect>:
 8014448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801444c:	6887      	ldr	r7, [r0, #8]
 801444e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8014450:	b085      	sub	sp, #20
 8014452:	b15c      	cbz	r4, 801446c <_FillRect+0x24>
 8014454:	4d78      	ldr	r5, [pc, #480]	; (8014638 <_FillRect+0x1f0>)
 8014456:	6980      	ldr	r0, [r0, #24]
 8014458:	682d      	ldr	r5, [r5, #0]
 801445a:	6bed      	ldr	r5, [r5, #60]	; 0x3c
 801445c:	682d      	ldr	r5, [r5, #0]
 801445e:	9501      	str	r5, [sp, #4]
 8014460:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014462:	9500      	str	r5, [sp, #0]
 8014464:	47a0      	blx	r4
 8014466:	b005      	add	sp, #20
 8014468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801446c:	469e      	mov	lr, r3
 801446e:	4b72      	ldr	r3, [pc, #456]	; (8014638 <_FillRect+0x1f0>)
 8014470:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	4690      	mov	r8, r2
 8014478:	ebc1 0e0e 	rsb	lr, r1, lr
 801447c:	4689      	mov	r9, r1
 801447e:	7c1a      	ldrb	r2, [r3, #16]
 8014480:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014482:	07d2      	lsls	r2, r2, #31
 8014484:	ebc8 0601 	rsb	r6, r8, r1
 8014488:	f10e 0401 	add.w	r4, lr, #1
 801448c:	f106 0501 	add.w	r5, r6, #1
 8014490:	f100 80ab 	bmi.w	80145ea <_FillRect+0x1a2>
 8014494:	683a      	ldr	r2, [r7, #0]
 8014496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014498:	fb0a 9808 	mla	r8, sl, r8, r9
 801449c:	2c0f      	cmp	r4, #15
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	eb02 0888 	add.w	r8, r2, r8, lsl #2
 80144a4:	d948      	bls.n	8014538 <_FillRect+0xf0>
 80144a6:	2d00      	cmp	r5, #0
 80144a8:	f000 80c3 	beq.w	8014632 <_FillRect+0x1ea>
 80144ac:	ea4f 028a 	mov.w	r2, sl, lsl #2
 80144b0:	f106 4780 	add.w	r7, r6, #1073741824	; 0x40000000
 80144b4:	fb02 8707 	mla	r7, r2, r7, r8
 80144b8:	3740      	adds	r7, #64	; 0x40
 80144ba:	f1c2 0900 	rsb	r9, r2, #0
 80144be:	46ac      	mov	ip, r5
 80144c0:	4639      	mov	r1, r7
 80144c2:	4620      	mov	r0, r4
 80144c4:	3810      	subs	r0, #16
 80144c6:	280f      	cmp	r0, #15
 80144c8:	f841 3c40 	str.w	r3, [r1, #-64]
 80144cc:	f841 3c3c 	str.w	r3, [r1, #-60]
 80144d0:	f841 3c38 	str.w	r3, [r1, #-56]
 80144d4:	f841 3c34 	str.w	r3, [r1, #-52]
 80144d8:	f841 3c30 	str.w	r3, [r1, #-48]
 80144dc:	f841 3c2c 	str.w	r3, [r1, #-44]
 80144e0:	f841 3c28 	str.w	r3, [r1, #-40]
 80144e4:	f841 3c24 	str.w	r3, [r1, #-36]
 80144e8:	f841 3c20 	str.w	r3, [r1, #-32]
 80144ec:	f841 3c1c 	str.w	r3, [r1, #-28]
 80144f0:	f841 3c18 	str.w	r3, [r1, #-24]
 80144f4:	f841 3c14 	str.w	r3, [r1, #-20]
 80144f8:	f841 3c10 	str.w	r3, [r1, #-16]
 80144fc:	f841 3c0c 	str.w	r3, [r1, #-12]
 8014500:	f841 3c08 	str.w	r3, [r1, #-8]
 8014504:	f841 3c04 	str.w	r3, [r1, #-4]
 8014508:	f101 0140 	add.w	r1, r1, #64	; 0x40
 801450c:	d8da      	bhi.n	80144c4 <_FillRect+0x7c>
 801450e:	f1bc 0c01 	subs.w	ip, ip, #1
 8014512:	eba7 0702 	sub.w	r7, r7, r2
 8014516:	d1d3      	bne.n	80144c0 <_FillRect+0x78>
 8014518:	f1ae 010f 	sub.w	r1, lr, #15
 801451c:	f105 4080 	add.w	r0, r5, #1073741824	; 0x40000000
 8014520:	0909      	lsrs	r1, r1, #4
 8014522:	fb06 f909 	mul.w	r9, r6, r9
 8014526:	3801      	subs	r0, #1
 8014528:	3101      	adds	r1, #1
 801452a:	fb02 9200 	mla	r2, r2, r0, r9
 801452e:	eb02 1181 	add.w	r1, r2, r1, lsl #6
 8014532:	4488      	add	r8, r1
 8014534:	f004 040f 	and.w	r4, r4, #15
 8014538:	2c00      	cmp	r4, #0
 801453a:	d094      	beq.n	8014466 <_FillRect+0x1e>
 801453c:	2d00      	cmp	r5, #0
 801453e:	d092      	beq.n	8014466 <_FillRect+0x1e>
 8014540:	ea4f 0e8a 	mov.w	lr, sl, lsl #2
 8014544:	f106 4280 	add.w	r2, r6, #1073741824	; 0x40000000
 8014548:	1fa1      	subs	r1, r4, #6
 801454a:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 801454e:	f1a4 0a02 	sub.w	sl, r4, #2
 8014552:	f1a4 0903 	sub.w	r9, r4, #3
 8014556:	f1a4 0c05 	sub.w	ip, r4, #5
 801455a:	1fe7      	subs	r7, r4, #7
 801455c:	f1a4 0608 	sub.w	r6, r4, #8
 8014560:	f1a4 0009 	sub.w	r0, r4, #9
 8014564:	fb0e 8202 	mla	r2, lr, r2, r8
 8014568:	9102      	str	r1, [sp, #8]
 801456a:	f1a4 0804 	sub.w	r8, r4, #4
 801456e:	f1a4 010a 	sub.w	r1, r4, #10
 8014572:	f8cd a00c 	str.w	sl, [sp, #12]
 8014576:	4682      	mov	sl, r0
 8014578:	4648      	mov	r0, r9
 801457a:	46b1      	mov	r9, r6
 801457c:	4646      	mov	r6, r8
 801457e:	46b8      	mov	r8, r7
 8014580:	4667      	mov	r7, ip
 8014582:	46dc      	mov	ip, fp
 8014584:	468b      	mov	fp, r1
 8014586:	6013      	str	r3, [r2, #0]
 8014588:	f1bc 0f00 	cmp.w	ip, #0
 801458c:	d028      	beq.n	80145e0 <_FillRect+0x198>
 801458e:	9903      	ldr	r1, [sp, #12]
 8014590:	6053      	str	r3, [r2, #4]
 8014592:	b329      	cbz	r1, 80145e0 <_FillRect+0x198>
 8014594:	6093      	str	r3, [r2, #8]
 8014596:	b318      	cbz	r0, 80145e0 <_FillRect+0x198>
 8014598:	60d3      	str	r3, [r2, #12]
 801459a:	b30e      	cbz	r6, 80145e0 <_FillRect+0x198>
 801459c:	6113      	str	r3, [r2, #16]
 801459e:	b1ff      	cbz	r7, 80145e0 <_FillRect+0x198>
 80145a0:	9902      	ldr	r1, [sp, #8]
 80145a2:	6153      	str	r3, [r2, #20]
 80145a4:	b1e1      	cbz	r1, 80145e0 <_FillRect+0x198>
 80145a6:	6193      	str	r3, [r2, #24]
 80145a8:	f1b8 0f00 	cmp.w	r8, #0
 80145ac:	d018      	beq.n	80145e0 <_FillRect+0x198>
 80145ae:	61d3      	str	r3, [r2, #28]
 80145b0:	f1b9 0f00 	cmp.w	r9, #0
 80145b4:	d014      	beq.n	80145e0 <_FillRect+0x198>
 80145b6:	6213      	str	r3, [r2, #32]
 80145b8:	f1ba 0f00 	cmp.w	sl, #0
 80145bc:	d010      	beq.n	80145e0 <_FillRect+0x198>
 80145be:	6253      	str	r3, [r2, #36]	; 0x24
 80145c0:	f1bb 0f00 	cmp.w	fp, #0
 80145c4:	d00c      	beq.n	80145e0 <_FillRect+0x198>
 80145c6:	2c0b      	cmp	r4, #11
 80145c8:	6293      	str	r3, [r2, #40]	; 0x28
 80145ca:	d009      	beq.n	80145e0 <_FillRect+0x198>
 80145cc:	2c0c      	cmp	r4, #12
 80145ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80145d0:	d006      	beq.n	80145e0 <_FillRect+0x198>
 80145d2:	2c0d      	cmp	r4, #13
 80145d4:	6313      	str	r3, [r2, #48]	; 0x30
 80145d6:	d003      	beq.n	80145e0 <_FillRect+0x198>
 80145d8:	2c0e      	cmp	r4, #14
 80145da:	6353      	str	r3, [r2, #52]	; 0x34
 80145dc:	bf18      	it	ne
 80145de:	6393      	strne	r3, [r2, #56]	; 0x38
 80145e0:	3d01      	subs	r5, #1
 80145e2:	ebce 0202 	rsb	r2, lr, r2
 80145e6:	d1ce      	bne.n	8014586 <_FillRect+0x13e>
 80145e8:	e73d      	b.n	8014466 <_FillRect+0x1e>
 80145ea:	6903      	ldr	r3, [r0, #16]
 80145ec:	689b      	ldr	r3, [r3, #8]
 80145ee:	4798      	blx	r3
 80145f0:	2c00      	cmp	r4, #0
 80145f2:	f43f af38 	beq.w	8014466 <_FillRect+0x1e>
 80145f6:	2d00      	cmp	r5, #0
 80145f8:	f43f af35 	beq.w	8014466 <_FillRect+0x1e>
 80145fc:	6a3b      	ldr	r3, [r7, #32]
 80145fe:	fb03 9308 	mla	r3, r3, r8, r9
 8014602:	fb0a 3606 	mla	r6, sl, r6, r3
 8014606:	ebca 7a8a 	rsb	sl, sl, sl, lsl #30
 801460a:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 801460e:	ea4f 0c8a 	mov.w	ip, sl, lsl #2
 8014612:	3d01      	subs	r5, #1
 8014614:	4673      	mov	r3, lr
 8014616:	4621      	mov	r1, r4
 8014618:	683e      	ldr	r6, [r7, #0]
 801461a:	599a      	ldr	r2, [r3, r6]
 801461c:	3901      	subs	r1, #1
 801461e:	ea82 0200 	eor.w	r2, r2, r0
 8014622:	519a      	str	r2, [r3, r6]
 8014624:	f103 0304 	add.w	r3, r3, #4
 8014628:	d1f6      	bne.n	8014618 <_FillRect+0x1d0>
 801462a:	44e6      	add	lr, ip
 801462c:	2d00      	cmp	r5, #0
 801462e:	d1f0      	bne.n	8014612 <_FillRect+0x1ca>
 8014630:	e719      	b.n	8014466 <_FillRect+0x1e>
 8014632:	46a8      	mov	r8, r5
 8014634:	e77e      	b.n	8014534 <_FillRect+0xec>
 8014636:	bf00      	nop
 8014638:	200000a8 	.word	0x200000a8

0801463c <_DrawHLine>:
 801463c:	b500      	push	{lr}
 801463e:	b083      	sub	sp, #12
 8014640:	9200      	str	r2, [sp, #0]
 8014642:	f7ff ff01 	bl	8014448 <_FillRect>
 8014646:	b003      	add	sp, #12
 8014648:	f85d fb04 	ldr.w	pc, [sp], #4

0801464c <_DrawVLine>:
 801464c:	b500      	push	{lr}
 801464e:	b083      	sub	sp, #12
 8014650:	9300      	str	r3, [sp, #0]
 8014652:	460b      	mov	r3, r1
 8014654:	f7ff fef8 	bl	8014448 <_FillRect>
 8014658:	b003      	add	sp, #12
 801465a:	f85d fb04 	ldr.w	pc, [sp], #4
 801465e:	bf00      	nop

08014660 <_DrawBitmap>:
 8014660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014664:	b087      	sub	sp, #28
 8014666:	4698      	mov	r8, r3
 8014668:	9f11      	ldr	r7, [sp, #68]	; 0x44
 801466a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801466c:	9401      	str	r4, [sp, #4]
 801466e:	f107 3eff 	add.w	lr, r7, #4294967295	; 0xffffffff
 8014672:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8014674:	9400      	str	r4, [sp, #0]
 8014676:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8014678:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801467a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801467c:	6887      	ldr	r7, [r0, #8]
 801467e:	f1be 0f1f 	cmp.w	lr, #31
 8014682:	d86f      	bhi.n	8014764 <_DrawBitmap+0x104>
 8014684:	e8df f01e 	tbh	[pc, lr, lsl #1]
 8014688:	01330081 	.word	0x01330081
 801468c:	00e4006e 	.word	0x00e4006e
 8014690:	006e006e 	.word	0x006e006e
 8014694:	0020006e 	.word	0x0020006e
 8014698:	006e006e 	.word	0x006e006e
 801469c:	006e006e 	.word	0x006e006e
 80146a0:	006e006e 	.word	0x006e006e
 80146a4:	006e006e 	.word	0x006e006e
 80146a8:	006e006e 	.word	0x006e006e
 80146ac:	006e006e 	.word	0x006e006e
 80146b0:	006e006e 	.word	0x006e006e
 80146b4:	006e006e 	.word	0x006e006e
 80146b8:	006e006e 	.word	0x006e006e
 80146bc:	006e006e 	.word	0x006e006e
 80146c0:	006e006e 	.word	0x006e006e
 80146c4:	0071006e 	.word	0x0071006e
 80146c8:	f8d7 e040 	ldr.w	lr, [r7, #64]	; 0x40
 80146cc:	f1be 0f00 	cmp.w	lr, #0
 80146d0:	d007      	beq.n	80146e2 <_DrawBitmap+0x82>
 80146d2:	4bc0      	ldr	r3, [pc, #768]	; (80149d4 <_DrawBitmap+0x374>)
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	7c1b      	ldrb	r3, [r3, #16]
 80146d8:	079b      	lsls	r3, r3, #30
 80146da:	d402      	bmi.n	80146e2 <_DrawBitmap+0x82>
 80146dc:	2c00      	cmp	r4, #0
 80146de:	f040 8295 	bne.w	8014c0c <_DrawBitmap+0x5ac>
 80146e2:	2e00      	cmp	r6, #0
 80146e4:	dd3e      	ble.n	8014764 <_DrawBitmap+0x104>
 80146e6:	f1a8 0a08 	sub.w	sl, r8, #8
 80146ea:	4653      	mov	r3, sl
 80146ec:	ea4f 0ada 	mov.w	sl, sl, lsr #3
 80146f0:	f10a 0001 	add.w	r0, sl, #1
 80146f4:	f8df e2dc 	ldr.w	lr, [pc, #732]	; 80149d4 <_DrawBitmap+0x374>
 80146f8:	9100      	str	r1, [sp, #0]
 80146fa:	eba3 0aca 	sub.w	sl, r3, sl, lsl #3
 80146fe:	00c3      	lsls	r3, r0, #3
 8014700:	f8de b000 	ldr.w	fp, [lr]
 8014704:	9303      	str	r3, [sp, #12]
 8014706:	f8dd e004 	ldr.w	lr, [sp, #4]
 801470a:	f8cd a010 	str.w	sl, [sp, #16]
 801470e:	0143      	lsls	r3, r0, #5
 8014710:	eb06 0c02 	add.w	ip, r6, r2
 8014714:	9302      	str	r3, [sp, #8]
 8014716:	b30c      	cbz	r4, 801475c <_DrawBitmap+0xfc>
 8014718:	6a38      	ldr	r0, [r7, #32]
 801471a:	f89b 9010 	ldrb.w	r9, [fp, #16]
 801471e:	9b00      	ldr	r3, [sp, #0]
 8014720:	683e      	ldr	r6, [r7, #0]
 8014722:	fb00 3302 	mla	r3, r0, r2, r3
 8014726:	f019 0903 	ands.w	r9, r9, #3
 801472a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801472e:	f000 8177 	beq.w	8014a20 <_DrawBitmap+0x3c0>
 8014732:	f1b9 0f02 	cmp.w	r9, #2
 8014736:	d111      	bne.n	801475c <_DrawBitmap+0xfc>
 8014738:	f1b8 0f00 	cmp.w	r8, #0
 801473c:	dd0e      	ble.n	801475c <_DrawBitmap+0xfc>
 801473e:	9900      	ldr	r1, [sp, #0]
 8014740:	4628      	mov	r0, r5
 8014742:	eb05 0908 	add.w	r9, r5, r8
 8014746:	f810 6b01 	ldrb.w	r6, [r0], #1
 801474a:	b116      	cbz	r6, 8014752 <_DrawBitmap+0xf2>
 801474c:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8014750:	601e      	str	r6, [r3, #0]
 8014752:	4548      	cmp	r0, r9
 8014754:	f103 0304 	add.w	r3, r3, #4
 8014758:	d1f5      	bne.n	8014746 <_DrawBitmap+0xe6>
 801475a:	9100      	str	r1, [sp, #0]
 801475c:	3201      	adds	r2, #1
 801475e:	4562      	cmp	r2, ip
 8014760:	4475      	add	r5, lr
 8014762:	d1d8      	bne.n	8014716 <_DrawBitmap+0xb6>
 8014764:	b007      	add	sp, #28
 8014766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801476a:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 801476c:	2c00      	cmp	r4, #0
 801476e:	f000 8230 	beq.w	8014bd2 <_DrawBitmap+0x572>
 8014772:	6980      	ldr	r0, [r0, #24]
 8014774:	9b01      	ldr	r3, [sp, #4]
 8014776:	9312      	str	r3, [sp, #72]	; 0x48
 8014778:	46a4      	mov	ip, r4
 801477a:	462b      	mov	r3, r5
 801477c:	9611      	str	r6, [sp, #68]	; 0x44
 801477e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8014782:	b007      	add	sp, #28
 8014784:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014788:	4760      	bx	ip
 801478a:	f8d7 e03c 	ldr.w	lr, [r7, #60]	; 0x3c
 801478e:	f1be 0f00 	cmp.w	lr, #0
 8014792:	d005      	beq.n	80147a0 <_DrawBitmap+0x140>
 8014794:	4b8f      	ldr	r3, [pc, #572]	; (80149d4 <_DrawBitmap+0x374>)
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	7c1b      	ldrb	r3, [r3, #16]
 801479a:	07db      	lsls	r3, r3, #31
 801479c:	f140 8246 	bpl.w	8014c2c <_DrawBitmap+0x5cc>
 80147a0:	2e00      	cmp	r6, #0
 80147a2:	dddf      	ble.n	8014764 <_DrawBitmap+0x104>
 80147a4:	f8cd 8014 	str.w	r8, [sp, #20]
 80147a8:	4690      	mov	r8, r2
 80147aa:	18b2      	adds	r2, r6, r2
 80147ac:	9203      	str	r2, [sp, #12]
 80147ae:	9a00      	ldr	r2, [sp, #0]
 80147b0:	4b88      	ldr	r3, [pc, #544]	; (80149d4 <_DrawBitmap+0x374>)
 80147b2:	f8df a224 	ldr.w	sl, [pc, #548]	; 80149d8 <_DrawBitmap+0x378>
 80147b6:	9402      	str	r4, [sp, #8]
 80147b8:	188a      	adds	r2, r1, r2
 80147ba:	4681      	mov	r9, r0
 80147bc:	9204      	str	r2, [sp, #16]
 80147be:	2680      	movs	r6, #128	; 0x80
 80147c0:	461c      	mov	r4, r3
 80147c2:	6823      	ldr	r3, [r4, #0]
 80147c4:	9a02      	ldr	r2, [sp, #8]
 80147c6:	7c1b      	ldrb	r3, [r3, #16]
 80147c8:	f8d2 e004 	ldr.w	lr, [r2, #4]
 80147cc:	f003 0303 	and.w	r3, r3, #3
 80147d0:	2b02      	cmp	r3, #2
 80147d2:	f000 81d3 	beq.w	8014b7c <_DrawBitmap+0x51c>
 80147d6:	2b03      	cmp	r3, #3
 80147d8:	f000 81a7 	beq.w	8014b2a <_DrawBitmap+0x4ca>
 80147dc:	2b01      	cmp	r3, #1
 80147de:	f000 81a4 	beq.w	8014b2a <_DrawBitmap+0x4ca>
 80147e2:	782b      	ldrb	r3, [r5, #0]
 80147e4:	6a38      	ldr	r0, [r7, #32]
 80147e6:	f81a 1003 	ldrb.w	r1, [sl, r3]
 80147ea:	9b02      	ldr	r3, [sp, #8]
 80147ec:	683a      	ldr	r2, [r7, #0]
 80147ee:	f8d3 b000 	ldr.w	fp, [r3]
 80147f2:	9b04      	ldr	r3, [sp, #16]
 80147f4:	9f00      	ldr	r7, [sp, #0]
 80147f6:	fb00 3308 	mla	r3, r0, r8, r3
 80147fa:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 80147fe:	4139      	asrs	r1, r7
 8014800:	f1c7 0308 	rsb	r3, r7, #8
 8014804:	9a05      	ldr	r2, [sp, #20]
 8014806:	46ac      	mov	ip, r5
 8014808:	e005      	b.n	8014816 <_DrawBitmap+0x1b6>
 801480a:	3a01      	subs	r2, #1
 801480c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014810:	f840 7b04 	str.w	r7, [r0], #4
 8014814:	d012      	beq.n	801483c <_DrawBitmap+0x1dc>
 8014816:	f011 0f01 	tst.w	r1, #1
 801481a:	bf0c      	ite	eq
 801481c:	465f      	moveq	r7, fp
 801481e:	4677      	movne	r7, lr
 8014820:	3b01      	subs	r3, #1
 8014822:	d1f2      	bne.n	801480a <_DrawBitmap+0x1aa>
 8014824:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8014828:	f840 7b04 	str.w	r7, [r0], #4
 801482c:	3a01      	subs	r2, #1
 801482e:	f81a 1003 	ldrb.w	r1, [sl, r3]
 8014832:	f10c 0c01 	add.w	ip, ip, #1
 8014836:	f04f 0308 	mov.w	r3, #8
 801483a:	d1ec      	bne.n	8014816 <_DrawBitmap+0x1b6>
 801483c:	9b01      	ldr	r3, [sp, #4]
 801483e:	441d      	add	r5, r3
 8014840:	9b03      	ldr	r3, [sp, #12]
 8014842:	f108 0801 	add.w	r8, r8, #1
 8014846:	4598      	cmp	r8, r3
 8014848:	d08c      	beq.n	8014764 <_DrawBitmap+0x104>
 801484a:	f8d9 7008 	ldr.w	r7, [r9, #8]
 801484e:	e7b8      	b.n	80147c2 <_DrawBitmap+0x162>
 8014850:	2e00      	cmp	r6, #0
 8014852:	dd87      	ble.n	8014764 <_DrawBitmap+0x104>
 8014854:	4b5f      	ldr	r3, [pc, #380]	; (80149d4 <_DrawBitmap+0x374>)
 8014856:	f8cd 8010 	str.w	r8, [sp, #16]
 801485a:	681b      	ldr	r3, [r3, #0]
 801485c:	9302      	str	r3, [sp, #8]
 801485e:	9b00      	ldr	r3, [sp, #0]
 8014860:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014864:	18cb      	adds	r3, r1, r3
 8014866:	eb06 0c02 	add.w	ip, r6, r2
 801486a:	9303      	str	r3, [sp, #12]
 801486c:	f04f 0ef0 	mov.w	lr, #240	; 0xf0
 8014870:	b3b4      	cbz	r4, 80148e0 <_DrawBitmap+0x280>
 8014872:	9802      	ldr	r0, [sp, #8]
 8014874:	6a3b      	ldr	r3, [r7, #32]
 8014876:	f890 9010 	ldrb.w	r9, [r0, #16]
 801487a:	9803      	ldr	r0, [sp, #12]
 801487c:	6839      	ldr	r1, [r7, #0]
 801487e:	782e      	ldrb	r6, [r5, #0]
 8014880:	fb03 0002 	mla	r0, r3, r2, r0
 8014884:	f019 0903 	ands.w	r9, r9, #3
 8014888:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801488c:	d07f      	beq.n	801498e <_DrawBitmap+0x32e>
 801488e:	f1b9 0f02 	cmp.w	r9, #2
 8014892:	d125      	bne.n	80148e0 <_DrawBitmap+0x280>
 8014894:	f8dd 9000 	ldr.w	r9, [sp]
 8014898:	f8dd a010 	ldr.w	sl, [sp, #16]
 801489c:	46ab      	mov	fp, r5
 801489e:	e002      	b.n	80148a6 <_DrawBitmap+0x246>
 80148a0:	f1ba 0a01 	subs.w	sl, sl, #1
 80148a4:	d01c      	beq.n	80148e0 <_DrawBitmap+0x280>
 80148a6:	f1c9 0101 	rsb	r1, r9, #1
 80148aa:	0089      	lsls	r1, r1, #2
 80148ac:	f1c1 0304 	rsb	r3, r1, #4
 80148b0:	fa4e f303 	asr.w	r3, lr, r3
 80148b4:	4033      	ands	r3, r6
 80148b6:	40cb      	lsrs	r3, r1
 80148b8:	f109 0901 	add.w	r9, r9, #1
 80148bc:	bf1c      	itt	ne
 80148be:	f854 3023 	ldrne.w	r3, [r4, r3, lsl #2]
 80148c2:	6003      	strne	r3, [r0, #0]
 80148c4:	f1b9 0f02 	cmp.w	r9, #2
 80148c8:	f100 0004 	add.w	r0, r0, #4
 80148cc:	d1e8      	bne.n	80148a0 <_DrawBitmap+0x240>
 80148ce:	f1ba 0a01 	subs.w	sl, sl, #1
 80148d2:	f89b 6001 	ldrb.w	r6, [fp, #1]
 80148d6:	f04f 0900 	mov.w	r9, #0
 80148da:	f10b 0b01 	add.w	fp, fp, #1
 80148de:	d1e2      	bne.n	80148a6 <_DrawBitmap+0x246>
 80148e0:	3201      	adds	r2, #1
 80148e2:	4562      	cmp	r2, ip
 80148e4:	4445      	add	r5, r8
 80148e6:	d1c3      	bne.n	8014870 <_DrawBitmap+0x210>
 80148e8:	b007      	add	sp, #28
 80148ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ee:	2e00      	cmp	r6, #0
 80148f0:	f77f af38 	ble.w	8014764 <_DrawBitmap+0x104>
 80148f4:	4b37      	ldr	r3, [pc, #220]	; (80149d4 <_DrawBitmap+0x374>)
 80148f6:	f8cd 8010 	str.w	r8, [sp, #16]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	9302      	str	r3, [sp, #8]
 80148fe:	9b00      	ldr	r3, [sp, #0]
 8014900:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014904:	18cb      	adds	r3, r1, r3
 8014906:	eb06 0c02 	add.w	ip, r6, r2
 801490a:	9303      	str	r3, [sp, #12]
 801490c:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
 8014910:	b3b4      	cbz	r4, 8014980 <_DrawBitmap+0x320>
 8014912:	9802      	ldr	r0, [sp, #8]
 8014914:	6a3b      	ldr	r3, [r7, #32]
 8014916:	f890 9010 	ldrb.w	r9, [r0, #16]
 801491a:	9803      	ldr	r0, [sp, #12]
 801491c:	6839      	ldr	r1, [r7, #0]
 801491e:	782e      	ldrb	r6, [r5, #0]
 8014920:	fb03 0002 	mla	r0, r3, r2, r0
 8014924:	f019 0903 	ands.w	r9, r9, #3
 8014928:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801492c:	d056      	beq.n	80149dc <_DrawBitmap+0x37c>
 801492e:	f1b9 0f02 	cmp.w	r9, #2
 8014932:	d125      	bne.n	8014980 <_DrawBitmap+0x320>
 8014934:	f8dd 9000 	ldr.w	r9, [sp]
 8014938:	f8dd a010 	ldr.w	sl, [sp, #16]
 801493c:	46ab      	mov	fp, r5
 801493e:	e002      	b.n	8014946 <_DrawBitmap+0x2e6>
 8014940:	f1ba 0a01 	subs.w	sl, sl, #1
 8014944:	d01c      	beq.n	8014980 <_DrawBitmap+0x320>
 8014946:	f1c9 0103 	rsb	r1, r9, #3
 801494a:	0049      	lsls	r1, r1, #1
 801494c:	f1c1 0306 	rsb	r3, r1, #6
 8014950:	fa4e f303 	asr.w	r3, lr, r3
 8014954:	4033      	ands	r3, r6
 8014956:	40cb      	lsrs	r3, r1
 8014958:	f109 0901 	add.w	r9, r9, #1
 801495c:	bf1c      	itt	ne
 801495e:	f854 3023 	ldrne.w	r3, [r4, r3, lsl #2]
 8014962:	6003      	strne	r3, [r0, #0]
 8014964:	f1b9 0f04 	cmp.w	r9, #4
 8014968:	f100 0004 	add.w	r0, r0, #4
 801496c:	d1e8      	bne.n	8014940 <_DrawBitmap+0x2e0>
 801496e:	f1ba 0a01 	subs.w	sl, sl, #1
 8014972:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8014976:	f04f 0900 	mov.w	r9, #0
 801497a:	f10b 0b01 	add.w	fp, fp, #1
 801497e:	d1e2      	bne.n	8014946 <_DrawBitmap+0x2e6>
 8014980:	3201      	adds	r2, #1
 8014982:	4562      	cmp	r2, ip
 8014984:	4445      	add	r5, r8
 8014986:	d1c3      	bne.n	8014910 <_DrawBitmap+0x2b0>
 8014988:	b007      	add	sp, #28
 801498a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801498e:	f8dd 9000 	ldr.w	r9, [sp]
 8014992:	f8dd a010 	ldr.w	sl, [sp, #16]
 8014996:	46ab      	mov	fp, r5
 8014998:	e002      	b.n	80149a0 <_DrawBitmap+0x340>
 801499a:	f1ba 0a01 	subs.w	sl, sl, #1
 801499e:	d09f      	beq.n	80148e0 <_DrawBitmap+0x280>
 80149a0:	f1c9 0301 	rsb	r3, r9, #1
 80149a4:	0099      	lsls	r1, r3, #2
 80149a6:	f1c1 0304 	rsb	r3, r1, #4
 80149aa:	fa4e f303 	asr.w	r3, lr, r3
 80149ae:	4033      	ands	r3, r6
 80149b0:	40cb      	lsrs	r3, r1
 80149b2:	f109 0901 	add.w	r9, r9, #1
 80149b6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80149ba:	f840 3b04 	str.w	r3, [r0], #4
 80149be:	f1b9 0f02 	cmp.w	r9, #2
 80149c2:	d1ea      	bne.n	801499a <_DrawBitmap+0x33a>
 80149c4:	f89b 6001 	ldrb.w	r6, [fp, #1]
 80149c8:	f04f 0900 	mov.w	r9, #0
 80149cc:	f10b 0b01 	add.w	fp, fp, #1
 80149d0:	e7e3      	b.n	801499a <_DrawBitmap+0x33a>
 80149d2:	bf00      	nop
 80149d4:	200000a8 	.word	0x200000a8
 80149d8:	080314f4 	.word	0x080314f4
 80149dc:	f8dd 9000 	ldr.w	r9, [sp]
 80149e0:	f8dd a010 	ldr.w	sl, [sp, #16]
 80149e4:	46ab      	mov	fp, r5
 80149e6:	e002      	b.n	80149ee <_DrawBitmap+0x38e>
 80149e8:	f1ba 0a01 	subs.w	sl, sl, #1
 80149ec:	d0c8      	beq.n	8014980 <_DrawBitmap+0x320>
 80149ee:	f1c9 0303 	rsb	r3, r9, #3
 80149f2:	0059      	lsls	r1, r3, #1
 80149f4:	f1c1 0306 	rsb	r3, r1, #6
 80149f8:	fa4e f303 	asr.w	r3, lr, r3
 80149fc:	4033      	ands	r3, r6
 80149fe:	40cb      	lsrs	r3, r1
 8014a00:	f109 0901 	add.w	r9, r9, #1
 8014a04:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014a08:	f840 3b04 	str.w	r3, [r0], #4
 8014a0c:	f1b9 0f04 	cmp.w	r9, #4
 8014a10:	d1ea      	bne.n	80149e8 <_DrawBitmap+0x388>
 8014a12:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8014a16:	f04f 0900 	mov.w	r9, #0
 8014a1a:	f10b 0b01 	add.w	fp, fp, #1
 8014a1e:	e7e3      	b.n	80149e8 <_DrawBitmap+0x388>
 8014a20:	f1b8 0f07 	cmp.w	r8, #7
 8014a24:	f340 80ff 	ble.w	8014c26 <_DrawBitmap+0x5c6>
 8014a28:	9900      	ldr	r1, [sp, #0]
 8014a2a:	9301      	str	r3, [sp, #4]
 8014a2c:	f105 0608 	add.w	r6, r5, #8
 8014a30:	f103 0020 	add.w	r0, r3, #32
 8014a34:	46c1      	mov	r9, r8
 8014a36:	f816 ac08 	ldrb.w	sl, [r6, #-8]
 8014a3a:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 8014a3e:	f840 3c20 	str.w	r3, [r0, #-32]
 8014a42:	f816 ac07 	ldrb.w	sl, [r6, #-7]
 8014a46:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 8014a4a:	f840 3c1c 	str.w	r3, [r0, #-28]
 8014a4e:	f816 ac06 	ldrb.w	sl, [r6, #-6]
 8014a52:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 8014a56:	f840 3c18 	str.w	r3, [r0, #-24]
 8014a5a:	f816 ac05 	ldrb.w	sl, [r6, #-5]
 8014a5e:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 8014a62:	f840 3c14 	str.w	r3, [r0, #-20]
 8014a66:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8014a6a:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 8014a6e:	f840 3c10 	str.w	r3, [r0, #-16]
 8014a72:	f816 ac03 	ldrb.w	sl, [r6, #-3]
 8014a76:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 8014a7a:	f840 3c0c 	str.w	r3, [r0, #-12]
 8014a7e:	f816 ac02 	ldrb.w	sl, [r6, #-2]
 8014a82:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 8014a86:	f840 3c08 	str.w	r3, [r0, #-8]
 8014a8a:	f816 ac01 	ldrb.w	sl, [r6, #-1]
 8014a8e:	f1a9 0908 	sub.w	r9, r9, #8
 8014a92:	f854 302a 	ldr.w	r3, [r4, sl, lsl #2]
 8014a96:	f840 3c04 	str.w	r3, [r0, #-4]
 8014a9a:	f1b9 0f07 	cmp.w	r9, #7
 8014a9e:	f106 0608 	add.w	r6, r6, #8
 8014aa2:	f100 0020 	add.w	r0, r0, #32
 8014aa6:	dcc6      	bgt.n	8014a36 <_DrawBitmap+0x3d6>
 8014aa8:	9b01      	ldr	r3, [sp, #4]
 8014aaa:	9100      	str	r1, [sp, #0]
 8014aac:	9902      	ldr	r1, [sp, #8]
 8014aae:	9e04      	ldr	r6, [sp, #16]
 8014ab0:	440b      	add	r3, r1
 8014ab2:	9903      	ldr	r1, [sp, #12]
 8014ab4:	1868      	adds	r0, r5, r1
 8014ab6:	2e03      	cmp	r6, #3
 8014ab8:	dd1f      	ble.n	8014afa <_DrawBitmap+0x49a>
 8014aba:	f890 9000 	ldrb.w	r9, [r0]
 8014abe:	f854 1029 	ldr.w	r1, [r4, r9, lsl #2]
 8014ac2:	6019      	str	r1, [r3, #0]
 8014ac4:	f890 9001 	ldrb.w	r9, [r0, #1]
 8014ac8:	f854 1029 	ldr.w	r1, [r4, r9, lsl #2]
 8014acc:	6059      	str	r1, [r3, #4]
 8014ace:	f890 9002 	ldrb.w	r9, [r0, #2]
 8014ad2:	f854 1029 	ldr.w	r1, [r4, r9, lsl #2]
 8014ad6:	6099      	str	r1, [r3, #8]
 8014ad8:	f890 9003 	ldrb.w	r9, [r0, #3]
 8014adc:	f1a6 0a04 	sub.w	sl, r6, #4
 8014ae0:	ea4f 069a 	mov.w	r6, sl, lsr #2
 8014ae4:	f854 1029 	ldr.w	r1, [r4, r9, lsl #2]
 8014ae8:	60d9      	str	r1, [r3, #12]
 8014aea:	f106 0901 	add.w	r9, r6, #1
 8014aee:	eb00 0089 	add.w	r0, r0, r9, lsl #2
 8014af2:	ebaa 0686 	sub.w	r6, sl, r6, lsl #2
 8014af6:	eb03 1309 	add.w	r3, r3, r9, lsl #4
 8014afa:	2e00      	cmp	r6, #0
 8014afc:	f43f ae2e 	beq.w	801475c <_DrawBitmap+0xfc>
 8014b00:	f890 9000 	ldrb.w	r9, [r0]
 8014b04:	2e01      	cmp	r6, #1
 8014b06:	f854 1029 	ldr.w	r1, [r4, r9, lsl #2]
 8014b0a:	6019      	str	r1, [r3, #0]
 8014b0c:	f43f ae26 	beq.w	801475c <_DrawBitmap+0xfc>
 8014b10:	f890 9001 	ldrb.w	r9, [r0, #1]
 8014b14:	2e02      	cmp	r6, #2
 8014b16:	f854 1029 	ldr.w	r1, [r4, r9, lsl #2]
 8014b1a:	6059      	str	r1, [r3, #4]
 8014b1c:	f43f ae1e 	beq.w	801475c <_DrawBitmap+0xfc>
 8014b20:	7880      	ldrb	r0, [r0, #2]
 8014b22:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8014b26:	6098      	str	r0, [r3, #8]
 8014b28:	e618      	b.n	801475c <_DrawBitmap+0xfc>
 8014b2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014b2e:	689b      	ldr	r3, [r3, #8]
 8014b30:	4798      	blx	r3
 8014b32:	9a04      	ldr	r2, [sp, #16]
 8014b34:	9905      	ldr	r1, [sp, #20]
 8014b36:	9b00      	ldr	r3, [sp, #0]
 8014b38:	4683      	mov	fp, r0
 8014b3a:	eb02 0c01 	add.w	ip, r2, r1
 8014b3e:	46ae      	mov	lr, r5
 8014b40:	f89e 0000 	ldrb.w	r0, [lr]
 8014b44:	fa46 f103 	asr.w	r1, r6, r3
 8014b48:	4208      	tst	r0, r1
 8014b4a:	f103 0301 	add.w	r3, r3, #1
 8014b4e:	d00b      	beq.n	8014b68 <_DrawBitmap+0x508>
 8014b50:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8014b54:	6a08      	ldr	r0, [r1, #32]
 8014b56:	680f      	ldr	r7, [r1, #0]
 8014b58:	fb00 2008 	mla	r0, r0, r8, r2
 8014b5c:	f857 1020 	ldr.w	r1, [r7, r0, lsl #2]
 8014b60:	ea81 010b 	eor.w	r1, r1, fp
 8014b64:	f847 1020 	str.w	r1, [r7, r0, lsl #2]
 8014b68:	2b08      	cmp	r3, #8
 8014b6a:	f102 0201 	add.w	r2, r2, #1
 8014b6e:	bf04      	itt	eq
 8014b70:	f10e 0e01 	addeq.w	lr, lr, #1
 8014b74:	2300      	moveq	r3, #0
 8014b76:	4562      	cmp	r2, ip
 8014b78:	d1e2      	bne.n	8014b40 <_DrawBitmap+0x4e0>
 8014b7a:	e65f      	b.n	801483c <_DrawBitmap+0x1dc>
 8014b7c:	782b      	ldrb	r3, [r5, #0]
 8014b7e:	6a39      	ldr	r1, [r7, #32]
 8014b80:	f81a 0003 	ldrb.w	r0, [sl, r3]
 8014b84:	9b04      	ldr	r3, [sp, #16]
 8014b86:	683a      	ldr	r2, [r7, #0]
 8014b88:	9f00      	ldr	r7, [sp, #0]
 8014b8a:	fb01 3308 	mla	r3, r1, r8, r3
 8014b8e:	46a4      	mov	ip, r4
 8014b90:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8014b94:	4138      	asrs	r0, r7
 8014b96:	f1c7 0308 	rsb	r3, r7, #8
 8014b9a:	4674      	mov	r4, lr
 8014b9c:	9a05      	ldr	r2, [sp, #20]
 8014b9e:	462f      	mov	r7, r5
 8014ba0:	46e6      	mov	lr, ip
 8014ba2:	e003      	b.n	8014bac <_DrawBitmap+0x54c>
 8014ba4:	3a01      	subs	r2, #1
 8014ba6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8014baa:	d010      	beq.n	8014bce <_DrawBitmap+0x56e>
 8014bac:	f010 0f01 	tst.w	r0, #1
 8014bb0:	bf18      	it	ne
 8014bb2:	600c      	strne	r4, [r1, #0]
 8014bb4:	3b01      	subs	r3, #1
 8014bb6:	f101 0104 	add.w	r1, r1, #4
 8014bba:	d1f3      	bne.n	8014ba4 <_DrawBitmap+0x544>
 8014bbc:	787b      	ldrb	r3, [r7, #1]
 8014bbe:	3a01      	subs	r2, #1
 8014bc0:	f81a 0003 	ldrb.w	r0, [sl, r3]
 8014bc4:	f107 0701 	add.w	r7, r7, #1
 8014bc8:	f04f 0308 	mov.w	r3, #8
 8014bcc:	d1ee      	bne.n	8014bac <_DrawBitmap+0x54c>
 8014bce:	4674      	mov	r4, lr
 8014bd0:	e634      	b.n	801483c <_DrawBitmap+0x1dc>
 8014bd2:	2e00      	cmp	r6, #0
 8014bd4:	f77f adc6 	ble.w	8014764 <_DrawBitmap+0x104>
 8014bd8:	f8d7 e020 	ldr.w	lr, [r7, #32]
 8014bdc:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014be0:	46a4      	mov	ip, r4
 8014be2:	fb0e 1202 	mla	r2, lr, r2, r1
 8014be6:	6839      	ldr	r1, [r7, #0]
 8014be8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014bec:	3904      	subs	r1, #4
 8014bee:	4643      	mov	r3, r8
 8014bf0:	4628      	mov	r0, r5
 8014bf2:	f850 4b04 	ldr.w	r4, [r0], #4
 8014bf6:	f841 4f04 	str.w	r4, [r1, #4]!
 8014bfa:	3b01      	subs	r3, #1
 8014bfc:	d1f9      	bne.n	8014bf2 <_DrawBitmap+0x592>
 8014bfe:	f10c 0c01 	add.w	ip, ip, #1
 8014c02:	4566      	cmp	r6, ip
 8014c04:	444d      	add	r5, r9
 8014c06:	4472      	add	r2, lr
 8014c08:	d1ed      	bne.n	8014be6 <_DrawBitmap+0x586>
 8014c0a:	e5ab      	b.n	8014764 <_DrawBitmap+0x104>
 8014c0c:	6980      	ldr	r0, [r0, #24]
 8014c0e:	9b01      	ldr	r3, [sp, #4]
 8014c10:	9312      	str	r3, [sp, #72]	; 0x48
 8014c12:	46f4      	mov	ip, lr
 8014c14:	462b      	mov	r3, r5
 8014c16:	9413      	str	r4, [sp, #76]	; 0x4c
 8014c18:	9611      	str	r6, [sp, #68]	; 0x44
 8014c1a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8014c1e:	b007      	add	sp, #28
 8014c20:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c24:	4760      	bx	ip
 8014c26:	4646      	mov	r6, r8
 8014c28:	4628      	mov	r0, r5
 8014c2a:	e744      	b.n	8014ab6 <_DrawBitmap+0x456>
 8014c2c:	9b01      	ldr	r3, [sp, #4]
 8014c2e:	6980      	ldr	r0, [r0, #24]
 8014c30:	9313      	str	r3, [sp, #76]	; 0x4c
 8014c32:	9b00      	ldr	r3, [sp, #0]
 8014c34:	9310      	str	r3, [sp, #64]	; 0x40
 8014c36:	46f4      	mov	ip, lr
 8014c38:	462b      	mov	r3, r5
 8014c3a:	9414      	str	r4, [sp, #80]	; 0x50
 8014c3c:	9612      	str	r6, [sp, #72]	; 0x48
 8014c3e:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8014c42:	b007      	add	sp, #28
 8014c44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c48:	4760      	bx	ip
 8014c4a:	bf00      	nop

08014c4c <_Init>:
 8014c4c:	b538      	push	{r3, r4, r5, lr}
 8014c4e:	6884      	ldr	r4, [r0, #8]
 8014c50:	4605      	mov	r5, r0
 8014c52:	b14c      	cbz	r4, 8014c68 <_Init+0x1c>
 8014c54:	69a8      	ldr	r0, [r5, #24]
 8014c56:	2200      	movs	r2, #0
 8014c58:	2101      	movs	r1, #1
 8014c5a:	f7f9 fceb 	bl	800e634 <LCD_X_DisplayDriver>
 8014c5e:	2c00      	cmp	r4, #0
 8014c60:	bf08      	it	eq
 8014c62:	f040 0001 	orreq.w	r0, r0, #1
 8014c66:	bd38      	pop	{r3, r4, r5, pc}
 8014c68:	2050      	movs	r0, #80	; 0x50
 8014c6a:	f7fa fd4d 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8014c6e:	4621      	mov	r1, r4
 8014c70:	60a8      	str	r0, [r5, #8]
 8014c72:	2250      	movs	r2, #80	; 0x50
 8014c74:	f7fd fb2e 	bl	80122d4 <GUI__memset>
 8014c78:	68ac      	ldr	r4, [r5, #8]
 8014c7a:	e7eb      	b.n	8014c54 <_Init+0x8>

08014c7c <_SetVRAM_BufferPTR>:
 8014c7c:	b570      	push	{r4, r5, r6, lr}
 8014c7e:	6884      	ldr	r4, [r0, #8]
 8014c80:	460d      	mov	r5, r1
 8014c82:	b11c      	cbz	r4, 8014c8c <_SetVRAM_BufferPTR+0x10>
 8014c84:	682b      	ldr	r3, [r5, #0]
 8014c86:	6023      	str	r3, [r4, #0]
 8014c88:	60a5      	str	r5, [r4, #8]
 8014c8a:	bd70      	pop	{r4, r5, r6, pc}
 8014c8c:	4606      	mov	r6, r0
 8014c8e:	2050      	movs	r0, #80	; 0x50
 8014c90:	f7fa fd3a 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8014c94:	4621      	mov	r1, r4
 8014c96:	60b0      	str	r0, [r6, #8]
 8014c98:	2250      	movs	r2, #80	; 0x50
 8014c9a:	f7fd fb1b 	bl	80122d4 <GUI__memset>
 8014c9e:	68b4      	ldr	r4, [r6, #8]
 8014ca0:	2c00      	cmp	r4, #0
 8014ca2:	d1ef      	bne.n	8014c84 <_SetVRAM_BufferPTR+0x8>
 8014ca4:	bd70      	pop	{r4, r5, r6, pc}
 8014ca6:	bf00      	nop

08014ca8 <_GetPos>:
 8014ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014caa:	6884      	ldr	r4, [r0, #8]
 8014cac:	460f      	mov	r7, r1
 8014cae:	4616      	mov	r6, r2
 8014cb0:	b124      	cbz	r4, 8014cbc <_GetPos+0x14>
 8014cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014cb4:	603b      	str	r3, [r7, #0]
 8014cb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014cb8:	6033      	str	r3, [r6, #0]
 8014cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cbc:	4605      	mov	r5, r0
 8014cbe:	2050      	movs	r0, #80	; 0x50
 8014cc0:	f7fa fd22 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8014cc4:	4621      	mov	r1, r4
 8014cc6:	60a8      	str	r0, [r5, #8]
 8014cc8:	2250      	movs	r2, #80	; 0x50
 8014cca:	f7fd fb03 	bl	80122d4 <GUI__memset>
 8014cce:	68ac      	ldr	r4, [r5, #8]
 8014cd0:	2c00      	cmp	r4, #0
 8014cd2:	d1ee      	bne.n	8014cb2 <_GetPos+0xa>
 8014cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014cd6:	bf00      	nop

08014cd8 <_ShowBuffer>:
 8014cd8:	b570      	push	{r4, r5, r6, lr}
 8014cda:	6885      	ldr	r5, [r0, #8]
 8014cdc:	b082      	sub	sp, #8
 8014cde:	2300      	movs	r3, #0
 8014ce0:	4604      	mov	r4, r0
 8014ce2:	9301      	str	r3, [sp, #4]
 8014ce4:	460e      	mov	r6, r1
 8014ce6:	b145      	cbz	r5, 8014cfa <_ShowBuffer+0x22>
 8014ce8:	aa02      	add	r2, sp, #8
 8014cea:	69a0      	ldr	r0, [r4, #24]
 8014cec:	f842 6d04 	str.w	r6, [r2, #-4]!
 8014cf0:	210e      	movs	r1, #14
 8014cf2:	f7f9 fc9f 	bl	800e634 <LCD_X_DisplayDriver>
 8014cf6:	b002      	add	sp, #8
 8014cf8:	bd70      	pop	{r4, r5, r6, pc}
 8014cfa:	2050      	movs	r0, #80	; 0x50
 8014cfc:	f7fa fd04 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8014d00:	4629      	mov	r1, r5
 8014d02:	60a0      	str	r0, [r4, #8]
 8014d04:	2250      	movs	r2, #80	; 0x50
 8014d06:	f7fd fae5 	bl	80122d4 <GUI__memset>
 8014d0a:	68a3      	ldr	r3, [r4, #8]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d1eb      	bne.n	8014ce8 <_ShowBuffer+0x10>
 8014d10:	b002      	add	sp, #8
 8014d12:	bd70      	pop	{r4, r5, r6, pc}

08014d14 <_SetAlpha>:
 8014d14:	b570      	push	{r4, r5, r6, lr}
 8014d16:	6884      	ldr	r4, [r0, #8]
 8014d18:	b082      	sub	sp, #8
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	4605      	mov	r5, r0
 8014d1e:	9301      	str	r3, [sp, #4]
 8014d20:	460e      	mov	r6, r1
 8014d22:	b14c      	cbz	r4, 8014d38 <_SetAlpha+0x24>
 8014d24:	aa02      	add	r2, sp, #8
 8014d26:	62e6      	str	r6, [r4, #44]	; 0x2c
 8014d28:	f842 6d04 	str.w	r6, [r2, #-4]!
 8014d2c:	69a8      	ldr	r0, [r5, #24]
 8014d2e:	210a      	movs	r1, #10
 8014d30:	f7f9 fc80 	bl	800e634 <LCD_X_DisplayDriver>
 8014d34:	b002      	add	sp, #8
 8014d36:	bd70      	pop	{r4, r5, r6, pc}
 8014d38:	2050      	movs	r0, #80	; 0x50
 8014d3a:	f7fa fce5 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8014d3e:	4621      	mov	r1, r4
 8014d40:	60a8      	str	r0, [r5, #8]
 8014d42:	2250      	movs	r2, #80	; 0x50
 8014d44:	f7fd fac6 	bl	80122d4 <GUI__memset>
 8014d48:	68ac      	ldr	r4, [r5, #8]
 8014d4a:	2c00      	cmp	r4, #0
 8014d4c:	d1ea      	bne.n	8014d24 <_SetAlpha+0x10>
 8014d4e:	b002      	add	sp, #8
 8014d50:	bd70      	pop	{r4, r5, r6, pc}
 8014d52:	bf00      	nop

08014d54 <_SetVis>:
 8014d54:	b570      	push	{r4, r5, r6, lr}
 8014d56:	6884      	ldr	r4, [r0, #8]
 8014d58:	b082      	sub	sp, #8
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	4605      	mov	r5, r0
 8014d5e:	9301      	str	r3, [sp, #4]
 8014d60:	460e      	mov	r6, r1
 8014d62:	b14c      	cbz	r4, 8014d78 <_SetVis+0x24>
 8014d64:	aa02      	add	r2, sp, #8
 8014d66:	6326      	str	r6, [r4, #48]	; 0x30
 8014d68:	f842 6d04 	str.w	r6, [r2, #-4]!
 8014d6c:	69a8      	ldr	r0, [r5, #24]
 8014d6e:	2109      	movs	r1, #9
 8014d70:	f7f9 fc60 	bl	800e634 <LCD_X_DisplayDriver>
 8014d74:	b002      	add	sp, #8
 8014d76:	bd70      	pop	{r4, r5, r6, pc}
 8014d78:	2050      	movs	r0, #80	; 0x50
 8014d7a:	f7fa fcc5 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8014d7e:	4621      	mov	r1, r4
 8014d80:	60a8      	str	r0, [r5, #8]
 8014d82:	2250      	movs	r2, #80	; 0x50
 8014d84:	f7fd faa6 	bl	80122d4 <GUI__memset>
 8014d88:	68ac      	ldr	r4, [r5, #8]
 8014d8a:	2c00      	cmp	r4, #0
 8014d8c:	d1ea      	bne.n	8014d64 <_SetVis+0x10>
 8014d8e:	b002      	add	sp, #8
 8014d90:	bd70      	pop	{r4, r5, r6, pc}
 8014d92:	bf00      	nop

08014d94 <_SetVRAMAddr>:
 8014d94:	b570      	push	{r4, r5, r6, lr}
 8014d96:	6884      	ldr	r4, [r0, #8]
 8014d98:	b082      	sub	sp, #8
 8014d9a:	2300      	movs	r3, #0
 8014d9c:	4606      	mov	r6, r0
 8014d9e:	9301      	str	r3, [sp, #4]
 8014da0:	460d      	mov	r5, r1
 8014da2:	b154      	cbz	r4, 8014dba <_SetVRAMAddr+0x26>
 8014da4:	aa02      	add	r2, sp, #8
 8014da6:	6025      	str	r5, [r4, #0]
 8014da8:	6065      	str	r5, [r4, #4]
 8014daa:	f842 5d04 	str.w	r5, [r2, #-4]!
 8014dae:	69b0      	ldr	r0, [r6, #24]
 8014db0:	2102      	movs	r1, #2
 8014db2:	f7f9 fc3f 	bl	800e634 <LCD_X_DisplayDriver>
 8014db6:	b002      	add	sp, #8
 8014db8:	bd70      	pop	{r4, r5, r6, pc}
 8014dba:	2050      	movs	r0, #80	; 0x50
 8014dbc:	f7fa fca4 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8014dc0:	4621      	mov	r1, r4
 8014dc2:	60b0      	str	r0, [r6, #8]
 8014dc4:	2250      	movs	r2, #80	; 0x50
 8014dc6:	f7fd fa85 	bl	80122d4 <GUI__memset>
 8014dca:	68b4      	ldr	r4, [r6, #8]
 8014dcc:	2c00      	cmp	r4, #0
 8014dce:	d1e9      	bne.n	8014da4 <_SetVRAMAddr+0x10>
 8014dd0:	b002      	add	sp, #8
 8014dd2:	bd70      	pop	{r4, r5, r6, pc}

08014dd4 <_SetVSize>:
 8014dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dd6:	6884      	ldr	r4, [r0, #8]
 8014dd8:	4605      	mov	r5, r0
 8014dda:	460e      	mov	r6, r1
 8014ddc:	4617      	mov	r7, r2
 8014dde:	b14c      	cbz	r4, 8014df4 <_SetVSize+0x20>
 8014de0:	69a8      	ldr	r0, [r5, #24]
 8014de2:	f7fe fb07 	bl	80133f4 <LCD_GetSwapXYEx>
 8014de6:	61a6      	str	r6, [r4, #24]
 8014de8:	61e7      	str	r7, [r4, #28]
 8014dea:	b908      	cbnz	r0, 8014df0 <_SetVSize+0x1c>
 8014dec:	6226      	str	r6, [r4, #32]
 8014dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014df0:	6227      	str	r7, [r4, #32]
 8014df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014df4:	2050      	movs	r0, #80	; 0x50
 8014df6:	f7fa fc87 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8014dfa:	4621      	mov	r1, r4
 8014dfc:	60a8      	str	r0, [r5, #8]
 8014dfe:	2250      	movs	r2, #80	; 0x50
 8014e00:	f7fd fa68 	bl	80122d4 <GUI__memset>
 8014e04:	68ac      	ldr	r4, [r5, #8]
 8014e06:	2c00      	cmp	r4, #0
 8014e08:	d1ea      	bne.n	8014de0 <_SetVSize+0xc>
 8014e0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014e0c <_SetSize>:
 8014e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014e0e:	6884      	ldr	r4, [r0, #8]
 8014e10:	b083      	sub	sp, #12
 8014e12:	2300      	movs	r3, #0
 8014e14:	4605      	mov	r5, r0
 8014e16:	460f      	mov	r7, r1
 8014e18:	4616      	mov	r6, r2
 8014e1a:	9301      	str	r3, [sp, #4]
 8014e1c:	9300      	str	r3, [sp, #0]
 8014e1e:	b1ac      	cbz	r4, 8014e4c <_SetSize+0x40>
 8014e20:	6a23      	ldr	r3, [r4, #32]
 8014e22:	b153      	cbz	r3, 8014e3a <_SetSize+0x2e>
 8014e24:	6127      	str	r7, [r4, #16]
 8014e26:	6166      	str	r6, [r4, #20]
 8014e28:	466a      	mov	r2, sp
 8014e2a:	69a8      	ldr	r0, [r5, #24]
 8014e2c:	9700      	str	r7, [sp, #0]
 8014e2e:	2107      	movs	r1, #7
 8014e30:	9601      	str	r6, [sp, #4]
 8014e32:	f7f9 fbff 	bl	800e634 <LCD_X_DisplayDriver>
 8014e36:	b003      	add	sp, #12
 8014e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e3a:	69a8      	ldr	r0, [r5, #24]
 8014e3c:	f7fe fada 	bl	80133f4 <LCD_GetSwapXYEx>
 8014e40:	2800      	cmp	r0, #0
 8014e42:	bf0c      	ite	eq
 8014e44:	4638      	moveq	r0, r7
 8014e46:	4630      	movne	r0, r6
 8014e48:	6220      	str	r0, [r4, #32]
 8014e4a:	e7eb      	b.n	8014e24 <_SetSize+0x18>
 8014e4c:	2050      	movs	r0, #80	; 0x50
 8014e4e:	f7fa fc5b 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8014e52:	4621      	mov	r1, r4
 8014e54:	60a8      	str	r0, [r5, #8]
 8014e56:	2250      	movs	r2, #80	; 0x50
 8014e58:	f7fd fa3c 	bl	80122d4 <GUI__memset>
 8014e5c:	68ac      	ldr	r4, [r5, #8]
 8014e5e:	2c00      	cmp	r4, #0
 8014e60:	d1de      	bne.n	8014e20 <_SetSize+0x14>
 8014e62:	b003      	add	sp, #12
 8014e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e66:	bf00      	nop

08014e68 <_SetDevFunc>:
 8014e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e6a:	6885      	ldr	r5, [r0, #8]
 8014e6c:	460c      	mov	r4, r1
 8014e6e:	4617      	mov	r7, r2
 8014e70:	b32d      	cbz	r5, 8014ebe <_SetDevFunc+0x56>
 8014e72:	1ee3      	subs	r3, r4, #3
 8014e74:	2b25      	cmp	r3, #37	; 0x25
 8014e76:	d815      	bhi.n	8014ea4 <_SetDevFunc+0x3c>
 8014e78:	e8df f003 	tbb	[pc, r3]
 8014e7c:	14141415 	.word	0x14141415
 8014e80:	14141414 	.word	0x14141414
 8014e84:	14141414 	.word	0x14141414
 8014e88:	14141414 	.word	0x14141414
 8014e8c:	14141414 	.word	0x14141414
 8014e90:	14171414 	.word	0x14171414
 8014e94:	14141414 	.word	0x14141414
 8014e98:	141b1914 	.word	0x141b1914
 8014e9c:	141f141d 	.word	0x141f141d
 8014ea0:	1314      	.short	0x1314
 8014ea2:	64ef      	str	r7, [r5, #76]	; 0x4c
 8014ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ea6:	64af      	str	r7, [r5, #72]	; 0x48
 8014ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014eaa:	636f      	str	r7, [r5, #52]	; 0x34
 8014eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014eae:	63ef      	str	r7, [r5, #60]	; 0x3c
 8014eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014eb2:	63af      	str	r7, [r5, #56]	; 0x38
 8014eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014eb6:	646f      	str	r7, [r5, #68]	; 0x44
 8014eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014eba:	642f      	str	r7, [r5, #64]	; 0x40
 8014ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ebe:	4606      	mov	r6, r0
 8014ec0:	2050      	movs	r0, #80	; 0x50
 8014ec2:	f7fa fc21 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8014ec6:	4629      	mov	r1, r5
 8014ec8:	60b0      	str	r0, [r6, #8]
 8014eca:	2250      	movs	r2, #80	; 0x50
 8014ecc:	f7fd fa02 	bl	80122d4 <GUI__memset>
 8014ed0:	68b5      	ldr	r5, [r6, #8]
 8014ed2:	2d00      	cmp	r5, #0
 8014ed4:	d1cd      	bne.n	8014e72 <_SetDevFunc+0xa>
 8014ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014ed8 <_CopyBuffer>:
 8014ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014edc:	6884      	ldr	r4, [r0, #8]
 8014ede:	4605      	mov	r5, r0
 8014ee0:	460e      	mov	r6, r1
 8014ee2:	4617      	mov	r7, r2
 8014ee4:	b334      	cbz	r4, 8014f34 <_CopyBuffer+0x5c>
 8014ee6:	42be      	cmp	r6, r7
 8014ee8:	d01c      	beq.n	8014f24 <_CopyBuffer+0x4c>
 8014eea:	68eb      	ldr	r3, [r5, #12]
 8014eec:	2108      	movs	r1, #8
 8014eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ef0:	4628      	mov	r0, r5
 8014ef2:	4798      	blx	r3
 8014ef4:	69a1      	ldr	r1, [r4, #24]
 8014ef6:	6963      	ldr	r3, [r4, #20]
 8014ef8:	68a2      	ldr	r2, [r4, #8]
 8014efa:	fb03 f301 	mul.w	r3, r3, r1
 8014efe:	fb00 f003 	mul.w	r0, r0, r3
 8014f02:	08c3      	lsrs	r3, r0, #3
 8014f04:	b182      	cbz	r2, 8014f28 <_CopyBuffer+0x50>
 8014f06:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 8014f0a:	f852 9027 	ldr.w	r9, [r2, r7, lsl #2]
 8014f0e:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 8014f12:	f1b8 0f00 	cmp.w	r8, #0
 8014f16:	d01a      	beq.n	8014f4e <_CopyBuffer+0x76>
 8014f18:	463a      	mov	r2, r7
 8014f1a:	4631      	mov	r1, r6
 8014f1c:	69a8      	ldr	r0, [r5, #24]
 8014f1e:	47c0      	blx	r8
 8014f20:	f8c4 9000 	str.w	r9, [r4]
 8014f24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f28:	6862      	ldr	r2, [r4, #4]
 8014f2a:	fb03 2106 	mla	r1, r3, r6, r2
 8014f2e:	fb03 2907 	mla	r9, r3, r7, r2
 8014f32:	e7ec      	b.n	8014f0e <_CopyBuffer+0x36>
 8014f34:	2050      	movs	r0, #80	; 0x50
 8014f36:	f7fa fbe7 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8014f3a:	4621      	mov	r1, r4
 8014f3c:	60a8      	str	r0, [r5, #8]
 8014f3e:	2250      	movs	r2, #80	; 0x50
 8014f40:	f7fd f9c8 	bl	80122d4 <GUI__memset>
 8014f44:	68ac      	ldr	r4, [r5, #8]
 8014f46:	2c00      	cmp	r4, #0
 8014f48:	d1cd      	bne.n	8014ee6 <_CopyBuffer+0xe>
 8014f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f4e:	4803      	ldr	r0, [pc, #12]	; (8014f5c <_CopyBuffer+0x84>)
 8014f50:	461a      	mov	r2, r3
 8014f52:	6803      	ldr	r3, [r0, #0]
 8014f54:	4648      	mov	r0, r9
 8014f56:	4798      	blx	r3
 8014f58:	e7e2      	b.n	8014f20 <_CopyBuffer+0x48>
 8014f5a:	bf00      	nop
 8014f5c:	200000c8 	.word	0x200000c8

08014f60 <_SetPos>:
 8014f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f64:	6884      	ldr	r4, [r0, #8]
 8014f66:	b089      	sub	sp, #36	; 0x24
 8014f68:	2300      	movs	r3, #0
 8014f6a:	4605      	mov	r5, r0
 8014f6c:	460f      	mov	r7, r1
 8014f6e:	4616      	mov	r6, r2
 8014f70:	9303      	str	r3, [sp, #12]
 8014f72:	9302      	str	r3, [sp, #8]
 8014f74:	9304      	str	r3, [sp, #16]
 8014f76:	9305      	str	r3, [sp, #20]
 8014f78:	9306      	str	r3, [sp, #24]
 8014f7a:	9307      	str	r3, [sp, #28]
 8014f7c:	2c00      	cmp	r4, #0
 8014f7e:	d05e      	beq.n	801503e <_SetPos+0xde>
 8014f80:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8014f82:	b133      	cbz	r3, 8014f92 <_SetPos+0x32>
 8014f84:	4632      	mov	r2, r6
 8014f86:	4639      	mov	r1, r7
 8014f88:	69a8      	ldr	r0, [r5, #24]
 8014f8a:	4798      	blx	r3
 8014f8c:	b009      	add	sp, #36	; 0x24
 8014f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f92:	6267      	str	r7, [r4, #36]	; 0x24
 8014f94:	62a6      	str	r6, [r4, #40]	; 0x28
 8014f96:	f7fe fafd 	bl	8013594 <LCD_GetXSizeDisplay>
 8014f9a:	4681      	mov	r9, r0
 8014f9c:	f7fe fb00 	bl	80135a0 <LCD_GetYSizeDisplay>
 8014fa0:	68eb      	ldr	r3, [r5, #12]
 8014fa2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fa8:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014fac:	4682      	mov	sl, r0
 8014fae:	2108      	movs	r1, #8
 8014fb0:	4628      	mov	r0, r5
 8014fb2:	4798      	blx	r3
 8014fb4:	1dc2      	adds	r2, r0, #7
 8014fb6:	bf48      	it	mi
 8014fb8:	f100 020e 	addmi.w	r2, r0, #14
 8014fbc:	10d2      	asrs	r2, r2, #3
 8014fbe:	2f00      	cmp	r7, #0
 8014fc0:	9206      	str	r2, [sp, #24]
 8014fc2:	db56      	blt.n	8015072 <_SetPos+0x112>
 8014fc4:	eb07 030b 	add.w	r3, r7, fp
 8014fc8:	4599      	cmp	r9, r3
 8014fca:	9702      	str	r7, [sp, #8]
 8014fcc:	bfb6      	itet	lt
 8014fce:	ebc7 0709 	rsblt	r7, r7, r9
 8014fd2:	f8cd b010 	strge.w	fp, [sp, #16]
 8014fd6:	9704      	strlt	r7, [sp, #16]
 8014fd8:	2e00      	cmp	r6, #0
 8014fda:	db3e      	blt.n	801505a <_SetPos+0xfa>
 8014fdc:	eb06 0308 	add.w	r3, r6, r8
 8014fe0:	459a      	cmp	sl, r3
 8014fe2:	bfb8      	it	lt
 8014fe4:	ebc6 010a 	rsblt	r1, r6, sl
 8014fe8:	9603      	str	r6, [sp, #12]
 8014fea:	bfa6      	itte	ge
 8014fec:	f8cd 8014 	strge.w	r8, [sp, #20]
 8014ff0:	4641      	movge	r1, r8
 8014ff2:	9105      	strlt	r1, [sp, #20]
 8014ff4:	9b04      	ldr	r3, [sp, #16]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	dd0f      	ble.n	801501a <_SetPos+0xba>
 8014ffa:	2900      	cmp	r1, #0
 8014ffc:	dd0d      	ble.n	801501a <_SetPos+0xba>
 8014ffe:	9b02      	ldr	r3, [sp, #8]
 8015000:	4599      	cmp	r9, r3
 8015002:	dd0a      	ble.n	801501a <_SetPos+0xba>
 8015004:	45b2      	cmp	sl, r6
 8015006:	dd08      	ble.n	801501a <_SetPos+0xba>
 8015008:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801500a:	2b00      	cmp	r3, #0
 801500c:	d03a      	beq.n	8015084 <_SetPos+0x124>
 801500e:	aa02      	add	r2, sp, #8
 8015010:	69a8      	ldr	r0, [r5, #24]
 8015012:	2108      	movs	r1, #8
 8015014:	f7f9 fb0e 	bl	800e634 <LCD_X_DisplayDriver>
 8015018:	e7b8      	b.n	8014f8c <_SetPos+0x2c>
 801501a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801501c:	2b01      	cmp	r3, #1
 801501e:	d1b5      	bne.n	8014f8c <_SetPos+0x2c>
 8015020:	68ac      	ldr	r4, [r5, #8]
 8015022:	2300      	movs	r3, #0
 8015024:	9301      	str	r3, [sp, #4]
 8015026:	2c00      	cmp	r4, #0
 8015028:	d039      	beq.n	801509e <_SetPos+0x13e>
 801502a:	aa08      	add	r2, sp, #32
 801502c:	2300      	movs	r3, #0
 801502e:	6323      	str	r3, [r4, #48]	; 0x30
 8015030:	69a8      	ldr	r0, [r5, #24]
 8015032:	f842 3d1c 	str.w	r3, [r2, #-28]!
 8015036:	2109      	movs	r1, #9
 8015038:	f7f9 fafc 	bl	800e634 <LCD_X_DisplayDriver>
 801503c:	e7a6      	b.n	8014f8c <_SetPos+0x2c>
 801503e:	2050      	movs	r0, #80	; 0x50
 8015040:	f7fa fb62 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 8015044:	4621      	mov	r1, r4
 8015046:	60a8      	str	r0, [r5, #8]
 8015048:	2250      	movs	r2, #80	; 0x50
 801504a:	f7fd f943 	bl	80122d4 <GUI__memset>
 801504e:	68ac      	ldr	r4, [r5, #8]
 8015050:	2c00      	cmp	r4, #0
 8015052:	d195      	bne.n	8014f80 <_SetPos+0x20>
 8015054:	b009      	add	sp, #36	; 0x24
 8015056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801505a:	9b07      	ldr	r3, [sp, #28]
 801505c:	fb02 f206 	mul.w	r2, r2, r6
 8015060:	eb06 0108 	add.w	r1, r6, r8
 8015064:	fb0b 3312 	mls	r3, fp, r2, r3
 8015068:	2600      	movs	r6, #0
 801506a:	9105      	str	r1, [sp, #20]
 801506c:	9307      	str	r3, [sp, #28]
 801506e:	9603      	str	r6, [sp, #12]
 8015070:	e7c0      	b.n	8014ff4 <_SetPos+0x94>
 8015072:	9b07      	ldr	r3, [sp, #28]
 8015074:	2100      	movs	r1, #0
 8015076:	fb02 3317 	mls	r3, r2, r7, r3
 801507a:	445f      	add	r7, fp
 801507c:	9307      	str	r3, [sp, #28]
 801507e:	9704      	str	r7, [sp, #16]
 8015080:	9102      	str	r1, [sp, #8]
 8015082:	e7a9      	b.n	8014fd8 <_SetPos+0x78>
 8015084:	68ac      	ldr	r4, [r5, #8]
 8015086:	9301      	str	r3, [sp, #4]
 8015088:	b1b4      	cbz	r4, 80150b8 <_SetPos+0x158>
 801508a:	aa08      	add	r2, sp, #32
 801508c:	2301      	movs	r3, #1
 801508e:	6323      	str	r3, [r4, #48]	; 0x30
 8015090:	2109      	movs	r1, #9
 8015092:	f842 3d1c 	str.w	r3, [r2, #-28]!
 8015096:	69a8      	ldr	r0, [r5, #24]
 8015098:	f7f9 facc 	bl	800e634 <LCD_X_DisplayDriver>
 801509c:	e7b7      	b.n	801500e <_SetPos+0xae>
 801509e:	2050      	movs	r0, #80	; 0x50
 80150a0:	f7fa fb32 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 80150a4:	4621      	mov	r1, r4
 80150a6:	60a8      	str	r0, [r5, #8]
 80150a8:	2250      	movs	r2, #80	; 0x50
 80150aa:	f7fd f913 	bl	80122d4 <GUI__memset>
 80150ae:	68ac      	ldr	r4, [r5, #8]
 80150b0:	2c00      	cmp	r4, #0
 80150b2:	f43f af6b 	beq.w	8014f8c <_SetPos+0x2c>
 80150b6:	e7b8      	b.n	801502a <_SetPos+0xca>
 80150b8:	2050      	movs	r0, #80	; 0x50
 80150ba:	f7fa fb25 	bl	800f708 <GUI_ALLOC_GetFixedBlock>
 80150be:	4621      	mov	r1, r4
 80150c0:	60a8      	str	r0, [r5, #8]
 80150c2:	2250      	movs	r2, #80	; 0x50
 80150c4:	f7fd f906 	bl	80122d4 <GUI__memset>
 80150c8:	68ac      	ldr	r4, [r5, #8]
 80150ca:	2c00      	cmp	r4, #0
 80150cc:	d09f      	beq.n	801500e <_SetPos+0xae>
 80150ce:	e7dc      	b.n	801508a <_SetPos+0x12a>

080150d0 <_GetDevData>:
 80150d0:	2901      	cmp	r1, #1
 80150d2:	4802      	ldr	r0, [pc, #8]	; (80150dc <_GetDevData+0xc>)
 80150d4:	bf18      	it	ne
 80150d6:	2000      	movne	r0, #0
 80150d8:	4770      	bx	lr
 80150da:	bf00      	nop
 80150dc:	0803141c 	.word	0x0803141c

080150e0 <_GetDevFunc>:
 80150e0:	2916      	cmp	r1, #22
 80150e2:	4802      	ldr	r0, [pc, #8]	; (80150ec <_GetDevFunc+0xc>)
 80150e4:	bf18      	it	ne
 80150e6:	2000      	movne	r0, #0
 80150e8:	4770      	bx	lr
 80150ea:	bf00      	nop
 80150ec:	0801600d 	.word	0x0801600d

080150f0 <_GetDevProp>:
 80150f0:	2908      	cmp	r1, #8
 80150f2:	bf0c      	ite	eq
 80150f4:	2020      	moveq	r0, #32
 80150f6:	2000      	movne	r0, #0
 80150f8:	4770      	bx	lr
 80150fa:	bf00      	nop

080150fc <_SetOrg>:
 80150fc:	6800      	ldr	r0, [r0, #0]
 80150fe:	68c3      	ldr	r3, [r0, #12]
 8015100:	6a1b      	ldr	r3, [r3, #32]
 8015102:	4718      	bx	r3

08015104 <_GetRect>:
 8015104:	b570      	push	{r4, r5, r6, lr}
 8015106:	b082      	sub	sp, #8
 8015108:	6880      	ldr	r0, [r0, #8]
 801510a:	460c      	mov	r4, r1
 801510c:	f7fa fc2c 	bl	800f968 <GUI_ALLOC_LockH>
 8015110:	a902      	add	r1, sp, #8
 8015112:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8015116:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 801511a:	8902      	ldrh	r2, [r0, #8]
 801511c:	8943      	ldrh	r3, [r0, #10]
 801511e:	f841 0d04 	str.w	r0, [r1, #-4]!
 8015122:	4432      	add	r2, r6
 8015124:	442b      	add	r3, r5
 8015126:	3a01      	subs	r2, #1
 8015128:	3b01      	subs	r3, #1
 801512a:	8026      	strh	r6, [r4, #0]
 801512c:	80a2      	strh	r2, [r4, #4]
 801512e:	8065      	strh	r5, [r4, #2]
 8015130:	80e3      	strh	r3, [r4, #6]
 8015132:	4608      	mov	r0, r1
 8015134:	f7fa fc2a 	bl	800f98c <GUI_ALLOC_UnlockH>
 8015138:	b002      	add	sp, #8
 801513a:	bd70      	pop	{r4, r5, r6, pc}

0801513c <_DrawBitmap>:
 801513c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015140:	4caa      	ldr	r4, [pc, #680]	; (80153ec <_DrawBitmap+0x2b0>)
 8015142:	6824      	ldr	r4, [r4, #0]
 8015144:	b093      	sub	sp, #76	; 0x4c
 8015146:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8015148:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801514a:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 801514e:	b916      	cbnz	r6, 8015156 <_DrawBitmap+0x1a>
 8015150:	b013      	add	sp, #76	; 0x4c
 8015152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015156:	4607      	mov	r7, r0
 8015158:	4630      	mov	r0, r6
 801515a:	9208      	str	r2, [sp, #32]
 801515c:	9303      	str	r3, [sp, #12]
 801515e:	460c      	mov	r4, r1
 8015160:	f7fa fc02 	bl	800f968 <GUI_ALLOC_LockH>
 8015164:	6942      	ldr	r2, [r0, #20]
 8015166:	900f      	str	r0, [sp, #60]	; 0x3c
 8015168:	2a00      	cmp	r2, #0
 801516a:	f040 80d6 	bne.w	801531a <_DrawBitmap+0x1de>
 801516e:	4603      	mov	r3, r0
 8015170:	68db      	ldr	r3, [r3, #12]
 8015172:	9304      	str	r3, [sp, #16]
 8015174:	a80f      	add	r0, sp, #60	; 0x3c
 8015176:	9210      	str	r2, [sp, #64]	; 0x40
 8015178:	f7fa fc08 	bl	800f98c <GUI_ALLOC_UnlockH>
 801517c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801517e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015180:	18e3      	adds	r3, r4, r3
 8015182:	9305      	str	r3, [sp, #20]
 8015184:	4b99      	ldr	r3, [pc, #612]	; (80153ec <_DrawBitmap+0x2b0>)
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	b120      	cbz	r0, 8015194 <_DrawBitmap+0x58>
 801518a:	7c1a      	ldrb	r2, [r3, #16]
 801518c:	4c97      	ldr	r4, [pc, #604]	; (80153ec <_DrawBitmap+0x2b0>)
 801518e:	0796      	lsls	r6, r2, #30
 8015190:	f140 8098 	bpl.w	80152c4 <_DrawBitmap+0x188>
 8015194:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8015196:	f7fa fbe7 	bl	800f968 <GUI_ALLOC_LockH>
 801519a:	4604      	mov	r4, r0
 801519c:	9908      	ldr	r1, [sp, #32]
 801519e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80151a2:	68e3      	ldr	r3, [r4, #12]
 80151a4:	1a8a      	subs	r2, r1, r2
 80151a6:	fb03 f302 	mul.w	r3, r3, r2
 80151aa:	9905      	ldr	r1, [sp, #20]
 80151ac:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80151b0:	a812      	add	r0, sp, #72	; 0x48
 80151b2:	1a8a      	subs	r2, r1, r2
 80151b4:	3318      	adds	r3, #24
 80151b6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80151ba:	18e3      	adds	r3, r4, r3
 80151bc:	f840 4d04 	str.w	r4, [r0, #-4]!
 80151c0:	9302      	str	r3, [sp, #8]
 80151c2:	f7fa fbe3 	bl	800f98c <GUI_ALLOC_UnlockH>
 80151c6:	2d17      	cmp	r5, #23
 80151c8:	dd4d      	ble.n	8015266 <_DrawBitmap+0x12a>
 80151ca:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	dd40      	ble.n	8015252 <_DrawBitmap+0x116>
 80151d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80151d4:	9707      	str	r7, [sp, #28]
 80151d6:	4443      	add	r3, r8
 80151d8:	9306      	str	r3, [sp, #24]
 80151da:	9b03      	ldr	r3, [sp, #12]
 80151dc:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80153f8 <_DrawBitmap+0x2bc>
 80151e0:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80151e2:	009b      	lsls	r3, r3, #2
 80151e4:	9308      	str	r3, [sp, #32]
 80151e6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80151e8:	b128      	cbz	r0, 80151f6 <_DrawBitmap+0xba>
 80151ea:	6883      	ldr	r3, [r0, #8]
 80151ec:	9905      	ldr	r1, [sp, #20]
 80151ee:	685c      	ldr	r4, [r3, #4]
 80151f0:	9b03      	ldr	r3, [sp, #12]
 80151f2:	4642      	mov	r2, r8
 80151f4:	47a0      	blx	r4
 80151f6:	9b07      	ldr	r3, [sp, #28]
 80151f8:	691b      	ldr	r3, [r3, #16]
 80151fa:	68da      	ldr	r2, [r3, #12]
 80151fc:	2a00      	cmp	r2, #0
 80151fe:	f040 8085 	bne.w	801530c <_DrawBitmap+0x1d0>
 8015202:	685b      	ldr	r3, [r3, #4]
 8015204:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8015208:	4798      	blx	r3
 801520a:	f8dd a008 	ldr.w	sl, [sp, #8]
 801520e:	9c03      	ldr	r4, [sp, #12]
 8015210:	0e05      	lsrs	r5, r0, #24
 8015212:	463e      	mov	r6, r7
 8015214:	4633      	mov	r3, r6
 8015216:	f04f 0e00 	mov.w	lr, #0
 801521a:	f853 2b04 	ldr.w	r2, [r3], #4
 801521e:	ebb5 6f12 	cmp.w	r5, r2, lsr #24
 8015222:	d058      	beq.n	80152d6 <_DrawBitmap+0x19a>
 8015224:	f1be 0f00 	cmp.w	lr, #0
 8015228:	d159      	bne.n	80152de <_DrawBitmap+0x1a2>
 801522a:	6830      	ldr	r0, [r6, #0]
 801522c:	0e02      	lsrs	r2, r0, #24
 801522e:	d165      	bne.n	80152fc <_DrawBitmap+0x1c0>
 8015230:	3c01      	subs	r4, #1
 8015232:	f10a 0a04 	add.w	sl, sl, #4
 8015236:	3604      	adds	r6, #4
 8015238:	2c00      	cmp	r4, #0
 801523a:	d1eb      	bne.n	8015214 <_DrawBitmap+0xd8>
 801523c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801523e:	9a04      	ldr	r2, [sp, #16]
 8015240:	441f      	add	r7, r3
 8015242:	9b02      	ldr	r3, [sp, #8]
 8015244:	4413      	add	r3, r2
 8015246:	9302      	str	r3, [sp, #8]
 8015248:	9b06      	ldr	r3, [sp, #24]
 801524a:	f108 0801 	add.w	r8, r8, #1
 801524e:	4598      	cmp	r8, r3
 8015250:	d1c9      	bne.n	80151e6 <_DrawBitmap+0xaa>
 8015252:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015254:	2b00      	cmp	r3, #0
 8015256:	f43f af7b 	beq.w	8015150 <_DrawBitmap+0x14>
 801525a:	a810      	add	r0, sp, #64	; 0x40
 801525c:	f7fa fb96 	bl	800f98c <GUI_ALLOC_UnlockH>
 8015260:	b013      	add	sp, #76	; 0x4c
 8015262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015266:	2d10      	cmp	r5, #16
 8015268:	d05d      	beq.n	8015326 <_DrawBitmap+0x1ea>
 801526a:	2d08      	cmp	r5, #8
 801526c:	f000 80c6 	beq.w	80153fc <_DrawBitmap+0x2c0>
 8015270:	4b5f      	ldr	r3, [pc, #380]	; (80153f0 <_DrawBitmap+0x2b4>)
 8015272:	f1ba 0f00 	cmp.w	sl, #0
 8015276:	bf08      	it	eq
 8015278:	469a      	moveq	sl, r3
 801527a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801527c:	2b00      	cmp	r3, #0
 801527e:	f340 80ad 	ble.w	80153dc <_DrawBitmap+0x2a0>
 8015282:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015284:	9a02      	ldr	r2, [sp, #8]
 8015286:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8015288:	009b      	lsls	r3, r3, #2
 801528a:	930a      	str	r3, [sp, #40]	; 0x28
 801528c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801528e:	005b      	lsls	r3, r3, #1
 8015290:	930c      	str	r3, [sp, #48]	; 0x30
 8015292:	2300      	movs	r3, #0
 8015294:	2d02      	cmp	r5, #2
 8015296:	f000 8284 	beq.w	80157a2 <_DrawBitmap+0x666>
 801529a:	2d04      	cmp	r5, #4
 801529c:	f000 8134 	beq.w	8015508 <_DrawBitmap+0x3cc>
 80152a0:	2d01      	cmp	r5, #1
 80152a2:	f000 8361 	beq.w	8015968 <_DrawBitmap+0x82c>
 80152a6:	981e      	ldr	r0, [sp, #120]	; 0x78
 80152a8:	4401      	add	r1, r0
 80152aa:	9804      	ldr	r0, [sp, #16]
 80152ac:	4402      	add	r2, r0
 80152ae:	981c      	ldr	r0, [sp, #112]	; 0x70
 80152b0:	3301      	adds	r3, #1
 80152b2:	4298      	cmp	r0, r3
 80152b4:	dcee      	bgt.n	8015294 <_DrawBitmap+0x158>
 80152b6:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 80152ba:	46de      	mov	lr, fp
 80152bc:	f1be 0f00 	cmp.w	lr, #0
 80152c0:	d1cb      	bne.n	801525a <_DrawBitmap+0x11e>
 80152c2:	e745      	b.n	8015150 <_DrawBitmap+0x14>
 80152c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80152c6:	9300      	str	r3, [sp, #0]
 80152c8:	9a08      	ldr	r2, [sp, #32]
 80152ca:	9b03      	ldr	r3, [sp, #12]
 80152cc:	9905      	ldr	r1, [sp, #20]
 80152ce:	f000 fdc7 	bl	8015e60 <GUI_USAGE_AddRect>
 80152d2:	6823      	ldr	r3, [r4, #0]
 80152d4:	e75e      	b.n	8015194 <_DrawBitmap+0x58>
 80152d6:	f10e 0e01 	add.w	lr, lr, #1
 80152da:	45a6      	cmp	lr, r4
 80152dc:	d19d      	bne.n	801521a <_DrawBitmap+0xde>
 80152de:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 80152e2:	4631      	mov	r1, r6
 80152e4:	4650      	mov	r0, sl
 80152e6:	465a      	mov	r2, fp
 80152e8:	f8d9 3000 	ldr.w	r3, [r9]
 80152ec:	ebce 0404 	rsb	r4, lr, r4
 80152f0:	445e      	add	r6, fp
 80152f2:	4798      	blx	r3
 80152f4:	44da      	add	sl, fp
 80152f6:	2c00      	cmp	r4, #0
 80152f8:	d18c      	bne.n	8015214 <_DrawBitmap+0xd8>
 80152fa:	e79f      	b.n	801523c <_DrawBitmap+0x100>
 80152fc:	4b3d      	ldr	r3, [pc, #244]	; (80153f4 <_DrawBitmap+0x2b8>)
 80152fe:	f8da 1000 	ldr.w	r1, [sl]
 8015302:	681b      	ldr	r3, [r3, #0]
 8015304:	4798      	blx	r3
 8015306:	f8ca 0000 	str.w	r0, [sl]
 801530a:	e791      	b.n	8015230 <_DrawBitmap+0xf4>
 801530c:	f8d9 3000 	ldr.w	r3, [r9]
 8015310:	9a08      	ldr	r2, [sp, #32]
 8015312:	9802      	ldr	r0, [sp, #8]
 8015314:	4639      	mov	r1, r7
 8015316:	4798      	blx	r3
 8015318:	e790      	b.n	801523c <_DrawBitmap+0x100>
 801531a:	4610      	mov	r0, r2
 801531c:	f7fa fb24 	bl	800f968 <GUI_ALLOC_LockH>
 8015320:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015322:	4602      	mov	r2, r0
 8015324:	e724      	b.n	8015170 <_DrawBitmap+0x34>
 8015326:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015328:	2b00      	cmp	r3, #0
 801532a:	dd92      	ble.n	8015252 <_DrawBitmap+0x116>
 801532c:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015330:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8015332:	4453      	add	r3, sl
 8015334:	9306      	str	r3, [sp, #24]
 8015336:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015338:	f1a3 0b02 	sub.w	fp, r3, #2
 801533c:	b35e      	cbz	r6, 8015396 <_DrawBitmap+0x25a>
 801533e:	68b2      	ldr	r2, [r6, #8]
 8015340:	9d03      	ldr	r5, [sp, #12]
 8015342:	6854      	ldr	r4, [r2, #4]
 8015344:	9905      	ldr	r1, [sp, #20]
 8015346:	462b      	mov	r3, r5
 8015348:	4652      	mov	r2, sl
 801534a:	4630      	mov	r0, r6
 801534c:	47a0      	blx	r4
 801534e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8015352:	9c05      	ldr	r4, [sp, #20]
 8015354:	46d9      	mov	r9, fp
 8015356:	693b      	ldr	r3, [r7, #16]
 8015358:	f839 0f02 	ldrh.w	r0, [r9, #2]!
 801535c:	685b      	ldr	r3, [r3, #4]
 801535e:	4798      	blx	r3
 8015360:	68b3      	ldr	r3, [r6, #8]
 8015362:	f848 0b04 	str.w	r0, [r8], #4
 8015366:	4621      	mov	r1, r4
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	4652      	mov	r2, sl
 801536c:	4630      	mov	r0, r6
 801536e:	4798      	blx	r3
 8015370:	3d01      	subs	r5, #1
 8015372:	f104 0401 	add.w	r4, r4, #1
 8015376:	d1ee      	bne.n	8015356 <_DrawBitmap+0x21a>
 8015378:	9b02      	ldr	r3, [sp, #8]
 801537a:	9a04      	ldr	r2, [sp, #16]
 801537c:	4413      	add	r3, r2
 801537e:	9302      	str	r3, [sp, #8]
 8015380:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015382:	449b      	add	fp, r3
 8015384:	9b06      	ldr	r3, [sp, #24]
 8015386:	f10a 0a01 	add.w	sl, sl, #1
 801538a:	459a      	cmp	sl, r3
 801538c:	f43f af61 	beq.w	8015252 <_DrawBitmap+0x116>
 8015390:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8015392:	2e00      	cmp	r6, #0
 8015394:	d1d3      	bne.n	801533e <_DrawBitmap+0x202>
 8015396:	9d02      	ldr	r5, [sp, #8]
 8015398:	9c03      	ldr	r4, [sp, #12]
 801539a:	465e      	mov	r6, fp
 801539c:	693b      	ldr	r3, [r7, #16]
 801539e:	f836 0f02 	ldrh.w	r0, [r6, #2]!
 80153a2:	685b      	ldr	r3, [r3, #4]
 80153a4:	4798      	blx	r3
 80153a6:	3c01      	subs	r4, #1
 80153a8:	f845 0b04 	str.w	r0, [r5], #4
 80153ac:	d1f6      	bne.n	801539c <_DrawBitmap+0x260>
 80153ae:	e7e3      	b.n	8015378 <_DrawBitmap+0x23c>
 80153b0:	f8dd a084 	ldr.w	sl, [sp, #132]	; 0x84
 80153b4:	9b06      	ldr	r3, [sp, #24]
 80153b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80153b8:	3301      	adds	r3, #1
 80153ba:	461c      	mov	r4, r3
 80153bc:	9306      	str	r3, [sp, #24]
 80153be:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80153c0:	4413      	add	r3, r2
 80153c2:	931f      	str	r3, [sp, #124]	; 0x7c
 80153c4:	9a04      	ldr	r2, [sp, #16]
 80153c6:	9b02      	ldr	r3, [sp, #8]
 80153c8:	a80f      	add	r0, sp, #60	; 0x3c
 80153ca:	4413      	add	r3, r2
 80153cc:	9302      	str	r3, [sp, #8]
 80153ce:	f7fa fadd 	bl	800f98c <GUI_ALLOC_UnlockH>
 80153d2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80153d4:	461a      	mov	r2, r3
 80153d6:	42a2      	cmp	r2, r4
 80153d8:	f300 82cf 	bgt.w	801597a <_DrawBitmap+0x83e>
 80153dc:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80153e0:	f1be 0f00 	cmp.w	lr, #0
 80153e4:	f47f af39 	bne.w	801525a <_DrawBitmap+0x11e>
 80153e8:	e6b2      	b.n	8015150 <_DrawBitmap+0x14>
 80153ea:	bf00      	nop
 80153ec:	200000a8 	.word	0x200000a8
 80153f0:	08031450 	.word	0x08031450
 80153f4:	200000c0 	.word	0x200000c0
 80153f8:	200000c8 	.word	0x200000c8
 80153fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80153fe:	2b00      	cmp	r3, #0
 8015400:	f340 8380 	ble.w	8015b04 <_DrawBitmap+0x9c8>
 8015404:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8015408:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 801540c:	9a03      	ldr	r2, [sp, #12]
 801540e:	444b      	add	r3, r9
 8015410:	9306      	str	r3, [sp, #24]
 8015412:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015414:	4658      	mov	r0, fp
 8015416:	189c      	adds	r4, r3, r2
 8015418:	465d      	mov	r5, fp
 801541a:	4bb9      	ldr	r3, [pc, #740]	; (8015700 <_DrawBitmap+0x5c4>)
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	7c1b      	ldrb	r3, [r3, #16]
 8015420:	f1ba 0f00 	cmp.w	sl, #0
 8015424:	d041      	beq.n	80154aa <_DrawBitmap+0x36e>
 8015426:	f013 0303 	ands.w	r3, r3, #3
 801542a:	d033      	beq.n	8015494 <_DrawBitmap+0x358>
 801542c:	2b02      	cmp	r3, #2
 801542e:	d11e      	bne.n	801546e <_DrawBitmap+0x332>
 8015430:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015432:	2d00      	cmp	r5, #0
 8015434:	d05c      	beq.n	80154f0 <_DrawBitmap+0x3b4>
 8015436:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801543a:	9f03      	ldr	r7, [sp, #12]
 801543c:	9e05      	ldr	r6, [sp, #20]
 801543e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8015442:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 8015446:	4631      	mov	r1, r6
 8015448:	464a      	mov	r2, r9
 801544a:	3601      	adds	r6, #1
 801544c:	4628      	mov	r0, r5
 801544e:	b143      	cbz	r3, 8015462 <_DrawBitmap+0x326>
 8015450:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8015454:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 8015458:	f8c8 3000 	str.w	r3, [r8]
 801545c:	f8de 3000 	ldr.w	r3, [lr]
 8015460:	4798      	blx	r3
 8015462:	3f01      	subs	r7, #1
 8015464:	f108 0804 	add.w	r8, r8, #4
 8015468:	d1eb      	bne.n	8015442 <_DrawBitmap+0x306>
 801546a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801546c:	4628      	mov	r0, r5
 801546e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015470:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015472:	4413      	add	r3, r2
 8015474:	931f      	str	r3, [sp, #124]	; 0x7c
 8015476:	9a04      	ldr	r2, [sp, #16]
 8015478:	9b02      	ldr	r3, [sp, #8]
 801547a:	4413      	add	r3, r2
 801547c:	9302      	str	r3, [sp, #8]
 801547e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015480:	441c      	add	r4, r3
 8015482:	9b06      	ldr	r3, [sp, #24]
 8015484:	f109 0901 	add.w	r9, r9, #1
 8015488:	454b      	cmp	r3, r9
 801548a:	d1c6      	bne.n	801541a <_DrawBitmap+0x2de>
 801548c:	2800      	cmp	r0, #0
 801548e:	f47f aee4 	bne.w	801525a <_DrawBitmap+0x11e>
 8015492:	e65d      	b.n	8015150 <_DrawBitmap+0x14>
 8015494:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015496:	9a02      	ldr	r2, [sp, #8]
 8015498:	f813 1b01 	ldrb.w	r1, [r3], #1
 801549c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80154a0:	f842 1b04 	str.w	r1, [r2], #4
 80154a4:	429c      	cmp	r4, r3
 80154a6:	d1f7      	bne.n	8015498 <_DrawBitmap+0x35c>
 80154a8:	e7e1      	b.n	801546e <_DrawBitmap+0x332>
 80154aa:	f013 0303 	ands.w	r3, r3, #3
 80154ae:	f000 8252 	beq.w	8015956 <_DrawBitmap+0x81a>
 80154b2:	2b02      	cmp	r3, #2
 80154b4:	d1db      	bne.n	801546e <_DrawBitmap+0x332>
 80154b6:	2d00      	cmp	r5, #0
 80154b8:	f000 8319 	beq.w	8015aee <_DrawBitmap+0x9b2>
 80154bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80154be:	9f02      	ldr	r7, [sp, #8]
 80154c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80154c4:	9e05      	ldr	r6, [sp, #20]
 80154c6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80154ca:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 80154ce:	4631      	mov	r1, r6
 80154d0:	464a      	mov	r2, r9
 80154d2:	3601      	adds	r6, #1
 80154d4:	4628      	mov	r0, r5
 80154d6:	b12b      	cbz	r3, 80154e4 <_DrawBitmap+0x3a8>
 80154d8:	f8d5 e008 	ldr.w	lr, [r5, #8]
 80154dc:	603b      	str	r3, [r7, #0]
 80154de:	f8de 3000 	ldr.w	r3, [lr]
 80154e2:	4798      	blx	r3
 80154e4:	f1bb 0b01 	subs.w	fp, fp, #1
 80154e8:	f107 0704 	add.w	r7, r7, #4
 80154ec:	d1ed      	bne.n	80154ca <_DrawBitmap+0x38e>
 80154ee:	e7bc      	b.n	801546a <_DrawBitmap+0x32e>
 80154f0:	9a02      	ldr	r2, [sp, #8]
 80154f2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80154f6:	b111      	cbz	r1, 80154fe <_DrawBitmap+0x3c2>
 80154f8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80154fc:	6011      	str	r1, [r2, #0]
 80154fe:	42a3      	cmp	r3, r4
 8015500:	f102 0204 	add.w	r2, r2, #4
 8015504:	d1f5      	bne.n	80154f2 <_DrawBitmap+0x3b6>
 8015506:	e7b1      	b.n	801546c <_DrawBitmap+0x330>
 8015508:	911f      	str	r1, [sp, #124]	; 0x7c
 801550a:	9920      	ldr	r1, [sp, #128]	; 0x80
 801550c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8015510:	9306      	str	r3, [sp, #24]
 8015512:	f1c1 0302 	rsb	r3, r1, #2
 8015516:	b2d9      	uxtb	r1, r3
 8015518:	46d8      	mov	r8, fp
 801551a:	f8dd b07c 	ldr.w	fp, [sp, #124]	; 0x7c
 801551e:	910b      	str	r1, [sp, #44]	; 0x2c
 8015520:	4613      	mov	r3, r2
 8015522:	3304      	adds	r3, #4
 8015524:	9307      	str	r3, [sp, #28]
 8015526:	46c6      	mov	lr, r8
 8015528:	4645      	mov	r5, r8
 801552a:	4b75      	ldr	r3, [pc, #468]	; (8015700 <_DrawBitmap+0x5c4>)
 801552c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801552e:	681a      	ldr	r2, [r3, #0]
 8015530:	f89b 3000 	ldrb.w	r3, [fp]
 8015534:	7c12      	ldrb	r2, [r2, #16]
 8015536:	408b      	lsls	r3, r1
 8015538:	f002 0203 	and.w	r2, r2, #3
 801553c:	9907      	ldr	r1, [sp, #28]
 801553e:	2a01      	cmp	r2, #1
 8015540:	b2dc      	uxtb	r4, r3
 8015542:	f1a1 0904 	sub.w	r9, r1, #4
 8015546:	f000 80b9 	beq.w	80156bc <_DrawBitmap+0x580>
 801554a:	d373      	bcc.n	8015634 <_DrawBitmap+0x4f8>
 801554c:	2a02      	cmp	r2, #2
 801554e:	d161      	bne.n	8015614 <_DrawBitmap+0x4d8>
 8015550:	9908      	ldr	r1, [sp, #32]
 8015552:	9a06      	ldr	r2, [sp, #24]
 8015554:	440a      	add	r2, r1
 8015556:	9920      	ldr	r1, [sp, #128]	; 0x80
 8015558:	9209      	str	r2, [sp, #36]	; 0x24
 801555a:	2900      	cmp	r1, #0
 801555c:	f000 80f2 	beq.w	8015744 <_DrawBitmap+0x608>
 8015560:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8015564:	d00a      	beq.n	801557c <_DrawBitmap+0x440>
 8015566:	0924      	lsrs	r4, r4, #4
 8015568:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801556c:	f8c9 3000 	str.w	r3, [r9]
 8015570:	b125      	cbz	r5, 801557c <_DrawBitmap+0x440>
 8015572:	68ab      	ldr	r3, [r5, #8]
 8015574:	9905      	ldr	r1, [sp, #20]
 8015576:	681b      	ldr	r3, [r3, #0]
 8015578:	4628      	mov	r0, r5
 801557a:	4798      	blx	r3
 801557c:	9b05      	ldr	r3, [sp, #20]
 801557e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8015582:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8015586:	3301      	adds	r3, #1
 8015588:	9302      	str	r3, [sp, #8]
 801558a:	9b03      	ldr	r3, [sp, #12]
 801558c:	f10b 0701 	add.w	r7, fp, #1
 8015590:	1e5e      	subs	r6, r3, #1
 8015592:	2e01      	cmp	r6, #1
 8015594:	f340 80c5 	ble.w	8015722 <_DrawBitmap+0x5e6>
 8015598:	2d00      	cmp	r5, #0
 801559a:	f000 80db 	beq.w	8015754 <_DrawBitmap+0x618>
 801559e:	9b02      	ldr	r3, [sp, #8]
 80155a0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80155a4:	4632      	mov	r2, r6
 80155a6:	f109 0808 	add.w	r8, r9, #8
 80155aa:	960d      	str	r6, [sp, #52]	; 0x34
 80155ac:	4691      	mov	r9, r2
 80155ae:	461e      	mov	r6, r3
 80155b0:	e021      	b.n	80155f6 <_DrawBitmap+0x4ba>
 80155b2:	f8d5 e008 	ldr.w	lr, [r5, #8]
 80155b6:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80155ba:	f848 3c08 	str.w	r3, [r8, #-8]
 80155be:	f8de 3000 	ldr.w	r3, [lr]
 80155c2:	4798      	blx	r3
 80155c4:	f014 040f 	ands.w	r4, r4, #15
 80155c8:	d009      	beq.n	80155de <_DrawBitmap+0x4a2>
 80155ca:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 80155ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80155d0:	f848 3c04 	str.w	r3, [r8, #-4]
 80155d4:	68ab      	ldr	r3, [r5, #8]
 80155d6:	1c71      	adds	r1, r6, #1
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	4628      	mov	r0, r5
 80155dc:	4798      	blx	r3
 80155de:	f1a9 0902 	sub.w	r9, r9, #2
 80155e2:	f1b9 0f01 	cmp.w	r9, #1
 80155e6:	f106 0602 	add.w	r6, r6, #2
 80155ea:	f108 0808 	add.w	r8, r8, #8
 80155ee:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 80155f2:	f340 8087 	ble.w	8015704 <_DrawBitmap+0x5c8>
 80155f6:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 80155fa:	ea4f 1314 	mov.w	r3, r4, lsr #4
 80155fe:	4631      	mov	r1, r6
 8015600:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015602:	4628      	mov	r0, r5
 8015604:	d1d5      	bne.n	80155b2 <_DrawBitmap+0x476>
 8015606:	2c00      	cmp	r4, #0
 8015608:	d0e9      	beq.n	80155de <_DrawBitmap+0x4a2>
 801560a:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801560e:	f848 3c04 	str.w	r3, [r8, #-4]
 8015612:	e7df      	b.n	80155d4 <_DrawBitmap+0x498>
 8015614:	9b06      	ldr	r3, [sp, #24]
 8015616:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015618:	3301      	adds	r3, #1
 801561a:	461a      	mov	r2, r3
 801561c:	9306      	str	r3, [sp, #24]
 801561e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015620:	449b      	add	fp, r3
 8015622:	9b04      	ldr	r3, [sp, #16]
 8015624:	428a      	cmp	r2, r1
 8015626:	46a8      	mov	r8, r5
 8015628:	444b      	add	r3, r9
 801562a:	f6ff af7a 	blt.w	8015522 <_DrawBitmap+0x3e6>
 801562e:	46ab      	mov	fp, r5
 8015630:	46de      	mov	lr, fp
 8015632:	e643      	b.n	80152bc <_DrawBitmap+0x180>
 8015634:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015636:	2b00      	cmp	r3, #0
 8015638:	f000 8089 	beq.w	801574e <_DrawBitmap+0x612>
 801563c:	0924      	lsrs	r4, r4, #4
 801563e:	9b03      	ldr	r3, [sp, #12]
 8015640:	1e59      	subs	r1, r3, #1
 8015642:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8015646:	f8c9 3000 	str.w	r3, [r9]
 801564a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801564e:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8015652:	f10b 0201 	add.w	r2, fp, #1
 8015656:	2901      	cmp	r1, #1
 8015658:	dd18      	ble.n	801568c <_DrawBitmap+0x550>
 801565a:	104f      	asrs	r7, r1, #1
 801565c:	19d6      	adds	r6, r2, r7
 801565e:	f001 0101 	and.w	r1, r1, #1
 8015662:	f109 0308 	add.w	r3, r9, #8
 8015666:	0920      	lsrs	r0, r4, #4
 8015668:	f004 040f 	and.w	r4, r4, #15
 801566c:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
 8015670:	f843 0c08 	str.w	r0, [r3, #-8]
 8015674:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
 8015678:	f843 0c04 	str.w	r0, [r3, #-4]
 801567c:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8015680:	42b2      	cmp	r2, r6
 8015682:	f103 0308 	add.w	r3, r3, #8
 8015686:	d1ee      	bne.n	8015666 <_DrawBitmap+0x52a>
 8015688:	eb09 09c7 	add.w	r9, r9, r7, lsl #3
 801568c:	b121      	cbz	r1, 8015698 <_DrawBitmap+0x55c>
 801568e:	0924      	lsrs	r4, r4, #4
 8015690:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 8015694:	f8c9 3000 	str.w	r3, [r9]
 8015698:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801569a:	9904      	ldr	r1, [sp, #16]
 801569c:	9b06      	ldr	r3, [sp, #24]
 801569e:	4493      	add	fp, r2
 80156a0:	9a07      	ldr	r2, [sp, #28]
 80156a2:	440a      	add	r2, r1
 80156a4:	9207      	str	r2, [sp, #28]
 80156a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80156a8:	3301      	adds	r3, #1
 80156aa:	429a      	cmp	r2, r3
 80156ac:	9306      	str	r3, [sp, #24]
 80156ae:	f73f af3c 	bgt.w	801552a <_DrawBitmap+0x3ee>
 80156b2:	f1be 0f00 	cmp.w	lr, #0
 80156b6:	f47f add0 	bne.w	801525a <_DrawBitmap+0x11e>
 80156ba:	e549      	b.n	8015150 <_DrawBitmap+0x14>
 80156bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80156be:	9903      	ldr	r1, [sp, #12]
 80156c0:	4658      	mov	r0, fp
 80156c2:	428b      	cmp	r3, r1
 80156c4:	bfc8      	it	gt
 80156c6:	b2cb      	uxtbgt	r3, r1
 80156c8:	1e5a      	subs	r2, r3, #1
 80156ca:	b2d2      	uxtb	r2, r2
 80156cc:	3201      	adds	r2, #1
 80156ce:	1ac9      	subs	r1, r1, r3
 80156d0:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80156d4:	0123      	lsls	r3, r4, #4
 80156d6:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 80156da:	b2dc      	uxtb	r4, r3
 80156dc:	d005      	beq.n	80156ea <_DrawBitmap+0x5ae>
 80156de:	f8d9 3000 	ldr.w	r3, [r9]
 80156e2:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
 80156e6:	f8c9 3000 	str.w	r3, [r9]
 80156ea:	f109 0904 	add.w	r9, r9, #4
 80156ee:	4591      	cmp	r9, r2
 80156f0:	d1f0      	bne.n	80156d4 <_DrawBitmap+0x598>
 80156f2:	2900      	cmp	r1, #0
 80156f4:	d0d0      	beq.n	8015698 <_DrawBitmap+0x55c>
 80156f6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80156fa:	2302      	movs	r3, #2
 80156fc:	e7e1      	b.n	80156c2 <_DrawBitmap+0x586>
 80156fe:	bf00      	nop
 8015700:	200000a8 	.word	0x200000a8
 8015704:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8015706:	9902      	ldr	r1, [sp, #8]
 8015708:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801570c:	3e02      	subs	r6, #2
 801570e:	0873      	lsrs	r3, r6, #1
 8015710:	3102      	adds	r1, #2
 8015712:	1c5a      	adds	r2, r3, #1
 8015714:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8015718:	9102      	str	r1, [sp, #8]
 801571a:	eba6 0643 	sub.w	r6, r6, r3, lsl #1
 801571e:	eb09 09c2 	add.w	r9, r9, r2, lsl #3
 8015722:	b166      	cbz	r6, 801573e <_DrawBitmap+0x602>
 8015724:	0924      	lsrs	r4, r4, #4
 8015726:	d00a      	beq.n	801573e <_DrawBitmap+0x602>
 8015728:	f85a 3024 	ldr.w	r3, [sl, r4, lsl #2]
 801572c:	f8c9 3000 	str.w	r3, [r9]
 8015730:	b12d      	cbz	r5, 801573e <_DrawBitmap+0x602>
 8015732:	68ab      	ldr	r3, [r5, #8]
 8015734:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015736:	9902      	ldr	r1, [sp, #8]
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	4628      	mov	r0, r5
 801573c:	4798      	blx	r3
 801573e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8015740:	46ae      	mov	lr, r5
 8015742:	e7a9      	b.n	8015698 <_DrawBitmap+0x55c>
 8015744:	9b05      	ldr	r3, [sp, #20]
 8015746:	9e03      	ldr	r6, [sp, #12]
 8015748:	9302      	str	r3, [sp, #8]
 801574a:	465f      	mov	r7, fp
 801574c:	e721      	b.n	8015592 <_DrawBitmap+0x456>
 801574e:	9903      	ldr	r1, [sp, #12]
 8015750:	465a      	mov	r2, fp
 8015752:	e780      	b.n	8015656 <_DrawBitmap+0x51a>
 8015754:	3e02      	subs	r6, #2
 8015756:	0872      	lsrs	r2, r6, #1
 8015758:	1c51      	adds	r1, r2, #1
 801575a:	1878      	adds	r0, r7, r1
 801575c:	f109 0308 	add.w	r3, r9, #8
 8015760:	4694      	mov	ip, r2
 8015762:	f014 0ff0 	tst.w	r4, #240	; 0xf0
 8015766:	ea4f 1e14 	mov.w	lr, r4, lsr #4
 801576a:	d003      	beq.n	8015774 <_DrawBitmap+0x638>
 801576c:	f85a 202e 	ldr.w	r2, [sl, lr, lsl #2]
 8015770:	f843 2c08 	str.w	r2, [r3, #-8]
 8015774:	f014 040f 	ands.w	r4, r4, #15
 8015778:	d003      	beq.n	8015782 <_DrawBitmap+0x646>
 801577a:	f85a 4024 	ldr.w	r4, [sl, r4, lsl #2]
 801577e:	f843 4c04 	str.w	r4, [r3, #-4]
 8015782:	f817 4f01 	ldrb.w	r4, [r7, #1]!
 8015786:	42b8      	cmp	r0, r7
 8015788:	f103 0308 	add.w	r3, r3, #8
 801578c:	d1e9      	bne.n	8015762 <_DrawBitmap+0x626>
 801578e:	9b02      	ldr	r3, [sp, #8]
 8015790:	3302      	adds	r3, #2
 8015792:	eb03 034c 	add.w	r3, r3, ip, lsl #1
 8015796:	9302      	str	r3, [sp, #8]
 8015798:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
 801579c:	eba6 064c 	sub.w	r6, r6, ip, lsl #1
 80157a0:	e7bf      	b.n	8015722 <_DrawBitmap+0x5e6>
 80157a2:	9306      	str	r3, [sp, #24]
 80157a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80157a6:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 80157aa:	9202      	str	r2, [sp, #8]
 80157ac:	f1c3 0304 	rsb	r3, r3, #4
 80157b0:	b2db      	uxtb	r3, r3
 80157b2:	911f      	str	r1, [sp, #124]	; 0x7c
 80157b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80157b6:	46d0      	mov	r8, sl
 80157b8:	46de      	mov	lr, fp
 80157ba:	465f      	mov	r7, fp
 80157bc:	4bab      	ldr	r3, [pc, #684]	; (8015a6c <_DrawBitmap+0x930>)
 80157be:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	7814      	ldrb	r4, [r2, #0]
 80157c4:	7c1b      	ldrb	r3, [r3, #16]
 80157c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80157c8:	f003 0303 	and.w	r3, r3, #3
 80157cc:	4094      	lsls	r4, r2
 80157ce:	2b01      	cmp	r3, #1
 80157d0:	b2e4      	uxtb	r4, r4
 80157d2:	f000 808f 	beq.w	80158f4 <_DrawBitmap+0x7b8>
 80157d6:	d358      	bcc.n	801588a <_DrawBitmap+0x74e>
 80157d8:	2b02      	cmp	r3, #2
 80157da:	f040 80aa 	bne.w	8015932 <_DrawBitmap+0x7f6>
 80157de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80157e0:	9209      	str	r2, [sp, #36]	; 0x24
 80157e2:	9a05      	ldr	r2, [sp, #20]
 80157e4:	9207      	str	r2, [sp, #28]
 80157e6:	9906      	ldr	r1, [sp, #24]
 80157e8:	9a08      	ldr	r2, [sp, #32]
 80157ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80157ec:	9d02      	ldr	r5, [sp, #8]
 80157ee:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80157f2:	eb02 0b01 	add.w	fp, r2, r1
 80157f6:	4553      	cmp	r3, sl
 80157f8:	bfc8      	it	gt
 80157fa:	fa5f f38a 	uxtbgt.w	r3, sl
 80157fe:	ebc3 0a0a 	rsb	sl, r3, sl
 8015802:	3b01      	subs	r3, #1
 8015804:	b35f      	cbz	r7, 801585e <_DrawBitmap+0x722>
 8015806:	b2db      	uxtb	r3, r3
 8015808:	f103 0901 	add.w	r9, r3, #1
 801580c:	9e07      	ldr	r6, [sp, #28]
 801580e:	930a      	str	r3, [sp, #40]	; 0x28
 8015810:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 8015814:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8015818:	4631      	mov	r1, r6
 801581a:	ea4f 1394 	mov.w	r3, r4, lsr #6
 801581e:	f106 0601 	add.w	r6, r6, #1
 8015822:	465a      	mov	r2, fp
 8015824:	4638      	mov	r0, r7
 8015826:	d007      	beq.n	8015838 <_DrawBitmap+0x6fc>
 8015828:	f8d7 e008 	ldr.w	lr, [r7, #8]
 801582c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8015830:	602b      	str	r3, [r5, #0]
 8015832:	f8de 3000 	ldr.w	r3, [lr]
 8015836:	4798      	blx	r3
 8015838:	3504      	adds	r5, #4
 801583a:	00a4      	lsls	r4, r4, #2
 801583c:	454d      	cmp	r5, r9
 801583e:	b2e4      	uxtb	r4, r4
 8015840:	d1e8      	bne.n	8015814 <_DrawBitmap+0x6d8>
 8015842:	9b07      	ldr	r3, [sp, #28]
 8015844:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015846:	3301      	adds	r3, #1
 8015848:	441a      	add	r2, r3
 801584a:	9207      	str	r2, [sp, #28]
 801584c:	f1ba 0f00 	cmp.w	sl, #0
 8015850:	d03a      	beq.n	80158c8 <_DrawBitmap+0x78c>
 8015852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015854:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8015858:	9309      	str	r3, [sp, #36]	; 0x24
 801585a:	2304      	movs	r3, #4
 801585c:	e7cb      	b.n	80157f6 <_DrawBitmap+0x6ba>
 801585e:	b2da      	uxtb	r2, r3
 8015860:	1c50      	adds	r0, r2, #1
 8015862:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8015866:	09a1      	lsrs	r1, r4, #6
 8015868:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 801586c:	ea4f 0384 	mov.w	r3, r4, lsl #2
 8015870:	b2dc      	uxtb	r4, r3
 8015872:	bf1c      	itt	ne
 8015874:	f858 3021 	ldrne.w	r3, [r8, r1, lsl #2]
 8015878:	602b      	strne	r3, [r5, #0]
 801587a:	3504      	adds	r5, #4
 801587c:	42a8      	cmp	r0, r5
 801587e:	d1f2      	bne.n	8015866 <_DrawBitmap+0x72a>
 8015880:	9b07      	ldr	r3, [sp, #28]
 8015882:	3301      	adds	r3, #1
 8015884:	18d3      	adds	r3, r2, r3
 8015886:	9307      	str	r3, [sp, #28]
 8015888:	e7e0      	b.n	801584c <_DrawBitmap+0x710>
 801588a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801588c:	9e02      	ldr	r6, [sp, #8]
 801588e:	9d03      	ldr	r5, [sp, #12]
 8015890:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
 8015894:	42ab      	cmp	r3, r5
 8015896:	bfc8      	it	gt
 8015898:	b2eb      	uxtbgt	r3, r5
 801589a:	1e58      	subs	r0, r3, #1
 801589c:	b2c0      	uxtb	r0, r0
 801589e:	1aed      	subs	r5, r5, r3
 80158a0:	eb06 0180 	add.w	r1, r6, r0, lsl #2
 80158a4:	1f33      	subs	r3, r6, #4
 80158a6:	09a2      	lsrs	r2, r4, #6
 80158a8:	00a4      	lsls	r4, r4, #2
 80158aa:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 80158ae:	f843 2f04 	str.w	r2, [r3, #4]!
 80158b2:	428b      	cmp	r3, r1
 80158b4:	b2e4      	uxtb	r4, r4
 80158b6:	d1f6      	bne.n	80158a6 <_DrawBitmap+0x76a>
 80158b8:	3001      	adds	r0, #1
 80158ba:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 80158be:	b12d      	cbz	r5, 80158cc <_DrawBitmap+0x790>
 80158c0:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 80158c4:	2304      	movs	r3, #4
 80158c6:	e7e5      	b.n	8015894 <_DrawBitmap+0x758>
 80158c8:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80158ca:	46be      	mov	lr, r7
 80158cc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80158ce:	991e      	ldr	r1, [sp, #120]	; 0x78
 80158d0:	9b06      	ldr	r3, [sp, #24]
 80158d2:	440a      	add	r2, r1
 80158d4:	921f      	str	r2, [sp, #124]	; 0x7c
 80158d6:	9904      	ldr	r1, [sp, #16]
 80158d8:	9a02      	ldr	r2, [sp, #8]
 80158da:	440a      	add	r2, r1
 80158dc:	9202      	str	r2, [sp, #8]
 80158de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80158e0:	3301      	adds	r3, #1
 80158e2:	429a      	cmp	r2, r3
 80158e4:	9306      	str	r3, [sp, #24]
 80158e6:	f73f af69 	bgt.w	80157bc <_DrawBitmap+0x680>
 80158ea:	f1be 0f00 	cmp.w	lr, #0
 80158ee:	f47f acb4 	bne.w	801525a <_DrawBitmap+0x11e>
 80158f2:	e42d      	b.n	8015150 <_DrawBitmap+0x14>
 80158f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80158f6:	9b02      	ldr	r3, [sp, #8]
 80158f8:	9803      	ldr	r0, [sp, #12]
 80158fa:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80158fc:	4282      	cmp	r2, r0
 80158fe:	bfc8      	it	gt
 8015900:	b2c2      	uxtbgt	r2, r0
 8015902:	1e51      	subs	r1, r2, #1
 8015904:	b2c9      	uxtb	r1, r1
 8015906:	3101      	adds	r1, #1
 8015908:	1a80      	subs	r0, r0, r2
 801590a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801590e:	00a2      	lsls	r2, r4, #2
 8015910:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8015914:	b2d4      	uxtb	r4, r2
 8015916:	d003      	beq.n	8015920 <_DrawBitmap+0x7e4>
 8015918:	681a      	ldr	r2, [r3, #0]
 801591a:	f082 02ff 	eor.w	r2, r2, #255	; 0xff
 801591e:	601a      	str	r2, [r3, #0]
 8015920:	3304      	adds	r3, #4
 8015922:	428b      	cmp	r3, r1
 8015924:	d1f3      	bne.n	801590e <_DrawBitmap+0x7d2>
 8015926:	2800      	cmp	r0, #0
 8015928:	d0d0      	beq.n	80158cc <_DrawBitmap+0x790>
 801592a:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 801592e:	2204      	movs	r2, #4
 8015930:	e7e4      	b.n	80158fc <_DrawBitmap+0x7c0>
 8015932:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015934:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015936:	9b06      	ldr	r3, [sp, #24]
 8015938:	440a      	add	r2, r1
 801593a:	921f      	str	r2, [sp, #124]	; 0x7c
 801593c:	9904      	ldr	r1, [sp, #16]
 801593e:	9a02      	ldr	r2, [sp, #8]
 8015940:	440a      	add	r2, r1
 8015942:	9202      	str	r2, [sp, #8]
 8015944:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015946:	3301      	adds	r3, #1
 8015948:	429a      	cmp	r2, r3
 801594a:	46bb      	mov	fp, r7
 801594c:	9306      	str	r3, [sp, #24]
 801594e:	f73f af33 	bgt.w	80157b8 <_DrawBitmap+0x67c>
 8015952:	46de      	mov	lr, fp
 8015954:	e4b2      	b.n	80152bc <_DrawBitmap+0x180>
 8015956:	4b46      	ldr	r3, [pc, #280]	; (8015a70 <_DrawBitmap+0x934>)
 8015958:	9a03      	ldr	r2, [sp, #12]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801595e:	9802      	ldr	r0, [sp, #8]
 8015960:	4798      	blx	r3
 8015962:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8015964:	4628      	mov	r0, r5
 8015966:	e582      	b.n	801546e <_DrawBitmap+0x332>
 8015968:	9306      	str	r3, [sp, #24]
 801596a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801596c:	f8df b104 	ldr.w	fp, [pc, #260]	; 8015a74 <_DrawBitmap+0x938>
 8015970:	9202      	str	r2, [sp, #8]
 8015972:	f1c3 0308 	rsb	r3, r3, #8
 8015976:	911f      	str	r1, [sp, #124]	; 0x7c
 8015978:	930a      	str	r3, [sp, #40]	; 0x28
 801597a:	4b3c      	ldr	r3, [pc, #240]	; (8015a6c <_DrawBitmap+0x930>)
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8015980:	f7f9 fff2 	bl	800f968 <GUI_ALLOC_LockH>
 8015984:	4b39      	ldr	r3, [pc, #228]	; (8015a6c <_DrawBitmap+0x930>)
 8015986:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	7812      	ldrb	r2, [r2, #0]
 801598c:	7c1b      	ldrb	r3, [r3, #16]
 801598e:	f81b 4002 	ldrb.w	r4, [fp, r2]
 8015992:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015994:	900f      	str	r0, [sp, #60]	; 0x3c
 8015996:	f003 0303 	and.w	r3, r3, #3
 801599a:	2b02      	cmp	r3, #2
 801599c:	fa44 f402 	asr.w	r4, r4, r2
 80159a0:	d048      	beq.n	8015a34 <_DrawBitmap+0x8f8>
 80159a2:	2b03      	cmp	r3, #3
 80159a4:	d020      	beq.n	80159e8 <_DrawBitmap+0x8ac>
 80159a6:	2b01      	cmp	r3, #1
 80159a8:	d01e      	beq.n	80159e8 <_DrawBitmap+0x8ac>
 80159aa:	980a      	ldr	r0, [sp, #40]	; 0x28
 80159ac:	9e02      	ldr	r6, [sp, #8]
 80159ae:	9d03      	ldr	r5, [sp, #12]
 80159b0:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 80159b2:	42a8      	cmp	r0, r5
 80159b4:	bf28      	it	cs
 80159b6:	4628      	movcs	r0, r5
 80159b8:	1a2d      	subs	r5, r5, r0
 80159ba:	4602      	mov	r2, r0
 80159bc:	4631      	mov	r1, r6
 80159be:	f004 0301 	and.w	r3, r4, #1
 80159c2:	3a01      	subs	r2, #1
 80159c4:	f85a 3023 	ldr.w	r3, [sl, r3, lsl #2]
 80159c8:	f841 3b04 	str.w	r3, [r1], #4
 80159cc:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80159d0:	d1f5      	bne.n	80159be <_DrawBitmap+0x882>
 80159d2:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 80159d6:	2d00      	cmp	r5, #0
 80159d8:	f43f acec 	beq.w	80153b4 <_DrawBitmap+0x278>
 80159dc:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 80159e0:	2008      	movs	r0, #8
 80159e2:	f81b 4003 	ldrb.w	r4, [fp, r3]
 80159e6:	e7e4      	b.n	80159b2 <_DrawBitmap+0x876>
 80159e8:	6803      	ldr	r3, [r0, #0]
 80159ea:	691b      	ldr	r3, [r3, #16]
 80159ec:	689b      	ldr	r3, [r3, #8]
 80159ee:	4798      	blx	r3
 80159f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80159f2:	9f02      	ldr	r7, [sp, #8]
 80159f4:	9e03      	ldr	r6, [sp, #12]
 80159f6:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 80159fa:	42b5      	cmp	r5, r6
 80159fc:	bf28      	it	cs
 80159fe:	4635      	movcs	r5, r6
 8015a00:	1b76      	subs	r6, r6, r5
 8015a02:	462a      	mov	r2, r5
 8015a04:	463b      	mov	r3, r7
 8015a06:	f014 0f01 	tst.w	r4, #1
 8015a0a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8015a0e:	d002      	beq.n	8015a16 <_DrawBitmap+0x8da>
 8015a10:	6819      	ldr	r1, [r3, #0]
 8015a12:	4041      	eors	r1, r0
 8015a14:	6019      	str	r1, [r3, #0]
 8015a16:	3a01      	subs	r2, #1
 8015a18:	f103 0304 	add.w	r3, r3, #4
 8015a1c:	d1f3      	bne.n	8015a06 <_DrawBitmap+0x8ca>
 8015a1e:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8015a22:	2e00      	cmp	r6, #0
 8015a24:	f43f acc6 	beq.w	80153b4 <_DrawBitmap+0x278>
 8015a28:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
 8015a2c:	2508      	movs	r5, #8
 8015a2e:	f81b 4003 	ldrb.w	r4, [fp, r3]
 8015a32:	e7e2      	b.n	80159fa <_DrawBitmap+0x8be>
 8015a34:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015a36:	9209      	str	r2, [sp, #36]	; 0x24
 8015a38:	9908      	ldr	r1, [sp, #32]
 8015a3a:	9a06      	ldr	r2, [sp, #24]
 8015a3c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8015a40:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8015a44:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8015a46:	9e02      	ldr	r6, [sp, #8]
 8015a48:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8015a4c:	9f05      	ldr	r7, [sp, #20]
 8015a4e:	f8cd a084 	str.w	sl, [sp, #132]	; 0x84
 8015a52:	440a      	add	r2, r1
 8015a54:	9207      	str	r2, [sp, #28]
 8015a56:	469a      	mov	sl, r3
 8015a58:	454d      	cmp	r5, r9
 8015a5a:	bf28      	it	cs
 8015a5c:	464d      	movcs	r5, r9
 8015a5e:	ebc5 0909 	rsb	r9, r5, r9
 8015a62:	f1b8 0f00 	cmp.w	r8, #0
 8015a66:	d030      	beq.n	8015aca <_DrawBitmap+0x98e>
 8015a68:	b974      	cbnz	r4, 8015a88 <_DrawBitmap+0x94c>
 8015a6a:	e02a      	b.n	8015ac2 <_DrawBitmap+0x986>
 8015a6c:	200000a8 	.word	0x200000a8
 8015a70:	200000c8 	.word	0x200000c8
 8015a74:	080314f4 	.word	0x080314f4
 8015a78:	3d01      	subs	r5, #1
 8015a7a:	f107 0701 	add.w	r7, r7, #1
 8015a7e:	f106 0604 	add.w	r6, r6, #4
 8015a82:	d012      	beq.n	8015aaa <_DrawBitmap+0x96e>
 8015a84:	0864      	lsrs	r4, r4, #1
 8015a86:	d01c      	beq.n	8015ac2 <_DrawBitmap+0x986>
 8015a88:	07e1      	lsls	r1, r4, #31
 8015a8a:	d5f5      	bpl.n	8015a78 <_DrawBitmap+0x93c>
 8015a8c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015a90:	9a07      	ldr	r2, [sp, #28]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	4639      	mov	r1, r7
 8015a96:	4640      	mov	r0, r8
 8015a98:	4798      	blx	r3
 8015a9a:	3d01      	subs	r5, #1
 8015a9c:	f8c6 a000 	str.w	sl, [r6]
 8015aa0:	f107 0701 	add.w	r7, r7, #1
 8015aa4:	f106 0604 	add.w	r6, r6, #4
 8015aa8:	d1ec      	bne.n	8015a84 <_DrawBitmap+0x948>
 8015aaa:	f1b9 0f00 	cmp.w	r9, #0
 8015aae:	f43f ac7f 	beq.w	80153b0 <_DrawBitmap+0x274>
 8015ab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ab4:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8015ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8015aba:	2508      	movs	r5, #8
 8015abc:	f81b 4003 	ldrb.w	r4, [fp, r3]
 8015ac0:	e7ca      	b.n	8015a58 <_DrawBitmap+0x91c>
 8015ac2:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8015ac6:	442f      	add	r7, r5
 8015ac8:	e7ef      	b.n	8015aaa <_DrawBitmap+0x96e>
 8015aca:	4653      	mov	r3, sl
 8015acc:	b914      	cbnz	r4, 8015ad4 <_DrawBitmap+0x998>
 8015ace:	e00b      	b.n	8015ae8 <_DrawBitmap+0x9ac>
 8015ad0:	0864      	lsrs	r4, r4, #1
 8015ad2:	d008      	beq.n	8015ae6 <_DrawBitmap+0x9aa>
 8015ad4:	07e2      	lsls	r2, r4, #31
 8015ad6:	bf48      	it	mi
 8015ad8:	6033      	strmi	r3, [r6, #0]
 8015ada:	3d01      	subs	r5, #1
 8015adc:	f106 0604 	add.w	r6, r6, #4
 8015ae0:	d1f6      	bne.n	8015ad0 <_DrawBitmap+0x994>
 8015ae2:	469a      	mov	sl, r3
 8015ae4:	e7e1      	b.n	8015aaa <_DrawBitmap+0x96e>
 8015ae6:	469a      	mov	sl, r3
 8015ae8:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8015aec:	e7dd      	b.n	8015aaa <_DrawBitmap+0x96e>
 8015aee:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8015af0:	9b02      	ldr	r3, [sp, #8]
 8015af2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8015af6:	b101      	cbz	r1, 8015afa <_DrawBitmap+0x9be>
 8015af8:	6019      	str	r1, [r3, #0]
 8015afa:	42a2      	cmp	r2, r4
 8015afc:	f103 0304 	add.w	r3, r3, #4
 8015b00:	d1f7      	bne.n	8015af2 <_DrawBitmap+0x9b6>
 8015b02:	e4b3      	b.n	801546c <_DrawBitmap+0x330>
 8015b04:	9810      	ldr	r0, [sp, #64]	; 0x40
 8015b06:	2800      	cmp	r0, #0
 8015b08:	f47f aba7 	bne.w	801525a <_DrawBitmap+0x11e>
 8015b0c:	f7ff bb20 	b.w	8015150 <_DrawBitmap+0x14>

08015b10 <_GetPixelIndex>:
 8015b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b12:	4b0e      	ldr	r3, [pc, #56]	; (8015b4c <_GetPixelIndex+0x3c>)
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	b083      	sub	sp, #12
 8015b18:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8015b1a:	460e      	mov	r6, r1
 8015b1c:	4617      	mov	r7, r2
 8015b1e:	f7f9 ff23 	bl	800f968 <GUI_ALLOC_LockH>
 8015b22:	4605      	mov	r5, r0
 8015b24:	a802      	add	r0, sp, #8
 8015b26:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8015b2a:	68eb      	ldr	r3, [r5, #12]
 8015b2c:	f9b5 4004 	ldrsh.w	r4, [r5, #4]
 8015b30:	f840 5d04 	str.w	r5, [r0, #-4]!
 8015b34:	1abf      	subs	r7, r7, r2
 8015b36:	fb03 f307 	mul.w	r3, r3, r7
 8015b3a:	3318      	adds	r3, #24
 8015b3c:	1b34      	subs	r4, r6, r4
 8015b3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015b42:	f7f9 ff23 	bl	800f98c <GUI_ALLOC_UnlockH>
 8015b46:	5928      	ldr	r0, [r5, r4]
 8015b48:	b003      	add	sp, #12
 8015b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b4c:	200000a8 	.word	0x200000a8

08015b50 <_SetPixelIndex>:
 8015b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b54:	4c1b      	ldr	r4, [pc, #108]	; (8015bc4 <_SetPixelIndex+0x74>)
 8015b56:	6820      	ldr	r0, [r4, #0]
 8015b58:	b083      	sub	sp, #12
 8015b5a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8015b5c:	460f      	mov	r7, r1
 8015b5e:	4690      	mov	r8, r2
 8015b60:	4699      	mov	r9, r3
 8015b62:	f7f9 ff01 	bl	800f968 <GUI_ALLOC_LockH>
 8015b66:	6823      	ldr	r3, [r4, #0]
 8015b68:	9000      	str	r0, [sp, #0]
 8015b6a:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8015b6c:	f7f9 fefc 	bl	800f968 <GUI_ALLOC_LockH>
 8015b70:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015b74:	68c1      	ldr	r1, [r0, #12]
 8015b76:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8015b7a:	ae02      	add	r6, sp, #8
 8015b7c:	ebc2 0208 	rsb	r2, r2, r8
 8015b80:	fb01 f202 	mul.w	r2, r1, r2
 8015b84:	f846 0d04 	str.w	r0, [r6, #-4]!
 8015b88:	3218      	adds	r2, #24
 8015b8a:	1b3c      	subs	r4, r7, r4
 8015b8c:	4605      	mov	r5, r0
 8015b8e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8015b92:	4630      	mov	r0, r6
 8015b94:	f7f9 fefa 	bl	800f98c <GUI_ALLOC_UnlockH>
 8015b98:	f845 9004 	str.w	r9, [r5, r4]
 8015b9c:	9b00      	ldr	r3, [sp, #0]
 8015b9e:	6958      	ldr	r0, [r3, #20]
 8015ba0:	b150      	cbz	r0, 8015bb8 <_SetPixelIndex+0x68>
 8015ba2:	f7f9 fee1 	bl	800f968 <GUI_ALLOC_LockH>
 8015ba6:	9001      	str	r0, [sp, #4]
 8015ba8:	6883      	ldr	r3, [r0, #8]
 8015baa:	4642      	mov	r2, r8
 8015bac:	4639      	mov	r1, r7
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	4798      	blx	r3
 8015bb2:	4630      	mov	r0, r6
 8015bb4:	f7f9 feea 	bl	800f98c <GUI_ALLOC_UnlockH>
 8015bb8:	4668      	mov	r0, sp
 8015bba:	f7f9 fee7 	bl	800f98c <GUI_ALLOC_UnlockH>
 8015bbe:	b003      	add	sp, #12
 8015bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bc4:	200000a8 	.word	0x200000a8

08015bc8 <_XorPixel>:
 8015bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015bcc:	4c1e      	ldr	r4, [pc, #120]	; (8015c48 <_XorPixel+0x80>)
 8015bce:	6823      	ldr	r3, [r4, #0]
 8015bd0:	b082      	sub	sp, #8
 8015bd2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8015bd4:	460f      	mov	r7, r1
 8015bd6:	4690      	mov	r8, r2
 8015bd8:	f7f9 fec6 	bl	800f968 <GUI_ALLOC_LockH>
 8015bdc:	6823      	ldr	r3, [r4, #0]
 8015bde:	9000      	str	r0, [sp, #0]
 8015be0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8015be2:	f7f9 fec1 	bl	800f968 <GUI_ALLOC_LockH>
 8015be6:	ae02      	add	r6, sp, #8
 8015be8:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8015bec:	68c2      	ldr	r2, [r0, #12]
 8015bee:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8015bf2:	f846 0d04 	str.w	r0, [r6, #-4]!
 8015bf6:	ebc3 0308 	rsb	r3, r3, r8
 8015bfa:	fb02 f303 	mul.w	r3, r2, r3
 8015bfe:	4605      	mov	r5, r0
 8015c00:	3318      	adds	r3, #24
 8015c02:	1b3c      	subs	r4, r7, r4
 8015c04:	4630      	mov	r0, r6
 8015c06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015c0a:	f7f9 febf 	bl	800f98c <GUI_ALLOC_UnlockH>
 8015c0e:	9b00      	ldr	r3, [sp, #0]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	691b      	ldr	r3, [r3, #16]
 8015c14:	689b      	ldr	r3, [r3, #8]
 8015c16:	4798      	blx	r3
 8015c18:	592b      	ldr	r3, [r5, r4]
 8015c1a:	9a00      	ldr	r2, [sp, #0]
 8015c1c:	4058      	eors	r0, r3
 8015c1e:	5128      	str	r0, [r5, r4]
 8015c20:	6950      	ldr	r0, [r2, #20]
 8015c22:	b150      	cbz	r0, 8015c3a <_XorPixel+0x72>
 8015c24:	f7f9 fea0 	bl	800f968 <GUI_ALLOC_LockH>
 8015c28:	9001      	str	r0, [sp, #4]
 8015c2a:	6883      	ldr	r3, [r0, #8]
 8015c2c:	4642      	mov	r2, r8
 8015c2e:	4639      	mov	r1, r7
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	4798      	blx	r3
 8015c34:	4630      	mov	r0, r6
 8015c36:	f7f9 fea9 	bl	800f98c <GUI_ALLOC_UnlockH>
 8015c3a:	4668      	mov	r0, sp
 8015c3c:	f7f9 fea6 	bl	800f98c <GUI_ALLOC_UnlockH>
 8015c40:	b002      	add	sp, #8
 8015c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c46:	bf00      	nop
 8015c48:	200000a8 	.word	0x200000a8

08015c4c <_FillRect>:
 8015c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c50:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8015d38 <_FillRect+0xec>
 8015c54:	f8d8 0000 	ldr.w	r0, [r8]
 8015c58:	b087      	sub	sp, #28
 8015c5a:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8015c5c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8015c60:	468a      	mov	sl, r1
 8015c62:	4616      	mov	r6, r2
 8015c64:	461f      	mov	r7, r3
 8015c66:	f7f9 fe7f 	bl	800f968 <GUI_ALLOC_LockH>
 8015c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8015c6e:	9004      	str	r0, [sp, #16]
 8015c70:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8015c72:	f7f9 fe79 	bl	800f968 <GUI_ALLOC_LockH>
 8015c76:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015c7a:	68c3      	ldr	r3, [r0, #12]
 8015c7c:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 8015c80:	f8cd a00c 	str.w	sl, [sp, #12]
 8015c84:	f10d 0b18 	add.w	fp, sp, #24
 8015c88:	1ab2      	subs	r2, r6, r2
 8015c8a:	fb03 f202 	mul.w	r2, r3, r2
 8015c8e:	f84b 0d04 	str.w	r0, [fp, #-4]!
 8015c92:	4653      	mov	r3, sl
 8015c94:	1b5d      	subs	r5, r3, r5
 8015c96:	f102 0118 	add.w	r1, r2, #24
 8015c9a:	4604      	mov	r4, r0
 8015c9c:	eb01 0285 	add.w	r2, r1, r5, lsl #2
 8015ca0:	4658      	mov	r0, fp
 8015ca2:	18a5      	adds	r5, r4, r2
 8015ca4:	f7f9 fe72 	bl	800f98c <GUI_ALLOC_UnlockH>
 8015ca8:	9b04      	ldr	r3, [sp, #16]
 8015caa:	f8d8 2000 	ldr.w	r2, [r8]
 8015cae:	6958      	ldr	r0, [r3, #20]
 8015cb0:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 8015cb4:	9b03      	ldr	r3, [sp, #12]
 8015cb6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8015cb8:	1aff      	subs	r7, r7, r3
 8015cba:	6814      	ldr	r4, [r2, #0]
 8015cbc:	3701      	adds	r7, #1
 8015cbe:	bb58      	cbnz	r0, 8015d18 <_FillRect+0xcc>
 8015cc0:	454e      	cmp	r6, r9
 8015cc2:	dc10      	bgt.n	8015ce6 <_FillRect+0x9a>
 8015cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8015cc8:	7c1b      	ldrb	r3, [r3, #16]
 8015cca:	07db      	lsls	r3, r3, #31
 8015ccc:	d411      	bmi.n	8015cf2 <_FillRect+0xa6>
 8015cce:	2f00      	cmp	r7, #0
 8015cd0:	dd05      	ble.n	8015cde <_FillRect+0x92>
 8015cd2:	463b      	mov	r3, r7
 8015cd4:	462a      	mov	r2, r5
 8015cd6:	3b01      	subs	r3, #1
 8015cd8:	f842 4b04 	str.w	r4, [r2], #4
 8015cdc:	d1fb      	bne.n	8015cd6 <_FillRect+0x8a>
 8015cde:	3601      	adds	r6, #1
 8015ce0:	45b1      	cmp	r9, r6
 8015ce2:	4455      	add	r5, sl
 8015ce4:	daee      	bge.n	8015cc4 <_FillRect+0x78>
 8015ce6:	a804      	add	r0, sp, #16
 8015ce8:	f7f9 fe50 	bl	800f98c <GUI_ALLOC_UnlockH>
 8015cec:	b007      	add	sp, #28
 8015cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cf2:	9b04      	ldr	r3, [sp, #16]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	691b      	ldr	r3, [r3, #16]
 8015cf8:	689b      	ldr	r3, [r3, #8]
 8015cfa:	4798      	blx	r3
 8015cfc:	4629      	mov	r1, r5
 8015cfe:	463a      	mov	r2, r7
 8015d00:	680b      	ldr	r3, [r1, #0]
 8015d02:	3a01      	subs	r2, #1
 8015d04:	ea83 0300 	eor.w	r3, r3, r0
 8015d08:	f841 3b04 	str.w	r3, [r1], #4
 8015d0c:	d1f8      	bne.n	8015d00 <_FillRect+0xb4>
 8015d0e:	3601      	adds	r6, #1
 8015d10:	45b1      	cmp	r9, r6
 8015d12:	4455      	add	r5, sl
 8015d14:	dad6      	bge.n	8015cc4 <_FillRect+0x78>
 8015d16:	e7e6      	b.n	8015ce6 <_FillRect+0x9a>
 8015d18:	f7f9 fe26 	bl	800f968 <GUI_ALLOC_LockH>
 8015d1c:	ebc6 0309 	rsb	r3, r6, r9
 8015d20:	3301      	adds	r3, #1
 8015d22:	9300      	str	r3, [sp, #0]
 8015d24:	9903      	ldr	r1, [sp, #12]
 8015d26:	9005      	str	r0, [sp, #20]
 8015d28:	463b      	mov	r3, r7
 8015d2a:	4632      	mov	r2, r6
 8015d2c:	f000 f898 	bl	8015e60 <GUI_USAGE_AddRect>
 8015d30:	4658      	mov	r0, fp
 8015d32:	f7f9 fe2b 	bl	800f98c <GUI_ALLOC_UnlockH>
 8015d36:	e7c3      	b.n	8015cc0 <_FillRect+0x74>
 8015d38:	200000a8 	.word	0x200000a8

08015d3c <_DrawHLine>:
 8015d3c:	b500      	push	{lr}
 8015d3e:	b083      	sub	sp, #12
 8015d40:	9200      	str	r2, [sp, #0]
 8015d42:	f7ff ff83 	bl	8015c4c <_FillRect>
 8015d46:	b003      	add	sp, #12
 8015d48:	f85d fb04 	ldr.w	pc, [sp], #4

08015d4c <_DrawVLine>:
 8015d4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d50:	4f35      	ldr	r7, [pc, #212]	; (8015e28 <_DrawVLine+0xdc>)
 8015d52:	6838      	ldr	r0, [r7, #0]
 8015d54:	b085      	sub	sp, #20
 8015d56:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8015d58:	4689      	mov	r9, r1
 8015d5a:	4615      	mov	r5, r2
 8015d5c:	461e      	mov	r6, r3
 8015d5e:	f7f9 fe03 	bl	800f968 <GUI_ALLOC_LockH>
 8015d62:	9001      	str	r0, [sp, #4]
 8015d64:	6940      	ldr	r0, [r0, #20]
 8015d66:	2800      	cmp	r0, #0
 8015d68:	d13b      	bne.n	8015de2 <_DrawVLine+0x96>
 8015d6a:	683b      	ldr	r3, [r7, #0]
 8015d6c:	9002      	str	r0, [sp, #8]
 8015d6e:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8015d70:	f7f9 fdfa 	bl	800f968 <GUI_ALLOC_LockH>
 8015d74:	4602      	mov	r2, r0
 8015d76:	a804      	add	r0, sp, #16
 8015d78:	f9b2 4006 	ldrsh.w	r4, [r2, #6]
 8015d7c:	68d3      	ldr	r3, [r2, #12]
 8015d7e:	f840 2d04 	str.w	r2, [r0, #-4]!
 8015d82:	1b2c      	subs	r4, r5, r4
 8015d84:	fb03 f304 	mul.w	r3, r3, r4
 8015d88:	f9b2 4004 	ldrsh.w	r4, [r2, #4]
 8015d8c:	3318      	adds	r3, #24
 8015d8e:	ebc4 0409 	rsb	r4, r4, r9
 8015d92:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8015d96:	18d4      	adds	r4, r2, r3
 8015d98:	f7f9 fdf8 	bl	800f98c <GUI_ALLOC_UnlockH>
 8015d9c:	683b      	ldr	r3, [r7, #0]
 8015d9e:	9901      	ldr	r1, [sp, #4]
 8015da0:	7c1a      	ldrb	r2, [r3, #16]
 8015da2:	07d2      	lsls	r2, r2, #31
 8015da4:	d420      	bmi.n	8015de8 <_DrawVLine+0x9c>
 8015da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015da8:	9802      	ldr	r0, [sp, #8]
 8015daa:	f8d3 8000 	ldr.w	r8, [r3]
 8015dae:	68cf      	ldr	r7, [r1, #12]
 8015db0:	b908      	cbnz	r0, 8015db6 <_DrawVLine+0x6a>
 8015db2:	e030      	b.n	8015e16 <_DrawVLine+0xca>
 8015db4:	9802      	ldr	r0, [sp, #8]
 8015db6:	6883      	ldr	r3, [r0, #8]
 8015db8:	462a      	mov	r2, r5
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	4649      	mov	r1, r9
 8015dbe:	3501      	adds	r5, #1
 8015dc0:	4798      	blx	r3
 8015dc2:	42ae      	cmp	r6, r5
 8015dc4:	f8c4 8000 	str.w	r8, [r4]
 8015dc8:	443c      	add	r4, r7
 8015dca:	daf3      	bge.n	8015db4 <_DrawVLine+0x68>
 8015dcc:	a801      	add	r0, sp, #4
 8015dce:	f7f9 fddd 	bl	800f98c <GUI_ALLOC_UnlockH>
 8015dd2:	9b02      	ldr	r3, [sp, #8]
 8015dd4:	b113      	cbz	r3, 8015ddc <_DrawVLine+0x90>
 8015dd6:	a802      	add	r0, sp, #8
 8015dd8:	f7f9 fdd8 	bl	800f98c <GUI_ALLOC_UnlockH>
 8015ddc:	b005      	add	sp, #20
 8015dde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015de2:	f7f9 fdc1 	bl	800f968 <GUI_ALLOC_LockH>
 8015de6:	e7c0      	b.n	8015d6a <_DrawVLine+0x1e>
 8015de8:	680b      	ldr	r3, [r1, #0]
 8015dea:	691b      	ldr	r3, [r3, #16]
 8015dec:	689b      	ldr	r3, [r3, #8]
 8015dee:	4798      	blx	r3
 8015df0:	4607      	mov	r7, r0
 8015df2:	9b02      	ldr	r3, [sp, #8]
 8015df4:	462a      	mov	r2, r5
 8015df6:	4649      	mov	r1, r9
 8015df8:	3501      	adds	r5, #1
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	b113      	cbz	r3, 8015e04 <_DrawVLine+0xb8>
 8015dfe:	689b      	ldr	r3, [r3, #8]
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	4798      	blx	r3
 8015e04:	9a01      	ldr	r2, [sp, #4]
 8015e06:	6823      	ldr	r3, [r4, #0]
 8015e08:	68d2      	ldr	r2, [r2, #12]
 8015e0a:	407b      	eors	r3, r7
 8015e0c:	42b5      	cmp	r5, r6
 8015e0e:	6023      	str	r3, [r4, #0]
 8015e10:	4414      	add	r4, r2
 8015e12:	ddee      	ble.n	8015df2 <_DrawVLine+0xa6>
 8015e14:	e7da      	b.n	8015dcc <_DrawVLine+0x80>
 8015e16:	1b73      	subs	r3, r6, r5
 8015e18:	3301      	adds	r3, #1
 8015e1a:	3b01      	subs	r3, #1
 8015e1c:	f8c4 8000 	str.w	r8, [r4]
 8015e20:	443c      	add	r4, r7
 8015e22:	d1fa      	bne.n	8015e1a <_DrawVLine+0xce>
 8015e24:	e7d2      	b.n	8015dcc <_DrawVLine+0x80>
 8015e26:	bf00      	nop
 8015e28:	200000a8 	.word	0x200000a8

08015e2c <GUI_USAGE_DecUseCnt>:
 8015e2c:	b530      	push	{r4, r5, lr}
 8015e2e:	4605      	mov	r5, r0
 8015e30:	b083      	sub	sp, #12
 8015e32:	f7fb fc23 	bl	801167c <GUI_Lock>
 8015e36:	4628      	mov	r0, r5
 8015e38:	f7f9 fd96 	bl	800f968 <GUI_ALLOC_LockH>
 8015e3c:	ab02      	add	r3, sp, #8
 8015e3e:	8984      	ldrh	r4, [r0, #12]
 8015e40:	f843 0d04 	str.w	r0, [r3, #-4]!
 8015e44:	3c01      	subs	r4, #1
 8015e46:	b224      	sxth	r4, r4
 8015e48:	8184      	strh	r4, [r0, #12]
 8015e4a:	4618      	mov	r0, r3
 8015e4c:	f7f9 fd9e 	bl	800f98c <GUI_ALLOC_UnlockH>
 8015e50:	b914      	cbnz	r4, 8015e58 <GUI_USAGE_DecUseCnt+0x2c>
 8015e52:	4628      	mov	r0, r5
 8015e54:	f7f9 ff2a 	bl	800fcac <GUI_ALLOC_Free>
 8015e58:	f7fb fc06 	bl	8011668 <GUI_Unlock>
 8015e5c:	b003      	add	sp, #12
 8015e5e:	bd30      	pop	{r4, r5, pc}

08015e60 <GUI_USAGE_AddRect>:
 8015e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015e64:	9c08      	ldr	r4, [sp, #32]
 8015e66:	4605      	mov	r5, r0
 8015e68:	4689      	mov	r9, r1
 8015e6a:	4698      	mov	r8, r3
 8015e6c:	68ab      	ldr	r3, [r5, #8]
 8015e6e:	4649      	mov	r1, r9
 8015e70:	685f      	ldr	r7, [r3, #4]
 8015e72:	4628      	mov	r0, r5
 8015e74:	4643      	mov	r3, r8
 8015e76:	1c56      	adds	r6, r2, #1
 8015e78:	47b8      	blx	r7
 8015e7a:	3c01      	subs	r4, #1
 8015e7c:	4632      	mov	r2, r6
 8015e7e:	d1f5      	bne.n	8015e6c <GUI_USAGE_AddRect+0xc>
 8015e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015e84 <_WriteToActiveAlpha>:
 8015e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e88:	b091      	sub	sp, #68	; 0x44
 8015e8a:	4688      	mov	r8, r1
 8015e8c:	4614      	mov	r4, r2
 8015e8e:	4699      	mov	r9, r3
 8015e90:	9008      	str	r0, [sp, #32]
 8015e92:	f7f9 fd69 	bl	800f968 <GUI_ALLOC_LockH>
 8015e96:	4603      	mov	r3, r0
 8015e98:	a810      	add	r0, sp, #64	; 0x40
 8015e9a:	681a      	ldr	r2, [r3, #0]
 8015e9c:	4d58      	ldr	r5, [pc, #352]	; (8016000 <_WriteToActiveAlpha+0x17c>)
 8015e9e:	6912      	ldr	r2, [r2, #16]
 8015ea0:	f840 3d08 	str.w	r3, [r0, #-8]!
 8015ea4:	6852      	ldr	r2, [r2, #4]
 8015ea6:	9207      	str	r2, [sp, #28]
 8015ea8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8015eac:	9206      	str	r2, [sp, #24]
 8015eae:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
 8015eb2:	f7f9 fd6b 	bl	800f98c <GUI_ALLOC_UnlockH>
 8015eb6:	682a      	ldr	r2, [r5, #0]
 8015eb8:	4b52      	ldr	r3, [pc, #328]	; (8016004 <_WriteToActiveAlpha+0x180>)
 8015eba:	7c52      	ldrb	r2, [r2, #17]
 8015ebc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8015ec0:	68c3      	ldr	r3, [r0, #12]
 8015ec2:	2108      	movs	r1, #8
 8015ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ec6:	4798      	blx	r3
 8015ec8:	2817      	cmp	r0, #23
 8015eca:	d810      	bhi.n	8015eee <_WriteToActiveAlpha+0x6a>
 8015ecc:	2803      	cmp	r0, #3
 8015ece:	4606      	mov	r6, r0
 8015ed0:	bf08      	it	eq
 8015ed2:	2608      	moveq	r6, #8
 8015ed4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8015eda:	2000      	movs	r0, #0
 8015edc:	f8d9 3000 	ldr.w	r3, [r9]
 8015ee0:	930c      	str	r3, [sp, #48]	; 0x30
 8015ee2:	f7fc f867 	bl	8011fb4 <GUI__AllocAlphaBuffer>
 8015ee6:	b120      	cbz	r0, 8015ef2 <_WriteToActiveAlpha+0x6e>
 8015ee8:	b011      	add	sp, #68	; 0x44
 8015eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015eee:	2620      	movs	r6, #32
 8015ef0:	e7f0      	b.n	8015ed4 <_WriteToActiveAlpha+0x50>
 8015ef2:	9906      	ldr	r1, [sp, #24]
 8015ef4:	682a      	ldr	r2, [r5, #0]
 8015ef6:	460b      	mov	r3, r1
 8015ef8:	4443      	add	r3, r8
 8015efa:	f9b2 500c 	ldrsh.w	r5, [r2, #12]
 8015efe:	3b01      	subs	r3, #1
 8015f00:	1b5d      	subs	r5, r3, r5
 8015f02:	2d00      	cmp	r5, #0
 8015f04:	bfc4      	itt	gt
 8015f06:	460b      	movgt	r3, r1
 8015f08:	1b5d      	subgt	r5, r3, r5
 8015f0a:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 8015f0e:	bfd8      	it	le
 8015f10:	460d      	movle	r5, r1
 8015f12:	4543      	cmp	r3, r8
 8015f14:	bfc3      	ittte	gt
 8015f16:	ebc8 0103 	rsbgt	r1, r8, r3
 8015f1a:	1a6d      	subgt	r5, r5, r1
 8015f1c:	4698      	movgt	r8, r3
 8015f1e:	2100      	movle	r1, #0
 8015f20:	2d00      	cmp	r5, #0
 8015f22:	dde1      	ble.n	8015ee8 <_WriteToActiveAlpha+0x64>
 8015f24:	eb0a 0304 	add.w	r3, sl, r4
 8015f28:	f9b2 000e 	ldrsh.w	r0, [r2, #14]
 8015f2c:	3b01      	subs	r3, #1
 8015f2e:	1a1b      	subs	r3, r3, r0
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	bfc8      	it	gt
 8015f34:	ebc3 0a0a 	rsbgt	sl, r3, sl
 8015f38:	f9b2 300a 	ldrsh.w	r3, [r2, #10]
 8015f3c:	42a3      	cmp	r3, r4
 8015f3e:	bfc3      	ittte	gt
 8015f40:	1b1f      	subgt	r7, r3, r4
 8015f42:	ebc7 0a0a 	rsbgt	sl, r7, sl
 8015f46:	461c      	movgt	r4, r3
 8015f48:	2700      	movle	r7, #0
 8015f4a:	f1ba 0f00 	cmp.w	sl, #0
 8015f4e:	ddcb      	ble.n	8015ee8 <_WriteToActiveAlpha+0x64>
 8015f50:	9b06      	ldr	r3, [sp, #24]
 8015f52:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8015f56:	fb07 1703 	mla	r7, r7, r3, r1
 8015f5a:	eb04 030a 	add.w	r3, r4, sl
 8015f5e:	00bf      	lsls	r7, r7, #2
 8015f60:	930a      	str	r3, [sp, #40]	; 0x28
 8015f62:	46b2      	mov	sl, r6
 8015f64:	e019      	b.n	8015f9a <_WriteToActiveAlpha+0x116>
 8015f66:	2304      	movs	r3, #4
 8015f68:	9a06      	ldr	r2, [sp, #24]
 8015f6a:	4631      	mov	r1, r6
 8015f6c:	4630      	mov	r0, r6
 8015f6e:	47d8      	blx	fp
 8015f70:	2301      	movs	r3, #1
 8015f72:	2200      	movs	r2, #0
 8015f74:	9205      	str	r2, [sp, #20]
 8015f76:	9604      	str	r6, [sp, #16]
 8015f78:	9203      	str	r2, [sp, #12]
 8015f7a:	9301      	str	r3, [sp, #4]
 8015f7c:	9300      	str	r3, [sp, #0]
 8015f7e:	4621      	mov	r1, r4
 8015f80:	f8cd a008 	str.w	sl, [sp, #8]
 8015f84:	462a      	mov	r2, r5
 8015f86:	4640      	mov	r0, r8
 8015f88:	441c      	add	r4, r3
 8015f8a:	9e06      	ldr	r6, [sp, #24]
 8015f8c:	f7fc fe38 	bl	8012c00 <LCD_DrawBitmap>
 8015f90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f92:	42a3      	cmp	r3, r4
 8015f94:	eb07 0786 	add.w	r7, r7, r6, lsl #2
 8015f98:	d0a6      	beq.n	8015ee8 <_WriteToActiveAlpha+0x64>
 8015f9a:	9808      	ldr	r0, [sp, #32]
 8015f9c:	f007 f9dc 	bl	801d358 <GUI_MEMDEV_GetDataPtr>
 8015fa0:	ab0f      	add	r3, sp, #60	; 0x3c
 8015fa2:	9301      	str	r3, [sp, #4]
 8015fa4:	9b07      	ldr	r3, [sp, #28]
 8015fa6:	9300      	str	r3, [sp, #0]
 8015fa8:	19c2      	adds	r2, r0, r7
 8015faa:	462b      	mov	r3, r5
 8015fac:	4621      	mov	r1, r4
 8015fae:	4640      	mov	r0, r8
 8015fb0:	f7fb fe5c 	bl	8011c6c <GUI__DoAlphaBlending>
 8015fb4:	4606      	mov	r6, r0
 8015fb6:	2800      	cmp	r0, #0
 8015fb8:	d096      	beq.n	8015ee8 <_WriteToActiveAlpha+0x64>
 8015fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fbc:	461a      	mov	r2, r3
 8015fbe:	4b12      	ldr	r3, [pc, #72]	; (8016008 <_WriteToActiveAlpha+0x184>)
 8015fc0:	429a      	cmp	r2, r3
 8015fc2:	d0d5      	beq.n	8015f70 <_WriteToActiveAlpha+0xec>
 8015fc4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8015fc8:	4652      	mov	r2, sl
 8015fca:	464b      	mov	r3, r9
 8015fcc:	4629      	mov	r1, r5
 8015fce:	f006 fc35 	bl	801c83c <GUI__CompactPixelIndicesEx>
 8015fd2:	2800      	cmp	r0, #0
 8015fd4:	d1cc      	bne.n	8015f70 <_WriteToActiveAlpha+0xec>
 8015fd6:	f8d9 b010 	ldr.w	fp, [r9, #16]
 8015fda:	f1bb 0f00 	cmp.w	fp, #0
 8015fde:	d1c2      	bne.n	8015f66 <_WriteToActiveAlpha+0xe2>
 8015fe0:	46a1      	mov	r9, r4
 8015fe2:	f8dd b018 	ldr.w	fp, [sp, #24]
 8015fe6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8015fe8:	950d      	str	r5, [sp, #52]	; 0x34
 8015fea:	4635      	mov	r5, r6
 8015fec:	6828      	ldr	r0, [r5, #0]
 8015fee:	47a0      	blx	r4
 8015ff0:	f1bb 0b01 	subs.w	fp, fp, #1
 8015ff4:	f845 0b04 	str.w	r0, [r5], #4
 8015ff8:	d1f8      	bne.n	8015fec <_WriteToActiveAlpha+0x168>
 8015ffa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8015ffc:	464c      	mov	r4, r9
 8015ffe:	e7b7      	b.n	8015f70 <_WriteToActiveAlpha+0xec>
 8016000:	200000a8 	.word	0x200000a8
 8016004:	20030870 	.word	0x20030870
 8016008:	0800ed8d 	.word	0x0800ed8d

0801600c <GUI_MEMDEV__WriteToActiveAlpha>:
 801600c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016010:	4c59      	ldr	r4, [pc, #356]	; (8016178 <GUI_MEMDEV__WriteToActiveAlpha+0x16c>)
 8016012:	4b5a      	ldr	r3, [pc, #360]	; (801617c <GUI_MEMDEV__WriteToActiveAlpha+0x170>)
 8016014:	f8d4 c000 	ldr.w	ip, [r4]
 8016018:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8016184 <GUI_MEMDEV__WriteToActiveAlpha+0x178>
 801601c:	f89c 5011 	ldrb.w	r5, [ip, #17]
 8016020:	f8d9 6000 	ldr.w	r6, [r9]
 8016024:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
 8016028:	b08b      	sub	sp, #44	; 0x2c
 801602a:	6923      	ldr	r3, [r4, #16]
 801602c:	2e00      	cmp	r6, #0
 801602e:	f000 8088 	beq.w	8016142 <GUI_MEMDEV__WriteToActiveAlpha+0x136>
 8016032:	4617      	mov	r7, r2
 8016034:	f8dc 2060 	ldr.w	r2, [ip, #96]	; 0x60
 8016038:	4680      	mov	r8, r0
 801603a:	460d      	mov	r5, r1
 801603c:	2a00      	cmp	r2, #0
 801603e:	f000 8085 	beq.w	801614c <GUI_MEMDEV__WriteToActiveAlpha+0x140>
 8016042:	68e2      	ldr	r2, [r4, #12]
 8016044:	6812      	ldr	r2, [r2, #0]
 8016046:	2a07      	cmp	r2, #7
 8016048:	d078      	beq.n	801613c <GUI_MEMDEV__WriteToActiveAlpha+0x130>
 801604a:	4a4d      	ldr	r2, [pc, #308]	; (8016180 <GUI_MEMDEV__WriteToActiveAlpha+0x174>)
 801604c:	1a9a      	subs	r2, r3, r2
 801604e:	fab2 f282 	clz	r2, r2
 8016052:	0952      	lsrs	r2, r2, #5
 8016054:	2a00      	cmp	r2, #0
 8016056:	d071      	beq.n	801613c <GUI_MEMDEV__WriteToActiveAlpha+0x130>
 8016058:	4640      	mov	r0, r8
 801605a:	f7f9 fc85 	bl	800f968 <GUI_ALLOC_LockH>
 801605e:	4603      	mov	r3, r0
 8016060:	a80a      	add	r0, sp, #40	; 0x28
 8016062:	f9b3 b008 	ldrsh.w	fp, [r3, #8]
 8016066:	f840 3d08 	str.w	r3, [r0, #-8]!
 801606a:	f9b3 a00a 	ldrsh.w	sl, [r3, #10]
 801606e:	68db      	ldr	r3, [r3, #12]
 8016070:	9305      	str	r3, [sp, #20]
 8016072:	f7f9 fc8b 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016076:	4b40      	ldr	r3, [pc, #256]	; (8016178 <GUI_MEMDEV__WriteToActiveAlpha+0x16c>)
 8016078:	6818      	ldr	r0, [r3, #0]
 801607a:	eb0b 0405 	add.w	r4, fp, r5
 801607e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8016082:	3c01      	subs	r4, #1
 8016084:	1ae4      	subs	r4, r4, r3
 8016086:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801608a:	2c00      	cmp	r4, #0
 801608c:	bfcc      	ite	gt
 801608e:	ebc4 040b 	rsbgt	r4, r4, fp
 8016092:	465c      	movle	r4, fp
 8016094:	429d      	cmp	r5, r3
 8016096:	bfbd      	ittte	lt
 8016098:	1b59      	sublt	r1, r3, r5
 801609a:	1a64      	sublt	r4, r4, r1
 801609c:	461d      	movlt	r5, r3
 801609e:	2100      	movge	r1, #0
 80160a0:	2c00      	cmp	r4, #0
 80160a2:	dd50      	ble.n	8016146 <GUI_MEMDEV__WriteToActiveAlpha+0x13a>
 80160a4:	eb0a 0307 	add.w	r3, sl, r7
 80160a8:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80160ac:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80160b0:	9107      	str	r1, [sp, #28]
 80160b2:	3b01      	subs	r3, #1
 80160b4:	ebce 0303 	rsb	r3, lr, r3
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	bfc8      	it	gt
 80160bc:	ebc3 0a0a 	rsbgt	sl, r3, sl
 80160c0:	42b8      	cmp	r0, r7
 80160c2:	bfc5      	ittet	gt
 80160c4:	1bc3      	subgt	r3, r0, r7
 80160c6:	ebc3 0a0a 	rsbgt	sl, r3, sl
 80160ca:	2300      	movle	r3, #0
 80160cc:	4607      	movgt	r7, r0
 80160ce:	f1ba 0f00 	cmp.w	sl, #0
 80160d2:	9306      	str	r3, [sp, #24]
 80160d4:	dd37      	ble.n	8016146 <GUI_MEMDEV__WriteToActiveAlpha+0x13a>
 80160d6:	4640      	mov	r0, r8
 80160d8:	f007 f93e 	bl	801d358 <GUI_MEMDEV_GetDataPtr>
 80160dc:	4b26      	ldr	r3, [pc, #152]	; (8016178 <GUI_MEMDEV__WriteToActiveAlpha+0x16c>)
 80160de:	9907      	ldr	r1, [sp, #28]
 80160e0:	681a      	ldr	r2, [r3, #0]
 80160e2:	9b06      	ldr	r3, [sp, #24]
 80160e4:	f8d2 c060 	ldr.w	ip, [r2, #96]	; 0x60
 80160e8:	fb03 110b 	mla	r1, r3, fp, r1
 80160ec:	eb00 0681 	add.w	r6, r0, r1, lsl #2
 80160f0:	f1bc 0f00 	cmp.w	ip, #0
 80160f4:	d030      	beq.n	8016158 <GUI_MEMDEV__WriteToActiveAlpha+0x14c>
 80160f6:	4660      	mov	r0, ip
 80160f8:	f7f9 fc36 	bl	800f968 <GUI_ALLOC_LockH>
 80160fc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016100:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8016104:	aa0a      	add	r2, sp, #40	; 0x28
 8016106:	1aed      	subs	r5, r5, r3
 8016108:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801610c:	f842 0d04 	str.w	r0, [r2, #-4]!
 8016110:	00ad      	lsls	r5, r5, #2
 8016112:	3518      	adds	r5, #24
 8016114:	1aff      	subs	r7, r7, r3
 8016116:	fb08 5707 	mla	r7, r8, r7, r5
 801611a:	4407      	add	r7, r0
 801611c:	4610      	mov	r0, r2
 801611e:	f7f9 fc35 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016122:	b187      	cbz	r7, 8016146 <GUI_MEMDEV__WriteToActiveAlpha+0x13a>
 8016124:	9b05      	ldr	r3, [sp, #20]
 8016126:	9301      	str	r3, [sp, #4]
 8016128:	f8cd 8000 	str.w	r8, [sp]
 801612c:	f8d9 5000 	ldr.w	r5, [r9]
 8016130:	4653      	mov	r3, sl
 8016132:	4622      	mov	r2, r4
 8016134:	4631      	mov	r1, r6
 8016136:	4638      	mov	r0, r7
 8016138:	47a8      	blx	r5
 801613a:	e004      	b.n	8016146 <GUI_MEMDEV__WriteToActiveAlpha+0x13a>
 801613c:	463a      	mov	r2, r7
 801613e:	4629      	mov	r1, r5
 8016140:	4640      	mov	r0, r8
 8016142:	f7ff fe9f 	bl	8015e84 <_WriteToActiveAlpha>
 8016146:	b00b      	add	sp, #44	; 0x2c
 8016148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801614c:	68e2      	ldr	r2, [r4, #12]
 801614e:	6812      	ldr	r2, [r2, #0]
 8016150:	fab2 f282 	clz	r2, r2
 8016154:	0952      	lsrs	r2, r2, #5
 8016156:	e77d      	b.n	8016054 <GUI_MEMDEV__WriteToActiveAlpha+0x48>
 8016158:	7c50      	ldrb	r0, [r2, #17]
 801615a:	f8df e02c 	ldr.w	lr, [pc, #44]	; 8016188 <GUI_MEMDEV__WriteToActiveAlpha+0x17c>
 801615e:	f8cd a004 	str.w	sl, [sp, #4]
 8016162:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8016166:	9202      	str	r2, [sp, #8]
 8016168:	9400      	str	r4, [sp, #0]
 801616a:	4633      	mov	r3, r6
 801616c:	463a      	mov	r2, r7
 801616e:	4629      	mov	r1, r5
 8016170:	f8de 4000 	ldr.w	r4, [lr]
 8016174:	47a0      	blx	r4
 8016176:	e7e6      	b.n	8016146 <GUI_MEMDEV__WriteToActiveAlpha+0x13a>
 8016178:	200000a8 	.word	0x200000a8
 801617c:	20030870 	.word	0x20030870
 8016180:	08026304 	.word	0x08026304
 8016184:	20030884 	.word	0x20030884
 8016188:	20030880 	.word	0x20030880

0801618c <_OnExit>:
 801618c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016190:	4d1a      	ldr	r5, [pc, #104]	; (80161fc <_OnExit+0x70>)
 8016192:	4b1b      	ldr	r3, [pc, #108]	; (8016200 <_OnExit+0x74>)
 8016194:	f8df e094 	ldr.w	lr, [pc, #148]	; 801622c <_OnExit+0xa0>
 8016198:	f8df c094 	ldr.w	ip, [pc, #148]	; 8016230 <_OnExit+0xa4>
 801619c:	4919      	ldr	r1, [pc, #100]	; (8016204 <_OnExit+0x78>)
 801619e:	4a1a      	ldr	r2, [pc, #104]	; (8016208 <_OnExit+0x7c>)
 80161a0:	4f1a      	ldr	r7, [pc, #104]	; (801620c <_OnExit+0x80>)
 80161a2:	4e1b      	ldr	r6, [pc, #108]	; (8016210 <_OnExit+0x84>)
 80161a4:	2400      	movs	r4, #0
 80161a6:	602c      	str	r4, [r5, #0]
 80161a8:	4d1a      	ldr	r5, [pc, #104]	; (8016214 <_OnExit+0x88>)
 80161aa:	f8cc 4000 	str.w	r4, [ip]
 80161ae:	f8ce 4000 	str.w	r4, [lr]
 80161b2:	6034      	str	r4, [r6, #0]
 80161b4:	600c      	str	r4, [r1, #0]
 80161b6:	604c      	str	r4, [r1, #4]
 80161b8:	6014      	str	r4, [r2, #0]
 80161ba:	6054      	str	r4, [r2, #4]
 80161bc:	4621      	mov	r1, r4
 80161be:	f103 000c 	add.w	r0, r3, #12
 80161c2:	603c      	str	r4, [r7, #0]
 80161c4:	682e      	ldr	r6, [r5, #0]
 80161c6:	701c      	strb	r4, [r3, #0]
 80161c8:	2218      	movs	r2, #24
 80161ca:	605c      	str	r4, [r3, #4]
 80161cc:	609c      	str	r4, [r3, #8]
 80161ce:	47b0      	blx	r6
 80161d0:	4b11      	ldr	r3, [pc, #68]	; (8016218 <_OnExit+0x8c>)
 80161d2:	4a12      	ldr	r2, [pc, #72]	; (801621c <_OnExit+0x90>)
 80161d4:	601c      	str	r4, [r3, #0]
 80161d6:	6014      	str	r4, [r2, #0]
 80161d8:	605c      	str	r4, [r3, #4]
 80161da:	4621      	mov	r1, r4
 80161dc:	682b      	ldr	r3, [r5, #0]
 80161de:	4810      	ldr	r0, [pc, #64]	; (8016220 <_OnExit+0x94>)
 80161e0:	2210      	movs	r2, #16
 80161e2:	4798      	blx	r3
 80161e4:	682b      	ldr	r3, [r5, #0]
 80161e6:	480f      	ldr	r0, [pc, #60]	; (8016224 <_OnExit+0x98>)
 80161e8:	4621      	mov	r1, r4
 80161ea:	2210      	movs	r2, #16
 80161ec:	4798      	blx	r3
 80161ee:	682b      	ldr	r3, [r5, #0]
 80161f0:	480d      	ldr	r0, [pc, #52]	; (8016228 <_OnExit+0x9c>)
 80161f2:	4621      	mov	r1, r4
 80161f4:	2210      	movs	r2, #16
 80161f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80161fa:	4718      	bx	r3
 80161fc:	20030890 	.word	0x20030890
 8016200:	2002e39c 	.word	0x2002e39c
 8016204:	200308a4 	.word	0x200308a4
 8016208:	200308d8 	.word	0x200308d8
 801620c:	200308c4 	.word	0x200308c4
 8016210:	200308d4 	.word	0x200308d4
 8016214:	200000cc 	.word	0x200000cc
 8016218:	20030894 	.word	0x20030894
 801621c:	200308a0 	.word	0x200308a0
 8016220:	20030908 	.word	0x20030908
 8016224:	200308f8 	.word	0x200308f8
 8016228:	200308e8 	.word	0x200308e8
 801622c:	200308e4 	.word	0x200308e4
 8016230:	200308d0 	.word	0x200308d0

08016234 <_Findy1>:
 8016234:	2800      	cmp	r0, #0
 8016236:	d064      	beq.n	8016302 <_Findy1+0xce>
 8016238:	b5f0      	push	{r4, r5, r6, r7, lr}
 801623a:	460e      	mov	r6, r1
 801623c:	b085      	sub	sp, #20
 801623e:	4617      	mov	r7, r2
 8016240:	4604      	mov	r4, r0
 8016242:	4620      	mov	r0, r4
 8016244:	f7f9 fb90 	bl	800f968 <GUI_ALLOC_LockH>
 8016248:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801624a:	9001      	str	r0, [sp, #4]
 801624c:	07a2      	lsls	r2, r4, #30
 801624e:	d524      	bpl.n	801629a <_Findy1+0x66>
 8016250:	2f00      	cmp	r7, #0
 8016252:	d040      	beq.n	80162d6 <_Findy1+0xa2>
 8016254:	ad02      	add	r5, sp, #8
 8016256:	4601      	mov	r1, r0
 8016258:	463a      	mov	r2, r7
 801625a:	4628      	mov	r0, r5
 801625c:	f7fc f80e 	bl	801227c <GUI__IntersectRects>
 8016260:	4629      	mov	r1, r5
 8016262:	4630      	mov	r0, r6
 8016264:	f7fa f80a 	bl	801027c <GUI_RectsIntersect>
 8016268:	b368      	cbz	r0, 80162c6 <_Findy1+0x92>
 801626a:	07e3      	lsls	r3, r4, #31
 801626c:	9801      	ldr	r0, [sp, #4]
 801626e:	d41c      	bmi.n	80162aa <_Findy1+0x76>
 8016270:	2f00      	cmp	r7, #0
 8016272:	d043      	beq.n	80162fc <_Findy1+0xc8>
 8016274:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016278:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801627c:	4293      	cmp	r3, r2
 801627e:	bfb8      	it	lt
 8016280:	4613      	movlt	r3, r2
 8016282:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 8016286:	4293      	cmp	r3, r2
 8016288:	dd2a      	ble.n	80162e0 <_Findy1+0xac>
 801628a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801628e:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 8016292:	429a      	cmp	r2, r3
 8016294:	db01      	blt.n	801629a <_Findy1+0x66>
 8016296:	3b01      	subs	r3, #1
 8016298:	80f3      	strh	r3, [r6, #6]
 801629a:	6a04      	ldr	r4, [r0, #32]
 801629c:	a801      	add	r0, sp, #4
 801629e:	f7f9 fb75 	bl	800f98c <GUI_ALLOC_UnlockH>
 80162a2:	2c00      	cmp	r4, #0
 80162a4:	d1cd      	bne.n	8016242 <_Findy1+0xe>
 80162a6:	b005      	add	sp, #20
 80162a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162aa:	69c4      	ldr	r4, [r0, #28]
 80162ac:	2c00      	cmp	r4, #0
 80162ae:	d0f4      	beq.n	801629a <_Findy1+0x66>
 80162b0:	4620      	mov	r0, r4
 80162b2:	462a      	mov	r2, r5
 80162b4:	4631      	mov	r1, r6
 80162b6:	f7ff ffbd 	bl	8016234 <_Findy1>
 80162ba:	4620      	mov	r0, r4
 80162bc:	f7f9 fb4a 	bl	800f954 <GUI_ALLOC_h2p>
 80162c0:	6a04      	ldr	r4, [r0, #32]
 80162c2:	2c00      	cmp	r4, #0
 80162c4:	d1f4      	bne.n	80162b0 <_Findy1+0x7c>
 80162c6:	9801      	ldr	r0, [sp, #4]
 80162c8:	6a04      	ldr	r4, [r0, #32]
 80162ca:	a801      	add	r0, sp, #4
 80162cc:	f7f9 fb5e 	bl	800f98c <GUI_ALLOC_UnlockH>
 80162d0:	2c00      	cmp	r4, #0
 80162d2:	d1b6      	bne.n	8016242 <_Findy1+0xe>
 80162d4:	e7e7      	b.n	80162a6 <_Findy1+0x72>
 80162d6:	c803      	ldmia	r0, {r0, r1}
 80162d8:	ad02      	add	r5, sp, #8
 80162da:	e885 0003 	stmia.w	r5, {r0, r1}
 80162de:	e7bf      	b.n	8016260 <_Findy1+0x2c>
 80162e0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80162e4:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 80162e8:	429a      	cmp	r2, r3
 80162ea:	ddd6      	ble.n	801629a <_Findy1+0x66>
 80162ec:	6a04      	ldr	r4, [r0, #32]
 80162ee:	80f3      	strh	r3, [r6, #6]
 80162f0:	a801      	add	r0, sp, #4
 80162f2:	f7f9 fb4b 	bl	800f98c <GUI_ALLOC_UnlockH>
 80162f6:	2c00      	cmp	r4, #0
 80162f8:	d1a3      	bne.n	8016242 <_Findy1+0xe>
 80162fa:	e7d4      	b.n	80162a6 <_Findy1+0x72>
 80162fc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016300:	e7bf      	b.n	8016282 <_Findy1+0x4e>
 8016302:	4770      	bx	lr

08016304 <_Findx0>:
 8016304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016308:	4604      	mov	r4, r0
 801630a:	b084      	sub	sp, #16
 801630c:	2800      	cmp	r0, #0
 801630e:	d04a      	beq.n	80163a6 <_Findx0+0xa2>
 8016310:	460f      	mov	r7, r1
 8016312:	4690      	mov	r8, r2
 8016314:	2600      	movs	r6, #0
 8016316:	e00c      	b.n	8016332 <_Findx0+0x2e>
 8016318:	07e3      	lsls	r3, r4, #31
 801631a:	d430      	bmi.n	801637e <_Findx0+0x7a>
 801631c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8016320:	9801      	ldr	r0, [sp, #4]
 8016322:	3301      	adds	r3, #1
 8016324:	803b      	strh	r3, [r7, #0]
 8016326:	2601      	movs	r6, #1
 8016328:	6a04      	ldr	r4, [r0, #32]
 801632a:	a801      	add	r0, sp, #4
 801632c:	f7f9 fb2e 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016330:	b1e4      	cbz	r4, 801636c <_Findx0+0x68>
 8016332:	4620      	mov	r0, r4
 8016334:	f7f9 fb18 	bl	800f968 <GUI_ALLOC_LockH>
 8016338:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801633a:	9001      	str	r0, [sp, #4]
 801633c:	07a2      	lsls	r2, r4, #30
 801633e:	d5f3      	bpl.n	8016328 <_Findx0+0x24>
 8016340:	f1b8 0f00 	cmp.w	r8, #0
 8016344:	d016      	beq.n	8016374 <_Findx0+0x70>
 8016346:	ad02      	add	r5, sp, #8
 8016348:	4601      	mov	r1, r0
 801634a:	4642      	mov	r2, r8
 801634c:	4628      	mov	r0, r5
 801634e:	f7fb ff95 	bl	801227c <GUI__IntersectRects>
 8016352:	4629      	mov	r1, r5
 8016354:	4638      	mov	r0, r7
 8016356:	f7f9 ff91 	bl	801027c <GUI_RectsIntersect>
 801635a:	2800      	cmp	r0, #0
 801635c:	d1dc      	bne.n	8016318 <_Findx0+0x14>
 801635e:	9801      	ldr	r0, [sp, #4]
 8016360:	6a04      	ldr	r4, [r0, #32]
 8016362:	a801      	add	r0, sp, #4
 8016364:	f7f9 fb12 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016368:	2c00      	cmp	r4, #0
 801636a:	d1e2      	bne.n	8016332 <_Findx0+0x2e>
 801636c:	4630      	mov	r0, r6
 801636e:	b004      	add	sp, #16
 8016370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016374:	c803      	ldmia	r0, {r0, r1}
 8016376:	ad02      	add	r5, sp, #8
 8016378:	e885 0003 	stmia.w	r5, {r0, r1}
 801637c:	e7e9      	b.n	8016352 <_Findx0+0x4e>
 801637e:	9801      	ldr	r0, [sp, #4]
 8016380:	69c4      	ldr	r4, [r0, #28]
 8016382:	2c00      	cmp	r4, #0
 8016384:	d0d0      	beq.n	8016328 <_Findx0+0x24>
 8016386:	462a      	mov	r2, r5
 8016388:	4639      	mov	r1, r7
 801638a:	4620      	mov	r0, r4
 801638c:	f7ff ffba 	bl	8016304 <_Findx0>
 8016390:	2800      	cmp	r0, #0
 8016392:	4620      	mov	r0, r4
 8016394:	bf18      	it	ne
 8016396:	2601      	movne	r6, #1
 8016398:	f7f9 fadc 	bl	800f954 <GUI_ALLOC_h2p>
 801639c:	6a04      	ldr	r4, [r0, #32]
 801639e:	2c00      	cmp	r4, #0
 80163a0:	d1f1      	bne.n	8016386 <_Findx0+0x82>
 80163a2:	9801      	ldr	r0, [sp, #4]
 80163a4:	e7dc      	b.n	8016360 <_Findx0+0x5c>
 80163a6:	4606      	mov	r6, r0
 80163a8:	e7e0      	b.n	801636c <_Findx0+0x68>
 80163aa:	bf00      	nop

080163ac <_Findx1>:
 80163ac:	2800      	cmp	r0, #0
 80163ae:	d044      	beq.n	801643a <_Findx1+0x8e>
 80163b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80163b2:	460e      	mov	r6, r1
 80163b4:	b085      	sub	sp, #20
 80163b6:	4617      	mov	r7, r2
 80163b8:	4604      	mov	r4, r0
 80163ba:	e00b      	b.n	80163d4 <_Findx1+0x28>
 80163bc:	07e3      	lsls	r3, r4, #31
 80163be:	d42b      	bmi.n	8016418 <_Findx1+0x6c>
 80163c0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80163c4:	9801      	ldr	r0, [sp, #4]
 80163c6:	3b01      	subs	r3, #1
 80163c8:	80b3      	strh	r3, [r6, #4]
 80163ca:	6a04      	ldr	r4, [r0, #32]
 80163cc:	a801      	add	r0, sp, #4
 80163ce:	f7f9 fadd 	bl	800f98c <GUI_ALLOC_UnlockH>
 80163d2:	b1d4      	cbz	r4, 801640a <_Findx1+0x5e>
 80163d4:	4620      	mov	r0, r4
 80163d6:	f7f9 fac7 	bl	800f968 <GUI_ALLOC_LockH>
 80163da:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80163dc:	9001      	str	r0, [sp, #4]
 80163de:	07a2      	lsls	r2, r4, #30
 80163e0:	d5f3      	bpl.n	80163ca <_Findx1+0x1e>
 80163e2:	b1a7      	cbz	r7, 801640e <_Findx1+0x62>
 80163e4:	ad02      	add	r5, sp, #8
 80163e6:	4601      	mov	r1, r0
 80163e8:	463a      	mov	r2, r7
 80163ea:	4628      	mov	r0, r5
 80163ec:	f7fb ff46 	bl	801227c <GUI__IntersectRects>
 80163f0:	4629      	mov	r1, r5
 80163f2:	4630      	mov	r0, r6
 80163f4:	f7f9 ff42 	bl	801027c <GUI_RectsIntersect>
 80163f8:	2800      	cmp	r0, #0
 80163fa:	d1df      	bne.n	80163bc <_Findx1+0x10>
 80163fc:	9801      	ldr	r0, [sp, #4]
 80163fe:	6a04      	ldr	r4, [r0, #32]
 8016400:	a801      	add	r0, sp, #4
 8016402:	f7f9 fac3 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016406:	2c00      	cmp	r4, #0
 8016408:	d1e4      	bne.n	80163d4 <_Findx1+0x28>
 801640a:	b005      	add	sp, #20
 801640c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801640e:	c803      	ldmia	r0, {r0, r1}
 8016410:	ad02      	add	r5, sp, #8
 8016412:	e885 0003 	stmia.w	r5, {r0, r1}
 8016416:	e7eb      	b.n	80163f0 <_Findx1+0x44>
 8016418:	9801      	ldr	r0, [sp, #4]
 801641a:	69c4      	ldr	r4, [r0, #28]
 801641c:	2c00      	cmp	r4, #0
 801641e:	d0d4      	beq.n	80163ca <_Findx1+0x1e>
 8016420:	4620      	mov	r0, r4
 8016422:	462a      	mov	r2, r5
 8016424:	4631      	mov	r1, r6
 8016426:	f7ff ffc1 	bl	80163ac <_Findx1>
 801642a:	4620      	mov	r0, r4
 801642c:	f7f9 fa92 	bl	800f954 <GUI_ALLOC_h2p>
 8016430:	6a04      	ldr	r4, [r0, #32]
 8016432:	2c00      	cmp	r4, #0
 8016434:	d1f4      	bne.n	8016420 <_Findx1+0x74>
 8016436:	9801      	ldr	r0, [sp, #4]
 8016438:	e7e1      	b.n	80163fe <_Findx1+0x52>
 801643a:	4770      	bx	lr

0801643c <_Paint1Trans>:
 801643c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016440:	4d29      	ldr	r5, [pc, #164]	; (80164e8 <_Paint1Trans+0xac>)
 8016442:	682b      	ldr	r3, [r5, #0]
 8016444:	b083      	sub	sp, #12
 8016446:	4606      	mov	r6, r0
 8016448:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801644a:	f7f9 fa8d 	bl	800f968 <GUI_ALLOC_LockH>
 801644e:	9000      	str	r0, [sp, #0]
 8016450:	4630      	mov	r0, r6
 8016452:	f7f9 fa89 	bl	800f968 <GUI_ALLOC_LockH>
 8016456:	4601      	mov	r1, r0
 8016458:	9800      	ldr	r0, [sp, #0]
 801645a:	9101      	str	r1, [sp, #4]
 801645c:	3008      	adds	r0, #8
 801645e:	f7f9 ff0d 	bl	801027c <GUI_RectsIntersect>
 8016462:	b950      	cbnz	r0, 801647a <_Paint1Trans+0x3e>
 8016464:	4604      	mov	r4, r0
 8016466:	4668      	mov	r0, sp
 8016468:	f7f9 fa90 	bl	800f98c <GUI_ALLOC_UnlockH>
 801646c:	a801      	add	r0, sp, #4
 801646e:	f7f9 fa8d 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016472:	4620      	mov	r0, r4
 8016474:	b003      	add	sp, #12
 8016476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801647a:	ac02      	add	r4, sp, #8
 801647c:	9901      	ldr	r1, [sp, #4]
 801647e:	f854 2d08 	ldr.w	r2, [r4, #-8]!
 8016482:	682b      	ldr	r3, [r5, #0]
 8016484:	4f19      	ldr	r7, [pc, #100]	; (80164ec <_Paint1Trans+0xb0>)
 8016486:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
 801648a:	f8d3 8050 	ldr.w	r8, [r3, #80]	; 0x50
 801648e:	3208      	adds	r2, #8
 8016490:	f101 0008 	add.w	r0, r1, #8
 8016494:	f7fb fef2 	bl	801227c <GUI__IntersectRects>
 8016498:	4620      	mov	r0, r4
 801649a:	f7f9 fa77 	bl	800f98c <GUI_ALLOC_UnlockH>
 801649e:	a802      	add	r0, sp, #8
 80164a0:	682b      	ldr	r3, [r5, #0]
 80164a2:	f850 2d04 	ldr.w	r2, [r0, #-4]!
 80164a6:	603e      	str	r6, [r7, #0]
 80164a8:	f9b2 1000 	ldrsh.w	r1, [r2]
 80164ac:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80164b0:	651a      	str	r2, [r3, #80]	; 0x50
 80164b2:	64d9      	str	r1, [r3, #76]	; 0x4c
 80164b4:	f7f9 fa6a 	bl	800f98c <GUI_ALLOC_UnlockH>
 80164b8:	4630      	mov	r0, r6
 80164ba:	f7f9 fa4b 	bl	800f954 <GUI_ALLOC_h2p>
 80164be:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80164c0:	4a0b      	ldr	r2, [pc, #44]	; (80164f0 <_Paint1Trans+0xb4>)
 80164c2:	4b0c      	ldr	r3, [pc, #48]	; (80164f4 <_Paint1Trans+0xb8>)
 80164c4:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 80164c8:	bf08      	it	eq
 80164ca:	4613      	moveq	r3, r2
 80164cc:	4630      	mov	r0, r6
 80164ce:	4798      	blx	r3
 80164d0:	2401      	movs	r4, #1
 80164d2:	682b      	ldr	r3, [r5, #0]
 80164d4:	2200      	movs	r2, #0
 80164d6:	4620      	mov	r0, r4
 80164d8:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
 80164dc:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
 80164e0:	603a      	str	r2, [r7, #0]
 80164e2:	b003      	add	sp, #12
 80164e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80164e8:	200000a8 	.word	0x200000a8
 80164ec:	20030890 	.word	0x20030890
 80164f0:	0801814d 	.word	0x0801814d
 80164f4:	0801d485 	.word	0x0801d485

080164f8 <_PaintTransChildren>:
 80164f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80164fc:	b082      	sub	sp, #8
 80164fe:	4605      	mov	r5, r0
 8016500:	f7f9 fa32 	bl	800f968 <GUI_ALLOC_LockH>
 8016504:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016506:	9001      	str	r0, [sp, #4]
 8016508:	079b      	lsls	r3, r3, #30
 801650a:	d524      	bpl.n	8016556 <_PaintTransChildren+0x5e>
 801650c:	69c6      	ldr	r6, [r0, #28]
 801650e:	b316      	cbz	r6, 8016556 <_PaintTransChildren+0x5e>
 8016510:	ac01      	add	r4, sp, #4
 8016512:	e004      	b.n	801651e <_PaintTransChildren+0x26>
 8016514:	6a1e      	ldr	r6, [r3, #32]
 8016516:	4668      	mov	r0, sp
 8016518:	f7f9 fa38 	bl	800f98c <GUI_ALLOC_UnlockH>
 801651c:	b1ae      	cbz	r6, 801654a <_PaintTransChildren+0x52>
 801651e:	4630      	mov	r0, r6
 8016520:	f7f9 fa22 	bl	800f968 <GUI_ALLOC_LockH>
 8016524:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8016526:	9000      	str	r0, [sp, #0]
 8016528:	f002 0203 	and.w	r2, r2, #3
 801652c:	2a03      	cmp	r2, #3
 801652e:	4603      	mov	r3, r0
 8016530:	d1f0      	bne.n	8016514 <_PaintTransChildren+0x1c>
 8016532:	9901      	ldr	r1, [sp, #4]
 8016534:	3108      	adds	r1, #8
 8016536:	f7f9 fea1 	bl	801027c <GUI_RectsIntersect>
 801653a:	b998      	cbnz	r0, 8016564 <_PaintTransChildren+0x6c>
 801653c:	9b00      	ldr	r3, [sp, #0]
 801653e:	6a1e      	ldr	r6, [r3, #32]
 8016540:	4668      	mov	r0, sp
 8016542:	f7f9 fa23 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016546:	2e00      	cmp	r6, #0
 8016548:	d1e9      	bne.n	801651e <_PaintTransChildren+0x26>
 801654a:	4620      	mov	r0, r4
 801654c:	f7f9 fa1e 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016550:	b002      	add	sp, #8
 8016552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016556:	ac01      	add	r4, sp, #4
 8016558:	4620      	mov	r0, r4
 801655a:	f7f9 fa17 	bl	800f98c <GUI_ALLOC_UnlockH>
 801655e:	b002      	add	sp, #8
 8016560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016564:	9b01      	ldr	r3, [sp, #4]
 8016566:	4620      	mov	r0, r4
 8016568:	f9b3 9008 	ldrsh.w	r9, [r3, #8]
 801656c:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 8016570:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
 8016574:	f9b3 a00e 	ldrsh.w	sl, [r3, #14]
 8016578:	f7f9 fa08 	bl	800f98c <GUI_ALLOC_UnlockH>
 801657c:	4668      	mov	r0, sp
 801657e:	f7f9 fa05 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016582:	4630      	mov	r0, r6
 8016584:	f7ff ff5a 	bl	801643c <_Paint1Trans>
 8016588:	b988      	cbnz	r0, 80165ae <_PaintTransChildren+0xb6>
 801658a:	4628      	mov	r0, r5
 801658c:	f7f9 f9ec 	bl	800f968 <GUI_ALLOC_LockH>
 8016590:	9001      	str	r0, [sp, #4]
 8016592:	4630      	mov	r0, r6
 8016594:	f7f9 f9e8 	bl	800f968 <GUI_ALLOC_LockH>
 8016598:	9a01      	ldr	r2, [sp, #4]
 801659a:	9000      	str	r0, [sp, #0]
 801659c:	4603      	mov	r3, r0
 801659e:	f8a2 9008 	strh.w	r9, [r2, #8]
 80165a2:	f8a2 800a 	strh.w	r8, [r2, #10]
 80165a6:	8197      	strh	r7, [r2, #12]
 80165a8:	f8a2 a00e 	strh.w	sl, [r2, #14]
 80165ac:	e7b2      	b.n	8016514 <_PaintTransChildren+0x1c>
 80165ae:	4630      	mov	r0, r6
 80165b0:	f7f9 f9d0 	bl	800f954 <GUI_ALLOC_h2p>
 80165b4:	9000      	str	r0, [sp, #0]
 80165b6:	4630      	mov	r0, r6
 80165b8:	f7ff ff9e 	bl	80164f8 <_PaintTransChildren>
 80165bc:	4630      	mov	r0, r6
 80165be:	f7f9 f9c9 	bl	800f954 <GUI_ALLOC_h2p>
 80165c2:	9000      	str	r0, [sp, #0]
 80165c4:	4628      	mov	r0, r5
 80165c6:	f7f9 f9c5 	bl	800f954 <GUI_ALLOC_h2p>
 80165ca:	9001      	str	r0, [sp, #4]
 80165cc:	e7dd      	b.n	801658a <_PaintTransChildren+0x92>
 80165ce:	bf00      	nop

080165d0 <_Findx0.constprop.10>:
 80165d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165d2:	4604      	mov	r4, r0
 80165d4:	b085      	sub	sp, #20
 80165d6:	2800      	cmp	r0, #0
 80165d8:	d03e      	beq.n	8016658 <_Findx0.constprop.10+0x88>
 80165da:	460f      	mov	r7, r1
 80165dc:	2600      	movs	r6, #0
 80165de:	ad02      	add	r5, sp, #8
 80165e0:	e00c      	b.n	80165fc <_Findx0.constprop.10+0x2c>
 80165e2:	07e3      	lsls	r3, r4, #31
 80165e4:	d424      	bmi.n	8016630 <_Findx0.constprop.10+0x60>
 80165e6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80165ea:	9801      	ldr	r0, [sp, #4]
 80165ec:	3301      	adds	r3, #1
 80165ee:	803b      	strh	r3, [r7, #0]
 80165f0:	2601      	movs	r6, #1
 80165f2:	6a04      	ldr	r4, [r0, #32]
 80165f4:	a801      	add	r0, sp, #4
 80165f6:	f7f9 f9c9 	bl	800f98c <GUI_ALLOC_UnlockH>
 80165fa:	b1b4      	cbz	r4, 801662a <_Findx0.constprop.10+0x5a>
 80165fc:	4620      	mov	r0, r4
 80165fe:	f7f9 f9b3 	bl	800f968 <GUI_ALLOC_LockH>
 8016602:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016604:	9001      	str	r0, [sp, #4]
 8016606:	07a2      	lsls	r2, r4, #30
 8016608:	d5f3      	bpl.n	80165f2 <_Findx0.constprop.10+0x22>
 801660a:	c803      	ldmia	r0, {r0, r1}
 801660c:	e885 0003 	stmia.w	r5, {r0, r1}
 8016610:	4629      	mov	r1, r5
 8016612:	4638      	mov	r0, r7
 8016614:	f7f9 fe32 	bl	801027c <GUI_RectsIntersect>
 8016618:	2800      	cmp	r0, #0
 801661a:	d1e2      	bne.n	80165e2 <_Findx0.constprop.10+0x12>
 801661c:	9801      	ldr	r0, [sp, #4]
 801661e:	6a04      	ldr	r4, [r0, #32]
 8016620:	a801      	add	r0, sp, #4
 8016622:	f7f9 f9b3 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016626:	2c00      	cmp	r4, #0
 8016628:	d1e8      	bne.n	80165fc <_Findx0.constprop.10+0x2c>
 801662a:	4630      	mov	r0, r6
 801662c:	b005      	add	sp, #20
 801662e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016630:	9801      	ldr	r0, [sp, #4]
 8016632:	69c4      	ldr	r4, [r0, #28]
 8016634:	2c00      	cmp	r4, #0
 8016636:	d0dc      	beq.n	80165f2 <_Findx0.constprop.10+0x22>
 8016638:	462a      	mov	r2, r5
 801663a:	4639      	mov	r1, r7
 801663c:	4620      	mov	r0, r4
 801663e:	f7ff fe61 	bl	8016304 <_Findx0>
 8016642:	2800      	cmp	r0, #0
 8016644:	4620      	mov	r0, r4
 8016646:	bf18      	it	ne
 8016648:	2601      	movne	r6, #1
 801664a:	f7f9 f983 	bl	800f954 <GUI_ALLOC_h2p>
 801664e:	6a04      	ldr	r4, [r0, #32]
 8016650:	2c00      	cmp	r4, #0
 8016652:	d1f1      	bne.n	8016638 <_Findx0.constprop.10+0x68>
 8016654:	9801      	ldr	r0, [sp, #4]
 8016656:	e7e2      	b.n	801661e <_Findx0.constprop.10+0x4e>
 8016658:	4606      	mov	r6, r0
 801665a:	e7e6      	b.n	801662a <_Findx0.constprop.10+0x5a>

0801665c <_Findy1.constprop.11>:
 801665c:	2800      	cmp	r0, #0
 801665e:	d050      	beq.n	8016702 <_Findy1.constprop.11+0xa6>
 8016660:	b570      	push	{r4, r5, r6, lr}
 8016662:	b084      	sub	sp, #16
 8016664:	460e      	mov	r6, r1
 8016666:	4604      	mov	r4, r0
 8016668:	ad02      	add	r5, sp, #8
 801666a:	4620      	mov	r0, r4
 801666c:	f7f9 f97c 	bl	800f968 <GUI_ALLOC_LockH>
 8016670:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016672:	9001      	str	r0, [sp, #4]
 8016674:	07a2      	lsls	r2, r4, #30
 8016676:	d518      	bpl.n	80166aa <_Findy1.constprop.11+0x4e>
 8016678:	c803      	ldmia	r0, {r0, r1}
 801667a:	e885 0003 	stmia.w	r5, {r0, r1}
 801667e:	4629      	mov	r1, r5
 8016680:	4630      	mov	r0, r6
 8016682:	f7f9 fdfb 	bl	801027c <GUI_RectsIntersect>
 8016686:	b330      	cbz	r0, 80166d6 <_Findy1.constprop.11+0x7a>
 8016688:	07e3      	lsls	r3, r4, #31
 801668a:	9801      	ldr	r0, [sp, #4]
 801668c:	d415      	bmi.n	80166ba <_Findy1.constprop.11+0x5e>
 801668e:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8016692:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016696:	429a      	cmp	r2, r3
 8016698:	dd25      	ble.n	80166e6 <_Findy1.constprop.11+0x8a>
 801669a:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801669e:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 80166a2:	429a      	cmp	r2, r3
 80166a4:	db01      	blt.n	80166aa <_Findy1.constprop.11+0x4e>
 80166a6:	3b01      	subs	r3, #1
 80166a8:	80f3      	strh	r3, [r6, #6]
 80166aa:	6a04      	ldr	r4, [r0, #32]
 80166ac:	a801      	add	r0, sp, #4
 80166ae:	f7f9 f96d 	bl	800f98c <GUI_ALLOC_UnlockH>
 80166b2:	2c00      	cmp	r4, #0
 80166b4:	d1d9      	bne.n	801666a <_Findy1.constprop.11+0xe>
 80166b6:	b004      	add	sp, #16
 80166b8:	bd70      	pop	{r4, r5, r6, pc}
 80166ba:	69c4      	ldr	r4, [r0, #28]
 80166bc:	2c00      	cmp	r4, #0
 80166be:	d0f4      	beq.n	80166aa <_Findy1.constprop.11+0x4e>
 80166c0:	4620      	mov	r0, r4
 80166c2:	462a      	mov	r2, r5
 80166c4:	4631      	mov	r1, r6
 80166c6:	f7ff fdb5 	bl	8016234 <_Findy1>
 80166ca:	4620      	mov	r0, r4
 80166cc:	f7f9 f942 	bl	800f954 <GUI_ALLOC_h2p>
 80166d0:	6a04      	ldr	r4, [r0, #32]
 80166d2:	2c00      	cmp	r4, #0
 80166d4:	d1f4      	bne.n	80166c0 <_Findy1.constprop.11+0x64>
 80166d6:	9801      	ldr	r0, [sp, #4]
 80166d8:	6a04      	ldr	r4, [r0, #32]
 80166da:	a801      	add	r0, sp, #4
 80166dc:	f7f9 f956 	bl	800f98c <GUI_ALLOC_UnlockH>
 80166e0:	2c00      	cmp	r4, #0
 80166e2:	d1c2      	bne.n	801666a <_Findy1.constprop.11+0xe>
 80166e4:	e7e7      	b.n	80166b6 <_Findy1.constprop.11+0x5a>
 80166e6:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80166ea:	f9b6 2006 	ldrsh.w	r2, [r6, #6]
 80166ee:	429a      	cmp	r2, r3
 80166f0:	dddb      	ble.n	80166aa <_Findy1.constprop.11+0x4e>
 80166f2:	6a04      	ldr	r4, [r0, #32]
 80166f4:	80f3      	strh	r3, [r6, #6]
 80166f6:	a801      	add	r0, sp, #4
 80166f8:	f7f9 f948 	bl	800f98c <GUI_ALLOC_UnlockH>
 80166fc:	2c00      	cmp	r4, #0
 80166fe:	d1b4      	bne.n	801666a <_Findy1.constprop.11+0xe>
 8016700:	e7d9      	b.n	80166b6 <_Findy1.constprop.11+0x5a>
 8016702:	4770      	bx	lr

08016704 <WM__PaintWinAndOverlays>:
 8016704:	b530      	push	{r4, r5, lr}
 8016706:	b083      	sub	sp, #12
 8016708:	4604      	mov	r4, r0
 801670a:	f7f9 f92d 	bl	800f968 <GUI_ALLOC_LockH>
 801670e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8016710:	9001      	str	r0, [sp, #4]
 8016712:	f640 0301 	movw	r3, #2049	; 0x801
 8016716:	4013      	ands	r3, r2
 8016718:	2b01      	cmp	r3, #1
 801671a:	d00e      	beq.n	801673a <WM__PaintWinAndOverlays+0x36>
 801671c:	a801      	add	r0, sp, #4
 801671e:	f7f9 f935 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016722:	4620      	mov	r0, r4
 8016724:	f7f9 f916 	bl	800f954 <GUI_ALLOC_h2p>
 8016728:	6a81      	ldr	r1, [r0, #40]	; 0x28
 801672a:	4a1b      	ldr	r2, [pc, #108]	; (8016798 <WM__PaintWinAndOverlays+0x94>)
 801672c:	4b1b      	ldr	r3, [pc, #108]	; (801679c <WM__PaintWinAndOverlays+0x98>)
 801672e:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8016732:	bf08      	it	eq
 8016734:	4613      	moveq	r3, r2
 8016736:	4620      	mov	r0, r4
 8016738:	4798      	blx	r3
 801673a:	4b19      	ldr	r3, [pc, #100]	; (80167a0 <WM__PaintWinAndOverlays+0x9c>)
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	b90b      	cbnz	r3, 8016744 <WM__PaintWinAndOverlays+0x40>
 8016740:	b003      	add	sp, #12
 8016742:	bd30      	pop	{r4, r5, pc}
 8016744:	4620      	mov	r0, r4
 8016746:	f7ff fed7 	bl	80164f8 <_PaintTransChildren>
 801674a:	4620      	mov	r0, r4
 801674c:	f7f9 f902 	bl	800f954 <GUI_ALLOC_h2p>
 8016750:	6985      	ldr	r5, [r0, #24]
 8016752:	6a04      	ldr	r4, [r0, #32]
 8016754:	2d00      	cmp	r5, #0
 8016756:	d0f3      	beq.n	8016740 <WM__PaintWinAndOverlays+0x3c>
 8016758:	b184      	cbz	r4, 801677c <WM__PaintWinAndOverlays+0x78>
 801675a:	4620      	mov	r0, r4
 801675c:	f7f9 f8fa 	bl	800f954 <GUI_ALLOC_h2p>
 8016760:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016762:	f003 0303 	and.w	r3, r3, #3
 8016766:	2b03      	cmp	r3, #3
 8016768:	d011      	beq.n	801678e <WM__PaintWinAndOverlays+0x8a>
 801676a:	4620      	mov	r0, r4
 801676c:	f7ff fec4 	bl	80164f8 <_PaintTransChildren>
 8016770:	4620      	mov	r0, r4
 8016772:	f7f9 f8ef 	bl	800f954 <GUI_ALLOC_h2p>
 8016776:	6a04      	ldr	r4, [r0, #32]
 8016778:	2c00      	cmp	r4, #0
 801677a:	d1ee      	bne.n	801675a <WM__PaintWinAndOverlays+0x56>
 801677c:	4628      	mov	r0, r5
 801677e:	f7f9 f8e9 	bl	800f954 <GUI_ALLOC_h2p>
 8016782:	6985      	ldr	r5, [r0, #24]
 8016784:	6a04      	ldr	r4, [r0, #32]
 8016786:	2d00      	cmp	r5, #0
 8016788:	d1e6      	bne.n	8016758 <WM__PaintWinAndOverlays+0x54>
 801678a:	b003      	add	sp, #12
 801678c:	bd30      	pop	{r4, r5, pc}
 801678e:	4620      	mov	r0, r4
 8016790:	f7ff fe54 	bl	801643c <_Paint1Trans>
 8016794:	e7e9      	b.n	801676a <WM__PaintWinAndOverlays+0x66>
 8016796:	bf00      	nop
 8016798:	0801814d 	.word	0x0801814d
 801679c:	0801d485 	.word	0x0801d485
 80167a0:	200308e4 	.word	0x200308e4

080167a4 <_cbPaintMemDev>:
 80167a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167a8:	4d19      	ldr	r5, [pc, #100]	; (8016810 <_cbPaintMemDev+0x6c>)
 80167aa:	682b      	ldr	r3, [r5, #0]
 80167ac:	b082      	sub	sp, #8
 80167ae:	4681      	mov	r9, r0
 80167b0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80167b2:	f7f9 f8d9 	bl	800f968 <GUI_ALLOC_LockH>
 80167b6:	682a      	ldr	r2, [r5, #0]
 80167b8:	ac02      	add	r4, sp, #8
 80167ba:	3208      	adds	r2, #8
 80167bc:	4603      	mov	r3, r0
 80167be:	f844 0d04 	str.w	r0, [r4, #-4]!
 80167c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80167c6:	f103 0208 	add.w	r2, r3, #8
 80167ca:	f9b3 a008 	ldrsh.w	sl, [r3, #8]
 80167ce:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 80167d2:	f9b3 700c 	ldrsh.w	r7, [r3, #12]
 80167d6:	f9b3 600e 	ldrsh.w	r6, [r3, #14]
 80167da:	e882 0003 	stmia.w	r2, {r0, r1}
 80167de:	4620      	mov	r0, r4
 80167e0:	f7f9 f8d4 	bl	800f98c <GUI_ALLOC_UnlockH>
 80167e4:	f8d9 0000 	ldr.w	r0, [r9]
 80167e8:	f7ff ff8c 	bl	8016704 <WM__PaintWinAndOverlays>
 80167ec:	682b      	ldr	r3, [r5, #0]
 80167ee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80167f0:	f7f9 f8ba 	bl	800f968 <GUI_ALLOC_LockH>
 80167f4:	4603      	mov	r3, r0
 80167f6:	4620      	mov	r0, r4
 80167f8:	f8a3 a008 	strh.w	sl, [r3, #8]
 80167fc:	f8a3 800a 	strh.w	r8, [r3, #10]
 8016800:	819f      	strh	r7, [r3, #12]
 8016802:	81de      	strh	r6, [r3, #14]
 8016804:	9301      	str	r3, [sp, #4]
 8016806:	f7f9 f8c1 	bl	800f98c <GUI_ALLOC_UnlockH>
 801680a:	b002      	add	sp, #8
 801680c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016810:	200000a8 	.word	0x200000a8

08016814 <_Invalidate1Abs>:
 8016814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016816:	b085      	sub	sp, #20
 8016818:	4616      	mov	r6, r2
 801681a:	460c      	mov	r4, r1
 801681c:	4605      	mov	r5, r0
 801681e:	f7f9 f899 	bl	800f954 <GUI_ALLOC_h2p>
 8016822:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016824:	9001      	str	r0, [sp, #4]
 8016826:	079a      	lsls	r2, r3, #30
 8016828:	d505      	bpl.n	8016836 <_Invalidate1Abs+0x22>
 801682a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801682e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8016832:	4291      	cmp	r1, r2
 8016834:	da01      	bge.n	801683a <_Invalidate1Abs+0x26>
 8016836:	b005      	add	sp, #20
 8016838:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801683a:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801683e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016842:	4291      	cmp	r1, r2
 8016844:	dcf7      	bgt.n	8016836 <_Invalidate1Abs+0x22>
 8016846:	f640 0201 	movw	r2, #2049	; 0x801
 801684a:	401a      	ands	r2, r3
 801684c:	2a01      	cmp	r2, #1
 801684e:	d0f2      	beq.n	8016836 <_Invalidate1Abs+0x22>
 8016850:	4628      	mov	r0, r5
 8016852:	f7f9 f889 	bl	800f968 <GUI_ALLOC_LockH>
 8016856:	af02      	add	r7, sp, #8
 8016858:	4603      	mov	r3, r0
 801685a:	4602      	mov	r2, r0
 801685c:	4621      	mov	r1, r4
 801685e:	4638      	mov	r0, r7
 8016860:	9301      	str	r3, [sp, #4]
 8016862:	f7fb fd0b 	bl	801227c <GUI__IntersectRects>
 8016866:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801686a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801686e:	429a      	cmp	r2, r3
 8016870:	dc31      	bgt.n	80168d6 <_Invalidate1Abs+0xc2>
 8016872:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8016876:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801687a:	429a      	cmp	r2, r3
 801687c:	dc2b      	bgt.n	80168d6 <_Invalidate1Abs+0xc2>
 801687e:	9a01      	ldr	r2, [sp, #4]
 8016880:	6a94      	ldr	r4, [r2, #40]	; 0x28
 8016882:	f244 0320 	movw	r3, #16416	; 0x4020
 8016886:	4023      	ands	r3, r4
 8016888:	bb53      	cbnz	r3, 80168e0 <_Invalidate1Abs+0xcc>
 801688a:	f8df e070 	ldr.w	lr, [pc, #112]	; 80168fc <_Invalidate1Abs+0xe8>
 801688e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8016892:	f8be 3000 	ldrh.w	r3, [lr]
 8016896:	4326      	orrs	r6, r4
 8016898:	3301      	adds	r3, #1
 801689a:	f102 0408 	add.w	r4, r2, #8
 801689e:	e884 0003 	stmia.w	r4, {r0, r1}
 80168a2:	f8ae 3000 	strh.w	r3, [lr]
 80168a6:	6296      	str	r6, [r2, #40]	; 0x28
 80168a8:	e000      	b.n	80168ac <_Invalidate1Abs+0x98>
 80168aa:	461d      	mov	r5, r3
 80168ac:	4628      	mov	r0, r5
 80168ae:	f7f9 f851 	bl	800f954 <GUI_ALLOC_h2p>
 80168b2:	6983      	ldr	r3, [r0, #24]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d1f8      	bne.n	80168aa <_Invalidate1Abs+0x96>
 80168b8:	4b0e      	ldr	r3, [pc, #56]	; (80168f4 <_Invalidate1Abs+0xe0>)
 80168ba:	681a      	ldr	r2, [r3, #0]
 80168bc:	4295      	cmp	r5, r2
 80168be:	d016      	beq.n	80168ee <_Invalidate1Abs+0xda>
 80168c0:	685b      	ldr	r3, [r3, #4]
 80168c2:	42ab      	cmp	r3, r5
 80168c4:	bf0c      	ite	eq
 80168c6:	2302      	moveq	r3, #2
 80168c8:	2300      	movne	r3, #0
 80168ca:	4a0b      	ldr	r2, [pc, #44]	; (80168f8 <_Invalidate1Abs+0xe4>)
 80168cc:	6811      	ldr	r1, [r2, #0]
 80168ce:	430b      	orrs	r3, r1
 80168d0:	6013      	str	r3, [r2, #0]
 80168d2:	f7fb f939 	bl	8011b48 <GUI_SignalEvent>
 80168d6:	a801      	add	r0, sp, #4
 80168d8:	f7f9 f858 	bl	800f98c <GUI_ALLOC_UnlockH>
 80168dc:	b005      	add	sp, #20
 80168de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168e0:	f102 0108 	add.w	r1, r2, #8
 80168e4:	4608      	mov	r0, r1
 80168e6:	463a      	mov	r2, r7
 80168e8:	f7f9 fbe8 	bl	80100bc <GUI_MergeRect>
 80168ec:	e7f3      	b.n	80168d6 <_Invalidate1Abs+0xc2>
 80168ee:	2301      	movs	r3, #1
 80168f0:	e7eb      	b.n	80168ca <_Invalidate1Abs+0xb6>
 80168f2:	bf00      	nop
 80168f4:	20030894 	.word	0x20030894
 80168f8:	200308bc 	.word	0x200308bc
 80168fc:	200308ac 	.word	0x200308ac

08016900 <WM__ActivateClipRect>:
 8016900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016904:	4f45      	ldr	r7, [pc, #276]	; (8016a1c <WM__ActivateClipRect+0x11c>)
 8016906:	683b      	ldr	r3, [r7, #0]
 8016908:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 801690c:	b086      	sub	sp, #24
 801690e:	2a00      	cmp	r2, #0
 8016910:	d139      	bne.n	8016986 <WM__ActivateClipRect+0x86>
 8016912:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8016914:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8016a20 <WM__ActivateClipRect+0x120>
 8016918:	f7f9 f826 	bl	800f968 <GUI_ALLOC_LockH>
 801691c:	4603      	mov	r3, r0
 801691e:	c803      	ldmia	r0, {r0, r1}
 8016920:	ae02      	add	r6, sp, #8
 8016922:	e886 0003 	stmia.w	r6, {r0, r1}
 8016926:	4668      	mov	r0, sp
 8016928:	9300      	str	r3, [sp, #0]
 801692a:	f7f9 f82f 	bl	800f98c <GUI_ALLOC_UnlockH>
 801692e:	f8d8 4000 	ldr.w	r4, [r8]
 8016932:	2c00      	cmp	r4, #0
 8016934:	d14e      	bne.n	80169d4 <WM__ActivateClipRect+0xd4>
 8016936:	683c      	ldr	r4, [r7, #0]
 8016938:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801693a:	2b00      	cmp	r3, #0
 801693c:	d065      	beq.n	8016a0a <WM__ActivateClipRect+0x10a>
 801693e:	6818      	ldr	r0, [r3, #0]
 8016940:	6859      	ldr	r1, [r3, #4]
 8016942:	f8d8 2000 	ldr.w	r2, [r8]
 8016946:	ad04      	add	r5, sp, #16
 8016948:	462b      	mov	r3, r5
 801694a:	c303      	stmia	r3!, {r0, r1}
 801694c:	b1ca      	cbz	r2, 8016982 <WM__ActivateClipRect+0x82>
 801694e:	4610      	mov	r0, r2
 8016950:	f7f9 f80a 	bl	800f968 <GUI_ALLOC_LockH>
 8016954:	ac06      	add	r4, sp, #24
 8016956:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801695a:	f844 0d14 	str.w	r0, [r4, #-20]!
 801695e:	f9b0 1000 	ldrsh.w	r1, [r0]
 8016962:	4628      	mov	r0, r5
 8016964:	f7f9 fbd8 	bl	8010118 <GUI_MoveRect>
 8016968:	4620      	mov	r0, r4
 801696a:	f7f9 f80f 	bl	800f98c <GUI_ALLOC_UnlockH>
 801696e:	4628      	mov	r0, r5
 8016970:	4631      	mov	r1, r6
 8016972:	f7fb fc65 	bl	8012240 <GUI__IntersectRect>
 8016976:	4628      	mov	r0, r5
 8016978:	f006 f9ec 	bl	801cd54 <LCD_SetClipRectEx>
 801697c:	b006      	add	sp, #24
 801697e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016982:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8016984:	e7e3      	b.n	801694e <WM__ActivateClipRect+0x4e>
 8016986:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016988:	2a00      	cmp	r2, #0
 801698a:	d042      	beq.n	8016a12 <WM__ActivateClipRect+0x112>
 801698c:	4c24      	ldr	r4, [pc, #144]	; (8016a20 <WM__ActivateClipRect+0x120>)
 801698e:	6810      	ldr	r0, [r2, #0]
 8016990:	6851      	ldr	r1, [r2, #4]
 8016992:	6824      	ldr	r4, [r4, #0]
 8016994:	ad04      	add	r5, sp, #16
 8016996:	462a      	mov	r2, r5
 8016998:	c203      	stmia	r2!, {r0, r1}
 801699a:	b1cc      	cbz	r4, 80169d0 <WM__ActivateClipRect+0xd0>
 801699c:	4620      	mov	r0, r4
 801699e:	f7f8 ffe3 	bl	800f968 <GUI_ALLOC_LockH>
 80169a2:	ac06      	add	r4, sp, #24
 80169a4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80169a8:	f844 0d10 	str.w	r0, [r4, #-16]!
 80169ac:	f9b0 1000 	ldrsh.w	r1, [r0]
 80169b0:	4628      	mov	r0, r5
 80169b2:	f7f9 fbb1 	bl	8010118 <GUI_MoveRect>
 80169b6:	4620      	mov	r0, r4
 80169b8:	f7f8 ffe8 	bl	800f98c <GUI_ALLOC_UnlockH>
 80169bc:	4919      	ldr	r1, [pc, #100]	; (8016a24 <WM__ActivateClipRect+0x124>)
 80169be:	4628      	mov	r0, r5
 80169c0:	f7fb fc3e 	bl	8012240 <GUI__IntersectRect>
 80169c4:	4628      	mov	r0, r5
 80169c6:	f006 f9c5 	bl	801cd54 <LCD_SetClipRectEx>
 80169ca:	b006      	add	sp, #24
 80169cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80169d0:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80169d2:	e7e3      	b.n	801699c <WM__ActivateClipRect+0x9c>
 80169d4:	ad04      	add	r5, sp, #16
 80169d6:	e007      	b.n	80169e8 <WM__ActivateClipRect+0xe8>
 80169d8:	f7fb fc32 	bl	8012240 <GUI__IntersectRect>
 80169dc:	9b04      	ldr	r3, [sp, #16]
 80169de:	699c      	ldr	r4, [r3, #24]
 80169e0:	4628      	mov	r0, r5
 80169e2:	b17c      	cbz	r4, 8016a04 <WM__ActivateClipRect+0x104>
 80169e4:	f7f8 ffd2 	bl	800f98c <GUI_ALLOC_UnlockH>
 80169e8:	4620      	mov	r0, r4
 80169ea:	f7f8 ffbd 	bl	800f968 <GUI_ALLOC_LockH>
 80169ee:	4603      	mov	r3, r0
 80169f0:	4601      	mov	r1, r0
 80169f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80169f4:	9304      	str	r3, [sp, #16]
 80169f6:	0793      	lsls	r3, r2, #30
 80169f8:	4630      	mov	r0, r6
 80169fa:	d4ed      	bmi.n	80169d8 <WM__ActivateClipRect+0xd8>
 80169fc:	4628      	mov	r0, r5
 80169fe:	f7f8 ffc5 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016a02:	e798      	b.n	8016936 <WM__ActivateClipRect+0x36>
 8016a04:	f7f8 ffc2 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016a08:	e795      	b.n	8016936 <WM__ActivateClipRect+0x36>
 8016a0a:	4630      	mov	r0, r6
 8016a0c:	f006 f9a2 	bl	801cd54 <LCD_SetClipRectEx>
 8016a10:	e7b4      	b.n	801697c <WM__ActivateClipRect+0x7c>
 8016a12:	4804      	ldr	r0, [pc, #16]	; (8016a24 <WM__ActivateClipRect+0x124>)
 8016a14:	f006 f99e 	bl	801cd54 <LCD_SetClipRectEx>
 8016a18:	e7b0      	b.n	801697c <WM__ActivateClipRect+0x7c>
 8016a1a:	bf00      	nop
 8016a1c:	200000a8 	.word	0x200000a8
 8016a20:	20030890 	.word	0x20030890
 8016a24:	2002e3b0 	.word	0x2002e3b0

08016a28 <WM__InsertWindowIntoList>:
 8016a28:	b901      	cbnz	r1, 8016a2c <WM__InsertWindowIntoList+0x4>
 8016a2a:	4770      	bx	lr
 8016a2c:	b570      	push	{r4, r5, r6, lr}
 8016a2e:	b084      	sub	sp, #16
 8016a30:	460c      	mov	r4, r1
 8016a32:	4605      	mov	r5, r0
 8016a34:	f7f8 ff98 	bl	800f968 <GUI_ALLOC_LockH>
 8016a38:	4603      	mov	r3, r0
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	6184      	str	r4, [r0, #24]
 8016a3e:	4620      	mov	r0, r4
 8016a40:	621a      	str	r2, [r3, #32]
 8016a42:	9301      	str	r3, [sp, #4]
 8016a44:	f7f8 ff90 	bl	800f968 <GUI_ALLOC_LockH>
 8016a48:	69c4      	ldr	r4, [r0, #28]
 8016a4a:	9002      	str	r0, [sp, #8]
 8016a4c:	2c00      	cmp	r4, #0
 8016a4e:	d02c      	beq.n	8016aaa <WM__InsertWindowIntoList+0x82>
 8016a50:	9b01      	ldr	r3, [sp, #4]
 8016a52:	4620      	mov	r0, r4
 8016a54:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 8016a56:	f7f8 ff87 	bl	800f968 <GUI_ALLOC_LockH>
 8016a5a:	f006 0608 	and.w	r6, r6, #8
 8016a5e:	9003      	str	r0, [sp, #12]
 8016a60:	2e00      	cmp	r6, #0
 8016a62:	d12b      	bne.n	8016abc <WM__InsertWindowIntoList+0x94>
 8016a64:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016a66:	071a      	lsls	r2, r3, #28
 8016a68:	d43d      	bmi.n	8016ae6 <WM__InsertWindowIntoList+0xbe>
 8016a6a:	a802      	add	r0, sp, #8
 8016a6c:	f7f8 ff8e 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016a70:	a803      	add	r0, sp, #12
 8016a72:	f7f8 ff8b 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016a76:	4620      	mov	r0, r4
 8016a78:	f7f8 ff6c 	bl	800f954 <GUI_ALLOC_h2p>
 8016a7c:	6a04      	ldr	r4, [r0, #32]
 8016a7e:	9003      	str	r0, [sp, #12]
 8016a80:	b924      	cbnz	r4, 8016a8c <WM__InsertWindowIntoList+0x64>
 8016a82:	e02e      	b.n	8016ae2 <WM__InsertWindowIntoList+0xba>
 8016a84:	6a04      	ldr	r4, [r0, #32]
 8016a86:	9003      	str	r0, [sp, #12]
 8016a88:	2c00      	cmp	r4, #0
 8016a8a:	d02a      	beq.n	8016ae2 <WM__InsertWindowIntoList+0xba>
 8016a8c:	4620      	mov	r0, r4
 8016a8e:	f7f8 ff61 	bl	800f954 <GUI_ALLOC_h2p>
 8016a92:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016a94:	071b      	lsls	r3, r3, #28
 8016a96:	d5f5      	bpl.n	8016a84 <WM__InsertWindowIntoList+0x5c>
 8016a98:	9a03      	ldr	r2, [sp, #12]
 8016a9a:	9b01      	ldr	r3, [sp, #4]
 8016a9c:	6215      	str	r5, [r2, #32]
 8016a9e:	621c      	str	r4, [r3, #32]
 8016aa0:	a801      	add	r0, sp, #4
 8016aa2:	f7f8 ff73 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016aa6:	b004      	add	sp, #16
 8016aa8:	bd70      	pop	{r4, r5, r6, pc}
 8016aaa:	61c5      	str	r5, [r0, #28]
 8016aac:	a801      	add	r0, sp, #4
 8016aae:	f7f8 ff6d 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016ab2:	a802      	add	r0, sp, #8
 8016ab4:	f7f8 ff6a 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016ab8:	b004      	add	sp, #16
 8016aba:	bd70      	pop	{r4, r5, r6, pc}
 8016abc:	a802      	add	r0, sp, #8
 8016abe:	f7f8 ff65 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016ac2:	a803      	add	r0, sp, #12
 8016ac4:	f7f8 ff62 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016ac8:	4620      	mov	r0, r4
 8016aca:	f7f8 ff43 	bl	800f954 <GUI_ALLOC_h2p>
 8016ace:	6a02      	ldr	r2, [r0, #32]
 8016ad0:	9003      	str	r0, [sp, #12]
 8016ad2:	b132      	cbz	r2, 8016ae2 <WM__InsertWindowIntoList+0xba>
 8016ad4:	4610      	mov	r0, r2
 8016ad6:	f7f8 ff3d 	bl	800f954 <GUI_ALLOC_h2p>
 8016ada:	6a02      	ldr	r2, [r0, #32]
 8016adc:	9003      	str	r0, [sp, #12]
 8016ade:	2a00      	cmp	r2, #0
 8016ae0:	d1f8      	bne.n	8016ad4 <WM__InsertWindowIntoList+0xac>
 8016ae2:	6205      	str	r5, [r0, #32]
 8016ae4:	e7dc      	b.n	8016aa0 <WM__InsertWindowIntoList+0x78>
 8016ae6:	9a01      	ldr	r2, [sp, #4]
 8016ae8:	9b02      	ldr	r3, [sp, #8]
 8016aea:	6214      	str	r4, [r2, #32]
 8016aec:	a801      	add	r0, sp, #4
 8016aee:	61dd      	str	r5, [r3, #28]
 8016af0:	f7f8 ff4c 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016af4:	a802      	add	r0, sp, #8
 8016af6:	f7f8 ff49 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016afa:	a803      	add	r0, sp, #12
 8016afc:	f7f8 ff46 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016b00:	e7da      	b.n	8016ab8 <WM__InsertWindowIntoList+0x90>
 8016b02:	bf00      	nop

08016b04 <WM__RemoveWindowFromList>:
 8016b04:	b570      	push	{r4, r5, r6, lr}
 8016b06:	4604      	mov	r4, r0
 8016b08:	f7f8 ff24 	bl	800f954 <GUI_ALLOC_h2p>
 8016b0c:	4605      	mov	r5, r0
 8016b0e:	6980      	ldr	r0, [r0, #24]
 8016b10:	b900      	cbnz	r0, 8016b14 <WM__RemoveWindowFromList+0x10>
 8016b12:	bd70      	pop	{r4, r5, r6, pc}
 8016b14:	f7f8 ff1e 	bl	800f954 <GUI_ALLOC_h2p>
 8016b18:	69c3      	ldr	r3, [r0, #28]
 8016b1a:	429c      	cmp	r4, r3
 8016b1c:	4606      	mov	r6, r0
 8016b1e:	d00c      	beq.n	8016b3a <WM__RemoveWindowFromList+0x36>
 8016b20:	b913      	cbnz	r3, 8016b28 <WM__RemoveWindowFromList+0x24>
 8016b22:	e010      	b.n	8016b46 <WM__RemoveWindowFromList+0x42>
 8016b24:	2b00      	cmp	r3, #0
 8016b26:	d0f4      	beq.n	8016b12 <WM__RemoveWindowFromList+0xe>
 8016b28:	4618      	mov	r0, r3
 8016b2a:	f7f8 ff13 	bl	800f954 <GUI_ALLOC_h2p>
 8016b2e:	6a03      	ldr	r3, [r0, #32]
 8016b30:	429c      	cmp	r4, r3
 8016b32:	d1f7      	bne.n	8016b24 <WM__RemoveWindowFromList+0x20>
 8016b34:	6a2b      	ldr	r3, [r5, #32]
 8016b36:	6203      	str	r3, [r0, #32]
 8016b38:	bd70      	pop	{r4, r5, r6, pc}
 8016b3a:	4620      	mov	r0, r4
 8016b3c:	f7f8 ff0a 	bl	800f954 <GUI_ALLOC_h2p>
 8016b40:	6a03      	ldr	r3, [r0, #32]
 8016b42:	61f3      	str	r3, [r6, #28]
 8016b44:	bd70      	pop	{r4, r5, r6, pc}
 8016b46:	bd70      	pop	{r4, r5, r6, pc}

08016b48 <WM__IsWindow>:
 8016b48:	4b0a      	ldr	r3, [pc, #40]	; (8016b74 <WM__IsWindow+0x2c>)
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	b183      	cbz	r3, 8016b70 <WM__IsWindow+0x28>
 8016b4e:	4283      	cmp	r3, r0
 8016b50:	b510      	push	{r4, lr}
 8016b52:	4604      	mov	r4, r0
 8016b54:	d102      	bne.n	8016b5c <WM__IsWindow+0x14>
 8016b56:	e009      	b.n	8016b6c <WM__IsWindow+0x24>
 8016b58:	429c      	cmp	r4, r3
 8016b5a:	d007      	beq.n	8016b6c <WM__IsWindow+0x24>
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f7f8 fef9 	bl	800f954 <GUI_ALLOC_h2p>
 8016b62:	6943      	ldr	r3, [r0, #20]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d1f7      	bne.n	8016b58 <WM__IsWindow+0x10>
 8016b68:	2000      	movs	r0, #0
 8016b6a:	bd10      	pop	{r4, pc}
 8016b6c:	2001      	movs	r0, #1
 8016b6e:	bd10      	pop	{r4, pc}
 8016b70:	2000      	movs	r0, #0
 8016b72:	4770      	bx	lr
 8016b74:	200308b0 	.word	0x200308b0

08016b78 <WM__InvalidateDrawAndDescs>:
 8016b78:	b900      	cbnz	r0, 8016b7c <WM__InvalidateDrawAndDescs+0x4>
 8016b7a:	4770      	bx	lr
 8016b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b80:	b08f      	sub	sp, #60	; 0x3c
 8016b82:	4604      	mov	r4, r0
 8016b84:	f7f8 fef0 	bl	800f968 <GUI_ALLOC_LockH>
 8016b88:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016b8a:	9005      	str	r0, [sp, #20]
 8016b8c:	079a      	lsls	r2, r3, #30
 8016b8e:	f140 813c 	bpl.w	8016e0a <WM__InvalidateDrawAndDescs+0x292>
 8016b92:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8016b94:	b140      	cbz	r0, 8016ba8 <WM__InvalidateDrawAndDescs+0x30>
 8016b96:	4ba0      	ldr	r3, [pc, #640]	; (8016e18 <WM__InvalidateDrawAndDescs+0x2a0>)
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	429c      	cmp	r4, r3
 8016b9c:	d004      	beq.n	8016ba8 <WM__InvalidateDrawAndDescs+0x30>
 8016b9e:	f006 fa49 	bl	801d034 <GUI_MEMDEV_Delete>
 8016ba2:	9b05      	ldr	r3, [sp, #20]
 8016ba4:	2200      	movs	r2, #0
 8016ba6:	625a      	str	r2, [r3, #36]	; 0x24
 8016ba8:	4620      	mov	r0, r4
 8016baa:	f002 f8f1 	bl	8018d90 <WM_GetFirstChild>
 8016bae:	9003      	str	r0, [sp, #12]
 8016bb0:	2800      	cmp	r0, #0
 8016bb2:	f000 812a 	beq.w	8016e0a <WM__InvalidateDrawAndDescs+0x292>
 8016bb6:	f8df 8260 	ldr.w	r8, [pc, #608]	; 8016e18 <WM__InvalidateDrawAndDescs+0x2a0>
 8016bba:	9803      	ldr	r0, [sp, #12]
 8016bbc:	f7f8 fed4 	bl	800f968 <GUI_ALLOC_LockH>
 8016bc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016bc2:	9006      	str	r0, [sp, #24]
 8016bc4:	079b      	lsls	r3, r3, #30
 8016bc6:	f140 8115 	bpl.w	8016df4 <WM__InvalidateDrawAndDescs+0x27c>
 8016bca:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8016bcc:	b148      	cbz	r0, 8016be2 <WM__InvalidateDrawAndDescs+0x6a>
 8016bce:	f8d8 3000 	ldr.w	r3, [r8]
 8016bd2:	9a03      	ldr	r2, [sp, #12]
 8016bd4:	4293      	cmp	r3, r2
 8016bd6:	d004      	beq.n	8016be2 <WM__InvalidateDrawAndDescs+0x6a>
 8016bd8:	f006 fa2c 	bl	801d034 <GUI_MEMDEV_Delete>
 8016bdc:	9b06      	ldr	r3, [sp, #24]
 8016bde:	2200      	movs	r2, #0
 8016be0:	625a      	str	r2, [r3, #36]	; 0x24
 8016be2:	9803      	ldr	r0, [sp, #12]
 8016be4:	f002 f8d4 	bl	8018d90 <WM_GetFirstChild>
 8016be8:	9002      	str	r0, [sp, #8]
 8016bea:	2800      	cmp	r0, #0
 8016bec:	f000 8102 	beq.w	8016df4 <WM__InvalidateDrawAndDescs+0x27c>
 8016bf0:	9802      	ldr	r0, [sp, #8]
 8016bf2:	f7f8 feb9 	bl	800f968 <GUI_ALLOC_LockH>
 8016bf6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016bf8:	9007      	str	r0, [sp, #28]
 8016bfa:	079f      	lsls	r7, r3, #30
 8016bfc:	f140 80ef 	bpl.w	8016dde <WM__InvalidateDrawAndDescs+0x266>
 8016c00:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8016c02:	b148      	cbz	r0, 8016c18 <WM__InvalidateDrawAndDescs+0xa0>
 8016c04:	f8d8 3000 	ldr.w	r3, [r8]
 8016c08:	9a02      	ldr	r2, [sp, #8]
 8016c0a:	4293      	cmp	r3, r2
 8016c0c:	d004      	beq.n	8016c18 <WM__InvalidateDrawAndDescs+0xa0>
 8016c0e:	f006 fa11 	bl	801d034 <GUI_MEMDEV_Delete>
 8016c12:	9b07      	ldr	r3, [sp, #28]
 8016c14:	2200      	movs	r2, #0
 8016c16:	625a      	str	r2, [r3, #36]	; 0x24
 8016c18:	9802      	ldr	r0, [sp, #8]
 8016c1a:	f002 f8b9 	bl	8018d90 <WM_GetFirstChild>
 8016c1e:	4683      	mov	fp, r0
 8016c20:	2800      	cmp	r0, #0
 8016c22:	f000 80dc 	beq.w	8016dde <WM__InvalidateDrawAndDescs+0x266>
 8016c26:	4658      	mov	r0, fp
 8016c28:	f7f8 fe9e 	bl	800f968 <GUI_ALLOC_LockH>
 8016c2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016c2e:	9008      	str	r0, [sp, #32]
 8016c30:	079e      	lsls	r6, r3, #30
 8016c32:	f140 80c8 	bpl.w	8016dc6 <WM__InvalidateDrawAndDescs+0x24e>
 8016c36:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8016c38:	b140      	cbz	r0, 8016c4c <WM__InvalidateDrawAndDescs+0xd4>
 8016c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8016c3e:	455b      	cmp	r3, fp
 8016c40:	d004      	beq.n	8016c4c <WM__InvalidateDrawAndDescs+0xd4>
 8016c42:	f006 f9f7 	bl	801d034 <GUI_MEMDEV_Delete>
 8016c46:	9b08      	ldr	r3, [sp, #32]
 8016c48:	2200      	movs	r2, #0
 8016c4a:	625a      	str	r2, [r3, #36]	; 0x24
 8016c4c:	4658      	mov	r0, fp
 8016c4e:	f002 f89f 	bl	8018d90 <WM_GetFirstChild>
 8016c52:	4682      	mov	sl, r0
 8016c54:	2800      	cmp	r0, #0
 8016c56:	f000 80b6 	beq.w	8016dc6 <WM__InvalidateDrawAndDescs+0x24e>
 8016c5a:	4650      	mov	r0, sl
 8016c5c:	f7f8 fe84 	bl	800f968 <GUI_ALLOC_LockH>
 8016c60:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016c62:	9009      	str	r0, [sp, #36]	; 0x24
 8016c64:	079d      	lsls	r5, r3, #30
 8016c66:	f140 80a2 	bpl.w	8016dae <WM__InvalidateDrawAndDescs+0x236>
 8016c6a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8016c6c:	b140      	cbz	r0, 8016c80 <WM__InvalidateDrawAndDescs+0x108>
 8016c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8016c72:	4553      	cmp	r3, sl
 8016c74:	d004      	beq.n	8016c80 <WM__InvalidateDrawAndDescs+0x108>
 8016c76:	f006 f9dd 	bl	801d034 <GUI_MEMDEV_Delete>
 8016c7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	625a      	str	r2, [r3, #36]	; 0x24
 8016c80:	4650      	mov	r0, sl
 8016c82:	f002 f885 	bl	8018d90 <WM_GetFirstChild>
 8016c86:	9001      	str	r0, [sp, #4]
 8016c88:	2800      	cmp	r0, #0
 8016c8a:	f000 8090 	beq.w	8016dae <WM__InvalidateDrawAndDescs+0x236>
 8016c8e:	9801      	ldr	r0, [sp, #4]
 8016c90:	f7f8 fe6a 	bl	800f968 <GUI_ALLOC_LockH>
 8016c94:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016c96:	900a      	str	r0, [sp, #40]	; 0x28
 8016c98:	079c      	lsls	r4, r3, #30
 8016c9a:	d57d      	bpl.n	8016d98 <WM__InvalidateDrawAndDescs+0x220>
 8016c9c:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8016c9e:	b148      	cbz	r0, 8016cb4 <WM__InvalidateDrawAndDescs+0x13c>
 8016ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8016ca4:	9a01      	ldr	r2, [sp, #4]
 8016ca6:	4293      	cmp	r3, r2
 8016ca8:	d004      	beq.n	8016cb4 <WM__InvalidateDrawAndDescs+0x13c>
 8016caa:	f006 f9c3 	bl	801d034 <GUI_MEMDEV_Delete>
 8016cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cb0:	2200      	movs	r2, #0
 8016cb2:	625a      	str	r2, [r3, #36]	; 0x24
 8016cb4:	9801      	ldr	r0, [sp, #4]
 8016cb6:	f002 f86b 	bl	8018d90 <WM_GetFirstChild>
 8016cba:	4606      	mov	r6, r0
 8016cbc:	2800      	cmp	r0, #0
 8016cbe:	d06b      	beq.n	8016d98 <WM__InvalidateDrawAndDescs+0x220>
 8016cc0:	4630      	mov	r0, r6
 8016cc2:	f7f8 fe51 	bl	800f968 <GUI_ALLOC_LockH>
 8016cc6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016cc8:	900b      	str	r0, [sp, #44]	; 0x2c
 8016cca:	0799      	lsls	r1, r3, #30
 8016ccc:	d55b      	bpl.n	8016d86 <WM__InvalidateDrawAndDescs+0x20e>
 8016cce:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8016cd0:	b140      	cbz	r0, 8016ce4 <WM__InvalidateDrawAndDescs+0x16c>
 8016cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8016cd6:	42b3      	cmp	r3, r6
 8016cd8:	d004      	beq.n	8016ce4 <WM__InvalidateDrawAndDescs+0x16c>
 8016cda:	f006 f9ab 	bl	801d034 <GUI_MEMDEV_Delete>
 8016cde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	625a      	str	r2, [r3, #36]	; 0x24
 8016ce4:	4630      	mov	r0, r6
 8016ce6:	f002 f853 	bl	8018d90 <WM_GetFirstChild>
 8016cea:	4605      	mov	r5, r0
 8016cec:	2800      	cmp	r0, #0
 8016cee:	d04a      	beq.n	8016d86 <WM__InvalidateDrawAndDescs+0x20e>
 8016cf0:	4628      	mov	r0, r5
 8016cf2:	f7f8 fe39 	bl	800f968 <GUI_ALLOC_LockH>
 8016cf6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016cf8:	900c      	str	r0, [sp, #48]	; 0x30
 8016cfa:	079a      	lsls	r2, r3, #30
 8016cfc:	d53a      	bpl.n	8016d74 <WM__InvalidateDrawAndDescs+0x1fc>
 8016cfe:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8016d00:	b140      	cbz	r0, 8016d14 <WM__InvalidateDrawAndDescs+0x19c>
 8016d02:	f8d8 3000 	ldr.w	r3, [r8]
 8016d06:	42ab      	cmp	r3, r5
 8016d08:	d004      	beq.n	8016d14 <WM__InvalidateDrawAndDescs+0x19c>
 8016d0a:	f006 f993 	bl	801d034 <GUI_MEMDEV_Delete>
 8016d0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d10:	2200      	movs	r2, #0
 8016d12:	625a      	str	r2, [r3, #36]	; 0x24
 8016d14:	4628      	mov	r0, r5
 8016d16:	f002 f83b 	bl	8018d90 <WM_GetFirstChild>
 8016d1a:	f04f 0900 	mov.w	r9, #0
 8016d1e:	4604      	mov	r4, r0
 8016d20:	b340      	cbz	r0, 8016d74 <WM__InvalidateDrawAndDescs+0x1fc>
 8016d22:	4620      	mov	r0, r4
 8016d24:	f7f8 fe20 	bl	800f968 <GUI_ALLOC_LockH>
 8016d28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016d2a:	900d      	str	r0, [sp, #52]	; 0x34
 8016d2c:	079b      	lsls	r3, r3, #30
 8016d2e:	d518      	bpl.n	8016d62 <WM__InvalidateDrawAndDescs+0x1ea>
 8016d30:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8016d32:	b140      	cbz	r0, 8016d46 <WM__InvalidateDrawAndDescs+0x1ce>
 8016d34:	f8d8 3000 	ldr.w	r3, [r8]
 8016d38:	42a3      	cmp	r3, r4
 8016d3a:	d004      	beq.n	8016d46 <WM__InvalidateDrawAndDescs+0x1ce>
 8016d3c:	f006 f97a 	bl	801d034 <GUI_MEMDEV_Delete>
 8016d40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016d42:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
 8016d46:	4620      	mov	r0, r4
 8016d48:	f002 f822 	bl	8018d90 <WM_GetFirstChild>
 8016d4c:	4607      	mov	r7, r0
 8016d4e:	b140      	cbz	r0, 8016d62 <WM__InvalidateDrawAndDescs+0x1ea>
 8016d50:	4638      	mov	r0, r7
 8016d52:	f7ff ff11 	bl	8016b78 <WM__InvalidateDrawAndDescs>
 8016d56:	4638      	mov	r0, r7
 8016d58:	f7f8 fdfc 	bl	800f954 <GUI_ALLOC_h2p>
 8016d5c:	6a07      	ldr	r7, [r0, #32]
 8016d5e:	2f00      	cmp	r7, #0
 8016d60:	d1f6      	bne.n	8016d50 <WM__InvalidateDrawAndDescs+0x1d8>
 8016d62:	a80d      	add	r0, sp, #52	; 0x34
 8016d64:	f7f8 fe12 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016d68:	4620      	mov	r0, r4
 8016d6a:	f7f8 fdf3 	bl	800f954 <GUI_ALLOC_h2p>
 8016d6e:	6a04      	ldr	r4, [r0, #32]
 8016d70:	2c00      	cmp	r4, #0
 8016d72:	d1d6      	bne.n	8016d22 <WM__InvalidateDrawAndDescs+0x1aa>
 8016d74:	a80c      	add	r0, sp, #48	; 0x30
 8016d76:	f7f8 fe09 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016d7a:	4628      	mov	r0, r5
 8016d7c:	f7f8 fdea 	bl	800f954 <GUI_ALLOC_h2p>
 8016d80:	6a05      	ldr	r5, [r0, #32]
 8016d82:	2d00      	cmp	r5, #0
 8016d84:	d1b4      	bne.n	8016cf0 <WM__InvalidateDrawAndDescs+0x178>
 8016d86:	a80b      	add	r0, sp, #44	; 0x2c
 8016d88:	f7f8 fe00 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016d8c:	4630      	mov	r0, r6
 8016d8e:	f7f8 fde1 	bl	800f954 <GUI_ALLOC_h2p>
 8016d92:	6a06      	ldr	r6, [r0, #32]
 8016d94:	2e00      	cmp	r6, #0
 8016d96:	d193      	bne.n	8016cc0 <WM__InvalidateDrawAndDescs+0x148>
 8016d98:	a80a      	add	r0, sp, #40	; 0x28
 8016d9a:	f7f8 fdf7 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016d9e:	9801      	ldr	r0, [sp, #4]
 8016da0:	f7f8 fdd8 	bl	800f954 <GUI_ALLOC_h2p>
 8016da4:	6a03      	ldr	r3, [r0, #32]
 8016da6:	9301      	str	r3, [sp, #4]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	f47f af70 	bne.w	8016c8e <WM__InvalidateDrawAndDescs+0x116>
 8016dae:	a809      	add	r0, sp, #36	; 0x24
 8016db0:	f7f8 fdec 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016db4:	4650      	mov	r0, sl
 8016db6:	f7f8 fdcd 	bl	800f954 <GUI_ALLOC_h2p>
 8016dba:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8016dbe:	f1ba 0f00 	cmp.w	sl, #0
 8016dc2:	f47f af4a 	bne.w	8016c5a <WM__InvalidateDrawAndDescs+0xe2>
 8016dc6:	a808      	add	r0, sp, #32
 8016dc8:	f7f8 fde0 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016dcc:	4658      	mov	r0, fp
 8016dce:	f7f8 fdc1 	bl	800f954 <GUI_ALLOC_h2p>
 8016dd2:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8016dd6:	f1bb 0f00 	cmp.w	fp, #0
 8016dda:	f47f af24 	bne.w	8016c26 <WM__InvalidateDrawAndDescs+0xae>
 8016dde:	a807      	add	r0, sp, #28
 8016de0:	f7f8 fdd4 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016de4:	9802      	ldr	r0, [sp, #8]
 8016de6:	f7f8 fdb5 	bl	800f954 <GUI_ALLOC_h2p>
 8016dea:	6a03      	ldr	r3, [r0, #32]
 8016dec:	9302      	str	r3, [sp, #8]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	f47f aefe 	bne.w	8016bf0 <WM__InvalidateDrawAndDescs+0x78>
 8016df4:	a806      	add	r0, sp, #24
 8016df6:	f7f8 fdc9 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016dfa:	9803      	ldr	r0, [sp, #12]
 8016dfc:	f7f8 fdaa 	bl	800f954 <GUI_ALLOC_h2p>
 8016e00:	6a03      	ldr	r3, [r0, #32]
 8016e02:	9303      	str	r3, [sp, #12]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	f47f aed8 	bne.w	8016bba <WM__InvalidateDrawAndDescs+0x42>
 8016e0a:	a805      	add	r0, sp, #20
 8016e0c:	f7f8 fdbe 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016e10:	b00f      	add	sp, #60	; 0x3c
 8016e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e16:	bf00      	nop
 8016e18:	200308e0 	.word	0x200308e0

08016e1c <WM_InvalidateWindowAndDescsEx>:
 8016e1c:	b900      	cbnz	r0, 8016e20 <WM_InvalidateWindowAndDescsEx+0x4>
 8016e1e:	4770      	bx	lr
 8016e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e24:	b0a1      	sub	sp, #132	; 0x84
 8016e26:	4604      	mov	r4, r0
 8016e28:	9201      	str	r2, [sp, #4]
 8016e2a:	460d      	mov	r5, r1
 8016e2c:	f7f8 fd9c 	bl	800f968 <GUI_ALLOC_LockH>
 8016e30:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016e32:	9005      	str	r0, [sp, #20]
 8016e34:	079a      	lsls	r2, r3, #30
 8016e36:	f140 8156 	bpl.w	80170e6 <WM_InvalidateWindowAndDescsEx+0x2ca>
 8016e3a:	4602      	mov	r2, r0
 8016e3c:	4629      	mov	r1, r5
 8016e3e:	a80e      	add	r0, sp, #56	; 0x38
 8016e40:	f7fb fa1c 	bl	801227c <GUI__IntersectRects>
 8016e44:	2800      	cmp	r0, #0
 8016e46:	f000 814e 	beq.w	80170e6 <WM_InvalidateWindowAndDescsEx+0x2ca>
 8016e4a:	a805      	add	r0, sp, #20
 8016e4c:	f7f8 fd9e 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016e50:	4620      	mov	r0, r4
 8016e52:	9a01      	ldr	r2, [sp, #4]
 8016e54:	a90e      	add	r1, sp, #56	; 0x38
 8016e56:	f7ff fcdd 	bl	8016814 <_Invalidate1Abs>
 8016e5a:	4620      	mov	r0, r4
 8016e5c:	f001 ff98 	bl	8018d90 <WM_GetFirstChild>
 8016e60:	4604      	mov	r4, r0
 8016e62:	2800      	cmp	r0, #0
 8016e64:	f000 8142 	beq.w	80170ec <WM_InvalidateWindowAndDescsEx+0x2d0>
 8016e68:	4620      	mov	r0, r4
 8016e6a:	f7f8 fd7d 	bl	800f968 <GUI_ALLOC_LockH>
 8016e6e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016e70:	9006      	str	r0, [sp, #24]
 8016e72:	079b      	lsls	r3, r3, #30
 8016e74:	f140 813d 	bpl.w	80170f2 <WM_InvalidateWindowAndDescsEx+0x2d6>
 8016e78:	4602      	mov	r2, r0
 8016e7a:	a90e      	add	r1, sp, #56	; 0x38
 8016e7c:	a810      	add	r0, sp, #64	; 0x40
 8016e7e:	f7fb f9fd 	bl	801227c <GUI__IntersectRects>
 8016e82:	2800      	cmp	r0, #0
 8016e84:	f000 8135 	beq.w	80170f2 <WM_InvalidateWindowAndDescsEx+0x2d6>
 8016e88:	a806      	add	r0, sp, #24
 8016e8a:	f7f8 fd7f 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016e8e:	9a01      	ldr	r2, [sp, #4]
 8016e90:	a910      	add	r1, sp, #64	; 0x40
 8016e92:	4620      	mov	r0, r4
 8016e94:	f7ff fcbe 	bl	8016814 <_Invalidate1Abs>
 8016e98:	4620      	mov	r0, r4
 8016e9a:	f001 ff79 	bl	8018d90 <WM_GetFirstChild>
 8016e9e:	4605      	mov	r5, r0
 8016ea0:	2800      	cmp	r0, #0
 8016ea2:	f000 8118 	beq.w	80170d6 <WM_InvalidateWindowAndDescsEx+0x2ba>
 8016ea6:	9402      	str	r4, [sp, #8]
 8016ea8:	4628      	mov	r0, r5
 8016eaa:	f7f8 fd5d 	bl	800f968 <GUI_ALLOC_LockH>
 8016eae:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016eb0:	9007      	str	r0, [sp, #28]
 8016eb2:	079f      	lsls	r7, r3, #30
 8016eb4:	f140 8121 	bpl.w	80170fa <WM_InvalidateWindowAndDescsEx+0x2de>
 8016eb8:	4602      	mov	r2, r0
 8016eba:	a910      	add	r1, sp, #64	; 0x40
 8016ebc:	a812      	add	r0, sp, #72	; 0x48
 8016ebe:	f7fb f9dd 	bl	801227c <GUI__IntersectRects>
 8016ec2:	2800      	cmp	r0, #0
 8016ec4:	f000 8119 	beq.w	80170fa <WM_InvalidateWindowAndDescsEx+0x2de>
 8016ec8:	a807      	add	r0, sp, #28
 8016eca:	f7f8 fd5f 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016ece:	f8dd a004 	ldr.w	sl, [sp, #4]
 8016ed2:	4628      	mov	r0, r5
 8016ed4:	4652      	mov	r2, sl
 8016ed6:	a912      	add	r1, sp, #72	; 0x48
 8016ed8:	f7ff fc9c 	bl	8016814 <_Invalidate1Abs>
 8016edc:	4628      	mov	r0, r5
 8016ede:	f001 ff57 	bl	8018d90 <WM_GetFirstChild>
 8016ee2:	2800      	cmp	r0, #0
 8016ee4:	f000 80ef 	beq.w	80170c6 <WM_InvalidateWindowAndDescsEx+0x2aa>
 8016ee8:	9503      	str	r5, [sp, #12]
 8016eea:	4605      	mov	r5, r0
 8016eec:	4628      	mov	r0, r5
 8016eee:	f7f8 fd3b 	bl	800f968 <GUI_ALLOC_LockH>
 8016ef2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016ef4:	9008      	str	r0, [sp, #32]
 8016ef6:	079e      	lsls	r6, r3, #30
 8016ef8:	f140 8103 	bpl.w	8017102 <WM_InvalidateWindowAndDescsEx+0x2e6>
 8016efc:	4602      	mov	r2, r0
 8016efe:	a912      	add	r1, sp, #72	; 0x48
 8016f00:	a814      	add	r0, sp, #80	; 0x50
 8016f02:	f7fb f9bb 	bl	801227c <GUI__IntersectRects>
 8016f06:	2800      	cmp	r0, #0
 8016f08:	f000 80fb 	beq.w	8017102 <WM_InvalidateWindowAndDescsEx+0x2e6>
 8016f0c:	a808      	add	r0, sp, #32
 8016f0e:	f7f8 fd3d 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016f12:	4628      	mov	r0, r5
 8016f14:	4652      	mov	r2, sl
 8016f16:	a914      	add	r1, sp, #80	; 0x50
 8016f18:	f7ff fc7c 	bl	8016814 <_Invalidate1Abs>
 8016f1c:	4628      	mov	r0, r5
 8016f1e:	f001 ff37 	bl	8018d90 <WM_GetFirstChild>
 8016f22:	2800      	cmp	r0, #0
 8016f24:	f000 80c7 	beq.w	80170b6 <WM_InvalidateWindowAndDescsEx+0x29a>
 8016f28:	46ab      	mov	fp, r5
 8016f2a:	4680      	mov	r8, r0
 8016f2c:	4640      	mov	r0, r8
 8016f2e:	f7f8 fd1b 	bl	800f968 <GUI_ALLOC_LockH>
 8016f32:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016f34:	9009      	str	r0, [sp, #36]	; 0x24
 8016f36:	079d      	lsls	r5, r3, #30
 8016f38:	f140 80e7 	bpl.w	801710a <WM_InvalidateWindowAndDescsEx+0x2ee>
 8016f3c:	4602      	mov	r2, r0
 8016f3e:	a914      	add	r1, sp, #80	; 0x50
 8016f40:	a816      	add	r0, sp, #88	; 0x58
 8016f42:	f7fb f99b 	bl	801227c <GUI__IntersectRects>
 8016f46:	2800      	cmp	r0, #0
 8016f48:	f000 80df 	beq.w	801710a <WM_InvalidateWindowAndDescsEx+0x2ee>
 8016f4c:	a809      	add	r0, sp, #36	; 0x24
 8016f4e:	f7f8 fd1d 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016f52:	4640      	mov	r0, r8
 8016f54:	4652      	mov	r2, sl
 8016f56:	a916      	add	r1, sp, #88	; 0x58
 8016f58:	f7ff fc5c 	bl	8016814 <_Invalidate1Abs>
 8016f5c:	4640      	mov	r0, r8
 8016f5e:	f001 ff17 	bl	8018d90 <WM_GetFirstChild>
 8016f62:	2800      	cmp	r0, #0
 8016f64:	f000 809d 	beq.w	80170a2 <WM_InvalidateWindowAndDescsEx+0x286>
 8016f68:	4681      	mov	r9, r0
 8016f6a:	4648      	mov	r0, r9
 8016f6c:	f7f8 fcfc 	bl	800f968 <GUI_ALLOC_LockH>
 8016f70:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016f72:	900a      	str	r0, [sp, #40]	; 0x28
 8016f74:	079c      	lsls	r4, r3, #30
 8016f76:	f140 80d5 	bpl.w	8017124 <WM_InvalidateWindowAndDescsEx+0x308>
 8016f7a:	4602      	mov	r2, r0
 8016f7c:	a916      	add	r1, sp, #88	; 0x58
 8016f7e:	a818      	add	r0, sp, #96	; 0x60
 8016f80:	f7fb f97c 	bl	801227c <GUI__IntersectRects>
 8016f84:	2800      	cmp	r0, #0
 8016f86:	f000 80cd 	beq.w	8017124 <WM_InvalidateWindowAndDescsEx+0x308>
 8016f8a:	a80a      	add	r0, sp, #40	; 0x28
 8016f8c:	f7f8 fcfe 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016f90:	4652      	mov	r2, sl
 8016f92:	a918      	add	r1, sp, #96	; 0x60
 8016f94:	4648      	mov	r0, r9
 8016f96:	f7ff fc3d 	bl	8016814 <_Invalidate1Abs>
 8016f9a:	4648      	mov	r0, r9
 8016f9c:	f001 fef8 	bl	8018d90 <WM_GetFirstChild>
 8016fa0:	4605      	mov	r5, r0
 8016fa2:	2800      	cmp	r0, #0
 8016fa4:	d074      	beq.n	8017090 <WM_InvalidateWindowAndDescsEx+0x274>
 8016fa6:	4628      	mov	r0, r5
 8016fa8:	f7f8 fcde 	bl	800f968 <GUI_ALLOC_LockH>
 8016fac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016fae:	900b      	str	r0, [sp, #44]	; 0x2c
 8016fb0:	0799      	lsls	r1, r3, #30
 8016fb2:	f140 80c4 	bpl.w	801713e <WM_InvalidateWindowAndDescsEx+0x322>
 8016fb6:	4602      	mov	r2, r0
 8016fb8:	a918      	add	r1, sp, #96	; 0x60
 8016fba:	a81a      	add	r0, sp, #104	; 0x68
 8016fbc:	f7fb f95e 	bl	801227c <GUI__IntersectRects>
 8016fc0:	2800      	cmp	r0, #0
 8016fc2:	f000 80bc 	beq.w	801713e <WM_InvalidateWindowAndDescsEx+0x322>
 8016fc6:	a80b      	add	r0, sp, #44	; 0x2c
 8016fc8:	f7f8 fce0 	bl	800f98c <GUI_ALLOC_UnlockH>
 8016fcc:	4652      	mov	r2, sl
 8016fce:	a91a      	add	r1, sp, #104	; 0x68
 8016fd0:	4628      	mov	r0, r5
 8016fd2:	f7ff fc1f 	bl	8016814 <_Invalidate1Abs>
 8016fd6:	4628      	mov	r0, r5
 8016fd8:	f001 feda 	bl	8018d90 <WM_GetFirstChild>
 8016fdc:	4606      	mov	r6, r0
 8016fde:	2800      	cmp	r0, #0
 8016fe0:	d050      	beq.n	8017084 <WM_InvalidateWindowAndDescsEx+0x268>
 8016fe2:	4630      	mov	r0, r6
 8016fe4:	f7f8 fcc0 	bl	800f968 <GUI_ALLOC_LockH>
 8016fe8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016fea:	900c      	str	r0, [sp, #48]	; 0x30
 8016fec:	079a      	lsls	r2, r3, #30
 8016fee:	f140 80b1 	bpl.w	8017154 <WM_InvalidateWindowAndDescsEx+0x338>
 8016ff2:	4602      	mov	r2, r0
 8016ff4:	a91a      	add	r1, sp, #104	; 0x68
 8016ff6:	a81c      	add	r0, sp, #112	; 0x70
 8016ff8:	f7fb f940 	bl	801227c <GUI__IntersectRects>
 8016ffc:	2800      	cmp	r0, #0
 8016ffe:	f000 80a9 	beq.w	8017154 <WM_InvalidateWindowAndDescsEx+0x338>
 8017002:	a80c      	add	r0, sp, #48	; 0x30
 8017004:	f7f8 fcc2 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017008:	4652      	mov	r2, sl
 801700a:	a91c      	add	r1, sp, #112	; 0x70
 801700c:	4630      	mov	r0, r6
 801700e:	f7ff fc01 	bl	8016814 <_Invalidate1Abs>
 8017012:	4630      	mov	r0, r6
 8017014:	f001 febc 	bl	8018d90 <WM_GetFirstChild>
 8017018:	4607      	mov	r7, r0
 801701a:	b368      	cbz	r0, 8017078 <WM_InvalidateWindowAndDescsEx+0x25c>
 801701c:	4638      	mov	r0, r7
 801701e:	f7f8 fca3 	bl	800f968 <GUI_ALLOC_LockH>
 8017022:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017024:	900d      	str	r0, [sp, #52]	; 0x34
 8017026:	079b      	lsls	r3, r3, #30
 8017028:	f140 809f 	bpl.w	801716a <WM_InvalidateWindowAndDescsEx+0x34e>
 801702c:	4602      	mov	r2, r0
 801702e:	a91c      	add	r1, sp, #112	; 0x70
 8017030:	a81e      	add	r0, sp, #120	; 0x78
 8017032:	f7fb f923 	bl	801227c <GUI__IntersectRects>
 8017036:	2800      	cmp	r0, #0
 8017038:	f000 8097 	beq.w	801716a <WM_InvalidateWindowAndDescsEx+0x34e>
 801703c:	a80d      	add	r0, sp, #52	; 0x34
 801703e:	f7f8 fca5 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017042:	4652      	mov	r2, sl
 8017044:	a91e      	add	r1, sp, #120	; 0x78
 8017046:	4638      	mov	r0, r7
 8017048:	f7ff fbe4 	bl	8016814 <_Invalidate1Abs>
 801704c:	4638      	mov	r0, r7
 801704e:	f001 fe9f 	bl	8018d90 <WM_GetFirstChild>
 8017052:	4604      	mov	r4, r0
 8017054:	b150      	cbz	r0, 801706c <WM_InvalidateWindowAndDescsEx+0x250>
 8017056:	4620      	mov	r0, r4
 8017058:	4652      	mov	r2, sl
 801705a:	a91e      	add	r1, sp, #120	; 0x78
 801705c:	f7ff fede 	bl	8016e1c <WM_InvalidateWindowAndDescsEx>
 8017060:	4620      	mov	r0, r4
 8017062:	f7f8 fc77 	bl	800f954 <GUI_ALLOC_h2p>
 8017066:	6a04      	ldr	r4, [r0, #32]
 8017068:	2c00      	cmp	r4, #0
 801706a:	d1f4      	bne.n	8017056 <WM_InvalidateWindowAndDescsEx+0x23a>
 801706c:	4638      	mov	r0, r7
 801706e:	f7f8 fc71 	bl	800f954 <GUI_ALLOC_h2p>
 8017072:	6a07      	ldr	r7, [r0, #32]
 8017074:	2f00      	cmp	r7, #0
 8017076:	d1d1      	bne.n	801701c <WM_InvalidateWindowAndDescsEx+0x200>
 8017078:	4630      	mov	r0, r6
 801707a:	f7f8 fc6b 	bl	800f954 <GUI_ALLOC_h2p>
 801707e:	6a06      	ldr	r6, [r0, #32]
 8017080:	2e00      	cmp	r6, #0
 8017082:	d1ae      	bne.n	8016fe2 <WM_InvalidateWindowAndDescsEx+0x1c6>
 8017084:	4628      	mov	r0, r5
 8017086:	f7f8 fc65 	bl	800f954 <GUI_ALLOC_h2p>
 801708a:	6a05      	ldr	r5, [r0, #32]
 801708c:	2d00      	cmp	r5, #0
 801708e:	d18a      	bne.n	8016fa6 <WM_InvalidateWindowAndDescsEx+0x18a>
 8017090:	4648      	mov	r0, r9
 8017092:	f7f8 fc5f 	bl	800f954 <GUI_ALLOC_h2p>
 8017096:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801709a:	f1b9 0f00 	cmp.w	r9, #0
 801709e:	f47f af64 	bne.w	8016f6a <WM_InvalidateWindowAndDescsEx+0x14e>
 80170a2:	4640      	mov	r0, r8
 80170a4:	f7f8 fc56 	bl	800f954 <GUI_ALLOC_h2p>
 80170a8:	f8d0 8020 	ldr.w	r8, [r0, #32]
 80170ac:	f1b8 0f00 	cmp.w	r8, #0
 80170b0:	f47f af3c 	bne.w	8016f2c <WM_InvalidateWindowAndDescsEx+0x110>
 80170b4:	465d      	mov	r5, fp
 80170b6:	4628      	mov	r0, r5
 80170b8:	f7f8 fc4c 	bl	800f954 <GUI_ALLOC_h2p>
 80170bc:	6a05      	ldr	r5, [r0, #32]
 80170be:	2d00      	cmp	r5, #0
 80170c0:	f47f af14 	bne.w	8016eec <WM_InvalidateWindowAndDescsEx+0xd0>
 80170c4:	9d03      	ldr	r5, [sp, #12]
 80170c6:	4628      	mov	r0, r5
 80170c8:	f7f8 fc44 	bl	800f954 <GUI_ALLOC_h2p>
 80170cc:	6a05      	ldr	r5, [r0, #32]
 80170ce:	2d00      	cmp	r5, #0
 80170d0:	f47f aeea 	bne.w	8016ea8 <WM_InvalidateWindowAndDescsEx+0x8c>
 80170d4:	9c02      	ldr	r4, [sp, #8]
 80170d6:	4620      	mov	r0, r4
 80170d8:	f7f8 fc3c 	bl	800f954 <GUI_ALLOC_h2p>
 80170dc:	6a04      	ldr	r4, [r0, #32]
 80170de:	2c00      	cmp	r4, #0
 80170e0:	f47f aec2 	bne.w	8016e68 <WM_InvalidateWindowAndDescsEx+0x4c>
 80170e4:	e002      	b.n	80170ec <WM_InvalidateWindowAndDescsEx+0x2d0>
 80170e6:	a805      	add	r0, sp, #20
 80170e8:	f7f8 fc50 	bl	800f98c <GUI_ALLOC_UnlockH>
 80170ec:	b021      	add	sp, #132	; 0x84
 80170ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170f2:	a806      	add	r0, sp, #24
 80170f4:	f7f8 fc4a 	bl	800f98c <GUI_ALLOC_UnlockH>
 80170f8:	e7ed      	b.n	80170d6 <WM_InvalidateWindowAndDescsEx+0x2ba>
 80170fa:	a807      	add	r0, sp, #28
 80170fc:	f7f8 fc46 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017100:	e7e1      	b.n	80170c6 <WM_InvalidateWindowAndDescsEx+0x2aa>
 8017102:	a808      	add	r0, sp, #32
 8017104:	f7f8 fc42 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017108:	e7d5      	b.n	80170b6 <WM_InvalidateWindowAndDescsEx+0x29a>
 801710a:	a809      	add	r0, sp, #36	; 0x24
 801710c:	f7f8 fc3e 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017110:	4640      	mov	r0, r8
 8017112:	f7f8 fc1f 	bl	800f954 <GUI_ALLOC_h2p>
 8017116:	f8d0 8020 	ldr.w	r8, [r0, #32]
 801711a:	f1b8 0f00 	cmp.w	r8, #0
 801711e:	f47f af05 	bne.w	8016f2c <WM_InvalidateWindowAndDescsEx+0x110>
 8017122:	e7c7      	b.n	80170b4 <WM_InvalidateWindowAndDescsEx+0x298>
 8017124:	a80a      	add	r0, sp, #40	; 0x28
 8017126:	f7f8 fc31 	bl	800f98c <GUI_ALLOC_UnlockH>
 801712a:	4648      	mov	r0, r9
 801712c:	f7f8 fc12 	bl	800f954 <GUI_ALLOC_h2p>
 8017130:	f8d0 9020 	ldr.w	r9, [r0, #32]
 8017134:	f1b9 0f00 	cmp.w	r9, #0
 8017138:	f47f af17 	bne.w	8016f6a <WM_InvalidateWindowAndDescsEx+0x14e>
 801713c:	e7b1      	b.n	80170a2 <WM_InvalidateWindowAndDescsEx+0x286>
 801713e:	a80b      	add	r0, sp, #44	; 0x2c
 8017140:	f7f8 fc24 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017144:	4628      	mov	r0, r5
 8017146:	f7f8 fc05 	bl	800f954 <GUI_ALLOC_h2p>
 801714a:	6a05      	ldr	r5, [r0, #32]
 801714c:	2d00      	cmp	r5, #0
 801714e:	f47f af2a 	bne.w	8016fa6 <WM_InvalidateWindowAndDescsEx+0x18a>
 8017152:	e79d      	b.n	8017090 <WM_InvalidateWindowAndDescsEx+0x274>
 8017154:	a80c      	add	r0, sp, #48	; 0x30
 8017156:	f7f8 fc19 	bl	800f98c <GUI_ALLOC_UnlockH>
 801715a:	4630      	mov	r0, r6
 801715c:	f7f8 fbfa 	bl	800f954 <GUI_ALLOC_h2p>
 8017160:	6a06      	ldr	r6, [r0, #32]
 8017162:	2e00      	cmp	r6, #0
 8017164:	f47f af3d 	bne.w	8016fe2 <WM_InvalidateWindowAndDescsEx+0x1c6>
 8017168:	e78c      	b.n	8017084 <WM_InvalidateWindowAndDescsEx+0x268>
 801716a:	a80d      	add	r0, sp, #52	; 0x34
 801716c:	f7f8 fc0e 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017170:	4638      	mov	r0, r7
 8017172:	f7f8 fbef 	bl	800f954 <GUI_ALLOC_h2p>
 8017176:	6a07      	ldr	r7, [r0, #32]
 8017178:	2f00      	cmp	r7, #0
 801717a:	f47f af4f 	bne.w	801701c <WM_InvalidateWindowAndDescsEx+0x200>
 801717e:	e77b      	b.n	8017078 <WM_InvalidateWindowAndDescsEx+0x25c>

08017180 <WM__InvalidateRect>:
 8017180:	b901      	cbnz	r1, 8017184 <WM__InvalidateRect+0x4>
 8017182:	4770      	bx	lr
 8017184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017188:	4605      	mov	r5, r0
 801718a:	b086      	sub	sp, #24
 801718c:	4608      	mov	r0, r1
 801718e:	460c      	mov	r4, r1
 8017190:	461e      	mov	r6, r3
 8017192:	4617      	mov	r7, r2
 8017194:	f7f8 fbe8 	bl	800f968 <GUI_ALLOC_LockH>
 8017198:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 801719c:	9000      	str	r0, [sp, #0]
 801719e:	f018 0f02 	tst.w	r8, #2
 80171a2:	d042      	beq.n	801722a <WM__InvalidateRect+0xaa>
 80171a4:	4602      	mov	r2, r0
 80171a6:	4629      	mov	r1, r5
 80171a8:	a802      	add	r0, sp, #8
 80171aa:	f7fb f867 	bl	801227c <GUI__IntersectRects>
 80171ae:	2800      	cmp	r0, #0
 80171b0:	d03b      	beq.n	801722a <WM__InvalidateRect+0xaa>
 80171b2:	f640 0301 	movw	r3, #2049	; 0x801
 80171b6:	ea08 0303 	and.w	r3, r8, r3
 80171ba:	2b01      	cmp	r3, #1
 80171bc:	d03f      	beq.n	801723e <WM__InvalidateRect+0xbe>
 80171be:	4620      	mov	r0, r4
 80171c0:	4632      	mov	r2, r6
 80171c2:	a902      	add	r1, sp, #8
 80171c4:	f7ff fb26 	bl	8016814 <_Invalidate1Abs>
 80171c8:	9b00      	ldr	r3, [sp, #0]
 80171ca:	69dc      	ldr	r4, [r3, #28]
 80171cc:	b36c      	cbz	r4, 801722a <WM__InvalidateRect+0xaa>
 80171ce:	42bc      	cmp	r4, r7
 80171d0:	d02b      	beq.n	801722a <WM__InvalidateRect+0xaa>
 80171d2:	4620      	mov	r0, r4
 80171d4:	f7f8 fbc8 	bl	800f968 <GUI_ALLOC_LockH>
 80171d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80171da:	9001      	str	r0, [sp, #4]
 80171dc:	079b      	lsls	r3, r3, #30
 80171de:	d52a      	bpl.n	8017236 <WM__InvalidateRect+0xb6>
 80171e0:	4602      	mov	r2, r0
 80171e2:	a902      	add	r1, sp, #8
 80171e4:	a804      	add	r0, sp, #16
 80171e6:	f7fb f849 	bl	801227c <GUI__IntersectRects>
 80171ea:	b320      	cbz	r0, 8017236 <WM__InvalidateRect+0xb6>
 80171ec:	a801      	add	r0, sp, #4
 80171ee:	f7f8 fbcd 	bl	800f98c <GUI_ALLOC_UnlockH>
 80171f2:	4632      	mov	r2, r6
 80171f4:	a904      	add	r1, sp, #16
 80171f6:	4620      	mov	r0, r4
 80171f8:	f7ff fb0c 	bl	8016814 <_Invalidate1Abs>
 80171fc:	4620      	mov	r0, r4
 80171fe:	f001 fdc7 	bl	8018d90 <WM_GetFirstChild>
 8017202:	4605      	mov	r5, r0
 8017204:	b150      	cbz	r0, 801721c <WM__InvalidateRect+0x9c>
 8017206:	4628      	mov	r0, r5
 8017208:	4632      	mov	r2, r6
 801720a:	a904      	add	r1, sp, #16
 801720c:	f7ff fe06 	bl	8016e1c <WM_InvalidateWindowAndDescsEx>
 8017210:	4628      	mov	r0, r5
 8017212:	f7f8 fb9f 	bl	800f954 <GUI_ALLOC_h2p>
 8017216:	6a05      	ldr	r5, [r0, #32]
 8017218:	2d00      	cmp	r5, #0
 801721a:	d1f4      	bne.n	8017206 <WM__InvalidateRect+0x86>
 801721c:	4620      	mov	r0, r4
 801721e:	f7f8 fb99 	bl	800f954 <GUI_ALLOC_h2p>
 8017222:	6a04      	ldr	r4, [r0, #32]
 8017224:	b10c      	cbz	r4, 801722a <WM__InvalidateRect+0xaa>
 8017226:	42a7      	cmp	r7, r4
 8017228:	d1d3      	bne.n	80171d2 <WM__InvalidateRect+0x52>
 801722a:	4668      	mov	r0, sp
 801722c:	f7f8 fbae 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017230:	b006      	add	sp, #24
 8017232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017236:	a801      	add	r0, sp, #4
 8017238:	f7f8 fba8 	bl	800f98c <GUI_ALLOC_UnlockH>
 801723c:	e7ee      	b.n	801721c <WM__InvalidateRect+0x9c>
 801723e:	9900      	ldr	r1, [sp, #0]
 8017240:	4633      	mov	r3, r6
 8017242:	6a0a      	ldr	r2, [r1, #32]
 8017244:	6989      	ldr	r1, [r1, #24]
 8017246:	a802      	add	r0, sp, #8
 8017248:	f7ff ff9a 	bl	8017180 <WM__InvalidateRect>
 801724c:	e7bc      	b.n	80171c8 <WM__InvalidateRect+0x48>
 801724e:	bf00      	nop

08017250 <WM_InvalidateRect.part.2>:
 8017250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017254:	4607      	mov	r7, r0
 8017256:	b086      	sub	sp, #24
 8017258:	460c      	mov	r4, r1
 801725a:	f7fa fa0f 	bl	801167c <GUI_Lock>
 801725e:	4638      	mov	r0, r7
 8017260:	f7f8 fb82 	bl	800f968 <GUI_ALLOC_LockH>
 8017264:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 8017268:	9000      	str	r0, [sp, #0]
 801726a:	f018 0f02 	tst.w	r8, #2
 801726e:	d02f      	beq.n	80172d0 <WM_InvalidateRect.part.2+0x80>
 8017270:	c803      	ldmia	r0, {r0, r1}
 8017272:	ae04      	add	r6, sp, #16
 8017274:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 8017278:	e886 0003 	stmia.w	r6, {r0, r1}
 801727c:	d145      	bne.n	801730a <WM_InvalidateRect.part.2+0xba>
 801727e:	b17c      	cbz	r4, 80172a0 <WM_InvalidateRect.part.2+0x50>
 8017280:	6820      	ldr	r0, [r4, #0]
 8017282:	6861      	ldr	r1, [r4, #4]
 8017284:	9c00      	ldr	r4, [sp, #0]
 8017286:	ab02      	add	r3, sp, #8
 8017288:	c303      	stmia	r3!, {r0, r1}
 801728a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801728e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8017292:	a802      	add	r0, sp, #8
 8017294:	f7f8 ff40 	bl	8010118 <GUI_MoveRect>
 8017298:	a902      	add	r1, sp, #8
 801729a:	4630      	mov	r0, r6
 801729c:	f7fa ffd0 	bl	8012240 <GUI__IntersectRect>
 80172a0:	463d      	mov	r5, r7
 80172a2:	e008      	b.n	80172b6 <WM_InvalidateRect.part.2+0x66>
 80172a4:	f7fa ffcc 	bl	8012240 <GUI__IntersectRect>
 80172a8:	9b01      	ldr	r3, [sp, #4]
 80172aa:	699c      	ldr	r4, [r3, #24]
 80172ac:	a801      	add	r0, sp, #4
 80172ae:	b1bc      	cbz	r4, 80172e0 <WM_InvalidateRect.part.2+0x90>
 80172b0:	f7f8 fb6c 	bl	800f98c <GUI_ALLOC_UnlockH>
 80172b4:	4625      	mov	r5, r4
 80172b6:	4628      	mov	r0, r5
 80172b8:	f7f8 fb56 	bl	800f968 <GUI_ALLOC_LockH>
 80172bc:	4603      	mov	r3, r0
 80172be:	9301      	str	r3, [sp, #4]
 80172c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80172c2:	0793      	lsls	r3, r2, #30
 80172c4:	4601      	mov	r1, r0
 80172c6:	4630      	mov	r0, r6
 80172c8:	d4ec      	bmi.n	80172a4 <WM_InvalidateRect.part.2+0x54>
 80172ca:	a801      	add	r0, sp, #4
 80172cc:	f7f8 fb5e 	bl	800f98c <GUI_ALLOC_UnlockH>
 80172d0:	4668      	mov	r0, sp
 80172d2:	f7f8 fb5b 	bl	800f98c <GUI_ALLOC_UnlockH>
 80172d6:	f7fa f9c7 	bl	8011668 <GUI_Unlock>
 80172da:	b006      	add	sp, #24
 80172dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172e0:	f7f8 fb54 	bl	800f98c <GUI_ALLOC_UnlockH>
 80172e4:	4b10      	ldr	r3, [pc, #64]	; (8017328 <WM_InvalidateRect.part.2+0xd8>)
 80172e6:	681a      	ldr	r2, [r3, #0]
 80172e8:	42aa      	cmp	r2, r5
 80172ea:	d002      	beq.n	80172f2 <WM_InvalidateRect.part.2+0xa2>
 80172ec:	685b      	ldr	r3, [r3, #4]
 80172ee:	429d      	cmp	r5, r3
 80172f0:	d1ee      	bne.n	80172d0 <WM_InvalidateRect.part.2+0x80>
 80172f2:	f640 0301 	movw	r3, #2049	; 0x801
 80172f6:	ea08 0303 	and.w	r3, r8, r3
 80172fa:	2b01      	cmp	r3, #1
 80172fc:	d00b      	beq.n	8017316 <WM_InvalidateRect.part.2+0xc6>
 80172fe:	4631      	mov	r1, r6
 8017300:	4638      	mov	r0, r7
 8017302:	2220      	movs	r2, #32
 8017304:	f7ff fa86 	bl	8016814 <_Invalidate1Abs>
 8017308:	e7e2      	b.n	80172d0 <WM_InvalidateRect.part.2+0x80>
 801730a:	4638      	mov	r0, r7
 801730c:	f7ff fc34 	bl	8016b78 <WM__InvalidateDrawAndDescs>
 8017310:	2c00      	cmp	r4, #0
 8017312:	d1b5      	bne.n	8017280 <WM_InvalidateRect.part.2+0x30>
 8017314:	e7c4      	b.n	80172a0 <WM_InvalidateRect.part.2+0x50>
 8017316:	9b00      	ldr	r3, [sp, #0]
 8017318:	4630      	mov	r0, r6
 801731a:	6a1a      	ldr	r2, [r3, #32]
 801731c:	6999      	ldr	r1, [r3, #24]
 801731e:	2320      	movs	r3, #32
 8017320:	f7ff ff2e 	bl	8017180 <WM__InvalidateRect>
 8017324:	e7d4      	b.n	80172d0 <WM_InvalidateRect.part.2+0x80>
 8017326:	bf00      	nop
 8017328:	20030894 	.word	0x20030894

0801732c <_cbBackWin>:
 801732c:	6803      	ldr	r3, [r0, #0]
 801732e:	2b0e      	cmp	r3, #14
 8017330:	d034      	beq.n	801739c <_cbBackWin+0x70>
 8017332:	2b0f      	cmp	r3, #15
 8017334:	b510      	push	{r4, lr}
 8017336:	4604      	mov	r4, r0
 8017338:	d116      	bne.n	8017368 <_cbBackWin+0x3c>
 801733a:	4a26      	ldr	r2, [pc, #152]	; (80173d4 <_cbBackWin+0xa8>)
 801733c:	6843      	ldr	r3, [r0, #4]
 801733e:	6811      	ldr	r1, [r2, #0]
 8017340:	428b      	cmp	r3, r1
 8017342:	d045      	beq.n	80173d0 <_cbBackWin+0xa4>
 8017344:	6852      	ldr	r2, [r2, #4]
 8017346:	4293      	cmp	r3, r2
 8017348:	bf14      	ite	ne
 801734a:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 801734e:	2301      	moveq	r3, #1
 8017350:	4a21      	ldr	r2, [pc, #132]	; (80173d8 <_cbBackWin+0xac>)
 8017352:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8017356:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801735a:	4298      	cmp	r0, r3
 801735c:	d01b      	beq.n	8017396 <_cbBackWin+0x6a>
 801735e:	f7f8 ffcd 	bl	80102fc <GUI_SetBkColor>
 8017362:	f7f9 f8db 	bl	801051c <GUI_Clear>
 8017366:	6823      	ldr	r3, [r4, #0]
 8017368:	6860      	ldr	r0, [r4, #4]
 801736a:	3b0e      	subs	r3, #14
 801736c:	2b1a      	cmp	r3, #26
 801736e:	d812      	bhi.n	8017396 <_cbBackWin+0x6a>
 8017370:	e8df f003 	tbb	[pc, r3]
 8017374:	11111119 	.word	0x11111119
 8017378:	110e1111 	.word	0x110e1111
 801737c:	11111e11 	.word	0x11111e11
 8017380:	11111111 	.word	0x11111111
 8017384:	11111111 	.word	0x11111111
 8017388:	11111120 	.word	0x11111120
 801738c:	1111      	.short	0x1111
 801738e:	24          	.byte	0x24
 801738f:	00          	.byte	0x00
 8017390:	68e1      	ldr	r1, [r4, #12]
 8017392:	f002 ff21 	bl	801a1d8 <WM__GetClientRectEx>
 8017396:	2300      	movs	r3, #0
 8017398:	60e3      	str	r3, [r4, #12]
 801739a:	bd10      	pop	{r4, pc}
 801739c:	68c3      	ldr	r3, [r0, #12]
 801739e:	685a      	ldr	r2, [r3, #4]
 80173a0:	2a01      	cmp	r2, #1
 80173a2:	d012      	beq.n	80173ca <_cbBackWin+0x9e>
 80173a4:	4770      	bx	lr
 80173a6:	4621      	mov	r1, r4
 80173a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173ac:	f001 bdf0 	b.w	8018f90 <WM_SendToParent>
 80173b0:	60e0      	str	r0, [r4, #12]
 80173b2:	bd10      	pop	{r4, pc}
 80173b4:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80173b8:	60e3      	str	r3, [r4, #12]
 80173ba:	bd10      	pop	{r4, pc}
 80173bc:	2800      	cmp	r0, #0
 80173be:	d0ec      	beq.n	801739a <_cbBackWin+0x6e>
 80173c0:	2100      	movs	r1, #0
 80173c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173c6:	f7ff bf43 	b.w	8017250 <WM_InvalidateRect.part.2>
 80173ca:	6818      	ldr	r0, [r3, #0]
 80173cc:	f7fa b8a0 	b.w	8011510 <GUI_StoreKey>
 80173d0:	2300      	movs	r3, #0
 80173d2:	e7bd      	b.n	8017350 <_cbBackWin+0x24>
 80173d4:	20030894 	.word	0x20030894
 80173d8:	200308c8 	.word	0x200308c8

080173dc <WM_DeleteWindow.part.3>:
 80173dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173e0:	4e81      	ldr	r6, [pc, #516]	; (80175e8 <WM_DeleteWindow.part.3+0x20c>)
 80173e2:	b086      	sub	sp, #24
 80173e4:	4604      	mov	r4, r0
 80173e6:	f7fa f949 	bl	801167c <GUI_Lock>
 80173ea:	6830      	ldr	r0, [r6, #0]
 80173ec:	b148      	cbz	r0, 8017402 <WM_DeleteWindow.part.3+0x26>
 80173ee:	42a0      	cmp	r0, r4
 80173f0:	d102      	bne.n	80173f8 <WM_DeleteWindow.part.3+0x1c>
 80173f2:	e00b      	b.n	801740c <WM_DeleteWindow.part.3+0x30>
 80173f4:	4284      	cmp	r4, r0
 80173f6:	d009      	beq.n	801740c <WM_DeleteWindow.part.3+0x30>
 80173f8:	f7f8 faac 	bl	800f954 <GUI_ALLOC_h2p>
 80173fc:	6940      	ldr	r0, [r0, #20]
 80173fe:	2800      	cmp	r0, #0
 8017400:	d1f8      	bne.n	80173f4 <WM_DeleteWindow.part.3+0x18>
 8017402:	f7fa f931 	bl	8011668 <GUI_Unlock>
 8017406:	b006      	add	sp, #24
 8017408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801740c:	4625      	mov	r5, r4
 801740e:	e000      	b.n	8017412 <WM_DeleteWindow.part.3+0x36>
 8017410:	461d      	mov	r5, r3
 8017412:	4628      	mov	r0, r5
 8017414:	f7f8 fa9e 	bl	800f954 <GUI_ALLOC_h2p>
 8017418:	6983      	ldr	r3, [r0, #24]
 801741a:	2b00      	cmp	r3, #0
 801741c:	d1f8      	bne.n	8017410 <WM_DeleteWindow.part.3+0x34>
 801741e:	4f73      	ldr	r7, [pc, #460]	; (80175ec <WM_DeleteWindow.part.3+0x210>)
 8017420:	683a      	ldr	r2, [r7, #0]
 8017422:	4295      	cmp	r5, r2
 8017424:	f000 80d8 	beq.w	80175d8 <WM_DeleteWindow.part.3+0x1fc>
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	429d      	cmp	r5, r3
 801742c:	bf14      	ite	ne
 801742e:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8017432:	2501      	moveq	r5, #1
 8017434:	f10d 0818 	add.w	r8, sp, #24
 8017438:	230b      	movs	r3, #11
 801743a:	f848 3d10 	str.w	r3, [r8, #-16]!
 801743e:	4620      	mov	r0, r4
 8017440:	4641      	mov	r1, r8
 8017442:	9403      	str	r4, [sp, #12]
 8017444:	f002 fdca 	bl	8019fdc <WM__SendMessage>
 8017448:	4620      	mov	r0, r4
 801744a:	f002 f981 	bl	8019750 <WM__DeleteAssocTimer>
 801744e:	4620      	mov	r0, r4
 8017450:	f7f8 fa8a 	bl	800f968 <GUI_ALLOC_LockH>
 8017454:	9001      	str	r0, [sp, #4]
 8017456:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8017458:	2800      	cmp	r0, #0
 801745a:	f040 80a1 	bne.w	80175a0 <WM_DeleteWindow.part.3+0x1c4>
 801745e:	4b64      	ldr	r3, [pc, #400]	; (80175f0 <WM_DeleteWindow.part.3+0x214>)
 8017460:	4a64      	ldr	r2, [pc, #400]	; (80175f4 <WM_DeleteWindow.part.3+0x218>)
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	4864      	ldr	r0, [pc, #400]	; (80175f8 <WM_DeleteWindow.part.3+0x21c>)
 8017466:	2100      	movs	r1, #0
 8017468:	6081      	str	r1, [r0, #8]
 801746a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801746e:	4284      	cmp	r4, r0
 8017470:	bf08      	it	eq
 8017472:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 8017476:	4a61      	ldr	r2, [pc, #388]	; (80175fc <WM_DeleteWindow.part.3+0x220>)
 8017478:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801747c:	428c      	cmp	r4, r1
 801747e:	bf04      	itt	eq
 8017480:	2100      	moveq	r1, #0
 8017482:	f842 1023 	streq.w	r1, [r2, r3, lsl #2]
 8017486:	4b5e      	ldr	r3, [pc, #376]	; (8017600 <WM_DeleteWindow.part.3+0x224>)
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	2100      	movs	r1, #0
 801748c:	b133      	cbz	r3, 801749c <WM_DeleteWindow.part.3+0xc0>
 801748e:	685a      	ldr	r2, [r3, #4]
 8017490:	4294      	cmp	r4, r2
 8017492:	bf08      	it	eq
 8017494:	6059      	streq	r1, [r3, #4]
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	2b00      	cmp	r3, #0
 801749a:	d1f8      	bne.n	801748e <WM_DeleteWindow.part.3+0xb2>
 801749c:	4620      	mov	r0, r4
 801749e:	2107      	movs	r1, #7
 80174a0:	f001 fcfa 	bl	8018e98 <WM_NotifyParent>
 80174a4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80174a8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80174ac:	2800      	cmp	r0, #0
 80174ae:	d15d      	bne.n	801756c <WM_DeleteWindow.part.3+0x190>
 80174b0:	4620      	mov	r0, r4
 80174b2:	f7f8 fa59 	bl	800f968 <GUI_ALLOC_LockH>
 80174b6:	6981      	ldr	r1, [r0, #24]
 80174b8:	9002      	str	r0, [sp, #8]
 80174ba:	2900      	cmp	r1, #0
 80174bc:	d162      	bne.n	8017584 <WM_DeleteWindow.part.3+0x1a8>
 80174be:	4640      	mov	r0, r8
 80174c0:	f7f8 fa64 	bl	800f98c <GUI_ALLOC_UnlockH>
 80174c4:	6830      	ldr	r0, [r6, #0]
 80174c6:	b158      	cbz	r0, 80174e0 <WM_DeleteWindow.part.3+0x104>
 80174c8:	f7f8 fa44 	bl	800f954 <GUI_ALLOC_h2p>
 80174cc:	4680      	mov	r8, r0
 80174ce:	6940      	ldr	r0, [r0, #20]
 80174d0:	4284      	cmp	r4, r0
 80174d2:	d1f8      	bne.n	80174c6 <WM_DeleteWindow.part.3+0xea>
 80174d4:	4620      	mov	r0, r4
 80174d6:	f7f8 fa3d 	bl	800f954 <GUI_ALLOC_h2p>
 80174da:	6943      	ldr	r3, [r0, #20]
 80174dc:	f8c8 3014 	str.w	r3, [r8, #20]
 80174e0:	9b01      	ldr	r3, [sp, #4]
 80174e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80174e4:	07d9      	lsls	r1, r3, #31
 80174e6:	d503      	bpl.n	80174f0 <WM_DeleteWindow.part.3+0x114>
 80174e8:	4946      	ldr	r1, [pc, #280]	; (8017604 <WM_DeleteWindow.part.3+0x228>)
 80174ea:	680a      	ldr	r2, [r1, #0]
 80174ec:	3a01      	subs	r2, #1
 80174ee:	600a      	str	r2, [r1, #0]
 80174f0:	069a      	lsls	r2, r3, #26
 80174f2:	d442      	bmi.n	801757a <WM_DeleteWindow.part.3+0x19e>
 80174f4:	a801      	add	r0, sp, #4
 80174f6:	f7f8 fa49 	bl	800f98c <GUI_ALLOC_UnlockH>
 80174fa:	4a43      	ldr	r2, [pc, #268]	; (8017608 <WM_DeleteWindow.part.3+0x22c>)
 80174fc:	8813      	ldrh	r3, [r2, #0]
 80174fe:	4620      	mov	r0, r4
 8017500:	3b01      	subs	r3, #1
 8017502:	8013      	strh	r3, [r2, #0]
 8017504:	f7f8 fbd2 	bl	800fcac <GUI_ALLOC_Free>
 8017508:	1c6b      	adds	r3, r5, #1
 801750a:	f43f af7a 	beq.w	8017402 <WM_DeleteWindow.part.3+0x26>
 801750e:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8017512:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8017610 <WM_DeleteWindow.part.3+0x234>
 8017516:	f7fa f8b1 	bl	801167c <GUI_Lock>
 801751a:	f8d8 3000 	ldr.w	r3, [r8]
 801751e:	b905      	cbnz	r5, 8017522 <WM_DeleteWindow.part.3+0x146>
 8017520:	6835      	ldr	r5, [r6, #0]
 8017522:	649d      	str	r5, [r3, #72]	; 0x48
 8017524:	462c      	mov	r4, r5
 8017526:	e000      	b.n	801752a <WM_DeleteWindow.part.3+0x14e>
 8017528:	461c      	mov	r4, r3
 801752a:	4620      	mov	r0, r4
 801752c:	f7f8 fa12 	bl	800f954 <GUI_ALLOC_h2p>
 8017530:	6983      	ldr	r3, [r0, #24]
 8017532:	2b00      	cmp	r3, #0
 8017534:	d1f8      	bne.n	8017528 <WM_DeleteWindow.part.3+0x14c>
 8017536:	6839      	ldr	r1, [r7, #0]
 8017538:	4a2c      	ldr	r2, [pc, #176]	; (80175ec <WM_DeleteWindow.part.3+0x210>)
 801753a:	428c      	cmp	r4, r1
 801753c:	d04e      	beq.n	80175dc <WM_DeleteWindow.part.3+0x200>
 801753e:	6853      	ldr	r3, [r2, #4]
 8017540:	429c      	cmp	r4, r3
 8017542:	d04f      	beq.n	80175e4 <WM_DeleteWindow.part.3+0x208>
 8017544:	f7fb fce2 	bl	8012f0c <LCD_SetClipRectMax>
 8017548:	4628      	mov	r0, r5
 801754a:	f7f8 fa03 	bl	800f954 <GUI_ALLOC_h2p>
 801754e:	f8d8 3000 	ldr.w	r3, [r8]
 8017552:	f9b0 1000 	ldrsh.w	r1, [r0]
 8017556:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801755a:	651a      	str	r2, [r3, #80]	; 0x50
 801755c:	64d9      	str	r1, [r3, #76]	; 0x4c
 801755e:	f7fa f883 	bl	8011668 <GUI_Unlock>
 8017562:	f7fa f881 	bl	8011668 <GUI_Unlock>
 8017566:	b006      	add	sp, #24
 8017568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801756c:	f7ff ff36 	bl	80173dc <WM_DeleteWindow.part.3>
 8017570:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8017574:	2800      	cmp	r0, #0
 8017576:	d199      	bne.n	80174ac <WM_DeleteWindow.part.3+0xd0>
 8017578:	e79a      	b.n	80174b0 <WM_DeleteWindow.part.3+0xd4>
 801757a:	4a24      	ldr	r2, [pc, #144]	; (801760c <WM_DeleteWindow.part.3+0x230>)
 801757c:	8813      	ldrh	r3, [r2, #0]
 801757e:	3b01      	subs	r3, #1
 8017580:	8013      	strh	r3, [r2, #0]
 8017582:	e7b7      	b.n	80174f4 <WM_DeleteWindow.part.3+0x118>
 8017584:	6a02      	ldr	r2, [r0, #32]
 8017586:	2320      	movs	r3, #32
 8017588:	f7ff fdfa 	bl	8017180 <WM__InvalidateRect>
 801758c:	4620      	mov	r0, r4
 801758e:	f7f8 f9e1 	bl	800f954 <GUI_ALLOC_h2p>
 8017592:	4681      	mov	r9, r0
 8017594:	6980      	ldr	r0, [r0, #24]
 8017596:	b930      	cbnz	r0, 80175a6 <WM_DeleteWindow.part.3+0x1ca>
 8017598:	9b02      	ldr	r3, [sp, #8]
 801759a:	2200      	movs	r2, #0
 801759c:	619a      	str	r2, [r3, #24]
 801759e:	e78e      	b.n	80174be <WM_DeleteWindow.part.3+0xe2>
 80175a0:	f005 fd48 	bl	801d034 <GUI_MEMDEV_Delete>
 80175a4:	e75b      	b.n	801745e <WM_DeleteWindow.part.3+0x82>
 80175a6:	f7f8 f9d5 	bl	800f954 <GUI_ALLOC_h2p>
 80175aa:	69c3      	ldr	r3, [r0, #28]
 80175ac:	429c      	cmp	r4, r3
 80175ae:	4682      	mov	sl, r0
 80175b0:	d00b      	beq.n	80175ca <WM_DeleteWindow.part.3+0x1ee>
 80175b2:	2b00      	cmp	r3, #0
 80175b4:	d0f0      	beq.n	8017598 <WM_DeleteWindow.part.3+0x1bc>
 80175b6:	4618      	mov	r0, r3
 80175b8:	f7f8 f9cc 	bl	800f954 <GUI_ALLOC_h2p>
 80175bc:	6a03      	ldr	r3, [r0, #32]
 80175be:	429c      	cmp	r4, r3
 80175c0:	d1f7      	bne.n	80175b2 <WM_DeleteWindow.part.3+0x1d6>
 80175c2:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80175c6:	6203      	str	r3, [r0, #32]
 80175c8:	e7e6      	b.n	8017598 <WM_DeleteWindow.part.3+0x1bc>
 80175ca:	4620      	mov	r0, r4
 80175cc:	f7f8 f9c2 	bl	800f954 <GUI_ALLOC_h2p>
 80175d0:	6a03      	ldr	r3, [r0, #32]
 80175d2:	f8ca 301c 	str.w	r3, [sl, #28]
 80175d6:	e7df      	b.n	8017598 <WM_DeleteWindow.part.3+0x1bc>
 80175d8:	461d      	mov	r5, r3
 80175da:	e72b      	b.n	8017434 <WM_DeleteWindow.part.3+0x58>
 80175dc:	4618      	mov	r0, r3
 80175de:	f7f9 ffdf 	bl	80115a0 <GUI_SelectLayer>
 80175e2:	e7af      	b.n	8017544 <WM_DeleteWindow.part.3+0x168>
 80175e4:	2001      	movs	r0, #1
 80175e6:	e7fa      	b.n	80175de <WM_DeleteWindow.part.3+0x202>
 80175e8:	200308b0 	.word	0x200308b0
 80175ec:	20030894 	.word	0x20030894
 80175f0:	200308b4 	.word	0x200308b4
 80175f4:	200308a4 	.word	0x200308a4
 80175f8:	2002e39c 	.word	0x2002e39c
 80175fc:	200308d8 	.word	0x200308d8
 8017600:	200308d0 	.word	0x200308d0
 8017604:	200308e4 	.word	0x200308e4
 8017608:	2003088c 	.word	0x2003088c
 801760c:	200308ac 	.word	0x200308ac
 8017610:	200000a8 	.word	0x200000a8

08017614 <_Exec1Input>:
 8017614:	b570      	push	{r4, r5, r6, lr}
 8017616:	4e1f      	ldr	r6, [pc, #124]	; (8017694 <_Exec1Input+0x80>)
 8017618:	6873      	ldr	r3, [r6, #4]
 801761a:	b082      	sub	sp, #8
 801761c:	b9cb      	cbnz	r3, 8017652 <_Exec1Input+0x3e>
 801761e:	4b1e      	ldr	r3, [pc, #120]	; (8017698 <_Exec1Input+0x84>)
 8017620:	681b      	ldr	r3, [r3, #0]
 8017622:	b103      	cbz	r3, 8017626 <_Exec1Input+0x12>
 8017624:	4798      	blx	r3
 8017626:	4b1d      	ldr	r3, [pc, #116]	; (801769c <_Exec1Input+0x88>)
 8017628:	681b      	ldr	r3, [r3, #0]
 801762a:	b10b      	cbz	r3, 8017630 <_Exec1Input+0x1c>
 801762c:	4798      	blx	r3
 801762e:	b968      	cbnz	r0, 801764c <_Exec1Input+0x38>
 8017630:	4b1b      	ldr	r3, [pc, #108]	; (80176a0 <_Exec1Input+0x8c>)
 8017632:	681b      	ldr	r3, [r3, #0]
 8017634:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8017638:	b908      	cbnz	r0, 801763e <_Exec1Input+0x2a>
 801763a:	b002      	add	sp, #8
 801763c:	bd70      	pop	{r4, r5, r6, pc}
 801763e:	f7f9 ff6f 	bl	8011520 <GUI_PollKeyMsg>
 8017642:	3000      	adds	r0, #0
 8017644:	bf18      	it	ne
 8017646:	2001      	movne	r0, #1
 8017648:	b002      	add	sp, #8
 801764a:	bd70      	pop	{r4, r5, r6, pc}
 801764c:	2001      	movs	r0, #1
 801764e:	b002      	add	sp, #8
 8017650:	bd70      	pop	{r4, r5, r6, pc}
 8017652:	f7fa f813 	bl	801167c <GUI_Lock>
 8017656:	4b13      	ldr	r3, [pc, #76]	; (80176a4 <_Exec1Input+0x90>)
 8017658:	681c      	ldr	r4, [r3, #0]
 801765a:	b18c      	cbz	r4, 8017680 <_Exec1Input+0x6c>
 801765c:	4620      	mov	r0, r4
 801765e:	f7f8 f983 	bl	800f968 <GUI_ALLOC_LockH>
 8017662:	4603      	mov	r3, r0
 8017664:	9301      	str	r3, [sp, #4]
 8017666:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017668:	0412      	lsls	r2, r2, #16
 801766a:	a801      	add	r0, sp, #4
 801766c:	d50d      	bpl.n	801768a <_Exec1Input+0x76>
 801766e:	695d      	ldr	r5, [r3, #20]
 8017670:	f7f8 f98c 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017674:	4620      	mov	r0, r4
 8017676:	462c      	mov	r4, r5
 8017678:	f7ff feb0 	bl	80173dc <WM_DeleteWindow.part.3>
 801767c:	2c00      	cmp	r4, #0
 801767e:	d1ed      	bne.n	801765c <_Exec1Input+0x48>
 8017680:	2300      	movs	r3, #0
 8017682:	6073      	str	r3, [r6, #4]
 8017684:	f7f9 fff0 	bl	8011668 <GUI_Unlock>
 8017688:	e7c9      	b.n	801761e <_Exec1Input+0xa>
 801768a:	a801      	add	r0, sp, #4
 801768c:	695c      	ldr	r4, [r3, #20]
 801768e:	f7f8 f97d 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017692:	e7e2      	b.n	801765a <_Exec1Input+0x46>
 8017694:	2002e39c 	.word	0x2002e39c
 8017698:	2003089c 	.word	0x2003089c
 801769c:	2003087c 	.word	0x2003087c
 80176a0:	200000a8 	.word	0x200000a8
 80176a4:	200308b0 	.word	0x200308b0

080176a8 <WM__InvalidateParent>:
 80176a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176ac:	4605      	mov	r5, r0
 80176ae:	b086      	sub	sp, #24
 80176b0:	4608      	mov	r0, r1
 80176b2:	460c      	mov	r4, r1
 80176b4:	4617      	mov	r7, r2
 80176b6:	f7f8 f94d 	bl	800f954 <GUI_ALLOC_h2p>
 80176ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80176bc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80176c0:	bf14      	ite	ne
 80176c2:	f44f 4680 	movne.w	r6, #16384	; 0x4000
 80176c6:	2620      	moveq	r6, #32
 80176c8:	b914      	cbnz	r4, 80176d0 <WM__InvalidateParent+0x28>
 80176ca:	b006      	add	sp, #24
 80176cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176d0:	4620      	mov	r0, r4
 80176d2:	f7f8 f949 	bl	800f968 <GUI_ALLOC_LockH>
 80176d6:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 80176da:	9000      	str	r0, [sp, #0]
 80176dc:	f018 0f02 	tst.w	r8, #2
 80176e0:	d041      	beq.n	8017766 <WM__InvalidateParent+0xbe>
 80176e2:	4602      	mov	r2, r0
 80176e4:	4629      	mov	r1, r5
 80176e6:	a802      	add	r0, sp, #8
 80176e8:	f7fa fdc8 	bl	801227c <GUI__IntersectRects>
 80176ec:	2800      	cmp	r0, #0
 80176ee:	d03a      	beq.n	8017766 <WM__InvalidateParent+0xbe>
 80176f0:	f640 0301 	movw	r3, #2049	; 0x801
 80176f4:	ea08 0303 	and.w	r3, r8, r3
 80176f8:	2b01      	cmp	r3, #1
 80176fa:	d044      	beq.n	8017786 <WM__InvalidateParent+0xde>
 80176fc:	4620      	mov	r0, r4
 80176fe:	4632      	mov	r2, r6
 8017700:	a902      	add	r1, sp, #8
 8017702:	f7ff f887 	bl	8016814 <_Invalidate1Abs>
 8017706:	9b00      	ldr	r3, [sp, #0]
 8017708:	69dc      	ldr	r4, [r3, #28]
 801770a:	b364      	cbz	r4, 8017766 <WM__InvalidateParent+0xbe>
 801770c:	42a7      	cmp	r7, r4
 801770e:	d02a      	beq.n	8017766 <WM__InvalidateParent+0xbe>
 8017710:	4620      	mov	r0, r4
 8017712:	f7f8 f929 	bl	800f968 <GUI_ALLOC_LockH>
 8017716:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017718:	9001      	str	r0, [sp, #4]
 801771a:	079b      	lsls	r3, r3, #30
 801771c:	d529      	bpl.n	8017772 <WM__InvalidateParent+0xca>
 801771e:	4602      	mov	r2, r0
 8017720:	a902      	add	r1, sp, #8
 8017722:	a804      	add	r0, sp, #16
 8017724:	f7fa fdaa 	bl	801227c <GUI__IntersectRects>
 8017728:	b318      	cbz	r0, 8017772 <WM__InvalidateParent+0xca>
 801772a:	a801      	add	r0, sp, #4
 801772c:	f7f8 f92e 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017730:	4632      	mov	r2, r6
 8017732:	a904      	add	r1, sp, #16
 8017734:	4620      	mov	r0, r4
 8017736:	f7ff f86d 	bl	8016814 <_Invalidate1Abs>
 801773a:	4620      	mov	r0, r4
 801773c:	f001 fb28 	bl	8018d90 <WM_GetFirstChild>
 8017740:	4605      	mov	r5, r0
 8017742:	b150      	cbz	r0, 801775a <WM__InvalidateParent+0xb2>
 8017744:	4628      	mov	r0, r5
 8017746:	4632      	mov	r2, r6
 8017748:	a904      	add	r1, sp, #16
 801774a:	f7ff fb67 	bl	8016e1c <WM_InvalidateWindowAndDescsEx>
 801774e:	4628      	mov	r0, r5
 8017750:	f7f8 f900 	bl	800f954 <GUI_ALLOC_h2p>
 8017754:	6a05      	ldr	r5, [r0, #32]
 8017756:	2d00      	cmp	r5, #0
 8017758:	d1f4      	bne.n	8017744 <WM__InvalidateParent+0x9c>
 801775a:	4620      	mov	r0, r4
 801775c:	f7f8 f8fa 	bl	800f954 <GUI_ALLOC_h2p>
 8017760:	6a04      	ldr	r4, [r0, #32]
 8017762:	2c00      	cmp	r4, #0
 8017764:	d1d2      	bne.n	801770c <WM__InvalidateParent+0x64>
 8017766:	4668      	mov	r0, sp
 8017768:	f7f8 f910 	bl	800f98c <GUI_ALLOC_UnlockH>
 801776c:	b006      	add	sp, #24
 801776e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017772:	a801      	add	r0, sp, #4
 8017774:	f7f8 f90a 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017778:	4620      	mov	r0, r4
 801777a:	f7f8 f8eb 	bl	800f954 <GUI_ALLOC_h2p>
 801777e:	6a04      	ldr	r4, [r0, #32]
 8017780:	2c00      	cmp	r4, #0
 8017782:	d1c3      	bne.n	801770c <WM__InvalidateParent+0x64>
 8017784:	e7ef      	b.n	8017766 <WM__InvalidateParent+0xbe>
 8017786:	9900      	ldr	r1, [sp, #0]
 8017788:	4633      	mov	r3, r6
 801778a:	6a0a      	ldr	r2, [r1, #32]
 801778c:	6989      	ldr	r1, [r1, #24]
 801778e:	a802      	add	r0, sp, #8
 8017790:	f7ff fcf6 	bl	8017180 <WM__InvalidateRect>
 8017794:	e7b7      	b.n	8017706 <WM__InvalidateParent+0x5e>
 8017796:	bf00      	nop

08017798 <WM__InvalidateRectEx>:
 8017798:	b901      	cbnz	r1, 801779c <WM__InvalidateRectEx+0x4>
 801779a:	4770      	bx	lr
 801779c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801779e:	4605      	mov	r5, r0
 80177a0:	b087      	sub	sp, #28
 80177a2:	4608      	mov	r0, r1
 80177a4:	4616      	mov	r6, r2
 80177a6:	460c      	mov	r4, r1
 80177a8:	f7f8 f8de 	bl	800f968 <GUI_ALLOC_LockH>
 80177ac:	6a87      	ldr	r7, [r0, #40]	; 0x28
 80177ae:	9000      	str	r0, [sp, #0]
 80177b0:	07ba      	lsls	r2, r7, #30
 80177b2:	d540      	bpl.n	8017836 <WM__InvalidateRectEx+0x9e>
 80177b4:	4602      	mov	r2, r0
 80177b6:	4629      	mov	r1, r5
 80177b8:	a802      	add	r0, sp, #8
 80177ba:	f7fa fd5f 	bl	801227c <GUI__IntersectRects>
 80177be:	2800      	cmp	r0, #0
 80177c0:	d039      	beq.n	8017836 <WM__InvalidateRectEx+0x9e>
 80177c2:	f640 0301 	movw	r3, #2049	; 0x801
 80177c6:	403b      	ands	r3, r7
 80177c8:	2b01      	cmp	r3, #1
 80177ca:	d043      	beq.n	8017854 <WM__InvalidateRectEx+0xbc>
 80177cc:	4620      	mov	r0, r4
 80177ce:	2220      	movs	r2, #32
 80177d0:	a902      	add	r1, sp, #8
 80177d2:	f7ff f81f 	bl	8016814 <_Invalidate1Abs>
 80177d6:	9b00      	ldr	r3, [sp, #0]
 80177d8:	69dc      	ldr	r4, [r3, #28]
 80177da:	b364      	cbz	r4, 8017836 <WM__InvalidateRectEx+0x9e>
 80177dc:	42a6      	cmp	r6, r4
 80177de:	d02a      	beq.n	8017836 <WM__InvalidateRectEx+0x9e>
 80177e0:	4620      	mov	r0, r4
 80177e2:	f7f8 f8c1 	bl	800f968 <GUI_ALLOC_LockH>
 80177e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80177e8:	9001      	str	r0, [sp, #4]
 80177ea:	079b      	lsls	r3, r3, #30
 80177ec:	d528      	bpl.n	8017840 <WM__InvalidateRectEx+0xa8>
 80177ee:	4602      	mov	r2, r0
 80177f0:	a902      	add	r1, sp, #8
 80177f2:	a804      	add	r0, sp, #16
 80177f4:	f7fa fd42 	bl	801227c <GUI__IntersectRects>
 80177f8:	b310      	cbz	r0, 8017840 <WM__InvalidateRectEx+0xa8>
 80177fa:	a801      	add	r0, sp, #4
 80177fc:	f7f8 f8c6 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017800:	2220      	movs	r2, #32
 8017802:	a904      	add	r1, sp, #16
 8017804:	4620      	mov	r0, r4
 8017806:	f7ff f805 	bl	8016814 <_Invalidate1Abs>
 801780a:	4620      	mov	r0, r4
 801780c:	f001 fac0 	bl	8018d90 <WM_GetFirstChild>
 8017810:	4605      	mov	r5, r0
 8017812:	b150      	cbz	r0, 801782a <WM__InvalidateRectEx+0x92>
 8017814:	4628      	mov	r0, r5
 8017816:	2220      	movs	r2, #32
 8017818:	a904      	add	r1, sp, #16
 801781a:	f7ff faff 	bl	8016e1c <WM_InvalidateWindowAndDescsEx>
 801781e:	4628      	mov	r0, r5
 8017820:	f7f8 f898 	bl	800f954 <GUI_ALLOC_h2p>
 8017824:	6a05      	ldr	r5, [r0, #32]
 8017826:	2d00      	cmp	r5, #0
 8017828:	d1f4      	bne.n	8017814 <WM__InvalidateRectEx+0x7c>
 801782a:	4620      	mov	r0, r4
 801782c:	f7f8 f892 	bl	800f954 <GUI_ALLOC_h2p>
 8017830:	6a04      	ldr	r4, [r0, #32]
 8017832:	2c00      	cmp	r4, #0
 8017834:	d1d2      	bne.n	80177dc <WM__InvalidateRectEx+0x44>
 8017836:	4668      	mov	r0, sp
 8017838:	f7f8 f8a8 	bl	800f98c <GUI_ALLOC_UnlockH>
 801783c:	b007      	add	sp, #28
 801783e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017840:	a801      	add	r0, sp, #4
 8017842:	f7f8 f8a3 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017846:	4620      	mov	r0, r4
 8017848:	f7f8 f884 	bl	800f954 <GUI_ALLOC_h2p>
 801784c:	6a04      	ldr	r4, [r0, #32]
 801784e:	2c00      	cmp	r4, #0
 8017850:	d1c4      	bne.n	80177dc <WM__InvalidateRectEx+0x44>
 8017852:	e7f0      	b.n	8017836 <WM__InvalidateRectEx+0x9e>
 8017854:	9900      	ldr	r1, [sp, #0]
 8017856:	2320      	movs	r3, #32
 8017858:	6a0a      	ldr	r2, [r1, #32]
 801785a:	6989      	ldr	r1, [r1, #24]
 801785c:	a802      	add	r0, sp, #8
 801785e:	f7ff fc8f 	bl	8017180 <WM__InvalidateRect>
 8017862:	e7b8      	b.n	80177d6 <WM__InvalidateRectEx+0x3e>

08017864 <WM_SendMessage>:
 8017864:	b900      	cbnz	r0, 8017868 <WM_SendMessage+0x4>
 8017866:	4770      	bx	lr
 8017868:	b538      	push	{r3, r4, r5, lr}
 801786a:	4604      	mov	r4, r0
 801786c:	460d      	mov	r5, r1
 801786e:	f7f9 ff05 	bl	801167c <GUI_Lock>
 8017872:	4629      	mov	r1, r5
 8017874:	4620      	mov	r0, r4
 8017876:	f002 fbb1 	bl	8019fdc <WM__SendMessage>
 801787a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801787e:	f7f9 bef3 	b.w	8011668 <GUI_Unlock>
 8017882:	bf00      	nop

08017884 <WM__SendMsgNoData>:
 8017884:	b500      	push	{lr}
 8017886:	b085      	sub	sp, #20
 8017888:	ab04      	add	r3, sp, #16
 801788a:	9001      	str	r0, [sp, #4]
 801788c:	f843 1d10 	str.w	r1, [r3, #-16]!
 8017890:	4619      	mov	r1, r3
 8017892:	f002 fba3 	bl	8019fdc <WM__SendMessage>
 8017896:	b005      	add	sp, #20
 8017898:	f85d fb04 	ldr.w	pc, [sp], #4

0801789c <WM__GetClientRectWin>:
 801789c:	b430      	push	{r4, r5}
 801789e:	2300      	movs	r3, #0
 80178a0:	800b      	strh	r3, [r1, #0]
 80178a2:	804b      	strh	r3, [r1, #2]
 80178a4:	8805      	ldrh	r5, [r0, #0]
 80178a6:	8844      	ldrh	r4, [r0, #2]
 80178a8:	8882      	ldrh	r2, [r0, #4]
 80178aa:	88c3      	ldrh	r3, [r0, #6]
 80178ac:	1b52      	subs	r2, r2, r5
 80178ae:	1b1b      	subs	r3, r3, r4
 80178b0:	808a      	strh	r2, [r1, #4]
 80178b2:	80cb      	strh	r3, [r1, #6]
 80178b4:	bc30      	pop	{r4, r5}
 80178b6:	4770      	bx	lr

080178b8 <WM_InvalidateWindow>:
 80178b8:	b900      	cbnz	r0, 80178bc <WM_InvalidateWindow+0x4>
 80178ba:	4770      	bx	lr
 80178bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178c0:	4607      	mov	r7, r0
 80178c2:	b084      	sub	sp, #16
 80178c4:	f7f9 feda 	bl	801167c <GUI_Lock>
 80178c8:	4638      	mov	r0, r7
 80178ca:	f7f8 f84d 	bl	800f968 <GUI_ALLOC_LockH>
 80178ce:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
 80178d2:	9000      	str	r0, [sp, #0]
 80178d4:	f018 0f02 	tst.w	r8, #2
 80178d8:	d01e      	beq.n	8017918 <WM_InvalidateWindow+0x60>
 80178da:	c803      	ldmia	r0, {r0, r1}
 80178dc:	ae02      	add	r6, sp, #8
 80178de:	f418 3f80 	tst.w	r8, #65536	; 0x10000
 80178e2:	e886 0003 	stmia.w	r6, {r0, r1}
 80178e6:	d11f      	bne.n	8017928 <WM_InvalidateWindow+0x70>
 80178e8:	463d      	mov	r5, r7
 80178ea:	e008      	b.n	80178fe <WM_InvalidateWindow+0x46>
 80178ec:	f7fa fca8 	bl	8012240 <GUI__IntersectRect>
 80178f0:	9b01      	ldr	r3, [sp, #4]
 80178f2:	699c      	ldr	r4, [r3, #24]
 80178f4:	a801      	add	r0, sp, #4
 80178f6:	b1dc      	cbz	r4, 8017930 <WM_InvalidateWindow+0x78>
 80178f8:	f7f8 f848 	bl	800f98c <GUI_ALLOC_UnlockH>
 80178fc:	4625      	mov	r5, r4
 80178fe:	4628      	mov	r0, r5
 8017900:	f7f8 f832 	bl	800f968 <GUI_ALLOC_LockH>
 8017904:	4603      	mov	r3, r0
 8017906:	9301      	str	r3, [sp, #4]
 8017908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801790a:	0793      	lsls	r3, r2, #30
 801790c:	4601      	mov	r1, r0
 801790e:	4630      	mov	r0, r6
 8017910:	d4ec      	bmi.n	80178ec <WM_InvalidateWindow+0x34>
 8017912:	a801      	add	r0, sp, #4
 8017914:	f7f8 f83a 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017918:	4668      	mov	r0, sp
 801791a:	f7f8 f837 	bl	800f98c <GUI_ALLOC_UnlockH>
 801791e:	f7f9 fea3 	bl	8011668 <GUI_Unlock>
 8017922:	b004      	add	sp, #16
 8017924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017928:	4638      	mov	r0, r7
 801792a:	f7ff f925 	bl	8016b78 <WM__InvalidateDrawAndDescs>
 801792e:	e7db      	b.n	80178e8 <WM_InvalidateWindow+0x30>
 8017930:	f7f8 f82c 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017934:	4b0d      	ldr	r3, [pc, #52]	; (801796c <WM_InvalidateWindow+0xb4>)
 8017936:	681a      	ldr	r2, [r3, #0]
 8017938:	4295      	cmp	r5, r2
 801793a:	d002      	beq.n	8017942 <WM_InvalidateWindow+0x8a>
 801793c:	685b      	ldr	r3, [r3, #4]
 801793e:	429d      	cmp	r5, r3
 8017940:	d1ea      	bne.n	8017918 <WM_InvalidateWindow+0x60>
 8017942:	f640 0301 	movw	r3, #2049	; 0x801
 8017946:	ea08 0303 	and.w	r3, r8, r3
 801794a:	2b01      	cmp	r3, #1
 801794c:	d005      	beq.n	801795a <WM_InvalidateWindow+0xa2>
 801794e:	4631      	mov	r1, r6
 8017950:	4638      	mov	r0, r7
 8017952:	2220      	movs	r2, #32
 8017954:	f7fe ff5e 	bl	8016814 <_Invalidate1Abs>
 8017958:	e7de      	b.n	8017918 <WM_InvalidateWindow+0x60>
 801795a:	9b00      	ldr	r3, [sp, #0]
 801795c:	4630      	mov	r0, r6
 801795e:	6a1a      	ldr	r2, [r3, #32]
 8017960:	6999      	ldr	r1, [r3, #24]
 8017962:	2320      	movs	r3, #32
 8017964:	f7ff fc0c 	bl	8017180 <WM__InvalidateRect>
 8017968:	e7d6      	b.n	8017918 <WM_InvalidateWindow+0x60>
 801796a:	bf00      	nop
 801796c:	20030894 	.word	0x20030894

08017970 <WM_CreateWindowAsChild>:
 8017970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017974:	b087      	sub	sp, #28
 8017976:	461e      	mov	r6, r3
 8017978:	4680      	mov	r8, r0
 801797a:	4689      	mov	r9, r1
 801797c:	4615      	mov	r5, r2
 801797e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8017980:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017982:	f7f9 fe7b 	bl	801167c <GUI_Lock>
 8017986:	4b6a      	ldr	r3, [pc, #424]	; (8017b30 <WM_CreateWindowAsChild+0x1c0>)
 8017988:	f8d3 a000 	ldr.w	sl, [r3]
 801798c:	b97f      	cbnz	r7, 80179ae <WM_CreateWindowAsChild+0x3e>
 801798e:	4b69      	ldr	r3, [pc, #420]	; (8017b34 <WM_CreateWindowAsChild+0x1c4>)
 8017990:	881b      	ldrh	r3, [r3, #0]
 8017992:	2b00      	cmp	r3, #0
 8017994:	d170      	bne.n	8017a78 <WM_CreateWindowAsChild+0x108>
 8017996:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801799a:	f7f8 f9ff 	bl	800fd9c <GUI_ALLOC_AllocZero>
 801799e:	4604      	mov	r4, r0
 80179a0:	bb28      	cbnz	r0, 80179ee <WM_CreateWindowAsChild+0x7e>
 80179a2:	f7f9 fe61 	bl	8011668 <GUI_Unlock>
 80179a6:	4620      	mov	r0, r4
 80179a8:	b007      	add	sp, #28
 80179aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179ae:	1c7b      	adds	r3, r7, #1
 80179b0:	d06d      	beq.n	8017a8e <WM_CreateWindowAsChild+0x11e>
 80179b2:	4638      	mov	r0, r7
 80179b4:	f7f7 ffd8 	bl	800f968 <GUI_ALLOC_LockH>
 80179b8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80179bc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80179c0:	9001      	str	r0, [sp, #4]
 80179c2:	4490      	add	r8, r2
 80179c4:	4499      	add	r9, r3
 80179c6:	b91d      	cbnz	r5, 80179d0 <WM_CreateWindowAsChild+0x60>
 80179c8:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 80179cc:	1aad      	subs	r5, r5, r2
 80179ce:	3501      	adds	r5, #1
 80179d0:	b91e      	cbnz	r6, 80179da <WM_CreateWindowAsChild+0x6a>
 80179d2:	f9b0 6006 	ldrsh.w	r6, [r0, #6]
 80179d6:	1af6      	subs	r6, r6, r3
 80179d8:	3601      	adds	r6, #1
 80179da:	a801      	add	r0, sp, #4
 80179dc:	f7f7 ffd6 	bl	800f98c <GUI_ALLOC_UnlockH>
 80179e0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80179e4:	f7f8 f9da 	bl	800fd9c <GUI_ALLOC_AllocZero>
 80179e8:	4604      	mov	r4, r0
 80179ea:	2800      	cmp	r0, #0
 80179ec:	d0d9      	beq.n	80179a2 <WM_CreateWindowAsChild+0x32>
 80179ee:	4a51      	ldr	r2, [pc, #324]	; (8017b34 <WM_CreateWindowAsChild+0x1c4>)
 80179f0:	8813      	ldrh	r3, [r2, #0]
 80179f2:	3301      	adds	r3, #1
 80179f4:	8013      	strh	r3, [r2, #0]
 80179f6:	f7f7 ffb7 	bl	800f968 <GUI_ALLOC_LockH>
 80179fa:	9911      	ldr	r1, [sp, #68]	; 0x44
 80179fc:	4b4e      	ldr	r3, [pc, #312]	; (8017b38 <WM_CreateWindowAsChild+0x1c8>)
 80179fe:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8017a00:	f10d 0b18 	add.w	fp, sp, #24
 8017a04:	ea4a 0a01 	orr.w	sl, sl, r1
 8017a08:	f84b 0d18 	str.w	r0, [fp, #-24]!
 8017a0c:	4445      	add	r5, r8
 8017a0e:	444e      	add	r6, r9
 8017a10:	ea0a 0303 	and.w	r3, sl, r3
 8017a14:	4313      	orrs	r3, r2
 8017a16:	3d01      	subs	r5, #1
 8017a18:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017a1a:	6283      	str	r3, [r0, #40]	; 0x28
 8017a1c:	3e01      	subs	r6, #1
 8017a1e:	8085      	strh	r5, [r0, #4]
 8017a20:	80c6      	strh	r6, [r0, #6]
 8017a22:	6102      	str	r2, [r0, #16]
 8017a24:	f8a0 8000 	strh.w	r8, [r0]
 8017a28:	f8a0 9002 	strh.w	r9, [r0, #2]
 8017a2c:	4658      	mov	r0, fp
 8017a2e:	f7f7 ffad 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017a32:	4b42      	ldr	r3, [pc, #264]	; (8017b3c <WM_CreateWindowAsChild+0x1cc>)
 8017a34:	6818      	ldr	r0, [r3, #0]
 8017a36:	2800      	cmp	r0, #0
 8017a38:	d15b      	bne.n	8017af2 <WM_CreateWindowAsChild+0x182>
 8017a3a:	601c      	str	r4, [r3, #0]
 8017a3c:	4639      	mov	r1, r7
 8017a3e:	4620      	mov	r0, r4
 8017a40:	f7fe fff2 	bl	8016a28 <WM__InsertWindowIntoList>
 8017a44:	f01a 0f20 	tst.w	sl, #32
 8017a48:	d12f      	bne.n	8017aaa <WM_CreateWindowAsChild+0x13a>
 8017a4a:	f01a 0f01 	tst.w	sl, #1
 8017a4e:	d120      	bne.n	8017a92 <WM_CreateWindowAsChild+0x122>
 8017a50:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8017a54:	d125      	bne.n	8017aa2 <WM_CreateWindowAsChild+0x132>
 8017a56:	f01a 0f02 	tst.w	sl, #2
 8017a5a:	d158      	bne.n	8017b0e <WM_CreateWindowAsChild+0x19e>
 8017a5c:	a906      	add	r1, sp, #24
 8017a5e:	2301      	movs	r3, #1
 8017a60:	4620      	mov	r0, r4
 8017a62:	f841 3d10 	str.w	r3, [r1, #-16]!
 8017a66:	9403      	str	r4, [sp, #12]
 8017a68:	f002 fab8 	bl	8019fdc <WM__SendMessage>
 8017a6c:	f7f9 fdfc 	bl	8011668 <GUI_Unlock>
 8017a70:	4620      	mov	r0, r4
 8017a72:	b007      	add	sp, #28
 8017a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a78:	4a31      	ldr	r2, [pc, #196]	; (8017b40 <WM_CreateWindowAsChild+0x1d0>)
 8017a7a:	4b32      	ldr	r3, [pc, #200]	; (8017b44 <WM_CreateWindowAsChild+0x1d4>)
 8017a7c:	6812      	ldr	r2, [r2, #0]
 8017a7e:	7c52      	ldrb	r2, [r2, #17]
 8017a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a84:	1c5a      	adds	r2, r3, #1
 8017a86:	2a01      	cmp	r2, #1
 8017a88:	d985      	bls.n	8017996 <WM_CreateWindowAsChild+0x26>
 8017a8a:	461f      	mov	r7, r3
 8017a8c:	e791      	b.n	80179b2 <WM_CreateWindowAsChild+0x42>
 8017a8e:	2700      	movs	r7, #0
 8017a90:	e781      	b.n	8017996 <WM_CreateWindowAsChild+0x26>
 8017a92:	4a2d      	ldr	r2, [pc, #180]	; (8017b48 <WM_CreateWindowAsChild+0x1d8>)
 8017a94:	6813      	ldr	r3, [r2, #0]
 8017a96:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8017a9a:	f103 0301 	add.w	r3, r3, #1
 8017a9e:	6013      	str	r3, [r2, #0]
 8017aa0:	d0d9      	beq.n	8017a56 <WM_CreateWindowAsChild+0xe6>
 8017aa2:	4620      	mov	r0, r4
 8017aa4:	f001 f8be 	bl	8018c24 <WM_BringToBottom>
 8017aa8:	e7d5      	b.n	8017a56 <WM_CreateWindowAsChild+0xe6>
 8017aaa:	4e25      	ldr	r6, [pc, #148]	; (8017b40 <WM_CreateWindowAsChild+0x1d0>)
 8017aac:	f7f9 fde6 	bl	801167c <GUI_Lock>
 8017ab0:	6833      	ldr	r3, [r6, #0]
 8017ab2:	4625      	mov	r5, r4
 8017ab4:	649c      	str	r4, [r3, #72]	; 0x48
 8017ab6:	e000      	b.n	8017aba <WM_CreateWindowAsChild+0x14a>
 8017ab8:	4605      	mov	r5, r0
 8017aba:	4628      	mov	r0, r5
 8017abc:	f7f7 ff4a 	bl	800f954 <GUI_ALLOC_h2p>
 8017ac0:	6980      	ldr	r0, [r0, #24]
 8017ac2:	2800      	cmp	r0, #0
 8017ac4:	d1f8      	bne.n	8017ab8 <WM_CreateWindowAsChild+0x148>
 8017ac6:	4b1f      	ldr	r3, [pc, #124]	; (8017b44 <WM_CreateWindowAsChild+0x1d4>)
 8017ac8:	681a      	ldr	r2, [r3, #0]
 8017aca:	4295      	cmp	r5, r2
 8017acc:	d01c      	beq.n	8017b08 <WM_CreateWindowAsChild+0x198>
 8017ace:	685b      	ldr	r3, [r3, #4]
 8017ad0:	429d      	cmp	r5, r3
 8017ad2:	d018      	beq.n	8017b06 <WM_CreateWindowAsChild+0x196>
 8017ad4:	f7fb fa1a 	bl	8012f0c <LCD_SetClipRectMax>
 8017ad8:	4620      	mov	r0, r4
 8017ada:	f7f7 ff3b 	bl	800f954 <GUI_ALLOC_h2p>
 8017ade:	6833      	ldr	r3, [r6, #0]
 8017ae0:	f9b0 1000 	ldrsh.w	r1, [r0]
 8017ae4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017ae8:	651a      	str	r2, [r3, #80]	; 0x50
 8017aea:	64d9      	str	r1, [r3, #76]	; 0x4c
 8017aec:	f7f9 fdbc 	bl	8011668 <GUI_Unlock>
 8017af0:	e7ab      	b.n	8017a4a <WM_CreateWindowAsChild+0xda>
 8017af2:	f7f7 ff2f 	bl	800f954 <GUI_ALLOC_h2p>
 8017af6:	4605      	mov	r5, r0
 8017af8:	4620      	mov	r0, r4
 8017afa:	f7f7 ff2b 	bl	800f954 <GUI_ALLOC_h2p>
 8017afe:	696b      	ldr	r3, [r5, #20]
 8017b00:	6143      	str	r3, [r0, #20]
 8017b02:	616c      	str	r4, [r5, #20]
 8017b04:	e79a      	b.n	8017a3c <WM_CreateWindowAsChild+0xcc>
 8017b06:	2001      	movs	r0, #1
 8017b08:	f7f9 fd4a 	bl	80115a0 <GUI_SelectLayer>
 8017b0c:	e7e2      	b.n	8017ad4 <WM_CreateWindowAsChild+0x164>
 8017b0e:	4620      	mov	r0, r4
 8017b10:	f7f7 ff2a 	bl	800f968 <GUI_ALLOC_LockH>
 8017b14:	4603      	mov	r3, r0
 8017b16:	4658      	mov	r0, fp
 8017b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017b1a:	9300      	str	r3, [sp, #0]
 8017b1c:	f042 0202 	orr.w	r2, r2, #2
 8017b20:	629a      	str	r2, [r3, #40]	; 0x28
 8017b22:	f7f7 ff33 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017b26:	2100      	movs	r1, #0
 8017b28:	4620      	mov	r0, r4
 8017b2a:	f7ff fb91 	bl	8017250 <WM_InvalidateRect.part.2>
 8017b2e:	e795      	b.n	8017a5c <WM_CreateWindowAsChild+0xec>
 8017b30:	200308c4 	.word	0x200308c4
 8017b34:	2003088c 	.word	0x2003088c
 8017b38:	003f3f9f 	.word	0x003f3f9f
 8017b3c:	200308b0 	.word	0x200308b0
 8017b40:	200000a8 	.word	0x200000a8
 8017b44:	20030894 	.word	0x20030894
 8017b48:	200308e4 	.word	0x200308e4

08017b4c <WM_CreateWindow>:
 8017b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b50:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8017d1c <WM_CreateWindow+0x1d0>
 8017b54:	b087      	sub	sp, #28
 8017b56:	461d      	mov	r5, r3
 8017b58:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8017b5a:	4682      	mov	sl, r0
 8017b5c:	4689      	mov	r9, r1
 8017b5e:	4616      	mov	r6, r2
 8017b60:	f7f9 fd8c 	bl	801167c <GUI_Lock>
 8017b64:	4b67      	ldr	r3, [pc, #412]	; (8017d04 <WM_CreateWindow+0x1b8>)
 8017b66:	f8b8 4000 	ldrh.w	r4, [r8]
 8017b6a:	f8d3 b000 	ldr.w	fp, [r3]
 8017b6e:	b14c      	cbz	r4, 8017b84 <WM_CreateWindow+0x38>
 8017b70:	4a65      	ldr	r2, [pc, #404]	; (8017d08 <WM_CreateWindow+0x1bc>)
 8017b72:	4b66      	ldr	r3, [pc, #408]	; (8017d0c <WM_CreateWindow+0x1c0>)
 8017b74:	6812      	ldr	r2, [r2, #0]
 8017b76:	7c52      	ldrb	r2, [r2, #17]
 8017b78:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8017b7c:	1c63      	adds	r3, r4, #1
 8017b7e:	2b01      	cmp	r3, #1
 8017b80:	d80c      	bhi.n	8017b9c <WM_CreateWindow+0x50>
 8017b82:	2400      	movs	r4, #0
 8017b84:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017b88:	f7f8 f908 	bl	800fd9c <GUI_ALLOC_AllocZero>
 8017b8c:	4607      	mov	r7, r0
 8017b8e:	bb18      	cbnz	r0, 8017bd8 <WM_CreateWindow+0x8c>
 8017b90:	f7f9 fd6a 	bl	8011668 <GUI_Unlock>
 8017b94:	4638      	mov	r0, r7
 8017b96:	b007      	add	sp, #28
 8017b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b9c:	4620      	mov	r0, r4
 8017b9e:	f7f7 fee3 	bl	800f968 <GUI_ALLOC_LockH>
 8017ba2:	f9b0 2000 	ldrsh.w	r2, [r0]
 8017ba6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017baa:	9001      	str	r0, [sp, #4]
 8017bac:	4492      	add	sl, r2
 8017bae:	4499      	add	r9, r3
 8017bb0:	b91e      	cbnz	r6, 8017bba <WM_CreateWindow+0x6e>
 8017bb2:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8017bb6:	1ab6      	subs	r6, r6, r2
 8017bb8:	3601      	adds	r6, #1
 8017bba:	b91d      	cbnz	r5, 8017bc4 <WM_CreateWindow+0x78>
 8017bbc:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 8017bc0:	1aed      	subs	r5, r5, r3
 8017bc2:	3501      	adds	r5, #1
 8017bc4:	a801      	add	r0, sp, #4
 8017bc6:	f7f7 fee1 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017bca:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8017bce:	f7f8 f8e5 	bl	800fd9c <GUI_ALLOC_AllocZero>
 8017bd2:	4607      	mov	r7, r0
 8017bd4:	2800      	cmp	r0, #0
 8017bd6:	d0db      	beq.n	8017b90 <WM_CreateWindow+0x44>
 8017bd8:	f8b8 3000 	ldrh.w	r3, [r8]
 8017bdc:	3301      	adds	r3, #1
 8017bde:	f8a8 3000 	strh.w	r3, [r8]
 8017be2:	f7f7 fec1 	bl	800f968 <GUI_ALLOC_LockH>
 8017be6:	9910      	ldr	r1, [sp, #64]	; 0x40
 8017be8:	4a49      	ldr	r2, [pc, #292]	; (8017d10 <WM_CreateWindow+0x1c4>)
 8017bea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8017bec:	f10d 0818 	add.w	r8, sp, #24
 8017bf0:	ea41 0b0b 	orr.w	fp, r1, fp
 8017bf4:	f848 0d18 	str.w	r0, [r8, #-24]!
 8017bf8:	ea0b 0202 	and.w	r2, fp, r2
 8017bfc:	4456      	add	r6, sl
 8017bfe:	444d      	add	r5, r9
 8017c00:	4313      	orrs	r3, r2
 8017c02:	3e01      	subs	r6, #1
 8017c04:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017c06:	6283      	str	r3, [r0, #40]	; 0x28
 8017c08:	3d01      	subs	r5, #1
 8017c0a:	8086      	strh	r6, [r0, #4]
 8017c0c:	80c5      	strh	r5, [r0, #6]
 8017c0e:	6102      	str	r2, [r0, #16]
 8017c10:	f8a0 a000 	strh.w	sl, [r0]
 8017c14:	f8a0 9002 	strh.w	r9, [r0, #2]
 8017c18:	4640      	mov	r0, r8
 8017c1a:	f7f7 feb7 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017c1e:	4b3d      	ldr	r3, [pc, #244]	; (8017d14 <WM_CreateWindow+0x1c8>)
 8017c20:	6818      	ldr	r0, [r3, #0]
 8017c22:	2800      	cmp	r0, #0
 8017c24:	d14e      	bne.n	8017cc4 <WM_CreateWindow+0x178>
 8017c26:	601f      	str	r7, [r3, #0]
 8017c28:	4621      	mov	r1, r4
 8017c2a:	4638      	mov	r0, r7
 8017c2c:	f7fe fefc 	bl	8016a28 <WM__InsertWindowIntoList>
 8017c30:	f01b 0f20 	tst.w	fp, #32
 8017c34:	d122      	bne.n	8017c7c <WM_CreateWindow+0x130>
 8017c36:	f01b 0f01 	tst.w	fp, #1
 8017c3a:	d113      	bne.n	8017c64 <WM_CreateWindow+0x118>
 8017c3c:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8017c40:	d118      	bne.n	8017c74 <WM_CreateWindow+0x128>
 8017c42:	f01b 0f02 	tst.w	fp, #2
 8017c46:	d14b      	bne.n	8017ce0 <WM_CreateWindow+0x194>
 8017c48:	a906      	add	r1, sp, #24
 8017c4a:	2301      	movs	r3, #1
 8017c4c:	4638      	mov	r0, r7
 8017c4e:	f841 3d10 	str.w	r3, [r1, #-16]!
 8017c52:	9703      	str	r7, [sp, #12]
 8017c54:	f002 f9c2 	bl	8019fdc <WM__SendMessage>
 8017c58:	f7f9 fd06 	bl	8011668 <GUI_Unlock>
 8017c5c:	4638      	mov	r0, r7
 8017c5e:	b007      	add	sp, #28
 8017c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c64:	4a2c      	ldr	r2, [pc, #176]	; (8017d18 <WM_CreateWindow+0x1cc>)
 8017c66:	6813      	ldr	r3, [r2, #0]
 8017c68:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8017c6c:	f103 0301 	add.w	r3, r3, #1
 8017c70:	6013      	str	r3, [r2, #0]
 8017c72:	d0e6      	beq.n	8017c42 <WM_CreateWindow+0xf6>
 8017c74:	4638      	mov	r0, r7
 8017c76:	f000 ffd5 	bl	8018c24 <WM_BringToBottom>
 8017c7a:	e7e2      	b.n	8017c42 <WM_CreateWindow+0xf6>
 8017c7c:	4d22      	ldr	r5, [pc, #136]	; (8017d08 <WM_CreateWindow+0x1bc>)
 8017c7e:	f7f9 fcfd 	bl	801167c <GUI_Lock>
 8017c82:	682b      	ldr	r3, [r5, #0]
 8017c84:	463c      	mov	r4, r7
 8017c86:	649f      	str	r7, [r3, #72]	; 0x48
 8017c88:	e000      	b.n	8017c8c <WM_CreateWindow+0x140>
 8017c8a:	4604      	mov	r4, r0
 8017c8c:	4620      	mov	r0, r4
 8017c8e:	f7f7 fe61 	bl	800f954 <GUI_ALLOC_h2p>
 8017c92:	6980      	ldr	r0, [r0, #24]
 8017c94:	2800      	cmp	r0, #0
 8017c96:	d1f8      	bne.n	8017c8a <WM_CreateWindow+0x13e>
 8017c98:	4b1c      	ldr	r3, [pc, #112]	; (8017d0c <WM_CreateWindow+0x1c0>)
 8017c9a:	681a      	ldr	r2, [r3, #0]
 8017c9c:	4294      	cmp	r4, r2
 8017c9e:	d01c      	beq.n	8017cda <WM_CreateWindow+0x18e>
 8017ca0:	685b      	ldr	r3, [r3, #4]
 8017ca2:	429c      	cmp	r4, r3
 8017ca4:	d018      	beq.n	8017cd8 <WM_CreateWindow+0x18c>
 8017ca6:	f7fb f931 	bl	8012f0c <LCD_SetClipRectMax>
 8017caa:	4638      	mov	r0, r7
 8017cac:	f7f7 fe52 	bl	800f954 <GUI_ALLOC_h2p>
 8017cb0:	682b      	ldr	r3, [r5, #0]
 8017cb2:	f9b0 1000 	ldrsh.w	r1, [r0]
 8017cb6:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8017cba:	651a      	str	r2, [r3, #80]	; 0x50
 8017cbc:	64d9      	str	r1, [r3, #76]	; 0x4c
 8017cbe:	f7f9 fcd3 	bl	8011668 <GUI_Unlock>
 8017cc2:	e7b8      	b.n	8017c36 <WM_CreateWindow+0xea>
 8017cc4:	f7f7 fe46 	bl	800f954 <GUI_ALLOC_h2p>
 8017cc8:	4605      	mov	r5, r0
 8017cca:	4638      	mov	r0, r7
 8017ccc:	f7f7 fe42 	bl	800f954 <GUI_ALLOC_h2p>
 8017cd0:	696b      	ldr	r3, [r5, #20]
 8017cd2:	6143      	str	r3, [r0, #20]
 8017cd4:	616f      	str	r7, [r5, #20]
 8017cd6:	e7a7      	b.n	8017c28 <WM_CreateWindow+0xdc>
 8017cd8:	2001      	movs	r0, #1
 8017cda:	f7f9 fc61 	bl	80115a0 <GUI_SelectLayer>
 8017cde:	e7e2      	b.n	8017ca6 <WM_CreateWindow+0x15a>
 8017ce0:	4638      	mov	r0, r7
 8017ce2:	f7f7 fe41 	bl	800f968 <GUI_ALLOC_LockH>
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	4640      	mov	r0, r8
 8017cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017cec:	9300      	str	r3, [sp, #0]
 8017cee:	f042 0202 	orr.w	r2, r2, #2
 8017cf2:	629a      	str	r2, [r3, #40]	; 0x28
 8017cf4:	f7f7 fe4a 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017cf8:	2100      	movs	r1, #0
 8017cfa:	4638      	mov	r0, r7
 8017cfc:	f7ff faa8 	bl	8017250 <WM_InvalidateRect.part.2>
 8017d00:	e7a2      	b.n	8017c48 <WM_CreateWindow+0xfc>
 8017d02:	bf00      	nop
 8017d04:	200308c4 	.word	0x200308c4
 8017d08:	200000a8 	.word	0x200000a8
 8017d0c:	20030894 	.word	0x20030894
 8017d10:	003f3f9f 	.word	0x003f3f9f
 8017d14:	200308b0 	.word	0x200308b0
 8017d18:	200308e4 	.word	0x200308e4
 8017d1c:	2003088c 	.word	0x2003088c

08017d20 <WM_DeleteWindow>:
 8017d20:	b900      	cbnz	r0, 8017d24 <WM_DeleteWindow+0x4>
 8017d22:	4770      	bx	lr
 8017d24:	f7ff bb5a 	b.w	80173dc <WM_DeleteWindow.part.3>

08017d28 <WM__GetTopLevelLayer>:
 8017d28:	b510      	push	{r4, lr}
 8017d2a:	4604      	mov	r4, r0
 8017d2c:	e000      	b.n	8017d30 <WM__GetTopLevelLayer+0x8>
 8017d2e:	461c      	mov	r4, r3
 8017d30:	4620      	mov	r0, r4
 8017d32:	f7f7 fe0f 	bl	800f954 <GUI_ALLOC_h2p>
 8017d36:	6983      	ldr	r3, [r0, #24]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d1f8      	bne.n	8017d2e <WM__GetTopLevelLayer+0x6>
 8017d3c:	4a06      	ldr	r2, [pc, #24]	; (8017d58 <WM__GetTopLevelLayer+0x30>)
 8017d3e:	6811      	ldr	r1, [r2, #0]
 8017d40:	428c      	cmp	r4, r1
 8017d42:	d006      	beq.n	8017d52 <WM__GetTopLevelLayer+0x2a>
 8017d44:	6853      	ldr	r3, [r2, #4]
 8017d46:	429c      	cmp	r4, r3
 8017d48:	bf0c      	ite	eq
 8017d4a:	2001      	moveq	r0, #1
 8017d4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8017d50:	bd10      	pop	{r4, pc}
 8017d52:	4618      	mov	r0, r3
 8017d54:	bd10      	pop	{r4, pc}
 8017d56:	bf00      	nop
 8017d58:	20030894 	.word	0x20030894

08017d5c <WM_GetActiveWindow>:
 8017d5c:	4b01      	ldr	r3, [pc, #4]	; (8017d64 <WM_GetActiveWindow+0x8>)
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8017d62:	4770      	bx	lr
 8017d64:	200000a8 	.word	0x200000a8

08017d68 <WM__GetNextIVR>:
 8017d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017d6c:	f8df 8240 	ldr.w	r8, [pc, #576]	; 8017fb0 <WM__GetNextIVR+0x248>
 8017d70:	f8d8 3000 	ldr.w	r3, [r8]
 8017d74:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8017d78:	b087      	sub	sp, #28
 8017d7a:	b130      	cbz	r0, 8017d8a <WM__GetNextIVR+0x22>
 8017d7c:	4e8b      	ldr	r6, [pc, #556]	; (8017fac <WM__GetNextIVR+0x244>)
 8017d7e:	6a33      	ldr	r3, [r6, #32]
 8017d80:	2b01      	cmp	r3, #1
 8017d82:	dd05      	ble.n	8017d90 <WM__GetNextIVR+0x28>
 8017d84:	3b01      	subs	r3, #1
 8017d86:	6233      	str	r3, [r6, #32]
 8017d88:	2000      	movs	r0, #0
 8017d8a:	b007      	add	sp, #28
 8017d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017d90:	f106 0714 	add.w	r7, r6, #20
 8017d94:	69f3      	ldr	r3, [r6, #28]
 8017d96:	e897 0003 	ldmia.w	r7, {r0, r1}
 8017d9a:	ad02      	add	r5, sp, #8
 8017d9c:	3301      	adds	r3, #1
 8017d9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8017da2:	61f3      	str	r3, [r6, #28]
 8017da4:	b953      	cbnz	r3, 8017dbc <WM__GetNextIVR+0x54>
 8017da6:	68f3      	ldr	r3, [r6, #12]
 8017da8:	9302      	str	r3, [sp, #8]
 8017daa:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 8017dae:	f9b6 2012 	ldrsh.w	r2, [r6, #18]
 8017db2:	4c7e      	ldr	r4, [pc, #504]	; (8017fac <WM__GetNextIVR+0x244>)
 8017db4:	429a      	cmp	r2, r3
 8017db6:	da17      	bge.n	8017de8 <WM__GetNextIVR+0x80>
 8017db8:	6a33      	ldr	r3, [r6, #32]
 8017dba:	e7e3      	b.n	8017d84 <WM__GetNextIVR+0x1c>
 8017dbc:	8b32      	ldrh	r2, [r6, #24]
 8017dbe:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 8017dc2:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
 8017dc6:	f8ad 300a 	strh.w	r3, [sp, #10]
 8017dca:	3201      	adds	r2, #1
 8017dcc:	b212      	sxth	r2, r2
 8017dce:	4291      	cmp	r1, r2
 8017dd0:	f8ad 2008 	strh.w	r2, [sp, #8]
 8017dd4:	daeb      	bge.n	8017dae <WM__GetNextIVR+0x46>
 8017dd6:	8b73      	ldrh	r3, [r6, #26]
 8017dd8:	89b2      	ldrh	r2, [r6, #12]
 8017dda:	f8ad 2008 	strh.w	r2, [sp, #8]
 8017dde:	3301      	adds	r3, #1
 8017de0:	b21b      	sxth	r3, r3
 8017de2:	f8ad 300a 	strh.w	r3, [sp, #10]
 8017de6:	e7e2      	b.n	8017dae <WM__GetNextIVR+0x46>
 8017de8:	f8d8 3000 	ldr.w	r3, [r8]
 8017dec:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8017fb0 <WM__GetNextIVR+0x248>
 8017df0:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8017df2:	f7f7 fdb9 	bl	800f968 <GUI_ALLOC_LockH>
 8017df6:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8017dfa:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8017dfe:	9000      	str	r0, [sp, #0]
 8017e00:	4299      	cmp	r1, r3
 8017e02:	4602      	mov	r2, r0
 8017e04:	f000 80b9 	beq.w	8017f7a <WM__GetNextIVR+0x212>
 8017e08:	f8d8 2000 	ldr.w	r2, [r8]
 8017e0c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017e10:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8017e12:	b910      	cbnz	r0, 8017e1a <WM__GetNextIVR+0xb2>
 8017e14:	e00d      	b.n	8017e32 <WM__GetNextIVR+0xca>
 8017e16:	69a0      	ldr	r0, [r4, #24]
 8017e18:	b158      	cbz	r0, 8017e32 <WM__GetNextIVR+0xca>
 8017e1a:	f7f7 fd9b 	bl	800f954 <GUI_ALLOC_h2p>
 8017e1e:	4629      	mov	r1, r5
 8017e20:	4604      	mov	r4, r0
 8017e22:	6a00      	ldr	r0, [r0, #32]
 8017e24:	f7fe fbd4 	bl	80165d0 <_Findx0.constprop.10>
 8017e28:	2800      	cmp	r0, #0
 8017e2a:	d0f4      	beq.n	8017e16 <WM__GetNextIVR+0xae>
 8017e2c:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8017e30:	e7ea      	b.n	8017e08 <WM__GetNextIVR+0xa0>
 8017e32:	9b00      	ldr	r3, [sp, #0]
 8017e34:	4629      	mov	r1, r5
 8017e36:	69d8      	ldr	r0, [r3, #28]
 8017e38:	f7fe fbca 	bl	80165d0 <_Findx0.constprop.10>
 8017e3c:	2800      	cmp	r0, #0
 8017e3e:	d1f5      	bne.n	8017e2c <WM__GetNextIVR+0xc4>
 8017e40:	f9b6 3010 	ldrsh.w	r3, [r6, #16]
 8017e44:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8017e48:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017e4c:	429a      	cmp	r2, r3
 8017e4e:	f300 808c 	bgt.w	8017f6a <WM__GetNextIVR+0x202>
 8017e52:	f8d8 3000 	ldr.w	r3, [r8]
 8017e56:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8017e58:	f10d 0810 	add.w	r8, sp, #16
 8017e5c:	b368      	cbz	r0, 8017eba <WM__GetNextIVR+0x152>
 8017e5e:	f7f7 fd79 	bl	800f954 <GUI_ALLOC_h2p>
 8017e62:	6a04      	ldr	r4, [r0, #32]
 8017e64:	4681      	mov	r9, r0
 8017e66:	b96c      	cbnz	r4, 8017e84 <WM__GetNextIVR+0x11c>
 8017e68:	e023      	b.n	8017eb2 <WM__GetNextIVR+0x14a>
 8017e6a:	07e1      	lsls	r1, r4, #31
 8017e6c:	d44b      	bmi.n	8017f06 <WM__GetNextIVR+0x19e>
 8017e6e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017e72:	9801      	ldr	r0, [sp, #4]
 8017e74:	3b01      	subs	r3, #1
 8017e76:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017e7a:	6a04      	ldr	r4, [r0, #32]
 8017e7c:	a801      	add	r0, sp, #4
 8017e7e:	f7f7 fd85 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017e82:	b1b4      	cbz	r4, 8017eb2 <WM__GetNextIVR+0x14a>
 8017e84:	4620      	mov	r0, r4
 8017e86:	f7f7 fd6f 	bl	800f968 <GUI_ALLOC_LockH>
 8017e8a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017e8c:	9001      	str	r0, [sp, #4]
 8017e8e:	07a3      	lsls	r3, r4, #30
 8017e90:	d5f3      	bpl.n	8017e7a <WM__GetNextIVR+0x112>
 8017e92:	c803      	ldmia	r0, {r0, r1}
 8017e94:	e888 0003 	stmia.w	r8, {r0, r1}
 8017e98:	4641      	mov	r1, r8
 8017e9a:	4628      	mov	r0, r5
 8017e9c:	f7f8 f9ee 	bl	801027c <GUI_RectsIntersect>
 8017ea0:	2800      	cmp	r0, #0
 8017ea2:	d1e2      	bne.n	8017e6a <WM__GetNextIVR+0x102>
 8017ea4:	9801      	ldr	r0, [sp, #4]
 8017ea6:	6a04      	ldr	r4, [r0, #32]
 8017ea8:	a801      	add	r0, sp, #4
 8017eaa:	f7f7 fd6f 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017eae:	2c00      	cmp	r4, #0
 8017eb0:	d1e8      	bne.n	8017e84 <WM__GetNextIVR+0x11c>
 8017eb2:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8017eb6:	2800      	cmp	r0, #0
 8017eb8:	d1d1      	bne.n	8017e5e <WM__GetNextIVR+0xf6>
 8017eba:	9b00      	ldr	r3, [sp, #0]
 8017ebc:	69dc      	ldr	r4, [r3, #28]
 8017ebe:	f10d 0810 	add.w	r8, sp, #16
 8017ec2:	b974      	cbnz	r4, 8017ee2 <WM__GetNextIVR+0x17a>
 8017ec4:	e040      	b.n	8017f48 <WM__GetNextIVR+0x1e0>
 8017ec6:	07e3      	lsls	r3, r4, #31
 8017ec8:	d42e      	bmi.n	8017f28 <WM__GetNextIVR+0x1c0>
 8017eca:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8017ece:	9801      	ldr	r0, [sp, #4]
 8017ed0:	3b01      	subs	r3, #1
 8017ed2:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017ed6:	6a04      	ldr	r4, [r0, #32]
 8017ed8:	a801      	add	r0, sp, #4
 8017eda:	f7f7 fd57 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017ede:	2c00      	cmp	r4, #0
 8017ee0:	d032      	beq.n	8017f48 <WM__GetNextIVR+0x1e0>
 8017ee2:	4620      	mov	r0, r4
 8017ee4:	f7f7 fd40 	bl	800f968 <GUI_ALLOC_LockH>
 8017ee8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8017eea:	9001      	str	r0, [sp, #4]
 8017eec:	07a2      	lsls	r2, r4, #30
 8017eee:	d5f2      	bpl.n	8017ed6 <WM__GetNextIVR+0x16e>
 8017ef0:	c803      	ldmia	r0, {r0, r1}
 8017ef2:	e888 0003 	stmia.w	r8, {r0, r1}
 8017ef6:	4641      	mov	r1, r8
 8017ef8:	4628      	mov	r0, r5
 8017efa:	f7f8 f9bf 	bl	801027c <GUI_RectsIntersect>
 8017efe:	2800      	cmp	r0, #0
 8017f00:	d1e1      	bne.n	8017ec6 <WM__GetNextIVR+0x15e>
 8017f02:	9801      	ldr	r0, [sp, #4]
 8017f04:	e7e7      	b.n	8017ed6 <WM__GetNextIVR+0x16e>
 8017f06:	9801      	ldr	r0, [sp, #4]
 8017f08:	69c4      	ldr	r4, [r0, #28]
 8017f0a:	2c00      	cmp	r4, #0
 8017f0c:	d0b5      	beq.n	8017e7a <WM__GetNextIVR+0x112>
 8017f0e:	4620      	mov	r0, r4
 8017f10:	4642      	mov	r2, r8
 8017f12:	4629      	mov	r1, r5
 8017f14:	f7fe fa4a 	bl	80163ac <_Findx1>
 8017f18:	4620      	mov	r0, r4
 8017f1a:	f7f7 fd1b 	bl	800f954 <GUI_ALLOC_h2p>
 8017f1e:	6a04      	ldr	r4, [r0, #32]
 8017f20:	2c00      	cmp	r4, #0
 8017f22:	d1f4      	bne.n	8017f0e <WM__GetNextIVR+0x1a6>
 8017f24:	9801      	ldr	r0, [sp, #4]
 8017f26:	e7be      	b.n	8017ea6 <WM__GetNextIVR+0x13e>
 8017f28:	9801      	ldr	r0, [sp, #4]
 8017f2a:	69c4      	ldr	r4, [r0, #28]
 8017f2c:	2c00      	cmp	r4, #0
 8017f2e:	d0d2      	beq.n	8017ed6 <WM__GetNextIVR+0x16e>
 8017f30:	4620      	mov	r0, r4
 8017f32:	4642      	mov	r2, r8
 8017f34:	4629      	mov	r1, r5
 8017f36:	f7fe fa39 	bl	80163ac <_Findx1>
 8017f3a:	4620      	mov	r0, r4
 8017f3c:	f7f7 fd0a 	bl	800f954 <GUI_ALLOC_h2p>
 8017f40:	6a04      	ldr	r4, [r0, #32]
 8017f42:	2c00      	cmp	r4, #0
 8017f44:	d1f4      	bne.n	8017f30 <WM__GetNextIVR+0x1c8>
 8017f46:	e7dc      	b.n	8017f02 <WM__GetNextIVR+0x19a>
 8017f48:	4668      	mov	r0, sp
 8017f4a:	f7f7 fd1f 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017f4e:	69f2      	ldr	r2, [r6, #28]
 8017f50:	f644 6320 	movw	r3, #20000	; 0x4e20
 8017f54:	429a      	cmp	r2, r3
 8017f56:	f73f af2f 	bgt.w	8017db8 <WM__GetNextIVR+0x50>
 8017f5a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017f5e:	e887 0003 	stmia.w	r7, {r0, r1}
 8017f62:	f7fe fccd 	bl	8016900 <WM__ActivateClipRect>
 8017f66:	2001      	movs	r0, #1
 8017f68:	e70f      	b.n	8017d8a <WM__GetNextIVR+0x22>
 8017f6a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017f6e:	e887 0003 	stmia.w	r7, {r0, r1}
 8017f72:	4668      	mov	r0, sp
 8017f74:	f7f7 fd0a 	bl	800f98c <GUI_ALLOC_UnlockH>
 8017f78:	e72d      	b.n	8017dd6 <WM__GetNextIVR+0x6e>
 8017f7a:	f8d9 1000 	ldr.w	r1, [r9]
 8017f7e:	6923      	ldr	r3, [r4, #16]
 8017f80:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8017f82:	9303      	str	r3, [sp, #12]
 8017f84:	b150      	cbz	r0, 8017f9c <WM__GetNextIVR+0x234>
 8017f86:	f7f7 fce5 	bl	800f954 <GUI_ALLOC_h2p>
 8017f8a:	4604      	mov	r4, r0
 8017f8c:	4629      	mov	r1, r5
 8017f8e:	6a00      	ldr	r0, [r0, #32]
 8017f90:	f7fe fb64 	bl	801665c <_Findy1.constprop.11>
 8017f94:	69a0      	ldr	r0, [r4, #24]
 8017f96:	2800      	cmp	r0, #0
 8017f98:	d1f5      	bne.n	8017f86 <WM__GetNextIVR+0x21e>
 8017f9a:	9a00      	ldr	r2, [sp, #0]
 8017f9c:	69d0      	ldr	r0, [r2, #28]
 8017f9e:	4629      	mov	r1, r5
 8017fa0:	f7fe fb5c 	bl	801665c <_Findy1.constprop.11>
 8017fa4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8017fa8:	e72e      	b.n	8017e08 <WM__GetNextIVR+0xa0>
 8017faa:	bf00      	nop
 8017fac:	2002e39c 	.word	0x2002e39c
 8017fb0:	200000a8 	.word	0x200000a8

08017fb4 <WM__InitIVRSearch>:
 8017fb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017fb8:	4c5e      	ldr	r4, [pc, #376]	; (8018134 <WM__InitIVRSearch+0x180>)
 8017fba:	6822      	ldr	r2, [r4, #0]
 8017fbc:	f892 3054 	ldrb.w	r3, [r2, #84]	; 0x54
 8017fc0:	b089      	sub	sp, #36	; 0x24
 8017fc2:	b14b      	cbz	r3, 8017fd8 <WM__InitIVRSearch+0x24>
 8017fc4:	4d5c      	ldr	r5, [pc, #368]	; (8018138 <WM__InitIVRSearch+0x184>)
 8017fc6:	6a2b      	ldr	r3, [r5, #32]
 8017fc8:	3301      	adds	r3, #1
 8017fca:	2b01      	cmp	r3, #1
 8017fcc:	622b      	str	r3, [r5, #32]
 8017fce:	dd09      	ble.n	8017fe4 <WM__InitIVRSearch+0x30>
 8017fd0:	2001      	movs	r0, #1
 8017fd2:	b009      	add	sp, #36	; 0x24
 8017fd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fd8:	f7fe fc92 	bl	8016900 <WM__ActivateClipRect>
 8017fdc:	2001      	movs	r0, #1
 8017fde:	b009      	add	sp, #36	; 0x24
 8017fe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fe4:	4607      	mov	r7, r0
 8017fe6:	6c90      	ldr	r0, [r2, #72]	; 0x48
 8017fe8:	f7f7 fcbe 	bl	800f968 <GUI_ALLOC_LockH>
 8017fec:	4b53      	ldr	r3, [pc, #332]	; (801813c <WM__InitIVRSearch+0x188>)
 8017fee:	9001      	str	r0, [sp, #4]
 8017ff0:	781b      	ldrb	r3, [r3, #0]
 8017ff2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017ff6:	61ea      	str	r2, [r5, #28]
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d061      	beq.n	80180c0 <WM__InitIVRSearch+0x10c>
 8017ffc:	3008      	adds	r0, #8
 8017ffe:	c803      	ldmia	r0, {r0, r1}
 8018000:	ae04      	add	r6, sp, #16
 8018002:	e886 0003 	stmia.w	r6, {r0, r1}
 8018006:	b11f      	cbz	r7, 8018010 <WM__InitIVRSearch+0x5c>
 8018008:	4639      	mov	r1, r7
 801800a:	4630      	mov	r0, r6
 801800c:	f7fa f918 	bl	8012240 <GUI__IntersectRect>
 8018010:	6823      	ldr	r3, [r4, #0]
 8018012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018014:	2b00      	cmp	r3, #0
 8018016:	f000 8087 	beq.w	8018128 <WM__InitIVRSearch+0x174>
 801801a:	4f49      	ldr	r7, [pc, #292]	; (8018140 <WM__InitIVRSearch+0x18c>)
 801801c:	6818      	ldr	r0, [r3, #0]
 801801e:	6859      	ldr	r1, [r3, #4]
 8018020:	683a      	ldr	r2, [r7, #0]
 8018022:	ab06      	add	r3, sp, #24
 8018024:	c303      	stmia	r3!, {r0, r1}
 8018026:	9801      	ldr	r0, [sp, #4]
 8018028:	9002      	str	r0, [sp, #8]
 801802a:	f10d 0808 	add.w	r8, sp, #8
 801802e:	2a00      	cmp	r2, #0
 8018030:	d160      	bne.n	80180f4 <WM__InitIVRSearch+0x140>
 8018032:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018036:	f9b0 1000 	ldrsh.w	r1, [r0]
 801803a:	a806      	add	r0, sp, #24
 801803c:	f7f8 f86c 	bl	8010118 <GUI_MoveRect>
 8018040:	4630      	mov	r0, r6
 8018042:	a906      	add	r1, sp, #24
 8018044:	f7fa f8fc 	bl	8012240 <GUI__IntersectRect>
 8018048:	4640      	mov	r0, r8
 801804a:	f7f7 fc9f 	bl	800f98c <GUI_ALLOC_UnlockH>
 801804e:	f8d7 9000 	ldr.w	r9, [r7]
 8018052:	f10d 080c 	add.w	r8, sp, #12
 8018056:	f1b9 0f00 	cmp.w	r9, #0
 801805a:	d126      	bne.n	80180aa <WM__InitIVRSearch+0xf6>
 801805c:	6823      	ldr	r3, [r4, #0]
 801805e:	6c9f      	ldr	r7, [r3, #72]	; 0x48
 8018060:	e008      	b.n	8018074 <WM__InitIVRSearch+0xc0>
 8018062:	f7fa f8ed 	bl	8012240 <GUI__IntersectRect>
 8018066:	9b03      	ldr	r3, [sp, #12]
 8018068:	699c      	ldr	r4, [r3, #24]
 801806a:	4640      	mov	r0, r8
 801806c:	b38c      	cbz	r4, 80180d2 <WM__InitIVRSearch+0x11e>
 801806e:	f7f7 fc8d 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018072:	4627      	mov	r7, r4
 8018074:	4638      	mov	r0, r7
 8018076:	f7f7 fc77 	bl	800f968 <GUI_ALLOC_LockH>
 801807a:	4603      	mov	r3, r0
 801807c:	4601      	mov	r1, r0
 801807e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018080:	9303      	str	r3, [sp, #12]
 8018082:	0793      	lsls	r3, r2, #30
 8018084:	4630      	mov	r0, r6
 8018086:	d4ec      	bmi.n	8018062 <WM__InitIVRSearch+0xae>
 8018088:	4640      	mov	r0, r8
 801808a:	f7f7 fc7f 	bl	800f98c <GUI_ALLOC_UnlockH>
 801808e:	6a2b      	ldr	r3, [r5, #32]
 8018090:	3b01      	subs	r3, #1
 8018092:	622b      	str	r3, [r5, #32]
 8018094:	2000      	movs	r0, #0
 8018096:	e79c      	b.n	8017fd2 <WM__InitIVRSearch+0x1e>
 8018098:	f7fa f8d2 	bl	8012240 <GUI__IntersectRect>
 801809c:	9b03      	ldr	r3, [sp, #12]
 801809e:	699f      	ldr	r7, [r3, #24]
 80180a0:	4640      	mov	r0, r8
 80180a2:	b37f      	cbz	r7, 8018104 <WM__InitIVRSearch+0x150>
 80180a4:	f7f7 fc72 	bl	800f98c <GUI_ALLOC_UnlockH>
 80180a8:	46b9      	mov	r9, r7
 80180aa:	4648      	mov	r0, r9
 80180ac:	f7f7 fc5c 	bl	800f968 <GUI_ALLOC_LockH>
 80180b0:	4603      	mov	r3, r0
 80180b2:	4601      	mov	r1, r0
 80180b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80180b6:	9303      	str	r3, [sp, #12]
 80180b8:	0792      	lsls	r2, r2, #30
 80180ba:	4630      	mov	r0, r6
 80180bc:	d5e4      	bpl.n	8018088 <WM__InitIVRSearch+0xd4>
 80180be:	e7eb      	b.n	8018098 <WM__InitIVRSearch+0xe4>
 80180c0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80180c2:	f013 0602 	ands.w	r6, r3, #2
 80180c6:	d027      	beq.n	8018118 <WM__InitIVRSearch+0x164>
 80180c8:	c803      	ldmia	r0, {r0, r1}
 80180ca:	ae04      	add	r6, sp, #16
 80180cc:	e886 0003 	stmia.w	r6, {r0, r1}
 80180d0:	e799      	b.n	8018006 <WM__InitIVRSearch+0x52>
 80180d2:	f7f7 fc5b 	bl	800f98c <GUI_ALLOC_UnlockH>
 80180d6:	4b1b      	ldr	r3, [pc, #108]	; (8018144 <WM__InitIVRSearch+0x190>)
 80180d8:	681a      	ldr	r2, [r3, #0]
 80180da:	4297      	cmp	r7, r2
 80180dc:	d002      	beq.n	80180e4 <WM__InitIVRSearch+0x130>
 80180de:	685b      	ldr	r3, [r3, #4]
 80180e0:	429f      	cmp	r7, r3
 80180e2:	d1d4      	bne.n	801808e <WM__InitIVRSearch+0xda>
 80180e4:	e896 0003 	ldmia.w	r6, {r0, r1}
 80180e8:	4b17      	ldr	r3, [pc, #92]	; (8018148 <WM__InitIVRSearch+0x194>)
 80180ea:	e883 0003 	stmia.w	r3, {r0, r1}
 80180ee:	f7ff fe3b 	bl	8017d68 <WM__GetNextIVR>
 80180f2:	e76e      	b.n	8017fd2 <WM__InitIVRSearch+0x1e>
 80180f4:	4640      	mov	r0, r8
 80180f6:	f7f7 fc49 	bl	800f98c <GUI_ALLOC_UnlockH>
 80180fa:	6838      	ldr	r0, [r7, #0]
 80180fc:	f7f7 fc34 	bl	800f968 <GUI_ALLOC_LockH>
 8018100:	9002      	str	r0, [sp, #8]
 8018102:	e796      	b.n	8018032 <WM__InitIVRSearch+0x7e>
 8018104:	f7f7 fc42 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018108:	4b0e      	ldr	r3, [pc, #56]	; (8018144 <WM__InitIVRSearch+0x190>)
 801810a:	681a      	ldr	r2, [r3, #0]
 801810c:	4591      	cmp	r9, r2
 801810e:	d0a5      	beq.n	801805c <WM__InitIVRSearch+0xa8>
 8018110:	685b      	ldr	r3, [r3, #4]
 8018112:	4599      	cmp	r9, r3
 8018114:	d0a2      	beq.n	801805c <WM__InitIVRSearch+0xa8>
 8018116:	e7ba      	b.n	801808e <WM__InitIVRSearch+0xda>
 8018118:	6a2b      	ldr	r3, [r5, #32]
 801811a:	a801      	add	r0, sp, #4
 801811c:	3b01      	subs	r3, #1
 801811e:	622b      	str	r3, [r5, #32]
 8018120:	f7f7 fc34 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018124:	4630      	mov	r0, r6
 8018126:	e754      	b.n	8017fd2 <WM__InitIVRSearch+0x1e>
 8018128:	a801      	add	r0, sp, #4
 801812a:	f7f7 fc2f 	bl	800f98c <GUI_ALLOC_UnlockH>
 801812e:	4f04      	ldr	r7, [pc, #16]	; (8018140 <WM__InitIVRSearch+0x18c>)
 8018130:	e78d      	b.n	801804e <WM__InitIVRSearch+0x9a>
 8018132:	bf00      	nop
 8018134:	200000a8 	.word	0x200000a8
 8018138:	2002e39c 	.word	0x2002e39c
 801813c:	200308c0 	.word	0x200308c0
 8018140:	20030890 	.word	0x20030890
 8018144:	20030894 	.word	0x20030894
 8018148:	2002e3a8 	.word	0x2002e3a8

0801814c <WM__Paint1>:
 801814c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018150:	b089      	sub	sp, #36	; 0x24
 8018152:	4606      	mov	r6, r0
 8018154:	f7f7 fc08 	bl	800f968 <GUI_ALLOC_LockH>
 8018158:	f100 0208 	add.w	r2, r0, #8
 801815c:	4603      	mov	r3, r0
 801815e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018162:	ac02      	add	r4, sp, #8
 8018164:	691f      	ldr	r7, [r3, #16]
 8018166:	9301      	str	r3, [sp, #4]
 8018168:	e884 0003 	stmia.w	r4, {r0, r1}
 801816c:	a801      	add	r0, sp, #4
 801816e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8018170:	f7f7 fc0c 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018174:	b10f      	cbz	r7, 801817a <WM__Paint1+0x2e>
 8018176:	07ab      	lsls	r3, r5, #30
 8018178:	d402      	bmi.n	8018180 <WM__Paint1+0x34>
 801817a:	b009      	add	sp, #36	; 0x24
 801817c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018180:	4f1e      	ldr	r7, [pc, #120]	; (80181fc <WM__Paint1+0xb0>)
 8018182:	212e      	movs	r1, #46	; 0x2e
 8018184:	4630      	mov	r0, r6
 8018186:	f000 fef5 	bl	8018f74 <WM_SendMessageNoPara>
 801818a:	783b      	ldrb	r3, [r7, #0]
 801818c:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
 8018190:	f103 0301 	add.w	r3, r3, #1
 8018194:	703b      	strb	r3, [r7, #0]
 8018196:	d119      	bne.n	80181cc <WM__Paint1+0x80>
 8018198:	4620      	mov	r0, r4
 801819a:	f7ff ff0b 	bl	8017fb4 <WM__InitIVRSearch>
 801819e:	b318      	cbz	r0, 80181e8 <WM__Paint1+0x9c>
 80181a0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8018200 <WM__Paint1+0xb4>
 80181a4:	f04f 080f 	mov.w	r8, #15
 80181a8:	9605      	str	r6, [sp, #20]
 80181aa:	f8cd 8010 	str.w	r8, [sp, #16]
 80181ae:	9407      	str	r4, [sp, #28]
 80181b0:	f7f8 f8bc 	bl	801032c <GL_SetDefault>
 80181b4:	f8d9 3000 	ldr.w	r3, [r9]
 80181b8:	a904      	add	r1, sp, #16
 80181ba:	645d      	str	r5, [r3, #68]	; 0x44
 80181bc:	4630      	mov	r0, r6
 80181be:	f001 ff0d 	bl	8019fdc <WM__SendMessage>
 80181c2:	f7ff fdd1 	bl	8017d68 <WM__GetNextIVR>
 80181c6:	2800      	cmp	r0, #0
 80181c8:	d1ee      	bne.n	80181a8 <WM__Paint1+0x5c>
 80181ca:	e00d      	b.n	80181e8 <WM__Paint1+0x9c>
 80181cc:	230f      	movs	r3, #15
 80181ce:	9304      	str	r3, [sp, #16]
 80181d0:	9605      	str	r6, [sp, #20]
 80181d2:	9407      	str	r4, [sp, #28]
 80181d4:	f7f8 f8aa 	bl	801032c <GL_SetDefault>
 80181d8:	4b09      	ldr	r3, [pc, #36]	; (8018200 <WM__Paint1+0xb4>)
 80181da:	681b      	ldr	r3, [r3, #0]
 80181dc:	2200      	movs	r2, #0
 80181de:	645a      	str	r2, [r3, #68]	; 0x44
 80181e0:	a904      	add	r1, sp, #16
 80181e2:	4630      	mov	r0, r6
 80181e4:	f001 fefa 	bl	8019fdc <WM__SendMessage>
 80181e8:	783b      	ldrb	r3, [r7, #0]
 80181ea:	4630      	mov	r0, r6
 80181ec:	3b01      	subs	r3, #1
 80181ee:	212f      	movs	r1, #47	; 0x2f
 80181f0:	703b      	strb	r3, [r7, #0]
 80181f2:	f000 febf 	bl	8018f74 <WM_SendMessageNoPara>
 80181f6:	b009      	add	sp, #36	; 0x24
 80181f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181fc:	200308c0 	.word	0x200308c0
 8018200:	200000a8 	.word	0x200000a8

08018204 <WM__Paint>:
 8018204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018208:	b088      	sub	sp, #32
 801820a:	ad06      	add	r5, sp, #24
 801820c:	9003      	str	r0, [sp, #12]
 801820e:	f7f7 fbab 	bl	800f968 <GUI_ALLOC_LockH>
 8018212:	f100 0208 	add.w	r2, r0, #8
 8018216:	4603      	mov	r3, r0
 8018218:	e892 0003 	ldmia.w	r2, {r0, r1}
 801821c:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 801821e:	9304      	str	r3, [sp, #16]
 8018220:	e885 0003 	stmia.w	r5, {r0, r1}
 8018224:	a804      	add	r0, sp, #16
 8018226:	699f      	ldr	r7, [r3, #24]
 8018228:	691c      	ldr	r4, [r3, #16]
 801822a:	f7f7 fbaf 	bl	800f98c <GUI_ALLOC_UnlockH>
 801822e:	f244 0320 	movw	r3, #16416	; 0x4020
 8018232:	4033      	ands	r3, r6
 8018234:	2b00      	cmp	r3, #0
 8018236:	d079      	beq.n	801832c <WM__Paint+0x128>
 8018238:	2c00      	cmp	r4, #0
 801823a:	d075      	beq.n	8018328 <WM__Paint+0x124>
 801823c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8018240:	e008      	b.n	8018254 <WM__Paint+0x50>
 8018242:	f7f9 fffd 	bl	8012240 <GUI__IntersectRect>
 8018246:	9b05      	ldr	r3, [sp, #20]
 8018248:	699c      	ldr	r4, [r3, #24]
 801824a:	a805      	add	r0, sp, #20
 801824c:	b34c      	cbz	r4, 80182a2 <WM__Paint+0x9e>
 801824e:	f7f7 fb9d 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018252:	46a0      	mov	r8, r4
 8018254:	4640      	mov	r0, r8
 8018256:	f7f7 fb87 	bl	800f968 <GUI_ALLOC_LockH>
 801825a:	4602      	mov	r2, r0
 801825c:	4601      	mov	r1, r0
 801825e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8018260:	9205      	str	r2, [sp, #20]
 8018262:	f013 0402 	ands.w	r4, r3, #2
 8018266:	4628      	mov	r0, r5
 8018268:	d1eb      	bne.n	8018242 <WM__Paint+0x3e>
 801826a:	a805      	add	r0, sp, #20
 801826c:	f7f7 fb8e 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018270:	9803      	ldr	r0, [sp, #12]
 8018272:	f7f7 fb79 	bl	800f968 <GUI_ALLOC_LockH>
 8018276:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8018278:	9004      	str	r0, [sp, #16]
 801827a:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 801827e:	f023 0320 	bic.w	r3, r3, #32
 8018282:	0492      	lsls	r2, r2, #18
 8018284:	bf48      	it	mi
 8018286:	f043 0304 	orrmi.w	r3, r3, #4
 801828a:	6283      	str	r3, [r0, #40]	; 0x28
 801828c:	a804      	add	r0, sp, #16
 801828e:	f7f7 fb7d 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018292:	4a32      	ldr	r2, [pc, #200]	; (801835c <WM__Paint+0x158>)
 8018294:	8813      	ldrh	r3, [r2, #0]
 8018296:	4620      	mov	r0, r4
 8018298:	3b01      	subs	r3, #1
 801829a:	8013      	strh	r3, [r2, #0]
 801829c:	b008      	add	sp, #32
 801829e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182a2:	4c2f      	ldr	r4, [pc, #188]	; (8018360 <WM__Paint+0x15c>)
 80182a4:	f7f7 fb72 	bl	800f98c <GUI_ALLOC_UnlockH>
 80182a8:	6823      	ldr	r3, [r4, #0]
 80182aa:	4598      	cmp	r8, r3
 80182ac:	d143      	bne.n	8018336 <WM__Paint+0x132>
 80182ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80182b2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 801836c <WM__Paint+0x168>
 80182b6:	f7f9 f9e1 	bl	801167c <GUI_Lock>
 80182ba:	f8d9 3000 	ldr.w	r3, [r9]
 80182be:	f1b8 0f00 	cmp.w	r8, #0
 80182c2:	d102      	bne.n	80182ca <WM__Paint+0xc6>
 80182c4:	4a27      	ldr	r2, [pc, #156]	; (8018364 <WM__Paint+0x160>)
 80182c6:	f8d2 8000 	ldr.w	r8, [r2]
 80182ca:	f8c3 8048 	str.w	r8, [r3, #72]	; 0x48
 80182ce:	46c2      	mov	sl, r8
 80182d0:	e000      	b.n	80182d4 <WM__Paint+0xd0>
 80182d2:	469a      	mov	sl, r3
 80182d4:	4650      	mov	r0, sl
 80182d6:	f7f7 fb3d 	bl	800f954 <GUI_ALLOC_h2p>
 80182da:	6983      	ldr	r3, [r0, #24]
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d1f8      	bne.n	80182d2 <WM__Paint+0xce>
 80182e0:	6822      	ldr	r2, [r4, #0]
 80182e2:	491f      	ldr	r1, [pc, #124]	; (8018360 <WM__Paint+0x15c>)
 80182e4:	4592      	cmp	sl, r2
 80182e6:	d036      	beq.n	8018356 <WM__Paint+0x152>
 80182e8:	684b      	ldr	r3, [r1, #4]
 80182ea:	459a      	cmp	sl, r3
 80182ec:	d02f      	beq.n	801834e <WM__Paint+0x14a>
 80182ee:	f7fa fe0d 	bl	8012f0c <LCD_SetClipRectMax>
 80182f2:	4640      	mov	r0, r8
 80182f4:	f7f7 fb2e 	bl	800f954 <GUI_ALLOC_h2p>
 80182f8:	f8d9 3000 	ldr.w	r3, [r9]
 80182fc:	f9b0 1000 	ldrsh.w	r1, [r0]
 8018300:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018304:	651a      	str	r2, [r3, #80]	; 0x50
 8018306:	64d9      	str	r1, [r3, #76]	; 0x4c
 8018308:	f7f9 f9ae 	bl	8011668 <GUI_Unlock>
 801830c:	0771      	lsls	r1, r6, #29
 801830e:	d519      	bpl.n	8018344 <WM__Paint+0x140>
 8018310:	b1b7      	cbz	r7, 8018340 <WM__Paint+0x13c>
 8018312:	f006 0301 	and.w	r3, r6, #1
 8018316:	f083 0301 	eor.w	r3, r3, #1
 801831a:	9300      	str	r3, [sp, #0]
 801831c:	4628      	mov	r0, r5
 801831e:	2300      	movs	r3, #0
 8018320:	aa03      	add	r2, sp, #12
 8018322:	4911      	ldr	r1, [pc, #68]	; (8018368 <WM__Paint+0x164>)
 8018324:	f004 ff30 	bl	801d188 <GUI_MEMDEV_Draw>
 8018328:	2400      	movs	r4, #0
 801832a:	e7a1      	b.n	8018270 <WM__Paint+0x6c>
 801832c:	461c      	mov	r4, r3
 801832e:	4620      	mov	r0, r4
 8018330:	b008      	add	sp, #32
 8018332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018336:	6863      	ldr	r3, [r4, #4]
 8018338:	4598      	cmp	r8, r3
 801833a:	d0b8      	beq.n	80182ae <WM__Paint+0xaa>
 801833c:	2400      	movs	r4, #0
 801833e:	e797      	b.n	8018270 <WM__Paint+0x6c>
 8018340:	2301      	movs	r3, #1
 8018342:	e7ea      	b.n	801831a <WM__Paint+0x116>
 8018344:	9803      	ldr	r0, [sp, #12]
 8018346:	f7fe f9dd 	bl	8016704 <WM__PaintWinAndOverlays>
 801834a:	2401      	movs	r4, #1
 801834c:	e790      	b.n	8018270 <WM__Paint+0x6c>
 801834e:	2001      	movs	r0, #1
 8018350:	f7f9 f926 	bl	80115a0 <GUI_SelectLayer>
 8018354:	e7cb      	b.n	80182ee <WM__Paint+0xea>
 8018356:	4618      	mov	r0, r3
 8018358:	e7fa      	b.n	8018350 <WM__Paint+0x14c>
 801835a:	bf00      	nop
 801835c:	200308ac 	.word	0x200308ac
 8018360:	20030894 	.word	0x20030894
 8018364:	200308b0 	.word	0x200308b0
 8018368:	080167a5 	.word	0x080167a5
 801836c:	200000a8 	.word	0x200000a8

08018370 <WM_Exec>:
 8018370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018374:	b0ab      	sub	sp, #172	; 0xac
 8018376:	f7f9 f981 	bl	801167c <GUI_Lock>
 801837a:	4b9b      	ldr	r3, [pc, #620]	; (80185e8 <WM_Exec+0x278>)
 801837c:	681b      	ldr	r3, [r3, #0]
 801837e:	b103      	cbz	r3, 8018382 <WM_Exec+0x12>
 8018380:	4798      	blx	r3
 8018382:	2300      	movs	r3, #0
 8018384:	461c      	mov	r4, r3
 8018386:	e000      	b.n	801838a <WM_Exec+0x1a>
 8018388:	2401      	movs	r4, #1
 801838a:	f7ff f943 	bl	8017614 <_Exec1Input>
 801838e:	2800      	cmp	r0, #0
 8018390:	d1fa      	bne.n	8018388 <WM_Exec+0x18>
 8018392:	f8df b264 	ldr.w	fp, [pc, #612]	; 80185f8 <WM_Exec+0x288>
 8018396:	9406      	str	r4, [sp, #24]
 8018398:	f8db 3000 	ldr.w	r3, [fp]
 801839c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80183a0:	b123      	cbz	r3, 80183ac <WM_Exec+0x3c>
 80183a2:	4b92      	ldr	r3, [pc, #584]	; (80185ec <WM_Exec+0x27c>)
 80183a4:	881b      	ldrh	r3, [r3, #0]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	f040 809a 	bne.w	80184e0 <WM_Exec+0x170>
 80183ac:	9307      	str	r3, [sp, #28]
 80183ae:	f8df a250 	ldr.w	sl, [pc, #592]	; 8018600 <WM_Exec+0x290>
 80183b2:	f7f9 f959 	bl	8011668 <GUI_Unlock>
 80183b6:	e021      	b.n	80183fc <WM_Exec+0x8c>
 80183b8:	aa0d      	add	r2, sp, #52	; 0x34
 80183ba:	4b8d      	ldr	r3, [pc, #564]	; (80185f0 <WM_Exec+0x280>)
 80183bc:	9205      	str	r2, [sp, #20]
 80183be:	4610      	mov	r0, r2
 80183c0:	681e      	ldr	r6, [r3, #0]
 80183c2:	f7f7 ff79 	bl	80102b8 <GUI_SaveContext_W>
 80183c6:	6823      	ldr	r3, [r4, #0]
 80183c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80183ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80183cc:	9203      	str	r2, [sp, #12]
 80183ce:	9304      	str	r3, [sp, #16]
 80183d0:	2e00      	cmp	r6, #0
 80183d2:	d132      	bne.n	801843a <WM_Exec+0xca>
 80183d4:	4b87      	ldr	r3, [pc, #540]	; (80185f4 <WM_Exec+0x284>)
 80183d6:	9803      	ldr	r0, [sp, #12]
 80183d8:	609e      	str	r6, [r3, #8]
 80183da:	f7f7 ff9b 	bl	8010314 <GUI_SetColor>
 80183de:	9804      	ldr	r0, [sp, #16]
 80183e0:	f7f7 ff8c 	bl	80102fc <GUI_SetBkColor>
 80183e4:	9805      	ldr	r0, [sp, #20]
 80183e6:	f7f7 ff71 	bl	80102cc <GUI_RestoreContext>
 80183ea:	f7f9 f93d 	bl	8011668 <GUI_Unlock>
 80183ee:	f8b8 3000 	ldrh.w	r3, [r8]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	f000 80d2 	beq.w	801859c <WM_Exec+0x22c>
 80183f8:	2301      	movs	r3, #1
 80183fa:	9306      	str	r3, [sp, #24]
 80183fc:	f8db 3000 	ldr.w	r3, [fp]
 8018400:	4c7d      	ldr	r4, [pc, #500]	; (80185f8 <WM_Exec+0x288>)
 8018402:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8018406:	2b00      	cmp	r3, #0
 8018408:	f000 80c8 	beq.w	801859c <WM_Exec+0x22c>
 801840c:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 80185ec <WM_Exec+0x27c>
 8018410:	f8b8 3000 	ldrh.w	r3, [r8]
 8018414:	2b00      	cmp	r3, #0
 8018416:	f000 80c1 	beq.w	801859c <WM_Exec+0x22c>
 801841a:	f7f9 f92f 	bl	801167c <GUI_Lock>
 801841e:	4b75      	ldr	r3, [pc, #468]	; (80185f4 <WM_Exec+0x284>)
 8018420:	689e      	ldr	r6, [r3, #8]
 8018422:	2e00      	cmp	r6, #0
 8018424:	d0c8      	beq.n	80183b8 <WM_Exec+0x48>
 8018426:	ab0d      	add	r3, sp, #52	; 0x34
 8018428:	4618      	mov	r0, r3
 801842a:	9305      	str	r3, [sp, #20]
 801842c:	f7f7 ff44 	bl	80102b8 <GUI_SaveContext_W>
 8018430:	6823      	ldr	r3, [r4, #0]
 8018432:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8018434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018436:	9203      	str	r2, [sp, #12]
 8018438:	9304      	str	r3, [sp, #16]
 801843a:	ad0b      	add	r5, sp, #44	; 0x2c
 801843c:	4630      	mov	r0, r6
 801843e:	9608      	str	r6, [sp, #32]
 8018440:	f7f7 fa92 	bl	800f968 <GUI_ALLOC_LockH>
 8018444:	f100 0208 	add.w	r2, r0, #8
 8018448:	4603      	mov	r3, r0
 801844a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801844e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018450:	9309      	str	r3, [sp, #36]	; 0x24
 8018452:	e885 0003 	stmia.w	r5, {r0, r1}
 8018456:	a809      	add	r0, sp, #36	; 0x24
 8018458:	4617      	mov	r7, r2
 801845a:	f8d3 9018 	ldr.w	r9, [r3, #24]
 801845e:	691c      	ldr	r4, [r3, #16]
 8018460:	9202      	str	r2, [sp, #8]
 8018462:	f7f7 fa93 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018466:	f244 0320 	movw	r3, #16416	; 0x4020
 801846a:	403b      	ands	r3, r7
 801846c:	2b00      	cmp	r3, #0
 801846e:	d040      	beq.n	80184f2 <WM_Exec+0x182>
 8018470:	b1d4      	cbz	r4, 80184a8 <WM_Exec+0x138>
 8018472:	9c08      	ldr	r4, [sp, #32]
 8018474:	e009      	b.n	801848a <WM_Exec+0x11a>
 8018476:	f7f9 fee3 	bl	8012240 <GUI__IntersectRect>
 801847a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801847c:	699f      	ldr	r7, [r3, #24]
 801847e:	a80a      	add	r0, sp, #40	; 0x28
 8018480:	2f00      	cmp	r7, #0
 8018482:	d03d      	beq.n	8018500 <WM_Exec+0x190>
 8018484:	f7f7 fa82 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018488:	463c      	mov	r4, r7
 801848a:	4620      	mov	r0, r4
 801848c:	f7f7 fa6c 	bl	800f968 <GUI_ALLOC_LockH>
 8018490:	4603      	mov	r3, r0
 8018492:	4601      	mov	r1, r0
 8018494:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 8018496:	930a      	str	r3, [sp, #40]	; 0x28
 8018498:	f017 0702 	ands.w	r7, r7, #2
 801849c:	4628      	mov	r0, r5
 801849e:	d1ea      	bne.n	8018476 <WM_Exec+0x106>
 80184a0:	a80a      	add	r0, sp, #40	; 0x28
 80184a2:	f7f7 fa73 	bl	800f98c <GUI_ALLOC_UnlockH>
 80184a6:	463c      	mov	r4, r7
 80184a8:	9808      	ldr	r0, [sp, #32]
 80184aa:	f7f7 fa5d 	bl	800f968 <GUI_ALLOC_LockH>
 80184ae:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80184b0:	9009      	str	r0, [sp, #36]	; 0x24
 80184b2:	f422 4380 	bic.w	r3, r2, #16384	; 0x4000
 80184b6:	f023 0320 	bic.w	r3, r3, #32
 80184ba:	0492      	lsls	r2, r2, #18
 80184bc:	bf48      	it	mi
 80184be:	f043 0304 	orrmi.w	r3, r3, #4
 80184c2:	6283      	str	r3, [r0, #40]	; 0x28
 80184c4:	a809      	add	r0, sp, #36	; 0x24
 80184c6:	f7f7 fa61 	bl	800f98c <GUI_ALLOC_UnlockH>
 80184ca:	f8b8 3000 	ldrh.w	r3, [r8]
 80184ce:	3b01      	subs	r3, #1
 80184d0:	f8a8 3000 	strh.w	r3, [r8]
 80184d4:	b16c      	cbz	r4, 80184f2 <WM_Exec+0x182>
 80184d6:	4630      	mov	r0, r6
 80184d8:	f7f7 fa3c 	bl	800f954 <GUI_ALLOC_h2p>
 80184dc:	6946      	ldr	r6, [r0, #20]
 80184de:	e779      	b.n	80183d4 <WM_Exec+0x64>
 80184e0:	4b46      	ldr	r3, [pc, #280]	; (80185fc <WM_Exec+0x28c>)
 80184e2:	681b      	ldr	r3, [r3, #0]
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	d071      	beq.n	80185cc <WM_Exec+0x25c>
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	4798      	blx	r3
 80184ec:	2301      	movs	r3, #1
 80184ee:	9307      	str	r3, [sp, #28]
 80184f0:	e75d      	b.n	80183ae <WM_Exec+0x3e>
 80184f2:	4630      	mov	r0, r6
 80184f4:	f7f7 fa2e 	bl	800f954 <GUI_ALLOC_h2p>
 80184f8:	6946      	ldr	r6, [r0, #20]
 80184fa:	2e00      	cmp	r6, #0
 80184fc:	d19e      	bne.n	801843c <WM_Exec+0xcc>
 80184fe:	e769      	b.n	80183d4 <WM_Exec+0x64>
 8018500:	f7f7 fa44 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018504:	f8da 2000 	ldr.w	r2, [sl]
 8018508:	42a2      	cmp	r2, r4
 801850a:	d005      	beq.n	8018518 <WM_Exec+0x1a8>
 801850c:	4b3c      	ldr	r3, [pc, #240]	; (8018600 <WM_Exec+0x290>)
 801850e:	685a      	ldr	r2, [r3, #4]
 8018510:	4294      	cmp	r4, r2
 8018512:	d001      	beq.n	8018518 <WM_Exec+0x1a8>
 8018514:	2400      	movs	r4, #0
 8018516:	e7c7      	b.n	80184a8 <WM_Exec+0x138>
 8018518:	9c08      	ldr	r4, [sp, #32]
 801851a:	f7f9 f8af 	bl	801167c <GUI_Lock>
 801851e:	f8db 3000 	ldr.w	r3, [fp]
 8018522:	b90c      	cbnz	r4, 8018528 <WM_Exec+0x1b8>
 8018524:	4a32      	ldr	r2, [pc, #200]	; (80185f0 <WM_Exec+0x280>)
 8018526:	6814      	ldr	r4, [r2, #0]
 8018528:	649c      	str	r4, [r3, #72]	; 0x48
 801852a:	4627      	mov	r7, r4
 801852c:	e000      	b.n	8018530 <WM_Exec+0x1c0>
 801852e:	461f      	mov	r7, r3
 8018530:	4638      	mov	r0, r7
 8018532:	f7f7 fa0f 	bl	800f954 <GUI_ALLOC_h2p>
 8018536:	6983      	ldr	r3, [r0, #24]
 8018538:	2b00      	cmp	r3, #0
 801853a:	d1f8      	bne.n	801852e <WM_Exec+0x1be>
 801853c:	f8da 1000 	ldr.w	r1, [sl]
 8018540:	428f      	cmp	r7, r1
 8018542:	d03d      	beq.n	80185c0 <WM_Exec+0x250>
 8018544:	f8da 3004 	ldr.w	r3, [sl, #4]
 8018548:	429f      	cmp	r7, r3
 801854a:	d03d      	beq.n	80185c8 <WM_Exec+0x258>
 801854c:	f7fa fcde 	bl	8012f0c <LCD_SetClipRectMax>
 8018550:	4620      	mov	r0, r4
 8018552:	f7f7 f9ff 	bl	800f954 <GUI_ALLOC_h2p>
 8018556:	f8db 3000 	ldr.w	r3, [fp]
 801855a:	f9b0 1000 	ldrsh.w	r1, [r0]
 801855e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018562:	651a      	str	r2, [r3, #80]	; 0x50
 8018564:	64d9      	str	r1, [r3, #76]	; 0x4c
 8018566:	f7f9 f87f 	bl	8011668 <GUI_Unlock>
 801856a:	9a02      	ldr	r2, [sp, #8]
 801856c:	0751      	lsls	r1, r2, #29
 801856e:	d510      	bpl.n	8018592 <WM_Exec+0x222>
 8018570:	f1b9 0f00 	cmp.w	r9, #0
 8018574:	d00b      	beq.n	801858e <WM_Exec+0x21e>
 8018576:	f002 0301 	and.w	r3, r2, #1
 801857a:	f083 0301 	eor.w	r3, r3, #1
 801857e:	9300      	str	r3, [sp, #0]
 8018580:	aa08      	add	r2, sp, #32
 8018582:	2300      	movs	r3, #0
 8018584:	491f      	ldr	r1, [pc, #124]	; (8018604 <WM_Exec+0x294>)
 8018586:	4628      	mov	r0, r5
 8018588:	f004 fdfe 	bl	801d188 <GUI_MEMDEV_Draw>
 801858c:	e7c2      	b.n	8018514 <WM_Exec+0x1a4>
 801858e:	2301      	movs	r3, #1
 8018590:	e7f5      	b.n	801857e <WM_Exec+0x20e>
 8018592:	9808      	ldr	r0, [sp, #32]
 8018594:	f7fe f8b6 	bl	8016704 <WM__PaintWinAndOverlays>
 8018598:	2401      	movs	r4, #1
 801859a:	e785      	b.n	80184a8 <WM_Exec+0x138>
 801859c:	f7f9 f86e 	bl	801167c <GUI_Lock>
 80185a0:	9b07      	ldr	r3, [sp, #28]
 80185a2:	b13b      	cbz	r3, 80185b4 <WM_Exec+0x244>
 80185a4:	4b15      	ldr	r3, [pc, #84]	; (80185fc <WM_Exec+0x28c>)
 80185a6:	6818      	ldr	r0, [r3, #0]
 80185a8:	b1b0      	cbz	r0, 80185d8 <WM_Exec+0x268>
 80185aa:	6843      	ldr	r3, [r0, #4]
 80185ac:	4798      	blx	r3
 80185ae:	4b16      	ldr	r3, [pc, #88]	; (8018608 <WM_Exec+0x298>)
 80185b0:	2200      	movs	r2, #0
 80185b2:	601a      	str	r2, [r3, #0]
 80185b4:	f7f9 f858 	bl	8011668 <GUI_Unlock>
 80185b8:	9806      	ldr	r0, [sp, #24]
 80185ba:	b02b      	add	sp, #172	; 0xac
 80185bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185c0:	4618      	mov	r0, r3
 80185c2:	f7f8 ffed 	bl	80115a0 <GUI_SelectLayer>
 80185c6:	e7c1      	b.n	801854c <WM_Exec+0x1dc>
 80185c8:	2001      	movs	r0, #1
 80185ca:	e7fa      	b.n	80185c2 <WM_Exec+0x252>
 80185cc:	2001      	movs	r0, #1
 80185ce:	f004 fb47 	bl	801cc60 <GUI__ManageCache>
 80185d2:	2301      	movs	r3, #1
 80185d4:	9307      	str	r3, [sp, #28]
 80185d6:	e6ea      	b.n	80183ae <WM_Exec+0x3e>
 80185d8:	f004 fb42 	bl	801cc60 <GUI__ManageCache>
 80185dc:	f7f9 f844 	bl	8011668 <GUI_Unlock>
 80185e0:	9806      	ldr	r0, [sp, #24]
 80185e2:	b02b      	add	sp, #172	; 0xac
 80185e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185e8:	200308a0 	.word	0x200308a0
 80185ec:	200308ac 	.word	0x200308ac
 80185f0:	200308b0 	.word	0x200308b0
 80185f4:	2002e39c 	.word	0x2002e39c
 80185f8:	200000a8 	.word	0x200000a8
 80185fc:	200308d4 	.word	0x200308d4
 8018600:	20030894 	.word	0x20030894
 8018604:	080167a5 	.word	0x080167a5
 8018608:	200308bc 	.word	0x200308bc

0801860c <WM_Activate>:
 801860c:	4b02      	ldr	r3, [pc, #8]	; (8018618 <WM_Activate+0xc>)
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	2201      	movs	r2, #1
 8018612:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8018616:	4770      	bx	lr
 8018618:	200000a8 	.word	0x200000a8

0801861c <WM_Deactivate>:
 801861c:	b508      	push	{r3, lr}
 801861e:	4b06      	ldr	r3, [pc, #24]	; (8018638 <WM_Deactivate+0x1c>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	2200      	movs	r2, #0
 8018624:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8018628:	f7f9 f828 	bl	801167c <GUI_Lock>
 801862c:	f7fa fc6e 	bl	8012f0c <LCD_SetClipRectMax>
 8018630:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018634:	f7f9 b818 	b.w	8011668 <GUI_Unlock>
 8018638:	200000a8 	.word	0x200000a8

0801863c <WM_DefaultProc>:
 801863c:	6803      	ldr	r3, [r0, #0]
 801863e:	3b0e      	subs	r3, #14
 8018640:	b510      	push	{r4, lr}
 8018642:	4604      	mov	r4, r0
 8018644:	6840      	ldr	r0, [r0, #4]
 8018646:	2b1a      	cmp	r3, #26
 8018648:	d812      	bhi.n	8018670 <WM_DefaultProc+0x34>
 801864a:	e8df f003 	tbb	[pc, r3]
 801864e:	111b      	.short	0x111b
 8018650:	11111111 	.word	0x11111111
 8018654:	2011110e 	.word	0x2011110e
 8018658:	11111111 	.word	0x11111111
 801865c:	11111111 	.word	0x11111111
 8018660:	11221111 	.word	0x11221111
 8018664:	11111111 	.word	0x11111111
 8018668:	14          	.byte	0x14
 8018669:	00          	.byte	0x00
 801866a:	68e1      	ldr	r1, [r4, #12]
 801866c:	f001 fdb4 	bl	801a1d8 <WM__GetClientRectEx>
 8018670:	2300      	movs	r3, #0
 8018672:	60e3      	str	r3, [r4, #12]
 8018674:	bd10      	pop	{r4, pc}
 8018676:	2800      	cmp	r0, #0
 8018678:	d0fc      	beq.n	8018674 <WM_DefaultProc+0x38>
 801867a:	2100      	movs	r1, #0
 801867c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018680:	f7fe bde6 	b.w	8017250 <WM_InvalidateRect.part.2>
 8018684:	4621      	mov	r1, r4
 8018686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801868a:	f000 bc81 	b.w	8018f90 <WM_SendToParent>
 801868e:	60e0      	str	r0, [r4, #12]
 8018690:	bd10      	pop	{r4, pc}
 8018692:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8018696:	60e3      	str	r3, [r4, #12]
 8018698:	bd10      	pop	{r4, pc}
 801869a:	bf00      	nop

0801869c <WM_Init>:
 801869c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186a0:	4d45      	ldr	r5, [pc, #276]	; (80187b8 <WM_Init+0x11c>)
 80186a2:	782b      	ldrb	r3, [r5, #0]
 80186a4:	b085      	sub	sp, #20
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d17b      	bne.n	80187a2 <WM_Init+0x106>
 80186aa:	4f44      	ldr	r7, [pc, #272]	; (80187bc <WM_Init+0x120>)
 80186ac:	f8df 9140 	ldr.w	r9, [pc, #320]	; 80187f0 <WM_Init+0x154>
 80186b0:	6838      	ldr	r0, [r7, #0]
 80186b2:	4943      	ldr	r1, [pc, #268]	; (80187c0 <WM_Init+0x124>)
 80186b4:	4a43      	ldr	r2, [pc, #268]	; (80187c4 <WM_Init+0x128>)
 80186b6:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80187e4 <WM_Init+0x148>
 80186ba:	f8df a138 	ldr.w	sl, [pc, #312]	; 80187f4 <WM_Init+0x158>
 80186be:	4e42      	ldr	r6, [pc, #264]	; (80187c8 <WM_Init+0x12c>)
 80186c0:	60ab      	str	r3, [r5, #8]
 80186c2:	6443      	str	r3, [r0, #68]	; 0x44
 80186c4:	461c      	mov	r4, r3
 80186c6:	f8c9 3000 	str.w	r3, [r9]
 80186ca:	800b      	strh	r3, [r1, #0]
 80186cc:	8013      	strh	r3, [r2, #0]
 80186ce:	469b      	mov	fp, r3
 80186d0:	4620      	mov	r0, r4
 80186d2:	f7f8 f845 	bl	8010760 <GUI_DEVICE__GetpDriver>
 80186d6:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80186da:	2100      	movs	r1, #0
 80186dc:	f04f 0c02 	mov.w	ip, #2
 80186e0:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80186e4:	461a      	mov	r2, r3
 80186e6:	b190      	cbz	r0, 801870e <WM_Init+0x72>
 80186e8:	f8cd b00c 	str.w	fp, [sp, #12]
 80186ec:	f8cd a008 	str.w	sl, [sp, #8]
 80186f0:	f8cd c004 	str.w	ip, [sp, #4]
 80186f4:	f8cd e000 	str.w	lr, [sp]
 80186f8:	4608      	mov	r0, r1
 80186fa:	f7ff f939 	bl	8017970 <WM_CreateWindowAsChild>
 80186fe:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8018702:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
 8018706:	f846 2024 	str.w	r2, [r6, r4, lsl #2]
 801870a:	2800      	cmp	r0, #0
 801870c:	d150      	bne.n	80187b0 <WM_Init+0x114>
 801870e:	3401      	adds	r4, #1
 8018710:	2c02      	cmp	r4, #2
 8018712:	d1dd      	bne.n	80186d0 <WM_Init+0x34>
 8018714:	482d      	ldr	r0, [pc, #180]	; (80187cc <WM_Init+0x130>)
 8018716:	f001 fd37 	bl	801a188 <WM__AddCriticalHandle>
 801871a:	482d      	ldr	r0, [pc, #180]	; (80187d0 <WM_Init+0x134>)
 801871c:	f001 fd34 	bl	801a188 <WM__AddCriticalHandle>
 8018720:	482c      	ldr	r0, [pc, #176]	; (80187d4 <WM_Init+0x138>)
 8018722:	f001 fd31 	bl	801a188 <WM__AddCriticalHandle>
 8018726:	482c      	ldr	r0, [pc, #176]	; (80187d8 <WM_Init+0x13c>)
 8018728:	f001 fd2e 	bl	801a188 <WM__AddCriticalHandle>
 801872c:	482b      	ldr	r0, [pc, #172]	; (80187dc <WM_Init+0x140>)
 801872e:	f001 fd2b 	bl	801a188 <WM__AddCriticalHandle>
 8018732:	482b      	ldr	r0, [pc, #172]	; (80187e0 <WM_Init+0x144>)
 8018734:	f001 fd28 	bl	801a188 <WM__AddCriticalHandle>
 8018738:	f8d8 6000 	ldr.w	r6, [r8]
 801873c:	f7f8 ff9e 	bl	801167c <GUI_Lock>
 8018740:	683b      	ldr	r3, [r7, #0]
 8018742:	b90e      	cbnz	r6, 8018748 <WM_Init+0xac>
 8018744:	f8d9 6000 	ldr.w	r6, [r9]
 8018748:	649e      	str	r6, [r3, #72]	; 0x48
 801874a:	4634      	mov	r4, r6
 801874c:	e000      	b.n	8018750 <WM_Init+0xb4>
 801874e:	4604      	mov	r4, r0
 8018750:	4620      	mov	r0, r4
 8018752:	f7f7 f8ff 	bl	800f954 <GUI_ALLOC_h2p>
 8018756:	6980      	ldr	r0, [r0, #24]
 8018758:	2800      	cmp	r0, #0
 801875a:	d1f8      	bne.n	801874e <WM_Init+0xb2>
 801875c:	f8d8 3000 	ldr.w	r3, [r8]
 8018760:	4a20      	ldr	r2, [pc, #128]	; (80187e4 <WM_Init+0x148>)
 8018762:	429c      	cmp	r4, r3
 8018764:	d021      	beq.n	80187aa <WM_Init+0x10e>
 8018766:	6853      	ldr	r3, [r2, #4]
 8018768:	429c      	cmp	r4, r3
 801876a:	d01d      	beq.n	80187a8 <WM_Init+0x10c>
 801876c:	f7fa fbce 	bl	8012f0c <LCD_SetClipRectMax>
 8018770:	4630      	mov	r0, r6
 8018772:	f7f7 f8ef 	bl	800f954 <GUI_ALLOC_h2p>
 8018776:	683b      	ldr	r3, [r7, #0]
 8018778:	f9b0 1000 	ldrsh.w	r1, [r0]
 801877c:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8018780:	651a      	str	r2, [r3, #80]	; 0x50
 8018782:	64d9      	str	r1, [r3, #76]	; 0x4c
 8018784:	f7f8 ff70 	bl	8011668 <GUI_Unlock>
 8018788:	683a      	ldr	r2, [r7, #0]
 801878a:	4b17      	ldr	r3, [pc, #92]	; (80187e8 <WM_Init+0x14c>)
 801878c:	4817      	ldr	r0, [pc, #92]	; (80187ec <WM_Init+0x150>)
 801878e:	626b      	str	r3, [r5, #36]	; 0x24
 8018790:	2301      	movs	r3, #1
 8018792:	f882 3054 	strb.w	r3, [r2, #84]	; 0x54
 8018796:	702b      	strb	r3, [r5, #0]
 8018798:	b005      	add	sp, #20
 801879a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801879e:	f7f7 bfb9 	b.w	8010714 <GUI__RegisterExit>
 80187a2:	b005      	add	sp, #20
 80187a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80187a8:	2001      	movs	r0, #1
 80187aa:	f7f8 fef9 	bl	80115a0 <GUI_SelectLayer>
 80187ae:	e7dd      	b.n	801876c <WM_Init+0xd0>
 80187b0:	2100      	movs	r1, #0
 80187b2:	f7fe fd4d 	bl	8017250 <WM_InvalidateRect.part.2>
 80187b6:	e7aa      	b.n	801870e <WM_Init+0x72>
 80187b8:	2002e39c 	.word	0x2002e39c
 80187bc:	200000a8 	.word	0x200000a8
 80187c0:	200308ac 	.word	0x200308ac
 80187c4:	2003088c 	.word	0x2003088c
 80187c8:	200308c8 	.word	0x200308c8
 80187cc:	20030908 	.word	0x20030908
 80187d0:	200308f8 	.word	0x200308f8
 80187d4:	200308e8 	.word	0x200308e8
 80187d8:	20030910 	.word	0x20030910
 80187dc:	20030900 	.word	0x20030900
 80187e0:	200308f0 	.word	0x200308f0
 80187e4:	20030894 	.word	0x20030894
 80187e8:	0801618d 	.word	0x0801618d
 80187ec:	2002e3c0 	.word	0x2002e3c0
 80187f0:	200308b0 	.word	0x200308b0
 80187f4:	0801732d 	.word	0x0801732d

080187f8 <WM_HideWindow>:
 80187f8:	b900      	cbnz	r0, 80187fc <WM_HideWindow+0x4>
 80187fa:	4770      	bx	lr
 80187fc:	b510      	push	{r4, lr}
 80187fe:	4604      	mov	r4, r0
 8018800:	b082      	sub	sp, #8
 8018802:	f7f8 ff3b 	bl	801167c <GUI_Lock>
 8018806:	4620      	mov	r0, r4
 8018808:	f7f7 f8ae 	bl	800f968 <GUI_ALLOC_LockH>
 801880c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801880e:	9001      	str	r0, [sp, #4]
 8018810:	0791      	lsls	r1, r2, #30
 8018812:	d406      	bmi.n	8018822 <WM_HideWindow+0x2a>
 8018814:	a801      	add	r0, sp, #4
 8018816:	f7f7 f8b9 	bl	800f98c <GUI_ALLOC_UnlockH>
 801881a:	f7f8 ff25 	bl	8011668 <GUI_Unlock>
 801881e:	b002      	add	sp, #8
 8018820:	bd10      	pop	{r4, pc}
 8018822:	f022 0202 	bic.w	r2, r2, #2
 8018826:	6981      	ldr	r1, [r0, #24]
 8018828:	6282      	str	r2, [r0, #40]	; 0x28
 801882a:	6a02      	ldr	r2, [r0, #32]
 801882c:	f7fe ffb4 	bl	8017798 <WM__InvalidateRectEx>
 8018830:	a801      	add	r0, sp, #4
 8018832:	f7f7 f8ab 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018836:	f7f8 ff17 	bl	8011668 <GUI_Unlock>
 801883a:	b002      	add	sp, #8
 801883c:	bd10      	pop	{r4, pc}
 801883e:	bf00      	nop

08018840 <WM_ResizeWindow.part.11>:
 8018840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018844:	4606      	mov	r6, r0
 8018846:	b08a      	sub	sp, #40	; 0x28
 8018848:	4688      	mov	r8, r1
 801884a:	4617      	mov	r7, r2
 801884c:	f7f8 ff16 	bl	801167c <GUI_Lock>
 8018850:	4630      	mov	r0, r6
 8018852:	f7f7 f889 	bl	800f968 <GUI_ALLOC_LockH>
 8018856:	4603      	mov	r3, r0
 8018858:	c803      	ldmia	r0, {r0, r1}
 801885a:	ac04      	add	r4, sp, #16
 801885c:	ad06      	add	r5, sp, #24
 801885e:	e884 0003 	stmia.w	r4, {r0, r1}
 8018862:	9303      	str	r3, [sp, #12]
 8018864:	e885 0003 	stmia.w	r5, {r0, r1}
 8018868:	f1b8 0f00 	cmp.w	r8, #0
 801886c:	d009      	beq.n	8018882 <WM_ResizeWindow.part.11+0x42>
 801886e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018870:	f402 7220 	and.w	r2, r2, #640	; 0x280
 8018874:	2a80      	cmp	r2, #128	; 0x80
 8018876:	d057      	beq.n	8018928 <WM_ResizeWindow.part.11+0xe8>
 8018878:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801887c:	4490      	add	r8, r2
 801887e:	f8ad 801c 	strh.w	r8, [sp, #28]
 8018882:	b157      	cbz	r7, 801889a <WM_ResizeWindow.part.11+0x5a>
 8018884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018886:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 801888a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801888e:	d052      	beq.n	8018936 <WM_ResizeWindow.part.11+0xf6>
 8018890:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8018894:	4417      	add	r7, r2
 8018896:	f8ad 701e 	strh.w	r7, [sp, #30]
 801889a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801889c:	03d1      	lsls	r1, r2, #15
 801889e:	d43d      	bmi.n	801891c <WM_ResizeWindow.part.11+0xdc>
 80188a0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80188a4:	0792      	lsls	r2, r2, #30
 80188a6:	e883 0003 	stmia.w	r3, {r0, r1}
 80188aa:	d50b      	bpl.n	80188c4 <WM_ResizeWindow.part.11+0x84>
 80188ac:	462a      	mov	r2, r5
 80188ae:	4621      	mov	r1, r4
 80188b0:	a808      	add	r0, sp, #32
 80188b2:	f7f7 fc03 	bl	80100bc <GUI_MergeRect>
 80188b6:	9b03      	ldr	r3, [sp, #12]
 80188b8:	a808      	add	r0, sp, #32
 80188ba:	6a1a      	ldr	r2, [r3, #32]
 80188bc:	6999      	ldr	r1, [r3, #24]
 80188be:	f7fe ff6b 	bl	8017798 <WM__InvalidateRectEx>
 80188c2:	9b03      	ldr	r3, [sp, #12]
 80188c4:	f9bd 001e 	ldrsh.w	r0, [sp, #30]
 80188c8:	f9bd 4016 	ldrsh.w	r4, [sp, #22]
 80188cc:	f9bd c01c 	ldrsh.w	ip, [sp, #28]
 80188d0:	f9bd e014 	ldrsh.w	lr, [sp, #20]
 80188d4:	f9bd 701a 	ldrsh.w	r7, [sp, #26]
 80188d8:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80188dc:	f9bd 5018 	ldrsh.w	r5, [sp, #24]
 80188e0:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 80188e4:	1b04      	subs	r4, r0, r4
 80188e6:	9400      	str	r4, [sp, #0]
 80188e8:	ac0a      	add	r4, sp, #40	; 0x28
 80188ea:	1aba      	subs	r2, r7, r2
 80188ec:	4618      	mov	r0, r3
 80188ee:	1a69      	subs	r1, r5, r1
 80188f0:	ebce 030c 	rsb	r3, lr, ip
 80188f4:	f001 fbc8 	bl	801a088 <WM__UpdateChildPositions>
 80188f8:	f854 1d1c 	ldr.w	r1, [r4, #-28]!
 80188fc:	f101 0008 	add.w	r0, r1, #8
 8018900:	f7f9 fc9e 	bl	8012240 <GUI__IntersectRect>
 8018904:	2105      	movs	r1, #5
 8018906:	4630      	mov	r0, r6
 8018908:	f7fe ffbc 	bl	8017884 <WM__SendMsgNoData>
 801890c:	4620      	mov	r0, r4
 801890e:	f7f7 f83d 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018912:	f7f8 fea9 	bl	8011668 <GUI_Unlock>
 8018916:	b00a      	add	sp, #40	; 0x28
 8018918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801891c:	4630      	mov	r0, r6
 801891e:	f7fe f92b 	bl	8016b78 <WM__InvalidateDrawAndDescs>
 8018922:	9b03      	ldr	r3, [sp, #12]
 8018924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8018926:	e7bb      	b.n	80188a0 <WM_ResizeWindow.part.11+0x60>
 8018928:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801892c:	ebc8 0802 	rsb	r8, r8, r2
 8018930:	f8ad 8018 	strh.w	r8, [sp, #24]
 8018934:	e7a5      	b.n	8018882 <WM_ResizeWindow.part.11+0x42>
 8018936:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801893a:	1bd7      	subs	r7, r2, r7
 801893c:	f8ad 701a 	strh.w	r7, [sp, #26]
 8018940:	e7ab      	b.n	801889a <WM_ResizeWindow.part.11+0x5a>
 8018942:	bf00      	nop

08018944 <_GetDialogItem.part.4>:
 8018944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018948:	b087      	sub	sp, #28
 801894a:	460d      	mov	r5, r1
 801894c:	f7f7 f802 	bl	800f954 <GUI_ALLOC_h2p>
 8018950:	69c3      	ldr	r3, [r0, #28]
 8018952:	9301      	str	r3, [sp, #4]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d04f      	beq.n	80189f8 <_GetDialogItem.part.4+0xb4>
 8018958:	2400      	movs	r4, #0
 801895a:	9801      	ldr	r0, [sp, #4]
 801895c:	f7f6 fffa 	bl	800f954 <GUI_ALLOC_h2p>
 8018960:	69c6      	ldr	r6, [r0, #28]
 8018962:	2e00      	cmp	r6, #0
 8018964:	d04d      	beq.n	8018a02 <_GetDialogItem.part.4+0xbe>
 8018966:	f10d 0a08 	add.w	sl, sp, #8
 801896a:	2715      	movs	r7, #21
 801896c:	e004      	b.n	8018978 <_GetDialogItem.part.4+0x34>
 801896e:	f7f6 fff1 	bl	800f954 <GUI_ALLOC_h2p>
 8018972:	6a06      	ldr	r6, [r0, #32]
 8018974:	2e00      	cmp	r6, #0
 8018976:	d044      	beq.n	8018a02 <_GetDialogItem.part.4+0xbe>
 8018978:	4630      	mov	r0, r6
 801897a:	4651      	mov	r1, sl
 801897c:	f8ca 4000 	str.w	r4, [sl]
 8018980:	f8ca 4004 	str.w	r4, [sl, #4]
 8018984:	f8ca 4008 	str.w	r4, [sl, #8]
 8018988:	f8ca 400c 	str.w	r4, [sl, #12]
 801898c:	9702      	str	r7, [sp, #8]
 801898e:	f7fe ff69 	bl	8017864 <WM_SendMessage>
 8018992:	9b05      	ldr	r3, [sp, #20]
 8018994:	429d      	cmp	r5, r3
 8018996:	4630      	mov	r0, r6
 8018998:	d1e9      	bne.n	801896e <_GetDialogItem.part.4+0x2a>
 801899a:	e02e      	b.n	80189fa <_GetDialogItem.part.4+0xb6>
 801899c:	4629      	mov	r1, r5
 801899e:	4650      	mov	r0, sl
 80189a0:	f7ff ffd0 	bl	8018944 <_GetDialogItem.part.4>
 80189a4:	2800      	cmp	r0, #0
 80189a6:	d179      	bne.n	8018a9c <_GetDialogItem.part.4+0x158>
 80189a8:	4650      	mov	r0, sl
 80189aa:	f7f6 ffd3 	bl	800f954 <GUI_ALLOC_h2p>
 80189ae:	f8d0 a020 	ldr.w	sl, [r0, #32]
 80189b2:	f1ba 0f00 	cmp.w	sl, #0
 80189b6:	f040 80a3 	bne.w	8018b00 <_GetDialogItem.part.4+0x1bc>
 80189ba:	4640      	mov	r0, r8
 80189bc:	f7f6 ffca 	bl	800f954 <GUI_ALLOC_h2p>
 80189c0:	f8d0 8020 	ldr.w	r8, [r0, #32]
 80189c4:	f1b8 0f00 	cmp.w	r8, #0
 80189c8:	d172      	bne.n	8018ab0 <_GetDialogItem.part.4+0x16c>
 80189ca:	4648      	mov	r0, r9
 80189cc:	f7f6 ffc2 	bl	800f954 <GUI_ALLOC_h2p>
 80189d0:	f8d0 9020 	ldr.w	r9, [r0, #32]
 80189d4:	f1b9 0f00 	cmp.w	r9, #0
 80189d8:	d141      	bne.n	8018a5e <_GetDialogItem.part.4+0x11a>
 80189da:	4658      	mov	r0, fp
 80189dc:	f7f6 ffba 	bl	800f954 <GUI_ALLOC_h2p>
 80189e0:	f8d0 b020 	ldr.w	fp, [r0, #32]
 80189e4:	f1bb 0f00 	cmp.w	fp, #0
 80189e8:	d113      	bne.n	8018a12 <_GetDialogItem.part.4+0xce>
 80189ea:	9801      	ldr	r0, [sp, #4]
 80189ec:	f7f6 ffb2 	bl	800f954 <GUI_ALLOC_h2p>
 80189f0:	6a03      	ldr	r3, [r0, #32]
 80189f2:	9301      	str	r3, [sp, #4]
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d1b0      	bne.n	801895a <_GetDialogItem.part.4+0x16>
 80189f8:	2600      	movs	r6, #0
 80189fa:	4630      	mov	r0, r6
 80189fc:	b007      	add	sp, #28
 80189fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a02:	9801      	ldr	r0, [sp, #4]
 8018a04:	f7f6 ffa6 	bl	800f954 <GUI_ALLOC_h2p>
 8018a08:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 8018a0c:	f1bb 0f00 	cmp.w	fp, #0
 8018a10:	d0eb      	beq.n	80189ea <_GetDialogItem.part.4+0xa6>
 8018a12:	4658      	mov	r0, fp
 8018a14:	f7f6 ff9e 	bl	800f954 <GUI_ALLOC_h2p>
 8018a18:	69c6      	ldr	r6, [r0, #28]
 8018a1a:	b1c6      	cbz	r6, 8018a4e <_GetDialogItem.part.4+0x10a>
 8018a1c:	f10d 0a08 	add.w	sl, sp, #8
 8018a20:	2715      	movs	r7, #21
 8018a22:	4630      	mov	r0, r6
 8018a24:	4651      	mov	r1, sl
 8018a26:	f8ca 4000 	str.w	r4, [sl]
 8018a2a:	f8ca 4004 	str.w	r4, [sl, #4]
 8018a2e:	f8ca 4008 	str.w	r4, [sl, #8]
 8018a32:	f8ca 400c 	str.w	r4, [sl, #12]
 8018a36:	9702      	str	r7, [sp, #8]
 8018a38:	f7fe ff14 	bl	8017864 <WM_SendMessage>
 8018a3c:	9b05      	ldr	r3, [sp, #20]
 8018a3e:	429d      	cmp	r5, r3
 8018a40:	4630      	mov	r0, r6
 8018a42:	d0da      	beq.n	80189fa <_GetDialogItem.part.4+0xb6>
 8018a44:	f7f6 ff86 	bl	800f954 <GUI_ALLOC_h2p>
 8018a48:	6a06      	ldr	r6, [r0, #32]
 8018a4a:	2e00      	cmp	r6, #0
 8018a4c:	d1e9      	bne.n	8018a22 <_GetDialogItem.part.4+0xde>
 8018a4e:	4658      	mov	r0, fp
 8018a50:	f7f6 ff80 	bl	800f954 <GUI_ALLOC_h2p>
 8018a54:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8018a58:	f1b9 0f00 	cmp.w	r9, #0
 8018a5c:	d0bd      	beq.n	80189da <_GetDialogItem.part.4+0x96>
 8018a5e:	4648      	mov	r0, r9
 8018a60:	f7f6 ff78 	bl	800f954 <GUI_ALLOC_h2p>
 8018a64:	69c6      	ldr	r6, [r0, #28]
 8018a66:	b1de      	cbz	r6, 8018aa0 <_GetDialogItem.part.4+0x15c>
 8018a68:	f10d 0a08 	add.w	sl, sp, #8
 8018a6c:	2715      	movs	r7, #21
 8018a6e:	e003      	b.n	8018a78 <_GetDialogItem.part.4+0x134>
 8018a70:	f7f6 ff70 	bl	800f954 <GUI_ALLOC_h2p>
 8018a74:	6a06      	ldr	r6, [r0, #32]
 8018a76:	b19e      	cbz	r6, 8018aa0 <_GetDialogItem.part.4+0x15c>
 8018a78:	4630      	mov	r0, r6
 8018a7a:	4651      	mov	r1, sl
 8018a7c:	f8ca 4000 	str.w	r4, [sl]
 8018a80:	f8ca 4004 	str.w	r4, [sl, #4]
 8018a84:	f8ca 4008 	str.w	r4, [sl, #8]
 8018a88:	f8ca 400c 	str.w	r4, [sl, #12]
 8018a8c:	9702      	str	r7, [sp, #8]
 8018a8e:	f7fe fee9 	bl	8017864 <WM_SendMessage>
 8018a92:	9b05      	ldr	r3, [sp, #20]
 8018a94:	429d      	cmp	r5, r3
 8018a96:	4630      	mov	r0, r6
 8018a98:	d1ea      	bne.n	8018a70 <_GetDialogItem.part.4+0x12c>
 8018a9a:	4630      	mov	r0, r6
 8018a9c:	4606      	mov	r6, r0
 8018a9e:	e7ac      	b.n	80189fa <_GetDialogItem.part.4+0xb6>
 8018aa0:	4648      	mov	r0, r9
 8018aa2:	f7f6 ff57 	bl	800f954 <GUI_ALLOC_h2p>
 8018aa6:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8018aaa:	f1b8 0f00 	cmp.w	r8, #0
 8018aae:	d08c      	beq.n	80189ca <_GetDialogItem.part.4+0x86>
 8018ab0:	4640      	mov	r0, r8
 8018ab2:	f7f6 ff4f 	bl	800f954 <GUI_ALLOC_h2p>
 8018ab6:	69c6      	ldr	r6, [r0, #28]
 8018ab8:	b1ce      	cbz	r6, 8018aee <_GetDialogItem.part.4+0x1aa>
 8018aba:	f10d 0a08 	add.w	sl, sp, #8
 8018abe:	2715      	movs	r7, #21
 8018ac0:	e003      	b.n	8018aca <_GetDialogItem.part.4+0x186>
 8018ac2:	f7f6 ff47 	bl	800f954 <GUI_ALLOC_h2p>
 8018ac6:	6a06      	ldr	r6, [r0, #32]
 8018ac8:	b18e      	cbz	r6, 8018aee <_GetDialogItem.part.4+0x1aa>
 8018aca:	4630      	mov	r0, r6
 8018acc:	4651      	mov	r1, sl
 8018ace:	f8ca 4000 	str.w	r4, [sl]
 8018ad2:	f8ca 4004 	str.w	r4, [sl, #4]
 8018ad6:	f8ca 4008 	str.w	r4, [sl, #8]
 8018ada:	f8ca 400c 	str.w	r4, [sl, #12]
 8018ade:	9702      	str	r7, [sp, #8]
 8018ae0:	f7fe fec0 	bl	8017864 <WM_SendMessage>
 8018ae4:	9b05      	ldr	r3, [sp, #20]
 8018ae6:	429d      	cmp	r5, r3
 8018ae8:	4630      	mov	r0, r6
 8018aea:	d1ea      	bne.n	8018ac2 <_GetDialogItem.part.4+0x17e>
 8018aec:	e7d5      	b.n	8018a9a <_GetDialogItem.part.4+0x156>
 8018aee:	4640      	mov	r0, r8
 8018af0:	f7f6 ff30 	bl	800f954 <GUI_ALLOC_h2p>
 8018af4:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 8018af8:	f1ba 0f00 	cmp.w	sl, #0
 8018afc:	f43f af5d 	beq.w	80189ba <_GetDialogItem.part.4+0x76>
 8018b00:	4650      	mov	r0, sl
 8018b02:	f7f6 ff27 	bl	800f954 <GUI_ALLOC_h2p>
 8018b06:	69c7      	ldr	r7, [r0, #28]
 8018b08:	2615      	movs	r6, #21
 8018b0a:	b937      	cbnz	r7, 8018b1a <_GetDialogItem.part.4+0x1d6>
 8018b0c:	e746      	b.n	801899c <_GetDialogItem.part.4+0x58>
 8018b0e:	f7f6 ff21 	bl	800f954 <GUI_ALLOC_h2p>
 8018b12:	6a07      	ldr	r7, [r0, #32]
 8018b14:	2f00      	cmp	r7, #0
 8018b16:	f43f af41 	beq.w	801899c <_GetDialogItem.part.4+0x58>
 8018b1a:	4638      	mov	r0, r7
 8018b1c:	a902      	add	r1, sp, #8
 8018b1e:	9403      	str	r4, [sp, #12]
 8018b20:	9404      	str	r4, [sp, #16]
 8018b22:	9405      	str	r4, [sp, #20]
 8018b24:	9602      	str	r6, [sp, #8]
 8018b26:	f7fe fe9d 	bl	8017864 <WM_SendMessage>
 8018b2a:	9a05      	ldr	r2, [sp, #20]
 8018b2c:	4295      	cmp	r5, r2
 8018b2e:	4638      	mov	r0, r7
 8018b30:	d1ed      	bne.n	8018b0e <_GetDialogItem.part.4+0x1ca>
 8018b32:	4638      	mov	r0, r7
 8018b34:	4606      	mov	r6, r0
 8018b36:	e760      	b.n	80189fa <_GetDialogItem.part.4+0xb6>

08018b38 <_GetDialogItem>:
 8018b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b3c:	b084      	sub	sp, #16
 8018b3e:	460e      	mov	r6, r1
 8018b40:	4680      	mov	r8, r0
 8018b42:	f7f6 ff07 	bl	800f954 <GUI_ALLOC_h2p>
 8018b46:	69c4      	ldr	r4, [r0, #28]
 8018b48:	b1b4      	cbz	r4, 8018b78 <_GetDialogItem+0x40>
 8018b4a:	2500      	movs	r5, #0
 8018b4c:	2715      	movs	r7, #21
 8018b4e:	e003      	b.n	8018b58 <_GetDialogItem+0x20>
 8018b50:	f7f6 ff00 	bl	800f954 <GUI_ALLOC_h2p>
 8018b54:	6a04      	ldr	r4, [r0, #32]
 8018b56:	b17c      	cbz	r4, 8018b78 <_GetDialogItem+0x40>
 8018b58:	4620      	mov	r0, r4
 8018b5a:	4669      	mov	r1, sp
 8018b5c:	9501      	str	r5, [sp, #4]
 8018b5e:	9502      	str	r5, [sp, #8]
 8018b60:	9503      	str	r5, [sp, #12]
 8018b62:	9700      	str	r7, [sp, #0]
 8018b64:	f7fe fe7e 	bl	8017864 <WM_SendMessage>
 8018b68:	9b03      	ldr	r3, [sp, #12]
 8018b6a:	429e      	cmp	r6, r3
 8018b6c:	4620      	mov	r0, r4
 8018b6e:	d1ef      	bne.n	8018b50 <_GetDialogItem+0x18>
 8018b70:	4620      	mov	r0, r4
 8018b72:	b004      	add	sp, #16
 8018b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b78:	4631      	mov	r1, r6
 8018b7a:	4640      	mov	r0, r8
 8018b7c:	f7ff fee2 	bl	8018944 <_GetDialogItem.part.4>
 8018b80:	b004      	add	sp, #16
 8018b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b86:	bf00      	nop

08018b88 <WM_ForEachDesc>:
 8018b88:	b570      	push	{r4, r5, r6, lr}
 8018b8a:	4604      	mov	r4, r0
 8018b8c:	460d      	mov	r5, r1
 8018b8e:	4616      	mov	r6, r2
 8018b90:	f7f8 fd74 	bl	801167c <GUI_Lock>
 8018b94:	4632      	mov	r2, r6
 8018b96:	4629      	mov	r1, r5
 8018b98:	4620      	mov	r0, r4
 8018b9a:	f001 f8ef 	bl	8019d7c <WM__ForEachDesc>
 8018b9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ba2:	f7f8 bd61 	b.w	8011668 <GUI_Unlock>
 8018ba6:	bf00      	nop

08018ba8 <WM_GetClientRect>:
 8018ba8:	b538      	push	{r3, r4, r5, lr}
 8018baa:	4605      	mov	r5, r0
 8018bac:	f7f8 fd66 	bl	801167c <GUI_Lock>
 8018bb0:	4b08      	ldr	r3, [pc, #32]	; (8018bd4 <WM_GetClientRect+0x2c>)
 8018bb2:	681c      	ldr	r4, [r3, #0]
 8018bb4:	b914      	cbnz	r4, 8018bbc <WM_GetClientRect+0x14>
 8018bb6:	4b08      	ldr	r3, [pc, #32]	; (8018bd8 <WM_GetClientRect+0x30>)
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8018bbc:	f7f8 fd5e 	bl	801167c <GUI_Lock>
 8018bc0:	4629      	mov	r1, r5
 8018bc2:	4620      	mov	r0, r4
 8018bc4:	f001 fb08 	bl	801a1d8 <WM__GetClientRectEx>
 8018bc8:	f7f8 fd4e 	bl	8011668 <GUI_Unlock>
 8018bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018bd0:	f7f8 bd4a 	b.w	8011668 <GUI_Unlock>
 8018bd4:	20030890 	.word	0x20030890
 8018bd8:	200000a8 	.word	0x200000a8

08018bdc <WM_GetClientWindow>:
 8018bdc:	b500      	push	{lr}
 8018bde:	b085      	sub	sp, #20
 8018be0:	a904      	add	r1, sp, #16
 8018be2:	2317      	movs	r3, #23
 8018be4:	f841 3d10 	str.w	r3, [r1, #-16]!
 8018be8:	2300      	movs	r3, #0
 8018bea:	9303      	str	r3, [sp, #12]
 8018bec:	f7fe fe3a 	bl	8017864 <WM_SendMessage>
 8018bf0:	9803      	ldr	r0, [sp, #12]
 8018bf2:	b005      	add	sp, #20
 8018bf4:	f85d fb04 	ldr.w	pc, [sp], #4

08018bf8 <WM_GetDesktopWindow>:
 8018bf8:	4a03      	ldr	r2, [pc, #12]	; (8018c08 <WM_GetDesktopWindow+0x10>)
 8018bfa:	4b04      	ldr	r3, [pc, #16]	; (8018c0c <WM_GetDesktopWindow+0x14>)
 8018bfc:	6812      	ldr	r2, [r2, #0]
 8018bfe:	7c52      	ldrb	r2, [r2, #17]
 8018c00:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018c04:	4770      	bx	lr
 8018c06:	bf00      	nop
 8018c08:	200000a8 	.word	0x200000a8
 8018c0c:	20030894 	.word	0x20030894

08018c10 <WM_GetDesktopWindowEx>:
 8018c10:	2801      	cmp	r0, #1
 8018c12:	bf9a      	itte	ls
 8018c14:	4b02      	ldrls	r3, [pc, #8]	; (8018c20 <WM_GetDesktopWindowEx+0x10>)
 8018c16:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8018c1a:	2000      	movhi	r0, #0
 8018c1c:	4770      	bx	lr
 8018c1e:	bf00      	nop
 8018c20:	20030894 	.word	0x20030894

08018c24 <WM_BringToBottom>:
 8018c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c28:	4604      	mov	r4, r0
 8018c2a:	b087      	sub	sp, #28
 8018c2c:	f7f8 fd26 	bl	801167c <GUI_Lock>
 8018c30:	b924      	cbnz	r4, 8018c3c <WM_BringToBottom+0x18>
 8018c32:	f7f8 fd19 	bl	8011668 <GUI_Unlock>
 8018c36:	b007      	add	sp, #28
 8018c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c3c:	4620      	mov	r0, r4
 8018c3e:	f7f6 fe93 	bl	800f968 <GUI_ALLOC_LockH>
 8018c42:	4603      	mov	r3, r0
 8018c44:	c803      	ldmia	r0, {r0, r1}
 8018c46:	ad04      	add	r5, sp, #16
 8018c48:	e885 0003 	stmia.w	r5, {r0, r1}
 8018c4c:	a801      	add	r0, sp, #4
 8018c4e:	9301      	str	r3, [sp, #4]
 8018c50:	6a1f      	ldr	r7, [r3, #32]
 8018c52:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
 8018c56:	f7f6 fe99 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018c5a:	4620      	mov	r0, r4
 8018c5c:	f001 f970 	bl	8019f40 <WM__GetPrevSibling>
 8018c60:	4606      	mov	r6, r0
 8018c62:	2800      	cmp	r0, #0
 8018c64:	d0e5      	beq.n	8018c32 <WM_BringToBottom+0xe>
 8018c66:	f7f8 fd09 	bl	801167c <GUI_Lock>
 8018c6a:	4620      	mov	r0, r4
 8018c6c:	f7f6 fe72 	bl	800f954 <GUI_ALLOC_h2p>
 8018c70:	f8d0 9018 	ldr.w	r9, [r0, #24]
 8018c74:	f7f8 fcf8 	bl	8011668 <GUI_Unlock>
 8018c78:	f018 0f02 	tst.w	r8, #2
 8018c7c:	d120      	bne.n	8018cc0 <WM_BringToBottom+0x9c>
 8018c7e:	4620      	mov	r0, r4
 8018c80:	f7f6 fe72 	bl	800f968 <GUI_ALLOC_LockH>
 8018c84:	9001      	str	r0, [sp, #4]
 8018c86:	4648      	mov	r0, r9
 8018c88:	f7f6 fe6e 	bl	800f968 <GUI_ALLOC_LockH>
 8018c8c:	9003      	str	r0, [sp, #12]
 8018c8e:	4630      	mov	r0, r6
 8018c90:	f7f6 fe6a 	bl	800f968 <GUI_ALLOC_LockH>
 8018c94:	9a03      	ldr	r2, [sp, #12]
 8018c96:	9901      	ldr	r1, [sp, #4]
 8018c98:	69d5      	ldr	r5, [r2, #28]
 8018c9a:	6207      	str	r7, [r0, #32]
 8018c9c:	4603      	mov	r3, r0
 8018c9e:	620d      	str	r5, [r1, #32]
 8018ca0:	a801      	add	r0, sp, #4
 8018ca2:	61d4      	str	r4, [r2, #28]
 8018ca4:	9302      	str	r3, [sp, #8]
 8018ca6:	f7f6 fe71 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018caa:	a803      	add	r0, sp, #12
 8018cac:	f7f6 fe6e 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018cb0:	a802      	add	r0, sp, #8
 8018cb2:	f7f6 fe6b 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018cb6:	f7f8 fcd7 	bl	8011668 <GUI_Unlock>
 8018cba:	b007      	add	sp, #28
 8018cbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018cc0:	4628      	mov	r0, r5
 8018cc2:	463a      	mov	r2, r7
 8018cc4:	4649      	mov	r1, r9
 8018cc6:	f7fe fd67 	bl	8017798 <WM__InvalidateRectEx>
 8018cca:	e7d8      	b.n	8018c7e <WM_BringToBottom+0x5a>

08018ccc <WM_GetDialogItem>:
 8018ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018cd0:	4680      	mov	r8, r0
 8018cd2:	b086      	sub	sp, #24
 8018cd4:	b918      	cbnz	r0, 8018cde <WM_GetDialogItem+0x12>
 8018cd6:	4640      	mov	r0, r8
 8018cd8:	b006      	add	sp, #24
 8018cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cde:	460e      	mov	r6, r1
 8018ce0:	f7f8 fccc 	bl	801167c <GUI_Lock>
 8018ce4:	4640      	mov	r0, r8
 8018ce6:	f7f6 fe3f 	bl	800f968 <GUI_ALLOC_LockH>
 8018cea:	ab06      	add	r3, sp, #24
 8018cec:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8018cf0:	f843 0d14 	str.w	r0, [r3, #-20]!
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	f7f6 fe49 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018cfa:	f1b8 0f00 	cmp.w	r8, #0
 8018cfe:	d044      	beq.n	8018d8a <WM_GetDialogItem+0xbe>
 8018d00:	2500      	movs	r5, #0
 8018d02:	2715      	movs	r7, #21
 8018d04:	a902      	add	r1, sp, #8
 8018d06:	4640      	mov	r0, r8
 8018d08:	9503      	str	r5, [sp, #12]
 8018d0a:	9504      	str	r5, [sp, #16]
 8018d0c:	9505      	str	r5, [sp, #20]
 8018d0e:	9702      	str	r7, [sp, #8]
 8018d10:	f7fe fda8 	bl	8017864 <WM_SendMessage>
 8018d14:	9b05      	ldr	r3, [sp, #20]
 8018d16:	429e      	cmp	r6, r3
 8018d18:	d016      	beq.n	8018d48 <WM_GetDialogItem+0x7c>
 8018d1a:	4640      	mov	r0, r8
 8018d1c:	f7f6 fe1a 	bl	800f954 <GUI_ALLOC_h2p>
 8018d20:	69c4      	ldr	r4, [r0, #28]
 8018d22:	b924      	cbnz	r4, 8018d2e <WM_GetDialogItem+0x62>
 8018d24:	e016      	b.n	8018d54 <WM_GetDialogItem+0x88>
 8018d26:	f7f6 fe15 	bl	800f954 <GUI_ALLOC_h2p>
 8018d2a:	6a04      	ldr	r4, [r0, #32]
 8018d2c:	b194      	cbz	r4, 8018d54 <WM_GetDialogItem+0x88>
 8018d2e:	4620      	mov	r0, r4
 8018d30:	a902      	add	r1, sp, #8
 8018d32:	9503      	str	r5, [sp, #12]
 8018d34:	9504      	str	r5, [sp, #16]
 8018d36:	9505      	str	r5, [sp, #20]
 8018d38:	9702      	str	r7, [sp, #8]
 8018d3a:	f7fe fd93 	bl	8017864 <WM_SendMessage>
 8018d3e:	9b05      	ldr	r3, [sp, #20]
 8018d40:	429e      	cmp	r6, r3
 8018d42:	4620      	mov	r0, r4
 8018d44:	d1ef      	bne.n	8018d26 <WM_GetDialogItem+0x5a>
 8018d46:	46a0      	mov	r8, r4
 8018d48:	f7f8 fc8e 	bl	8011668 <GUI_Unlock>
 8018d4c:	4640      	mov	r0, r8
 8018d4e:	b006      	add	sp, #24
 8018d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d54:	4640      	mov	r0, r8
 8018d56:	f7f6 fdfd 	bl	800f954 <GUI_ALLOC_h2p>
 8018d5a:	69c4      	ldr	r4, [r0, #28]
 8018d5c:	b92c      	cbnz	r4, 8018d6a <WM_GetDialogItem+0x9e>
 8018d5e:	e00c      	b.n	8018d7a <WM_GetDialogItem+0xae>
 8018d60:	4620      	mov	r0, r4
 8018d62:	f7f6 fdf7 	bl	800f954 <GUI_ALLOC_h2p>
 8018d66:	6a04      	ldr	r4, [r0, #32]
 8018d68:	b13c      	cbz	r4, 8018d7a <WM_GetDialogItem+0xae>
 8018d6a:	4631      	mov	r1, r6
 8018d6c:	4620      	mov	r0, r4
 8018d6e:	f7ff fee3 	bl	8018b38 <_GetDialogItem>
 8018d72:	2800      	cmp	r0, #0
 8018d74:	d0f4      	beq.n	8018d60 <WM_GetDialogItem+0x94>
 8018d76:	4680      	mov	r8, r0
 8018d78:	e7e6      	b.n	8018d48 <WM_GetDialogItem+0x7c>
 8018d7a:	4640      	mov	r0, r8
 8018d7c:	f7f6 fdea 	bl	800f954 <GUI_ALLOC_h2p>
 8018d80:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8018d84:	f1b8 0f00 	cmp.w	r8, #0
 8018d88:	d1bc      	bne.n	8018d04 <WM_GetDialogItem+0x38>
 8018d8a:	f04f 0800 	mov.w	r8, #0
 8018d8e:	e7db      	b.n	8018d48 <WM_GetDialogItem+0x7c>

08018d90 <WM_GetFirstChild>:
 8018d90:	b510      	push	{r4, lr}
 8018d92:	4604      	mov	r4, r0
 8018d94:	b138      	cbz	r0, 8018da6 <WM_GetFirstChild+0x16>
 8018d96:	f7f8 fc71 	bl	801167c <GUI_Lock>
 8018d9a:	4620      	mov	r0, r4
 8018d9c:	f7f6 fdda 	bl	800f954 <GUI_ALLOC_h2p>
 8018da0:	69c4      	ldr	r4, [r0, #28]
 8018da2:	f7f8 fc61 	bl	8011668 <GUI_Unlock>
 8018da6:	4620      	mov	r0, r4
 8018da8:	bd10      	pop	{r4, pc}
 8018daa:	bf00      	nop

08018dac <WM_GetFocusedWindow>:
 8018dac:	b510      	push	{r4, lr}
 8018dae:	f7f8 fc65 	bl	801167c <GUI_Lock>
 8018db2:	4a04      	ldr	r2, [pc, #16]	; (8018dc4 <WM_GetFocusedWindow+0x18>)
 8018db4:	4b04      	ldr	r3, [pc, #16]	; (8018dc8 <WM_GetFocusedWindow+0x1c>)
 8018db6:	6812      	ldr	r2, [r2, #0]
 8018db8:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8018dbc:	f7f8 fc54 	bl	8011668 <GUI_Unlock>
 8018dc0:	4620      	mov	r0, r4
 8018dc2:	bd10      	pop	{r4, pc}
 8018dc4:	200308b4 	.word	0x200308b4
 8018dc8:	200308a4 	.word	0x200308a4

08018dcc <WM_GetId>:
 8018dcc:	b500      	push	{lr}
 8018dce:	b085      	sub	sp, #20
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	2215      	movs	r2, #21
 8018dd4:	4669      	mov	r1, sp
 8018dd6:	9301      	str	r3, [sp, #4]
 8018dd8:	9302      	str	r3, [sp, #8]
 8018dda:	9303      	str	r3, [sp, #12]
 8018ddc:	9200      	str	r2, [sp, #0]
 8018dde:	f7fe fd41 	bl	8017864 <WM_SendMessage>
 8018de2:	9803      	ldr	r0, [sp, #12]
 8018de4:	b005      	add	sp, #20
 8018de6:	f85d fb04 	ldr.w	pc, [sp], #4
 8018dea:	bf00      	nop

08018dec <WM_GetWindowOrgX>:
 8018dec:	b510      	push	{r4, lr}
 8018dee:	4604      	mov	r4, r0
 8018df0:	b140      	cbz	r0, 8018e04 <WM_GetWindowOrgX+0x18>
 8018df2:	f7f8 fc43 	bl	801167c <GUI_Lock>
 8018df6:	4620      	mov	r0, r4
 8018df8:	f7f6 fdac 	bl	800f954 <GUI_ALLOC_h2p>
 8018dfc:	f9b0 4000 	ldrsh.w	r4, [r0]
 8018e00:	f7f8 fc32 	bl	8011668 <GUI_Unlock>
 8018e04:	4620      	mov	r0, r4
 8018e06:	bd10      	pop	{r4, pc}

08018e08 <WM_GetParent>:
 8018e08:	b510      	push	{r4, lr}
 8018e0a:	4604      	mov	r4, r0
 8018e0c:	b138      	cbz	r0, 8018e1e <WM_GetParent+0x16>
 8018e0e:	f7f8 fc35 	bl	801167c <GUI_Lock>
 8018e12:	4620      	mov	r0, r4
 8018e14:	f7f6 fd9e 	bl	800f954 <GUI_ALLOC_h2p>
 8018e18:	6984      	ldr	r4, [r0, #24]
 8018e1a:	f7f8 fc25 	bl	8011668 <GUI_Unlock>
 8018e1e:	4620      	mov	r0, r4
 8018e20:	bd10      	pop	{r4, pc}
 8018e22:	bf00      	nop

08018e24 <WM_HasFocus>:
 8018e24:	4a04      	ldr	r2, [pc, #16]	; (8018e38 <WM_HasFocus+0x14>)
 8018e26:	4b05      	ldr	r3, [pc, #20]	; (8018e3c <WM_HasFocus+0x18>)
 8018e28:	6812      	ldr	r2, [r2, #0]
 8018e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018e2e:	1a18      	subs	r0, r3, r0
 8018e30:	fab0 f080 	clz	r0, r0
 8018e34:	0940      	lsrs	r0, r0, #5
 8018e36:	4770      	bx	lr
 8018e38:	200308b4 	.word	0x200308b4
 8018e3c:	200308a4 	.word	0x200308a4

08018e40 <WM_IsFocusable>:
 8018e40:	b908      	cbnz	r0, 8018e46 <WM_IsFocusable+0x6>
 8018e42:	2000      	movs	r0, #0
 8018e44:	4770      	bx	lr
 8018e46:	b530      	push	{r4, r5, lr}
 8018e48:	4604      	mov	r4, r0
 8018e4a:	b085      	sub	sp, #20
 8018e4c:	f7f8 fc16 	bl	801167c <GUI_Lock>
 8018e50:	4620      	mov	r0, r4
 8018e52:	f7f6 fd7f 	bl	800f954 <GUI_ALLOC_h2p>
 8018e56:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8018e58:	f7f8 fc06 	bl	8011668 <GUI_Unlock>
 8018e5c:	07ab      	lsls	r3, r5, #30
 8018e5e:	d502      	bpl.n	8018e66 <WM_IsFocusable+0x26>
 8018e60:	f015 0510 	ands.w	r5, r5, #16
 8018e64:	d002      	beq.n	8018e6c <WM_IsFocusable+0x2c>
 8018e66:	2000      	movs	r0, #0
 8018e68:	b005      	add	sp, #20
 8018e6a:	bd30      	pop	{r4, r5, pc}
 8018e6c:	a904      	add	r1, sp, #16
 8018e6e:	231f      	movs	r3, #31
 8018e70:	4620      	mov	r0, r4
 8018e72:	f841 3d10 	str.w	r3, [r1, #-16]!
 8018e76:	9503      	str	r5, [sp, #12]
 8018e78:	f7fe fcf4 	bl	8017864 <WM_SendMessage>
 8018e7c:	9803      	ldr	r0, [sp, #12]
 8018e7e:	e7f3      	b.n	8018e68 <WM_IsFocusable+0x28>

08018e80 <WM_IsWindow>:
 8018e80:	b510      	push	{r4, lr}
 8018e82:	4604      	mov	r4, r0
 8018e84:	f7f8 fbfa 	bl	801167c <GUI_Lock>
 8018e88:	4620      	mov	r0, r4
 8018e8a:	f7fd fe5d 	bl	8016b48 <WM__IsWindow>
 8018e8e:	4604      	mov	r4, r0
 8018e90:	f7f8 fbea 	bl	8011668 <GUI_Unlock>
 8018e94:	4620      	mov	r0, r4
 8018e96:	bd10      	pop	{r4, pc}

08018e98 <WM_NotifyParent>:
 8018e98:	b530      	push	{r4, r5, lr}
 8018e9a:	b085      	sub	sp, #20
 8018e9c:	4604      	mov	r4, r0
 8018e9e:	2326      	movs	r3, #38	; 0x26
 8018ea0:	9103      	str	r1, [sp, #12]
 8018ea2:	9300      	str	r3, [sp, #0]
 8018ea4:	f7f8 fbea 	bl	801167c <GUI_Lock>
 8018ea8:	b91c      	cbnz	r4, 8018eb2 <WM_NotifyParent+0x1a>
 8018eaa:	f7f8 fbdd 	bl	8011668 <GUI_Unlock>
 8018eae:	b005      	add	sp, #20
 8018eb0:	bd30      	pop	{r4, r5, pc}
 8018eb2:	f7f8 fbe3 	bl	801167c <GUI_Lock>
 8018eb6:	4620      	mov	r0, r4
 8018eb8:	f7f6 fd4c 	bl	800f954 <GUI_ALLOC_h2p>
 8018ebc:	6985      	ldr	r5, [r0, #24]
 8018ebe:	f7f8 fbd3 	bl	8011668 <GUI_Unlock>
 8018ec2:	2d00      	cmp	r5, #0
 8018ec4:	d0f1      	beq.n	8018eaa <WM_NotifyParent+0x12>
 8018ec6:	4628      	mov	r0, r5
 8018ec8:	4669      	mov	r1, sp
 8018eca:	9402      	str	r4, [sp, #8]
 8018ecc:	f001 f886 	bl	8019fdc <WM__SendMessage>
 8018ed0:	f7f8 fbca 	bl	8011668 <GUI_Unlock>
 8018ed4:	b005      	add	sp, #20
 8018ed6:	bd30      	pop	{r4, r5, pc}

08018ed8 <WM_OnKey>:
 8018ed8:	b530      	push	{r4, r5, lr}
 8018eda:	b087      	sub	sp, #28
 8018edc:	4605      	mov	r5, r0
 8018ede:	460c      	mov	r4, r1
 8018ee0:	f7f8 fbcc 	bl	801167c <GUI_Lock>
 8018ee4:	4a0d      	ldr	r2, [pc, #52]	; (8018f1c <WM_OnKey+0x44>)
 8018ee6:	4b0e      	ldr	r3, [pc, #56]	; (8018f20 <WM_OnKey+0x48>)
 8018ee8:	6812      	ldr	r2, [r2, #0]
 8018eea:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018eee:	b928      	cbnz	r0, 8018efc <WM_OnKey+0x24>
 8018ef0:	4604      	mov	r4, r0
 8018ef2:	f7f8 fbb9 	bl	8011668 <GUI_Unlock>
 8018ef6:	4620      	mov	r0, r4
 8018ef8:	b007      	add	sp, #28
 8018efa:	bd30      	pop	{r4, r5, pc}
 8018efc:	230e      	movs	r3, #14
 8018efe:	a902      	add	r1, sp, #8
 8018f00:	9401      	str	r4, [sp, #4]
 8018f02:	9302      	str	r3, [sp, #8]
 8018f04:	9500      	str	r5, [sp, #0]
 8018f06:	f8cd d014 	str.w	sp, [sp, #20]
 8018f0a:	f001 f867 	bl	8019fdc <WM__SendMessage>
 8018f0e:	f7f8 fbab 	bl	8011668 <GUI_Unlock>
 8018f12:	2401      	movs	r4, #1
 8018f14:	4620      	mov	r0, r4
 8018f16:	b007      	add	sp, #28
 8018f18:	bd30      	pop	{r4, r5, pc}
 8018f1a:	bf00      	nop
 8018f1c:	200308b4 	.word	0x200308b4
 8018f20:	200308a4 	.word	0x200308a4

08018f24 <WM_Paint>:
 8018f24:	b510      	push	{r4, lr}
 8018f26:	4604      	mov	r4, r0
 8018f28:	b09e      	sub	sp, #120	; 0x78
 8018f2a:	f7fe fcc5 	bl	80178b8 <WM_InvalidateWindow>
 8018f2e:	b194      	cbz	r4, 8018f56 <WM_Paint+0x32>
 8018f30:	f7f8 fba4 	bl	801167c <GUI_Lock>
 8018f34:	a801      	add	r0, sp, #4
 8018f36:	f7f7 f9bf 	bl	80102b8 <GUI_SaveContext_W>
 8018f3a:	4620      	mov	r0, r4
 8018f3c:	f7ff f962 	bl	8018204 <WM__Paint>
 8018f40:	a801      	add	r0, sp, #4
 8018f42:	f7f7 f9c3 	bl	80102cc <GUI_RestoreContext>
 8018f46:	f7f8 fb8f 	bl	8011668 <GUI_Unlock>
 8018f4a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8018f4c:	f7fa f8ae 	bl	80130ac <LCD_SetColor>
 8018f50:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018f52:	f7fa f8a5 	bl	80130a0 <LCD_SetBkColor>
 8018f56:	b01e      	add	sp, #120	; 0x78
 8018f58:	bd10      	pop	{r4, pc}
 8018f5a:	bf00      	nop

08018f5c <WM_ResizeWindow>:
 8018f5c:	b500      	push	{lr}
 8018f5e:	ea51 0e02 	orrs.w	lr, r1, r2
 8018f62:	d000      	beq.n	8018f66 <WM_ResizeWindow+0xa>
 8018f64:	b908      	cbnz	r0, 8018f6a <WM_ResizeWindow+0xe>
 8018f66:	f85d fb04 	ldr.w	pc, [sp], #4
 8018f6a:	f85d eb04 	ldr.w	lr, [sp], #4
 8018f6e:	f7ff bc67 	b.w	8018840 <WM_ResizeWindow.part.11>
 8018f72:	bf00      	nop

08018f74 <WM_SendMessageNoPara>:
 8018f74:	b538      	push	{r3, r4, r5, lr}
 8018f76:	4604      	mov	r4, r0
 8018f78:	460d      	mov	r5, r1
 8018f7a:	f7f8 fb7f 	bl	801167c <GUI_Lock>
 8018f7e:	4629      	mov	r1, r5
 8018f80:	4620      	mov	r0, r4
 8018f82:	f001 f86d 	bl	801a060 <WM__SendMessageNoPara>
 8018f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018f8a:	f7f8 bb6d 	b.w	8011668 <GUI_Unlock>
 8018f8e:	bf00      	nop

08018f90 <WM_SendToParent>:
 8018f90:	b1e1      	cbz	r1, 8018fcc <WM_SendToParent+0x3c>
 8018f92:	b570      	push	{r4, r5, r6, lr}
 8018f94:	4605      	mov	r5, r0
 8018f96:	460c      	mov	r4, r1
 8018f98:	f7f8 fb70 	bl	801167c <GUI_Lock>
 8018f9c:	b91d      	cbnz	r5, 8018fa6 <WM_SendToParent+0x16>
 8018f9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018fa2:	f7f8 bb61 	b.w	8011668 <GUI_Unlock>
 8018fa6:	f7f8 fb69 	bl	801167c <GUI_Lock>
 8018faa:	4628      	mov	r0, r5
 8018fac:	f7f6 fcd2 	bl	800f954 <GUI_ALLOC_h2p>
 8018fb0:	6986      	ldr	r6, [r0, #24]
 8018fb2:	f7f8 fb59 	bl	8011668 <GUI_Unlock>
 8018fb6:	2e00      	cmp	r6, #0
 8018fb8:	d0f1      	beq.n	8018f9e <WM_SendToParent+0xe>
 8018fba:	60a5      	str	r5, [r4, #8]
 8018fbc:	4621      	mov	r1, r4
 8018fbe:	4630      	mov	r0, r6
 8018fc0:	f001 f80c 	bl	8019fdc <WM__SendMessage>
 8018fc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018fc8:	f7f8 bb4e 	b.w	8011668 <GUI_Unlock>
 8018fcc:	4770      	bx	lr
 8018fce:	bf00      	nop

08018fd0 <WM_SetCallback>:
 8018fd0:	b570      	push	{r4, r5, r6, lr}
 8018fd2:	b082      	sub	sp, #8
 8018fd4:	b1b0      	cbz	r0, 8019004 <WM_SetCallback+0x34>
 8018fd6:	4604      	mov	r4, r0
 8018fd8:	460d      	mov	r5, r1
 8018fda:	f7f8 fb4f 	bl	801167c <GUI_Lock>
 8018fde:	4620      	mov	r0, r4
 8018fe0:	f7f6 fcc2 	bl	800f968 <GUI_ALLOC_LockH>
 8018fe4:	ab02      	add	r3, sp, #8
 8018fe6:	6906      	ldr	r6, [r0, #16]
 8018fe8:	f843 0d04 	str.w	r0, [r3, #-4]!
 8018fec:	6105      	str	r5, [r0, #16]
 8018fee:	4618      	mov	r0, r3
 8018ff0:	f7f6 fccc 	bl	800f98c <GUI_ALLOC_UnlockH>
 8018ff4:	4620      	mov	r0, r4
 8018ff6:	f7fe fc5f 	bl	80178b8 <WM_InvalidateWindow>
 8018ffa:	f7f8 fb35 	bl	8011668 <GUI_Unlock>
 8018ffe:	4630      	mov	r0, r6
 8019000:	b002      	add	sp, #8
 8019002:	bd70      	pop	{r4, r5, r6, pc}
 8019004:	4606      	mov	r6, r0
 8019006:	4630      	mov	r0, r6
 8019008:	b002      	add	sp, #8
 801900a:	bd70      	pop	{r4, r5, r6, pc}

0801900c <WM_SetFocus>:
 801900c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019010:	b086      	sub	sp, #24
 8019012:	2500      	movs	r5, #0
 8019014:	4604      	mov	r4, r0
 8019016:	9503      	str	r5, [sp, #12]
 8019018:	9502      	str	r5, [sp, #8]
 801901a:	9504      	str	r5, [sp, #16]
 801901c:	9505      	str	r5, [sp, #20]
 801901e:	f7f8 fb2d 	bl	801167c <GUI_Lock>
 8019022:	2c00      	cmp	r4, #0
 8019024:	d04e      	beq.n	80190c4 <WM_SetFocus+0xb8>
 8019026:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80190e0 <WM_SetFocus+0xd4>
 801902a:	4f2c      	ldr	r7, [pc, #176]	; (80190dc <WM_SetFocus+0xd0>)
 801902c:	f8d8 3000 	ldr.w	r3, [r8]
 8019030:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8019034:	4284      	cmp	r4, r0
 8019036:	d045      	beq.n	80190c4 <WM_SetFocus+0xb8>
 8019038:	231e      	movs	r3, #30
 801903a:	e88d 0011 	stmia.w	sp, {r0, r4}
 801903e:	9505      	str	r5, [sp, #20]
 8019040:	9302      	str	r3, [sp, #8]
 8019042:	2800      	cmp	r0, #0
 8019044:	d145      	bne.n	80190d2 <WM_SetFocus+0xc6>
 8019046:	2301      	movs	r3, #1
 8019048:	a902      	add	r1, sp, #8
 801904a:	4620      	mov	r0, r4
 801904c:	9305      	str	r3, [sp, #20]
 801904e:	f000 ffc5 	bl	8019fdc <WM__SendMessage>
 8019052:	9e05      	ldr	r6, [sp, #20]
 8019054:	2e00      	cmp	r6, #0
 8019056:	d136      	bne.n	80190c6 <WM_SetFocus+0xba>
 8019058:	f8d8 3000 	ldr.w	r3, [r8]
 801905c:	2520      	movs	r5, #32
 801905e:	f847 4023 	str.w	r4, [r7, r3, lsl #2]
 8019062:	e004      	b.n	801906e <WM_SetFocus+0x62>
 8019064:	9502      	str	r5, [sp, #8]
 8019066:	f8cd d014 	str.w	sp, [sp, #20]
 801906a:	f000 ffb7 	bl	8019fdc <WM__SendMessage>
 801906e:	f7f8 fb05 	bl	801167c <GUI_Lock>
 8019072:	4620      	mov	r0, r4
 8019074:	f7f6 fc6e 	bl	800f954 <GUI_ALLOC_h2p>
 8019078:	6984      	ldr	r4, [r0, #24]
 801907a:	f7f8 faf5 	bl	8011668 <GUI_Unlock>
 801907e:	a902      	add	r1, sp, #8
 8019080:	4620      	mov	r0, r4
 8019082:	2c00      	cmp	r4, #0
 8019084:	d1ee      	bne.n	8019064 <WM_SetFocus+0x58>
 8019086:	9c00      	ldr	r4, [sp, #0]
 8019088:	f7f8 faf8 	bl	801167c <GUI_Lock>
 801908c:	4620      	mov	r0, r4
 801908e:	f7fd fd5b 	bl	8016b48 <WM__IsWindow>
 8019092:	4605      	mov	r5, r0
 8019094:	f7f8 fae8 	bl	8011668 <GUI_Unlock>
 8019098:	b1ad      	cbz	r5, 80190c6 <WM_SetFocus+0xba>
 801909a:	b1a4      	cbz	r4, 80190c6 <WM_SetFocus+0xba>
 801909c:	2520      	movs	r5, #32
 801909e:	e004      	b.n	80190aa <WM_SetFocus+0x9e>
 80190a0:	9502      	str	r5, [sp, #8]
 80190a2:	f8cd d014 	str.w	sp, [sp, #20]
 80190a6:	f000 ff99 	bl	8019fdc <WM__SendMessage>
 80190aa:	f7f8 fae7 	bl	801167c <GUI_Lock>
 80190ae:	4620      	mov	r0, r4
 80190b0:	f7f6 fc50 	bl	800f954 <GUI_ALLOC_h2p>
 80190b4:	6984      	ldr	r4, [r0, #24]
 80190b6:	f7f8 fad7 	bl	8011668 <GUI_Unlock>
 80190ba:	a902      	add	r1, sp, #8
 80190bc:	4620      	mov	r0, r4
 80190be:	2c00      	cmp	r4, #0
 80190c0:	d1ee      	bne.n	80190a0 <WM_SetFocus+0x94>
 80190c2:	e000      	b.n	80190c6 <WM_SetFocus+0xba>
 80190c4:	2601      	movs	r6, #1
 80190c6:	f7f8 facf 	bl	8011668 <GUI_Unlock>
 80190ca:	4630      	mov	r0, r6
 80190cc:	b006      	add	sp, #24
 80190ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190d2:	a902      	add	r1, sp, #8
 80190d4:	f000 ff82 	bl	8019fdc <WM__SendMessage>
 80190d8:	e7b5      	b.n	8019046 <WM_SetFocus+0x3a>
 80190da:	bf00      	nop
 80190dc:	200308a4 	.word	0x200308a4
 80190e0:	200308b4 	.word	0x200308b4

080190e4 <WM_SetSize>:
 80190e4:	b900      	cbnz	r0, 80190e8 <WM_SetSize+0x4>
 80190e6:	4770      	bx	lr
 80190e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190ec:	4604      	mov	r4, r0
 80190ee:	b082      	sub	sp, #8
 80190f0:	4617      	mov	r7, r2
 80190f2:	4688      	mov	r8, r1
 80190f4:	f7f8 fac2 	bl	801167c <GUI_Lock>
 80190f8:	4620      	mov	r0, r4
 80190fa:	f7f6 fc35 	bl	800f968 <GUI_ALLOC_LockH>
 80190fe:	f10d 0e08 	add.w	lr, sp, #8
 8019102:	f9b0 1000 	ldrsh.w	r1, [r0]
 8019106:	f9b0 5006 	ldrsh.w	r5, [r0, #6]
 801910a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801910e:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
 8019112:	f84e 0d04 	str.w	r0, [lr, #-4]!
 8019116:	1a76      	subs	r6, r6, r1
 8019118:	1aeb      	subs	r3, r5, r3
 801911a:	3301      	adds	r3, #1
 801911c:	1c75      	adds	r5, r6, #1
 801911e:	ebc5 0508 	rsb	r5, r5, r8
 8019122:	1afe      	subs	r6, r7, r3
 8019124:	4670      	mov	r0, lr
 8019126:	f7f6 fc31 	bl	800f98c <GUI_ALLOC_UnlockH>
 801912a:	ea55 0306 	orrs.w	r3, r5, r6
 801912e:	d104      	bne.n	801913a <WM_SetSize+0x56>
 8019130:	f7f8 fa9a 	bl	8011668 <GUI_Unlock>
 8019134:	b002      	add	sp, #8
 8019136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801913a:	4632      	mov	r2, r6
 801913c:	4629      	mov	r1, r5
 801913e:	4620      	mov	r0, r4
 8019140:	f7ff fb7e 	bl	8018840 <WM_ResizeWindow.part.11>
 8019144:	e7f4      	b.n	8019130 <WM_SetSize+0x4c>
 8019146:	bf00      	nop

08019148 <WM_SetUserClipRect>:
 8019148:	b538      	push	{r3, r4, r5, lr}
 801914a:	4605      	mov	r5, r0
 801914c:	f7f8 fa96 	bl	801167c <GUI_Lock>
 8019150:	4b04      	ldr	r3, [pc, #16]	; (8019164 <WM_SetUserClipRect+0x1c>)
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8019156:	645d      	str	r5, [r3, #68]	; 0x44
 8019158:	f7fd fbd2 	bl	8016900 <WM__ActivateClipRect>
 801915c:	f7f8 fa84 	bl	8011668 <GUI_Unlock>
 8019160:	4620      	mov	r0, r4
 8019162:	bd38      	pop	{r3, r4, r5, pc}
 8019164:	200000a8 	.word	0x200000a8

08019168 <WM_InvalidateWindowAndDescs>:
 8019168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801916c:	4604      	mov	r4, r0
 801916e:	b083      	sub	sp, #12
 8019170:	f7f8 fa84 	bl	801167c <GUI_Lock>
 8019174:	b924      	cbnz	r4, 8019180 <WM_InvalidateWindowAndDescs+0x18>
 8019176:	b003      	add	sp, #12
 8019178:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801917c:	f7f8 ba74 	b.w	8011668 <GUI_Unlock>
 8019180:	4620      	mov	r0, r4
 8019182:	f7fe fb99 	bl	80178b8 <WM_InvalidateWindow>
 8019186:	f7f8 fa79 	bl	801167c <GUI_Lock>
 801918a:	4620      	mov	r0, r4
 801918c:	f7f6 fbe2 	bl	800f954 <GUI_ALLOC_h2p>
 8019190:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8019194:	f7f8 fa68 	bl	8011668 <GUI_Unlock>
 8019198:	f1b8 0f00 	cmp.w	r8, #0
 801919c:	d0eb      	beq.n	8019176 <WM_InvalidateWindowAndDescs+0xe>
 801919e:	f7f8 fa6d 	bl	801167c <GUI_Lock>
 80191a2:	4640      	mov	r0, r8
 80191a4:	f7fe fb88 	bl	80178b8 <WM_InvalidateWindow>
 80191a8:	f7f8 fa68 	bl	801167c <GUI_Lock>
 80191ac:	4640      	mov	r0, r8
 80191ae:	f7f6 fbd1 	bl	800f954 <GUI_ALLOC_h2p>
 80191b2:	f8d0 901c 	ldr.w	r9, [r0, #28]
 80191b6:	f7f8 fa57 	bl	8011668 <GUI_Unlock>
 80191ba:	f1b9 0f00 	cmp.w	r9, #0
 80191be:	f000 80b8 	beq.w	8019332 <WM_InvalidateWindowAndDescs+0x1ca>
 80191c2:	f7f8 fa5b 	bl	801167c <GUI_Lock>
 80191c6:	4648      	mov	r0, r9
 80191c8:	f7fe fb76 	bl	80178b8 <WM_InvalidateWindow>
 80191cc:	f7f8 fa56 	bl	801167c <GUI_Lock>
 80191d0:	4648      	mov	r0, r9
 80191d2:	f7f6 fbbf 	bl	800f954 <GUI_ALLOC_h2p>
 80191d6:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 80191da:	f7f8 fa45 	bl	8011668 <GUI_Unlock>
 80191de:	f1ba 0f00 	cmp.w	sl, #0
 80191e2:	f000 809b 	beq.w	801931c <WM_InvalidateWindowAndDescs+0x1b4>
 80191e6:	f7f8 fa49 	bl	801167c <GUI_Lock>
 80191ea:	4650      	mov	r0, sl
 80191ec:	f7fe fb64 	bl	80178b8 <WM_InvalidateWindow>
 80191f0:	f7f8 fa44 	bl	801167c <GUI_Lock>
 80191f4:	4650      	mov	r0, sl
 80191f6:	f7f6 fbad 	bl	800f954 <GUI_ALLOC_h2p>
 80191fa:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 80191fe:	f7f8 fa33 	bl	8011668 <GUI_Unlock>
 8019202:	f1bb 0f00 	cmp.w	fp, #0
 8019206:	d07e      	beq.n	8019306 <WM_InvalidateWindowAndDescs+0x19e>
 8019208:	f7f8 fa38 	bl	801167c <GUI_Lock>
 801920c:	4658      	mov	r0, fp
 801920e:	f7fe fb53 	bl	80178b8 <WM_InvalidateWindow>
 8019212:	f7f8 fa33 	bl	801167c <GUI_Lock>
 8019216:	4658      	mov	r0, fp
 8019218:	f7f6 fb9c 	bl	800f954 <GUI_ALLOC_h2p>
 801921c:	69c3      	ldr	r3, [r0, #28]
 801921e:	9301      	str	r3, [sp, #4]
 8019220:	461c      	mov	r4, r3
 8019222:	f7f8 fa21 	bl	8011668 <GUI_Unlock>
 8019226:	2c00      	cmp	r4, #0
 8019228:	d063      	beq.n	80192f2 <WM_InvalidateWindowAndDescs+0x18a>
 801922a:	f7f8 fa27 	bl	801167c <GUI_Lock>
 801922e:	9c01      	ldr	r4, [sp, #4]
 8019230:	4620      	mov	r0, r4
 8019232:	f7fe fb41 	bl	80178b8 <WM_InvalidateWindow>
 8019236:	f7f8 fa21 	bl	801167c <GUI_Lock>
 801923a:	4620      	mov	r0, r4
 801923c:	f7f6 fb8a 	bl	800f954 <GUI_ALLOC_h2p>
 8019240:	69c6      	ldr	r6, [r0, #28]
 8019242:	f7f8 fa11 	bl	8011668 <GUI_Unlock>
 8019246:	2e00      	cmp	r6, #0
 8019248:	d04a      	beq.n	80192e0 <WM_InvalidateWindowAndDescs+0x178>
 801924a:	f7f8 fa17 	bl	801167c <GUI_Lock>
 801924e:	4630      	mov	r0, r6
 8019250:	f7fe fb32 	bl	80178b8 <WM_InvalidateWindow>
 8019254:	f7f8 fa12 	bl	801167c <GUI_Lock>
 8019258:	4630      	mov	r0, r6
 801925a:	f7f6 fb7b 	bl	800f954 <GUI_ALLOC_h2p>
 801925e:	69c5      	ldr	r5, [r0, #28]
 8019260:	f7f8 fa02 	bl	8011668 <GUI_Unlock>
 8019264:	b3a5      	cbz	r5, 80192d0 <WM_InvalidateWindowAndDescs+0x168>
 8019266:	f7f8 fa09 	bl	801167c <GUI_Lock>
 801926a:	4628      	mov	r0, r5
 801926c:	f7fe fb24 	bl	80178b8 <WM_InvalidateWindow>
 8019270:	f7f8 fa04 	bl	801167c <GUI_Lock>
 8019274:	4628      	mov	r0, r5
 8019276:	f7f6 fb6d 	bl	800f954 <GUI_ALLOC_h2p>
 801927a:	69c4      	ldr	r4, [r0, #28]
 801927c:	f7f8 f9f4 	bl	8011668 <GUI_Unlock>
 8019280:	b1f4      	cbz	r4, 80192c0 <WM_InvalidateWindowAndDescs+0x158>
 8019282:	f7f8 f9fb 	bl	801167c <GUI_Lock>
 8019286:	4620      	mov	r0, r4
 8019288:	f7fe fb16 	bl	80178b8 <WM_InvalidateWindow>
 801928c:	f7f8 f9f6 	bl	801167c <GUI_Lock>
 8019290:	4620      	mov	r0, r4
 8019292:	f7f6 fb5f 	bl	800f954 <GUI_ALLOC_h2p>
 8019296:	69c7      	ldr	r7, [r0, #28]
 8019298:	f7f8 f9e6 	bl	8011668 <GUI_Unlock>
 801929c:	b147      	cbz	r7, 80192b0 <WM_InvalidateWindowAndDescs+0x148>
 801929e:	4638      	mov	r0, r7
 80192a0:	f7ff ff62 	bl	8019168 <WM_InvalidateWindowAndDescs>
 80192a4:	4638      	mov	r0, r7
 80192a6:	f7f6 fb55 	bl	800f954 <GUI_ALLOC_h2p>
 80192aa:	6a07      	ldr	r7, [r0, #32]
 80192ac:	2f00      	cmp	r7, #0
 80192ae:	d1f6      	bne.n	801929e <WM_InvalidateWindowAndDescs+0x136>
 80192b0:	f7f8 f9da 	bl	8011668 <GUI_Unlock>
 80192b4:	4620      	mov	r0, r4
 80192b6:	f7f6 fb4d 	bl	800f954 <GUI_ALLOC_h2p>
 80192ba:	6a04      	ldr	r4, [r0, #32]
 80192bc:	2c00      	cmp	r4, #0
 80192be:	d1e0      	bne.n	8019282 <WM_InvalidateWindowAndDescs+0x11a>
 80192c0:	f7f8 f9d2 	bl	8011668 <GUI_Unlock>
 80192c4:	4628      	mov	r0, r5
 80192c6:	f7f6 fb45 	bl	800f954 <GUI_ALLOC_h2p>
 80192ca:	6a05      	ldr	r5, [r0, #32]
 80192cc:	2d00      	cmp	r5, #0
 80192ce:	d1ca      	bne.n	8019266 <WM_InvalidateWindowAndDescs+0xfe>
 80192d0:	f7f8 f9ca 	bl	8011668 <GUI_Unlock>
 80192d4:	4630      	mov	r0, r6
 80192d6:	f7f6 fb3d 	bl	800f954 <GUI_ALLOC_h2p>
 80192da:	6a06      	ldr	r6, [r0, #32]
 80192dc:	2e00      	cmp	r6, #0
 80192de:	d1b4      	bne.n	801924a <WM_InvalidateWindowAndDescs+0xe2>
 80192e0:	f7f8 f9c2 	bl	8011668 <GUI_Unlock>
 80192e4:	9801      	ldr	r0, [sp, #4]
 80192e6:	f7f6 fb35 	bl	800f954 <GUI_ALLOC_h2p>
 80192ea:	6a03      	ldr	r3, [r0, #32]
 80192ec:	9301      	str	r3, [sp, #4]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d19b      	bne.n	801922a <WM_InvalidateWindowAndDescs+0xc2>
 80192f2:	f7f8 f9b9 	bl	8011668 <GUI_Unlock>
 80192f6:	4658      	mov	r0, fp
 80192f8:	f7f6 fb2c 	bl	800f954 <GUI_ALLOC_h2p>
 80192fc:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8019300:	f1bb 0f00 	cmp.w	fp, #0
 8019304:	d180      	bne.n	8019208 <WM_InvalidateWindowAndDescs+0xa0>
 8019306:	f7f8 f9af 	bl	8011668 <GUI_Unlock>
 801930a:	4650      	mov	r0, sl
 801930c:	f7f6 fb22 	bl	800f954 <GUI_ALLOC_h2p>
 8019310:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8019314:	f1ba 0f00 	cmp.w	sl, #0
 8019318:	f47f af65 	bne.w	80191e6 <WM_InvalidateWindowAndDescs+0x7e>
 801931c:	f7f8 f9a4 	bl	8011668 <GUI_Unlock>
 8019320:	4648      	mov	r0, r9
 8019322:	f7f6 fb17 	bl	800f954 <GUI_ALLOC_h2p>
 8019326:	f8d0 9020 	ldr.w	r9, [r0, #32]
 801932a:	f1b9 0f00 	cmp.w	r9, #0
 801932e:	f47f af48 	bne.w	80191c2 <WM_InvalidateWindowAndDescs+0x5a>
 8019332:	f7f8 f999 	bl	8011668 <GUI_Unlock>
 8019336:	4640      	mov	r0, r8
 8019338:	f7f6 fb0c 	bl	800f954 <GUI_ALLOC_h2p>
 801933c:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8019340:	f1b8 0f00 	cmp.w	r8, #0
 8019344:	f47f af2b 	bne.w	801919e <WM_InvalidateWindowAndDescs+0x36>
 8019348:	e715      	b.n	8019176 <WM_InvalidateWindowAndDescs+0xe>
 801934a:	bf00      	nop

0801934c <WM_ShowWindow>:
 801934c:	b900      	cbnz	r0, 8019350 <WM_ShowWindow+0x4>
 801934e:	4770      	bx	lr
 8019350:	b510      	push	{r4, lr}
 8019352:	4604      	mov	r4, r0
 8019354:	b082      	sub	sp, #8
 8019356:	f7f8 f991 	bl	801167c <GUI_Lock>
 801935a:	4620      	mov	r0, r4
 801935c:	f7f6 fb04 	bl	800f968 <GUI_ALLOC_LockH>
 8019360:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8019362:	9001      	str	r0, [sp, #4]
 8019364:	079a      	lsls	r2, r3, #30
 8019366:	d506      	bpl.n	8019376 <WM_ShowWindow+0x2a>
 8019368:	a801      	add	r0, sp, #4
 801936a:	f7f6 fb0f 	bl	800f98c <GUI_ALLOC_UnlockH>
 801936e:	f7f8 f97b 	bl	8011668 <GUI_Unlock>
 8019372:	b002      	add	sp, #8
 8019374:	bd10      	pop	{r4, pc}
 8019376:	f043 0302 	orr.w	r3, r3, #2
 801937a:	6283      	str	r3, [r0, #40]	; 0x28
 801937c:	4620      	mov	r0, r4
 801937e:	f7ff fef3 	bl	8019168 <WM_InvalidateWindowAndDescs>
 8019382:	e7f1      	b.n	8019368 <WM_ShowWindow+0x1c>

08019384 <WM_ValidateWindow>:
 8019384:	b510      	push	{r4, lr}
 8019386:	4604      	mov	r4, r0
 8019388:	b082      	sub	sp, #8
 801938a:	f7f8 f977 	bl	801167c <GUI_Lock>
 801938e:	b91c      	cbnz	r4, 8019398 <WM_ValidateWindow+0x14>
 8019390:	f7f8 f96a 	bl	8011668 <GUI_Unlock>
 8019394:	b002      	add	sp, #8
 8019396:	bd10      	pop	{r4, pc}
 8019398:	4620      	mov	r0, r4
 801939a:	f7f6 fae5 	bl	800f968 <GUI_ALLOC_LockH>
 801939e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80193a0:	9001      	str	r0, [sp, #4]
 80193a2:	069a      	lsls	r2, r3, #26
 80193a4:	d506      	bpl.n	80193b4 <WM_ValidateWindow+0x30>
 80193a6:	4907      	ldr	r1, [pc, #28]	; (80193c4 <WM_ValidateWindow+0x40>)
 80193a8:	880a      	ldrh	r2, [r1, #0]
 80193aa:	f023 0320 	bic.w	r3, r3, #32
 80193ae:	3a01      	subs	r2, #1
 80193b0:	6283      	str	r3, [r0, #40]	; 0x28
 80193b2:	800a      	strh	r2, [r1, #0]
 80193b4:	a801      	add	r0, sp, #4
 80193b6:	f7f6 fae9 	bl	800f98c <GUI_ALLOC_UnlockH>
 80193ba:	f7f8 f955 	bl	8011668 <GUI_Unlock>
 80193be:	b002      	add	sp, #8
 80193c0:	bd10      	pop	{r4, pc}
 80193c2:	bf00      	nop
 80193c4:	200308ac 	.word	0x200308ac

080193c8 <_MULTIBUF_End>:
 80193c8:	b570      	push	{r4, r5, r6, lr}
 80193ca:	4d0a      	ldr	r5, [pc, #40]	; (80193f4 <_MULTIBUF_End+0x2c>)
 80193cc:	4e0a      	ldr	r6, [pc, #40]	; (80193f8 <_MULTIBUF_End+0x30>)
 80193ce:	2400      	movs	r4, #0
 80193d0:	682a      	ldr	r2, [r5, #0]
 80193d2:	6833      	ldr	r3, [r6, #0]
 80193d4:	4620      	mov	r0, r4
 80193d6:	b932      	cbnz	r2, 80193e6 <_MULTIBUF_End+0x1e>
 80193d8:	40e3      	lsrs	r3, r4
 80193da:	07db      	lsls	r3, r3, #31
 80193dc:	d407      	bmi.n	80193ee <_MULTIBUF_End+0x26>
 80193de:	3401      	adds	r4, #1
 80193e0:	2c02      	cmp	r4, #2
 80193e2:	d1f5      	bne.n	80193d0 <_MULTIBUF_End+0x8>
 80193e4:	bd70      	pop	{r4, r5, r6, pc}
 80193e6:	4013      	ands	r3, r2
 80193e8:	40e3      	lsrs	r3, r4
 80193ea:	07da      	lsls	r2, r3, #31
 80193ec:	d5f7      	bpl.n	80193de <_MULTIBUF_End+0x16>
 80193ee:	f7f8 f827 	bl	8011440 <GUI_MULTIBUF_EndEx>
 80193f2:	e7f4      	b.n	80193de <_MULTIBUF_End+0x16>
 80193f4:	20030824 	.word	0x20030824
 80193f8:	200308bc 	.word	0x200308bc

080193fc <_MULTIBUF_Begin>:
 80193fc:	b570      	push	{r4, r5, r6, lr}
 80193fe:	4d0a      	ldr	r5, [pc, #40]	; (8019428 <_MULTIBUF_Begin+0x2c>)
 8019400:	4e0a      	ldr	r6, [pc, #40]	; (801942c <_MULTIBUF_Begin+0x30>)
 8019402:	2400      	movs	r4, #0
 8019404:	682a      	ldr	r2, [r5, #0]
 8019406:	6833      	ldr	r3, [r6, #0]
 8019408:	4620      	mov	r0, r4
 801940a:	b932      	cbnz	r2, 801941a <_MULTIBUF_Begin+0x1e>
 801940c:	40e3      	lsrs	r3, r4
 801940e:	07db      	lsls	r3, r3, #31
 8019410:	d407      	bmi.n	8019422 <_MULTIBUF_Begin+0x26>
 8019412:	3401      	adds	r4, #1
 8019414:	2c02      	cmp	r4, #2
 8019416:	d1f5      	bne.n	8019404 <_MULTIBUF_Begin+0x8>
 8019418:	bd70      	pop	{r4, r5, r6, pc}
 801941a:	4013      	ands	r3, r2
 801941c:	40e3      	lsrs	r3, r4
 801941e:	07da      	lsls	r2, r3, #31
 8019420:	d5f7      	bpl.n	8019412 <_MULTIBUF_Begin+0x16>
 8019422:	f7f7 ffd7 	bl	80113d4 <GUI_MULTIBUF_BeginEx>
 8019426:	e7f4      	b.n	8019412 <_MULTIBUF_Begin+0x16>
 8019428:	20030824 	.word	0x20030824
 801942c:	200308bc 	.word	0x200308bc

08019430 <WM_MULTIBUF_Enable>:
 8019430:	4a05      	ldr	r2, [pc, #20]	; (8019448 <WM_MULTIBUF_Enable+0x18>)
 8019432:	4b06      	ldr	r3, [pc, #24]	; (801944c <WM_MULTIBUF_Enable+0x1c>)
 8019434:	6811      	ldr	r1, [r2, #0]
 8019436:	2800      	cmp	r0, #0
 8019438:	bf08      	it	eq
 801943a:	2300      	moveq	r3, #0
 801943c:	1c08      	adds	r0, r1, #0
 801943e:	6013      	str	r3, [r2, #0]
 8019440:	bf18      	it	ne
 8019442:	2001      	movne	r0, #1
 8019444:	4770      	bx	lr
 8019446:	bf00      	nop
 8019448:	200308d4 	.word	0x200308d4
 801944c:	08031490 	.word	0x08031490

08019450 <_MoveDescendents>:
 8019450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019454:	b0b5      	sub	sp, #212	; 0xd4
 8019456:	2300      	movs	r3, #0
 8019458:	931d      	str	r3, [sp, #116]	; 0x74
 801945a:	931c      	str	r3, [sp, #112]	; 0x70
 801945c:	931e      	str	r3, [sp, #120]	; 0x78
 801945e:	931f      	str	r3, [sp, #124]	; 0x7c
 8019460:	9006      	str	r0, [sp, #24]
 8019462:	2800      	cmp	r0, #0
 8019464:	f000 8117 	beq.w	8019696 <_MoveDescendents+0x246>
 8019468:	468a      	mov	sl, r1
 801946a:	4691      	mov	r9, r2
 801946c:	f04f 0b03 	mov.w	fp, #3
 8019470:	9806      	ldr	r0, [sp, #24]
 8019472:	f7f6 fa79 	bl	800f968 <GUI_ALLOC_LockH>
 8019476:	464a      	mov	r2, r9
 8019478:	4651      	mov	r1, sl
 801947a:	900a      	str	r0, [sp, #40]	; 0x28
 801947c:	f7f6 fe4c 	bl	8010118 <GUI_MoveRect>
 8019480:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019482:	464a      	mov	r2, r9
 8019484:	3008      	adds	r0, #8
 8019486:	4651      	mov	r1, sl
 8019488:	f7f6 fe46 	bl	8010118 <GUI_MoveRect>
 801948c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801948e:	69da      	ldr	r2, [r3, #28]
 8019490:	6a1b      	ldr	r3, [r3, #32]
 8019492:	9307      	str	r3, [sp, #28]
 8019494:	a80a      	add	r0, sp, #40	; 0x28
 8019496:	4614      	mov	r4, r2
 8019498:	9205      	str	r2, [sp, #20]
 801949a:	f7f6 fa77 	bl	800f98c <GUI_ALLOC_UnlockH>
 801949e:	2300      	movs	r3, #0
 80194a0:	9320      	str	r3, [sp, #128]	; 0x80
 80194a2:	9321      	str	r3, [sp, #132]	; 0x84
 80194a4:	9322      	str	r3, [sp, #136]	; 0x88
 80194a6:	9323      	str	r3, [sp, #140]	; 0x8c
 80194a8:	2c00      	cmp	r4, #0
 80194aa:	f000 80e3 	beq.w	8019674 <_MoveDescendents+0x224>
 80194ae:	9805      	ldr	r0, [sp, #20]
 80194b0:	f7f6 fa5a 	bl	800f968 <GUI_ALLOC_LockH>
 80194b4:	464a      	mov	r2, r9
 80194b6:	4651      	mov	r1, sl
 80194b8:	900b      	str	r0, [sp, #44]	; 0x2c
 80194ba:	f7f6 fe2d 	bl	8010118 <GUI_MoveRect>
 80194be:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80194c0:	464a      	mov	r2, r9
 80194c2:	3008      	adds	r0, #8
 80194c4:	4651      	mov	r1, sl
 80194c6:	f7f6 fe27 	bl	8010118 <GUI_MoveRect>
 80194ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80194cc:	69da      	ldr	r2, [r3, #28]
 80194ce:	6a1b      	ldr	r3, [r3, #32]
 80194d0:	9308      	str	r3, [sp, #32]
 80194d2:	a80b      	add	r0, sp, #44	; 0x2c
 80194d4:	4614      	mov	r4, r2
 80194d6:	9204      	str	r2, [sp, #16]
 80194d8:	f7f6 fa58 	bl	800f98c <GUI_ALLOC_UnlockH>
 80194dc:	2300      	movs	r3, #0
 80194de:	9324      	str	r3, [sp, #144]	; 0x90
 80194e0:	9325      	str	r3, [sp, #148]	; 0x94
 80194e2:	9326      	str	r3, [sp, #152]	; 0x98
 80194e4:	9327      	str	r3, [sp, #156]	; 0x9c
 80194e6:	2c00      	cmp	r4, #0
 80194e8:	f000 80b3 	beq.w	8019652 <_MoveDescendents+0x202>
 80194ec:	9804      	ldr	r0, [sp, #16]
 80194ee:	f7f6 fa3b 	bl	800f968 <GUI_ALLOC_LockH>
 80194f2:	464a      	mov	r2, r9
 80194f4:	4651      	mov	r1, sl
 80194f6:	900c      	str	r0, [sp, #48]	; 0x30
 80194f8:	f7f6 fe0e 	bl	8010118 <GUI_MoveRect>
 80194fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80194fe:	464a      	mov	r2, r9
 8019500:	3008      	adds	r0, #8
 8019502:	4651      	mov	r1, sl
 8019504:	f7f6 fe08 	bl	8010118 <GUI_MoveRect>
 8019508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801950a:	69da      	ldr	r2, [r3, #28]
 801950c:	6a1b      	ldr	r3, [r3, #32]
 801950e:	9309      	str	r3, [sp, #36]	; 0x24
 8019510:	a80c      	add	r0, sp, #48	; 0x30
 8019512:	4614      	mov	r4, r2
 8019514:	9202      	str	r2, [sp, #8]
 8019516:	f7f6 fa39 	bl	800f98c <GUI_ALLOC_UnlockH>
 801951a:	2300      	movs	r3, #0
 801951c:	9328      	str	r3, [sp, #160]	; 0xa0
 801951e:	9329      	str	r3, [sp, #164]	; 0xa4
 8019520:	932a      	str	r3, [sp, #168]	; 0xa8
 8019522:	932b      	str	r3, [sp, #172]	; 0xac
 8019524:	2c00      	cmp	r4, #0
 8019526:	f000 8083 	beq.w	8019630 <_MoveDescendents+0x1e0>
 801952a:	4654      	mov	r4, sl
 801952c:	464d      	mov	r5, r9
 801952e:	9802      	ldr	r0, [sp, #8]
 8019530:	f7f6 fa1a 	bl	800f968 <GUI_ALLOC_LockH>
 8019534:	462a      	mov	r2, r5
 8019536:	4621      	mov	r1, r4
 8019538:	900d      	str	r0, [sp, #52]	; 0x34
 801953a:	f7f6 fded 	bl	8010118 <GUI_MoveRect>
 801953e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8019540:	462a      	mov	r2, r5
 8019542:	3008      	adds	r0, #8
 8019544:	4621      	mov	r1, r4
 8019546:	f7f6 fde7 	bl	8010118 <GUI_MoveRect>
 801954a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801954c:	a80d      	add	r0, sp, #52	; 0x34
 801954e:	f8d3 901c 	ldr.w	r9, [r3, #28]
 8019552:	6a1b      	ldr	r3, [r3, #32]
 8019554:	9303      	str	r3, [sp, #12]
 8019556:	f7f6 fa19 	bl	800f98c <GUI_ALLOC_UnlockH>
 801955a:	2300      	movs	r3, #0
 801955c:	932c      	str	r3, [sp, #176]	; 0xb0
 801955e:	932d      	str	r3, [sp, #180]	; 0xb4
 8019560:	932e      	str	r3, [sp, #184]	; 0xb8
 8019562:	932f      	str	r3, [sp, #188]	; 0xbc
 8019564:	f1b9 0f00 	cmp.w	r9, #0
 8019568:	d052      	beq.n	8019610 <_MoveDescendents+0x1c0>
 801956a:	9301      	str	r3, [sp, #4]
 801956c:	4648      	mov	r0, r9
 801956e:	f7f6 f9fb 	bl	800f968 <GUI_ALLOC_LockH>
 8019572:	462a      	mov	r2, r5
 8019574:	4621      	mov	r1, r4
 8019576:	900e      	str	r0, [sp, #56]	; 0x38
 8019578:	f7f6 fdce 	bl	8010118 <GUI_MoveRect>
 801957c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801957e:	462a      	mov	r2, r5
 8019580:	3008      	adds	r0, #8
 8019582:	4621      	mov	r1, r4
 8019584:	f7f6 fdc8 	bl	8010118 <GUI_MoveRect>
 8019588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801958a:	a80e      	add	r0, sp, #56	; 0x38
 801958c:	69de      	ldr	r6, [r3, #28]
 801958e:	6a1b      	ldr	r3, [r3, #32]
 8019590:	9300      	str	r3, [sp, #0]
 8019592:	f7f6 f9fb 	bl	800f98c <GUI_ALLOC_UnlockH>
 8019596:	9b01      	ldr	r3, [sp, #4]
 8019598:	9330      	str	r3, [sp, #192]	; 0xc0
 801959a:	9331      	str	r3, [sp, #196]	; 0xc4
 801959c:	9332      	str	r3, [sp, #200]	; 0xc8
 801959e:	9333      	str	r3, [sp, #204]	; 0xcc
 80195a0:	af1a      	add	r7, sp, #104	; 0x68
 80195a2:	b336      	cbz	r6, 80195f2 <_MoveDescendents+0x1a2>
 80195a4:	4630      	mov	r0, r6
 80195a6:	f7f6 f9df 	bl	800f968 <GUI_ALLOC_LockH>
 80195aa:	462a      	mov	r2, r5
 80195ac:	4621      	mov	r1, r4
 80195ae:	900f      	str	r0, [sp, #60]	; 0x3c
 80195b0:	f7f6 fdb2 	bl	8010118 <GUI_MoveRect>
 80195b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80195b6:	462a      	mov	r2, r5
 80195b8:	4621      	mov	r1, r4
 80195ba:	3008      	adds	r0, #8
 80195bc:	f7f6 fdac 	bl	8010118 <GUI_MoveRect>
 80195c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80195c2:	f8d3 a01c 	ldr.w	sl, [r3, #28]
 80195c6:	f8d3 8020 	ldr.w	r8, [r3, #32]
 80195ca:	a80f      	add	r0, sp, #60	; 0x3c
 80195cc:	f7f6 f9de 	bl	800f98c <GUI_ALLOC_UnlockH>
 80195d0:	4621      	mov	r1, r4
 80195d2:	4650      	mov	r0, sl
 80195d4:	462a      	mov	r2, r5
 80195d6:	f7ff ff3b 	bl	8019450 <_MoveDescendents>
 80195da:	4630      	mov	r0, r6
 80195dc:	a930      	add	r1, sp, #192	; 0xc0
 80195de:	4646      	mov	r6, r8
 80195e0:	f8cd b0c0 	str.w	fp, [sp, #192]	; 0xc0
 80195e4:	9733      	str	r7, [sp, #204]	; 0xcc
 80195e6:	941a      	str	r4, [sp, #104]	; 0x68
 80195e8:	951b      	str	r5, [sp, #108]	; 0x6c
 80195ea:	f000 fcf7 	bl	8019fdc <WM__SendMessage>
 80195ee:	2e00      	cmp	r6, #0
 80195f0:	d1d8      	bne.n	80195a4 <_MoveDescendents+0x154>
 80195f2:	4648      	mov	r0, r9
 80195f4:	ab18      	add	r3, sp, #96	; 0x60
 80195f6:	a92c      	add	r1, sp, #176	; 0xb0
 80195f8:	f8cd b0b0 	str.w	fp, [sp, #176]	; 0xb0
 80195fc:	932f      	str	r3, [sp, #188]	; 0xbc
 80195fe:	9418      	str	r4, [sp, #96]	; 0x60
 8019600:	9519      	str	r5, [sp, #100]	; 0x64
 8019602:	f000 fceb 	bl	8019fdc <WM__SendMessage>
 8019606:	f8dd 9000 	ldr.w	r9, [sp]
 801960a:	f1b9 0f00 	cmp.w	r9, #0
 801960e:	d1ad      	bne.n	801956c <_MoveDescendents+0x11c>
 8019610:	ab16      	add	r3, sp, #88	; 0x58
 8019612:	9802      	ldr	r0, [sp, #8]
 8019614:	932b      	str	r3, [sp, #172]	; 0xac
 8019616:	a928      	add	r1, sp, #160	; 0xa0
 8019618:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 801961c:	9416      	str	r4, [sp, #88]	; 0x58
 801961e:	9517      	str	r5, [sp, #92]	; 0x5c
 8019620:	f000 fcdc 	bl	8019fdc <WM__SendMessage>
 8019624:	9b03      	ldr	r3, [sp, #12]
 8019626:	9302      	str	r3, [sp, #8]
 8019628:	2b00      	cmp	r3, #0
 801962a:	d180      	bne.n	801952e <_MoveDescendents+0xde>
 801962c:	46a2      	mov	sl, r4
 801962e:	46a9      	mov	r9, r5
 8019630:	ab14      	add	r3, sp, #80	; 0x50
 8019632:	9804      	ldr	r0, [sp, #16]
 8019634:	9327      	str	r3, [sp, #156]	; 0x9c
 8019636:	a924      	add	r1, sp, #144	; 0x90
 8019638:	f8cd b090 	str.w	fp, [sp, #144]	; 0x90
 801963c:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 8019640:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 8019644:	f000 fcca 	bl	8019fdc <WM__SendMessage>
 8019648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801964a:	9304      	str	r3, [sp, #16]
 801964c:	2b00      	cmp	r3, #0
 801964e:	f47f af4d 	bne.w	80194ec <_MoveDescendents+0x9c>
 8019652:	ab12      	add	r3, sp, #72	; 0x48
 8019654:	9805      	ldr	r0, [sp, #20]
 8019656:	9323      	str	r3, [sp, #140]	; 0x8c
 8019658:	a920      	add	r1, sp, #128	; 0x80
 801965a:	f8cd b080 	str.w	fp, [sp, #128]	; 0x80
 801965e:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8019662:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8019666:	f000 fcb9 	bl	8019fdc <WM__SendMessage>
 801966a:	9b08      	ldr	r3, [sp, #32]
 801966c:	9305      	str	r3, [sp, #20]
 801966e:	2b00      	cmp	r3, #0
 8019670:	f47f af1d 	bne.w	80194ae <_MoveDescendents+0x5e>
 8019674:	2303      	movs	r3, #3
 8019676:	931c      	str	r3, [sp, #112]	; 0x70
 8019678:	9806      	ldr	r0, [sp, #24]
 801967a:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 801967e:	ab10      	add	r3, sp, #64	; 0x40
 8019680:	a91c      	add	r1, sp, #112	; 0x70
 8019682:	931f      	str	r3, [sp, #124]	; 0x7c
 8019684:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8019688:	f000 fca8 	bl	8019fdc <WM__SendMessage>
 801968c:	9b07      	ldr	r3, [sp, #28]
 801968e:	9306      	str	r3, [sp, #24]
 8019690:	2b00      	cmp	r3, #0
 8019692:	f47f aeed 	bne.w	8019470 <_MoveDescendents+0x20>
 8019696:	b035      	add	sp, #212	; 0xd4
 8019698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801969c <WM_MoveWindow>:
 801969c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80196a0:	b08b      	sub	sp, #44	; 0x2c
 80196a2:	4605      	mov	r5, r0
 80196a4:	460c      	mov	r4, r1
 80196a6:	4616      	mov	r6, r2
 80196a8:	f7f7 ffe8 	bl	801167c <GUI_Lock>
 80196ac:	2300      	movs	r3, #0
 80196ae:	9307      	str	r3, [sp, #28]
 80196b0:	9306      	str	r3, [sp, #24]
 80196b2:	9308      	str	r3, [sp, #32]
 80196b4:	9309      	str	r3, [sp, #36]	; 0x24
 80196b6:	2d00      	cmp	r5, #0
 80196b8:	d03a      	beq.n	8019730 <WM_MoveWindow+0x94>
 80196ba:	b90c      	cbnz	r4, 80196c0 <WM_MoveWindow+0x24>
 80196bc:	2e00      	cmp	r6, #0
 80196be:	d037      	beq.n	8019730 <WM_MoveWindow+0x94>
 80196c0:	4628      	mov	r0, r5
 80196c2:	f7f6 f951 	bl	800f968 <GUI_ALLOC_LockH>
 80196c6:	4603      	mov	r3, r0
 80196c8:	c803      	ldmia	r0, {r0, r1}
 80196ca:	f10d 0808 	add.w	r8, sp, #8
 80196ce:	e888 0003 	stmia.w	r8, {r0, r1}
 80196d2:	4632      	mov	r2, r6
 80196d4:	4618      	mov	r0, r3
 80196d6:	4621      	mov	r1, r4
 80196d8:	9301      	str	r3, [sp, #4]
 80196da:	f7f6 fd1d 	bl	8010118 <GUI_MoveRect>
 80196de:	9801      	ldr	r0, [sp, #4]
 80196e0:	af0a      	add	r7, sp, #40	; 0x28
 80196e2:	4632      	mov	r2, r6
 80196e4:	4621      	mov	r1, r4
 80196e6:	3008      	adds	r0, #8
 80196e8:	f7f6 fd16 	bl	8010118 <GUI_MoveRect>
 80196ec:	f857 3d24 	ldr.w	r3, [r7, #-36]!
 80196f0:	f8d3 901c 	ldr.w	r9, [r3, #28]
 80196f4:	4638      	mov	r0, r7
 80196f6:	f7f6 f949 	bl	800f98c <GUI_ALLOC_UnlockH>
 80196fa:	4632      	mov	r2, r6
 80196fc:	4621      	mov	r1, r4
 80196fe:	4648      	mov	r0, r9
 8019700:	f7ff fea6 	bl	8019450 <_MoveDescendents>
 8019704:	4628      	mov	r0, r5
 8019706:	f7f6 f92f 	bl	800f968 <GUI_ALLOC_LockH>
 801970a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801970c:	9001      	str	r0, [sp, #4]
 801970e:	0792      	lsls	r2, r2, #30
 8019710:	d501      	bpl.n	8019716 <WM_MoveWindow+0x7a>
 8019712:	6981      	ldr	r1, [r0, #24]
 8019714:	b989      	cbnz	r1, 801973a <WM_MoveWindow+0x9e>
 8019716:	4638      	mov	r0, r7
 8019718:	f7f6 f938 	bl	800f98c <GUI_ALLOC_UnlockH>
 801971c:	2203      	movs	r2, #3
 801971e:	ab04      	add	r3, sp, #16
 8019720:	a906      	add	r1, sp, #24
 8019722:	4628      	mov	r0, r5
 8019724:	9404      	str	r4, [sp, #16]
 8019726:	9605      	str	r6, [sp, #20]
 8019728:	9206      	str	r2, [sp, #24]
 801972a:	9309      	str	r3, [sp, #36]	; 0x24
 801972c:	f000 fc56 	bl	8019fdc <WM__SendMessage>
 8019730:	f7f7 ff9a 	bl	8011668 <GUI_Unlock>
 8019734:	b00b      	add	sp, #44	; 0x2c
 8019736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801973a:	6a02      	ldr	r2, [r0, #32]
 801973c:	f7fd ffb4 	bl	80176a8 <WM__InvalidateParent>
 8019740:	9b01      	ldr	r3, [sp, #4]
 8019742:	4640      	mov	r0, r8
 8019744:	6a1a      	ldr	r2, [r3, #32]
 8019746:	6999      	ldr	r1, [r3, #24]
 8019748:	f7fd ffae 	bl	80176a8 <WM__InvalidateParent>
 801974c:	e7e3      	b.n	8019716 <WM_MoveWindow+0x7a>
 801974e:	bf00      	nop

08019750 <WM__DeleteAssocTimer>:
 8019750:	b570      	push	{r4, r5, r6, lr}
 8019752:	b082      	sub	sp, #8
 8019754:	4605      	mov	r5, r0
 8019756:	f7f7 ff91 	bl	801167c <GUI_Lock>
 801975a:	4668      	mov	r0, sp
 801975c:	f002 feda 	bl	801c514 <GUI_TIMER__GetFirstTimer>
 8019760:	4604      	mov	r4, r0
 8019762:	b168      	cbz	r0, 8019780 <WM__DeleteAssocTimer+0x30>
 8019764:	2101      	movs	r1, #1
 8019766:	4620      	mov	r0, r4
 8019768:	f002 ff74 	bl	801c654 <GUI_TIMER_GetFlag>
 801976c:	9b00      	ldr	r3, [sp, #0]
 801976e:	b103      	cbz	r3, 8019772 <WM__DeleteAssocTimer+0x22>
 8019770:	b950      	cbnz	r0, 8019788 <WM__DeleteAssocTimer+0x38>
 8019772:	4620      	mov	r0, r4
 8019774:	4669      	mov	r1, sp
 8019776:	f002 fee5 	bl	801c544 <GUI_TIMER__GetNextTimerLin>
 801977a:	4604      	mov	r4, r0
 801977c:	2c00      	cmp	r4, #0
 801977e:	d1f1      	bne.n	8019764 <WM__DeleteAssocTimer+0x14>
 8019780:	f7f7 ff72 	bl	8011668 <GUI_Unlock>
 8019784:	b002      	add	sp, #8
 8019786:	bd70      	pop	{r4, r5, r6, pc}
 8019788:	4618      	mov	r0, r3
 801978a:	f7f6 f8e3 	bl	800f954 <GUI_ALLOC_h2p>
 801978e:	6843      	ldr	r3, [r0, #4]
 8019790:	42ab      	cmp	r3, r5
 8019792:	4669      	mov	r1, sp
 8019794:	4620      	mov	r0, r4
 8019796:	d1ee      	bne.n	8019776 <WM__DeleteAssocTimer+0x26>
 8019798:	9e00      	ldr	r6, [sp, #0]
 801979a:	f002 fed3 	bl	801c544 <GUI_TIMER__GetNextTimerLin>
 801979e:	4604      	mov	r4, r0
 80197a0:	2e00      	cmp	r6, #0
 80197a2:	d0eb      	beq.n	801977c <WM__DeleteAssocTimer+0x2c>
 80197a4:	f7f7 ff6a 	bl	801167c <GUI_Lock>
 80197a8:	4630      	mov	r0, r6
 80197aa:	f7f6 f8dd 	bl	800f968 <GUI_ALLOC_LockH>
 80197ae:	9001      	str	r0, [sp, #4]
 80197b0:	6800      	ldr	r0, [r0, #0]
 80197b2:	f002 fee7 	bl	801c584 <GUI_TIMER_Delete>
 80197b6:	a801      	add	r0, sp, #4
 80197b8:	f7f6 f8e8 	bl	800f98c <GUI_ALLOC_UnlockH>
 80197bc:	4630      	mov	r0, r6
 80197be:	f7f6 fa75 	bl	800fcac <GUI_ALLOC_Free>
 80197c2:	f7f7 ff51 	bl	8011668 <GUI_Unlock>
 80197c6:	2c00      	cmp	r4, #0
 80197c8:	d1cc      	bne.n	8019764 <WM__DeleteAssocTimer+0x14>
 80197ca:	e7d9      	b.n	8019780 <WM__DeleteAssocTimer+0x30>

080197cc <WM__SendTouchMessage>:
 80197cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197ce:	68cc      	ldr	r4, [r1, #12]
 80197d0:	b087      	sub	sp, #28
 80197d2:	460d      	mov	r5, r1
 80197d4:	4607      	mov	r7, r0
 80197d6:	b194      	cbz	r4, 80197fe <WM__SendTouchMessage+0x32>
 80197d8:	f7f6 f8c6 	bl	800f968 <GUI_ALLOC_LockH>
 80197dc:	aa06      	add	r2, sp, #24
 80197de:	f9b0 e000 	ldrsh.w	lr, [r0]
 80197e2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80197e6:	6821      	ldr	r1, [r4, #0]
 80197e8:	6863      	ldr	r3, [r4, #4]
 80197ea:	f842 0d14 	str.w	r0, [r2, #-20]!
 80197ee:	ebce 0101 	rsb	r1, lr, r1
 80197f2:	1b9b      	subs	r3, r3, r6
 80197f4:	6021      	str	r1, [r4, #0]
 80197f6:	4610      	mov	r0, r2
 80197f8:	6063      	str	r3, [r4, #4]
 80197fa:	f7f6 f8c7 	bl	800f98c <GUI_ALLOC_UnlockH>
 80197fe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8019802:	ae02      	add	r6, sp, #8
 8019804:	f04f 0e0d 	mov.w	lr, #13
 8019808:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801980c:	463c      	mov	r4, r7
 801980e:	9704      	str	r7, [sp, #16]
 8019810:	f8cd e008 	str.w	lr, [sp, #8]
 8019814:	4620      	mov	r0, r4
 8019816:	f7ff fb33 	bl	8018e80 <WM_IsWindow>
 801981a:	b170      	cbz	r0, 801983a <WM__SendTouchMessage+0x6e>
 801981c:	4620      	mov	r0, r4
 801981e:	f7ff faf3 	bl	8018e08 <WM_GetParent>
 8019822:	4604      	mov	r4, r0
 8019824:	2800      	cmp	r0, #0
 8019826:	d0f5      	beq.n	8019814 <WM__SendTouchMessage+0x48>
 8019828:	4631      	mov	r1, r6
 801982a:	9505      	str	r5, [sp, #20]
 801982c:	f000 fbf4 	bl	801a018 <WM__SendMessageIfEnabled>
 8019830:	4620      	mov	r0, r4
 8019832:	f7ff fb25 	bl	8018e80 <WM_IsWindow>
 8019836:	2800      	cmp	r0, #0
 8019838:	d1f0      	bne.n	801981c <WM__SendTouchMessage+0x50>
 801983a:	4629      	mov	r1, r5
 801983c:	4638      	mov	r0, r7
 801983e:	f000 fbeb 	bl	801a018 <WM__SendMessageIfEnabled>
 8019842:	b007      	add	sp, #28
 8019844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019846:	bf00      	nop

08019848 <WM_HandlePID>:
 8019848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801984c:	b099      	sub	sp, #100	; 0x64
 801984e:	ad08      	add	r5, sp, #32
 8019850:	2300      	movs	r3, #0
 8019852:	606b      	str	r3, [r5, #4]
 8019854:	9308      	str	r3, [sp, #32]
 8019856:	60ab      	str	r3, [r5, #8]
 8019858:	f002 f9f8 	bl	801bc4c <GUI_PID_IsEmpty>
 801985c:	b120      	cbz	r0, 8019868 <WM_HandlePID+0x20>
 801985e:	2400      	movs	r4, #0
 8019860:	4620      	mov	r0, r4
 8019862:	b019      	add	sp, #100	; 0x64
 8019864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019868:	af0b      	add	r7, sp, #44	; 0x2c
 801986a:	4604      	mov	r4, r0
 801986c:	4638      	mov	r0, r7
 801986e:	f002 f949 	bl	801bb04 <GUI_PID_GetState>
 8019872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019874:	3301      	adds	r3, #1
 8019876:	f000 80e3 	beq.w	8019a40 <WM_HandlePID+0x1f8>
 801987a:	4eb8      	ldr	r6, [pc, #736]	; (8019b5c <WM_HandlePID+0x314>)
 801987c:	f7f7 fefe 	bl	801167c <GUI_Lock>
 8019880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019882:	2b00      	cmp	r3, #0
 8019884:	f2c0 8157 	blt.w	8019b36 <WM_HandlePID+0x2ee>
 8019888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801988a:	2a00      	cmp	r2, #0
 801988c:	db09      	blt.n	80198a2 <WM_HandlePID+0x5a>
 801988e:	48b4      	ldr	r0, [pc, #720]	; (8019b60 <WM_HandlePID+0x318>)
 8019890:	49b4      	ldr	r1, [pc, #720]	; (8019b64 <WM_HandlePID+0x31c>)
 8019892:	f9b0 0000 	ldrsh.w	r0, [r0]
 8019896:	f9b1 1000 	ldrsh.w	r1, [r1]
 801989a:	4403      	add	r3, r0
 801989c:	440a      	add	r2, r1
 801989e:	930b      	str	r3, [sp, #44]	; 0x2c
 80198a0:	920c      	str	r2, [sp, #48]	; 0x30
 80198a2:	f89d 0035 	ldrb.w	r0, [sp, #53]	; 0x35
 80198a6:	2801      	cmp	r0, #1
 80198a8:	bf8c      	ite	hi
 80198aa:	6830      	ldrhi	r0, [r6, #0]
 80198ac:	6030      	strls	r0, [r6, #0]
 80198ae:	f7f6 ff57 	bl	8010760 <GUI_DEVICE__GetpDriver>
 80198b2:	2800      	cmp	r0, #0
 80198b4:	f000 80be 	beq.w	8019a34 <WM_HandlePID+0x1ec>
 80198b8:	aa04      	add	r2, sp, #16
 80198ba:	a903      	add	r1, sp, #12
 80198bc:	6830      	ldr	r0, [r6, #0]
 80198be:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8019b78 <WM_HandlePID+0x330>
 80198c2:	f7f7 fe59 	bl	8011578 <GUI_GetLayerPosEx>
 80198c6:	a806      	add	r0, sp, #24
 80198c8:	f000 fc5e 	bl	801a188 <WM__AddCriticalHandle>
 80198cc:	6834      	ldr	r4, [r6, #0]
 80198ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80198d0:	9803      	ldr	r0, [sp, #12]
 80198d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80198d4:	9904      	ldr	r1, [sp, #16]
 80198d6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80198da:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 80198de:	1a18      	subs	r0, r3, r0
 80198e0:	6923      	ldr	r3, [r4, #16]
 80198e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80198e4:	1a51      	subs	r1, r2, r1
 80198e6:	4298      	cmp	r0, r3
 80198e8:	910c      	str	r1, [sp, #48]	; 0x30
 80198ea:	d103      	bne.n	80198f4 <WM_HandlePID+0xac>
 80198ec:	6963      	ldr	r3, [r4, #20]
 80198ee:	4299      	cmp	r1, r3
 80198f0:	f000 815f 	beq.w	8019bb2 <WM_HandlePID+0x36a>
 80198f4:	f89d 2035 	ldrb.w	r2, [sp, #53]	; 0x35
 80198f8:	f002 f8b2 	bl	801ba60 <GUI_CURSOR_SetPositionEx>
 80198fc:	f8d8 3000 	ldr.w	r3, [r8]
 8019900:	b113      	cbz	r3, 8019908 <WM_HandlePID+0xc0>
 8019902:	2100      	movs	r1, #0
 8019904:	4638      	mov	r0, r7
 8019906:	4798      	blx	r3
 8019908:	4b97      	ldr	r3, [pc, #604]	; (8019b68 <WM_HandlePID+0x320>)
 801990a:	6832      	ldr	r2, [r6, #0]
 801990c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019910:	2800      	cmp	r0, #0
 8019912:	f000 8137 	beq.w	8019b84 <WM_HandlePID+0x33c>
 8019916:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801991a:	9007      	str	r0, [sp, #28]
 801991c:	b113      	cbz	r3, 8019924 <WM_HandlePID+0xdc>
 801991e:	9907      	ldr	r1, [sp, #28]
 8019920:	4638      	mov	r0, r7
 8019922:	4798      	blx	r3
 8019924:	6833      	ldr	r3, [r6, #0]
 8019926:	4c91      	ldr	r4, [pc, #580]	; (8019b6c <WM_HandlePID+0x324>)
 8019928:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8019b5c <WM_HandlePID+0x314>
 801992c:	00db      	lsls	r3, r3, #3
 801992e:	18e1      	adds	r1, r4, r3
 8019930:	684a      	ldr	r2, [r1, #4]
 8019932:	9807      	ldr	r0, [sp, #28]
 8019934:	2a00      	cmp	r2, #0
 8019936:	d042      	beq.n	80199be <WM_HandlePID+0x176>
 8019938:	4282      	cmp	r2, r0
 801993a:	d040      	beq.n	80199be <WM_HandlePID+0x176>
 801993c:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8019940:	f1ba 0f00 	cmp.w	sl, #0
 8019944:	d03b      	beq.n	80199be <WM_HandlePID+0x176>
 8019946:	4a8a      	ldr	r2, [pc, #552]	; (8019b70 <WM_HandlePID+0x328>)
 8019948:	6812      	ldr	r2, [r2, #0]
 801994a:	2a00      	cmp	r2, #0
 801994c:	db09      	blt.n	8019962 <WM_HandlePID+0x11a>
 801994e:	4b89      	ldr	r3, [pc, #548]	; (8019b74 <WM_HandlePID+0x32c>)
 8019950:	4650      	mov	r0, sl
 8019952:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019956:	f000 fb0f 	bl	8019f78 <WM__IsAncestor>
 801995a:	b380      	cbz	r0, 80199be <WM_HandlePID+0x176>
 801995c:	f8d9 3000 	ldr.w	r3, [r9]
 8019960:	00db      	lsls	r3, r3, #3
 8019962:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8019b80 <WM_HandlePID+0x338>
 8019966:	444b      	add	r3, r9
 8019968:	4650      	mov	r0, sl
 801996a:	6859      	ldr	r1, [r3, #4]
 801996c:	f000 fb04 	bl	8019f78 <WM__IsAncestor>
 8019970:	6833      	ldr	r3, [r6, #0]
 8019972:	00db      	lsls	r3, r3, #3
 8019974:	4499      	add	r9, r3
 8019976:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801997a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801997e:	b112      	cbz	r2, 8019986 <WM_HandlePID+0x13e>
 8019980:	b908      	cbnz	r0, 8019986 <WM_HandlePID+0x13e>
 8019982:	458a      	cmp	sl, r1
 8019984:	d11b      	bne.n	80199be <WM_HandlePID+0x176>
 8019986:	4423      	add	r3, r4
 8019988:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8019b6c <WM_HandlePID+0x324>
 801998c:	6858      	ldr	r0, [r3, #4]
 801998e:	f000 fb1b 	bl	8019fc8 <WM__IsEnabled>
 8019992:	b1a0      	cbz	r0, 80199be <WM_HandlePID+0x176>
 8019994:	6833      	ldr	r3, [r6, #0]
 8019996:	9517      	str	r5, [sp, #92]	; 0x5c
 8019998:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801999c:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 80199a0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80199a4:	f8d3 e004 	ldr.w	lr, [r3, #4]
 80199a8:	a914      	add	r1, sp, #80	; 0x50
 80199aa:	2312      	movs	r3, #18
 80199ac:	4670      	mov	r0, lr
 80199ae:	9314      	str	r3, [sp, #80]	; 0x50
 80199b0:	f7ff ff0c 	bl	80197cc <WM__SendTouchMessage>
 80199b4:	6833      	ldr	r3, [r6, #0]
 80199b6:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 80199ba:	2200      	movs	r2, #0
 80199bc:	605a      	str	r2, [r3, #4]
 80199be:	f8dd 901c 	ldr.w	r9, [sp, #28]
 80199c2:	f1b9 0f00 	cmp.w	r9, #0
 80199c6:	f000 80b3 	beq.w	8019b30 <WM_HandlePID+0x2e8>
 80199ca:	4b69      	ldr	r3, [pc, #420]	; (8019b70 <WM_HandlePID+0x328>)
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	db08      	blt.n	80199e4 <WM_HandlePID+0x19c>
 80199d2:	4a68      	ldr	r2, [pc, #416]	; (8019b74 <WM_HandlePID+0x32c>)
 80199d4:	4648      	mov	r0, r9
 80199d6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80199da:	f000 facd 	bl	8019f78 <WM__IsAncestor>
 80199de:	2800      	cmp	r0, #0
 80199e0:	f000 80a6 	beq.w	8019b30 <WM_HandlePID+0x2e8>
 80199e4:	6833      	ldr	r3, [r6, #0]
 80199e6:	f8df a198 	ldr.w	sl, [pc, #408]	; 8019b80 <WM_HandlePID+0x338>
 80199ea:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 80199ee:	4648      	mov	r0, r9
 80199f0:	6859      	ldr	r1, [r3, #4]
 80199f2:	f000 fac1 	bl	8019f78 <WM__IsAncestor>
 80199f6:	f8d6 e000 	ldr.w	lr, [r6]
 80199fa:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 80199fe:	44e2      	add	sl, ip
 8019a00:	f8da 3004 	ldr.w	r3, [sl, #4]
 8019a04:	f8da 2004 	ldr.w	r2, [sl, #4]
 8019a08:	b363      	cbz	r3, 8019a64 <WM_HandlePID+0x21c>
 8019a0a:	bb58      	cbnz	r0, 8019a64 <WM_HandlePID+0x21c>
 8019a0c:	4591      	cmp	r9, r2
 8019a0e:	d029      	beq.n	8019a64 <WM_HandlePID+0x21c>
 8019a10:	2400      	movs	r4, #0
 8019a12:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8019a16:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8019a1a:	4473      	add	r3, lr
 8019a1c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8019a20:	3310      	adds	r3, #16
 8019a22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019a26:	4671      	mov	r1, lr
 8019a28:	4638      	mov	r0, r7
 8019a2a:	f004 fc5f 	bl	801e2ec <WM_PID__SetPrevState>
 8019a2e:	a806      	add	r0, sp, #24
 8019a30:	f000 fbb2 	bl	801a198 <WM__RemoveCriticalHandle>
 8019a34:	f7f7 fe18 	bl	8011668 <GUI_Unlock>
 8019a38:	4620      	mov	r0, r4
 8019a3a:	b019      	add	sp, #100	; 0x64
 8019a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019a42:	4e46      	ldr	r6, [pc, #280]	; (8019b5c <WM_HandlePID+0x314>)
 8019a44:	3301      	adds	r3, #1
 8019a46:	f47f af19 	bne.w	801987c <WM_HandlePID+0x34>
 8019a4a:	6833      	ldr	r3, [r6, #0]
 8019a4c:	4a4a      	ldr	r2, [pc, #296]	; (8019b78 <WM_HandlePID+0x330>)
 8019a4e:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8019a52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019a56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019a5a:	7e1b      	ldrb	r3, [r3, #24]
 8019a5c:	428b      	cmp	r3, r1
 8019a5e:	f47f af0d 	bne.w	801987c <WM_HandlePID+0x34>
 8019a62:	e6fc      	b.n	801985e <WM_HandlePID+0x16>
 8019a64:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8019a68:	eb03 020e 	add.w	r2, r3, lr
 8019a6c:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8019a70:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 8019a74:	7e12      	ldrb	r2, [r2, #24]
 8019a76:	9907      	ldr	r1, [sp, #28]
 8019a78:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8019b78 <WM_HandlePID+0x330>
 8019a7c:	4464      	add	r4, ip
 8019a7e:	4552      	cmp	r2, sl
 8019a80:	6061      	str	r1, [r4, #4]
 8019a82:	d003      	beq.n	8019a8c <WM_HandlePID+0x244>
 8019a84:	9907      	ldr	r1, [sp, #28]
 8019a86:	2900      	cmp	r1, #0
 8019a88:	f040 809b 	bne.w	8019bc2 <WM_HandlePID+0x37a>
 8019a8c:	ea52 090a 	orrs.w	r9, r2, sl
 8019a90:	d07d      	beq.n	8019b8e <WM_HandlePID+0x346>
 8019a92:	4c3a      	ldr	r4, [pc, #232]	; (8019b7c <WM_HandlePID+0x334>)
 8019a94:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8019a98:	eb04 020c 	add.w	r2, r4, ip
 8019a9c:	f44f 7910 	mov.w	r9, #576	; 0x240
 8019aa0:	6850      	ldr	r0, [r2, #4]
 8019aa2:	9907      	ldr	r1, [sp, #28]
 8019aa4:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
 8019aa8:	4288      	cmp	r0, r1
 8019aaa:	d022      	beq.n	8019af2 <WM_HandlePID+0x2aa>
 8019aac:	6852      	ldr	r2, [r2, #4]
 8019aae:	b302      	cbz	r2, 8019af2 <WM_HandlePID+0x2aa>
 8019ab0:	f1ba 0f00 	cmp.w	sl, #0
 8019ab4:	f040 8113 	bne.w	8019cde <WM_HandlePID+0x496>
 8019ab8:	4473      	add	r3, lr
 8019aba:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8019abe:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 8019ac2:	691a      	ldr	r2, [r3, #16]
 8019ac4:	695b      	ldr	r3, [r3, #20]
 8019ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8019ac8:	9208      	str	r2, [sp, #32]
 8019aca:	462b      	mov	r3, r5
 8019acc:	44a4      	add	ip, r4
 8019ace:	a914      	add	r1, sp, #80	; 0x50
 8019ad0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8019ad4:	9317      	str	r3, [sp, #92]	; 0x5c
 8019ad6:	f7ff fe79 	bl	80197cc <WM__SendTouchMessage>
 8019ada:	f8d6 e000 	ldr.w	lr, [r6]
 8019ade:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 8019ae2:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8019ae6:	eb04 030c 	add.w	r3, r4, ip
 8019aea:	2200      	movs	r2, #0
 8019aec:	605a      	str	r2, [r3, #4]
 8019aee:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8019af2:	eb03 020e 	add.w	r2, r3, lr
 8019af6:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8019afa:	9907      	ldr	r1, [sp, #28]
 8019afc:	f882 a018 	strb.w	sl, [r2, #24]
 8019b00:	2900      	cmp	r1, #0
 8019b02:	d054      	beq.n	8019bae <WM_HandlePID+0x366>
 8019b04:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8019b08:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8019b0c:	f1ba 0f00 	cmp.w	sl, #0
 8019b10:	f000 80c5 	beq.w	8019c9e <WM_HandlePID+0x456>
 8019b14:	4464      	add	r4, ip
 8019b16:	9b07      	ldr	r3, [sp, #28]
 8019b18:	6063      	str	r3, [r4, #4]
 8019b1a:	9807      	ldr	r0, [sp, #28]
 8019b1c:	9517      	str	r5, [sp, #92]	; 0x5c
 8019b1e:	a914      	add	r1, sp, #80	; 0x50
 8019b20:	f7ff fe54 	bl	80197cc <WM__SendTouchMessage>
 8019b24:	f8d6 e000 	ldr.w	lr, [r6]
 8019b28:	2401      	movs	r4, #1
 8019b2a:	fa0e f304 	lsl.w	r3, lr, r4
 8019b2e:	e772      	b.n	8019a16 <WM_HandlePID+0x1ce>
 8019b30:	f8d6 e000 	ldr.w	lr, [r6]
 8019b34:	e76c      	b.n	8019a10 <WM_HandlePID+0x1c8>
 8019b36:	3301      	adds	r3, #1
 8019b38:	f47f aeb3 	bne.w	80198a2 <WM_HandlePID+0x5a>
 8019b3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019b3e:	3301      	adds	r3, #1
 8019b40:	f47f aeaf 	bne.w	80198a2 <WM_HandlePID+0x5a>
 8019b44:	6833      	ldr	r3, [r6, #0]
 8019b46:	4a0c      	ldr	r2, [pc, #48]	; (8019b78 <WM_HandlePID+0x330>)
 8019b48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019b4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019b50:	691a      	ldr	r2, [r3, #16]
 8019b52:	695b      	ldr	r3, [r3, #20]
 8019b54:	920b      	str	r2, [sp, #44]	; 0x2c
 8019b56:	930c      	str	r3, [sp, #48]	; 0x30
 8019b58:	e6a3      	b.n	80198a2 <WM_HandlePID+0x5a>
 8019b5a:	bf00      	nop
 8019b5c:	200308b4 	.word	0x200308b4
 8019b60:	20030848 	.word	0x20030848
 8019b64:	20030838 	.word	0x20030838
 8019b68:	200308d8 	.word	0x200308d8
 8019b6c:	200308e8 	.word	0x200308e8
 8019b70:	200000f8 	.word	0x200000f8
 8019b74:	20030894 	.word	0x20030894
 8019b78:	2002e3cc 	.word	0x2002e3cc
 8019b7c:	200308f8 	.word	0x200308f8
 8019b80:	20030908 	.word	0x20030908
 8019b84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019b86:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019b88:	f004 fdf6 	bl	801e778 <WM_Screen2hWin>
 8019b8c:	e6c3      	b.n	8019916 <WM_HandlePID+0xce>
 8019b8e:	9c07      	ldr	r4, [sp, #28]
 8019b90:	2c00      	cmp	r4, #0
 8019b92:	f43f af40 	beq.w	8019a16 <WM_HandlePID+0x1ce>
 8019b96:	9807      	ldr	r0, [sp, #28]
 8019b98:	f000 fa16 	bl	8019fc8 <WM__IsEnabled>
 8019b9c:	2800      	cmp	r0, #0
 8019b9e:	f040 80b0 	bne.w	8019d02 <WM_HandlePID+0x4ba>
 8019ba2:	f8d6 e000 	ldr.w	lr, [r6]
 8019ba6:	4604      	mov	r4, r0
 8019ba8:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8019bac:	e733      	b.n	8019a16 <WM_HandlePID+0x1ce>
 8019bae:	2401      	movs	r4, #1
 8019bb0:	e731      	b.n	8019a16 <WM_HandlePID+0x1ce>
 8019bb2:	7e22      	ldrb	r2, [r4, #24]
 8019bb4:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 8019bb8:	429a      	cmp	r2, r3
 8019bba:	f47f ae9b 	bne.w	80198f4 <WM_HandlePID+0xac>
 8019bbe:	2400      	movs	r4, #0
 8019bc0:	e735      	b.n	8019a2e <WM_HandlePID+0x1e6>
 8019bc2:	9807      	ldr	r0, [sp, #28]
 8019bc4:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8019d74 <WM_HandlePID+0x52c>
 8019bc8:	f7f5 fece 	bl	800f968 <GUI_ALLOC_LockH>
 8019bcc:	6833      	ldr	r3, [r6, #0]
 8019bce:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8019bd2:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
 8019bd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019bda:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8019bde:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019be0:	7e1b      	ldrb	r3, [r3, #24]
 8019be2:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
 8019be6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019bea:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8019bee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019bf0:	9005      	str	r0, [sp, #20]
 8019bf2:	1b12      	subs	r2, r2, r4
 8019bf4:	1a5b      	subs	r3, r3, r1
 8019bf6:	a805      	add	r0, sp, #20
 8019bf8:	9211      	str	r2, [sp, #68]	; 0x44
 8019bfa:	9312      	str	r3, [sp, #72]	; 0x48
 8019bfc:	f7f5 fec6 	bl	800f98c <GUI_ALLOC_UnlockH>
 8019c00:	f8d6 e000 	ldr.w	lr, [r6]
 8019c04:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
 8019c08:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 8019c0c:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8019c10:	f103 0210 	add.w	r2, r3, #16
 8019c14:	ca07      	ldmia	r2, {r0, r1, r2}
 8019c16:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8019c1a:	761c      	strb	r4, [r3, #24]
 8019c1c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8019c20:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
 8019c24:	a911      	add	r1, sp, #68	; 0x44
 8019c26:	2211      	movs	r2, #17
 8019c28:	9117      	str	r1, [sp, #92]	; 0x5c
 8019c2a:	9214      	str	r2, [sp, #80]	; 0x50
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d03e      	beq.n	8019cae <WM_HandlePID+0x466>
 8019c30:	4c4e      	ldr	r4, [pc, #312]	; (8019d6c <WM_HandlePID+0x524>)
 8019c32:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8019c36:	a914      	add	r1, sp, #80	; 0x50
 8019c38:	f8de 9004 	ldr.w	r9, [lr, #4]
 8019c3c:	9b07      	ldr	r3, [sp, #28]
 8019c3e:	f8ce 3004 	str.w	r3, [lr, #4]
 8019c42:	f8de 3004 	ldr.w	r3, [lr, #4]
 8019c46:	9807      	ldr	r0, [sp, #28]
 8019c48:	9300      	str	r3, [sp, #0]
 8019c4a:	f000 f9e5 	bl	801a018 <WM__SendMessageIfEnabled>
 8019c4e:	f8db e000 	ldr.w	lr, [fp]
 8019c52:	9b00      	ldr	r3, [sp, #0]
 8019c54:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8019c58:	eb04 020c 	add.w	r2, r4, ip
 8019c5c:	6852      	ldr	r2, [r2, #4]
 8019c5e:	4293      	cmp	r3, r2
 8019c60:	d003      	beq.n	8019c6a <WM_HandlePID+0x422>
 8019c62:	44a4      	add	ip, r4
 8019c64:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8019c68:	9307      	str	r3, [sp, #28]
 8019c6a:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8019c6e:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
 8019c72:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8019c76:	3310      	adds	r3, #16
 8019c78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019c7c:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 8019d78 <WM_HandlePID+0x530>
 8019c80:	f1b9 0f00 	cmp.w	r9, #0
 8019c84:	d12d      	bne.n	8019ce2 <WM_HandlePID+0x49a>
 8019c86:	f8d6 e000 	ldr.w	lr, [r6]
 8019c8a:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 8019c8e:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8019c92:	eb03 020e 	add.w	r2, r3, lr
 8019c96:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8019c9a:	7e12      	ldrb	r2, [r2, #24]
 8019c9c:	e6f6      	b.n	8019a8c <WM_HandlePID+0x244>
 8019c9e:	4b34      	ldr	r3, [pc, #208]	; (8019d70 <WM_HandlePID+0x528>)
 8019ca0:	781b      	ldrb	r3, [r3, #0]
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	d13f      	bne.n	8019d26 <WM_HandlePID+0x4de>
 8019ca6:	4464      	add	r4, ip
 8019ca8:	2300      	movs	r3, #0
 8019caa:	6063      	str	r3, [r4, #4]
 8019cac:	e735      	b.n	8019b1a <WM_HandlePID+0x2d2>
 8019cae:	4c2f      	ldr	r4, [pc, #188]	; (8019d6c <WM_HandlePID+0x524>)
 8019cb0:	9301      	str	r3, [sp, #4]
 8019cb2:	eb04 0ece 	add.w	lr, r4, lr, lsl #3
 8019cb6:	a914      	add	r1, sp, #80	; 0x50
 8019cb8:	f8de 2004 	ldr.w	r2, [lr, #4]
 8019cbc:	9807      	ldr	r0, [sp, #28]
 8019cbe:	9200      	str	r2, [sp, #0]
 8019cc0:	f000 f9aa 	bl	801a018 <WM__SendMessageIfEnabled>
 8019cc4:	f8db e000 	ldr.w	lr, [fp]
 8019cc8:	9a00      	ldr	r2, [sp, #0]
 8019cca:	9b01      	ldr	r3, [sp, #4]
 8019ccc:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8019cd0:	eb04 010c 	add.w	r1, r4, ip
 8019cd4:	6849      	ldr	r1, [r1, #4]
 8019cd6:	428a      	cmp	r2, r1
 8019cd8:	d036      	beq.n	8019d48 <WM_HandlePID+0x500>
 8019cda:	4699      	mov	r9, r3
 8019cdc:	e7c1      	b.n	8019c62 <WM_HandlePID+0x41a>
 8019cde:	2300      	movs	r3, #0
 8019ce0:	e6f4      	b.n	8019acc <WM_HandlePID+0x284>
 8019ce2:	4648      	mov	r0, r9
 8019ce4:	f7ff f8cc 	bl	8018e80 <WM_IsWindow>
 8019ce8:	f8d6 e000 	ldr.w	lr, [r6]
 8019cec:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 8019cf0:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8019cf4:	b9f0      	cbnz	r0, 8019d34 <WM_HandlePID+0x4ec>
 8019cf6:	eb03 020e 	add.w	r2, r3, lr
 8019cfa:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8019cfe:	7e12      	ldrb	r2, [r2, #24]
 8019d00:	e6c4      	b.n	8019a8c <WM_HandlePID+0x244>
 8019d02:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8019d06:	9c07      	ldr	r4, [sp, #28]
 8019d08:	9517      	str	r5, [sp, #92]	; 0x5c
 8019d0a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8019d0e:	2310      	movs	r3, #16
 8019d10:	4620      	mov	r0, r4
 8019d12:	a914      	add	r1, sp, #80	; 0x50
 8019d14:	9314      	str	r3, [sp, #80]	; 0x50
 8019d16:	f7ff fd59 	bl	80197cc <WM__SendTouchMessage>
 8019d1a:	f8d6 e000 	ldr.w	lr, [r6]
 8019d1e:	464c      	mov	r4, r9
 8019d20:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8019d24:	e677      	b.n	8019a16 <WM_HandlePID+0x1ce>
 8019d26:	f004 fd73 	bl	801e810 <WM_ReleaseCapture>
 8019d2a:	f8d6 e000 	ldr.w	lr, [r6]
 8019d2e:	ea4f 0cce 	mov.w	ip, lr, lsl #3
 8019d32:	e7b8      	b.n	8019ca6 <WM_HandlePID+0x45e>
 8019d34:	eb04 04ce 	add.w	r4, r4, lr, lsl #3
 8019d38:	eb03 020e 	add.w	r2, r3, lr
 8019d3c:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8019d40:	f8c4 9004 	str.w	r9, [r4, #4]
 8019d44:	7e12      	ldrb	r2, [r2, #24]
 8019d46:	e6a1      	b.n	8019a8c <WM_HandlePID+0x244>
 8019d48:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
 8019d4c:	ea4f 034e 	mov.w	r3, lr, lsl #1
 8019d50:	eb03 040e 	add.w	r4, r3, lr
 8019d54:	eb09 0984 	add.w	r9, r9, r4, lsl #2
 8019d58:	f109 0410 	add.w	r4, r9, #16
 8019d5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8019d60:	f89d a034 	ldrb.w	sl, [sp, #52]	; 0x34
 8019d64:	f899 2018 	ldrb.w	r2, [r9, #24]
 8019d68:	e690      	b.n	8019a8c <WM_HandlePID+0x244>
 8019d6a:	bf00      	nop
 8019d6c:	200308f8 	.word	0x200308f8
 8019d70:	200308b8 	.word	0x200308b8
 8019d74:	200308b4 	.word	0x200308b4
 8019d78:	2002e3cc 	.word	0x2002e3cc

08019d7c <WM__ForEachDesc>:
 8019d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d80:	b085      	sub	sp, #20
 8019d82:	460d      	mov	r5, r1
 8019d84:	4614      	mov	r4, r2
 8019d86:	f7f5 fde5 	bl	800f954 <GUI_ALLOC_h2p>
 8019d8a:	69c3      	ldr	r3, [r0, #28]
 8019d8c:	9302      	str	r3, [sp, #8]
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	f000 809e 	beq.w	8019ed0 <WM__ForEachDesc+0x154>
 8019d94:	9e02      	ldr	r6, [sp, #8]
 8019d96:	4621      	mov	r1, r4
 8019d98:	4630      	mov	r0, r6
 8019d9a:	47a8      	blx	r5
 8019d9c:	4630      	mov	r0, r6
 8019d9e:	f7f5 fdd9 	bl	800f954 <GUI_ALLOC_h2p>
 8019da2:	69c3      	ldr	r3, [r0, #28]
 8019da4:	9303      	str	r3, [sp, #12]
 8019da6:	2b00      	cmp	r3, #0
 8019da8:	f000 808a 	beq.w	8019ec0 <WM__ForEachDesc+0x144>
 8019dac:	9e03      	ldr	r6, [sp, #12]
 8019dae:	4621      	mov	r1, r4
 8019db0:	4630      	mov	r0, r6
 8019db2:	47a8      	blx	r5
 8019db4:	4630      	mov	r0, r6
 8019db6:	f7f5 fdcd 	bl	800f954 <GUI_ALLOC_h2p>
 8019dba:	f8d0 801c 	ldr.w	r8, [r0, #28]
 8019dbe:	f1b8 0f00 	cmp.w	r8, #0
 8019dc2:	d075      	beq.n	8019eb0 <WM__ForEachDesc+0x134>
 8019dc4:	4621      	mov	r1, r4
 8019dc6:	4640      	mov	r0, r8
 8019dc8:	47a8      	blx	r5
 8019dca:	4640      	mov	r0, r8
 8019dcc:	f7f5 fdc2 	bl	800f954 <GUI_ALLOC_h2p>
 8019dd0:	f8d0 901c 	ldr.w	r9, [r0, #28]
 8019dd4:	f1b9 0f00 	cmp.w	r9, #0
 8019dd8:	d062      	beq.n	8019ea0 <WM__ForEachDesc+0x124>
 8019dda:	4621      	mov	r1, r4
 8019ddc:	4648      	mov	r0, r9
 8019dde:	47a8      	blx	r5
 8019de0:	4648      	mov	r0, r9
 8019de2:	f7f5 fdb7 	bl	800f954 <GUI_ALLOC_h2p>
 8019de6:	f8d0 a01c 	ldr.w	sl, [r0, #28]
 8019dea:	f1ba 0f00 	cmp.w	sl, #0
 8019dee:	d04f      	beq.n	8019e90 <WM__ForEachDesc+0x114>
 8019df0:	4621      	mov	r1, r4
 8019df2:	4650      	mov	r0, sl
 8019df4:	47a8      	blx	r5
 8019df6:	4650      	mov	r0, sl
 8019df8:	f7f5 fdac 	bl	800f954 <GUI_ALLOC_h2p>
 8019dfc:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 8019e00:	f1bb 0f00 	cmp.w	fp, #0
 8019e04:	d03c      	beq.n	8019e80 <WM__ForEachDesc+0x104>
 8019e06:	4621      	mov	r1, r4
 8019e08:	4658      	mov	r0, fp
 8019e0a:	47a8      	blx	r5
 8019e0c:	4658      	mov	r0, fp
 8019e0e:	f7f5 fda1 	bl	800f954 <GUI_ALLOC_h2p>
 8019e12:	69c3      	ldr	r3, [r0, #28]
 8019e14:	9301      	str	r3, [sp, #4]
 8019e16:	b35b      	cbz	r3, 8019e70 <WM__ForEachDesc+0xf4>
 8019e18:	9e01      	ldr	r6, [sp, #4]
 8019e1a:	4621      	mov	r1, r4
 8019e1c:	4630      	mov	r0, r6
 8019e1e:	47a8      	blx	r5
 8019e20:	4630      	mov	r0, r6
 8019e22:	f7f5 fd97 	bl	800f954 <GUI_ALLOC_h2p>
 8019e26:	69c6      	ldr	r6, [r0, #28]
 8019e28:	b1de      	cbz	r6, 8019e62 <WM__ForEachDesc+0xe6>
 8019e2a:	4621      	mov	r1, r4
 8019e2c:	4630      	mov	r0, r6
 8019e2e:	47a8      	blx	r5
 8019e30:	4630      	mov	r0, r6
 8019e32:	f7f5 fd8f 	bl	800f954 <GUI_ALLOC_h2p>
 8019e36:	69c7      	ldr	r7, [r0, #28]
 8019e38:	b16f      	cbz	r7, 8019e56 <WM__ForEachDesc+0xda>
 8019e3a:	4638      	mov	r0, r7
 8019e3c:	4621      	mov	r1, r4
 8019e3e:	47a8      	blx	r5
 8019e40:	4638      	mov	r0, r7
 8019e42:	4622      	mov	r2, r4
 8019e44:	4629      	mov	r1, r5
 8019e46:	f7ff ff99 	bl	8019d7c <WM__ForEachDesc>
 8019e4a:	4638      	mov	r0, r7
 8019e4c:	f7f5 fd82 	bl	800f954 <GUI_ALLOC_h2p>
 8019e50:	6a07      	ldr	r7, [r0, #32]
 8019e52:	2f00      	cmp	r7, #0
 8019e54:	d1f1      	bne.n	8019e3a <WM__ForEachDesc+0xbe>
 8019e56:	4630      	mov	r0, r6
 8019e58:	f7f5 fd7c 	bl	800f954 <GUI_ALLOC_h2p>
 8019e5c:	6a06      	ldr	r6, [r0, #32]
 8019e5e:	2e00      	cmp	r6, #0
 8019e60:	d1e3      	bne.n	8019e2a <WM__ForEachDesc+0xae>
 8019e62:	9801      	ldr	r0, [sp, #4]
 8019e64:	f7f5 fd76 	bl	800f954 <GUI_ALLOC_h2p>
 8019e68:	6a03      	ldr	r3, [r0, #32]
 8019e6a:	9301      	str	r3, [sp, #4]
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d1d3      	bne.n	8019e18 <WM__ForEachDesc+0x9c>
 8019e70:	4658      	mov	r0, fp
 8019e72:	f7f5 fd6f 	bl	800f954 <GUI_ALLOC_h2p>
 8019e76:	f8d0 b020 	ldr.w	fp, [r0, #32]
 8019e7a:	f1bb 0f00 	cmp.w	fp, #0
 8019e7e:	d1c2      	bne.n	8019e06 <WM__ForEachDesc+0x8a>
 8019e80:	4650      	mov	r0, sl
 8019e82:	f7f5 fd67 	bl	800f954 <GUI_ALLOC_h2p>
 8019e86:	f8d0 a020 	ldr.w	sl, [r0, #32]
 8019e8a:	f1ba 0f00 	cmp.w	sl, #0
 8019e8e:	d1af      	bne.n	8019df0 <WM__ForEachDesc+0x74>
 8019e90:	4648      	mov	r0, r9
 8019e92:	f7f5 fd5f 	bl	800f954 <GUI_ALLOC_h2p>
 8019e96:	f8d0 9020 	ldr.w	r9, [r0, #32]
 8019e9a:	f1b9 0f00 	cmp.w	r9, #0
 8019e9e:	d19c      	bne.n	8019dda <WM__ForEachDesc+0x5e>
 8019ea0:	4640      	mov	r0, r8
 8019ea2:	f7f5 fd57 	bl	800f954 <GUI_ALLOC_h2p>
 8019ea6:	f8d0 8020 	ldr.w	r8, [r0, #32]
 8019eaa:	f1b8 0f00 	cmp.w	r8, #0
 8019eae:	d189      	bne.n	8019dc4 <WM__ForEachDesc+0x48>
 8019eb0:	9803      	ldr	r0, [sp, #12]
 8019eb2:	f7f5 fd4f 	bl	800f954 <GUI_ALLOC_h2p>
 8019eb6:	6a03      	ldr	r3, [r0, #32]
 8019eb8:	9303      	str	r3, [sp, #12]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	f47f af76 	bne.w	8019dac <WM__ForEachDesc+0x30>
 8019ec0:	9802      	ldr	r0, [sp, #8]
 8019ec2:	f7f5 fd47 	bl	800f954 <GUI_ALLOC_h2p>
 8019ec6:	6a03      	ldr	r3, [r0, #32]
 8019ec8:	9302      	str	r3, [sp, #8]
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	f47f af62 	bne.w	8019d94 <WM__ForEachDesc+0x18>
 8019ed0:	b005      	add	sp, #20
 8019ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ed6:	bf00      	nop

08019ed8 <WM__GetFocusedChild>:
 8019ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019eda:	4e10      	ldr	r6, [pc, #64]	; (8019f1c <WM__GetFocusedChild+0x44>)
 8019edc:	4d10      	ldr	r5, [pc, #64]	; (8019f20 <WM__GetFocusedChild+0x48>)
 8019ede:	6833      	ldr	r3, [r6, #0]
 8019ee0:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8019ee4:	b083      	sub	sp, #12
 8019ee6:	b913      	cbnz	r3, 8019eee <WM__GetFocusedChild+0x16>
 8019ee8:	2000      	movs	r0, #0
 8019eea:	b003      	add	sp, #12
 8019eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019eee:	4607      	mov	r7, r0
 8019ef0:	4618      	mov	r0, r3
 8019ef2:	f7f5 fd39 	bl	800f968 <GUI_ALLOC_LockH>
 8019ef6:	4604      	mov	r4, r0
 8019ef8:	9001      	str	r0, [sp, #4]
 8019efa:	b150      	cbz	r0, 8019f12 <WM__GetFocusedChild+0x3a>
 8019efc:	6984      	ldr	r4, [r0, #24]
 8019efe:	a801      	add	r0, sp, #4
 8019f00:	f7f5 fd44 	bl	800f98c <GUI_ALLOC_UnlockH>
 8019f04:	42a7      	cmp	r7, r4
 8019f06:	d1ef      	bne.n	8019ee8 <WM__GetFocusedChild+0x10>
 8019f08:	6833      	ldr	r3, [r6, #0]
 8019f0a:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8019f0e:	b003      	add	sp, #12
 8019f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f12:	a801      	add	r0, sp, #4
 8019f14:	f7f5 fd3a 	bl	800f98c <GUI_ALLOC_UnlockH>
 8019f18:	4620      	mov	r0, r4
 8019f1a:	e7e6      	b.n	8019eea <WM__GetFocusedChild+0x12>
 8019f1c:	200308b4 	.word	0x200308b4
 8019f20:	200308a4 	.word	0x200308a4

08019f24 <WM__GetLastSibling>:
 8019f24:	b510      	push	{r4, lr}
 8019f26:	4604      	mov	r4, r0
 8019f28:	b908      	cbnz	r0, 8019f2e <WM__GetLastSibling+0xa>
 8019f2a:	e006      	b.n	8019f3a <WM__GetLastSibling+0x16>
 8019f2c:	461c      	mov	r4, r3
 8019f2e:	4620      	mov	r0, r4
 8019f30:	f7f5 fd10 	bl	800f954 <GUI_ALLOC_h2p>
 8019f34:	6a03      	ldr	r3, [r0, #32]
 8019f36:	2b00      	cmp	r3, #0
 8019f38:	d1f8      	bne.n	8019f2c <WM__GetLastSibling+0x8>
 8019f3a:	4620      	mov	r0, r4
 8019f3c:	bd10      	pop	{r4, pc}
 8019f3e:	bf00      	nop

08019f40 <WM__GetPrevSibling>:
 8019f40:	b538      	push	{r3, r4, r5, lr}
 8019f42:	4605      	mov	r5, r0
 8019f44:	f7fe ff60 	bl	8018e08 <WM_GetParent>
 8019f48:	b910      	cbnz	r0, 8019f50 <WM__GetPrevSibling+0x10>
 8019f4a:	2400      	movs	r4, #0
 8019f4c:	4620      	mov	r0, r4
 8019f4e:	bd38      	pop	{r3, r4, r5, pc}
 8019f50:	f7f5 fd00 	bl	800f954 <GUI_ALLOC_h2p>
 8019f54:	69c4      	ldr	r4, [r0, #28]
 8019f56:	2c00      	cmp	r4, #0
 8019f58:	d0f7      	beq.n	8019f4a <WM__GetPrevSibling+0xa>
 8019f5a:	42a5      	cmp	r5, r4
 8019f5c:	d103      	bne.n	8019f66 <WM__GetPrevSibling+0x26>
 8019f5e:	e7f4      	b.n	8019f4a <WM__GetPrevSibling+0xa>
 8019f60:	461c      	mov	r4, r3
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d0f1      	beq.n	8019f4a <WM__GetPrevSibling+0xa>
 8019f66:	4620      	mov	r0, r4
 8019f68:	f7f5 fcf4 	bl	800f954 <GUI_ALLOC_h2p>
 8019f6c:	6a03      	ldr	r3, [r0, #32]
 8019f6e:	429d      	cmp	r5, r3
 8019f70:	d1f6      	bne.n	8019f60 <WM__GetPrevSibling+0x20>
 8019f72:	4620      	mov	r0, r4
 8019f74:	bd38      	pop	{r3, r4, r5, pc}
 8019f76:	bf00      	nop

08019f78 <WM__IsAncestor>:
 8019f78:	b158      	cbz	r0, 8019f92 <WM__IsAncestor+0x1a>
 8019f7a:	b510      	push	{r4, lr}
 8019f7c:	460c      	mov	r4, r1
 8019f7e:	b131      	cbz	r1, 8019f8e <WM__IsAncestor+0x16>
 8019f80:	f7f5 fce8 	bl	800f954 <GUI_ALLOC_h2p>
 8019f84:	6980      	ldr	r0, [r0, #24]
 8019f86:	4284      	cmp	r4, r0
 8019f88:	d005      	beq.n	8019f96 <WM__IsAncestor+0x1e>
 8019f8a:	2800      	cmp	r0, #0
 8019f8c:	d1f8      	bne.n	8019f80 <WM__IsAncestor+0x8>
 8019f8e:	2000      	movs	r0, #0
 8019f90:	bd10      	pop	{r4, pc}
 8019f92:	2000      	movs	r0, #0
 8019f94:	4770      	bx	lr
 8019f96:	2001      	movs	r0, #1
 8019f98:	bd10      	pop	{r4, pc}
 8019f9a:	bf00      	nop

08019f9c <WM__IsAncestorOrSelf>:
 8019f9c:	4288      	cmp	r0, r1
 8019f9e:	d010      	beq.n	8019fc2 <WM__IsAncestorOrSelf+0x26>
 8019fa0:	b120      	cbz	r0, 8019fac <WM__IsAncestorOrSelf+0x10>
 8019fa2:	b510      	push	{r4, lr}
 8019fa4:	460c      	mov	r4, r1
 8019fa6:	b929      	cbnz	r1, 8019fb4 <WM__IsAncestorOrSelf+0x18>
 8019fa8:	2000      	movs	r0, #0
 8019faa:	bd10      	pop	{r4, pc}
 8019fac:	2000      	movs	r0, #0
 8019fae:	4770      	bx	lr
 8019fb0:	2800      	cmp	r0, #0
 8019fb2:	d0f9      	beq.n	8019fa8 <WM__IsAncestorOrSelf+0xc>
 8019fb4:	f7f5 fcce 	bl	800f954 <GUI_ALLOC_h2p>
 8019fb8:	6980      	ldr	r0, [r0, #24]
 8019fba:	4284      	cmp	r4, r0
 8019fbc:	d1f8      	bne.n	8019fb0 <WM__IsAncestorOrSelf+0x14>
 8019fbe:	2001      	movs	r0, #1
 8019fc0:	bd10      	pop	{r4, pc}
 8019fc2:	2001      	movs	r0, #1
 8019fc4:	4770      	bx	lr
 8019fc6:	bf00      	nop

08019fc8 <WM__IsEnabled>:
 8019fc8:	b508      	push	{r3, lr}
 8019fca:	f7f5 fcc3 	bl	800f954 <GUI_ALLOC_h2p>
 8019fce:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8019fd0:	f080 0010 	eor.w	r0, r0, #16
 8019fd4:	f3c0 1000 	ubfx	r0, r0, #4, #1
 8019fd8:	bd08      	pop	{r3, pc}
 8019fda:	bf00      	nop

08019fdc <WM__SendMessage>:
 8019fdc:	b570      	push	{r4, r5, r6, lr}
 8019fde:	4c0d      	ldr	r4, [pc, #52]	; (801a014 <WM__SendMessage+0x38>)
 8019fe0:	6822      	ldr	r2, [r4, #0]
 8019fe2:	2a13      	cmp	r2, #19
 8019fe4:	dd00      	ble.n	8019fe8 <WM__SendMessage+0xc>
 8019fe6:	bd70      	pop	{r4, r5, r6, pc}
 8019fe8:	4606      	mov	r6, r0
 8019fea:	460d      	mov	r5, r1
 8019fec:	f7f5 fcb2 	bl	800f954 <GUI_ALLOC_h2p>
 8019ff0:	6902      	ldr	r2, [r0, #16]
 8019ff2:	606e      	str	r6, [r5, #4]
 8019ff4:	b142      	cbz	r2, 801a008 <WM__SendMessage+0x2c>
 8019ff6:	6823      	ldr	r3, [r4, #0]
 8019ff8:	4628      	mov	r0, r5
 8019ffa:	3301      	adds	r3, #1
 8019ffc:	6023      	str	r3, [r4, #0]
 8019ffe:	4790      	blx	r2
 801a000:	6823      	ldr	r3, [r4, #0]
 801a002:	3b01      	subs	r3, #1
 801a004:	6023      	str	r3, [r4, #0]
 801a006:	bd70      	pop	{r4, r5, r6, pc}
 801a008:	4628      	mov	r0, r5
 801a00a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a00e:	f7fe bb15 	b.w	801863c <WM_DefaultProc>
 801a012:	bf00      	nop
 801a014:	2002e3f4 	.word	0x2002e3f4

0801a018 <WM__SendMessageIfEnabled>:
 801a018:	b570      	push	{r4, r5, r6, lr}
 801a01a:	460e      	mov	r6, r1
 801a01c:	4605      	mov	r5, r0
 801a01e:	f7f5 fc99 	bl	800f954 <GUI_ALLOC_h2p>
 801a022:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801a024:	06db      	lsls	r3, r3, #27
 801a026:	d403      	bmi.n	801a030 <WM__SendMessageIfEnabled+0x18>
 801a028:	4c0c      	ldr	r4, [pc, #48]	; (801a05c <WM__SendMessageIfEnabled+0x44>)
 801a02a:	6823      	ldr	r3, [r4, #0]
 801a02c:	2b13      	cmp	r3, #19
 801a02e:	dd00      	ble.n	801a032 <WM__SendMessageIfEnabled+0x1a>
 801a030:	bd70      	pop	{r4, r5, r6, pc}
 801a032:	4628      	mov	r0, r5
 801a034:	f7f5 fc8e 	bl	800f954 <GUI_ALLOC_h2p>
 801a038:	6902      	ldr	r2, [r0, #16]
 801a03a:	6075      	str	r5, [r6, #4]
 801a03c:	b142      	cbz	r2, 801a050 <WM__SendMessageIfEnabled+0x38>
 801a03e:	6823      	ldr	r3, [r4, #0]
 801a040:	4630      	mov	r0, r6
 801a042:	3301      	adds	r3, #1
 801a044:	6023      	str	r3, [r4, #0]
 801a046:	4790      	blx	r2
 801a048:	6823      	ldr	r3, [r4, #0]
 801a04a:	3b01      	subs	r3, #1
 801a04c:	6023      	str	r3, [r4, #0]
 801a04e:	bd70      	pop	{r4, r5, r6, pc}
 801a050:	4630      	mov	r0, r6
 801a052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a056:	f7fe baf1 	b.w	801863c <WM_DefaultProc>
 801a05a:	bf00      	nop
 801a05c:	2002e3f4 	.word	0x2002e3f4

0801a060 <WM__SendMessageNoPara>:
 801a060:	b530      	push	{r4, r5, lr}
 801a062:	b085      	sub	sp, #20
 801a064:	2300      	movs	r3, #0
 801a066:	9301      	str	r3, [sp, #4]
 801a068:	9300      	str	r3, [sp, #0]
 801a06a:	9302      	str	r3, [sp, #8]
 801a06c:	9303      	str	r3, [sp, #12]
 801a06e:	460c      	mov	r4, r1
 801a070:	4605      	mov	r5, r0
 801a072:	f7f5 fc6f 	bl	800f954 <GUI_ALLOC_h2p>
 801a076:	6903      	ldr	r3, [r0, #16]
 801a078:	b11b      	cbz	r3, 801a082 <WM__SendMessageNoPara+0x22>
 801a07a:	e88d 0030 	stmia.w	sp, {r4, r5}
 801a07e:	4668      	mov	r0, sp
 801a080:	4798      	blx	r3
 801a082:	b005      	add	sp, #20
 801a084:	bd30      	pop	{r4, r5, pc}
 801a086:	bf00      	nop

0801a088 <WM__UpdateChildPositions>:
 801a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a08c:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 801a090:	b08b      	sub	sp, #44	; 0x2c
 801a092:	f1bb 0f00 	cmp.w	fp, #0
 801a096:	d074      	beq.n	801a182 <WM__UpdateChildPositions+0xfa>
 801a098:	9307      	str	r3, [sp, #28]
 801a09a:	b29b      	uxth	r3, r3
 801a09c:	9303      	str	r3, [sp, #12]
 801a09e:	b28b      	uxth	r3, r1
 801a0a0:	9304      	str	r3, [sp, #16]
 801a0a2:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 801a0a6:	9202      	str	r2, [sp, #8]
 801a0a8:	9106      	str	r1, [sp, #24]
 801a0aa:	9305      	str	r3, [sp, #20]
 801a0ac:	e039      	b.n	801a122 <WM__UpdateChildPositions+0x9a>
 801a0ae:	9906      	ldr	r1, [sp, #24]
 801a0b0:	eb0a 0601 	add.w	r6, sl, r1
 801a0b4:	9907      	ldr	r1, [sp, #28]
 801a0b6:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 801a0ba:	eb08 0401 	add.w	r4, r8, r1
 801a0be:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801a0c2:	b236      	sxth	r6, r6
 801a0c4:	b224      	sxth	r4, r4
 801a0c6:	d04c      	beq.n	801a162 <WM__UpdateChildPositions+0xda>
 801a0c8:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 801a0cc:	d150      	bne.n	801a170 <WM__UpdateChildPositions+0xe8>
 801a0ce:	9a02      	ldr	r2, [sp, #8]
 801a0d0:	189f      	adds	r7, r3, r2
 801a0d2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a0d4:	eb09 0502 	add.w	r5, r9, r2
 801a0d8:	b23f      	sxth	r7, r7
 801a0da:	b22d      	sxth	r5, r5
 801a0dc:	ebb6 010a 	subs.w	r1, r6, sl
 801a0e0:	eba7 0203 	sub.w	r2, r7, r3
 801a0e4:	d100      	bne.n	801a0e8 <WM__UpdateChildPositions+0x60>
 801a0e6:	b122      	cbz	r2, 801a0f2 <WM__UpdateChildPositions+0x6a>
 801a0e8:	4658      	mov	r0, fp
 801a0ea:	9301      	str	r3, [sp, #4]
 801a0ec:	f7ff fad6 	bl	801969c <WM_MoveWindow>
 801a0f0:	9b01      	ldr	r3, [sp, #4]
 801a0f2:	1ba4      	subs	r4, r4, r6
 801a0f4:	ebca 0808 	rsb	r8, sl, r8
 801a0f8:	1bed      	subs	r5, r5, r7
 801a0fa:	ebc3 0909 	rsb	r9, r3, r9
 801a0fe:	ebb4 0108 	subs.w	r1, r4, r8
 801a102:	ebc9 0205 	rsb	r2, r9, r5
 801a106:	d100      	bne.n	801a10a <WM__UpdateChildPositions+0x82>
 801a108:	b112      	cbz	r2, 801a110 <WM__UpdateChildPositions+0x88>
 801a10a:	4658      	mov	r0, fp
 801a10c:	f7fe ff26 	bl	8018f5c <WM_ResizeWindow>
 801a110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a112:	f8d3 b020 	ldr.w	fp, [r3, #32]
 801a116:	a809      	add	r0, sp, #36	; 0x24
 801a118:	f7f5 fc38 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a11c:	f1bb 0f00 	cmp.w	fp, #0
 801a120:	d02f      	beq.n	801a182 <WM__UpdateChildPositions+0xfa>
 801a122:	4658      	mov	r0, fp
 801a124:	f7f5 fc20 	bl	800f968 <GUI_ALLOC_LockH>
 801a128:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801a12a:	9009      	str	r0, [sp, #36]	; 0x24
 801a12c:	f402 7120 	and.w	r1, r2, #640	; 0x280
 801a130:	2980      	cmp	r1, #128	; 0x80
 801a132:	f9b0 a000 	ldrsh.w	sl, [r0]
 801a136:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801a13a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801a13e:	f9b0 9006 	ldrsh.w	r9, [r0, #6]
 801a142:	d01c      	beq.n	801a17e <WM__UpdateChildPositions+0xf6>
 801a144:	f5b1 7f20 	cmp.w	r1, #640	; 0x280
 801a148:	d0b1      	beq.n	801a0ae <WM__UpdateChildPositions+0x26>
 801a14a:	9804      	ldr	r0, [sp, #16]
 801a14c:	f402 62a0 	and.w	r2, r2, #1280	; 0x500
 801a150:	eb00 060a 	add.w	r6, r0, sl
 801a154:	eb00 0408 	add.w	r4, r0, r8
 801a158:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 801a15c:	b236      	sxth	r6, r6
 801a15e:	b224      	sxth	r4, r4
 801a160:	d1b2      	bne.n	801a0c8 <WM__UpdateChildPositions+0x40>
 801a162:	9a05      	ldr	r2, [sp, #20]
 801a164:	18d7      	adds	r7, r2, r3
 801a166:	eb02 0509 	add.w	r5, r2, r9
 801a16a:	b23f      	sxth	r7, r7
 801a16c:	b22d      	sxth	r5, r5
 801a16e:	e7b5      	b.n	801a0dc <WM__UpdateChildPositions+0x54>
 801a170:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801a174:	18cf      	adds	r7, r1, r3
 801a176:	4449      	add	r1, r9
 801a178:	b23f      	sxth	r7, r7
 801a17a:	b20d      	sxth	r5, r1
 801a17c:	e7ae      	b.n	801a0dc <WM__UpdateChildPositions+0x54>
 801a17e:	9803      	ldr	r0, [sp, #12]
 801a180:	e7e4      	b.n	801a14c <WM__UpdateChildPositions+0xc4>
 801a182:	b00b      	add	sp, #44	; 0x2c
 801a184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a188 <WM__AddCriticalHandle>:
 801a188:	4b02      	ldr	r3, [pc, #8]	; (801a194 <WM__AddCriticalHandle+0xc>)
 801a18a:	681a      	ldr	r2, [r3, #0]
 801a18c:	6002      	str	r2, [r0, #0]
 801a18e:	6018      	str	r0, [r3, #0]
 801a190:	4770      	bx	lr
 801a192:	bf00      	nop
 801a194:	200308d0 	.word	0x200308d0

0801a198 <WM__RemoveCriticalHandle>:
 801a198:	b410      	push	{r4}
 801a19a:	4c0e      	ldr	r4, [pc, #56]	; (801a1d4 <WM__RemoveCriticalHandle+0x3c>)
 801a19c:	6821      	ldr	r1, [r4, #0]
 801a19e:	b159      	cbz	r1, 801a1b8 <WM__RemoveCriticalHandle+0x20>
 801a1a0:	4281      	cmp	r1, r0
 801a1a2:	d012      	beq.n	801a1ca <WM__RemoveCriticalHandle+0x32>
 801a1a4:	680b      	ldr	r3, [r1, #0]
 801a1a6:	b90b      	cbnz	r3, 801a1ac <WM__RemoveCriticalHandle+0x14>
 801a1a8:	e006      	b.n	801a1b8 <WM__RemoveCriticalHandle+0x20>
 801a1aa:	4613      	mov	r3, r2
 801a1ac:	4298      	cmp	r0, r3
 801a1ae:	d006      	beq.n	801a1be <WM__RemoveCriticalHandle+0x26>
 801a1b0:	681a      	ldr	r2, [r3, #0]
 801a1b2:	4619      	mov	r1, r3
 801a1b4:	2a00      	cmp	r2, #0
 801a1b6:	d1f8      	bne.n	801a1aa <WM__RemoveCriticalHandle+0x12>
 801a1b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1bc:	4770      	bx	lr
 801a1be:	b129      	cbz	r1, 801a1cc <WM__RemoveCriticalHandle+0x34>
 801a1c0:	6803      	ldr	r3, [r0, #0]
 801a1c2:	600b      	str	r3, [r1, #0]
 801a1c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a1c8:	4770      	bx	lr
 801a1ca:	460b      	mov	r3, r1
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	6023      	str	r3, [r4, #0]
 801a1d0:	e7f2      	b.n	801a1b8 <WM__RemoveCriticalHandle+0x20>
 801a1d2:	bf00      	nop
 801a1d4:	200308d0 	.word	0x200308d0

0801a1d8 <WM__GetClientRectEx>:
 801a1d8:	b180      	cbz	r0, 801a1fc <WM__GetClientRectEx+0x24>
 801a1da:	b179      	cbz	r1, 801a1fc <WM__GetClientRectEx+0x24>
 801a1dc:	b530      	push	{r4, r5, lr}
 801a1de:	b083      	sub	sp, #12
 801a1e0:	460c      	mov	r4, r1
 801a1e2:	f7f5 fbc1 	bl	800f968 <GUI_ALLOC_LockH>
 801a1e6:	ad02      	add	r5, sp, #8
 801a1e8:	4621      	mov	r1, r4
 801a1ea:	f845 0d04 	str.w	r0, [r5, #-4]!
 801a1ee:	f7fd fb55 	bl	801789c <WM__GetClientRectWin>
 801a1f2:	4628      	mov	r0, r5
 801a1f4:	f7f5 fbca 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a1f8:	b003      	add	sp, #12
 801a1fa:	bd30      	pop	{r4, r5, pc}
 801a1fc:	4770      	bx	lr
 801a1fe:	bf00      	nop

0801a200 <_OnTouchDefault>:
 801a200:	b570      	push	{r4, r5, r6, lr}
 801a202:	b082      	sub	sp, #8
 801a204:	460c      	mov	r4, r1
 801a206:	4606      	mov	r6, r0
 801a208:	f7f5 fbae 	bl	800f968 <GUI_ALLOC_LockH>
 801a20c:	ab02      	add	r3, sp, #8
 801a20e:	8e45      	ldrh	r5, [r0, #50]	; 0x32
 801a210:	f843 0d08 	str.w	r0, [r3, #-8]!
 801a214:	4618      	mov	r0, r3
 801a216:	f7f5 fbb9 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a21a:	68e3      	ldr	r3, [r4, #12]
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	d037      	beq.n	801a290 <_OnTouchDefault+0x90>
 801a220:	7a1b      	ldrb	r3, [r3, #8]
 801a222:	b91b      	cbnz	r3, 801a22c <_OnTouchDefault+0x2c>
 801a224:	05e9      	lsls	r1, r5, #23
 801a226:	d419      	bmi.n	801a25c <_OnTouchDefault+0x5c>
 801a228:	b002      	add	sp, #8
 801a22a:	bd70      	pop	{r4, r5, r6, pc}
 801a22c:	05ec      	lsls	r4, r5, #23
 801a22e:	d4fb      	bmi.n	801a228 <_OnTouchDefault+0x28>
 801a230:	f44f 7180 	mov.w	r1, #256	; 0x100
 801a234:	4630      	mov	r0, r6
 801a236:	f000 fd33 	bl	801aca0 <WIDGET_OrState>
 801a23a:	4630      	mov	r0, r6
 801a23c:	f7f5 fb94 	bl	800f968 <GUI_ALLOC_LockH>
 801a240:	ab02      	add	r3, sp, #8
 801a242:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a244:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a248:	4618      	mov	r0, r3
 801a24a:	f7f5 fb9f 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a24e:	07a0      	lsls	r0, r4, #30
 801a250:	d5ea      	bpl.n	801a228 <_OnTouchDefault+0x28>
 801a252:	4630      	mov	r0, r6
 801a254:	2101      	movs	r1, #1
 801a256:	f7fe fe1f 	bl	8018e98 <WM_NotifyParent>
 801a25a:	e7e5      	b.n	801a228 <_OnTouchDefault+0x28>
 801a25c:	f44f 7180 	mov.w	r1, #256	; 0x100
 801a260:	4630      	mov	r0, r6
 801a262:	f000 fd39 	bl	801acd8 <WIDGET_AndState>
 801a266:	4630      	mov	r0, r6
 801a268:	f7f5 fb7e 	bl	800f968 <GUI_ALLOC_LockH>
 801a26c:	ab02      	add	r3, sp, #8
 801a26e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a270:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a274:	8e05      	ldrh	r5, [r0, #48]	; 0x30
 801a276:	4618      	mov	r0, r3
 801a278:	f7f5 fb88 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a27c:	4628      	mov	r0, r5
 801a27e:	f7f7 f947 	bl	8011510 <GUI_StoreKey>
 801a282:	07a2      	lsls	r2, r4, #30
 801a284:	d5d0      	bpl.n	801a228 <_OnTouchDefault+0x28>
 801a286:	4630      	mov	r0, r6
 801a288:	2102      	movs	r1, #2
 801a28a:	f7fe fe05 	bl	8018e98 <WM_NotifyParent>
 801a28e:	e7cb      	b.n	801a228 <_OnTouchDefault+0x28>
 801a290:	f44f 7180 	mov.w	r1, #256	; 0x100
 801a294:	4630      	mov	r0, r6
 801a296:	f000 fd1f 	bl	801acd8 <WIDGET_AndState>
 801a29a:	4630      	mov	r0, r6
 801a29c:	f7f5 fb64 	bl	800f968 <GUI_ALLOC_LockH>
 801a2a0:	ab02      	add	r3, sp, #8
 801a2a2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a2a4:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a2a8:	4618      	mov	r0, r3
 801a2aa:	f7f5 fb6f 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a2ae:	07a3      	lsls	r3, r4, #30
 801a2b0:	d5ba      	bpl.n	801a228 <_OnTouchDefault+0x28>
 801a2b2:	4630      	mov	r0, r6
 801a2b4:	2103      	movs	r1, #3
 801a2b6:	f7fe fdef 	bl	8018e98 <WM_NotifyParent>
 801a2ba:	e7b5      	b.n	801a228 <_OnTouchDefault+0x28>

0801a2bc <BUTTON_Callback>:
 801a2bc:	b570      	push	{r4, r5, r6, lr}
 801a2be:	6845      	ldr	r5, [r0, #4]
 801a2c0:	b082      	sub	sp, #8
 801a2c2:	4604      	mov	r4, r0
 801a2c4:	4601      	mov	r1, r0
 801a2c6:	4628      	mov	r0, r5
 801a2c8:	f000 fd22 	bl	801ad10 <WIDGET_HandleActive>
 801a2cc:	b168      	cbz	r0, 801a2ea <BUTTON_Callback+0x2e>
 801a2ce:	6823      	ldr	r3, [r4, #0]
 801a2d0:	2b0f      	cmp	r3, #15
 801a2d2:	d059      	beq.n	801a388 <BUTTON_Callback+0xcc>
 801a2d4:	dd0b      	ble.n	801a2ee <BUTTON_Callback+0x32>
 801a2d6:	2b28      	cmp	r3, #40	; 0x28
 801a2d8:	d045      	beq.n	801a366 <BUTTON_Callback+0xaa>
 801a2da:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801a2de:	d03c      	beq.n	801a35a <BUTTON_Callback+0x9e>
 801a2e0:	2b11      	cmp	r3, #17
 801a2e2:	d049      	beq.n	801a378 <BUTTON_Callback+0xbc>
 801a2e4:	4620      	mov	r0, r4
 801a2e6:	f7fe f9a9 	bl	801863c <WM_DefaultProc>
 801a2ea:	b002      	add	sp, #8
 801a2ec:	bd70      	pop	{r4, r5, r6, pc}
 801a2ee:	2b0b      	cmp	r3, #11
 801a2f0:	d020      	beq.n	801a334 <BUTTON_Callback+0x78>
 801a2f2:	2b0e      	cmp	r3, #14
 801a2f4:	d1f6      	bne.n	801a2e4 <BUTTON_Callback+0x28>
 801a2f6:	68e3      	ldr	r3, [r4, #12]
 801a2f8:	681a      	ldr	r2, [r3, #0]
 801a2fa:	6859      	ldr	r1, [r3, #4]
 801a2fc:	2a0d      	cmp	r2, #13
 801a2fe:	d053      	beq.n	801a3a8 <BUTTON_Callback+0xec>
 801a300:	2a20      	cmp	r2, #32
 801a302:	d131      	bne.n	801a368 <BUTTON_Callback+0xac>
 801a304:	2900      	cmp	r1, #0
 801a306:	4628      	mov	r0, r5
 801a308:	f44f 7180 	mov.w	r1, #256	; 0x100
 801a30c:	dd7d      	ble.n	801a40a <BUTTON_Callback+0x14e>
 801a30e:	f000 fcc7 	bl	801aca0 <WIDGET_OrState>
 801a312:	4628      	mov	r0, r5
 801a314:	f7f5 fb28 	bl	800f968 <GUI_ALLOC_LockH>
 801a318:	ab02      	add	r3, sp, #8
 801a31a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a31c:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a320:	4618      	mov	r0, r3
 801a322:	f7f5 fb33 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a326:	07a2      	lsls	r2, r4, #30
 801a328:	d5df      	bpl.n	801a2ea <BUTTON_Callback+0x2e>
 801a32a:	4628      	mov	r0, r5
 801a32c:	2101      	movs	r1, #1
 801a32e:	f7fe fdb3 	bl	8018e98 <WM_NotifyParent>
 801a332:	e7da      	b.n	801a2ea <BUTTON_Callback+0x2e>
 801a334:	4628      	mov	r0, r5
 801a336:	f7f5 fb17 	bl	800f968 <GUI_ALLOC_LockH>
 801a33a:	ad02      	add	r5, sp, #8
 801a33c:	4603      	mov	r3, r0
 801a33e:	3068      	adds	r0, #104	; 0x68
 801a340:	9301      	str	r3, [sp, #4]
 801a342:	f7f5 fcd3 	bl	800fcec <GUI_ALLOC_FreePtr>
 801a346:	f855 0d04 	ldr.w	r0, [r5, #-4]!
 801a34a:	2103      	movs	r1, #3
 801a34c:	306c      	adds	r0, #108	; 0x6c
 801a34e:	f7f5 fcf3 	bl	800fd38 <GUI_ALLOC_FreePtrArray>
 801a352:	4628      	mov	r0, r5
 801a354:	f7f5 fb1a 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a358:	e7c4      	b.n	801a2e4 <BUTTON_Callback+0x28>
 801a35a:	4b32      	ldr	r3, [pc, #200]	; (801a424 <BUTTON_Callback+0x168>)
 801a35c:	4621      	mov	r1, r4
 801a35e:	4628      	mov	r0, r5
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	4798      	blx	r3
 801a364:	e7c1      	b.n	801a2ea <BUTTON_Callback+0x2e>
 801a366:	68e3      	ldr	r3, [r4, #12]
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d1bb      	bne.n	801a2e4 <BUTTON_Callback+0x28>
 801a36c:	4628      	mov	r0, r5
 801a36e:	f44f 7180 	mov.w	r1, #256	; 0x100
 801a372:	f000 fcb1 	bl	801acd8 <WIDGET_AndState>
 801a376:	e7b5      	b.n	801a2e4 <BUTTON_Callback+0x28>
 801a378:	4b2b      	ldr	r3, [pc, #172]	; (801a428 <BUTTON_Callback+0x16c>)
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	2b00      	cmp	r3, #0
 801a37e:	d0b4      	beq.n	801a2ea <BUTTON_Callback+0x2e>
 801a380:	4621      	mov	r1, r4
 801a382:	4628      	mov	r0, r5
 801a384:	4798      	blx	r3
 801a386:	e7b0      	b.n	801a2ea <BUTTON_Callback+0x2e>
 801a388:	4628      	mov	r0, r5
 801a38a:	f7f5 faed 	bl	800f968 <GUI_ALLOC_LockH>
 801a38e:	ab02      	add	r3, sp, #8
 801a390:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a394:	6e42      	ldr	r2, [r0, #100]	; 0x64
 801a396:	6814      	ldr	r4, [r2, #0]
 801a398:	4618      	mov	r0, r3
 801a39a:	f7f5 faf7 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a39e:	2c00      	cmp	r4, #0
 801a3a0:	d0a3      	beq.n	801a2ea <BUTTON_Callback+0x2e>
 801a3a2:	4628      	mov	r0, r5
 801a3a4:	47a0      	blx	r4
 801a3a6:	e7a0      	b.n	801a2ea <BUTTON_Callback+0x2e>
 801a3a8:	2900      	cmp	r1, #0
 801a3aa:	dddd      	ble.n	801a368 <BUTTON_Callback+0xac>
 801a3ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 801a3b0:	4628      	mov	r0, r5
 801a3b2:	f000 fc75 	bl	801aca0 <WIDGET_OrState>
 801a3b6:	4628      	mov	r0, r5
 801a3b8:	f7f5 fad6 	bl	800f968 <GUI_ALLOC_LockH>
 801a3bc:	ac02      	add	r4, sp, #8
 801a3be:	6a86      	ldr	r6, [r0, #40]	; 0x28
 801a3c0:	f844 0d04 	str.w	r0, [r4, #-4]!
 801a3c4:	4620      	mov	r0, r4
 801a3c6:	f7f5 fae1 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a3ca:	07b1      	lsls	r1, r6, #30
 801a3cc:	d503      	bpl.n	801a3d6 <BUTTON_Callback+0x11a>
 801a3ce:	2101      	movs	r1, #1
 801a3d0:	4628      	mov	r0, r5
 801a3d2:	f7fe fd61 	bl	8018e98 <WM_NotifyParent>
 801a3d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 801a3da:	4628      	mov	r0, r5
 801a3dc:	f000 fc7c 	bl	801acd8 <WIDGET_AndState>
 801a3e0:	4628      	mov	r0, r5
 801a3e2:	f7f5 fac1 	bl	800f968 <GUI_ALLOC_LockH>
 801a3e6:	4603      	mov	r3, r0
 801a3e8:	4620      	mov	r0, r4
 801a3ea:	8e1e      	ldrh	r6, [r3, #48]	; 0x30
 801a3ec:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 801a3ee:	9301      	str	r3, [sp, #4]
 801a3f0:	f7f5 facc 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a3f4:	4630      	mov	r0, r6
 801a3f6:	f7f7 f88b 	bl	8011510 <GUI_StoreKey>
 801a3fa:	07a3      	lsls	r3, r4, #30
 801a3fc:	f57f af75 	bpl.w	801a2ea <BUTTON_Callback+0x2e>
 801a400:	4628      	mov	r0, r5
 801a402:	2102      	movs	r1, #2
 801a404:	f7fe fd48 	bl	8018e98 <WM_NotifyParent>
 801a408:	e76f      	b.n	801a2ea <BUTTON_Callback+0x2e>
 801a40a:	f000 fc65 	bl	801acd8 <WIDGET_AndState>
 801a40e:	4628      	mov	r0, r5
 801a410:	f7f5 faaa 	bl	800f968 <GUI_ALLOC_LockH>
 801a414:	ab02      	add	r3, sp, #8
 801a416:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801a418:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a41c:	8e06      	ldrh	r6, [r0, #48]	; 0x30
 801a41e:	4618      	mov	r0, r3
 801a420:	e7e6      	b.n	801a3f0 <BUTTON_Callback+0x134>
 801a422:	bf00      	nop
 801a424:	200000fc 	.word	0x200000fc
 801a428:	2002e3f8 	.word	0x2002e3f8

0801a42c <BUTTON_CreateEx>:
 801a42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a430:	b087      	sub	sp, #28
 801a432:	4680      	mov	r8, r0
 801a434:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a436:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801a438:	4c1c      	ldr	r4, [pc, #112]	; (801a4ac <BUTTON_CreateEx+0x80>)
 801a43a:	4689      	mov	r9, r1
 801a43c:	4692      	mov	sl, r2
 801a43e:	469b      	mov	fp, r3
 801a440:	254c      	movs	r5, #76	; 0x4c
 801a442:	f7f7 f91b 	bl	801167c <GUI_Lock>
 801a446:	9601      	str	r6, [sp, #4]
 801a448:	9700      	str	r7, [sp, #0]
 801a44a:	465b      	mov	r3, fp
 801a44c:	4652      	mov	r2, sl
 801a44e:	4649      	mov	r1, r9
 801a450:	4640      	mov	r0, r8
 801a452:	9503      	str	r5, [sp, #12]
 801a454:	9402      	str	r4, [sp, #8]
 801a456:	f7fd fa8b 	bl	8017970 <WM_CreateWindowAsChild>
 801a45a:	4606      	mov	r6, r0
 801a45c:	b300      	cbz	r0, 801a4a0 <BUTTON_CreateEx+0x74>
 801a45e:	f7f5 fa83 	bl	800f968 <GUI_ALLOC_LockH>
 801a462:	4f13      	ldr	r7, [pc, #76]	; (801a4b0 <BUTTON_CreateEx+0x84>)
 801a464:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801a466:	9005      	str	r0, [sp, #20]
 801a468:	2210      	movs	r2, #16
 801a46a:	1d3d      	adds	r5, r7, #4
 801a46c:	f000 fbf8 	bl	801ac60 <WIDGET__Init>
 801a470:	f10d 0e18 	add.w	lr, sp, #24
 801a474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a476:	f85e cd04 	ldr.w	ip, [lr, #-4]!
 801a47a:	f10c 0434 	add.w	r4, ip, #52	; 0x34
 801a47e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a480:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801a484:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801a488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801a48c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a48e:	f8cc 3064 	str.w	r3, [ip, #100]	; 0x64
 801a492:	4670      	mov	r0, lr
 801a494:	f7f5 fa7a 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a49a:	4630      	mov	r0, r6
 801a49c:	685b      	ldr	r3, [r3, #4]
 801a49e:	4798      	blx	r3
 801a4a0:	f7f7 f8e2 	bl	8011668 <GUI_Unlock>
 801a4a4:	4630      	mov	r0, r6
 801a4a6:	b007      	add	sp, #28
 801a4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4ac:	0801a2bd 	.word	0x0801a2bd
 801a4b0:	200000fc 	.word	0x200000fc

0801a4b4 <BUTTON_CreateIndirect>:
 801a4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a4b8:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 801a4bc:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 801a4c0:	6985      	ldr	r5, [r0, #24]
 801a4c2:	f9b0 800e 	ldrsh.w	r8, [r0, #14]
 801a4c6:	f9b0 9010 	ldrsh.w	r9, [r0, #16]
 801a4ca:	f9b0 a008 	ldrsh.w	sl, [r0, #8]
 801a4ce:	b087      	sub	sp, #28
 801a4d0:	468b      	mov	fp, r1
 801a4d2:	4416      	add	r6, r2
 801a4d4:	441f      	add	r7, r3
 801a4d6:	4604      	mov	r4, r0
 801a4d8:	354c      	adds	r5, #76	; 0x4c
 801a4da:	f7f7 f8cf 	bl	801167c <GUI_Lock>
 801a4de:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 801a5ac <BUTTON_CreateIndirect+0xf8>
 801a4e2:	f8cd b000 	str.w	fp, [sp]
 801a4e6:	f04f 0e00 	mov.w	lr, #0
 801a4ea:	4642      	mov	r2, r8
 801a4ec:	4639      	mov	r1, r7
 801a4ee:	4630      	mov	r0, r6
 801a4f0:	9503      	str	r5, [sp, #12]
 801a4f2:	464b      	mov	r3, r9
 801a4f4:	f8cd c008 	str.w	ip, [sp, #8]
 801a4f8:	f8cd e004 	str.w	lr, [sp, #4]
 801a4fc:	f7fd fa38 	bl	8017970 <WM_CreateWindowAsChild>
 801a500:	4680      	mov	r8, r0
 801a502:	b928      	cbnz	r0, 801a510 <BUTTON_CreateIndirect+0x5c>
 801a504:	f7f7 f8b0 	bl	8011668 <GUI_Unlock>
 801a508:	4640      	mov	r0, r8
 801a50a:	b007      	add	sp, #28
 801a50c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a510:	f7f5 fa2a 	bl	800f968 <GUI_ALLOC_LockH>
 801a514:	4f24      	ldr	r7, [pc, #144]	; (801a5a8 <BUTTON_CreateIndirect+0xf4>)
 801a516:	9005      	str	r0, [sp, #20]
 801a518:	4651      	mov	r1, sl
 801a51a:	2210      	movs	r2, #16
 801a51c:	1d3e      	adds	r6, r7, #4
 801a51e:	f000 fb9f 	bl	801ac60 <WIDGET__Init>
 801a522:	f10d 0918 	add.w	r9, sp, #24
 801a526:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a528:	f859 ed04 	ldr.w	lr, [r9, #-4]!
 801a52c:	f10e 0534 	add.w	r5, lr, #52	; 0x34
 801a530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a532:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801a534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801a536:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 801a53a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801a53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a540:	f8ce 3064 	str.w	r3, [lr, #100]	; 0x64
 801a544:	4648      	mov	r0, r9
 801a546:	f7f5 fa21 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a54c:	4640      	mov	r0, r8
 801a54e:	685b      	ldr	r3, [r3, #4]
 801a550:	4798      	blx	r3
 801a552:	f7f7 f889 	bl	8011668 <GUI_Unlock>
 801a556:	6865      	ldr	r5, [r4, #4]
 801a558:	f7f7 f890 	bl	801167c <GUI_Lock>
 801a55c:	4640      	mov	r0, r8
 801a55e:	f7f5 fa03 	bl	800f968 <GUI_ALLOC_LockH>
 801a562:	6e84      	ldr	r4, [r0, #104]	; 0x68
 801a564:	9004      	str	r0, [sp, #16]
 801a566:	a804      	add	r0, sp, #16
 801a568:	9405      	str	r4, [sp, #20]
 801a56a:	f7f5 fa0f 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a56e:	4629      	mov	r1, r5
 801a570:	4648      	mov	r0, r9
 801a572:	f7f7 ff01 	bl	8012378 <GUI__SetText>
 801a576:	2800      	cmp	r0, #0
 801a578:	d0c4      	beq.n	801a504 <BUTTON_CreateIndirect+0x50>
 801a57a:	9b05      	ldr	r3, [sp, #20]
 801a57c:	429c      	cmp	r4, r3
 801a57e:	d009      	beq.n	801a594 <BUTTON_CreateIndirect+0xe0>
 801a580:	4640      	mov	r0, r8
 801a582:	f7f5 f9f1 	bl	800f968 <GUI_ALLOC_LockH>
 801a586:	9a05      	ldr	r2, [sp, #20]
 801a588:	6682      	str	r2, [r0, #104]	; 0x68
 801a58a:	4603      	mov	r3, r0
 801a58c:	a804      	add	r0, sp, #16
 801a58e:	9304      	str	r3, [sp, #16]
 801a590:	f7f5 f9fc 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a594:	4640      	mov	r0, r8
 801a596:	f7fd f98f 	bl	80178b8 <WM_InvalidateWindow>
 801a59a:	f7f7 f865 	bl	8011668 <GUI_Unlock>
 801a59e:	4640      	mov	r0, r8
 801a5a0:	b007      	add	sp, #28
 801a5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5a6:	bf00      	nop
 801a5a8:	200000fc 	.word	0x200000fc
 801a5ac:	0801a2bd 	.word	0x0801a2bd

0801a5b0 <BUTTON_SetState>:
 801a5b0:	f000 bb5e 	b.w	801ac70 <WIDGET_SetState>

0801a5b4 <_Create>:
 801a5b4:	b530      	push	{r4, r5, lr}
 801a5b6:	b08b      	sub	sp, #44	; 0x2c
 801a5b8:	2100      	movs	r1, #0
 801a5ba:	4604      	mov	r4, r0
 801a5bc:	2224      	movs	r2, #36	; 0x24
 801a5be:	a801      	add	r0, sp, #4
 801a5c0:	f004 fa69 	bl	801ea96 <memset>
 801a5c4:	4620      	mov	r0, r4
 801a5c6:	f7f5 f9cf 	bl	800f968 <GUI_ALLOC_LockH>
 801a5ca:	ab0a      	add	r3, sp, #40	; 0x28
 801a5cc:	6e42      	ldr	r2, [r0, #100]	; 0x64
 801a5ce:	f843 0d28 	str.w	r0, [r3, #-40]!
 801a5d2:	6895      	ldr	r5, [r2, #8]
 801a5d4:	4618      	mov	r0, r3
 801a5d6:	f7f5 f9d9 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a5da:	2200      	movs	r2, #0
 801a5dc:	682b      	ldr	r3, [r5, #0]
 801a5de:	9401      	str	r4, [sp, #4]
 801a5e0:	9202      	str	r2, [sp, #8]
 801a5e2:	a801      	add	r0, sp, #4
 801a5e4:	4798      	blx	r3
 801a5e6:	b00b      	add	sp, #44	; 0x2c
 801a5e8:	bd30      	pop	{r4, r5, pc}
 801a5ea:	bf00      	nop

0801a5ec <_Paint>:
 801a5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5f0:	b08a      	sub	sp, #40	; 0x28
 801a5f2:	4606      	mov	r6, r0
 801a5f4:	f7f5 f9b8 	bl	800f968 <GUI_ALLOC_LockH>
 801a5f8:	4603      	mov	r3, r0
 801a5fa:	a80a      	add	r0, sp, #40	; 0x28
 801a5fc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 801a5fe:	f840 3d28 	str.w	r3, [r0, #-40]!
 801a602:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 801a604:	f8b3 8032 	ldrh.w	r8, [r3, #50]	; 0x32
 801a608:	f7f5 f9c0 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a60c:	4630      	mov	r0, r6
 801a60e:	f003 fe31 	bl	801e274 <WM_GetWindowSizeX>
 801a612:	4607      	mov	r7, r0
 801a614:	4630      	mov	r0, r6
 801a616:	f003 fe4b 	bl	801e2b0 <WM_GetWindowSizeY>
 801a61a:	3f01      	subs	r7, #1
 801a61c:	2300      	movs	r3, #0
 801a61e:	3801      	subs	r0, #1
 801a620:	f015 0510 	ands.w	r5, r5, #16
 801a624:	9008      	str	r0, [sp, #32]
 801a626:	9707      	str	r7, [sp, #28]
 801a628:	9601      	str	r6, [sp, #4]
 801a62a:	9306      	str	r3, [sp, #24]
 801a62c:	9305      	str	r3, [sp, #20]
 801a62e:	d11d      	bne.n	801a66c <_Paint+0x80>
 801a630:	f418 7f80 	tst.w	r8, #256	; 0x100
 801a634:	d118      	bne.n	801a668 <_Paint+0x7c>
 801a636:	f018 0f01 	tst.w	r8, #1
 801a63a:	bf14      	ite	ne
 801a63c:	2301      	movne	r3, #1
 801a63e:	2302      	moveq	r3, #2
 801a640:	9303      	str	r3, [sp, #12]
 801a642:	2305      	movs	r3, #5
 801a644:	9302      	str	r3, [sp, #8]
 801a646:	a801      	add	r0, sp, #4
 801a648:	47a0      	blx	r4
 801a64a:	2306      	movs	r3, #6
 801a64c:	9302      	str	r3, [sp, #8]
 801a64e:	a801      	add	r0, sp, #4
 801a650:	47a0      	blx	r4
 801a652:	2312      	movs	r3, #18
 801a654:	9302      	str	r3, [sp, #8]
 801a656:	a801      	add	r0, sp, #4
 801a658:	47a0      	blx	r4
 801a65a:	230a      	movs	r3, #10
 801a65c:	a801      	add	r0, sp, #4
 801a65e:	9302      	str	r3, [sp, #8]
 801a660:	47a0      	blx	r4
 801a662:	b00a      	add	sp, #40	; 0x28
 801a664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a668:	9503      	str	r5, [sp, #12]
 801a66a:	e7ea      	b.n	801a642 <_Paint+0x56>
 801a66c:	2303      	movs	r3, #3
 801a66e:	9303      	str	r3, [sp, #12]
 801a670:	e7e7      	b.n	801a642 <_Paint+0x56>
 801a672:	bf00      	nop

0801a674 <BUTTON_DrawSkinFlex>:
 801a674:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a676:	4a95      	ldr	r2, [pc, #596]	; (801a8cc <BUTTON_DrawSkinFlex+0x258>)
 801a678:	6881      	ldr	r1, [r0, #8]
 801a67a:	6843      	ldr	r3, [r0, #4]
 801a67c:	f852 6021 	ldr.w	r6, [r2, r1, lsl #2]
 801a680:	b089      	sub	sp, #36	; 0x24
 801a682:	4604      	mov	r4, r0
 801a684:	2b12      	cmp	r3, #18
 801a686:	d83f      	bhi.n	801a708 <BUTTON_DrawSkinFlex+0x94>
 801a688:	e8df f003 	tbb	[pc, r3]
 801a68c:	3e3e3eae 	.word	0x3e3e3eae
 801a690:	3e960a3e 	.word	0x3e960a3e
 801a694:	3e3e3e3e 	.word	0x3e3e3e3e
 801a698:	3e3e3e3e 	.word	0x3e3e3e3e
 801a69c:	3e3e      	.short	0x3e3e
 801a69e:	41          	.byte	0x41
 801a69f:	00          	.byte	0x00
 801a6a0:	69f5      	ldr	r5, [r6, #28]
 801a6a2:	2d00      	cmp	r5, #0
 801a6a4:	f040 80b2 	bne.w	801a80c <BUTTON_DrawSkinFlex+0x198>
 801a6a8:	1f37      	subs	r7, r6, #4
 801a6aa:	f857 0f04 	ldr.w	r0, [r7, #4]!
 801a6ae:	f7f5 fe31 	bl	8010314 <GUI_SetColor>
 801a6b2:	f104 0010 	add.w	r0, r4, #16
 801a6b6:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 801a6b8:	1b5b      	subs	r3, r3, r5
 801a6ba:	1b52      	subs	r2, r2, r5
 801a6bc:	4429      	add	r1, r5
 801a6be:	4428      	add	r0, r5
 801a6c0:	3501      	adds	r5, #1
 801a6c2:	f000 fe19 	bl	801b2f8 <GUI_DrawRect>
 801a6c6:	2d02      	cmp	r5, #2
 801a6c8:	d1ef      	bne.n	801a6aa <BUTTON_DrawSkinFlex+0x36>
 801a6ca:	6932      	ldr	r2, [r6, #16]
 801a6cc:	6961      	ldr	r1, [r4, #20]
 801a6ce:	69e3      	ldr	r3, [r4, #28]
 801a6d0:	9201      	str	r2, [sp, #4]
 801a6d2:	69a2      	ldr	r2, [r4, #24]
 801a6d4:	6920      	ldr	r0, [r4, #16]
 801a6d6:	68f7      	ldr	r7, [r6, #12]
 801a6d8:	9700      	str	r7, [sp, #0]
 801a6da:	440b      	add	r3, r1
 801a6dc:	105b      	asrs	r3, r3, #1
 801a6de:	3102      	adds	r1, #2
 801a6e0:	1b52      	subs	r2, r2, r5
 801a6e2:	4428      	add	r0, r5
 801a6e4:	f7f6 fccc 	bl	8011080 <GUI_DrawGradientV>
 801a6e8:	69e3      	ldr	r3, [r4, #28]
 801a6ea:	6961      	ldr	r1, [r4, #20]
 801a6ec:	69b2      	ldr	r2, [r6, #24]
 801a6ee:	9201      	str	r2, [sp, #4]
 801a6f0:	69a2      	ldr	r2, [r4, #24]
 801a6f2:	6920      	ldr	r0, [r4, #16]
 801a6f4:	6974      	ldr	r4, [r6, #20]
 801a6f6:	9400      	str	r4, [sp, #0]
 801a6f8:	4419      	add	r1, r3
 801a6fa:	1049      	asrs	r1, r1, #1
 801a6fc:	3101      	adds	r1, #1
 801a6fe:	3b02      	subs	r3, #2
 801a700:	1b52      	subs	r2, r2, r5
 801a702:	4428      	add	r0, r5
 801a704:	f7f6 fcbc 	bl	8011080 <GUI_DrawGradientV>
 801a708:	2000      	movs	r0, #0
 801a70a:	b009      	add	sp, #36	; 0x24
 801a70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a70e:	6800      	ldr	r0, [r0, #0]
 801a710:	f7f5 f92a 	bl	800f968 <GUI_ALLOC_LockH>
 801a714:	6e85      	ldr	r5, [r0, #104]	; 0x68
 801a716:	9004      	str	r0, [sp, #16]
 801a718:	2d00      	cmp	r5, #0
 801a71a:	f000 80cf 	beq.w	801a8bc <BUTTON_DrawSkinFlex+0x248>
 801a71e:	68a3      	ldr	r3, [r4, #8]
 801a720:	f9b0 705c 	ldrsh.w	r7, [r0, #92]	; 0x5c
 801a724:	2b00      	cmp	r3, #0
 801a726:	f000 80c7 	beq.w	801a8b8 <BUTTON_DrawSkinFlex+0x244>
 801a72a:	2b03      	cmp	r3, #3
 801a72c:	bf14      	ite	ne
 801a72e:	2300      	movne	r3, #0
 801a730:	2302      	moveq	r3, #2
 801a732:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801a736:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801a738:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 801a73a:	f7f5 fe4d 	bl	80103d8 <GUI_SetFont>
 801a73e:	4620      	mov	r0, r4
 801a740:	f7f5 fde8 	bl	8010314 <GUI_SetColor>
 801a744:	ac08      	add	r4, sp, #32
 801a746:	a806      	add	r0, sp, #24
 801a748:	f7f5 fc6e 	bl	8010028 <GUI_GetClientRect>
 801a74c:	f8b6 e01c 	ldrh.w	lr, [r6, #28]
 801a750:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801a754:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801a758:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 801a75c:	f854 6d10 	ldr.w	r6, [r4, #-16]!
 801a760:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801a764:	4471      	add	r1, lr
 801a766:	ebce 0202 	rsb	r2, lr, r2
 801a76a:	3002      	adds	r0, #2
 801a76c:	3b02      	subs	r3, #2
 801a76e:	f8ad 1018 	strh.w	r1, [sp, #24]
 801a772:	f8ad 201c 	strh.w	r2, [sp, #28]
 801a776:	f9b6 105e 	ldrsh.w	r1, [r6, #94]	; 0x5e
 801a77a:	f9b6 2060 	ldrsh.w	r2, [r6, #96]	; 0x60
 801a77e:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a782:	a806      	add	r0, sp, #24
 801a784:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a788:	f7f5 fcc6 	bl	8010118 <GUI_MoveRect>
 801a78c:	4620      	mov	r0, r4
 801a78e:	f7f5 f8fd 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a792:	2002      	movs	r0, #2
 801a794:	f7f5 fe50 	bl	8010438 <GUI_SetTextMode>
 801a798:	4628      	mov	r0, r5
 801a79a:	f7f5 f8e5 	bl	800f968 <GUI_ALLOC_LockH>
 801a79e:	ac08      	add	r4, sp, #32
 801a7a0:	a906      	add	r1, sp, #24
 801a7a2:	f844 0d0c 	str.w	r0, [r4, #-12]!
 801a7a6:	463a      	mov	r2, r7
 801a7a8:	f7f6 fbbc 	bl	8010f24 <GUI_DispStringInRect>
 801a7ac:	4620      	mov	r0, r4
 801a7ae:	f7f5 f8ed 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a7b2:	2000      	movs	r0, #0
 801a7b4:	b009      	add	sp, #36	; 0x24
 801a7b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7b8:	6800      	ldr	r0, [r0, #0]
 801a7ba:	f7f5 f8d5 	bl	800f968 <GUI_ALLOC_LockH>
 801a7be:	9004      	str	r0, [sp, #16]
 801a7c0:	6820      	ldr	r0, [r4, #0]
 801a7c2:	f7ff fc01 	bl	8019fc8 <WM__IsEnabled>
 801a7c6:	b9a8      	cbnz	r0, 801a7f4 <BUTTON_DrawSkinFlex+0x180>
 801a7c8:	9b04      	ldr	r3, [sp, #16]
 801a7ca:	6f5d      	ldr	r5, [r3, #116]	; 0x74
 801a7cc:	b905      	cbnz	r5, 801a7d0 <BUTTON_DrawSkinFlex+0x15c>
 801a7ce:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801a7d0:	a804      	add	r0, sp, #16
 801a7d2:	f7f5 f8db 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a7d6:	2300      	movs	r3, #0
 801a7d8:	4628      	mov	r0, r5
 801a7da:	6821      	ldr	r1, [r4, #0]
 801a7dc:	461a      	mov	r2, r3
 801a7de:	f000 f8db 	bl	801a998 <GUI_DRAW__Draw>
 801a7e2:	2000      	movs	r0, #0
 801a7e4:	b009      	add	sp, #36	; 0x24
 801a7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7e8:	6800      	ldr	r0, [r0, #0]
 801a7ea:	f004 f8ad 	bl	801e948 <WM_SetHasTrans>
 801a7ee:	2000      	movs	r0, #0
 801a7f0:	b009      	add	sp, #36	; 0x24
 801a7f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7f4:	68a3      	ldr	r3, [r4, #8]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d164      	bne.n	801a8c4 <BUTTON_DrawSkinFlex+0x250>
 801a7fa:	9a04      	ldr	r2, [sp, #16]
 801a7fc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	bf14      	ite	ne
 801a802:	236c      	movne	r3, #108	; 0x6c
 801a804:	2368      	moveq	r3, #104	; 0x68
 801a806:	4413      	add	r3, r2
 801a808:	685d      	ldr	r5, [r3, #4]
 801a80a:	e7e1      	b.n	801a7d0 <BUTTON_DrawSkinFlex+0x15c>
 801a80c:	68b3      	ldr	r3, [r6, #8]
 801a80e:	9303      	str	r3, [sp, #12]
 801a810:	6873      	ldr	r3, [r6, #4]
 801a812:	9302      	str	r3, [sp, #8]
 801a814:	4637      	mov	r7, r6
 801a816:	f100 0114 	add.w	r1, r0, #20
 801a81a:	f857 0904 	ldr.w	r0, [r7], #-4
 801a81e:	c90e      	ldmia	r1, {r1, r2, r3}
 801a820:	9001      	str	r0, [sp, #4]
 801a822:	6920      	ldr	r0, [r4, #16]
 801a824:	9500      	str	r5, [sp, #0]
 801a826:	f002 f8cf 	bl	801c9c8 <GUI__DrawTwinArc4>
 801a82a:	2500      	movs	r5, #0
 801a82c:	f857 0f04 	ldr.w	r0, [r7, #4]!
 801a830:	f7f5 fd70 	bl	8010314 <GUI_SetColor>
 801a834:	69f3      	ldr	r3, [r6, #28]
 801a836:	69a2      	ldr	r2, [r4, #24]
 801a838:	6921      	ldr	r1, [r4, #16]
 801a83a:	6960      	ldr	r0, [r4, #20]
 801a83c:	1ad2      	subs	r2, r2, r3
 801a83e:	4419      	add	r1, r3
 801a840:	4428      	add	r0, r5
 801a842:	f7f6 fcf1 	bl	8011228 <GUI_DrawHLine>
 801a846:	69f3      	ldr	r3, [r6, #28]
 801a848:	69a2      	ldr	r2, [r4, #24]
 801a84a:	6921      	ldr	r1, [r4, #16]
 801a84c:	69e0      	ldr	r0, [r4, #28]
 801a84e:	1ad2      	subs	r2, r2, r3
 801a850:	4419      	add	r1, r3
 801a852:	1b40      	subs	r0, r0, r5
 801a854:	f7f6 fce8 	bl	8011228 <GUI_DrawHLine>
 801a858:	69f3      	ldr	r3, [r6, #28]
 801a85a:	69e2      	ldr	r2, [r4, #28]
 801a85c:	6961      	ldr	r1, [r4, #20]
 801a85e:	6920      	ldr	r0, [r4, #16]
 801a860:	1ad2      	subs	r2, r2, r3
 801a862:	4419      	add	r1, r3
 801a864:	4428      	add	r0, r5
 801a866:	f7f6 fd3b 	bl	80112e0 <GUI_DrawVLine>
 801a86a:	69f3      	ldr	r3, [r6, #28]
 801a86c:	69e2      	ldr	r2, [r4, #28]
 801a86e:	6961      	ldr	r1, [r4, #20]
 801a870:	69a0      	ldr	r0, [r4, #24]
 801a872:	1ad2      	subs	r2, r2, r3
 801a874:	1b40      	subs	r0, r0, r5
 801a876:	4419      	add	r1, r3
 801a878:	3501      	adds	r5, #1
 801a87a:	f7f6 fd31 	bl	80112e0 <GUI_DrawVLine>
 801a87e:	2d02      	cmp	r5, #2
 801a880:	d1d4      	bne.n	801a82c <BUTTON_DrawSkinFlex+0x1b8>
 801a882:	68b0      	ldr	r0, [r6, #8]
 801a884:	f7f5 fd46 	bl	8010314 <GUI_SetColor>
 801a888:	69f1      	ldr	r1, [r6, #28]
 801a88a:	6920      	ldr	r0, [r4, #16]
 801a88c:	6965      	ldr	r5, [r4, #20]
 801a88e:	69e3      	ldr	r3, [r4, #28]
 801a890:	1842      	adds	r2, r0, r1
 801a892:	1a5b      	subs	r3, r3, r1
 801a894:	3a01      	subs	r2, #1
 801a896:	4429      	add	r1, r5
 801a898:	3002      	adds	r0, #2
 801a89a:	f7f6 fd4b 	bl	8011334 <GUI_FillRect>
 801a89e:	69f1      	ldr	r1, [r6, #28]
 801a8a0:	69a2      	ldr	r2, [r4, #24]
 801a8a2:	6965      	ldr	r5, [r4, #20]
 801a8a4:	69e3      	ldr	r3, [r4, #28]
 801a8a6:	1a50      	subs	r0, r2, r1
 801a8a8:	1a5b      	subs	r3, r3, r1
 801a8aa:	3001      	adds	r0, #1
 801a8ac:	4429      	add	r1, r5
 801a8ae:	3a02      	subs	r2, #2
 801a8b0:	f7f6 fd40 	bl	8011334 <GUI_FillRect>
 801a8b4:	69f5      	ldr	r5, [r6, #28]
 801a8b6:	e708      	b.n	801a6ca <BUTTON_DrawSkinFlex+0x56>
 801a8b8:	2301      	movs	r3, #1
 801a8ba:	e73a      	b.n	801a732 <BUTTON_DrawSkinFlex+0xbe>
 801a8bc:	a804      	add	r0, sp, #16
 801a8be:	f7f5 f865 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a8c2:	e721      	b.n	801a708 <BUTTON_DrawSkinFlex+0x94>
 801a8c4:	9b04      	ldr	r3, [sp, #16]
 801a8c6:	6edd      	ldr	r5, [r3, #108]	; 0x6c
 801a8c8:	e782      	b.n	801a7d0 <BUTTON_DrawSkinFlex+0x15c>
 801a8ca:	bf00      	nop
 801a8cc:	08031498 	.word	0x08031498

0801a8d0 <GUI_CreateDialogBox>:
 801a8d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8d4:	4604      	mov	r4, r0
 801a8d6:	b082      	sub	sp, #8
 801a8d8:	460d      	mov	r5, r1
 801a8da:	4616      	mov	r6, r2
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d038      	beq.n	801a952 <GUI_CreateDialogBox+0x82>
 801a8e0:	469a      	mov	sl, r3
 801a8e2:	9600      	str	r6, [sp, #0]
 801a8e4:	6826      	ldr	r6, [r4, #0]
 801a8e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a8e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a8ea:	4651      	mov	r1, sl
 801a8ec:	4620      	mov	r0, r4
 801a8ee:	47b0      	blx	r6
 801a8f0:	4607      	mov	r7, r0
 801a8f2:	b918      	cbnz	r0, 801a8fc <GUI_CreateDialogBox+0x2c>
 801a8f4:	4638      	mov	r0, r7
 801a8f6:	b002      	add	sp, #8
 801a8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8fc:	f7fe f96e 	bl	8018bdc <WM_GetClientWindow>
 801a900:	8a61      	ldrh	r1, [r4, #18]
 801a902:	4680      	mov	r8, r0
 801a904:	4638      	mov	r0, r7
 801a906:	f000 f9cb 	bl	801aca0 <WIDGET_OrState>
 801a90a:	4638      	mov	r0, r7
 801a90c:	f7fe fd1e 	bl	801934c <WM_ShowWindow>
 801a910:	3d01      	subs	r5, #1
 801a912:	4640      	mov	r0, r8
 801a914:	f7fe fd1a 	bl	801934c <WM_ShowWindow>
 801a918:	2d00      	cmp	r5, #0
 801a91a:	bfc8      	it	gt
 801a91c:	f04f 0900 	movgt.w	r9, #0
 801a920:	dc04      	bgt.n	801a92c <GUI_CreateDialogBox+0x5c>
 801a922:	e01a      	b.n	801a95a <GUI_CreateDialogBox+0x8a>
 801a924:	f7fe fd12 	bl	801934c <WM_ShowWindow>
 801a928:	3d01      	subs	r5, #1
 801a92a:	d016      	beq.n	801a95a <GUI_CreateDialogBox+0x8a>
 801a92c:	f854 6f1c 	ldr.w	r6, [r4, #28]!
 801a930:	f8cd 9000 	str.w	r9, [sp]
 801a934:	2300      	movs	r3, #0
 801a936:	4620      	mov	r0, r4
 801a938:	461a      	mov	r2, r3
 801a93a:	4641      	mov	r1, r8
 801a93c:	47b0      	blx	r6
 801a93e:	4606      	mov	r6, r0
 801a940:	2800      	cmp	r0, #0
 801a942:	d1ef      	bne.n	801a924 <GUI_CreateDialogBox+0x54>
 801a944:	4638      	mov	r0, r7
 801a946:	f7fd f9eb 	bl	8017d20 <WM_DeleteWindow>
 801a94a:	4630      	mov	r0, r6
 801a94c:	b002      	add	sp, #8
 801a94e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a952:	f7fe f951 	bl	8018bf8 <WM_GetDesktopWindow>
 801a956:	4682      	mov	sl, r0
 801a958:	e7c3      	b.n	801a8e2 <GUI_CreateDialogBox+0x12>
 801a95a:	4640      	mov	r0, r8
 801a95c:	211d      	movs	r1, #29
 801a95e:	f7fe fb09 	bl	8018f74 <WM_SendMessageNoPara>
 801a962:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 801a966:	d0c5      	beq.n	801a8f4 <GUI_CreateDialogBox+0x24>
 801a968:	f7f6 fe88 	bl	801167c <GUI_Lock>
 801a96c:	f7fe fa1e 	bl	8018dac <WM_GetFocusedWindow>
 801a970:	b960      	cbnz	r0, 801a98c <GUI_CreateDialogBox+0xbc>
 801a972:	45ba      	cmp	sl, r7
 801a974:	d002      	beq.n	801a97c <GUI_CreateDialogBox+0xac>
 801a976:	4638      	mov	r0, r7
 801a978:	f003 ff66 	bl	801e848 <WM_SetFocusOnNextChild>
 801a97c:	f7f6 fe74 	bl	8011668 <GUI_Unlock>
 801a980:	4638      	mov	r0, r7
 801a982:	b002      	add	sp, #8
 801a984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a988:	2800      	cmp	r0, #0
 801a98a:	d0f4      	beq.n	801a976 <GUI_CreateDialogBox+0xa6>
 801a98c:	f7f4 ffe2 	bl	800f954 <GUI_ALLOC_h2p>
 801a990:	6980      	ldr	r0, [r0, #24]
 801a992:	4287      	cmp	r7, r0
 801a994:	d1f8      	bne.n	801a988 <GUI_CreateDialogBox+0xb8>
 801a996:	e7f1      	b.n	801a97c <GUI_CreateDialogBox+0xac>

0801a998 <GUI_DRAW__Draw>:
 801a998:	b900      	cbnz	r0, 801a99c <GUI_DRAW__Draw+0x4>
 801a99a:	4770      	bx	lr
 801a99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9a0:	b082      	sub	sp, #8
 801a9a2:	461e      	mov	r6, r3
 801a9a4:	4615      	mov	r5, r2
 801a9a6:	460c      	mov	r4, r1
 801a9a8:	4607      	mov	r7, r0
 801a9aa:	f7f4 ffdd 	bl	800f968 <GUI_ALLOC_LockH>
 801a9ae:	ab02      	add	r3, sp, #8
 801a9b0:	6802      	ldr	r2, [r0, #0]
 801a9b2:	f843 0d04 	str.w	r0, [r3, #-4]!
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	f8d2 8000 	ldr.w	r8, [r2]
 801a9bc:	f7f4 ffe6 	bl	800f98c <GUI_ALLOC_UnlockH>
 801a9c0:	4633      	mov	r3, r6
 801a9c2:	462a      	mov	r2, r5
 801a9c4:	4621      	mov	r1, r4
 801a9c6:	4638      	mov	r0, r7
 801a9c8:	47c0      	blx	r8
 801a9ca:	b002      	add	sp, #8
 801a9cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a9d0 <TEXT_Callback>:
 801a9d0:	b530      	push	{r4, r5, lr}
 801a9d2:	6845      	ldr	r5, [r0, #4]
 801a9d4:	b085      	sub	sp, #20
 801a9d6:	4604      	mov	r4, r0
 801a9d8:	4601      	mov	r1, r0
 801a9da:	4628      	mov	r0, r5
 801a9dc:	f000 f998 	bl	801ad10 <WIDGET_HandleActive>
 801a9e0:	b1b8      	cbz	r0, 801aa12 <TEXT_Callback+0x42>
 801a9e2:	6823      	ldr	r3, [r4, #0]
 801a9e4:	2b0f      	cmp	r3, #15
 801a9e6:	d016      	beq.n	801aa16 <TEXT_Callback+0x46>
 801a9e8:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801a9ec:	d040      	beq.n	801aa70 <TEXT_Callback+0xa0>
 801a9ee:	2b0b      	cmp	r3, #11
 801a9f0:	d10c      	bne.n	801aa0c <TEXT_Callback+0x3c>
 801a9f2:	4628      	mov	r0, r5
 801a9f4:	f7f4 ffb8 	bl	800f968 <GUI_ALLOC_LockH>
 801a9f8:	ad04      	add	r5, sp, #16
 801a9fa:	4603      	mov	r3, r0
 801a9fc:	f845 3d08 	str.w	r3, [r5, #-8]!
 801aa00:	3044      	adds	r0, #68	; 0x44
 801aa02:	f7f5 f973 	bl	800fcec <GUI_ALLOC_FreePtr>
 801aa06:	4628      	mov	r0, r5
 801aa08:	f7f4 ffc0 	bl	800f98c <GUI_ALLOC_UnlockH>
 801aa0c:	4620      	mov	r0, r4
 801aa0e:	f7fd fe15 	bl	801863c <WM_DefaultProc>
 801aa12:	b005      	add	sp, #20
 801aa14:	bd30      	pop	{r4, r5, pc}
 801aa16:	4628      	mov	r0, r5
 801aa18:	f7f4 ffa6 	bl	800f968 <GUI_ALLOC_LockH>
 801aa1c:	9000      	str	r0, [sp, #0]
 801aa1e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801aa20:	f7f8 fb44 	bl	80130ac <LCD_SetColor>
 801aa24:	9b00      	ldr	r3, [sp, #0]
 801aa26:	6b58      	ldr	r0, [r3, #52]	; 0x34
 801aa28:	f7f5 fcd6 	bl	80103d8 <GUI_SetFont>
 801aa2c:	4628      	mov	r0, r5
 801aa2e:	f003 ffb5 	bl	801e99c <WM_GetHasTrans>
 801aa32:	b340      	cbz	r0, 801aa86 <TEXT_Callback+0xb6>
 801aa34:	9b00      	ldr	r3, [sp, #0]
 801aa36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aa38:	b1ab      	cbz	r3, 801aa66 <TEXT_Callback+0x96>
 801aa3a:	2002      	movs	r0, #2
 801aa3c:	f7f5 fcfc 	bl	8010438 <GUI_SetTextMode>
 801aa40:	a802      	add	r0, sp, #8
 801aa42:	f7fe f8b1 	bl	8018ba8 <WM_GetClientRect>
 801aa46:	9b00      	ldr	r3, [sp, #0]
 801aa48:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801aa4a:	f7f4 ff8d 	bl	800f968 <GUI_ALLOC_LockH>
 801aa4e:	9a00      	ldr	r2, [sp, #0]
 801aa50:	9001      	str	r0, [sp, #4]
 801aa52:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 801aa56:	f9b2 2048 	ldrsh.w	r2, [r2, #72]	; 0x48
 801aa5a:	a902      	add	r1, sp, #8
 801aa5c:	f7f6 fa8a 	bl	8010f74 <GUI_DispStringInRectWrap>
 801aa60:	a801      	add	r0, sp, #4
 801aa62:	f7f4 ff93 	bl	800f98c <GUI_ALLOC_UnlockH>
 801aa66:	4668      	mov	r0, sp
 801aa68:	f7f4 ff90 	bl	800f98c <GUI_ALLOC_UnlockH>
 801aa6c:	b005      	add	sp, #20
 801aa6e:	bd30      	pop	{r4, r5, pc}
 801aa70:	68e3      	ldr	r3, [r4, #12]
 801aa72:	b17b      	cbz	r3, 801aa94 <TEXT_Callback+0xc4>
 801aa74:	7a1b      	ldrb	r3, [r3, #8]
 801aa76:	2b00      	cmp	r3, #0
 801aa78:	bf14      	ite	ne
 801aa7a:	2101      	movne	r1, #1
 801aa7c:	2102      	moveq	r1, #2
 801aa7e:	4628      	mov	r0, r5
 801aa80:	f7fe fa0a 	bl	8018e98 <WM_NotifyParent>
 801aa84:	e7c2      	b.n	801aa0c <TEXT_Callback+0x3c>
 801aa86:	9b00      	ldr	r3, [sp, #0]
 801aa88:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801aa8a:	f7f8 fb09 	bl	80130a0 <LCD_SetBkColor>
 801aa8e:	f7f5 fd45 	bl	801051c <GUI_Clear>
 801aa92:	e7cf      	b.n	801aa34 <TEXT_Callback+0x64>
 801aa94:	2103      	movs	r1, #3
 801aa96:	e7f2      	b.n	801aa7e <TEXT_Callback+0xae>

0801aa98 <TEXT_CreateIndirect>:
 801aa98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa9c:	468b      	mov	fp, r1
 801aa9e:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 801aaa2:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 801aaa6:	6985      	ldr	r5, [r0, #24]
 801aaa8:	f9b0 700e 	ldrsh.w	r7, [r0, #14]
 801aaac:	f9b0 8010 	ldrsh.w	r8, [r0, #16]
 801aab0:	f8b0 9012 	ldrh.w	r9, [r0, #18]
 801aab4:	f9b0 a008 	ldrsh.w	sl, [r0, #8]
 801aab8:	6844      	ldr	r4, [r0, #4]
 801aaba:	b089      	sub	sp, #36	; 0x24
 801aabc:	4419      	add	r1, r3
 801aabe:	4416      	add	r6, r2
 801aac0:	9105      	str	r1, [sp, #20]
 801aac2:	3520      	adds	r5, #32
 801aac4:	f7f6 fdda 	bl	801167c <GUI_Lock>
 801aac8:	f8df e090 	ldr.w	lr, [pc, #144]	; 801ab5c <TEXT_CreateIndirect+0xc4>
 801aacc:	9503      	str	r5, [sp, #12]
 801aace:	f04f 0c03 	mov.w	ip, #3
 801aad2:	f8cd b000 	str.w	fp, [sp]
 801aad6:	9905      	ldr	r1, [sp, #20]
 801aad8:	f8cd e008 	str.w	lr, [sp, #8]
 801aadc:	4630      	mov	r0, r6
 801aade:	4643      	mov	r3, r8
 801aae0:	463a      	mov	r2, r7
 801aae2:	f8cd c004 	str.w	ip, [sp, #4]
 801aae6:	f7fc ff43 	bl	8017970 <WM_CreateWindowAsChild>
 801aaea:	4605      	mov	r5, r0
 801aaec:	b300      	cbz	r0, 801ab30 <TEXT_CreateIndirect+0x98>
 801aaee:	b32c      	cbz	r4, 801ab3c <TEXT_CreateIndirect+0xa4>
 801aaf0:	4620      	mov	r0, r4
 801aaf2:	f7e5 fb85 	bl	8000200 <strlen>
 801aaf6:	3001      	adds	r0, #1
 801aaf8:	f7f5 f950 	bl	800fd9c <GUI_ALLOC_AllocZero>
 801aafc:	4607      	mov	r7, r0
 801aafe:	b9f8      	cbnz	r0, 801ab40 <TEXT_CreateIndirect+0xa8>
 801ab00:	ae07      	add	r6, sp, #28
 801ab02:	4628      	mov	r0, r5
 801ab04:	f7f4 ff30 	bl	800f968 <GUI_ALLOC_LockH>
 801ab08:	4651      	mov	r1, sl
 801ab0a:	2200      	movs	r2, #0
 801ab0c:	9007      	str	r0, [sp, #28]
 801ab0e:	f000 f8a7 	bl	801ac60 <WIDGET__Init>
 801ab12:	4b11      	ldr	r3, [pc, #68]	; (801ab58 <TEXT_CreateIndirect+0xc0>)
 801ab14:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801ab18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ab1a:	f10e 0434 	add.w	r4, lr, #52	; 0x34
 801ab1e:	f8ce 7044 	str.w	r7, [lr, #68]	; 0x44
 801ab22:	f8ae 9048 	strh.w	r9, [lr, #72]	; 0x48
 801ab26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801ab2a:	4630      	mov	r0, r6
 801ab2c:	f7f4 ff2e 	bl	800f98c <GUI_ALLOC_UnlockH>
 801ab30:	f7f6 fd9a 	bl	8011668 <GUI_Unlock>
 801ab34:	4628      	mov	r0, r5
 801ab36:	b009      	add	sp, #36	; 0x24
 801ab38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab3c:	4627      	mov	r7, r4
 801ab3e:	e7df      	b.n	801ab00 <TEXT_CreateIndirect+0x68>
 801ab40:	f7f4 ff12 	bl	800f968 <GUI_ALLOC_LockH>
 801ab44:	ae08      	add	r6, sp, #32
 801ab46:	4621      	mov	r1, r4
 801ab48:	f846 0d04 	str.w	r0, [r6, #-4]!
 801ab4c:	f003 ffab 	bl	801eaa6 <strcpy>
 801ab50:	4630      	mov	r0, r6
 801ab52:	f7f4 ff1b 	bl	800f98c <GUI_ALLOC_UnlockH>
 801ab56:	e7d4      	b.n	801ab02 <TEXT_CreateIndirect+0x6a>
 801ab58:	200001c0 	.word	0x200001c0
 801ab5c:	0801a9d1 	.word	0x0801a9d1

0801ab60 <TEXT_SetFont>:
 801ab60:	b900      	cbnz	r0, 801ab64 <TEXT_SetFont+0x4>
 801ab62:	4770      	bx	lr
 801ab64:	b530      	push	{r4, r5, lr}
 801ab66:	4604      	mov	r4, r0
 801ab68:	b083      	sub	sp, #12
 801ab6a:	460d      	mov	r5, r1
 801ab6c:	f7f6 fd86 	bl	801167c <GUI_Lock>
 801ab70:	4620      	mov	r0, r4
 801ab72:	f7f4 fef9 	bl	800f968 <GUI_ALLOC_LockH>
 801ab76:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801ab78:	9001      	str	r0, [sp, #4]
 801ab7a:	42ab      	cmp	r3, r5
 801ab7c:	d003      	beq.n	801ab86 <TEXT_SetFont+0x26>
 801ab7e:	6345      	str	r5, [r0, #52]	; 0x34
 801ab80:	4620      	mov	r0, r4
 801ab82:	f7fc fe99 	bl	80178b8 <WM_InvalidateWindow>
 801ab86:	a801      	add	r0, sp, #4
 801ab88:	f7f4 ff00 	bl	800f98c <GUI_ALLOC_UnlockH>
 801ab8c:	f7f6 fd6c 	bl	8011668 <GUI_Unlock>
 801ab90:	b003      	add	sp, #12
 801ab92:	bd30      	pop	{r4, r5, pc}

0801ab94 <TEXT_SetText>:
 801ab94:	b530      	push	{r4, r5, lr}
 801ab96:	b083      	sub	sp, #12
 801ab98:	b918      	cbnz	r0, 801aba2 <TEXT_SetText+0xe>
 801ab9a:	2501      	movs	r5, #1
 801ab9c:	4628      	mov	r0, r5
 801ab9e:	b003      	add	sp, #12
 801aba0:	bd30      	pop	{r4, r5, pc}
 801aba2:	4604      	mov	r4, r0
 801aba4:	460d      	mov	r5, r1
 801aba6:	f7f6 fd69 	bl	801167c <GUI_Lock>
 801abaa:	4620      	mov	r0, r4
 801abac:	f7f4 fedc 	bl	800f968 <GUI_ALLOC_LockH>
 801abb0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 801abb2:	9000      	str	r0, [sp, #0]
 801abb4:	4668      	mov	r0, sp
 801abb6:	9301      	str	r3, [sp, #4]
 801abb8:	f7f4 fee8 	bl	800f98c <GUI_ALLOC_UnlockH>
 801abbc:	4629      	mov	r1, r5
 801abbe:	a801      	add	r0, sp, #4
 801abc0:	f7f7 fbda 	bl	8012378 <GUI__SetText>
 801abc4:	2800      	cmp	r0, #0
 801abc6:	bf0c      	ite	eq
 801abc8:	2501      	moveq	r5, #1
 801abca:	2500      	movne	r5, #0
 801abcc:	d104      	bne.n	801abd8 <TEXT_SetText+0x44>
 801abce:	f7f6 fd4b 	bl	8011668 <GUI_Unlock>
 801abd2:	4628      	mov	r0, r5
 801abd4:	b003      	add	sp, #12
 801abd6:	bd30      	pop	{r4, r5, pc}
 801abd8:	4620      	mov	r0, r4
 801abda:	f7f4 fec5 	bl	800f968 <GUI_ALLOC_LockH>
 801abde:	9b01      	ldr	r3, [sp, #4]
 801abe0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801abe2:	9000      	str	r0, [sp, #0]
 801abe4:	429a      	cmp	r2, r3
 801abe6:	bf18      	it	ne
 801abe8:	6443      	strne	r3, [r0, #68]	; 0x44
 801abea:	4668      	mov	r0, sp
 801abec:	f7f4 fece 	bl	800f98c <GUI_ALLOC_UnlockH>
 801abf0:	4620      	mov	r0, r4
 801abf2:	f7fc fe61 	bl	80178b8 <WM_InvalidateWindow>
 801abf6:	e7ea      	b.n	801abce <TEXT_SetText+0x3a>

0801abf8 <TEXT_SetTextAlign>:
 801abf8:	b900      	cbnz	r0, 801abfc <TEXT_SetTextAlign+0x4>
 801abfa:	4770      	bx	lr
 801abfc:	b530      	push	{r4, r5, lr}
 801abfe:	4604      	mov	r4, r0
 801ac00:	b083      	sub	sp, #12
 801ac02:	460d      	mov	r5, r1
 801ac04:	f7f6 fd3a 	bl	801167c <GUI_Lock>
 801ac08:	4620      	mov	r0, r4
 801ac0a:	f7f4 fead 	bl	800f968 <GUI_ALLOC_LockH>
 801ac0e:	ab02      	add	r3, sp, #8
 801ac10:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
 801ac14:	f843 0d04 	str.w	r0, [r3, #-4]!
 801ac18:	4618      	mov	r0, r3
 801ac1a:	f7f4 feb7 	bl	800f98c <GUI_ALLOC_UnlockH>
 801ac1e:	4620      	mov	r0, r4
 801ac20:	f7fc fe4a 	bl	80178b8 <WM_InvalidateWindow>
 801ac24:	f7f6 fd20 	bl	8011668 <GUI_Unlock>
 801ac28:	b003      	add	sp, #12
 801ac2a:	bd30      	pop	{r4, r5, pc}

0801ac2c <TEXT_SetTextColor>:
 801ac2c:	b900      	cbnz	r0, 801ac30 <TEXT_SetTextColor+0x4>
 801ac2e:	4770      	bx	lr
 801ac30:	b530      	push	{r4, r5, lr}
 801ac32:	4604      	mov	r4, r0
 801ac34:	b083      	sub	sp, #12
 801ac36:	460d      	mov	r5, r1
 801ac38:	f7f6 fd20 	bl	801167c <GUI_Lock>
 801ac3c:	4620      	mov	r0, r4
 801ac3e:	f7f4 fe93 	bl	800f968 <GUI_ALLOC_LockH>
 801ac42:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801ac44:	9001      	str	r0, [sp, #4]
 801ac46:	42ab      	cmp	r3, r5
 801ac48:	d003      	beq.n	801ac52 <TEXT_SetTextColor+0x26>
 801ac4a:	6385      	str	r5, [r0, #56]	; 0x38
 801ac4c:	4620      	mov	r0, r4
 801ac4e:	f7fc fe33 	bl	80178b8 <WM_InvalidateWindow>
 801ac52:	a801      	add	r0, sp, #4
 801ac54:	f7f4 fe9a 	bl	800f98c <GUI_ALLOC_UnlockH>
 801ac58:	f7f6 fd06 	bl	8011668 <GUI_Unlock>
 801ac5c:	b003      	add	sp, #12
 801ac5e:	bd30      	pop	{r4, r5, pc}

0801ac60 <WIDGET__Init>:
 801ac60:	4b02      	ldr	r3, [pc, #8]	; (801ac6c <WIDGET__Init+0xc>)
 801ac62:	8642      	strh	r2, [r0, #50]	; 0x32
 801ac64:	681b      	ldr	r3, [r3, #0]
 801ac66:	8601      	strh	r1, [r0, #48]	; 0x30
 801ac68:	62c3      	str	r3, [r0, #44]	; 0x2c
 801ac6a:	4770      	bx	lr
 801ac6c:	200001d0 	.word	0x200001d0

0801ac70 <WIDGET_SetState>:
 801ac70:	b530      	push	{r4, r5, lr}
 801ac72:	4604      	mov	r4, r0
 801ac74:	b083      	sub	sp, #12
 801ac76:	460d      	mov	r5, r1
 801ac78:	f7f6 fd00 	bl	801167c <GUI_Lock>
 801ac7c:	4620      	mov	r0, r4
 801ac7e:	f7f4 fe73 	bl	800f968 <GUI_ALLOC_LockH>
 801ac82:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801ac84:	9001      	str	r0, [sp, #4]
 801ac86:	42ab      	cmp	r3, r5
 801ac88:	d003      	beq.n	801ac92 <WIDGET_SetState+0x22>
 801ac8a:	8645      	strh	r5, [r0, #50]	; 0x32
 801ac8c:	4620      	mov	r0, r4
 801ac8e:	f7fc fe13 	bl	80178b8 <WM_InvalidateWindow>
 801ac92:	a801      	add	r0, sp, #4
 801ac94:	f7f4 fe7a 	bl	800f98c <GUI_ALLOC_UnlockH>
 801ac98:	f7f6 fce6 	bl	8011668 <GUI_Unlock>
 801ac9c:	b003      	add	sp, #12
 801ac9e:	bd30      	pop	{r4, r5, pc}

0801aca0 <WIDGET_OrState>:
 801aca0:	b900      	cbnz	r0, 801aca4 <WIDGET_OrState+0x4>
 801aca2:	4770      	bx	lr
 801aca4:	b530      	push	{r4, r5, lr}
 801aca6:	4604      	mov	r4, r0
 801aca8:	b083      	sub	sp, #12
 801acaa:	460d      	mov	r5, r1
 801acac:	f7f6 fce6 	bl	801167c <GUI_Lock>
 801acb0:	4620      	mov	r0, r4
 801acb2:	f7f4 fe59 	bl	800f968 <GUI_ALLOC_LockH>
 801acb6:	8e41      	ldrh	r1, [r0, #50]	; 0x32
 801acb8:	9001      	str	r0, [sp, #4]
 801acba:	ea35 0301 	bics.w	r3, r5, r1
 801acbe:	d004      	beq.n	801acca <WIDGET_OrState+0x2a>
 801acc0:	4329      	orrs	r1, r5
 801acc2:	8641      	strh	r1, [r0, #50]	; 0x32
 801acc4:	4620      	mov	r0, r4
 801acc6:	f7fc fdf7 	bl	80178b8 <WM_InvalidateWindow>
 801acca:	a801      	add	r0, sp, #4
 801accc:	f7f4 fe5e 	bl	800f98c <GUI_ALLOC_UnlockH>
 801acd0:	f7f6 fcca 	bl	8011668 <GUI_Unlock>
 801acd4:	b003      	add	sp, #12
 801acd6:	bd30      	pop	{r4, r5, pc}

0801acd8 <WIDGET_AndState>:
 801acd8:	b900      	cbnz	r0, 801acdc <WIDGET_AndState+0x4>
 801acda:	4770      	bx	lr
 801acdc:	b530      	push	{r4, r5, lr}
 801acde:	4604      	mov	r4, r0
 801ace0:	b083      	sub	sp, #12
 801ace2:	460d      	mov	r5, r1
 801ace4:	f7f6 fcca 	bl	801167c <GUI_Lock>
 801ace8:	4620      	mov	r0, r4
 801acea:	f7f4 fe3d 	bl	800f968 <GUI_ALLOC_LockH>
 801acee:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801acf0:	9001      	str	r0, [sp, #4]
 801acf2:	ea23 0105 	bic.w	r1, r3, r5
 801acf6:	428b      	cmp	r3, r1
 801acf8:	d003      	beq.n	801ad02 <WIDGET_AndState+0x2a>
 801acfa:	8641      	strh	r1, [r0, #50]	; 0x32
 801acfc:	4620      	mov	r0, r4
 801acfe:	f7fc fddb 	bl	80178b8 <WM_InvalidateWindow>
 801ad02:	a801      	add	r0, sp, #4
 801ad04:	f7f4 fe42 	bl	800f98c <GUI_ALLOC_UnlockH>
 801ad08:	f7f6 fcae 	bl	8011668 <GUI_Unlock>
 801ad0c:	b003      	add	sp, #12
 801ad0e:	bd30      	pop	{r4, r5, pc}

0801ad10 <WIDGET_HandleActive>:
 801ad10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad14:	b084      	sub	sp, #16
 801ad16:	b920      	cbnz	r0, 801ad22 <WIDGET_HandleActive+0x12>
 801ad18:	2401      	movs	r4, #1
 801ad1a:	4620      	mov	r0, r4
 801ad1c:	b004      	add	sp, #16
 801ad1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad22:	460e      	mov	r6, r1
 801ad24:	4607      	mov	r7, r0
 801ad26:	f7f4 fe1f 	bl	800f968 <GUI_ALLOC_LockH>
 801ad2a:	6833      	ldr	r3, [r6, #0]
 801ad2c:	9002      	str	r0, [sp, #8]
 801ad2e:	2b16      	cmp	r3, #22
 801ad30:	4605      	mov	r5, r0
 801ad32:	f000 8090 	beq.w	801ae56 <WIDGET_HandleActive+0x146>
 801ad36:	dd2a      	ble.n	801ad8e <WIDGET_HandleActive+0x7e>
 801ad38:	2b1f      	cmp	r3, #31
 801ad3a:	d07c      	beq.n	801ae36 <WIDGET_HandleActive+0x126>
 801ad3c:	dd51      	ble.n	801ade2 <WIDGET_HandleActive+0xd2>
 801ad3e:	2b31      	cmp	r3, #49	; 0x31
 801ad40:	d037      	beq.n	801adb2 <WIDGET_HandleActive+0xa2>
 801ad42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ad46:	d148      	bne.n	801adda <WIDGET_HandleActive+0xca>
 801ad48:	68f2      	ldr	r2, [r6, #12]
 801ad4a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801ad4c:	6814      	ldr	r4, [r2, #0]
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	62c2      	str	r2, [r0, #44]	; 0x2c
 801ad52:	a802      	add	r0, sp, #8
 801ad54:	1b1c      	subs	r4, r3, r4
 801ad56:	f7f4 fe19 	bl	800f98c <GUI_ALLOC_UnlockH>
 801ad5a:	f7f6 fc8f 	bl	801167c <GUI_Lock>
 801ad5e:	4638      	mov	r0, r7
 801ad60:	f7f4 fe02 	bl	800f968 <GUI_ALLOC_LockH>
 801ad64:	ad04      	add	r5, sp, #16
 801ad66:	4262      	negs	r2, r4
 801ad68:	9400      	str	r4, [sp, #0]
 801ad6a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801ad6e:	4623      	mov	r3, r4
 801ad70:	4611      	mov	r1, r2
 801ad72:	f7ff f989 	bl	801a088 <WM__UpdateChildPositions>
 801ad76:	4628      	mov	r0, r5
 801ad78:	f7f4 fe08 	bl	800f98c <GUI_ALLOC_UnlockH>
 801ad7c:	f7f6 fc74 	bl	8011668 <GUI_Unlock>
 801ad80:	4638      	mov	r0, r7
 801ad82:	f7fc fd99 	bl	80178b8 <WM_InvalidateWindow>
 801ad86:	9d02      	ldr	r5, [sp, #8]
 801ad88:	2400      	movs	r4, #0
 801ad8a:	b95d      	cbnz	r5, 801ada4 <WIDGET_HandleActive+0x94>
 801ad8c:	e7c5      	b.n	801ad1a <WIDGET_HandleActive+0xa>
 801ad8e:	2b11      	cmp	r3, #17
 801ad90:	d057      	beq.n	801ae42 <WIDGET_HandleActive+0x132>
 801ad92:	dd3c      	ble.n	801ae0e <WIDGET_HandleActive+0xfe>
 801ad94:	2b14      	cmp	r3, #20
 801ad96:	d011      	beq.n	801adbc <WIDGET_HandleActive+0xac>
 801ad98:	2b15      	cmp	r3, #21
 801ad9a:	d11e      	bne.n	801adda <WIDGET_HandleActive+0xca>
 801ad9c:	f9b0 3030 	ldrsh.w	r3, [r0, #48]	; 0x30
 801ada0:	60f3      	str	r3, [r6, #12]
 801ada2:	2400      	movs	r4, #0
 801ada4:	a802      	add	r0, sp, #8
 801ada6:	f7f4 fdf1 	bl	800f98c <GUI_ALLOC_UnlockH>
 801adaa:	4620      	mov	r0, r4
 801adac:	b004      	add	sp, #16
 801adae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801adb2:	2400      	movs	r4, #0
 801adb4:	60f4      	str	r4, [r6, #12]
 801adb6:	2d00      	cmp	r5, #0
 801adb8:	d1f4      	bne.n	801ada4 <WIDGET_HandleActive+0x94>
 801adba:	e7ae      	b.n	801ad1a <WIDGET_HandleActive+0xa>
 801adbc:	68f4      	ldr	r4, [r6, #12]
 801adbe:	4621      	mov	r1, r4
 801adc0:	f7fc fd6c 	bl	801789c <WM__GetClientRectWin>
 801adc4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 801adc6:	4621      	mov	r1, r4
 801adc8:	4620      	mov	r0, r4
 801adca:	681a      	ldr	r2, [r3, #0]
 801adcc:	f7f7 fac4 	bl	8012358 <GUI__ReduceRect>
 801add0:	9d02      	ldr	r5, [sp, #8]
 801add2:	2400      	movs	r4, #0
 801add4:	2d00      	cmp	r5, #0
 801add6:	d1e5      	bne.n	801ada4 <WIDGET_HandleActive+0x94>
 801add8:	e79f      	b.n	801ad1a <WIDGET_HandleActive+0xa>
 801adda:	2401      	movs	r4, #1
 801addc:	2d00      	cmp	r5, #0
 801adde:	d1e1      	bne.n	801ada4 <WIDGET_HandleActive+0x94>
 801ade0:	e79b      	b.n	801ad1a <WIDGET_HandleActive+0xa>
 801ade2:	2b1e      	cmp	r3, #30
 801ade4:	d1f9      	bne.n	801adda <WIDGET_HandleActive+0xca>
 801ade6:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801adea:	f1b8 0f01 	cmp.w	r8, #1
 801adee:	d136      	bne.n	801ae5e <WIDGET_HandleActive+0x14e>
 801adf0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801adf2:	f003 0410 	and.w	r4, r3, #16
 801adf6:	b2a4      	uxth	r4, r4
 801adf8:	2c00      	cmp	r4, #0
 801adfa:	d153      	bne.n	801aea4 <WIDGET_HandleActive+0x194>
 801adfc:	a802      	add	r0, sp, #8
 801adfe:	f7f4 fdc5 	bl	800f98c <GUI_ALLOC_UnlockH>
 801ae02:	9d02      	ldr	r5, [sp, #8]
 801ae04:	f8c6 800c 	str.w	r8, [r6, #12]
 801ae08:	2d00      	cmp	r5, #0
 801ae0a:	d1cb      	bne.n	801ada4 <WIDGET_HandleActive+0x94>
 801ae0c:	e785      	b.n	801ad1a <WIDGET_HandleActive+0xa>
 801ae0e:	2b0d      	cmp	r3, #13
 801ae10:	d1e3      	bne.n	801adda <WIDGET_HandleActive+0xca>
 801ae12:	68f3      	ldr	r3, [r6, #12]
 801ae14:	68db      	ldr	r3, [r3, #12]
 801ae16:	2b00      	cmp	r3, #0
 801ae18:	d0df      	beq.n	801adda <WIDGET_HandleActive+0xca>
 801ae1a:	7a1b      	ldrb	r3, [r3, #8]
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	d0dc      	beq.n	801adda <WIDGET_HandleActive+0xca>
 801ae20:	a802      	add	r0, sp, #8
 801ae22:	f7f4 fdb3 	bl	800f98c <GUI_ALLOC_UnlockH>
 801ae26:	4638      	mov	r0, r7
 801ae28:	f003 f9dc 	bl	801e1e4 <WM_BringToTop>
 801ae2c:	9d02      	ldr	r5, [sp, #8]
 801ae2e:	2400      	movs	r4, #0
 801ae30:	2d00      	cmp	r5, #0
 801ae32:	d1b7      	bne.n	801ada4 <WIDGET_HandleActive+0x94>
 801ae34:	e771      	b.n	801ad1a <WIDGET_HandleActive+0xa>
 801ae36:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801ae38:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801ae3c:	60f3      	str	r3, [r6, #12]
 801ae3e:	2400      	movs	r4, #0
 801ae40:	e7b0      	b.n	801ada4 <WIDGET_HandleActive+0x94>
 801ae42:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801ae44:	06db      	lsls	r3, r3, #27
 801ae46:	d504      	bpl.n	801ae52 <WIDGET_HandleActive+0x142>
 801ae48:	68f3      	ldr	r3, [r6, #12]
 801ae4a:	b113      	cbz	r3, 801ae52 <WIDGET_HandleActive+0x142>
 801ae4c:	7a1b      	ldrb	r3, [r3, #8]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d13e      	bne.n	801aed0 <WIDGET_HandleActive+0x1c0>
 801ae52:	2401      	movs	r4, #1
 801ae54:	e7a6      	b.n	801ada4 <WIDGET_HandleActive+0x94>
 801ae56:	68f3      	ldr	r3, [r6, #12]
 801ae58:	8603      	strh	r3, [r0, #48]	; 0x30
 801ae5a:	2400      	movs	r4, #0
 801ae5c:	e7a2      	b.n	801ada4 <WIDGET_HandleActive+0x94>
 801ae5e:	8e44      	ldrh	r4, [r0, #50]	; 0x32
 801ae60:	f7f6 fc0c 	bl	801167c <GUI_Lock>
 801ae64:	4638      	mov	r0, r7
 801ae66:	f7f4 fd7f 	bl	800f968 <GUI_ALLOC_LockH>
 801ae6a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801ae6c:	9003      	str	r0, [sp, #12]
 801ae6e:	f024 0401 	bic.w	r4, r4, #1
 801ae72:	429c      	cmp	r4, r3
 801ae74:	d003      	beq.n	801ae7e <WIDGET_HandleActive+0x16e>
 801ae76:	8644      	strh	r4, [r0, #50]	; 0x32
 801ae78:	4638      	mov	r0, r7
 801ae7a:	f7fc fd1d 	bl	80178b8 <WM_InvalidateWindow>
 801ae7e:	a803      	add	r0, sp, #12
 801ae80:	f7f4 fd84 	bl	800f98c <GUI_ALLOC_UnlockH>
 801ae84:	2409      	movs	r4, #9
 801ae86:	f7f6 fbef 	bl	8011668 <GUI_Unlock>
 801ae8a:	a802      	add	r0, sp, #8
 801ae8c:	f7f4 fd7e 	bl	800f98c <GUI_ALLOC_UnlockH>
 801ae90:	4621      	mov	r1, r4
 801ae92:	4638      	mov	r0, r7
 801ae94:	f7fe f800 	bl	8018e98 <WM_NotifyParent>
 801ae98:	9d02      	ldr	r5, [sp, #8]
 801ae9a:	2400      	movs	r4, #0
 801ae9c:	60f4      	str	r4, [r6, #12]
 801ae9e:	2d00      	cmp	r5, #0
 801aea0:	d180      	bne.n	801ada4 <WIDGET_HandleActive+0x94>
 801aea2:	e73a      	b.n	801ad1a <WIDGET_HandleActive+0xa>
 801aea4:	f043 0401 	orr.w	r4, r3, #1
 801aea8:	f7f6 fbe8 	bl	801167c <GUI_Lock>
 801aeac:	4638      	mov	r0, r7
 801aeae:	f7f4 fd5b 	bl	800f968 <GUI_ALLOC_LockH>
 801aeb2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 801aeb4:	9003      	str	r0, [sp, #12]
 801aeb6:	42a3      	cmp	r3, r4
 801aeb8:	d003      	beq.n	801aec2 <WIDGET_HandleActive+0x1b2>
 801aeba:	8644      	strh	r4, [r0, #50]	; 0x32
 801aebc:	4638      	mov	r0, r7
 801aebe:	f7fc fcfb 	bl	80178b8 <WM_InvalidateWindow>
 801aec2:	a803      	add	r0, sp, #12
 801aec4:	f7f4 fd62 	bl	800f98c <GUI_ALLOC_UnlockH>
 801aec8:	2408      	movs	r4, #8
 801aeca:	f7f6 fbcd 	bl	8011668 <GUI_Unlock>
 801aece:	e7dc      	b.n	801ae8a <WIDGET_HandleActive+0x17a>
 801aed0:	a802      	add	r0, sp, #8
 801aed2:	f7f4 fd5b 	bl	800f98c <GUI_ALLOC_UnlockH>
 801aed6:	4638      	mov	r0, r7
 801aed8:	f7fe f898 	bl	801900c <WM_SetFocus>
 801aedc:	9d02      	ldr	r5, [sp, #8]
 801aede:	2401      	movs	r4, #1
 801aee0:	2d00      	cmp	r5, #0
 801aee2:	f47f af5f 	bne.w	801ada4 <WIDGET_HandleActive+0x94>
 801aee6:	e718      	b.n	801ad1a <WIDGET_HandleActive+0xa>

0801aee8 <_DrawDownRect>:
 801aee8:	b510      	push	{r4, lr}
 801aeea:	b09e      	sub	sp, #120	; 0x78
 801aeec:	4604      	mov	r4, r0
 801aeee:	a801      	add	r0, sp, #4
 801aef0:	f7f5 f9e2 	bl	80102b8 <GUI_SaveContext_W>
 801aef4:	4b09      	ldr	r3, [pc, #36]	; (801af1c <_DrawDownRect+0x34>)
 801aef6:	6818      	ldr	r0, [r3, #0]
 801aef8:	f7f8 f8d8 	bl	80130ac <LCD_SetColor>
 801aefc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801af00:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801af04:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801af08:	f9b4 0000 	ldrsh.w	r0, [r4]
 801af0c:	f000 f9f4 	bl	801b2f8 <GUI_DrawRect>
 801af10:	a801      	add	r0, sp, #4
 801af12:	f7f5 f9db 	bl	80102cc <GUI_RestoreContext>
 801af16:	b01e      	add	sp, #120	; 0x78
 801af18:	bd10      	pop	{r4, pc}
 801af1a:	bf00      	nop
 801af1c:	200001d4 	.word	0x200001d4

0801af20 <_DrawUp>:
 801af20:	b500      	push	{lr}
 801af22:	b0a1      	sub	sp, #132	; 0x84
 801af24:	a801      	add	r0, sp, #4
 801af26:	f7fd fe3f 	bl	8018ba8 <WM_GetClientRect>
 801af2a:	a803      	add	r0, sp, #12
 801af2c:	f7f5 f9c4 	bl	80102b8 <GUI_SaveContext_W>
 801af30:	4b09      	ldr	r3, [pc, #36]	; (801af58 <_DrawUp+0x38>)
 801af32:	6818      	ldr	r0, [r3, #0]
 801af34:	f7f8 f8ba 	bl	80130ac <LCD_SetColor>
 801af38:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801af3c:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801af40:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 801af44:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 801af48:	f000 f9d6 	bl	801b2f8 <GUI_DrawRect>
 801af4c:	a803      	add	r0, sp, #12
 801af4e:	f7f5 f9bd 	bl	80102cc <GUI_RestoreContext>
 801af52:	b021      	add	sp, #132	; 0x84
 801af54:	f85d fb04 	ldr.w	pc, [sp], #4
 801af58:	200001d4 	.word	0x200001d4

0801af5c <_DrawUpRect>:
 801af5c:	b510      	push	{r4, lr}
 801af5e:	b09e      	sub	sp, #120	; 0x78
 801af60:	4604      	mov	r4, r0
 801af62:	a801      	add	r0, sp, #4
 801af64:	f7f5 f9a8 	bl	80102b8 <GUI_SaveContext_W>
 801af68:	4b09      	ldr	r3, [pc, #36]	; (801af90 <_DrawUpRect+0x34>)
 801af6a:	6818      	ldr	r0, [r3, #0]
 801af6c:	f7f8 f89e 	bl	80130ac <LCD_SetColor>
 801af70:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801af74:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801af78:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801af7c:	f9b4 0000 	ldrsh.w	r0, [r4]
 801af80:	f000 f9ba 	bl	801b2f8 <GUI_DrawRect>
 801af84:	a801      	add	r0, sp, #4
 801af86:	f7f5 f9a1 	bl	80102cc <GUI_RestoreContext>
 801af8a:	b01e      	add	sp, #120	; 0x78
 801af8c:	bd10      	pop	{r4, pc}
 801af8e:	bf00      	nop
 801af90:	200001d4 	.word	0x200001d4

0801af94 <_DrawDown>:
 801af94:	b500      	push	{lr}
 801af96:	b0a1      	sub	sp, #132	; 0x84
 801af98:	a801      	add	r0, sp, #4
 801af9a:	f7fd fe05 	bl	8018ba8 <WM_GetClientRect>
 801af9e:	a803      	add	r0, sp, #12
 801afa0:	f7f5 f98a 	bl	80102b8 <GUI_SaveContext_W>
 801afa4:	4b09      	ldr	r3, [pc, #36]	; (801afcc <_DrawDown+0x38>)
 801afa6:	6818      	ldr	r0, [r3, #0]
 801afa8:	f7f8 f880 	bl	80130ac <LCD_SetColor>
 801afac:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801afb0:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801afb4:	f9bd 1006 	ldrsh.w	r1, [sp, #6]
 801afb8:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 801afbc:	f000 f99c 	bl	801b2f8 <GUI_DrawRect>
 801afc0:	a803      	add	r0, sp, #12
 801afc2:	f7f5 f983 	bl	80102cc <GUI_RestoreContext>
 801afc6:	b021      	add	sp, #132	; 0x84
 801afc8:	f85d fb04 	ldr.w	pc, [sp], #4
 801afcc:	200001d4 	.word	0x200001d4

0801afd0 <WINDOW_Callback>:
 801afd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801afd4:	6846      	ldr	r6, [r0, #4]
 801afd6:	b083      	sub	sp, #12
 801afd8:	4604      	mov	r4, r0
 801afda:	4630      	mov	r0, r6
 801afdc:	f7f4 fcc4 	bl	800f968 <GUI_ALLOC_LockH>
 801afe0:	ad02      	add	r5, sp, #8
 801afe2:	4603      	mov	r3, r0
 801afe4:	f845 0d08 	str.w	r0, [r5, #-8]!
 801afe8:	f8d0 8038 	ldr.w	r8, [r0, #56]	; 0x38
 801afec:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 801afee:	f8d3 9040 	ldr.w	r9, [r3, #64]	; 0x40
 801aff2:	4628      	mov	r0, r5
 801aff4:	f7f4 fcca 	bl	800f98c <GUI_ALLOC_UnlockH>
 801aff8:	6823      	ldr	r3, [r4, #0]
 801affa:	3b0e      	subs	r3, #14
 801affc:	2b1c      	cmp	r3, #28
 801affe:	d819      	bhi.n	801b034 <WINDOW_Callback+0x64>
 801b000:	e8df f003 	tbb	[pc, r3]
 801b004:	18180f2d 	.word	0x18180f2d
 801b008:	18181818 	.word	0x18181818
 801b00c:	18181818 	.word	0x18181818
 801b010:	18181818 	.word	0x18181818
 801b014:	18564f3a 	.word	0x18564f3a
 801b018:	1818186f 	.word	0x1818186f
 801b01c:	18181818 	.word	0x18181818
 801b020:	1f          	.byte	0x1f
 801b021:	00          	.byte	0x00
 801b022:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801b026:	4599      	cmp	r9, r3
 801b028:	d004      	beq.n	801b034 <WINDOW_Callback+0x64>
 801b02a:	4648      	mov	r0, r9
 801b02c:	f7f8 f838 	bl	80130a0 <LCD_SetBkColor>
 801b030:	f7f5 fa74 	bl	801051c <GUI_Clear>
 801b034:	2f00      	cmp	r7, #0
 801b036:	d059      	beq.n	801b0ec <WINDOW_Callback+0x11c>
 801b038:	4620      	mov	r0, r4
 801b03a:	47b8      	blx	r7
 801b03c:	b003      	add	sp, #12
 801b03e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b042:	4630      	mov	r0, r6
 801b044:	f7f4 fc90 	bl	800f968 <GUI_ALLOC_LockH>
 801b048:	68e3      	ldr	r3, [r4, #12]
 801b04a:	9000      	str	r0, [sp, #0]
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d05e      	beq.n	801b10e <WINDOW_Callback+0x13e>
 801b050:	63c3      	str	r3, [r0, #60]	; 0x3c
 801b052:	4628      	mov	r0, r5
 801b054:	f7f4 fc9a 	bl	800f98c <GUI_ALLOC_UnlockH>
 801b058:	b003      	add	sp, #12
 801b05a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b05e:	68e3      	ldr	r3, [r4, #12]
 801b060:	685a      	ldr	r2, [r3, #4]
 801b062:	2a00      	cmp	r2, #0
 801b064:	dde6      	ble.n	801b034 <WINDOW_Callback+0x64>
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	2b09      	cmp	r3, #9
 801b06a:	d04c      	beq.n	801b106 <WINDOW_Callback+0x136>
 801b06c:	2b0a      	cmp	r3, #10
 801b06e:	d1e1      	bne.n	801b034 <WINDOW_Callback+0x64>
 801b070:	4630      	mov	r0, r6
 801b072:	f003 fc31 	bl	801e8d8 <WM_SetFocusOnPrevChild>
 801b076:	e7e1      	b.n	801b03c <WINDOW_Callback+0x6c>
 801b078:	68e4      	ldr	r4, [r4, #12]
 801b07a:	2c01      	cmp	r4, #1
 801b07c:	d1de      	bne.n	801b03c <WINDOW_Callback+0x6c>
 801b07e:	4640      	mov	r0, r8
 801b080:	f7fd fefe 	bl	8018e80 <WM_IsWindow>
 801b084:	2800      	cmp	r0, #0
 801b086:	d03e      	beq.n	801b106 <WINDOW_Callback+0x136>
 801b088:	4640      	mov	r0, r8
 801b08a:	f7fd ffbf 	bl	801900c <WM_SetFocus>
 801b08e:	4640      	mov	r0, r8
 801b090:	f7fd fec8 	bl	8018e24 <WM_HasFocus>
 801b094:	2800      	cmp	r0, #0
 801b096:	d0d1      	beq.n	801b03c <WINDOW_Callback+0x6c>
 801b098:	4621      	mov	r1, r4
 801b09a:	4640      	mov	r0, r8
 801b09c:	f7ff fe00 	bl	801aca0 <WIDGET_OrState>
 801b0a0:	e7cc      	b.n	801b03c <WINDOW_Callback+0x6c>
 801b0a2:	4621      	mov	r1, r4
 801b0a4:	4630      	mov	r0, r6
 801b0a6:	f7ff fe33 	bl	801ad10 <WIDGET_HandleActive>
 801b0aa:	b003      	add	sp, #12
 801b0ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b0b0:	4630      	mov	r0, r6
 801b0b2:	f7f4 fc59 	bl	800f968 <GUI_ALLOC_LockH>
 801b0b6:	68e4      	ldr	r4, [r4, #12]
 801b0b8:	9001      	str	r0, [sp, #4]
 801b0ba:	b164      	cbz	r4, 801b0d6 <WINDOW_Callback+0x106>
 801b0bc:	4631      	mov	r1, r6
 801b0be:	6860      	ldr	r0, [r4, #4]
 801b0c0:	f7fe ff6c 	bl	8019f9c <WM__IsAncestorOrSelf>
 801b0c4:	4631      	mov	r1, r6
 801b0c6:	b9a8      	cbnz	r0, 801b0f4 <WINDOW_Callback+0x124>
 801b0c8:	6820      	ldr	r0, [r4, #0]
 801b0ca:	f7fe ff55 	bl	8019f78 <WM__IsAncestor>
 801b0ce:	b110      	cbz	r0, 801b0d6 <WINDOW_Callback+0x106>
 801b0d0:	9b01      	ldr	r3, [sp, #4]
 801b0d2:	6822      	ldr	r2, [r4, #0]
 801b0d4:	639a      	str	r2, [r3, #56]	; 0x38
 801b0d6:	a801      	add	r0, sp, #4
 801b0d8:	f7f4 fc58 	bl	800f98c <GUI_ALLOC_UnlockH>
 801b0dc:	b003      	add	sp, #12
 801b0de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b0e2:	f8c4 900c 	str.w	r9, [r4, #12]
 801b0e6:	b003      	add	sp, #12
 801b0e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b0ec:	4620      	mov	r0, r4
 801b0ee:	f7fd faa5 	bl	801863c <WM_DefaultProc>
 801b0f2:	e7a3      	b.n	801b03c <WINDOW_Callback+0x6c>
 801b0f4:	6860      	ldr	r0, [r4, #4]
 801b0f6:	f7fe ff3f 	bl	8019f78 <WM__IsAncestor>
 801b0fa:	2800      	cmp	r0, #0
 801b0fc:	d0eb      	beq.n	801b0d6 <WINDOW_Callback+0x106>
 801b0fe:	9b01      	ldr	r3, [sp, #4]
 801b100:	6862      	ldr	r2, [r4, #4]
 801b102:	639a      	str	r2, [r3, #56]	; 0x38
 801b104:	e7e7      	b.n	801b0d6 <WINDOW_Callback+0x106>
 801b106:	4630      	mov	r0, r6
 801b108:	f003 fb9e 	bl	801e848 <WM_SetFocusOnNextChild>
 801b10c:	e796      	b.n	801b03c <WINDOW_Callback+0x6c>
 801b10e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 801b110:	60e3      	str	r3, [r4, #12]
 801b112:	e79e      	b.n	801b052 <WINDOW_Callback+0x82>

0801b114 <WINDOW_CreateIndirect>:
 801b114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b118:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
 801b11c:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
 801b120:	6985      	ldr	r5, [r0, #24]
 801b122:	f9b0 800e 	ldrsh.w	r8, [r0, #14]
 801b126:	f9b0 9010 	ldrsh.w	r9, [r0, #16]
 801b12a:	f8b0 a012 	ldrh.w	sl, [r0, #18]
 801b12e:	4c19      	ldr	r4, [pc, #100]	; (801b194 <WINDOW_CreateIndirect+0x80>)
 801b130:	b089      	sub	sp, #36	; 0x24
 801b132:	468b      	mov	fp, r1
 801b134:	4416      	add	r6, r2
 801b136:	441f      	add	r7, r3
 801b138:	3518      	adds	r5, #24
 801b13a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801b13e:	9305      	str	r3, [sp, #20]
 801b140:	f7f6 fa9c 	bl	801167c <GUI_Lock>
 801b144:	9402      	str	r4, [sp, #8]
 801b146:	f8cd b000 	str.w	fp, [sp]
 801b14a:	4639      	mov	r1, r7
 801b14c:	4630      	mov	r0, r6
 801b14e:	9503      	str	r5, [sp, #12]
 801b150:	f8cd a004 	str.w	sl, [sp, #4]
 801b154:	464b      	mov	r3, r9
 801b156:	4642      	mov	r2, r8
 801b158:	f7fc fc0a 	bl	8017970 <WM_CreateWindowAsChild>
 801b15c:	4604      	mov	r4, r0
 801b15e:	b190      	cbz	r0, 801b186 <WINDOW_CreateIndirect+0x72>
 801b160:	f7f4 fc02 	bl	800f968 <GUI_ALLOC_LockH>
 801b164:	9905      	ldr	r1, [sp, #20]
 801b166:	9007      	str	r0, [sp, #28]
 801b168:	2210      	movs	r2, #16
 801b16a:	f7ff fd79 	bl	801ac60 <WIDGET__Init>
 801b16e:	a808      	add	r0, sp, #32
 801b170:	4a09      	ldr	r2, [pc, #36]	; (801b198 <WINDOW_CreateIndirect+0x84>)
 801b172:	f850 3d04 	ldr.w	r3, [r0, #-4]!
 801b176:	9912      	ldr	r1, [sp, #72]	; 0x48
 801b178:	6812      	ldr	r2, [r2, #0]
 801b17a:	6359      	str	r1, [r3, #52]	; 0x34
 801b17c:	2100      	movs	r1, #0
 801b17e:	6399      	str	r1, [r3, #56]	; 0x38
 801b180:	641a      	str	r2, [r3, #64]	; 0x40
 801b182:	f7f4 fc03 	bl	800f98c <GUI_ALLOC_UnlockH>
 801b186:	f7f6 fa6f 	bl	8011668 <GUI_Unlock>
 801b18a:	4620      	mov	r0, r4
 801b18c:	b009      	add	sp, #36	; 0x24
 801b18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b192:	bf00      	nop
 801b194:	0801afd1 	.word	0x0801afd1
 801b198:	200001d8 	.word	0x200001d8

0801b19c <_GetIndexMask_0>:
 801b19c:	b508      	push	{r3, lr}
 801b19e:	f7f8 f965 	bl	801346c <LCD_GetNumColors>
 801b1a2:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 801b1a6:	d014      	beq.n	801b1d2 <_GetIndexMask_0+0x36>
 801b1a8:	287f      	cmp	r0, #127	; 0x7f
 801b1aa:	d80e      	bhi.n	801b1ca <_GetIndexMask_0+0x2e>
 801b1ac:	283f      	cmp	r0, #63	; 0x3f
 801b1ae:	d812      	bhi.n	801b1d6 <_GetIndexMask_0+0x3a>
 801b1b0:	281f      	cmp	r0, #31
 801b1b2:	d80c      	bhi.n	801b1ce <_GetIndexMask_0+0x32>
 801b1b4:	280f      	cmp	r0, #15
 801b1b6:	d810      	bhi.n	801b1da <_GetIndexMask_0+0x3e>
 801b1b8:	2807      	cmp	r0, #7
 801b1ba:	d812      	bhi.n	801b1e2 <_GetIndexMask_0+0x46>
 801b1bc:	2803      	cmp	r0, #3
 801b1be:	d80e      	bhi.n	801b1de <_GetIndexMask_0+0x42>
 801b1c0:	2801      	cmp	r0, #1
 801b1c2:	bf94      	ite	ls
 801b1c4:	2000      	movls	r0, #0
 801b1c6:	2001      	movhi	r0, #1
 801b1c8:	bd08      	pop	{r3, pc}
 801b1ca:	207f      	movs	r0, #127	; 0x7f
 801b1cc:	bd08      	pop	{r3, pc}
 801b1ce:	201f      	movs	r0, #31
 801b1d0:	bd08      	pop	{r3, pc}
 801b1d2:	20ff      	movs	r0, #255	; 0xff
 801b1d4:	bd08      	pop	{r3, pc}
 801b1d6:	203f      	movs	r0, #63	; 0x3f
 801b1d8:	bd08      	pop	{r3, pc}
 801b1da:	200f      	movs	r0, #15
 801b1dc:	bd08      	pop	{r3, pc}
 801b1de:	2003      	movs	r0, #3
 801b1e0:	bd08      	pop	{r3, pc}
 801b1e2:	2007      	movs	r0, #7
 801b1e4:	bd08      	pop	{r3, pc}
 801b1e6:	bf00      	nop

0801b1e8 <_Index2Color_0>:
 801b1e8:	b538      	push	{r3, r4, r5, lr}
 801b1ea:	4604      	mov	r4, r0
 801b1ec:	f7f8 f93e 	bl	801346c <LCD_GetNumColors>
 801b1f0:	4605      	mov	r5, r0
 801b1f2:	f7f8 f95b 	bl	80134ac <LCD_GetPalette>
 801b1f6:	42a5      	cmp	r5, r4
 801b1f8:	d903      	bls.n	801b202 <_Index2Color_0+0x1a>
 801b1fa:	b118      	cbz	r0, 801b204 <_Index2Color_0+0x1c>
 801b1fc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801b200:	bd38      	pop	{r3, r4, r5, pc}
 801b202:	2000      	movs	r0, #0
 801b204:	bd38      	pop	{r3, r4, r5, pc}
 801b206:	bf00      	nop

0801b208 <_Color2Index_0>:
 801b208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b20c:	4606      	mov	r6, r0
 801b20e:	f7f8 f92d 	bl	801346c <LCD_GetNumColors>
 801b212:	4607      	mov	r7, r0
 801b214:	f7f8 f94a 	bl	80134ac <LCD_GetPalette>
 801b218:	b158      	cbz	r0, 801b232 <_Color2Index_0+0x2a>
 801b21a:	f1a0 0804 	sub.w	r8, r0, #4
 801b21e:	4643      	mov	r3, r8
 801b220:	2000      	movs	r0, #0
 801b222:	e002      	b.n	801b22a <_Color2Index_0+0x22>
 801b224:	3001      	adds	r0, #1
 801b226:	4287      	cmp	r7, r0
 801b228:	dd05      	ble.n	801b236 <_Color2Index_0+0x2e>
 801b22a:	f853 2f04 	ldr.w	r2, [r3, #4]!
 801b22e:	42b2      	cmp	r2, r6
 801b230:	d1f8      	bne.n	801b224 <_Color2Index_0+0x1c>
 801b232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b236:	2400      	movs	r4, #0
 801b238:	4625      	mov	r5, r4
 801b23a:	f06f 497f 	mvn.w	r9, #4278190080	; 0xff000000
 801b23e:	f858 1f04 	ldr.w	r1, [r8, #4]!
 801b242:	4630      	mov	r0, r6
 801b244:	f7f4 fec8 	bl	800ffd8 <GUI_CalcColorDist>
 801b248:	4581      	cmp	r9, r0
 801b24a:	bf88      	it	hi
 801b24c:	462c      	movhi	r4, r5
 801b24e:	f105 0501 	add.w	r5, r5, #1
 801b252:	bf88      	it	hi
 801b254:	4681      	movhi	r9, r0
 801b256:	42af      	cmp	r7, r5
 801b258:	dcf1      	bgt.n	801b23e <_Color2Index_0+0x36>
 801b25a:	4620      	mov	r0, r4
 801b25c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801b260 <_Color2Index_8888>:
 801b260:	43c2      	mvns	r2, r0
 801b262:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801b266:	0403      	lsls	r3, r0, #16
 801b268:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 801b26c:	430a      	orrs	r2, r1
 801b26e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801b272:	4313      	orrs	r3, r2
 801b274:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b278:	4318      	orrs	r0, r3
 801b27a:	4770      	bx	lr

0801b27c <_GetIndexMask_8888>:
 801b27c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b280:	4770      	bx	lr
 801b282:	bf00      	nop

0801b284 <_Color2IndexBulk>:
 801b284:	b4f0      	push	{r4, r5, r6, r7}
 801b286:	f850 4b04 	ldr.w	r4, [r0], #4
 801b28a:	43e6      	mvns	r6, r4
 801b28c:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801b290:	0425      	lsls	r5, r4, #16
 801b292:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 801b296:	433e      	orrs	r6, r7
 801b298:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 801b29c:	4335      	orrs	r5, r6
 801b29e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801b2a2:	432c      	orrs	r4, r5
 801b2a4:	3a01      	subs	r2, #1
 801b2a6:	600c      	str	r4, [r1, #0]
 801b2a8:	4419      	add	r1, r3
 801b2aa:	d1ec      	bne.n	801b286 <_Color2IndexBulk+0x2>
 801b2ac:	bcf0      	pop	{r4, r5, r6, r7}
 801b2ae:	4770      	bx	lr

0801b2b0 <_Index2ColorBulk>:
 801b2b0:	b4f0      	push	{r4, r5, r6, r7}
 801b2b2:	6804      	ldr	r4, [r0, #0]
 801b2b4:	43e6      	mvns	r6, r4
 801b2b6:	f3c4 4707 	ubfx	r7, r4, #16, #8
 801b2ba:	0425      	lsls	r5, r4, #16
 801b2bc:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 801b2c0:	433e      	orrs	r6, r7
 801b2c2:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 801b2c6:	4335      	orrs	r5, r6
 801b2c8:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801b2cc:	432c      	orrs	r4, r5
 801b2ce:	3a01      	subs	r2, #1
 801b2d0:	4418      	add	r0, r3
 801b2d2:	f841 4b04 	str.w	r4, [r1], #4
 801b2d6:	d1ec      	bne.n	801b2b2 <_Index2ColorBulk+0x2>
 801b2d8:	bcf0      	pop	{r4, r5, r6, r7}
 801b2da:	4770      	bx	lr

0801b2dc <LCD_Index2Color_8888>:
 801b2dc:	43c2      	mvns	r2, r0
 801b2de:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801b2e2:	0403      	lsls	r3, r0, #16
 801b2e4:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 801b2e8:	430a      	orrs	r2, r1
 801b2ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801b2ee:	4313      	orrs	r3, r2
 801b2f0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801b2f4:	4318      	orrs	r0, r3
 801b2f6:	4770      	bx	lr

0801b2f8 <GUI_DrawRect>:
 801b2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b2fc:	b082      	sub	sp, #8
 801b2fe:	4604      	mov	r4, r0
 801b300:	4689      	mov	r9, r1
 801b302:	4692      	mov	sl, r2
 801b304:	4698      	mov	r8, r3
 801b306:	f7f6 f9b9 	bl	801167c <GUI_Lock>
 801b30a:	4b1e      	ldr	r3, [pc, #120]	; (801b384 <GUI_DrawRect+0x8c>)
 801b30c:	681f      	ldr	r7, [r3, #0]
 801b30e:	7e3e      	ldrb	r6, [r7, #24]
 801b310:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 801b312:	6d3f      	ldr	r7, [r7, #80]	; 0x50
 801b314:	3e01      	subs	r6, #1
 801b316:	b2b6      	uxth	r6, r6
 801b318:	442c      	add	r4, r5
 801b31a:	44b9      	add	r9, r7
 801b31c:	4455      	add	r5, sl
 801b31e:	44b8      	add	r8, r7
 801b320:	1ba1      	subs	r1, r4, r6
 801b322:	1972      	adds	r2, r6, r5
 801b324:	ebc6 0309 	rsb	r3, r6, r9
 801b328:	4668      	mov	r0, sp
 801b32a:	4446      	add	r6, r8
 801b32c:	f8ad 1000 	strh.w	r1, [sp]
 801b330:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b334:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b338:	f8ad 6006 	strh.w	r6, [sp, #6]
 801b33c:	f7fc fe3a 	bl	8017fb4 <WM__InitIVRSearch>
 801b340:	b1d8      	cbz	r0, 801b37a <GUI_DrawRect+0x82>
 801b342:	f109 0701 	add.w	r7, r9, #1
 801b346:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 801b34a:	462a      	mov	r2, r5
 801b34c:	4649      	mov	r1, r9
 801b34e:	4620      	mov	r0, r4
 801b350:	f7f7 fac4 	bl	80128dc <LCD_DrawHLine>
 801b354:	462a      	mov	r2, r5
 801b356:	4641      	mov	r1, r8
 801b358:	4620      	mov	r0, r4
 801b35a:	f7f7 fabf 	bl	80128dc <LCD_DrawHLine>
 801b35e:	4632      	mov	r2, r6
 801b360:	4639      	mov	r1, r7
 801b362:	4620      	mov	r0, r4
 801b364:	f7f7 fae4 	bl	8012930 <LCD_DrawVLine>
 801b368:	4632      	mov	r2, r6
 801b36a:	4639      	mov	r1, r7
 801b36c:	4628      	mov	r0, r5
 801b36e:	f7f7 fadf 	bl	8012930 <LCD_DrawVLine>
 801b372:	f7fc fcf9 	bl	8017d68 <WM__GetNextIVR>
 801b376:	2800      	cmp	r0, #0
 801b378:	d1e7      	bne.n	801b34a <GUI_DrawRect+0x52>
 801b37a:	f7f6 f975 	bl	8011668 <GUI_Unlock>
 801b37e:	b002      	add	sp, #8
 801b380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b384:	200000a8 	.word	0x200000a8

0801b388 <GUI_GetYAdjust>:
 801b388:	b510      	push	{r4, lr}
 801b38a:	f7f6 f977 	bl	801167c <GUI_Lock>
 801b38e:	4b0f      	ldr	r3, [pc, #60]	; (801b3cc <GUI_GetYAdjust+0x44>)
 801b390:	681a      	ldr	r2, [r3, #0]
 801b392:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 801b394:	f003 030c 	and.w	r3, r3, #12
 801b398:	2b08      	cmp	r3, #8
 801b39a:	d008      	beq.n	801b3ae <GUI_GetYAdjust+0x26>
 801b39c:	2b0c      	cmp	r3, #12
 801b39e:	d006      	beq.n	801b3ae <GUI_GetYAdjust+0x26>
 801b3a0:	2b04      	cmp	r3, #4
 801b3a2:	d00b      	beq.n	801b3bc <GUI_GetYAdjust+0x34>
 801b3a4:	2400      	movs	r4, #0
 801b3a6:	f7f6 f95f 	bl	8011668 <GUI_Unlock>
 801b3aa:	4620      	mov	r0, r4
 801b3ac:	bd10      	pop	{r4, pc}
 801b3ae:	69d3      	ldr	r3, [r2, #28]
 801b3b0:	7e1c      	ldrb	r4, [r3, #24]
 801b3b2:	0864      	lsrs	r4, r4, #1
 801b3b4:	f7f6 f958 	bl	8011668 <GUI_Unlock>
 801b3b8:	4620      	mov	r0, r4
 801b3ba:	bd10      	pop	{r4, pc}
 801b3bc:	69d3      	ldr	r3, [r2, #28]
 801b3be:	7e1c      	ldrb	r4, [r3, #24]
 801b3c0:	3c01      	subs	r4, #1
 801b3c2:	f7f6 f951 	bl	8011668 <GUI_Unlock>
 801b3c6:	4620      	mov	r0, r4
 801b3c8:	bd10      	pop	{r4, pc}
 801b3ca:	bf00      	nop
 801b3cc:	200000a8 	.word	0x200000a8

0801b3d0 <GUI_GetFontDistY>:
 801b3d0:	b510      	push	{r4, lr}
 801b3d2:	f7f6 f953 	bl	801167c <GUI_Lock>
 801b3d6:	4b04      	ldr	r3, [pc, #16]	; (801b3e8 <GUI_GetFontDistY+0x18>)
 801b3d8:	681b      	ldr	r3, [r3, #0]
 801b3da:	69db      	ldr	r3, [r3, #28]
 801b3dc:	7e5c      	ldrb	r4, [r3, #25]
 801b3de:	f7f6 f943 	bl	8011668 <GUI_Unlock>
 801b3e2:	4620      	mov	r0, r4
 801b3e4:	bd10      	pop	{r4, pc}
 801b3e6:	bf00      	nop
 801b3e8:	200000a8 	.word	0x200000a8

0801b3ec <GUI_GetCharDistX>:
 801b3ec:	b510      	push	{r4, lr}
 801b3ee:	4604      	mov	r4, r0
 801b3f0:	f7f6 f944 	bl	801167c <GUI_Lock>
 801b3f4:	4b05      	ldr	r3, [pc, #20]	; (801b40c <GUI_GetCharDistX+0x20>)
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	69db      	ldr	r3, [r3, #28]
 801b3fa:	2100      	movs	r1, #0
 801b3fc:	685b      	ldr	r3, [r3, #4]
 801b3fe:	4620      	mov	r0, r4
 801b400:	4798      	blx	r3
 801b402:	4604      	mov	r4, r0
 801b404:	f7f6 f930 	bl	8011668 <GUI_Unlock>
 801b408:	4620      	mov	r0, r4
 801b40a:	bd10      	pop	{r4, pc}
 801b40c:	200000a8 	.word	0x200000a8

0801b410 <GUI_GetCharDistXEx>:
 801b410:	b538      	push	{r3, r4, r5, lr}
 801b412:	4604      	mov	r4, r0
 801b414:	460d      	mov	r5, r1
 801b416:	f7f6 f931 	bl	801167c <GUI_Lock>
 801b41a:	4b06      	ldr	r3, [pc, #24]	; (801b434 <GUI_GetCharDistXEx+0x24>)
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	69db      	ldr	r3, [r3, #28]
 801b420:	4629      	mov	r1, r5
 801b422:	685b      	ldr	r3, [r3, #4]
 801b424:	4620      	mov	r0, r4
 801b426:	4798      	blx	r3
 801b428:	4604      	mov	r4, r0
 801b42a:	f7f6 f91d 	bl	8011668 <GUI_Unlock>
 801b42e:	4620      	mov	r0, r4
 801b430:	bd38      	pop	{r3, r4, r5, pc}
 801b432:	bf00      	nop
 801b434:	200000a8 	.word	0x200000a8

0801b438 <_Log2VisBuffered>:
 801b438:	4770      	bx	lr
 801b43a:	bf00      	nop

0801b43c <_DispLine>:
 801b43c:	b570      	push	{r4, r5, r6, lr}
 801b43e:	b082      	sub	sp, #8
 801b440:	ab02      	add	r3, sp, #8
 801b442:	4d21      	ldr	r5, [pc, #132]	; (801b4c8 <_DispLine+0x8c>)
 801b444:	f843 1d08 	str.w	r1, [r3, #-8]!
 801b448:	4c20      	ldr	r4, [pc, #128]	; (801b4cc <_DispLine+0x90>)
 801b44a:	9001      	str	r0, [sp, #4]
 801b44c:	4619      	mov	r1, r3
 801b44e:	682b      	ldr	r3, [r5, #0]
 801b450:	4615      	mov	r5, r2
 801b452:	4798      	blx	r3
 801b454:	6823      	ldr	r3, [r4, #0]
 801b456:	9001      	str	r0, [sp, #4]
 801b458:	6958      	ldr	r0, [r3, #20]
 801b45a:	b118      	cbz	r0, 801b464 <_DispLine+0x28>
 801b45c:	4629      	mov	r1, r5
 801b45e:	f7f4 ff0d 	bl	801027c <GUI_RectsIntersect>
 801b462:	b1a8      	cbz	r0, 801b490 <_DispLine+0x54>
 801b464:	2001      	movs	r0, #1
 801b466:	f001 fbfb 	bl	801cc60 <GUI__ManageCache>
 801b46a:	6822      	ldr	r2, [r4, #0]
 801b46c:	69d3      	ldr	r3, [r2, #28]
 801b46e:	695b      	ldr	r3, [r3, #20]
 801b470:	b1ab      	cbz	r3, 801b49e <_DispLine+0x62>
 801b472:	4c17      	ldr	r4, [pc, #92]	; (801b4d0 <_DispLine+0x94>)
 801b474:	6821      	ldr	r1, [r4, #0]
 801b476:	b169      	cbz	r1, 801b494 <_DispLine+0x58>
 801b478:	f9b2 5022 	ldrsh.w	r5, [r2, #34]	; 0x22
 801b47c:	689b      	ldr	r3, [r3, #8]
 801b47e:	9801      	ldr	r0, [sp, #4]
 801b480:	9900      	ldr	r1, [sp, #0]
 801b482:	4798      	blx	r3
 801b484:	4628      	mov	r0, r5
 801b486:	6823      	ldr	r3, [r4, #0]
 801b488:	4798      	blx	r3
 801b48a:	2000      	movs	r0, #0
 801b48c:	f001 fbe8 	bl	801cc60 <GUI__ManageCache>
 801b490:	b002      	add	sp, #8
 801b492:	bd70      	pop	{r4, r5, r6, pc}
 801b494:	689b      	ldr	r3, [r3, #8]
 801b496:	9900      	ldr	r1, [sp, #0]
 801b498:	9801      	ldr	r0, [sp, #4]
 801b49a:	4798      	blx	r3
 801b49c:	e7f5      	b.n	801b48a <_DispLine+0x4e>
 801b49e:	4d0d      	ldr	r5, [pc, #52]	; (801b4d4 <_DispLine+0x98>)
 801b4a0:	9b00      	ldr	r3, [sp, #0]
 801b4a2:	3b01      	subs	r3, #1
 801b4a4:	2b00      	cmp	r3, #0
 801b4a6:	a801      	add	r0, sp, #4
 801b4a8:	9300      	str	r3, [sp, #0]
 801b4aa:	dbee      	blt.n	801b48a <_DispLine+0x4e>
 801b4ac:	f7f6 fa08 	bl	80118c0 <GUI_UC__GetCharCodeInc>
 801b4b0:	6823      	ldr	r3, [r4, #0]
 801b4b2:	69db      	ldr	r3, [r3, #28]
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	4606      	mov	r6, r0
 801b4b8:	4798      	blx	r3
 801b4ba:	682b      	ldr	r3, [r5, #0]
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	d0ef      	beq.n	801b4a0 <_DispLine+0x64>
 801b4c0:	4630      	mov	r0, r6
 801b4c2:	4798      	blx	r3
 801b4c4:	e7ec      	b.n	801b4a0 <_DispLine+0x64>
 801b4c6:	bf00      	nop
 801b4c8:	200001dc 	.word	0x200001dc
 801b4cc:	200000a8 	.word	0x200000a8
 801b4d0:	20030840 	.word	0x20030840
 801b4d4:	2003084c 	.word	0x2003084c

0801b4d8 <GUI__GetLineNumChars>:
 801b4d8:	b530      	push	{r4, r5, lr}
 801b4da:	b083      	sub	sp, #12
 801b4dc:	9001      	str	r0, [sp, #4]
 801b4de:	b300      	cbz	r0, 801b522 <GUI__GetLineNumChars+0x4a>
 801b4e0:	4b11      	ldr	r3, [pc, #68]	; (801b528 <GUI__GetLineNumChars+0x50>)
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	69db      	ldr	r3, [r3, #28]
 801b4e6:	695b      	ldr	r3, [r3, #20]
 801b4e8:	460d      	mov	r5, r1
 801b4ea:	b123      	cbz	r3, 801b4f6 <GUI__GetLineNumChars+0x1e>
 801b4ec:	685b      	ldr	r3, [r3, #4]
 801b4ee:	b113      	cbz	r3, 801b4f6 <GUI__GetLineNumChars+0x1e>
 801b4f0:	4798      	blx	r3
 801b4f2:	b003      	add	sp, #12
 801b4f4:	bd30      	pop	{r4, r5, pc}
 801b4f6:	2d00      	cmp	r5, #0
 801b4f8:	bfd8      	it	le
 801b4fa:	2000      	movle	r0, #0
 801b4fc:	ddf9      	ble.n	801b4f2 <GUI__GetLineNumChars+0x1a>
 801b4fe:	2400      	movs	r4, #0
 801b500:	e004      	b.n	801b50c <GUI__GetLineNumChars+0x34>
 801b502:	280a      	cmp	r0, #10
 801b504:	d007      	beq.n	801b516 <GUI__GetLineNumChars+0x3e>
 801b506:	3401      	adds	r4, #1
 801b508:	42a5      	cmp	r5, r4
 801b50a:	d007      	beq.n	801b51c <GUI__GetLineNumChars+0x44>
 801b50c:	a801      	add	r0, sp, #4
 801b50e:	f7f6 f9d7 	bl	80118c0 <GUI_UC__GetCharCodeInc>
 801b512:	2800      	cmp	r0, #0
 801b514:	d1f5      	bne.n	801b502 <GUI__GetLineNumChars+0x2a>
 801b516:	4620      	mov	r0, r4
 801b518:	b003      	add	sp, #12
 801b51a:	bd30      	pop	{r4, r5, pc}
 801b51c:	4628      	mov	r0, r5
 801b51e:	b003      	add	sp, #12
 801b520:	bd30      	pop	{r4, r5, pc}
 801b522:	b003      	add	sp, #12
 801b524:	bd30      	pop	{r4, r5, pc}
 801b526:	bf00      	nop
 801b528:	200000a8 	.word	0x200000a8

0801b52c <GUI__GetLineDistX>:
 801b52c:	b570      	push	{r4, r5, r6, lr}
 801b52e:	b084      	sub	sp, #16
 801b530:	ab04      	add	r3, sp, #16
 801b532:	4a1d      	ldr	r2, [pc, #116]	; (801b5a8 <GUI__GetLineDistX+0x7c>)
 801b534:	f843 1d10 	str.w	r1, [r3, #-16]!
 801b538:	9001      	str	r0, [sp, #4]
 801b53a:	4619      	mov	r1, r3
 801b53c:	6813      	ldr	r3, [r2, #0]
 801b53e:	4798      	blx	r3
 801b540:	9001      	str	r0, [sp, #4]
 801b542:	b358      	cbz	r0, 801b59c <GUI__GetLineDistX+0x70>
 801b544:	4b19      	ldr	r3, [pc, #100]	; (801b5ac <GUI__GetLineDistX+0x80>)
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	69db      	ldr	r3, [r3, #28]
 801b54a:	695b      	ldr	r3, [r3, #20]
 801b54c:	b12b      	cbz	r3, 801b55a <GUI__GetLineDistX+0x2e>
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	b11b      	cbz	r3, 801b55a <GUI__GetLineDistX+0x2e>
 801b552:	9900      	ldr	r1, [sp, #0]
 801b554:	4798      	blx	r3
 801b556:	b004      	add	sp, #16
 801b558:	bd70      	pop	{r4, r5, r6, pc}
 801b55a:	9b00      	ldr	r3, [sp, #0]
 801b55c:	3b01      	subs	r3, #1
 801b55e:	2b00      	cmp	r3, #0
 801b560:	9300      	str	r3, [sp, #0]
 801b562:	bfa8      	it	ge
 801b564:	2400      	movge	r4, #0
 801b566:	db1b      	blt.n	801b5a0 <GUI__GetLineDistX+0x74>
 801b568:	a801      	add	r0, sp, #4
 801b56a:	f7f6 f9a9 	bl	80118c0 <GUI_UC__GetCharCodeInc>
 801b56e:	4605      	mov	r5, r0
 801b570:	f7ff ff3c 	bl	801b3ec <GUI_GetCharDistX>
 801b574:	9b00      	ldr	r3, [sp, #0]
 801b576:	3b01      	subs	r3, #1
 801b578:	2b00      	cmp	r3, #0
 801b57a:	4404      	add	r4, r0
 801b57c:	9300      	str	r3, [sp, #0]
 801b57e:	daf3      	bge.n	801b568 <GUI__GetLineDistX+0x3c>
 801b580:	a904      	add	r1, sp, #16
 801b582:	2600      	movs	r6, #0
 801b584:	f841 6d04 	str.w	r6, [r1, #-4]!
 801b588:	4628      	mov	r0, r5
 801b58a:	f7ff ff41 	bl	801b410 <GUI_GetCharDistXEx>
 801b58e:	9b03      	ldr	r3, [sp, #12]
 801b590:	4298      	cmp	r0, r3
 801b592:	bfb8      	it	lt
 801b594:	1a1e      	sublt	r6, r3, r0
 801b596:	1930      	adds	r0, r6, r4
 801b598:	b004      	add	sp, #16
 801b59a:	bd70      	pop	{r4, r5, r6, pc}
 801b59c:	b004      	add	sp, #16
 801b59e:	bd70      	pop	{r4, r5, r6, pc}
 801b5a0:	2500      	movs	r5, #0
 801b5a2:	462c      	mov	r4, r5
 801b5a4:	e7ec      	b.n	801b580 <GUI__GetLineDistX+0x54>
 801b5a6:	bf00      	nop
 801b5a8:	200001dc 	.word	0x200001dc
 801b5ac:	200000a8 	.word	0x200000a8

0801b5b0 <GUI__DispLine>:
 801b5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b5b2:	4b2a      	ldr	r3, [pc, #168]	; (801b65c <GUI__DispLine+0xac>)
 801b5b4:	681b      	ldr	r3, [r3, #0]
 801b5b6:	b083      	sub	sp, #12
 801b5b8:	4604      	mov	r4, r0
 801b5ba:	460d      	mov	r5, r1
 801b5bc:	b17b      	cbz	r3, 801b5de <GUI__DispLine+0x2e>
 801b5be:	2000      	movs	r0, #0
 801b5c0:	f7fc fcf8 	bl	8017fb4 <WM__InitIVRSearch>
 801b5c4:	b148      	cbz	r0, 801b5da <GUI__DispLine+0x2a>
 801b5c6:	466e      	mov	r6, sp
 801b5c8:	4632      	mov	r2, r6
 801b5ca:	4629      	mov	r1, r5
 801b5cc:	4620      	mov	r0, r4
 801b5ce:	f7ff ff35 	bl	801b43c <_DispLine>
 801b5d2:	f7fc fbc9 	bl	8017d68 <WM__GetNextIVR>
 801b5d6:	2800      	cmp	r0, #0
 801b5d8:	d1f6      	bne.n	801b5c8 <GUI__DispLine+0x18>
 801b5da:	b003      	add	sp, #12
 801b5dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b5de:	6810      	ldr	r0, [r2, #0]
 801b5e0:	6851      	ldr	r1, [r2, #4]
 801b5e2:	4f1f      	ldr	r7, [pc, #124]	; (801b660 <GUI__DispLine+0xb0>)
 801b5e4:	466b      	mov	r3, sp
 801b5e6:	c303      	stmia	r3!, {r0, r1}
 801b5e8:	683b      	ldr	r3, [r7, #0]
 801b5ea:	f8bd 0000 	ldrh.w	r0, [sp]
 801b5ee:	f8b3 e04c 	ldrh.w	lr, [r3, #76]	; 0x4c
 801b5f2:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 801b5f6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801b5fa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801b5fe:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801b602:	4470      	add	r0, lr
 801b604:	4432      	add	r2, r6
 801b606:	4433      	add	r3, r6
 801b608:	4471      	add	r1, lr
 801b60a:	f8ad 0000 	strh.w	r0, [sp]
 801b60e:	4668      	mov	r0, sp
 801b610:	466e      	mov	r6, sp
 801b612:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b616:	f8ad 2002 	strh.w	r2, [sp, #2]
 801b61a:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b61e:	f7fc fcc9 	bl	8017fb4 <WM__InitIVRSearch>
 801b622:	b950      	cbnz	r0, 801b63a <GUI__DispLine+0x8a>
 801b624:	683b      	ldr	r3, [r7, #0]
 801b626:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801b628:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 801b62a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801b62c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801b62e:	1b09      	subs	r1, r1, r4
 801b630:	1a12      	subs	r2, r2, r0
 801b632:	8459      	strh	r1, [r3, #34]	; 0x22
 801b634:	849a      	strh	r2, [r3, #36]	; 0x24
 801b636:	b003      	add	sp, #12
 801b638:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b63a:	683b      	ldr	r3, [r7, #0]
 801b63c:	f8bd 1000 	ldrh.w	r1, [sp]
 801b640:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801b644:	8459      	strh	r1, [r3, #34]	; 0x22
 801b646:	849a      	strh	r2, [r3, #36]	; 0x24
 801b648:	4629      	mov	r1, r5
 801b64a:	4632      	mov	r2, r6
 801b64c:	4620      	mov	r0, r4
 801b64e:	f7ff fef5 	bl	801b43c <_DispLine>
 801b652:	f7fc fb89 	bl	8017d68 <WM__GetNextIVR>
 801b656:	2800      	cmp	r0, #0
 801b658:	d1ef      	bne.n	801b63a <GUI__DispLine+0x8a>
 801b65a:	e7e3      	b.n	801b624 <GUI__DispLine+0x74>
 801b65c:	2003082c 	.word	0x2003082c
 801b660:	200000a8 	.word	0x200000a8

0801b664 <GUIMONO_DispChar>:
 801b664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b668:	4e4f      	ldr	r6, [pc, #316]	; (801b7a8 <GUIMONO_DispChar+0x144>)
 801b66a:	6833      	ldr	r3, [r6, #0]
 801b66c:	69da      	ldr	r2, [r3, #28]
 801b66e:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 801b672:	69d4      	ldr	r4, [r2, #28]
 801b674:	f8b4 b00c 	ldrh.w	fp, [r4, #12]
 801b678:	4583      	cmp	fp, r0
 801b67a:	b08b      	sub	sp, #44	; 0x2c
 801b67c:	d87d      	bhi.n	801b77a <GUIMONO_DispChar+0x116>
 801b67e:	89e1      	ldrh	r1, [r4, #14]
 801b680:	4281      	cmp	r1, r0
 801b682:	d37a      	bcc.n	801b77a <GUIMONO_DispChar+0x116>
 801b684:	6821      	ldr	r1, [r4, #0]
 801b686:	9108      	str	r1, [sp, #32]
 801b688:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801b68c:	ebcb 0b00 	rsb	fp, fp, r0
 801b690:	9107      	str	r1, [sp, #28]
 801b692:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 801b696:	d06a      	beq.n	801b76e <GUIMONO_DispChar+0x10a>
 801b698:	7e17      	ldrb	r7, [r2, #24]
 801b69a:	f9b3 802a 	ldrsh.w	r8, [r3, #42]	; 0x2a
 801b69e:	7ca2      	ldrb	r2, [r4, #18]
 801b6a0:	f9b3 9024 	ldrsh.w	r9, [r3, #36]	; 0x24
 801b6a4:	f894 a010 	ldrb.w	sl, [r4, #16]
 801b6a8:	fb17 f302 	smulbb	r3, r7, r2
 801b6ac:	4640      	mov	r0, r8
 801b6ae:	9306      	str	r3, [sp, #24]
 801b6b0:	f7f7 f8d8 	bl	8012864 <LCD_SetDrawMode>
 801b6b4:	6833      	ldr	r3, [r6, #0]
 801b6b6:	9a06      	ldr	r2, [sp, #24]
 801b6b8:	9908      	ldr	r1, [sp, #32]
 801b6ba:	9009      	str	r0, [sp, #36]	; 0x24
 801b6bc:	fb02 100b 	mla	r0, r2, fp, r1
 801b6c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801b6c2:	69db      	ldr	r3, [r3, #28]
 801b6c4:	9004      	str	r0, [sp, #16]
 801b6c6:	9205      	str	r2, [sp, #20]
 801b6c8:	7ca2      	ldrb	r2, [r4, #18]
 801b6ca:	9203      	str	r2, [sp, #12]
 801b6cc:	f04f 0b01 	mov.w	fp, #1
 801b6d0:	f8cd b008 	str.w	fp, [sp, #8]
 801b6d4:	7eda      	ldrb	r2, [r3, #27]
 801b6d6:	9201      	str	r2, [sp, #4]
 801b6d8:	7e9b      	ldrb	r3, [r3, #26]
 801b6da:	9300      	str	r3, [sp, #0]
 801b6dc:	4628      	mov	r0, r5
 801b6de:	463b      	mov	r3, r7
 801b6e0:	4652      	mov	r2, sl
 801b6e2:	4649      	mov	r1, r9
 801b6e4:	f7f7 fa8c 	bl	8012c00 <LCD_DrawBitmap>
 801b6e8:	9807      	ldr	r0, [sp, #28]
 801b6ea:	3001      	adds	r0, #1
 801b6ec:	d01c      	beq.n	801b728 <GUIMONO_DispChar+0xc4>
 801b6ee:	f048 0002 	orr.w	r0, r8, #2
 801b6f2:	f7f7 f8b7 	bl	8012864 <LCD_SetDrawMode>
 801b6f6:	4a2c      	ldr	r2, [pc, #176]	; (801b7a8 <GUIMONO_DispChar+0x144>)
 801b6f8:	9807      	ldr	r0, [sp, #28]
 801b6fa:	6812      	ldr	r2, [r2, #0]
 801b6fc:	9908      	ldr	r1, [sp, #32]
 801b6fe:	9b06      	ldr	r3, [sp, #24]
 801b700:	fb03 1300 	mla	r3, r3, r0, r1
 801b704:	6b91      	ldr	r1, [r2, #56]	; 0x38
 801b706:	69d2      	ldr	r2, [r2, #28]
 801b708:	9105      	str	r1, [sp, #20]
 801b70a:	9304      	str	r3, [sp, #16]
 801b70c:	7ca3      	ldrb	r3, [r4, #18]
 801b70e:	9303      	str	r3, [sp, #12]
 801b710:	f8cd b008 	str.w	fp, [sp, #8]
 801b714:	7ed3      	ldrb	r3, [r2, #27]
 801b716:	9301      	str	r3, [sp, #4]
 801b718:	7e93      	ldrb	r3, [r2, #26]
 801b71a:	9300      	str	r3, [sp, #0]
 801b71c:	4652      	mov	r2, sl
 801b71e:	463b      	mov	r3, r7
 801b720:	4649      	mov	r1, r9
 801b722:	4628      	mov	r0, r5
 801b724:	f7f7 fa6c 	bl	8012c00 <LCD_DrawBitmap>
 801b728:	6833      	ldr	r3, [r6, #0]
 801b72a:	4f1f      	ldr	r7, [pc, #124]	; (801b7a8 <GUIMONO_DispChar+0x144>)
 801b72c:	69db      	ldr	r3, [r3, #28]
 801b72e:	7e5a      	ldrb	r2, [r3, #25]
 801b730:	7e1b      	ldrb	r3, [r3, #24]
 801b732:	429a      	cmp	r2, r3
 801b734:	d914      	bls.n	801b760 <GUIMONO_DispChar+0xfc>
 801b736:	f1b8 0f02 	cmp.w	r8, #2
 801b73a:	d011      	beq.n	801b760 <GUIMONO_DispChar+0xfc>
 801b73c:	f088 0004 	eor.w	r0, r8, #4
 801b740:	f7f7 f890 	bl	8012864 <LCD_SetDrawMode>
 801b744:	683b      	ldr	r3, [r7, #0]
 801b746:	69db      	ldr	r3, [r3, #28]
 801b748:	7e18      	ldrb	r0, [r3, #24]
 801b74a:	7ed9      	ldrb	r1, [r3, #27]
 801b74c:	7e9a      	ldrb	r2, [r3, #26]
 801b74e:	7e5b      	ldrb	r3, [r3, #25]
 801b750:	fb00 9101 	mla	r1, r0, r1, r9
 801b754:	fb0a 5202 	mla	r2, sl, r2, r5
 801b758:	444b      	add	r3, r9
 801b75a:	4628      	mov	r0, r5
 801b75c:	f7f7 f912 	bl	8012984 <LCD_FillRect>
 801b760:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 801b764:	f7f7 f87e 	bl	8012864 <LCD_SetDrawMode>
 801b768:	6833      	ldr	r3, [r6, #0]
 801b76a:	f9b3 5022 	ldrsh.w	r5, [r3, #34]	; 0x22
 801b76e:	7c62      	ldrb	r2, [r4, #17]
 801b770:	4415      	add	r5, r2
 801b772:	845d      	strh	r5, [r3, #34]	; 0x22
 801b774:	b00b      	add	sp, #44	; 0x2c
 801b776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b77a:	68a1      	ldr	r1, [r4, #8]
 801b77c:	2900      	cmp	r1, #0
 801b77e:	d0f6      	beq.n	801b76e <GUIMONO_DispChar+0x10a>
 801b780:	880f      	ldrh	r7, [r1, #0]
 801b782:	42b8      	cmp	r0, r7
 801b784:	d3f3      	bcc.n	801b76e <GUIMONO_DispChar+0x10a>
 801b786:	f8b1 e002 	ldrh.w	lr, [r1, #2]
 801b78a:	4586      	cmp	lr, r0
 801b78c:	d3ef      	bcc.n	801b76e <GUIMONO_DispChar+0x10a>
 801b78e:	6849      	ldr	r1, [r1, #4]
 801b790:	1bc0      	subs	r0, r0, r7
 801b792:	b280      	uxth	r0, r0
 801b794:	6867      	ldr	r7, [r4, #4]
 801b796:	9708      	str	r7, [sp, #32]
 801b798:	eb01 0780 	add.w	r7, r1, r0, lsl #2
 801b79c:	f931 b020 	ldrsh.w	fp, [r1, r0, lsl #2]
 801b7a0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 801b7a4:	9107      	str	r1, [sp, #28]
 801b7a6:	e774      	b.n	801b692 <GUIMONO_DispChar+0x2e>
 801b7a8:	200000a8 	.word	0x200000a8

0801b7ac <GUIMONO_GetCharDistX>:
 801b7ac:	4b04      	ldr	r3, [pc, #16]	; (801b7c0 <GUIMONO_GetCharDistX+0x14>)
 801b7ae:	681b      	ldr	r3, [r3, #0]
 801b7b0:	69db      	ldr	r3, [r3, #28]
 801b7b2:	69db      	ldr	r3, [r3, #28]
 801b7b4:	b109      	cbz	r1, 801b7ba <GUIMONO_GetCharDistX+0xe>
 801b7b6:	7c1a      	ldrb	r2, [r3, #16]
 801b7b8:	600a      	str	r2, [r1, #0]
 801b7ba:	7c58      	ldrb	r0, [r3, #17]
 801b7bc:	4770      	bx	lr
 801b7be:	bf00      	nop
 801b7c0:	200000a8 	.word	0x200000a8

0801b7c4 <GUIMONO_GetFontInfo>:
 801b7c4:	2302      	movs	r3, #2
 801b7c6:	800b      	strh	r3, [r1, #0]
 801b7c8:	4770      	bx	lr
 801b7ca:	bf00      	nop

0801b7cc <GUIMONO_IsInFont>:
 801b7cc:	69c3      	ldr	r3, [r0, #28]
 801b7ce:	899a      	ldrh	r2, [r3, #12]
 801b7d0:	428a      	cmp	r2, r1
 801b7d2:	d802      	bhi.n	801b7da <GUIMONO_IsInFont+0xe>
 801b7d4:	89da      	ldrh	r2, [r3, #14]
 801b7d6:	428a      	cmp	r2, r1
 801b7d8:	d211      	bcs.n	801b7fe <GUIMONO_IsInFont+0x32>
 801b7da:	6898      	ldr	r0, [r3, #8]
 801b7dc:	b118      	cbz	r0, 801b7e6 <GUIMONO_IsInFont+0x1a>
 801b7de:	8803      	ldrh	r3, [r0, #0]
 801b7e0:	4299      	cmp	r1, r3
 801b7e2:	d201      	bcs.n	801b7e8 <GUIMONO_IsInFont+0x1c>
 801b7e4:	2000      	movs	r0, #0
 801b7e6:	4770      	bx	lr
 801b7e8:	8842      	ldrh	r2, [r0, #2]
 801b7ea:	428a      	cmp	r2, r1
 801b7ec:	d3fa      	bcc.n	801b7e4 <GUIMONO_IsInFont+0x18>
 801b7ee:	1ac9      	subs	r1, r1, r3
 801b7f0:	6843      	ldr	r3, [r0, #4]
 801b7f2:	f833 0021 	ldrh.w	r0, [r3, r1, lsl #2]
 801b7f6:	43c0      	mvns	r0, r0
 801b7f8:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 801b7fc:	4770      	bx	lr
 801b7fe:	2001      	movs	r0, #1
 801b800:	4770      	bx	lr
 801b802:	bf00      	nop

0801b804 <GUIPROP_DispChar>:
 801b804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b808:	4d3e      	ldr	r5, [pc, #248]	; (801b904 <GUIPROP_DispChar+0x100>)
 801b80a:	682b      	ldr	r3, [r5, #0]
 801b80c:	69da      	ldr	r2, [r3, #28]
 801b80e:	f9b3 602a 	ldrsh.w	r6, [r3, #42]	; 0x2a
 801b812:	69d3      	ldr	r3, [r2, #28]
 801b814:	b089      	sub	sp, #36	; 0x24
 801b816:	b143      	cbz	r3, 801b82a <GUIPROP_DispChar+0x26>
 801b818:	881a      	ldrh	r2, [r3, #0]
 801b81a:	4290      	cmp	r0, r2
 801b81c:	d302      	bcc.n	801b824 <GUIPROP_DispChar+0x20>
 801b81e:	8859      	ldrh	r1, [r3, #2]
 801b820:	4281      	cmp	r1, r0
 801b822:	d205      	bcs.n	801b830 <GUIPROP_DispChar+0x2c>
 801b824:	689b      	ldr	r3, [r3, #8]
 801b826:	2b00      	cmp	r3, #0
 801b828:	d1f6      	bne.n	801b818 <GUIPROP_DispChar+0x14>
 801b82a:	b009      	add	sp, #36	; 0x24
 801b82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b830:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801b834:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 801b904 <GUIPROP_DispChar+0x100>
 801b838:	1a84      	subs	r4, r0, r2
 801b83a:	eb08 07c4 	add.w	r7, r8, r4, lsl #3
 801b83e:	4630      	mov	r0, r6
 801b840:	f897 b002 	ldrb.w	fp, [r7, #2]
 801b844:	f7f7 f80e 	bl	8012864 <LCD_SetDrawMode>
 801b848:	4682      	mov	sl, r0
 801b84a:	6828      	ldr	r0, [r5, #0]
 801b84c:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
 801b850:	f8d0 e01c 	ldr.w	lr, [r0, #28]
 801b854:	f8d0 c038 	ldr.w	ip, [r0, #56]	; 0x38
 801b858:	f89e 3018 	ldrb.w	r3, [lr, #24]
 801b85c:	f9b0 1024 	ldrsh.w	r1, [r0, #36]	; 0x24
 801b860:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 801b864:	f8cd c014 	str.w	ip, [sp, #20]
 801b868:	9306      	str	r3, [sp, #24]
 801b86a:	f04f 0c01 	mov.w	ip, #1
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	9304      	str	r3, [sp, #16]
 801b872:	f8cd b00c 	str.w	fp, [sp, #12]
 801b876:	f8cd c008 	str.w	ip, [sp, #8]
 801b87a:	f89e c01b 	ldrb.w	ip, [lr, #27]
 801b87e:	f8cd c004 	str.w	ip, [sp, #4]
 801b882:	f89e e01a 	ldrb.w	lr, [lr, #26]
 801b886:	9b06      	ldr	r3, [sp, #24]
 801b888:	f8cd e000 	str.w	lr, [sp]
 801b88c:	f7f7 f9b8 	bl	8012c00 <LCD_DrawBitmap>
 801b890:	682b      	ldr	r3, [r5, #0]
 801b892:	69da      	ldr	r2, [r3, #28]
 801b894:	7e53      	ldrb	r3, [r2, #25]
 801b896:	f892 b018 	ldrb.w	fp, [r2, #24]
 801b89a:	455b      	cmp	r3, fp
 801b89c:	d923      	bls.n	801b8e6 <GUIPROP_DispChar+0xe2>
 801b89e:	2e02      	cmp	r6, #2
 801b8a0:	9306      	str	r3, [sp, #24]
 801b8a2:	d020      	beq.n	801b8e6 <GUIPROP_DispChar+0xe2>
 801b8a4:	7ed1      	ldrb	r1, [r2, #27]
 801b8a6:	9107      	str	r1, [sp, #28]
 801b8a8:	f7f4 fbce 	bl	8010048 <GUI_GetColor>
 801b8ac:	4606      	mov	r6, r0
 801b8ae:	f7f4 fbbf 	bl	8010030 <GUI_GetBkColor>
 801b8b2:	f7f4 fd2f 	bl	8010314 <GUI_SetColor>
 801b8b6:	f8d9 2000 	ldr.w	r2, [r9]
 801b8ba:	f818 c034 	ldrb.w	ip, [r8, r4, lsl #3]
 801b8be:	69d4      	ldr	r4, [r2, #28]
 801b8c0:	f9b2 0022 	ldrsh.w	r0, [r2, #34]	; 0x22
 801b8c4:	f894 e01b 	ldrb.w	lr, [r4, #27]
 801b8c8:	9907      	ldr	r1, [sp, #28]
 801b8ca:	f9b2 4024 	ldrsh.w	r4, [r2, #36]	; 0x24
 801b8ce:	9b06      	ldr	r3, [sp, #24]
 801b8d0:	fb0c 020e 	mla	r2, ip, lr, r0
 801b8d4:	fb01 4303 	mla	r3, r1, r3, r4
 801b8d8:	fb01 410b 	mla	r1, r1, fp, r4
 801b8dc:	f7f7 f852 	bl	8012984 <LCD_FillRect>
 801b8e0:	4630      	mov	r0, r6
 801b8e2:	f7f4 fd17 	bl	8010314 <GUI_SetColor>
 801b8e6:	4650      	mov	r0, sl
 801b8e8:	f7f6 ffbc 	bl	8012864 <LCD_SetDrawMode>
 801b8ec:	682b      	ldr	r3, [r5, #0]
 801b8ee:	7879      	ldrb	r1, [r7, #1]
 801b8f0:	69d8      	ldr	r0, [r3, #28]
 801b8f2:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 801b8f4:	7e80      	ldrb	r0, [r0, #26]
 801b8f6:	fb00 2201 	mla	r2, r0, r1, r2
 801b8fa:	845a      	strh	r2, [r3, #34]	; 0x22
 801b8fc:	b009      	add	sp, #36	; 0x24
 801b8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b902:	bf00      	nop
 801b904:	200000a8 	.word	0x200000a8

0801b908 <GUIPROP_GetCharDistX>:
 801b908:	4b11      	ldr	r3, [pc, #68]	; (801b950 <GUIPROP_GetCharDistX+0x48>)
 801b90a:	b470      	push	{r4, r5, r6}
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	69dd      	ldr	r5, [r3, #28]
 801b910:	69eb      	ldr	r3, [r5, #28]
 801b912:	b143      	cbz	r3, 801b926 <GUIPROP_GetCharDistX+0x1e>
 801b914:	881a      	ldrh	r2, [r3, #0]
 801b916:	4290      	cmp	r0, r2
 801b918:	d302      	bcc.n	801b920 <GUIPROP_GetCharDistX+0x18>
 801b91a:	885c      	ldrh	r4, [r3, #2]
 801b91c:	4284      	cmp	r4, r0
 801b91e:	d205      	bcs.n	801b92c <GUIPROP_GetCharDistX+0x24>
 801b920:	689b      	ldr	r3, [r3, #8]
 801b922:	2b00      	cmp	r3, #0
 801b924:	d1f6      	bne.n	801b914 <GUIPROP_GetCharDistX+0xc>
 801b926:	4618      	mov	r0, r3
 801b928:	bc70      	pop	{r4, r5, r6}
 801b92a:	4770      	bx	lr
 801b92c:	685e      	ldr	r6, [r3, #4]
 801b92e:	7eac      	ldrb	r4, [r5, #26]
 801b930:	1a82      	subs	r2, r0, r2
 801b932:	eb06 03c2 	add.w	r3, r6, r2, lsl #3
 801b936:	785b      	ldrb	r3, [r3, #1]
 801b938:	fb13 f004 	smulbb	r0, r3, r4
 801b93c:	2900      	cmp	r1, #0
 801b93e:	d0f3      	beq.n	801b928 <GUIPROP_GetCharDistX+0x20>
 801b940:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
 801b944:	fb14 f303 	smulbb	r3, r4, r3
 801b948:	600b      	str	r3, [r1, #0]
 801b94a:	bc70      	pop	{r4, r5, r6}
 801b94c:	4770      	bx	lr
 801b94e:	bf00      	nop
 801b950:	200000a8 	.word	0x200000a8

0801b954 <GUIPROP_GetFontInfo>:
 801b954:	2301      	movs	r3, #1
 801b956:	800b      	strh	r3, [r1, #0]
 801b958:	4770      	bx	lr
 801b95a:	bf00      	nop

0801b95c <GUIPROP_IsInFont>:
 801b95c:	69c0      	ldr	r0, [r0, #28]
 801b95e:	b150      	cbz	r0, 801b976 <GUIPROP_IsInFont+0x1a>
 801b960:	8803      	ldrh	r3, [r0, #0]
 801b962:	428b      	cmp	r3, r1
 801b964:	d802      	bhi.n	801b96c <GUIPROP_IsInFont+0x10>
 801b966:	8843      	ldrh	r3, [r0, #2]
 801b968:	428b      	cmp	r3, r1
 801b96a:	d203      	bcs.n	801b974 <GUIPROP_IsInFont+0x18>
 801b96c:	6880      	ldr	r0, [r0, #8]
 801b96e:	2800      	cmp	r0, #0
 801b970:	d1f6      	bne.n	801b960 <GUIPROP_IsInFont+0x4>
 801b972:	4770      	bx	lr
 801b974:	2001      	movs	r0, #1
 801b976:	4770      	bx	lr

0801b978 <GL_FillCircle>:
 801b978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b97c:	f8df b0dc 	ldr.w	fp, [pc, #220]	; 801ba5c <GL_FillCircle+0xe4>
 801b980:	4e35      	ldr	r6, [pc, #212]	; (801ba58 <GL_FillCircle+0xe0>)
 801b982:	f8db 4000 	ldr.w	r4, [fp]
 801b986:	4615      	mov	r5, r2
 801b988:	f240 22c3 	movw	r2, #707	; 0x2c3
 801b98c:	fb02 f205 	mul.w	r2, r2, r5
 801b990:	4603      	mov	r3, r0
 801b992:	b085      	sub	sp, #20
 801b994:	fb86 0902 	smull	r0, r9, r6, r2
 801b998:	6e60      	ldr	r0, [r4, #100]	; 0x64
 801b99a:	9302      	str	r3, [sp, #8]
 801b99c:	17d2      	asrs	r2, r2, #31
 801b99e:	ebc2 19a9 	rsb	r9, r2, r9, asr #6
 801b9a2:	18ef      	adds	r7, r5, r3
 801b9a4:	ebc5 0803 	rsb	r8, r5, r3
 801b9a8:	eb05 7ed5 	add.w	lr, r5, r5, lsr #31
 801b9ac:	fb05 f605 	mul.w	r6, r5, r5
 801b9b0:	6804      	ldr	r4, [r0, #0]
 801b9b2:	eb06 036e 	add.w	r3, r6, lr, asr #1
 801b9b6:	f109 0901 	add.w	r9, r9, #1
 801b9ba:	463a      	mov	r2, r7
 801b9bc:	4640      	mov	r0, r8
 801b9be:	9301      	str	r3, [sp, #4]
 801b9c0:	468a      	mov	sl, r1
 801b9c2:	47a0      	blx	r4
 801b9c4:	f1b9 0f00 	cmp.w	r9, #0
 801b9c8:	dd42      	ble.n	801ba50 <GL_FillCircle+0xd8>
 801b9ca:	9a02      	ldr	r2, [sp, #8]
 801b9cc:	2401      	movs	r4, #1
 801b9ce:	1913      	adds	r3, r2, r4
 801b9d0:	9302      	str	r3, [sp, #8]
 801b9d2:	1e53      	subs	r3, r2, #1
 801b9d4:	9303      	str	r3, [sp, #12]
 801b9d6:	4633      	mov	r3, r6
 801b9d8:	4616      	mov	r6, r2
 801b9da:	e01a      	b.n	801ba12 <GL_FillCircle+0x9a>
 801b9dc:	3d01      	subs	r5, #1
 801b9de:	19af      	adds	r7, r5, r6
 801b9e0:	ebc5 0806 	rsb	r8, r5, r6
 801b9e4:	f8db 3000 	ldr.w	r3, [fp]
 801b9e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801b9ea:	eb0a 0104 	add.w	r1, sl, r4
 801b9ee:	463a      	mov	r2, r7
 801b9f0:	681b      	ldr	r3, [r3, #0]
 801b9f2:	4640      	mov	r0, r8
 801b9f4:	4798      	blx	r3
 801b9f6:	f8db 3000 	ldr.w	r3, [fp]
 801b9fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801b9fc:	ebc4 010a 	rsb	r1, r4, sl
 801ba00:	463a      	mov	r2, r7
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	4640      	mov	r0, r8
 801ba06:	3401      	adds	r4, #1
 801ba08:	4798      	blx	r3
 801ba0a:	45a1      	cmp	r9, r4
 801ba0c:	db20      	blt.n	801ba50 <GL_FillCircle+0xd8>
 801ba0e:	fb05 f305 	mul.w	r3, r5, r5
 801ba12:	9a01      	ldr	r2, [sp, #4]
 801ba14:	fb04 3304 	mla	r3, r4, r4, r3
 801ba18:	429a      	cmp	r2, r3
 801ba1a:	dae3      	bge.n	801b9e4 <GL_FillCircle+0x6c>
 801ba1c:	45a9      	cmp	r9, r5
 801ba1e:	dadd      	bge.n	801b9dc <GL_FillCircle+0x64>
 801ba20:	9a02      	ldr	r2, [sp, #8]
 801ba22:	f8db 3000 	ldr.w	r3, [fp]
 801ba26:	1b17      	subs	r7, r2, r4
 801ba28:	9a03      	ldr	r2, [sp, #12]
 801ba2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ba2c:	eb02 0804 	add.w	r8, r2, r4
 801ba30:	4638      	mov	r0, r7
 801ba32:	4642      	mov	r2, r8
 801ba34:	eb0a 0105 	add.w	r1, sl, r5
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	4798      	blx	r3
 801ba3c:	f8db 3000 	ldr.w	r3, [fp]
 801ba40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ba42:	4642      	mov	r2, r8
 801ba44:	4638      	mov	r0, r7
 801ba46:	681b      	ldr	r3, [r3, #0]
 801ba48:	ebc5 010a 	rsb	r1, r5, sl
 801ba4c:	4798      	blx	r3
 801ba4e:	e7c5      	b.n	801b9dc <GL_FillCircle+0x64>
 801ba50:	b005      	add	sp, #20
 801ba52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba56:	bf00      	nop
 801ba58:	10624dd3 	.word	0x10624dd3
 801ba5c:	200000a8 	.word	0x200000a8

0801ba60 <GUI_CURSOR_SetPositionEx>:
 801ba60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba64:	4614      	mov	r4, r2
 801ba66:	4606      	mov	r6, r0
 801ba68:	4688      	mov	r8, r1
 801ba6a:	f7f5 fe07 	bl	801167c <GUI_Lock>
 801ba6e:	4620      	mov	r0, r4
 801ba70:	f7f5 fd78 	bl	8011564 <GUI_GetCursorLayer>
 801ba74:	b9e8      	cbnz	r0, 801bab2 <GUI_CURSOR_SetPositionEx+0x52>
 801ba76:	00a7      	lsls	r7, r4, #2
 801ba78:	4d1b      	ldr	r5, [pc, #108]	; (801bae8 <GUI_CURSOR_SetPositionEx+0x88>)
 801ba7a:	193b      	adds	r3, r7, r4
 801ba7c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801ba80:	68da      	ldr	r2, [r3, #12]
 801ba82:	42b2      	cmp	r2, r6
 801ba84:	d106      	bne.n	801ba94 <GUI_CURSOR_SetPositionEx+0x34>
 801ba86:	691b      	ldr	r3, [r3, #16]
 801ba88:	4543      	cmp	r3, r8
 801ba8a:	d103      	bne.n	801ba94 <GUI_CURSOR_SetPositionEx+0x34>
 801ba8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ba90:	f7f5 bdea 	b.w	8011668 <GUI_Unlock>
 801ba94:	193b      	adds	r3, r7, r4
 801ba96:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801ba9a:	6958      	ldr	r0, [r3, #20]
 801ba9c:	b9d0      	cbnz	r0, 801bad4 <GUI_CURSOR_SetPositionEx+0x74>
 801ba9e:	443c      	add	r4, r7
 801baa0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 801baa4:	60e6      	str	r6, [r4, #12]
 801baa6:	f8c4 8010 	str.w	r8, [r4, #16]
 801baaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801baae:	f7f5 bddb 	b.w	8011668 <GUI_Unlock>
 801bab2:	4b0d      	ldr	r3, [pc, #52]	; (801bae8 <GUI_CURSOR_SetPositionEx+0x88>)
 801bab4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801bab8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801babc:	6863      	ldr	r3, [r4, #4]
 801babe:	689a      	ldr	r2, [r3, #8]
 801bac0:	6859      	ldr	r1, [r3, #4]
 801bac2:	ebc2 0208 	rsb	r2, r2, r8
 801bac6:	1a71      	subs	r1, r6, r1
 801bac8:	f7f5 fd8a 	bl	80115e0 <GUI_SetLayerPosEx>
 801bacc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bad0:	f7f5 bdca 	b.w	8011668 <GUI_Unlock>
 801bad4:	685b      	ldr	r3, [r3, #4]
 801bad6:	689a      	ldr	r2, [r3, #8]
 801bad8:	6859      	ldr	r1, [r3, #4]
 801bada:	ebc2 0208 	rsb	r2, r2, r8
 801bade:	1a71      	subs	r1, r6, r1
 801bae0:	f000 f9c2 	bl	801be68 <GUI_SPRITE_SetPosition>
 801bae4:	e7db      	b.n	801ba9e <GUI_CURSOR_SetPositionEx+0x3e>
 801bae6:	bf00      	nop
 801bae8:	2002e3fc 	.word	0x2002e3fc

0801baec <_OnExit>:
 801baec:	4b03      	ldr	r3, [pc, #12]	; (801bafc <_OnExit+0x10>)
 801baee:	4904      	ldr	r1, [pc, #16]	; (801bb00 <_OnExit+0x14>)
 801baf0:	2200      	movs	r2, #0
 801baf2:	600b      	str	r3, [r1, #0]
 801baf4:	604b      	str	r3, [r1, #4]
 801baf6:	649a      	str	r2, [r3, #72]	; 0x48
 801baf8:	64da      	str	r2, [r3, #76]	; 0x4c
 801bafa:	4770      	bx	lr
 801bafc:	2002e448 	.word	0x2002e448
 801bb00:	200001e0 	.word	0x200001e0

0801bb04 <GUI_PID_GetState>:
 801bb04:	b470      	push	{r4, r5, r6}
 801bb06:	4d10      	ldr	r5, [pc, #64]	; (801bb48 <GUI_PID_GetState+0x44>)
 801bb08:	682b      	ldr	r3, [r5, #0]
 801bb0a:	686a      	ldr	r2, [r5, #4]
 801bb0c:	4293      	cmp	r3, r2
 801bb0e:	4604      	mov	r4, r0
 801bb10:	d00f      	beq.n	801bb32 <GUI_PID_GetState+0x2e>
 801bb12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801bb16:	4e0d      	ldr	r6, [pc, #52]	; (801bb4c <GUI_PID_GetState+0x48>)
 801bb18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801bb1c:	42b3      	cmp	r3, r6
 801bb1e:	bf14      	ite	ne
 801bb20:	330c      	addne	r3, #12
 801bb22:	3b3c      	subeq	r3, #60	; 0x3c
 801bb24:	602b      	str	r3, [r5, #0]
 801bb26:	7a20      	ldrb	r0, [r4, #8]
 801bb28:	3000      	adds	r0, #0
 801bb2a:	bf18      	it	ne
 801bb2c:	2001      	movne	r0, #1
 801bb2e:	bc70      	pop	{r4, r5, r6}
 801bb30:	4770      	bx	lr
 801bb32:	4a07      	ldr	r2, [pc, #28]	; (801bb50 <GUI_PID_GetState+0x4c>)
 801bb34:	4293      	cmp	r3, r2
 801bb36:	bf06      	itte	eq
 801bb38:	333c      	addeq	r3, #60	; 0x3c
 801bb3a:	e893 0007 	ldmiaeq.w	r3, {r0, r1, r2}
 801bb3e:	e913 0007 	ldmdbne	r3, {r0, r1, r2}
 801bb42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801bb46:	e7ee      	b.n	801bb26 <GUI_PID_GetState+0x22>
 801bb48:	200001e0 	.word	0x200001e0
 801bb4c:	2002e484 	.word	0x2002e484
 801bb50:	2002e448 	.word	0x2002e448

0801bb54 <GUI_PID_StoreState>:
 801bb54:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bb56:	4e37      	ldr	r6, [pc, #220]	; (801bc34 <GUI_PID_StoreState+0xe0>)
 801bb58:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801bb5a:	b085      	sub	sp, #20
 801bb5c:	4604      	mov	r4, r0
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d055      	beq.n	801bc0e <GUI_PID_StoreState+0xba>
 801bb62:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 801bb66:	4c34      	ldr	r4, [pc, #208]	; (801bc38 <GUI_PID_StoreState+0xe4>)
 801bb68:	4d34      	ldr	r5, [pc, #208]	; (801bc3c <GUI_PID_StoreState+0xe8>)
 801bb6a:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 801bb6c:	6025      	str	r5, [r4, #0]
 801bb6e:	ad01      	add	r5, sp, #4
 801bb70:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801bb74:	b10b      	cbz	r3, 801bb7a <GUI_PID_StoreState+0x26>
 801bb76:	4628      	mov	r0, r5
 801bb78:	4798      	blx	r3
 801bb7a:	4f31      	ldr	r7, [pc, #196]	; (801bc40 <GUI_PID_StoreState+0xec>)
 801bb7c:	f8d7 e000 	ldr.w	lr, [r7]
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	459e      	cmp	lr, r3
 801bb84:	d038      	beq.n	801bbf8 <GUI_PID_StoreState+0xa4>
 801bb86:	42b3      	cmp	r3, r6
 801bb88:	4c2a      	ldr	r4, [pc, #168]	; (801bc34 <GUI_PID_StoreState+0xe0>)
 801bb8a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 801bb8e:	d035      	beq.n	801bbfc <GUI_PID_StoreState+0xa8>
 801bb90:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 801bb94:	4291      	cmp	r1, r2
 801bb96:	d012      	beq.n	801bbbe <GUI_PID_StoreState+0x6a>
 801bb98:	343c      	adds	r4, #60	; 0x3c
 801bb9a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801bb9e:	42a3      	cmp	r3, r4
 801bba0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801bba4:	d01b      	beq.n	801bbde <GUI_PID_StoreState+0x8a>
 801bba6:	330c      	adds	r3, #12
 801bba8:	459e      	cmp	lr, r3
 801bbaa:	607b      	str	r3, [r7, #4]
 801bbac:	d01b      	beq.n	801bbe6 <GUI_PID_StoreState+0x92>
 801bbae:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 801bbb0:	b10b      	cbz	r3, 801bbb6 <GUI_PID_StoreState+0x62>
 801bbb2:	4628      	mov	r0, r5
 801bbb4:	4798      	blx	r3
 801bbb6:	f7f5 ffc7 	bl	8011b48 <GUI_SignalEvent>
 801bbba:	b005      	add	sp, #20
 801bbbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bbbe:	f1a3 010c 	sub.w	r1, r3, #12
 801bbc2:	458e      	cmp	lr, r1
 801bbc4:	d0e8      	beq.n	801bb98 <GUI_PID_StoreState+0x44>
 801bbc6:	42a1      	cmp	r1, r4
 801bbc8:	d02e      	beq.n	801bc28 <GUI_PID_StoreState+0xd4>
 801bbca:	343c      	adds	r4, #60	; 0x3c
 801bbcc:	390c      	subs	r1, #12
 801bbce:	7a09      	ldrb	r1, [r1, #8]
 801bbd0:	4291      	cmp	r1, r2
 801bbd2:	d1e2      	bne.n	801bb9a <GUI_PID_StoreState+0x46>
 801bbd4:	42b3      	cmp	r3, r6
 801bbd6:	bf14      	ite	ne
 801bbd8:	3b0c      	subne	r3, #12
 801bbda:	4623      	moveq	r3, r4
 801bbdc:	e7dd      	b.n	801bb9a <GUI_PID_StoreState+0x46>
 801bbde:	4b15      	ldr	r3, [pc, #84]	; (801bc34 <GUI_PID_StoreState+0xe0>)
 801bbe0:	607b      	str	r3, [r7, #4]
 801bbe2:	459e      	cmp	lr, r3
 801bbe4:	d1e3      	bne.n	801bbae <GUI_PID_StoreState+0x5a>
 801bbe6:	4b17      	ldr	r3, [pc, #92]	; (801bc44 <GUI_PID_StoreState+0xf0>)
 801bbe8:	459e      	cmp	lr, r3
 801bbea:	bf14      	ite	ne
 801bbec:	f10e 030c 	addne.w	r3, lr, #12
 801bbf0:	f1ae 033c 	subeq.w	r3, lr, #60	; 0x3c
 801bbf4:	603b      	str	r3, [r7, #0]
 801bbf6:	e7da      	b.n	801bbae <GUI_PID_StoreState+0x5a>
 801bbf8:	4c12      	ldr	r4, [pc, #72]	; (801bc44 <GUI_PID_StoreState+0xf0>)
 801bbfa:	e7ce      	b.n	801bb9a <GUI_PID_StoreState+0x46>
 801bbfc:	f896 1044 	ldrb.w	r1, [r6, #68]	; 0x44
 801bc00:	4291      	cmp	r1, r2
 801bc02:	d00b      	beq.n	801bc1c <GUI_PID_StoreState+0xc8>
 801bc04:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801bc08:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 801bc0c:	e7cb      	b.n	801bba6 <GUI_PID_StoreState+0x52>
 801bc0e:	4630      	mov	r0, r6
 801bc10:	4b0d      	ldr	r3, [pc, #52]	; (801bc48 <GUI_PID_StoreState+0xf4>)
 801bc12:	f840 3f50 	str.w	r3, [r0, #80]!
 801bc16:	f7f4 fd7d 	bl	8010714 <GUI__RegisterExit>
 801bc1a:	e7a2      	b.n	801bb62 <GUI_PID_StoreState+0xe>
 801bc1c:	f106 043c 	add.w	r4, r6, #60	; 0x3c
 801bc20:	45a6      	cmp	lr, r4
 801bc22:	d0ef      	beq.n	801bc04 <GUI_PID_StoreState+0xb0>
 801bc24:	4621      	mov	r1, r4
 801bc26:	e7d1      	b.n	801bbcc <GUI_PID_StoreState+0x78>
 801bc28:	f101 043c 	add.w	r4, r1, #60	; 0x3c
 801bc2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801bc30:	e7cd      	b.n	801bbce <GUI_PID_StoreState+0x7a>
 801bc32:	bf00      	nop
 801bc34:	2002e448 	.word	0x2002e448
 801bc38:	2003087c 	.word	0x2003087c
 801bc3c:	08019849 	.word	0x08019849
 801bc40:	200001e0 	.word	0x200001e0
 801bc44:	2002e484 	.word	0x2002e484
 801bc48:	0801baed 	.word	0x0801baed

0801bc4c <GUI_PID_IsEmpty>:
 801bc4c:	4b03      	ldr	r3, [pc, #12]	; (801bc5c <GUI_PID_IsEmpty+0x10>)
 801bc4e:	cb09      	ldmia	r3, {r0, r3}
 801bc50:	1ac0      	subs	r0, r0, r3
 801bc52:	fab0 f080 	clz	r0, r0
 801bc56:	0940      	lsrs	r0, r0, #5
 801bc58:	4770      	bx	lr
 801bc5a:	bf00      	nop
 801bc5c:	200001e0 	.word	0x200001e0

0801bc60 <_CreateBuffer.isra.4>:
 801bc60:	680b      	ldr	r3, [r1, #0]
 801bc62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc66:	4680      	mov	r8, r0
 801bc68:	8818      	ldrh	r0, [r3, #0]
 801bc6a:	300d      	adds	r0, #13
 801bc6c:	0080      	lsls	r0, r0, #2
 801bc6e:	460d      	mov	r5, r1
 801bc70:	4616      	mov	r6, r2
 801bc72:	f7f3 fe61 	bl	800f938 <GUI_ALLOC_AllocNoInit>
 801bc76:	2800      	cmp	r0, #0
 801bc78:	d03d      	beq.n	801bcf6 <_CreateBuffer.isra.4+0x96>
 801bc7a:	4607      	mov	r7, r0
 801bc7c:	f7f3 fe74 	bl	800f968 <GUI_ALLOC_LockH>
 801bc80:	f8d8 3000 	ldr.w	r3, [r8]
 801bc84:	4604      	mov	r4, r0
 801bc86:	6998      	ldr	r0, [r3, #24]
 801bc88:	f7f4 fd6a 	bl	8010760 <GUI_DEVICE__GetpDriver>
 801bc8c:	2800      	cmp	r0, #0
 801bc8e:	d032      	beq.n	801bcf6 <_CreateBuffer.isra.4+0x96>
 801bc90:	68c3      	ldr	r3, [r0, #12]
 801bc92:	2108      	movs	r1, #8
 801bc94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bc96:	4798      	blx	r3
 801bc98:	2802      	cmp	r0, #2
 801bc9a:	dc22      	bgt.n	801bce2 <_CreateBuffer.isra.4+0x82>
 801bc9c:	61a0      	str	r0, [r4, #24]
 801bc9e:	2201      	movs	r2, #1
 801bca0:	682b      	ldr	r3, [r5, #0]
 801bca2:	6122      	str	r2, [r4, #16]
 801bca4:	881b      	ldrh	r3, [r3, #0]
 801bca6:	61e3      	str	r3, [r4, #28]
 801bca8:	fb03 f302 	mul.w	r3, r3, r2
 801bcac:	6163      	str	r3, [r4, #20]
 801bcae:	f7f3 fe87 	bl	800f9c0 <GUI_ALLOC_GetMaxSize>
 801bcb2:	6963      	ldr	r3, [r4, #20]
 801bcb4:	60a7      	str	r7, [r4, #8]
 801bcb6:	4298      	cmp	r0, r3
 801bcb8:	bfb8      	it	lt
 801bcba:	6160      	strlt	r0, [r4, #20]
 801bcbc:	f104 0234 	add.w	r2, r4, #52	; 0x34
 801bcc0:	2300      	movs	r3, #0
 801bcc2:	2e01      	cmp	r6, #1
 801bcc4:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
 801bcc8:	6022      	str	r2, [r4, #0]
 801bcca:	60e3      	str	r3, [r4, #12]
 801bccc:	d018      	beq.n	801bd00 <_CreateBuffer.isra.4+0xa0>
 801bcce:	69e3      	ldr	r3, [r4, #28]
 801bcd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801bcd4:	3b01      	subs	r3, #1
 801bcd6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bcda:	6063      	str	r3, [r4, #4]
 801bcdc:	4620      	mov	r0, r4
 801bcde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bce2:	2804      	cmp	r0, #4
 801bce4:	dd0a      	ble.n	801bcfc <_CreateBuffer.isra.4+0x9c>
 801bce6:	2808      	cmp	r0, #8
 801bce8:	dd0e      	ble.n	801bd08 <_CreateBuffer.isra.4+0xa8>
 801bcea:	2810      	cmp	r0, #16
 801bcec:	dd0e      	ble.n	801bd0c <_CreateBuffer.isra.4+0xac>
 801bcee:	2320      	movs	r3, #32
 801bcf0:	61a3      	str	r3, [r4, #24]
 801bcf2:	2204      	movs	r2, #4
 801bcf4:	e7d4      	b.n	801bca0 <_CreateBuffer.isra.4+0x40>
 801bcf6:	2000      	movs	r0, #0
 801bcf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bcfc:	2004      	movs	r0, #4
 801bcfe:	e7cd      	b.n	801bc9c <_CreateBuffer.isra.4+0x3c>
 801bd00:	6062      	str	r2, [r4, #4]
 801bd02:	4620      	mov	r0, r4
 801bd04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd08:	2008      	movs	r0, #8
 801bd0a:	e7c7      	b.n	801bc9c <_CreateBuffer.isra.4+0x3c>
 801bd0c:	2310      	movs	r3, #16
 801bd0e:	61a3      	str	r3, [r4, #24]
 801bd10:	2202      	movs	r2, #2
 801bd12:	e7c5      	b.n	801bca0 <_CreateBuffer.isra.4+0x40>

0801bd14 <_SetBkIndexBuffered>:
 801bd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bd18:	b086      	sub	sp, #24
 801bd1a:	460e      	mov	r6, r1
 801bd1c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801bd1e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801bd20:	428d      	cmp	r5, r1
 801bd22:	4607      	mov	r7, r0
 801bd24:	4690      	mov	r8, r2
 801bd26:	d040      	beq.n	801bdaa <_SetBkIndexBuffered+0x96>
 801bd28:	68e1      	ldr	r1, [r4, #12]
 801bd2a:	b369      	cbz	r1, 801bd88 <_SetBkIndexBuffered+0x74>
 801bd2c:	f994 2030 	ldrsb.w	r2, [r4, #48]	; 0x30
 801bd30:	2a01      	cmp	r2, #1
 801bd32:	d04d      	beq.n	801bdd0 <_SetBkIndexBuffered+0xbc>
 801bd34:	69e2      	ldr	r2, [r4, #28]
 801bd36:	6825      	ldr	r5, [r4, #0]
 801bd38:	6860      	ldr	r0, [r4, #4]
 801bd3a:	f8d4 9020 	ldr.w	r9, [r4, #32]
 801bd3e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801bd42:	3a01      	subs	r2, #1
 801bd44:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 801bd48:	1d05      	adds	r5, r0, #4
 801bd4a:	6062      	str	r2, [r4, #4]
 801bd4c:	f8d3 a000 	ldr.w	sl, [r3]
 801bd50:	f1ba 0f00 	cmp.w	sl, #0
 801bd54:	d019      	beq.n	801bd8a <_SetBkIndexBuffered+0x76>
 801bd56:	69a2      	ldr	r2, [r4, #24]
 801bd58:	4628      	mov	r0, r5
 801bd5a:	f000 fca7 	bl	801c6ac <GUI__CompactPixelIndices>
 801bd5e:	f8d4 c014 	ldr.w	ip, [r4, #20]
 801bd62:	f8da e00c 	ldr.w	lr, [sl, #12]
 801bd66:	69a0      	ldr	r0, [r4, #24]
 801bd68:	68e3      	ldr	r3, [r4, #12]
 801bd6a:	9503      	str	r5, [sp, #12]
 801bd6c:	2200      	movs	r2, #0
 801bd6e:	9205      	str	r2, [sp, #20]
 801bd70:	9204      	str	r2, [sp, #16]
 801bd72:	2101      	movs	r1, #1
 801bd74:	f8cd c008 	str.w	ip, [sp, #8]
 801bd78:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801bd7a:	9001      	str	r0, [sp, #4]
 801bd7c:	9100      	str	r1, [sp, #0]
 801bd7e:	4650      	mov	r0, sl
 801bd80:	4649      	mov	r1, r9
 801bd82:	f8de 5004 	ldr.w	r5, [lr, #4]
 801bd86:	47a8      	blx	r5
 801bd88:	6862      	ldr	r2, [r4, #4]
 801bd8a:	f8c2 8000 	str.w	r8, [r2]
 801bd8e:	f994 3030 	ldrsb.w	r3, [r4, #48]	; 0x30
 801bd92:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801bd96:	6062      	str	r2, [r4, #4]
 801bd98:	2301      	movs	r3, #1
 801bd9a:	62a7      	str	r7, [r4, #40]	; 0x28
 801bd9c:	62e6      	str	r6, [r4, #44]	; 0x2c
 801bd9e:	60e3      	str	r3, [r4, #12]
 801bda0:	6227      	str	r7, [r4, #32]
 801bda2:	6266      	str	r6, [r4, #36]	; 0x24
 801bda4:	b006      	add	sp, #24
 801bda6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bdaa:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 801bdae:	6a22      	ldr	r2, [r4, #32]
 801bdb0:	440a      	add	r2, r1
 801bdb2:	4282      	cmp	r2, r0
 801bdb4:	d1b8      	bne.n	801bd28 <_SetBkIndexBuffered+0x14>
 801bdb6:	6863      	ldr	r3, [r4, #4]
 801bdb8:	68e2      	ldr	r2, [r4, #12]
 801bdba:	f8c3 8000 	str.w	r8, [r3]
 801bdbe:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 801bdc2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801bdc6:	6063      	str	r3, [r4, #4]
 801bdc8:	1c53      	adds	r3, r2, #1
 801bdca:	2a00      	cmp	r2, #0
 801bdcc:	d1e7      	bne.n	801bd9e <_SetBkIndexBuffered+0x8a>
 801bdce:	e7e4      	b.n	801bd9a <_SetBkIndexBuffered+0x86>
 801bdd0:	6825      	ldr	r5, [r4, #0]
 801bdd2:	f8d4 9028 	ldr.w	r9, [r4, #40]	; 0x28
 801bdd6:	462a      	mov	r2, r5
 801bdd8:	e7b7      	b.n	801bd4a <_SetBkIndexBuffered+0x36>
 801bdda:	bf00      	nop

0801bddc <_ReleaseBuffer.isra.7>:
 801bddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bdde:	68ca      	ldr	r2, [r1, #12]
 801bde0:	b089      	sub	sp, #36	; 0x24
 801bde2:	460c      	mov	r4, r1
 801bde4:	9107      	str	r1, [sp, #28]
 801bde6:	2a00      	cmp	r2, #0
 801bde8:	d02c      	beq.n	801be44 <_ReleaseBuffer.isra.7+0x68>
 801bdea:	f991 3030 	ldrsb.w	r3, [r1, #48]	; 0x30
 801bdee:	2b01      	cmp	r3, #1
 801bdf0:	d031      	beq.n	801be56 <_ReleaseBuffer.isra.7+0x7a>
 801bdf2:	69cb      	ldr	r3, [r1, #28]
 801bdf4:	6a27      	ldr	r7, [r4, #32]
 801bdf6:	c942      	ldmia	r1, {r1, r6}
 801bdf8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801bdfc:	3b01      	subs	r3, #1
 801bdfe:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801be02:	6063      	str	r3, [r4, #4]
 801be04:	6805      	ldr	r5, [r0, #0]
 801be06:	3604      	adds	r6, #4
 801be08:	2d00      	cmp	r5, #0
 801be0a:	d02b      	beq.n	801be64 <_ReleaseBuffer.isra.7+0x88>
 801be0c:	4611      	mov	r1, r2
 801be0e:	4630      	mov	r0, r6
 801be10:	69a2      	ldr	r2, [r4, #24]
 801be12:	f000 fc4b 	bl	801c6ac <GUI__CompactPixelIndices>
 801be16:	2100      	movs	r1, #0
 801be18:	68e3      	ldr	r3, [r4, #12]
 801be1a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 801be1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801be20:	9105      	str	r1, [sp, #20]
 801be22:	9104      	str	r1, [sp, #16]
 801be24:	9603      	str	r6, [sp, #12]
 801be26:	6961      	ldr	r1, [r4, #20]
 801be28:	9102      	str	r1, [sp, #8]
 801be2a:	69a1      	ldr	r1, [r4, #24]
 801be2c:	9101      	str	r1, [sp, #4]
 801be2e:	2101      	movs	r1, #1
 801be30:	9100      	str	r1, [sp, #0]
 801be32:	4628      	mov	r0, r5
 801be34:	4639      	mov	r1, r7
 801be36:	f8de 5004 	ldr.w	r5, [lr, #4]
 801be3a:	47a8      	blx	r5
 801be3c:	9b07      	ldr	r3, [sp, #28]
 801be3e:	2200      	movs	r2, #0
 801be40:	60e2      	str	r2, [r4, #12]
 801be42:	461c      	mov	r4, r3
 801be44:	68a4      	ldr	r4, [r4, #8]
 801be46:	a807      	add	r0, sp, #28
 801be48:	f7f3 fda0 	bl	800f98c <GUI_ALLOC_UnlockH>
 801be4c:	4620      	mov	r0, r4
 801be4e:	f7f3 ff2d 	bl	800fcac <GUI_ALLOC_Free>
 801be52:	b009      	add	sp, #36	; 0x24
 801be54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801be56:	680e      	ldr	r6, [r1, #0]
 801be58:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 801be5a:	4633      	mov	r3, r6
 801be5c:	6063      	str	r3, [r4, #4]
 801be5e:	6805      	ldr	r5, [r0, #0]
 801be60:	2d00      	cmp	r5, #0
 801be62:	d1d3      	bne.n	801be0c <_ReleaseBuffer.isra.7+0x30>
 801be64:	4623      	mov	r3, r4
 801be66:	e7ea      	b.n	801be3e <_ReleaseBuffer.isra.7+0x62>

0801be68 <GUI_SPRITE_SetPosition>:
 801be68:	b900      	cbnz	r0, 801be6c <GUI_SPRITE_SetPosition+0x4>
 801be6a:	4770      	bx	lr
 801be6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be70:	b0ab      	sub	sp, #172	; 0xac
 801be72:	4604      	mov	r4, r0
 801be74:	460d      	mov	r5, r1
 801be76:	4616      	mov	r6, r2
 801be78:	921d      	str	r2, [sp, #116]	; 0x74
 801be7a:	911c      	str	r1, [sp, #112]	; 0x70
 801be7c:	f7f5 fbfe 	bl	801167c <GUI_Lock>
 801be80:	4620      	mov	r0, r4
 801be82:	f7f3 fd71 	bl	800f968 <GUI_ALLOC_LockH>
 801be86:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801be8a:	6804      	ldr	r4, [r0, #0]
 801be8c:	9027      	str	r0, [sp, #156]	; 0x9c
 801be8e:	429d      	cmp	r5, r3
 801be90:	9412      	str	r4, [sp, #72]	; 0x48
 801be92:	f000 8183 	beq.w	801c19c <GUI_SPRITE_SetPosition+0x334>
 801be96:	2000      	movs	r0, #0
 801be98:	f001 f93e 	bl	801d118 <GUI_MEMDEV_Select>
 801be9c:	4b9f      	ldr	r3, [pc, #636]	; (801c11c <GUI_SPRITE_SetPosition+0x2b4>)
 801be9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bea0:	681b      	ldr	r3, [r3, #0]
 801bea2:	6992      	ldr	r2, [r2, #24]
 801bea4:	7c59      	ldrb	r1, [r3, #17]
 801bea6:	9020      	str	r0, [sp, #128]	; 0x80
 801bea8:	4608      	mov	r0, r1
 801beaa:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801beac:	9121      	str	r1, [sp, #132]	; 0x84
 801beae:	4282      	cmp	r2, r0
 801beb0:	bf18      	it	ne
 801beb2:	745a      	strbne	r2, [r3, #17]
 801beb4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801beb8:	9307      	str	r3, [sp, #28]
 801beba:	4618      	mov	r0, r3
 801bebc:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801bec0:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801bec4:	9219      	str	r2, [sp, #100]	; 0x64
 801bec6:	f9b5 200a 	ldrsh.w	r2, [r5, #10]
 801beca:	9313      	str	r3, [sp, #76]	; 0x4c
 801becc:	461c      	mov	r4, r3
 801bece:	1a09      	subs	r1, r1, r0
 801bed0:	1b12      	subs	r2, r2, r4
 801bed2:	460e      	mov	r6, r1
 801bed4:	910b      	str	r1, [sp, #44]	; 0x2c
 801bed6:	921a      	str	r2, [sp, #104]	; 0x68
 801bed8:	4621      	mov	r1, r4
 801beda:	4614      	mov	r4, r2
 801bedc:	4632      	mov	r2, r6
 801bede:	3201      	adds	r2, #1
 801bee0:	8a2b      	ldrh	r3, [r5, #16]
 801bee2:	921b      	str	r2, [sp, #108]	; 0x6c
 801bee4:	4622      	mov	r2, r4
 801bee6:	3201      	adds	r2, #1
 801bee8:	079b      	lsls	r3, r3, #30
 801beea:	921e      	str	r2, [sp, #120]	; 0x78
 801beec:	f140 8137 	bpl.w	801c15e <GUI_SPRITE_SetPosition+0x2f6>
 801bef0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801bef2:	696a      	ldr	r2, [r5, #20]
 801bef4:	9203      	str	r2, [sp, #12]
 801bef6:	1a1b      	subs	r3, r3, r0
 801bef8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801befa:	9314      	str	r3, [sp, #80]	; 0x50
 801befc:	2b00      	cmp	r3, #0
 801befe:	eba2 0401 	sub.w	r4, r2, r1
 801bf02:	f340 81bd 	ble.w	801c280 <GUI_SPRITE_SetPosition+0x418>
 801bf06:	9309      	str	r3, [sp, #36]	; 0x24
 801bf08:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 801bf0c:	2300      	movs	r3, #0
 801bf0e:	f04f 0a01 	mov.w	sl, #1
 801bf12:	9311      	str	r3, [sp, #68]	; 0x44
 801bf14:	2c00      	cmp	r4, #0
 801bf16:	f340 81be 	ble.w	801c296 <GUI_SPRITE_SetPosition+0x42e>
 801bf1a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bf1c:	9316      	str	r3, [sp, #88]	; 0x58
 801bf1e:	2301      	movs	r3, #1
 801bf20:	9417      	str	r4, [sp, #92]	; 0x5c
 801bf22:	9315      	str	r3, [sp, #84]	; 0x54
 801bf24:	f04f 0b00 	mov.w	fp, #0
 801bf28:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801bf2a:	4b7d      	ldr	r3, [pc, #500]	; (801c120 <GUI_SPRITE_SetPosition+0x2b8>)
 801bf2c:	69b0      	ldr	r0, [r6, #24]
 801bf2e:	561b      	ldrsb	r3, [r3, r0]
 801bf30:	2b01      	cmp	r3, #1
 801bf32:	f340 819f 	ble.w	801c274 <GUI_SPRITE_SetPosition+0x40c>
 801bf36:	2300      	movs	r3, #0
 801bf38:	f8ad 30a2 	strh.w	r3, [sp, #162]	; 0xa2
 801bf3c:	f8ad 30a0 	strh.w	r3, [sp, #160]	; 0xa0
 801bf40:	f7f7 f9d8 	bl	80132f4 <LCD_GetXSizeEx>
 801bf44:	1e43      	subs	r3, r0, #1
 801bf46:	69b0      	ldr	r0, [r6, #24]
 801bf48:	f8ad 30a4 	strh.w	r3, [sp, #164]	; 0xa4
 801bf4c:	f7f7 f9e2 	bl	8013314 <LCD_GetYSizeEx>
 801bf50:	3801      	subs	r0, #1
 801bf52:	f8ad 00a6 	strh.w	r0, [sp, #166]	; 0xa6
 801bf56:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801bf58:	4652      	mov	r2, sl
 801bf5a:	f100 0114 	add.w	r1, r0, #20
 801bf5e:	f7ff fe7f 	bl	801bc60 <_CreateBuffer.isra.4>
 801bf62:	9022      	str	r0, [sp, #136]	; 0x88
 801bf64:	2800      	cmp	r0, #0
 801bf66:	f000 80f9 	beq.w	801c15c <GUI_SPRITE_SetPosition+0x2f4>
 801bf6a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801bf6c:	4652      	mov	r2, sl
 801bf6e:	f100 0114 	add.w	r1, r0, #20
 801bf72:	f7ff fe75 	bl	801bc60 <_CreateBuffer.isra.4>
 801bf76:	9024      	str	r0, [sp, #144]	; 0x90
 801bf78:	2800      	cmp	r0, #0
 801bf7a:	f000 80ea 	beq.w	801c152 <GUI_SPRITE_SetPosition+0x2ea>
 801bf7e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801bf80:	68d8      	ldr	r0, [r3, #12]
 801bf82:	2800      	cmp	r0, #0
 801bf84:	f040 8197 	bne.w	801c2b6 <GUI_SPRITE_SetPosition+0x44e>
 801bf88:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801bf8a:	455a      	cmp	r2, fp
 801bf8c:	f000 80dd 	beq.w	801c14a <GUI_SPRITE_SetPosition+0x2e2>
 801bf90:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801bf92:	9911      	ldr	r1, [sp, #68]	; 0x44
 801bf94:	9023      	str	r0, [sp, #140]	; 0x8c
 801bf96:	009a      	lsls	r2, r3, #2
 801bf98:	fb0b 1303 	mla	r3, fp, r3, r1
 801bf9c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801bfa0:	930e      	str	r3, [sp, #56]	; 0x38
 801bfa2:	ebc4 030b 	rsb	r3, r4, fp
 801bfa6:	930c      	str	r3, [sp, #48]	; 0x30
 801bfa8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bfaa:	9915      	ldr	r1, [sp, #84]	; 0x54
 801bfac:	4423      	add	r3, r4
 801bfae:	9318      	str	r3, [sp, #96]	; 0x60
 801bfb0:	ea4f 038a 	mov.w	r3, sl, lsl #2
 801bfb4:	fb01 f202 	mul.w	r2, r1, r2
 801bfb8:	9304      	str	r3, [sp, #16]
 801bfba:	465b      	mov	r3, fp
 801bfbc:	921f      	str	r2, [sp, #124]	; 0x7c
 801bfbe:	46d3      	mov	fp, sl
 801bfc0:	46c8      	mov	r8, r9
 801bfc2:	469a      	mov	sl, r3
 801bfc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801bfc6:	4553      	cmp	r3, sl
 801bfc8:	f300 8109 	bgt.w	801c1de <GUI_SPRITE_SetPosition+0x376>
 801bfcc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801bfce:	4553      	cmp	r3, sl
 801bfd0:	bfb4      	ite	lt
 801bfd2:	2300      	movlt	r3, #0
 801bfd4:	2301      	movge	r3, #1
 801bfd6:	9310      	str	r3, [sp, #64]	; 0x40
 801bfd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bfda:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801bfdc:	4453      	add	r3, sl
 801bfde:	930f      	str	r3, [sp, #60]	; 0x3c
 801bfe0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801bfe2:	45a0      	cmp	r8, r4
 801bfe4:	4453      	add	r3, sl
 801bfe6:	9308      	str	r3, [sp, #32]
 801bfe8:	f000 80a0 	beq.w	801c12c <GUI_SPRITE_SetPosition+0x2c4>
 801bfec:	9814      	ldr	r0, [sp, #80]	; 0x50
 801bfee:	9b07      	ldr	r3, [sp, #28]
 801bff0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801bff2:	4403      	add	r3, r0
 801bff4:	ebc0 0904 	rsb	r9, r0, r4
 801bff8:	930a      	str	r3, [sp, #40]	; 0x28
 801bffa:	e05f      	b.n	801c0bc <GUI_SPRITE_SetPosition+0x254>
 801bffc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bffe:	42a3      	cmp	r3, r4
 801c000:	db6c      	blt.n	801c0dc <GUI_SPRITE_SetPosition+0x274>
 801c002:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c004:	2b00      	cmp	r3, #0
 801c006:	d069      	beq.n	801c0dc <GUI_SPRITE_SetPosition+0x274>
 801c008:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 801c00c:	42ba      	cmp	r2, r7
 801c00e:	f340 8277 	ble.w	801c500 <GUI_SPRITE_SetPosition+0x698>
 801c012:	2300      	movs	r3, #0
 801c014:	9305      	str	r3, [sp, #20]
 801c016:	f1b9 0f00 	cmp.w	r9, #0
 801c01a:	f2c0 80cc 	blt.w	801c1b6 <GUI_SPRITE_SetPosition+0x34e>
 801c01e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c020:	2b00      	cmp	r3, #0
 801c022:	f2c0 80c8 	blt.w	801c1b6 <GUI_SPRITE_SetPosition+0x34e>
 801c026:	461a      	mov	r2, r3
 801c028:	4649      	mov	r1, r9
 801c02a:	9803      	ldr	r0, [sp, #12]
 801c02c:	f7f4 f8b4 	bl	8010198 <GUI_GetBitmapPixelIndex>
 801c030:	0e03      	lsrs	r3, r0, #24
 801c032:	f040 80c0 	bne.w	801c1b6 <GUI_SPRITE_SetPosition+0x34e>
 801c036:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 801c03a:	9a06      	ldr	r2, [sp, #24]
 801c03c:	429a      	cmp	r2, r3
 801c03e:	db0f      	blt.n	801c060 <GUI_SPRITE_SetPosition+0x1f8>
 801c040:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 801c044:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801c046:	428a      	cmp	r2, r1
 801c048:	dc0a      	bgt.n	801c060 <GUI_SPRITE_SetPosition+0x1f8>
 801c04a:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 801c04e:	9906      	ldr	r1, [sp, #24]
 801c050:	428a      	cmp	r2, r1
 801c052:	db05      	blt.n	801c060 <GUI_SPRITE_SetPosition+0x1f8>
 801c054:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 801c058:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801c05a:	428a      	cmp	r2, r1
 801c05c:	f280 80a4 	bge.w	801c1a8 <GUI_SPRITE_SetPosition+0x340>
 801c060:	429f      	cmp	r7, r3
 801c062:	db23      	blt.n	801c0ac <GUI_SPRITE_SetPosition+0x244>
 801c064:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 801c068:	9808      	ldr	r0, [sp, #32]
 801c06a:	4283      	cmp	r3, r0
 801c06c:	dc1e      	bgt.n	801c0ac <GUI_SPRITE_SetPosition+0x244>
 801c06e:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 801c072:	42bb      	cmp	r3, r7
 801c074:	db1a      	blt.n	801c0ac <GUI_SPRITE_SetPosition+0x244>
 801c076:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 801c07a:	4283      	cmp	r3, r0
 801c07c:	db16      	blt.n	801c0ac <GUI_SPRITE_SetPosition+0x244>
 801c07e:	4630      	mov	r0, r6
 801c080:	4b28      	ldr	r3, [pc, #160]	; (801c124 <GUI_SPRITE_SetPosition+0x2bc>)
 801c082:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801c084:	681b      	ldr	r3, [r3, #0]
 801c086:	f046 417f 	orr.w	r1, r6, #4278190080	; 0xff000000
 801c08a:	22ff      	movs	r2, #255	; 0xff
 801c08c:	4798      	blx	r3
 801c08e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c090:	4b25      	ldr	r3, [pc, #148]	; (801c128 <GUI_SPRITE_SetPosition+0x2c0>)
 801c092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c096:	691b      	ldr	r3, [r3, #16]
 801c098:	681b      	ldr	r3, [r3, #0]
 801c09a:	4798      	blx	r3
 801c09c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c09e:	9300      	str	r3, [sp, #0]
 801c0a0:	4602      	mov	r2, r0
 801c0a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c0a4:	9908      	ldr	r1, [sp, #32]
 801c0a6:	4638      	mov	r0, r7
 801c0a8:	f7ff fe34 	bl	801bd14 <_SetBkIndexBuffered>
 801c0ac:	9b05      	ldr	r3, [sp, #20]
 801c0ae:	622b      	str	r3, [r5, #32]
 801c0b0:	445c      	add	r4, fp
 801c0b2:	9b04      	ldr	r3, [sp, #16]
 801c0b4:	45a0      	cmp	r8, r4
 801c0b6:	441d      	add	r5, r3
 801c0b8:	44d9      	add	r9, fp
 801c0ba:	d037      	beq.n	801c12c <GUI_SPRITE_SetPosition+0x2c4>
 801c0bc:	4652      	mov	r2, sl
 801c0be:	4621      	mov	r1, r4
 801c0c0:	9803      	ldr	r0, [sp, #12]
 801c0c2:	f7f4 f869 	bl	8010198 <GUI_GetBitmapPixelIndex>
 801c0c6:	0e03      	lsrs	r3, r0, #24
 801c0c8:	4606      	mov	r6, r0
 801c0ca:	d0f1      	beq.n	801c0b0 <GUI_SPRITE_SetPosition+0x248>
 801c0cc:	9b07      	ldr	r3, [sp, #28]
 801c0ce:	18e3      	adds	r3, r4, r3
 801c0d0:	9306      	str	r3, [sp, #24]
 801c0d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c0d4:	191f      	adds	r7, r3, r4
 801c0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c0d8:	42a3      	cmp	r3, r4
 801c0da:	dd8f      	ble.n	801bffc <GUI_SPRITE_SetPosition+0x194>
 801c0dc:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 801c0e0:	42bb      	cmp	r3, r7
 801c0e2:	461a      	mov	r2, r3
 801c0e4:	dc6a      	bgt.n	801c1bc <GUI_SPRITE_SetPosition+0x354>
 801c0e6:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 801c0ea:	9908      	ldr	r1, [sp, #32]
 801c0ec:	428b      	cmp	r3, r1
 801c0ee:	f04f 0300 	mov.w	r3, #0
 801c0f2:	dc71      	bgt.n	801c1d8 <GUI_SPRITE_SetPosition+0x370>
 801c0f4:	930d      	str	r3, [sp, #52]	; 0x34
 801c0f6:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 801c0fa:	42bb      	cmp	r3, r7
 801c0fc:	db04      	blt.n	801c108 <GUI_SPRITE_SetPosition+0x2a0>
 801c0fe:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 801c102:	9a08      	ldr	r2, [sp, #32]
 801c104:	4293      	cmp	r3, r2
 801c106:	da6d      	bge.n	801c1e4 <GUI_SPRITE_SetPosition+0x37c>
 801c108:	2300      	movs	r3, #0
 801c10a:	9305      	str	r3, [sp, #20]
 801c10c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d181      	bne.n	801c016 <GUI_SPRITE_SetPosition+0x1ae>
 801c112:	f9bd 20a0 	ldrsh.w	r2, [sp, #160]	; 0xa0
 801c116:	4613      	mov	r3, r2
 801c118:	e78f      	b.n	801c03a <GUI_SPRITE_SetPosition+0x1d2>
 801c11a:	bf00      	nop
 801c11c:	200000a8 	.word	0x200000a8
 801c120:	20030820 	.word	0x20030820
 801c124:	200000c0 	.word	0x200000c0
 801c128:	20030870 	.word	0x20030870
 801c12c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c12e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801c130:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c132:	440b      	add	r3, r1
 801c134:	930e      	str	r3, [sp, #56]	; 0x38
 801c136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c138:	4619      	mov	r1, r3
 801c13a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c13c:	4492      	add	sl, r2
 801c13e:	4411      	add	r1, r2
 801c140:	4553      	cmp	r3, sl
 801c142:	910c      	str	r1, [sp, #48]	; 0x30
 801c144:	f47f af3e 	bne.w	801bfc4 <GUI_SPRITE_SetPosition+0x15c>
 801c148:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c14a:	6818      	ldr	r0, [r3, #0]
 801c14c:	9924      	ldr	r1, [sp, #144]	; 0x90
 801c14e:	f7ff fe45 	bl	801bddc <_ReleaseBuffer.isra.7>
 801c152:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c154:	9922      	ldr	r1, [sp, #136]	; 0x88
 801c156:	6818      	ldr	r0, [r3, #0]
 801c158:	f7ff fe40 	bl	801bddc <_ReleaseBuffer.isra.7>
 801c15c:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 801c15e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c160:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801c162:	991d      	ldr	r1, [sp, #116]	; 0x74
 801c164:	80ab      	strh	r3, [r5, #4]
 801c166:	981e      	ldr	r0, [sp, #120]	; 0x78
 801c168:	80e9      	strh	r1, [r5, #6]
 801c16a:	4413      	add	r3, r2
 801c16c:	3b01      	subs	r3, #1
 801c16e:	1e4a      	subs	r2, r1, #1
 801c170:	4402      	add	r2, r0
 801c172:	812b      	strh	r3, [r5, #8]
 801c174:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c176:	816a      	strh	r2, [r5, #10]
 801c178:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801c17a:	4619      	mov	r1, r3
 801c17c:	4291      	cmp	r1, r2
 801c17e:	d002      	beq.n	801c186 <GUI_SPRITE_SetPosition+0x31e>
 801c180:	4ba6      	ldr	r3, [pc, #664]	; (801c41c <GUI_SPRITE_SetPosition+0x5b4>)
 801c182:	681b      	ldr	r3, [r3, #0]
 801c184:	745a      	strb	r2, [r3, #17]
 801c186:	9820      	ldr	r0, [sp, #128]	; 0x80
 801c188:	f000 ffc6 	bl	801d118 <GUI_MEMDEV_Select>
 801c18c:	a827      	add	r0, sp, #156	; 0x9c
 801c18e:	f7f3 fbfd 	bl	800f98c <GUI_ALLOC_UnlockH>
 801c192:	f7f5 fa69 	bl	8011668 <GUI_Unlock>
 801c196:	b02b      	add	sp, #172	; 0xac
 801c198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c19c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801c1a0:	429e      	cmp	r6, r3
 801c1a2:	f47f ae78 	bne.w	801be96 <GUI_SPRITE_SetPosition+0x2e>
 801c1a6:	e7f1      	b.n	801c18c <GUI_SPRITE_SetPosition+0x324>
 801c1a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c1aa:	6a2a      	ldr	r2, [r5, #32]
 801c1ac:	9806      	ldr	r0, [sp, #24]
 801c1ae:	9300      	str	r3, [sp, #0]
 801c1b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c1b2:	f7ff fdaf 	bl	801bd14 <_SetBkIndexBuffered>
 801c1b6:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 801c1ba:	e751      	b.n	801c060 <GUI_SPRITE_SetPosition+0x1f8>
 801c1bc:	9a06      	ldr	r2, [sp, #24]
 801c1be:	4293      	cmp	r3, r2
 801c1c0:	dc07      	bgt.n	801c1d2 <GUI_SPRITE_SetPosition+0x36a>
 801c1c2:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 801c1c6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801c1c8:	4291      	cmp	r1, r2
 801c1ca:	db02      	blt.n	801c1d2 <GUI_SPRITE_SetPosition+0x36a>
 801c1cc:	2200      	movs	r2, #0
 801c1ce:	9205      	str	r2, [sp, #20]
 801c1d0:	e73b      	b.n	801c04a <GUI_SPRITE_SetPosition+0x1e2>
 801c1d2:	2300      	movs	r3, #0
 801c1d4:	9305      	str	r3, [sp, #20]
 801c1d6:	e769      	b.n	801c0ac <GUI_SPRITE_SetPosition+0x244>
 801c1d8:	9305      	str	r3, [sp, #20]
 801c1da:	4613      	mov	r3, r2
 801c1dc:	e72d      	b.n	801c03a <GUI_SPRITE_SetPosition+0x1d2>
 801c1de:	2300      	movs	r3, #0
 801c1e0:	9310      	str	r3, [sp, #64]	; 0x40
 801c1e2:	e6f9      	b.n	801bfd8 <GUI_SPRITE_SetPosition+0x170>
 801c1e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c1e6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801c1ea:	42ba      	cmp	r2, r7
 801c1ec:	dc2d      	bgt.n	801c24a <GUI_SPRITE_SetPosition+0x3e2>
 801c1ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c1f2:	42b9      	cmp	r1, r7
 801c1f4:	db29      	blt.n	801c24a <GUI_SPRITE_SetPosition+0x3e2>
 801c1f6:	f9b3 e006 	ldrsh.w	lr, [r3, #6]
 801c1fa:	9808      	ldr	r0, [sp, #32]
 801c1fc:	4586      	cmp	lr, r0
 801c1fe:	dc24      	bgt.n	801c24a <GUI_SPRITE_SetPosition+0x3e2>
 801c200:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 801c204:	4281      	cmp	r1, r0
 801c206:	db20      	blt.n	801c24a <GUI_SPRITE_SetPosition+0x3e2>
 801c208:	6958      	ldr	r0, [r3, #20]
 801c20a:	9325      	str	r3, [sp, #148]	; 0x94
 801c20c:	b1e8      	cbz	r0, 801c24a <GUI_SPRITE_SetPosition+0x3e2>
 801c20e:	1abb      	subs	r3, r7, r2
 801c210:	4619      	mov	r1, r3
 801c212:	9305      	str	r3, [sp, #20]
 801c214:	9b08      	ldr	r3, [sp, #32]
 801c216:	ebce 0303 	rsb	r3, lr, r3
 801c21a:	461a      	mov	r2, r3
 801c21c:	9323      	str	r3, [sp, #140]	; 0x8c
 801c21e:	f7f3 ffbb 	bl	8010198 <GUI_GetBitmapPixelIndex>
 801c222:	0e03      	lsrs	r3, r0, #24
 801c224:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c226:	d010      	beq.n	801c24a <GUI_SPRITE_SetPosition+0x3e2>
 801c228:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801c22c:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801c230:	1a52      	subs	r2, r2, r1
 801c232:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801c234:	fb02 1201 	mla	r2, r2, r1, r1
 801c238:	9905      	ldr	r1, [sp, #20]
 801c23a:	440a      	add	r2, r1
 801c23c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801c240:	6a1b      	ldr	r3, [r3, #32]
 801c242:	9305      	str	r3, [sp, #20]
 801c244:	f043 407f 	orr.w	r0, r3, #4278190080	; 0xff000000
 801c248:	e00b      	b.n	801c262 <GUI_SPRITE_SetPosition+0x3fa>
 801c24a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c24c:	6818      	ldr	r0, [r3, #0]
 801c24e:	2800      	cmp	r0, #0
 801c250:	d02d      	beq.n	801c2ae <GUI_SPRITE_SetPosition+0x446>
 801c252:	68c3      	ldr	r3, [r0, #12]
 801c254:	9a08      	ldr	r2, [sp, #32]
 801c256:	695b      	ldr	r3, [r3, #20]
 801c258:	4639      	mov	r1, r7
 801c25a:	4798      	blx	r3
 801c25c:	9005      	str	r0, [sp, #20]
 801c25e:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 801c262:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801c264:	4b6e      	ldr	r3, [pc, #440]	; (801c420 <GUI_SPRITE_SetPosition+0x5b8>)
 801c266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c26a:	691b      	ldr	r3, [r3, #16]
 801c26c:	685b      	ldr	r3, [r3, #4]
 801c26e:	4798      	blx	r3
 801c270:	9023      	str	r0, [sp, #140]	; 0x8c
 801c272:	e74b      	b.n	801c10c <GUI_SPRITE_SetPosition+0x2a4>
 801c274:	68f3      	ldr	r3, [r6, #12]
 801c276:	4630      	mov	r0, r6
 801c278:	a928      	add	r1, sp, #160	; 0xa0
 801c27a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c27c:	4798      	blx	r3
 801c27e:	e66a      	b.n	801bf56 <GUI_SPRITE_SetPosition+0xee>
 801c280:	2200      	movs	r2, #0
 801c282:	9209      	str	r2, [sp, #36]	; 0x24
 801c284:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c286:	9611      	str	r6, [sp, #68]	; 0x44
 801c288:	4633      	mov	r3, r6
 801c28a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801c28e:	4413      	add	r3, r2
 801c290:	46ca      	mov	sl, r9
 801c292:	930b      	str	r3, [sp, #44]	; 0x2c
 801c294:	e63e      	b.n	801bf14 <GUI_SPRITE_SetPosition+0xac>
 801c296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c29a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801c29c:	9316      	str	r3, [sp, #88]	; 0x58
 801c29e:	9315      	str	r3, [sp, #84]	; 0x54
 801c2a0:	2300      	movs	r3, #0
 801c2a2:	9317      	str	r3, [sp, #92]	; 0x5c
 801c2a4:	4613      	mov	r3, r2
 801c2a6:	4423      	add	r3, r4
 801c2a8:	4693      	mov	fp, r2
 801c2aa:	931a      	str	r3, [sp, #104]	; 0x68
 801c2ac:	e63c      	b.n	801bf28 <GUI_SPRITE_SetPosition+0xc0>
 801c2ae:	9005      	str	r0, [sp, #20]
 801c2b0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801c2b4:	e7d5      	b.n	801c262 <GUI_SPRITE_SetPosition+0x3fa>
 801c2b6:	f7f3 fb57 	bl	800f968 <GUI_ALLOC_LockH>
 801c2ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c2bc:	9026      	str	r0, [sp, #152]	; 0x98
 801c2be:	455b      	cmp	r3, fp
 801c2c0:	f000 80a6 	beq.w	801c410 <GUI_SPRITE_SetPosition+0x5a8>
 801c2c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c2c6:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c2c8:	009a      	lsls	r2, r3, #2
 801c2ca:	fb0b 1303 	mla	r3, fp, r3, r1
 801c2ce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801c2d2:	930d      	str	r3, [sp, #52]	; 0x34
 801c2d4:	ebc4 030b 	rsb	r3, r4, fp
 801c2d8:	930c      	str	r3, [sp, #48]	; 0x30
 801c2da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c2dc:	9915      	ldr	r1, [sp, #84]	; 0x54
 801c2de:	4423      	add	r3, r4
 801c2e0:	fb01 f202 	mul.w	r2, r1, r2
 801c2e4:	9318      	str	r3, [sp, #96]	; 0x60
 801c2e6:	ea4f 038a 	mov.w	r3, sl, lsl #2
 801c2ea:	9210      	str	r2, [sp, #64]	; 0x40
 801c2ec:	9304      	str	r3, [sp, #16]
 801c2ee:	9a07      	ldr	r2, [sp, #28]
 801c2f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c2f2:	4413      	add	r3, r2
 801c2f4:	46c8      	mov	r8, r9
 801c2f6:	930a      	str	r3, [sp, #40]	; 0x28
 801c2f8:	46d9      	mov	r9, fp
 801c2fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801c2fc:	454b      	cmp	r3, r9
 801c2fe:	f300 80af 	bgt.w	801c460 <GUI_SPRITE_SetPosition+0x5f8>
 801c302:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801c304:	454b      	cmp	r3, r9
 801c306:	bfb4      	ite	lt
 801c308:	2300      	movlt	r3, #0
 801c30a:	2301      	movge	r3, #1
 801c30c:	930f      	str	r3, [sp, #60]	; 0x3c
 801c30e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c310:	444b      	add	r3, r9
 801c312:	930e      	str	r3, [sp, #56]	; 0x38
 801c314:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c316:	444b      	add	r3, r9
 801c318:	9308      	str	r3, [sp, #32]
 801c31a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c31c:	4598      	cmp	r8, r3
 801c31e:	d069      	beq.n	801c3f4 <GUI_SPRITE_SetPosition+0x58c>
 801c320:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c322:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801c324:	461c      	mov	r4, r3
 801c326:	ebc2 0b03 	rsb	fp, r2, r3
 801c32a:	464a      	mov	r2, r9
 801c32c:	4621      	mov	r1, r4
 801c32e:	9803      	ldr	r0, [sp, #12]
 801c330:	f7f3 ff32 	bl	8010198 <GUI_GetBitmapPixelIndex>
 801c334:	4606      	mov	r6, r0
 801c336:	2800      	cmp	r0, #0
 801c338:	d056      	beq.n	801c3e8 <GUI_SPRITE_SetPosition+0x580>
 801c33a:	9b07      	ldr	r3, [sp, #28]
 801c33c:	18e3      	adds	r3, r4, r3
 801c33e:	9306      	str	r3, [sp, #24]
 801c340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c342:	191f      	adds	r7, r3, r4
 801c344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c346:	42a3      	cmp	r3, r4
 801c348:	dc6c      	bgt.n	801c424 <GUI_SPRITE_SetPosition+0x5bc>
 801c34a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c34c:	42a3      	cmp	r3, r4
 801c34e:	db69      	blt.n	801c424 <GUI_SPRITE_SetPosition+0x5bc>
 801c350:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c352:	2b00      	cmp	r3, #0
 801c354:	d066      	beq.n	801c424 <GUI_SPRITE_SetPosition+0x5bc>
 801c356:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 801c35a:	42bb      	cmp	r3, r7
 801c35c:	bfd8      	it	le
 801c35e:	2301      	movle	r3, #1
 801c360:	f300 80cb 	bgt.w	801c4fa <GUI_SPRITE_SetPosition+0x692>
 801c364:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 801c368:	9908      	ldr	r1, [sp, #32]
 801c36a:	428a      	cmp	r2, r1
 801c36c:	dc07      	bgt.n	801c37e <GUI_SPRITE_SetPosition+0x516>
 801c36e:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 801c372:	42ba      	cmp	r2, r7
 801c374:	db03      	blt.n	801c37e <GUI_SPRITE_SetPosition+0x516>
 801c376:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 801c37a:	428a      	cmp	r2, r1
 801c37c:	da7d      	bge.n	801c47a <GUI_SPRITE_SetPosition+0x612>
 801c37e:	2200      	movs	r2, #0
 801c380:	9205      	str	r2, [sp, #20]
 801c382:	b163      	cbz	r3, 801c39e <GUI_SPRITE_SetPosition+0x536>
 801c384:	f1bb 0f00 	cmp.w	fp, #0
 801c388:	db62      	blt.n	801c450 <GUI_SPRITE_SetPosition+0x5e8>
 801c38a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	db5f      	blt.n	801c450 <GUI_SPRITE_SetPosition+0x5e8>
 801c390:	461a      	mov	r2, r3
 801c392:	4659      	mov	r1, fp
 801c394:	9803      	ldr	r0, [sp, #12]
 801c396:	f7f3 feff 	bl	8010198 <GUI_GetBitmapPixelIndex>
 801c39a:	2800      	cmp	r0, #0
 801c39c:	d158      	bne.n	801c450 <GUI_SPRITE_SetPosition+0x5e8>
 801c39e:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 801c3a2:	9a06      	ldr	r2, [sp, #24]
 801c3a4:	429a      	cmp	r2, r3
 801c3a6:	db0e      	blt.n	801c3c6 <GUI_SPRITE_SetPosition+0x55e>
 801c3a8:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 801c3ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c3ae:	428a      	cmp	r2, r1
 801c3b0:	dc09      	bgt.n	801c3c6 <GUI_SPRITE_SetPosition+0x55e>
 801c3b2:	f9bd 20a4 	ldrsh.w	r2, [sp, #164]	; 0xa4
 801c3b6:	9906      	ldr	r1, [sp, #24]
 801c3b8:	428a      	cmp	r2, r1
 801c3ba:	db04      	blt.n	801c3c6 <GUI_SPRITE_SetPosition+0x55e>
 801c3bc:	f9bd 20a6 	ldrsh.w	r2, [sp, #166]	; 0xa6
 801c3c0:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c3c2:	428a      	cmp	r2, r1
 801c3c4:	da3d      	bge.n	801c442 <GUI_SPRITE_SetPosition+0x5da>
 801c3c6:	429f      	cmp	r7, r3
 801c3c8:	db0c      	blt.n	801c3e4 <GUI_SPRITE_SetPosition+0x57c>
 801c3ca:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 801c3ce:	9908      	ldr	r1, [sp, #32]
 801c3d0:	428b      	cmp	r3, r1
 801c3d2:	dc07      	bgt.n	801c3e4 <GUI_SPRITE_SetPosition+0x57c>
 801c3d4:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	; 0xa4
 801c3d8:	42bb      	cmp	r3, r7
 801c3da:	db03      	blt.n	801c3e4 <GUI_SPRITE_SetPosition+0x57c>
 801c3dc:	f9bd 30a6 	ldrsh.w	r3, [sp, #166]	; 0xa6
 801c3e0:	428b      	cmp	r3, r1
 801c3e2:	da40      	bge.n	801c466 <GUI_SPRITE_SetPosition+0x5fe>
 801c3e4:	9b05      	ldr	r3, [sp, #20]
 801c3e6:	622b      	str	r3, [r5, #32]
 801c3e8:	4454      	add	r4, sl
 801c3ea:	9b04      	ldr	r3, [sp, #16]
 801c3ec:	4544      	cmp	r4, r8
 801c3ee:	441d      	add	r5, r3
 801c3f0:	44d3      	add	fp, sl
 801c3f2:	d19a      	bne.n	801c32a <GUI_SPRITE_SetPosition+0x4c2>
 801c3f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c3f6:	9910      	ldr	r1, [sp, #64]	; 0x40
 801c3f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c3fa:	440b      	add	r3, r1
 801c3fc:	930d      	str	r3, [sp, #52]	; 0x34
 801c3fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c400:	4619      	mov	r1, r3
 801c402:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801c404:	4491      	add	r9, r2
 801c406:	4411      	add	r1, r2
 801c408:	4599      	cmp	r9, r3
 801c40a:	910c      	str	r1, [sp, #48]	; 0x30
 801c40c:	f47f af75 	bne.w	801c2fa <GUI_SPRITE_SetPosition+0x492>
 801c410:	a826      	add	r0, sp, #152	; 0x98
 801c412:	f7f3 fabb 	bl	800f98c <GUI_ALLOC_UnlockH>
 801c416:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801c418:	e697      	b.n	801c14a <GUI_SPRITE_SetPosition+0x2e2>
 801c41a:	bf00      	nop
 801c41c:	200000a8 	.word	0x200000a8
 801c420:	20030870 	.word	0x20030870
 801c424:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 801c428:	42bb      	cmp	r3, r7
 801c42a:	dd17      	ble.n	801c45c <GUI_SPRITE_SetPosition+0x5f4>
 801c42c:	9a06      	ldr	r2, [sp, #24]
 801c42e:	4293      	cmp	r3, r2
 801c430:	dc11      	bgt.n	801c456 <GUI_SPRITE_SetPosition+0x5ee>
 801c432:	f9bd 20a2 	ldrsh.w	r2, [sp, #162]	; 0xa2
 801c436:	990e      	ldr	r1, [sp, #56]	; 0x38
 801c438:	4291      	cmp	r1, r2
 801c43a:	db0c      	blt.n	801c456 <GUI_SPRITE_SetPosition+0x5ee>
 801c43c:	2200      	movs	r2, #0
 801c43e:	9205      	str	r2, [sp, #20]
 801c440:	e7b7      	b.n	801c3b2 <GUI_SPRITE_SetPosition+0x54a>
 801c442:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801c444:	6a2a      	ldr	r2, [r5, #32]
 801c446:	9806      	ldr	r0, [sp, #24]
 801c448:	9300      	str	r3, [sp, #0]
 801c44a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c44c:	f7ff fc62 	bl	801bd14 <_SetBkIndexBuffered>
 801c450:	f9bd 30a0 	ldrsh.w	r3, [sp, #160]	; 0xa0
 801c454:	e7b7      	b.n	801c3c6 <GUI_SPRITE_SetPosition+0x55e>
 801c456:	2300      	movs	r3, #0
 801c458:	9305      	str	r3, [sp, #20]
 801c45a:	e7c3      	b.n	801c3e4 <GUI_SPRITE_SetPosition+0x57c>
 801c45c:	2300      	movs	r3, #0
 801c45e:	e781      	b.n	801c364 <GUI_SPRITE_SetPosition+0x4fc>
 801c460:	2300      	movs	r3, #0
 801c462:	930f      	str	r3, [sp, #60]	; 0x3c
 801c464:	e753      	b.n	801c30e <GUI_SPRITE_SetPosition+0x4a6>
 801c466:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c468:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 801c46c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c46e:	9300      	str	r3, [sp, #0]
 801c470:	4638      	mov	r0, r7
 801c472:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c474:	f7ff fc4e 	bl	801bd14 <_SetBkIndexBuffered>
 801c478:	e7b4      	b.n	801c3e4 <GUI_SPRITE_SetPosition+0x57c>
 801c47a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801c47c:	9205      	str	r2, [sp, #20]
 801c47e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 801c482:	42ba      	cmp	r2, r7
 801c484:	dc0d      	bgt.n	801c4a2 <GUI_SPRITE_SetPosition+0x63a>
 801c486:	9805      	ldr	r0, [sp, #20]
 801c488:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c48c:	42b9      	cmp	r1, r7
 801c48e:	db08      	blt.n	801c4a2 <GUI_SPRITE_SetPosition+0x63a>
 801c490:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801c494:	9908      	ldr	r1, [sp, #32]
 801c496:	458e      	cmp	lr, r1
 801c498:	dc03      	bgt.n	801c4a2 <GUI_SPRITE_SetPosition+0x63a>
 801c49a:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 801c49e:	4288      	cmp	r0, r1
 801c4a0:	da0d      	bge.n	801c4be <GUI_SPRITE_SetPosition+0x656>
 801c4a2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c4a4:	6810      	ldr	r0, [r2, #0]
 801c4a6:	2800      	cmp	r0, #0
 801c4a8:	f43f af69 	beq.w	801c37e <GUI_SPRITE_SetPosition+0x516>
 801c4ac:	68c2      	ldr	r2, [r0, #12]
 801c4ae:	931f      	str	r3, [sp, #124]	; 0x7c
 801c4b0:	4639      	mov	r1, r7
 801c4b2:	6953      	ldr	r3, [r2, #20]
 801c4b4:	9a08      	ldr	r2, [sp, #32]
 801c4b6:	4798      	blx	r3
 801c4b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c4ba:	9005      	str	r0, [sp, #20]
 801c4bc:	e761      	b.n	801c382 <GUI_SPRITE_SetPosition+0x51a>
 801c4be:	9325      	str	r3, [sp, #148]	; 0x94
 801c4c0:	1abb      	subs	r3, r7, r2
 801c4c2:	931f      	str	r3, [sp, #124]	; 0x7c
 801c4c4:	ebce 0201 	rsb	r2, lr, r1
 801c4c8:	4619      	mov	r1, r3
 801c4ca:	9b05      	ldr	r3, [sp, #20]
 801c4cc:	9223      	str	r2, [sp, #140]	; 0x8c
 801c4ce:	6958      	ldr	r0, [r3, #20]
 801c4d0:	f7f3 fe62 	bl	8010198 <GUI_GetBitmapPixelIndex>
 801c4d4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c4d6:	2800      	cmp	r0, #0
 801c4d8:	d0e3      	beq.n	801c4a2 <GUI_SPRITE_SetPosition+0x63a>
 801c4da:	9805      	ldr	r0, [sp, #20]
 801c4dc:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801c4e0:	f9b0 2008 	ldrsh.w	r2, [r0, #8]
 801c4e4:	1a52      	subs	r2, r2, r1
 801c4e6:	9923      	ldr	r1, [sp, #140]	; 0x8c
 801c4e8:	fb02 1201 	mla	r2, r2, r1, r1
 801c4ec:	991f      	ldr	r1, [sp, #124]	; 0x7c
 801c4ee:	440a      	add	r2, r1
 801c4f0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801c4f4:	6a12      	ldr	r2, [r2, #32]
 801c4f6:	9205      	str	r2, [sp, #20]
 801c4f8:	e743      	b.n	801c382 <GUI_SPRITE_SetPosition+0x51a>
 801c4fa:	2300      	movs	r3, #0
 801c4fc:	9305      	str	r3, [sp, #20]
 801c4fe:	e741      	b.n	801c384 <GUI_SPRITE_SetPosition+0x51c>
 801c500:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 801c504:	9a08      	ldr	r2, [sp, #32]
 801c506:	4293      	cmp	r3, r2
 801c508:	f73f ad83 	bgt.w	801c012 <GUI_SPRITE_SetPosition+0x1aa>
 801c50c:	2301      	movs	r3, #1
 801c50e:	930d      	str	r3, [sp, #52]	; 0x34
 801c510:	e5f1      	b.n	801c0f6 <GUI_SPRITE_SetPosition+0x28e>
 801c512:	bf00      	nop

0801c514 <GUI_TIMER__GetFirstTimer>:
 801c514:	b530      	push	{r4, r5, lr}
 801c516:	4b0a      	ldr	r3, [pc, #40]	; (801c540 <GUI_TIMER__GetFirstTimer+0x2c>)
 801c518:	681c      	ldr	r4, [r3, #0]
 801c51a:	2300      	movs	r3, #0
 801c51c:	b083      	sub	sp, #12
 801c51e:	6003      	str	r3, [r0, #0]
 801c520:	b15c      	cbz	r4, 801c53a <GUI_TIMER__GetFirstTimer+0x26>
 801c522:	4605      	mov	r5, r0
 801c524:	4620      	mov	r0, r4
 801c526:	f7f3 fa1f 	bl	800f968 <GUI_ALLOC_LockH>
 801c52a:	ab02      	add	r3, sp, #8
 801c52c:	6902      	ldr	r2, [r0, #16]
 801c52e:	f843 0d04 	str.w	r0, [r3, #-4]!
 801c532:	602a      	str	r2, [r5, #0]
 801c534:	4618      	mov	r0, r3
 801c536:	f7f3 fa29 	bl	800f98c <GUI_ALLOC_UnlockH>
 801c53a:	4620      	mov	r0, r4
 801c53c:	b003      	add	sp, #12
 801c53e:	bd30      	pop	{r4, r5, pc}
 801c540:	2002e4a0 	.word	0x2002e4a0

0801c544 <GUI_TIMER__GetNextTimerLin>:
 801c544:	b570      	push	{r4, r5, r6, lr}
 801c546:	2300      	movs	r3, #0
 801c548:	b082      	sub	sp, #8
 801c54a:	600b      	str	r3, [r1, #0]
 801c54c:	b918      	cbnz	r0, 801c556 <GUI_TIMER__GetNextTimerLin+0x12>
 801c54e:	4604      	mov	r4, r0
 801c550:	4620      	mov	r0, r4
 801c552:	b002      	add	sp, #8
 801c554:	bd70      	pop	{r4, r5, r6, pc}
 801c556:	460d      	mov	r5, r1
 801c558:	f7f3 fa06 	bl	800f968 <GUI_ALLOC_LockH>
 801c55c:	6884      	ldr	r4, [r0, #8]
 801c55e:	9001      	str	r0, [sp, #4]
 801c560:	ae01      	add	r6, sp, #4
 801c562:	b92c      	cbnz	r4, 801c570 <GUI_TIMER__GetNextTimerLin+0x2c>
 801c564:	4630      	mov	r0, r6
 801c566:	f7f3 fa11 	bl	800f98c <GUI_ALLOC_UnlockH>
 801c56a:	4620      	mov	r0, r4
 801c56c:	b002      	add	sp, #8
 801c56e:	bd70      	pop	{r4, r5, r6, pc}
 801c570:	4630      	mov	r0, r6
 801c572:	f7f3 fa0b 	bl	800f98c <GUI_ALLOC_UnlockH>
 801c576:	4620      	mov	r0, r4
 801c578:	f7f3 f9f6 	bl	800f968 <GUI_ALLOC_LockH>
 801c57c:	6903      	ldr	r3, [r0, #16]
 801c57e:	9001      	str	r0, [sp, #4]
 801c580:	602b      	str	r3, [r5, #0]
 801c582:	e7ef      	b.n	801c564 <GUI_TIMER__GetNextTimerLin+0x20>

0801c584 <GUI_TIMER_Delete>:
 801c584:	b900      	cbnz	r0, 801c588 <GUI_TIMER_Delete+0x4>
 801c586:	4770      	bx	lr
 801c588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c58c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 801c650 <GUI_TIMER_Delete+0xcc>
 801c590:	b082      	sub	sp, #8
 801c592:	4605      	mov	r5, r0
 801c594:	f7f5 f872 	bl	801167c <GUI_Lock>
 801c598:	f8d8 4000 	ldr.w	r4, [r8]
 801c59c:	42a5      	cmp	r5, r4
 801c59e:	d042      	beq.n	801c626 <GUI_TIMER_Delete+0xa2>
 801c5a0:	466e      	mov	r6, sp
 801c5a2:	b91c      	cbnz	r4, 801c5ac <GUI_TIMER_Delete+0x28>
 801c5a4:	e017      	b.n	801c5d6 <GUI_TIMER_Delete+0x52>
 801c5a6:	f7f3 f9f1 	bl	800f98c <GUI_ALLOC_UnlockH>
 801c5aa:	b1a4      	cbz	r4, 801c5d6 <GUI_TIMER_Delete+0x52>
 801c5ac:	4620      	mov	r0, r4
 801c5ae:	f7f3 f9db 	bl	800f968 <GUI_ALLOC_LockH>
 801c5b2:	6884      	ldr	r4, [r0, #8]
 801c5b4:	9000      	str	r0, [sp, #0]
 801c5b6:	42a5      	cmp	r5, r4
 801c5b8:	4630      	mov	r0, r6
 801c5ba:	d1f4      	bne.n	801c5a6 <GUI_TIMER_Delete+0x22>
 801c5bc:	4628      	mov	r0, r5
 801c5be:	f7f3 f9d3 	bl	800f968 <GUI_ALLOC_LockH>
 801c5c2:	9b00      	ldr	r3, [sp, #0]
 801c5c4:	6882      	ldr	r2, [r0, #8]
 801c5c6:	9001      	str	r0, [sp, #4]
 801c5c8:	a801      	add	r0, sp, #4
 801c5ca:	609a      	str	r2, [r3, #8]
 801c5cc:	f7f3 f9de 	bl	800f98c <GUI_ALLOC_UnlockH>
 801c5d0:	4630      	mov	r0, r6
 801c5d2:	f7f3 f9db 	bl	800f98c <GUI_ALLOC_UnlockH>
 801c5d6:	4628      	mov	r0, r5
 801c5d8:	f7f3 f9c6 	bl	800f968 <GUI_ALLOC_LockH>
 801c5dc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801c5e0:	9000      	str	r0, [sp, #0]
 801c5e2:	42a5      	cmp	r5, r4
 801c5e4:	4b1a      	ldr	r3, [pc, #104]	; (801c650 <GUI_TIMER_Delete+0xcc>)
 801c5e6:	d02c      	beq.n	801c642 <GUI_TIMER_Delete+0xbe>
 801c5e8:	af01      	add	r7, sp, #4
 801c5ea:	b91c      	cbnz	r4, 801c5f4 <GUI_TIMER_Delete+0x70>
 801c5ec:	e010      	b.n	801c610 <GUI_TIMER_Delete+0x8c>
 801c5ee:	f7f3 f9cd 	bl	800f98c <GUI_ALLOC_UnlockH>
 801c5f2:	b16c      	cbz	r4, 801c610 <GUI_TIMER_Delete+0x8c>
 801c5f4:	4620      	mov	r0, r4
 801c5f6:	f7f3 f9b7 	bl	800f968 <GUI_ALLOC_LockH>
 801c5fa:	6844      	ldr	r4, [r0, #4]
 801c5fc:	9001      	str	r0, [sp, #4]
 801c5fe:	42a5      	cmp	r5, r4
 801c600:	4603      	mov	r3, r0
 801c602:	4638      	mov	r0, r7
 801c604:	d1f3      	bne.n	801c5ee <GUI_TIMER_Delete+0x6a>
 801c606:	9a00      	ldr	r2, [sp, #0]
 801c608:	6852      	ldr	r2, [r2, #4]
 801c60a:	605a      	str	r2, [r3, #4]
 801c60c:	f7f3 f9be 	bl	800f98c <GUI_ALLOC_UnlockH>
 801c610:	4630      	mov	r0, r6
 801c612:	f7f3 f9bb 	bl	800f98c <GUI_ALLOC_UnlockH>
 801c616:	4628      	mov	r0, r5
 801c618:	f7f3 fb48 	bl	800fcac <GUI_ALLOC_Free>
 801c61c:	f7f5 f824 	bl	8011668 <GUI_Unlock>
 801c620:	b002      	add	sp, #8
 801c622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c626:	4628      	mov	r0, r5
 801c628:	f7f3 f99e 	bl	800f968 <GUI_ALLOC_LockH>
 801c62c:	af02      	add	r7, sp, #8
 801c62e:	6883      	ldr	r3, [r0, #8]
 801c630:	f847 0d04 	str.w	r0, [r7, #-4]!
 801c634:	4638      	mov	r0, r7
 801c636:	f8c8 3000 	str.w	r3, [r8]
 801c63a:	466e      	mov	r6, sp
 801c63c:	f7f3 f9a6 	bl	800f98c <GUI_ALLOC_UnlockH>
 801c640:	e7c9      	b.n	801c5d6 <GUI_TIMER_Delete+0x52>
 801c642:	6842      	ldr	r2, [r0, #4]
 801c644:	605a      	str	r2, [r3, #4]
 801c646:	4630      	mov	r0, r6
 801c648:	f7f3 f9a0 	bl	800f98c <GUI_ALLOC_UnlockH>
 801c64c:	e7e3      	b.n	801c616 <GUI_TIMER_Delete+0x92>
 801c64e:	bf00      	nop
 801c650:	2002e4a0 	.word	0x2002e4a0

0801c654 <GUI_TIMER_GetFlag>:
 801c654:	b530      	push	{r4, r5, lr}
 801c656:	b083      	sub	sp, #12
 801c658:	b918      	cbnz	r0, 801c662 <GUI_TIMER_GetFlag+0xe>
 801c65a:	2401      	movs	r4, #1
 801c65c:	4620      	mov	r0, r4
 801c65e:	b003      	add	sp, #12
 801c660:	bd30      	pop	{r4, r5, pc}
 801c662:	4604      	mov	r4, r0
 801c664:	460d      	mov	r5, r1
 801c666:	f7f5 f809 	bl	801167c <GUI_Lock>
 801c66a:	4620      	mov	r0, r4
 801c66c:	f7f3 f97c 	bl	800f968 <GUI_ALLOC_LockH>
 801c670:	ab02      	add	r3, sp, #8
 801c672:	8982      	ldrh	r2, [r0, #12]
 801c674:	f843 0d04 	str.w	r0, [r3, #-4]!
 801c678:	422a      	tst	r2, r5
 801c67a:	4618      	mov	r0, r3
 801c67c:	bf14      	ite	ne
 801c67e:	2401      	movne	r4, #1
 801c680:	2400      	moveq	r4, #0
 801c682:	f7f3 f983 	bl	800f98c <GUI_ALLOC_UnlockH>
 801c686:	f7f4 ffef 	bl	8011668 <GUI_Unlock>
 801c68a:	4620      	mov	r0, r4
 801c68c:	b003      	add	sp, #12
 801c68e:	bd30      	pop	{r4, r5, pc}

0801c690 <GUI_DispDecShift>:
 801c690:	b510      	push	{r4, lr}
 801c692:	b084      	sub	sp, #16
 801c694:	ab04      	add	r3, sp, #16
 801c696:	ac01      	add	r4, sp, #4
 801c698:	f843 4d10 	str.w	r4, [r3, #-16]!
 801c69c:	f7f3 fc0a 	bl	800feb4 <GUI_AddDecShift>
 801c6a0:	4620      	mov	r0, r4
 801c6a2:	f7f4 fb5f 	bl	8010d64 <GUI_DispString>
 801c6a6:	b004      	add	sp, #16
 801c6a8:	bd10      	pop	{r4, pc}
 801c6aa:	bf00      	nop

0801c6ac <GUI__CompactPixelIndices>:
 801c6ac:	2a08      	cmp	r2, #8
 801c6ae:	b410      	push	{r4}
 801c6b0:	dd0e      	ble.n	801c6d0 <GUI__CompactPixelIndices+0x24>
 801c6b2:	2a10      	cmp	r2, #16
 801c6b4:	dc1c      	bgt.n	801c6f0 <GUI__CompactPixelIndices+0x44>
 801c6b6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c6ba:	4603      	mov	r3, r0
 801c6bc:	f850 2b04 	ldr.w	r2, [r0], #4
 801c6c0:	f823 2b02 	strh.w	r2, [r3], #2
 801c6c4:	4299      	cmp	r1, r3
 801c6c6:	d1f9      	bne.n	801c6bc <GUI__CompactPixelIndices+0x10>
 801c6c8:	2001      	movs	r0, #1
 801c6ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c6ce:	4770      	bx	lr
 801c6d0:	2a02      	cmp	r2, #2
 801c6d2:	d011      	beq.n	801c6f8 <GUI__CompactPixelIndices+0x4c>
 801c6d4:	2a04      	cmp	r2, #4
 801c6d6:	f000 8090 	beq.w	801c7fa <GUI__CompactPixelIndices+0x14e>
 801c6da:	2a01      	cmp	r2, #1
 801c6dc:	d03c      	beq.n	801c758 <GUI__CompactPixelIndices+0xac>
 801c6de:	4401      	add	r1, r0
 801c6e0:	4603      	mov	r3, r0
 801c6e2:	f850 2b04 	ldr.w	r2, [r0], #4
 801c6e6:	f803 2b01 	strb.w	r2, [r3], #1
 801c6ea:	4299      	cmp	r1, r3
 801c6ec:	d1f9      	bne.n	801c6e2 <GUI__CompactPixelIndices+0x36>
 801c6ee:	e7eb      	b.n	801c6c8 <GUI__CompactPixelIndices+0x1c>
 801c6f0:	2000      	movs	r0, #0
 801c6f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c6f6:	4770      	bx	lr
 801c6f8:	f100 0210 	add.w	r2, r0, #16
 801c6fc:	f852 3c10 	ldr.w	r3, [r2, #-16]
 801c700:	2901      	cmp	r1, #1
 801c702:	ea4f 1383 	mov.w	r3, r3, lsl #6
 801c706:	b2db      	uxtb	r3, r3
 801c708:	d023      	beq.n	801c752 <GUI__CompactPixelIndices+0xa6>
 801c70a:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 801c70e:	0124      	lsls	r4, r4, #4
 801c710:	f004 0430 	and.w	r4, r4, #48	; 0x30
 801c714:	2902      	cmp	r1, #2
 801c716:	ea43 0304 	orr.w	r3, r3, r4
 801c71a:	d01a      	beq.n	801c752 <GUI__CompactPixelIndices+0xa6>
 801c71c:	f852 4c08 	ldr.w	r4, [r2, #-8]
 801c720:	00a4      	lsls	r4, r4, #2
 801c722:	f004 040c 	and.w	r4, r4, #12
 801c726:	2903      	cmp	r1, #3
 801c728:	ea43 0304 	orr.w	r3, r3, r4
 801c72c:	d011      	beq.n	801c752 <GUI__CompactPixelIndices+0xa6>
 801c72e:	f852 4c04 	ldr.w	r4, [r2, #-4]
 801c732:	f004 0403 	and.w	r4, r4, #3
 801c736:	4323      	orrs	r3, r4
 801c738:	3904      	subs	r1, #4
 801c73a:	f800 3b01 	strb.w	r3, [r0], #1
 801c73e:	f102 0210 	add.w	r2, r2, #16
 801c742:	d0c1      	beq.n	801c6c8 <GUI__CompactPixelIndices+0x1c>
 801c744:	f852 3c10 	ldr.w	r3, [r2, #-16]
 801c748:	2901      	cmp	r1, #1
 801c74a:	ea4f 1383 	mov.w	r3, r3, lsl #6
 801c74e:	b2db      	uxtb	r3, r3
 801c750:	d1db      	bne.n	801c70a <GUI__CompactPixelIndices+0x5e>
 801c752:	7003      	strb	r3, [r0, #0]
 801c754:	2001      	movs	r0, #1
 801c756:	e7b8      	b.n	801c6ca <GUI__CompactPixelIndices+0x1e>
 801c758:	f100 0220 	add.w	r2, r0, #32
 801c75c:	f852 3c20 	ldr.w	r3, [r2, #-32]
 801c760:	2901      	cmp	r1, #1
 801c762:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 801c766:	b2db      	uxtb	r3, r3
 801c768:	d0f3      	beq.n	801c752 <GUI__CompactPixelIndices+0xa6>
 801c76a:	f852 4c1c 	ldr.w	r4, [r2, #-28]
 801c76e:	01a4      	lsls	r4, r4, #6
 801c770:	f004 0440 	and.w	r4, r4, #64	; 0x40
 801c774:	2902      	cmp	r1, #2
 801c776:	ea43 0304 	orr.w	r3, r3, r4
 801c77a:	d0ea      	beq.n	801c752 <GUI__CompactPixelIndices+0xa6>
 801c77c:	f852 4c18 	ldr.w	r4, [r2, #-24]
 801c780:	0164      	lsls	r4, r4, #5
 801c782:	f004 0420 	and.w	r4, r4, #32
 801c786:	2903      	cmp	r1, #3
 801c788:	ea43 0304 	orr.w	r3, r3, r4
 801c78c:	d0e1      	beq.n	801c752 <GUI__CompactPixelIndices+0xa6>
 801c78e:	f852 4c14 	ldr.w	r4, [r2, #-20]
 801c792:	0124      	lsls	r4, r4, #4
 801c794:	f004 0410 	and.w	r4, r4, #16
 801c798:	2904      	cmp	r1, #4
 801c79a:	ea43 0304 	orr.w	r3, r3, r4
 801c79e:	d0d8      	beq.n	801c752 <GUI__CompactPixelIndices+0xa6>
 801c7a0:	f852 4c10 	ldr.w	r4, [r2, #-16]
 801c7a4:	00e4      	lsls	r4, r4, #3
 801c7a6:	f004 0408 	and.w	r4, r4, #8
 801c7aa:	2905      	cmp	r1, #5
 801c7ac:	ea43 0304 	orr.w	r3, r3, r4
 801c7b0:	d0cf      	beq.n	801c752 <GUI__CompactPixelIndices+0xa6>
 801c7b2:	f852 4c0c 	ldr.w	r4, [r2, #-12]
 801c7b6:	00a4      	lsls	r4, r4, #2
 801c7b8:	f004 0404 	and.w	r4, r4, #4
 801c7bc:	2906      	cmp	r1, #6
 801c7be:	ea43 0304 	orr.w	r3, r3, r4
 801c7c2:	d0c6      	beq.n	801c752 <GUI__CompactPixelIndices+0xa6>
 801c7c4:	f852 4c08 	ldr.w	r4, [r2, #-8]
 801c7c8:	0064      	lsls	r4, r4, #1
 801c7ca:	f004 0402 	and.w	r4, r4, #2
 801c7ce:	3907      	subs	r1, #7
 801c7d0:	ea43 0304 	orr.w	r3, r3, r4
 801c7d4:	f102 0220 	add.w	r2, r2, #32
 801c7d8:	d0bb      	beq.n	801c752 <GUI__CompactPixelIndices+0xa6>
 801c7da:	f852 4c24 	ldr.w	r4, [r2, #-36]
 801c7de:	f004 0401 	and.w	r4, r4, #1
 801c7e2:	4323      	orrs	r3, r4
 801c7e4:	f800 3b01 	strb.w	r3, [r0], #1
 801c7e8:	f852 3c20 	ldr.w	r3, [r2, #-32]
 801c7ec:	2901      	cmp	r1, #1
 801c7ee:	ea4f 13c3 	mov.w	r3, r3, lsl #7
 801c7f2:	b2db      	uxtb	r3, r3
 801c7f4:	d1b9      	bne.n	801c76a <GUI__CompactPixelIndices+0xbe>
 801c7f6:	7003      	strb	r3, [r0, #0]
 801c7f8:	e7ac      	b.n	801c754 <GUI__CompactPixelIndices+0xa8>
 801c7fa:	f100 0408 	add.w	r4, r0, #8
 801c7fe:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801c802:	2901      	cmp	r1, #1
 801c804:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801c808:	b2db      	uxtb	r3, r3
 801c80a:	d012      	beq.n	801c832 <GUI__CompactPixelIndices+0x186>
 801c80c:	f854 2c04 	ldr.w	r2, [r4, #-4]
 801c810:	f002 020f 	and.w	r2, r2, #15
 801c814:	4313      	orrs	r3, r2
 801c816:	3902      	subs	r1, #2
 801c818:	f800 3b01 	strb.w	r3, [r0], #1
 801c81c:	f104 0408 	add.w	r4, r4, #8
 801c820:	f43f af52 	beq.w	801c6c8 <GUI__CompactPixelIndices+0x1c>
 801c824:	f854 3c08 	ldr.w	r3, [r4, #-8]
 801c828:	2901      	cmp	r1, #1
 801c82a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801c82e:	b2db      	uxtb	r3, r3
 801c830:	d1ec      	bne.n	801c80c <GUI__CompactPixelIndices+0x160>
 801c832:	7003      	strb	r3, [r0, #0]
 801c834:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c838:	4608      	mov	r0, r1
 801c83a:	4770      	bx	lr

0801c83c <GUI__CompactPixelIndicesEx>:
 801c83c:	2a08      	cmp	r2, #8
 801c83e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c842:	460c      	mov	r4, r1
 801c844:	681f      	ldr	r7, [r3, #0]
 801c846:	4605      	mov	r5, r0
 801c848:	dd0c      	ble.n	801c864 <GUI__CompactPixelIndicesEx+0x28>
 801c84a:	2a10      	cmp	r2, #16
 801c84c:	dc21      	bgt.n	801c892 <GUI__CompactPixelIndicesEx+0x56>
 801c84e:	691e      	ldr	r6, [r3, #16]
 801c850:	2e00      	cmp	r6, #0
 801c852:	f000 8091 	beq.w	801c978 <GUI__CompactPixelIndicesEx+0x13c>
 801c856:	4622      	mov	r2, r4
 801c858:	4629      	mov	r1, r5
 801c85a:	2302      	movs	r3, #2
 801c85c:	47b0      	blx	r6
 801c85e:	2001      	movs	r0, #1
 801c860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c864:	3a01      	subs	r2, #1
 801c866:	2a07      	cmp	r2, #7
 801c868:	d810      	bhi.n	801c88c <GUI__CompactPixelIndicesEx+0x50>
 801c86a:	e8df f002 	tbb	[pc, r2]
 801c86e:	5104      	.short	0x5104
 801c870:	0f0f770f 	.word	0x0f0f770f
 801c874:	9a0f      	.short	0x9a0f
 801c876:	f100 0820 	add.w	r8, r0, #32
 801c87a:	f858 0c20 	ldr.w	r0, [r8, #-32]
 801c87e:	47b8      	blx	r7
 801c880:	2c01      	cmp	r4, #1
 801c882:	ea4f 10c0 	mov.w	r0, r0, lsl #7
 801c886:	b2c6      	uxtb	r6, r0
 801c888:	d106      	bne.n	801c898 <GUI__CompactPixelIndicesEx+0x5c>
 801c88a:	702e      	strb	r6, [r5, #0]
 801c88c:	2001      	movs	r0, #1
 801c88e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c892:	2000      	movs	r0, #0
 801c894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c898:	f858 0c1c 	ldr.w	r0, [r8, #-28]
 801c89c:	47b8      	blx	r7
 801c89e:	2c02      	cmp	r4, #2
 801c8a0:	ea46 1080 	orr.w	r0, r6, r0, lsl #6
 801c8a4:	b2c6      	uxtb	r6, r0
 801c8a6:	d0f0      	beq.n	801c88a <GUI__CompactPixelIndicesEx+0x4e>
 801c8a8:	f858 0c18 	ldr.w	r0, [r8, #-24]
 801c8ac:	47b8      	blx	r7
 801c8ae:	2c03      	cmp	r4, #3
 801c8b0:	ea46 1040 	orr.w	r0, r6, r0, lsl #5
 801c8b4:	b2c6      	uxtb	r6, r0
 801c8b6:	d0e8      	beq.n	801c88a <GUI__CompactPixelIndicesEx+0x4e>
 801c8b8:	f858 0c14 	ldr.w	r0, [r8, #-20]
 801c8bc:	47b8      	blx	r7
 801c8be:	2c04      	cmp	r4, #4
 801c8c0:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 801c8c4:	b2c6      	uxtb	r6, r0
 801c8c6:	d0e0      	beq.n	801c88a <GUI__CompactPixelIndicesEx+0x4e>
 801c8c8:	f858 0c10 	ldr.w	r0, [r8, #-16]
 801c8cc:	47b8      	blx	r7
 801c8ce:	2c05      	cmp	r4, #5
 801c8d0:	ea46 00c0 	orr.w	r0, r6, r0, lsl #3
 801c8d4:	b2c6      	uxtb	r6, r0
 801c8d6:	d0d8      	beq.n	801c88a <GUI__CompactPixelIndicesEx+0x4e>
 801c8d8:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 801c8dc:	47b8      	blx	r7
 801c8de:	2c06      	cmp	r4, #6
 801c8e0:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 801c8e4:	b2c6      	uxtb	r6, r0
 801c8e6:	d0d0      	beq.n	801c88a <GUI__CompactPixelIndicesEx+0x4e>
 801c8e8:	f858 0c08 	ldr.w	r0, [r8, #-8]
 801c8ec:	47b8      	blx	r7
 801c8ee:	2c07      	cmp	r4, #7
 801c8f0:	ea46 0040 	orr.w	r0, r6, r0, lsl #1
 801c8f4:	b2c6      	uxtb	r6, r0
 801c8f6:	d0c8      	beq.n	801c88a <GUI__CompactPixelIndicesEx+0x4e>
 801c8f8:	f858 0c04 	ldr.w	r0, [r8, #-4]
 801c8fc:	47b8      	blx	r7
 801c8fe:	3c08      	subs	r4, #8
 801c900:	ea40 0006 	orr.w	r0, r0, r6
 801c904:	f805 0b01 	strb.w	r0, [r5], #1
 801c908:	f108 0820 	add.w	r8, r8, #32
 801c90c:	d1b5      	bne.n	801c87a <GUI__CompactPixelIndicesEx+0x3e>
 801c90e:	e7bd      	b.n	801c88c <GUI__CompactPixelIndicesEx+0x50>
 801c910:	f100 0810 	add.w	r8, r0, #16
 801c914:	f858 0c10 	ldr.w	r0, [r8, #-16]
 801c918:	47b8      	blx	r7
 801c91a:	2c01      	cmp	r4, #1
 801c91c:	ea4f 1080 	mov.w	r0, r0, lsl #6
 801c920:	b2c6      	uxtb	r6, r0
 801c922:	d0b2      	beq.n	801c88a <GUI__CompactPixelIndicesEx+0x4e>
 801c924:	f858 0c0c 	ldr.w	r0, [r8, #-12]
 801c928:	47b8      	blx	r7
 801c92a:	2c02      	cmp	r4, #2
 801c92c:	ea46 1000 	orr.w	r0, r6, r0, lsl #4
 801c930:	b2c6      	uxtb	r6, r0
 801c932:	d0aa      	beq.n	801c88a <GUI__CompactPixelIndicesEx+0x4e>
 801c934:	f858 0c08 	ldr.w	r0, [r8, #-8]
 801c938:	47b8      	blx	r7
 801c93a:	2c03      	cmp	r4, #3
 801c93c:	ea46 0080 	orr.w	r0, r6, r0, lsl #2
 801c940:	b2c6      	uxtb	r6, r0
 801c942:	d0a2      	beq.n	801c88a <GUI__CompactPixelIndicesEx+0x4e>
 801c944:	f858 0c04 	ldr.w	r0, [r8, #-4]
 801c948:	47b8      	blx	r7
 801c94a:	3c04      	subs	r4, #4
 801c94c:	ea40 0006 	orr.w	r0, r0, r6
 801c950:	f805 0b01 	strb.w	r0, [r5], #1
 801c954:	f108 0810 	add.w	r8, r8, #16
 801c958:	d1dc      	bne.n	801c914 <GUI__CompactPixelIndicesEx+0xd8>
 801c95a:	e797      	b.n	801c88c <GUI__CompactPixelIndicesEx+0x50>
 801c95c:	f100 0808 	add.w	r8, r0, #8
 801c960:	f858 0c08 	ldr.w	r0, [r8, #-8]
 801c964:	47b8      	blx	r7
 801c966:	2c01      	cmp	r4, #1
 801c968:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801c96c:	b2c6      	uxtb	r6, r0
 801c96e:	d10c      	bne.n	801c98a <GUI__CompactPixelIndicesEx+0x14e>
 801c970:	702e      	strb	r6, [r5, #0]
 801c972:	4620      	mov	r0, r4
 801c974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c978:	1e86      	subs	r6, r0, #2
 801c97a:	f855 0b04 	ldr.w	r0, [r5], #4
 801c97e:	47b8      	blx	r7
 801c980:	3c01      	subs	r4, #1
 801c982:	f826 0f02 	strh.w	r0, [r6, #2]!
 801c986:	d1f8      	bne.n	801c97a <GUI__CompactPixelIndicesEx+0x13e>
 801c988:	e780      	b.n	801c88c <GUI__CompactPixelIndicesEx+0x50>
 801c98a:	f858 0c04 	ldr.w	r0, [r8, #-4]
 801c98e:	47b8      	blx	r7
 801c990:	3c02      	subs	r4, #2
 801c992:	ea40 0006 	orr.w	r0, r0, r6
 801c996:	f805 0b01 	strb.w	r0, [r5], #1
 801c99a:	f108 0808 	add.w	r8, r8, #8
 801c99e:	d1df      	bne.n	801c960 <GUI__CompactPixelIndicesEx+0x124>
 801c9a0:	e774      	b.n	801c88c <GUI__CompactPixelIndicesEx+0x50>
 801c9a2:	691e      	ldr	r6, [r3, #16]
 801c9a4:	b13e      	cbz	r6, 801c9b6 <GUI__CompactPixelIndicesEx+0x17a>
 801c9a6:	4628      	mov	r0, r5
 801c9a8:	4622      	mov	r2, r4
 801c9aa:	2301      	movs	r3, #1
 801c9ac:	4629      	mov	r1, r5
 801c9ae:	47b0      	blx	r6
 801c9b0:	2001      	movs	r0, #1
 801c9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c9b6:	1e6e      	subs	r6, r5, #1
 801c9b8:	f855 0b04 	ldr.w	r0, [r5], #4
 801c9bc:	47b8      	blx	r7
 801c9be:	3c01      	subs	r4, #1
 801c9c0:	f806 0f01 	strb.w	r0, [r6, #1]!
 801c9c4:	d1f8      	bne.n	801c9b8 <GUI__CompactPixelIndicesEx+0x17c>
 801c9c6:	e761      	b.n	801c88c <GUI__CompactPixelIndicesEx+0x50>

0801c9c8 <GUI__DrawTwinArc4>:
 801c9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9cc:	b093      	sub	sp, #76	; 0x4c
 801c9ce:	4680      	mov	r8, r0
 801c9d0:	460c      	mov	r4, r1
 801c9d2:	461e      	mov	r6, r3
 801c9d4:	4617      	mov	r7, r2
 801c9d6:	f7f4 fe51 	bl	801167c <GUI_Lock>
 801c9da:	4ba0      	ldr	r3, [pc, #640]	; (801cc5c <GUI__DrawTwinArc4+0x294>)
 801c9dc:	6819      	ldr	r1, [r3, #0]
 801c9de:	6ccd      	ldr	r5, [r1, #76]	; 0x4c
 801c9e0:	6d09      	ldr	r1, [r1, #80]	; 0x50
 801c9e2:	eb05 0308 	add.w	r3, r5, r8
 801c9e6:	19ea      	adds	r2, r5, r7
 801c9e8:	440c      	add	r4, r1
 801c9ea:	a810      	add	r0, sp, #64	; 0x40
 801c9ec:	4431      	add	r1, r6
 801c9ee:	9309      	str	r3, [sp, #36]	; 0x24
 801c9f0:	920a      	str	r2, [sp, #40]	; 0x28
 801c9f2:	910b      	str	r1, [sp, #44]	; 0x2c
 801c9f4:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801c9f8:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
 801c9fc:	f8ad 4042 	strh.w	r4, [sp, #66]	; 0x42
 801ca00:	f8ad 1046 	strh.w	r1, [sp, #70]	; 0x46
 801ca04:	f7fb fad6 	bl	8017fb4 <WM__InitIVRSearch>
 801ca08:	2800      	cmp	r0, #0
 801ca0a:	d07e      	beq.n	801cb0a <GUI__DrawTwinArc4+0x142>
 801ca0c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ca0e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801ca10:	3b01      	subs	r3, #1
 801ca12:	fb02 f202 	mul.w	r2, r2, r2
 801ca16:	9302      	str	r3, [sp, #8]
 801ca18:	fb03 f303 	mul.w	r3, r3, r3
 801ca1c:	9308      	str	r3, [sp, #32]
 801ca1e:	1ad3      	subs	r3, r2, r3
 801ca20:	930d      	str	r3, [sp, #52]	; 0x34
 801ca22:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ca24:	9203      	str	r2, [sp, #12]
 801ca26:	3b02      	subs	r3, #2
 801ca28:	9304      	str	r3, [sp, #16]
 801ca2a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ca2c:	3b03      	subs	r3, #3
 801ca2e:	930f      	str	r3, [sp, #60]	; 0x3c
 801ca30:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ca32:	18e3      	adds	r3, r4, r3
 801ca34:	930c      	str	r3, [sp, #48]	; 0x30
 801ca36:	1ca3      	adds	r3, r4, #2
 801ca38:	930e      	str	r3, [sp, #56]	; 0x38
 801ca3a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	dd60      	ble.n	801cb02 <GUI__DrawTwinArc4+0x13a>
 801ca40:	981d      	ldr	r0, [sp, #116]	; 0x74
 801ca42:	f7f3 fc67 	bl	8010314 <GUI_SetColor>
 801ca46:	9b02      	ldr	r3, [sp, #8]
 801ca48:	2b00      	cmp	r3, #0
 801ca4a:	d063      	beq.n	801cb14 <GUI__DrawTwinArc4+0x14c>
 801ca4c:	461d      	mov	r5, r3
 801ca4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ca50:	980d      	ldr	r0, [sp, #52]	; 0x34
 801ca52:	461a      	mov	r2, r3
 801ca54:	ebc5 0802 	rsb	r8, r5, r2
 801ca58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ca5a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801ca5c:	1a9b      	subs	r3, r3, r2
 801ca5e:	461a      	mov	r2, r3
 801ca60:	9306      	str	r3, [sp, #24]
 801ca62:	462b      	mov	r3, r5
 801ca64:	4413      	add	r3, r2
 801ca66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ca68:	9305      	str	r3, [sp, #20]
 801ca6a:	ebc8 0202 	rsb	r2, r8, r2
 801ca6e:	9207      	str	r2, [sp, #28]
 801ca70:	4699      	mov	r9, r3
 801ca72:	f7f5 fced 	bl	8012450 <GUI__sqrt32>
 801ca76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca78:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801ca7a:	eb03 0b02 	add.w	fp, r3, r2
 801ca7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ca80:	4606      	mov	r6, r0
 801ca82:	ebc2 0a03 	rsb	sl, r2, r3
 801ca86:	2000      	movs	r0, #0
 801ca88:	ebc0 070b 	rsb	r7, r0, fp
 801ca8c:	ebc6 030b 	rsb	r3, r6, fp
 801ca90:	3f01      	subs	r7, #1
 801ca92:	4450      	add	r0, sl
 801ca94:	1c44      	adds	r4, r0, #1
 801ca96:	4641      	mov	r1, r8
 801ca98:	4618      	mov	r0, r3
 801ca9a:	463a      	mov	r2, r7
 801ca9c:	4456      	add	r6, sl
 801ca9e:	9301      	str	r3, [sp, #4]
 801caa0:	f7f5 ff1c 	bl	80128dc <LCD_DrawHLine>
 801caa4:	4641      	mov	r1, r8
 801caa6:	4620      	mov	r0, r4
 801caa8:	4632      	mov	r2, r6
 801caaa:	f7f5 ff17 	bl	80128dc <LCD_DrawHLine>
 801caae:	9b01      	ldr	r3, [sp, #4]
 801cab0:	4649      	mov	r1, r9
 801cab2:	4618      	mov	r0, r3
 801cab4:	463a      	mov	r2, r7
 801cab6:	f7f5 ff11 	bl	80128dc <LCD_DrawHLine>
 801caba:	4620      	mov	r0, r4
 801cabc:	4632      	mov	r2, r6
 801cabe:	4649      	mov	r1, r9
 801cac0:	f7f5 ff0c 	bl	80128dc <LCD_DrawHLine>
 801cac4:	9a04      	ldr	r2, [sp, #16]
 801cac6:	9b06      	ldr	r3, [sp, #24]
 801cac8:	4413      	add	r3, r2
 801caca:	9a05      	ldr	r2, [sp, #20]
 801cacc:	1a9b      	subs	r3, r3, r2
 801cace:	3d01      	subs	r5, #1
 801cad0:	9a03      	ldr	r2, [sp, #12]
 801cad2:	4499      	add	r9, r3
 801cad4:	9b07      	ldr	r3, [sp, #28]
 801cad6:	fb05 f405 	mul.w	r4, r5, r5
 801cada:	eba2 0004 	sub.w	r0, r2, r4
 801cade:	4498      	add	r8, r3
 801cae0:	d018      	beq.n	801cb14 <GUI__DrawTwinArc4+0x14c>
 801cae2:	f7f5 fcb5 	bl	8012450 <GUI__sqrt32>
 801cae6:	9b02      	ldr	r3, [sp, #8]
 801cae8:	42ab      	cmp	r3, r5
 801caea:	4606      	mov	r6, r0
 801caec:	dc01      	bgt.n	801caf2 <GUI__DrawTwinArc4+0x12a>
 801caee:	2000      	movs	r0, #0
 801caf0:	e7ca      	b.n	801ca88 <GUI__DrawTwinArc4+0xc0>
 801caf2:	9b08      	ldr	r3, [sp, #32]
 801caf4:	1b18      	subs	r0, r3, r4
 801caf6:	f7f5 fcab 	bl	8012450 <GUI__sqrt32>
 801cafa:	e7c5      	b.n	801ca88 <GUI__DrawTwinArc4+0xc0>
 801cafc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cafe:	2b02      	cmp	r3, #2
 801cb00:	d15f      	bne.n	801cbc2 <GUI__DrawTwinArc4+0x1fa>
 801cb02:	f7fb f931 	bl	8017d68 <WM__GetNextIVR>
 801cb06:	2800      	cmp	r0, #0
 801cb08:	d197      	bne.n	801ca3a <GUI__DrawTwinArc4+0x72>
 801cb0a:	f7f4 fdad 	bl	8011668 <GUI_Unlock>
 801cb0e:	b013      	add	sp, #76	; 0x4c
 801cb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb14:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cb16:	2b01      	cmp	r3, #1
 801cb18:	d0f3      	beq.n	801cb02 <GUI__DrawTwinArc4+0x13a>
 801cb1a:	981e      	ldr	r0, [sp, #120]	; 0x78
 801cb1c:	f7f3 fbfa 	bl	8010314 <GUI_SetColor>
 801cb20:	9b04      	ldr	r3, [sp, #16]
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	d0ea      	beq.n	801cafc <GUI__DrawTwinArc4+0x134>
 801cb26:	461d      	mov	r5, r3
 801cb28:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cb2a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801cb2c:	f1c3 0802 	rsb	r8, r3, #2
 801cb30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cb32:	4498      	add	r8, r3
 801cb34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb36:	1a9b      	subs	r3, r3, r2
 801cb38:	9305      	str	r3, [sp, #20]
 801cb3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb3c:	eb03 0b02 	add.w	fp, r3, r2
 801cb40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb42:	ebc2 0a03 	rsb	sl, r2, r3
 801cb46:	e023      	b.n	801cb90 <GUI__DrawTwinArc4+0x1c8>
 801cb48:	4620      	mov	r0, r4
 801cb4a:	ebc4 070b 	rsb	r7, r4, fp
 801cb4e:	ebc0 030b 	rsb	r3, r0, fp
 801cb52:	3f01      	subs	r7, #1
 801cb54:	4454      	add	r4, sl
 801cb56:	eb00 060a 	add.w	r6, r0, sl
 801cb5a:	4641      	mov	r1, r8
 801cb5c:	4618      	mov	r0, r3
 801cb5e:	3401      	adds	r4, #1
 801cb60:	463a      	mov	r2, r7
 801cb62:	9301      	str	r3, [sp, #4]
 801cb64:	f7f5 feba 	bl	80128dc <LCD_DrawHLine>
 801cb68:	4641      	mov	r1, r8
 801cb6a:	4632      	mov	r2, r6
 801cb6c:	4620      	mov	r0, r4
 801cb6e:	f7f5 feb5 	bl	80128dc <LCD_DrawHLine>
 801cb72:	9b01      	ldr	r3, [sp, #4]
 801cb74:	463a      	mov	r2, r7
 801cb76:	4618      	mov	r0, r3
 801cb78:	4649      	mov	r1, r9
 801cb7a:	f7f5 feaf 	bl	80128dc <LCD_DrawHLine>
 801cb7e:	4632      	mov	r2, r6
 801cb80:	4649      	mov	r1, r9
 801cb82:	4620      	mov	r0, r4
 801cb84:	f7f5 feaa 	bl	80128dc <LCD_DrawHLine>
 801cb88:	3d01      	subs	r5, #1
 801cb8a:	f108 0801 	add.w	r8, r8, #1
 801cb8e:	d0b5      	beq.n	801cafc <GUI__DrawTwinArc4+0x134>
 801cb90:	9b03      	ldr	r3, [sp, #12]
 801cb92:	fb05 f605 	mul.w	r6, r5, r5
 801cb96:	1b98      	subs	r0, r3, r6
 801cb98:	9b05      	ldr	r3, [sp, #20]
 801cb9a:	eb05 0903 	add.w	r9, r5, r3
 801cb9e:	f7f5 fc57 	bl	8012450 <GUI__sqrt32>
 801cba2:	9b02      	ldr	r3, [sp, #8]
 801cba4:	42ab      	cmp	r3, r5
 801cba6:	f04f 0400 	mov.w	r4, #0
 801cbaa:	ddcd      	ble.n	801cb48 <GUI__DrawTwinArc4+0x180>
 801cbac:	9b08      	ldr	r3, [sp, #32]
 801cbae:	1b98      	subs	r0, r3, r6
 801cbb0:	f7f5 fc4e 	bl	8012450 <GUI__sqrt32>
 801cbb4:	9b04      	ldr	r3, [sp, #16]
 801cbb6:	42ab      	cmp	r3, r5
 801cbb8:	dd01      	ble.n	801cbbe <GUI__DrawTwinArc4+0x1f6>
 801cbba:	1e44      	subs	r4, r0, #1
 801cbbc:	e7c5      	b.n	801cb4a <GUI__DrawTwinArc4+0x182>
 801cbbe:	2400      	movs	r4, #0
 801cbc0:	e7c3      	b.n	801cb4a <GUI__DrawTwinArc4+0x182>
 801cbc2:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801cbc4:	f7f3 fba6 	bl	8010314 <GUI_SetColor>
 801cbc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d099      	beq.n	801cb02 <GUI__DrawTwinArc4+0x13a>
 801cbce:	991c      	ldr	r1, [sp, #112]	; 0x70
 801cbd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cbd2:	eb02 0b01 	add.w	fp, r2, r1
 801cbd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801cbd8:	1a52      	subs	r2, r2, r1
 801cbda:	9205      	str	r2, [sp, #20]
 801cbdc:	f102 0801 	add.w	r8, r2, #1
 801cbe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cbe2:	f1c1 0603 	rsb	r6, r1, #3
 801cbe6:	4416      	add	r6, r2
 801cbe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cbea:	1a52      	subs	r2, r2, r1
 801cbec:	f10b 39ff 	add.w	r9, fp, #4294967295	; 0xffffffff
 801cbf0:	9201      	str	r2, [sp, #4]
 801cbf2:	461c      	mov	r4, r3
 801cbf4:	e01d      	b.n	801cc32 <GUI__DrawTwinArc4+0x26a>
 801cbf6:	2500      	movs	r5, #0
 801cbf8:	9b05      	ldr	r3, [sp, #20]
 801cbfa:	ebc5 0a0b 	rsb	sl, r5, fp
 801cbfe:	4631      	mov	r1, r6
 801cc00:	441d      	add	r5, r3
 801cc02:	4650      	mov	r0, sl
 801cc04:	464a      	mov	r2, r9
 801cc06:	f7f5 fe69 	bl	80128dc <LCD_DrawHLine>
 801cc0a:	4631      	mov	r1, r6
 801cc0c:	462a      	mov	r2, r5
 801cc0e:	4640      	mov	r0, r8
 801cc10:	f7f5 fe64 	bl	80128dc <LCD_DrawHLine>
 801cc14:	464a      	mov	r2, r9
 801cc16:	4639      	mov	r1, r7
 801cc18:	4650      	mov	r0, sl
 801cc1a:	f7f5 fe5f 	bl	80128dc <LCD_DrawHLine>
 801cc1e:	462a      	mov	r2, r5
 801cc20:	4639      	mov	r1, r7
 801cc22:	4640      	mov	r0, r8
 801cc24:	f7f5 fe5a 	bl	80128dc <LCD_DrawHLine>
 801cc28:	3c01      	subs	r4, #1
 801cc2a:	f106 0601 	add.w	r6, r6, #1
 801cc2e:	f43f af68 	beq.w	801cb02 <GUI__DrawTwinArc4+0x13a>
 801cc32:	9b03      	ldr	r3, [sp, #12]
 801cc34:	fb04 f504 	mul.w	r5, r4, r4
 801cc38:	1b58      	subs	r0, r3, r5
 801cc3a:	9b01      	ldr	r3, [sp, #4]
 801cc3c:	191f      	adds	r7, r3, r4
 801cc3e:	f7f5 fc07 	bl	8012450 <GUI__sqrt32>
 801cc42:	9b02      	ldr	r3, [sp, #8]
 801cc44:	42a3      	cmp	r3, r4
 801cc46:	ddd6      	ble.n	801cbf6 <GUI__DrawTwinArc4+0x22e>
 801cc48:	9b08      	ldr	r3, [sp, #32]
 801cc4a:	1b58      	subs	r0, r3, r5
 801cc4c:	f7f5 fc00 	bl	8012450 <GUI__sqrt32>
 801cc50:	9b04      	ldr	r3, [sp, #16]
 801cc52:	42a3      	cmp	r3, r4
 801cc54:	ddcf      	ble.n	801cbf6 <GUI__DrawTwinArc4+0x22e>
 801cc56:	1e45      	subs	r5, r0, #1
 801cc58:	e7ce      	b.n	801cbf8 <GUI__DrawTwinArc4+0x230>
 801cc5a:	bf00      	nop
 801cc5c:	200000a8 	.word	0x200000a8

0801cc60 <GUI__ManageCache>:
 801cc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cc64:	4b39      	ldr	r3, [pc, #228]	; (801cd4c <GUI__ManageCache+0xec>)
 801cc66:	681b      	ldr	r3, [r3, #0]
 801cc68:	7c5d      	ldrb	r5, [r3, #17]
 801cc6a:	2d01      	cmp	r5, #1
 801cc6c:	b082      	sub	sp, #8
 801cc6e:	dd03      	ble.n	801cc78 <GUI__ManageCache+0x18>
 801cc70:	2001      	movs	r0, #1
 801cc72:	b002      	add	sp, #8
 801cc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cc78:	4e35      	ldr	r6, [pc, #212]	; (801cd50 <GUI__ManageCache+0xf0>)
 801cc7a:	6873      	ldr	r3, [r6, #4]
 801cc7c:	4604      	mov	r4, r0
 801cc7e:	b113      	cbz	r3, 801cc86 <GUI__ManageCache+0x26>
 801cc80:	4601      	mov	r1, r0
 801cc82:	4628      	mov	r0, r5
 801cc84:	4798      	blx	r3
 801cc86:	2c01      	cmp	r4, #1
 801cc88:	d027      	beq.n	801ccda <GUI__ManageCache+0x7a>
 801cc8a:	2c02      	cmp	r4, #2
 801cc8c:	d00f      	beq.n	801ccae <GUI__ManageCache+0x4e>
 801cc8e:	2c00      	cmp	r4, #0
 801cc90:	d1ee      	bne.n	801cc70 <GUI__ManageCache+0x10>
 801cc92:	00ac      	lsls	r4, r5, #2
 801cc94:	1937      	adds	r7, r6, r4
 801cc96:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801cd50 <GUI__ManageCache+0xf0>
 801cc9a:	68bb      	ldr	r3, [r7, #8]
 801cc9c:	2b01      	cmp	r3, #1
 801cc9e:	d03a      	beq.n	801cd16 <GUI__ManageCache+0xb6>
 801cca0:	2001      	movs	r0, #1
 801cca2:	4426      	add	r6, r4
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	bf18      	it	ne
 801cca8:	3b01      	subne	r3, #1
 801ccaa:	60b3      	str	r3, [r6, #8]
 801ccac:	e7e1      	b.n	801cc72 <GUI__ManageCache+0x12>
 801ccae:	4628      	mov	r0, r5
 801ccb0:	f7f3 fd56 	bl	8010760 <GUI_DEVICE__GetpDriver>
 801ccb4:	9001      	str	r0, [sp, #4]
 801ccb6:	2800      	cmp	r0, #0
 801ccb8:	d0da      	beq.n	801cc70 <GUI__ManageCache+0x10>
 801ccba:	68c3      	ldr	r3, [r0, #12]
 801ccbc:	210d      	movs	r1, #13
 801ccbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ccc0:	a801      	add	r0, sp, #4
 801ccc2:	4798      	blx	r3
 801ccc4:	4604      	mov	r4, r0
 801ccc6:	2800      	cmp	r0, #0
 801ccc8:	d0d2      	beq.n	801cc70 <GUI__ManageCache+0x10>
 801ccca:	6833      	ldr	r3, [r6, #0]
 801cccc:	b103      	cbz	r3, 801ccd0 <GUI__ManageCache+0x70>
 801ccce:	4798      	blx	r3
 801ccd0:	2102      	movs	r1, #2
 801ccd2:	9801      	ldr	r0, [sp, #4]
 801ccd4:	47a0      	blx	r4
 801ccd6:	2000      	movs	r0, #0
 801ccd8:	e7cb      	b.n	801cc72 <GUI__ManageCache+0x12>
 801ccda:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 801ccde:	68b7      	ldr	r7, [r6, #8]
 801cce0:	b11f      	cbz	r7, 801ccea <GUI__ManageCache+0x8a>
 801cce2:	1c78      	adds	r0, r7, #1
 801cce4:	60b0      	str	r0, [r6, #8]
 801cce6:	4620      	mov	r0, r4
 801cce8:	e7c3      	b.n	801cc72 <GUI__ManageCache+0x12>
 801ccea:	4628      	mov	r0, r5
 801ccec:	f7f3 fd38 	bl	8010760 <GUI_DEVICE__GetpDriver>
 801ccf0:	9001      	str	r0, [sp, #4]
 801ccf2:	2800      	cmp	r0, #0
 801ccf4:	d0bc      	beq.n	801cc70 <GUI__ManageCache+0x10>
 801ccf6:	68c3      	ldr	r3, [r0, #12]
 801ccf8:	210d      	movs	r1, #13
 801ccfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ccfc:	a801      	add	r0, sp, #4
 801ccfe:	4798      	blx	r3
 801cd00:	4603      	mov	r3, r0
 801cd02:	2800      	cmp	r0, #0
 801cd04:	d0b4      	beq.n	801cc70 <GUI__ManageCache+0x10>
 801cd06:	4621      	mov	r1, r4
 801cd08:	9801      	ldr	r0, [sp, #4]
 801cd0a:	4798      	blx	r3
 801cd0c:	68b3      	ldr	r3, [r6, #8]
 801cd0e:	3301      	adds	r3, #1
 801cd10:	4638      	mov	r0, r7
 801cd12:	60b3      	str	r3, [r6, #8]
 801cd14:	e7ad      	b.n	801cc72 <GUI__ManageCache+0x12>
 801cd16:	4628      	mov	r0, r5
 801cd18:	f7f3 fd22 	bl	8010760 <GUI_DEVICE__GetpDriver>
 801cd1c:	9001      	str	r0, [sp, #4]
 801cd1e:	b188      	cbz	r0, 801cd44 <GUI__ManageCache+0xe4>
 801cd20:	68c3      	ldr	r3, [r0, #12]
 801cd22:	210d      	movs	r1, #13
 801cd24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cd26:	a801      	add	r0, sp, #4
 801cd28:	4798      	blx	r3
 801cd2a:	4605      	mov	r5, r0
 801cd2c:	b150      	cbz	r0, 801cd44 <GUI__ManageCache+0xe4>
 801cd2e:	f8d8 3000 	ldr.w	r3, [r8]
 801cd32:	b103      	cbz	r3, 801cd36 <GUI__ManageCache+0xd6>
 801cd34:	4798      	blx	r3
 801cd36:	2100      	movs	r1, #0
 801cd38:	9801      	ldr	r0, [sp, #4]
 801cd3a:	47a8      	blx	r5
 801cd3c:	1933      	adds	r3, r6, r4
 801cd3e:	2000      	movs	r0, #0
 801cd40:	689b      	ldr	r3, [r3, #8]
 801cd42:	e7ae      	b.n	801cca2 <GUI__ManageCache+0x42>
 801cd44:	68bb      	ldr	r3, [r7, #8]
 801cd46:	2001      	movs	r0, #1
 801cd48:	e7ab      	b.n	801cca2 <GUI__ManageCache+0x42>
 801cd4a:	bf00      	nop
 801cd4c:	200000a8 	.word	0x200000a8
 801cd50:	2002e4b4 	.word	0x2002e4b4

0801cd54 <LCD_SetClipRectEx>:
 801cd54:	b530      	push	{r4, r5, lr}
 801cd56:	4c0a      	ldr	r4, [pc, #40]	; (801cd80 <LCD_SetClipRectEx+0x2c>)
 801cd58:	4b0a      	ldr	r3, [pc, #40]	; (801cd84 <LCD_SetClipRectEx+0x30>)
 801cd5a:	6822      	ldr	r2, [r4, #0]
 801cd5c:	7c52      	ldrb	r2, [r2, #17]
 801cd5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801cd62:	68da      	ldr	r2, [r3, #12]
 801cd64:	b083      	sub	sp, #12
 801cd66:	4605      	mov	r5, r0
 801cd68:	4669      	mov	r1, sp
 801cd6a:	4618      	mov	r0, r3
 801cd6c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801cd6e:	4790      	blx	r2
 801cd70:	6820      	ldr	r0, [r4, #0]
 801cd72:	466a      	mov	r2, sp
 801cd74:	4629      	mov	r1, r5
 801cd76:	3008      	adds	r0, #8
 801cd78:	f7f5 fa80 	bl	801227c <GUI__IntersectRects>
 801cd7c:	b003      	add	sp, #12
 801cd7e:	bd30      	pop	{r4, r5, pc}
 801cd80:	200000a8 	.word	0x200000a8
 801cd84:	20030870 	.word	0x20030870

0801cd88 <GUI_MEMDEV_CopyToLCDAt.part.0>:
 801cd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd8c:	b084      	sub	sp, #16
 801cd8e:	460c      	mov	r4, r1
 801cd90:	4615      	mov	r5, r2
 801cd92:	4606      	mov	r6, r0
 801cd94:	f7f4 fc72 	bl	801167c <GUI_Lock>
 801cd98:	2000      	movs	r0, #0
 801cd9a:	f7f3 fb11 	bl	80103c0 <GUI_SetDrawMode>
 801cd9e:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 801ce84 <GUI_MEMDEV_CopyToLCDAt.part.0+0xfc>
 801cda2:	f8d8 3000 	ldr.w	r3, [r8]
 801cda6:	4681      	mov	r9, r0
 801cda8:	4630      	mov	r0, r6
 801cdaa:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 801cdac:	f7f2 fddc 	bl	800f968 <GUI_ALLOC_LockH>
 801cdb0:	6803      	ldr	r3, [r0, #0]
 801cdb2:	9000      	str	r0, [sp, #0]
 801cdb4:	6998      	ldr	r0, [r3, #24]
 801cdb6:	f7f4 fbf3 	bl	80115a0 <GUI_SelectLayer>
 801cdba:	4b31      	ldr	r3, [pc, #196]	; (801ce80 <GUI_MEMDEV_CopyToLCDAt.part.0+0xf8>)
 801cdbc:	429c      	cmp	r4, r3
 801cdbe:	9b00      	ldr	r3, [sp, #0]
 801cdc0:	bf04      	itt	eq
 801cdc2:	f9b3 4004 	ldrsheq.w	r4, [r3, #4]
 801cdc6:	f9b3 5006 	ldrsheq.w	r5, [r3, #6]
 801cdca:	891a      	ldrh	r2, [r3, #8]
 801cdcc:	895b      	ldrh	r3, [r3, #10]
 801cdce:	f8ad 4008 	strh.w	r4, [sp, #8]
 801cdd2:	3a01      	subs	r2, #1
 801cdd4:	3b01      	subs	r3, #1
 801cdd6:	4422      	add	r2, r4
 801cdd8:	442b      	add	r3, r5
 801cdda:	4682      	mov	sl, r0
 801cddc:	f8ad 200c 	strh.w	r2, [sp, #12]
 801cde0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801cde4:	f8ad 500a 	strh.w	r5, [sp, #10]
 801cde8:	f7fb fc10 	bl	801860c <WM_Activate>
 801cdec:	4668      	mov	r0, sp
 801cdee:	f7f2 fdcd 	bl	800f98c <GUI_ALLOC_UnlockH>
 801cdf2:	a802      	add	r0, sp, #8
 801cdf4:	f7fb f8de 	bl	8017fb4 <WM__InitIVRSearch>
 801cdf8:	bb48      	cbnz	r0, 801ce4e <GUI_MEMDEV_CopyToLCDAt.part.0+0xc6>
 801cdfa:	4650      	mov	r0, sl
 801cdfc:	f7f4 fbd0 	bl	80115a0 <GUI_SelectLayer>
 801ce00:	f7f4 fc3c 	bl	801167c <GUI_Lock>
 801ce04:	2f00      	cmp	r7, #0
 801ce06:	d038      	beq.n	801ce7a <GUI_MEMDEV_CopyToLCDAt.part.0+0xf2>
 801ce08:	f8d8 3000 	ldr.w	r3, [r8]
 801ce0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ce0e:	bb8b      	cbnz	r3, 801ce74 <GUI_MEMDEV_CopyToLCDAt.part.0+0xec>
 801ce10:	f7fb fc04 	bl	801861c <WM_Deactivate>
 801ce14:	4638      	mov	r0, r7
 801ce16:	f7f2 fda7 	bl	800f968 <GUI_ALLOC_LockH>
 801ce1a:	ac04      	add	r4, sp, #16
 801ce1c:	f8d8 3000 	ldr.w	r3, [r8]
 801ce20:	f844 0d0c 	str.w	r0, [r4, #-12]!
 801ce24:	661f      	str	r7, [r3, #96]	; 0x60
 801ce26:	6800      	ldr	r0, [r0, #0]
 801ce28:	f7f3 fcfc 	bl	8010824 <GUI_DEVICE_Link>
 801ce2c:	4620      	mov	r0, r4
 801ce2e:	f7f2 fdad 	bl	800f98c <GUI_ALLOC_UnlockH>
 801ce32:	f7f7 f965 	bl	8014100 <LCD_UpdateColorIndices>
 801ce36:	f7f6 f869 	bl	8012f0c <LCD_SetClipRectMax>
 801ce3a:	f7f4 fc15 	bl	8011668 <GUI_Unlock>
 801ce3e:	4648      	mov	r0, r9
 801ce40:	f7f3 fabe 	bl	80103c0 <GUI_SetDrawMode>
 801ce44:	f7f4 fc10 	bl	8011668 <GUI_Unlock>
 801ce48:	b004      	add	sp, #16
 801ce4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce4e:	462a      	mov	r2, r5
 801ce50:	4621      	mov	r1, r4
 801ce52:	4630      	mov	r0, r6
 801ce54:	f000 fd06 	bl	801d864 <GUI_MEMDEV__WriteToActiveOpaque>
 801ce58:	f7fa ff86 	bl	8017d68 <WM__GetNextIVR>
 801ce5c:	2800      	cmp	r0, #0
 801ce5e:	d0cc      	beq.n	801cdfa <GUI_MEMDEV_CopyToLCDAt.part.0+0x72>
 801ce60:	462a      	mov	r2, r5
 801ce62:	4621      	mov	r1, r4
 801ce64:	4630      	mov	r0, r6
 801ce66:	f000 fcfd 	bl	801d864 <GUI_MEMDEV__WriteToActiveOpaque>
 801ce6a:	f7fa ff7d 	bl	8017d68 <WM__GetNextIVR>
 801ce6e:	2800      	cmp	r0, #0
 801ce70:	d1ed      	bne.n	801ce4e <GUI_MEMDEV_CopyToLCDAt.part.0+0xc6>
 801ce72:	e7c2      	b.n	801cdfa <GUI_MEMDEV_CopyToLCDAt.part.0+0x72>
 801ce74:	f7f3 fa34 	bl	80102e0 <GUI_SelectLCD>
 801ce78:	e7ca      	b.n	801ce10 <GUI_MEMDEV_CopyToLCDAt.part.0+0x88>
 801ce7a:	f7f3 fa31 	bl	80102e0 <GUI_SelectLCD>
 801ce7e:	e7dc      	b.n	801ce3a <GUI_MEMDEV_CopyToLCDAt.part.0+0xb2>
 801ce80:	fffff001 	.word	0xfffff001
 801ce84:	200000a8 	.word	0x200000a8

0801ce88 <GUI_MEMDEV__WriteToActiveAt>:
 801ce88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce8c:	b082      	sub	sp, #8
 801ce8e:	460f      	mov	r7, r1
 801ce90:	4690      	mov	r8, r2
 801ce92:	4606      	mov	r6, r0
 801ce94:	f7f2 fd68 	bl	800f968 <GUI_ALLOC_LockH>
 801ce98:	6803      	ldr	r3, [r0, #0]
 801ce9a:	ac02      	add	r4, sp, #8
 801ce9c:	68db      	ldr	r3, [r3, #12]
 801ce9e:	f844 0d04 	str.w	r0, [r4, #-4]!
 801cea2:	2116      	movs	r1, #22
 801cea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cea6:	2000      	movs	r0, #0
 801cea8:	4798      	blx	r3
 801ceaa:	4605      	mov	r5, r0
 801ceac:	4620      	mov	r0, r4
 801ceae:	f7f2 fd6d 	bl	800f98c <GUI_ALLOC_UnlockH>
 801ceb2:	b11d      	cbz	r5, 801cebc <GUI_MEMDEV__WriteToActiveAt+0x34>
 801ceb4:	4642      	mov	r2, r8
 801ceb6:	4639      	mov	r1, r7
 801ceb8:	4630      	mov	r0, r6
 801ceba:	47a8      	blx	r5
 801cebc:	b002      	add	sp, #8
 801cebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cec2:	bf00      	nop

0801cec4 <GUI_MEMDEV__CreateFixed>:
 801cec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cec8:	f8df 812c 	ldr.w	r8, [pc, #300]	; 801cff8 <GUI_MEMDEV__CreateFixed+0x134>
 801cecc:	b087      	sub	sp, #28
 801cece:	f8d8 4000 	ldr.w	r4, [r8]
 801ced2:	4681      	mov	r9, r0
 801ced4:	468a      	mov	sl, r1
 801ced6:	4617      	mov	r7, r2
 801ced8:	461e      	mov	r6, r3
 801ceda:	9912      	ldr	r1, [sp, #72]	; 0x48
 801cedc:	7c63      	ldrb	r3, [r4, #17]
 801cede:	9811      	ldr	r0, [sp, #68]	; 0x44
 801cee0:	2200      	movs	r2, #0
 801cee2:	f7f3 fc55 	bl	8010790 <GUI_DEVICE_Create>
 801cee6:	2800      	cmp	r0, #0
 801cee8:	d04d      	beq.n	801cf86 <GUI_MEMDEV__CreateFixed+0xc2>
 801ceea:	6903      	ldr	r3, [r0, #16]
 801ceec:	689b      	ldr	r3, [r3, #8]
 801ceee:	4605      	mov	r5, r0
 801cef0:	4798      	blx	r3
 801cef2:	f7f6 fb5b 	bl	80135ac <LCD__GetBPPDevice>
 801cef6:	fb00 f407 	mul.w	r4, r0, r7
 801cefa:	4683      	mov	fp, r0
 801cefc:	f7f2 fdfa 	bl	800faf4 <GUI_ALLOC_RequestSize>
 801cf00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cf02:	3407      	adds	r4, #7
 801cf04:	f013 0301 	ands.w	r3, r3, #1
 801cf08:	ea4f 04d4 	mov.w	r4, r4, lsr #3
 801cf0c:	d03f      	beq.n	801cf8e <GUI_MEMDEV__CreateFixed+0xca>
 801cf0e:	2e00      	cmp	r6, #0
 801cf10:	dd2c      	ble.n	801cf6c <GUI_MEMDEV__CreateFixed+0xa8>
 801cf12:	2b00      	cmp	r3, #0
 801cf14:	d042      	beq.n	801cf9c <GUI_MEMDEV__CreateFixed+0xd8>
 801cf16:	fb04 f006 	mul.w	r0, r4, r6
 801cf1a:	3018      	adds	r0, #24
 801cf1c:	f7f2 fd0c 	bl	800f938 <GUI_ALLOC_AllocNoInit>
 801cf20:	4603      	mov	r3, r0
 801cf22:	b368      	cbz	r0, 801cf80 <GUI_MEMDEV__CreateFixed+0xbc>
 801cf24:	2200      	movs	r2, #0
 801cf26:	9202      	str	r2, [sp, #8]
 801cf28:	4618      	mov	r0, r3
 801cf2a:	9303      	str	r3, [sp, #12]
 801cf2c:	f7f2 fd1c 	bl	800f968 <GUI_ALLOC_LockH>
 801cf30:	4602      	mov	r2, r0
 801cf32:	a806      	add	r0, sp, #24
 801cf34:	9b02      	ldr	r3, [sp, #8]
 801cf36:	f8a2 9004 	strh.w	r9, [r2, #4]
 801cf3a:	f840 2d04 	str.w	r2, [r0, #-4]!
 801cf3e:	f8a2 a006 	strh.w	sl, [r2, #6]
 801cf42:	8117      	strh	r7, [r2, #8]
 801cf44:	8156      	strh	r6, [r2, #10]
 801cf46:	60d4      	str	r4, [r2, #12]
 801cf48:	f8c2 b010 	str.w	fp, [r2, #16]
 801cf4c:	6153      	str	r3, [r2, #20]
 801cf4e:	6015      	str	r5, [r2, #0]
 801cf50:	f7f2 fd1c 	bl	800f98c <GUI_ALLOC_UnlockH>
 801cf54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801cf56:	612b      	str	r3, [r5, #16]
 801cf58:	f8d8 2000 	ldr.w	r2, [r8]
 801cf5c:	9b03      	ldr	r3, [sp, #12]
 801cf5e:	60ab      	str	r3, [r5, #8]
 801cf60:	7c52      	ldrb	r2, [r2, #17]
 801cf62:	61aa      	str	r2, [r5, #24]
 801cf64:	4618      	mov	r0, r3
 801cf66:	b007      	add	sp, #28
 801cf68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf6c:	2c00      	cmp	r4, #0
 801cf6e:	d134      	bne.n	801cfda <GUI_MEMDEV__CreateFixed+0x116>
 801cf70:	4620      	mov	r0, r4
 801cf72:	4276      	negs	r6, r6
 801cf74:	4286      	cmp	r6, r0
 801cf76:	bfa8      	it	ge
 801cf78:	4606      	movge	r6, r0
 801cf7a:	b393      	cbz	r3, 801cfe2 <GUI_MEMDEV__CreateFixed+0x11e>
 801cf7c:	2e00      	cmp	r6, #0
 801cf7e:	dcca      	bgt.n	801cf16 <GUI_MEMDEV__CreateFixed+0x52>
 801cf80:	4628      	mov	r0, r5
 801cf82:	f7f3 fc03 	bl	801078c <GUI_DEVICE_Delete>
 801cf86:	2000      	movs	r0, #0
 801cf88:	b007      	add	sp, #28
 801cf8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf8e:	2800      	cmp	r0, #0
 801cf90:	bfb8      	it	lt
 801cf92:	3003      	addlt	r0, #3
 801cf94:	1080      	asrs	r0, r0, #2
 801cf96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cf9a:	e7b8      	b.n	801cf0e <GUI_MEMDEV__CreateFixed+0x4a>
 801cf9c:	9300      	str	r3, [sp, #0]
 801cf9e:	463a      	mov	r2, r7
 801cfa0:	4633      	mov	r3, r6
 801cfa2:	4651      	mov	r1, sl
 801cfa4:	4648      	mov	r0, r9
 801cfa6:	f000 fbf9 	bl	801d79c <GUI_USAGE_BM_Create>
 801cfaa:	9002      	str	r0, [sp, #8]
 801cfac:	fb04 f006 	mul.w	r0, r4, r6
 801cfb0:	3018      	adds	r0, #24
 801cfb2:	f7f2 fef3 	bl	800fd9c <GUI_ALLOC_AllocZero>
 801cfb6:	4603      	mov	r3, r0
 801cfb8:	2800      	cmp	r0, #0
 801cfba:	d1b5      	bne.n	801cf28 <GUI_MEMDEV__CreateFixed+0x64>
 801cfbc:	4628      	mov	r0, r5
 801cfbe:	9303      	str	r3, [sp, #12]
 801cfc0:	f7f3 fbe4 	bl	801078c <GUI_DEVICE_Delete>
 801cfc4:	9b02      	ldr	r3, [sp, #8]
 801cfc6:	2b00      	cmp	r3, #0
 801cfc8:	d0dd      	beq.n	801cf86 <GUI_MEMDEV__CreateFixed+0xc2>
 801cfca:	4618      	mov	r0, r3
 801cfcc:	f7f2 fe6e 	bl	800fcac <GUI_ALLOC_Free>
 801cfd0:	9b03      	ldr	r3, [sp, #12]
 801cfd2:	4618      	mov	r0, r3
 801cfd4:	b007      	add	sp, #28
 801cfd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cfda:	3818      	subs	r0, #24
 801cfdc:	fbb0 f0f4 	udiv	r0, r0, r4
 801cfe0:	e7c7      	b.n	801cf72 <GUI_MEMDEV__CreateFixed+0xae>
 801cfe2:	9300      	str	r3, [sp, #0]
 801cfe4:	463a      	mov	r2, r7
 801cfe6:	4633      	mov	r3, r6
 801cfe8:	4651      	mov	r1, sl
 801cfea:	4648      	mov	r0, r9
 801cfec:	f000 fbd6 	bl	801d79c <GUI_USAGE_BM_Create>
 801cff0:	2e00      	cmp	r6, #0
 801cff2:	9002      	str	r0, [sp, #8]
 801cff4:	dcda      	bgt.n	801cfac <GUI_MEMDEV__CreateFixed+0xe8>
 801cff6:	e7c3      	b.n	801cf80 <GUI_MEMDEV__CreateFixed+0xbc>
 801cff8:	200000a8 	.word	0x200000a8

0801cffc <GUI_MEMDEV_GetBitsPerPixel>:
 801cffc:	b530      	push	{r4, r5, lr}
 801cffe:	4604      	mov	r4, r0
 801d000:	b083      	sub	sp, #12
 801d002:	b198      	cbz	r0, 801d02c <GUI_MEMDEV_GetBitsPerPixel+0x30>
 801d004:	f7f4 fb3a 	bl	801167c <GUI_Lock>
 801d008:	4620      	mov	r0, r4
 801d00a:	f7f2 fcad 	bl	800f968 <GUI_ALLOC_LockH>
 801d00e:	6803      	ldr	r3, [r0, #0]
 801d010:	ad02      	add	r5, sp, #8
 801d012:	691b      	ldr	r3, [r3, #16]
 801d014:	f845 0d04 	str.w	r0, [r5, #-4]!
 801d018:	689b      	ldr	r3, [r3, #8]
 801d01a:	4798      	blx	r3
 801d01c:	f7f6 fac6 	bl	80135ac <LCD__GetBPPDevice>
 801d020:	4604      	mov	r4, r0
 801d022:	4628      	mov	r0, r5
 801d024:	f7f2 fcb2 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d028:	f7f4 fb1e 	bl	8011668 <GUI_Unlock>
 801d02c:	4620      	mov	r0, r4
 801d02e:	b003      	add	sp, #12
 801d030:	bd30      	pop	{r4, r5, pc}
 801d032:	bf00      	nop

0801d034 <GUI_MEMDEV_Delete>:
 801d034:	b900      	cbnz	r0, 801d038 <GUI_MEMDEV_Delete+0x4>
 801d036:	4770      	bx	lr
 801d038:	b510      	push	{r4, lr}
 801d03a:	b082      	sub	sp, #8
 801d03c:	4604      	mov	r4, r0
 801d03e:	f7f4 fb1d 	bl	801167c <GUI_Lock>
 801d042:	4b10      	ldr	r3, [pc, #64]	; (801d084 <GUI_MEMDEV_Delete+0x50>)
 801d044:	681b      	ldr	r3, [r3, #0]
 801d046:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d048:	429c      	cmp	r4, r3
 801d04a:	d017      	beq.n	801d07c <GUI_MEMDEV_Delete+0x48>
 801d04c:	4620      	mov	r0, r4
 801d04e:	f7f2 fc8b 	bl	800f968 <GUI_ALLOC_LockH>
 801d052:	6943      	ldr	r3, [r0, #20]
 801d054:	9001      	str	r0, [sp, #4]
 801d056:	b963      	cbnz	r3, 801d072 <GUI_MEMDEV_Delete+0x3e>
 801d058:	6800      	ldr	r0, [r0, #0]
 801d05a:	f7f3 fb97 	bl	801078c <GUI_DEVICE_Delete>
 801d05e:	a801      	add	r0, sp, #4
 801d060:	f7f2 fc94 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d064:	4620      	mov	r0, r4
 801d066:	f7f2 fe21 	bl	800fcac <GUI_ALLOC_Free>
 801d06a:	f7f4 fafd 	bl	8011668 <GUI_Unlock>
 801d06e:	b002      	add	sp, #8
 801d070:	bd10      	pop	{r4, pc}
 801d072:	4618      	mov	r0, r3
 801d074:	f7f8 feda 	bl	8015e2c <GUI_USAGE_DecUseCnt>
 801d078:	9801      	ldr	r0, [sp, #4]
 801d07a:	e7ed      	b.n	801d058 <GUI_MEMDEV_Delete+0x24>
 801d07c:	f7f3 f930 	bl	80102e0 <GUI_SelectLCD>
 801d080:	e7e4      	b.n	801d04c <GUI_MEMDEV_Delete+0x18>
 801d082:	bf00      	nop
 801d084:	200000a8 	.word	0x200000a8

0801d088 <GUI_MEMDEV_CreateEx>:
 801d088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d08c:	b085      	sub	sp, #20
 801d08e:	4606      	mov	r6, r0
 801d090:	4690      	mov	r8, r2
 801d092:	4699      	mov	r9, r3
 801d094:	460f      	mov	r7, r1
 801d096:	f7f4 faf1 	bl	801167c <GUI_Lock>
 801d09a:	4a1c      	ldr	r2, [pc, #112]	; (801d10c <GUI_MEMDEV_CreateEx+0x84>)
 801d09c:	4b1c      	ldr	r3, [pc, #112]	; (801d110 <GUI_MEMDEV_CreateEx+0x88>)
 801d09e:	6812      	ldr	r2, [r2, #0]
 801d0a0:	7c50      	ldrb	r0, [r2, #17]
 801d0a2:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 801d0a6:	e001      	b.n	801d0ac <GUI_MEMDEV_CreateEx+0x24>
 801d0a8:	6824      	ldr	r4, [r4, #0]
 801d0aa:	b1fc      	cbz	r4, 801d0ec <GUI_MEMDEV_CreateEx+0x64>
 801d0ac:	68e3      	ldr	r3, [r4, #12]
 801d0ae:	681a      	ldr	r2, [r3, #0]
 801d0b0:	2a04      	cmp	r2, #4
 801d0b2:	d1f9      	bne.n	801d0a8 <GUI_MEMDEV_CreateEx+0x20>
 801d0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d0b6:	2101      	movs	r1, #1
 801d0b8:	4620      	mov	r0, r4
 801d0ba:	4798      	blx	r3
 801d0bc:	4605      	mov	r5, r0
 801d0be:	b1d8      	cbz	r0, 801d0f8 <GUI_MEMDEV_CreateEx+0x70>
 801d0c0:	6924      	ldr	r4, [r4, #16]
 801d0c2:	68a3      	ldr	r3, [r4, #8]
 801d0c4:	4798      	blx	r3
 801d0c6:	3001      	adds	r0, #1
 801d0c8:	d018      	beq.n	801d0fc <GUI_MEMDEV_CreateEx+0x74>
 801d0ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d0cc:	9402      	str	r4, [sp, #8]
 801d0ce:	9300      	str	r3, [sp, #0]
 801d0d0:	9501      	str	r5, [sp, #4]
 801d0d2:	464b      	mov	r3, r9
 801d0d4:	4642      	mov	r2, r8
 801d0d6:	4639      	mov	r1, r7
 801d0d8:	4630      	mov	r0, r6
 801d0da:	f7ff fef3 	bl	801cec4 <GUI_MEMDEV__CreateFixed>
 801d0de:	4604      	mov	r4, r0
 801d0e0:	f7f4 fac2 	bl	8011668 <GUI_Unlock>
 801d0e4:	4620      	mov	r0, r4
 801d0e6:	b005      	add	sp, #20
 801d0e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d0ec:	f7f3 fb38 	bl	8010760 <GUI_DEVICE__GetpDriver>
 801d0f0:	4604      	mov	r4, r0
 801d0f2:	b148      	cbz	r0, 801d108 <GUI_MEMDEV_CreateEx+0x80>
 801d0f4:	68c3      	ldr	r3, [r0, #12]
 801d0f6:	e7dd      	b.n	801d0b4 <GUI_MEMDEV_CreateEx+0x2c>
 801d0f8:	4604      	mov	r4, r0
 801d0fa:	e7f1      	b.n	801d0e0 <GUI_MEMDEV_CreateEx+0x58>
 801d0fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d0fe:	4c05      	ldr	r4, [pc, #20]	; (801d114 <GUI_MEMDEV_CreateEx+0x8c>)
 801d100:	f043 0301 	orr.w	r3, r3, #1
 801d104:	930c      	str	r3, [sp, #48]	; 0x30
 801d106:	e7e0      	b.n	801d0ca <GUI_MEMDEV_CreateEx+0x42>
 801d108:	4620      	mov	r0, r4
 801d10a:	e7ec      	b.n	801d0e6 <GUI_MEMDEV_CreateEx+0x5e>
 801d10c:	200000a8 	.word	0x200000a8
 801d110:	20030870 	.word	0x20030870
 801d114:	08026304 	.word	0x08026304

0801d118 <GUI_MEMDEV_Select>:
 801d118:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d11a:	4f16      	ldr	r7, [pc, #88]	; (801d174 <GUI_MEMDEV_Select+0x5c>)
 801d11c:	b083      	sub	sp, #12
 801d11e:	4604      	mov	r4, r0
 801d120:	f7f4 faac 	bl	801167c <GUI_Lock>
 801d124:	683b      	ldr	r3, [r7, #0]
 801d126:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 801d128:	b1e4      	cbz	r4, 801d164 <GUI_MEMDEV_Select+0x4c>
 801d12a:	b9c6      	cbnz	r6, 801d15e <GUI_MEMDEV_Select+0x46>
 801d12c:	f7fb fa76 	bl	801861c <WM_Deactivate>
 801d130:	4620      	mov	r0, r4
 801d132:	f7f2 fc19 	bl	800f968 <GUI_ALLOC_LockH>
 801d136:	ad02      	add	r5, sp, #8
 801d138:	683b      	ldr	r3, [r7, #0]
 801d13a:	f845 0d04 	str.w	r0, [r5, #-4]!
 801d13e:	661c      	str	r4, [r3, #96]	; 0x60
 801d140:	6800      	ldr	r0, [r0, #0]
 801d142:	f7f3 fb6f 	bl	8010824 <GUI_DEVICE_Link>
 801d146:	4628      	mov	r0, r5
 801d148:	f7f2 fc20 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d14c:	f7f6 ffd8 	bl	8014100 <LCD_UpdateColorIndices>
 801d150:	f7f5 fedc 	bl	8012f0c <LCD_SetClipRectMax>
 801d154:	f7f4 fa88 	bl	8011668 <GUI_Unlock>
 801d158:	4630      	mov	r0, r6
 801d15a:	b003      	add	sp, #12
 801d15c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d15e:	f7f3 f8bf 	bl	80102e0 <GUI_SelectLCD>
 801d162:	e7e3      	b.n	801d12c <GUI_MEMDEV_Select+0x14>
 801d164:	f7f3 f8bc 	bl	80102e0 <GUI_SelectLCD>
 801d168:	f7f4 fa7e 	bl	8011668 <GUI_Unlock>
 801d16c:	4630      	mov	r0, r6
 801d16e:	b003      	add	sp, #12
 801d170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d172:	bf00      	nop
 801d174:	200000a8 	.word	0x200000a8

0801d178 <GUI_MEMDEV_CopyToLCD>:
 801d178:	b900      	cbnz	r0, 801d17c <GUI_MEMDEV_CopyToLCD+0x4>
 801d17a:	4770      	bx	lr
 801d17c:	4a01      	ldr	r2, [pc, #4]	; (801d184 <GUI_MEMDEV_CopyToLCD+0xc>)
 801d17e:	4611      	mov	r1, r2
 801d180:	f7ff be02 	b.w	801cd88 <GUI_MEMDEV_CopyToLCDAt.part.0>
 801d184:	fffff001 	.word	0xfffff001

0801d188 <GUI_MEMDEV_Draw>:
 801d188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d18c:	b087      	sub	sp, #28
 801d18e:	4606      	mov	r6, r0
 801d190:	4692      	mov	sl, r2
 801d192:	461c      	mov	r4, r3
 801d194:	4689      	mov	r9, r1
 801d196:	f7f4 fa71 	bl	801167c <GUI_Lock>
 801d19a:	4b56      	ldr	r3, [pc, #344]	; (801d2f4 <GUI_MEMDEV_Draw+0x16c>)
 801d19c:	681a      	ldr	r2, [r3, #0]
 801d19e:	4b56      	ldr	r3, [pc, #344]	; (801d2f8 <GUI_MEMDEV_Draw+0x170>)
 801d1a0:	7c57      	ldrb	r7, [r2, #17]
 801d1a2:	57db      	ldrsb	r3, [r3, r7]
 801d1a4:	2b01      	cmp	r3, #1
 801d1a6:	4638      	mov	r0, r7
 801d1a8:	f340 8097 	ble.w	801d2da <GUI_MEMDEV_Draw+0x152>
 801d1ac:	f7f6 f8a2 	bl	80132f4 <LCD_GetXSizeEx>
 801d1b0:	4605      	mov	r5, r0
 801d1b2:	4638      	mov	r0, r7
 801d1b4:	f7f6 f8ae 	bl	8013314 <LCD_GetYSizeEx>
 801d1b8:	4607      	mov	r7, r0
 801d1ba:	2e00      	cmp	r6, #0
 801d1bc:	f000 808a 	beq.w	801d2d4 <GUI_MEMDEV_Draw+0x14c>
 801d1c0:	a905      	add	r1, sp, #20
 801d1c2:	a804      	add	r0, sp, #16
 801d1c4:	f7f2 ff58 	bl	8010078 <GUI_GetOrg>
 801d1c8:	9a04      	ldr	r2, [sp, #16]
 801d1ca:	9b05      	ldr	r3, [sp, #20]
 801d1cc:	f9b6 c000 	ldrsh.w	ip, [r6]
 801d1d0:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 801d1d4:	f9b6 e004 	ldrsh.w	lr, [r6, #4]
 801d1d8:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 801d1dc:	4415      	add	r5, r2
 801d1de:	441f      	add	r7, r3
 801d1e0:	3d01      	subs	r5, #1
 801d1e2:	ea2c 73ec 	bic.w	r3, ip, ip, asr #31
 801d1e6:	3f01      	subs	r7, #1
 801d1e8:	ea20 72e0 	bic.w	r2, r0, r0, asr #31
 801d1ec:	9302      	str	r3, [sp, #8]
 801d1ee:	9203      	str	r2, [sp, #12]
 801d1f0:	4575      	cmp	r5, lr
 801d1f2:	bfd4      	ite	le
 801d1f4:	ebc3 0305 	rsble	r3, r3, r5
 801d1f8:	ebc3 030e 	rsbgt	r3, r3, lr
 801d1fc:	428f      	cmp	r7, r1
 801d1fe:	bfd4      	ite	le
 801d200:	ebc2 0207 	rsble	r2, r2, r7
 801d204:	ebc2 0201 	rsbgt	r2, r2, r1
 801d208:	461d      	mov	r5, r3
 801d20a:	4617      	mov	r7, r2
 801d20c:	3501      	adds	r5, #1
 801d20e:	3701      	adds	r7, #1
 801d210:	b904      	cbnz	r4, 801d214 <GUI_MEMDEV_Draw+0x8c>
 801d212:	427c      	negs	r4, r7
 801d214:	2d00      	cmp	r5, #0
 801d216:	dd4f      	ble.n	801d2b8 <GUI_MEMDEV_Draw+0x130>
 801d218:	2f00      	cmp	r7, #0
 801d21a:	dd4d      	ble.n	801d2b8 <GUI_MEMDEV_Draw+0x130>
 801d21c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d21e:	9300      	str	r3, [sp, #0]
 801d220:	462a      	mov	r2, r5
 801d222:	4623      	mov	r3, r4
 801d224:	9903      	ldr	r1, [sp, #12]
 801d226:	9802      	ldr	r0, [sp, #8]
 801d228:	f7ff ff2e 	bl	801d088 <GUI_MEMDEV_CreateEx>
 801d22c:	4680      	mov	r8, r0
 801d22e:	2800      	cmp	r0, #0
 801d230:	d048      	beq.n	801d2c4 <GUI_MEMDEV_Draw+0x13c>
 801d232:	f000 f8a9 	bl	801d388 <GUI_MEMDEV_GetYSize>
 801d236:	4287      	cmp	r7, r0
 801d238:	4606      	mov	r6, r0
 801d23a:	d004      	beq.n	801d246 <GUI_MEMDEV_Draw+0xbe>
 801d23c:	4b2d      	ldr	r3, [pc, #180]	; (801d2f4 <GUI_MEMDEV_Draw+0x16c>)
 801d23e:	681b      	ldr	r3, [r3, #0]
 801d240:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801d242:	2800      	cmp	r0, #0
 801d244:	d151      	bne.n	801d2ea <GUI_MEMDEV_Draw+0x162>
 801d246:	4640      	mov	r0, r8
 801d248:	f7ff ff66 	bl	801d118 <GUI_MEMDEV_Select>
 801d24c:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801d2fc <GUI_MEMDEV_Draw+0x174>
 801d250:	463d      	mov	r5, r7
 801d252:	2400      	movs	r4, #0
 801d254:	e00e      	b.n	801d274 <GUI_MEMDEV_Draw+0xec>
 801d256:	1bad      	subs	r5, r5, r6
 801d258:	b9ac      	cbnz	r4, 801d286 <GUI_MEMDEV_Draw+0xfe>
 801d25a:	4650      	mov	r0, sl
 801d25c:	47c8      	blx	r9
 801d25e:	f8db 3000 	ldr.w	r3, [fp]
 801d262:	4434      	add	r4, r6
 801d264:	20ff      	movs	r0, #255	; 0xff
 801d266:	b103      	cbz	r3, 801d26a <GUI_MEMDEV_Draw+0xe2>
 801d268:	4798      	blx	r3
 801d26a:	4640      	mov	r0, r8
 801d26c:	f7ff ff84 	bl	801d178 <GUI_MEMDEV_CopyToLCD>
 801d270:	42a7      	cmp	r7, r4
 801d272:	dd12      	ble.n	801d29a <GUI_MEMDEV_Draw+0x112>
 801d274:	42ae      	cmp	r6, r5
 801d276:	ddee      	ble.n	801d256 <GUI_MEMDEV_Draw+0xce>
 801d278:	4629      	mov	r1, r5
 801d27a:	4640      	mov	r0, r8
 801d27c:	f000 f8a6 	bl	801d3cc <GUI_MEMDEV_ReduceYSize>
 801d280:	1bad      	subs	r5, r5, r6
 801d282:	2c00      	cmp	r4, #0
 801d284:	d0e9      	beq.n	801d25a <GUI_MEMDEV_Draw+0xd2>
 801d286:	9b03      	ldr	r3, [sp, #12]
 801d288:	9902      	ldr	r1, [sp, #8]
 801d28a:	4640      	mov	r0, r8
 801d28c:	191a      	adds	r2, r3, r4
 801d28e:	f000 f8bd 	bl	801d40c <GUI_MEMDEV_SetOrg>
 801d292:	4640      	mov	r0, r8
 801d294:	f000 f834 	bl	801d300 <GUI_MEMDEV_Clear>
 801d298:	e7df      	b.n	801d25a <GUI_MEMDEV_Draw+0xd2>
 801d29a:	4640      	mov	r0, r8
 801d29c:	f7ff feca 	bl	801d034 <GUI_MEMDEV_Delete>
 801d2a0:	2000      	movs	r0, #0
 801d2a2:	f7ff ff39 	bl	801d118 <GUI_MEMDEV_Select>
 801d2a6:	42b7      	cmp	r7, r6
 801d2a8:	d006      	beq.n	801d2b8 <GUI_MEMDEV_Draw+0x130>
 801d2aa:	4b12      	ldr	r3, [pc, #72]	; (801d2f4 <GUI_MEMDEV_Draw+0x16c>)
 801d2ac:	681b      	ldr	r3, [r3, #0]
 801d2ae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801d2b0:	b110      	cbz	r0, 801d2b8 <GUI_MEMDEV_Draw+0x130>
 801d2b2:	2133      	movs	r1, #51	; 0x33
 801d2b4:	f7fc fed4 	bl	801a060 <WM__SendMessageNoPara>
 801d2b8:	f7f4 f9d6 	bl	8011668 <GUI_Unlock>
 801d2bc:	2000      	movs	r0, #0
 801d2be:	b007      	add	sp, #28
 801d2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2c4:	4650      	mov	r0, sl
 801d2c6:	47c8      	blx	r9
 801d2c8:	f7f4 f9ce 	bl	8011668 <GUI_Unlock>
 801d2cc:	2001      	movs	r0, #1
 801d2ce:	b007      	add	sp, #28
 801d2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2d4:	9603      	str	r6, [sp, #12]
 801d2d6:	9602      	str	r6, [sp, #8]
 801d2d8:	e79a      	b.n	801d210 <GUI_MEMDEV_Draw+0x88>
 801d2da:	f7f6 f82b 	bl	8013334 <LCD_GetVXSizeEx>
 801d2de:	4605      	mov	r5, r0
 801d2e0:	4638      	mov	r0, r7
 801d2e2:	f7f6 f837 	bl	8013354 <LCD_GetVYSizeEx>
 801d2e6:	4607      	mov	r7, r0
 801d2e8:	e767      	b.n	801d1ba <GUI_MEMDEV_Draw+0x32>
 801d2ea:	2132      	movs	r1, #50	; 0x32
 801d2ec:	f7fc feb8 	bl	801a060 <WM__SendMessageNoPara>
 801d2f0:	e7a9      	b.n	801d246 <GUI_MEMDEV_Draw+0xbe>
 801d2f2:	bf00      	nop
 801d2f4:	200000a8 	.word	0x200000a8
 801d2f8:	20030820 	.word	0x20030820
 801d2fc:	2002e4cc 	.word	0x2002e4cc

0801d300 <GUI_MEMDEV_Clear>:
 801d300:	b510      	push	{r4, lr}
 801d302:	b082      	sub	sp, #8
 801d304:	b928      	cbnz	r0, 801d312 <GUI_MEMDEV_Clear+0x12>
 801d306:	4b13      	ldr	r3, [pc, #76]	; (801d354 <GUI_MEMDEV_Clear+0x54>)
 801d308:	681b      	ldr	r3, [r3, #0]
 801d30a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801d30c:	b914      	cbnz	r4, 801d314 <GUI_MEMDEV_Clear+0x14>
 801d30e:	b002      	add	sp, #8
 801d310:	bd10      	pop	{r4, pc}
 801d312:	4604      	mov	r4, r0
 801d314:	f7f4 f9b2 	bl	801167c <GUI_Lock>
 801d318:	4620      	mov	r0, r4
 801d31a:	f7f2 fb25 	bl	800f968 <GUI_ALLOC_LockH>
 801d31e:	ab02      	add	r3, sp, #8
 801d320:	6944      	ldr	r4, [r0, #20]
 801d322:	f843 0d08 	str.w	r0, [r3, #-8]!
 801d326:	4618      	mov	r0, r3
 801d328:	f7f2 fb30 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d32c:	b91c      	cbnz	r4, 801d336 <GUI_MEMDEV_Clear+0x36>
 801d32e:	f7f4 f99b 	bl	8011668 <GUI_Unlock>
 801d332:	b002      	add	sp, #8
 801d334:	bd10      	pop	{r4, pc}
 801d336:	4620      	mov	r0, r4
 801d338:	f7f2 fb16 	bl	800f968 <GUI_ALLOC_LockH>
 801d33c:	ac02      	add	r4, sp, #8
 801d33e:	6882      	ldr	r2, [r0, #8]
 801d340:	f844 0d04 	str.w	r0, [r4, #-4]!
 801d344:	6893      	ldr	r3, [r2, #8]
 801d346:	4798      	blx	r3
 801d348:	4620      	mov	r0, r4
 801d34a:	f7f2 fb1f 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d34e:	f7f4 f98b 	bl	8011668 <GUI_Unlock>
 801d352:	e7ee      	b.n	801d332 <GUI_MEMDEV_Clear+0x32>
 801d354:	200000a8 	.word	0x200000a8

0801d358 <GUI_MEMDEV_GetDataPtr>:
 801d358:	b1a0      	cbz	r0, 801d384 <GUI_MEMDEV_GetDataPtr+0x2c>
 801d35a:	b510      	push	{r4, lr}
 801d35c:	4604      	mov	r4, r0
 801d35e:	b082      	sub	sp, #8
 801d360:	f7f4 f98c 	bl	801167c <GUI_Lock>
 801d364:	4620      	mov	r0, r4
 801d366:	f7f2 faff 	bl	800f968 <GUI_ALLOC_LockH>
 801d36a:	ab02      	add	r3, sp, #8
 801d36c:	f100 0418 	add.w	r4, r0, #24
 801d370:	f843 0d04 	str.w	r0, [r3, #-4]!
 801d374:	4618      	mov	r0, r3
 801d376:	f7f2 fb09 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d37a:	f7f4 f975 	bl	8011668 <GUI_Unlock>
 801d37e:	4620      	mov	r0, r4
 801d380:	b002      	add	sp, #8
 801d382:	bd10      	pop	{r4, pc}
 801d384:	4770      	bx	lr
 801d386:	bf00      	nop

0801d388 <GUI_MEMDEV_GetYSize>:
 801d388:	b510      	push	{r4, lr}
 801d38a:	4604      	mov	r4, r0
 801d38c:	b082      	sub	sp, #8
 801d38e:	f7f4 f975 	bl	801167c <GUI_Lock>
 801d392:	b17c      	cbz	r4, 801d3b4 <GUI_MEMDEV_GetYSize+0x2c>
 801d394:	4620      	mov	r0, r4
 801d396:	f7f2 fae7 	bl	800f968 <GUI_ALLOC_LockH>
 801d39a:	ab02      	add	r3, sp, #8
 801d39c:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 801d3a0:	f843 0d04 	str.w	r0, [r3, #-4]!
 801d3a4:	4618      	mov	r0, r3
 801d3a6:	f7f2 faf1 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d3aa:	f7f4 f95d 	bl	8011668 <GUI_Unlock>
 801d3ae:	4620      	mov	r0, r4
 801d3b0:	b002      	add	sp, #8
 801d3b2:	bd10      	pop	{r4, pc}
 801d3b4:	4b04      	ldr	r3, [pc, #16]	; (801d3c8 <GUI_MEMDEV_GetYSize+0x40>)
 801d3b6:	681b      	ldr	r3, [r3, #0]
 801d3b8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801d3ba:	2c00      	cmp	r4, #0
 801d3bc:	d1ea      	bne.n	801d394 <GUI_MEMDEV_GetYSize+0xc>
 801d3be:	f7f4 f953 	bl	8011668 <GUI_Unlock>
 801d3c2:	4620      	mov	r0, r4
 801d3c4:	b002      	add	sp, #8
 801d3c6:	bd10      	pop	{r4, pc}
 801d3c8:	200000a8 	.word	0x200000a8

0801d3cc <GUI_MEMDEV_ReduceYSize>:
 801d3cc:	b530      	push	{r4, r5, lr}
 801d3ce:	460d      	mov	r5, r1
 801d3d0:	b083      	sub	sp, #12
 801d3d2:	b928      	cbnz	r0, 801d3e0 <GUI_MEMDEV_ReduceYSize+0x14>
 801d3d4:	4b0c      	ldr	r3, [pc, #48]	; (801d408 <GUI_MEMDEV_ReduceYSize+0x3c>)
 801d3d6:	681b      	ldr	r3, [r3, #0]
 801d3d8:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801d3da:	b914      	cbnz	r4, 801d3e2 <GUI_MEMDEV_ReduceYSize+0x16>
 801d3dc:	b003      	add	sp, #12
 801d3de:	bd30      	pop	{r4, r5, pc}
 801d3e0:	4604      	mov	r4, r0
 801d3e2:	f7f4 f94b 	bl	801167c <GUI_Lock>
 801d3e6:	4620      	mov	r0, r4
 801d3e8:	f7f2 fabe 	bl	800f968 <GUI_ALLOC_LockH>
 801d3ec:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801d3f0:	9001      	str	r0, [sp, #4]
 801d3f2:	42ab      	cmp	r3, r5
 801d3f4:	bfc8      	it	gt
 801d3f6:	8145      	strhgt	r5, [r0, #10]
 801d3f8:	a801      	add	r0, sp, #4
 801d3fa:	f7f2 fac7 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d3fe:	f7f4 f933 	bl	8011668 <GUI_Unlock>
 801d402:	b003      	add	sp, #12
 801d404:	bd30      	pop	{r4, r5, pc}
 801d406:	bf00      	nop
 801d408:	200000a8 	.word	0x200000a8

0801d40c <GUI_MEMDEV_SetOrg>:
 801d40c:	b570      	push	{r4, r5, r6, lr}
 801d40e:	460d      	mov	r5, r1
 801d410:	b082      	sub	sp, #8
 801d412:	4616      	mov	r6, r2
 801d414:	b928      	cbnz	r0, 801d422 <GUI_MEMDEV_SetOrg+0x16>
 801d416:	4b1a      	ldr	r3, [pc, #104]	; (801d480 <GUI_MEMDEV_SetOrg+0x74>)
 801d418:	681b      	ldr	r3, [r3, #0]
 801d41a:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801d41c:	b914      	cbnz	r4, 801d424 <GUI_MEMDEV_SetOrg+0x18>
 801d41e:	b002      	add	sp, #8
 801d420:	bd70      	pop	{r4, r5, r6, pc}
 801d422:	4604      	mov	r4, r0
 801d424:	f7f4 f92a 	bl	801167c <GUI_Lock>
 801d428:	4620      	mov	r0, r4
 801d42a:	f7f2 fa9d 	bl	800f968 <GUI_ALLOC_LockH>
 801d42e:	b236      	sxth	r6, r6
 801d430:	b22d      	sxth	r5, r5
 801d432:	80c6      	strh	r6, [r0, #6]
 801d434:	8085      	strh	r5, [r0, #4]
 801d436:	9000      	str	r0, [sp, #0]
 801d438:	f7f5 fd68 	bl	8012f0c <LCD_SetClipRectMax>
 801d43c:	9b00      	ldr	r3, [sp, #0]
 801d43e:	6958      	ldr	r0, [r3, #20]
 801d440:	b930      	cbnz	r0, 801d450 <GUI_MEMDEV_SetOrg+0x44>
 801d442:	4668      	mov	r0, sp
 801d444:	f7f2 faa2 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d448:	f7f4 f90e 	bl	8011668 <GUI_Unlock>
 801d44c:	b002      	add	sp, #8
 801d44e:	bd70      	pop	{r4, r5, r6, pc}
 801d450:	f7f2 fa8a 	bl	800f968 <GUI_ALLOC_LockH>
 801d454:	9a00      	ldr	r2, [sp, #0]
 801d456:	9001      	str	r0, [sp, #4]
 801d458:	f9b2 3008 	ldrsh.w	r3, [r2, #8]
 801d45c:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 801d460:	80c2      	strh	r2, [r0, #6]
 801d462:	8083      	strh	r3, [r0, #4]
 801d464:	b113      	cbz	r3, 801d46c <GUI_MEMDEV_SetOrg+0x60>
 801d466:	b10a      	cbz	r2, 801d46c <GUI_MEMDEV_SetOrg+0x60>
 801d468:	8005      	strh	r5, [r0, #0]
 801d46a:	8046      	strh	r6, [r0, #2]
 801d46c:	a801      	add	r0, sp, #4
 801d46e:	f7f2 fa8d 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d472:	4668      	mov	r0, sp
 801d474:	f7f2 fa8a 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d478:	f7f4 f8f6 	bl	8011668 <GUI_Unlock>
 801d47c:	e7e6      	b.n	801d44c <GUI_MEMDEV_SetOrg+0x40>
 801d47e:	bf00      	nop
 801d480:	200000a8 	.word	0x200000a8

0801d484 <GUI_MEMDEV_Paint1Static>:
 801d484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d488:	f8df b188 	ldr.w	fp, [pc, #392]	; 801d614 <GUI_MEMDEV_Paint1Static+0x190>
 801d48c:	b089      	sub	sp, #36	; 0x24
 801d48e:	4606      	mov	r6, r0
 801d490:	2705      	movs	r7, #5
 801d492:	4630      	mov	r0, r6
 801d494:	f7f2 fa68 	bl	800f968 <GUI_ALLOC_LockH>
 801d498:	4603      	mov	r3, r0
 801d49a:	a807      	add	r0, sp, #28
 801d49c:	f9b3 8000 	ldrsh.w	r8, [r3]
 801d4a0:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 801d4a4:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
 801d4a8:	f9b3 5006 	ldrsh.w	r5, [r3, #6]
 801d4ac:	9307      	str	r3, [sp, #28]
 801d4ae:	ebc8 0404 	rsb	r4, r8, r4
 801d4b2:	3401      	adds	r4, #1
 801d4b4:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 801d4b8:	ebc9 0505 	rsb	r5, r9, r5
 801d4bc:	f7f2 fa66 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d4c0:	2c00      	cmp	r4, #0
 801d4c2:	f105 0501 	add.w	r5, r5, #1
 801d4c6:	dd55      	ble.n	801d574 <GUI_MEMDEV_Paint1Static+0xf0>
 801d4c8:	2d00      	cmp	r5, #0
 801d4ca:	dd53      	ble.n	801d574 <GUI_MEMDEV_Paint1Static+0xf0>
 801d4cc:	f1ba 0f00 	cmp.w	sl, #0
 801d4d0:	d155      	bne.n	801d57e <GUI_MEMDEV_Paint1Static+0xfa>
 801d4d2:	f7fb fb91 	bl	8018bf8 <WM_GetDesktopWindow>
 801d4d6:	4286      	cmp	r6, r0
 801d4d8:	d07f      	beq.n	801d5da <GUI_MEMDEV_Paint1Static+0x156>
 801d4da:	4b4a      	ldr	r3, [pc, #296]	; (801d604 <GUI_MEMDEV_Paint1Static+0x180>)
 801d4dc:	9301      	str	r3, [sp, #4]
 801d4de:	f04f 0a01 	mov.w	sl, #1
 801d4e2:	4649      	mov	r1, r9
 801d4e4:	4640      	mov	r0, r8
 801d4e6:	462b      	mov	r3, r5
 801d4e8:	4622      	mov	r2, r4
 801d4ea:	f8cd b008 	str.w	fp, [sp, #8]
 801d4ee:	f8cd a000 	str.w	sl, [sp]
 801d4f2:	f7ff fce7 	bl	801cec4 <GUI_MEMDEV__CreateFixed>
 801d4f6:	4680      	mov	r8, r0
 801d4f8:	4630      	mov	r0, r6
 801d4fa:	f7f2 fa35 	bl	800f968 <GUI_ALLOC_LockH>
 801d4fe:	9007      	str	r0, [sp, #28]
 801d500:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 801d504:	f1b8 0f00 	cmp.w	r8, #0
 801d508:	d060      	beq.n	801d5cc <GUI_MEMDEV_Paint1Static+0x148>
 801d50a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801d50c:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801d618 <GUI_MEMDEV_Paint1Static+0x194>
 801d510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d514:	6283      	str	r3, [r0, #40]	; 0x28
 801d516:	a807      	add	r0, sp, #28
 801d518:	f7f2 fa38 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d51c:	4640      	mov	r0, r8
 801d51e:	f7ff fdfb 	bl	801d118 <GUI_MEMDEV_Select>
 801d522:	9005      	str	r0, [sp, #20]
 801d524:	4650      	mov	r0, sl
 801d526:	f001 fa49 	bl	801e9bc <GUI__AlphaPreserveTrans>
 801d52a:	4640      	mov	r0, r8
 801d52c:	f7ff ff14 	bl	801d358 <GUI_MEMDEV_GetDataPtr>
 801d530:	4a35      	ldr	r2, [pc, #212]	; (801d608 <GUI_MEMDEV_Paint1Static+0x184>)
 801d532:	4b36      	ldr	r3, [pc, #216]	; (801d60c <GUI_MEMDEV_Paint1Static+0x188>)
 801d534:	7819      	ldrb	r1, [r3, #0]
 801d536:	6813      	ldr	r3, [r2, #0]
 801d538:	fb05 f204 	mul.w	r2, r5, r4
 801d53c:	0092      	lsls	r2, r2, #2
 801d53e:	4c34      	ldr	r4, [pc, #208]	; (801d610 <GUI_MEMDEV_Paint1Static+0x18c>)
 801d540:	4798      	blx	r3
 801d542:	4630      	mov	r0, r6
 801d544:	6825      	ldr	r5, [r4, #0]
 801d546:	f8c9 6000 	str.w	r6, [r9]
 801d54a:	f7fb fc4f 	bl	8018dec <WM_GetWindowOrgX>
 801d54e:	6020      	str	r0, [r4, #0]
 801d550:	4630      	mov	r0, r6
 801d552:	f7fa fdfb 	bl	801814c <WM__Paint1>
 801d556:	2200      	movs	r2, #0
 801d558:	4610      	mov	r0, r2
 801d55a:	6025      	str	r5, [r4, #0]
 801d55c:	f8c9 2000 	str.w	r2, [r9]
 801d560:	f001 fa2c 	bl	801e9bc <GUI__AlphaPreserveTrans>
 801d564:	9805      	ldr	r0, [sp, #20]
 801d566:	f7ff fdd7 	bl	801d118 <GUI_MEMDEV_Select>
 801d56a:	4630      	mov	r0, r6
 801d56c:	f7f2 f9f2 	bl	800f954 <GUI_ALLOC_h2p>
 801d570:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d572:	b9f0      	cbnz	r0, 801d5b2 <GUI_MEMDEV_Paint1Static+0x12e>
 801d574:	3f01      	subs	r7, #1
 801d576:	d18c      	bne.n	801d492 <GUI_MEMDEV_Paint1Static+0xe>
 801d578:	b009      	add	sp, #36	; 0x24
 801d57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d57e:	4650      	mov	r0, sl
 801d580:	f7f2 f9f2 	bl	800f968 <GUI_ALLOC_LockH>
 801d584:	4603      	mov	r3, r0
 801d586:	a808      	add	r0, sp, #32
 801d588:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801d58c:	f840 3d08 	str.w	r3, [r0, #-8]!
 801d590:	f9b3 4006 	ldrsh.w	r4, [r3, #6]
 801d594:	f7f2 f9fa 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d598:	45a8      	cmp	r8, r5
 801d59a:	d00f      	beq.n	801d5bc <GUI_MEMDEV_Paint1Static+0x138>
 801d59c:	464a      	mov	r2, r9
 801d59e:	4641      	mov	r1, r8
 801d5a0:	4650      	mov	r0, sl
 801d5a2:	f7ff ff33 	bl	801d40c <GUI_MEMDEV_SetOrg>
 801d5a6:	4630      	mov	r0, r6
 801d5a8:	f7f2 f9d4 	bl	800f954 <GUI_ALLOC_h2p>
 801d5ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d5ae:	2800      	cmp	r0, #0
 801d5b0:	d0e0      	beq.n	801d574 <GUI_MEMDEV_Paint1Static+0xf0>
 801d5b2:	f000 f925 	bl	801d800 <GUI_MEMDEV_Write>
 801d5b6:	b009      	add	sp, #36	; 0x24
 801d5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d5bc:	45a1      	cmp	r9, r4
 801d5be:	d0d4      	beq.n	801d56a <GUI_MEMDEV_Paint1Static+0xe6>
 801d5c0:	464a      	mov	r2, r9
 801d5c2:	4641      	mov	r1, r8
 801d5c4:	4650      	mov	r0, sl
 801d5c6:	f7ff ff21 	bl	801d40c <GUI_MEMDEV_SetOrg>
 801d5ca:	e7ec      	b.n	801d5a6 <GUI_MEMDEV_Paint1Static+0x122>
 801d5cc:	a807      	add	r0, sp, #28
 801d5ce:	f7f2 f9dd 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d5d2:	4630      	mov	r0, r6
 801d5d4:	f7fa fdba 	bl	801814c <WM__Paint1>
 801d5d8:	e7cc      	b.n	801d574 <GUI_MEMDEV_Paint1Static+0xf0>
 801d5da:	f7f5 ff1b 	bl	8013414 <LCD_GetXSize>
 801d5de:	4682      	mov	sl, r0
 801d5e0:	f7f5 ff2e 	bl	8013440 <LCD_GetYSize>
 801d5e4:	4554      	cmp	r4, sl
 801d5e6:	dc03      	bgt.n	801d5f0 <GUI_MEMDEV_Paint1Static+0x16c>
 801d5e8:	4285      	cmp	r5, r0
 801d5ea:	f77f af76 	ble.w	801d4da <GUI_MEMDEV_Paint1Static+0x56>
 801d5ee:	46a2      	mov	sl, r4
 801d5f0:	4285      	cmp	r5, r0
 801d5f2:	bfa8      	it	ge
 801d5f4:	4605      	movge	r5, r0
 801d5f6:	462a      	mov	r2, r5
 801d5f8:	4651      	mov	r1, sl
 801d5fa:	4630      	mov	r0, r6
 801d5fc:	f7fb fd72 	bl	80190e4 <WM_SetSize>
 801d600:	4654      	mov	r4, sl
 801d602:	e76a      	b.n	801d4da <GUI_MEMDEV_Paint1Static+0x56>
 801d604:	0803141c 	.word	0x0803141c
 801d608:	200000cc 	.word	0x200000cc
 801d60c:	2002e4d0 	.word	0x2002e4d0
 801d610:	20030830 	.word	0x20030830
 801d614:	08026304 	.word	0x08026304
 801d618:	200308e0 	.word	0x200308e0

0801d61c <GUI_USAGE_BM_AddPixel>:
 801d61c:	b470      	push	{r4, r5, r6}
 801d61e:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801d622:	6903      	ldr	r3, [r0, #16]
 801d624:	f9b0 4000 	ldrsh.w	r4, [r0]
 801d628:	1b92      	subs	r2, r2, r6
 801d62a:	fb03 f202 	mul.w	r2, r3, r2
 801d62e:	1b09      	subs	r1, r1, r4
 801d630:	3214      	adds	r2, #20
 801d632:	eb02 02e1 	add.w	r2, r2, r1, asr #3
 801d636:	2580      	movs	r5, #128	; 0x80
 801d638:	5c83      	ldrb	r3, [r0, r2]
 801d63a:	f001 0107 	and.w	r1, r1, #7
 801d63e:	fa45 f101 	asr.w	r1, r5, r1
 801d642:	4319      	orrs	r1, r3
 801d644:	5481      	strb	r1, [r0, r2]
 801d646:	bc70      	pop	{r4, r5, r6}
 801d648:	4770      	bx	lr
 801d64a:	bf00      	nop

0801d64c <GUI_USAGE_BM_GetNextDirty>:
 801d64c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801d650:	4293      	cmp	r3, r2
 801d652:	dd3c      	ble.n	801d6ce <GUI_USAGE_BM_GetNextDirty+0x82>
 801d654:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d656:	680d      	ldr	r5, [r1, #0]
 801d658:	f9b0 7004 	ldrsh.w	r7, [r0, #4]
 801d65c:	42bd      	cmp	r5, r7
 801d65e:	da34      	bge.n	801d6ca <GUI_USAGE_BM_GetNextDirty+0x7e>
 801d660:	6906      	ldr	r6, [r0, #16]
 801d662:	ea4f 0ee5 	mov.w	lr, r5, asr #3
 801d666:	fb06 e602 	mla	r6, r6, r2, lr
 801d66a:	3614      	adds	r6, #20
 801d66c:	f005 0307 	and.w	r3, r5, #7
 801d670:	5d84      	ldrb	r4, [r0, r6]
 801d672:	fa04 f303 	lsl.w	r3, r4, r3
 801d676:	3f01      	subs	r7, #1
 801d678:	3601      	adds	r6, #1
 801d67a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801d67e:	ebce 02e7 	rsb	r2, lr, r7, asr #3
 801d682:	4430      	add	r0, r6
 801d684:	d108      	bne.n	801d698 <GUI_USAGE_BM_GetNextDirty+0x4c>
 801d686:	b322      	cbz	r2, 801d6d2 <GUI_USAGE_BM_GetNextDirty+0x86>
 801d688:	f810 3b01 	ldrb.w	r3, [r0], #1
 801d68c:	3508      	adds	r5, #8
 801d68e:	f025 0507 	bic.w	r5, r5, #7
 801d692:	3a01      	subs	r2, #1
 801d694:	2b00      	cmp	r3, #0
 801d696:	d0f6      	beq.n	801d686 <GUI_USAGE_BM_GetNextDirty+0x3a>
 801d698:	061e      	lsls	r6, r3, #24
 801d69a:	d434      	bmi.n	801d706 <GUI_USAGE_BM_GetNextDirty+0xba>
 801d69c:	005b      	lsls	r3, r3, #1
 801d69e:	b2db      	uxtb	r3, r3
 801d6a0:	061c      	lsls	r4, r3, #24
 801d6a2:	f105 0501 	add.w	r5, r5, #1
 801d6a6:	d5f9      	bpl.n	801d69c <GUI_USAGE_BM_GetNextDirty+0x50>
 801d6a8:	065f      	lsls	r7, r3, #25
 801d6aa:	462c      	mov	r4, r5
 801d6ac:	d505      	bpl.n	801d6ba <GUI_USAGE_BM_GetNextDirty+0x6e>
 801d6ae:	005b      	lsls	r3, r3, #1
 801d6b0:	b2db      	uxtb	r3, r3
 801d6b2:	065e      	lsls	r6, r3, #25
 801d6b4:	f104 0401 	add.w	r4, r4, #1
 801d6b8:	d4f9      	bmi.n	801d6ae <GUI_USAGE_BM_GetNextDirty+0x62>
 801d6ba:	f004 0307 	and.w	r3, r4, #7
 801d6be:	2b07      	cmp	r3, #7
 801d6c0:	d009      	beq.n	801d6d6 <GUI_USAGE_BM_GetNextDirty+0x8a>
 801d6c2:	1b62      	subs	r2, r4, r5
 801d6c4:	1c50      	adds	r0, r2, #1
 801d6c6:	600d      	str	r5, [r1, #0]
 801d6c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6ca:	2000      	movs	r0, #0
 801d6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6ce:	2000      	movs	r0, #0
 801d6d0:	4770      	bx	lr
 801d6d2:	4610      	mov	r0, r2
 801d6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d6d6:	2a00      	cmp	r2, #0
 801d6d8:	ddf3      	ble.n	801d6c2 <GUI_USAGE_BM_GetNextDirty+0x76>
 801d6da:	7806      	ldrb	r6, [r0, #0]
 801d6dc:	2eff      	cmp	r6, #255	; 0xff
 801d6de:	f100 0701 	add.w	r7, r0, #1
 801d6e2:	d10d      	bne.n	801d700 <GUI_USAGE_BM_GetNextDirty+0xb4>
 801d6e4:	1883      	adds	r3, r0, r2
 801d6e6:	e003      	b.n	801d6f0 <GUI_USAGE_BM_GetNextDirty+0xa4>
 801d6e8:	f817 6b01 	ldrb.w	r6, [r7], #1
 801d6ec:	2eff      	cmp	r6, #255	; 0xff
 801d6ee:	d107      	bne.n	801d700 <GUI_USAGE_BM_GetNextDirty+0xb4>
 801d6f0:	42bb      	cmp	r3, r7
 801d6f2:	f104 0408 	add.w	r4, r4, #8
 801d6f6:	d1f7      	bne.n	801d6e8 <GUI_USAGE_BM_GetNextDirty+0x9c>
 801d6f8:	e7e3      	b.n	801d6c2 <GUI_USAGE_BM_GetNextDirty+0x76>
 801d6fa:	0076      	lsls	r6, r6, #1
 801d6fc:	b2f6      	uxtb	r6, r6
 801d6fe:	3401      	adds	r4, #1
 801d700:	0633      	lsls	r3, r6, #24
 801d702:	d4fa      	bmi.n	801d6fa <GUI_USAGE_BM_GetNextDirty+0xae>
 801d704:	e7dd      	b.n	801d6c2 <GUI_USAGE_BM_GetNextDirty+0x76>
 801d706:	2bff      	cmp	r3, #255	; 0xff
 801d708:	bf08      	it	eq
 801d70a:	1dec      	addeq	r4, r5, #7
 801d70c:	d0d5      	beq.n	801d6ba <GUI_USAGE_BM_GetNextDirty+0x6e>
 801d70e:	e7cb      	b.n	801d6a8 <GUI_USAGE_BM_GetNextDirty+0x5c>

0801d710 <_GUI_USAGE_BM_Delete>:
 801d710:	f7f2 bacc 	b.w	800fcac <GUI_ALLOC_Free>

0801d714 <GUI_USAGE_BM_Clear>:
 801d714:	4603      	mov	r3, r0
 801d716:	2100      	movs	r1, #0
 801d718:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801d71c:	691b      	ldr	r3, [r3, #16]
 801d71e:	3014      	adds	r0, #20
 801d720:	fb03 f202 	mul.w	r2, r3, r2
 801d724:	f001 b9b7 	b.w	801ea96 <memset>

0801d728 <GUI_USAGE_BM_AddHLine>:
 801d728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d72a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801d72e:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
 801d732:	1b0c      	subs	r4, r1, r4
 801d734:	42ac      	cmp	r4, r5
 801d736:	da2b      	bge.n	801d790 <GUI_USAGE_BM_AddHLine+0x68>
 801d738:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801d73c:	6905      	ldr	r5, [r0, #16]
 801d73e:	4423      	add	r3, r4
 801d740:	3b01      	subs	r3, #1
 801d742:	1a52      	subs	r2, r2, r1
 801d744:	10e6      	asrs	r6, r4, #3
 801d746:	fb05 6502 	mla	r5, r5, r2, r6
 801d74a:	43df      	mvns	r7, r3
 801d74c:	f007 0707 	and.w	r7, r7, #7
 801d750:	21ff      	movs	r1, #255	; 0xff
 801d752:	3514      	adds	r5, #20
 801d754:	f004 0407 	and.w	r4, r4, #7
 801d758:	fa01 f207 	lsl.w	r2, r1, r7
 801d75c:	fa41 f404 	asr.w	r4, r1, r4
 801d760:	ebd6 06e3 	rsbs	r6, r6, r3, asr #3
 801d764:	b2d7      	uxtb	r7, r2
 801d766:	b2e4      	uxtb	r4, r4
 801d768:	eb00 0205 	add.w	r2, r0, r5
 801d76c:	5d43      	ldrb	r3, [r0, r5]
 801d76e:	d010      	beq.n	801d792 <GUI_USAGE_BM_AddHLine+0x6a>
 801d770:	3e01      	subs	r6, #1
 801d772:	431c      	orrs	r4, r3
 801d774:	2e00      	cmp	r6, #0
 801d776:	f102 0301 	add.w	r3, r2, #1
 801d77a:	5544      	strb	r4, [r0, r5]
 801d77c:	dd05      	ble.n	801d78a <GUI_USAGE_BM_AddHLine+0x62>
 801d77e:	4618      	mov	r0, r3
 801d780:	4632      	mov	r2, r6
 801d782:	f001 f988 	bl	801ea96 <memset>
 801d786:	4603      	mov	r3, r0
 801d788:	4433      	add	r3, r6
 801d78a:	781c      	ldrb	r4, [r3, #0]
 801d78c:	433c      	orrs	r4, r7
 801d78e:	701c      	strb	r4, [r3, #0]
 801d790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d792:	403c      	ands	r4, r7
 801d794:	431c      	orrs	r4, r3
 801d796:	5544      	strb	r4, [r0, r5]
 801d798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d79a:	bf00      	nop

0801d79c <GUI_USAGE_BM_Create>:
 801d79c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d7a0:	f102 040f 	add.w	r4, r2, #15
 801d7a4:	1124      	asrs	r4, r4, #4
 801d7a6:	0064      	lsls	r4, r4, #1
 801d7a8:	461e      	mov	r6, r3
 801d7aa:	fb03 f304 	mul.w	r3, r3, r4
 801d7ae:	b083      	sub	sp, #12
 801d7b0:	4680      	mov	r8, r0
 801d7b2:	f103 0014 	add.w	r0, r3, #20
 801d7b6:	4617      	mov	r7, r2
 801d7b8:	4689      	mov	r9, r1
 801d7ba:	f7f2 faef 	bl	800fd9c <GUI_ALLOC_AllocZero>
 801d7be:	4605      	mov	r5, r0
 801d7c0:	b1b8      	cbz	r0, 801d7f2 <GUI_USAGE_BM_Create+0x56>
 801d7c2:	f7f3 ff5b 	bl	801167c <GUI_Lock>
 801d7c6:	4628      	mov	r0, r5
 801d7c8:	f7f2 f8ce 	bl	800f968 <GUI_ALLOC_LockH>
 801d7cc:	4601      	mov	r1, r0
 801d7ce:	a802      	add	r0, sp, #8
 801d7d0:	4a0a      	ldr	r2, [pc, #40]	; (801d7fc <GUI_USAGE_BM_Create+0x60>)
 801d7d2:	f840 1d04 	str.w	r1, [r0, #-4]!
 801d7d6:	2301      	movs	r3, #1
 801d7d8:	808f      	strh	r7, [r1, #4]
 801d7da:	80ce      	strh	r6, [r1, #6]
 801d7dc:	610c      	str	r4, [r1, #16]
 801d7de:	f8a1 8000 	strh.w	r8, [r1]
 801d7e2:	f8a1 9002 	strh.w	r9, [r1, #2]
 801d7e6:	608a      	str	r2, [r1, #8]
 801d7e8:	818b      	strh	r3, [r1, #12]
 801d7ea:	f7f2 f8cf 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d7ee:	f7f3 ff3b 	bl	8011668 <GUI_Unlock>
 801d7f2:	4628      	mov	r0, r5
 801d7f4:	b003      	add	sp, #12
 801d7f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d7fa:	bf00      	nop
 801d7fc:	080328b4 	.word	0x080328b4

0801d800 <GUI_MEMDEV_Write>:
 801d800:	b900      	cbnz	r0, 801d804 <GUI_MEMDEV_Write+0x4>
 801d802:	4770      	bx	lr
 801d804:	b570      	push	{r4, r5, r6, lr}
 801d806:	4604      	mov	r4, r0
 801d808:	b084      	sub	sp, #16
 801d80a:	f7f3 ff37 	bl	801167c <GUI_Lock>
 801d80e:	4620      	mov	r0, r4
 801d810:	f7f2 f8aa 	bl	800f968 <GUI_ALLOC_LockH>
 801d814:	4601      	mov	r1, r0
 801d816:	a801      	add	r0, sp, #4
 801d818:	f9b1 6004 	ldrsh.w	r6, [r1, #4]
 801d81c:	f9b1 5006 	ldrsh.w	r5, [r1, #6]
 801d820:	890a      	ldrh	r2, [r1, #8]
 801d822:	894b      	ldrh	r3, [r1, #10]
 801d824:	9101      	str	r1, [sp, #4]
 801d826:	4432      	add	r2, r6
 801d828:	442b      	add	r3, r5
 801d82a:	3a01      	subs	r2, #1
 801d82c:	3b01      	subs	r3, #1
 801d82e:	f8ad 6008 	strh.w	r6, [sp, #8]
 801d832:	f8ad 200c 	strh.w	r2, [sp, #12]
 801d836:	f8ad 300e 	strh.w	r3, [sp, #14]
 801d83a:	f8ad 500a 	strh.w	r5, [sp, #10]
 801d83e:	f7f2 f8a5 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d842:	a802      	add	r0, sp, #8
 801d844:	f7fa fbb6 	bl	8017fb4 <WM__InitIVRSearch>
 801d848:	b140      	cbz	r0, 801d85c <GUI_MEMDEV_Write+0x5c>
 801d84a:	462a      	mov	r2, r5
 801d84c:	4631      	mov	r1, r6
 801d84e:	4620      	mov	r0, r4
 801d850:	f7ff fb1a 	bl	801ce88 <GUI_MEMDEV__WriteToActiveAt>
 801d854:	f7fa fa88 	bl	8017d68 <WM__GetNextIVR>
 801d858:	2800      	cmp	r0, #0
 801d85a:	d1f6      	bne.n	801d84a <GUI_MEMDEV_Write+0x4a>
 801d85c:	f7f3 ff04 	bl	8011668 <GUI_Unlock>
 801d860:	b004      	add	sp, #16
 801d862:	bd70      	pop	{r4, r5, r6, pc}

0801d864 <GUI_MEMDEV__WriteToActiveOpaque>:
 801d864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d868:	b0a1      	sub	sp, #132	; 0x84
 801d86a:	910d      	str	r1, [sp, #52]	; 0x34
 801d86c:	b910      	cbnz	r0, 801d874 <GUI_MEMDEV__WriteToActiveOpaque+0x10>
 801d86e:	b021      	add	sp, #132	; 0x84
 801d870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d874:	4692      	mov	sl, r2
 801d876:	4607      	mov	r7, r0
 801d878:	f7f2 f876 	bl	800f968 <GUI_ALLOC_LockH>
 801d87c:	ab20      	add	r3, sp, #128	; 0x80
 801d87e:	6944      	ldr	r4, [r0, #20]
 801d880:	f843 0d1c 	str.w	r0, [r3, #-28]!
 801d884:	4618      	mov	r0, r3
 801d886:	f7f2 f881 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d88a:	4638      	mov	r0, r7
 801d88c:	f7ff fbb6 	bl	801cffc <GUI_MEMDEV_GetBitsPerPixel>
 801d890:	2808      	cmp	r0, #8
 801d892:	4605      	mov	r5, r0
 801d894:	dd02      	ble.n	801d89c <GUI_MEMDEV__WriteToActiveOpaque+0x38>
 801d896:	2c00      	cmp	r4, #0
 801d898:	f000 80d9 	beq.w	801da4e <GUI_MEMDEV__WriteToActiveOpaque+0x1ea>
 801d89c:	2301      	movs	r3, #1
 801d89e:	f04f 0b00 	mov.w	fp, #0
 801d8a2:	4638      	mov	r0, r7
 801d8a4:	931f      	str	r3, [sp, #124]	; 0x7c
 801d8a6:	930a      	str	r3, [sp, #40]	; 0x28
 801d8a8:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 801d8ac:	f7f2 f85c 	bl	800f968 <GUI_ALLOC_LockH>
 801d8b0:	6801      	ldr	r1, [r0, #0]
 801d8b2:	f8df 8468 	ldr.w	r8, [pc, #1128]	; 801dd1c <GUI_MEMDEV__WriteToActiveOpaque+0x4b8>
 801d8b6:	6909      	ldr	r1, [r1, #16]
 801d8b8:	4604      	mov	r4, r0
 801d8ba:	f8d8 0000 	ldr.w	r0, [r8]
 801d8be:	68e3      	ldr	r3, [r4, #12]
 801d8c0:	684d      	ldr	r5, [r1, #4]
 801d8c2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 801d8c6:	930f      	str	r3, [sp, #60]	; 0x3c
 801d8c8:	ae20      	add	r6, sp, #128	; 0x80
 801d8ca:	6923      	ldr	r3, [r4, #16]
 801d8cc:	9114      	str	r1, [sp, #80]	; 0x50
 801d8ce:	7c40      	ldrb	r0, [r0, #17]
 801d8d0:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 801d8d4:	9309      	str	r3, [sp, #36]	; 0x24
 801d8d6:	f846 4d14 	str.w	r4, [r6, #-20]!
 801d8da:	f8d4 9014 	ldr.w	r9, [r4, #20]
 801d8de:	9116      	str	r1, [sp, #88]	; 0x58
 801d8e0:	f7f5 fdda 	bl	8013498 <GUI_GetBitsPerPixelEx>
 801d8e4:	f8d8 1000 	ldr.w	r1, [r8]
 801d8e8:	9008      	str	r0, [sp, #32]
 801d8ea:	7c48      	ldrb	r0, [r1, #17]
 801d8ec:	f7f5 fdee 	bl	80134cc <GUI_GetpfIndex2ColorEx>
 801d8f0:	4604      	mov	r4, r0
 801d8f2:	4630      	mov	r0, r6
 801d8f4:	f7f2 f84a 	bl	800f98c <GUI_ALLOC_UnlockH>
 801d8f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d8fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d8fc:	2a08      	cmp	r2, #8
 801d8fe:	f240 80a0 	bls.w	801da42 <GUI_MEMDEV__WriteToActiveOpaque+0x1de>
 801d902:	2a10      	cmp	r2, #16
 801d904:	4613      	mov	r3, r2
 801d906:	bf8c      	ite	hi
 801d908:	2304      	movhi	r3, #4
 801d90a:	2302      	movls	r3, #2
 801d90c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801d910:	930e      	str	r3, [sp, #56]	; 0x38
 801d912:	42a5      	cmp	r5, r4
 801d914:	f000 81ac 	beq.w	801dc70 <GUI_MEMDEV__WriteToActiveOpaque+0x40c>
 801d918:	f8d8 3000 	ldr.w	r3, [r8]
 801d91c:	7c58      	ldrb	r0, [r3, #17]
 801d91e:	f7f5 fddd 	bl	80134dc <GUI_GetpfColor2IndexEx>
 801d922:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d924:	4606      	mov	r6, r0
 801d926:	0098      	lsls	r0, r3, #2
 801d928:	f7f2 f806 	bl	800f938 <GUI_ALLOC_AllocNoInit>
 801d92c:	9012      	str	r0, [sp, #72]	; 0x48
 801d92e:	2800      	cmp	r0, #0
 801d930:	d09d      	beq.n	801d86e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 801d932:	4638      	mov	r0, r7
 801d934:	f7ff fd10 	bl	801d358 <GUI_MEMDEV_GetDataPtr>
 801d938:	4607      	mov	r7, r0
 801d93a:	f1b9 0f00 	cmp.w	r9, #0
 801d93e:	f000 80f5 	beq.w	801db2c <GUI_MEMDEV__WriteToActiveOpaque+0x2c8>
 801d942:	4648      	mov	r0, r9
 801d944:	f7f2 f810 	bl	800f968 <GUI_ALLOC_LockH>
 801d948:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d94a:	901c      	str	r0, [sp, #112]	; 0x70
 801d94c:	2b00      	cmp	r3, #0
 801d94e:	f340 818b 	ble.w	801dc68 <GUI_MEMDEV__WriteToActiveOpaque+0x404>
 801d952:	2300      	movs	r3, #0
 801d954:	930c      	str	r3, [sp, #48]	; 0x30
 801d956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d958:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 801d95c:	18fb      	adds	r3, r7, r3
 801d95e:	9315      	str	r3, [sp, #84]	; 0x54
 801d960:	ab1d      	add	r3, sp, #116	; 0x74
 801d962:	9311      	str	r3, [sp, #68]	; 0x44
 801d964:	f04f 0801 	mov.w	r8, #1
 801d968:	4619      	mov	r1, r3
 801d96a:	6883      	ldr	r3, [r0, #8]
 801d96c:	2200      	movs	r2, #0
 801d96e:	921d      	str	r2, [sp, #116]	; 0x74
 801d970:	695b      	ldr	r3, [r3, #20]
 801d972:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d974:	4798      	blx	r3
 801d976:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d978:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d97a:	1a9b      	subs	r3, r3, r2
 801d97c:	930b      	str	r3, [sp, #44]	; 0x2c
 801d97e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d980:	4283      	cmp	r3, r0
 801d982:	4604      	mov	r4, r0
 801d984:	f000 8131 	beq.w	801dbea <GUI_MEMDEV__WriteToActiveOpaque+0x386>
 801d988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d98a:	2b01      	cmp	r3, #1
 801d98c:	f000 80f2 	beq.w	801db74 <GUI_MEMDEV__WriteToActiveOpaque+0x310>
 801d990:	2800      	cmp	r0, #0
 801d992:	d045      	beq.n	801da20 <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 801d994:	ab1a      	add	r3, sp, #104	; 0x68
 801d996:	9313      	str	r3, [sp, #76]	; 0x4c
 801d998:	9812      	ldr	r0, [sp, #72]	; 0x48
 801d99a:	f7f1 ffe5 	bl	800f968 <GUI_ALLOC_LockH>
 801d99e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d9a0:	901a      	str	r0, [sp, #104]	; 0x68
 801d9a2:	2b08      	cmp	r3, #8
 801d9a4:	4607      	mov	r7, r0
 801d9a6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801d9a8:	f240 80d4 	bls.w	801db54 <GUI_MEMDEV__WriteToActiveOpaque+0x2f0>
 801d9ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d9ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801d9b0:	46a3      	mov	fp, r4
 801d9b2:	fb02 1a03 	mla	sl, r2, r3, r1
 801d9b6:	4681      	mov	r9, r0
 801d9b8:	f83a 0b02 	ldrh.w	r0, [sl], #2
 801d9bc:	47a8      	blx	r5
 801d9be:	47b0      	blx	r6
 801d9c0:	f1bb 0b01 	subs.w	fp, fp, #1
 801d9c4:	f849 0b04 	str.w	r0, [r9], #4
 801d9c8:	d1f6      	bne.n	801d9b8 <GUI_MEMDEV__WriteToActiveOpaque+0x154>
 801d9ca:	9b08      	ldr	r3, [sp, #32]
 801d9cc:	2b1f      	cmp	r3, #31
 801d9ce:	d804      	bhi.n	801d9da <GUI_MEMDEV__WriteToActiveOpaque+0x176>
 801d9d0:	4638      	mov	r0, r7
 801d9d2:	461a      	mov	r2, r3
 801d9d4:	4621      	mov	r1, r4
 801d9d6:	f7fe fe69 	bl	801c6ac <GUI__CompactPixelIndices>
 801d9da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d9dc:	9205      	str	r2, [sp, #20]
 801d9de:	2200      	movs	r2, #0
 801d9e0:	9203      	str	r2, [sp, #12]
 801d9e2:	9a08      	ldr	r2, [sp, #32]
 801d9e4:	981d      	ldr	r0, [sp, #116]	; 0x74
 801d9e6:	9202      	str	r2, [sp, #8]
 801d9e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801d9ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801d9ec:	9910      	ldr	r1, [sp, #64]	; 0x40
 801d9ee:	9304      	str	r3, [sp, #16]
 801d9f0:	4410      	add	r0, r2
 801d9f2:	2301      	movs	r3, #1
 801d9f4:	4622      	mov	r2, r4
 801d9f6:	f8cd 8004 	str.w	r8, [sp, #4]
 801d9fa:	f8cd 8000 	str.w	r8, [sp]
 801d9fe:	f7f5 f8ff 	bl	8012c00 <LCD_DrawBitmap>
 801da02:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801da04:	f7f1 ffc2 	bl	800f98c <GUI_ALLOC_UnlockH>
 801da08:	981c      	ldr	r0, [sp, #112]	; 0x70
 801da0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801da0c:	6882      	ldr	r2, [r0, #8]
 801da0e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801da10:	6957      	ldr	r7, [r2, #20]
 801da12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801da14:	441c      	add	r4, r3
 801da16:	941d      	str	r4, [sp, #116]	; 0x74
 801da18:	47b8      	blx	r7
 801da1a:	4604      	mov	r4, r0
 801da1c:	2800      	cmp	r0, #0
 801da1e:	d1bb      	bne.n	801d998 <GUI_MEMDEV__WriteToActiveOpaque+0x134>
 801da20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801da22:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801da24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801da26:	440a      	add	r2, r1
 801da28:	9215      	str	r2, [sp, #84]	; 0x54
 801da2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801da2c:	3201      	adds	r2, #1
 801da2e:	9210      	str	r2, [sp, #64]	; 0x40
 801da30:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801da32:	3301      	adds	r3, #1
 801da34:	429a      	cmp	r2, r3
 801da36:	930c      	str	r3, [sp, #48]	; 0x30
 801da38:	f000 8116 	beq.w	801dc68 <GUI_MEMDEV__WriteToActiveOpaque+0x404>
 801da3c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801da3e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801da40:	e793      	b.n	801d96a <GUI_MEMDEV__WriteToActiveOpaque+0x106>
 801da42:	2a01      	cmp	r2, #1
 801da44:	d16e      	bne.n	801db24 <GUI_MEMDEV__WriteToActiveOpaque+0x2c0>
 801da46:	ab1e      	add	r3, sp, #120	; 0x78
 801da48:	920e      	str	r2, [sp, #56]	; 0x38
 801da4a:	930a      	str	r3, [sp, #40]	; 0x28
 801da4c:	e761      	b.n	801d912 <GUI_MEMDEV__WriteToActiveOpaque+0xae>
 801da4e:	4638      	mov	r0, r7
 801da50:	f7f1 ff8a 	bl	800f968 <GUI_ALLOC_LockH>
 801da54:	ab20      	add	r3, sp, #128	; 0x80
 801da56:	f9b0 8008 	ldrsh.w	r8, [r0, #8]
 801da5a:	f843 0d10 	str.w	r0, [r3, #-16]!
 801da5e:	4602      	mov	r2, r0
 801da60:	6801      	ldr	r1, [r0, #0]
 801da62:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 801da66:	9008      	str	r0, [sp, #32]
 801da68:	4618      	mov	r0, r3
 801da6a:	690e      	ldr	r6, [r1, #16]
 801da6c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 801da70:	9209      	str	r2, [sp, #36]	; 0x24
 801da72:	930e      	str	r3, [sp, #56]	; 0x38
 801da74:	f7f1 ff8a 	bl	800f98c <GUI_ALLOC_UnlockH>
 801da78:	48a8      	ldr	r0, [pc, #672]	; (801dd1c <GUI_MEMDEV__WriteToActiveOpaque+0x4b8>)
 801da7a:	49a9      	ldr	r1, [pc, #676]	; (801dd20 <GUI_MEMDEV__WriteToActiveOpaque+0x4bc>)
 801da7c:	6800      	ldr	r0, [r0, #0]
 801da7e:	6873      	ldr	r3, [r6, #4]
 801da80:	7c40      	ldrb	r0, [r0, #17]
 801da82:	930c      	str	r3, [sp, #48]	; 0x30
 801da84:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801da88:	690c      	ldr	r4, [r1, #16]
 801da8a:	6823      	ldr	r3, [r4, #0]
 801da8c:	930a      	str	r3, [sp, #40]	; 0x28
 801da8e:	f7f5 fd03 	bl	8013498 <GUI_GetBitsPerPixelEx>
 801da92:	2808      	cmp	r0, #8
 801da94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801da96:	d940      	bls.n	801db1a <GUI_MEMDEV__WriteToActiveOpaque+0x2b6>
 801da98:	2810      	cmp	r0, #16
 801da9a:	bf8c      	ite	hi
 801da9c:	2320      	movhi	r3, #32
 801da9e:	2310      	movls	r3, #16
 801daa0:	9309      	str	r3, [sp, #36]	; 0x24
 801daa2:	bf8c      	ite	hi
 801daa4:	f04f 0904 	movhi.w	r9, #4
 801daa8:	f04f 0902 	movls.w	r9, #2
 801daac:	42a6      	cmp	r6, r4
 801daae:	f000 822d 	beq.w	801df0c <GUI_MEMDEV__WriteToActiveOpaque+0x6a8>
 801dab2:	2d20      	cmp	r5, #32
 801dab4:	f000 819e 	beq.w	801ddf4 <GUI_MEMDEV__WriteToActiveOpaque+0x590>
 801dab8:	2d10      	cmp	r5, #16
 801daba:	f47f aed8 	bne.w	801d86e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 801dabe:	fb08 f009 	mul.w	r0, r8, r9
 801dac2:	f7f1 ff39 	bl	800f938 <GUI_ALLOC_AllocNoInit>
 801dac6:	9010      	str	r0, [sp, #64]	; 0x40
 801dac8:	2800      	cmp	r0, #0
 801daca:	f43f aed0 	beq.w	801d86e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 801dace:	f7f1 ff4b 	bl	800f968 <GUI_ALLOC_LockH>
 801dad2:	901e      	str	r0, [sp, #120]	; 0x78
 801dad4:	4638      	mov	r0, r7
 801dad6:	f7f1 ff47 	bl	800f968 <GUI_ALLOC_LockH>
 801dada:	901c      	str	r0, [sp, #112]	; 0x70
 801dadc:	6923      	ldr	r3, [r4, #16]
 801dade:	f100 0218 	add.w	r2, r0, #24
 801dae2:	920b      	str	r2, [sp, #44]	; 0x2c
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	f000 8222 	beq.w	801df2e <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 801daea:	6973      	ldr	r3, [r6, #20]
 801daec:	2b00      	cmp	r3, #0
 801daee:	f000 821e 	beq.w	801df2e <GUI_MEMDEV__WriteToActiveOpaque+0x6ca>
 801daf2:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801daf6:	0080      	lsls	r0, r0, #2
 801daf8:	f7f1 ff1e 	bl	800f938 <GUI_ALLOC_AllocNoInit>
 801dafc:	900f      	str	r0, [sp, #60]	; 0x3c
 801dafe:	2800      	cmp	r0, #0
 801db00:	f040 8269 	bne.w	801dfd6 <GUI_MEMDEV__WriteToActiveOpaque+0x772>
 801db04:	901d      	str	r0, [sp, #116]	; 0x74
 801db06:	980e      	ldr	r0, [sp, #56]	; 0x38
 801db08:	f7f1 ff40 	bl	800f98c <GUI_ALLOC_UnlockH>
 801db0c:	a81e      	add	r0, sp, #120	; 0x78
 801db0e:	f7f1 ff3d 	bl	800f98c <GUI_ALLOC_UnlockH>
 801db12:	9810      	ldr	r0, [sp, #64]	; 0x40
 801db14:	f7f2 f8ca 	bl	800fcac <GUI_ALLOC_Free>
 801db18:	e6a9      	b.n	801d86e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 801db1a:	2308      	movs	r3, #8
 801db1c:	9309      	str	r3, [sp, #36]	; 0x24
 801db1e:	f04f 0901 	mov.w	r9, #1
 801db22:	e7c3      	b.n	801daac <GUI_MEMDEV__WriteToActiveOpaque+0x248>
 801db24:	930e      	str	r3, [sp, #56]	; 0x38
 801db26:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801db2a:	e6f2      	b.n	801d912 <GUI_MEMDEV__WriteToActiveOpaque+0xae>
 801db2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801db2e:	9305      	str	r3, [sp, #20]
 801db30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801db32:	9303      	str	r3, [sp, #12]
 801db34:	2401      	movs	r4, #1
 801db36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db38:	9004      	str	r0, [sp, #16]
 801db3a:	9302      	str	r3, [sp, #8]
 801db3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801db3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801db40:	980d      	ldr	r0, [sp, #52]	; 0x34
 801db42:	9401      	str	r4, [sp, #4]
 801db44:	4651      	mov	r1, sl
 801db46:	9400      	str	r4, [sp, #0]
 801db48:	f7f5 f85a 	bl	8012c00 <LCD_DrawBitmap>
 801db4c:	9812      	ldr	r0, [sp, #72]	; 0x48
 801db4e:	f7f2 f8ad 	bl	800fcac <GUI_ALLOC_Free>
 801db52:	e68c      	b.n	801d86e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 801db54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801db56:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801db58:	46a1      	mov	r9, r4
 801db5a:	fb02 1b03 	mla	fp, r2, r3, r1
 801db5e:	4682      	mov	sl, r0
 801db60:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801db64:	47a8      	blx	r5
 801db66:	47b0      	blx	r6
 801db68:	f1b9 0901 	subs.w	r9, r9, #1
 801db6c:	f84a 0b04 	str.w	r0, [sl], #4
 801db70:	d1f6      	bne.n	801db60 <GUI_MEMDEV__WriteToActiveOpaque+0x2fc>
 801db72:	e72a      	b.n	801d9ca <GUI_MEMDEV__WriteToActiveOpaque+0x166>
 801db74:	2800      	cmp	r0, #0
 801db76:	f43f af53 	beq.w	801da20 <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 801db7a:	9617      	str	r6, [sp, #92]	; 0x5c
 801db7c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801db7e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801db80:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 801db84:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 801db88:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801db8c:	9513      	str	r5, [sp, #76]	; 0x4c
 801db8e:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 801db92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801db94:	9605      	str	r6, [sp, #20]
 801db96:	f00e 0007 	and.w	r0, lr, #7
 801db9a:	9006      	str	r0, [sp, #24]
 801db9c:	eb0a 000e 	add.w	r0, sl, lr
 801dba0:	f1be 0f00 	cmp.w	lr, #0
 801dba4:	bfb8      	it	lt
 801dba6:	f10e 0e07 	addlt.w	lr, lr, #7
 801dbaa:	eb05 0eee 	add.w	lr, r5, lr, asr #3
 801dbae:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801dbb0:	f8cd e010 	str.w	lr, [sp, #16]
 801dbb4:	4622      	mov	r2, r4
 801dbb6:	2301      	movs	r3, #1
 801dbb8:	4649      	mov	r1, r9
 801dbba:	9503      	str	r5, [sp, #12]
 801dbbc:	f8cd 8008 	str.w	r8, [sp, #8]
 801dbc0:	f8cd 8004 	str.w	r8, [sp, #4]
 801dbc4:	f8cd 8000 	str.w	r8, [sp]
 801dbc8:	f7f4 ff0c 	bl	80129e4 <LCD__DrawBitmap_1bpp>
 801dbcc:	981c      	ldr	r0, [sp, #112]	; 0x70
 801dbce:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dbd0:	6882      	ldr	r2, [r0, #8]
 801dbd2:	441c      	add	r4, r3
 801dbd4:	4659      	mov	r1, fp
 801dbd6:	6953      	ldr	r3, [r2, #20]
 801dbd8:	941d      	str	r4, [sp, #116]	; 0x74
 801dbda:	463a      	mov	r2, r7
 801dbdc:	4798      	blx	r3
 801dbde:	4604      	mov	r4, r0
 801dbe0:	2800      	cmp	r0, #0
 801dbe2:	d1d4      	bne.n	801db8e <GUI_MEMDEV__WriteToActiveOpaque+0x32a>
 801dbe4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801dbe6:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801dbe8:	e71a      	b.n	801da20 <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 801dbea:	9812      	ldr	r0, [sp, #72]	; 0x48
 801dbec:	f7f1 febc 	bl	800f968 <GUI_ALLOC_LockH>
 801dbf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbf2:	901a      	str	r0, [sp, #104]	; 0x68
 801dbf4:	2b08      	cmp	r3, #8
 801dbf6:	4681      	mov	r9, r0
 801dbf8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801dbfa:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801dbfe:	4604      	mov	r4, r0
 801dc00:	d929      	bls.n	801dc56 <GUI_MEMDEV__WriteToActiveOpaque+0x3f2>
 801dc02:	f83a 0b02 	ldrh.w	r0, [sl], #2
 801dc06:	47a8      	blx	r5
 801dc08:	47b0      	blx	r6
 801dc0a:	3f01      	subs	r7, #1
 801dc0c:	f844 0b04 	str.w	r0, [r4], #4
 801dc10:	d1f7      	bne.n	801dc02 <GUI_MEMDEV__WriteToActiveOpaque+0x39e>
 801dc12:	9b08      	ldr	r3, [sp, #32]
 801dc14:	2b1f      	cmp	r3, #31
 801dc16:	d804      	bhi.n	801dc22 <GUI_MEMDEV__WriteToActiveOpaque+0x3be>
 801dc18:	4648      	mov	r0, r9
 801dc1a:	461a      	mov	r2, r3
 801dc1c:	9914      	ldr	r1, [sp, #80]	; 0x50
 801dc1e:	f7fe fd45 	bl	801c6ac <GUI__CompactPixelIndices>
 801dc22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801dc24:	9205      	str	r2, [sp, #20]
 801dc26:	ab20      	add	r3, sp, #128	; 0x80
 801dc28:	461a      	mov	r2, r3
 801dc2a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801dc2c:	f852 3d18 	ldr.w	r3, [r2, #-24]!
 801dc30:	9304      	str	r3, [sp, #16]
 801dc32:	4614      	mov	r4, r2
 801dc34:	2200      	movs	r2, #0
 801dc36:	9203      	str	r2, [sp, #12]
 801dc38:	9a08      	ldr	r2, [sp, #32]
 801dc3a:	9202      	str	r2, [sp, #8]
 801dc3c:	f8cd 8004 	str.w	r8, [sp, #4]
 801dc40:	f8cd 8000 	str.w	r8, [sp]
 801dc44:	2301      	movs	r3, #1
 801dc46:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dc48:	9910      	ldr	r1, [sp, #64]	; 0x40
 801dc4a:	f7f4 ffd9 	bl	8012c00 <LCD_DrawBitmap>
 801dc4e:	4620      	mov	r0, r4
 801dc50:	f7f1 fe9c 	bl	800f98c <GUI_ALLOC_UnlockH>
 801dc54:	e6e4      	b.n	801da20 <GUI_MEMDEV__WriteToActiveOpaque+0x1bc>
 801dc56:	f81a 0b01 	ldrb.w	r0, [sl], #1
 801dc5a:	47a8      	blx	r5
 801dc5c:	47b0      	blx	r6
 801dc5e:	3f01      	subs	r7, #1
 801dc60:	f844 0b04 	str.w	r0, [r4], #4
 801dc64:	d1f7      	bne.n	801dc56 <GUI_MEMDEV__WriteToActiveOpaque+0x3f2>
 801dc66:	e7d4      	b.n	801dc12 <GUI_MEMDEV__WriteToActiveOpaque+0x3ae>
 801dc68:	a81c      	add	r0, sp, #112	; 0x70
 801dc6a:	f7f1 fe8f 	bl	800f98c <GUI_ALLOC_UnlockH>
 801dc6e:	e76d      	b.n	801db4c <GUI_MEMDEV__WriteToActiveOpaque+0x2e8>
 801dc70:	4638      	mov	r0, r7
 801dc72:	f7ff fb71 	bl	801d358 <GUI_MEMDEV_GetDataPtr>
 801dc76:	4607      	mov	r7, r0
 801dc78:	f1b9 0f00 	cmp.w	r9, #0
 801dc7c:	f000 80a9 	beq.w	801ddd2 <GUI_MEMDEV__WriteToActiveOpaque+0x56e>
 801dc80:	4648      	mov	r0, r9
 801dc82:	f7f1 fe71 	bl	800f968 <GUI_ALLOC_LockH>
 801dc86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801dc88:	901c      	str	r0, [sp, #112]	; 0x70
 801dc8a:	2b00      	cmp	r3, #0
 801dc8c:	f340 809d 	ble.w	801ddca <GUI_MEMDEV__WriteToActiveOpaque+0x566>
 801dc90:	2600      	movs	r6, #0
 801dc92:	ab1d      	add	r3, sp, #116	; 0x74
 801dc94:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 801dc98:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 801dc9c:	46b1      	mov	r9, r6
 801dc9e:	2501      	movs	r5, #1
 801dca0:	4698      	mov	r8, r3
 801dca2:	6883      	ldr	r3, [r0, #8]
 801dca4:	f8cd 9074 	str.w	r9, [sp, #116]	; 0x74
 801dca8:	695b      	ldr	r3, [r3, #20]
 801dcaa:	4632      	mov	r2, r6
 801dcac:	4641      	mov	r1, r8
 801dcae:	4798      	blx	r3
 801dcb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801dcb2:	4283      	cmp	r3, r0
 801dcb4:	4604      	mov	r4, r0
 801dcb6:	d02d      	beq.n	801dd14 <GUI_MEMDEV__WriteToActiveOpaque+0x4b0>
 801dcb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcba:	2b01      	cmp	r3, #1
 801dcbc:	d055      	beq.n	801dd6a <GUI_MEMDEV__WriteToActiveOpaque+0x506>
 801dcbe:	b308      	cbz	r0, 801dd04 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 801dcc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dcc2:	eb03 0b06 	add.w	fp, r3, r6
 801dcc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dcc8:	981d      	ldr	r0, [sp, #116]	; 0x74
 801dcca:	9305      	str	r3, [sp, #20]
 801dccc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dcce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dcd0:	9203      	str	r2, [sp, #12]
 801dcd2:	fb03 7300 	mla	r3, r3, r0, r7
 801dcd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dcd8:	9202      	str	r2, [sp, #8]
 801dcda:	9304      	str	r3, [sp, #16]
 801dcdc:	4622      	mov	r2, r4
 801dcde:	4450      	add	r0, sl
 801dce0:	2301      	movs	r3, #1
 801dce2:	4659      	mov	r1, fp
 801dce4:	9501      	str	r5, [sp, #4]
 801dce6:	9500      	str	r5, [sp, #0]
 801dce8:	f7f4 ff8a 	bl	8012c00 <LCD_DrawBitmap>
 801dcec:	981c      	ldr	r0, [sp, #112]	; 0x70
 801dcee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801dcf0:	6882      	ldr	r2, [r0, #8]
 801dcf2:	441c      	add	r4, r3
 801dcf4:	4641      	mov	r1, r8
 801dcf6:	6953      	ldr	r3, [r2, #20]
 801dcf8:	941d      	str	r4, [sp, #116]	; 0x74
 801dcfa:	4632      	mov	r2, r6
 801dcfc:	4798      	blx	r3
 801dcfe:	4604      	mov	r4, r0
 801dd00:	2800      	cmp	r0, #0
 801dd02:	d1e0      	bne.n	801dcc6 <GUI_MEMDEV__WriteToActiveOpaque+0x462>
 801dd04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dd06:	3601      	adds	r6, #1
 801dd08:	441f      	add	r7, r3
 801dd0a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801dd0c:	42b3      	cmp	r3, r6
 801dd0e:	dd5c      	ble.n	801ddca <GUI_MEMDEV__WriteToActiveOpaque+0x566>
 801dd10:	981c      	ldr	r0, [sp, #112]	; 0x70
 801dd12:	e7c6      	b.n	801dca2 <GUI_MEMDEV__WriteToActiveOpaque+0x43e>
 801dd14:	9708      	str	r7, [sp, #32]
 801dd16:	46b3      	mov	fp, r6
 801dd18:	461f      	mov	r7, r3
 801dd1a:	e004      	b.n	801dd26 <GUI_MEMDEV__WriteToActiveOpaque+0x4c2>
 801dd1c:	200000a8 	.word	0x200000a8
 801dd20:	20030870 	.word	0x20030870
 801dd24:	46a3      	mov	fp, r4
 801dd26:	981c      	ldr	r0, [sp, #112]	; 0x70
 801dd28:	6883      	ldr	r3, [r0, #8]
 801dd2a:	f10b 0401 	add.w	r4, fp, #1
 801dd2e:	695b      	ldr	r3, [r3, #20]
 801dd30:	4622      	mov	r2, r4
 801dd32:	4641      	mov	r1, r8
 801dd34:	4798      	blx	r3
 801dd36:	4287      	cmp	r7, r0
 801dd38:	d0f4      	beq.n	801dd24 <GUI_MEMDEV__WriteToActiveOpaque+0x4c0>
 801dd3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801dd3c:	9102      	str	r1, [sp, #8]
 801dd3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801dd40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801dd42:	9f08      	ldr	r7, [sp, #32]
 801dd44:	9205      	str	r2, [sp, #20]
 801dd46:	ebc6 030b 	rsb	r3, r6, fp
 801dd4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801dd4c:	9704      	str	r7, [sp, #16]
 801dd4e:	4431      	add	r1, r6
 801dd50:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801dd52:	9203      	str	r2, [sp, #12]
 801dd54:	3301      	adds	r3, #1
 801dd56:	9501      	str	r5, [sp, #4]
 801dd58:	9500      	str	r5, [sp, #0]
 801dd5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dd5c:	4650      	mov	r0, sl
 801dd5e:	fb06 7703 	mla	r7, r6, r3, r7
 801dd62:	4626      	mov	r6, r4
 801dd64:	f7f4 ff4c 	bl	8012c00 <LCD_DrawBitmap>
 801dd68:	e7cf      	b.n	801dd0a <GUI_MEMDEV__WriteToActiveOpaque+0x4a6>
 801dd6a:	2800      	cmp	r0, #0
 801dd6c:	d0ca      	beq.n	801dd04 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 801dd6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dd70:	9608      	str	r6, [sp, #32]
 801dd72:	eb03 0b06 	add.w	fp, r3, r6
 801dd76:	f8dd e074 	ldr.w	lr, [sp, #116]	; 0x74
 801dd7a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801dd7c:	9005      	str	r0, [sp, #20]
 801dd7e:	f00e 0007 	and.w	r0, lr, #7
 801dd82:	9006      	str	r0, [sp, #24]
 801dd84:	eb0a 000e 	add.w	r0, sl, lr
 801dd88:	f1be 0f00 	cmp.w	lr, #0
 801dd8c:	bfb8      	it	lt
 801dd8e:	f10e 0e07 	addlt.w	lr, lr, #7
 801dd92:	eb07 0eee 	add.w	lr, r7, lr, asr #3
 801dd96:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801dd98:	f8cd e010 	str.w	lr, [sp, #16]
 801dd9c:	4622      	mov	r2, r4
 801dd9e:	2301      	movs	r3, #1
 801dda0:	4659      	mov	r1, fp
 801dda2:	9603      	str	r6, [sp, #12]
 801dda4:	9502      	str	r5, [sp, #8]
 801dda6:	9501      	str	r5, [sp, #4]
 801dda8:	9500      	str	r5, [sp, #0]
 801ddaa:	f7f4 fe1b 	bl	80129e4 <LCD__DrawBitmap_1bpp>
 801ddae:	981c      	ldr	r0, [sp, #112]	; 0x70
 801ddb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ddb2:	6882      	ldr	r2, [r0, #8]
 801ddb4:	441c      	add	r4, r3
 801ddb6:	4641      	mov	r1, r8
 801ddb8:	6953      	ldr	r3, [r2, #20]
 801ddba:	941d      	str	r4, [sp, #116]	; 0x74
 801ddbc:	9a08      	ldr	r2, [sp, #32]
 801ddbe:	4798      	blx	r3
 801ddc0:	4604      	mov	r4, r0
 801ddc2:	2800      	cmp	r0, #0
 801ddc4:	d1d7      	bne.n	801dd76 <GUI_MEMDEV__WriteToActiveOpaque+0x512>
 801ddc6:	9e08      	ldr	r6, [sp, #32]
 801ddc8:	e79c      	b.n	801dd04 <GUI_MEMDEV__WriteToActiveOpaque+0x4a0>
 801ddca:	a81c      	add	r0, sp, #112	; 0x70
 801ddcc:	f7f1 fdde 	bl	800f98c <GUI_ALLOC_UnlockH>
 801ddd0:	e54d      	b.n	801d86e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 801ddd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ddd4:	9305      	str	r3, [sp, #20]
 801ddd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ddd8:	9303      	str	r3, [sp, #12]
 801ddda:	2401      	movs	r4, #1
 801dddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ddde:	9004      	str	r0, [sp, #16]
 801dde0:	9302      	str	r3, [sp, #8]
 801dde2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801dde4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801dde6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801dde8:	9401      	str	r4, [sp, #4]
 801ddea:	4651      	mov	r1, sl
 801ddec:	9400      	str	r4, [sp, #0]
 801ddee:	f7f4 ff07 	bl	8012c00 <LCD_DrawBitmap>
 801ddf2:	e53c      	b.n	801d86e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 801ddf4:	fb09 f008 	mul.w	r0, r9, r8
 801ddf8:	f7f1 fd9e 	bl	800f938 <GUI_ALLOC_AllocNoInit>
 801ddfc:	900b      	str	r0, [sp, #44]	; 0x2c
 801ddfe:	2800      	cmp	r0, #0
 801de00:	f43f ad35 	beq.w	801d86e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 801de04:	f7f1 fdb0 	bl	800f968 <GUI_ALLOC_LockH>
 801de08:	901e      	str	r0, [sp, #120]	; 0x78
 801de0a:	4638      	mov	r0, r7
 801de0c:	f7f1 fdac 	bl	800f968 <GUI_ALLOC_LockH>
 801de10:	901c      	str	r0, [sp, #112]	; 0x70
 801de12:	6925      	ldr	r5, [r4, #16]
 801de14:	f100 0718 	add.w	r7, r0, #24
 801de18:	b345      	cbz	r5, 801de6c <GUI_MEMDEV__WriteToActiveOpaque+0x608>
 801de1a:	ea4f 0b88 	mov.w	fp, r8, lsl #2
 801de1e:	2601      	movs	r6, #1
 801de20:	e019      	b.n	801de56 <GUI_MEMDEV__WriteToActiveOpaque+0x5f2>
 801de22:	f1b9 0f04 	cmp.w	r9, #4
 801de26:	d019      	beq.n	801de5c <GUI_MEMDEV__WriteToActiveOpaque+0x5f8>
 801de28:	f1b9 0f01 	cmp.w	r9, #1
 801de2c:	d016      	beq.n	801de5c <GUI_MEMDEV__WriteToActiveOpaque+0x5f8>
 801de2e:	2200      	movs	r2, #0
 801de30:	991e      	ldr	r1, [sp, #120]	; 0x78
 801de32:	9809      	ldr	r0, [sp, #36]	; 0x24
 801de34:	9002      	str	r0, [sp, #8]
 801de36:	2301      	movs	r3, #1
 801de38:	9205      	str	r2, [sp, #20]
 801de3a:	9203      	str	r2, [sp, #12]
 801de3c:	9104      	str	r1, [sp, #16]
 801de3e:	9601      	str	r6, [sp, #4]
 801de40:	4651      	mov	r1, sl
 801de42:	9600      	str	r6, [sp, #0]
 801de44:	4642      	mov	r2, r8
 801de46:	980d      	ldr	r0, [sp, #52]	; 0x34
 801de48:	449a      	add	sl, r3
 801de4a:	f7f4 fed9 	bl	8012c00 <LCD_DrawBitmap>
 801de4e:	9b08      	ldr	r3, [sp, #32]
 801de50:	3b01      	subs	r3, #1
 801de52:	9308      	str	r3, [sp, #32]
 801de54:	d050      	beq.n	801def8 <GUI_MEMDEV__WriteToActiveOpaque+0x694>
 801de56:	f1b9 0f02 	cmp.w	r9, #2
 801de5a:	d1e2      	bne.n	801de22 <GUI_MEMDEV__WriteToActiveOpaque+0x5be>
 801de5c:	4638      	mov	r0, r7
 801de5e:	991e      	ldr	r1, [sp, #120]	; 0x78
 801de60:	6925      	ldr	r5, [r4, #16]
 801de62:	464b      	mov	r3, r9
 801de64:	4642      	mov	r2, r8
 801de66:	47a8      	blx	r5
 801de68:	445f      	add	r7, fp
 801de6a:	e7e0      	b.n	801de2e <GUI_MEMDEV__WriteToActiveOpaque+0x5ca>
 801de6c:	950c      	str	r5, [sp, #48]	; 0x30
 801de6e:	2601      	movs	r6, #1
 801de70:	9c08      	ldr	r4, [sp, #32]
 801de72:	e014      	b.n	801de9e <GUI_MEMDEV__WriteToActiveOpaque+0x63a>
 801de74:	f1b9 0f04 	cmp.w	r9, #4
 801de78:	f000 818d 	beq.w	801e196 <GUI_MEMDEV__WriteToActiveOpaque+0x932>
 801de7c:	4599      	cmp	r9, r3
 801de7e:	f000 8135 	beq.w	801e0ec <GUI_MEMDEV__WriteToActiveOpaque+0x888>
 801de82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801de84:	9505      	str	r5, [sp, #20]
 801de86:	9503      	str	r5, [sp, #12]
 801de88:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801de8a:	9502      	str	r5, [sp, #8]
 801de8c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 801de8e:	9601      	str	r6, [sp, #4]
 801de90:	9600      	str	r6, [sp, #0]
 801de92:	9504      	str	r5, [sp, #16]
 801de94:	f7f4 feb4 	bl	8012c00 <LCD_DrawBitmap>
 801de98:	3c01      	subs	r4, #1
 801de9a:	d02d      	beq.n	801def8 <GUI_MEMDEV__WriteToActiveOpaque+0x694>
 801de9c:	46da      	mov	sl, fp
 801de9e:	2301      	movs	r3, #1
 801dea0:	f1b9 0f02 	cmp.w	r9, #2
 801dea4:	4651      	mov	r1, sl
 801dea6:	4642      	mov	r2, r8
 801dea8:	980d      	ldr	r0, [sp, #52]	; 0x34
 801deaa:	eb0a 0b03 	add.w	fp, sl, r3
 801deae:	d1e1      	bne.n	801de74 <GUI_MEMDEV__WriteToActiveOpaque+0x610>
 801deb0:	9408      	str	r4, [sp, #32]
 801deb2:	ea4f 0588 	mov.w	r5, r8, lsl #2
 801deb6:	2401      	movs	r4, #1
 801deb8:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 801debc:	46bb      	mov	fp, r7
 801debe:	4646      	mov	r6, r8
 801dec0:	f85b 0b04 	ldr.w	r0, [fp], #4
 801dec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dec6:	4798      	blx	r3
 801dec8:	3e01      	subs	r6, #1
 801deca:	f829 0b02 	strh.w	r0, [r9], #2
 801dece:	d1f7      	bne.n	801dec0 <GUI_MEMDEV__WriteToActiveOpaque+0x65c>
 801ded0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ded2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ded4:	9202      	str	r2, [sp, #8]
 801ded6:	9304      	str	r3, [sp, #16]
 801ded8:	4651      	mov	r1, sl
 801deda:	2301      	movs	r3, #1
 801dedc:	9605      	str	r6, [sp, #20]
 801dede:	9603      	str	r6, [sp, #12]
 801dee0:	9401      	str	r4, [sp, #4]
 801dee2:	9400      	str	r4, [sp, #0]
 801dee4:	4642      	mov	r2, r8
 801dee6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801dee8:	449a      	add	sl, r3
 801deea:	f7f4 fe89 	bl	8012c00 <LCD_DrawBitmap>
 801deee:	9b08      	ldr	r3, [sp, #32]
 801def0:	3b01      	subs	r3, #1
 801def2:	442f      	add	r7, r5
 801def4:	9308      	str	r3, [sp, #32]
 801def6:	d1df      	bne.n	801deb8 <GUI_MEMDEV__WriteToActiveOpaque+0x654>
 801def8:	980e      	ldr	r0, [sp, #56]	; 0x38
 801defa:	f7f1 fd47 	bl	800f98c <GUI_ALLOC_UnlockH>
 801defe:	a81e      	add	r0, sp, #120	; 0x78
 801df00:	f7f1 fd44 	bl	800f98c <GUI_ALLOC_UnlockH>
 801df04:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801df06:	f7f1 fed1 	bl	800fcac <GUI_ALLOC_Free>
 801df0a:	e4b0      	b.n	801d86e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 801df0c:	2401      	movs	r4, #1
 801df0e:	3218      	adds	r2, #24
 801df10:	2600      	movs	r6, #0
 801df12:	9204      	str	r2, [sp, #16]
 801df14:	f8cd b00c 	str.w	fp, [sp, #12]
 801df18:	9502      	str	r5, [sp, #8]
 801df1a:	9b08      	ldr	r3, [sp, #32]
 801df1c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801df1e:	9605      	str	r6, [sp, #20]
 801df20:	4642      	mov	r2, r8
 801df22:	4651      	mov	r1, sl
 801df24:	9401      	str	r4, [sp, #4]
 801df26:	9400      	str	r4, [sp, #0]
 801df28:	f7f4 fe6a 	bl	8012c00 <LCD_DrawBitmap>
 801df2c:	e49f      	b.n	801d86e <GUI_MEMDEV__WriteToActiveOpaque+0xa>
 801df2e:	2500      	movs	r5, #0
 801df30:	2601      	movs	r6, #1
 801df32:	9c08      	ldr	r4, [sp, #32]
 801df34:	e016      	b.n	801df64 <GUI_MEMDEV__WriteToActiveOpaque+0x700>
 801df36:	f1b9 0f04 	cmp.w	r9, #4
 801df3a:	f000 80fc 	beq.w	801e136 <GUI_MEMDEV__WriteToActiveOpaque+0x8d2>
 801df3e:	4599      	cmp	r9, r3
 801df40:	f000 80a4 	beq.w	801e08c <GUI_MEMDEV__WriteToActiveOpaque+0x828>
 801df44:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 801df46:	9708      	str	r7, [sp, #32]
 801df48:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801df4a:	9702      	str	r7, [sp, #8]
 801df4c:	9f08      	ldr	r7, [sp, #32]
 801df4e:	9505      	str	r5, [sp, #20]
 801df50:	9503      	str	r5, [sp, #12]
 801df52:	9601      	str	r6, [sp, #4]
 801df54:	9600      	str	r6, [sp, #0]
 801df56:	9704      	str	r7, [sp, #16]
 801df58:	f7f4 fe52 	bl	8012c00 <LCD_DrawBitmap>
 801df5c:	3c01      	subs	r4, #1
 801df5e:	f43f add2 	beq.w	801db06 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 801df62:	46da      	mov	sl, fp
 801df64:	2301      	movs	r3, #1
 801df66:	f1b9 0f02 	cmp.w	r9, #2
 801df6a:	4651      	mov	r1, sl
 801df6c:	4642      	mov	r2, r8
 801df6e:	980d      	ldr	r0, [sp, #52]	; 0x34
 801df70:	eb0a 0b03 	add.w	fp, sl, r3
 801df74:	d1df      	bne.n	801df36 <GUI_MEMDEV__WriteToActiveOpaque+0x6d2>
 801df76:	ea4f 0648 	mov.w	r6, r8, lsl #1
 801df7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801df7c:	9408      	str	r4, [sp, #32]
 801df7e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801df80:	960a      	str	r6, [sp, #40]	; 0x28
 801df82:	2401      	movs	r4, #1
 801df84:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801df86:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801df8a:	46c1      	mov	r9, r8
 801df8c:	f83b 0b02 	ldrh.w	r0, [fp], #2
 801df90:	47a8      	blx	r5
 801df92:	47b8      	blx	r7
 801df94:	f1b9 0901 	subs.w	r9, r9, #1
 801df98:	f826 0b02 	strh.w	r0, [r6], #2
 801df9c:	d1f6      	bne.n	801df8c <GUI_MEMDEV__WriteToActiveOpaque+0x728>
 801df9e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801dfa0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801dfa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dfa4:	9302      	str	r3, [sp, #8]
 801dfa6:	46b6      	mov	lr, r6
 801dfa8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801dfaa:	9204      	str	r2, [sp, #16]
 801dfac:	2301      	movs	r3, #1
 801dfae:	4651      	mov	r1, sl
 801dfb0:	44b6      	add	lr, r6
 801dfb2:	f8cd 9014 	str.w	r9, [sp, #20]
 801dfb6:	f8cd 900c 	str.w	r9, [sp, #12]
 801dfba:	9401      	str	r4, [sp, #4]
 801dfbc:	9400      	str	r4, [sp, #0]
 801dfbe:	4642      	mov	r2, r8
 801dfc0:	980d      	ldr	r0, [sp, #52]	; 0x34
 801dfc2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 801dfc6:	449a      	add	sl, r3
 801dfc8:	f7f4 fe1a 	bl	8012c00 <LCD_DrawBitmap>
 801dfcc:	9b08      	ldr	r3, [sp, #32]
 801dfce:	3b01      	subs	r3, #1
 801dfd0:	9308      	str	r3, [sp, #32]
 801dfd2:	d1d7      	bne.n	801df84 <GUI_MEMDEV__WriteToActiveOpaque+0x720>
 801dfd4:	e597      	b.n	801db06 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 801dfd6:	f7f1 fcc7 	bl	800f968 <GUI_ALLOC_LockH>
 801dfda:	901d      	str	r0, [sp, #116]	; 0x74
 801dfdc:	2800      	cmp	r0, #0
 801dfde:	f43f ad92 	beq.w	801db06 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 801dfe2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801dfe6:	4637      	mov	r7, r6
 801dfe8:	930a      	str	r3, [sp, #40]	; 0x28
 801dfea:	2501      	movs	r5, #1
 801dfec:	940c      	str	r4, [sp, #48]	; 0x30
 801dfee:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801dff0:	e019      	b.n	801e026 <GUI_MEMDEV__WriteToActiveOpaque+0x7c2>
 801dff2:	f1b9 0f04 	cmp.w	r9, #4
 801dff6:	d030      	beq.n	801e05a <GUI_MEMDEV__WriteToActiveOpaque+0x7f6>
 801dff8:	f1b9 0f01 	cmp.w	r9, #1
 801dffc:	d028      	beq.n	801e050 <GUI_MEMDEV__WriteToActiveOpaque+0x7ec>
 801dffe:	2200      	movs	r2, #0
 801e000:	991e      	ldr	r1, [sp, #120]	; 0x78
 801e002:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e004:	9002      	str	r0, [sp, #8]
 801e006:	2301      	movs	r3, #1
 801e008:	9205      	str	r2, [sp, #20]
 801e00a:	9203      	str	r2, [sp, #12]
 801e00c:	9104      	str	r1, [sp, #16]
 801e00e:	9501      	str	r5, [sp, #4]
 801e010:	4651      	mov	r1, sl
 801e012:	9500      	str	r5, [sp, #0]
 801e014:	4642      	mov	r2, r8
 801e016:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e018:	449a      	add	sl, r3
 801e01a:	f7f4 fdf1 	bl	8012c00 <LCD_DrawBitmap>
 801e01e:	9b08      	ldr	r3, [sp, #32]
 801e020:	3b01      	subs	r3, #1
 801e022:	9308      	str	r3, [sp, #32]
 801e024:	d02b      	beq.n	801e07e <GUI_MEMDEV__WriteToActiveOpaque+0x81a>
 801e026:	f1b9 0f02 	cmp.w	r9, #2
 801e02a:	d1e2      	bne.n	801dff2 <GUI_MEMDEV__WriteToActiveOpaque+0x78e>
 801e02c:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 801e030:	991d      	ldr	r1, [sp, #116]	; 0x74
 801e032:	464b      	mov	r3, r9
 801e034:	4642      	mov	r2, r8
 801e036:	4630      	mov	r0, r6
 801e038:	697c      	ldr	r4, [r7, #20]
 801e03a:	47a0      	blx	r4
 801e03c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e03e:	981d      	ldr	r0, [sp, #116]	; 0x74
 801e040:	4426      	add	r6, r4
 801e042:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e044:	4659      	mov	r1, fp
 801e046:	464b      	mov	r3, r9
 801e048:	4642      	mov	r2, r8
 801e04a:	6924      	ldr	r4, [r4, #16]
 801e04c:	47a0      	blx	r4
 801e04e:	e7d6      	b.n	801dffe <GUI_MEMDEV__WriteToActiveOpaque+0x79a>
 801e050:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 801e054:	991d      	ldr	r1, [sp, #116]	; 0x74
 801e056:	2302      	movs	r3, #2
 801e058:	e7ec      	b.n	801e034 <GUI_MEMDEV__WriteToActiveOpaque+0x7d0>
 801e05a:	4630      	mov	r0, r6
 801e05c:	991d      	ldr	r1, [sp, #116]	; 0x74
 801e05e:	697c      	ldr	r4, [r7, #20]
 801e060:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 801e064:	2302      	movs	r3, #2
 801e066:	4642      	mov	r2, r8
 801e068:	47a0      	blx	r4
 801e06a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801e06c:	981d      	ldr	r0, [sp, #116]	; 0x74
 801e06e:	6924      	ldr	r4, [r4, #16]
 801e070:	464b      	mov	r3, r9
 801e072:	4659      	mov	r1, fp
 801e074:	4642      	mov	r2, r8
 801e076:	47a0      	blx	r4
 801e078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e07a:	441e      	add	r6, r3
 801e07c:	e7bf      	b.n	801dffe <GUI_MEMDEV__WriteToActiveOpaque+0x79a>
 801e07e:	a81d      	add	r0, sp, #116	; 0x74
 801e080:	f7f1 fc84 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e084:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e086:	f7f1 fe11 	bl	800fcac <GUI_ALLOC_Free>
 801e08a:	e53c      	b.n	801db06 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 801e08c:	fa08 f603 	lsl.w	r6, r8, r3
 801e090:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e092:	9408      	str	r4, [sp, #32]
 801e094:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e096:	960a      	str	r6, [sp, #40]	; 0x28
 801e098:	464c      	mov	r4, r9
 801e09a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801e09c:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801e0a0:	46c1      	mov	r9, r8
 801e0a2:	f83b 0b02 	ldrh.w	r0, [fp], #2
 801e0a6:	47a8      	blx	r5
 801e0a8:	47b8      	blx	r7
 801e0aa:	f1b9 0901 	subs.w	r9, r9, #1
 801e0ae:	f806 0b01 	strb.w	r0, [r6], #1
 801e0b2:	d1f6      	bne.n	801e0a2 <GUI_MEMDEV__WriteToActiveOpaque+0x83e>
 801e0b4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801e0b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e0ba:	9302      	str	r3, [sp, #8]
 801e0bc:	46b6      	mov	lr, r6
 801e0be:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801e0c0:	9204      	str	r2, [sp, #16]
 801e0c2:	2301      	movs	r3, #1
 801e0c4:	4651      	mov	r1, sl
 801e0c6:	44b6      	add	lr, r6
 801e0c8:	f8cd 9014 	str.w	r9, [sp, #20]
 801e0cc:	f8cd 900c 	str.w	r9, [sp, #12]
 801e0d0:	9401      	str	r4, [sp, #4]
 801e0d2:	9400      	str	r4, [sp, #0]
 801e0d4:	4642      	mov	r2, r8
 801e0d6:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e0d8:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 801e0dc:	449a      	add	sl, r3
 801e0de:	f7f4 fd8f 	bl	8012c00 <LCD_DrawBitmap>
 801e0e2:	9b08      	ldr	r3, [sp, #32]
 801e0e4:	3b01      	subs	r3, #1
 801e0e6:	9308      	str	r3, [sp, #32]
 801e0e8:	d1d7      	bne.n	801e09a <GUI_MEMDEV__WriteToActiveOpaque+0x836>
 801e0ea:	e50c      	b.n	801db06 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 801e0ec:	9408      	str	r4, [sp, #32]
 801e0ee:	ea4f 0588 	mov.w	r5, r8, lsl #2
 801e0f2:	464c      	mov	r4, r9
 801e0f4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 801e0f8:	46bb      	mov	fp, r7
 801e0fa:	4646      	mov	r6, r8
 801e0fc:	f85b 0b04 	ldr.w	r0, [fp], #4
 801e100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e102:	4798      	blx	r3
 801e104:	3e01      	subs	r6, #1
 801e106:	f809 0b01 	strb.w	r0, [r9], #1
 801e10a:	d1f7      	bne.n	801e0fc <GUI_MEMDEV__WriteToActiveOpaque+0x898>
 801e10c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e10e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e110:	9202      	str	r2, [sp, #8]
 801e112:	9304      	str	r3, [sp, #16]
 801e114:	4651      	mov	r1, sl
 801e116:	2301      	movs	r3, #1
 801e118:	9605      	str	r6, [sp, #20]
 801e11a:	9603      	str	r6, [sp, #12]
 801e11c:	9401      	str	r4, [sp, #4]
 801e11e:	9400      	str	r4, [sp, #0]
 801e120:	4642      	mov	r2, r8
 801e122:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e124:	449a      	add	sl, r3
 801e126:	f7f4 fd6b 	bl	8012c00 <LCD_DrawBitmap>
 801e12a:	9b08      	ldr	r3, [sp, #32]
 801e12c:	3b01      	subs	r3, #1
 801e12e:	442f      	add	r7, r5
 801e130:	9308      	str	r3, [sp, #32]
 801e132:	d1df      	bne.n	801e0f4 <GUI_MEMDEV__WriteToActiveOpaque+0x890>
 801e134:	e6e0      	b.n	801def8 <GUI_MEMDEV__WriteToActiveOpaque+0x694>
 801e136:	ea4f 0648 	mov.w	r6, r8, lsl #1
 801e13a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e13c:	9408      	str	r4, [sp, #32]
 801e13e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e140:	960a      	str	r6, [sp, #40]	; 0x28
 801e142:	2401      	movs	r4, #1
 801e144:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 801e146:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 801e14a:	46c1      	mov	r9, r8
 801e14c:	f83b 0b02 	ldrh.w	r0, [fp], #2
 801e150:	47a8      	blx	r5
 801e152:	47b8      	blx	r7
 801e154:	f1b9 0901 	subs.w	r9, r9, #1
 801e158:	f846 0b04 	str.w	r0, [r6], #4
 801e15c:	d1f6      	bne.n	801e14c <GUI_MEMDEV__WriteToActiveOpaque+0x8e8>
 801e15e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801e160:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e164:	9302      	str	r3, [sp, #8]
 801e166:	46b6      	mov	lr, r6
 801e168:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801e16a:	9204      	str	r2, [sp, #16]
 801e16c:	2301      	movs	r3, #1
 801e16e:	4651      	mov	r1, sl
 801e170:	44b6      	add	lr, r6
 801e172:	f8cd 9014 	str.w	r9, [sp, #20]
 801e176:	f8cd 900c 	str.w	r9, [sp, #12]
 801e17a:	9401      	str	r4, [sp, #4]
 801e17c:	9400      	str	r4, [sp, #0]
 801e17e:	4642      	mov	r2, r8
 801e180:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e182:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 801e186:	449a      	add	sl, r3
 801e188:	f7f4 fd3a 	bl	8012c00 <LCD_DrawBitmap>
 801e18c:	9b08      	ldr	r3, [sp, #32]
 801e18e:	3b01      	subs	r3, #1
 801e190:	9308      	str	r3, [sp, #32]
 801e192:	d1d7      	bne.n	801e144 <GUI_MEMDEV__WriteToActiveOpaque+0x8e0>
 801e194:	e4b7      	b.n	801db06 <GUI_MEMDEV__WriteToActiveOpaque+0x2a2>
 801e196:	9408      	str	r4, [sp, #32]
 801e198:	ea4f 0588 	mov.w	r5, r8, lsl #2
 801e19c:	2401      	movs	r4, #1
 801e19e:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 801e1a2:	46bb      	mov	fp, r7
 801e1a4:	4646      	mov	r6, r8
 801e1a6:	f85b 0b04 	ldr.w	r0, [fp], #4
 801e1aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e1ac:	4798      	blx	r3
 801e1ae:	3e01      	subs	r6, #1
 801e1b0:	f849 0b04 	str.w	r0, [r9], #4
 801e1b4:	d1f7      	bne.n	801e1a6 <GUI_MEMDEV__WriteToActiveOpaque+0x942>
 801e1b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e1b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e1ba:	9202      	str	r2, [sp, #8]
 801e1bc:	9304      	str	r3, [sp, #16]
 801e1be:	4651      	mov	r1, sl
 801e1c0:	2301      	movs	r3, #1
 801e1c2:	9605      	str	r6, [sp, #20]
 801e1c4:	9603      	str	r6, [sp, #12]
 801e1c6:	9401      	str	r4, [sp, #4]
 801e1c8:	9400      	str	r4, [sp, #0]
 801e1ca:	4642      	mov	r2, r8
 801e1cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 801e1ce:	449a      	add	sl, r3
 801e1d0:	f7f4 fd16 	bl	8012c00 <LCD_DrawBitmap>
 801e1d4:	9b08      	ldr	r3, [sp, #32]
 801e1d6:	3b01      	subs	r3, #1
 801e1d8:	442f      	add	r7, r5
 801e1da:	9308      	str	r3, [sp, #32]
 801e1dc:	d1df      	bne.n	801e19e <GUI_MEMDEV__WriteToActiveOpaque+0x93a>
 801e1de:	e68b      	b.n	801def8 <GUI_MEMDEV__WriteToActiveOpaque+0x694>

0801e1e0 <_cbInvalidateOne>:
 801e1e0:	f7f9 bb6a 	b.w	80178b8 <WM_InvalidateWindow>

0801e1e4 <WM_BringToTop>:
 801e1e4:	b530      	push	{r4, r5, lr}
 801e1e6:	4604      	mov	r4, r0
 801e1e8:	b083      	sub	sp, #12
 801e1ea:	f7f3 fa47 	bl	801167c <GUI_Lock>
 801e1ee:	b91c      	cbnz	r4, 801e1f8 <WM_BringToTop+0x14>
 801e1f0:	f7f3 fa3a 	bl	8011668 <GUI_Unlock>
 801e1f4:	b003      	add	sp, #12
 801e1f6:	bd30      	pop	{r4, r5, pc}
 801e1f8:	4620      	mov	r0, r4
 801e1fa:	f7f1 fbb5 	bl	800f968 <GUI_ALLOC_LockH>
 801e1fe:	6a03      	ldr	r3, [r0, #32]
 801e200:	9000      	str	r0, [sp, #0]
 801e202:	b343      	cbz	r3, 801e256 <WM_BringToTop+0x72>
 801e204:	6a82      	ldr	r2, [r0, #40]	; 0x28
 801e206:	0712      	lsls	r2, r2, #28
 801e208:	d40d      	bmi.n	801e226 <WM_BringToTop+0x42>
 801e20a:	4618      	mov	r0, r3
 801e20c:	f7f1 fbac 	bl	800f968 <GUI_ALLOC_LockH>
 801e210:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801e212:	9001      	str	r0, [sp, #4]
 801e214:	071b      	lsls	r3, r3, #28
 801e216:	d525      	bpl.n	801e264 <WM_BringToTop+0x80>
 801e218:	4668      	mov	r0, sp
 801e21a:	f7f1 fbb7 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e21e:	a801      	add	r0, sp, #4
 801e220:	f7f1 fbb4 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e224:	e7e4      	b.n	801e1f0 <WM_BringToTop+0xc>
 801e226:	4603      	mov	r3, r0
 801e228:	699d      	ldr	r5, [r3, #24]
 801e22a:	4668      	mov	r0, sp
 801e22c:	f7f1 fbae 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e230:	4620      	mov	r0, r4
 801e232:	f7f8 fc67 	bl	8016b04 <WM__RemoveWindowFromList>
 801e236:	4629      	mov	r1, r5
 801e238:	4620      	mov	r0, r4
 801e23a:	f7f8 fbf5 	bl	8016a28 <WM__InsertWindowIntoList>
 801e23e:	4620      	mov	r0, r4
 801e240:	f7f9 fb3a 	bl	80178b8 <WM_InvalidateWindow>
 801e244:	4620      	mov	r0, r4
 801e246:	2200      	movs	r2, #0
 801e248:	4909      	ldr	r1, [pc, #36]	; (801e270 <WM_BringToTop+0x8c>)
 801e24a:	f7fa fc9d 	bl	8018b88 <WM_ForEachDesc>
 801e24e:	f7f3 fa0b 	bl	8011668 <GUI_Unlock>
 801e252:	b003      	add	sp, #12
 801e254:	bd30      	pop	{r4, r5, pc}
 801e256:	4668      	mov	r0, sp
 801e258:	f7f1 fb98 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e25c:	f7f3 fa04 	bl	8011668 <GUI_Unlock>
 801e260:	b003      	add	sp, #12
 801e262:	bd30      	pop	{r4, r5, pc}
 801e264:	a801      	add	r0, sp, #4
 801e266:	f7f1 fb91 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e26a:	9b00      	ldr	r3, [sp, #0]
 801e26c:	e7dc      	b.n	801e228 <WM_BringToTop+0x44>
 801e26e:	bf00      	nop
 801e270:	0801e1e1 	.word	0x0801e1e1

0801e274 <WM_GetWindowSizeX>:
 801e274:	b510      	push	{r4, lr}
 801e276:	4604      	mov	r4, r0
 801e278:	b082      	sub	sp, #8
 801e27a:	f7f3 f9ff 	bl	801167c <GUI_Lock>
 801e27e:	b914      	cbnz	r4, 801e286 <WM_GetWindowSizeX+0x12>
 801e280:	f7f9 fd6c 	bl	8017d5c <WM_GetActiveWindow>
 801e284:	4604      	mov	r4, r0
 801e286:	4620      	mov	r0, r4
 801e288:	f7f1 fb6e 	bl	800f968 <GUI_ALLOC_LockH>
 801e28c:	aa02      	add	r2, sp, #8
 801e28e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e292:	f842 0d04 	str.w	r0, [r2, #-4]!
 801e296:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e29a:	4610      	mov	r0, r2
 801e29c:	1b1c      	subs	r4, r3, r4
 801e29e:	f7f1 fb75 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e2a2:	f7f3 f9e1 	bl	8011668 <GUI_Unlock>
 801e2a6:	3401      	adds	r4, #1
 801e2a8:	4620      	mov	r0, r4
 801e2aa:	b002      	add	sp, #8
 801e2ac:	bd10      	pop	{r4, pc}
 801e2ae:	bf00      	nop

0801e2b0 <WM_GetWindowSizeY>:
 801e2b0:	b510      	push	{r4, lr}
 801e2b2:	4604      	mov	r4, r0
 801e2b4:	b082      	sub	sp, #8
 801e2b6:	f7f3 f9e1 	bl	801167c <GUI_Lock>
 801e2ba:	b914      	cbnz	r4, 801e2c2 <WM_GetWindowSizeY+0x12>
 801e2bc:	f7f9 fd4e 	bl	8017d5c <WM_GetActiveWindow>
 801e2c0:	4604      	mov	r4, r0
 801e2c2:	4620      	mov	r0, r4
 801e2c4:	f7f1 fb50 	bl	800f968 <GUI_ALLOC_LockH>
 801e2c8:	aa02      	add	r2, sp, #8
 801e2ca:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 801e2ce:	f842 0d04 	str.w	r0, [r2, #-4]!
 801e2d2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e2d6:	4610      	mov	r0, r2
 801e2d8:	1b1c      	subs	r4, r3, r4
 801e2da:	f7f1 fb57 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e2de:	f7f3 f9c3 	bl	8011668 <GUI_Unlock>
 801e2e2:	3401      	adds	r4, #1
 801e2e4:	4620      	mov	r0, r4
 801e2e6:	b002      	add	sp, #8
 801e2e8:	bd10      	pop	{r4, pc}
 801e2ea:	bf00      	nop

0801e2ec <WM_PID__SetPrevState>:
 801e2ec:	b410      	push	{r4}
 801e2ee:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 801e2f2:	c807      	ldmia	r0, {r0, r1, r2}
 801e2f4:	4b03      	ldr	r3, [pc, #12]	; (801e304 <WM_PID__SetPrevState+0x18>)
 801e2f6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801e2fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801e2fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e302:	4770      	bx	lr
 801e304:	2002e4d4 	.word	0x2002e4d4

0801e308 <_Screen2hWin>:
 801e308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e30c:	b099      	sub	sp, #100	; 0x64
 801e30e:	9005      	str	r0, [sp, #20]
 801e310:	b910      	cbnz	r0, 801e318 <_Screen2hWin+0x10>
 801e312:	b019      	add	sp, #100	; 0x64
 801e314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e318:	4692      	mov	sl, r2
 801e31a:	4699      	mov	r9, r3
 801e31c:	468b      	mov	fp, r1
 801e31e:	f7f1 fb23 	bl	800f968 <GUI_ALLOC_LockH>
 801e322:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801e324:	900f      	str	r0, [sp, #60]	; 0x3c
 801e326:	079a      	lsls	r2, r3, #30
 801e328:	f140 8218 	bpl.w	801e75c <_Screen2hWin+0x454>
 801e32c:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e330:	459a      	cmp	sl, r3
 801e332:	f2c0 8213 	blt.w	801e75c <_Screen2hWin+0x454>
 801e336:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e33a:	459a      	cmp	sl, r3
 801e33c:	f300 820e 	bgt.w	801e75c <_Screen2hWin+0x454>
 801e340:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e344:	4599      	cmp	r9, r3
 801e346:	f2c0 8209 	blt.w	801e75c <_Screen2hWin+0x454>
 801e34a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e34e:	4599      	cmp	r9, r3
 801e350:	f300 8204 	bgt.w	801e75c <_Screen2hWin+0x454>
 801e354:	69c3      	ldr	r3, [r0, #28]
 801e356:	9308      	str	r3, [sp, #32]
 801e358:	2b00      	cmp	r3, #0
 801e35a:	f000 81f1 	beq.w	801e740 <_Screen2hWin+0x438>
 801e35e:	455b      	cmp	r3, fp
 801e360:	f000 81ee 	beq.w	801e740 <_Screen2hWin+0x438>
 801e364:	9b05      	ldr	r3, [sp, #20]
 801e366:	9808      	ldr	r0, [sp, #32]
 801e368:	930d      	str	r3, [sp, #52]	; 0x34
 801e36a:	f7f1 fafd 	bl	800f968 <GUI_ALLOC_LockH>
 801e36e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801e370:	9010      	str	r0, [sp, #64]	; 0x40
 801e372:	079b      	lsls	r3, r3, #30
 801e374:	f140 81d6 	bpl.w	801e724 <_Screen2hWin+0x41c>
 801e378:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e37c:	459a      	cmp	sl, r3
 801e37e:	f2c0 81d1 	blt.w	801e724 <_Screen2hWin+0x41c>
 801e382:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e386:	459a      	cmp	sl, r3
 801e388:	f300 81cc 	bgt.w	801e724 <_Screen2hWin+0x41c>
 801e38c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e390:	4599      	cmp	r9, r3
 801e392:	f2c0 81c7 	blt.w	801e724 <_Screen2hWin+0x41c>
 801e396:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e39a:	4599      	cmp	r9, r3
 801e39c:	f300 81c2 	bgt.w	801e724 <_Screen2hWin+0x41c>
 801e3a0:	69c3      	ldr	r3, [r0, #28]
 801e3a2:	9309      	str	r3, [sp, #36]	; 0x24
 801e3a4:	2b00      	cmp	r3, #0
 801e3a6:	f000 81d0 	beq.w	801e74a <_Screen2hWin+0x442>
 801e3aa:	459b      	cmp	fp, r3
 801e3ac:	f000 81cd 	beq.w	801e74a <_Screen2hWin+0x442>
 801e3b0:	9b08      	ldr	r3, [sp, #32]
 801e3b2:	9305      	str	r3, [sp, #20]
 801e3b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e3b6:	f7f1 fad7 	bl	800f968 <GUI_ALLOC_LockH>
 801e3ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801e3bc:	9011      	str	r0, [sp, #68]	; 0x44
 801e3be:	079f      	lsls	r7, r3, #30
 801e3c0:	f140 81a3 	bpl.w	801e70a <_Screen2hWin+0x402>
 801e3c4:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e3c8:	459a      	cmp	sl, r3
 801e3ca:	f2c0 819e 	blt.w	801e70a <_Screen2hWin+0x402>
 801e3ce:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e3d2:	459a      	cmp	sl, r3
 801e3d4:	f300 8199 	bgt.w	801e70a <_Screen2hWin+0x402>
 801e3d8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e3dc:	4599      	cmp	r9, r3
 801e3de:	f2c0 8194 	blt.w	801e70a <_Screen2hWin+0x402>
 801e3e2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e3e6:	4599      	cmp	r9, r3
 801e3e8:	f300 818f 	bgt.w	801e70a <_Screen2hWin+0x402>
 801e3ec:	69c3      	ldr	r3, [r0, #28]
 801e3ee:	930a      	str	r3, [sp, #40]	; 0x28
 801e3f0:	2b00      	cmp	r3, #0
 801e3f2:	f000 81bb 	beq.w	801e76c <_Screen2hWin+0x464>
 801e3f6:	459b      	cmp	fp, r3
 801e3f8:	f000 81b8 	beq.w	801e76c <_Screen2hWin+0x464>
 801e3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3fe:	930b      	str	r3, [sp, #44]	; 0x2c
 801e400:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e402:	f7f1 fab1 	bl	800f968 <GUI_ALLOC_LockH>
 801e406:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801e408:	9012      	str	r0, [sp, #72]	; 0x48
 801e40a:	079e      	lsls	r6, r3, #30
 801e40c:	f140 8176 	bpl.w	801e6fc <_Screen2hWin+0x3f4>
 801e410:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e414:	459a      	cmp	sl, r3
 801e416:	f2c0 8171 	blt.w	801e6fc <_Screen2hWin+0x3f4>
 801e41a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e41e:	459a      	cmp	sl, r3
 801e420:	f300 816c 	bgt.w	801e6fc <_Screen2hWin+0x3f4>
 801e424:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e428:	4599      	cmp	r9, r3
 801e42a:	f2c0 8167 	blt.w	801e6fc <_Screen2hWin+0x3f4>
 801e42e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e432:	4599      	cmp	r9, r3
 801e434:	f300 8162 	bgt.w	801e6fc <_Screen2hWin+0x3f4>
 801e438:	69c3      	ldr	r3, [r0, #28]
 801e43a:	9306      	str	r3, [sp, #24]
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	f000 8198 	beq.w	801e772 <_Screen2hWin+0x46a>
 801e442:	459b      	cmp	fp, r3
 801e444:	f000 8195 	beq.w	801e772 <_Screen2hWin+0x46a>
 801e448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e44a:	930c      	str	r3, [sp, #48]	; 0x30
 801e44c:	9806      	ldr	r0, [sp, #24]
 801e44e:	f7f1 fa8b 	bl	800f968 <GUI_ALLOC_LockH>
 801e452:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801e454:	9013      	str	r0, [sp, #76]	; 0x4c
 801e456:	079d      	lsls	r5, r3, #30
 801e458:	f140 8149 	bpl.w	801e6ee <_Screen2hWin+0x3e6>
 801e45c:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e460:	459a      	cmp	sl, r3
 801e462:	f2c0 8144 	blt.w	801e6ee <_Screen2hWin+0x3e6>
 801e466:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e46a:	459a      	cmp	sl, r3
 801e46c:	f300 813f 	bgt.w	801e6ee <_Screen2hWin+0x3e6>
 801e470:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e474:	4599      	cmp	r9, r3
 801e476:	f2c0 813a 	blt.w	801e6ee <_Screen2hWin+0x3e6>
 801e47a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e47e:	4599      	cmp	r9, r3
 801e480:	f300 8135 	bgt.w	801e6ee <_Screen2hWin+0x3e6>
 801e484:	69c3      	ldr	r3, [r0, #28]
 801e486:	9303      	str	r3, [sp, #12]
 801e488:	2b00      	cmp	r3, #0
 801e48a:	f000 816c 	beq.w	801e766 <_Screen2hWin+0x45e>
 801e48e:	459b      	cmp	fp, r3
 801e490:	f000 8169 	beq.w	801e766 <_Screen2hWin+0x45e>
 801e494:	9b06      	ldr	r3, [sp, #24]
 801e496:	9307      	str	r3, [sp, #28]
 801e498:	9803      	ldr	r0, [sp, #12]
 801e49a:	f7f1 fa65 	bl	800f968 <GUI_ALLOC_LockH>
 801e49e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801e4a0:	9014      	str	r0, [sp, #80]	; 0x50
 801e4a2:	079c      	lsls	r4, r3, #30
 801e4a4:	f140 811d 	bpl.w	801e6e2 <_Screen2hWin+0x3da>
 801e4a8:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e4ac:	459a      	cmp	sl, r3
 801e4ae:	f2c0 8118 	blt.w	801e6e2 <_Screen2hWin+0x3da>
 801e4b2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e4b6:	459a      	cmp	sl, r3
 801e4b8:	f300 8113 	bgt.w	801e6e2 <_Screen2hWin+0x3da>
 801e4bc:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e4c0:	4599      	cmp	r9, r3
 801e4c2:	f2c0 810e 	blt.w	801e6e2 <_Screen2hWin+0x3da>
 801e4c6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e4ca:	4599      	cmp	r9, r3
 801e4cc:	f300 8109 	bgt.w	801e6e2 <_Screen2hWin+0x3da>
 801e4d0:	69c3      	ldr	r3, [r0, #28]
 801e4d2:	9301      	str	r3, [sp, #4]
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	f000 8115 	beq.w	801e704 <_Screen2hWin+0x3fc>
 801e4da:	459b      	cmp	fp, r3
 801e4dc:	f000 8112 	beq.w	801e704 <_Screen2hWin+0x3fc>
 801e4e0:	9b03      	ldr	r3, [sp, #12]
 801e4e2:	9304      	str	r3, [sp, #16]
 801e4e4:	9801      	ldr	r0, [sp, #4]
 801e4e6:	f7f1 fa3f 	bl	800f968 <GUI_ALLOC_LockH>
 801e4ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801e4ec:	9015      	str	r0, [sp, #84]	; 0x54
 801e4ee:	0799      	lsls	r1, r3, #30
 801e4f0:	f140 80f1 	bpl.w	801e6d6 <_Screen2hWin+0x3ce>
 801e4f4:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e4f8:	459a      	cmp	sl, r3
 801e4fa:	f2c0 80ec 	blt.w	801e6d6 <_Screen2hWin+0x3ce>
 801e4fe:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e502:	459a      	cmp	sl, r3
 801e504:	f300 80e7 	bgt.w	801e6d6 <_Screen2hWin+0x3ce>
 801e508:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e50c:	4599      	cmp	r9, r3
 801e50e:	f2c0 80e2 	blt.w	801e6d6 <_Screen2hWin+0x3ce>
 801e512:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e516:	4599      	cmp	r9, r3
 801e518:	f300 80dd 	bgt.w	801e6d6 <_Screen2hWin+0x3ce>
 801e51c:	69c7      	ldr	r7, [r0, #28]
 801e51e:	2f00      	cmp	r7, #0
 801e520:	f000 80e9 	beq.w	801e6f6 <_Screen2hWin+0x3ee>
 801e524:	45bb      	cmp	fp, r7
 801e526:	f000 80e6 	beq.w	801e6f6 <_Screen2hWin+0x3ee>
 801e52a:	9b01      	ldr	r3, [sp, #4]
 801e52c:	9302      	str	r3, [sp, #8]
 801e52e:	4638      	mov	r0, r7
 801e530:	f7f1 fa1a 	bl	800f968 <GUI_ALLOC_LockH>
 801e534:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801e536:	9016      	str	r0, [sp, #88]	; 0x58
 801e538:	079a      	lsls	r2, r3, #30
 801e53a:	f140 80c8 	bpl.w	801e6ce <_Screen2hWin+0x3c6>
 801e53e:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e542:	459a      	cmp	sl, r3
 801e544:	f2c0 80c3 	blt.w	801e6ce <_Screen2hWin+0x3c6>
 801e548:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e54c:	459a      	cmp	sl, r3
 801e54e:	f300 80be 	bgt.w	801e6ce <_Screen2hWin+0x3c6>
 801e552:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e556:	4599      	cmp	r9, r3
 801e558:	f2c0 80b9 	blt.w	801e6ce <_Screen2hWin+0x3c6>
 801e55c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e560:	4599      	cmp	r9, r3
 801e562:	f300 80b4 	bgt.w	801e6ce <_Screen2hWin+0x3c6>
 801e566:	69c6      	ldr	r6, [r0, #28]
 801e568:	2e00      	cmp	r6, #0
 801e56a:	f000 80be 	beq.w	801e6ea <_Screen2hWin+0x3e2>
 801e56e:	45b3      	cmp	fp, r6
 801e570:	bf18      	it	ne
 801e572:	46b8      	movne	r8, r7
 801e574:	f000 80b9 	beq.w	801e6ea <_Screen2hWin+0x3e2>
 801e578:	4630      	mov	r0, r6
 801e57a:	f7f1 f9f5 	bl	800f968 <GUI_ALLOC_LockH>
 801e57e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801e580:	9017      	str	r0, [sp, #92]	; 0x5c
 801e582:	079b      	lsls	r3, r3, #30
 801e584:	f140 809f 	bpl.w	801e6c6 <_Screen2hWin+0x3be>
 801e588:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e58c:	459a      	cmp	sl, r3
 801e58e:	f2c0 809a 	blt.w	801e6c6 <_Screen2hWin+0x3be>
 801e592:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e596:	459a      	cmp	sl, r3
 801e598:	f300 8095 	bgt.w	801e6c6 <_Screen2hWin+0x3be>
 801e59c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e5a0:	4599      	cmp	r9, r3
 801e5a2:	f2c0 8090 	blt.w	801e6c6 <_Screen2hWin+0x3be>
 801e5a6:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e5aa:	4599      	cmp	r9, r3
 801e5ac:	f300 808b 	bgt.w	801e6c6 <_Screen2hWin+0x3be>
 801e5b0:	69c4      	ldr	r4, [r0, #28]
 801e5b2:	2c00      	cmp	r4, #0
 801e5b4:	f000 8093 	beq.w	801e6de <_Screen2hWin+0x3d6>
 801e5b8:	45a3      	cmp	fp, r4
 801e5ba:	bf18      	it	ne
 801e5bc:	4635      	movne	r5, r6
 801e5be:	d102      	bne.n	801e5c6 <_Screen2hWin+0x2be>
 801e5c0:	e08d      	b.n	801e6de <_Screen2hWin+0x3d6>
 801e5c2:	45a3      	cmp	fp, r4
 801e5c4:	d00e      	beq.n	801e5e4 <_Screen2hWin+0x2dc>
 801e5c6:	464b      	mov	r3, r9
 801e5c8:	4652      	mov	r2, sl
 801e5ca:	4659      	mov	r1, fp
 801e5cc:	4620      	mov	r0, r4
 801e5ce:	f7ff fe9b 	bl	801e308 <_Screen2hWin>
 801e5d2:	2800      	cmp	r0, #0
 801e5d4:	bf18      	it	ne
 801e5d6:	4605      	movne	r5, r0
 801e5d8:	4620      	mov	r0, r4
 801e5da:	f7f1 f9bb 	bl	800f954 <GUI_ALLOC_h2p>
 801e5de:	6a04      	ldr	r4, [r0, #32]
 801e5e0:	2c00      	cmp	r4, #0
 801e5e2:	d1ee      	bne.n	801e5c2 <_Screen2hWin+0x2ba>
 801e5e4:	a817      	add	r0, sp, #92	; 0x5c
 801e5e6:	f7f1 f9d1 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e5ea:	2d00      	cmp	r5, #0
 801e5ec:	bf18      	it	ne
 801e5ee:	46a8      	movne	r8, r5
 801e5f0:	4630      	mov	r0, r6
 801e5f2:	f7f1 f9af 	bl	800f954 <GUI_ALLOC_h2p>
 801e5f6:	6a06      	ldr	r6, [r0, #32]
 801e5f8:	b10e      	cbz	r6, 801e5fe <_Screen2hWin+0x2f6>
 801e5fa:	45b3      	cmp	fp, r6
 801e5fc:	d1bc      	bne.n	801e578 <_Screen2hWin+0x270>
 801e5fe:	a816      	add	r0, sp, #88	; 0x58
 801e600:	f7f1 f9c4 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e604:	9b02      	ldr	r3, [sp, #8]
 801e606:	f1b8 0f00 	cmp.w	r8, #0
 801e60a:	bf18      	it	ne
 801e60c:	4643      	movne	r3, r8
 801e60e:	9302      	str	r3, [sp, #8]
 801e610:	4638      	mov	r0, r7
 801e612:	f7f1 f99f 	bl	800f954 <GUI_ALLOC_h2p>
 801e616:	6a07      	ldr	r7, [r0, #32]
 801e618:	b10f      	cbz	r7, 801e61e <_Screen2hWin+0x316>
 801e61a:	45bb      	cmp	fp, r7
 801e61c:	d187      	bne.n	801e52e <_Screen2hWin+0x226>
 801e61e:	a815      	add	r0, sp, #84	; 0x54
 801e620:	f7f1 f9b4 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e624:	9a02      	ldr	r2, [sp, #8]
 801e626:	9904      	ldr	r1, [sp, #16]
 801e628:	4613      	mov	r3, r2
 801e62a:	2a00      	cmp	r2, #0
 801e62c:	bf08      	it	eq
 801e62e:	460b      	moveq	r3, r1
 801e630:	9304      	str	r3, [sp, #16]
 801e632:	9801      	ldr	r0, [sp, #4]
 801e634:	f7f1 f98e 	bl	800f954 <GUI_ALLOC_h2p>
 801e638:	6a03      	ldr	r3, [r0, #32]
 801e63a:	9301      	str	r3, [sp, #4]
 801e63c:	b113      	cbz	r3, 801e644 <_Screen2hWin+0x33c>
 801e63e:	459b      	cmp	fp, r3
 801e640:	f47f af50 	bne.w	801e4e4 <_Screen2hWin+0x1dc>
 801e644:	a814      	add	r0, sp, #80	; 0x50
 801e646:	f7f1 f9a1 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e64a:	9a04      	ldr	r2, [sp, #16]
 801e64c:	9907      	ldr	r1, [sp, #28]
 801e64e:	4613      	mov	r3, r2
 801e650:	2a00      	cmp	r2, #0
 801e652:	bf08      	it	eq
 801e654:	460b      	moveq	r3, r1
 801e656:	9307      	str	r3, [sp, #28]
 801e658:	9803      	ldr	r0, [sp, #12]
 801e65a:	f7f1 f97b 	bl	800f954 <GUI_ALLOC_h2p>
 801e65e:	6a03      	ldr	r3, [r0, #32]
 801e660:	9303      	str	r3, [sp, #12]
 801e662:	b113      	cbz	r3, 801e66a <_Screen2hWin+0x362>
 801e664:	459b      	cmp	fp, r3
 801e666:	f47f af17 	bne.w	801e498 <_Screen2hWin+0x190>
 801e66a:	a813      	add	r0, sp, #76	; 0x4c
 801e66c:	f7f1 f98e 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e670:	990c      	ldr	r1, [sp, #48]	; 0x30
 801e672:	9a07      	ldr	r2, [sp, #28]
 801e674:	2a00      	cmp	r2, #0
 801e676:	bf08      	it	eq
 801e678:	460a      	moveq	r2, r1
 801e67a:	920c      	str	r2, [sp, #48]	; 0x30
 801e67c:	9806      	ldr	r0, [sp, #24]
 801e67e:	f7f1 f969 	bl	800f954 <GUI_ALLOC_h2p>
 801e682:	6a03      	ldr	r3, [r0, #32]
 801e684:	9306      	str	r3, [sp, #24]
 801e686:	b113      	cbz	r3, 801e68e <_Screen2hWin+0x386>
 801e688:	459b      	cmp	fp, r3
 801e68a:	f47f aedf 	bne.w	801e44c <_Screen2hWin+0x144>
 801e68e:	a812      	add	r0, sp, #72	; 0x48
 801e690:	f7f1 f97c 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e694:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801e696:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801e698:	2a00      	cmp	r2, #0
 801e69a:	bf08      	it	eq
 801e69c:	460a      	moveq	r2, r1
 801e69e:	920b      	str	r2, [sp, #44]	; 0x2c
 801e6a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e6a2:	f7f1 f957 	bl	800f954 <GUI_ALLOC_h2p>
 801e6a6:	6a03      	ldr	r3, [r0, #32]
 801e6a8:	930a      	str	r3, [sp, #40]	; 0x28
 801e6aa:	b113      	cbz	r3, 801e6b2 <_Screen2hWin+0x3aa>
 801e6ac:	459b      	cmp	fp, r3
 801e6ae:	f47f aea7 	bne.w	801e400 <_Screen2hWin+0xf8>
 801e6b2:	a811      	add	r0, sp, #68	; 0x44
 801e6b4:	f7f1 f96a 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e6b8:	9905      	ldr	r1, [sp, #20]
 801e6ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e6bc:	2a00      	cmp	r2, #0
 801e6be:	bf08      	it	eq
 801e6c0:	460a      	moveq	r2, r1
 801e6c2:	9205      	str	r2, [sp, #20]
 801e6c4:	e024      	b.n	801e710 <_Screen2hWin+0x408>
 801e6c6:	a817      	add	r0, sp, #92	; 0x5c
 801e6c8:	f7f1 f960 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e6cc:	e790      	b.n	801e5f0 <_Screen2hWin+0x2e8>
 801e6ce:	a816      	add	r0, sp, #88	; 0x58
 801e6d0:	f7f1 f95c 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e6d4:	e79c      	b.n	801e610 <_Screen2hWin+0x308>
 801e6d6:	a815      	add	r0, sp, #84	; 0x54
 801e6d8:	f7f1 f958 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e6dc:	e7a9      	b.n	801e632 <_Screen2hWin+0x32a>
 801e6de:	4635      	mov	r5, r6
 801e6e0:	e780      	b.n	801e5e4 <_Screen2hWin+0x2dc>
 801e6e2:	a814      	add	r0, sp, #80	; 0x50
 801e6e4:	f7f1 f952 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e6e8:	e7b6      	b.n	801e658 <_Screen2hWin+0x350>
 801e6ea:	46b8      	mov	r8, r7
 801e6ec:	e787      	b.n	801e5fe <_Screen2hWin+0x2f6>
 801e6ee:	a813      	add	r0, sp, #76	; 0x4c
 801e6f0:	f7f1 f94c 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e6f4:	e7c2      	b.n	801e67c <_Screen2hWin+0x374>
 801e6f6:	9b01      	ldr	r3, [sp, #4]
 801e6f8:	9302      	str	r3, [sp, #8]
 801e6fa:	e790      	b.n	801e61e <_Screen2hWin+0x316>
 801e6fc:	a812      	add	r0, sp, #72	; 0x48
 801e6fe:	f7f1 f945 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e702:	e7cd      	b.n	801e6a0 <_Screen2hWin+0x398>
 801e704:	9b03      	ldr	r3, [sp, #12]
 801e706:	9304      	str	r3, [sp, #16]
 801e708:	e79c      	b.n	801e644 <_Screen2hWin+0x33c>
 801e70a:	a811      	add	r0, sp, #68	; 0x44
 801e70c:	f7f1 f93e 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e710:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e712:	f7f1 f91f 	bl	800f954 <GUI_ALLOC_h2p>
 801e716:	6a03      	ldr	r3, [r0, #32]
 801e718:	9309      	str	r3, [sp, #36]	; 0x24
 801e71a:	b1c3      	cbz	r3, 801e74e <_Screen2hWin+0x446>
 801e71c:	459b      	cmp	fp, r3
 801e71e:	f47f ae49 	bne.w	801e3b4 <_Screen2hWin+0xac>
 801e722:	e014      	b.n	801e74e <_Screen2hWin+0x446>
 801e724:	a810      	add	r0, sp, #64	; 0x40
 801e726:	f7f1 f931 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e72a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e72c:	9305      	str	r3, [sp, #20]
 801e72e:	9808      	ldr	r0, [sp, #32]
 801e730:	f7f1 f910 	bl	800f954 <GUI_ALLOC_h2p>
 801e734:	6a03      	ldr	r3, [r0, #32]
 801e736:	9308      	str	r3, [sp, #32]
 801e738:	b113      	cbz	r3, 801e740 <_Screen2hWin+0x438>
 801e73a:	459b      	cmp	fp, r3
 801e73c:	f47f ae12 	bne.w	801e364 <_Screen2hWin+0x5c>
 801e740:	a80f      	add	r0, sp, #60	; 0x3c
 801e742:	f7f1 f923 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e746:	9805      	ldr	r0, [sp, #20]
 801e748:	e5e3      	b.n	801e312 <_Screen2hWin+0xa>
 801e74a:	9b08      	ldr	r3, [sp, #32]
 801e74c:	9305      	str	r3, [sp, #20]
 801e74e:	a810      	add	r0, sp, #64	; 0x40
 801e750:	f7f1 f91c 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e754:	9b05      	ldr	r3, [sp, #20]
 801e756:	2b00      	cmp	r3, #0
 801e758:	d1e9      	bne.n	801e72e <_Screen2hWin+0x426>
 801e75a:	e7e6      	b.n	801e72a <_Screen2hWin+0x422>
 801e75c:	a80f      	add	r0, sp, #60	; 0x3c
 801e75e:	f7f1 f915 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e762:	2000      	movs	r0, #0
 801e764:	e5d5      	b.n	801e312 <_Screen2hWin+0xa>
 801e766:	9b06      	ldr	r3, [sp, #24]
 801e768:	9307      	str	r3, [sp, #28]
 801e76a:	e77e      	b.n	801e66a <_Screen2hWin+0x362>
 801e76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e76e:	930b      	str	r3, [sp, #44]	; 0x2c
 801e770:	e79f      	b.n	801e6b2 <_Screen2hWin+0x3aa>
 801e772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e774:	930c      	str	r3, [sp, #48]	; 0x30
 801e776:	e78a      	b.n	801e68e <_Screen2hWin+0x386>

0801e778 <WM_Screen2hWin>:
 801e778:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e77a:	b083      	sub	sp, #12
 801e77c:	4606      	mov	r6, r0
 801e77e:	460f      	mov	r7, r1
 801e780:	f7f2 ff7c 	bl	801167c <GUI_Lock>
 801e784:	4b21      	ldr	r3, [pc, #132]	; (801e80c <WM_Screen2hWin+0x94>)
 801e786:	6818      	ldr	r0, [r3, #0]
 801e788:	f7fa fa42 	bl	8018c10 <WM_GetDesktopWindowEx>
 801e78c:	4605      	mov	r5, r0
 801e78e:	b920      	cbnz	r0, 801e79a <WM_Screen2hWin+0x22>
 801e790:	f7f2 ff6a 	bl	8011668 <GUI_Unlock>
 801e794:	4628      	mov	r0, r5
 801e796:	b003      	add	sp, #12
 801e798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e79a:	f7f1 f8e5 	bl	800f968 <GUI_ALLOC_LockH>
 801e79e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801e7a0:	9001      	str	r0, [sp, #4]
 801e7a2:	079b      	lsls	r3, r3, #30
 801e7a4:	d528      	bpl.n	801e7f8 <WM_Screen2hWin+0x80>
 801e7a6:	f9b0 3000 	ldrsh.w	r3, [r0]
 801e7aa:	429e      	cmp	r6, r3
 801e7ac:	db24      	blt.n	801e7f8 <WM_Screen2hWin+0x80>
 801e7ae:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e7b2:	429e      	cmp	r6, r3
 801e7b4:	dc20      	bgt.n	801e7f8 <WM_Screen2hWin+0x80>
 801e7b6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e7ba:	429f      	cmp	r7, r3
 801e7bc:	db1c      	blt.n	801e7f8 <WM_Screen2hWin+0x80>
 801e7be:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801e7c2:	429f      	cmp	r7, r3
 801e7c4:	dc18      	bgt.n	801e7f8 <WM_Screen2hWin+0x80>
 801e7c6:	69c4      	ldr	r4, [r0, #28]
 801e7c8:	b174      	cbz	r4, 801e7e8 <WM_Screen2hWin+0x70>
 801e7ca:	463b      	mov	r3, r7
 801e7cc:	4632      	mov	r2, r6
 801e7ce:	2100      	movs	r1, #0
 801e7d0:	4620      	mov	r0, r4
 801e7d2:	f7ff fd99 	bl	801e308 <_Screen2hWin>
 801e7d6:	2800      	cmp	r0, #0
 801e7d8:	bf18      	it	ne
 801e7da:	4605      	movne	r5, r0
 801e7dc:	4620      	mov	r0, r4
 801e7de:	f7f1 f8b9 	bl	800f954 <GUI_ALLOC_h2p>
 801e7e2:	6a04      	ldr	r4, [r0, #32]
 801e7e4:	2c00      	cmp	r4, #0
 801e7e6:	d1f0      	bne.n	801e7ca <WM_Screen2hWin+0x52>
 801e7e8:	a801      	add	r0, sp, #4
 801e7ea:	f7f1 f8cf 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e7ee:	f7f2 ff3b 	bl	8011668 <GUI_Unlock>
 801e7f2:	4628      	mov	r0, r5
 801e7f4:	b003      	add	sp, #12
 801e7f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e7f8:	a801      	add	r0, sp, #4
 801e7fa:	f7f1 f8c7 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e7fe:	f7f2 ff33 	bl	8011668 <GUI_Unlock>
 801e802:	2500      	movs	r5, #0
 801e804:	4628      	mov	r0, r5
 801e806:	b003      	add	sp, #12
 801e808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e80a:	bf00      	nop
 801e80c:	200308b4 	.word	0x200308b4

0801e810 <WM_ReleaseCapture>:
 801e810:	b530      	push	{r4, r5, lr}
 801e812:	4d0b      	ldr	r5, [pc, #44]	; (801e840 <WM_ReleaseCapture+0x30>)
 801e814:	4c0b      	ldr	r4, [pc, #44]	; (801e844 <WM_ReleaseCapture+0x34>)
 801e816:	b085      	sub	sp, #20
 801e818:	f7f2 ff30 	bl	801167c <GUI_Lock>
 801e81c:	682b      	ldr	r3, [r5, #0]
 801e81e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 801e822:	b148      	cbz	r0, 801e838 <WM_ReleaseCapture+0x28>
 801e824:	a904      	add	r1, sp, #16
 801e826:	2318      	movs	r3, #24
 801e828:	f841 3d10 	str.w	r3, [r1, #-16]!
 801e82c:	f7fb fbd6 	bl	8019fdc <WM__SendMessage>
 801e830:	682b      	ldr	r3, [r5, #0]
 801e832:	2200      	movs	r2, #0
 801e834:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 801e838:	f7f2 ff16 	bl	8011668 <GUI_Unlock>
 801e83c:	b005      	add	sp, #20
 801e83e:	bd30      	pop	{r4, r5, pc}
 801e840:	200308b4 	.word	0x200308b4
 801e844:	200308d8 	.word	0x200308d8

0801e848 <WM_SetFocusOnNextChild>:
 801e848:	b570      	push	{r4, r5, r6, lr}
 801e84a:	b910      	cbnz	r0, 801e852 <WM_SetFocusOnNextChild+0xa>
 801e84c:	4604      	mov	r4, r0
 801e84e:	4620      	mov	r0, r4
 801e850:	bd70      	pop	{r4, r5, r6, pc}
 801e852:	4606      	mov	r6, r0
 801e854:	f7f2 ff12 	bl	801167c <GUI_Lock>
 801e858:	4630      	mov	r0, r6
 801e85a:	f7fb fb3d 	bl	8019ed8 <WM__GetFocusedChild>
 801e85e:	4604      	mov	r4, r0
 801e860:	2800      	cmp	r0, #0
 801e862:	d131      	bne.n	801e8c8 <WM_SetFocusOnNextChild+0x80>
 801e864:	4630      	mov	r0, r6
 801e866:	f7f1 f875 	bl	800f954 <GUI_ALLOC_h2p>
 801e86a:	69c5      	ldr	r5, [r0, #28]
 801e86c:	42ac      	cmp	r4, r5
 801e86e:	bf08      	it	eq
 801e870:	2500      	moveq	r5, #0
 801e872:	462c      	mov	r4, r5
 801e874:	e00f      	b.n	801e896 <WM_SetFocusOnNextChild+0x4e>
 801e876:	4620      	mov	r0, r4
 801e878:	b30c      	cbz	r4, 801e8be <WM_SetFocusOnNextChild+0x76>
 801e87a:	f7f1 f86b 	bl	800f954 <GUI_ALLOC_h2p>
 801e87e:	6a03      	ldr	r3, [r0, #32]
 801e880:	b91b      	cbnz	r3, 801e88a <WM_SetFocusOnNextChild+0x42>
 801e882:	4630      	mov	r0, r6
 801e884:	f7f1 f866 	bl	800f954 <GUI_ALLOC_h2p>
 801e888:	69c3      	ldr	r3, [r0, #28]
 801e88a:	429c      	cmp	r4, r3
 801e88c:	bf14      	ite	ne
 801e88e:	461c      	movne	r4, r3
 801e890:	2400      	moveq	r4, #0
 801e892:	42a5      	cmp	r5, r4
 801e894:	d004      	beq.n	801e8a0 <WM_SetFocusOnNextChild+0x58>
 801e896:	4620      	mov	r0, r4
 801e898:	f7fa fad2 	bl	8018e40 <WM_IsFocusable>
 801e89c:	2800      	cmp	r0, #0
 801e89e:	d0ea      	beq.n	801e876 <WM_SetFocusOnNextChild+0x2e>
 801e8a0:	b16c      	cbz	r4, 801e8be <WM_SetFocusOnNextChild+0x76>
 801e8a2:	4d0c      	ldr	r5, [pc, #48]	; (801e8d4 <WM_SetFocusOnNextChild+0x8c>)
 801e8a4:	4620      	mov	r0, r4
 801e8a6:	682e      	ldr	r6, [r5, #0]
 801e8a8:	f7f9 fa3e 	bl	8017d28 <WM__GetTopLevelLayer>
 801e8ac:	1c42      	adds	r2, r0, #1
 801e8ae:	4603      	mov	r3, r0
 801e8b0:	d006      	beq.n	801e8c0 <WM_SetFocusOnNextChild+0x78>
 801e8b2:	4620      	mov	r0, r4
 801e8b4:	602b      	str	r3, [r5, #0]
 801e8b6:	f7fa fba9 	bl	801900c <WM_SetFocus>
 801e8ba:	602e      	str	r6, [r5, #0]
 801e8bc:	b100      	cbz	r0, 801e8c0 <WM_SetFocusOnNextChild+0x78>
 801e8be:	2400      	movs	r4, #0
 801e8c0:	f7f2 fed2 	bl	8011668 <GUI_Unlock>
 801e8c4:	4620      	mov	r0, r4
 801e8c6:	bd70      	pop	{r4, r5, r6, pc}
 801e8c8:	f7f1 f844 	bl	800f954 <GUI_ALLOC_h2p>
 801e8cc:	6a05      	ldr	r5, [r0, #32]
 801e8ce:	2d00      	cmp	r5, #0
 801e8d0:	d1cc      	bne.n	801e86c <WM_SetFocusOnNextChild+0x24>
 801e8d2:	e7c7      	b.n	801e864 <WM_SetFocusOnNextChild+0x1c>
 801e8d4:	200308b4 	.word	0x200308b4

0801e8d8 <WM_SetFocusOnPrevChild>:
 801e8d8:	b538      	push	{r3, r4, r5, lr}
 801e8da:	4604      	mov	r4, r0
 801e8dc:	b908      	cbnz	r0, 801e8e2 <WM_SetFocusOnPrevChild+0xa>
 801e8de:	4620      	mov	r0, r4
 801e8e0:	bd38      	pop	{r3, r4, r5, pc}
 801e8e2:	f7f2 fecb 	bl	801167c <GUI_Lock>
 801e8e6:	4620      	mov	r0, r4
 801e8e8:	f7fb faf6 	bl	8019ed8 <WM__GetFocusedChild>
 801e8ec:	4604      	mov	r4, r0
 801e8ee:	bb28      	cbnz	r0, 801e93c <WM_SetFocusOnPrevChild+0x64>
 801e8f0:	4620      	mov	r0, r4
 801e8f2:	f7fb fb17 	bl	8019f24 <WM__GetLastSibling>
 801e8f6:	4605      	mov	r5, r0
 801e8f8:	42ac      	cmp	r4, r5
 801e8fa:	bf08      	it	eq
 801e8fc:	2500      	moveq	r5, #0
 801e8fe:	462c      	mov	r4, r5
 801e900:	e00d      	b.n	801e91e <WM_SetFocusOnPrevChild+0x46>
 801e902:	4620      	mov	r0, r4
 801e904:	b184      	cbz	r4, 801e928 <WM_SetFocusOnPrevChild+0x50>
 801e906:	f7fb fb1b 	bl	8019f40 <WM__GetPrevSibling>
 801e90a:	b910      	cbnz	r0, 801e912 <WM_SetFocusOnPrevChild+0x3a>
 801e90c:	4620      	mov	r0, r4
 801e90e:	f7fb fb09 	bl	8019f24 <WM__GetLastSibling>
 801e912:	4284      	cmp	r4, r0
 801e914:	bf14      	ite	ne
 801e916:	4604      	movne	r4, r0
 801e918:	2400      	moveq	r4, #0
 801e91a:	42a5      	cmp	r5, r4
 801e91c:	d004      	beq.n	801e928 <WM_SetFocusOnPrevChild+0x50>
 801e91e:	4620      	mov	r0, r4
 801e920:	f7fa fa8e 	bl	8018e40 <WM_IsFocusable>
 801e924:	2800      	cmp	r0, #0
 801e926:	d0ec      	beq.n	801e902 <WM_SetFocusOnPrevChild+0x2a>
 801e928:	4620      	mov	r0, r4
 801e92a:	f7fa fb6f 	bl	801900c <WM_SetFocus>
 801e92e:	2800      	cmp	r0, #0
 801e930:	bf18      	it	ne
 801e932:	2400      	movne	r4, #0
 801e934:	f7f2 fe98 	bl	8011668 <GUI_Unlock>
 801e938:	4620      	mov	r0, r4
 801e93a:	bd38      	pop	{r3, r4, r5, pc}
 801e93c:	f7fb fb00 	bl	8019f40 <WM__GetPrevSibling>
 801e940:	4605      	mov	r5, r0
 801e942:	2800      	cmp	r0, #0
 801e944:	d1d8      	bne.n	801e8f8 <WM_SetFocusOnPrevChild+0x20>
 801e946:	e7d3      	b.n	801e8f0 <WM_SetFocusOnPrevChild+0x18>

0801e948 <WM_SetHasTrans>:
 801e948:	b530      	push	{r4, r5, lr}
 801e94a:	4604      	mov	r4, r0
 801e94c:	b083      	sub	sp, #12
 801e94e:	f7f2 fe95 	bl	801167c <GUI_Lock>
 801e952:	b91c      	cbnz	r4, 801e95c <WM_SetHasTrans+0x14>
 801e954:	f7f2 fe88 	bl	8011668 <GUI_Unlock>
 801e958:	b003      	add	sp, #12
 801e95a:	bd30      	pop	{r4, r5, pc}
 801e95c:	4620      	mov	r0, r4
 801e95e:	f7f1 f803 	bl	800f968 <GUI_ALLOC_LockH>
 801e962:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801e964:	9001      	str	r0, [sp, #4]
 801e966:	07db      	lsls	r3, r3, #31
 801e968:	d506      	bpl.n	801e978 <WM_SetHasTrans+0x30>
 801e96a:	a801      	add	r0, sp, #4
 801e96c:	f7f1 f80e 	bl	800f98c <GUI_ALLOC_UnlockH>
 801e970:	f7f2 fe7a 	bl	8011668 <GUI_Unlock>
 801e974:	b003      	add	sp, #12
 801e976:	bd30      	pop	{r4, r5, pc}
 801e978:	4620      	mov	r0, r4
 801e97a:	f7fa fd03 	bl	8019384 <WM_ValidateWindow>
 801e97e:	9d01      	ldr	r5, [sp, #4]
 801e980:	4905      	ldr	r1, [pc, #20]	; (801e998 <WM_SetHasTrans+0x50>)
 801e982:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 801e984:	680b      	ldr	r3, [r1, #0]
 801e986:	f042 0201 	orr.w	r2, r2, #1
 801e98a:	3301      	adds	r3, #1
 801e98c:	4620      	mov	r0, r4
 801e98e:	62aa      	str	r2, [r5, #40]	; 0x28
 801e990:	600b      	str	r3, [r1, #0]
 801e992:	f7f8 ff91 	bl	80178b8 <WM_InvalidateWindow>
 801e996:	e7e8      	b.n	801e96a <WM_SetHasTrans+0x22>
 801e998:	200308e4 	.word	0x200308e4

0801e99c <WM_GetHasTrans>:
 801e99c:	b510      	push	{r4, lr}
 801e99e:	4604      	mov	r4, r0
 801e9a0:	f7f2 fe6c 	bl	801167c <GUI_Lock>
 801e9a4:	b12c      	cbz	r4, 801e9b2 <WM_GetHasTrans+0x16>
 801e9a6:	4620      	mov	r0, r4
 801e9a8:	f7f0 ffd4 	bl	800f954 <GUI_ALLOC_h2p>
 801e9ac:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801e9ae:	f004 0401 	and.w	r4, r4, #1
 801e9b2:	f7f2 fe59 	bl	8011668 <GUI_Unlock>
 801e9b6:	4620      	mov	r0, r4
 801e9b8:	bd10      	pop	{r4, pc}
 801e9ba:	bf00      	nop

0801e9bc <GUI__AlphaPreserveTrans>:
 801e9bc:	b510      	push	{r4, lr}
 801e9be:	4b09      	ldr	r3, [pc, #36]	; (801e9e4 <GUI__AlphaPreserveTrans+0x28>)
 801e9c0:	781c      	ldrb	r4, [r3, #0]
 801e9c2:	b938      	cbnz	r0, 801e9d4 <GUI__AlphaPreserveTrans+0x18>
 801e9c4:	4602      	mov	r2, r0
 801e9c6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 801e9ca:	701a      	strb	r2, [r3, #0]
 801e9cc:	f7f4 fb98 	bl	8013100 <LCD_AA_SetOrMask>
 801e9d0:	4620      	mov	r0, r4
 801e9d2:	bd10      	pop	{r4, pc}
 801e9d4:	2201      	movs	r2, #1
 801e9d6:	2000      	movs	r0, #0
 801e9d8:	701a      	strb	r2, [r3, #0]
 801e9da:	f7f4 fb91 	bl	8013100 <LCD_AA_SetOrMask>
 801e9de:	4620      	mov	r0, r4
 801e9e0:	bd10      	pop	{r4, pc}
 801e9e2:	bf00      	nop
 801e9e4:	20030858 	.word	0x20030858

0801e9e8 <__libc_init_array>:
 801e9e8:	b570      	push	{r4, r5, r6, lr}
 801e9ea:	4e0d      	ldr	r6, [pc, #52]	; (801ea20 <__libc_init_array+0x38>)
 801e9ec:	4c0d      	ldr	r4, [pc, #52]	; (801ea24 <__libc_init_array+0x3c>)
 801e9ee:	1ba4      	subs	r4, r4, r6
 801e9f0:	10a4      	asrs	r4, r4, #2
 801e9f2:	2500      	movs	r5, #0
 801e9f4:	42a5      	cmp	r5, r4
 801e9f6:	d109      	bne.n	801ea0c <__libc_init_array+0x24>
 801e9f8:	4e0b      	ldr	r6, [pc, #44]	; (801ea28 <__libc_init_array+0x40>)
 801e9fa:	4c0c      	ldr	r4, [pc, #48]	; (801ea2c <__libc_init_array+0x44>)
 801e9fc:	f000 f960 	bl	801ecc0 <_init>
 801ea00:	1ba4      	subs	r4, r4, r6
 801ea02:	10a4      	asrs	r4, r4, #2
 801ea04:	2500      	movs	r5, #0
 801ea06:	42a5      	cmp	r5, r4
 801ea08:	d105      	bne.n	801ea16 <__libc_init_array+0x2e>
 801ea0a:	bd70      	pop	{r4, r5, r6, pc}
 801ea0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ea10:	4798      	blx	r3
 801ea12:	3501      	adds	r5, #1
 801ea14:	e7ee      	b.n	801e9f4 <__libc_init_array+0xc>
 801ea16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ea1a:	4798      	blx	r3
 801ea1c:	3501      	adds	r5, #1
 801ea1e:	e7f2      	b.n	801ea06 <__libc_init_array+0x1e>
 801ea20:	080329f8 	.word	0x080329f8
 801ea24:	080329f8 	.word	0x080329f8
 801ea28:	080329f8 	.word	0x080329f8
 801ea2c:	080329fc 	.word	0x080329fc

0801ea30 <memcmp>:
 801ea30:	b530      	push	{r4, r5, lr}
 801ea32:	2400      	movs	r4, #0
 801ea34:	42a2      	cmp	r2, r4
 801ea36:	d101      	bne.n	801ea3c <memcmp+0xc>
 801ea38:	2000      	movs	r0, #0
 801ea3a:	e007      	b.n	801ea4c <memcmp+0x1c>
 801ea3c:	5d03      	ldrb	r3, [r0, r4]
 801ea3e:	3401      	adds	r4, #1
 801ea40:	190d      	adds	r5, r1, r4
 801ea42:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801ea46:	42ab      	cmp	r3, r5
 801ea48:	d0f4      	beq.n	801ea34 <memcmp+0x4>
 801ea4a:	1b58      	subs	r0, r3, r5
 801ea4c:	bd30      	pop	{r4, r5, pc}

0801ea4e <memcpy>:
 801ea4e:	b510      	push	{r4, lr}
 801ea50:	1e43      	subs	r3, r0, #1
 801ea52:	440a      	add	r2, r1
 801ea54:	4291      	cmp	r1, r2
 801ea56:	d100      	bne.n	801ea5a <memcpy+0xc>
 801ea58:	bd10      	pop	{r4, pc}
 801ea5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ea5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ea62:	e7f7      	b.n	801ea54 <memcpy+0x6>

0801ea64 <memmove>:
 801ea64:	4288      	cmp	r0, r1
 801ea66:	b510      	push	{r4, lr}
 801ea68:	eb01 0302 	add.w	r3, r1, r2
 801ea6c:	d807      	bhi.n	801ea7e <memmove+0x1a>
 801ea6e:	1e42      	subs	r2, r0, #1
 801ea70:	4299      	cmp	r1, r3
 801ea72:	d00a      	beq.n	801ea8a <memmove+0x26>
 801ea74:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ea78:	f802 4f01 	strb.w	r4, [r2, #1]!
 801ea7c:	e7f8      	b.n	801ea70 <memmove+0xc>
 801ea7e:	4283      	cmp	r3, r0
 801ea80:	d9f5      	bls.n	801ea6e <memmove+0xa>
 801ea82:	1881      	adds	r1, r0, r2
 801ea84:	1ad2      	subs	r2, r2, r3
 801ea86:	42d3      	cmn	r3, r2
 801ea88:	d100      	bne.n	801ea8c <memmove+0x28>
 801ea8a:	bd10      	pop	{r4, pc}
 801ea8c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ea90:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801ea94:	e7f7      	b.n	801ea86 <memmove+0x22>

0801ea96 <memset>:
 801ea96:	4402      	add	r2, r0
 801ea98:	4603      	mov	r3, r0
 801ea9a:	4293      	cmp	r3, r2
 801ea9c:	d100      	bne.n	801eaa0 <memset+0xa>
 801ea9e:	4770      	bx	lr
 801eaa0:	f803 1b01 	strb.w	r1, [r3], #1
 801eaa4:	e7f9      	b.n	801ea9a <memset+0x4>

0801eaa6 <strcpy>:
 801eaa6:	4603      	mov	r3, r0
 801eaa8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801eaac:	f803 2b01 	strb.w	r2, [r3], #1
 801eab0:	2a00      	cmp	r2, #0
 801eab2:	d1f9      	bne.n	801eaa8 <strcpy+0x2>
 801eab4:	4770      	bx	lr
	...

0801eab8 <ceil>:
 801eab8:	ec51 0b10 	vmov	r0, r1, d0
 801eabc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801eac0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801eac4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801eac8:	2e13      	cmp	r6, #19
 801eaca:	460c      	mov	r4, r1
 801eacc:	ee10 5a10 	vmov	r5, s0
 801ead0:	4680      	mov	r8, r0
 801ead2:	dc30      	bgt.n	801eb36 <ceil+0x7e>
 801ead4:	2e00      	cmp	r6, #0
 801ead6:	da12      	bge.n	801eafe <ceil+0x46>
 801ead8:	a333      	add	r3, pc, #204	; (adr r3, 801eba8 <ceil+0xf0>)
 801eada:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eade:	f7e1 fb9d 	bl	800021c <__adddf3>
 801eae2:	2200      	movs	r2, #0
 801eae4:	2300      	movs	r3, #0
 801eae6:	f7e1 ffdf 	bl	8000aa8 <__aeabi_dcmpgt>
 801eaea:	b128      	cbz	r0, 801eaf8 <ceil+0x40>
 801eaec:	2c00      	cmp	r4, #0
 801eaee:	db55      	blt.n	801eb9c <ceil+0xe4>
 801eaf0:	432c      	orrs	r4, r5
 801eaf2:	d057      	beq.n	801eba4 <ceil+0xec>
 801eaf4:	4c2e      	ldr	r4, [pc, #184]	; (801ebb0 <ceil+0xf8>)
 801eaf6:	2500      	movs	r5, #0
 801eaf8:	4621      	mov	r1, r4
 801eafa:	4628      	mov	r0, r5
 801eafc:	e025      	b.n	801eb4a <ceil+0x92>
 801eafe:	4f2d      	ldr	r7, [pc, #180]	; (801ebb4 <ceil+0xfc>)
 801eb00:	4137      	asrs	r7, r6
 801eb02:	ea01 0307 	and.w	r3, r1, r7
 801eb06:	4303      	orrs	r3, r0
 801eb08:	d01f      	beq.n	801eb4a <ceil+0x92>
 801eb0a:	a327      	add	r3, pc, #156	; (adr r3, 801eba8 <ceil+0xf0>)
 801eb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb10:	f7e1 fb84 	bl	800021c <__adddf3>
 801eb14:	2200      	movs	r2, #0
 801eb16:	2300      	movs	r3, #0
 801eb18:	f7e1 ffc6 	bl	8000aa8 <__aeabi_dcmpgt>
 801eb1c:	2800      	cmp	r0, #0
 801eb1e:	d0eb      	beq.n	801eaf8 <ceil+0x40>
 801eb20:	2c00      	cmp	r4, #0
 801eb22:	bfc2      	ittt	gt
 801eb24:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 801eb28:	fa43 f606 	asrgt.w	r6, r3, r6
 801eb2c:	19a4      	addgt	r4, r4, r6
 801eb2e:	ea24 0407 	bic.w	r4, r4, r7
 801eb32:	2500      	movs	r5, #0
 801eb34:	e7e0      	b.n	801eaf8 <ceil+0x40>
 801eb36:	2e33      	cmp	r6, #51	; 0x33
 801eb38:	dd0b      	ble.n	801eb52 <ceil+0x9a>
 801eb3a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801eb3e:	d104      	bne.n	801eb4a <ceil+0x92>
 801eb40:	ee10 2a10 	vmov	r2, s0
 801eb44:	460b      	mov	r3, r1
 801eb46:	f7e1 fb69 	bl	800021c <__adddf3>
 801eb4a:	ec41 0b10 	vmov	d0, r0, r1
 801eb4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eb52:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801eb56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801eb5a:	fa23 f707 	lsr.w	r7, r3, r7
 801eb5e:	4207      	tst	r7, r0
 801eb60:	d0f3      	beq.n	801eb4a <ceil+0x92>
 801eb62:	a311      	add	r3, pc, #68	; (adr r3, 801eba8 <ceil+0xf0>)
 801eb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb68:	f7e1 fb58 	bl	800021c <__adddf3>
 801eb6c:	2200      	movs	r2, #0
 801eb6e:	2300      	movs	r3, #0
 801eb70:	f7e1 ff9a 	bl	8000aa8 <__aeabi_dcmpgt>
 801eb74:	2800      	cmp	r0, #0
 801eb76:	d0bf      	beq.n	801eaf8 <ceil+0x40>
 801eb78:	2c00      	cmp	r4, #0
 801eb7a:	dd02      	ble.n	801eb82 <ceil+0xca>
 801eb7c:	2e14      	cmp	r6, #20
 801eb7e:	d103      	bne.n	801eb88 <ceil+0xd0>
 801eb80:	3401      	adds	r4, #1
 801eb82:	ea25 0507 	bic.w	r5, r5, r7
 801eb86:	e7b7      	b.n	801eaf8 <ceil+0x40>
 801eb88:	2301      	movs	r3, #1
 801eb8a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801eb8e:	fa03 f606 	lsl.w	r6, r3, r6
 801eb92:	4435      	add	r5, r6
 801eb94:	4545      	cmp	r5, r8
 801eb96:	bf38      	it	cc
 801eb98:	18e4      	addcc	r4, r4, r3
 801eb9a:	e7f2      	b.n	801eb82 <ceil+0xca>
 801eb9c:	2500      	movs	r5, #0
 801eb9e:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801eba2:	e7a9      	b.n	801eaf8 <ceil+0x40>
 801eba4:	4625      	mov	r5, r4
 801eba6:	e7a7      	b.n	801eaf8 <ceil+0x40>
 801eba8:	8800759c 	.word	0x8800759c
 801ebac:	7e37e43c 	.word	0x7e37e43c
 801ebb0:	3ff00000 	.word	0x3ff00000
 801ebb4:	000fffff 	.word	0x000fffff

0801ebb8 <floor>:
 801ebb8:	ec51 0b10 	vmov	r0, r1, d0
 801ebbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ebc0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801ebc4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801ebc8:	2e13      	cmp	r6, #19
 801ebca:	460c      	mov	r4, r1
 801ebcc:	ee10 5a10 	vmov	r5, s0
 801ebd0:	4680      	mov	r8, r0
 801ebd2:	dc34      	bgt.n	801ec3e <floor+0x86>
 801ebd4:	2e00      	cmp	r6, #0
 801ebd6:	da16      	bge.n	801ec06 <floor+0x4e>
 801ebd8:	a335      	add	r3, pc, #212	; (adr r3, 801ecb0 <floor+0xf8>)
 801ebda:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebde:	f7e1 fb1d 	bl	800021c <__adddf3>
 801ebe2:	2200      	movs	r2, #0
 801ebe4:	2300      	movs	r3, #0
 801ebe6:	f7e1 ff5f 	bl	8000aa8 <__aeabi_dcmpgt>
 801ebea:	b148      	cbz	r0, 801ec00 <floor+0x48>
 801ebec:	2c00      	cmp	r4, #0
 801ebee:	da59      	bge.n	801eca4 <floor+0xec>
 801ebf0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801ebf4:	4a30      	ldr	r2, [pc, #192]	; (801ecb8 <floor+0x100>)
 801ebf6:	432b      	orrs	r3, r5
 801ebf8:	2500      	movs	r5, #0
 801ebfa:	42ab      	cmp	r3, r5
 801ebfc:	bf18      	it	ne
 801ebfe:	4614      	movne	r4, r2
 801ec00:	4621      	mov	r1, r4
 801ec02:	4628      	mov	r0, r5
 801ec04:	e025      	b.n	801ec52 <floor+0x9a>
 801ec06:	4f2d      	ldr	r7, [pc, #180]	; (801ecbc <floor+0x104>)
 801ec08:	4137      	asrs	r7, r6
 801ec0a:	ea01 0307 	and.w	r3, r1, r7
 801ec0e:	4303      	orrs	r3, r0
 801ec10:	d01f      	beq.n	801ec52 <floor+0x9a>
 801ec12:	a327      	add	r3, pc, #156	; (adr r3, 801ecb0 <floor+0xf8>)
 801ec14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec18:	f7e1 fb00 	bl	800021c <__adddf3>
 801ec1c:	2200      	movs	r2, #0
 801ec1e:	2300      	movs	r3, #0
 801ec20:	f7e1 ff42 	bl	8000aa8 <__aeabi_dcmpgt>
 801ec24:	2800      	cmp	r0, #0
 801ec26:	d0eb      	beq.n	801ec00 <floor+0x48>
 801ec28:	2c00      	cmp	r4, #0
 801ec2a:	bfbe      	ittt	lt
 801ec2c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ec30:	fa43 f606 	asrlt.w	r6, r3, r6
 801ec34:	19a4      	addlt	r4, r4, r6
 801ec36:	ea24 0407 	bic.w	r4, r4, r7
 801ec3a:	2500      	movs	r5, #0
 801ec3c:	e7e0      	b.n	801ec00 <floor+0x48>
 801ec3e:	2e33      	cmp	r6, #51	; 0x33
 801ec40:	dd0b      	ble.n	801ec5a <floor+0xa2>
 801ec42:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ec46:	d104      	bne.n	801ec52 <floor+0x9a>
 801ec48:	ee10 2a10 	vmov	r2, s0
 801ec4c:	460b      	mov	r3, r1
 801ec4e:	f7e1 fae5 	bl	800021c <__adddf3>
 801ec52:	ec41 0b10 	vmov	d0, r0, r1
 801ec56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ec5a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801ec5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ec62:	fa23 f707 	lsr.w	r7, r3, r7
 801ec66:	4207      	tst	r7, r0
 801ec68:	d0f3      	beq.n	801ec52 <floor+0x9a>
 801ec6a:	a311      	add	r3, pc, #68	; (adr r3, 801ecb0 <floor+0xf8>)
 801ec6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec70:	f7e1 fad4 	bl	800021c <__adddf3>
 801ec74:	2200      	movs	r2, #0
 801ec76:	2300      	movs	r3, #0
 801ec78:	f7e1 ff16 	bl	8000aa8 <__aeabi_dcmpgt>
 801ec7c:	2800      	cmp	r0, #0
 801ec7e:	d0bf      	beq.n	801ec00 <floor+0x48>
 801ec80:	2c00      	cmp	r4, #0
 801ec82:	da02      	bge.n	801ec8a <floor+0xd2>
 801ec84:	2e14      	cmp	r6, #20
 801ec86:	d103      	bne.n	801ec90 <floor+0xd8>
 801ec88:	3401      	adds	r4, #1
 801ec8a:	ea25 0507 	bic.w	r5, r5, r7
 801ec8e:	e7b7      	b.n	801ec00 <floor+0x48>
 801ec90:	2301      	movs	r3, #1
 801ec92:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ec96:	fa03 f606 	lsl.w	r6, r3, r6
 801ec9a:	4435      	add	r5, r6
 801ec9c:	4545      	cmp	r5, r8
 801ec9e:	bf38      	it	cc
 801eca0:	18e4      	addcc	r4, r4, r3
 801eca2:	e7f2      	b.n	801ec8a <floor+0xd2>
 801eca4:	2500      	movs	r5, #0
 801eca6:	462c      	mov	r4, r5
 801eca8:	e7aa      	b.n	801ec00 <floor+0x48>
 801ecaa:	bf00      	nop
 801ecac:	f3af 8000 	nop.w
 801ecb0:	8800759c 	.word	0x8800759c
 801ecb4:	7e37e43c 	.word	0x7e37e43c
 801ecb8:	bff00000 	.word	0xbff00000
 801ecbc:	000fffff 	.word	0x000fffff

0801ecc0 <_init>:
 801ecc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ecc2:	bf00      	nop
 801ecc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ecc6:	bc08      	pop	{r3}
 801ecc8:	469e      	mov	lr, r3
 801ecca:	4770      	bx	lr

0801eccc <_fini>:
 801eccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ecce:	bf00      	nop
 801ecd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ecd2:	bc08      	pop	{r3}
 801ecd4:	469e      	mov	lr, r3
 801ecd6:	4770      	bx	lr
