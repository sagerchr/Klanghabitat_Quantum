/*********************************************************************
*                                                                    *
*                SEGGER Microcontroller GmbH & Co. KG                *
*        Solutions for real time microcontroller applications        *
*                                                                    *
**********************************************************************
*                                                                    *
* C-file generated by:                                               *
*                                                                    *
*        GUI_Builder for emWin version 5.40                          *
*        Compiled Jun 22 2017, 10:13:26                              *
*        (c) 2017 Segger Microcontroller GmbH & Co. KG               *
*                                                                    *
**********************************************************************
*                                                                    *
*        Internet: www.segger.com  Support: support@segger.com       *
*                                                                    *
**********************************************************************
*/

// USER START (Optionally insert additional includes)
// USER END
#include "GUI_App.h"
#include "DIALOG.h"
#include "usb_device.h"
#include "math.h"
#include "main.h"
#include "settings.h"
#include "GUI.h"
#include "stm32f4xx_hal.h"
#include "GuiElements/AudioMeter.h"
#include "GuiElements/Controlls.h"
#include "UART_IO.h"
/*********************************************************************
*
*       Defines
*
**********************************************************************
*/
I2C_HandleTypeDef hi2c1;
char Value;
#define ID_WINDOW_0  (GUI_ID_USER + 0x00)

uint8_t byte;
DMA_HandleTypeDef hdma_usart6_rx;
UART_HandleTypeDef huart6;
//UART_HandleTypeDef huart6;
// USER START (Optionally insert additional defines)
// USER END



TS_StateTypeDef TS_State;

uint32_t avCH1;
uint32_t maxCH1;

int16_t  ringBufferSim[810];
uint16_t samples[250];
int p = 0;


//Interface Variablen
int X = 0; //TOUCH X
int Y = 0; //TOUCH Y

int adc1 = 0.0;
float adc1_ist = 0.0;
float adc1_volt = 0.0;
float adc1_db = 0.0;
float smooth1= 0.0;
float peaksmooth1= 0.0;
float diff1 = 0.0;


int adc2 = 0.0;
float adc2_ist = 0.0;
float adc2_volt = 0.0;
float adc2_db = 0.0;
float smooth2= 0.0;
float peaksmooth2= 0.0;
float diff2 = 0.0;

int adc3 = 0.0;
float adc3_ist = 0.0;
float adc3_volt = 0.0;
float adc3_db = 0.0;
float smooth3= 0.0;
float peaksmooth3= 0.0;
float diff3 = 0.0;

int adc4 = 0.0;
float adc4_ist = 0.0;
float adc4_volt = 0.0;
float adc4_db = 0.0;
float smooth4= 0.0;
float peaksmooth4= 0.0;
float diff4 = 0.0;

int watchdog= 0;
int left = 0;
int right = 0;
int pots[6];



char str[12];

begin = 0;
int refresh =0;

int once = 0;
int Y_Right = 0;
int Y_Left = 0;

int levelIN1 = 0;
int levelIN2 = 0;
uint8_t buffer[10];


int maxValueLeft = 0;
int newValueLeft = 0;
int maxValueRight = 0;
int newValueRight = 0;

int maxValueLeftOUT = 0;
int newValueLeftOUT = 0;
int maxValueRightOUT = 0;
int newValueRightOUT = 0;

int reset = 0;

float test = 0.0;

float leftIN = 0.0;
float rightIN = 0.0;

/*********************************************************************
*
*       Static code
*
**********************************************************************
*/
/*********************************************************************
*
*       _GetImageById
*/


// USER START (Optionally insert additional static code)


// USER END

/*********************************************************************
*
*       _cbDialog
*///

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){

	BSP_LED_Toggle(LED1);
   	UARTRECIVER(); //Recive Data from UART --> UARTDATA

	newValueLeft = UARTDATA[6];
	newValueRight = UARTDATA[7];
	newValueLeftOUT = UARTDATA[10];
	newValueRightOUT = UARTDATA[11];

	if(maxValueLeft < newValueLeft){
		maxValueLeft = newValueLeft;
	}

	if(maxValueRight < newValueRight){
		maxValueRight = newValueRight;
	}

	if(maxValueLeftOUT < newValueLeftOUT){
		maxValueLeftOUT = newValueLeftOUT;
	}

	if(maxValueRightOUT < newValueRightOUT){
		maxValueRightOUT = newValueRightOUT;
	}


	if(reset == 1){
		if(maxValueLeft==0){
		adc1 = 1;
		}
		else{
		adc1 = maxValueLeft;
		}
		if(maxValueRight==0){
		adc2 = 1;
		}
		else{
		adc2 = maxValueRight;
		}
		if(maxValueLeftOUT==0){
		adc3 = 1;
		}
		else{
		adc3 = maxValueLeftOUT;
		}
		if(maxValueRightOUT==0){
		adc4 = 1;
		}
		else{
		adc4 = maxValueRightOUT;
		}
		maxValueLeft = 0;
		maxValueRight = 0;
		maxValueLeftOUT = 0;
		maxValueRightOUT = 0;
		reset = 0;
	}


}



static void _cbDialog(WM_MESSAGE * pMsg) {


  // USER END


  switch (pMsg->MsgId) {
  case WM_PAINT:
	  reset = 1;
	  HAL_GPIO_TogglePin(GPIOA, LAMP1_Pin);
    break;

  default:
	    reset = 1;
    WM_DefaultProc(pMsg);

  }




    HAL_GPIO_TogglePin(GPIOG, LAMP2_Pin);
	  GUI_SetBkColor(GUI_DARKGRAY);
	  GUI_DCACHE_Clear(0);
	  GUI_Clear();


	  int32_t INT;
	   /************Input Data to float**************/
	   INT = UARTDATA[15] 	|
	   		(UARTDATA[14] << 8) 	|
	   		(UARTDATA[13] << 16) 	|
	   		(UARTDATA[12] << 24);

	   memcpy(&test, &INT, sizeof(test));
	   GUI_SetColor(GUI_LIGHTGRAY);
	   GUI_SetFont(&GUI_FontD24x32);
	   leftIN = test;
	   drawFloatNumber(250,10,test,"dB","");
	   /*********************************************/

	   /************Input Data to float**************/
	   INT = UARTDATA[19] 	|
	   		(UARTDATA[18] << 8) 	|
	   		(UARTDATA[17] << 16) 	|
	   		(UARTDATA[16] << 24);

	   memcpy(&test, &INT, sizeof(test));
	   GUI_SetColor(GUI_LIGHTGRAY);
	   GUI_SetFont(&GUI_FontD24x32);
	   rightIN = test;
	   drawFloatNumber(250,50,test,"dB","");
	   /*********************************************/



     drawWaveFormUartRight(30,280,adc1);
     drawWaveFormUartLeft(420,280,adc2);


     adc1_ist = adc1;
     adc1_volt = (adc1/255.00)*3.3;
     adc1_db = 20*log(adc1_volt/0.775);

     adc2_ist = adc2;
	 adc2_volt = (adc2/255.00)*3.3;
	 adc2_db = 20*log(adc2_volt/0.775);

     adc3_ist = adc3;
     adc3_volt = (adc3/255.00)*3.3;
     adc3_db = 20*log(adc3_volt/0.775);

     adc4_ist = adc4;
	 adc4_volt = (adc4/255.00)*3.3;
	 adc4_db = 20*log(adc4_volt/0.775);


	 adc1_db = (adc1_db+60)*3;
	 adc2_db = (adc2_db+60)*3;
	 adc3_db = (adc3_db+60)*3;
	 adc4_db = (adc4_db+60)*3;



	 if(adc1_db > -100){
		 diff1 = adc1_db-smooth1;
	 }
	 if(adc2_db > -100){
		 diff2 = adc2_db-smooth2;
	 }
	 if(adc3_db > -100){
		 diff3 = adc3_db-smooth3;
	 }
	 if(adc4_db > -100){
		 diff4 = adc4_db-smooth4;
	 }


	 if(diff1<0){
		 smooth1 = smooth1+(0.055*diff1);
	 }
	 else{
		 smooth1 = smooth1+(1*diff1);
	 }

	 if((adc1_db-peaksmooth1)<0){
		 peaksmooth1 = peaksmooth1+(0.01*diff1);
	 }
	 else {
		 peaksmooth1= peaksmooth1+(1*diff1);
	 }


	 if(diff2<0){
		 smooth2 = smooth2+(0.055*diff2);
	 }
	 else{
		 smooth2 = smooth2+(1*diff2);
	 }

	 if((adc2_db-peaksmooth2)<0){
		 peaksmooth2 = peaksmooth2+(0.01*diff2);
	 }
	 else {
		 peaksmooth2 = peaksmooth2+(1*diff2);
	 }



	 if(diff3<0){
		 smooth3 = smooth3+(0.055*diff3);
	 }
	 else{
		 smooth3 = smooth3+(1*diff3);
	 }

	 if((adc3_db-peaksmooth3)<0){
		 peaksmooth3 = peaksmooth3+(0.01*diff3);
	 }
	 else {
		 peaksmooth3 = peaksmooth3+(1*diff3);
	 }



	 if(diff4<0){
		 smooth4 = smooth4+(0.055*diff4);
	 }
	 else{
		 smooth4 = smooth4+(1*diff4);
	 }

	 if((adc4_db-peaksmooth4)<0){
		 peaksmooth4 = peaksmooth4+(0.01*diff4);
	 }
	 else {
		 peaksmooth4 = peaksmooth4+(1*diff4);
	 }



  	  BSP_TS_GetState(&TS_State);
  	  	  if(TS_State.touchX[0]>30 && TS_State.touchX[0]<750 && TS_State.touchY[0] > 30 && TS_State.touchY[0] < 450){
     	      X = TS_State.touchX[0];
     		  Y = TS_State.touchY[0];
     		  HAL_GPIO_TogglePin(GPIOG, LAMP4_Pin);

     		 if(X<400){
     		  Y_Left  = Y;
     		 }
     		 if(X>400){
     		  Y_Right  = Y;
     		 }
  	  	  }

  	  	left = Y_Left;
		right = Y_Right;



	drawBarHorizontal (350, 170,leftIN,(130-leftIN), "", 1);
	drawBarHorizontal (450, 170,peaksmooth2,smooth2, "", 0);
	drawBarHorizontal (350, 200,peaksmooth3,smooth3, "", 1);
	drawBarHorizontal (450, 200,peaksmooth4,smooth4, "", 0);


	 drawDashedLine(10, Y_Left, 350, Y_Left);
	 drawDashedLine(450, Y_Right, 790, Y_Right);

	 ENCODER_UPDATE(); //Display Encoder Values
	 GUI_SetColor(GUI_GRAY);
	 GUI_DrawRoundedFrame(5,   350, 200, 465, 5,4);
	 GUI_DrawRoundedFrame(200, 350, 400, 465, 5,4);
	 GUI_DrawRoundedFrame(400, 350, 600, 465, 5,4);
	 GUI_DrawRoundedFrame(600, 350, 875, 465, 5,4);

	 GUI_SetColor(GUI_LIGHTGRAY);
	 GUI_SetFont(&GUI_FontD24x32);
	 drawFloatNumber(10,10,adc1,"","");
	 GUI_SetColor(GUI_LIGHTGRAY);
	 GUI_SetFont(&GUI_FontD24x32);
	 drawFloatNumber(10,50,adc2,"","");

	 GUI_SetColor(GUI_LIGHTGRAY);
	 GUI_SetFont(&GUI_FontD24x32);
	 drawFloatNumber(700,10,adc3,"","");
	 GUI_SetColor(GUI_LIGHTGRAY);
	 GUI_SetFont(&GUI_FontD24x32);
	 drawFloatNumber(700,50,adc4,"","");

	 GUI_SetColor(GUI_GRAY);
	 GUI_DrawRoundedFrame(5,   5, 200, 100, 5,4);
	 GUI_DrawRoundedFrame(200, 5, 400, 100, 5,4);
	 GUI_DrawRoundedFrame(400, 5, 600, 100, 5,4);
	 GUI_DrawRoundedFrame(600, 5, 875, 100, 5,4);
/*==================================================*/






UARTDATA[50]=huart6.hdmarx->Instance->NDTR;

drawFloatNumber(500,50,UARTDATA[50],"","");






}





/*********************************************************************
*
*       Public code
*
**********************************************************************
*/
/*********************************************************************
*
*       CreateWindow
*/



WM_HWIN CreateWindow(void) {
  //WM_HWIN hWin;
  WM_HWIN hParent;

 // hWin = GUI_CreateDialogBox(_aDialogCreate, GUI_COUNTOF(_aDialogCreate), _cbDialog, WM_HBKWIN, 0, 0);
  //hParent = WM_CreateWindow(0, 0, 1, 1, WM_CF_SHOW, _cbDialog, 0); //THIS IS WORKING QUITE OK!!!
  hParent = WM_CreateWindow(200, 0, 1, 1,WM_CF_SHOW, _cbDialog, 0);
 // WM_Paint(hWin);

  WM_MULTIBUF_Enable(1);

  //return hWin;
  return hParent;
}

// USER START (Optionally insert additional public code)


// USER END

/*************************** End of file ****************************/
